; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 8, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 8, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 3, !dbg !19
  %18 = and i32 %17, 31, !dbg !19
  %19 = or disjoint i32 %18, 32, !dbg !19
  %20 = or disjoint i32 %14, %18, !dbg !20
  %21 = or disjoint i32 %14, %19, !dbg !20
  %22 = or disjoint i32 %20, 64, !dbg !20
  %23 = or disjoint i32 %20, 96, !dbg !20
  %24 = shl nsw i32 %13, 6, !dbg !21
  %25 = shl i32 %15, 3, !dbg !22
  %26 = and i32 %25, 8, !dbg !22
  %27 = and i32 %25, 16, !dbg !22
  %28 = and i32 %25, 24, !dbg !22
  %29 = and i32 %25, 32, !dbg !22
  %30 = and i32 %25, 56, !dbg !22
  %31 = or disjoint i32 %24, %30, !dbg !23
  %32 = srem i32 %20, 512, !dbg !24
  %33 = srem i32 %21, 512, !dbg !24
  %34 = srem i32 %22, 512, !dbg !24
  %35 = srem i32 %23, 512, !dbg !24
  %36 = srem i32 %31, 64, !dbg !25
  %37 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %38 = shl nsw i32 %32, 9, !dbg !27
  %39 = shl nsw i32 %33, 9, !dbg !27
  %40 = shl nsw i32 %34, 9, !dbg !27
  %41 = shl nsw i32 %35, 9, !dbg !27
  %42 = shl i32 %37, 18, !dbg !28
  %43 = or disjoint i32 %30, %42, !dbg !29
  %44 = add i32 %43, %38, !dbg !30
  %45 = add i32 %43, %39, !dbg !30
  %46 = add i32 %43, %40, !dbg !30
  %47 = add i32 %43, %41, !dbg !30
  %48 = sext i32 %44 to i64, !dbg !31
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !31
  %50 = sext i32 %45 to i64, !dbg !31
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = sext i32 %46 to i64, !dbg !31
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !31
  %54 = sext i32 %47 to i64, !dbg !31
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = shl nuw nsw i32 %18, 12, !dbg !32
  %57 = shl nuw nsw i32 %19, 12, !dbg !32
  %58 = shl i32 %37, 6, !dbg !33
  %59 = add i32 %36, %58, !dbg !34
  %60 = add i32 %59, %56, !dbg !35
  %61 = add i32 %59, %57, !dbg !35
  %62 = sext i32 %60 to i64, !dbg !36
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !36
  %64 = sext i32 %61 to i64, !dbg !36
  %65 = getelementptr bfloat, ptr addrspace(1) %1, i64 %64, !dbg !36
  %66 = xor i32 %25, %15, !dbg !37
  %67 = and i32 %66, 56, !dbg !37
  %68 = shl nuw nsw i32 %18, 6, !dbg !37
  %69 = or disjoint i32 %68, %67, !dbg !37
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %69, !dbg !37
  %71 = or disjoint i32 %69, 2048, !dbg !37
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %71, !dbg !37
  %73 = or disjoint i32 %69, 4096, !dbg !37
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %73, !dbg !37
  %75 = or disjoint i32 %69, 6144, !dbg !37
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %49, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %72, ptr addrspace(1) %51, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %74, ptr addrspace(1) %53, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %76, ptr addrspace(1) %55, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %69, !dbg !38
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %71, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %77, ptr addrspace(1) %63, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %65, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %79 = getelementptr i8, ptr addrspace(1) %49, i64 128, !dbg !39
  %80 = getelementptr i8, ptr addrspace(1) %51, i64 128, !dbg !39
  %81 = getelementptr i8, ptr addrspace(1) %53, i64 128, !dbg !39
  %82 = getelementptr i8, ptr addrspace(1) %55, i64 128, !dbg !39
  %83 = getelementptr i8, ptr addrspace(1) %63, i64 524288, !dbg !40
  %84 = getelementptr i8, ptr addrspace(1) %65, i64 524288, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %69, !dbg !37
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %71, !dbg !37
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %73, !dbg !37
  %88 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %75, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %85, ptr addrspace(1) %79, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %80, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %87, ptr addrspace(1) %81, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %88, ptr addrspace(1) %82, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %89 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %69, !dbg !38
  %90 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %71, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %89, ptr addrspace(1) %83, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %90, ptr addrspace(1) %84, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %91 = getelementptr i8, ptr addrspace(1) %49, i64 256, !dbg !39
  %92 = getelementptr i8, ptr addrspace(1) %51, i64 256, !dbg !39
  %93 = getelementptr i8, ptr addrspace(1) %53, i64 256, !dbg !39
  %94 = getelementptr i8, ptr addrspace(1) %55, i64 256, !dbg !39
  %95 = getelementptr i8, ptr addrspace(1) %63, i64 1048576, !dbg !40
  %96 = getelementptr i8, ptr addrspace(1) %65, i64 1048576, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %69, !dbg !37
  %98 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %71, !dbg !37
  %99 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %73, !dbg !37
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %75, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %97, ptr addrspace(1) %91, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %92, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %99, ptr addrspace(1) %93, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %94, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %69, !dbg !38
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %71, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %101, ptr addrspace(1) %95, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %96, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %103 = getelementptr i8, ptr addrspace(1) %49, i64 384, !dbg !39
  %104 = getelementptr i8, ptr addrspace(1) %51, i64 384, !dbg !39
  %105 = getelementptr i8, ptr addrspace(1) %53, i64 384, !dbg !39
  %106 = getelementptr i8, ptr addrspace(1) %55, i64 384, !dbg !39
  %107 = getelementptr i8, ptr addrspace(1) %63, i64 1572864, !dbg !40
  %108 = getelementptr i8, ptr addrspace(1) %65, i64 1572864, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %109 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %69, !dbg !37
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %71, !dbg !37
  %111 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %73, !dbg !37
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %75, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %109, ptr addrspace(1) %103, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %110, ptr addrspace(1) %104, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %111, ptr addrspace(1) %105, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %106, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %113 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %69, !dbg !38
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %71, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %113, ptr addrspace(1) %107, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %114, ptr addrspace(1) %108, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %115 = and i32 %15, 15
  %116 = lshr exact i32 %16, 1
  %117 = xor i32 %30, %116
  %118 = lshr i32 %15, 2
  %119 = and i32 %118, 16
  %120 = or disjoint i32 %119, %115
  %121 = lshr i32 %15, 2
  %122 = and i32 %121, 32
  %123 = or disjoint i32 %120, %122
  %124 = shl nuw nsw i32 %123, 6
  %125 = or disjoint i32 %124, %117
  %126 = or disjoint i32 %26, 16
  %127 = xor i32 %126, %27
  %128 = or disjoint i32 %127, %29
  %129 = xor i32 %128, %116
  %130 = or disjoint i32 %129, %124
  %131 = or disjoint i32 %28, 32
  %132 = xor i32 %131, %29
  %133 = xor i32 %132, %116
  %134 = or disjoint i32 %133, %124
  %135 = or disjoint i32 %26, 48
  %and.ra = and i32 %25, 48
  %136 = xor i32 %135, %and.ra
  %137 = xor i32 %136, %116
  %138 = or disjoint i32 %137, %124
  %139 = or disjoint i32 %124, 4096
  %140 = or disjoint i32 %139, %117
  %141 = or disjoint i32 %129, %139
  %142 = or disjoint i32 %139, %133
  %143 = or disjoint i32 %139, %137
  %144 = lshr i32 %15, 2
  %145 = and i32 %144, 8
  %146 = xor i32 %30, %145
  %147 = shl i32 %15, 6
  %148 = and i32 %147, 1984
  %149 = or disjoint i32 %146, %148
  %150 = or disjoint i32 %148, 2048
  %151 = or disjoint i32 %146, %150
  %152 = xor i32 %128, %145
  %153 = or disjoint i32 %152, %148
  %154 = or disjoint i32 %152, %150
  %155 = xor i32 %132, %145
  %156 = or disjoint i32 %155, %148
  %157 = or disjoint i32 %155, %150
  %158 = xor i32 %136, %145
  %159 = or disjoint i32 %158, %148
  %160 = or disjoint i32 %158, %150
  br label %161, !dbg !41

161:                                              ; preds = %4, %161
  %162 = phi i32 [ -1, %4 ], [ %200, %161 ]
  %163 = phi i32 [ 3, %4 ], [ %483, %161 ]
  %.pn79182 = phi ptr addrspace(1) [ %108, %4 ], [ %480, %161 ]
  %.pn95181 = phi ptr addrspace(1) [ %107, %4 ], [ %479, %161 ]
  %.pn15180 = phi ptr addrspace(1) [ %106, %4 ], [ %478, %161 ]
  %.pn31179 = phi ptr addrspace(1) [ %105, %4 ], [ %477, %161 ]
  %.pn47178 = phi ptr addrspace(1) [ %104, %4 ], [ %476, %161 ]
  %.pn63177 = phi ptr addrspace(1) [ %103, %4 ], [ %475, %161 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %436, %161 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %437, %161 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %438, %161 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %439, %161 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %441, %161 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %442, %161 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %443, %161 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %444, %161 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %446, %161 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %447, %161 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %448, %161 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %449, %161 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %451, %161 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %452, %161 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %453, %161 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %454, %161 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %456, %161 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %457, %161 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %458, %161 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %459, %161 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %461, %161 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %462, %161 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %463, %161 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %464, %161 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %466, %161 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %467, %161 ]
  %190 = phi float [ 0.000000e+00, %4 ], [ %468, %161 ]
  %191 = phi float [ 0.000000e+00, %4 ], [ %469, %161 ]
  %192 = phi float [ 0.000000e+00, %4 ], [ %471, %161 ]
  %193 = phi float [ 0.000000e+00, %4 ], [ %472, %161 ]
  %194 = phi float [ 0.000000e+00, %4 ], [ %473, %161 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %474, %161 ]
  %196 = phi i32 [ 0, %4 ], [ %493, %161 ]
  %197 = icmp samesign ult i32 %196, 256, !dbg !41
  %198 = add i32 %162, 1, !dbg !41
  %199 = icmp slt i32 %198, 4, !dbg !41
  %200 = select i1 %199, i32 %198, i32 0, !dbg !41
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %.idx = shl i32 %200, 14, !dbg !37
  %201 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !37
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %125, !dbg !37
  %203 = ptrtoint ptr addrspace(3) %202 to i32, !dbg !37
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %203) #1, !dbg !37
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !37
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !37
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !37
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !37
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %130, !dbg !37
  %210 = ptrtoint ptr addrspace(3) %209 to i32, !dbg !37
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %210) #1, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !37
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !37
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !37
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %134, !dbg !37
  %217 = ptrtoint ptr addrspace(3) %216 to i32, !dbg !37
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %217) #1, !dbg !37
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !37
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !37
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !37
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !37
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %138, !dbg !37
  %224 = ptrtoint ptr addrspace(3) %223 to i32, !dbg !37
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #1, !dbg !37
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !37
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %140, !dbg !37
  %231 = ptrtoint ptr addrspace(3) %230 to i32, !dbg !37
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %231) #1, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !37
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %141, !dbg !37
  %238 = ptrtoint ptr addrspace(3) %237 to i32, !dbg !37
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %238) #1, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !37
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !37
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !37
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !37
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %142, !dbg !37
  %245 = ptrtoint ptr addrspace(3) %244 to i32, !dbg !37
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %245) #1, !dbg !37
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !37
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !37
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !37
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !37
  %251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %143, !dbg !37
  %252 = ptrtoint ptr addrspace(3) %251 to i32, !dbg !37
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %252) #1, !dbg !37
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !37
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !37
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !37
  %.idx142 = shl i32 %200, 13, !dbg !38
  %258 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx142, !dbg !38
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %149, !dbg !38
  %260 = ptrtoint ptr addrspace(3) %259 to i32, !dbg !38
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %260) #1, !dbg !38
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !38
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !38
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !38
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !38
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %151, !dbg !38
  %267 = ptrtoint ptr addrspace(3) %266 to i32, !dbg !38
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %267) #1, !dbg !38
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !38
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !38
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !38
  %273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %153, !dbg !38
  %274 = ptrtoint ptr addrspace(3) %273 to i32, !dbg !38
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %274) #1, !dbg !38
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !38
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !38
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !38
  %280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %154, !dbg !38
  %281 = ptrtoint ptr addrspace(3) %280 to i32, !dbg !38
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %281) #1, !dbg !38
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !38
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !38
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !38
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !38
  %287 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %156, !dbg !38
  %288 = ptrtoint ptr addrspace(3) %287 to i32, !dbg !38
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %288) #1, !dbg !38
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !38
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !38
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !38
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !38
  %294 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %157, !dbg !38
  %295 = ptrtoint ptr addrspace(3) %294 to i32, !dbg !38
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %295) #1, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !38
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !38
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !38
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !38
  %301 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %159, !dbg !38
  %302 = ptrtoint ptr addrspace(3) %301 to i32, !dbg !38
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %302) #1, !dbg !38
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !38
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !38
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !38
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !38
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %258, i32 %160, !dbg !38
  %309 = ptrtoint ptr addrspace(3) %308 to i32, !dbg !38
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %309) #1, !dbg !38
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !38
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !38
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !38
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !38
  %315 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %205, i32 %206, i32 %207, i32 %208, i32 %262, i32 %263) #1, !dbg !42
  %316 = extractvalue { float, float, float, float } %315, 0, !dbg !42
  %317 = extractvalue { float, float, float, float } %315, 1, !dbg !42
  %318 = extractvalue { float, float, float, float } %315, 2, !dbg !42
  %319 = extractvalue { float, float, float, float } %315, 3, !dbg !42
  %320 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %205, i32 %206, i32 %207, i32 %208, i32 %276, i32 %277) #1, !dbg !42
  %321 = extractvalue { float, float, float, float } %320, 0, !dbg !42
  %322 = extractvalue { float, float, float, float } %320, 1, !dbg !42
  %323 = extractvalue { float, float, float, float } %320, 2, !dbg !42
  %324 = extractvalue { float, float, float, float } %320, 3, !dbg !42
  %325 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %205, i32 %206, i32 %207, i32 %208, i32 %290, i32 %291) #1, !dbg !42
  %326 = extractvalue { float, float, float, float } %325, 0, !dbg !42
  %327 = extractvalue { float, float, float, float } %325, 1, !dbg !42
  %328 = extractvalue { float, float, float, float } %325, 2, !dbg !42
  %329 = extractvalue { float, float, float, float } %325, 3, !dbg !42
  %330 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %205, i32 %206, i32 %207, i32 %208, i32 %304, i32 %305) #1, !dbg !42
  %331 = extractvalue { float, float, float, float } %330, 0, !dbg !42
  %332 = extractvalue { float, float, float, float } %330, 1, !dbg !42
  %333 = extractvalue { float, float, float, float } %330, 2, !dbg !42
  %334 = extractvalue { float, float, float, float } %330, 3, !dbg !42
  %335 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %233, i32 %234, i32 %235, i32 %236, i32 %262, i32 %263) #1, !dbg !42
  %336 = extractvalue { float, float, float, float } %335, 0, !dbg !42
  %337 = extractvalue { float, float, float, float } %335, 1, !dbg !42
  %338 = extractvalue { float, float, float, float } %335, 2, !dbg !42
  %339 = extractvalue { float, float, float, float } %335, 3, !dbg !42
  %340 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %184, float %185, float %186, float %187, i32 %233, i32 %234, i32 %235, i32 %236, i32 %276, i32 %277) #1, !dbg !42
  %341 = extractvalue { float, float, float, float } %340, 0, !dbg !42
  %342 = extractvalue { float, float, float, float } %340, 1, !dbg !42
  %343 = extractvalue { float, float, float, float } %340, 2, !dbg !42
  %344 = extractvalue { float, float, float, float } %340, 3, !dbg !42
  %345 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %188, float %189, float %190, float %191, i32 %233, i32 %234, i32 %235, i32 %236, i32 %290, i32 %291) #1, !dbg !42
  %346 = extractvalue { float, float, float, float } %345, 0, !dbg !42
  %347 = extractvalue { float, float, float, float } %345, 1, !dbg !42
  %348 = extractvalue { float, float, float, float } %345, 2, !dbg !42
  %349 = extractvalue { float, float, float, float } %345, 3, !dbg !42
  %350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %233, i32 %234, i32 %235, i32 %236, i32 %304, i32 %305) #1, !dbg !42
  %351 = extractvalue { float, float, float, float } %350, 0, !dbg !42
  %352 = extractvalue { float, float, float, float } %350, 1, !dbg !42
  %353 = extractvalue { float, float, float, float } %350, 2, !dbg !42
  %354 = extractvalue { float, float, float, float } %350, 3, !dbg !42
  %355 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %316, float %317, float %318, float %319, i32 %212, i32 %213, i32 %214, i32 %215, i32 %264, i32 %265) #1, !dbg !42
  %356 = extractvalue { float, float, float, float } %355, 0, !dbg !42
  %357 = extractvalue { float, float, float, float } %355, 1, !dbg !42
  %358 = extractvalue { float, float, float, float } %355, 2, !dbg !42
  %359 = extractvalue { float, float, float, float } %355, 3, !dbg !42
  %360 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %321, float %322, float %323, float %324, i32 %212, i32 %213, i32 %214, i32 %215, i32 %278, i32 %279) #1, !dbg !42
  %361 = extractvalue { float, float, float, float } %360, 0, !dbg !42
  %362 = extractvalue { float, float, float, float } %360, 1, !dbg !42
  %363 = extractvalue { float, float, float, float } %360, 2, !dbg !42
  %364 = extractvalue { float, float, float, float } %360, 3, !dbg !42
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %212, i32 %213, i32 %214, i32 %215, i32 %292, i32 %293) #1, !dbg !42
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !42
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !42
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !42
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !42
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %331, float %332, float %333, float %334, i32 %212, i32 %213, i32 %214, i32 %215, i32 %306, i32 %307) #1, !dbg !42
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !42
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !42
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !42
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !42
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %336, float %337, float %338, float %339, i32 %240, i32 %241, i32 %242, i32 %243, i32 %264, i32 %265) #1, !dbg !42
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !42
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !42
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !42
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !42
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %341, float %342, float %343, float %344, i32 %240, i32 %241, i32 %242, i32 %243, i32 %278, i32 %279) #1, !dbg !42
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !42
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !42
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !42
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !42
  %385 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %346, float %347, float %348, float %349, i32 %240, i32 %241, i32 %242, i32 %243, i32 %292, i32 %293) #1, !dbg !42
  %386 = extractvalue { float, float, float, float } %385, 0, !dbg !42
  %387 = extractvalue { float, float, float, float } %385, 1, !dbg !42
  %388 = extractvalue { float, float, float, float } %385, 2, !dbg !42
  %389 = extractvalue { float, float, float, float } %385, 3, !dbg !42
  %390 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %351, float %352, float %353, float %354, i32 %240, i32 %241, i32 %242, i32 %243, i32 %306, i32 %307) #1, !dbg !42
  %391 = extractvalue { float, float, float, float } %390, 0, !dbg !42
  %392 = extractvalue { float, float, float, float } %390, 1, !dbg !42
  %393 = extractvalue { float, float, float, float } %390, 2, !dbg !42
  %394 = extractvalue { float, float, float, float } %390, 3, !dbg !42
  %395 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %356, float %357, float %358, float %359, i32 %219, i32 %220, i32 %221, i32 %222, i32 %269, i32 %270) #1, !dbg !42
  %396 = extractvalue { float, float, float, float } %395, 0, !dbg !42
  %397 = extractvalue { float, float, float, float } %395, 1, !dbg !42
  %398 = extractvalue { float, float, float, float } %395, 2, !dbg !42
  %399 = extractvalue { float, float, float, float } %395, 3, !dbg !42
  %400 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %361, float %362, float %363, float %364, i32 %219, i32 %220, i32 %221, i32 %222, i32 %283, i32 %284) #1, !dbg !42
  %401 = extractvalue { float, float, float, float } %400, 0, !dbg !42
  %402 = extractvalue { float, float, float, float } %400, 1, !dbg !42
  %403 = extractvalue { float, float, float, float } %400, 2, !dbg !42
  %404 = extractvalue { float, float, float, float } %400, 3, !dbg !42
  %405 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %366, float %367, float %368, float %369, i32 %219, i32 %220, i32 %221, i32 %222, i32 %297, i32 %298) #1, !dbg !42
  %406 = extractvalue { float, float, float, float } %405, 0, !dbg !42
  %407 = extractvalue { float, float, float, float } %405, 1, !dbg !42
  %408 = extractvalue { float, float, float, float } %405, 2, !dbg !42
  %409 = extractvalue { float, float, float, float } %405, 3, !dbg !42
  %410 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %371, float %372, float %373, float %374, i32 %219, i32 %220, i32 %221, i32 %222, i32 %311, i32 %312) #1, !dbg !42
  %411 = extractvalue { float, float, float, float } %410, 0, !dbg !42
  %412 = extractvalue { float, float, float, float } %410, 1, !dbg !42
  %413 = extractvalue { float, float, float, float } %410, 2, !dbg !42
  %414 = extractvalue { float, float, float, float } %410, 3, !dbg !42
  %415 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %376, float %377, float %378, float %379, i32 %247, i32 %248, i32 %249, i32 %250, i32 %269, i32 %270) #1, !dbg !42
  %416 = extractvalue { float, float, float, float } %415, 0, !dbg !42
  %417 = extractvalue { float, float, float, float } %415, 1, !dbg !42
  %418 = extractvalue { float, float, float, float } %415, 2, !dbg !42
  %419 = extractvalue { float, float, float, float } %415, 3, !dbg !42
  %420 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %381, float %382, float %383, float %384, i32 %247, i32 %248, i32 %249, i32 %250, i32 %283, i32 %284) #1, !dbg !42
  %421 = extractvalue { float, float, float, float } %420, 0, !dbg !42
  %422 = extractvalue { float, float, float, float } %420, 1, !dbg !42
  %423 = extractvalue { float, float, float, float } %420, 2, !dbg !42
  %424 = extractvalue { float, float, float, float } %420, 3, !dbg !42
  %425 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %386, float %387, float %388, float %389, i32 %247, i32 %248, i32 %249, i32 %250, i32 %297, i32 %298) #1, !dbg !42
  %426 = extractvalue { float, float, float, float } %425, 0, !dbg !42
  %427 = extractvalue { float, float, float, float } %425, 1, !dbg !42
  %428 = extractvalue { float, float, float, float } %425, 2, !dbg !42
  %429 = extractvalue { float, float, float, float } %425, 3, !dbg !42
  %430 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %391, float %392, float %393, float %394, i32 %247, i32 %248, i32 %249, i32 %250, i32 %311, i32 %312) #1, !dbg !42
  %431 = extractvalue { float, float, float, float } %430, 0, !dbg !42
  %432 = extractvalue { float, float, float, float } %430, 1, !dbg !42
  %433 = extractvalue { float, float, float, float } %430, 2, !dbg !42
  %434 = extractvalue { float, float, float, float } %430, 3, !dbg !42
  %435 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %396, float %397, float %398, float %399, i32 %226, i32 %227, i32 %228, i32 %229, i32 %271, i32 %272) #1, !dbg !42
  %436 = extractvalue { float, float, float, float } %435, 0, !dbg !42
  %437 = extractvalue { float, float, float, float } %435, 1, !dbg !42
  %438 = extractvalue { float, float, float, float } %435, 2, !dbg !42
  %439 = extractvalue { float, float, float, float } %435, 3, !dbg !42
  %440 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %401, float %402, float %403, float %404, i32 %226, i32 %227, i32 %228, i32 %229, i32 %285, i32 %286) #1, !dbg !42
  %441 = extractvalue { float, float, float, float } %440, 0, !dbg !42
  %442 = extractvalue { float, float, float, float } %440, 1, !dbg !42
  %443 = extractvalue { float, float, float, float } %440, 2, !dbg !42
  %444 = extractvalue { float, float, float, float } %440, 3, !dbg !42
  %445 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %406, float %407, float %408, float %409, i32 %226, i32 %227, i32 %228, i32 %229, i32 %299, i32 %300) #1, !dbg !42
  %446 = extractvalue { float, float, float, float } %445, 0, !dbg !42
  %447 = extractvalue { float, float, float, float } %445, 1, !dbg !42
  %448 = extractvalue { float, float, float, float } %445, 2, !dbg !42
  %449 = extractvalue { float, float, float, float } %445, 3, !dbg !42
  %450 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %411, float %412, float %413, float %414, i32 %226, i32 %227, i32 %228, i32 %229, i32 %313, i32 %314) #1, !dbg !42
  %451 = extractvalue { float, float, float, float } %450, 0, !dbg !42
  %452 = extractvalue { float, float, float, float } %450, 1, !dbg !42
  %453 = extractvalue { float, float, float, float } %450, 2, !dbg !42
  %454 = extractvalue { float, float, float, float } %450, 3, !dbg !42
  %455 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %416, float %417, float %418, float %419, i32 %254, i32 %255, i32 %256, i32 %257, i32 %271, i32 %272) #1, !dbg !42
  %456 = extractvalue { float, float, float, float } %455, 0, !dbg !42
  %457 = extractvalue { float, float, float, float } %455, 1, !dbg !42
  %458 = extractvalue { float, float, float, float } %455, 2, !dbg !42
  %459 = extractvalue { float, float, float, float } %455, 3, !dbg !42
  %460 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %421, float %422, float %423, float %424, i32 %254, i32 %255, i32 %256, i32 %257, i32 %285, i32 %286) #1, !dbg !42
  %461 = extractvalue { float, float, float, float } %460, 0, !dbg !42
  %462 = extractvalue { float, float, float, float } %460, 1, !dbg !42
  %463 = extractvalue { float, float, float, float } %460, 2, !dbg !42
  %464 = extractvalue { float, float, float, float } %460, 3, !dbg !42
  %465 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %426, float %427, float %428, float %429, i32 %254, i32 %255, i32 %256, i32 %257, i32 %299, i32 %300) #1, !dbg !42
  %466 = extractvalue { float, float, float, float } %465, 0, !dbg !42
  %467 = extractvalue { float, float, float, float } %465, 1, !dbg !42
  %468 = extractvalue { float, float, float, float } %465, 2, !dbg !42
  %469 = extractvalue { float, float, float, float } %465, 3, !dbg !42
  %470 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %431, float %432, float %433, float %434, i32 %254, i32 %255, i32 %256, i32 %257, i32 %313, i32 %314) #1, !dbg !42
  %471 = extractvalue { float, float, float, float } %470, 0, !dbg !42
  %472 = extractvalue { float, float, float, float } %470, 1, !dbg !42
  %473 = extractvalue { float, float, float, float } %470, 2, !dbg !42
  %474 = extractvalue { float, float, float, float } %470, 3, !dbg !42
  %475 = getelementptr i8, ptr addrspace(1) %.pn63177, i64 128, !dbg !39
  %476 = getelementptr i8, ptr addrspace(1) %.pn47178, i64 128, !dbg !39
  %477 = getelementptr i8, ptr addrspace(1) %.pn31179, i64 128, !dbg !39
  %478 = getelementptr i8, ptr addrspace(1) %.pn15180, i64 128, !dbg !39
  %479 = getelementptr i8, ptr addrspace(1) %.pn95181, i64 524288, !dbg !40
  %480 = getelementptr i8, ptr addrspace(1) %.pn79182, i64 524288, !dbg !40
  %481 = add i32 %163, 1, !dbg !41
  %482 = icmp slt i32 %481, 4, !dbg !41
  %483 = select i1 %482, i32 %481, i32 0, !dbg !41
  %.idx143 = shl i32 %483, 14, !dbg !37
  %484 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx143, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %485 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %484, i32 %69, !dbg !37
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %484, i32 %71, !dbg !37
  %487 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %484, i32 %73, !dbg !37
  %488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %484, i32 %75, !dbg !37
  %489 = select i1 %197, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %485, ptr addrspace(1) %475, i32 %489) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %486, ptr addrspace(1) %476, i32 %489) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %487, ptr addrspace(1) %477, i32 %489) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %488, ptr addrspace(1) %478, i32 %489) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx144 = shl i32 %483, 13, !dbg !38
  %490 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx144, !dbg !38
  %491 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %490, i32 %69, !dbg !38
  %492 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %490, i32 %71, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %491, ptr addrspace(1) %479, i32 %489) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %492, ptr addrspace(1) %480, i32 %489) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %493 = add nuw nsw i32 %196, 64, !dbg !41
  %494 = icmp samesign ult i32 %196, 448, !dbg !41
  br i1 %494, label %161, label %495, !dbg !41

495:                                              ; preds = %161
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %496 = icmp slt i32 %20, 512, !dbg !43
  %497 = icmp slt i32 %21, 512, !dbg !43
  %498 = icmp slt i32 %22, 512, !dbg !43
  %499 = icmp slt i32 %23, 512, !dbg !43
  %500 = icmp slt i32 %31, 64, !dbg !44
  %501 = and i1 %496, %500, !dbg !45
  %502 = and i1 %497, %500, !dbg !45
  %503 = and i1 %498, %500, !dbg !45
  %504 = and i1 %499, %500, !dbg !45
  %505 = shl i32 %20, 6, !dbg !46
  %506 = shl i32 %21, 6, !dbg !46
  %507 = shl i32 %22, 6, !dbg !46
  %508 = shl i32 %23, 6, !dbg !46
  %509 = shl i32 %37, 15, !dbg !47
  %510 = add i32 %31, %509, !dbg !48
  %511 = add i32 %510, %505, !dbg !49
  %512 = add i32 %510, %506, !dbg !49
  %513 = add i32 %507, %509, !dbg !48
  %514 = add i32 %513, %31, !dbg !49
  %515 = add i32 %508, %509, !dbg !48
  %516 = add i32 %515, %31, !dbg !49
  %517 = sext i32 %511 to i64, !dbg !50
  %518 = getelementptr bfloat, ptr addrspace(1) %2, i64 %517, !dbg !50
  %519 = sext i32 %512 to i64, !dbg !50
  %520 = getelementptr bfloat, ptr addrspace(1) %2, i64 %519, !dbg !50
  %521 = sext i32 %514 to i64, !dbg !50
  %522 = getelementptr bfloat, ptr addrspace(1) %2, i64 %521, !dbg !50
  %523 = sext i32 %516 to i64, !dbg !50
  %524 = getelementptr bfloat, ptr addrspace(1) %2, i64 %523, !dbg !50
  %525 = fptrunc float %436 to bfloat, !dbg !51
  %526 = fptrunc float %437 to bfloat, !dbg !51
  %527 = fptrunc float %438 to bfloat, !dbg !51
  %528 = fptrunc float %439 to bfloat, !dbg !51
  %529 = fptrunc float %441 to bfloat, !dbg !51
  %530 = fptrunc float %442 to bfloat, !dbg !51
  %531 = fptrunc float %443 to bfloat, !dbg !51
  %532 = fptrunc float %444 to bfloat, !dbg !51
  %533 = fptrunc float %446 to bfloat, !dbg !51
  %534 = fptrunc float %447 to bfloat, !dbg !51
  %535 = fptrunc float %448 to bfloat, !dbg !51
  %536 = fptrunc float %449 to bfloat, !dbg !51
  %537 = fptrunc float %451 to bfloat, !dbg !51
  %538 = fptrunc float %452 to bfloat, !dbg !51
  %539 = fptrunc float %453 to bfloat, !dbg !51
  %540 = fptrunc float %454 to bfloat, !dbg !51
  %541 = fptrunc float %456 to bfloat, !dbg !51
  %542 = fptrunc float %457 to bfloat, !dbg !51
  %543 = fptrunc float %458 to bfloat, !dbg !51
  %544 = fptrunc float %459 to bfloat, !dbg !51
  %545 = fptrunc float %461 to bfloat, !dbg !51
  %546 = fptrunc float %462 to bfloat, !dbg !51
  %547 = fptrunc float %463 to bfloat, !dbg !51
  %548 = fptrunc float %464 to bfloat, !dbg !51
  %549 = fptrunc float %466 to bfloat, !dbg !51
  %550 = fptrunc float %467 to bfloat, !dbg !51
  %551 = fptrunc float %468 to bfloat, !dbg !51
  %552 = fptrunc float %469 to bfloat, !dbg !51
  %553 = fptrunc float %471 to bfloat, !dbg !51
  %554 = fptrunc float %472 to bfloat, !dbg !51
  %555 = fptrunc float %473 to bfloat, !dbg !51
  %556 = fptrunc float %474 to bfloat, !dbg !51
  %557 = shl i32 %15, 1, !dbg !51
  %558 = and i32 %557, 6, !dbg !51
  %559 = shl i32 %15, 4, !dbg !51
  %560 = and i32 %559, 192, !dbg !51
  %561 = or disjoint i32 %560, %558, !dbg !51
  %562 = shl nuw nsw i32 %16, 4, !dbg !51
  %563 = or disjoint i32 %561, %562, !dbg !51
  %564 = and i32 %559, 3072, !dbg !51
  %565 = or disjoint i32 %563, %564, !dbg !51
  %566 = or disjoint i32 %565, %145, !dbg !51
  %567 = and i32 %25, 2040, !dbg !51
  %568 = lshr i32 %565, 3, !dbg !51
  %569 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %568, !dbg !51
  %570 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %569, i32 %566, !dbg !51
  %571 = bitcast bfloat %525 to i16, !dbg !51
  %572 = bitcast bfloat %526 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %570, i16 %571, i16 %572, i1 true) #1, !dbg !51
  %573 = or disjoint i32 %566, 512, !dbg !51
  %574 = lshr i32 %573, 3, !dbg !51
  %575 = and i32 %574, 536870904, !dbg !51
  %576 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %575, !dbg !51
  %577 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %576, i32 %573, !dbg !51
  %578 = bitcast bfloat %527 to i16, !dbg !51
  %579 = bitcast bfloat %528 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %577, i16 %578, i16 %579, i1 true) #1, !dbg !51
  %580 = or disjoint i32 %566, 16, !dbg !51
  %581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %569, i32 %580, !dbg !51
  %582 = bitcast bfloat %529 to i16, !dbg !51
  %583 = bitcast bfloat %530 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %581, i16 %582, i16 %583, i1 true) #1, !dbg !51
  %584 = or disjoint i32 %566, 528, !dbg !51
  %585 = lshr i32 %584, 3, !dbg !51
  %586 = and i32 %585, 536870904, !dbg !51
  %587 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %586, !dbg !51
  %588 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %584, !dbg !51
  %589 = bitcast bfloat %531 to i16, !dbg !51
  %590 = bitcast bfloat %532 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %588, i16 %589, i16 %590, i1 true) #1, !dbg !51
  %591 = or disjoint i32 %566, 32, !dbg !51
  %592 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %569, i32 %591, !dbg !51
  %593 = bitcast bfloat %533 to i16, !dbg !51
  %594 = bitcast bfloat %534 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %592, i16 %593, i16 %594, i1 true) #1, !dbg !51
  %595 = or disjoint i32 %566, 544, !dbg !51
  %596 = lshr i32 %595, 3, !dbg !51
  %597 = and i32 %596, 536870904, !dbg !51
  %598 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %597, !dbg !51
  %599 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %598, i32 %595, !dbg !51
  %600 = bitcast bfloat %535 to i16, !dbg !51
  %601 = bitcast bfloat %536 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %599, i16 %600, i16 %601, i1 true) #1, !dbg !51
  %602 = or disjoint i32 %566, 48, !dbg !51
  %603 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %569, i32 %602, !dbg !51
  %604 = bitcast bfloat %537 to i16, !dbg !51
  %605 = bitcast bfloat %538 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %603, i16 %604, i16 %605, i1 true) #1, !dbg !51
  %606 = or disjoint i32 %566, 560, !dbg !51
  %607 = lshr i32 %606, 3, !dbg !51
  %608 = and i32 %607, 536870904, !dbg !51
  %609 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %608, !dbg !51
  %610 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %609, i32 %606, !dbg !51
  %611 = bitcast bfloat %539 to i16, !dbg !51
  %612 = bitcast bfloat %540 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %610, i16 %611, i16 %612, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %613 = lshr exact i32 %25, 2, !dbg !51
  %614 = and i32 %613, 496, !dbg !51
  %615 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %614, !dbg !51
  %616 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %615, i32 %567, !dbg !51
  %617 = load <4 x i32>, ptr addrspace(3) %616, align 16, !dbg !51
  %618 = or disjoint i32 %567, 2048, !dbg !51
  %619 = lshr exact i32 %618, 3, !dbg !51
  %620 = and i32 %619, 504, !dbg !51
  %621 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %620, !dbg !51
  %622 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %621, i32 %618, !dbg !51
  %623 = load <4 x i32>, ptr addrspace(3) %622, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %624 = bitcast bfloat %541 to i16, !dbg !51
  %625 = bitcast bfloat %542 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %570, i16 %624, i16 %625, i1 true) #1, !dbg !51
  %626 = bitcast bfloat %543 to i16, !dbg !51
  %627 = bitcast bfloat %544 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %577, i16 %626, i16 %627, i1 true) #1, !dbg !51
  %628 = bitcast bfloat %545 to i16, !dbg !51
  %629 = bitcast bfloat %546 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %581, i16 %628, i16 %629, i1 true) #1, !dbg !51
  %630 = bitcast bfloat %547 to i16, !dbg !51
  %631 = bitcast bfloat %548 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %588, i16 %630, i16 %631, i1 true) #1, !dbg !51
  %632 = bitcast bfloat %549 to i16, !dbg !51
  %633 = bitcast bfloat %550 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %592, i16 %632, i16 %633, i1 true) #1, !dbg !51
  %634 = bitcast bfloat %551 to i16, !dbg !51
  %635 = bitcast bfloat %552 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %599, i16 %634, i16 %635, i1 true) #1, !dbg !51
  %636 = bitcast bfloat %553 to i16, !dbg !51
  %637 = bitcast bfloat %554 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %603, i16 %636, i16 %637, i1 true) #1, !dbg !51
  %638 = bitcast bfloat %555 to i16, !dbg !51
  %639 = bitcast bfloat %556 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %610, i16 %638, i16 %639, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %640 = load <4 x i32>, ptr addrspace(3) %616, align 16, !dbg !51
  %641 = load <4 x i32>, ptr addrspace(3) %622, align 16, !dbg !51
  %.extract = extractelement <4 x i32> %617, i64 0, !dbg !51
  %.extract147 = extractelement <4 x i32> %617, i64 1, !dbg !51
  %.extract149 = extractelement <4 x i32> %617, i64 2, !dbg !51
  %.extract151 = extractelement <4 x i32> %617, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract147, i32 %.extract149, i32 %.extract151, ptr addrspace(1) %518, i1 %501) #1, !dbg !51
  %.extract153 = extractelement <4 x i32> %623, i64 0, !dbg !51
  %.extract155 = extractelement <4 x i32> %623, i64 1, !dbg !51
  %.extract157 = extractelement <4 x i32> %623, i64 2, !dbg !51
  %.extract159 = extractelement <4 x i32> %623, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract153, i32 %.extract155, i32 %.extract157, i32 %.extract159, ptr addrspace(1) %520, i1 %502) #1, !dbg !51
  %.extract161 = extractelement <4 x i32> %640, i64 0, !dbg !51
  %.extract163 = extractelement <4 x i32> %640, i64 1, !dbg !51
  %.extract165 = extractelement <4 x i32> %640, i64 2, !dbg !51
  %.extract167 = extractelement <4 x i32> %640, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract161, i32 %.extract163, i32 %.extract165, i32 %.extract167, ptr addrspace(1) %522, i1 %503) #1, !dbg !51
  %.extract169 = extractelement <4 x i32> %641, i64 0, !dbg !51
  %.extract171 = extractelement <4 x i32> %641, i64 1, !dbg !51
  %.extract173 = extractelement <4 x i32> %641, i64 2, !dbg !51
  %.extract175 = extractelement <4 x i32> %641, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract169, i32 %.extract171, i32 %.extract173, i32 %.extract175, ptr addrspace(1) %524, i1 %504) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5no67azoytr2deh3knsuqhcoayxbzqhpepv6xh3bwq24sim4sp.py", directory: "/tmp/torchinductor_root/v5")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 55, column: 52, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 27, scope: !6)
!33 = !DILocation(line: 67, column: 72, scope: !6)
!34 = !DILocation(line: 67, column: 39, scope: !6)
!35 = !DILocation(line: 67, column: 66, scope: !6)
!36 = !DILocation(line: 67, column: 13, scope: !6)
!37 = !DILocation(line: 72, column: 24, scope: !6)
!38 = !DILocation(line: 73, column: 24, scope: !6)
!39 = !DILocation(line: 78, column: 13, scope: !6)
!40 = !DILocation(line: 79, column: 13, scope: !6)
!41 = !DILocation(line: 70, column: 25, scope: !6)
!42 = !DILocation(line: 77, column: 25, scope: !6)
!43 = !DILocation(line: 87, column: 20, scope: !6)
!44 = !DILocation(line: 87, column: 34, scope: !6)
!45 = !DILocation(line: 87, column: 26, scope: !6)
!46 = !DILocation(line: 90, column: 24, scope: !6)
!47 = !DILocation(line: 90, column: 38, scope: !6)
!48 = !DILocation(line: 90, column: 21, scope: !6)
!49 = !DILocation(line: 90, column: 32, scope: !6)
!50 = !DILocation(line: 91, column: 25, scope: !6)
!51 = !DILocation(line: 91, column: 67, scope: !6)
!52 = !DILocation(line: 91, column: 4, scope: !6)
