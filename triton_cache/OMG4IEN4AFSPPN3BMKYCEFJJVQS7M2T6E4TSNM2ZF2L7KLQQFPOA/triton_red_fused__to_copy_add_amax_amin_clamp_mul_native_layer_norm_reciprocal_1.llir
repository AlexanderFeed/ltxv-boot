; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = shl i32 %21, 1, !dbg !11
  %24 = and i32 %23, 2046, !dbg !11
  %25 = mul i32 %19, 3072, !dbg !12
  %26 = zext nneg i32 %24 to i64, !dbg !13
  %27 = add i32 %24, %25, !dbg !14
  %28 = sext i32 %27 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !15
  %30 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 %20) #5, !dbg !16
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !16
  %32 = extractelement <2 x bfloat> %31, i64 1, !dbg !16
  %33 = fpext bfloat %32 to float, !dbg !17
  %34 = extractelement <2 x bfloat> %31, i64 0, !dbg !16
  %35 = fpext bfloat %34 to float, !dbg !17
  %36 = select i1 %20, float %35, float 0.000000e+00, !dbg !18
  %37 = select i1 %20, float %33, float 0.000000e+00, !dbg !18
  %38 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %39 = or disjoint i64 %26, 2048, !dbg !20
  %40 = icmp samesign ult i64 %39, 3072, !dbg !21
  %41 = trunc nuw nsw i64 %39 to i32, !dbg !14
  %42 = add i32 %25, %41, !dbg !14
  %43 = sext i32 %42 to i64, !dbg !15
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !15
  %45 = and i1 %20, %40, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 %45) #5, !dbg !16
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !16
  %48 = extractelement <2 x bfloat> %47, i64 0, !dbg !16
  %49 = fpext bfloat %48 to float, !dbg !17
  %50 = fsub float %49, %36, !dbg !23
  %51 = fadd float %38, 1.000000e+00, !dbg !27
  %52 = tail call float @llvm.nvvm.div.full(float %50, float %51), !dbg !28
  %53 = fadd float %36, %52, !dbg !29
  %54 = fsub float %49, %53, !dbg !30
  %55 = fmul float %50, %54, !dbg !31
  %56 = fadd float %55, 0.000000e+00, !dbg !32
  %57 = extractelement <2 x bfloat> %47, i64 1, !dbg !16
  %58 = fpext bfloat %57 to float, !dbg !17
  %59 = fsub float %58, %37, !dbg !23
  %60 = tail call float @llvm.nvvm.div.full(float %59, float %51), !dbg !28
  %61 = fadd float %37, %60, !dbg !29
  %62 = fsub float %58, %61, !dbg !30
  %63 = fmul float %59, %62, !dbg !31
  %64 = fadd float %63, 0.000000e+00, !dbg !32
  %65 = select i1 %45, float %53, float %36, !dbg !18
  %66 = select i1 %45, float %61, float %37, !dbg !18
  %67 = select i1 %45, float %51, float %38, !dbg !19
  %68 = select i1 %45, float %51, float %38, !dbg !19
  %69 = lshr i32 %21, 5, !dbg !11
  %70 = fsub float %66, %65, !dbg !33
  %71 = fadd float %67, %68, !dbg !36
  %72 = fcmp oeq float %71, 0.000000e+00, !dbg !37
  %73 = tail call float @llvm.nvvm.div.full(float %68, float %71), !dbg !38
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !39
  %75 = fmul float %70, %74, !dbg !40
  %76 = fadd float %65, %75, !dbg !41
  %77 = fadd float %56, %64, !dbg !42
  %78 = select i1 %45, float %77, float 0.000000e+00, !dbg !42
  %79 = fmul float %70, %70, !dbg !43
  %80 = fmul float %79, %67, !dbg !44
  %81 = fmul float %80, %74, !dbg !45
  %82 = fadd float %78, %81, !dbg !46
  %83 = bitcast float %76 to i32, !dbg !47
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !47
  %85 = bitcast i32 %84 to float, !dbg !47
  %86 = bitcast float %82 to i32, !dbg !47
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !47
  %88 = bitcast i32 %87 to float, !dbg !47
  %89 = bitcast float %71 to i32, !dbg !47
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !47
  %91 = bitcast i32 %90 to float, !dbg !47
  %92 = fsub float %85, %76, !dbg !33
  %93 = fadd float %71, %91, !dbg !36
  %94 = fcmp oeq float %93, 0.000000e+00, !dbg !37
  %95 = tail call float @llvm.nvvm.div.full(float %91, float %93), !dbg !38
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !39
  %97 = fmul float %92, %96, !dbg !40
  %98 = fadd float %76, %97, !dbg !41
  %99 = fadd float %82, %88, !dbg !42
  %100 = fmul float %92, %92, !dbg !43
  %101 = fmul float %71, %100, !dbg !44
  %102 = fmul float %101, %96, !dbg !45
  %103 = fadd float %99, %102, !dbg !46
  %104 = bitcast float %98 to i32, !dbg !47
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !47
  %106 = bitcast i32 %105 to float, !dbg !47
  %107 = bitcast float %103 to i32, !dbg !47
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !47
  %109 = bitcast i32 %108 to float, !dbg !47
  %110 = bitcast float %93 to i32, !dbg !47
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !47
  %112 = bitcast i32 %111 to float, !dbg !47
  %113 = fsub float %106, %98, !dbg !33
  %114 = fadd float %93, %112, !dbg !36
  %115 = fcmp oeq float %114, 0.000000e+00, !dbg !37
  %116 = tail call float @llvm.nvvm.div.full(float %112, float %114), !dbg !38
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !39
  %118 = fmul float %113, %117, !dbg !40
  %119 = fadd float %98, %118, !dbg !41
  %120 = fadd float %103, %109, !dbg !42
  %121 = fmul float %113, %113, !dbg !43
  %122 = fmul float %93, %121, !dbg !44
  %123 = fmul float %117, %122, !dbg !45
  %124 = fadd float %120, %123, !dbg !46
  %125 = bitcast float %119 to i32, !dbg !47
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !47
  %127 = bitcast i32 %126 to float, !dbg !47
  %128 = bitcast float %124 to i32, !dbg !47
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !47
  %130 = bitcast i32 %129 to float, !dbg !47
  %131 = bitcast float %114 to i32, !dbg !47
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !47
  %133 = bitcast i32 %132 to float, !dbg !47
  %134 = fsub float %127, %119, !dbg !33
  %135 = fadd float %114, %133, !dbg !36
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !37
  %137 = tail call float @llvm.nvvm.div.full(float %133, float %135), !dbg !38
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !39
  %139 = fmul float %134, %138, !dbg !40
  %140 = fadd float %119, %139, !dbg !41
  %141 = fadd float %124, %130, !dbg !42
  %142 = fmul float %134, %134, !dbg !43
  %143 = fmul float %114, %142, !dbg !44
  %144 = fmul float %138, %143, !dbg !45
  %145 = fadd float %141, %144, !dbg !46
  %146 = bitcast float %140 to i32, !dbg !47
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !47
  %148 = bitcast i32 %147 to float, !dbg !47
  %149 = bitcast float %145 to i32, !dbg !47
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !47
  %151 = bitcast i32 %150 to float, !dbg !47
  %152 = bitcast float %135 to i32, !dbg !47
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !47
  %154 = bitcast i32 %153 to float, !dbg !47
  %155 = fsub float %148, %140, !dbg !33
  %156 = fadd float %135, %154, !dbg !36
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !37
  %158 = tail call float @llvm.nvvm.div.full(float %154, float %156), !dbg !38
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !39
  %160 = fmul float %155, %159, !dbg !40
  %161 = fadd float %140, %160, !dbg !41
  %162 = fadd float %145, %151, !dbg !42
  %163 = fmul float %155, %155, !dbg !43
  %164 = fmul float %135, %163, !dbg !44
  %165 = fmul float %159, %164, !dbg !45
  %166 = fadd float %162, %165, !dbg !46
  %167 = bitcast float %161 to i32, !dbg !47
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !47
  %169 = bitcast i32 %168 to float, !dbg !47
  %170 = bitcast float %166 to i32, !dbg !47
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !47
  %172 = bitcast i32 %171 to float, !dbg !47
  %173 = bitcast float %156 to i32, !dbg !47
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !47
  %175 = bitcast i32 %174 to float, !dbg !47
  %176 = fsub float %169, %161, !dbg !33
  %177 = fadd float %156, %175, !dbg !36
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !37
  %179 = tail call float @llvm.nvvm.div.full(float %175, float %177), !dbg !38
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !39
  %181 = fmul float %176, %180, !dbg !40
  %182 = fadd float %161, %181, !dbg !41
  %183 = fadd float %166, %172, !dbg !42
  %184 = fmul float %176, %176, !dbg !43
  %185 = fmul float %156, %184, !dbg !44
  %186 = fmul float %180, %185, !dbg !45
  %187 = fadd float %183, %186, !dbg !46
  %188 = and i32 %69, 31, !dbg !47
  %189 = icmp eq i32 %22, 0, !dbg !47
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !47
  %191 = bitcast float %182 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 %189) #5, !dbg !47
  %192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %188, !dbg !47
  %193 = bitcast float %187 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 %189) #5, !dbg !47
  %194 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %188, !dbg !47
  %195 = bitcast float %177 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 %189) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %196 = icmp slt i32 %21, 32, !dbg !47
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !47
  %198 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !47
  %199 = bitcast i32 %198 to float, !dbg !47
  %200 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !47
  %201 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %200, i1 %196) #5, !dbg !47
  %202 = bitcast i32 %201 to float, !dbg !47
  %203 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !47
  %204 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %203, i1 %196) #5, !dbg !47
  %205 = bitcast i32 %204 to float, !dbg !47
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !47
  %207 = bitcast i32 %206 to float, !dbg !47
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !47
  %209 = bitcast i32 %208 to float, !dbg !47
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !47
  %211 = bitcast i32 %210 to float, !dbg !47
  %212 = fsub float %207, %199, !dbg !33
  %213 = fadd float %205, %211, !dbg !36
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !37
  %215 = tail call float @llvm.nvvm.div.full(float %211, float %213), !dbg !38
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !39
  %217 = fmul float %212, %216, !dbg !40
  %218 = fadd float %217, %199, !dbg !41
  %219 = fadd float %202, %209, !dbg !42
  %220 = fmul float %212, %212, !dbg !43
  %221 = fmul float %220, %205, !dbg !44
  %222 = fmul float %221, %216, !dbg !45
  %223 = fadd float %219, %222, !dbg !46
  %224 = bitcast float %218 to i32, !dbg !47
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !47
  %226 = bitcast i32 %225 to float, !dbg !47
  %227 = bitcast float %223 to i32, !dbg !47
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !47
  %229 = bitcast i32 %228 to float, !dbg !47
  %230 = bitcast float %213 to i32, !dbg !47
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !47
  %232 = bitcast i32 %231 to float, !dbg !47
  %233 = fsub float %226, %218, !dbg !33
  %234 = fadd float %213, %232, !dbg !36
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !37
  %236 = tail call float @llvm.nvvm.div.full(float %232, float %234), !dbg !38
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !39
  %238 = fmul float %233, %237, !dbg !40
  %239 = fadd float %218, %238, !dbg !41
  %240 = fadd float %223, %229, !dbg !42
  %241 = fmul float %233, %233, !dbg !43
  %242 = fmul float %213, %241, !dbg !44
  %243 = fmul float %237, %242, !dbg !45
  %244 = fadd float %240, %243, !dbg !46
  %245 = bitcast float %239 to i32, !dbg !47
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !47
  %247 = bitcast i32 %246 to float, !dbg !47
  %248 = bitcast float %244 to i32, !dbg !47
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !47
  %250 = bitcast i32 %249 to float, !dbg !47
  %251 = bitcast float %234 to i32, !dbg !47
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !47
  %253 = bitcast i32 %252 to float, !dbg !47
  %254 = fsub float %247, %239, !dbg !33
  %255 = fadd float %234, %253, !dbg !36
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !37
  %257 = tail call float @llvm.nvvm.div.full(float %253, float %255), !dbg !38
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !39
  %259 = fmul float %254, %258, !dbg !40
  %260 = fadd float %239, %259, !dbg !41
  %261 = fadd float %244, %250, !dbg !42
  %262 = fmul float %254, %254, !dbg !43
  %263 = fmul float %234, %262, !dbg !44
  %264 = fmul float %258, %263, !dbg !45
  %265 = fadd float %261, %264, !dbg !46
  %266 = bitcast float %260 to i32, !dbg !47
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !47
  %268 = bitcast i32 %267 to float, !dbg !47
  %269 = bitcast float %265 to i32, !dbg !47
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !47
  %271 = bitcast i32 %270 to float, !dbg !47
  %272 = bitcast float %255 to i32, !dbg !47
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !47
  %274 = bitcast i32 %273 to float, !dbg !47
  %275 = fsub float %268, %260, !dbg !33
  %276 = fadd float %255, %274, !dbg !36
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !37
  %278 = tail call float @llvm.nvvm.div.full(float %274, float %276), !dbg !38
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !39
  %280 = fmul float %275, %279, !dbg !40
  %281 = fadd float %260, %280, !dbg !41
  %282 = fadd float %265, %271, !dbg !42
  %283 = fmul float %275, %275, !dbg !43
  %284 = fmul float %255, %283, !dbg !44
  %285 = fmul float %279, %284, !dbg !45
  %286 = fadd float %282, %285, !dbg !46
  %287 = bitcast float %281 to i32, !dbg !47
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !47
  %289 = bitcast i32 %288 to float, !dbg !47
  %290 = bitcast float %286 to i32, !dbg !47
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !47
  %292 = bitcast i32 %291 to float, !dbg !47
  %293 = bitcast float %276 to i32, !dbg !47
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !47
  %295 = bitcast i32 %294 to float, !dbg !47
  %296 = fsub float %289, %281, !dbg !33
  %297 = fadd float %276, %295, !dbg !36
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !37
  %299 = tail call float @llvm.nvvm.div.full(float %295, float %297), !dbg !38
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !39
  %301 = fmul float %296, %300, !dbg !40
  %302 = fadd float %281, %301, !dbg !41
  %303 = fadd float %286, %292, !dbg !42
  %304 = fmul float %296, %296, !dbg !43
  %305 = fmul float %276, %304, !dbg !44
  %306 = fmul float %300, %305, !dbg !45
  %307 = fadd float %303, %306, !dbg !46
  %308 = and i1 %196, %189, !dbg !47
  %309 = bitcast float %302 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %309, i1 %308) #5, !dbg !47
  %310 = bitcast float %307 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %310, i1 %308) #5, !dbg !47
  %311 = bitcast float %297 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %311, i1 %308) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %312 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %313 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !47
  %314 = tail call float @llvm.nvvm.div.full(float %313, float 3.072000e+03), !dbg !48
  %315 = fadd float %314, 0x3EB0C6F7A0000000, !dbg !49
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i7 = icmp eq i32 %317, 0, !dbg !50
  br i1 %.not.i7, label %320, label %318, !dbg !50

318:                                              ; preds = %__nv_rsqrtf.exit
  %319 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %315), !dbg !50
  br label %__nv_rsqrtf.exit9, !dbg !50

320:                                              ; preds = %__nv_rsqrtf.exit
  %321 = tail call float @llvm.nvvm.rsqrt.approx.f(float %315), !dbg !50
  br label %__nv_rsqrtf.exit9, !dbg !50

__nv_rsqrtf.exit9:                                ; preds = %318, %320
  %.0.i8 = phi float [ %319, %318 ], [ %321, %320 ], !dbg !50
  %322 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 %20) #5, !dbg !51
  %323 = bitcast i32 %322 to <2 x bfloat>, !dbg !51
  %324 = add nuw nsw i64 %26, 3072, !dbg !52
  %325 = getelementptr float, ptr addrspace(1) %1, i64 %324, !dbg !53
  %326 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %325, i1 true) #5, !dbg !54
  %327 = extractvalue { i32, i32 } %326, 0, !dbg !54
  %328 = extractvalue { i32, i32 } %326, 1, !dbg !54
  %329 = getelementptr bfloat, ptr addrspace(1) %2, i64 %324, !dbg !55
  %330 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %329, i1 true) #5, !dbg !56
  %331 = bitcast i32 %330 to <2 x bfloat>, !dbg !56
  %332 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !57
  %333 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %332, i1 true) #5, !dbg !58
  %334 = extractvalue { i32, i32 } %333, 0, !dbg !58
  %335 = extractvalue { i32, i32 } %333, 1, !dbg !58
  %336 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !59
  %337 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %336, i1 true) #5, !dbg !60
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !60
  %339 = getelementptr bfloat, ptr addrspace(1) %3, i64 %28, !dbg !61
  %340 = fpext <2 x bfloat> %323 to <2 x float>, !dbg !62
  %341 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !54
  %342 = insertelement <2 x i32> %341, i32 %328, i64 1, !dbg !54
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !54
  %344 = fpext <2 x bfloat> %331 to <2 x float>, !dbg !63
  %345 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !58
  %346 = insertelement <2 x i32> %345, i32 %335, i64 1, !dbg !58
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !58
  %348 = fpext <2 x bfloat> %338 to <2 x float>, !dbg !64
  %349 = insertelement <2 x float> poison, float %312, i64 0, !dbg !65
  %350 = shufflevector <2 x float> %349, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %351 = fsub <2 x float> %340, %350, !dbg !65
  %352 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !66
  %353 = shufflevector <2 x float> %352, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %354 = fmul <2 x float> %353, %351, !dbg !66
  %355 = fadd <2 x float> %343, %344, !dbg !67
  %356 = fadd <2 x float> %355, splat (float 1.000000e+00), !dbg !68
  %357 = fmul <2 x float> %354, %356, !dbg !69
  %358 = fadd <2 x float> %347, %348, !dbg !70
  %359 = fadd <2 x float> %357, %358, !dbg !71
  %360 = extractelement <2 x float> %359, i64 0, !dbg !72
  %361 = select i1 %20, float %360, float 0x7FF0000000000000, !dbg !73
  %362 = extractelement <2 x float> %359, i64 1, !dbg !72
  %363 = select i1 %20, float %362, float 0x7FF0000000000000, !dbg !73
  %364 = select i1 %20, float %360, float 0xFFF0000000000000, !dbg !72
  %365 = select i1 %20, float %362, float 0xFFF0000000000000, !dbg !72
  %366 = fptrunc <2 x float> %359 to <2 x bfloat>, !dbg !74
  %367 = bitcast <2 x bfloat> %366 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %339, i1 %20) #5, !dbg !74
  %368 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 %45) #5, !dbg !51
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !51
  %370 = add nuw nsw i64 %26, 5120, !dbg !52
  %371 = getelementptr float, ptr addrspace(1) %1, i64 %370, !dbg !53
  %372 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %371, i1 %40) #5, !dbg !54
  %373 = extractvalue { i32, i32 } %372, 0, !dbg !54
  %374 = extractvalue { i32, i32 } %372, 1, !dbg !54
  %375 = getelementptr bfloat, ptr addrspace(1) %2, i64 %370, !dbg !55
  %376 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %375, i1 %40) #5, !dbg !56
  %377 = bitcast i32 %376 to <2 x bfloat>, !dbg !56
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !57
  %379 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %378, i1 %40) #5, !dbg !58
  %380 = extractvalue { i32, i32 } %379, 0, !dbg !58
  %381 = extractvalue { i32, i32 } %379, 1, !dbg !58
  %382 = getelementptr bfloat, ptr addrspace(1) %2, i64 %39, !dbg !59
  %383 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %382, i1 %40) #5, !dbg !60
  %384 = bitcast i32 %383 to <2 x bfloat>, !dbg !60
  %385 = fcmp uno float %361, 0.000000e+00, !dbg !75
  %386 = fcmp uno float %363, 0.000000e+00, !dbg !75
  %387 = fcmp uno float %364, 0.000000e+00, !dbg !77
  %388 = fcmp uno float %365, 0.000000e+00, !dbg !77
  %389 = getelementptr bfloat, ptr addrspace(1) %3, i64 %43, !dbg !61
  %390 = fpext <2 x bfloat> %369 to <2 x float>, !dbg !62
  %391 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !54
  %392 = insertelement <2 x i32> %391, i32 %374, i64 1, !dbg !54
  %393 = bitcast <2 x i32> %392 to <2 x float>, !dbg !54
  %394 = fpext <2 x bfloat> %377 to <2 x float>, !dbg !63
  %395 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !58
  %396 = insertelement <2 x i32> %395, i32 %381, i64 1, !dbg !58
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !58
  %398 = fpext <2 x bfloat> %384 to <2 x float>, !dbg !64
  %399 = fsub <2 x float> %390, %350, !dbg !65
  %400 = fmul <2 x float> %353, %399, !dbg !66
  %401 = fadd <2 x float> %393, %394, !dbg !67
  %402 = fadd <2 x float> %401, splat (float 1.000000e+00), !dbg !68
  %403 = fmul <2 x float> %400, %402, !dbg !69
  %404 = fadd <2 x float> %397, %398, !dbg !70
  %405 = fadd <2 x float> %403, %404, !dbg !71
  %406 = extractelement <2 x float> %405, i64 0, !dbg !79
  %407 = fcmp olt float %361, %406, !dbg !80
  %408 = extractelement <2 x float> %405, i64 1, !dbg !79
  %409 = fcmp olt float %363, %408, !dbg !80
  %410 = or i1 %385, %407, !dbg !81
  %411 = or i1 %386, %409, !dbg !81
  %412 = select i1 %410, float %361, float %406, !dbg !82
  %413 = select i1 %411, float %363, float %408, !dbg !82
  %414 = select i1 %45, float %412, float %361, !dbg !73
  %415 = select i1 %45, float %413, float %363, !dbg !73
  %416 = fcmp ogt float %364, %406, !dbg !83
  %417 = fcmp ogt float %365, %408, !dbg !83
  %418 = or i1 %387, %416, !dbg !84
  %419 = or i1 %388, %417, !dbg !84
  %420 = select i1 %418, float %364, float %406, !dbg !79
  %421 = select i1 %419, float %365, float %408, !dbg !79
  %422 = select i1 %45, float %420, float %364, !dbg !72
  %423 = select i1 %45, float %421, float %365, !dbg !72
  %424 = fptrunc <2 x float> %405 to <2 x bfloat>, !dbg !74
  %425 = bitcast <2 x bfloat> %424 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %425, ptr addrspace(1) %389, i1 %45) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %426 = fcmp olt float %414, %415, !dbg !87
  %427 = fcmp uno float %414, 0.000000e+00, !dbg !88
  %428 = or i1 %426, %427, !dbg !89
  %429 = select i1 %428, float %414, float %415, !dbg !90
  %430 = bitcast float %429 to i32, !dbg !85
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 16, i32 31), !dbg !85
  %432 = bitcast i32 %431 to float, !dbg !85
  %433 = fcmp olt float %429, %432, !dbg !87
  %434 = fcmp uno float %429, 0.000000e+00, !dbg !88
  %435 = or i1 %434, %433, !dbg !89
  %436 = select i1 %435, float %429, float %432, !dbg !90
  %437 = bitcast float %436 to i32, !dbg !85
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 8, i32 31), !dbg !85
  %439 = bitcast i32 %438 to float, !dbg !85
  %440 = fcmp olt float %436, %439, !dbg !87
  %441 = fcmp uno float %436, 0.000000e+00, !dbg !88
  %442 = or i1 %440, %441, !dbg !89
  %443 = select i1 %442, float %436, float %439, !dbg !90
  %444 = bitcast float %443 to i32, !dbg !85
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 4, i32 31), !dbg !85
  %446 = bitcast i32 %445 to float, !dbg !85
  %447 = fcmp olt float %443, %446, !dbg !87
  %448 = fcmp uno float %443, 0.000000e+00, !dbg !88
  %449 = or i1 %447, %448, !dbg !89
  %450 = select i1 %449, float %443, float %446, !dbg !90
  %451 = bitcast float %450 to i32, !dbg !85
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 2, i32 31), !dbg !85
  %453 = bitcast i32 %452 to float, !dbg !85
  %454 = fcmp olt float %450, %453, !dbg !87
  %455 = fcmp uno float %450, 0.000000e+00, !dbg !88
  %456 = or i1 %454, %455, !dbg !89
  %457 = select i1 %456, float %450, float %453, !dbg !90
  %458 = bitcast float %457 to i32, !dbg !85
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 1, i32 31), !dbg !85
  %460 = bitcast i32 %459 to float, !dbg !85
  %461 = fcmp olt float %457, %460, !dbg !87
  %462 = fcmp uno float %457, 0.000000e+00, !dbg !88
  %463 = or i1 %461, %462, !dbg !89
  %464 = select i1 %463, i32 %458, i32 %459, !dbg !90
  %465 = insertelement <1 x i32> poison, i32 %464, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %465, i1 %189) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %466 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !85
  %467 = bitcast i32 %466 to float, !dbg !85
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 16, i32 31), !dbg !85
  %469 = bitcast i32 %468 to float, !dbg !85
  %470 = fcmp olt float %467, %469, !dbg !87
  %471 = fcmp uno float %467, 0.000000e+00, !dbg !88
  %472 = or i1 %471, %470, !dbg !89
  %473 = select i1 %472, float %467, float %469, !dbg !90
  %474 = bitcast float %473 to i32, !dbg !85
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 8, i32 31), !dbg !85
  %476 = bitcast i32 %475 to float, !dbg !85
  %477 = fcmp olt float %473, %476, !dbg !87
  %478 = fcmp uno float %473, 0.000000e+00, !dbg !88
  %479 = or i1 %477, %478, !dbg !89
  %480 = select i1 %479, float %473, float %476, !dbg !90
  %481 = bitcast float %480 to i32, !dbg !85
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 4, i32 31), !dbg !85
  %483 = bitcast i32 %482 to float, !dbg !85
  %484 = fcmp olt float %480, %483, !dbg !87
  %485 = fcmp uno float %480, 0.000000e+00, !dbg !88
  %486 = or i1 %484, %485, !dbg !89
  %487 = select i1 %486, float %480, float %483, !dbg !90
  %488 = bitcast float %487 to i32, !dbg !85
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 2, i32 31), !dbg !85
  %490 = bitcast i32 %489 to float, !dbg !85
  %491 = fcmp olt float %487, %490, !dbg !87
  %492 = fcmp uno float %487, 0.000000e+00, !dbg !88
  %493 = or i1 %491, %492, !dbg !89
  %494 = select i1 %493, float %487, float %490, !dbg !90
  %495 = bitcast float %494 to i32, !dbg !85
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 1, i32 31), !dbg !85
  %497 = bitcast i32 %496 to float, !dbg !85
  %498 = fcmp olt float %494, %497, !dbg !87
  %499 = fcmp uno float %494, 0.000000e+00, !dbg !88
  %500 = or i1 %498, %499, !dbg !89
  %501 = select i1 %500, i32 %495, i32 %496, !dbg !90
  %502 = insertelement <1 x i32> poison, i32 %501, i64 0, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %502, i1 %308) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %503 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %504 = fcmp ogt float %422, %423, !dbg !93
  %505 = fcmp uno float %422, 0.000000e+00, !dbg !94
  %506 = or i1 %504, %505, !dbg !95
  %507 = select i1 %506, float %422, float %423, !dbg !96
  %508 = bitcast float %507 to i32, !dbg !91
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 16, i32 31), !dbg !91
  %510 = bitcast i32 %509 to float, !dbg !91
  %511 = fcmp ogt float %507, %510, !dbg !93
  %512 = fcmp uno float %507, 0.000000e+00, !dbg !94
  %513 = or i1 %512, %511, !dbg !95
  %514 = select i1 %513, float %507, float %510, !dbg !96
  %515 = bitcast float %514 to i32, !dbg !91
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 8, i32 31), !dbg !91
  %517 = bitcast i32 %516 to float, !dbg !91
  %518 = fcmp ogt float %514, %517, !dbg !93
  %519 = fcmp uno float %514, 0.000000e+00, !dbg !94
  %520 = or i1 %518, %519, !dbg !95
  %521 = select i1 %520, float %514, float %517, !dbg !96
  %522 = bitcast float %521 to i32, !dbg !91
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 4, i32 31), !dbg !91
  %524 = bitcast i32 %523 to float, !dbg !91
  %525 = fcmp ogt float %521, %524, !dbg !93
  %526 = fcmp uno float %521, 0.000000e+00, !dbg !94
  %527 = or i1 %525, %526, !dbg !95
  %528 = select i1 %527, float %521, float %524, !dbg !96
  %529 = bitcast float %528 to i32, !dbg !91
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 2, i32 31), !dbg !91
  %531 = bitcast i32 %530 to float, !dbg !91
  %532 = fcmp ogt float %528, %531, !dbg !93
  %533 = fcmp uno float %528, 0.000000e+00, !dbg !94
  %534 = or i1 %532, %533, !dbg !95
  %535 = select i1 %534, float %528, float %531, !dbg !96
  %536 = bitcast float %535 to i32, !dbg !91
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 1, i32 31), !dbg !91
  %538 = bitcast i32 %537 to float, !dbg !91
  %539 = fcmp ogt float %535, %538, !dbg !93
  %540 = fcmp uno float %535, 0.000000e+00, !dbg !94
  %541 = or i1 %539, %540, !dbg !95
  %542 = select i1 %541, i32 %536, i32 %537, !dbg !96
  %543 = insertelement <1 x i32> poison, i32 %542, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %543, i1 %189) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %544 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !91
  %545 = bitcast i32 %544 to float, !dbg !91
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 16, i32 31), !dbg !91
  %547 = bitcast i32 %546 to float, !dbg !91
  %548 = fcmp ogt float %545, %547, !dbg !93
  %549 = fcmp uno float %545, 0.000000e+00, !dbg !94
  %550 = or i1 %549, %548, !dbg !95
  %551 = select i1 %550, float %545, float %547, !dbg !96
  %552 = bitcast float %551 to i32, !dbg !91
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 8, i32 31), !dbg !91
  %554 = bitcast i32 %553 to float, !dbg !91
  %555 = fcmp ogt float %551, %554, !dbg !93
  %556 = fcmp uno float %551, 0.000000e+00, !dbg !94
  %557 = or i1 %555, %556, !dbg !95
  %558 = select i1 %557, float %551, float %554, !dbg !96
  %559 = bitcast float %558 to i32, !dbg !91
  %560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %559, i32 4, i32 31), !dbg !91
  %561 = bitcast i32 %560 to float, !dbg !91
  %562 = fcmp ogt float %558, %561, !dbg !93
  %563 = fcmp uno float %558, 0.000000e+00, !dbg !94
  %564 = or i1 %562, %563, !dbg !95
  %565 = select i1 %564, float %558, float %561, !dbg !96
  %566 = bitcast float %565 to i32, !dbg !91
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 2, i32 31), !dbg !91
  %568 = bitcast i32 %567 to float, !dbg !91
  %569 = fcmp ogt float %565, %568, !dbg !93
  %570 = fcmp uno float %565, 0.000000e+00, !dbg !94
  %571 = or i1 %569, %570, !dbg !95
  %572 = select i1 %571, float %565, float %568, !dbg !96
  %573 = bitcast float %572 to i32, !dbg !91
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 1, i32 31), !dbg !91
  %575 = bitcast i32 %574 to float, !dbg !91
  %576 = fcmp ogt float %572, %575, !dbg !93
  %577 = fcmp uno float %572, 0.000000e+00, !dbg !94
  %578 = or i1 %576, %577, !dbg !95
  %579 = select i1 %578, i32 %573, i32 %574, !dbg !96
  %580 = insertelement <1 x i32> poison, i32 %579, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %580, i1 %308) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %581 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %582 = sext i32 %19 to i64, !dbg !97
  %583 = getelementptr bfloat, ptr addrspace(1) %4, i64 %582, !dbg !97
  %584 = fptrunc float %503 to bfloat, !dbg !98
  %585 = and i32 %21, 1023, !dbg !98
  %586 = icmp eq i32 %585, 0, !dbg !98
  %587 = bitcast bfloat %584 to i16, !dbg !98
  %588 = and i1 %20, %586, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %587, ptr addrspace(1) %583, i1 %588) #5, !dbg !98
  %589 = getelementptr bfloat, ptr addrspace(1) %5, i64 %582, !dbg !99
  %590 = fptrunc float %581 to bfloat, !dbg !100
  %591 = bitcast bfloat %590 to i16, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %591, ptr addrspace(1) %589, i1 %588) #5, !dbg !100
  %592 = getelementptr bfloat, ptr addrspace(1) %6, i64 %582, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %587, ptr addrspace(1) %592, i1 %588) #5, !dbg !102
  %593 = getelementptr bfloat, ptr addrspace(1) %7, i64 %582, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %591, ptr addrspace(1) %593, i1 %588) #5, !dbg !104
  %594 = getelementptr bfloat, ptr addrspace(1) %8, i64 %582, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %587, ptr addrspace(1) %594, i1 %588) #5, !dbg !106
  %595 = getelementptr bfloat, ptr addrspace(1) %9, i64 %582, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %591, ptr addrspace(1) %595, i1 %588) #5, !dbg !108
  %596 = getelementptr bfloat, ptr addrspace(1) %10, i64 %582, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %587, ptr addrspace(1) %596, i1 %588) #5, !dbg !110
  %597 = getelementptr bfloat, ptr addrspace(1) %11, i64 %582, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %591, ptr addrspace(1) %597, i1 %588) #5, !dbg !112
  %.inv = fcmp oge float %503, 0.000000e+00, !dbg !113
  %598 = select i1 %.inv, float 0.000000e+00, float %503, !dbg !113
  %599 = fsub float 0.000000e+00, %598, !dbg !115
  %.inv3 = fcmp ole float %581, 0.000000e+00, !dbg !116
  %600 = select i1 %.inv3, float 0.000000e+00, float %581, !dbg !116
  %601 = fcmp ogt float %599, %600, !dbg !118
  %602 = fcmp uno float %599, 0.000000e+00, !dbg !120
  %603 = or i1 %602, %601, !dbg !121
  %604 = select i1 %603, float %599, float %600, !dbg !122
  %605 = fmul float %604, 0x3F80204080000000, !dbg !123
  %606 = fcmp ogt float %605, 0x3EE4F8B580000000, !dbg !124
  %607 = fcmp uno float %605, 0.000000e+00, !dbg !126
  %608 = or i1 %606, %607, !dbg !127
  %609 = select i1 %608, float %605, float 0x3EE4F8B580000000, !dbg !128
  %610 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %609), !dbg !129
  %611 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %339, i1 %20) #5, !dbg !130
  %612 = bitcast i32 %611 to <2 x bfloat>, !dbg !130
  %613 = extractelement <2 x bfloat> %612, i64 0, !dbg !130
  %614 = extractelement <2 x bfloat> %612, i64 1, !dbg !130
  %615 = fpext bfloat %613 to float, !dbg !131
  %616 = fpext bfloat %614 to float, !dbg !131
  %617 = fmul float %610, %615, !dbg !132
  %618 = fmul float %610, %616, !dbg !132
  %619 = tail call float @llvm.nvvm.round.f(float %617) #5, !dbg !133
  %620 = tail call float @llvm.nvvm.round.f(float %618) #5, !dbg !133
  %621 = insertelement <2 x float> poison, float %619, i64 0, !dbg !134
  %622 = insertelement <2 x float> %621, float %620, i64 1, !dbg !134
  %623 = fcmp ogt <2 x float> %622, splat (float -1.270000e+02), !dbg !134
  %624 = fcmp uno <2 x float> %622, zeroinitializer, !dbg !136
  %625 = or <2 x i1> %623, %624, !dbg !137
  %626 = select <2 x i1> %625, <2 x float> %622, <2 x float> splat (float -1.270000e+02), !dbg !138
  %627 = fcmp olt <2 x float> %626, splat (float 1.270000e+02), !dbg !139
  %628 = fcmp uno <2 x float> %626, zeroinitializer, !dbg !141
  %629 = or <2 x i1> %627, %628, !dbg !142
  %630 = fptosi <2 x float> %626 to <2 x i8>, !dbg !143
  %631 = select <2 x i1> %629, <2 x i8> %630, <2 x i8> splat (i8 127), !dbg !144
  %632 = getelementptr i8, ptr addrspace(1) %12, i64 %28, !dbg !145
  %633 = bitcast <2 x i8> %631 to i16, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %633, ptr addrspace(1) %632, i1 %20) #5, !dbg !146
  %634 = getelementptr i8, ptr addrspace(1) %13, i64 %28, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %633, ptr addrspace(1) %634, i1 %20) #5, !dbg !148
  %635 = getelementptr i8, ptr addrspace(1) %14, i64 %28, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %633, ptr addrspace(1) %635, i1 %20) #5, !dbg !150
  %636 = getelementptr i8, ptr addrspace(1) %15, i64 %28, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %633, ptr addrspace(1) %636, i1 %20) #5, !dbg !152
  %637 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %389, i1 %45) #5, !dbg !130
  %638 = bitcast i32 %637 to <2 x bfloat>, !dbg !130
  %639 = extractelement <2 x bfloat> %638, i64 0, !dbg !130
  %640 = extractelement <2 x bfloat> %638, i64 1, !dbg !130
  %641 = fpext bfloat %639 to float, !dbg !131
  %642 = fpext bfloat %640 to float, !dbg !131
  %643 = fmul float %610, %641, !dbg !132
  %644 = fmul float %610, %642, !dbg !132
  %645 = tail call float @llvm.nvvm.round.f(float %643) #5, !dbg !133
  %646 = tail call float @llvm.nvvm.round.f(float %644) #5, !dbg !133
  %647 = insertelement <2 x float> poison, float %645, i64 0, !dbg !134
  %648 = insertelement <2 x float> %647, float %646, i64 1, !dbg !134
  %649 = fcmp ogt <2 x float> %648, splat (float -1.270000e+02), !dbg !134
  %650 = fcmp uno <2 x float> %648, zeroinitializer, !dbg !136
  %651 = or <2 x i1> %649, %650, !dbg !137
  %652 = select <2 x i1> %651, <2 x float> %648, <2 x float> splat (float -1.270000e+02), !dbg !138
  %653 = fcmp olt <2 x float> %652, splat (float 1.270000e+02), !dbg !139
  %654 = fcmp uno <2 x float> %652, zeroinitializer, !dbg !141
  %655 = or <2 x i1> %653, %654, !dbg !142
  %656 = fptosi <2 x float> %652 to <2 x i8>, !dbg !143
  %657 = select <2 x i1> %655, <2 x i8> %656, <2 x i8> splat (i8 127), !dbg !144
  %658 = getelementptr i8, ptr addrspace(1) %12, i64 %43, !dbg !145
  %659 = bitcast <2 x i8> %657 to i16, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %659, ptr addrspace(1) %658, i1 %45) #5, !dbg !146
  %660 = getelementptr i8, ptr addrspace(1) %13, i64 %43, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %659, ptr addrspace(1) %660, i1 %45) #5, !dbg !148
  %661 = getelementptr i8, ptr addrspace(1) %14, i64 %43, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %659, ptr addrspace(1) %661, i1 %45) #5, !dbg !150
  %662 = getelementptr i8, ptr addrspace(1) %15, i64 %43, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %659, ptr addrspace(1) %662, i1 %45) #5, !dbg !152
  ret void, !dbg !153
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 32, column: 40, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 112, scope: !6)
!18 = !DILocation(line: 44, column: 62, scope: !6)
!19 = !DILocation(line: 46, column: 66, scope: !6)
!20 = !DILocation(line: 33, column: 31, scope: !6)
!21 = !DILocation(line: 34, column: 29, scope: !6)
!22 = !DILocation(line: 38, column: 61, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 217, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!35 = !DILocation(line: 47, column: 79, scope: !6)
!36 = !DILocation(line: 218, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 219, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 219, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 219, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 221, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 221, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 222, column: 15, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 222, column: 30, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 222, column: 38, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 222, column: 49, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 222, column: 22, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !35)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 59, column: 51, scope: !6)
!52 = !DILocation(line: 60, column: 42, scope: !6)
!53 = !DILocation(line: 60, column: 35, scope: !6)
!54 = !DILocation(line: 60, column: 49, scope: !6)
!55 = !DILocation(line: 61, column: 35, scope: !6)
!56 = !DILocation(line: 61, column: 49, scope: !6)
!57 = !DILocation(line: 62, column: 35, scope: !6)
!58 = !DILocation(line: 62, column: 42, scope: !6)
!59 = !DILocation(line: 63, column: 35, scope: !6)
!60 = !DILocation(line: 63, column: 42, scope: !6)
!61 = !DILocation(line: 86, column: 29, scope: !6)
!62 = !DILocation(line: 59, column: 113, scope: !6)
!63 = !DILocation(line: 61, column: 102, scope: !6)
!64 = !DILocation(line: 63, column: 95, scope: !6)
!65 = !DILocation(line: 65, column: 24, scope: !6)
!66 = !DILocation(line: 71, column: 24, scope: !6)
!67 = !DILocation(line: 74, column: 24, scope: !6)
!68 = !DILocation(line: 76, column: 24, scope: !6)
!69 = !DILocation(line: 77, column: 24, scope: !6)
!70 = !DILocation(line: 79, column: 24, scope: !6)
!71 = !DILocation(line: 80, column: 24, scope: !6)
!72 = !DILocation(line: 85, column: 50, scope: !6)
!73 = !DILocation(line: 83, column: 50, scope: !6)
!74 = !DILocation(line: 86, column: 53, scope: !6)
!75 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !76)
!76 = !DILocation(line: 82, column: 47, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !78)
!80 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !76)
!81 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !76)
!82 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !76)
!83 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !78)
!84 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !78)
!85 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !86)
!86 = !DILocation(line: 87, column: 40, scope: !6)
!87 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !86)
!88 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !86)
!89 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !86)
!90 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !86)
!91 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !92)
!92 = !DILocation(line: 88, column: 40, scope: !6)
!93 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !92)
!94 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !92)
!95 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !92)
!96 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !92)
!97 = !DILocation(line: 89, column: 25, scope: !6)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 90, column: 25, scope: !6)
!100 = !DILocation(line: 90, column: 37, scope: !6)
!101 = !DILocation(line: 91, column: 25, scope: !6)
!102 = !DILocation(line: 91, column: 37, scope: !6)
!103 = !DILocation(line: 92, column: 25, scope: !6)
!104 = !DILocation(line: 92, column: 37, scope: !6)
!105 = !DILocation(line: 93, column: 25, scope: !6)
!106 = !DILocation(line: 93, column: 37, scope: !6)
!107 = !DILocation(line: 94, column: 25, scope: !6)
!108 = !DILocation(line: 94, column: 37, scope: !6)
!109 = !DILocation(line: 95, column: 25, scope: !6)
!110 = !DILocation(line: 95, column: 37, scope: !6)
!111 = !DILocation(line: 96, column: 26, scope: !6)
!112 = !DILocation(line: 96, column: 38, scope: !6)
!113 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !114)
!114 = !DILocation(line: 105, column: 46, scope: !6)
!115 = !DILocation(line: 106, column: 17, scope: !6)
!116 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !117)
!117 = !DILocation(line: 107, column: 46, scope: !6)
!118 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !119)
!119 = !DILocation(line: 108, column: 46, scope: !6)
!120 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !119)
!121 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !119)
!122 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !119)
!123 = !DILocation(line: 110, column: 24, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !125)
!125 = !DILocation(line: 113, column: 46, scope: !6)
!126 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !125)
!127 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !125)
!128 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !125)
!129 = !DILocation(line: 116, column: 25, scope: !6)
!130 = !DILocation(line: 103, column: 53, scope: !6)
!131 = !DILocation(line: 103, column: 115, scope: !6)
!132 = !DILocation(line: 119, column: 24, scope: !6)
!133 = !DILocation(line: 120, column: 36, scope: !6)
!134 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !135)
!135 = !DILocation(line: 123, column: 46, scope: !6)
!136 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !135)
!137 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !135)
!138 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !135)
!139 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !140)
!140 = !DILocation(line: 125, column: 46, scope: !6)
!141 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !140)
!142 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !140)
!143 = !DILocation(line: 127, column: 25, scope: !6)
!144 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !140)
!145 = !DILocation(line: 128, column: 30, scope: !6)
!146 = !DILocation(line: 128, column: 54, scope: !6)
!147 = !DILocation(line: 129, column: 30, scope: !6)
!148 = !DILocation(line: 129, column: 54, scope: !6)
!149 = !DILocation(line: 130, column: 30, scope: !6)
!150 = !DILocation(line: 130, column: 54, scope: !6)
!151 = !DILocation(line: 131, column: 30, scope: !6)
!152 = !DILocation(line: 131, column: 54, scope: !6)
!153 = !DILocation(line: 97, column: 4, scope: !6)
