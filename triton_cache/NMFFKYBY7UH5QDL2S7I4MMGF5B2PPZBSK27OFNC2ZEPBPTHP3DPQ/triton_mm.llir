; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 96, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 96, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = lshr i32 %15, 1, !dbg !19
  %20 = and i32 %19, 55, !dbg !19
  %21 = or disjoint i32 %20, %18, !dbg !19
  %22 = shl i32 %15, 3, !dbg !19
  %23 = and i32 %22, 8, !dbg !19
  %24 = or disjoint i32 %14, %21, !dbg !20
  %25 = shl nsw i32 %13, 6, !dbg !21
  %26 = or disjoint i32 %25, %21, !dbg !22
  %27 = srem i32 %24, 77, !dbg !23
  %28 = srem i32 %26, 768, !dbg !24
  %29 = mul nsw i32 %27, 768, !dbg !25
  %30 = mul nsw i32 %28, 768, !dbg !26
  %31 = or disjoint i32 %29, %23, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = xor i32 %23, %16, !dbg !29
  %35 = shl nuw nsw i32 %21, 4, !dbg !29
  %36 = or disjoint i32 %35, %34, !dbg !29
  %37 = zext nneg i32 %36 to i64, !dbg !29
  %38 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %37, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %38, ptr addrspace(1) %33, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %39 = or disjoint i32 %30, %23, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr bfloat, ptr addrspace(1) %1, i64 %40, !dbg !31
  %42 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %37, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %42, ptr addrspace(1) %41, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, 32, !dbg !33
  %43 = shl i32 %15, 1
  %44 = and i32 %43, 8
  %45 = and i32 %15, 7
  %46 = and i32 %15, 15
  %47 = xor i32 %44, %18
  %48 = lshr i32 %15, 2
  %49 = and i32 %48, 16
  %50 = or disjoint i32 %49, %46
  %51 = shl nuw nsw i32 %50, 4
  %52 = or disjoint i32 %51, %47
  %53 = zext nneg i32 %52 to i64
  %.reass = or disjoint i32 %45, %invariant.op
  %54 = or disjoint i32 %.reass, %49
  %55 = shl nuw nsw i32 %54, 4
  %56 = or disjoint i32 %55, %47
  %57 = zext nneg i32 %56 to i64
  %58 = xor i32 %44, %16
  %59 = lshr i32 %15, 2
  %60 = and i32 %59, 8
  %61 = or disjoint i32 %60, %45
  %62 = shl nuw nsw i32 %61, 4
  %63 = or disjoint i32 %62, %58
  %64 = zext nneg i32 %63 to i64
  %65 = or disjoint i32 %63, 256
  %66 = zext nneg i32 %65 to i64
  %67 = or disjoint i32 %63, 512
  %68 = zext nneg i32 %67 to i64
  %69 = or disjoint i32 %63, 768
  %70 = zext nneg i32 %69 to i64
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !33
  %invariant.gep149 = getelementptr bfloat, ptr addrspace(1) %1, i64 %40, !dbg !33
  br label %71, !dbg !33

71:                                               ; preds = %4, %71
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %71 ]
  %72 = phi i32 [ -1, %4 ], [ %107, %71 ]
  %73 = phi float [ 0.000000e+00, %4 ], [ %153, %71 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %154, %71 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %155, %71 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %156, %71 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %158, %71 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %159, %71 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %160, %71 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %161, %71 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %163, %71 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %164, %71 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %165, %71 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %166, %71 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %168, %71 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %169, %71 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %170, %71 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %171, %71 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %173, %71 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %174, %71 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %175, %71 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %176, %71 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %178, %71 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %179, %71 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %180, %71 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %181, %71 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %183, %71 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %184, %71 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %185, %71 ]
  %100 = phi float [ 0.000000e+00, %4 ], [ %186, %71 ]
  %101 = phi float [ 0.000000e+00, %4 ], [ %188, %71 ]
  %102 = phi float [ 0.000000e+00, %4 ], [ %189, %71 ]
  %103 = phi float [ 0.000000e+00, %4 ], [ %190, %71 ]
  %104 = phi float [ 0.000000e+00, %4 ], [ %191, %71 ]
  %.not50 = icmp eq i64 %indvars.iv, 47, !dbg !33
  %105 = add i32 %72, 1, !dbg !33
  %106 = icmp ugt i32 %72, 2147483646, !dbg !33
  %107 = select i1 %106, i32 %105, i32 0, !dbg !33
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %108 = shl i32 %107, 10, !dbg !29
  %109 = sext i32 %108 to i64, !dbg !29
  %110 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %109, !dbg !29
  %111 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %110, i64 %53, !dbg !29
  %112 = ptrtoint ptr addrspace(3) %111 to i64, !dbg !29
  %113 = trunc i64 %112 to i32, !dbg !29
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %113) #1, !dbg !29
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !29
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %110, i64 %57, !dbg !29
  %120 = ptrtoint ptr addrspace(3) %119 to i64, !dbg !29
  %121 = trunc i64 %120 to i32, !dbg !29
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %121) #1, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !29
  %127 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %109, !dbg !32
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %127, i64 %64, !dbg !32
  %129 = ptrtoint ptr addrspace(3) %128 to i64, !dbg !32
  %130 = trunc i64 %129 to i32, !dbg !32
  %131 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %130) #1, !dbg !32
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !32
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !32
  %134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %127, i64 %66, !dbg !32
  %135 = ptrtoint ptr addrspace(3) %134 to i64, !dbg !32
  %136 = trunc i64 %135 to i32, !dbg !32
  %137 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %136) #1, !dbg !32
  %138 = extractvalue { i32, i32 } %137, 0, !dbg !32
  %139 = extractvalue { i32, i32 } %137, 1, !dbg !32
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %127, i64 %68, !dbg !32
  %141 = ptrtoint ptr addrspace(3) %140 to i64, !dbg !32
  %142 = trunc i64 %141 to i32, !dbg !32
  %143 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %142) #1, !dbg !32
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !32
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !32
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %127, i64 %70, !dbg !32
  %147 = ptrtoint ptr addrspace(3) %146 to i64, !dbg !32
  %148 = trunc i64 %147 to i32, !dbg !32
  %149 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %148) #1, !dbg !32
  %150 = extractvalue { i32, i32 } %149, 0, !dbg !32
  %151 = extractvalue { i32, i32 } %149, 1, !dbg !32
  %152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %73, float %74, float %75, float %76, i32 %115, i32 %116, i32 %117, i32 %118, i32 %132, i32 %133) #1, !dbg !34
  %153 = extractvalue { float, float, float, float } %152, 0, !dbg !34
  %154 = extractvalue { float, float, float, float } %152, 1, !dbg !34
  %155 = extractvalue { float, float, float, float } %152, 2, !dbg !34
  %156 = extractvalue { float, float, float, float } %152, 3, !dbg !34
  %157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %77, float %78, float %79, float %80, i32 %115, i32 %116, i32 %117, i32 %118, i32 %138, i32 %139) #1, !dbg !34
  %158 = extractvalue { float, float, float, float } %157, 0, !dbg !34
  %159 = extractvalue { float, float, float, float } %157, 1, !dbg !34
  %160 = extractvalue { float, float, float, float } %157, 2, !dbg !34
  %161 = extractvalue { float, float, float, float } %157, 3, !dbg !34
  %162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %81, float %82, float %83, float %84, i32 %115, i32 %116, i32 %117, i32 %118, i32 %144, i32 %145) #1, !dbg !34
  %163 = extractvalue { float, float, float, float } %162, 0, !dbg !34
  %164 = extractvalue { float, float, float, float } %162, 1, !dbg !34
  %165 = extractvalue { float, float, float, float } %162, 2, !dbg !34
  %166 = extractvalue { float, float, float, float } %162, 3, !dbg !34
  %167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %85, float %86, float %87, float %88, i32 %115, i32 %116, i32 %117, i32 %118, i32 %150, i32 %151) #1, !dbg !34
  %168 = extractvalue { float, float, float, float } %167, 0, !dbg !34
  %169 = extractvalue { float, float, float, float } %167, 1, !dbg !34
  %170 = extractvalue { float, float, float, float } %167, 2, !dbg !34
  %171 = extractvalue { float, float, float, float } %167, 3, !dbg !34
  %172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %89, float %90, float %91, float %92, i32 %123, i32 %124, i32 %125, i32 %126, i32 %132, i32 %133) #1, !dbg !34
  %173 = extractvalue { float, float, float, float } %172, 0, !dbg !34
  %174 = extractvalue { float, float, float, float } %172, 1, !dbg !34
  %175 = extractvalue { float, float, float, float } %172, 2, !dbg !34
  %176 = extractvalue { float, float, float, float } %172, 3, !dbg !34
  %177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %93, float %94, float %95, float %96, i32 %123, i32 %124, i32 %125, i32 %126, i32 %138, i32 %139) #1, !dbg !34
  %178 = extractvalue { float, float, float, float } %177, 0, !dbg !34
  %179 = extractvalue { float, float, float, float } %177, 1, !dbg !34
  %180 = extractvalue { float, float, float, float } %177, 2, !dbg !34
  %181 = extractvalue { float, float, float, float } %177, 3, !dbg !34
  %182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %97, float %98, float %99, float %100, i32 %123, i32 %124, i32 %125, i32 %126, i32 %144, i32 %145) #1, !dbg !34
  %183 = extractvalue { float, float, float, float } %182, 0, !dbg !34
  %184 = extractvalue { float, float, float, float } %182, 1, !dbg !34
  %185 = extractvalue { float, float, float, float } %182, 2, !dbg !34
  %186 = extractvalue { float, float, float, float } %182, 3, !dbg !34
  %187 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %101, float %102, float %103, float %104, i32 %123, i32 %124, i32 %125, i32 %126, i32 %150, i32 %151) #1, !dbg !34
  %188 = extractvalue { float, float, float, float } %187, 0, !dbg !34
  %189 = extractvalue { float, float, float, float } %187, 1, !dbg !34
  %190 = extractvalue { float, float, float, float } %187, 2, !dbg !34
  %191 = extractvalue { float, float, float, float } %187, 3, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !33
  %192 = shl nuw nsw i64 %indvars.iv.next, 4, !dbg !35
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %192, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %193 = select i1 %.not50, i32 0, i32 16, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %38, ptr addrspace(1) %gep, i32 %193) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep150 = getelementptr bfloat, ptr addrspace(1) %invariant.gep149, i64 %192, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %42, ptr addrspace(1) %gep150, i32 %193) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %exitcond.not = icmp eq i64 %indvars.iv.next, 48, !dbg !33
  br i1 %exitcond.not, label %194, label %71, !dbg !33

194:                                              ; preds = %71
  %195 = and i32 %22, 56, !dbg !19
  %196 = or disjoint i32 %25, %195, !dbg !22
  %197 = lshr i32 %15, 3, !dbg !19
  %198 = and i32 %197, 15, !dbg !19
  %199 = or disjoint i32 %198, %14, !dbg !20
  %200 = or disjoint i32 %199, 48, !dbg !20
  %201 = or disjoint i32 %199, 32, !dbg !20
  %202 = or disjoint i32 %199, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %203 = icmp slt i32 %199, 77, !dbg !36
  %204 = icmp slt i32 %202, 77, !dbg !36
  %205 = icmp slt i32 %201, 77, !dbg !36
  %206 = icmp slt i32 %200, 77, !dbg !36
  %207 = icmp slt i32 %196, 768, !dbg !37
  %208 = and i1 %203, %207, !dbg !38
  %209 = and i1 %204, %207, !dbg !38
  %210 = and i1 %205, %207, !dbg !38
  %211 = and i1 %206, %207, !dbg !38
  %212 = mul i32 %199, 768, !dbg !39
  %213 = mul i32 %202, 768, !dbg !39
  %214 = mul i32 %201, 768, !dbg !39
  %215 = mul i32 %200, 768, !dbg !39
  %216 = add i32 %212, %196, !dbg !40
  %217 = add i32 %213, %196, !dbg !40
  %218 = add i32 %214, %196, !dbg !40
  %219 = add i32 %215, %196, !dbg !40
  %220 = sext i32 %216 to i64, !dbg !41
  %221 = getelementptr bfloat, ptr addrspace(1) %2, i64 %220, !dbg !41
  %222 = sext i32 %217 to i64, !dbg !41
  %223 = getelementptr bfloat, ptr addrspace(1) %2, i64 %222, !dbg !41
  %224 = sext i32 %218 to i64, !dbg !41
  %225 = getelementptr bfloat, ptr addrspace(1) %2, i64 %224, !dbg !41
  %226 = sext i32 %219 to i64, !dbg !41
  %227 = getelementptr bfloat, ptr addrspace(1) %2, i64 %226, !dbg !41
  %228 = fptrunc float %153 to bfloat, !dbg !42
  %229 = fptrunc float %154 to bfloat, !dbg !42
  %230 = fptrunc float %155 to bfloat, !dbg !42
  %231 = fptrunc float %156 to bfloat, !dbg !42
  %232 = fptrunc float %158 to bfloat, !dbg !42
  %233 = fptrunc float %159 to bfloat, !dbg !42
  %234 = fptrunc float %160 to bfloat, !dbg !42
  %235 = fptrunc float %161 to bfloat, !dbg !42
  %236 = fptrunc float %163 to bfloat, !dbg !42
  %237 = fptrunc float %164 to bfloat, !dbg !42
  %238 = fptrunc float %165 to bfloat, !dbg !42
  %239 = fptrunc float %166 to bfloat, !dbg !42
  %240 = fptrunc float %168 to bfloat, !dbg !42
  %241 = fptrunc float %169 to bfloat, !dbg !42
  %242 = fptrunc float %170 to bfloat, !dbg !42
  %243 = fptrunc float %171 to bfloat, !dbg !42
  %244 = fptrunc float %173 to bfloat, !dbg !42
  %245 = fptrunc float %174 to bfloat, !dbg !42
  %246 = fptrunc float %175 to bfloat, !dbg !42
  %247 = fptrunc float %176 to bfloat, !dbg !42
  %248 = fptrunc float %178 to bfloat, !dbg !42
  %249 = fptrunc float %179 to bfloat, !dbg !42
  %250 = fptrunc float %180 to bfloat, !dbg !42
  %251 = fptrunc float %181 to bfloat, !dbg !42
  %252 = fptrunc float %183 to bfloat, !dbg !42
  %253 = fptrunc float %184 to bfloat, !dbg !42
  %254 = fptrunc float %185 to bfloat, !dbg !42
  %255 = fptrunc float %186 to bfloat, !dbg !42
  %256 = fptrunc float %188 to bfloat, !dbg !42
  %257 = fptrunc float %189 to bfloat, !dbg !42
  %258 = fptrunc float %190 to bfloat, !dbg !42
  %259 = fptrunc float %191 to bfloat, !dbg !42
  %260 = and i32 %43, 6, !dbg !42
  %261 = shl i32 %15, 4, !dbg !42
  %262 = and i32 %261, 192, !dbg !42
  %263 = or disjoint i32 %262, %260, !dbg !42
  %264 = shl i32 %15, 4, !dbg !42
  %265 = and i32 %264, 1280, !dbg !42
  %266 = or disjoint i32 %265, %263, !dbg !42
  %267 = or disjoint i32 %266, %60, !dbg !42
  %268 = and i32 %22, 1016, !dbg !42
  %269 = lshr i32 %266, 3, !dbg !42
  %270 = add nuw nsw i32 %269, %267, !dbg !42
  %271 = zext nneg i32 %270 to i64, !dbg !42
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %271, !dbg !42
  %273 = bitcast bfloat %228 to i16, !dbg !42
  %274 = bitcast bfloat %229 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %272, i16 %273, i16 %274, i1 true) #1, !dbg !42
  %275 = or disjoint i32 %267, 512, !dbg !42
  %276 = lshr i32 %275, 3, !dbg !42
  %277 = and i32 %276, 536870904, !dbg !42
  %278 = add nuw nsw i32 %277, %275, !dbg !42
  %279 = zext nneg i32 %278 to i64, !dbg !42
  %280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %279, !dbg !42
  %281 = bitcast bfloat %230 to i16, !dbg !42
  %282 = bitcast bfloat %231 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %280, i16 %281, i16 %282, i1 true) #1, !dbg !42
  %283 = or disjoint i32 %267, 16, !dbg !42
  %284 = add nuw nsw i32 %283, %269, !dbg !42
  %285 = zext nneg i32 %284 to i64, !dbg !42
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %285, !dbg !42
  %287 = bitcast bfloat %232 to i16, !dbg !42
  %288 = bitcast bfloat %233 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %286, i16 %287, i16 %288, i1 true) #1, !dbg !42
  %289 = or disjoint i32 %267, 528, !dbg !42
  %290 = lshr i32 %289, 3, !dbg !42
  %291 = and i32 %290, 536870904, !dbg !42
  %292 = add nuw nsw i32 %291, %289, !dbg !42
  %293 = zext nneg i32 %292 to i64, !dbg !42
  %294 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %293, !dbg !42
  %295 = bitcast bfloat %234 to i16, !dbg !42
  %296 = bitcast bfloat %235 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %294, i16 %295, i16 %296, i1 true) #1, !dbg !42
  %297 = or disjoint i32 %267, 32, !dbg !42
  %298 = add nuw nsw i32 %297, %269, !dbg !42
  %299 = zext nneg i32 %298 to i64, !dbg !42
  %300 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %299, !dbg !42
  %301 = bitcast bfloat %236 to i16, !dbg !42
  %302 = bitcast bfloat %237 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %300, i16 %301, i16 %302, i1 true) #1, !dbg !42
  %303 = or disjoint i32 %267, 544, !dbg !42
  %304 = lshr i32 %303, 3, !dbg !42
  %305 = and i32 %304, 536870904, !dbg !42
  %306 = add nuw nsw i32 %305, %303, !dbg !42
  %307 = zext nneg i32 %306 to i64, !dbg !42
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %307, !dbg !42
  %309 = bitcast bfloat %238 to i16, !dbg !42
  %310 = bitcast bfloat %239 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %308, i16 %309, i16 %310, i1 true) #1, !dbg !42
  %311 = or disjoint i32 %267, 48, !dbg !42
  %312 = add nuw nsw i32 %311, %269, !dbg !42
  %313 = zext nneg i32 %312 to i64, !dbg !42
  %314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %313, !dbg !42
  %315 = bitcast bfloat %240 to i16, !dbg !42
  %316 = bitcast bfloat %241 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %314, i16 %315, i16 %316, i1 true) #1, !dbg !42
  %317 = or disjoint i32 %267, 560, !dbg !42
  %318 = lshr i32 %317, 3, !dbg !42
  %319 = and i32 %318, 536870904, !dbg !42
  %320 = add nuw nsw i32 %319, %317, !dbg !42
  %321 = zext nneg i32 %320 to i64, !dbg !42
  %322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %321, !dbg !42
  %323 = bitcast bfloat %242 to i16, !dbg !42
  %324 = bitcast bfloat %243 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %322, i16 %323, i16 %324, i1 true) #1, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %325 = and i32 %15, 120, !dbg !42
  %326 = add nuw nsw i32 %268, %325, !dbg !42
  %327 = zext nneg i32 %326 to i64, !dbg !42
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %327, !dbg !42
  %329 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !42
  %330 = or disjoint i32 %268, 1024, !dbg !42
  %331 = lshr exact i32 %330, 3, !dbg !42
  %332 = and i32 %331, 248, !dbg !42
  %333 = add nuw nsw i32 %332, %330, !dbg !42
  %334 = zext nneg i32 %333 to i64, !dbg !42
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %334, !dbg !42
  %336 = load <4 x i32>, ptr addrspace(3) %335, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %337 = bitcast bfloat %244 to i16, !dbg !42
  %338 = bitcast bfloat %245 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %272, i16 %337, i16 %338, i1 true) #1, !dbg !42
  %339 = bitcast bfloat %246 to i16, !dbg !42
  %340 = bitcast bfloat %247 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %280, i16 %339, i16 %340, i1 true) #1, !dbg !42
  %341 = bitcast bfloat %248 to i16, !dbg !42
  %342 = bitcast bfloat %249 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %286, i16 %341, i16 %342, i1 true) #1, !dbg !42
  %343 = bitcast bfloat %250 to i16, !dbg !42
  %344 = bitcast bfloat %251 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %294, i16 %343, i16 %344, i1 true) #1, !dbg !42
  %345 = bitcast bfloat %252 to i16, !dbg !42
  %346 = bitcast bfloat %253 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %300, i16 %345, i16 %346, i1 true) #1, !dbg !42
  %347 = bitcast bfloat %254 to i16, !dbg !42
  %348 = bitcast bfloat %255 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %308, i16 %347, i16 %348, i1 true) #1, !dbg !42
  %349 = bitcast bfloat %256 to i16, !dbg !42
  %350 = bitcast bfloat %257 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %314, i16 %349, i16 %350, i1 true) #1, !dbg !42
  %351 = bitcast bfloat %258 to i16, !dbg !42
  %352 = bitcast bfloat %259 to i16, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %322, i16 %351, i16 %352, i1 true) #1, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %353 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !42
  %354 = load <4 x i32>, ptr addrspace(3) %335, align 16, !dbg !42
  %.extract = extractelement <4 x i32> %329, i64 0, !dbg !42
  %.extract52 = extractelement <4 x i32> %329, i64 1, !dbg !42
  %.extract54 = extractelement <4 x i32> %329, i64 2, !dbg !42
  %.extract56 = extractelement <4 x i32> %329, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract52, i32 %.extract54, i32 %.extract56, ptr addrspace(1) %221, i1 %208) #1, !dbg !42
  %.extract58 = extractelement <4 x i32> %336, i64 0, !dbg !42
  %.extract60 = extractelement <4 x i32> %336, i64 1, !dbg !42
  %.extract62 = extractelement <4 x i32> %336, i64 2, !dbg !42
  %.extract64 = extractelement <4 x i32> %336, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract58, i32 %.extract60, i32 %.extract62, i32 %.extract64, ptr addrspace(1) %223, i1 %209) #1, !dbg !42
  %.extract66 = extractelement <4 x i32> %353, i64 0, !dbg !42
  %.extract68 = extractelement <4 x i32> %353, i64 1, !dbg !42
  %.extract70 = extractelement <4 x i32> %353, i64 2, !dbg !42
  %.extract72 = extractelement <4 x i32> %353, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract66, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %225, i1 %210) #1, !dbg !42
  %.extract74 = extractelement <4 x i32> %354, i64 0, !dbg !42
  %.extract76 = extractelement <4 x i32> %354, i64 1, !dbg !42
  %.extract78 = extractelement <4 x i32> %354, i64 2, !dbg !42
  %.extract80 = extractelement <4 x i32> %354, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract74, i32 %.extract76, i32 %.extract78, i32 %.extract80, ptr addrspace(1) %227, i1 %211) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cepchxiznvvteqh6fd7j7cxsadojukrcuiqkp6cgjzkn4o66w5tl.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 29, scope: !6)
!26 = !DILocation(line: 77, column: 54, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 64, column: 26, scope: !6)
!34 = !DILocation(line: 78, column: 25, scope: !6)
!35 = !DILocation(line: 66, column: 50, scope: !6)
!36 = !DILocation(line: 85, column: 20, scope: !6)
!37 = !DILocation(line: 85, column: 34, scope: !6)
!38 = !DILocation(line: 85, column: 26, scope: !6)
!39 = !DILocation(line: 88, column: 25, scope: !6)
!40 = !DILocation(line: 88, column: 21, scope: !6)
!41 = !DILocation(line: 89, column: 25, scope: !6)
!42 = !DILocation(line: 89, column: 67, scope: !6)
!43 = !DILocation(line: 89, column: 4, scope: !6)
