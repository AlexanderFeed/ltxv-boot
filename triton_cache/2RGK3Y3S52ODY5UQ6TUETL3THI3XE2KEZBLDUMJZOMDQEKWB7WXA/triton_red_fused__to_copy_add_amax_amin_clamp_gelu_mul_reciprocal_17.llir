; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 1, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 512, !dbg !11
  %.lobit = lshr exact i32 %16, 9, !dbg !11
  %17 = and i32 %15, 31, !dbg !11
  %18 = or disjoint i32 %.lobit, %14, !dbg !12
  %19 = icmp slt i32 %18, 3600, !dbg !13
  %20 = icmp slt i32 %14, 3600, !dbg !13
  %21 = shl i32 %15, 1, !dbg !14
  %22 = and i32 %21, 2046, !dbg !14
  %23 = shl i32 %15, 2, !dbg !14
  %24 = and i32 %23, 2044, !dbg !14
  %25 = sext i32 %18 to i64, !dbg !15
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !15
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !16
  %31 = bitcast i16 %30 to bfloat, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %2, i64 %25, !dbg !17
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %19) #5, !dbg !18
  %37 = bitcast i16 %36 to bfloat, !dbg !18
  %38 = mul i32 %18, 12288, !dbg !19
  %.inv = fcmp oge bfloat %31, 0xR0000, !dbg !20
  %39 = select i1 %.inv, bfloat 0xR0000, bfloat %31, !dbg !20
  %40 = fpext bfloat %39 to float, !dbg !20
  %41 = fsub float 0.000000e+00, %40, !dbg !24
  %.inv3 = fcmp ole bfloat %37, 0xR0000, !dbg !25
  %42 = select i1 %.inv3, bfloat 0xR0000, bfloat %37, !dbg !25
  %43 = fpext bfloat %42 to float, !dbg !25
  %44 = fcmp ogt float %41, %43, !dbg !27
  %45 = fcmp uno float %41, 0.000000e+00, !dbg !29
  %46 = or i1 %45, %44, !dbg !30
  %47 = select i1 %46, float %41, float %43, !dbg !31
  %48 = fmul float %47, 0x3F80204080000000, !dbg !32
  %49 = fcmp ogt float %48, 0x3EE4F8B580000000, !dbg !33
  %50 = fcmp uno float %48, 0.000000e+00, !dbg !35
  %51 = or i1 %49, %50, !dbg !36
  %52 = select i1 %51, float %48, float 0x3EE4F8B580000000, !dbg !37
  %53 = or disjoint i32 %38, %24
  %54 = and i32 %23, 4092
  %55 = lshr i32 %23, 9
  %56 = and i32 %55, 4
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56
  %58 = getelementptr float, ptr addrspace(3) %57, i32 %54
  %59 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %22
  %60 = getelementptr inbounds nuw i8, ptr addrspace(3) %59, i32 8208
  %61 = zext nneg i32 %22 to i64, !dbg !38
  %62 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 4
  %63 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 8
  %64 = getelementptr inbounds nuw i8, ptr addrspace(3) %58, i32 12
  %65 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !39
  %66 = shufflevector <4 x i1> %65, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %67, !dbg !38

67:                                               ; preds = %12, %__nv_tanhf.exit150
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit150 ]
  %68 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %283, %__nv_tanhf.exit150 ]
  %69 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %284, %__nv_tanhf.exit150 ]
  %70 = or disjoint i64 %indvars.iv, %61, !dbg !40
  %71 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %72 = add i32 %53, %71, !dbg !41
  %73 = sext i32 %72 to i64, !dbg !42
  %74 = getelementptr i32, ptr addrspace(1) %0, i64 %73, !dbg !42
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %19) #5, !dbg !43
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !43
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !43
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !43
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !43
  %80 = getelementptr bfloat, ptr addrspace(1) %3, i64 %70, !dbg !44
  %81 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %80, i1 true) #5, !dbg !45
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !45
  %83 = getelementptr bfloat, ptr addrspace(1) %4, i64 %70, !dbg !46
  %84 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %83, i1 true) #5, !dbg !47
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !47
  %86 = sitofp i32 %76 to float, !dbg !48
  %87 = sitofp i32 %77 to float, !dbg !48
  %88 = sitofp i32 %78 to float, !dbg !48
  %89 = sitofp i32 %79 to float, !dbg !48
  %90 = fmul float %52, %86, !dbg !49
  %91 = fmul float %52, %87, !dbg !49
  %92 = fmul float %52, %88, !dbg !49
  %93 = fmul float %52, %89, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %94 = bitcast float %90 to i32, !dbg !49
  %95 = bitcast float %91 to i32, !dbg !49
  %96 = bitcast float %92 to i32, !dbg !49
  %97 = bitcast float %93 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %58, i32 %94, i32 %95, i32 %96, i32 %97, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %98 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !50
  %99 = shufflevector <2 x float> %98, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !50
  %100 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !51
  %101 = shufflevector <2 x float> %100, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !51
  %102 = load <2 x float>, ptr addrspace(3) %59, align 8, !dbg !49
  %103 = load <2 x float>, ptr addrspace(3) %60, align 8, !dbg !49
  %104 = shufflevector <2 x float> %103, <2 x float> %102, <4 x i32> <i32 0, i32 2, i32 1, i32 3>, !dbg !52
  %105 = fmul <4 x float> %104, %99, !dbg !52
  %106 = fadd <4 x float> %105, %101, !dbg !53
  %107 = fmul <4 x float> %106, splat (float 5.000000e-01), !dbg !54
  %108 = extractelement <4 x float> %106, i64 1, !dbg !55
  %109 = fmul float %108, %108, !dbg !56
  %110 = extractelement <4 x float> %106, i64 3, !dbg !55
  %111 = fmul float %110, %110, !dbg !56
  %112 = extractelement <4 x float> %106, i64 0, !dbg !55
  %113 = fmul float %112, %112, !dbg !56
  %114 = extractelement <4 x float> %106, i64 2, !dbg !55
  %115 = fmul float %114, %114, !dbg !56
  %116 = fmul float %108, %109, !dbg !57
  %117 = fmul float %110, %111, !dbg !57
  %118 = fmul float %112, %113, !dbg !57
  %119 = fmul float %114, %115, !dbg !57
  %120 = fmul float %116, 0x3FA6E4E260000000, !dbg !58
  %121 = fmul float %117, 0x3FA6E4E260000000, !dbg !58
  %122 = fmul float %118, 0x3FA6E4E260000000, !dbg !58
  %123 = fmul float %119, 0x3FA6E4E260000000, !dbg !58
  %124 = fadd float %108, %120, !dbg !55
  %125 = fadd float %110, %121, !dbg !55
  %126 = fadd float %112, %122, !dbg !55
  %127 = fadd float %114, %123, !dbg !55
  %128 = fmul float %124, 0x3FE9884540000000, !dbg !59
  %129 = fmul float %125, 0x3FE9884540000000, !dbg !59
  %130 = fmul float %126, 0x3FE9884540000000, !dbg !59
  %131 = fmul float %127, 0x3FE9884540000000, !dbg !59
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i75 = icmp eq i32 %132, 0, !dbg !60
  %133 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !60
  %134 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !60
  %.01.i76 = select i1 %.not.i75, float %134, float %133, !dbg !60
  %135 = fcmp ult float %.01.i76, 0x3FE3333340000000, !dbg !60
  br i1 %135, label %__internal_fmad.exit3.i82, label %__internal_fmad.exit1.i77, !dbg !60

__internal_fmad.exit1.i77:                        ; preds = %67
  %136 = fmul float %.01.i76, 0x4007154760000000, !dbg !60
  %137 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %136) #5, !dbg !60
  %138 = fadd float %137, 1.000000e+00, !dbg !60
  %139 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %138) #6, !dbg !60, !srcloc !61
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i78 = icmp eq i32 %140, 0, !dbg !60
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i79 = select i1 %.not6.i78, float %142, float %141, !dbg !60
  %143 = fcmp oge float %.01.i76, 0x4022059680000000, !dbg !60
  %s.0.i80 = select i1 %143, float 1.000000e+00, float %.03.i79, !dbg !60
  %144 = bitcast float %s.0.i80 to i32, !dbg !60
  %145 = bitcast float %128 to i32, !dbg !60
  %146 = and i32 %145, -2147483648, !dbg !60
  %147 = or i32 %146, %144, !dbg !60
  %148 = bitcast i32 %147 to float, !dbg !60
  br label %__nv_tanhf.exit93, !dbg !60

__internal_fmad.exit3.i82:                        ; preds = %67
  %149 = fmul float %128, %128, !dbg !60
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i83 = icmp eq i32 %150, 0, !dbg !60
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !60
  %152 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i84 = select i1 %.not1.i83, float %152, float %151, !dbg !60
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i85 = icmp eq i32 %153, 0, !dbg !60
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i84, float %149, float 0x3FC10B2820000000) #5, !dbg !60
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i84, float %149, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i86 = select i1 %.not2.i85, float %155, float %154, !dbg !60
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i87 = icmp eq i32 %156, 0, !dbg !60
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i86, float %149, float 0xBFD5553DA0000000) #5, !dbg !60
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i86, float %149, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i88 = select i1 %.not3.i87, float %158, float %157, !dbg !60
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i89 = icmp eq i32 %159, 0, !dbg !60
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i88, float %149, float 0.000000e+00) #5, !dbg !60
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i88, float %149, float 0.000000e+00) #5, !dbg !60
  %.04.i90 = select i1 %.not4.i89, float %161, float %160, !dbg !60
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i91 = icmp eq i32 %162, 0, !dbg !60
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i90, float %128, float %128) #5, !dbg !60
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i90, float %128, float %128) #5, !dbg !60
  %.02.i92 = select i1 %.not5.i91, float %164, float %163, !dbg !60
  br label %__nv_tanhf.exit93, !dbg !60

__nv_tanhf.exit93:                                ; preds = %__internal_fmad.exit1.i77, %__internal_fmad.exit3.i82
  %s.1.i81 = phi float [ %148, %__internal_fmad.exit1.i77 ], [ %.02.i92, %__internal_fmad.exit3.i82 ], !dbg !60
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i94 = icmp eq i32 %165, 0, !dbg !60
  %166 = tail call float @llvm.nvvm.fabs.ftz.f(float %129) #5, !dbg !60
  %167 = tail call float @llvm.nvvm.fabs.f(float %129) #5, !dbg !60
  %.01.i95 = select i1 %.not.i94, float %167, float %166, !dbg !60
  %168 = fcmp ult float %.01.i95, 0x3FE3333340000000, !dbg !60
  br i1 %168, label %__internal_fmad.exit3.i101, label %__internal_fmad.exit1.i96, !dbg !60

__internal_fmad.exit1.i96:                        ; preds = %__nv_tanhf.exit93
  %169 = fmul float %.01.i95, 0x4007154760000000, !dbg !60
  %170 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %169) #5, !dbg !60
  %171 = fadd float %170, 1.000000e+00, !dbg !60
  %172 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %171) #6, !dbg !60, !srcloc !61
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i97 = icmp eq i32 %173, 0, !dbg !60
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i98 = select i1 %.not6.i97, float %175, float %174, !dbg !60
  %176 = fcmp oge float %.01.i95, 0x4022059680000000, !dbg !60
  %s.0.i99 = select i1 %176, float 1.000000e+00, float %.03.i98, !dbg !60
  %177 = bitcast float %s.0.i99 to i32, !dbg !60
  %178 = bitcast float %129 to i32, !dbg !60
  %179 = and i32 %178, -2147483648, !dbg !60
  %180 = or i32 %179, %177, !dbg !60
  %181 = bitcast i32 %180 to float, !dbg !60
  br label %__nv_tanhf.exit112, !dbg !60

__internal_fmad.exit3.i101:                       ; preds = %__nv_tanhf.exit93
  %182 = fmul float %129, %129, !dbg !60
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i102 = icmp eq i32 %183, 0, !dbg !60
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !60
  %185 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i103 = select i1 %.not1.i102, float %185, float %184, !dbg !60
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i104 = icmp eq i32 %186, 0, !dbg !60
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i103, float %182, float 0x3FC10B2820000000) #5, !dbg !60
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i103, float %182, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i105 = select i1 %.not2.i104, float %188, float %187, !dbg !60
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i106 = icmp eq i32 %189, 0, !dbg !60
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i105, float %182, float 0xBFD5553DA0000000) #5, !dbg !60
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i105, float %182, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i107 = select i1 %.not3.i106, float %191, float %190, !dbg !60
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i108 = icmp eq i32 %192, 0, !dbg !60
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i107, float %182, float 0.000000e+00) #5, !dbg !60
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i107, float %182, float 0.000000e+00) #5, !dbg !60
  %.04.i109 = select i1 %.not4.i108, float %194, float %193, !dbg !60
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i110 = icmp eq i32 %195, 0, !dbg !60
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i109, float %129, float %129) #5, !dbg !60
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i109, float %129, float %129) #5, !dbg !60
  %.02.i111 = select i1 %.not5.i110, float %197, float %196, !dbg !60
  br label %__nv_tanhf.exit112, !dbg !60

__nv_tanhf.exit112:                               ; preds = %__internal_fmad.exit1.i96, %__internal_fmad.exit3.i101
  %s.1.i100 = phi float [ %181, %__internal_fmad.exit1.i96 ], [ %.02.i111, %__internal_fmad.exit3.i101 ], !dbg !60
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i113 = icmp eq i32 %198, 0, !dbg !60
  %199 = tail call float @llvm.nvvm.fabs.ftz.f(float %130) #5, !dbg !60
  %200 = tail call float @llvm.nvvm.fabs.f(float %130) #5, !dbg !60
  %.01.i114 = select i1 %.not.i113, float %200, float %199, !dbg !60
  %201 = fcmp ult float %.01.i114, 0x3FE3333340000000, !dbg !60
  br i1 %201, label %__internal_fmad.exit3.i120, label %__internal_fmad.exit1.i115, !dbg !60

__internal_fmad.exit1.i115:                       ; preds = %__nv_tanhf.exit112
  %202 = fmul float %.01.i114, 0x4007154760000000, !dbg !60
  %203 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %202) #5, !dbg !60
  %204 = fadd float %203, 1.000000e+00, !dbg !60
  %205 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %204) #6, !dbg !60, !srcloc !61
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i116 = icmp eq i32 %206, 0, !dbg !60
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i117 = select i1 %.not6.i116, float %208, float %207, !dbg !60
  %209 = fcmp oge float %.01.i114, 0x4022059680000000, !dbg !60
  %s.0.i118 = select i1 %209, float 1.000000e+00, float %.03.i117, !dbg !60
  %210 = bitcast float %s.0.i118 to i32, !dbg !60
  %211 = bitcast float %130 to i32, !dbg !60
  %212 = and i32 %211, -2147483648, !dbg !60
  %213 = or i32 %212, %210, !dbg !60
  %214 = bitcast i32 %213 to float, !dbg !60
  br label %__nv_tanhf.exit131, !dbg !60

__internal_fmad.exit3.i120:                       ; preds = %__nv_tanhf.exit112
  %215 = fmul float %130, %130, !dbg !60
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i121 = icmp eq i32 %216, 0, !dbg !60
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !60
  %218 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i122 = select i1 %.not1.i121, float %218, float %217, !dbg !60
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i123 = icmp eq i32 %219, 0, !dbg !60
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i122, float %215, float 0x3FC10B2820000000) #5, !dbg !60
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i122, float %215, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i124 = select i1 %.not2.i123, float %221, float %220, !dbg !60
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i125 = icmp eq i32 %222, 0, !dbg !60
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i124, float %215, float 0xBFD5553DA0000000) #5, !dbg !60
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i124, float %215, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i126 = select i1 %.not3.i125, float %224, float %223, !dbg !60
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i127 = icmp eq i32 %225, 0, !dbg !60
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i126, float %215, float 0.000000e+00) #5, !dbg !60
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i126, float %215, float 0.000000e+00) #5, !dbg !60
  %.04.i128 = select i1 %.not4.i127, float %227, float %226, !dbg !60
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i129 = icmp eq i32 %228, 0, !dbg !60
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i128, float %130, float %130) #5, !dbg !60
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i128, float %130, float %130) #5, !dbg !60
  %.02.i130 = select i1 %.not5.i129, float %230, float %229, !dbg !60
  br label %__nv_tanhf.exit131, !dbg !60

__nv_tanhf.exit131:                               ; preds = %__internal_fmad.exit1.i115, %__internal_fmad.exit3.i120
  %s.1.i119 = phi float [ %214, %__internal_fmad.exit1.i115 ], [ %.02.i130, %__internal_fmad.exit3.i120 ], !dbg !60
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i132 = icmp eq i32 %231, 0, !dbg !60
  %232 = tail call float @llvm.nvvm.fabs.ftz.f(float %131) #5, !dbg !60
  %233 = tail call float @llvm.nvvm.fabs.f(float %131) #5, !dbg !60
  %.01.i133 = select i1 %.not.i132, float %233, float %232, !dbg !60
  %234 = fcmp ult float %.01.i133, 0x3FE3333340000000, !dbg !60
  br i1 %234, label %__internal_fmad.exit3.i139, label %__internal_fmad.exit1.i134, !dbg !60

__internal_fmad.exit1.i134:                       ; preds = %__nv_tanhf.exit131
  %235 = fmul float %.01.i133, 0x4007154760000000, !dbg !60
  %236 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %235) #5, !dbg !60
  %237 = fadd float %236, 1.000000e+00, !dbg !60
  %238 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %237) #6, !dbg !60, !srcloc !61
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i135 = icmp eq i32 %239, 0, !dbg !60
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i136 = select i1 %.not6.i135, float %241, float %240, !dbg !60
  %242 = fcmp oge float %.01.i133, 0x4022059680000000, !dbg !60
  %s.0.i137 = select i1 %242, float 1.000000e+00, float %.03.i136, !dbg !60
  %243 = bitcast float %s.0.i137 to i32, !dbg !60
  %244 = bitcast float %131 to i32, !dbg !60
  %245 = and i32 %244, -2147483648, !dbg !60
  %246 = or i32 %245, %243, !dbg !60
  %247 = bitcast i32 %246 to float, !dbg !60
  br label %__nv_tanhf.exit150, !dbg !60

__internal_fmad.exit3.i139:                       ; preds = %__nv_tanhf.exit131
  %248 = fmul float %131, %131, !dbg !60
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i140 = icmp eq i32 %249, 0, !dbg !60
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !60
  %251 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i141 = select i1 %.not1.i140, float %251, float %250, !dbg !60
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i142 = icmp eq i32 %252, 0, !dbg !60
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i141, float %248, float 0x3FC10B2820000000) #5, !dbg !60
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i141, float %248, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i143 = select i1 %.not2.i142, float %254, float %253, !dbg !60
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i144 = icmp eq i32 %255, 0, !dbg !60
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i143, float %248, float 0xBFD5553DA0000000) #5, !dbg !60
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i143, float %248, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i145 = select i1 %.not3.i144, float %257, float %256, !dbg !60
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i146 = icmp eq i32 %258, 0, !dbg !60
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i145, float %248, float 0.000000e+00) #5, !dbg !60
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i145, float %248, float 0.000000e+00) #5, !dbg !60
  %.04.i147 = select i1 %.not4.i146, float %260, float %259, !dbg !60
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i148 = icmp eq i32 %261, 0, !dbg !60
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i147, float %131, float %131) #5, !dbg !60
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i147, float %131, float %131) #5, !dbg !60
  %.02.i149 = select i1 %.not5.i148, float %263, float %262, !dbg !60
  br label %__nv_tanhf.exit150, !dbg !60

__nv_tanhf.exit150:                               ; preds = %__internal_fmad.exit1.i134, %__internal_fmad.exit3.i139
  %s.1.i138 = phi float [ %247, %__internal_fmad.exit1.i134 ], [ %.02.i149, %__internal_fmad.exit3.i139 ], !dbg !60
  %264 = insertelement <4 x float> poison, float %s.1.i119, i64 0, !dbg !62
  %265 = insertelement <4 x float> %264, float %s.1.i81, i64 1, !dbg !62
  %266 = insertelement <4 x float> %265, float %s.1.i138, i64 2, !dbg !62
  %267 = insertelement <4 x float> %266, float %s.1.i100, i64 3, !dbg !62
  %268 = fadd <4 x float> %267, splat (float 1.000000e+00), !dbg !62
  %269 = fcmp uno <4 x float> %69, zeroinitializer, !dbg !63
  %270 = fcmp uno <4 x float> %68, zeroinitializer, !dbg !63
  %271 = fmul <4 x float> %107, %268, !dbg !65
  %272 = shufflevector <4 x float> %271, <4 x float> poison, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !66
  %273 = fcmp ogt <4 x float> %69, %272, !dbg !66
  %274 = fcmp olt <4 x float> %69, %272, !dbg !66
  %275 = shufflevector <4 x i1> %273, <4 x i1> %274, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !66
  %276 = or <4 x i1> %269, %275, !dbg !67
  %277 = select <4 x i1> %276, <4 x float> %69, <4 x float> %272, !dbg !68
  %278 = fcmp ogt <4 x float> %68, %271, !dbg !66
  %279 = fcmp olt <4 x float> %68, %271, !dbg !66
  %280 = shufflevector <4 x i1> %278, <4 x i1> %279, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !66
  %281 = or <4 x i1> %270, %280, !dbg !67
  %282 = select <4 x i1> %281, <4 x float> %68, <4 x float> %271, !dbg !68
  %283 = select <4 x i1> %66, <4 x float> %282, <4 x float> %68, !dbg !39
  %284 = select <4 x i1> %66, <4 x float> %277, <4 x float> %69, !dbg !39
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %286 = bitcast float %108 to i32, !dbg !70
  %287 = bitcast float %110 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %59, i32 %286, i32 %287, i1 true) #5, !dbg !70
  %288 = bitcast float %112 to i32, !dbg !70
  %289 = bitcast float %114 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %60, i32 %288, i32 %289, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %.extract = load i32, ptr addrspace(3) %58, align 16, !dbg !70
  %.extract15 = load i32, ptr addrspace(3) %62, align 4, !dbg !70
  %.extract16 = load i32, ptr addrspace(3) %63, align 8, !dbg !70
  %.extract17 = load i32, ptr addrspace(3) %64, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %285, i1 %19) #5, !dbg !70
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !38
  %290 = icmp samesign ult i64 %indvars.iv, 10240, !dbg !38
  br i1 %290, label %67, label %291, !dbg !38

291:                                              ; preds = %__nv_tanhf.exit150
  %292 = lshr i32 %15, 5, !dbg !11
  %293 = and i32 %15, 1, !dbg !11
  %294 = or disjoint i32 %14, %293, !dbg !12
  %295 = icmp slt i32 %294, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %296 = fcmp ogt <4 x float> %283, %284, !dbg !73
  %297 = extractelement <4 x float> %284, i64 3, !dbg !76
  %298 = fcmp uno float %297, 0.000000e+00, !dbg !76
  %299 = extractelement <4 x i1> %296, i64 3, !dbg !77
  %300 = or i1 %299, %298, !dbg !77
  %301 = extractelement <4 x float> %283, i64 3, !dbg !78
  %302 = select i1 %300, float %297, float %301, !dbg !78
  %303 = extractelement <4 x float> %284, i64 2, !dbg !76
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !76
  %305 = extractelement <4 x i1> %296, i64 2, !dbg !77
  %306 = or i1 %305, %304, !dbg !77
  %307 = extractelement <4 x float> %283, i64 2, !dbg !78
  %308 = select i1 %306, float %303, float %307, !dbg !78
  %309 = bitcast float %302 to i32, !dbg !71
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 16, i32 31), !dbg !71
  %311 = bitcast i32 %310 to float, !dbg !71
  %312 = fcmp olt float %302, %311, !dbg !79
  %313 = fcmp uno float %302, 0.000000e+00, !dbg !76
  %314 = or i1 %313, %312, !dbg !77
  %315 = select i1 %314, float %302, float %311, !dbg !78
  %316 = bitcast float %315 to i32, !dbg !71
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !71
  %318 = bitcast i32 %317 to float, !dbg !71
  %319 = fcmp olt float %315, %318, !dbg !79
  %320 = fcmp uno float %315, 0.000000e+00, !dbg !76
  %321 = or i1 %319, %320, !dbg !77
  %322 = select i1 %321, float %315, float %318, !dbg !78
  %323 = bitcast float %322 to i32, !dbg !71
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !71
  %325 = bitcast i32 %324 to float, !dbg !71
  %326 = fcmp olt float %322, %325, !dbg !79
  %327 = fcmp uno float %322, 0.000000e+00, !dbg !76
  %328 = or i1 %326, %327, !dbg !77
  %329 = select i1 %328, float %322, float %325, !dbg !78
  %330 = bitcast float %329 to i32, !dbg !71
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !71
  %332 = bitcast i32 %331 to float, !dbg !71
  %333 = fcmp olt float %329, %332, !dbg !79
  %334 = fcmp uno float %329, 0.000000e+00, !dbg !76
  %335 = or i1 %333, %334, !dbg !77
  %336 = select i1 %335, float %329, float %332, !dbg !78
  %337 = bitcast float %336 to i32, !dbg !71
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !71
  %339 = bitcast i32 %338 to float, !dbg !71
  %340 = fcmp olt float %336, %339, !dbg !79
  %341 = fcmp uno float %336, 0.000000e+00, !dbg !76
  %342 = or i1 %340, %341, !dbg !77
  %343 = bitcast float %308 to i32, !dbg !71
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 16, i32 31), !dbg !71
  %345 = bitcast i32 %344 to float, !dbg !71
  %346 = fcmp olt float %308, %345, !dbg !79
  %347 = fcmp uno float %308, 0.000000e+00, !dbg !76
  %348 = or i1 %347, %346, !dbg !77
  %349 = select i1 %348, float %308, float %345, !dbg !78
  %350 = bitcast float %349 to i32, !dbg !71
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 8, i32 31), !dbg !71
  %352 = bitcast i32 %351 to float, !dbg !71
  %353 = fcmp olt float %349, %352, !dbg !79
  %354 = fcmp uno float %349, 0.000000e+00, !dbg !76
  %355 = or i1 %353, %354, !dbg !77
  %356 = select i1 %355, float %349, float %352, !dbg !78
  %357 = bitcast float %356 to i32, !dbg !71
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !71
  %359 = bitcast i32 %358 to float, !dbg !71
  %360 = fcmp olt float %356, %359, !dbg !79
  %361 = fcmp uno float %356, 0.000000e+00, !dbg !76
  %362 = or i1 %360, %361, !dbg !77
  %363 = select i1 %362, float %356, float %359, !dbg !78
  %364 = bitcast float %363 to i32, !dbg !71
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !71
  %366 = bitcast i32 %365 to float, !dbg !71
  %367 = fcmp olt float %363, %366, !dbg !79
  %368 = fcmp uno float %363, 0.000000e+00, !dbg !76
  %369 = or i1 %367, %368, !dbg !77
  %370 = select i1 %369, float %363, float %366, !dbg !78
  %371 = bitcast float %370 to i32, !dbg !71
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !71
  %373 = bitcast i32 %372 to float, !dbg !71
  %374 = fcmp olt float %370, %373, !dbg !79
  %375 = fcmp uno float %370, 0.000000e+00, !dbg !76
  %376 = or i1 %374, %375, !dbg !77
  %377 = and i32 %292, 31, !dbg !71
  %378 = icmp eq i32 %17, 0, !dbg !71
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !71
  %380 = select i1 %342, i32 %337, i32 %338, !dbg !78
  %381 = insertelement <1 x i32> poison, i32 %380, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %381, i1 %378) #5, !dbg !71
  %382 = or disjoint i32 %377, 32, !dbg !71
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %382, !dbg !71
  %384 = select i1 %376, i32 %371, i32 %372, !dbg !78
  %385 = insertelement <1 x i32> poison, i32 %384, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %385, i1 %378) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %386 = icmp slt i32 %15, 64, !dbg !71
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !71
  %388 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %387, i1 %386) #5, !dbg !71
  %389 = bitcast i32 %388 to float, !dbg !71
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 16, i32 31), !dbg !71
  %391 = bitcast i32 %390 to float, !dbg !71
  %392 = fcmp olt float %389, %391, !dbg !79
  %393 = fcmp uno float %389, 0.000000e+00, !dbg !76
  %394 = or i1 %393, %392, !dbg !77
  %395 = select i1 %394, float %389, float %391, !dbg !78
  %396 = bitcast float %395 to i32, !dbg !71
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 8, i32 31), !dbg !71
  %398 = bitcast i32 %397 to float, !dbg !71
  %399 = fcmp olt float %395, %398, !dbg !79
  %400 = fcmp uno float %395, 0.000000e+00, !dbg !76
  %401 = or i1 %399, %400, !dbg !77
  %402 = select i1 %401, float %395, float %398, !dbg !78
  %403 = bitcast float %402 to i32, !dbg !71
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 4, i32 31), !dbg !71
  %405 = bitcast i32 %404 to float, !dbg !71
  %406 = fcmp olt float %402, %405, !dbg !79
  %407 = fcmp uno float %402, 0.000000e+00, !dbg !76
  %408 = or i1 %406, %407, !dbg !77
  %409 = select i1 %408, float %402, float %405, !dbg !78
  %410 = bitcast float %409 to i32, !dbg !71
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 2, i32 31), !dbg !71
  %412 = bitcast i32 %411 to float, !dbg !71
  %413 = fcmp olt float %409, %412, !dbg !79
  %414 = fcmp uno float %409, 0.000000e+00, !dbg !76
  %415 = or i1 %413, %414, !dbg !77
  %416 = select i1 %415, float %409, float %412, !dbg !78
  %417 = bitcast float %416 to i32, !dbg !71
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 1, i32 31), !dbg !71
  %419 = bitcast i32 %418 to float, !dbg !71
  %420 = fcmp olt float %416, %419, !dbg !79
  %421 = fcmp uno float %416, 0.000000e+00, !dbg !76
  %422 = or i1 %420, %421, !dbg !77
  %423 = and i1 %386, %378, !dbg !71
  %424 = select i1 %422, i32 %417, i32 %418, !dbg !78
  %425 = insertelement <1 x i32> poison, i32 %424, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %425, i1 %423) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %426 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %427 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %428 = bitcast float %426 to i32, !dbg !80
  %429 = bitcast float %427 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %428, i32 %429, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %430 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %293, !dbg !80
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %432 = extractelement <4 x float> %283, i64 1, !dbg !82
  %433 = fcmp uno float %432, 0.000000e+00, !dbg !82
  %434 = extractelement <4 x i1> %296, i64 1, !dbg !83
  %435 = or i1 %434, %433, !dbg !83
  %436 = extractelement <4 x float> %284, i64 1, !dbg !84
  %437 = select i1 %435, float %432, float %436, !dbg !84
  %438 = extractelement <4 x float> %283, i64 0, !dbg !82
  %439 = fcmp uno float %438, 0.000000e+00, !dbg !82
  %440 = extractelement <4 x i1> %296, i64 0, !dbg !83
  %441 = or i1 %440, %439, !dbg !83
  %442 = extractelement <4 x float> %284, i64 0, !dbg !84
  %443 = select i1 %441, float %438, float %442, !dbg !84
  %444 = bitcast float %437 to i32, !dbg !81
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 16, i32 31), !dbg !81
  %446 = bitcast i32 %445 to float, !dbg !81
  %447 = fcmp ogt float %437, %446, !dbg !73
  %448 = fcmp uno float %437, 0.000000e+00, !dbg !82
  %449 = or i1 %448, %447, !dbg !83
  %450 = select i1 %449, float %437, float %446, !dbg !84
  %451 = bitcast float %450 to i32, !dbg !81
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 8, i32 31), !dbg !81
  %453 = bitcast i32 %452 to float, !dbg !81
  %454 = fcmp ogt float %450, %453, !dbg !73
  %455 = fcmp uno float %450, 0.000000e+00, !dbg !82
  %456 = or i1 %454, %455, !dbg !83
  %457 = select i1 %456, float %450, float %453, !dbg !84
  %458 = bitcast float %457 to i32, !dbg !81
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !81
  %460 = bitcast i32 %459 to float, !dbg !81
  %461 = fcmp ogt float %457, %460, !dbg !73
  %462 = fcmp uno float %457, 0.000000e+00, !dbg !82
  %463 = or i1 %461, %462, !dbg !83
  %464 = select i1 %463, float %457, float %460, !dbg !84
  %465 = bitcast float %464 to i32, !dbg !81
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 2, i32 31), !dbg !81
  %467 = bitcast i32 %466 to float, !dbg !81
  %468 = fcmp ogt float %464, %467, !dbg !73
  %469 = fcmp uno float %464, 0.000000e+00, !dbg !82
  %470 = or i1 %468, %469, !dbg !83
  %471 = select i1 %470, float %464, float %467, !dbg !84
  %472 = bitcast float %471 to i32, !dbg !81
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 1, i32 31), !dbg !81
  %474 = bitcast i32 %473 to float, !dbg !81
  %475 = fcmp ogt float %471, %474, !dbg !73
  %476 = fcmp uno float %471, 0.000000e+00, !dbg !82
  %477 = or i1 %475, %476, !dbg !83
  %478 = bitcast float %443 to i32, !dbg !81
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 16, i32 31), !dbg !81
  %480 = bitcast i32 %479 to float, !dbg !81
  %481 = fcmp ogt float %443, %480, !dbg !73
  %482 = fcmp uno float %443, 0.000000e+00, !dbg !82
  %483 = or i1 %482, %481, !dbg !83
  %484 = select i1 %483, float %443, float %480, !dbg !84
  %485 = bitcast float %484 to i32, !dbg !81
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 8, i32 31), !dbg !81
  %487 = bitcast i32 %486 to float, !dbg !81
  %488 = fcmp ogt float %484, %487, !dbg !73
  %489 = fcmp uno float %484, 0.000000e+00, !dbg !82
  %490 = or i1 %488, %489, !dbg !83
  %491 = select i1 %490, float %484, float %487, !dbg !84
  %492 = bitcast float %491 to i32, !dbg !81
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 4, i32 31), !dbg !81
  %494 = bitcast i32 %493 to float, !dbg !81
  %495 = fcmp ogt float %491, %494, !dbg !73
  %496 = fcmp uno float %491, 0.000000e+00, !dbg !82
  %497 = or i1 %495, %496, !dbg !83
  %498 = select i1 %497, float %491, float %494, !dbg !84
  %499 = bitcast float %498 to i32, !dbg !81
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 2, i32 31), !dbg !81
  %501 = bitcast i32 %500 to float, !dbg !81
  %502 = fcmp ogt float %498, %501, !dbg !73
  %503 = fcmp uno float %498, 0.000000e+00, !dbg !82
  %504 = or i1 %502, %503, !dbg !83
  %505 = select i1 %504, float %498, float %501, !dbg !84
  %506 = bitcast float %505 to i32, !dbg !81
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 1, i32 31), !dbg !81
  %508 = bitcast i32 %507 to float, !dbg !81
  %509 = fcmp ogt float %505, %508, !dbg !73
  %510 = fcmp uno float %505, 0.000000e+00, !dbg !82
  %511 = or i1 %509, %510, !dbg !83
  %512 = select i1 %477, i32 %472, i32 %473, !dbg !84
  %513 = insertelement <1 x i32> poison, i32 %512, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %513, i1 %378) #5, !dbg !81
  %514 = select i1 %511, i32 %506, i32 %507, !dbg !84
  %515 = insertelement <1 x i32> poison, i32 %514, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %515, i1 %378) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %516 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %387, i1 %386) #5, !dbg !81
  %517 = bitcast i32 %516 to float, !dbg !81
  %518 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 16, i32 31), !dbg !81
  %519 = bitcast i32 %518 to float, !dbg !81
  %520 = fcmp ogt float %517, %519, !dbg !73
  %521 = fcmp uno float %517, 0.000000e+00, !dbg !82
  %522 = or i1 %521, %520, !dbg !83
  %523 = select i1 %522, float %517, float %519, !dbg !84
  %524 = bitcast float %523 to i32, !dbg !81
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 8, i32 31), !dbg !81
  %526 = bitcast i32 %525 to float, !dbg !81
  %527 = fcmp ogt float %523, %526, !dbg !73
  %528 = fcmp uno float %523, 0.000000e+00, !dbg !82
  %529 = or i1 %527, %528, !dbg !83
  %530 = select i1 %529, float %523, float %526, !dbg !84
  %531 = bitcast float %530 to i32, !dbg !81
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 4, i32 31), !dbg !81
  %533 = bitcast i32 %532 to float, !dbg !81
  %534 = fcmp ogt float %530, %533, !dbg !73
  %535 = fcmp uno float %530, 0.000000e+00, !dbg !82
  %536 = or i1 %534, %535, !dbg !83
  %537 = select i1 %536, float %530, float %533, !dbg !84
  %538 = bitcast float %537 to i32, !dbg !81
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 2, i32 31), !dbg !81
  %540 = bitcast i32 %539 to float, !dbg !81
  %541 = fcmp ogt float %537, %540, !dbg !73
  %542 = fcmp uno float %537, 0.000000e+00, !dbg !82
  %543 = or i1 %541, %542, !dbg !83
  %544 = select i1 %543, float %537, float %540, !dbg !84
  %545 = bitcast float %544 to i32, !dbg !81
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !81
  %547 = bitcast i32 %546 to float, !dbg !81
  %548 = fcmp ogt float %544, %547, !dbg !73
  %549 = fcmp uno float %544, 0.000000e+00, !dbg !82
  %550 = or i1 %548, %549, !dbg !83
  %551 = select i1 %550, i32 %545, i32 %546, !dbg !84
  %552 = insertelement <1 x i32> poison, i32 %551, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %552, i1 %423) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %553 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %554 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %555 = bitcast float %553 to i32, !dbg !85
  %556 = bitcast float %554 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %555, i32 %556, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %557 = load float, ptr addrspace(3) %430, align 4, !dbg !85
  %558 = sext i32 %294 to i64, !dbg !86
  %559 = getelementptr bfloat, ptr addrspace(1) %6, i64 %558, !dbg !86
  %560 = fptrunc float %431 to bfloat, !dbg !80
  %561 = and i32 %15, 1022, !dbg !80
  %562 = icmp eq i32 %561, 0, !dbg !80
  %563 = bitcast bfloat %560 to i16, !dbg !80
  %564 = and i1 %562, %295, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %563, ptr addrspace(1) %559, i1 %564) #5, !dbg !80
  %565 = getelementptr bfloat, ptr addrspace(1) %7, i64 %558, !dbg !87
  %566 = fptrunc float %557 to bfloat, !dbg !85
  %567 = bitcast bfloat %566 to i16, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %567, ptr addrspace(1) %565, i1 %564) #5, !dbg !85
  %.inv4 = fcmp oge float %426, 0.000000e+00, !dbg !88
  %568 = select i1 %.inv4, float 0.000000e+00, float %426, !dbg !88
  %.inv5 = fcmp oge float %427, 0.000000e+00, !dbg !88
  %569 = select i1 %.inv5, float 0.000000e+00, float %427, !dbg !88
  %570 = fsub float 0.000000e+00, %568, !dbg !90
  %571 = fsub float 0.000000e+00, %569, !dbg !90
  %.inv6 = fcmp ole float %553, 0.000000e+00, !dbg !91
  %572 = select i1 %.inv6, float 0.000000e+00, float %553, !dbg !91
  %.inv7 = fcmp ole float %554, 0.000000e+00, !dbg !91
  %573 = select i1 %.inv7, float 0.000000e+00, float %554, !dbg !91
  %574 = fcmp ogt float %570, %572, !dbg !93
  %575 = fcmp ogt float %571, %573, !dbg !93
  %576 = fcmp uno float %570, 0.000000e+00, !dbg !95
  %577 = fcmp uno float %571, 0.000000e+00, !dbg !95
  %578 = or i1 %576, %574, !dbg !96
  %579 = or i1 %577, %575, !dbg !96
  %580 = select i1 %578, float %570, float %572, !dbg !97
  %581 = select i1 %579, float %571, float %573, !dbg !97
  %582 = fmul float %580, 0x3F80204080000000, !dbg !98
  %583 = fmul float %581, 0x3F80204080000000, !dbg !98
  %584 = fcmp ogt float %582, 0x3EE4F8B580000000, !dbg !99
  %585 = fcmp ogt float %583, 0x3EE4F8B580000000, !dbg !99
  %586 = fcmp uno float %582, 0.000000e+00, !dbg !101
  %587 = fcmp uno float %583, 0.000000e+00, !dbg !101
  %588 = or i1 %584, %586, !dbg !102
  %589 = or i1 %585, %587, !dbg !102
  %590 = select i1 %588, float %582, float 0x3EE4F8B580000000, !dbg !103
  %591 = select i1 %589, float %583, float 0x3EE4F8B580000000, !dbg !103
  %592 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %590), !dbg !104
  %593 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %591), !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %594 = bitcast float %592 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %594, i1 true) #5, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %594, i1 true) #5, !dbg !105
  %595 = bitcast float %593 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %595, i1 true) #5, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %595, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %596 = lshr exact i32 %16, 6, !dbg !105
  %597 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %596, !dbg !105
  %598 = load float, ptr addrspace(3) %597, align 8, !dbg !105
  br label %599, !dbg !106

599:                                              ; preds = %291, %__nv_tanhf.exit74
  %indvars.iv159 = phi i64 [ 0, %291 ], [ %indvars.iv.next160, %__nv_tanhf.exit74 ]
  %600 = trunc nuw nsw i64 %indvars.iv159 to i32, !dbg !107
  %601 = add i32 %53, %600, !dbg !107
  %602 = sext i32 %601 to i64, !dbg !108
  %603 = getelementptr float, ptr addrspace(1) %5, i64 %602, !dbg !108
  %604 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %603, i1 %19) #5, !dbg !109
  %605 = extractvalue { i32, i32, i32, i32 } %604, 0, !dbg !109
  %606 = extractvalue { i32, i32, i32, i32 } %604, 1, !dbg !109
  %607 = extractvalue { i32, i32, i32, i32 } %604, 2, !dbg !109
  %608 = extractvalue { i32, i32, i32, i32 } %604, 3, !dbg !109
  %609 = bitcast i32 %605 to float, !dbg !109
  %610 = bitcast i32 %606 to float, !dbg !109
  %611 = bitcast i32 %607 to float, !dbg !109
  %612 = bitcast i32 %608 to float, !dbg !109
  %613 = fmul float %609, 5.000000e-01, !dbg !110
  %614 = fmul float %610, 5.000000e-01, !dbg !110
  %615 = fmul float %611, 5.000000e-01, !dbg !110
  %616 = fmul float %612, 5.000000e-01, !dbg !110
  %617 = fmul float %609, %609, !dbg !111
  %618 = fmul float %610, %610, !dbg !111
  %619 = fmul float %611, %611, !dbg !111
  %620 = fmul float %612, %612, !dbg !111
  %621 = fmul float %617, %609, !dbg !112
  %622 = fmul float %618, %610, !dbg !112
  %623 = fmul float %619, %611, !dbg !112
  %624 = fmul float %620, %612, !dbg !112
  %625 = fmul float %621, 0x3FA6E4E260000000, !dbg !113
  %626 = fmul float %622, 0x3FA6E4E260000000, !dbg !113
  %627 = fmul float %623, 0x3FA6E4E260000000, !dbg !113
  %628 = fmul float %624, 0x3FA6E4E260000000, !dbg !113
  %629 = fadd float %625, %609, !dbg !114
  %630 = fadd float %626, %610, !dbg !114
  %631 = fadd float %627, %611, !dbg !114
  %632 = fadd float %628, %612, !dbg !114
  %633 = fmul float %629, 0x3FE9884540000000, !dbg !115
  %634 = fmul float %630, 0x3FE9884540000000, !dbg !115
  %635 = fmul float %631, 0x3FE9884540000000, !dbg !115
  %636 = fmul float %632, 0x3FE9884540000000, !dbg !115
  %637 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i = icmp eq i32 %637, 0, !dbg !116
  %638 = tail call float @llvm.nvvm.fabs.ftz.f(float %633) #5, !dbg !116
  %639 = tail call float @llvm.nvvm.fabs.f(float %633) #5, !dbg !116
  %.01.i = select i1 %.not.i, float %639, float %638, !dbg !116
  %640 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !116
  br i1 %640, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !116

__internal_fmad.exit1.i:                          ; preds = %599
  %641 = fmul float %.01.i, 0x4007154760000000, !dbg !116
  %642 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %641) #5, !dbg !116
  %643 = fadd float %642, 1.000000e+00, !dbg !116
  %644 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %643) #6, !dbg !116, !srcloc !61
  %645 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i = icmp eq i32 %645, 0, !dbg !116
  %646 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %644, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %647 = tail call float @llvm.nvvm.fma.rn.f(float %644, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i = select i1 %.not6.i, float %647, float %646, !dbg !116
  %648 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !116
  %s.0.i = select i1 %648, float 1.000000e+00, float %.03.i, !dbg !116
  %649 = bitcast float %s.0.i to i32, !dbg !116
  %650 = bitcast float %633 to i32, !dbg !116
  %651 = and i32 %650, -2147483648, !dbg !116
  %652 = or i32 %651, %649, !dbg !116
  %653 = bitcast i32 %652 to float, !dbg !116
  br label %__nv_tanhf.exit, !dbg !116

__internal_fmad.exit3.i:                          ; preds = %599
  %654 = fmul float %633, %633, !dbg !116
  %655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i = icmp eq i32 %655, 0, !dbg !116
  %656 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %654, float 0xBFAAC795C0000000) #5, !dbg !116
  %657 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %654, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i = select i1 %.not1.i, float %657, float %656, !dbg !116
  %658 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i = icmp eq i32 %658, 0, !dbg !116
  %659 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %654, float 0x3FC10B2820000000) #5, !dbg !116
  %660 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %654, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i = select i1 %.not2.i, float %660, float %659, !dbg !116
  %661 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i = icmp eq i32 %661, 0, !dbg !116
  %662 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %654, float 0xBFD5553DA0000000) #5, !dbg !116
  %663 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %654, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i = select i1 %.not3.i, float %663, float %662, !dbg !116
  %664 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i = icmp eq i32 %664, 0, !dbg !116
  %665 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %654, float 0.000000e+00) #5, !dbg !116
  %666 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %654, float 0.000000e+00) #5, !dbg !116
  %.04.i = select i1 %.not4.i, float %666, float %665, !dbg !116
  %667 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i = icmp eq i32 %667, 0, !dbg !116
  %668 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %633, float %633) #5, !dbg !116
  %669 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %633, float %633) #5, !dbg !116
  %.02.i = select i1 %.not5.i, float %669, float %668, !dbg !116
  br label %__nv_tanhf.exit, !dbg !116

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %653, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !116
  %670 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i18 = icmp eq i32 %670, 0, !dbg !116
  %671 = tail call float @llvm.nvvm.fabs.ftz.f(float %634) #5, !dbg !116
  %672 = tail call float @llvm.nvvm.fabs.f(float %634) #5, !dbg !116
  %.01.i19 = select i1 %.not.i18, float %672, float %671, !dbg !116
  %673 = fcmp ult float %.01.i19, 0x3FE3333340000000, !dbg !116
  br i1 %673, label %__internal_fmad.exit3.i25, label %__internal_fmad.exit1.i20, !dbg !116

__internal_fmad.exit1.i20:                        ; preds = %__nv_tanhf.exit
  %674 = fmul float %.01.i19, 0x4007154760000000, !dbg !116
  %675 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %674) #5, !dbg !116
  %676 = fadd float %675, 1.000000e+00, !dbg !116
  %677 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %676) #6, !dbg !116, !srcloc !61
  %678 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i21 = icmp eq i32 %678, 0, !dbg !116
  %679 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %677, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %680 = tail call float @llvm.nvvm.fma.rn.f(float %677, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i22 = select i1 %.not6.i21, float %680, float %679, !dbg !116
  %681 = fcmp oge float %.01.i19, 0x4022059680000000, !dbg !116
  %s.0.i23 = select i1 %681, float 1.000000e+00, float %.03.i22, !dbg !116
  %682 = bitcast float %s.0.i23 to i32, !dbg !116
  %683 = bitcast float %634 to i32, !dbg !116
  %684 = and i32 %683, -2147483648, !dbg !116
  %685 = or i32 %684, %682, !dbg !116
  %686 = bitcast i32 %685 to float, !dbg !116
  br label %__nv_tanhf.exit36, !dbg !116

__internal_fmad.exit3.i25:                        ; preds = %__nv_tanhf.exit
  %687 = fmul float %634, %634, !dbg !116
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i26 = icmp eq i32 %688, 0, !dbg !116
  %689 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %687, float 0xBFAAC795C0000000) #5, !dbg !116
  %690 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %687, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i27 = select i1 %.not1.i26, float %690, float %689, !dbg !116
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i28 = icmp eq i32 %691, 0, !dbg !116
  %692 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i27, float %687, float 0x3FC10B2820000000) #5, !dbg !116
  %693 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i27, float %687, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i29 = select i1 %.not2.i28, float %693, float %692, !dbg !116
  %694 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i30 = icmp eq i32 %694, 0, !dbg !116
  %695 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i29, float %687, float 0xBFD5553DA0000000) #5, !dbg !116
  %696 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i29, float %687, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i31 = select i1 %.not3.i30, float %696, float %695, !dbg !116
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i32 = icmp eq i32 %697, 0, !dbg !116
  %698 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i31, float %687, float 0.000000e+00) #5, !dbg !116
  %699 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i31, float %687, float 0.000000e+00) #5, !dbg !116
  %.04.i33 = select i1 %.not4.i32, float %699, float %698, !dbg !116
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i34 = icmp eq i32 %700, 0, !dbg !116
  %701 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i33, float %634, float %634) #5, !dbg !116
  %702 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i33, float %634, float %634) #5, !dbg !116
  %.02.i35 = select i1 %.not5.i34, float %702, float %701, !dbg !116
  br label %__nv_tanhf.exit36, !dbg !116

__nv_tanhf.exit36:                                ; preds = %__internal_fmad.exit1.i20, %__internal_fmad.exit3.i25
  %s.1.i24 = phi float [ %686, %__internal_fmad.exit1.i20 ], [ %.02.i35, %__internal_fmad.exit3.i25 ], !dbg !116
  %703 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i37 = icmp eq i32 %703, 0, !dbg !116
  %704 = tail call float @llvm.nvvm.fabs.ftz.f(float %635) #5, !dbg !116
  %705 = tail call float @llvm.nvvm.fabs.f(float %635) #5, !dbg !116
  %.01.i38 = select i1 %.not.i37, float %705, float %704, !dbg !116
  %706 = fcmp ult float %.01.i38, 0x3FE3333340000000, !dbg !116
  br i1 %706, label %__internal_fmad.exit3.i44, label %__internal_fmad.exit1.i39, !dbg !116

__internal_fmad.exit1.i39:                        ; preds = %__nv_tanhf.exit36
  %707 = fmul float %.01.i38, 0x4007154760000000, !dbg !116
  %708 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %707) #5, !dbg !116
  %709 = fadd float %708, 1.000000e+00, !dbg !116
  %710 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %709) #6, !dbg !116, !srcloc !61
  %711 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i40 = icmp eq i32 %711, 0, !dbg !116
  %712 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %710, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %713 = tail call float @llvm.nvvm.fma.rn.f(float %710, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i41 = select i1 %.not6.i40, float %713, float %712, !dbg !116
  %714 = fcmp oge float %.01.i38, 0x4022059680000000, !dbg !116
  %s.0.i42 = select i1 %714, float 1.000000e+00, float %.03.i41, !dbg !116
  %715 = bitcast float %s.0.i42 to i32, !dbg !116
  %716 = bitcast float %635 to i32, !dbg !116
  %717 = and i32 %716, -2147483648, !dbg !116
  %718 = or i32 %717, %715, !dbg !116
  %719 = bitcast i32 %718 to float, !dbg !116
  br label %__nv_tanhf.exit55, !dbg !116

__internal_fmad.exit3.i44:                        ; preds = %__nv_tanhf.exit36
  %720 = fmul float %635, %635, !dbg !116
  %721 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i45 = icmp eq i32 %721, 0, !dbg !116
  %722 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %720, float 0xBFAAC795C0000000) #5, !dbg !116
  %723 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %720, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i46 = select i1 %.not1.i45, float %723, float %722, !dbg !116
  %724 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i47 = icmp eq i32 %724, 0, !dbg !116
  %725 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i46, float %720, float 0x3FC10B2820000000) #5, !dbg !116
  %726 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i46, float %720, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i48 = select i1 %.not2.i47, float %726, float %725, !dbg !116
  %727 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i49 = icmp eq i32 %727, 0, !dbg !116
  %728 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i48, float %720, float 0xBFD5553DA0000000) #5, !dbg !116
  %729 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i48, float %720, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i50 = select i1 %.not3.i49, float %729, float %728, !dbg !116
  %730 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i51 = icmp eq i32 %730, 0, !dbg !116
  %731 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i50, float %720, float 0.000000e+00) #5, !dbg !116
  %732 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i50, float %720, float 0.000000e+00) #5, !dbg !116
  %.04.i52 = select i1 %.not4.i51, float %732, float %731, !dbg !116
  %733 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i53 = icmp eq i32 %733, 0, !dbg !116
  %734 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i52, float %635, float %635) #5, !dbg !116
  %735 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i52, float %635, float %635) #5, !dbg !116
  %.02.i54 = select i1 %.not5.i53, float %735, float %734, !dbg !116
  br label %__nv_tanhf.exit55, !dbg !116

__nv_tanhf.exit55:                                ; preds = %__internal_fmad.exit1.i39, %__internal_fmad.exit3.i44
  %s.1.i43 = phi float [ %719, %__internal_fmad.exit1.i39 ], [ %.02.i54, %__internal_fmad.exit3.i44 ], !dbg !116
  %736 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i56 = icmp eq i32 %736, 0, !dbg !116
  %737 = tail call float @llvm.nvvm.fabs.ftz.f(float %636) #5, !dbg !116
  %738 = tail call float @llvm.nvvm.fabs.f(float %636) #5, !dbg !116
  %.01.i57 = select i1 %.not.i56, float %738, float %737, !dbg !116
  %739 = fcmp ult float %.01.i57, 0x3FE3333340000000, !dbg !116
  br i1 %739, label %__internal_fmad.exit3.i63, label %__internal_fmad.exit1.i58, !dbg !116

__internal_fmad.exit1.i58:                        ; preds = %__nv_tanhf.exit55
  %740 = fmul float %.01.i57, 0x4007154760000000, !dbg !116
  %741 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %740) #5, !dbg !116
  %742 = fadd float %741, 1.000000e+00, !dbg !116
  %743 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %742) #6, !dbg !116, !srcloc !61
  %744 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i59 = icmp eq i32 %744, 0, !dbg !116
  %745 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %743, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %746 = tail call float @llvm.nvvm.fma.rn.f(float %743, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i60 = select i1 %.not6.i59, float %746, float %745, !dbg !116
  %747 = fcmp oge float %.01.i57, 0x4022059680000000, !dbg !116
  %s.0.i61 = select i1 %747, float 1.000000e+00, float %.03.i60, !dbg !116
  %748 = bitcast float %s.0.i61 to i32, !dbg !116
  %749 = bitcast float %636 to i32, !dbg !116
  %750 = and i32 %749, -2147483648, !dbg !116
  %751 = or i32 %750, %748, !dbg !116
  %752 = bitcast i32 %751 to float, !dbg !116
  br label %__nv_tanhf.exit74, !dbg !116

__internal_fmad.exit3.i63:                        ; preds = %__nv_tanhf.exit55
  %753 = fmul float %636, %636, !dbg !116
  %754 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i64 = icmp eq i32 %754, 0, !dbg !116
  %755 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %753, float 0xBFAAC795C0000000) #5, !dbg !116
  %756 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %753, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i65 = select i1 %.not1.i64, float %756, float %755, !dbg !116
  %757 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i66 = icmp eq i32 %757, 0, !dbg !116
  %758 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i65, float %753, float 0x3FC10B2820000000) #5, !dbg !116
  %759 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i65, float %753, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i67 = select i1 %.not2.i66, float %759, float %758, !dbg !116
  %760 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i68 = icmp eq i32 %760, 0, !dbg !116
  %761 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i67, float %753, float 0xBFD5553DA0000000) #5, !dbg !116
  %762 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i67, float %753, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i69 = select i1 %.not3.i68, float %762, float %761, !dbg !116
  %763 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i70 = icmp eq i32 %763, 0, !dbg !116
  %764 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i69, float %753, float 0.000000e+00) #5, !dbg !116
  %765 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i69, float %753, float 0.000000e+00) #5, !dbg !116
  %.04.i71 = select i1 %.not4.i70, float %765, float %764, !dbg !116
  %766 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i72 = icmp eq i32 %766, 0, !dbg !116
  %767 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i71, float %636, float %636) #5, !dbg !116
  %768 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i71, float %636, float %636) #5, !dbg !116
  %.02.i73 = select i1 %.not5.i72, float %768, float %767, !dbg !116
  br label %__nv_tanhf.exit74, !dbg !116

__nv_tanhf.exit74:                                ; preds = %__internal_fmad.exit1.i58, %__internal_fmad.exit3.i63
  %s.1.i62 = phi float [ %752, %__internal_fmad.exit1.i58 ], [ %.02.i73, %__internal_fmad.exit3.i63 ], !dbg !116
  %769 = fadd float %s.1.i, 1.000000e+00, !dbg !117
  %770 = fadd float %s.1.i24, 1.000000e+00, !dbg !117
  %771 = fadd float %s.1.i43, 1.000000e+00, !dbg !117
  %772 = fadd float %s.1.i62, 1.000000e+00, !dbg !117
  %773 = fmul float %613, %769, !dbg !118
  %774 = fmul float %614, %770, !dbg !118
  %775 = fmul float %615, %771, !dbg !118
  %776 = fmul float %616, %772, !dbg !118
  %777 = fmul float %598, %773, !dbg !105
  %778 = fmul float %598, %774, !dbg !105
  %779 = fmul float %598, %775, !dbg !105
  %780 = fmul float %598, %776, !dbg !105
  %781 = tail call float @llvm.nvvm.round.f(float %777) #5, !dbg !119
  %782 = tail call float @llvm.nvvm.round.f(float %778) #5, !dbg !119
  %783 = tail call float @llvm.nvvm.round.f(float %779) #5, !dbg !119
  %784 = tail call float @llvm.nvvm.round.f(float %780) #5, !dbg !119
  %785 = insertelement <4 x float> poison, float %781, i64 0, !dbg !120
  %786 = insertelement <4 x float> %785, float %782, i64 1, !dbg !120
  %787 = insertelement <4 x float> %786, float %783, i64 2, !dbg !120
  %788 = insertelement <4 x float> %787, float %784, i64 3, !dbg !120
  %789 = fcmp ogt <4 x float> %788, splat (float -1.270000e+02), !dbg !120
  %790 = fcmp uno <4 x float> %788, zeroinitializer, !dbg !122
  %791 = or <4 x i1> %789, %790, !dbg !123
  %792 = select <4 x i1> %791, <4 x float> %788, <4 x float> splat (float -1.270000e+02), !dbg !124
  %793 = fcmp olt <4 x float> %792, splat (float 1.270000e+02), !dbg !125
  %794 = fcmp uno <4 x float> %792, zeroinitializer, !dbg !127
  %795 = or <4 x i1> %793, %794, !dbg !128
  %796 = fptosi <4 x float> %792 to <4 x i8>, !dbg !129
  %797 = select <4 x i1> %795, <4 x i8> %796, <4 x i8> splat (i8 127), !dbg !130
  %798 = getelementptr i8, ptr addrspace(1) %8, i64 %602, !dbg !131
  %799 = bitcast <4 x i8> %797 to i32, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %799, ptr addrspace(1) %798, i1 %19) #5, !dbg !132
  %indvars.iv.next160 = add nuw nsw i64 %indvars.iv159, 2048, !dbg !106
  %800 = icmp samesign ult i64 %indvars.iv159, 10240, !dbg !106
  br i1 %800, label %599, label %801, !dbg !106

801:                                              ; preds = %__nv_tanhf.exit74
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 76, column: 50, scope: !6)
!40 = !DILocation(line: 34, column: 31, scope: !6)
!41 = !DILocation(line: 39, column: 41, scope: !6)
!42 = !DILocation(line: 39, column: 34, scope: !6)
!43 = !DILocation(line: 39, column: 52, scope: !6)
!44 = !DILocation(line: 40, column: 35, scope: !6)
!45 = !DILocation(line: 40, column: 42, scope: !6)
!46 = !DILocation(line: 41, column: 35, scope: !6)
!47 = !DILocation(line: 41, column: 42, scope: !6)
!48 = !DILocation(line: 42, column: 23, scope: !6)
!49 = !DILocation(line: 54, column: 23, scope: !6)
!50 = !DILocation(line: 40, column: 95, scope: !6)
!51 = !DILocation(line: 41, column: 95, scope: !6)
!52 = !DILocation(line: 55, column: 24, scope: !6)
!53 = !DILocation(line: 56, column: 24, scope: !6)
!54 = !DILocation(line: 59, column: 24, scope: !6)
!55 = !DILocation(line: 64, column: 24, scope: !6)
!56 = !DILocation(line: 60, column: 24, scope: !6)
!57 = !DILocation(line: 61, column: 24, scope: !6)
!58 = !DILocation(line: 63, column: 24, scope: !6)
!59 = !DILocation(line: 66, column: 24, scope: !6)
!60 = !DILocation(line: 67, column: 31, scope: !6)
!61 = !{i32 21046}
!62 = !DILocation(line: 69, column: 24, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !64)
!64 = !DILocation(line: 75, column: 47, scope: !6)
!65 = !DILocation(line: 70, column: 24, scope: !6)
!66 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !64)
!67 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !64)
!68 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !64)
!69 = !DILocation(line: 77, column: 29, scope: !6)
!70 = !DILocation(line: 77, column: 54, scope: !6)
!71 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !72)
!72 = !DILocation(line: 78, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !74, inlinedAt: !75)
!74 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!75 = !DILocation(line: 79, column: 40, scope: !6)
!76 = !DILocation(line: 96, column: 21, scope: !74, inlinedAt: !72)
!77 = !DILocation(line: 96, column: 16, scope: !74, inlinedAt: !72)
!78 = !DILocation(line: 97, column: 29, scope: !74, inlinedAt: !72)
!79 = !DILocation(line: 94, column: 15, scope: !74, inlinedAt: !72)
!80 = !DILocation(line: 80, column: 37, scope: !6)
!81 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !75)
!82 = !DILocation(line: 104, column: 21, scope: !74, inlinedAt: !75)
!83 = !DILocation(line: 104, column: 16, scope: !74, inlinedAt: !75)
!84 = !DILocation(line: 105, column: 29, scope: !74, inlinedAt: !75)
!85 = !DILocation(line: 81, column: 37, scope: !6)
!86 = !DILocation(line: 80, column: 25, scope: !6)
!87 = !DILocation(line: 81, column: 25, scope: !6)
!88 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !89)
!89 = !DILocation(line: 104, column: 46, scope: !6)
!90 = !DILocation(line: 105, column: 17, scope: !6)
!91 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !92)
!92 = !DILocation(line: 106, column: 46, scope: !6)
!93 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !94)
!94 = !DILocation(line: 107, column: 46, scope: !6)
!95 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !94)
!96 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !94)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !94)
!98 = !DILocation(line: 109, column: 24, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 112, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 115, column: 25, scope: !6)
!105 = !DILocation(line: 117, column: 24, scope: !6)
!106 = !DILocation(line: 82, column: 40, scope: !6)
!107 = !DILocation(line: 88, column: 43, scope: !6)
!108 = !DILocation(line: 88, column: 36, scope: !6)
!109 = !DILocation(line: 88, column: 54, scope: !6)
!110 = !DILocation(line: 90, column: 24, scope: !6)
!111 = !DILocation(line: 91, column: 24, scope: !6)
!112 = !DILocation(line: 92, column: 24, scope: !6)
!113 = !DILocation(line: 94, column: 24, scope: !6)
!114 = !DILocation(line: 95, column: 24, scope: !6)
!115 = !DILocation(line: 97, column: 24, scope: !6)
!116 = !DILocation(line: 98, column: 31, scope: !6)
!117 = !DILocation(line: 100, column: 24, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 118, column: 36, scope: !6)
!120 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !121)
!121 = !DILocation(line: 121, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !121)
!123 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !121)
!124 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !121)
!125 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !126)
!126 = !DILocation(line: 123, column: 46, scope: !6)
!127 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !126)
!128 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !126)
!129 = !DILocation(line: 125, column: 25, scope: !6)
!130 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !126)
!131 = !DILocation(line: 126, column: 29, scope: !6)
!132 = !DILocation(line: 126, column: 54, scope: !6)
!133 = !DILocation(line: 82, column: 4, scope: !6)
