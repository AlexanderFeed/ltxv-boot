; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 96, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 3, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 96, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 3, !dbg !19
  %18 = and i32 %17, 15, !dbg !19
  %19 = and i32 %15, 128, !dbg !19
  %20 = lshr exact i32 %19, 3, !dbg !19
  %21 = or disjoint i32 %18, %20, !dbg !19
  %22 = or disjoint i32 %14, %21, !dbg !20
  %23 = shl nsw i32 %13, 6, !dbg !21
  %24 = lshr i32 %15, 2, !dbg !22
  %25 = and i32 %24, 63, !dbg !22
  %26 = shl i32 %15, 3, !dbg !22
  %27 = and i32 %26, 24, !dbg !22
  %28 = or disjoint i32 %23, %25, !dbg !23
  %29 = srem i32 %22, 77, !dbg !24
  %30 = srem i32 %28, 768, !dbg !25
  %31 = shl i32 %15, 2, !dbg !26
  %32 = and i32 %31, 8, !dbg !26
  %33 = and i32 %31, 16, !dbg !26
  %34 = and i32 %31, 28, !dbg !26
  %35 = mul nsw i32 %29, 3072, !dbg !27
  %36 = mul nsw i32 %30, 3072, !dbg !28
  %37 = or disjoint i32 %35, %34, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = lshr exact i32 %16, 1, !dbg !31
  %41 = lshr i32 %15, 1, !dbg !31
  %42 = and i32 %41, 24, !dbg !31
  %43 = xor i32 %42, %34, !dbg !31
  %44 = shl nuw nsw i32 %21, 5, !dbg !31
  %45 = or disjoint i32 %44, %43, !dbg !31
  %46 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %46, ptr addrspace(1) %39, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %47 = or disjoint i32 %36, %27, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %48, !dbg !33
  %50 = xor i32 %26, %15, !dbg !34
  %51 = and i32 %50, 24, !dbg !34
  %52 = shl nuw nsw i32 %25, 5, !dbg !34
  %53 = or disjoint i32 %51, %52, !dbg !34
  %54 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %53, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %54, ptr addrspace(1) %49, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %55 = or disjoint i32 %37, 32, !dbg !29
  %56 = sext i32 %55 to i64, !dbg !30
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %58 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %58, ptr addrspace(1) %57, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %59 = or disjoint i32 %47, 32, !dbg !32
  %60 = sext i32 %59 to i64, !dbg !33
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !33
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %53, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %61, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %63 = or disjoint i32 %37, 64, !dbg !29
  %64 = sext i32 %63 to i64, !dbg !30
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %65, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %67 = or disjoint i32 %47, 64, !dbg !32
  %68 = sext i32 %67 to i64, !dbg !33
  %69 = getelementptr bfloat, ptr addrspace(1) %1, i64 %68, !dbg !33
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %53, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %69, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %71 = or disjoint i32 %37, 96, !dbg !29
  %72 = sext i32 %71 to i64, !dbg !30
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %45, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %73, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %75 = or disjoint i32 %47, 96, !dbg !32
  %76 = sext i32 %75 to i64, !dbg !33
  %77 = getelementptr bfloat, ptr addrspace(1) %1, i64 %76, !dbg !33
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %53, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %78, ptr addrspace(1) %77, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %79 = and i32 %31, 24
  %80 = and i32 %15, 7
  %81 = and i32 %15, 15
  %82 = xor i32 %79, %40
  %83 = or disjoint i32 %20, %81
  %84 = shl nuw nsw i32 %83, 5
  %85 = or disjoint i32 %84, %82
  %86 = or disjoint i32 %32, 16
  %87 = or disjoint i32 %40, %33
  %88 = xor i32 %87, %86
  %89 = or disjoint i32 %88, %84
  %90 = xor i32 %31, %15
  %91 = and i32 %90, 24
  %92 = and i32 %24, 24
  %93 = or disjoint i32 %92, %80
  %94 = shl nuw nsw i32 %93, 5
  %95 = or disjoint i32 %94, %91
  %96 = or disjoint i32 %95, 1024
  %invariant.op = or disjoint i32 %37, 128, !dbg !35
  %invariant.op26 = or disjoint i32 %47, 128, !dbg !35
  %97 = sext i32 %invariant.op to i64, !dbg !35
  %98 = sext i32 %invariant.op26 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %97, !dbg !35
  %invariant.gep45 = getelementptr bfloat, ptr addrspace(1) %1, i64 %98, !dbg !35
  br label %99, !dbg !35

99:                                               ; preds = %4, %99
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %99 ]
  %100 = phi i32 [ -1, %4 ], [ %113, %99 ]
  %101 = phi i32 [ 3, %4 ], [ %166, %99 ]
  %102 = phi float [ 0.000000e+00, %4 ], [ %155, %99 ]
  %103 = phi float [ 0.000000e+00, %4 ], [ %156, %99 ]
  %104 = phi float [ 0.000000e+00, %4 ], [ %157, %99 ]
  %105 = phi float [ 0.000000e+00, %4 ], [ %158, %99 ]
  %106 = phi float [ 0.000000e+00, %4 ], [ %160, %99 ]
  %107 = phi float [ 0.000000e+00, %4 ], [ %161, %99 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %162, %99 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %163, %99 ]
  %110 = icmp samesign ult i64 %indvars.iv, 92, !dbg !35
  %111 = add i32 %100, 1, !dbg !35
  %112 = icmp slt i32 %111, 4, !dbg !35
  %113 = select i1 %112, i32 %111, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl i32 %113, 11, !dbg !31
  %114 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx, !dbg !31
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %114, i32 %85, !dbg !31
  %116 = ptrtoint ptr addrspace(3) %115 to i32, !dbg !31
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %116) #1, !dbg !31
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !31
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %114, i32 %89, !dbg !31
  %123 = ptrtoint ptr addrspace(3) %122 to i32, !dbg !31
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %123) #1, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !31
  %.idx14 = shl i32 %113, 12, !dbg !34
  %129 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !34
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %129, i32 %95, !dbg !34
  %131 = ptrtoint ptr addrspace(3) %130 to i32, !dbg !34
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %131) #1, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !34
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !34
  %137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %129, i32 %96, !dbg !34
  %138 = ptrtoint ptr addrspace(3) %137 to i32, !dbg !34
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %138) #1, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !34
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !34
  %144 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %102, float %103, float %104, float %105, i32 %118, i32 %119, i32 %120, i32 %121, i32 %133, i32 %134) #1, !dbg !36
  %145 = extractvalue { float, float, float, float } %144, 0, !dbg !36
  %146 = extractvalue { float, float, float, float } %144, 1, !dbg !36
  %147 = extractvalue { float, float, float, float } %144, 2, !dbg !36
  %148 = extractvalue { float, float, float, float } %144, 3, !dbg !36
  %149 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %106, float %107, float %108, float %109, i32 %118, i32 %119, i32 %120, i32 %121, i32 %140, i32 %141) #1, !dbg !36
  %150 = extractvalue { float, float, float, float } %149, 0, !dbg !36
  %151 = extractvalue { float, float, float, float } %149, 1, !dbg !36
  %152 = extractvalue { float, float, float, float } %149, 2, !dbg !36
  %153 = extractvalue { float, float, float, float } %149, 3, !dbg !36
  %154 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %145, float %146, float %147, float %148, i32 %125, i32 %126, i32 %127, i32 %128, i32 %135, i32 %136) #1, !dbg !36
  %155 = extractvalue { float, float, float, float } %154, 0, !dbg !36
  %156 = extractvalue { float, float, float, float } %154, 1, !dbg !36
  %157 = extractvalue { float, float, float, float } %154, 2, !dbg !36
  %158 = extractvalue { float, float, float, float } %154, 3, !dbg !36
  %159 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %125, i32 %126, i32 %127, i32 %128, i32 %142, i32 %143) #1, !dbg !36
  %160 = extractvalue { float, float, float, float } %159, 0, !dbg !36
  %161 = extractvalue { float, float, float, float } %159, 1, !dbg !36
  %162 = extractvalue { float, float, float, float } %159, 2, !dbg !36
  %163 = extractvalue { float, float, float, float } %159, 3, !dbg !36
  %164 = add i32 %101, 1, !dbg !35
  %165 = icmp slt i32 %164, 4, !dbg !35
  %166 = select i1 %165, i32 %164, i32 0, !dbg !35
  %167 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep44 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %167, !dbg !30
  %.idx15 = shl i32 %166, 11, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %46, i32 %.idx15, !dbg !31
  %168 = select i1 %110, i32 8, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep44, i32 %168) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep46 = getelementptr bfloat, ptr addrspace(1) %invariant.gep45, i64 %167, !dbg !33
  %.idx16 = shl i32 %166, 12, !dbg !34
  %gep25 = getelementptr i8, ptr addrspace(3) %54, i32 %.idx16, !dbg !34
  %169 = select i1 %110, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep25, ptr addrspace(1) %gep46, i32 %169) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !35
  br i1 %exitcond.not, label %170, label %99, !dbg !35

170:                                              ; preds = %99
  %171 = and i32 %26, 56, !dbg !22
  %172 = or disjoint i32 %23, %171, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %173 = icmp slt i32 %22, 77, !dbg !38
  %174 = icmp slt i32 %172, 768, !dbg !39
  %175 = and i1 %173, %174, !dbg !40
  %176 = mul i32 %22, 768, !dbg !41
  %177 = add i32 %176, %172, !dbg !42
  %178 = sext i32 %177 to i64, !dbg !43
  %179 = getelementptr bfloat, ptr addrspace(1) %2, i64 %178, !dbg !43
  %180 = fptrunc float %155 to bfloat, !dbg !44
  %181 = fptrunc float %156 to bfloat, !dbg !44
  %182 = fptrunc float %157 to bfloat, !dbg !44
  %183 = fptrunc float %158 to bfloat, !dbg !44
  %184 = fptrunc float %160 to bfloat, !dbg !44
  %185 = fptrunc float %161 to bfloat, !dbg !44
  %186 = fptrunc float %162 to bfloat, !dbg !44
  %187 = fptrunc float %163 to bfloat, !dbg !44
  %188 = shl i32 %15, 1, !dbg !44
  %189 = and i32 %188, 6, !dbg !44
  %190 = shl i32 %15, 4, !dbg !44
  %191 = and i32 %190, 192, !dbg !44
  %192 = or disjoint i32 %191, %189, !dbg !44
  %193 = shl nuw nsw i32 %16, 4, !dbg !44
  %194 = or disjoint i32 %192, %193, !dbg !44
  %195 = or disjoint i32 %194, %92, !dbg !44
  %196 = shl nuw nsw i32 %19, 3, !dbg !44
  %197 = or disjoint i32 %195, %196, !dbg !44
  %198 = and i32 %26, 1016, !dbg !44
  %199 = or disjoint i32 %198, %196, !dbg !44
  %200 = lshr i32 %197, 3, !dbg !44
  %201 = and i32 %200, 536870904, !dbg !44
  %202 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %201, !dbg !44
  %203 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %202, i32 %197, !dbg !44
  %204 = bitcast bfloat %180 to i16, !dbg !44
  %205 = bitcast bfloat %181 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %203, i16 %204, i16 %205, i1 true) #1, !dbg !44
  %206 = or disjoint i32 %197, 512, !dbg !44
  %207 = lshr i32 %206, 3, !dbg !44
  %208 = and i32 %207, 536870904, !dbg !44
  %209 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %208, !dbg !44
  %210 = getelementptr bfloat, ptr addrspace(3) %209, i32 %206, !dbg !44
  %211 = bitcast bfloat %182 to i16, !dbg !44
  %212 = bitcast bfloat %183 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %210, i16 %211, i16 %212, i1 true) #1, !dbg !44
  %213 = or disjoint i32 %197, 32, !dbg !44
  %214 = getelementptr bfloat, ptr addrspace(3) %202, i32 %213, !dbg !44
  %215 = bitcast bfloat %184 to i16, !dbg !44
  %216 = bitcast bfloat %185 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %214, i16 %215, i16 %216, i1 true) #1, !dbg !44
  %217 = or disjoint i32 %197, 544, !dbg !44
  %218 = lshr i32 %217, 3, !dbg !44
  %219 = and i32 %218, 536870904, !dbg !44
  %220 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %219, !dbg !44
  %221 = getelementptr bfloat, ptr addrspace(3) %220, i32 %217, !dbg !44
  %222 = bitcast bfloat %186 to i16, !dbg !44
  %223 = bitcast bfloat %187 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %221, i16 %222, i16 %223, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %224 = lshr exact i32 %199, 3, !dbg !44
  %225 = and i32 %224, 248, !dbg !44
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %225, !dbg !44
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %226, i32 %199, !dbg !44
  %.extract = load i32, ptr addrspace(3) %227, align 16, !dbg !44
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 4, !dbg !44
  %.extract18 = load i32, ptr addrspace(3) %228, align 4, !dbg !44
  %229 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 8, !dbg !44
  %.extract20 = load i32, ptr addrspace(3) %229, align 8, !dbg !44
  %230 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 12, !dbg !44
  %.extract22 = load i32, ptr addrspace(3) %230, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract20, i32 %.extract22, ptr addrspace(1) %179, i1 %175) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3fnddyy7la5lnnqxdeiflj54g7in33ppwgcdrra35niwhipyh5m.py", directory: "/tmp/torchinductor_root/3f")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 25, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
