; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 16, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 16, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 8, !dbg !19
  %20 = and i32 %18, 15, !dbg !19
  %21 = and i32 %15, 64, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %15, 128, !dbg !19
  %24 = lshr exact i32 %23, 2, !dbg !19
  %25 = or disjoint i32 %22, %20, !dbg !19
  %26 = or disjoint i32 %25, %24, !dbg !19
  %27 = or disjoint i32 %14, %26, !dbg !20
  %28 = shl nsw i32 %13, 5, !dbg !21
  %29 = shl i32 %15, 2, !dbg !22
  %30 = and i32 %29, 8, !dbg !22
  %31 = and i32 %29, 12, !dbg !22
  %32 = shl nuw nsw i32 %16, 2, !dbg !22
  %33 = or disjoint i32 %31, %32, !dbg !22
  %34 = shl i32 %15, 3, !dbg !22
  %35 = and i32 %34, 24, !dbg !22
  %36 = or disjoint i32 %28, %33, !dbg !23
  %37 = srem i32 %27, 512, !dbg !24
  %38 = srem i32 %36, 64, !dbg !25
  %39 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %40 = shl nsw i32 %37, 9, !dbg !27
  %41 = shl i32 %39, 18, !dbg !28
  %42 = or disjoint i32 %35, %41, !dbg !29
  %43 = add i32 %42, %40, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = lshr i32 %15, 3, !dbg !32
  %47 = and i32 %46, 31, !dbg !32
  %48 = shl nuw nsw i32 %47, 12, !dbg !33
  %49 = shl i32 %39, 6, !dbg !34
  %50 = add i32 %48, %49, !dbg !35
  %51 = add i32 %50, %38, !dbg !36
  %52 = sext i32 %51 to i64, !dbg !37
  %53 = getelementptr bfloat, ptr addrspace(1) %1, i64 %52, !dbg !37
  %54 = xor i32 %34, %15, !dbg !38
  %55 = and i32 %54, 24, !dbg !38
  %56 = shl nuw nsw i32 %26, 5, !dbg !38
  %57 = or disjoint i32 %56, %55, !dbg !38
  %58 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %58, ptr addrspace(1) %45, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %59 = lshr exact i32 %17, 1, !dbg !39
  %60 = lshr i32 %15, 1, !dbg !39
  %61 = and i32 %60, 24, !dbg !39
  %62 = xor i32 %33, %61, !dbg !39
  %63 = shl nuw nsw i32 %47, 5, !dbg !39
  %64 = or disjoint i32 %62, %63, !dbg !39
  %65 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %64, !dbg !39
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %53, i32 8) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %66 = getelementptr i8, ptr addrspace(1) %45, i64 64, !dbg !40
  %67 = getelementptr i8, ptr addrspace(1) %53, i64 262144, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %66, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %64, !dbg !39
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %67, i32 8) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %70 = getelementptr i8, ptr addrspace(1) %45, i64 128, !dbg !40
  %71 = getelementptr i8, ptr addrspace(1) %53, i64 524288, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %70, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %64, !dbg !39
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %71, i32 8) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %74 = getelementptr i8, ptr addrspace(1) %45, i64 192, !dbg !40
  %75 = getelementptr i8, ptr addrspace(1) %53, i64 786432, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %74, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %64, !dbg !39
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %77, ptr addrspace(1) %75, i32 8) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %invariant.op = or disjoint i32 %32, %59, !dbg !42
  %invariant.op46 = or disjoint i32 %32, %19, !dbg !42
  %78 = or disjoint i32 %30, %32
  %79 = and i32 %15, 15
  %80 = xor i32 %78, %59
  %81 = or disjoint i32 %22, %79
  %82 = or disjoint i32 %81, %24
  %83 = shl nuw nsw i32 %82, 5
  %84 = or disjoint i32 %83, %80
  %85 = or disjoint i32 %30, 16
  %.reass = xor i32 %85, %invariant.op
  %86 = or disjoint i32 %.reass, %83
  %87 = xor i32 %78, %19
  %88 = shl i32 %15, 5
  %89 = and i32 %88, 992
  %90 = or disjoint i32 %87, %89
  %.reass47 = xor i32 %85, %invariant.op46
  %91 = or disjoint i32 %.reass47, %89
  br label %92, !dbg !42

92:                                               ; preds = %4, %92
  %93 = phi i32 [ -1, %4 ], [ %107, %92 ]
  %94 = phi i32 [ 3, %4 ], [ %162, %92 ]
  %.pn2651 = phi ptr addrspace(1) [ %75, %4 ], [ %159, %92 ]
  %.pn1850 = phi ptr addrspace(1) [ %74, %4 ], [ %158, %92 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %149, %92 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %150, %92 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %151, %92 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %152, %92 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %154, %92 ]
  %100 = phi float [ 0.000000e+00, %4 ], [ %155, %92 ]
  %101 = phi float [ 0.000000e+00, %4 ], [ %156, %92 ]
  %102 = phi float [ 0.000000e+00, %4 ], [ %157, %92 ]
  %103 = phi i32 [ 0, %4 ], [ %165, %92 ]
  %104 = icmp samesign ult i32 %103, 384, !dbg !42
  %105 = add i32 %93, 1, !dbg !42
  %106 = icmp slt i32 %105, 4, !dbg !42
  %107 = select i1 %106, i32 %105, i32 0, !dbg !42
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx = shl i32 %107, 12, !dbg !38
  %108 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %109 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %108, i32 %84, !dbg !38
  %110 = ptrtoint ptr addrspace(3) %109 to i32, !dbg !38
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %110) #1, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !38
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %108, i32 %86, !dbg !38
  %117 = ptrtoint ptr addrspace(3) %116 to i32, !dbg !38
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %117) #1, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !38
  %.idx37 = shl i32 %107, 11, !dbg !39
  %123 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx37, !dbg !39
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %123, i32 %90, !dbg !39
  %125 = ptrtoint ptr addrspace(3) %124 to i32, !dbg !39
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %125) #1, !dbg !39
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !39
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !39
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !39
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !39
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %123, i32 %91, !dbg !39
  %132 = ptrtoint ptr addrspace(3) %131 to i32, !dbg !39
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %132) #1, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !39
  %138 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %95, float %96, float %97, float %98, i32 %112, i32 %113, i32 %114, i32 %115, i32 %127, i32 %128) #1, !dbg !43
  %139 = extractvalue { float, float, float, float } %138, 0, !dbg !43
  %140 = extractvalue { float, float, float, float } %138, 1, !dbg !43
  %141 = extractvalue { float, float, float, float } %138, 2, !dbg !43
  %142 = extractvalue { float, float, float, float } %138, 3, !dbg !43
  %143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %99, float %100, float %101, float %102, i32 %112, i32 %113, i32 %114, i32 %115, i32 %134, i32 %135) #1, !dbg !43
  %144 = extractvalue { float, float, float, float } %143, 0, !dbg !43
  %145 = extractvalue { float, float, float, float } %143, 1, !dbg !43
  %146 = extractvalue { float, float, float, float } %143, 2, !dbg !43
  %147 = extractvalue { float, float, float, float } %143, 3, !dbg !43
  %148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %139, float %140, float %141, float %142, i32 %119, i32 %120, i32 %121, i32 %122, i32 %129, i32 %130) #1, !dbg !43
  %149 = extractvalue { float, float, float, float } %148, 0, !dbg !43
  %150 = extractvalue { float, float, float, float } %148, 1, !dbg !43
  %151 = extractvalue { float, float, float, float } %148, 2, !dbg !43
  %152 = extractvalue { float, float, float, float } %148, 3, !dbg !43
  %153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %144, float %145, float %146, float %147, i32 %119, i32 %120, i32 %121, i32 %122, i32 %136, i32 %137) #1, !dbg !43
  %154 = extractvalue { float, float, float, float } %153, 0, !dbg !43
  %155 = extractvalue { float, float, float, float } %153, 1, !dbg !43
  %156 = extractvalue { float, float, float, float } %153, 2, !dbg !43
  %157 = extractvalue { float, float, float, float } %153, 3, !dbg !43
  %158 = getelementptr i8, ptr addrspace(1) %.pn1850, i64 64, !dbg !40
  %159 = getelementptr i8, ptr addrspace(1) %.pn2651, i64 262144, !dbg !41
  %160 = add i32 %94, 1, !dbg !42
  %161 = icmp slt i32 %160, 4, !dbg !42
  %162 = select i1 %161, i32 %160, i32 0, !dbg !42
  %.idx38 = shl i32 %162, 12, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %gep = getelementptr i8, ptr addrspace(3) %58, i32 %.idx38, !dbg !38
  %163 = select i1 %104, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %158, i32 %163) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %.idx39 = shl i32 %162, 11, !dbg !39
  %gep49 = getelementptr i8, ptr addrspace(3) %65, i32 %.idx39, !dbg !39
  %164 = select i1 %104, i32 8, i32 0, !dbg !39
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep49, ptr addrspace(1) %159, i32 %164) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %165 = add nuw nsw i32 %103, 32, !dbg !42
  %166 = icmp samesign ult i32 %103, 480, !dbg !42
  br i1 %166, label %92, label %167, !dbg !42

167:                                              ; preds = %92
  %168 = or disjoint i32 %28, %35, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %169 = icmp slt i32 %27, 512, !dbg !44
  %170 = icmp slt i32 %168, 64, !dbg !45
  %171 = and i1 %169, %170, !dbg !46
  %172 = shl i32 %27, 6, !dbg !47
  %173 = shl i32 %39, 15, !dbg !48
  %174 = add i32 %168, %173, !dbg !49
  %175 = add i32 %174, %172, !dbg !50
  %176 = sext i32 %175 to i64, !dbg !51
  %177 = getelementptr bfloat, ptr addrspace(1) %2, i64 %176, !dbg !51
  %178 = fptrunc float %149 to bfloat, !dbg !52
  %179 = fptrunc float %150 to bfloat, !dbg !52
  %180 = fptrunc float %151 to bfloat, !dbg !52
  %181 = fptrunc float %152 to bfloat, !dbg !52
  %182 = fptrunc float %154 to bfloat, !dbg !52
  %183 = fptrunc float %155 to bfloat, !dbg !52
  %184 = fptrunc float %156 to bfloat, !dbg !52
  %185 = fptrunc float %157 to bfloat, !dbg !52
  %186 = shl i32 %15, 1, !dbg !52
  %187 = and i32 %186, 6, !dbg !52
  %188 = shl nuw nsw i32 %16, 3, !dbg !52
  %189 = or disjoint i32 %187, %188, !dbg !52
  %190 = and i32 %34, 64, !dbg !52
  %191 = or disjoint i32 %189, %190, !dbg !52
  %192 = shl nuw nsw i32 %17, 3, !dbg !52
  %193 = or disjoint i32 %191, %192, !dbg !52
  %194 = or disjoint i32 %193, %19, !dbg !52
  %195 = shl nuw nsw i32 %21, 3, !dbg !52
  %196 = shl nuw nsw i32 %23, 3, !dbg !52
  %197 = or disjoint i32 %196, %195, !dbg !52
  %198 = xor i32 %197, %194, !dbg !52
  %199 = and i32 %34, 376, !dbg !52
  %200 = or disjoint i32 %199, %192, !dbg !52
  %201 = or disjoint i32 %200, %195, !dbg !52
  %202 = or disjoint i32 %201, %196, !dbg !52
  %203 = lshr i32 %198, 2, !dbg !52
  %204 = and i32 %203, 1073741816, !dbg !52
  %205 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %204, !dbg !52
  %206 = getelementptr bfloat, ptr addrspace(3) %205, i32 %198, !dbg !52
  %207 = bitcast bfloat %178 to i16, !dbg !52
  %208 = bitcast bfloat %179 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %206, i16 %207, i16 %208, i1 true) #1, !dbg !52
  %209 = xor i32 %198, 256, !dbg !52
  %210 = lshr i32 %209, 2, !dbg !52
  %211 = and i32 %210, 1073741816, !dbg !52
  %212 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %211, !dbg !52
  %213 = getelementptr bfloat, ptr addrspace(3) %212, i32 %209, !dbg !52
  %214 = bitcast bfloat %180 to i16, !dbg !52
  %215 = bitcast bfloat %181 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %213, i16 %214, i16 %215, i1 true) #1, !dbg !52
  %216 = xor i32 %198, 16, !dbg !52
  %217 = getelementptr bfloat, ptr addrspace(3) %205, i32 %216, !dbg !52
  %218 = bitcast bfloat %182 to i16, !dbg !52
  %219 = bitcast bfloat %183 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %217, i16 %218, i16 %219, i1 true) #1, !dbg !52
  %220 = xor i32 %198, 272, !dbg !52
  %221 = lshr i32 %220, 2, !dbg !52
  %222 = and i32 %221, 1073741816, !dbg !52
  %223 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %222, !dbg !52
  %224 = getelementptr bfloat, ptr addrspace(3) %223, i32 %220, !dbg !52
  %225 = bitcast bfloat %184 to i16, !dbg !52
  %226 = bitcast bfloat %185 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %224, i16 %225, i16 %226, i1 true) #1, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %227 = lshr exact i32 %202, 2, !dbg !52
  %228 = and i32 %227, 536870904, !dbg !52
  %229 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %228, !dbg !52
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i32 %202, !dbg !52
  %.extract = load i32, ptr addrspace(3) %230, align 16, !dbg !52
  %231 = getelementptr inbounds nuw i8, ptr addrspace(3) %230, i32 4, !dbg !52
  %.extract41 = load i32, ptr addrspace(3) %231, align 4, !dbg !52
  %232 = getelementptr inbounds nuw i8, ptr addrspace(3) %230, i32 8, !dbg !52
  %.extract43 = load i32, ptr addrspace(3) %232, align 8, !dbg !52
  %233 = getelementptr inbounds nuw i8, ptr addrspace(3) %230, i32 12, !dbg !52
  %.extract45 = load i32, ptr addrspace(3) %233, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %177, i1 %171) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl7exx6aqzijzxokh6xffeuv4qtj337mcksrbfvjrtg3iegcmtqn.py", directory: "/tmp/torchinductor_root/l7")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 55, column: 52, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 16, scope: !6)
!33 = !DILocation(line: 67, column: 27, scope: !6)
!34 = !DILocation(line: 67, column: 72, scope: !6)
!35 = !DILocation(line: 67, column: 39, scope: !6)
!36 = !DILocation(line: 67, column: 66, scope: !6)
!37 = !DILocation(line: 67, column: 13, scope: !6)
!38 = !DILocation(line: 72, column: 24, scope: !6)
!39 = !DILocation(line: 73, column: 24, scope: !6)
!40 = !DILocation(line: 78, column: 13, scope: !6)
!41 = !DILocation(line: 79, column: 13, scope: !6)
!42 = !DILocation(line: 70, column: 25, scope: !6)
!43 = !DILocation(line: 77, column: 25, scope: !6)
!44 = !DILocation(line: 87, column: 20, scope: !6)
!45 = !DILocation(line: 87, column: 34, scope: !6)
!46 = !DILocation(line: 87, column: 26, scope: !6)
!47 = !DILocation(line: 90, column: 24, scope: !6)
!48 = !DILocation(line: 90, column: 38, scope: !6)
!49 = !DILocation(line: 90, column: 21, scope: !6)
!50 = !DILocation(line: 90, column: 32, scope: !6)
!51 = !DILocation(line: 91, column: 25, scope: !6)
!52 = !DILocation(line: 91, column: 67, scope: !6)
!53 = !DILocation(line: 91, column: 4, scope: !6)
