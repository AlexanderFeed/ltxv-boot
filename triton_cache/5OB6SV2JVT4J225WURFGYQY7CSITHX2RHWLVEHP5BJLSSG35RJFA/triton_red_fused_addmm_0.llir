; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 2, !dbg !11
  %11 = and i32 %10, 63, !dbg !11
  %12 = and i32 %9, 3, !dbg !11
  %13 = or disjoint i32 %11, %8, !dbg !12
  %14 = icmp slt i32 %13, 9216, !dbg !13
  %15 = mul i32 %13, 3072, !dbg !14
  %16 = zext nneg i32 %12 to i64, !dbg !15
  br i1 %14, label %.split.us, label %.split

.split.us:                                        ; preds = %6, %.split.us
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %.split.us ], [ 0, %6 ]
  %17 = phi float [ %37, %.split.us ], [ 0.000000e+00, %6 ]
  %18 = or disjoint i64 %indvars.iv6, %16, !dbg !16
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %19, i1 true) #4, !dbg !18
  %21 = bitcast i16 %20 to bfloat, !dbg !18
  %22 = fpext bfloat %21 to float, !dbg !19
  %23 = trunc nuw nsw i64 %18 to i32, !dbg !20
  %24 = add i32 %15, %23, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !21
  %27 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %26, i1 true) #4, !dbg !22
  %28 = bitcast i16 %27 to bfloat, !dbg !22
  %29 = fpext bfloat %28 to float, !dbg !23
  %30 = fsub float 0.000000e+00, %22, !dbg !24
  %31 = fmul float %30, 0x3FF7154760000000, !dbg !28
  %32 = tail call float @llvm.nvvm.ex2.approx.f(float %31), !dbg !28
  %33 = fadd float %32, 1.000000e+00, !dbg !29
  %34 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %33), !dbg !30
  %35 = fmul float %34, %22, !dbg !31
  %36 = fmul float %35, %29, !dbg !32
  %37 = fadd float %17, %36, !dbg !33
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 4, !dbg !15
  %38 = icmp samesign ult i64 %indvars.iv6, 3068, !dbg !15
  br i1 %38, label %.split.us, label %.split3.us, !dbg !15

.split:                                           ; preds = %6, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %6 ]
  %39 = or disjoint i64 %indvars.iv, %16, !dbg !16
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %40, i1 true) #4, !dbg !18
  %42 = trunc nuw nsw i64 %39 to i32, !dbg !20
  %43 = add i32 %15, %42, !dbg !20
  %44 = sext i32 %43 to i64, !dbg !21
  %45 = getelementptr bfloat, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 false) #4, !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !15
  %47 = icmp samesign ult i64 %indvars.iv, 3068, !dbg !15
  br i1 %47, label %.split, label %.split3.us, !dbg !15

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %37, %.split.us ], [ 0.000000e+00, %.split ], !dbg !11
  %48 = and i32 %9, 63, !dbg !11
  %49 = or disjoint i32 %8, %48, !dbg !12
  %50 = icmp slt i32 %49, 9216, !dbg !13
  %51 = bitcast float %.us-phi to i32, !dbg !34
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 2, i32 31), !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = fadd float %.us-phi, %53, !dbg !36
  %55 = bitcast float %54 to i32, !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = fadd float %54, %57, !dbg !36
  %59 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !38
  %60 = bitcast float %58 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %61 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %48, !dbg !38
  %62 = load i32, ptr addrspace(3) %61, align 4, !dbg !38
  %63 = sext i32 %49 to i64, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !39
  %65 = and i32 %9, 192, !dbg !40
  %66 = icmp eq i32 %65, 0, !dbg !40
  %67 = and i1 %66, %50, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %62, ptr addrspace(1) %64, i1 %67) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 37, column: 46, scope: !6)
!15 = !DILocation(line: 30, column: 40, scope: !6)
!16 = !DILocation(line: 31, column: 31, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 94, scope: !6)
!20 = !DILocation(line: 37, column: 41, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 113, scope: !6)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 39, column: 26, scope: !6)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 44, column: 22, scope: !6)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !35)
!35 = !DILocation(line: 48, column: 27, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!38 = !DILocation(line: 48, column: 30, scope: !6)
!39 = !DILocation(line: 49, column: 25, scope: !6)
!40 = !DILocation(line: 49, column: 37, scope: !6)
!41 = !DILocation(line: 49, column: 4, scope: !6)
