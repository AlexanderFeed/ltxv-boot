; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = icmp slt i32 %11, 98688, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = and i32 %13, 63, !dbg !11
  %17 = sdiv i32 %11, 24, !dbg !12
  %18 = shl i32 %11, 7
  %19 = mul i32 %17, 6144
  %20 = add i32 %19, %18
  %21 = add i32 %20, 3072
  %22 = or disjoint i32 %21, %16, !dbg !13
  %23 = sext i32 %22 to i64, !dbg !14
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !14
  br i1 %12, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %10
  %25 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %24, i1 false) #5, !dbg !15
  %26 = or disjoint i32 %20, %16, !dbg !16
  %27 = sext i32 %26 to i64, !dbg !17
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 false) #5, !dbg !18
  %30 = or disjoint i32 %16, 64, !dbg !19
  %31 = or disjoint i32 %21, %30, !dbg !13
  %32 = sext i32 %31 to i64, !dbg !14
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !14
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 false) #5, !dbg !15
  %35 = or disjoint i32 %20, %30, !dbg !16
  %36 = sext i32 %35 to i64, !dbg !17
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 false) #5, !dbg !18
  br label %.split7.us, !dbg !20

.split.us.preheader:                              ; preds = %10
  %39 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %24, i1 true) #5, !dbg !15
  %40 = or disjoint i32 %20, %16, !dbg !16
  %41 = sext i32 %40 to i64, !dbg !17
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 true) #5, !dbg !18
  %44 = or disjoint i32 %16, 64, !dbg !19
  %45 = or disjoint i32 %21, %44, !dbg !13
  %46 = sext i32 %45 to i64, !dbg !14
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !14
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 true) #5, !dbg !15
  %49 = or disjoint i32 %20, %44, !dbg !16
  %50 = sext i32 %49 to i64, !dbg !17
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !17
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %51, i1 true) #5, !dbg !18
  %53 = insertelement <2 x i16> poison, i16 %39, i64 0, !dbg !15
  %54 = insertelement <2 x i16> %53, i16 %48, i64 1, !dbg !15
  %55 = bitcast <2 x i16> %54 to <2 x bfloat>, !dbg !15
  %56 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !24
  %57 = fmul <2 x float> %56, %56, !dbg !25
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %58 = fadd <2 x float> %57, %shift, !dbg !26
  %59 = extractelement <2 x float> %58, i64 0, !dbg !26
  %60 = insertelement <2 x i16> poison, i16 %43, i64 0, !dbg !18
  %61 = insertelement <2 x i16> %60, i16 %52, i64 1, !dbg !18
  %62 = bitcast <2 x i16> %61 to <2 x bfloat>, !dbg !18
  %63 = fpext <2 x bfloat> %62 to <2 x float>, !dbg !27
  %64 = fmul <2 x float> %63, %63, !dbg !28
  %shift11 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %65 = fadd <2 x float> %64, %shift11, !dbg !29
  %66 = extractelement <2 x float> %65, i64 0, !dbg !29
  br label %.split7.us, !dbg !20

.split7.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.us-phi = phi float [ %59, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !20
  %.us-phi8 = phi float [ %66, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !20
  %67 = bitcast float %.us-phi to i32, !dbg !20
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !20
  %69 = bitcast i32 %68 to float, !dbg !20
  %70 = fadd float %.us-phi, %69, !dbg !30
  %71 = bitcast float %70 to i32, !dbg !20
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !20
  %73 = bitcast i32 %72 to float, !dbg !20
  %74 = fadd float %70, %73, !dbg !30
  %75 = bitcast float %74 to i32, !dbg !20
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !20
  %77 = bitcast i32 %76 to float, !dbg !20
  %78 = fadd float %74, %77, !dbg !30
  %79 = bitcast float %78 to i32, !dbg !20
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !20
  %81 = bitcast i32 %80 to float, !dbg !20
  %82 = fadd float %78, %81, !dbg !30
  %83 = bitcast float %82 to i32, !dbg !20
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !20
  %85 = bitcast i32 %84 to float, !dbg !20
  %86 = fadd float %82, %85, !dbg !30
  %87 = and i32 %15, 1, !dbg !20
  %88 = icmp eq i32 %14, 0, !dbg !20
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !20
  %90 = bitcast float %86 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 %88) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %91 = icmp slt i32 %13, 2, !dbg !20
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !20
  %93 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %92, i1 %91) #5, !dbg !20
  %94 = bitcast i32 %93 to float, !dbg !20
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !20
  %96 = bitcast i32 %95 to float, !dbg !20
  %97 = fadd float %94, %96, !dbg !30
  %98 = and i32 %13, 1, !dbg !20
  %99 = icmp eq i32 %98, 0, !dbg !20
  %100 = and i1 %91, %99, !dbg !20
  %101 = bitcast float %97 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %101, i1 %100) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %103 = bitcast float %.us-phi8 to i32, !dbg !32
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 16, i32 31), !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = fadd float %.us-phi8, %105, !dbg !34
  %107 = bitcast float %106 to i32, !dbg !32
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = fadd float %106, %109, !dbg !34
  %111 = bitcast float %110 to i32, !dbg !32
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !32
  %113 = bitcast i32 %112 to float, !dbg !32
  %114 = fadd float %110, %113, !dbg !34
  %115 = bitcast float %114 to i32, !dbg !32
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = fadd float %114, %117, !dbg !34
  %119 = bitcast float %118 to i32, !dbg !32
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !32
  %121 = bitcast i32 %120 to float, !dbg !32
  %122 = fadd float %118, %121, !dbg !34
  %123 = bitcast float %122 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %123, i1 %88) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %124 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %92, i1 %91) #5, !dbg !32
  %125 = bitcast i32 %124 to float, !dbg !32
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !32
  %127 = bitcast i32 %126 to float, !dbg !32
  %128 = fadd float %125, %127, !dbg !34
  %129 = bitcast float %128 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %129, i1 %100) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %130 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %131 = tail call float @llvm.nvvm.div.full(float %130, float 1.280000e+02), !dbg !35
  %132 = fadd float %131, 0x3EB0C6F7A0000000, !dbg !36
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %133, 0, !dbg !37
  br i1 %.not.i, label %136, label %134, !dbg !37

134:                                              ; preds = %.split7.us
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

136:                                              ; preds = %.split7.us
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %134, %136
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], !dbg !37
  %138 = tail call float @llvm.nvvm.div.full(float %102, float 1.280000e+02), !dbg !38
  %139 = fadd float %138, 0x3EB0C6F7A0000000, !dbg !39
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i2 = icmp eq i32 %140, 0, !dbg !40
  br i1 %.not.i2, label %143, label %141, !dbg !40

141:                                              ; preds = %__nv_rsqrtf.exit
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !40
  br label %__nv_rsqrtf.exit4, !dbg !40

143:                                              ; preds = %__nv_rsqrtf.exit
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !40
  br label %__nv_rsqrtf.exit4, !dbg !40

__nv_rsqrtf.exit4:                                ; preds = %143, %141
  %.0.i3 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !40
  %145 = shl i32 %11, 7, !dbg !41
  %146 = sext i32 %145 to i64, !dbg !42
  %147 = shl i32 %17, 7, !dbg !43
  %148 = sext i32 %147 to i64, !dbg !42
  %149 = sext i32 %21 to i64, !dbg !42
  %150 = sext i32 %20 to i64, !dbg !42
  %151 = zext nneg i32 %16 to i64, !dbg !42
  %152 = icmp ne i32 %98, 0
  %153 = and i1 %12, %152
  %154 = and i1 %12, %99
  %155 = or disjoint i32 %20, %16, !dbg !44
  %156 = sext i32 %155 to i64, !dbg !45
  %157 = getelementptr bfloat, ptr addrspace(1) %0, i64 %156, !dbg !45
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %157, i1 %12) #5, !dbg !46
  %159 = bitcast i16 %158 to bfloat, !dbg !46
  %160 = fpext bfloat %159 to float, !dbg !47
  %161 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !48
  %162 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %161, i1 true) #5, !dbg !49
  %163 = bitcast i16 %162 to bfloat, !dbg !49
  %164 = fpext bfloat %163 to float, !dbg !50
  %165 = or disjoint i64 %151, %148, !dbg !51
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !52
  %167 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %166, i1 %12) #5, !dbg !53
  %168 = bitcast i32 %167 to float, !dbg !53
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %165, !dbg !54
  %170 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %169, i1 %12) #5, !dbg !55
  %171 = bitcast i32 %170 to float, !dbg !55
  %172 = or disjoint i32 %21, %16, !dbg !56
  %173 = sext i32 %172 to i64, !dbg !57
  %174 = getelementptr bfloat, ptr addrspace(1) %0, i64 %173, !dbg !57
  %175 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %174, i1 %12) #5, !dbg !58
  %176 = bitcast i16 %175 to bfloat, !dbg !58
  %177 = fpext bfloat %176 to float, !dbg !59
  %178 = getelementptr bfloat, ptr addrspace(1) %4, i64 %151, !dbg !60
  %179 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %178, i1 true) #5, !dbg !61
  %180 = bitcast i16 %179 to bfloat, !dbg !61
  %181 = fpext bfloat %180 to float, !dbg !62
  %182 = and i64 %151, 62, !dbg !63
  %183 = or i32 %16, 1, !dbg !64
  %184 = or disjoint i32 %20, %183, !dbg !65
  %185 = sext i32 %184 to i64, !dbg !66
  %186 = getelementptr bfloat, ptr addrspace(1) %0, i64 %185, !dbg !66
  %187 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %186, i1 %154) #5, !dbg !67
  %188 = bitcast i16 %187 to bfloat, !dbg !67
  %189 = fpext bfloat %188 to float, !dbg !68
  %190 = fmul float %.0.i, %189, !dbg !69
  %191 = zext nneg i32 %183 to i64, !dbg !70
  %192 = getelementptr bfloat, ptr addrspace(1) %1, i64 %191, !dbg !70
  %193 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %192, i1 %154) #5, !dbg !71
  %194 = bitcast i16 %193 to bfloat, !dbg !71
  %195 = fpext bfloat %194 to float, !dbg !72
  %196 = fmul float %190, %195, !dbg !73
  %197 = fsub float 0.000000e+00, %196, !dbg !74
  %198 = or disjoint i64 %182, %150, !dbg !75
  %199 = getelementptr bfloat, ptr addrspace(1) %0, i64 %198, !dbg !76
  %200 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %199, i1 %153) #5, !dbg !77
  %201 = bitcast i16 %200 to bfloat, !dbg !77
  %202 = fpext bfloat %201 to float, !dbg !78
  %203 = fmul float %.0.i, %202, !dbg !79
  %204 = getelementptr bfloat, ptr addrspace(1) %1, i64 %182, !dbg !80
  %205 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %204, i1 %153) #5, !dbg !81
  %206 = bitcast i16 %205 to bfloat, !dbg !81
  %207 = fpext bfloat %206 to float, !dbg !82
  %208 = fmul float %203, %207, !dbg !83
  %209 = select i1 %99, float %197, float %208, !dbg !84
  %210 = fmul float %.0.i, %160, !dbg !85
  %211 = fmul float %210, %164, !dbg !86
  %212 = fmul float %211, %168, !dbg !87
  %213 = fmul float %209, %171, !dbg !88
  %214 = fadd float %212, %213, !dbg !89
  %215 = or i32 %16, 3073, !dbg !90
  %216 = add i32 %20, %215, !dbg !91
  %217 = sext i32 %216 to i64, !dbg !92
  %218 = getelementptr bfloat, ptr addrspace(1) %0, i64 %217, !dbg !92
  %219 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %218, i1 %154) #5, !dbg !93
  %220 = bitcast i16 %219 to bfloat, !dbg !93
  %221 = fpext bfloat %220 to float, !dbg !94
  %222 = fmul float %.0.i3, %221, !dbg !95
  %223 = getelementptr bfloat, ptr addrspace(1) %4, i64 %191, !dbg !96
  %224 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %223, i1 %154) #5, !dbg !97
  %225 = bitcast i16 %224 to bfloat, !dbg !97
  %226 = fpext bfloat %225 to float, !dbg !98
  %227 = fmul float %222, %226, !dbg !99
  %228 = fsub float 0.000000e+00, %227, !dbg !100
  %229 = or disjoint i64 %182, %149, !dbg !101
  %230 = getelementptr bfloat, ptr addrspace(1) %0, i64 %229, !dbg !102
  %231 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %230, i1 %153) #5, !dbg !103
  %232 = bitcast i16 %231 to bfloat, !dbg !103
  %233 = fpext bfloat %232 to float, !dbg !104
  %234 = fmul float %.0.i3, %233, !dbg !105
  %235 = getelementptr bfloat, ptr addrspace(1) %4, i64 %182, !dbg !106
  %236 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %235, i1 %153) #5, !dbg !107
  %237 = bitcast i16 %236 to bfloat, !dbg !107
  %238 = fpext bfloat %237 to float, !dbg !108
  %239 = fmul float %234, %238, !dbg !109
  %240 = select i1 %99, float %228, float %239, !dbg !84
  %241 = fmul float %.0.i3, %177, !dbg !110
  %242 = fmul float %241, %181, !dbg !111
  %243 = fmul float %242, %168, !dbg !112
  %244 = fmul float %240, %171, !dbg !113
  %245 = fadd float %243, %244, !dbg !114
  %246 = or disjoint i64 %151, %146, !dbg !115
  %247 = getelementptr bfloat, ptr addrspace(1) %5, i64 %246, !dbg !116
  %248 = fptrunc float %214 to bfloat, !dbg !117
  %249 = bitcast bfloat %248 to i16, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %249, ptr addrspace(1) %247, i1 %12) #5, !dbg !117
  %250 = getelementptr bfloat, ptr addrspace(1) %6, i64 %246, !dbg !118
  %251 = fptrunc float %245 to bfloat, !dbg !119
  %252 = bitcast bfloat %251 to i16, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %252, ptr addrspace(1) %250, i1 %12) #5, !dbg !119
  %253 = or disjoint i64 %151, 64, !dbg !120
  %254 = trunc nuw nsw i64 %253 to i32, !dbg !44
  %255 = or disjoint i32 %20, %254, !dbg !44
  %256 = sext i32 %255 to i64, !dbg !45
  %257 = getelementptr bfloat, ptr addrspace(1) %0, i64 %256, !dbg !45
  %258 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %257, i1 %12) #5, !dbg !46
  %259 = bitcast i16 %258 to bfloat, !dbg !46
  %260 = fpext bfloat %259 to float, !dbg !47
  %261 = getelementptr bfloat, ptr addrspace(1) %1, i64 %253, !dbg !48
  %262 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %261, i1 true) #5, !dbg !49
  %263 = bitcast i16 %262 to bfloat, !dbg !49
  %264 = fpext bfloat %263 to float, !dbg !50
  %265 = or disjoint i64 %253, %148, !dbg !51
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !52
  %267 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %266, i1 %12) #5, !dbg !53
  %268 = bitcast i32 %267 to float, !dbg !53
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %265, !dbg !54
  %270 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %269, i1 %12) #5, !dbg !55
  %271 = bitcast i32 %270 to float, !dbg !55
  %272 = or disjoint i32 %21, %254, !dbg !56
  %273 = sext i32 %272 to i64, !dbg !57
  %274 = getelementptr bfloat, ptr addrspace(1) %0, i64 %273, !dbg !57
  %275 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %274, i1 %12) #5, !dbg !58
  %276 = bitcast i16 %275 to bfloat, !dbg !58
  %277 = fpext bfloat %276 to float, !dbg !59
  %278 = getelementptr bfloat, ptr addrspace(1) %4, i64 %253, !dbg !60
  %279 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %278, i1 true) #5, !dbg !61
  %280 = bitcast i16 %279 to bfloat, !dbg !61
  %281 = fpext bfloat %280 to float, !dbg !62
  %282 = and i64 %253, 126, !dbg !63
  %283 = or i32 %254, 1, !dbg !64
  %284 = or disjoint i32 %20, %283, !dbg !65
  %285 = sext i32 %284 to i64, !dbg !66
  %286 = getelementptr bfloat, ptr addrspace(1) %0, i64 %285, !dbg !66
  %287 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %286, i1 %154) #5, !dbg !67
  %288 = bitcast i16 %287 to bfloat, !dbg !67
  %289 = fpext bfloat %288 to float, !dbg !68
  %290 = fmul float %.0.i, %289, !dbg !69
  %291 = zext nneg i32 %283 to i64, !dbg !70
  %292 = getelementptr bfloat, ptr addrspace(1) %1, i64 %291, !dbg !70
  %293 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %292, i1 %154) #5, !dbg !71
  %294 = bitcast i16 %293 to bfloat, !dbg !71
  %295 = fpext bfloat %294 to float, !dbg !72
  %296 = fmul float %290, %295, !dbg !73
  %297 = fsub float 0.000000e+00, %296, !dbg !74
  %298 = or disjoint i64 %282, %150, !dbg !75
  %299 = getelementptr bfloat, ptr addrspace(1) %0, i64 %298, !dbg !76
  %300 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %299, i1 %153) #5, !dbg !77
  %301 = bitcast i16 %300 to bfloat, !dbg !77
  %302 = fpext bfloat %301 to float, !dbg !78
  %303 = fmul float %.0.i, %302, !dbg !79
  %304 = getelementptr bfloat, ptr addrspace(1) %1, i64 %282, !dbg !80
  %305 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %304, i1 %153) #5, !dbg !81
  %306 = bitcast i16 %305 to bfloat, !dbg !81
  %307 = fpext bfloat %306 to float, !dbg !82
  %308 = fmul float %303, %307, !dbg !83
  %309 = select i1 %99, float %297, float %308, !dbg !84
  %310 = fmul float %.0.i, %260, !dbg !85
  %311 = fmul float %310, %264, !dbg !86
  %312 = fmul float %311, %268, !dbg !87
  %313 = fmul float %309, %271, !dbg !88
  %314 = fadd float %312, %313, !dbg !89
  %315 = or i32 %254, 3073, !dbg !90
  %316 = add i32 %20, %315, !dbg !91
  %317 = sext i32 %316 to i64, !dbg !92
  %318 = getelementptr bfloat, ptr addrspace(1) %0, i64 %317, !dbg !92
  %319 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %318, i1 %154) #5, !dbg !93
  %320 = bitcast i16 %319 to bfloat, !dbg !93
  %321 = fpext bfloat %320 to float, !dbg !94
  %322 = fmul float %.0.i3, %321, !dbg !95
  %323 = getelementptr bfloat, ptr addrspace(1) %4, i64 %291, !dbg !96
  %324 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %323, i1 %154) #5, !dbg !97
  %325 = bitcast i16 %324 to bfloat, !dbg !97
  %326 = fpext bfloat %325 to float, !dbg !98
  %327 = fmul float %322, %326, !dbg !99
  %328 = fsub float 0.000000e+00, %327, !dbg !100
  %329 = or disjoint i64 %282, %149, !dbg !101
  %330 = getelementptr bfloat, ptr addrspace(1) %0, i64 %329, !dbg !102
  %331 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %330, i1 %153) #5, !dbg !103
  %332 = bitcast i16 %331 to bfloat, !dbg !103
  %333 = fpext bfloat %332 to float, !dbg !104
  %334 = fmul float %.0.i3, %333, !dbg !105
  %335 = getelementptr bfloat, ptr addrspace(1) %4, i64 %282, !dbg !106
  %336 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %335, i1 %153) #5, !dbg !107
  %337 = bitcast i16 %336 to bfloat, !dbg !107
  %338 = fpext bfloat %337 to float, !dbg !108
  %339 = fmul float %334, %338, !dbg !109
  %340 = select i1 %99, float %328, float %339, !dbg !84
  %341 = fmul float %.0.i3, %277, !dbg !110
  %342 = fmul float %341, %281, !dbg !111
  %343 = fmul float %342, %268, !dbg !112
  %344 = fmul float %340, %271, !dbg !113
  %345 = fadd float %343, %344, !dbg !114
  %346 = or disjoint i64 %253, %146, !dbg !115
  %347 = getelementptr bfloat, ptr addrspace(1) %5, i64 %346, !dbg !116
  %348 = fptrunc float %314 to bfloat, !dbg !117
  %349 = bitcast bfloat %348 to i16, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %349, ptr addrspace(1) %347, i1 %12) #5, !dbg !117
  %350 = getelementptr bfloat, ptr addrspace(1) %6, i64 %346, !dbg !118
  %351 = fptrunc float %345 to bfloat, !dbg !119
  %352 = bitcast bfloat %351 to i16, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %352, ptr addrspace(1) %350, i1 %12) #5, !dbg !119
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4vjqhad7sc635wan56m2hfgerxquvjcsylutimuij7rrwxhwfl.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", linkageName: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 19, scope: !6)
!13 = !DILocation(line: 39, column: 57, scope: !6)
!14 = !DILocation(line: 39, column: 34, scope: !6)
!15 = !DILocation(line: 39, column: 67, scope: !6)
!16 = !DILocation(line: 40, column: 50, scope: !6)
!17 = !DILocation(line: 40, column: 34, scope: !6)
!18 = !DILocation(line: 40, column: 60, scope: !6)
!19 = !DILocation(line: 34, column: 31, scope: !6)
!20 = !DILocation(line: 286, column: 36, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!23 = !DILocation(line: 51, column: 25, scope: !6)
!24 = !DILocation(line: 39, column: 128, scope: !6)
!25 = !DILocation(line: 42, column: 22, scope: !6)
!26 = !DILocation(line: 44, column: 23, scope: !6)
!27 = !DILocation(line: 40, column: 121, scope: !6)
!28 = !DILocation(line: 47, column: 22, scope: !6)
!29 = !DILocation(line: 49, column: 25, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !23)
!31 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!32 = !DILocation(line: 286, column: 36, scope: !21, inlinedAt: !33)
!33 = !DILocation(line: 52, column: 27, scope: !6)
!34 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 73, column: 25, scope: !6)
!36 = !DILocation(line: 75, column: 24, scope: !6)
!37 = !DILocation(line: 76, column: 32, scope: !6)
!38 = !DILocation(line: 118, column: 24, scope: !6)
!39 = !DILocation(line: 119, column: 24, scope: !6)
!40 = !DILocation(line: 120, column: 32, scope: !6)
!41 = !DILocation(line: 153, column: 40, scope: !6)
!42 = !DILocation(line: 53, column: 40, scope: !6)
!43 = !DILocation(line: 61, column: 46, scope: !6)
!44 = !DILocation(line: 59, column: 51, scope: !6)
!45 = !DILocation(line: 59, column: 35, scope: !6)
!46 = !DILocation(line: 59, column: 61, scope: !6)
!47 = !DILocation(line: 59, column: 122, scope: !6)
!48 = !DILocation(line: 60, column: 35, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 60, column: 95, scope: !6)
!51 = !DILocation(line: 61, column: 42, scope: !6)
!52 = !DILocation(line: 61, column: 35, scope: !6)
!53 = !DILocation(line: 61, column: 51, scope: !6)
!54 = !DILocation(line: 62, column: 35, scope: !6)
!55 = !DILocation(line: 62, column: 51, scope: !6)
!56 = !DILocation(line: 63, column: 58, scope: !6)
!57 = !DILocation(line: 63, column: 35, scope: !6)
!58 = !DILocation(line: 63, column: 68, scope: !6)
!59 = !DILocation(line: 63, column: 130, scope: !6)
!60 = !DILocation(line: 64, column: 35, scope: !6)
!61 = !DILocation(line: 64, column: 42, scope: !6)
!62 = !DILocation(line: 64, column: 95, scope: !6)
!63 = !DILocation(line: 70, column: 42, scope: !6)
!64 = !DILocation(line: 70, column: 39, scope: !6)
!65 = !DILocation(line: 70, column: 64, scope: !6)
!66 = !DILocation(line: 70, column: 35, scope: !6)
!67 = !DILocation(line: 70, column: 74, scope: !6)
!68 = !DILocation(line: 70, column: 143, scope: !6)
!69 = !DILocation(line: 77, column: 24, scope: !6)
!70 = !DILocation(line: 79, column: 35, scope: !6)
!71 = !DILocation(line: 79, column: 92, scope: !6)
!72 = !DILocation(line: 79, column: 161, scope: !6)
!73 = !DILocation(line: 80, column: 24, scope: !6)
!74 = !DILocation(line: 81, column: 17, scope: !6)
!75 = !DILocation(line: 87, column: 60, scope: !6)
!76 = !DILocation(line: 87, column: 35, scope: !6)
!77 = !DILocation(line: 87, column: 70, scope: !6)
!78 = !DILocation(line: 87, column: 139, scope: !6)
!79 = !DILocation(line: 94, column: 24, scope: !6)
!80 = !DILocation(line: 96, column: 35, scope: !6)
!81 = !DILocation(line: 96, column: 88, scope: !6)
!82 = !DILocation(line: 96, column: 157, scope: !6)
!83 = !DILocation(line: 97, column: 24, scope: !6)
!84 = !DILocation(line: 0, scope: !6)
!85 = !DILocation(line: 108, column: 24, scope: !6)
!86 = !DILocation(line: 110, column: 24, scope: !6)
!87 = !DILocation(line: 112, column: 24, scope: !6)
!88 = !DILocation(line: 113, column: 24, scope: !6)
!89 = !DILocation(line: 114, column: 24, scope: !6)
!90 = !DILocation(line: 116, column: 42, scope: !6)
!91 = !DILocation(line: 116, column: 67, scope: !6)
!92 = !DILocation(line: 116, column: 35, scope: !6)
!93 = !DILocation(line: 116, column: 77, scope: !6)
!94 = !DILocation(line: 116, column: 146, scope: !6)
!95 = !DILocation(line: 121, column: 24, scope: !6)
!96 = !DILocation(line: 123, column: 35, scope: !6)
!97 = !DILocation(line: 123, column: 92, scope: !6)
!98 = !DILocation(line: 123, column: 161, scope: !6)
!99 = !DILocation(line: 124, column: 24, scope: !6)
!100 = !DILocation(line: 125, column: 17, scope: !6)
!101 = !DILocation(line: 128, column: 67, scope: !6)
!102 = !DILocation(line: 128, column: 35, scope: !6)
!103 = !DILocation(line: 128, column: 77, scope: !6)
!104 = !DILocation(line: 128, column: 146, scope: !6)
!105 = !DILocation(line: 133, column: 24, scope: !6)
!106 = !DILocation(line: 135, column: 35, scope: !6)
!107 = !DILocation(line: 135, column: 88, scope: !6)
!108 = !DILocation(line: 135, column: 157, scope: !6)
!109 = !DILocation(line: 136, column: 24, scope: !6)
!110 = !DILocation(line: 145, column: 24, scope: !6)
!111 = !DILocation(line: 147, column: 25, scope: !6)
!112 = !DILocation(line: 149, column: 26, scope: !6)
!113 = !DILocation(line: 150, column: 25, scope: !6)
!114 = !DILocation(line: 151, column: 26, scope: !6)
!115 = !DILocation(line: 153, column: 36, scope: !6)
!116 = !DILocation(line: 153, column: 29, scope: !6)
!117 = !DILocation(line: 153, column: 52, scope: !6)
!118 = !DILocation(line: 154, column: 29, scope: !6)
!119 = !DILocation(line: 154, column: 53, scope: !6)
!120 = !DILocation(line: 54, column: 31, scope: !6)
!121 = !DILocation(line: 53, column: 4, scope: !6)
