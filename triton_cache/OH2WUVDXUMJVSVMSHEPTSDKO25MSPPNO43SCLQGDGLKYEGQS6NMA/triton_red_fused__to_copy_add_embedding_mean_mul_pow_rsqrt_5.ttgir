#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0)
#loc1 = loc(unknown)
#loc39 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":50:27)
#loc68 = loc(callsite(#loc1 at #loc39))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.096000e+03> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x4xbf16, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x4xbf16, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<true> : tensor<64x1xi1, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<4096> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<32128> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<64x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<64x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<64x1x!tt.ptr<i64>, #blocked> loc(#loc8)
    %10 = tt.addptr %9, %5 : tensor<64x1x!tt.ptr<i64>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc8)
    %11 = tt.load %10, %6 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<i64>, #blocked> loc(#loc9)
    %12 = arith.muli %5, %cst_6 : tensor<64x1xi32, #blocked> loc(#loc10)
    %13 = tt.broadcast %12 : tensor<64x1xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc12)
    %15 = tt.broadcast %6 : tensor<64x1xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc13)
    %16 = arith.addi %11, %cst_9 : tensor<64x1xi64, #blocked> loc(#loc14)
    %17 = arith.cmpi slt, %11, %cst_10 : tensor<64x1xi64, #blocked> loc(#loc15)
    %18 = arith.select %17, %16, %11 : tensor<64x1xi1, #blocked>, tensor<64x1xi64, #blocked> loc(#loc16)
    %19 = arith.cmpi sge, %18, %cst_10 : tensor<64x1xi64, #blocked> loc(#loc17)
    %20 = arith.cmpi slt, %18, %cst_9 : tensor<64x1xi64, #blocked> loc(#loc18)
    %21 = arith.andi %19, %20 : tensor<64x1xi1, #blocked> loc(#loc19)
    %22 = arith.xori %6, %cst_7 : tensor<64x1xi1, #blocked> loc(#loc20)
    %23 = arith.ori %21, %22 : tensor<64x1xi1, #blocked> loc(#loc21)
    %24 = tt.broadcast %23 : tensor<64x1xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc21)
    %25 = arith.muli %18, %cst_8 : tensor<64x1xi64, #blocked> loc(#loc22)
    %26 = tt.broadcast %25 : tensor<64x1xi64, #blocked> -> tensor<64x4xi64, #blocked> loc(#loc22)
    %27 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc23)
    %28 = scf.for %arg7 = %c0_i32 to %c4096_i32 step %c4_i32 iter_args(%arg8 = %cst_4) -> (tensor<64x4xf32, #blocked>)  : i32 {
      %37 = tt.splat %arg7 : i32 -> tensor<1x4xi32, #blocked> loc(#loc25)
      %38 = arith.addi %37, %8 : tensor<1x4xi32, #blocked> loc(#loc25)
      %39 = arith.cmpi slt, %38, %cst_3 : tensor<1x4xi32, #blocked> loc(#loc26)
      %40 = tt.broadcast %38 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc11)
      %41 = arith.addi %40, %13 : tensor<64x4xi32, #blocked> loc(#loc11)
      %42 = tt.addptr %14, %41 : tensor<64x4x!tt.ptr<bf16>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc12)
      %43 = tt.broadcast %39 : tensor<1x4xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc13)
      %44 = arith.andi %15, %43 : tensor<64x4xi1, #blocked> loc(#loc13)
      %45 = tt.load %42, %44, %cst_1 evictionPolicy = evict_last : tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %46 = arith.extf %45 : tensor<64x4xbf16, #blocked> to tensor<64x4xf32, #blocked> loc(#loc28)
      tt.assert %24, "index out of bounds: 0 <= tmp4 < 32128" : tensor<64x4xi1, #blocked> loc(#loc29)
      %47 = arith.extsi %38 : tensor<1x4xi32, #blocked> to tensor<1x4xi64, #blocked> loc(#loc30)
      %48 = tt.broadcast %47 : tensor<1x4xi64, #blocked> -> tensor<64x4xi64, #blocked> loc(#loc30)
      %49 = arith.addi %48, %26 : tensor<64x4xi64, #blocked> loc(#loc30)
      %50 = tt.addptr %27, %49 : tensor<64x4x!tt.ptr<bf16>, #blocked>, tensor<64x4xi64, #blocked> loc(#loc23)
      %51 = tt.load %50, %44, %cst_1 evictionPolicy = evict_last : tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc31)
      %52 = arith.extf %51 : tensor<64x4xbf16, #blocked> to tensor<64x4xf32, #blocked> loc(#loc32)
      %53 = arith.addf %52, %46 : tensor<64x4xf32, #blocked> loc(#loc33)
      %54 = arith.mulf %53, %53 : tensor<64x4xf32, #blocked> loc(#loc34)
      %55 = arith.addf %arg8, %54 : tensor<64x4xf32, #blocked> loc(#loc35)
      %56 = arith.select %44, %55, %arg8 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc36)
      scf.yield %56 : tensor<64x4xf32, #blocked> loc(#loc37)
    } loc(#loc24)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc39)), %arg8: f32 loc(callsite(#loc1 at #loc39))):
      %37 = arith.addf %arg7, %arg8 : f32 loc(#loc70)
      tt.reduce.return %37 : f32 loc(#loc67)
    }) : (tensor<64x4xf32, #blocked>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc67)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc41)
    %31 = tt.splat %arg3 : !tt.ptr<bf16> -> tensor<1x4x!tt.ptr<bf16>, #blocked> loc(#loc42)
    %32 = arith.divf %30, %cst : tensor<64x1xf32, #blocked> loc(#loc43)
    %33 = arith.addf %32, %cst_0 : tensor<64x1xf32, #blocked> loc(#loc44)
    %34 = tt.extern_elementwise %33 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked>) -> tensor<64x1xf32, #blocked> loc(#loc45)
    %35 = tt.broadcast %34 : tensor<64x1xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc46)
    %36 = tt.splat %arg4 : !tt.ptr<bf16> -> tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc47)
    scf.for %arg7 = %c0_i32 to %c4096_i32 step %c4_i32  : i32 {
      %37 = tt.splat %arg7 : i32 -> tensor<1x4xi32, #blocked> loc(#loc49)
      %38 = arith.addi %37, %8 : tensor<1x4xi32, #blocked> loc(#loc49)
      %39 = arith.cmpi slt, %38, %cst_3 : tensor<1x4xi32, #blocked> loc(#loc50)
      %40 = tt.addptr %31, %38 : tensor<1x4x!tt.ptr<bf16>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc42)
      %41 = tt.load %40, %39, %cst_2 evictionPolicy = evict_last : tensor<1x4x!tt.ptr<bf16>, #blocked> loc(#loc51)
      %42 = arith.extf %41 : tensor<1x4xbf16, #blocked> to tensor<1x4xf32, #blocked> loc(#loc52)
      %43 = tt.broadcast %38 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc53)
      %44 = arith.addi %43, %13 : tensor<64x4xi32, #blocked> loc(#loc53)
      %45 = tt.addptr %14, %44 : tensor<64x4x!tt.ptr<bf16>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc54)
      %46 = tt.broadcast %39 : tensor<1x4xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc55)
      %47 = arith.andi %15, %46 : tensor<64x4xi1, #blocked> loc(#loc55)
      %48 = tt.load %45, %47, %cst_1 evictionPolicy = evict_first : tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc56)
      %49 = arith.extf %48 : tensor<64x4xbf16, #blocked> to tensor<64x4xf32, #blocked> loc(#loc57)
      tt.assert %24, "index out of bounds: 0 <= tmp18 < 32128" : tensor<64x4xi1, #blocked> loc(#loc58)
      %50 = arith.extsi %38 : tensor<1x4xi32, #blocked> to tensor<1x4xi64, #blocked> loc(#loc59)
      %51 = tt.broadcast %50 : tensor<1x4xi64, #blocked> -> tensor<64x4xi64, #blocked> loc(#loc59)
      %52 = arith.addi %51, %26 : tensor<64x4xi64, #blocked> loc(#loc59)
      %53 = tt.addptr %27, %52 : tensor<64x4x!tt.ptr<bf16>, #blocked>, tensor<64x4xi64, #blocked> loc(#loc60)
      %54 = tt.load %53, %47, %cst_1 evictionPolicy = evict_first : tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc61)
      %55 = arith.extf %54 : tensor<64x4xbf16, #blocked> to tensor<64x4xf32, #blocked> loc(#loc62)
      %56 = arith.addf %55, %49 : tensor<64x4xf32, #blocked> loc(#loc63)
      %57 = arith.mulf %56, %35 : tensor<64x4xf32, #blocked> loc(#loc46)
      %58 = tt.broadcast %42 : tensor<1x4xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc64)
      %59 = arith.mulf %58, %57 : tensor<64x4xf32, #blocked> loc(#loc64)
      %60 = tt.addptr %36, %44 : tensor<64x4x!tt.ptr<bf16>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc47)
      %61 = arith.truncf %59 : tensor<64x4xf32, #blocked> to tensor<64x4xbf16, #blocked> loc(#loc65)
      tt.store %60, %61, %47 : tensor<64x4x!tt.ptr<bf16>, #blocked> loc(#loc65)
    } loc(#loc48)
    tt.return loc(#loc66)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":23:28)
#loc3 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":23:33)
#loc4 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":24:44)
#loc5 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":24:23)
#loc6 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":25:21)
#loc7 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":26:37)
#loc8 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":29:30)
#loc9 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":29:35)
#loc10 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":37:46)
#loc11 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":37:41)
#loc12 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":37:34)
#loc13 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":37:59)
#loc14 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":39:22)
#loc15 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":40:22)
#loc16 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":41:36)
#loc17 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":42:32)
#loc18 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":42:48)
#loc19 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":42:41)
#loc20 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":42:60)
#loc21 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":42:58)
#loc22 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":43:46)
#loc23 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":43:34)
#loc24 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":31:40)
#loc25 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":32:31)
#loc26 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":33:29)
#loc27 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":37:51)
#loc28 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":37:112)
#loc29 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":42:68)
#loc30 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":43:41)
#loc31 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":43:53)
#loc32 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":43:114)
#loc33 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":44:22)
#loc34 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":46:23)
#loc35 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":48:25)
#loc36 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":49:50)
#loc37 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":49:8)
#loc38 = loc("/usr/local/lib/python3.10/dist-packages/triton/language/standard.py":286:36)
#loc40 = loc("/usr/local/lib/python3.10/dist-packages/triton/language/standard.py":256:15)
#loc41 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":50:30)
#loc42 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":57:35)
#loc43 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":68:25)
#loc44 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":70:24)
#loc45 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":71:32)
#loc46 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":72:24)
#loc47 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":75:29)
#loc48 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":51:40)
#loc49 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":52:31)
#loc50 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":53:29)
#loc51 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":57:42)
#loc52 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":57:95)
#loc53 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":58:42)
#loc54 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":58:35)
#loc55 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":58:60)
#loc56 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":58:52)
#loc57 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":58:114)
#loc58 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":63:70)
#loc59 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":64:42)
#loc60 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":64:35)
#loc61 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":64:55)
#loc62 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":64:117)
#loc63 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":65:24)
#loc64 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":74:24)
#loc65 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":75:53)
#loc66 = loc("/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py":51:4)
#loc67 = loc(callsite(#loc38 at #loc39))
#loc69 = loc(callsite(#loc40 at #loc38))
#loc70 = loc(callsite(#loc69 at #loc39))
