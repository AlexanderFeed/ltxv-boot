; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %8 = lshr i32 %7, 6, !dbg !9
  %9 = and i32 %8, 7, !dbg !9
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = icmp slt i32 %12, 9216, !dbg !13
  %14 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !14
  %15 = shufflevector <8 x i1> %14, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !14
  %16 = and i32 %7, 511, !dbg !15
  %17 = zext nneg i32 %16 to i64, !dbg !16
  %18 = shl i32 %7, 3, !dbg !15
  %19 = and i32 %18, 504, !dbg !15
  %20 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %22 = mul i32 %12, 3072, !dbg !17
  %23 = or disjoint i32 %22, %19
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !18
  %25 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %24, i1 true) #4, !dbg !19
  %26 = bitcast i16 %25 to bfloat, !dbg !19
  %27 = fpext bfloat %26 to float, !dbg !20
  %28 = sext i32 %23 to i64, !dbg !21
  %29 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %13) #4, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !22
  %39 = fsub float 0.000000e+00, %27, !dbg !23
  %40 = fmul float %39, 0x3FF7154760000000, !dbg !27
  %41 = tail call float @llvm.nvvm.ex2.approx.f(float %40), !dbg !27
  %42 = fadd float %41, 1.000000e+00, !dbg !28
  %43 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %42), !dbg !29
  %44 = fmul float %43, %27, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %45 = bitcast float %44 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %45, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %46 = shufflevector <2 x bfloat> %32, <2 x bfloat> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %47 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %48 = shufflevector <8 x bfloat> %46, <8 x bfloat> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %49 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %50 = shufflevector <8 x bfloat> %48, <8 x bfloat> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %51 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %52 = shufflevector <8 x bfloat> %50, <8 x bfloat> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %53 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %54 = shufflevector <8 x bfloat> %52, <8 x bfloat> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %55 = fpext <8 x bfloat> %54 to <8 x float>, !dbg !32
  %56 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %57 = fmul <8 x float> %56, %55, !dbg !31
  %58 = fadd <8 x float> %57, zeroinitializer, !dbg !33
  %59 = or disjoint i64 %17, 512, !dbg !34
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %60, i1 true) #4, !dbg !19
  %62 = bitcast i16 %61 to bfloat, !dbg !19
  %63 = fpext bfloat %62 to float, !dbg !20
  %64 = or disjoint i32 %23, 512, !dbg !35
  %65 = sext i32 %64 to i64, !dbg !21
  %66 = getelementptr bfloat, ptr addrspace(1) %1, i64 %65, !dbg !21
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %13) #4, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !22
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !22
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !22
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !22
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !22
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !22
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !22
  %76 = fsub float 0.000000e+00, %63, !dbg !23
  %77 = fmul float %76, 0x3FF7154760000000, !dbg !27
  %78 = tail call float @llvm.nvvm.ex2.approx.f(float %77), !dbg !27
  %79 = fadd float %78, 1.000000e+00, !dbg !28
  %80 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %79), !dbg !29
  %81 = fmul float %80, %63, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %82 = bitcast float %81 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %82, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %83 = shufflevector <2 x bfloat> %69, <2 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %84 = shufflevector <2 x bfloat> %73, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %85 = shufflevector <8 x bfloat> %83, <8 x bfloat> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %86 = shufflevector <2 x bfloat> %73, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %87 = shufflevector <8 x bfloat> %85, <8 x bfloat> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %88 = shufflevector <2 x bfloat> %75, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %89 = shufflevector <8 x bfloat> %87, <8 x bfloat> %88, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %90 = shufflevector <2 x bfloat> %75, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %91 = shufflevector <8 x bfloat> %89, <8 x bfloat> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %92 = fpext <8 x bfloat> %91 to <8 x float>, !dbg !32
  %93 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %94 = fmul <8 x float> %93, %92, !dbg !31
  %95 = fadd <8 x float> %58, %94, !dbg !33
  %96 = or disjoint i64 %17, 1024, !dbg !34
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 true) #4, !dbg !19
  %99 = bitcast i16 %98 to bfloat, !dbg !19
  %100 = fpext bfloat %99 to float, !dbg !20
  %101 = add i32 %23, 1024, !dbg !35
  %102 = sext i32 %101 to i64, !dbg !21
  %103 = getelementptr bfloat, ptr addrspace(1) %1, i64 %102, !dbg !21
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %103, i1 %13) #4, !dbg !22
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !22
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !22
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !22
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !22
  %111 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !22
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !22
  %113 = fsub float 0.000000e+00, %100, !dbg !23
  %114 = fmul float %113, 0x3FF7154760000000, !dbg !27
  %115 = tail call float @llvm.nvvm.ex2.approx.f(float %114), !dbg !27
  %116 = fadd float %115, 1.000000e+00, !dbg !28
  %117 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %116), !dbg !29
  %118 = fmul float %117, %100, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %119 = bitcast float %118 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %119, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %120 = shufflevector <2 x bfloat> %106, <2 x bfloat> %108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %121 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %122 = shufflevector <8 x bfloat> %120, <8 x bfloat> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %123 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %124 = shufflevector <8 x bfloat> %122, <8 x bfloat> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %125 = shufflevector <2 x bfloat> %112, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %126 = shufflevector <8 x bfloat> %124, <8 x bfloat> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %127 = shufflevector <2 x bfloat> %112, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %128 = shufflevector <8 x bfloat> %126, <8 x bfloat> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %129 = fpext <8 x bfloat> %128 to <8 x float>, !dbg !32
  %130 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %131 = fmul <8 x float> %130, %129, !dbg !31
  %132 = fadd <8 x float> %95, %131, !dbg !33
  %133 = or disjoint i64 %17, 1536, !dbg !34
  %134 = getelementptr bfloat, ptr addrspace(1) %0, i64 %133, !dbg !18
  %135 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %134, i1 true) #4, !dbg !19
  %136 = bitcast i16 %135 to bfloat, !dbg !19
  %137 = fpext bfloat %136 to float, !dbg !20
  %138 = add i32 %23, 1536, !dbg !35
  %139 = sext i32 %138 to i64, !dbg !21
  %140 = getelementptr bfloat, ptr addrspace(1) %1, i64 %139, !dbg !21
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %140, i1 %13) #4, !dbg !22
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !22
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !22
  %144 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !22
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !22
  %146 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !22
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !22
  %148 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !22
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !22
  %150 = fsub float 0.000000e+00, %137, !dbg !23
  %151 = fmul float %150, 0x3FF7154760000000, !dbg !27
  %152 = tail call float @llvm.nvvm.ex2.approx.f(float %151), !dbg !27
  %153 = fadd float %152, 1.000000e+00, !dbg !28
  %154 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %153), !dbg !29
  %155 = fmul float %154, %137, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %156 = bitcast float %155 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %156, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %157 = shufflevector <2 x bfloat> %143, <2 x bfloat> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %158 = shufflevector <2 x bfloat> %147, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %159 = shufflevector <8 x bfloat> %157, <8 x bfloat> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %160 = shufflevector <2 x bfloat> %147, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %161 = shufflevector <8 x bfloat> %159, <8 x bfloat> %160, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %162 = shufflevector <2 x bfloat> %149, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %163 = shufflevector <8 x bfloat> %161, <8 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %164 = shufflevector <2 x bfloat> %149, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %165 = shufflevector <8 x bfloat> %163, <8 x bfloat> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %166 = fpext <8 x bfloat> %165 to <8 x float>, !dbg !32
  %167 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %168 = fmul <8 x float> %167, %166, !dbg !31
  %169 = fadd <8 x float> %132, %168, !dbg !33
  %170 = or disjoint i64 %17, 2048, !dbg !34
  %171 = getelementptr bfloat, ptr addrspace(1) %0, i64 %170, !dbg !18
  %172 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %171, i1 true) #4, !dbg !19
  %173 = bitcast i16 %172 to bfloat, !dbg !19
  %174 = fpext bfloat %173 to float, !dbg !20
  %175 = add i32 %23, 2048, !dbg !35
  %176 = sext i32 %175 to i64, !dbg !21
  %177 = getelementptr bfloat, ptr addrspace(1) %1, i64 %176, !dbg !21
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %177, i1 %13) #4, !dbg !22
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !22
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !22
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !22
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !22
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !22
  %187 = fsub float 0.000000e+00, %174, !dbg !23
  %188 = fmul float %187, 0x3FF7154760000000, !dbg !27
  %189 = tail call float @llvm.nvvm.ex2.approx.f(float %188), !dbg !27
  %190 = fadd float %189, 1.000000e+00, !dbg !28
  %191 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %190), !dbg !29
  %192 = fmul float %191, %174, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %193 = bitcast float %192 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %193, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %194 = shufflevector <2 x bfloat> %180, <2 x bfloat> %182, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %195 = shufflevector <2 x bfloat> %184, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %196 = shufflevector <8 x bfloat> %194, <8 x bfloat> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %197 = shufflevector <2 x bfloat> %184, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %198 = shufflevector <8 x bfloat> %196, <8 x bfloat> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %199 = shufflevector <2 x bfloat> %186, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %200 = shufflevector <8 x bfloat> %198, <8 x bfloat> %199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %201 = shufflevector <2 x bfloat> %186, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %202 = shufflevector <8 x bfloat> %200, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %203 = fpext <8 x bfloat> %202 to <8 x float>, !dbg !32
  %204 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %205 = fmul <8 x float> %204, %203, !dbg !31
  %206 = fadd <8 x float> %169, %205, !dbg !33
  %207 = or disjoint i64 %17, 2560, !dbg !34
  %208 = getelementptr bfloat, ptr addrspace(1) %0, i64 %207, !dbg !18
  %209 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %208, i1 true) #4, !dbg !19
  %210 = bitcast i16 %209 to bfloat, !dbg !19
  %211 = fpext bfloat %210 to float, !dbg !20
  %212 = add i32 %23, 2560, !dbg !35
  %213 = sext i32 %212 to i64, !dbg !21
  %214 = getelementptr bfloat, ptr addrspace(1) %1, i64 %213, !dbg !21
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %214, i1 %13) #4, !dbg !22
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !22
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !22
  %218 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !22
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !22
  %220 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !22
  %221 = bitcast i32 %220 to <2 x bfloat>, !dbg !22
  %222 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !22
  %223 = bitcast i32 %222 to <2 x bfloat>, !dbg !22
  %224 = fsub float 0.000000e+00, %211, !dbg !23
  %225 = fmul float %224, 0x3FF7154760000000, !dbg !27
  %226 = tail call float @llvm.nvvm.ex2.approx.f(float %225), !dbg !27
  %227 = fadd float %226, 1.000000e+00, !dbg !28
  %228 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %227), !dbg !29
  %229 = fmul float %228, %211, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %230 = bitcast float %229 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %230, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %231 = shufflevector <2 x bfloat> %217, <2 x bfloat> %219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %232 = shufflevector <2 x bfloat> %221, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %233 = shufflevector <8 x bfloat> %231, <8 x bfloat> %232, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %234 = shufflevector <2 x bfloat> %221, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %235 = shufflevector <8 x bfloat> %233, <8 x bfloat> %234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %236 = shufflevector <2 x bfloat> %223, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %237 = shufflevector <8 x bfloat> %235, <8 x bfloat> %236, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %238 = shufflevector <2 x bfloat> %223, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %239 = shufflevector <8 x bfloat> %237, <8 x bfloat> %238, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %240 = fpext <8 x bfloat> %239 to <8 x float>, !dbg !32
  %241 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %242 = fmul <8 x float> %241, %240, !dbg !31
  %243 = fadd <8 x float> %206, %242, !dbg !33
  %244 = select <8 x i1> %15, <8 x float> %243, <8 x float> zeroinitializer, !dbg !14
  %245 = and i32 %7, 7, !dbg !9
  %246 = lshr i32 %7, 5, !dbg !9
  %247 = and i32 %7, 31, !dbg !9
  %248 = or disjoint i32 %11, %245, !dbg !12
  %249 = icmp slt i32 %248, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %shift = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %250 = fadd <8 x float> %244, %shift, !dbg !38
  %shift31 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %251 = fadd <8 x float> %shift31, %250, !dbg !38
  %shift32 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %252 = fadd <8 x float> %shift32, %251, !dbg !38
  %shift33 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %253 = fadd <8 x float> %shift33, %252, !dbg !38
  %shift34 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %254 = fadd <8 x float> %shift34, %253, !dbg !38
  %shift35 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %255 = fadd <8 x float> %shift35, %254, !dbg !38
  %shift36 = shufflevector <8 x float> %244, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %256 = fadd <8 x float> %shift36, %255, !dbg !38
  %257 = extractelement <8 x float> %256, i64 0, !dbg !38
  %258 = bitcast float %257 to i32, !dbg !36
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 16, i32 31), !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = fadd float %257, %260, !dbg !38
  %262 = bitcast float %261 to i32, !dbg !36
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !36
  %264 = bitcast i32 %263 to float, !dbg !36
  %265 = fadd float %261, %264, !dbg !38
  %266 = bitcast float %265 to i32, !dbg !36
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !36
  %268 = bitcast i32 %267 to float, !dbg !36
  %269 = fadd float %265, %268, !dbg !38
  %270 = bitcast float %269 to i32, !dbg !36
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 2, i32 31), !dbg !36
  %272 = bitcast i32 %271 to float, !dbg !36
  %273 = fadd float %269, %272, !dbg !38
  %274 = bitcast float %273 to i32, !dbg !36
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 1, i32 31), !dbg !36
  %276 = bitcast i32 %275 to float, !dbg !36
  %277 = fadd float %273, %276, !dbg !38
  %278 = and i32 %246, 1, !dbg !36
  %279 = icmp eq i32 %247, 0, !dbg !36
  %280 = shl nuw nsw i32 %9, 1, !dbg !36
  %281 = or disjoint i32 %280, %278, !dbg !36
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !36
  %283 = bitcast float %277 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 %279) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %284 = icmp slt i32 %7, 16, !dbg !36
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !36
  %286 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %285, i1 %284) #4, !dbg !36
  %287 = bitcast i32 %286 to float, !dbg !36
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !36
  %289 = bitcast i32 %288 to float, !dbg !36
  %290 = fadd float %287, %289, !dbg !38
  %291 = and i32 %7, 1, !dbg !36
  %292 = icmp eq i32 %291, 0, !dbg !36
  %293 = and i1 %284, %292, !dbg !36
  %294 = bitcast float %290 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %294, i1 %293) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !36
  %296 = load i32, ptr addrspace(3) %295, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %297 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %9, !dbg !40
  %298 = insertelement <1 x i32> poison, i32 %296, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %299 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %245, !dbg !40
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !40
  %301 = sext i32 %248 to i64, !dbg !41
  %302 = getelementptr float, ptr addrspace(1) %2, i64 %301, !dbg !41
  %303 = and i32 %7, 504, !dbg !42
  %304 = icmp eq i32 %303, 0, !dbg !42
  %305 = and i1 %304, %249, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %302, i1 %305) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 44, scope: !6)
!10 = !DILocation(line: 23, column: 28, scope: !6)
!11 = !DILocation(line: 23, column: 33, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 47, column: 50, scope: !6)
!15 = !DILocation(line: 26, column: 37, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 46, scope: !6)
!18 = !DILocation(line: 36, column: 34, scope: !6)
!19 = !DILocation(line: 36, column: 41, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 39, column: 26, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 40, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 22, scope: !6)
!32 = !DILocation(line: 37, column: 113, scope: !6)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 31, column: 31, scope: !6)
!35 = !DILocation(line: 37, column: 41, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !24, inlinedAt: !37)
!37 = !DILocation(line: 48, column: 27, scope: !6)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!40 = !DILocation(line: 48, column: 30, scope: !6)
!41 = !DILocation(line: 49, column: 25, scope: !6)
!42 = !DILocation(line: 49, column: 37, scope: !6)
!43 = !DILocation(line: 49, column: 4, scope: !6)
