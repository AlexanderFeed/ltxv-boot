; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 2, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 5, !dbg !11
  %23 = and i32 %21, 256, !dbg !11
  %.lobit = lshr exact i32 %23, 8, !dbg !11
  %24 = or disjoint i32 %.lobit, 2, !dbg !11
  %25 = and i32 %21, 31, !dbg !11
  %26 = or disjoint i32 %.lobit, %20, !dbg !12
  %27 = or disjoint i32 %24, %20, !dbg !12
  %28 = icmp slt i32 %20, 4112, !dbg !13
  %29 = icmp slt i32 %26, 4112, !dbg !13
  %30 = icmp slt i32 %27, 4112, !dbg !13
  %31 = shl i32 %21, 3, !dbg !14
  %32 = and i32 %31, 4088, !dbg !14
  %33 = or disjoint i32 %32, 4, !dbg !14
  %34 = shl i32 %21, 4, !dbg !14
  %35 = and i32 %34, 4080, !dbg !14
  %36 = or disjoint i32 %35, 8, !dbg !14
  %37 = icmp samesign ult i32 %32, 3072, !dbg !15
  %38 = icmp samesign ult i32 %35, 3072, !dbg !15
  %39 = mul i32 %26, 3072, !dbg !16
  %40 = mul i32 %27, 3072, !dbg !16
  %41 = add i32 %39, %35, !dbg !17
  %42 = add i32 %39, %36, !dbg !17
  %43 = add i32 %40, %35, !dbg !17
  %44 = add i32 %40, %36, !dbg !17
  %45 = sext i32 %41 to i64, !dbg !18
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !18
  %47 = sext i32 %42 to i64, !dbg !18
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = sext i32 %43 to i64, !dbg !18
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = sext i32 %44 to i64, !dbg !18
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !18
  %53 = and i1 %28, %37, !dbg !19
  %54 = and i1 %38, %29, !dbg !19
  %55 = and i1 %38, %30, !dbg !19
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %54) #5, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !20
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !20
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !20
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !20
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !20
  %65 = extractelement <2 x bfloat> %58, i64 0, !dbg !20
  %66 = extractelement <2 x bfloat> %58, i64 1, !dbg !20
  %67 = extractelement <2 x bfloat> %60, i64 0, !dbg !20
  %68 = extractelement <2 x bfloat> %60, i64 1, !dbg !20
  %69 = extractelement <2 x bfloat> %62, i64 0, !dbg !20
  %70 = extractelement <2 x bfloat> %62, i64 1, !dbg !20
  %71 = extractelement <2 x bfloat> %64, i64 0, !dbg !20
  %72 = extractelement <2 x bfloat> %64, i64 1, !dbg !20
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %54) #5, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !20
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !20
  %76 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !20
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !20
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !20
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !20
  %82 = extractelement <2 x bfloat> %75, i64 0, !dbg !20
  %83 = extractelement <2 x bfloat> %75, i64 1, !dbg !20
  %84 = extractelement <2 x bfloat> %77, i64 0, !dbg !20
  %85 = extractelement <2 x bfloat> %77, i64 1, !dbg !20
  %86 = extractelement <2 x bfloat> %79, i64 0, !dbg !20
  %87 = extractelement <2 x bfloat> %79, i64 1, !dbg !20
  %88 = extractelement <2 x bfloat> %81, i64 0, !dbg !20
  %89 = extractelement <2 x bfloat> %81, i64 1, !dbg !20
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %50, i1 %55) #5, !dbg !20
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !20
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !20
  %93 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !20
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !20
  %95 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !20
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !20
  %97 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !20
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !20
  %99 = extractelement <2 x bfloat> %92, i64 0, !dbg !20
  %100 = extractelement <2 x bfloat> %92, i64 1, !dbg !20
  %101 = extractelement <2 x bfloat> %94, i64 0, !dbg !20
  %102 = extractelement <2 x bfloat> %94, i64 1, !dbg !20
  %103 = extractelement <2 x bfloat> %96, i64 0, !dbg !20
  %104 = extractelement <2 x bfloat> %96, i64 1, !dbg !20
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !20
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !20
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %55) #5, !dbg !20
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !20
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !20
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !20
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !20
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !20
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !20
  %114 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !20
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !20
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !20
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !20
  %118 = extractelement <2 x bfloat> %111, i64 0, !dbg !20
  %119 = extractelement <2 x bfloat> %111, i64 1, !dbg !20
  %120 = extractelement <2 x bfloat> %113, i64 0, !dbg !20
  %121 = extractelement <2 x bfloat> %113, i64 1, !dbg !20
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !20
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !20
  %124 = fpext bfloat %65 to float, !dbg !21
  %125 = fpext bfloat %66 to float, !dbg !21
  %126 = fpext bfloat %67 to float, !dbg !21
  %127 = fpext bfloat %68 to float, !dbg !21
  %128 = fpext bfloat %69 to float, !dbg !21
  %129 = fpext bfloat %70 to float, !dbg !21
  %130 = fpext bfloat %71 to float, !dbg !21
  %131 = fpext bfloat %72 to float, !dbg !21
  %132 = fpext bfloat %82 to float, !dbg !21
  %133 = fpext bfloat %83 to float, !dbg !21
  %134 = fpext bfloat %84 to float, !dbg !21
  %135 = fpext bfloat %85 to float, !dbg !21
  %136 = fpext bfloat %86 to float, !dbg !21
  %137 = fpext bfloat %87 to float, !dbg !21
  %138 = fpext bfloat %88 to float, !dbg !21
  %139 = fpext bfloat %89 to float, !dbg !21
  %140 = fpext bfloat %99 to float, !dbg !21
  %141 = fpext bfloat %100 to float, !dbg !21
  %142 = fpext bfloat %101 to float, !dbg !21
  %143 = fpext bfloat %102 to float, !dbg !21
  %144 = fpext bfloat %103 to float, !dbg !21
  %145 = fpext bfloat %104 to float, !dbg !21
  %146 = fpext bfloat %105 to float, !dbg !21
  %147 = fpext bfloat %106 to float, !dbg !21
  %148 = fpext bfloat %116 to float, !dbg !21
  %149 = fpext bfloat %117 to float, !dbg !21
  %150 = fpext bfloat %118 to float, !dbg !21
  %151 = fpext bfloat %119 to float, !dbg !21
  %152 = fpext bfloat %120 to float, !dbg !21
  %153 = fpext bfloat %121 to float, !dbg !21
  %154 = fpext bfloat %122 to float, !dbg !21
  %155 = fpext bfloat %123 to float, !dbg !21
  %156 = select i1 %54, float %124, float 0.000000e+00, !dbg !22
  %157 = select i1 %54, float %125, float 0.000000e+00, !dbg !22
  %158 = select i1 %54, float %126, float 0.000000e+00, !dbg !22
  %159 = select i1 %54, float %127, float 0.000000e+00, !dbg !22
  %160 = select i1 %54, float %128, float 0.000000e+00, !dbg !22
  %161 = select i1 %54, float %129, float 0.000000e+00, !dbg !22
  %162 = select i1 %54, float %130, float 0.000000e+00, !dbg !22
  %163 = select i1 %54, float %131, float 0.000000e+00, !dbg !22
  %164 = select i1 %54, float %132, float 0.000000e+00, !dbg !22
  %165 = select i1 %54, float %133, float 0.000000e+00, !dbg !22
  %166 = select i1 %54, float %134, float 0.000000e+00, !dbg !22
  %167 = select i1 %54, float %135, float 0.000000e+00, !dbg !22
  %168 = select i1 %54, float %136, float 0.000000e+00, !dbg !22
  %169 = select i1 %54, float %137, float 0.000000e+00, !dbg !22
  %170 = select i1 %54, float %138, float 0.000000e+00, !dbg !22
  %171 = select i1 %54, float %139, float 0.000000e+00, !dbg !22
  %172 = select i1 %55, float %140, float 0.000000e+00, !dbg !22
  %173 = select i1 %55, float %141, float 0.000000e+00, !dbg !22
  %174 = select i1 %55, float %142, float 0.000000e+00, !dbg !22
  %175 = select i1 %55, float %143, float 0.000000e+00, !dbg !22
  %176 = select i1 %55, float %144, float 0.000000e+00, !dbg !22
  %177 = select i1 %55, float %145, float 0.000000e+00, !dbg !22
  %178 = select i1 %55, float %146, float 0.000000e+00, !dbg !22
  %179 = select i1 %55, float %147, float 0.000000e+00, !dbg !22
  %180 = select i1 %55, float %148, float 0.000000e+00, !dbg !22
  %181 = select i1 %55, float %149, float 0.000000e+00, !dbg !22
  %182 = select i1 %55, float %150, float 0.000000e+00, !dbg !22
  %183 = select i1 %55, float %151, float 0.000000e+00, !dbg !22
  %184 = select i1 %55, float %152, float 0.000000e+00, !dbg !22
  %185 = select i1 %55, float %153, float 0.000000e+00, !dbg !22
  %186 = select i1 %55, float %154, float 0.000000e+00, !dbg !22
  %187 = select i1 %55, float %155, float 0.000000e+00, !dbg !22
  %188 = select i1 %54, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %189 = select i1 %55, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %190 = fsub float %157, %156, !dbg !24
  %191 = select i1 %54, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !30
  %193 = tail call float @llvm.nvvm.div.full(float %188, float %191), !dbg !31
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !32
  %195 = fmul float %194, %190, !dbg !33
  %196 = fadd float %156, %195, !dbg !34
  %197 = fmul float %190, %190, !dbg !35
  %198 = fmul float %188, %197, !dbg !36
  %199 = fmul float %194, %198, !dbg !37
  %200 = fadd float %199, 0.000000e+00, !dbg !38
  %201 = fsub float %158, %196, !dbg !24
  %202 = select i1 %54, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !30
  %204 = tail call float @llvm.nvvm.div.full(float %188, float %202), !dbg !31
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !32
  %206 = fmul float %205, %201, !dbg !33
  %207 = fadd float %196, %206, !dbg !34
  %208 = fmul float %201, %201, !dbg !35
  %209 = fmul float %191, %208, !dbg !36
  %210 = fmul float %205, %209, !dbg !37
  %211 = fadd float %200, %210, !dbg !38
  %212 = fsub float %159, %207, !dbg !24
  %213 = select i1 %54, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !30
  %215 = tail call float @llvm.nvvm.div.full(float %188, float %213), !dbg !31
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !32
  %217 = fmul float %216, %212, !dbg !33
  %218 = fadd float %207, %217, !dbg !34
  %219 = fmul float %212, %212, !dbg !35
  %220 = fmul float %202, %219, !dbg !36
  %221 = fmul float %216, %220, !dbg !37
  %222 = fadd float %211, %221, !dbg !38
  %223 = fsub float %160, %218, !dbg !24
  %224 = select i1 %54, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !30
  %226 = tail call float @llvm.nvvm.div.full(float %188, float %224), !dbg !31
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !32
  %228 = fmul float %227, %223, !dbg !33
  %229 = fadd float %218, %228, !dbg !34
  %230 = fmul float %223, %223, !dbg !35
  %231 = fmul float %213, %230, !dbg !36
  %232 = fmul float %227, %231, !dbg !37
  %233 = fadd float %222, %232, !dbg !38
  %234 = fsub float %161, %229, !dbg !24
  %235 = select i1 %54, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !30
  %237 = tail call float @llvm.nvvm.div.full(float %188, float %235), !dbg !31
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !32
  %239 = fmul float %238, %234, !dbg !33
  %240 = fadd float %229, %239, !dbg !34
  %241 = fmul float %234, %234, !dbg !35
  %242 = fmul float %224, %241, !dbg !36
  %243 = fmul float %238, %242, !dbg !37
  %244 = fadd float %233, %243, !dbg !38
  %245 = fsub float %162, %240, !dbg !24
  %246 = select i1 %54, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !30
  %248 = tail call float @llvm.nvvm.div.full(float %188, float %246), !dbg !31
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !32
  %250 = fmul float %249, %245, !dbg !33
  %251 = fadd float %240, %250, !dbg !34
  %252 = fmul float %245, %245, !dbg !35
  %253 = fmul float %235, %252, !dbg !36
  %254 = fmul float %249, %253, !dbg !37
  %255 = fadd float %244, %254, !dbg !38
  %256 = fsub float %163, %251, !dbg !24
  %257 = select i1 %54, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !30
  %259 = tail call float @llvm.nvvm.div.full(float %188, float %257), !dbg !31
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !32
  %261 = fmul float %260, %256, !dbg !33
  %262 = fadd float %251, %261, !dbg !34
  %263 = fmul float %256, %256, !dbg !35
  %264 = fmul float %246, %263, !dbg !36
  %265 = fmul float %260, %264, !dbg !37
  %266 = fadd float %255, %265, !dbg !38
  %267 = fsub float %164, %262, !dbg !24
  %268 = select i1 %54, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !30
  %270 = tail call float @llvm.nvvm.div.full(float %188, float %268), !dbg !31
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !32
  %272 = fmul float %271, %267, !dbg !33
  %273 = fadd float %262, %272, !dbg !34
  %274 = fadd float %266, 0.000000e+00, !dbg !39
  %275 = fmul float %267, %267, !dbg !35
  %276 = fmul float %257, %275, !dbg !36
  %277 = fmul float %271, %276, !dbg !37
  %278 = fadd float %274, %277, !dbg !38
  %279 = fsub float %165, %273, !dbg !24
  %280 = select i1 %54, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !30
  %282 = tail call float @llvm.nvvm.div.full(float %188, float %280), !dbg !31
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !32
  %284 = fmul float %283, %279, !dbg !33
  %285 = fadd float %273, %284, !dbg !34
  %286 = fmul float %279, %279, !dbg !35
  %287 = fmul float %268, %286, !dbg !36
  %288 = fmul float %283, %287, !dbg !37
  %289 = fadd float %278, %288, !dbg !38
  %290 = fsub float %166, %285, !dbg !24
  %291 = select i1 %54, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !30
  %293 = tail call float @llvm.nvvm.div.full(float %188, float %291), !dbg !31
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !32
  %295 = fmul float %294, %290, !dbg !33
  %296 = fadd float %285, %295, !dbg !34
  %297 = fmul float %290, %290, !dbg !35
  %298 = fmul float %280, %297, !dbg !36
  %299 = fmul float %294, %298, !dbg !37
  %300 = fadd float %289, %299, !dbg !38
  %301 = fsub float %167, %296, !dbg !24
  %302 = select i1 %54, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !30
  %304 = tail call float @llvm.nvvm.div.full(float %188, float %302), !dbg !31
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !32
  %306 = fmul float %305, %301, !dbg !33
  %307 = fadd float %296, %306, !dbg !34
  %308 = fmul float %301, %301, !dbg !35
  %309 = fmul float %291, %308, !dbg !36
  %310 = fmul float %305, %309, !dbg !37
  %311 = fadd float %300, %310, !dbg !38
  %312 = fsub float %168, %307, !dbg !24
  %313 = select i1 %54, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !30
  %315 = tail call float @llvm.nvvm.div.full(float %188, float %313), !dbg !31
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !32
  %317 = fmul float %316, %312, !dbg !33
  %318 = fadd float %307, %317, !dbg !34
  %319 = fmul float %312, %312, !dbg !35
  %320 = fmul float %302, %319, !dbg !36
  %321 = fmul float %316, %320, !dbg !37
  %322 = fadd float %311, %321, !dbg !38
  %323 = fsub float %169, %318, !dbg !24
  %324 = select i1 %54, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %325 = fcmp oeq float %324, 0.000000e+00, !dbg !30
  %326 = tail call float @llvm.nvvm.div.full(float %188, float %324), !dbg !31
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !32
  %328 = fmul float %327, %323, !dbg !33
  %329 = fadd float %318, %328, !dbg !34
  %330 = fmul float %323, %323, !dbg !35
  %331 = fmul float %313, %330, !dbg !36
  %332 = fmul float %327, %331, !dbg !37
  %333 = fadd float %322, %332, !dbg !38
  %334 = fsub float %170, %329, !dbg !24
  %335 = select i1 %54, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !30
  %337 = tail call float @llvm.nvvm.div.full(float %188, float %335), !dbg !31
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !32
  %339 = fmul float %338, %334, !dbg !33
  %340 = fadd float %329, %339, !dbg !34
  %341 = fadd float %333, 0.000000e+00, !dbg !39
  %342 = fmul float %334, %334, !dbg !35
  %343 = fmul float %324, %342, !dbg !36
  %344 = fmul float %338, %343, !dbg !37
  %345 = fadd float %341, %344, !dbg !38
  %346 = fsub float %171, %340, !dbg !24
  %347 = select i1 %54, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !30
  %349 = tail call float @llvm.nvvm.div.full(float %188, float %347), !dbg !31
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !32
  %351 = fmul float %350, %346, !dbg !33
  %352 = fadd float %340, %351, !dbg !34
  %353 = fmul float %346, %346, !dbg !35
  %354 = fmul float %335, %353, !dbg !36
  %355 = fmul float %350, %354, !dbg !37
  %356 = fadd float %345, %355, !dbg !38
  %357 = fsub float %173, %172, !dbg !24
  %358 = select i1 %55, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !30
  %360 = tail call float @llvm.nvvm.div.full(float %189, float %358), !dbg !31
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !32
  %362 = fmul float %357, %361, !dbg !33
  %363 = fadd float %172, %362, !dbg !34
  %364 = fmul float %357, %357, !dbg !35
  %365 = fmul float %189, %364, !dbg !36
  %366 = fmul float %365, %361, !dbg !37
  %367 = fadd float %366, 0.000000e+00, !dbg !38
  %368 = fsub float %174, %363, !dbg !24
  %369 = select i1 %55, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %370 = fcmp oeq float %369, 0.000000e+00, !dbg !30
  %371 = tail call float @llvm.nvvm.div.full(float %189, float %369), !dbg !31
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !32
  %373 = fmul float %372, %368, !dbg !33
  %374 = fadd float %363, %373, !dbg !34
  %375 = fmul float %368, %368, !dbg !35
  %376 = fmul float %358, %375, !dbg !36
  %377 = fmul float %372, %376, !dbg !37
  %378 = fadd float %367, %377, !dbg !38
  %379 = fsub float %175, %374, !dbg !24
  %380 = select i1 %55, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !30
  %382 = tail call float @llvm.nvvm.div.full(float %189, float %380), !dbg !31
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !32
  %384 = fmul float %383, %379, !dbg !33
  %385 = fadd float %374, %384, !dbg !34
  %386 = fmul float %379, %379, !dbg !35
  %387 = fmul float %369, %386, !dbg !36
  %388 = fmul float %383, %387, !dbg !37
  %389 = fadd float %378, %388, !dbg !38
  %390 = fsub float %176, %385, !dbg !24
  %391 = select i1 %55, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !30
  %393 = tail call float @llvm.nvvm.div.full(float %189, float %391), !dbg !31
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !32
  %395 = fmul float %394, %390, !dbg !33
  %396 = fadd float %385, %395, !dbg !34
  %397 = fmul float %390, %390, !dbg !35
  %398 = fmul float %380, %397, !dbg !36
  %399 = fmul float %394, %398, !dbg !37
  %400 = fadd float %389, %399, !dbg !38
  %401 = fsub float %177, %396, !dbg !24
  %402 = select i1 %55, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !30
  %404 = tail call float @llvm.nvvm.div.full(float %189, float %402), !dbg !31
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !32
  %406 = fmul float %405, %401, !dbg !33
  %407 = fadd float %396, %406, !dbg !34
  %408 = fmul float %401, %401, !dbg !35
  %409 = fmul float %391, %408, !dbg !36
  %410 = fmul float %405, %409, !dbg !37
  %411 = fadd float %400, %410, !dbg !38
  %412 = fsub float %178, %407, !dbg !24
  %413 = select i1 %55, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %414 = fcmp oeq float %413, 0.000000e+00, !dbg !30
  %415 = tail call float @llvm.nvvm.div.full(float %189, float %413), !dbg !31
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !32
  %417 = fmul float %416, %412, !dbg !33
  %418 = fadd float %407, %417, !dbg !34
  %419 = fmul float %412, %412, !dbg !35
  %420 = fmul float %402, %419, !dbg !36
  %421 = fmul float %416, %420, !dbg !37
  %422 = fadd float %411, %421, !dbg !38
  %423 = fsub float %179, %418, !dbg !24
  %424 = select i1 %55, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !30
  %426 = tail call float @llvm.nvvm.div.full(float %189, float %424), !dbg !31
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !32
  %428 = fmul float %427, %423, !dbg !33
  %429 = fadd float %418, %428, !dbg !34
  %430 = fmul float %423, %423, !dbg !35
  %431 = fmul float %413, %430, !dbg !36
  %432 = fmul float %427, %431, !dbg !37
  %433 = fadd float %422, %432, !dbg !38
  %434 = fsub float %180, %429, !dbg !24
  %435 = select i1 %55, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !30
  %437 = tail call float @llvm.nvvm.div.full(float %189, float %435), !dbg !31
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !32
  %439 = fmul float %438, %434, !dbg !33
  %440 = fadd float %429, %439, !dbg !34
  %441 = fadd float %433, 0.000000e+00, !dbg !39
  %442 = fmul float %434, %434, !dbg !35
  %443 = fmul float %424, %442, !dbg !36
  %444 = fmul float %438, %443, !dbg !37
  %445 = fadd float %441, %444, !dbg !38
  %446 = fsub float %181, %440, !dbg !24
  %447 = select i1 %55, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !30
  %449 = tail call float @llvm.nvvm.div.full(float %189, float %447), !dbg !31
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !32
  %451 = fmul float %450, %446, !dbg !33
  %452 = fadd float %440, %451, !dbg !34
  %453 = fmul float %446, %446, !dbg !35
  %454 = fmul float %435, %453, !dbg !36
  %455 = fmul float %450, %454, !dbg !37
  %456 = fadd float %445, %455, !dbg !38
  %457 = fsub float %182, %452, !dbg !24
  %458 = select i1 %55, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !30
  %460 = tail call float @llvm.nvvm.div.full(float %189, float %458), !dbg !31
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !32
  %462 = fmul float %461, %457, !dbg !33
  %463 = fadd float %452, %462, !dbg !34
  %464 = fmul float %457, %457, !dbg !35
  %465 = fmul float %447, %464, !dbg !36
  %466 = fmul float %461, %465, !dbg !37
  %467 = fadd float %456, %466, !dbg !38
  %468 = fsub float %183, %463, !dbg !24
  %469 = select i1 %55, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %470 = fcmp oeq float %469, 0.000000e+00, !dbg !30
  %471 = tail call float @llvm.nvvm.div.full(float %189, float %469), !dbg !31
  %472 = select i1 %470, float 0.000000e+00, float %471, !dbg !32
  %473 = fmul float %472, %468, !dbg !33
  %474 = fadd float %463, %473, !dbg !34
  %475 = fmul float %468, %468, !dbg !35
  %476 = fmul float %458, %475, !dbg !36
  %477 = fmul float %472, %476, !dbg !37
  %478 = fadd float %467, %477, !dbg !38
  %479 = fsub float %184, %474, !dbg !24
  %480 = select i1 %55, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %481 = fcmp oeq float %480, 0.000000e+00, !dbg !30
  %482 = tail call float @llvm.nvvm.div.full(float %189, float %480), !dbg !31
  %483 = select i1 %481, float 0.000000e+00, float %482, !dbg !32
  %484 = fmul float %483, %479, !dbg !33
  %485 = fadd float %474, %484, !dbg !34
  %486 = fmul float %479, %479, !dbg !35
  %487 = fmul float %469, %486, !dbg !36
  %488 = fmul float %483, %487, !dbg !37
  %489 = fadd float %478, %488, !dbg !38
  %490 = fsub float %185, %485, !dbg !24
  %491 = select i1 %55, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %492 = fcmp oeq float %491, 0.000000e+00, !dbg !30
  %493 = tail call float @llvm.nvvm.div.full(float %189, float %491), !dbg !31
  %494 = select i1 %492, float 0.000000e+00, float %493, !dbg !32
  %495 = fmul float %494, %490, !dbg !33
  %496 = fadd float %485, %495, !dbg !34
  %497 = fmul float %490, %490, !dbg !35
  %498 = fmul float %480, %497, !dbg !36
  %499 = fmul float %494, %498, !dbg !37
  %500 = fadd float %489, %499, !dbg !38
  %501 = fsub float %186, %496, !dbg !24
  %502 = select i1 %55, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %503 = fcmp oeq float %502, 0.000000e+00, !dbg !30
  %504 = tail call float @llvm.nvvm.div.full(float %189, float %502), !dbg !31
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !32
  %506 = fmul float %505, %501, !dbg !33
  %507 = fadd float %496, %506, !dbg !34
  %508 = fadd float %500, 0.000000e+00, !dbg !39
  %509 = fmul float %501, %501, !dbg !35
  %510 = fmul float %491, %509, !dbg !36
  %511 = fmul float %505, %510, !dbg !37
  %512 = fadd float %508, %511, !dbg !38
  %513 = fsub float %187, %507, !dbg !24
  %514 = select i1 %55, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %515 = fcmp oeq float %514, 0.000000e+00, !dbg !30
  %516 = tail call float @llvm.nvvm.div.full(float %189, float %514), !dbg !31
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !32
  %518 = fmul float %517, %513, !dbg !33
  %519 = fadd float %507, %518, !dbg !34
  %520 = fmul float %513, %513, !dbg !35
  %521 = fmul float %502, %520, !dbg !36
  %522 = fmul float %517, %521, !dbg !37
  %523 = fadd float %512, %522, !dbg !38
  %524 = bitcast float %352 to i32, !dbg !40
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 16, i32 31), !dbg !40
  %526 = bitcast i32 %525 to float, !dbg !40
  %527 = bitcast float %356 to i32, !dbg !40
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 16, i32 31), !dbg !40
  %529 = bitcast i32 %528 to float, !dbg !40
  %530 = bitcast float %347 to i32, !dbg !40
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 16, i32 31), !dbg !40
  %532 = bitcast i32 %531 to float, !dbg !40
  %533 = fsub float %526, %352, !dbg !24
  %534 = fadd float %347, %532, !dbg !29
  %535 = fcmp oeq float %534, 0.000000e+00, !dbg !30
  %536 = tail call float @llvm.nvvm.div.full(float %532, float %534), !dbg !31
  %537 = select i1 %535, float 0.000000e+00, float %536, !dbg !32
  %538 = fmul float %537, %533, !dbg !33
  %539 = fadd float %352, %538, !dbg !34
  %540 = fadd float %356, %529, !dbg !39
  %541 = fmul float %533, %533, !dbg !35
  %542 = fmul float %347, %541, !dbg !36
  %543 = fmul float %537, %542, !dbg !37
  %544 = fadd float %540, %543, !dbg !38
  %545 = bitcast float %539 to i32, !dbg !40
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 8, i32 31), !dbg !40
  %547 = bitcast i32 %546 to float, !dbg !40
  %548 = bitcast float %544 to i32, !dbg !40
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 8, i32 31), !dbg !40
  %550 = bitcast i32 %549 to float, !dbg !40
  %551 = bitcast float %534 to i32, !dbg !40
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 8, i32 31), !dbg !40
  %553 = bitcast i32 %552 to float, !dbg !40
  %554 = fsub float %547, %539, !dbg !24
  %555 = fadd float %534, %553, !dbg !29
  %556 = fcmp oeq float %555, 0.000000e+00, !dbg !30
  %557 = tail call float @llvm.nvvm.div.full(float %553, float %555), !dbg !31
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !32
  %559 = fmul float %558, %554, !dbg !33
  %560 = fadd float %539, %559, !dbg !34
  %561 = fadd float %544, %550, !dbg !39
  %562 = fmul float %554, %554, !dbg !35
  %563 = fmul float %534, %562, !dbg !36
  %564 = fmul float %558, %563, !dbg !37
  %565 = fadd float %561, %564, !dbg !38
  %566 = bitcast float %560 to i32, !dbg !40
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 4, i32 31), !dbg !40
  %568 = bitcast i32 %567 to float, !dbg !40
  %569 = bitcast float %565 to i32, !dbg !40
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 4, i32 31), !dbg !40
  %571 = bitcast i32 %570 to float, !dbg !40
  %572 = bitcast float %555 to i32, !dbg !40
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 4, i32 31), !dbg !40
  %574 = bitcast i32 %573 to float, !dbg !40
  %575 = fsub float %568, %560, !dbg !24
  %576 = fadd float %555, %574, !dbg !29
  %577 = fcmp oeq float %576, 0.000000e+00, !dbg !30
  %578 = tail call float @llvm.nvvm.div.full(float %574, float %576), !dbg !31
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !32
  %580 = fmul float %579, %575, !dbg !33
  %581 = fadd float %560, %580, !dbg !34
  %582 = fadd float %565, %571, !dbg !39
  %583 = fmul float %575, %575, !dbg !35
  %584 = fmul float %555, %583, !dbg !36
  %585 = fmul float %579, %584, !dbg !37
  %586 = fadd float %582, %585, !dbg !38
  %587 = bitcast float %581 to i32, !dbg !40
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 2, i32 31), !dbg !40
  %589 = bitcast i32 %588 to float, !dbg !40
  %590 = bitcast float %586 to i32, !dbg !40
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 2, i32 31), !dbg !40
  %592 = bitcast i32 %591 to float, !dbg !40
  %593 = bitcast float %576 to i32, !dbg !40
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 2, i32 31), !dbg !40
  %595 = bitcast i32 %594 to float, !dbg !40
  %596 = fsub float %589, %581, !dbg !24
  %597 = fadd float %576, %595, !dbg !29
  %598 = fcmp oeq float %597, 0.000000e+00, !dbg !30
  %599 = tail call float @llvm.nvvm.div.full(float %595, float %597), !dbg !31
  %600 = select i1 %598, float 0.000000e+00, float %599, !dbg !32
  %601 = fmul float %600, %596, !dbg !33
  %602 = fadd float %581, %601, !dbg !34
  %603 = fadd float %586, %592, !dbg !39
  %604 = fmul float %596, %596, !dbg !35
  %605 = fmul float %576, %604, !dbg !36
  %606 = fmul float %600, %605, !dbg !37
  %607 = fadd float %603, %606, !dbg !38
  %608 = bitcast float %602 to i32, !dbg !40
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 1, i32 31), !dbg !40
  %610 = bitcast i32 %609 to float, !dbg !40
  %611 = bitcast float %607 to i32, !dbg !40
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 1, i32 31), !dbg !40
  %613 = bitcast i32 %612 to float, !dbg !40
  %614 = bitcast float %597 to i32, !dbg !40
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 1, i32 31), !dbg !40
  %616 = bitcast i32 %615 to float, !dbg !40
  %617 = fsub float %610, %602, !dbg !24
  %618 = fadd float %597, %616, !dbg !29
  %619 = fcmp oeq float %618, 0.000000e+00, !dbg !30
  %620 = tail call float @llvm.nvvm.div.full(float %616, float %618), !dbg !31
  %621 = select i1 %619, float 0.000000e+00, float %620, !dbg !32
  %622 = fmul float %621, %617, !dbg !33
  %623 = fadd float %602, %622, !dbg !34
  %624 = fadd float %607, %613, !dbg !39
  %625 = fmul float %617, %617, !dbg !35
  %626 = fmul float %597, %625, !dbg !36
  %627 = fmul float %621, %626, !dbg !37
  %628 = fadd float %624, %627, !dbg !38
  %629 = bitcast float %519 to i32, !dbg !40
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 16, i32 31), !dbg !40
  %631 = bitcast i32 %630 to float, !dbg !40
  %632 = bitcast float %523 to i32, !dbg !40
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 16, i32 31), !dbg !40
  %634 = bitcast i32 %633 to float, !dbg !40
  %635 = bitcast float %514 to i32, !dbg !40
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 16, i32 31), !dbg !40
  %637 = bitcast i32 %636 to float, !dbg !40
  %638 = fsub float %631, %519, !dbg !24
  %639 = fadd float %514, %637, !dbg !29
  %640 = fcmp oeq float %639, 0.000000e+00, !dbg !30
  %641 = tail call float @llvm.nvvm.div.full(float %637, float %639), !dbg !31
  %642 = select i1 %640, float 0.000000e+00, float %641, !dbg !32
  %643 = fmul float %642, %638, !dbg !33
  %644 = fadd float %519, %643, !dbg !34
  %645 = fadd float %523, %634, !dbg !39
  %646 = fmul float %638, %638, !dbg !35
  %647 = fmul float %514, %646, !dbg !36
  %648 = fmul float %642, %647, !dbg !37
  %649 = fadd float %645, %648, !dbg !38
  %650 = bitcast float %644 to i32, !dbg !40
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %650, i32 8, i32 31), !dbg !40
  %652 = bitcast i32 %651 to float, !dbg !40
  %653 = bitcast float %649 to i32, !dbg !40
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 8, i32 31), !dbg !40
  %655 = bitcast i32 %654 to float, !dbg !40
  %656 = bitcast float %639 to i32, !dbg !40
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 8, i32 31), !dbg !40
  %658 = bitcast i32 %657 to float, !dbg !40
  %659 = fsub float %652, %644, !dbg !24
  %660 = fadd float %639, %658, !dbg !29
  %661 = fcmp oeq float %660, 0.000000e+00, !dbg !30
  %662 = tail call float @llvm.nvvm.div.full(float %658, float %660), !dbg !31
  %663 = select i1 %661, float 0.000000e+00, float %662, !dbg !32
  %664 = fmul float %663, %659, !dbg !33
  %665 = fadd float %644, %664, !dbg !34
  %666 = fadd float %649, %655, !dbg !39
  %667 = fmul float %659, %659, !dbg !35
  %668 = fmul float %639, %667, !dbg !36
  %669 = fmul float %663, %668, !dbg !37
  %670 = fadd float %666, %669, !dbg !38
  %671 = bitcast float %665 to i32, !dbg !40
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 4, i32 31), !dbg !40
  %673 = bitcast i32 %672 to float, !dbg !40
  %674 = bitcast float %670 to i32, !dbg !40
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 4, i32 31), !dbg !40
  %676 = bitcast i32 %675 to float, !dbg !40
  %677 = bitcast float %660 to i32, !dbg !40
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %677, i32 4, i32 31), !dbg !40
  %679 = bitcast i32 %678 to float, !dbg !40
  %680 = fsub float %673, %665, !dbg !24
  %681 = fadd float %660, %679, !dbg !29
  %682 = fcmp oeq float %681, 0.000000e+00, !dbg !30
  %683 = tail call float @llvm.nvvm.div.full(float %679, float %681), !dbg !31
  %684 = select i1 %682, float 0.000000e+00, float %683, !dbg !32
  %685 = fmul float %684, %680, !dbg !33
  %686 = fadd float %665, %685, !dbg !34
  %687 = fadd float %670, %676, !dbg !39
  %688 = fmul float %680, %680, !dbg !35
  %689 = fmul float %660, %688, !dbg !36
  %690 = fmul float %684, %689, !dbg !37
  %691 = fadd float %687, %690, !dbg !38
  %692 = bitcast float %686 to i32, !dbg !40
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 2, i32 31), !dbg !40
  %694 = bitcast i32 %693 to float, !dbg !40
  %695 = bitcast float %691 to i32, !dbg !40
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 2, i32 31), !dbg !40
  %697 = bitcast i32 %696 to float, !dbg !40
  %698 = bitcast float %681 to i32, !dbg !40
  %699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %698, i32 2, i32 31), !dbg !40
  %700 = bitcast i32 %699 to float, !dbg !40
  %701 = fsub float %694, %686, !dbg !24
  %702 = fadd float %681, %700, !dbg !29
  %703 = fcmp oeq float %702, 0.000000e+00, !dbg !30
  %704 = tail call float @llvm.nvvm.div.full(float %700, float %702), !dbg !31
  %705 = select i1 %703, float 0.000000e+00, float %704, !dbg !32
  %706 = fmul float %705, %701, !dbg !33
  %707 = fadd float %686, %706, !dbg !34
  %708 = fadd float %691, %697, !dbg !39
  %709 = fmul float %701, %701, !dbg !35
  %710 = fmul float %681, %709, !dbg !36
  %711 = fmul float %705, %710, !dbg !37
  %712 = fadd float %708, %711, !dbg !38
  %713 = bitcast float %707 to i32, !dbg !40
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 1, i32 31), !dbg !40
  %715 = bitcast i32 %714 to float, !dbg !40
  %716 = bitcast float %712 to i32, !dbg !40
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 1, i32 31), !dbg !40
  %718 = bitcast i32 %717 to float, !dbg !40
  %719 = bitcast float %702 to i32, !dbg !40
  %720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %719, i32 1, i32 31), !dbg !40
  %721 = bitcast i32 %720 to float, !dbg !40
  %722 = fsub float %715, %707, !dbg !24
  %723 = fadd float %702, %721, !dbg !29
  %724 = fcmp oeq float %723, 0.000000e+00, !dbg !30
  %725 = tail call float @llvm.nvvm.div.full(float %721, float %723), !dbg !31
  %726 = select i1 %724, float 0.000000e+00, float %725, !dbg !32
  %727 = fmul float %726, %722, !dbg !33
  %728 = fadd float %707, %727, !dbg !34
  %729 = fadd float %712, %718, !dbg !39
  %730 = fmul float %722, %722, !dbg !35
  %731 = fmul float %702, %730, !dbg !36
  %732 = fmul float %726, %731, !dbg !37
  %733 = fadd float %729, %732, !dbg !38
  %734 = and i32 %22, 7, !dbg !40
  %735 = icmp eq i32 %25, 0, !dbg !40
  %736 = lshr exact i32 %23, 5, !dbg !40
  %737 = or disjoint i32 %736, %734, !dbg !40
  %738 = getelementptr float, ptr addrspace(3) @global_smem, i32 %737, !dbg !40
  %739 = bitcast float %623 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %738, <1 x i32> %739, i1 %735) #5, !dbg !40
  %740 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %737, !dbg !40
  %741 = bitcast float %628 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %740, <1 x i32> %741, i1 %735) #5, !dbg !40
  %742 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %737, !dbg !40
  %743 = bitcast float %618 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %742, <1 x i32> %743, i1 %735) #5, !dbg !40
  %744 = shl nuw nsw i32 %24, 3, !dbg !40
  %745 = or disjoint i32 %744, %734, !dbg !40
  %746 = getelementptr float, ptr addrspace(3) @global_smem, i32 %745, !dbg !40
  %747 = bitcast float %728 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %746, <1 x i32> %747, i1 %735) #5, !dbg !40
  %748 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %745, !dbg !40
  %749 = bitcast float %733 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %748, <1 x i32> %749, i1 %735) #5, !dbg !40
  %750 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %745, !dbg !40
  %751 = bitcast float %723 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %750, <1 x i32> %751, i1 %735) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %752 = icmp slt i32 %21, 32, !dbg !40
  %753 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %754 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %753, i1 %752) #5, !dbg !40
  %755 = bitcast i32 %754 to float, !dbg !40
  %756 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !40
  %757 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %756, i1 %752) #5, !dbg !40
  %758 = bitcast i32 %757 to float, !dbg !40
  %759 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !40
  %760 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %759, i1 %752) #5, !dbg !40
  %761 = bitcast i32 %760 to float, !dbg !40
  %762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %754, i32 4, i32 31), !dbg !40
  %763 = bitcast i32 %762 to float, !dbg !40
  %764 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %757, i32 4, i32 31), !dbg !40
  %765 = bitcast i32 %764 to float, !dbg !40
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %760, i32 4, i32 31), !dbg !40
  %767 = bitcast i32 %766 to float, !dbg !40
  %768 = fsub float %763, %755, !dbg !24
  %769 = fadd float %761, %767, !dbg !29
  %770 = fcmp oeq float %769, 0.000000e+00, !dbg !30
  %771 = tail call float @llvm.nvvm.div.full(float %767, float %769), !dbg !31
  %772 = select i1 %770, float 0.000000e+00, float %771, !dbg !32
  %773 = fmul float %768, %772, !dbg !33
  %774 = fadd float %773, %755, !dbg !34
  %775 = fadd float %758, %765, !dbg !39
  %776 = fmul float %768, %768, !dbg !35
  %777 = fmul float %776, %761, !dbg !36
  %778 = fmul float %777, %772, !dbg !37
  %779 = fadd float %775, %778, !dbg !38
  %780 = bitcast float %774 to i32, !dbg !40
  %781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 2, i32 31), !dbg !40
  %782 = bitcast i32 %781 to float, !dbg !40
  %783 = bitcast float %779 to i32, !dbg !40
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %783, i32 2, i32 31), !dbg !40
  %785 = bitcast i32 %784 to float, !dbg !40
  %786 = bitcast float %769 to i32, !dbg !40
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 2, i32 31), !dbg !40
  %788 = bitcast i32 %787 to float, !dbg !40
  %789 = fsub float %782, %774, !dbg !24
  %790 = fadd float %769, %788, !dbg !29
  %791 = fcmp oeq float %790, 0.000000e+00, !dbg !30
  %792 = tail call float @llvm.nvvm.div.full(float %788, float %790), !dbg !31
  %793 = select i1 %791, float 0.000000e+00, float %792, !dbg !32
  %794 = fmul float %789, %793, !dbg !33
  %795 = fadd float %774, %794, !dbg !34
  %796 = fadd float %779, %785, !dbg !39
  %797 = fmul float %789, %789, !dbg !35
  %798 = fmul float %769, %797, !dbg !36
  %799 = fmul float %793, %798, !dbg !37
  %800 = fadd float %796, %799, !dbg !38
  %801 = bitcast float %795 to i32, !dbg !40
  %802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %801, i32 1, i32 31), !dbg !40
  %803 = bitcast i32 %802 to float, !dbg !40
  %804 = bitcast float %800 to i32, !dbg !40
  %805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %804, i32 1, i32 31), !dbg !40
  %806 = bitcast i32 %805 to float, !dbg !40
  %807 = bitcast float %790 to i32, !dbg !40
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 1, i32 31), !dbg !40
  %809 = bitcast i32 %808 to float, !dbg !40
  %810 = fsub float %803, %795, !dbg !24
  %811 = fadd float %790, %809, !dbg !29
  %812 = fcmp oeq float %811, 0.000000e+00, !dbg !30
  %813 = tail call float @llvm.nvvm.div.full(float %809, float %811), !dbg !31
  %814 = select i1 %812, float 0.000000e+00, float %813, !dbg !32
  %815 = fmul float %810, %814, !dbg !33
  %816 = fadd float %795, %815, !dbg !34
  %817 = fadd float %800, %806, !dbg !39
  %818 = fmul float %810, %810, !dbg !35
  %819 = fmul float %790, %818, !dbg !36
  %820 = fmul float %814, %819, !dbg !37
  %821 = fadd float %817, %820, !dbg !38
  %822 = and i32 %21, 7, !dbg !40
  %823 = icmp eq i32 %822, 0, !dbg !40
  %824 = and i1 %752, %823, !dbg !40
  %825 = bitcast float %816 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %753, <1 x i32> %825, i1 %824) #5, !dbg !40
  %826 = bitcast float %821 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %756, <1 x i32> %826, i1 %824) #5, !dbg !40
  %827 = bitcast float %811 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %759, <1 x i32> %827, i1 %824) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %828 = getelementptr float, ptr addrspace(3) @global_smem, i32 %736, !dbg !40
  %829 = load float, ptr addrspace(3) %828, align 16, !dbg !40
  %830 = getelementptr float, ptr addrspace(3) @global_smem, i32 %744, !dbg !40
  %831 = load float, ptr addrspace(3) %830, align 16, !dbg !40
  %832 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %736, !dbg !40
  %833 = load float, ptr addrspace(3) %832, align 16, !dbg !40
  %834 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %744, !dbg !40
  %835 = load float, ptr addrspace(3) %834, align 16, !dbg !40
  %836 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %54) #5, !dbg !41
  %837 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %54) #5, !dbg !41
  %838 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %50, i1 %55) #5, !dbg !41
  %839 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %55) #5, !dbg !41
  %840 = add nuw nsw i32 %32, 3072, !dbg !42
  %841 = zext nneg i32 %840 to i64, !dbg !43
  %842 = getelementptr float, ptr addrspace(1) %1, i64 %841, !dbg !43
  %843 = zext nneg i32 %32 to i64, !dbg !43
  %844 = getelementptr float, ptr addrspace(1) %1, i64 %843, !dbg !43
  %845 = getelementptr i8, ptr addrspace(1) %844, i64 12304, !dbg !43
  %846 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %842, i1 %37) #5, !dbg !44
  %847 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %845, i1 %37) #5, !dbg !44
  %848 = getelementptr bfloat, ptr addrspace(1) %2, i64 %841, !dbg !45
  %849 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %848, i1 %37) #5, !dbg !46
  %850 = zext nneg i32 %33 to i64, !dbg !47
  %851 = getelementptr float, ptr addrspace(1) %1, i64 %850, !dbg !47
  %852 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %844, i1 %37) #5, !dbg !48
  %853 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %851, i1 %37) #5, !dbg !48
  %854 = getelementptr bfloat, ptr addrspace(1) %2, i64 %843, !dbg !49
  %855 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %854, i1 %37) #5, !dbg !50
  %856 = tail call float @llvm.nvvm.div.full(float %833, float 3.072000e+03), !dbg !51
  %857 = tail call float @llvm.nvvm.div.full(float %835, float 3.072000e+03), !dbg !51
  %858 = fadd float %856, 0x3EB0C6F7A0000000, !dbg !52
  %859 = fadd float %857, 0x3EB0C6F7A0000000, !dbg !52
  %860 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %861 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %862 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %863 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %864 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %865 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %866 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %867 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %868 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %869 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %870 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %871 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %872 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %873 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %874 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %875 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i82 = icmp eq i32 %875, 0, !dbg !53
  br i1 %.not.i82, label %878, label %876, !dbg !53

876:                                              ; preds = %__nv_rsqrtf.exit
  %877 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %858), !dbg !53
  br label %__nv_rsqrtf.exit84, !dbg !53

878:                                              ; preds = %__nv_rsqrtf.exit
  %879 = tail call float @llvm.nvvm.rsqrt.approx.f(float %858), !dbg !53
  br label %__nv_rsqrtf.exit84, !dbg !53

__nv_rsqrtf.exit84:                               ; preds = %876, %878
  %.0.i83 = phi float [ %877, %876 ], [ %879, %878 ], !dbg !53
  %880 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %881 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %882 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %883 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %884 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %885 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %886 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %887 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %888 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %889 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %890 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %891 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %892 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %894 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %895 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i130 = icmp eq i32 %895, 0, !dbg !53
  br i1 %.not.i130, label %898, label %896, !dbg !53

896:                                              ; preds = %__nv_rsqrtf.exit84
  %897 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %859), !dbg !53
  br label %__nv_rsqrtf.exit132, !dbg !53

898:                                              ; preds = %__nv_rsqrtf.exit84
  %899 = tail call float @llvm.nvvm.rsqrt.approx.f(float %859), !dbg !53
  br label %__nv_rsqrtf.exit132, !dbg !53

__nv_rsqrtf.exit132:                              ; preds = %896, %898
  %.0.i131 = phi float [ %897, %896 ], [ %899, %898 ], !dbg !53
  %900 = extractvalue { i32, i32, i32, i32 } %839, 3, !dbg !41
  %901 = bitcast i32 %900 to <2 x bfloat>, !dbg !41
  %902 = extractelement <2 x bfloat> %901, i64 1, !dbg !41
  %903 = fpext bfloat %902 to float, !dbg !54
  %904 = fsub float %903, %831, !dbg !55
  %905 = extractelement <2 x bfloat> %901, i64 0, !dbg !41
  %906 = fpext bfloat %905 to float, !dbg !54
  %907 = fsub float %906, %831, !dbg !55
  %908 = extractvalue { i32, i32, i32, i32 } %839, 2, !dbg !41
  %909 = bitcast i32 %908 to <2 x bfloat>, !dbg !41
  %910 = extractelement <2 x bfloat> %909, i64 1, !dbg !41
  %911 = fpext bfloat %910 to float, !dbg !54
  %912 = fsub float %911, %831, !dbg !55
  %913 = extractelement <2 x bfloat> %909, i64 0, !dbg !41
  %914 = fpext bfloat %913 to float, !dbg !54
  %915 = fsub float %914, %831, !dbg !55
  %916 = extractvalue { i32, i32, i32, i32 } %839, 1, !dbg !41
  %917 = bitcast i32 %916 to <2 x bfloat>, !dbg !41
  %918 = extractelement <2 x bfloat> %917, i64 1, !dbg !41
  %919 = fpext bfloat %918 to float, !dbg !54
  %920 = fsub float %919, %831, !dbg !55
  %921 = extractelement <2 x bfloat> %917, i64 0, !dbg !41
  %922 = fpext bfloat %921 to float, !dbg !54
  %923 = fsub float %922, %831, !dbg !55
  %924 = extractvalue { i32, i32, i32, i32 } %839, 0, !dbg !41
  %925 = bitcast i32 %924 to <2 x bfloat>, !dbg !41
  %926 = extractelement <2 x bfloat> %925, i64 1, !dbg !41
  %927 = fpext bfloat %926 to float, !dbg !54
  %928 = fsub float %927, %831, !dbg !55
  %929 = extractelement <2 x bfloat> %925, i64 0, !dbg !41
  %930 = fpext bfloat %929 to float, !dbg !54
  %931 = fsub float %930, %831, !dbg !55
  %932 = extractvalue { i32, i32, i32, i32 } %838, 3, !dbg !41
  %933 = bitcast i32 %932 to <2 x bfloat>, !dbg !41
  %934 = extractelement <2 x bfloat> %933, i64 1, !dbg !41
  %935 = fpext bfloat %934 to float, !dbg !54
  %936 = fsub float %935, %831, !dbg !55
  %937 = extractelement <2 x bfloat> %933, i64 0, !dbg !41
  %938 = fpext bfloat %937 to float, !dbg !54
  %939 = fsub float %938, %831, !dbg !55
  %940 = extractvalue { i32, i32, i32, i32 } %838, 2, !dbg !41
  %941 = bitcast i32 %940 to <2 x bfloat>, !dbg !41
  %942 = extractelement <2 x bfloat> %941, i64 1, !dbg !41
  %943 = fpext bfloat %942 to float, !dbg !54
  %944 = fsub float %943, %831, !dbg !55
  %945 = extractelement <2 x bfloat> %941, i64 0, !dbg !41
  %946 = fpext bfloat %945 to float, !dbg !54
  %947 = fsub float %946, %831, !dbg !55
  %948 = extractvalue { i32, i32, i32, i32 } %838, 1, !dbg !41
  %949 = bitcast i32 %948 to <2 x bfloat>, !dbg !41
  %950 = extractelement <2 x bfloat> %949, i64 1, !dbg !41
  %951 = fpext bfloat %950 to float, !dbg !54
  %952 = fsub float %951, %831, !dbg !55
  %953 = extractelement <2 x bfloat> %949, i64 0, !dbg !41
  %954 = fpext bfloat %953 to float, !dbg !54
  %955 = fsub float %954, %831, !dbg !55
  %956 = extractvalue { i32, i32, i32, i32 } %838, 0, !dbg !41
  %957 = bitcast i32 %956 to <2 x bfloat>, !dbg !41
  %958 = extractelement <2 x bfloat> %957, i64 1, !dbg !41
  %959 = fpext bfloat %958 to float, !dbg !54
  %960 = fsub float %959, %831, !dbg !55
  %961 = extractelement <2 x bfloat> %957, i64 0, !dbg !41
  %962 = fpext bfloat %961 to float, !dbg !54
  %963 = fsub float %962, %831, !dbg !55
  %964 = extractvalue { i32, i32, i32, i32 } %837, 3, !dbg !41
  %965 = bitcast i32 %964 to <2 x bfloat>, !dbg !41
  %966 = extractelement <2 x bfloat> %965, i64 1, !dbg !41
  %967 = fpext bfloat %966 to float, !dbg !54
  %968 = fsub float %967, %829, !dbg !55
  %969 = extractelement <2 x bfloat> %965, i64 0, !dbg !41
  %970 = fpext bfloat %969 to float, !dbg !54
  %971 = fsub float %970, %829, !dbg !55
  %972 = extractvalue { i32, i32, i32, i32 } %837, 2, !dbg !41
  %973 = bitcast i32 %972 to <2 x bfloat>, !dbg !41
  %974 = extractelement <2 x bfloat> %973, i64 1, !dbg !41
  %975 = fpext bfloat %974 to float, !dbg !54
  %976 = fsub float %975, %829, !dbg !55
  %977 = extractelement <2 x bfloat> %973, i64 0, !dbg !41
  %978 = fpext bfloat %977 to float, !dbg !54
  %979 = fsub float %978, %829, !dbg !55
  %980 = extractvalue { i32, i32, i32, i32 } %837, 1, !dbg !41
  %981 = bitcast i32 %980 to <2 x bfloat>, !dbg !41
  %982 = extractelement <2 x bfloat> %981, i64 1, !dbg !41
  %983 = fpext bfloat %982 to float, !dbg !54
  %984 = fsub float %983, %829, !dbg !55
  %985 = extractelement <2 x bfloat> %981, i64 0, !dbg !41
  %986 = fpext bfloat %985 to float, !dbg !54
  %987 = fsub float %986, %829, !dbg !55
  %988 = extractvalue { i32, i32, i32, i32 } %837, 0, !dbg !41
  %989 = bitcast i32 %988 to <2 x bfloat>, !dbg !41
  %990 = extractelement <2 x bfloat> %989, i64 1, !dbg !41
  %991 = fpext bfloat %990 to float, !dbg !54
  %992 = fsub float %991, %829, !dbg !55
  %993 = extractelement <2 x bfloat> %989, i64 0, !dbg !41
  %994 = fpext bfloat %993 to float, !dbg !54
  %995 = fsub float %994, %829, !dbg !55
  %996 = extractvalue { i32, i32, i32, i32 } %836, 3, !dbg !41
  %997 = bitcast i32 %996 to <2 x bfloat>, !dbg !41
  %998 = extractelement <2 x bfloat> %997, i64 1, !dbg !41
  %999 = fpext bfloat %998 to float, !dbg !54
  %1000 = fsub float %999, %829, !dbg !55
  %1001 = extractelement <2 x bfloat> %997, i64 0, !dbg !41
  %1002 = fpext bfloat %1001 to float, !dbg !54
  %1003 = fsub float %1002, %829, !dbg !55
  %1004 = extractvalue { i32, i32, i32, i32 } %836, 2, !dbg !41
  %1005 = bitcast i32 %1004 to <2 x bfloat>, !dbg !41
  %1006 = extractelement <2 x bfloat> %1005, i64 1, !dbg !41
  %1007 = fpext bfloat %1006 to float, !dbg !54
  %1008 = fsub float %1007, %829, !dbg !55
  %1009 = extractelement <2 x bfloat> %1005, i64 0, !dbg !41
  %1010 = fpext bfloat %1009 to float, !dbg !54
  %1011 = fsub float %1010, %829, !dbg !55
  %1012 = extractvalue { i32, i32, i32, i32 } %836, 1, !dbg !41
  %1013 = bitcast i32 %1012 to <2 x bfloat>, !dbg !41
  %1014 = extractelement <2 x bfloat> %1013, i64 1, !dbg !41
  %1015 = fpext bfloat %1014 to float, !dbg !54
  %1016 = fsub float %1015, %829, !dbg !55
  %1017 = extractelement <2 x bfloat> %1013, i64 0, !dbg !41
  %1018 = fpext bfloat %1017 to float, !dbg !54
  %1019 = fsub float %1018, %829, !dbg !55
  %1020 = extractvalue { i32, i32, i32, i32 } %836, 0, !dbg !41
  %1021 = bitcast i32 %1020 to <2 x bfloat>, !dbg !41
  %1022 = extractelement <2 x bfloat> %1021, i64 1, !dbg !41
  %1023 = fpext bfloat %1022 to float, !dbg !54
  %1024 = fsub float %1023, %829, !dbg !55
  %1025 = extractelement <2 x bfloat> %1021, i64 0, !dbg !41
  %1026 = fpext bfloat %1025 to float, !dbg !54
  %1027 = fsub float %1026, %829, !dbg !55
  %1028 = extractvalue { i32, i32, i32, i32 } %855, 3, !dbg !50
  %1029 = bitcast i32 %1028 to <2 x bfloat>, !dbg !50
  %1030 = extractvalue { i32, i32, i32, i32 } %855, 2, !dbg !50
  %1031 = bitcast i32 %1030 to <2 x bfloat>, !dbg !50
  %1032 = extractvalue { i32, i32, i32, i32 } %855, 1, !dbg !50
  %1033 = bitcast i32 %1032 to <2 x bfloat>, !dbg !50
  %1034 = extractvalue { i32, i32, i32, i32 } %855, 0, !dbg !50
  %1035 = bitcast i32 %1034 to <2 x bfloat>, !dbg !50
  %1036 = extractvalue { i32, i32, i32, i32 } %853, 3, !dbg !48
  %1037 = extractvalue { i32, i32, i32, i32 } %853, 2, !dbg !48
  %1038 = extractvalue { i32, i32, i32, i32 } %853, 1, !dbg !48
  %1039 = extractvalue { i32, i32, i32, i32 } %853, 0, !dbg !48
  %1040 = extractvalue { i32, i32, i32, i32 } %852, 3, !dbg !48
  %1041 = extractvalue { i32, i32, i32, i32 } %852, 2, !dbg !48
  %1042 = extractvalue { i32, i32, i32, i32 } %852, 1, !dbg !48
  %1043 = extractvalue { i32, i32, i32, i32 } %852, 0, !dbg !48
  %1044 = extractvalue { i32, i32, i32, i32 } %849, 3, !dbg !46
  %1045 = bitcast i32 %1044 to <2 x bfloat>, !dbg !46
  %1046 = extractvalue { i32, i32, i32, i32 } %849, 2, !dbg !46
  %1047 = bitcast i32 %1046 to <2 x bfloat>, !dbg !46
  %1048 = extractvalue { i32, i32, i32, i32 } %849, 1, !dbg !46
  %1049 = bitcast i32 %1048 to <2 x bfloat>, !dbg !46
  %1050 = extractvalue { i32, i32, i32, i32 } %849, 0, !dbg !46
  %1051 = bitcast i32 %1050 to <2 x bfloat>, !dbg !46
  %1052 = extractvalue { i32, i32, i32, i32 } %847, 3, !dbg !44
  %1053 = extractvalue { i32, i32, i32, i32 } %847, 2, !dbg !44
  %1054 = extractvalue { i32, i32, i32, i32 } %847, 1, !dbg !44
  %1055 = extractvalue { i32, i32, i32, i32 } %847, 0, !dbg !44
  %1056 = extractvalue { i32, i32, i32, i32 } %846, 3, !dbg !44
  %1057 = extractvalue { i32, i32, i32, i32 } %846, 2, !dbg !44
  %1058 = extractvalue { i32, i32, i32, i32 } %846, 1, !dbg !44
  %1059 = extractvalue { i32, i32, i32, i32 } %846, 0, !dbg !44
  %1060 = mul i32 %19, 12288, !dbg !16
  %1061 = add i32 %1060, 9216, !dbg !16
  %1062 = add i32 %1061, %32, !dbg !17
  %1063 = add i32 %1060, 6144, !dbg !16
  %1064 = add i32 %1063, %32, !dbg !17
  %1065 = or disjoint i32 %1060, 3072, !dbg !16
  %1066 = add i32 %1065, %32, !dbg !17
  %1067 = or disjoint i32 %32, %1060, !dbg !17
  %1068 = and i32 %21, 3, !dbg !11
  %1069 = or disjoint i32 %20, %1068, !dbg !12
  %1070 = icmp slt i32 %1069, 4112, !dbg !13
  %1071 = fmul float %1027, %.0.i83, !dbg !56
  %1072 = fmul float %1024, %.0.i83, !dbg !56
  %1073 = fmul float %1019, %.0.i83, !dbg !56
  %1074 = fmul float %1016, %.0.i83, !dbg !56
  %1075 = fmul float %1011, %.0.i83, !dbg !56
  %1076 = fmul float %1008, %.0.i83, !dbg !56
  %1077 = fmul float %1003, %.0.i83, !dbg !56
  %1078 = fmul float %1000, %.0.i83, !dbg !56
  %1079 = fmul float %995, %.0.i83, !dbg !56
  %1080 = fmul float %992, %.0.i83, !dbg !56
  %1081 = fmul float %987, %.0.i83, !dbg !56
  %1082 = fmul float %984, %.0.i83, !dbg !56
  %1083 = fmul float %979, %.0.i83, !dbg !56
  %1084 = fmul float %976, %.0.i83, !dbg !56
  %1085 = fmul float %971, %.0.i83, !dbg !56
  %1086 = fmul float %968, %.0.i83, !dbg !56
  %1087 = fmul float %963, %.0.i131, !dbg !56
  %1088 = fmul float %960, %.0.i131, !dbg !56
  %1089 = fmul float %955, %.0.i131, !dbg !56
  %1090 = fmul float %952, %.0.i131, !dbg !56
  %1091 = fmul float %947, %.0.i131, !dbg !56
  %1092 = fmul float %944, %.0.i131, !dbg !56
  %1093 = fmul float %939, %.0.i131, !dbg !56
  %1094 = fmul float %936, %.0.i131, !dbg !56
  %1095 = fmul float %931, %.0.i131, !dbg !56
  %1096 = fmul float %928, %.0.i131, !dbg !56
  %1097 = fmul float %923, %.0.i131, !dbg !56
  %1098 = fmul float %920, %.0.i131, !dbg !56
  %1099 = fmul float %915, %.0.i131, !dbg !56
  %1100 = fmul float %912, %.0.i131, !dbg !56
  %1101 = fmul float %907, %.0.i131, !dbg !56
  %1102 = fmul float %904, %.0.i131, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1103 = and i32 %34, 8176, !dbg !56
  %1104 = lshr i32 %34, 10, !dbg !56
  %1105 = and i32 %1104, 4, !dbg !56
  %1106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1105, !dbg !56
  %1107 = getelementptr float, ptr addrspace(3) %1106, i32 %1103, !dbg !56
  %1108 = bitcast float %1071 to i32, !dbg !56
  %1109 = bitcast float %1072 to i32, !dbg !56
  %1110 = bitcast float %1073 to i32, !dbg !56
  %1111 = bitcast float %1074 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1107, i32 %1108, i32 %1109, i32 %1110, i32 %1111, i1 true) #5, !dbg !56
  %1112 = or disjoint i32 %1103, 4, !dbg !56
  %1113 = getelementptr float, ptr addrspace(3) %1106, i32 %1112, !dbg !56
  %1114 = bitcast float %1075 to i32, !dbg !56
  %1115 = bitcast float %1076 to i32, !dbg !56
  %1116 = bitcast float %1077 to i32, !dbg !56
  %1117 = bitcast float %1078 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1113, i32 %1114, i32 %1115, i32 %1116, i32 %1117, i1 true) #5, !dbg !56
  %1118 = or disjoint i32 %1103, 8, !dbg !56
  %1119 = getelementptr float, ptr addrspace(3) %1106, i32 %1118, !dbg !56
  %1120 = bitcast float %1079 to i32, !dbg !56
  %1121 = bitcast float %1080 to i32, !dbg !56
  %1122 = bitcast float %1081 to i32, !dbg !56
  %1123 = bitcast float %1082 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1119, i32 %1120, i32 %1121, i32 %1122, i32 %1123, i1 true) #5, !dbg !56
  %1124 = or disjoint i32 %1103, 12, !dbg !56
  %1125 = getelementptr float, ptr addrspace(3) %1106, i32 %1124, !dbg !56
  %1126 = bitcast float %1083 to i32, !dbg !56
  %1127 = bitcast float %1084 to i32, !dbg !56
  %1128 = bitcast float %1085 to i32, !dbg !56
  %1129 = bitcast float %1086 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1125, i32 %1126, i32 %1127, i32 %1128, i32 %1129, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1130 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32, !dbg !56
  %1131 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 4, !dbg !56
  %1132 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 8, !dbg !56
  %1133 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 12, !dbg !56
  %1134 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %33, !dbg !56
  %1135 = getelementptr inbounds nuw i8, ptr addrspace(3) %1134, i32 4, !dbg !56
  %1136 = getelementptr inbounds nuw i8, ptr addrspace(3) %1134, i32 8, !dbg !56
  %1137 = getelementptr inbounds nuw i8, ptr addrspace(3) %1134, i32 12, !dbg !56
  %1138 = or disjoint i32 %32, 4100, !dbg !56
  %1139 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1138, !dbg !56
  %1140 = load float, ptr addrspace(3) %1139, align 16, !dbg !56
  %1141 = getelementptr inbounds nuw i8, ptr addrspace(3) %1139, i32 4, !dbg !56
  %1142 = load float, ptr addrspace(3) %1141, align 4, !dbg !56
  %1143 = getelementptr inbounds nuw i8, ptr addrspace(3) %1139, i32 8, !dbg !56
  %1144 = load float, ptr addrspace(3) %1143, align 8, !dbg !56
  %1145 = getelementptr inbounds nuw i8, ptr addrspace(3) %1139, i32 12, !dbg !56
  %1146 = load float, ptr addrspace(3) %1145, align 4, !dbg !56
  %1147 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 16416, !dbg !56
  %1148 = load float, ptr addrspace(3) %1147, align 16, !dbg !56
  %1149 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 16420, !dbg !56
  %1150 = load float, ptr addrspace(3) %1149, align 4, !dbg !56
  %1151 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 16424, !dbg !56
  %1152 = load float, ptr addrspace(3) %1151, align 8, !dbg !56
  %1153 = getelementptr inbounds nuw i8, ptr addrspace(3) %1130, i32 16428, !dbg !56
  %1154 = load float, ptr addrspace(3) %1153, align 4, !dbg !56
  %1155 = bitcast float %1087 to i32, !dbg !56
  %1156 = bitcast float %1088 to i32, !dbg !56
  %1157 = bitcast float %1089 to i32, !dbg !56
  %1158 = bitcast float %1090 to i32, !dbg !56
  %1159 = bitcast float %1091 to i32, !dbg !56
  %1160 = bitcast float %1092 to i32, !dbg !56
  %1161 = bitcast float %1093 to i32, !dbg !56
  %1162 = bitcast float %1094 to i32, !dbg !56
  %1163 = bitcast float %1095 to i32, !dbg !56
  %1164 = bitcast float %1096 to i32, !dbg !56
  %1165 = bitcast float %1097 to i32, !dbg !56
  %1166 = bitcast float %1098 to i32, !dbg !56
  %1167 = bitcast float %1099 to i32, !dbg !56
  %1168 = bitcast float %1100 to i32, !dbg !56
  %1169 = bitcast float %1101 to i32, !dbg !56
  %1170 = bitcast float %1102 to i32, !dbg !56
  %1171 = sext i32 %1067 to i64, !dbg !57
  %1172 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1171, !dbg !57
  %1173 = sext i32 %1066 to i64, !dbg !57
  %1174 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1173, !dbg !57
  %1175 = sext i32 %1064 to i64, !dbg !57
  %1176 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1175, !dbg !57
  %1177 = sext i32 %1062 to i64, !dbg !57
  %1178 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1177, !dbg !57
  %1179 = getelementptr bfloat, ptr addrspace(1) %3, i64 %45, !dbg !57
  %1180 = getelementptr bfloat, ptr addrspace(1) %3, i64 %47, !dbg !57
  %1181 = getelementptr bfloat, ptr addrspace(1) %3, i64 %49, !dbg !57
  %1182 = getelementptr bfloat, ptr addrspace(1) %3, i64 %51, !dbg !57
  %1183 = fpext <2 x bfloat> %1035 to <2 x float>, !dbg !58
  %1184 = insertelement <2 x i32> poison, i32 %1043, i64 0, !dbg !48
  %1185 = insertelement <2 x i32> %1184, i32 %1042, i64 1, !dbg !48
  %1186 = bitcast <2 x i32> %1185 to <2 x float>, !dbg !48
  %1187 = fpext <2 x bfloat> %1051 to <2 x float>, !dbg !59
  %1188 = insertelement <2 x i32> poison, i32 %1059, i64 0, !dbg !44
  %1189 = insertelement <2 x i32> %1188, i32 %1058, i64 1, !dbg !44
  %1190 = bitcast <2 x i32> %1189 to <2 x float>, !dbg !44
  %1191 = load <2 x float>, ptr addrspace(3) %1130, align 16, !dbg !56
  %1192 = fadd <2 x float> %1190, %1187, !dbg !60
  %1193 = fadd <2 x float> %1192, splat (float 1.000000e+00), !dbg !61
  %1194 = fmul <2 x float> %1193, %1191, !dbg !62
  %1195 = extractelement <2 x float> %1193, i64 0, !dbg !62
  %1196 = fmul float %1195, %1140, !dbg !62
  %1197 = extractelement <2 x float> %1193, i64 1, !dbg !62
  %1198 = fmul float %1197, %1142, !dbg !62
  %1199 = fadd <2 x float> %1186, %1183, !dbg !63
  %1200 = fadd <2 x float> %1199, %1194, !dbg !64
  %1201 = extractelement <2 x float> %1199, i64 0, !dbg !64
  %1202 = fadd float %1201, %1196, !dbg !64
  %1203 = extractelement <2 x float> %1199, i64 1, !dbg !64
  %1204 = fadd float %1203, %1198, !dbg !64
  %1205 = extractelement <2 x float> %1200, i64 0, !dbg !65
  %1206 = select i1 %53, float %1205, float 0x7FF0000000000000, !dbg !66
  %1207 = extractelement <2 x float> %1200, i64 1, !dbg !65
  %1208 = select i1 %53, float %1207, float 0x7FF0000000000000, !dbg !66
  %1209 = select i1 %53, float %1202, float 0x7FF0000000000000, !dbg !66
  %1210 = select i1 %53, float %1204, float 0x7FF0000000000000, !dbg !66
  %1211 = select i1 %53, float %1205, float 0xFFF0000000000000, !dbg !65
  %1212 = select i1 %53, float %1207, float 0xFFF0000000000000, !dbg !65
  %1213 = select i1 %53, float %1202, float 0xFFF0000000000000, !dbg !65
  %1214 = select i1 %53, float %1204, float 0xFFF0000000000000, !dbg !65
  %1215 = fptrunc <2 x float> %1200 to <2 x bfloat>, !dbg !67
  %1216 = fpext <2 x bfloat> %1033 to <2 x float>, !dbg !58
  %1217 = insertelement <2 x i32> poison, i32 %1041, i64 0, !dbg !48
  %1218 = insertelement <2 x i32> %1217, i32 %1040, i64 1, !dbg !48
  %1219 = bitcast <2 x i32> %1218 to <2 x float>, !dbg !48
  %1220 = fpext <2 x bfloat> %1049 to <2 x float>, !dbg !59
  %1221 = insertelement <2 x i32> poison, i32 %1057, i64 0, !dbg !44
  %1222 = insertelement <2 x i32> %1221, i32 %1056, i64 1, !dbg !44
  %1223 = bitcast <2 x i32> %1222 to <2 x float>, !dbg !44
  %1224 = load <2 x float>, ptr addrspace(3) %1132, align 8, !dbg !56
  %1225 = fadd <2 x float> %1223, %1220, !dbg !60
  %1226 = fadd <2 x float> %1225, splat (float 1.000000e+00), !dbg !61
  %1227 = fmul <2 x float> %1226, %1224, !dbg !62
  %1228 = extractelement <2 x float> %1226, i64 0, !dbg !62
  %1229 = fmul float %1228, %1144, !dbg !62
  %1230 = extractelement <2 x float> %1226, i64 1, !dbg !62
  %1231 = fmul float %1230, %1146, !dbg !62
  %1232 = fadd <2 x float> %1219, %1216, !dbg !63
  %1233 = fadd <2 x float> %1232, %1227, !dbg !64
  %1234 = extractelement <2 x float> %1232, i64 0, !dbg !64
  %1235 = fadd float %1234, %1229, !dbg !64
  %1236 = extractelement <2 x float> %1232, i64 1, !dbg !64
  %1237 = fadd float %1236, %1231, !dbg !64
  %1238 = extractelement <2 x float> %1233, i64 0, !dbg !65
  %1239 = select i1 %53, float %1238, float 0x7FF0000000000000, !dbg !66
  %1240 = extractelement <2 x float> %1233, i64 1, !dbg !65
  %1241 = select i1 %53, float %1240, float 0x7FF0000000000000, !dbg !66
  %1242 = select i1 %53, float %1235, float 0x7FF0000000000000, !dbg !66
  %1243 = select i1 %53, float %1237, float 0x7FF0000000000000, !dbg !66
  %1244 = select i1 %53, float %1238, float 0xFFF0000000000000, !dbg !65
  %1245 = select i1 %53, float %1240, float 0xFFF0000000000000, !dbg !65
  %1246 = select i1 %53, float %1235, float 0xFFF0000000000000, !dbg !65
  %1247 = select i1 %53, float %1237, float 0xFFF0000000000000, !dbg !65
  %1248 = fptrunc <2 x float> %1233 to <2 x bfloat>, !dbg !67
  %1249 = fpext <2 x bfloat> %1031 to <2 x float>, !dbg !58
  %1250 = insertelement <2 x i32> poison, i32 %1039, i64 0, !dbg !48
  %1251 = insertelement <2 x i32> %1250, i32 %1038, i64 1, !dbg !48
  %1252 = bitcast <2 x i32> %1251 to <2 x float>, !dbg !48
  %1253 = fpext <2 x bfloat> %1047 to <2 x float>, !dbg !59
  %1254 = insertelement <2 x i32> poison, i32 %1055, i64 0, !dbg !44
  %1255 = insertelement <2 x i32> %1254, i32 %1054, i64 1, !dbg !44
  %1256 = bitcast <2 x i32> %1255 to <2 x float>, !dbg !44
  %1257 = load <2 x float>, ptr addrspace(3) %1134, align 16, !dbg !56
  %1258 = fadd <2 x float> %1256, %1253, !dbg !60
  %1259 = fadd <2 x float> %1258, splat (float 1.000000e+00), !dbg !61
  %1260 = fmul <2 x float> %1259, %1257, !dbg !62
  %1261 = extractelement <2 x float> %1259, i64 0, !dbg !62
  %1262 = fmul float %1261, %1148, !dbg !62
  %1263 = extractelement <2 x float> %1259, i64 1, !dbg !62
  %1264 = fmul float %1263, %1150, !dbg !62
  %1265 = fadd <2 x float> %1252, %1249, !dbg !63
  %1266 = fadd <2 x float> %1265, %1260, !dbg !64
  %1267 = extractelement <2 x float> %1265, i64 0, !dbg !64
  %1268 = fadd float %1267, %1262, !dbg !64
  %1269 = extractelement <2 x float> %1265, i64 1, !dbg !64
  %1270 = fadd float %1269, %1264, !dbg !64
  %1271 = extractelement <2 x float> %1266, i64 0, !dbg !65
  %1272 = select i1 %53, float %1271, float 0x7FF0000000000000, !dbg !66
  %1273 = extractelement <2 x float> %1266, i64 1, !dbg !65
  %1274 = select i1 %53, float %1273, float 0x7FF0000000000000, !dbg !66
  %1275 = select i1 %53, float %1268, float 0x7FF0000000000000, !dbg !66
  %1276 = select i1 %53, float %1270, float 0x7FF0000000000000, !dbg !66
  %1277 = select i1 %53, float %1271, float 0xFFF0000000000000, !dbg !65
  %1278 = select i1 %53, float %1273, float 0xFFF0000000000000, !dbg !65
  %1279 = select i1 %53, float %1268, float 0xFFF0000000000000, !dbg !65
  %1280 = select i1 %53, float %1270, float 0xFFF0000000000000, !dbg !65
  %1281 = fptrunc <2 x float> %1266 to <2 x bfloat>, !dbg !67
  %1282 = fpext <2 x bfloat> %1029 to <2 x float>, !dbg !58
  %1283 = insertelement <2 x i32> poison, i32 %1037, i64 0, !dbg !48
  %1284 = insertelement <2 x i32> %1283, i32 %1036, i64 1, !dbg !48
  %1285 = bitcast <2 x i32> %1284 to <2 x float>, !dbg !48
  %1286 = fpext <2 x bfloat> %1045 to <2 x float>, !dbg !59
  %1287 = insertelement <2 x i32> poison, i32 %1053, i64 0, !dbg !44
  %1288 = insertelement <2 x i32> %1287, i32 %1052, i64 1, !dbg !44
  %1289 = bitcast <2 x i32> %1288 to <2 x float>, !dbg !44
  %1290 = load <2 x float>, ptr addrspace(3) %1136, align 8, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1107, i32 %1155, i32 %1156, i32 %1157, i32 %1158, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1113, i32 %1159, i32 %1160, i32 %1161, i32 %1162, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1119, i32 %1163, i32 %1164, i32 %1165, i32 %1166, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1125, i32 %1167, i32 %1168, i32 %1169, i32 %1170, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1291 = load float, ptr addrspace(3) %1130, align 16, !dbg !56
  %1292 = load float, ptr addrspace(3) %1131, align 4, !dbg !56
  %1293 = load float, ptr addrspace(3) %1132, align 8, !dbg !56
  %1294 = load float, ptr addrspace(3) %1133, align 4, !dbg !56
  %1295 = load float, ptr addrspace(3) %1134, align 16, !dbg !56
  %1296 = load float, ptr addrspace(3) %1135, align 4, !dbg !56
  %1297 = load float, ptr addrspace(3) %1136, align 8, !dbg !56
  %1298 = load float, ptr addrspace(3) %1137, align 4, !dbg !56
  %1299 = load float, ptr addrspace(3) %1139, align 16, !dbg !56
  %1300 = load float, ptr addrspace(3) %1141, align 4, !dbg !56
  %1301 = load float, ptr addrspace(3) %1143, align 8, !dbg !56
  %1302 = load float, ptr addrspace(3) %1145, align 4, !dbg !56
  %1303 = load float, ptr addrspace(3) %1147, align 16, !dbg !56
  %1304 = load float, ptr addrspace(3) %1149, align 4, !dbg !56
  %1305 = load float, ptr addrspace(3) %1151, align 8, !dbg !56
  %1306 = load float, ptr addrspace(3) %1153, align 4, !dbg !56
  %1307 = fadd <2 x float> %1289, %1286, !dbg !60
  %1308 = fadd <2 x float> %1307, splat (float 1.000000e+00), !dbg !61
  %1309 = fmul <2 x float> %1308, %1290, !dbg !62
  %1310 = extractelement <2 x float> %1308, i64 0, !dbg !62
  %1311 = fmul float %1310, %1152, !dbg !62
  %1312 = extractelement <2 x float> %1308, i64 1, !dbg !62
  %1313 = fmul float %1312, %1154, !dbg !62
  %1314 = fmul float %1195, %1291, !dbg !62
  %1315 = fmul float %1197, %1292, !dbg !62
  %1316 = fmul float %1228, %1293, !dbg !62
  %1317 = fmul float %1230, %1294, !dbg !62
  %1318 = fmul float %1261, %1295, !dbg !62
  %1319 = fmul float %1263, %1296, !dbg !62
  %1320 = fmul float %1310, %1297, !dbg !62
  %1321 = fmul float %1312, %1298, !dbg !62
  %1322 = fmul float %1195, %1299, !dbg !62
  %1323 = fmul float %1197, %1300, !dbg !62
  %1324 = fmul float %1228, %1301, !dbg !62
  %1325 = fmul float %1230, %1302, !dbg !62
  %1326 = fmul float %1261, %1303, !dbg !62
  %1327 = fmul float %1263, %1304, !dbg !62
  %1328 = fmul float %1310, %1305, !dbg !62
  %1329 = fmul float %1312, %1306, !dbg !62
  %1330 = fadd <2 x float> %1285, %1282, !dbg !63
  %1331 = fadd <2 x float> %1330, %1309, !dbg !64
  %1332 = extractelement <2 x float> %1330, i64 0, !dbg !64
  %1333 = fadd float %1332, %1311, !dbg !64
  %1334 = extractelement <2 x float> %1330, i64 1, !dbg !64
  %1335 = fadd float %1334, %1313, !dbg !64
  %1336 = fadd float %1201, %1314, !dbg !64
  %1337 = fadd float %1203, %1315, !dbg !64
  %1338 = fadd float %1234, %1316, !dbg !64
  %1339 = fadd float %1236, %1317, !dbg !64
  %1340 = fadd float %1267, %1318, !dbg !64
  %1341 = fadd float %1269, %1319, !dbg !64
  %1342 = fadd float %1332, %1320, !dbg !64
  %1343 = fadd float %1334, %1321, !dbg !64
  %1344 = fadd float %1201, %1322, !dbg !64
  %1345 = fadd float %1203, %1323, !dbg !64
  %1346 = fadd float %1234, %1324, !dbg !64
  %1347 = fadd float %1236, %1325, !dbg !64
  %1348 = fadd float %1267, %1326, !dbg !64
  %1349 = fadd float %1269, %1327, !dbg !64
  %1350 = fadd float %1332, %1328, !dbg !64
  %1351 = fadd float %1334, %1329, !dbg !64
  %1352 = extractelement <2 x float> %1331, i64 0, !dbg !65
  %1353 = select i1 %53, float %1352, float 0x7FF0000000000000, !dbg !66
  %1354 = extractelement <2 x float> %1331, i64 1, !dbg !65
  %1355 = select i1 %53, float %1354, float 0x7FF0000000000000, !dbg !66
  %1356 = select i1 %53, float %1333, float 0x7FF0000000000000, !dbg !66
  %1357 = select i1 %53, float %1335, float 0x7FF0000000000000, !dbg !66
  %1358 = select i1 %53, float %1336, float 0x7FF0000000000000, !dbg !66
  %1359 = select i1 %53, float %1337, float 0x7FF0000000000000, !dbg !66
  %1360 = select i1 %53, float %1338, float 0x7FF0000000000000, !dbg !66
  %1361 = select i1 %53, float %1339, float 0x7FF0000000000000, !dbg !66
  %1362 = select i1 %53, float %1340, float 0x7FF0000000000000, !dbg !66
  %1363 = select i1 %53, float %1341, float 0x7FF0000000000000, !dbg !66
  %1364 = select i1 %53, float %1342, float 0x7FF0000000000000, !dbg !66
  %1365 = select i1 %53, float %1343, float 0x7FF0000000000000, !dbg !66
  %1366 = select i1 %53, float %1344, float 0x7FF0000000000000, !dbg !66
  %1367 = select i1 %53, float %1345, float 0x7FF0000000000000, !dbg !66
  %1368 = select i1 %53, float %1346, float 0x7FF0000000000000, !dbg !66
  %1369 = select i1 %53, float %1347, float 0x7FF0000000000000, !dbg !66
  %1370 = select i1 %53, float %1348, float 0x7FF0000000000000, !dbg !66
  %1371 = select i1 %53, float %1349, float 0x7FF0000000000000, !dbg !66
  %1372 = select i1 %53, float %1350, float 0x7FF0000000000000, !dbg !66
  %1373 = select i1 %53, float %1351, float 0x7FF0000000000000, !dbg !66
  %1374 = select i1 %53, float %1352, float 0xFFF0000000000000, !dbg !65
  %1375 = select i1 %53, float %1354, float 0xFFF0000000000000, !dbg !65
  %1376 = select i1 %53, float %1333, float 0xFFF0000000000000, !dbg !65
  %1377 = select i1 %53, float %1335, float 0xFFF0000000000000, !dbg !65
  %1378 = select i1 %53, float %1336, float 0xFFF0000000000000, !dbg !65
  %1379 = select i1 %53, float %1337, float 0xFFF0000000000000, !dbg !65
  %1380 = select i1 %53, float %1338, float 0xFFF0000000000000, !dbg !65
  %1381 = select i1 %53, float %1339, float 0xFFF0000000000000, !dbg !65
  %1382 = select i1 %53, float %1340, float 0xFFF0000000000000, !dbg !65
  %1383 = select i1 %53, float %1341, float 0xFFF0000000000000, !dbg !65
  %1384 = select i1 %53, float %1342, float 0xFFF0000000000000, !dbg !65
  %1385 = select i1 %53, float %1343, float 0xFFF0000000000000, !dbg !65
  %1386 = select i1 %53, float %1344, float 0xFFF0000000000000, !dbg !65
  %1387 = select i1 %53, float %1345, float 0xFFF0000000000000, !dbg !65
  %1388 = select i1 %53, float %1346, float 0xFFF0000000000000, !dbg !65
  %1389 = select i1 %53, float %1347, float 0xFFF0000000000000, !dbg !65
  %1390 = select i1 %53, float %1348, float 0xFFF0000000000000, !dbg !65
  %1391 = select i1 %53, float %1349, float 0xFFF0000000000000, !dbg !65
  %1392 = select i1 %53, float %1350, float 0xFFF0000000000000, !dbg !65
  %1393 = select i1 %53, float %1351, float 0xFFF0000000000000, !dbg !65
  %1394 = fptrunc <2 x float> %1331 to <2 x bfloat>, !dbg !67
  %1395 = fptrunc float %1202 to bfloat, !dbg !67
  %1396 = fptrunc float %1204 to bfloat, !dbg !67
  %1397 = fptrunc float %1235 to bfloat, !dbg !67
  %1398 = fptrunc float %1237 to bfloat, !dbg !67
  %1399 = fptrunc float %1268 to bfloat, !dbg !67
  %1400 = fptrunc float %1270 to bfloat, !dbg !67
  %1401 = fptrunc float %1333 to bfloat, !dbg !67
  %1402 = fptrunc float %1335 to bfloat, !dbg !67
  %1403 = fptrunc float %1336 to bfloat, !dbg !67
  %1404 = fptrunc float %1337 to bfloat, !dbg !67
  %1405 = fptrunc float %1338 to bfloat, !dbg !67
  %1406 = fptrunc float %1339 to bfloat, !dbg !67
  %1407 = fptrunc float %1340 to bfloat, !dbg !67
  %1408 = fptrunc float %1341 to bfloat, !dbg !67
  %1409 = fptrunc float %1342 to bfloat, !dbg !67
  %1410 = fptrunc float %1343 to bfloat, !dbg !67
  %1411 = fptrunc float %1344 to bfloat, !dbg !67
  %1412 = fptrunc float %1345 to bfloat, !dbg !67
  %1413 = fptrunc float %1346 to bfloat, !dbg !67
  %1414 = fptrunc float %1347 to bfloat, !dbg !67
  %1415 = fptrunc float %1348 to bfloat, !dbg !67
  %1416 = fptrunc float %1349 to bfloat, !dbg !67
  %1417 = fptrunc float %1350 to bfloat, !dbg !67
  %1418 = fptrunc float %1351 to bfloat, !dbg !67
  %1419 = bitcast <2 x bfloat> %1215 to i32, !dbg !67
  %1420 = bitcast <2 x bfloat> %1248 to i32, !dbg !67
  %1421 = bitcast <2 x bfloat> %1281 to i32, !dbg !67
  %1422 = bitcast <2 x bfloat> %1394 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1419, i32 %1420, i32 %1421, i32 %1422, ptr addrspace(1) %1172, i1 %53) #5, !dbg !67
  %1423 = insertelement <2 x bfloat> poison, bfloat %1395, i64 0, !dbg !67
  %1424 = insertelement <2 x bfloat> %1423, bfloat %1396, i64 1, !dbg !67
  %1425 = bitcast <2 x bfloat> %1424 to i32, !dbg !67
  %1426 = insertelement <2 x bfloat> poison, bfloat %1397, i64 0, !dbg !67
  %1427 = insertelement <2 x bfloat> %1426, bfloat %1398, i64 1, !dbg !67
  %1428 = bitcast <2 x bfloat> %1427 to i32, !dbg !67
  %1429 = insertelement <2 x bfloat> poison, bfloat %1399, i64 0, !dbg !67
  %1430 = insertelement <2 x bfloat> %1429, bfloat %1400, i64 1, !dbg !67
  %1431 = bitcast <2 x bfloat> %1430 to i32, !dbg !67
  %1432 = insertelement <2 x bfloat> poison, bfloat %1401, i64 0, !dbg !67
  %1433 = insertelement <2 x bfloat> %1432, bfloat %1402, i64 1, !dbg !67
  %1434 = bitcast <2 x bfloat> %1433 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1425, i32 %1428, i32 %1431, i32 %1434, ptr addrspace(1) %1174, i1 %53) #5, !dbg !67
  %1435 = insertelement <2 x bfloat> poison, bfloat %1403, i64 0, !dbg !67
  %1436 = insertelement <2 x bfloat> %1435, bfloat %1404, i64 1, !dbg !67
  %1437 = bitcast <2 x bfloat> %1436 to i32, !dbg !67
  %1438 = insertelement <2 x bfloat> poison, bfloat %1405, i64 0, !dbg !67
  %1439 = insertelement <2 x bfloat> %1438, bfloat %1406, i64 1, !dbg !67
  %1440 = bitcast <2 x bfloat> %1439 to i32, !dbg !67
  %1441 = insertelement <2 x bfloat> poison, bfloat %1407, i64 0, !dbg !67
  %1442 = insertelement <2 x bfloat> %1441, bfloat %1408, i64 1, !dbg !67
  %1443 = bitcast <2 x bfloat> %1442 to i32, !dbg !67
  %1444 = insertelement <2 x bfloat> poison, bfloat %1409, i64 0, !dbg !67
  %1445 = insertelement <2 x bfloat> %1444, bfloat %1410, i64 1, !dbg !67
  %1446 = bitcast <2 x bfloat> %1445 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1437, i32 %1440, i32 %1443, i32 %1446, ptr addrspace(1) %1176, i1 %53) #5, !dbg !67
  %1447 = insertelement <2 x bfloat> poison, bfloat %1411, i64 0, !dbg !67
  %1448 = insertelement <2 x bfloat> %1447, bfloat %1412, i64 1, !dbg !67
  %1449 = bitcast <2 x bfloat> %1448 to i32, !dbg !67
  %1450 = insertelement <2 x bfloat> poison, bfloat %1413, i64 0, !dbg !67
  %1451 = insertelement <2 x bfloat> %1450, bfloat %1414, i64 1, !dbg !67
  %1452 = bitcast <2 x bfloat> %1451 to i32, !dbg !67
  %1453 = insertelement <2 x bfloat> poison, bfloat %1415, i64 0, !dbg !67
  %1454 = insertelement <2 x bfloat> %1453, bfloat %1416, i64 1, !dbg !67
  %1455 = bitcast <2 x bfloat> %1454 to i32, !dbg !67
  %1456 = insertelement <2 x bfloat> poison, bfloat %1417, i64 0, !dbg !67
  %1457 = insertelement <2 x bfloat> %1456, bfloat %1418, i64 1, !dbg !67
  %1458 = bitcast <2 x bfloat> %1457 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1449, i32 %1452, i32 %1455, i32 %1458, ptr addrspace(1) %1178, i1 %53) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1459 = fcmp olt float %1206, %1208, !dbg !70
  %1460 = fcmp uno float %1206, 0.000000e+00, !dbg !71
  %1461 = or i1 %1459, %1460, !dbg !72
  %1462 = select i1 %1461, float %1206, float %1208, !dbg !73
  %1463 = fcmp olt float %1462, %1239, !dbg !70
  %1464 = fcmp uno float %1462, 0.000000e+00, !dbg !71
  %1465 = or i1 %1463, %1464, !dbg !72
  %1466 = select i1 %1465, float %1462, float %1239, !dbg !73
  %1467 = fcmp olt float %1466, %1241, !dbg !70
  %1468 = fcmp uno float %1466, 0.000000e+00, !dbg !71
  %1469 = or i1 %1467, %1468, !dbg !72
  %1470 = select i1 %1469, float %1466, float %1241, !dbg !73
  %1471 = fcmp olt float %1470, %1272, !dbg !70
  %1472 = fcmp uno float %1470, 0.000000e+00, !dbg !71
  %1473 = or i1 %1471, %1472, !dbg !72
  %1474 = select i1 %1473, float %1470, float %1272, !dbg !73
  %1475 = fcmp olt float %1474, %1274, !dbg !70
  %1476 = fcmp uno float %1474, 0.000000e+00, !dbg !71
  %1477 = or i1 %1475, %1476, !dbg !72
  %1478 = select i1 %1477, float %1474, float %1274, !dbg !73
  %1479 = fcmp olt float %1478, %1353, !dbg !70
  %1480 = fcmp uno float %1478, 0.000000e+00, !dbg !71
  %1481 = or i1 %1479, %1480, !dbg !72
  %1482 = select i1 %1481, float %1478, float %1353, !dbg !73
  %1483 = fcmp olt float %1482, %1355, !dbg !70
  %1484 = fcmp uno float %1482, 0.000000e+00, !dbg !71
  %1485 = or i1 %1483, %1484, !dbg !72
  %1486 = select i1 %1485, float %1482, float %1355, !dbg !73
  %1487 = fcmp olt float %1209, %1210, !dbg !70
  %1488 = fcmp uno float %1209, 0.000000e+00, !dbg !71
  %1489 = or i1 %1487, %1488, !dbg !72
  %1490 = select i1 %1489, float %1209, float %1210, !dbg !73
  %1491 = fcmp olt float %1490, %1242, !dbg !70
  %1492 = fcmp uno float %1490, 0.000000e+00, !dbg !71
  %1493 = or i1 %1491, %1492, !dbg !72
  %1494 = select i1 %1493, float %1490, float %1242, !dbg !73
  %1495 = fcmp olt float %1494, %1243, !dbg !70
  %1496 = fcmp uno float %1494, 0.000000e+00, !dbg !71
  %1497 = or i1 %1495, %1496, !dbg !72
  %1498 = select i1 %1497, float %1494, float %1243, !dbg !73
  %1499 = fcmp olt float %1498, %1275, !dbg !70
  %1500 = fcmp uno float %1498, 0.000000e+00, !dbg !71
  %1501 = or i1 %1499, %1500, !dbg !72
  %1502 = select i1 %1501, float %1498, float %1275, !dbg !73
  %1503 = fcmp olt float %1502, %1276, !dbg !70
  %1504 = fcmp uno float %1502, 0.000000e+00, !dbg !71
  %1505 = or i1 %1503, %1504, !dbg !72
  %1506 = select i1 %1505, float %1502, float %1276, !dbg !73
  %1507 = fcmp olt float %1506, %1356, !dbg !70
  %1508 = fcmp uno float %1506, 0.000000e+00, !dbg !71
  %1509 = or i1 %1507, %1508, !dbg !72
  %1510 = select i1 %1509, float %1506, float %1356, !dbg !73
  %1511 = fcmp olt float %1510, %1357, !dbg !70
  %1512 = fcmp uno float %1510, 0.000000e+00, !dbg !71
  %1513 = or i1 %1511, %1512, !dbg !72
  %1514 = select i1 %1513, float %1510, float %1357, !dbg !73
  %1515 = fcmp olt float %1358, %1359, !dbg !70
  %1516 = fcmp uno float %1358, 0.000000e+00, !dbg !71
  %1517 = or i1 %1515, %1516, !dbg !72
  %1518 = select i1 %1517, float %1358, float %1359, !dbg !73
  %1519 = fcmp olt float %1518, %1360, !dbg !70
  %1520 = fcmp uno float %1518, 0.000000e+00, !dbg !71
  %1521 = or i1 %1519, %1520, !dbg !72
  %1522 = select i1 %1521, float %1518, float %1360, !dbg !73
  %1523 = fcmp olt float %1522, %1361, !dbg !70
  %1524 = fcmp uno float %1522, 0.000000e+00, !dbg !71
  %1525 = or i1 %1523, %1524, !dbg !72
  %1526 = select i1 %1525, float %1522, float %1361, !dbg !73
  %1527 = fcmp olt float %1526, %1362, !dbg !70
  %1528 = fcmp uno float %1526, 0.000000e+00, !dbg !71
  %1529 = or i1 %1527, %1528, !dbg !72
  %1530 = select i1 %1529, float %1526, float %1362, !dbg !73
  %1531 = fcmp olt float %1530, %1363, !dbg !70
  %1532 = fcmp uno float %1530, 0.000000e+00, !dbg !71
  %1533 = or i1 %1531, %1532, !dbg !72
  %1534 = select i1 %1533, float %1530, float %1363, !dbg !73
  %1535 = fcmp olt float %1534, %1364, !dbg !70
  %1536 = fcmp uno float %1534, 0.000000e+00, !dbg !71
  %1537 = or i1 %1535, %1536, !dbg !72
  %1538 = select i1 %1537, float %1534, float %1364, !dbg !73
  %1539 = fcmp olt float %1538, %1365, !dbg !70
  %1540 = fcmp uno float %1538, 0.000000e+00, !dbg !71
  %1541 = or i1 %1539, %1540, !dbg !72
  %1542 = select i1 %1541, float %1538, float %1365, !dbg !73
  %1543 = fcmp olt float %1366, %1367, !dbg !70
  %1544 = fcmp uno float %1366, 0.000000e+00, !dbg !71
  %1545 = or i1 %1543, %1544, !dbg !72
  %1546 = select i1 %1545, float %1366, float %1367, !dbg !73
  %1547 = fcmp olt float %1546, %1368, !dbg !70
  %1548 = fcmp uno float %1546, 0.000000e+00, !dbg !71
  %1549 = or i1 %1547, %1548, !dbg !72
  %1550 = select i1 %1549, float %1546, float %1368, !dbg !73
  %1551 = fcmp olt float %1550, %1369, !dbg !70
  %1552 = fcmp uno float %1550, 0.000000e+00, !dbg !71
  %1553 = or i1 %1551, %1552, !dbg !72
  %1554 = select i1 %1553, float %1550, float %1369, !dbg !73
  %1555 = fcmp olt float %1554, %1370, !dbg !70
  %1556 = fcmp uno float %1554, 0.000000e+00, !dbg !71
  %1557 = or i1 %1555, %1556, !dbg !72
  %1558 = select i1 %1557, float %1554, float %1370, !dbg !73
  %1559 = fcmp olt float %1558, %1371, !dbg !70
  %1560 = fcmp uno float %1558, 0.000000e+00, !dbg !71
  %1561 = or i1 %1559, %1560, !dbg !72
  %1562 = select i1 %1561, float %1558, float %1371, !dbg !73
  %1563 = fcmp olt float %1562, %1372, !dbg !70
  %1564 = fcmp uno float %1562, 0.000000e+00, !dbg !71
  %1565 = or i1 %1563, %1564, !dbg !72
  %1566 = select i1 %1565, float %1562, float %1372, !dbg !73
  %1567 = fcmp olt float %1566, %1373, !dbg !70
  %1568 = fcmp uno float %1566, 0.000000e+00, !dbg !71
  %1569 = or i1 %1567, %1568, !dbg !72
  %1570 = select i1 %1569, float %1566, float %1373, !dbg !73
  %1571 = bitcast float %1486 to i32, !dbg !68
  %1572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1571, i32 16, i32 31), !dbg !68
  %1573 = bitcast i32 %1572 to float, !dbg !68
  %1574 = fcmp olt float %1486, %1573, !dbg !70
  %1575 = fcmp uno float %1486, 0.000000e+00, !dbg !71
  %1576 = or i1 %1574, %1575, !dbg !72
  %1577 = select i1 %1576, float %1486, float %1573, !dbg !73
  %1578 = bitcast float %1577 to i32, !dbg !68
  %1579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1578, i32 8, i32 31), !dbg !68
  %1580 = bitcast i32 %1579 to float, !dbg !68
  %1581 = fcmp olt float %1577, %1580, !dbg !70
  %1582 = fcmp uno float %1577, 0.000000e+00, !dbg !71
  %1583 = or i1 %1581, %1582, !dbg !72
  %1584 = select i1 %1583, float %1577, float %1580, !dbg !73
  %1585 = bitcast float %1584 to i32, !dbg !68
  %1586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1585, i32 4, i32 31), !dbg !68
  %1587 = bitcast i32 %1586 to float, !dbg !68
  %1588 = fcmp olt float %1584, %1587, !dbg !70
  %1589 = fcmp uno float %1584, 0.000000e+00, !dbg !71
  %1590 = or i1 %1588, %1589, !dbg !72
  %1591 = select i1 %1590, float %1584, float %1587, !dbg !73
  %1592 = bitcast float %1591 to i32, !dbg !68
  %1593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1592, i32 2, i32 31), !dbg !68
  %1594 = bitcast i32 %1593 to float, !dbg !68
  %1595 = fcmp olt float %1591, %1594, !dbg !70
  %1596 = fcmp uno float %1591, 0.000000e+00, !dbg !71
  %1597 = or i1 %1595, %1596, !dbg !72
  %1598 = select i1 %1597, float %1591, float %1594, !dbg !73
  %1599 = bitcast float %1598 to i32, !dbg !68
  %1600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1599, i32 1, i32 31), !dbg !68
  %1601 = bitcast i32 %1600 to float, !dbg !68
  %1602 = fcmp olt float %1598, %1601, !dbg !70
  %1603 = fcmp uno float %1598, 0.000000e+00, !dbg !71
  %1604 = or i1 %1602, %1603, !dbg !72
  %1605 = bitcast float %1514 to i32, !dbg !68
  %1606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1605, i32 16, i32 31), !dbg !68
  %1607 = bitcast i32 %1606 to float, !dbg !68
  %1608 = fcmp olt float %1514, %1607, !dbg !70
  %1609 = fcmp uno float %1514, 0.000000e+00, !dbg !71
  %1610 = or i1 %1608, %1609, !dbg !72
  %1611 = select i1 %1610, float %1514, float %1607, !dbg !73
  %1612 = bitcast float %1611 to i32, !dbg !68
  %1613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1612, i32 8, i32 31), !dbg !68
  %1614 = bitcast i32 %1613 to float, !dbg !68
  %1615 = fcmp olt float %1611, %1614, !dbg !70
  %1616 = fcmp uno float %1611, 0.000000e+00, !dbg !71
  %1617 = or i1 %1615, %1616, !dbg !72
  %1618 = select i1 %1617, float %1611, float %1614, !dbg !73
  %1619 = bitcast float %1618 to i32, !dbg !68
  %1620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1619, i32 4, i32 31), !dbg !68
  %1621 = bitcast i32 %1620 to float, !dbg !68
  %1622 = fcmp olt float %1618, %1621, !dbg !70
  %1623 = fcmp uno float %1618, 0.000000e+00, !dbg !71
  %1624 = or i1 %1622, %1623, !dbg !72
  %1625 = select i1 %1624, float %1618, float %1621, !dbg !73
  %1626 = bitcast float %1625 to i32, !dbg !68
  %1627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1626, i32 2, i32 31), !dbg !68
  %1628 = bitcast i32 %1627 to float, !dbg !68
  %1629 = fcmp olt float %1625, %1628, !dbg !70
  %1630 = fcmp uno float %1625, 0.000000e+00, !dbg !71
  %1631 = or i1 %1629, %1630, !dbg !72
  %1632 = select i1 %1631, float %1625, float %1628, !dbg !73
  %1633 = bitcast float %1632 to i32, !dbg !68
  %1634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1633, i32 1, i32 31), !dbg !68
  %1635 = bitcast i32 %1634 to float, !dbg !68
  %1636 = fcmp olt float %1632, %1635, !dbg !70
  %1637 = fcmp uno float %1632, 0.000000e+00, !dbg !71
  %1638 = or i1 %1636, %1637, !dbg !72
  %1639 = bitcast float %1542 to i32, !dbg !68
  %1640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1639, i32 16, i32 31), !dbg !68
  %1641 = bitcast i32 %1640 to float, !dbg !68
  %1642 = fcmp olt float %1542, %1641, !dbg !70
  %1643 = fcmp uno float %1542, 0.000000e+00, !dbg !71
  %1644 = or i1 %1642, %1643, !dbg !72
  %1645 = select i1 %1644, float %1542, float %1641, !dbg !73
  %1646 = bitcast float %1645 to i32, !dbg !68
  %1647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1646, i32 8, i32 31), !dbg !68
  %1648 = bitcast i32 %1647 to float, !dbg !68
  %1649 = fcmp olt float %1645, %1648, !dbg !70
  %1650 = fcmp uno float %1645, 0.000000e+00, !dbg !71
  %1651 = or i1 %1649, %1650, !dbg !72
  %1652 = select i1 %1651, float %1645, float %1648, !dbg !73
  %1653 = bitcast float %1652 to i32, !dbg !68
  %1654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1653, i32 4, i32 31), !dbg !68
  %1655 = bitcast i32 %1654 to float, !dbg !68
  %1656 = fcmp olt float %1652, %1655, !dbg !70
  %1657 = fcmp uno float %1652, 0.000000e+00, !dbg !71
  %1658 = or i1 %1656, %1657, !dbg !72
  %1659 = select i1 %1658, float %1652, float %1655, !dbg !73
  %1660 = bitcast float %1659 to i32, !dbg !68
  %1661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1660, i32 2, i32 31), !dbg !68
  %1662 = bitcast i32 %1661 to float, !dbg !68
  %1663 = fcmp olt float %1659, %1662, !dbg !70
  %1664 = fcmp uno float %1659, 0.000000e+00, !dbg !71
  %1665 = or i1 %1663, %1664, !dbg !72
  %1666 = select i1 %1665, float %1659, float %1662, !dbg !73
  %1667 = bitcast float %1666 to i32, !dbg !68
  %1668 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1667, i32 1, i32 31), !dbg !68
  %1669 = bitcast i32 %1668 to float, !dbg !68
  %1670 = fcmp olt float %1666, %1669, !dbg !70
  %1671 = fcmp uno float %1666, 0.000000e+00, !dbg !71
  %1672 = or i1 %1670, %1671, !dbg !72
  %1673 = bitcast float %1570 to i32, !dbg !68
  %1674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1673, i32 16, i32 31), !dbg !68
  %1675 = bitcast i32 %1674 to float, !dbg !68
  %1676 = fcmp olt float %1570, %1675, !dbg !70
  %1677 = fcmp uno float %1570, 0.000000e+00, !dbg !71
  %1678 = or i1 %1676, %1677, !dbg !72
  %1679 = select i1 %1678, float %1570, float %1675, !dbg !73
  %1680 = bitcast float %1679 to i32, !dbg !68
  %1681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1680, i32 8, i32 31), !dbg !68
  %1682 = bitcast i32 %1681 to float, !dbg !68
  %1683 = fcmp olt float %1679, %1682, !dbg !70
  %1684 = fcmp uno float %1679, 0.000000e+00, !dbg !71
  %1685 = or i1 %1683, %1684, !dbg !72
  %1686 = select i1 %1685, float %1679, float %1682, !dbg !73
  %1687 = bitcast float %1686 to i32, !dbg !68
  %1688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1687, i32 4, i32 31), !dbg !68
  %1689 = bitcast i32 %1688 to float, !dbg !68
  %1690 = fcmp olt float %1686, %1689, !dbg !70
  %1691 = fcmp uno float %1686, 0.000000e+00, !dbg !71
  %1692 = or i1 %1690, %1691, !dbg !72
  %1693 = select i1 %1692, float %1686, float %1689, !dbg !73
  %1694 = bitcast float %1693 to i32, !dbg !68
  %1695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1694, i32 2, i32 31), !dbg !68
  %1696 = bitcast i32 %1695 to float, !dbg !68
  %1697 = fcmp olt float %1693, %1696, !dbg !70
  %1698 = fcmp uno float %1693, 0.000000e+00, !dbg !71
  %1699 = or i1 %1697, %1698, !dbg !72
  %1700 = select i1 %1699, float %1693, float %1696, !dbg !73
  %1701 = bitcast float %1700 to i32, !dbg !68
  %1702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1701, i32 1, i32 31), !dbg !68
  %1703 = bitcast i32 %1702 to float, !dbg !68
  %1704 = fcmp olt float %1700, %1703, !dbg !70
  %1705 = fcmp uno float %1700, 0.000000e+00, !dbg !71
  %1706 = or i1 %1704, %1705, !dbg !72
  %1707 = and i32 %22, 15, !dbg !68
  %1708 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1707, !dbg !68
  %1709 = select i1 %1604, i32 %1599, i32 %1600, !dbg !73
  %1710 = insertelement <1 x i32> poison, i32 %1709, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1708, <1 x i32> %1710, i1 %735) #5, !dbg !68
  %1711 = or disjoint i32 %1707, 16, !dbg !68
  %1712 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1711, !dbg !68
  %1713 = select i1 %1638, i32 %1633, i32 %1634, !dbg !73
  %1714 = insertelement <1 x i32> poison, i32 %1713, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1712, <1 x i32> %1714, i1 %735) #5, !dbg !68
  %1715 = or disjoint i32 %1707, 32, !dbg !68
  %1716 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1715, !dbg !68
  %1717 = select i1 %1672, i32 %1667, i32 %1668, !dbg !73
  %1718 = insertelement <1 x i32> poison, i32 %1717, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1716, <1 x i32> %1718, i1 %735) #5, !dbg !68
  %1719 = or disjoint i32 %1707, 48, !dbg !68
  %1720 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1719, !dbg !68
  %1721 = select i1 %1706, i32 %1701, i32 %1702, !dbg !73
  %1722 = insertelement <1 x i32> poison, i32 %1721, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1720, <1 x i32> %1722, i1 %735) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1723 = icmp slt i32 %21, 64, !dbg !68
  %1724 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %753, i1 %1723) #5, !dbg !68
  %1725 = bitcast i32 %1724 to float, !dbg !68
  %1726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1724, i32 8, i32 31), !dbg !68
  %1727 = bitcast i32 %1726 to float, !dbg !68
  %1728 = fcmp olt float %1725, %1727, !dbg !70
  %1729 = fcmp uno float %1725, 0.000000e+00, !dbg !71
  %1730 = or i1 %1729, %1728, !dbg !72
  %1731 = select i1 %1730, float %1725, float %1727, !dbg !73
  %1732 = bitcast float %1731 to i32, !dbg !68
  %1733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1732, i32 4, i32 31), !dbg !68
  %1734 = bitcast i32 %1733 to float, !dbg !68
  %1735 = fcmp olt float %1731, %1734, !dbg !70
  %1736 = fcmp uno float %1731, 0.000000e+00, !dbg !71
  %1737 = or i1 %1735, %1736, !dbg !72
  %1738 = select i1 %1737, float %1731, float %1734, !dbg !73
  %1739 = bitcast float %1738 to i32, !dbg !68
  %1740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1739, i32 2, i32 31), !dbg !68
  %1741 = bitcast i32 %1740 to float, !dbg !68
  %1742 = fcmp olt float %1738, %1741, !dbg !70
  %1743 = fcmp uno float %1738, 0.000000e+00, !dbg !71
  %1744 = or i1 %1742, %1743, !dbg !72
  %1745 = select i1 %1744, float %1738, float %1741, !dbg !73
  %1746 = bitcast float %1745 to i32, !dbg !68
  %1747 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1746, i32 1, i32 31), !dbg !68
  %1748 = bitcast i32 %1747 to float, !dbg !68
  %1749 = fcmp olt float %1745, %1748, !dbg !70
  %1750 = fcmp uno float %1745, 0.000000e+00, !dbg !71
  %1751 = or i1 %1749, %1750, !dbg !72
  %1752 = and i32 %21, 15, !dbg !68
  %1753 = icmp eq i32 %1752, 0, !dbg !68
  %1754 = and i1 %1723, %1753, !dbg !68
  %1755 = select i1 %1751, i32 %1746, i32 %1747, !dbg !73
  %1756 = insertelement <1 x i32> poison, i32 %1755, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %753, <1 x i32> %1756, i1 %1754) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1757 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %1758 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !68
  %1759 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !68
  %1760 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1761 = bitcast float %1757 to i32, !dbg !74
  %1762 = bitcast float %1758 to i32, !dbg !74
  %1763 = bitcast float %1759 to i32, !dbg !74
  %1764 = bitcast float %1760 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1761, i32 %1762, i32 %1763, i32 %1764, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1765 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1068, !dbg !74
  %1766 = load float, ptr addrspace(3) %1765, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1767 = fcmp ogt float %1211, %1212, !dbg !77
  %1768 = fcmp uno float %1211, 0.000000e+00, !dbg !78
  %1769 = or i1 %1767, %1768, !dbg !79
  %1770 = select i1 %1769, float %1211, float %1212, !dbg !80
  %1771 = fcmp ogt float %1770, %1244, !dbg !77
  %1772 = fcmp uno float %1770, 0.000000e+00, !dbg !78
  %1773 = or i1 %1771, %1772, !dbg !79
  %1774 = select i1 %1773, float %1770, float %1244, !dbg !80
  %1775 = fcmp ogt float %1774, %1245, !dbg !77
  %1776 = fcmp uno float %1774, 0.000000e+00, !dbg !78
  %1777 = or i1 %1775, %1776, !dbg !79
  %1778 = select i1 %1777, float %1774, float %1245, !dbg !80
  %1779 = fcmp ogt float %1778, %1277, !dbg !77
  %1780 = fcmp uno float %1778, 0.000000e+00, !dbg !78
  %1781 = or i1 %1779, %1780, !dbg !79
  %1782 = select i1 %1781, float %1778, float %1277, !dbg !80
  %1783 = fcmp ogt float %1782, %1278, !dbg !77
  %1784 = fcmp uno float %1782, 0.000000e+00, !dbg !78
  %1785 = or i1 %1783, %1784, !dbg !79
  %1786 = select i1 %1785, float %1782, float %1278, !dbg !80
  %1787 = fcmp ogt float %1786, %1374, !dbg !77
  %1788 = fcmp uno float %1786, 0.000000e+00, !dbg !78
  %1789 = or i1 %1787, %1788, !dbg !79
  %1790 = select i1 %1789, float %1786, float %1374, !dbg !80
  %1791 = fcmp ogt float %1790, %1375, !dbg !77
  %1792 = fcmp uno float %1790, 0.000000e+00, !dbg !78
  %1793 = or i1 %1791, %1792, !dbg !79
  %1794 = select i1 %1793, float %1790, float %1375, !dbg !80
  %1795 = fcmp ogt float %1213, %1214, !dbg !77
  %1796 = fcmp uno float %1213, 0.000000e+00, !dbg !78
  %1797 = or i1 %1795, %1796, !dbg !79
  %1798 = select i1 %1797, float %1213, float %1214, !dbg !80
  %1799 = fcmp ogt float %1798, %1246, !dbg !77
  %1800 = fcmp uno float %1798, 0.000000e+00, !dbg !78
  %1801 = or i1 %1799, %1800, !dbg !79
  %1802 = select i1 %1801, float %1798, float %1246, !dbg !80
  %1803 = fcmp ogt float %1802, %1247, !dbg !77
  %1804 = fcmp uno float %1802, 0.000000e+00, !dbg !78
  %1805 = or i1 %1803, %1804, !dbg !79
  %1806 = select i1 %1805, float %1802, float %1247, !dbg !80
  %1807 = fcmp ogt float %1806, %1279, !dbg !77
  %1808 = fcmp uno float %1806, 0.000000e+00, !dbg !78
  %1809 = or i1 %1807, %1808, !dbg !79
  %1810 = select i1 %1809, float %1806, float %1279, !dbg !80
  %1811 = fcmp ogt float %1810, %1280, !dbg !77
  %1812 = fcmp uno float %1810, 0.000000e+00, !dbg !78
  %1813 = or i1 %1811, %1812, !dbg !79
  %1814 = select i1 %1813, float %1810, float %1280, !dbg !80
  %1815 = fcmp ogt float %1814, %1376, !dbg !77
  %1816 = fcmp uno float %1814, 0.000000e+00, !dbg !78
  %1817 = or i1 %1815, %1816, !dbg !79
  %1818 = select i1 %1817, float %1814, float %1376, !dbg !80
  %1819 = fcmp ogt float %1818, %1377, !dbg !77
  %1820 = fcmp uno float %1818, 0.000000e+00, !dbg !78
  %1821 = or i1 %1819, %1820, !dbg !79
  %1822 = select i1 %1821, float %1818, float %1377, !dbg !80
  %1823 = fcmp ogt float %1378, %1379, !dbg !77
  %1824 = fcmp uno float %1378, 0.000000e+00, !dbg !78
  %1825 = or i1 %1823, %1824, !dbg !79
  %1826 = select i1 %1825, float %1378, float %1379, !dbg !80
  %1827 = fcmp ogt float %1826, %1380, !dbg !77
  %1828 = fcmp uno float %1826, 0.000000e+00, !dbg !78
  %1829 = or i1 %1827, %1828, !dbg !79
  %1830 = select i1 %1829, float %1826, float %1380, !dbg !80
  %1831 = fcmp ogt float %1830, %1381, !dbg !77
  %1832 = fcmp uno float %1830, 0.000000e+00, !dbg !78
  %1833 = or i1 %1831, %1832, !dbg !79
  %1834 = select i1 %1833, float %1830, float %1381, !dbg !80
  %1835 = fcmp ogt float %1834, %1382, !dbg !77
  %1836 = fcmp uno float %1834, 0.000000e+00, !dbg !78
  %1837 = or i1 %1835, %1836, !dbg !79
  %1838 = select i1 %1837, float %1834, float %1382, !dbg !80
  %1839 = fcmp ogt float %1838, %1383, !dbg !77
  %1840 = fcmp uno float %1838, 0.000000e+00, !dbg !78
  %1841 = or i1 %1839, %1840, !dbg !79
  %1842 = select i1 %1841, float %1838, float %1383, !dbg !80
  %1843 = fcmp ogt float %1842, %1384, !dbg !77
  %1844 = fcmp uno float %1842, 0.000000e+00, !dbg !78
  %1845 = or i1 %1843, %1844, !dbg !79
  %1846 = select i1 %1845, float %1842, float %1384, !dbg !80
  %1847 = fcmp ogt float %1846, %1385, !dbg !77
  %1848 = fcmp uno float %1846, 0.000000e+00, !dbg !78
  %1849 = or i1 %1847, %1848, !dbg !79
  %1850 = select i1 %1849, float %1846, float %1385, !dbg !80
  %1851 = fcmp ogt float %1386, %1387, !dbg !77
  %1852 = fcmp uno float %1386, 0.000000e+00, !dbg !78
  %1853 = or i1 %1851, %1852, !dbg !79
  %1854 = select i1 %1853, float %1386, float %1387, !dbg !80
  %1855 = fcmp ogt float %1854, %1388, !dbg !77
  %1856 = fcmp uno float %1854, 0.000000e+00, !dbg !78
  %1857 = or i1 %1855, %1856, !dbg !79
  %1858 = select i1 %1857, float %1854, float %1388, !dbg !80
  %1859 = fcmp ogt float %1858, %1389, !dbg !77
  %1860 = fcmp uno float %1858, 0.000000e+00, !dbg !78
  %1861 = or i1 %1859, %1860, !dbg !79
  %1862 = select i1 %1861, float %1858, float %1389, !dbg !80
  %1863 = fcmp ogt float %1862, %1390, !dbg !77
  %1864 = fcmp uno float %1862, 0.000000e+00, !dbg !78
  %1865 = or i1 %1863, %1864, !dbg !79
  %1866 = select i1 %1865, float %1862, float %1390, !dbg !80
  %1867 = fcmp ogt float %1866, %1391, !dbg !77
  %1868 = fcmp uno float %1866, 0.000000e+00, !dbg !78
  %1869 = or i1 %1867, %1868, !dbg !79
  %1870 = select i1 %1869, float %1866, float %1391, !dbg !80
  %1871 = fcmp ogt float %1870, %1392, !dbg !77
  %1872 = fcmp uno float %1870, 0.000000e+00, !dbg !78
  %1873 = or i1 %1871, %1872, !dbg !79
  %1874 = select i1 %1873, float %1870, float %1392, !dbg !80
  %1875 = fcmp ogt float %1874, %1393, !dbg !77
  %1876 = fcmp uno float %1874, 0.000000e+00, !dbg !78
  %1877 = or i1 %1875, %1876, !dbg !79
  %1878 = select i1 %1877, float %1874, float %1393, !dbg !80
  %1879 = bitcast float %1794 to i32, !dbg !75
  %1880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1879, i32 16, i32 31), !dbg !75
  %1881 = bitcast i32 %1880 to float, !dbg !75
  %1882 = fcmp ogt float %1794, %1881, !dbg !77
  %1883 = fcmp uno float %1794, 0.000000e+00, !dbg !78
  %1884 = or i1 %1883, %1882, !dbg !79
  %1885 = select i1 %1884, float %1794, float %1881, !dbg !80
  %1886 = bitcast float %1885 to i32, !dbg !75
  %1887 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1886, i32 8, i32 31), !dbg !75
  %1888 = bitcast i32 %1887 to float, !dbg !75
  %1889 = fcmp ogt float %1885, %1888, !dbg !77
  %1890 = fcmp uno float %1885, 0.000000e+00, !dbg !78
  %1891 = or i1 %1889, %1890, !dbg !79
  %1892 = select i1 %1891, float %1885, float %1888, !dbg !80
  %1893 = bitcast float %1892 to i32, !dbg !75
  %1894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1893, i32 4, i32 31), !dbg !75
  %1895 = bitcast i32 %1894 to float, !dbg !75
  %1896 = fcmp ogt float %1892, %1895, !dbg !77
  %1897 = fcmp uno float %1892, 0.000000e+00, !dbg !78
  %1898 = or i1 %1896, %1897, !dbg !79
  %1899 = select i1 %1898, float %1892, float %1895, !dbg !80
  %1900 = bitcast float %1899 to i32, !dbg !75
  %1901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1900, i32 2, i32 31), !dbg !75
  %1902 = bitcast i32 %1901 to float, !dbg !75
  %1903 = fcmp ogt float %1899, %1902, !dbg !77
  %1904 = fcmp uno float %1899, 0.000000e+00, !dbg !78
  %1905 = or i1 %1903, %1904, !dbg !79
  %1906 = select i1 %1905, float %1899, float %1902, !dbg !80
  %1907 = bitcast float %1906 to i32, !dbg !75
  %1908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1907, i32 1, i32 31), !dbg !75
  %1909 = bitcast i32 %1908 to float, !dbg !75
  %1910 = fcmp ogt float %1906, %1909, !dbg !77
  %1911 = fcmp uno float %1906, 0.000000e+00, !dbg !78
  %1912 = or i1 %1910, %1911, !dbg !79
  %1913 = bitcast float %1822 to i32, !dbg !75
  %1914 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1913, i32 16, i32 31), !dbg !75
  %1915 = bitcast i32 %1914 to float, !dbg !75
  %1916 = fcmp ogt float %1822, %1915, !dbg !77
  %1917 = fcmp uno float %1822, 0.000000e+00, !dbg !78
  %1918 = or i1 %1917, %1916, !dbg !79
  %1919 = select i1 %1918, float %1822, float %1915, !dbg !80
  %1920 = bitcast float %1919 to i32, !dbg !75
  %1921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1920, i32 8, i32 31), !dbg !75
  %1922 = bitcast i32 %1921 to float, !dbg !75
  %1923 = fcmp ogt float %1919, %1922, !dbg !77
  %1924 = fcmp uno float %1919, 0.000000e+00, !dbg !78
  %1925 = or i1 %1923, %1924, !dbg !79
  %1926 = select i1 %1925, float %1919, float %1922, !dbg !80
  %1927 = bitcast float %1926 to i32, !dbg !75
  %1928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1927, i32 4, i32 31), !dbg !75
  %1929 = bitcast i32 %1928 to float, !dbg !75
  %1930 = fcmp ogt float %1926, %1929, !dbg !77
  %1931 = fcmp uno float %1926, 0.000000e+00, !dbg !78
  %1932 = or i1 %1930, %1931, !dbg !79
  %1933 = select i1 %1932, float %1926, float %1929, !dbg !80
  %1934 = bitcast float %1933 to i32, !dbg !75
  %1935 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1934, i32 2, i32 31), !dbg !75
  %1936 = bitcast i32 %1935 to float, !dbg !75
  %1937 = fcmp ogt float %1933, %1936, !dbg !77
  %1938 = fcmp uno float %1933, 0.000000e+00, !dbg !78
  %1939 = or i1 %1937, %1938, !dbg !79
  %1940 = select i1 %1939, float %1933, float %1936, !dbg !80
  %1941 = bitcast float %1940 to i32, !dbg !75
  %1942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1941, i32 1, i32 31), !dbg !75
  %1943 = bitcast i32 %1942 to float, !dbg !75
  %1944 = fcmp ogt float %1940, %1943, !dbg !77
  %1945 = fcmp uno float %1940, 0.000000e+00, !dbg !78
  %1946 = or i1 %1944, %1945, !dbg !79
  %1947 = bitcast float %1850 to i32, !dbg !75
  %1948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1947, i32 16, i32 31), !dbg !75
  %1949 = bitcast i32 %1948 to float, !dbg !75
  %1950 = fcmp ogt float %1850, %1949, !dbg !77
  %1951 = fcmp uno float %1850, 0.000000e+00, !dbg !78
  %1952 = or i1 %1951, %1950, !dbg !79
  %1953 = select i1 %1952, float %1850, float %1949, !dbg !80
  %1954 = bitcast float %1953 to i32, !dbg !75
  %1955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1954, i32 8, i32 31), !dbg !75
  %1956 = bitcast i32 %1955 to float, !dbg !75
  %1957 = fcmp ogt float %1953, %1956, !dbg !77
  %1958 = fcmp uno float %1953, 0.000000e+00, !dbg !78
  %1959 = or i1 %1957, %1958, !dbg !79
  %1960 = select i1 %1959, float %1953, float %1956, !dbg !80
  %1961 = bitcast float %1960 to i32, !dbg !75
  %1962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1961, i32 4, i32 31), !dbg !75
  %1963 = bitcast i32 %1962 to float, !dbg !75
  %1964 = fcmp ogt float %1960, %1963, !dbg !77
  %1965 = fcmp uno float %1960, 0.000000e+00, !dbg !78
  %1966 = or i1 %1964, %1965, !dbg !79
  %1967 = select i1 %1966, float %1960, float %1963, !dbg !80
  %1968 = bitcast float %1967 to i32, !dbg !75
  %1969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1968, i32 2, i32 31), !dbg !75
  %1970 = bitcast i32 %1969 to float, !dbg !75
  %1971 = fcmp ogt float %1967, %1970, !dbg !77
  %1972 = fcmp uno float %1967, 0.000000e+00, !dbg !78
  %1973 = or i1 %1971, %1972, !dbg !79
  %1974 = select i1 %1973, float %1967, float %1970, !dbg !80
  %1975 = bitcast float %1974 to i32, !dbg !75
  %1976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1975, i32 1, i32 31), !dbg !75
  %1977 = bitcast i32 %1976 to float, !dbg !75
  %1978 = fcmp ogt float %1974, %1977, !dbg !77
  %1979 = fcmp uno float %1974, 0.000000e+00, !dbg !78
  %1980 = or i1 %1978, %1979, !dbg !79
  %1981 = bitcast float %1878 to i32, !dbg !75
  %1982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1981, i32 16, i32 31), !dbg !75
  %1983 = bitcast i32 %1982 to float, !dbg !75
  %1984 = fcmp ogt float %1878, %1983, !dbg !77
  %1985 = fcmp uno float %1878, 0.000000e+00, !dbg !78
  %1986 = or i1 %1985, %1984, !dbg !79
  %1987 = select i1 %1986, float %1878, float %1983, !dbg !80
  %1988 = bitcast float %1987 to i32, !dbg !75
  %1989 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1988, i32 8, i32 31), !dbg !75
  %1990 = bitcast i32 %1989 to float, !dbg !75
  %1991 = fcmp ogt float %1987, %1990, !dbg !77
  %1992 = fcmp uno float %1987, 0.000000e+00, !dbg !78
  %1993 = or i1 %1991, %1992, !dbg !79
  %1994 = select i1 %1993, float %1987, float %1990, !dbg !80
  %1995 = bitcast float %1994 to i32, !dbg !75
  %1996 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1995, i32 4, i32 31), !dbg !75
  %1997 = bitcast i32 %1996 to float, !dbg !75
  %1998 = fcmp ogt float %1994, %1997, !dbg !77
  %1999 = fcmp uno float %1994, 0.000000e+00, !dbg !78
  %2000 = or i1 %1998, %1999, !dbg !79
  %2001 = select i1 %2000, float %1994, float %1997, !dbg !80
  %2002 = bitcast float %2001 to i32, !dbg !75
  %2003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2002, i32 2, i32 31), !dbg !75
  %2004 = bitcast i32 %2003 to float, !dbg !75
  %2005 = fcmp ogt float %2001, %2004, !dbg !77
  %2006 = fcmp uno float %2001, 0.000000e+00, !dbg !78
  %2007 = or i1 %2005, %2006, !dbg !79
  %2008 = select i1 %2007, float %2001, float %2004, !dbg !80
  %2009 = bitcast float %2008 to i32, !dbg !75
  %2010 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2009, i32 1, i32 31), !dbg !75
  %2011 = bitcast i32 %2010 to float, !dbg !75
  %2012 = fcmp ogt float %2008, %2011, !dbg !77
  %2013 = fcmp uno float %2008, 0.000000e+00, !dbg !78
  %2014 = or i1 %2012, %2013, !dbg !79
  %2015 = select i1 %1912, i32 %1907, i32 %1908, !dbg !80
  %2016 = insertelement <1 x i32> poison, i32 %2015, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1708, <1 x i32> %2016, i1 %735) #5, !dbg !75
  %2017 = select i1 %1946, i32 %1941, i32 %1942, !dbg !80
  %2018 = insertelement <1 x i32> poison, i32 %2017, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1712, <1 x i32> %2018, i1 %735) #5, !dbg !75
  %2019 = select i1 %1980, i32 %1975, i32 %1976, !dbg !80
  %2020 = insertelement <1 x i32> poison, i32 %2019, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1716, <1 x i32> %2020, i1 %735) #5, !dbg !75
  %2021 = select i1 %2014, i32 %2009, i32 %2010, !dbg !80
  %2022 = insertelement <1 x i32> poison, i32 %2021, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1720, <1 x i32> %2022, i1 %735) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %2023 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %753, i1 %1723) #5, !dbg !75
  %2024 = bitcast i32 %2023 to float, !dbg !75
  %2025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2023, i32 8, i32 31), !dbg !75
  %2026 = bitcast i32 %2025 to float, !dbg !75
  %2027 = fcmp ogt float %2024, %2026, !dbg !77
  %2028 = fcmp uno float %2024, 0.000000e+00, !dbg !78
  %2029 = or i1 %2028, %2027, !dbg !79
  %2030 = select i1 %2029, float %2024, float %2026, !dbg !80
  %2031 = bitcast float %2030 to i32, !dbg !75
  %2032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2031, i32 4, i32 31), !dbg !75
  %2033 = bitcast i32 %2032 to float, !dbg !75
  %2034 = fcmp ogt float %2030, %2033, !dbg !77
  %2035 = fcmp uno float %2030, 0.000000e+00, !dbg !78
  %2036 = or i1 %2034, %2035, !dbg !79
  %2037 = select i1 %2036, float %2030, float %2033, !dbg !80
  %2038 = bitcast float %2037 to i32, !dbg !75
  %2039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2038, i32 2, i32 31), !dbg !75
  %2040 = bitcast i32 %2039 to float, !dbg !75
  %2041 = fcmp ogt float %2037, %2040, !dbg !77
  %2042 = fcmp uno float %2037, 0.000000e+00, !dbg !78
  %2043 = or i1 %2041, %2042, !dbg !79
  %2044 = select i1 %2043, float %2037, float %2040, !dbg !80
  %2045 = bitcast float %2044 to i32, !dbg !75
  %2046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2045, i32 1, i32 31), !dbg !75
  %2047 = bitcast i32 %2046 to float, !dbg !75
  %2048 = fcmp ogt float %2044, %2047, !dbg !77
  %2049 = fcmp uno float %2044, 0.000000e+00, !dbg !78
  %2050 = or i1 %2048, %2049, !dbg !79
  %2051 = select i1 %2050, i32 %2045, i32 %2046, !dbg !80
  %2052 = insertelement <1 x i32> poison, i32 %2051, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %753, <1 x i32> %2052, i1 %1754) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %2053 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %2054 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !75
  %2055 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !75
  %2056 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %2057 = bitcast float %2053 to i32, !dbg !81
  %2058 = bitcast float %2054 to i32, !dbg !81
  %2059 = bitcast float %2055 to i32, !dbg !81
  %2060 = bitcast float %2056 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2057, i32 %2058, i32 %2059, i32 %2060, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %2061 = load float, ptr addrspace(3) %1765, align 4, !dbg !81
  %2062 = sext i32 %1069 to i64, !dbg !82
  %2063 = getelementptr bfloat, ptr addrspace(1) %4, i64 %2062, !dbg !82
  %2064 = fptrunc float %1766 to bfloat, !dbg !74
  %2065 = and i32 %21, 508, !dbg !74
  %2066 = icmp eq i32 %2065, 0, !dbg !74
  %2067 = bitcast bfloat %2064 to i16, !dbg !74
  %2068 = and i1 %2066, %1070, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2067, ptr addrspace(1) %2063, i1 %2068) #5, !dbg !74
  %2069 = getelementptr bfloat, ptr addrspace(1) %5, i64 %2062, !dbg !83
  %2070 = fptrunc float %2061 to bfloat, !dbg !81
  %2071 = bitcast bfloat %2070 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2071, ptr addrspace(1) %2069, i1 %2068) #5, !dbg !81
  %2072 = getelementptr bfloat, ptr addrspace(1) %6, i64 %2062, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2067, ptr addrspace(1) %2072, i1 %2068) #5, !dbg !85
  %2073 = getelementptr bfloat, ptr addrspace(1) %7, i64 %2062, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2071, ptr addrspace(1) %2073, i1 %2068) #5, !dbg !87
  %2074 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2062, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2067, ptr addrspace(1) %2074, i1 %2068) #5, !dbg !89
  %2075 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2062, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2071, ptr addrspace(1) %2075, i1 %2068) #5, !dbg !91
  %2076 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2062, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2067, ptr addrspace(1) %2076, i1 %2068) #5, !dbg !93
  %2077 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2062, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2071, ptr addrspace(1) %2077, i1 %2068) #5, !dbg !95
  %2078 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1179, i1 %54) #5, !dbg !96
  %2079 = extractvalue { i32, i32, i32, i32 } %2078, 0, !dbg !96
  %2080 = bitcast i32 %2079 to <2 x bfloat>, !dbg !96
  %2081 = extractvalue { i32, i32, i32, i32 } %2078, 1, !dbg !96
  %2082 = bitcast i32 %2081 to <2 x bfloat>, !dbg !96
  %2083 = extractvalue { i32, i32, i32, i32 } %2078, 2, !dbg !96
  %2084 = bitcast i32 %2083 to <2 x bfloat>, !dbg !96
  %2085 = extractvalue { i32, i32, i32, i32 } %2078, 3, !dbg !96
  %2086 = bitcast i32 %2085 to <2 x bfloat>, !dbg !96
  %2087 = extractelement <2 x bfloat> %2080, i64 0, !dbg !96
  %2088 = extractelement <2 x bfloat> %2080, i64 1, !dbg !96
  %2089 = extractelement <2 x bfloat> %2082, i64 0, !dbg !96
  %2090 = extractelement <2 x bfloat> %2082, i64 1, !dbg !96
  %2091 = extractelement <2 x bfloat> %2084, i64 0, !dbg !96
  %2092 = extractelement <2 x bfloat> %2084, i64 1, !dbg !96
  %2093 = extractelement <2 x bfloat> %2086, i64 0, !dbg !96
  %2094 = extractelement <2 x bfloat> %2086, i64 1, !dbg !96
  %2095 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1180, i1 %54) #5, !dbg !96
  %2096 = extractvalue { i32, i32, i32, i32 } %2095, 0, !dbg !96
  %2097 = bitcast i32 %2096 to <2 x bfloat>, !dbg !96
  %2098 = extractvalue { i32, i32, i32, i32 } %2095, 1, !dbg !96
  %2099 = bitcast i32 %2098 to <2 x bfloat>, !dbg !96
  %2100 = extractvalue { i32, i32, i32, i32 } %2095, 2, !dbg !96
  %2101 = bitcast i32 %2100 to <2 x bfloat>, !dbg !96
  %2102 = extractvalue { i32, i32, i32, i32 } %2095, 3, !dbg !96
  %2103 = bitcast i32 %2102 to <2 x bfloat>, !dbg !96
  %2104 = extractelement <2 x bfloat> %2097, i64 0, !dbg !96
  %2105 = extractelement <2 x bfloat> %2097, i64 1, !dbg !96
  %2106 = extractelement <2 x bfloat> %2099, i64 0, !dbg !96
  %2107 = extractelement <2 x bfloat> %2099, i64 1, !dbg !96
  %2108 = extractelement <2 x bfloat> %2101, i64 0, !dbg !96
  %2109 = extractelement <2 x bfloat> %2101, i64 1, !dbg !96
  %2110 = extractelement <2 x bfloat> %2103, i64 0, !dbg !96
  %2111 = extractelement <2 x bfloat> %2103, i64 1, !dbg !96
  %2112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1181, i1 %55) #5, !dbg !96
  %2113 = extractvalue { i32, i32, i32, i32 } %2112, 0, !dbg !96
  %2114 = bitcast i32 %2113 to <2 x bfloat>, !dbg !96
  %2115 = extractvalue { i32, i32, i32, i32 } %2112, 1, !dbg !96
  %2116 = bitcast i32 %2115 to <2 x bfloat>, !dbg !96
  %2117 = extractvalue { i32, i32, i32, i32 } %2112, 2, !dbg !96
  %2118 = bitcast i32 %2117 to <2 x bfloat>, !dbg !96
  %2119 = extractvalue { i32, i32, i32, i32 } %2112, 3, !dbg !96
  %2120 = bitcast i32 %2119 to <2 x bfloat>, !dbg !96
  %2121 = extractelement <2 x bfloat> %2114, i64 0, !dbg !96
  %2122 = extractelement <2 x bfloat> %2114, i64 1, !dbg !96
  %2123 = extractelement <2 x bfloat> %2116, i64 0, !dbg !96
  %2124 = extractelement <2 x bfloat> %2116, i64 1, !dbg !96
  %2125 = extractelement <2 x bfloat> %2118, i64 0, !dbg !96
  %2126 = extractelement <2 x bfloat> %2118, i64 1, !dbg !96
  %2127 = extractelement <2 x bfloat> %2120, i64 0, !dbg !96
  %2128 = extractelement <2 x bfloat> %2120, i64 1, !dbg !96
  %2129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1182, i1 %55) #5, !dbg !96
  %2130 = extractvalue { i32, i32, i32, i32 } %2129, 0, !dbg !96
  %2131 = bitcast i32 %2130 to <2 x bfloat>, !dbg !96
  %2132 = extractvalue { i32, i32, i32, i32 } %2129, 1, !dbg !96
  %2133 = bitcast i32 %2132 to <2 x bfloat>, !dbg !96
  %2134 = extractvalue { i32, i32, i32, i32 } %2129, 2, !dbg !96
  %2135 = bitcast i32 %2134 to <2 x bfloat>, !dbg !96
  %2136 = extractvalue { i32, i32, i32, i32 } %2129, 3, !dbg !96
  %2137 = bitcast i32 %2136 to <2 x bfloat>, !dbg !96
  %2138 = extractelement <2 x bfloat> %2131, i64 0, !dbg !96
  %2139 = extractelement <2 x bfloat> %2131, i64 1, !dbg !96
  %2140 = extractelement <2 x bfloat> %2133, i64 0, !dbg !96
  %2141 = extractelement <2 x bfloat> %2133, i64 1, !dbg !96
  %2142 = extractelement <2 x bfloat> %2135, i64 0, !dbg !96
  %2143 = extractelement <2 x bfloat> %2135, i64 1, !dbg !96
  %2144 = extractelement <2 x bfloat> %2137, i64 0, !dbg !96
  %2145 = extractelement <2 x bfloat> %2137, i64 1, !dbg !96
  %2146 = fpext bfloat %2087 to float, !dbg !97
  %2147 = fpext bfloat %2088 to float, !dbg !97
  %2148 = fpext bfloat %2089 to float, !dbg !97
  %2149 = fpext bfloat %2090 to float, !dbg !97
  %2150 = fpext bfloat %2091 to float, !dbg !97
  %2151 = fpext bfloat %2092 to float, !dbg !97
  %2152 = fpext bfloat %2093 to float, !dbg !97
  %2153 = fpext bfloat %2094 to float, !dbg !97
  %2154 = fpext bfloat %2104 to float, !dbg !97
  %2155 = fpext bfloat %2105 to float, !dbg !97
  %2156 = fpext bfloat %2106 to float, !dbg !97
  %2157 = fpext bfloat %2107 to float, !dbg !97
  %2158 = fpext bfloat %2108 to float, !dbg !97
  %2159 = fpext bfloat %2109 to float, !dbg !97
  %2160 = fpext bfloat %2110 to float, !dbg !97
  %2161 = fpext bfloat %2111 to float, !dbg !97
  %2162 = fpext bfloat %2121 to float, !dbg !97
  %2163 = fpext bfloat %2122 to float, !dbg !97
  %2164 = fpext bfloat %2123 to float, !dbg !97
  %2165 = fpext bfloat %2124 to float, !dbg !97
  %2166 = fpext bfloat %2125 to float, !dbg !97
  %2167 = fpext bfloat %2126 to float, !dbg !97
  %2168 = fpext bfloat %2127 to float, !dbg !97
  %2169 = fpext bfloat %2128 to float, !dbg !97
  %2170 = fpext bfloat %2138 to float, !dbg !97
  %2171 = fpext bfloat %2139 to float, !dbg !97
  %2172 = fpext bfloat %2140 to float, !dbg !97
  %2173 = fpext bfloat %2141 to float, !dbg !97
  %2174 = fpext bfloat %2142 to float, !dbg !97
  %2175 = fpext bfloat %2143 to float, !dbg !97
  %2176 = fpext bfloat %2144 to float, !dbg !97
  %2177 = fpext bfloat %2145 to float, !dbg !97
  %2178 = insertelement <4 x float> poison, float %1760, i64 0, !dbg !98
  %2179 = insertelement <4 x float> %2178, float %1759, i64 1, !dbg !98
  %2180 = insertelement <4 x float> %2179, float %1758, i64 2, !dbg !98
  %2181 = insertelement <4 x float> %2180, float %1757, i64 3, !dbg !98
  %2182 = fcmp oge <4 x float> %2181, zeroinitializer, !dbg !98
  %2183 = select <4 x i1> %2182, <4 x float> zeroinitializer, <4 x float> %2181, !dbg !98
  %2184 = fsub <4 x float> zeroinitializer, %2183, !dbg !100
  %2185 = insertelement <4 x float> poison, float %2056, i64 0, !dbg !101
  %2186 = insertelement <4 x float> %2185, float %2055, i64 1, !dbg !101
  %2187 = insertelement <4 x float> %2186, float %2054, i64 2, !dbg !101
  %2188 = insertelement <4 x float> %2187, float %2053, i64 3, !dbg !101
  %2189 = fcmp ole <4 x float> %2188, zeroinitializer, !dbg !101
  %2190 = select <4 x i1> %2189, <4 x float> zeroinitializer, <4 x float> %2188, !dbg !101
  %2191 = fcmp ogt <4 x float> %2184, %2190, !dbg !103
  %2192 = fcmp uno <4 x float> %2184, zeroinitializer, !dbg !105
  %2193 = or <4 x i1> %2192, %2191, !dbg !106
  %2194 = select <4 x i1> %2193, <4 x float> %2184, <4 x float> %2190, !dbg !107
  %2195 = fmul <4 x float> %2194, splat (float 0x3F80204080000000), !dbg !108
  %2196 = fcmp ogt <4 x float> %2195, splat (float 0x3EE4F8B580000000), !dbg !109
  %2197 = extractelement <4 x float> %2195, i64 3, !dbg !111
  %2198 = fcmp uno float %2197, 0.000000e+00, !dbg !112
  %2199 = extractelement <4 x float> %2195, i64 2, !dbg !111
  %2200 = fcmp uno float %2199, 0.000000e+00, !dbg !112
  %2201 = extractelement <4 x float> %2195, i64 1, !dbg !111
  %2202 = fcmp uno float %2201, 0.000000e+00, !dbg !112
  %2203 = extractelement <4 x float> %2195, i64 0, !dbg !111
  %2204 = fcmp uno float %2203, 0.000000e+00, !dbg !112
  %2205 = extractelement <4 x i1> %2196, i64 3, !dbg !113
  %2206 = or i1 %2205, %2198, !dbg !113
  %2207 = extractelement <4 x i1> %2196, i64 2, !dbg !113
  %2208 = or i1 %2207, %2200, !dbg !113
  %2209 = extractelement <4 x i1> %2196, i64 1, !dbg !113
  %2210 = or i1 %2209, %2202, !dbg !113
  %2211 = extractelement <4 x i1> %2196, i64 0, !dbg !113
  %2212 = or i1 %2211, %2204, !dbg !113
  %2213 = select i1 %2206, float %2197, float 0x3EE4F8B580000000, !dbg !111
  %2214 = select i1 %2208, float %2199, float 0x3EE4F8B580000000, !dbg !111
  %2215 = select i1 %2210, float %2201, float 0x3EE4F8B580000000, !dbg !111
  %2216 = select i1 %2212, float %2203, float 0x3EE4F8B580000000, !dbg !111
  %2217 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2213), !dbg !114
  %2218 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2214), !dbg !114
  %2219 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2215), !dbg !114
  %2220 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2216), !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %2221 = bitcast float %2217 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2221, i1 true) #5, !dbg !115
  %2222 = bitcast float %2218 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2222, i1 true) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %2223 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !115
  %2224 = load float, ptr addrspace(3) %2223, align 4, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %2225 = bitcast float %2219 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2225, i1 true) #5, !dbg !115
  %2226 = bitcast float %2220 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %2226, i1 true) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %2227 = load float, ptr addrspace(3) %2223, align 4, !dbg !115
  %2228 = fmul float %2224, %2146, !dbg !115
  %2229 = fmul float %2224, %2147, !dbg !115
  %2230 = fmul float %2224, %2148, !dbg !115
  %2231 = fmul float %2224, %2149, !dbg !115
  %2232 = fmul float %2224, %2150, !dbg !115
  %2233 = fmul float %2224, %2151, !dbg !115
  %2234 = fmul float %2224, %2152, !dbg !115
  %2235 = fmul float %2224, %2153, !dbg !115
  %2236 = fmul float %2224, %2154, !dbg !115
  %2237 = fmul float %2224, %2155, !dbg !115
  %2238 = fmul float %2224, %2156, !dbg !115
  %2239 = fmul float %2224, %2157, !dbg !115
  %2240 = fmul float %2224, %2158, !dbg !115
  %2241 = fmul float %2224, %2159, !dbg !115
  %2242 = fmul float %2224, %2160, !dbg !115
  %2243 = fmul float %2224, %2161, !dbg !115
  %2244 = fmul float %2227, %2162, !dbg !115
  %2245 = fmul float %2227, %2163, !dbg !115
  %2246 = fmul float %2227, %2164, !dbg !115
  %2247 = fmul float %2227, %2165, !dbg !115
  %2248 = fmul float %2227, %2166, !dbg !115
  %2249 = fmul float %2227, %2167, !dbg !115
  %2250 = fmul float %2227, %2168, !dbg !115
  %2251 = fmul float %2227, %2169, !dbg !115
  %2252 = fmul float %2227, %2170, !dbg !115
  %2253 = fmul float %2227, %2171, !dbg !115
  %2254 = fmul float %2227, %2172, !dbg !115
  %2255 = fmul float %2227, %2173, !dbg !115
  %2256 = fmul float %2227, %2174, !dbg !115
  %2257 = fmul float %2227, %2175, !dbg !115
  %2258 = fmul float %2227, %2176, !dbg !115
  %2259 = fmul float %2227, %2177, !dbg !115
  %2260 = tail call float @llvm.nvvm.round.f(float %2228) #5, !dbg !116
  %2261 = tail call float @llvm.nvvm.round.f(float %2229) #5, !dbg !116
  %2262 = tail call float @llvm.nvvm.round.f(float %2230) #5, !dbg !116
  %2263 = tail call float @llvm.nvvm.round.f(float %2231) #5, !dbg !116
  %2264 = tail call float @llvm.nvvm.round.f(float %2232) #5, !dbg !116
  %2265 = tail call float @llvm.nvvm.round.f(float %2233) #5, !dbg !116
  %2266 = tail call float @llvm.nvvm.round.f(float %2234) #5, !dbg !116
  %2267 = tail call float @llvm.nvvm.round.f(float %2235) #5, !dbg !116
  %2268 = tail call float @llvm.nvvm.round.f(float %2236) #5, !dbg !116
  %2269 = tail call float @llvm.nvvm.round.f(float %2237) #5, !dbg !116
  %2270 = tail call float @llvm.nvvm.round.f(float %2238) #5, !dbg !116
  %2271 = tail call float @llvm.nvvm.round.f(float %2239) #5, !dbg !116
  %2272 = tail call float @llvm.nvvm.round.f(float %2240) #5, !dbg !116
  %2273 = tail call float @llvm.nvvm.round.f(float %2241) #5, !dbg !116
  %2274 = tail call float @llvm.nvvm.round.f(float %2242) #5, !dbg !116
  %2275 = tail call float @llvm.nvvm.round.f(float %2243) #5, !dbg !116
  %2276 = tail call float @llvm.nvvm.round.f(float %2244) #5, !dbg !116
  %2277 = tail call float @llvm.nvvm.round.f(float %2245) #5, !dbg !116
  %2278 = tail call float @llvm.nvvm.round.f(float %2246) #5, !dbg !116
  %2279 = tail call float @llvm.nvvm.round.f(float %2247) #5, !dbg !116
  %2280 = tail call float @llvm.nvvm.round.f(float %2248) #5, !dbg !116
  %2281 = tail call float @llvm.nvvm.round.f(float %2249) #5, !dbg !116
  %2282 = tail call float @llvm.nvvm.round.f(float %2250) #5, !dbg !116
  %2283 = tail call float @llvm.nvvm.round.f(float %2251) #5, !dbg !116
  %2284 = tail call float @llvm.nvvm.round.f(float %2252) #5, !dbg !116
  %2285 = tail call float @llvm.nvvm.round.f(float %2253) #5, !dbg !116
  %2286 = tail call float @llvm.nvvm.round.f(float %2254) #5, !dbg !116
  %2287 = tail call float @llvm.nvvm.round.f(float %2255) #5, !dbg !116
  %2288 = tail call float @llvm.nvvm.round.f(float %2256) #5, !dbg !116
  %2289 = tail call float @llvm.nvvm.round.f(float %2257) #5, !dbg !116
  %2290 = tail call float @llvm.nvvm.round.f(float %2258) #5, !dbg !116
  %2291 = tail call float @llvm.nvvm.round.f(float %2259) #5, !dbg !116
  %2292 = insertelement <4 x float> poison, float %2260, i64 0, !dbg !117
  %2293 = insertelement <4 x float> %2292, float %2261, i64 1, !dbg !117
  %2294 = insertelement <4 x float> %2293, float %2262, i64 2, !dbg !117
  %2295 = insertelement <4 x float> %2294, float %2263, i64 3, !dbg !117
  %2296 = fcmp ogt <4 x float> %2295, splat (float -1.270000e+02), !dbg !117
  %2297 = fcmp uno <4 x float> %2295, zeroinitializer, !dbg !119
  %2298 = or <4 x i1> %2296, %2297, !dbg !120
  %2299 = select <4 x i1> %2298, <4 x float> %2295, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2300 = fcmp olt <4 x float> %2299, splat (float 1.270000e+02), !dbg !122
  %2301 = fcmp uno <4 x float> %2299, zeroinitializer, !dbg !124
  %2302 = or <4 x i1> %2300, %2301, !dbg !125
  %2303 = fptosi <4 x float> %2299 to <4 x i8>, !dbg !126
  %2304 = select <4 x i1> %2302, <4 x i8> %2303, <4 x i8> splat (i8 127), !dbg !127
  %2305 = insertelement <4 x float> poison, float %2264, i64 0, !dbg !117
  %2306 = insertelement <4 x float> %2305, float %2265, i64 1, !dbg !117
  %2307 = insertelement <4 x float> %2306, float %2266, i64 2, !dbg !117
  %2308 = insertelement <4 x float> %2307, float %2267, i64 3, !dbg !117
  %2309 = fcmp ogt <4 x float> %2308, splat (float -1.270000e+02), !dbg !117
  %2310 = fcmp uno <4 x float> %2308, zeroinitializer, !dbg !119
  %2311 = or <4 x i1> %2309, %2310, !dbg !120
  %2312 = select <4 x i1> %2311, <4 x float> %2308, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2313 = fcmp olt <4 x float> %2312, splat (float 1.270000e+02), !dbg !122
  %2314 = fcmp uno <4 x float> %2312, zeroinitializer, !dbg !124
  %2315 = or <4 x i1> %2313, %2314, !dbg !125
  %2316 = fptosi <4 x float> %2312 to <4 x i8>, !dbg !126
  %2317 = select <4 x i1> %2315, <4 x i8> %2316, <4 x i8> splat (i8 127), !dbg !127
  %2318 = insertelement <4 x float> poison, float %2268, i64 0, !dbg !117
  %2319 = insertelement <4 x float> %2318, float %2269, i64 1, !dbg !117
  %2320 = insertelement <4 x float> %2319, float %2270, i64 2, !dbg !117
  %2321 = insertelement <4 x float> %2320, float %2271, i64 3, !dbg !117
  %2322 = fcmp ogt <4 x float> %2321, splat (float -1.270000e+02), !dbg !117
  %2323 = fcmp uno <4 x float> %2321, zeroinitializer, !dbg !119
  %2324 = or <4 x i1> %2322, %2323, !dbg !120
  %2325 = select <4 x i1> %2324, <4 x float> %2321, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2326 = fcmp olt <4 x float> %2325, splat (float 1.270000e+02), !dbg !122
  %2327 = fcmp uno <4 x float> %2325, zeroinitializer, !dbg !124
  %2328 = or <4 x i1> %2326, %2327, !dbg !125
  %2329 = fptosi <4 x float> %2325 to <4 x i8>, !dbg !126
  %2330 = select <4 x i1> %2328, <4 x i8> %2329, <4 x i8> splat (i8 127), !dbg !127
  %2331 = insertelement <4 x float> poison, float %2272, i64 0, !dbg !117
  %2332 = insertelement <4 x float> %2331, float %2273, i64 1, !dbg !117
  %2333 = insertelement <4 x float> %2332, float %2274, i64 2, !dbg !117
  %2334 = insertelement <4 x float> %2333, float %2275, i64 3, !dbg !117
  %2335 = fcmp ogt <4 x float> %2334, splat (float -1.270000e+02), !dbg !117
  %2336 = fcmp uno <4 x float> %2334, zeroinitializer, !dbg !119
  %2337 = or <4 x i1> %2335, %2336, !dbg !120
  %2338 = select <4 x i1> %2337, <4 x float> %2334, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2339 = fcmp olt <4 x float> %2338, splat (float 1.270000e+02), !dbg !122
  %2340 = fcmp uno <4 x float> %2338, zeroinitializer, !dbg !124
  %2341 = or <4 x i1> %2339, %2340, !dbg !125
  %2342 = fptosi <4 x float> %2338 to <4 x i8>, !dbg !126
  %2343 = select <4 x i1> %2341, <4 x i8> %2342, <4 x i8> splat (i8 127), !dbg !127
  %2344 = insertelement <4 x float> poison, float %2276, i64 0, !dbg !117
  %2345 = insertelement <4 x float> %2344, float %2277, i64 1, !dbg !117
  %2346 = insertelement <4 x float> %2345, float %2278, i64 2, !dbg !117
  %2347 = insertelement <4 x float> %2346, float %2279, i64 3, !dbg !117
  %2348 = fcmp ogt <4 x float> %2347, splat (float -1.270000e+02), !dbg !117
  %2349 = fcmp uno <4 x float> %2347, zeroinitializer, !dbg !119
  %2350 = or <4 x i1> %2348, %2349, !dbg !120
  %2351 = select <4 x i1> %2350, <4 x float> %2347, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2352 = fcmp olt <4 x float> %2351, splat (float 1.270000e+02), !dbg !122
  %2353 = fcmp uno <4 x float> %2351, zeroinitializer, !dbg !124
  %2354 = or <4 x i1> %2352, %2353, !dbg !125
  %2355 = fptosi <4 x float> %2351 to <4 x i8>, !dbg !126
  %2356 = select <4 x i1> %2354, <4 x i8> %2355, <4 x i8> splat (i8 127), !dbg !127
  %2357 = insertelement <4 x float> poison, float %2280, i64 0, !dbg !117
  %2358 = insertelement <4 x float> %2357, float %2281, i64 1, !dbg !117
  %2359 = insertelement <4 x float> %2358, float %2282, i64 2, !dbg !117
  %2360 = insertelement <4 x float> %2359, float %2283, i64 3, !dbg !117
  %2361 = fcmp ogt <4 x float> %2360, splat (float -1.270000e+02), !dbg !117
  %2362 = fcmp uno <4 x float> %2360, zeroinitializer, !dbg !119
  %2363 = or <4 x i1> %2361, %2362, !dbg !120
  %2364 = select <4 x i1> %2363, <4 x float> %2360, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2365 = fcmp olt <4 x float> %2364, splat (float 1.270000e+02), !dbg !122
  %2366 = fcmp uno <4 x float> %2364, zeroinitializer, !dbg !124
  %2367 = or <4 x i1> %2365, %2366, !dbg !125
  %2368 = fptosi <4 x float> %2364 to <4 x i8>, !dbg !126
  %2369 = select <4 x i1> %2367, <4 x i8> %2368, <4 x i8> splat (i8 127), !dbg !127
  %2370 = insertelement <4 x float> poison, float %2284, i64 0, !dbg !117
  %2371 = insertelement <4 x float> %2370, float %2285, i64 1, !dbg !117
  %2372 = insertelement <4 x float> %2371, float %2286, i64 2, !dbg !117
  %2373 = insertelement <4 x float> %2372, float %2287, i64 3, !dbg !117
  %2374 = fcmp ogt <4 x float> %2373, splat (float -1.270000e+02), !dbg !117
  %2375 = fcmp uno <4 x float> %2373, zeroinitializer, !dbg !119
  %2376 = or <4 x i1> %2374, %2375, !dbg !120
  %2377 = select <4 x i1> %2376, <4 x float> %2373, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2378 = fcmp olt <4 x float> %2377, splat (float 1.270000e+02), !dbg !122
  %2379 = fcmp uno <4 x float> %2377, zeroinitializer, !dbg !124
  %2380 = or <4 x i1> %2378, %2379, !dbg !125
  %2381 = fptosi <4 x float> %2377 to <4 x i8>, !dbg !126
  %2382 = select <4 x i1> %2380, <4 x i8> %2381, <4 x i8> splat (i8 127), !dbg !127
  %2383 = insertelement <4 x float> poison, float %2288, i64 0, !dbg !117
  %2384 = insertelement <4 x float> %2383, float %2289, i64 1, !dbg !117
  %2385 = insertelement <4 x float> %2384, float %2290, i64 2, !dbg !117
  %2386 = insertelement <4 x float> %2385, float %2291, i64 3, !dbg !117
  %2387 = fcmp ogt <4 x float> %2386, splat (float -1.270000e+02), !dbg !117
  %2388 = fcmp uno <4 x float> %2386, zeroinitializer, !dbg !119
  %2389 = or <4 x i1> %2387, %2388, !dbg !120
  %2390 = select <4 x i1> %2389, <4 x float> %2386, <4 x float> splat (float -1.270000e+02), !dbg !121
  %2391 = fcmp olt <4 x float> %2390, splat (float 1.270000e+02), !dbg !122
  %2392 = fcmp uno <4 x float> %2390, zeroinitializer, !dbg !124
  %2393 = or <4 x i1> %2391, %2392, !dbg !125
  %2394 = fptosi <4 x float> %2390 to <4 x i8>, !dbg !126
  %2395 = select <4 x i1> %2393, <4 x i8> %2394, <4 x i8> splat (i8 127), !dbg !127
  %2396 = getelementptr i8, ptr addrspace(1) %12, i64 %45, !dbg !128
  %2397 = getelementptr i8, ptr addrspace(1) %12, i64 %49, !dbg !128
  %2398 = bitcast <4 x i8> %2304 to i32, !dbg !129
  %2399 = bitcast <4 x i8> %2317 to i32, !dbg !129
  %2400 = bitcast <4 x i8> %2330 to i32, !dbg !129
  %2401 = bitcast <4 x i8> %2343 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2398, i32 %2399, i32 %2400, i32 %2401, ptr addrspace(1) %2396, i1 %54) #5, !dbg !129
  %2402 = bitcast <4 x i8> %2356 to i32, !dbg !129
  %2403 = bitcast <4 x i8> %2369 to i32, !dbg !129
  %2404 = bitcast <4 x i8> %2382 to i32, !dbg !129
  %2405 = bitcast <4 x i8> %2395 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2402, i32 %2403, i32 %2404, i32 %2405, ptr addrspace(1) %2397, i1 %55) #5, !dbg !129
  %2406 = getelementptr i8, ptr addrspace(1) %13, i64 %45, !dbg !130
  %2407 = getelementptr i8, ptr addrspace(1) %13, i64 %49, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2398, i32 %2399, i32 %2400, i32 %2401, ptr addrspace(1) %2406, i1 %54) #5, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2402, i32 %2403, i32 %2404, i32 %2405, ptr addrspace(1) %2407, i1 %55) #5, !dbg !131
  %2408 = getelementptr i8, ptr addrspace(1) %14, i64 %45, !dbg !132
  %2409 = getelementptr i8, ptr addrspace(1) %14, i64 %49, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2398, i32 %2399, i32 %2400, i32 %2401, ptr addrspace(1) %2408, i1 %54) #5, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2402, i32 %2403, i32 %2404, i32 %2405, ptr addrspace(1) %2409, i1 %55) #5, !dbg !133
  %2410 = getelementptr i8, ptr addrspace(1) %15, i64 %45, !dbg !134
  %2411 = getelementptr i8, ptr addrspace(1) %15, i64 %49, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2398, i32 %2399, i32 %2400, i32 %2401, ptr addrspace(1) %2410, i1 %54) #5, !dbg !135
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2402, i32 %2403, i32 %2404, i32 %2405, ptr addrspace(1) %2411, i1 %55) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
