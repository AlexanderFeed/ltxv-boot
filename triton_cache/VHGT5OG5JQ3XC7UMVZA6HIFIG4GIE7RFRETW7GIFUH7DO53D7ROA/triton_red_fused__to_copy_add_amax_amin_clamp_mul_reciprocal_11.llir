; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 64, !dbg !11
  %12 = lshr i32 %10, 1, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %9, !dbg !12
  %15 = icmp slt i32 %14, 512, !dbg !13
  %16 = shl i32 %10, 2, !dbg !14
  %17 = and i32 %16, 4, !dbg !14
  %18 = shl i32 %14, 7, !dbg !15
  %19 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !16
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %21, !dbg !17

21:                                               ; preds = %7, %21
  %22 = phi i32 [ 0, %7 ], [ %46, %21 ]
  %23 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %7 ], [ %45, %21 ]
  %24 = lshr i32 %22, 7, !dbg !18
  %25 = mul nuw nsw i32 %24, 526336, !dbg !19
  %26 = add i32 %25, %18, !dbg !20
  %.masked = and i32 %22, 120, !dbg !21
  %27 = or disjoint i32 %26, %.masked, !dbg !22
  %28 = or disjoint i32 %27, %17, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %15) #4, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !24
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !24
  %36 = fcmp uno <8 x float> %23, zeroinitializer, !dbg !25
  %37 = shufflevector <2 x bfloat> %33, <2 x bfloat> %35, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %38 = fpext <4 x bfloat> %37 to <4 x float>, !dbg !29
  %39 = shufflevector <4 x float> %38, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %40 = fcmp ogt <8 x float> %23, %39, !dbg !30
  %41 = fcmp olt <8 x float> %23, %39, !dbg !30
  %42 = shufflevector <8 x i1> %40, <8 x i1> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !30
  %43 = or <8 x i1> %36, %42, !dbg !31
  %44 = select <8 x i1> %43, <8 x float> %23, <8 x float> %39, !dbg !32
  %45 = select <8 x i1> %20, <8 x float> %44, <8 x float> %23, !dbg !16
  %46 = add nuw nsw i32 %22, 8, !dbg !17
  %47 = icmp samesign ult i32 %22, 3064, !dbg !17
  br i1 %47, label %21, label %48, !dbg !17

48:                                               ; preds = %21
  %49 = icmp eq i32 %11, 0, !dbg !11
  %50 = and i32 %10, 63, !dbg !11
  %51 = or disjoint i32 %9, %50, !dbg !12
  %52 = icmp slt i32 %51, 512, !dbg !13
  %53 = extractelement <8 x float> %45, i64 4, !dbg !33
  %54 = extractelement <8 x float> %45, i64 5, !dbg !33
  %55 = fcmp olt float %53, %54, !dbg !33
  %56 = fcmp uno float %53, 0.000000e+00, !dbg !36
  %57 = or i1 %55, %56, !dbg !37
  %58 = select i1 %57, float %53, float %54, !dbg !38
  %59 = extractelement <8 x float> %45, i64 6, !dbg !33
  %60 = fcmp olt float %58, %59, !dbg !33
  %61 = fcmp uno float %58, 0.000000e+00, !dbg !36
  %62 = or i1 %60, %61, !dbg !37
  %63 = select i1 %62, float %58, float %59, !dbg !38
  %64 = extractelement <8 x float> %45, i64 7, !dbg !33
  %65 = fcmp olt float %63, %64, !dbg !33
  %66 = fcmp uno float %63, 0.000000e+00, !dbg !36
  %67 = or i1 %65, %66, !dbg !37
  %68 = select i1 %67, float %63, float %64, !dbg !38
  %69 = bitcast float %68 to i32, !dbg !39
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !39
  %71 = bitcast i32 %70 to float, !dbg !39
  %72 = fcmp olt float %68, %71, !dbg !33
  %73 = fcmp uno float %68, 0.000000e+00, !dbg !36
  %74 = or i1 %73, %72, !dbg !37
  %75 = select i1 %74, float %68, float %71, !dbg !38
  %76 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !40
  %77 = bitcast float %75 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %78 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %50, !dbg !40
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !40
  %80 = extractelement <8 x float> %45, i64 0, !dbg !41
  %81 = extractelement <8 x float> %45, i64 1, !dbg !41
  %82 = fcmp ogt float %80, %81, !dbg !41
  %83 = fcmp uno float %80, 0.000000e+00, !dbg !43
  %84 = or i1 %82, %83, !dbg !44
  %85 = select i1 %84, float %80, float %81, !dbg !45
  %86 = extractelement <8 x float> %45, i64 2, !dbg !41
  %87 = fcmp ogt float %85, %86, !dbg !41
  %88 = fcmp uno float %85, 0.000000e+00, !dbg !43
  %89 = or i1 %87, %88, !dbg !44
  %90 = select i1 %89, float %85, float %86, !dbg !45
  %91 = extractelement <8 x float> %45, i64 3, !dbg !41
  %92 = fcmp ogt float %90, %91, !dbg !41
  %93 = fcmp uno float %90, 0.000000e+00, !dbg !43
  %94 = or i1 %92, %93, !dbg !44
  %95 = select i1 %94, float %90, float %91, !dbg !45
  %96 = bitcast float %95 to i32, !dbg !46
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !46
  %98 = bitcast i32 %97 to float, !dbg !46
  %99 = fcmp ogt float %95, %98, !dbg !41
  %100 = fcmp uno float %95, 0.000000e+00, !dbg !43
  %101 = or i1 %100, %99, !dbg !44
  %102 = select i1 %101, float %95, float %98, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %103 = bitcast float %102 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %103, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %104 = load float, ptr addrspace(3) %78, align 4, !dbg !47
  %105 = sext i32 %51 to i64, !dbg !48
  %106 = getelementptr bfloat, ptr addrspace(1) %1, i64 %105, !dbg !48
  %107 = fptrunc float %79 to bfloat, !dbg !40
  %108 = bitcast bfloat %107 to i16, !dbg !40
  %109 = and i1 %49, %52, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %108, ptr addrspace(1) %106, i1 %109) #4, !dbg !40
  %110 = getelementptr bfloat, ptr addrspace(1) %2, i64 %105, !dbg !49
  %111 = fptrunc float %104 to bfloat, !dbg !47
  %112 = bitcast bfloat %111 to i16, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %112, ptr addrspace(1) %110, i1 %109) #4, !dbg !47
  %.inv = fcmp oge float %75, 0.000000e+00, !dbg !50
  %113 = select i1 %.inv, float 0.000000e+00, float %75, !dbg !50
  %114 = fsub float 0.000000e+00, %113, !dbg !52
  %.inv4 = fcmp ole float %102, 0.000000e+00, !dbg !53
  %115 = select i1 %.inv4, float 0.000000e+00, float %102, !dbg !53
  %116 = fcmp ogt float %114, %115, !dbg !55
  %117 = fcmp uno float %114, 0.000000e+00, !dbg !57
  %118 = or i1 %117, %116, !dbg !58
  %119 = select i1 %118, float %114, float %115, !dbg !59
  %120 = fmul float %119, 0x3F80204080000000, !dbg !60
  %121 = fcmp ogt float %120, 0x3EE4F8B580000000, !dbg !61
  %122 = fcmp uno float %120, 0.000000e+00, !dbg !63
  %123 = or i1 %121, %122, !dbg !64
  %124 = select i1 %123, float %120, float 0x3EE4F8B580000000, !dbg !65
  %125 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %124), !dbg !66
  %126 = mul i32 %14, 3072, !dbg !67
  br label %127, !dbg !68

127:                                              ; preds = %48, %127
  %indvars.iv = phi i64 [ 0, %48 ], [ %indvars.iv.next, %127 ]
  %128 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !69
  %129 = lshr i32 %128, 7, !dbg !69
  %130 = mul nuw nsw i32 %129, 526336, !dbg !70
  %131 = add i32 %130, %18, !dbg !71
  %132 = trunc i64 %indvars.iv to i32, !dbg !72
  %133 = or disjoint i32 %17, %132, !dbg !72
  %134 = and i32 %133, 124, !dbg !72
  %135 = or disjoint i32 %131, %134, !dbg !73
  %136 = sext i32 %135 to i64, !dbg !74
  %137 = getelementptr bfloat, ptr addrspace(1) %0, i64 %136, !dbg !74
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %137, i1 %15) #4, !dbg !75
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !75
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !75
  %141 = extractvalue { i32, i32 } %138, 1, !dbg !75
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !75
  %143 = extractelement <2 x bfloat> %140, i64 0, !dbg !75
  %144 = extractelement <2 x bfloat> %140, i64 1, !dbg !75
  %145 = extractelement <2 x bfloat> %142, i64 0, !dbg !75
  %146 = extractelement <2 x bfloat> %142, i64 1, !dbg !75
  %147 = fpext bfloat %143 to float, !dbg !76
  %148 = fpext bfloat %144 to float, !dbg !76
  %149 = fpext bfloat %145 to float, !dbg !76
  %150 = fpext bfloat %146 to float, !dbg !76
  %151 = fmul float %125, %147, !dbg !77
  %152 = fmul float %125, %148, !dbg !77
  %153 = fmul float %125, %149, !dbg !77
  %154 = fmul float %125, %150, !dbg !77
  %155 = tail call float @llvm.nvvm.round.f(float %151) #4, !dbg !78
  %156 = tail call float @llvm.nvvm.round.f(float %152) #4, !dbg !78
  %157 = tail call float @llvm.nvvm.round.f(float %153) #4, !dbg !78
  %158 = tail call float @llvm.nvvm.round.f(float %154) #4, !dbg !78
  %159 = insertelement <4 x float> poison, float %155, i64 0, !dbg !79
  %160 = insertelement <4 x float> %159, float %156, i64 1, !dbg !79
  %161 = insertelement <4 x float> %160, float %157, i64 2, !dbg !79
  %162 = insertelement <4 x float> %161, float %158, i64 3, !dbg !79
  %163 = fcmp ogt <4 x float> %162, splat (float -1.270000e+02), !dbg !79
  %164 = fcmp uno <4 x float> %162, zeroinitializer, !dbg !81
  %165 = or <4 x i1> %163, %164, !dbg !82
  %166 = select <4 x i1> %165, <4 x float> %162, <4 x float> splat (float -1.270000e+02), !dbg !83
  %167 = fcmp olt <4 x float> %166, splat (float 1.270000e+02), !dbg !84
  %168 = fcmp uno <4 x float> %166, zeroinitializer, !dbg !86
  %169 = or <4 x i1> %167, %168, !dbg !87
  %170 = fptosi <4 x float> %166 to <4 x i8>, !dbg !88
  %171 = select <4 x i1> %169, <4 x i8> %170, <4 x i8> splat (i8 127), !dbg !89
  %172 = add i32 %133, %126, !dbg !90
  %173 = sext i32 %172 to i64, !dbg !91
  %174 = getelementptr i8, ptr addrspace(1) %3, i64 %173, !dbg !91
  %175 = bitcast <4 x i8> %171 to i32, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %174, i1 %15) #4, !dbg !92
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !68
  %176 = icmp samesign ult i64 %indvars.iv, 3064, !dbg !68
  br i1 %176, label %127, label %177, !dbg !68

177:                                              ; preds = %127
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 42, column: 48, scope: !6)
!17 = !DILocation(line: 31, column: 40, scope: !6)
!18 = !DILocation(line: 37, column: 59, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 37, column: 43, scope: !6)
!21 = !DILocation(line: 37, column: 75, scope: !6)
!22 = !DILocation(line: 37, column: 68, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 83, scope: !6)
!25 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 45, scope: !6)
!29 = !DILocation(line: 37, column: 144, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!35 = !DILocation(line: 43, column: 38, scope: !6)
!36 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 110, column: 29, scope: !26, inlinedAt: !35)
!40 = !DILocation(line: 45, column: 36, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !42)
!45 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !42)
!46 = !DILocation(line: 115, column: 29, scope: !26, inlinedAt: !42)
!47 = !DILocation(line: 46, column: 36, scope: !6)
!48 = !DILocation(line: 45, column: 25, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !51)
!51 = !DILocation(line: 55, column: 44, scope: !6)
!52 = !DILocation(line: 56, column: 16, scope: !6)
!53 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !54)
!54 = !DILocation(line: 57, column: 45, scope: !6)
!55 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !56)
!56 = !DILocation(line: 58, column: 45, scope: !6)
!57 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !56)
!58 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !56)
!59 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !56)
!60 = !DILocation(line: 60, column: 24, scope: !6)
!61 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !62)
!62 = !DILocation(line: 63, column: 46, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !62)
!65 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !62)
!66 = !DILocation(line: 66, column: 25, scope: !6)
!67 = !DILocation(line: 78, column: 41, scope: !6)
!68 = !DILocation(line: 47, column: 40, scope: !6)
!69 = !DILocation(line: 53, column: 59, scope: !6)
!70 = !DILocation(line: 53, column: 51, scope: !6)
!71 = !DILocation(line: 53, column: 43, scope: !6)
!72 = !DILocation(line: 53, column: 75, scope: !6)
!73 = !DILocation(line: 53, column: 68, scope: !6)
!74 = !DILocation(line: 53, column: 34, scope: !6)
!75 = !DILocation(line: 53, column: 83, scope: !6)
!76 = !DILocation(line: 53, column: 145, scope: !6)
!77 = !DILocation(line: 69, column: 23, scope: !6)
!78 = !DILocation(line: 70, column: 36, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !80)
!80 = !DILocation(line: 73, column: 46, scope: !6)
!81 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !80)
!82 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !80)
!83 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !80)
!84 = !DILocation(line: 94, column: 15, scope: !26, inlinedAt: !85)
!85 = !DILocation(line: 75, column: 46, scope: !6)
!86 = !DILocation(line: 96, column: 21, scope: !26, inlinedAt: !85)
!87 = !DILocation(line: 96, column: 16, scope: !26, inlinedAt: !85)
!88 = !DILocation(line: 77, column: 25, scope: !6)
!89 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !85)
!90 = !DILocation(line: 78, column: 36, scope: !6)
!91 = !DILocation(line: 78, column: 29, scope: !6)
!92 = !DILocation(line: 78, column: 53, scope: !6)
!93 = !DILocation(line: 47, column: 4, scope: !6)
