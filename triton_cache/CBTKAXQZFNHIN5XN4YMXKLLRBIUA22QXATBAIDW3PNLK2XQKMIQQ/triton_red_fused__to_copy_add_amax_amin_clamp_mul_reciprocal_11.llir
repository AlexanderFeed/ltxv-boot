; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 511, !dbg !11
  %12 = shl i32 %8, 7, !dbg !12
  %13 = and i32 %10, 127
  %invariant.op = or disjoint i32 %12, %13, !dbg !13
  %14 = zext nneg i32 %11 to i64, !dbg !13
  %15 = lshr i32 %11, 7, !dbg !14
  %16 = mul nuw nsw i32 %15, 526336, !dbg !15
  %.reass.us = add i32 %16, %invariant.op
  %17 = sext i32 %.reass.us to i64, !dbg !16
  %18 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !16
  br i1 %9, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %19 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %18, i1 false) #4, !dbg !17
  %20 = or disjoint i64 %14, 512, !dbg !18
  %21 = lshr i64 %20, 7, !dbg !14
  %22 = trunc nuw nsw i64 %21 to i32
  %23 = mul nuw nsw i32 %22, 526336
  %.reass.1 = add i32 %23, %invariant.op
  %24 = sext i32 %.reass.1 to i64, !dbg !16
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 false) #4, !dbg !17
  %27 = insertelement <4 x i64> poison, i64 %14, i64 0, !dbg !18
  %28 = shufflevector <4 x i64> %27, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !18
  %29 = or disjoint <4 x i64> %28, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !18
  %30 = lshr <4 x i64> %29, splat (i64 7), !dbg !14
  %31 = trunc nuw nsw <4 x i64> %30 to <4 x i32>
  %32 = mul nuw nsw <4 x i32> %31, splat (i32 526336)
  %33 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %34 = shufflevector <4 x i32> %33, <4 x i32> poison, <4 x i32> zeroinitializer
  %35 = add <4 x i32> %32, %34
  %36 = extractelement <4 x i32> %35, i64 3, !dbg !16
  %37 = sext i32 %36 to i64, !dbg !16
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %38, i1 false) #4, !dbg !17
  %40 = extractelement <4 x i32> %35, i64 2, !dbg !16
  %41 = sext i32 %40 to i64, !dbg !16
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 false) #4, !dbg !17
  %44 = extractelement <4 x i32> %35, i64 1, !dbg !16
  %45 = sext i32 %44 to i64, !dbg !16
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %46, i1 false) #4, !dbg !17
  %48 = extractelement <4 x i32> %35, i64 0, !dbg !16
  %49 = sext i32 %48 to i64, !dbg !16
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 false) #4, !dbg !17
  %52 = extractelement <4 x i64> %29, i64 0, !dbg !19
  %53 = extractelement <4 x i64> %29, i64 1, !dbg !19
  %54 = extractelement <4 x i64> %29, i64 2, !dbg !19
  %55 = extractelement <4 x i64> %29, i64 3, !dbg !19
  br label %.split5.us, !dbg !19

.split.us.preheader:                              ; preds = %7
  %56 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %18, i1 true) #4, !dbg !17
  %57 = bitcast i16 %56 to bfloat, !dbg !17
  %58 = fpext bfloat %57 to float, !dbg !23
  %59 = or disjoint i64 %14, 512, !dbg !18
  %60 = lshr i64 %59, 7, !dbg !14
  %61 = trunc nuw nsw i64 %60 to i32
  %62 = mul nuw nsw i32 %61, 526336
  %.reass.us.1 = add i32 %62, %invariant.op
  %63 = sext i32 %.reass.us.1 to i64, !dbg !16
  %64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %63, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 true) #4, !dbg !17
  %66 = bitcast i16 %65 to bfloat, !dbg !17
  %67 = fpext bfloat %66 to float, !dbg !23
  %68 = fcmp olt bfloat %57, %66, !dbg !24
  %69 = fcmp uno bfloat %57, 0xR0000, !dbg !26
  %70 = or i1 %69, %68, !dbg !27
  %71 = select i1 %70, float %58, float %67, !dbg !28
  %72 = fcmp ogt bfloat %57, %66, !dbg !29
  %73 = or i1 %69, %72, !dbg !31
  %74 = select i1 %73, float %58, float %67, !dbg !32
  %75 = insertelement <4 x i64> poison, i64 %14, i64 0, !dbg !18
  %76 = shufflevector <4 x i64> %75, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !18
  %77 = or disjoint <4 x i64> %76, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !18
  %78 = fcmp uno float %71, 0.000000e+00, !dbg !26
  %79 = fcmp uno float %74, 0.000000e+00, !dbg !33
  %80 = lshr <4 x i64> %77, splat (i64 7), !dbg !14
  %81 = trunc nuw nsw <4 x i64> %80 to <4 x i32>
  %82 = mul nuw nsw <4 x i32> %81, splat (i32 526336)
  %83 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %84 = shufflevector <4 x i32> %83, <4 x i32> poison, <4 x i32> zeroinitializer
  %85 = add <4 x i32> %82, %84
  %86 = extractelement <4 x i32> %85, i64 3, !dbg !16
  %87 = sext i32 %86 to i64, !dbg !16
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !16
  %89 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %88, i1 true) #4, !dbg !17
  %90 = bitcast i16 %89 to bfloat, !dbg !17
  %91 = fpext bfloat %90 to float, !dbg !23
  %92 = fcmp olt float %71, %91, !dbg !24
  %93 = or i1 %78, %92, !dbg !27
  %94 = select i1 %93, float %71, float %91, !dbg !28
  %95 = fcmp ogt float %74, %91, !dbg !29
  %96 = or i1 %79, %95, !dbg !31
  %97 = select i1 %96, float %74, float %91, !dbg !32
  %98 = extractelement <4 x i32> %85, i64 2, !dbg !16
  %99 = sext i32 %98 to i64, !dbg !16
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !16
  %101 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %100, i1 true) #4, !dbg !17
  %102 = bitcast i16 %101 to bfloat, !dbg !17
  %103 = fpext bfloat %102 to float, !dbg !23
  %104 = fcmp olt float %94, %103, !dbg !24
  %105 = fcmp uno float %94, 0.000000e+00, !dbg !26
  %106 = or i1 %105, %104, !dbg !27
  %107 = select i1 %106, float %94, float %103, !dbg !28
  %108 = fcmp ogt float %97, %103, !dbg !29
  %109 = fcmp uno float %97, 0.000000e+00, !dbg !33
  %110 = or i1 %109, %108, !dbg !31
  %111 = select i1 %110, float %97, float %103, !dbg !32
  %112 = extractelement <4 x i32> %85, i64 1, !dbg !16
  %113 = sext i32 %112 to i64, !dbg !16
  %114 = getelementptr bfloat, ptr addrspace(1) %0, i64 %113, !dbg !16
  %115 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %114, i1 true) #4, !dbg !17
  %116 = bitcast i16 %115 to bfloat, !dbg !17
  %117 = fpext bfloat %116 to float, !dbg !23
  %118 = fcmp olt float %107, %117, !dbg !24
  %119 = fcmp uno float %107, 0.000000e+00, !dbg !26
  %120 = or i1 %119, %118, !dbg !27
  %121 = select i1 %120, float %107, float %117, !dbg !28
  %122 = fcmp ogt float %111, %117, !dbg !29
  %123 = fcmp uno float %111, 0.000000e+00, !dbg !33
  %124 = or i1 %123, %122, !dbg !31
  %125 = select i1 %124, float %111, float %117, !dbg !32
  %126 = extractelement <4 x i32> %85, i64 0, !dbg !16
  %127 = sext i32 %126 to i64, !dbg !16
  %128 = getelementptr bfloat, ptr addrspace(1) %0, i64 %127, !dbg !16
  %129 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %128, i1 true) #4, !dbg !17
  %130 = bitcast i16 %129 to bfloat, !dbg !17
  %131 = fpext bfloat %130 to float, !dbg !23
  %132 = fcmp olt float %121, %131, !dbg !24
  %133 = fcmp uno float %121, 0.000000e+00, !dbg !26
  %134 = or i1 %133, %132, !dbg !27
  %135 = select i1 %134, float %121, float %131, !dbg !28
  %136 = fcmp ogt float %125, %131, !dbg !29
  %137 = fcmp uno float %125, 0.000000e+00, !dbg !33
  %138 = or i1 %137, %136, !dbg !31
  %139 = select i1 %138, float %125, float %131, !dbg !32
  %140 = extractelement <4 x i64> %77, i64 0, !dbg !19
  %141 = extractelement <4 x i64> %77, i64 1, !dbg !19
  %142 = extractelement <4 x i64> %77, i64 2, !dbg !19
  %143 = extractelement <4 x i64> %77, i64 3, !dbg !19
  br label %.split5.us, !dbg !19

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi35 = phi i64 [ %52, %.split.preheader ], [ %140, %.split.us.preheader ], !dbg !34
  %.pre-phi30 = phi i64 [ %53, %.split.preheader ], [ %141, %.split.us.preheader ], !dbg !34
  %.pre-phi25 = phi i64 [ %54, %.split.preheader ], [ %142, %.split.us.preheader ], !dbg !34
  %.pre-phi20 = phi i64 [ %55, %.split.preheader ], [ %143, %.split.us.preheader ], !dbg !34
  %.pre-phi19 = phi i64 [ %24, %.split.preheader ], [ %63, %.split.us.preheader ], !dbg !35
  %.pre-phi15 = phi i64 [ %20, %.split.preheader ], [ %59, %.split.us.preheader ], !dbg !34
  %.us-phi = phi float [ 0x7FF0000000000000, %.split.preheader ], [ %135, %.split.us.preheader ], !dbg !19
  %.us-phi6 = phi float [ 0xFFF0000000000000, %.split.preheader ], [ %139, %.split.us.preheader ], !dbg !19
  %144 = phi <4 x i32> [ %35, %.split.preheader ], [ %85, %.split.us.preheader ], !dbg !35
  %145 = lshr i32 %10, 5, !dbg !11
  %146 = and i32 %10, 31, !dbg !11
  %147 = bitcast float %.us-phi to i32, !dbg !19
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !19
  %149 = bitcast i32 %148 to float, !dbg !19
  %150 = fcmp olt float %.us-phi, %149, !dbg !36
  %151 = fcmp uno float %.us-phi, 0.000000e+00, !dbg !38
  %152 = or i1 %151, %150, !dbg !39
  %153 = select i1 %152, float %.us-phi, float %149, !dbg !40
  %154 = bitcast float %153 to i32, !dbg !19
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !19
  %156 = bitcast i32 %155 to float, !dbg !19
  %157 = fcmp olt float %153, %156, !dbg !36
  %158 = fcmp uno float %153, 0.000000e+00, !dbg !38
  %159 = or i1 %157, %158, !dbg !39
  %160 = select i1 %159, float %153, float %156, !dbg !40
  %161 = bitcast float %160 to i32, !dbg !19
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !19
  %163 = bitcast i32 %162 to float, !dbg !19
  %164 = fcmp olt float %160, %163, !dbg !36
  %165 = fcmp uno float %160, 0.000000e+00, !dbg !38
  %166 = or i1 %164, %165, !dbg !39
  %167 = select i1 %166, float %160, float %163, !dbg !40
  %168 = bitcast float %167 to i32, !dbg !19
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !19
  %170 = bitcast i32 %169 to float, !dbg !19
  %171 = fcmp olt float %167, %170, !dbg !36
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !38
  %173 = or i1 %171, %172, !dbg !39
  %174 = select i1 %173, float %167, float %170, !dbg !40
  %175 = bitcast float %174 to i32, !dbg !19
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !19
  %177 = bitcast i32 %176 to float, !dbg !19
  %178 = fcmp olt float %174, %177, !dbg !36
  %179 = fcmp uno float %174, 0.000000e+00, !dbg !38
  %180 = or i1 %178, %179, !dbg !39
  %181 = and i32 %145, 15, !dbg !19
  %182 = icmp eq i32 %146, 0, !dbg !19
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !19
  %184 = select i1 %180, i32 %175, i32 %176, !dbg !40
  %185 = insertelement <1 x i32> poison, i32 %184, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %185, i1 %182) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %186 = icmp slt i32 %10, 16, !dbg !19
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !19
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %186) #4, !dbg !19
  %189 = bitcast i32 %188 to float, !dbg !19
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !19
  %191 = bitcast i32 %190 to float, !dbg !19
  %192 = fcmp olt float %189, %191, !dbg !36
  %193 = fcmp uno float %189, 0.000000e+00, !dbg !38
  %194 = or i1 %193, %192, !dbg !39
  %195 = select i1 %194, float %189, float %191, !dbg !40
  %196 = bitcast float %195 to i32, !dbg !19
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !19
  %198 = bitcast i32 %197 to float, !dbg !19
  %199 = fcmp olt float %195, %198, !dbg !36
  %200 = fcmp uno float %195, 0.000000e+00, !dbg !38
  %201 = or i1 %199, %200, !dbg !39
  %202 = select i1 %201, float %195, float %198, !dbg !40
  %203 = bitcast float %202 to i32, !dbg !19
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !19
  %205 = bitcast i32 %204 to float, !dbg !19
  %206 = fcmp olt float %202, %205, !dbg !36
  %207 = fcmp uno float %202, 0.000000e+00, !dbg !38
  %208 = or i1 %206, %207, !dbg !39
  %209 = select i1 %208, float %202, float %205, !dbg !40
  %210 = bitcast float %209 to i32, !dbg !19
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !19
  %212 = bitcast i32 %211 to float, !dbg !19
  %213 = fcmp olt float %209, %212, !dbg !36
  %214 = fcmp uno float %209, 0.000000e+00, !dbg !38
  %215 = or i1 %213, %214, !dbg !39
  %216 = and i32 %10, 15, !dbg !19
  %217 = icmp eq i32 %216, 0, !dbg !19
  %218 = and i1 %186, %217, !dbg !19
  %219 = select i1 %215, i32 %210, i32 %211, !dbg !40
  %220 = insertelement <1 x i32> poison, i32 %219, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %220, i1 %218) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %221 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %222 = bitcast float %.us-phi6 to i32, !dbg !41
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !41
  %224 = bitcast i32 %223 to float, !dbg !41
  %225 = fcmp ogt float %.us-phi6, %224, !dbg !43
  %226 = fcmp uno float %.us-phi6, 0.000000e+00, !dbg !44
  %227 = or i1 %226, %225, !dbg !45
  %228 = select i1 %227, float %.us-phi6, float %224, !dbg !46
  %229 = bitcast float %228 to i32, !dbg !41
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !41
  %231 = bitcast i32 %230 to float, !dbg !41
  %232 = fcmp ogt float %228, %231, !dbg !43
  %233 = fcmp uno float %228, 0.000000e+00, !dbg !44
  %234 = or i1 %232, %233, !dbg !45
  %235 = select i1 %234, float %228, float %231, !dbg !46
  %236 = bitcast float %235 to i32, !dbg !41
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !41
  %238 = bitcast i32 %237 to float, !dbg !41
  %239 = fcmp ogt float %235, %238, !dbg !43
  %240 = fcmp uno float %235, 0.000000e+00, !dbg !44
  %241 = or i1 %239, %240, !dbg !45
  %242 = select i1 %241, float %235, float %238, !dbg !46
  %243 = bitcast float %242 to i32, !dbg !41
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !41
  %245 = bitcast i32 %244 to float, !dbg !41
  %246 = fcmp ogt float %242, %245, !dbg !43
  %247 = fcmp uno float %242, 0.000000e+00, !dbg !44
  %248 = or i1 %246, %247, !dbg !45
  %249 = select i1 %248, float %242, float %245, !dbg !46
  %250 = bitcast float %249 to i32, !dbg !41
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !41
  %252 = bitcast i32 %251 to float, !dbg !41
  %253 = fcmp ogt float %249, %252, !dbg !43
  %254 = fcmp uno float %249, 0.000000e+00, !dbg !44
  %255 = or i1 %253, %254, !dbg !45
  %256 = select i1 %255, i32 %250, i32 %251, !dbg !46
  %257 = insertelement <1 x i32> poison, i32 %256, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %257, i1 %182) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %258 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %186) #4, !dbg !41
  %259 = bitcast i32 %258 to float, !dbg !41
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !41
  %261 = bitcast i32 %260 to float, !dbg !41
  %262 = fcmp ogt float %259, %261, !dbg !43
  %263 = fcmp uno float %259, 0.000000e+00, !dbg !44
  %264 = or i1 %263, %262, !dbg !45
  %265 = select i1 %264, float %259, float %261, !dbg !46
  %266 = bitcast float %265 to i32, !dbg !41
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !41
  %268 = bitcast i32 %267 to float, !dbg !41
  %269 = fcmp ogt float %265, %268, !dbg !43
  %270 = fcmp uno float %265, 0.000000e+00, !dbg !44
  %271 = or i1 %269, %270, !dbg !45
  %272 = select i1 %271, float %265, float %268, !dbg !46
  %273 = bitcast float %272 to i32, !dbg !41
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !41
  %275 = bitcast i32 %274 to float, !dbg !41
  %276 = fcmp ogt float %272, %275, !dbg !43
  %277 = fcmp uno float %272, 0.000000e+00, !dbg !44
  %278 = or i1 %276, %277, !dbg !45
  %279 = select i1 %278, float %272, float %275, !dbg !46
  %280 = bitcast float %279 to i32, !dbg !41
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !41
  %282 = bitcast i32 %281 to float, !dbg !41
  %283 = fcmp ogt float %279, %282, !dbg !43
  %284 = fcmp uno float %279, 0.000000e+00, !dbg !44
  %285 = or i1 %283, %284, !dbg !45
  %286 = select i1 %285, i32 %280, i32 %281, !dbg !46
  %287 = insertelement <1 x i32> poison, i32 %286, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %287, i1 %218) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %288 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %289 = sext i32 %8 to i64, !dbg !47
  %290 = getelementptr bfloat, ptr addrspace(1) %1, i64 %289, !dbg !47
  %291 = fptrunc float %221 to bfloat, !dbg !48
  %292 = icmp eq i32 %11, 0, !dbg !48
  %293 = bitcast bfloat %291 to i16, !dbg !48
  %294 = and i1 %9, %292, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %293, ptr addrspace(1) %290, i1 %294) #4, !dbg !48
  %295 = getelementptr bfloat, ptr addrspace(1) %2, i64 %289, !dbg !49
  %296 = fptrunc float %288 to bfloat, !dbg !50
  %297 = bitcast bfloat %296 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %297, ptr addrspace(1) %295, i1 %294) #4, !dbg !50
  %.inv = fcmp oge float %221, 0.000000e+00, !dbg !51
  %298 = select i1 %.inv, float 0.000000e+00, float %221, !dbg !51
  %299 = fsub float 0.000000e+00, %298, !dbg !53
  %.inv2 = fcmp ole float %288, 0.000000e+00, !dbg !54
  %300 = select i1 %.inv2, float 0.000000e+00, float %288, !dbg !54
  %301 = fcmp ogt float %299, %300, !dbg !56
  %302 = fcmp uno float %299, 0.000000e+00, !dbg !58
  %303 = or i1 %302, %301, !dbg !59
  %304 = select i1 %303, float %299, float %300, !dbg !60
  %305 = fmul float %304, 0x3F80204080000000, !dbg !61
  %306 = fcmp ogt float %305, 0x3EE4F8B580000000, !dbg !62
  %307 = fcmp uno float %305, 0.000000e+00, !dbg !64
  %308 = or i1 %306, %307, !dbg !65
  %309 = select i1 %308, float %305, float 0x3EE4F8B580000000, !dbg !66
  %310 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %309), !dbg !67
  %311 = mul i32 %8, 3072, !dbg !68
  %312 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !35
  %313 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %312, i1 %9) #4, !dbg !69
  %314 = bitcast i16 %313 to bfloat, !dbg !69
  %315 = fpext bfloat %314 to float, !dbg !70
  %316 = fmul float %310, %315, !dbg !71
  %317 = tail call float @llvm.nvvm.round.f(float %316) #4, !dbg !72
  %318 = fcmp ogt float %317, -1.270000e+02, !dbg !73
  %319 = fcmp uno float %317, 0.000000e+00, !dbg !75
  %320 = or i1 %318, %319, !dbg !76
  %321 = select i1 %320, float %317, float -1.270000e+02, !dbg !77
  %322 = fcmp olt float %321, 1.270000e+02, !dbg !78
  %323 = fcmp uno float %321, 0.000000e+00, !dbg !80
  %324 = or i1 %322, %323, !dbg !81
  %325 = fptosi float %321 to i8, !dbg !82
  %326 = select i1 %324, i8 %325, i8 127, !dbg !83
  %327 = or disjoint i32 %11, %311, !dbg !84
  %328 = sext i32 %327 to i64, !dbg !85
  %329 = getelementptr i8, ptr addrspace(1) %3, i64 %328, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %326, ptr addrspace(1) %329, i1 %9) #4, !dbg !86
  %330 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi19, !dbg !35
  %331 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %330, i1 %9) #4, !dbg !69
  %332 = bitcast i16 %331 to bfloat, !dbg !69
  %333 = fpext bfloat %332 to float, !dbg !70
  %334 = fmul float %310, %333, !dbg !71
  %335 = tail call float @llvm.nvvm.round.f(float %334) #4, !dbg !72
  %336 = fcmp ogt float %335, -1.270000e+02, !dbg !73
  %337 = fcmp uno float %335, 0.000000e+00, !dbg !75
  %338 = or i1 %336, %337, !dbg !76
  %339 = select i1 %338, float %335, float -1.270000e+02, !dbg !77
  %340 = fcmp olt float %339, 1.270000e+02, !dbg !78
  %341 = fcmp uno float %339, 0.000000e+00, !dbg !80
  %342 = or i1 %340, %341, !dbg !81
  %343 = fptosi float %339 to i8, !dbg !82
  %344 = select i1 %342, i8 %343, i8 127, !dbg !83
  %345 = trunc nuw nsw i64 %.pre-phi15 to i32, !dbg !84
  %346 = add i32 %311, %345, !dbg !84
  %347 = sext i32 %346 to i64, !dbg !85
  %348 = getelementptr i8, ptr addrspace(1) %3, i64 %347, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %344, ptr addrspace(1) %348, i1 %9) #4, !dbg !86
  %349 = extractelement <4 x i32> %144, i64 3, !dbg !35
  %350 = sext i32 %349 to i64, !dbg !35
  %351 = getelementptr bfloat, ptr addrspace(1) %0, i64 %350, !dbg !35
  %352 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %351, i1 %9) #4, !dbg !69
  %353 = bitcast i16 %352 to bfloat, !dbg !69
  %354 = fpext bfloat %353 to float, !dbg !70
  %355 = fmul float %310, %354, !dbg !71
  %356 = tail call float @llvm.nvvm.round.f(float %355) #4, !dbg !72
  %357 = fcmp ogt float %356, -1.270000e+02, !dbg !73
  %358 = fcmp uno float %356, 0.000000e+00, !dbg !75
  %359 = or i1 %357, %358, !dbg !76
  %360 = select i1 %359, float %356, float -1.270000e+02, !dbg !77
  %361 = fcmp olt float %360, 1.270000e+02, !dbg !78
  %362 = fcmp uno float %360, 0.000000e+00, !dbg !80
  %363 = or i1 %361, %362, !dbg !81
  %364 = fptosi float %360 to i8, !dbg !82
  %365 = select i1 %363, i8 %364, i8 127, !dbg !83
  %366 = trunc nuw nsw i64 %.pre-phi20 to i32, !dbg !84
  %367 = add i32 %311, %366, !dbg !84
  %368 = sext i32 %367 to i64, !dbg !85
  %369 = getelementptr i8, ptr addrspace(1) %3, i64 %368, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %365, ptr addrspace(1) %369, i1 %9) #4, !dbg !86
  %370 = extractelement <4 x i32> %144, i64 2, !dbg !35
  %371 = sext i32 %370 to i64, !dbg !35
  %372 = getelementptr bfloat, ptr addrspace(1) %0, i64 %371, !dbg !35
  %373 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %372, i1 %9) #4, !dbg !69
  %374 = bitcast i16 %373 to bfloat, !dbg !69
  %375 = fpext bfloat %374 to float, !dbg !70
  %376 = fmul float %310, %375, !dbg !71
  %377 = tail call float @llvm.nvvm.round.f(float %376) #4, !dbg !72
  %378 = fcmp ogt float %377, -1.270000e+02, !dbg !73
  %379 = fcmp uno float %377, 0.000000e+00, !dbg !75
  %380 = or i1 %378, %379, !dbg !76
  %381 = select i1 %380, float %377, float -1.270000e+02, !dbg !77
  %382 = fcmp olt float %381, 1.270000e+02, !dbg !78
  %383 = fcmp uno float %381, 0.000000e+00, !dbg !80
  %384 = or i1 %382, %383, !dbg !81
  %385 = fptosi float %381 to i8, !dbg !82
  %386 = select i1 %384, i8 %385, i8 127, !dbg !83
  %387 = trunc nuw nsw i64 %.pre-phi25 to i32, !dbg !84
  %388 = add i32 %311, %387, !dbg !84
  %389 = sext i32 %388 to i64, !dbg !85
  %390 = getelementptr i8, ptr addrspace(1) %3, i64 %389, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %386, ptr addrspace(1) %390, i1 %9) #4, !dbg !86
  %391 = extractelement <4 x i32> %144, i64 1, !dbg !35
  %392 = sext i32 %391 to i64, !dbg !35
  %393 = getelementptr bfloat, ptr addrspace(1) %0, i64 %392, !dbg !35
  %394 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %393, i1 %9) #4, !dbg !69
  %395 = bitcast i16 %394 to bfloat, !dbg !69
  %396 = fpext bfloat %395 to float, !dbg !70
  %397 = fmul float %310, %396, !dbg !71
  %398 = tail call float @llvm.nvvm.round.f(float %397) #4, !dbg !72
  %399 = fcmp ogt float %398, -1.270000e+02, !dbg !73
  %400 = fcmp uno float %398, 0.000000e+00, !dbg !75
  %401 = or i1 %399, %400, !dbg !76
  %402 = select i1 %401, float %398, float -1.270000e+02, !dbg !77
  %403 = fcmp olt float %402, 1.270000e+02, !dbg !78
  %404 = fcmp uno float %402, 0.000000e+00, !dbg !80
  %405 = or i1 %403, %404, !dbg !81
  %406 = fptosi float %402 to i8, !dbg !82
  %407 = select i1 %405, i8 %406, i8 127, !dbg !83
  %408 = trunc nuw nsw i64 %.pre-phi30 to i32, !dbg !84
  %409 = add i32 %311, %408, !dbg !84
  %410 = sext i32 %409 to i64, !dbg !85
  %411 = getelementptr i8, ptr addrspace(1) %3, i64 %410, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %407, ptr addrspace(1) %411, i1 %9) #4, !dbg !86
  %412 = extractelement <4 x i32> %144, i64 0, !dbg !35
  %413 = sext i32 %412 to i64, !dbg !35
  %414 = getelementptr bfloat, ptr addrspace(1) %0, i64 %413, !dbg !35
  %415 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %414, i1 %9) #4, !dbg !69
  %416 = bitcast i16 %415 to bfloat, !dbg !69
  %417 = fpext bfloat %416 to float, !dbg !70
  %418 = fmul float %310, %417, !dbg !71
  %419 = tail call float @llvm.nvvm.round.f(float %418) #4, !dbg !72
  %420 = fcmp ogt float %419, -1.270000e+02, !dbg !73
  %421 = fcmp uno float %419, 0.000000e+00, !dbg !75
  %422 = or i1 %420, %421, !dbg !76
  %423 = select i1 %422, float %419, float -1.270000e+02, !dbg !77
  %424 = fcmp olt float %423, 1.270000e+02, !dbg !78
  %425 = fcmp uno float %423, 0.000000e+00, !dbg !80
  %426 = or i1 %424, %425, !dbg !81
  %427 = fptosi float %423 to i8, !dbg !82
  %428 = select i1 %426, i8 %427, i8 127, !dbg !83
  %429 = trunc nuw nsw i64 %.pre-phi35 to i32, !dbg !84
  %430 = add i32 %311, %429, !dbg !84
  %431 = sext i32 %430 to i64, !dbg !85
  %432 = getelementptr i8, ptr addrspace(1) %3, i64 %431, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %428, ptr addrspace(1) %432, i1 %9) #4, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 43, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 144, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 39, column: 45, scope: !6)
!26 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !25)
!27 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !25)
!28 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !25)
!29 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !30)
!30 = !DILocation(line: 41, column: 45, scope: !6)
!31 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !30)
!32 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !30)
!33 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !30)
!34 = !DILocation(line: 48, column: 31, scope: !6)
!35 = !DILocation(line: 53, column: 34, scope: !6)
!36 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !22)
!37 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!38 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !22)
!39 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !22)
!40 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !22)
!41 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !42)
!46 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !42)
!47 = !DILocation(line: 45, column: 25, scope: !6)
!48 = !DILocation(line: 45, column: 36, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 36, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 53, column: 83, scope: !6)
!70 = !DILocation(line: 53, column: 145, scope: !6)
!71 = !DILocation(line: 69, column: 23, scope: !6)
!72 = !DILocation(line: 70, column: 36, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !74)
!74 = !DILocation(line: 73, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !74)
!78 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 46, scope: !6)
!80 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !79)
!81 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !79)
!82 = !DILocation(line: 77, column: 25, scope: !6)
!83 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !79)
!84 = !DILocation(line: 78, column: 36, scope: !6)
!85 = !DILocation(line: 78, column: 29, scope: !6)
!86 = !DILocation(line: 78, column: 53, scope: !6)
!87 = !DILocation(line: 47, column: 4, scope: !6)
