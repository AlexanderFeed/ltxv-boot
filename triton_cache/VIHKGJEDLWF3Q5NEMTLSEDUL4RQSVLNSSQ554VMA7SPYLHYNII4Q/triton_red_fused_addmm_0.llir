; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 9, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %8, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = shl i32 %9, 1, !dbg !14
  %14 = and i32 %13, 2046, !dbg !14
  %15 = shl i32 %9, 2, !dbg !14
  %16 = and i32 %15, 2044, !dbg !14
  %17 = mul i32 %11, 3072, !dbg !15
  %18 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14
  %19 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %20 = zext nneg i32 %14 to i64, !dbg !16
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !18
  %24 = extractelement <2 x bfloat> %23, i64 0, !dbg !18
  %25 = extractelement <2 x bfloat> %23, i64 1, !dbg !18
  %26 = fpext bfloat %24 to float, !dbg !19
  %27 = fpext bfloat %25 to float, !dbg !19
  %28 = add i32 %16, %17, !dbg !20
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr bfloat, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %12) #4, !dbg !22
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !22
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !22
  %36 = extractelement <2 x bfloat> %35, i64 0, !dbg !22
  %37 = extractelement <2 x bfloat> %35, i64 1, !dbg !22
  %38 = fpext bfloat %36 to float, !dbg !23
  %39 = fpext bfloat %37 to float, !dbg !23
  %40 = fsub float 0.000000e+00, %26, !dbg !24
  %41 = fsub float 0.000000e+00, %27, !dbg !24
  %42 = fmul float %40, 0x3FF7154760000000, !dbg !28
  %43 = tail call float @llvm.nvvm.ex2.approx.f(float %42), !dbg !28
  %44 = fmul float %41, 0x3FF7154760000000, !dbg !28
  %45 = tail call float @llvm.nvvm.ex2.approx.f(float %44), !dbg !28
  %46 = fadd float %43, 1.000000e+00, !dbg !29
  %47 = fadd float %45, 1.000000e+00, !dbg !29
  %48 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %46), !dbg !30
  %49 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %47), !dbg !30
  %50 = fmul float %48, %26, !dbg !31
  %51 = fmul float %49, %27, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %52 = bitcast float %50 to i32, !dbg !32
  %53 = bitcast float %51 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %18, i32 %52, i32 %53, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %54 = getelementptr inbounds nuw i8, ptr addrspace(3) %19, i32 8, !dbg !32
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !32
  %56 = getelementptr inbounds nuw i8, ptr addrspace(3) %19, i32 12, !dbg !32
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !32
  %58 = fmul float %55, %38, !dbg !32
  %59 = fmul float %57, %39, !dbg !32
  %60 = fadd float %58, 0.000000e+00, !dbg !33
  %61 = fadd float %59, 0.000000e+00, !dbg !33
  %62 = select i1 %12, float %60, float 0.000000e+00, !dbg !34
  %63 = select i1 %12, float %61, float 0.000000e+00, !dbg !34
  %64 = or disjoint i64 %20, 2048, !dbg !35
  %65 = or disjoint i32 %16, 2048, !dbg !35
  %66 = icmp samesign ult i64 %64, 3072, !dbg !36
  %67 = icmp samesign ult i32 %65, 3072, !dbg !36
  %68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !17
  %69 = add i32 %65, %17, !dbg !20
  %70 = sext i32 %69 to i64, !dbg !21
  %71 = getelementptr bfloat, ptr addrspace(1) %1, i64 %70, !dbg !21
  %72 = and i1 %12, %67, !dbg !37
  %73 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !23
  %74 = load <2 x float>, ptr addrspace(3) %19, align 16, !dbg !32
  %75 = fmul <2 x float> %74, %73, !dbg !32
  %76 = fadd <2 x float> %75, zeroinitializer, !dbg !33
  %77 = insertelement <2 x i1> poison, i1 %12, i64 0, !dbg !34
  %78 = shufflevector <2 x i1> %77, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !34
  %79 = select <2 x i1> %78, <2 x float> %76, <2 x float> zeroinitializer, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 %66) #4, !dbg !18
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !18
  %82 = extractelement <2 x bfloat> %81, i64 0, !dbg !18
  %83 = extractelement <2 x bfloat> %81, i64 1, !dbg !18
  %84 = fpext bfloat %82 to float, !dbg !19
  %85 = fpext bfloat %83 to float, !dbg !19
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %71, i1 %72) #4, !dbg !22
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !22
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !22
  %89 = extractvalue { i32, i32 } %86, 1, !dbg !22
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !22
  %91 = extractelement <2 x bfloat> %90, i64 0, !dbg !22
  %92 = extractelement <2 x bfloat> %90, i64 1, !dbg !22
  %93 = fpext <2 x bfloat> %88 to <2 x float>, !dbg !23
  %94 = fpext bfloat %91 to float, !dbg !23
  %95 = fpext bfloat %92 to float, !dbg !23
  %96 = fsub float 0.000000e+00, %84, !dbg !24
  %97 = fsub float 0.000000e+00, %85, !dbg !24
  %98 = fmul float %96, 0x3FF7154760000000, !dbg !28
  %99 = tail call float @llvm.nvvm.ex2.approx.f(float %98), !dbg !28
  %100 = fmul float %97, 0x3FF7154760000000, !dbg !28
  %101 = tail call float @llvm.nvvm.ex2.approx.f(float %100), !dbg !28
  %102 = fadd float %99, 1.000000e+00, !dbg !29
  %103 = fadd float %101, 1.000000e+00, !dbg !29
  %104 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %102), !dbg !30
  %105 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %103), !dbg !30
  %106 = fmul float %104, %84, !dbg !31
  %107 = fmul float %105, %85, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %108 = bitcast float %106 to i32, !dbg !32
  %109 = bitcast float %107 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %18, i32 %108, i32 %109, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %110 = load <2 x float>, ptr addrspace(3) %19, align 16, !dbg !32
  %111 = load float, ptr addrspace(3) %54, align 8, !dbg !32
  %112 = load float, ptr addrspace(3) %56, align 4, !dbg !32
  %113 = fmul <2 x float> %110, %93, !dbg !32
  %114 = fmul float %111, %94, !dbg !32
  %115 = fmul float %112, %95, !dbg !32
  %116 = fadd <2 x float> %79, %113, !dbg !33
  %117 = fadd float %62, %114, !dbg !33
  %118 = fadd float %63, %115, !dbg !33
  %119 = insertelement <2 x i1> poison, i1 %72, i64 0, !dbg !34
  %120 = shufflevector <2 x i1> %119, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !34
  %121 = select <2 x i1> %120, <2 x float> %116, <2 x float> %79, !dbg !34
  %122 = select i1 %72, float %117, float %62, !dbg !34
  %123 = select i1 %72, float %118, float %63, !dbg !34
  %124 = and i32 %9, 1, !dbg !11
  %125 = lshr i32 %9, 5, !dbg !11
  %126 = and i32 %9, 31, !dbg !11
  %127 = or disjoint i32 %8, %124, !dbg !12
  %128 = icmp slt i32 %127, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %shift = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %129 = fadd <2 x float> %121, %shift, !dbg !40
  %130 = extractelement <2 x float> %129, i64 0, !dbg !40
  %131 = fadd float %122, %130, !dbg !40
  %132 = fadd float %123, %131, !dbg !40
  %133 = bitcast float %132 to i32, !dbg !38
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !38
  %135 = bitcast i32 %134 to float, !dbg !38
  %136 = fadd float %132, %135, !dbg !40
  %137 = bitcast float %136 to i32, !dbg !38
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !38
  %139 = bitcast i32 %138 to float, !dbg !38
  %140 = fadd float %136, %139, !dbg !40
  %141 = bitcast float %140 to i32, !dbg !38
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !38
  %143 = bitcast i32 %142 to float, !dbg !38
  %144 = fadd float %140, %143, !dbg !40
  %145 = bitcast float %144 to i32, !dbg !38
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !38
  %147 = bitcast i32 %146 to float, !dbg !38
  %148 = fadd float %144, %147, !dbg !40
  %149 = bitcast float %148 to i32, !dbg !38
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !38
  %151 = bitcast i32 %150 to float, !dbg !38
  %152 = fadd float %148, %151, !dbg !40
  %153 = and i32 %125, 15, !dbg !38
  %154 = icmp eq i32 %126, 0, !dbg !38
  %155 = shl nuw nsw i32 %.lobit, 4, !dbg !38
  %156 = or disjoint i32 %155, %153, !dbg !38
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !38
  %158 = bitcast float %152 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %154) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %159 = icmp slt i32 %9, 32, !dbg !38
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !38
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #4, !dbg !38
  %162 = bitcast i32 %161 to float, !dbg !38
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !38
  %164 = bitcast i32 %163 to float, !dbg !38
  %165 = fadd float %162, %164, !dbg !40
  %166 = bitcast float %165 to i32, !dbg !38
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !38
  %168 = bitcast i32 %167 to float, !dbg !38
  %169 = fadd float %165, %168, !dbg !40
  %170 = bitcast float %169 to i32, !dbg !38
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = fadd float %169, %172, !dbg !40
  %174 = bitcast float %173 to i32, !dbg !38
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !38
  %176 = bitcast i32 %175 to float, !dbg !38
  %177 = fadd float %173, %176, !dbg !40
  %178 = and i32 %9, 15, !dbg !38
  %179 = icmp eq i32 %178, 0, !dbg !38
  %180 = and i1 %159, %179, !dbg !38
  %181 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %181, i1 %180) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !38
  %183 = load i32, ptr addrspace(3) %182, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %184 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !42
  %185 = insertelement <1 x i32> poison, i32 %183, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %186 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %124, !dbg !42
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !42
  %188 = sext i32 %127 to i64, !dbg !43
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !43
  %190 = and i32 %9, 1022, !dbg !44
  %191 = icmp eq i32 %190, 0, !dbg !44
  %192 = and i1 %191, %128, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %189, i1 %192) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 94, scope: !6)
!20 = !DILocation(line: 37, column: 41, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 113, scope: !6)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 39, column: 26, scope: !6)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 44, column: 22, scope: !6)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 47, column: 50, scope: !6)
!35 = !DILocation(line: 31, column: 31, scope: !6)
!36 = !DILocation(line: 32, column: 29, scope: !6)
!37 = !DILocation(line: 37, column: 61, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !39)
!39 = !DILocation(line: 48, column: 27, scope: !6)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!42 = !DILocation(line: 48, column: 30, scope: !6)
!43 = !DILocation(line: 49, column: 25, scope: !6)
!44 = !DILocation(line: 49, column: 37, scope: !6)
!45 = !DILocation(line: 49, column: 4, scope: !6)
