; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 33, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 128, !dbg !19
  %19 = lshr i32 %15, 1, !dbg !19
  %20 = and i32 %19, 127, !dbg !19
  %21 = shl i32 %15, 2, !dbg !19
  %22 = and i32 %21, 16, !dbg !19
  %23 = or disjoint i32 %14, %20, !dbg !20
  %24 = shl nsw i32 %13, 7, !dbg !21
  %25 = or disjoint i32 %24, %20, !dbg !22
  %26 = srem i32 %23, 4112, !dbg !23
  %27 = srem i32 %25, 3072, !dbg !24
  %28 = shl i32 %15, 4, !dbg !25
  %29 = and i32 %28, 16, !dbg !25
  %30 = mul nsw i32 %26, 15360, !dbg !26
  %31 = mul nsw i32 %27, 15360, !dbg !27
  %32 = or disjoint i32 %30, %29, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr i8, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = shl nuw nsw i32 %16, 1, !dbg !30
  %36 = xor i32 %29, %35, !dbg !30
  %37 = shl nuw nsw i32 %20, 5, !dbg !30
  %38 = or disjoint i32 %36, %37, !dbg !30
  %39 = zext nneg i32 %38 to i64, !dbg !30
  %40 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %39, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %40, ptr addrspace(1) %34, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %41 = or disjoint i32 %31, %29, !dbg !31
  %42 = sext i32 %41 to i64, !dbg !32
  %43 = getelementptr i8, ptr addrspace(1) %1, i64 %42, !dbg !32
  %44 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %39, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %44, ptr addrspace(1) %43, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !34
  %invariant.op68 = or disjoint i32 %16, 64, !dbg !34
  %invariant.op70 = or disjoint i32 %16, 96, !dbg !34
  %45 = and i32 %15, 7
  %46 = and i32 %15, 15
  %47 = xor i32 %22, %17
  %48 = lshr exact i32 %18, 3
  %49 = or disjoint i32 %48, %46
  %50 = shl nuw nsw i32 %49, 5
  %51 = or disjoint i32 %50, %47
  %52 = zext nneg i32 %51 to i64
  %.reass = or disjoint i32 %45, %invariant.op
  %53 = or disjoint i32 %.reass, %48
  %54 = shl nuw nsw i32 %53, 5
  %55 = or disjoint i32 %54, %47
  %56 = zext nneg i32 %55 to i64
  %.reass69 = or disjoint i32 %45, %invariant.op68
  %57 = or disjoint i32 %.reass69, %48
  %58 = shl nuw nsw i32 %57, 5
  %59 = or disjoint i32 %58, %47
  %60 = zext nneg i32 %59 to i64
  %.reass71 = or disjoint i32 %45, %invariant.op70
  %61 = or disjoint i32 %.reass71, %48
  %62 = shl nuw nsw i32 %61, 5
  %63 = or disjoint i32 %62, %47
  %64 = zext nneg i32 %63 to i64
  %65 = xor i32 %22, %35
  %66 = lshr i32 %15, 2
  %67 = and i32 %66, 24
  %68 = or disjoint i32 %45, %67
  %69 = shl nuw nsw i32 %68, 5
  %70 = or disjoint i32 %69, %65
  %71 = zext nneg i32 %70 to i64
  %72 = or disjoint i32 %70, 1024
  %73 = zext nneg i32 %72 to i64
  %74 = or disjoint i32 %70, 2048
  %75 = zext nneg i32 %74 to i64
  %76 = or disjoint i32 %70, 3072
  %77 = zext nneg i32 %76 to i64
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %33, !dbg !34
  %invariant.gep204 = getelementptr i8, ptr addrspace(1) %1, i64 %42, !dbg !34
  br label %78, !dbg !34

78:                                               ; preds = %4, %78
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %78 ]
  %79 = phi i32 [ -1, %4 ], [ %146, %78 ]
  %80 = phi i32 [ 0, %4 ], [ %208, %78 ]
  %81 = phi i32 [ 0, %4 ], [ %209, %78 ]
  %82 = phi i32 [ 0, %4 ], [ %210, %78 ]
  %83 = phi i32 [ 0, %4 ], [ %211, %78 ]
  %84 = phi i32 [ 0, %4 ], [ %213, %78 ]
  %85 = phi i32 [ 0, %4 ], [ %214, %78 ]
  %86 = phi i32 [ 0, %4 ], [ %215, %78 ]
  %87 = phi i32 [ 0, %4 ], [ %216, %78 ]
  %88 = phi i32 [ 0, %4 ], [ %218, %78 ]
  %89 = phi i32 [ 0, %4 ], [ %219, %78 ]
  %90 = phi i32 [ 0, %4 ], [ %220, %78 ]
  %91 = phi i32 [ 0, %4 ], [ %221, %78 ]
  %92 = phi i32 [ 0, %4 ], [ %223, %78 ]
  %93 = phi i32 [ 0, %4 ], [ %224, %78 ]
  %94 = phi i32 [ 0, %4 ], [ %225, %78 ]
  %95 = phi i32 [ 0, %4 ], [ %226, %78 ]
  %96 = phi i32 [ 0, %4 ], [ %228, %78 ]
  %97 = phi i32 [ 0, %4 ], [ %229, %78 ]
  %98 = phi i32 [ 0, %4 ], [ %230, %78 ]
  %99 = phi i32 [ 0, %4 ], [ %231, %78 ]
  %100 = phi i32 [ 0, %4 ], [ %233, %78 ]
  %101 = phi i32 [ 0, %4 ], [ %234, %78 ]
  %102 = phi i32 [ 0, %4 ], [ %235, %78 ]
  %103 = phi i32 [ 0, %4 ], [ %236, %78 ]
  %104 = phi i32 [ 0, %4 ], [ %238, %78 ]
  %105 = phi i32 [ 0, %4 ], [ %239, %78 ]
  %106 = phi i32 [ 0, %4 ], [ %240, %78 ]
  %107 = phi i32 [ 0, %4 ], [ %241, %78 ]
  %108 = phi i32 [ 0, %4 ], [ %243, %78 ]
  %109 = phi i32 [ 0, %4 ], [ %244, %78 ]
  %110 = phi i32 [ 0, %4 ], [ %245, %78 ]
  %111 = phi i32 [ 0, %4 ], [ %246, %78 ]
  %112 = phi i32 [ 0, %4 ], [ %248, %78 ]
  %113 = phi i32 [ 0, %4 ], [ %249, %78 ]
  %114 = phi i32 [ 0, %4 ], [ %250, %78 ]
  %115 = phi i32 [ 0, %4 ], [ %251, %78 ]
  %116 = phi i32 [ 0, %4 ], [ %253, %78 ]
  %117 = phi i32 [ 0, %4 ], [ %254, %78 ]
  %118 = phi i32 [ 0, %4 ], [ %255, %78 ]
  %119 = phi i32 [ 0, %4 ], [ %256, %78 ]
  %120 = phi i32 [ 0, %4 ], [ %258, %78 ]
  %121 = phi i32 [ 0, %4 ], [ %259, %78 ]
  %122 = phi i32 [ 0, %4 ], [ %260, %78 ]
  %123 = phi i32 [ 0, %4 ], [ %261, %78 ]
  %124 = phi i32 [ 0, %4 ], [ %263, %78 ]
  %125 = phi i32 [ 0, %4 ], [ %264, %78 ]
  %126 = phi i32 [ 0, %4 ], [ %265, %78 ]
  %127 = phi i32 [ 0, %4 ], [ %266, %78 ]
  %128 = phi i32 [ 0, %4 ], [ %268, %78 ]
  %129 = phi i32 [ 0, %4 ], [ %269, %78 ]
  %130 = phi i32 [ 0, %4 ], [ %270, %78 ]
  %131 = phi i32 [ 0, %4 ], [ %271, %78 ]
  %132 = phi i32 [ 0, %4 ], [ %273, %78 ]
  %133 = phi i32 [ 0, %4 ], [ %274, %78 ]
  %134 = phi i32 [ 0, %4 ], [ %275, %78 ]
  %135 = phi i32 [ 0, %4 ], [ %276, %78 ]
  %136 = phi i32 [ 0, %4 ], [ %278, %78 ]
  %137 = phi i32 [ 0, %4 ], [ %279, %78 ]
  %138 = phi i32 [ 0, %4 ], [ %280, %78 ]
  %139 = phi i32 [ 0, %4 ], [ %281, %78 ]
  %140 = phi i32 [ 0, %4 ], [ %283, %78 ]
  %141 = phi i32 [ 0, %4 ], [ %284, %78 ]
  %142 = phi i32 [ 0, %4 ], [ %285, %78 ]
  %143 = phi i32 [ 0, %4 ], [ %286, %78 ]
  %.not67 = icmp eq i64 %indvars.iv, 479, !dbg !34
  %144 = add i32 %79, 1, !dbg !34
  %145 = icmp ugt i32 %79, 2147483646, !dbg !34
  %146 = select i1 %145, i32 %144, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %147 = shl i32 %146, 12, !dbg !30
  %148 = sext i32 %147 to i64, !dbg !30
  %149 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %148, !dbg !30
  %150 = getelementptr inbounds nuw i8, ptr addrspace(3) %149, i64 %52, !dbg !30
  %151 = ptrtoint ptr addrspace(3) %150 to i64, !dbg !30
  %152 = trunc i64 %151 to i32, !dbg !30
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %152) #1, !dbg !30
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !30
  %158 = getelementptr inbounds nuw i8, ptr addrspace(3) %149, i64 %56, !dbg !30
  %159 = ptrtoint ptr addrspace(3) %158 to i64, !dbg !30
  %160 = trunc i64 %159 to i32, !dbg !30
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %160) #1, !dbg !30
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !30
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !30
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !30
  %166 = getelementptr inbounds nuw i8, ptr addrspace(3) %149, i64 %60, !dbg !30
  %167 = ptrtoint ptr addrspace(3) %166 to i64, !dbg !30
  %168 = trunc i64 %167 to i32, !dbg !30
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %168) #1, !dbg !30
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !30
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !30
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !30
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !30
  %174 = getelementptr inbounds nuw i8, ptr addrspace(3) %149, i64 %64, !dbg !30
  %175 = ptrtoint ptr addrspace(3) %174 to i64, !dbg !30
  %176 = trunc i64 %175 to i32, !dbg !30
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %176) #1, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !30
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !30
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !30
  %182 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %148, !dbg !33
  %183 = getelementptr inbounds nuw i8, ptr addrspace(3) %182, i64 %71, !dbg !33
  %184 = ptrtoint ptr addrspace(3) %183 to i64, !dbg !33
  %185 = trunc i64 %184 to i32, !dbg !33
  %186 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %185) #1, !dbg !33
  %187 = extractvalue { i32, i32 } %186, 0, !dbg !33
  %188 = extractvalue { i32, i32 } %186, 1, !dbg !33
  %189 = getelementptr inbounds nuw i8, ptr addrspace(3) %182, i64 %73, !dbg !33
  %190 = ptrtoint ptr addrspace(3) %189 to i64, !dbg !33
  %191 = trunc i64 %190 to i32, !dbg !33
  %192 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %191) #1, !dbg !33
  %193 = extractvalue { i32, i32 } %192, 0, !dbg !33
  %194 = extractvalue { i32, i32 } %192, 1, !dbg !33
  %195 = getelementptr inbounds nuw i8, ptr addrspace(3) %182, i64 %75, !dbg !33
  %196 = ptrtoint ptr addrspace(3) %195 to i64, !dbg !33
  %197 = trunc i64 %196 to i32, !dbg !33
  %198 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %197) #1, !dbg !33
  %199 = extractvalue { i32, i32 } %198, 0, !dbg !33
  %200 = extractvalue { i32, i32 } %198, 1, !dbg !33
  %201 = getelementptr inbounds nuw i8, ptr addrspace(3) %182, i64 %77, !dbg !33
  %202 = ptrtoint ptr addrspace(3) %201 to i64, !dbg !33
  %203 = trunc i64 %202 to i32, !dbg !33
  %204 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %203) #1, !dbg !33
  %205 = extractvalue { i32, i32 } %204, 0, !dbg !33
  %206 = extractvalue { i32, i32 } %204, 1, !dbg !33
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %80, i32 %81, i32 %82, i32 %83, i32 %154, i32 %155, i32 %156, i32 %157, i32 %187, i32 %188) #1, !dbg !35
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !35
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !35
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !35
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %84, i32 %85, i32 %86, i32 %87, i32 %154, i32 %155, i32 %156, i32 %157, i32 %193, i32 %194) #1, !dbg !35
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !35
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !35
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !35
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !35
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %88, i32 %89, i32 %90, i32 %91, i32 %154, i32 %155, i32 %156, i32 %157, i32 %199, i32 %200) #1, !dbg !35
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !35
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !35
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !35
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %92, i32 %93, i32 %94, i32 %95, i32 %154, i32 %155, i32 %156, i32 %157, i32 %205, i32 %206) #1, !dbg !35
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !35
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !35
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !35
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !35
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %96, i32 %97, i32 %98, i32 %99, i32 %162, i32 %163, i32 %164, i32 %165, i32 %187, i32 %188) #1, !dbg !35
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !35
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !35
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !35
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !35
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %100, i32 %101, i32 %102, i32 %103, i32 %162, i32 %163, i32 %164, i32 %165, i32 %193, i32 %194) #1, !dbg !35
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !35
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !35
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !35
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !35
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %104, i32 %105, i32 %106, i32 %107, i32 %162, i32 %163, i32 %164, i32 %165, i32 %199, i32 %200) #1, !dbg !35
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !35
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !35
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !35
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !35
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %108, i32 %109, i32 %110, i32 %111, i32 %162, i32 %163, i32 %164, i32 %165, i32 %205, i32 %206) #1, !dbg !35
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !35
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !35
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !35
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %112, i32 %113, i32 %114, i32 %115, i32 %170, i32 %171, i32 %172, i32 %173, i32 %187, i32 %188) #1, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !35
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !35
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !35
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !35
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %116, i32 %117, i32 %118, i32 %119, i32 %170, i32 %171, i32 %172, i32 %173, i32 %193, i32 %194) #1, !dbg !35
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !35
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !35
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !35
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !35
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %120, i32 %121, i32 %122, i32 %123, i32 %170, i32 %171, i32 %172, i32 %173, i32 %199, i32 %200) #1, !dbg !35
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !35
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !35
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !35
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !35
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %124, i32 %125, i32 %126, i32 %127, i32 %170, i32 %171, i32 %172, i32 %173, i32 %205, i32 %206) #1, !dbg !35
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !35
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !35
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !35
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !35
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %128, i32 %129, i32 %130, i32 %131, i32 %178, i32 %179, i32 %180, i32 %181, i32 %187, i32 %188) #1, !dbg !35
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !35
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !35
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !35
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !35
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %132, i32 %133, i32 %134, i32 %135, i32 %178, i32 %179, i32 %180, i32 %181, i32 %193, i32 %194) #1, !dbg !35
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !35
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !35
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !35
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !35
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %136, i32 %137, i32 %138, i32 %139, i32 %178, i32 %179, i32 %180, i32 %181, i32 %199, i32 %200) #1, !dbg !35
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !35
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !35
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !35
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !35
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %140, i32 %141, i32 %142, i32 %143, i32 %178, i32 %179, i32 %180, i32 %181, i32 %205, i32 %206) #1, !dbg !35
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !35
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !35
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !35
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %287 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !36
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %287, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %288 = select i1 %.not67, i32 0, i32 16, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %40, ptr addrspace(1) %gep, i32 %288) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep205 = getelementptr i8, ptr addrspace(1) %invariant.gep204, i64 %287, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %44, ptr addrspace(1) %gep205, i32 %288) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 480, !dbg !34
  br i1 %exitcond.not, label %289, label %78, !dbg !34

289:                                              ; preds = %78
  %290 = and i32 %21, 124, !dbg !19
  %291 = or disjoint i32 %24, %290, !dbg !22
  %292 = lshr i32 %15, 5, !dbg !19
  %293 = and i32 %292, 7, !dbg !19
  %294 = or disjoint i32 %293, %14, !dbg !20
  %295 = or disjoint i32 %294, 120, !dbg !20
  %296 = or disjoint i32 %294, 112, !dbg !20
  %297 = or disjoint i32 %294, 104, !dbg !20
  %298 = or disjoint i32 %294, 96, !dbg !20
  %299 = or disjoint i32 %294, 88, !dbg !20
  %300 = or disjoint i32 %294, 80, !dbg !20
  %301 = or disjoint i32 %294, 72, !dbg !20
  %302 = or disjoint i32 %294, 64, !dbg !20
  %303 = or disjoint i32 %294, 56, !dbg !20
  %304 = or disjoint i32 %294, 48, !dbg !20
  %305 = or disjoint i32 %294, 40, !dbg !20
  %306 = or disjoint i32 %294, 32, !dbg !20
  %307 = or disjoint i32 %294, 24, !dbg !20
  %308 = or disjoint i32 %294, 16, !dbg !20
  %309 = or disjoint i32 %294, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %310 = icmp slt i32 %294, 4112, !dbg !37
  %311 = icmp slt i32 %309, 4112, !dbg !37
  %312 = icmp slt i32 %308, 4112, !dbg !37
  %313 = icmp slt i32 %307, 4112, !dbg !37
  %314 = icmp slt i32 %306, 4112, !dbg !37
  %315 = icmp slt i32 %305, 4112, !dbg !37
  %316 = icmp slt i32 %304, 4112, !dbg !37
  %317 = icmp slt i32 %303, 4112, !dbg !37
  %318 = icmp slt i32 %302, 4112, !dbg !37
  %319 = icmp slt i32 %301, 4112, !dbg !37
  %320 = icmp slt i32 %300, 4112, !dbg !37
  %321 = icmp slt i32 %299, 4112, !dbg !37
  %322 = icmp slt i32 %298, 4112, !dbg !37
  %323 = icmp slt i32 %297, 4112, !dbg !37
  %324 = icmp slt i32 %296, 4112, !dbg !37
  %325 = icmp slt i32 %295, 4112, !dbg !37
  %326 = icmp slt i32 %291, 3072, !dbg !38
  %327 = and i1 %310, %326, !dbg !39
  %328 = and i1 %311, %326, !dbg !39
  %329 = and i1 %312, %326, !dbg !39
  %330 = and i1 %313, %326, !dbg !39
  %331 = and i1 %314, %326, !dbg !39
  %332 = and i1 %315, %326, !dbg !39
  %333 = and i1 %316, %326, !dbg !39
  %334 = and i1 %317, %326, !dbg !39
  %335 = and i1 %318, %326, !dbg !39
  %336 = and i1 %319, %326, !dbg !39
  %337 = and i1 %320, %326, !dbg !39
  %338 = and i1 %321, %326, !dbg !39
  %339 = and i1 %322, %326, !dbg !39
  %340 = and i1 %323, %326, !dbg !39
  %341 = and i1 %324, %326, !dbg !39
  %342 = and i1 %325, %326, !dbg !39
  %343 = mul i32 %294, 3072, !dbg !40
  %344 = mul i32 %309, 3072, !dbg !40
  %345 = mul i32 %308, 3072, !dbg !40
  %346 = mul i32 %307, 3072, !dbg !40
  %347 = mul i32 %306, 3072, !dbg !40
  %348 = mul i32 %305, 3072, !dbg !40
  %349 = mul i32 %304, 3072, !dbg !40
  %350 = mul i32 %303, 3072, !dbg !40
  %351 = mul i32 %302, 3072, !dbg !40
  %352 = mul i32 %301, 3072, !dbg !40
  %353 = mul i32 %300, 3072, !dbg !40
  %354 = mul i32 %299, 3072, !dbg !40
  %355 = mul i32 %298, 3072, !dbg !40
  %356 = mul i32 %297, 3072, !dbg !40
  %357 = mul i32 %296, 3072, !dbg !40
  %358 = mul i32 %295, 3072, !dbg !40
  %359 = add i32 %343, %291, !dbg !41
  %360 = add i32 %344, %291, !dbg !41
  %361 = add i32 %345, %291, !dbg !41
  %362 = add i32 %346, %291, !dbg !41
  %363 = add i32 %347, %291, !dbg !41
  %364 = add i32 %348, %291, !dbg !41
  %365 = add i32 %349, %291, !dbg !41
  %366 = add i32 %350, %291, !dbg !41
  %367 = add i32 %351, %291, !dbg !41
  %368 = add i32 %352, %291, !dbg !41
  %369 = add i32 %353, %291, !dbg !41
  %370 = add i32 %354, %291, !dbg !41
  %371 = add i32 %355, %291, !dbg !41
  %372 = add i32 %356, %291, !dbg !41
  %373 = add i32 %357, %291, !dbg !41
  %374 = add i32 %358, %291, !dbg !41
  %375 = sext i32 %359 to i64, !dbg !42
  %376 = getelementptr i32, ptr addrspace(1) %2, i64 %375, !dbg !42
  %377 = sext i32 %360 to i64, !dbg !42
  %378 = getelementptr i32, ptr addrspace(1) %2, i64 %377, !dbg !42
  %379 = sext i32 %361 to i64, !dbg !42
  %380 = getelementptr i32, ptr addrspace(1) %2, i64 %379, !dbg !42
  %381 = sext i32 %362 to i64, !dbg !42
  %382 = getelementptr i32, ptr addrspace(1) %2, i64 %381, !dbg !42
  %383 = sext i32 %363 to i64, !dbg !42
  %384 = getelementptr i32, ptr addrspace(1) %2, i64 %383, !dbg !42
  %385 = sext i32 %364 to i64, !dbg !42
  %386 = getelementptr i32, ptr addrspace(1) %2, i64 %385, !dbg !42
  %387 = sext i32 %365 to i64, !dbg !42
  %388 = getelementptr i32, ptr addrspace(1) %2, i64 %387, !dbg !42
  %389 = sext i32 %366 to i64, !dbg !42
  %390 = getelementptr i32, ptr addrspace(1) %2, i64 %389, !dbg !42
  %391 = sext i32 %367 to i64, !dbg !42
  %392 = getelementptr i32, ptr addrspace(1) %2, i64 %391, !dbg !42
  %393 = sext i32 %368 to i64, !dbg !42
  %394 = getelementptr i32, ptr addrspace(1) %2, i64 %393, !dbg !42
  %395 = sext i32 %369 to i64, !dbg !42
  %396 = getelementptr i32, ptr addrspace(1) %2, i64 %395, !dbg !42
  %397 = sext i32 %370 to i64, !dbg !42
  %398 = getelementptr i32, ptr addrspace(1) %2, i64 %397, !dbg !42
  %399 = sext i32 %371 to i64, !dbg !42
  %400 = getelementptr i32, ptr addrspace(1) %2, i64 %399, !dbg !42
  %401 = sext i32 %372 to i64, !dbg !42
  %402 = getelementptr i32, ptr addrspace(1) %2, i64 %401, !dbg !42
  %403 = sext i32 %373 to i64, !dbg !42
  %404 = getelementptr i32, ptr addrspace(1) %2, i64 %403, !dbg !42
  %405 = sext i32 %374 to i64, !dbg !42
  %406 = getelementptr i32, ptr addrspace(1) %2, i64 %405, !dbg !42
  %407 = shl i32 %15, 1, !dbg !43
  %408 = and i32 %407, 6, !dbg !43
  %409 = shl i32 %15, 5, !dbg !43
  %410 = and i32 %409, 384, !dbg !43
  %411 = or disjoint i32 %410, %408, !dbg !43
  %412 = shl nuw nsw i32 %17, 5, !dbg !43
  %413 = or disjoint i32 %411, %412, !dbg !43
  %414 = and i32 %66, 24, !dbg !43
  %415 = or disjoint i32 %413, %414, !dbg !43
  %416 = shl nuw nsw i32 %18, 4, !dbg !43
  %417 = or disjoint i32 %415, %416, !dbg !43
  %418 = and i32 %21, 1020, !dbg !43
  %419 = lshr i32 %417, 5, !dbg !43
  %420 = add nuw nsw i32 %419, %417, !dbg !43
  %421 = zext nneg i32 %420 to i64, !dbg !43
  %422 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %421, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %422, i32 %208, i32 %209, i1 true) #1, !dbg !43
  %423 = or disjoint i32 %417, 1024, !dbg !43
  %424 = lshr i32 %423, 5, !dbg !43
  %425 = add nuw nsw i32 %424, %423, !dbg !43
  %426 = zext nneg i32 %425 to i64, !dbg !43
  %427 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %426, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %427, i32 %210, i32 %211, i1 true) #1, !dbg !43
  %428 = or disjoint i32 %417, 32, !dbg !43
  %429 = add nuw nsw i32 %428, %419, !dbg !43
  %430 = zext nneg i32 %429 to i64, !dbg !43
  %431 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %430, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %431, i32 %213, i32 %214, i1 true) #1, !dbg !43
  %432 = or disjoint i32 %417, 1056, !dbg !43
  %433 = lshr i32 %432, 5, !dbg !43
  %434 = and i32 %433, 134217724, !dbg !43
  %435 = add nuw nsw i32 %434, %432, !dbg !43
  %436 = zext nneg i32 %435 to i64, !dbg !43
  %437 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %436, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %215, i32 %216, i1 true) #1, !dbg !43
  %438 = or disjoint i32 %417, 64, !dbg !43
  %439 = add nuw nsw i32 %438, %419, !dbg !43
  %440 = zext nneg i32 %439 to i64, !dbg !43
  %441 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %440, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %441, i32 %218, i32 %219, i1 true) #1, !dbg !43
  %442 = or disjoint i32 %417, 1088, !dbg !43
  %443 = lshr i32 %442, 5, !dbg !43
  %444 = and i32 %443, 134217724, !dbg !43
  %445 = add nuw nsw i32 %444, %442, !dbg !43
  %446 = zext nneg i32 %445 to i64, !dbg !43
  %447 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %446, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %220, i32 %221, i1 true) #1, !dbg !43
  %448 = or disjoint i32 %417, 96, !dbg !43
  %449 = add nuw nsw i32 %448, %419, !dbg !43
  %450 = zext nneg i32 %449 to i64, !dbg !43
  %451 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %450, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %223, i32 %224, i1 true) #1, !dbg !43
  %452 = or disjoint i32 %417, 1120, !dbg !43
  %453 = lshr i32 %452, 5, !dbg !43
  %454 = and i32 %453, 134217724, !dbg !43
  %455 = add nuw nsw i32 %454, %452, !dbg !43
  %456 = zext nneg i32 %455 to i64, !dbg !43
  %457 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %456, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %457, i32 %225, i32 %226, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %458 = lshr i32 %21, 5, !dbg !43
  %459 = and i32 %458, 28, !dbg !43
  %460 = add nuw nsw i32 %459, %418, !dbg !43
  %461 = zext nneg i32 %460 to i64, !dbg !43
  %462 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %461, !dbg !43
  %463 = load <4 x i32>, ptr addrspace(3) %462, align 16, !dbg !43
  %464 = or disjoint i32 %418, 1024, !dbg !43
  %465 = lshr i32 %464, 5, !dbg !43
  %466 = and i32 %465, 60, !dbg !43
  %467 = add nuw nsw i32 %466, %464, !dbg !43
  %468 = zext nneg i32 %467 to i64, !dbg !43
  %469 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %468, !dbg !43
  %470 = load <4 x i32>, ptr addrspace(3) %469, align 16, !dbg !43
  %471 = or disjoint i32 %418, 2048, !dbg !43
  %472 = lshr i32 %471, 5, !dbg !43
  %473 = and i32 %472, 92, !dbg !43
  %474 = add nuw nsw i32 %473, %471, !dbg !43
  %475 = zext nneg i32 %474 to i64, !dbg !43
  %476 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %475, !dbg !43
  %477 = load <4 x i32>, ptr addrspace(3) %476, align 16, !dbg !43
  %478 = or disjoint i32 %418, 3072, !dbg !43
  %479 = lshr i32 %478, 5, !dbg !43
  %480 = and i32 %479, 124, !dbg !43
  %481 = add nuw nsw i32 %480, %478, !dbg !43
  %482 = zext nneg i32 %481 to i64, !dbg !43
  %483 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %482, !dbg !43
  %484 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %422, i32 %228, i32 %229, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %427, i32 %230, i32 %231, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %431, i32 %233, i32 %234, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %235, i32 %236, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %441, i32 %238, i32 %239, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %240, i32 %241, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %243, i32 %244, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %457, i32 %245, i32 %246, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %485 = load <4 x i32>, ptr addrspace(3) %462, align 16, !dbg !43
  %486 = load <4 x i32>, ptr addrspace(3) %469, align 16, !dbg !43
  %487 = load <4 x i32>, ptr addrspace(3) %476, align 16, !dbg !43
  %488 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %422, i32 %248, i32 %249, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %427, i32 %250, i32 %251, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %431, i32 %253, i32 %254, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %255, i32 %256, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %441, i32 %258, i32 %259, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %260, i32 %261, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %263, i32 %264, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %457, i32 %265, i32 %266, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %489 = load <4 x i32>, ptr addrspace(3) %462, align 16, !dbg !43
  %490 = load <4 x i32>, ptr addrspace(3) %469, align 16, !dbg !43
  %491 = load <4 x i32>, ptr addrspace(3) %476, align 16, !dbg !43
  %492 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %422, i32 %268, i32 %269, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %427, i32 %270, i32 %271, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %431, i32 %273, i32 %274, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %275, i32 %276, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %441, i32 %278, i32 %279, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %280, i32 %281, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %283, i32 %284, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %457, i32 %285, i32 %286, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %493 = load <4 x i32>, ptr addrspace(3) %462, align 16, !dbg !43
  %494 = load <4 x i32>, ptr addrspace(3) %469, align 16, !dbg !43
  %495 = load <4 x i32>, ptr addrspace(3) %476, align 16, !dbg !43
  %496 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %463, i64 0, !dbg !43
  %.extract4 = extractelement <4 x i32> %463, i64 1, !dbg !43
  %.extract5 = extractelement <4 x i32> %463, i64 2, !dbg !43
  %.extract6 = extractelement <4 x i32> %463, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %376, i1 %327) #1, !dbg !43
  %.extract7 = extractelement <4 x i32> %470, i64 0, !dbg !43
  %.extract8 = extractelement <4 x i32> %470, i64 1, !dbg !43
  %.extract9 = extractelement <4 x i32> %470, i64 2, !dbg !43
  %.extract10 = extractelement <4 x i32> %470, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %378, i1 %328) #1, !dbg !43
  %.extract11 = extractelement <4 x i32> %477, i64 0, !dbg !43
  %.extract12 = extractelement <4 x i32> %477, i64 1, !dbg !43
  %.extract13 = extractelement <4 x i32> %477, i64 2, !dbg !43
  %.extract14 = extractelement <4 x i32> %477, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %380, i1 %329) #1, !dbg !43
  %.extract15 = extractelement <4 x i32> %484, i64 0, !dbg !43
  %.extract16 = extractelement <4 x i32> %484, i64 1, !dbg !43
  %.extract17 = extractelement <4 x i32> %484, i64 2, !dbg !43
  %.extract18 = extractelement <4 x i32> %484, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %382, i1 %330) #1, !dbg !43
  %.extract19 = extractelement <4 x i32> %485, i64 0, !dbg !43
  %.extract20 = extractelement <4 x i32> %485, i64 1, !dbg !43
  %.extract21 = extractelement <4 x i32> %485, i64 2, !dbg !43
  %.extract22 = extractelement <4 x i32> %485, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %384, i1 %331) #1, !dbg !43
  %.extract23 = extractelement <4 x i32> %486, i64 0, !dbg !43
  %.extract24 = extractelement <4 x i32> %486, i64 1, !dbg !43
  %.extract25 = extractelement <4 x i32> %486, i64 2, !dbg !43
  %.extract26 = extractelement <4 x i32> %486, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %386, i1 %332) #1, !dbg !43
  %.extract27 = extractelement <4 x i32> %487, i64 0, !dbg !43
  %.extract28 = extractelement <4 x i32> %487, i64 1, !dbg !43
  %.extract29 = extractelement <4 x i32> %487, i64 2, !dbg !43
  %.extract30 = extractelement <4 x i32> %487, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %388, i1 %333) #1, !dbg !43
  %.extract31 = extractelement <4 x i32> %488, i64 0, !dbg !43
  %.extract32 = extractelement <4 x i32> %488, i64 1, !dbg !43
  %.extract33 = extractelement <4 x i32> %488, i64 2, !dbg !43
  %.extract34 = extractelement <4 x i32> %488, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %390, i1 %334) #1, !dbg !43
  %.extract35 = extractelement <4 x i32> %489, i64 0, !dbg !43
  %.extract36 = extractelement <4 x i32> %489, i64 1, !dbg !43
  %.extract37 = extractelement <4 x i32> %489, i64 2, !dbg !43
  %.extract38 = extractelement <4 x i32> %489, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %392, i1 %335) #1, !dbg !43
  %.extract39 = extractelement <4 x i32> %490, i64 0, !dbg !43
  %.extract40 = extractelement <4 x i32> %490, i64 1, !dbg !43
  %.extract41 = extractelement <4 x i32> %490, i64 2, !dbg !43
  %.extract42 = extractelement <4 x i32> %490, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %394, i1 %336) #1, !dbg !43
  %.extract43 = extractelement <4 x i32> %491, i64 0, !dbg !43
  %.extract44 = extractelement <4 x i32> %491, i64 1, !dbg !43
  %.extract45 = extractelement <4 x i32> %491, i64 2, !dbg !43
  %.extract46 = extractelement <4 x i32> %491, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %396, i1 %337) #1, !dbg !43
  %.extract47 = extractelement <4 x i32> %492, i64 0, !dbg !43
  %.extract48 = extractelement <4 x i32> %492, i64 1, !dbg !43
  %.extract49 = extractelement <4 x i32> %492, i64 2, !dbg !43
  %.extract50 = extractelement <4 x i32> %492, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %398, i1 %338) #1, !dbg !43
  %.extract51 = extractelement <4 x i32> %493, i64 0, !dbg !43
  %.extract52 = extractelement <4 x i32> %493, i64 1, !dbg !43
  %.extract53 = extractelement <4 x i32> %493, i64 2, !dbg !43
  %.extract54 = extractelement <4 x i32> %493, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract51, i32 %.extract52, i32 %.extract53, i32 %.extract54, ptr addrspace(1) %400, i1 %339) #1, !dbg !43
  %.extract55 = extractelement <4 x i32> %494, i64 0, !dbg !43
  %.extract56 = extractelement <4 x i32> %494, i64 1, !dbg !43
  %.extract57 = extractelement <4 x i32> %494, i64 2, !dbg !43
  %.extract58 = extractelement <4 x i32> %494, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract55, i32 %.extract56, i32 %.extract57, i32 %.extract58, ptr addrspace(1) %402, i1 %340) #1, !dbg !43
  %.extract59 = extractelement <4 x i32> %495, i64 0, !dbg !43
  %.extract60 = extractelement <4 x i32> %495, i64 1, !dbg !43
  %.extract61 = extractelement <4 x i32> %495, i64 2, !dbg !43
  %.extract62 = extractelement <4 x i32> %495, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %404, i1 %341) #1, !dbg !43
  %.extract63 = extractelement <4 x i32> %496, i64 0, !dbg !43
  %.extract64 = extractelement <4 x i32> %496, i64 1, !dbg !43
  %.extract65 = extractelement <4 x i32> %496, i64 2, !dbg !43
  %.extract66 = extractelement <4 x i32> %496, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %406, i1 %342) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfk4hfgmzfsoq54nxkpwhyoqzok3ky53h4w3cvfqd7jamhswgpq2.py", directory: "/tmp/torchinductor_root/fk")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 31, scope: !6)
!27 = !DILocation(line: 77, column: 56, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
