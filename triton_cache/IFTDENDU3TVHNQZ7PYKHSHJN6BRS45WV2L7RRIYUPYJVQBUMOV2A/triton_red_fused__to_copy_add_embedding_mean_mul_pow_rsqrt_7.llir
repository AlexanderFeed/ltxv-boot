; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/vk/cvkaebxyomoxsqaxavllrfibzcxlvyxdu4omwa4ryyrzmjcazngj.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 3, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = lshr i32 %12, 6, !dbg !13
  %15 = and i32 %14, 7, !dbg !13
  %16 = or disjoint i32 %15, %11, !dbg !14
  %17 = or disjoint i32 %11, 2, !dbg !14
  %18 = or disjoint i32 %11, 4, !dbg !14
  %19 = or disjoint i32 %11, 6, !dbg !14
  %20 = icmp slt i32 %16, 512, !dbg !15
  %21 = icmp slt i32 %11, 512, !dbg !15
  %22 = and i32 %12, 31, !dbg !16
  %23 = shl i32 %12, 3, !dbg !16
  %24 = and i32 %23, 504, !dbg !16
  %25 = and i32 %12, 511, !dbg !16
  %26 = sext i32 %16 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = sext i32 %11 to i64, !dbg !17
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !17
  %30 = sext i32 %17 to i64, !dbg !17
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = sext i32 %18 to i64, !dbg !17
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !17
  %34 = sext i32 %19 to i64, !dbg !17
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !17
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #6, !dbg !18
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 %21) #6, !dbg !18
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !18
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !18
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 %21) #6, !dbg !18
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !18
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !18
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 %21) #6, !dbg !18
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !18
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !18
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 %21) #6, !dbg !18
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !18
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !18
  %56 = shl i32 %16, 12, !dbg !19
  %57 = icmp slt i64 %43, 0, !dbg !20
  %58 = insertelement <8 x i64> poison, i64 %55, i64 0, !dbg !21
  %59 = insertelement <8 x i64> %58, i64 %54, i64 1, !dbg !21
  %60 = insertelement <8 x i64> %59, i64 %52, i64 2, !dbg !21
  %61 = insertelement <8 x i64> %60, i64 %51, i64 3, !dbg !21
  %62 = insertelement <8 x i64> %61, i64 %49, i64 4, !dbg !21
  %63 = insertelement <8 x i64> %62, i64 %48, i64 5, !dbg !21
  %64 = insertelement <8 x i64> %63, i64 %46, i64 6, !dbg !21
  %65 = insertelement <8 x i64> %64, i64 %45, i64 7, !dbg !21
  %66 = add <8 x i64> %65, splat (i64 32128), !dbg !21
  %67 = icmp slt <8 x i64> %65, zeroinitializer, !dbg !20
  %68 = select <8 x i1> %67, <8 x i64> %66, <8 x i64> %65, !dbg !22
  %69 = icmp ult <8 x i64> %68, splat (i64 32128), !dbg !23
  %70 = xor i1 %21, true, !dbg !24
  %71 = shl i64 %43, 12, !dbg !25
  %72 = add i64 %71, 131596288, !dbg !25
  %73 = select i1 %57, i64 %72, i64 %71, !dbg !25
  %invariant.op = or disjoint i32 %24, %56, !dbg !26
  %74 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %75 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %76 = and <8 x i1> %74, %75, !dbg !26
  %77 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %78 = and <8 x i1> %76, %77, !dbg !26
  %79 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %80 = and <8 x i1> %78, %79, !dbg !26
  %81 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %shift91 = and <8 x i1> %80, %81, !dbg !26
  %shift92 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %82 = and <8 x i1> %shift91, %shift92
  %shift93 = shufflevector <8 x i1> %69, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %83 = and <8 x i1> %82, %shift93
  %84 = and <8 x i1> %83, %69
  %85 = extractelement <8 x i1> %84, i64 0
  %.demorgan22.reass = or i1 %85, %70
  %86 = zext nneg i32 %24 to i64, !dbg !26
  %invariant.op77 = or disjoint i64 %73, %86, !dbg !26
  %87 = insertelement <8 x i1> poison, i1 %20, i64 0, !dbg !27
  %88 = shufflevector <8 x i1> %87, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !27
  br label %89, !dbg !26

89:                                               ; preds = %9, %98
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %98 ]
  %90 = phi <8 x float> [ zeroinitializer, %9 ], [ %159, %98 ]
  %91 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %91
  %92 = sext i32 %.reass to i64, !dbg !28
  %93 = getelementptr bfloat, ptr addrspace(1) %2, i64 %92, !dbg !28
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %93, i1 %20) #6, !dbg !29
  %95 = getelementptr bfloat, ptr addrspace(1) %3, i64 %92, !dbg !30
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %95, i1 %20) #6, !dbg !31
  br i1 %.demorgan22.reass, label %98, label %97, !dbg !32

97:                                               ; preds = %89
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 43, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

98:                                               ; preds = %89
  %99 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !31
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !31
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !31
  %103 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !31
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !31
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !29
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !29
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !29
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !29
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.reass78 = or i64 %indvars.iv, %invariant.op77
  %115 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass78, !dbg !33
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %115, i1 %20) #6, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !34
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !34
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !34
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !34
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !34
  %125 = shufflevector <2 x bfloat> %106, <2 x bfloat> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %126 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %127 = shufflevector <8 x bfloat> %125, <8 x bfloat> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !35
  %128 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %129 = shufflevector <8 x bfloat> %127, <8 x bfloat> %128, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !35
  %130 = shufflevector <2 x bfloat> %100, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %131 = shufflevector <8 x bfloat> %129, <8 x bfloat> %130, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !35
  %132 = shufflevector <2 x bfloat> %100, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %133 = shufflevector <8 x bfloat> %131, <8 x bfloat> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !35
  %134 = fpext <8 x bfloat> %133 to <8 x float>, !dbg !35
  %135 = shufflevector <2 x bfloat> %114, <2 x bfloat> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %136 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %137 = shufflevector <8 x bfloat> %135, <8 x bfloat> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !36
  %138 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %139 = shufflevector <8 x bfloat> %137, <8 x bfloat> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !36
  %140 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %141 = shufflevector <8 x bfloat> %139, <8 x bfloat> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !36
  %142 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %143 = shufflevector <8 x bfloat> %141, <8 x bfloat> %142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !36
  %144 = fpext <8 x bfloat> %143 to <8 x float>, !dbg !36
  %145 = shufflevector <2 x bfloat> %118, <2 x bfloat> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %146 = shufflevector <2 x bfloat> %122, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %147 = shufflevector <8 x bfloat> %145, <8 x bfloat> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !37
  %148 = shufflevector <2 x bfloat> %122, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %149 = shufflevector <8 x bfloat> %147, <8 x bfloat> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !37
  %150 = shufflevector <2 x bfloat> %124, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %151 = shufflevector <8 x bfloat> %149, <8 x bfloat> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !37
  %152 = shufflevector <2 x bfloat> %124, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %153 = shufflevector <8 x bfloat> %151, <8 x bfloat> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !37
  %154 = fpext <8 x bfloat> %153 to <8 x float>, !dbg !37
  %155 = fadd <8 x float> %144, %154, !dbg !38
  %156 = fadd <8 x float> %155, %134, !dbg !39
  %157 = fmul <8 x float> %156, %156, !dbg !40
  %158 = fadd <8 x float> %90, %157, !dbg !41
  %159 = select <8 x i1> %88, <8 x float> %158, <8 x float> %90, !dbg !27
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !26
  %160 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !26
  br i1 %160, label %89, label %__nv_rsqrtf.exit, !dbg !26

__nv_rsqrtf.exit:                                 ; preds = %98
  %shift94 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %161 = fadd <8 x float> %159, %shift94, !dbg !42
  %shift95 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %162 = fadd <8 x float> %shift95, %161, !dbg !42
  %shift96 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %163 = fadd <8 x float> %shift96, %162, !dbg !42
  %shift97 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %164 = fadd <8 x float> %shift97, %163, !dbg !42
  %shift98 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %165 = fadd <8 x float> %shift98, %164, !dbg !42
  %shift99 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %166 = fadd <8 x float> %shift99, %165, !dbg !42
  %shift100 = shufflevector <8 x float> %159, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %167 = fadd <8 x float> %shift100, %166, !dbg !42
  %168 = extractelement <8 x float> %167, i64 0, !dbg !42
  %169 = bitcast float %168 to i32, !dbg !47
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 16, i32 31), !dbg !47
  %171 = bitcast i32 %170 to float, !dbg !47
  %172 = fadd float %168, %171, !dbg !42
  %173 = bitcast float %172 to i32, !dbg !47
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !47
  %175 = bitcast i32 %174 to float, !dbg !47
  %176 = fadd float %172, %175, !dbg !42
  %177 = bitcast float %176 to i32, !dbg !47
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !47
  %179 = bitcast i32 %178 to float, !dbg !47
  %180 = fadd float %176, %179, !dbg !42
  %181 = bitcast float %180 to i32, !dbg !47
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !47
  %183 = bitcast i32 %182 to float, !dbg !47
  %184 = fadd float %180, %183, !dbg !42
  %185 = bitcast float %184 to i32, !dbg !47
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !47
  %187 = bitcast i32 %186 to float, !dbg !47
  %188 = fadd float %184, %187, !dbg !42
  %189 = and i32 %13, 1, !dbg !47
  %190 = icmp eq i32 %22, 0, !dbg !47
  %191 = shl nuw nsw i32 %15, 1, !dbg !47
  %192 = or disjoint i32 %191, %189, !dbg !47
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !47
  %194 = bitcast float %188 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 %190) #6, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %195 = icmp slt i32 %12, 16, !dbg !47
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !47
  %197 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #6, !dbg !47
  %198 = bitcast i32 %197 to float, !dbg !47
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !47
  %200 = bitcast i32 %199 to float, !dbg !47
  %201 = fadd float %198, %200, !dbg !42
  %202 = and i32 %12, 1, !dbg !47
  %203 = icmp eq i32 %202, 0, !dbg !47
  %204 = and i1 %195, %203, !dbg !47
  %205 = bitcast float %201 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %205, i1 %204) #6, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !47
  %207 = load float, ptr addrspace(3) %206, align 8, !dbg !47
  %208 = tail call float @llvm.nvvm.div.full(float %207, float 4.096000e+03), !dbg !48
  %209 = fadd float %208, 0x3EB0C6F7A0000000, !dbg !49
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !50
  %.not.i41 = icmp eq i32 %217, 0, !dbg !50
  br i1 %.not.i41, label %220, label %218, !dbg !50

218:                                              ; preds = %__nv_rsqrtf.exit
  %219 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !50
  br label %__nv_rsqrtf.exit43, !dbg !50

220:                                              ; preds = %__nv_rsqrtf.exit
  %221 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !50
  br label %__nv_rsqrtf.exit43, !dbg !50

__nv_rsqrtf.exit43:                               ; preds = %218, %220
  %.0.i42 = phi float [ %219, %218 ], [ %221, %220 ], !dbg !50
  %222 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25
  %223 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %224 = or disjoint i32 %24, 4
  %225 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %224
  %226 = zext nneg i32 %25 to i64, !dbg !51
  %invariant.op79 = or disjoint i64 %73, %86, !dbg !51
  %227 = getelementptr inbounds nuw i8, ptr addrspace(3) %223, i32 8
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) %225, i32 8
  %229 = insertelement <2 x float> poison, float %.0.i42, i64 0, !dbg !52
  %230 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  br label %231, !dbg !51

231:                                              ; preds = %231, %__nv_rsqrtf.exit43
  %indvars.iv64 = phi i64 [ 0, %__nv_rsqrtf.exit43 ], [ %indvars.iv.next65, %231 ]
  %232 = or disjoint i64 %indvars.iv64, %226, !dbg !53
  %233 = getelementptr bfloat, ptr addrspace(1) %4, i64 %232, !dbg !54
  %234 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %233, i1 true) #6, !dbg !55
  %235 = trunc nuw nsw i64 %indvars.iv64 to i32
  %.reass51 = or i32 %invariant.op, %235
  %236 = sext i32 %.reass51 to i64, !dbg !56
  %237 = getelementptr bfloat, ptr addrspace(1) %2, i64 %236, !dbg !56
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %237, i1 %20) #6, !dbg !57
  %239 = getelementptr bfloat, ptr addrspace(1) %3, i64 %236, !dbg !58
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %239, i1 %20) #6, !dbg !59
  %241 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !59
  %242 = bitcast i32 %241 to <2 x bfloat>, !dbg !59
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !59
  %244 = bitcast i32 %243 to <2 x bfloat>, !dbg !59
  %245 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !59
  %246 = bitcast i32 %245 to <2 x bfloat>, !dbg !59
  %247 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !59
  %248 = bitcast i32 %247 to <2 x bfloat>, !dbg !59
  %249 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !57
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !57
  %251 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !57
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !57
  %253 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !57
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !57
  %255 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !57
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !57
  %257 = bitcast i16 %234 to bfloat, !dbg !55
  %258 = fpext bfloat %257 to float, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %.reass80 = or i64 %indvars.iv64, %invariant.op79
  %259 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass80, !dbg !62
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %259, i1 %20) #6, !dbg !63
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !63
  %262 = bitcast i32 %261 to <2 x bfloat>, !dbg !63
  %263 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !63
  %264 = bitcast i32 %263 to <2 x bfloat>, !dbg !63
  %265 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !63
  %266 = bitcast i32 %265 to <2 x bfloat>, !dbg !63
  %267 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !63
  %268 = bitcast i32 %267 to <2 x bfloat>, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %269 = bitcast float %258 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %269, i1 true) #6, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %270 = getelementptr bfloat, ptr addrspace(1) %5, i64 %236, !dbg !65
  %271 = fpext <2 x bfloat> %248 to <2 x float>, !dbg !66
  %272 = fpext <2 x bfloat> %256 to <2 x float>, !dbg !67
  %273 = fpext <2 x bfloat> %262 to <2 x float>, !dbg !68
  %274 = fadd <2 x float> %272, %273, !dbg !69
  %275 = fadd <2 x float> %274, %271, !dbg !70
  %276 = fmul <2 x float> %230, %275, !dbg !52
  %277 = load <2 x float>, ptr addrspace(3) %223, align 16, !dbg !64
  %278 = fmul <2 x float> %277, %276, !dbg !64
  %279 = fptrunc <2 x float> %278 to <2 x bfloat>, !dbg !71
  %280 = fpext <2 x bfloat> %246 to <2 x float>, !dbg !66
  %281 = fpext <2 x bfloat> %254 to <2 x float>, !dbg !67
  %282 = fpext <2 x bfloat> %264 to <2 x float>, !dbg !68
  %283 = fadd <2 x float> %281, %282, !dbg !69
  %284 = fadd <2 x float> %283, %280, !dbg !70
  %285 = fmul <2 x float> %230, %284, !dbg !52
  %286 = load <2 x float>, ptr addrspace(3) %227, align 8, !dbg !64
  %287 = fmul <2 x float> %286, %285, !dbg !64
  %288 = fptrunc <2 x float> %287 to <2 x bfloat>, !dbg !71
  %289 = fpext <2 x bfloat> %244 to <2 x float>, !dbg !66
  %290 = fpext <2 x bfloat> %252 to <2 x float>, !dbg !67
  %291 = fpext <2 x bfloat> %266 to <2 x float>, !dbg !68
  %292 = fadd <2 x float> %290, %291, !dbg !69
  %293 = fadd <2 x float> %292, %289, !dbg !70
  %294 = fmul <2 x float> %230, %293, !dbg !52
  %295 = load <2 x float>, ptr addrspace(3) %225, align 16, !dbg !64
  %296 = fmul <2 x float> %295, %294, !dbg !64
  %297 = fptrunc <2 x float> %296 to <2 x bfloat>, !dbg !71
  %298 = fpext <2 x bfloat> %242 to <2 x float>, !dbg !66
  %299 = fpext <2 x bfloat> %250 to <2 x float>, !dbg !67
  %300 = fpext <2 x bfloat> %268 to <2 x float>, !dbg !68
  %301 = fadd <2 x float> %299, %300, !dbg !69
  %302 = fadd <2 x float> %301, %298, !dbg !70
  %303 = fmul <2 x float> %230, %302, !dbg !52
  %304 = load <2 x float>, ptr addrspace(3) %228, align 8, !dbg !64
  %305 = fmul <2 x float> %304, %303, !dbg !64
  %306 = fptrunc <2 x float> %305 to <2 x bfloat>, !dbg !71
  %307 = bitcast <2 x bfloat> %279 to i32, !dbg !71
  %308 = bitcast <2 x bfloat> %288 to i32, !dbg !71
  %309 = bitcast <2 x bfloat> %297 to i32, !dbg !71
  %310 = bitcast <2 x bfloat> %306 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %270, i1 %20) #6, !dbg !71
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 512, !dbg !51
  %311 = icmp samesign ult i64 %indvars.iv64, 3584, !dbg !51
  br i1 %311, label %231, label %312, !dbg !51

312:                                              ; preds = %231
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvkaebxyomoxsqaxavllrfibzcxlvyxdu4omwa4ryyrzmjcazngj.py", directory: "/tmp/torchinductor_root/vk")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 46, scope: !10)
!20 = !DILocation(line: 41, column: 22, scope: !10)
!21 = !DILocation(line: 40, column: 22, scope: !10)
!22 = !DILocation(line: 42, column: 36, scope: !10)
!23 = !DILocation(line: 43, column: 41, scope: !10)
!24 = !DILocation(line: 43, column: 60, scope: !10)
!25 = !DILocation(line: 44, column: 46, scope: !10)
!26 = !DILocation(line: 31, column: 40, scope: !10)
!27 = !DILocation(line: 51, column: 50, scope: !10)
!28 = !DILocation(line: 37, column: 34, scope: !10)
!29 = !DILocation(line: 37, column: 51, scope: !10)
!30 = !DILocation(line: 38, column: 34, scope: !10)
!31 = !DILocation(line: 38, column: 51, scope: !10)
!32 = !DILocation(line: 43, column: 68, scope: !10)
!33 = !DILocation(line: 44, column: 34, scope: !10)
!34 = !DILocation(line: 44, column: 53, scope: !10)
!35 = !DILocation(line: 38, column: 112, scope: !10)
!36 = !DILocation(line: 37, column: 112, scope: !10)
!37 = !DILocation(line: 44, column: 114, scope: !10)
!38 = !DILocation(line: 45, column: 22, scope: !10)
!39 = !DILocation(line: 46, column: 23, scope: !10)
!40 = !DILocation(line: 48, column: 24, scope: !10)
!41 = !DILocation(line: 50, column: 25, scope: !10)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !10, file: !44, discriminator: 0)
!46 = !DILocation(line: 52, column: 27, scope: !10)
!47 = !DILocation(line: 286, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 72, column: 25, scope: !10)
!49 = !DILocation(line: 74, column: 24, scope: !10)
!50 = !DILocation(line: 75, column: 32, scope: !10)
!51 = !DILocation(line: 53, column: 40, scope: !10)
!52 = !DILocation(line: 76, column: 24, scope: !10)
!53 = !DILocation(line: 54, column: 31, scope: !10)
!54 = !DILocation(line: 59, column: 35, scope: !10)
!55 = !DILocation(line: 59, column: 42, scope: !10)
!56 = !DILocation(line: 60, column: 35, scope: !10)
!57 = !DILocation(line: 60, column: 52, scope: !10)
!58 = !DILocation(line: 61, column: 35, scope: !10)
!59 = !DILocation(line: 61, column: 52, scope: !10)
!60 = !DILocation(line: 59, column: 95, scope: !10)
!61 = !DILocation(line: 66, column: 70, scope: !10)
!62 = !DILocation(line: 67, column: 35, scope: !10)
!63 = !DILocation(line: 67, column: 55, scope: !10)
!64 = !DILocation(line: 78, column: 24, scope: !10)
!65 = !DILocation(line: 79, column: 29, scope: !10)
!66 = !DILocation(line: 61, column: 114, scope: !10)
!67 = !DILocation(line: 60, column: 114, scope: !10)
!68 = !DILocation(line: 67, column: 117, scope: !10)
!69 = !DILocation(line: 68, column: 24, scope: !10)
!70 = !DILocation(line: 69, column: 24, scope: !10)
!71 = !DILocation(line: 79, column: 53, scope: !10)
!72 = !DILocation(line: 53, column: 4, scope: !10)
