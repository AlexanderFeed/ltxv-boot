; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 10, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = shl i32 %15, 3, !dbg !11
  %17 = and i32 %16, 1016, !dbg !11
  %18 = or disjoint i32 %17, %14, !dbg !12
  %19 = or disjoint i32 %18, 2, !dbg !12
  %20 = or disjoint i32 %18, 4, !dbg !12
  %21 = or disjoint i32 %18, 6, !dbg !12
  %22 = sdiv i32 %18, 128, !dbg !13
  %23 = mul i32 %22, 128, !dbg !14
  %.decomposed = sub i32 %18, %23, !dbg !14
  %24 = srem i32 %19, 128, !dbg !14
  %25 = srem i32 %20, 128, !dbg !14
  %26 = srem i32 %21, 128, !dbg !14
  %27 = sdiv i32 %18, 3072, !dbg !15
  %28 = sext i32 %18 to i64, !dbg !16
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %29) #3, !dbg !17
  %31 = sext i32 %22 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %40 = bitcast i32 %39 to float, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %42 = bitcast i32 %41 to float, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %46 = bitcast i32 %45 to float, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = sext i32 %.decomposed to i64, !dbg !20
  %50 = getelementptr bfloat, ptr addrspace(1) %2, i64 %49, !dbg !20
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %50) #3, !dbg !21
  %52 = shl nsw i32 %27, 7, !dbg !22
  %53 = add nsw i32 %52, %.decomposed, !dbg !23
  %54 = add nsw i32 %25, %52, !dbg !23
  %55 = sext i32 %53 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !24
  %57 = sext i32 %54 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %56) #3, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %58) #3, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %61) #3, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %62) #3, !dbg !27
  %65 = getelementptr bfloat, ptr addrspace(1) %5, i64 %28, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %65) #3, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %67) #3, !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = getelementptr bfloat, ptr addrspace(1) %7, i64 %49, !dbg !32
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %84) #3, !dbg !33
  %86 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !12
  %87 = shufflevector <4 x i32> %86, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !12
  %88 = or disjoint <4 x i32> %87, <i32 7, i32 5, i32 3, i32 1>, !dbg !12
  %89 = extractelement <4 x i32> %88, i64 3, !dbg !14
  %90 = srem i32 %89, 128, !dbg !14
  %91 = extractelement <4 x i32> %88, i64 2, !dbg !14
  %92 = srem i32 %91, 128, !dbg !14
  %93 = extractelement <4 x i32> %88, i64 1, !dbg !14
  %94 = srem i32 %93, 128, !dbg !14
  %95 = extractelement <4 x i32> %88, i64 0, !dbg !14
  %96 = srem i32 %95, 128, !dbg !14
  %97 = srem <4 x i32> %88, splat (i32 2), !dbg !34
  %98 = extractelement <4 x i32> %97, i64 3, !dbg !35
  %99 = icmp slt i32 %98, 1, !dbg !35
  %100 = extractelement <4 x i32> %97, i64 2, !dbg !35
  %101 = icmp slt i32 %100, 1, !dbg !35
  %102 = extractelement <4 x i32> %97, i64 1, !dbg !35
  %103 = icmp slt i32 %102, 1, !dbg !35
  %104 = extractelement <4 x i32> %97, i64 0, !dbg !35
  %105 = icmp slt i32 %104, 1, !dbg !35
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !36
  %106 = ashr exact i8 %.lhs.trunc, 1, !dbg !36
  %.sext = sext i8 %106 to i32, !dbg !36
  %.lhs.trunc142 = trunc nsw i32 %90 to i8, !dbg !36
  %107 = sdiv i8 %.lhs.trunc142, 2, !dbg !36
  %.sext143 = sext i8 %107 to i32, !dbg !36
  %.lhs.trunc144 = trunc nsw i32 %24 to i8, !dbg !36
  %108 = ashr exact i8 %.lhs.trunc144, 1, !dbg !36
  %.sext145 = sext i8 %108 to i32, !dbg !36
  %.lhs.trunc146 = trunc nsw i32 %92 to i8, !dbg !36
  %109 = sdiv i8 %.lhs.trunc146, 2, !dbg !36
  %.sext147 = sext i8 %109 to i32, !dbg !36
  %.lhs.trunc148 = trunc nsw i32 %25 to i8, !dbg !36
  %110 = ashr exact i8 %.lhs.trunc148, 1, !dbg !36
  %.sext149 = sext i8 %110 to i32, !dbg !36
  %.lhs.trunc150 = trunc nsw i32 %94 to i8, !dbg !36
  %111 = sdiv i8 %.lhs.trunc150, 2, !dbg !36
  %.sext151 = sext i8 %111 to i32, !dbg !36
  %.lhs.trunc152 = trunc nsw i32 %26 to i8, !dbg !36
  %112 = ashr exact i8 %.lhs.trunc152, 1, !dbg !36
  %.sext153 = sext i8 %112 to i32, !dbg !36
  %.lhs.trunc154 = trunc nsw i32 %96 to i8, !dbg !36
  %113 = sdiv i8 %.lhs.trunc154, 2, !dbg !36
  %.sext155 = sext i8 %113 to i32, !dbg !36
  %114 = shl nsw i32 %.sext, 1, !dbg !37
  %115 = shl nsw i32 %.sext143, 1, !dbg !37
  %116 = shl nsw i32 %.sext145, 1, !dbg !37
  %117 = shl nsw i32 %.sext147, 1, !dbg !37
  %118 = shl nsw i32 %.sext149, 1, !dbg !37
  %119 = shl nsw i32 %.sext151, 1, !dbg !37
  %120 = shl nsw i32 %.sext153, 1, !dbg !37
  %121 = shl nsw i32 %.sext155, 1, !dbg !37
  %122 = or disjoint i32 %114, 1, !dbg !38
  %123 = or disjoint i32 %115, 1, !dbg !38
  %124 = or disjoint i32 %116, 1, !dbg !38
  %125 = or disjoint i32 %117, 1, !dbg !38
  %126 = or disjoint i32 %118, 1, !dbg !38
  %127 = or disjoint i32 %119, 1, !dbg !38
  %128 = or disjoint i32 %120, 1, !dbg !38
  %129 = or disjoint i32 %121, 1, !dbg !38
  %130 = shl nsw i32 %22, 7, !dbg !39
  %131 = add i32 %122, %130, !dbg !40
  %132 = add i32 %123, %130, !dbg !40
  %133 = add i32 %124, %130, !dbg !40
  %134 = add i32 %125, %130, !dbg !40
  %135 = add i32 %126, %130, !dbg !40
  %136 = add i32 %127, %130, !dbg !40
  %137 = add i32 %128, %130, !dbg !40
  %138 = add i32 %129, %130, !dbg !40
  %139 = sext i32 %131 to i64, !dbg !41
  %140 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !41
  %141 = sext i32 %132 to i64, !dbg !41
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !41
  %143 = sext i32 %133 to i64, !dbg !41
  %144 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !41
  %145 = sext i32 %134 to i64, !dbg !41
  %146 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !41
  %147 = sext i32 %135 to i64, !dbg !41
  %148 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !41
  %149 = sext i32 %136 to i64, !dbg !41
  %150 = getelementptr bfloat, ptr addrspace(1) %0, i64 %149, !dbg !41
  %151 = sext i32 %137 to i64, !dbg !41
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !41
  %153 = sext i32 %138 to i64, !dbg !41
  %154 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !41
  %155 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %140, i1 true) #3, !dbg !42
  %156 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %142, i1 %99) #3, !dbg !42
  %157 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %144, i1 true) #3, !dbg !42
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %146, i1 %101) #3, !dbg !42
  %159 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %148, i1 true) #3, !dbg !42
  %160 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %150, i1 %103) #3, !dbg !42
  %161 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 true) #3, !dbg !42
  %162 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %154, i1 %105) #3, !dbg !42
  %163 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #3, !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %99) #3, !dbg !43
  %166 = bitcast i32 %165 to float, !dbg !43
  %167 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #3, !dbg !43
  %168 = bitcast i32 %167 to float, !dbg !43
  %169 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %101) #3, !dbg !43
  %170 = bitcast i32 %169 to float, !dbg !43
  %171 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #3, !dbg !43
  %172 = bitcast i32 %171 to float, !dbg !43
  %173 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %103) #3, !dbg !43
  %174 = bitcast i32 %173 to float, !dbg !43
  %175 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #3, !dbg !43
  %176 = bitcast i32 %175 to float, !dbg !43
  %177 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %105) #3, !dbg !43
  %178 = bitcast i32 %177 to float, !dbg !43
  %179 = tail call float @llvm.nvvm.div.full(float %164, float 1.280000e+02), !dbg !44
  %180 = tail call float @llvm.nvvm.div.full(float %166, float 1.280000e+02), !dbg !44
  %181 = tail call float @llvm.nvvm.div.full(float %168, float 1.280000e+02), !dbg !44
  %182 = tail call float @llvm.nvvm.div.full(float %170, float 1.280000e+02), !dbg !44
  %183 = tail call float @llvm.nvvm.div.full(float %172, float 1.280000e+02), !dbg !44
  %184 = tail call float @llvm.nvvm.div.full(float %174, float 1.280000e+02), !dbg !44
  %185 = tail call float @llvm.nvvm.div.full(float %176, float 1.280000e+02), !dbg !44
  %186 = tail call float @llvm.nvvm.div.full(float %178, float 1.280000e+02), !dbg !44
  %187 = fadd float %179, 0x3EB0C6F7A0000000, !dbg !45
  %188 = fadd float %180, 0x3EB0C6F7A0000000, !dbg !45
  %189 = fadd float %181, 0x3EB0C6F7A0000000, !dbg !45
  %190 = fadd float %182, 0x3EB0C6F7A0000000, !dbg !45
  %191 = fadd float %183, 0x3EB0C6F7A0000000, !dbg !45
  %192 = fadd float %184, 0x3EB0C6F7A0000000, !dbg !45
  %193 = fadd float %185, 0x3EB0C6F7A0000000, !dbg !45
  %194 = fadd float %186, 0x3EB0C6F7A0000000, !dbg !45
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %195, 0, !dbg !46
  br i1 %.not.i, label %198, label %196, !dbg !46

196:                                              ; preds = %12
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

198:                                              ; preds = %12
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %196, %198
  %.0.i = phi float [ %197, %196 ], [ %199, %198 ], !dbg !46
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %200, 0, !dbg !46
  br i1 %.not.i1, label %203, label %201, !dbg !46

201:                                              ; preds = %__nv_rsqrtf.exit
  %202 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

203:                                              ; preds = %__nv_rsqrtf.exit
  %204 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

__nv_rsqrtf.exit3:                                ; preds = %201, %203
  %.0.i2 = phi float [ %202, %201 ], [ %204, %203 ], !dbg !46
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i4 = icmp eq i32 %205, 0, !dbg !46
  br i1 %.not.i4, label %208, label %206, !dbg !46

206:                                              ; preds = %__nv_rsqrtf.exit3
  %207 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %189), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

208:                                              ; preds = %__nv_rsqrtf.exit3
  %209 = tail call float @llvm.nvvm.rsqrt.approx.f(float %189), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

__nv_rsqrtf.exit6:                                ; preds = %206, %208
  %.0.i5 = phi float [ %207, %206 ], [ %209, %208 ], !dbg !46
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i7 = icmp eq i32 %210, 0, !dbg !46
  br i1 %.not.i7, label %213, label %211, !dbg !46

211:                                              ; preds = %__nv_rsqrtf.exit6
  %212 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %190), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

213:                                              ; preds = %__nv_rsqrtf.exit6
  %214 = tail call float @llvm.nvvm.rsqrt.approx.f(float %190), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

__nv_rsqrtf.exit9:                                ; preds = %211, %213
  %.0.i8 = phi float [ %212, %211 ], [ %214, %213 ], !dbg !46
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i10 = icmp eq i32 %215, 0, !dbg !46
  br i1 %.not.i10, label %218, label %216, !dbg !46

216:                                              ; preds = %__nv_rsqrtf.exit9
  %217 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

218:                                              ; preds = %__nv_rsqrtf.exit9
  %219 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

__nv_rsqrtf.exit12:                               ; preds = %216, %218
  %.0.i11 = phi float [ %217, %216 ], [ %219, %218 ], !dbg !46
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i13 = icmp eq i32 %220, 0, !dbg !46
  br i1 %.not.i13, label %223, label %221, !dbg !46

221:                                              ; preds = %__nv_rsqrtf.exit12
  %222 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

223:                                              ; preds = %__nv_rsqrtf.exit12
  %224 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

__nv_rsqrtf.exit15:                               ; preds = %221, %223
  %.0.i14 = phi float [ %222, %221 ], [ %224, %223 ], !dbg !46
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i16 = icmp eq i32 %225, 0, !dbg !46
  br i1 %.not.i16, label %228, label %226, !dbg !46

226:                                              ; preds = %__nv_rsqrtf.exit15
  %227 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

228:                                              ; preds = %__nv_rsqrtf.exit15
  %229 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

__nv_rsqrtf.exit18:                               ; preds = %226, %228
  %.0.i17 = phi float [ %227, %226 ], [ %229, %228 ], !dbg !46
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i19 = icmp eq i32 %230, 0, !dbg !46
  br i1 %.not.i19, label %233, label %231, !dbg !46

231:                                              ; preds = %__nv_rsqrtf.exit18
  %232 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %194), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

233:                                              ; preds = %__nv_rsqrtf.exit18
  %234 = tail call float @llvm.nvvm.rsqrt.approx.f(float %194), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

__nv_rsqrtf.exit21:                               ; preds = %231, %233
  %.0.i20 = phi float [ %232, %231 ], [ %234, %233 ], !dbg !46
  %235 = sext i32 %122 to i64, !dbg !47
  %236 = getelementptr bfloat, ptr addrspace(1) %2, i64 %235, !dbg !47
  %237 = sext i32 %123 to i64, !dbg !47
  %238 = getelementptr bfloat, ptr addrspace(1) %2, i64 %237, !dbg !47
  %239 = sext i32 %124 to i64, !dbg !47
  %240 = getelementptr bfloat, ptr addrspace(1) %2, i64 %239, !dbg !47
  %241 = sext i32 %125 to i64, !dbg !47
  %242 = getelementptr bfloat, ptr addrspace(1) %2, i64 %241, !dbg !47
  %243 = sext i32 %126 to i64, !dbg !47
  %244 = getelementptr bfloat, ptr addrspace(1) %2, i64 %243, !dbg !47
  %245 = sext i32 %127 to i64, !dbg !47
  %246 = getelementptr bfloat, ptr addrspace(1) %2, i64 %245, !dbg !47
  %247 = sext i32 %128 to i64, !dbg !47
  %248 = getelementptr bfloat, ptr addrspace(1) %2, i64 %247, !dbg !47
  %249 = sext i32 %129 to i64, !dbg !47
  %250 = getelementptr bfloat, ptr addrspace(1) %2, i64 %249, !dbg !47
  %251 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %236, i1 true) #3, !dbg !48
  %252 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %238, i1 %99) #3, !dbg !48
  %253 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %240, i1 true) #3, !dbg !48
  %254 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %242, i1 %101) #3, !dbg !48
  %255 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %244, i1 true) #3, !dbg !48
  %256 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %246, i1 %103) #3, !dbg !48
  %257 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %248, i1 true) #3, !dbg !48
  %258 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %250, i1 %105) #3, !dbg !48
  %259 = icmp sgt <4 x i32> %97, zeroinitializer, !dbg !49
  %260 = add i32 %114, %130, !dbg !50
  %261 = add i32 %115, %130, !dbg !50
  %262 = add i32 %116, %130, !dbg !50
  %263 = add i32 %117, %130, !dbg !50
  %264 = add i32 %118, %130, !dbg !50
  %265 = add i32 %119, %130, !dbg !50
  %266 = add i32 %120, %130, !dbg !50
  %267 = add i32 %121, %130, !dbg !50
  %268 = sext i32 %260 to i64, !dbg !51
  %269 = getelementptr bfloat, ptr addrspace(1) %0, i64 %268, !dbg !51
  %270 = sext i32 %261 to i64, !dbg !51
  %271 = getelementptr bfloat, ptr addrspace(1) %0, i64 %270, !dbg !51
  %272 = sext i32 %262 to i64, !dbg !51
  %273 = getelementptr bfloat, ptr addrspace(1) %0, i64 %272, !dbg !51
  %274 = sext i32 %263 to i64, !dbg !51
  %275 = getelementptr bfloat, ptr addrspace(1) %0, i64 %274, !dbg !51
  %276 = sext i32 %264 to i64, !dbg !51
  %277 = getelementptr bfloat, ptr addrspace(1) %0, i64 %276, !dbg !51
  %278 = sext i32 %265 to i64, !dbg !51
  %279 = getelementptr bfloat, ptr addrspace(1) %0, i64 %278, !dbg !51
  %280 = sext i32 %266 to i64, !dbg !51
  %281 = getelementptr bfloat, ptr addrspace(1) %0, i64 %280, !dbg !51
  %282 = sext i32 %267 to i64, !dbg !51
  %283 = getelementptr bfloat, ptr addrspace(1) %0, i64 %282, !dbg !51
  %284 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %269, i1 false) #3, !dbg !52
  %285 = extractelement <4 x i1> %259, i64 3, !dbg !53
  %286 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %271, i1 %285) #3, !dbg !52
  %287 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %273, i1 false) #3, !dbg !52
  %288 = extractelement <4 x i1> %259, i64 2, !dbg !53
  %289 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %275, i1 %288) #3, !dbg !52
  %290 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %277, i1 false) #3, !dbg !52
  %291 = extractelement <4 x i1> %259, i64 1, !dbg !53
  %292 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %279, i1 %291) #3, !dbg !52
  %293 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %281, i1 false) #3, !dbg !52
  %294 = extractelement <4 x i1> %259, i64 0, !dbg !53
  %295 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %283, i1 %294) #3, !dbg !52
  %296 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #3, !dbg !53
  %297 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %285) #3, !dbg !53
  %298 = bitcast i32 %297 to float, !dbg !53
  %299 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #3, !dbg !53
  %300 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %288) #3, !dbg !53
  %301 = bitcast i32 %300 to float, !dbg !53
  %302 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #3, !dbg !53
  %303 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %291) #3, !dbg !53
  %304 = bitcast i32 %303 to float, !dbg !53
  %305 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #3, !dbg !53
  %306 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %294) #3, !dbg !53
  %307 = bitcast i32 %306 to float, !dbg !53
  %308 = tail call float @llvm.nvvm.div.full(float %298, float 1.280000e+02), !dbg !54
  %309 = tail call float @llvm.nvvm.div.full(float %301, float 1.280000e+02), !dbg !54
  %310 = tail call float @llvm.nvvm.div.full(float %304, float 1.280000e+02), !dbg !54
  %311 = tail call float @llvm.nvvm.div.full(float %307, float 1.280000e+02), !dbg !54
  %312 = fadd float %308, 0x3EB0C6F7A0000000, !dbg !55
  %313 = fadd float %309, 0x3EB0C6F7A0000000, !dbg !55
  %314 = fadd float %310, 0x3EB0C6F7A0000000, !dbg !55
  %315 = fadd float %311, 0x3EB0C6F7A0000000, !dbg !55
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i25 = icmp eq i32 %317, 0, !dbg !56
  br i1 %.not.i25, label %320, label %318, !dbg !56

318:                                              ; preds = %__nv_rsqrtf.exit21
  %319 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %312), !dbg !56
  br label %__nv_rsqrtf.exit27, !dbg !56

320:                                              ; preds = %__nv_rsqrtf.exit21
  %321 = tail call float @llvm.nvvm.rsqrt.approx.f(float %312), !dbg !56
  br label %__nv_rsqrtf.exit27, !dbg !56

__nv_rsqrtf.exit27:                               ; preds = %318, %320
  %.0.i26 = phi float [ %319, %318 ], [ %321, %320 ], !dbg !56
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i31 = icmp eq i32 %323, 0, !dbg !56
  br i1 %.not.i31, label %326, label %324, !dbg !56

324:                                              ; preds = %__nv_rsqrtf.exit27
  %325 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %313), !dbg !56
  br label %__nv_rsqrtf.exit33, !dbg !56

326:                                              ; preds = %__nv_rsqrtf.exit27
  %327 = tail call float @llvm.nvvm.rsqrt.approx.f(float %313), !dbg !56
  br label %__nv_rsqrtf.exit33, !dbg !56

__nv_rsqrtf.exit33:                               ; preds = %324, %326
  %.0.i32 = phi float [ %325, %324 ], [ %327, %326 ], !dbg !56
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i37 = icmp eq i32 %329, 0, !dbg !56
  br i1 %.not.i37, label %332, label %330, !dbg !56

330:                                              ; preds = %__nv_rsqrtf.exit33
  %331 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %314), !dbg !56
  br label %__nv_rsqrtf.exit39, !dbg !56

332:                                              ; preds = %__nv_rsqrtf.exit33
  %333 = tail call float @llvm.nvvm.rsqrt.approx.f(float %314), !dbg !56
  br label %__nv_rsqrtf.exit39, !dbg !56

__nv_rsqrtf.exit39:                               ; preds = %330, %332
  %.0.i38 = phi float [ %331, %330 ], [ %333, %332 ], !dbg !56
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i43 = icmp eq i32 %335, 0, !dbg !56
  br i1 %.not.i43, label %338, label %336, !dbg !56

336:                                              ; preds = %__nv_rsqrtf.exit39
  %337 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %315), !dbg !56
  br label %__nv_rsqrtf.exit45, !dbg !56

338:                                              ; preds = %__nv_rsqrtf.exit39
  %339 = tail call float @llvm.nvvm.rsqrt.approx.f(float %315), !dbg !56
  br label %__nv_rsqrtf.exit45, !dbg !56

__nv_rsqrtf.exit45:                               ; preds = %336, %338
  %.0.i44 = phi float [ %337, %336 ], [ %339, %338 ], !dbg !56
  %340 = sext i32 %114 to i64, !dbg !57
  %341 = getelementptr bfloat, ptr addrspace(1) %2, i64 %340, !dbg !57
  %342 = sext i32 %115 to i64, !dbg !57
  %343 = getelementptr bfloat, ptr addrspace(1) %2, i64 %342, !dbg !57
  %344 = sext i32 %116 to i64, !dbg !57
  %345 = getelementptr bfloat, ptr addrspace(1) %2, i64 %344, !dbg !57
  %346 = sext i32 %117 to i64, !dbg !57
  %347 = getelementptr bfloat, ptr addrspace(1) %2, i64 %346, !dbg !57
  %348 = sext i32 %118 to i64, !dbg !57
  %349 = getelementptr bfloat, ptr addrspace(1) %2, i64 %348, !dbg !57
  %350 = sext i32 %119 to i64, !dbg !57
  %351 = getelementptr bfloat, ptr addrspace(1) %2, i64 %350, !dbg !57
  %352 = sext i32 %120 to i64, !dbg !57
  %353 = getelementptr bfloat, ptr addrspace(1) %2, i64 %352, !dbg !57
  %354 = sext i32 %121 to i64, !dbg !57
  %355 = getelementptr bfloat, ptr addrspace(1) %2, i64 %354, !dbg !57
  %356 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %341, i1 false) #3, !dbg !58
  %357 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %343, i1 %285) #3, !dbg !58
  %358 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %345, i1 false) #3, !dbg !58
  %359 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %347, i1 %288) #3, !dbg !58
  %360 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %349, i1 false) #3, !dbg !58
  %361 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %351, i1 %291) #3, !dbg !58
  %362 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %353, i1 false) #3, !dbg !58
  %363 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %355, i1 %294) #3, !dbg !58
  %364 = tail call float @llvm.nvvm.div.full(float %34, float 1.280000e+02), !dbg !59
  %365 = tail call float @llvm.nvvm.div.full(float %36, float 1.280000e+02), !dbg !59
  %366 = tail call float @llvm.nvvm.div.full(float %38, float 1.280000e+02), !dbg !59
  %367 = tail call float @llvm.nvvm.div.full(float %40, float 1.280000e+02), !dbg !59
  %368 = tail call float @llvm.nvvm.div.full(float %42, float 1.280000e+02), !dbg !59
  %369 = tail call float @llvm.nvvm.div.full(float %44, float 1.280000e+02), !dbg !59
  %370 = tail call float @llvm.nvvm.div.full(float %46, float 1.280000e+02), !dbg !59
  %371 = tail call float @llvm.nvvm.div.full(float %48, float 1.280000e+02), !dbg !59
  %372 = fadd float %364, 0x3EB0C6F7A0000000, !dbg !60
  %373 = fadd float %365, 0x3EB0C6F7A0000000, !dbg !60
  %374 = fadd float %366, 0x3EB0C6F7A0000000, !dbg !60
  %375 = fadd float %367, 0x3EB0C6F7A0000000, !dbg !60
  %376 = fadd float %368, 0x3EB0C6F7A0000000, !dbg !60
  %377 = fadd float %369, 0x3EB0C6F7A0000000, !dbg !60
  %378 = fadd float %370, 0x3EB0C6F7A0000000, !dbg !60
  %379 = fadd float %371, 0x3EB0C6F7A0000000, !dbg !60
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i46 = icmp eq i32 %380, 0, !dbg !61
  br i1 %.not.i46, label %383, label %381, !dbg !61

381:                                              ; preds = %__nv_rsqrtf.exit45
  %382 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %372), !dbg !61
  br label %__nv_rsqrtf.exit48, !dbg !61

383:                                              ; preds = %__nv_rsqrtf.exit45
  %384 = tail call float @llvm.nvvm.rsqrt.approx.f(float %372), !dbg !61
  br label %__nv_rsqrtf.exit48, !dbg !61

__nv_rsqrtf.exit48:                               ; preds = %381, %383
  %.0.i47 = phi float [ %382, %381 ], [ %384, %383 ], !dbg !61
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i49 = icmp eq i32 %385, 0, !dbg !61
  br i1 %.not.i49, label %388, label %386, !dbg !61

386:                                              ; preds = %__nv_rsqrtf.exit48
  %387 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %373), !dbg !61
  br label %__nv_rsqrtf.exit51, !dbg !61

388:                                              ; preds = %__nv_rsqrtf.exit48
  %389 = tail call float @llvm.nvvm.rsqrt.approx.f(float %373), !dbg !61
  br label %__nv_rsqrtf.exit51, !dbg !61

__nv_rsqrtf.exit51:                               ; preds = %386, %388
  %.0.i50 = phi float [ %387, %386 ], [ %389, %388 ], !dbg !61
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i52 = icmp eq i32 %390, 0, !dbg !61
  br i1 %.not.i52, label %393, label %391, !dbg !61

391:                                              ; preds = %__nv_rsqrtf.exit51
  %392 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %374), !dbg !61
  br label %__nv_rsqrtf.exit54, !dbg !61

393:                                              ; preds = %__nv_rsqrtf.exit51
  %394 = tail call float @llvm.nvvm.rsqrt.approx.f(float %374), !dbg !61
  br label %__nv_rsqrtf.exit54, !dbg !61

__nv_rsqrtf.exit54:                               ; preds = %391, %393
  %.0.i53 = phi float [ %392, %391 ], [ %394, %393 ], !dbg !61
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i55 = icmp eq i32 %395, 0, !dbg !61
  br i1 %.not.i55, label %398, label %396, !dbg !61

396:                                              ; preds = %__nv_rsqrtf.exit54
  %397 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %375), !dbg !61
  br label %__nv_rsqrtf.exit57, !dbg !61

398:                                              ; preds = %__nv_rsqrtf.exit54
  %399 = tail call float @llvm.nvvm.rsqrt.approx.f(float %375), !dbg !61
  br label %__nv_rsqrtf.exit57, !dbg !61

__nv_rsqrtf.exit57:                               ; preds = %396, %398
  %.0.i56 = phi float [ %397, %396 ], [ %399, %398 ], !dbg !61
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i58 = icmp eq i32 %400, 0, !dbg !61
  br i1 %.not.i58, label %403, label %401, !dbg !61

401:                                              ; preds = %__nv_rsqrtf.exit57
  %402 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %376), !dbg !61
  br label %__nv_rsqrtf.exit60, !dbg !61

403:                                              ; preds = %__nv_rsqrtf.exit57
  %404 = tail call float @llvm.nvvm.rsqrt.approx.f(float %376), !dbg !61
  br label %__nv_rsqrtf.exit60, !dbg !61

__nv_rsqrtf.exit60:                               ; preds = %401, %403
  %.0.i59 = phi float [ %402, %401 ], [ %404, %403 ], !dbg !61
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i61 = icmp eq i32 %405, 0, !dbg !61
  br i1 %.not.i61, label %408, label %406, !dbg !61

406:                                              ; preds = %__nv_rsqrtf.exit60
  %407 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %377), !dbg !61
  br label %__nv_rsqrtf.exit63, !dbg !61

408:                                              ; preds = %__nv_rsqrtf.exit60
  %409 = tail call float @llvm.nvvm.rsqrt.approx.f(float %377), !dbg !61
  br label %__nv_rsqrtf.exit63, !dbg !61

__nv_rsqrtf.exit63:                               ; preds = %406, %408
  %.0.i62 = phi float [ %407, %406 ], [ %409, %408 ], !dbg !61
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i64 = icmp eq i32 %410, 0, !dbg !61
  br i1 %.not.i64, label %413, label %411, !dbg !61

411:                                              ; preds = %__nv_rsqrtf.exit63
  %412 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %378), !dbg !61
  br label %__nv_rsqrtf.exit66, !dbg !61

413:                                              ; preds = %__nv_rsqrtf.exit63
  %414 = tail call float @llvm.nvvm.rsqrt.approx.f(float %378), !dbg !61
  br label %__nv_rsqrtf.exit66, !dbg !61

__nv_rsqrtf.exit66:                               ; preds = %411, %413
  %.0.i65 = phi float [ %412, %411 ], [ %414, %413 ], !dbg !61
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i67 = icmp eq i32 %415, 0, !dbg !61
  br i1 %.not.i67, label %418, label %416, !dbg !61

416:                                              ; preds = %__nv_rsqrtf.exit66
  %417 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %379), !dbg !61
  br label %__nv_rsqrtf.exit69, !dbg !61

418:                                              ; preds = %__nv_rsqrtf.exit66
  %419 = tail call float @llvm.nvvm.rsqrt.approx.f(float %379), !dbg !61
  br label %__nv_rsqrtf.exit69, !dbg !61

__nv_rsqrtf.exit69:                               ; preds = %416, %418
  %.0.i68 = phi float [ %417, %416 ], [ %419, %418 ], !dbg !61
  %420 = getelementptr bfloat, ptr addrspace(1) %5, i64 %139, !dbg !62
  %421 = getelementptr bfloat, ptr addrspace(1) %5, i64 %141, !dbg !62
  %422 = getelementptr bfloat, ptr addrspace(1) %5, i64 %143, !dbg !62
  %423 = getelementptr bfloat, ptr addrspace(1) %5, i64 %145, !dbg !62
  %424 = getelementptr bfloat, ptr addrspace(1) %5, i64 %147, !dbg !62
  %425 = getelementptr bfloat, ptr addrspace(1) %5, i64 %149, !dbg !62
  %426 = getelementptr bfloat, ptr addrspace(1) %5, i64 %151, !dbg !62
  %427 = getelementptr bfloat, ptr addrspace(1) %5, i64 %153, !dbg !62
  %428 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %420, i1 true) #3, !dbg !63
  %429 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %421, i1 %99) #3, !dbg !63
  %430 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %422, i1 true) #3, !dbg !63
  %431 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %423, i1 %101) #3, !dbg !63
  %432 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %424, i1 true) #3, !dbg !63
  %433 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %425, i1 %103) #3, !dbg !63
  %434 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %426, i1 true) #3, !dbg !63
  %435 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %427, i1 %105) #3, !dbg !63
  %436 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 true) #3, !dbg !64
  %437 = bitcast i32 %436 to float, !dbg !64
  %438 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %99) #3, !dbg !64
  %439 = bitcast i32 %438 to float, !dbg !64
  %440 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 true) #3, !dbg !64
  %441 = bitcast i32 %440 to float, !dbg !64
  %442 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %101) #3, !dbg !64
  %443 = bitcast i32 %442 to float, !dbg !64
  %444 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 true) #3, !dbg !64
  %445 = bitcast i32 %444 to float, !dbg !64
  %446 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %103) #3, !dbg !64
  %447 = bitcast i32 %446 to float, !dbg !64
  %448 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 true) #3, !dbg !64
  %449 = bitcast i32 %448 to float, !dbg !64
  %450 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %105) #3, !dbg !64
  %451 = bitcast i32 %450 to float, !dbg !64
  %452 = tail call float @llvm.nvvm.div.full(float %437, float 1.280000e+02), !dbg !65
  %453 = tail call float @llvm.nvvm.div.full(float %439, float 1.280000e+02), !dbg !65
  %454 = tail call float @llvm.nvvm.div.full(float %441, float 1.280000e+02), !dbg !65
  %455 = tail call float @llvm.nvvm.div.full(float %443, float 1.280000e+02), !dbg !65
  %456 = tail call float @llvm.nvvm.div.full(float %445, float 1.280000e+02), !dbg !65
  %457 = tail call float @llvm.nvvm.div.full(float %447, float 1.280000e+02), !dbg !65
  %458 = tail call float @llvm.nvvm.div.full(float %449, float 1.280000e+02), !dbg !65
  %459 = tail call float @llvm.nvvm.div.full(float %451, float 1.280000e+02), !dbg !65
  %460 = fadd float %452, 0x3EB0C6F7A0000000, !dbg !66
  %461 = fadd float %453, 0x3EB0C6F7A0000000, !dbg !66
  %462 = fadd float %454, 0x3EB0C6F7A0000000, !dbg !66
  %463 = fadd float %455, 0x3EB0C6F7A0000000, !dbg !66
  %464 = fadd float %456, 0x3EB0C6F7A0000000, !dbg !66
  %465 = fadd float %457, 0x3EB0C6F7A0000000, !dbg !66
  %466 = fadd float %458, 0x3EB0C6F7A0000000, !dbg !66
  %467 = fadd float %459, 0x3EB0C6F7A0000000, !dbg !66
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i70 = icmp eq i32 %468, 0, !dbg !67
  br i1 %.not.i70, label %471, label %469, !dbg !67

469:                                              ; preds = %__nv_rsqrtf.exit69
  %470 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %460), !dbg !67
  br label %__nv_rsqrtf.exit72, !dbg !67

471:                                              ; preds = %__nv_rsqrtf.exit69
  %472 = tail call float @llvm.nvvm.rsqrt.approx.f(float %460), !dbg !67
  br label %__nv_rsqrtf.exit72, !dbg !67

__nv_rsqrtf.exit72:                               ; preds = %469, %471
  %.0.i71 = phi float [ %470, %469 ], [ %472, %471 ], !dbg !67
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i73 = icmp eq i32 %473, 0, !dbg !67
  br i1 %.not.i73, label %476, label %474, !dbg !67

474:                                              ; preds = %__nv_rsqrtf.exit72
  %475 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %461), !dbg !67
  br label %__nv_rsqrtf.exit75, !dbg !67

476:                                              ; preds = %__nv_rsqrtf.exit72
  %477 = tail call float @llvm.nvvm.rsqrt.approx.f(float %461), !dbg !67
  br label %__nv_rsqrtf.exit75, !dbg !67

__nv_rsqrtf.exit75:                               ; preds = %474, %476
  %.0.i74 = phi float [ %475, %474 ], [ %477, %476 ], !dbg !67
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i76 = icmp eq i32 %478, 0, !dbg !67
  br i1 %.not.i76, label %481, label %479, !dbg !67

479:                                              ; preds = %__nv_rsqrtf.exit75
  %480 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %462), !dbg !67
  br label %__nv_rsqrtf.exit78, !dbg !67

481:                                              ; preds = %__nv_rsqrtf.exit75
  %482 = tail call float @llvm.nvvm.rsqrt.approx.f(float %462), !dbg !67
  br label %__nv_rsqrtf.exit78, !dbg !67

__nv_rsqrtf.exit78:                               ; preds = %479, %481
  %.0.i77 = phi float [ %480, %479 ], [ %482, %481 ], !dbg !67
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i79 = icmp eq i32 %483, 0, !dbg !67
  br i1 %.not.i79, label %486, label %484, !dbg !67

484:                                              ; preds = %__nv_rsqrtf.exit78
  %485 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %463), !dbg !67
  br label %__nv_rsqrtf.exit81, !dbg !67

486:                                              ; preds = %__nv_rsqrtf.exit78
  %487 = tail call float @llvm.nvvm.rsqrt.approx.f(float %463), !dbg !67
  br label %__nv_rsqrtf.exit81, !dbg !67

__nv_rsqrtf.exit81:                               ; preds = %484, %486
  %.0.i80 = phi float [ %485, %484 ], [ %487, %486 ], !dbg !67
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i82 = icmp eq i32 %488, 0, !dbg !67
  br i1 %.not.i82, label %491, label %489, !dbg !67

489:                                              ; preds = %__nv_rsqrtf.exit81
  %490 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %464), !dbg !67
  br label %__nv_rsqrtf.exit84, !dbg !67

491:                                              ; preds = %__nv_rsqrtf.exit81
  %492 = tail call float @llvm.nvvm.rsqrt.approx.f(float %464), !dbg !67
  br label %__nv_rsqrtf.exit84, !dbg !67

__nv_rsqrtf.exit84:                               ; preds = %489, %491
  %.0.i83 = phi float [ %490, %489 ], [ %492, %491 ], !dbg !67
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i85 = icmp eq i32 %493, 0, !dbg !67
  br i1 %.not.i85, label %496, label %494, !dbg !67

494:                                              ; preds = %__nv_rsqrtf.exit84
  %495 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %465), !dbg !67
  br label %__nv_rsqrtf.exit87, !dbg !67

496:                                              ; preds = %__nv_rsqrtf.exit84
  %497 = tail call float @llvm.nvvm.rsqrt.approx.f(float %465), !dbg !67
  br label %__nv_rsqrtf.exit87, !dbg !67

__nv_rsqrtf.exit87:                               ; preds = %494, %496
  %.0.i86 = phi float [ %495, %494 ], [ %497, %496 ], !dbg !67
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i88 = icmp eq i32 %498, 0, !dbg !67
  br i1 %.not.i88, label %501, label %499, !dbg !67

499:                                              ; preds = %__nv_rsqrtf.exit87
  %500 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %466), !dbg !67
  br label %__nv_rsqrtf.exit90, !dbg !67

501:                                              ; preds = %__nv_rsqrtf.exit87
  %502 = tail call float @llvm.nvvm.rsqrt.approx.f(float %466), !dbg !67
  br label %__nv_rsqrtf.exit90, !dbg !67

__nv_rsqrtf.exit90:                               ; preds = %499, %501
  %.0.i89 = phi float [ %500, %499 ], [ %502, %501 ], !dbg !67
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i91 = icmp eq i32 %503, 0, !dbg !67
  br i1 %.not.i91, label %506, label %504, !dbg !67

504:                                              ; preds = %__nv_rsqrtf.exit90
  %505 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %467), !dbg !67
  br label %__nv_rsqrtf.exit93, !dbg !67

506:                                              ; preds = %__nv_rsqrtf.exit90
  %507 = tail call float @llvm.nvvm.rsqrt.approx.f(float %467), !dbg !67
  br label %__nv_rsqrtf.exit93, !dbg !67

__nv_rsqrtf.exit93:                               ; preds = %504, %506
  %.0.i92 = phi float [ %505, %504 ], [ %507, %506 ], !dbg !67
  %508 = getelementptr bfloat, ptr addrspace(1) %7, i64 %235, !dbg !68
  %509 = getelementptr bfloat, ptr addrspace(1) %7, i64 %237, !dbg !68
  %510 = getelementptr bfloat, ptr addrspace(1) %7, i64 %239, !dbg !68
  %511 = getelementptr bfloat, ptr addrspace(1) %7, i64 %241, !dbg !68
  %512 = getelementptr bfloat, ptr addrspace(1) %7, i64 %243, !dbg !68
  %513 = getelementptr bfloat, ptr addrspace(1) %7, i64 %245, !dbg !68
  %514 = getelementptr bfloat, ptr addrspace(1) %7, i64 %247, !dbg !68
  %515 = getelementptr bfloat, ptr addrspace(1) %7, i64 %249, !dbg !68
  %516 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %508, i1 true) #3, !dbg !69
  %517 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %509, i1 %99) #3, !dbg !69
  %518 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %510, i1 true) #3, !dbg !69
  %519 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %511, i1 %101) #3, !dbg !69
  %520 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %512, i1 true) #3, !dbg !69
  %521 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %513, i1 %103) #3, !dbg !69
  %522 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %514, i1 true) #3, !dbg !69
  %523 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %515, i1 %105) #3, !dbg !69
  %524 = getelementptr bfloat, ptr addrspace(1) %5, i64 %268, !dbg !70
  %525 = getelementptr bfloat, ptr addrspace(1) %5, i64 %270, !dbg !70
  %526 = getelementptr bfloat, ptr addrspace(1) %5, i64 %272, !dbg !70
  %527 = getelementptr bfloat, ptr addrspace(1) %5, i64 %274, !dbg !70
  %528 = getelementptr bfloat, ptr addrspace(1) %5, i64 %276, !dbg !70
  %529 = getelementptr bfloat, ptr addrspace(1) %5, i64 %278, !dbg !70
  %530 = getelementptr bfloat, ptr addrspace(1) %5, i64 %280, !dbg !70
  %531 = getelementptr bfloat, ptr addrspace(1) %5, i64 %282, !dbg !70
  %532 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %524, i1 false) #3, !dbg !71
  %533 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %525, i1 %285) #3, !dbg !71
  %534 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %526, i1 false) #3, !dbg !71
  %535 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %527, i1 %288) #3, !dbg !71
  %536 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %528, i1 false) #3, !dbg !71
  %537 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %529, i1 %291) #3, !dbg !71
  %538 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %530, i1 false) #3, !dbg !71
  %539 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %531, i1 %294) #3, !dbg !71
  %540 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 false) #3, !dbg !72
  %541 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %285) #3, !dbg !72
  %542 = bitcast i32 %541 to float, !dbg !72
  %543 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 false) #3, !dbg !72
  %544 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %288) #3, !dbg !72
  %545 = bitcast i32 %544 to float, !dbg !72
  %546 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 false) #3, !dbg !72
  %547 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %291) #3, !dbg !72
  %548 = bitcast i32 %547 to float, !dbg !72
  %549 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 false) #3, !dbg !72
  %550 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %294) #3, !dbg !72
  %551 = bitcast i32 %550 to float, !dbg !72
  %552 = tail call float @llvm.nvvm.div.full(float %542, float 1.280000e+02), !dbg !73
  %553 = tail call float @llvm.nvvm.div.full(float %545, float 1.280000e+02), !dbg !73
  %554 = tail call float @llvm.nvvm.div.full(float %548, float 1.280000e+02), !dbg !73
  %555 = tail call float @llvm.nvvm.div.full(float %551, float 1.280000e+02), !dbg !73
  %556 = fadd float %552, 0x3EB0C6F7A0000000, !dbg !74
  %557 = fadd float %553, 0x3EB0C6F7A0000000, !dbg !74
  %558 = fadd float %554, 0x3EB0C6F7A0000000, !dbg !74
  %559 = fadd float %555, 0x3EB0C6F7A0000000, !dbg !74
  %560 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %561 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i97 = icmp eq i32 %561, 0, !dbg !75
  br i1 %.not.i97, label %564, label %562, !dbg !75

562:                                              ; preds = %__nv_rsqrtf.exit93
  %563 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %556), !dbg !75
  br label %__nv_rsqrtf.exit99, !dbg !75

564:                                              ; preds = %__nv_rsqrtf.exit93
  %565 = tail call float @llvm.nvvm.rsqrt.approx.f(float %556), !dbg !75
  br label %__nv_rsqrtf.exit99, !dbg !75

__nv_rsqrtf.exit99:                               ; preds = %562, %564
  %.0.i98 = phi float [ %563, %562 ], [ %565, %564 ], !dbg !75
  %566 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %567 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i103 = icmp eq i32 %567, 0, !dbg !75
  br i1 %.not.i103, label %570, label %568, !dbg !75

568:                                              ; preds = %__nv_rsqrtf.exit99
  %569 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %557), !dbg !75
  br label %__nv_rsqrtf.exit105, !dbg !75

570:                                              ; preds = %__nv_rsqrtf.exit99
  %571 = tail call float @llvm.nvvm.rsqrt.approx.f(float %557), !dbg !75
  br label %__nv_rsqrtf.exit105, !dbg !75

__nv_rsqrtf.exit105:                              ; preds = %568, %570
  %.0.i104 = phi float [ %569, %568 ], [ %571, %570 ], !dbg !75
  %572 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %573 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i109 = icmp eq i32 %573, 0, !dbg !75
  br i1 %.not.i109, label %576, label %574, !dbg !75

574:                                              ; preds = %__nv_rsqrtf.exit105
  %575 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %558), !dbg !75
  br label %__nv_rsqrtf.exit111, !dbg !75

576:                                              ; preds = %__nv_rsqrtf.exit105
  %577 = tail call float @llvm.nvvm.rsqrt.approx.f(float %558), !dbg !75
  br label %__nv_rsqrtf.exit111, !dbg !75

__nv_rsqrtf.exit111:                              ; preds = %574, %576
  %.0.i110 = phi float [ %575, %574 ], [ %577, %576 ], !dbg !75
  %578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %579 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i115 = icmp eq i32 %579, 0, !dbg !75
  br i1 %.not.i115, label %582, label %580, !dbg !75

580:                                              ; preds = %__nv_rsqrtf.exit111
  %581 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %559), !dbg !75
  br label %__nv_rsqrtf.exit117, !dbg !75

582:                                              ; preds = %__nv_rsqrtf.exit111
  %583 = tail call float @llvm.nvvm.rsqrt.approx.f(float %559), !dbg !75
  br label %__nv_rsqrtf.exit117, !dbg !75

__nv_rsqrtf.exit117:                              ; preds = %580, %582
  %.0.i116 = phi float [ %581, %580 ], [ %583, %582 ], !dbg !75
  %584 = getelementptr bfloat, ptr addrspace(1) %7, i64 %340, !dbg !76
  %585 = getelementptr bfloat, ptr addrspace(1) %7, i64 %342, !dbg !76
  %586 = getelementptr bfloat, ptr addrspace(1) %7, i64 %344, !dbg !76
  %587 = getelementptr bfloat, ptr addrspace(1) %7, i64 %346, !dbg !76
  %588 = getelementptr bfloat, ptr addrspace(1) %7, i64 %348, !dbg !76
  %589 = getelementptr bfloat, ptr addrspace(1) %7, i64 %350, !dbg !76
  %590 = getelementptr bfloat, ptr addrspace(1) %7, i64 %352, !dbg !76
  %591 = getelementptr bfloat, ptr addrspace(1) %7, i64 %354, !dbg !76
  %592 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %584, i1 false) #3, !dbg !77
  %593 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %585, i1 %285) #3, !dbg !77
  %594 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %586, i1 false) #3, !dbg !77
  %595 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %587, i1 %288) #3, !dbg !77
  %596 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %588, i1 false) #3, !dbg !77
  %597 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %589, i1 %291) #3, !dbg !77
  %598 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %590, i1 false) #3, !dbg !77
  %599 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %591, i1 %294) #3, !dbg !77
  %600 = tail call float @llvm.nvvm.div.full(float %69, float 1.280000e+02), !dbg !78
  %601 = tail call float @llvm.nvvm.div.full(float %71, float 1.280000e+02), !dbg !78
  %602 = tail call float @llvm.nvvm.div.full(float %73, float 1.280000e+02), !dbg !78
  %603 = tail call float @llvm.nvvm.div.full(float %75, float 1.280000e+02), !dbg !78
  %604 = tail call float @llvm.nvvm.div.full(float %77, float 1.280000e+02), !dbg !78
  %605 = tail call float @llvm.nvvm.div.full(float %79, float 1.280000e+02), !dbg !78
  %606 = tail call float @llvm.nvvm.div.full(float %81, float 1.280000e+02), !dbg !78
  %607 = tail call float @llvm.nvvm.div.full(float %83, float 1.280000e+02), !dbg !78
  %608 = fadd float %600, 0x3EB0C6F7A0000000, !dbg !79
  %609 = fadd float %601, 0x3EB0C6F7A0000000, !dbg !79
  %610 = fadd float %602, 0x3EB0C6F7A0000000, !dbg !79
  %611 = fadd float %603, 0x3EB0C6F7A0000000, !dbg !79
  %612 = fadd float %604, 0x3EB0C6F7A0000000, !dbg !79
  %613 = fadd float %605, 0x3EB0C6F7A0000000, !dbg !79
  %614 = fadd float %606, 0x3EB0C6F7A0000000, !dbg !79
  %615 = fadd float %607, 0x3EB0C6F7A0000000, !dbg !79
  %616 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i118 = icmp eq i32 %616, 0, !dbg !80
  br i1 %.not.i118, label %619, label %617, !dbg !80

617:                                              ; preds = %__nv_rsqrtf.exit117
  %618 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %608), !dbg !80
  br label %__nv_rsqrtf.exit120, !dbg !80

619:                                              ; preds = %__nv_rsqrtf.exit117
  %620 = tail call float @llvm.nvvm.rsqrt.approx.f(float %608), !dbg !80
  br label %__nv_rsqrtf.exit120, !dbg !80

__nv_rsqrtf.exit120:                              ; preds = %617, %619
  %.0.i119 = phi float [ %618, %617 ], [ %620, %619 ], !dbg !80
  %621 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i121 = icmp eq i32 %621, 0, !dbg !80
  br i1 %.not.i121, label %624, label %622, !dbg !80

622:                                              ; preds = %__nv_rsqrtf.exit120
  %623 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %609), !dbg !80
  br label %__nv_rsqrtf.exit123, !dbg !80

624:                                              ; preds = %__nv_rsqrtf.exit120
  %625 = tail call float @llvm.nvvm.rsqrt.approx.f(float %609), !dbg !80
  br label %__nv_rsqrtf.exit123, !dbg !80

__nv_rsqrtf.exit123:                              ; preds = %622, %624
  %.0.i122 = phi float [ %623, %622 ], [ %625, %624 ], !dbg !80
  %626 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i124 = icmp eq i32 %626, 0, !dbg !80
  br i1 %.not.i124, label %629, label %627, !dbg !80

627:                                              ; preds = %__nv_rsqrtf.exit123
  %628 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %610), !dbg !80
  br label %__nv_rsqrtf.exit126, !dbg !80

629:                                              ; preds = %__nv_rsqrtf.exit123
  %630 = tail call float @llvm.nvvm.rsqrt.approx.f(float %610), !dbg !80
  br label %__nv_rsqrtf.exit126, !dbg !80

__nv_rsqrtf.exit126:                              ; preds = %627, %629
  %.0.i125 = phi float [ %628, %627 ], [ %630, %629 ], !dbg !80
  %631 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i127 = icmp eq i32 %631, 0, !dbg !80
  br i1 %.not.i127, label %634, label %632, !dbg !80

632:                                              ; preds = %__nv_rsqrtf.exit126
  %633 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %611), !dbg !80
  br label %__nv_rsqrtf.exit129, !dbg !80

634:                                              ; preds = %__nv_rsqrtf.exit126
  %635 = tail call float @llvm.nvvm.rsqrt.approx.f(float %611), !dbg !80
  br label %__nv_rsqrtf.exit129, !dbg !80

__nv_rsqrtf.exit129:                              ; preds = %632, %634
  %.0.i128 = phi float [ %633, %632 ], [ %635, %634 ], !dbg !80
  %636 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i130 = icmp eq i32 %636, 0, !dbg !80
  br i1 %.not.i130, label %639, label %637, !dbg !80

637:                                              ; preds = %__nv_rsqrtf.exit129
  %638 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %612), !dbg !80
  br label %__nv_rsqrtf.exit132, !dbg !80

639:                                              ; preds = %__nv_rsqrtf.exit129
  %640 = tail call float @llvm.nvvm.rsqrt.approx.f(float %612), !dbg !80
  br label %__nv_rsqrtf.exit132, !dbg !80

__nv_rsqrtf.exit132:                              ; preds = %637, %639
  %.0.i131 = phi float [ %638, %637 ], [ %640, %639 ], !dbg !80
  %641 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i133 = icmp eq i32 %641, 0, !dbg !80
  br i1 %.not.i133, label %644, label %642, !dbg !80

642:                                              ; preds = %__nv_rsqrtf.exit132
  %643 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %613), !dbg !80
  br label %__nv_rsqrtf.exit135, !dbg !80

644:                                              ; preds = %__nv_rsqrtf.exit132
  %645 = tail call float @llvm.nvvm.rsqrt.approx.f(float %613), !dbg !80
  br label %__nv_rsqrtf.exit135, !dbg !80

__nv_rsqrtf.exit135:                              ; preds = %642, %644
  %.0.i134 = phi float [ %643, %642 ], [ %645, %644 ], !dbg !80
  %646 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i136 = icmp eq i32 %646, 0, !dbg !80
  br i1 %.not.i136, label %649, label %647, !dbg !80

647:                                              ; preds = %__nv_rsqrtf.exit135
  %648 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %614), !dbg !80
  br label %__nv_rsqrtf.exit138, !dbg !80

649:                                              ; preds = %__nv_rsqrtf.exit135
  %650 = tail call float @llvm.nvvm.rsqrt.approx.f(float %614), !dbg !80
  br label %__nv_rsqrtf.exit138, !dbg !80

__nv_rsqrtf.exit138:                              ; preds = %647, %649
  %.0.i137 = phi float [ %648, %647 ], [ %650, %649 ], !dbg !80
  %651 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i139 = icmp eq i32 %651, 0, !dbg !80
  br i1 %.not.i139, label %654, label %652, !dbg !80

652:                                              ; preds = %__nv_rsqrtf.exit138
  %653 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %615), !dbg !80
  br label %__nv_rsqrtf.exit141, !dbg !80

654:                                              ; preds = %__nv_rsqrtf.exit138
  %655 = tail call float @llvm.nvvm.rsqrt.approx.f(float %615), !dbg !80
  br label %__nv_rsqrtf.exit141, !dbg !80

__nv_rsqrtf.exit141:                              ; preds = %652, %654
  %.0.i140 = phi float [ %653, %652 ], [ %655, %654 ], !dbg !80
  %656 = bitcast i16 %435 to bfloat, !dbg !63
  %657 = fpext bfloat %656 to float, !dbg !81
  %658 = fmul float %.0.i92, %657, !dbg !82
  %659 = bitcast i16 %523 to bfloat, !dbg !69
  %660 = fpext bfloat %659 to float, !dbg !83
  %661 = fmul float %658, %660, !dbg !84
  %662 = fsub float 0.000000e+00, %661, !dbg !85
  %663 = bitcast i16 %539 to bfloat, !dbg !71
  %664 = fpext bfloat %663 to float, !dbg !86
  %665 = fmul float %.0.i116, %664, !dbg !87
  %666 = bitcast i16 %599 to bfloat, !dbg !77
  %667 = fpext bfloat %666 to float, !dbg !88
  %668 = fmul float %665, %667, !dbg !89
  %669 = select i1 %105, float %662, float %668, !dbg !90
  %670 = bitcast i16 %434 to bfloat, !dbg !63
  %671 = fpext bfloat %670 to float, !dbg !81
  %672 = fmul float %.0.i89, %671, !dbg !82
  %673 = bitcast i16 %522 to bfloat, !dbg !69
  %674 = fpext bfloat %673 to float, !dbg !83
  %675 = fmul float %672, %674, !dbg !84
  %676 = fsub float 0.000000e+00, %675, !dbg !85
  %677 = bitcast i16 %433 to bfloat, !dbg !63
  %678 = fpext bfloat %677 to float, !dbg !81
  %679 = fmul float %.0.i86, %678, !dbg !82
  %680 = bitcast i16 %521 to bfloat, !dbg !69
  %681 = fpext bfloat %680 to float, !dbg !83
  %682 = fmul float %679, %681, !dbg !84
  %683 = fsub float 0.000000e+00, %682, !dbg !85
  %684 = bitcast i16 %537 to bfloat, !dbg !71
  %685 = fpext bfloat %684 to float, !dbg !86
  %686 = fmul float %.0.i110, %685, !dbg !87
  %687 = bitcast i16 %597 to bfloat, !dbg !77
  %688 = fpext bfloat %687 to float, !dbg !88
  %689 = fmul float %686, %688, !dbg !89
  %690 = select i1 %103, float %683, float %689, !dbg !90
  %691 = bitcast i16 %432 to bfloat, !dbg !63
  %692 = fpext bfloat %691 to float, !dbg !81
  %693 = fmul float %.0.i83, %692, !dbg !82
  %694 = bitcast i16 %520 to bfloat, !dbg !69
  %695 = fpext bfloat %694 to float, !dbg !83
  %696 = fmul float %693, %695, !dbg !84
  %697 = fsub float 0.000000e+00, %696, !dbg !85
  %698 = bitcast i16 %431 to bfloat, !dbg !63
  %699 = fpext bfloat %698 to float, !dbg !81
  %700 = fmul float %.0.i80, %699, !dbg !82
  %701 = bitcast i16 %519 to bfloat, !dbg !69
  %702 = fpext bfloat %701 to float, !dbg !83
  %703 = fmul float %700, %702, !dbg !84
  %704 = fsub float 0.000000e+00, %703, !dbg !85
  %705 = bitcast i16 %535 to bfloat, !dbg !71
  %706 = fpext bfloat %705 to float, !dbg !86
  %707 = fmul float %.0.i104, %706, !dbg !87
  %708 = bitcast i16 %595 to bfloat, !dbg !77
  %709 = fpext bfloat %708 to float, !dbg !88
  %710 = fmul float %707, %709, !dbg !89
  %711 = select i1 %101, float %704, float %710, !dbg !90
  %712 = bitcast i16 %430 to bfloat, !dbg !63
  %713 = fpext bfloat %712 to float, !dbg !81
  %714 = fmul float %.0.i77, %713, !dbg !82
  %715 = bitcast i16 %518 to bfloat, !dbg !69
  %716 = fpext bfloat %715 to float, !dbg !83
  %717 = fmul float %714, %716, !dbg !84
  %718 = fsub float 0.000000e+00, %717, !dbg !85
  %719 = bitcast i16 %429 to bfloat, !dbg !63
  %720 = fpext bfloat %719 to float, !dbg !81
  %721 = fmul float %.0.i74, %720, !dbg !82
  %722 = bitcast i16 %517 to bfloat, !dbg !69
  %723 = fpext bfloat %722 to float, !dbg !83
  %724 = fmul float %721, %723, !dbg !84
  %725 = fsub float 0.000000e+00, %724, !dbg !85
  %726 = bitcast i16 %533 to bfloat, !dbg !71
  %727 = fpext bfloat %726 to float, !dbg !86
  %728 = fmul float %.0.i98, %727, !dbg !87
  %729 = bitcast i16 %593 to bfloat, !dbg !77
  %730 = fpext bfloat %729 to float, !dbg !88
  %731 = fmul float %728, %730, !dbg !89
  %732 = select i1 %99, float %725, float %731, !dbg !90
  %733 = bitcast i16 %428 to bfloat, !dbg !63
  %734 = fpext bfloat %733 to float, !dbg !81
  %735 = fmul float %.0.i71, %734, !dbg !82
  %736 = bitcast i16 %516 to bfloat, !dbg !69
  %737 = fpext bfloat %736 to float, !dbg !83
  %738 = fmul float %735, %737, !dbg !84
  %739 = fsub float 0.000000e+00, %738, !dbg !85
  %740 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %741 = bitcast i32 %740 to <2 x bfloat>, !dbg !17
  %742 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %743 = bitcast i32 %742 to <2 x bfloat>, !dbg !21
  %744 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %745 = bitcast i16 %162 to bfloat, !dbg !42
  %746 = fpext bfloat %745 to float, !dbg !91
  %747 = fmul float %.0.i20, %746, !dbg !92
  %748 = bitcast i16 %258 to bfloat, !dbg !48
  %749 = fpext bfloat %748 to float, !dbg !93
  %750 = fmul float %747, %749, !dbg !94
  %751 = fsub float 0.000000e+00, %750, !dbg !95
  %752 = bitcast i16 %295 to bfloat, !dbg !52
  %753 = fpext bfloat %752 to float, !dbg !96
  %754 = fmul float %.0.i44, %753, !dbg !97
  %755 = bitcast i16 %363 to bfloat, !dbg !58
  %756 = fpext bfloat %755 to float, !dbg !98
  %757 = fmul float %754, %756, !dbg !99
  %758 = select i1 %105, float %751, float %757, !dbg !90
  %759 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !27
  %760 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %761 = bitcast i16 %161 to bfloat, !dbg !42
  %762 = fpext bfloat %761 to float, !dbg !91
  %763 = fmul float %.0.i17, %762, !dbg !92
  %764 = bitcast i16 %257 to bfloat, !dbg !48
  %765 = fpext bfloat %764 to float, !dbg !93
  %766 = fmul float %763, %765, !dbg !94
  %767 = fsub float 0.000000e+00, %766, !dbg !95
  %768 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !27
  %769 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %770 = bitcast i32 %769 to <2 x bfloat>, !dbg !17
  %771 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %772 = bitcast i32 %771 to <2 x bfloat>, !dbg !21
  %773 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %774 = bitcast i16 %160 to bfloat, !dbg !42
  %775 = fpext bfloat %774 to float, !dbg !91
  %776 = fmul float %.0.i14, %775, !dbg !92
  %777 = bitcast i16 %256 to bfloat, !dbg !48
  %778 = fpext bfloat %777 to float, !dbg !93
  %779 = fmul float %776, %778, !dbg !94
  %780 = fsub float 0.000000e+00, %779, !dbg !95
  %781 = bitcast i16 %292 to bfloat, !dbg !52
  %782 = fpext bfloat %781 to float, !dbg !96
  %783 = fmul float %.0.i38, %782, !dbg !97
  %784 = bitcast i16 %361 to bfloat, !dbg !58
  %785 = fpext bfloat %784 to float, !dbg !98
  %786 = fmul float %783, %785, !dbg !99
  %787 = select i1 %103, float %780, float %786, !dbg !90
  %788 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !27
  %789 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %790 = bitcast i16 %159 to bfloat, !dbg !42
  %791 = fpext bfloat %790 to float, !dbg !91
  %792 = fmul float %.0.i11, %791, !dbg !92
  %793 = bitcast i16 %255 to bfloat, !dbg !48
  %794 = fpext bfloat %793 to float, !dbg !93
  %795 = fmul float %792, %794, !dbg !94
  %796 = fsub float 0.000000e+00, %795, !dbg !95
  %797 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !27
  %798 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %799 = bitcast i32 %798 to <2 x bfloat>, !dbg !17
  %800 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %801 = bitcast i32 %800 to <2 x bfloat>, !dbg !21
  %802 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %803 = bitcast i16 %158 to bfloat, !dbg !42
  %804 = fpext bfloat %803 to float, !dbg !91
  %805 = fmul float %.0.i8, %804, !dbg !92
  %806 = bitcast i16 %254 to bfloat, !dbg !48
  %807 = fpext bfloat %806 to float, !dbg !93
  %808 = fmul float %805, %807, !dbg !94
  %809 = fsub float 0.000000e+00, %808, !dbg !95
  %810 = bitcast i16 %289 to bfloat, !dbg !52
  %811 = fpext bfloat %810 to float, !dbg !96
  %812 = fmul float %.0.i32, %811, !dbg !97
  %813 = bitcast i16 %359 to bfloat, !dbg !58
  %814 = fpext bfloat %813 to float, !dbg !98
  %815 = fmul float %812, %814, !dbg !99
  %816 = select i1 %101, float %809, float %815, !dbg !90
  %817 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %818 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %819 = bitcast i16 %157 to bfloat, !dbg !42
  %820 = fpext bfloat %819 to float, !dbg !91
  %821 = fmul float %.0.i5, %820, !dbg !92
  %822 = bitcast i16 %253 to bfloat, !dbg !48
  %823 = fpext bfloat %822 to float, !dbg !93
  %824 = fmul float %821, %823, !dbg !94
  %825 = fsub float 0.000000e+00, %824, !dbg !95
  %826 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %827 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %828 = bitcast i32 %827 to <2 x bfloat>, !dbg !17
  %829 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %830 = bitcast i32 %829 to <2 x bfloat>, !dbg !21
  %831 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %832 = bitcast i16 %156 to bfloat, !dbg !42
  %833 = fpext bfloat %832 to float, !dbg !91
  %834 = fmul float %.0.i2, %833, !dbg !92
  %835 = bitcast i16 %252 to bfloat, !dbg !48
  %836 = fpext bfloat %835 to float, !dbg !93
  %837 = fmul float %834, %836, !dbg !94
  %838 = fsub float 0.000000e+00, %837, !dbg !95
  %839 = bitcast i16 %286 to bfloat, !dbg !52
  %840 = fpext bfloat %839 to float, !dbg !96
  %841 = fmul float %.0.i26, %840, !dbg !97
  %842 = bitcast i16 %357 to bfloat, !dbg !58
  %843 = fpext bfloat %842 to float, !dbg !98
  %844 = fmul float %841, %843, !dbg !99
  %845 = select i1 %99, float %838, float %844, !dbg !90
  %846 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %847 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %848 = bitcast i16 %155 to bfloat, !dbg !42
  %849 = fpext bfloat %848 to float, !dbg !91
  %850 = fmul float %.0.i, %849, !dbg !92
  %851 = bitcast i16 %251 to bfloat, !dbg !48
  %852 = fpext bfloat %851 to float, !dbg !93
  %853 = fmul float %850, %852, !dbg !94
  %854 = fsub float 0.000000e+00, %853, !dbg !95
  %855 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %856 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !33
  %857 = bitcast i32 %856 to <2 x bfloat>, !dbg !33
  %858 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !33
  %859 = bitcast i32 %858 to <2 x bfloat>, !dbg !33
  %860 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !33
  %861 = bitcast i32 %860 to <2 x bfloat>, !dbg !33
  %862 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !33
  %863 = bitcast i32 %862 to <2 x bfloat>, !dbg !33
  %864 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %865 = bitcast i32 %864 to <2 x bfloat>, !dbg !29
  %866 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %867 = bitcast i32 %866 to <2 x bfloat>, !dbg !29
  %868 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %869 = bitcast i32 %868 to <2 x bfloat>, !dbg !29
  %870 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %871 = bitcast i32 %870 to <2 x bfloat>, !dbg !29
  %872 = getelementptr bfloat, ptr addrspace(1) %8, i64 %28, !dbg !100
  %873 = fpext <2 x bfloat> %828 to <2 x float>, !dbg !101
  %874 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !102
  %875 = insertelement <2 x float> %874, float %.0.i50, i64 1, !dbg !102
  %876 = fmul <2 x float> %875, %873, !dbg !102
  %877 = fpext <2 x bfloat> %830 to <2 x float>, !dbg !103
  %878 = fmul <2 x float> %876, %877, !dbg !104
  %879 = insertelement <2 x i32> poison, i32 %847, i64 0, !dbg !25
  %880 = insertelement <2 x i32> %879, i32 %831, i64 1, !dbg !25
  %881 = bitcast <2 x i32> %880 to <2 x float>, !dbg !25
  %882 = fmul <2 x float> %878, %881, !dbg !105
  %883 = insertelement <2 x i32> poison, i32 %855, i64 0, !dbg !27
  %884 = insertelement <2 x i32> %883, i32 %846, i64 1, !dbg !27
  %885 = bitcast <2 x i32> %884 to <2 x float>, !dbg !27
  %886 = insertelement <2 x float> poison, float %854, i64 0, !dbg !106
  %887 = insertelement <2 x float> %886, float %845, i64 1, !dbg !106
  %888 = fmul <2 x float> %887, %885, !dbg !106
  %889 = fadd <2 x float> %888, %882, !dbg !107
  %890 = fptrunc <2 x float> %889 to <2 x bfloat>, !dbg !108
  %891 = fpext <2 x bfloat> %799 to <2 x float>, !dbg !101
  %892 = insertelement <2 x float> poison, float %.0.i53, i64 0, !dbg !102
  %893 = insertelement <2 x float> %892, float %.0.i56, i64 1, !dbg !102
  %894 = fmul <2 x float> %893, %891, !dbg !102
  %895 = fpext <2 x bfloat> %801 to <2 x float>, !dbg !103
  %896 = fmul <2 x float> %894, %895, !dbg !104
  %897 = insertelement <2 x i32> poison, i32 %818, i64 0, !dbg !25
  %898 = insertelement <2 x i32> %897, i32 %802, i64 1, !dbg !25
  %899 = bitcast <2 x i32> %898 to <2 x float>, !dbg !25
  %900 = fmul <2 x float> %896, %899, !dbg !105
  %901 = insertelement <2 x i32> poison, i32 %826, i64 0, !dbg !27
  %902 = insertelement <2 x i32> %901, i32 %817, i64 1, !dbg !27
  %903 = bitcast <2 x i32> %902 to <2 x float>, !dbg !27
  %904 = insertelement <2 x float> poison, float %825, i64 0, !dbg !106
  %905 = insertelement <2 x float> %904, float %816, i64 1, !dbg !106
  %906 = fmul <2 x float> %905, %903, !dbg !106
  %907 = fadd <2 x float> %906, %900, !dbg !107
  %908 = fptrunc <2 x float> %907 to <2 x bfloat>, !dbg !108
  %909 = fpext <2 x bfloat> %770 to <2 x float>, !dbg !101
  %910 = insertelement <2 x float> poison, float %.0.i59, i64 0, !dbg !102
  %911 = insertelement <2 x float> %910, float %.0.i62, i64 1, !dbg !102
  %912 = fmul <2 x float> %911, %909, !dbg !102
  %913 = fpext <2 x bfloat> %772 to <2 x float>, !dbg !103
  %914 = fmul <2 x float> %912, %913, !dbg !104
  %915 = insertelement <2 x i32> poison, i32 %789, i64 0, !dbg !25
  %916 = insertelement <2 x i32> %915, i32 %773, i64 1, !dbg !25
  %917 = bitcast <2 x i32> %916 to <2 x float>, !dbg !25
  %918 = fmul <2 x float> %914, %917, !dbg !105
  %919 = insertelement <2 x i32> poison, i32 %797, i64 0, !dbg !27
  %920 = insertelement <2 x i32> %919, i32 %788, i64 1, !dbg !27
  %921 = bitcast <2 x i32> %920 to <2 x float>, !dbg !27
  %922 = insertelement <2 x float> poison, float %796, i64 0, !dbg !106
  %923 = insertelement <2 x float> %922, float %787, i64 1, !dbg !106
  %924 = fmul <2 x float> %923, %921, !dbg !106
  %925 = fadd <2 x float> %924, %918, !dbg !107
  %926 = fptrunc <2 x float> %925 to <2 x bfloat>, !dbg !108
  %927 = fpext <2 x bfloat> %741 to <2 x float>, !dbg !101
  %928 = insertelement <2 x float> poison, float %.0.i65, i64 0, !dbg !102
  %929 = insertelement <2 x float> %928, float %.0.i68, i64 1, !dbg !102
  %930 = fmul <2 x float> %929, %927, !dbg !102
  %931 = fpext <2 x bfloat> %743 to <2 x float>, !dbg !103
  %932 = fmul <2 x float> %930, %931, !dbg !104
  %933 = insertelement <2 x i32> poison, i32 %760, i64 0, !dbg !25
  %934 = insertelement <2 x i32> %933, i32 %744, i64 1, !dbg !25
  %935 = bitcast <2 x i32> %934 to <2 x float>, !dbg !25
  %936 = fmul <2 x float> %932, %935, !dbg !105
  %937 = insertelement <2 x i32> poison, i32 %768, i64 0, !dbg !27
  %938 = insertelement <2 x i32> %937, i32 %759, i64 1, !dbg !27
  %939 = bitcast <2 x i32> %938 to <2 x float>, !dbg !27
  %940 = insertelement <2 x float> poison, float %767, i64 0, !dbg !106
  %941 = insertelement <2 x float> %940, float %758, i64 1, !dbg !106
  %942 = fmul <2 x float> %941, %939, !dbg !106
  %943 = fadd <2 x float> %942, %936, !dbg !107
  %944 = fptrunc <2 x float> %943 to <2 x bfloat>, !dbg !108
  %945 = bitcast <2 x bfloat> %890 to i32, !dbg !108
  %946 = bitcast <2 x bfloat> %908 to i32, !dbg !108
  %947 = bitcast <2 x bfloat> %926 to i32, !dbg !108
  %948 = bitcast <2 x bfloat> %944 to i32, !dbg !108
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %945, i32 %946, i32 %947, i32 %948, ptr addrspace(1) %872) #3, !dbg !108
  %949 = getelementptr bfloat, ptr addrspace(1) %9, i64 %28, !dbg !109
  %950 = fpext <2 x bfloat> %863 to <2 x float>, !dbg !110
  %951 = fpext <2 x bfloat> %871 to <2 x float>, !dbg !111
  %952 = insertelement <2 x float> poison, float %.0.i119, i64 0, !dbg !112
  %953 = insertelement <2 x float> %952, float %.0.i122, i64 1, !dbg !112
  %954 = fmul <2 x float> %953, %951, !dbg !112
  %955 = fmul <2 x float> %954, %950, !dbg !113
  %956 = fmul <2 x float> %955, %881, !dbg !114
  %957 = insertelement <2 x float> poison, float %739, i64 0, !dbg !115
  %958 = insertelement <2 x float> %957, float %732, i64 1, !dbg !115
  %959 = fmul <2 x float> %958, %885, !dbg !115
  %960 = fadd <2 x float> %959, %956, !dbg !116
  %961 = fptrunc <2 x float> %960 to <2 x bfloat>, !dbg !117
  %962 = fpext <2 x bfloat> %861 to <2 x float>, !dbg !110
  %963 = fpext <2 x bfloat> %869 to <2 x float>, !dbg !111
  %964 = insertelement <2 x float> poison, float %.0.i125, i64 0, !dbg !112
  %965 = insertelement <2 x float> %964, float %.0.i128, i64 1, !dbg !112
  %966 = fmul <2 x float> %965, %963, !dbg !112
  %967 = fmul <2 x float> %966, %962, !dbg !113
  %968 = fmul <2 x float> %967, %899, !dbg !114
  %969 = insertelement <2 x float> poison, float %718, i64 0, !dbg !115
  %970 = insertelement <2 x float> %969, float %711, i64 1, !dbg !115
  %971 = fmul <2 x float> %970, %903, !dbg !115
  %972 = fadd <2 x float> %971, %968, !dbg !116
  %973 = fptrunc <2 x float> %972 to <2 x bfloat>, !dbg !117
  %974 = fpext <2 x bfloat> %859 to <2 x float>, !dbg !110
  %975 = fpext <2 x bfloat> %867 to <2 x float>, !dbg !111
  %976 = insertelement <2 x float> poison, float %.0.i131, i64 0, !dbg !112
  %977 = insertelement <2 x float> %976, float %.0.i134, i64 1, !dbg !112
  %978 = fmul <2 x float> %977, %975, !dbg !112
  %979 = fmul <2 x float> %978, %974, !dbg !113
  %980 = fmul <2 x float> %979, %917, !dbg !114
  %981 = insertelement <2 x float> poison, float %697, i64 0, !dbg !115
  %982 = insertelement <2 x float> %981, float %690, i64 1, !dbg !115
  %983 = fmul <2 x float> %982, %921, !dbg !115
  %984 = fadd <2 x float> %983, %980, !dbg !116
  %985 = fptrunc <2 x float> %984 to <2 x bfloat>, !dbg !117
  %986 = fpext <2 x bfloat> %857 to <2 x float>, !dbg !110
  %987 = fpext <2 x bfloat> %865 to <2 x float>, !dbg !111
  %988 = insertelement <2 x float> poison, float %.0.i137, i64 0, !dbg !112
  %989 = insertelement <2 x float> %988, float %.0.i140, i64 1, !dbg !112
  %990 = fmul <2 x float> %989, %987, !dbg !112
  %991 = fmul <2 x float> %990, %986, !dbg !113
  %992 = fmul <2 x float> %991, %935, !dbg !114
  %993 = insertelement <2 x float> poison, float %676, i64 0, !dbg !115
  %994 = insertelement <2 x float> %993, float %669, i64 1, !dbg !115
  %995 = fmul <2 x float> %994, %939, !dbg !115
  %996 = fadd <2 x float> %995, %992, !dbg !116
  %997 = fptrunc <2 x float> %996 to <2 x bfloat>, !dbg !117
  %998 = bitcast <2 x bfloat> %961 to i32, !dbg !117
  %999 = bitcast <2 x bfloat> %973 to i32, !dbg !117
  %1000 = bitcast <2 x bfloat> %985 to i32, !dbg !117
  %1001 = bitcast <2 x bfloat> %997 to i32, !dbg !117
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %998, i32 %999, i32 %1000, i32 %1001, ptr addrspace(1) %949) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cka5htlgwcybbmfp5fo5rnnp6zvsmkuqgrybboel23tm5mabc2ia.py", directory: "/tmp/torchinductor_root/ka")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 19, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 19, scope: !6)
!16 = !DILocation(line: 27, column: 31, scope: !6)
!17 = !DILocation(line: 27, column: 36, scope: !6)
!18 = !DILocation(line: 28, column: 31, scope: !6)
!19 = !DILocation(line: 28, column: 36, scope: !6)
!20 = !DILocation(line: 29, column: 31, scope: !6)
!21 = !DILocation(line: 29, column: 36, scope: !6)
!22 = !DILocation(line: 30, column: 40, scope: !6)
!23 = !DILocation(line: 30, column: 36, scope: !6)
!24 = !DILocation(line: 30, column: 31, scope: !6)
!25 = !DILocation(line: 30, column: 45, scope: !6)
!26 = !DILocation(line: 31, column: 31, scope: !6)
!27 = !DILocation(line: 31, column: 45, scope: !6)
!28 = !DILocation(line: 32, column: 31, scope: !6)
!29 = !DILocation(line: 32, column: 36, scope: !6)
!30 = !DILocation(line: 33, column: 31, scope: !6)
!31 = !DILocation(line: 33, column: 36, scope: !6)
!32 = !DILocation(line: 34, column: 31, scope: !6)
!33 = !DILocation(line: 34, column: 36, scope: !6)
!34 = !DILocation(line: 35, column: 17, scope: !6)
!35 = !DILocation(line: 39, column: 18, scope: !6)
!36 = !DILocation(line: 40, column: 43, scope: !6)
!37 = !DILocation(line: 40, column: 37, scope: !6)
!38 = !DILocation(line: 40, column: 34, scope: !6)
!39 = !DILocation(line: 40, column: 52, scope: !6)
!40 = !DILocation(line: 40, column: 48, scope: !6)
!41 = !DILocation(line: 40, column: 30, scope: !6)
!42 = !DILocation(line: 40, column: 57, scope: !6)
!43 = !DILocation(line: 42, column: 35, scope: !6)
!44 = !DILocation(line: 44, column: 19, scope: !6)
!45 = !DILocation(line: 46, column: 19, scope: !6)
!46 = !DILocation(line: 47, column: 28, scope: !6)
!47 = !DILocation(line: 50, column: 31, scope: !6)
!48 = !DILocation(line: 50, column: 49, scope: !6)
!49 = !DILocation(line: 55, column: 20, scope: !6)
!50 = !DILocation(line: 58, column: 45, scope: !6)
!51 = !DILocation(line: 58, column: 31, scope: !6)
!52 = !DILocation(line: 58, column: 54, scope: !6)
!53 = !DILocation(line: 60, column: 36, scope: !6)
!54 = !DILocation(line: 62, column: 21, scope: !6)
!55 = !DILocation(line: 64, column: 20, scope: !6)
!56 = !DILocation(line: 65, column: 28, scope: !6)
!57 = !DILocation(line: 68, column: 31, scope: !6)
!58 = !DILocation(line: 68, column: 45, scope: !6)
!59 = !DILocation(line: 76, column: 21, scope: !6)
!60 = !DILocation(line: 78, column: 20, scope: !6)
!61 = !DILocation(line: 79, column: 28, scope: !6)
!62 = !DILocation(line: 88, column: 31, scope: !6)
!63 = !DILocation(line: 88, column: 58, scope: !6)
!64 = !DILocation(line: 90, column: 36, scope: !6)
!65 = !DILocation(line: 91, column: 21, scope: !6)
!66 = !DILocation(line: 92, column: 20, scope: !6)
!67 = !DILocation(line: 93, column: 28, scope: !6)
!68 = !DILocation(line: 96, column: 31, scope: !6)
!69 = !DILocation(line: 96, column: 49, scope: !6)
!70 = !DILocation(line: 101, column: 31, scope: !6)
!71 = !DILocation(line: 101, column: 54, scope: !6)
!72 = !DILocation(line: 103, column: 36, scope: !6)
!73 = !DILocation(line: 104, column: 21, scope: !6)
!74 = !DILocation(line: 105, column: 20, scope: !6)
!75 = !DILocation(line: 106, column: 28, scope: !6)
!76 = !DILocation(line: 109, column: 31, scope: !6)
!77 = !DILocation(line: 109, column: 45, scope: !6)
!78 = !DILocation(line: 116, column: 21, scope: !6)
!79 = !DILocation(line: 117, column: 20, scope: !6)
!80 = !DILocation(line: 118, column: 28, scope: !6)
!81 = !DILocation(line: 88, column: 108, scope: !6)
!82 = !DILocation(line: 94, column: 20, scope: !6)
!83 = !DILocation(line: 96, column: 99, scope: !6)
!84 = !DILocation(line: 97, column: 20, scope: !6)
!85 = !DILocation(line: 98, column: 13, scope: !6)
!86 = !DILocation(line: 101, column: 105, scope: !6)
!87 = !DILocation(line: 107, column: 20, scope: !6)
!88 = !DILocation(line: 109, column: 96, scope: !6)
!89 = !DILocation(line: 110, column: 20, scope: !6)
!90 = !DILocation(line: 0, scope: !6)
!91 = !DILocation(line: 40, column: 107, scope: !6)
!92 = !DILocation(line: 48, column: 19, scope: !6)
!93 = !DILocation(line: 50, column: 99, scope: !6)
!94 = !DILocation(line: 51, column: 20, scope: !6)
!95 = !DILocation(line: 52, column: 13, scope: !6)
!96 = !DILocation(line: 58, column: 105, scope: !6)
!97 = !DILocation(line: 66, column: 20, scope: !6)
!98 = !DILocation(line: 68, column: 96, scope: !6)
!99 = !DILocation(line: 69, column: 20, scope: !6)
!100 = !DILocation(line: 127, column: 25, scope: !6)
!101 = !DILocation(line: 27, column: 45, scope: !6)
!102 = !DILocation(line: 80, column: 20, scope: !6)
!103 = !DILocation(line: 29, column: 75, scope: !6)
!104 = !DILocation(line: 82, column: 20, scope: !6)
!105 = !DILocation(line: 84, column: 20, scope: !6)
!106 = !DILocation(line: 85, column: 20, scope: !6)
!107 = !DILocation(line: 86, column: 20, scope: !6)
!108 = !DILocation(line: 127, column: 37, scope: !6)
!109 = !DILocation(line: 128, column: 25, scope: !6)
!110 = !DILocation(line: 34, column: 75, scope: !6)
!111 = !DILocation(line: 32, column: 45, scope: !6)
!112 = !DILocation(line: 119, column: 20, scope: !6)
!113 = !DILocation(line: 121, column: 20, scope: !6)
!114 = !DILocation(line: 123, column: 20, scope: !6)
!115 = !DILocation(line: 124, column: 20, scope: !6)
!116 = !DILocation(line: 125, column: 20, scope: !6)
!117 = !DILocation(line: 128, column: 37, scope: !6)
!118 = !DILocation(line: 128, column: 4, scope: !6)
