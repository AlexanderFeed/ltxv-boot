; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
.peel.begin:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 6, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 3, !dbg !11
  %23 = and i32 %22, 63, !dbg !11
  %24 = or disjoint i32 %23, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = shl i32 %21, 3, !dbg !14
  %27 = and i32 %26, 56, !dbg !14
  %28 = mul i32 %24, 3072, !dbg !15
  %29 = or disjoint i32 %28, %27
  %30 = sext i32 %29 to i64, !dbg !16
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %25) #5, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !17
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !17
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !17
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !17
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !17
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !17
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !17
  %49 = fpext bfloat %41 to float, !dbg !18
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = fpext bfloat %47 to float, !dbg !18
  %56 = fpext bfloat %48 to float, !dbg !18
  %57 = select i1 %25, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %25, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %25, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %25, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %25, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %25, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %25, float %55, float 0.000000e+00, !dbg !19
  %64 = select i1 %25, float %56, float 0.000000e+00, !dbg !19
  %65 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %66 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %70 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %71 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %72 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 64, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ %70, %.peel.begin ], [ %203, %._crit_edge ]
  %79 = phi float [ %71, %.peel.begin ], [ %204, %._crit_edge ]
  %80 = phi float [ %72, %.peel.begin ], [ %205, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %.peel.begin ], [ %195, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %.peel.begin ], [ %196, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %.peel.begin ], [ %197, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = phi float [ %62, %.peel.begin ], [ %187, %._crit_edge ]
  %95 = phi float [ %63, %.peel.begin ], [ %188, %._crit_edge ]
  %96 = phi float [ %64, %.peel.begin ], [ %189, %._crit_edge ]
  %97 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %98 = add i32 %29, %97, !dbg !22
  %99 = sext i32 %98 to i64, !dbg !16
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !16
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %100, i1 %25) #5, !dbg !17
  %102 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !17
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !17
  %104 = extractelement <2 x bfloat> %103, i64 1, !dbg !17
  %105 = fpext bfloat %104 to float, !dbg !18
  %106 = extractelement <2 x bfloat> %103, i64 0, !dbg !17
  %107 = fpext bfloat %106 to float, !dbg !18
  %108 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !17
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !17
  %110 = extractelement <2 x bfloat> %109, i64 1, !dbg !17
  %111 = fpext bfloat %110 to float, !dbg !18
  %112 = extractelement <2 x bfloat> %109, i64 0, !dbg !17
  %113 = fpext bfloat %112 to float, !dbg !18
  %114 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !17
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !17
  %116 = extractelement <2 x bfloat> %115, i64 1, !dbg !17
  %117 = fpext bfloat %116 to float, !dbg !18
  %118 = extractelement <2 x bfloat> %115, i64 0, !dbg !17
  %119 = fpext bfloat %118 to float, !dbg !18
  %120 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !17
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !17
  %122 = extractelement <2 x bfloat> %121, i64 1, !dbg !17
  %123 = fpext bfloat %122 to float, !dbg !18
  %124 = extractelement <2 x bfloat> %121, i64 0, !dbg !17
  %125 = fpext bfloat %124 to float, !dbg !18
  %126 = fsub float %125, %89, !dbg !23
  %127 = fsub float %123, %90, !dbg !23
  %128 = fsub float %119, %91, !dbg !23
  %129 = fsub float %117, %92, !dbg !23
  %130 = fsub float %113, %93, !dbg !23
  %131 = fsub float %111, %94, !dbg !23
  %132 = fsub float %107, %95, !dbg !23
  %133 = fsub float %105, %96, !dbg !23
  %134 = fadd float %73, 1.000000e+00, !dbg !27
  %135 = fadd float %74, 1.000000e+00, !dbg !27
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = fadd float %78, 1.000000e+00, !dbg !27
  %140 = fadd float %79, 1.000000e+00, !dbg !27
  %141 = fadd float %80, 1.000000e+00, !dbg !27
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !28
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !28
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = tail call float @llvm.nvvm.div.full(float %131, float %139), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float %132, float %140), !dbg !28
  %149 = tail call float @llvm.nvvm.div.full(float %133, float %141), !dbg !28
  %150 = fadd float %89, %142, !dbg !29
  %151 = fadd float %90, %143, !dbg !29
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fadd float %94, %147, !dbg !29
  %156 = fadd float %95, %148, !dbg !29
  %157 = fadd float %96, %149, !dbg !29
  %158 = fsub float %125, %150, !dbg !30
  %159 = fsub float %123, %151, !dbg !30
  %160 = fsub float %119, %152, !dbg !30
  %161 = fsub float %117, %153, !dbg !30
  %162 = fsub float %113, %154, !dbg !30
  %163 = fsub float %111, %155, !dbg !30
  %164 = fsub float %107, %156, !dbg !30
  %165 = fsub float %105, %157, !dbg !30
  %166 = fmul float %126, %158, !dbg !31
  %167 = fmul float %127, %159, !dbg !31
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fmul float %131, %163, !dbg !31
  %172 = fmul float %132, %164, !dbg !31
  %173 = fmul float %133, %165, !dbg !31
  %174 = fadd float %81, %166, !dbg !32
  %175 = fadd float %82, %167, !dbg !32
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = fadd float %86, %171, !dbg !32
  %180 = fadd float %87, %172, !dbg !32
  %181 = fadd float %88, %173, !dbg !32
  %182 = select i1 %25, float %150, float %89, !dbg !19
  %183 = select i1 %25, float %151, float %90, !dbg !19
  %184 = select i1 %25, float %152, float %91, !dbg !19
  %185 = select i1 %25, float %153, float %92, !dbg !19
  %186 = select i1 %25, float %154, float %93, !dbg !19
  %187 = select i1 %25, float %155, float %94, !dbg !19
  %188 = select i1 %25, float %156, float %95, !dbg !19
  %189 = select i1 %25, float %157, float %96, !dbg !19
  %190 = select i1 %25, float %174, float %81, !dbg !33
  %191 = select i1 %25, float %175, float %82, !dbg !33
  %192 = select i1 %25, float %176, float %83, !dbg !33
  %193 = select i1 %25, float %177, float %84, !dbg !33
  %194 = select i1 %25, float %178, float %85, !dbg !33
  %195 = select i1 %25, float %179, float %86, !dbg !33
  %196 = select i1 %25, float %180, float %87, !dbg !33
  %197 = select i1 %25, float %181, float %88, !dbg !33
  %198 = select i1 %25, float %134, float %73, !dbg !20
  %199 = select i1 %25, float %135, float %74, !dbg !20
  %200 = select i1 %25, float %136, float %75, !dbg !20
  %201 = select i1 %25, float %137, float %76, !dbg !20
  %202 = select i1 %25, float %138, float %77, !dbg !20
  %203 = select i1 %25, float %139, float %78, !dbg !20
  %204 = select i1 %25, float %140, float %79, !dbg !20
  %205 = select i1 %25, float %141, float %80, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !21
  %206 = icmp samesign ult i64 %indvars.iv, 3008, !dbg !21
  br i1 %206, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %207 = fadd float %190, %191, !dbg !11
  %208 = and i32 %21, 63, !dbg !11
  %209 = or disjoint i32 %20, %208, !dbg !12
  %210 = icmp slt i32 %209, 4112, !dbg !13
  %211 = fsub float %183, %182, !dbg !36
  %212 = fadd float %198, %199, !dbg !39
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !40
  %214 = tail call float @llvm.nvvm.div.full(float %199, float %212), !dbg !41
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !42
  %216 = fmul float %211, %215, !dbg !43
  %217 = fadd float %182, %216, !dbg !44
  %218 = fmul float %211, %211, !dbg !45
  %219 = fmul float %218, %198, !dbg !46
  %220 = fmul float %219, %215, !dbg !47
  %221 = fadd float %207, %220, !dbg !48
  %222 = fsub float %184, %217, !dbg !36
  %223 = fadd float %200, %212, !dbg !39
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !40
  %225 = tail call float @llvm.nvvm.div.full(float %200, float %223), !dbg !41
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !42
  %227 = fmul float %226, %222, !dbg !43
  %228 = fadd float %217, %227, !dbg !44
  %229 = fadd float %192, %221, !dbg !49
  %230 = fmul float %222, %222, !dbg !45
  %231 = fmul float %212, %230, !dbg !46
  %232 = fmul float %226, %231, !dbg !47
  %233 = fadd float %229, %232, !dbg !48
  %234 = fsub float %185, %228, !dbg !36
  %235 = fadd float %201, %223, !dbg !39
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !40
  %237 = tail call float @llvm.nvvm.div.full(float %201, float %235), !dbg !41
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !42
  %239 = fmul float %238, %234, !dbg !43
  %240 = fadd float %228, %239, !dbg !44
  %241 = fadd float %193, %233, !dbg !49
  %242 = fmul float %234, %234, !dbg !45
  %243 = fmul float %223, %242, !dbg !46
  %244 = fmul float %238, %243, !dbg !47
  %245 = fadd float %241, %244, !dbg !48
  %246 = fsub float %186, %240, !dbg !36
  %247 = fadd float %202, %235, !dbg !39
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !40
  %249 = tail call float @llvm.nvvm.div.full(float %202, float %247), !dbg !41
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !42
  %251 = fmul float %250, %246, !dbg !43
  %252 = fadd float %240, %251, !dbg !44
  %253 = fadd float %194, %245, !dbg !49
  %254 = fmul float %246, %246, !dbg !45
  %255 = fmul float %235, %254, !dbg !46
  %256 = fmul float %250, %255, !dbg !47
  %257 = fadd float %253, %256, !dbg !48
  %258 = fsub float %187, %252, !dbg !36
  %259 = fadd float %203, %247, !dbg !39
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !40
  %261 = tail call float @llvm.nvvm.div.full(float %203, float %259), !dbg !41
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !42
  %263 = fmul float %262, %258, !dbg !43
  %264 = fadd float %252, %263, !dbg !44
  %265 = fadd float %195, %257, !dbg !49
  %266 = fmul float %258, %258, !dbg !45
  %267 = fmul float %247, %266, !dbg !46
  %268 = fmul float %262, %267, !dbg !47
  %269 = fadd float %265, %268, !dbg !48
  %270 = fsub float %188, %264, !dbg !36
  %271 = fadd float %204, %259, !dbg !39
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !40
  %273 = tail call float @llvm.nvvm.div.full(float %204, float %271), !dbg !41
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !42
  %275 = fmul float %274, %270, !dbg !43
  %276 = fadd float %264, %275, !dbg !44
  %277 = fadd float %196, %269, !dbg !49
  %278 = fmul float %270, %270, !dbg !45
  %279 = fmul float %259, %278, !dbg !46
  %280 = fmul float %274, %279, !dbg !47
  %281 = fadd float %277, %280, !dbg !48
  %282 = fsub float %189, %276, !dbg !36
  %283 = fadd float %205, %271, !dbg !39
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !40
  %285 = tail call float @llvm.nvvm.div.full(float %205, float %283), !dbg !41
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !42
  %287 = fmul float %286, %282, !dbg !43
  %288 = fadd float %276, %287, !dbg !44
  %289 = fadd float %197, %281, !dbg !49
  %290 = fmul float %282, %282, !dbg !45
  %291 = fmul float %271, %290, !dbg !46
  %292 = fmul float %286, %291, !dbg !47
  %293 = fadd float %289, %292, !dbg !48
  %294 = bitcast float %288 to i32, !dbg !50
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !50
  %296 = bitcast i32 %295 to float, !dbg !50
  %297 = bitcast float %293 to i32, !dbg !50
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 4, i32 31), !dbg !50
  %299 = bitcast i32 %298 to float, !dbg !50
  %300 = bitcast float %283 to i32, !dbg !50
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 4, i32 31), !dbg !50
  %302 = bitcast i32 %301 to float, !dbg !50
  %303 = fsub float %296, %288, !dbg !36
  %304 = fadd float %283, %302, !dbg !39
  %305 = fcmp oeq float %304, 0.000000e+00, !dbg !40
  %306 = tail call float @llvm.nvvm.div.full(float %302, float %304), !dbg !41
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !42
  %308 = fmul float %307, %303, !dbg !43
  %309 = fadd float %288, %308, !dbg !44
  %310 = fadd float %293, %299, !dbg !49
  %311 = fmul float %303, %303, !dbg !45
  %312 = fmul float %283, %311, !dbg !46
  %313 = fmul float %307, %312, !dbg !47
  %314 = fadd float %310, %313, !dbg !48
  %315 = bitcast float %309 to i32, !dbg !50
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !50
  %317 = bitcast i32 %316 to float, !dbg !50
  %318 = bitcast float %314 to i32, !dbg !50
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !50
  %320 = bitcast i32 %319 to float, !dbg !50
  %321 = bitcast float %304 to i32, !dbg !50
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 2, i32 31), !dbg !50
  %323 = bitcast i32 %322 to float, !dbg !50
  %324 = fsub float %317, %309, !dbg !36
  %325 = fadd float %304, %323, !dbg !39
  %326 = fcmp oeq float %325, 0.000000e+00, !dbg !40
  %327 = tail call float @llvm.nvvm.div.full(float %323, float %325), !dbg !41
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !42
  %329 = fmul float %328, %324, !dbg !43
  %330 = fadd float %309, %329, !dbg !44
  %331 = fadd float %314, %320, !dbg !49
  %332 = fmul float %324, %324, !dbg !45
  %333 = fmul float %304, %332, !dbg !46
  %334 = fmul float %328, %333, !dbg !47
  %335 = fadd float %331, %334, !dbg !48
  %336 = bitcast float %330 to i32, !dbg !50
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !50
  %338 = bitcast i32 %337 to float, !dbg !50
  %339 = bitcast float %335 to i32, !dbg !50
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !50
  %341 = bitcast i32 %340 to float, !dbg !50
  %342 = bitcast float %325 to i32, !dbg !50
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !50
  %344 = bitcast i32 %343 to float, !dbg !50
  %345 = fsub float %338, %330, !dbg !36
  %346 = fadd float %325, %344, !dbg !39
  %347 = fcmp oeq float %346, 0.000000e+00, !dbg !40
  %348 = tail call float @llvm.nvvm.div.full(float %344, float %346), !dbg !41
  %349 = select i1 %347, float 0.000000e+00, float %348, !dbg !42
  %350 = fmul float %349, %345, !dbg !43
  %351 = fadd float %330, %350, !dbg !44
  %352 = fadd float %335, %341, !dbg !49
  %353 = fmul float %345, %345, !dbg !45
  %354 = fmul float %325, %353, !dbg !46
  %355 = fmul float %349, %354, !dbg !47
  %356 = fadd float %352, %355, !dbg !48
  %357 = tail call float @llvm.nvvm.div.full(float %356, float 3.072000e+03), !dbg !51
  %358 = fadd float %357, 0x3EB0C6F7A0000000, !dbg !52
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i39 = icmp eq i32 %366, 0, !dbg !53
  br i1 %.not.i39, label %369, label %367, !dbg !53

367:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %368 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %358), !dbg !53
  br label %__nv_rsqrtf.exit41, !dbg !53

369:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %370 = tail call float @llvm.nvvm.rsqrt.approx.f(float %358), !dbg !53
  br label %__nv_rsqrtf.exit41, !dbg !53

__nv_rsqrtf.exit41:                               ; preds = %367, %369
  %.0.i40 = phi float [ %368, %367 ], [ %370, %369 ], !dbg !53
  %371 = zext nneg i32 %27 to i64, !dbg !54
  %372 = insertelement <2 x i1> poison, i1 %25, i64 0, !dbg !55
  %373 = shufflevector <2 x i1> %372, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %374 = insertelement <2 x float> poison, float %.0.i40, i64 0, !dbg !56
  %375 = shufflevector <2 x float> %374, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %376 = insertelement <2 x float> poison, float %351, i64 0, !dbg !57
  %377 = shufflevector <2 x float> %376, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %378 = insertelement <8 x i1> poison, i1 %25, i64 0, !dbg !58
  %379 = shufflevector <8 x i1> %378, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !58
  %380 = insertelement <4 x float> poison, float %.0.i40, i64 0, !dbg !56
  %381 = shufflevector <4 x float> %380, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %382 = insertelement <4 x float> poison, float %351, i64 0, !dbg !57
  %383 = shufflevector <4 x float> %382, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %384 = insertelement <4 x i1> poison, i1 %25, i64 0, !dbg !55
  %385 = shufflevector <4 x i1> %384, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  br label %386, !dbg !54

386:                                              ; preds = %__nv_rsqrtf.exit41, %386
  %indvars.iv85 = phi i64 [ 0, %__nv_rsqrtf.exit41 ], [ %indvars.iv.next86, %386 ]
  %387 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %530, %386 ]
  %388 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %531, %386 ]
  %389 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit41 ], [ %475, %386 ]
  %390 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit41 ], [ %538, %386 ]
  %391 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit41 ], [ %503, %386 ]
  %392 = or disjoint i64 %indvars.iv85, %371, !dbg !59
  %393 = or disjoint i64 %392, 4, !dbg !59
  %394 = trunc nuw nsw i64 %392 to i32, !dbg !60
  %395 = add i32 %28, %394, !dbg !60
  %396 = sext i32 %395 to i64, !dbg !61
  %397 = getelementptr bfloat, ptr addrspace(1) %0, i64 %396, !dbg !61
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %397, i1 %25) #5, !dbg !62
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !62
  %400 = bitcast i32 %399 to <2 x bfloat>, !dbg !62
  %401 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !62
  %402 = bitcast i32 %401 to <2 x bfloat>, !dbg !62
  %403 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !62
  %404 = bitcast i32 %403 to <2 x bfloat>, !dbg !62
  %405 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !62
  %406 = bitcast i32 %405 to <2 x bfloat>, !dbg !62
  %407 = add nuw nsw i64 %392, 3072, !dbg !63
  %408 = getelementptr float, ptr addrspace(1) %1, i64 %407, !dbg !64
  %409 = getelementptr float, ptr addrspace(1) %1, i64 %393, !dbg !64
  %410 = getelementptr i8, ptr addrspace(1) %409, i64 12288, !dbg !64
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %408, i1 true) #5, !dbg !65
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !65
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !65
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !65
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !65
  %416 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %410, i1 true) #5, !dbg !65
  %417 = extractvalue { i32, i32, i32, i32 } %416, 0, !dbg !65
  %418 = extractvalue { i32, i32, i32, i32 } %416, 1, !dbg !65
  %419 = extractvalue { i32, i32, i32, i32 } %416, 2, !dbg !65
  %420 = extractvalue { i32, i32, i32, i32 } %416, 3, !dbg !65
  %421 = getelementptr bfloat, ptr addrspace(1) %2, i64 %407, !dbg !66
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %421, i1 true) #5, !dbg !67
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !67
  %424 = bitcast i32 %423 to <2 x bfloat>, !dbg !67
  %425 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !67
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !67
  %427 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !67
  %428 = bitcast i32 %427 to <2 x bfloat>, !dbg !67
  %429 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !67
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !67
  %431 = getelementptr float, ptr addrspace(1) %1, i64 %392, !dbg !68
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %431, i1 true) #5, !dbg !69
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !69
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !69
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !69
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !69
  %437 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %409, i1 true) #5, !dbg !69
  %438 = extractvalue { i32, i32, i32, i32 } %437, 0, !dbg !69
  %439 = extractvalue { i32, i32, i32, i32 } %437, 1, !dbg !69
  %440 = extractvalue { i32, i32, i32, i32 } %437, 2, !dbg !69
  %441 = extractvalue { i32, i32, i32, i32 } %437, 3, !dbg !69
  %442 = getelementptr bfloat, ptr addrspace(1) %2, i64 %392, !dbg !70
  %443 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %442, i1 true) #5, !dbg !71
  %444 = extractvalue { i32, i32, i32, i32 } %443, 0, !dbg !71
  %445 = bitcast i32 %444 to <2 x bfloat>, !dbg !71
  %446 = extractvalue { i32, i32, i32, i32 } %443, 1, !dbg !71
  %447 = bitcast i32 %446 to <2 x bfloat>, !dbg !71
  %448 = extractvalue { i32, i32, i32, i32 } %443, 2, !dbg !71
  %449 = bitcast i32 %448 to <2 x bfloat>, !dbg !71
  %450 = extractvalue { i32, i32, i32, i32 } %443, 3, !dbg !71
  %451 = bitcast i32 %450 to <2 x bfloat>, !dbg !71
  %452 = fcmp uno <2 x float> %389, zeroinitializer, !dbg !72
  %453 = fcmp uno float %387, 0.000000e+00, !dbg !72
  %454 = fcmp uno float %388, 0.000000e+00, !dbg !72
  %455 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !72
  %456 = fpext <2 x bfloat> %400 to <2 x float>, !dbg !74
  %457 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !65
  %458 = insertelement <2 x i32> %457, i32 %413, i64 1, !dbg !65
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !65
  %460 = fpext <2 x bfloat> %424 to <2 x float>, !dbg !75
  %461 = insertelement <2 x i32> poison, i32 %433, i64 0, !dbg !69
  %462 = insertelement <2 x i32> %461, i32 %434, i64 1, !dbg !69
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !69
  %464 = fpext <2 x bfloat> %445 to <2 x float>, !dbg !76
  %465 = fsub <2 x float> %456, %377, !dbg !57
  %466 = fmul <2 x float> %375, %465, !dbg !56
  %467 = fadd <2 x float> %459, %460, !dbg !77
  %468 = fadd <2 x float> %467, splat (float 1.000000e+00), !dbg !78
  %469 = fmul <2 x float> %466, %468, !dbg !79
  %470 = fadd <2 x float> %463, %464, !dbg !80
  %471 = fadd <2 x float> %469, %470, !dbg !81
  %472 = fcmp olt <2 x float> %389, %471, !dbg !82
  %473 = or <2 x i1> %452, %472, !dbg !83
  %474 = select <2 x i1> %473, <2 x float> %389, <2 x float> %471, !dbg !84
  %475 = select <2 x i1> %373, <2 x float> %474, <2 x float> %389, !dbg !55
  %476 = fcmp uno <8 x float> %390, zeroinitializer, !dbg !85
  %477 = shufflevector <2 x bfloat> %404, <2 x bfloat> %406, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !74
  %478 = fpext <4 x bfloat> %477 to <4 x float>, !dbg !74
  %479 = insertelement <4 x i32> poison, i32 %417, i64 0, !dbg !65
  %480 = insertelement <4 x i32> %479, i32 %418, i64 1, !dbg !65
  %481 = insertelement <4 x i32> %480, i32 %419, i64 2, !dbg !65
  %482 = insertelement <4 x i32> %481, i32 %420, i64 3, !dbg !65
  %483 = bitcast <4 x i32> %482 to <4 x float>, !dbg !65
  %484 = shufflevector <2 x bfloat> %428, <2 x bfloat> %430, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  %485 = fpext <4 x bfloat> %484 to <4 x float>, !dbg !75
  %486 = insertelement <4 x i32> poison, i32 %438, i64 0, !dbg !69
  %487 = insertelement <4 x i32> %486, i32 %439, i64 1, !dbg !69
  %488 = insertelement <4 x i32> %487, i32 %440, i64 2, !dbg !69
  %489 = insertelement <4 x i32> %488, i32 %441, i64 3, !dbg !69
  %490 = bitcast <4 x i32> %489 to <4 x float>, !dbg !69
  %491 = shufflevector <2 x bfloat> %449, <2 x bfloat> %451, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !76
  %492 = fpext <4 x bfloat> %491 to <4 x float>, !dbg !76
  %493 = fsub <4 x float> %478, %383, !dbg !57
  %494 = fmul <4 x float> %381, %493, !dbg !56
  %495 = fadd <4 x float> %483, %485, !dbg !77
  %496 = fadd <4 x float> %495, splat (float 1.000000e+00), !dbg !78
  %497 = fmul <4 x float> %494, %496, !dbg !79
  %498 = fadd <4 x float> %490, %492, !dbg !80
  %499 = fadd <4 x float> %497, %498, !dbg !81
  %500 = fcmp olt <4 x float> %391, %499, !dbg !82
  %501 = or <4 x i1> %455, %500, !dbg !83
  %502 = select <4 x i1> %501, <4 x float> %391, <4 x float> %499, !dbg !84
  %503 = select <4 x i1> %385, <4 x float> %502, <4 x float> %391, !dbg !55
  %504 = getelementptr bfloat, ptr addrspace(1) %3, i64 %396, !dbg !87
  %505 = fptrunc <2 x float> %471 to <2 x bfloat>, !dbg !88
  %506 = fpext <2 x bfloat> %402 to <2 x float>, !dbg !74
  %507 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !65
  %508 = insertelement <2 x i32> %507, i32 %415, i64 1, !dbg !65
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !65
  %510 = fpext <2 x bfloat> %426 to <2 x float>, !dbg !75
  %511 = insertelement <2 x i32> poison, i32 %435, i64 0, !dbg !69
  %512 = insertelement <2 x i32> %511, i32 %436, i64 1, !dbg !69
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !69
  %514 = fpext <2 x bfloat> %447 to <2 x float>, !dbg !76
  %515 = fsub <2 x float> %506, %377, !dbg !57
  %516 = fmul <2 x float> %375, %515, !dbg !56
  %517 = fadd <2 x float> %509, %510, !dbg !77
  %518 = fadd <2 x float> %517, splat (float 1.000000e+00), !dbg !78
  %519 = fmul <2 x float> %516, %518, !dbg !79
  %520 = fadd <2 x float> %513, %514, !dbg !80
  %521 = fadd <2 x float> %519, %520, !dbg !81
  %522 = extractelement <2 x float> %521, i64 0, !dbg !84
  %523 = fcmp olt float %387, %522, !dbg !82
  %524 = extractelement <2 x float> %521, i64 1, !dbg !84
  %525 = fcmp olt float %388, %524, !dbg !82
  %526 = or i1 %453, %523, !dbg !83
  %527 = or i1 %454, %525, !dbg !83
  %528 = select i1 %526, float %387, float %522, !dbg !84
  %529 = select i1 %527, float %388, float %524, !dbg !84
  %530 = select i1 %25, float %528, float %387, !dbg !55
  %531 = select i1 %25, float %529, float %388, !dbg !55
  %532 = shufflevector <2 x float> %471, <2 x float> %521, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %533 = shufflevector <4 x float> %499, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %534 = shufflevector <8 x float> %532, <8 x float> %533, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !89
  %535 = fcmp ogt <8 x float> %390, %534, !dbg !89
  %536 = or <8 x i1> %476, %535, !dbg !90
  %537 = select <8 x i1> %536, <8 x float> %390, <8 x float> %534, !dbg !91
  %538 = select <8 x i1> %379, <8 x float> %537, <8 x float> %390, !dbg !58
  %539 = fptrunc <2 x float> %521 to <2 x bfloat>, !dbg !88
  %540 = extractelement <4 x float> %499, i64 0, !dbg !88
  %541 = fptrunc float %540 to bfloat, !dbg !88
  %542 = extractelement <4 x float> %499, i64 1, !dbg !88
  %543 = fptrunc float %542 to bfloat, !dbg !88
  %544 = extractelement <4 x float> %499, i64 2, !dbg !88
  %545 = fptrunc float %544 to bfloat, !dbg !88
  %546 = extractelement <4 x float> %499, i64 3, !dbg !88
  %547 = fptrunc float %546 to bfloat, !dbg !88
  %548 = bitcast <2 x bfloat> %505 to i32, !dbg !88
  %549 = bitcast <2 x bfloat> %539 to i32, !dbg !88
  %550 = insertelement <2 x bfloat> poison, bfloat %541, i64 0, !dbg !88
  %551 = insertelement <2 x bfloat> %550, bfloat %543, i64 1, !dbg !88
  %552 = bitcast <2 x bfloat> %551 to i32, !dbg !88
  %553 = insertelement <2 x bfloat> poison, bfloat %545, i64 0, !dbg !88
  %554 = insertelement <2 x bfloat> %553, bfloat %547, i64 1, !dbg !88
  %555 = bitcast <2 x bfloat> %554 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %548, i32 %549, i32 %552, i32 %555, ptr addrspace(1) %504, i1 %25) #5, !dbg !88
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 64, !dbg !54
  %556 = icmp samesign ult i64 %indvars.iv85, 3008, !dbg !54
  br i1 %556, label %386, label %557, !dbg !54

557:                                              ; preds = %386
  %558 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %475, <2 x i32> <i32 0, i32 2>, !dbg !92
  %559 = fcmp olt <2 x float> %558, %475, !dbg !92
  %560 = fcmp uno <2 x float> %558, %475, !dbg !92
  %shift = shufflevector <2 x i1> %559, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %561 = or <2 x i1> %shift, %560, !dbg !94
  %562 = extractelement <2 x i1> %561, i64 0, !dbg !94
  %563 = extractelement <2 x float> %475, i64 0, !dbg !95
  %564 = extractelement <2 x float> %475, i64 1, !dbg !95
  %565 = select i1 %562, float %563, float %564, !dbg !95
  %566 = fcmp olt float %565, %530, !dbg !92
  %567 = fcmp uno float %565, 0.000000e+00, !dbg !96
  %568 = or i1 %566, %567, !dbg !94
  %569 = select i1 %568, float %565, float %530, !dbg !95
  %570 = fcmp olt float %569, %531, !dbg !92
  %571 = fcmp uno float %569, 0.000000e+00, !dbg !96
  %572 = or i1 %570, %571, !dbg !94
  %573 = select i1 %572, float %569, float %531, !dbg !95
  %574 = extractelement <4 x float> %503, i64 0, !dbg !92
  %575 = fcmp olt float %573, %574, !dbg !92
  %576 = fcmp uno float %573, 0.000000e+00, !dbg !96
  %577 = or i1 %575, %576, !dbg !94
  %578 = select i1 %577, float %573, float %574, !dbg !95
  %579 = extractelement <4 x float> %503, i64 1, !dbg !92
  %580 = fcmp olt float %578, %579, !dbg !92
  %581 = fcmp uno float %578, 0.000000e+00, !dbg !96
  %582 = or i1 %580, %581, !dbg !94
  %583 = select i1 %582, float %578, float %579, !dbg !95
  %584 = extractelement <4 x float> %503, i64 2, !dbg !92
  %585 = fcmp olt float %583, %584, !dbg !92
  %586 = fcmp uno float %583, 0.000000e+00, !dbg !96
  %587 = or i1 %585, %586, !dbg !94
  %588 = select i1 %587, float %583, float %584, !dbg !95
  %589 = extractelement <4 x float> %503, i64 3, !dbg !92
  %590 = fcmp olt float %588, %589, !dbg !92
  %591 = fcmp uno float %588, 0.000000e+00, !dbg !96
  %592 = or i1 %590, %591, !dbg !94
  %593 = select i1 %592, float %588, float %589, !dbg !95
  %594 = bitcast float %593 to i32, !dbg !97
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 4, i32 31), !dbg !97
  %596 = bitcast i32 %595 to float, !dbg !97
  %597 = fcmp olt float %593, %596, !dbg !92
  %598 = fcmp uno float %593, 0.000000e+00, !dbg !96
  %599 = or i1 %598, %597, !dbg !94
  %600 = select i1 %599, float %593, float %596, !dbg !95
  %601 = bitcast float %600 to i32, !dbg !97
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 2, i32 31), !dbg !97
  %603 = bitcast i32 %602 to float, !dbg !97
  %604 = fcmp olt float %600, %603, !dbg !92
  %605 = fcmp uno float %600, 0.000000e+00, !dbg !96
  %606 = or i1 %604, %605, !dbg !94
  %607 = select i1 %606, float %600, float %603, !dbg !95
  %608 = bitcast float %607 to i32, !dbg !97
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 1, i32 31), !dbg !97
  %610 = bitcast i32 %609 to float, !dbg !97
  %611 = fcmp olt float %607, %610, !dbg !92
  %612 = fcmp uno float %607, 0.000000e+00, !dbg !96
  %613 = or i1 %611, %612, !dbg !94
  %614 = select i1 %613, float %607, float %610, !dbg !95
  %615 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23, !dbg !98
  %616 = bitcast float %614 to <1 x i32>, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %616, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %617 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %208, !dbg !98
  %618 = load float, ptr addrspace(3) %617, align 4, !dbg !98
  %619 = extractelement <8 x float> %538, i64 0, !dbg !99
  %620 = extractelement <8 x float> %538, i64 1, !dbg !99
  %621 = fcmp ogt float %619, %620, !dbg !99
  %622 = fcmp uno float %619, 0.000000e+00, !dbg !101
  %623 = or i1 %621, %622, !dbg !102
  %624 = select i1 %623, float %619, float %620, !dbg !103
  %625 = extractelement <8 x float> %538, i64 2, !dbg !99
  %626 = fcmp ogt float %624, %625, !dbg !99
  %627 = fcmp uno float %624, 0.000000e+00, !dbg !101
  %628 = or i1 %626, %627, !dbg !102
  %629 = select i1 %628, float %624, float %625, !dbg !103
  %630 = extractelement <8 x float> %538, i64 3, !dbg !99
  %631 = fcmp ogt float %629, %630, !dbg !99
  %632 = fcmp uno float %629, 0.000000e+00, !dbg !101
  %633 = or i1 %631, %632, !dbg !102
  %634 = select i1 %633, float %629, float %630, !dbg !103
  %635 = extractelement <8 x float> %538, i64 4, !dbg !99
  %636 = fcmp ogt float %634, %635, !dbg !99
  %637 = fcmp uno float %634, 0.000000e+00, !dbg !101
  %638 = or i1 %636, %637, !dbg !102
  %639 = select i1 %638, float %634, float %635, !dbg !103
  %640 = extractelement <8 x float> %538, i64 5, !dbg !99
  %641 = fcmp ogt float %639, %640, !dbg !99
  %642 = fcmp uno float %639, 0.000000e+00, !dbg !101
  %643 = or i1 %641, %642, !dbg !102
  %644 = select i1 %643, float %639, float %640, !dbg !103
  %645 = extractelement <8 x float> %538, i64 6, !dbg !99
  %646 = fcmp ogt float %644, %645, !dbg !99
  %647 = fcmp uno float %644, 0.000000e+00, !dbg !101
  %648 = or i1 %646, %647, !dbg !102
  %649 = select i1 %648, float %644, float %645, !dbg !103
  %650 = extractelement <8 x float> %538, i64 7, !dbg !99
  %651 = fcmp ogt float %649, %650, !dbg !99
  %652 = fcmp uno float %649, 0.000000e+00, !dbg !101
  %653 = or i1 %651, %652, !dbg !102
  %654 = select i1 %653, float %649, float %650, !dbg !103
  %655 = bitcast float %654 to i32, !dbg !104
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 4, i32 31), !dbg !104
  %657 = bitcast i32 %656 to float, !dbg !104
  %658 = fcmp ogt float %654, %657, !dbg !99
  %659 = fcmp uno float %654, 0.000000e+00, !dbg !101
  %660 = or i1 %659, %658, !dbg !102
  %661 = select i1 %660, float %654, float %657, !dbg !103
  %662 = bitcast float %661 to i32, !dbg !104
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 2, i32 31), !dbg !104
  %664 = bitcast i32 %663 to float, !dbg !104
  %665 = fcmp ogt float %661, %664, !dbg !99
  %666 = fcmp uno float %661, 0.000000e+00, !dbg !101
  %667 = or i1 %665, %666, !dbg !102
  %668 = select i1 %667, float %661, float %664, !dbg !103
  %669 = bitcast float %668 to i32, !dbg !104
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 1, i32 31), !dbg !104
  %671 = bitcast i32 %670 to float, !dbg !104
  %672 = fcmp ogt float %668, %671, !dbg !99
  %673 = fcmp uno float %668, 0.000000e+00, !dbg !101
  %674 = or i1 %672, %673, !dbg !102
  %675 = select i1 %674, float %668, float %671, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %676 = bitcast float %675 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %676, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %677 = load float, ptr addrspace(3) %617, align 4, !dbg !105
  %678 = sext i32 %209 to i64, !dbg !106
  %679 = getelementptr bfloat, ptr addrspace(1) %4, i64 %678, !dbg !106
  %680 = fptrunc float %618 to bfloat, !dbg !98
  %681 = and i32 %21, 448, !dbg !98
  %682 = icmp eq i32 %681, 0, !dbg !98
  %683 = bitcast bfloat %680 to i16, !dbg !98
  %684 = and i1 %682, %210, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %683, ptr addrspace(1) %679, i1 %684) #5, !dbg !98
  %685 = getelementptr bfloat, ptr addrspace(1) %5, i64 %678, !dbg !107
  %686 = fptrunc float %677 to bfloat, !dbg !105
  %687 = bitcast bfloat %686 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %687, ptr addrspace(1) %685, i1 %684) #5, !dbg !105
  %688 = getelementptr bfloat, ptr addrspace(1) %6, i64 %678, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %683, ptr addrspace(1) %688, i1 %684) #5, !dbg !109
  %689 = getelementptr bfloat, ptr addrspace(1) %7, i64 %678, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %687, ptr addrspace(1) %689, i1 %684) #5, !dbg !111
  %690 = getelementptr bfloat, ptr addrspace(1) %8, i64 %678, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %683, ptr addrspace(1) %690, i1 %684) #5, !dbg !113
  %691 = getelementptr bfloat, ptr addrspace(1) %9, i64 %678, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %687, ptr addrspace(1) %691, i1 %684) #5, !dbg !115
  %692 = getelementptr bfloat, ptr addrspace(1) %10, i64 %678, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %683, ptr addrspace(1) %692, i1 %684) #5, !dbg !117
  %693 = getelementptr bfloat, ptr addrspace(1) %11, i64 %678, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %687, ptr addrspace(1) %693, i1 %684) #5, !dbg !119
  %.inv = fcmp oge float %614, 0.000000e+00, !dbg !120
  %694 = select i1 %.inv, float 0.000000e+00, float %614, !dbg !120
  %695 = fsub float 0.000000e+00, %694, !dbg !122
  %.inv5 = fcmp ole float %675, 0.000000e+00, !dbg !123
  %696 = select i1 %.inv5, float 0.000000e+00, float %675, !dbg !123
  %697 = fcmp ogt float %695, %696, !dbg !125
  %698 = fcmp uno float %695, 0.000000e+00, !dbg !127
  %699 = or i1 %698, %697, !dbg !128
  %700 = select i1 %699, float %695, float %696, !dbg !129
  %701 = fmul float %700, 0x3F80204080000000, !dbg !130
  %702 = fcmp ogt float %701, 0x3EE4F8B580000000, !dbg !131
  %703 = fcmp uno float %701, 0.000000e+00, !dbg !133
  %704 = or i1 %702, %703, !dbg !134
  %705 = select i1 %704, float %701, float 0x3EE4F8B580000000, !dbg !135
  %706 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %705), !dbg !136
  br label %707, !dbg !137

707:                                              ; preds = %557, %707
  %indvars.iv87 = phi i64 [ 0, %557 ], [ %indvars.iv.next88, %707 ]
  %708 = trunc nuw nsw i64 %indvars.iv87 to i32, !dbg !138
  %709 = add i32 %29, %708, !dbg !138
  %710 = sext i32 %709 to i64, !dbg !139
  %711 = getelementptr bfloat, ptr addrspace(1) %3, i64 %710, !dbg !139
  %712 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %711, i1 %25) #5, !dbg !140
  %713 = extractvalue { i32, i32, i32, i32 } %712, 0, !dbg !140
  %714 = bitcast i32 %713 to <2 x bfloat>, !dbg !140
  %715 = extractvalue { i32, i32, i32, i32 } %712, 1, !dbg !140
  %716 = bitcast i32 %715 to <2 x bfloat>, !dbg !140
  %717 = extractvalue { i32, i32, i32, i32 } %712, 2, !dbg !140
  %718 = bitcast i32 %717 to <2 x bfloat>, !dbg !140
  %719 = extractvalue { i32, i32, i32, i32 } %712, 3, !dbg !140
  %720 = bitcast i32 %719 to <2 x bfloat>, !dbg !140
  %721 = extractelement <2 x bfloat> %714, i64 0, !dbg !140
  %722 = extractelement <2 x bfloat> %714, i64 1, !dbg !140
  %723 = extractelement <2 x bfloat> %716, i64 0, !dbg !140
  %724 = extractelement <2 x bfloat> %716, i64 1, !dbg !140
  %725 = extractelement <2 x bfloat> %718, i64 0, !dbg !140
  %726 = extractelement <2 x bfloat> %718, i64 1, !dbg !140
  %727 = extractelement <2 x bfloat> %720, i64 0, !dbg !140
  %728 = extractelement <2 x bfloat> %720, i64 1, !dbg !140
  %729 = fpext bfloat %721 to float, !dbg !141
  %730 = fpext bfloat %722 to float, !dbg !141
  %731 = fpext bfloat %723 to float, !dbg !141
  %732 = fpext bfloat %724 to float, !dbg !141
  %733 = fpext bfloat %725 to float, !dbg !141
  %734 = fpext bfloat %726 to float, !dbg !141
  %735 = fpext bfloat %727 to float, !dbg !141
  %736 = fpext bfloat %728 to float, !dbg !141
  %737 = fmul float %706, %729, !dbg !142
  %738 = fmul float %706, %730, !dbg !142
  %739 = fmul float %706, %731, !dbg !142
  %740 = fmul float %706, %732, !dbg !142
  %741 = fmul float %706, %733, !dbg !142
  %742 = fmul float %706, %734, !dbg !142
  %743 = fmul float %706, %735, !dbg !142
  %744 = fmul float %706, %736, !dbg !142
  %745 = tail call float @llvm.nvvm.round.f(float %737) #5, !dbg !143
  %746 = tail call float @llvm.nvvm.round.f(float %738) #5, !dbg !143
  %747 = tail call float @llvm.nvvm.round.f(float %739) #5, !dbg !143
  %748 = tail call float @llvm.nvvm.round.f(float %740) #5, !dbg !143
  %749 = tail call float @llvm.nvvm.round.f(float %741) #5, !dbg !143
  %750 = tail call float @llvm.nvvm.round.f(float %742) #5, !dbg !143
  %751 = tail call float @llvm.nvvm.round.f(float %743) #5, !dbg !143
  %752 = tail call float @llvm.nvvm.round.f(float %744) #5, !dbg !143
  %753 = insertelement <4 x float> poison, float %745, i64 0, !dbg !144
  %754 = insertelement <4 x float> %753, float %746, i64 1, !dbg !144
  %755 = insertelement <4 x float> %754, float %747, i64 2, !dbg !144
  %756 = insertelement <4 x float> %755, float %748, i64 3, !dbg !144
  %757 = fcmp ogt <4 x float> %756, splat (float -1.270000e+02), !dbg !144
  %758 = fcmp uno <4 x float> %756, zeroinitializer, !dbg !146
  %759 = or <4 x i1> %757, %758, !dbg !147
  %760 = select <4 x i1> %759, <4 x float> %756, <4 x float> splat (float -1.270000e+02), !dbg !148
  %761 = fcmp olt <4 x float> %760, splat (float 1.270000e+02), !dbg !149
  %762 = fcmp uno <4 x float> %760, zeroinitializer, !dbg !151
  %763 = or <4 x i1> %761, %762, !dbg !152
  %764 = fptosi <4 x float> %760 to <4 x i8>, !dbg !153
  %765 = select <4 x i1> %763, <4 x i8> %764, <4 x i8> splat (i8 127), !dbg !154
  %766 = insertelement <4 x float> poison, float %749, i64 0, !dbg !144
  %767 = insertelement <4 x float> %766, float %750, i64 1, !dbg !144
  %768 = insertelement <4 x float> %767, float %751, i64 2, !dbg !144
  %769 = insertelement <4 x float> %768, float %752, i64 3, !dbg !144
  %770 = fcmp ogt <4 x float> %769, splat (float -1.270000e+02), !dbg !144
  %771 = fcmp uno <4 x float> %769, zeroinitializer, !dbg !146
  %772 = or <4 x i1> %770, %771, !dbg !147
  %773 = select <4 x i1> %772, <4 x float> %769, <4 x float> splat (float -1.270000e+02), !dbg !148
  %774 = fcmp olt <4 x float> %773, splat (float 1.270000e+02), !dbg !149
  %775 = fcmp uno <4 x float> %773, zeroinitializer, !dbg !151
  %776 = or <4 x i1> %774, %775, !dbg !152
  %777 = fptosi <4 x float> %773 to <4 x i8>, !dbg !153
  %778 = select <4 x i1> %776, <4 x i8> %777, <4 x i8> splat (i8 127), !dbg !154
  %779 = getelementptr i8, ptr addrspace(1) %12, i64 %710, !dbg !155
  %780 = bitcast <4 x i8> %765 to i32, !dbg !156
  %781 = bitcast <4 x i8> %778 to i32, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %780, i32 %781, ptr addrspace(1) %779, i1 %25) #5, !dbg !156
  %782 = getelementptr i8, ptr addrspace(1) %13, i64 %710, !dbg !157
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %780, i32 %781, ptr addrspace(1) %782, i1 %25) #5, !dbg !158
  %783 = getelementptr i8, ptr addrspace(1) %14, i64 %710, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %780, i32 %781, ptr addrspace(1) %783, i1 %25) #5, !dbg !160
  %784 = getelementptr i8, ptr addrspace(1) %15, i64 %710, !dbg !161
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %780, i32 %781, ptr addrspace(1) %784, i1 %25) #5, !dbg !162
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 64, !dbg !137
  %785 = icmp samesign ult i64 %indvars.iv87, 3008, !dbg !137
  br i1 %785, label %707, label %786, !dbg !137

786:                                              ; preds = %707
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 65, column: 24, scope: !6)
!58 = !DILocation(line: 85, column: 50, scope: !6)
!59 = !DILocation(line: 54, column: 31, scope: !6)
!60 = !DILocation(line: 59, column: 41, scope: !6)
!61 = !DILocation(line: 59, column: 34, scope: !6)
!62 = !DILocation(line: 59, column: 51, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 49, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 42, scope: !6)
!70 = !DILocation(line: 63, column: 35, scope: !6)
!71 = !DILocation(line: 63, column: 42, scope: !6)
!72 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !73)
!73 = !DILocation(line: 82, column: 47, scope: !6)
!74 = !DILocation(line: 59, column: 113, scope: !6)
!75 = !DILocation(line: 61, column: 102, scope: !6)
!76 = !DILocation(line: 63, column: 95, scope: !6)
!77 = !DILocation(line: 74, column: 24, scope: !6)
!78 = !DILocation(line: 76, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 80, column: 24, scope: !6)
!82 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !73)
!83 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !73)
!84 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !73)
!85 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !86)
!86 = !DILocation(line: 84, column: 47, scope: !6)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !86)
!90 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !86)
!91 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !86)
!92 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 95, column: 25, scope: !6)
!117 = !DILocation(line: 95, column: 37, scope: !6)
!118 = !DILocation(line: 96, column: 26, scope: !6)
!119 = !DILocation(line: 96, column: 38, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 106, column: 17, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !124)
!124 = !DILocation(line: 107, column: 46, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !126)
!126 = !DILocation(line: 108, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !126)
!130 = !DILocation(line: 110, column: 24, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !132)
!132 = !DILocation(line: 113, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !132)
!136 = !DILocation(line: 116, column: 25, scope: !6)
!137 = !DILocation(line: 97, column: 40, scope: !6)
!138 = !DILocation(line: 103, column: 43, scope: !6)
!139 = !DILocation(line: 103, column: 36, scope: !6)
!140 = !DILocation(line: 103, column: 53, scope: !6)
!141 = !DILocation(line: 103, column: 115, scope: !6)
!142 = !DILocation(line: 119, column: 24, scope: !6)
!143 = !DILocation(line: 120, column: 36, scope: !6)
!144 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !145)
!145 = !DILocation(line: 123, column: 46, scope: !6)
!146 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !145)
!148 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !145)
!149 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !150)
!150 = !DILocation(line: 125, column: 46, scope: !6)
!151 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !150)
!152 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !150)
!153 = !DILocation(line: 127, column: 25, scope: !6)
!154 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !150)
!155 = !DILocation(line: 128, column: 30, scope: !6)
!156 = !DILocation(line: 128, column: 54, scope: !6)
!157 = !DILocation(line: 129, column: 30, scope: !6)
!158 = !DILocation(line: 129, column: 54, scope: !6)
!159 = !DILocation(line: 130, column: 30, scope: !6)
!160 = !DILocation(line: 130, column: 54, scope: !6)
!161 = !DILocation(line: 131, column: 30, scope: !6)
!162 = !DILocation(line: 131, column: 54, scope: !6)
!163 = !DILocation(line: 97, column: 4, scope: !6)
