; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = lshr i32 %21, 5, !dbg !11
  %24 = shl i32 %21, 4, !dbg !11
  %25 = and i32 %24, 2032, !dbg !11
  %26 = or disjoint i32 %25, 4, !dbg !11
  %27 = or disjoint i32 %25, 8, !dbg !11
  %28 = or disjoint i32 %25, 12, !dbg !11
  %29 = or disjoint i32 %25, 2048, !dbg !11
  %30 = or disjoint i32 %25, 2052, !dbg !11
  %31 = or disjoint i32 %25, 2056, !dbg !11
  %32 = or disjoint i32 %25, 2060, !dbg !11
  %33 = icmp samesign ult i32 %29, 3072, !dbg !12
  %34 = mul i32 %19, 3072, !dbg !13
  %35 = add i32 %25, %34, !dbg !14
  %36 = add i32 %27, %34, !dbg !14
  %37 = add i32 %29, %34, !dbg !14
  %38 = add i32 %31, %34, !dbg !14
  %39 = sext i32 %35 to i64, !dbg !15
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !15
  %41 = sext i32 %36 to i64, !dbg !15
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !15
  %43 = sext i32 %37 to i64, !dbg !15
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !15
  %45 = sext i32 %38 to i64, !dbg !15
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !15
  %47 = and i1 %20, %33, !dbg !16
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %20) #5, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !17
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !17
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !17
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !17
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !17
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !17
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !17
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !17
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !17
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !17
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !17
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !17
  %63 = extractelement <2 x bfloat> %56, i64 0, !dbg !17
  %64 = extractelement <2 x bfloat> %56, i64 1, !dbg !17
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %20) #5, !dbg !17
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !17
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !17
  %68 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !17
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !17
  %70 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !17
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !17
  %72 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !17
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !17
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !17
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !17
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !17
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !17
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !17
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !17
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !17
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !17
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %47) #5, !dbg !17
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !17
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !17
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !17
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !17
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !17
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !17
  %89 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !17
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !17
  %91 = extractelement <2 x bfloat> %84, i64 0, !dbg !17
  %92 = extractelement <2 x bfloat> %84, i64 1, !dbg !17
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !17
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !17
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !17
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !17
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !17
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !17
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %47) #5, !dbg !17
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !17
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !17
  %102 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !17
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !17
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !17
  %106 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !17
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !17
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !17
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !17
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !17
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !17
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !17
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !17
  %114 = extractelement <2 x bfloat> %107, i64 0, !dbg !17
  %115 = extractelement <2 x bfloat> %107, i64 1, !dbg !17
  %116 = fpext bfloat %57 to float, !dbg !18
  %117 = fpext bfloat %58 to float, !dbg !18
  %118 = fpext bfloat %59 to float, !dbg !18
  %119 = fpext bfloat %60 to float, !dbg !18
  %120 = fpext bfloat %61 to float, !dbg !18
  %121 = fpext bfloat %62 to float, !dbg !18
  %122 = fpext bfloat %63 to float, !dbg !18
  %123 = fpext bfloat %64 to float, !dbg !18
  %124 = fpext bfloat %74 to float, !dbg !18
  %125 = fpext bfloat %75 to float, !dbg !18
  %126 = fpext bfloat %76 to float, !dbg !18
  %127 = fpext bfloat %77 to float, !dbg !18
  %128 = fpext bfloat %78 to float, !dbg !18
  %129 = fpext bfloat %79 to float, !dbg !18
  %130 = fpext bfloat %80 to float, !dbg !18
  %131 = fpext bfloat %81 to float, !dbg !18
  %132 = fpext bfloat %91 to float, !dbg !18
  %133 = fpext bfloat %92 to float, !dbg !18
  %134 = fpext bfloat %93 to float, !dbg !18
  %135 = fpext bfloat %94 to float, !dbg !18
  %136 = fpext bfloat %95 to float, !dbg !18
  %137 = fpext bfloat %96 to float, !dbg !18
  %138 = fpext bfloat %97 to float, !dbg !18
  %139 = fpext bfloat %98 to float, !dbg !18
  %140 = fpext bfloat %108 to float, !dbg !18
  %141 = fpext bfloat %109 to float, !dbg !18
  %142 = fpext bfloat %110 to float, !dbg !18
  %143 = fpext bfloat %111 to float, !dbg !18
  %144 = fpext bfloat %112 to float, !dbg !18
  %145 = fpext bfloat %113 to float, !dbg !18
  %146 = fpext bfloat %114 to float, !dbg !18
  %147 = fpext bfloat %115 to float, !dbg !18
  %148 = select i1 %20, float %116, float 0.000000e+00, !dbg !19
  %149 = select i1 %20, float %117, float 0.000000e+00, !dbg !19
  %150 = select i1 %20, float %118, float 0.000000e+00, !dbg !19
  %151 = select i1 %20, float %119, float 0.000000e+00, !dbg !19
  %152 = select i1 %20, float %120, float 0.000000e+00, !dbg !19
  %153 = select i1 %20, float %121, float 0.000000e+00, !dbg !19
  %154 = select i1 %20, float %122, float 0.000000e+00, !dbg !19
  %155 = select i1 %20, float %123, float 0.000000e+00, !dbg !19
  %156 = select i1 %20, float %124, float 0.000000e+00, !dbg !19
  %157 = select i1 %20, float %125, float 0.000000e+00, !dbg !19
  %158 = select i1 %20, float %126, float 0.000000e+00, !dbg !19
  %159 = select i1 %20, float %127, float 0.000000e+00, !dbg !19
  %160 = select i1 %20, float %128, float 0.000000e+00, !dbg !19
  %161 = select i1 %20, float %129, float 0.000000e+00, !dbg !19
  %162 = select i1 %20, float %130, float 0.000000e+00, !dbg !19
  %163 = select i1 %20, float %131, float 0.000000e+00, !dbg !19
  %164 = select i1 %47, float %132, float 0.000000e+00, !dbg !19
  %165 = select i1 %47, float %133, float 0.000000e+00, !dbg !19
  %166 = select i1 %47, float %134, float 0.000000e+00, !dbg !19
  %167 = select i1 %47, float %135, float 0.000000e+00, !dbg !19
  %168 = select i1 %47, float %136, float 0.000000e+00, !dbg !19
  %169 = select i1 %47, float %137, float 0.000000e+00, !dbg !19
  %170 = select i1 %47, float %138, float 0.000000e+00, !dbg !19
  %171 = select i1 %47, float %139, float 0.000000e+00, !dbg !19
  %172 = select i1 %47, float %140, float 0.000000e+00, !dbg !19
  %173 = select i1 %47, float %141, float 0.000000e+00, !dbg !19
  %174 = select i1 %47, float %142, float 0.000000e+00, !dbg !19
  %175 = select i1 %47, float %143, float 0.000000e+00, !dbg !19
  %176 = select i1 %47, float %144, float 0.000000e+00, !dbg !19
  %177 = select i1 %47, float %145, float 0.000000e+00, !dbg !19
  %178 = select i1 %47, float %146, float 0.000000e+00, !dbg !19
  %179 = select i1 %47, float %147, float 0.000000e+00, !dbg !19
  %180 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %181 = select i1 %47, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %182 = fsub float %149, %148, !dbg !21
  %183 = select i1 %20, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !27
  %185 = tail call float @llvm.nvvm.div.full(float %180, float %183), !dbg !28
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !29
  %187 = fmul float %186, %182, !dbg !30
  %188 = fadd float %148, %187, !dbg !31
  %189 = fmul float %182, %182, !dbg !32
  %190 = fmul float %180, %189, !dbg !33
  %191 = fmul float %186, %190, !dbg !34
  %192 = fadd float %191, 0.000000e+00, !dbg !35
  %193 = fsub float %150, %188, !dbg !21
  %194 = select i1 %20, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %195 = fcmp oeq float %194, 0.000000e+00, !dbg !27
  %196 = tail call float @llvm.nvvm.div.full(float %180, float %194), !dbg !28
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !29
  %198 = fmul float %197, %193, !dbg !30
  %199 = fadd float %188, %198, !dbg !31
  %200 = fmul float %193, %193, !dbg !32
  %201 = fmul float %183, %200, !dbg !33
  %202 = fmul float %197, %201, !dbg !34
  %203 = fadd float %192, %202, !dbg !35
  %204 = fsub float %151, %199, !dbg !21
  %205 = select i1 %20, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !27
  %207 = tail call float @llvm.nvvm.div.full(float %180, float %205), !dbg !28
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !29
  %209 = fmul float %208, %204, !dbg !30
  %210 = fadd float %199, %209, !dbg !31
  %211 = fmul float %204, %204, !dbg !32
  %212 = fmul float %194, %211, !dbg !33
  %213 = fmul float %208, %212, !dbg !34
  %214 = fadd float %203, %213, !dbg !35
  %215 = fsub float %152, %210, !dbg !21
  %216 = select i1 %20, float 5.000000e+00, float 0.000000e+00, !dbg !26
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !27
  %218 = tail call float @llvm.nvvm.div.full(float %180, float %216), !dbg !28
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !29
  %220 = fmul float %219, %215, !dbg !30
  %221 = fadd float %210, %220, !dbg !31
  %222 = fmul float %215, %215, !dbg !32
  %223 = fmul float %205, %222, !dbg !33
  %224 = fmul float %219, %223, !dbg !34
  %225 = fadd float %214, %224, !dbg !35
  %226 = fsub float %153, %221, !dbg !21
  %227 = select i1 %20, float 6.000000e+00, float 0.000000e+00, !dbg !26
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !27
  %229 = tail call float @llvm.nvvm.div.full(float %180, float %227), !dbg !28
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !29
  %231 = fmul float %230, %226, !dbg !30
  %232 = fadd float %221, %231, !dbg !31
  %233 = fmul float %226, %226, !dbg !32
  %234 = fmul float %216, %233, !dbg !33
  %235 = fmul float %230, %234, !dbg !34
  %236 = fadd float %225, %235, !dbg !35
  %237 = fsub float %154, %232, !dbg !21
  %238 = select i1 %20, float 7.000000e+00, float 0.000000e+00, !dbg !26
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !27
  %240 = tail call float @llvm.nvvm.div.full(float %180, float %238), !dbg !28
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !29
  %242 = fmul float %241, %237, !dbg !30
  %243 = fadd float %232, %242, !dbg !31
  %244 = fmul float %237, %237, !dbg !32
  %245 = fmul float %227, %244, !dbg !33
  %246 = fmul float %241, %245, !dbg !34
  %247 = fadd float %236, %246, !dbg !35
  %248 = fsub float %155, %243, !dbg !21
  %249 = select i1 %20, float 8.000000e+00, float 0.000000e+00, !dbg !26
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !27
  %251 = tail call float @llvm.nvvm.div.full(float %180, float %249), !dbg !28
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !29
  %253 = fmul float %252, %248, !dbg !30
  %254 = fadd float %243, %253, !dbg !31
  %255 = fmul float %248, %248, !dbg !32
  %256 = fmul float %238, %255, !dbg !33
  %257 = fmul float %252, %256, !dbg !34
  %258 = fadd float %247, %257, !dbg !35
  %259 = fsub float %156, %254, !dbg !21
  %260 = select i1 %20, float 9.000000e+00, float 0.000000e+00, !dbg !26
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !27
  %262 = tail call float @llvm.nvvm.div.full(float %180, float %260), !dbg !28
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !29
  %264 = fmul float %263, %259, !dbg !30
  %265 = fadd float %254, %264, !dbg !31
  %266 = fadd float %258, 0.000000e+00, !dbg !36
  %267 = fmul float %259, %259, !dbg !32
  %268 = fmul float %249, %267, !dbg !33
  %269 = fmul float %263, %268, !dbg !34
  %270 = fadd float %266, %269, !dbg !35
  %271 = fsub float %157, %265, !dbg !21
  %272 = select i1 %20, float 1.000000e+01, float 0.000000e+00, !dbg !26
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !27
  %274 = tail call float @llvm.nvvm.div.full(float %180, float %272), !dbg !28
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !29
  %276 = fmul float %275, %271, !dbg !30
  %277 = fadd float %265, %276, !dbg !31
  %278 = fmul float %271, %271, !dbg !32
  %279 = fmul float %260, %278, !dbg !33
  %280 = fmul float %275, %279, !dbg !34
  %281 = fadd float %270, %280, !dbg !35
  %282 = fsub float %158, %277, !dbg !21
  %283 = select i1 %20, float 1.100000e+01, float 0.000000e+00, !dbg !26
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !27
  %285 = tail call float @llvm.nvvm.div.full(float %180, float %283), !dbg !28
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !29
  %287 = fmul float %286, %282, !dbg !30
  %288 = fadd float %277, %287, !dbg !31
  %289 = fmul float %282, %282, !dbg !32
  %290 = fmul float %272, %289, !dbg !33
  %291 = fmul float %286, %290, !dbg !34
  %292 = fadd float %281, %291, !dbg !35
  %293 = fsub float %159, %288, !dbg !21
  %294 = select i1 %20, float 1.200000e+01, float 0.000000e+00, !dbg !26
  %295 = fcmp oeq float %294, 0.000000e+00, !dbg !27
  %296 = tail call float @llvm.nvvm.div.full(float %180, float %294), !dbg !28
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !29
  %298 = fmul float %297, %293, !dbg !30
  %299 = fadd float %288, %298, !dbg !31
  %300 = fmul float %293, %293, !dbg !32
  %301 = fmul float %283, %300, !dbg !33
  %302 = fmul float %297, %301, !dbg !34
  %303 = fadd float %292, %302, !dbg !35
  %304 = fsub float %160, %299, !dbg !21
  %305 = select i1 %20, float 1.300000e+01, float 0.000000e+00, !dbg !26
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !27
  %307 = tail call float @llvm.nvvm.div.full(float %180, float %305), !dbg !28
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !29
  %309 = fmul float %308, %304, !dbg !30
  %310 = fadd float %299, %309, !dbg !31
  %311 = fmul float %304, %304, !dbg !32
  %312 = fmul float %294, %311, !dbg !33
  %313 = fmul float %308, %312, !dbg !34
  %314 = fadd float %303, %313, !dbg !35
  %315 = fsub float %161, %310, !dbg !21
  %316 = select i1 %20, float 1.400000e+01, float 0.000000e+00, !dbg !26
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !27
  %318 = tail call float @llvm.nvvm.div.full(float %180, float %316), !dbg !28
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !29
  %320 = fmul float %319, %315, !dbg !30
  %321 = fadd float %310, %320, !dbg !31
  %322 = fmul float %315, %315, !dbg !32
  %323 = fmul float %305, %322, !dbg !33
  %324 = fmul float %319, %323, !dbg !34
  %325 = fadd float %314, %324, !dbg !35
  %326 = fsub float %162, %321, !dbg !21
  %327 = select i1 %20, float 1.500000e+01, float 0.000000e+00, !dbg !26
  %328 = fcmp oeq float %327, 0.000000e+00, !dbg !27
  %329 = tail call float @llvm.nvvm.div.full(float %180, float %327), !dbg !28
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !29
  %331 = fmul float %330, %326, !dbg !30
  %332 = fadd float %321, %331, !dbg !31
  %333 = fadd float %325, 0.000000e+00, !dbg !36
  %334 = fmul float %326, %326, !dbg !32
  %335 = fmul float %316, %334, !dbg !33
  %336 = fmul float %330, %335, !dbg !34
  %337 = fadd float %333, %336, !dbg !35
  %338 = fsub float %163, %332, !dbg !21
  %339 = select i1 %20, float 1.600000e+01, float 0.000000e+00, !dbg !26
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !27
  %341 = tail call float @llvm.nvvm.div.full(float %180, float %339), !dbg !28
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !29
  %343 = fmul float %342, %338, !dbg !30
  %344 = fadd float %332, %343, !dbg !31
  %345 = fmul float %338, %338, !dbg !32
  %346 = fmul float %327, %345, !dbg !33
  %347 = fmul float %342, %346, !dbg !34
  %348 = fadd float %337, %347, !dbg !35
  %349 = fsub float %164, %344, !dbg !21
  %350 = fadd float %339, %181, !dbg !26
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !27
  %352 = tail call float @llvm.nvvm.div.full(float %181, float %350), !dbg !28
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !29
  %354 = fmul float %353, %349, !dbg !30
  %355 = fadd float %344, %354, !dbg !31
  %356 = fmul float %349, %349, !dbg !32
  %357 = fmul float %339, %356, !dbg !33
  %358 = fmul float %353, %357, !dbg !34
  %359 = fadd float %348, %358, !dbg !35
  %360 = fsub float %165, %355, !dbg !21
  %361 = fadd float %181, %350, !dbg !26
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !27
  %363 = tail call float @llvm.nvvm.div.full(float %181, float %361), !dbg !28
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !29
  %365 = fmul float %364, %360, !dbg !30
  %366 = fadd float %355, %365, !dbg !31
  %367 = fmul float %360, %360, !dbg !32
  %368 = fmul float %350, %367, !dbg !33
  %369 = fmul float %364, %368, !dbg !34
  %370 = fadd float %359, %369, !dbg !35
  %371 = fsub float %166, %366, !dbg !21
  %372 = fadd float %181, %361, !dbg !26
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !27
  %374 = tail call float @llvm.nvvm.div.full(float %181, float %372), !dbg !28
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !29
  %376 = fmul float %375, %371, !dbg !30
  %377 = fadd float %366, %376, !dbg !31
  %378 = fmul float %371, %371, !dbg !32
  %379 = fmul float %361, %378, !dbg !33
  %380 = fmul float %375, %379, !dbg !34
  %381 = fadd float %370, %380, !dbg !35
  %382 = fsub float %167, %377, !dbg !21
  %383 = fadd float %181, %372, !dbg !26
  %384 = fcmp oeq float %383, 0.000000e+00, !dbg !27
  %385 = tail call float @llvm.nvvm.div.full(float %181, float %383), !dbg !28
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !29
  %387 = fmul float %386, %382, !dbg !30
  %388 = fadd float %377, %387, !dbg !31
  %389 = fmul float %382, %382, !dbg !32
  %390 = fmul float %372, %389, !dbg !33
  %391 = fmul float %386, %390, !dbg !34
  %392 = fadd float %381, %391, !dbg !35
  %393 = fsub float %168, %388, !dbg !21
  %394 = fadd float %181, %383, !dbg !26
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !27
  %396 = tail call float @llvm.nvvm.div.full(float %181, float %394), !dbg !28
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !29
  %398 = fmul float %397, %393, !dbg !30
  %399 = fadd float %388, %398, !dbg !31
  %400 = fadd float %392, 0.000000e+00, !dbg !36
  %401 = fmul float %393, %393, !dbg !32
  %402 = fmul float %383, %401, !dbg !33
  %403 = fmul float %397, %402, !dbg !34
  %404 = fadd float %400, %403, !dbg !35
  %405 = fsub float %169, %399, !dbg !21
  %406 = fadd float %181, %394, !dbg !26
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !27
  %408 = tail call float @llvm.nvvm.div.full(float %181, float %406), !dbg !28
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !29
  %410 = fmul float %409, %405, !dbg !30
  %411 = fadd float %399, %410, !dbg !31
  %412 = fmul float %405, %405, !dbg !32
  %413 = fmul float %394, %412, !dbg !33
  %414 = fmul float %409, %413, !dbg !34
  %415 = fadd float %404, %414, !dbg !35
  %416 = fsub float %170, %411, !dbg !21
  %417 = fadd float %181, %406, !dbg !26
  %418 = fcmp oeq float %417, 0.000000e+00, !dbg !27
  %419 = tail call float @llvm.nvvm.div.full(float %181, float %417), !dbg !28
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !29
  %421 = fmul float %420, %416, !dbg !30
  %422 = fadd float %411, %421, !dbg !31
  %423 = fmul float %416, %416, !dbg !32
  %424 = fmul float %406, %423, !dbg !33
  %425 = fmul float %420, %424, !dbg !34
  %426 = fadd float %415, %425, !dbg !35
  %427 = fsub float %171, %422, !dbg !21
  %428 = fadd float %181, %417, !dbg !26
  %429 = fcmp oeq float %428, 0.000000e+00, !dbg !27
  %430 = tail call float @llvm.nvvm.div.full(float %181, float %428), !dbg !28
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !29
  %432 = fmul float %431, %427, !dbg !30
  %433 = fadd float %422, %432, !dbg !31
  %434 = fmul float %427, %427, !dbg !32
  %435 = fmul float %417, %434, !dbg !33
  %436 = fmul float %431, %435, !dbg !34
  %437 = fadd float %426, %436, !dbg !35
  %438 = fsub float %172, %433, !dbg !21
  %439 = fadd float %181, %428, !dbg !26
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !27
  %441 = tail call float @llvm.nvvm.div.full(float %181, float %439), !dbg !28
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !29
  %443 = fmul float %442, %438, !dbg !30
  %444 = fadd float %433, %443, !dbg !31
  %445 = fmul float %438, %438, !dbg !32
  %446 = fmul float %428, %445, !dbg !33
  %447 = fmul float %442, %446, !dbg !34
  %448 = fadd float %437, %447, !dbg !35
  %449 = fsub float %173, %444, !dbg !21
  %450 = fadd float %181, %439, !dbg !26
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !27
  %452 = tail call float @llvm.nvvm.div.full(float %181, float %450), !dbg !28
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !29
  %454 = fmul float %453, %449, !dbg !30
  %455 = fadd float %444, %454, !dbg !31
  %456 = fmul float %449, %449, !dbg !32
  %457 = fmul float %439, %456, !dbg !33
  %458 = fmul float %453, %457, !dbg !34
  %459 = fadd float %448, %458, !dbg !35
  %460 = fsub float %174, %455, !dbg !21
  %461 = fadd float %181, %450, !dbg !26
  %462 = fcmp oeq float %461, 0.000000e+00, !dbg !27
  %463 = tail call float @llvm.nvvm.div.full(float %181, float %461), !dbg !28
  %464 = select i1 %462, float 0.000000e+00, float %463, !dbg !29
  %465 = fmul float %464, %460, !dbg !30
  %466 = fadd float %455, %465, !dbg !31
  %467 = fadd float %459, 0.000000e+00, !dbg !36
  %468 = fmul float %460, %460, !dbg !32
  %469 = fmul float %450, %468, !dbg !33
  %470 = fmul float %464, %469, !dbg !34
  %471 = fadd float %467, %470, !dbg !35
  %472 = fsub float %175, %466, !dbg !21
  %473 = fadd float %181, %461, !dbg !26
  %474 = fcmp oeq float %473, 0.000000e+00, !dbg !27
  %475 = tail call float @llvm.nvvm.div.full(float %181, float %473), !dbg !28
  %476 = select i1 %474, float 0.000000e+00, float %475, !dbg !29
  %477 = fmul float %476, %472, !dbg !30
  %478 = fadd float %466, %477, !dbg !31
  %479 = fmul float %472, %472, !dbg !32
  %480 = fmul float %461, %479, !dbg !33
  %481 = fmul float %476, %480, !dbg !34
  %482 = fadd float %471, %481, !dbg !35
  %483 = fsub float %176, %478, !dbg !21
  %484 = fadd float %181, %473, !dbg !26
  %485 = fcmp oeq float %484, 0.000000e+00, !dbg !27
  %486 = tail call float @llvm.nvvm.div.full(float %181, float %484), !dbg !28
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !29
  %488 = fmul float %487, %483, !dbg !30
  %489 = fadd float %478, %488, !dbg !31
  %490 = fmul float %483, %483, !dbg !32
  %491 = fmul float %473, %490, !dbg !33
  %492 = fmul float %487, %491, !dbg !34
  %493 = fadd float %482, %492, !dbg !35
  %494 = fsub float %177, %489, !dbg !21
  %495 = fmul float %494, %494, !dbg !32
  %496 = fmul float %484, %495, !dbg !33
  %497 = fadd float %181, %484, !dbg !26
  %498 = fcmp oeq float %497, 0.000000e+00, !dbg !27
  %499 = tail call float @llvm.nvvm.div.full(float %181, float %497), !dbg !28
  %500 = select i1 %498, float 0.000000e+00, float %499, !dbg !29
  %501 = fmul float %500, %494, !dbg !30
  %502 = fadd float %489, %501, !dbg !31
  %503 = fmul float %500, %496, !dbg !34
  %504 = fadd float %493, %503, !dbg !35
  %505 = fsub float %178, %502, !dbg !21
  %506 = fadd float %181, %497, !dbg !26
  %507 = tail call float @llvm.nvvm.div.full(float %181, float %506), !dbg !28
  %508 = fadd float %181, %506, !dbg !26
  %509 = insertelement <2 x float> poison, float %506, i64 0, !dbg !27
  %510 = insertelement <2 x float> %509, float %508, i64 1, !dbg !27
  %511 = fcmp oeq <2 x float> %510, zeroinitializer, !dbg !27
  %512 = tail call float @llvm.nvvm.div.full(float %181, float %508), !dbg !28
  %513 = insertelement <2 x float> poison, float %507, i64 0, !dbg !29
  %514 = insertelement <2 x float> %513, float %512, i64 1, !dbg !29
  %515 = select <2 x i1> %511, <2 x float> zeroinitializer, <2 x float> %514, !dbg !29
  %516 = extractelement <2 x float> %515, i64 0, !dbg !30
  %517 = fmul float %516, %505, !dbg !30
  %518 = fadd float %502, %517, !dbg !31
  %519 = fsub float %179, %518, !dbg !21
  %520 = insertelement <2 x float> poison, float %505, i64 0, !dbg !32
  %521 = insertelement <2 x float> %520, float %519, i64 1, !dbg !32
  %522 = fmul <2 x float> %521, %521, !dbg !32
  %523 = insertelement <2 x float> poison, float %497, i64 0, !dbg !33
  %524 = insertelement <2 x float> %523, float %506, i64 1, !dbg !33
  %525 = fmul <2 x float> %524, %522, !dbg !33
  %526 = fmul <2 x float> %515, %525, !dbg !34
  %527 = extractelement <2 x float> %526, i64 0, !dbg !35
  %528 = fadd float %504, %527, !dbg !35
  %529 = extractelement <2 x float> %515, i64 1, !dbg !30
  %530 = fmul float %529, %519, !dbg !30
  %531 = fadd float %518, %530, !dbg !31
  %532 = extractelement <2 x float> %526, i64 1, !dbg !35
  %533 = fadd float %528, %532, !dbg !35
  %534 = bitcast float %531 to i32, !dbg !37
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 16, i32 31), !dbg !37
  %536 = bitcast i32 %535 to float, !dbg !37
  %537 = bitcast float %533 to i32, !dbg !37
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 16, i32 31), !dbg !37
  %539 = bitcast i32 %538 to float, !dbg !37
  %540 = bitcast float %508 to i32, !dbg !37
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 16, i32 31), !dbg !37
  %542 = bitcast i32 %541 to float, !dbg !37
  %543 = fsub float %536, %531, !dbg !21
  %544 = fadd float %508, %542, !dbg !26
  %545 = fcmp oeq float %544, 0.000000e+00, !dbg !27
  %546 = tail call float @llvm.nvvm.div.full(float %542, float %544), !dbg !28
  %547 = select i1 %545, float 0.000000e+00, float %546, !dbg !29
  %548 = fmul float %547, %543, !dbg !30
  %549 = fadd float %531, %548, !dbg !31
  %550 = fadd float %533, %539, !dbg !36
  %551 = fmul float %543, %543, !dbg !32
  %552 = fmul float %508, %551, !dbg !33
  %553 = fmul float %547, %552, !dbg !34
  %554 = fadd float %550, %553, !dbg !35
  %555 = bitcast float %549 to i32, !dbg !37
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 8, i32 31), !dbg !37
  %557 = bitcast i32 %556 to float, !dbg !37
  %558 = bitcast float %554 to i32, !dbg !37
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 8, i32 31), !dbg !37
  %560 = bitcast i32 %559 to float, !dbg !37
  %561 = bitcast float %544 to i32, !dbg !37
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 8, i32 31), !dbg !37
  %563 = bitcast i32 %562 to float, !dbg !37
  %564 = fsub float %557, %549, !dbg !21
  %565 = fadd float %544, %563, !dbg !26
  %566 = fcmp oeq float %565, 0.000000e+00, !dbg !27
  %567 = tail call float @llvm.nvvm.div.full(float %563, float %565), !dbg !28
  %568 = select i1 %566, float 0.000000e+00, float %567, !dbg !29
  %569 = fmul float %568, %564, !dbg !30
  %570 = fadd float %549, %569, !dbg !31
  %571 = fadd float %554, %560, !dbg !36
  %572 = fmul float %564, %564, !dbg !32
  %573 = fmul float %544, %572, !dbg !33
  %574 = fmul float %568, %573, !dbg !34
  %575 = fadd float %571, %574, !dbg !35
  %576 = bitcast float %570 to i32, !dbg !37
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 4, i32 31), !dbg !37
  %578 = bitcast i32 %577 to float, !dbg !37
  %579 = bitcast float %575 to i32, !dbg !37
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 4, i32 31), !dbg !37
  %581 = bitcast i32 %580 to float, !dbg !37
  %582 = bitcast float %565 to i32, !dbg !37
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 4, i32 31), !dbg !37
  %584 = bitcast i32 %583 to float, !dbg !37
  %585 = fsub float %578, %570, !dbg !21
  %586 = fadd float %565, %584, !dbg !26
  %587 = fcmp oeq float %586, 0.000000e+00, !dbg !27
  %588 = tail call float @llvm.nvvm.div.full(float %584, float %586), !dbg !28
  %589 = select i1 %587, float 0.000000e+00, float %588, !dbg !29
  %590 = fmul float %589, %585, !dbg !30
  %591 = fadd float %570, %590, !dbg !31
  %592 = fadd float %575, %581, !dbg !36
  %593 = fmul float %585, %585, !dbg !32
  %594 = fmul float %565, %593, !dbg !33
  %595 = fmul float %589, %594, !dbg !34
  %596 = fadd float %592, %595, !dbg !35
  %597 = bitcast float %591 to i32, !dbg !37
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 2, i32 31), !dbg !37
  %599 = bitcast i32 %598 to float, !dbg !37
  %600 = bitcast float %596 to i32, !dbg !37
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 2, i32 31), !dbg !37
  %602 = bitcast i32 %601 to float, !dbg !37
  %603 = bitcast float %586 to i32, !dbg !37
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 2, i32 31), !dbg !37
  %605 = bitcast i32 %604 to float, !dbg !37
  %606 = fsub float %599, %591, !dbg !21
  %607 = fadd float %586, %605, !dbg !26
  %608 = fcmp oeq float %607, 0.000000e+00, !dbg !27
  %609 = tail call float @llvm.nvvm.div.full(float %605, float %607), !dbg !28
  %610 = select i1 %608, float 0.000000e+00, float %609, !dbg !29
  %611 = fmul float %610, %606, !dbg !30
  %612 = fadd float %591, %611, !dbg !31
  %613 = fadd float %596, %602, !dbg !36
  %614 = fmul float %606, %606, !dbg !32
  %615 = fmul float %586, %614, !dbg !33
  %616 = fmul float %610, %615, !dbg !34
  %617 = fadd float %613, %616, !dbg !35
  %618 = bitcast float %612 to i32, !dbg !37
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 1, i32 31), !dbg !37
  %620 = bitcast i32 %619 to float, !dbg !37
  %621 = bitcast float %617 to i32, !dbg !37
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 1, i32 31), !dbg !37
  %623 = bitcast i32 %622 to float, !dbg !37
  %624 = bitcast float %607 to i32, !dbg !37
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 1, i32 31), !dbg !37
  %626 = bitcast i32 %625 to float, !dbg !37
  %627 = fsub float %620, %612, !dbg !21
  %628 = fadd float %607, %626, !dbg !26
  %629 = fcmp oeq float %628, 0.000000e+00, !dbg !27
  %630 = tail call float @llvm.nvvm.div.full(float %626, float %628), !dbg !28
  %631 = select i1 %629, float 0.000000e+00, float %630, !dbg !29
  %632 = fmul float %631, %627, !dbg !30
  %633 = fadd float %612, %632, !dbg !31
  %634 = fadd float %617, %623, !dbg !36
  %635 = fmul float %627, %627, !dbg !32
  %636 = fmul float %607, %635, !dbg !33
  %637 = fmul float %631, %636, !dbg !34
  %638 = fadd float %634, %637, !dbg !35
  %639 = and i32 %23, 3, !dbg !37
  %640 = icmp eq i32 %22, 0, !dbg !37
  %641 = getelementptr float, ptr addrspace(3) @global_smem, i32 %639, !dbg !37
  %642 = bitcast float %633 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 %640) #5, !dbg !37
  %643 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %639, !dbg !37
  %644 = bitcast float %638 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %643, <1 x i32> %644, i1 %640) #5, !dbg !37
  %645 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %639, !dbg !37
  %646 = bitcast float %628 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %646, i1 %640) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %647 = icmp slt i32 %21, 4, !dbg !37
  %648 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !37
  %649 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %648, i1 %647) #5, !dbg !37
  %650 = bitcast i32 %649 to float, !dbg !37
  %651 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %21, !dbg !37
  %652 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %651, i1 %647) #5, !dbg !37
  %653 = bitcast i32 %652 to float, !dbg !37
  %654 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !37
  %655 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %654, i1 %647) #5, !dbg !37
  %656 = bitcast i32 %655 to float, !dbg !37
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 2, i32 31), !dbg !37
  %658 = bitcast i32 %657 to float, !dbg !37
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 2, i32 31), !dbg !37
  %660 = bitcast i32 %659 to float, !dbg !37
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 2, i32 31), !dbg !37
  %662 = bitcast i32 %661 to float, !dbg !37
  %663 = fsub float %658, %650, !dbg !21
  %664 = fadd float %656, %662, !dbg !26
  %665 = fcmp oeq float %664, 0.000000e+00, !dbg !27
  %666 = tail call float @llvm.nvvm.div.full(float %662, float %664), !dbg !28
  %667 = select i1 %665, float 0.000000e+00, float %666, !dbg !29
  %668 = fmul float %663, %667, !dbg !30
  %669 = fadd float %668, %650, !dbg !31
  %670 = fadd float %653, %660, !dbg !36
  %671 = fmul float %663, %663, !dbg !32
  %672 = fmul float %671, %656, !dbg !33
  %673 = fmul float %672, %667, !dbg !34
  %674 = fadd float %670, %673, !dbg !35
  %675 = bitcast float %669 to i32, !dbg !37
  %676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %675, i32 1, i32 31), !dbg !37
  %677 = bitcast i32 %676 to float, !dbg !37
  %678 = bitcast float %674 to i32, !dbg !37
  %679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 1, i32 31), !dbg !37
  %680 = bitcast i32 %679 to float, !dbg !37
  %681 = bitcast float %664 to i32, !dbg !37
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 1, i32 31), !dbg !37
  %683 = bitcast i32 %682 to float, !dbg !37
  %684 = fsub float %677, %669, !dbg !21
  %685 = fadd float %664, %683, !dbg !26
  %686 = fcmp oeq float %685, 0.000000e+00, !dbg !27
  %687 = tail call float @llvm.nvvm.div.full(float %683, float %685), !dbg !28
  %688 = select i1 %686, float 0.000000e+00, float %687, !dbg !29
  %689 = fmul float %684, %688, !dbg !30
  %690 = fadd float %669, %689, !dbg !31
  %691 = fadd float %674, %680, !dbg !36
  %692 = fmul float %684, %684, !dbg !32
  %693 = fmul float %664, %692, !dbg !33
  %694 = fmul float %688, %693, !dbg !34
  %695 = fadd float %691, %694, !dbg !35
  %696 = and i32 %21, 3, !dbg !37
  %697 = icmp eq i32 %696, 0, !dbg !37
  %698 = and i1 %647, %697, !dbg !37
  %699 = bitcast float %690 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %699, i1 %698) #5, !dbg !37
  %700 = bitcast float %695 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %700, i1 %698) #5, !dbg !37
  %701 = bitcast float %685 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %654, <1 x i32> %701, i1 %698) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %702 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %703 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !37
  %704 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %20) #5, !dbg !38
  %705 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %20) #5, !dbg !38
  %706 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %47) #5, !dbg !38
  %707 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %47) #5, !dbg !38
  %708 = add nuw nsw i32 %25, 3072, !dbg !39
  %709 = add nuw nsw i32 %25, 3080, !dbg !39
  %710 = add nuw nsw i32 %25, 5120, !dbg !39
  %711 = add nuw nsw i32 %25, 5128, !dbg !39
  %712 = zext nneg i32 %708 to i64, !dbg !40
  %713 = getelementptr float, ptr addrspace(1) %1, i64 %712, !dbg !40
  %714 = zext nneg i32 %25 to i64, !dbg !40
  %715 = getelementptr float, ptr addrspace(1) %1, i64 %714, !dbg !40
  %716 = getelementptr i8, ptr addrspace(1) %715, i64 12304, !dbg !40
  %717 = zext nneg i32 %709 to i64, !dbg !40
  %718 = getelementptr float, ptr addrspace(1) %1, i64 %717, !dbg !40
  %719 = getelementptr i8, ptr addrspace(1) %715, i64 12336, !dbg !40
  %720 = zext nneg i32 %710 to i64, !dbg !40
  %721 = getelementptr float, ptr addrspace(1) %1, i64 %720, !dbg !40
  %722 = getelementptr i8, ptr addrspace(1) %715, i64 20496, !dbg !40
  %723 = zext nneg i32 %711 to i64, !dbg !40
  %724 = getelementptr float, ptr addrspace(1) %1, i64 %723, !dbg !40
  %725 = getelementptr i8, ptr addrspace(1) %715, i64 20528, !dbg !40
  %726 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %713, i1 true) #5, !dbg !41
  %727 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %716, i1 true) #5, !dbg !41
  %728 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %718, i1 true) #5, !dbg !41
  %729 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %719, i1 true) #5, !dbg !41
  %730 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %721, i1 %33) #5, !dbg !41
  %731 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %722, i1 %33) #5, !dbg !41
  %732 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %724, i1 %33) #5, !dbg !41
  %733 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %725, i1 %33) #5, !dbg !41
  %734 = getelementptr bfloat, ptr addrspace(1) %2, i64 %712, !dbg !42
  %735 = getelementptr bfloat, ptr addrspace(1) %2, i64 %717, !dbg !42
  %736 = getelementptr bfloat, ptr addrspace(1) %2, i64 %720, !dbg !42
  %737 = getelementptr bfloat, ptr addrspace(1) %2, i64 %723, !dbg !42
  %738 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %734, i1 true) #5, !dbg !43
  %739 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %735, i1 true) #5, !dbg !43
  %740 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %736, i1 %33) #5, !dbg !43
  %741 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %737, i1 %33) #5, !dbg !43
  %742 = zext nneg i32 %26 to i64, !dbg !44
  %743 = getelementptr float, ptr addrspace(1) %1, i64 %742, !dbg !44
  %744 = zext nneg i32 %27 to i64, !dbg !44
  %745 = getelementptr float, ptr addrspace(1) %1, i64 %744, !dbg !44
  %746 = zext nneg i32 %28 to i64, !dbg !44
  %747 = getelementptr float, ptr addrspace(1) %1, i64 %746, !dbg !44
  %748 = zext nneg i32 %29 to i64, !dbg !44
  %749 = getelementptr float, ptr addrspace(1) %1, i64 %748, !dbg !44
  %750 = zext nneg i32 %30 to i64, !dbg !44
  %751 = getelementptr float, ptr addrspace(1) %1, i64 %750, !dbg !44
  %752 = zext nneg i32 %31 to i64, !dbg !44
  %753 = getelementptr float, ptr addrspace(1) %1, i64 %752, !dbg !44
  %754 = zext nneg i32 %32 to i64, !dbg !44
  %755 = getelementptr float, ptr addrspace(1) %1, i64 %754, !dbg !44
  %756 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %715, i1 true) #5, !dbg !45
  %757 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %743, i1 true) #5, !dbg !45
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %745, i1 true) #5, !dbg !45
  %759 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %747, i1 true) #5, !dbg !45
  %760 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %749, i1 %33) #5, !dbg !45
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %751, i1 %33) #5, !dbg !45
  %762 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %753, i1 %33) #5, !dbg !45
  %763 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %755, i1 %33) #5, !dbg !45
  %764 = getelementptr bfloat, ptr addrspace(1) %2, i64 %714, !dbg !46
  %765 = getelementptr bfloat, ptr addrspace(1) %2, i64 %744, !dbg !46
  %766 = getelementptr bfloat, ptr addrspace(1) %2, i64 %748, !dbg !46
  %767 = getelementptr bfloat, ptr addrspace(1) %2, i64 %752, !dbg !46
  %768 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %764, i1 true) #5, !dbg !47
  %769 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %765, i1 true) #5, !dbg !47
  %770 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %766, i1 %33) #5, !dbg !47
  %771 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %767, i1 %33) #5, !dbg !47
  %772 = tail call float @llvm.nvvm.div.full(float %703, float 3.072000e+03), !dbg !48
  %773 = fadd float %772, 0x3EB0C6F7A0000000, !dbg !49
  %774 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %775 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %776 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %777 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %778 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %780 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %781 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %782 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %783 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %784 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %785 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %786 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %787 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %788 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %789 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i90 = icmp eq i32 %789, 0, !dbg !50
  br i1 %.not.i90, label %792, label %790, !dbg !50

790:                                              ; preds = %__nv_rsqrtf.exit
  %791 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %773), !dbg !50
  br label %__nv_rsqrtf.exit92, !dbg !50

792:                                              ; preds = %__nv_rsqrtf.exit
  %793 = tail call float @llvm.nvvm.rsqrt.approx.f(float %773), !dbg !50
  br label %__nv_rsqrtf.exit92, !dbg !50

__nv_rsqrtf.exit92:                               ; preds = %790, %792
  %.0.i91 = phi float [ %791, %790 ], [ %793, %792 ], !dbg !50
  %794 = extractvalue { i32, i32, i32, i32 } %707, 3, !dbg !38
  %795 = bitcast i32 %794 to <2 x bfloat>, !dbg !38
  %796 = extractvalue { i32, i32, i32, i32 } %707, 2, !dbg !38
  %797 = bitcast i32 %796 to <2 x bfloat>, !dbg !38
  %798 = extractvalue { i32, i32, i32, i32 } %707, 1, !dbg !38
  %799 = bitcast i32 %798 to <2 x bfloat>, !dbg !38
  %800 = extractvalue { i32, i32, i32, i32 } %707, 0, !dbg !38
  %801 = bitcast i32 %800 to <2 x bfloat>, !dbg !38
  %802 = extractvalue { i32, i32, i32, i32 } %706, 3, !dbg !38
  %803 = bitcast i32 %802 to <2 x bfloat>, !dbg !38
  %804 = extractvalue { i32, i32, i32, i32 } %706, 2, !dbg !38
  %805 = bitcast i32 %804 to <2 x bfloat>, !dbg !38
  %806 = extractvalue { i32, i32, i32, i32 } %706, 1, !dbg !38
  %807 = bitcast i32 %806 to <2 x bfloat>, !dbg !38
  %808 = extractvalue { i32, i32, i32, i32 } %706, 0, !dbg !38
  %809 = bitcast i32 %808 to <2 x bfloat>, !dbg !38
  %810 = extractvalue { i32, i32, i32, i32 } %705, 3, !dbg !38
  %811 = bitcast i32 %810 to <2 x bfloat>, !dbg !38
  %812 = extractvalue { i32, i32, i32, i32 } %705, 2, !dbg !38
  %813 = bitcast i32 %812 to <2 x bfloat>, !dbg !38
  %814 = extractvalue { i32, i32, i32, i32 } %705, 1, !dbg !38
  %815 = bitcast i32 %814 to <2 x bfloat>, !dbg !38
  %816 = extractvalue { i32, i32, i32, i32 } %705, 0, !dbg !38
  %817 = bitcast i32 %816 to <2 x bfloat>, !dbg !38
  %818 = extractvalue { i32, i32, i32, i32 } %704, 3, !dbg !38
  %819 = bitcast i32 %818 to <2 x bfloat>, !dbg !38
  %820 = extractvalue { i32, i32, i32, i32 } %704, 2, !dbg !38
  %821 = bitcast i32 %820 to <2 x bfloat>, !dbg !38
  %822 = extractvalue { i32, i32, i32, i32 } %704, 1, !dbg !38
  %823 = bitcast i32 %822 to <2 x bfloat>, !dbg !38
  %824 = extractvalue { i32, i32, i32, i32 } %704, 0, !dbg !38
  %825 = bitcast i32 %824 to <2 x bfloat>, !dbg !38
  %826 = extractvalue { i32, i32, i32, i32 } %771, 3, !dbg !47
  %827 = bitcast i32 %826 to <2 x bfloat>, !dbg !47
  %828 = extractvalue { i32, i32, i32, i32 } %771, 2, !dbg !47
  %829 = bitcast i32 %828 to <2 x bfloat>, !dbg !47
  %830 = extractvalue { i32, i32, i32, i32 } %771, 1, !dbg !47
  %831 = bitcast i32 %830 to <2 x bfloat>, !dbg !47
  %832 = extractvalue { i32, i32, i32, i32 } %771, 0, !dbg !47
  %833 = bitcast i32 %832 to <2 x bfloat>, !dbg !47
  %834 = extractvalue { i32, i32, i32, i32 } %770, 3, !dbg !47
  %835 = bitcast i32 %834 to <2 x bfloat>, !dbg !47
  %836 = extractvalue { i32, i32, i32, i32 } %770, 2, !dbg !47
  %837 = bitcast i32 %836 to <2 x bfloat>, !dbg !47
  %838 = extractvalue { i32, i32, i32, i32 } %770, 1, !dbg !47
  %839 = bitcast i32 %838 to <2 x bfloat>, !dbg !47
  %840 = extractvalue { i32, i32, i32, i32 } %770, 0, !dbg !47
  %841 = bitcast i32 %840 to <2 x bfloat>, !dbg !47
  %842 = extractvalue { i32, i32, i32, i32 } %769, 3, !dbg !47
  %843 = bitcast i32 %842 to <2 x bfloat>, !dbg !47
  %844 = extractvalue { i32, i32, i32, i32 } %769, 2, !dbg !47
  %845 = bitcast i32 %844 to <2 x bfloat>, !dbg !47
  %846 = extractvalue { i32, i32, i32, i32 } %769, 1, !dbg !47
  %847 = bitcast i32 %846 to <2 x bfloat>, !dbg !47
  %848 = extractvalue { i32, i32, i32, i32 } %769, 0, !dbg !47
  %849 = bitcast i32 %848 to <2 x bfloat>, !dbg !47
  %850 = extractvalue { i32, i32, i32, i32 } %768, 3, !dbg !47
  %851 = bitcast i32 %850 to <2 x bfloat>, !dbg !47
  %852 = extractvalue { i32, i32, i32, i32 } %768, 2, !dbg !47
  %853 = bitcast i32 %852 to <2 x bfloat>, !dbg !47
  %854 = extractvalue { i32, i32, i32, i32 } %768, 1, !dbg !47
  %855 = bitcast i32 %854 to <2 x bfloat>, !dbg !47
  %856 = extractvalue { i32, i32, i32, i32 } %768, 0, !dbg !47
  %857 = bitcast i32 %856 to <2 x bfloat>, !dbg !47
  %858 = extractvalue { i32, i32, i32, i32 } %763, 3, !dbg !45
  %859 = extractvalue { i32, i32, i32, i32 } %763, 2, !dbg !45
  %860 = extractvalue { i32, i32, i32, i32 } %763, 1, !dbg !45
  %861 = extractvalue { i32, i32, i32, i32 } %763, 0, !dbg !45
  %862 = extractvalue { i32, i32, i32, i32 } %762, 3, !dbg !45
  %863 = extractvalue { i32, i32, i32, i32 } %762, 2, !dbg !45
  %864 = extractvalue { i32, i32, i32, i32 } %762, 1, !dbg !45
  %865 = extractvalue { i32, i32, i32, i32 } %762, 0, !dbg !45
  %866 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !45
  %867 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !45
  %868 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !45
  %869 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !45
  %870 = extractvalue { i32, i32, i32, i32 } %760, 3, !dbg !45
  %871 = extractvalue { i32, i32, i32, i32 } %760, 2, !dbg !45
  %872 = extractvalue { i32, i32, i32, i32 } %760, 1, !dbg !45
  %873 = extractvalue { i32, i32, i32, i32 } %760, 0, !dbg !45
  %874 = extractvalue { i32, i32, i32, i32 } %759, 3, !dbg !45
  %875 = extractvalue { i32, i32, i32, i32 } %759, 2, !dbg !45
  %876 = extractvalue { i32, i32, i32, i32 } %759, 1, !dbg !45
  %877 = extractvalue { i32, i32, i32, i32 } %759, 0, !dbg !45
  %878 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !45
  %879 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !45
  %880 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !45
  %881 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !45
  %882 = extractvalue { i32, i32, i32, i32 } %757, 3, !dbg !45
  %883 = extractvalue { i32, i32, i32, i32 } %757, 2, !dbg !45
  %884 = extractvalue { i32, i32, i32, i32 } %757, 1, !dbg !45
  %885 = extractvalue { i32, i32, i32, i32 } %757, 0, !dbg !45
  %886 = extractvalue { i32, i32, i32, i32 } %756, 3, !dbg !45
  %887 = extractvalue { i32, i32, i32, i32 } %756, 2, !dbg !45
  %888 = extractvalue { i32, i32, i32, i32 } %756, 1, !dbg !45
  %889 = extractvalue { i32, i32, i32, i32 } %756, 0, !dbg !45
  %890 = extractvalue { i32, i32, i32, i32 } %741, 3, !dbg !43
  %891 = bitcast i32 %890 to <2 x bfloat>, !dbg !43
  %892 = extractvalue { i32, i32, i32, i32 } %741, 2, !dbg !43
  %893 = bitcast i32 %892 to <2 x bfloat>, !dbg !43
  %894 = extractvalue { i32, i32, i32, i32 } %741, 1, !dbg !43
  %895 = bitcast i32 %894 to <2 x bfloat>, !dbg !43
  %896 = extractvalue { i32, i32, i32, i32 } %741, 0, !dbg !43
  %897 = bitcast i32 %896 to <2 x bfloat>, !dbg !43
  %898 = extractvalue { i32, i32, i32, i32 } %740, 3, !dbg !43
  %899 = bitcast i32 %898 to <2 x bfloat>, !dbg !43
  %900 = extractvalue { i32, i32, i32, i32 } %740, 2, !dbg !43
  %901 = bitcast i32 %900 to <2 x bfloat>, !dbg !43
  %902 = extractvalue { i32, i32, i32, i32 } %740, 1, !dbg !43
  %903 = bitcast i32 %902 to <2 x bfloat>, !dbg !43
  %904 = extractvalue { i32, i32, i32, i32 } %740, 0, !dbg !43
  %905 = bitcast i32 %904 to <2 x bfloat>, !dbg !43
  %906 = extractvalue { i32, i32, i32, i32 } %739, 3, !dbg !43
  %907 = bitcast i32 %906 to <2 x bfloat>, !dbg !43
  %908 = extractvalue { i32, i32, i32, i32 } %739, 2, !dbg !43
  %909 = bitcast i32 %908 to <2 x bfloat>, !dbg !43
  %910 = extractvalue { i32, i32, i32, i32 } %739, 1, !dbg !43
  %911 = bitcast i32 %910 to <2 x bfloat>, !dbg !43
  %912 = extractvalue { i32, i32, i32, i32 } %739, 0, !dbg !43
  %913 = bitcast i32 %912 to <2 x bfloat>, !dbg !43
  %914 = extractvalue { i32, i32, i32, i32 } %738, 3, !dbg !43
  %915 = bitcast i32 %914 to <2 x bfloat>, !dbg !43
  %916 = extractvalue { i32, i32, i32, i32 } %738, 2, !dbg !43
  %917 = bitcast i32 %916 to <2 x bfloat>, !dbg !43
  %918 = extractvalue { i32, i32, i32, i32 } %738, 1, !dbg !43
  %919 = bitcast i32 %918 to <2 x bfloat>, !dbg !43
  %920 = extractvalue { i32, i32, i32, i32 } %738, 0, !dbg !43
  %921 = bitcast i32 %920 to <2 x bfloat>, !dbg !43
  %922 = extractvalue { i32, i32, i32, i32 } %733, 3, !dbg !41
  %923 = extractvalue { i32, i32, i32, i32 } %733, 2, !dbg !41
  %924 = extractvalue { i32, i32, i32, i32 } %733, 1, !dbg !41
  %925 = extractvalue { i32, i32, i32, i32 } %733, 0, !dbg !41
  %926 = extractvalue { i32, i32, i32, i32 } %732, 3, !dbg !41
  %927 = extractvalue { i32, i32, i32, i32 } %732, 2, !dbg !41
  %928 = extractvalue { i32, i32, i32, i32 } %732, 1, !dbg !41
  %929 = extractvalue { i32, i32, i32, i32 } %732, 0, !dbg !41
  %930 = extractvalue { i32, i32, i32, i32 } %731, 3, !dbg !41
  %931 = extractvalue { i32, i32, i32, i32 } %731, 2, !dbg !41
  %932 = extractvalue { i32, i32, i32, i32 } %731, 1, !dbg !41
  %933 = extractvalue { i32, i32, i32, i32 } %731, 0, !dbg !41
  %934 = extractvalue { i32, i32, i32, i32 } %730, 3, !dbg !41
  %935 = extractvalue { i32, i32, i32, i32 } %730, 2, !dbg !41
  %936 = extractvalue { i32, i32, i32, i32 } %730, 1, !dbg !41
  %937 = extractvalue { i32, i32, i32, i32 } %730, 0, !dbg !41
  %938 = extractvalue { i32, i32, i32, i32 } %729, 3, !dbg !41
  %939 = extractvalue { i32, i32, i32, i32 } %729, 2, !dbg !41
  %940 = extractvalue { i32, i32, i32, i32 } %729, 1, !dbg !41
  %941 = extractvalue { i32, i32, i32, i32 } %729, 0, !dbg !41
  %942 = extractvalue { i32, i32, i32, i32 } %728, 3, !dbg !41
  %943 = extractvalue { i32, i32, i32, i32 } %728, 2, !dbg !41
  %944 = extractvalue { i32, i32, i32, i32 } %728, 1, !dbg !41
  %945 = extractvalue { i32, i32, i32, i32 } %728, 0, !dbg !41
  %946 = extractvalue { i32, i32, i32, i32 } %727, 3, !dbg !41
  %947 = extractvalue { i32, i32, i32, i32 } %727, 2, !dbg !41
  %948 = extractvalue { i32, i32, i32, i32 } %727, 1, !dbg !41
  %949 = extractvalue { i32, i32, i32, i32 } %727, 0, !dbg !41
  %950 = extractvalue { i32, i32, i32, i32 } %726, 3, !dbg !41
  %951 = extractvalue { i32, i32, i32, i32 } %726, 2, !dbg !41
  %952 = extractvalue { i32, i32, i32, i32 } %726, 1, !dbg !41
  %953 = extractvalue { i32, i32, i32, i32 } %726, 0, !dbg !41
  %954 = shl i32 %21, 3, !dbg !11
  %955 = and i32 %954, 1016, !dbg !11
  %956 = add i32 %34, 3072, !dbg !11
  %957 = or disjoint i32 %956, %955, !dbg !14
  %958 = add i32 %34, 2048, !dbg !11
  %959 = or disjoint i32 %958, %955, !dbg !14
  %960 = or disjoint i32 %955, 1024, !dbg !11
  %961 = add i32 %960, %34, !dbg !14
  %962 = or disjoint i32 %955, %34, !dbg !14
  %963 = sext i32 %962 to i64, !dbg !51
  %964 = getelementptr bfloat, ptr addrspace(1) %3, i64 %963, !dbg !51
  %965 = sext i32 %961 to i64, !dbg !51
  %966 = getelementptr bfloat, ptr addrspace(1) %3, i64 %965, !dbg !51
  %967 = sext i32 %959 to i64, !dbg !51
  %968 = getelementptr bfloat, ptr addrspace(1) %3, i64 %967, !dbg !51
  %969 = sext i32 %957 to i64, !dbg !51
  %970 = getelementptr bfloat, ptr addrspace(1) %3, i64 %969, !dbg !51
  %971 = getelementptr bfloat, ptr addrspace(1) %3, i64 %39, !dbg !51
  %972 = getelementptr bfloat, ptr addrspace(1) %3, i64 %41, !dbg !51
  %973 = getelementptr bfloat, ptr addrspace(1) %3, i64 %43, !dbg !51
  %974 = getelementptr bfloat, ptr addrspace(1) %3, i64 %45, !dbg !51
  %975 = fpext <2 x bfloat> %825 to <2 x float>, !dbg !52
  %976 = insertelement <2 x float> poison, float %702, i64 0, !dbg !53
  %977 = shufflevector <2 x float> %976, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %978 = fsub <2 x float> %975, %977, !dbg !53
  %979 = fpext <2 x bfloat> %857 to <2 x float>, !dbg !54
  %980 = insertelement <2 x i32> poison, i32 %889, i64 0, !dbg !45
  %981 = insertelement <2 x i32> %980, i32 %888, i64 1, !dbg !45
  %982 = bitcast <2 x i32> %981 to <2 x float>, !dbg !45
  %983 = fpext <2 x bfloat> %921 to <2 x float>, !dbg !55
  %984 = insertelement <2 x i32> poison, i32 %953, i64 0, !dbg !41
  %985 = insertelement <2 x i32> %984, i32 %952, i64 1, !dbg !41
  %986 = bitcast <2 x i32> %985 to <2 x float>, !dbg !41
  %987 = insertelement <2 x float> poison, float %.0.i91, i64 0, !dbg !56
  %988 = shufflevector <2 x float> %987, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %989 = fmul <2 x float> %978, %988, !dbg !56
  %990 = fadd <2 x float> %986, %983, !dbg !57
  %991 = fadd <2 x float> %990, splat (float 1.000000e+00), !dbg !58
  %992 = fmul <2 x float> %991, %989, !dbg !59
  %993 = fadd <2 x float> %982, %979, !dbg !60
  %994 = fadd <2 x float> %993, %992, !dbg !61
  %995 = extractelement <2 x float> %994, i64 0, !dbg !62
  %996 = select i1 %20, float %995, float 0x7FF0000000000000, !dbg !63
  %997 = extractelement <2 x float> %994, i64 1, !dbg !62
  %998 = select i1 %20, float %997, float 0x7FF0000000000000, !dbg !63
  %999 = select i1 %20, float %995, float 0xFFF0000000000000, !dbg !62
  %1000 = select i1 %20, float %997, float 0xFFF0000000000000, !dbg !62
  %1001 = fptrunc <2 x float> %994 to <2 x bfloat>, !dbg !64
  %1002 = fpext <2 x bfloat> %823 to <2 x float>, !dbg !52
  %1003 = fsub <2 x float> %1002, %977, !dbg !53
  %1004 = fpext <2 x bfloat> %855 to <2 x float>, !dbg !54
  %1005 = insertelement <2 x i32> poison, i32 %887, i64 0, !dbg !45
  %1006 = insertelement <2 x i32> %1005, i32 %886, i64 1, !dbg !45
  %1007 = bitcast <2 x i32> %1006 to <2 x float>, !dbg !45
  %1008 = fpext <2 x bfloat> %919 to <2 x float>, !dbg !55
  %1009 = insertelement <2 x i32> poison, i32 %951, i64 0, !dbg !41
  %1010 = insertelement <2 x i32> %1009, i32 %950, i64 1, !dbg !41
  %1011 = bitcast <2 x i32> %1010 to <2 x float>, !dbg !41
  %1012 = fmul <2 x float> %1003, %988, !dbg !56
  %1013 = fadd <2 x float> %1011, %1008, !dbg !57
  %1014 = fadd <2 x float> %1013, splat (float 1.000000e+00), !dbg !58
  %1015 = fmul <2 x float> %1014, %1012, !dbg !59
  %1016 = fadd <2 x float> %1007, %1004, !dbg !60
  %1017 = fadd <2 x float> %1016, %1015, !dbg !61
  %1018 = extractelement <2 x float> %1017, i64 0, !dbg !62
  %1019 = select i1 %20, float %1018, float 0x7FF0000000000000, !dbg !63
  %1020 = extractelement <2 x float> %1017, i64 1, !dbg !62
  %1021 = select i1 %20, float %1020, float 0x7FF0000000000000, !dbg !63
  %1022 = select i1 %20, float %1018, float 0xFFF0000000000000, !dbg !62
  %1023 = select i1 %20, float %1020, float 0xFFF0000000000000, !dbg !62
  %1024 = fptrunc <2 x float> %1017 to <2 x bfloat>, !dbg !64
  %1025 = fpext <2 x bfloat> %821 to <2 x float>, !dbg !52
  %1026 = fsub <2 x float> %1025, %977, !dbg !53
  %1027 = fpext <2 x bfloat> %853 to <2 x float>, !dbg !54
  %1028 = insertelement <2 x i32> poison, i32 %885, i64 0, !dbg !45
  %1029 = insertelement <2 x i32> %1028, i32 %884, i64 1, !dbg !45
  %1030 = bitcast <2 x i32> %1029 to <2 x float>, !dbg !45
  %1031 = fpext <2 x bfloat> %917 to <2 x float>, !dbg !55
  %1032 = insertelement <2 x i32> poison, i32 %949, i64 0, !dbg !41
  %1033 = insertelement <2 x i32> %1032, i32 %948, i64 1, !dbg !41
  %1034 = bitcast <2 x i32> %1033 to <2 x float>, !dbg !41
  %1035 = fmul <2 x float> %1026, %988, !dbg !56
  %1036 = fadd <2 x float> %1034, %1031, !dbg !57
  %1037 = fadd <2 x float> %1036, splat (float 1.000000e+00), !dbg !58
  %1038 = fmul <2 x float> %1037, %1035, !dbg !59
  %1039 = fadd <2 x float> %1030, %1027, !dbg !60
  %1040 = fadd <2 x float> %1039, %1038, !dbg !61
  %1041 = extractelement <2 x float> %1040, i64 0, !dbg !62
  %1042 = select i1 %20, float %1041, float 0x7FF0000000000000, !dbg !63
  %1043 = extractelement <2 x float> %1040, i64 1, !dbg !62
  %1044 = select i1 %20, float %1043, float 0x7FF0000000000000, !dbg !63
  %1045 = select i1 %20, float %1041, float 0xFFF0000000000000, !dbg !62
  %1046 = select i1 %20, float %1043, float 0xFFF0000000000000, !dbg !62
  %1047 = fptrunc <2 x float> %1040 to <2 x bfloat>, !dbg !64
  %1048 = fpext <2 x bfloat> %819 to <2 x float>, !dbg !52
  %1049 = fsub <2 x float> %1048, %977, !dbg !53
  %1050 = fpext <2 x bfloat> %851 to <2 x float>, !dbg !54
  %1051 = insertelement <2 x i32> poison, i32 %883, i64 0, !dbg !45
  %1052 = insertelement <2 x i32> %1051, i32 %882, i64 1, !dbg !45
  %1053 = bitcast <2 x i32> %1052 to <2 x float>, !dbg !45
  %1054 = fpext <2 x bfloat> %915 to <2 x float>, !dbg !55
  %1055 = insertelement <2 x i32> poison, i32 %947, i64 0, !dbg !41
  %1056 = insertelement <2 x i32> %1055, i32 %946, i64 1, !dbg !41
  %1057 = bitcast <2 x i32> %1056 to <2 x float>, !dbg !41
  %1058 = fmul <2 x float> %1049, %988, !dbg !56
  %1059 = fadd <2 x float> %1057, %1054, !dbg !57
  %1060 = fadd <2 x float> %1059, splat (float 1.000000e+00), !dbg !58
  %1061 = fmul <2 x float> %1060, %1058, !dbg !59
  %1062 = fadd <2 x float> %1053, %1050, !dbg !60
  %1063 = fadd <2 x float> %1062, %1061, !dbg !61
  %1064 = extractelement <2 x float> %1063, i64 0, !dbg !62
  %1065 = select i1 %20, float %1064, float 0x7FF0000000000000, !dbg !63
  %1066 = extractelement <2 x float> %1063, i64 1, !dbg !62
  %1067 = select i1 %20, float %1066, float 0x7FF0000000000000, !dbg !63
  %1068 = select i1 %20, float %1064, float 0xFFF0000000000000, !dbg !62
  %1069 = select i1 %20, float %1066, float 0xFFF0000000000000, !dbg !62
  %1070 = fptrunc <2 x float> %1063 to <2 x bfloat>, !dbg !64
  %1071 = fpext <2 x bfloat> %817 to <2 x float>, !dbg !52
  %1072 = fsub <2 x float> %1071, %977, !dbg !53
  %1073 = fpext <2 x bfloat> %849 to <2 x float>, !dbg !54
  %1074 = insertelement <2 x i32> poison, i32 %881, i64 0, !dbg !45
  %1075 = insertelement <2 x i32> %1074, i32 %880, i64 1, !dbg !45
  %1076 = bitcast <2 x i32> %1075 to <2 x float>, !dbg !45
  %1077 = fpext <2 x bfloat> %913 to <2 x float>, !dbg !55
  %1078 = insertelement <2 x i32> poison, i32 %945, i64 0, !dbg !41
  %1079 = insertelement <2 x i32> %1078, i32 %944, i64 1, !dbg !41
  %1080 = bitcast <2 x i32> %1079 to <2 x float>, !dbg !41
  %1081 = fmul <2 x float> %1072, %988, !dbg !56
  %1082 = fadd <2 x float> %1080, %1077, !dbg !57
  %1083 = fadd <2 x float> %1082, splat (float 1.000000e+00), !dbg !58
  %1084 = fmul <2 x float> %1083, %1081, !dbg !59
  %1085 = fadd <2 x float> %1076, %1073, !dbg !60
  %1086 = fadd <2 x float> %1085, %1084, !dbg !61
  %1087 = extractelement <2 x float> %1086, i64 0, !dbg !62
  %1088 = select i1 %20, float %1087, float 0x7FF0000000000000, !dbg !63
  %1089 = extractelement <2 x float> %1086, i64 1, !dbg !62
  %1090 = select i1 %20, float %1089, float 0x7FF0000000000000, !dbg !63
  %1091 = select i1 %20, float %1087, float 0xFFF0000000000000, !dbg !62
  %1092 = select i1 %20, float %1089, float 0xFFF0000000000000, !dbg !62
  %1093 = fptrunc <2 x float> %1086 to <2 x bfloat>, !dbg !64
  %1094 = fpext <2 x bfloat> %815 to <2 x float>, !dbg !52
  %1095 = fsub <2 x float> %1094, %977, !dbg !53
  %1096 = fpext <2 x bfloat> %847 to <2 x float>, !dbg !54
  %1097 = insertelement <2 x i32> poison, i32 %879, i64 0, !dbg !45
  %1098 = insertelement <2 x i32> %1097, i32 %878, i64 1, !dbg !45
  %1099 = bitcast <2 x i32> %1098 to <2 x float>, !dbg !45
  %1100 = fpext <2 x bfloat> %911 to <2 x float>, !dbg !55
  %1101 = insertelement <2 x i32> poison, i32 %943, i64 0, !dbg !41
  %1102 = insertelement <2 x i32> %1101, i32 %942, i64 1, !dbg !41
  %1103 = bitcast <2 x i32> %1102 to <2 x float>, !dbg !41
  %1104 = fmul <2 x float> %1095, %988, !dbg !56
  %1105 = fadd <2 x float> %1103, %1100, !dbg !57
  %1106 = fadd <2 x float> %1105, splat (float 1.000000e+00), !dbg !58
  %1107 = fmul <2 x float> %1106, %1104, !dbg !59
  %1108 = fadd <2 x float> %1099, %1096, !dbg !60
  %1109 = fadd <2 x float> %1108, %1107, !dbg !61
  %1110 = extractelement <2 x float> %1109, i64 0, !dbg !62
  %1111 = select i1 %20, float %1110, float 0x7FF0000000000000, !dbg !63
  %1112 = extractelement <2 x float> %1109, i64 1, !dbg !62
  %1113 = select i1 %20, float %1112, float 0x7FF0000000000000, !dbg !63
  %1114 = select i1 %20, float %1110, float 0xFFF0000000000000, !dbg !62
  %1115 = select i1 %20, float %1112, float 0xFFF0000000000000, !dbg !62
  %1116 = fptrunc <2 x float> %1109 to <2 x bfloat>, !dbg !64
  %1117 = fpext <2 x bfloat> %813 to <2 x float>, !dbg !52
  %1118 = fsub <2 x float> %1117, %977, !dbg !53
  %1119 = fpext <2 x bfloat> %845 to <2 x float>, !dbg !54
  %1120 = insertelement <2 x i32> poison, i32 %877, i64 0, !dbg !45
  %1121 = insertelement <2 x i32> %1120, i32 %876, i64 1, !dbg !45
  %1122 = bitcast <2 x i32> %1121 to <2 x float>, !dbg !45
  %1123 = fpext <2 x bfloat> %909 to <2 x float>, !dbg !55
  %1124 = insertelement <2 x i32> poison, i32 %941, i64 0, !dbg !41
  %1125 = insertelement <2 x i32> %1124, i32 %940, i64 1, !dbg !41
  %1126 = bitcast <2 x i32> %1125 to <2 x float>, !dbg !41
  %1127 = fmul <2 x float> %1118, %988, !dbg !56
  %1128 = fadd <2 x float> %1126, %1123, !dbg !57
  %1129 = fadd <2 x float> %1128, splat (float 1.000000e+00), !dbg !58
  %1130 = fmul <2 x float> %1129, %1127, !dbg !59
  %1131 = fadd <2 x float> %1122, %1119, !dbg !60
  %1132 = fadd <2 x float> %1131, %1130, !dbg !61
  %1133 = extractelement <2 x float> %1132, i64 0, !dbg !62
  %1134 = select i1 %20, float %1133, float 0x7FF0000000000000, !dbg !63
  %1135 = extractelement <2 x float> %1132, i64 1, !dbg !62
  %1136 = select i1 %20, float %1135, float 0x7FF0000000000000, !dbg !63
  %1137 = select i1 %20, float %1133, float 0xFFF0000000000000, !dbg !62
  %1138 = select i1 %20, float %1135, float 0xFFF0000000000000, !dbg !62
  %1139 = fptrunc <2 x float> %1132 to <2 x bfloat>, !dbg !64
  %1140 = fpext <2 x bfloat> %811 to <2 x float>, !dbg !52
  %1141 = fsub <2 x float> %1140, %977, !dbg !53
  %1142 = fpext <2 x bfloat> %843 to <2 x float>, !dbg !54
  %1143 = insertelement <2 x i32> poison, i32 %875, i64 0, !dbg !45
  %1144 = insertelement <2 x i32> %1143, i32 %874, i64 1, !dbg !45
  %1145 = bitcast <2 x i32> %1144 to <2 x float>, !dbg !45
  %1146 = fpext <2 x bfloat> %907 to <2 x float>, !dbg !55
  %1147 = insertelement <2 x i32> poison, i32 %939, i64 0, !dbg !41
  %1148 = insertelement <2 x i32> %1147, i32 %938, i64 1, !dbg !41
  %1149 = bitcast <2 x i32> %1148 to <2 x float>, !dbg !41
  %1150 = fmul <2 x float> %1141, %988, !dbg !56
  %1151 = fadd <2 x float> %1149, %1146, !dbg !57
  %1152 = fadd <2 x float> %1151, splat (float 1.000000e+00), !dbg !58
  %1153 = fmul <2 x float> %1152, %1150, !dbg !59
  %1154 = fadd <2 x float> %1145, %1142, !dbg !60
  %1155 = fadd <2 x float> %1154, %1153, !dbg !61
  %1156 = extractelement <2 x float> %1155, i64 0, !dbg !62
  %1157 = select i1 %20, float %1156, float 0x7FF0000000000000, !dbg !63
  %1158 = extractelement <2 x float> %1155, i64 1, !dbg !62
  %1159 = select i1 %20, float %1158, float 0x7FF0000000000000, !dbg !63
  %1160 = select i1 %20, float %1156, float 0xFFF0000000000000, !dbg !62
  %1161 = select i1 %20, float %1158, float 0xFFF0000000000000, !dbg !62
  %1162 = fptrunc <2 x float> %1155 to <2 x bfloat>, !dbg !64
  %1163 = fpext <2 x bfloat> %809 to <2 x float>, !dbg !52
  %1164 = fsub <2 x float> %1163, %977, !dbg !53
  %1165 = fpext <2 x bfloat> %841 to <2 x float>, !dbg !54
  %1166 = insertelement <2 x i32> poison, i32 %873, i64 0, !dbg !45
  %1167 = insertelement <2 x i32> %1166, i32 %872, i64 1, !dbg !45
  %1168 = bitcast <2 x i32> %1167 to <2 x float>, !dbg !45
  %1169 = fpext <2 x bfloat> %905 to <2 x float>, !dbg !55
  %1170 = insertelement <2 x i32> poison, i32 %937, i64 0, !dbg !41
  %1171 = insertelement <2 x i32> %1170, i32 %936, i64 1, !dbg !41
  %1172 = bitcast <2 x i32> %1171 to <2 x float>, !dbg !41
  %1173 = fmul <2 x float> %1164, %988, !dbg !56
  %1174 = fadd <2 x float> %1172, %1169, !dbg !57
  %1175 = fadd <2 x float> %1174, splat (float 1.000000e+00), !dbg !58
  %1176 = fmul <2 x float> %1175, %1173, !dbg !59
  %1177 = fadd <2 x float> %1168, %1165, !dbg !60
  %1178 = fadd <2 x float> %1177, %1176, !dbg !61
  %1179 = extractelement <2 x float> %1178, i64 0, !dbg !62
  %1180 = select i1 %47, float %1179, float 0x7FF0000000000000, !dbg !63
  %1181 = extractelement <2 x float> %1178, i64 1, !dbg !62
  %1182 = select i1 %47, float %1181, float 0x7FF0000000000000, !dbg !63
  %1183 = select i1 %47, float %1179, float 0xFFF0000000000000, !dbg !62
  %1184 = select i1 %47, float %1181, float 0xFFF0000000000000, !dbg !62
  %1185 = fptrunc <2 x float> %1178 to <2 x bfloat>, !dbg !64
  %1186 = fpext <2 x bfloat> %807 to <2 x float>, !dbg !52
  %1187 = fsub <2 x float> %1186, %977, !dbg !53
  %1188 = fpext <2 x bfloat> %839 to <2 x float>, !dbg !54
  %1189 = insertelement <2 x i32> poison, i32 %871, i64 0, !dbg !45
  %1190 = insertelement <2 x i32> %1189, i32 %870, i64 1, !dbg !45
  %1191 = bitcast <2 x i32> %1190 to <2 x float>, !dbg !45
  %1192 = fpext <2 x bfloat> %903 to <2 x float>, !dbg !55
  %1193 = insertelement <2 x i32> poison, i32 %935, i64 0, !dbg !41
  %1194 = insertelement <2 x i32> %1193, i32 %934, i64 1, !dbg !41
  %1195 = bitcast <2 x i32> %1194 to <2 x float>, !dbg !41
  %1196 = fmul <2 x float> %1187, %988, !dbg !56
  %1197 = fadd <2 x float> %1195, %1192, !dbg !57
  %1198 = fadd <2 x float> %1197, splat (float 1.000000e+00), !dbg !58
  %1199 = fmul <2 x float> %1198, %1196, !dbg !59
  %1200 = fadd <2 x float> %1191, %1188, !dbg !60
  %1201 = fadd <2 x float> %1200, %1199, !dbg !61
  %1202 = extractelement <2 x float> %1201, i64 0, !dbg !62
  %1203 = select i1 %47, float %1202, float 0x7FF0000000000000, !dbg !63
  %1204 = extractelement <2 x float> %1201, i64 1, !dbg !62
  %1205 = select i1 %47, float %1204, float 0x7FF0000000000000, !dbg !63
  %1206 = select i1 %47, float %1202, float 0xFFF0000000000000, !dbg !62
  %1207 = select i1 %47, float %1204, float 0xFFF0000000000000, !dbg !62
  %1208 = fptrunc <2 x float> %1201 to <2 x bfloat>, !dbg !64
  %1209 = fpext <2 x bfloat> %805 to <2 x float>, !dbg !52
  %1210 = fsub <2 x float> %1209, %977, !dbg !53
  %1211 = fpext <2 x bfloat> %837 to <2 x float>, !dbg !54
  %1212 = insertelement <2 x i32> poison, i32 %869, i64 0, !dbg !45
  %1213 = insertelement <2 x i32> %1212, i32 %868, i64 1, !dbg !45
  %1214 = bitcast <2 x i32> %1213 to <2 x float>, !dbg !45
  %1215 = fpext <2 x bfloat> %901 to <2 x float>, !dbg !55
  %1216 = insertelement <2 x i32> poison, i32 %933, i64 0, !dbg !41
  %1217 = insertelement <2 x i32> %1216, i32 %932, i64 1, !dbg !41
  %1218 = bitcast <2 x i32> %1217 to <2 x float>, !dbg !41
  %1219 = fmul <2 x float> %1210, %988, !dbg !56
  %1220 = fadd <2 x float> %1218, %1215, !dbg !57
  %1221 = fadd <2 x float> %1220, splat (float 1.000000e+00), !dbg !58
  %1222 = fmul <2 x float> %1221, %1219, !dbg !59
  %1223 = fadd <2 x float> %1214, %1211, !dbg !60
  %1224 = fadd <2 x float> %1223, %1222, !dbg !61
  %1225 = extractelement <2 x float> %1224, i64 0, !dbg !62
  %1226 = select i1 %47, float %1225, float 0x7FF0000000000000, !dbg !63
  %1227 = extractelement <2 x float> %1224, i64 1, !dbg !62
  %1228 = select i1 %47, float %1227, float 0x7FF0000000000000, !dbg !63
  %1229 = select i1 %47, float %1225, float 0xFFF0000000000000, !dbg !62
  %1230 = select i1 %47, float %1227, float 0xFFF0000000000000, !dbg !62
  %1231 = fptrunc <2 x float> %1224 to <2 x bfloat>, !dbg !64
  %1232 = fpext <2 x bfloat> %803 to <2 x float>, !dbg !52
  %1233 = fsub <2 x float> %1232, %977, !dbg !53
  %1234 = fpext <2 x bfloat> %835 to <2 x float>, !dbg !54
  %1235 = insertelement <2 x i32> poison, i32 %867, i64 0, !dbg !45
  %1236 = insertelement <2 x i32> %1235, i32 %866, i64 1, !dbg !45
  %1237 = bitcast <2 x i32> %1236 to <2 x float>, !dbg !45
  %1238 = fpext <2 x bfloat> %899 to <2 x float>, !dbg !55
  %1239 = insertelement <2 x i32> poison, i32 %931, i64 0, !dbg !41
  %1240 = insertelement <2 x i32> %1239, i32 %930, i64 1, !dbg !41
  %1241 = bitcast <2 x i32> %1240 to <2 x float>, !dbg !41
  %1242 = fmul <2 x float> %1233, %988, !dbg !56
  %1243 = fadd <2 x float> %1241, %1238, !dbg !57
  %1244 = fadd <2 x float> %1243, splat (float 1.000000e+00), !dbg !58
  %1245 = fmul <2 x float> %1244, %1242, !dbg !59
  %1246 = fadd <2 x float> %1237, %1234, !dbg !60
  %1247 = fadd <2 x float> %1246, %1245, !dbg !61
  %1248 = extractelement <2 x float> %1247, i64 0, !dbg !62
  %1249 = select i1 %47, float %1248, float 0x7FF0000000000000, !dbg !63
  %1250 = extractelement <2 x float> %1247, i64 1, !dbg !62
  %1251 = select i1 %47, float %1250, float 0x7FF0000000000000, !dbg !63
  %1252 = select i1 %47, float %1248, float 0xFFF0000000000000, !dbg !62
  %1253 = select i1 %47, float %1250, float 0xFFF0000000000000, !dbg !62
  %1254 = fptrunc <2 x float> %1247 to <2 x bfloat>, !dbg !64
  %1255 = fpext <2 x bfloat> %801 to <2 x float>, !dbg !52
  %1256 = fsub <2 x float> %1255, %977, !dbg !53
  %1257 = fpext <2 x bfloat> %833 to <2 x float>, !dbg !54
  %1258 = insertelement <2 x i32> poison, i32 %865, i64 0, !dbg !45
  %1259 = insertelement <2 x i32> %1258, i32 %864, i64 1, !dbg !45
  %1260 = bitcast <2 x i32> %1259 to <2 x float>, !dbg !45
  %1261 = fpext <2 x bfloat> %897 to <2 x float>, !dbg !55
  %1262 = insertelement <2 x i32> poison, i32 %929, i64 0, !dbg !41
  %1263 = insertelement <2 x i32> %1262, i32 %928, i64 1, !dbg !41
  %1264 = bitcast <2 x i32> %1263 to <2 x float>, !dbg !41
  %1265 = fmul <2 x float> %1256, %988, !dbg !56
  %1266 = fadd <2 x float> %1264, %1261, !dbg !57
  %1267 = fadd <2 x float> %1266, splat (float 1.000000e+00), !dbg !58
  %1268 = fmul <2 x float> %1267, %1265, !dbg !59
  %1269 = fadd <2 x float> %1260, %1257, !dbg !60
  %1270 = fadd <2 x float> %1269, %1268, !dbg !61
  %1271 = extractelement <2 x float> %1270, i64 0, !dbg !62
  %1272 = select i1 %47, float %1271, float 0x7FF0000000000000, !dbg !63
  %1273 = extractelement <2 x float> %1270, i64 1, !dbg !62
  %1274 = select i1 %47, float %1273, float 0x7FF0000000000000, !dbg !63
  %1275 = select i1 %47, float %1271, float 0xFFF0000000000000, !dbg !62
  %1276 = select i1 %47, float %1273, float 0xFFF0000000000000, !dbg !62
  %1277 = fptrunc <2 x float> %1270 to <2 x bfloat>, !dbg !64
  %1278 = fpext <2 x bfloat> %799 to <2 x float>, !dbg !52
  %1279 = fsub <2 x float> %1278, %977, !dbg !53
  %1280 = fpext <2 x bfloat> %831 to <2 x float>, !dbg !54
  %1281 = insertelement <2 x i32> poison, i32 %863, i64 0, !dbg !45
  %1282 = insertelement <2 x i32> %1281, i32 %862, i64 1, !dbg !45
  %1283 = bitcast <2 x i32> %1282 to <2 x float>, !dbg !45
  %1284 = fpext <2 x bfloat> %895 to <2 x float>, !dbg !55
  %1285 = insertelement <2 x i32> poison, i32 %927, i64 0, !dbg !41
  %1286 = insertelement <2 x i32> %1285, i32 %926, i64 1, !dbg !41
  %1287 = bitcast <2 x i32> %1286 to <2 x float>, !dbg !41
  %1288 = fmul <2 x float> %1279, %988, !dbg !56
  %1289 = fadd <2 x float> %1287, %1284, !dbg !57
  %1290 = fadd <2 x float> %1289, splat (float 1.000000e+00), !dbg !58
  %1291 = fmul <2 x float> %1290, %1288, !dbg !59
  %1292 = fadd <2 x float> %1283, %1280, !dbg !60
  %1293 = fadd <2 x float> %1292, %1291, !dbg !61
  %1294 = extractelement <2 x float> %1293, i64 0, !dbg !62
  %1295 = select i1 %47, float %1294, float 0x7FF0000000000000, !dbg !63
  %1296 = extractelement <2 x float> %1293, i64 1, !dbg !62
  %1297 = select i1 %47, float %1296, float 0x7FF0000000000000, !dbg !63
  %1298 = select i1 %47, float %1294, float 0xFFF0000000000000, !dbg !62
  %1299 = select i1 %47, float %1296, float 0xFFF0000000000000, !dbg !62
  %1300 = fptrunc <2 x float> %1293 to <2 x bfloat>, !dbg !64
  %1301 = fpext <2 x bfloat> %797 to <2 x float>, !dbg !52
  %1302 = fsub <2 x float> %1301, %977, !dbg !53
  %1303 = fpext <2 x bfloat> %829 to <2 x float>, !dbg !54
  %1304 = insertelement <2 x i32> poison, i32 %861, i64 0, !dbg !45
  %1305 = insertelement <2 x i32> %1304, i32 %860, i64 1, !dbg !45
  %1306 = bitcast <2 x i32> %1305 to <2 x float>, !dbg !45
  %1307 = fpext <2 x bfloat> %893 to <2 x float>, !dbg !55
  %1308 = insertelement <2 x i32> poison, i32 %925, i64 0, !dbg !41
  %1309 = insertelement <2 x i32> %1308, i32 %924, i64 1, !dbg !41
  %1310 = bitcast <2 x i32> %1309 to <2 x float>, !dbg !41
  %1311 = fmul <2 x float> %1302, %988, !dbg !56
  %1312 = fadd <2 x float> %1310, %1307, !dbg !57
  %1313 = fadd <2 x float> %1312, splat (float 1.000000e+00), !dbg !58
  %1314 = fmul <2 x float> %1313, %1311, !dbg !59
  %1315 = fadd <2 x float> %1306, %1303, !dbg !60
  %1316 = fadd <2 x float> %1315, %1314, !dbg !61
  %1317 = extractelement <2 x float> %1316, i64 0, !dbg !62
  %1318 = select i1 %47, float %1317, float 0x7FF0000000000000, !dbg !63
  %1319 = extractelement <2 x float> %1316, i64 1, !dbg !62
  %1320 = select i1 %47, float %1319, float 0x7FF0000000000000, !dbg !63
  %1321 = select i1 %47, float %1317, float 0xFFF0000000000000, !dbg !62
  %1322 = select i1 %47, float %1319, float 0xFFF0000000000000, !dbg !62
  %1323 = fptrunc <2 x float> %1316 to <2 x bfloat>, !dbg !64
  %1324 = fpext <2 x bfloat> %795 to <2 x float>, !dbg !52
  %1325 = fsub <2 x float> %1324, %977, !dbg !53
  %1326 = fpext <2 x bfloat> %827 to <2 x float>, !dbg !54
  %1327 = insertelement <2 x i32> poison, i32 %859, i64 0, !dbg !45
  %1328 = insertelement <2 x i32> %1327, i32 %858, i64 1, !dbg !45
  %1329 = bitcast <2 x i32> %1328 to <2 x float>, !dbg !45
  %1330 = fpext <2 x bfloat> %891 to <2 x float>, !dbg !55
  %1331 = insertelement <2 x i32> poison, i32 %923, i64 0, !dbg !41
  %1332 = insertelement <2 x i32> %1331, i32 %922, i64 1, !dbg !41
  %1333 = bitcast <2 x i32> %1332 to <2 x float>, !dbg !41
  %1334 = fmul <2 x float> %1325, %988, !dbg !56
  %1335 = fadd <2 x float> %1333, %1330, !dbg !57
  %1336 = fadd <2 x float> %1335, splat (float 1.000000e+00), !dbg !58
  %1337 = fmul <2 x float> %1336, %1334, !dbg !59
  %1338 = fadd <2 x float> %1329, %1326, !dbg !60
  %1339 = fadd <2 x float> %1338, %1337, !dbg !61
  %1340 = extractelement <2 x float> %1339, i64 0, !dbg !62
  %1341 = select i1 %47, float %1340, float 0x7FF0000000000000, !dbg !63
  %1342 = extractelement <2 x float> %1339, i64 1, !dbg !62
  %1343 = select i1 %47, float %1342, float 0x7FF0000000000000, !dbg !63
  %1344 = select i1 %47, float %1340, float 0xFFF0000000000000, !dbg !62
  %1345 = select i1 %47, float %1342, float 0xFFF0000000000000, !dbg !62
  %1346 = fptrunc <2 x float> %1339 to <2 x bfloat>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25, !dbg !64
  %1348 = bitcast <2 x bfloat> %1001 to i32, !dbg !64
  %1349 = bitcast <2 x bfloat> %1024 to i32, !dbg !64
  %1350 = bitcast <2 x bfloat> %1047 to i32, !dbg !64
  %1351 = bitcast <2 x bfloat> %1070 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1347, i32 %1348, i32 %1349, i32 %1350, i32 %1351, i1 true) #5, !dbg !64
  %1352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %27, !dbg !64
  %1353 = bitcast <2 x bfloat> %1093 to i32, !dbg !64
  %1354 = bitcast <2 x bfloat> %1116 to i32, !dbg !64
  %1355 = bitcast <2 x bfloat> %1139 to i32, !dbg !64
  %1356 = bitcast <2 x bfloat> %1162 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1352, i32 %1353, i32 %1354, i32 %1355, i32 %1356, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %955, !dbg !64
  %1358 = load <4 x i32>, ptr addrspace(3) %1357, align 16, !dbg !64
  %1359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %960, !dbg !64
  %1360 = load <4 x i32>, ptr addrspace(3) %1359, align 16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1361 = bitcast <2 x bfloat> %1185 to i32, !dbg !64
  %1362 = bitcast <2 x bfloat> %1208 to i32, !dbg !64
  %1363 = bitcast <2 x bfloat> %1231 to i32, !dbg !64
  %1364 = bitcast <2 x bfloat> %1254 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1347, i32 %1361, i32 %1362, i32 %1363, i32 %1364, i1 true) #5, !dbg !64
  %1365 = bitcast <2 x bfloat> %1277 to i32, !dbg !64
  %1366 = bitcast <2 x bfloat> %1300 to i32, !dbg !64
  %1367 = bitcast <2 x bfloat> %1323 to i32, !dbg !64
  %1368 = bitcast <2 x bfloat> %1346 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1352, i32 %1365, i32 %1366, i32 %1367, i32 %1368, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1369 = load <4 x i32>, ptr addrspace(3) %1357, align 16, !dbg !64
  %1370 = load <4 x i32>, ptr addrspace(3) %1359, align 16, !dbg !64
  %.extract = extractelement <4 x i32> %1358, i64 0, !dbg !64
  %.extract94 = extractelement <4 x i32> %1358, i64 1, !dbg !64
  %.extract96 = extractelement <4 x i32> %1358, i64 2, !dbg !64
  %.extract98 = extractelement <4 x i32> %1358, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract94, i32 %.extract96, i32 %.extract98, ptr addrspace(1) %964, i1 %20) #5, !dbg !64
  %.extract100 = extractelement <4 x i32> %1360, i64 0, !dbg !64
  %.extract102 = extractelement <4 x i32> %1360, i64 1, !dbg !64
  %.extract104 = extractelement <4 x i32> %1360, i64 2, !dbg !64
  %.extract106 = extractelement <4 x i32> %1360, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract100, i32 %.extract102, i32 %.extract104, i32 %.extract106, ptr addrspace(1) %966, i1 %20) #5, !dbg !64
  %.extract108 = extractelement <4 x i32> %1369, i64 0, !dbg !64
  %.extract110 = extractelement <4 x i32> %1369, i64 1, !dbg !64
  %.extract112 = extractelement <4 x i32> %1369, i64 2, !dbg !64
  %.extract114 = extractelement <4 x i32> %1369, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract108, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %968, i1 %20) #5, !dbg !64
  %.extract116 = extractelement <4 x i32> %1370, i64 0, !dbg !64
  %.extract118 = extractelement <4 x i32> %1370, i64 1, !dbg !64
  %.extract120 = extractelement <4 x i32> %1370, i64 2, !dbg !64
  %.extract122 = extractelement <4 x i32> %1370, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %970, i1 false) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1371 = fcmp olt float %996, %998, !dbg !67
  %1372 = fcmp uno float %996, 0.000000e+00, !dbg !68
  %1373 = or i1 %1371, %1372, !dbg !69
  %1374 = select i1 %1373, float %996, float %998, !dbg !70
  %1375 = fcmp olt float %1374, %1019, !dbg !67
  %1376 = fcmp uno float %1374, 0.000000e+00, !dbg !68
  %1377 = or i1 %1375, %1376, !dbg !69
  %1378 = select i1 %1377, float %1374, float %1019, !dbg !70
  %1379 = fcmp olt float %1378, %1021, !dbg !67
  %1380 = fcmp uno float %1378, 0.000000e+00, !dbg !68
  %1381 = or i1 %1379, %1380, !dbg !69
  %1382 = select i1 %1381, float %1378, float %1021, !dbg !70
  %1383 = fcmp olt float %1382, %1042, !dbg !67
  %1384 = fcmp uno float %1382, 0.000000e+00, !dbg !68
  %1385 = or i1 %1383, %1384, !dbg !69
  %1386 = select i1 %1385, float %1382, float %1042, !dbg !70
  %1387 = fcmp olt float %1386, %1044, !dbg !67
  %1388 = fcmp uno float %1386, 0.000000e+00, !dbg !68
  %1389 = or i1 %1387, %1388, !dbg !69
  %1390 = select i1 %1389, float %1386, float %1044, !dbg !70
  %1391 = fcmp olt float %1390, %1065, !dbg !67
  %1392 = fcmp uno float %1390, 0.000000e+00, !dbg !68
  %1393 = or i1 %1391, %1392, !dbg !69
  %1394 = select i1 %1393, float %1390, float %1065, !dbg !70
  %1395 = fcmp olt float %1394, %1067, !dbg !67
  %1396 = fcmp uno float %1394, 0.000000e+00, !dbg !68
  %1397 = or i1 %1395, %1396, !dbg !69
  %1398 = select i1 %1397, float %1394, float %1067, !dbg !70
  %1399 = fcmp olt float %1398, %1088, !dbg !67
  %1400 = fcmp uno float %1398, 0.000000e+00, !dbg !68
  %1401 = or i1 %1399, %1400, !dbg !69
  %1402 = select i1 %1401, float %1398, float %1088, !dbg !70
  %1403 = fcmp olt float %1402, %1090, !dbg !67
  %1404 = fcmp uno float %1402, 0.000000e+00, !dbg !68
  %1405 = or i1 %1403, %1404, !dbg !69
  %1406 = select i1 %1405, float %1402, float %1090, !dbg !70
  %1407 = fcmp olt float %1406, %1111, !dbg !67
  %1408 = fcmp uno float %1406, 0.000000e+00, !dbg !68
  %1409 = or i1 %1407, %1408, !dbg !69
  %1410 = select i1 %1409, float %1406, float %1111, !dbg !70
  %1411 = fcmp olt float %1410, %1113, !dbg !67
  %1412 = fcmp uno float %1410, 0.000000e+00, !dbg !68
  %1413 = or i1 %1411, %1412, !dbg !69
  %1414 = select i1 %1413, float %1410, float %1113, !dbg !70
  %1415 = fcmp olt float %1414, %1134, !dbg !67
  %1416 = fcmp uno float %1414, 0.000000e+00, !dbg !68
  %1417 = or i1 %1415, %1416, !dbg !69
  %1418 = select i1 %1417, float %1414, float %1134, !dbg !70
  %1419 = fcmp olt float %1418, %1136, !dbg !67
  %1420 = fcmp uno float %1418, 0.000000e+00, !dbg !68
  %1421 = or i1 %1419, %1420, !dbg !69
  %1422 = select i1 %1421, float %1418, float %1136, !dbg !70
  %1423 = fcmp olt float %1422, %1157, !dbg !67
  %1424 = fcmp uno float %1422, 0.000000e+00, !dbg !68
  %1425 = or i1 %1423, %1424, !dbg !69
  %1426 = select i1 %1425, float %1422, float %1157, !dbg !70
  %1427 = fcmp olt float %1426, %1159, !dbg !67
  %1428 = fcmp uno float %1426, 0.000000e+00, !dbg !68
  %1429 = or i1 %1427, %1428, !dbg !69
  %1430 = select i1 %1429, float %1426, float %1159, !dbg !70
  %1431 = fcmp olt float %1430, %1180, !dbg !67
  %1432 = fcmp uno float %1430, 0.000000e+00, !dbg !68
  %1433 = or i1 %1431, %1432, !dbg !69
  %1434 = select i1 %1433, float %1430, float %1180, !dbg !70
  %1435 = fcmp olt float %1434, %1182, !dbg !67
  %1436 = fcmp uno float %1434, 0.000000e+00, !dbg !68
  %1437 = or i1 %1435, %1436, !dbg !69
  %1438 = select i1 %1437, float %1434, float %1182, !dbg !70
  %1439 = fcmp olt float %1438, %1203, !dbg !67
  %1440 = fcmp uno float %1438, 0.000000e+00, !dbg !68
  %1441 = or i1 %1439, %1440, !dbg !69
  %1442 = select i1 %1441, float %1438, float %1203, !dbg !70
  %1443 = fcmp olt float %1442, %1205, !dbg !67
  %1444 = fcmp uno float %1442, 0.000000e+00, !dbg !68
  %1445 = or i1 %1443, %1444, !dbg !69
  %1446 = select i1 %1445, float %1442, float %1205, !dbg !70
  %1447 = fcmp olt float %1446, %1226, !dbg !67
  %1448 = fcmp uno float %1446, 0.000000e+00, !dbg !68
  %1449 = or i1 %1447, %1448, !dbg !69
  %1450 = select i1 %1449, float %1446, float %1226, !dbg !70
  %1451 = fcmp olt float %1450, %1228, !dbg !67
  %1452 = fcmp uno float %1450, 0.000000e+00, !dbg !68
  %1453 = or i1 %1451, %1452, !dbg !69
  %1454 = select i1 %1453, float %1450, float %1228, !dbg !70
  %1455 = fcmp olt float %1454, %1249, !dbg !67
  %1456 = fcmp uno float %1454, 0.000000e+00, !dbg !68
  %1457 = or i1 %1455, %1456, !dbg !69
  %1458 = select i1 %1457, float %1454, float %1249, !dbg !70
  %1459 = fcmp olt float %1458, %1251, !dbg !67
  %1460 = fcmp uno float %1458, 0.000000e+00, !dbg !68
  %1461 = or i1 %1459, %1460, !dbg !69
  %1462 = select i1 %1461, float %1458, float %1251, !dbg !70
  %1463 = fcmp olt float %1462, %1272, !dbg !67
  %1464 = fcmp uno float %1462, 0.000000e+00, !dbg !68
  %1465 = or i1 %1463, %1464, !dbg !69
  %1466 = select i1 %1465, float %1462, float %1272, !dbg !70
  %1467 = fcmp olt float %1466, %1274, !dbg !67
  %1468 = fcmp uno float %1466, 0.000000e+00, !dbg !68
  %1469 = or i1 %1467, %1468, !dbg !69
  %1470 = select i1 %1469, float %1466, float %1274, !dbg !70
  %1471 = fcmp olt float %1470, %1295, !dbg !67
  %1472 = fcmp uno float %1470, 0.000000e+00, !dbg !68
  %1473 = or i1 %1471, %1472, !dbg !69
  %1474 = select i1 %1473, float %1470, float %1295, !dbg !70
  %1475 = fcmp olt float %1474, %1297, !dbg !67
  %1476 = fcmp uno float %1474, 0.000000e+00, !dbg !68
  %1477 = or i1 %1475, %1476, !dbg !69
  %1478 = select i1 %1477, float %1474, float %1297, !dbg !70
  %1479 = fcmp olt float %1478, %1318, !dbg !67
  %1480 = fcmp uno float %1478, 0.000000e+00, !dbg !68
  %1481 = or i1 %1479, %1480, !dbg !69
  %1482 = select i1 %1481, float %1478, float %1318, !dbg !70
  %1483 = fcmp olt float %1482, %1320, !dbg !67
  %1484 = fcmp uno float %1482, 0.000000e+00, !dbg !68
  %1485 = or i1 %1483, %1484, !dbg !69
  %1486 = select i1 %1485, float %1482, float %1320, !dbg !70
  %1487 = fcmp olt float %1486, %1341, !dbg !67
  %1488 = fcmp uno float %1486, 0.000000e+00, !dbg !68
  %1489 = or i1 %1487, %1488, !dbg !69
  %1490 = select i1 %1489, float %1486, float %1341, !dbg !70
  %1491 = fcmp olt float %1490, %1343, !dbg !67
  %1492 = fcmp uno float %1490, 0.000000e+00, !dbg !68
  %1493 = or i1 %1491, %1492, !dbg !69
  %1494 = select i1 %1493, float %1490, float %1343, !dbg !70
  %1495 = bitcast float %1494 to i32, !dbg !65
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1495, i32 16, i32 31), !dbg !65
  %1497 = bitcast i32 %1496 to float, !dbg !65
  %1498 = fcmp olt float %1494, %1497, !dbg !67
  %1499 = fcmp uno float %1494, 0.000000e+00, !dbg !68
  %1500 = or i1 %1498, %1499, !dbg !69
  %1501 = select i1 %1500, float %1494, float %1497, !dbg !70
  %1502 = bitcast float %1501 to i32, !dbg !65
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1502, i32 8, i32 31), !dbg !65
  %1504 = bitcast i32 %1503 to float, !dbg !65
  %1505 = fcmp olt float %1501, %1504, !dbg !67
  %1506 = fcmp uno float %1501, 0.000000e+00, !dbg !68
  %1507 = or i1 %1505, %1506, !dbg !69
  %1508 = select i1 %1507, float %1501, float %1504, !dbg !70
  %1509 = bitcast float %1508 to i32, !dbg !65
  %1510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 4, i32 31), !dbg !65
  %1511 = bitcast i32 %1510 to float, !dbg !65
  %1512 = fcmp olt float %1508, %1511, !dbg !67
  %1513 = fcmp uno float %1508, 0.000000e+00, !dbg !68
  %1514 = or i1 %1512, %1513, !dbg !69
  %1515 = select i1 %1514, float %1508, float %1511, !dbg !70
  %1516 = bitcast float %1515 to i32, !dbg !65
  %1517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1516, i32 2, i32 31), !dbg !65
  %1518 = bitcast i32 %1517 to float, !dbg !65
  %1519 = fcmp olt float %1515, %1518, !dbg !67
  %1520 = fcmp uno float %1515, 0.000000e+00, !dbg !68
  %1521 = or i1 %1519, %1520, !dbg !69
  %1522 = select i1 %1521, float %1515, float %1518, !dbg !70
  %1523 = bitcast float %1522 to i32, !dbg !65
  %1524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1523, i32 1, i32 31), !dbg !65
  %1525 = bitcast i32 %1524 to float, !dbg !65
  %1526 = fcmp olt float %1522, %1525, !dbg !67
  %1527 = fcmp uno float %1522, 0.000000e+00, !dbg !68
  %1528 = or i1 %1526, %1527, !dbg !69
  %1529 = select i1 %1528, i32 %1523, i32 %1524, !dbg !70
  %1530 = insertelement <1 x i32> poison, i32 %1529, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %1530, i1 %640) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1531 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %648, i1 %647) #5, !dbg !65
  %1532 = bitcast i32 %1531 to float, !dbg !65
  %1533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1531, i32 2, i32 31), !dbg !65
  %1534 = bitcast i32 %1533 to float, !dbg !65
  %1535 = fcmp olt float %1532, %1534, !dbg !67
  %1536 = fcmp uno float %1532, 0.000000e+00, !dbg !68
  %1537 = or i1 %1536, %1535, !dbg !69
  %1538 = select i1 %1537, float %1532, float %1534, !dbg !70
  %1539 = bitcast float %1538 to i32, !dbg !65
  %1540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1539, i32 1, i32 31), !dbg !65
  %1541 = bitcast i32 %1540 to float, !dbg !65
  %1542 = fcmp olt float %1538, %1541, !dbg !67
  %1543 = fcmp uno float %1538, 0.000000e+00, !dbg !68
  %1544 = or i1 %1542, %1543, !dbg !69
  %1545 = select i1 %1544, i32 %1539, i32 %1540, !dbg !70
  %1546 = insertelement <1 x i32> poison, i32 %1545, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %1546, i1 %698) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %1547 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1548 = fcmp ogt float %999, %1000, !dbg !73
  %1549 = fcmp uno float %999, 0.000000e+00, !dbg !74
  %1550 = or i1 %1548, %1549, !dbg !75
  %1551 = select i1 %1550, float %999, float %1000, !dbg !76
  %1552 = fcmp ogt float %1551, %1022, !dbg !73
  %1553 = fcmp uno float %1551, 0.000000e+00, !dbg !74
  %1554 = or i1 %1552, %1553, !dbg !75
  %1555 = select i1 %1554, float %1551, float %1022, !dbg !76
  %1556 = fcmp ogt float %1555, %1023, !dbg !73
  %1557 = fcmp uno float %1555, 0.000000e+00, !dbg !74
  %1558 = or i1 %1556, %1557, !dbg !75
  %1559 = select i1 %1558, float %1555, float %1023, !dbg !76
  %1560 = fcmp ogt float %1559, %1045, !dbg !73
  %1561 = fcmp uno float %1559, 0.000000e+00, !dbg !74
  %1562 = or i1 %1560, %1561, !dbg !75
  %1563 = select i1 %1562, float %1559, float %1045, !dbg !76
  %1564 = fcmp ogt float %1563, %1046, !dbg !73
  %1565 = fcmp uno float %1563, 0.000000e+00, !dbg !74
  %1566 = or i1 %1564, %1565, !dbg !75
  %1567 = select i1 %1566, float %1563, float %1046, !dbg !76
  %1568 = fcmp ogt float %1567, %1068, !dbg !73
  %1569 = fcmp uno float %1567, 0.000000e+00, !dbg !74
  %1570 = or i1 %1568, %1569, !dbg !75
  %1571 = select i1 %1570, float %1567, float %1068, !dbg !76
  %1572 = fcmp ogt float %1571, %1069, !dbg !73
  %1573 = fcmp uno float %1571, 0.000000e+00, !dbg !74
  %1574 = or i1 %1572, %1573, !dbg !75
  %1575 = select i1 %1574, float %1571, float %1069, !dbg !76
  %1576 = fcmp ogt float %1575, %1091, !dbg !73
  %1577 = fcmp uno float %1575, 0.000000e+00, !dbg !74
  %1578 = or i1 %1576, %1577, !dbg !75
  %1579 = select i1 %1578, float %1575, float %1091, !dbg !76
  %1580 = fcmp ogt float %1579, %1092, !dbg !73
  %1581 = fcmp uno float %1579, 0.000000e+00, !dbg !74
  %1582 = or i1 %1580, %1581, !dbg !75
  %1583 = select i1 %1582, float %1579, float %1092, !dbg !76
  %1584 = fcmp ogt float %1583, %1114, !dbg !73
  %1585 = fcmp uno float %1583, 0.000000e+00, !dbg !74
  %1586 = or i1 %1584, %1585, !dbg !75
  %1587 = select i1 %1586, float %1583, float %1114, !dbg !76
  %1588 = fcmp ogt float %1587, %1115, !dbg !73
  %1589 = fcmp uno float %1587, 0.000000e+00, !dbg !74
  %1590 = or i1 %1588, %1589, !dbg !75
  %1591 = select i1 %1590, float %1587, float %1115, !dbg !76
  %1592 = fcmp ogt float %1591, %1137, !dbg !73
  %1593 = fcmp uno float %1591, 0.000000e+00, !dbg !74
  %1594 = or i1 %1592, %1593, !dbg !75
  %1595 = select i1 %1594, float %1591, float %1137, !dbg !76
  %1596 = fcmp ogt float %1595, %1138, !dbg !73
  %1597 = fcmp uno float %1595, 0.000000e+00, !dbg !74
  %1598 = or i1 %1596, %1597, !dbg !75
  %1599 = select i1 %1598, float %1595, float %1138, !dbg !76
  %1600 = fcmp ogt float %1599, %1160, !dbg !73
  %1601 = fcmp uno float %1599, 0.000000e+00, !dbg !74
  %1602 = or i1 %1600, %1601, !dbg !75
  %1603 = select i1 %1602, float %1599, float %1160, !dbg !76
  %1604 = fcmp ogt float %1603, %1161, !dbg !73
  %1605 = fcmp uno float %1603, 0.000000e+00, !dbg !74
  %1606 = or i1 %1604, %1605, !dbg !75
  %1607 = select i1 %1606, float %1603, float %1161, !dbg !76
  %1608 = fcmp ogt float %1607, %1183, !dbg !73
  %1609 = fcmp uno float %1607, 0.000000e+00, !dbg !74
  %1610 = or i1 %1608, %1609, !dbg !75
  %1611 = select i1 %1610, float %1607, float %1183, !dbg !76
  %1612 = fcmp ogt float %1611, %1184, !dbg !73
  %1613 = fcmp uno float %1611, 0.000000e+00, !dbg !74
  %1614 = or i1 %1612, %1613, !dbg !75
  %1615 = select i1 %1614, float %1611, float %1184, !dbg !76
  %1616 = fcmp ogt float %1615, %1206, !dbg !73
  %1617 = fcmp uno float %1615, 0.000000e+00, !dbg !74
  %1618 = or i1 %1616, %1617, !dbg !75
  %1619 = select i1 %1618, float %1615, float %1206, !dbg !76
  %1620 = fcmp ogt float %1619, %1207, !dbg !73
  %1621 = fcmp uno float %1619, 0.000000e+00, !dbg !74
  %1622 = or i1 %1620, %1621, !dbg !75
  %1623 = select i1 %1622, float %1619, float %1207, !dbg !76
  %1624 = fcmp ogt float %1623, %1229, !dbg !73
  %1625 = fcmp uno float %1623, 0.000000e+00, !dbg !74
  %1626 = or i1 %1624, %1625, !dbg !75
  %1627 = select i1 %1626, float %1623, float %1229, !dbg !76
  %1628 = fcmp ogt float %1627, %1230, !dbg !73
  %1629 = fcmp uno float %1627, 0.000000e+00, !dbg !74
  %1630 = or i1 %1628, %1629, !dbg !75
  %1631 = select i1 %1630, float %1627, float %1230, !dbg !76
  %1632 = fcmp ogt float %1631, %1252, !dbg !73
  %1633 = fcmp uno float %1631, 0.000000e+00, !dbg !74
  %1634 = or i1 %1632, %1633, !dbg !75
  %1635 = select i1 %1634, float %1631, float %1252, !dbg !76
  %1636 = fcmp ogt float %1635, %1253, !dbg !73
  %1637 = fcmp uno float %1635, 0.000000e+00, !dbg !74
  %1638 = or i1 %1636, %1637, !dbg !75
  %1639 = select i1 %1638, float %1635, float %1253, !dbg !76
  %1640 = fcmp ogt float %1639, %1275, !dbg !73
  %1641 = fcmp uno float %1639, 0.000000e+00, !dbg !74
  %1642 = or i1 %1640, %1641, !dbg !75
  %1643 = select i1 %1642, float %1639, float %1275, !dbg !76
  %1644 = fcmp ogt float %1643, %1276, !dbg !73
  %1645 = fcmp uno float %1643, 0.000000e+00, !dbg !74
  %1646 = or i1 %1644, %1645, !dbg !75
  %1647 = select i1 %1646, float %1643, float %1276, !dbg !76
  %1648 = fcmp ogt float %1647, %1298, !dbg !73
  %1649 = fcmp uno float %1647, 0.000000e+00, !dbg !74
  %1650 = or i1 %1648, %1649, !dbg !75
  %1651 = select i1 %1650, float %1647, float %1298, !dbg !76
  %1652 = fcmp ogt float %1651, %1299, !dbg !73
  %1653 = fcmp uno float %1651, 0.000000e+00, !dbg !74
  %1654 = or i1 %1652, %1653, !dbg !75
  %1655 = select i1 %1654, float %1651, float %1299, !dbg !76
  %1656 = fcmp ogt float %1655, %1321, !dbg !73
  %1657 = fcmp uno float %1655, 0.000000e+00, !dbg !74
  %1658 = or i1 %1656, %1657, !dbg !75
  %1659 = select i1 %1658, float %1655, float %1321, !dbg !76
  %1660 = fcmp ogt float %1659, %1322, !dbg !73
  %1661 = fcmp uno float %1659, 0.000000e+00, !dbg !74
  %1662 = or i1 %1660, %1661, !dbg !75
  %1663 = select i1 %1662, float %1659, float %1322, !dbg !76
  %1664 = fcmp ogt float %1663, %1344, !dbg !73
  %1665 = fcmp uno float %1663, 0.000000e+00, !dbg !74
  %1666 = or i1 %1664, %1665, !dbg !75
  %1667 = select i1 %1666, float %1663, float %1344, !dbg !76
  %1668 = fcmp ogt float %1667, %1345, !dbg !73
  %1669 = fcmp uno float %1667, 0.000000e+00, !dbg !74
  %1670 = or i1 %1668, %1669, !dbg !75
  %1671 = select i1 %1670, float %1667, float %1345, !dbg !76
  %1672 = bitcast float %1671 to i32, !dbg !71
  %1673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1672, i32 16, i32 31), !dbg !71
  %1674 = bitcast i32 %1673 to float, !dbg !71
  %1675 = fcmp ogt float %1671, %1674, !dbg !73
  %1676 = fcmp uno float %1671, 0.000000e+00, !dbg !74
  %1677 = or i1 %1675, %1676, !dbg !75
  %1678 = select i1 %1677, float %1671, float %1674, !dbg !76
  %1679 = bitcast float %1678 to i32, !dbg !71
  %1680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1679, i32 8, i32 31), !dbg !71
  %1681 = bitcast i32 %1680 to float, !dbg !71
  %1682 = fcmp ogt float %1678, %1681, !dbg !73
  %1683 = fcmp uno float %1678, 0.000000e+00, !dbg !74
  %1684 = or i1 %1682, %1683, !dbg !75
  %1685 = select i1 %1684, float %1678, float %1681, !dbg !76
  %1686 = bitcast float %1685 to i32, !dbg !71
  %1687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1686, i32 4, i32 31), !dbg !71
  %1688 = bitcast i32 %1687 to float, !dbg !71
  %1689 = fcmp ogt float %1685, %1688, !dbg !73
  %1690 = fcmp uno float %1685, 0.000000e+00, !dbg !74
  %1691 = or i1 %1689, %1690, !dbg !75
  %1692 = select i1 %1691, float %1685, float %1688, !dbg !76
  %1693 = bitcast float %1692 to i32, !dbg !71
  %1694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1693, i32 2, i32 31), !dbg !71
  %1695 = bitcast i32 %1694 to float, !dbg !71
  %1696 = fcmp ogt float %1692, %1695, !dbg !73
  %1697 = fcmp uno float %1692, 0.000000e+00, !dbg !74
  %1698 = or i1 %1696, %1697, !dbg !75
  %1699 = select i1 %1698, float %1692, float %1695, !dbg !76
  %1700 = bitcast float %1699 to i32, !dbg !71
  %1701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1700, i32 1, i32 31), !dbg !71
  %1702 = bitcast i32 %1701 to float, !dbg !71
  %1703 = fcmp ogt float %1699, %1702, !dbg !73
  %1704 = fcmp uno float %1699, 0.000000e+00, !dbg !74
  %1705 = or i1 %1703, %1704, !dbg !75
  %1706 = select i1 %1705, i32 %1700, i32 %1701, !dbg !76
  %1707 = insertelement <1 x i32> poison, i32 %1706, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %1707, i1 %640) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1708 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %648, i1 %647) #5, !dbg !71
  %1709 = bitcast i32 %1708 to float, !dbg !71
  %1710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1708, i32 2, i32 31), !dbg !71
  %1711 = bitcast i32 %1710 to float, !dbg !71
  %1712 = fcmp ogt float %1709, %1711, !dbg !73
  %1713 = fcmp uno float %1709, 0.000000e+00, !dbg !74
  %1714 = or i1 %1713, %1712, !dbg !75
  %1715 = select i1 %1714, float %1709, float %1711, !dbg !76
  %1716 = bitcast float %1715 to i32, !dbg !71
  %1717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1716, i32 1, i32 31), !dbg !71
  %1718 = bitcast i32 %1717 to float, !dbg !71
  %1719 = fcmp ogt float %1715, %1718, !dbg !73
  %1720 = fcmp uno float %1715, 0.000000e+00, !dbg !74
  %1721 = or i1 %1719, %1720, !dbg !75
  %1722 = select i1 %1721, i32 %1716, i32 %1717, !dbg !76
  %1723 = insertelement <1 x i32> poison, i32 %1722, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %1723, i1 %698) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1724 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %1725 = sext i32 %19 to i64, !dbg !77
  %1726 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1725, !dbg !77
  %1727 = fptrunc float %1547 to bfloat, !dbg !78
  %1728 = and i32 %21, 127, !dbg !78
  %1729 = icmp eq i32 %1728, 0, !dbg !78
  %1730 = bitcast bfloat %1727 to i16, !dbg !78
  %1731 = and i1 %20, %1729, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1730, ptr addrspace(1) %1726, i1 %1731) #5, !dbg !78
  %1732 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1725, !dbg !79
  %1733 = fptrunc float %1724 to bfloat, !dbg !80
  %1734 = bitcast bfloat %1733 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1734, ptr addrspace(1) %1732, i1 %1731) #5, !dbg !80
  %1735 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1725, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1730, ptr addrspace(1) %1735, i1 %1731) #5, !dbg !82
  %1736 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1725, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1734, ptr addrspace(1) %1736, i1 %1731) #5, !dbg !84
  %1737 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1725, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1730, ptr addrspace(1) %1737, i1 %1731) #5, !dbg !86
  %1738 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1725, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1734, ptr addrspace(1) %1738, i1 %1731) #5, !dbg !88
  %1739 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1725, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1730, ptr addrspace(1) %1739, i1 %1731) #5, !dbg !90
  %1740 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1725, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1734, ptr addrspace(1) %1740, i1 %1731) #5, !dbg !92
  %1741 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %971, i1 %20) #5, !dbg !93
  %1742 = extractvalue { i32, i32, i32, i32 } %1741, 0, !dbg !93
  %1743 = bitcast i32 %1742 to <2 x bfloat>, !dbg !93
  %1744 = extractvalue { i32, i32, i32, i32 } %1741, 1, !dbg !93
  %1745 = bitcast i32 %1744 to <2 x bfloat>, !dbg !93
  %1746 = extractvalue { i32, i32, i32, i32 } %1741, 2, !dbg !93
  %1747 = bitcast i32 %1746 to <2 x bfloat>, !dbg !93
  %1748 = extractvalue { i32, i32, i32, i32 } %1741, 3, !dbg !93
  %1749 = bitcast i32 %1748 to <2 x bfloat>, !dbg !93
  %1750 = extractelement <2 x bfloat> %1743, i64 0, !dbg !93
  %1751 = extractelement <2 x bfloat> %1743, i64 1, !dbg !93
  %1752 = extractelement <2 x bfloat> %1745, i64 0, !dbg !93
  %1753 = extractelement <2 x bfloat> %1745, i64 1, !dbg !93
  %1754 = extractelement <2 x bfloat> %1747, i64 0, !dbg !93
  %1755 = extractelement <2 x bfloat> %1747, i64 1, !dbg !93
  %1756 = extractelement <2 x bfloat> %1749, i64 0, !dbg !93
  %1757 = extractelement <2 x bfloat> %1749, i64 1, !dbg !93
  %1758 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %972, i1 %20) #5, !dbg !93
  %1759 = extractvalue { i32, i32, i32, i32 } %1758, 0, !dbg !93
  %1760 = bitcast i32 %1759 to <2 x bfloat>, !dbg !93
  %1761 = extractvalue { i32, i32, i32, i32 } %1758, 1, !dbg !93
  %1762 = bitcast i32 %1761 to <2 x bfloat>, !dbg !93
  %1763 = extractvalue { i32, i32, i32, i32 } %1758, 2, !dbg !93
  %1764 = bitcast i32 %1763 to <2 x bfloat>, !dbg !93
  %1765 = extractvalue { i32, i32, i32, i32 } %1758, 3, !dbg !93
  %1766 = bitcast i32 %1765 to <2 x bfloat>, !dbg !93
  %1767 = extractelement <2 x bfloat> %1760, i64 0, !dbg !93
  %1768 = extractelement <2 x bfloat> %1760, i64 1, !dbg !93
  %1769 = extractelement <2 x bfloat> %1762, i64 0, !dbg !93
  %1770 = extractelement <2 x bfloat> %1762, i64 1, !dbg !93
  %1771 = extractelement <2 x bfloat> %1764, i64 0, !dbg !93
  %1772 = extractelement <2 x bfloat> %1764, i64 1, !dbg !93
  %1773 = extractelement <2 x bfloat> %1766, i64 0, !dbg !93
  %1774 = extractelement <2 x bfloat> %1766, i64 1, !dbg !93
  %1775 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %973, i1 %47) #5, !dbg !93
  %1776 = extractvalue { i32, i32, i32, i32 } %1775, 0, !dbg !93
  %1777 = bitcast i32 %1776 to <2 x bfloat>, !dbg !93
  %1778 = extractvalue { i32, i32, i32, i32 } %1775, 1, !dbg !93
  %1779 = bitcast i32 %1778 to <2 x bfloat>, !dbg !93
  %1780 = extractvalue { i32, i32, i32, i32 } %1775, 2, !dbg !93
  %1781 = bitcast i32 %1780 to <2 x bfloat>, !dbg !93
  %1782 = extractvalue { i32, i32, i32, i32 } %1775, 3, !dbg !93
  %1783 = bitcast i32 %1782 to <2 x bfloat>, !dbg !93
  %1784 = extractelement <2 x bfloat> %1777, i64 0, !dbg !93
  %1785 = extractelement <2 x bfloat> %1777, i64 1, !dbg !93
  %1786 = extractelement <2 x bfloat> %1779, i64 0, !dbg !93
  %1787 = extractelement <2 x bfloat> %1779, i64 1, !dbg !93
  %1788 = extractelement <2 x bfloat> %1781, i64 0, !dbg !93
  %1789 = extractelement <2 x bfloat> %1781, i64 1, !dbg !93
  %1790 = extractelement <2 x bfloat> %1783, i64 0, !dbg !93
  %1791 = extractelement <2 x bfloat> %1783, i64 1, !dbg !93
  %1792 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %974, i1 %47) #5, !dbg !93
  %1793 = extractvalue { i32, i32, i32, i32 } %1792, 0, !dbg !93
  %1794 = bitcast i32 %1793 to <2 x bfloat>, !dbg !93
  %1795 = extractvalue { i32, i32, i32, i32 } %1792, 1, !dbg !93
  %1796 = bitcast i32 %1795 to <2 x bfloat>, !dbg !93
  %1797 = extractvalue { i32, i32, i32, i32 } %1792, 2, !dbg !93
  %1798 = bitcast i32 %1797 to <2 x bfloat>, !dbg !93
  %1799 = extractvalue { i32, i32, i32, i32 } %1792, 3, !dbg !93
  %1800 = bitcast i32 %1799 to <2 x bfloat>, !dbg !93
  %1801 = extractelement <2 x bfloat> %1794, i64 0, !dbg !93
  %1802 = extractelement <2 x bfloat> %1794, i64 1, !dbg !93
  %1803 = extractelement <2 x bfloat> %1796, i64 0, !dbg !93
  %1804 = extractelement <2 x bfloat> %1796, i64 1, !dbg !93
  %1805 = extractelement <2 x bfloat> %1798, i64 0, !dbg !93
  %1806 = extractelement <2 x bfloat> %1798, i64 1, !dbg !93
  %1807 = extractelement <2 x bfloat> %1800, i64 0, !dbg !93
  %1808 = extractelement <2 x bfloat> %1800, i64 1, !dbg !93
  %1809 = fpext bfloat %1750 to float, !dbg !94
  %1810 = fpext bfloat %1751 to float, !dbg !94
  %1811 = fpext bfloat %1752 to float, !dbg !94
  %1812 = fpext bfloat %1753 to float, !dbg !94
  %1813 = fpext bfloat %1754 to float, !dbg !94
  %1814 = fpext bfloat %1755 to float, !dbg !94
  %1815 = fpext bfloat %1756 to float, !dbg !94
  %1816 = fpext bfloat %1757 to float, !dbg !94
  %1817 = fpext bfloat %1767 to float, !dbg !94
  %1818 = fpext bfloat %1768 to float, !dbg !94
  %1819 = fpext bfloat %1769 to float, !dbg !94
  %1820 = fpext bfloat %1770 to float, !dbg !94
  %1821 = fpext bfloat %1771 to float, !dbg !94
  %1822 = fpext bfloat %1772 to float, !dbg !94
  %1823 = fpext bfloat %1773 to float, !dbg !94
  %1824 = fpext bfloat %1774 to float, !dbg !94
  %1825 = fpext bfloat %1784 to float, !dbg !94
  %1826 = fpext bfloat %1785 to float, !dbg !94
  %1827 = fpext bfloat %1786 to float, !dbg !94
  %1828 = fpext bfloat %1787 to float, !dbg !94
  %1829 = fpext bfloat %1788 to float, !dbg !94
  %1830 = fpext bfloat %1789 to float, !dbg !94
  %1831 = fpext bfloat %1790 to float, !dbg !94
  %1832 = fpext bfloat %1791 to float, !dbg !94
  %1833 = fpext bfloat %1801 to float, !dbg !94
  %1834 = fpext bfloat %1802 to float, !dbg !94
  %1835 = fpext bfloat %1803 to float, !dbg !94
  %1836 = fpext bfloat %1804 to float, !dbg !94
  %1837 = fpext bfloat %1805 to float, !dbg !94
  %1838 = fpext bfloat %1806 to float, !dbg !94
  %1839 = fpext bfloat %1807 to float, !dbg !94
  %1840 = fpext bfloat %1808 to float, !dbg !94
  %.inv = fcmp oge float %1547, 0.000000e+00, !dbg !95
  %1841 = select i1 %.inv, float 0.000000e+00, float %1547, !dbg !95
  %1842 = fsub float 0.000000e+00, %1841, !dbg !97
  %.inv47 = fcmp ole float %1724, 0.000000e+00, !dbg !98
  %1843 = select i1 %.inv47, float 0.000000e+00, float %1724, !dbg !98
  %1844 = fcmp ogt float %1842, %1843, !dbg !100
  %1845 = fcmp uno float %1842, 0.000000e+00, !dbg !102
  %1846 = or i1 %1845, %1844, !dbg !103
  %1847 = select i1 %1846, float %1842, float %1843, !dbg !104
  %1848 = fmul float %1847, 0x3F80204080000000, !dbg !105
  %1849 = fcmp ogt float %1848, 0x3EE4F8B580000000, !dbg !106
  %1850 = fcmp uno float %1848, 0.000000e+00, !dbg !108
  %1851 = or i1 %1849, %1850, !dbg !109
  %1852 = select i1 %1851, float %1848, float 0x3EE4F8B580000000, !dbg !110
  %1853 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1852), !dbg !111
  %1854 = fmul float %1853, %1809, !dbg !112
  %1855 = fmul float %1853, %1810, !dbg !112
  %1856 = fmul float %1853, %1811, !dbg !112
  %1857 = fmul float %1853, %1812, !dbg !112
  %1858 = fmul float %1853, %1813, !dbg !112
  %1859 = fmul float %1853, %1814, !dbg !112
  %1860 = fmul float %1853, %1815, !dbg !112
  %1861 = fmul float %1853, %1816, !dbg !112
  %1862 = fmul float %1853, %1817, !dbg !112
  %1863 = fmul float %1853, %1818, !dbg !112
  %1864 = fmul float %1853, %1819, !dbg !112
  %1865 = fmul float %1853, %1820, !dbg !112
  %1866 = fmul float %1853, %1821, !dbg !112
  %1867 = fmul float %1853, %1822, !dbg !112
  %1868 = fmul float %1853, %1823, !dbg !112
  %1869 = fmul float %1853, %1824, !dbg !112
  %1870 = fmul float %1853, %1825, !dbg !112
  %1871 = fmul float %1853, %1826, !dbg !112
  %1872 = fmul float %1853, %1827, !dbg !112
  %1873 = fmul float %1853, %1828, !dbg !112
  %1874 = fmul float %1853, %1829, !dbg !112
  %1875 = fmul float %1853, %1830, !dbg !112
  %1876 = fmul float %1853, %1831, !dbg !112
  %1877 = fmul float %1853, %1832, !dbg !112
  %1878 = fmul float %1853, %1833, !dbg !112
  %1879 = fmul float %1853, %1834, !dbg !112
  %1880 = fmul float %1853, %1835, !dbg !112
  %1881 = fmul float %1853, %1836, !dbg !112
  %1882 = fmul float %1853, %1837, !dbg !112
  %1883 = fmul float %1853, %1838, !dbg !112
  %1884 = fmul float %1853, %1839, !dbg !112
  %1885 = fmul float %1853, %1840, !dbg !112
  %1886 = tail call float @llvm.nvvm.round.f(float %1854) #5, !dbg !113
  %1887 = tail call float @llvm.nvvm.round.f(float %1855) #5, !dbg !113
  %1888 = tail call float @llvm.nvvm.round.f(float %1856) #5, !dbg !113
  %1889 = tail call float @llvm.nvvm.round.f(float %1857) #5, !dbg !113
  %1890 = tail call float @llvm.nvvm.round.f(float %1858) #5, !dbg !113
  %1891 = tail call float @llvm.nvvm.round.f(float %1859) #5, !dbg !113
  %1892 = tail call float @llvm.nvvm.round.f(float %1860) #5, !dbg !113
  %1893 = tail call float @llvm.nvvm.round.f(float %1861) #5, !dbg !113
  %1894 = tail call float @llvm.nvvm.round.f(float %1862) #5, !dbg !113
  %1895 = tail call float @llvm.nvvm.round.f(float %1863) #5, !dbg !113
  %1896 = tail call float @llvm.nvvm.round.f(float %1864) #5, !dbg !113
  %1897 = tail call float @llvm.nvvm.round.f(float %1865) #5, !dbg !113
  %1898 = tail call float @llvm.nvvm.round.f(float %1866) #5, !dbg !113
  %1899 = tail call float @llvm.nvvm.round.f(float %1867) #5, !dbg !113
  %1900 = tail call float @llvm.nvvm.round.f(float %1868) #5, !dbg !113
  %1901 = tail call float @llvm.nvvm.round.f(float %1869) #5, !dbg !113
  %1902 = tail call float @llvm.nvvm.round.f(float %1870) #5, !dbg !113
  %1903 = tail call float @llvm.nvvm.round.f(float %1871) #5, !dbg !113
  %1904 = tail call float @llvm.nvvm.round.f(float %1872) #5, !dbg !113
  %1905 = tail call float @llvm.nvvm.round.f(float %1873) #5, !dbg !113
  %1906 = tail call float @llvm.nvvm.round.f(float %1874) #5, !dbg !113
  %1907 = tail call float @llvm.nvvm.round.f(float %1875) #5, !dbg !113
  %1908 = tail call float @llvm.nvvm.round.f(float %1876) #5, !dbg !113
  %1909 = tail call float @llvm.nvvm.round.f(float %1877) #5, !dbg !113
  %1910 = tail call float @llvm.nvvm.round.f(float %1878) #5, !dbg !113
  %1911 = tail call float @llvm.nvvm.round.f(float %1879) #5, !dbg !113
  %1912 = tail call float @llvm.nvvm.round.f(float %1880) #5, !dbg !113
  %1913 = tail call float @llvm.nvvm.round.f(float %1881) #5, !dbg !113
  %1914 = tail call float @llvm.nvvm.round.f(float %1882) #5, !dbg !113
  %1915 = tail call float @llvm.nvvm.round.f(float %1883) #5, !dbg !113
  %1916 = tail call float @llvm.nvvm.round.f(float %1884) #5, !dbg !113
  %1917 = tail call float @llvm.nvvm.round.f(float %1885) #5, !dbg !113
  %1918 = insertelement <4 x float> poison, float %1886, i64 0, !dbg !114
  %1919 = insertelement <4 x float> %1918, float %1887, i64 1, !dbg !114
  %1920 = insertelement <4 x float> %1919, float %1888, i64 2, !dbg !114
  %1921 = insertelement <4 x float> %1920, float %1889, i64 3, !dbg !114
  %1922 = fcmp ogt <4 x float> %1921, splat (float -1.270000e+02), !dbg !114
  %1923 = fcmp uno <4 x float> %1921, zeroinitializer, !dbg !116
  %1924 = or <4 x i1> %1922, %1923, !dbg !117
  %1925 = select <4 x i1> %1924, <4 x float> %1921, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1926 = fcmp olt <4 x float> %1925, splat (float 1.270000e+02), !dbg !119
  %1927 = fcmp uno <4 x float> %1925, zeroinitializer, !dbg !121
  %1928 = or <4 x i1> %1926, %1927, !dbg !122
  %1929 = fptosi <4 x float> %1925 to <4 x i8>, !dbg !123
  %1930 = select <4 x i1> %1928, <4 x i8> %1929, <4 x i8> splat (i8 127), !dbg !124
  %1931 = insertelement <4 x float> poison, float %1890, i64 0, !dbg !114
  %1932 = insertelement <4 x float> %1931, float %1891, i64 1, !dbg !114
  %1933 = insertelement <4 x float> %1932, float %1892, i64 2, !dbg !114
  %1934 = insertelement <4 x float> %1933, float %1893, i64 3, !dbg !114
  %1935 = fcmp ogt <4 x float> %1934, splat (float -1.270000e+02), !dbg !114
  %1936 = fcmp uno <4 x float> %1934, zeroinitializer, !dbg !116
  %1937 = or <4 x i1> %1935, %1936, !dbg !117
  %1938 = select <4 x i1> %1937, <4 x float> %1934, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1939 = fcmp olt <4 x float> %1938, splat (float 1.270000e+02), !dbg !119
  %1940 = fcmp uno <4 x float> %1938, zeroinitializer, !dbg !121
  %1941 = or <4 x i1> %1939, %1940, !dbg !122
  %1942 = fptosi <4 x float> %1938 to <4 x i8>, !dbg !123
  %1943 = select <4 x i1> %1941, <4 x i8> %1942, <4 x i8> splat (i8 127), !dbg !124
  %1944 = insertelement <4 x float> poison, float %1894, i64 0, !dbg !114
  %1945 = insertelement <4 x float> %1944, float %1895, i64 1, !dbg !114
  %1946 = insertelement <4 x float> %1945, float %1896, i64 2, !dbg !114
  %1947 = insertelement <4 x float> %1946, float %1897, i64 3, !dbg !114
  %1948 = fcmp ogt <4 x float> %1947, splat (float -1.270000e+02), !dbg !114
  %1949 = fcmp uno <4 x float> %1947, zeroinitializer, !dbg !116
  %1950 = or <4 x i1> %1948, %1949, !dbg !117
  %1951 = select <4 x i1> %1950, <4 x float> %1947, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1952 = fcmp olt <4 x float> %1951, splat (float 1.270000e+02), !dbg !119
  %1953 = fcmp uno <4 x float> %1951, zeroinitializer, !dbg !121
  %1954 = or <4 x i1> %1952, %1953, !dbg !122
  %1955 = fptosi <4 x float> %1951 to <4 x i8>, !dbg !123
  %1956 = select <4 x i1> %1954, <4 x i8> %1955, <4 x i8> splat (i8 127), !dbg !124
  %1957 = insertelement <4 x float> poison, float %1898, i64 0, !dbg !114
  %1958 = insertelement <4 x float> %1957, float %1899, i64 1, !dbg !114
  %1959 = insertelement <4 x float> %1958, float %1900, i64 2, !dbg !114
  %1960 = insertelement <4 x float> %1959, float %1901, i64 3, !dbg !114
  %1961 = fcmp ogt <4 x float> %1960, splat (float -1.270000e+02), !dbg !114
  %1962 = fcmp uno <4 x float> %1960, zeroinitializer, !dbg !116
  %1963 = or <4 x i1> %1961, %1962, !dbg !117
  %1964 = select <4 x i1> %1963, <4 x float> %1960, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1965 = fcmp olt <4 x float> %1964, splat (float 1.270000e+02), !dbg !119
  %1966 = fcmp uno <4 x float> %1964, zeroinitializer, !dbg !121
  %1967 = or <4 x i1> %1965, %1966, !dbg !122
  %1968 = fptosi <4 x float> %1964 to <4 x i8>, !dbg !123
  %1969 = select <4 x i1> %1967, <4 x i8> %1968, <4 x i8> splat (i8 127), !dbg !124
  %1970 = insertelement <4 x float> poison, float %1902, i64 0, !dbg !114
  %1971 = insertelement <4 x float> %1970, float %1903, i64 1, !dbg !114
  %1972 = insertelement <4 x float> %1971, float %1904, i64 2, !dbg !114
  %1973 = insertelement <4 x float> %1972, float %1905, i64 3, !dbg !114
  %1974 = fcmp ogt <4 x float> %1973, splat (float -1.270000e+02), !dbg !114
  %1975 = fcmp uno <4 x float> %1973, zeroinitializer, !dbg !116
  %1976 = or <4 x i1> %1974, %1975, !dbg !117
  %1977 = select <4 x i1> %1976, <4 x float> %1973, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1978 = fcmp olt <4 x float> %1977, splat (float 1.270000e+02), !dbg !119
  %1979 = fcmp uno <4 x float> %1977, zeroinitializer, !dbg !121
  %1980 = or <4 x i1> %1978, %1979, !dbg !122
  %1981 = fptosi <4 x float> %1977 to <4 x i8>, !dbg !123
  %1982 = select <4 x i1> %1980, <4 x i8> %1981, <4 x i8> splat (i8 127), !dbg !124
  %1983 = insertelement <4 x float> poison, float %1906, i64 0, !dbg !114
  %1984 = insertelement <4 x float> %1983, float %1907, i64 1, !dbg !114
  %1985 = insertelement <4 x float> %1984, float %1908, i64 2, !dbg !114
  %1986 = insertelement <4 x float> %1985, float %1909, i64 3, !dbg !114
  %1987 = fcmp ogt <4 x float> %1986, splat (float -1.270000e+02), !dbg !114
  %1988 = fcmp uno <4 x float> %1986, zeroinitializer, !dbg !116
  %1989 = or <4 x i1> %1987, %1988, !dbg !117
  %1990 = select <4 x i1> %1989, <4 x float> %1986, <4 x float> splat (float -1.270000e+02), !dbg !118
  %1991 = fcmp olt <4 x float> %1990, splat (float 1.270000e+02), !dbg !119
  %1992 = fcmp uno <4 x float> %1990, zeroinitializer, !dbg !121
  %1993 = or <4 x i1> %1991, %1992, !dbg !122
  %1994 = fptosi <4 x float> %1990 to <4 x i8>, !dbg !123
  %1995 = select <4 x i1> %1993, <4 x i8> %1994, <4 x i8> splat (i8 127), !dbg !124
  %1996 = insertelement <4 x float> poison, float %1910, i64 0, !dbg !114
  %1997 = insertelement <4 x float> %1996, float %1911, i64 1, !dbg !114
  %1998 = insertelement <4 x float> %1997, float %1912, i64 2, !dbg !114
  %1999 = insertelement <4 x float> %1998, float %1913, i64 3, !dbg !114
  %2000 = fcmp ogt <4 x float> %1999, splat (float -1.270000e+02), !dbg !114
  %2001 = fcmp uno <4 x float> %1999, zeroinitializer, !dbg !116
  %2002 = or <4 x i1> %2000, %2001, !dbg !117
  %2003 = select <4 x i1> %2002, <4 x float> %1999, <4 x float> splat (float -1.270000e+02), !dbg !118
  %2004 = fcmp olt <4 x float> %2003, splat (float 1.270000e+02), !dbg !119
  %2005 = fcmp uno <4 x float> %2003, zeroinitializer, !dbg !121
  %2006 = or <4 x i1> %2004, %2005, !dbg !122
  %2007 = fptosi <4 x float> %2003 to <4 x i8>, !dbg !123
  %2008 = select <4 x i1> %2006, <4 x i8> %2007, <4 x i8> splat (i8 127), !dbg !124
  %2009 = insertelement <4 x float> poison, float %1914, i64 0, !dbg !114
  %2010 = insertelement <4 x float> %2009, float %1915, i64 1, !dbg !114
  %2011 = insertelement <4 x float> %2010, float %1916, i64 2, !dbg !114
  %2012 = insertelement <4 x float> %2011, float %1917, i64 3, !dbg !114
  %2013 = fcmp ogt <4 x float> %2012, splat (float -1.270000e+02), !dbg !114
  %2014 = fcmp uno <4 x float> %2012, zeroinitializer, !dbg !116
  %2015 = or <4 x i1> %2013, %2014, !dbg !117
  %2016 = select <4 x i1> %2015, <4 x float> %2012, <4 x float> splat (float -1.270000e+02), !dbg !118
  %2017 = fcmp olt <4 x float> %2016, splat (float 1.270000e+02), !dbg !119
  %2018 = fcmp uno <4 x float> %2016, zeroinitializer, !dbg !121
  %2019 = or <4 x i1> %2017, %2018, !dbg !122
  %2020 = fptosi <4 x float> %2016 to <4 x i8>, !dbg !123
  %2021 = select <4 x i1> %2019, <4 x i8> %2020, <4 x i8> splat (i8 127), !dbg !124
  %2022 = getelementptr i8, ptr addrspace(1) %12, i64 %39, !dbg !125
  %2023 = getelementptr i8, ptr addrspace(1) %12, i64 %43, !dbg !125
  %2024 = bitcast <4 x i8> %1930 to i32, !dbg !126
  %2025 = bitcast <4 x i8> %1943 to i32, !dbg !126
  %2026 = bitcast <4 x i8> %1956 to i32, !dbg !126
  %2027 = bitcast <4 x i8> %1969 to i32, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2024, i32 %2025, i32 %2026, i32 %2027, ptr addrspace(1) %2022, i1 %20) #5, !dbg !126
  %2028 = bitcast <4 x i8> %1982 to i32, !dbg !126
  %2029 = bitcast <4 x i8> %1995 to i32, !dbg !126
  %2030 = bitcast <4 x i8> %2008 to i32, !dbg !126
  %2031 = bitcast <4 x i8> %2021 to i32, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2028, i32 %2029, i32 %2030, i32 %2031, ptr addrspace(1) %2023, i1 %47) #5, !dbg !126
  %2032 = getelementptr i8, ptr addrspace(1) %13, i64 %39, !dbg !127
  %2033 = getelementptr i8, ptr addrspace(1) %13, i64 %43, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2024, i32 %2025, i32 %2026, i32 %2027, ptr addrspace(1) %2032, i1 %20) #5, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2028, i32 %2029, i32 %2030, i32 %2031, ptr addrspace(1) %2033, i1 %47) #5, !dbg !128
  %2034 = getelementptr i8, ptr addrspace(1) %14, i64 %39, !dbg !129
  %2035 = getelementptr i8, ptr addrspace(1) %14, i64 %43, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2024, i32 %2025, i32 %2026, i32 %2027, ptr addrspace(1) %2034, i1 %20) #5, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2028, i32 %2029, i32 %2030, i32 %2031, ptr addrspace(1) %2035, i1 %47) #5, !dbg !130
  %2036 = getelementptr i8, ptr addrspace(1) %15, i64 %39, !dbg !131
  %2037 = getelementptr i8, ptr addrspace(1) %15, i64 %43, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2024, i32 %2025, i32 %2026, i32 %2027, ptr addrspace(1) %2036, i1 %20) #5, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2028, i32 %2029, i32 %2030, i32 %2031, ptr addrspace(1) %2037, i1 %47) #5, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 61, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!37 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 95, column: 25, scope: !6)
!90 = !DILocation(line: 95, column: 37, scope: !6)
!91 = !DILocation(line: 96, column: 26, scope: !6)
!92 = !DILocation(line: 96, column: 38, scope: !6)
!93 = !DILocation(line: 103, column: 53, scope: !6)
!94 = !DILocation(line: 103, column: 115, scope: !6)
!95 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !96)
!96 = !DILocation(line: 105, column: 46, scope: !6)
!97 = !DILocation(line: 106, column: 17, scope: !6)
!98 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !101)
!101 = !DILocation(line: 108, column: 46, scope: !6)
!102 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !101)
!104 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !101)
!105 = !DILocation(line: 110, column: 24, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !107)
!107 = !DILocation(line: 113, column: 46, scope: !6)
!108 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !107)
!109 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !107)
!110 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !107)
!111 = !DILocation(line: 116, column: 25, scope: !6)
!112 = !DILocation(line: 119, column: 24, scope: !6)
!113 = !DILocation(line: 120, column: 36, scope: !6)
!114 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !115)
!115 = !DILocation(line: 123, column: 46, scope: !6)
!116 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !115)
!117 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !115)
!118 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !115)
!119 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 125, column: 46, scope: !6)
!121 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !120)
!122 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !120)
!123 = !DILocation(line: 127, column: 25, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !120)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 129, column: 30, scope: !6)
!128 = !DILocation(line: 129, column: 54, scope: !6)
!129 = !DILocation(line: 130, column: 30, scope: !6)
!130 = !DILocation(line: 130, column: 54, scope: !6)
!131 = !DILocation(line: 131, column: 30, scope: !6)
!132 = !DILocation(line: 131, column: 54, scope: !6)
!133 = !DILocation(line: 97, column: 4, scope: !6)
