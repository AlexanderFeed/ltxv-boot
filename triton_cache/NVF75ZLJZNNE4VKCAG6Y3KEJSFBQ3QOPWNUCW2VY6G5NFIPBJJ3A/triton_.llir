; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 11, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = shl i32 %13, 3, !dbg !11
  %15 = and i32 %14, 1016, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = or disjoint i32 %16, 4, !dbg !12
  %18 = or disjoint i32 %16, 1024, !dbg !12
  %19 = or disjoint i32 %16, 1028, !dbg !12
  %20 = sdiv i32 %16, 3072, !dbg !13
  %21 = mul i32 %20, 3072, !dbg !14
  %.decomposed = sub i32 %16, %21, !dbg !14
  %22 = srem i32 %17, 3072, !dbg !14
  %23 = sdiv i32 %18, 3072, !dbg !13
  %24 = mul i32 %23, 3072, !dbg !14
  %.decomposed32 = sub i32 %18, %24, !dbg !14
  %25 = srem i32 %19, 3072, !dbg !14
  %26 = sext i32 %16 to i64, !dbg !15
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = sext i32 %18 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %27) #1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !16
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %29) #1, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !16
  %48 = add nsw i32 %.decomposed, 15360, !dbg !17
  %49 = add nsw i32 %.decomposed32, 15360, !dbg !17
  %50 = zext nneg i32 %48 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !18
  %52 = sext i32 %22 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !18
  %54 = getelementptr i8, ptr addrspace(1) %53, i64 61440, !dbg !18
  %55 = zext nneg i32 %49 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !18
  %57 = sext i32 %25 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !18
  %59 = getelementptr i8, ptr addrspace(1) %58, i64 61440, !dbg !18
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %51) #1, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !19
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %54) #1, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !19
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !19
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %56) #1, !dbg !19
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !19
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !19
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !19
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %59) #1, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !19
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !19
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !19
  %80 = getelementptr bfloat, ptr addrspace(1) %2, i64 %50, !dbg !20
  %81 = getelementptr bfloat, ptr addrspace(1) %2, i64 %55, !dbg !20
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %80) #1, !dbg !21
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !21
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !21
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !21
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !21
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !21
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !21
  %89 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !21
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !21
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %81) #1, !dbg !21
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !21
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !21
  %94 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !21
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !21
  %96 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !21
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !21
  %98 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !21
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !21
  %100 = getelementptr i32, ptr addrspace(1) %3, i64 %26, !dbg !22
  %101 = sext i32 %17 to i64, !dbg !22
  %102 = getelementptr i32, ptr addrspace(1) %3, i64 %101, !dbg !22
  %103 = getelementptr i32, ptr addrspace(1) %3, i64 %28, !dbg !22
  %104 = sext i32 %19 to i64, !dbg !22
  %105 = getelementptr i32, ptr addrspace(1) %3, i64 %104, !dbg !22
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %100) #1, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !23
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !23
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !23
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %102) #1, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !23
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !23
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %103) #1, !dbg !23
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !23
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %105) #1, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !23
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !23
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !23
  %126 = sext i32 %20 to i64, !dbg !24
  %127 = getelementptr bfloat, ptr addrspace(1) %4, i64 %126, !dbg !24
  %128 = sext i32 %23 to i64, !dbg !24
  %129 = getelementptr bfloat, ptr addrspace(1) %4, i64 %128, !dbg !24
  %130 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %131 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %132 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %133 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %134 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %135 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %136 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %137 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %127) #1, !dbg !25
  %138 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %139 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %140 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %141 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %142 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %143 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %144 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %129) #1, !dbg !25
  %146 = getelementptr bfloat, ptr addrspace(1) %5, i64 %126, !dbg !26
  %147 = getelementptr bfloat, ptr addrspace(1) %5, i64 %128, !dbg !26
  %148 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %152 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %153 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %154 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %155 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %146) #1, !dbg !27
  %156 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %157 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %158 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %159 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %160 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %161 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %162 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %163 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %147) #1, !dbg !27
  %164 = sext i32 %.decomposed to i64, !dbg !28
  %165 = getelementptr bfloat, ptr addrspace(1) %6, i64 %164, !dbg !28
  %166 = sext i32 %.decomposed32 to i64, !dbg !28
  %167 = getelementptr bfloat, ptr addrspace(1) %6, i64 %166, !dbg !28
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %165) #1, !dbg !29
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !29
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !29
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !29
  %173 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !29
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !29
  %175 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !29
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !29
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %167) #1, !dbg !29
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !29
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !29
  %180 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !29
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !29
  %182 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !29
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !29
  %184 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !29
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !29
  %186 = getelementptr bfloat, ptr addrspace(1) %7, i64 %164, !dbg !30
  %187 = getelementptr bfloat, ptr addrspace(1) %7, i64 %166, !dbg !30
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %186) #1, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !31
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !31
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !31
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !31
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !31
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %187) #1, !dbg !31
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !31
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !31
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !31
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !31
  %204 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !31
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !31
  %206 = insertelement <2 x i16> poison, i16 %130, i64 0, !dbg !25
  %207 = insertelement <2 x i16> %206, i16 %131, i64 1, !dbg !25
  %208 = bitcast <2 x i16> %207 to <2 x bfloat>, !dbg !25
  %209 = fcmp oge <2 x bfloat> %208, zeroinitializer, !dbg !32
  %210 = select <2 x i1> %209, <2 x bfloat> zeroinitializer, <2 x bfloat> %208, !dbg !32
  %211 = fpext <2 x bfloat> %210 to <2 x float>, !dbg !32
  %212 = fsub <2 x float> zeroinitializer, %211, !dbg !36
  %213 = insertelement <2 x i16> poison, i16 %132, i64 0, !dbg !25
  %214 = insertelement <2 x i16> %213, i16 %133, i64 1, !dbg !25
  %215 = bitcast <2 x i16> %214 to <2 x bfloat>, !dbg !25
  %216 = fcmp oge <2 x bfloat> %215, zeroinitializer, !dbg !32
  %217 = select <2 x i1> %216, <2 x bfloat> zeroinitializer, <2 x bfloat> %215, !dbg !32
  %218 = fpext <2 x bfloat> %217 to <2 x float>, !dbg !32
  %219 = fsub <2 x float> zeroinitializer, %218, !dbg !36
  %220 = insertelement <2 x i16> poison, i16 %134, i64 0, !dbg !25
  %221 = insertelement <2 x i16> %220, i16 %135, i64 1, !dbg !25
  %222 = bitcast <2 x i16> %221 to <2 x bfloat>, !dbg !25
  %223 = fcmp oge <2 x bfloat> %222, zeroinitializer, !dbg !32
  %224 = select <2 x i1> %223, <2 x bfloat> zeroinitializer, <2 x bfloat> %222, !dbg !32
  %225 = fpext <2 x bfloat> %224 to <2 x float>, !dbg !32
  %226 = fsub <2 x float> zeroinitializer, %225, !dbg !36
  %227 = insertelement <2 x i16> poison, i16 %136, i64 0, !dbg !25
  %228 = insertelement <2 x i16> %227, i16 %137, i64 1, !dbg !25
  %229 = bitcast <2 x i16> %228 to <2 x bfloat>, !dbg !25
  %230 = fcmp oge <2 x bfloat> %229, zeroinitializer, !dbg !32
  %231 = select <2 x i1> %230, <2 x bfloat> zeroinitializer, <2 x bfloat> %229, !dbg !32
  %232 = fpext <2 x bfloat> %231 to <2 x float>, !dbg !32
  %233 = fsub <2 x float> zeroinitializer, %232, !dbg !36
  %234 = insertelement <2 x i16> poison, i16 %138, i64 0, !dbg !25
  %235 = insertelement <2 x i16> %234, i16 %139, i64 1, !dbg !25
  %236 = bitcast <2 x i16> %235 to <2 x bfloat>, !dbg !25
  %237 = fcmp oge <2 x bfloat> %236, zeroinitializer, !dbg !32
  %238 = select <2 x i1> %237, <2 x bfloat> zeroinitializer, <2 x bfloat> %236, !dbg !32
  %239 = fpext <2 x bfloat> %238 to <2 x float>, !dbg !32
  %240 = fsub <2 x float> zeroinitializer, %239, !dbg !36
  %241 = insertelement <2 x i16> poison, i16 %140, i64 0, !dbg !25
  %242 = insertelement <2 x i16> %241, i16 %141, i64 1, !dbg !25
  %243 = bitcast <2 x i16> %242 to <2 x bfloat>, !dbg !25
  %244 = fcmp oge <2 x bfloat> %243, zeroinitializer, !dbg !32
  %245 = select <2 x i1> %244, <2 x bfloat> zeroinitializer, <2 x bfloat> %243, !dbg !32
  %246 = fpext <2 x bfloat> %245 to <2 x float>, !dbg !32
  %247 = fsub <2 x float> zeroinitializer, %246, !dbg !36
  %248 = insertelement <2 x i16> poison, i16 %142, i64 0, !dbg !25
  %249 = insertelement <2 x i16> %248, i16 %143, i64 1, !dbg !25
  %250 = bitcast <2 x i16> %249 to <2 x bfloat>, !dbg !25
  %251 = fcmp oge <2 x bfloat> %250, zeroinitializer, !dbg !32
  %252 = select <2 x i1> %251, <2 x bfloat> zeroinitializer, <2 x bfloat> %250, !dbg !32
  %253 = fpext <2 x bfloat> %252 to <2 x float>, !dbg !32
  %254 = fsub <2 x float> zeroinitializer, %253, !dbg !36
  %255 = insertelement <2 x i16> poison, i16 %144, i64 0, !dbg !25
  %256 = insertelement <2 x i16> %255, i16 %145, i64 1, !dbg !25
  %257 = bitcast <2 x i16> %256 to <2 x bfloat>, !dbg !25
  %258 = fcmp oge <2 x bfloat> %257, zeroinitializer, !dbg !32
  %259 = select <2 x i1> %258, <2 x bfloat> zeroinitializer, <2 x bfloat> %257, !dbg !32
  %260 = fpext <2 x bfloat> %259 to <2 x float>, !dbg !32
  %261 = fsub <2 x float> zeroinitializer, %260, !dbg !36
  %262 = insertelement <2 x i16> poison, i16 %148, i64 0, !dbg !27
  %263 = insertelement <2 x i16> %262, i16 %149, i64 1, !dbg !27
  %264 = bitcast <2 x i16> %263 to <2 x bfloat>, !dbg !27
  %265 = fcmp ole <2 x bfloat> %264, zeroinitializer, !dbg !37
  %266 = select <2 x i1> %265, <2 x bfloat> zeroinitializer, <2 x bfloat> %264, !dbg !37
  %267 = fpext <2 x bfloat> %266 to <2 x float>, !dbg !37
  %268 = insertelement <2 x i16> poison, i16 %150, i64 0, !dbg !27
  %269 = insertelement <2 x i16> %268, i16 %151, i64 1, !dbg !27
  %270 = bitcast <2 x i16> %269 to <2 x bfloat>, !dbg !27
  %271 = fcmp ole <2 x bfloat> %270, zeroinitializer, !dbg !37
  %272 = select <2 x i1> %271, <2 x bfloat> zeroinitializer, <2 x bfloat> %270, !dbg !37
  %273 = fpext <2 x bfloat> %272 to <2 x float>, !dbg !37
  %274 = insertelement <2 x i16> poison, i16 %152, i64 0, !dbg !27
  %275 = insertelement <2 x i16> %274, i16 %153, i64 1, !dbg !27
  %276 = bitcast <2 x i16> %275 to <2 x bfloat>, !dbg !27
  %277 = fcmp ole <2 x bfloat> %276, zeroinitializer, !dbg !37
  %278 = select <2 x i1> %277, <2 x bfloat> zeroinitializer, <2 x bfloat> %276, !dbg !37
  %279 = fpext <2 x bfloat> %278 to <2 x float>, !dbg !37
  %280 = insertelement <2 x i16> poison, i16 %154, i64 0, !dbg !27
  %281 = insertelement <2 x i16> %280, i16 %155, i64 1, !dbg !27
  %282 = bitcast <2 x i16> %281 to <2 x bfloat>, !dbg !27
  %283 = fcmp ole <2 x bfloat> %282, zeroinitializer, !dbg !37
  %284 = select <2 x i1> %283, <2 x bfloat> zeroinitializer, <2 x bfloat> %282, !dbg !37
  %285 = fpext <2 x bfloat> %284 to <2 x float>, !dbg !37
  %286 = insertelement <2 x i16> poison, i16 %156, i64 0, !dbg !27
  %287 = insertelement <2 x i16> %286, i16 %157, i64 1, !dbg !27
  %288 = bitcast <2 x i16> %287 to <2 x bfloat>, !dbg !27
  %289 = fcmp ole <2 x bfloat> %288, zeroinitializer, !dbg !37
  %290 = select <2 x i1> %289, <2 x bfloat> zeroinitializer, <2 x bfloat> %288, !dbg !37
  %291 = fpext <2 x bfloat> %290 to <2 x float>, !dbg !37
  %292 = insertelement <2 x i16> poison, i16 %158, i64 0, !dbg !27
  %293 = insertelement <2 x i16> %292, i16 %159, i64 1, !dbg !27
  %294 = bitcast <2 x i16> %293 to <2 x bfloat>, !dbg !27
  %295 = fcmp ole <2 x bfloat> %294, zeroinitializer, !dbg !37
  %296 = select <2 x i1> %295, <2 x bfloat> zeroinitializer, <2 x bfloat> %294, !dbg !37
  %297 = fpext <2 x bfloat> %296 to <2 x float>, !dbg !37
  %298 = insertelement <2 x i16> poison, i16 %160, i64 0, !dbg !27
  %299 = insertelement <2 x i16> %298, i16 %161, i64 1, !dbg !27
  %300 = bitcast <2 x i16> %299 to <2 x bfloat>, !dbg !27
  %301 = fcmp ole <2 x bfloat> %300, zeroinitializer, !dbg !37
  %302 = select <2 x i1> %301, <2 x bfloat> zeroinitializer, <2 x bfloat> %300, !dbg !37
  %303 = fpext <2 x bfloat> %302 to <2 x float>, !dbg !37
  %304 = insertelement <2 x i16> poison, i16 %162, i64 0, !dbg !27
  %305 = insertelement <2 x i16> %304, i16 %163, i64 1, !dbg !27
  %306 = bitcast <2 x i16> %305 to <2 x bfloat>, !dbg !27
  %307 = fcmp ole <2 x bfloat> %306, zeroinitializer, !dbg !37
  %308 = select <2 x i1> %307, <2 x bfloat> zeroinitializer, <2 x bfloat> %306, !dbg !37
  %309 = fpext <2 x bfloat> %308 to <2 x float>, !dbg !37
  %310 = fcmp ogt <2 x float> %212, %267, !dbg !39
  %311 = fcmp uno <2 x float> %212, zeroinitializer, !dbg !41
  %312 = or <2 x i1> %311, %310, !dbg !42
  %313 = fcmp ogt <2 x float> %219, %273, !dbg !39
  %314 = fcmp uno <2 x float> %219, zeroinitializer, !dbg !41
  %315 = or <2 x i1> %314, %313, !dbg !42
  %316 = fcmp ogt <2 x float> %226, %279, !dbg !39
  %317 = fcmp uno <2 x float> %226, zeroinitializer, !dbg !41
  %318 = or <2 x i1> %317, %316, !dbg !42
  %319 = fcmp ogt <2 x float> %233, %285, !dbg !39
  %320 = fcmp uno <2 x float> %233, zeroinitializer, !dbg !41
  %321 = or <2 x i1> %320, %319, !dbg !42
  %322 = fcmp ogt <2 x float> %240, %291, !dbg !39
  %323 = fcmp uno <2 x float> %240, zeroinitializer, !dbg !41
  %324 = or <2 x i1> %323, %322, !dbg !42
  %325 = fcmp ogt <2 x float> %247, %297, !dbg !39
  %326 = fcmp uno <2 x float> %247, zeroinitializer, !dbg !41
  %327 = or <2 x i1> %326, %325, !dbg !42
  %328 = fcmp ogt <2 x float> %254, %303, !dbg !39
  %329 = fcmp uno <2 x float> %254, zeroinitializer, !dbg !41
  %330 = or <2 x i1> %329, %328, !dbg !42
  %331 = fcmp ogt <2 x float> %261, %309, !dbg !39
  %332 = fcmp uno <2 x float> %261, zeroinitializer, !dbg !41
  %333 = or <2 x i1> %332, %331, !dbg !42
  %334 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !43
  %335 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !19
  %336 = insertelement <2 x i32> %335, i32 %62, i64 1, !dbg !19
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !19
  %338 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !44
  %339 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !45
  %340 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !46
  %341 = fadd <2 x float> %337, %338, !dbg !47
  %342 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !48
  %343 = insertelement <2 x i32> %342, i32 %108, i64 1, !dbg !48
  %344 = sitofp <2 x i32> %343 to <2 x float>, !dbg !48
  %345 = select <2 x i1> %312, <2 x float> %212, <2 x float> %267, !dbg !49
  %346 = fmul <2 x float> %345, splat (float 0x3F80204080000000), !dbg !50
  %347 = fcmp ogt <2 x float> %346, splat (float 0x3EE4F8B580000000), !dbg !51
  %348 = fcmp uno <2 x float> %346, zeroinitializer, !dbg !53
  %349 = or <2 x i1> %347, %348, !dbg !54
  %350 = select <2 x i1> %349, <2 x float> %346, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %351 = fmul <2 x float> %350, %344, !dbg !56
  %352 = fmul <2 x float> %351, %339, !dbg !57
  %353 = fadd <2 x float> %352, %340, !dbg !58
  %354 = fmul <2 x float> %341, %353, !dbg !59
  %355 = fadd <2 x float> %354, %334, !dbg !60
  %356 = fptrunc <2 x float> %355 to <2 x bfloat>, !dbg !61
  %357 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !43
  %358 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !19
  %359 = insertelement <2 x i32> %358, i32 %64, i64 1, !dbg !19
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !19
  %361 = fpext <2 x bfloat> %86 to <2 x float>, !dbg !44
  %362 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !45
  %363 = fpext <2 x bfloat> %192 to <2 x float>, !dbg !46
  %364 = fadd <2 x float> %360, %361, !dbg !47
  %365 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !48
  %366 = insertelement <2 x i32> %365, i32 %110, i64 1, !dbg !48
  %367 = sitofp <2 x i32> %366 to <2 x float>, !dbg !48
  %368 = select <2 x i1> %315, <2 x float> %219, <2 x float> %273, !dbg !49
  %369 = fmul <2 x float> %368, splat (float 0x3F80204080000000), !dbg !50
  %370 = fcmp ogt <2 x float> %369, splat (float 0x3EE4F8B580000000), !dbg !51
  %371 = fcmp uno <2 x float> %369, zeroinitializer, !dbg !53
  %372 = or <2 x i1> %370, %371, !dbg !54
  %373 = select <2 x i1> %372, <2 x float> %369, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %374 = fmul <2 x float> %373, %367, !dbg !56
  %375 = fmul <2 x float> %374, %362, !dbg !57
  %376 = fadd <2 x float> %375, %363, !dbg !58
  %377 = fmul <2 x float> %364, %376, !dbg !59
  %378 = fadd <2 x float> %377, %357, !dbg !60
  %379 = fptrunc <2 x float> %378 to <2 x bfloat>, !dbg !61
  %380 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !43
  %381 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !19
  %382 = insertelement <2 x i32> %381, i32 %67, i64 1, !dbg !19
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !19
  %384 = fpext <2 x bfloat> %88 to <2 x float>, !dbg !44
  %385 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !45
  %386 = fpext <2 x bfloat> %194 to <2 x float>, !dbg !46
  %387 = fadd <2 x float> %383, %384, !dbg !47
  %388 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !48
  %389 = insertelement <2 x i32> %388, i32 %113, i64 1, !dbg !48
  %390 = sitofp <2 x i32> %389 to <2 x float>, !dbg !48
  %391 = select <2 x i1> %318, <2 x float> %226, <2 x float> %279, !dbg !49
  %392 = fmul <2 x float> %391, splat (float 0x3F80204080000000), !dbg !50
  %393 = fcmp ogt <2 x float> %392, splat (float 0x3EE4F8B580000000), !dbg !51
  %394 = fcmp uno <2 x float> %392, zeroinitializer, !dbg !53
  %395 = or <2 x i1> %393, %394, !dbg !54
  %396 = select <2 x i1> %395, <2 x float> %392, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %397 = fmul <2 x float> %396, %390, !dbg !56
  %398 = fmul <2 x float> %397, %385, !dbg !57
  %399 = fadd <2 x float> %398, %386, !dbg !58
  %400 = fmul <2 x float> %387, %399, !dbg !59
  %401 = fadd <2 x float> %400, %380, !dbg !60
  %402 = fptrunc <2 x float> %401 to <2 x bfloat>, !dbg !61
  %403 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !43
  %404 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !19
  %405 = insertelement <2 x i32> %404, i32 %69, i64 1, !dbg !19
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !19
  %407 = fpext <2 x bfloat> %90 to <2 x float>, !dbg !44
  %408 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !45
  %409 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !46
  %410 = fadd <2 x float> %406, %407, !dbg !47
  %411 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !48
  %412 = insertelement <2 x i32> %411, i32 %115, i64 1, !dbg !48
  %413 = sitofp <2 x i32> %412 to <2 x float>, !dbg !48
  %414 = select <2 x i1> %321, <2 x float> %233, <2 x float> %285, !dbg !49
  %415 = fmul <2 x float> %414, splat (float 0x3F80204080000000), !dbg !50
  %416 = fcmp ogt <2 x float> %415, splat (float 0x3EE4F8B580000000), !dbg !51
  %417 = fcmp uno <2 x float> %415, zeroinitializer, !dbg !53
  %418 = or <2 x i1> %416, %417, !dbg !54
  %419 = select <2 x i1> %418, <2 x float> %415, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %420 = fmul <2 x float> %419, %413, !dbg !56
  %421 = fmul <2 x float> %420, %408, !dbg !57
  %422 = fadd <2 x float> %421, %409, !dbg !58
  %423 = fmul <2 x float> %410, %422, !dbg !59
  %424 = fadd <2 x float> %423, %403, !dbg !60
  %425 = fptrunc <2 x float> %424 to <2 x bfloat>, !dbg !61
  %426 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !43
  %427 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !19
  %428 = insertelement <2 x i32> %427, i32 %72, i64 1, !dbg !19
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !19
  %430 = fpext <2 x bfloat> %93 to <2 x float>, !dbg !44
  %431 = fpext <2 x bfloat> %179 to <2 x float>, !dbg !45
  %432 = fpext <2 x bfloat> %199 to <2 x float>, !dbg !46
  %433 = fadd <2 x float> %429, %430, !dbg !47
  %434 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !48
  %435 = insertelement <2 x i32> %434, i32 %118, i64 1, !dbg !48
  %436 = sitofp <2 x i32> %435 to <2 x float>, !dbg !48
  %437 = select <2 x i1> %324, <2 x float> %240, <2 x float> %291, !dbg !49
  %438 = fmul <2 x float> %437, splat (float 0x3F80204080000000), !dbg !50
  %439 = fcmp ogt <2 x float> %438, splat (float 0x3EE4F8B580000000), !dbg !51
  %440 = fcmp uno <2 x float> %438, zeroinitializer, !dbg !53
  %441 = or <2 x i1> %439, %440, !dbg !54
  %442 = select <2 x i1> %441, <2 x float> %438, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %443 = fmul <2 x float> %442, %436, !dbg !56
  %444 = fmul <2 x float> %443, %431, !dbg !57
  %445 = fadd <2 x float> %444, %432, !dbg !58
  %446 = fmul <2 x float> %433, %445, !dbg !59
  %447 = fadd <2 x float> %446, %426, !dbg !60
  %448 = fptrunc <2 x float> %447 to <2 x bfloat>, !dbg !61
  %449 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !43
  %450 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !19
  %451 = insertelement <2 x i32> %450, i32 %74, i64 1, !dbg !19
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !19
  %453 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !44
  %454 = fpext <2 x bfloat> %181 to <2 x float>, !dbg !45
  %455 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !46
  %456 = fadd <2 x float> %452, %453, !dbg !47
  %457 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !48
  %458 = insertelement <2 x i32> %457, i32 %120, i64 1, !dbg !48
  %459 = sitofp <2 x i32> %458 to <2 x float>, !dbg !48
  %460 = select <2 x i1> %327, <2 x float> %247, <2 x float> %297, !dbg !49
  %461 = fmul <2 x float> %460, splat (float 0x3F80204080000000), !dbg !50
  %462 = fcmp ogt <2 x float> %461, splat (float 0x3EE4F8B580000000), !dbg !51
  %463 = fcmp uno <2 x float> %461, zeroinitializer, !dbg !53
  %464 = or <2 x i1> %462, %463, !dbg !54
  %465 = select <2 x i1> %464, <2 x float> %461, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %466 = fmul <2 x float> %465, %459, !dbg !56
  %467 = fmul <2 x float> %466, %454, !dbg !57
  %468 = fadd <2 x float> %467, %455, !dbg !58
  %469 = fmul <2 x float> %456, %468, !dbg !59
  %470 = fadd <2 x float> %469, %449, !dbg !60
  %471 = fptrunc <2 x float> %470 to <2 x bfloat>, !dbg !61
  %472 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !43
  %473 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !19
  %474 = insertelement <2 x i32> %473, i32 %77, i64 1, !dbg !19
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !19
  %476 = fpext <2 x bfloat> %97 to <2 x float>, !dbg !44
  %477 = fpext <2 x bfloat> %183 to <2 x float>, !dbg !45
  %478 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !46
  %479 = fadd <2 x float> %475, %476, !dbg !47
  %480 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !48
  %481 = insertelement <2 x i32> %480, i32 %123, i64 1, !dbg !48
  %482 = sitofp <2 x i32> %481 to <2 x float>, !dbg !48
  %483 = select <2 x i1> %330, <2 x float> %254, <2 x float> %303, !dbg !49
  %484 = fmul <2 x float> %483, splat (float 0x3F80204080000000), !dbg !50
  %485 = fcmp ogt <2 x float> %484, splat (float 0x3EE4F8B580000000), !dbg !51
  %486 = fcmp uno <2 x float> %484, zeroinitializer, !dbg !53
  %487 = or <2 x i1> %485, %486, !dbg !54
  %488 = select <2 x i1> %487, <2 x float> %484, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %489 = fmul <2 x float> %488, %482, !dbg !56
  %490 = fmul <2 x float> %489, %477, !dbg !57
  %491 = fadd <2 x float> %490, %478, !dbg !58
  %492 = fmul <2 x float> %479, %491, !dbg !59
  %493 = fadd <2 x float> %492, %472, !dbg !60
  %494 = fptrunc <2 x float> %493 to <2 x bfloat>, !dbg !61
  %495 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !43
  %496 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !19
  %497 = insertelement <2 x i32> %496, i32 %79, i64 1, !dbg !19
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !19
  %499 = fpext <2 x bfloat> %99 to <2 x float>, !dbg !44
  %500 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !45
  %501 = fpext <2 x bfloat> %205 to <2 x float>, !dbg !46
  %502 = fadd <2 x float> %498, %499, !dbg !47
  %503 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !48
  %504 = insertelement <2 x i32> %503, i32 %125, i64 1, !dbg !48
  %505 = sitofp <2 x i32> %504 to <2 x float>, !dbg !48
  %506 = select <2 x i1> %333, <2 x float> %261, <2 x float> %309, !dbg !49
  %507 = fmul <2 x float> %506, splat (float 0x3F80204080000000), !dbg !50
  %508 = fcmp ogt <2 x float> %507, splat (float 0x3EE4F8B580000000), !dbg !51
  %509 = fcmp uno <2 x float> %507, zeroinitializer, !dbg !53
  %510 = or <2 x i1> %508, %509, !dbg !54
  %511 = select <2 x i1> %510, <2 x float> %507, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %512 = fmul <2 x float> %511, %505, !dbg !56
  %513 = fmul <2 x float> %512, %500, !dbg !57
  %514 = fadd <2 x float> %513, %501, !dbg !58
  %515 = fmul <2 x float> %502, %514, !dbg !59
  %516 = fadd <2 x float> %515, %495, !dbg !60
  %517 = fptrunc <2 x float> %516 to <2 x bfloat>, !dbg !61
  %518 = bitcast <2 x bfloat> %356 to i32, !dbg !61
  %519 = bitcast <2 x bfloat> %379 to i32, !dbg !61
  %520 = bitcast <2 x bfloat> %402 to i32, !dbg !61
  %521 = bitcast <2 x bfloat> %425 to i32, !dbg !61
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %518, i32 %519, i32 %520, i32 %521, ptr addrspace(1) %27) #1, !dbg !61
  %522 = bitcast <2 x bfloat> %448 to i32, !dbg !61
  %523 = bitcast <2 x bfloat> %471 to i32, !dbg !61
  %524 = bitcast <2 x bfloat> %494 to i32, !dbg !61
  %525 = bitcast <2 x bfloat> %517 to i32, !dbg !61
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %522, i32 %523, i32 %524, i32 %525, ptr addrspace(1) %29) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckfgdlzpweursz6cinv7gwrrqbca7rfmpede7orvglmsxznhv4nb.py", directory: "/tmp/torchinductor_root/kf")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 29, column: 19, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 34, scope: !6)
!16 = !DILocation(line: 30, column: 39, scope: !6)
!17 = !DILocation(line: 31, column: 38, scope: !6)
!18 = !DILocation(line: 31, column: 30, scope: !6)
!19 = !DILocation(line: 31, column: 43, scope: !6)
!20 = !DILocation(line: 32, column: 30, scope: !6)
!21 = !DILocation(line: 32, column: 43, scope: !6)
!22 = !DILocation(line: 33, column: 30, scope: !6)
!23 = !DILocation(line: 33, column: 35, scope: !6)
!24 = !DILocation(line: 34, column: 30, scope: !6)
!25 = !DILocation(line: 34, column: 35, scope: !6)
!26 = !DILocation(line: 35, column: 31, scope: !6)
!27 = !DILocation(line: 35, column: 36, scope: !6)
!28 = !DILocation(line: 36, column: 31, scope: !6)
!29 = !DILocation(line: 36, column: 36, scope: !6)
!30 = !DILocation(line: 37, column: 31, scope: !6)
!31 = !DILocation(line: 37, column: 36, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 42, column: 40, scope: !6)
!36 = !DILocation(line: 43, column: 13, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 42, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 45, column: 42, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 30, column: 48, scope: !6)
!44 = !DILocation(line: 32, column: 82, scope: !6)
!45 = !DILocation(line: 36, column: 75, scope: !6)
!46 = !DILocation(line: 37, column: 75, scope: !6)
!47 = !DILocation(line: 39, column: 18, scope: !6)
!48 = !DILocation(line: 40, column: 19, scope: !6)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!50 = !DILocation(line: 47, column: 20, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !52)
!52 = !DILocation(line: 50, column: 42, scope: !6)
!53 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !52)
!54 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !52)
!55 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !52)
!56 = !DILocation(line: 52, column: 19, scope: !6)
!57 = !DILocation(line: 53, column: 20, scope: !6)
!58 = !DILocation(line: 54, column: 20, scope: !6)
!59 = !DILocation(line: 55, column: 19, scope: !6)
!60 = !DILocation(line: 56, column: 19, scope: !6)
!61 = !DILocation(line: 57, column: 40, scope: !6)
!62 = !DILocation(line: 57, column: 4, scope: !6)
