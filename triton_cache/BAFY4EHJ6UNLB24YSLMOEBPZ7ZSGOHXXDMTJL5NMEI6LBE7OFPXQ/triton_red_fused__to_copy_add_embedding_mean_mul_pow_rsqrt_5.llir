; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/qq/cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !10 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %10 = shl i32 %9, 1, !dbg !12
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 512, !dbg !14
  %13 = icmp slt i32 %11, 512, !dbg !14
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %15 = and i32 %14, 31, !dbg !15
  %16 = lshr i32 %14, 5, !dbg !15
  %17 = shl i32 %14, 3, !dbg !15
  %18 = and i32 %17, 2040, !dbg !15
  %19 = sext i32 %10 to i64, !dbg !16
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %11 to i64, !dbg !16
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 %13) #6, !dbg !17
  %39 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %20, i1 %12) #6, !dbg !17
  %40 = shl i32 %9, 13, !dbg !18
  %41 = shl i32 %11, 12, !dbg !18
  %42 = icmp slt i64 %30, 0, !dbg !19
  %43 = icmp slt i64 %38, 0, !dbg !19
  %44 = shl i64 %30, 12, !dbg !20
  %45 = add i64 %44, 131596288, !dbg !20
  %46 = select i1 %42, i64 %45, i64 %44, !dbg !20
  %47 = shl i64 %38, 12, !dbg !20
  %48 = add i64 %47, 131596288, !dbg !20
  %49 = select i1 %43, i64 %48, i64 %47, !dbg !20
  %50 = getelementptr bfloat, ptr addrspace(1) %1, i64 %46
  %51 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49
  %52 = zext nneg i32 %18 to i64, !dbg !21
  %53 = sext i32 %40 to i64, !dbg !21
  %54 = sext i32 %41 to i64, !dbg !21
  %55 = insertelement <16 x i1> poison, i1 %12, i64 0, !dbg !22
  %56 = shufflevector <16 x i1> %55, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !22
  %57 = extractvalue { i64, i64 } %39, 1, !dbg !17
  %58 = insertelement <2 x i64> poison, i64 %57, i64 0, !dbg !23
  %59 = extractvalue { i64, i64 } %39, 0, !dbg !17
  %60 = insertelement <2 x i64> %58, i64 %59, i64 1, !dbg !23
  %61 = icmp slt <2 x i64> %60, zeroinitializer, !dbg !19
  %62 = add <2 x i64> %60, splat (i64 32128), !dbg !23
  %63 = select <2 x i1> %61, <2 x i64> %62, <2 x i64> %60, !dbg !24
  %64 = icmp ugt <2 x i64> %63, splat (i64 32127), !dbg !25
  %shift = shufflevector <2 x i1> %64, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>
  %65 = or <2 x i1> %shift, %64
  %.not68 = extractelement <2 x i1> %65, i64 0
  %.demorgan2.not = and i1 %.not68, %12
  %66 = or disjoint i64 %52, %53, !dbg !26
  %67 = or disjoint i64 %52, %54, !dbg !26
  %68 = getelementptr bfloat, ptr addrspace(1) %2, i64 %66, !dbg !27
  %69 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %68, i1 %12) #6, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %69, i1 %12) #6, !dbg !28
  br i1 %.demorgan2.not, label %72, label %__nv_rsqrtf.exit, !dbg !29

72:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 42, ptr nonnull @assertFunc_0, i64 1), !dbg !29
  unreachable, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %8
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %73 = getelementptr bfloat, ptr addrspace(1) %50, i64 %52, !dbg !30
  %74 = getelementptr bfloat, ptr addrspace(1) %51, i64 %52, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %73, i1 %12) #6, !dbg !31
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %74, i1 %12) #6, !dbg !31
  %77 = or disjoint i64 %52, 2048, !dbg !32
  %78 = or disjoint i64 %77, %53, !dbg !26
  %79 = or disjoint i64 %77, %54, !dbg !26
  %80 = getelementptr bfloat, ptr addrspace(1) %2, i64 %78, !dbg !27
  %81 = getelementptr bfloat, ptr addrspace(1) %2, i64 %79, !dbg !27
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %80, i1 %12) #6, !dbg !28
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %81, i1 %12) #6, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !28
  %88 = shufflevector <2 x bfloat> %85, <2 x bfloat> %87, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %89 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !28
  %91 = shufflevector <2 x bfloat> %90, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %92 = shufflevector <16 x bfloat> %88, <16 x bfloat> %91, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %93 = shufflevector <2 x bfloat> %90, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %94 = shufflevector <16 x bfloat> %92, <16 x bfloat> %93, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !28
  %97 = shufflevector <2 x bfloat> %96, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %98 = shufflevector <16 x bfloat> %94, <16 x bfloat> %97, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %99 = shufflevector <2 x bfloat> %96, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %100 = shufflevector <16 x bfloat> %98, <16 x bfloat> %99, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %101 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !28
  %103 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %104 = shufflevector <16 x bfloat> %100, <16 x bfloat> %103, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %105 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %106 = shufflevector <16 x bfloat> %104, <16 x bfloat> %105, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %107 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !28
  %109 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %110 = shufflevector <16 x bfloat> %106, <16 x bfloat> %109, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %111 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %112 = shufflevector <16 x bfloat> %110, <16 x bfloat> %111, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !28
  %115 = shufflevector <2 x bfloat> %114, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %116 = shufflevector <16 x bfloat> %112, <16 x bfloat> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !33
  %117 = shufflevector <2 x bfloat> %114, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %118 = shufflevector <16 x bfloat> %116, <16 x bfloat> %117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !28
  %121 = shufflevector <2 x bfloat> %120, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %122 = shufflevector <16 x bfloat> %118, <16 x bfloat> %121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !33
  %123 = shufflevector <2 x bfloat> %120, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %124 = shufflevector <16 x bfloat> %122, <16 x bfloat> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !33
  %125 = fpext <16 x bfloat> %124 to <16 x float>, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !31
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !31
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !31
  %130 = shufflevector <2 x bfloat> %127, <2 x bfloat> %129, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !31
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !31
  %133 = shufflevector <2 x bfloat> %132, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %134 = shufflevector <16 x bfloat> %130, <16 x bfloat> %133, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %135 = shufflevector <2 x bfloat> %132, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %136 = shufflevector <16 x bfloat> %134, <16 x bfloat> %135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !31
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !31
  %139 = shufflevector <2 x bfloat> %138, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %140 = shufflevector <16 x bfloat> %136, <16 x bfloat> %139, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %141 = shufflevector <2 x bfloat> %138, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %142 = shufflevector <16 x bfloat> %140, <16 x bfloat> %141, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %143 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !31
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !31
  %145 = shufflevector <2 x bfloat> %144, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %146 = shufflevector <16 x bfloat> %142, <16 x bfloat> %145, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %147 = shufflevector <2 x bfloat> %144, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %148 = shufflevector <16 x bfloat> %146, <16 x bfloat> %147, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !31
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !31
  %151 = shufflevector <2 x bfloat> %150, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %152 = shufflevector <16 x bfloat> %148, <16 x bfloat> %151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %153 = shufflevector <2 x bfloat> %150, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %154 = shufflevector <16 x bfloat> %152, <16 x bfloat> %153, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !31
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !31
  %157 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %158 = shufflevector <16 x bfloat> %154, <16 x bfloat> %157, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !34
  %159 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %160 = shufflevector <16 x bfloat> %158, <16 x bfloat> %159, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !31
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !31
  %163 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %164 = shufflevector <16 x bfloat> %160, <16 x bfloat> %163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !34
  %165 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %166 = shufflevector <16 x bfloat> %164, <16 x bfloat> %165, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !34
  %167 = fpext <16 x bfloat> %166 to <16 x float>, !dbg !34
  %168 = fadd <16 x float> %125, %167, !dbg !35
  %169 = fmul <16 x float> %168, %168, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !28
  %172 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !28
  %174 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !28
  %176 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !28
  %178 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !28
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !28
  %180 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !28
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !28
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !28
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %186 = getelementptr bfloat, ptr addrspace(1) %50, i64 %77, !dbg !30
  %187 = getelementptr bfloat, ptr addrspace(1) %51, i64 %77, !dbg !30
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %186, i1 %12) #6, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !31
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !31
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !31
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !31
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !31
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %187, i1 %12) #6, !dbg !31
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !31
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !31
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !31
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !31
  %204 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !31
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !31
  %206 = shufflevector <2 x bfloat> %185, <2 x bfloat> %183, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %207 = shufflevector <2 x bfloat> %181, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %208 = shufflevector <16 x bfloat> %206, <16 x bfloat> %207, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %209 = shufflevector <2 x bfloat> %181, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %210 = shufflevector <16 x bfloat> %208, <16 x bfloat> %209, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %211 = shufflevector <2 x bfloat> %179, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %212 = shufflevector <16 x bfloat> %210, <16 x bfloat> %211, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %213 = shufflevector <2 x bfloat> %179, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %214 = shufflevector <16 x bfloat> %212, <16 x bfloat> %213, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %215 = shufflevector <2 x bfloat> %177, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %216 = shufflevector <16 x bfloat> %214, <16 x bfloat> %215, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %217 = shufflevector <2 x bfloat> %177, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %218 = shufflevector <16 x bfloat> %216, <16 x bfloat> %217, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %219 = shufflevector <2 x bfloat> %175, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %220 = shufflevector <16 x bfloat> %218, <16 x bfloat> %219, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %221 = shufflevector <2 x bfloat> %175, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %222 = shufflevector <16 x bfloat> %220, <16 x bfloat> %221, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %223 = shufflevector <2 x bfloat> %173, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %224 = shufflevector <16 x bfloat> %222, <16 x bfloat> %223, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !33
  %225 = shufflevector <2 x bfloat> %173, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %226 = shufflevector <16 x bfloat> %224, <16 x bfloat> %225, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !33
  %227 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %228 = shufflevector <16 x bfloat> %226, <16 x bfloat> %227, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !33
  %229 = shufflevector <2 x bfloat> %171, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %230 = shufflevector <16 x bfloat> %228, <16 x bfloat> %229, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !33
  %231 = fpext <16 x bfloat> %230 to <16 x float>, !dbg !33
  %232 = shufflevector <2 x bfloat> %190, <2 x bfloat> %192, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %233 = shufflevector <2 x bfloat> %194, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %234 = shufflevector <16 x bfloat> %232, <16 x bfloat> %233, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %235 = shufflevector <2 x bfloat> %194, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %236 = shufflevector <16 x bfloat> %234, <16 x bfloat> %235, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %237 = shufflevector <2 x bfloat> %196, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %238 = shufflevector <16 x bfloat> %236, <16 x bfloat> %237, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %239 = shufflevector <2 x bfloat> %196, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %240 = shufflevector <16 x bfloat> %238, <16 x bfloat> %239, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %241 = shufflevector <2 x bfloat> %199, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %242 = shufflevector <16 x bfloat> %240, <16 x bfloat> %241, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %243 = shufflevector <2 x bfloat> %199, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %244 = shufflevector <16 x bfloat> %242, <16 x bfloat> %243, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %245 = shufflevector <2 x bfloat> %201, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %246 = shufflevector <16 x bfloat> %244, <16 x bfloat> %245, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %247 = shufflevector <2 x bfloat> %201, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %248 = shufflevector <16 x bfloat> %246, <16 x bfloat> %247, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %249 = shufflevector <2 x bfloat> %203, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %250 = shufflevector <16 x bfloat> %248, <16 x bfloat> %249, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !34
  %251 = shufflevector <2 x bfloat> %203, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %252 = shufflevector <16 x bfloat> %250, <16 x bfloat> %251, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !34
  %253 = shufflevector <2 x bfloat> %205, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %254 = shufflevector <16 x bfloat> %252, <16 x bfloat> %253, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !34
  %255 = shufflevector <2 x bfloat> %205, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %256 = shufflevector <16 x bfloat> %254, <16 x bfloat> %255, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !34
  %257 = fpext <16 x bfloat> %256 to <16 x float>, !dbg !34
  %258 = fadd <16 x float> %231, %257, !dbg !35
  %259 = fmul <16 x float> %258, %258, !dbg !36
  %260 = fadd <16 x float> %169, %259, !dbg !37
  %261 = select <16 x i1> %56, <16 x float> %260, <16 x float> zeroinitializer, !dbg !22
  %shift99 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %262 = fadd <16 x float> %261, %shift99, !dbg !38
  %shift100 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %263 = fadd <16 x float> %shift100, %262, !dbg !38
  %shift101 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %264 = fadd <16 x float> %shift101, %263, !dbg !38
  %shift102 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %265 = fadd <16 x float> %shift102, %264, !dbg !38
  %shift103 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %266 = fadd <16 x float> %shift103, %265, !dbg !38
  %shift104 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %267 = fadd <16 x float> %shift104, %266, !dbg !38
  %shift105 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %268 = fadd <16 x float> %shift105, %267, !dbg !38
  %269 = extractelement <16 x float> %268, i64 0, !dbg !38
  %shift106 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %270 = fadd <16 x float> %261, %shift106, !dbg !38
  %shift107 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %271 = fadd <16 x float> %shift107, %270, !dbg !38
  %shift108 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %272 = fadd <16 x float> %shift108, %271, !dbg !38
  %shift109 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %273 = fadd <16 x float> %shift109, %272, !dbg !38
  %shift110 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %274 = fadd <16 x float> %shift110, %273, !dbg !38
  %shift111 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %275 = fadd <16 x float> %shift111, %274, !dbg !38
  %shift112 = shufflevector <16 x float> %261, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %276 = fadd <16 x float> %shift112, %275, !dbg !38
  %277 = extractelement <16 x float> %276, i64 8, !dbg !38
  %278 = bitcast float %269 to i32, !dbg !43
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 16, i32 31), !dbg !43
  %280 = bitcast i32 %279 to float, !dbg !43
  %281 = fadd float %269, %280, !dbg !38
  %282 = bitcast float %281 to i32, !dbg !43
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 8, i32 31), !dbg !43
  %284 = bitcast i32 %283 to float, !dbg !43
  %285 = fadd float %281, %284, !dbg !38
  %286 = bitcast float %285 to i32, !dbg !43
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !43
  %288 = bitcast i32 %287 to float, !dbg !43
  %289 = fadd float %285, %288, !dbg !38
  %290 = bitcast float %289 to i32, !dbg !43
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !43
  %292 = bitcast i32 %291 to float, !dbg !43
  %293 = fadd float %289, %292, !dbg !38
  %294 = bitcast float %293 to i32, !dbg !43
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !43
  %296 = bitcast i32 %295 to float, !dbg !43
  %297 = fadd float %293, %296, !dbg !38
  %298 = bitcast float %277 to i32, !dbg !43
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !43
  %300 = bitcast i32 %299 to float, !dbg !43
  %301 = fadd float %277, %300, !dbg !38
  %302 = bitcast float %301 to i32, !dbg !43
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !43
  %304 = bitcast i32 %303 to float, !dbg !43
  %305 = fadd float %301, %304, !dbg !38
  %306 = bitcast float %305 to i32, !dbg !43
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !43
  %308 = bitcast i32 %307 to float, !dbg !43
  %309 = fadd float %305, %308, !dbg !38
  %310 = bitcast float %309 to i32, !dbg !43
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !43
  %312 = bitcast i32 %311 to float, !dbg !43
  %313 = fadd float %309, %312, !dbg !38
  %314 = bitcast float %313 to i32, !dbg !43
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !43
  %316 = bitcast i32 %315 to float, !dbg !43
  %317 = fadd float %313, %316, !dbg !38
  %318 = and i32 %16, 7, !dbg !43
  %319 = icmp eq i32 %15, 0, !dbg !43
  %320 = zext nneg i32 %318 to i64, !dbg !43
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !43
  %322 = bitcast float %297 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 %319) #6, !dbg !43
  %323 = or disjoint i32 %318, 8, !dbg !43
  %324 = zext nneg i32 %323 to i64, !dbg !43
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !43
  %326 = bitcast float %317 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 %319) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %327 = icmp slt i32 %14, 16, !dbg !43
  %328 = sext i32 %14 to i64, !dbg !43
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i64 %328, !dbg !43
  %330 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %329, i1 %327) #6, !dbg !43
  %331 = bitcast i32 %330 to float, !dbg !43
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 4, i32 31), !dbg !43
  %333 = bitcast i32 %332 to float, !dbg !43
  %334 = fadd float %331, %333, !dbg !38
  %335 = bitcast float %334 to i32, !dbg !43
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !43
  %337 = bitcast i32 %336 to float, !dbg !43
  %338 = fadd float %334, %337, !dbg !38
  %339 = bitcast float %338 to i32, !dbg !43
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !43
  %341 = bitcast i32 %340 to float, !dbg !43
  %342 = fadd float %338, %341, !dbg !38
  %343 = and i32 %14, 7, !dbg !43
  %344 = icmp eq i32 %343, 0, !dbg !43
  %345 = and i1 %327, %344, !dbg !43
  %346 = bitcast float %342 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %346, i1 %345) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %347 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %348 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !43
  %349 = tail call float @llvm.nvvm.div.full(float %347, float 4.096000e+03), !dbg !44
  %350 = tail call float @llvm.nvvm.div.full(float %348, float 4.096000e+03), !dbg !44
  %351 = fadd float %349, 0x3EB0C6F7A0000000, !dbg !45
  %352 = fadd float %350, 0x3EB0C6F7A0000000, !dbg !45
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %.not.i21 = icmp eq i32 %360, 0, !dbg !46
  br i1 %.not.i21, label %363, label %361, !dbg !46

361:                                              ; preds = %__nv_rsqrtf.exit
  %362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %351), !dbg !46
  br label %__nv_rsqrtf.exit23, !dbg !46

363:                                              ; preds = %__nv_rsqrtf.exit
  %364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %351), !dbg !46
  br label %__nv_rsqrtf.exit23, !dbg !46

__nv_rsqrtf.exit23:                               ; preds = %361, %363
  %.0.i22 = phi float [ %362, %361 ], [ %364, %363 ], !dbg !46
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !46
  %.not.i45 = icmp eq i32 %372, 0, !dbg !46
  br i1 %.not.i45, label %375, label %373, !dbg !46

373:                                              ; preds = %__nv_rsqrtf.exit23
  %374 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %352), !dbg !46
  br label %__nv_rsqrtf.exit47, !dbg !46

375:                                              ; preds = %__nv_rsqrtf.exit23
  %376 = tail call float @llvm.nvvm.rsqrt.approx.f(float %352), !dbg !46
  br label %__nv_rsqrtf.exit47, !dbg !46

__nv_rsqrtf.exit47:                               ; preds = %375, %373
  %.0.i46 = phi float [ %374, %373 ], [ %376, %375 ], !dbg !46
  %377 = insertelement <2 x float> poison, float %.0.i46, i64 0, !dbg !47
  %378 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %379 = insertelement <2 x float> poison, float %.0.i22, i64 0, !dbg !47
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %381 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !48
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %381, i1 true) #6, !dbg !49
  %383 = or disjoint i64 %52, %53, !dbg !50
  %384 = or disjoint i64 %52, %54, !dbg !50
  %385 = getelementptr bfloat, ptr addrspace(1) %2, i64 %383, !dbg !51
  %386 = getelementptr bfloat, ptr addrspace(1) %2, i64 %384, !dbg !51
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %385, i1 %12) #6, !dbg !52
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %386, i1 %12) #6, !dbg !52
  %389 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !52
  %390 = bitcast i32 %389 to <2 x bfloat>, !dbg !52
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !52
  %392 = bitcast i32 %391 to <2 x bfloat>, !dbg !52
  %393 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !52
  %394 = bitcast i32 %393 to <2 x bfloat>, !dbg !52
  %395 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !52
  %396 = bitcast i32 %395 to <2 x bfloat>, !dbg !52
  %397 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !52
  %398 = bitcast i32 %397 to <2 x bfloat>, !dbg !52
  %399 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !52
  %400 = bitcast i32 %399 to <2 x bfloat>, !dbg !52
  %401 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !52
  %402 = bitcast i32 %401 to <2 x bfloat>, !dbg !52
  %403 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !52
  %404 = bitcast i32 %403 to <2 x bfloat>, !dbg !52
  %405 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !49
  %406 = bitcast i32 %405 to <2 x bfloat>, !dbg !49
  %407 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !49
  %408 = bitcast i32 %407 to <2 x bfloat>, !dbg !49
  %409 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !49
  %410 = bitcast i32 %409 to <2 x bfloat>, !dbg !49
  %411 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !49
  %412 = bitcast i32 %411 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %413 = getelementptr bfloat, ptr addrspace(1) %50, i64 %52, !dbg !54
  %414 = getelementptr bfloat, ptr addrspace(1) %51, i64 %52, !dbg !54
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %413, i1 %12) #6, !dbg !55
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !55
  %417 = bitcast i32 %416 to <2 x bfloat>, !dbg !55
  %418 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !55
  %419 = bitcast i32 %418 to <2 x bfloat>, !dbg !55
  %420 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !55
  %421 = bitcast i32 %420 to <2 x bfloat>, !dbg !55
  %422 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !55
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !55
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %414, i1 %12) #6, !dbg !55
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !55
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !55
  %427 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !55
  %428 = bitcast i32 %427 to <2 x bfloat>, !dbg !55
  %429 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !55
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !55
  %431 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !55
  %432 = bitcast i32 %431 to <2 x bfloat>, !dbg !55
  %433 = getelementptr bfloat, ptr addrspace(1) %4, i64 %383, !dbg !56
  %434 = getelementptr bfloat, ptr addrspace(1) %4, i64 %384, !dbg !56
  %435 = fpext <2 x bfloat> %404 to <2 x float>, !dbg !57
  %436 = fpext <2 x bfloat> %412 to <2 x float>, !dbg !58
  %437 = fpext <2 x bfloat> %417 to <2 x float>, !dbg !59
  %438 = fadd <2 x float> %435, %437, !dbg !60
  %439 = fmul <2 x float> %380, %438, !dbg !47
  %440 = fmul <2 x float> %439, %436, !dbg !61
  %441 = fptrunc <2 x float> %440 to <2 x bfloat>, !dbg !62
  %442 = fpext <2 x bfloat> %402 to <2 x float>, !dbg !57
  %443 = fpext <2 x bfloat> %410 to <2 x float>, !dbg !58
  %444 = fpext <2 x bfloat> %419 to <2 x float>, !dbg !59
  %445 = fadd <2 x float> %442, %444, !dbg !60
  %446 = fmul <2 x float> %380, %445, !dbg !47
  %447 = fmul <2 x float> %446, %443, !dbg !61
  %448 = fptrunc <2 x float> %447 to <2 x bfloat>, !dbg !62
  %449 = fpext <2 x bfloat> %400 to <2 x float>, !dbg !57
  %450 = fpext <2 x bfloat> %408 to <2 x float>, !dbg !58
  %451 = fpext <2 x bfloat> %421 to <2 x float>, !dbg !59
  %452 = fadd <2 x float> %449, %451, !dbg !60
  %453 = fmul <2 x float> %380, %452, !dbg !47
  %454 = fmul <2 x float> %453, %450, !dbg !61
  %455 = fptrunc <2 x float> %454 to <2 x bfloat>, !dbg !62
  %456 = fpext <2 x bfloat> %398 to <2 x float>, !dbg !57
  %457 = fpext <2 x bfloat> %406 to <2 x float>, !dbg !58
  %458 = fpext <2 x bfloat> %423 to <2 x float>, !dbg !59
  %459 = fadd <2 x float> %456, %458, !dbg !60
  %460 = fmul <2 x float> %380, %459, !dbg !47
  %461 = fmul <2 x float> %460, %457, !dbg !61
  %462 = fptrunc <2 x float> %461 to <2 x bfloat>, !dbg !62
  %463 = fpext <2 x bfloat> %396 to <2 x float>, !dbg !57
  %464 = fpext <2 x bfloat> %426 to <2 x float>, !dbg !59
  %465 = fadd <2 x float> %463, %464, !dbg !60
  %466 = fmul <2 x float> %378, %465, !dbg !47
  %467 = fmul <2 x float> %466, %436, !dbg !61
  %468 = fptrunc <2 x float> %467 to <2 x bfloat>, !dbg !62
  %469 = fpext <2 x bfloat> %394 to <2 x float>, !dbg !57
  %470 = fpext <2 x bfloat> %428 to <2 x float>, !dbg !59
  %471 = fadd <2 x float> %469, %470, !dbg !60
  %472 = fmul <2 x float> %378, %471, !dbg !47
  %473 = fmul <2 x float> %472, %443, !dbg !61
  %474 = fptrunc <2 x float> %473 to <2 x bfloat>, !dbg !62
  %475 = fpext <2 x bfloat> %392 to <2 x float>, !dbg !57
  %476 = fpext <2 x bfloat> %430 to <2 x float>, !dbg !59
  %477 = fadd <2 x float> %475, %476, !dbg !60
  %478 = fmul <2 x float> %378, %477, !dbg !47
  %479 = fmul <2 x float> %478, %450, !dbg !61
  %480 = fptrunc <2 x float> %479 to <2 x bfloat>, !dbg !62
  %481 = fpext <2 x bfloat> %390 to <2 x float>, !dbg !57
  %482 = fpext <2 x bfloat> %432 to <2 x float>, !dbg !59
  %483 = fadd <2 x float> %481, %482, !dbg !60
  %484 = fmul <2 x float> %378, %483, !dbg !47
  %485 = fmul <2 x float> %484, %457, !dbg !61
  %486 = fptrunc <2 x float> %485 to <2 x bfloat>, !dbg !62
  %487 = bitcast <2 x bfloat> %441 to i32, !dbg !62
  %488 = bitcast <2 x bfloat> %448 to i32, !dbg !62
  %489 = bitcast <2 x bfloat> %455 to i32, !dbg !62
  %490 = bitcast <2 x bfloat> %462 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %487, i32 %488, i32 %489, i32 %490, ptr addrspace(1) %433, i1 %12) #6, !dbg !62
  %491 = bitcast <2 x bfloat> %468 to i32, !dbg !62
  %492 = bitcast <2 x bfloat> %474 to i32, !dbg !62
  %493 = bitcast <2 x bfloat> %480 to i32, !dbg !62
  %494 = bitcast <2 x bfloat> %486 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %491, i32 %492, i32 %493, i32 %494, ptr addrspace(1) %434, i1 %12) #6, !dbg !62
  %495 = or disjoint i64 %52, 2048, !dbg !63
  %496 = getelementptr bfloat, ptr addrspace(1) %3, i64 %495, !dbg !48
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %496, i1 true) #6, !dbg !49
  %498 = or disjoint i64 %495, %53, !dbg !50
  %499 = or disjoint i64 %495, %54, !dbg !50
  %500 = getelementptr bfloat, ptr addrspace(1) %2, i64 %498, !dbg !51
  %501 = getelementptr bfloat, ptr addrspace(1) %2, i64 %499, !dbg !51
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %500, i1 %12) #6, !dbg !52
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %501, i1 %12) #6, !dbg !52
  %504 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !52
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !52
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !52
  %507 = bitcast i32 %506 to <2 x bfloat>, !dbg !52
  %508 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !52
  %509 = bitcast i32 %508 to <2 x bfloat>, !dbg !52
  %510 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !52
  %511 = bitcast i32 %510 to <2 x bfloat>, !dbg !52
  %512 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !52
  %513 = bitcast i32 %512 to <2 x bfloat>, !dbg !52
  %514 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !52
  %515 = bitcast i32 %514 to <2 x bfloat>, !dbg !52
  %516 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !52
  %517 = bitcast i32 %516 to <2 x bfloat>, !dbg !52
  %518 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !52
  %519 = bitcast i32 %518 to <2 x bfloat>, !dbg !52
  %520 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !49
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !49
  %522 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !49
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !49
  %524 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !49
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !49
  %526 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !49
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %528 = getelementptr bfloat, ptr addrspace(1) %50, i64 %495, !dbg !54
  %529 = getelementptr bfloat, ptr addrspace(1) %51, i64 %495, !dbg !54
  %530 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %528, i1 %12) #6, !dbg !55
  %531 = extractvalue { i32, i32, i32, i32 } %530, 0, !dbg !55
  %532 = bitcast i32 %531 to <2 x bfloat>, !dbg !55
  %533 = extractvalue { i32, i32, i32, i32 } %530, 1, !dbg !55
  %534 = bitcast i32 %533 to <2 x bfloat>, !dbg !55
  %535 = extractvalue { i32, i32, i32, i32 } %530, 2, !dbg !55
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !55
  %537 = extractvalue { i32, i32, i32, i32 } %530, 3, !dbg !55
  %538 = bitcast i32 %537 to <2 x bfloat>, !dbg !55
  %539 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %529, i1 %12) #6, !dbg !55
  %540 = extractvalue { i32, i32, i32, i32 } %539, 0, !dbg !55
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !55
  %542 = extractvalue { i32, i32, i32, i32 } %539, 1, !dbg !55
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !55
  %544 = extractvalue { i32, i32, i32, i32 } %539, 2, !dbg !55
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !55
  %546 = extractvalue { i32, i32, i32, i32 } %539, 3, !dbg !55
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !55
  %548 = getelementptr bfloat, ptr addrspace(1) %4, i64 %498, !dbg !56
  %549 = getelementptr bfloat, ptr addrspace(1) %4, i64 %499, !dbg !56
  %550 = fpext <2 x bfloat> %519 to <2 x float>, !dbg !57
  %551 = fpext <2 x bfloat> %527 to <2 x float>, !dbg !58
  %552 = fpext <2 x bfloat> %532 to <2 x float>, !dbg !59
  %553 = fadd <2 x float> %550, %552, !dbg !60
  %554 = fmul <2 x float> %380, %553, !dbg !47
  %555 = fmul <2 x float> %554, %551, !dbg !61
  %556 = fptrunc <2 x float> %555 to <2 x bfloat>, !dbg !62
  %557 = fpext <2 x bfloat> %517 to <2 x float>, !dbg !57
  %558 = fpext <2 x bfloat> %525 to <2 x float>, !dbg !58
  %559 = fpext <2 x bfloat> %534 to <2 x float>, !dbg !59
  %560 = fadd <2 x float> %557, %559, !dbg !60
  %561 = fmul <2 x float> %380, %560, !dbg !47
  %562 = fmul <2 x float> %561, %558, !dbg !61
  %563 = fptrunc <2 x float> %562 to <2 x bfloat>, !dbg !62
  %564 = fpext <2 x bfloat> %515 to <2 x float>, !dbg !57
  %565 = fpext <2 x bfloat> %523 to <2 x float>, !dbg !58
  %566 = fpext <2 x bfloat> %536 to <2 x float>, !dbg !59
  %567 = fadd <2 x float> %564, %566, !dbg !60
  %568 = fmul <2 x float> %380, %567, !dbg !47
  %569 = fmul <2 x float> %568, %565, !dbg !61
  %570 = fptrunc <2 x float> %569 to <2 x bfloat>, !dbg !62
  %571 = fpext <2 x bfloat> %513 to <2 x float>, !dbg !57
  %572 = fpext <2 x bfloat> %521 to <2 x float>, !dbg !58
  %573 = fpext <2 x bfloat> %538 to <2 x float>, !dbg !59
  %574 = fadd <2 x float> %571, %573, !dbg !60
  %575 = fmul <2 x float> %380, %574, !dbg !47
  %576 = fmul <2 x float> %575, %572, !dbg !61
  %577 = fptrunc <2 x float> %576 to <2 x bfloat>, !dbg !62
  %578 = fpext <2 x bfloat> %511 to <2 x float>, !dbg !57
  %579 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !59
  %580 = fadd <2 x float> %578, %579, !dbg !60
  %581 = fmul <2 x float> %378, %580, !dbg !47
  %582 = fmul <2 x float> %581, %551, !dbg !61
  %583 = fptrunc <2 x float> %582 to <2 x bfloat>, !dbg !62
  %584 = fpext <2 x bfloat> %509 to <2 x float>, !dbg !57
  %585 = fpext <2 x bfloat> %543 to <2 x float>, !dbg !59
  %586 = fadd <2 x float> %584, %585, !dbg !60
  %587 = fmul <2 x float> %378, %586, !dbg !47
  %588 = fmul <2 x float> %587, %558, !dbg !61
  %589 = fptrunc <2 x float> %588 to <2 x bfloat>, !dbg !62
  %590 = fpext <2 x bfloat> %507 to <2 x float>, !dbg !57
  %591 = fpext <2 x bfloat> %545 to <2 x float>, !dbg !59
  %592 = fadd <2 x float> %590, %591, !dbg !60
  %593 = fmul <2 x float> %378, %592, !dbg !47
  %594 = fmul <2 x float> %593, %565, !dbg !61
  %595 = fptrunc <2 x float> %594 to <2 x bfloat>, !dbg !62
  %596 = fpext <2 x bfloat> %505 to <2 x float>, !dbg !57
  %597 = fpext <2 x bfloat> %547 to <2 x float>, !dbg !59
  %598 = fadd <2 x float> %596, %597, !dbg !60
  %599 = fmul <2 x float> %378, %598, !dbg !47
  %600 = fmul <2 x float> %599, %572, !dbg !61
  %601 = fptrunc <2 x float> %600 to <2 x bfloat>, !dbg !62
  %602 = bitcast <2 x bfloat> %556 to i32, !dbg !62
  %603 = bitcast <2 x bfloat> %563 to i32, !dbg !62
  %604 = bitcast <2 x bfloat> %570 to i32, !dbg !62
  %605 = bitcast <2 x bfloat> %577 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %603, i32 %604, i32 %605, ptr addrspace(1) %548, i1 %12) #6, !dbg !62
  %606 = bitcast <2 x bfloat> %583 to i32, !dbg !62
  %607 = bitcast <2 x bfloat> %589 to i32, !dbg !62
  %608 = bitcast <2 x bfloat> %595 to i32, !dbg !62
  %609 = bitcast <2 x bfloat> %601 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %606, i32 %607, i32 %608, i32 %609, ptr addrspace(1) %549, i1 %12) #6, !dbg !62
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqtn5lmbaida7dwfjh6w2odpkgpul6mmghucyy4xrgqwstdwrkr.py", directory: "/tmp/torchinductor_root/qq")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_5", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 23, scope: !10)
!14 = !DILocation(line: 25, column: 21, scope: !10)
!15 = !DILocation(line: 26, column: 37, scope: !10)
!16 = !DILocation(line: 29, column: 30, scope: !10)
!17 = !DILocation(line: 29, column: 35, scope: !10)
!18 = !DILocation(line: 37, column: 46, scope: !10)
!19 = !DILocation(line: 40, column: 22, scope: !10)
!20 = !DILocation(line: 43, column: 46, scope: !10)
!21 = !DILocation(line: 31, column: 40, scope: !10)
!22 = !DILocation(line: 49, column: 50, scope: !10)
!23 = !DILocation(line: 39, column: 22, scope: !10)
!24 = !DILocation(line: 41, column: 36, scope: !10)
!25 = !DILocation(line: 42, column: 41, scope: !10)
!26 = !DILocation(line: 37, column: 41, scope: !10)
!27 = !DILocation(line: 37, column: 34, scope: !10)
!28 = !DILocation(line: 37, column: 51, scope: !10)
!29 = !DILocation(line: 42, column: 68, scope: !10)
!30 = !DILocation(line: 43, column: 34, scope: !10)
!31 = !DILocation(line: 43, column: 53, scope: !10)
!32 = !DILocation(line: 32, column: 31, scope: !10)
!33 = !DILocation(line: 37, column: 112, scope: !10)
!34 = !DILocation(line: 43, column: 114, scope: !10)
!35 = !DILocation(line: 44, column: 22, scope: !10)
!36 = !DILocation(line: 46, column: 23, scope: !10)
!37 = !DILocation(line: 48, column: 25, scope: !10)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !10, file: !40, discriminator: 0)
!42 = !DILocation(line: 50, column: 27, scope: !10)
!43 = !DILocation(line: 286, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 68, column: 25, scope: !10)
!45 = !DILocation(line: 70, column: 24, scope: !10)
!46 = !DILocation(line: 71, column: 32, scope: !10)
!47 = !DILocation(line: 72, column: 24, scope: !10)
!48 = !DILocation(line: 57, column: 35, scope: !10)
!49 = !DILocation(line: 57, column: 42, scope: !10)
!50 = !DILocation(line: 58, column: 42, scope: !10)
!51 = !DILocation(line: 58, column: 35, scope: !10)
!52 = !DILocation(line: 58, column: 52, scope: !10)
!53 = !DILocation(line: 63, column: 70, scope: !10)
!54 = !DILocation(line: 64, column: 35, scope: !10)
!55 = !DILocation(line: 64, column: 55, scope: !10)
!56 = !DILocation(line: 75, column: 29, scope: !10)
!57 = !DILocation(line: 58, column: 114, scope: !10)
!58 = !DILocation(line: 57, column: 95, scope: !10)
!59 = !DILocation(line: 64, column: 117, scope: !10)
!60 = !DILocation(line: 65, column: 24, scope: !10)
!61 = !DILocation(line: 74, column: 24, scope: !10)
!62 = !DILocation(line: 75, column: 53, scope: !10)
!63 = !DILocation(line: 52, column: 31, scope: !10)
!64 = !DILocation(line: 51, column: 4, scope: !10)
