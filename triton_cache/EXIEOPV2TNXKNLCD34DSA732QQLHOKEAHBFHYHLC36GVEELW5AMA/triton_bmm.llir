; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 8, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 8, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = lshr i32 %15, 3, !dbg !19
  %22 = and i32 %21, 15, !dbg !19
  %23 = or disjoint i32 %22, 16, !dbg !19
  %24 = shl i32 %15, 3, !dbg !19
  %25 = and i32 %24, 8, !dbg !19
  %26 = and i32 %15, 2, !dbg !19
  %27 = shl nuw nsw i32 %26, 3, !dbg !19
  %28 = or disjoint i32 %25, %27, !dbg !19
  %29 = shl nuw nsw i32 %16, 3, !dbg !19
  %30 = or disjoint i32 %28, %29, !dbg !19
  %31 = or disjoint i32 %14, %20, !dbg !20
  %32 = or disjoint i32 %31, 32, !dbg !20
  %33 = shl nsw i32 %13, 6, !dbg !21
  %34 = or disjoint i32 %33, %30, !dbg !22
  %35 = srem i32 %31, 512, !dbg !23
  %36 = srem i32 %32, 512, !dbg !23
  %37 = srem i32 %34, 64, !dbg !24
  %38 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %39 = shl nsw i32 %35, 9, !dbg !26
  %40 = shl nsw i32 %36, 9, !dbg !26
  %41 = shl i32 %38, 18, !dbg !27
  %42 = or disjoint i32 %28, %41, !dbg !28
  %43 = add i32 %42, %39, !dbg !29
  %44 = add i32 %42, %40, !dbg !29
  %45 = sext i32 %43 to i64, !dbg !30
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = sext i32 %44 to i64, !dbg !30
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = shl nuw nsw i32 %22, 12, !dbg !31
  %50 = shl nuw nsw i32 %23, 12, !dbg !31
  %51 = shl i32 %38, 6, !dbg !32
  %52 = add i32 %37, %51, !dbg !33
  %53 = add i32 %52, %49, !dbg !34
  %54 = add i32 %52, %50, !dbg !34
  %55 = sext i32 %53 to i64, !dbg !35
  %56 = getelementptr bfloat, ptr addrspace(1) %1, i64 %55, !dbg !35
  %57 = sext i32 %54 to i64, !dbg !35
  %58 = getelementptr bfloat, ptr addrspace(1) %1, i64 %57, !dbg !35
  %and.ra = and i32 %15, 24, !dbg !36
  %59 = xor i32 %28, %and.ra, !dbg !36
  %60 = shl nuw nsw i32 %20, 5, !dbg !36
  %61 = or disjoint i32 %60, %59, !dbg !36
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %61, !dbg !36
  %63 = or disjoint i32 %61, 1024, !dbg !36
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %46, i32 16) #1, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %64, ptr addrspace(1) %48, i32 16) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %and.ra145 = and i32 %15, 56, !dbg !37
  %65 = xor i32 %30, %and.ra145, !dbg !37
  %66 = shl nuw nsw i32 %22, 6, !dbg !37
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %65, !dbg !37
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %67, i32 %66, !dbg !37
  %69 = or disjoint i32 %66, 1024, !dbg !37
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %67, i32 %69, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %56, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %70, ptr addrspace(1) %58, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %71 = shl nuw nsw i32 %26, 2
  %72 = shl nuw nsw i32 %16, 2
  %73 = or disjoint i32 %71, %72
  %74 = and i32 %15, 15
  %75 = lshr i32 %15, 1
  %76 = and i32 %75, 8
  %77 = xor i32 %73, %76
  %78 = or disjoint i32 %19, %74
  %79 = shl nuw nsw i32 %78, 5
  %80 = or disjoint i32 %77, %79
  %81 = or disjoint i32 %71, 16
  %82 = or disjoint i32 %76, %72
  %83 = xor i32 %82, %81
  %84 = or disjoint i32 %83, %79
  %85 = or disjoint i32 %79, 1024
  %86 = or disjoint i32 %85, %77
  %87 = or disjoint i32 %83, %85
  %88 = xor i32 %30, %18
  %89 = shl i32 %15, 6
  %90 = and i32 %89, 1984
  %91 = or disjoint i32 %88, %90
  %92 = or disjoint i32 %25, 16
  %93 = xor i32 %92, %27
  %94 = or disjoint i32 %93, %29
  %95 = xor i32 %94, %18
  %96 = or disjoint i32 %95, %90
  %97 = or disjoint i32 %28, 32
  %98 = or disjoint i32 %18, %29
  %99 = xor i32 %98, %97
  %100 = or disjoint i32 %99, %90
  %101 = or disjoint i32 %25, 48
  %102 = or disjoint i32 %98, %27
  %103 = xor i32 %102, %101
  %104 = or disjoint i32 %103, %90
  br label %105, !dbg !38

105:                                              ; preds = %4, %105
  %106 = phi i32 [ -1, %4 ], [ %143, %105 ]
  %.pn49149 = phi ptr addrspace(1) [ %58, %4 ], [ %286, %105 ]
  %.pn65148 = phi ptr addrspace(1) [ %56, %4 ], [ %285, %105 ]
  %.pn17147 = phi ptr addrspace(1) [ %48, %4 ], [ %284, %105 ]
  %.pn33146 = phi ptr addrspace(1) [ %46, %4 ], [ %283, %105 ]
  %107 = phi float [ 0.000000e+00, %4 ], [ %244, %105 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %245, %105 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %246, %105 ]
  %110 = phi float [ 0.000000e+00, %4 ], [ %247, %105 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %249, %105 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %250, %105 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %251, %105 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %252, %105 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %254, %105 ]
  %116 = phi float [ 0.000000e+00, %4 ], [ %255, %105 ]
  %117 = phi float [ 0.000000e+00, %4 ], [ %256, %105 ]
  %118 = phi float [ 0.000000e+00, %4 ], [ %257, %105 ]
  %119 = phi float [ 0.000000e+00, %4 ], [ %259, %105 ]
  %120 = phi float [ 0.000000e+00, %4 ], [ %260, %105 ]
  %121 = phi float [ 0.000000e+00, %4 ], [ %261, %105 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %262, %105 ]
  %123 = phi float [ 0.000000e+00, %4 ], [ %264, %105 ]
  %124 = phi float [ 0.000000e+00, %4 ], [ %265, %105 ]
  %125 = phi float [ 0.000000e+00, %4 ], [ %266, %105 ]
  %126 = phi float [ 0.000000e+00, %4 ], [ %267, %105 ]
  %127 = phi float [ 0.000000e+00, %4 ], [ %269, %105 ]
  %128 = phi float [ 0.000000e+00, %4 ], [ %270, %105 ]
  %129 = phi float [ 0.000000e+00, %4 ], [ %271, %105 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %272, %105 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %274, %105 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %275, %105 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %276, %105 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %277, %105 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %279, %105 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %280, %105 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %281, %105 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %282, %105 ]
  %139 = phi i32 [ 0, %4 ], [ %288, %105 ]
  %140 = icmp samesign ult i32 %139, 480, !dbg !38
  %141 = add i32 %106, 1, !dbg !38
  %142 = icmp ugt i32 %106, 2147483646, !dbg !38
  %143 = select i1 %142, i32 %141, i32 0, !dbg !38
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %144 = shl i32 %143, 11, !dbg !36
  %145 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %144, !dbg !36
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %145, i32 %80, !dbg !36
  %147 = ptrtoint ptr addrspace(3) %146 to i32, !dbg !36
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %147) #1, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !36
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !36
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !36
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %145, i32 %84, !dbg !36
  %154 = ptrtoint ptr addrspace(3) %153 to i32, !dbg !36
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %154) #1, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !36
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %145, i32 %86, !dbg !36
  %161 = ptrtoint ptr addrspace(3) %160 to i32, !dbg !36
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %161) #1, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !36
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %145, i32 %87, !dbg !36
  %168 = ptrtoint ptr addrspace(3) %167 to i32, !dbg !36
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %168) #1, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !36
  %174 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %144, !dbg !37
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %91, !dbg !37
  %176 = ptrtoint ptr addrspace(3) %175 to i32, !dbg !37
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %176) #1, !dbg !37
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !37
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %96, !dbg !37
  %183 = ptrtoint ptr addrspace(3) %182 to i32, !dbg !37
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %183) #1, !dbg !37
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !37
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !37
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %100, !dbg !37
  %190 = ptrtoint ptr addrspace(3) %189 to i32, !dbg !37
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %190) #1, !dbg !37
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !37
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !37
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !37
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !37
  %196 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %174, i32 %104, !dbg !37
  %197 = ptrtoint ptr addrspace(3) %196 to i32, !dbg !37
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %197) #1, !dbg !37
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !37
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !37
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !37
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !37
  %203 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %107, float %108, float %109, float %110, i32 %149, i32 %150, i32 %151, i32 %152, i32 %178, i32 %179) #1, !dbg !39
  %204 = extractvalue { float, float, float, float } %203, 0, !dbg !39
  %205 = extractvalue { float, float, float, float } %203, 1, !dbg !39
  %206 = extractvalue { float, float, float, float } %203, 2, !dbg !39
  %207 = extractvalue { float, float, float, float } %203, 3, !dbg !39
  %208 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %111, float %112, float %113, float %114, i32 %149, i32 %150, i32 %151, i32 %152, i32 %185, i32 %186) #1, !dbg !39
  %209 = extractvalue { float, float, float, float } %208, 0, !dbg !39
  %210 = extractvalue { float, float, float, float } %208, 1, !dbg !39
  %211 = extractvalue { float, float, float, float } %208, 2, !dbg !39
  %212 = extractvalue { float, float, float, float } %208, 3, !dbg !39
  %213 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %115, float %116, float %117, float %118, i32 %149, i32 %150, i32 %151, i32 %152, i32 %192, i32 %193) #1, !dbg !39
  %214 = extractvalue { float, float, float, float } %213, 0, !dbg !39
  %215 = extractvalue { float, float, float, float } %213, 1, !dbg !39
  %216 = extractvalue { float, float, float, float } %213, 2, !dbg !39
  %217 = extractvalue { float, float, float, float } %213, 3, !dbg !39
  %218 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %119, float %120, float %121, float %122, i32 %149, i32 %150, i32 %151, i32 %152, i32 %199, i32 %200) #1, !dbg !39
  %219 = extractvalue { float, float, float, float } %218, 0, !dbg !39
  %220 = extractvalue { float, float, float, float } %218, 1, !dbg !39
  %221 = extractvalue { float, float, float, float } %218, 2, !dbg !39
  %222 = extractvalue { float, float, float, float } %218, 3, !dbg !39
  %223 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %123, float %124, float %125, float %126, i32 %163, i32 %164, i32 %165, i32 %166, i32 %178, i32 %179) #1, !dbg !39
  %224 = extractvalue { float, float, float, float } %223, 0, !dbg !39
  %225 = extractvalue { float, float, float, float } %223, 1, !dbg !39
  %226 = extractvalue { float, float, float, float } %223, 2, !dbg !39
  %227 = extractvalue { float, float, float, float } %223, 3, !dbg !39
  %228 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %127, float %128, float %129, float %130, i32 %163, i32 %164, i32 %165, i32 %166, i32 %185, i32 %186) #1, !dbg !39
  %229 = extractvalue { float, float, float, float } %228, 0, !dbg !39
  %230 = extractvalue { float, float, float, float } %228, 1, !dbg !39
  %231 = extractvalue { float, float, float, float } %228, 2, !dbg !39
  %232 = extractvalue { float, float, float, float } %228, 3, !dbg !39
  %233 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %131, float %132, float %133, float %134, i32 %163, i32 %164, i32 %165, i32 %166, i32 %192, i32 %193) #1, !dbg !39
  %234 = extractvalue { float, float, float, float } %233, 0, !dbg !39
  %235 = extractvalue { float, float, float, float } %233, 1, !dbg !39
  %236 = extractvalue { float, float, float, float } %233, 2, !dbg !39
  %237 = extractvalue { float, float, float, float } %233, 3, !dbg !39
  %238 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %135, float %136, float %137, float %138, i32 %163, i32 %164, i32 %165, i32 %166, i32 %199, i32 %200) #1, !dbg !39
  %239 = extractvalue { float, float, float, float } %238, 0, !dbg !39
  %240 = extractvalue { float, float, float, float } %238, 1, !dbg !39
  %241 = extractvalue { float, float, float, float } %238, 2, !dbg !39
  %242 = extractvalue { float, float, float, float } %238, 3, !dbg !39
  %243 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %204, float %205, float %206, float %207, i32 %156, i32 %157, i32 %158, i32 %159, i32 %180, i32 %181) #1, !dbg !39
  %244 = extractvalue { float, float, float, float } %243, 0, !dbg !39
  %245 = extractvalue { float, float, float, float } %243, 1, !dbg !39
  %246 = extractvalue { float, float, float, float } %243, 2, !dbg !39
  %247 = extractvalue { float, float, float, float } %243, 3, !dbg !39
  %248 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %209, float %210, float %211, float %212, i32 %156, i32 %157, i32 %158, i32 %159, i32 %187, i32 %188) #1, !dbg !39
  %249 = extractvalue { float, float, float, float } %248, 0, !dbg !39
  %250 = extractvalue { float, float, float, float } %248, 1, !dbg !39
  %251 = extractvalue { float, float, float, float } %248, 2, !dbg !39
  %252 = extractvalue { float, float, float, float } %248, 3, !dbg !39
  %253 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %214, float %215, float %216, float %217, i32 %156, i32 %157, i32 %158, i32 %159, i32 %194, i32 %195) #1, !dbg !39
  %254 = extractvalue { float, float, float, float } %253, 0, !dbg !39
  %255 = extractvalue { float, float, float, float } %253, 1, !dbg !39
  %256 = extractvalue { float, float, float, float } %253, 2, !dbg !39
  %257 = extractvalue { float, float, float, float } %253, 3, !dbg !39
  %258 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %219, float %220, float %221, float %222, i32 %156, i32 %157, i32 %158, i32 %159, i32 %201, i32 %202) #1, !dbg !39
  %259 = extractvalue { float, float, float, float } %258, 0, !dbg !39
  %260 = extractvalue { float, float, float, float } %258, 1, !dbg !39
  %261 = extractvalue { float, float, float, float } %258, 2, !dbg !39
  %262 = extractvalue { float, float, float, float } %258, 3, !dbg !39
  %263 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %224, float %225, float %226, float %227, i32 %170, i32 %171, i32 %172, i32 %173, i32 %180, i32 %181) #1, !dbg !39
  %264 = extractvalue { float, float, float, float } %263, 0, !dbg !39
  %265 = extractvalue { float, float, float, float } %263, 1, !dbg !39
  %266 = extractvalue { float, float, float, float } %263, 2, !dbg !39
  %267 = extractvalue { float, float, float, float } %263, 3, !dbg !39
  %268 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %229, float %230, float %231, float %232, i32 %170, i32 %171, i32 %172, i32 %173, i32 %187, i32 %188) #1, !dbg !39
  %269 = extractvalue { float, float, float, float } %268, 0, !dbg !39
  %270 = extractvalue { float, float, float, float } %268, 1, !dbg !39
  %271 = extractvalue { float, float, float, float } %268, 2, !dbg !39
  %272 = extractvalue { float, float, float, float } %268, 3, !dbg !39
  %273 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %234, float %235, float %236, float %237, i32 %170, i32 %171, i32 %172, i32 %173, i32 %194, i32 %195) #1, !dbg !39
  %274 = extractvalue { float, float, float, float } %273, 0, !dbg !39
  %275 = extractvalue { float, float, float, float } %273, 1, !dbg !39
  %276 = extractvalue { float, float, float, float } %273, 2, !dbg !39
  %277 = extractvalue { float, float, float, float } %273, 3, !dbg !39
  %278 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %239, float %240, float %241, float %242, i32 %170, i32 %171, i32 %172, i32 %173, i32 %201, i32 %202) #1, !dbg !39
  %279 = extractvalue { float, float, float, float } %278, 0, !dbg !39
  %280 = extractvalue { float, float, float, float } %278, 1, !dbg !39
  %281 = extractvalue { float, float, float, float } %278, 2, !dbg !39
  %282 = extractvalue { float, float, float, float } %278, 3, !dbg !39
  %283 = getelementptr i8, ptr addrspace(1) %.pn33146, i64 64, !dbg !40
  %284 = getelementptr i8, ptr addrspace(1) %.pn17147, i64 64, !dbg !40
  %285 = getelementptr i8, ptr addrspace(1) %.pn65148, i64 262144, !dbg !41
  %286 = getelementptr i8, ptr addrspace(1) %.pn49149, i64 262144, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %287 = select i1 %140, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %283, i32 %287) #1, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %64, ptr addrspace(1) %284, i32 %287) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %285, i32 %287) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %70, ptr addrspace(1) %286, i32 %287) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %288 = add nuw nsw i32 %139, 32, !dbg !38
  br i1 %140, label %105, label %289, !dbg !38

289:                                              ; preds = %105
  %290 = or disjoint i32 %14, %22, !dbg !19
  %291 = or disjoint i32 %290, 48, !dbg !20
  %292 = or disjoint i32 %290, 32, !dbg !20
  %293 = or disjoint i32 %14, %23, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %294 = icmp slt i32 %290, 512, !dbg !42
  %295 = icmp slt i32 %293, 512, !dbg !42
  %296 = icmp slt i32 %292, 512, !dbg !42
  %297 = icmp slt i32 %291, 512, !dbg !42
  %298 = icmp slt i32 %34, 64, !dbg !43
  %299 = and i1 %294, %298, !dbg !44
  %300 = and i1 %295, %298, !dbg !44
  %301 = and i1 %296, %298, !dbg !44
  %302 = and i1 %297, %298, !dbg !44
  %303 = shl i32 %290, 6, !dbg !45
  %304 = shl i32 %293, 6, !dbg !45
  %305 = shl i32 %292, 6, !dbg !45
  %306 = shl i32 %291, 6, !dbg !45
  %307 = shl i32 %38, 15, !dbg !46
  %308 = add i32 %34, %307, !dbg !47
  %309 = add i32 %308, %303, !dbg !48
  %310 = add i32 %308, %304, !dbg !48
  %311 = add i32 %305, %307, !dbg !47
  %312 = add i32 %311, %34, !dbg !48
  %313 = add i32 %306, %307, !dbg !47
  %314 = add i32 %313, %34, !dbg !48
  %315 = sext i32 %309 to i64, !dbg !49
  %316 = getelementptr bfloat, ptr addrspace(1) %2, i64 %315, !dbg !49
  %317 = sext i32 %310 to i64, !dbg !49
  %318 = getelementptr bfloat, ptr addrspace(1) %2, i64 %317, !dbg !49
  %319 = sext i32 %312 to i64, !dbg !49
  %320 = getelementptr bfloat, ptr addrspace(1) %2, i64 %319, !dbg !49
  %321 = sext i32 %314 to i64, !dbg !49
  %322 = getelementptr bfloat, ptr addrspace(1) %2, i64 %321, !dbg !49
  %323 = fptrunc float %244 to bfloat, !dbg !50
  %324 = fptrunc float %245 to bfloat, !dbg !50
  %325 = fptrunc float %246 to bfloat, !dbg !50
  %326 = fptrunc float %247 to bfloat, !dbg !50
  %327 = fptrunc float %249 to bfloat, !dbg !50
  %328 = fptrunc float %250 to bfloat, !dbg !50
  %329 = fptrunc float %251 to bfloat, !dbg !50
  %330 = fptrunc float %252 to bfloat, !dbg !50
  %331 = fptrunc float %254 to bfloat, !dbg !50
  %332 = fptrunc float %255 to bfloat, !dbg !50
  %333 = fptrunc float %256 to bfloat, !dbg !50
  %334 = fptrunc float %257 to bfloat, !dbg !50
  %335 = fptrunc float %259 to bfloat, !dbg !50
  %336 = fptrunc float %260 to bfloat, !dbg !50
  %337 = fptrunc float %261 to bfloat, !dbg !50
  %338 = fptrunc float %262 to bfloat, !dbg !50
  %339 = fptrunc float %264 to bfloat, !dbg !50
  %340 = fptrunc float %265 to bfloat, !dbg !50
  %341 = fptrunc float %266 to bfloat, !dbg !50
  %342 = fptrunc float %267 to bfloat, !dbg !50
  %343 = fptrunc float %269 to bfloat, !dbg !50
  %344 = fptrunc float %270 to bfloat, !dbg !50
  %345 = fptrunc float %271 to bfloat, !dbg !50
  %346 = fptrunc float %272 to bfloat, !dbg !50
  %347 = fptrunc float %274 to bfloat, !dbg !50
  %348 = fptrunc float %275 to bfloat, !dbg !50
  %349 = fptrunc float %276 to bfloat, !dbg !50
  %350 = fptrunc float %277 to bfloat, !dbg !50
  %351 = fptrunc float %279 to bfloat, !dbg !50
  %352 = fptrunc float %280 to bfloat, !dbg !50
  %353 = fptrunc float %281 to bfloat, !dbg !50
  %354 = fptrunc float %282 to bfloat, !dbg !50
  %355 = shl i32 %15, 1, !dbg !50
  %356 = and i32 %355, 6, !dbg !50
  %357 = shl i32 %15, 4, !dbg !50
  %358 = and i32 %357, 1472, !dbg !50
  %359 = or disjoint i32 %358, %356, !dbg !50
  %360 = or disjoint i32 %359, %18, !dbg !50
  %361 = and i32 %24, 960, !dbg !50
  %362 = or disjoint i32 %30, %361, !dbg !50
  %363 = lshr exact i32 %358, 2, !dbg !50
  %364 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %363, !dbg !50
  %365 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %364, i32 %360, !dbg !50
  %366 = bitcast bfloat %323 to i16, !dbg !50
  %367 = bitcast bfloat %324 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %365, i16 %366, i16 %367, i1 true) #1, !dbg !50
  %368 = or disjoint i32 %360, 512, !dbg !50
  %369 = lshr i32 %368, 3, !dbg !50
  %370 = and i32 %369, 248, !dbg !50
  %371 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %370, !dbg !50
  %372 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %371, i32 %368, !dbg !50
  %373 = bitcast bfloat %325 to i16, !dbg !50
  %374 = bitcast bfloat %326 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %372, i16 %373, i16 %374, i1 true) #1, !dbg !50
  %375 = or disjoint i32 %360, 16, !dbg !50
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %364, i32 %375, !dbg !50
  %377 = bitcast bfloat %327 to i16, !dbg !50
  %378 = bitcast bfloat %328 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %376, i16 %377, i16 %378, i1 true) #1, !dbg !50
  %379 = or disjoint i32 %360, 528, !dbg !50
  %380 = lshr i32 %379, 3, !dbg !50
  %381 = and i32 %380, 248, !dbg !50
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %381, !dbg !50
  %383 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %382, i32 %379, !dbg !50
  %384 = bitcast bfloat %329 to i16, !dbg !50
  %385 = bitcast bfloat %330 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %383, i16 %384, i16 %385, i1 true) #1, !dbg !50
  %386 = or disjoint i32 %360, 32, !dbg !50
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %364, i32 %386, !dbg !50
  %388 = bitcast bfloat %331 to i16, !dbg !50
  %389 = bitcast bfloat %332 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %387, i16 %388, i16 %389, i1 true) #1, !dbg !50
  %390 = or disjoint i32 %360, 544, !dbg !50
  %391 = lshr i32 %390, 3, !dbg !50
  %392 = and i32 %391, 248, !dbg !50
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %392, !dbg !50
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %393, i32 %390, !dbg !50
  %395 = bitcast bfloat %333 to i16, !dbg !50
  %396 = bitcast bfloat %334 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %394, i16 %395, i16 %396, i1 true) #1, !dbg !50
  %397 = or disjoint i32 %360, 48, !dbg !50
  %398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %364, i32 %397, !dbg !50
  %399 = bitcast bfloat %335 to i16, !dbg !50
  %400 = bitcast bfloat %336 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %398, i16 %399, i16 %400, i1 true) #1, !dbg !50
  %401 = or disjoint i32 %360, 560, !dbg !50
  %402 = lshr i32 %401, 3, !dbg !50
  %403 = and i32 %402, 248, !dbg !50
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %403, !dbg !50
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %404, i32 %401, !dbg !50
  %406 = bitcast bfloat %337 to i16, !dbg !50
  %407 = bitcast bfloat %338 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %405, i16 %406, i16 %407, i1 true) #1, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %408 = lshr exact i32 %361, 2, !dbg !50
  %409 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %408, !dbg !50
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %409, i32 %362, !dbg !50
  %411 = load <4 x i32>, ptr addrspace(3) %410, align 16, !dbg !50
  %412 = or disjoint i32 %362, 1024, !dbg !50
  %413 = lshr exact i32 %412, 3, !dbg !50
  %414 = and i32 %413, 536870904, !dbg !50
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %414, !dbg !50
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %415, i32 %412, !dbg !50
  %417 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %418 = bitcast bfloat %339 to i16, !dbg !50
  %419 = bitcast bfloat %340 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %365, i16 %418, i16 %419, i1 true) #1, !dbg !50
  %420 = bitcast bfloat %341 to i16, !dbg !50
  %421 = bitcast bfloat %342 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %372, i16 %420, i16 %421, i1 true) #1, !dbg !50
  %422 = bitcast bfloat %343 to i16, !dbg !50
  %423 = bitcast bfloat %344 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %376, i16 %422, i16 %423, i1 true) #1, !dbg !50
  %424 = bitcast bfloat %345 to i16, !dbg !50
  %425 = bitcast bfloat %346 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %383, i16 %424, i16 %425, i1 true) #1, !dbg !50
  %426 = bitcast bfloat %347 to i16, !dbg !50
  %427 = bitcast bfloat %348 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %387, i16 %426, i16 %427, i1 true) #1, !dbg !50
  %428 = bitcast bfloat %349 to i16, !dbg !50
  %429 = bitcast bfloat %350 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %394, i16 %428, i16 %429, i1 true) #1, !dbg !50
  %430 = bitcast bfloat %351 to i16, !dbg !50
  %431 = bitcast bfloat %352 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %398, i16 %430, i16 %431, i1 true) #1, !dbg !50
  %432 = bitcast bfloat %353 to i16, !dbg !50
  %433 = bitcast bfloat %354 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %405, i16 %432, i16 %433, i1 true) #1, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %434 = load <4 x i32>, ptr addrspace(3) %410, align 16, !dbg !50
  %435 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !50
  %.extract = extractelement <4 x i32> %411, i64 0, !dbg !50
  %.extract115 = extractelement <4 x i32> %411, i64 1, !dbg !50
  %.extract117 = extractelement <4 x i32> %411, i64 2, !dbg !50
  %.extract119 = extractelement <4 x i32> %411, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract115, i32 %.extract117, i32 %.extract119, ptr addrspace(1) %316, i1 %299) #1, !dbg !50
  %.extract121 = extractelement <4 x i32> %417, i64 0, !dbg !50
  %.extract123 = extractelement <4 x i32> %417, i64 1, !dbg !50
  %.extract125 = extractelement <4 x i32> %417, i64 2, !dbg !50
  %.extract127 = extractelement <4 x i32> %417, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract121, i32 %.extract123, i32 %.extract125, i32 %.extract127, ptr addrspace(1) %318, i1 %300) #1, !dbg !50
  %.extract129 = extractelement <4 x i32> %434, i64 0, !dbg !50
  %.extract131 = extractelement <4 x i32> %434, i64 1, !dbg !50
  %.extract133 = extractelement <4 x i32> %434, i64 2, !dbg !50
  %.extract135 = extractelement <4 x i32> %434, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract129, i32 %.extract131, i32 %.extract133, i32 %.extract135, ptr addrspace(1) %320, i1 %301) #1, !dbg !50
  %.extract137 = extractelement <4 x i32> %435, i64 0, !dbg !50
  %.extract139 = extractelement <4 x i32> %435, i64 1, !dbg !50
  %.extract141 = extractelement <4 x i32> %435, i64 2, !dbg !50
  %.extract143 = extractelement <4 x i32> %435, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract137, i32 %.extract139, i32 %.extract141, i32 %.extract143, ptr addrspace(1) %322, i1 %302) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpbqtabm66yco6p4jrnqfigogizsvycslglto6yexfd2j6c7uui.py", directory: "/tmp/torchinductor_root/tp")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 55, column: 52, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 27, scope: !6)
!32 = !DILocation(line: 67, column: 72, scope: !6)
!33 = !DILocation(line: 67, column: 39, scope: !6)
!34 = !DILocation(line: 67, column: 66, scope: !6)
!35 = !DILocation(line: 67, column: 13, scope: !6)
!36 = !DILocation(line: 72, column: 24, scope: !6)
!37 = !DILocation(line: 73, column: 24, scope: !6)
!38 = !DILocation(line: 70, column: 25, scope: !6)
!39 = !DILocation(line: 77, column: 25, scope: !6)
!40 = !DILocation(line: 78, column: 13, scope: !6)
!41 = !DILocation(line: 79, column: 13, scope: !6)
!42 = !DILocation(line: 87, column: 20, scope: !6)
!43 = !DILocation(line: 87, column: 34, scope: !6)
!44 = !DILocation(line: 87, column: 26, scope: !6)
!45 = !DILocation(line: 90, column: 24, scope: !6)
!46 = !DILocation(line: 90, column: 38, scope: !6)
!47 = !DILocation(line: 90, column: 21, scope: !6)
!48 = !DILocation(line: 90, column: 32, scope: !6)
!49 = !DILocation(line: 91, column: 25, scope: !6)
!50 = !DILocation(line: 91, column: 67, scope: !6)
!51 = !DILocation(line: 91, column: 4, scope: !6)
