; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = shl i32 %20, 1, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 1, !dbg !11
  %24 = or disjoint i32 %21, 1, !dbg !12
  %25 = or disjoint i32 %21, %23, !dbg !12
  %26 = icmp slt i32 %21, 4112, !dbg !13
  %27 = icmp slt i32 %25, 4112, !dbg !13
  %28 = shl i32 %22, 4, !dbg !14
  %29 = and i32 %28, 2032, !dbg !14
  %30 = or disjoint i32 %29, 8, !dbg !14
  %31 = shl i32 %22, 3, !dbg !14
  %32 = and i32 %31, 1016, !dbg !14
  %33 = or disjoint i32 %32, 1024, !dbg !14
  %34 = mul i32 %20, 6144, !dbg !15
  %35 = mul i32 %24, 3072, !dbg !15
  %36 = zext nneg i32 %29 to i64, !dbg !16
  br label %37, !dbg !16

37:                                               ; preds = %19, %._crit_edge
  %38 = phi i1 [ true, %19 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %19 ], [ 2048, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %19 ], [ %606, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %19 ], [ %607, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %19 ], [ %608, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %19 ], [ %609, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %19 ], [ %610, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %19 ], [ %611, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %19 ], [ %612, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %19 ], [ %613, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %19 ], [ %614, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %19 ], [ %615, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %19 ], [ %616, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %19 ], [ %617, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %19 ], [ %618, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %19 ], [ %619, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %19 ], [ %620, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %19 ], [ %621, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %19 ], [ %622, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %19 ], [ %623, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %19 ], [ %624, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %19 ], [ %625, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %19 ], [ %626, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %19 ], [ %627, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %19 ], [ %628, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %19 ], [ %629, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %19 ], [ %630, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %19 ], [ %631, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %19 ], [ %632, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %19 ], [ %633, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %19 ], [ %634, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %19 ], [ %635, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %19 ], [ %636, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %19 ], [ %637, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %19 ], [ %574, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %19 ], [ %575, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %19 ], [ %576, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %19 ], [ %577, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %19 ], [ %578, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %19 ], [ %579, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %19 ], [ %580, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %19 ], [ %581, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %19 ], [ %582, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %19 ], [ %583, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %19 ], [ %584, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %19 ], [ %585, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %19 ], [ %586, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %19 ], [ %587, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %19 ], [ %588, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %19 ], [ %589, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %19 ], [ %590, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %19 ], [ %591, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %19 ], [ %592, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %19 ], [ %593, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %19 ], [ %594, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %19 ], [ %595, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %19 ], [ %596, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %19 ], [ %597, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %19 ], [ %598, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %19 ], [ %599, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %19 ], [ %600, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %19 ], [ %601, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %19 ], [ %602, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %19 ], [ %603, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %19 ], [ %604, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %19 ], [ %605, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %19 ], [ %542, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %19 ], [ %543, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %19 ], [ %544, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %19 ], [ %545, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %19 ], [ %546, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %19 ], [ %547, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %19 ], [ %548, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %19 ], [ %549, %._crit_edge ]
  %111 = phi float [ 0.000000e+00, %19 ], [ %550, %._crit_edge ]
  %112 = phi float [ 0.000000e+00, %19 ], [ %551, %._crit_edge ]
  %113 = phi float [ 0.000000e+00, %19 ], [ %552, %._crit_edge ]
  %114 = phi float [ 0.000000e+00, %19 ], [ %553, %._crit_edge ]
  %115 = phi float [ 0.000000e+00, %19 ], [ %554, %._crit_edge ]
  %116 = phi float [ 0.000000e+00, %19 ], [ %555, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %19 ], [ %556, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %19 ], [ %557, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %19 ], [ %558, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %19 ], [ %559, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %19 ], [ %560, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %19 ], [ %561, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %19 ], [ %562, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %19 ], [ %563, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %19 ], [ %564, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %19 ], [ %565, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %19 ], [ %566, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %19 ], [ %567, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %19 ], [ %568, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %19 ], [ %569, %._crit_edge ]
  %131 = phi float [ 0.000000e+00, %19 ], [ %570, %._crit_edge ]
  %132 = phi float [ 0.000000e+00, %19 ], [ %571, %._crit_edge ]
  %133 = phi float [ 0.000000e+00, %19 ], [ %572, %._crit_edge ]
  %134 = phi float [ 0.000000e+00, %19 ], [ %573, %._crit_edge ]
  %135 = or disjoint i64 %indvars.iv, %36, !dbg !17
  %136 = icmp samesign ult i64 %135, 3072, !dbg !18
  %137 = trunc nuw nsw i64 %135 to i32, !dbg !19
  %138 = add i32 %34, %137, !dbg !19
  %139 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %140 = or disjoint i32 %30, %139, !dbg !19
  %141 = add i32 %140, %34, !dbg !19
  %142 = add i32 %35, %137, !dbg !19
  %143 = add i32 %140, %35, !dbg !19
  %144 = sext i32 %138 to i64, !dbg !20
  %145 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !20
  %146 = sext i32 %141 to i64, !dbg !20
  %147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !20
  %148 = sext i32 %142 to i64, !dbg !20
  %149 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !20
  %150 = sext i32 %143 to i64, !dbg !20
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !20
  %152 = and i1 %26, %136, !dbg !21
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %145, i1 %152) #5, !dbg !22
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !22
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !22
  %156 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !22
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !22
  %158 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !22
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !22
  %160 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !22
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !22
  %162 = extractelement <2 x bfloat> %155, i64 0, !dbg !22
  %163 = extractelement <2 x bfloat> %155, i64 1, !dbg !22
  %164 = extractelement <2 x bfloat> %157, i64 0, !dbg !22
  %165 = extractelement <2 x bfloat> %157, i64 1, !dbg !22
  %166 = extractelement <2 x bfloat> %159, i64 0, !dbg !22
  %167 = extractelement <2 x bfloat> %159, i64 1, !dbg !22
  %168 = extractelement <2 x bfloat> %161, i64 0, !dbg !22
  %169 = extractelement <2 x bfloat> %161, i64 1, !dbg !22
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %147, i1 %152) #5, !dbg !22
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !22
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !22
  %173 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !22
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !22
  %175 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !22
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !22
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !22
  %179 = extractelement <2 x bfloat> %172, i64 0, !dbg !22
  %180 = extractelement <2 x bfloat> %172, i64 1, !dbg !22
  %181 = extractelement <2 x bfloat> %174, i64 0, !dbg !22
  %182 = extractelement <2 x bfloat> %174, i64 1, !dbg !22
  %183 = extractelement <2 x bfloat> %176, i64 0, !dbg !22
  %184 = extractelement <2 x bfloat> %176, i64 1, !dbg !22
  %185 = extractelement <2 x bfloat> %178, i64 0, !dbg !22
  %186 = extractelement <2 x bfloat> %178, i64 1, !dbg !22
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %149, i1 %152) #5, !dbg !22
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !22
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !22
  %190 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !22
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !22
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !22
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !22
  %196 = extractelement <2 x bfloat> %189, i64 0, !dbg !22
  %197 = extractelement <2 x bfloat> %189, i64 1, !dbg !22
  %198 = extractelement <2 x bfloat> %191, i64 0, !dbg !22
  %199 = extractelement <2 x bfloat> %191, i64 1, !dbg !22
  %200 = extractelement <2 x bfloat> %193, i64 0, !dbg !22
  %201 = extractelement <2 x bfloat> %193, i64 1, !dbg !22
  %202 = extractelement <2 x bfloat> %195, i64 0, !dbg !22
  %203 = extractelement <2 x bfloat> %195, i64 1, !dbg !22
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %151, i1 %152) #5, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !22
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !22
  %207 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !22
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !22
  %209 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !22
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !22
  %211 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !22
  %212 = bitcast i32 %211 to <2 x bfloat>, !dbg !22
  %213 = extractelement <2 x bfloat> %206, i64 0, !dbg !22
  %214 = extractelement <2 x bfloat> %206, i64 1, !dbg !22
  %215 = extractelement <2 x bfloat> %208, i64 0, !dbg !22
  %216 = extractelement <2 x bfloat> %208, i64 1, !dbg !22
  %217 = extractelement <2 x bfloat> %210, i64 0, !dbg !22
  %218 = extractelement <2 x bfloat> %210, i64 1, !dbg !22
  %219 = extractelement <2 x bfloat> %212, i64 0, !dbg !22
  %220 = extractelement <2 x bfloat> %212, i64 1, !dbg !22
  %221 = fpext bfloat %162 to float, !dbg !23
  %222 = fpext bfloat %163 to float, !dbg !23
  %223 = fpext bfloat %164 to float, !dbg !23
  %224 = fpext bfloat %165 to float, !dbg !23
  %225 = fpext bfloat %166 to float, !dbg !23
  %226 = fpext bfloat %167 to float, !dbg !23
  %227 = fpext bfloat %168 to float, !dbg !23
  %228 = fpext bfloat %169 to float, !dbg !23
  %229 = fpext bfloat %179 to float, !dbg !23
  %230 = fpext bfloat %180 to float, !dbg !23
  %231 = fpext bfloat %181 to float, !dbg !23
  %232 = fpext bfloat %182 to float, !dbg !23
  %233 = fpext bfloat %183 to float, !dbg !23
  %234 = fpext bfloat %184 to float, !dbg !23
  %235 = fpext bfloat %185 to float, !dbg !23
  %236 = fpext bfloat %186 to float, !dbg !23
  %237 = fpext bfloat %196 to float, !dbg !23
  %238 = fpext bfloat %197 to float, !dbg !23
  %239 = fpext bfloat %198 to float, !dbg !23
  %240 = fpext bfloat %199 to float, !dbg !23
  %241 = fpext bfloat %200 to float, !dbg !23
  %242 = fpext bfloat %201 to float, !dbg !23
  %243 = fpext bfloat %202 to float, !dbg !23
  %244 = fpext bfloat %203 to float, !dbg !23
  %245 = fpext bfloat %213 to float, !dbg !23
  %246 = fpext bfloat %214 to float, !dbg !23
  %247 = fpext bfloat %215 to float, !dbg !23
  %248 = fpext bfloat %216 to float, !dbg !23
  %249 = fpext bfloat %217 to float, !dbg !23
  %250 = fpext bfloat %218 to float, !dbg !23
  %251 = fpext bfloat %219 to float, !dbg !23
  %252 = fpext bfloat %220 to float, !dbg !23
  br i1 %38, label %._crit_edge, label %253, !dbg !24

253:                                              ; preds = %37
  %254 = fsub float %221, %103, !dbg !28
  %255 = fsub float %222, %104, !dbg !28
  %256 = fsub float %223, %105, !dbg !28
  %257 = fsub float %224, %106, !dbg !28
  %258 = fsub float %225, %107, !dbg !28
  %259 = fsub float %226, %108, !dbg !28
  %260 = fsub float %227, %109, !dbg !28
  %261 = fsub float %228, %110, !dbg !28
  %262 = fsub float %229, %111, !dbg !28
  %263 = fsub float %230, %112, !dbg !28
  %264 = fsub float %231, %113, !dbg !28
  %265 = fsub float %232, %114, !dbg !28
  %266 = fsub float %233, %115, !dbg !28
  %267 = fsub float %234, %116, !dbg !28
  %268 = fsub float %235, %117, !dbg !28
  %269 = fsub float %236, %118, !dbg !28
  %270 = fsub float %237, %119, !dbg !28
  %271 = fsub float %238, %120, !dbg !28
  %272 = fsub float %239, %121, !dbg !28
  %273 = fsub float %240, %122, !dbg !28
  %274 = fsub float %241, %123, !dbg !28
  %275 = fsub float %242, %124, !dbg !28
  %276 = fsub float %243, %125, !dbg !28
  %277 = fsub float %244, %126, !dbg !28
  %278 = fsub float %245, %127, !dbg !28
  %279 = fsub float %246, %128, !dbg !28
  %280 = fsub float %247, %129, !dbg !28
  %281 = fsub float %248, %130, !dbg !28
  %282 = fsub float %249, %131, !dbg !28
  %283 = fsub float %250, %132, !dbg !28
  %284 = fsub float %251, %133, !dbg !28
  %285 = fsub float %252, %134, !dbg !28
  %286 = fadd float %39, 1.000000e+00, !dbg !29
  %287 = fadd float %40, 1.000000e+00, !dbg !29
  %288 = fadd float %41, 1.000000e+00, !dbg !29
  %289 = fadd float %42, 1.000000e+00, !dbg !29
  %290 = fadd float %43, 1.000000e+00, !dbg !29
  %291 = fadd float %44, 1.000000e+00, !dbg !29
  %292 = fadd float %45, 1.000000e+00, !dbg !29
  %293 = fadd float %46, 1.000000e+00, !dbg !29
  %294 = fadd float %47, 1.000000e+00, !dbg !29
  %295 = fadd float %48, 1.000000e+00, !dbg !29
  %296 = fadd float %49, 1.000000e+00, !dbg !29
  %297 = fadd float %50, 1.000000e+00, !dbg !29
  %298 = fadd float %51, 1.000000e+00, !dbg !29
  %299 = fadd float %52, 1.000000e+00, !dbg !29
  %300 = fadd float %53, 1.000000e+00, !dbg !29
  %301 = fadd float %54, 1.000000e+00, !dbg !29
  %302 = fadd float %55, 1.000000e+00, !dbg !29
  %303 = fadd float %56, 1.000000e+00, !dbg !29
  %304 = fadd float %57, 1.000000e+00, !dbg !29
  %305 = fadd float %58, 1.000000e+00, !dbg !29
  %306 = fadd float %59, 1.000000e+00, !dbg !29
  %307 = fadd float %60, 1.000000e+00, !dbg !29
  %308 = fadd float %61, 1.000000e+00, !dbg !29
  %309 = fadd float %62, 1.000000e+00, !dbg !29
  %310 = fadd float %63, 1.000000e+00, !dbg !29
  %311 = fadd float %64, 1.000000e+00, !dbg !29
  %312 = fadd float %65, 1.000000e+00, !dbg !29
  %313 = fadd float %66, 1.000000e+00, !dbg !29
  %314 = fadd float %67, 1.000000e+00, !dbg !29
  %315 = fadd float %68, 1.000000e+00, !dbg !29
  %316 = fadd float %69, 1.000000e+00, !dbg !29
  %317 = fadd float %70, 1.000000e+00, !dbg !29
  %318 = tail call float @llvm.nvvm.div.full(float %254, float %286), !dbg !30
  %319 = tail call float @llvm.nvvm.div.full(float %255, float %287), !dbg !30
  %320 = tail call float @llvm.nvvm.div.full(float %256, float %288), !dbg !30
  %321 = tail call float @llvm.nvvm.div.full(float %257, float %289), !dbg !30
  %322 = tail call float @llvm.nvvm.div.full(float %258, float %290), !dbg !30
  %323 = tail call float @llvm.nvvm.div.full(float %259, float %291), !dbg !30
  %324 = tail call float @llvm.nvvm.div.full(float %260, float %292), !dbg !30
  %325 = tail call float @llvm.nvvm.div.full(float %261, float %293), !dbg !30
  %326 = tail call float @llvm.nvvm.div.full(float %262, float %294), !dbg !30
  %327 = tail call float @llvm.nvvm.div.full(float %263, float %295), !dbg !30
  %328 = tail call float @llvm.nvvm.div.full(float %264, float %296), !dbg !30
  %329 = tail call float @llvm.nvvm.div.full(float %265, float %297), !dbg !30
  %330 = tail call float @llvm.nvvm.div.full(float %266, float %298), !dbg !30
  %331 = tail call float @llvm.nvvm.div.full(float %267, float %299), !dbg !30
  %332 = tail call float @llvm.nvvm.div.full(float %268, float %300), !dbg !30
  %333 = tail call float @llvm.nvvm.div.full(float %269, float %301), !dbg !30
  %334 = tail call float @llvm.nvvm.div.full(float %270, float %302), !dbg !30
  %335 = tail call float @llvm.nvvm.div.full(float %271, float %303), !dbg !30
  %336 = tail call float @llvm.nvvm.div.full(float %272, float %304), !dbg !30
  %337 = tail call float @llvm.nvvm.div.full(float %273, float %305), !dbg !30
  %338 = tail call float @llvm.nvvm.div.full(float %274, float %306), !dbg !30
  %339 = tail call float @llvm.nvvm.div.full(float %275, float %307), !dbg !30
  %340 = tail call float @llvm.nvvm.div.full(float %276, float %308), !dbg !30
  %341 = tail call float @llvm.nvvm.div.full(float %277, float %309), !dbg !30
  %342 = tail call float @llvm.nvvm.div.full(float %278, float %310), !dbg !30
  %343 = tail call float @llvm.nvvm.div.full(float %279, float %311), !dbg !30
  %344 = tail call float @llvm.nvvm.div.full(float %280, float %312), !dbg !30
  %345 = tail call float @llvm.nvvm.div.full(float %281, float %313), !dbg !30
  %346 = tail call float @llvm.nvvm.div.full(float %282, float %314), !dbg !30
  %347 = tail call float @llvm.nvvm.div.full(float %283, float %315), !dbg !30
  %348 = tail call float @llvm.nvvm.div.full(float %284, float %316), !dbg !30
  %349 = tail call float @llvm.nvvm.div.full(float %285, float %317), !dbg !30
  %350 = fadd float %103, %318, !dbg !31
  %351 = fadd float %104, %319, !dbg !31
  %352 = fadd float %105, %320, !dbg !31
  %353 = fadd float %106, %321, !dbg !31
  %354 = fadd float %107, %322, !dbg !31
  %355 = fadd float %108, %323, !dbg !31
  %356 = fadd float %109, %324, !dbg !31
  %357 = fadd float %110, %325, !dbg !31
  %358 = fadd float %111, %326, !dbg !31
  %359 = fadd float %112, %327, !dbg !31
  %360 = fadd float %113, %328, !dbg !31
  %361 = fadd float %114, %329, !dbg !31
  %362 = fadd float %115, %330, !dbg !31
  %363 = fadd float %116, %331, !dbg !31
  %364 = fadd float %117, %332, !dbg !31
  %365 = fadd float %118, %333, !dbg !31
  %366 = fadd float %119, %334, !dbg !31
  %367 = fadd float %120, %335, !dbg !31
  %368 = fadd float %121, %336, !dbg !31
  %369 = fadd float %122, %337, !dbg !31
  %370 = fadd float %123, %338, !dbg !31
  %371 = fadd float %124, %339, !dbg !31
  %372 = fadd float %125, %340, !dbg !31
  %373 = fadd float %126, %341, !dbg !31
  %374 = fadd float %127, %342, !dbg !31
  %375 = fadd float %128, %343, !dbg !31
  %376 = fadd float %129, %344, !dbg !31
  %377 = fadd float %130, %345, !dbg !31
  %378 = fadd float %131, %346, !dbg !31
  %379 = fadd float %132, %347, !dbg !31
  %380 = fadd float %133, %348, !dbg !31
  %381 = fadd float %134, %349, !dbg !31
  %382 = fsub float %221, %350, !dbg !32
  %383 = fsub float %222, %351, !dbg !32
  %384 = fsub float %223, %352, !dbg !32
  %385 = fsub float %224, %353, !dbg !32
  %386 = fsub float %225, %354, !dbg !32
  %387 = fsub float %226, %355, !dbg !32
  %388 = fsub float %227, %356, !dbg !32
  %389 = fsub float %228, %357, !dbg !32
  %390 = fsub float %229, %358, !dbg !32
  %391 = fsub float %230, %359, !dbg !32
  %392 = fsub float %231, %360, !dbg !32
  %393 = fsub float %232, %361, !dbg !32
  %394 = fsub float %233, %362, !dbg !32
  %395 = fsub float %234, %363, !dbg !32
  %396 = fsub float %235, %364, !dbg !32
  %397 = fsub float %236, %365, !dbg !32
  %398 = fsub float %237, %366, !dbg !32
  %399 = fsub float %238, %367, !dbg !32
  %400 = fsub float %239, %368, !dbg !32
  %401 = fsub float %240, %369, !dbg !32
  %402 = fsub float %241, %370, !dbg !32
  %403 = fsub float %242, %371, !dbg !32
  %404 = fsub float %243, %372, !dbg !32
  %405 = fsub float %244, %373, !dbg !32
  %406 = fsub float %245, %374, !dbg !32
  %407 = fsub float %246, %375, !dbg !32
  %408 = fsub float %247, %376, !dbg !32
  %409 = fsub float %248, %377, !dbg !32
  %410 = fsub float %249, %378, !dbg !32
  %411 = fsub float %250, %379, !dbg !32
  %412 = fsub float %251, %380, !dbg !32
  %413 = fsub float %252, %381, !dbg !32
  %414 = fmul float %254, %382, !dbg !33
  %415 = fmul float %255, %383, !dbg !33
  %416 = fmul float %256, %384, !dbg !33
  %417 = fmul float %257, %385, !dbg !33
  %418 = fmul float %258, %386, !dbg !33
  %419 = fmul float %259, %387, !dbg !33
  %420 = fmul float %260, %388, !dbg !33
  %421 = fmul float %261, %389, !dbg !33
  %422 = fmul float %262, %390, !dbg !33
  %423 = fmul float %263, %391, !dbg !33
  %424 = fmul float %264, %392, !dbg !33
  %425 = fmul float %265, %393, !dbg !33
  %426 = fmul float %266, %394, !dbg !33
  %427 = fmul float %267, %395, !dbg !33
  %428 = fmul float %268, %396, !dbg !33
  %429 = fmul float %269, %397, !dbg !33
  %430 = fmul float %270, %398, !dbg !33
  %431 = fmul float %271, %399, !dbg !33
  %432 = fmul float %272, %400, !dbg !33
  %433 = fmul float %273, %401, !dbg !33
  %434 = fmul float %274, %402, !dbg !33
  %435 = fmul float %275, %403, !dbg !33
  %436 = fmul float %276, %404, !dbg !33
  %437 = fmul float %277, %405, !dbg !33
  %438 = fmul float %278, %406, !dbg !33
  %439 = fmul float %279, %407, !dbg !33
  %440 = fmul float %280, %408, !dbg !33
  %441 = fmul float %281, %409, !dbg !33
  %442 = fmul float %282, %410, !dbg !33
  %443 = fmul float %283, %411, !dbg !33
  %444 = fmul float %284, %412, !dbg !33
  %445 = fmul float %285, %413, !dbg !33
  %446 = fadd float %71, %414, !dbg !34
  %447 = fadd float %72, %415, !dbg !34
  %448 = fadd float %73, %416, !dbg !34
  %449 = fadd float %74, %417, !dbg !34
  %450 = fadd float %75, %418, !dbg !34
  %451 = fadd float %76, %419, !dbg !34
  %452 = fadd float %77, %420, !dbg !34
  %453 = fadd float %78, %421, !dbg !34
  %454 = fadd float %79, %422, !dbg !34
  %455 = fadd float %80, %423, !dbg !34
  %456 = fadd float %81, %424, !dbg !34
  %457 = fadd float %82, %425, !dbg !34
  %458 = fadd float %83, %426, !dbg !34
  %459 = fadd float %84, %427, !dbg !34
  %460 = fadd float %85, %428, !dbg !34
  %461 = fadd float %86, %429, !dbg !34
  %462 = fadd float %87, %430, !dbg !34
  %463 = fadd float %88, %431, !dbg !34
  %464 = fadd float %89, %432, !dbg !34
  %465 = fadd float %90, %433, !dbg !34
  %466 = fadd float %91, %434, !dbg !34
  %467 = fadd float %92, %435, !dbg !34
  %468 = fadd float %93, %436, !dbg !34
  %469 = fadd float %94, %437, !dbg !34
  %470 = fadd float %95, %438, !dbg !34
  %471 = fadd float %96, %439, !dbg !34
  %472 = fadd float %97, %440, !dbg !34
  %473 = fadd float %98, %441, !dbg !34
  %474 = fadd float %99, %442, !dbg !34
  %475 = fadd float %100, %443, !dbg !34
  %476 = fadd float %101, %444, !dbg !34
  %477 = fadd float %102, %445, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %37, %253
  %478 = phi float [ %446, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %479 = phi float [ %447, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %480 = phi float [ %448, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %481 = phi float [ %449, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %482 = phi float [ %450, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %483 = phi float [ %451, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %484 = phi float [ %452, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %485 = phi float [ %453, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %486 = phi float [ %454, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %487 = phi float [ %455, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %488 = phi float [ %456, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %489 = phi float [ %457, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %490 = phi float [ %458, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %491 = phi float [ %459, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %492 = phi float [ %460, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %493 = phi float [ %461, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %494 = phi float [ %462, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %495 = phi float [ %463, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %496 = phi float [ %464, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %497 = phi float [ %465, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %498 = phi float [ %466, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %499 = phi float [ %467, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %500 = phi float [ %468, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %501 = phi float [ %469, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %502 = phi float [ %470, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %503 = phi float [ %471, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %504 = phi float [ %472, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %505 = phi float [ %473, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %506 = phi float [ %474, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %507 = phi float [ %475, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %508 = phi float [ %476, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %509 = phi float [ %477, %253 ], [ 0.000000e+00, %37 ], !dbg !27
  %.pn99 = phi float [ %350, %253 ], [ %221, %37 ]
  %.pn97 = phi float [ %351, %253 ], [ %222, %37 ]
  %.pn95 = phi float [ %352, %253 ], [ %223, %37 ]
  %.pn93 = phi float [ %353, %253 ], [ %224, %37 ]
  %.pn91 = phi float [ %354, %253 ], [ %225, %37 ]
  %.pn89 = phi float [ %355, %253 ], [ %226, %37 ]
  %.pn87 = phi float [ %356, %253 ], [ %227, %37 ]
  %.pn85 = phi float [ %357, %253 ], [ %228, %37 ]
  %.pn83 = phi float [ %358, %253 ], [ %229, %37 ]
  %.pn81 = phi float [ %359, %253 ], [ %230, %37 ]
  %.pn79 = phi float [ %360, %253 ], [ %231, %37 ]
  %.pn77 = phi float [ %361, %253 ], [ %232, %37 ]
  %.pn75 = phi float [ %362, %253 ], [ %233, %37 ]
  %.pn73 = phi float [ %363, %253 ], [ %234, %37 ]
  %.pn71 = phi float [ %364, %253 ], [ %235, %37 ]
  %.pn69 = phi float [ %365, %253 ], [ %236, %37 ]
  %.pn67 = phi float [ %366, %253 ], [ %237, %37 ]
  %.pn65 = phi float [ %367, %253 ], [ %238, %37 ]
  %.pn63 = phi float [ %368, %253 ], [ %239, %37 ]
  %.pn61 = phi float [ %369, %253 ], [ %240, %37 ]
  %.pn59 = phi float [ %370, %253 ], [ %241, %37 ]
  %.pn57 = phi float [ %371, %253 ], [ %242, %37 ]
  %.pn55 = phi float [ %372, %253 ], [ %243, %37 ]
  %.pn53 = phi float [ %373, %253 ], [ %244, %37 ]
  %.pn51 = phi float [ %374, %253 ], [ %245, %37 ]
  %.pn49 = phi float [ %375, %253 ], [ %246, %37 ]
  %.pn47 = phi float [ %376, %253 ], [ %247, %37 ]
  %.pn45 = phi float [ %377, %253 ], [ %248, %37 ]
  %.pn43 = phi float [ %378, %253 ], [ %249, %37 ]
  %.pn41 = phi float [ %379, %253 ], [ %250, %37 ]
  %.pn39 = phi float [ %380, %253 ], [ %251, %37 ]
  %.pn37 = phi float [ %381, %253 ], [ %252, %37 ]
  %510 = phi float [ %286, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %511 = phi float [ %287, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %512 = phi float [ %288, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %513 = phi float [ %289, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %514 = phi float [ %290, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %515 = phi float [ %291, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %516 = phi float [ %292, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %517 = phi float [ %293, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %518 = phi float [ %294, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %519 = phi float [ %295, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %520 = phi float [ %296, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %521 = phi float [ %297, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %522 = phi float [ %298, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %523 = phi float [ %299, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %524 = phi float [ %300, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %525 = phi float [ %301, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %526 = phi float [ %302, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %527 = phi float [ %303, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %528 = phi float [ %304, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %529 = phi float [ %305, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %530 = phi float [ %306, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %531 = phi float [ %307, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %532 = phi float [ %308, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %533 = phi float [ %309, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %534 = phi float [ %310, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %535 = phi float [ %311, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %536 = phi float [ %312, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %537 = phi float [ %313, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %538 = phi float [ %314, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %539 = phi float [ %315, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %540 = phi float [ %316, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %541 = phi float [ %317, %253 ], [ 1.000000e+00, %37 ], !dbg !27
  %542 = select i1 %152, float %.pn99, float %103, !dbg !35
  %543 = select i1 %152, float %.pn97, float %104, !dbg !35
  %544 = select i1 %152, float %.pn95, float %105, !dbg !35
  %545 = select i1 %152, float %.pn93, float %106, !dbg !35
  %546 = select i1 %152, float %.pn91, float %107, !dbg !35
  %547 = select i1 %152, float %.pn89, float %108, !dbg !35
  %548 = select i1 %152, float %.pn87, float %109, !dbg !35
  %549 = select i1 %152, float %.pn85, float %110, !dbg !35
  %550 = select i1 %152, float %.pn83, float %111, !dbg !35
  %551 = select i1 %152, float %.pn81, float %112, !dbg !35
  %552 = select i1 %152, float %.pn79, float %113, !dbg !35
  %553 = select i1 %152, float %.pn77, float %114, !dbg !35
  %554 = select i1 %152, float %.pn75, float %115, !dbg !35
  %555 = select i1 %152, float %.pn73, float %116, !dbg !35
  %556 = select i1 %152, float %.pn71, float %117, !dbg !35
  %557 = select i1 %152, float %.pn69, float %118, !dbg !35
  %558 = select i1 %152, float %.pn67, float %119, !dbg !35
  %559 = select i1 %152, float %.pn65, float %120, !dbg !35
  %560 = select i1 %152, float %.pn63, float %121, !dbg !35
  %561 = select i1 %152, float %.pn61, float %122, !dbg !35
  %562 = select i1 %152, float %.pn59, float %123, !dbg !35
  %563 = select i1 %152, float %.pn57, float %124, !dbg !35
  %564 = select i1 %152, float %.pn55, float %125, !dbg !35
  %565 = select i1 %152, float %.pn53, float %126, !dbg !35
  %566 = select i1 %152, float %.pn51, float %127, !dbg !35
  %567 = select i1 %152, float %.pn49, float %128, !dbg !35
  %568 = select i1 %152, float %.pn47, float %129, !dbg !35
  %569 = select i1 %152, float %.pn45, float %130, !dbg !35
  %570 = select i1 %152, float %.pn43, float %131, !dbg !35
  %571 = select i1 %152, float %.pn41, float %132, !dbg !35
  %572 = select i1 %152, float %.pn39, float %133, !dbg !35
  %573 = select i1 %152, float %.pn37, float %134, !dbg !35
  %574 = select i1 %152, float %478, float %71, !dbg !36
  %575 = select i1 %152, float %479, float %72, !dbg !36
  %576 = select i1 %152, float %480, float %73, !dbg !36
  %577 = select i1 %152, float %481, float %74, !dbg !36
  %578 = select i1 %152, float %482, float %75, !dbg !36
  %579 = select i1 %152, float %483, float %76, !dbg !36
  %580 = select i1 %152, float %484, float %77, !dbg !36
  %581 = select i1 %152, float %485, float %78, !dbg !36
  %582 = select i1 %152, float %486, float %79, !dbg !36
  %583 = select i1 %152, float %487, float %80, !dbg !36
  %584 = select i1 %152, float %488, float %81, !dbg !36
  %585 = select i1 %152, float %489, float %82, !dbg !36
  %586 = select i1 %152, float %490, float %83, !dbg !36
  %587 = select i1 %152, float %491, float %84, !dbg !36
  %588 = select i1 %152, float %492, float %85, !dbg !36
  %589 = select i1 %152, float %493, float %86, !dbg !36
  %590 = select i1 %152, float %494, float %87, !dbg !36
  %591 = select i1 %152, float %495, float %88, !dbg !36
  %592 = select i1 %152, float %496, float %89, !dbg !36
  %593 = select i1 %152, float %497, float %90, !dbg !36
  %594 = select i1 %152, float %498, float %91, !dbg !36
  %595 = select i1 %152, float %499, float %92, !dbg !36
  %596 = select i1 %152, float %500, float %93, !dbg !36
  %597 = select i1 %152, float %501, float %94, !dbg !36
  %598 = select i1 %152, float %502, float %95, !dbg !36
  %599 = select i1 %152, float %503, float %96, !dbg !36
  %600 = select i1 %152, float %504, float %97, !dbg !36
  %601 = select i1 %152, float %505, float %98, !dbg !36
  %602 = select i1 %152, float %506, float %99, !dbg !36
  %603 = select i1 %152, float %507, float %100, !dbg !36
  %604 = select i1 %152, float %508, float %101, !dbg !36
  %605 = select i1 %152, float %509, float %102, !dbg !36
  %606 = select i1 %152, float %510, float %39, !dbg !37
  %607 = select i1 %152, float %511, float %40, !dbg !37
  %608 = select i1 %152, float %512, float %41, !dbg !37
  %609 = select i1 %152, float %513, float %42, !dbg !37
  %610 = select i1 %152, float %514, float %43, !dbg !37
  %611 = select i1 %152, float %515, float %44, !dbg !37
  %612 = select i1 %152, float %516, float %45, !dbg !37
  %613 = select i1 %152, float %517, float %46, !dbg !37
  %614 = select i1 %152, float %518, float %47, !dbg !37
  %615 = select i1 %152, float %519, float %48, !dbg !37
  %616 = select i1 %152, float %520, float %49, !dbg !37
  %617 = select i1 %152, float %521, float %50, !dbg !37
  %618 = select i1 %152, float %522, float %51, !dbg !37
  %619 = select i1 %152, float %523, float %52, !dbg !37
  %620 = select i1 %152, float %524, float %53, !dbg !37
  %621 = select i1 %152, float %525, float %54, !dbg !37
  %622 = select i1 %152, float %526, float %55, !dbg !37
  %623 = select i1 %152, float %527, float %56, !dbg !37
  %624 = select i1 %152, float %528, float %57, !dbg !37
  %625 = select i1 %152, float %529, float %58, !dbg !37
  %626 = select i1 %152, float %530, float %59, !dbg !37
  %627 = select i1 %152, float %531, float %60, !dbg !37
  %628 = select i1 %152, float %532, float %61, !dbg !37
  %629 = select i1 %152, float %533, float %62, !dbg !37
  %630 = select i1 %152, float %534, float %63, !dbg !37
  %631 = select i1 %152, float %535, float %64, !dbg !37
  %632 = select i1 %152, float %536, float %65, !dbg !37
  %633 = select i1 %152, float %537, float %66, !dbg !37
  %634 = select i1 %152, float %538, float %67, !dbg !37
  %635 = select i1 %152, float %539, float %68, !dbg !37
  %636 = select i1 %152, float %540, float %69, !dbg !37
  %637 = select i1 %152, float %541, float %70, !dbg !37
  br i1 %38, label %37, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %638 = and i32 %22, 31, !dbg !11
  %639 = icmp slt i32 %24, 4112, !dbg !13
  %640 = lshr i32 %22, 5, !dbg !14
  %641 = or disjoint i32 %32, 4, !dbg !14
  %642 = or disjoint i32 %32, 1028, !dbg !14
  %643 = fsub float %543, %542, !dbg !38
  %644 = fadd float %606, %607, !dbg !41
  %645 = fcmp oeq float %644, 0.000000e+00, !dbg !42
  %646 = tail call float @llvm.nvvm.div.full(float %607, float %644), !dbg !43
  %647 = select i1 %645, float 0.000000e+00, float %646, !dbg !44
  %648 = fmul float %643, %647, !dbg !45
  %649 = fadd float %542, %648, !dbg !46
  %650 = fadd float %574, %575, !dbg !47
  %651 = fmul float %643, %643, !dbg !48
  %652 = fmul float %651, %606, !dbg !49
  %653 = fmul float %652, %647, !dbg !50
  %654 = fadd float %650, %653, !dbg !51
  %655 = fsub float %544, %649, !dbg !38
  %656 = fadd float %608, %644, !dbg !41
  %657 = fcmp oeq float %656, 0.000000e+00, !dbg !42
  %658 = tail call float @llvm.nvvm.div.full(float %608, float %656), !dbg !43
  %659 = select i1 %657, float 0.000000e+00, float %658, !dbg !44
  %660 = fmul float %659, %655, !dbg !45
  %661 = fadd float %649, %660, !dbg !46
  %662 = fadd float %576, %654, !dbg !47
  %663 = fmul float %655, %655, !dbg !48
  %664 = fmul float %644, %663, !dbg !49
  %665 = fmul float %659, %664, !dbg !50
  %666 = fadd float %662, %665, !dbg !51
  %667 = fsub float %545, %661, !dbg !38
  %668 = fadd float %609, %656, !dbg !41
  %669 = fcmp oeq float %668, 0.000000e+00, !dbg !42
  %670 = tail call float @llvm.nvvm.div.full(float %609, float %668), !dbg !43
  %671 = select i1 %669, float 0.000000e+00, float %670, !dbg !44
  %672 = fmul float %671, %667, !dbg !45
  %673 = fadd float %661, %672, !dbg !46
  %674 = fadd float %577, %666, !dbg !47
  %675 = fmul float %667, %667, !dbg !48
  %676 = fmul float %656, %675, !dbg !49
  %677 = fmul float %671, %676, !dbg !50
  %678 = fadd float %674, %677, !dbg !51
  %679 = fsub float %546, %673, !dbg !38
  %680 = fadd float %610, %668, !dbg !41
  %681 = fcmp oeq float %680, 0.000000e+00, !dbg !42
  %682 = tail call float @llvm.nvvm.div.full(float %610, float %680), !dbg !43
  %683 = select i1 %681, float 0.000000e+00, float %682, !dbg !44
  %684 = fmul float %683, %679, !dbg !45
  %685 = fadd float %673, %684, !dbg !46
  %686 = fadd float %578, %678, !dbg !47
  %687 = fmul float %679, %679, !dbg !48
  %688 = fmul float %668, %687, !dbg !49
  %689 = fmul float %683, %688, !dbg !50
  %690 = fadd float %686, %689, !dbg !51
  %691 = fsub float %547, %685, !dbg !38
  %692 = fadd float %611, %680, !dbg !41
  %693 = fcmp oeq float %692, 0.000000e+00, !dbg !42
  %694 = tail call float @llvm.nvvm.div.full(float %611, float %692), !dbg !43
  %695 = select i1 %693, float 0.000000e+00, float %694, !dbg !44
  %696 = fmul float %695, %691, !dbg !45
  %697 = fadd float %685, %696, !dbg !46
  %698 = fadd float %579, %690, !dbg !47
  %699 = fmul float %691, %691, !dbg !48
  %700 = fmul float %680, %699, !dbg !49
  %701 = fmul float %695, %700, !dbg !50
  %702 = fadd float %698, %701, !dbg !51
  %703 = fsub float %548, %697, !dbg !38
  %704 = fadd float %612, %692, !dbg !41
  %705 = fcmp oeq float %704, 0.000000e+00, !dbg !42
  %706 = tail call float @llvm.nvvm.div.full(float %612, float %704), !dbg !43
  %707 = select i1 %705, float 0.000000e+00, float %706, !dbg !44
  %708 = fmul float %707, %703, !dbg !45
  %709 = fadd float %697, %708, !dbg !46
  %710 = fadd float %580, %702, !dbg !47
  %711 = fmul float %703, %703, !dbg !48
  %712 = fmul float %692, %711, !dbg !49
  %713 = fmul float %707, %712, !dbg !50
  %714 = fadd float %710, %713, !dbg !51
  %715 = fsub float %549, %709, !dbg !38
  %716 = fadd float %613, %704, !dbg !41
  %717 = fcmp oeq float %716, 0.000000e+00, !dbg !42
  %718 = tail call float @llvm.nvvm.div.full(float %613, float %716), !dbg !43
  %719 = select i1 %717, float 0.000000e+00, float %718, !dbg !44
  %720 = fmul float %719, %715, !dbg !45
  %721 = fadd float %709, %720, !dbg !46
  %722 = fadd float %581, %714, !dbg !47
  %723 = fmul float %715, %715, !dbg !48
  %724 = fmul float %704, %723, !dbg !49
  %725 = fmul float %719, %724, !dbg !50
  %726 = fadd float %722, %725, !dbg !51
  %727 = fsub float %550, %721, !dbg !38
  %728 = fadd float %614, %716, !dbg !41
  %729 = fcmp oeq float %728, 0.000000e+00, !dbg !42
  %730 = tail call float @llvm.nvvm.div.full(float %614, float %728), !dbg !43
  %731 = select i1 %729, float 0.000000e+00, float %730, !dbg !44
  %732 = fmul float %731, %727, !dbg !45
  %733 = fadd float %721, %732, !dbg !46
  %734 = fadd float %582, %726, !dbg !47
  %735 = fmul float %727, %727, !dbg !48
  %736 = fmul float %716, %735, !dbg !49
  %737 = fmul float %731, %736, !dbg !50
  %738 = fadd float %734, %737, !dbg !51
  %739 = fsub float %551, %733, !dbg !38
  %740 = fadd float %615, %728, !dbg !41
  %741 = fcmp oeq float %740, 0.000000e+00, !dbg !42
  %742 = tail call float @llvm.nvvm.div.full(float %615, float %740), !dbg !43
  %743 = select i1 %741, float 0.000000e+00, float %742, !dbg !44
  %744 = fmul float %743, %739, !dbg !45
  %745 = fadd float %733, %744, !dbg !46
  %746 = fadd float %583, %738, !dbg !47
  %747 = fmul float %739, %739, !dbg !48
  %748 = fmul float %728, %747, !dbg !49
  %749 = fmul float %743, %748, !dbg !50
  %750 = fadd float %746, %749, !dbg !51
  %751 = fsub float %552, %745, !dbg !38
  %752 = fadd float %616, %740, !dbg !41
  %753 = fcmp oeq float %752, 0.000000e+00, !dbg !42
  %754 = tail call float @llvm.nvvm.div.full(float %616, float %752), !dbg !43
  %755 = select i1 %753, float 0.000000e+00, float %754, !dbg !44
  %756 = fmul float %755, %751, !dbg !45
  %757 = fadd float %745, %756, !dbg !46
  %758 = fadd float %584, %750, !dbg !47
  %759 = fmul float %751, %751, !dbg !48
  %760 = fmul float %740, %759, !dbg !49
  %761 = fmul float %755, %760, !dbg !50
  %762 = fadd float %758, %761, !dbg !51
  %763 = fsub float %553, %757, !dbg !38
  %764 = fadd float %617, %752, !dbg !41
  %765 = fcmp oeq float %764, 0.000000e+00, !dbg !42
  %766 = tail call float @llvm.nvvm.div.full(float %617, float %764), !dbg !43
  %767 = select i1 %765, float 0.000000e+00, float %766, !dbg !44
  %768 = fmul float %767, %763, !dbg !45
  %769 = fadd float %757, %768, !dbg !46
  %770 = fadd float %585, %762, !dbg !47
  %771 = fmul float %763, %763, !dbg !48
  %772 = fmul float %752, %771, !dbg !49
  %773 = fmul float %767, %772, !dbg !50
  %774 = fadd float %770, %773, !dbg !51
  %775 = fsub float %554, %769, !dbg !38
  %776 = fadd float %618, %764, !dbg !41
  %777 = fcmp oeq float %776, 0.000000e+00, !dbg !42
  %778 = tail call float @llvm.nvvm.div.full(float %618, float %776), !dbg !43
  %779 = select i1 %777, float 0.000000e+00, float %778, !dbg !44
  %780 = fmul float %779, %775, !dbg !45
  %781 = fadd float %769, %780, !dbg !46
  %782 = fadd float %586, %774, !dbg !47
  %783 = fmul float %775, %775, !dbg !48
  %784 = fmul float %764, %783, !dbg !49
  %785 = fmul float %779, %784, !dbg !50
  %786 = fadd float %782, %785, !dbg !51
  %787 = fsub float %555, %781, !dbg !38
  %788 = fadd float %619, %776, !dbg !41
  %789 = fcmp oeq float %788, 0.000000e+00, !dbg !42
  %790 = tail call float @llvm.nvvm.div.full(float %619, float %788), !dbg !43
  %791 = select i1 %789, float 0.000000e+00, float %790, !dbg !44
  %792 = fmul float %791, %787, !dbg !45
  %793 = fadd float %781, %792, !dbg !46
  %794 = fadd float %587, %786, !dbg !47
  %795 = fmul float %787, %787, !dbg !48
  %796 = fmul float %776, %795, !dbg !49
  %797 = fmul float %791, %796, !dbg !50
  %798 = fadd float %794, %797, !dbg !51
  %799 = fsub float %556, %793, !dbg !38
  %800 = fadd float %620, %788, !dbg !41
  %801 = fcmp oeq float %800, 0.000000e+00, !dbg !42
  %802 = tail call float @llvm.nvvm.div.full(float %620, float %800), !dbg !43
  %803 = select i1 %801, float 0.000000e+00, float %802, !dbg !44
  %804 = fmul float %803, %799, !dbg !45
  %805 = fadd float %793, %804, !dbg !46
  %806 = fadd float %588, %798, !dbg !47
  %807 = fmul float %799, %799, !dbg !48
  %808 = fmul float %788, %807, !dbg !49
  %809 = fmul float %803, %808, !dbg !50
  %810 = fadd float %806, %809, !dbg !51
  %811 = fsub float %557, %805, !dbg !38
  %812 = fadd float %621, %800, !dbg !41
  %813 = fcmp oeq float %812, 0.000000e+00, !dbg !42
  %814 = tail call float @llvm.nvvm.div.full(float %621, float %812), !dbg !43
  %815 = select i1 %813, float 0.000000e+00, float %814, !dbg !44
  %816 = fmul float %815, %811, !dbg !45
  %817 = fadd float %805, %816, !dbg !46
  %818 = fadd float %589, %810, !dbg !47
  %819 = fmul float %811, %811, !dbg !48
  %820 = fmul float %800, %819, !dbg !49
  %821 = fmul float %815, %820, !dbg !50
  %822 = fadd float %818, %821, !dbg !51
  %823 = fsub float %559, %558, !dbg !38
  %824 = fadd float %622, %623, !dbg !41
  %825 = fcmp oeq float %824, 0.000000e+00, !dbg !42
  %826 = tail call float @llvm.nvvm.div.full(float %623, float %824), !dbg !43
  %827 = select i1 %825, float 0.000000e+00, float %826, !dbg !44
  %828 = fmul float %823, %827, !dbg !45
  %829 = fadd float %558, %828, !dbg !46
  %830 = fadd float %590, %591, !dbg !47
  %831 = fmul float %823, %823, !dbg !48
  %832 = fmul float %831, %622, !dbg !49
  %833 = fmul float %832, %827, !dbg !50
  %834 = fadd float %830, %833, !dbg !51
  %835 = fsub float %560, %829, !dbg !38
  %836 = fadd float %624, %824, !dbg !41
  %837 = fcmp oeq float %836, 0.000000e+00, !dbg !42
  %838 = tail call float @llvm.nvvm.div.full(float %624, float %836), !dbg !43
  %839 = select i1 %837, float 0.000000e+00, float %838, !dbg !44
  %840 = fmul float %839, %835, !dbg !45
  %841 = fadd float %829, %840, !dbg !46
  %842 = fadd float %592, %834, !dbg !47
  %843 = fmul float %835, %835, !dbg !48
  %844 = fmul float %824, %843, !dbg !49
  %845 = fmul float %839, %844, !dbg !50
  %846 = fadd float %842, %845, !dbg !51
  %847 = fsub float %561, %841, !dbg !38
  %848 = fadd float %625, %836, !dbg !41
  %849 = fcmp oeq float %848, 0.000000e+00, !dbg !42
  %850 = tail call float @llvm.nvvm.div.full(float %625, float %848), !dbg !43
  %851 = select i1 %849, float 0.000000e+00, float %850, !dbg !44
  %852 = fmul float %851, %847, !dbg !45
  %853 = fadd float %841, %852, !dbg !46
  %854 = fadd float %593, %846, !dbg !47
  %855 = fmul float %847, %847, !dbg !48
  %856 = fmul float %836, %855, !dbg !49
  %857 = fmul float %851, %856, !dbg !50
  %858 = fadd float %854, %857, !dbg !51
  %859 = fsub float %562, %853, !dbg !38
  %860 = fadd float %626, %848, !dbg !41
  %861 = fcmp oeq float %860, 0.000000e+00, !dbg !42
  %862 = tail call float @llvm.nvvm.div.full(float %626, float %860), !dbg !43
  %863 = select i1 %861, float 0.000000e+00, float %862, !dbg !44
  %864 = fmul float %863, %859, !dbg !45
  %865 = fadd float %853, %864, !dbg !46
  %866 = fadd float %594, %858, !dbg !47
  %867 = fmul float %859, %859, !dbg !48
  %868 = fmul float %848, %867, !dbg !49
  %869 = fmul float %863, %868, !dbg !50
  %870 = fadd float %866, %869, !dbg !51
  %871 = fsub float %563, %865, !dbg !38
  %872 = fadd float %627, %860, !dbg !41
  %873 = fcmp oeq float %872, 0.000000e+00, !dbg !42
  %874 = tail call float @llvm.nvvm.div.full(float %627, float %872), !dbg !43
  %875 = select i1 %873, float 0.000000e+00, float %874, !dbg !44
  %876 = fmul float %875, %871, !dbg !45
  %877 = fadd float %865, %876, !dbg !46
  %878 = fadd float %595, %870, !dbg !47
  %879 = fmul float %871, %871, !dbg !48
  %880 = fmul float %860, %879, !dbg !49
  %881 = fmul float %875, %880, !dbg !50
  %882 = fadd float %878, %881, !dbg !51
  %883 = fsub float %564, %877, !dbg !38
  %884 = fadd float %628, %872, !dbg !41
  %885 = fcmp oeq float %884, 0.000000e+00, !dbg !42
  %886 = tail call float @llvm.nvvm.div.full(float %628, float %884), !dbg !43
  %887 = select i1 %885, float 0.000000e+00, float %886, !dbg !44
  %888 = fmul float %887, %883, !dbg !45
  %889 = fadd float %877, %888, !dbg !46
  %890 = fadd float %596, %882, !dbg !47
  %891 = fmul float %883, %883, !dbg !48
  %892 = fmul float %872, %891, !dbg !49
  %893 = fmul float %887, %892, !dbg !50
  %894 = fadd float %890, %893, !dbg !51
  %895 = fsub float %565, %889, !dbg !38
  %896 = fadd float %629, %884, !dbg !41
  %897 = fcmp oeq float %896, 0.000000e+00, !dbg !42
  %898 = tail call float @llvm.nvvm.div.full(float %629, float %896), !dbg !43
  %899 = select i1 %897, float 0.000000e+00, float %898, !dbg !44
  %900 = fmul float %899, %895, !dbg !45
  %901 = fadd float %889, %900, !dbg !46
  %902 = fadd float %597, %894, !dbg !47
  %903 = fmul float %895, %895, !dbg !48
  %904 = fmul float %884, %903, !dbg !49
  %905 = fmul float %899, %904, !dbg !50
  %906 = fadd float %902, %905, !dbg !51
  %907 = fsub float %566, %901, !dbg !38
  %908 = fadd float %630, %896, !dbg !41
  %909 = fcmp oeq float %908, 0.000000e+00, !dbg !42
  %910 = tail call float @llvm.nvvm.div.full(float %630, float %908), !dbg !43
  %911 = select i1 %909, float 0.000000e+00, float %910, !dbg !44
  %912 = fmul float %911, %907, !dbg !45
  %913 = fadd float %901, %912, !dbg !46
  %914 = fadd float %598, %906, !dbg !47
  %915 = fmul float %907, %907, !dbg !48
  %916 = fmul float %896, %915, !dbg !49
  %917 = fmul float %911, %916, !dbg !50
  %918 = fadd float %914, %917, !dbg !51
  %919 = fsub float %567, %913, !dbg !38
  %920 = fadd float %631, %908, !dbg !41
  %921 = fcmp oeq float %920, 0.000000e+00, !dbg !42
  %922 = tail call float @llvm.nvvm.div.full(float %631, float %920), !dbg !43
  %923 = select i1 %921, float 0.000000e+00, float %922, !dbg !44
  %924 = fmul float %923, %919, !dbg !45
  %925 = fadd float %913, %924, !dbg !46
  %926 = fadd float %599, %918, !dbg !47
  %927 = fmul float %919, %919, !dbg !48
  %928 = fmul float %908, %927, !dbg !49
  %929 = fmul float %923, %928, !dbg !50
  %930 = fadd float %926, %929, !dbg !51
  %931 = fsub float %568, %925, !dbg !38
  %932 = fadd float %632, %920, !dbg !41
  %933 = fcmp oeq float %932, 0.000000e+00, !dbg !42
  %934 = tail call float @llvm.nvvm.div.full(float %632, float %932), !dbg !43
  %935 = select i1 %933, float 0.000000e+00, float %934, !dbg !44
  %936 = fmul float %935, %931, !dbg !45
  %937 = fadd float %925, %936, !dbg !46
  %938 = fadd float %600, %930, !dbg !47
  %939 = fmul float %931, %931, !dbg !48
  %940 = fmul float %920, %939, !dbg !49
  %941 = fmul float %935, %940, !dbg !50
  %942 = fadd float %938, %941, !dbg !51
  %943 = fsub float %569, %937, !dbg !38
  %944 = fadd float %633, %932, !dbg !41
  %945 = fcmp oeq float %944, 0.000000e+00, !dbg !42
  %946 = tail call float @llvm.nvvm.div.full(float %633, float %944), !dbg !43
  %947 = select i1 %945, float 0.000000e+00, float %946, !dbg !44
  %948 = fmul float %947, %943, !dbg !45
  %949 = fadd float %937, %948, !dbg !46
  %950 = fadd float %601, %942, !dbg !47
  %951 = fmul float %943, %943, !dbg !48
  %952 = fmul float %932, %951, !dbg !49
  %953 = fmul float %947, %952, !dbg !50
  %954 = fadd float %950, %953, !dbg !51
  %955 = fsub float %570, %949, !dbg !38
  %956 = fadd float %634, %944, !dbg !41
  %957 = fcmp oeq float %956, 0.000000e+00, !dbg !42
  %958 = tail call float @llvm.nvvm.div.full(float %634, float %956), !dbg !43
  %959 = select i1 %957, float 0.000000e+00, float %958, !dbg !44
  %960 = fmul float %959, %955, !dbg !45
  %961 = fadd float %949, %960, !dbg !46
  %962 = fadd float %602, %954, !dbg !47
  %963 = fmul float %955, %955, !dbg !48
  %964 = fmul float %944, %963, !dbg !49
  %965 = fmul float %959, %964, !dbg !50
  %966 = fadd float %962, %965, !dbg !51
  %967 = fsub float %571, %961, !dbg !38
  %968 = fadd float %635, %956, !dbg !41
  %969 = fcmp oeq float %968, 0.000000e+00, !dbg !42
  %970 = tail call float @llvm.nvvm.div.full(float %635, float %968), !dbg !43
  %971 = select i1 %969, float 0.000000e+00, float %970, !dbg !44
  %972 = fmul float %971, %967, !dbg !45
  %973 = fadd float %961, %972, !dbg !46
  %974 = fadd float %603, %966, !dbg !47
  %975 = fmul float %967, %967, !dbg !48
  %976 = fmul float %956, %975, !dbg !49
  %977 = fmul float %971, %976, !dbg !50
  %978 = fadd float %974, %977, !dbg !51
  %979 = fsub float %572, %973, !dbg !38
  %980 = fadd float %636, %968, !dbg !41
  %981 = fcmp oeq float %980, 0.000000e+00, !dbg !42
  %982 = tail call float @llvm.nvvm.div.full(float %636, float %980), !dbg !43
  %983 = select i1 %981, float 0.000000e+00, float %982, !dbg !44
  %984 = fmul float %983, %979, !dbg !45
  %985 = fadd float %973, %984, !dbg !46
  %986 = fadd float %604, %978, !dbg !47
  %987 = fmul float %979, %979, !dbg !48
  %988 = fmul float %968, %987, !dbg !49
  %989 = fmul float %983, %988, !dbg !50
  %990 = fadd float %986, %989, !dbg !51
  %991 = fsub float %573, %985, !dbg !38
  %992 = fadd float %637, %980, !dbg !41
  %993 = fcmp oeq float %992, 0.000000e+00, !dbg !42
  %994 = tail call float @llvm.nvvm.div.full(float %637, float %992), !dbg !43
  %995 = select i1 %993, float 0.000000e+00, float %994, !dbg !44
  %996 = fmul float %995, %991, !dbg !45
  %997 = fadd float %985, %996, !dbg !46
  %998 = fadd float %605, %990, !dbg !47
  %999 = fmul float %991, %991, !dbg !48
  %1000 = fmul float %980, %999, !dbg !49
  %1001 = fmul float %995, %1000, !dbg !50
  %1002 = fadd float %998, %1001, !dbg !51
  %1003 = bitcast float %817 to i32, !dbg !52
  %1004 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1003, i32 16, i32 31), !dbg !52
  %1005 = bitcast i32 %1004 to float, !dbg !52
  %1006 = bitcast float %822 to i32, !dbg !52
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 16, i32 31), !dbg !52
  %1008 = bitcast i32 %1007 to float, !dbg !52
  %1009 = bitcast float %812 to i32, !dbg !52
  %1010 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1009, i32 16, i32 31), !dbg !52
  %1011 = bitcast i32 %1010 to float, !dbg !52
  %1012 = fsub float %1005, %817, !dbg !38
  %1013 = fadd float %812, %1011, !dbg !41
  %1014 = fcmp oeq float %1013, 0.000000e+00, !dbg !42
  %1015 = tail call float @llvm.nvvm.div.full(float %1011, float %1013), !dbg !43
  %1016 = select i1 %1014, float 0.000000e+00, float %1015, !dbg !44
  %1017 = fmul float %1016, %1012, !dbg !45
  %1018 = fadd float %817, %1017, !dbg !46
  %1019 = fadd float %822, %1008, !dbg !47
  %1020 = fmul float %1012, %1012, !dbg !48
  %1021 = fmul float %812, %1020, !dbg !49
  %1022 = fmul float %1016, %1021, !dbg !50
  %1023 = fadd float %1019, %1022, !dbg !51
  %1024 = bitcast float %1018 to i32, !dbg !52
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 8, i32 31), !dbg !52
  %1026 = bitcast i32 %1025 to float, !dbg !52
  %1027 = bitcast float %1023 to i32, !dbg !52
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 8, i32 31), !dbg !52
  %1029 = bitcast i32 %1028 to float, !dbg !52
  %1030 = bitcast float %1013 to i32, !dbg !52
  %1031 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1030, i32 8, i32 31), !dbg !52
  %1032 = bitcast i32 %1031 to float, !dbg !52
  %1033 = fsub float %1026, %1018, !dbg !38
  %1034 = fadd float %1013, %1032, !dbg !41
  %1035 = fcmp oeq float %1034, 0.000000e+00, !dbg !42
  %1036 = tail call float @llvm.nvvm.div.full(float %1032, float %1034), !dbg !43
  %1037 = select i1 %1035, float 0.000000e+00, float %1036, !dbg !44
  %1038 = fmul float %1037, %1033, !dbg !45
  %1039 = fadd float %1018, %1038, !dbg !46
  %1040 = fadd float %1023, %1029, !dbg !47
  %1041 = fmul float %1033, %1033, !dbg !48
  %1042 = fmul float %1013, %1041, !dbg !49
  %1043 = fmul float %1037, %1042, !dbg !50
  %1044 = fadd float %1040, %1043, !dbg !51
  %1045 = bitcast float %1039 to i32, !dbg !52
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 4, i32 31), !dbg !52
  %1047 = bitcast i32 %1046 to float, !dbg !52
  %1048 = bitcast float %1044 to i32, !dbg !52
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 4, i32 31), !dbg !52
  %1050 = bitcast i32 %1049 to float, !dbg !52
  %1051 = bitcast float %1034 to i32, !dbg !52
  %1052 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1051, i32 4, i32 31), !dbg !52
  %1053 = bitcast i32 %1052 to float, !dbg !52
  %1054 = fsub float %1047, %1039, !dbg !38
  %1055 = fadd float %1034, %1053, !dbg !41
  %1056 = fcmp oeq float %1055, 0.000000e+00, !dbg !42
  %1057 = tail call float @llvm.nvvm.div.full(float %1053, float %1055), !dbg !43
  %1058 = select i1 %1056, float 0.000000e+00, float %1057, !dbg !44
  %1059 = fmul float %1058, %1054, !dbg !45
  %1060 = fadd float %1039, %1059, !dbg !46
  %1061 = fadd float %1044, %1050, !dbg !47
  %1062 = fmul float %1054, %1054, !dbg !48
  %1063 = fmul float %1034, %1062, !dbg !49
  %1064 = fmul float %1058, %1063, !dbg !50
  %1065 = fadd float %1061, %1064, !dbg !51
  %1066 = bitcast float %1060 to i32, !dbg !52
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 2, i32 31), !dbg !52
  %1068 = bitcast i32 %1067 to float, !dbg !52
  %1069 = bitcast float %1065 to i32, !dbg !52
  %1070 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1069, i32 2, i32 31), !dbg !52
  %1071 = bitcast i32 %1070 to float, !dbg !52
  %1072 = bitcast float %1055 to i32, !dbg !52
  %1073 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1072, i32 2, i32 31), !dbg !52
  %1074 = bitcast i32 %1073 to float, !dbg !52
  %1075 = fsub float %1068, %1060, !dbg !38
  %1076 = fadd float %1055, %1074, !dbg !41
  %1077 = fcmp oeq float %1076, 0.000000e+00, !dbg !42
  %1078 = tail call float @llvm.nvvm.div.full(float %1074, float %1076), !dbg !43
  %1079 = select i1 %1077, float 0.000000e+00, float %1078, !dbg !44
  %1080 = fmul float %1079, %1075, !dbg !45
  %1081 = fadd float %1060, %1080, !dbg !46
  %1082 = fadd float %1065, %1071, !dbg !47
  %1083 = fmul float %1075, %1075, !dbg !48
  %1084 = fmul float %1055, %1083, !dbg !49
  %1085 = fmul float %1079, %1084, !dbg !50
  %1086 = fadd float %1082, %1085, !dbg !51
  %1087 = bitcast float %1081 to i32, !dbg !52
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 1, i32 31), !dbg !52
  %1089 = bitcast i32 %1088 to float, !dbg !52
  %1090 = bitcast float %1086 to i32, !dbg !52
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1090, i32 1, i32 31), !dbg !52
  %1092 = bitcast i32 %1091 to float, !dbg !52
  %1093 = bitcast float %1076 to i32, !dbg !52
  %1094 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1093, i32 1, i32 31), !dbg !52
  %1095 = bitcast i32 %1094 to float, !dbg !52
  %1096 = fsub float %1089, %1081, !dbg !38
  %1097 = fadd float %1076, %1095, !dbg !41
  %1098 = fcmp oeq float %1097, 0.000000e+00, !dbg !42
  %1099 = tail call float @llvm.nvvm.div.full(float %1095, float %1097), !dbg !43
  %1100 = select i1 %1098, float 0.000000e+00, float %1099, !dbg !44
  %1101 = fmul float %1100, %1096, !dbg !45
  %1102 = fadd float %1081, %1101, !dbg !46
  %1103 = fadd float %1086, %1092, !dbg !47
  %1104 = fmul float %1096, %1096, !dbg !48
  %1105 = fmul float %1076, %1104, !dbg !49
  %1106 = fmul float %1100, %1105, !dbg !50
  %1107 = fadd float %1103, %1106, !dbg !51
  %1108 = bitcast float %997 to i32, !dbg !52
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 16, i32 31), !dbg !52
  %1110 = bitcast i32 %1109 to float, !dbg !52
  %1111 = bitcast float %1002 to i32, !dbg !52
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 16, i32 31), !dbg !52
  %1113 = bitcast i32 %1112 to float, !dbg !52
  %1114 = bitcast float %992 to i32, !dbg !52
  %1115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1114, i32 16, i32 31), !dbg !52
  %1116 = bitcast i32 %1115 to float, !dbg !52
  %1117 = fsub float %1110, %997, !dbg !38
  %1118 = fadd float %992, %1116, !dbg !41
  %1119 = fcmp oeq float %1118, 0.000000e+00, !dbg !42
  %1120 = tail call float @llvm.nvvm.div.full(float %1116, float %1118), !dbg !43
  %1121 = select i1 %1119, float 0.000000e+00, float %1120, !dbg !44
  %1122 = fmul float %1121, %1117, !dbg !45
  %1123 = fadd float %997, %1122, !dbg !46
  %1124 = fadd float %1002, %1113, !dbg !47
  %1125 = fmul float %1117, %1117, !dbg !48
  %1126 = fmul float %992, %1125, !dbg !49
  %1127 = fmul float %1121, %1126, !dbg !50
  %1128 = fadd float %1124, %1127, !dbg !51
  %1129 = bitcast float %1123 to i32, !dbg !52
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 8, i32 31), !dbg !52
  %1131 = bitcast i32 %1130 to float, !dbg !52
  %1132 = bitcast float %1128 to i32, !dbg !52
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 8, i32 31), !dbg !52
  %1134 = bitcast i32 %1133 to float, !dbg !52
  %1135 = bitcast float %1118 to i32, !dbg !52
  %1136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1135, i32 8, i32 31), !dbg !52
  %1137 = bitcast i32 %1136 to float, !dbg !52
  %1138 = fsub float %1131, %1123, !dbg !38
  %1139 = fadd float %1118, %1137, !dbg !41
  %1140 = fcmp oeq float %1139, 0.000000e+00, !dbg !42
  %1141 = tail call float @llvm.nvvm.div.full(float %1137, float %1139), !dbg !43
  %1142 = select i1 %1140, float 0.000000e+00, float %1141, !dbg !44
  %1143 = fmul float %1142, %1138, !dbg !45
  %1144 = fadd float %1123, %1143, !dbg !46
  %1145 = fadd float %1128, %1134, !dbg !47
  %1146 = fmul float %1138, %1138, !dbg !48
  %1147 = fmul float %1118, %1146, !dbg !49
  %1148 = fmul float %1142, %1147, !dbg !50
  %1149 = fadd float %1145, %1148, !dbg !51
  %1150 = bitcast float %1144 to i32, !dbg !52
  %1151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1150, i32 4, i32 31), !dbg !52
  %1152 = bitcast i32 %1151 to float, !dbg !52
  %1153 = bitcast float %1149 to i32, !dbg !52
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 4, i32 31), !dbg !52
  %1155 = bitcast i32 %1154 to float, !dbg !52
  %1156 = bitcast float %1139 to i32, !dbg !52
  %1157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1156, i32 4, i32 31), !dbg !52
  %1158 = bitcast i32 %1157 to float, !dbg !52
  %1159 = fsub float %1152, %1144, !dbg !38
  %1160 = fadd float %1139, %1158, !dbg !41
  %1161 = fcmp oeq float %1160, 0.000000e+00, !dbg !42
  %1162 = tail call float @llvm.nvvm.div.full(float %1158, float %1160), !dbg !43
  %1163 = select i1 %1161, float 0.000000e+00, float %1162, !dbg !44
  %1164 = fmul float %1163, %1159, !dbg !45
  %1165 = fadd float %1144, %1164, !dbg !46
  %1166 = fadd float %1149, %1155, !dbg !47
  %1167 = fmul float %1159, %1159, !dbg !48
  %1168 = fmul float %1139, %1167, !dbg !49
  %1169 = fmul float %1163, %1168, !dbg !50
  %1170 = fadd float %1166, %1169, !dbg !51
  %1171 = bitcast float %1165 to i32, !dbg !52
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 2, i32 31), !dbg !52
  %1173 = bitcast i32 %1172 to float, !dbg !52
  %1174 = bitcast float %1170 to i32, !dbg !52
  %1175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 2, i32 31), !dbg !52
  %1176 = bitcast i32 %1175 to float, !dbg !52
  %1177 = bitcast float %1160 to i32, !dbg !52
  %1178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1177, i32 2, i32 31), !dbg !52
  %1179 = bitcast i32 %1178 to float, !dbg !52
  %1180 = fsub float %1173, %1165, !dbg !38
  %1181 = fadd float %1160, %1179, !dbg !41
  %1182 = fcmp oeq float %1181, 0.000000e+00, !dbg !42
  %1183 = tail call float @llvm.nvvm.div.full(float %1179, float %1181), !dbg !43
  %1184 = select i1 %1182, float 0.000000e+00, float %1183, !dbg !44
  %1185 = fmul float %1184, %1180, !dbg !45
  %1186 = fadd float %1165, %1185, !dbg !46
  %1187 = fadd float %1170, %1176, !dbg !47
  %1188 = fmul float %1180, %1180, !dbg !48
  %1189 = fmul float %1160, %1188, !dbg !49
  %1190 = fmul float %1184, %1189, !dbg !50
  %1191 = fadd float %1187, %1190, !dbg !51
  %1192 = bitcast float %1186 to i32, !dbg !52
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 1, i32 31), !dbg !52
  %1194 = bitcast i32 %1193 to float, !dbg !52
  %1195 = bitcast float %1191 to i32, !dbg !52
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 1, i32 31), !dbg !52
  %1197 = bitcast i32 %1196 to float, !dbg !52
  %1198 = bitcast float %1181 to i32, !dbg !52
  %1199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1198, i32 1, i32 31), !dbg !52
  %1200 = bitcast i32 %1199 to float, !dbg !52
  %1201 = fsub float %1194, %1186, !dbg !38
  %1202 = fadd float %1181, %1200, !dbg !41
  %1203 = fcmp oeq float %1202, 0.000000e+00, !dbg !42
  %1204 = tail call float @llvm.nvvm.div.full(float %1200, float %1202), !dbg !43
  %1205 = select i1 %1203, float 0.000000e+00, float %1204, !dbg !44
  %1206 = fmul float %1205, %1201, !dbg !45
  %1207 = fadd float %1186, %1206, !dbg !46
  %1208 = fadd float %1191, %1197, !dbg !47
  %1209 = fmul float %1201, %1201, !dbg !48
  %1210 = fmul float %1181, %1209, !dbg !49
  %1211 = fmul float %1205, %1210, !dbg !50
  %1212 = fadd float %1208, %1211, !dbg !51
  %1213 = and i32 %640, 3, !dbg !52
  %1214 = icmp eq i32 %638, 0, !dbg !52
  %1215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1213, !dbg !52
  %1216 = bitcast float %1102 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1215, <1 x i32> %1216, i1 %1214) #5, !dbg !52
  %1217 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1213, !dbg !52
  %1218 = bitcast float %1107 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1217, <1 x i32> %1218, i1 %1214) #5, !dbg !52
  %1219 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1213, !dbg !52
  %1220 = bitcast float %1097 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1219, <1 x i32> %1220, i1 %1214) #5, !dbg !52
  %1221 = or disjoint i32 %1213, 4, !dbg !52
  %1222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1221, !dbg !52
  %1223 = bitcast float %1207 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1222, <1 x i32> %1223, i1 %1214) #5, !dbg !52
  %1224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1221, !dbg !52
  %1225 = bitcast float %1212 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1224, <1 x i32> %1225, i1 %1214) #5, !dbg !52
  %1226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1221, !dbg !52
  %1227 = bitcast float %1202 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1226, <1 x i32> %1227, i1 %1214) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1228 = icmp slt i32 %22, 8, !dbg !52
  %1229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !52
  %1230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1229, i1 %1228) #5, !dbg !52
  %1231 = bitcast i32 %1230 to float, !dbg !52
  %1232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %22, !dbg !52
  %1233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1232, i1 %1228) #5, !dbg !52
  %1234 = bitcast i32 %1233 to float, !dbg !52
  %1235 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %22, !dbg !52
  %1236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1235, i1 %1228) #5, !dbg !52
  %1237 = bitcast i32 %1236 to float, !dbg !52
  %1238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1230, i32 2, i32 31), !dbg !52
  %1239 = bitcast i32 %1238 to float, !dbg !52
  %1240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1233, i32 2, i32 31), !dbg !52
  %1241 = bitcast i32 %1240 to float, !dbg !52
  %1242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1236, i32 2, i32 31), !dbg !52
  %1243 = bitcast i32 %1242 to float, !dbg !52
  %1244 = fsub float %1239, %1231, !dbg !38
  %1245 = fadd float %1237, %1243, !dbg !41
  %1246 = fcmp oeq float %1245, 0.000000e+00, !dbg !42
  %1247 = tail call float @llvm.nvvm.div.full(float %1243, float %1245), !dbg !43
  %1248 = select i1 %1246, float 0.000000e+00, float %1247, !dbg !44
  %1249 = fmul float %1244, %1248, !dbg !45
  %1250 = fadd float %1249, %1231, !dbg !46
  %1251 = fadd float %1234, %1241, !dbg !47
  %1252 = fmul float %1244, %1244, !dbg !48
  %1253 = fmul float %1252, %1237, !dbg !49
  %1254 = fmul float %1253, %1248, !dbg !50
  %1255 = fadd float %1251, %1254, !dbg !51
  %1256 = bitcast float %1250 to i32, !dbg !52
  %1257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1256, i32 1, i32 31), !dbg !52
  %1258 = bitcast i32 %1257 to float, !dbg !52
  %1259 = bitcast float %1255 to i32, !dbg !52
  %1260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1259, i32 1, i32 31), !dbg !52
  %1261 = bitcast i32 %1260 to float, !dbg !52
  %1262 = bitcast float %1245 to i32, !dbg !52
  %1263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1262, i32 1, i32 31), !dbg !52
  %1264 = bitcast i32 %1263 to float, !dbg !52
  %1265 = fsub float %1258, %1250, !dbg !38
  %1266 = fadd float %1245, %1264, !dbg !41
  %1267 = fcmp oeq float %1266, 0.000000e+00, !dbg !42
  %1268 = tail call float @llvm.nvvm.div.full(float %1264, float %1266), !dbg !43
  %1269 = select i1 %1267, float 0.000000e+00, float %1268, !dbg !44
  %1270 = fmul float %1265, %1269, !dbg !45
  %1271 = fadd float %1250, %1270, !dbg !46
  %1272 = fadd float %1255, %1261, !dbg !47
  %1273 = fmul float %1265, %1265, !dbg !48
  %1274 = fmul float %1245, %1273, !dbg !49
  %1275 = fmul float %1269, %1274, !dbg !50
  %1276 = fadd float %1272, %1275, !dbg !51
  %1277 = and i32 %22, 3, !dbg !52
  %1278 = icmp eq i32 %1277, 0, !dbg !52
  %1279 = and i1 %1228, %1278, !dbg !52
  %1280 = bitcast float %1271 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1229, <1 x i32> %1280, i1 %1279) #5, !dbg !52
  %1281 = bitcast float %1276 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1232, <1 x i32> %1281, i1 %1279) #5, !dbg !52
  %1282 = bitcast float %1266 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1235, <1 x i32> %1282, i1 %1279) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1283 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %1284 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !52
  %1285 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !52
  %1286 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !52
  %1287 = tail call float @llvm.nvvm.div.full(float %1285, float 3.072000e+03), !dbg !53
  %1288 = tail call float @llvm.nvvm.div.full(float %1286, float 3.072000e+03), !dbg !53
  %1289 = fadd float %1287, 0x3EB0C6F7A0000000, !dbg !54
  %1290 = fadd float %1288, 0x3EB0C6F7A0000000, !dbg !54
  %1291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i142 = icmp eq i32 %1306, 0, !dbg !55
  br i1 %.not.i142, label %1309, label %1307, !dbg !55

1307:                                             ; preds = %__nv_rsqrtf.exit
  %1308 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1289), !dbg !55
  br label %__nv_rsqrtf.exit144, !dbg !55

1309:                                             ; preds = %__nv_rsqrtf.exit
  %1310 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1289), !dbg !55
  br label %__nv_rsqrtf.exit144, !dbg !55

__nv_rsqrtf.exit144:                              ; preds = %1307, %1309
  %.0.i143 = phi float [ %1308, %1307 ], [ %1310, %1309 ], !dbg !55
  %1311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %1326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i190 = icmp eq i32 %1326, 0, !dbg !55
  br i1 %.not.i190, label %1329, label %1327, !dbg !55

1327:                                             ; preds = %__nv_rsqrtf.exit144
  %1328 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1290), !dbg !55
  br label %__nv_rsqrtf.exit192, !dbg !55

1329:                                             ; preds = %__nv_rsqrtf.exit144
  %1330 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1290), !dbg !55
  br label %__nv_rsqrtf.exit192, !dbg !55

__nv_rsqrtf.exit192:                              ; preds = %1327, %1329
  %.0.i191 = phi float [ %1328, %1327 ], [ %1330, %1329 ], !dbg !55
  %1331 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29
  %1332 = or disjoint i32 %29, 4
  %1333 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1332
  %1334 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30
  %1335 = or disjoint i32 %29, 12
  %1336 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1335
  %1337 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %1338 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %641
  %1339 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %33
  %1340 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %642
  %1341 = zext nneg i32 %642 to i64, !dbg !56
  %1342 = zext nneg i32 %33 to i64, !dbg !56
  %1343 = zext nneg i32 %641 to i64, !dbg !56
  %1344 = zext nneg i32 %32 to i64, !dbg !56
  %1345 = getelementptr inbounds nuw i8, ptr addrspace(3) %1337, i32 8
  %1346 = getelementptr inbounds nuw i8, ptr addrspace(3) %1338, i32 8
  %1347 = getelementptr inbounds nuw i8, ptr addrspace(3) %1339, i32 8
  %1348 = getelementptr inbounds nuw i8, ptr addrspace(3) %1340, i32 8
  %1349 = insertelement <2 x i1> poison, i1 %639, i64 0, !dbg !57
  %1350 = shufflevector <2 x i1> %1349, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !57
  %1351 = insertelement <32 x i1> poison, i1 %26, i64 0, !dbg !57
  %1352 = insertelement <16 x i1> poison, i1 %639, i64 0, !dbg !58
  br label %1353, !dbg !56

1353:                                             ; preds = %__nv_rsqrtf.exit192, %1353
  %1354 = phi i1 [ true, %__nv_rsqrtf.exit192 ], [ false, %1353 ]
  %indvars.iv356 = phi i64 [ 0, %__nv_rsqrtf.exit192 ], [ 2048, %1353 ]
  %1355 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1862, %1353 ]
  %1356 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1863, %1353 ]
  %1357 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1864, %1353 ]
  %1358 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1865, %1353 ]
  %1359 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1866, %1353 ]
  %1360 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit192 ], [ %1867, %1353 ]
  %1361 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit192 ], [ %1892, %1353 ]
  %1362 = phi <32 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit192 ], [ %1897, %1353 ]
  %1363 = phi <16 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit192 ], [ %1888, %1353 ]
  %1364 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit192 ], [ %1870, %1353 ]
  %1365 = or disjoint i64 %indvars.iv356, %1344, !dbg !59
  %1366 = or disjoint i64 %indvars.iv356, %1343, !dbg !59
  %1367 = or disjoint i64 %indvars.iv356, %1342, !dbg !59
  %1368 = or disjoint i64 %indvars.iv356, %1341, !dbg !59
  %1369 = or disjoint i64 %indvars.iv356, %36, !dbg !59
  %1370 = icmp samesign ult i64 %1367, 3072, !dbg !60
  %1371 = icmp samesign ult i64 %1369, 3072, !dbg !60
  %1372 = trunc nuw nsw i64 %1369 to i32, !dbg !61
  %1373 = add i32 %34, %1372, !dbg !61
  %1374 = trunc nuw nsw i64 %indvars.iv356 to i32, !dbg !61
  %1375 = or disjoint i32 %30, %1374, !dbg !61
  %1376 = add i32 %1375, %34, !dbg !61
  %1377 = add i32 %35, %1372, !dbg !61
  %1378 = add i32 %1375, %35, !dbg !61
  %1379 = trunc nuw nsw i64 %1365 to i32, !dbg !61
  %1380 = add i32 %34, %1379, !dbg !61
  %1381 = trunc nuw nsw i64 %1367 to i32, !dbg !61
  %1382 = add i32 %34, %1381, !dbg !61
  %1383 = add i32 %35, %1379, !dbg !61
  %1384 = add i32 %35, %1381, !dbg !61
  %1385 = sext i32 %1373 to i64, !dbg !62
  %1386 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1385, !dbg !62
  %1387 = sext i32 %1376 to i64, !dbg !62
  %1388 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1387, !dbg !62
  %1389 = sext i32 %1377 to i64, !dbg !62
  %1390 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1389, !dbg !62
  %1391 = sext i32 %1378 to i64, !dbg !62
  %1392 = getelementptr bfloat, ptr addrspace(1) %0, i64 %1391, !dbg !62
  %1393 = and i1 %26, %1370, !dbg !63
  %1394 = and i1 %639, %1370, !dbg !63
  %1395 = and i1 %26, %1371, !dbg !63
  %1396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1386, i1 %1395) #5, !dbg !64
  %1397 = extractvalue { i32, i32, i32, i32 } %1396, 0, !dbg !64
  %1398 = bitcast i32 %1397 to <2 x bfloat>, !dbg !64
  %1399 = extractvalue { i32, i32, i32, i32 } %1396, 1, !dbg !64
  %1400 = bitcast i32 %1399 to <2 x bfloat>, !dbg !64
  %1401 = extractvalue { i32, i32, i32, i32 } %1396, 2, !dbg !64
  %1402 = bitcast i32 %1401 to <2 x bfloat>, !dbg !64
  %1403 = extractvalue { i32, i32, i32, i32 } %1396, 3, !dbg !64
  %1404 = bitcast i32 %1403 to <2 x bfloat>, !dbg !64
  %1405 = extractelement <2 x bfloat> %1398, i64 0, !dbg !64
  %1406 = extractelement <2 x bfloat> %1398, i64 1, !dbg !64
  %1407 = extractelement <2 x bfloat> %1400, i64 0, !dbg !64
  %1408 = extractelement <2 x bfloat> %1400, i64 1, !dbg !64
  %1409 = extractelement <2 x bfloat> %1402, i64 0, !dbg !64
  %1410 = extractelement <2 x bfloat> %1402, i64 1, !dbg !64
  %1411 = extractelement <2 x bfloat> %1404, i64 0, !dbg !64
  %1412 = extractelement <2 x bfloat> %1404, i64 1, !dbg !64
  %1413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1388, i1 %1395) #5, !dbg !64
  %1414 = extractvalue { i32, i32, i32, i32 } %1413, 0, !dbg !64
  %1415 = bitcast i32 %1414 to <2 x bfloat>, !dbg !64
  %1416 = extractvalue { i32, i32, i32, i32 } %1413, 1, !dbg !64
  %1417 = bitcast i32 %1416 to <2 x bfloat>, !dbg !64
  %1418 = extractvalue { i32, i32, i32, i32 } %1413, 2, !dbg !64
  %1419 = bitcast i32 %1418 to <2 x bfloat>, !dbg !64
  %1420 = extractvalue { i32, i32, i32, i32 } %1413, 3, !dbg !64
  %1421 = bitcast i32 %1420 to <2 x bfloat>, !dbg !64
  %1422 = extractelement <2 x bfloat> %1415, i64 0, !dbg !64
  %1423 = extractelement <2 x bfloat> %1415, i64 1, !dbg !64
  %1424 = extractelement <2 x bfloat> %1417, i64 0, !dbg !64
  %1425 = extractelement <2 x bfloat> %1417, i64 1, !dbg !64
  %1426 = extractelement <2 x bfloat> %1419, i64 0, !dbg !64
  %1427 = extractelement <2 x bfloat> %1419, i64 1, !dbg !64
  %1428 = extractelement <2 x bfloat> %1421, i64 0, !dbg !64
  %1429 = extractelement <2 x bfloat> %1421, i64 1, !dbg !64
  %1430 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1390, i1 %1395) #5, !dbg !64
  %1431 = extractvalue { i32, i32, i32, i32 } %1430, 0, !dbg !64
  %1432 = bitcast i32 %1431 to <2 x bfloat>, !dbg !64
  %1433 = extractvalue { i32, i32, i32, i32 } %1430, 1, !dbg !64
  %1434 = bitcast i32 %1433 to <2 x bfloat>, !dbg !64
  %1435 = extractvalue { i32, i32, i32, i32 } %1430, 2, !dbg !64
  %1436 = bitcast i32 %1435 to <2 x bfloat>, !dbg !64
  %1437 = extractvalue { i32, i32, i32, i32 } %1430, 3, !dbg !64
  %1438 = bitcast i32 %1437 to <2 x bfloat>, !dbg !64
  %1439 = extractelement <2 x bfloat> %1432, i64 0, !dbg !64
  %1440 = extractelement <2 x bfloat> %1432, i64 1, !dbg !64
  %1441 = extractelement <2 x bfloat> %1434, i64 0, !dbg !64
  %1442 = extractelement <2 x bfloat> %1434, i64 1, !dbg !64
  %1443 = extractelement <2 x bfloat> %1436, i64 0, !dbg !64
  %1444 = extractelement <2 x bfloat> %1436, i64 1, !dbg !64
  %1445 = extractelement <2 x bfloat> %1438, i64 0, !dbg !64
  %1446 = extractelement <2 x bfloat> %1438, i64 1, !dbg !64
  %1447 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1392, i1 %1395) #5, !dbg !64
  %1448 = extractvalue { i32, i32, i32, i32 } %1447, 0, !dbg !64
  %1449 = bitcast i32 %1448 to <2 x bfloat>, !dbg !64
  %1450 = extractvalue { i32, i32, i32, i32 } %1447, 1, !dbg !64
  %1451 = bitcast i32 %1450 to <2 x bfloat>, !dbg !64
  %1452 = extractvalue { i32, i32, i32, i32 } %1447, 2, !dbg !64
  %1453 = bitcast i32 %1452 to <2 x bfloat>, !dbg !64
  %1454 = extractvalue { i32, i32, i32, i32 } %1447, 3, !dbg !64
  %1455 = bitcast i32 %1454 to <2 x bfloat>, !dbg !64
  %1456 = extractelement <2 x bfloat> %1449, i64 0, !dbg !64
  %1457 = extractelement <2 x bfloat> %1449, i64 1, !dbg !64
  %1458 = extractelement <2 x bfloat> %1451, i64 0, !dbg !64
  %1459 = extractelement <2 x bfloat> %1451, i64 1, !dbg !64
  %1460 = extractelement <2 x bfloat> %1453, i64 0, !dbg !64
  %1461 = extractelement <2 x bfloat> %1453, i64 1, !dbg !64
  %1462 = extractelement <2 x bfloat> %1455, i64 0, !dbg !64
  %1463 = extractelement <2 x bfloat> %1455, i64 1, !dbg !64
  %1464 = fpext bfloat %1405 to float, !dbg !65
  %1465 = fpext bfloat %1406 to float, !dbg !65
  %1466 = fpext bfloat %1407 to float, !dbg !65
  %1467 = fpext bfloat %1408 to float, !dbg !65
  %1468 = fpext bfloat %1409 to float, !dbg !65
  %1469 = fpext bfloat %1410 to float, !dbg !65
  %1470 = fpext bfloat %1411 to float, !dbg !65
  %1471 = fpext bfloat %1412 to float, !dbg !65
  %1472 = fpext bfloat %1422 to float, !dbg !65
  %1473 = fpext bfloat %1423 to float, !dbg !65
  %1474 = fpext bfloat %1424 to float, !dbg !65
  %1475 = fpext bfloat %1425 to float, !dbg !65
  %1476 = fpext bfloat %1426 to float, !dbg !65
  %1477 = fpext bfloat %1427 to float, !dbg !65
  %1478 = fpext bfloat %1428 to float, !dbg !65
  %1479 = fpext bfloat %1429 to float, !dbg !65
  %1480 = fpext bfloat %1439 to float, !dbg !65
  %1481 = fpext bfloat %1440 to float, !dbg !65
  %1482 = fpext bfloat %1441 to float, !dbg !65
  %1483 = fpext bfloat %1442 to float, !dbg !65
  %1484 = fpext bfloat %1443 to float, !dbg !65
  %1485 = fpext bfloat %1444 to float, !dbg !65
  %1486 = fpext bfloat %1445 to float, !dbg !65
  %1487 = fpext bfloat %1446 to float, !dbg !65
  %1488 = fpext bfloat %1456 to float, !dbg !65
  %1489 = fpext bfloat %1457 to float, !dbg !65
  %1490 = fpext bfloat %1458 to float, !dbg !65
  %1491 = fpext bfloat %1459 to float, !dbg !65
  %1492 = fpext bfloat %1460 to float, !dbg !65
  %1493 = fpext bfloat %1461 to float, !dbg !65
  %1494 = fpext bfloat %1462 to float, !dbg !65
  %1495 = fpext bfloat %1463 to float, !dbg !65
  %1496 = add nuw nsw i64 %1365, 3072, !dbg !66
  %1497 = add nuw nsw i64 %1367, 3072, !dbg !66
  %1498 = getelementptr float, ptr addrspace(1) %1, i64 %1496, !dbg !67
  %1499 = getelementptr float, ptr addrspace(1) %1, i64 %1366, !dbg !67
  %1500 = getelementptr i8, ptr addrspace(1) %1499, i64 12288, !dbg !67
  %1501 = getelementptr float, ptr addrspace(1) %1, i64 %1497, !dbg !67
  %1502 = getelementptr float, ptr addrspace(1) %1, i64 %1368, !dbg !67
  %1503 = getelementptr i8, ptr addrspace(1) %1502, i64 12288, !dbg !67
  %1504 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1498, i1 true) #5, !dbg !68
  %1505 = extractvalue { i32, i32, i32, i32 } %1504, 0, !dbg !68
  %1506 = extractvalue { i32, i32, i32, i32 } %1504, 1, !dbg !68
  %1507 = extractvalue { i32, i32, i32, i32 } %1504, 2, !dbg !68
  %1508 = extractvalue { i32, i32, i32, i32 } %1504, 3, !dbg !68
  %1509 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1500, i1 true) #5, !dbg !68
  %1510 = extractvalue { i32, i32, i32, i32 } %1509, 0, !dbg !68
  %1511 = extractvalue { i32, i32, i32, i32 } %1509, 1, !dbg !68
  %1512 = extractvalue { i32, i32, i32, i32 } %1509, 2, !dbg !68
  %1513 = extractvalue { i32, i32, i32, i32 } %1509, 3, !dbg !68
  %1514 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1501, i1 %1370) #5, !dbg !68
  %1515 = extractvalue { i32, i32, i32, i32 } %1514, 0, !dbg !68
  %1516 = extractvalue { i32, i32, i32, i32 } %1514, 1, !dbg !68
  %1517 = extractvalue { i32, i32, i32, i32 } %1514, 2, !dbg !68
  %1518 = extractvalue { i32, i32, i32, i32 } %1514, 3, !dbg !68
  %1519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1503, i1 %1370) #5, !dbg !68
  %1520 = extractvalue { i32, i32, i32, i32 } %1519, 0, !dbg !68
  %1521 = extractvalue { i32, i32, i32, i32 } %1519, 1, !dbg !68
  %1522 = extractvalue { i32, i32, i32, i32 } %1519, 2, !dbg !68
  %1523 = extractvalue { i32, i32, i32, i32 } %1519, 3, !dbg !68
  %1524 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1496, !dbg !69
  %1525 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1497, !dbg !69
  %1526 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1524, i1 true) #5, !dbg !70
  %1527 = extractvalue { i32, i32, i32, i32 } %1526, 0, !dbg !70
  %1528 = bitcast i32 %1527 to <2 x bfloat>, !dbg !70
  %1529 = extractvalue { i32, i32, i32, i32 } %1526, 1, !dbg !70
  %1530 = bitcast i32 %1529 to <2 x bfloat>, !dbg !70
  %1531 = extractvalue { i32, i32, i32, i32 } %1526, 2, !dbg !70
  %1532 = bitcast i32 %1531 to <2 x bfloat>, !dbg !70
  %1533 = extractvalue { i32, i32, i32, i32 } %1526, 3, !dbg !70
  %1534 = bitcast i32 %1533 to <2 x bfloat>, !dbg !70
  %1535 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1525, i1 %1370) #5, !dbg !70
  %1536 = extractvalue { i32, i32, i32, i32 } %1535, 0, !dbg !70
  %1537 = bitcast i32 %1536 to <2 x bfloat>, !dbg !70
  %1538 = extractvalue { i32, i32, i32, i32 } %1535, 1, !dbg !70
  %1539 = bitcast i32 %1538 to <2 x bfloat>, !dbg !70
  %1540 = extractvalue { i32, i32, i32, i32 } %1535, 2, !dbg !70
  %1541 = bitcast i32 %1540 to <2 x bfloat>, !dbg !70
  %1542 = extractvalue { i32, i32, i32, i32 } %1535, 3, !dbg !70
  %1543 = bitcast i32 %1542 to <2 x bfloat>, !dbg !70
  %1544 = getelementptr float, ptr addrspace(1) %1, i64 %1365, !dbg !71
  %1545 = getelementptr float, ptr addrspace(1) %1, i64 %1367, !dbg !71
  %1546 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1544, i1 true) #5, !dbg !72
  %1547 = extractvalue { i32, i32, i32, i32 } %1546, 0, !dbg !72
  %1548 = extractvalue { i32, i32, i32, i32 } %1546, 1, !dbg !72
  %1549 = extractvalue { i32, i32, i32, i32 } %1546, 2, !dbg !72
  %1550 = extractvalue { i32, i32, i32, i32 } %1546, 3, !dbg !72
  %1551 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1499, i1 true) #5, !dbg !72
  %1552 = extractvalue { i32, i32, i32, i32 } %1551, 0, !dbg !72
  %1553 = extractvalue { i32, i32, i32, i32 } %1551, 1, !dbg !72
  %1554 = extractvalue { i32, i32, i32, i32 } %1551, 2, !dbg !72
  %1555 = extractvalue { i32, i32, i32, i32 } %1551, 3, !dbg !72
  %1556 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1545, i1 %1370) #5, !dbg !72
  %1557 = extractvalue { i32, i32, i32, i32 } %1556, 0, !dbg !72
  %1558 = extractvalue { i32, i32, i32, i32 } %1556, 1, !dbg !72
  %1559 = extractvalue { i32, i32, i32, i32 } %1556, 2, !dbg !72
  %1560 = extractvalue { i32, i32, i32, i32 } %1556, 3, !dbg !72
  %1561 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1502, i1 %1370) #5, !dbg !72
  %1562 = extractvalue { i32, i32, i32, i32 } %1561, 0, !dbg !72
  %1563 = extractvalue { i32, i32, i32, i32 } %1561, 1, !dbg !72
  %1564 = extractvalue { i32, i32, i32, i32 } %1561, 2, !dbg !72
  %1565 = extractvalue { i32, i32, i32, i32 } %1561, 3, !dbg !72
  %1566 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1365, !dbg !73
  %1567 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1367, !dbg !73
  %1568 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1566, i1 true) #5, !dbg !74
  %1569 = extractvalue { i32, i32, i32, i32 } %1568, 0, !dbg !74
  %1570 = bitcast i32 %1569 to <2 x bfloat>, !dbg !74
  %1571 = extractvalue { i32, i32, i32, i32 } %1568, 1, !dbg !74
  %1572 = bitcast i32 %1571 to <2 x bfloat>, !dbg !74
  %1573 = extractvalue { i32, i32, i32, i32 } %1568, 2, !dbg !74
  %1574 = bitcast i32 %1573 to <2 x bfloat>, !dbg !74
  %1575 = extractvalue { i32, i32, i32, i32 } %1568, 3, !dbg !74
  %1576 = bitcast i32 %1575 to <2 x bfloat>, !dbg !74
  %1577 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1567, i1 %1370) #5, !dbg !74
  %1578 = extractvalue { i32, i32, i32, i32 } %1577, 0, !dbg !74
  %1579 = bitcast i32 %1578 to <2 x bfloat>, !dbg !74
  %1580 = extractvalue { i32, i32, i32, i32 } %1577, 1, !dbg !74
  %1581 = bitcast i32 %1580 to <2 x bfloat>, !dbg !74
  %1582 = extractvalue { i32, i32, i32, i32 } %1577, 2, !dbg !74
  %1583 = bitcast i32 %1582 to <2 x bfloat>, !dbg !74
  %1584 = extractvalue { i32, i32, i32, i32 } %1577, 3, !dbg !74
  %1585 = bitcast i32 %1584 to <2 x bfloat>, !dbg !74
  %1586 = fsub float %1464, %1283, !dbg !75
  %1587 = fsub float %1465, %1283, !dbg !75
  %1588 = fsub float %1466, %1283, !dbg !75
  %1589 = fsub float %1467, %1283, !dbg !75
  %1590 = fsub float %1468, %1283, !dbg !75
  %1591 = fsub float %1469, %1283, !dbg !75
  %1592 = fsub float %1470, %1283, !dbg !75
  %1593 = fsub float %1471, %1283, !dbg !75
  %1594 = fsub float %1472, %1283, !dbg !75
  %1595 = fsub float %1473, %1283, !dbg !75
  %1596 = fsub float %1474, %1283, !dbg !75
  %1597 = fsub float %1475, %1283, !dbg !75
  %1598 = fsub float %1476, %1283, !dbg !75
  %1599 = fsub float %1477, %1283, !dbg !75
  %1600 = fsub float %1478, %1283, !dbg !75
  %1601 = fsub float %1479, %1283, !dbg !75
  %1602 = fsub float %1480, %1284, !dbg !75
  %1603 = fsub float %1481, %1284, !dbg !75
  %1604 = fsub float %1482, %1284, !dbg !75
  %1605 = fsub float %1483, %1284, !dbg !75
  %1606 = fsub float %1484, %1284, !dbg !75
  %1607 = fsub float %1485, %1284, !dbg !75
  %1608 = fsub float %1486, %1284, !dbg !75
  %1609 = fsub float %1487, %1284, !dbg !75
  %1610 = fsub float %1488, %1284, !dbg !75
  %1611 = fsub float %1489, %1284, !dbg !75
  %1612 = fsub float %1490, %1284, !dbg !75
  %1613 = fsub float %1491, %1284, !dbg !75
  %1614 = fsub float %1492, %1284, !dbg !75
  %1615 = fsub float %1493, %1284, !dbg !75
  %1616 = fsub float %1494, %1284, !dbg !75
  %1617 = fsub float %1495, %1284, !dbg !75
  %1618 = fmul float %.0.i143, %1586, !dbg !76
  %1619 = fmul float %.0.i143, %1587, !dbg !76
  %1620 = fmul float %.0.i143, %1588, !dbg !76
  %1621 = fmul float %.0.i143, %1589, !dbg !76
  %1622 = fmul float %.0.i143, %1590, !dbg !76
  %1623 = fmul float %.0.i143, %1591, !dbg !76
  %1624 = fmul float %.0.i143, %1592, !dbg !76
  %1625 = fmul float %.0.i143, %1593, !dbg !76
  %1626 = fmul float %.0.i143, %1594, !dbg !76
  %1627 = fmul float %.0.i143, %1595, !dbg !76
  %1628 = fmul float %.0.i143, %1596, !dbg !76
  %1629 = fmul float %.0.i143, %1597, !dbg !76
  %1630 = fmul float %.0.i143, %1598, !dbg !76
  %1631 = fmul float %.0.i143, %1599, !dbg !76
  %1632 = fmul float %.0.i143, %1600, !dbg !76
  %1633 = fmul float %.0.i143, %1601, !dbg !76
  %1634 = fmul float %.0.i191, %1602, !dbg !76
  %1635 = fmul float %.0.i191, %1603, !dbg !76
  %1636 = fmul float %.0.i191, %1604, !dbg !76
  %1637 = fmul float %.0.i191, %1605, !dbg !76
  %1638 = fmul float %.0.i191, %1606, !dbg !76
  %1639 = fmul float %.0.i191, %1607, !dbg !76
  %1640 = fmul float %.0.i191, %1608, !dbg !76
  %1641 = fmul float %.0.i191, %1609, !dbg !76
  %1642 = fmul float %.0.i191, %1610, !dbg !76
  %1643 = fmul float %.0.i191, %1611, !dbg !76
  %1644 = fmul float %.0.i191, %1612, !dbg !76
  %1645 = fmul float %.0.i191, %1613, !dbg !76
  %1646 = fmul float %.0.i191, %1614, !dbg !76
  %1647 = fmul float %.0.i191, %1615, !dbg !76
  %1648 = fmul float %.0.i191, %1616, !dbg !76
  %1649 = fmul float %.0.i191, %1617, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1650 = bitcast float %1618 to i32, !dbg !76
  %1651 = bitcast float %1619 to i32, !dbg !76
  %1652 = bitcast float %1620 to i32, !dbg !76
  %1653 = bitcast float %1621 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1331, i32 %1650, i32 %1651, i32 %1652, i32 %1653, i1 true) #5, !dbg !76
  %1654 = bitcast float %1622 to i32, !dbg !76
  %1655 = bitcast float %1623 to i32, !dbg !76
  %1656 = bitcast float %1624 to i32, !dbg !76
  %1657 = bitcast float %1625 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1333, i32 %1654, i32 %1655, i32 %1656, i32 %1657, i1 true) #5, !dbg !76
  %1658 = bitcast float %1626 to i32, !dbg !76
  %1659 = bitcast float %1627 to i32, !dbg !76
  %1660 = bitcast float %1628 to i32, !dbg !76
  %1661 = bitcast float %1629 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1334, i32 %1658, i32 %1659, i32 %1660, i32 %1661, i1 true) #5, !dbg !76
  %1662 = bitcast float %1630 to i32, !dbg !76
  %1663 = bitcast float %1631 to i32, !dbg !76
  %1664 = bitcast float %1632 to i32, !dbg !76
  %1665 = bitcast float %1633 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1336, i32 %1662, i32 %1663, i32 %1664, i32 %1665, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1666 = bitcast float %1634 to i32, !dbg !76
  %1667 = bitcast float %1635 to i32, !dbg !76
  %1668 = bitcast float %1636 to i32, !dbg !76
  %1669 = bitcast float %1637 to i32, !dbg !76
  %1670 = bitcast float %1638 to i32, !dbg !76
  %1671 = bitcast float %1639 to i32, !dbg !76
  %1672 = bitcast float %1640 to i32, !dbg !76
  %1673 = bitcast float %1641 to i32, !dbg !76
  %1674 = bitcast float %1642 to i32, !dbg !76
  %1675 = bitcast float %1643 to i32, !dbg !76
  %1676 = bitcast float %1644 to i32, !dbg !76
  %1677 = bitcast float %1645 to i32, !dbg !76
  %1678 = bitcast float %1646 to i32, !dbg !76
  %1679 = bitcast float %1647 to i32, !dbg !76
  %1680 = bitcast float %1648 to i32, !dbg !76
  %1681 = bitcast float %1649 to i32, !dbg !76
  %1682 = fcmp uno <32 x float> %1362, zeroinitializer, !dbg !77
  %1683 = fcmp uno float %1355, 0.000000e+00, !dbg !79
  %1684 = fcmp uno float %1356, 0.000000e+00, !dbg !79
  %1685 = fcmp uno float %1357, 0.000000e+00, !dbg !79
  %1686 = fcmp uno float %1358, 0.000000e+00, !dbg !79
  %1687 = fcmp uno float %1359, 0.000000e+00, !dbg !79
  %1688 = fcmp uno float %1360, 0.000000e+00, !dbg !79
  %1689 = fcmp uno <8 x float> %1364, zeroinitializer, !dbg !79
  %1690 = fcmp uno <16 x float> %1363, zeroinitializer, !dbg !79
  %1691 = fcmp uno <2 x float> %1361, zeroinitializer, !dbg !77
  %1692 = insertelement <2 x i32> poison, i32 %1505, i64 0, !dbg !68
  %1693 = insertelement <2 x i32> %1692, i32 %1506, i64 1, !dbg !68
  %1694 = bitcast <2 x i32> %1693 to <2 x float>, !dbg !68
  %1695 = fpext <2 x bfloat> %1528 to <2 x float>, !dbg !81
  %1696 = insertelement <2 x i32> poison, i32 %1547, i64 0, !dbg !72
  %1697 = insertelement <2 x i32> %1696, i32 %1548, i64 1, !dbg !72
  %1698 = bitcast <2 x i32> %1697 to <2 x float>, !dbg !72
  %1699 = fpext <2 x bfloat> %1570 to <2 x float>, !dbg !82
  %1700 = fadd <2 x float> %1694, %1695, !dbg !83
  %1701 = fadd <2 x float> %1700, splat (float 1.000000e+00), !dbg !84
  %1702 = fadd <2 x float> %1698, %1699, !dbg !85
  %1703 = insertelement <2 x i32> poison, i32 %1507, i64 0, !dbg !68
  %1704 = insertelement <2 x i32> %1703, i32 %1508, i64 1, !dbg !68
  %1705 = bitcast <2 x i32> %1704 to <2 x float>, !dbg !68
  %1706 = insertelement <4 x i32> poison, i32 %1510, i64 0, !dbg !68
  %1707 = insertelement <4 x i32> %1706, i32 %1511, i64 1, !dbg !68
  %1708 = insertelement <4 x i32> %1707, i32 %1512, i64 2, !dbg !68
  %1709 = insertelement <4 x i32> %1708, i32 %1513, i64 3, !dbg !68
  %1710 = bitcast <4 x i32> %1709 to <4 x float>, !dbg !68
  %1711 = insertelement <8 x i32> poison, i32 %1515, i64 0, !dbg !68
  %1712 = insertelement <8 x i32> %1711, i32 %1516, i64 1, !dbg !68
  %1713 = insertelement <8 x i32> %1712, i32 %1517, i64 2, !dbg !68
  %1714 = insertelement <8 x i32> %1713, i32 %1518, i64 3, !dbg !68
  %1715 = insertelement <8 x i32> %1714, i32 %1520, i64 4, !dbg !68
  %1716 = insertelement <8 x i32> %1715, i32 %1521, i64 5, !dbg !68
  %1717 = insertelement <8 x i32> %1716, i32 %1522, i64 6, !dbg !68
  %1718 = insertelement <8 x i32> %1717, i32 %1523, i64 7, !dbg !68
  %1719 = bitcast <8 x i32> %1718 to <8 x float>, !dbg !68
  %1720 = fpext <2 x bfloat> %1530 to <2 x float>, !dbg !81
  %1721 = shufflevector <2 x bfloat> %1532, <2 x bfloat> %1534, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %1722 = fpext <4 x bfloat> %1721 to <4 x float>, !dbg !81
  %1723 = shufflevector <2 x bfloat> %1537, <2 x bfloat> %1539, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1724 = shufflevector <2 x bfloat> %1541, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1725 = shufflevector <8 x bfloat> %1723, <8 x bfloat> %1724, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1726 = shufflevector <2 x bfloat> %1541, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1727 = shufflevector <8 x bfloat> %1725, <8 x bfloat> %1726, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !81
  %1728 = shufflevector <2 x bfloat> %1543, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1729 = shufflevector <8 x bfloat> %1727, <8 x bfloat> %1728, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !81
  %1730 = shufflevector <2 x bfloat> %1543, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1731 = shufflevector <8 x bfloat> %1729, <8 x bfloat> %1730, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !81
  %1732 = fpext <8 x bfloat> %1731 to <8 x float>, !dbg !81
  %1733 = insertelement <2 x i32> poison, i32 %1549, i64 0, !dbg !72
  %1734 = insertelement <2 x i32> %1733, i32 %1550, i64 1, !dbg !72
  %1735 = bitcast <2 x i32> %1734 to <2 x float>, !dbg !72
  %1736 = insertelement <4 x i32> poison, i32 %1552, i64 0, !dbg !72
  %1737 = insertelement <4 x i32> %1736, i32 %1553, i64 1, !dbg !72
  %1738 = insertelement <4 x i32> %1737, i32 %1554, i64 2, !dbg !72
  %1739 = insertelement <4 x i32> %1738, i32 %1555, i64 3, !dbg !72
  %1740 = bitcast <4 x i32> %1739 to <4 x float>, !dbg !72
  %1741 = insertelement <8 x i32> poison, i32 %1557, i64 0, !dbg !72
  %1742 = insertelement <8 x i32> %1741, i32 %1558, i64 1, !dbg !72
  %1743 = insertelement <8 x i32> %1742, i32 %1559, i64 2, !dbg !72
  %1744 = insertelement <8 x i32> %1743, i32 %1560, i64 3, !dbg !72
  %1745 = insertelement <8 x i32> %1744, i32 %1562, i64 4, !dbg !72
  %1746 = insertelement <8 x i32> %1745, i32 %1563, i64 5, !dbg !72
  %1747 = insertelement <8 x i32> %1746, i32 %1564, i64 6, !dbg !72
  %1748 = insertelement <8 x i32> %1747, i32 %1565, i64 7, !dbg !72
  %1749 = bitcast <8 x i32> %1748 to <8 x float>, !dbg !72
  %1750 = fpext <2 x bfloat> %1572 to <2 x float>, !dbg !82
  %1751 = shufflevector <2 x bfloat> %1574, <2 x bfloat> %1576, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !82
  %1752 = fpext <4 x bfloat> %1751 to <4 x float>, !dbg !82
  %1753 = shufflevector <2 x bfloat> %1579, <2 x bfloat> %1581, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1754 = shufflevector <2 x bfloat> %1583, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1755 = shufflevector <8 x bfloat> %1753, <8 x bfloat> %1754, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1756 = shufflevector <2 x bfloat> %1583, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1757 = shufflevector <8 x bfloat> %1755, <8 x bfloat> %1756, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !82
  %1758 = shufflevector <2 x bfloat> %1585, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1759 = shufflevector <8 x bfloat> %1757, <8 x bfloat> %1758, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !82
  %1760 = shufflevector <2 x bfloat> %1585, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %1761 = shufflevector <8 x bfloat> %1759, <8 x bfloat> %1760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !82
  %1762 = fpext <8 x bfloat> %1761 to <8 x float>, !dbg !82
  %1763 = load <8 x float>, ptr addrspace(3) %1337, align 16, !dbg !76
  %1764 = load <8 x float>, ptr addrspace(3) %1339, align 16, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1331, i32 %1666, i32 %1667, i32 %1668, i32 %1669, i1 true) #5, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1333, i32 %1670, i32 %1671, i32 %1672, i32 %1673, i1 true) #5, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1334, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i1 true) #5, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1336, i32 %1678, i32 %1679, i32 %1680, i32 %1681, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1765 = load <4 x float>, ptr addrspace(3) %1345, align 8, !dbg !76
  %1766 = load <2 x float>, ptr addrspace(3) %1346, align 8, !dbg !76
  %1767 = load <2 x float>, ptr addrspace(3) %1339, align 16, !dbg !76
  %1768 = load <4 x float>, ptr addrspace(3) %1347, align 8, !dbg !76
  %1769 = load <2 x float>, ptr addrspace(3) %1348, align 8, !dbg !76
  %1770 = fadd <2 x float> %1705, %1720, !dbg !83
  %1771 = fadd <4 x float> %1710, %1722, !dbg !83
  %1772 = fadd <8 x float> %1719, %1732, !dbg !83
  %1773 = fadd <2 x float> %1770, splat (float 1.000000e+00), !dbg !84
  %1774 = fadd <4 x float> %1771, splat (float 1.000000e+00), !dbg !84
  %1775 = fadd <8 x float> %1772, splat (float 1.000000e+00), !dbg !84
  %1776 = fadd <2 x float> %1735, %1750, !dbg !85
  %1777 = fadd <4 x float> %1740, %1752, !dbg !85
  %1778 = fadd <8 x float> %1749, %1762, !dbg !85
  %1779 = shufflevector <2 x float> %1701, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1780 = shufflevector <8 x float> %1775, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1781 = shufflevector <16 x float> %1779, <16 x float> %1780, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !86
  %1782 = shufflevector <4 x float> %1774, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1783 = shufflevector <16 x float> %1781, <16 x float> %1782, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !86
  %1784 = shufflevector <2 x float> %1773, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1785 = shufflevector <16 x float> %1783, <16 x float> %1784, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !86
  %1786 = shufflevector <16 x float> %1785, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1>, !dbg !86
  %1787 = shufflevector <8 x float> %1763, <8 x float> poison, <32 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !86
  %1788 = shufflevector <8 x float> %1763, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1789 = shufflevector <32 x float> %1788, <32 x float> %1787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 62, i32 63>, !dbg !86
  %1790 = shufflevector <8 x float> %1764, <8 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1791 = shufflevector <32 x float> %1789, <32 x float> %1790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1792 = shufflevector <4 x float> %1765, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1793 = shufflevector <32 x float> %1791, <32 x float> %1792, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1794 = shufflevector <4 x float> %1768, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1795 = shufflevector <32 x float> %1793, <32 x float> %1794, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1796 = shufflevector <2 x float> %1766, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1797 = shufflevector <32 x float> %1795, <32 x float> %1796, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 32, i32 33, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1798 = shufflevector <2 x float> %1767, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1799 = shufflevector <32 x float> %1797, <32 x float> %1798, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 32, i32 33, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 30, i32 31>, !dbg !86
  %1800 = shufflevector <2 x float> %1769, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %1801 = shufflevector <32 x float> %1799, <32 x float> %1800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 30, i32 31>, !dbg !86
  %1802 = fmul <32 x float> %1786, %1801, !dbg !86
  %1803 = shufflevector <2 x float> %1702, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1804 = shufflevector <8 x float> %1778, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1805 = shufflevector <16 x float> %1803, <16 x float> %1804, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !87
  %1806 = shufflevector <4 x float> %1777, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1807 = shufflevector <16 x float> %1805, <16 x float> %1806, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !87
  %1808 = shufflevector <2 x float> %1776, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !87
  %1809 = shufflevector <16 x float> %1807, <16 x float> %1808, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !87
  %1810 = shufflevector <16 x float> %1809, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1>, !dbg !87
  %1811 = fadd <32 x float> %1810, %1802, !dbg !87
  %1812 = extractelement <32 x float> %1811, i64 2, !dbg !88
  %1813 = fcmp olt float %1355, %1812, !dbg !89
  %1814 = extractelement <32 x float> %1811, i64 3, !dbg !88
  %1815 = fcmp olt float %1356, %1814, !dbg !89
  %1816 = extractelement <32 x float> %1811, i64 4, !dbg !88
  %1817 = fcmp olt float %1357, %1816, !dbg !89
  %1818 = extractelement <32 x float> %1811, i64 5, !dbg !88
  %1819 = fcmp olt float %1358, %1818, !dbg !89
  %1820 = extractelement <32 x float> %1811, i64 6, !dbg !88
  %1821 = fcmp olt float %1359, %1820, !dbg !89
  %1822 = extractelement <32 x float> %1811, i64 7, !dbg !88
  %1823 = fcmp olt float %1360, %1822, !dbg !89
  %1824 = extractelement <32 x float> %1811, i64 8, !dbg !88
  %1825 = extractelement <32 x float> %1811, i64 9, !dbg !88
  %1826 = extractelement <32 x float> %1811, i64 10, !dbg !88
  %1827 = extractelement <32 x float> %1811, i64 11, !dbg !88
  %1828 = extractelement <32 x float> %1811, i64 12, !dbg !88
  %1829 = extractelement <32 x float> %1811, i64 13, !dbg !88
  %1830 = extractelement <32 x float> %1811, i64 14, !dbg !88
  %1831 = extractelement <32 x float> %1811, i64 15, !dbg !88
  %1832 = extractelement <32 x float> %1811, i64 16, !dbg !88
  %1833 = extractelement <32 x float> %1811, i64 17, !dbg !88
  %1834 = extractelement <32 x float> %1811, i64 18, !dbg !88
  %1835 = extractelement <32 x float> %1811, i64 19, !dbg !88
  %1836 = extractelement <32 x float> %1811, i64 20, !dbg !88
  %1837 = extractelement <32 x float> %1811, i64 21, !dbg !88
  %1838 = extractelement <32 x float> %1811, i64 22, !dbg !88
  %1839 = extractelement <32 x float> %1811, i64 23, !dbg !88
  %1840 = extractelement <32 x float> %1811, i64 24, !dbg !88
  %1841 = extractelement <32 x float> %1811, i64 25, !dbg !88
  %1842 = extractelement <32 x float> %1811, i64 26, !dbg !88
  %1843 = extractelement <32 x float> %1811, i64 27, !dbg !88
  %1844 = extractelement <32 x float> %1811, i64 28, !dbg !88
  %1845 = extractelement <32 x float> %1811, i64 29, !dbg !88
  %1846 = or i1 %1683, %1813, !dbg !90
  %1847 = or i1 %1684, %1815, !dbg !90
  %1848 = or i1 %1685, %1817, !dbg !90
  %1849 = or i1 %1686, %1819, !dbg !90
  %1850 = or i1 %1687, %1821, !dbg !90
  %1851 = or i1 %1688, %1823, !dbg !90
  %1852 = select i1 %1846, float %1355, float %1812, !dbg !91
  %1853 = select i1 %1847, float %1356, float %1814, !dbg !91
  %1854 = select i1 %1848, float %1357, float %1816, !dbg !91
  %1855 = select i1 %1849, float %1358, float %1818, !dbg !91
  %1856 = select i1 %1850, float %1359, float %1820, !dbg !91
  %1857 = select i1 %1851, float %1360, float %1822, !dbg !91
  %1858 = shufflevector <32 x float> %1811, <32 x float> poison, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !89
  %1859 = fcmp olt <8 x float> %1364, %1858, !dbg !89
  %1860 = or <8 x i1> %1689, %1859, !dbg !90
  %1861 = select <8 x i1> %1860, <8 x float> %1364, <8 x float> %1858, !dbg !91
  %1862 = select i1 %26, float %1852, float %1355, !dbg !58
  %1863 = select i1 %26, float %1853, float %1356, !dbg !58
  %1864 = select i1 %26, float %1854, float %1357, !dbg !58
  %1865 = select i1 %26, float %1855, float %1358, !dbg !58
  %1866 = select i1 %26, float %1856, float %1359, !dbg !58
  %1867 = select i1 %26, float %1857, float %1360, !dbg !58
  %1868 = insertelement <8 x i1> poison, i1 %1393, i64 0, !dbg !58
  %1869 = shufflevector <8 x i1> %1868, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !58
  %1870 = select <8 x i1> %1869, <8 x float> %1861, <8 x float> %1364, !dbg !58
  %1871 = load <2 x float>, ptr addrspace(3) %1337, align 16, !dbg !76
  %1872 = fmul <2 x float> %1701, %1871, !dbg !86
  %1873 = fadd <2 x float> %1702, %1872, !dbg !87
  %1874 = extractelement <2 x float> %1873, i64 0, !dbg !88
  %1875 = extractelement <2 x float> %1873, i64 1, !dbg !88
  %1876 = shufflevector <2 x float> %1873, <2 x float> poison, <32 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %1877 = shufflevector <32 x float> %1876, <32 x float> %1811, <16 x i32> <i32 1, i32 0, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48>, !dbg !89
  %1878 = fcmp olt <16 x float> %1363, %1877, !dbg !89
  %1879 = or <16 x i1> %1690, %1878, !dbg !90
  %1880 = select <16 x i1> %1879, <16 x float> %1363, <16 x float> %1877, !dbg !91
  %1881 = fcmp ogt <32 x float> %1362, %1811, !dbg !92
  %1882 = fcmp olt <32 x float> %1362, %1811, !dbg !92
  %1883 = shufflevector <32 x i1> %1881, <32 x i1> %1882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 62, i32 63>, !dbg !92
  %1884 = or <32 x i1> %1682, %1883, !dbg !93
  %1885 = select <32 x i1> %1884, <32 x float> %1362, <32 x float> %1811, !dbg !94
  %1886 = insertelement <16 x i1> %1352, i1 %1394, i64 1, !dbg !58
  %1887 = shufflevector <16 x i1> %1886, <16 x i1> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, !dbg !58
  %1888 = select <16 x i1> %1887, <16 x float> %1880, <16 x float> %1363, !dbg !58
  %1889 = fcmp ogt <2 x float> %1361, %1873, !dbg !92
  %1890 = or <2 x i1> %1691, %1889, !dbg !93
  %1891 = select <2 x i1> %1890, <2 x float> %1361, <2 x float> %1873, !dbg !94
  %1892 = select <2 x i1> %1350, <2 x float> %1891, <2 x float> %1361, !dbg !57
  %1893 = insertelement <32 x i1> %1351, i1 %1393, i64 1, !dbg !57
  %1894 = insertelement <32 x i1> %1893, i1 %639, i64 2, !dbg !57
  %1895 = insertelement <32 x i1> %1894, i1 %1394, i64 3, !dbg !57
  %1896 = shufflevector <32 x i1> %1895, <32 x i1> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0>, !dbg !57
  %1897 = select <32 x i1> %1896, <32 x float> %1885, <32 x float> %1362, !dbg !57
  %1898 = sext i32 %1380 to i64, !dbg !95
  %1899 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1898, !dbg !95
  %1900 = sext i32 %1382 to i64, !dbg !95
  %1901 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1900, !dbg !95
  %1902 = sext i32 %1383 to i64, !dbg !95
  %1903 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1902, !dbg !95
  %1904 = sext i32 %1384 to i64, !dbg !95
  %1905 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1904, !dbg !95
  %1906 = extractelement <32 x float> %1811, i64 0, !dbg !88
  %1907 = fptrunc float %1906 to bfloat, !dbg !88
  %1908 = extractelement <32 x float> %1811, i64 1, !dbg !88
  %1909 = fptrunc float %1908 to bfloat, !dbg !88
  %1910 = fptrunc float %1812 to bfloat, !dbg !88
  %1911 = fptrunc float %1814 to bfloat, !dbg !88
  %1912 = fptrunc float %1816 to bfloat, !dbg !88
  %1913 = fptrunc float %1818 to bfloat, !dbg !88
  %1914 = fptrunc float %1820 to bfloat, !dbg !88
  %1915 = fptrunc float %1822 to bfloat, !dbg !88
  %1916 = fptrunc float %1824 to bfloat, !dbg !88
  %1917 = fptrunc float %1825 to bfloat, !dbg !88
  %1918 = fptrunc float %1826 to bfloat, !dbg !88
  %1919 = fptrunc float %1827 to bfloat, !dbg !88
  %1920 = fptrunc float %1828 to bfloat, !dbg !88
  %1921 = fptrunc float %1829 to bfloat, !dbg !88
  %1922 = fptrunc float %1830 to bfloat, !dbg !88
  %1923 = fptrunc float %1831 to bfloat, !dbg !88
  %1924 = fptrunc float %1874 to bfloat, !dbg !88
  %1925 = fptrunc float %1875 to bfloat, !dbg !88
  %1926 = fptrunc float %1832 to bfloat, !dbg !88
  %1927 = fptrunc float %1833 to bfloat, !dbg !88
  %1928 = fptrunc float %1834 to bfloat, !dbg !88
  %1929 = fptrunc float %1835 to bfloat, !dbg !88
  %1930 = fptrunc float %1836 to bfloat, !dbg !88
  %1931 = fptrunc float %1837 to bfloat, !dbg !88
  %1932 = fptrunc float %1838 to bfloat, !dbg !88
  %1933 = fptrunc float %1839 to bfloat, !dbg !88
  %1934 = fptrunc float %1840 to bfloat, !dbg !88
  %1935 = fptrunc float %1841 to bfloat, !dbg !88
  %1936 = fptrunc float %1842 to bfloat, !dbg !88
  %1937 = fptrunc float %1843 to bfloat, !dbg !88
  %1938 = fptrunc float %1844 to bfloat, !dbg !88
  %1939 = fptrunc float %1845 to bfloat, !dbg !88
  %1940 = insertelement <2 x bfloat> poison, bfloat %1907, i64 0, !dbg !88
  %1941 = insertelement <2 x bfloat> %1940, bfloat %1909, i64 1, !dbg !88
  %1942 = bitcast <2 x bfloat> %1941 to i32, !dbg !88
  %1943 = insertelement <2 x bfloat> poison, bfloat %1910, i64 0, !dbg !88
  %1944 = insertelement <2 x bfloat> %1943, bfloat %1911, i64 1, !dbg !88
  %1945 = bitcast <2 x bfloat> %1944 to i32, !dbg !88
  %1946 = insertelement <2 x bfloat> poison, bfloat %1912, i64 0, !dbg !88
  %1947 = insertelement <2 x bfloat> %1946, bfloat %1913, i64 1, !dbg !88
  %1948 = bitcast <2 x bfloat> %1947 to i32, !dbg !88
  %1949 = insertelement <2 x bfloat> poison, bfloat %1914, i64 0, !dbg !88
  %1950 = insertelement <2 x bfloat> %1949, bfloat %1915, i64 1, !dbg !88
  %1951 = bitcast <2 x bfloat> %1950 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1942, i32 %1945, i32 %1948, i32 %1951, ptr addrspace(1) %1899, i1 %26) #5, !dbg !88
  %1952 = insertelement <2 x bfloat> poison, bfloat %1916, i64 0, !dbg !88
  %1953 = insertelement <2 x bfloat> %1952, bfloat %1917, i64 1, !dbg !88
  %1954 = bitcast <2 x bfloat> %1953 to i32, !dbg !88
  %1955 = insertelement <2 x bfloat> poison, bfloat %1918, i64 0, !dbg !88
  %1956 = insertelement <2 x bfloat> %1955, bfloat %1919, i64 1, !dbg !88
  %1957 = bitcast <2 x bfloat> %1956 to i32, !dbg !88
  %1958 = insertelement <2 x bfloat> poison, bfloat %1920, i64 0, !dbg !88
  %1959 = insertelement <2 x bfloat> %1958, bfloat %1921, i64 1, !dbg !88
  %1960 = bitcast <2 x bfloat> %1959 to i32, !dbg !88
  %1961 = insertelement <2 x bfloat> poison, bfloat %1922, i64 0, !dbg !88
  %1962 = insertelement <2 x bfloat> %1961, bfloat %1923, i64 1, !dbg !88
  %1963 = bitcast <2 x bfloat> %1962 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1954, i32 %1957, i32 %1960, i32 %1963, ptr addrspace(1) %1901, i1 %1393) #5, !dbg !88
  %1964 = insertelement <2 x bfloat> poison, bfloat %1924, i64 0, !dbg !88
  %1965 = insertelement <2 x bfloat> %1964, bfloat %1925, i64 1, !dbg !88
  %1966 = bitcast <2 x bfloat> %1965 to i32, !dbg !88
  %1967 = insertelement <2 x bfloat> poison, bfloat %1926, i64 0, !dbg !88
  %1968 = insertelement <2 x bfloat> %1967, bfloat %1927, i64 1, !dbg !88
  %1969 = bitcast <2 x bfloat> %1968 to i32, !dbg !88
  %1970 = insertelement <2 x bfloat> poison, bfloat %1928, i64 0, !dbg !88
  %1971 = insertelement <2 x bfloat> %1970, bfloat %1929, i64 1, !dbg !88
  %1972 = bitcast <2 x bfloat> %1971 to i32, !dbg !88
  %1973 = insertelement <2 x bfloat> poison, bfloat %1930, i64 0, !dbg !88
  %1974 = insertelement <2 x bfloat> %1973, bfloat %1931, i64 1, !dbg !88
  %1975 = bitcast <2 x bfloat> %1974 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1966, i32 %1969, i32 %1972, i32 %1975, ptr addrspace(1) %1903, i1 %639) #5, !dbg !88
  %1976 = insertelement <2 x bfloat> poison, bfloat %1932, i64 0, !dbg !88
  %1977 = insertelement <2 x bfloat> %1976, bfloat %1933, i64 1, !dbg !88
  %1978 = bitcast <2 x bfloat> %1977 to i32, !dbg !88
  %1979 = insertelement <2 x bfloat> poison, bfloat %1934, i64 0, !dbg !88
  %1980 = insertelement <2 x bfloat> %1979, bfloat %1935, i64 1, !dbg !88
  %1981 = bitcast <2 x bfloat> %1980 to i32, !dbg !88
  %1982 = insertelement <2 x bfloat> poison, bfloat %1936, i64 0, !dbg !88
  %1983 = insertelement <2 x bfloat> %1982, bfloat %1937, i64 1, !dbg !88
  %1984 = bitcast <2 x bfloat> %1983 to i32, !dbg !88
  %1985 = insertelement <2 x bfloat> poison, bfloat %1938, i64 0, !dbg !88
  %1986 = insertelement <2 x bfloat> %1985, bfloat %1939, i64 1, !dbg !88
  %1987 = bitcast <2 x bfloat> %1986 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1978, i32 %1981, i32 %1984, i32 %1987, ptr addrspace(1) %1905, i1 %1394) #5, !dbg !88
  br i1 %1354, label %1353, label %1988, !dbg !56

1988:                                             ; preds = %1353
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %1989 = extractelement <32 x float> %1897, i64 30, !dbg !98
  %1990 = extractelement <32 x float> %1897, i64 31, !dbg !98
  %1991 = fcmp olt float %1989, %1990, !dbg !98
  %1992 = fcmp uno float %1989, 0.000000e+00, !dbg !99
  %1993 = or i1 %1991, %1992, !dbg !100
  %1994 = select i1 %1993, float %1989, float %1990, !dbg !101
  %1995 = fcmp olt float %1994, %1862, !dbg !98
  %1996 = fcmp uno float %1994, 0.000000e+00, !dbg !99
  %1997 = or i1 %1995, %1996, !dbg !100
  %1998 = select i1 %1997, float %1994, float %1862, !dbg !101
  %1999 = fcmp olt float %1998, %1863, !dbg !98
  %2000 = fcmp uno float %1998, 0.000000e+00, !dbg !99
  %2001 = or i1 %1999, %2000, !dbg !100
  %2002 = select i1 %2001, float %1998, float %1863, !dbg !101
  %2003 = fcmp olt float %2002, %1864, !dbg !98
  %2004 = fcmp uno float %2002, 0.000000e+00, !dbg !99
  %2005 = or i1 %2003, %2004, !dbg !100
  %2006 = select i1 %2005, float %2002, float %1864, !dbg !101
  %2007 = fcmp olt float %2006, %1865, !dbg !98
  %2008 = fcmp uno float %2006, 0.000000e+00, !dbg !99
  %2009 = or i1 %2007, %2008, !dbg !100
  %2010 = select i1 %2009, float %2006, float %1865, !dbg !101
  %2011 = fcmp olt float %2010, %1866, !dbg !98
  %2012 = fcmp uno float %2010, 0.000000e+00, !dbg !99
  %2013 = or i1 %2011, %2012, !dbg !100
  %2014 = select i1 %2013, float %2010, float %1866, !dbg !101
  %2015 = fcmp olt float %2014, %1867, !dbg !98
  %2016 = fcmp uno float %2014, 0.000000e+00, !dbg !99
  %2017 = or i1 %2015, %2016, !dbg !100
  %2018 = select i1 %2017, float %2014, float %1867, !dbg !101
  %2019 = extractelement <8 x float> %1870, i64 0, !dbg !98
  %2020 = fcmp olt float %2018, %2019, !dbg !98
  %2021 = fcmp uno float %2018, 0.000000e+00, !dbg !99
  %2022 = or i1 %2020, %2021, !dbg !100
  %2023 = select i1 %2022, float %2018, float %2019, !dbg !101
  %2024 = extractelement <8 x float> %1870, i64 1, !dbg !98
  %2025 = fcmp olt float %2023, %2024, !dbg !98
  %2026 = fcmp uno float %2023, 0.000000e+00, !dbg !99
  %2027 = or i1 %2025, %2026, !dbg !100
  %2028 = select i1 %2027, float %2023, float %2024, !dbg !101
  %2029 = extractelement <8 x float> %1870, i64 2, !dbg !98
  %2030 = fcmp olt float %2028, %2029, !dbg !98
  %2031 = fcmp uno float %2028, 0.000000e+00, !dbg !99
  %2032 = or i1 %2030, %2031, !dbg !100
  %2033 = select i1 %2032, float %2028, float %2029, !dbg !101
  %2034 = extractelement <8 x float> %1870, i64 3, !dbg !98
  %2035 = fcmp olt float %2033, %2034, !dbg !98
  %2036 = fcmp uno float %2033, 0.000000e+00, !dbg !99
  %2037 = or i1 %2035, %2036, !dbg !100
  %2038 = select i1 %2037, float %2033, float %2034, !dbg !101
  %2039 = extractelement <8 x float> %1870, i64 4, !dbg !98
  %2040 = fcmp olt float %2038, %2039, !dbg !98
  %2041 = fcmp uno float %2038, 0.000000e+00, !dbg !99
  %2042 = or i1 %2040, %2041, !dbg !100
  %2043 = select i1 %2042, float %2038, float %2039, !dbg !101
  %2044 = extractelement <8 x float> %1870, i64 5, !dbg !98
  %2045 = fcmp olt float %2043, %2044, !dbg !98
  %2046 = fcmp uno float %2043, 0.000000e+00, !dbg !99
  %2047 = or i1 %2045, %2046, !dbg !100
  %2048 = select i1 %2047, float %2043, float %2044, !dbg !101
  %2049 = extractelement <8 x float> %1870, i64 6, !dbg !98
  %2050 = fcmp olt float %2048, %2049, !dbg !98
  %2051 = fcmp uno float %2048, 0.000000e+00, !dbg !99
  %2052 = or i1 %2050, %2051, !dbg !100
  %2053 = select i1 %2052, float %2048, float %2049, !dbg !101
  %2054 = extractelement <8 x float> %1870, i64 7, !dbg !98
  %2055 = fcmp olt float %2053, %2054, !dbg !98
  %2056 = fcmp uno float %2053, 0.000000e+00, !dbg !99
  %2057 = or i1 %2055, %2056, !dbg !100
  %2058 = select i1 %2057, float %2053, float %2054, !dbg !101
  %2059 = extractelement <16 x float> %1888, i64 0, !dbg !98
  %2060 = extractelement <16 x float> %1888, i64 1, !dbg !98
  %2061 = fcmp olt float %2060, %2059, !dbg !98
  %2062 = fcmp uno float %2060, 0.000000e+00, !dbg !99
  %2063 = or i1 %2061, %2062, !dbg !100
  %2064 = select i1 %2063, float %2060, float %2059, !dbg !101
  %2065 = extractelement <16 x float> %1888, i64 15, !dbg !98
  %2066 = fcmp olt float %2064, %2065, !dbg !98
  %2067 = fcmp uno float %2064, 0.000000e+00, !dbg !99
  %2068 = or i1 %2066, %2067, !dbg !100
  %2069 = select i1 %2068, float %2064, float %2065, !dbg !101
  %2070 = extractelement <16 x float> %1888, i64 14, !dbg !98
  %2071 = fcmp olt float %2069, %2070, !dbg !98
  %2072 = fcmp uno float %2069, 0.000000e+00, !dbg !99
  %2073 = or i1 %2071, %2072, !dbg !100
  %2074 = select i1 %2073, float %2069, float %2070, !dbg !101
  %2075 = extractelement <16 x float> %1888, i64 13, !dbg !98
  %2076 = fcmp olt float %2074, %2075, !dbg !98
  %2077 = fcmp uno float %2074, 0.000000e+00, !dbg !99
  %2078 = or i1 %2076, %2077, !dbg !100
  %2079 = select i1 %2078, float %2074, float %2075, !dbg !101
  %2080 = extractelement <16 x float> %1888, i64 12, !dbg !98
  %2081 = fcmp olt float %2079, %2080, !dbg !98
  %2082 = fcmp uno float %2079, 0.000000e+00, !dbg !99
  %2083 = or i1 %2081, %2082, !dbg !100
  %2084 = select i1 %2083, float %2079, float %2080, !dbg !101
  %2085 = extractelement <16 x float> %1888, i64 11, !dbg !98
  %2086 = fcmp olt float %2084, %2085, !dbg !98
  %2087 = fcmp uno float %2084, 0.000000e+00, !dbg !99
  %2088 = or i1 %2086, %2087, !dbg !100
  %2089 = select i1 %2088, float %2084, float %2085, !dbg !101
  %2090 = extractelement <16 x float> %1888, i64 10, !dbg !98
  %2091 = fcmp olt float %2089, %2090, !dbg !98
  %2092 = fcmp uno float %2089, 0.000000e+00, !dbg !99
  %2093 = or i1 %2091, %2092, !dbg !100
  %2094 = select i1 %2093, float %2089, float %2090, !dbg !101
  %2095 = extractelement <16 x float> %1888, i64 9, !dbg !98
  %2096 = fcmp olt float %2094, %2095, !dbg !98
  %2097 = fcmp uno float %2094, 0.000000e+00, !dbg !99
  %2098 = or i1 %2096, %2097, !dbg !100
  %2099 = select i1 %2098, float %2094, float %2095, !dbg !101
  %2100 = extractelement <16 x float> %1888, i64 8, !dbg !98
  %2101 = fcmp olt float %2099, %2100, !dbg !98
  %2102 = fcmp uno float %2099, 0.000000e+00, !dbg !99
  %2103 = or i1 %2101, %2102, !dbg !100
  %2104 = select i1 %2103, float %2099, float %2100, !dbg !101
  %2105 = extractelement <16 x float> %1888, i64 7, !dbg !98
  %2106 = fcmp olt float %2104, %2105, !dbg !98
  %2107 = fcmp uno float %2104, 0.000000e+00, !dbg !99
  %2108 = or i1 %2106, %2107, !dbg !100
  %2109 = select i1 %2108, float %2104, float %2105, !dbg !101
  %2110 = extractelement <16 x float> %1888, i64 6, !dbg !98
  %2111 = fcmp olt float %2109, %2110, !dbg !98
  %2112 = fcmp uno float %2109, 0.000000e+00, !dbg !99
  %2113 = or i1 %2111, %2112, !dbg !100
  %2114 = select i1 %2113, float %2109, float %2110, !dbg !101
  %2115 = extractelement <16 x float> %1888, i64 5, !dbg !98
  %2116 = fcmp olt float %2114, %2115, !dbg !98
  %2117 = fcmp uno float %2114, 0.000000e+00, !dbg !99
  %2118 = or i1 %2116, %2117, !dbg !100
  %2119 = select i1 %2118, float %2114, float %2115, !dbg !101
  %2120 = extractelement <16 x float> %1888, i64 4, !dbg !98
  %2121 = fcmp olt float %2119, %2120, !dbg !98
  %2122 = fcmp uno float %2119, 0.000000e+00, !dbg !99
  %2123 = or i1 %2121, %2122, !dbg !100
  %2124 = select i1 %2123, float %2119, float %2120, !dbg !101
  %2125 = extractelement <16 x float> %1888, i64 3, !dbg !98
  %2126 = fcmp olt float %2124, %2125, !dbg !98
  %2127 = fcmp uno float %2124, 0.000000e+00, !dbg !99
  %2128 = or i1 %2126, %2127, !dbg !100
  %2129 = select i1 %2128, float %2124, float %2125, !dbg !101
  %2130 = extractelement <16 x float> %1888, i64 2, !dbg !98
  %2131 = fcmp olt float %2129, %2130, !dbg !98
  %2132 = fcmp uno float %2129, 0.000000e+00, !dbg !99
  %2133 = or i1 %2131, %2132, !dbg !100
  %2134 = select i1 %2133, float %2129, float %2130, !dbg !101
  %2135 = bitcast float %2058 to i32, !dbg !96
  %2136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2135, i32 16, i32 31), !dbg !96
  %2137 = bitcast i32 %2136 to float, !dbg !96
  %2138 = fcmp olt float %2058, %2137, !dbg !98
  %2139 = fcmp uno float %2058, 0.000000e+00, !dbg !99
  %2140 = or i1 %2139, %2138, !dbg !100
  %2141 = select i1 %2140, float %2058, float %2137, !dbg !101
  %2142 = bitcast float %2141 to i32, !dbg !96
  %2143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2142, i32 8, i32 31), !dbg !96
  %2144 = bitcast i32 %2143 to float, !dbg !96
  %2145 = fcmp olt float %2141, %2144, !dbg !98
  %2146 = fcmp uno float %2141, 0.000000e+00, !dbg !99
  %2147 = or i1 %2145, %2146, !dbg !100
  %2148 = select i1 %2147, float %2141, float %2144, !dbg !101
  %2149 = bitcast float %2148 to i32, !dbg !96
  %2150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2149, i32 4, i32 31), !dbg !96
  %2151 = bitcast i32 %2150 to float, !dbg !96
  %2152 = fcmp olt float %2148, %2151, !dbg !98
  %2153 = fcmp uno float %2148, 0.000000e+00, !dbg !99
  %2154 = or i1 %2152, %2153, !dbg !100
  %2155 = select i1 %2154, float %2148, float %2151, !dbg !101
  %2156 = bitcast float %2155 to i32, !dbg !96
  %2157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2156, i32 2, i32 31), !dbg !96
  %2158 = bitcast i32 %2157 to float, !dbg !96
  %2159 = fcmp olt float %2155, %2158, !dbg !98
  %2160 = fcmp uno float %2155, 0.000000e+00, !dbg !99
  %2161 = or i1 %2159, %2160, !dbg !100
  %2162 = select i1 %2161, float %2155, float %2158, !dbg !101
  %2163 = bitcast float %2162 to i32, !dbg !96
  %2164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2163, i32 1, i32 31), !dbg !96
  %2165 = bitcast i32 %2164 to float, !dbg !96
  %2166 = fcmp olt float %2162, %2165, !dbg !98
  %2167 = fcmp uno float %2162, 0.000000e+00, !dbg !99
  %2168 = or i1 %2166, %2167, !dbg !100
  %2169 = bitcast float %2134 to i32, !dbg !96
  %2170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2169, i32 16, i32 31), !dbg !96
  %2171 = bitcast i32 %2170 to float, !dbg !96
  %2172 = fcmp olt float %2134, %2171, !dbg !98
  %2173 = fcmp uno float %2134, 0.000000e+00, !dbg !99
  %2174 = or i1 %2173, %2172, !dbg !100
  %2175 = select i1 %2174, float %2134, float %2171, !dbg !101
  %2176 = bitcast float %2175 to i32, !dbg !96
  %2177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2176, i32 8, i32 31), !dbg !96
  %2178 = bitcast i32 %2177 to float, !dbg !96
  %2179 = fcmp olt float %2175, %2178, !dbg !98
  %2180 = fcmp uno float %2175, 0.000000e+00, !dbg !99
  %2181 = or i1 %2179, %2180, !dbg !100
  %2182 = select i1 %2181, float %2175, float %2178, !dbg !101
  %2183 = bitcast float %2182 to i32, !dbg !96
  %2184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2183, i32 4, i32 31), !dbg !96
  %2185 = bitcast i32 %2184 to float, !dbg !96
  %2186 = fcmp olt float %2182, %2185, !dbg !98
  %2187 = fcmp uno float %2182, 0.000000e+00, !dbg !99
  %2188 = or i1 %2186, %2187, !dbg !100
  %2189 = select i1 %2188, float %2182, float %2185, !dbg !101
  %2190 = bitcast float %2189 to i32, !dbg !96
  %2191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2190, i32 2, i32 31), !dbg !96
  %2192 = bitcast i32 %2191 to float, !dbg !96
  %2193 = fcmp olt float %2189, %2192, !dbg !98
  %2194 = fcmp uno float %2189, 0.000000e+00, !dbg !99
  %2195 = or i1 %2193, %2194, !dbg !100
  %2196 = select i1 %2195, float %2189, float %2192, !dbg !101
  %2197 = bitcast float %2196 to i32, !dbg !96
  %2198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2197, i32 1, i32 31), !dbg !96
  %2199 = bitcast i32 %2198 to float, !dbg !96
  %2200 = fcmp olt float %2196, %2199, !dbg !98
  %2201 = fcmp uno float %2196, 0.000000e+00, !dbg !99
  %2202 = or i1 %2200, %2201, !dbg !100
  %2203 = select i1 %2168, i32 %2163, i32 %2164, !dbg !101
  %2204 = insertelement <1 x i32> poison, i32 %2203, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1215, <1 x i32> %2204, i1 %1214) #5, !dbg !96
  %2205 = select i1 %2202, i32 %2197, i32 %2198, !dbg !101
  %2206 = insertelement <1 x i32> poison, i32 %2205, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1222, <1 x i32> %2206, i1 %1214) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %2207 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1229, i1 %1228) #5, !dbg !96
  %2208 = bitcast i32 %2207 to float, !dbg !96
  %2209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2207, i32 2, i32 31), !dbg !96
  %2210 = bitcast i32 %2209 to float, !dbg !96
  %2211 = fcmp olt float %2208, %2210, !dbg !98
  %2212 = fcmp uno float %2208, 0.000000e+00, !dbg !99
  %2213 = or i1 %2212, %2211, !dbg !100
  %2214 = select i1 %2213, float %2208, float %2210, !dbg !101
  %2215 = bitcast float %2214 to i32, !dbg !96
  %2216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2215, i32 1, i32 31), !dbg !96
  %2217 = bitcast i32 %2216 to float, !dbg !96
  %2218 = fcmp olt float %2214, %2217, !dbg !98
  %2219 = fcmp uno float %2214, 0.000000e+00, !dbg !99
  %2220 = or i1 %2218, %2219, !dbg !100
  %2221 = select i1 %2220, i32 %2215, i32 %2216, !dbg !101
  %2222 = insertelement <1 x i32> poison, i32 %2221, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1229, <1 x i32> %2222, i1 %1279) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %2223 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !96
  %2224 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %2225 = bitcast float %2223 to i32, !dbg !102
  %2226 = bitcast float %2224 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2225, i32 %2226, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %2227 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23, !dbg !102
  %2228 = load float, ptr addrspace(3) %2227, align 4, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %2229 = extractelement <32 x float> %1897, i64 0, !dbg !105
  %2230 = extractelement <32 x float> %1897, i64 1, !dbg !105
  %2231 = fcmp ogt float %2229, %2230, !dbg !105
  %2232 = fcmp uno float %2229, 0.000000e+00, !dbg !106
  %2233 = or i1 %2231, %2232, !dbg !107
  %2234 = select i1 %2233, float %2229, float %2230, !dbg !108
  %2235 = extractelement <32 x float> %1897, i64 2, !dbg !105
  %2236 = fcmp ogt float %2234, %2235, !dbg !105
  %2237 = fcmp uno float %2234, 0.000000e+00, !dbg !106
  %2238 = or i1 %2236, %2237, !dbg !107
  %2239 = select i1 %2238, float %2234, float %2235, !dbg !108
  %2240 = extractelement <32 x float> %1897, i64 3, !dbg !105
  %2241 = fcmp ogt float %2239, %2240, !dbg !105
  %2242 = fcmp uno float %2239, 0.000000e+00, !dbg !106
  %2243 = or i1 %2241, %2242, !dbg !107
  %2244 = select i1 %2243, float %2239, float %2240, !dbg !108
  %2245 = extractelement <32 x float> %1897, i64 4, !dbg !105
  %2246 = fcmp ogt float %2244, %2245, !dbg !105
  %2247 = fcmp uno float %2244, 0.000000e+00, !dbg !106
  %2248 = or i1 %2246, %2247, !dbg !107
  %2249 = select i1 %2248, float %2244, float %2245, !dbg !108
  %2250 = extractelement <32 x float> %1897, i64 5, !dbg !105
  %2251 = fcmp ogt float %2249, %2250, !dbg !105
  %2252 = fcmp uno float %2249, 0.000000e+00, !dbg !106
  %2253 = or i1 %2251, %2252, !dbg !107
  %2254 = select i1 %2253, float %2249, float %2250, !dbg !108
  %2255 = extractelement <32 x float> %1897, i64 6, !dbg !105
  %2256 = fcmp ogt float %2254, %2255, !dbg !105
  %2257 = fcmp uno float %2254, 0.000000e+00, !dbg !106
  %2258 = or i1 %2256, %2257, !dbg !107
  %2259 = select i1 %2258, float %2254, float %2255, !dbg !108
  %2260 = extractelement <32 x float> %1897, i64 7, !dbg !105
  %2261 = fcmp ogt float %2259, %2260, !dbg !105
  %2262 = fcmp uno float %2259, 0.000000e+00, !dbg !106
  %2263 = or i1 %2261, %2262, !dbg !107
  %2264 = select i1 %2263, float %2259, float %2260, !dbg !108
  %2265 = extractelement <32 x float> %1897, i64 8, !dbg !105
  %2266 = fcmp ogt float %2264, %2265, !dbg !105
  %2267 = fcmp uno float %2264, 0.000000e+00, !dbg !106
  %2268 = or i1 %2266, %2267, !dbg !107
  %2269 = select i1 %2268, float %2264, float %2265, !dbg !108
  %2270 = extractelement <32 x float> %1897, i64 9, !dbg !105
  %2271 = fcmp ogt float %2269, %2270, !dbg !105
  %2272 = fcmp uno float %2269, 0.000000e+00, !dbg !106
  %2273 = or i1 %2271, %2272, !dbg !107
  %2274 = select i1 %2273, float %2269, float %2270, !dbg !108
  %2275 = extractelement <32 x float> %1897, i64 10, !dbg !105
  %2276 = fcmp ogt float %2274, %2275, !dbg !105
  %2277 = fcmp uno float %2274, 0.000000e+00, !dbg !106
  %2278 = or i1 %2276, %2277, !dbg !107
  %2279 = select i1 %2278, float %2274, float %2275, !dbg !108
  %2280 = extractelement <32 x float> %1897, i64 11, !dbg !105
  %2281 = fcmp ogt float %2279, %2280, !dbg !105
  %2282 = fcmp uno float %2279, 0.000000e+00, !dbg !106
  %2283 = or i1 %2281, %2282, !dbg !107
  %2284 = select i1 %2283, float %2279, float %2280, !dbg !108
  %2285 = extractelement <32 x float> %1897, i64 12, !dbg !105
  %2286 = fcmp ogt float %2284, %2285, !dbg !105
  %2287 = fcmp uno float %2284, 0.000000e+00, !dbg !106
  %2288 = or i1 %2286, %2287, !dbg !107
  %2289 = select i1 %2288, float %2284, float %2285, !dbg !108
  %2290 = extractelement <32 x float> %1897, i64 13, !dbg !105
  %2291 = fcmp ogt float %2289, %2290, !dbg !105
  %2292 = fcmp uno float %2289, 0.000000e+00, !dbg !106
  %2293 = or i1 %2291, %2292, !dbg !107
  %2294 = select i1 %2293, float %2289, float %2290, !dbg !108
  %2295 = extractelement <32 x float> %1897, i64 14, !dbg !105
  %2296 = fcmp ogt float %2294, %2295, !dbg !105
  %2297 = fcmp uno float %2294, 0.000000e+00, !dbg !106
  %2298 = or i1 %2296, %2297, !dbg !107
  %2299 = select i1 %2298, float %2294, float %2295, !dbg !108
  %2300 = extractelement <32 x float> %1897, i64 15, !dbg !105
  %2301 = fcmp ogt float %2299, %2300, !dbg !105
  %2302 = fcmp uno float %2299, 0.000000e+00, !dbg !106
  %2303 = or i1 %2301, %2302, !dbg !107
  %2304 = select i1 %2303, float %2299, float %2300, !dbg !108
  %2305 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1892, <2 x i32> <i32 0, i32 2>, !dbg !105
  %2306 = fcmp ogt <2 x float> %2305, %1892, !dbg !105
  %2307 = fcmp uno <2 x float> %2305, %1892, !dbg !105
  %shift = shufflevector <2 x i1> %2306, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !107
  %2308 = or <2 x i1> %shift, %2307, !dbg !107
  %2309 = extractelement <2 x i1> %2308, i64 0, !dbg !107
  %2310 = extractelement <2 x float> %1892, i64 0, !dbg !108
  %2311 = extractelement <2 x float> %1892, i64 1, !dbg !108
  %2312 = select i1 %2309, float %2310, float %2311, !dbg !108
  %2313 = extractelement <32 x float> %1897, i64 16, !dbg !105
  %2314 = fcmp ogt float %2312, %2313, !dbg !105
  %2315 = fcmp uno float %2312, 0.000000e+00, !dbg !106
  %2316 = or i1 %2314, %2315, !dbg !107
  %2317 = select i1 %2316, float %2312, float %2313, !dbg !108
  %2318 = extractelement <32 x float> %1897, i64 17, !dbg !105
  %2319 = fcmp ogt float %2317, %2318, !dbg !105
  %2320 = fcmp uno float %2317, 0.000000e+00, !dbg !106
  %2321 = or i1 %2319, %2320, !dbg !107
  %2322 = select i1 %2321, float %2317, float %2318, !dbg !108
  %2323 = extractelement <32 x float> %1897, i64 18, !dbg !105
  %2324 = fcmp ogt float %2322, %2323, !dbg !105
  %2325 = fcmp uno float %2322, 0.000000e+00, !dbg !106
  %2326 = or i1 %2324, %2325, !dbg !107
  %2327 = select i1 %2326, float %2322, float %2323, !dbg !108
  %2328 = extractelement <32 x float> %1897, i64 19, !dbg !105
  %2329 = fcmp ogt float %2327, %2328, !dbg !105
  %2330 = fcmp uno float %2327, 0.000000e+00, !dbg !106
  %2331 = or i1 %2329, %2330, !dbg !107
  %2332 = select i1 %2331, float %2327, float %2328, !dbg !108
  %2333 = extractelement <32 x float> %1897, i64 20, !dbg !105
  %2334 = fcmp ogt float %2332, %2333, !dbg !105
  %2335 = fcmp uno float %2332, 0.000000e+00, !dbg !106
  %2336 = or i1 %2334, %2335, !dbg !107
  %2337 = select i1 %2336, float %2332, float %2333, !dbg !108
  %2338 = extractelement <32 x float> %1897, i64 21, !dbg !105
  %2339 = fcmp ogt float %2337, %2338, !dbg !105
  %2340 = fcmp uno float %2337, 0.000000e+00, !dbg !106
  %2341 = or i1 %2339, %2340, !dbg !107
  %2342 = select i1 %2341, float %2337, float %2338, !dbg !108
  %2343 = extractelement <32 x float> %1897, i64 22, !dbg !105
  %2344 = fcmp ogt float %2342, %2343, !dbg !105
  %2345 = fcmp uno float %2342, 0.000000e+00, !dbg !106
  %2346 = or i1 %2344, %2345, !dbg !107
  %2347 = select i1 %2346, float %2342, float %2343, !dbg !108
  %2348 = extractelement <32 x float> %1897, i64 23, !dbg !105
  %2349 = fcmp ogt float %2347, %2348, !dbg !105
  %2350 = fcmp uno float %2347, 0.000000e+00, !dbg !106
  %2351 = or i1 %2349, %2350, !dbg !107
  %2352 = select i1 %2351, float %2347, float %2348, !dbg !108
  %2353 = extractelement <32 x float> %1897, i64 24, !dbg !105
  %2354 = fcmp ogt float %2352, %2353, !dbg !105
  %2355 = fcmp uno float %2352, 0.000000e+00, !dbg !106
  %2356 = or i1 %2354, %2355, !dbg !107
  %2357 = select i1 %2356, float %2352, float %2353, !dbg !108
  %2358 = extractelement <32 x float> %1897, i64 25, !dbg !105
  %2359 = fcmp ogt float %2357, %2358, !dbg !105
  %2360 = fcmp uno float %2357, 0.000000e+00, !dbg !106
  %2361 = or i1 %2359, %2360, !dbg !107
  %2362 = select i1 %2361, float %2357, float %2358, !dbg !108
  %2363 = extractelement <32 x float> %1897, i64 26, !dbg !105
  %2364 = fcmp ogt float %2362, %2363, !dbg !105
  %2365 = fcmp uno float %2362, 0.000000e+00, !dbg !106
  %2366 = or i1 %2364, %2365, !dbg !107
  %2367 = select i1 %2366, float %2362, float %2363, !dbg !108
  %2368 = extractelement <32 x float> %1897, i64 27, !dbg !105
  %2369 = fcmp ogt float %2367, %2368, !dbg !105
  %2370 = fcmp uno float %2367, 0.000000e+00, !dbg !106
  %2371 = or i1 %2369, %2370, !dbg !107
  %2372 = select i1 %2371, float %2367, float %2368, !dbg !108
  %2373 = extractelement <32 x float> %1897, i64 28, !dbg !105
  %2374 = fcmp ogt float %2372, %2373, !dbg !105
  %2375 = fcmp uno float %2372, 0.000000e+00, !dbg !106
  %2376 = or i1 %2374, %2375, !dbg !107
  %2377 = select i1 %2376, float %2372, float %2373, !dbg !108
  %2378 = extractelement <32 x float> %1897, i64 29, !dbg !105
  %2379 = fcmp ogt float %2377, %2378, !dbg !105
  %2380 = fcmp uno float %2377, 0.000000e+00, !dbg !106
  %2381 = or i1 %2379, %2380, !dbg !107
  %2382 = select i1 %2381, float %2377, float %2378, !dbg !108
  %2383 = bitcast float %2304 to i32, !dbg !103
  %2384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2383, i32 16, i32 31), !dbg !103
  %2385 = bitcast i32 %2384 to float, !dbg !103
  %2386 = fcmp ogt float %2304, %2385, !dbg !105
  %2387 = fcmp uno float %2304, 0.000000e+00, !dbg !106
  %2388 = or i1 %2387, %2386, !dbg !107
  %2389 = select i1 %2388, float %2304, float %2385, !dbg !108
  %2390 = bitcast float %2389 to i32, !dbg !103
  %2391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2390, i32 8, i32 31), !dbg !103
  %2392 = bitcast i32 %2391 to float, !dbg !103
  %2393 = fcmp ogt float %2389, %2392, !dbg !105
  %2394 = fcmp uno float %2389, 0.000000e+00, !dbg !106
  %2395 = or i1 %2393, %2394, !dbg !107
  %2396 = select i1 %2395, float %2389, float %2392, !dbg !108
  %2397 = bitcast float %2396 to i32, !dbg !103
  %2398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2397, i32 4, i32 31), !dbg !103
  %2399 = bitcast i32 %2398 to float, !dbg !103
  %2400 = fcmp ogt float %2396, %2399, !dbg !105
  %2401 = fcmp uno float %2396, 0.000000e+00, !dbg !106
  %2402 = or i1 %2400, %2401, !dbg !107
  %2403 = select i1 %2402, float %2396, float %2399, !dbg !108
  %2404 = bitcast float %2403 to i32, !dbg !103
  %2405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2404, i32 2, i32 31), !dbg !103
  %2406 = bitcast i32 %2405 to float, !dbg !103
  %2407 = fcmp ogt float %2403, %2406, !dbg !105
  %2408 = fcmp uno float %2403, 0.000000e+00, !dbg !106
  %2409 = or i1 %2407, %2408, !dbg !107
  %2410 = select i1 %2409, float %2403, float %2406, !dbg !108
  %2411 = bitcast float %2410 to i32, !dbg !103
  %2412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2411, i32 1, i32 31), !dbg !103
  %2413 = bitcast i32 %2412 to float, !dbg !103
  %2414 = fcmp ogt float %2410, %2413, !dbg !105
  %2415 = fcmp uno float %2410, 0.000000e+00, !dbg !106
  %2416 = or i1 %2414, %2415, !dbg !107
  %2417 = bitcast float %2382 to i32, !dbg !103
  %2418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2417, i32 16, i32 31), !dbg !103
  %2419 = bitcast i32 %2418 to float, !dbg !103
  %2420 = fcmp ogt float %2382, %2419, !dbg !105
  %2421 = fcmp uno float %2382, 0.000000e+00, !dbg !106
  %2422 = or i1 %2421, %2420, !dbg !107
  %2423 = select i1 %2422, float %2382, float %2419, !dbg !108
  %2424 = bitcast float %2423 to i32, !dbg !103
  %2425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2424, i32 8, i32 31), !dbg !103
  %2426 = bitcast i32 %2425 to float, !dbg !103
  %2427 = fcmp ogt float %2423, %2426, !dbg !105
  %2428 = fcmp uno float %2423, 0.000000e+00, !dbg !106
  %2429 = or i1 %2427, %2428, !dbg !107
  %2430 = select i1 %2429, float %2423, float %2426, !dbg !108
  %2431 = bitcast float %2430 to i32, !dbg !103
  %2432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2431, i32 4, i32 31), !dbg !103
  %2433 = bitcast i32 %2432 to float, !dbg !103
  %2434 = fcmp ogt float %2430, %2433, !dbg !105
  %2435 = fcmp uno float %2430, 0.000000e+00, !dbg !106
  %2436 = or i1 %2434, %2435, !dbg !107
  %2437 = select i1 %2436, float %2430, float %2433, !dbg !108
  %2438 = bitcast float %2437 to i32, !dbg !103
  %2439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2438, i32 2, i32 31), !dbg !103
  %2440 = bitcast i32 %2439 to float, !dbg !103
  %2441 = fcmp ogt float %2437, %2440, !dbg !105
  %2442 = fcmp uno float %2437, 0.000000e+00, !dbg !106
  %2443 = or i1 %2441, %2442, !dbg !107
  %2444 = select i1 %2443, float %2437, float %2440, !dbg !108
  %2445 = bitcast float %2444 to i32, !dbg !103
  %2446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2445, i32 1, i32 31), !dbg !103
  %2447 = bitcast i32 %2446 to float, !dbg !103
  %2448 = fcmp ogt float %2444, %2447, !dbg !105
  %2449 = fcmp uno float %2444, 0.000000e+00, !dbg !106
  %2450 = or i1 %2448, %2449, !dbg !107
  %2451 = select i1 %2416, i32 %2411, i32 %2412, !dbg !108
  %2452 = insertelement <1 x i32> poison, i32 %2451, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1215, <1 x i32> %2452, i1 %1214) #5, !dbg !103
  %2453 = select i1 %2450, i32 %2445, i32 %2446, !dbg !108
  %2454 = insertelement <1 x i32> poison, i32 %2453, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1222, <1 x i32> %2454, i1 %1214) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %2455 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1229, i1 %1228) #5, !dbg !103
  %2456 = bitcast i32 %2455 to float, !dbg !103
  %2457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2455, i32 2, i32 31), !dbg !103
  %2458 = bitcast i32 %2457 to float, !dbg !103
  %2459 = fcmp ogt float %2456, %2458, !dbg !105
  %2460 = fcmp uno float %2456, 0.000000e+00, !dbg !106
  %2461 = or i1 %2460, %2459, !dbg !107
  %2462 = select i1 %2461, float %2456, float %2458, !dbg !108
  %2463 = bitcast float %2462 to i32, !dbg !103
  %2464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2463, i32 1, i32 31), !dbg !103
  %2465 = bitcast i32 %2464 to float, !dbg !103
  %2466 = fcmp ogt float %2462, %2465, !dbg !105
  %2467 = fcmp uno float %2462, 0.000000e+00, !dbg !106
  %2468 = or i1 %2466, %2467, !dbg !107
  %2469 = select i1 %2468, i32 %2463, i32 %2464, !dbg !108
  %2470 = insertelement <1 x i32> poison, i32 %2469, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1229, <1 x i32> %2470, i1 %1279) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %2471 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !103
  %2472 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %2473 = bitcast float %2471 to i32, !dbg !109
  %2474 = bitcast float %2472 to i32, !dbg !109
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2473, i32 %2474, i1 true) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %2475 = load float, ptr addrspace(3) %2227, align 4, !dbg !109
  %2476 = sext i32 %25 to i64, !dbg !110
  %2477 = getelementptr bfloat, ptr addrspace(1) %4, i64 %2476, !dbg !110
  %2478 = fptrunc float %2228 to bfloat, !dbg !102
  %2479 = and i32 %22, 126, !dbg !102
  %2480 = icmp eq i32 %2479, 0, !dbg !102
  %2481 = bitcast bfloat %2478 to i16, !dbg !102
  %2482 = and i1 %2480, %27, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2481, ptr addrspace(1) %2477, i1 %2482) #5, !dbg !102
  %2483 = getelementptr bfloat, ptr addrspace(1) %5, i64 %2476, !dbg !111
  %2484 = fptrunc float %2475 to bfloat, !dbg !109
  %2485 = bitcast bfloat %2484 to i16, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2485, ptr addrspace(1) %2483, i1 %2482) #5, !dbg !109
  %2486 = getelementptr bfloat, ptr addrspace(1) %6, i64 %2476, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2481, ptr addrspace(1) %2486, i1 %2482) #5, !dbg !113
  %2487 = getelementptr bfloat, ptr addrspace(1) %7, i64 %2476, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2485, ptr addrspace(1) %2487, i1 %2482) #5, !dbg !115
  %2488 = getelementptr bfloat, ptr addrspace(1) %8, i64 %2476, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2481, ptr addrspace(1) %2488, i1 %2482) #5, !dbg !117
  %2489 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2476, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2485, ptr addrspace(1) %2489, i1 %2482) #5, !dbg !119
  %2490 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2476, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2481, ptr addrspace(1) %2490, i1 %2482) #5, !dbg !121
  %2491 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2476, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2485, ptr addrspace(1) %2491, i1 %2482) #5, !dbg !123
  %.inv = fcmp oge float %2223, 0.000000e+00, !dbg !124
  %2492 = select i1 %.inv, float 0.000000e+00, float %2223, !dbg !124
  %.inv3 = fcmp oge float %2224, 0.000000e+00, !dbg !124
  %2493 = select i1 %.inv3, float 0.000000e+00, float %2224, !dbg !124
  %2494 = fsub float 0.000000e+00, %2492, !dbg !126
  %2495 = fsub float 0.000000e+00, %2493, !dbg !126
  %.inv4 = fcmp ole float %2471, 0.000000e+00, !dbg !127
  %2496 = select i1 %.inv4, float 0.000000e+00, float %2471, !dbg !127
  %.inv5 = fcmp ole float %2472, 0.000000e+00, !dbg !127
  %2497 = select i1 %.inv5, float 0.000000e+00, float %2472, !dbg !127
  %2498 = fcmp ogt float %2494, %2496, !dbg !129
  %2499 = fcmp ogt float %2495, %2497, !dbg !129
  %2500 = fcmp uno float %2494, 0.000000e+00, !dbg !131
  %2501 = fcmp uno float %2495, 0.000000e+00, !dbg !131
  %2502 = or i1 %2500, %2498, !dbg !132
  %2503 = or i1 %2501, %2499, !dbg !132
  %2504 = select i1 %2502, float %2494, float %2496, !dbg !133
  %2505 = select i1 %2503, float %2495, float %2497, !dbg !133
  %2506 = fmul float %2504, 0x3F80204080000000, !dbg !134
  %2507 = fmul float %2505, 0x3F80204080000000, !dbg !134
  %2508 = fcmp ogt float %2506, 0x3EE4F8B580000000, !dbg !135
  %2509 = fcmp ogt float %2507, 0x3EE4F8B580000000, !dbg !135
  %2510 = fcmp uno float %2506, 0.000000e+00, !dbg !137
  %2511 = fcmp uno float %2507, 0.000000e+00, !dbg !137
  %2512 = or i1 %2508, %2510, !dbg !138
  %2513 = or i1 %2509, %2511, !dbg !138
  %2514 = select i1 %2512, float %2506, float 0x3EE4F8B580000000, !dbg !139
  %2515 = select i1 %2513, float %2507, float 0x3EE4F8B580000000, !dbg !139
  %2516 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2514), !dbg !140
  %2517 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2515), !dbg !140
  br label %2518, !dbg !141

2518:                                             ; preds = %1988, %2518
  %2519 = phi i1 [ true, %1988 ], [ false, %2518 ]
  %indvars.iv358 = phi i64 [ 0, %1988 ], [ 2048, %2518 ]
  %2520 = or disjoint i64 %indvars.iv358, %36, !dbg !142
  %2521 = icmp samesign ult i64 %2520, 3072, !dbg !143
  %2522 = trunc nuw nsw i64 %2520 to i32, !dbg !144
  %2523 = add i32 %34, %2522, !dbg !144
  %2524 = trunc nuw nsw i64 %indvars.iv358 to i32, !dbg !144
  %2525 = or disjoint i32 %30, %2524, !dbg !144
  %2526 = add i32 %2525, %34, !dbg !144
  %2527 = add i32 %35, %2522, !dbg !144
  %2528 = add i32 %2525, %35, !dbg !144
  %2529 = sext i32 %2523 to i64, !dbg !145
  %2530 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2529, !dbg !145
  %2531 = sext i32 %2526 to i64, !dbg !145
  %2532 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2531, !dbg !145
  %2533 = sext i32 %2527 to i64, !dbg !145
  %2534 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2533, !dbg !145
  %2535 = sext i32 %2528 to i64, !dbg !145
  %2536 = getelementptr bfloat, ptr addrspace(1) %3, i64 %2535, !dbg !145
  %2537 = and i1 %26, %2521, !dbg !146
  %2538 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2530, i1 %2537) #5, !dbg !147
  %2539 = extractvalue { i32, i32, i32, i32 } %2538, 0, !dbg !147
  %2540 = bitcast i32 %2539 to <2 x bfloat>, !dbg !147
  %2541 = extractvalue { i32, i32, i32, i32 } %2538, 1, !dbg !147
  %2542 = bitcast i32 %2541 to <2 x bfloat>, !dbg !147
  %2543 = extractvalue { i32, i32, i32, i32 } %2538, 2, !dbg !147
  %2544 = bitcast i32 %2543 to <2 x bfloat>, !dbg !147
  %2545 = extractvalue { i32, i32, i32, i32 } %2538, 3, !dbg !147
  %2546 = bitcast i32 %2545 to <2 x bfloat>, !dbg !147
  %2547 = extractelement <2 x bfloat> %2540, i64 0, !dbg !147
  %2548 = extractelement <2 x bfloat> %2540, i64 1, !dbg !147
  %2549 = extractelement <2 x bfloat> %2542, i64 0, !dbg !147
  %2550 = extractelement <2 x bfloat> %2542, i64 1, !dbg !147
  %2551 = extractelement <2 x bfloat> %2544, i64 0, !dbg !147
  %2552 = extractelement <2 x bfloat> %2544, i64 1, !dbg !147
  %2553 = extractelement <2 x bfloat> %2546, i64 0, !dbg !147
  %2554 = extractelement <2 x bfloat> %2546, i64 1, !dbg !147
  %2555 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2532, i1 %2537) #5, !dbg !147
  %2556 = extractvalue { i32, i32, i32, i32 } %2555, 0, !dbg !147
  %2557 = bitcast i32 %2556 to <2 x bfloat>, !dbg !147
  %2558 = extractvalue { i32, i32, i32, i32 } %2555, 1, !dbg !147
  %2559 = bitcast i32 %2558 to <2 x bfloat>, !dbg !147
  %2560 = extractvalue { i32, i32, i32, i32 } %2555, 2, !dbg !147
  %2561 = bitcast i32 %2560 to <2 x bfloat>, !dbg !147
  %2562 = extractvalue { i32, i32, i32, i32 } %2555, 3, !dbg !147
  %2563 = bitcast i32 %2562 to <2 x bfloat>, !dbg !147
  %2564 = extractelement <2 x bfloat> %2557, i64 0, !dbg !147
  %2565 = extractelement <2 x bfloat> %2557, i64 1, !dbg !147
  %2566 = extractelement <2 x bfloat> %2559, i64 0, !dbg !147
  %2567 = extractelement <2 x bfloat> %2559, i64 1, !dbg !147
  %2568 = extractelement <2 x bfloat> %2561, i64 0, !dbg !147
  %2569 = extractelement <2 x bfloat> %2561, i64 1, !dbg !147
  %2570 = extractelement <2 x bfloat> %2563, i64 0, !dbg !147
  %2571 = extractelement <2 x bfloat> %2563, i64 1, !dbg !147
  %2572 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2534, i1 %2537) #5, !dbg !147
  %2573 = extractvalue { i32, i32, i32, i32 } %2572, 0, !dbg !147
  %2574 = bitcast i32 %2573 to <2 x bfloat>, !dbg !147
  %2575 = extractvalue { i32, i32, i32, i32 } %2572, 1, !dbg !147
  %2576 = bitcast i32 %2575 to <2 x bfloat>, !dbg !147
  %2577 = extractvalue { i32, i32, i32, i32 } %2572, 2, !dbg !147
  %2578 = bitcast i32 %2577 to <2 x bfloat>, !dbg !147
  %2579 = extractvalue { i32, i32, i32, i32 } %2572, 3, !dbg !147
  %2580 = bitcast i32 %2579 to <2 x bfloat>, !dbg !147
  %2581 = extractelement <2 x bfloat> %2574, i64 0, !dbg !147
  %2582 = extractelement <2 x bfloat> %2574, i64 1, !dbg !147
  %2583 = extractelement <2 x bfloat> %2576, i64 0, !dbg !147
  %2584 = extractelement <2 x bfloat> %2576, i64 1, !dbg !147
  %2585 = extractelement <2 x bfloat> %2578, i64 0, !dbg !147
  %2586 = extractelement <2 x bfloat> %2578, i64 1, !dbg !147
  %2587 = extractelement <2 x bfloat> %2580, i64 0, !dbg !147
  %2588 = extractelement <2 x bfloat> %2580, i64 1, !dbg !147
  %2589 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2536, i1 %2537) #5, !dbg !147
  %2590 = extractvalue { i32, i32, i32, i32 } %2589, 0, !dbg !147
  %2591 = bitcast i32 %2590 to <2 x bfloat>, !dbg !147
  %2592 = extractvalue { i32, i32, i32, i32 } %2589, 1, !dbg !147
  %2593 = bitcast i32 %2592 to <2 x bfloat>, !dbg !147
  %2594 = extractvalue { i32, i32, i32, i32 } %2589, 2, !dbg !147
  %2595 = bitcast i32 %2594 to <2 x bfloat>, !dbg !147
  %2596 = extractvalue { i32, i32, i32, i32 } %2589, 3, !dbg !147
  %2597 = bitcast i32 %2596 to <2 x bfloat>, !dbg !147
  %2598 = extractelement <2 x bfloat> %2591, i64 0, !dbg !147
  %2599 = extractelement <2 x bfloat> %2591, i64 1, !dbg !147
  %2600 = extractelement <2 x bfloat> %2593, i64 0, !dbg !147
  %2601 = extractelement <2 x bfloat> %2593, i64 1, !dbg !147
  %2602 = extractelement <2 x bfloat> %2595, i64 0, !dbg !147
  %2603 = extractelement <2 x bfloat> %2595, i64 1, !dbg !147
  %2604 = extractelement <2 x bfloat> %2597, i64 0, !dbg !147
  %2605 = extractelement <2 x bfloat> %2597, i64 1, !dbg !147
  %2606 = fpext bfloat %2547 to float, !dbg !148
  %2607 = fpext bfloat %2548 to float, !dbg !148
  %2608 = fpext bfloat %2549 to float, !dbg !148
  %2609 = fpext bfloat %2550 to float, !dbg !148
  %2610 = fpext bfloat %2551 to float, !dbg !148
  %2611 = fpext bfloat %2552 to float, !dbg !148
  %2612 = fpext bfloat %2553 to float, !dbg !148
  %2613 = fpext bfloat %2554 to float, !dbg !148
  %2614 = fpext bfloat %2564 to float, !dbg !148
  %2615 = fpext bfloat %2565 to float, !dbg !148
  %2616 = fpext bfloat %2566 to float, !dbg !148
  %2617 = fpext bfloat %2567 to float, !dbg !148
  %2618 = fpext bfloat %2568 to float, !dbg !148
  %2619 = fpext bfloat %2569 to float, !dbg !148
  %2620 = fpext bfloat %2570 to float, !dbg !148
  %2621 = fpext bfloat %2571 to float, !dbg !148
  %2622 = fpext bfloat %2581 to float, !dbg !148
  %2623 = fpext bfloat %2582 to float, !dbg !148
  %2624 = fpext bfloat %2583 to float, !dbg !148
  %2625 = fpext bfloat %2584 to float, !dbg !148
  %2626 = fpext bfloat %2585 to float, !dbg !148
  %2627 = fpext bfloat %2586 to float, !dbg !148
  %2628 = fpext bfloat %2587 to float, !dbg !148
  %2629 = fpext bfloat %2588 to float, !dbg !148
  %2630 = fpext bfloat %2598 to float, !dbg !148
  %2631 = fpext bfloat %2599 to float, !dbg !148
  %2632 = fpext bfloat %2600 to float, !dbg !148
  %2633 = fpext bfloat %2601 to float, !dbg !148
  %2634 = fpext bfloat %2602 to float, !dbg !148
  %2635 = fpext bfloat %2603 to float, !dbg !148
  %2636 = fpext bfloat %2604 to float, !dbg !148
  %2637 = fpext bfloat %2605 to float, !dbg !148
  %2638 = fmul float %2516, %2606, !dbg !149
  %2639 = fmul float %2516, %2607, !dbg !149
  %2640 = fmul float %2516, %2608, !dbg !149
  %2641 = fmul float %2516, %2609, !dbg !149
  %2642 = fmul float %2516, %2610, !dbg !149
  %2643 = fmul float %2516, %2611, !dbg !149
  %2644 = fmul float %2516, %2612, !dbg !149
  %2645 = fmul float %2516, %2613, !dbg !149
  %2646 = fmul float %2516, %2614, !dbg !149
  %2647 = fmul float %2516, %2615, !dbg !149
  %2648 = fmul float %2516, %2616, !dbg !149
  %2649 = fmul float %2516, %2617, !dbg !149
  %2650 = fmul float %2516, %2618, !dbg !149
  %2651 = fmul float %2516, %2619, !dbg !149
  %2652 = fmul float %2516, %2620, !dbg !149
  %2653 = fmul float %2516, %2621, !dbg !149
  %2654 = fmul float %2517, %2622, !dbg !149
  %2655 = fmul float %2517, %2623, !dbg !149
  %2656 = fmul float %2517, %2624, !dbg !149
  %2657 = fmul float %2517, %2625, !dbg !149
  %2658 = fmul float %2517, %2626, !dbg !149
  %2659 = fmul float %2517, %2627, !dbg !149
  %2660 = fmul float %2517, %2628, !dbg !149
  %2661 = fmul float %2517, %2629, !dbg !149
  %2662 = fmul float %2517, %2630, !dbg !149
  %2663 = fmul float %2517, %2631, !dbg !149
  %2664 = fmul float %2517, %2632, !dbg !149
  %2665 = fmul float %2517, %2633, !dbg !149
  %2666 = fmul float %2517, %2634, !dbg !149
  %2667 = fmul float %2517, %2635, !dbg !149
  %2668 = fmul float %2517, %2636, !dbg !149
  %2669 = fmul float %2517, %2637, !dbg !149
  %2670 = tail call float @llvm.nvvm.round.f(float %2638) #5, !dbg !150
  %2671 = tail call float @llvm.nvvm.round.f(float %2639) #5, !dbg !150
  %2672 = tail call float @llvm.nvvm.round.f(float %2640) #5, !dbg !150
  %2673 = tail call float @llvm.nvvm.round.f(float %2641) #5, !dbg !150
  %2674 = tail call float @llvm.nvvm.round.f(float %2642) #5, !dbg !150
  %2675 = tail call float @llvm.nvvm.round.f(float %2643) #5, !dbg !150
  %2676 = tail call float @llvm.nvvm.round.f(float %2644) #5, !dbg !150
  %2677 = tail call float @llvm.nvvm.round.f(float %2645) #5, !dbg !150
  %2678 = tail call float @llvm.nvvm.round.f(float %2646) #5, !dbg !150
  %2679 = tail call float @llvm.nvvm.round.f(float %2647) #5, !dbg !150
  %2680 = tail call float @llvm.nvvm.round.f(float %2648) #5, !dbg !150
  %2681 = tail call float @llvm.nvvm.round.f(float %2649) #5, !dbg !150
  %2682 = tail call float @llvm.nvvm.round.f(float %2650) #5, !dbg !150
  %2683 = tail call float @llvm.nvvm.round.f(float %2651) #5, !dbg !150
  %2684 = tail call float @llvm.nvvm.round.f(float %2652) #5, !dbg !150
  %2685 = tail call float @llvm.nvvm.round.f(float %2653) #5, !dbg !150
  %2686 = tail call float @llvm.nvvm.round.f(float %2654) #5, !dbg !150
  %2687 = tail call float @llvm.nvvm.round.f(float %2655) #5, !dbg !150
  %2688 = tail call float @llvm.nvvm.round.f(float %2656) #5, !dbg !150
  %2689 = tail call float @llvm.nvvm.round.f(float %2657) #5, !dbg !150
  %2690 = tail call float @llvm.nvvm.round.f(float %2658) #5, !dbg !150
  %2691 = tail call float @llvm.nvvm.round.f(float %2659) #5, !dbg !150
  %2692 = tail call float @llvm.nvvm.round.f(float %2660) #5, !dbg !150
  %2693 = tail call float @llvm.nvvm.round.f(float %2661) #5, !dbg !150
  %2694 = tail call float @llvm.nvvm.round.f(float %2662) #5, !dbg !150
  %2695 = tail call float @llvm.nvvm.round.f(float %2663) #5, !dbg !150
  %2696 = tail call float @llvm.nvvm.round.f(float %2664) #5, !dbg !150
  %2697 = tail call float @llvm.nvvm.round.f(float %2665) #5, !dbg !150
  %2698 = tail call float @llvm.nvvm.round.f(float %2666) #5, !dbg !150
  %2699 = tail call float @llvm.nvvm.round.f(float %2667) #5, !dbg !150
  %2700 = tail call float @llvm.nvvm.round.f(float %2668) #5, !dbg !150
  %2701 = tail call float @llvm.nvvm.round.f(float %2669) #5, !dbg !150
  %2702 = insertelement <4 x float> poison, float %2670, i64 0, !dbg !151
  %2703 = insertelement <4 x float> %2702, float %2671, i64 1, !dbg !151
  %2704 = insertelement <4 x float> %2703, float %2672, i64 2, !dbg !151
  %2705 = insertelement <4 x float> %2704, float %2673, i64 3, !dbg !151
  %2706 = fcmp ogt <4 x float> %2705, splat (float -1.270000e+02), !dbg !151
  %2707 = fcmp uno <4 x float> %2705, zeroinitializer, !dbg !153
  %2708 = or <4 x i1> %2706, %2707, !dbg !154
  %2709 = select <4 x i1> %2708, <4 x float> %2705, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2710 = fcmp olt <4 x float> %2709, splat (float 1.270000e+02), !dbg !156
  %2711 = fcmp uno <4 x float> %2709, zeroinitializer, !dbg !158
  %2712 = or <4 x i1> %2710, %2711, !dbg !159
  %2713 = fptosi <4 x float> %2709 to <4 x i8>, !dbg !160
  %2714 = select <4 x i1> %2712, <4 x i8> %2713, <4 x i8> splat (i8 127), !dbg !161
  %2715 = insertelement <4 x float> poison, float %2674, i64 0, !dbg !151
  %2716 = insertelement <4 x float> %2715, float %2675, i64 1, !dbg !151
  %2717 = insertelement <4 x float> %2716, float %2676, i64 2, !dbg !151
  %2718 = insertelement <4 x float> %2717, float %2677, i64 3, !dbg !151
  %2719 = fcmp ogt <4 x float> %2718, splat (float -1.270000e+02), !dbg !151
  %2720 = fcmp uno <4 x float> %2718, zeroinitializer, !dbg !153
  %2721 = or <4 x i1> %2719, %2720, !dbg !154
  %2722 = select <4 x i1> %2721, <4 x float> %2718, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2723 = fcmp olt <4 x float> %2722, splat (float 1.270000e+02), !dbg !156
  %2724 = fcmp uno <4 x float> %2722, zeroinitializer, !dbg !158
  %2725 = or <4 x i1> %2723, %2724, !dbg !159
  %2726 = fptosi <4 x float> %2722 to <4 x i8>, !dbg !160
  %2727 = select <4 x i1> %2725, <4 x i8> %2726, <4 x i8> splat (i8 127), !dbg !161
  %2728 = insertelement <4 x float> poison, float %2678, i64 0, !dbg !151
  %2729 = insertelement <4 x float> %2728, float %2679, i64 1, !dbg !151
  %2730 = insertelement <4 x float> %2729, float %2680, i64 2, !dbg !151
  %2731 = insertelement <4 x float> %2730, float %2681, i64 3, !dbg !151
  %2732 = fcmp ogt <4 x float> %2731, splat (float -1.270000e+02), !dbg !151
  %2733 = fcmp uno <4 x float> %2731, zeroinitializer, !dbg !153
  %2734 = or <4 x i1> %2732, %2733, !dbg !154
  %2735 = select <4 x i1> %2734, <4 x float> %2731, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2736 = fcmp olt <4 x float> %2735, splat (float 1.270000e+02), !dbg !156
  %2737 = fcmp uno <4 x float> %2735, zeroinitializer, !dbg !158
  %2738 = or <4 x i1> %2736, %2737, !dbg !159
  %2739 = fptosi <4 x float> %2735 to <4 x i8>, !dbg !160
  %2740 = select <4 x i1> %2738, <4 x i8> %2739, <4 x i8> splat (i8 127), !dbg !161
  %2741 = insertelement <4 x float> poison, float %2682, i64 0, !dbg !151
  %2742 = insertelement <4 x float> %2741, float %2683, i64 1, !dbg !151
  %2743 = insertelement <4 x float> %2742, float %2684, i64 2, !dbg !151
  %2744 = insertelement <4 x float> %2743, float %2685, i64 3, !dbg !151
  %2745 = fcmp ogt <4 x float> %2744, splat (float -1.270000e+02), !dbg !151
  %2746 = fcmp uno <4 x float> %2744, zeroinitializer, !dbg !153
  %2747 = or <4 x i1> %2745, %2746, !dbg !154
  %2748 = select <4 x i1> %2747, <4 x float> %2744, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2749 = fcmp olt <4 x float> %2748, splat (float 1.270000e+02), !dbg !156
  %2750 = fcmp uno <4 x float> %2748, zeroinitializer, !dbg !158
  %2751 = or <4 x i1> %2749, %2750, !dbg !159
  %2752 = fptosi <4 x float> %2748 to <4 x i8>, !dbg !160
  %2753 = select <4 x i1> %2751, <4 x i8> %2752, <4 x i8> splat (i8 127), !dbg !161
  %2754 = insertelement <4 x float> poison, float %2686, i64 0, !dbg !151
  %2755 = insertelement <4 x float> %2754, float %2687, i64 1, !dbg !151
  %2756 = insertelement <4 x float> %2755, float %2688, i64 2, !dbg !151
  %2757 = insertelement <4 x float> %2756, float %2689, i64 3, !dbg !151
  %2758 = fcmp ogt <4 x float> %2757, splat (float -1.270000e+02), !dbg !151
  %2759 = fcmp uno <4 x float> %2757, zeroinitializer, !dbg !153
  %2760 = or <4 x i1> %2758, %2759, !dbg !154
  %2761 = select <4 x i1> %2760, <4 x float> %2757, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2762 = fcmp olt <4 x float> %2761, splat (float 1.270000e+02), !dbg !156
  %2763 = fcmp uno <4 x float> %2761, zeroinitializer, !dbg !158
  %2764 = or <4 x i1> %2762, %2763, !dbg !159
  %2765 = fptosi <4 x float> %2761 to <4 x i8>, !dbg !160
  %2766 = select <4 x i1> %2764, <4 x i8> %2765, <4 x i8> splat (i8 127), !dbg !161
  %2767 = insertelement <4 x float> poison, float %2690, i64 0, !dbg !151
  %2768 = insertelement <4 x float> %2767, float %2691, i64 1, !dbg !151
  %2769 = insertelement <4 x float> %2768, float %2692, i64 2, !dbg !151
  %2770 = insertelement <4 x float> %2769, float %2693, i64 3, !dbg !151
  %2771 = fcmp ogt <4 x float> %2770, splat (float -1.270000e+02), !dbg !151
  %2772 = fcmp uno <4 x float> %2770, zeroinitializer, !dbg !153
  %2773 = or <4 x i1> %2771, %2772, !dbg !154
  %2774 = select <4 x i1> %2773, <4 x float> %2770, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2775 = fcmp olt <4 x float> %2774, splat (float 1.270000e+02), !dbg !156
  %2776 = fcmp uno <4 x float> %2774, zeroinitializer, !dbg !158
  %2777 = or <4 x i1> %2775, %2776, !dbg !159
  %2778 = fptosi <4 x float> %2774 to <4 x i8>, !dbg !160
  %2779 = select <4 x i1> %2777, <4 x i8> %2778, <4 x i8> splat (i8 127), !dbg !161
  %2780 = insertelement <4 x float> poison, float %2694, i64 0, !dbg !151
  %2781 = insertelement <4 x float> %2780, float %2695, i64 1, !dbg !151
  %2782 = insertelement <4 x float> %2781, float %2696, i64 2, !dbg !151
  %2783 = insertelement <4 x float> %2782, float %2697, i64 3, !dbg !151
  %2784 = fcmp ogt <4 x float> %2783, splat (float -1.270000e+02), !dbg !151
  %2785 = fcmp uno <4 x float> %2783, zeroinitializer, !dbg !153
  %2786 = or <4 x i1> %2784, %2785, !dbg !154
  %2787 = select <4 x i1> %2786, <4 x float> %2783, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2788 = fcmp olt <4 x float> %2787, splat (float 1.270000e+02), !dbg !156
  %2789 = fcmp uno <4 x float> %2787, zeroinitializer, !dbg !158
  %2790 = or <4 x i1> %2788, %2789, !dbg !159
  %2791 = fptosi <4 x float> %2787 to <4 x i8>, !dbg !160
  %2792 = select <4 x i1> %2790, <4 x i8> %2791, <4 x i8> splat (i8 127), !dbg !161
  %2793 = insertelement <4 x float> poison, float %2698, i64 0, !dbg !151
  %2794 = insertelement <4 x float> %2793, float %2699, i64 1, !dbg !151
  %2795 = insertelement <4 x float> %2794, float %2700, i64 2, !dbg !151
  %2796 = insertelement <4 x float> %2795, float %2701, i64 3, !dbg !151
  %2797 = fcmp ogt <4 x float> %2796, splat (float -1.270000e+02), !dbg !151
  %2798 = fcmp uno <4 x float> %2796, zeroinitializer, !dbg !153
  %2799 = or <4 x i1> %2797, %2798, !dbg !154
  %2800 = select <4 x i1> %2799, <4 x float> %2796, <4 x float> splat (float -1.270000e+02), !dbg !155
  %2801 = fcmp olt <4 x float> %2800, splat (float 1.270000e+02), !dbg !156
  %2802 = fcmp uno <4 x float> %2800, zeroinitializer, !dbg !158
  %2803 = or <4 x i1> %2801, %2802, !dbg !159
  %2804 = fptosi <4 x float> %2800 to <4 x i8>, !dbg !160
  %2805 = select <4 x i1> %2803, <4 x i8> %2804, <4 x i8> splat (i8 127), !dbg !161
  %2806 = getelementptr i8, ptr addrspace(1) %12, i64 %2529, !dbg !162
  %2807 = getelementptr i8, ptr addrspace(1) %12, i64 %2533, !dbg !162
  %2808 = bitcast <4 x i8> %2714 to i32, !dbg !163
  %2809 = bitcast <4 x i8> %2727 to i32, !dbg !163
  %2810 = bitcast <4 x i8> %2740 to i32, !dbg !163
  %2811 = bitcast <4 x i8> %2753 to i32, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2808, i32 %2809, i32 %2810, i32 %2811, ptr addrspace(1) %2806, i1 %2537) #5, !dbg !163
  %2812 = bitcast <4 x i8> %2766 to i32, !dbg !163
  %2813 = bitcast <4 x i8> %2779 to i32, !dbg !163
  %2814 = bitcast <4 x i8> %2792 to i32, !dbg !163
  %2815 = bitcast <4 x i8> %2805 to i32, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2812, i32 %2813, i32 %2814, i32 %2815, ptr addrspace(1) %2807, i1 %2537) #5, !dbg !163
  %2816 = getelementptr i8, ptr addrspace(1) %13, i64 %2529, !dbg !164
  %2817 = getelementptr i8, ptr addrspace(1) %13, i64 %2533, !dbg !164
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2808, i32 %2809, i32 %2810, i32 %2811, ptr addrspace(1) %2816, i1 %2537) #5, !dbg !165
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2812, i32 %2813, i32 %2814, i32 %2815, ptr addrspace(1) %2817, i1 %2537) #5, !dbg !165
  %2818 = getelementptr i8, ptr addrspace(1) %14, i64 %2529, !dbg !166
  %2819 = getelementptr i8, ptr addrspace(1) %14, i64 %2533, !dbg !166
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2808, i32 %2809, i32 %2810, i32 %2811, ptr addrspace(1) %2818, i1 %2537) #5, !dbg !167
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2812, i32 %2813, i32 %2814, i32 %2815, ptr addrspace(1) %2819, i1 %2537) #5, !dbg !167
  %2820 = getelementptr i8, ptr addrspace(1) %15, i64 %2529, !dbg !168
  %2821 = getelementptr i8, ptr addrspace(1) %15, i64 %2533, !dbg !168
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2808, i32 %2809, i32 %2810, i32 %2811, ptr addrspace(1) %2820, i1 %2537) #5, !dbg !169
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2812, i32 %2813, i32 %2814, i32 %2815, ptr addrspace(1) %2821, i1 %2537) #5, !dbg !169
  br i1 %2519, label %2518, label %2822, !dbg !141

2822:                                             ; preds = %2518
  ret void, !dbg !170
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 33, column: 31, scope: !6)
!18 = !DILocation(line: 34, column: 29, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 61, scope: !6)
!22 = !DILocation(line: 38, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 203, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 51, scope: !6)
!28 = !DILocation(line: 208, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 209, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 210, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 210, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 211, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 211, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 211, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 44, column: 62, scope: !6)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 46, column: 66, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !25, inlinedAt: !40)
!53 = !DILocation(line: 67, column: 24, scope: !6)
!54 = !DILocation(line: 69, column: 24, scope: !6)
!55 = !DILocation(line: 70, column: 32, scope: !6)
!56 = !DILocation(line: 53, column: 40, scope: !6)
!57 = !DILocation(line: 85, column: 50, scope: !6)
!58 = !DILocation(line: 83, column: 50, scope: !6)
!59 = !DILocation(line: 54, column: 31, scope: !6)
!60 = !DILocation(line: 55, column: 29, scope: !6)
!61 = !DILocation(line: 59, column: 41, scope: !6)
!62 = !DILocation(line: 59, column: 34, scope: !6)
!63 = !DILocation(line: 59, column: 61, scope: !6)
!64 = !DILocation(line: 59, column: 51, scope: !6)
!65 = !DILocation(line: 59, column: 113, scope: !6)
!66 = !DILocation(line: 60, column: 42, scope: !6)
!67 = !DILocation(line: 60, column: 35, scope: !6)
!68 = !DILocation(line: 60, column: 49, scope: !6)
!69 = !DILocation(line: 61, column: 35, scope: !6)
!70 = !DILocation(line: 61, column: 49, scope: !6)
!71 = !DILocation(line: 62, column: 35, scope: !6)
!72 = !DILocation(line: 62, column: 42, scope: !6)
!73 = !DILocation(line: 63, column: 35, scope: !6)
!74 = !DILocation(line: 63, column: 42, scope: !6)
!75 = !DILocation(line: 65, column: 24, scope: !6)
!76 = !DILocation(line: 71, column: 24, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !80)
!80 = !DILocation(line: 82, column: 47, scope: !6)
!81 = !DILocation(line: 61, column: 102, scope: !6)
!82 = !DILocation(line: 63, column: 95, scope: !6)
!83 = !DILocation(line: 74, column: 24, scope: !6)
!84 = !DILocation(line: 76, column: 24, scope: !6)
!85 = !DILocation(line: 79, column: 24, scope: !6)
!86 = !DILocation(line: 77, column: 24, scope: !6)
!87 = !DILocation(line: 80, column: 24, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !80)
!90 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !80)
!91 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !80)
!92 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !78)
!93 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !78)
!94 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !78)
!95 = !DILocation(line: 86, column: 29, scope: !6)
!96 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !97)
!97 = !DILocation(line: 87, column: 40, scope: !6)
!98 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !97)
!99 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !97)
!100 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !97)
!101 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !97)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !104)
!104 = !DILocation(line: 88, column: 40, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !104)
!107 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !104)
!108 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !104)
!109 = !DILocation(line: 90, column: 37, scope: !6)
!110 = !DILocation(line: 89, column: 25, scope: !6)
!111 = !DILocation(line: 90, column: 25, scope: !6)
!112 = !DILocation(line: 91, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 37, scope: !6)
!114 = !DILocation(line: 92, column: 25, scope: !6)
!115 = !DILocation(line: 92, column: 37, scope: !6)
!116 = !DILocation(line: 93, column: 25, scope: !6)
!117 = !DILocation(line: 93, column: 37, scope: !6)
!118 = !DILocation(line: 94, column: 25, scope: !6)
!119 = !DILocation(line: 94, column: 37, scope: !6)
!120 = !DILocation(line: 95, column: 25, scope: !6)
!121 = !DILocation(line: 95, column: 37, scope: !6)
!122 = !DILocation(line: 96, column: 26, scope: !6)
!123 = !DILocation(line: 96, column: 38, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !125)
!125 = !DILocation(line: 105, column: 46, scope: !6)
!126 = !DILocation(line: 106, column: 17, scope: !6)
!127 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !128)
!128 = !DILocation(line: 107, column: 46, scope: !6)
!129 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !130)
!130 = !DILocation(line: 108, column: 46, scope: !6)
!131 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !130)
!133 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !130)
!134 = !DILocation(line: 110, column: 24, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !136)
!136 = !DILocation(line: 113, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !136)
!140 = !DILocation(line: 116, column: 25, scope: !6)
!141 = !DILocation(line: 97, column: 40, scope: !6)
!142 = !DILocation(line: 98, column: 31, scope: !6)
!143 = !DILocation(line: 99, column: 29, scope: !6)
!144 = !DILocation(line: 103, column: 43, scope: !6)
!145 = !DILocation(line: 103, column: 36, scope: !6)
!146 = !DILocation(line: 103, column: 63, scope: !6)
!147 = !DILocation(line: 103, column: 53, scope: !6)
!148 = !DILocation(line: 103, column: 115, scope: !6)
!149 = !DILocation(line: 119, column: 24, scope: !6)
!150 = !DILocation(line: 120, column: 36, scope: !6)
!151 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !152)
!152 = !DILocation(line: 123, column: 46, scope: !6)
!153 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !152)
!154 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !152)
!155 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !152)
!156 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !157)
!157 = !DILocation(line: 125, column: 46, scope: !6)
!158 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !157)
!159 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !157)
!160 = !DILocation(line: 127, column: 25, scope: !6)
!161 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !157)
!162 = !DILocation(line: 128, column: 30, scope: !6)
!163 = !DILocation(line: 128, column: 54, scope: !6)
!164 = !DILocation(line: 129, column: 30, scope: !6)
!165 = !DILocation(line: 129, column: 54, scope: !6)
!166 = !DILocation(line: 130, column: 30, scope: !6)
!167 = !DILocation(line: 130, column: 54, scope: !6)
!168 = !DILocation(line: 131, column: 30, scope: !6)
!169 = !DILocation(line: 131, column: 54, scope: !6)
!170 = !DILocation(line: 97, column: 4, scope: !6)
