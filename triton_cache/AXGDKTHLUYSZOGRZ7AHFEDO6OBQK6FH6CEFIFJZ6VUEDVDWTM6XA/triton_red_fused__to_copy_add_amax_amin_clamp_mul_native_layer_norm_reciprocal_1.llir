; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 3600, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = lshr i32 %19, 5, !dbg !11
  %22 = shl i32 %19, 1, !dbg !11
  %23 = and i32 %22, 510, !dbg !11
  %24 = mul i32 %17, 3072, !dbg !12
  %25 = or disjoint i32 %23, %24
  %26 = sext i32 %25 to i64, !dbg !13
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !13
  br i1 %18, label %__nv_rsqrtf.exit.loopexit, label %.split.preheader

.split.preheader:                                 ; preds = %16
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 false) #5, !dbg !14
  %29 = or disjoint i32 %25, 512, !dbg !15
  %30 = sext i32 %29 to i64, !dbg !13
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !13
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 false) #5, !dbg !14
  %33 = add i32 %25, 1024, !dbg !15
  %34 = sext i32 %33 to i64, !dbg !13
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !13
  %36 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %35, i1 false) #5, !dbg !14
  %37 = add i32 %25, 1536, !dbg !15
  %38 = sext i32 %37 to i64, !dbg !13
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !13
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 false) #5, !dbg !14
  %41 = add i32 %25, 2048, !dbg !15
  %42 = sext i32 %41 to i64, !dbg !13
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !13
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 false) #5, !dbg !14
  %45 = add i32 %25, 2560, !dbg !15
  %46 = sext i32 %45 to i64, !dbg !13
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !13
  %48 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %47, i1 false) #5, !dbg !14
  br label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit.loopexit:                        ; preds = %16
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 true) #5, !dbg !14
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !14
  %51 = or disjoint i32 %25, 512, !dbg !15
  %52 = sext i32 %51 to i64, !dbg !13
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !13
  %54 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 true) #5, !dbg !14
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !14
  %56 = add i32 %25, 1024, !dbg !15
  %57 = sext i32 %56 to i64, !dbg !13
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !13
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %58, i1 true) #5, !dbg !14
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !14
  %61 = add i32 %25, 1536, !dbg !15
  %62 = sext i32 %61 to i64, !dbg !13
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !13
  %64 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %63, i1 true) #5, !dbg !14
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !14
  %66 = add i32 %25, 2048, !dbg !15
  %67 = sext i32 %66 to i64, !dbg !13
  %68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %67, !dbg !13
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 true) #5, !dbg !14
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !14
  %71 = add i32 %25, 2560, !dbg !15
  %72 = sext i32 %71 to i64, !dbg !13
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !13
  %74 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %73, i1 true) #5, !dbg !14
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !14
  %76 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !20
  %77 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !20
  %78 = fsub <2 x float> %77, %76, !dbg !21
  %79 = extractelement <2 x float> %78, i64 0, !dbg !23
  %80 = tail call float @llvm.nvvm.div.full(float %79, float 2.000000e+00), !dbg !23
  %81 = extractelement <2 x float> %78, i64 1, !dbg !23
  %82 = tail call float @llvm.nvvm.div.full(float %81, float 2.000000e+00), !dbg !23
  %83 = insertelement <2 x float> poison, float %80, i64 0, !dbg !24
  %84 = insertelement <2 x float> %83, float %82, i64 1, !dbg !24
  %85 = fadd <2 x float> %84, %76, !dbg !24
  %86 = fsub <2 x float> %77, %85, !dbg !25
  %87 = fmul <2 x float> %78, %86, !dbg !26
  %88 = fadd <2 x float> %87, zeroinitializer, !dbg !27
  %89 = fpext <2 x bfloat> %60 to <2 x float>, !dbg !20
  %90 = extractelement <2 x float> %85, i64 0, !dbg !24
  %91 = fsub <2 x float> %89, %85, !dbg !21
  %92 = extractelement <2 x float> %91, i64 0, !dbg !21
  %93 = tail call float @llvm.nvvm.div.full(float %92, float 3.000000e+00), !dbg !23
  %94 = fadd float %90, %93, !dbg !24
  %95 = insertelement <2 x float> %85, float %94, i64 0, !dbg !25
  %96 = fsub <2 x float> %89, %95, !dbg !25
  %97 = extractelement <2 x float> %96, i64 1, !dbg !23
  %98 = tail call float @llvm.nvvm.div.full(float %97, float 3.000000e+00), !dbg !23
  %99 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !20
  %100 = extractelement <2 x float> %99, i64 0, !dbg !21
  %101 = fsub float %100, %94, !dbg !21
  %102 = tail call float @llvm.nvvm.div.full(float %101, float 4.000000e+00), !dbg !23
  %103 = insertelement <2 x float> poison, float %102, i64 0, !dbg !24
  %104 = insertelement <2 x float> %103, float %98, i64 1, !dbg !24
  %105 = fadd <2 x float> %95, %104, !dbg !24
  %106 = fsub <2 x float> %89, %105, !dbg !25
  %107 = shufflevector <2 x float> %91, <2 x float> %106, <2 x i32> <i32 0, i32 3>, !dbg !26
  %108 = fmul <2 x float> %96, %107, !dbg !26
  %109 = fadd <2 x float> %88, %108, !dbg !27
  %110 = fsub <2 x float> %99, %105, !dbg !21
  %111 = extractelement <2 x float> %110, i64 1, !dbg !21
  %112 = fsub <2 x float> %99, %105, !dbg !25
  %113 = tail call float @llvm.nvvm.div.full(float %111, float 4.000000e+00), !dbg !23
  %114 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !20
  %115 = fsub <2 x float> %114, %105, !dbg !21
  %116 = extractelement <2 x float> %115, i64 0, !dbg !21
  %117 = tail call float @llvm.nvvm.div.full(float %116, float 5.000000e+00), !dbg !23
  %118 = insertelement <2 x float> poison, float %117, i64 0, !dbg !24
  %119 = insertelement <2 x float> %118, float %113, i64 1, !dbg !24
  %120 = fadd <2 x float> %105, %119, !dbg !24
  %121 = fsub <2 x float> %99, %120, !dbg !25
  %122 = insertelement <2 x float> %121, float %101, i64 0, !dbg !26
  %123 = fmul <2 x float> %112, %122, !dbg !26
  %124 = fadd <2 x float> %109, %123, !dbg !27
  %125 = fsub <2 x float> %114, %120, !dbg !21
  %126 = extractelement <2 x float> %125, i64 1, !dbg !21
  %127 = fsub <2 x float> %114, %120, !dbg !25
  %128 = tail call float @llvm.nvvm.div.full(float %126, float 5.000000e+00), !dbg !23
  %129 = fpext <2 x bfloat> %75 to <2 x float>, !dbg !20
  %130 = extractelement <2 x float> %129, i64 1, !dbg !20
  %131 = fsub <2 x float> %129, %120, !dbg !21
  %132 = extractelement <2 x float> %131, i64 0, !dbg !21
  %133 = tail call float @llvm.nvvm.div.full(float %132, float 6.000000e+00), !dbg !23
  %134 = insertelement <2 x float> poison, float %133, i64 0, !dbg !24
  %135 = insertelement <2 x float> %134, float %128, i64 1, !dbg !24
  %136 = fadd <2 x float> %120, %135, !dbg !24
  %137 = extractelement <2 x float> %136, i64 1, !dbg !24
  %138 = fsub <2 x float> %114, %136, !dbg !25
  %139 = shufflevector <2 x float> %115, <2 x float> %138, <2 x i32> <i32 0, i32 3>, !dbg !26
  %140 = fmul <2 x float> %127, %139, !dbg !26
  %141 = fadd <2 x float> %124, %140, !dbg !27
  %142 = fsub float %130, %137, !dbg !21
  %143 = fsub <2 x float> %129, %136, !dbg !25
  %144 = tail call float @llvm.nvvm.div.full(float %142, float 6.000000e+00), !dbg !23
  %145 = fadd float %137, %144, !dbg !24
  %146 = fsub float %130, %145, !dbg !25
  %147 = insertelement <2 x float> %131, float %146, i64 1, !dbg !26
  %148 = fmul <2 x float> %143, %147, !dbg !26
  %149 = fadd <2 x float> %141, %148, !dbg !27
  %shift = shufflevector <2 x float> %149, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !16
  %150 = fadd <2 x float> %149, %shift, !dbg !16
  %151 = extractelement <2 x float> %150, i64 0, !dbg !16
  %152 = extractelement <2 x float> %136, i64 0, !dbg !16
  br label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %.split.preheader, %__nv_rsqrtf.exit.loopexit
  %153 = phi float [ %152, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %154 = phi float [ %145, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %155 = phi float [ 6.000000e+00, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %156 = phi float [ %151, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !28
  %157 = fsub float %154, %153, !dbg !30
  %158 = fadd float %155, %155, !dbg !31
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !32
  %160 = tail call float @llvm.nvvm.div.full(float %155, float %158), !dbg !33
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !34
  %162 = fmul float %157, %161, !dbg !35
  %163 = fadd float %153, %162, !dbg !36
  %164 = fmul float %157, %157, !dbg !37
  %165 = fmul float %164, %155, !dbg !38
  %166 = fmul float %165, %161, !dbg !39
  %167 = fadd float %156, %166, !dbg !40
  %168 = bitcast float %163 to i32, !dbg !16
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 16, i32 31), !dbg !16
  %170 = bitcast i32 %169 to float, !dbg !16
  %171 = bitcast float %167 to i32, !dbg !16
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !16
  %173 = bitcast i32 %172 to float, !dbg !16
  %174 = bitcast float %158 to i32, !dbg !16
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 16, i32 31), !dbg !16
  %176 = bitcast i32 %175 to float, !dbg !16
  %177 = fsub float %170, %163, !dbg !30
  %178 = fadd float %158, %176, !dbg !31
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !32
  %180 = tail call float @llvm.nvvm.div.full(float %176, float %178), !dbg !33
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !34
  %182 = fmul float %177, %181, !dbg !35
  %183 = fadd float %163, %182, !dbg !36
  %184 = fadd float %167, %173, !dbg !28
  %185 = fmul float %177, %177, !dbg !37
  %186 = fmul float %158, %185, !dbg !38
  %187 = fmul float %186, %181, !dbg !39
  %188 = fadd float %184, %187, !dbg !40
  %189 = bitcast float %183 to i32, !dbg !16
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !16
  %191 = bitcast i32 %190 to float, !dbg !16
  %192 = bitcast float %188 to i32, !dbg !16
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !16
  %194 = bitcast i32 %193 to float, !dbg !16
  %195 = bitcast float %178 to i32, !dbg !16
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !16
  %197 = bitcast i32 %196 to float, !dbg !16
  %198 = fsub float %191, %183, !dbg !30
  %199 = fadd float %178, %197, !dbg !31
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !32
  %201 = tail call float @llvm.nvvm.div.full(float %197, float %199), !dbg !33
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !34
  %203 = fmul float %198, %202, !dbg !35
  %204 = fadd float %183, %203, !dbg !36
  %205 = fadd float %188, %194, !dbg !28
  %206 = fmul float %198, %198, !dbg !37
  %207 = fmul float %178, %206, !dbg !38
  %208 = fmul float %202, %207, !dbg !39
  %209 = fadd float %205, %208, !dbg !40
  %210 = bitcast float %204 to i32, !dbg !16
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !16
  %212 = bitcast i32 %211 to float, !dbg !16
  %213 = bitcast float %209 to i32, !dbg !16
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !16
  %215 = bitcast i32 %214 to float, !dbg !16
  %216 = bitcast float %199 to i32, !dbg !16
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !16
  %218 = bitcast i32 %217 to float, !dbg !16
  %219 = fsub float %212, %204, !dbg !30
  %220 = fadd float %199, %218, !dbg !31
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !32
  %222 = tail call float @llvm.nvvm.div.full(float %218, float %220), !dbg !33
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !34
  %224 = fmul float %219, %223, !dbg !35
  %225 = fadd float %204, %224, !dbg !36
  %226 = fadd float %209, %215, !dbg !28
  %227 = fmul float %219, %219, !dbg !37
  %228 = fmul float %199, %227, !dbg !38
  %229 = fmul float %223, %228, !dbg !39
  %230 = fadd float %226, %229, !dbg !40
  %231 = bitcast float %225 to i32, !dbg !16
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !16
  %233 = bitcast i32 %232 to float, !dbg !16
  %234 = bitcast float %230 to i32, !dbg !16
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !16
  %236 = bitcast i32 %235 to float, !dbg !16
  %237 = bitcast float %220 to i32, !dbg !16
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !16
  %239 = bitcast i32 %238 to float, !dbg !16
  %240 = fsub float %233, %225, !dbg !30
  %241 = fadd float %220, %239, !dbg !31
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !32
  %243 = tail call float @llvm.nvvm.div.full(float %239, float %241), !dbg !33
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !34
  %245 = fmul float %240, %244, !dbg !35
  %246 = fadd float %225, %245, !dbg !36
  %247 = fadd float %230, %236, !dbg !28
  %248 = fmul float %240, %240, !dbg !37
  %249 = fmul float %220, %248, !dbg !38
  %250 = fmul float %244, %249, !dbg !39
  %251 = fadd float %247, %250, !dbg !40
  %252 = bitcast float %246 to i32, !dbg !16
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !16
  %254 = bitcast i32 %253 to float, !dbg !16
  %255 = bitcast float %251 to i32, !dbg !16
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !16
  %257 = bitcast i32 %256 to float, !dbg !16
  %258 = bitcast float %241 to i32, !dbg !16
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !16
  %260 = bitcast i32 %259 to float, !dbg !16
  %261 = fsub float %254, %246, !dbg !30
  %262 = fadd float %241, %260, !dbg !31
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !32
  %264 = tail call float @llvm.nvvm.div.full(float %260, float %262), !dbg !33
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !34
  %266 = fmul float %261, %265, !dbg !35
  %267 = fadd float %246, %266, !dbg !36
  %268 = fadd float %251, %257, !dbg !28
  %269 = fmul float %261, %261, !dbg !37
  %270 = fmul float %241, %269, !dbg !38
  %271 = fmul float %265, %270, !dbg !39
  %272 = fadd float %268, %271, !dbg !40
  %273 = and i32 %21, 7, !dbg !16
  %274 = icmp eq i32 %20, 0, !dbg !16
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !16
  %276 = bitcast float %267 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 %274) #5, !dbg !16
  %277 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %273, !dbg !16
  %278 = bitcast float %272 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 %274) #5, !dbg !16
  %279 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %273, !dbg !16
  %280 = bitcast float %262 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 %274) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %281 = icmp slt i32 %19, 8, !dbg !16
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !16
  %283 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %282, i1 %281) #5, !dbg !16
  %284 = bitcast i32 %283 to float, !dbg !16
  %285 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !16
  %286 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %285, i1 %281) #5, !dbg !16
  %287 = bitcast i32 %286 to float, !dbg !16
  %288 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !16
  %289 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %288, i1 %281) #5, !dbg !16
  %290 = bitcast i32 %289 to float, !dbg !16
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !16
  %292 = bitcast i32 %291 to float, !dbg !16
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !16
  %294 = bitcast i32 %293 to float, !dbg !16
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !16
  %296 = bitcast i32 %295 to float, !dbg !16
  %297 = fsub float %292, %284, !dbg !30
  %298 = fadd float %290, %296, !dbg !31
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !32
  %300 = tail call float @llvm.nvvm.div.full(float %296, float %298), !dbg !33
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !34
  %302 = fmul float %297, %301, !dbg !35
  %303 = fadd float %302, %284, !dbg !36
  %304 = fadd float %287, %294, !dbg !28
  %305 = fmul float %297, %297, !dbg !37
  %306 = fmul float %305, %290, !dbg !38
  %307 = fmul float %306, %301, !dbg !39
  %308 = fadd float %304, %307, !dbg !40
  %309 = bitcast float %303 to i32, !dbg !16
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !16
  %311 = bitcast i32 %310 to float, !dbg !16
  %312 = bitcast float %308 to i32, !dbg !16
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !16
  %314 = bitcast i32 %313 to float, !dbg !16
  %315 = bitcast float %298 to i32, !dbg !16
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !16
  %317 = bitcast i32 %316 to float, !dbg !16
  %318 = fsub float %311, %303, !dbg !30
  %319 = fadd float %298, %317, !dbg !31
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !32
  %321 = tail call float @llvm.nvvm.div.full(float %317, float %319), !dbg !33
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !34
  %323 = fmul float %318, %322, !dbg !35
  %324 = fadd float %303, %323, !dbg !36
  %325 = fadd float %308, %314, !dbg !28
  %326 = fmul float %318, %318, !dbg !37
  %327 = fmul float %298, %326, !dbg !38
  %328 = fmul float %322, %327, !dbg !39
  %329 = fadd float %325, %328, !dbg !40
  %330 = bitcast float %324 to i32, !dbg !16
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !16
  %332 = bitcast i32 %331 to float, !dbg !16
  %333 = bitcast float %329 to i32, !dbg !16
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 1, i32 31), !dbg !16
  %335 = bitcast i32 %334 to float, !dbg !16
  %336 = bitcast float %319 to i32, !dbg !16
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !16
  %338 = bitcast i32 %337 to float, !dbg !16
  %339 = fsub float %332, %324, !dbg !30
  %340 = fadd float %319, %338, !dbg !31
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !32
  %342 = tail call float @llvm.nvvm.div.full(float %338, float %340), !dbg !33
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !34
  %344 = fmul float %339, %343, !dbg !35
  %345 = fadd float %324, %344, !dbg !36
  %346 = fadd float %329, %335, !dbg !28
  %347 = fmul float %339, %339, !dbg !37
  %348 = fmul float %319, %347, !dbg !38
  %349 = fmul float %343, %348, !dbg !39
  %350 = fadd float %346, %349, !dbg !40
  %351 = and i32 %19, 7, !dbg !16
  %352 = icmp eq i32 %351, 0, !dbg !16
  %353 = and i1 %281, %352, !dbg !16
  %354 = bitcast float %345 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %354, i1 %353) #5, !dbg !16
  %355 = bitcast float %350 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %355, i1 %353) #5, !dbg !16
  %356 = bitcast float %340 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %356, i1 %353) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %357 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !16
  %358 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !16
  %359 = tail call float @llvm.nvvm.div.full(float %358, float 3.072000e+03), !dbg !41
  %360 = fadd float %359, 0x3EB0C6F7A0000000, !dbg !42
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i7 = icmp eq i32 %362, 0, !dbg !43
  br i1 %.not.i7, label %365, label %363, !dbg !43

363:                                              ; preds = %__nv_rsqrtf.exit
  %364 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %360), !dbg !43
  br label %__nv_rsqrtf.exit9, !dbg !43

365:                                              ; preds = %__nv_rsqrtf.exit
  %366 = tail call float @llvm.nvvm.rsqrt.approx.f(float %360), !dbg !43
  br label %__nv_rsqrtf.exit9, !dbg !43

__nv_rsqrtf.exit9:                                ; preds = %363, %365
  %.0.i8 = phi float [ %364, %363 ], [ %366, %365 ], !dbg !43
  %367 = zext nneg i32 %23 to i64, !dbg !44
  %368 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !45
  %369 = shufflevector <2 x i1> %368, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !45
  %370 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !46
  %371 = shufflevector <2 x float> %370, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  %372 = insertelement <2 x float> poison, float %357, i64 0, !dbg !47
  %373 = shufflevector <2 x float> %372, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  br label %374, !dbg !44

374:                                              ; preds = %__nv_rsqrtf.exit9, %374
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit9 ], [ %indvars.iv.next, %374 ]
  %375 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit9 ], [ %431, %374 ]
  %376 = phi float [ 0xFFF0000000000000, %__nv_rsqrtf.exit9 ], [ %432, %374 ]
  %377 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit9 ], [ %420, %374 ]
  %378 = or disjoint i64 %indvars.iv, %367, !dbg !48
  %379 = trunc nuw nsw i64 %378 to i32, !dbg !49
  %380 = add i32 %24, %379, !dbg !49
  %381 = sext i32 %380 to i64, !dbg !50
  %382 = getelementptr bfloat, ptr addrspace(1) %0, i64 %381, !dbg !50
  %383 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %382, i1 %18) #5, !dbg !51
  %384 = bitcast i32 %383 to <2 x bfloat>, !dbg !51
  %385 = add nuw nsw i64 %378, 3072, !dbg !52
  %386 = getelementptr float, ptr addrspace(1) %1, i64 %385, !dbg !53
  %387 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %386, i1 true) #5, !dbg !54
  %388 = extractvalue { i32, i32 } %387, 0, !dbg !54
  %389 = extractvalue { i32, i32 } %387, 1, !dbg !54
  %390 = getelementptr bfloat, ptr addrspace(1) %2, i64 %385, !dbg !55
  %391 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %390, i1 true) #5, !dbg !56
  %392 = bitcast i32 %391 to <2 x bfloat>, !dbg !56
  %393 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !57
  %394 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %393, i1 true) #5, !dbg !58
  %395 = extractvalue { i32, i32 } %394, 0, !dbg !58
  %396 = extractvalue { i32, i32 } %394, 1, !dbg !58
  %397 = getelementptr bfloat, ptr addrspace(1) %2, i64 %378, !dbg !59
  %398 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %397, i1 true) #5, !dbg !60
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !60
  %400 = fcmp uno <2 x float> %377, zeroinitializer, !dbg !61
  %401 = fpext <2 x bfloat> %384 to <2 x float>, !dbg !63
  %402 = insertelement <2 x i32> poison, i32 %388, i64 0, !dbg !54
  %403 = insertelement <2 x i32> %402, i32 %389, i64 1, !dbg !54
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !54
  %405 = fpext <2 x bfloat> %392 to <2 x float>, !dbg !64
  %406 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !58
  %407 = insertelement <2 x i32> %406, i32 %396, i64 1, !dbg !58
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !58
  %409 = fpext <2 x bfloat> %399 to <2 x float>, !dbg !65
  %410 = fsub <2 x float> %401, %373, !dbg !47
  %411 = fmul <2 x float> %371, %410, !dbg !46
  %412 = fadd <2 x float> %404, %405, !dbg !66
  %413 = fadd <2 x float> %412, splat (float 1.000000e+00), !dbg !67
  %414 = fmul <2 x float> %411, %413, !dbg !68
  %415 = fadd <2 x float> %408, %409, !dbg !69
  %416 = fadd <2 x float> %414, %415, !dbg !70
  %417 = fcmp olt <2 x float> %377, %416, !dbg !71
  %418 = or <2 x i1> %400, %417, !dbg !72
  %419 = select <2 x i1> %418, <2 x float> %377, <2 x float> %416, !dbg !73
  %420 = select <2 x i1> %369, <2 x float> %419, <2 x float> %377, !dbg !45
  %421 = extractelement <2 x float> %416, i64 0, !dbg !74
  %422 = fcmp ogt float %375, %421, !dbg !75
  %423 = extractelement <2 x float> %416, i64 1, !dbg !74
  %424 = fcmp ogt float %376, %423, !dbg !75
  %425 = fcmp uno float %375, 0.000000e+00, !dbg !77
  %426 = fcmp uno float %376, 0.000000e+00, !dbg !77
  %427 = or i1 %425, %422, !dbg !78
  %428 = or i1 %426, %424, !dbg !78
  %429 = select i1 %427, float %375, float %421, !dbg !79
  %430 = select i1 %428, float %376, float %423, !dbg !79
  %431 = select i1 %18, float %429, float %375, !dbg !80
  %432 = select i1 %18, float %430, float %376, !dbg !80
  %433 = getelementptr bfloat, ptr addrspace(1) %3, i64 %381, !dbg !81
  %434 = fptrunc float %421 to bfloat, !dbg !74
  %435 = fptrunc float %423 to bfloat, !dbg !74
  %436 = insertelement <2 x bfloat> poison, bfloat %434, i64 0, !dbg !74
  %437 = insertelement <2 x bfloat> %436, bfloat %435, i64 1, !dbg !74
  %438 = bitcast <2 x bfloat> %437 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %433, i1 %18) #5, !dbg !74
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !44
  %439 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !44
  br i1 %439, label %374, label %440, !dbg !44

440:                                              ; preds = %374
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %441 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %420, <2 x i32> <i32 0, i32 2>, !dbg !84
  %442 = fcmp olt <2 x float> %441, %420, !dbg !84
  %443 = fcmp uno <2 x float> %441, %420, !dbg !84
  %shift31 = shufflevector <2 x i1> %442, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !85
  %444 = or <2 x i1> %shift31, %443, !dbg !85
  %445 = extractelement <2 x i1> %444, i64 0, !dbg !85
  %446 = extractelement <2 x float> %420, i64 0, !dbg !86
  %447 = extractelement <2 x float> %420, i64 1, !dbg !86
  %448 = select i1 %445, float %446, float %447, !dbg !86
  %449 = bitcast float %448 to i32, !dbg !82
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 16, i32 31), !dbg !82
  %451 = bitcast i32 %450 to float, !dbg !82
  %452 = fcmp olt float %448, %451, !dbg !84
  %453 = fcmp uno float %448, 0.000000e+00, !dbg !87
  %454 = or i1 %453, %452, !dbg !85
  %455 = select i1 %454, float %448, float %451, !dbg !86
  %456 = bitcast float %455 to i32, !dbg !82
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 8, i32 31), !dbg !82
  %458 = bitcast i32 %457 to float, !dbg !82
  %459 = fcmp olt float %455, %458, !dbg !84
  %460 = fcmp uno float %455, 0.000000e+00, !dbg !87
  %461 = or i1 %459, %460, !dbg !85
  %462 = select i1 %461, float %455, float %458, !dbg !86
  %463 = bitcast float %462 to i32, !dbg !82
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 4, i32 31), !dbg !82
  %465 = bitcast i32 %464 to float, !dbg !82
  %466 = fcmp olt float %462, %465, !dbg !84
  %467 = fcmp uno float %462, 0.000000e+00, !dbg !87
  %468 = or i1 %466, %467, !dbg !85
  %469 = select i1 %468, float %462, float %465, !dbg !86
  %470 = bitcast float %469 to i32, !dbg !82
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !82
  %472 = bitcast i32 %471 to float, !dbg !82
  %473 = fcmp olt float %469, %472, !dbg !84
  %474 = fcmp uno float %469, 0.000000e+00, !dbg !87
  %475 = or i1 %473, %474, !dbg !85
  %476 = select i1 %475, float %469, float %472, !dbg !86
  %477 = bitcast float %476 to i32, !dbg !82
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 1, i32 31), !dbg !82
  %479 = bitcast i32 %478 to float, !dbg !82
  %480 = fcmp olt float %476, %479, !dbg !84
  %481 = fcmp uno float %476, 0.000000e+00, !dbg !87
  %482 = or i1 %480, %481, !dbg !85
  %483 = select i1 %482, i32 %477, i32 %478, !dbg !86
  %484 = insertelement <1 x i32> poison, i32 %483, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %484, i1 %274) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %485 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %282, i1 %281) #5, !dbg !82
  %486 = bitcast i32 %485 to float, !dbg !82
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 4, i32 31), !dbg !82
  %488 = bitcast i32 %487 to float, !dbg !82
  %489 = fcmp olt float %486, %488, !dbg !84
  %490 = fcmp uno float %486, 0.000000e+00, !dbg !87
  %491 = or i1 %490, %489, !dbg !85
  %492 = select i1 %491, float %486, float %488, !dbg !86
  %493 = bitcast float %492 to i32, !dbg !82
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 2, i32 31), !dbg !82
  %495 = bitcast i32 %494 to float, !dbg !82
  %496 = fcmp olt float %492, %495, !dbg !84
  %497 = fcmp uno float %492, 0.000000e+00, !dbg !87
  %498 = or i1 %496, %497, !dbg !85
  %499 = select i1 %498, float %492, float %495, !dbg !86
  %500 = bitcast float %499 to i32, !dbg !82
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !82
  %502 = bitcast i32 %501 to float, !dbg !82
  %503 = fcmp olt float %499, %502, !dbg !84
  %504 = fcmp uno float %499, 0.000000e+00, !dbg !87
  %505 = or i1 %503, %504, !dbg !85
  %506 = select i1 %505, i32 %500, i32 %501, !dbg !86
  %507 = insertelement <1 x i32> poison, i32 %506, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %507, i1 %353) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %508 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %509 = fcmp ogt float %431, %432, !dbg !90
  %510 = fcmp uno float %431, 0.000000e+00, !dbg !91
  %511 = or i1 %509, %510, !dbg !92
  %512 = select i1 %511, float %431, float %432, !dbg !93
  %513 = bitcast float %512 to i32, !dbg !88
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 16, i32 31), !dbg !88
  %515 = bitcast i32 %514 to float, !dbg !88
  %516 = fcmp ogt float %512, %515, !dbg !90
  %517 = fcmp uno float %512, 0.000000e+00, !dbg !91
  %518 = or i1 %517, %516, !dbg !92
  %519 = select i1 %518, float %512, float %515, !dbg !93
  %520 = bitcast float %519 to i32, !dbg !88
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 8, i32 31), !dbg !88
  %522 = bitcast i32 %521 to float, !dbg !88
  %523 = fcmp ogt float %519, %522, !dbg !90
  %524 = fcmp uno float %519, 0.000000e+00, !dbg !91
  %525 = or i1 %523, %524, !dbg !92
  %526 = select i1 %525, float %519, float %522, !dbg !93
  %527 = bitcast float %526 to i32, !dbg !88
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 4, i32 31), !dbg !88
  %529 = bitcast i32 %528 to float, !dbg !88
  %530 = fcmp ogt float %526, %529, !dbg !90
  %531 = fcmp uno float %526, 0.000000e+00, !dbg !91
  %532 = or i1 %530, %531, !dbg !92
  %533 = select i1 %532, float %526, float %529, !dbg !93
  %534 = bitcast float %533 to i32, !dbg !88
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 2, i32 31), !dbg !88
  %536 = bitcast i32 %535 to float, !dbg !88
  %537 = fcmp ogt float %533, %536, !dbg !90
  %538 = fcmp uno float %533, 0.000000e+00, !dbg !91
  %539 = or i1 %537, %538, !dbg !92
  %540 = select i1 %539, float %533, float %536, !dbg !93
  %541 = bitcast float %540 to i32, !dbg !88
  %542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 1, i32 31), !dbg !88
  %543 = bitcast i32 %542 to float, !dbg !88
  %544 = fcmp ogt float %540, %543, !dbg !90
  %545 = fcmp uno float %540, 0.000000e+00, !dbg !91
  %546 = or i1 %544, %545, !dbg !92
  %547 = select i1 %546, i32 %541, i32 %542, !dbg !93
  %548 = insertelement <1 x i32> poison, i32 %547, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %548, i1 %274) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %549 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %282, i1 %281) #5, !dbg !88
  %550 = bitcast i32 %549 to float, !dbg !88
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 4, i32 31), !dbg !88
  %552 = bitcast i32 %551 to float, !dbg !88
  %553 = fcmp ogt float %550, %552, !dbg !90
  %554 = fcmp uno float %550, 0.000000e+00, !dbg !91
  %555 = or i1 %554, %553, !dbg !92
  %556 = select i1 %555, float %550, float %552, !dbg !93
  %557 = bitcast float %556 to i32, !dbg !88
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 2, i32 31), !dbg !88
  %559 = bitcast i32 %558 to float, !dbg !88
  %560 = fcmp ogt float %556, %559, !dbg !90
  %561 = fcmp uno float %556, 0.000000e+00, !dbg !91
  %562 = or i1 %560, %561, !dbg !92
  %563 = select i1 %562, float %556, float %559, !dbg !93
  %564 = bitcast float %563 to i32, !dbg !88
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 1, i32 31), !dbg !88
  %566 = bitcast i32 %565 to float, !dbg !88
  %567 = fcmp ogt float %563, %566, !dbg !90
  %568 = fcmp uno float %563, 0.000000e+00, !dbg !91
  %569 = or i1 %567, %568, !dbg !92
  %570 = select i1 %569, i32 %564, i32 %565, !dbg !93
  %571 = insertelement <1 x i32> poison, i32 %570, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %571, i1 %353) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %572 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %573 = sext i32 %17 to i64, !dbg !94
  %574 = getelementptr bfloat, ptr addrspace(1) %4, i64 %573, !dbg !94
  %575 = fptrunc float %508 to bfloat, !dbg !95
  %576 = and i32 %19, 255, !dbg !95
  %577 = icmp eq i32 %576, 0, !dbg !95
  %578 = bitcast bfloat %575 to i16, !dbg !95
  %579 = and i1 %18, %577, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %578, ptr addrspace(1) %574, i1 %579) #5, !dbg !95
  %580 = getelementptr bfloat, ptr addrspace(1) %5, i64 %573, !dbg !96
  %581 = fptrunc float %572 to bfloat, !dbg !97
  %582 = bitcast bfloat %581 to i16, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %582, ptr addrspace(1) %580, i1 %579) #5, !dbg !97
  %583 = getelementptr bfloat, ptr addrspace(1) %6, i64 %573, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %578, ptr addrspace(1) %583, i1 %579) #5, !dbg !99
  %584 = getelementptr bfloat, ptr addrspace(1) %7, i64 %573, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %582, ptr addrspace(1) %584, i1 %579) #5, !dbg !101
  %585 = getelementptr bfloat, ptr addrspace(1) %8, i64 %573, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %578, ptr addrspace(1) %585, i1 %579) #5, !dbg !103
  %586 = getelementptr bfloat, ptr addrspace(1) %9, i64 %573, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %582, ptr addrspace(1) %586, i1 %579) #5, !dbg !105
  %.inv = fcmp oge float %508, 0.000000e+00, !dbg !106
  %587 = select i1 %.inv, float 0.000000e+00, float %508, !dbg !106
  %588 = fsub float 0.000000e+00, %587, !dbg !108
  %589 = fcmp uno float %588, 0.000000e+00, !dbg !109
  %.inv3 = fcmp ole float %572, 0.000000e+00, !dbg !111
  %590 = select i1 %.inv3, float 0.000000e+00, float %572, !dbg !111
  %591 = fcmp ogt float %588, %590, !dbg !113
  %592 = or i1 %589, %591, !dbg !114
  %593 = select i1 %592, float %588, float %590, !dbg !115
  %594 = fmul float %593, 0x3F80204080000000, !dbg !116
  %595 = fcmp ogt float %594, 0x3EE4F8B580000000, !dbg !117
  %596 = fcmp uno float %594, 0.000000e+00, !dbg !119
  %597 = or i1 %595, %596, !dbg !120
  %598 = select i1 %597, float %594, float 0x3EE4F8B580000000, !dbg !121
  %599 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %598), !dbg !122
  %600 = sext i32 %25 to i64, !dbg !123
  %601 = getelementptr bfloat, ptr addrspace(1) %3, i64 %600, !dbg !123
  %602 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %601, i1 %18) #5, !dbg !124
  %603 = bitcast i32 %602 to <2 x bfloat>, !dbg !124
  %604 = extractelement <2 x bfloat> %603, i64 0, !dbg !124
  %605 = extractelement <2 x bfloat> %603, i64 1, !dbg !124
  %606 = fpext bfloat %604 to float, !dbg !125
  %607 = fpext bfloat %605 to float, !dbg !125
  %608 = fmul float %599, %606, !dbg !126
  %609 = fmul float %599, %607, !dbg !126
  %610 = tail call float @llvm.nvvm.round.f(float %608) #5, !dbg !127
  %611 = tail call float @llvm.nvvm.round.f(float %609) #5, !dbg !127
  %612 = insertelement <2 x float> poison, float %610, i64 0, !dbg !128
  %613 = insertelement <2 x float> %612, float %611, i64 1, !dbg !128
  %614 = fcmp ogt <2 x float> %613, splat (float -1.270000e+02), !dbg !128
  %615 = fcmp uno <2 x float> %613, zeroinitializer, !dbg !130
  %616 = or <2 x i1> %614, %615, !dbg !131
  %617 = select <2 x i1> %616, <2 x float> %613, <2 x float> splat (float -1.270000e+02), !dbg !132
  %618 = fcmp olt <2 x float> %617, splat (float 1.270000e+02), !dbg !133
  %619 = fcmp uno <2 x float> %617, zeroinitializer, !dbg !135
  %620 = or <2 x i1> %618, %619, !dbg !136
  %621 = fptosi <2 x float> %617 to <2 x i8>, !dbg !137
  %622 = select <2 x i1> %620, <2 x i8> %621, <2 x i8> splat (i8 127), !dbg !138
  %623 = getelementptr i8, ptr addrspace(1) %10, i64 %600, !dbg !139
  %624 = bitcast <2 x i8> %622 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %623, i1 %18) #5, !dbg !140
  %625 = getelementptr i8, ptr addrspace(1) %11, i64 %600, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %625, i1 %18) #5, !dbg !142
  %626 = getelementptr i8, ptr addrspace(1) %12, i64 %600, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %624, ptr addrspace(1) %626, i1 %18) #5, !dbg !144
  %627 = or disjoint i32 %25, 512, !dbg !145
  %628 = sext i32 %627 to i64, !dbg !123
  %629 = getelementptr bfloat, ptr addrspace(1) %3, i64 %628, !dbg !123
  %630 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %629, i1 %18) #5, !dbg !124
  %631 = bitcast i32 %630 to <2 x bfloat>, !dbg !124
  %632 = extractelement <2 x bfloat> %631, i64 0, !dbg !124
  %633 = extractelement <2 x bfloat> %631, i64 1, !dbg !124
  %634 = fpext bfloat %632 to float, !dbg !125
  %635 = fpext bfloat %633 to float, !dbg !125
  %636 = fmul float %599, %634, !dbg !126
  %637 = fmul float %599, %635, !dbg !126
  %638 = tail call float @llvm.nvvm.round.f(float %636) #5, !dbg !127
  %639 = tail call float @llvm.nvvm.round.f(float %637) #5, !dbg !127
  %640 = insertelement <2 x float> poison, float %638, i64 0, !dbg !128
  %641 = insertelement <2 x float> %640, float %639, i64 1, !dbg !128
  %642 = fcmp ogt <2 x float> %641, splat (float -1.270000e+02), !dbg !128
  %643 = fcmp uno <2 x float> %641, zeroinitializer, !dbg !130
  %644 = or <2 x i1> %642, %643, !dbg !131
  %645 = select <2 x i1> %644, <2 x float> %641, <2 x float> splat (float -1.270000e+02), !dbg !132
  %646 = fcmp olt <2 x float> %645, splat (float 1.270000e+02), !dbg !133
  %647 = fcmp uno <2 x float> %645, zeroinitializer, !dbg !135
  %648 = or <2 x i1> %646, %647, !dbg !136
  %649 = fptosi <2 x float> %645 to <2 x i8>, !dbg !137
  %650 = select <2 x i1> %648, <2 x i8> %649, <2 x i8> splat (i8 127), !dbg !138
  %651 = getelementptr i8, ptr addrspace(1) %10, i64 %628, !dbg !139
  %652 = bitcast <2 x i8> %650 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %651, i1 %18) #5, !dbg !140
  %653 = getelementptr i8, ptr addrspace(1) %11, i64 %628, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %653, i1 %18) #5, !dbg !142
  %654 = getelementptr i8, ptr addrspace(1) %12, i64 %628, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %654, i1 %18) #5, !dbg !144
  %655 = add i32 %25, 1024, !dbg !145
  %656 = sext i32 %655 to i64, !dbg !123
  %657 = getelementptr bfloat, ptr addrspace(1) %3, i64 %656, !dbg !123
  %658 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %657, i1 %18) #5, !dbg !124
  %659 = bitcast i32 %658 to <2 x bfloat>, !dbg !124
  %660 = extractelement <2 x bfloat> %659, i64 0, !dbg !124
  %661 = extractelement <2 x bfloat> %659, i64 1, !dbg !124
  %662 = fpext bfloat %660 to float, !dbg !125
  %663 = fpext bfloat %661 to float, !dbg !125
  %664 = fmul float %599, %662, !dbg !126
  %665 = fmul float %599, %663, !dbg !126
  %666 = tail call float @llvm.nvvm.round.f(float %664) #5, !dbg !127
  %667 = tail call float @llvm.nvvm.round.f(float %665) #5, !dbg !127
  %668 = insertelement <2 x float> poison, float %666, i64 0, !dbg !128
  %669 = insertelement <2 x float> %668, float %667, i64 1, !dbg !128
  %670 = fcmp ogt <2 x float> %669, splat (float -1.270000e+02), !dbg !128
  %671 = fcmp uno <2 x float> %669, zeroinitializer, !dbg !130
  %672 = or <2 x i1> %670, %671, !dbg !131
  %673 = select <2 x i1> %672, <2 x float> %669, <2 x float> splat (float -1.270000e+02), !dbg !132
  %674 = fcmp olt <2 x float> %673, splat (float 1.270000e+02), !dbg !133
  %675 = fcmp uno <2 x float> %673, zeroinitializer, !dbg !135
  %676 = or <2 x i1> %674, %675, !dbg !136
  %677 = fptosi <2 x float> %673 to <2 x i8>, !dbg !137
  %678 = select <2 x i1> %676, <2 x i8> %677, <2 x i8> splat (i8 127), !dbg !138
  %679 = getelementptr i8, ptr addrspace(1) %10, i64 %656, !dbg !139
  %680 = bitcast <2 x i8> %678 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %679, i1 %18) #5, !dbg !140
  %681 = getelementptr i8, ptr addrspace(1) %11, i64 %656, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %681, i1 %18) #5, !dbg !142
  %682 = getelementptr i8, ptr addrspace(1) %12, i64 %656, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %682, i1 %18) #5, !dbg !144
  %683 = add i32 %25, 1536, !dbg !145
  %684 = sext i32 %683 to i64, !dbg !123
  %685 = getelementptr bfloat, ptr addrspace(1) %3, i64 %684, !dbg !123
  %686 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %685, i1 %18) #5, !dbg !124
  %687 = bitcast i32 %686 to <2 x bfloat>, !dbg !124
  %688 = extractelement <2 x bfloat> %687, i64 0, !dbg !124
  %689 = extractelement <2 x bfloat> %687, i64 1, !dbg !124
  %690 = fpext bfloat %688 to float, !dbg !125
  %691 = fpext bfloat %689 to float, !dbg !125
  %692 = fmul float %599, %690, !dbg !126
  %693 = fmul float %599, %691, !dbg !126
  %694 = tail call float @llvm.nvvm.round.f(float %692) #5, !dbg !127
  %695 = tail call float @llvm.nvvm.round.f(float %693) #5, !dbg !127
  %696 = insertelement <2 x float> poison, float %694, i64 0, !dbg !128
  %697 = insertelement <2 x float> %696, float %695, i64 1, !dbg !128
  %698 = fcmp ogt <2 x float> %697, splat (float -1.270000e+02), !dbg !128
  %699 = fcmp uno <2 x float> %697, zeroinitializer, !dbg !130
  %700 = or <2 x i1> %698, %699, !dbg !131
  %701 = select <2 x i1> %700, <2 x float> %697, <2 x float> splat (float -1.270000e+02), !dbg !132
  %702 = fcmp olt <2 x float> %701, splat (float 1.270000e+02), !dbg !133
  %703 = fcmp uno <2 x float> %701, zeroinitializer, !dbg !135
  %704 = or <2 x i1> %702, %703, !dbg !136
  %705 = fptosi <2 x float> %701 to <2 x i8>, !dbg !137
  %706 = select <2 x i1> %704, <2 x i8> %705, <2 x i8> splat (i8 127), !dbg !138
  %707 = getelementptr i8, ptr addrspace(1) %10, i64 %684, !dbg !139
  %708 = bitcast <2 x i8> %706 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %708, ptr addrspace(1) %707, i1 %18) #5, !dbg !140
  %709 = getelementptr i8, ptr addrspace(1) %11, i64 %684, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %708, ptr addrspace(1) %709, i1 %18) #5, !dbg !142
  %710 = getelementptr i8, ptr addrspace(1) %12, i64 %684, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %708, ptr addrspace(1) %710, i1 %18) #5, !dbg !144
  %711 = add i32 %25, 2048, !dbg !145
  %712 = sext i32 %711 to i64, !dbg !123
  %713 = getelementptr bfloat, ptr addrspace(1) %3, i64 %712, !dbg !123
  %714 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %713, i1 %18) #5, !dbg !124
  %715 = bitcast i32 %714 to <2 x bfloat>, !dbg !124
  %716 = extractelement <2 x bfloat> %715, i64 0, !dbg !124
  %717 = extractelement <2 x bfloat> %715, i64 1, !dbg !124
  %718 = fpext bfloat %716 to float, !dbg !125
  %719 = fpext bfloat %717 to float, !dbg !125
  %720 = fmul float %599, %718, !dbg !126
  %721 = fmul float %599, %719, !dbg !126
  %722 = tail call float @llvm.nvvm.round.f(float %720) #5, !dbg !127
  %723 = tail call float @llvm.nvvm.round.f(float %721) #5, !dbg !127
  %724 = insertelement <2 x float> poison, float %722, i64 0, !dbg !128
  %725 = insertelement <2 x float> %724, float %723, i64 1, !dbg !128
  %726 = fcmp ogt <2 x float> %725, splat (float -1.270000e+02), !dbg !128
  %727 = fcmp uno <2 x float> %725, zeroinitializer, !dbg !130
  %728 = or <2 x i1> %726, %727, !dbg !131
  %729 = select <2 x i1> %728, <2 x float> %725, <2 x float> splat (float -1.270000e+02), !dbg !132
  %730 = fcmp olt <2 x float> %729, splat (float 1.270000e+02), !dbg !133
  %731 = fcmp uno <2 x float> %729, zeroinitializer, !dbg !135
  %732 = or <2 x i1> %730, %731, !dbg !136
  %733 = fptosi <2 x float> %729 to <2 x i8>, !dbg !137
  %734 = select <2 x i1> %732, <2 x i8> %733, <2 x i8> splat (i8 127), !dbg !138
  %735 = getelementptr i8, ptr addrspace(1) %10, i64 %712, !dbg !139
  %736 = bitcast <2 x i8> %734 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %736, ptr addrspace(1) %735, i1 %18) #5, !dbg !140
  %737 = getelementptr i8, ptr addrspace(1) %11, i64 %712, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %736, ptr addrspace(1) %737, i1 %18) #5, !dbg !142
  %738 = getelementptr i8, ptr addrspace(1) %12, i64 %712, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %736, ptr addrspace(1) %738, i1 %18) #5, !dbg !144
  %739 = add i32 %25, 2560, !dbg !145
  %740 = sext i32 %739 to i64, !dbg !123
  %741 = getelementptr bfloat, ptr addrspace(1) %3, i64 %740, !dbg !123
  %742 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %741, i1 %18) #5, !dbg !124
  %743 = bitcast i32 %742 to <2 x bfloat>, !dbg !124
  %744 = extractelement <2 x bfloat> %743, i64 0, !dbg !124
  %745 = extractelement <2 x bfloat> %743, i64 1, !dbg !124
  %746 = fpext bfloat %744 to float, !dbg !125
  %747 = fpext bfloat %745 to float, !dbg !125
  %748 = fmul float %599, %746, !dbg !126
  %749 = fmul float %599, %747, !dbg !126
  %750 = tail call float @llvm.nvvm.round.f(float %748) #5, !dbg !127
  %751 = tail call float @llvm.nvvm.round.f(float %749) #5, !dbg !127
  %752 = insertelement <2 x float> poison, float %750, i64 0, !dbg !128
  %753 = insertelement <2 x float> %752, float %751, i64 1, !dbg !128
  %754 = fcmp ogt <2 x float> %753, splat (float -1.270000e+02), !dbg !128
  %755 = fcmp uno <2 x float> %753, zeroinitializer, !dbg !130
  %756 = or <2 x i1> %754, %755, !dbg !131
  %757 = select <2 x i1> %756, <2 x float> %753, <2 x float> splat (float -1.270000e+02), !dbg !132
  %758 = fcmp olt <2 x float> %757, splat (float 1.270000e+02), !dbg !133
  %759 = fcmp uno <2 x float> %757, zeroinitializer, !dbg !135
  %760 = or <2 x i1> %758, %759, !dbg !136
  %761 = fptosi <2 x float> %757 to <2 x i8>, !dbg !137
  %762 = select <2 x i1> %760, <2 x i8> %761, <2 x i8> splat (i8 127), !dbg !138
  %763 = getelementptr i8, ptr addrspace(1) %10, i64 %740, !dbg !139
  %764 = bitcast <2 x i8> %762 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %764, ptr addrspace(1) %763, i1 %18) #5, !dbg !140
  %765 = getelementptr i8, ptr addrspace(1) %11, i64 %740, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %764, ptr addrspace(1) %765, i1 %18) #5, !dbg !142
  %766 = getelementptr i8, ptr addrspace(1) %12, i64 %740, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %764, ptr addrspace(1) %766, i1 %18) #5, !dbg !144
  ret void, !dbg !146
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 41, scope: !6)
!16 = !DILocation(line: 229, column: 46, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !6, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 47, column: 79, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !17, inlinedAt: !22)
!22 = !DILocation(line: 42, column: 51, scope: !6)
!23 = !DILocation(line: 210, column: 34, scope: !17, inlinedAt: !22)
!24 = !DILocation(line: 210, column: 26, scope: !17, inlinedAt: !22)
!25 = !DILocation(line: 211, column: 39, scope: !17, inlinedAt: !22)
!26 = !DILocation(line: 211, column: 31, scope: !17, inlinedAt: !22)
!27 = !DILocation(line: 211, column: 22, scope: !17, inlinedAt: !22)
!28 = !DILocation(line: 222, column: 15, scope: !29, inlinedAt: !19)
!29 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!30 = !DILocation(line: 217, column: 21, scope: !29, inlinedAt: !19)
!31 = !DILocation(line: 218, column: 28, scope: !29, inlinedAt: !19)
!32 = !DILocation(line: 219, column: 39, scope: !29, inlinedAt: !19)
!33 = !DILocation(line: 219, column: 60, scope: !29, inlinedAt: !19)
!34 = !DILocation(line: 219, column: 49, scope: !29, inlinedAt: !19)
!35 = !DILocation(line: 221, column: 25, scope: !29, inlinedAt: !19)
!36 = !DILocation(line: 221, column: 17, scope: !29, inlinedAt: !19)
!37 = !DILocation(line: 222, column: 30, scope: !29, inlinedAt: !19)
!38 = !DILocation(line: 222, column: 38, scope: !29, inlinedAt: !19)
!39 = !DILocation(line: 222, column: 49, scope: !29, inlinedAt: !19)
!40 = !DILocation(line: 222, column: 22, scope: !29, inlinedAt: !19)
!41 = !DILocation(line: 67, column: 24, scope: !6)
!42 = !DILocation(line: 69, column: 24, scope: !6)
!43 = !DILocation(line: 70, column: 32, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 83, column: 50, scope: !6)
!46 = !DILocation(line: 71, column: 24, scope: !6)
!47 = !DILocation(line: 65, column: 24, scope: !6)
!48 = !DILocation(line: 54, column: 31, scope: !6)
!49 = !DILocation(line: 59, column: 41, scope: !6)
!50 = !DILocation(line: 59, column: 34, scope: !6)
!51 = !DILocation(line: 59, column: 51, scope: !6)
!52 = !DILocation(line: 60, column: 42, scope: !6)
!53 = !DILocation(line: 60, column: 35, scope: !6)
!54 = !DILocation(line: 60, column: 49, scope: !6)
!55 = !DILocation(line: 61, column: 35, scope: !6)
!56 = !DILocation(line: 61, column: 49, scope: !6)
!57 = !DILocation(line: 62, column: 35, scope: !6)
!58 = !DILocation(line: 62, column: 42, scope: !6)
!59 = !DILocation(line: 63, column: 35, scope: !6)
!60 = !DILocation(line: 63, column: 42, scope: !6)
!61 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !62)
!62 = !DILocation(line: 82, column: 47, scope: !6)
!63 = !DILocation(line: 59, column: 113, scope: !6)
!64 = !DILocation(line: 61, column: 102, scope: !6)
!65 = !DILocation(line: 63, column: 95, scope: !6)
!66 = !DILocation(line: 74, column: 24, scope: !6)
!67 = !DILocation(line: 76, column: 24, scope: !6)
!68 = !DILocation(line: 77, column: 24, scope: !6)
!69 = !DILocation(line: 79, column: 24, scope: !6)
!70 = !DILocation(line: 80, column: 24, scope: !6)
!71 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !62)
!72 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !62)
!73 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !62)
!74 = !DILocation(line: 86, column: 53, scope: !6)
!75 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !76)
!76 = !DILocation(line: 84, column: 47, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !76)
!79 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !76)
!80 = !DILocation(line: 85, column: 50, scope: !6)
!81 = !DILocation(line: 86, column: 29, scope: !6)
!82 = !DILocation(line: 110, column: 29, scope: !17, inlinedAt: !83)
!83 = !DILocation(line: 87, column: 40, scope: !6)
!84 = !DILocation(line: 94, column: 15, scope: !29, inlinedAt: !83)
!85 = !DILocation(line: 96, column: 16, scope: !29, inlinedAt: !83)
!86 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !83)
!87 = !DILocation(line: 96, column: 21, scope: !29, inlinedAt: !83)
!88 = !DILocation(line: 115, column: 29, scope: !17, inlinedAt: !89)
!89 = !DILocation(line: 88, column: 40, scope: !6)
!90 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !89)
!91 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !89)
!92 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !89)
!93 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !89)
!94 = !DILocation(line: 89, column: 25, scope: !6)
!95 = !DILocation(line: 89, column: 37, scope: !6)
!96 = !DILocation(line: 90, column: 25, scope: !6)
!97 = !DILocation(line: 90, column: 37, scope: !6)
!98 = !DILocation(line: 91, column: 25, scope: !6)
!99 = !DILocation(line: 91, column: 37, scope: !6)
!100 = !DILocation(line: 92, column: 25, scope: !6)
!101 = !DILocation(line: 92, column: 37, scope: !6)
!102 = !DILocation(line: 93, column: 25, scope: !6)
!103 = !DILocation(line: 93, column: 37, scope: !6)
!104 = !DILocation(line: 94, column: 25, scope: !6)
!105 = !DILocation(line: 94, column: 37, scope: !6)
!106 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !107)
!107 = !DILocation(line: 103, column: 46, scope: !6)
!108 = !DILocation(line: 104, column: 17, scope: !6)
!109 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !110)
!110 = !DILocation(line: 106, column: 46, scope: !6)
!111 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !112)
!112 = !DILocation(line: 105, column: 46, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !110)
!114 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !110)
!115 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !110)
!116 = !DILocation(line: 108, column: 24, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !118)
!118 = !DILocation(line: 111, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !118)
!122 = !DILocation(line: 114, column: 25, scope: !6)
!123 = !DILocation(line: 101, column: 36, scope: !6)
!124 = !DILocation(line: 101, column: 53, scope: !6)
!125 = !DILocation(line: 101, column: 115, scope: !6)
!126 = !DILocation(line: 117, column: 24, scope: !6)
!127 = !DILocation(line: 118, column: 36, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !129)
!129 = !DILocation(line: 121, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !129)
!133 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !134)
!134 = !DILocation(line: 123, column: 46, scope: !6)
!135 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !134)
!136 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !134)
!137 = !DILocation(line: 125, column: 25, scope: !6)
!138 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !134)
!139 = !DILocation(line: 126, column: 29, scope: !6)
!140 = !DILocation(line: 126, column: 53, scope: !6)
!141 = !DILocation(line: 127, column: 30, scope: !6)
!142 = !DILocation(line: 127, column: 54, scope: !6)
!143 = !DILocation(line: 128, column: 30, scope: !6)
!144 = !DILocation(line: 128, column: 54, scope: !6)
!145 = !DILocation(line: 101, column: 43, scope: !6)
!146 = !DILocation(line: 95, column: 4, scope: !6)
