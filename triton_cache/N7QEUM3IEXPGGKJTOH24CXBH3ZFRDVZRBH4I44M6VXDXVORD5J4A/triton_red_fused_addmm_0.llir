; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 6, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 1, !dbg !11
  %11 = and i32 %10, 63, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, 9216, !dbg !13
  %14 = shl i32 %9, 2, !dbg !14
  %15 = and i32 %14, 4, !dbg !14
  %16 = mul i32 %12, 3072, !dbg !15
  %17 = zext nneg i32 %15 to i64, !dbg !16
  br label %18, !dbg !16

18:                                               ; preds = %6, %18
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %18 ]
  %19 = phi float [ 0.000000e+00, %6 ], [ %87, %18 ]
  %20 = phi float [ 0.000000e+00, %6 ], [ %88, %18 ]
  %21 = phi float [ 0.000000e+00, %6 ], [ %89, %18 ]
  %22 = phi float [ 0.000000e+00, %6 ], [ %90, %18 ]
  %23 = or disjoint i64 %indvars.iv, %17, !dbg !17
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %24, i1 true) #4, !dbg !19
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !19
  %28 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractelement <2 x bfloat> %27, i64 0, !dbg !19
  %31 = extractelement <2 x bfloat> %27, i64 1, !dbg !19
  %32 = extractelement <2 x bfloat> %29, i64 0, !dbg !19
  %33 = extractelement <2 x bfloat> %29, i64 1, !dbg !19
  %34 = fpext bfloat %30 to float, !dbg !20
  %35 = fpext bfloat %31 to float, !dbg !20
  %36 = fpext bfloat %32 to float, !dbg !20
  %37 = fpext bfloat %33 to float, !dbg !20
  %38 = trunc nuw nsw i64 %23 to i32, !dbg !21
  %39 = add i32 %16, %38, !dbg !21
  %40 = sext i32 %39 to i64, !dbg !22
  %41 = getelementptr bfloat, ptr addrspace(1) %1, i64 %40, !dbg !22
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %13) #4, !dbg !23
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !23
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !23
  %47 = extractelement <2 x bfloat> %44, i64 0, !dbg !23
  %48 = extractelement <2 x bfloat> %44, i64 1, !dbg !23
  %49 = extractelement <2 x bfloat> %46, i64 0, !dbg !23
  %50 = extractelement <2 x bfloat> %46, i64 1, !dbg !23
  %51 = fpext bfloat %47 to float, !dbg !24
  %52 = fpext bfloat %48 to float, !dbg !24
  %53 = fpext bfloat %49 to float, !dbg !24
  %54 = fpext bfloat %50 to float, !dbg !24
  %55 = fsub float 0.000000e+00, %34, !dbg !25
  %56 = fsub float 0.000000e+00, %35, !dbg !25
  %57 = fsub float 0.000000e+00, %36, !dbg !25
  %58 = fsub float 0.000000e+00, %37, !dbg !25
  %59 = fmul float %55, 0x3FF7154760000000, !dbg !29
  %60 = tail call float @llvm.nvvm.ex2.approx.f(float %59), !dbg !29
  %61 = fmul float %56, 0x3FF7154760000000, !dbg !29
  %62 = tail call float @llvm.nvvm.ex2.approx.f(float %61), !dbg !29
  %63 = fmul float %57, 0x3FF7154760000000, !dbg !29
  %64 = tail call float @llvm.nvvm.ex2.approx.f(float %63), !dbg !29
  %65 = fmul float %58, 0x3FF7154760000000, !dbg !29
  %66 = tail call float @llvm.nvvm.ex2.approx.f(float %65), !dbg !29
  %67 = fadd float %60, 1.000000e+00, !dbg !30
  %68 = fadd float %62, 1.000000e+00, !dbg !30
  %69 = fadd float %64, 1.000000e+00, !dbg !30
  %70 = fadd float %66, 1.000000e+00, !dbg !30
  %71 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %67), !dbg !31
  %72 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %68), !dbg !31
  %73 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %69), !dbg !31
  %74 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %70), !dbg !31
  %75 = fmul float %71, %34, !dbg !32
  %76 = fmul float %72, %35, !dbg !32
  %77 = fmul float %73, %36, !dbg !32
  %78 = fmul float %74, %37, !dbg !32
  %79 = fmul float %75, %51, !dbg !33
  %80 = fmul float %76, %52, !dbg !33
  %81 = fmul float %77, %53, !dbg !33
  %82 = fmul float %78, %54, !dbg !33
  %83 = fadd float %19, %79, !dbg !34
  %84 = fadd float %20, %80, !dbg !34
  %85 = fadd float %21, %81, !dbg !34
  %86 = fadd float %22, %82, !dbg !34
  %87 = select i1 %13, float %83, float %19, !dbg !35
  %88 = select i1 %13, float %84, float %20, !dbg !35
  %89 = select i1 %13, float %85, float %21, !dbg !35
  %90 = select i1 %13, float %86, float %22, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %91 = icmp samesign ult i64 %indvars.iv, 3064, !dbg !16
  br i1 %91, label %18, label %92, !dbg !16

92:                                               ; preds = %18
  %93 = and i32 %9, 63, !dbg !11
  %94 = or disjoint i32 %8, %93, !dbg !12
  %95 = icmp slt i32 %94, 9216, !dbg !13
  %96 = and i32 %9, 64, !dbg !11
  %97 = icmp eq i32 %96, 0, !dbg !11
  %98 = fadd float %87, %88, !dbg !36
  %99 = fadd float %89, %98, !dbg !36
  %100 = fadd float %90, %99, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !39
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !39
  %103 = bitcast i32 %102 to float, !dbg !39
  %104 = fadd float %100, %103, !dbg !36
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  %106 = bitcast float %104 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %107 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %93, !dbg !40
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !40
  %109 = sext i32 %94 to i64, !dbg !41
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !41
  %111 = and i1 %97, %95, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %110, i1 %111) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 31, column: 31, scope: !6)
!18 = !DILocation(line: 36, column: 34, scope: !6)
!19 = !DILocation(line: 36, column: 41, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 41, scope: !6)
!22 = !DILocation(line: 37, column: 34, scope: !6)
!23 = !DILocation(line: 37, column: 51, scope: !6)
!24 = !DILocation(line: 37, column: 113, scope: !6)
!25 = !DILocation(line: 47, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!28 = !DILocation(line: 39, column: 26, scope: !6)
!29 = !DILocation(line: 47, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 47, column: 20, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 47, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 40, column: 22, scope: !6)
!33 = !DILocation(line: 44, column: 22, scope: !6)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 47, column: 50, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!38 = !DILocation(line: 48, column: 27, scope: !6)
!39 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !38)
!40 = !DILocation(line: 48, column: 30, scope: !6)
!41 = !DILocation(line: 49, column: 25, scope: !6)
!42 = !DILocation(line: 49, column: 37, scope: !6)
!43 = !DILocation(line: 49, column: 4, scope: !6)
