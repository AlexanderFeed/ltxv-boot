; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_per_fused_add_native_layer_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %11 = and i32 %10, 31, !dbg !10
  %12 = lshr i32 %10, 5, !dbg !10
  %13 = shl i32 %10, 2, !dbg !10
  %14 = and i32 %13, 1020, !dbg !10
  %15 = icmp samesign ult i32 %14, 768, !dbg !11
  %16 = mul i32 %9, 768, !dbg !12
  %17 = add i32 %14, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %15) #5, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !15
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !15
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %15) #5, !dbg !17
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !17
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !17
  %31 = zext nneg i32 %14 to i64, !dbg !18
  %32 = getelementptr bfloat, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %15) #5, !dbg !19
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !19
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !19
  %38 = getelementptr bfloat, ptr addrspace(1) %3, i64 %31, !dbg !20
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %15) #5, !dbg !21
  %40 = getelementptr bfloat, ptr addrspace(1) %4, i64 %31, !dbg !22
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %15) #5, !dbg !23
  %42 = and i32 %12, 7, !dbg !24
  %43 = icmp eq i32 %11, 0, !dbg !24
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i32 %42, !dbg !24
  %45 = icmp slt i32 %10, 8, !dbg !24
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !24
  %47 = and i32 %10, 7, !dbg !24
  %48 = icmp eq i32 %47, 0, !dbg !24
  %49 = and i1 %45, %48, !dbg !24
  %50 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !28
  %51 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !29
  %52 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !30
  %53 = fadd <2 x float> %51, %52, !dbg !31
  %54 = fadd <2 x float> %53, %50, !dbg !32
  %55 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !28
  %56 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !29
  %57 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !30
  %58 = fadd <2 x float> %56, %57, !dbg !31
  %59 = fadd <2 x float> %58, %55, !dbg !32
  %shift = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %60 = fadd <2 x float> %59, %shift, !dbg !33
  %61 = fadd <2 x float> %54, %60, !dbg !33
  %shift1 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %62 = fadd <2 x float> %shift1, %61, !dbg !33
  %63 = extractelement <2 x float> %62, i64 0, !dbg !33
  %64 = select i1 %15, float %63, float 0.000000e+00, !dbg !33
  %65 = bitcast float %64 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %64, %67, !dbg !33
  %69 = bitcast float %68 to i32, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %68, %71, !dbg !33
  %73 = bitcast float %72 to i32, !dbg !24
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = fadd float %72, %75, !dbg !33
  %77 = bitcast float %76 to i32, !dbg !24
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = fadd float %76, %79, !dbg !33
  %81 = bitcast float %80 to i32, !dbg !24
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !24
  %83 = bitcast i32 %82 to float, !dbg !24
  %84 = fadd float %80, %83, !dbg !33
  %85 = bitcast float %84 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %85, i1 %43) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %46, i1 %45) #5, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !24
  %89 = bitcast i32 %88 to float, !dbg !24
  %90 = fadd float %87, %89, !dbg !33
  %91 = bitcast float %90 to i32, !dbg !24
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !24
  %93 = bitcast i32 %92 to float, !dbg !24
  %94 = fadd float %90, %93, !dbg !33
  %95 = bitcast float %94 to i32, !dbg !24
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !24
  %97 = bitcast i32 %96 to float, !dbg !24
  %98 = fadd float %94, %97, !dbg !33
  %99 = bitcast float %98 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %99, i1 %49) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %100 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %101 = fadd float %100, 0.000000e+00, !dbg !35
  %102 = tail call float @llvm.nvvm.div.full(float %101, float 7.680000e+02), !dbg !39
  %103 = insertelement <2 x float> poison, float %102, i64 0, !dbg !40
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %105 = fsub <2 x float> %59, %104, !dbg !40
  %106 = fsub <2 x float> %54, %104, !dbg !40
  %107 = fmul <2 x float> %105, %105, !dbg !41
  %108 = fmul <2 x float> %105, %105, !dbg !41
  %109 = fmul <2 x float> %106, %106, !dbg !41
  %110 = fmul <2 x float> %106, %106, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift2 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %111 = fadd <2 x float> %107, %shift2, !dbg !44
  %112 = fadd <2 x float> %109, %111, !dbg !44
  %shift3 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %113 = fadd <2 x float> %shift3, %112, !dbg !44
  %114 = extractelement <2 x float> %113, i64 0, !dbg !44
  %115 = select i1 %15, float %114, float 0.000000e+00, !dbg !44
  %116 = bitcast float %115 to i32, !dbg !42
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !42
  %118 = bitcast i32 %117 to float, !dbg !42
  %119 = fadd float %115, %118, !dbg !44
  %120 = bitcast float %119 to i32, !dbg !42
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !42
  %122 = bitcast i32 %121 to float, !dbg !42
  %123 = fadd float %119, %122, !dbg !44
  %124 = bitcast float %123 to i32, !dbg !42
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !42
  %126 = bitcast i32 %125 to float, !dbg !42
  %127 = fadd float %123, %126, !dbg !44
  %128 = bitcast float %127 to i32, !dbg !42
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !42
  %130 = bitcast i32 %129 to float, !dbg !42
  %131 = fadd float %127, %130, !dbg !44
  %132 = bitcast float %131 to i32, !dbg !42
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !42
  %134 = bitcast i32 %133 to float, !dbg !42
  %135 = fadd float %131, %134, !dbg !44
  %136 = bitcast float %135 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %136, i1 %43) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %46, i1 %45) #5, !dbg !42
  %138 = bitcast i32 %137 to float, !dbg !42
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !42
  %140 = bitcast i32 %139 to float, !dbg !42
  %141 = fadd float %138, %140, !dbg !44
  %142 = bitcast float %141 to i32, !dbg !42
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !42
  %144 = bitcast i32 %143 to float, !dbg !42
  %145 = fadd float %141, %144, !dbg !44
  %146 = bitcast float %145 to i32, !dbg !42
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !42
  %148 = bitcast i32 %147 to float, !dbg !42
  %149 = fadd float %145, %148, !dbg !44
  %150 = bitcast float %149 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %150, i1 %49) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %151 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %152 = fadd float %151, 0.000000e+00, !dbg !45
  %153 = tail call float @llvm.nvvm.div.full(float %152, float 7.680000e+02), !dbg !47
  %154 = fadd float %153, 0x3EE4F8B580000000, !dbg !48
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %155, 0, !dbg !49
  br i1 %.not.i, label %158, label %156, !dbg !49

156:                                              ; preds = %8
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

158:                                              ; preds = %8
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !49
  %160 = extractvalue { i32, i32 } %41, 1, !dbg !23
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !23
  %162 = extractvalue { i32, i32 } %41, 0, !dbg !23
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !23
  %164 = extractvalue { i32, i32 } %39, 1, !dbg !21
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !21
  %166 = extractvalue { i32, i32 } %39, 0, !dbg !21
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !21
  %168 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !50
  %169 = shufflevector <2 x float> %168, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %170 = fmul <2 x float> %105, %169, !dbg !50
  %171 = fmul <2 x float> %106, %169, !dbg !50
  %172 = fpext <2 x bfloat> %163 to <2 x float>, !dbg !51
  %173 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !52
  %174 = fmul <2 x float> %170, %173, !dbg !53
  %175 = fadd <2 x float> %174, %172, !dbg !54
  %176 = fptrunc <2 x float> %175 to <2 x bfloat>, !dbg !55
  %177 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !51
  %178 = fpext <2 x bfloat> %165 to <2 x float>, !dbg !52
  %179 = fmul <2 x float> %171, %178, !dbg !53
  %180 = fadd <2 x float> %179, %177, !dbg !54
  %181 = fptrunc <2 x float> %180 to <2 x bfloat>, !dbg !55
  %182 = bitcast <2 x bfloat> %176 to i32, !dbg !55
  %183 = bitcast <2 x bfloat> %181 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %19, i1 %15) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfnsqseohwz3h7mwuarosy6bzturmfmutuflwjhcwh6fwrklwouz.py", directory: "/tmp/torchinductor_root/fn")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_9, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_9", linkageName: "triton_per_fused_add_native_layer_norm_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 25, column: 28, scope: !6)
!10 = !DILocation(line: 28, column: 28, scope: !6)
!11 = !DILocation(line: 30, column: 25, scope: !6)
!12 = !DILocation(line: 35, column: 45, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 46, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 37, scope: !6)
!20 = !DILocation(line: 38, column: 31, scope: !6)
!21 = !DILocation(line: 38, column: 38, scope: !6)
!22 = !DILocation(line: 39, column: 31, scope: !6)
!23 = !DILocation(line: 39, column: 38, scope: !6)
!24 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 47, column: 59, scope: !6)
!28 = !DILocation(line: 35, column: 73, scope: !6)
!29 = !DILocation(line: 36, column: 69, scope: !6)
!30 = !DILocation(line: 37, column: 90, scope: !6)
!31 = !DILocation(line: 40, column: 18, scope: !6)
!32 = !DILocation(line: 41, column: 18, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !27)
!34 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!35 = !DILocation(line: 57, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 47, column: 45, scope: !6)
!39 = !DILocation(line: 50, column: 21, scope: !6)
!40 = !DILocation(line: 51, column: 19, scope: !6)
!41 = !DILocation(line: 52, column: 20, scope: !6)
!42 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !43)
!43 = !DILocation(line: 55, column: 59, scope: !6)
!44 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 15, scope: !36, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 45, scope: !6)
!47 = !DILocation(line: 58, column: 21, scope: !6)
!48 = !DILocation(line: 60, column: 20, scope: !6)
!49 = !DILocation(line: 61, column: 28, scope: !6)
!50 = !DILocation(line: 62, column: 20, scope: !6)
!51 = !DILocation(line: 39, column: 91, scope: !6)
!52 = !DILocation(line: 38, column: 91, scope: !6)
!53 = !DILocation(line: 64, column: 20, scope: !6)
!54 = !DILocation(line: 66, column: 20, scope: !6)
!55 = !DILocation(line: 68, column: 51, scope: !6)
!56 = !DILocation(line: 68, column: 4, scope: !6)
