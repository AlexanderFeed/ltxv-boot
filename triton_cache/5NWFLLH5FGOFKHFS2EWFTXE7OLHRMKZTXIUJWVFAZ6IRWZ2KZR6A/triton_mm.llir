; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 1536, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 29, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 1536, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = or disjoint i32 %14, %18, !dbg !20
  %20 = or disjoint i32 %19, 64, !dbg !20
  %21 = shl nsw i32 %13, 6, !dbg !21
  %22 = shl i32 %15, 2, !dbg !22
  %23 = and i32 %22, 16, !dbg !22
  %24 = or disjoint i32 %21, %18, !dbg !23
  %25 = srem i32 %19, 3600, !dbg !24
  %26 = srem i32 %20, 3600, !dbg !24
  %27 = srem i32 %24, 12288, !dbg !25
  %28 = shl i32 %15, 4, !dbg !26
  %29 = and i32 %28, 16, !dbg !26
  %30 = mul nsw i32 %25, 3072, !dbg !27
  %31 = mul nsw i32 %26, 3072, !dbg !27
  %32 = mul nsw i32 %27, 3072, !dbg !28
  %33 = or disjoint i32 %30, %29, !dbg !29
  %34 = or disjoint i32 %31, %29, !dbg !29
  %35 = sext i32 %33 to i64, !dbg !30
  %36 = getelementptr i8, ptr addrspace(1) %0, i64 %35, !dbg !30
  %37 = sext i32 %34 to i64, !dbg !30
  %38 = getelementptr i8, ptr addrspace(1) %0, i64 %37, !dbg !30
  %39 = shl nuw nsw i32 %16, 1, !dbg !31
  %40 = xor i32 %29, %39, !dbg !31
  %41 = shl nuw nsw i32 %18, 5, !dbg !31
  %42 = or disjoint i32 %41, %40, !dbg !31
  %43 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %42, !dbg !31
  %44 = or disjoint i32 %42, 2048, !dbg !31
  %45 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %44, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %43, ptr addrspace(1) %36, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %45, ptr addrspace(1) %38, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %46 = or disjoint i32 %32, %29, !dbg !32
  %47 = sext i32 %46 to i64, !dbg !33
  %48 = getelementptr i8, ptr addrspace(1) %1, i64 %47, !dbg !33
  %49 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %42, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %49, ptr addrspace(1) %48, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %50 = or disjoint i32 %29, 32, !dbg !35
  %51 = or disjoint i32 %30, %50, !dbg !29
  %52 = or disjoint i32 %31, %50, !dbg !29
  %53 = sext i32 %51 to i64, !dbg !30
  %54 = getelementptr i8, ptr addrspace(1) %0, i64 %53, !dbg !30
  %55 = sext i32 %52 to i64, !dbg !30
  %56 = getelementptr i8, ptr addrspace(1) %0, i64 %55, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %57 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %42, !dbg !31
  %58 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %44, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %57, ptr addrspace(1) %54, i32 16) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %58, ptr addrspace(1) %56, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %59 = or disjoint i32 %32, %50, !dbg !32
  %60 = sext i32 %59 to i64, !dbg !33
  %61 = getelementptr i8, ptr addrspace(1) %1, i64 %60, !dbg !33
  %62 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10240), i32 %42, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %61, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %invariant.op = or disjoint i32 %16, 32, !dbg !36
  %invariant.op67 = or disjoint i32 %29, 64, !dbg !36
  %63 = and i32 %15, 7
  %64 = and i32 %15, 15
  %65 = xor i32 %22, %15
  %66 = and i32 %65, 16
  %67 = lshr i32 %15, 2
  %68 = and i32 %67, 16
  %69 = or disjoint i32 %68, %64
  %70 = shl nuw nsw i32 %69, 5
  %71 = or disjoint i32 %70, %66
  %.reass = or disjoint i32 %63, %invariant.op
  %72 = or disjoint i32 %.reass, %68
  %73 = shl nuw nsw i32 %72, 5
  %74 = or disjoint i32 %73, %66
  %75 = or disjoint i32 %71, 2048
  %76 = or disjoint i32 %71, 3072
  %77 = xor i32 %23, %39
  %78 = lshr i32 %15, 2
  %79 = and i32 %78, 8
  %80 = or disjoint i32 %79, %63
  %81 = shl nuw nsw i32 %80, 5
  %82 = or disjoint i32 %81, %77
  %83 = or disjoint i32 %82, 512
  %84 = or disjoint i32 %82, 1024
  %85 = or disjoint i32 %82, 1536
  %86 = zext nneg i32 %invariant.op67 to i64, !dbg !36
  %87 = sext i32 %32 to i64, !dbg !36
  %88 = sext i32 %31 to i64, !dbg !36
  %89 = sext i32 %30 to i64, !dbg !36
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %89, !dbg !36
  %invariant.gep197 = getelementptr i8, ptr addrspace(1) %0, i64 %88, !dbg !36
  %invariant.gep199 = getelementptr i8, ptr addrspace(1) %1, i64 %87, !dbg !36
  br label %90, !dbg !36

90:                                               ; preds = %4, %90
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %90 ]
  %91 = phi i32 [ -1, %4 ], [ %160, %90 ]
  %92 = phi i32 [ 1, %4 ], [ %295, %90 ]
  %93 = phi i32 [ 0, %4 ], [ %214, %90 ]
  %94 = phi i32 [ 0, %4 ], [ %215, %90 ]
  %95 = phi i32 [ 0, %4 ], [ %216, %90 ]
  %96 = phi i32 [ 0, %4 ], [ %217, %90 ]
  %97 = phi i32 [ 0, %4 ], [ %219, %90 ]
  %98 = phi i32 [ 0, %4 ], [ %220, %90 ]
  %99 = phi i32 [ 0, %4 ], [ %221, %90 ]
  %100 = phi i32 [ 0, %4 ], [ %222, %90 ]
  %101 = phi i32 [ 0, %4 ], [ %224, %90 ]
  %102 = phi i32 [ 0, %4 ], [ %225, %90 ]
  %103 = phi i32 [ 0, %4 ], [ %226, %90 ]
  %104 = phi i32 [ 0, %4 ], [ %227, %90 ]
  %105 = phi i32 [ 0, %4 ], [ %229, %90 ]
  %106 = phi i32 [ 0, %4 ], [ %230, %90 ]
  %107 = phi i32 [ 0, %4 ], [ %231, %90 ]
  %108 = phi i32 [ 0, %4 ], [ %232, %90 ]
  %109 = phi i32 [ 0, %4 ], [ %234, %90 ]
  %110 = phi i32 [ 0, %4 ], [ %235, %90 ]
  %111 = phi i32 [ 0, %4 ], [ %236, %90 ]
  %112 = phi i32 [ 0, %4 ], [ %237, %90 ]
  %113 = phi i32 [ 0, %4 ], [ %239, %90 ]
  %114 = phi i32 [ 0, %4 ], [ %240, %90 ]
  %115 = phi i32 [ 0, %4 ], [ %241, %90 ]
  %116 = phi i32 [ 0, %4 ], [ %242, %90 ]
  %117 = phi i32 [ 0, %4 ], [ %244, %90 ]
  %118 = phi i32 [ 0, %4 ], [ %245, %90 ]
  %119 = phi i32 [ 0, %4 ], [ %246, %90 ]
  %120 = phi i32 [ 0, %4 ], [ %247, %90 ]
  %121 = phi i32 [ 0, %4 ], [ %249, %90 ]
  %122 = phi i32 [ 0, %4 ], [ %250, %90 ]
  %123 = phi i32 [ 0, %4 ], [ %251, %90 ]
  %124 = phi i32 [ 0, %4 ], [ %252, %90 ]
  %125 = phi i32 [ 0, %4 ], [ %254, %90 ]
  %126 = phi i32 [ 0, %4 ], [ %255, %90 ]
  %127 = phi i32 [ 0, %4 ], [ %256, %90 ]
  %128 = phi i32 [ 0, %4 ], [ %257, %90 ]
  %129 = phi i32 [ 0, %4 ], [ %259, %90 ]
  %130 = phi i32 [ 0, %4 ], [ %260, %90 ]
  %131 = phi i32 [ 0, %4 ], [ %261, %90 ]
  %132 = phi i32 [ 0, %4 ], [ %262, %90 ]
  %133 = phi i32 [ 0, %4 ], [ %264, %90 ]
  %134 = phi i32 [ 0, %4 ], [ %265, %90 ]
  %135 = phi i32 [ 0, %4 ], [ %266, %90 ]
  %136 = phi i32 [ 0, %4 ], [ %267, %90 ]
  %137 = phi i32 [ 0, %4 ], [ %269, %90 ]
  %138 = phi i32 [ 0, %4 ], [ %270, %90 ]
  %139 = phi i32 [ 0, %4 ], [ %271, %90 ]
  %140 = phi i32 [ 0, %4 ], [ %272, %90 ]
  %141 = phi i32 [ 0, %4 ], [ %274, %90 ]
  %142 = phi i32 [ 0, %4 ], [ %275, %90 ]
  %143 = phi i32 [ 0, %4 ], [ %276, %90 ]
  %144 = phi i32 [ 0, %4 ], [ %277, %90 ]
  %145 = phi i32 [ 0, %4 ], [ %279, %90 ]
  %146 = phi i32 [ 0, %4 ], [ %280, %90 ]
  %147 = phi i32 [ 0, %4 ], [ %281, %90 ]
  %148 = phi i32 [ 0, %4 ], [ %282, %90 ]
  %149 = phi i32 [ 0, %4 ], [ %284, %90 ]
  %150 = phi i32 [ 0, %4 ], [ %285, %90 ]
  %151 = phi i32 [ 0, %4 ], [ %286, %90 ]
  %152 = phi i32 [ 0, %4 ], [ %287, %90 ]
  %153 = phi i32 [ 0, %4 ], [ %289, %90 ]
  %154 = phi i32 [ 0, %4 ], [ %290, %90 ]
  %155 = phi i32 [ 0, %4 ], [ %291, %90 ]
  %156 = phi i32 [ 0, %4 ], [ %292, %90 ]
  %157 = icmp samesign ult i64 %indvars.iv, 94, !dbg !36
  %158 = add i32 %91, 1, !dbg !36
  %159 = icmp slt i32 %158, 2, !dbg !36
  %160 = select i1 %159, i32 %158, i32 0, !dbg !36
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %161 = shl i32 %160, 12, !dbg !31
  %162 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %161, !dbg !31
  %163 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 %71, !dbg !31
  %164 = ptrtoint ptr addrspace(3) %163 to i32, !dbg !31
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %164) #1, !dbg !31
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !31
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !31
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !31
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !31
  %170 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 %74, !dbg !31
  %171 = ptrtoint ptr addrspace(3) %170 to i32, !dbg !31
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %171) #1, !dbg !31
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !31
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !31
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !31
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !31
  %177 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 %75, !dbg !31
  %178 = ptrtoint ptr addrspace(3) %177 to i32, !dbg !31
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %178) #1, !dbg !31
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !31
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !31
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !31
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !31
  %184 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 %76, !dbg !31
  %185 = ptrtoint ptr addrspace(3) %184 to i32, !dbg !31
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %185) #1, !dbg !31
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !31
  %191 = shl i32 %160, 11, !dbg !34
  %192 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %191, !dbg !34
  %193 = getelementptr inbounds nuw i8, ptr addrspace(3) %192, i32 %82, !dbg !34
  %194 = ptrtoint ptr addrspace(3) %193 to i32, !dbg !34
  %195 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %194) #1, !dbg !34
  %196 = extractvalue { i32, i32 } %195, 0, !dbg !34
  %197 = extractvalue { i32, i32 } %195, 1, !dbg !34
  %198 = getelementptr inbounds nuw i8, ptr addrspace(3) %192, i32 %83, !dbg !34
  %199 = ptrtoint ptr addrspace(3) %198 to i32, !dbg !34
  %200 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %199) #1, !dbg !34
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !34
  %202 = extractvalue { i32, i32 } %200, 1, !dbg !34
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %192, i32 %84, !dbg !34
  %204 = ptrtoint ptr addrspace(3) %203 to i32, !dbg !34
  %205 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %204) #1, !dbg !34
  %206 = extractvalue { i32, i32 } %205, 0, !dbg !34
  %207 = extractvalue { i32, i32 } %205, 1, !dbg !34
  %208 = getelementptr inbounds nuw i8, ptr addrspace(3) %192, i32 %85, !dbg !34
  %209 = ptrtoint ptr addrspace(3) %208 to i32, !dbg !34
  %210 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %209) #1, !dbg !34
  %211 = extractvalue { i32, i32 } %210, 0, !dbg !34
  %212 = extractvalue { i32, i32 } %210, 1, !dbg !34
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %93, i32 %94, i32 %95, i32 %96, i32 %166, i32 %167, i32 %168, i32 %169, i32 %196, i32 %197) #1, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !37
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !37
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !37
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !37
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %97, i32 %98, i32 %99, i32 %100, i32 %166, i32 %167, i32 %168, i32 %169, i32 %201, i32 %202) #1, !dbg !37
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !37
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !37
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !37
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !37
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %101, i32 %102, i32 %103, i32 %104, i32 %166, i32 %167, i32 %168, i32 %169, i32 %206, i32 %207) #1, !dbg !37
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !37
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !37
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %105, i32 %106, i32 %107, i32 %108, i32 %166, i32 %167, i32 %168, i32 %169, i32 %211, i32 %212) #1, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !37
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !37
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !37
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !37
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %109, i32 %110, i32 %111, i32 %112, i32 %173, i32 %174, i32 %175, i32 %176, i32 %196, i32 %197) #1, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !37
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %113, i32 %114, i32 %115, i32 %116, i32 %173, i32 %174, i32 %175, i32 %176, i32 %201, i32 %202) #1, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !37
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !37
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !37
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %117, i32 %118, i32 %119, i32 %120, i32 %173, i32 %174, i32 %175, i32 %176, i32 %206, i32 %207) #1, !dbg !37
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !37
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !37
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !37
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !37
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %121, i32 %122, i32 %123, i32 %124, i32 %173, i32 %174, i32 %175, i32 %176, i32 %211, i32 %212) #1, !dbg !37
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !37
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !37
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !37
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !37
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %125, i32 %126, i32 %127, i32 %128, i32 %180, i32 %181, i32 %182, i32 %183, i32 %196, i32 %197) #1, !dbg !37
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !37
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !37
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !37
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %129, i32 %130, i32 %131, i32 %132, i32 %180, i32 %181, i32 %182, i32 %183, i32 %201, i32 %202) #1, !dbg !37
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !37
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !37
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !37
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !37
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %133, i32 %134, i32 %135, i32 %136, i32 %180, i32 %181, i32 %182, i32 %183, i32 %206, i32 %207) #1, !dbg !37
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !37
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !37
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !37
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !37
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %137, i32 %138, i32 %139, i32 %140, i32 %180, i32 %181, i32 %182, i32 %183, i32 %211, i32 %212) #1, !dbg !37
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !37
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !37
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !37
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !37
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %141, i32 %142, i32 %143, i32 %144, i32 %187, i32 %188, i32 %189, i32 %190, i32 %196, i32 %197) #1, !dbg !37
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !37
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !37
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !37
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !37
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %145, i32 %146, i32 %147, i32 %148, i32 %187, i32 %188, i32 %189, i32 %190, i32 %201, i32 %202) #1, !dbg !37
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !37
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !37
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !37
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !37
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %149, i32 %150, i32 %151, i32 %152, i32 %187, i32 %188, i32 %189, i32 %190, i32 %206, i32 %207) #1, !dbg !37
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !37
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !37
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !37
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !37
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %153, i32 %154, i32 %155, i32 %156, i32 %187, i32 %188, i32 %189, i32 %190, i32 %211, i32 %212) #1, !dbg !37
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !37
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !37
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !37
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !37
  %293 = add i32 %92, 1, !dbg !36
  %294 = icmp slt i32 %293, 2, !dbg !36
  %295 = select i1 %294, i32 %293, i32 0, !dbg !36
  %296 = shl nuw nsw i64 %indvars.iv, 5, !dbg !38
  %297 = add nuw nsw i64 %296, %86
  %gep196 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %297, !dbg !30
  %gep198 = getelementptr i8, ptr addrspace(1) %invariant.gep197, i64 %297, !dbg !30
  %298 = shl i32 %295, 12, !dbg !31
  %299 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %298, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %300 = getelementptr inbounds nuw i8, ptr addrspace(3) %299, i32 %42, !dbg !31
  %301 = getelementptr inbounds nuw i8, ptr addrspace(3) %299, i32 %44, !dbg !31
  %302 = select i1 %157, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %300, ptr addrspace(1) %gep196, i32 %302) #1, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %301, ptr addrspace(1) %gep198, i32 %302) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep200 = getelementptr i8, ptr addrspace(1) %invariant.gep199, i64 %297, !dbg !33
  %303 = shl i32 %295, 11, !dbg !34
  %gep = getelementptr i8, ptr addrspace(3) %49, i32 %303, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep200, i32 %302) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !36
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !36
  br i1 %exitcond.not, label %304, label %90, !dbg !36

304:                                              ; preds = %90
  %305 = and i32 %22, 60, !dbg !22
  %306 = or disjoint i32 %21, %305, !dbg !23
  %307 = lshr i32 %15, 4, !dbg !19
  %308 = and i32 %307, 7, !dbg !19
  %309 = or disjoint i32 %308, %14, !dbg !20
  %310 = or disjoint i32 %309, 120, !dbg !20
  %311 = or disjoint i32 %309, 112, !dbg !20
  %312 = or disjoint i32 %309, 104, !dbg !20
  %313 = or disjoint i32 %309, 96, !dbg !20
  %314 = or disjoint i32 %309, 88, !dbg !20
  %315 = or disjoint i32 %309, 80, !dbg !20
  %316 = or disjoint i32 %309, 72, !dbg !20
  %317 = or disjoint i32 %309, 64, !dbg !20
  %318 = or disjoint i32 %309, 56, !dbg !20
  %319 = or disjoint i32 %309, 48, !dbg !20
  %320 = or disjoint i32 %309, 40, !dbg !20
  %321 = or disjoint i32 %309, 32, !dbg !20
  %322 = or disjoint i32 %309, 24, !dbg !20
  %323 = or disjoint i32 %309, 16, !dbg !20
  %324 = or disjoint i32 %309, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %325 = icmp slt i32 %309, 3600, !dbg !39
  %326 = icmp slt i32 %324, 3600, !dbg !39
  %327 = icmp slt i32 %323, 3600, !dbg !39
  %328 = icmp slt i32 %322, 3600, !dbg !39
  %329 = icmp slt i32 %321, 3600, !dbg !39
  %330 = icmp slt i32 %320, 3600, !dbg !39
  %331 = icmp slt i32 %319, 3600, !dbg !39
  %332 = icmp slt i32 %318, 3600, !dbg !39
  %333 = icmp slt i32 %317, 3600, !dbg !39
  %334 = icmp slt i32 %316, 3600, !dbg !39
  %335 = icmp slt i32 %315, 3600, !dbg !39
  %336 = icmp slt i32 %314, 3600, !dbg !39
  %337 = icmp slt i32 %313, 3600, !dbg !39
  %338 = icmp slt i32 %312, 3600, !dbg !39
  %339 = icmp slt i32 %311, 3600, !dbg !39
  %340 = icmp slt i32 %310, 3600, !dbg !39
  %341 = icmp slt i32 %306, 12288, !dbg !40
  %342 = and i1 %325, %341, !dbg !41
  %343 = and i1 %326, %341, !dbg !41
  %344 = and i1 %327, %341, !dbg !41
  %345 = and i1 %328, %341, !dbg !41
  %346 = and i1 %329, %341, !dbg !41
  %347 = and i1 %330, %341, !dbg !41
  %348 = and i1 %331, %341, !dbg !41
  %349 = and i1 %332, %341, !dbg !41
  %350 = and i1 %333, %341, !dbg !41
  %351 = and i1 %334, %341, !dbg !41
  %352 = and i1 %335, %341, !dbg !41
  %353 = and i1 %336, %341, !dbg !41
  %354 = and i1 %337, %341, !dbg !41
  %355 = and i1 %338, %341, !dbg !41
  %356 = and i1 %339, %341, !dbg !41
  %357 = and i1 %340, %341, !dbg !41
  %358 = mul i32 %309, 12288, !dbg !42
  %359 = mul i32 %324, 12288, !dbg !42
  %360 = mul i32 %323, 12288, !dbg !42
  %361 = mul i32 %322, 12288, !dbg !42
  %362 = mul i32 %321, 12288, !dbg !42
  %363 = mul i32 %320, 12288, !dbg !42
  %364 = mul i32 %319, 12288, !dbg !42
  %365 = mul i32 %318, 12288, !dbg !42
  %366 = mul i32 %317, 12288, !dbg !42
  %367 = mul i32 %316, 12288, !dbg !42
  %368 = mul i32 %315, 12288, !dbg !42
  %369 = mul i32 %314, 12288, !dbg !42
  %370 = mul i32 %313, 12288, !dbg !42
  %371 = mul i32 %312, 12288, !dbg !42
  %372 = mul i32 %311, 12288, !dbg !42
  %373 = mul i32 %310, 12288, !dbg !42
  %374 = add i32 %358, %306, !dbg !43
  %375 = add i32 %359, %306, !dbg !43
  %376 = add i32 %360, %306, !dbg !43
  %377 = add i32 %361, %306, !dbg !43
  %378 = add i32 %362, %306, !dbg !43
  %379 = add i32 %363, %306, !dbg !43
  %380 = add i32 %364, %306, !dbg !43
  %381 = add i32 %365, %306, !dbg !43
  %382 = add i32 %366, %306, !dbg !43
  %383 = add i32 %367, %306, !dbg !43
  %384 = add i32 %368, %306, !dbg !43
  %385 = add i32 %369, %306, !dbg !43
  %386 = add i32 %370, %306, !dbg !43
  %387 = add i32 %371, %306, !dbg !43
  %388 = add i32 %372, %306, !dbg !43
  %389 = add i32 %373, %306, !dbg !43
  %390 = sext i32 %374 to i64, !dbg !44
  %391 = getelementptr i32, ptr addrspace(1) %2, i64 %390, !dbg !44
  %392 = sext i32 %375 to i64, !dbg !44
  %393 = getelementptr i32, ptr addrspace(1) %2, i64 %392, !dbg !44
  %394 = sext i32 %376 to i64, !dbg !44
  %395 = getelementptr i32, ptr addrspace(1) %2, i64 %394, !dbg !44
  %396 = sext i32 %377 to i64, !dbg !44
  %397 = getelementptr i32, ptr addrspace(1) %2, i64 %396, !dbg !44
  %398 = sext i32 %378 to i64, !dbg !44
  %399 = getelementptr i32, ptr addrspace(1) %2, i64 %398, !dbg !44
  %400 = sext i32 %379 to i64, !dbg !44
  %401 = getelementptr i32, ptr addrspace(1) %2, i64 %400, !dbg !44
  %402 = sext i32 %380 to i64, !dbg !44
  %403 = getelementptr i32, ptr addrspace(1) %2, i64 %402, !dbg !44
  %404 = sext i32 %381 to i64, !dbg !44
  %405 = getelementptr i32, ptr addrspace(1) %2, i64 %404, !dbg !44
  %406 = sext i32 %382 to i64, !dbg !44
  %407 = getelementptr i32, ptr addrspace(1) %2, i64 %406, !dbg !44
  %408 = sext i32 %383 to i64, !dbg !44
  %409 = getelementptr i32, ptr addrspace(1) %2, i64 %408, !dbg !44
  %410 = sext i32 %384 to i64, !dbg !44
  %411 = getelementptr i32, ptr addrspace(1) %2, i64 %410, !dbg !44
  %412 = sext i32 %385 to i64, !dbg !44
  %413 = getelementptr i32, ptr addrspace(1) %2, i64 %412, !dbg !44
  %414 = sext i32 %386 to i64, !dbg !44
  %415 = getelementptr i32, ptr addrspace(1) %2, i64 %414, !dbg !44
  %416 = sext i32 %387 to i64, !dbg !44
  %417 = getelementptr i32, ptr addrspace(1) %2, i64 %416, !dbg !44
  %418 = sext i32 %388 to i64, !dbg !44
  %419 = getelementptr i32, ptr addrspace(1) %2, i64 %418, !dbg !44
  %420 = sext i32 %389 to i64, !dbg !44
  %421 = getelementptr i32, ptr addrspace(1) %2, i64 %420, !dbg !44
  %422 = shl i32 %15, 1, !dbg !45
  %423 = and i32 %422, 6, !dbg !45
  %424 = and i32 %28, 192, !dbg !45
  %425 = or disjoint i32 %424, %423, !dbg !45
  %426 = shl i32 %15, 4, !dbg !45
  %427 = and i32 %426, 1280, !dbg !45
  %428 = or disjoint i32 %427, %425, !dbg !45
  %429 = or disjoint i32 %428, %79, !dbg !45
  %430 = and i32 %22, 508, !dbg !45
  %431 = lshr i32 %428, 4, !dbg !45
  %432 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %431, !dbg !45
  %433 = getelementptr inbounds nuw i32, ptr addrspace(3) %432, i32 %429, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %433, i32 %214, i32 %215, i1 true) #1, !dbg !45
  %434 = or disjoint i32 %429, 512, !dbg !45
  %435 = lshr i32 %434, 4, !dbg !45
  %436 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %435, !dbg !45
  %437 = getelementptr inbounds nuw i32, ptr addrspace(3) %436, i32 %434, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %216, i32 %217, i1 true) #1, !dbg !45
  %438 = or disjoint i32 %429, 16, !dbg !45
  %439 = getelementptr inbounds nuw i32, ptr addrspace(3) %432, i32 %438, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %439, i32 %219, i32 %220, i1 true) #1, !dbg !45
  %440 = or disjoint i32 %429, 528, !dbg !45
  %441 = lshr i32 %440, 4, !dbg !45
  %442 = and i32 %441, 268435452, !dbg !45
  %443 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %442, !dbg !45
  %444 = getelementptr inbounds nuw i32, ptr addrspace(3) %443, i32 %440, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %444, i32 %221, i32 %222, i1 true) #1, !dbg !45
  %445 = or disjoint i32 %429, 32, !dbg !45
  %446 = getelementptr inbounds nuw i32, ptr addrspace(3) %432, i32 %445, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %446, i32 %224, i32 %225, i1 true) #1, !dbg !45
  %447 = or disjoint i32 %429, 544, !dbg !45
  %448 = lshr i32 %447, 4, !dbg !45
  %449 = and i32 %448, 268435452, !dbg !45
  %450 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %449, !dbg !45
  %451 = getelementptr inbounds nuw i32, ptr addrspace(3) %450, i32 %447, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %226, i32 %227, i1 true) #1, !dbg !45
  %452 = or disjoint i32 %429, 48, !dbg !45
  %453 = getelementptr inbounds nuw i32, ptr addrspace(3) %432, i32 %452, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %453, i32 %229, i32 %230, i1 true) #1, !dbg !45
  %454 = or disjoint i32 %429, 560, !dbg !45
  %455 = lshr i32 %454, 4, !dbg !45
  %456 = and i32 %455, 268435452, !dbg !45
  %457 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %456, !dbg !45
  %458 = getelementptr inbounds nuw i32, ptr addrspace(3) %457, i32 %454, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %458, i32 %231, i32 %232, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %459 = and i32 %15, 112, !dbg !45
  %460 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %459, !dbg !45
  %461 = getelementptr inbounds nuw i32, ptr addrspace(3) %460, i32 %430, !dbg !45
  %462 = load <4 x i32>, ptr addrspace(3) %461, align 16, !dbg !45
  %463 = or disjoint i32 %430, 512, !dbg !45
  %464 = lshr i32 %463, 4, !dbg !45
  %465 = and i32 %464, 60, !dbg !45
  %466 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %465, !dbg !45
  %467 = getelementptr inbounds nuw i32, ptr addrspace(3) %466, i32 %463, !dbg !45
  %468 = load <4 x i32>, ptr addrspace(3) %467, align 16, !dbg !45
  %469 = or disjoint i32 %430, 1024, !dbg !45
  %470 = lshr i32 %469, 4, !dbg !45
  %471 = and i32 %470, 92, !dbg !45
  %472 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %471, !dbg !45
  %473 = getelementptr inbounds nuw i32, ptr addrspace(3) %472, i32 %469, !dbg !45
  %474 = load <4 x i32>, ptr addrspace(3) %473, align 16, !dbg !45
  %475 = or disjoint i32 %430, 1536, !dbg !45
  %476 = lshr i32 %475, 4, !dbg !45
  %477 = and i32 %476, 124, !dbg !45
  %478 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %477, !dbg !45
  %479 = getelementptr inbounds nuw i32, ptr addrspace(3) %478, i32 %475, !dbg !45
  %480 = load <4 x i32>, ptr addrspace(3) %479, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %433, i32 %234, i32 %235, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %236, i32 %237, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %439, i32 %239, i32 %240, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %444, i32 %241, i32 %242, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %446, i32 %244, i32 %245, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %246, i32 %247, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %453, i32 %249, i32 %250, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %458, i32 %251, i32 %252, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %481 = load <4 x i32>, ptr addrspace(3) %461, align 16, !dbg !45
  %482 = load <4 x i32>, ptr addrspace(3) %467, align 16, !dbg !45
  %483 = load <4 x i32>, ptr addrspace(3) %473, align 16, !dbg !45
  %484 = load <4 x i32>, ptr addrspace(3) %479, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %433, i32 %254, i32 %255, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %256, i32 %257, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %439, i32 %259, i32 %260, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %444, i32 %261, i32 %262, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %446, i32 %264, i32 %265, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %266, i32 %267, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %453, i32 %269, i32 %270, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %458, i32 %271, i32 %272, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %485 = load <4 x i32>, ptr addrspace(3) %461, align 16, !dbg !45
  %486 = load <4 x i32>, ptr addrspace(3) %467, align 16, !dbg !45
  %487 = load <4 x i32>, ptr addrspace(3) %473, align 16, !dbg !45
  %488 = load <4 x i32>, ptr addrspace(3) %479, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %433, i32 %274, i32 %275, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %437, i32 %276, i32 %277, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %439, i32 %279, i32 %280, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %444, i32 %281, i32 %282, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %446, i32 %284, i32 %285, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %451, i32 %286, i32 %287, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %453, i32 %289, i32 %290, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %458, i32 %291, i32 %292, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %489 = load <4 x i32>, ptr addrspace(3) %461, align 16, !dbg !45
  %490 = load <4 x i32>, ptr addrspace(3) %467, align 16, !dbg !45
  %491 = load <4 x i32>, ptr addrspace(3) %473, align 16, !dbg !45
  %492 = load <4 x i32>, ptr addrspace(3) %479, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %462, i64 0, !dbg !45
  %.extract4 = extractelement <4 x i32> %462, i64 1, !dbg !45
  %.extract5 = extractelement <4 x i32> %462, i64 2, !dbg !45
  %.extract6 = extractelement <4 x i32> %462, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %391, i1 %342) #1, !dbg !45
  %.extract7 = extractelement <4 x i32> %468, i64 0, !dbg !45
  %.extract8 = extractelement <4 x i32> %468, i64 1, !dbg !45
  %.extract9 = extractelement <4 x i32> %468, i64 2, !dbg !45
  %.extract10 = extractelement <4 x i32> %468, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %393, i1 %343) #1, !dbg !45
  %.extract11 = extractelement <4 x i32> %474, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %474, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %474, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %474, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %395, i1 %344) #1, !dbg !45
  %.extract15 = extractelement <4 x i32> %480, i64 0, !dbg !45
  %.extract16 = extractelement <4 x i32> %480, i64 1, !dbg !45
  %.extract17 = extractelement <4 x i32> %480, i64 2, !dbg !45
  %.extract18 = extractelement <4 x i32> %480, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %397, i1 %345) #1, !dbg !45
  %.extract19 = extractelement <4 x i32> %481, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %481, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %481, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %481, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %399, i1 %346) #1, !dbg !45
  %.extract23 = extractelement <4 x i32> %482, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %482, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %482, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %482, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %401, i1 %347) #1, !dbg !45
  %.extract27 = extractelement <4 x i32> %483, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %483, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %483, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %483, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %403, i1 %348) #1, !dbg !45
  %.extract31 = extractelement <4 x i32> %484, i64 0, !dbg !45
  %.extract32 = extractelement <4 x i32> %484, i64 1, !dbg !45
  %.extract33 = extractelement <4 x i32> %484, i64 2, !dbg !45
  %.extract34 = extractelement <4 x i32> %484, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %405, i1 %349) #1, !dbg !45
  %.extract35 = extractelement <4 x i32> %485, i64 0, !dbg !45
  %.extract36 = extractelement <4 x i32> %485, i64 1, !dbg !45
  %.extract37 = extractelement <4 x i32> %485, i64 2, !dbg !45
  %.extract38 = extractelement <4 x i32> %485, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %407, i1 %350) #1, !dbg !45
  %.extract39 = extractelement <4 x i32> %486, i64 0, !dbg !45
  %.extract40 = extractelement <4 x i32> %486, i64 1, !dbg !45
  %.extract41 = extractelement <4 x i32> %486, i64 2, !dbg !45
  %.extract42 = extractelement <4 x i32> %486, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %409, i1 %351) #1, !dbg !45
  %.extract43 = extractelement <4 x i32> %487, i64 0, !dbg !45
  %.extract44 = extractelement <4 x i32> %487, i64 1, !dbg !45
  %.extract45 = extractelement <4 x i32> %487, i64 2, !dbg !45
  %.extract46 = extractelement <4 x i32> %487, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %411, i1 %352) #1, !dbg !45
  %.extract47 = extractelement <4 x i32> %488, i64 0, !dbg !45
  %.extract48 = extractelement <4 x i32> %488, i64 1, !dbg !45
  %.extract49 = extractelement <4 x i32> %488, i64 2, !dbg !45
  %.extract50 = extractelement <4 x i32> %488, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %413, i1 %353) #1, !dbg !45
  %.extract51 = extractelement <4 x i32> %489, i64 0, !dbg !45
  %.extract52 = extractelement <4 x i32> %489, i64 1, !dbg !45
  %.extract53 = extractelement <4 x i32> %489, i64 2, !dbg !45
  %.extract54 = extractelement <4 x i32> %489, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract51, i32 %.extract52, i32 %.extract53, i32 %.extract54, ptr addrspace(1) %415, i1 %354) #1, !dbg !45
  %.extract55 = extractelement <4 x i32> %490, i64 0, !dbg !45
  %.extract56 = extractelement <4 x i32> %490, i64 1, !dbg !45
  %.extract57 = extractelement <4 x i32> %490, i64 2, !dbg !45
  %.extract58 = extractelement <4 x i32> %490, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract55, i32 %.extract56, i32 %.extract57, i32 %.extract58, ptr addrspace(1) %417, i1 %355) #1, !dbg !45
  %.extract59 = extractelement <4 x i32> %491, i64 0, !dbg !45
  %.extract60 = extractelement <4 x i32> %491, i64 1, !dbg !45
  %.extract61 = extractelement <4 x i32> %491, i64 2, !dbg !45
  %.extract62 = extractelement <4 x i32> %491, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %419, i1 %356) #1, !dbg !45
  %.extract63 = extractelement <4 x i32> %492, i64 0, !dbg !45
  %.extract64 = extractelement <4 x i32> %492, i64 1, !dbg !45
  %.extract65 = extractelement <4 x i32> %492, i64 2, !dbg !45
  %.extract66 = extractelement <4 x i32> %492, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %421, i1 %357) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd5qa47zzmb2n6x3wqe6xhddk4sbuaw4jh3bd2e4dzapfqh5as4d.py", directory: "/tmp/torchinductor_root/d5")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 66, column: 42, scope: !6)
!36 = !DILocation(line: 64, column: 26, scope: !6)
!37 = !DILocation(line: 78, column: 25, scope: !6)
!38 = !DILocation(line: 66, column: 50, scope: !6)
!39 = !DILocation(line: 85, column: 20, scope: !6)
!40 = !DILocation(line: 85, column: 34, scope: !6)
!41 = !DILocation(line: 85, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 27, scope: !6)
!43 = !DILocation(line: 88, column: 21, scope: !6)
!44 = !DILocation(line: 89, column: 25, scope: !6)
!45 = !DILocation(line: 89, column: 67, scope: !6)
!46 = !DILocation(line: 89, column: 4, scope: !6)
