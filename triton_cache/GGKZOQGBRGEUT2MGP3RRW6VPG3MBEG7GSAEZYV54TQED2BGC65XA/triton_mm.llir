; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 2560, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 16, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 2560, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl nsw i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 64, !dbg !19
  %18 = lshr i32 %15, 4, !dbg !19
  %19 = and i32 %18, 7, !dbg !19
  %20 = or disjoint i32 %19, 8, !dbg !19
  %21 = or disjoint i32 %19, 16, !dbg !19
  %22 = or disjoint i32 %19, 24, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = lshr exact i32 %17, 2, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 8, !dbg !19
  %28 = and i32 %26, 16, !dbg !19
  %29 = and i32 %26, 24, !dbg !19
  %30 = or disjoint i32 %14, %19, !dbg !20
  %31 = or disjoint i32 %14, %20, !dbg !20
  %32 = or disjoint i32 %14, %21, !dbg !20
  %33 = or disjoint i32 %14, %22, !dbg !20
  %34 = shl nsw i32 %13, 5, !dbg !21
  %35 = or disjoint i32 %34, %19, !dbg !22
  %36 = or disjoint i32 %34, %20, !dbg !22
  %37 = or disjoint i32 %34, %21, !dbg !22
  %38 = or disjoint i32 %34, %22, !dbg !22
  %39 = srem i32 %30, 512, !dbg !23
  %40 = srem i32 %31, 512, !dbg !23
  %41 = srem i32 %32, 512, !dbg !23
  %42 = srem i32 %33, 512, !dbg !23
  %43 = srem i32 %35, 10240, !dbg !24
  %44 = srem i32 %36, 10240, !dbg !24
  %45 = srem i32 %37, 10240, !dbg !24
  %46 = srem i32 %38, 10240, !dbg !24
  %47 = and i32 %26, 32, !dbg !25
  %48 = and i32 %26, 56, !dbg !25
  %49 = and i32 %26, 120, !dbg !25
  %50 = shl nsw i32 %39, 12, !dbg !26
  %51 = shl nsw i32 %40, 12, !dbg !26
  %52 = shl nsw i32 %41, 12, !dbg !26
  %53 = shl nsw i32 %42, 12, !dbg !26
  %54 = shl nsw i32 %43, 12, !dbg !27
  %55 = shl nsw i32 %44, 12, !dbg !27
  %56 = shl nsw i32 %45, 12, !dbg !27
  %57 = shl nsw i32 %46, 12, !dbg !27
  %58 = or disjoint i32 %50, %49, !dbg !28
  %59 = or disjoint i32 %51, %49, !dbg !28
  %60 = or disjoint i32 %52, %49, !dbg !28
  %61 = or disjoint i32 %53, %49, !dbg !28
  %62 = sext i32 %58 to i64, !dbg !29
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !29
  %64 = sext i32 %59 to i64, !dbg !29
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = sext i32 %60 to i64, !dbg !29
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !29
  %68 = sext i32 %61 to i64, !dbg !29
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = lshr exact i32 %16, 1, !dbg !30
  %71 = lshr i32 %15, 1, !dbg !30
  %72 = and i32 %71, 56, !dbg !30
  %73 = xor i32 %49, %72, !dbg !30
  %74 = shl nuw nsw i32 %19, 7, !dbg !30
  %75 = or disjoint i32 %73, %74, !dbg !30
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75, !dbg !30
  %77 = or disjoint i32 %75, 1024, !dbg !30
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %77, !dbg !30
  %79 = or disjoint i32 %75, 2048, !dbg !30
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %79, !dbg !30
  %81 = or disjoint i32 %75, 3072, !dbg !30
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %81, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %63, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %65, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %67, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %82, ptr addrspace(1) %69, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %83 = or disjoint i32 %54, %49, !dbg !31
  %84 = or disjoint i32 %55, %49, !dbg !31
  %85 = or disjoint i32 %56, %49, !dbg !31
  %86 = or disjoint i32 %57, %49, !dbg !31
  %87 = sext i32 %83 to i64, !dbg !32
  %88 = getelementptr bfloat, ptr addrspace(1) %1, i64 %87, !dbg !32
  %89 = sext i32 %84 to i64, !dbg !32
  %90 = getelementptr bfloat, ptr addrspace(1) %1, i64 %89, !dbg !32
  %91 = sext i32 %85 to i64, !dbg !32
  %92 = getelementptr bfloat, ptr addrspace(1) %1, i64 %91, !dbg !32
  %93 = sext i32 %86 to i64, !dbg !32
  %94 = getelementptr bfloat, ptr addrspace(1) %1, i64 %93, !dbg !32
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %75, !dbg !33
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %77, !dbg !33
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %79, !dbg !33
  %98 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %81, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %95, ptr addrspace(1) %88, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %90, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %97, ptr addrspace(1) %92, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %94, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %47, %70, !dbg !34
  %99 = and i32 %15, 7
  %100 = and i32 %15, 15
  %101 = xor i32 %48, %70
  %102 = or disjoint i32 %25, %100
  %103 = shl nuw nsw i32 %102, 7
  %104 = or disjoint i32 %103, %101
  %105 = or disjoint i32 %27, 16
  %106 = xor i32 %105, %28
  %107 = or disjoint i32 %106, %47
  %108 = xor i32 %107, %70
  %109 = or disjoint i32 %108, %103
  %110 = or disjoint i32 %29, 32
  %.reass = xor i32 %110, %invariant.op
  %111 = or disjoint i32 %.reass, %103
  %112 = or disjoint i32 %27, 48
  %and.ra = and i32 %26, 48
  %113 = or disjoint i32 %70, %and.ra
  %114 = xor i32 %113, %112
  %115 = or disjoint i32 %114, %103
  %116 = or disjoint i32 %48, 64
  %117 = xor i32 %116, %70
  %118 = or disjoint i32 %117, %103
  %119 = or disjoint i32 %27, 80
  %120 = xor i32 %119, %28
  %121 = or disjoint i32 %120, %47
  %122 = xor i32 %121, %70
  %123 = or disjoint i32 %122, %103
  %124 = or disjoint i32 %29, 96
  %.reass28 = xor i32 %124, %invariant.op
  %125 = or disjoint i32 %.reass28, %103
  %126 = or disjoint i32 %27, 112
  %127 = xor i32 %113, %126
  %128 = or disjoint i32 %127, %103
  %and.ra23 = and i32 %15, 24
  %129 = xor i32 %48, %and.ra23
  %130 = or disjoint i32 %24, %99
  %131 = shl nuw nsw i32 %130, 7
  %132 = or disjoint i32 %131, %129
  %133 = or disjoint i32 %47, %and.ra23
  %134 = xor i32 %133, %110
  %135 = xor i32 %116, %and.ra23
  %136 = xor i32 %133, %124
  %137 = or disjoint i32 %131, 2048
  %138 = or disjoint i32 %137, %129
  %139 = or disjoint i32 %134, %137
  %140 = or disjoint i32 %137, %135
  %141 = or disjoint i32 %136, %137
  %142 = zext nneg i32 %49 to i64, !dbg !34
  %143 = sext i32 %57 to i64, !dbg !34
  %144 = sext i32 %56 to i64, !dbg !34
  %145 = sext i32 %55 to i64, !dbg !34
  %146 = sext i32 %54 to i64, !dbg !34
  %147 = sext i32 %53 to i64, !dbg !34
  %148 = sext i32 %52 to i64, !dbg !34
  %149 = sext i32 %51 to i64, !dbg !34
  %150 = sext i32 %50 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !34
  %invariant.gep43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %149, !dbg !34
  %invariant.gep45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !34
  %invariant.gep47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !34
  %invariant.gep49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %146, !dbg !34
  %invariant.gep51 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !34
  %invariant.gep53 = getelementptr bfloat, ptr addrspace(1) %1, i64 %144, !dbg !34
  %invariant.gep55 = getelementptr bfloat, ptr addrspace(1) %1, i64 %143, !dbg !34
  br label %151, !dbg !34

151:                                              ; preds = %4, %151
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %151 ]
  %152 = phi i32 [ -1, %4 ], [ %163, %151 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %353, %151 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %354, %151 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %355, %151 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %356, %151 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %358, %151 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %359, %151 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %360, %151 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %361, %151 ]
  %.not14 = icmp eq i64 %indvars.iv, 31, !dbg !34
  %161 = add i32 %152, 1, !dbg !34
  %162 = icmp ugt i32 %152, 2147483646, !dbg !34
  %163 = select i1 %162, i32 %161, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %164 = shl i32 %163, 12, !dbg !30
  %165 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %164, !dbg !30
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %104, !dbg !30
  %167 = ptrtoint ptr addrspace(3) %166 to i32, !dbg !30
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %167) #1, !dbg !30
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !30
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !30
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !30
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !30
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %109, !dbg !30
  %174 = ptrtoint ptr addrspace(3) %173 to i32, !dbg !30
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %174) #1, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !30
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !30
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !30
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %111, !dbg !30
  %181 = ptrtoint ptr addrspace(3) %180 to i32, !dbg !30
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %181) #1, !dbg !30
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !30
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !30
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !30
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %115, !dbg !30
  %188 = ptrtoint ptr addrspace(3) %187 to i32, !dbg !30
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %188) #1, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !30
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !30
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %118, !dbg !30
  %195 = ptrtoint ptr addrspace(3) %194 to i32, !dbg !30
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #1, !dbg !30
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !30
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !30
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %123, !dbg !30
  %202 = ptrtoint ptr addrspace(3) %201 to i32, !dbg !30
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %202) #1, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !30
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !30
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !30
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !30
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %125, !dbg !30
  %209 = ptrtoint ptr addrspace(3) %208 to i32, !dbg !30
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %209) #1, !dbg !30
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !30
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !30
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %165, i32 %128, !dbg !30
  %216 = ptrtoint ptr addrspace(3) %215 to i32, !dbg !30
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %216) #1, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !30
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !30
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !30
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !30
  %222 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %164, !dbg !33
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %132, !dbg !33
  %224 = ptrtoint ptr addrspace(3) %223 to i32, !dbg !33
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #1, !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !33
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !33
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !33
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !33
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %134, !dbg !33
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %230, i32 %131, !dbg !33
  %232 = ptrtoint ptr addrspace(3) %231 to i32, !dbg !33
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %232) #1, !dbg !33
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !33
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !33
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !33
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !33
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %135, !dbg !33
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %238, i32 %131, !dbg !33
  %240 = ptrtoint ptr addrspace(3) %239 to i32, !dbg !33
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %240) #1, !dbg !33
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !33
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !33
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !33
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !33
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %136, !dbg !33
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %246, i32 %131, !dbg !33
  %248 = ptrtoint ptr addrspace(3) %247 to i32, !dbg !33
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %248) #1, !dbg !33
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !33
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !33
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !33
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !33
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %138, !dbg !33
  %255 = ptrtoint ptr addrspace(3) %254 to i32, !dbg !33
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %255) #1, !dbg !33
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !33
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !33
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !33
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !33
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %139, !dbg !33
  %262 = ptrtoint ptr addrspace(3) %261 to i32, !dbg !33
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %262) #1, !dbg !33
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !33
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !33
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !33
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !33
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %140, !dbg !33
  %269 = ptrtoint ptr addrspace(3) %268 to i32, !dbg !33
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %269) #1, !dbg !33
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !33
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !33
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !33
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !33
  %275 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %141, !dbg !33
  %276 = ptrtoint ptr addrspace(3) %275 to i32, !dbg !33
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %276) #1, !dbg !33
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !33
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !33
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !33
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !33
  %282 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %153, float %154, float %155, float %156, i32 %169, i32 %170, i32 %171, i32 %172, i32 %226, i32 %227) #1, !dbg !35
  %283 = extractvalue { float, float, float, float } %282, 0, !dbg !35
  %284 = extractvalue { float, float, float, float } %282, 1, !dbg !35
  %285 = extractvalue { float, float, float, float } %282, 2, !dbg !35
  %286 = extractvalue { float, float, float, float } %282, 3, !dbg !35
  %287 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %157, float %158, float %159, float %160, i32 %169, i32 %170, i32 %171, i32 %172, i32 %257, i32 %258) #1, !dbg !35
  %288 = extractvalue { float, float, float, float } %287, 0, !dbg !35
  %289 = extractvalue { float, float, float, float } %287, 1, !dbg !35
  %290 = extractvalue { float, float, float, float } %287, 2, !dbg !35
  %291 = extractvalue { float, float, float, float } %287, 3, !dbg !35
  %292 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %283, float %284, float %285, float %286, i32 %176, i32 %177, i32 %178, i32 %179, i32 %228, i32 %229) #1, !dbg !35
  %293 = extractvalue { float, float, float, float } %292, 0, !dbg !35
  %294 = extractvalue { float, float, float, float } %292, 1, !dbg !35
  %295 = extractvalue { float, float, float, float } %292, 2, !dbg !35
  %296 = extractvalue { float, float, float, float } %292, 3, !dbg !35
  %297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %288, float %289, float %290, float %291, i32 %176, i32 %177, i32 %178, i32 %179, i32 %259, i32 %260) #1, !dbg !35
  %298 = extractvalue { float, float, float, float } %297, 0, !dbg !35
  %299 = extractvalue { float, float, float, float } %297, 1, !dbg !35
  %300 = extractvalue { float, float, float, float } %297, 2, !dbg !35
  %301 = extractvalue { float, float, float, float } %297, 3, !dbg !35
  %302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %293, float %294, float %295, float %296, i32 %183, i32 %184, i32 %185, i32 %186, i32 %234, i32 %235) #1, !dbg !35
  %303 = extractvalue { float, float, float, float } %302, 0, !dbg !35
  %304 = extractvalue { float, float, float, float } %302, 1, !dbg !35
  %305 = extractvalue { float, float, float, float } %302, 2, !dbg !35
  %306 = extractvalue { float, float, float, float } %302, 3, !dbg !35
  %307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %183, i32 %184, i32 %185, i32 %186, i32 %264, i32 %265) #1, !dbg !35
  %308 = extractvalue { float, float, float, float } %307, 0, !dbg !35
  %309 = extractvalue { float, float, float, float } %307, 1, !dbg !35
  %310 = extractvalue { float, float, float, float } %307, 2, !dbg !35
  %311 = extractvalue { float, float, float, float } %307, 3, !dbg !35
  %312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %303, float %304, float %305, float %306, i32 %190, i32 %191, i32 %192, i32 %193, i32 %236, i32 %237) #1, !dbg !35
  %313 = extractvalue { float, float, float, float } %312, 0, !dbg !35
  %314 = extractvalue { float, float, float, float } %312, 1, !dbg !35
  %315 = extractvalue { float, float, float, float } %312, 2, !dbg !35
  %316 = extractvalue { float, float, float, float } %312, 3, !dbg !35
  %317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %308, float %309, float %310, float %311, i32 %190, i32 %191, i32 %192, i32 %193, i32 %266, i32 %267) #1, !dbg !35
  %318 = extractvalue { float, float, float, float } %317, 0, !dbg !35
  %319 = extractvalue { float, float, float, float } %317, 1, !dbg !35
  %320 = extractvalue { float, float, float, float } %317, 2, !dbg !35
  %321 = extractvalue { float, float, float, float } %317, 3, !dbg !35
  %322 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %313, float %314, float %315, float %316, i32 %197, i32 %198, i32 %199, i32 %200, i32 %242, i32 %243) #1, !dbg !35
  %323 = extractvalue { float, float, float, float } %322, 0, !dbg !35
  %324 = extractvalue { float, float, float, float } %322, 1, !dbg !35
  %325 = extractvalue { float, float, float, float } %322, 2, !dbg !35
  %326 = extractvalue { float, float, float, float } %322, 3, !dbg !35
  %327 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %197, i32 %198, i32 %199, i32 %200, i32 %271, i32 %272) #1, !dbg !35
  %328 = extractvalue { float, float, float, float } %327, 0, !dbg !35
  %329 = extractvalue { float, float, float, float } %327, 1, !dbg !35
  %330 = extractvalue { float, float, float, float } %327, 2, !dbg !35
  %331 = extractvalue { float, float, float, float } %327, 3, !dbg !35
  %332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %323, float %324, float %325, float %326, i32 %204, i32 %205, i32 %206, i32 %207, i32 %244, i32 %245) #1, !dbg !35
  %333 = extractvalue { float, float, float, float } %332, 0, !dbg !35
  %334 = extractvalue { float, float, float, float } %332, 1, !dbg !35
  %335 = extractvalue { float, float, float, float } %332, 2, !dbg !35
  %336 = extractvalue { float, float, float, float } %332, 3, !dbg !35
  %337 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %328, float %329, float %330, float %331, i32 %204, i32 %205, i32 %206, i32 %207, i32 %273, i32 %274) #1, !dbg !35
  %338 = extractvalue { float, float, float, float } %337, 0, !dbg !35
  %339 = extractvalue { float, float, float, float } %337, 1, !dbg !35
  %340 = extractvalue { float, float, float, float } %337, 2, !dbg !35
  %341 = extractvalue { float, float, float, float } %337, 3, !dbg !35
  %342 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %333, float %334, float %335, float %336, i32 %211, i32 %212, i32 %213, i32 %214, i32 %250, i32 %251) #1, !dbg !35
  %343 = extractvalue { float, float, float, float } %342, 0, !dbg !35
  %344 = extractvalue { float, float, float, float } %342, 1, !dbg !35
  %345 = extractvalue { float, float, float, float } %342, 2, !dbg !35
  %346 = extractvalue { float, float, float, float } %342, 3, !dbg !35
  %347 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %338, float %339, float %340, float %341, i32 %211, i32 %212, i32 %213, i32 %214, i32 %278, i32 %279) #1, !dbg !35
  %348 = extractvalue { float, float, float, float } %347, 0, !dbg !35
  %349 = extractvalue { float, float, float, float } %347, 1, !dbg !35
  %350 = extractvalue { float, float, float, float } %347, 2, !dbg !35
  %351 = extractvalue { float, float, float, float } %347, 3, !dbg !35
  %352 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %343, float %344, float %345, float %346, i32 %218, i32 %219, i32 %220, i32 %221, i32 %252, i32 %253) #1, !dbg !35
  %353 = extractvalue { float, float, float, float } %352, 0, !dbg !35
  %354 = extractvalue { float, float, float, float } %352, 1, !dbg !35
  %355 = extractvalue { float, float, float, float } %352, 2, !dbg !35
  %356 = extractvalue { float, float, float, float } %352, 3, !dbg !35
  %357 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %348, float %349, float %350, float %351, i32 %218, i32 %219, i32 %220, i32 %221, i32 %280, i32 %281) #1, !dbg !35
  %358 = extractvalue { float, float, float, float } %357, 0, !dbg !35
  %359 = extractvalue { float, float, float, float } %357, 1, !dbg !35
  %360 = extractvalue { float, float, float, float } %357, 2, !dbg !35
  %361 = extractvalue { float, float, float, float } %357, 3, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %362 = shl nuw nsw i64 %indvars.iv.next, 7, !dbg !36
  %363 = or disjoint i64 %362, %142, !dbg !37
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %363, !dbg !29
  %gep44 = getelementptr bfloat, ptr addrspace(1) %invariant.gep43, i64 %363, !dbg !29
  %gep46 = getelementptr bfloat, ptr addrspace(1) %invariant.gep45, i64 %363, !dbg !29
  %gep48 = getelementptr bfloat, ptr addrspace(1) %invariant.gep47, i64 %363, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %364 = select i1 %.not14, i32 0, i32 16, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %gep, i32 %364) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %gep44, i32 %364) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %gep46, i32 %364) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %82, ptr addrspace(1) %gep48, i32 %364) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep50 = getelementptr bfloat, ptr addrspace(1) %invariant.gep49, i64 %363, !dbg !32
  %gep52 = getelementptr bfloat, ptr addrspace(1) %invariant.gep51, i64 %363, !dbg !32
  %gep54 = getelementptr bfloat, ptr addrspace(1) %invariant.gep53, i64 %363, !dbg !32
  %gep56 = getelementptr bfloat, ptr addrspace(1) %invariant.gep55, i64 %363, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %95, ptr addrspace(1) %gep50, i32 %364) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %gep52, i32 %364) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %97, ptr addrspace(1) %gep54, i32 %364) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %gep56, i32 %364) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 32, !dbg !34
  br i1 %exitcond.not, label %365, label %151, !dbg !34

365:                                              ; preds = %151
  %366 = and i32 %26, 64, !dbg !25
  %367 = or disjoint i32 %34, %29, !dbg !22
  %368 = and i32 %23, 15, !dbg !19
  %369 = or disjoint i32 %368, %25, !dbg !19
  %370 = or disjoint i32 %369, %14, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %371 = icmp slt i32 %370, 512, !dbg !38
  %372 = icmp slt i32 %367, 10240, !dbg !39
  %373 = and i1 %371, %372, !dbg !40
  %374 = mul i32 %370, 10240, !dbg !41
  %375 = add i32 %374, %367, !dbg !42
  %376 = sext i32 %375 to i64, !dbg !43
  %377 = getelementptr bfloat, ptr addrspace(1) %2, i64 %376, !dbg !43
  %378 = fptrunc float %353 to bfloat, !dbg !44
  %379 = fptrunc float %354 to bfloat, !dbg !44
  %380 = fptrunc float %355 to bfloat, !dbg !44
  %381 = fptrunc float %356 to bfloat, !dbg !44
  %382 = fptrunc float %358 to bfloat, !dbg !44
  %383 = fptrunc float %359 to bfloat, !dbg !44
  %384 = fptrunc float %360 to bfloat, !dbg !44
  %385 = fptrunc float %361 to bfloat, !dbg !44
  %386 = shl i32 %15, 1, !dbg !44
  %387 = and i32 %386, 6, !dbg !44
  %388 = shl nuw nsw i32 %16, 3, !dbg !44
  %389 = or disjoint i32 %387, %388, !dbg !44
  %390 = or disjoint i32 %389, %366, !dbg !44
  %391 = or disjoint i32 %390, %47, !dbg !44
  %392 = or disjoint i32 %391, %24, !dbg !44
  %393 = shl nuw nsw i32 %17, 3, !dbg !44
  %394 = or disjoint i32 %392, %393, !dbg !44
  %395 = and i32 %26, 384, !dbg !44
  %396 = or disjoint i32 %393, %395, !dbg !44
  %397 = or disjoint i32 %396, %49, !dbg !44
  %398 = lshr i32 %394, 2, !dbg !44
  %399 = and i32 %398, 1073741816, !dbg !44
  %400 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %399, !dbg !44
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %400, i32 %394, !dbg !44
  %402 = bitcast bfloat %378 to i16, !dbg !44
  %403 = bitcast bfloat %379 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %401, i16 %402, i16 %403, i1 true) #1, !dbg !44
  %404 = xor i32 %394, 256, !dbg !44
  %405 = lshr i32 %404, 2, !dbg !44
  %406 = and i32 %405, 1073741816, !dbg !44
  %407 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %406, !dbg !44
  %408 = getelementptr bfloat, ptr addrspace(3) %407, i32 %404, !dbg !44
  %409 = bitcast bfloat %380 to i16, !dbg !44
  %410 = bitcast bfloat %381 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %408, i16 %409, i16 %410, i1 true) #1, !dbg !44
  %411 = xor i32 %394, 16, !dbg !44
  %412 = getelementptr bfloat, ptr addrspace(3) %400, i32 %411, !dbg !44
  %413 = bitcast bfloat %382 to i16, !dbg !44
  %414 = bitcast bfloat %383 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %412, i16 %413, i16 %414, i1 true) #1, !dbg !44
  %415 = xor i32 %394, 272, !dbg !44
  %416 = lshr i32 %415, 2, !dbg !44
  %417 = and i32 %416, 1073741816, !dbg !44
  %418 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %417, !dbg !44
  %419 = getelementptr bfloat, ptr addrspace(3) %418, i32 %415, !dbg !44
  %420 = bitcast bfloat %384 to i16, !dbg !44
  %421 = bitcast bfloat %385 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %419, i16 %420, i16 %421, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %422 = lshr exact i32 %397, 2, !dbg !44
  %423 = and i32 %422, 248, !dbg !44
  %424 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %423, !dbg !44
  %425 = getelementptr bfloat, ptr addrspace(3) %424, i32 %397, !dbg !44
  %.extract = load i32, ptr addrspace(3) %425, align 16, !dbg !44
  %426 = getelementptr inbounds nuw i8, ptr addrspace(3) %425, i32 4, !dbg !44
  %.extract17 = load i32, ptr addrspace(3) %426, align 4, !dbg !44
  %427 = getelementptr inbounds nuw i8, ptr addrspace(3) %425, i32 8, !dbg !44
  %.extract19 = load i32, ptr addrspace(3) %427, align 8, !dbg !44
  %428 = getelementptr inbounds nuw i8, ptr addrspace(3) %425, i32 12, !dbg !44
  %.extract21 = load i32, ptr addrspace(3) %428, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract19, i32 %.extract21, ptr addrspace(1) %377, i1 %373) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6eps2fynhgy66ddyjtsf3obghavt5znjzezj4rtr6bkcxlhq4sx.py", directory: "/tmp/torchinductor_root/6e")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 66, column: 42, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 27, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
