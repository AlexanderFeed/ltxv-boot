; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 4112, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 3, !dbg !11
  %14 = and i32 %13, 8184, !dbg !11
  %15 = or disjoint i32 %14, 4, !dbg !11
  %16 = mul i32 %9, 3072, !dbg !12
  %17 = mul i32 %9, 12288, !dbg !13
  %18 = add i32 %17, -3072
  %19 = add i32 %18, %15
  %20 = zext nneg i32 %14 to i64, !dbg !14
  br label %21, !dbg !14

21:                                               ; preds = %8, %__nv_tanhf.exit287
  %22 = phi i1 [ true, %8 ], [ false, %__nv_tanhf.exit287 ]
  %indvars.iv = phi i64 [ 0, %8 ], [ 8192, %__nv_tanhf.exit287 ]
  %23 = phi <8 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %418, %__nv_tanhf.exit287 ]
  %24 = phi <8 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %414, %__nv_tanhf.exit287 ]
  %25 = or disjoint i64 %indvars.iv, %20, !dbg !15
  %26 = icmp samesign ult i64 %25, 15360, !dbg !16
  %27 = icmp samesign ult i64 %25, 3072, !dbg !17
  %28 = trunc nuw nsw i64 %25 to i32, !dbg !18
  %29 = add i32 %16, %28, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = and i1 %10, %26, !dbg !20
  %33 = and i1 %10, %27, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %33) #5, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = shufflevector <2 x bfloat> %42, <2 x bfloat> %40, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %44 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %45 = shufflevector <8 x bfloat> %43, <8 x bfloat> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !23
  %46 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %47 = shufflevector <8 x bfloat> %45, <8 x bfloat> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <8 x bfloat> %47, <8 x bfloat> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !23
  %50 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <8 x bfloat> %49, <8 x bfloat> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !23
  %52 = fpext <8 x bfloat> %51 to <8 x float>, !dbg !23
  %53 = icmp samesign ugt i64 %25, 3071, !dbg !24
  %54 = add i32 %18, %28, !dbg !25
  %55 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !25
  %56 = add i32 %19, %55, !dbg !25
  %57 = sext i32 %54 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !26
  %59 = sext i32 %56 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !26
  %61 = and i1 %53, %32, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %61) #5, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %61) #5, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %72 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !28
  %73 = insertelement <8 x i32> %72, i32 %70, i64 1, !dbg !28
  %74 = insertelement <8 x i32> %73, i32 %69, i64 2, !dbg !28
  %75 = insertelement <8 x i32> %74, i32 %68, i64 3, !dbg !28
  %76 = insertelement <8 x i32> %75, i32 %66, i64 4, !dbg !28
  %77 = insertelement <8 x i32> %76, i32 %65, i64 5, !dbg !28
  %78 = insertelement <8 x i32> %77, i32 %64, i64 6, !dbg !28
  %79 = insertelement <8 x i32> %78, i32 %63, i64 7, !dbg !28
  %80 = bitcast <8 x i32> %79 to <8 x float>, !dbg !28
  %81 = fmul <8 x float> %80, splat (float 5.000000e-01), !dbg !29
  %82 = bitcast i32 %63 to float, !dbg !30
  %83 = fmul float %82, %82, !dbg !30
  %84 = bitcast i32 %64 to float, !dbg !30
  %85 = fmul float %84, %84, !dbg !30
  %86 = bitcast i32 %65 to float, !dbg !30
  %87 = fmul float %86, %86, !dbg !30
  %88 = bitcast i32 %66 to float, !dbg !30
  %89 = fmul float %88, %88, !dbg !30
  %90 = bitcast i32 %68 to float, !dbg !30
  %91 = fmul float %90, %90, !dbg !30
  %92 = bitcast i32 %69 to float, !dbg !30
  %93 = fmul float %92, %92, !dbg !30
  %94 = bitcast i32 %70 to float, !dbg !30
  %95 = fmul float %94, %94, !dbg !30
  %96 = bitcast i32 %71 to float, !dbg !30
  %97 = fmul float %96, %96, !dbg !30
  %98 = fmul float %83, %82, !dbg !31
  %99 = fmul float %85, %84, !dbg !31
  %100 = fmul float %87, %86, !dbg !31
  %101 = fmul float %89, %88, !dbg !31
  %102 = fmul float %91, %90, !dbg !31
  %103 = fmul float %93, %92, !dbg !31
  %104 = fmul float %95, %94, !dbg !31
  %105 = fmul float %97, %96, !dbg !31
  %106 = fmul float %98, 0x3FA6E4E260000000, !dbg !32
  %107 = fmul float %99, 0x3FA6E4E260000000, !dbg !32
  %108 = fmul float %100, 0x3FA6E4E260000000, !dbg !32
  %109 = fmul float %101, 0x3FA6E4E260000000, !dbg !32
  %110 = fmul float %102, 0x3FA6E4E260000000, !dbg !32
  %111 = fmul float %103, 0x3FA6E4E260000000, !dbg !32
  %112 = fmul float %104, 0x3FA6E4E260000000, !dbg !32
  %113 = fmul float %105, 0x3FA6E4E260000000, !dbg !32
  %114 = fadd float %106, %82, !dbg !33
  %115 = fadd float %107, %84, !dbg !33
  %116 = fadd float %108, %86, !dbg !33
  %117 = fadd float %109, %88, !dbg !33
  %118 = fadd float %110, %90, !dbg !33
  %119 = fadd float %111, %92, !dbg !33
  %120 = fadd float %112, %94, !dbg !33
  %121 = fadd float %113, %96, !dbg !33
  %122 = fmul float %114, 0x3FE9884540000000, !dbg !34
  %123 = fmul float %115, 0x3FE9884540000000, !dbg !34
  %124 = fmul float %116, 0x3FE9884540000000, !dbg !34
  %125 = fmul float %117, 0x3FE9884540000000, !dbg !34
  %126 = fmul float %118, 0x3FE9884540000000, !dbg !34
  %127 = fmul float %119, 0x3FE9884540000000, !dbg !34
  %128 = fmul float %120, 0x3FE9884540000000, !dbg !34
  %129 = fmul float %121, 0x3FE9884540000000, !dbg !34
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i136 = icmp eq i32 %130, 0, !dbg !35
  %131 = tail call float @llvm.nvvm.fabs.ftz.f(float %122) #5, !dbg !35
  %132 = tail call float @llvm.nvvm.fabs.f(float %122) #5, !dbg !35
  %.01.i137 = select i1 %.not.i136, float %132, float %131, !dbg !35
  %133 = fcmp ult float %.01.i137, 0x3FE3333340000000, !dbg !35
  br i1 %133, label %__internal_fmad.exit3.i143, label %__internal_fmad.exit1.i138, !dbg !35

__internal_fmad.exit1.i138:                       ; preds = %21
  %134 = fmul float %.01.i137, 0x4007154760000000, !dbg !35
  %135 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %134) #5, !dbg !35
  %136 = fadd float %135, 1.000000e+00, !dbg !35
  %137 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %136) #6, !dbg !35, !srcloc !36
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i139 = icmp eq i32 %138, 0, !dbg !35
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %137, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %137, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i140 = select i1 %.not6.i139, float %140, float %139, !dbg !35
  %141 = fcmp oge float %.01.i137, 0x4022059680000000, !dbg !35
  %s.0.i141 = select i1 %141, float 1.000000e+00, float %.03.i140, !dbg !35
  %142 = bitcast float %s.0.i141 to i32, !dbg !35
  %143 = bitcast float %122 to i32, !dbg !35
  %144 = and i32 %143, -2147483648, !dbg !35
  %145 = or i32 %144, %142, !dbg !35
  %146 = bitcast i32 %145 to float, !dbg !35
  br label %__nv_tanhf.exit154, !dbg !35

__internal_fmad.exit3.i143:                       ; preds = %21
  %147 = fmul float %122, %122, !dbg !35
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i144 = icmp eq i32 %148, 0, !dbg !35
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %147, float 0xBFAAC795C0000000) #5, !dbg !35
  %150 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %147, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i145 = select i1 %.not1.i144, float %150, float %149, !dbg !35
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i146 = icmp eq i32 %151, 0, !dbg !35
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i145, float %147, float 0x3FC10B2820000000) #5, !dbg !35
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i145, float %147, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i147 = select i1 %.not2.i146, float %153, float %152, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i148 = icmp eq i32 %154, 0, !dbg !35
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i147, float %147, float 0xBFD5553DA0000000) #5, !dbg !35
  %156 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i147, float %147, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i149 = select i1 %.not3.i148, float %156, float %155, !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i150 = icmp eq i32 %157, 0, !dbg !35
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i149, float %147, float 0.000000e+00) #5, !dbg !35
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i149, float %147, float 0.000000e+00) #5, !dbg !35
  %.04.i151 = select i1 %.not4.i150, float %159, float %158, !dbg !35
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i152 = icmp eq i32 %160, 0, !dbg !35
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i151, float %122, float %122) #5, !dbg !35
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i151, float %122, float %122) #5, !dbg !35
  %.02.i153 = select i1 %.not5.i152, float %162, float %161, !dbg !35
  br label %__nv_tanhf.exit154, !dbg !35

__nv_tanhf.exit154:                               ; preds = %__internal_fmad.exit1.i138, %__internal_fmad.exit3.i143
  %s.1.i142 = phi float [ %146, %__internal_fmad.exit1.i138 ], [ %.02.i153, %__internal_fmad.exit3.i143 ], !dbg !35
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i155 = icmp eq i32 %163, 0, !dbg !35
  %164 = tail call float @llvm.nvvm.fabs.ftz.f(float %123) #5, !dbg !35
  %165 = tail call float @llvm.nvvm.fabs.f(float %123) #5, !dbg !35
  %.01.i156 = select i1 %.not.i155, float %165, float %164, !dbg !35
  %166 = fcmp ult float %.01.i156, 0x3FE3333340000000, !dbg !35
  br i1 %166, label %__internal_fmad.exit3.i162, label %__internal_fmad.exit1.i157, !dbg !35

__internal_fmad.exit1.i157:                       ; preds = %__nv_tanhf.exit154
  %167 = fmul float %.01.i156, 0x4007154760000000, !dbg !35
  %168 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %167) #5, !dbg !35
  %169 = fadd float %168, 1.000000e+00, !dbg !35
  %170 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %169) #6, !dbg !35, !srcloc !36
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i158 = icmp eq i32 %171, 0, !dbg !35
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %170, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %170, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i159 = select i1 %.not6.i158, float %173, float %172, !dbg !35
  %174 = fcmp oge float %.01.i156, 0x4022059680000000, !dbg !35
  %s.0.i160 = select i1 %174, float 1.000000e+00, float %.03.i159, !dbg !35
  %175 = bitcast float %s.0.i160 to i32, !dbg !35
  %176 = bitcast float %123 to i32, !dbg !35
  %177 = and i32 %176, -2147483648, !dbg !35
  %178 = or i32 %177, %175, !dbg !35
  %179 = bitcast i32 %178 to float, !dbg !35
  br label %__nv_tanhf.exit173, !dbg !35

__internal_fmad.exit3.i162:                       ; preds = %__nv_tanhf.exit154
  %180 = fmul float %123, %123, !dbg !35
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i163 = icmp eq i32 %181, 0, !dbg !35
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %180, float 0xBFAAC795C0000000) #5, !dbg !35
  %183 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %180, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i164 = select i1 %.not1.i163, float %183, float %182, !dbg !35
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i165 = icmp eq i32 %184, 0, !dbg !35
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i164, float %180, float 0x3FC10B2820000000) #5, !dbg !35
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i164, float %180, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i166 = select i1 %.not2.i165, float %186, float %185, !dbg !35
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i167 = icmp eq i32 %187, 0, !dbg !35
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i166, float %180, float 0xBFD5553DA0000000) #5, !dbg !35
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i166, float %180, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i168 = select i1 %.not3.i167, float %189, float %188, !dbg !35
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i169 = icmp eq i32 %190, 0, !dbg !35
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i168, float %180, float 0.000000e+00) #5, !dbg !35
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i168, float %180, float 0.000000e+00) #5, !dbg !35
  %.04.i170 = select i1 %.not4.i169, float %192, float %191, !dbg !35
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i171 = icmp eq i32 %193, 0, !dbg !35
  %194 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i170, float %123, float %123) #5, !dbg !35
  %195 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i170, float %123, float %123) #5, !dbg !35
  %.02.i172 = select i1 %.not5.i171, float %195, float %194, !dbg !35
  br label %__nv_tanhf.exit173, !dbg !35

__nv_tanhf.exit173:                               ; preds = %__internal_fmad.exit1.i157, %__internal_fmad.exit3.i162
  %s.1.i161 = phi float [ %179, %__internal_fmad.exit1.i157 ], [ %.02.i172, %__internal_fmad.exit3.i162 ], !dbg !35
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i174 = icmp eq i32 %196, 0, !dbg !35
  %197 = tail call float @llvm.nvvm.fabs.ftz.f(float %124) #5, !dbg !35
  %198 = tail call float @llvm.nvvm.fabs.f(float %124) #5, !dbg !35
  %.01.i175 = select i1 %.not.i174, float %198, float %197, !dbg !35
  %199 = fcmp ult float %.01.i175, 0x3FE3333340000000, !dbg !35
  br i1 %199, label %__internal_fmad.exit3.i181, label %__internal_fmad.exit1.i176, !dbg !35

__internal_fmad.exit1.i176:                       ; preds = %__nv_tanhf.exit173
  %200 = fmul float %.01.i175, 0x4007154760000000, !dbg !35
  %201 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %200) #5, !dbg !35
  %202 = fadd float %201, 1.000000e+00, !dbg !35
  %203 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %202) #6, !dbg !35, !srcloc !36
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i177 = icmp eq i32 %204, 0, !dbg !35
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %203, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %206 = tail call float @llvm.nvvm.fma.rn.f(float %203, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i178 = select i1 %.not6.i177, float %206, float %205, !dbg !35
  %207 = fcmp oge float %.01.i175, 0x4022059680000000, !dbg !35
  %s.0.i179 = select i1 %207, float 1.000000e+00, float %.03.i178, !dbg !35
  %208 = bitcast float %s.0.i179 to i32, !dbg !35
  %209 = bitcast float %124 to i32, !dbg !35
  %210 = and i32 %209, -2147483648, !dbg !35
  %211 = or i32 %210, %208, !dbg !35
  %212 = bitcast i32 %211 to float, !dbg !35
  br label %__nv_tanhf.exit192, !dbg !35

__internal_fmad.exit3.i181:                       ; preds = %__nv_tanhf.exit173
  %213 = fmul float %124, %124, !dbg !35
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i182 = icmp eq i32 %214, 0, !dbg !35
  %215 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %213, float 0xBFAAC795C0000000) #5, !dbg !35
  %216 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %213, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i183 = select i1 %.not1.i182, float %216, float %215, !dbg !35
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i184 = icmp eq i32 %217, 0, !dbg !35
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i183, float %213, float 0x3FC10B2820000000) #5, !dbg !35
  %219 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i183, float %213, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i185 = select i1 %.not2.i184, float %219, float %218, !dbg !35
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i186 = icmp eq i32 %220, 0, !dbg !35
  %221 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i185, float %213, float 0xBFD5553DA0000000) #5, !dbg !35
  %222 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i185, float %213, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i187 = select i1 %.not3.i186, float %222, float %221, !dbg !35
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i188 = icmp eq i32 %223, 0, !dbg !35
  %224 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i187, float %213, float 0.000000e+00) #5, !dbg !35
  %225 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i187, float %213, float 0.000000e+00) #5, !dbg !35
  %.04.i189 = select i1 %.not4.i188, float %225, float %224, !dbg !35
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i190 = icmp eq i32 %226, 0, !dbg !35
  %227 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i189, float %124, float %124) #5, !dbg !35
  %228 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i189, float %124, float %124) #5, !dbg !35
  %.02.i191 = select i1 %.not5.i190, float %228, float %227, !dbg !35
  br label %__nv_tanhf.exit192, !dbg !35

__nv_tanhf.exit192:                               ; preds = %__internal_fmad.exit1.i176, %__internal_fmad.exit3.i181
  %s.1.i180 = phi float [ %212, %__internal_fmad.exit1.i176 ], [ %.02.i191, %__internal_fmad.exit3.i181 ], !dbg !35
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i193 = icmp eq i32 %229, 0, !dbg !35
  %230 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #5, !dbg !35
  %231 = tail call float @llvm.nvvm.fabs.f(float %125) #5, !dbg !35
  %.01.i194 = select i1 %.not.i193, float %231, float %230, !dbg !35
  %232 = fcmp ult float %.01.i194, 0x3FE3333340000000, !dbg !35
  br i1 %232, label %__internal_fmad.exit3.i200, label %__internal_fmad.exit1.i195, !dbg !35

__internal_fmad.exit1.i195:                       ; preds = %__nv_tanhf.exit192
  %233 = fmul float %.01.i194, 0x4007154760000000, !dbg !35
  %234 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %233) #5, !dbg !35
  %235 = fadd float %234, 1.000000e+00, !dbg !35
  %236 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %235) #6, !dbg !35, !srcloc !36
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i196 = icmp eq i32 %237, 0, !dbg !35
  %238 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %236, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %239 = tail call float @llvm.nvvm.fma.rn.f(float %236, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i197 = select i1 %.not6.i196, float %239, float %238, !dbg !35
  %240 = fcmp oge float %.01.i194, 0x4022059680000000, !dbg !35
  %s.0.i198 = select i1 %240, float 1.000000e+00, float %.03.i197, !dbg !35
  %241 = bitcast float %s.0.i198 to i32, !dbg !35
  %242 = bitcast float %125 to i32, !dbg !35
  %243 = and i32 %242, -2147483648, !dbg !35
  %244 = or i32 %243, %241, !dbg !35
  %245 = bitcast i32 %244 to float, !dbg !35
  br label %__nv_tanhf.exit211, !dbg !35

__internal_fmad.exit3.i200:                       ; preds = %__nv_tanhf.exit192
  %246 = fmul float %125, %125, !dbg !35
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i201 = icmp eq i32 %247, 0, !dbg !35
  %248 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %246, float 0xBFAAC795C0000000) #5, !dbg !35
  %249 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %246, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i202 = select i1 %.not1.i201, float %249, float %248, !dbg !35
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i203 = icmp eq i32 %250, 0, !dbg !35
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i202, float %246, float 0x3FC10B2820000000) #5, !dbg !35
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i202, float %246, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i204 = select i1 %.not2.i203, float %252, float %251, !dbg !35
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i205 = icmp eq i32 %253, 0, !dbg !35
  %254 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i204, float %246, float 0xBFD5553DA0000000) #5, !dbg !35
  %255 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i204, float %246, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i206 = select i1 %.not3.i205, float %255, float %254, !dbg !35
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i207 = icmp eq i32 %256, 0, !dbg !35
  %257 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i206, float %246, float 0.000000e+00) #5, !dbg !35
  %258 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i206, float %246, float 0.000000e+00) #5, !dbg !35
  %.04.i208 = select i1 %.not4.i207, float %258, float %257, !dbg !35
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i209 = icmp eq i32 %259, 0, !dbg !35
  %260 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i208, float %125, float %125) #5, !dbg !35
  %261 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i208, float %125, float %125) #5, !dbg !35
  %.02.i210 = select i1 %.not5.i209, float %261, float %260, !dbg !35
  br label %__nv_tanhf.exit211, !dbg !35

__nv_tanhf.exit211:                               ; preds = %__internal_fmad.exit1.i195, %__internal_fmad.exit3.i200
  %s.1.i199 = phi float [ %245, %__internal_fmad.exit1.i195 ], [ %.02.i210, %__internal_fmad.exit3.i200 ], !dbg !35
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i212 = icmp eq i32 %262, 0, !dbg !35
  %263 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #5, !dbg !35
  %264 = tail call float @llvm.nvvm.fabs.f(float %126) #5, !dbg !35
  %.01.i213 = select i1 %.not.i212, float %264, float %263, !dbg !35
  %265 = fcmp ult float %.01.i213, 0x3FE3333340000000, !dbg !35
  br i1 %265, label %__internal_fmad.exit3.i219, label %__internal_fmad.exit1.i214, !dbg !35

__internal_fmad.exit1.i214:                       ; preds = %__nv_tanhf.exit211
  %266 = fmul float %.01.i213, 0x4007154760000000, !dbg !35
  %267 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %266) #5, !dbg !35
  %268 = fadd float %267, 1.000000e+00, !dbg !35
  %269 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %268) #6, !dbg !35, !srcloc !36
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i215 = icmp eq i32 %270, 0, !dbg !35
  %271 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %269, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %272 = tail call float @llvm.nvvm.fma.rn.f(float %269, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i216 = select i1 %.not6.i215, float %272, float %271, !dbg !35
  %273 = fcmp oge float %.01.i213, 0x4022059680000000, !dbg !35
  %s.0.i217 = select i1 %273, float 1.000000e+00, float %.03.i216, !dbg !35
  %274 = bitcast float %s.0.i217 to i32, !dbg !35
  %275 = bitcast float %126 to i32, !dbg !35
  %276 = and i32 %275, -2147483648, !dbg !35
  %277 = or i32 %276, %274, !dbg !35
  %278 = bitcast i32 %277 to float, !dbg !35
  br label %__nv_tanhf.exit230, !dbg !35

__internal_fmad.exit3.i219:                       ; preds = %__nv_tanhf.exit211
  %279 = fmul float %126, %126, !dbg !35
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i220 = icmp eq i32 %280, 0, !dbg !35
  %281 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %279, float 0xBFAAC795C0000000) #5, !dbg !35
  %282 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %279, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i221 = select i1 %.not1.i220, float %282, float %281, !dbg !35
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i222 = icmp eq i32 %283, 0, !dbg !35
  %284 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i221, float %279, float 0x3FC10B2820000000) #5, !dbg !35
  %285 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i221, float %279, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i223 = select i1 %.not2.i222, float %285, float %284, !dbg !35
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i224 = icmp eq i32 %286, 0, !dbg !35
  %287 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i223, float %279, float 0xBFD5553DA0000000) #5, !dbg !35
  %288 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i223, float %279, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i225 = select i1 %.not3.i224, float %288, float %287, !dbg !35
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i226 = icmp eq i32 %289, 0, !dbg !35
  %290 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i225, float %279, float 0.000000e+00) #5, !dbg !35
  %291 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i225, float %279, float 0.000000e+00) #5, !dbg !35
  %.04.i227 = select i1 %.not4.i226, float %291, float %290, !dbg !35
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i228 = icmp eq i32 %292, 0, !dbg !35
  %293 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i227, float %126, float %126) #5, !dbg !35
  %294 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i227, float %126, float %126) #5, !dbg !35
  %.02.i229 = select i1 %.not5.i228, float %294, float %293, !dbg !35
  br label %__nv_tanhf.exit230, !dbg !35

__nv_tanhf.exit230:                               ; preds = %__internal_fmad.exit1.i214, %__internal_fmad.exit3.i219
  %s.1.i218 = phi float [ %278, %__internal_fmad.exit1.i214 ], [ %.02.i229, %__internal_fmad.exit3.i219 ], !dbg !35
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i231 = icmp eq i32 %295, 0, !dbg !35
  %296 = tail call float @llvm.nvvm.fabs.ftz.f(float %127) #5, !dbg !35
  %297 = tail call float @llvm.nvvm.fabs.f(float %127) #5, !dbg !35
  %.01.i232 = select i1 %.not.i231, float %297, float %296, !dbg !35
  %298 = fcmp ult float %.01.i232, 0x3FE3333340000000, !dbg !35
  br i1 %298, label %__internal_fmad.exit3.i238, label %__internal_fmad.exit1.i233, !dbg !35

__internal_fmad.exit1.i233:                       ; preds = %__nv_tanhf.exit230
  %299 = fmul float %.01.i232, 0x4007154760000000, !dbg !35
  %300 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %299) #5, !dbg !35
  %301 = fadd float %300, 1.000000e+00, !dbg !35
  %302 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %301) #6, !dbg !35, !srcloc !36
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i234 = icmp eq i32 %303, 0, !dbg !35
  %304 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %302, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %305 = tail call float @llvm.nvvm.fma.rn.f(float %302, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i235 = select i1 %.not6.i234, float %305, float %304, !dbg !35
  %306 = fcmp oge float %.01.i232, 0x4022059680000000, !dbg !35
  %s.0.i236 = select i1 %306, float 1.000000e+00, float %.03.i235, !dbg !35
  %307 = bitcast float %s.0.i236 to i32, !dbg !35
  %308 = bitcast float %127 to i32, !dbg !35
  %309 = and i32 %308, -2147483648, !dbg !35
  %310 = or i32 %309, %307, !dbg !35
  %311 = bitcast i32 %310 to float, !dbg !35
  br label %__nv_tanhf.exit249, !dbg !35

__internal_fmad.exit3.i238:                       ; preds = %__nv_tanhf.exit230
  %312 = fmul float %127, %127, !dbg !35
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i239 = icmp eq i32 %313, 0, !dbg !35
  %314 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %312, float 0xBFAAC795C0000000) #5, !dbg !35
  %315 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %312, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i240 = select i1 %.not1.i239, float %315, float %314, !dbg !35
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i241 = icmp eq i32 %316, 0, !dbg !35
  %317 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i240, float %312, float 0x3FC10B2820000000) #5, !dbg !35
  %318 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i240, float %312, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i242 = select i1 %.not2.i241, float %318, float %317, !dbg !35
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i243 = icmp eq i32 %319, 0, !dbg !35
  %320 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i242, float %312, float 0xBFD5553DA0000000) #5, !dbg !35
  %321 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i242, float %312, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i244 = select i1 %.not3.i243, float %321, float %320, !dbg !35
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i245 = icmp eq i32 %322, 0, !dbg !35
  %323 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i244, float %312, float 0.000000e+00) #5, !dbg !35
  %324 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i244, float %312, float 0.000000e+00) #5, !dbg !35
  %.04.i246 = select i1 %.not4.i245, float %324, float %323, !dbg !35
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i247 = icmp eq i32 %325, 0, !dbg !35
  %326 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i246, float %127, float %127) #5, !dbg !35
  %327 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i246, float %127, float %127) #5, !dbg !35
  %.02.i248 = select i1 %.not5.i247, float %327, float %326, !dbg !35
  br label %__nv_tanhf.exit249, !dbg !35

__nv_tanhf.exit249:                               ; preds = %__internal_fmad.exit1.i233, %__internal_fmad.exit3.i238
  %s.1.i237 = phi float [ %311, %__internal_fmad.exit1.i233 ], [ %.02.i248, %__internal_fmad.exit3.i238 ], !dbg !35
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i250 = icmp eq i32 %328, 0, !dbg !35
  %329 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !35
  %330 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !35
  %.01.i251 = select i1 %.not.i250, float %330, float %329, !dbg !35
  %331 = fcmp ult float %.01.i251, 0x3FE3333340000000, !dbg !35
  br i1 %331, label %__internal_fmad.exit3.i257, label %__internal_fmad.exit1.i252, !dbg !35

__internal_fmad.exit1.i252:                       ; preds = %__nv_tanhf.exit249
  %332 = fmul float %.01.i251, 0x4007154760000000, !dbg !35
  %333 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %332) #5, !dbg !35
  %334 = fadd float %333, 1.000000e+00, !dbg !35
  %335 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %334) #6, !dbg !35, !srcloc !36
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i253 = icmp eq i32 %336, 0, !dbg !35
  %337 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %335, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %338 = tail call float @llvm.nvvm.fma.rn.f(float %335, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i254 = select i1 %.not6.i253, float %338, float %337, !dbg !35
  %339 = fcmp oge float %.01.i251, 0x4022059680000000, !dbg !35
  %s.0.i255 = select i1 %339, float 1.000000e+00, float %.03.i254, !dbg !35
  %340 = bitcast float %s.0.i255 to i32, !dbg !35
  %341 = bitcast float %128 to i32, !dbg !35
  %342 = and i32 %341, -2147483648, !dbg !35
  %343 = or i32 %342, %340, !dbg !35
  %344 = bitcast i32 %343 to float, !dbg !35
  br label %__nv_tanhf.exit268, !dbg !35

__internal_fmad.exit3.i257:                       ; preds = %__nv_tanhf.exit249
  %345 = fmul float %128, %128, !dbg !35
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i258 = icmp eq i32 %346, 0, !dbg !35
  %347 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %345, float 0xBFAAC795C0000000) #5, !dbg !35
  %348 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %345, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i259 = select i1 %.not1.i258, float %348, float %347, !dbg !35
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i260 = icmp eq i32 %349, 0, !dbg !35
  %350 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i259, float %345, float 0x3FC10B2820000000) #5, !dbg !35
  %351 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i259, float %345, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i261 = select i1 %.not2.i260, float %351, float %350, !dbg !35
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i262 = icmp eq i32 %352, 0, !dbg !35
  %353 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i261, float %345, float 0xBFD5553DA0000000) #5, !dbg !35
  %354 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i261, float %345, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i263 = select i1 %.not3.i262, float %354, float %353, !dbg !35
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i264 = icmp eq i32 %355, 0, !dbg !35
  %356 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i263, float %345, float 0.000000e+00) #5, !dbg !35
  %357 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i263, float %345, float 0.000000e+00) #5, !dbg !35
  %.04.i265 = select i1 %.not4.i264, float %357, float %356, !dbg !35
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i266 = icmp eq i32 %358, 0, !dbg !35
  %359 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i265, float %128, float %128) #5, !dbg !35
  %360 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i265, float %128, float %128) #5, !dbg !35
  %.02.i267 = select i1 %.not5.i266, float %360, float %359, !dbg !35
  br label %__nv_tanhf.exit268, !dbg !35

__nv_tanhf.exit268:                               ; preds = %__internal_fmad.exit1.i252, %__internal_fmad.exit3.i257
  %s.1.i256 = phi float [ %344, %__internal_fmad.exit1.i252 ], [ %.02.i267, %__internal_fmad.exit3.i257 ], !dbg !35
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i269 = icmp eq i32 %361, 0, !dbg !35
  %362 = tail call float @llvm.nvvm.fabs.ftz.f(float %129) #5, !dbg !35
  %363 = tail call float @llvm.nvvm.fabs.f(float %129) #5, !dbg !35
  %.01.i270 = select i1 %.not.i269, float %363, float %362, !dbg !35
  %364 = fcmp ult float %.01.i270, 0x3FE3333340000000, !dbg !35
  br i1 %364, label %__internal_fmad.exit3.i276, label %__internal_fmad.exit1.i271, !dbg !35

__internal_fmad.exit1.i271:                       ; preds = %__nv_tanhf.exit268
  %365 = fmul float %.01.i270, 0x4007154760000000, !dbg !35
  %366 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %365) #5, !dbg !35
  %367 = fadd float %366, 1.000000e+00, !dbg !35
  %368 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %367) #6, !dbg !35, !srcloc !36
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i272 = icmp eq i32 %369, 0, !dbg !35
  %370 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %368, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %371 = tail call float @llvm.nvvm.fma.rn.f(float %368, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i273 = select i1 %.not6.i272, float %371, float %370, !dbg !35
  %372 = fcmp oge float %.01.i270, 0x4022059680000000, !dbg !35
  %s.0.i274 = select i1 %372, float 1.000000e+00, float %.03.i273, !dbg !35
  %373 = bitcast float %s.0.i274 to i32, !dbg !35
  %374 = bitcast float %129 to i32, !dbg !35
  %375 = and i32 %374, -2147483648, !dbg !35
  %376 = or i32 %375, %373, !dbg !35
  %377 = bitcast i32 %376 to float, !dbg !35
  br label %__nv_tanhf.exit287, !dbg !35

__internal_fmad.exit3.i276:                       ; preds = %__nv_tanhf.exit268
  %378 = fmul float %129, %129, !dbg !35
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i277 = icmp eq i32 %379, 0, !dbg !35
  %380 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %378, float 0xBFAAC795C0000000) #5, !dbg !35
  %381 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %378, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i278 = select i1 %.not1.i277, float %381, float %380, !dbg !35
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i279 = icmp eq i32 %382, 0, !dbg !35
  %383 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i278, float %378, float 0x3FC10B2820000000) #5, !dbg !35
  %384 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i278, float %378, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i280 = select i1 %.not2.i279, float %384, float %383, !dbg !35
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i281 = icmp eq i32 %385, 0, !dbg !35
  %386 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i280, float %378, float 0xBFD5553DA0000000) #5, !dbg !35
  %387 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i280, float %378, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i282 = select i1 %.not3.i281, float %387, float %386, !dbg !35
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i283 = icmp eq i32 %388, 0, !dbg !35
  %389 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i282, float %378, float 0.000000e+00) #5, !dbg !35
  %390 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i282, float %378, float 0.000000e+00) #5, !dbg !35
  %.04.i284 = select i1 %.not4.i283, float %390, float %389, !dbg !35
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i285 = icmp eq i32 %391, 0, !dbg !35
  %392 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i284, float %129, float %129) #5, !dbg !35
  %393 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i284, float %129, float %129) #5, !dbg !35
  %.02.i286 = select i1 %.not5.i285, float %393, float %392, !dbg !35
  br label %__nv_tanhf.exit287, !dbg !35

__nv_tanhf.exit287:                               ; preds = %__internal_fmad.exit1.i271, %__internal_fmad.exit3.i276
  %s.1.i275 = phi float [ %377, %__internal_fmad.exit1.i271 ], [ %.02.i286, %__internal_fmad.exit3.i276 ], !dbg !35
  %394 = insertelement <8 x float> poison, float %s.1.i275, i64 0, !dbg !37
  %395 = insertelement <8 x float> %394, float %s.1.i256, i64 1, !dbg !37
  %396 = insertelement <8 x float> %395, float %s.1.i237, i64 2, !dbg !37
  %397 = insertelement <8 x float> %396, float %s.1.i218, i64 3, !dbg !37
  %398 = insertelement <8 x float> %397, float %s.1.i199, i64 4, !dbg !37
  %399 = insertelement <8 x float> %398, float %s.1.i180, i64 5, !dbg !37
  %400 = insertelement <8 x float> %399, float %s.1.i161, i64 6, !dbg !37
  %401 = insertelement <8 x float> %400, float %s.1.i142, i64 7, !dbg !37
  %402 = fadd <8 x float> %401, splat (float 1.000000e+00), !dbg !37
  %403 = fcmp uno <8 x float> %24, zeroinitializer, !dbg !38
  %404 = fcmp uno <8 x float> %23, zeroinitializer, !dbg !42
  %405 = fmul <8 x float> %81, %402, !dbg !44
  %406 = insertelement <8 x i1> poison, i1 %27, i64 0, !dbg !45
  %407 = shufflevector <8 x i1> %406, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !45
  %408 = select <8 x i1> %407, <8 x float> %52, <8 x float> %405, !dbg !45
  %409 = fcmp olt <8 x float> %24, %408, !dbg !46
  %410 = or <8 x i1> %403, %409, !dbg !47
  %411 = select <8 x i1> %410, <8 x float> %24, <8 x float> %408, !dbg !48
  %412 = insertelement <8 x i1> poison, i1 %32, i64 0, !dbg !49
  %413 = shufflevector <8 x i1> %412, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !49
  %414 = select <8 x i1> %413, <8 x float> %411, <8 x float> %24, !dbg !49
  %415 = fcmp ogt <8 x float> %23, %408, !dbg !50
  %416 = or <8 x i1> %404, %415, !dbg !51
  %417 = select <8 x i1> %416, <8 x float> %23, <8 x float> %408, !dbg !52
  %418 = select <8 x i1> %413, <8 x float> %417, <8 x float> %23, !dbg !53
  br i1 %22, label %21, label %419, !dbg !14

419:                                              ; preds = %__nv_tanhf.exit287
  %420 = lshr i32 %11, 5, !dbg !11
  %421 = extractelement <8 x float> %414, i64 6, !dbg !54
  %422 = extractelement <8 x float> %414, i64 7, !dbg !54
  %423 = fcmp olt float %422, %421, !dbg !54
  %424 = fcmp uno float %422, 0.000000e+00, !dbg !57
  %425 = or i1 %423, %424, !dbg !58
  %426 = select i1 %425, float %422, float %421, !dbg !59
  %427 = extractelement <8 x float> %414, i64 5, !dbg !54
  %428 = fcmp olt float %426, %427, !dbg !54
  %429 = fcmp uno float %426, 0.000000e+00, !dbg !57
  %430 = or i1 %428, %429, !dbg !58
  %431 = select i1 %430, float %426, float %427, !dbg !59
  %432 = extractelement <8 x float> %414, i64 4, !dbg !54
  %433 = fcmp olt float %431, %432, !dbg !54
  %434 = fcmp uno float %431, 0.000000e+00, !dbg !57
  %435 = or i1 %433, %434, !dbg !58
  %436 = select i1 %435, float %431, float %432, !dbg !59
  %437 = extractelement <8 x float> %414, i64 3, !dbg !54
  %438 = fcmp olt float %436, %437, !dbg !54
  %439 = fcmp uno float %436, 0.000000e+00, !dbg !57
  %440 = or i1 %438, %439, !dbg !58
  %441 = select i1 %440, float %436, float %437, !dbg !59
  %442 = extractelement <8 x float> %414, i64 2, !dbg !54
  %443 = fcmp olt float %441, %442, !dbg !54
  %444 = fcmp uno float %441, 0.000000e+00, !dbg !57
  %445 = or i1 %443, %444, !dbg !58
  %446 = select i1 %445, float %441, float %442, !dbg !59
  %447 = extractelement <8 x float> %414, i64 1, !dbg !54
  %448 = fcmp olt float %446, %447, !dbg !54
  %449 = fcmp uno float %446, 0.000000e+00, !dbg !57
  %450 = or i1 %448, %449, !dbg !58
  %451 = select i1 %450, float %446, float %447, !dbg !59
  %452 = extractelement <8 x float> %414, i64 0, !dbg !54
  %453 = fcmp olt float %451, %452, !dbg !54
  %454 = fcmp uno float %451, 0.000000e+00, !dbg !57
  %455 = or i1 %453, %454, !dbg !58
  %456 = select i1 %455, float %451, float %452, !dbg !59
  %457 = bitcast float %456 to i32, !dbg !60
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 16, i32 31), !dbg !60
  %459 = bitcast i32 %458 to float, !dbg !60
  %460 = fcmp olt float %456, %459, !dbg !54
  %461 = fcmp uno float %456, 0.000000e+00, !dbg !57
  %462 = or i1 %461, %460, !dbg !58
  %463 = select i1 %462, float %456, float %459, !dbg !59
  %464 = bitcast float %463 to i32, !dbg !60
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 8, i32 31), !dbg !60
  %466 = bitcast i32 %465 to float, !dbg !60
  %467 = fcmp olt float %463, %466, !dbg !54
  %468 = fcmp uno float %463, 0.000000e+00, !dbg !57
  %469 = or i1 %467, %468, !dbg !58
  %470 = select i1 %469, float %463, float %466, !dbg !59
  %471 = bitcast float %470 to i32, !dbg !60
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 4, i32 31), !dbg !60
  %473 = bitcast i32 %472 to float, !dbg !60
  %474 = fcmp olt float %470, %473, !dbg !54
  %475 = fcmp uno float %470, 0.000000e+00, !dbg !57
  %476 = or i1 %474, %475, !dbg !58
  %477 = select i1 %476, float %470, float %473, !dbg !59
  %478 = bitcast float %477 to i32, !dbg !60
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 2, i32 31), !dbg !60
  %480 = bitcast i32 %479 to float, !dbg !60
  %481 = fcmp olt float %477, %480, !dbg !54
  %482 = fcmp uno float %477, 0.000000e+00, !dbg !57
  %483 = or i1 %481, %482, !dbg !58
  %484 = select i1 %483, float %477, float %480, !dbg !59
  %485 = bitcast float %484 to i32, !dbg !60
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !60
  %487 = bitcast i32 %486 to float, !dbg !60
  %488 = fcmp olt float %484, %487, !dbg !54
  %489 = fcmp uno float %484, 0.000000e+00, !dbg !57
  %490 = or i1 %488, %489, !dbg !58
  %491 = and i32 %420, 31, !dbg !60
  %492 = icmp eq i32 %12, 0, !dbg !60
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %491, !dbg !60
  %494 = select i1 %490, i32 %485, i32 %486, !dbg !59
  %495 = insertelement <1 x i32> poison, i32 %494, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %495, i1 %492) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %496 = icmp slt i32 %11, 32, !dbg !60
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %498 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %496) #5, !dbg !60
  %499 = bitcast i32 %498 to float, !dbg !60
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 16, i32 31), !dbg !60
  %501 = bitcast i32 %500 to float, !dbg !60
  %502 = fcmp olt float %499, %501, !dbg !54
  %503 = fcmp uno float %499, 0.000000e+00, !dbg !57
  %504 = or i1 %503, %502, !dbg !58
  %505 = select i1 %504, float %499, float %501, !dbg !59
  %506 = bitcast float %505 to i32, !dbg !60
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 8, i32 31), !dbg !60
  %508 = bitcast i32 %507 to float, !dbg !60
  %509 = fcmp olt float %505, %508, !dbg !54
  %510 = fcmp uno float %505, 0.000000e+00, !dbg !57
  %511 = or i1 %509, %510, !dbg !58
  %512 = select i1 %511, float %505, float %508, !dbg !59
  %513 = bitcast float %512 to i32, !dbg !60
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 4, i32 31), !dbg !60
  %515 = bitcast i32 %514 to float, !dbg !60
  %516 = fcmp olt float %512, %515, !dbg !54
  %517 = fcmp uno float %512, 0.000000e+00, !dbg !57
  %518 = or i1 %516, %517, !dbg !58
  %519 = select i1 %518, float %512, float %515, !dbg !59
  %520 = bitcast float %519 to i32, !dbg !60
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 2, i32 31), !dbg !60
  %522 = bitcast i32 %521 to float, !dbg !60
  %523 = fcmp olt float %519, %522, !dbg !54
  %524 = fcmp uno float %519, 0.000000e+00, !dbg !57
  %525 = or i1 %523, %524, !dbg !58
  %526 = select i1 %525, float %519, float %522, !dbg !59
  %527 = bitcast float %526 to i32, !dbg !60
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 1, i32 31), !dbg !60
  %529 = bitcast i32 %528 to float, !dbg !60
  %530 = fcmp olt float %526, %529, !dbg !54
  %531 = fcmp uno float %526, 0.000000e+00, !dbg !57
  %532 = or i1 %530, %531, !dbg !58
  %533 = and i1 %496, %492, !dbg !60
  %534 = select i1 %532, i32 %527, i32 %528, !dbg !59
  %535 = insertelement <1 x i32> poison, i32 %534, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %535, i1 %533) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %536 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %537 = extractelement <8 x float> %418, i64 6, !dbg !63
  %538 = extractelement <8 x float> %418, i64 7, !dbg !63
  %539 = fcmp ogt float %538, %537, !dbg !63
  %540 = fcmp uno float %538, 0.000000e+00, !dbg !64
  %541 = or i1 %539, %540, !dbg !65
  %542 = select i1 %541, float %538, float %537, !dbg !66
  %543 = extractelement <8 x float> %418, i64 5, !dbg !63
  %544 = fcmp ogt float %542, %543, !dbg !63
  %545 = fcmp uno float %542, 0.000000e+00, !dbg !64
  %546 = or i1 %544, %545, !dbg !65
  %547 = select i1 %546, float %542, float %543, !dbg !66
  %548 = extractelement <8 x float> %418, i64 4, !dbg !63
  %549 = fcmp ogt float %547, %548, !dbg !63
  %550 = fcmp uno float %547, 0.000000e+00, !dbg !64
  %551 = or i1 %549, %550, !dbg !65
  %552 = select i1 %551, float %547, float %548, !dbg !66
  %553 = extractelement <8 x float> %418, i64 3, !dbg !63
  %554 = fcmp ogt float %552, %553, !dbg !63
  %555 = fcmp uno float %552, 0.000000e+00, !dbg !64
  %556 = or i1 %554, %555, !dbg !65
  %557 = select i1 %556, float %552, float %553, !dbg !66
  %558 = extractelement <8 x float> %418, i64 2, !dbg !63
  %559 = fcmp ogt float %557, %558, !dbg !63
  %560 = fcmp uno float %557, 0.000000e+00, !dbg !64
  %561 = or i1 %559, %560, !dbg !65
  %562 = select i1 %561, float %557, float %558, !dbg !66
  %563 = extractelement <8 x float> %418, i64 1, !dbg !63
  %564 = fcmp ogt float %562, %563, !dbg !63
  %565 = fcmp uno float %562, 0.000000e+00, !dbg !64
  %566 = or i1 %564, %565, !dbg !65
  %567 = select i1 %566, float %562, float %563, !dbg !66
  %568 = extractelement <8 x float> %418, i64 0, !dbg !63
  %569 = fcmp ogt float %567, %568, !dbg !63
  %570 = fcmp uno float %567, 0.000000e+00, !dbg !64
  %571 = or i1 %569, %570, !dbg !65
  %572 = select i1 %571, float %567, float %568, !dbg !66
  %573 = bitcast float %572 to i32, !dbg !61
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 16, i32 31), !dbg !61
  %575 = bitcast i32 %574 to float, !dbg !61
  %576 = fcmp ogt float %572, %575, !dbg !63
  %577 = fcmp uno float %572, 0.000000e+00, !dbg !64
  %578 = or i1 %577, %576, !dbg !65
  %579 = select i1 %578, float %572, float %575, !dbg !66
  %580 = bitcast float %579 to i32, !dbg !61
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 8, i32 31), !dbg !61
  %582 = bitcast i32 %581 to float, !dbg !61
  %583 = fcmp ogt float %579, %582, !dbg !63
  %584 = fcmp uno float %579, 0.000000e+00, !dbg !64
  %585 = or i1 %583, %584, !dbg !65
  %586 = select i1 %585, float %579, float %582, !dbg !66
  %587 = bitcast float %586 to i32, !dbg !61
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 4, i32 31), !dbg !61
  %589 = bitcast i32 %588 to float, !dbg !61
  %590 = fcmp ogt float %586, %589, !dbg !63
  %591 = fcmp uno float %586, 0.000000e+00, !dbg !64
  %592 = or i1 %590, %591, !dbg !65
  %593 = select i1 %592, float %586, float %589, !dbg !66
  %594 = bitcast float %593 to i32, !dbg !61
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 2, i32 31), !dbg !61
  %596 = bitcast i32 %595 to float, !dbg !61
  %597 = fcmp ogt float %593, %596, !dbg !63
  %598 = fcmp uno float %593, 0.000000e+00, !dbg !64
  %599 = or i1 %597, %598, !dbg !65
  %600 = select i1 %599, float %593, float %596, !dbg !66
  %601 = bitcast float %600 to i32, !dbg !61
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 1, i32 31), !dbg !61
  %603 = bitcast i32 %602 to float, !dbg !61
  %604 = fcmp ogt float %600, %603, !dbg !63
  %605 = fcmp uno float %600, 0.000000e+00, !dbg !64
  %606 = or i1 %604, %605, !dbg !65
  %607 = select i1 %606, i32 %601, i32 %602, !dbg !66
  %608 = insertelement <1 x i32> poison, i32 %607, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %608, i1 %492) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %609 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %496) #5, !dbg !61
  %610 = bitcast i32 %609 to float, !dbg !61
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 16, i32 31), !dbg !61
  %612 = bitcast i32 %611 to float, !dbg !61
  %613 = fcmp ogt float %610, %612, !dbg !63
  %614 = fcmp uno float %610, 0.000000e+00, !dbg !64
  %615 = or i1 %614, %613, !dbg !65
  %616 = select i1 %615, float %610, float %612, !dbg !66
  %617 = bitcast float %616 to i32, !dbg !61
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 8, i32 31), !dbg !61
  %619 = bitcast i32 %618 to float, !dbg !61
  %620 = fcmp ogt float %616, %619, !dbg !63
  %621 = fcmp uno float %616, 0.000000e+00, !dbg !64
  %622 = or i1 %620, %621, !dbg !65
  %623 = select i1 %622, float %616, float %619, !dbg !66
  %624 = bitcast float %623 to i32, !dbg !61
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 4, i32 31), !dbg !61
  %626 = bitcast i32 %625 to float, !dbg !61
  %627 = fcmp ogt float %623, %626, !dbg !63
  %628 = fcmp uno float %623, 0.000000e+00, !dbg !64
  %629 = or i1 %627, %628, !dbg !65
  %630 = select i1 %629, float %623, float %626, !dbg !66
  %631 = bitcast float %630 to i32, !dbg !61
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !61
  %633 = bitcast i32 %632 to float, !dbg !61
  %634 = fcmp ogt float %630, %633, !dbg !63
  %635 = fcmp uno float %630, 0.000000e+00, !dbg !64
  %636 = or i1 %634, %635, !dbg !65
  %637 = select i1 %636, float %630, float %633, !dbg !66
  %638 = bitcast float %637 to i32, !dbg !61
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 1, i32 31), !dbg !61
  %640 = bitcast i32 %639 to float, !dbg !61
  %641 = fcmp ogt float %637, %640, !dbg !63
  %642 = fcmp uno float %637, 0.000000e+00, !dbg !64
  %643 = or i1 %641, %642, !dbg !65
  %644 = select i1 %643, i32 %638, i32 %639, !dbg !66
  %645 = insertelement <1 x i32> poison, i32 %644, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %645, i1 %533) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %646 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !61
  %647 = sext i32 %9 to i64, !dbg !67
  %648 = getelementptr bfloat, ptr addrspace(1) %2, i64 %647, !dbg !67
  %649 = fptrunc float %536 to bfloat, !dbg !68
  %650 = and i32 %11, 1023, !dbg !68
  %651 = icmp eq i32 %650, 0, !dbg !68
  %652 = bitcast bfloat %649 to i16, !dbg !68
  %653 = and i1 %10, %651, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %652, ptr addrspace(1) %648, i1 %653) #5, !dbg !68
  %654 = getelementptr bfloat, ptr addrspace(1) %3, i64 %647, !dbg !69
  %655 = fptrunc float %646 to bfloat, !dbg !70
  %656 = bitcast bfloat %655 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %656, ptr addrspace(1) %654, i1 %653) #5, !dbg !70
  %.inv = fcmp oge float %536, 0.000000e+00, !dbg !71
  %657 = select i1 %.inv, float 0.000000e+00, float %536, !dbg !71
  %658 = fsub float 0.000000e+00, %657, !dbg !73
  %.inv2 = fcmp ole float %646, 0.000000e+00, !dbg !74
  %659 = select i1 %.inv2, float 0.000000e+00, float %646, !dbg !74
  %660 = fcmp ogt float %658, %659, !dbg !76
  %661 = fcmp uno float %658, 0.000000e+00, !dbg !78
  %662 = or i1 %661, %660, !dbg !79
  %663 = select i1 %662, float %658, float %659, !dbg !80
  %664 = fmul float %663, 0x3F80204080000000, !dbg !81
  %665 = fcmp ogt float %664, 0x3EE4F8B580000000, !dbg !82
  %666 = fcmp uno float %664, 0.000000e+00, !dbg !84
  %667 = or i1 %665, %666, !dbg !85
  %668 = select i1 %667, float %664, float 0x3EE4F8B580000000, !dbg !86
  %669 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %668), !dbg !87
  %670 = mul i32 %9, 15360, !dbg !88
  br label %671, !dbg !89

671:                                              ; preds = %419, %__nv_tanhf.exit135
  %672 = phi i1 [ true, %419 ], [ false, %__nv_tanhf.exit135 ]
  %indvars.iv304 = phi i64 [ 0, %419 ], [ 8192, %__nv_tanhf.exit135 ]
  %673 = or disjoint i64 %indvars.iv304, %20, !dbg !90
  %674 = icmp samesign ult i64 %673, 15360, !dbg !91
  %675 = icmp samesign ult i64 %673, 3072, !dbg !92
  %676 = trunc nuw nsw i64 %673 to i32, !dbg !93
  %677 = add i32 %16, %676, !dbg !93
  %678 = sext i32 %677 to i64, !dbg !94
  %679 = getelementptr bfloat, ptr addrspace(1) %0, i64 %678, !dbg !94
  %680 = and i1 %10, %674, !dbg !95
  %681 = and i1 %10, %675, !dbg !96
  %682 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %679, i1 %681) #5, !dbg !97
  %683 = extractvalue { i32, i32, i32, i32 } %682, 0, !dbg !97
  %684 = bitcast i32 %683 to <2 x bfloat>, !dbg !97
  %685 = extractvalue { i32, i32, i32, i32 } %682, 1, !dbg !97
  %686 = bitcast i32 %685 to <2 x bfloat>, !dbg !97
  %687 = extractvalue { i32, i32, i32, i32 } %682, 2, !dbg !97
  %688 = bitcast i32 %687 to <2 x bfloat>, !dbg !97
  %689 = extractvalue { i32, i32, i32, i32 } %682, 3, !dbg !97
  %690 = bitcast i32 %689 to <2 x bfloat>, !dbg !97
  %691 = extractelement <2 x bfloat> %684, i64 0, !dbg !97
  %692 = extractelement <2 x bfloat> %684, i64 1, !dbg !97
  %693 = extractelement <2 x bfloat> %686, i64 0, !dbg !97
  %694 = extractelement <2 x bfloat> %686, i64 1, !dbg !97
  %695 = extractelement <2 x bfloat> %688, i64 0, !dbg !97
  %696 = extractelement <2 x bfloat> %688, i64 1, !dbg !97
  %697 = extractelement <2 x bfloat> %690, i64 0, !dbg !97
  %698 = extractelement <2 x bfloat> %690, i64 1, !dbg !97
  %699 = fpext bfloat %691 to float, !dbg !98
  %700 = fpext bfloat %692 to float, !dbg !98
  %701 = fpext bfloat %693 to float, !dbg !98
  %702 = fpext bfloat %694 to float, !dbg !98
  %703 = fpext bfloat %695 to float, !dbg !98
  %704 = fpext bfloat %696 to float, !dbg !98
  %705 = fpext bfloat %697 to float, !dbg !98
  %706 = fpext bfloat %698 to float, !dbg !98
  %707 = icmp samesign ugt i64 %673, 3071, !dbg !99
  %708 = add i32 %18, %676, !dbg !100
  %709 = trunc nuw nsw i64 %indvars.iv304 to i32, !dbg !100
  %710 = add i32 %19, %709, !dbg !100
  %711 = sext i32 %708 to i64, !dbg !101
  %712 = getelementptr float, ptr addrspace(1) %1, i64 %711, !dbg !101
  %713 = sext i32 %710 to i64, !dbg !101
  %714 = getelementptr float, ptr addrspace(1) %1, i64 %713, !dbg !101
  %715 = and i1 %707, %680, !dbg !102
  %716 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %712, i1 %715) #5, !dbg !103
  %717 = extractvalue { i32, i32, i32, i32 } %716, 0, !dbg !103
  %718 = extractvalue { i32, i32, i32, i32 } %716, 1, !dbg !103
  %719 = extractvalue { i32, i32, i32, i32 } %716, 2, !dbg !103
  %720 = extractvalue { i32, i32, i32, i32 } %716, 3, !dbg !103
  %721 = bitcast i32 %717 to float, !dbg !103
  %722 = bitcast i32 %718 to float, !dbg !103
  %723 = bitcast i32 %719 to float, !dbg !103
  %724 = bitcast i32 %720 to float, !dbg !103
  %725 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %714, i1 %715) #5, !dbg !103
  %726 = extractvalue { i32, i32, i32, i32 } %725, 0, !dbg !103
  %727 = extractvalue { i32, i32, i32, i32 } %725, 1, !dbg !103
  %728 = extractvalue { i32, i32, i32, i32 } %725, 2, !dbg !103
  %729 = extractvalue { i32, i32, i32, i32 } %725, 3, !dbg !103
  %730 = bitcast i32 %726 to float, !dbg !103
  %731 = bitcast i32 %727 to float, !dbg !103
  %732 = bitcast i32 %728 to float, !dbg !103
  %733 = bitcast i32 %729 to float, !dbg !103
  %734 = fmul float %721, 5.000000e-01, !dbg !104
  %735 = fmul float %722, 5.000000e-01, !dbg !104
  %736 = fmul float %723, 5.000000e-01, !dbg !104
  %737 = fmul float %724, 5.000000e-01, !dbg !104
  %738 = fmul float %730, 5.000000e-01, !dbg !104
  %739 = fmul float %731, 5.000000e-01, !dbg !104
  %740 = fmul float %732, 5.000000e-01, !dbg !104
  %741 = fmul float %733, 5.000000e-01, !dbg !104
  %742 = fmul float %721, %721, !dbg !105
  %743 = fmul float %722, %722, !dbg !105
  %744 = fmul float %723, %723, !dbg !105
  %745 = fmul float %724, %724, !dbg !105
  %746 = fmul float %730, %730, !dbg !105
  %747 = fmul float %731, %731, !dbg !105
  %748 = fmul float %732, %732, !dbg !105
  %749 = fmul float %733, %733, !dbg !105
  %750 = fmul float %742, %721, !dbg !106
  %751 = fmul float %743, %722, !dbg !106
  %752 = fmul float %744, %723, !dbg !106
  %753 = fmul float %745, %724, !dbg !106
  %754 = fmul float %746, %730, !dbg !106
  %755 = fmul float %747, %731, !dbg !106
  %756 = fmul float %748, %732, !dbg !106
  %757 = fmul float %749, %733, !dbg !106
  %758 = fmul float %750, 0x3FA6E4E260000000, !dbg !107
  %759 = fmul float %751, 0x3FA6E4E260000000, !dbg !107
  %760 = fmul float %752, 0x3FA6E4E260000000, !dbg !107
  %761 = fmul float %753, 0x3FA6E4E260000000, !dbg !107
  %762 = fmul float %754, 0x3FA6E4E260000000, !dbg !107
  %763 = fmul float %755, 0x3FA6E4E260000000, !dbg !107
  %764 = fmul float %756, 0x3FA6E4E260000000, !dbg !107
  %765 = fmul float %757, 0x3FA6E4E260000000, !dbg !107
  %766 = fadd float %758, %721, !dbg !108
  %767 = fadd float %759, %722, !dbg !108
  %768 = fadd float %760, %723, !dbg !108
  %769 = fadd float %761, %724, !dbg !108
  %770 = fadd float %762, %730, !dbg !108
  %771 = fadd float %763, %731, !dbg !108
  %772 = fadd float %764, %732, !dbg !108
  %773 = fadd float %765, %733, !dbg !108
  %774 = fmul float %766, 0x3FE9884540000000, !dbg !109
  %775 = fmul float %767, 0x3FE9884540000000, !dbg !109
  %776 = fmul float %768, 0x3FE9884540000000, !dbg !109
  %777 = fmul float %769, 0x3FE9884540000000, !dbg !109
  %778 = fmul float %770, 0x3FE9884540000000, !dbg !109
  %779 = fmul float %771, 0x3FE9884540000000, !dbg !109
  %780 = fmul float %772, 0x3FE9884540000000, !dbg !109
  %781 = fmul float %773, 0x3FE9884540000000, !dbg !109
  %782 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i = icmp eq i32 %782, 0, !dbg !110
  %783 = tail call float @llvm.nvvm.fabs.ftz.f(float %774) #5, !dbg !110
  %784 = tail call float @llvm.nvvm.fabs.f(float %774) #5, !dbg !110
  %.01.i = select i1 %.not.i, float %784, float %783, !dbg !110
  %785 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !110
  br i1 %785, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !110

__internal_fmad.exit1.i:                          ; preds = %671
  %786 = fmul float %.01.i, 0x4007154760000000, !dbg !110
  %787 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %786) #5, !dbg !110
  %788 = fadd float %787, 1.000000e+00, !dbg !110
  %789 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %788) #6, !dbg !110, !srcloc !36
  %790 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i = icmp eq i32 %790, 0, !dbg !110
  %791 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %789, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %792 = tail call float @llvm.nvvm.fma.rn.f(float %789, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i = select i1 %.not6.i, float %792, float %791, !dbg !110
  %793 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !110
  %s.0.i = select i1 %793, float 1.000000e+00, float %.03.i, !dbg !110
  %794 = bitcast float %s.0.i to i32, !dbg !110
  %795 = bitcast float %774 to i32, !dbg !110
  %796 = and i32 %795, -2147483648, !dbg !110
  %797 = or i32 %796, %794, !dbg !110
  %798 = bitcast i32 %797 to float, !dbg !110
  br label %__nv_tanhf.exit, !dbg !110

__internal_fmad.exit3.i:                          ; preds = %671
  %799 = fmul float %774, %774, !dbg !110
  %800 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i = icmp eq i32 %800, 0, !dbg !110
  %801 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %799, float 0xBFAAC795C0000000) #5, !dbg !110
  %802 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %799, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i = select i1 %.not1.i, float %802, float %801, !dbg !110
  %803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i = icmp eq i32 %803, 0, !dbg !110
  %804 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %799, float 0x3FC10B2820000000) #5, !dbg !110
  %805 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %799, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i = select i1 %.not2.i, float %805, float %804, !dbg !110
  %806 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i = icmp eq i32 %806, 0, !dbg !110
  %807 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %799, float 0xBFD5553DA0000000) #5, !dbg !110
  %808 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %799, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i = select i1 %.not3.i, float %808, float %807, !dbg !110
  %809 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i = icmp eq i32 %809, 0, !dbg !110
  %810 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %799, float 0.000000e+00) #5, !dbg !110
  %811 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %799, float 0.000000e+00) #5, !dbg !110
  %.04.i = select i1 %.not4.i, float %811, float %810, !dbg !110
  %812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i = icmp eq i32 %812, 0, !dbg !110
  %813 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %774, float %774) #5, !dbg !110
  %814 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %774, float %774) #5, !dbg !110
  %.02.i = select i1 %.not5.i, float %814, float %813, !dbg !110
  br label %__nv_tanhf.exit, !dbg !110

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %798, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !110
  %815 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i3 = icmp eq i32 %815, 0, !dbg !110
  %816 = tail call float @llvm.nvvm.fabs.ftz.f(float %775) #5, !dbg !110
  %817 = tail call float @llvm.nvvm.fabs.f(float %775) #5, !dbg !110
  %.01.i4 = select i1 %.not.i3, float %817, float %816, !dbg !110
  %818 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !110
  br i1 %818, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !110

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %819 = fmul float %.01.i4, 0x4007154760000000, !dbg !110
  %820 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %819) #5, !dbg !110
  %821 = fadd float %820, 1.000000e+00, !dbg !110
  %822 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %821) #6, !dbg !110, !srcloc !36
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i6 = icmp eq i32 %823, 0, !dbg !110
  %824 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %822, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %825 = tail call float @llvm.nvvm.fma.rn.f(float %822, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i7 = select i1 %.not6.i6, float %825, float %824, !dbg !110
  %826 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !110
  %s.0.i8 = select i1 %826, float 1.000000e+00, float %.03.i7, !dbg !110
  %827 = bitcast float %s.0.i8 to i32, !dbg !110
  %828 = bitcast float %775 to i32, !dbg !110
  %829 = and i32 %828, -2147483648, !dbg !110
  %830 = or i32 %829, %827, !dbg !110
  %831 = bitcast i32 %830 to float, !dbg !110
  br label %__nv_tanhf.exit21, !dbg !110

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %832 = fmul float %775, %775, !dbg !110
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i11 = icmp eq i32 %833, 0, !dbg !110
  %834 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %832, float 0xBFAAC795C0000000) #5, !dbg !110
  %835 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %832, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i12 = select i1 %.not1.i11, float %835, float %834, !dbg !110
  %836 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i13 = icmp eq i32 %836, 0, !dbg !110
  %837 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %832, float 0x3FC10B2820000000) #5, !dbg !110
  %838 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %832, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i14 = select i1 %.not2.i13, float %838, float %837, !dbg !110
  %839 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i15 = icmp eq i32 %839, 0, !dbg !110
  %840 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %832, float 0xBFD5553DA0000000) #5, !dbg !110
  %841 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %832, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i16 = select i1 %.not3.i15, float %841, float %840, !dbg !110
  %842 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i17 = icmp eq i32 %842, 0, !dbg !110
  %843 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %832, float 0.000000e+00) #5, !dbg !110
  %844 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %832, float 0.000000e+00) #5, !dbg !110
  %.04.i18 = select i1 %.not4.i17, float %844, float %843, !dbg !110
  %845 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i19 = icmp eq i32 %845, 0, !dbg !110
  %846 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %775, float %775) #5, !dbg !110
  %847 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %775, float %775) #5, !dbg !110
  %.02.i20 = select i1 %.not5.i19, float %847, float %846, !dbg !110
  br label %__nv_tanhf.exit21, !dbg !110

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %831, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !110
  %848 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i22 = icmp eq i32 %848, 0, !dbg !110
  %849 = tail call float @llvm.nvvm.fabs.ftz.f(float %776) #5, !dbg !110
  %850 = tail call float @llvm.nvvm.fabs.f(float %776) #5, !dbg !110
  %.01.i23 = select i1 %.not.i22, float %850, float %849, !dbg !110
  %851 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !110
  br i1 %851, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !110

__internal_fmad.exit1.i24:                        ; preds = %__nv_tanhf.exit21
  %852 = fmul float %.01.i23, 0x4007154760000000, !dbg !110
  %853 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %852) #5, !dbg !110
  %854 = fadd float %853, 1.000000e+00, !dbg !110
  %855 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %854) #6, !dbg !110, !srcloc !36
  %856 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i25 = icmp eq i32 %856, 0, !dbg !110
  %857 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %855, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %858 = tail call float @llvm.nvvm.fma.rn.f(float %855, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i26 = select i1 %.not6.i25, float %858, float %857, !dbg !110
  %859 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !110
  %s.0.i27 = select i1 %859, float 1.000000e+00, float %.03.i26, !dbg !110
  %860 = bitcast float %s.0.i27 to i32, !dbg !110
  %861 = bitcast float %776 to i32, !dbg !110
  %862 = and i32 %861, -2147483648, !dbg !110
  %863 = or i32 %862, %860, !dbg !110
  %864 = bitcast i32 %863 to float, !dbg !110
  br label %__nv_tanhf.exit40, !dbg !110

__internal_fmad.exit3.i29:                        ; preds = %__nv_tanhf.exit21
  %865 = fmul float %776, %776, !dbg !110
  %866 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i30 = icmp eq i32 %866, 0, !dbg !110
  %867 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %865, float 0xBFAAC795C0000000) #5, !dbg !110
  %868 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %865, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i31 = select i1 %.not1.i30, float %868, float %867, !dbg !110
  %869 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i32 = icmp eq i32 %869, 0, !dbg !110
  %870 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %865, float 0x3FC10B2820000000) #5, !dbg !110
  %871 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %865, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i33 = select i1 %.not2.i32, float %871, float %870, !dbg !110
  %872 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i34 = icmp eq i32 %872, 0, !dbg !110
  %873 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %865, float 0xBFD5553DA0000000) #5, !dbg !110
  %874 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %865, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i35 = select i1 %.not3.i34, float %874, float %873, !dbg !110
  %875 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i36 = icmp eq i32 %875, 0, !dbg !110
  %876 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %865, float 0.000000e+00) #5, !dbg !110
  %877 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %865, float 0.000000e+00) #5, !dbg !110
  %.04.i37 = select i1 %.not4.i36, float %877, float %876, !dbg !110
  %878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i38 = icmp eq i32 %878, 0, !dbg !110
  %879 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %776, float %776) #5, !dbg !110
  %880 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %776, float %776) #5, !dbg !110
  %.02.i39 = select i1 %.not5.i38, float %880, float %879, !dbg !110
  br label %__nv_tanhf.exit40, !dbg !110

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %864, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !110
  %881 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i41 = icmp eq i32 %881, 0, !dbg !110
  %882 = tail call float @llvm.nvvm.fabs.ftz.f(float %777) #5, !dbg !110
  %883 = tail call float @llvm.nvvm.fabs.f(float %777) #5, !dbg !110
  %.01.i42 = select i1 %.not.i41, float %883, float %882, !dbg !110
  %884 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !110
  br i1 %884, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !110

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %885 = fmul float %.01.i42, 0x4007154760000000, !dbg !110
  %886 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %885) #5, !dbg !110
  %887 = fadd float %886, 1.000000e+00, !dbg !110
  %888 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %887) #6, !dbg !110, !srcloc !36
  %889 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i44 = icmp eq i32 %889, 0, !dbg !110
  %890 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %888, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %891 = tail call float @llvm.nvvm.fma.rn.f(float %888, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i45 = select i1 %.not6.i44, float %891, float %890, !dbg !110
  %892 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !110
  %s.0.i46 = select i1 %892, float 1.000000e+00, float %.03.i45, !dbg !110
  %893 = bitcast float %s.0.i46 to i32, !dbg !110
  %894 = bitcast float %777 to i32, !dbg !110
  %895 = and i32 %894, -2147483648, !dbg !110
  %896 = or i32 %895, %893, !dbg !110
  %897 = bitcast i32 %896 to float, !dbg !110
  br label %__nv_tanhf.exit59, !dbg !110

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %898 = fmul float %777, %777, !dbg !110
  %899 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i49 = icmp eq i32 %899, 0, !dbg !110
  %900 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %898, float 0xBFAAC795C0000000) #5, !dbg !110
  %901 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %898, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i50 = select i1 %.not1.i49, float %901, float %900, !dbg !110
  %902 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i51 = icmp eq i32 %902, 0, !dbg !110
  %903 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %898, float 0x3FC10B2820000000) #5, !dbg !110
  %904 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %898, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i52 = select i1 %.not2.i51, float %904, float %903, !dbg !110
  %905 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i53 = icmp eq i32 %905, 0, !dbg !110
  %906 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %898, float 0xBFD5553DA0000000) #5, !dbg !110
  %907 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %898, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i54 = select i1 %.not3.i53, float %907, float %906, !dbg !110
  %908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i55 = icmp eq i32 %908, 0, !dbg !110
  %909 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %898, float 0.000000e+00) #5, !dbg !110
  %910 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %898, float 0.000000e+00) #5, !dbg !110
  %.04.i56 = select i1 %.not4.i55, float %910, float %909, !dbg !110
  %911 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i57 = icmp eq i32 %911, 0, !dbg !110
  %912 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %777, float %777) #5, !dbg !110
  %913 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %777, float %777) #5, !dbg !110
  %.02.i58 = select i1 %.not5.i57, float %913, float %912, !dbg !110
  br label %__nv_tanhf.exit59, !dbg !110

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %897, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !110
  %914 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i60 = icmp eq i32 %914, 0, !dbg !110
  %915 = tail call float @llvm.nvvm.fabs.ftz.f(float %778) #5, !dbg !110
  %916 = tail call float @llvm.nvvm.fabs.f(float %778) #5, !dbg !110
  %.01.i61 = select i1 %.not.i60, float %916, float %915, !dbg !110
  %917 = fcmp ult float %.01.i61, 0x3FE3333340000000, !dbg !110
  br i1 %917, label %__internal_fmad.exit3.i67, label %__internal_fmad.exit1.i62, !dbg !110

__internal_fmad.exit1.i62:                        ; preds = %__nv_tanhf.exit59
  %918 = fmul float %.01.i61, 0x4007154760000000, !dbg !110
  %919 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %918) #5, !dbg !110
  %920 = fadd float %919, 1.000000e+00, !dbg !110
  %921 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %920) #6, !dbg !110, !srcloc !36
  %922 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i63 = icmp eq i32 %922, 0, !dbg !110
  %923 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %921, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %924 = tail call float @llvm.nvvm.fma.rn.f(float %921, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i64 = select i1 %.not6.i63, float %924, float %923, !dbg !110
  %925 = fcmp oge float %.01.i61, 0x4022059680000000, !dbg !110
  %s.0.i65 = select i1 %925, float 1.000000e+00, float %.03.i64, !dbg !110
  %926 = bitcast float %s.0.i65 to i32, !dbg !110
  %927 = bitcast float %778 to i32, !dbg !110
  %928 = and i32 %927, -2147483648, !dbg !110
  %929 = or i32 %928, %926, !dbg !110
  %930 = bitcast i32 %929 to float, !dbg !110
  br label %__nv_tanhf.exit78, !dbg !110

__internal_fmad.exit3.i67:                        ; preds = %__nv_tanhf.exit59
  %931 = fmul float %778, %778, !dbg !110
  %932 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i68 = icmp eq i32 %932, 0, !dbg !110
  %933 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %931, float 0xBFAAC795C0000000) #5, !dbg !110
  %934 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %931, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i69 = select i1 %.not1.i68, float %934, float %933, !dbg !110
  %935 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i70 = icmp eq i32 %935, 0, !dbg !110
  %936 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i69, float %931, float 0x3FC10B2820000000) #5, !dbg !110
  %937 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i69, float %931, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i71 = select i1 %.not2.i70, float %937, float %936, !dbg !110
  %938 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i72 = icmp eq i32 %938, 0, !dbg !110
  %939 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i71, float %931, float 0xBFD5553DA0000000) #5, !dbg !110
  %940 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i71, float %931, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i73 = select i1 %.not3.i72, float %940, float %939, !dbg !110
  %941 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i74 = icmp eq i32 %941, 0, !dbg !110
  %942 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i73, float %931, float 0.000000e+00) #5, !dbg !110
  %943 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i73, float %931, float 0.000000e+00) #5, !dbg !110
  %.04.i75 = select i1 %.not4.i74, float %943, float %942, !dbg !110
  %944 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i76 = icmp eq i32 %944, 0, !dbg !110
  %945 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i75, float %778, float %778) #5, !dbg !110
  %946 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i75, float %778, float %778) #5, !dbg !110
  %.02.i77 = select i1 %.not5.i76, float %946, float %945, !dbg !110
  br label %__nv_tanhf.exit78, !dbg !110

__nv_tanhf.exit78:                                ; preds = %__internal_fmad.exit1.i62, %__internal_fmad.exit3.i67
  %s.1.i66 = phi float [ %930, %__internal_fmad.exit1.i62 ], [ %.02.i77, %__internal_fmad.exit3.i67 ], !dbg !110
  %947 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i79 = icmp eq i32 %947, 0, !dbg !110
  %948 = tail call float @llvm.nvvm.fabs.ftz.f(float %779) #5, !dbg !110
  %949 = tail call float @llvm.nvvm.fabs.f(float %779) #5, !dbg !110
  %.01.i80 = select i1 %.not.i79, float %949, float %948, !dbg !110
  %950 = fcmp ult float %.01.i80, 0x3FE3333340000000, !dbg !110
  br i1 %950, label %__internal_fmad.exit3.i86, label %__internal_fmad.exit1.i81, !dbg !110

__internal_fmad.exit1.i81:                        ; preds = %__nv_tanhf.exit78
  %951 = fmul float %.01.i80, 0x4007154760000000, !dbg !110
  %952 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %951) #5, !dbg !110
  %953 = fadd float %952, 1.000000e+00, !dbg !110
  %954 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %953) #6, !dbg !110, !srcloc !36
  %955 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i82 = icmp eq i32 %955, 0, !dbg !110
  %956 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %954, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %957 = tail call float @llvm.nvvm.fma.rn.f(float %954, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i83 = select i1 %.not6.i82, float %957, float %956, !dbg !110
  %958 = fcmp oge float %.01.i80, 0x4022059680000000, !dbg !110
  %s.0.i84 = select i1 %958, float 1.000000e+00, float %.03.i83, !dbg !110
  %959 = bitcast float %s.0.i84 to i32, !dbg !110
  %960 = bitcast float %779 to i32, !dbg !110
  %961 = and i32 %960, -2147483648, !dbg !110
  %962 = or i32 %961, %959, !dbg !110
  %963 = bitcast i32 %962 to float, !dbg !110
  br label %__nv_tanhf.exit97, !dbg !110

__internal_fmad.exit3.i86:                        ; preds = %__nv_tanhf.exit78
  %964 = fmul float %779, %779, !dbg !110
  %965 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i87 = icmp eq i32 %965, 0, !dbg !110
  %966 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %964, float 0xBFAAC795C0000000) #5, !dbg !110
  %967 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %964, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i88 = select i1 %.not1.i87, float %967, float %966, !dbg !110
  %968 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i89 = icmp eq i32 %968, 0, !dbg !110
  %969 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i88, float %964, float 0x3FC10B2820000000) #5, !dbg !110
  %970 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i88, float %964, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i90 = select i1 %.not2.i89, float %970, float %969, !dbg !110
  %971 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i91 = icmp eq i32 %971, 0, !dbg !110
  %972 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i90, float %964, float 0xBFD5553DA0000000) #5, !dbg !110
  %973 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i90, float %964, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i92 = select i1 %.not3.i91, float %973, float %972, !dbg !110
  %974 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i93 = icmp eq i32 %974, 0, !dbg !110
  %975 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i92, float %964, float 0.000000e+00) #5, !dbg !110
  %976 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i92, float %964, float 0.000000e+00) #5, !dbg !110
  %.04.i94 = select i1 %.not4.i93, float %976, float %975, !dbg !110
  %977 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i95 = icmp eq i32 %977, 0, !dbg !110
  %978 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i94, float %779, float %779) #5, !dbg !110
  %979 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i94, float %779, float %779) #5, !dbg !110
  %.02.i96 = select i1 %.not5.i95, float %979, float %978, !dbg !110
  br label %__nv_tanhf.exit97, !dbg !110

__nv_tanhf.exit97:                                ; preds = %__internal_fmad.exit1.i81, %__internal_fmad.exit3.i86
  %s.1.i85 = phi float [ %963, %__internal_fmad.exit1.i81 ], [ %.02.i96, %__internal_fmad.exit3.i86 ], !dbg !110
  %980 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i98 = icmp eq i32 %980, 0, !dbg !110
  %981 = tail call float @llvm.nvvm.fabs.ftz.f(float %780) #5, !dbg !110
  %982 = tail call float @llvm.nvvm.fabs.f(float %780) #5, !dbg !110
  %.01.i99 = select i1 %.not.i98, float %982, float %981, !dbg !110
  %983 = fcmp ult float %.01.i99, 0x3FE3333340000000, !dbg !110
  br i1 %983, label %__internal_fmad.exit3.i105, label %__internal_fmad.exit1.i100, !dbg !110

__internal_fmad.exit1.i100:                       ; preds = %__nv_tanhf.exit97
  %984 = fmul float %.01.i99, 0x4007154760000000, !dbg !110
  %985 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %984) #5, !dbg !110
  %986 = fadd float %985, 1.000000e+00, !dbg !110
  %987 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %986) #6, !dbg !110, !srcloc !36
  %988 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i101 = icmp eq i32 %988, 0, !dbg !110
  %989 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %987, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %990 = tail call float @llvm.nvvm.fma.rn.f(float %987, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i102 = select i1 %.not6.i101, float %990, float %989, !dbg !110
  %991 = fcmp oge float %.01.i99, 0x4022059680000000, !dbg !110
  %s.0.i103 = select i1 %991, float 1.000000e+00, float %.03.i102, !dbg !110
  %992 = bitcast float %s.0.i103 to i32, !dbg !110
  %993 = bitcast float %780 to i32, !dbg !110
  %994 = and i32 %993, -2147483648, !dbg !110
  %995 = or i32 %994, %992, !dbg !110
  %996 = bitcast i32 %995 to float, !dbg !110
  br label %__nv_tanhf.exit116, !dbg !110

__internal_fmad.exit3.i105:                       ; preds = %__nv_tanhf.exit97
  %997 = fmul float %780, %780, !dbg !110
  %998 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i106 = icmp eq i32 %998, 0, !dbg !110
  %999 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %997, float 0xBFAAC795C0000000) #5, !dbg !110
  %1000 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %997, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i107 = select i1 %.not1.i106, float %1000, float %999, !dbg !110
  %1001 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i108 = icmp eq i32 %1001, 0, !dbg !110
  %1002 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i107, float %997, float 0x3FC10B2820000000) #5, !dbg !110
  %1003 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i107, float %997, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i109 = select i1 %.not2.i108, float %1003, float %1002, !dbg !110
  %1004 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i110 = icmp eq i32 %1004, 0, !dbg !110
  %1005 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %997, float 0xBFD5553DA0000000) #5, !dbg !110
  %1006 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %997, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i111 = select i1 %.not3.i110, float %1006, float %1005, !dbg !110
  %1007 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i112 = icmp eq i32 %1007, 0, !dbg !110
  %1008 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i111, float %997, float 0.000000e+00) #5, !dbg !110
  %1009 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i111, float %997, float 0.000000e+00) #5, !dbg !110
  %.04.i113 = select i1 %.not4.i112, float %1009, float %1008, !dbg !110
  %1010 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i114 = icmp eq i32 %1010, 0, !dbg !110
  %1011 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i113, float %780, float %780) #5, !dbg !110
  %1012 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i113, float %780, float %780) #5, !dbg !110
  %.02.i115 = select i1 %.not5.i114, float %1012, float %1011, !dbg !110
  br label %__nv_tanhf.exit116, !dbg !110

__nv_tanhf.exit116:                               ; preds = %__internal_fmad.exit1.i100, %__internal_fmad.exit3.i105
  %s.1.i104 = phi float [ %996, %__internal_fmad.exit1.i100 ], [ %.02.i115, %__internal_fmad.exit3.i105 ], !dbg !110
  %1013 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i117 = icmp eq i32 %1013, 0, !dbg !110
  %1014 = tail call float @llvm.nvvm.fabs.ftz.f(float %781) #5, !dbg !110
  %1015 = tail call float @llvm.nvvm.fabs.f(float %781) #5, !dbg !110
  %.01.i118 = select i1 %.not.i117, float %1015, float %1014, !dbg !110
  %1016 = fcmp ult float %.01.i118, 0x3FE3333340000000, !dbg !110
  br i1 %1016, label %__internal_fmad.exit3.i124, label %__internal_fmad.exit1.i119, !dbg !110

__internal_fmad.exit1.i119:                       ; preds = %__nv_tanhf.exit116
  %1017 = fmul float %.01.i118, 0x4007154760000000, !dbg !110
  %1018 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1017) #5, !dbg !110
  %1019 = fadd float %1018, 1.000000e+00, !dbg !110
  %1020 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1019) #6, !dbg !110, !srcloc !36
  %1021 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i120 = icmp eq i32 %1021, 0, !dbg !110
  %1022 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1020, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %1023 = tail call float @llvm.nvvm.fma.rn.f(float %1020, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i121 = select i1 %.not6.i120, float %1023, float %1022, !dbg !110
  %1024 = fcmp oge float %.01.i118, 0x4022059680000000, !dbg !110
  %s.0.i122 = select i1 %1024, float 1.000000e+00, float %.03.i121, !dbg !110
  %1025 = bitcast float %s.0.i122 to i32, !dbg !110
  %1026 = bitcast float %781 to i32, !dbg !110
  %1027 = and i32 %1026, -2147483648, !dbg !110
  %1028 = or i32 %1027, %1025, !dbg !110
  %1029 = bitcast i32 %1028 to float, !dbg !110
  br label %__nv_tanhf.exit135, !dbg !110

__internal_fmad.exit3.i124:                       ; preds = %__nv_tanhf.exit116
  %1030 = fmul float %781, %781, !dbg !110
  %1031 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i125 = icmp eq i32 %1031, 0, !dbg !110
  %1032 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1030, float 0xBFAAC795C0000000) #5, !dbg !110
  %1033 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1030, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i126 = select i1 %.not1.i125, float %1033, float %1032, !dbg !110
  %1034 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i127 = icmp eq i32 %1034, 0, !dbg !110
  %1035 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i126, float %1030, float 0x3FC10B2820000000) #5, !dbg !110
  %1036 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i126, float %1030, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i128 = select i1 %.not2.i127, float %1036, float %1035, !dbg !110
  %1037 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i129 = icmp eq i32 %1037, 0, !dbg !110
  %1038 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i128, float %1030, float 0xBFD5553DA0000000) #5, !dbg !110
  %1039 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i128, float %1030, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i130 = select i1 %.not3.i129, float %1039, float %1038, !dbg !110
  %1040 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i131 = icmp eq i32 %1040, 0, !dbg !110
  %1041 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i130, float %1030, float 0.000000e+00) #5, !dbg !110
  %1042 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i130, float %1030, float 0.000000e+00) #5, !dbg !110
  %.04.i132 = select i1 %.not4.i131, float %1042, float %1041, !dbg !110
  %1043 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i133 = icmp eq i32 %1043, 0, !dbg !110
  %1044 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i132, float %781, float %781) #5, !dbg !110
  %1045 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i132, float %781, float %781) #5, !dbg !110
  %.02.i134 = select i1 %.not5.i133, float %1045, float %1044, !dbg !110
  br label %__nv_tanhf.exit135, !dbg !110

__nv_tanhf.exit135:                               ; preds = %__internal_fmad.exit1.i119, %__internal_fmad.exit3.i124
  %s.1.i123 = phi float [ %1029, %__internal_fmad.exit1.i119 ], [ %.02.i134, %__internal_fmad.exit3.i124 ], !dbg !110
  %1046 = fadd float %s.1.i, 1.000000e+00, !dbg !111
  %1047 = fadd float %s.1.i9, 1.000000e+00, !dbg !111
  %1048 = fadd float %s.1.i28, 1.000000e+00, !dbg !111
  %1049 = fadd float %s.1.i47, 1.000000e+00, !dbg !111
  %1050 = fadd float %s.1.i66, 1.000000e+00, !dbg !111
  %1051 = fadd float %s.1.i85, 1.000000e+00, !dbg !111
  %1052 = fadd float %s.1.i104, 1.000000e+00, !dbg !111
  %1053 = fadd float %s.1.i123, 1.000000e+00, !dbg !111
  %1054 = fmul float %734, %1046, !dbg !112
  %1055 = fmul float %735, %1047, !dbg !112
  %1056 = fmul float %736, %1048, !dbg !112
  %1057 = fmul float %737, %1049, !dbg !112
  %1058 = fmul float %738, %1050, !dbg !112
  %1059 = fmul float %739, %1051, !dbg !112
  %1060 = fmul float %740, %1052, !dbg !112
  %1061 = fmul float %741, %1053, !dbg !112
  %1062 = select i1 %675, float %699, float %1054, !dbg !113
  %1063 = select i1 %675, float %700, float %1055, !dbg !113
  %1064 = select i1 %675, float %701, float %1056, !dbg !113
  %1065 = select i1 %675, float %702, float %1057, !dbg !113
  %1066 = select i1 %675, float %703, float %1058, !dbg !113
  %1067 = select i1 %675, float %704, float %1059, !dbg !113
  %1068 = select i1 %675, float %705, float %1060, !dbg !113
  %1069 = select i1 %675, float %706, float %1061, !dbg !113
  %1070 = fmul float %669, %1062, !dbg !114
  %1071 = fmul float %669, %1063, !dbg !114
  %1072 = fmul float %669, %1064, !dbg !114
  %1073 = fmul float %669, %1065, !dbg !114
  %1074 = fmul float %669, %1066, !dbg !114
  %1075 = fmul float %669, %1067, !dbg !114
  %1076 = fmul float %669, %1068, !dbg !114
  %1077 = fmul float %669, %1069, !dbg !114
  %1078 = tail call float @llvm.nvvm.round.f(float %1070) #5, !dbg !115
  %1079 = tail call float @llvm.nvvm.round.f(float %1071) #5, !dbg !115
  %1080 = tail call float @llvm.nvvm.round.f(float %1072) #5, !dbg !115
  %1081 = tail call float @llvm.nvvm.round.f(float %1073) #5, !dbg !115
  %1082 = tail call float @llvm.nvvm.round.f(float %1074) #5, !dbg !115
  %1083 = tail call float @llvm.nvvm.round.f(float %1075) #5, !dbg !115
  %1084 = tail call float @llvm.nvvm.round.f(float %1076) #5, !dbg !115
  %1085 = tail call float @llvm.nvvm.round.f(float %1077) #5, !dbg !115
  %1086 = insertelement <4 x float> poison, float %1078, i64 0, !dbg !116
  %1087 = insertelement <4 x float> %1086, float %1079, i64 1, !dbg !116
  %1088 = insertelement <4 x float> %1087, float %1080, i64 2, !dbg !116
  %1089 = insertelement <4 x float> %1088, float %1081, i64 3, !dbg !116
  %1090 = fcmp ogt <4 x float> %1089, splat (float -1.270000e+02), !dbg !116
  %1091 = fcmp uno <4 x float> %1089, zeroinitializer, !dbg !118
  %1092 = or <4 x i1> %1090, %1091, !dbg !119
  %1093 = select <4 x i1> %1092, <4 x float> %1089, <4 x float> splat (float -1.270000e+02), !dbg !120
  %1094 = fcmp olt <4 x float> %1093, splat (float 1.270000e+02), !dbg !121
  %1095 = fcmp uno <4 x float> %1093, zeroinitializer, !dbg !123
  %1096 = or <4 x i1> %1094, %1095, !dbg !124
  %1097 = fptosi <4 x float> %1093 to <4 x i8>, !dbg !125
  %1098 = select <4 x i1> %1096, <4 x i8> %1097, <4 x i8> splat (i8 127), !dbg !126
  %1099 = insertelement <4 x float> poison, float %1082, i64 0, !dbg !116
  %1100 = insertelement <4 x float> %1099, float %1083, i64 1, !dbg !116
  %1101 = insertelement <4 x float> %1100, float %1084, i64 2, !dbg !116
  %1102 = insertelement <4 x float> %1101, float %1085, i64 3, !dbg !116
  %1103 = fcmp ogt <4 x float> %1102, splat (float -1.270000e+02), !dbg !116
  %1104 = fcmp uno <4 x float> %1102, zeroinitializer, !dbg !118
  %1105 = or <4 x i1> %1103, %1104, !dbg !119
  %1106 = select <4 x i1> %1105, <4 x float> %1102, <4 x float> splat (float -1.270000e+02), !dbg !120
  %1107 = fcmp olt <4 x float> %1106, splat (float 1.270000e+02), !dbg !121
  %1108 = fcmp uno <4 x float> %1106, zeroinitializer, !dbg !123
  %1109 = or <4 x i1> %1107, %1108, !dbg !124
  %1110 = fptosi <4 x float> %1106 to <4 x i8>, !dbg !125
  %1111 = select <4 x i1> %1109, <4 x i8> %1110, <4 x i8> splat (i8 127), !dbg !126
  %1112 = add i32 %670, %676, !dbg !127
  %1113 = sext i32 %1112 to i64, !dbg !128
  %1114 = getelementptr i8, ptr addrspace(1) %4, i64 %1113, !dbg !128
  %1115 = bitcast <4 x i8> %1098 to i32, !dbg !129
  %1116 = bitcast <4 x i8> %1111 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1115, i32 %1116, ptr addrspace(1) %1114, i1 %680) #5, !dbg !129
  br i1 %672, label %671, label %1117, !dbg !89

1117:                                             ; preds = %__nv_tanhf.exit135
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 42, column: 39, scope: !6)
!13 = !DILocation(line: 46, column: 40, scope: !6)
!14 = !DILocation(line: 31, column: 40, scope: !6)
!15 = !DILocation(line: 32, column: 31, scope: !6)
!16 = !DILocation(line: 33, column: 29, scope: !6)
!17 = !DILocation(line: 41, column: 22, scope: !6)
!18 = !DILocation(line: 42, column: 45, scope: !6)
!19 = !DILocation(line: 42, column: 34, scope: !6)
!20 = !DILocation(line: 42, column: 63, scope: !6)
!21 = !DILocation(line: 42, column: 71, scope: !6)
!22 = !DILocation(line: 42, column: 53, scope: !6)
!23 = !DILocation(line: 42, column: 121, scope: !6)
!24 = !DILocation(line: 43, column: 23, scope: !6)
!25 = !DILocation(line: 46, column: 46, scope: !6)
!26 = !DILocation(line: 46, column: 34, scope: !6)
!27 = !DILocation(line: 46, column: 82, scope: !6)
!28 = !DILocation(line: 46, column: 64, scope: !6)
!29 = !DILocation(line: 48, column: 23, scope: !6)
!30 = !DILocation(line: 49, column: 23, scope: !6)
!31 = !DILocation(line: 50, column: 24, scope: !6)
!32 = !DILocation(line: 52, column: 24, scope: !6)
!33 = !DILocation(line: 53, column: 23, scope: !6)
!34 = !DILocation(line: 55, column: 24, scope: !6)
!35 = !DILocation(line: 56, column: 31, scope: !6)
!36 = !{i32 21046}
!37 = !DILocation(line: 58, column: 24, scope: !6)
!38 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !6, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 65, column: 47, scope: !6)
!42 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 67, column: 47, scope: !6)
!44 = !DILocation(line: 59, column: 24, scope: !6)
!45 = !DILocation(line: 63, column: 37, scope: !6)
!46 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 66, column: 50, scope: !6)
!50 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !43)
!51 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !43)
!52 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !43)
!53 = !DILocation(line: 68, column: 50, scope: !6)
!54 = !DILocation(line: 94, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!56 = !DILocation(line: 69, column: 40, scope: !6)
!57 = !DILocation(line: 96, column: 21, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 96, column: 16, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 97, column: 29, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 110, column: 29, scope: !39, inlinedAt: !56)
!61 = !DILocation(line: 115, column: 29, scope: !39, inlinedAt: !62)
!62 = !DILocation(line: 70, column: 40, scope: !6)
!63 = !DILocation(line: 102, column: 15, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 21, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 104, column: 16, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 105, column: 29, scope: !55, inlinedAt: !62)
!67 = !DILocation(line: 71, column: 25, scope: !6)
!68 = !DILocation(line: 71, column: 37, scope: !6)
!69 = !DILocation(line: 72, column: 25, scope: !6)
!70 = !DILocation(line: 72, column: 37, scope: !6)
!71 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !72)
!72 = !DILocation(line: 107, column: 46, scope: !6)
!73 = !DILocation(line: 108, column: 17, scope: !6)
!74 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !75)
!75 = !DILocation(line: 109, column: 46, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !77)
!77 = !DILocation(line: 110, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !77)
!81 = !DILocation(line: 112, column: 24, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !83)
!83 = !DILocation(line: 115, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 25, scope: !6)
!88 = !DILocation(line: 130, column: 42, scope: !6)
!89 = !DILocation(line: 73, column: 40, scope: !6)
!90 = !DILocation(line: 74, column: 31, scope: !6)
!91 = !DILocation(line: 75, column: 29, scope: !6)
!92 = !DILocation(line: 83, column: 24, scope: !6)
!93 = !DILocation(line: 84, column: 46, scope: !6)
!94 = !DILocation(line: 84, column: 35, scope: !6)
!95 = !DILocation(line: 84, column: 64, scope: !6)
!96 = !DILocation(line: 84, column: 72, scope: !6)
!97 = !DILocation(line: 84, column: 54, scope: !6)
!98 = !DILocation(line: 84, column: 123, scope: !6)
!99 = !DILocation(line: 85, column: 25, scope: !6)
!100 = !DILocation(line: 88, column: 47, scope: !6)
!101 = !DILocation(line: 88, column: 35, scope: !6)
!102 = !DILocation(line: 88, column: 83, scope: !6)
!103 = !DILocation(line: 88, column: 65, scope: !6)
!104 = !DILocation(line: 90, column: 24, scope: !6)
!105 = !DILocation(line: 91, column: 24, scope: !6)
!106 = !DILocation(line: 92, column: 24, scope: !6)
!107 = !DILocation(line: 94, column: 24, scope: !6)
!108 = !DILocation(line: 95, column: 24, scope: !6)
!109 = !DILocation(line: 97, column: 24, scope: !6)
!110 = !DILocation(line: 98, column: 31, scope: !6)
!111 = !DILocation(line: 100, column: 24, scope: !6)
!112 = !DILocation(line: 101, column: 24, scope: !6)
!113 = !DILocation(line: 105, column: 39, scope: !6)
!114 = !DILocation(line: 121, column: 24, scope: !6)
!115 = !DILocation(line: 122, column: 36, scope: !6)
!116 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !117)
!117 = !DILocation(line: 125, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !117)
!119 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !117)
!120 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !117)
!121 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !122)
!122 = !DILocation(line: 127, column: 46, scope: !6)
!123 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !122)
!124 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !122)
!125 = !DILocation(line: 129, column: 25, scope: !6)
!126 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !122)
!127 = !DILocation(line: 130, column: 36, scope: !6)
!128 = !DILocation(line: 130, column: 29, scope: !6)
!129 = !DILocation(line: 130, column: 54, scope: !6)
!130 = !DILocation(line: 73, column: 4, scope: !6)
