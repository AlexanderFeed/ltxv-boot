; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 5, !dbg !11
  %20 = and i32 %18, 256, !dbg !11
  %.lobit = lshr exact i32 %20, 8, !dbg !11
  %21 = and i32 %18, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %17, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %17, 512, !dbg !13
  %25 = shl i32 %18, 3, !dbg !14
  %26 = and i32 %25, 4088, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = shl i32 %18, 4, !dbg !14
  %29 = and i32 %28, 4080, !dbg !14
  %30 = or disjoint i32 %29, 4, !dbg !14
  %31 = or disjoint i32 %29, 8, !dbg !14
  %32 = or disjoint i32 %29, 12, !dbg !14
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %51 = bitcast i16 %50 to bfloat, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !17
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = icmp samesign ult i32 %26, 3072, !dbg !19
  %71 = icmp samesign ult i32 %29, 3072, !dbg !19
  %72 = mul i32 %22, 3072, !dbg !20
  %73 = mul i32 %16, 6144, !dbg !20
  %74 = add i32 %72, %29, !dbg !21
  %75 = add i32 %30, %72, !dbg !21
  %76 = add i32 %31, %72, !dbg !21
  %77 = add i32 %32, %72, !dbg !21
  %78 = add i32 %26, %73, !dbg !21
  %79 = add i32 %78, 3072, !dbg !21
  %80 = sext i32 %74 to i64, !dbg !22
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !22
  %82 = sext i32 %76 to i64, !dbg !22
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !22
  %84 = and i1 %24, %70, !dbg !23
  %85 = and i1 %71, %23, !dbg !23
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %81, i1 %85) #5, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !24
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %83, i1 %85) #5, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !24
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !24
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !24
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !24
  %96 = and i32 %28, 8176, !dbg !25
  %97 = lshr i32 %28, 8, !dbg !25
  %.idx = and i32 %97, 16, !dbg !25
  %98 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !25
  %99 = getelementptr bfloat, ptr addrspace(3) %98, i32 %96, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %99, i32 %87, i32 %88, i32 %89, i32 %90, i1 true) #5, !dbg !25
  %100 = or disjoint i32 %96, 8, !dbg !25
  %101 = getelementptr bfloat, ptr addrspace(3) %98, i32 %100, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %101, i32 %92, i32 %93, i32 %94, i32 %95, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26, !dbg !25
  %103 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 4, !dbg !25
  %104 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8, !dbg !25
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 12, !dbg !25
  %106 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8208, !dbg !25
  %107 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8212, !dbg !25
  %108 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8216, !dbg !25
  %109 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8220, !dbg !25
  %110 = add nuw nsw i32 %26, 6144, !dbg !26
  %111 = zext nneg i32 %110 to i64, !dbg !27
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !27
  %113 = zext nneg i32 %26 to i64, !dbg !27
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !27
  %115 = getelementptr i8, ptr addrspace(1) %114, i64 24592, !dbg !27
  %116 = getelementptr bfloat, ptr addrspace(1) %2, i64 %111, !dbg !28
  %117 = getelementptr i32, ptr addrspace(1) %3, i64 %80, !dbg !29
  %118 = sext i32 %75 to i64, !dbg !29
  %119 = getelementptr i32, ptr addrspace(1) %3, i64 %118, !dbg !29
  %120 = getelementptr i32, ptr addrspace(1) %3, i64 %82, !dbg !29
  %121 = sext i32 %77 to i64, !dbg !29
  %122 = getelementptr i32, ptr addrspace(1) %3, i64 %121, !dbg !29
  %123 = getelementptr bfloat, ptr addrspace(1) %6, i64 %113, !dbg !30
  %124 = getelementptr bfloat, ptr addrspace(1) %7, i64 %113, !dbg !31
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !32
  %125 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !32
  %126 = fpext bfloat %125 to float, !dbg !32
  %127 = fsub float 0.000000e+00, %126, !dbg !36
  %.inv31 = fcmp ole bfloat %69, 0xR0000, !dbg !37
  %128 = select i1 %.inv31, bfloat 0xR0000, bfloat %69, !dbg !37
  %129 = fpext bfloat %128 to float, !dbg !37
  %130 = fcmp ogt float %127, %129, !dbg !39
  %131 = fcmp uno float %127, 0.000000e+00, !dbg !41
  %132 = or i1 %131, %130, !dbg !42
  %133 = select i1 %132, float %127, float %129, !dbg !43
  %134 = fmul float %133, 0x3F80204080000000, !dbg !44
  %135 = fcmp ogt float %134, 0x3EE4F8B580000000, !dbg !45
  %136 = fcmp uno float %134, 0.000000e+00, !dbg !47
  %137 = or i1 %135, %136, !dbg !48
  %138 = select i1 %137, float %134, float 0x3EE4F8B580000000, !dbg !49
  %139 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !50
  %140 = or disjoint i32 %96, 4, !dbg !50
  %141 = lshr i32 %28, 10, !dbg !50
  %142 = and i32 %141, 4, !dbg !50
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !50
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %140, !dbg !50
  %145 = getelementptr float, ptr addrspace(3) %98, i32 %100, !dbg !50
  %146 = or disjoint i32 %96, 12, !dbg !50
  %147 = getelementptr float, ptr addrspace(3) %143, i32 %146, !dbg !50
  %148 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !50
  %149 = getelementptr inbounds nuw i8, ptr addrspace(3) %148, i32 8, !dbg !50
  %150 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !50
  %151 = getelementptr inbounds nuw i8, ptr addrspace(3) %150, i32 8, !dbg !50
  %152 = or disjoint i32 %26, 4100, !dbg !50
  %153 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %152, !dbg !50
  %154 = getelementptr inbounds nuw i8, ptr addrspace(3) %153, i32 8, !dbg !50
  %155 = getelementptr inbounds nuw i8, ptr addrspace(3) %148, i32 16416, !dbg !50
  %156 = getelementptr inbounds nuw i8, ptr addrspace(3) %148, i32 16424, !dbg !50
  %157 = select i1 %84, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %158 = sext i32 %78 to i64, !dbg !52
  %159 = getelementptr bfloat, ptr addrspace(1) %8, i64 %158, !dbg !52
  %160 = sext i32 %79 to i64, !dbg !52
  %161 = getelementptr bfloat, ptr addrspace(1) %8, i64 %160, !dbg !52
  %162 = getelementptr bfloat, ptr addrspace(1) %8, i64 %80, !dbg !52
  %163 = getelementptr bfloat, ptr addrspace(1) %8, i64 %82, !dbg !52
  %164 = load <2 x bfloat>, ptr addrspace(3) %105, align 4, !dbg !25
  %165 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !25
  %166 = load <2 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !25
  %167 = fpext <2 x bfloat> %166 to <2 x float>, !dbg !25
  %168 = load <2 x bfloat>, ptr addrspace(3) %103, align 4, !dbg !25
  %169 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !25
  %170 = load <2 x bfloat>, ptr addrspace(3) %102, align 16, !dbg !25
  %171 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !25
  %172 = load <2 x bfloat>, ptr addrspace(3) %109, align 4, !dbg !25
  %173 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !25
  %174 = load <2 x bfloat>, ptr addrspace(3) %108, align 8, !dbg !25
  %175 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !25
  %176 = load <2 x bfloat>, ptr addrspace(3) %107, align 4, !dbg !25
  %177 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !25
  %178 = load <2 x bfloat>, ptr addrspace(3) %106, align 16, !dbg !25
  %179 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !25
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %70) #5, !dbg !53
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !53
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !53
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !53
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !53
  %185 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !53
  %186 = insertelement <2 x i32> %185, i32 %182, i64 1, !dbg !53
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !53
  %188 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !53
  %189 = insertelement <2 x i32> %188, i32 %184, i64 1, !dbg !53
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !53
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %115, i1 %70) #5, !dbg !53
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !53
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !53
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !53
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !53
  %196 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !53
  %197 = insertelement <2 x i32> %196, i32 %193, i64 1, !dbg !53
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !53
  %199 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !53
  %200 = insertelement <2 x i32> %199, i32 %195, i64 1, !dbg !53
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !53
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %116, i1 %70) #5, !dbg !54
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !54
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !54
  %205 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !54
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !54
  %207 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !54
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !54
  %209 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !54
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !54
  %211 = fpext <2 x bfloat> %204 to <2 x float>, !dbg !55
  %212 = fpext <2 x bfloat> %206 to <2 x float>, !dbg !55
  %213 = fpext <2 x bfloat> %208 to <2 x float>, !dbg !55
  %214 = fpext <2 x bfloat> %210 to <2 x float>, !dbg !55
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %85) #5, !dbg !56
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !56
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !56
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !56
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !56
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %85) #5, !dbg !56
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !56
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !56
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !56
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !56
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %85) #5, !dbg !56
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !56
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !56
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !56
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !56
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %85) #5, !dbg !56
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !56
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !56
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !56
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !56
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %123, i1 %70) #5, !dbg !57
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !57
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !57
  %238 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !57
  %239 = bitcast i32 %238 to <2 x bfloat>, !dbg !57
  %240 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !57
  %241 = bitcast i32 %240 to <2 x bfloat>, !dbg !57
  %242 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !57
  %243 = bitcast i32 %242 to <2 x bfloat>, !dbg !57
  %244 = fpext <2 x bfloat> %237 to <2 x float>, !dbg !58
  %245 = fpext <2 x bfloat> %239 to <2 x float>, !dbg !58
  %246 = fpext <2 x bfloat> %241 to <2 x float>, !dbg !58
  %247 = fpext <2 x bfloat> %243 to <2 x float>, !dbg !58
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %124, i1 %70) #5, !dbg !59
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !59
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !59
  %251 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !59
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !59
  %253 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !59
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !59
  %255 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !59
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !59
  %257 = fpext <2 x bfloat> %250 to <2 x float>, !dbg !60
  %258 = fpext <2 x bfloat> %252 to <2 x float>, !dbg !60
  %259 = fpext <2 x bfloat> %254 to <2 x float>, !dbg !60
  %260 = fpext <2 x bfloat> %256 to <2 x float>, !dbg !60
  %261 = fadd <2 x float> %187, %211, !dbg !61
  %262 = fadd <2 x float> %190, %212, !dbg !61
  %263 = fadd <2 x float> %198, %213, !dbg !61
  %264 = fadd <2 x float> %201, %214, !dbg !61
  %265 = sitofp i32 %216 to float, !dbg !62
  %266 = sitofp i32 %217 to float, !dbg !62
  %267 = sitofp i32 %218 to float, !dbg !62
  %268 = sitofp i32 %219 to float, !dbg !62
  %269 = sitofp i32 %221 to float, !dbg !62
  %270 = sitofp i32 %222 to float, !dbg !62
  %271 = sitofp i32 %223 to float, !dbg !62
  %272 = sitofp i32 %224 to float, !dbg !62
  %273 = sitofp i32 %226 to float, !dbg !62
  %274 = sitofp i32 %227 to float, !dbg !62
  %275 = sitofp i32 %228 to float, !dbg !62
  %276 = sitofp i32 %229 to float, !dbg !62
  %277 = sitofp i32 %231 to float, !dbg !62
  %278 = sitofp i32 %232 to float, !dbg !62
  %279 = sitofp i32 %233 to float, !dbg !62
  %280 = sitofp i32 %234 to float, !dbg !62
  %281 = fmul float %138, %265, !dbg !50
  %282 = fmul float %138, %266, !dbg !50
  %283 = fmul float %138, %267, !dbg !50
  %284 = fmul float %138, %268, !dbg !50
  %285 = fmul float %138, %269, !dbg !50
  %286 = fmul float %138, %270, !dbg !50
  %287 = fmul float %138, %271, !dbg !50
  %288 = fmul float %138, %272, !dbg !50
  %289 = fmul float %138, %273, !dbg !50
  %290 = fmul float %138, %274, !dbg !50
  %291 = fmul float %138, %275, !dbg !50
  %292 = fmul float %138, %276, !dbg !50
  %293 = fmul float %138, %277, !dbg !50
  %294 = fmul float %138, %278, !dbg !50
  %295 = fmul float %138, %279, !dbg !50
  %296 = fmul float %138, %280, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %297 = bitcast float %281 to i32, !dbg !50
  %298 = bitcast float %282 to i32, !dbg !50
  %299 = bitcast float %283 to i32, !dbg !50
  %300 = bitcast float %284 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %139, i32 %297, i32 %298, i32 %299, i32 %300, i1 true) #5, !dbg !50
  %301 = bitcast float %285 to i32, !dbg !50
  %302 = bitcast float %286 to i32, !dbg !50
  %303 = bitcast float %287 to i32, !dbg !50
  %304 = bitcast float %288 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %144, i32 %301, i32 %302, i32 %303, i32 %304, i1 true) #5, !dbg !50
  %305 = bitcast float %289 to i32, !dbg !50
  %306 = bitcast float %290 to i32, !dbg !50
  %307 = bitcast float %291 to i32, !dbg !50
  %308 = bitcast float %292 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %145, i32 %305, i32 %306, i32 %307, i32 %308, i1 true) #5, !dbg !50
  %309 = bitcast float %293 to i32, !dbg !50
  %310 = bitcast float %294 to i32, !dbg !50
  %311 = bitcast float %295 to i32, !dbg !50
  %312 = bitcast float %296 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %147, i32 %309, i32 %310, i32 %311, i32 %312, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %313 = load <2 x float>, ptr addrspace(3) %148, align 16, !dbg !50
  %314 = load <2 x float>, ptr addrspace(3) %149, align 8, !dbg !50
  %315 = load <2 x float>, ptr addrspace(3) %150, align 16, !dbg !50
  %316 = load <2 x float>, ptr addrspace(3) %151, align 8, !dbg !50
  %317 = load <2 x float>, ptr addrspace(3) %153, align 16, !dbg !50
  %318 = load <2 x float>, ptr addrspace(3) %154, align 8, !dbg !50
  %319 = load <2 x float>, ptr addrspace(3) %155, align 16, !dbg !50
  %320 = load <2 x float>, ptr addrspace(3) %156, align 8, !dbg !50
  %321 = fmul <2 x float> %313, %244, !dbg !63
  %322 = fmul <2 x float> %314, %245, !dbg !63
  %323 = fmul <2 x float> %315, %246, !dbg !63
  %324 = fmul <2 x float> %316, %247, !dbg !63
  %325 = fmul <2 x float> %317, %244, !dbg !63
  %326 = fmul <2 x float> %318, %245, !dbg !63
  %327 = fmul <2 x float> %319, %246, !dbg !63
  %328 = fmul <2 x float> %320, %247, !dbg !63
  %329 = fadd <2 x float> %321, %257, !dbg !64
  %330 = fadd <2 x float> %322, %258, !dbg !64
  %331 = fadd <2 x float> %323, %259, !dbg !64
  %332 = fadd <2 x float> %324, %260, !dbg !64
  %333 = fadd <2 x float> %325, %257, !dbg !64
  %334 = fadd <2 x float> %326, %258, !dbg !64
  %335 = fadd <2 x float> %327, %259, !dbg !64
  %336 = fadd <2 x float> %328, %260, !dbg !64
  %337 = fmul <2 x float> %261, %329, !dbg !65
  %338 = fmul <2 x float> %262, %330, !dbg !65
  %339 = fmul <2 x float> %263, %331, !dbg !65
  %340 = fmul <2 x float> %264, %332, !dbg !65
  %341 = fmul <2 x float> %261, %333, !dbg !65
  %342 = fmul <2 x float> %262, %334, !dbg !65
  %343 = fmul <2 x float> %263, %335, !dbg !65
  %344 = fmul <2 x float> %264, %336, !dbg !65
  %345 = fadd <2 x float> %337, %171, !dbg !66
  %346 = fadd <2 x float> %338, %169, !dbg !66
  %347 = fadd <2 x float> %339, %167, !dbg !66
  %348 = fadd <2 x float> %340, %165, !dbg !66
  %349 = fadd <2 x float> %341, %179, !dbg !66
  %350 = fadd <2 x float> %342, %177, !dbg !66
  %351 = fadd <2 x float> %343, %175, !dbg !66
  %352 = fadd <2 x float> %344, %173, !dbg !66
  %353 = extractelement <2 x float> %345, i64 0, !dbg !67
  %354 = select i1 %84, float %353, float 0.000000e+00, !dbg !67
  %355 = extractelement <2 x float> %345, i64 1, !dbg !67
  %356 = select i1 %84, float %355, float 0.000000e+00, !dbg !67
  %357 = extractelement <2 x float> %346, i64 0, !dbg !67
  %358 = select i1 %84, float %357, float 0.000000e+00, !dbg !67
  %359 = extractelement <2 x float> %346, i64 1, !dbg !67
  %360 = select i1 %84, float %359, float 0.000000e+00, !dbg !67
  %361 = extractelement <2 x float> %347, i64 0, !dbg !67
  %362 = select i1 %84, float %361, float 0.000000e+00, !dbg !67
  %363 = extractelement <2 x float> %347, i64 1, !dbg !67
  %364 = select i1 %84, float %363, float 0.000000e+00, !dbg !67
  %365 = extractelement <2 x float> %348, i64 0, !dbg !67
  %366 = select i1 %84, float %365, float 0.000000e+00, !dbg !67
  %367 = extractelement <2 x float> %348, i64 1, !dbg !67
  %368 = select i1 %84, float %367, float 0.000000e+00, !dbg !67
  %369 = extractelement <2 x float> %349, i64 0, !dbg !67
  %370 = select i1 %84, float %369, float 0.000000e+00, !dbg !67
  %371 = extractelement <2 x float> %349, i64 1, !dbg !67
  %372 = select i1 %84, float %371, float 0.000000e+00, !dbg !67
  %373 = extractelement <2 x float> %350, i64 0, !dbg !67
  %374 = select i1 %84, float %373, float 0.000000e+00, !dbg !67
  %375 = extractelement <2 x float> %350, i64 1, !dbg !67
  %376 = select i1 %84, float %375, float 0.000000e+00, !dbg !67
  %377 = extractelement <2 x float> %351, i64 0, !dbg !67
  %378 = select i1 %84, float %377, float 0.000000e+00, !dbg !67
  %379 = extractelement <2 x float> %351, i64 1, !dbg !67
  %380 = select i1 %84, float %379, float 0.000000e+00, !dbg !67
  %381 = extractelement <2 x float> %352, i64 0, !dbg !67
  %382 = select i1 %84, float %381, float 0.000000e+00, !dbg !67
  %383 = extractelement <2 x float> %352, i64 1, !dbg !67
  %384 = select i1 %84, float %383, float 0.000000e+00, !dbg !67
  %385 = fptrunc <2 x float> %345 to <2 x bfloat>, !dbg !68
  %386 = fptrunc <2 x float> %346 to <2 x bfloat>, !dbg !68
  %387 = fptrunc <2 x float> %347 to <2 x bfloat>, !dbg !68
  %388 = fptrunc <2 x float> %348 to <2 x bfloat>, !dbg !68
  %389 = fptrunc <2 x float> %349 to <2 x bfloat>, !dbg !68
  %390 = fptrunc <2 x float> %350 to <2 x bfloat>, !dbg !68
  %391 = fptrunc <2 x float> %351 to <2 x bfloat>, !dbg !68
  %392 = fptrunc <2 x float> %352 to <2 x bfloat>, !dbg !68
  %393 = bitcast <2 x bfloat> %385 to i32, !dbg !68
  %394 = bitcast <2 x bfloat> %386 to i32, !dbg !68
  %395 = bitcast <2 x bfloat> %387 to i32, !dbg !68
  %396 = bitcast <2 x bfloat> %388 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %393, i32 %394, i32 %395, i32 %396, ptr addrspace(1) %159, i1 %84) #5, !dbg !68
  %397 = bitcast <2 x bfloat> %389 to i32, !dbg !68
  %398 = bitcast <2 x bfloat> %390 to i32, !dbg !68
  %399 = bitcast <2 x bfloat> %391 to i32, !dbg !68
  %400 = bitcast <2 x bfloat> %392 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %397, i32 %398, i32 %399, i32 %400, ptr addrspace(1) %161, i1 %84) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %401 = fsub float %356, %354, !dbg !71
  %402 = select i1 %84, float 2.000000e+00, float 0.000000e+00, !dbg !73
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !74
  %404 = tail call float @llvm.nvvm.div.full(float %157, float %402), !dbg !75
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !76
  %406 = fmul float %401, %405, !dbg !77
  %407 = fadd float %354, %406, !dbg !78
  %408 = fmul float %401, %401, !dbg !79
  %409 = fmul float %157, %408, !dbg !80
  %410 = fmul float %405, %409, !dbg !81
  %411 = fadd float %410, 0.000000e+00, !dbg !82
  %412 = fsub float %358, %407, !dbg !71
  %413 = select i1 %84, float 3.000000e+00, float 0.000000e+00, !dbg !73
  %414 = fcmp oeq float %413, 0.000000e+00, !dbg !74
  %415 = tail call float @llvm.nvvm.div.full(float %157, float %413), !dbg !75
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !76
  %417 = fmul float %416, %412, !dbg !77
  %418 = fadd float %407, %417, !dbg !78
  %419 = fmul float %412, %412, !dbg !79
  %420 = fmul float %402, %419, !dbg !80
  %421 = fmul float %416, %420, !dbg !81
  %422 = fadd float %411, %421, !dbg !82
  %423 = fsub float %360, %418, !dbg !71
  %424 = select i1 %84, float 4.000000e+00, float 0.000000e+00, !dbg !73
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !74
  %426 = tail call float @llvm.nvvm.div.full(float %157, float %424), !dbg !75
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !76
  %428 = fmul float %427, %423, !dbg !77
  %429 = fadd float %418, %428, !dbg !78
  %430 = fmul float %423, %423, !dbg !79
  %431 = fmul float %413, %430, !dbg !80
  %432 = fmul float %427, %431, !dbg !81
  %433 = fadd float %422, %432, !dbg !82
  %434 = fsub float %362, %429, !dbg !71
  %435 = select i1 %84, float 5.000000e+00, float 0.000000e+00, !dbg !73
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !74
  %437 = tail call float @llvm.nvvm.div.full(float %157, float %435), !dbg !75
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !76
  %439 = fmul float %438, %434, !dbg !77
  %440 = fadd float %429, %439, !dbg !78
  %441 = fmul float %434, %434, !dbg !79
  %442 = fmul float %424, %441, !dbg !80
  %443 = fmul float %438, %442, !dbg !81
  %444 = fadd float %433, %443, !dbg !82
  %445 = fsub float %364, %440, !dbg !71
  %446 = select i1 %84, float 6.000000e+00, float 0.000000e+00, !dbg !73
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !74
  %448 = tail call float @llvm.nvvm.div.full(float %157, float %446), !dbg !75
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !76
  %450 = fmul float %449, %445, !dbg !77
  %451 = fadd float %440, %450, !dbg !78
  %452 = fmul float %445, %445, !dbg !79
  %453 = fmul float %435, %452, !dbg !80
  %454 = fmul float %449, %453, !dbg !81
  %455 = fadd float %444, %454, !dbg !82
  %456 = fsub float %366, %451, !dbg !71
  %457 = select i1 %84, float 7.000000e+00, float 0.000000e+00, !dbg !73
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !74
  %459 = tail call float @llvm.nvvm.div.full(float %157, float %457), !dbg !75
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !76
  %461 = fmul float %460, %456, !dbg !77
  %462 = fadd float %451, %461, !dbg !78
  %463 = fmul float %456, %456, !dbg !79
  %464 = fmul float %446, %463, !dbg !80
  %465 = fmul float %460, %464, !dbg !81
  %466 = fadd float %455, %465, !dbg !82
  %467 = fsub float %368, %462, !dbg !71
  %468 = select i1 %84, float 8.000000e+00, float 0.000000e+00, !dbg !73
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !74
  %470 = tail call float @llvm.nvvm.div.full(float %157, float %468), !dbg !75
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !76
  %472 = fmul float %471, %467, !dbg !77
  %473 = fadd float %462, %472, !dbg !78
  %474 = fmul float %467, %467, !dbg !79
  %475 = fmul float %457, %474, !dbg !80
  %476 = fmul float %471, %475, !dbg !81
  %477 = fadd float %466, %476, !dbg !82
  %478 = fsub float %372, %370, !dbg !71
  %479 = fmul float %405, %478, !dbg !77
  %480 = fadd float %370, %479, !dbg !78
  %481 = fmul float %478, %478, !dbg !79
  %482 = fmul float %157, %481, !dbg !80
  %483 = fmul float %405, %482, !dbg !81
  %484 = fadd float %483, 0.000000e+00, !dbg !82
  %485 = fsub float %374, %480, !dbg !71
  %486 = fmul float %416, %485, !dbg !77
  %487 = fadd float %480, %486, !dbg !78
  %488 = fmul float %485, %485, !dbg !79
  %489 = fmul float %402, %488, !dbg !80
  %490 = fmul float %416, %489, !dbg !81
  %491 = fadd float %484, %490, !dbg !82
  %492 = fsub float %376, %487, !dbg !71
  %493 = fmul float %427, %492, !dbg !77
  %494 = fadd float %487, %493, !dbg !78
  %495 = fmul float %492, %492, !dbg !79
  %496 = fmul float %413, %495, !dbg !80
  %497 = fmul float %427, %496, !dbg !81
  %498 = fadd float %491, %497, !dbg !82
  %499 = fsub float %378, %494, !dbg !71
  %500 = fmul float %438, %499, !dbg !77
  %501 = fadd float %494, %500, !dbg !78
  %502 = fmul float %499, %499, !dbg !79
  %503 = fmul float %424, %502, !dbg !80
  %504 = fmul float %438, %503, !dbg !81
  %505 = fadd float %498, %504, !dbg !82
  %506 = fsub float %380, %501, !dbg !71
  %507 = fmul float %449, %506, !dbg !77
  %508 = fadd float %501, %507, !dbg !78
  %509 = fmul float %506, %506, !dbg !79
  %510 = fmul float %435, %509, !dbg !80
  %511 = fmul float %449, %510, !dbg !81
  %512 = fadd float %505, %511, !dbg !82
  %513 = fsub float %382, %508, !dbg !71
  %514 = fmul float %460, %513, !dbg !77
  %515 = fadd float %508, %514, !dbg !78
  %516 = fmul float %513, %513, !dbg !79
  %517 = fmul float %446, %516, !dbg !80
  %518 = fmul float %460, %517, !dbg !81
  %519 = fadd float %512, %518, !dbg !82
  %520 = fsub float %384, %515, !dbg !71
  %521 = fmul float %471, %520, !dbg !77
  %522 = fadd float %515, %521, !dbg !78
  %523 = fmul float %520, %520, !dbg !79
  %524 = fmul float %457, %523, !dbg !80
  %525 = fmul float %471, %524, !dbg !81
  %526 = fadd float %519, %525, !dbg !82
  %527 = bitcast float %473 to i32, !dbg !69
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 16, i32 31), !dbg !69
  %529 = bitcast i32 %528 to float, !dbg !69
  %530 = bitcast float %477 to i32, !dbg !69
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 16, i32 31), !dbg !69
  %532 = bitcast i32 %531 to float, !dbg !69
  %533 = bitcast float %468 to i32, !dbg !69
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 16, i32 31), !dbg !69
  %535 = bitcast i32 %534 to float, !dbg !69
  %536 = fsub float %529, %473, !dbg !71
  %537 = fadd float %468, %535, !dbg !73
  %538 = fcmp oeq float %537, 0.000000e+00, !dbg !74
  %539 = tail call float @llvm.nvvm.div.full(float %535, float %537), !dbg !75
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !76
  %541 = fmul float %540, %536, !dbg !77
  %542 = fadd float %473, %541, !dbg !78
  %543 = fadd float %477, %532, !dbg !83
  %544 = fmul float %536, %536, !dbg !79
  %545 = fmul float %468, %544, !dbg !80
  %546 = fmul float %540, %545, !dbg !81
  %547 = fadd float %543, %546, !dbg !82
  %548 = bitcast float %542 to i32, !dbg !69
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 8, i32 31), !dbg !69
  %550 = bitcast i32 %549 to float, !dbg !69
  %551 = bitcast float %547 to i32, !dbg !69
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 8, i32 31), !dbg !69
  %553 = bitcast i32 %552 to float, !dbg !69
  %554 = bitcast float %537 to i32, !dbg !69
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 8, i32 31), !dbg !69
  %556 = bitcast i32 %555 to float, !dbg !69
  %557 = fsub float %550, %542, !dbg !71
  %558 = fadd float %537, %556, !dbg !73
  %559 = fcmp oeq float %558, 0.000000e+00, !dbg !74
  %560 = tail call float @llvm.nvvm.div.full(float %556, float %558), !dbg !75
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !76
  %562 = fmul float %561, %557, !dbg !77
  %563 = fadd float %542, %562, !dbg !78
  %564 = fadd float %547, %553, !dbg !83
  %565 = fmul float %557, %557, !dbg !79
  %566 = fmul float %537, %565, !dbg !80
  %567 = fmul float %561, %566, !dbg !81
  %568 = fadd float %564, %567, !dbg !82
  %569 = bitcast float %563 to i32, !dbg !69
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 4, i32 31), !dbg !69
  %571 = bitcast i32 %570 to float, !dbg !69
  %572 = bitcast float %568 to i32, !dbg !69
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 4, i32 31), !dbg !69
  %574 = bitcast i32 %573 to float, !dbg !69
  %575 = bitcast float %558 to i32, !dbg !69
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 4, i32 31), !dbg !69
  %577 = bitcast i32 %576 to float, !dbg !69
  %578 = fsub float %571, %563, !dbg !71
  %579 = fadd float %558, %577, !dbg !73
  %580 = fcmp oeq float %579, 0.000000e+00, !dbg !74
  %581 = tail call float @llvm.nvvm.div.full(float %577, float %579), !dbg !75
  %582 = select i1 %580, float 0.000000e+00, float %581, !dbg !76
  %583 = fmul float %582, %578, !dbg !77
  %584 = fadd float %563, %583, !dbg !78
  %585 = fadd float %568, %574, !dbg !83
  %586 = fmul float %578, %578, !dbg !79
  %587 = fmul float %558, %586, !dbg !80
  %588 = fmul float %582, %587, !dbg !81
  %589 = fadd float %585, %588, !dbg !82
  %590 = bitcast float %584 to i32, !dbg !69
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 2, i32 31), !dbg !69
  %592 = bitcast i32 %591 to float, !dbg !69
  %593 = bitcast float %589 to i32, !dbg !69
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 2, i32 31), !dbg !69
  %595 = bitcast i32 %594 to float, !dbg !69
  %596 = bitcast float %579 to i32, !dbg !69
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 2, i32 31), !dbg !69
  %598 = bitcast i32 %597 to float, !dbg !69
  %599 = fsub float %592, %584, !dbg !71
  %600 = fadd float %579, %598, !dbg !73
  %601 = fcmp oeq float %600, 0.000000e+00, !dbg !74
  %602 = tail call float @llvm.nvvm.div.full(float %598, float %600), !dbg !75
  %603 = select i1 %601, float 0.000000e+00, float %602, !dbg !76
  %604 = fmul float %603, %599, !dbg !77
  %605 = fadd float %584, %604, !dbg !78
  %606 = fadd float %589, %595, !dbg !83
  %607 = fmul float %599, %599, !dbg !79
  %608 = fmul float %579, %607, !dbg !80
  %609 = fmul float %603, %608, !dbg !81
  %610 = fadd float %606, %609, !dbg !82
  %611 = bitcast float %605 to i32, !dbg !69
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 1, i32 31), !dbg !69
  %613 = bitcast i32 %612 to float, !dbg !69
  %614 = bitcast float %610 to i32, !dbg !69
  %615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 1, i32 31), !dbg !69
  %616 = bitcast i32 %615 to float, !dbg !69
  %617 = bitcast float %600 to i32, !dbg !69
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 1, i32 31), !dbg !69
  %619 = bitcast i32 %618 to float, !dbg !69
  %620 = fsub float %613, %605, !dbg !71
  %621 = fadd float %600, %619, !dbg !73
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !74
  %623 = tail call float @llvm.nvvm.div.full(float %619, float %621), !dbg !75
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !76
  %625 = fmul float %624, %620, !dbg !77
  %626 = fadd float %605, %625, !dbg !78
  %627 = fadd float %610, %616, !dbg !83
  %628 = fmul float %620, %620, !dbg !79
  %629 = fmul float %600, %628, !dbg !80
  %630 = fmul float %624, %629, !dbg !81
  %631 = fadd float %627, %630, !dbg !82
  %632 = bitcast float %522 to i32, !dbg !69
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 16, i32 31), !dbg !69
  %634 = bitcast i32 %633 to float, !dbg !69
  %635 = bitcast float %526 to i32, !dbg !69
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 16, i32 31), !dbg !69
  %637 = bitcast i32 %636 to float, !dbg !69
  %638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 16, i32 31), !dbg !69
  %639 = bitcast i32 %638 to float, !dbg !69
  %640 = fsub float %634, %522, !dbg !71
  %641 = fadd float %468, %639, !dbg !73
  %642 = fcmp oeq float %641, 0.000000e+00, !dbg !74
  %643 = tail call float @llvm.nvvm.div.full(float %639, float %641), !dbg !75
  %644 = select i1 %642, float 0.000000e+00, float %643, !dbg !76
  %645 = fmul float %640, %644, !dbg !77
  %646 = fadd float %522, %645, !dbg !78
  %647 = fadd float %526, %637, !dbg !83
  %648 = fmul float %640, %640, !dbg !79
  %649 = fmul float %468, %648, !dbg !80
  %650 = fmul float %649, %644, !dbg !81
  %651 = fadd float %647, %650, !dbg !82
  %652 = bitcast float %646 to i32, !dbg !69
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 8, i32 31), !dbg !69
  %654 = bitcast i32 %653 to float, !dbg !69
  %655 = bitcast float %651 to i32, !dbg !69
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 8, i32 31), !dbg !69
  %657 = bitcast i32 %656 to float, !dbg !69
  %658 = bitcast float %641 to i32, !dbg !69
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 8, i32 31), !dbg !69
  %660 = bitcast i32 %659 to float, !dbg !69
  %661 = fsub float %654, %646, !dbg !71
  %662 = fadd float %641, %660, !dbg !73
  %663 = fcmp oeq float %662, 0.000000e+00, !dbg !74
  %664 = tail call float @llvm.nvvm.div.full(float %660, float %662), !dbg !75
  %665 = select i1 %663, float 0.000000e+00, float %664, !dbg !76
  %666 = fmul float %661, %665, !dbg !77
  %667 = fadd float %646, %666, !dbg !78
  %668 = fadd float %651, %657, !dbg !83
  %669 = fmul float %661, %661, !dbg !79
  %670 = fmul float %641, %669, !dbg !80
  %671 = fmul float %665, %670, !dbg !81
  %672 = fadd float %668, %671, !dbg !82
  %673 = bitcast float %667 to i32, !dbg !69
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 4, i32 31), !dbg !69
  %675 = bitcast i32 %674 to float, !dbg !69
  %676 = bitcast float %672 to i32, !dbg !69
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 4, i32 31), !dbg !69
  %678 = bitcast i32 %677 to float, !dbg !69
  %679 = bitcast float %662 to i32, !dbg !69
  %680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %679, i32 4, i32 31), !dbg !69
  %681 = bitcast i32 %680 to float, !dbg !69
  %682 = fsub float %675, %667, !dbg !71
  %683 = fadd float %662, %681, !dbg !73
  %684 = fcmp oeq float %683, 0.000000e+00, !dbg !74
  %685 = tail call float @llvm.nvvm.div.full(float %681, float %683), !dbg !75
  %686 = select i1 %684, float 0.000000e+00, float %685, !dbg !76
  %687 = fmul float %682, %686, !dbg !77
  %688 = fadd float %667, %687, !dbg !78
  %689 = fadd float %672, %678, !dbg !83
  %690 = fmul float %682, %682, !dbg !79
  %691 = fmul float %662, %690, !dbg !80
  %692 = fmul float %686, %691, !dbg !81
  %693 = fadd float %689, %692, !dbg !82
  %694 = bitcast float %688 to i32, !dbg !69
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 2, i32 31), !dbg !69
  %696 = bitcast i32 %695 to float, !dbg !69
  %697 = bitcast float %693 to i32, !dbg !69
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %697, i32 2, i32 31), !dbg !69
  %699 = bitcast i32 %698 to float, !dbg !69
  %700 = bitcast float %683 to i32, !dbg !69
  %701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %700, i32 2, i32 31), !dbg !69
  %702 = bitcast i32 %701 to float, !dbg !69
  %703 = fsub float %696, %688, !dbg !71
  %704 = fadd float %683, %702, !dbg !73
  %705 = fcmp oeq float %704, 0.000000e+00, !dbg !74
  %706 = tail call float @llvm.nvvm.div.full(float %702, float %704), !dbg !75
  %707 = select i1 %705, float 0.000000e+00, float %706, !dbg !76
  %708 = fmul float %703, %707, !dbg !77
  %709 = fadd float %688, %708, !dbg !78
  %710 = fadd float %693, %699, !dbg !83
  %711 = fmul float %703, %703, !dbg !79
  %712 = fmul float %683, %711, !dbg !80
  %713 = fmul float %707, %712, !dbg !81
  %714 = fadd float %710, %713, !dbg !82
  %715 = bitcast float %709 to i32, !dbg !69
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 1, i32 31), !dbg !69
  %717 = bitcast i32 %716 to float, !dbg !69
  %718 = bitcast float %714 to i32, !dbg !69
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 1, i32 31), !dbg !69
  %720 = bitcast i32 %719 to float, !dbg !69
  %721 = bitcast float %704 to i32, !dbg !69
  %722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %721, i32 1, i32 31), !dbg !69
  %723 = bitcast i32 %722 to float, !dbg !69
  %724 = fsub float %717, %709, !dbg !71
  %725 = fadd float %704, %723, !dbg !73
  %726 = fcmp oeq float %725, 0.000000e+00, !dbg !74
  %727 = tail call float @llvm.nvvm.div.full(float %723, float %725), !dbg !75
  %728 = select i1 %726, float 0.000000e+00, float %727, !dbg !76
  %729 = fmul float %724, %728, !dbg !77
  %730 = fadd float %709, %729, !dbg !78
  %731 = fadd float %714, %720, !dbg !83
  %732 = fmul float %724, %724, !dbg !79
  %733 = fmul float %704, %732, !dbg !80
  %734 = fmul float %728, %733, !dbg !81
  %735 = fadd float %731, %734, !dbg !82
  %736 = and i32 %19, 15, !dbg !69
  %737 = icmp eq i32 %21, 0, !dbg !69
  %738 = getelementptr float, ptr addrspace(3) @global_smem, i32 %736, !dbg !69
  %739 = bitcast float %626 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %738, <1 x i32> %739, i1 %737) #5, !dbg !69
  %740 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %736, !dbg !69
  %741 = bitcast float %631 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %740, <1 x i32> %741, i1 %737) #5, !dbg !69
  %742 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %736, !dbg !69
  %743 = bitcast float %621 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %742, <1 x i32> %743, i1 %737) #5, !dbg !69
  %744 = or disjoint i32 %736, 16, !dbg !69
  %745 = getelementptr float, ptr addrspace(3) @global_smem, i32 %744, !dbg !69
  %746 = bitcast float %730 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %745, <1 x i32> %746, i1 %737) #5, !dbg !69
  %747 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %744, !dbg !69
  %748 = bitcast float %735 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %747, <1 x i32> %748, i1 %737) #5, !dbg !69
  %749 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %744, !dbg !69
  %750 = bitcast float %725 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %749, <1 x i32> %750, i1 %737) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %751 = icmp slt i32 %18, 32, !dbg !69
  %752 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !69
  %753 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %752, i1 %751) #5, !dbg !69
  %754 = bitcast i32 %753 to float, !dbg !69
  %755 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !69
  %756 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %755, i1 %751) #5, !dbg !69
  %757 = bitcast i32 %756 to float, !dbg !69
  %758 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %18, !dbg !69
  %759 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %758, i1 %751) #5, !dbg !69
  %760 = bitcast i32 %759 to float, !dbg !69
  %761 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %753, i32 8, i32 31), !dbg !69
  %762 = bitcast i32 %761 to float, !dbg !69
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 8, i32 31), !dbg !69
  %764 = bitcast i32 %763 to float, !dbg !69
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 8, i32 31), !dbg !69
  %766 = bitcast i32 %765 to float, !dbg !69
  %767 = fsub float %762, %754, !dbg !71
  %768 = fadd float %760, %766, !dbg !73
  %769 = fcmp oeq float %768, 0.000000e+00, !dbg !74
  %770 = tail call float @llvm.nvvm.div.full(float %766, float %768), !dbg !75
  %771 = select i1 %769, float 0.000000e+00, float %770, !dbg !76
  %772 = fmul float %767, %771, !dbg !77
  %773 = fadd float %772, %754, !dbg !78
  %774 = fadd float %757, %764, !dbg !83
  %775 = fmul float %767, %767, !dbg !79
  %776 = fmul float %775, %760, !dbg !80
  %777 = fmul float %776, %771, !dbg !81
  %778 = fadd float %774, %777, !dbg !82
  %779 = bitcast float %773 to i32, !dbg !69
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 4, i32 31), !dbg !69
  %781 = bitcast i32 %780 to float, !dbg !69
  %782 = bitcast float %778 to i32, !dbg !69
  %783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %782, i32 4, i32 31), !dbg !69
  %784 = bitcast i32 %783 to float, !dbg !69
  %785 = bitcast float %768 to i32, !dbg !69
  %786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %785, i32 4, i32 31), !dbg !69
  %787 = bitcast i32 %786 to float, !dbg !69
  %788 = fsub float %781, %773, !dbg !71
  %789 = fadd float %768, %787, !dbg !73
  %790 = fcmp oeq float %789, 0.000000e+00, !dbg !74
  %791 = tail call float @llvm.nvvm.div.full(float %787, float %789), !dbg !75
  %792 = select i1 %790, float 0.000000e+00, float %791, !dbg !76
  %793 = fmul float %788, %792, !dbg !77
  %794 = fadd float %773, %793, !dbg !78
  %795 = fadd float %778, %784, !dbg !83
  %796 = fmul float %788, %788, !dbg !79
  %797 = fmul float %768, %796, !dbg !80
  %798 = fmul float %792, %797, !dbg !81
  %799 = fadd float %795, %798, !dbg !82
  %800 = bitcast float %794 to i32, !dbg !69
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 2, i32 31), !dbg !69
  %802 = bitcast i32 %801 to float, !dbg !69
  %803 = bitcast float %799 to i32, !dbg !69
  %804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %803, i32 2, i32 31), !dbg !69
  %805 = bitcast i32 %804 to float, !dbg !69
  %806 = bitcast float %789 to i32, !dbg !69
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 2, i32 31), !dbg !69
  %808 = bitcast i32 %807 to float, !dbg !69
  %809 = fsub float %802, %794, !dbg !71
  %810 = fadd float %789, %808, !dbg !73
  %811 = fcmp oeq float %810, 0.000000e+00, !dbg !74
  %812 = tail call float @llvm.nvvm.div.full(float %808, float %810), !dbg !75
  %813 = select i1 %811, float 0.000000e+00, float %812, !dbg !76
  %814 = fmul float %809, %813, !dbg !77
  %815 = fadd float %794, %814, !dbg !78
  %816 = fadd float %799, %805, !dbg !83
  %817 = fmul float %809, %809, !dbg !79
  %818 = fmul float %789, %817, !dbg !80
  %819 = fmul float %813, %818, !dbg !81
  %820 = fadd float %816, %819, !dbg !82
  %821 = bitcast float %815 to i32, !dbg !69
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %821, i32 1, i32 31), !dbg !69
  %823 = bitcast i32 %822 to float, !dbg !69
  %824 = bitcast float %820 to i32, !dbg !69
  %825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %824, i32 1, i32 31), !dbg !69
  %826 = bitcast i32 %825 to float, !dbg !69
  %827 = bitcast float %810 to i32, !dbg !69
  %828 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %827, i32 1, i32 31), !dbg !69
  %829 = bitcast i32 %828 to float, !dbg !69
  %830 = fsub float %823, %815, !dbg !71
  %831 = fadd float %810, %829, !dbg !73
  %832 = fcmp oeq float %831, 0.000000e+00, !dbg !74
  %833 = tail call float @llvm.nvvm.div.full(float %829, float %831), !dbg !75
  %834 = select i1 %832, float 0.000000e+00, float %833, !dbg !76
  %835 = fmul float %830, %834, !dbg !77
  %836 = fadd float %815, %835, !dbg !78
  %837 = fadd float %820, %826, !dbg !83
  %838 = fmul float %830, %830, !dbg !79
  %839 = fmul float %810, %838, !dbg !80
  %840 = fmul float %834, %839, !dbg !81
  %841 = fadd float %837, %840, !dbg !82
  %842 = and i32 %18, 15, !dbg !69
  %843 = icmp eq i32 %842, 0, !dbg !69
  %844 = and i1 %751, %843, !dbg !69
  %845 = bitcast float %836 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %752, <1 x i32> %845, i1 %844) #5, !dbg !69
  %846 = bitcast float %841 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %755, <1 x i32> %846, i1 %844) #5, !dbg !69
  %847 = bitcast float %831 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %758, <1 x i32> %847, i1 %844) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %848 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %849 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !69
  %850 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !69
  %851 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !69
  %852 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %162, i1 %85) #5, !dbg !84
  %853 = extractvalue { i32, i32, i32, i32 } %852, 0, !dbg !84
  %854 = extractvalue { i32, i32, i32, i32 } %852, 1, !dbg !84
  %855 = extractvalue { i32, i32, i32, i32 } %852, 2, !dbg !84
  %856 = extractvalue { i32, i32, i32, i32 } %852, 3, !dbg !84
  %857 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %163, i1 %85) #5, !dbg !84
  %858 = extractvalue { i32, i32, i32, i32 } %857, 0, !dbg !84
  %859 = extractvalue { i32, i32, i32, i32 } %857, 1, !dbg !84
  %860 = extractvalue { i32, i32, i32, i32 } %857, 2, !dbg !84
  %861 = extractvalue { i32, i32, i32, i32 } %857, 3, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %99, i32 %853, i32 %854, i32 %855, i32 %856, i1 true) #5, !dbg !85
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %101, i32 %858, i32 %859, i32 %860, i32 %861, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %862 = load <8 x bfloat>, ptr addrspace(3) %102, align 16, !dbg !85
  %863 = load <8 x bfloat>, ptr addrspace(3) %106, align 16, !dbg !85
  %864 = or disjoint i32 %26, 12288, !dbg !86
  %865 = or disjoint i32 %26, 12292, !dbg !86
  %866 = zext nneg i32 %864 to i64, !dbg !87
  %867 = getelementptr float, ptr addrspace(1) %1, i64 %866, !dbg !87
  %868 = zext nneg i32 %865 to i64, !dbg !87
  %869 = getelementptr float, ptr addrspace(1) %1, i64 %868, !dbg !87
  %870 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %867, i1 %70) #5, !dbg !88
  %871 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %869, i1 %70) #5, !dbg !88
  %872 = getelementptr bfloat, ptr addrspace(1) %2, i64 %866, !dbg !89
  %873 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %872, i1 %70) #5, !dbg !90
  %874 = add nuw nsw i32 %26, 9216, !dbg !91
  %875 = zext nneg i32 %874 to i64, !dbg !92
  %876 = getelementptr float, ptr addrspace(1) %1, i64 %875, !dbg !92
  %877 = getelementptr i8, ptr addrspace(1) %114, i64 36880, !dbg !92
  %878 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %876, i1 %70) #5, !dbg !93
  %879 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %877, i1 %70) #5, !dbg !93
  %880 = getelementptr bfloat, ptr addrspace(1) %2, i64 %875, !dbg !94
  %881 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %880, i1 %70) #5, !dbg !95
  %882 = tail call float @llvm.nvvm.div.full(float %850, float 3.072000e+03), !dbg !96
  %883 = tail call float @llvm.nvvm.div.full(float %851, float 3.072000e+03), !dbg !96
  %884 = fadd float %882, 0x3EB0C6F7A0000000, !dbg !97
  %885 = fadd float %883, 0x3EB0C6F7A0000000, !dbg !97
  %886 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %887 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %888 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %889 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %890 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %891 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %892 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i110 = icmp eq i32 %893, 0, !dbg !98
  br i1 %.not.i110, label %896, label %894, !dbg !98

894:                                              ; preds = %__nv_rsqrtf.exit
  %895 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %884), !dbg !98
  br label %__nv_rsqrtf.exit112, !dbg !98

896:                                              ; preds = %__nv_rsqrtf.exit
  %897 = tail call float @llvm.nvvm.rsqrt.approx.f(float %884), !dbg !98
  br label %__nv_rsqrtf.exit112, !dbg !98

__nv_rsqrtf.exit112:                              ; preds = %894, %896
  %.0.i111 = phi float [ %895, %894 ], [ %897, %896 ], !dbg !98
  %898 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %899 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %900 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %901 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %902 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %903 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %904 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %905 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i134 = icmp eq i32 %905, 0, !dbg !98
  br i1 %.not.i134, label %908, label %906, !dbg !98

906:                                              ; preds = %__nv_rsqrtf.exit112
  %907 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %885), !dbg !98
  br label %__nv_rsqrtf.exit136, !dbg !98

908:                                              ; preds = %__nv_rsqrtf.exit112
  %909 = tail call float @llvm.nvvm.rsqrt.approx.f(float %885), !dbg !98
  br label %__nv_rsqrtf.exit136, !dbg !98

__nv_rsqrtf.exit136:                              ; preds = %906, %908
  %.0.i135 = phi float [ %907, %906 ], [ %909, %908 ], !dbg !98
  %910 = extractelement <8 x bfloat> %863, i64 7, !dbg !85
  %911 = fpext bfloat %910 to float, !dbg !99
  %912 = fsub float %911, %849, !dbg !100
  %913 = extractelement <8 x bfloat> %863, i64 6, !dbg !85
  %914 = fpext bfloat %913 to float, !dbg !99
  %915 = fsub float %914, %849, !dbg !100
  %916 = extractelement <8 x bfloat> %863, i64 5, !dbg !85
  %917 = fpext bfloat %916 to float, !dbg !99
  %918 = fsub float %917, %849, !dbg !100
  %919 = extractelement <8 x bfloat> %863, i64 4, !dbg !85
  %920 = fpext bfloat %919 to float, !dbg !99
  %921 = fsub float %920, %849, !dbg !100
  %922 = extractelement <8 x bfloat> %863, i64 3, !dbg !85
  %923 = fpext bfloat %922 to float, !dbg !99
  %924 = fsub float %923, %849, !dbg !100
  %925 = extractelement <8 x bfloat> %863, i64 2, !dbg !85
  %926 = fpext bfloat %925 to float, !dbg !99
  %927 = fsub float %926, %849, !dbg !100
  %928 = extractelement <8 x bfloat> %863, i64 1, !dbg !85
  %929 = fpext bfloat %928 to float, !dbg !99
  %930 = fsub float %929, %849, !dbg !100
  %931 = extractelement <8 x bfloat> %863, i64 0, !dbg !85
  %932 = fpext bfloat %931 to float, !dbg !99
  %933 = fsub float %932, %849, !dbg !100
  %934 = extractvalue { i32, i32, i32, i32 } %881, 3, !dbg !95
  %935 = bitcast i32 %934 to <2 x bfloat>, !dbg !95
  %936 = extractvalue { i32, i32, i32, i32 } %881, 2, !dbg !95
  %937 = bitcast i32 %936 to <2 x bfloat>, !dbg !95
  %938 = extractvalue { i32, i32, i32, i32 } %881, 1, !dbg !95
  %939 = bitcast i32 %938 to <2 x bfloat>, !dbg !95
  %940 = extractvalue { i32, i32, i32, i32 } %881, 0, !dbg !95
  %941 = bitcast i32 %940 to <2 x bfloat>, !dbg !95
  %942 = extractvalue { i32, i32, i32, i32 } %879, 3, !dbg !93
  %943 = extractvalue { i32, i32, i32, i32 } %879, 2, !dbg !93
  %944 = extractvalue { i32, i32, i32, i32 } %879, 1, !dbg !93
  %945 = extractvalue { i32, i32, i32, i32 } %879, 0, !dbg !93
  %946 = extractvalue { i32, i32, i32, i32 } %878, 3, !dbg !93
  %947 = extractvalue { i32, i32, i32, i32 } %878, 2, !dbg !93
  %948 = extractvalue { i32, i32, i32, i32 } %878, 1, !dbg !93
  %949 = extractvalue { i32, i32, i32, i32 } %878, 0, !dbg !93
  %950 = extractvalue { i32, i32, i32, i32 } %873, 3, !dbg !90
  %951 = bitcast i32 %950 to <2 x bfloat>, !dbg !90
  %952 = extractvalue { i32, i32, i32, i32 } %873, 2, !dbg !90
  %953 = bitcast i32 %952 to <2 x bfloat>, !dbg !90
  %954 = extractvalue { i32, i32, i32, i32 } %873, 1, !dbg !90
  %955 = bitcast i32 %954 to <2 x bfloat>, !dbg !90
  %956 = extractvalue { i32, i32, i32, i32 } %873, 0, !dbg !90
  %957 = bitcast i32 %956 to <2 x bfloat>, !dbg !90
  %958 = extractvalue { i32, i32, i32, i32 } %871, 3, !dbg !88
  %959 = extractvalue { i32, i32, i32, i32 } %871, 2, !dbg !88
  %960 = extractvalue { i32, i32, i32, i32 } %871, 1, !dbg !88
  %961 = extractvalue { i32, i32, i32, i32 } %871, 0, !dbg !88
  %962 = extractvalue { i32, i32, i32, i32 } %870, 3, !dbg !88
  %963 = extractvalue { i32, i32, i32, i32 } %870, 2, !dbg !88
  %964 = extractvalue { i32, i32, i32, i32 } %870, 1, !dbg !88
  %965 = extractvalue { i32, i32, i32, i32 } %870, 0, !dbg !88
  %966 = and i32 %18, 1, !dbg !11
  %967 = or disjoint i32 %17, %966, !dbg !12
  %968 = icmp slt i32 %967, 512, !dbg !13
  %969 = fmul float %933, %.0.i135, !dbg !85
  %970 = fmul float %930, %.0.i135, !dbg !85
  %971 = fmul float %927, %.0.i135, !dbg !85
  %972 = fmul float %924, %.0.i135, !dbg !85
  %973 = fmul float %921, %.0.i135, !dbg !85
  %974 = fmul float %918, %.0.i135, !dbg !85
  %975 = fmul float %915, %.0.i135, !dbg !85
  %976 = fmul float %912, %.0.i135, !dbg !85
  %977 = getelementptr bfloat, ptr addrspace(1) %9, i64 %158, !dbg !101
  %978 = getelementptr bfloat, ptr addrspace(1) %9, i64 %160, !dbg !101
  %979 = getelementptr bfloat, ptr addrspace(1) %9, i64 %80, !dbg !101
  %980 = getelementptr bfloat, ptr addrspace(1) %9, i64 %82, !dbg !101
  %981 = shufflevector <8 x bfloat> %862, <8 x bfloat> poison, <2 x i32> <i32 0, i32 1>, !dbg !99
  %982 = fpext <2 x bfloat> %981 to <2 x float>, !dbg !99
  %983 = insertelement <2 x float> poison, float %848, i64 0, !dbg !100
  %984 = shufflevector <2 x float> %983, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %985 = fsub <2 x float> %982, %984, !dbg !100
  %986 = fpext <2 x bfloat> %941 to <2 x float>, !dbg !102
  %987 = insertelement <2 x i32> poison, i32 %949, i64 0, !dbg !93
  %988 = insertelement <2 x i32> %987, i32 %948, i64 1, !dbg !93
  %989 = bitcast <2 x i32> %988 to <2 x float>, !dbg !93
  %990 = fpext <2 x bfloat> %957 to <2 x float>, !dbg !103
  %991 = insertelement <2 x i32> poison, i32 %965, i64 0, !dbg !88
  %992 = insertelement <2 x i32> %991, i32 %964, i64 1, !dbg !88
  %993 = bitcast <2 x i32> %992 to <2 x float>, !dbg !88
  %994 = insertelement <2 x float> poison, float %.0.i111, i64 0, !dbg !85
  %995 = shufflevector <2 x float> %994, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !85
  %996 = fmul <2 x float> %985, %995, !dbg !85
  %997 = fadd <2 x float> %993, %990, !dbg !104
  %998 = fadd <2 x float> %997, splat (float 1.000000e+00), !dbg !105
  %999 = fmul <2 x float> %998, %996, !dbg !106
  %1000 = extractelement <2 x float> %998, i64 0, !dbg !106
  %1001 = fmul float %1000, %969, !dbg !106
  %1002 = extractelement <2 x float> %998, i64 1, !dbg !106
  %1003 = fmul float %1002, %970, !dbg !106
  %1004 = fadd <2 x float> %989, %986, !dbg !107
  %1005 = fadd <2 x float> %1004, %999, !dbg !108
  %1006 = extractelement <2 x float> %1004, i64 0, !dbg !108
  %1007 = fadd float %1006, %1001, !dbg !108
  %1008 = extractelement <2 x float> %1004, i64 1, !dbg !108
  %1009 = fadd float %1008, %1003, !dbg !108
  %1010 = extractelement <2 x float> %1005, i64 0, !dbg !109
  %1011 = select i1 %84, float %1010, float 0x7FF0000000000000, !dbg !110
  %1012 = extractelement <2 x float> %1005, i64 1, !dbg !109
  %1013 = select i1 %84, float %1012, float 0x7FF0000000000000, !dbg !110
  %1014 = select i1 %84, float %1007, float 0x7FF0000000000000, !dbg !110
  %1015 = select i1 %84, float %1009, float 0x7FF0000000000000, !dbg !110
  %1016 = select i1 %84, float %1010, float 0xFFF0000000000000, !dbg !109
  %1017 = select i1 %84, float %1012, float 0xFFF0000000000000, !dbg !109
  %1018 = select i1 %84, float %1007, float 0xFFF0000000000000, !dbg !109
  %1019 = select i1 %84, float %1009, float 0xFFF0000000000000, !dbg !109
  %1020 = fptrunc <2 x float> %1005 to <2 x bfloat>, !dbg !111
  %1021 = shufflevector <8 x bfloat> %862, <8 x bfloat> poison, <2 x i32> <i32 2, i32 3>, !dbg !99
  %1022 = fpext <2 x bfloat> %1021 to <2 x float>, !dbg !99
  %1023 = fsub <2 x float> %1022, %984, !dbg !100
  %1024 = fpext <2 x bfloat> %939 to <2 x float>, !dbg !102
  %1025 = insertelement <2 x i32> poison, i32 %947, i64 0, !dbg !93
  %1026 = insertelement <2 x i32> %1025, i32 %946, i64 1, !dbg !93
  %1027 = bitcast <2 x i32> %1026 to <2 x float>, !dbg !93
  %1028 = fpext <2 x bfloat> %955 to <2 x float>, !dbg !103
  %1029 = insertelement <2 x i32> poison, i32 %963, i64 0, !dbg !88
  %1030 = insertelement <2 x i32> %1029, i32 %962, i64 1, !dbg !88
  %1031 = bitcast <2 x i32> %1030 to <2 x float>, !dbg !88
  %1032 = fmul <2 x float> %1023, %995, !dbg !85
  %1033 = fadd <2 x float> %1031, %1028, !dbg !104
  %1034 = fadd <2 x float> %1033, splat (float 1.000000e+00), !dbg !105
  %1035 = fmul <2 x float> %1034, %1032, !dbg !106
  %1036 = extractelement <2 x float> %1034, i64 0, !dbg !106
  %1037 = fmul float %1036, %971, !dbg !106
  %1038 = extractelement <2 x float> %1034, i64 1, !dbg !106
  %1039 = fmul float %1038, %972, !dbg !106
  %1040 = fadd <2 x float> %1027, %1024, !dbg !107
  %1041 = fadd <2 x float> %1040, %1035, !dbg !108
  %1042 = extractelement <2 x float> %1040, i64 0, !dbg !108
  %1043 = fadd float %1042, %1037, !dbg !108
  %1044 = extractelement <2 x float> %1040, i64 1, !dbg !108
  %1045 = fadd float %1044, %1039, !dbg !108
  %1046 = extractelement <2 x float> %1041, i64 0, !dbg !109
  %1047 = select i1 %84, float %1046, float 0x7FF0000000000000, !dbg !110
  %1048 = extractelement <2 x float> %1041, i64 1, !dbg !109
  %1049 = select i1 %84, float %1048, float 0x7FF0000000000000, !dbg !110
  %1050 = select i1 %84, float %1043, float 0x7FF0000000000000, !dbg !110
  %1051 = select i1 %84, float %1045, float 0x7FF0000000000000, !dbg !110
  %1052 = select i1 %84, float %1046, float 0xFFF0000000000000, !dbg !109
  %1053 = select i1 %84, float %1048, float 0xFFF0000000000000, !dbg !109
  %1054 = select i1 %84, float %1043, float 0xFFF0000000000000, !dbg !109
  %1055 = select i1 %84, float %1045, float 0xFFF0000000000000, !dbg !109
  %1056 = fptrunc <2 x float> %1041 to <2 x bfloat>, !dbg !111
  %1057 = shufflevector <8 x bfloat> %862, <8 x bfloat> poison, <2 x i32> <i32 4, i32 5>, !dbg !99
  %1058 = fpext <2 x bfloat> %1057 to <2 x float>, !dbg !99
  %1059 = fsub <2 x float> %1058, %984, !dbg !100
  %1060 = fpext <2 x bfloat> %937 to <2 x float>, !dbg !102
  %1061 = insertelement <2 x i32> poison, i32 %945, i64 0, !dbg !93
  %1062 = insertelement <2 x i32> %1061, i32 %944, i64 1, !dbg !93
  %1063 = bitcast <2 x i32> %1062 to <2 x float>, !dbg !93
  %1064 = fpext <2 x bfloat> %953 to <2 x float>, !dbg !103
  %1065 = insertelement <2 x i32> poison, i32 %961, i64 0, !dbg !88
  %1066 = insertelement <2 x i32> %1065, i32 %960, i64 1, !dbg !88
  %1067 = bitcast <2 x i32> %1066 to <2 x float>, !dbg !88
  %1068 = fmul <2 x float> %1059, %995, !dbg !85
  %1069 = fadd <2 x float> %1067, %1064, !dbg !104
  %1070 = fadd <2 x float> %1069, splat (float 1.000000e+00), !dbg !105
  %1071 = fmul <2 x float> %1070, %1068, !dbg !106
  %1072 = extractelement <2 x float> %1070, i64 0, !dbg !106
  %1073 = fmul float %1072, %973, !dbg !106
  %1074 = extractelement <2 x float> %1070, i64 1, !dbg !106
  %1075 = fmul float %1074, %974, !dbg !106
  %1076 = fadd <2 x float> %1063, %1060, !dbg !107
  %1077 = fadd <2 x float> %1076, %1071, !dbg !108
  %1078 = extractelement <2 x float> %1076, i64 0, !dbg !108
  %1079 = fadd float %1078, %1073, !dbg !108
  %1080 = extractelement <2 x float> %1076, i64 1, !dbg !108
  %1081 = fadd float %1080, %1075, !dbg !108
  %1082 = extractelement <2 x float> %1077, i64 0, !dbg !109
  %1083 = select i1 %84, float %1082, float 0x7FF0000000000000, !dbg !110
  %1084 = extractelement <2 x float> %1077, i64 1, !dbg !109
  %1085 = select i1 %84, float %1084, float 0x7FF0000000000000, !dbg !110
  %1086 = select i1 %84, float %1079, float 0x7FF0000000000000, !dbg !110
  %1087 = select i1 %84, float %1081, float 0x7FF0000000000000, !dbg !110
  %1088 = select i1 %84, float %1082, float 0xFFF0000000000000, !dbg !109
  %1089 = select i1 %84, float %1084, float 0xFFF0000000000000, !dbg !109
  %1090 = select i1 %84, float %1079, float 0xFFF0000000000000, !dbg !109
  %1091 = select i1 %84, float %1081, float 0xFFF0000000000000, !dbg !109
  %1092 = fptrunc <2 x float> %1077 to <2 x bfloat>, !dbg !111
  %1093 = shufflevector <8 x bfloat> %862, <8 x bfloat> poison, <2 x i32> <i32 6, i32 7>, !dbg !99
  %1094 = fpext <2 x bfloat> %1093 to <2 x float>, !dbg !99
  %1095 = fsub <2 x float> %1094, %984, !dbg !100
  %1096 = fpext <2 x bfloat> %935 to <2 x float>, !dbg !102
  %1097 = insertelement <2 x i32> poison, i32 %943, i64 0, !dbg !93
  %1098 = insertelement <2 x i32> %1097, i32 %942, i64 1, !dbg !93
  %1099 = bitcast <2 x i32> %1098 to <2 x float>, !dbg !93
  %1100 = fpext <2 x bfloat> %951 to <2 x float>, !dbg !103
  %1101 = insertelement <2 x i32> poison, i32 %959, i64 0, !dbg !88
  %1102 = insertelement <2 x i32> %1101, i32 %958, i64 1, !dbg !88
  %1103 = bitcast <2 x i32> %1102 to <2 x float>, !dbg !88
  %1104 = fmul <2 x float> %1095, %995, !dbg !85
  %1105 = fadd <2 x float> %1103, %1100, !dbg !104
  %1106 = fadd <2 x float> %1105, splat (float 1.000000e+00), !dbg !105
  %1107 = fmul <2 x float> %1106, %1104, !dbg !106
  %1108 = extractelement <2 x float> %1106, i64 0, !dbg !106
  %1109 = fmul float %1108, %975, !dbg !106
  %1110 = extractelement <2 x float> %1106, i64 1, !dbg !106
  %1111 = fmul float %1110, %976, !dbg !106
  %1112 = fadd <2 x float> %1099, %1096, !dbg !107
  %1113 = fadd <2 x float> %1112, %1107, !dbg !108
  %1114 = extractelement <2 x float> %1112, i64 0, !dbg !108
  %1115 = fadd float %1114, %1109, !dbg !108
  %1116 = extractelement <2 x float> %1112, i64 1, !dbg !108
  %1117 = fadd float %1116, %1111, !dbg !108
  %1118 = extractelement <2 x float> %1113, i64 0, !dbg !109
  %1119 = select i1 %84, float %1118, float 0x7FF0000000000000, !dbg !110
  %1120 = extractelement <2 x float> %1113, i64 1, !dbg !109
  %1121 = select i1 %84, float %1120, float 0x7FF0000000000000, !dbg !110
  %1122 = select i1 %84, float %1115, float 0x7FF0000000000000, !dbg !110
  %1123 = select i1 %84, float %1117, float 0x7FF0000000000000, !dbg !110
  %1124 = select i1 %84, float %1118, float 0xFFF0000000000000, !dbg !109
  %1125 = select i1 %84, float %1120, float 0xFFF0000000000000, !dbg !109
  %1126 = select i1 %84, float %1115, float 0xFFF0000000000000, !dbg !109
  %1127 = select i1 %84, float %1117, float 0xFFF0000000000000, !dbg !109
  %1128 = fptrunc <2 x float> %1113 to <2 x bfloat>, !dbg !111
  %1129 = fptrunc float %1007 to bfloat, !dbg !111
  %1130 = fptrunc float %1009 to bfloat, !dbg !111
  %1131 = fptrunc float %1043 to bfloat, !dbg !111
  %1132 = fptrunc float %1045 to bfloat, !dbg !111
  %1133 = fptrunc float %1079 to bfloat, !dbg !111
  %1134 = fptrunc float %1081 to bfloat, !dbg !111
  %1135 = fptrunc float %1115 to bfloat, !dbg !111
  %1136 = fptrunc float %1117 to bfloat, !dbg !111
  %1137 = bitcast <2 x bfloat> %1020 to i32, !dbg !111
  %1138 = bitcast <2 x bfloat> %1056 to i32, !dbg !111
  %1139 = bitcast <2 x bfloat> %1092 to i32, !dbg !111
  %1140 = bitcast <2 x bfloat> %1128 to i32, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1137, i32 %1138, i32 %1139, i32 %1140, ptr addrspace(1) %977, i1 %84) #5, !dbg !111
  %1141 = insertelement <2 x bfloat> poison, bfloat %1129, i64 0, !dbg !111
  %1142 = insertelement <2 x bfloat> %1141, bfloat %1130, i64 1, !dbg !111
  %1143 = bitcast <2 x bfloat> %1142 to i32, !dbg !111
  %1144 = insertelement <2 x bfloat> poison, bfloat %1131, i64 0, !dbg !111
  %1145 = insertelement <2 x bfloat> %1144, bfloat %1132, i64 1, !dbg !111
  %1146 = bitcast <2 x bfloat> %1145 to i32, !dbg !111
  %1147 = insertelement <2 x bfloat> poison, bfloat %1133, i64 0, !dbg !111
  %1148 = insertelement <2 x bfloat> %1147, bfloat %1134, i64 1, !dbg !111
  %1149 = bitcast <2 x bfloat> %1148 to i32, !dbg !111
  %1150 = insertelement <2 x bfloat> poison, bfloat %1135, i64 0, !dbg !111
  %1151 = insertelement <2 x bfloat> %1150, bfloat %1136, i64 1, !dbg !111
  %1152 = bitcast <2 x bfloat> %1151 to i32, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1143, i32 %1146, i32 %1149, i32 %1152, ptr addrspace(1) %978, i1 %84) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %1153 = fcmp olt float %1011, %1013, !dbg !114
  %1154 = fcmp uno float %1011, 0.000000e+00, !dbg !115
  %1155 = or i1 %1153, %1154, !dbg !116
  %1156 = select i1 %1155, float %1011, float %1013, !dbg !117
  %1157 = fcmp olt float %1156, %1047, !dbg !114
  %1158 = fcmp uno float %1156, 0.000000e+00, !dbg !115
  %1159 = or i1 %1157, %1158, !dbg !116
  %1160 = select i1 %1159, float %1156, float %1047, !dbg !117
  %1161 = fcmp olt float %1160, %1049, !dbg !114
  %1162 = fcmp uno float %1160, 0.000000e+00, !dbg !115
  %1163 = or i1 %1161, %1162, !dbg !116
  %1164 = select i1 %1163, float %1160, float %1049, !dbg !117
  %1165 = fcmp olt float %1164, %1083, !dbg !114
  %1166 = fcmp uno float %1164, 0.000000e+00, !dbg !115
  %1167 = or i1 %1165, %1166, !dbg !116
  %1168 = select i1 %1167, float %1164, float %1083, !dbg !117
  %1169 = fcmp olt float %1168, %1085, !dbg !114
  %1170 = fcmp uno float %1168, 0.000000e+00, !dbg !115
  %1171 = or i1 %1169, %1170, !dbg !116
  %1172 = select i1 %1171, float %1168, float %1085, !dbg !117
  %1173 = fcmp olt float %1172, %1119, !dbg !114
  %1174 = fcmp uno float %1172, 0.000000e+00, !dbg !115
  %1175 = or i1 %1173, %1174, !dbg !116
  %1176 = select i1 %1175, float %1172, float %1119, !dbg !117
  %1177 = fcmp olt float %1176, %1121, !dbg !114
  %1178 = fcmp uno float %1176, 0.000000e+00, !dbg !115
  %1179 = or i1 %1177, %1178, !dbg !116
  %1180 = select i1 %1179, float %1176, float %1121, !dbg !117
  %1181 = fcmp olt float %1014, %1015, !dbg !114
  %1182 = fcmp uno float %1014, 0.000000e+00, !dbg !115
  %1183 = or i1 %1181, %1182, !dbg !116
  %1184 = select i1 %1183, float %1014, float %1015, !dbg !117
  %1185 = fcmp olt float %1184, %1050, !dbg !114
  %1186 = fcmp uno float %1184, 0.000000e+00, !dbg !115
  %1187 = or i1 %1185, %1186, !dbg !116
  %1188 = select i1 %1187, float %1184, float %1050, !dbg !117
  %1189 = fcmp olt float %1188, %1051, !dbg !114
  %1190 = fcmp uno float %1188, 0.000000e+00, !dbg !115
  %1191 = or i1 %1189, %1190, !dbg !116
  %1192 = select i1 %1191, float %1188, float %1051, !dbg !117
  %1193 = fcmp olt float %1192, %1086, !dbg !114
  %1194 = fcmp uno float %1192, 0.000000e+00, !dbg !115
  %1195 = or i1 %1193, %1194, !dbg !116
  %1196 = select i1 %1195, float %1192, float %1086, !dbg !117
  %1197 = fcmp olt float %1196, %1087, !dbg !114
  %1198 = fcmp uno float %1196, 0.000000e+00, !dbg !115
  %1199 = or i1 %1197, %1198, !dbg !116
  %1200 = select i1 %1199, float %1196, float %1087, !dbg !117
  %1201 = fcmp olt float %1200, %1122, !dbg !114
  %1202 = fcmp uno float %1200, 0.000000e+00, !dbg !115
  %1203 = or i1 %1201, %1202, !dbg !116
  %1204 = select i1 %1203, float %1200, float %1122, !dbg !117
  %1205 = fcmp olt float %1204, %1123, !dbg !114
  %1206 = fcmp uno float %1204, 0.000000e+00, !dbg !115
  %1207 = or i1 %1205, %1206, !dbg !116
  %1208 = select i1 %1207, float %1204, float %1123, !dbg !117
  %1209 = bitcast float %1180 to i32, !dbg !112
  %1210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1209, i32 16, i32 31), !dbg !112
  %1211 = bitcast i32 %1210 to float, !dbg !112
  %1212 = fcmp olt float %1180, %1211, !dbg !114
  %1213 = fcmp uno float %1180, 0.000000e+00, !dbg !115
  %1214 = or i1 %1213, %1212, !dbg !116
  %1215 = select i1 %1214, float %1180, float %1211, !dbg !117
  %1216 = bitcast float %1215 to i32, !dbg !112
  %1217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 8, i32 31), !dbg !112
  %1218 = bitcast i32 %1217 to float, !dbg !112
  %1219 = fcmp olt float %1215, %1218, !dbg !114
  %1220 = fcmp uno float %1215, 0.000000e+00, !dbg !115
  %1221 = or i1 %1219, %1220, !dbg !116
  %1222 = select i1 %1221, float %1215, float %1218, !dbg !117
  %1223 = bitcast float %1222 to i32, !dbg !112
  %1224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1223, i32 4, i32 31), !dbg !112
  %1225 = bitcast i32 %1224 to float, !dbg !112
  %1226 = fcmp olt float %1222, %1225, !dbg !114
  %1227 = fcmp uno float %1222, 0.000000e+00, !dbg !115
  %1228 = or i1 %1226, %1227, !dbg !116
  %1229 = select i1 %1228, float %1222, float %1225, !dbg !117
  %1230 = bitcast float %1229 to i32, !dbg !112
  %1231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1230, i32 2, i32 31), !dbg !112
  %1232 = bitcast i32 %1231 to float, !dbg !112
  %1233 = fcmp olt float %1229, %1232, !dbg !114
  %1234 = fcmp uno float %1229, 0.000000e+00, !dbg !115
  %1235 = or i1 %1233, %1234, !dbg !116
  %1236 = select i1 %1235, float %1229, float %1232, !dbg !117
  %1237 = bitcast float %1236 to i32, !dbg !112
  %1238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1237, i32 1, i32 31), !dbg !112
  %1239 = bitcast i32 %1238 to float, !dbg !112
  %1240 = fcmp olt float %1236, %1239, !dbg !114
  %1241 = fcmp uno float %1236, 0.000000e+00, !dbg !115
  %1242 = or i1 %1240, %1241, !dbg !116
  %1243 = bitcast float %1208 to i32, !dbg !112
  %1244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1243, i32 16, i32 31), !dbg !112
  %1245 = bitcast i32 %1244 to float, !dbg !112
  %1246 = fcmp olt float %1208, %1245, !dbg !114
  %1247 = fcmp uno float %1208, 0.000000e+00, !dbg !115
  %1248 = or i1 %1246, %1247, !dbg !116
  %1249 = select i1 %1248, float %1208, float %1245, !dbg !117
  %1250 = bitcast float %1249 to i32, !dbg !112
  %1251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1250, i32 8, i32 31), !dbg !112
  %1252 = bitcast i32 %1251 to float, !dbg !112
  %1253 = fcmp olt float %1249, %1252, !dbg !114
  %1254 = fcmp uno float %1249, 0.000000e+00, !dbg !115
  %1255 = or i1 %1253, %1254, !dbg !116
  %1256 = select i1 %1255, float %1249, float %1252, !dbg !117
  %1257 = bitcast float %1256 to i32, !dbg !112
  %1258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1257, i32 4, i32 31), !dbg !112
  %1259 = bitcast i32 %1258 to float, !dbg !112
  %1260 = fcmp olt float %1256, %1259, !dbg !114
  %1261 = fcmp uno float %1256, 0.000000e+00, !dbg !115
  %1262 = or i1 %1260, %1261, !dbg !116
  %1263 = select i1 %1262, float %1256, float %1259, !dbg !117
  %1264 = bitcast float %1263 to i32, !dbg !112
  %1265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 2, i32 31), !dbg !112
  %1266 = bitcast i32 %1265 to float, !dbg !112
  %1267 = fcmp olt float %1263, %1266, !dbg !114
  %1268 = fcmp uno float %1263, 0.000000e+00, !dbg !115
  %1269 = or i1 %1267, %1268, !dbg !116
  %1270 = select i1 %1269, float %1263, float %1266, !dbg !117
  %1271 = bitcast float %1270 to i32, !dbg !112
  %1272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 1, i32 31), !dbg !112
  %1273 = bitcast i32 %1272 to float, !dbg !112
  %1274 = fcmp olt float %1270, %1273, !dbg !114
  %1275 = fcmp uno float %1270, 0.000000e+00, !dbg !115
  %1276 = or i1 %1274, %1275, !dbg !116
  %1277 = select i1 %1242, i32 %1237, i32 %1238, !dbg !117
  %1278 = insertelement <1 x i32> poison, i32 %1277, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %738, <1 x i32> %1278, i1 %737) #5, !dbg !112
  %1279 = select i1 %1276, i32 %1271, i32 %1272, !dbg !117
  %1280 = insertelement <1 x i32> poison, i32 %1279, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %745, <1 x i32> %1280, i1 %737) #5, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %1281 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %752, i1 %751) #5, !dbg !112
  %1282 = bitcast i32 %1281 to float, !dbg !112
  %1283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1281, i32 8, i32 31), !dbg !112
  %1284 = bitcast i32 %1283 to float, !dbg !112
  %1285 = fcmp olt float %1282, %1284, !dbg !114
  %1286 = fcmp uno float %1282, 0.000000e+00, !dbg !115
  %1287 = or i1 %1286, %1285, !dbg !116
  %1288 = select i1 %1287, float %1282, float %1284, !dbg !117
  %1289 = bitcast float %1288 to i32, !dbg !112
  %1290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1289, i32 4, i32 31), !dbg !112
  %1291 = bitcast i32 %1290 to float, !dbg !112
  %1292 = fcmp olt float %1288, %1291, !dbg !114
  %1293 = fcmp uno float %1288, 0.000000e+00, !dbg !115
  %1294 = or i1 %1292, %1293, !dbg !116
  %1295 = select i1 %1294, float %1288, float %1291, !dbg !117
  %1296 = bitcast float %1295 to i32, !dbg !112
  %1297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1296, i32 2, i32 31), !dbg !112
  %1298 = bitcast i32 %1297 to float, !dbg !112
  %1299 = fcmp olt float %1295, %1298, !dbg !114
  %1300 = fcmp uno float %1295, 0.000000e+00, !dbg !115
  %1301 = or i1 %1299, %1300, !dbg !116
  %1302 = select i1 %1301, float %1295, float %1298, !dbg !117
  %1303 = bitcast float %1302 to i32, !dbg !112
  %1304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1303, i32 1, i32 31), !dbg !112
  %1305 = bitcast i32 %1304 to float, !dbg !112
  %1306 = fcmp olt float %1302, %1305, !dbg !114
  %1307 = fcmp uno float %1302, 0.000000e+00, !dbg !115
  %1308 = or i1 %1306, %1307, !dbg !116
  %1309 = select i1 %1308, i32 %1303, i32 %1304, !dbg !117
  %1310 = insertelement <1 x i32> poison, i32 %1309, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %752, <1 x i32> %1310, i1 %844) #5, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %1311 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !112
  %1312 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %1313 = bitcast float %1311 to i32, !dbg !118
  %1314 = bitcast float %1312 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1313, i32 %1314, i1 true) #5, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %1315 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %966, !dbg !118
  %1316 = load float, ptr addrspace(3) %1315, align 4, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %1317 = fcmp ogt float %1016, %1017, !dbg !121
  %1318 = fcmp uno float %1016, 0.000000e+00, !dbg !122
  %1319 = or i1 %1317, %1318, !dbg !123
  %1320 = select i1 %1319, float %1016, float %1017, !dbg !124
  %1321 = fcmp ogt float %1320, %1052, !dbg !121
  %1322 = fcmp uno float %1320, 0.000000e+00, !dbg !122
  %1323 = or i1 %1321, %1322, !dbg !123
  %1324 = select i1 %1323, float %1320, float %1052, !dbg !124
  %1325 = fcmp ogt float %1324, %1053, !dbg !121
  %1326 = fcmp uno float %1324, 0.000000e+00, !dbg !122
  %1327 = or i1 %1325, %1326, !dbg !123
  %1328 = select i1 %1327, float %1324, float %1053, !dbg !124
  %1329 = fcmp ogt float %1328, %1088, !dbg !121
  %1330 = fcmp uno float %1328, 0.000000e+00, !dbg !122
  %1331 = or i1 %1329, %1330, !dbg !123
  %1332 = select i1 %1331, float %1328, float %1088, !dbg !124
  %1333 = fcmp ogt float %1332, %1089, !dbg !121
  %1334 = fcmp uno float %1332, 0.000000e+00, !dbg !122
  %1335 = or i1 %1333, %1334, !dbg !123
  %1336 = select i1 %1335, float %1332, float %1089, !dbg !124
  %1337 = fcmp ogt float %1336, %1124, !dbg !121
  %1338 = fcmp uno float %1336, 0.000000e+00, !dbg !122
  %1339 = or i1 %1337, %1338, !dbg !123
  %1340 = select i1 %1339, float %1336, float %1124, !dbg !124
  %1341 = fcmp ogt float %1340, %1125, !dbg !121
  %1342 = fcmp uno float %1340, 0.000000e+00, !dbg !122
  %1343 = or i1 %1341, %1342, !dbg !123
  %1344 = select i1 %1343, float %1340, float %1125, !dbg !124
  %1345 = fcmp ogt float %1018, %1019, !dbg !121
  %1346 = fcmp uno float %1018, 0.000000e+00, !dbg !122
  %1347 = or i1 %1345, %1346, !dbg !123
  %1348 = select i1 %1347, float %1018, float %1019, !dbg !124
  %1349 = fcmp ogt float %1348, %1054, !dbg !121
  %1350 = fcmp uno float %1348, 0.000000e+00, !dbg !122
  %1351 = or i1 %1349, %1350, !dbg !123
  %1352 = select i1 %1351, float %1348, float %1054, !dbg !124
  %1353 = fcmp ogt float %1352, %1055, !dbg !121
  %1354 = fcmp uno float %1352, 0.000000e+00, !dbg !122
  %1355 = or i1 %1353, %1354, !dbg !123
  %1356 = select i1 %1355, float %1352, float %1055, !dbg !124
  %1357 = fcmp ogt float %1356, %1090, !dbg !121
  %1358 = fcmp uno float %1356, 0.000000e+00, !dbg !122
  %1359 = or i1 %1357, %1358, !dbg !123
  %1360 = select i1 %1359, float %1356, float %1090, !dbg !124
  %1361 = fcmp ogt float %1360, %1091, !dbg !121
  %1362 = fcmp uno float %1360, 0.000000e+00, !dbg !122
  %1363 = or i1 %1361, %1362, !dbg !123
  %1364 = select i1 %1363, float %1360, float %1091, !dbg !124
  %1365 = fcmp ogt float %1364, %1126, !dbg !121
  %1366 = fcmp uno float %1364, 0.000000e+00, !dbg !122
  %1367 = or i1 %1365, %1366, !dbg !123
  %1368 = select i1 %1367, float %1364, float %1126, !dbg !124
  %1369 = fcmp ogt float %1368, %1127, !dbg !121
  %1370 = fcmp uno float %1368, 0.000000e+00, !dbg !122
  %1371 = or i1 %1369, %1370, !dbg !123
  %1372 = select i1 %1371, float %1368, float %1127, !dbg !124
  %1373 = bitcast float %1344 to i32, !dbg !119
  %1374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1373, i32 16, i32 31), !dbg !119
  %1375 = bitcast i32 %1374 to float, !dbg !119
  %1376 = fcmp ogt float %1344, %1375, !dbg !121
  %1377 = fcmp uno float %1344, 0.000000e+00, !dbg !122
  %1378 = or i1 %1377, %1376, !dbg !123
  %1379 = select i1 %1378, float %1344, float %1375, !dbg !124
  %1380 = bitcast float %1379 to i32, !dbg !119
  %1381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1380, i32 8, i32 31), !dbg !119
  %1382 = bitcast i32 %1381 to float, !dbg !119
  %1383 = fcmp ogt float %1379, %1382, !dbg !121
  %1384 = fcmp uno float %1379, 0.000000e+00, !dbg !122
  %1385 = or i1 %1383, %1384, !dbg !123
  %1386 = select i1 %1385, float %1379, float %1382, !dbg !124
  %1387 = bitcast float %1386 to i32, !dbg !119
  %1388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1387, i32 4, i32 31), !dbg !119
  %1389 = bitcast i32 %1388 to float, !dbg !119
  %1390 = fcmp ogt float %1386, %1389, !dbg !121
  %1391 = fcmp uno float %1386, 0.000000e+00, !dbg !122
  %1392 = or i1 %1390, %1391, !dbg !123
  %1393 = select i1 %1392, float %1386, float %1389, !dbg !124
  %1394 = bitcast float %1393 to i32, !dbg !119
  %1395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1394, i32 2, i32 31), !dbg !119
  %1396 = bitcast i32 %1395 to float, !dbg !119
  %1397 = fcmp ogt float %1393, %1396, !dbg !121
  %1398 = fcmp uno float %1393, 0.000000e+00, !dbg !122
  %1399 = or i1 %1397, %1398, !dbg !123
  %1400 = select i1 %1399, float %1393, float %1396, !dbg !124
  %1401 = bitcast float %1400 to i32, !dbg !119
  %1402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1401, i32 1, i32 31), !dbg !119
  %1403 = bitcast i32 %1402 to float, !dbg !119
  %1404 = fcmp ogt float %1400, %1403, !dbg !121
  %1405 = fcmp uno float %1400, 0.000000e+00, !dbg !122
  %1406 = or i1 %1404, %1405, !dbg !123
  %1407 = bitcast float %1372 to i32, !dbg !119
  %1408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1407, i32 16, i32 31), !dbg !119
  %1409 = bitcast i32 %1408 to float, !dbg !119
  %1410 = fcmp ogt float %1372, %1409, !dbg !121
  %1411 = fcmp uno float %1372, 0.000000e+00, !dbg !122
  %1412 = or i1 %1411, %1410, !dbg !123
  %1413 = select i1 %1412, float %1372, float %1409, !dbg !124
  %1414 = bitcast float %1413 to i32, !dbg !119
  %1415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1414, i32 8, i32 31), !dbg !119
  %1416 = bitcast i32 %1415 to float, !dbg !119
  %1417 = fcmp ogt float %1413, %1416, !dbg !121
  %1418 = fcmp uno float %1413, 0.000000e+00, !dbg !122
  %1419 = or i1 %1417, %1418, !dbg !123
  %1420 = select i1 %1419, float %1413, float %1416, !dbg !124
  %1421 = bitcast float %1420 to i32, !dbg !119
  %1422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1421, i32 4, i32 31), !dbg !119
  %1423 = bitcast i32 %1422 to float, !dbg !119
  %1424 = fcmp ogt float %1420, %1423, !dbg !121
  %1425 = fcmp uno float %1420, 0.000000e+00, !dbg !122
  %1426 = or i1 %1424, %1425, !dbg !123
  %1427 = select i1 %1426, float %1420, float %1423, !dbg !124
  %1428 = bitcast float %1427 to i32, !dbg !119
  %1429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1428, i32 2, i32 31), !dbg !119
  %1430 = bitcast i32 %1429 to float, !dbg !119
  %1431 = fcmp ogt float %1427, %1430, !dbg !121
  %1432 = fcmp uno float %1427, 0.000000e+00, !dbg !122
  %1433 = or i1 %1431, %1432, !dbg !123
  %1434 = select i1 %1433, float %1427, float %1430, !dbg !124
  %1435 = bitcast float %1434 to i32, !dbg !119
  %1436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1435, i32 1, i32 31), !dbg !119
  %1437 = bitcast i32 %1436 to float, !dbg !119
  %1438 = fcmp ogt float %1434, %1437, !dbg !121
  %1439 = fcmp uno float %1434, 0.000000e+00, !dbg !122
  %1440 = or i1 %1438, %1439, !dbg !123
  %1441 = select i1 %1406, i32 %1401, i32 %1402, !dbg !124
  %1442 = insertelement <1 x i32> poison, i32 %1441, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %738, <1 x i32> %1442, i1 %737) #5, !dbg !119
  %1443 = select i1 %1440, i32 %1435, i32 %1436, !dbg !124
  %1444 = insertelement <1 x i32> poison, i32 %1443, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %745, <1 x i32> %1444, i1 %737) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %1445 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %752, i1 %751) #5, !dbg !119
  %1446 = bitcast i32 %1445 to float, !dbg !119
  %1447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1445, i32 8, i32 31), !dbg !119
  %1448 = bitcast i32 %1447 to float, !dbg !119
  %1449 = fcmp ogt float %1446, %1448, !dbg !121
  %1450 = fcmp uno float %1446, 0.000000e+00, !dbg !122
  %1451 = or i1 %1450, %1449, !dbg !123
  %1452 = select i1 %1451, float %1446, float %1448, !dbg !124
  %1453 = bitcast float %1452 to i32, !dbg !119
  %1454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1453, i32 4, i32 31), !dbg !119
  %1455 = bitcast i32 %1454 to float, !dbg !119
  %1456 = fcmp ogt float %1452, %1455, !dbg !121
  %1457 = fcmp uno float %1452, 0.000000e+00, !dbg !122
  %1458 = or i1 %1456, %1457, !dbg !123
  %1459 = select i1 %1458, float %1452, float %1455, !dbg !124
  %1460 = bitcast float %1459 to i32, !dbg !119
  %1461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1460, i32 2, i32 31), !dbg !119
  %1462 = bitcast i32 %1461 to float, !dbg !119
  %1463 = fcmp ogt float %1459, %1462, !dbg !121
  %1464 = fcmp uno float %1459, 0.000000e+00, !dbg !122
  %1465 = or i1 %1463, %1464, !dbg !123
  %1466 = select i1 %1465, float %1459, float %1462, !dbg !124
  %1467 = bitcast float %1466 to i32, !dbg !119
  %1468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1467, i32 1, i32 31), !dbg !119
  %1469 = bitcast i32 %1468 to float, !dbg !119
  %1470 = fcmp ogt float %1466, %1469, !dbg !121
  %1471 = fcmp uno float %1466, 0.000000e+00, !dbg !122
  %1472 = or i1 %1470, %1471, !dbg !123
  %1473 = select i1 %1472, i32 %1467, i32 %1468, !dbg !124
  %1474 = insertelement <1 x i32> poison, i32 %1473, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %752, <1 x i32> %1474, i1 %844) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %1475 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !119
  %1476 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %1477 = bitcast float %1475 to i32, !dbg !125
  %1478 = bitcast float %1476 to i32, !dbg !125
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1477, i32 %1478, i1 true) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %1479 = load float, ptr addrspace(3) %1315, align 4, !dbg !125
  %1480 = sext i32 %967 to i64, !dbg !126
  %1481 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1480, !dbg !126
  %1482 = fptrunc float %1316 to bfloat, !dbg !118
  %1483 = and i32 %18, 510, !dbg !118
  %1484 = icmp eq i32 %1483, 0, !dbg !118
  %1485 = bitcast bfloat %1482 to i16, !dbg !118
  %1486 = and i1 %1484, %968, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1485, ptr addrspace(1) %1481, i1 %1486) #5, !dbg !118
  %1487 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1480, !dbg !127
  %1488 = fptrunc float %1479 to bfloat, !dbg !125
  %1489 = bitcast bfloat %1488 to i16, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1489, ptr addrspace(1) %1487, i1 %1486) #5, !dbg !125
  %1490 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %979, i1 %85) #5, !dbg !128
  %1491 = extractvalue { i32, i32, i32, i32 } %1490, 0, !dbg !128
  %1492 = bitcast i32 %1491 to <2 x bfloat>, !dbg !128
  %1493 = extractvalue { i32, i32, i32, i32 } %1490, 1, !dbg !128
  %1494 = bitcast i32 %1493 to <2 x bfloat>, !dbg !128
  %1495 = extractvalue { i32, i32, i32, i32 } %1490, 2, !dbg !128
  %1496 = bitcast i32 %1495 to <2 x bfloat>, !dbg !128
  %1497 = extractvalue { i32, i32, i32, i32 } %1490, 3, !dbg !128
  %1498 = bitcast i32 %1497 to <2 x bfloat>, !dbg !128
  %1499 = extractelement <2 x bfloat> %1492, i64 0, !dbg !128
  %1500 = extractelement <2 x bfloat> %1492, i64 1, !dbg !128
  %1501 = extractelement <2 x bfloat> %1494, i64 0, !dbg !128
  %1502 = extractelement <2 x bfloat> %1494, i64 1, !dbg !128
  %1503 = extractelement <2 x bfloat> %1496, i64 0, !dbg !128
  %1504 = extractelement <2 x bfloat> %1496, i64 1, !dbg !128
  %1505 = extractelement <2 x bfloat> %1498, i64 0, !dbg !128
  %1506 = extractelement <2 x bfloat> %1498, i64 1, !dbg !128
  %1507 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %980, i1 %85) #5, !dbg !128
  %1508 = extractvalue { i32, i32, i32, i32 } %1507, 0, !dbg !128
  %1509 = bitcast i32 %1508 to <2 x bfloat>, !dbg !128
  %1510 = extractvalue { i32, i32, i32, i32 } %1507, 1, !dbg !128
  %1511 = bitcast i32 %1510 to <2 x bfloat>, !dbg !128
  %1512 = extractvalue { i32, i32, i32, i32 } %1507, 2, !dbg !128
  %1513 = bitcast i32 %1512 to <2 x bfloat>, !dbg !128
  %1514 = extractvalue { i32, i32, i32, i32 } %1507, 3, !dbg !128
  %1515 = bitcast i32 %1514 to <2 x bfloat>, !dbg !128
  %1516 = extractelement <2 x bfloat> %1509, i64 0, !dbg !128
  %1517 = extractelement <2 x bfloat> %1509, i64 1, !dbg !128
  %1518 = extractelement <2 x bfloat> %1511, i64 0, !dbg !128
  %1519 = extractelement <2 x bfloat> %1511, i64 1, !dbg !128
  %1520 = extractelement <2 x bfloat> %1513, i64 0, !dbg !128
  %1521 = extractelement <2 x bfloat> %1513, i64 1, !dbg !128
  %1522 = extractelement <2 x bfloat> %1515, i64 0, !dbg !128
  %1523 = extractelement <2 x bfloat> %1515, i64 1, !dbg !128
  %1524 = fpext bfloat %1499 to float, !dbg !129
  %1525 = fpext bfloat %1500 to float, !dbg !129
  %1526 = fpext bfloat %1501 to float, !dbg !129
  %1527 = fpext bfloat %1502 to float, !dbg !129
  %1528 = fpext bfloat %1503 to float, !dbg !129
  %1529 = fpext bfloat %1504 to float, !dbg !129
  %1530 = fpext bfloat %1505 to float, !dbg !129
  %1531 = fpext bfloat %1506 to float, !dbg !129
  %1532 = fpext bfloat %1516 to float, !dbg !129
  %1533 = fpext bfloat %1517 to float, !dbg !129
  %1534 = fpext bfloat %1518 to float, !dbg !129
  %1535 = fpext bfloat %1519 to float, !dbg !129
  %1536 = fpext bfloat %1520 to float, !dbg !129
  %1537 = fpext bfloat %1521 to float, !dbg !129
  %1538 = fpext bfloat %1522 to float, !dbg !129
  %1539 = fpext bfloat %1523 to float, !dbg !129
  %.inv88 = fcmp oge float %1311, 0.000000e+00, !dbg !130
  %1540 = select i1 %.inv88, float 0.000000e+00, float %1311, !dbg !130
  %.inv89 = fcmp oge float %1312, 0.000000e+00, !dbg !130
  %1541 = select i1 %.inv89, float 0.000000e+00, float %1312, !dbg !130
  %1542 = fsub float 0.000000e+00, %1540, !dbg !132
  %1543 = fsub float 0.000000e+00, %1541, !dbg !132
  %.inv90 = fcmp ole float %1475, 0.000000e+00, !dbg !133
  %1544 = select i1 %.inv90, float 0.000000e+00, float %1475, !dbg !133
  %.inv91 = fcmp ole float %1476, 0.000000e+00, !dbg !133
  %1545 = select i1 %.inv91, float 0.000000e+00, float %1476, !dbg !133
  %1546 = fcmp ogt float %1542, %1544, !dbg !135
  %1547 = fcmp ogt float %1543, %1545, !dbg !135
  %1548 = fcmp uno float %1542, 0.000000e+00, !dbg !137
  %1549 = fcmp uno float %1543, 0.000000e+00, !dbg !137
  %1550 = or i1 %1548, %1546, !dbg !138
  %1551 = or i1 %1549, %1547, !dbg !138
  %1552 = select i1 %1550, float %1542, float %1544, !dbg !139
  %1553 = select i1 %1551, float %1543, float %1545, !dbg !139
  %1554 = fmul float %1552, 0x3F80204080000000, !dbg !140
  %1555 = fmul float %1553, 0x3F80204080000000, !dbg !140
  %1556 = fcmp ogt float %1554, 0x3EE4F8B580000000, !dbg !141
  %1557 = fcmp ogt float %1555, 0x3EE4F8B580000000, !dbg !141
  %1558 = fcmp uno float %1554, 0.000000e+00, !dbg !143
  %1559 = fcmp uno float %1555, 0.000000e+00, !dbg !143
  %1560 = or i1 %1556, %1558, !dbg !144
  %1561 = or i1 %1557, %1559, !dbg !144
  %1562 = select i1 %1560, float %1554, float 0x3EE4F8B580000000, !dbg !145
  %1563 = select i1 %1561, float %1555, float 0x3EE4F8B580000000, !dbg !145
  %1564 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1562), !dbg !146
  %1565 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1563), !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1566 = bitcast float %1564 to <1 x i32>, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1566, i1 true) #5, !dbg !147
  %1567 = bitcast float %1565 to <1 x i32>, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1567, i1 true) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1568 = lshr exact i32 %20, 5, !dbg !147
  %1569 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1568, !dbg !147
  %1570 = load float, ptr addrspace(3) %1569, align 8, !dbg !147
  %1571 = fmul float %1570, %1524, !dbg !147
  %1572 = fmul float %1570, %1525, !dbg !147
  %1573 = fmul float %1570, %1526, !dbg !147
  %1574 = fmul float %1570, %1527, !dbg !147
  %1575 = fmul float %1570, %1528, !dbg !147
  %1576 = fmul float %1570, %1529, !dbg !147
  %1577 = fmul float %1570, %1530, !dbg !147
  %1578 = fmul float %1570, %1531, !dbg !147
  %1579 = fmul float %1570, %1532, !dbg !147
  %1580 = fmul float %1570, %1533, !dbg !147
  %1581 = fmul float %1570, %1534, !dbg !147
  %1582 = fmul float %1570, %1535, !dbg !147
  %1583 = fmul float %1570, %1536, !dbg !147
  %1584 = fmul float %1570, %1537, !dbg !147
  %1585 = fmul float %1570, %1538, !dbg !147
  %1586 = fmul float %1570, %1539, !dbg !147
  %1587 = tail call float @llvm.nvvm.round.f(float %1571) #5, !dbg !148
  %1588 = tail call float @llvm.nvvm.round.f(float %1572) #5, !dbg !148
  %1589 = tail call float @llvm.nvvm.round.f(float %1573) #5, !dbg !148
  %1590 = tail call float @llvm.nvvm.round.f(float %1574) #5, !dbg !148
  %1591 = tail call float @llvm.nvvm.round.f(float %1575) #5, !dbg !148
  %1592 = tail call float @llvm.nvvm.round.f(float %1576) #5, !dbg !148
  %1593 = tail call float @llvm.nvvm.round.f(float %1577) #5, !dbg !148
  %1594 = tail call float @llvm.nvvm.round.f(float %1578) #5, !dbg !148
  %1595 = tail call float @llvm.nvvm.round.f(float %1579) #5, !dbg !148
  %1596 = tail call float @llvm.nvvm.round.f(float %1580) #5, !dbg !148
  %1597 = tail call float @llvm.nvvm.round.f(float %1581) #5, !dbg !148
  %1598 = tail call float @llvm.nvvm.round.f(float %1582) #5, !dbg !148
  %1599 = tail call float @llvm.nvvm.round.f(float %1583) #5, !dbg !148
  %1600 = tail call float @llvm.nvvm.round.f(float %1584) #5, !dbg !148
  %1601 = tail call float @llvm.nvvm.round.f(float %1585) #5, !dbg !148
  %1602 = tail call float @llvm.nvvm.round.f(float %1586) #5, !dbg !148
  %1603 = insertelement <4 x float> poison, float %1587, i64 0, !dbg !149
  %1604 = insertelement <4 x float> %1603, float %1588, i64 1, !dbg !149
  %1605 = insertelement <4 x float> %1604, float %1589, i64 2, !dbg !149
  %1606 = insertelement <4 x float> %1605, float %1590, i64 3, !dbg !149
  %1607 = fcmp ogt <4 x float> %1606, splat (float -1.270000e+02), !dbg !149
  %1608 = fcmp uno <4 x float> %1606, zeroinitializer, !dbg !151
  %1609 = or <4 x i1> %1607, %1608, !dbg !152
  %1610 = select <4 x i1> %1609, <4 x float> %1606, <4 x float> splat (float -1.270000e+02), !dbg !153
  %1611 = fcmp olt <4 x float> %1610, splat (float 1.270000e+02), !dbg !154
  %1612 = fcmp uno <4 x float> %1610, zeroinitializer, !dbg !156
  %1613 = or <4 x i1> %1611, %1612, !dbg !157
  %1614 = fptosi <4 x float> %1610 to <4 x i8>, !dbg !158
  %1615 = select <4 x i1> %1613, <4 x i8> %1614, <4 x i8> splat (i8 127), !dbg !159
  %1616 = insertelement <4 x float> poison, float %1591, i64 0, !dbg !149
  %1617 = insertelement <4 x float> %1616, float %1592, i64 1, !dbg !149
  %1618 = insertelement <4 x float> %1617, float %1593, i64 2, !dbg !149
  %1619 = insertelement <4 x float> %1618, float %1594, i64 3, !dbg !149
  %1620 = fcmp ogt <4 x float> %1619, splat (float -1.270000e+02), !dbg !149
  %1621 = fcmp uno <4 x float> %1619, zeroinitializer, !dbg !151
  %1622 = or <4 x i1> %1620, %1621, !dbg !152
  %1623 = select <4 x i1> %1622, <4 x float> %1619, <4 x float> splat (float -1.270000e+02), !dbg !153
  %1624 = fcmp olt <4 x float> %1623, splat (float 1.270000e+02), !dbg !154
  %1625 = fcmp uno <4 x float> %1623, zeroinitializer, !dbg !156
  %1626 = or <4 x i1> %1624, %1625, !dbg !157
  %1627 = fptosi <4 x float> %1623 to <4 x i8>, !dbg !158
  %1628 = select <4 x i1> %1626, <4 x i8> %1627, <4 x i8> splat (i8 127), !dbg !159
  %1629 = insertelement <4 x float> poison, float %1595, i64 0, !dbg !149
  %1630 = insertelement <4 x float> %1629, float %1596, i64 1, !dbg !149
  %1631 = insertelement <4 x float> %1630, float %1597, i64 2, !dbg !149
  %1632 = insertelement <4 x float> %1631, float %1598, i64 3, !dbg !149
  %1633 = fcmp ogt <4 x float> %1632, splat (float -1.270000e+02), !dbg !149
  %1634 = fcmp uno <4 x float> %1632, zeroinitializer, !dbg !151
  %1635 = or <4 x i1> %1633, %1634, !dbg !152
  %1636 = select <4 x i1> %1635, <4 x float> %1632, <4 x float> splat (float -1.270000e+02), !dbg !153
  %1637 = fcmp olt <4 x float> %1636, splat (float 1.270000e+02), !dbg !154
  %1638 = fcmp uno <4 x float> %1636, zeroinitializer, !dbg !156
  %1639 = or <4 x i1> %1637, %1638, !dbg !157
  %1640 = fptosi <4 x float> %1636 to <4 x i8>, !dbg !158
  %1641 = select <4 x i1> %1639, <4 x i8> %1640, <4 x i8> splat (i8 127), !dbg !159
  %1642 = insertelement <4 x float> poison, float %1599, i64 0, !dbg !149
  %1643 = insertelement <4 x float> %1642, float %1600, i64 1, !dbg !149
  %1644 = insertelement <4 x float> %1643, float %1601, i64 2, !dbg !149
  %1645 = insertelement <4 x float> %1644, float %1602, i64 3, !dbg !149
  %1646 = fcmp ogt <4 x float> %1645, splat (float -1.270000e+02), !dbg !149
  %1647 = fcmp uno <4 x float> %1645, zeroinitializer, !dbg !151
  %1648 = or <4 x i1> %1646, %1647, !dbg !152
  %1649 = select <4 x i1> %1648, <4 x float> %1645, <4 x float> splat (float -1.270000e+02), !dbg !153
  %1650 = fcmp olt <4 x float> %1649, splat (float 1.270000e+02), !dbg !154
  %1651 = fcmp uno <4 x float> %1649, zeroinitializer, !dbg !156
  %1652 = or <4 x i1> %1650, %1651, !dbg !157
  %1653 = fptosi <4 x float> %1649 to <4 x i8>, !dbg !158
  %1654 = select <4 x i1> %1652, <4 x i8> %1653, <4 x i8> splat (i8 127), !dbg !159
  %1655 = getelementptr i8, ptr addrspace(1) %12, i64 %80, !dbg !160
  %1656 = bitcast <4 x i8> %1615 to i32, !dbg !161
  %1657 = bitcast <4 x i8> %1628 to i32, !dbg !161
  %1658 = bitcast <4 x i8> %1641 to i32, !dbg !161
  %1659 = bitcast <4 x i8> %1654 to i32, !dbg !161
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1656, i32 %1657, i32 %1658, i32 %1659, ptr addrspace(1) %1655, i1 %85) #5, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 36, column: 29, scope: !6)
!20 = !DILocation(line: 40, column: 46, scope: !6)
!21 = !DILocation(line: 40, column: 41, scope: !6)
!22 = !DILocation(line: 40, column: 34, scope: !6)
!23 = !DILocation(line: 40, column: 59, scope: !6)
!24 = !DILocation(line: 40, column: 51, scope: !6)
!25 = !DILocation(line: 40, column: 113, scope: !6)
!26 = !DILocation(line: 41, column: 41, scope: !6)
!27 = !DILocation(line: 41, column: 34, scope: !6)
!28 = !DILocation(line: 42, column: 34, scope: !6)
!29 = !DILocation(line: 43, column: 34, scope: !6)
!30 = !DILocation(line: 44, column: 35, scope: !6)
!31 = !DILocation(line: 45, column: 35, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 50, column: 44, scope: !6)
!36 = !DILocation(line: 51, column: 17, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 52, column: 46, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 53, column: 46, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 55, column: 24, scope: !6)
!45 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !46)
!46 = !DILocation(line: 58, column: 46, scope: !6)
!47 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !46)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !46)
!50 = !DILocation(line: 60, column: 23, scope: !6)
!51 = !DILocation(line: 72, column: 68, scope: !6)
!52 = !DILocation(line: 73, column: 29, scope: !6)
!53 = !DILocation(line: 41, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 48, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 43, column: 51, scope: !6)
!57 = !DILocation(line: 44, column: 42, scope: !6)
!58 = !DILocation(line: 44, column: 95, scope: !6)
!59 = !DILocation(line: 45, column: 42, scope: !6)
!60 = !DILocation(line: 45, column: 95, scope: !6)
!61 = !DILocation(line: 47, column: 22, scope: !6)
!62 = !DILocation(line: 48, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 70, column: 64, scope: !6)
!68 = !DILocation(line: 73, column: 53, scope: !6)
!69 = !DILocation(line: 229, column: 46, scope: !33, inlinedAt: !70)
!70 = !DILocation(line: 74, column: 85, scope: !6)
!71 = !DILocation(line: 217, column: 21, scope: !72, inlinedAt: !70)
!72 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!73 = !DILocation(line: 218, column: 28, scope: !72, inlinedAt: !70)
!74 = !DILocation(line: 219, column: 39, scope: !72, inlinedAt: !70)
!75 = !DILocation(line: 219, column: 60, scope: !72, inlinedAt: !70)
!76 = !DILocation(line: 219, column: 49, scope: !72, inlinedAt: !70)
!77 = !DILocation(line: 221, column: 25, scope: !72, inlinedAt: !70)
!78 = !DILocation(line: 221, column: 17, scope: !72, inlinedAt: !70)
!79 = !DILocation(line: 222, column: 30, scope: !72, inlinedAt: !70)
!80 = !DILocation(line: 222, column: 38, scope: !72, inlinedAt: !70)
!81 = !DILocation(line: 222, column: 49, scope: !72, inlinedAt: !70)
!82 = !DILocation(line: 222, column: 22, scope: !72, inlinedAt: !70)
!83 = !DILocation(line: 222, column: 15, scope: !72, inlinedAt: !70)
!84 = !DILocation(line: 86, column: 53, scope: !6)
!85 = !DILocation(line: 98, column: 24, scope: !6)
!86 = !DILocation(line: 87, column: 43, scope: !6)
!87 = !DILocation(line: 87, column: 35, scope: !6)
!88 = !DILocation(line: 87, column: 50, scope: !6)
!89 = !DILocation(line: 88, column: 35, scope: !6)
!90 = !DILocation(line: 88, column: 50, scope: !6)
!91 = !DILocation(line: 89, column: 42, scope: !6)
!92 = !DILocation(line: 89, column: 35, scope: !6)
!93 = !DILocation(line: 89, column: 49, scope: !6)
!94 = !DILocation(line: 90, column: 35, scope: !6)
!95 = !DILocation(line: 90, column: 49, scope: !6)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 86, column: 115, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 113, column: 29, scope: !6)
!102 = !DILocation(line: 90, column: 102, scope: !6)
!103 = !DILocation(line: 88, column: 103, scope: !6)
!104 = !DILocation(line: 101, column: 24, scope: !6)
!105 = !DILocation(line: 103, column: 24, scope: !6)
!106 = !DILocation(line: 104, column: 24, scope: !6)
!107 = !DILocation(line: 106, column: 24, scope: !6)
!108 = !DILocation(line: 107, column: 24, scope: !6)
!109 = !DILocation(line: 112, column: 50, scope: !6)
!110 = !DILocation(line: 110, column: 50, scope: !6)
!111 = !DILocation(line: 113, column: 53, scope: !6)
!112 = !DILocation(line: 110, column: 29, scope: !33, inlinedAt: !113)
!113 = !DILocation(line: 114, column: 40, scope: !6)
!114 = !DILocation(line: 94, column: 15, scope: !72, inlinedAt: !113)
!115 = !DILocation(line: 96, column: 21, scope: !72, inlinedAt: !113)
!116 = !DILocation(line: 96, column: 16, scope: !72, inlinedAt: !113)
!117 = !DILocation(line: 97, column: 29, scope: !72, inlinedAt: !113)
!118 = !DILocation(line: 116, column: 37, scope: !6)
!119 = !DILocation(line: 115, column: 29, scope: !33, inlinedAt: !120)
!120 = !DILocation(line: 115, column: 40, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !72, inlinedAt: !120)
!122 = !DILocation(line: 104, column: 21, scope: !72, inlinedAt: !120)
!123 = !DILocation(line: 104, column: 16, scope: !72, inlinedAt: !120)
!124 = !DILocation(line: 105, column: 29, scope: !72, inlinedAt: !120)
!125 = !DILocation(line: 117, column: 37, scope: !6)
!126 = !DILocation(line: 116, column: 25, scope: !6)
!127 = !DILocation(line: 117, column: 25, scope: !6)
!128 = !DILocation(line: 124, column: 53, scope: !6)
!129 = !DILocation(line: 124, column: 115, scope: !6)
!130 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !131)
!131 = !DILocation(line: 126, column: 46, scope: !6)
!132 = !DILocation(line: 127, column: 17, scope: !6)
!133 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !134)
!134 = !DILocation(line: 128, column: 46, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !136)
!136 = !DILocation(line: 129, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !136)
!140 = !DILocation(line: 131, column: 24, scope: !6)
!141 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !142)
!142 = !DILocation(line: 134, column: 46, scope: !6)
!143 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !142)
!145 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !142)
!146 = !DILocation(line: 137, column: 25, scope: !6)
!147 = !DILocation(line: 140, column: 24, scope: !6)
!148 = !DILocation(line: 141, column: 36, scope: !6)
!149 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !150)
!150 = !DILocation(line: 144, column: 46, scope: !6)
!151 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !150)
!152 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !150)
!153 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !150)
!154 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !155)
!155 = !DILocation(line: 146, column: 46, scope: !6)
!156 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !155)
!157 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !155)
!158 = !DILocation(line: 148, column: 25, scope: !6)
!159 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !155)
!160 = !DILocation(line: 149, column: 29, scope: !6)
!161 = !DILocation(line: 149, column: 53, scope: !6)
!162 = !DILocation(line: 118, column: 4, scope: !6)
