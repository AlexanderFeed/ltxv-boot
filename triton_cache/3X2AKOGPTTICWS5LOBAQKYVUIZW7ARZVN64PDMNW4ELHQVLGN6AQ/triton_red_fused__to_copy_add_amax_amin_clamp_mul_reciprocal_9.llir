; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 2, !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = and i32 %10, 3, !dbg !11
  %14 = and i32 %10, 63, !dbg !11
  %15 = or disjoint i32 %12, %9, !dbg !12
  %16 = or disjoint i32 %9, %14, !dbg !12
  %17 = icmp slt i32 %15, 3600, !dbg !13
  %18 = icmp slt i32 %16, 3600, !dbg !13
  %19 = shl i32 %15, 7, !dbg !14
  %20 = add i32 %19, 65536, !dbg !15
  br i1 %17, label %.split.us, label %.split

.split.us:                                        ; preds = %7, %.split.us
  %21 = phi float [ %41, %.split.us ], [ 0xFFF0000000000000, %7 ]
  %22 = phi float [ %37, %.split.us ], [ 0x7FF0000000000000, %7 ]
  %23 = phi i32 [ %42, %.split.us ], [ 0, %7 ]
  %24 = lshr i32 %23, 7, !dbg !16
  %25 = mul nuw nsw i32 %24, 526336, !dbg !17
  %26 = add i32 %25, %20, !dbg !18
  %.masked.us = and i32 %23, 124, !dbg !19
  %27 = or disjoint i32 %26, %.masked.us, !dbg !20
  %28 = or disjoint i32 %27, %13, !dbg !20
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %32 = bitcast i16 %31 to bfloat, !dbg !22
  %33 = fpext bfloat %32 to float, !dbg !23
  %34 = fcmp olt float %22, %33, !dbg !24
  %35 = fcmp uno float %22, 0.000000e+00, !dbg !28
  %36 = or i1 %35, %34, !dbg !29
  %37 = select i1 %36, float %22, float %33, !dbg !30
  %38 = fcmp ogt float %21, %33, !dbg !31
  %39 = fcmp uno float %21, 0.000000e+00, !dbg !33
  %40 = or i1 %39, %38, !dbg !34
  %41 = select i1 %40, float %21, float %33, !dbg !35
  %42 = add nuw nsw i32 %23, 4, !dbg !36
  %43 = icmp samesign ult i32 %23, 3068, !dbg !36
  br i1 %43, label %.split.us, label %.split6.us, !dbg !36

.split:                                           ; preds = %7, %.split
  %44 = phi i32 [ %53, %.split ], [ 0, %7 ]
  %45 = lshr i32 %44, 7, !dbg !16
  %46 = mul nuw nsw i32 %45, 526336, !dbg !17
  %47 = add i32 %46, %20, !dbg !18
  %.masked = and i32 %44, 124, !dbg !19
  %48 = or disjoint i32 %47, %.masked, !dbg !20
  %49 = or disjoint i32 %48, %13, !dbg !20
  %50 = sext i32 %49 to i64, !dbg !21
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %51, i1 false) #4, !dbg !22
  %53 = add nuw nsw i32 %44, 4, !dbg !36
  %54 = icmp samesign ult i32 %44, 3068, !dbg !36
  br i1 %54, label %.split, label %.split6.us, !dbg !36

.split6.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %37, %.split.us ], [ 0x7FF0000000000000, %.split ], !dbg !37
  %.us-phi7 = phi float [ %41, %.split.us ], [ 0xFFF0000000000000, %.split ], !dbg !37
  %55 = bitcast float %.us-phi to i32, !dbg !37
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !37
  %57 = bitcast i32 %56 to float, !dbg !37
  %58 = fcmp olt float %.us-phi, %57, !dbg !39
  %59 = fcmp uno float %.us-phi, 0.000000e+00, !dbg !41
  %60 = or i1 %59, %58, !dbg !42
  %61 = select i1 %60, float %.us-phi, float %57, !dbg !43
  %62 = bitcast float %61 to i32, !dbg !37
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = fcmp olt float %61, %64, !dbg !39
  %66 = fcmp uno float %61, 0.000000e+00, !dbg !41
  %67 = or i1 %65, %66, !dbg !42
  %68 = select i1 %67, float %61, float %64, !dbg !43
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !44
  %70 = bitcast float %68 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %71 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !44
  %72 = load float, ptr addrspace(3) %71, align 4, !dbg !44
  %73 = bitcast float %.us-phi7 to i32, !dbg !45
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !45
  %75 = bitcast i32 %74 to float, !dbg !45
  %76 = fcmp ogt float %.us-phi7, %75, !dbg !47
  %77 = fcmp uno float %.us-phi7, 0.000000e+00, !dbg !48
  %78 = or i1 %77, %76, !dbg !49
  %79 = select i1 %78, float %.us-phi7, float %75, !dbg !50
  %80 = bitcast float %79 to i32, !dbg !45
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !45
  %82 = bitcast i32 %81 to float, !dbg !45
  %83 = fcmp ogt float %79, %82, !dbg !47
  %84 = fcmp uno float %79, 0.000000e+00, !dbg !48
  %85 = or i1 %83, %84, !dbg !49
  %86 = select i1 %85, float %79, float %82, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %87 = bitcast float %86 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %87, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %88 = load float, ptr addrspace(3) %71, align 4, !dbg !51
  %89 = sext i32 %16 to i64, !dbg !52
  %90 = getelementptr bfloat, ptr addrspace(1) %1, i64 %89, !dbg !52
  %91 = fptrunc float %72 to bfloat, !dbg !44
  %92 = and i32 %10, 192, !dbg !44
  %93 = icmp eq i32 %92, 0, !dbg !44
  %94 = bitcast bfloat %91 to i16, !dbg !44
  %95 = and i1 %93, %18, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %94, ptr addrspace(1) %90, i1 %95) #4, !dbg !44
  %96 = getelementptr bfloat, ptr addrspace(1) %2, i64 %89, !dbg !53
  %97 = fptrunc float %88 to bfloat, !dbg !51
  %98 = bitcast bfloat %97 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %98, ptr addrspace(1) %96, i1 %95) #4, !dbg !51
  %.inv = fcmp oge float %68, 0.000000e+00, !dbg !54
  %99 = select i1 %.inv, float 0.000000e+00, float %68, !dbg !54
  %100 = fsub float 0.000000e+00, %99, !dbg !56
  %.inv3 = fcmp ole float %86, 0.000000e+00, !dbg !57
  %101 = select i1 %.inv3, float 0.000000e+00, float %86, !dbg !57
  %102 = fcmp ogt float %100, %101, !dbg !59
  %103 = fcmp uno float %100, 0.000000e+00, !dbg !61
  %104 = or i1 %103, %102, !dbg !62
  %105 = select i1 %104, float %100, float %101, !dbg !63
  %106 = fmul float %105, 0x3F80204080000000, !dbg !64
  %107 = fcmp ogt float %106, 0x3EE4F8B580000000, !dbg !65
  %108 = fcmp uno float %106, 0.000000e+00, !dbg !67
  %109 = or i1 %107, %108, !dbg !68
  %110 = select i1 %109, float %106, float 0x3EE4F8B580000000, !dbg !69
  %111 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %110), !dbg !70
  %112 = mul i32 %15, 3072, !dbg !71
  br label %113, !dbg !72

113:                                              ; preds = %.split6.us, %113
  %indvars.iv = phi i64 [ 0, %.split6.us ], [ %indvars.iv.next, %113 ]
  %114 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !73
  %115 = lshr i32 %114, 7, !dbg !73
  %116 = mul nuw nsw i32 %115, 526336, !dbg !74
  %117 = add i32 %116, %20, !dbg !75
  %118 = trunc i64 %indvars.iv to i32, !dbg !76
  %119 = or disjoint i32 %13, %118, !dbg !76
  %120 = and i32 %119, 127, !dbg !76
  %121 = or disjoint i32 %117, %120, !dbg !77
  %122 = sext i32 %121 to i64, !dbg !78
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !78
  %124 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %123, i1 %17) #4, !dbg !79
  %125 = bitcast i16 %124 to bfloat, !dbg !79
  %126 = fpext bfloat %125 to float, !dbg !80
  %127 = fmul float %111, %126, !dbg !81
  %128 = tail call float @llvm.nvvm.round.f(float %127) #4, !dbg !82
  %129 = fcmp ogt float %128, -1.270000e+02, !dbg !83
  %130 = fcmp uno float %128, 0.000000e+00, !dbg !85
  %131 = or i1 %129, %130, !dbg !86
  %132 = select i1 %131, float %128, float -1.270000e+02, !dbg !87
  %133 = fcmp olt float %132, 1.270000e+02, !dbg !88
  %134 = fcmp uno float %132, 0.000000e+00, !dbg !90
  %135 = or i1 %133, %134, !dbg !91
  %136 = fptosi float %132 to i8, !dbg !92
  %137 = select i1 %135, i8 %136, i8 127, !dbg !93
  %138 = add i32 %119, %112, !dbg !94
  %139 = sext i32 %138 to i64, !dbg !95
  %140 = getelementptr i8, ptr addrspace(1) %3, i64 %139, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %137, ptr addrspace(1) %140, i1 %17) #4, !dbg !96
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !72
  %141 = icmp samesign ult i64 %indvars.iv, 3068, !dbg !72
  br i1 %141, label %113, label %142, !dbg !72

142:                                              ; preds = %113
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqx4umnpxfbcu2l6rryhc34knavpax5uagm3mqzm7aatf72hatl.py", directory: "/tmp/torchinductor_root/iq")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 37, column: 46, scope: !6)
!15 = !DILocation(line: 37, column: 42, scope: !6)
!16 = !DILocation(line: 37, column: 67, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 83, scope: !6)
!20 = !DILocation(line: 37, column: 76, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 91, scope: !6)
!23 = !DILocation(line: 37, column: 152, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 39, column: 45, scope: !6)
!28 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 45, scope: !6)
!33 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !32)
!34 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !32)
!35 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !32)
!36 = !DILocation(line: 31, column: 40, scope: !6)
!37 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !38)
!38 = !DILocation(line: 43, column: 38, scope: !6)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!41 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !38)
!42 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !38)
!43 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !38)
!44 = !DILocation(line: 45, column: 36, scope: !6)
!45 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 38, scope: !6)
!47 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !46)
!49 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !46)
!50 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !46)
!51 = !DILocation(line: 46, column: 36, scope: !6)
!52 = !DILocation(line: 45, column: 25, scope: !6)
!53 = !DILocation(line: 46, column: 25, scope: !6)
!54 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !55)
!55 = !DILocation(line: 55, column: 44, scope: !6)
!56 = !DILocation(line: 56, column: 16, scope: !6)
!57 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 45, scope: !6)
!59 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !6)
!61 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !60)
!62 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !60)
!63 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !60)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 46, scope: !6)
!67 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !66)
!69 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !66)
!70 = !DILocation(line: 66, column: 25, scope: !6)
!71 = !DILocation(line: 78, column: 41, scope: !6)
!72 = !DILocation(line: 47, column: 40, scope: !6)
!73 = !DILocation(line: 53, column: 67, scope: !6)
!74 = !DILocation(line: 53, column: 59, scope: !6)
!75 = !DILocation(line: 53, column: 51, scope: !6)
!76 = !DILocation(line: 53, column: 83, scope: !6)
!77 = !DILocation(line: 53, column: 76, scope: !6)
!78 = !DILocation(line: 53, column: 34, scope: !6)
!79 = !DILocation(line: 53, column: 91, scope: !6)
!80 = !DILocation(line: 53, column: 153, scope: !6)
!81 = !DILocation(line: 69, column: 23, scope: !6)
!82 = !DILocation(line: 70, column: 36, scope: !6)
!83 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !84)
!84 = !DILocation(line: 73, column: 46, scope: !6)
!85 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !84)
!86 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !84)
!87 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !84)
!88 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !89)
!89 = !DILocation(line: 75, column: 46, scope: !6)
!90 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !89)
!91 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !89)
!92 = !DILocation(line: 77, column: 25, scope: !6)
!93 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !89)
!94 = !DILocation(line: 78, column: 36, scope: !6)
!95 = !DILocation(line: 78, column: 29, scope: !6)
!96 = !DILocation(line: 78, column: 53, scope: !6)
!97 = !DILocation(line: 47, column: 4, scope: !6)
