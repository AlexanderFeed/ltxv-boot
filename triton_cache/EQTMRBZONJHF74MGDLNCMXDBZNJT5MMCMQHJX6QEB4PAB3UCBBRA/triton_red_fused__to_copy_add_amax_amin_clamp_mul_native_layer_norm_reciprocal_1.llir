; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
._crit_edge:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 256, !dbg !11
  %.lobit = lshr exact i32 %22, 8, !dbg !11
  %23 = and i32 %21, 31, !dbg !11
  %24 = or disjoint i32 %.lobit, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = shl i32 %21, 3, !dbg !14
  %28 = and i32 %27, 2040, !dbg !14
  %29 = shl i32 %21, 2, !dbg !14
  %30 = mul i32 %24, 3072, !dbg !15
  %31 = zext nneg i32 %28 to i64, !dbg !16
  %32 = add i32 %30, %28, !dbg !17
  %33 = sext i32 %32 to i64, !dbg !18
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %25) #5, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !19
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !19
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !19
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !19
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !19
  %48 = extractelement <2 x bfloat> %41, i64 0, !dbg !19
  %49 = extractelement <2 x bfloat> %41, i64 1, !dbg !19
  %50 = extractelement <2 x bfloat> %43, i64 0, !dbg !19
  %51 = extractelement <2 x bfloat> %43, i64 1, !dbg !19
  %52 = fpext bfloat %44 to float, !dbg !20
  %53 = fpext bfloat %45 to float, !dbg !20
  %54 = fpext bfloat %46 to float, !dbg !20
  %55 = fpext bfloat %47 to float, !dbg !20
  %56 = fpext bfloat %48 to float, !dbg !20
  %57 = fpext bfloat %49 to float, !dbg !20
  %58 = fpext bfloat %50 to float, !dbg !20
  %59 = fpext bfloat %51 to float, !dbg !20
  %60 = select i1 %25, float %52, float 0.000000e+00, !dbg !21
  %61 = select i1 %25, float %53, float 0.000000e+00, !dbg !21
  %62 = select i1 %25, float %54, float 0.000000e+00, !dbg !21
  %63 = select i1 %25, float %55, float 0.000000e+00, !dbg !21
  %64 = select i1 %25, float %56, float 0.000000e+00, !dbg !21
  %65 = select i1 %25, float %57, float 0.000000e+00, !dbg !21
  %66 = select i1 %25, float %58, float 0.000000e+00, !dbg !21
  %67 = select i1 %25, float %59, float 0.000000e+00, !dbg !21
  %68 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %69 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %70 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %71 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %72 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %73 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %74 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %75 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %76 = or disjoint i64 %31, 2048, !dbg !23
  %77 = icmp samesign ult i64 %76, 3072, !dbg !24
  %78 = trunc nuw nsw i64 %76 to i32, !dbg !17
  %79 = add i32 %30, %78, !dbg !17
  %80 = sext i32 %79 to i64, !dbg !18
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !18
  %82 = and i1 %25, %77, !dbg !25
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %81, i1 %82) #5, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !19
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !19
  %86 = extractelement <2 x bfloat> %85, i64 1, !dbg !19
  %87 = fpext bfloat %86 to float, !dbg !20
  %88 = extractelement <2 x bfloat> %85, i64 0, !dbg !19
  %89 = fpext bfloat %88 to float, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !19
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !19
  %92 = extractelement <2 x bfloat> %91, i64 1, !dbg !19
  %93 = fpext bfloat %92 to float, !dbg !20
  %94 = extractelement <2 x bfloat> %91, i64 0, !dbg !19
  %95 = fpext bfloat %94 to float, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !19
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !19
  %98 = extractelement <2 x bfloat> %97, i64 1, !dbg !19
  %99 = fpext bfloat %98 to float, !dbg !20
  %100 = extractelement <2 x bfloat> %97, i64 0, !dbg !19
  %101 = fpext bfloat %100 to float, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !19
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !19
  %104 = extractelement <2 x bfloat> %103, i64 1, !dbg !19
  %105 = fpext bfloat %104 to float, !dbg !20
  %106 = extractelement <2 x bfloat> %103, i64 0, !dbg !19
  %107 = fpext bfloat %106 to float, !dbg !20
  %108 = fsub float %107, %60, !dbg !26
  %109 = fsub float %105, %61, !dbg !26
  %110 = fsub float %101, %62, !dbg !26
  %111 = fsub float %99, %63, !dbg !26
  %112 = fsub float %95, %64, !dbg !26
  %113 = fsub float %93, %65, !dbg !26
  %114 = fsub float %89, %66, !dbg !26
  %115 = fsub float %87, %67, !dbg !26
  %116 = fadd float %68, 1.000000e+00, !dbg !30
  %117 = fadd float %69, 1.000000e+00, !dbg !30
  %118 = fadd float %70, 1.000000e+00, !dbg !30
  %119 = fadd float %71, 1.000000e+00, !dbg !30
  %120 = fadd float %72, 1.000000e+00, !dbg !30
  %121 = fadd float %73, 1.000000e+00, !dbg !30
  %122 = fadd float %74, 1.000000e+00, !dbg !30
  %123 = fadd float %75, 1.000000e+00, !dbg !30
  %124 = tail call float @llvm.nvvm.div.full(float %108, float %116), !dbg !31
  %125 = tail call float @llvm.nvvm.div.full(float %109, float %117), !dbg !31
  %126 = tail call float @llvm.nvvm.div.full(float %110, float %118), !dbg !31
  %127 = tail call float @llvm.nvvm.div.full(float %111, float %119), !dbg !31
  %128 = tail call float @llvm.nvvm.div.full(float %112, float %120), !dbg !31
  %129 = tail call float @llvm.nvvm.div.full(float %113, float %121), !dbg !31
  %130 = tail call float @llvm.nvvm.div.full(float %114, float %122), !dbg !31
  %131 = tail call float @llvm.nvvm.div.full(float %115, float %123), !dbg !31
  %132 = fadd float %60, %124, !dbg !32
  %133 = fadd float %61, %125, !dbg !32
  %134 = fadd float %62, %126, !dbg !32
  %135 = fadd float %63, %127, !dbg !32
  %136 = fadd float %64, %128, !dbg !32
  %137 = fadd float %65, %129, !dbg !32
  %138 = fadd float %66, %130, !dbg !32
  %139 = fadd float %67, %131, !dbg !32
  %140 = fsub float %107, %132, !dbg !33
  %141 = fsub float %105, %133, !dbg !33
  %142 = fsub float %101, %134, !dbg !33
  %143 = fsub float %99, %135, !dbg !33
  %144 = fsub float %95, %136, !dbg !33
  %145 = fsub float %93, %137, !dbg !33
  %146 = fsub float %89, %138, !dbg !33
  %147 = fsub float %87, %139, !dbg !33
  %148 = fmul float %108, %140, !dbg !34
  %149 = fmul float %109, %141, !dbg !34
  %150 = fmul float %110, %142, !dbg !34
  %151 = fmul float %111, %143, !dbg !34
  %152 = fmul float %112, %144, !dbg !34
  %153 = fmul float %113, %145, !dbg !34
  %154 = fmul float %114, %146, !dbg !34
  %155 = fmul float %115, %147, !dbg !34
  %156 = fadd float %148, 0.000000e+00, !dbg !35
  %157 = fadd float %149, 0.000000e+00, !dbg !35
  %158 = fadd float %150, 0.000000e+00, !dbg !35
  %159 = fadd float %151, 0.000000e+00, !dbg !35
  %160 = fadd float %152, 0.000000e+00, !dbg !35
  %161 = fadd float %153, 0.000000e+00, !dbg !35
  %162 = fadd float %154, 0.000000e+00, !dbg !35
  %163 = fadd float %155, 0.000000e+00, !dbg !35
  %164 = fadd float %156, %157, !dbg !36
  %165 = select i1 %82, float %132, float %60, !dbg !21
  %166 = select i1 %82, float %133, float %61, !dbg !21
  %167 = select i1 %82, float %134, float %62, !dbg !21
  %168 = select i1 %82, float %135, float %63, !dbg !21
  %169 = select i1 %82, float %136, float %64, !dbg !21
  %170 = select i1 %82, float %137, float %65, !dbg !21
  %171 = select i1 %82, float %138, float %66, !dbg !21
  %172 = select i1 %82, float %139, float %67, !dbg !21
  %173 = select i1 %82, float %158, float 0.000000e+00, !dbg !37
  %174 = select i1 %82, float %159, float 0.000000e+00, !dbg !37
  %175 = select i1 %82, float %160, float 0.000000e+00, !dbg !37
  %176 = select i1 %82, float %161, float 0.000000e+00, !dbg !37
  %177 = select i1 %82, float %162, float 0.000000e+00, !dbg !37
  %178 = select i1 %82, float %163, float 0.000000e+00, !dbg !37
  %179 = select i1 %82, float %116, float %68, !dbg !22
  %180 = select i1 %82, float %117, float %69, !dbg !22
  %181 = select i1 %82, float %118, float %70, !dbg !22
  %182 = select i1 %82, float %119, float %71, !dbg !22
  %183 = select i1 %82, float %120, float %72, !dbg !22
  %184 = select i1 %82, float %121, float %73, !dbg !22
  %185 = select i1 %82, float %122, float %74, !dbg !22
  %186 = select i1 %82, float %123, float %75, !dbg !22
  %187 = lshr i32 %21, 5, !dbg !11
  %188 = and i32 %21, 1, !dbg !11
  %189 = or disjoint i32 %20, %188, !dbg !12
  %190 = icmp slt i32 %189, 4112, !dbg !13
  %191 = and i32 %29, 2044, !dbg !14
  %192 = fsub float %166, %165, !dbg !38
  %193 = fadd float %179, %180, !dbg !41
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !42
  %195 = tail call float @llvm.nvvm.div.full(float %180, float %193), !dbg !43
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !44
  %197 = fmul float %192, %196, !dbg !45
  %198 = fadd float %165, %197, !dbg !46
  %199 = select i1 %82, float %164, float 0.000000e+00, !dbg !47
  %200 = fmul float %192, %192, !dbg !48
  %201 = fmul float %200, %179, !dbg !49
  %202 = fmul float %201, %196, !dbg !50
  %203 = fadd float %199, %202, !dbg !51
  %204 = fsub float %167, %198, !dbg !38
  %205 = fadd float %181, %193, !dbg !41
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !42
  %207 = tail call float @llvm.nvvm.div.full(float %181, float %205), !dbg !43
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !44
  %209 = fmul float %208, %204, !dbg !45
  %210 = fadd float %198, %209, !dbg !46
  %211 = fadd float %173, %203, !dbg !47
  %212 = fmul float %204, %204, !dbg !48
  %213 = fmul float %193, %212, !dbg !49
  %214 = fmul float %208, %213, !dbg !50
  %215 = fadd float %211, %214, !dbg !51
  %216 = fsub float %168, %210, !dbg !38
  %217 = fadd float %182, %205, !dbg !41
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !42
  %219 = tail call float @llvm.nvvm.div.full(float %182, float %217), !dbg !43
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !44
  %221 = fmul float %220, %216, !dbg !45
  %222 = fadd float %210, %221, !dbg !46
  %223 = fadd float %174, %215, !dbg !47
  %224 = fmul float %216, %216, !dbg !48
  %225 = fmul float %205, %224, !dbg !49
  %226 = fmul float %220, %225, !dbg !50
  %227 = fadd float %223, %226, !dbg !51
  %228 = fsub float %169, %222, !dbg !38
  %229 = fadd float %183, %217, !dbg !41
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !42
  %231 = tail call float @llvm.nvvm.div.full(float %183, float %229), !dbg !43
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !44
  %233 = fmul float %232, %228, !dbg !45
  %234 = fadd float %222, %233, !dbg !46
  %235 = fadd float %175, %227, !dbg !47
  %236 = fmul float %228, %228, !dbg !48
  %237 = fmul float %217, %236, !dbg !49
  %238 = fmul float %232, %237, !dbg !50
  %239 = fadd float %235, %238, !dbg !51
  %240 = fsub float %170, %234, !dbg !38
  %241 = fadd float %184, %229, !dbg !41
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !42
  %243 = tail call float @llvm.nvvm.div.full(float %184, float %241), !dbg !43
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !44
  %245 = fmul float %244, %240, !dbg !45
  %246 = fadd float %234, %245, !dbg !46
  %247 = fadd float %176, %239, !dbg !47
  %248 = fmul float %240, %240, !dbg !48
  %249 = fmul float %229, %248, !dbg !49
  %250 = fmul float %244, %249, !dbg !50
  %251 = fadd float %247, %250, !dbg !51
  %252 = fsub float %171, %246, !dbg !38
  %253 = fadd float %185, %241, !dbg !41
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !42
  %255 = tail call float @llvm.nvvm.div.full(float %185, float %253), !dbg !43
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !44
  %257 = fmul float %256, %252, !dbg !45
  %258 = fadd float %246, %257, !dbg !46
  %259 = fadd float %177, %251, !dbg !47
  %260 = fmul float %252, %252, !dbg !48
  %261 = fmul float %241, %260, !dbg !49
  %262 = fmul float %256, %261, !dbg !50
  %263 = fadd float %259, %262, !dbg !51
  %264 = fsub float %172, %258, !dbg !38
  %265 = fadd float %186, %253, !dbg !41
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !42
  %267 = tail call float @llvm.nvvm.div.full(float %186, float %265), !dbg !43
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !44
  %269 = fmul float %268, %264, !dbg !45
  %270 = fadd float %258, %269, !dbg !46
  %271 = fadd float %178, %263, !dbg !47
  %272 = fmul float %264, %264, !dbg !48
  %273 = fmul float %253, %272, !dbg !49
  %274 = fmul float %268, %273, !dbg !50
  %275 = fadd float %271, %274, !dbg !51
  %276 = bitcast float %270 to i32, !dbg !52
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !52
  %278 = bitcast i32 %277 to float, !dbg !52
  %279 = bitcast float %275 to i32, !dbg !52
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !52
  %281 = bitcast i32 %280 to float, !dbg !52
  %282 = bitcast float %265 to i32, !dbg !52
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 16, i32 31), !dbg !52
  %284 = bitcast i32 %283 to float, !dbg !52
  %285 = fsub float %278, %270, !dbg !38
  %286 = fadd float %265, %284, !dbg !41
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !42
  %288 = tail call float @llvm.nvvm.div.full(float %284, float %286), !dbg !43
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !44
  %290 = fmul float %289, %285, !dbg !45
  %291 = fadd float %270, %290, !dbg !46
  %292 = fadd float %275, %281, !dbg !47
  %293 = fmul float %285, %285, !dbg !48
  %294 = fmul float %265, %293, !dbg !49
  %295 = fmul float %289, %294, !dbg !50
  %296 = fadd float %292, %295, !dbg !51
  %297 = bitcast float %291 to i32, !dbg !52
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = bitcast float %296 to i32, !dbg !52
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !52
  %302 = bitcast i32 %301 to float, !dbg !52
  %303 = bitcast float %286 to i32, !dbg !52
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !52
  %305 = bitcast i32 %304 to float, !dbg !52
  %306 = fsub float %299, %291, !dbg !38
  %307 = fadd float %286, %305, !dbg !41
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !42
  %309 = tail call float @llvm.nvvm.div.full(float %305, float %307), !dbg !43
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !44
  %311 = fmul float %310, %306, !dbg !45
  %312 = fadd float %291, %311, !dbg !46
  %313 = fadd float %296, %302, !dbg !47
  %314 = fmul float %306, %306, !dbg !48
  %315 = fmul float %286, %314, !dbg !49
  %316 = fmul float %310, %315, !dbg !50
  %317 = fadd float %313, %316, !dbg !51
  %318 = bitcast float %312 to i32, !dbg !52
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !52
  %320 = bitcast i32 %319 to float, !dbg !52
  %321 = bitcast float %317 to i32, !dbg !52
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !52
  %323 = bitcast i32 %322 to float, !dbg !52
  %324 = bitcast float %307 to i32, !dbg !52
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !52
  %326 = bitcast i32 %325 to float, !dbg !52
  %327 = fsub float %320, %312, !dbg !38
  %328 = fadd float %307, %326, !dbg !41
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !42
  %330 = tail call float @llvm.nvvm.div.full(float %326, float %328), !dbg !43
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !44
  %332 = fmul float %331, %327, !dbg !45
  %333 = fadd float %312, %332, !dbg !46
  %334 = fadd float %317, %323, !dbg !47
  %335 = fmul float %327, %327, !dbg !48
  %336 = fmul float %307, %335, !dbg !49
  %337 = fmul float %331, %336, !dbg !50
  %338 = fadd float %334, %337, !dbg !51
  %339 = bitcast float %333 to i32, !dbg !52
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !52
  %341 = bitcast i32 %340 to float, !dbg !52
  %342 = bitcast float %338 to i32, !dbg !52
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !52
  %344 = bitcast i32 %343 to float, !dbg !52
  %345 = bitcast float %328 to i32, !dbg !52
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !52
  %347 = bitcast i32 %346 to float, !dbg !52
  %348 = fsub float %341, %333, !dbg !38
  %349 = fadd float %328, %347, !dbg !41
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !42
  %351 = tail call float @llvm.nvvm.div.full(float %347, float %349), !dbg !43
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !44
  %353 = fmul float %352, %348, !dbg !45
  %354 = fadd float %333, %353, !dbg !46
  %355 = fadd float %338, %344, !dbg !47
  %356 = fmul float %348, %348, !dbg !48
  %357 = fmul float %328, %356, !dbg !49
  %358 = fmul float %352, %357, !dbg !50
  %359 = fadd float %355, %358, !dbg !51
  %360 = bitcast float %354 to i32, !dbg !52
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !52
  %362 = bitcast i32 %361 to float, !dbg !52
  %363 = bitcast float %359 to i32, !dbg !52
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !52
  %365 = bitcast i32 %364 to float, !dbg !52
  %366 = bitcast float %349 to i32, !dbg !52
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !52
  %368 = bitcast i32 %367 to float, !dbg !52
  %369 = fsub float %362, %354, !dbg !38
  %370 = fadd float %349, %368, !dbg !41
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !42
  %372 = tail call float @llvm.nvvm.div.full(float %368, float %370), !dbg !43
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !44
  %374 = fmul float %373, %369, !dbg !45
  %375 = fadd float %354, %374, !dbg !46
  %376 = fadd float %359, %365, !dbg !47
  %377 = fmul float %369, %369, !dbg !48
  %378 = fmul float %349, %377, !dbg !49
  %379 = fmul float %373, %378, !dbg !50
  %380 = fadd float %376, %379, !dbg !51
  %381 = and i32 %187, 7, !dbg !52
  %382 = icmp eq i32 %23, 0, !dbg !52
  %383 = lshr exact i32 %22, 5, !dbg !52
  %384 = or disjoint i32 %383, %381, !dbg !52
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !52
  %386 = bitcast float %375 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 %382) #5, !dbg !52
  %387 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %384, !dbg !52
  %388 = bitcast float %380 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 %382) #5, !dbg !52
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %384, !dbg !52
  %390 = bitcast float %370 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 %382) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %391 = icmp slt i32 %21, 16, !dbg !52
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !52
  %393 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %391) #5, !dbg !52
  %394 = bitcast i32 %393 to float, !dbg !52
  %395 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !52
  %396 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %391) #5, !dbg !52
  %397 = bitcast i32 %396 to float, !dbg !52
  %398 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !52
  %399 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %398, i1 %391) #5, !dbg !52
  %400 = bitcast i32 %399 to float, !dbg !52
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !52
  %402 = bitcast i32 %401 to float, !dbg !52
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !52
  %404 = bitcast i32 %403 to float, !dbg !52
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !52
  %406 = bitcast i32 %405 to float, !dbg !52
  %407 = fsub float %402, %394, !dbg !38
  %408 = fadd float %400, %406, !dbg !41
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !42
  %410 = tail call float @llvm.nvvm.div.full(float %406, float %408), !dbg !43
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !44
  %412 = fmul float %407, %411, !dbg !45
  %413 = fadd float %412, %394, !dbg !46
  %414 = fadd float %397, %404, !dbg !47
  %415 = fmul float %407, %407, !dbg !48
  %416 = fmul float %415, %400, !dbg !49
  %417 = fmul float %416, %411, !dbg !50
  %418 = fadd float %414, %417, !dbg !51
  %419 = bitcast float %413 to i32, !dbg !52
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !52
  %421 = bitcast i32 %420 to float, !dbg !52
  %422 = bitcast float %418 to i32, !dbg !52
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !52
  %424 = bitcast i32 %423 to float, !dbg !52
  %425 = bitcast float %408 to i32, !dbg !52
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !52
  %427 = bitcast i32 %426 to float, !dbg !52
  %428 = fsub float %421, %413, !dbg !38
  %429 = fadd float %408, %427, !dbg !41
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !42
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !43
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !44
  %433 = fmul float %428, %432, !dbg !45
  %434 = fadd float %413, %433, !dbg !46
  %435 = fadd float %418, %424, !dbg !47
  %436 = fmul float %428, %428, !dbg !48
  %437 = fmul float %408, %436, !dbg !49
  %438 = fmul float %432, %437, !dbg !50
  %439 = fadd float %435, %438, !dbg !51
  %440 = bitcast float %434 to i32, !dbg !52
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !52
  %442 = bitcast i32 %441 to float, !dbg !52
  %443 = bitcast float %439 to i32, !dbg !52
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !52
  %445 = bitcast i32 %444 to float, !dbg !52
  %446 = bitcast float %429 to i32, !dbg !52
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !52
  %448 = bitcast i32 %447 to float, !dbg !52
  %449 = fsub float %442, %434, !dbg !38
  %450 = fadd float %429, %448, !dbg !41
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !42
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !43
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !44
  %454 = fmul float %449, %453, !dbg !45
  %455 = fadd float %434, %454, !dbg !46
  %456 = fadd float %439, %445, !dbg !47
  %457 = fmul float %449, %449, !dbg !48
  %458 = fmul float %429, %457, !dbg !49
  %459 = fmul float %453, %458, !dbg !50
  %460 = fadd float %456, %459, !dbg !51
  %461 = and i32 %21, 7, !dbg !52
  %462 = icmp eq i32 %461, 0, !dbg !52
  %463 = and i1 %391, %462, !dbg !52
  %464 = bitcast float %455 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %464, i1 %463) #5, !dbg !52
  %465 = bitcast float %460 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %465, i1 %463) #5, !dbg !52
  %466 = bitcast float %450 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %466, i1 %463) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !52
  %468 = load float, ptr addrspace(3) %467, align 16, !dbg !52
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %383, !dbg !52
  %470 = load float, ptr addrspace(3) %469, align 16, !dbg !52
  %471 = tail call float @llvm.nvvm.div.full(float %470, float 3.072000e+03), !dbg !53
  %472 = fadd float %471, 0x3EB0C6F7A0000000, !dbg !54
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i59 = icmp eq i32 %480, 0, !dbg !55
  br i1 %.not.i59, label %483, label %481, !dbg !55

481:                                              ; preds = %._crit_edge
  %482 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %472), !dbg !55
  br label %__nv_rsqrtf.exit61, !dbg !55

483:                                              ; preds = %._crit_edge
  %484 = tail call float @llvm.nvvm.rsqrt.approx.f(float %472), !dbg !55
  br label %__nv_rsqrtf.exit61, !dbg !55

__nv_rsqrtf.exit61:                               ; preds = %481, %483
  %.0.i60 = phi float [ %482, %481 ], [ %484, %483 ], !dbg !55
  %485 = and i32 %27, 4088
  %486 = lshr i32 %485, 11
  %487 = shl nuw nsw i32 %486, 2
  %488 = or disjoint i32 %487, %485
  %489 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %488
  %490 = or disjoint i32 %485, 4
  %491 = lshr i32 %27, 9
  %492 = and i32 %491, 4
  %493 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %492
  %494 = getelementptr inbounds nuw float, ptr addrspace(3) %493, i32 %490
  %495 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %191
  %496 = or disjoint i32 %191, 2048
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %496
  %497 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %191
  %gep72 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %496
  %.idx = shl nuw nsw i32 %486, 4
  %498 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx
  %499 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %498, i32 %485
  %500 = zext nneg i32 %191 to i64, !dbg !56
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 8
  %502 = getelementptr inbounds nuw i8, ptr addrspace(3) %499, i32 4
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %499, i32 8
  %504 = getelementptr inbounds nuw i8, ptr addrspace(3) %499, i32 12
  br label %505, !dbg !56

505:                                              ; preds = %__nv_rsqrtf.exit61, %505
  %506 = phi i1 [ true, %__nv_rsqrtf.exit61 ], [ false, %505 ]
  %indvars.iv112 = phi i64 [ 0, %__nv_rsqrtf.exit61 ], [ 2048, %505 ]
  %507 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %642, %505 ]
  %508 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit61 ], [ %643, %505 ]
  %509 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %641, %505 ]
  %510 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit61 ], [ %666, %505 ]
  %511 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit61 ], [ %657, %505 ]
  %512 = or disjoint i64 %indvars.iv112, %500, !dbg !57
  %513 = or disjoint i64 %indvars.iv112, %31, !dbg !57
  %514 = icmp samesign ult i64 %512, 3072, !dbg !58
  %515 = icmp samesign ult i64 %513, 3072, !dbg !58
  %516 = trunc nuw nsw i64 %513 to i32, !dbg !59
  %517 = add i32 %30, %516, !dbg !59
  %518 = sext i32 %517 to i64, !dbg !60
  %519 = getelementptr bfloat, ptr addrspace(1) %0, i64 %518, !dbg !60
  %520 = and i1 %26, %514, !dbg !61
  %521 = and i1 %25, %515, !dbg !61
  %522 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %519, i1 %521) #5, !dbg !62
  %523 = extractvalue { i32, i32, i32, i32 } %522, 0, !dbg !62
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !62
  %525 = extractvalue { i32, i32, i32, i32 } %522, 1, !dbg !62
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !62
  %527 = extractvalue { i32, i32, i32, i32 } %522, 2, !dbg !62
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !62
  %529 = extractvalue { i32, i32, i32, i32 } %522, 3, !dbg !62
  %530 = bitcast i32 %529 to <2 x bfloat>, !dbg !62
  %531 = extractelement <2 x bfloat> %524, i64 0, !dbg !62
  %532 = extractelement <2 x bfloat> %524, i64 1, !dbg !62
  %533 = extractelement <2 x bfloat> %526, i64 0, !dbg !62
  %534 = extractelement <2 x bfloat> %526, i64 1, !dbg !62
  %535 = extractelement <2 x bfloat> %528, i64 0, !dbg !62
  %536 = extractelement <2 x bfloat> %528, i64 1, !dbg !62
  %537 = extractelement <2 x bfloat> %530, i64 0, !dbg !62
  %538 = extractelement <2 x bfloat> %530, i64 1, !dbg !62
  %539 = fpext bfloat %531 to float, !dbg !63
  %540 = fpext bfloat %532 to float, !dbg !63
  %541 = fpext bfloat %533 to float, !dbg !63
  %542 = fpext bfloat %534 to float, !dbg !63
  %543 = fpext bfloat %535 to float, !dbg !63
  %544 = fpext bfloat %536 to float, !dbg !63
  %545 = fpext bfloat %537 to float, !dbg !63
  %546 = fpext bfloat %538 to float, !dbg !63
  %547 = add nuw nsw i64 %512, 3072, !dbg !64
  %548 = getelementptr float, ptr addrspace(1) %1, i64 %547, !dbg !65
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %548, i1 %514) #5, !dbg !66
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !66
  %551 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !66
  %552 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !66
  %553 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !66
  %554 = getelementptr bfloat, ptr addrspace(1) %2, i64 %547, !dbg !67
  %555 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %554, i1 %514) #5, !dbg !68
  %556 = extractvalue { i32, i32 } %555, 0, !dbg !68
  %557 = bitcast i32 %556 to <2 x bfloat>, !dbg !68
  %558 = extractvalue { i32, i32 } %555, 1, !dbg !68
  %559 = bitcast i32 %558 to <2 x bfloat>, !dbg !68
  %560 = getelementptr float, ptr addrspace(1) %1, i64 %512, !dbg !69
  %561 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %560, i1 %514) #5, !dbg !70
  %562 = extractvalue { i32, i32, i32, i32 } %561, 0, !dbg !70
  %563 = extractvalue { i32, i32, i32, i32 } %561, 1, !dbg !70
  %564 = extractvalue { i32, i32, i32, i32 } %561, 2, !dbg !70
  %565 = extractvalue { i32, i32, i32, i32 } %561, 3, !dbg !70
  %566 = getelementptr bfloat, ptr addrspace(1) %2, i64 %512, !dbg !71
  %567 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %566, i1 %514) #5, !dbg !72
  %568 = extractvalue { i32, i32 } %567, 0, !dbg !72
  %569 = bitcast i32 %568 to <2 x bfloat>, !dbg !72
  %570 = extractvalue { i32, i32 } %567, 1, !dbg !72
  %571 = bitcast i32 %570 to <2 x bfloat>, !dbg !72
  %572 = fsub float %539, %468, !dbg !73
  %573 = fsub float %540, %468, !dbg !73
  %574 = fsub float %541, %468, !dbg !73
  %575 = fsub float %542, %468, !dbg !73
  %576 = fsub float %543, %468, !dbg !73
  %577 = fsub float %544, %468, !dbg !73
  %578 = fsub float %545, %468, !dbg !73
  %579 = fsub float %546, %468, !dbg !73
  %580 = fmul float %.0.i60, %572, !dbg !74
  %581 = fmul float %.0.i60, %573, !dbg !74
  %582 = fmul float %.0.i60, %574, !dbg !74
  %583 = fmul float %.0.i60, %575, !dbg !74
  %584 = fmul float %.0.i60, %576, !dbg !74
  %585 = fmul float %.0.i60, %577, !dbg !74
  %586 = fmul float %.0.i60, %578, !dbg !74
  %587 = fmul float %.0.i60, %579, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %588 = bitcast float %580 to i32, !dbg !74
  %589 = bitcast float %581 to i32, !dbg !74
  %590 = bitcast float %582 to i32, !dbg !74
  %591 = bitcast float %583 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %489, i32 %588, i32 %589, i32 %590, i32 %591, i1 true) #5, !dbg !74
  %592 = bitcast float %584 to i32, !dbg !74
  %593 = bitcast float %585 to i32, !dbg !74
  %594 = bitcast float %586 to i32, !dbg !74
  %595 = bitcast float %587 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %494, i32 %592, i32 %593, i32 %594, i32 %595, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %596 = insertelement <2 x i32> poison, i32 %552, i64 0, !dbg !66
  %597 = insertelement <2 x i32> %596, i32 %553, i64 1, !dbg !66
  %598 = bitcast <2 x i32> %597 to <2 x float>, !dbg !66
  %599 = fpext <2 x bfloat> %559 to <2 x float>, !dbg !75
  %600 = insertelement <2 x i32> poison, i32 %564, i64 0, !dbg !70
  %601 = insertelement <2 x i32> %600, i32 %565, i64 1, !dbg !70
  %602 = bitcast <2 x i32> %601 to <2 x float>, !dbg !70
  %603 = fpext <2 x bfloat> %571 to <2 x float>, !dbg !76
  %604 = load <2 x float>, ptr addrspace(3) %501, align 8, !dbg !74
  %605 = fadd <2 x float> %598, %599, !dbg !77
  %606 = fadd <2 x float> %605, splat (float 1.000000e+00), !dbg !78
  %607 = fmul <2 x float> %606, %604, !dbg !79
  %608 = fadd <2 x float> %602, %603, !dbg !80
  %609 = fadd <2 x float> %608, %607, !dbg !81
  %610 = extractelement <2 x float> %609, i64 0, !dbg !82
  %611 = fcmp olt float %507, %610, !dbg !83
  %612 = extractelement <2 x float> %609, i64 1, !dbg !82
  %613 = fcmp olt float %508, %612, !dbg !83
  %614 = fcmp uno <2 x float> %509, zeroinitializer, !dbg !85
  %615 = fcmp uno float %507, 0.000000e+00, !dbg !85
  %616 = fcmp uno float %508, 0.000000e+00, !dbg !85
  %617 = fcmp uno <4 x float> %511, zeroinitializer, !dbg !85
  %618 = or i1 %615, %611, !dbg !86
  %619 = or i1 %616, %613, !dbg !86
  %620 = insertelement <2 x i32> poison, i32 %550, i64 0, !dbg !66
  %621 = insertelement <2 x i32> %620, i32 %551, i64 1, !dbg !66
  %622 = bitcast <2 x i32> %621 to <2 x float>, !dbg !66
  %623 = fpext <2 x bfloat> %557 to <2 x float>, !dbg !75
  %624 = insertelement <2 x i32> poison, i32 %562, i64 0, !dbg !70
  %625 = insertelement <2 x i32> %624, i32 %563, i64 1, !dbg !70
  %626 = bitcast <2 x i32> %625 to <2 x float>, !dbg !70
  %627 = fpext <2 x bfloat> %569 to <2 x float>, !dbg !76
  %628 = load <2 x float>, ptr addrspace(3) %495, align 16, !dbg !74
  %629 = fadd <2 x float> %622, %623, !dbg !77
  %630 = fadd <2 x float> %629, splat (float 1.000000e+00), !dbg !78
  %631 = fmul <2 x float> %630, %628, !dbg !79
  %632 = fadd <2 x float> %626, %627, !dbg !80
  %633 = fadd <2 x float> %632, %631, !dbg !81
  %634 = fcmp olt <2 x float> %509, %633, !dbg !83
  %635 = or <2 x i1> %614, %634, !dbg !86
  %636 = select <2 x i1> %635, <2 x float> %509, <2 x float> %633, !dbg !87
  %637 = select i1 %618, float %507, float %610, !dbg !87
  %638 = select i1 %619, float %508, float %612, !dbg !87
  %639 = insertelement <2 x i1> poison, i1 %520, i64 0, !dbg !88
  %640 = shufflevector <2 x i1> %639, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !88
  %641 = select <2 x i1> %640, <2 x float> %636, <2 x float> %509, !dbg !88
  %642 = select i1 %520, float %637, float %507, !dbg !88
  %643 = select i1 %520, float %638, float %508, !dbg !88
  %644 = extractelement <2 x float> %633, i64 0, !dbg !82
  %645 = extractelement <2 x float> %633, i64 1, !dbg !82
  %646 = fcmp uno <8 x float> %510, zeroinitializer, !dbg !89
  %647 = load <4 x float>, ptr addrspace(3) %gep, align 16, !dbg !74
  %648 = shufflevector <2 x float> %630, <2 x float> %606, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %649 = fmul <4 x float> %648, %647, !dbg !79
  %650 = shufflevector <2 x float> %632, <2 x float> %608, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %651 = fadd <4 x float> %650, %649, !dbg !81
  %652 = fcmp olt <4 x float> %511, %651, !dbg !83
  %653 = or <4 x i1> %617, %652, !dbg !86
  %654 = select <4 x i1> %653, <4 x float> %511, <4 x float> %651, !dbg !87
  %655 = insertelement <4 x i1> poison, i1 %520, i64 0, !dbg !88
  %656 = shufflevector <4 x i1> %655, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !88
  %657 = select <4 x i1> %656, <4 x float> %654, <4 x float> %511, !dbg !88
  %658 = shufflevector <2 x float> %633, <2 x float> %609, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !91
  %659 = shufflevector <4 x float> %651, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !91
  %660 = shufflevector <8 x float> %658, <8 x float> %659, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !91
  %661 = fcmp ogt <8 x float> %510, %660, !dbg !91
  %662 = or <8 x i1> %646, %661, !dbg !92
  %663 = select <8 x i1> %662, <8 x float> %510, <8 x float> %660, !dbg !93
  %664 = insertelement <8 x i1> poison, i1 %520, i64 0, !dbg !94
  %665 = shufflevector <8 x i1> %664, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !94
  %666 = select <8 x i1> %665, <8 x float> %663, <8 x float> %510, !dbg !94
  %667 = getelementptr bfloat, ptr addrspace(1) %3, i64 %518, !dbg !95
  %668 = fptrunc float %644 to bfloat, !dbg !82
  %669 = fptrunc float %645 to bfloat, !dbg !82
  %670 = fptrunc float %610 to bfloat, !dbg !82
  %671 = fptrunc float %612 to bfloat, !dbg !82
  %672 = extractelement <4 x float> %651, i64 0, !dbg !82
  %673 = fptrunc float %672 to bfloat, !dbg !82
  %674 = extractelement <4 x float> %651, i64 1, !dbg !82
  %675 = fptrunc float %674 to bfloat, !dbg !82
  %676 = extractelement <4 x float> %651, i64 2, !dbg !82
  %677 = fptrunc float %676 to bfloat, !dbg !82
  %678 = extractelement <4 x float> %651, i64 3, !dbg !82
  %679 = fptrunc float %678 to bfloat, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %680 = bitcast bfloat %668 to i16, !dbg !82
  %681 = bitcast bfloat %669 to i16, !dbg !82
  %682 = bitcast bfloat %670 to i16, !dbg !82
  %683 = bitcast bfloat %671 to i16, !dbg !82
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %497, i16 %680, i16 %681, i16 %682, i16 %683, i1 true) #5, !dbg !82
  %684 = bitcast bfloat %673 to i16, !dbg !82
  %685 = bitcast bfloat %675 to i16, !dbg !82
  %686 = bitcast bfloat %677 to i16, !dbg !82
  %687 = bitcast bfloat %679 to i16, !dbg !82
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %gep72, i16 %684, i16 %685, i16 %686, i16 %687, i1 true) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %.extract = load i32, ptr addrspace(3) %499, align 16, !dbg !82
  %.extract63 = load i32, ptr addrspace(3) %502, align 4, !dbg !82
  %.extract65 = load i32, ptr addrspace(3) %503, align 8, !dbg !82
  %.extract67 = load i32, ptr addrspace(3) %504, align 4, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %667, i1 %521) #5, !dbg !82
  br i1 %506, label %505, label %688, !dbg !56

688:                                              ; preds = %505
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %689 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %641, <2 x i32> <i32 0, i32 2>, !dbg !98
  %690 = fcmp olt <2 x float> %689, %641, !dbg !98
  %691 = fcmp uno <2 x float> %689, %641, !dbg !98
  %shift = shufflevector <2 x i1> %690, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %692 = or <2 x i1> %shift, %691, !dbg !99
  %693 = extractelement <2 x i1> %692, i64 0, !dbg !99
  %694 = extractelement <2 x float> %641, i64 0, !dbg !100
  %695 = extractelement <2 x float> %641, i64 1, !dbg !100
  %696 = select i1 %693, float %694, float %695, !dbg !100
  %697 = fcmp olt float %696, %642, !dbg !98
  %698 = fcmp uno float %696, 0.000000e+00, !dbg !101
  %699 = or i1 %697, %698, !dbg !99
  %700 = select i1 %699, float %696, float %642, !dbg !100
  %701 = fcmp olt float %700, %643, !dbg !98
  %702 = fcmp uno float %700, 0.000000e+00, !dbg !101
  %703 = or i1 %701, %702, !dbg !99
  %704 = select i1 %703, float %700, float %643, !dbg !100
  %705 = extractelement <4 x float> %657, i64 0, !dbg !98
  %706 = extractelement <4 x float> %657, i64 1, !dbg !98
  %707 = fcmp olt float %705, %706, !dbg !98
  %708 = fcmp uno float %705, 0.000000e+00, !dbg !101
  %709 = or i1 %707, %708, !dbg !99
  %710 = select i1 %709, float %705, float %706, !dbg !100
  %711 = extractelement <4 x float> %657, i64 2, !dbg !98
  %712 = fcmp olt float %710, %711, !dbg !98
  %713 = fcmp uno float %710, 0.000000e+00, !dbg !101
  %714 = or i1 %712, %713, !dbg !99
  %715 = select i1 %714, float %710, float %711, !dbg !100
  %716 = extractelement <4 x float> %657, i64 3, !dbg !98
  %717 = fcmp olt float %715, %716, !dbg !98
  %718 = fcmp uno float %715, 0.000000e+00, !dbg !101
  %719 = or i1 %717, %718, !dbg !99
  %720 = select i1 %719, float %715, float %716, !dbg !100
  %721 = bitcast float %704 to i32, !dbg !96
  %722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %721, i32 16, i32 31), !dbg !96
  %723 = bitcast i32 %722 to float, !dbg !96
  %724 = fcmp olt float %704, %723, !dbg !98
  %725 = fcmp uno float %704, 0.000000e+00, !dbg !101
  %726 = or i1 %725, %724, !dbg !99
  %727 = select i1 %726, float %704, float %723, !dbg !100
  %728 = bitcast float %727 to i32, !dbg !96
  %729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %728, i32 8, i32 31), !dbg !96
  %730 = bitcast i32 %729 to float, !dbg !96
  %731 = fcmp olt float %727, %730, !dbg !98
  %732 = fcmp uno float %727, 0.000000e+00, !dbg !101
  %733 = or i1 %731, %732, !dbg !99
  %734 = select i1 %733, float %727, float %730, !dbg !100
  %735 = bitcast float %734 to i32, !dbg !96
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 4, i32 31), !dbg !96
  %737 = bitcast i32 %736 to float, !dbg !96
  %738 = fcmp olt float %734, %737, !dbg !98
  %739 = fcmp uno float %734, 0.000000e+00, !dbg !101
  %740 = or i1 %738, %739, !dbg !99
  %741 = select i1 %740, float %734, float %737, !dbg !100
  %742 = bitcast float %741 to i32, !dbg !96
  %743 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %742, i32 2, i32 31), !dbg !96
  %744 = bitcast i32 %743 to float, !dbg !96
  %745 = fcmp olt float %741, %744, !dbg !98
  %746 = fcmp uno float %741, 0.000000e+00, !dbg !101
  %747 = or i1 %745, %746, !dbg !99
  %748 = select i1 %747, float %741, float %744, !dbg !100
  %749 = bitcast float %748 to i32, !dbg !96
  %750 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %749, i32 1, i32 31), !dbg !96
  %751 = bitcast i32 %750 to float, !dbg !96
  %752 = fcmp olt float %748, %751, !dbg !98
  %753 = fcmp uno float %748, 0.000000e+00, !dbg !101
  %754 = or i1 %752, %753, !dbg !99
  %755 = bitcast float %720 to i32, !dbg !96
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 16, i32 31), !dbg !96
  %757 = bitcast i32 %756 to float, !dbg !96
  %758 = fcmp olt float %720, %757, !dbg !98
  %759 = fcmp uno float %720, 0.000000e+00, !dbg !101
  %760 = or i1 %759, %758, !dbg !99
  %761 = select i1 %760, float %720, float %757, !dbg !100
  %762 = bitcast float %761 to i32, !dbg !96
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 8, i32 31), !dbg !96
  %764 = bitcast i32 %763 to float, !dbg !96
  %765 = fcmp olt float %761, %764, !dbg !98
  %766 = fcmp uno float %761, 0.000000e+00, !dbg !101
  %767 = or i1 %765, %766, !dbg !99
  %768 = select i1 %767, float %761, float %764, !dbg !100
  %769 = bitcast float %768 to i32, !dbg !96
  %770 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %769, i32 4, i32 31), !dbg !96
  %771 = bitcast i32 %770 to float, !dbg !96
  %772 = fcmp olt float %768, %771, !dbg !98
  %773 = fcmp uno float %768, 0.000000e+00, !dbg !101
  %774 = or i1 %772, %773, !dbg !99
  %775 = select i1 %774, float %768, float %771, !dbg !100
  %776 = bitcast float %775 to i32, !dbg !96
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %776, i32 2, i32 31), !dbg !96
  %778 = bitcast i32 %777 to float, !dbg !96
  %779 = fcmp olt float %775, %778, !dbg !98
  %780 = fcmp uno float %775, 0.000000e+00, !dbg !101
  %781 = or i1 %779, %780, !dbg !99
  %782 = select i1 %781, float %775, float %778, !dbg !100
  %783 = bitcast float %782 to i32, !dbg !96
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %783, i32 1, i32 31), !dbg !96
  %785 = bitcast i32 %784 to float, !dbg !96
  %786 = fcmp olt float %782, %785, !dbg !98
  %787 = fcmp uno float %782, 0.000000e+00, !dbg !101
  %788 = or i1 %786, %787, !dbg !99
  %789 = and i32 %187, 15, !dbg !96
  %790 = getelementptr float, ptr addrspace(3) @global_smem, i32 %789, !dbg !96
  %791 = select i1 %754, i32 %749, i32 %750, !dbg !100
  %792 = insertelement <1 x i32> poison, i32 %791, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %790, <1 x i32> %792, i1 %382) #5, !dbg !96
  %793 = or disjoint i32 %789, 16, !dbg !96
  %794 = getelementptr float, ptr addrspace(3) @global_smem, i32 %793, !dbg !96
  %795 = select i1 %788, i32 %783, i32 %784, !dbg !100
  %796 = insertelement <1 x i32> poison, i32 %795, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %794, <1 x i32> %796, i1 %382) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %797 = icmp slt i32 %21, 32, !dbg !96
  %798 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %797) #5, !dbg !96
  %799 = bitcast i32 %798 to float, !dbg !96
  %800 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 8, i32 31), !dbg !96
  %801 = bitcast i32 %800 to float, !dbg !96
  %802 = fcmp olt float %799, %801, !dbg !98
  %803 = fcmp uno float %799, 0.000000e+00, !dbg !101
  %804 = or i1 %803, %802, !dbg !99
  %805 = select i1 %804, float %799, float %801, !dbg !100
  %806 = bitcast float %805 to i32, !dbg !96
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 4, i32 31), !dbg !96
  %808 = bitcast i32 %807 to float, !dbg !96
  %809 = fcmp olt float %805, %808, !dbg !98
  %810 = fcmp uno float %805, 0.000000e+00, !dbg !101
  %811 = or i1 %809, %810, !dbg !99
  %812 = select i1 %811, float %805, float %808, !dbg !100
  %813 = bitcast float %812 to i32, !dbg !96
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 2, i32 31), !dbg !96
  %815 = bitcast i32 %814 to float, !dbg !96
  %816 = fcmp olt float %812, %815, !dbg !98
  %817 = fcmp uno float %812, 0.000000e+00, !dbg !101
  %818 = or i1 %816, %817, !dbg !99
  %819 = select i1 %818, float %812, float %815, !dbg !100
  %820 = bitcast float %819 to i32, !dbg !96
  %821 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %820, i32 1, i32 31), !dbg !96
  %822 = bitcast i32 %821 to float, !dbg !96
  %823 = fcmp olt float %819, %822, !dbg !98
  %824 = fcmp uno float %819, 0.000000e+00, !dbg !101
  %825 = or i1 %823, %824, !dbg !99
  %826 = and i32 %21, 15, !dbg !96
  %827 = icmp eq i32 %826, 0, !dbg !96
  %828 = and i1 %797, %827, !dbg !96
  %829 = select i1 %825, i32 %820, i32 %821, !dbg !100
  %830 = insertelement <1 x i32> poison, i32 %829, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %830, i1 %828) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %831 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !96
  %832 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %833 = bitcast float %831 to i32, !dbg !102
  %834 = bitcast float %832 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %833, i32 %834, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %835 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %188, !dbg !102
  %836 = load float, ptr addrspace(3) %835, align 4, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %837 = extractelement <8 x float> %666, i64 0, !dbg !105
  %838 = extractelement <8 x float> %666, i64 1, !dbg !105
  %839 = fcmp ogt float %837, %838, !dbg !105
  %840 = fcmp uno float %837, 0.000000e+00, !dbg !106
  %841 = or i1 %839, %840, !dbg !107
  %842 = select i1 %841, float %837, float %838, !dbg !108
  %843 = extractelement <8 x float> %666, i64 2, !dbg !105
  %844 = fcmp ogt float %842, %843, !dbg !105
  %845 = fcmp uno float %842, 0.000000e+00, !dbg !106
  %846 = or i1 %844, %845, !dbg !107
  %847 = select i1 %846, float %842, float %843, !dbg !108
  %848 = extractelement <8 x float> %666, i64 3, !dbg !105
  %849 = fcmp ogt float %847, %848, !dbg !105
  %850 = fcmp uno float %847, 0.000000e+00, !dbg !106
  %851 = or i1 %849, %850, !dbg !107
  %852 = select i1 %851, float %847, float %848, !dbg !108
  %853 = extractelement <8 x float> %666, i64 4, !dbg !105
  %854 = extractelement <8 x float> %666, i64 5, !dbg !105
  %855 = fcmp ogt float %853, %854, !dbg !105
  %856 = fcmp uno float %853, 0.000000e+00, !dbg !106
  %857 = or i1 %855, %856, !dbg !107
  %858 = select i1 %857, float %853, float %854, !dbg !108
  %859 = extractelement <8 x float> %666, i64 6, !dbg !105
  %860 = fcmp ogt float %858, %859, !dbg !105
  %861 = fcmp uno float %858, 0.000000e+00, !dbg !106
  %862 = or i1 %860, %861, !dbg !107
  %863 = select i1 %862, float %858, float %859, !dbg !108
  %864 = extractelement <8 x float> %666, i64 7, !dbg !105
  %865 = fcmp ogt float %863, %864, !dbg !105
  %866 = fcmp uno float %863, 0.000000e+00, !dbg !106
  %867 = or i1 %865, %866, !dbg !107
  %868 = select i1 %867, float %863, float %864, !dbg !108
  %869 = bitcast float %852 to i32, !dbg !103
  %870 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %869, i32 16, i32 31), !dbg !103
  %871 = bitcast i32 %870 to float, !dbg !103
  %872 = fcmp ogt float %852, %871, !dbg !105
  %873 = fcmp uno float %852, 0.000000e+00, !dbg !106
  %874 = or i1 %873, %872, !dbg !107
  %875 = select i1 %874, float %852, float %871, !dbg !108
  %876 = bitcast float %875 to i32, !dbg !103
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 8, i32 31), !dbg !103
  %878 = bitcast i32 %877 to float, !dbg !103
  %879 = fcmp ogt float %875, %878, !dbg !105
  %880 = fcmp uno float %875, 0.000000e+00, !dbg !106
  %881 = or i1 %879, %880, !dbg !107
  %882 = select i1 %881, float %875, float %878, !dbg !108
  %883 = bitcast float %882 to i32, !dbg !103
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %883, i32 4, i32 31), !dbg !103
  %885 = bitcast i32 %884 to float, !dbg !103
  %886 = fcmp ogt float %882, %885, !dbg !105
  %887 = fcmp uno float %882, 0.000000e+00, !dbg !106
  %888 = or i1 %886, %887, !dbg !107
  %889 = select i1 %888, float %882, float %885, !dbg !108
  %890 = bitcast float %889 to i32, !dbg !103
  %891 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %890, i32 2, i32 31), !dbg !103
  %892 = bitcast i32 %891 to float, !dbg !103
  %893 = fcmp ogt float %889, %892, !dbg !105
  %894 = fcmp uno float %889, 0.000000e+00, !dbg !106
  %895 = or i1 %893, %894, !dbg !107
  %896 = select i1 %895, float %889, float %892, !dbg !108
  %897 = bitcast float %896 to i32, !dbg !103
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 1, i32 31), !dbg !103
  %899 = bitcast i32 %898 to float, !dbg !103
  %900 = fcmp ogt float %896, %899, !dbg !105
  %901 = fcmp uno float %896, 0.000000e+00, !dbg !106
  %902 = or i1 %900, %901, !dbg !107
  %903 = bitcast float %868 to i32, !dbg !103
  %904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %903, i32 16, i32 31), !dbg !103
  %905 = bitcast i32 %904 to float, !dbg !103
  %906 = fcmp ogt float %868, %905, !dbg !105
  %907 = fcmp uno float %868, 0.000000e+00, !dbg !106
  %908 = or i1 %907, %906, !dbg !107
  %909 = select i1 %908, float %868, float %905, !dbg !108
  %910 = bitcast float %909 to i32, !dbg !103
  %911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %910, i32 8, i32 31), !dbg !103
  %912 = bitcast i32 %911 to float, !dbg !103
  %913 = fcmp ogt float %909, %912, !dbg !105
  %914 = fcmp uno float %909, 0.000000e+00, !dbg !106
  %915 = or i1 %913, %914, !dbg !107
  %916 = select i1 %915, float %909, float %912, !dbg !108
  %917 = bitcast float %916 to i32, !dbg !103
  %918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %917, i32 4, i32 31), !dbg !103
  %919 = bitcast i32 %918 to float, !dbg !103
  %920 = fcmp ogt float %916, %919, !dbg !105
  %921 = fcmp uno float %916, 0.000000e+00, !dbg !106
  %922 = or i1 %920, %921, !dbg !107
  %923 = select i1 %922, float %916, float %919, !dbg !108
  %924 = bitcast float %923 to i32, !dbg !103
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 2, i32 31), !dbg !103
  %926 = bitcast i32 %925 to float, !dbg !103
  %927 = fcmp ogt float %923, %926, !dbg !105
  %928 = fcmp uno float %923, 0.000000e+00, !dbg !106
  %929 = or i1 %927, %928, !dbg !107
  %930 = select i1 %929, float %923, float %926, !dbg !108
  %931 = bitcast float %930 to i32, !dbg !103
  %932 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %931, i32 1, i32 31), !dbg !103
  %933 = bitcast i32 %932 to float, !dbg !103
  %934 = fcmp ogt float %930, %933, !dbg !105
  %935 = fcmp uno float %930, 0.000000e+00, !dbg !106
  %936 = or i1 %934, %935, !dbg !107
  %937 = select i1 %902, i32 %897, i32 %898, !dbg !108
  %938 = insertelement <1 x i32> poison, i32 %937, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %790, <1 x i32> %938, i1 %382) #5, !dbg !103
  %939 = select i1 %936, i32 %931, i32 %932, !dbg !108
  %940 = insertelement <1 x i32> poison, i32 %939, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %794, <1 x i32> %940, i1 %382) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %941 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %797) #5, !dbg !103
  %942 = bitcast i32 %941 to float, !dbg !103
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 8, i32 31), !dbg !103
  %944 = bitcast i32 %943 to float, !dbg !103
  %945 = fcmp ogt float %942, %944, !dbg !105
  %946 = fcmp uno float %942, 0.000000e+00, !dbg !106
  %947 = or i1 %946, %945, !dbg !107
  %948 = select i1 %947, float %942, float %944, !dbg !108
  %949 = bitcast float %948 to i32, !dbg !103
  %950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %949, i32 4, i32 31), !dbg !103
  %951 = bitcast i32 %950 to float, !dbg !103
  %952 = fcmp ogt float %948, %951, !dbg !105
  %953 = fcmp uno float %948, 0.000000e+00, !dbg !106
  %954 = or i1 %952, %953, !dbg !107
  %955 = select i1 %954, float %948, float %951, !dbg !108
  %956 = bitcast float %955 to i32, !dbg !103
  %957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %956, i32 2, i32 31), !dbg !103
  %958 = bitcast i32 %957 to float, !dbg !103
  %959 = fcmp ogt float %955, %958, !dbg !105
  %960 = fcmp uno float %955, 0.000000e+00, !dbg !106
  %961 = or i1 %959, %960, !dbg !107
  %962 = select i1 %961, float %955, float %958, !dbg !108
  %963 = bitcast float %962 to i32, !dbg !103
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 1, i32 31), !dbg !103
  %965 = bitcast i32 %964 to float, !dbg !103
  %966 = fcmp ogt float %962, %965, !dbg !105
  %967 = fcmp uno float %962, 0.000000e+00, !dbg !106
  %968 = or i1 %966, %967, !dbg !107
  %969 = select i1 %968, i32 %963, i32 %964, !dbg !108
  %970 = insertelement <1 x i32> poison, i32 %969, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %970, i1 %828) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %971 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !103
  %972 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %973 = bitcast float %971 to i32, !dbg !109
  %974 = bitcast float %972 to i32, !dbg !109
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %973, i32 %974, i1 true) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %975 = load float, ptr addrspace(3) %835, align 4, !dbg !109
  %976 = sext i32 %189 to i64, !dbg !110
  %977 = getelementptr bfloat, ptr addrspace(1) %4, i64 %976, !dbg !110
  %978 = fptrunc float %836 to bfloat, !dbg !102
  %979 = and i32 %21, 510, !dbg !102
  %980 = icmp eq i32 %979, 0, !dbg !102
  %981 = bitcast bfloat %978 to i16, !dbg !102
  %982 = and i1 %980, %190, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %981, ptr addrspace(1) %977, i1 %982) #5, !dbg !102
  %983 = getelementptr bfloat, ptr addrspace(1) %5, i64 %976, !dbg !111
  %984 = fptrunc float %975 to bfloat, !dbg !109
  %985 = bitcast bfloat %984 to i16, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %985, ptr addrspace(1) %983, i1 %982) #5, !dbg !109
  %986 = getelementptr bfloat, ptr addrspace(1) %6, i64 %976, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %981, ptr addrspace(1) %986, i1 %982) #5, !dbg !113
  %987 = getelementptr bfloat, ptr addrspace(1) %7, i64 %976, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %985, ptr addrspace(1) %987, i1 %982) #5, !dbg !115
  %988 = getelementptr bfloat, ptr addrspace(1) %8, i64 %976, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %981, ptr addrspace(1) %988, i1 %982) #5, !dbg !117
  %989 = getelementptr bfloat, ptr addrspace(1) %9, i64 %976, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %985, ptr addrspace(1) %989, i1 %982) #5, !dbg !119
  %990 = getelementptr bfloat, ptr addrspace(1) %10, i64 %976, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %981, ptr addrspace(1) %990, i1 %982) #5, !dbg !121
  %991 = getelementptr bfloat, ptr addrspace(1) %11, i64 %976, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %985, ptr addrspace(1) %991, i1 %982) #5, !dbg !123
  %.inv = fcmp oge float %831, 0.000000e+00, !dbg !124
  %992 = select i1 %.inv, float 0.000000e+00, float %831, !dbg !124
  %.inv4 = fcmp oge float %832, 0.000000e+00, !dbg !124
  %993 = select i1 %.inv4, float 0.000000e+00, float %832, !dbg !124
  %994 = fsub float 0.000000e+00, %992, !dbg !126
  %995 = fsub float 0.000000e+00, %993, !dbg !126
  %.inv5 = fcmp ole float %971, 0.000000e+00, !dbg !127
  %996 = select i1 %.inv5, float 0.000000e+00, float %971, !dbg !127
  %.inv6 = fcmp ole float %972, 0.000000e+00, !dbg !127
  %997 = select i1 %.inv6, float 0.000000e+00, float %972, !dbg !127
  %998 = fcmp ogt float %994, %996, !dbg !129
  %999 = fcmp ogt float %995, %997, !dbg !129
  %1000 = fcmp uno float %994, 0.000000e+00, !dbg !131
  %1001 = fcmp uno float %995, 0.000000e+00, !dbg !131
  %1002 = or i1 %1000, %998, !dbg !132
  %1003 = or i1 %1001, %999, !dbg !132
  %1004 = select i1 %1002, float %994, float %996, !dbg !133
  %1005 = select i1 %1003, float %995, float %997, !dbg !133
  %1006 = fmul float %1004, 0x3F80204080000000, !dbg !134
  %1007 = fmul float %1005, 0x3F80204080000000, !dbg !134
  %1008 = fcmp ogt float %1006, 0x3EE4F8B580000000, !dbg !135
  %1009 = fcmp ogt float %1007, 0x3EE4F8B580000000, !dbg !135
  %1010 = fcmp uno float %1006, 0.000000e+00, !dbg !137
  %1011 = fcmp uno float %1007, 0.000000e+00, !dbg !137
  %1012 = or i1 %1008, %1010, !dbg !138
  %1013 = or i1 %1009, %1011, !dbg !138
  %1014 = select i1 %1012, float %1006, float 0x3EE4F8B580000000, !dbg !139
  %1015 = select i1 %1013, float %1007, float 0x3EE4F8B580000000, !dbg !139
  %1016 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1014), !dbg !140
  %1017 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1015), !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %1018 = bitcast float %1016 to <1 x i32>, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1018, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1018, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1018, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1018, i1 true) #5, !dbg !141
  %1019 = bitcast float %1017 to <1 x i32>, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1019, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1019, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1019, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1019, i1 true) #5, !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %1020 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %383, !dbg !141
  %1021 = load float, ptr addrspace(3) %1020, align 8, !dbg !141
  %1022 = add i32 %30, %28, !dbg !142
  %1023 = sext i32 %1022 to i64, !dbg !143
  %1024 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1023, !dbg !143
  %1025 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1024, i1 %25) #5, !dbg !144
  %1026 = extractvalue { i32, i32, i32, i32 } %1025, 0, !dbg !144
  %1027 = bitcast i32 %1026 to <2 x bfloat>, !dbg !144
  %1028 = extractvalue { i32, i32, i32, i32 } %1025, 1, !dbg !144
  %1029 = bitcast i32 %1028 to <2 x bfloat>, !dbg !144
  %1030 = extractvalue { i32, i32, i32, i32 } %1025, 2, !dbg !144
  %1031 = bitcast i32 %1030 to <2 x bfloat>, !dbg !144
  %1032 = extractvalue { i32, i32, i32, i32 } %1025, 3, !dbg !144
  %1033 = bitcast i32 %1032 to <2 x bfloat>, !dbg !144
  %1034 = extractelement <2 x bfloat> %1027, i64 0, !dbg !144
  %1035 = extractelement <2 x bfloat> %1027, i64 1, !dbg !144
  %1036 = extractelement <2 x bfloat> %1029, i64 0, !dbg !144
  %1037 = extractelement <2 x bfloat> %1029, i64 1, !dbg !144
  %1038 = extractelement <2 x bfloat> %1031, i64 0, !dbg !144
  %1039 = extractelement <2 x bfloat> %1031, i64 1, !dbg !144
  %1040 = extractelement <2 x bfloat> %1033, i64 0, !dbg !144
  %1041 = extractelement <2 x bfloat> %1033, i64 1, !dbg !144
  %1042 = fpext bfloat %1034 to float, !dbg !145
  %1043 = fpext bfloat %1035 to float, !dbg !145
  %1044 = fpext bfloat %1036 to float, !dbg !145
  %1045 = fpext bfloat %1037 to float, !dbg !145
  %1046 = fpext bfloat %1038 to float, !dbg !145
  %1047 = fpext bfloat %1039 to float, !dbg !145
  %1048 = fpext bfloat %1040 to float, !dbg !145
  %1049 = fpext bfloat %1041 to float, !dbg !145
  %1050 = fmul float %1021, %1042, !dbg !141
  %1051 = fmul float %1021, %1043, !dbg !141
  %1052 = fmul float %1021, %1044, !dbg !141
  %1053 = fmul float %1021, %1045, !dbg !141
  %1054 = fmul float %1021, %1046, !dbg !141
  %1055 = fmul float %1021, %1047, !dbg !141
  %1056 = fmul float %1021, %1048, !dbg !141
  %1057 = fmul float %1021, %1049, !dbg !141
  %1058 = tail call float @llvm.nvvm.round.f(float %1050) #5, !dbg !146
  %1059 = tail call float @llvm.nvvm.round.f(float %1051) #5, !dbg !146
  %1060 = tail call float @llvm.nvvm.round.f(float %1052) #5, !dbg !146
  %1061 = tail call float @llvm.nvvm.round.f(float %1053) #5, !dbg !146
  %1062 = tail call float @llvm.nvvm.round.f(float %1054) #5, !dbg !146
  %1063 = tail call float @llvm.nvvm.round.f(float %1055) #5, !dbg !146
  %1064 = tail call float @llvm.nvvm.round.f(float %1056) #5, !dbg !146
  %1065 = tail call float @llvm.nvvm.round.f(float %1057) #5, !dbg !146
  %1066 = insertelement <4 x float> poison, float %1058, i64 0, !dbg !147
  %1067 = insertelement <4 x float> %1066, float %1059, i64 1, !dbg !147
  %1068 = insertelement <4 x float> %1067, float %1060, i64 2, !dbg !147
  %1069 = insertelement <4 x float> %1068, float %1061, i64 3, !dbg !147
  %1070 = fcmp ogt <4 x float> %1069, splat (float -1.270000e+02), !dbg !147
  %1071 = fcmp uno <4 x float> %1069, zeroinitializer, !dbg !149
  %1072 = or <4 x i1> %1070, %1071, !dbg !150
  %1073 = select <4 x i1> %1072, <4 x float> %1069, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1074 = fcmp olt <4 x float> %1073, splat (float 1.270000e+02), !dbg !152
  %1075 = fcmp uno <4 x float> %1073, zeroinitializer, !dbg !154
  %1076 = or <4 x i1> %1074, %1075, !dbg !155
  %1077 = fptosi <4 x float> %1073 to <4 x i8>, !dbg !156
  %1078 = select <4 x i1> %1076, <4 x i8> %1077, <4 x i8> splat (i8 127), !dbg !157
  %1079 = insertelement <4 x float> poison, float %1062, i64 0, !dbg !147
  %1080 = insertelement <4 x float> %1079, float %1063, i64 1, !dbg !147
  %1081 = insertelement <4 x float> %1080, float %1064, i64 2, !dbg !147
  %1082 = insertelement <4 x float> %1081, float %1065, i64 3, !dbg !147
  %1083 = fcmp ogt <4 x float> %1082, splat (float -1.270000e+02), !dbg !147
  %1084 = fcmp uno <4 x float> %1082, zeroinitializer, !dbg !149
  %1085 = or <4 x i1> %1083, %1084, !dbg !150
  %1086 = select <4 x i1> %1085, <4 x float> %1082, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1087 = fcmp olt <4 x float> %1086, splat (float 1.270000e+02), !dbg !152
  %1088 = fcmp uno <4 x float> %1086, zeroinitializer, !dbg !154
  %1089 = or <4 x i1> %1087, %1088, !dbg !155
  %1090 = fptosi <4 x float> %1086 to <4 x i8>, !dbg !156
  %1091 = select <4 x i1> %1089, <4 x i8> %1090, <4 x i8> splat (i8 127), !dbg !157
  %1092 = getelementptr i8, ptr addrspace(1) %12, i64 %1023, !dbg !158
  %1093 = bitcast <4 x i8> %1078 to i32, !dbg !159
  %1094 = bitcast <4 x i8> %1091 to i32, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1093, i32 %1094, ptr addrspace(1) %1092, i1 %25) #5, !dbg !159
  %1095 = getelementptr i8, ptr addrspace(1) %13, i64 %1023, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1093, i32 %1094, ptr addrspace(1) %1095, i1 %25) #5, !dbg !161
  %1096 = getelementptr i8, ptr addrspace(1) %14, i64 %1023, !dbg !162
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1093, i32 %1094, ptr addrspace(1) %1096, i1 %25) #5, !dbg !163
  %1097 = getelementptr i8, ptr addrspace(1) %15, i64 %1023, !dbg !164
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1093, i32 %1094, ptr addrspace(1) %1097, i1 %25) #5, !dbg !165
  %1098 = or disjoint i64 %31, 2048, !dbg !166
  %1099 = icmp samesign ult i64 %1098, 3072, !dbg !167
  %1100 = trunc nuw nsw i64 %1098 to i32, !dbg !142
  %1101 = add i32 %30, %1100, !dbg !142
  %1102 = sext i32 %1101 to i64, !dbg !143
  %1103 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1102, !dbg !143
  %1104 = and i1 %25, %1099, !dbg !168
  %1105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1103, i1 %1104) #5, !dbg !144
  %1106 = extractvalue { i32, i32, i32, i32 } %1105, 0, !dbg !144
  %1107 = bitcast i32 %1106 to <2 x bfloat>, !dbg !144
  %1108 = extractvalue { i32, i32, i32, i32 } %1105, 1, !dbg !144
  %1109 = bitcast i32 %1108 to <2 x bfloat>, !dbg !144
  %1110 = extractvalue { i32, i32, i32, i32 } %1105, 2, !dbg !144
  %1111 = bitcast i32 %1110 to <2 x bfloat>, !dbg !144
  %1112 = extractvalue { i32, i32, i32, i32 } %1105, 3, !dbg !144
  %1113 = bitcast i32 %1112 to <2 x bfloat>, !dbg !144
  %1114 = extractelement <2 x bfloat> %1107, i64 0, !dbg !144
  %1115 = extractelement <2 x bfloat> %1107, i64 1, !dbg !144
  %1116 = extractelement <2 x bfloat> %1109, i64 0, !dbg !144
  %1117 = extractelement <2 x bfloat> %1109, i64 1, !dbg !144
  %1118 = extractelement <2 x bfloat> %1111, i64 0, !dbg !144
  %1119 = extractelement <2 x bfloat> %1111, i64 1, !dbg !144
  %1120 = extractelement <2 x bfloat> %1113, i64 0, !dbg !144
  %1121 = extractelement <2 x bfloat> %1113, i64 1, !dbg !144
  %1122 = fpext bfloat %1114 to float, !dbg !145
  %1123 = fpext bfloat %1115 to float, !dbg !145
  %1124 = fpext bfloat %1116 to float, !dbg !145
  %1125 = fpext bfloat %1117 to float, !dbg !145
  %1126 = fpext bfloat %1118 to float, !dbg !145
  %1127 = fpext bfloat %1119 to float, !dbg !145
  %1128 = fpext bfloat %1120 to float, !dbg !145
  %1129 = fpext bfloat %1121 to float, !dbg !145
  %1130 = fmul float %1021, %1122, !dbg !141
  %1131 = fmul float %1021, %1123, !dbg !141
  %1132 = fmul float %1021, %1124, !dbg !141
  %1133 = fmul float %1021, %1125, !dbg !141
  %1134 = fmul float %1021, %1126, !dbg !141
  %1135 = fmul float %1021, %1127, !dbg !141
  %1136 = fmul float %1021, %1128, !dbg !141
  %1137 = fmul float %1021, %1129, !dbg !141
  %1138 = tail call float @llvm.nvvm.round.f(float %1130) #5, !dbg !146
  %1139 = tail call float @llvm.nvvm.round.f(float %1131) #5, !dbg !146
  %1140 = tail call float @llvm.nvvm.round.f(float %1132) #5, !dbg !146
  %1141 = tail call float @llvm.nvvm.round.f(float %1133) #5, !dbg !146
  %1142 = tail call float @llvm.nvvm.round.f(float %1134) #5, !dbg !146
  %1143 = tail call float @llvm.nvvm.round.f(float %1135) #5, !dbg !146
  %1144 = tail call float @llvm.nvvm.round.f(float %1136) #5, !dbg !146
  %1145 = tail call float @llvm.nvvm.round.f(float %1137) #5, !dbg !146
  %1146 = insertelement <4 x float> poison, float %1138, i64 0, !dbg !147
  %1147 = insertelement <4 x float> %1146, float %1139, i64 1, !dbg !147
  %1148 = insertelement <4 x float> %1147, float %1140, i64 2, !dbg !147
  %1149 = insertelement <4 x float> %1148, float %1141, i64 3, !dbg !147
  %1150 = fcmp ogt <4 x float> %1149, splat (float -1.270000e+02), !dbg !147
  %1151 = fcmp uno <4 x float> %1149, zeroinitializer, !dbg !149
  %1152 = or <4 x i1> %1150, %1151, !dbg !150
  %1153 = select <4 x i1> %1152, <4 x float> %1149, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1154 = fcmp olt <4 x float> %1153, splat (float 1.270000e+02), !dbg !152
  %1155 = fcmp uno <4 x float> %1153, zeroinitializer, !dbg !154
  %1156 = or <4 x i1> %1154, %1155, !dbg !155
  %1157 = fptosi <4 x float> %1153 to <4 x i8>, !dbg !156
  %1158 = select <4 x i1> %1156, <4 x i8> %1157, <4 x i8> splat (i8 127), !dbg !157
  %1159 = insertelement <4 x float> poison, float %1142, i64 0, !dbg !147
  %1160 = insertelement <4 x float> %1159, float %1143, i64 1, !dbg !147
  %1161 = insertelement <4 x float> %1160, float %1144, i64 2, !dbg !147
  %1162 = insertelement <4 x float> %1161, float %1145, i64 3, !dbg !147
  %1163 = fcmp ogt <4 x float> %1162, splat (float -1.270000e+02), !dbg !147
  %1164 = fcmp uno <4 x float> %1162, zeroinitializer, !dbg !149
  %1165 = or <4 x i1> %1163, %1164, !dbg !150
  %1166 = select <4 x i1> %1165, <4 x float> %1162, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1167 = fcmp olt <4 x float> %1166, splat (float 1.270000e+02), !dbg !152
  %1168 = fcmp uno <4 x float> %1166, zeroinitializer, !dbg !154
  %1169 = or <4 x i1> %1167, %1168, !dbg !155
  %1170 = fptosi <4 x float> %1166 to <4 x i8>, !dbg !156
  %1171 = select <4 x i1> %1169, <4 x i8> %1170, <4 x i8> splat (i8 127), !dbg !157
  %1172 = getelementptr i8, ptr addrspace(1) %12, i64 %1102, !dbg !158
  %1173 = bitcast <4 x i8> %1158 to i32, !dbg !159
  %1174 = bitcast <4 x i8> %1171 to i32, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1173, i32 %1174, ptr addrspace(1) %1172, i1 %1104) #5, !dbg !159
  %1175 = getelementptr i8, ptr addrspace(1) %13, i64 %1102, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1173, i32 %1174, ptr addrspace(1) %1175, i1 %1104) #5, !dbg !161
  %1176 = getelementptr i8, ptr addrspace(1) %14, i64 %1102, !dbg !162
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1173, i32 %1174, ptr addrspace(1) %1176, i1 %1104) #5, !dbg !163
  %1177 = getelementptr i8, ptr addrspace(1) %15, i64 %1102, !dbg !164
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1173, i32 %1174, ptr addrspace(1) %1177, i1 %1104) #5, !dbg !165
  ret void, !dbg !169
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 44, column: 62, scope: !6)
!22 = !DILocation(line: 46, column: 66, scope: !6)
!23 = !DILocation(line: 33, column: 31, scope: !6)
!24 = !DILocation(line: 34, column: 29, scope: !6)
!25 = !DILocation(line: 38, column: 61, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 42, column: 51, scope: !6)
!30 = !DILocation(line: 209, column: 30, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 210, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 210, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 211, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 211, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 211, column: 22, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 203, column: 7, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 45, column: 58, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !40)
!53 = !DILocation(line: 67, column: 24, scope: !6)
!54 = !DILocation(line: 69, column: 24, scope: !6)
!55 = !DILocation(line: 70, column: 32, scope: !6)
!56 = !DILocation(line: 53, column: 40, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 55, column: 29, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 61, scope: !6)
!62 = !DILocation(line: 59, column: 51, scope: !6)
!63 = !DILocation(line: 59, column: 113, scope: !6)
!64 = !DILocation(line: 60, column: 42, scope: !6)
!65 = !DILocation(line: 60, column: 35, scope: !6)
!66 = !DILocation(line: 60, column: 49, scope: !6)
!67 = !DILocation(line: 61, column: 35, scope: !6)
!68 = !DILocation(line: 61, column: 49, scope: !6)
!69 = !DILocation(line: 62, column: 35, scope: !6)
!70 = !DILocation(line: 62, column: 42, scope: !6)
!71 = !DILocation(line: 63, column: 35, scope: !6)
!72 = !DILocation(line: 63, column: 42, scope: !6)
!73 = !DILocation(line: 65, column: 24, scope: !6)
!74 = !DILocation(line: 71, column: 24, scope: !6)
!75 = !DILocation(line: 61, column: 102, scope: !6)
!76 = !DILocation(line: 63, column: 95, scope: !6)
!77 = !DILocation(line: 74, column: 24, scope: !6)
!78 = !DILocation(line: 76, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 80, column: 24, scope: !6)
!82 = !DILocation(line: 86, column: 53, scope: !6)
!83 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !84)
!84 = !DILocation(line: 82, column: 47, scope: !6)
!85 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !84)
!86 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !84)
!87 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !84)
!88 = !DILocation(line: 83, column: 50, scope: !6)
!89 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !90)
!90 = !DILocation(line: 84, column: 47, scope: !6)
!91 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !90)
!92 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !90)
!93 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !90)
!94 = !DILocation(line: 85, column: 50, scope: !6)
!95 = !DILocation(line: 86, column: 29, scope: !6)
!96 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !97)
!97 = !DILocation(line: 87, column: 40, scope: !6)
!98 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !97)
!99 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !97)
!100 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !97)
!101 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !97)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 88, column: 40, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !104)
!107 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !104)
!108 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !104)
!109 = !DILocation(line: 90, column: 37, scope: !6)
!110 = !DILocation(line: 89, column: 25, scope: !6)
!111 = !DILocation(line: 90, column: 25, scope: !6)
!112 = !DILocation(line: 91, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 37, scope: !6)
!114 = !DILocation(line: 92, column: 25, scope: !6)
!115 = !DILocation(line: 92, column: 37, scope: !6)
!116 = !DILocation(line: 93, column: 25, scope: !6)
!117 = !DILocation(line: 93, column: 37, scope: !6)
!118 = !DILocation(line: 94, column: 25, scope: !6)
!119 = !DILocation(line: 94, column: 37, scope: !6)
!120 = !DILocation(line: 95, column: 25, scope: !6)
!121 = !DILocation(line: 95, column: 37, scope: !6)
!122 = !DILocation(line: 96, column: 26, scope: !6)
!123 = !DILocation(line: 96, column: 38, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !125)
!125 = !DILocation(line: 105, column: 46, scope: !6)
!126 = !DILocation(line: 106, column: 17, scope: !6)
!127 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !128)
!128 = !DILocation(line: 107, column: 46, scope: !6)
!129 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !130)
!130 = !DILocation(line: 108, column: 46, scope: !6)
!131 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !130)
!133 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !130)
!134 = !DILocation(line: 110, column: 24, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !136)
!136 = !DILocation(line: 113, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !136)
!140 = !DILocation(line: 116, column: 25, scope: !6)
!141 = !DILocation(line: 119, column: 24, scope: !6)
!142 = !DILocation(line: 103, column: 43, scope: !6)
!143 = !DILocation(line: 103, column: 36, scope: !6)
!144 = !DILocation(line: 103, column: 53, scope: !6)
!145 = !DILocation(line: 103, column: 115, scope: !6)
!146 = !DILocation(line: 120, column: 36, scope: !6)
!147 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !148)
!148 = !DILocation(line: 123, column: 46, scope: !6)
!149 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !148)
!151 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !148)
!152 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !153)
!153 = !DILocation(line: 125, column: 46, scope: !6)
!154 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !153)
!155 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !153)
!156 = !DILocation(line: 127, column: 25, scope: !6)
!157 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !153)
!158 = !DILocation(line: 128, column: 30, scope: !6)
!159 = !DILocation(line: 128, column: 54, scope: !6)
!160 = !DILocation(line: 129, column: 30, scope: !6)
!161 = !DILocation(line: 129, column: 54, scope: !6)
!162 = !DILocation(line: 130, column: 30, scope: !6)
!163 = !DILocation(line: 130, column: 54, scope: !6)
!164 = !DILocation(line: 131, column: 30, scope: !6)
!165 = !DILocation(line: 131, column: 54, scope: !6)
!166 = !DILocation(line: 98, column: 31, scope: !6)
!167 = !DILocation(line: 99, column: 29, scope: !6)
!168 = !DILocation(line: 103, column: 63, scope: !6)
!169 = !DILocation(line: 97, column: 4, scope: !6)
