; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 1, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 512, !dbg !11
  %.lobit = lshr exact i32 %16, 9, !dbg !11
  %17 = and i32 %15, 31, !dbg !11
  %18 = or disjoint i32 %.lobit, %14, !dbg !12
  %19 = or disjoint i32 %14, 1, !dbg !12
  %20 = icmp slt i32 %18, 512, !dbg !13
  %21 = icmp slt i32 %14, 512, !dbg !13
  %22 = icmp slt i32 %19, 512, !dbg !13
  %23 = shl i32 %15, 3, !dbg !14
  %24 = and i32 %23, 8184, !dbg !14
  %25 = shl i32 %15, 4, !dbg !14
  %26 = and i32 %25, 8176, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = or disjoint i32 %26, 8, !dbg !14
  %29 = or disjoint i32 %26, 12, !dbg !14
  %30 = shl i32 %15, 2, !dbg !14
  %31 = and i32 %30, 4092, !dbg !14
  %32 = or disjoint i32 %31, 4096, !dbg !14
  %33 = sext i32 %18 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %51 = bitcast i16 %50 to bfloat, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !17
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = mul i32 %18, 12288, !dbg !19
  %71 = mul i32 %13, 24576, !dbg !19
  %72 = mul i32 %19, 12288, !dbg !19
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !20
  %73 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !20
  %74 = fpext bfloat %73 to float, !dbg !20
  %75 = fsub float 0.000000e+00, %74, !dbg !24
  %.inv3 = fcmp ole bfloat %69, 0xR0000, !dbg !25
  %76 = select i1 %.inv3, bfloat 0xR0000, bfloat %69, !dbg !25
  %77 = fpext bfloat %76 to float, !dbg !25
  %78 = fcmp ogt float %75, %77, !dbg !27
  %79 = fcmp uno float %75, 0.000000e+00, !dbg !29
  %80 = or i1 %79, %78, !dbg !30
  %81 = select i1 %80, float %75, float %77, !dbg !31
  %82 = fmul float %81, 0x3F80204080000000, !dbg !32
  %83 = fcmp ogt float %82, 0x3EE4F8B580000000, !dbg !33
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !35
  %85 = or i1 %83, %84, !dbg !36
  %86 = select i1 %85, float %82, float 0x3EE4F8B580000000, !dbg !37
  %87 = add i32 %70, %27
  %88 = add i32 %70, %28
  %89 = add i32 %70, %29
  %90 = and i32 %25, 16368
  %91 = lshr i32 %25, 11
  %92 = and i32 %91, 4
  %93 = or disjoint i32 %92, %90
  %94 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %93
  %95 = or disjoint i32 %90, 4
  %96 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %92
  %97 = getelementptr inbounds nuw float, ptr addrspace(3) %96, i32 %95
  %98 = or disjoint i32 %93, 8
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %98
  %100 = or disjoint i32 %90, 12
  %101 = getelementptr inbounds nuw float, ptr addrspace(3) %96, i32 %100
  %102 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %103 = or disjoint i32 %24, 4
  %104 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %103
  %105 = or disjoint i32 %24, 8196
  %106 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %105
  %107 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 32800
  %108 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %110 = zext nneg i32 %32 to i64, !dbg !38
  %111 = zext nneg i32 %26 to i64, !dbg !38
  %112 = zext nneg i32 %24 to i64, !dbg !38
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %104, i32 8
  %115 = getelementptr inbounds nuw i8, ptr addrspace(3) %106, i32 8
  br label %116, !dbg !38

116:                                              ; preds = %12, %__nv_tanhf.exit642
  %117 = phi i1 [ true, %12 ], [ false, %__nv_tanhf.exit642 ]
  %indvars.iv = phi i64 [ 0, %12 ], [ 8192, %__nv_tanhf.exit642 ]
  %118 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %968, %__nv_tanhf.exit642 ]
  %119 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %969, %__nv_tanhf.exit642 ]
  %120 = phi <8 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %939, %__nv_tanhf.exit642 ]
  %121 = phi <8 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %970, %__nv_tanhf.exit642 ]
  %122 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %967, %__nv_tanhf.exit642 ]
  %123 = phi <4 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %948, %__nv_tanhf.exit642 ]
  %124 = or disjoint i64 %indvars.iv, %112, !dbg !39
  %125 = or disjoint i64 %indvars.iv, %111, !dbg !39
  %126 = or disjoint i64 %indvars.iv, %110, !dbg !39
  %127 = icmp samesign ult i64 %124, 12288, !dbg !40
  %128 = icmp samesign ult i64 %125, 12288, !dbg !40
  %129 = icmp samesign ult i64 %126, 12288, !dbg !40
  %130 = trunc nuw nsw i64 %125 to i32, !dbg !41
  %131 = add i32 %70, %130, !dbg !41
  %132 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %133 = add i32 %87, %132, !dbg !41
  %134 = add i32 %88, %132, !dbg !41
  %135 = add i32 %89, %132, !dbg !41
  %136 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %137 = or disjoint i32 %31, %136, !dbg !41
  %138 = add i32 %137, %71, !dbg !41
  %139 = trunc nuw nsw i64 %126 to i32, !dbg !41
  %140 = add i32 %71, %139, !dbg !41
  %141 = add i32 %137, %72, !dbg !41
  %142 = add i32 %72, %139, !dbg !41
  %143 = sext i32 %131 to i64, !dbg !42
  %144 = getelementptr i32, ptr addrspace(1) %0, i64 %143, !dbg !42
  %145 = sext i32 %133 to i64, !dbg !42
  %146 = getelementptr i32, ptr addrspace(1) %0, i64 %145, !dbg !42
  %147 = sext i32 %134 to i64, !dbg !42
  %148 = getelementptr i32, ptr addrspace(1) %0, i64 %147, !dbg !42
  %149 = sext i32 %135 to i64, !dbg !42
  %150 = getelementptr i32, ptr addrspace(1) %0, i64 %149, !dbg !42
  %151 = and i1 %21, %127, !dbg !43
  %152 = and i1 %20, %128, !dbg !43
  %153 = and i1 %21, %129, !dbg !43
  %154 = and i1 %22, %129, !dbg !43
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %152) #5, !dbg !44
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !44
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !44
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !44
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !44
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %146, i1 %152) #5, !dbg !44
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !44
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !44
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !44
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !44
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 %152) #5, !dbg !44
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !44
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !44
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !44
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !44
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %152) #5, !dbg !44
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !44
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !44
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !44
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !44
  %175 = getelementptr bfloat, ptr addrspace(1) %3, i64 %124, !dbg !45
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %175, i1 %127) #5, !dbg !46
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !46
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !46
  %179 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !46
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !46
  %181 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !46
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !46
  %183 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !46
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !46
  %185 = getelementptr bfloat, ptr addrspace(1) %4, i64 %124, !dbg !47
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 %127) #5, !dbg !48
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !48
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !48
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !48
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !48
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !48
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !48
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !48
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !48
  %195 = sitofp i32 %156 to float, !dbg !49
  %196 = sitofp i32 %157 to float, !dbg !49
  %197 = sitofp i32 %158 to float, !dbg !49
  %198 = sitofp i32 %159 to float, !dbg !49
  %199 = sitofp i32 %161 to float, !dbg !49
  %200 = sitofp i32 %162 to float, !dbg !49
  %201 = sitofp i32 %163 to float, !dbg !49
  %202 = sitofp i32 %164 to float, !dbg !49
  %203 = sitofp i32 %166 to float, !dbg !49
  %204 = sitofp i32 %167 to float, !dbg !49
  %205 = sitofp i32 %168 to float, !dbg !49
  %206 = sitofp i32 %169 to float, !dbg !49
  %207 = sitofp i32 %171 to float, !dbg !49
  %208 = sitofp i32 %172 to float, !dbg !49
  %209 = sitofp i32 %173 to float, !dbg !49
  %210 = sitofp i32 %174 to float, !dbg !49
  %211 = fmul float %86, %195, !dbg !50
  %212 = fmul float %86, %196, !dbg !50
  %213 = fmul float %86, %197, !dbg !50
  %214 = fmul float %86, %198, !dbg !50
  %215 = fmul float %86, %199, !dbg !50
  %216 = fmul float %86, %200, !dbg !50
  %217 = fmul float %86, %201, !dbg !50
  %218 = fmul float %86, %202, !dbg !50
  %219 = fmul float %86, %203, !dbg !50
  %220 = fmul float %86, %204, !dbg !50
  %221 = fmul float %86, %205, !dbg !50
  %222 = fmul float %86, %206, !dbg !50
  %223 = fmul float %86, %207, !dbg !50
  %224 = fmul float %86, %208, !dbg !50
  %225 = fmul float %86, %209, !dbg !50
  %226 = fmul float %86, %210, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %227 = bitcast float %211 to i32, !dbg !50
  %228 = bitcast float %212 to i32, !dbg !50
  %229 = bitcast float %213 to i32, !dbg !50
  %230 = bitcast float %214 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %94, i32 %227, i32 %228, i32 %229, i32 %230, i1 true) #5, !dbg !50
  %231 = bitcast float %215 to i32, !dbg !50
  %232 = bitcast float %216 to i32, !dbg !50
  %233 = bitcast float %217 to i32, !dbg !50
  %234 = bitcast float %218 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %97, i32 %231, i32 %232, i32 %233, i32 %234, i1 true) #5, !dbg !50
  %235 = bitcast float %219 to i32, !dbg !50
  %236 = bitcast float %220 to i32, !dbg !50
  %237 = bitcast float %221 to i32, !dbg !50
  %238 = bitcast float %222 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %99, i32 %235, i32 %236, i32 %237, i32 %238, i1 true) #5, !dbg !50
  %239 = bitcast float %223 to i32, !dbg !50
  %240 = bitcast float %224 to i32, !dbg !50
  %241 = bitcast float %225 to i32, !dbg !50
  %242 = bitcast float %226 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %101, i32 %239, i32 %240, i32 %241, i32 %242, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %243 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !51
  %244 = shufflevector <2 x float> %243, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !51
  %245 = fpext <2 x bfloat> %188 to <2 x float>, !dbg !52
  %246 = shufflevector <2 x float> %245, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !52
  %247 = load <2 x float>, ptr addrspace(3) %102, align 16, !dbg !50
  %248 = load <2 x float>, ptr addrspace(3) %106, align 16, !dbg !50
  %249 = shufflevector <2 x float> %248, <2 x float> %247, <4 x i32> <i32 0, i32 2, i32 1, i32 3>, !dbg !53
  %250 = fmul <4 x float> %249, %244, !dbg !53
  %251 = fadd <4 x float> %250, %246, !dbg !54
  %252 = shufflevector <2 x bfloat> %184, <2 x bfloat> %182, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 1, i32 0>, !dbg !51
  %253 = shufflevector <2 x bfloat> %180, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %254 = shufflevector <8 x bfloat> %252, <8 x bfloat> %253, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 6, i32 7>, !dbg !51
  %255 = shufflevector <2 x bfloat> %180, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %256 = shufflevector <8 x bfloat> %254, <8 x bfloat> %255, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 6, i32 7>, !dbg !51
  %257 = fpext <8 x bfloat> %256 to <8 x float>, !dbg !51
  %258 = shufflevector <2 x bfloat> %194, <2 x bfloat> %192, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 1, i32 0>, !dbg !52
  %259 = shufflevector <2 x bfloat> %190, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %260 = shufflevector <8 x bfloat> %258, <8 x bfloat> %259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 6, i32 7>, !dbg !52
  %261 = shufflevector <2 x bfloat> %190, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %262 = shufflevector <8 x bfloat> %260, <8 x bfloat> %261, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 6, i32 7>, !dbg !52
  %263 = fpext <8 x bfloat> %262 to <8 x float>, !dbg !52
  %264 = load <2 x float>, ptr addrspace(3) %114, align 8, !dbg !50
  %265 = shufflevector <2 x float> %264, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !50
  %266 = load <2 x float>, ptr addrspace(3) %115, align 8, !dbg !50
  %267 = shufflevector <2 x float> %266, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !50
  %268 = load <4 x float>, ptr addrspace(3) %107, align 16, !dbg !50
  %269 = shufflevector <4 x float> %268, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !50
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %271 = shufflevector <2 x float> %267, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %272 = shufflevector <8 x float> %270, <8 x float> %271, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !53
  %273 = shufflevector <2 x float> %265, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %274 = shufflevector <8 x float> %272, <8 x float> %273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !53
  %275 = fmul <8 x float> %274, %257, !dbg !53
  %276 = load <4 x float>, ptr addrspace(3) %113, align 8, !dbg !50
  %277 = shufflevector <4 x float> %276, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !50
  %278 = shufflevector <8 x float> %257, <8 x float> poison, <4 x i32> <i32 2, i32 3, i32 4, i32 5>, !dbg !53
  %279 = fmul <4 x float> %277, %278, !dbg !53
  %280 = shufflevector <8 x float> %263, <8 x float> poison, <4 x i32> <i32 2, i32 3, i32 4, i32 5>, !dbg !54
  %281 = fadd <4 x float> %279, %280, !dbg !54
  %282 = fadd <8 x float> %275, %263, !dbg !54
  %283 = fmul <4 x float> %281, splat (float 5.000000e-01), !dbg !55
  %284 = fmul <4 x float> %251, splat (float 5.000000e-01), !dbg !55
  %285 = fmul <8 x float> %282, splat (float 5.000000e-01), !dbg !55
  %286 = extractelement <4 x float> %251, i64 1, !dbg !56
  %287 = fmul float %286, %286, !dbg !57
  %288 = extractelement <4 x float> %251, i64 3, !dbg !56
  %289 = fmul float %288, %288, !dbg !57
  %290 = extractelement <4 x float> %281, i64 3, !dbg !56
  %291 = fmul float %290, %290, !dbg !57
  %292 = extractelement <4 x float> %281, i64 2, !dbg !56
  %293 = fmul float %292, %292, !dbg !57
  %294 = extractelement <4 x float> %281, i64 1, !dbg !56
  %295 = fmul float %294, %294, !dbg !57
  %296 = extractelement <4 x float> %281, i64 0, !dbg !56
  %297 = fmul float %296, %296, !dbg !57
  %298 = extractelement <8 x float> %282, i64 7, !dbg !56
  %299 = fmul float %298, %298, !dbg !57
  %300 = extractelement <8 x float> %282, i64 6, !dbg !56
  %301 = fmul float %300, %300, !dbg !57
  %302 = extractelement <4 x float> %251, i64 0, !dbg !56
  %303 = fmul float %302, %302, !dbg !57
  %304 = extractelement <4 x float> %251, i64 2, !dbg !56
  %305 = fmul float %304, %304, !dbg !57
  %306 = extractelement <8 x float> %282, i64 5, !dbg !56
  %307 = fmul float %306, %306, !dbg !57
  %308 = extractelement <8 x float> %282, i64 4, !dbg !56
  %309 = fmul float %308, %308, !dbg !57
  %310 = extractelement <8 x float> %282, i64 3, !dbg !56
  %311 = fmul float %310, %310, !dbg !57
  %312 = extractelement <8 x float> %282, i64 2, !dbg !56
  %313 = fmul float %312, %312, !dbg !57
  %314 = extractelement <8 x float> %282, i64 1, !dbg !56
  %315 = fmul float %314, %314, !dbg !57
  %316 = extractelement <8 x float> %282, i64 0, !dbg !56
  %317 = fmul float %316, %316, !dbg !57
  %318 = fmul float %286, %287, !dbg !58
  %319 = fmul float %288, %289, !dbg !58
  %320 = fmul float %290, %291, !dbg !58
  %321 = fmul float %292, %293, !dbg !58
  %322 = fmul float %294, %295, !dbg !58
  %323 = fmul float %296, %297, !dbg !58
  %324 = fmul float %298, %299, !dbg !58
  %325 = fmul float %300, %301, !dbg !58
  %326 = fmul float %302, %303, !dbg !58
  %327 = fmul float %304, %305, !dbg !58
  %328 = fmul float %306, %307, !dbg !58
  %329 = fmul float %308, %309, !dbg !58
  %330 = fmul float %310, %311, !dbg !58
  %331 = fmul float %312, %313, !dbg !58
  %332 = fmul float %314, %315, !dbg !58
  %333 = fmul float %316, %317, !dbg !58
  %334 = fmul float %318, 0x3FA6E4E260000000, !dbg !59
  %335 = fmul float %319, 0x3FA6E4E260000000, !dbg !59
  %336 = fmul float %320, 0x3FA6E4E260000000, !dbg !59
  %337 = fmul float %321, 0x3FA6E4E260000000, !dbg !59
  %338 = fmul float %322, 0x3FA6E4E260000000, !dbg !59
  %339 = fmul float %323, 0x3FA6E4E260000000, !dbg !59
  %340 = fmul float %324, 0x3FA6E4E260000000, !dbg !59
  %341 = fmul float %325, 0x3FA6E4E260000000, !dbg !59
  %342 = fmul float %326, 0x3FA6E4E260000000, !dbg !59
  %343 = fmul float %327, 0x3FA6E4E260000000, !dbg !59
  %344 = fmul float %328, 0x3FA6E4E260000000, !dbg !59
  %345 = fmul float %329, 0x3FA6E4E260000000, !dbg !59
  %346 = fmul float %330, 0x3FA6E4E260000000, !dbg !59
  %347 = fmul float %331, 0x3FA6E4E260000000, !dbg !59
  %348 = fmul float %332, 0x3FA6E4E260000000, !dbg !59
  %349 = fmul float %333, 0x3FA6E4E260000000, !dbg !59
  %350 = fadd float %286, %334, !dbg !56
  %351 = fadd float %288, %335, !dbg !56
  %352 = fadd float %290, %336, !dbg !56
  %353 = fadd float %292, %337, !dbg !56
  %354 = fadd float %294, %338, !dbg !56
  %355 = fadd float %296, %339, !dbg !56
  %356 = fadd float %298, %340, !dbg !56
  %357 = fadd float %300, %341, !dbg !56
  %358 = fadd float %302, %342, !dbg !56
  %359 = fadd float %304, %343, !dbg !56
  %360 = fadd float %306, %344, !dbg !56
  %361 = fadd float %308, %345, !dbg !56
  %362 = fadd float %310, %346, !dbg !56
  %363 = fadd float %312, %347, !dbg !56
  %364 = fadd float %314, %348, !dbg !56
  %365 = fadd float %316, %349, !dbg !56
  %366 = fmul float %350, 0x3FE9884540000000, !dbg !60
  %367 = fmul float %351, 0x3FE9884540000000, !dbg !60
  %368 = fmul float %352, 0x3FE9884540000000, !dbg !60
  %369 = fmul float %353, 0x3FE9884540000000, !dbg !60
  %370 = fmul float %354, 0x3FE9884540000000, !dbg !60
  %371 = fmul float %355, 0x3FE9884540000000, !dbg !60
  %372 = fmul float %356, 0x3FE9884540000000, !dbg !60
  %373 = fmul float %357, 0x3FE9884540000000, !dbg !60
  %374 = fmul float %358, 0x3FE9884540000000, !dbg !60
  %375 = fmul float %359, 0x3FE9884540000000, !dbg !60
  %376 = fmul float %360, 0x3FE9884540000000, !dbg !60
  %377 = fmul float %361, 0x3FE9884540000000, !dbg !60
  %378 = fmul float %362, 0x3FE9884540000000, !dbg !60
  %379 = fmul float %363, 0x3FE9884540000000, !dbg !60
  %380 = fmul float %364, 0x3FE9884540000000, !dbg !60
  %381 = fmul float %365, 0x3FE9884540000000, !dbg !60
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i339 = icmp eq i32 %382, 0, !dbg !61
  %383 = tail call float @llvm.nvvm.fabs.ftz.f(float %366) #5, !dbg !61
  %384 = tail call float @llvm.nvvm.fabs.f(float %366) #5, !dbg !61
  %.01.i340 = select i1 %.not.i339, float %384, float %383, !dbg !61
  %385 = fcmp ult float %.01.i340, 0x3FE3333340000000, !dbg !61
  br i1 %385, label %__internal_fmad.exit3.i346, label %__internal_fmad.exit1.i341, !dbg !61

__internal_fmad.exit1.i341:                       ; preds = %116
  %386 = fmul float %.01.i340, 0x4007154760000000, !dbg !61
  %387 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %386) #5, !dbg !61
  %388 = fadd float %387, 1.000000e+00, !dbg !61
  %389 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %388) #6, !dbg !61, !srcloc !62
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i342 = icmp eq i32 %390, 0, !dbg !61
  %391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %389, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %392 = tail call float @llvm.nvvm.fma.rn.f(float %389, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i343 = select i1 %.not6.i342, float %392, float %391, !dbg !61
  %393 = fcmp oge float %.01.i340, 0x4022059680000000, !dbg !61
  %s.0.i344 = select i1 %393, float 1.000000e+00, float %.03.i343, !dbg !61
  %394 = bitcast float %s.0.i344 to i32, !dbg !61
  %395 = bitcast float %366 to i32, !dbg !61
  %396 = and i32 %395, -2147483648, !dbg !61
  %397 = or i32 %396, %394, !dbg !61
  %398 = bitcast i32 %397 to float, !dbg !61
  br label %__nv_tanhf.exit357, !dbg !61

__internal_fmad.exit3.i346:                       ; preds = %116
  %399 = fmul float %366, %366, !dbg !61
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i347 = icmp eq i32 %400, 0, !dbg !61
  %401 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %399, float 0xBFAAC795C0000000) #5, !dbg !61
  %402 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %399, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i348 = select i1 %.not1.i347, float %402, float %401, !dbg !61
  %403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i349 = icmp eq i32 %403, 0, !dbg !61
  %404 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i348, float %399, float 0x3FC10B2820000000) #5, !dbg !61
  %405 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i348, float %399, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i350 = select i1 %.not2.i349, float %405, float %404, !dbg !61
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i351 = icmp eq i32 %406, 0, !dbg !61
  %407 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i350, float %399, float 0xBFD5553DA0000000) #5, !dbg !61
  %408 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i350, float %399, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i352 = select i1 %.not3.i351, float %408, float %407, !dbg !61
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i353 = icmp eq i32 %409, 0, !dbg !61
  %410 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i352, float %399, float 0.000000e+00) #5, !dbg !61
  %411 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i352, float %399, float 0.000000e+00) #5, !dbg !61
  %.04.i354 = select i1 %.not4.i353, float %411, float %410, !dbg !61
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i355 = icmp eq i32 %412, 0, !dbg !61
  %413 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i354, float %366, float %366) #5, !dbg !61
  %414 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i354, float %366, float %366) #5, !dbg !61
  %.02.i356 = select i1 %.not5.i355, float %414, float %413, !dbg !61
  br label %__nv_tanhf.exit357, !dbg !61

__nv_tanhf.exit357:                               ; preds = %__internal_fmad.exit1.i341, %__internal_fmad.exit3.i346
  %s.1.i345 = phi float [ %398, %__internal_fmad.exit1.i341 ], [ %.02.i356, %__internal_fmad.exit3.i346 ], !dbg !61
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i358 = icmp eq i32 %415, 0, !dbg !61
  %416 = tail call float @llvm.nvvm.fabs.ftz.f(float %367) #5, !dbg !61
  %417 = tail call float @llvm.nvvm.fabs.f(float %367) #5, !dbg !61
  %.01.i359 = select i1 %.not.i358, float %417, float %416, !dbg !61
  %418 = fcmp ult float %.01.i359, 0x3FE3333340000000, !dbg !61
  br i1 %418, label %__internal_fmad.exit3.i365, label %__internal_fmad.exit1.i360, !dbg !61

__internal_fmad.exit1.i360:                       ; preds = %__nv_tanhf.exit357
  %419 = fmul float %.01.i359, 0x4007154760000000, !dbg !61
  %420 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %419) #5, !dbg !61
  %421 = fadd float %420, 1.000000e+00, !dbg !61
  %422 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %421) #6, !dbg !61, !srcloc !62
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i361 = icmp eq i32 %423, 0, !dbg !61
  %424 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %422, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %425 = tail call float @llvm.nvvm.fma.rn.f(float %422, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i362 = select i1 %.not6.i361, float %425, float %424, !dbg !61
  %426 = fcmp oge float %.01.i359, 0x4022059680000000, !dbg !61
  %s.0.i363 = select i1 %426, float 1.000000e+00, float %.03.i362, !dbg !61
  %427 = bitcast float %s.0.i363 to i32, !dbg !61
  %428 = bitcast float %367 to i32, !dbg !61
  %429 = and i32 %428, -2147483648, !dbg !61
  %430 = or i32 %429, %427, !dbg !61
  %431 = bitcast i32 %430 to float, !dbg !61
  br label %__nv_tanhf.exit376, !dbg !61

__internal_fmad.exit3.i365:                       ; preds = %__nv_tanhf.exit357
  %432 = fmul float %367, %367, !dbg !61
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i366 = icmp eq i32 %433, 0, !dbg !61
  %434 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %432, float 0xBFAAC795C0000000) #5, !dbg !61
  %435 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %432, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i367 = select i1 %.not1.i366, float %435, float %434, !dbg !61
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i368 = icmp eq i32 %436, 0, !dbg !61
  %437 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i367, float %432, float 0x3FC10B2820000000) #5, !dbg !61
  %438 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i367, float %432, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i369 = select i1 %.not2.i368, float %438, float %437, !dbg !61
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i370 = icmp eq i32 %439, 0, !dbg !61
  %440 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i369, float %432, float 0xBFD5553DA0000000) #5, !dbg !61
  %441 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i369, float %432, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i371 = select i1 %.not3.i370, float %441, float %440, !dbg !61
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i372 = icmp eq i32 %442, 0, !dbg !61
  %443 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i371, float %432, float 0.000000e+00) #5, !dbg !61
  %444 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i371, float %432, float 0.000000e+00) #5, !dbg !61
  %.04.i373 = select i1 %.not4.i372, float %444, float %443, !dbg !61
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i374 = icmp eq i32 %445, 0, !dbg !61
  %446 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i373, float %367, float %367) #5, !dbg !61
  %447 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i373, float %367, float %367) #5, !dbg !61
  %.02.i375 = select i1 %.not5.i374, float %447, float %446, !dbg !61
  br label %__nv_tanhf.exit376, !dbg !61

__nv_tanhf.exit376:                               ; preds = %__internal_fmad.exit1.i360, %__internal_fmad.exit3.i365
  %s.1.i364 = phi float [ %431, %__internal_fmad.exit1.i360 ], [ %.02.i375, %__internal_fmad.exit3.i365 ], !dbg !61
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i377 = icmp eq i32 %448, 0, !dbg !61
  %449 = tail call float @llvm.nvvm.fabs.ftz.f(float %368) #5, !dbg !61
  %450 = tail call float @llvm.nvvm.fabs.f(float %368) #5, !dbg !61
  %.01.i378 = select i1 %.not.i377, float %450, float %449, !dbg !61
  %451 = fcmp ult float %.01.i378, 0x3FE3333340000000, !dbg !61
  br i1 %451, label %__internal_fmad.exit3.i384, label %__internal_fmad.exit1.i379, !dbg !61

__internal_fmad.exit1.i379:                       ; preds = %__nv_tanhf.exit376
  %452 = fmul float %.01.i378, 0x4007154760000000, !dbg !61
  %453 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %452) #5, !dbg !61
  %454 = fadd float %453, 1.000000e+00, !dbg !61
  %455 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %454) #6, !dbg !61, !srcloc !62
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i380 = icmp eq i32 %456, 0, !dbg !61
  %457 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %455, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %458 = tail call float @llvm.nvvm.fma.rn.f(float %455, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i381 = select i1 %.not6.i380, float %458, float %457, !dbg !61
  %459 = fcmp oge float %.01.i378, 0x4022059680000000, !dbg !61
  %s.0.i382 = select i1 %459, float 1.000000e+00, float %.03.i381, !dbg !61
  %460 = bitcast float %s.0.i382 to i32, !dbg !61
  %461 = bitcast float %368 to i32, !dbg !61
  %462 = and i32 %461, -2147483648, !dbg !61
  %463 = or i32 %462, %460, !dbg !61
  %464 = bitcast i32 %463 to float, !dbg !61
  br label %__nv_tanhf.exit395, !dbg !61

__internal_fmad.exit3.i384:                       ; preds = %__nv_tanhf.exit376
  %465 = fmul float %368, %368, !dbg !61
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i385 = icmp eq i32 %466, 0, !dbg !61
  %467 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %465, float 0xBFAAC795C0000000) #5, !dbg !61
  %468 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %465, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i386 = select i1 %.not1.i385, float %468, float %467, !dbg !61
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i387 = icmp eq i32 %469, 0, !dbg !61
  %470 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i386, float %465, float 0x3FC10B2820000000) #5, !dbg !61
  %471 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i386, float %465, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i388 = select i1 %.not2.i387, float %471, float %470, !dbg !61
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i389 = icmp eq i32 %472, 0, !dbg !61
  %473 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i388, float %465, float 0xBFD5553DA0000000) #5, !dbg !61
  %474 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i388, float %465, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i390 = select i1 %.not3.i389, float %474, float %473, !dbg !61
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i391 = icmp eq i32 %475, 0, !dbg !61
  %476 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i390, float %465, float 0.000000e+00) #5, !dbg !61
  %477 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i390, float %465, float 0.000000e+00) #5, !dbg !61
  %.04.i392 = select i1 %.not4.i391, float %477, float %476, !dbg !61
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i393 = icmp eq i32 %478, 0, !dbg !61
  %479 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i392, float %368, float %368) #5, !dbg !61
  %480 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i392, float %368, float %368) #5, !dbg !61
  %.02.i394 = select i1 %.not5.i393, float %480, float %479, !dbg !61
  br label %__nv_tanhf.exit395, !dbg !61

__nv_tanhf.exit395:                               ; preds = %__internal_fmad.exit1.i379, %__internal_fmad.exit3.i384
  %s.1.i383 = phi float [ %464, %__internal_fmad.exit1.i379 ], [ %.02.i394, %__internal_fmad.exit3.i384 ], !dbg !61
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i396 = icmp eq i32 %481, 0, !dbg !61
  %482 = tail call float @llvm.nvvm.fabs.ftz.f(float %369) #5, !dbg !61
  %483 = tail call float @llvm.nvvm.fabs.f(float %369) #5, !dbg !61
  %.01.i397 = select i1 %.not.i396, float %483, float %482, !dbg !61
  %484 = fcmp ult float %.01.i397, 0x3FE3333340000000, !dbg !61
  br i1 %484, label %__internal_fmad.exit3.i403, label %__internal_fmad.exit1.i398, !dbg !61

__internal_fmad.exit1.i398:                       ; preds = %__nv_tanhf.exit395
  %485 = fmul float %.01.i397, 0x4007154760000000, !dbg !61
  %486 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %485) #5, !dbg !61
  %487 = fadd float %486, 1.000000e+00, !dbg !61
  %488 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %487) #6, !dbg !61, !srcloc !62
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i399 = icmp eq i32 %489, 0, !dbg !61
  %490 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %488, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %491 = tail call float @llvm.nvvm.fma.rn.f(float %488, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i400 = select i1 %.not6.i399, float %491, float %490, !dbg !61
  %492 = fcmp oge float %.01.i397, 0x4022059680000000, !dbg !61
  %s.0.i401 = select i1 %492, float 1.000000e+00, float %.03.i400, !dbg !61
  %493 = bitcast float %s.0.i401 to i32, !dbg !61
  %494 = bitcast float %369 to i32, !dbg !61
  %495 = and i32 %494, -2147483648, !dbg !61
  %496 = or i32 %495, %493, !dbg !61
  %497 = bitcast i32 %496 to float, !dbg !61
  br label %__nv_tanhf.exit414, !dbg !61

__internal_fmad.exit3.i403:                       ; preds = %__nv_tanhf.exit395
  %498 = fmul float %369, %369, !dbg !61
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i404 = icmp eq i32 %499, 0, !dbg !61
  %500 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %498, float 0xBFAAC795C0000000) #5, !dbg !61
  %501 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %498, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i405 = select i1 %.not1.i404, float %501, float %500, !dbg !61
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i406 = icmp eq i32 %502, 0, !dbg !61
  %503 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i405, float %498, float 0x3FC10B2820000000) #5, !dbg !61
  %504 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i405, float %498, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i407 = select i1 %.not2.i406, float %504, float %503, !dbg !61
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i408 = icmp eq i32 %505, 0, !dbg !61
  %506 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i407, float %498, float 0xBFD5553DA0000000) #5, !dbg !61
  %507 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i407, float %498, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i409 = select i1 %.not3.i408, float %507, float %506, !dbg !61
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i410 = icmp eq i32 %508, 0, !dbg !61
  %509 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i409, float %498, float 0.000000e+00) #5, !dbg !61
  %510 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i409, float %498, float 0.000000e+00) #5, !dbg !61
  %.04.i411 = select i1 %.not4.i410, float %510, float %509, !dbg !61
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i412 = icmp eq i32 %511, 0, !dbg !61
  %512 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i411, float %369, float %369) #5, !dbg !61
  %513 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i411, float %369, float %369) #5, !dbg !61
  %.02.i413 = select i1 %.not5.i412, float %513, float %512, !dbg !61
  br label %__nv_tanhf.exit414, !dbg !61

__nv_tanhf.exit414:                               ; preds = %__internal_fmad.exit1.i398, %__internal_fmad.exit3.i403
  %s.1.i402 = phi float [ %497, %__internal_fmad.exit1.i398 ], [ %.02.i413, %__internal_fmad.exit3.i403 ], !dbg !61
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i415 = icmp eq i32 %514, 0, !dbg !61
  %515 = tail call float @llvm.nvvm.fabs.ftz.f(float %370) #5, !dbg !61
  %516 = tail call float @llvm.nvvm.fabs.f(float %370) #5, !dbg !61
  %.01.i416 = select i1 %.not.i415, float %516, float %515, !dbg !61
  %517 = fcmp ult float %.01.i416, 0x3FE3333340000000, !dbg !61
  br i1 %517, label %__internal_fmad.exit3.i422, label %__internal_fmad.exit1.i417, !dbg !61

__internal_fmad.exit1.i417:                       ; preds = %__nv_tanhf.exit414
  %518 = fmul float %.01.i416, 0x4007154760000000, !dbg !61
  %519 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %518) #5, !dbg !61
  %520 = fadd float %519, 1.000000e+00, !dbg !61
  %521 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %520) #6, !dbg !61, !srcloc !62
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i418 = icmp eq i32 %522, 0, !dbg !61
  %523 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %521, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %524 = tail call float @llvm.nvvm.fma.rn.f(float %521, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i419 = select i1 %.not6.i418, float %524, float %523, !dbg !61
  %525 = fcmp oge float %.01.i416, 0x4022059680000000, !dbg !61
  %s.0.i420 = select i1 %525, float 1.000000e+00, float %.03.i419, !dbg !61
  %526 = bitcast float %s.0.i420 to i32, !dbg !61
  %527 = bitcast float %370 to i32, !dbg !61
  %528 = and i32 %527, -2147483648, !dbg !61
  %529 = or i32 %528, %526, !dbg !61
  %530 = bitcast i32 %529 to float, !dbg !61
  br label %__nv_tanhf.exit433, !dbg !61

__internal_fmad.exit3.i422:                       ; preds = %__nv_tanhf.exit414
  %531 = fmul float %370, %370, !dbg !61
  %532 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i423 = icmp eq i32 %532, 0, !dbg !61
  %533 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %531, float 0xBFAAC795C0000000) #5, !dbg !61
  %534 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %531, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i424 = select i1 %.not1.i423, float %534, float %533, !dbg !61
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i425 = icmp eq i32 %535, 0, !dbg !61
  %536 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i424, float %531, float 0x3FC10B2820000000) #5, !dbg !61
  %537 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i424, float %531, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i426 = select i1 %.not2.i425, float %537, float %536, !dbg !61
  %538 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i427 = icmp eq i32 %538, 0, !dbg !61
  %539 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i426, float %531, float 0xBFD5553DA0000000) #5, !dbg !61
  %540 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i426, float %531, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i428 = select i1 %.not3.i427, float %540, float %539, !dbg !61
  %541 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i429 = icmp eq i32 %541, 0, !dbg !61
  %542 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i428, float %531, float 0.000000e+00) #5, !dbg !61
  %543 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i428, float %531, float 0.000000e+00) #5, !dbg !61
  %.04.i430 = select i1 %.not4.i429, float %543, float %542, !dbg !61
  %544 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i431 = icmp eq i32 %544, 0, !dbg !61
  %545 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i430, float %370, float %370) #5, !dbg !61
  %546 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i430, float %370, float %370) #5, !dbg !61
  %.02.i432 = select i1 %.not5.i431, float %546, float %545, !dbg !61
  br label %__nv_tanhf.exit433, !dbg !61

__nv_tanhf.exit433:                               ; preds = %__internal_fmad.exit1.i417, %__internal_fmad.exit3.i422
  %s.1.i421 = phi float [ %530, %__internal_fmad.exit1.i417 ], [ %.02.i432, %__internal_fmad.exit3.i422 ], !dbg !61
  %547 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i434 = icmp eq i32 %547, 0, !dbg !61
  %548 = tail call float @llvm.nvvm.fabs.ftz.f(float %371) #5, !dbg !61
  %549 = tail call float @llvm.nvvm.fabs.f(float %371) #5, !dbg !61
  %.01.i435 = select i1 %.not.i434, float %549, float %548, !dbg !61
  %550 = fcmp ult float %.01.i435, 0x3FE3333340000000, !dbg !61
  br i1 %550, label %__internal_fmad.exit3.i441, label %__internal_fmad.exit1.i436, !dbg !61

__internal_fmad.exit1.i436:                       ; preds = %__nv_tanhf.exit433
  %551 = fmul float %.01.i435, 0x4007154760000000, !dbg !61
  %552 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %551) #5, !dbg !61
  %553 = fadd float %552, 1.000000e+00, !dbg !61
  %554 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %553) #6, !dbg !61, !srcloc !62
  %555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i437 = icmp eq i32 %555, 0, !dbg !61
  %556 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %554, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %557 = tail call float @llvm.nvvm.fma.rn.f(float %554, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i438 = select i1 %.not6.i437, float %557, float %556, !dbg !61
  %558 = fcmp oge float %.01.i435, 0x4022059680000000, !dbg !61
  %s.0.i439 = select i1 %558, float 1.000000e+00, float %.03.i438, !dbg !61
  %559 = bitcast float %s.0.i439 to i32, !dbg !61
  %560 = bitcast float %371 to i32, !dbg !61
  %561 = and i32 %560, -2147483648, !dbg !61
  %562 = or i32 %561, %559, !dbg !61
  %563 = bitcast i32 %562 to float, !dbg !61
  br label %__nv_tanhf.exit452, !dbg !61

__internal_fmad.exit3.i441:                       ; preds = %__nv_tanhf.exit433
  %564 = fmul float %371, %371, !dbg !61
  %565 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i442 = icmp eq i32 %565, 0, !dbg !61
  %566 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %564, float 0xBFAAC795C0000000) #5, !dbg !61
  %567 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %564, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i443 = select i1 %.not1.i442, float %567, float %566, !dbg !61
  %568 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i444 = icmp eq i32 %568, 0, !dbg !61
  %569 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i443, float %564, float 0x3FC10B2820000000) #5, !dbg !61
  %570 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i443, float %564, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i445 = select i1 %.not2.i444, float %570, float %569, !dbg !61
  %571 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i446 = icmp eq i32 %571, 0, !dbg !61
  %572 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i445, float %564, float 0xBFD5553DA0000000) #5, !dbg !61
  %573 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i445, float %564, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i447 = select i1 %.not3.i446, float %573, float %572, !dbg !61
  %574 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i448 = icmp eq i32 %574, 0, !dbg !61
  %575 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i447, float %564, float 0.000000e+00) #5, !dbg !61
  %576 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i447, float %564, float 0.000000e+00) #5, !dbg !61
  %.04.i449 = select i1 %.not4.i448, float %576, float %575, !dbg !61
  %577 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i450 = icmp eq i32 %577, 0, !dbg !61
  %578 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i449, float %371, float %371) #5, !dbg !61
  %579 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i449, float %371, float %371) #5, !dbg !61
  %.02.i451 = select i1 %.not5.i450, float %579, float %578, !dbg !61
  br label %__nv_tanhf.exit452, !dbg !61

__nv_tanhf.exit452:                               ; preds = %__internal_fmad.exit1.i436, %__internal_fmad.exit3.i441
  %s.1.i440 = phi float [ %563, %__internal_fmad.exit1.i436 ], [ %.02.i451, %__internal_fmad.exit3.i441 ], !dbg !61
  %580 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i453 = icmp eq i32 %580, 0, !dbg !61
  %581 = tail call float @llvm.nvvm.fabs.ftz.f(float %372) #5, !dbg !61
  %582 = tail call float @llvm.nvvm.fabs.f(float %372) #5, !dbg !61
  %.01.i454 = select i1 %.not.i453, float %582, float %581, !dbg !61
  %583 = fcmp ult float %.01.i454, 0x3FE3333340000000, !dbg !61
  br i1 %583, label %__internal_fmad.exit3.i460, label %__internal_fmad.exit1.i455, !dbg !61

__internal_fmad.exit1.i455:                       ; preds = %__nv_tanhf.exit452
  %584 = fmul float %.01.i454, 0x4007154760000000, !dbg !61
  %585 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %584) #5, !dbg !61
  %586 = fadd float %585, 1.000000e+00, !dbg !61
  %587 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %586) #6, !dbg !61, !srcloc !62
  %588 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i456 = icmp eq i32 %588, 0, !dbg !61
  %589 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %587, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %590 = tail call float @llvm.nvvm.fma.rn.f(float %587, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i457 = select i1 %.not6.i456, float %590, float %589, !dbg !61
  %591 = fcmp oge float %.01.i454, 0x4022059680000000, !dbg !61
  %s.0.i458 = select i1 %591, float 1.000000e+00, float %.03.i457, !dbg !61
  %592 = bitcast float %s.0.i458 to i32, !dbg !61
  %593 = bitcast float %372 to i32, !dbg !61
  %594 = and i32 %593, -2147483648, !dbg !61
  %595 = or i32 %594, %592, !dbg !61
  %596 = bitcast i32 %595 to float, !dbg !61
  br label %__nv_tanhf.exit471, !dbg !61

__internal_fmad.exit3.i460:                       ; preds = %__nv_tanhf.exit452
  %597 = fmul float %372, %372, !dbg !61
  %598 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i461 = icmp eq i32 %598, 0, !dbg !61
  %599 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %597, float 0xBFAAC795C0000000) #5, !dbg !61
  %600 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %597, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i462 = select i1 %.not1.i461, float %600, float %599, !dbg !61
  %601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i463 = icmp eq i32 %601, 0, !dbg !61
  %602 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i462, float %597, float 0x3FC10B2820000000) #5, !dbg !61
  %603 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i462, float %597, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i464 = select i1 %.not2.i463, float %603, float %602, !dbg !61
  %604 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i465 = icmp eq i32 %604, 0, !dbg !61
  %605 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i464, float %597, float 0xBFD5553DA0000000) #5, !dbg !61
  %606 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i464, float %597, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i466 = select i1 %.not3.i465, float %606, float %605, !dbg !61
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i467 = icmp eq i32 %607, 0, !dbg !61
  %608 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i466, float %597, float 0.000000e+00) #5, !dbg !61
  %609 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i466, float %597, float 0.000000e+00) #5, !dbg !61
  %.04.i468 = select i1 %.not4.i467, float %609, float %608, !dbg !61
  %610 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i469 = icmp eq i32 %610, 0, !dbg !61
  %611 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i468, float %372, float %372) #5, !dbg !61
  %612 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i468, float %372, float %372) #5, !dbg !61
  %.02.i470 = select i1 %.not5.i469, float %612, float %611, !dbg !61
  br label %__nv_tanhf.exit471, !dbg !61

__nv_tanhf.exit471:                               ; preds = %__internal_fmad.exit1.i455, %__internal_fmad.exit3.i460
  %s.1.i459 = phi float [ %596, %__internal_fmad.exit1.i455 ], [ %.02.i470, %__internal_fmad.exit3.i460 ], !dbg !61
  %613 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i472 = icmp eq i32 %613, 0, !dbg !61
  %614 = tail call float @llvm.nvvm.fabs.ftz.f(float %373) #5, !dbg !61
  %615 = tail call float @llvm.nvvm.fabs.f(float %373) #5, !dbg !61
  %.01.i473 = select i1 %.not.i472, float %615, float %614, !dbg !61
  %616 = fcmp ult float %.01.i473, 0x3FE3333340000000, !dbg !61
  br i1 %616, label %__internal_fmad.exit3.i479, label %__internal_fmad.exit1.i474, !dbg !61

__internal_fmad.exit1.i474:                       ; preds = %__nv_tanhf.exit471
  %617 = fmul float %.01.i473, 0x4007154760000000, !dbg !61
  %618 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %617) #5, !dbg !61
  %619 = fadd float %618, 1.000000e+00, !dbg !61
  %620 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %619) #6, !dbg !61, !srcloc !62
  %621 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i475 = icmp eq i32 %621, 0, !dbg !61
  %622 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %620, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %623 = tail call float @llvm.nvvm.fma.rn.f(float %620, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i476 = select i1 %.not6.i475, float %623, float %622, !dbg !61
  %624 = fcmp oge float %.01.i473, 0x4022059680000000, !dbg !61
  %s.0.i477 = select i1 %624, float 1.000000e+00, float %.03.i476, !dbg !61
  %625 = bitcast float %s.0.i477 to i32, !dbg !61
  %626 = bitcast float %373 to i32, !dbg !61
  %627 = and i32 %626, -2147483648, !dbg !61
  %628 = or i32 %627, %625, !dbg !61
  %629 = bitcast i32 %628 to float, !dbg !61
  br label %__nv_tanhf.exit490, !dbg !61

__internal_fmad.exit3.i479:                       ; preds = %__nv_tanhf.exit471
  %630 = fmul float %373, %373, !dbg !61
  %631 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i480 = icmp eq i32 %631, 0, !dbg !61
  %632 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %630, float 0xBFAAC795C0000000) #5, !dbg !61
  %633 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %630, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i481 = select i1 %.not1.i480, float %633, float %632, !dbg !61
  %634 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i482 = icmp eq i32 %634, 0, !dbg !61
  %635 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i481, float %630, float 0x3FC10B2820000000) #5, !dbg !61
  %636 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i481, float %630, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i483 = select i1 %.not2.i482, float %636, float %635, !dbg !61
  %637 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i484 = icmp eq i32 %637, 0, !dbg !61
  %638 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i483, float %630, float 0xBFD5553DA0000000) #5, !dbg !61
  %639 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i483, float %630, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i485 = select i1 %.not3.i484, float %639, float %638, !dbg !61
  %640 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i486 = icmp eq i32 %640, 0, !dbg !61
  %641 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i485, float %630, float 0.000000e+00) #5, !dbg !61
  %642 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i485, float %630, float 0.000000e+00) #5, !dbg !61
  %.04.i487 = select i1 %.not4.i486, float %642, float %641, !dbg !61
  %643 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i488 = icmp eq i32 %643, 0, !dbg !61
  %644 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i487, float %373, float %373) #5, !dbg !61
  %645 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i487, float %373, float %373) #5, !dbg !61
  %.02.i489 = select i1 %.not5.i488, float %645, float %644, !dbg !61
  br label %__nv_tanhf.exit490, !dbg !61

__nv_tanhf.exit490:                               ; preds = %__internal_fmad.exit1.i474, %__internal_fmad.exit3.i479
  %s.1.i478 = phi float [ %629, %__internal_fmad.exit1.i474 ], [ %.02.i489, %__internal_fmad.exit3.i479 ], !dbg !61
  %646 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i491 = icmp eq i32 %646, 0, !dbg !61
  %647 = tail call float @llvm.nvvm.fabs.ftz.f(float %374) #5, !dbg !61
  %648 = tail call float @llvm.nvvm.fabs.f(float %374) #5, !dbg !61
  %.01.i492 = select i1 %.not.i491, float %648, float %647, !dbg !61
  %649 = fcmp ult float %.01.i492, 0x3FE3333340000000, !dbg !61
  br i1 %649, label %__internal_fmad.exit3.i498, label %__internal_fmad.exit1.i493, !dbg !61

__internal_fmad.exit1.i493:                       ; preds = %__nv_tanhf.exit490
  %650 = fmul float %.01.i492, 0x4007154760000000, !dbg !61
  %651 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %650) #5, !dbg !61
  %652 = fadd float %651, 1.000000e+00, !dbg !61
  %653 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %652) #6, !dbg !61, !srcloc !62
  %654 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i494 = icmp eq i32 %654, 0, !dbg !61
  %655 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %653, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %656 = tail call float @llvm.nvvm.fma.rn.f(float %653, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i495 = select i1 %.not6.i494, float %656, float %655, !dbg !61
  %657 = fcmp oge float %.01.i492, 0x4022059680000000, !dbg !61
  %s.0.i496 = select i1 %657, float 1.000000e+00, float %.03.i495, !dbg !61
  %658 = bitcast float %s.0.i496 to i32, !dbg !61
  %659 = bitcast float %374 to i32, !dbg !61
  %660 = and i32 %659, -2147483648, !dbg !61
  %661 = or i32 %660, %658, !dbg !61
  %662 = bitcast i32 %661 to float, !dbg !61
  br label %__nv_tanhf.exit509, !dbg !61

__internal_fmad.exit3.i498:                       ; preds = %__nv_tanhf.exit490
  %663 = fmul float %374, %374, !dbg !61
  %664 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i499 = icmp eq i32 %664, 0, !dbg !61
  %665 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %663, float 0xBFAAC795C0000000) #5, !dbg !61
  %666 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %663, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i500 = select i1 %.not1.i499, float %666, float %665, !dbg !61
  %667 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i501 = icmp eq i32 %667, 0, !dbg !61
  %668 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i500, float %663, float 0x3FC10B2820000000) #5, !dbg !61
  %669 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i500, float %663, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i502 = select i1 %.not2.i501, float %669, float %668, !dbg !61
  %670 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i503 = icmp eq i32 %670, 0, !dbg !61
  %671 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i502, float %663, float 0xBFD5553DA0000000) #5, !dbg !61
  %672 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i502, float %663, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i504 = select i1 %.not3.i503, float %672, float %671, !dbg !61
  %673 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i505 = icmp eq i32 %673, 0, !dbg !61
  %674 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i504, float %663, float 0.000000e+00) #5, !dbg !61
  %675 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i504, float %663, float 0.000000e+00) #5, !dbg !61
  %.04.i506 = select i1 %.not4.i505, float %675, float %674, !dbg !61
  %676 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i507 = icmp eq i32 %676, 0, !dbg !61
  %677 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i506, float %374, float %374) #5, !dbg !61
  %678 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i506, float %374, float %374) #5, !dbg !61
  %.02.i508 = select i1 %.not5.i507, float %678, float %677, !dbg !61
  br label %__nv_tanhf.exit509, !dbg !61

__nv_tanhf.exit509:                               ; preds = %__internal_fmad.exit1.i493, %__internal_fmad.exit3.i498
  %s.1.i497 = phi float [ %662, %__internal_fmad.exit1.i493 ], [ %.02.i508, %__internal_fmad.exit3.i498 ], !dbg !61
  %679 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i510 = icmp eq i32 %679, 0, !dbg !61
  %680 = tail call float @llvm.nvvm.fabs.ftz.f(float %375) #5, !dbg !61
  %681 = tail call float @llvm.nvvm.fabs.f(float %375) #5, !dbg !61
  %.01.i511 = select i1 %.not.i510, float %681, float %680, !dbg !61
  %682 = fcmp ult float %.01.i511, 0x3FE3333340000000, !dbg !61
  br i1 %682, label %__internal_fmad.exit3.i517, label %__internal_fmad.exit1.i512, !dbg !61

__internal_fmad.exit1.i512:                       ; preds = %__nv_tanhf.exit509
  %683 = fmul float %.01.i511, 0x4007154760000000, !dbg !61
  %684 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %683) #5, !dbg !61
  %685 = fadd float %684, 1.000000e+00, !dbg !61
  %686 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %685) #6, !dbg !61, !srcloc !62
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i513 = icmp eq i32 %687, 0, !dbg !61
  %688 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %686, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %689 = tail call float @llvm.nvvm.fma.rn.f(float %686, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i514 = select i1 %.not6.i513, float %689, float %688, !dbg !61
  %690 = fcmp oge float %.01.i511, 0x4022059680000000, !dbg !61
  %s.0.i515 = select i1 %690, float 1.000000e+00, float %.03.i514, !dbg !61
  %691 = bitcast float %s.0.i515 to i32, !dbg !61
  %692 = bitcast float %375 to i32, !dbg !61
  %693 = and i32 %692, -2147483648, !dbg !61
  %694 = or i32 %693, %691, !dbg !61
  %695 = bitcast i32 %694 to float, !dbg !61
  br label %__nv_tanhf.exit528, !dbg !61

__internal_fmad.exit3.i517:                       ; preds = %__nv_tanhf.exit509
  %696 = fmul float %375, %375, !dbg !61
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i518 = icmp eq i32 %697, 0, !dbg !61
  %698 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %696, float 0xBFAAC795C0000000) #5, !dbg !61
  %699 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %696, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i519 = select i1 %.not1.i518, float %699, float %698, !dbg !61
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i520 = icmp eq i32 %700, 0, !dbg !61
  %701 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i519, float %696, float 0x3FC10B2820000000) #5, !dbg !61
  %702 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i519, float %696, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i521 = select i1 %.not2.i520, float %702, float %701, !dbg !61
  %703 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i522 = icmp eq i32 %703, 0, !dbg !61
  %704 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i521, float %696, float 0xBFD5553DA0000000) #5, !dbg !61
  %705 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i521, float %696, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i523 = select i1 %.not3.i522, float %705, float %704, !dbg !61
  %706 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i524 = icmp eq i32 %706, 0, !dbg !61
  %707 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i523, float %696, float 0.000000e+00) #5, !dbg !61
  %708 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i523, float %696, float 0.000000e+00) #5, !dbg !61
  %.04.i525 = select i1 %.not4.i524, float %708, float %707, !dbg !61
  %709 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i526 = icmp eq i32 %709, 0, !dbg !61
  %710 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i525, float %375, float %375) #5, !dbg !61
  %711 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i525, float %375, float %375) #5, !dbg !61
  %.02.i527 = select i1 %.not5.i526, float %711, float %710, !dbg !61
  br label %__nv_tanhf.exit528, !dbg !61

__nv_tanhf.exit528:                               ; preds = %__internal_fmad.exit1.i512, %__internal_fmad.exit3.i517
  %s.1.i516 = phi float [ %695, %__internal_fmad.exit1.i512 ], [ %.02.i527, %__internal_fmad.exit3.i517 ], !dbg !61
  %712 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i529 = icmp eq i32 %712, 0, !dbg !61
  %713 = tail call float @llvm.nvvm.fabs.ftz.f(float %376) #5, !dbg !61
  %714 = tail call float @llvm.nvvm.fabs.f(float %376) #5, !dbg !61
  %.01.i530 = select i1 %.not.i529, float %714, float %713, !dbg !61
  %715 = fcmp ult float %.01.i530, 0x3FE3333340000000, !dbg !61
  br i1 %715, label %__internal_fmad.exit3.i536, label %__internal_fmad.exit1.i531, !dbg !61

__internal_fmad.exit1.i531:                       ; preds = %__nv_tanhf.exit528
  %716 = fmul float %.01.i530, 0x4007154760000000, !dbg !61
  %717 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %716) #5, !dbg !61
  %718 = fadd float %717, 1.000000e+00, !dbg !61
  %719 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %718) #6, !dbg !61, !srcloc !62
  %720 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i532 = icmp eq i32 %720, 0, !dbg !61
  %721 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %719, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %722 = tail call float @llvm.nvvm.fma.rn.f(float %719, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i533 = select i1 %.not6.i532, float %722, float %721, !dbg !61
  %723 = fcmp oge float %.01.i530, 0x4022059680000000, !dbg !61
  %s.0.i534 = select i1 %723, float 1.000000e+00, float %.03.i533, !dbg !61
  %724 = bitcast float %s.0.i534 to i32, !dbg !61
  %725 = bitcast float %376 to i32, !dbg !61
  %726 = and i32 %725, -2147483648, !dbg !61
  %727 = or i32 %726, %724, !dbg !61
  %728 = bitcast i32 %727 to float, !dbg !61
  br label %__nv_tanhf.exit547, !dbg !61

__internal_fmad.exit3.i536:                       ; preds = %__nv_tanhf.exit528
  %729 = fmul float %376, %376, !dbg !61
  %730 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i537 = icmp eq i32 %730, 0, !dbg !61
  %731 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %729, float 0xBFAAC795C0000000) #5, !dbg !61
  %732 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %729, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i538 = select i1 %.not1.i537, float %732, float %731, !dbg !61
  %733 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i539 = icmp eq i32 %733, 0, !dbg !61
  %734 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i538, float %729, float 0x3FC10B2820000000) #5, !dbg !61
  %735 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i538, float %729, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i540 = select i1 %.not2.i539, float %735, float %734, !dbg !61
  %736 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i541 = icmp eq i32 %736, 0, !dbg !61
  %737 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i540, float %729, float 0xBFD5553DA0000000) #5, !dbg !61
  %738 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i540, float %729, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i542 = select i1 %.not3.i541, float %738, float %737, !dbg !61
  %739 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i543 = icmp eq i32 %739, 0, !dbg !61
  %740 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i542, float %729, float 0.000000e+00) #5, !dbg !61
  %741 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i542, float %729, float 0.000000e+00) #5, !dbg !61
  %.04.i544 = select i1 %.not4.i543, float %741, float %740, !dbg !61
  %742 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i545 = icmp eq i32 %742, 0, !dbg !61
  %743 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i544, float %376, float %376) #5, !dbg !61
  %744 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i544, float %376, float %376) #5, !dbg !61
  %.02.i546 = select i1 %.not5.i545, float %744, float %743, !dbg !61
  br label %__nv_tanhf.exit547, !dbg !61

__nv_tanhf.exit547:                               ; preds = %__internal_fmad.exit1.i531, %__internal_fmad.exit3.i536
  %s.1.i535 = phi float [ %728, %__internal_fmad.exit1.i531 ], [ %.02.i546, %__internal_fmad.exit3.i536 ], !dbg !61
  %745 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i548 = icmp eq i32 %745, 0, !dbg !61
  %746 = tail call float @llvm.nvvm.fabs.ftz.f(float %377) #5, !dbg !61
  %747 = tail call float @llvm.nvvm.fabs.f(float %377) #5, !dbg !61
  %.01.i549 = select i1 %.not.i548, float %747, float %746, !dbg !61
  %748 = fcmp ult float %.01.i549, 0x3FE3333340000000, !dbg !61
  br i1 %748, label %__internal_fmad.exit3.i555, label %__internal_fmad.exit1.i550, !dbg !61

__internal_fmad.exit1.i550:                       ; preds = %__nv_tanhf.exit547
  %749 = fmul float %.01.i549, 0x4007154760000000, !dbg !61
  %750 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %749) #5, !dbg !61
  %751 = fadd float %750, 1.000000e+00, !dbg !61
  %752 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %751) #6, !dbg !61, !srcloc !62
  %753 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i551 = icmp eq i32 %753, 0, !dbg !61
  %754 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %752, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %755 = tail call float @llvm.nvvm.fma.rn.f(float %752, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i552 = select i1 %.not6.i551, float %755, float %754, !dbg !61
  %756 = fcmp oge float %.01.i549, 0x4022059680000000, !dbg !61
  %s.0.i553 = select i1 %756, float 1.000000e+00, float %.03.i552, !dbg !61
  %757 = bitcast float %s.0.i553 to i32, !dbg !61
  %758 = bitcast float %377 to i32, !dbg !61
  %759 = and i32 %758, -2147483648, !dbg !61
  %760 = or i32 %759, %757, !dbg !61
  %761 = bitcast i32 %760 to float, !dbg !61
  br label %__nv_tanhf.exit566, !dbg !61

__internal_fmad.exit3.i555:                       ; preds = %__nv_tanhf.exit547
  %762 = fmul float %377, %377, !dbg !61
  %763 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i556 = icmp eq i32 %763, 0, !dbg !61
  %764 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %762, float 0xBFAAC795C0000000) #5, !dbg !61
  %765 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %762, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i557 = select i1 %.not1.i556, float %765, float %764, !dbg !61
  %766 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i558 = icmp eq i32 %766, 0, !dbg !61
  %767 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i557, float %762, float 0x3FC10B2820000000) #5, !dbg !61
  %768 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i557, float %762, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i559 = select i1 %.not2.i558, float %768, float %767, !dbg !61
  %769 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i560 = icmp eq i32 %769, 0, !dbg !61
  %770 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i559, float %762, float 0xBFD5553DA0000000) #5, !dbg !61
  %771 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i559, float %762, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i561 = select i1 %.not3.i560, float %771, float %770, !dbg !61
  %772 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i562 = icmp eq i32 %772, 0, !dbg !61
  %773 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i561, float %762, float 0.000000e+00) #5, !dbg !61
  %774 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i561, float %762, float 0.000000e+00) #5, !dbg !61
  %.04.i563 = select i1 %.not4.i562, float %774, float %773, !dbg !61
  %775 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i564 = icmp eq i32 %775, 0, !dbg !61
  %776 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i563, float %377, float %377) #5, !dbg !61
  %777 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i563, float %377, float %377) #5, !dbg !61
  %.02.i565 = select i1 %.not5.i564, float %777, float %776, !dbg !61
  br label %__nv_tanhf.exit566, !dbg !61

__nv_tanhf.exit566:                               ; preds = %__internal_fmad.exit1.i550, %__internal_fmad.exit3.i555
  %s.1.i554 = phi float [ %761, %__internal_fmad.exit1.i550 ], [ %.02.i565, %__internal_fmad.exit3.i555 ], !dbg !61
  %778 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i567 = icmp eq i32 %778, 0, !dbg !61
  %779 = tail call float @llvm.nvvm.fabs.ftz.f(float %378) #5, !dbg !61
  %780 = tail call float @llvm.nvvm.fabs.f(float %378) #5, !dbg !61
  %.01.i568 = select i1 %.not.i567, float %780, float %779, !dbg !61
  %781 = fcmp ult float %.01.i568, 0x3FE3333340000000, !dbg !61
  br i1 %781, label %__internal_fmad.exit3.i574, label %__internal_fmad.exit1.i569, !dbg !61

__internal_fmad.exit1.i569:                       ; preds = %__nv_tanhf.exit566
  %782 = fmul float %.01.i568, 0x4007154760000000, !dbg !61
  %783 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %782) #5, !dbg !61
  %784 = fadd float %783, 1.000000e+00, !dbg !61
  %785 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %784) #6, !dbg !61, !srcloc !62
  %786 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i570 = icmp eq i32 %786, 0, !dbg !61
  %787 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %785, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %788 = tail call float @llvm.nvvm.fma.rn.f(float %785, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i571 = select i1 %.not6.i570, float %788, float %787, !dbg !61
  %789 = fcmp oge float %.01.i568, 0x4022059680000000, !dbg !61
  %s.0.i572 = select i1 %789, float 1.000000e+00, float %.03.i571, !dbg !61
  %790 = bitcast float %s.0.i572 to i32, !dbg !61
  %791 = bitcast float %378 to i32, !dbg !61
  %792 = and i32 %791, -2147483648, !dbg !61
  %793 = or i32 %792, %790, !dbg !61
  %794 = bitcast i32 %793 to float, !dbg !61
  br label %__nv_tanhf.exit585, !dbg !61

__internal_fmad.exit3.i574:                       ; preds = %__nv_tanhf.exit566
  %795 = fmul float %378, %378, !dbg !61
  %796 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i575 = icmp eq i32 %796, 0, !dbg !61
  %797 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %795, float 0xBFAAC795C0000000) #5, !dbg !61
  %798 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %795, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i576 = select i1 %.not1.i575, float %798, float %797, !dbg !61
  %799 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i577 = icmp eq i32 %799, 0, !dbg !61
  %800 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i576, float %795, float 0x3FC10B2820000000) #5, !dbg !61
  %801 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i576, float %795, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i578 = select i1 %.not2.i577, float %801, float %800, !dbg !61
  %802 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i579 = icmp eq i32 %802, 0, !dbg !61
  %803 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i578, float %795, float 0xBFD5553DA0000000) #5, !dbg !61
  %804 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i578, float %795, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i580 = select i1 %.not3.i579, float %804, float %803, !dbg !61
  %805 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i581 = icmp eq i32 %805, 0, !dbg !61
  %806 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i580, float %795, float 0.000000e+00) #5, !dbg !61
  %807 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i580, float %795, float 0.000000e+00) #5, !dbg !61
  %.04.i582 = select i1 %.not4.i581, float %807, float %806, !dbg !61
  %808 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i583 = icmp eq i32 %808, 0, !dbg !61
  %809 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i582, float %378, float %378) #5, !dbg !61
  %810 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i582, float %378, float %378) #5, !dbg !61
  %.02.i584 = select i1 %.not5.i583, float %810, float %809, !dbg !61
  br label %__nv_tanhf.exit585, !dbg !61

__nv_tanhf.exit585:                               ; preds = %__internal_fmad.exit1.i569, %__internal_fmad.exit3.i574
  %s.1.i573 = phi float [ %794, %__internal_fmad.exit1.i569 ], [ %.02.i584, %__internal_fmad.exit3.i574 ], !dbg !61
  %811 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i586 = icmp eq i32 %811, 0, !dbg !61
  %812 = tail call float @llvm.nvvm.fabs.ftz.f(float %379) #5, !dbg !61
  %813 = tail call float @llvm.nvvm.fabs.f(float %379) #5, !dbg !61
  %.01.i587 = select i1 %.not.i586, float %813, float %812, !dbg !61
  %814 = fcmp ult float %.01.i587, 0x3FE3333340000000, !dbg !61
  br i1 %814, label %__internal_fmad.exit3.i593, label %__internal_fmad.exit1.i588, !dbg !61

__internal_fmad.exit1.i588:                       ; preds = %__nv_tanhf.exit585
  %815 = fmul float %.01.i587, 0x4007154760000000, !dbg !61
  %816 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %815) #5, !dbg !61
  %817 = fadd float %816, 1.000000e+00, !dbg !61
  %818 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %817) #6, !dbg !61, !srcloc !62
  %819 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i589 = icmp eq i32 %819, 0, !dbg !61
  %820 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %818, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %821 = tail call float @llvm.nvvm.fma.rn.f(float %818, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i590 = select i1 %.not6.i589, float %821, float %820, !dbg !61
  %822 = fcmp oge float %.01.i587, 0x4022059680000000, !dbg !61
  %s.0.i591 = select i1 %822, float 1.000000e+00, float %.03.i590, !dbg !61
  %823 = bitcast float %s.0.i591 to i32, !dbg !61
  %824 = bitcast float %379 to i32, !dbg !61
  %825 = and i32 %824, -2147483648, !dbg !61
  %826 = or i32 %825, %823, !dbg !61
  %827 = bitcast i32 %826 to float, !dbg !61
  br label %__nv_tanhf.exit604, !dbg !61

__internal_fmad.exit3.i593:                       ; preds = %__nv_tanhf.exit585
  %828 = fmul float %379, %379, !dbg !61
  %829 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i594 = icmp eq i32 %829, 0, !dbg !61
  %830 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %828, float 0xBFAAC795C0000000) #5, !dbg !61
  %831 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %828, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i595 = select i1 %.not1.i594, float %831, float %830, !dbg !61
  %832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i596 = icmp eq i32 %832, 0, !dbg !61
  %833 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i595, float %828, float 0x3FC10B2820000000) #5, !dbg !61
  %834 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i595, float %828, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i597 = select i1 %.not2.i596, float %834, float %833, !dbg !61
  %835 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i598 = icmp eq i32 %835, 0, !dbg !61
  %836 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i597, float %828, float 0xBFD5553DA0000000) #5, !dbg !61
  %837 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i597, float %828, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i599 = select i1 %.not3.i598, float %837, float %836, !dbg !61
  %838 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i600 = icmp eq i32 %838, 0, !dbg !61
  %839 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i599, float %828, float 0.000000e+00) #5, !dbg !61
  %840 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i599, float %828, float 0.000000e+00) #5, !dbg !61
  %.04.i601 = select i1 %.not4.i600, float %840, float %839, !dbg !61
  %841 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i602 = icmp eq i32 %841, 0, !dbg !61
  %842 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i601, float %379, float %379) #5, !dbg !61
  %843 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i601, float %379, float %379) #5, !dbg !61
  %.02.i603 = select i1 %.not5.i602, float %843, float %842, !dbg !61
  br label %__nv_tanhf.exit604, !dbg !61

__nv_tanhf.exit604:                               ; preds = %__internal_fmad.exit1.i588, %__internal_fmad.exit3.i593
  %s.1.i592 = phi float [ %827, %__internal_fmad.exit1.i588 ], [ %.02.i603, %__internal_fmad.exit3.i593 ], !dbg !61
  %844 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i605 = icmp eq i32 %844, 0, !dbg !61
  %845 = tail call float @llvm.nvvm.fabs.ftz.f(float %380) #5, !dbg !61
  %846 = tail call float @llvm.nvvm.fabs.f(float %380) #5, !dbg !61
  %.01.i606 = select i1 %.not.i605, float %846, float %845, !dbg !61
  %847 = fcmp ult float %.01.i606, 0x3FE3333340000000, !dbg !61
  br i1 %847, label %__internal_fmad.exit3.i612, label %__internal_fmad.exit1.i607, !dbg !61

__internal_fmad.exit1.i607:                       ; preds = %__nv_tanhf.exit604
  %848 = fmul float %.01.i606, 0x4007154760000000, !dbg !61
  %849 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %848) #5, !dbg !61
  %850 = fadd float %849, 1.000000e+00, !dbg !61
  %851 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %850) #6, !dbg !61, !srcloc !62
  %852 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i608 = icmp eq i32 %852, 0, !dbg !61
  %853 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %851, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %854 = tail call float @llvm.nvvm.fma.rn.f(float %851, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i609 = select i1 %.not6.i608, float %854, float %853, !dbg !61
  %855 = fcmp oge float %.01.i606, 0x4022059680000000, !dbg !61
  %s.0.i610 = select i1 %855, float 1.000000e+00, float %.03.i609, !dbg !61
  %856 = bitcast float %s.0.i610 to i32, !dbg !61
  %857 = bitcast float %380 to i32, !dbg !61
  %858 = and i32 %857, -2147483648, !dbg !61
  %859 = or i32 %858, %856, !dbg !61
  %860 = bitcast i32 %859 to float, !dbg !61
  br label %__nv_tanhf.exit623, !dbg !61

__internal_fmad.exit3.i612:                       ; preds = %__nv_tanhf.exit604
  %861 = fmul float %380, %380, !dbg !61
  %862 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i613 = icmp eq i32 %862, 0, !dbg !61
  %863 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %861, float 0xBFAAC795C0000000) #5, !dbg !61
  %864 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %861, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i614 = select i1 %.not1.i613, float %864, float %863, !dbg !61
  %865 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i615 = icmp eq i32 %865, 0, !dbg !61
  %866 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i614, float %861, float 0x3FC10B2820000000) #5, !dbg !61
  %867 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i614, float %861, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i616 = select i1 %.not2.i615, float %867, float %866, !dbg !61
  %868 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i617 = icmp eq i32 %868, 0, !dbg !61
  %869 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i616, float %861, float 0xBFD5553DA0000000) #5, !dbg !61
  %870 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i616, float %861, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i618 = select i1 %.not3.i617, float %870, float %869, !dbg !61
  %871 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i619 = icmp eq i32 %871, 0, !dbg !61
  %872 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i618, float %861, float 0.000000e+00) #5, !dbg !61
  %873 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i618, float %861, float 0.000000e+00) #5, !dbg !61
  %.04.i620 = select i1 %.not4.i619, float %873, float %872, !dbg !61
  %874 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i621 = icmp eq i32 %874, 0, !dbg !61
  %875 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i620, float %380, float %380) #5, !dbg !61
  %876 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i620, float %380, float %380) #5, !dbg !61
  %.02.i622 = select i1 %.not5.i621, float %876, float %875, !dbg !61
  br label %__nv_tanhf.exit623, !dbg !61

__nv_tanhf.exit623:                               ; preds = %__internal_fmad.exit1.i607, %__internal_fmad.exit3.i612
  %s.1.i611 = phi float [ %860, %__internal_fmad.exit1.i607 ], [ %.02.i622, %__internal_fmad.exit3.i612 ], !dbg !61
  %877 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i624 = icmp eq i32 %877, 0, !dbg !61
  %878 = tail call float @llvm.nvvm.fabs.ftz.f(float %381) #5, !dbg !61
  %879 = tail call float @llvm.nvvm.fabs.f(float %381) #5, !dbg !61
  %.01.i625 = select i1 %.not.i624, float %879, float %878, !dbg !61
  %880 = fcmp ult float %.01.i625, 0x3FE3333340000000, !dbg !61
  br i1 %880, label %__internal_fmad.exit3.i631, label %__internal_fmad.exit1.i626, !dbg !61

__internal_fmad.exit1.i626:                       ; preds = %__nv_tanhf.exit623
  %881 = fmul float %.01.i625, 0x4007154760000000, !dbg !61
  %882 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %881) #5, !dbg !61
  %883 = fadd float %882, 1.000000e+00, !dbg !61
  %884 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %883) #6, !dbg !61, !srcloc !62
  %885 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i627 = icmp eq i32 %885, 0, !dbg !61
  %886 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %884, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %887 = tail call float @llvm.nvvm.fma.rn.f(float %884, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i628 = select i1 %.not6.i627, float %887, float %886, !dbg !61
  %888 = fcmp oge float %.01.i625, 0x4022059680000000, !dbg !61
  %s.0.i629 = select i1 %888, float 1.000000e+00, float %.03.i628, !dbg !61
  %889 = bitcast float %s.0.i629 to i32, !dbg !61
  %890 = bitcast float %381 to i32, !dbg !61
  %891 = and i32 %890, -2147483648, !dbg !61
  %892 = or i32 %891, %889, !dbg !61
  %893 = bitcast i32 %892 to float, !dbg !61
  br label %__nv_tanhf.exit642, !dbg !61

__internal_fmad.exit3.i631:                       ; preds = %__nv_tanhf.exit623
  %894 = fmul float %381, %381, !dbg !61
  %895 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i632 = icmp eq i32 %895, 0, !dbg !61
  %896 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %894, float 0xBFAAC795C0000000) #5, !dbg !61
  %897 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %894, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i633 = select i1 %.not1.i632, float %897, float %896, !dbg !61
  %898 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i634 = icmp eq i32 %898, 0, !dbg !61
  %899 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i633, float %894, float 0x3FC10B2820000000) #5, !dbg !61
  %900 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i633, float %894, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i635 = select i1 %.not2.i634, float %900, float %899, !dbg !61
  %901 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i636 = icmp eq i32 %901, 0, !dbg !61
  %902 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i635, float %894, float 0xBFD5553DA0000000) #5, !dbg !61
  %903 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i635, float %894, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i637 = select i1 %.not3.i636, float %903, float %902, !dbg !61
  %904 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i638 = icmp eq i32 %904, 0, !dbg !61
  %905 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i637, float %894, float 0.000000e+00) #5, !dbg !61
  %906 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i637, float %894, float 0.000000e+00) #5, !dbg !61
  %.04.i639 = select i1 %.not4.i638, float %906, float %905, !dbg !61
  %907 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i640 = icmp eq i32 %907, 0, !dbg !61
  %908 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i639, float %381, float %381) #5, !dbg !61
  %909 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i639, float %381, float %381) #5, !dbg !61
  %.02.i641 = select i1 %.not5.i640, float %909, float %908, !dbg !61
  br label %__nv_tanhf.exit642, !dbg !61

__nv_tanhf.exit642:                               ; preds = %__internal_fmad.exit1.i626, %__internal_fmad.exit3.i631
  %s.1.i630 = phi float [ %893, %__internal_fmad.exit1.i626 ], [ %.02.i641, %__internal_fmad.exit3.i631 ], !dbg !61
  %910 = insertelement <4 x float> poison, float %s.1.i497, i64 0, !dbg !63
  %911 = insertelement <4 x float> %910, float %s.1.i345, i64 1, !dbg !63
  %912 = insertelement <4 x float> %911, float %s.1.i516, i64 2, !dbg !63
  %913 = insertelement <4 x float> %912, float %s.1.i364, i64 3, !dbg !63
  %914 = fadd <4 x float> %913, splat (float 1.000000e+00), !dbg !63
  %915 = insertelement <4 x float> poison, float %s.1.i440, i64 0, !dbg !63
  %916 = insertelement <4 x float> %915, float %s.1.i421, i64 1, !dbg !63
  %917 = insertelement <4 x float> %916, float %s.1.i402, i64 2, !dbg !63
  %918 = insertelement <4 x float> %917, float %s.1.i383, i64 3, !dbg !63
  %919 = fadd <4 x float> %918, splat (float 1.000000e+00), !dbg !63
  %920 = insertelement <8 x float> poison, float %s.1.i630, i64 0, !dbg !63
  %921 = insertelement <8 x float> %920, float %s.1.i611, i64 1, !dbg !63
  %922 = insertelement <8 x float> %921, float %s.1.i592, i64 2, !dbg !63
  %923 = insertelement <8 x float> %922, float %s.1.i573, i64 3, !dbg !63
  %924 = insertelement <8 x float> %923, float %s.1.i554, i64 4, !dbg !63
  %925 = insertelement <8 x float> %924, float %s.1.i535, i64 5, !dbg !63
  %926 = insertelement <8 x float> %925, float %s.1.i478, i64 6, !dbg !63
  %927 = insertelement <8 x float> %926, float %s.1.i459, i64 7, !dbg !63
  %928 = fadd <8 x float> %927, splat (float 1.000000e+00), !dbg !63
  %929 = fcmp uno <4 x float> %119, zeroinitializer, !dbg !64
  %930 = fcmp uno <4 x float> %118, zeroinitializer, !dbg !64
  %931 = fcmp uno <4 x float> %123, zeroinitializer, !dbg !66
  %932 = fcmp uno <8 x float> %120, zeroinitializer, !dbg !66
  %933 = fmul <8 x float> %285, %928, !dbg !68
  %934 = fcmp olt <8 x float> %120, %933, !dbg !69
  %935 = or <8 x i1> %932, %934, !dbg !70
  %936 = select <8 x i1> %935, <8 x float> %120, <8 x float> %933, !dbg !71
  %937 = insertelement <8 x i1> poison, i1 %151, i64 0, !dbg !72
  %938 = shufflevector <8 x i1> %937, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !72
  %939 = select <8 x i1> %938, <8 x float> %936, <8 x float> %120, !dbg !72
  %940 = fcmp uno <4 x float> %122, zeroinitializer, !dbg !64
  %941 = fcmp uno <8 x float> %121, zeroinitializer, !dbg !64
  %942 = fmul <4 x float> %283, %919, !dbg !68
  %943 = fcmp olt <4 x float> %123, %942, !dbg !69
  %944 = or <4 x i1> %931, %943, !dbg !70
  %945 = select <4 x i1> %944, <4 x float> %123, <4 x float> %942, !dbg !71
  %946 = insertelement <4 x i1> poison, i1 %151, i64 0, !dbg !72
  %947 = shufflevector <4 x i1> %946, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !72
  %948 = select <4 x i1> %947, <4 x float> %945, <4 x float> %123, !dbg !72
  %949 = fcmp ogt <4 x float> %122, %942, !dbg !73
  %950 = or <4 x i1> %940, %949, !dbg !74
  %951 = select <4 x i1> %950, <4 x float> %122, <4 x float> %942, !dbg !75
  %952 = fmul <4 x float> %284, %914, !dbg !68
  %953 = shufflevector <4 x float> %952, <4 x float> poison, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !73
  %954 = fcmp ogt <4 x float> %119, %953, !dbg !73
  %955 = fcmp olt <4 x float> %119, %953, !dbg !73
  %956 = shufflevector <4 x i1> %954, <4 x i1> %955, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !73
  %957 = or <4 x i1> %929, %956, !dbg !74
  %958 = select <4 x i1> %957, <4 x float> %119, <4 x float> %953, !dbg !75
  %959 = fcmp ogt <4 x float> %118, %952, !dbg !73
  %960 = fcmp olt <4 x float> %118, %952, !dbg !73
  %961 = shufflevector <4 x i1> %959, <4 x i1> %960, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !73
  %962 = or <4 x i1> %930, %961, !dbg !74
  %963 = select <4 x i1> %962, <4 x float> %118, <4 x float> %952, !dbg !75
  %964 = fcmp ogt <8 x float> %121, %933, !dbg !73
  %965 = or <8 x i1> %941, %964, !dbg !74
  %966 = select <8 x i1> %965, <8 x float> %121, <8 x float> %933, !dbg !75
  %967 = select <4 x i1> %947, <4 x float> %951, <4 x float> %122, !dbg !76
  %968 = select <4 x i1> %947, <4 x float> %963, <4 x float> %118, !dbg !76
  %969 = select <4 x i1> %947, <4 x float> %958, <4 x float> %119, !dbg !76
  %970 = select <8 x i1> %938, <8 x float> %966, <8 x float> %121, !dbg !76
  %971 = sext i32 %138 to i64, !dbg !77
  %972 = getelementptr float, ptr addrspace(1) %5, i64 %971, !dbg !77
  %973 = sext i32 %140 to i64, !dbg !77
  %974 = getelementptr float, ptr addrspace(1) %5, i64 %973, !dbg !77
  %975 = sext i32 %141 to i64, !dbg !77
  %976 = getelementptr float, ptr addrspace(1) %5, i64 %975, !dbg !77
  %977 = sext i32 %142 to i64, !dbg !77
  %978 = getelementptr float, ptr addrspace(1) %5, i64 %977, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %979 = bitcast float %286 to i32, !dbg !78
  %980 = bitcast float %288 to i32, !dbg !78
  %981 = bitcast float %290 to i32, !dbg !78
  %982 = bitcast float %292 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %102, i32 %979, i32 %980, i32 %981, i32 %982, i1 true) #5, !dbg !78
  %983 = bitcast float %294 to i32, !dbg !78
  %984 = bitcast float %296 to i32, !dbg !78
  %985 = bitcast float %298 to i32, !dbg !78
  %986 = bitcast float %300 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %104, i32 %983, i32 %984, i32 %985, i32 %986, i1 true) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %987 = load <4 x i32>, ptr addrspace(3) %108, align 16, !dbg !78
  %988 = load <4 x i32>, ptr addrspace(3) %109, align 16, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %989 = bitcast float %302 to i32, !dbg !78
  %990 = bitcast float %304 to i32, !dbg !78
  %991 = bitcast float %306 to i32, !dbg !78
  %992 = bitcast float %308 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %102, i32 %989, i32 %990, i32 %991, i32 %992, i1 true) #5, !dbg !78
  %993 = bitcast float %310 to i32, !dbg !78
  %994 = bitcast float %312 to i32, !dbg !78
  %995 = bitcast float %314 to i32, !dbg !78
  %996 = bitcast float %316 to i32, !dbg !78
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %104, i32 %993, i32 %994, i32 %995, i32 %996, i1 true) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %997 = load <4 x i32>, ptr addrspace(3) %108, align 16, !dbg !78
  %998 = load <4 x i32>, ptr addrspace(3) %109, align 16, !dbg !78
  %.extract = extractelement <4 x i32> %987, i64 0, !dbg !78
  %.extract39 = extractelement <4 x i32> %987, i64 1, !dbg !78
  %.extract40 = extractelement <4 x i32> %987, i64 2, !dbg !78
  %.extract41 = extractelement <4 x i32> %987, i64 3, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract39, i32 %.extract40, i32 %.extract41, ptr addrspace(1) %972, i1 %21) #5, !dbg !78
  %.extract42 = extractelement <4 x i32> %988, i64 0, !dbg !78
  %.extract43 = extractelement <4 x i32> %988, i64 1, !dbg !78
  %.extract44 = extractelement <4 x i32> %988, i64 2, !dbg !78
  %.extract45 = extractelement <4 x i32> %988, i64 3, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract42, i32 %.extract43, i32 %.extract44, i32 %.extract45, ptr addrspace(1) %974, i1 %153) #5, !dbg !78
  %.extract46 = extractelement <4 x i32> %997, i64 0, !dbg !78
  %.extract47 = extractelement <4 x i32> %997, i64 1, !dbg !78
  %.extract48 = extractelement <4 x i32> %997, i64 2, !dbg !78
  %.extract49 = extractelement <4 x i32> %997, i64 3, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract46, i32 %.extract47, i32 %.extract48, i32 %.extract49, ptr addrspace(1) %976, i1 %22) #5, !dbg !78
  %.extract50 = extractelement <4 x i32> %998, i64 0, !dbg !78
  %.extract51 = extractelement <4 x i32> %998, i64 1, !dbg !78
  %.extract52 = extractelement <4 x i32> %998, i64 2, !dbg !78
  %.extract53 = extractelement <4 x i32> %998, i64 3, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract50, i32 %.extract51, i32 %.extract52, i32 %.extract53, ptr addrspace(1) %978, i1 %154) #5, !dbg !78
  br i1 %117, label %116, label %999, !dbg !38

999:                                              ; preds = %__nv_tanhf.exit642
  %1000 = lshr i32 %15, 5, !dbg !11
  %1001 = and i32 %15, 1, !dbg !11
  %1002 = or disjoint i32 %14, %1001, !dbg !12
  %1003 = icmp slt i32 %1002, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1004 = fcmp ogt <4 x float> %968, %969, !dbg !81
  %1005 = extractelement <4 x float> %969, i64 3, !dbg !84
  %1006 = fcmp uno float %1005, 0.000000e+00, !dbg !84
  %1007 = extractelement <4 x i1> %1004, i64 3, !dbg !85
  %1008 = or i1 %1007, %1006, !dbg !85
  %1009 = extractelement <4 x float> %968, i64 3, !dbg !86
  %1010 = select i1 %1008, float %1005, float %1009, !dbg !86
  %1011 = extractelement <4 x float> %948, i64 3, !dbg !87
  %1012 = fcmp olt float %1010, %1011, !dbg !87
  %1013 = fcmp uno float %1010, 0.000000e+00, !dbg !84
  %1014 = or i1 %1012, %1013, !dbg !85
  %1015 = select i1 %1014, float %1010, float %1011, !dbg !86
  %1016 = extractelement <4 x float> %948, i64 2, !dbg !87
  %1017 = fcmp olt float %1015, %1016, !dbg !87
  %1018 = fcmp uno float %1015, 0.000000e+00, !dbg !84
  %1019 = or i1 %1017, %1018, !dbg !85
  %1020 = select i1 %1019, float %1015, float %1016, !dbg !86
  %1021 = extractelement <4 x float> %948, i64 1, !dbg !87
  %1022 = fcmp olt float %1020, %1021, !dbg !87
  %1023 = fcmp uno float %1020, 0.000000e+00, !dbg !84
  %1024 = or i1 %1022, %1023, !dbg !85
  %1025 = select i1 %1024, float %1020, float %1021, !dbg !86
  %1026 = extractelement <4 x float> %948, i64 0, !dbg !87
  %1027 = fcmp olt float %1025, %1026, !dbg !87
  %1028 = fcmp uno float %1025, 0.000000e+00, !dbg !84
  %1029 = or i1 %1027, %1028, !dbg !85
  %1030 = select i1 %1029, float %1025, float %1026, !dbg !86
  %1031 = extractelement <8 x float> %939, i64 7, !dbg !87
  %1032 = fcmp olt float %1030, %1031, !dbg !87
  %1033 = fcmp uno float %1030, 0.000000e+00, !dbg !84
  %1034 = or i1 %1032, %1033, !dbg !85
  %1035 = select i1 %1034, float %1030, float %1031, !dbg !86
  %1036 = extractelement <8 x float> %939, i64 6, !dbg !87
  %1037 = fcmp olt float %1035, %1036, !dbg !87
  %1038 = fcmp uno float %1035, 0.000000e+00, !dbg !84
  %1039 = or i1 %1037, %1038, !dbg !85
  %1040 = select i1 %1039, float %1035, float %1036, !dbg !86
  %1041 = extractelement <4 x float> %969, i64 2, !dbg !84
  %1042 = fcmp uno float %1041, 0.000000e+00, !dbg !84
  %1043 = extractelement <4 x i1> %1004, i64 2, !dbg !85
  %1044 = or i1 %1043, %1042, !dbg !85
  %1045 = extractelement <4 x float> %968, i64 2, !dbg !86
  %1046 = select i1 %1044, float %1041, float %1045, !dbg !86
  %1047 = extractelement <8 x float> %939, i64 5, !dbg !87
  %1048 = fcmp olt float %1046, %1047, !dbg !87
  %1049 = fcmp uno float %1046, 0.000000e+00, !dbg !84
  %1050 = or i1 %1048, %1049, !dbg !85
  %1051 = select i1 %1050, float %1046, float %1047, !dbg !86
  %1052 = extractelement <8 x float> %939, i64 4, !dbg !87
  %1053 = fcmp olt float %1051, %1052, !dbg !87
  %1054 = fcmp uno float %1051, 0.000000e+00, !dbg !84
  %1055 = or i1 %1053, %1054, !dbg !85
  %1056 = select i1 %1055, float %1051, float %1052, !dbg !86
  %1057 = extractelement <8 x float> %939, i64 3, !dbg !87
  %1058 = fcmp olt float %1056, %1057, !dbg !87
  %1059 = fcmp uno float %1056, 0.000000e+00, !dbg !84
  %1060 = or i1 %1058, %1059, !dbg !85
  %1061 = select i1 %1060, float %1056, float %1057, !dbg !86
  %1062 = extractelement <8 x float> %939, i64 2, !dbg !87
  %1063 = fcmp olt float %1061, %1062, !dbg !87
  %1064 = fcmp uno float %1061, 0.000000e+00, !dbg !84
  %1065 = or i1 %1063, %1064, !dbg !85
  %1066 = select i1 %1065, float %1061, float %1062, !dbg !86
  %1067 = extractelement <8 x float> %939, i64 1, !dbg !87
  %1068 = fcmp olt float %1066, %1067, !dbg !87
  %1069 = fcmp uno float %1066, 0.000000e+00, !dbg !84
  %1070 = or i1 %1068, %1069, !dbg !85
  %1071 = select i1 %1070, float %1066, float %1067, !dbg !86
  %1072 = extractelement <8 x float> %939, i64 0, !dbg !87
  %1073 = fcmp olt float %1071, %1072, !dbg !87
  %1074 = fcmp uno float %1071, 0.000000e+00, !dbg !84
  %1075 = or i1 %1073, %1074, !dbg !85
  %1076 = select i1 %1075, float %1071, float %1072, !dbg !86
  %1077 = bitcast float %1040 to i32, !dbg !79
  %1078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1077, i32 16, i32 31), !dbg !79
  %1079 = bitcast i32 %1078 to float, !dbg !79
  %1080 = fcmp olt float %1040, %1079, !dbg !87
  %1081 = fcmp uno float %1040, 0.000000e+00, !dbg !84
  %1082 = or i1 %1081, %1080, !dbg !85
  %1083 = select i1 %1082, float %1040, float %1079, !dbg !86
  %1084 = bitcast float %1083 to i32, !dbg !79
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 8, i32 31), !dbg !79
  %1086 = bitcast i32 %1085 to float, !dbg !79
  %1087 = fcmp olt float %1083, %1086, !dbg !87
  %1088 = fcmp uno float %1083, 0.000000e+00, !dbg !84
  %1089 = or i1 %1087, %1088, !dbg !85
  %1090 = select i1 %1089, float %1083, float %1086, !dbg !86
  %1091 = bitcast float %1090 to i32, !dbg !79
  %1092 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1091, i32 4, i32 31), !dbg !79
  %1093 = bitcast i32 %1092 to float, !dbg !79
  %1094 = fcmp olt float %1090, %1093, !dbg !87
  %1095 = fcmp uno float %1090, 0.000000e+00, !dbg !84
  %1096 = or i1 %1094, %1095, !dbg !85
  %1097 = select i1 %1096, float %1090, float %1093, !dbg !86
  %1098 = bitcast float %1097 to i32, !dbg !79
  %1099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1098, i32 2, i32 31), !dbg !79
  %1100 = bitcast i32 %1099 to float, !dbg !79
  %1101 = fcmp olt float %1097, %1100, !dbg !87
  %1102 = fcmp uno float %1097, 0.000000e+00, !dbg !84
  %1103 = or i1 %1101, %1102, !dbg !85
  %1104 = select i1 %1103, float %1097, float %1100, !dbg !86
  %1105 = bitcast float %1104 to i32, !dbg !79
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1105, i32 1, i32 31), !dbg !79
  %1107 = bitcast i32 %1106 to float, !dbg !79
  %1108 = fcmp olt float %1104, %1107, !dbg !87
  %1109 = fcmp uno float %1104, 0.000000e+00, !dbg !84
  %1110 = or i1 %1108, %1109, !dbg !85
  %1111 = bitcast float %1076 to i32, !dbg !79
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 16, i32 31), !dbg !79
  %1113 = bitcast i32 %1112 to float, !dbg !79
  %1114 = fcmp olt float %1076, %1113, !dbg !87
  %1115 = fcmp uno float %1076, 0.000000e+00, !dbg !84
  %1116 = or i1 %1115, %1114, !dbg !85
  %1117 = select i1 %1116, float %1076, float %1113, !dbg !86
  %1118 = bitcast float %1117 to i32, !dbg !79
  %1119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1118, i32 8, i32 31), !dbg !79
  %1120 = bitcast i32 %1119 to float, !dbg !79
  %1121 = fcmp olt float %1117, %1120, !dbg !87
  %1122 = fcmp uno float %1117, 0.000000e+00, !dbg !84
  %1123 = or i1 %1121, %1122, !dbg !85
  %1124 = select i1 %1123, float %1117, float %1120, !dbg !86
  %1125 = bitcast float %1124 to i32, !dbg !79
  %1126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1125, i32 4, i32 31), !dbg !79
  %1127 = bitcast i32 %1126 to float, !dbg !79
  %1128 = fcmp olt float %1124, %1127, !dbg !87
  %1129 = fcmp uno float %1124, 0.000000e+00, !dbg !84
  %1130 = or i1 %1128, %1129, !dbg !85
  %1131 = select i1 %1130, float %1124, float %1127, !dbg !86
  %1132 = bitcast float %1131 to i32, !dbg !79
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 2, i32 31), !dbg !79
  %1134 = bitcast i32 %1133 to float, !dbg !79
  %1135 = fcmp olt float %1131, %1134, !dbg !87
  %1136 = fcmp uno float %1131, 0.000000e+00, !dbg !84
  %1137 = or i1 %1135, %1136, !dbg !85
  %1138 = select i1 %1137, float %1131, float %1134, !dbg !86
  %1139 = bitcast float %1138 to i32, !dbg !79
  %1140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1139, i32 1, i32 31), !dbg !79
  %1141 = bitcast i32 %1140 to float, !dbg !79
  %1142 = fcmp olt float %1138, %1141, !dbg !87
  %1143 = fcmp uno float %1138, 0.000000e+00, !dbg !84
  %1144 = or i1 %1142, %1143, !dbg !85
  %1145 = and i32 %1000, 31, !dbg !79
  %1146 = icmp eq i32 %17, 0, !dbg !79
  %1147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1145, !dbg !79
  %1148 = select i1 %1110, i32 %1105, i32 %1106, !dbg !86
  %1149 = insertelement <1 x i32> poison, i32 %1148, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1147, <1 x i32> %1149, i1 %1146) #5, !dbg !79
  %1150 = or disjoint i32 %1145, 32, !dbg !79
  %1151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1150, !dbg !79
  %1152 = select i1 %1144, i32 %1139, i32 %1140, !dbg !86
  %1153 = insertelement <1 x i32> poison, i32 %1152, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1151, <1 x i32> %1153, i1 %1146) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1154 = icmp slt i32 %15, 64, !dbg !79
  %1155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !79
  %1156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1155, i1 %1154) #5, !dbg !79
  %1157 = bitcast i32 %1156 to float, !dbg !79
  %1158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1156, i32 16, i32 31), !dbg !79
  %1159 = bitcast i32 %1158 to float, !dbg !79
  %1160 = fcmp olt float %1157, %1159, !dbg !87
  %1161 = fcmp uno float %1157, 0.000000e+00, !dbg !84
  %1162 = or i1 %1161, %1160, !dbg !85
  %1163 = select i1 %1162, float %1157, float %1159, !dbg !86
  %1164 = bitcast float %1163 to i32, !dbg !79
  %1165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1164, i32 8, i32 31), !dbg !79
  %1166 = bitcast i32 %1165 to float, !dbg !79
  %1167 = fcmp olt float %1163, %1166, !dbg !87
  %1168 = fcmp uno float %1163, 0.000000e+00, !dbg !84
  %1169 = or i1 %1167, %1168, !dbg !85
  %1170 = select i1 %1169, float %1163, float %1166, !dbg !86
  %1171 = bitcast float %1170 to i32, !dbg !79
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 4, i32 31), !dbg !79
  %1173 = bitcast i32 %1172 to float, !dbg !79
  %1174 = fcmp olt float %1170, %1173, !dbg !87
  %1175 = fcmp uno float %1170, 0.000000e+00, !dbg !84
  %1176 = or i1 %1174, %1175, !dbg !85
  %1177 = select i1 %1176, float %1170, float %1173, !dbg !86
  %1178 = bitcast float %1177 to i32, !dbg !79
  %1179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1178, i32 2, i32 31), !dbg !79
  %1180 = bitcast i32 %1179 to float, !dbg !79
  %1181 = fcmp olt float %1177, %1180, !dbg !87
  %1182 = fcmp uno float %1177, 0.000000e+00, !dbg !84
  %1183 = or i1 %1181, %1182, !dbg !85
  %1184 = select i1 %1183, float %1177, float %1180, !dbg !86
  %1185 = bitcast float %1184 to i32, !dbg !79
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 1, i32 31), !dbg !79
  %1187 = bitcast i32 %1186 to float, !dbg !79
  %1188 = fcmp olt float %1184, %1187, !dbg !87
  %1189 = fcmp uno float %1184, 0.000000e+00, !dbg !84
  %1190 = or i1 %1188, %1189, !dbg !85
  %1191 = and i1 %1154, %1146, !dbg !79
  %1192 = select i1 %1190, i32 %1185, i32 %1186, !dbg !86
  %1193 = insertelement <1 x i32> poison, i32 %1192, i64 0, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1155, <1 x i32> %1193, i1 %1191) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %1194 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  %1195 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1196 = bitcast float %1194 to i32, !dbg !88
  %1197 = bitcast float %1195 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1196, i32 %1197, i1 true) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %1198 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1001, !dbg !88
  %1199 = load float, ptr addrspace(3) %1198, align 4, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %1200 = extractelement <4 x float> %968, i64 1, !dbg !90
  %1201 = fcmp uno float %1200, 0.000000e+00, !dbg !90
  %1202 = extractelement <4 x i1> %1004, i64 1, !dbg !91
  %1203 = or i1 %1202, %1201, !dbg !91
  %1204 = extractelement <4 x float> %969, i64 1, !dbg !92
  %1205 = select i1 %1203, float %1200, float %1204, !dbg !92
  %1206 = extractelement <4 x float> %967, i64 3, !dbg !81
  %1207 = fcmp ogt float %1205, %1206, !dbg !81
  %1208 = fcmp uno float %1205, 0.000000e+00, !dbg !90
  %1209 = or i1 %1207, %1208, !dbg !91
  %1210 = select i1 %1209, float %1205, float %1206, !dbg !92
  %1211 = extractelement <4 x float> %967, i64 2, !dbg !81
  %1212 = fcmp ogt float %1210, %1211, !dbg !81
  %1213 = fcmp uno float %1210, 0.000000e+00, !dbg !90
  %1214 = or i1 %1212, %1213, !dbg !91
  %1215 = select i1 %1214, float %1210, float %1211, !dbg !92
  %1216 = extractelement <4 x float> %967, i64 1, !dbg !81
  %1217 = fcmp ogt float %1215, %1216, !dbg !81
  %1218 = fcmp uno float %1215, 0.000000e+00, !dbg !90
  %1219 = or i1 %1217, %1218, !dbg !91
  %1220 = select i1 %1219, float %1215, float %1216, !dbg !92
  %1221 = extractelement <4 x float> %967, i64 0, !dbg !81
  %1222 = fcmp ogt float %1220, %1221, !dbg !81
  %1223 = fcmp uno float %1220, 0.000000e+00, !dbg !90
  %1224 = or i1 %1222, %1223, !dbg !91
  %1225 = select i1 %1224, float %1220, float %1221, !dbg !92
  %1226 = extractelement <8 x float> %970, i64 7, !dbg !81
  %1227 = fcmp ogt float %1225, %1226, !dbg !81
  %1228 = fcmp uno float %1225, 0.000000e+00, !dbg !90
  %1229 = or i1 %1227, %1228, !dbg !91
  %1230 = select i1 %1229, float %1225, float %1226, !dbg !92
  %1231 = extractelement <8 x float> %970, i64 6, !dbg !81
  %1232 = fcmp ogt float %1230, %1231, !dbg !81
  %1233 = fcmp uno float %1230, 0.000000e+00, !dbg !90
  %1234 = or i1 %1232, %1233, !dbg !91
  %1235 = select i1 %1234, float %1230, float %1231, !dbg !92
  %1236 = extractelement <4 x float> %968, i64 0, !dbg !90
  %1237 = fcmp uno float %1236, 0.000000e+00, !dbg !90
  %1238 = extractelement <4 x i1> %1004, i64 0, !dbg !91
  %1239 = or i1 %1238, %1237, !dbg !91
  %1240 = extractelement <4 x float> %969, i64 0, !dbg !92
  %1241 = select i1 %1239, float %1236, float %1240, !dbg !92
  %1242 = extractelement <8 x float> %970, i64 5, !dbg !81
  %1243 = fcmp ogt float %1241, %1242, !dbg !81
  %1244 = fcmp uno float %1241, 0.000000e+00, !dbg !90
  %1245 = or i1 %1243, %1244, !dbg !91
  %1246 = select i1 %1245, float %1241, float %1242, !dbg !92
  %1247 = extractelement <8 x float> %970, i64 4, !dbg !81
  %1248 = fcmp ogt float %1246, %1247, !dbg !81
  %1249 = fcmp uno float %1246, 0.000000e+00, !dbg !90
  %1250 = or i1 %1248, %1249, !dbg !91
  %1251 = select i1 %1250, float %1246, float %1247, !dbg !92
  %1252 = extractelement <8 x float> %970, i64 3, !dbg !81
  %1253 = fcmp ogt float %1251, %1252, !dbg !81
  %1254 = fcmp uno float %1251, 0.000000e+00, !dbg !90
  %1255 = or i1 %1253, %1254, !dbg !91
  %1256 = select i1 %1255, float %1251, float %1252, !dbg !92
  %1257 = extractelement <8 x float> %970, i64 2, !dbg !81
  %1258 = fcmp ogt float %1256, %1257, !dbg !81
  %1259 = fcmp uno float %1256, 0.000000e+00, !dbg !90
  %1260 = or i1 %1258, %1259, !dbg !91
  %1261 = select i1 %1260, float %1256, float %1257, !dbg !92
  %1262 = extractelement <8 x float> %970, i64 1, !dbg !81
  %1263 = fcmp ogt float %1261, %1262, !dbg !81
  %1264 = fcmp uno float %1261, 0.000000e+00, !dbg !90
  %1265 = or i1 %1263, %1264, !dbg !91
  %1266 = select i1 %1265, float %1261, float %1262, !dbg !92
  %1267 = extractelement <8 x float> %970, i64 0, !dbg !81
  %1268 = fcmp ogt float %1266, %1267, !dbg !81
  %1269 = fcmp uno float %1266, 0.000000e+00, !dbg !90
  %1270 = or i1 %1268, %1269, !dbg !91
  %1271 = select i1 %1270, float %1266, float %1267, !dbg !92
  %1272 = bitcast float %1235 to i32, !dbg !89
  %1273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1272, i32 16, i32 31), !dbg !89
  %1274 = bitcast i32 %1273 to float, !dbg !89
  %1275 = fcmp ogt float %1235, %1274, !dbg !81
  %1276 = fcmp uno float %1235, 0.000000e+00, !dbg !90
  %1277 = or i1 %1276, %1275, !dbg !91
  %1278 = select i1 %1277, float %1235, float %1274, !dbg !92
  %1279 = bitcast float %1278 to i32, !dbg !89
  %1280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1279, i32 8, i32 31), !dbg !89
  %1281 = bitcast i32 %1280 to float, !dbg !89
  %1282 = fcmp ogt float %1278, %1281, !dbg !81
  %1283 = fcmp uno float %1278, 0.000000e+00, !dbg !90
  %1284 = or i1 %1282, %1283, !dbg !91
  %1285 = select i1 %1284, float %1278, float %1281, !dbg !92
  %1286 = bitcast float %1285 to i32, !dbg !89
  %1287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1286, i32 4, i32 31), !dbg !89
  %1288 = bitcast i32 %1287 to float, !dbg !89
  %1289 = fcmp ogt float %1285, %1288, !dbg !81
  %1290 = fcmp uno float %1285, 0.000000e+00, !dbg !90
  %1291 = or i1 %1289, %1290, !dbg !91
  %1292 = select i1 %1291, float %1285, float %1288, !dbg !92
  %1293 = bitcast float %1292 to i32, !dbg !89
  %1294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1293, i32 2, i32 31), !dbg !89
  %1295 = bitcast i32 %1294 to float, !dbg !89
  %1296 = fcmp ogt float %1292, %1295, !dbg !81
  %1297 = fcmp uno float %1292, 0.000000e+00, !dbg !90
  %1298 = or i1 %1296, %1297, !dbg !91
  %1299 = select i1 %1298, float %1292, float %1295, !dbg !92
  %1300 = bitcast float %1299 to i32, !dbg !89
  %1301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1300, i32 1, i32 31), !dbg !89
  %1302 = bitcast i32 %1301 to float, !dbg !89
  %1303 = fcmp ogt float %1299, %1302, !dbg !81
  %1304 = fcmp uno float %1299, 0.000000e+00, !dbg !90
  %1305 = or i1 %1303, %1304, !dbg !91
  %1306 = bitcast float %1271 to i32, !dbg !89
  %1307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1306, i32 16, i32 31), !dbg !89
  %1308 = bitcast i32 %1307 to float, !dbg !89
  %1309 = fcmp ogt float %1271, %1308, !dbg !81
  %1310 = fcmp uno float %1271, 0.000000e+00, !dbg !90
  %1311 = or i1 %1310, %1309, !dbg !91
  %1312 = select i1 %1311, float %1271, float %1308, !dbg !92
  %1313 = bitcast float %1312 to i32, !dbg !89
  %1314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1313, i32 8, i32 31), !dbg !89
  %1315 = bitcast i32 %1314 to float, !dbg !89
  %1316 = fcmp ogt float %1312, %1315, !dbg !81
  %1317 = fcmp uno float %1312, 0.000000e+00, !dbg !90
  %1318 = or i1 %1316, %1317, !dbg !91
  %1319 = select i1 %1318, float %1312, float %1315, !dbg !92
  %1320 = bitcast float %1319 to i32, !dbg !89
  %1321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1320, i32 4, i32 31), !dbg !89
  %1322 = bitcast i32 %1321 to float, !dbg !89
  %1323 = fcmp ogt float %1319, %1322, !dbg !81
  %1324 = fcmp uno float %1319, 0.000000e+00, !dbg !90
  %1325 = or i1 %1323, %1324, !dbg !91
  %1326 = select i1 %1325, float %1319, float %1322, !dbg !92
  %1327 = bitcast float %1326 to i32, !dbg !89
  %1328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1327, i32 2, i32 31), !dbg !89
  %1329 = bitcast i32 %1328 to float, !dbg !89
  %1330 = fcmp ogt float %1326, %1329, !dbg !81
  %1331 = fcmp uno float %1326, 0.000000e+00, !dbg !90
  %1332 = or i1 %1330, %1331, !dbg !91
  %1333 = select i1 %1332, float %1326, float %1329, !dbg !92
  %1334 = bitcast float %1333 to i32, !dbg !89
  %1335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1334, i32 1, i32 31), !dbg !89
  %1336 = bitcast i32 %1335 to float, !dbg !89
  %1337 = fcmp ogt float %1333, %1336, !dbg !81
  %1338 = fcmp uno float %1333, 0.000000e+00, !dbg !90
  %1339 = or i1 %1337, %1338, !dbg !91
  %1340 = select i1 %1305, i32 %1300, i32 %1301, !dbg !92
  %1341 = insertelement <1 x i32> poison, i32 %1340, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1147, <1 x i32> %1341, i1 %1146) #5, !dbg !89
  %1342 = select i1 %1339, i32 %1334, i32 %1335, !dbg !92
  %1343 = insertelement <1 x i32> poison, i32 %1342, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1151, <1 x i32> %1343, i1 %1146) #5, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %1344 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1155, i1 %1154) #5, !dbg !89
  %1345 = bitcast i32 %1344 to float, !dbg !89
  %1346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1344, i32 16, i32 31), !dbg !89
  %1347 = bitcast i32 %1346 to float, !dbg !89
  %1348 = fcmp ogt float %1345, %1347, !dbg !81
  %1349 = fcmp uno float %1345, 0.000000e+00, !dbg !90
  %1350 = or i1 %1349, %1348, !dbg !91
  %1351 = select i1 %1350, float %1345, float %1347, !dbg !92
  %1352 = bitcast float %1351 to i32, !dbg !89
  %1353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1352, i32 8, i32 31), !dbg !89
  %1354 = bitcast i32 %1353 to float, !dbg !89
  %1355 = fcmp ogt float %1351, %1354, !dbg !81
  %1356 = fcmp uno float %1351, 0.000000e+00, !dbg !90
  %1357 = or i1 %1355, %1356, !dbg !91
  %1358 = select i1 %1357, float %1351, float %1354, !dbg !92
  %1359 = bitcast float %1358 to i32, !dbg !89
  %1360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1359, i32 4, i32 31), !dbg !89
  %1361 = bitcast i32 %1360 to float, !dbg !89
  %1362 = fcmp ogt float %1358, %1361, !dbg !81
  %1363 = fcmp uno float %1358, 0.000000e+00, !dbg !90
  %1364 = or i1 %1362, %1363, !dbg !91
  %1365 = select i1 %1364, float %1358, float %1361, !dbg !92
  %1366 = bitcast float %1365 to i32, !dbg !89
  %1367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1366, i32 2, i32 31), !dbg !89
  %1368 = bitcast i32 %1367 to float, !dbg !89
  %1369 = fcmp ogt float %1365, %1368, !dbg !81
  %1370 = fcmp uno float %1365, 0.000000e+00, !dbg !90
  %1371 = or i1 %1369, %1370, !dbg !91
  %1372 = select i1 %1371, float %1365, float %1368, !dbg !92
  %1373 = bitcast float %1372 to i32, !dbg !89
  %1374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1373, i32 1, i32 31), !dbg !89
  %1375 = bitcast i32 %1374 to float, !dbg !89
  %1376 = fcmp ogt float %1372, %1375, !dbg !81
  %1377 = fcmp uno float %1372, 0.000000e+00, !dbg !90
  %1378 = or i1 %1376, %1377, !dbg !91
  %1379 = select i1 %1378, i32 %1373, i32 %1374, !dbg !92
  %1380 = insertelement <1 x i32> poison, i32 %1379, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1155, <1 x i32> %1380, i1 %1191) #5, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %1381 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !89
  %1382 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1383 = bitcast float %1381 to i32, !dbg !93
  %1384 = bitcast float %1382 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1383, i32 %1384, i1 true) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1385 = load float, ptr addrspace(3) %1198, align 4, !dbg !93
  %1386 = sext i32 %1002 to i64, !dbg !94
  %1387 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1386, !dbg !94
  %1388 = fptrunc float %1199 to bfloat, !dbg !88
  %1389 = and i32 %15, 1022, !dbg !88
  %1390 = icmp eq i32 %1389, 0, !dbg !88
  %1391 = bitcast bfloat %1388 to i16, !dbg !88
  %1392 = and i1 %1390, %1003, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1391, ptr addrspace(1) %1387, i1 %1392) #5, !dbg !88
  %1393 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1386, !dbg !95
  %1394 = fptrunc float %1385 to bfloat, !dbg !93
  %1395 = bitcast bfloat %1394 to i16, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1395, ptr addrspace(1) %1393, i1 %1392) #5, !dbg !93
  %.inv4 = fcmp oge float %1194, 0.000000e+00, !dbg !96
  %1396 = select i1 %.inv4, float 0.000000e+00, float %1194, !dbg !96
  %.inv5 = fcmp oge float %1195, 0.000000e+00, !dbg !96
  %1397 = select i1 %.inv5, float 0.000000e+00, float %1195, !dbg !96
  %1398 = fsub float 0.000000e+00, %1396, !dbg !98
  %1399 = fsub float 0.000000e+00, %1397, !dbg !98
  %.inv6 = fcmp ole float %1381, 0.000000e+00, !dbg !99
  %1400 = select i1 %.inv6, float 0.000000e+00, float %1381, !dbg !99
  %.inv7 = fcmp ole float %1382, 0.000000e+00, !dbg !99
  %1401 = select i1 %.inv7, float 0.000000e+00, float %1382, !dbg !99
  %1402 = fcmp ogt float %1398, %1400, !dbg !101
  %1403 = fcmp ogt float %1399, %1401, !dbg !101
  %1404 = fcmp uno float %1398, 0.000000e+00, !dbg !103
  %1405 = fcmp uno float %1399, 0.000000e+00, !dbg !103
  %1406 = or i1 %1404, %1402, !dbg !104
  %1407 = or i1 %1405, %1403, !dbg !104
  %1408 = select i1 %1406, float %1398, float %1400, !dbg !105
  %1409 = select i1 %1407, float %1399, float %1401, !dbg !105
  %1410 = fmul float %1408, 0x3F80204080000000, !dbg !106
  %1411 = fmul float %1409, 0x3F80204080000000, !dbg !106
  %1412 = fcmp ogt float %1410, 0x3EE4F8B580000000, !dbg !107
  %1413 = fcmp ogt float %1411, 0x3EE4F8B580000000, !dbg !107
  %1414 = fcmp uno float %1410, 0.000000e+00, !dbg !109
  %1415 = fcmp uno float %1411, 0.000000e+00, !dbg !109
  %1416 = or i1 %1412, %1414, !dbg !110
  %1417 = or i1 %1413, %1415, !dbg !110
  %1418 = select i1 %1416, float %1410, float 0x3EE4F8B580000000, !dbg !111
  %1419 = select i1 %1417, float %1411, float 0x3EE4F8B580000000, !dbg !111
  %1420 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1418), !dbg !112
  %1421 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1419), !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !113
  %1422 = bitcast float %1420 to <1 x i32>, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1422, i1 true) #5, !dbg !113
  %1423 = bitcast float %1421 to <1 x i32>, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1423, i1 true) #5, !dbg !113
  tail call void @llvm.nvvm.barrier0(), !dbg !113
  %1424 = lshr exact i32 %16, 6, !dbg !113
  %1425 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1424, !dbg !113
  %1426 = load float, ptr addrspace(3) %1425, align 8, !dbg !113
  br label %1427, !dbg !114

1427:                                             ; preds = %999, %__nv_tanhf.exit338
  %1428 = phi i1 [ true, %999 ], [ false, %__nv_tanhf.exit338 ]
  %indvars.iv675 = phi i64 [ 0, %999 ], [ 8192, %__nv_tanhf.exit338 ]
  %1429 = or disjoint i64 %indvars.iv675, %111, !dbg !115
  %1430 = icmp samesign ult i64 %1429, 12288, !dbg !116
  %1431 = trunc nuw nsw i64 %1429 to i32, !dbg !117
  %1432 = add i32 %70, %1431, !dbg !117
  %1433 = trunc nuw nsw i64 %indvars.iv675 to i32, !dbg !117
  %1434 = add i32 %87, %1433, !dbg !117
  %1435 = add i32 %88, %1433, !dbg !117
  %1436 = add i32 %89, %1433, !dbg !117
  %1437 = sext i32 %1432 to i64, !dbg !118
  %1438 = getelementptr float, ptr addrspace(1) %5, i64 %1437, !dbg !118
  %1439 = sext i32 %1434 to i64, !dbg !118
  %1440 = getelementptr float, ptr addrspace(1) %5, i64 %1439, !dbg !118
  %1441 = sext i32 %1435 to i64, !dbg !118
  %1442 = getelementptr float, ptr addrspace(1) %5, i64 %1441, !dbg !118
  %1443 = sext i32 %1436 to i64, !dbg !118
  %1444 = getelementptr float, ptr addrspace(1) %5, i64 %1443, !dbg !118
  %1445 = and i1 %20, %1430, !dbg !119
  %1446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1438, i1 %1445) #5, !dbg !120
  %1447 = extractvalue { i32, i32, i32, i32 } %1446, 0, !dbg !120
  %1448 = extractvalue { i32, i32, i32, i32 } %1446, 1, !dbg !120
  %1449 = extractvalue { i32, i32, i32, i32 } %1446, 2, !dbg !120
  %1450 = extractvalue { i32, i32, i32, i32 } %1446, 3, !dbg !120
  %1451 = bitcast i32 %1447 to float, !dbg !120
  %1452 = bitcast i32 %1448 to float, !dbg !120
  %1453 = bitcast i32 %1449 to float, !dbg !120
  %1454 = bitcast i32 %1450 to float, !dbg !120
  %1455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1440, i1 %1445) #5, !dbg !120
  %1456 = extractvalue { i32, i32, i32, i32 } %1455, 0, !dbg !120
  %1457 = extractvalue { i32, i32, i32, i32 } %1455, 1, !dbg !120
  %1458 = extractvalue { i32, i32, i32, i32 } %1455, 2, !dbg !120
  %1459 = extractvalue { i32, i32, i32, i32 } %1455, 3, !dbg !120
  %1460 = bitcast i32 %1456 to float, !dbg !120
  %1461 = bitcast i32 %1457 to float, !dbg !120
  %1462 = bitcast i32 %1458 to float, !dbg !120
  %1463 = bitcast i32 %1459 to float, !dbg !120
  %1464 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1442, i1 %1445) #5, !dbg !120
  %1465 = extractvalue { i32, i32, i32, i32 } %1464, 0, !dbg !120
  %1466 = extractvalue { i32, i32, i32, i32 } %1464, 1, !dbg !120
  %1467 = extractvalue { i32, i32, i32, i32 } %1464, 2, !dbg !120
  %1468 = extractvalue { i32, i32, i32, i32 } %1464, 3, !dbg !120
  %1469 = bitcast i32 %1465 to float, !dbg !120
  %1470 = bitcast i32 %1466 to float, !dbg !120
  %1471 = bitcast i32 %1467 to float, !dbg !120
  %1472 = bitcast i32 %1468 to float, !dbg !120
  %1473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1444, i1 %1445) #5, !dbg !120
  %1474 = extractvalue { i32, i32, i32, i32 } %1473, 0, !dbg !120
  %1475 = extractvalue { i32, i32, i32, i32 } %1473, 1, !dbg !120
  %1476 = extractvalue { i32, i32, i32, i32 } %1473, 2, !dbg !120
  %1477 = extractvalue { i32, i32, i32, i32 } %1473, 3, !dbg !120
  %1478 = bitcast i32 %1474 to float, !dbg !120
  %1479 = bitcast i32 %1475 to float, !dbg !120
  %1480 = bitcast i32 %1476 to float, !dbg !120
  %1481 = bitcast i32 %1477 to float, !dbg !120
  %1482 = fmul float %1451, 5.000000e-01, !dbg !121
  %1483 = fmul float %1452, 5.000000e-01, !dbg !121
  %1484 = fmul float %1453, 5.000000e-01, !dbg !121
  %1485 = fmul float %1454, 5.000000e-01, !dbg !121
  %1486 = fmul float %1460, 5.000000e-01, !dbg !121
  %1487 = fmul float %1461, 5.000000e-01, !dbg !121
  %1488 = fmul float %1462, 5.000000e-01, !dbg !121
  %1489 = fmul float %1463, 5.000000e-01, !dbg !121
  %1490 = fmul float %1469, 5.000000e-01, !dbg !121
  %1491 = fmul float %1470, 5.000000e-01, !dbg !121
  %1492 = fmul float %1471, 5.000000e-01, !dbg !121
  %1493 = fmul float %1472, 5.000000e-01, !dbg !121
  %1494 = fmul float %1478, 5.000000e-01, !dbg !121
  %1495 = fmul float %1479, 5.000000e-01, !dbg !121
  %1496 = fmul float %1480, 5.000000e-01, !dbg !121
  %1497 = fmul float %1481, 5.000000e-01, !dbg !121
  %1498 = fmul float %1451, %1451, !dbg !122
  %1499 = fmul float %1452, %1452, !dbg !122
  %1500 = fmul float %1453, %1453, !dbg !122
  %1501 = fmul float %1454, %1454, !dbg !122
  %1502 = fmul float %1460, %1460, !dbg !122
  %1503 = fmul float %1461, %1461, !dbg !122
  %1504 = fmul float %1462, %1462, !dbg !122
  %1505 = fmul float %1463, %1463, !dbg !122
  %1506 = fmul float %1469, %1469, !dbg !122
  %1507 = fmul float %1470, %1470, !dbg !122
  %1508 = fmul float %1471, %1471, !dbg !122
  %1509 = fmul float %1472, %1472, !dbg !122
  %1510 = fmul float %1478, %1478, !dbg !122
  %1511 = fmul float %1479, %1479, !dbg !122
  %1512 = fmul float %1480, %1480, !dbg !122
  %1513 = fmul float %1481, %1481, !dbg !122
  %1514 = fmul float %1498, %1451, !dbg !123
  %1515 = fmul float %1499, %1452, !dbg !123
  %1516 = fmul float %1500, %1453, !dbg !123
  %1517 = fmul float %1501, %1454, !dbg !123
  %1518 = fmul float %1502, %1460, !dbg !123
  %1519 = fmul float %1503, %1461, !dbg !123
  %1520 = fmul float %1504, %1462, !dbg !123
  %1521 = fmul float %1505, %1463, !dbg !123
  %1522 = fmul float %1506, %1469, !dbg !123
  %1523 = fmul float %1507, %1470, !dbg !123
  %1524 = fmul float %1508, %1471, !dbg !123
  %1525 = fmul float %1509, %1472, !dbg !123
  %1526 = fmul float %1510, %1478, !dbg !123
  %1527 = fmul float %1511, %1479, !dbg !123
  %1528 = fmul float %1512, %1480, !dbg !123
  %1529 = fmul float %1513, %1481, !dbg !123
  %1530 = fmul float %1514, 0x3FA6E4E260000000, !dbg !124
  %1531 = fmul float %1515, 0x3FA6E4E260000000, !dbg !124
  %1532 = fmul float %1516, 0x3FA6E4E260000000, !dbg !124
  %1533 = fmul float %1517, 0x3FA6E4E260000000, !dbg !124
  %1534 = fmul float %1518, 0x3FA6E4E260000000, !dbg !124
  %1535 = fmul float %1519, 0x3FA6E4E260000000, !dbg !124
  %1536 = fmul float %1520, 0x3FA6E4E260000000, !dbg !124
  %1537 = fmul float %1521, 0x3FA6E4E260000000, !dbg !124
  %1538 = fmul float %1522, 0x3FA6E4E260000000, !dbg !124
  %1539 = fmul float %1523, 0x3FA6E4E260000000, !dbg !124
  %1540 = fmul float %1524, 0x3FA6E4E260000000, !dbg !124
  %1541 = fmul float %1525, 0x3FA6E4E260000000, !dbg !124
  %1542 = fmul float %1526, 0x3FA6E4E260000000, !dbg !124
  %1543 = fmul float %1527, 0x3FA6E4E260000000, !dbg !124
  %1544 = fmul float %1528, 0x3FA6E4E260000000, !dbg !124
  %1545 = fmul float %1529, 0x3FA6E4E260000000, !dbg !124
  %1546 = fadd float %1530, %1451, !dbg !125
  %1547 = fadd float %1531, %1452, !dbg !125
  %1548 = fadd float %1532, %1453, !dbg !125
  %1549 = fadd float %1533, %1454, !dbg !125
  %1550 = fadd float %1534, %1460, !dbg !125
  %1551 = fadd float %1535, %1461, !dbg !125
  %1552 = fadd float %1536, %1462, !dbg !125
  %1553 = fadd float %1537, %1463, !dbg !125
  %1554 = fadd float %1538, %1469, !dbg !125
  %1555 = fadd float %1539, %1470, !dbg !125
  %1556 = fadd float %1540, %1471, !dbg !125
  %1557 = fadd float %1541, %1472, !dbg !125
  %1558 = fadd float %1542, %1478, !dbg !125
  %1559 = fadd float %1543, %1479, !dbg !125
  %1560 = fadd float %1544, %1480, !dbg !125
  %1561 = fadd float %1545, %1481, !dbg !125
  %1562 = fmul float %1546, 0x3FE9884540000000, !dbg !126
  %1563 = fmul float %1547, 0x3FE9884540000000, !dbg !126
  %1564 = fmul float %1548, 0x3FE9884540000000, !dbg !126
  %1565 = fmul float %1549, 0x3FE9884540000000, !dbg !126
  %1566 = fmul float %1550, 0x3FE9884540000000, !dbg !126
  %1567 = fmul float %1551, 0x3FE9884540000000, !dbg !126
  %1568 = fmul float %1552, 0x3FE9884540000000, !dbg !126
  %1569 = fmul float %1553, 0x3FE9884540000000, !dbg !126
  %1570 = fmul float %1554, 0x3FE9884540000000, !dbg !126
  %1571 = fmul float %1555, 0x3FE9884540000000, !dbg !126
  %1572 = fmul float %1556, 0x3FE9884540000000, !dbg !126
  %1573 = fmul float %1557, 0x3FE9884540000000, !dbg !126
  %1574 = fmul float %1558, 0x3FE9884540000000, !dbg !126
  %1575 = fmul float %1559, 0x3FE9884540000000, !dbg !126
  %1576 = fmul float %1560, 0x3FE9884540000000, !dbg !126
  %1577 = fmul float %1561, 0x3FE9884540000000, !dbg !126
  %1578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i = icmp eq i32 %1578, 0, !dbg !127
  %1579 = tail call float @llvm.nvvm.fabs.ftz.f(float %1562) #5, !dbg !127
  %1580 = tail call float @llvm.nvvm.fabs.f(float %1562) #5, !dbg !127
  %.01.i = select i1 %.not.i, float %1580, float %1579, !dbg !127
  %1581 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !127
  br i1 %1581, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !127

__internal_fmad.exit1.i:                          ; preds = %1427
  %1582 = fmul float %.01.i, 0x4007154760000000, !dbg !127
  %1583 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1582) #5, !dbg !127
  %1584 = fadd float %1583, 1.000000e+00, !dbg !127
  %1585 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1584) #6, !dbg !127, !srcloc !62
  %1586 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i = icmp eq i32 %1586, 0, !dbg !127
  %1587 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1585, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1588 = tail call float @llvm.nvvm.fma.rn.f(float %1585, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i = select i1 %.not6.i, float %1588, float %1587, !dbg !127
  %1589 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !127
  %s.0.i = select i1 %1589, float 1.000000e+00, float %.03.i, !dbg !127
  %1590 = bitcast float %s.0.i to i32, !dbg !127
  %1591 = bitcast float %1562 to i32, !dbg !127
  %1592 = and i32 %1591, -2147483648, !dbg !127
  %1593 = or i32 %1592, %1590, !dbg !127
  %1594 = bitcast i32 %1593 to float, !dbg !127
  br label %__nv_tanhf.exit, !dbg !127

__internal_fmad.exit3.i:                          ; preds = %1427
  %1595 = fmul float %1562, %1562, !dbg !127
  %1596 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i = icmp eq i32 %1596, 0, !dbg !127
  %1597 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1595, float 0xBFAAC795C0000000) #5, !dbg !127
  %1598 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1595, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i = select i1 %.not1.i, float %1598, float %1597, !dbg !127
  %1599 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i = icmp eq i32 %1599, 0, !dbg !127
  %1600 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %1595, float 0x3FC10B2820000000) #5, !dbg !127
  %1601 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %1595, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i = select i1 %.not2.i, float %1601, float %1600, !dbg !127
  %1602 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i = icmp eq i32 %1602, 0, !dbg !127
  %1603 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1595, float 0xBFD5553DA0000000) #5, !dbg !127
  %1604 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1595, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i = select i1 %.not3.i, float %1604, float %1603, !dbg !127
  %1605 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i = icmp eq i32 %1605, 0, !dbg !127
  %1606 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %1595, float 0.000000e+00) #5, !dbg !127
  %1607 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %1595, float 0.000000e+00) #5, !dbg !127
  %.04.i = select i1 %.not4.i, float %1607, float %1606, !dbg !127
  %1608 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i = icmp eq i32 %1608, 0, !dbg !127
  %1609 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %1562, float %1562) #5, !dbg !127
  %1610 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %1562, float %1562) #5, !dbg !127
  %.02.i = select i1 %.not5.i, float %1610, float %1609, !dbg !127
  br label %__nv_tanhf.exit, !dbg !127

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %1594, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !127
  %1611 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i54 = icmp eq i32 %1611, 0, !dbg !127
  %1612 = tail call float @llvm.nvvm.fabs.ftz.f(float %1563) #5, !dbg !127
  %1613 = tail call float @llvm.nvvm.fabs.f(float %1563) #5, !dbg !127
  %.01.i55 = select i1 %.not.i54, float %1613, float %1612, !dbg !127
  %1614 = fcmp ult float %.01.i55, 0x3FE3333340000000, !dbg !127
  br i1 %1614, label %__internal_fmad.exit3.i61, label %__internal_fmad.exit1.i56, !dbg !127

__internal_fmad.exit1.i56:                        ; preds = %__nv_tanhf.exit
  %1615 = fmul float %.01.i55, 0x4007154760000000, !dbg !127
  %1616 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1615) #5, !dbg !127
  %1617 = fadd float %1616, 1.000000e+00, !dbg !127
  %1618 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1617) #6, !dbg !127, !srcloc !62
  %1619 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i57 = icmp eq i32 %1619, 0, !dbg !127
  %1620 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1618, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1621 = tail call float @llvm.nvvm.fma.rn.f(float %1618, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i58 = select i1 %.not6.i57, float %1621, float %1620, !dbg !127
  %1622 = fcmp oge float %.01.i55, 0x4022059680000000, !dbg !127
  %s.0.i59 = select i1 %1622, float 1.000000e+00, float %.03.i58, !dbg !127
  %1623 = bitcast float %s.0.i59 to i32, !dbg !127
  %1624 = bitcast float %1563 to i32, !dbg !127
  %1625 = and i32 %1624, -2147483648, !dbg !127
  %1626 = or i32 %1625, %1623, !dbg !127
  %1627 = bitcast i32 %1626 to float, !dbg !127
  br label %__nv_tanhf.exit72, !dbg !127

__internal_fmad.exit3.i61:                        ; preds = %__nv_tanhf.exit
  %1628 = fmul float %1563, %1563, !dbg !127
  %1629 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i62 = icmp eq i32 %1629, 0, !dbg !127
  %1630 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1628, float 0xBFAAC795C0000000) #5, !dbg !127
  %1631 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1628, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i63 = select i1 %.not1.i62, float %1631, float %1630, !dbg !127
  %1632 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i64 = icmp eq i32 %1632, 0, !dbg !127
  %1633 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i63, float %1628, float 0x3FC10B2820000000) #5, !dbg !127
  %1634 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i63, float %1628, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i65 = select i1 %.not2.i64, float %1634, float %1633, !dbg !127
  %1635 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i66 = icmp eq i32 %1635, 0, !dbg !127
  %1636 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i65, float %1628, float 0xBFD5553DA0000000) #5, !dbg !127
  %1637 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i65, float %1628, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i67 = select i1 %.not3.i66, float %1637, float %1636, !dbg !127
  %1638 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i68 = icmp eq i32 %1638, 0, !dbg !127
  %1639 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i67, float %1628, float 0.000000e+00) #5, !dbg !127
  %1640 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i67, float %1628, float 0.000000e+00) #5, !dbg !127
  %.04.i69 = select i1 %.not4.i68, float %1640, float %1639, !dbg !127
  %1641 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i70 = icmp eq i32 %1641, 0, !dbg !127
  %1642 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i69, float %1563, float %1563) #5, !dbg !127
  %1643 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i69, float %1563, float %1563) #5, !dbg !127
  %.02.i71 = select i1 %.not5.i70, float %1643, float %1642, !dbg !127
  br label %__nv_tanhf.exit72, !dbg !127

__nv_tanhf.exit72:                                ; preds = %__internal_fmad.exit1.i56, %__internal_fmad.exit3.i61
  %s.1.i60 = phi float [ %1627, %__internal_fmad.exit1.i56 ], [ %.02.i71, %__internal_fmad.exit3.i61 ], !dbg !127
  %1644 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i73 = icmp eq i32 %1644, 0, !dbg !127
  %1645 = tail call float @llvm.nvvm.fabs.ftz.f(float %1564) #5, !dbg !127
  %1646 = tail call float @llvm.nvvm.fabs.f(float %1564) #5, !dbg !127
  %.01.i74 = select i1 %.not.i73, float %1646, float %1645, !dbg !127
  %1647 = fcmp ult float %.01.i74, 0x3FE3333340000000, !dbg !127
  br i1 %1647, label %__internal_fmad.exit3.i80, label %__internal_fmad.exit1.i75, !dbg !127

__internal_fmad.exit1.i75:                        ; preds = %__nv_tanhf.exit72
  %1648 = fmul float %.01.i74, 0x4007154760000000, !dbg !127
  %1649 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1648) #5, !dbg !127
  %1650 = fadd float %1649, 1.000000e+00, !dbg !127
  %1651 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1650) #6, !dbg !127, !srcloc !62
  %1652 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i76 = icmp eq i32 %1652, 0, !dbg !127
  %1653 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1651, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1654 = tail call float @llvm.nvvm.fma.rn.f(float %1651, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i77 = select i1 %.not6.i76, float %1654, float %1653, !dbg !127
  %1655 = fcmp oge float %.01.i74, 0x4022059680000000, !dbg !127
  %s.0.i78 = select i1 %1655, float 1.000000e+00, float %.03.i77, !dbg !127
  %1656 = bitcast float %s.0.i78 to i32, !dbg !127
  %1657 = bitcast float %1564 to i32, !dbg !127
  %1658 = and i32 %1657, -2147483648, !dbg !127
  %1659 = or i32 %1658, %1656, !dbg !127
  %1660 = bitcast i32 %1659 to float, !dbg !127
  br label %__nv_tanhf.exit91, !dbg !127

__internal_fmad.exit3.i80:                        ; preds = %__nv_tanhf.exit72
  %1661 = fmul float %1564, %1564, !dbg !127
  %1662 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i81 = icmp eq i32 %1662, 0, !dbg !127
  %1663 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1661, float 0xBFAAC795C0000000) #5, !dbg !127
  %1664 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1661, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i82 = select i1 %.not1.i81, float %1664, float %1663, !dbg !127
  %1665 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i83 = icmp eq i32 %1665, 0, !dbg !127
  %1666 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i82, float %1661, float 0x3FC10B2820000000) #5, !dbg !127
  %1667 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i82, float %1661, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i84 = select i1 %.not2.i83, float %1667, float %1666, !dbg !127
  %1668 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i85 = icmp eq i32 %1668, 0, !dbg !127
  %1669 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i84, float %1661, float 0xBFD5553DA0000000) #5, !dbg !127
  %1670 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i84, float %1661, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i86 = select i1 %.not3.i85, float %1670, float %1669, !dbg !127
  %1671 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i87 = icmp eq i32 %1671, 0, !dbg !127
  %1672 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i86, float %1661, float 0.000000e+00) #5, !dbg !127
  %1673 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i86, float %1661, float 0.000000e+00) #5, !dbg !127
  %.04.i88 = select i1 %.not4.i87, float %1673, float %1672, !dbg !127
  %1674 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i89 = icmp eq i32 %1674, 0, !dbg !127
  %1675 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i88, float %1564, float %1564) #5, !dbg !127
  %1676 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i88, float %1564, float %1564) #5, !dbg !127
  %.02.i90 = select i1 %.not5.i89, float %1676, float %1675, !dbg !127
  br label %__nv_tanhf.exit91, !dbg !127

__nv_tanhf.exit91:                                ; preds = %__internal_fmad.exit1.i75, %__internal_fmad.exit3.i80
  %s.1.i79 = phi float [ %1660, %__internal_fmad.exit1.i75 ], [ %.02.i90, %__internal_fmad.exit3.i80 ], !dbg !127
  %1677 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i92 = icmp eq i32 %1677, 0, !dbg !127
  %1678 = tail call float @llvm.nvvm.fabs.ftz.f(float %1565) #5, !dbg !127
  %1679 = tail call float @llvm.nvvm.fabs.f(float %1565) #5, !dbg !127
  %.01.i93 = select i1 %.not.i92, float %1679, float %1678, !dbg !127
  %1680 = fcmp ult float %.01.i93, 0x3FE3333340000000, !dbg !127
  br i1 %1680, label %__internal_fmad.exit3.i99, label %__internal_fmad.exit1.i94, !dbg !127

__internal_fmad.exit1.i94:                        ; preds = %__nv_tanhf.exit91
  %1681 = fmul float %.01.i93, 0x4007154760000000, !dbg !127
  %1682 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1681) #5, !dbg !127
  %1683 = fadd float %1682, 1.000000e+00, !dbg !127
  %1684 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1683) #6, !dbg !127, !srcloc !62
  %1685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i95 = icmp eq i32 %1685, 0, !dbg !127
  %1686 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1684, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1687 = tail call float @llvm.nvvm.fma.rn.f(float %1684, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i96 = select i1 %.not6.i95, float %1687, float %1686, !dbg !127
  %1688 = fcmp oge float %.01.i93, 0x4022059680000000, !dbg !127
  %s.0.i97 = select i1 %1688, float 1.000000e+00, float %.03.i96, !dbg !127
  %1689 = bitcast float %s.0.i97 to i32, !dbg !127
  %1690 = bitcast float %1565 to i32, !dbg !127
  %1691 = and i32 %1690, -2147483648, !dbg !127
  %1692 = or i32 %1691, %1689, !dbg !127
  %1693 = bitcast i32 %1692 to float, !dbg !127
  br label %__nv_tanhf.exit110, !dbg !127

__internal_fmad.exit3.i99:                        ; preds = %__nv_tanhf.exit91
  %1694 = fmul float %1565, %1565, !dbg !127
  %1695 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i100 = icmp eq i32 %1695, 0, !dbg !127
  %1696 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1694, float 0xBFAAC795C0000000) #5, !dbg !127
  %1697 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1694, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i101 = select i1 %.not1.i100, float %1697, float %1696, !dbg !127
  %1698 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i102 = icmp eq i32 %1698, 0, !dbg !127
  %1699 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i101, float %1694, float 0x3FC10B2820000000) #5, !dbg !127
  %1700 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i101, float %1694, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i103 = select i1 %.not2.i102, float %1700, float %1699, !dbg !127
  %1701 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i104 = icmp eq i32 %1701, 0, !dbg !127
  %1702 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i103, float %1694, float 0xBFD5553DA0000000) #5, !dbg !127
  %1703 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i103, float %1694, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i105 = select i1 %.not3.i104, float %1703, float %1702, !dbg !127
  %1704 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i106 = icmp eq i32 %1704, 0, !dbg !127
  %1705 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i105, float %1694, float 0.000000e+00) #5, !dbg !127
  %1706 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i105, float %1694, float 0.000000e+00) #5, !dbg !127
  %.04.i107 = select i1 %.not4.i106, float %1706, float %1705, !dbg !127
  %1707 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i108 = icmp eq i32 %1707, 0, !dbg !127
  %1708 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i107, float %1565, float %1565) #5, !dbg !127
  %1709 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i107, float %1565, float %1565) #5, !dbg !127
  %.02.i109 = select i1 %.not5.i108, float %1709, float %1708, !dbg !127
  br label %__nv_tanhf.exit110, !dbg !127

__nv_tanhf.exit110:                               ; preds = %__internal_fmad.exit1.i94, %__internal_fmad.exit3.i99
  %s.1.i98 = phi float [ %1693, %__internal_fmad.exit1.i94 ], [ %.02.i109, %__internal_fmad.exit3.i99 ], !dbg !127
  %1710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i111 = icmp eq i32 %1710, 0, !dbg !127
  %1711 = tail call float @llvm.nvvm.fabs.ftz.f(float %1566) #5, !dbg !127
  %1712 = tail call float @llvm.nvvm.fabs.f(float %1566) #5, !dbg !127
  %.01.i112 = select i1 %.not.i111, float %1712, float %1711, !dbg !127
  %1713 = fcmp ult float %.01.i112, 0x3FE3333340000000, !dbg !127
  br i1 %1713, label %__internal_fmad.exit3.i118, label %__internal_fmad.exit1.i113, !dbg !127

__internal_fmad.exit1.i113:                       ; preds = %__nv_tanhf.exit110
  %1714 = fmul float %.01.i112, 0x4007154760000000, !dbg !127
  %1715 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1714) #5, !dbg !127
  %1716 = fadd float %1715, 1.000000e+00, !dbg !127
  %1717 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1716) #6, !dbg !127, !srcloc !62
  %1718 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i114 = icmp eq i32 %1718, 0, !dbg !127
  %1719 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1717, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1720 = tail call float @llvm.nvvm.fma.rn.f(float %1717, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i115 = select i1 %.not6.i114, float %1720, float %1719, !dbg !127
  %1721 = fcmp oge float %.01.i112, 0x4022059680000000, !dbg !127
  %s.0.i116 = select i1 %1721, float 1.000000e+00, float %.03.i115, !dbg !127
  %1722 = bitcast float %s.0.i116 to i32, !dbg !127
  %1723 = bitcast float %1566 to i32, !dbg !127
  %1724 = and i32 %1723, -2147483648, !dbg !127
  %1725 = or i32 %1724, %1722, !dbg !127
  %1726 = bitcast i32 %1725 to float, !dbg !127
  br label %__nv_tanhf.exit129, !dbg !127

__internal_fmad.exit3.i118:                       ; preds = %__nv_tanhf.exit110
  %1727 = fmul float %1566, %1566, !dbg !127
  %1728 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i119 = icmp eq i32 %1728, 0, !dbg !127
  %1729 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1727, float 0xBFAAC795C0000000) #5, !dbg !127
  %1730 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1727, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i120 = select i1 %.not1.i119, float %1730, float %1729, !dbg !127
  %1731 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i121 = icmp eq i32 %1731, 0, !dbg !127
  %1732 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i120, float %1727, float 0x3FC10B2820000000) #5, !dbg !127
  %1733 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i120, float %1727, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i122 = select i1 %.not2.i121, float %1733, float %1732, !dbg !127
  %1734 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i123 = icmp eq i32 %1734, 0, !dbg !127
  %1735 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i122, float %1727, float 0xBFD5553DA0000000) #5, !dbg !127
  %1736 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i122, float %1727, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i124 = select i1 %.not3.i123, float %1736, float %1735, !dbg !127
  %1737 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i125 = icmp eq i32 %1737, 0, !dbg !127
  %1738 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i124, float %1727, float 0.000000e+00) #5, !dbg !127
  %1739 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i124, float %1727, float 0.000000e+00) #5, !dbg !127
  %.04.i126 = select i1 %.not4.i125, float %1739, float %1738, !dbg !127
  %1740 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i127 = icmp eq i32 %1740, 0, !dbg !127
  %1741 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i126, float %1566, float %1566) #5, !dbg !127
  %1742 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i126, float %1566, float %1566) #5, !dbg !127
  %.02.i128 = select i1 %.not5.i127, float %1742, float %1741, !dbg !127
  br label %__nv_tanhf.exit129, !dbg !127

__nv_tanhf.exit129:                               ; preds = %__internal_fmad.exit1.i113, %__internal_fmad.exit3.i118
  %s.1.i117 = phi float [ %1726, %__internal_fmad.exit1.i113 ], [ %.02.i128, %__internal_fmad.exit3.i118 ], !dbg !127
  %1743 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i130 = icmp eq i32 %1743, 0, !dbg !127
  %1744 = tail call float @llvm.nvvm.fabs.ftz.f(float %1567) #5, !dbg !127
  %1745 = tail call float @llvm.nvvm.fabs.f(float %1567) #5, !dbg !127
  %.01.i131 = select i1 %.not.i130, float %1745, float %1744, !dbg !127
  %1746 = fcmp ult float %.01.i131, 0x3FE3333340000000, !dbg !127
  br i1 %1746, label %__internal_fmad.exit3.i137, label %__internal_fmad.exit1.i132, !dbg !127

__internal_fmad.exit1.i132:                       ; preds = %__nv_tanhf.exit129
  %1747 = fmul float %.01.i131, 0x4007154760000000, !dbg !127
  %1748 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1747) #5, !dbg !127
  %1749 = fadd float %1748, 1.000000e+00, !dbg !127
  %1750 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1749) #6, !dbg !127, !srcloc !62
  %1751 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i133 = icmp eq i32 %1751, 0, !dbg !127
  %1752 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1750, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1753 = tail call float @llvm.nvvm.fma.rn.f(float %1750, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i134 = select i1 %.not6.i133, float %1753, float %1752, !dbg !127
  %1754 = fcmp oge float %.01.i131, 0x4022059680000000, !dbg !127
  %s.0.i135 = select i1 %1754, float 1.000000e+00, float %.03.i134, !dbg !127
  %1755 = bitcast float %s.0.i135 to i32, !dbg !127
  %1756 = bitcast float %1567 to i32, !dbg !127
  %1757 = and i32 %1756, -2147483648, !dbg !127
  %1758 = or i32 %1757, %1755, !dbg !127
  %1759 = bitcast i32 %1758 to float, !dbg !127
  br label %__nv_tanhf.exit148, !dbg !127

__internal_fmad.exit3.i137:                       ; preds = %__nv_tanhf.exit129
  %1760 = fmul float %1567, %1567, !dbg !127
  %1761 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i138 = icmp eq i32 %1761, 0, !dbg !127
  %1762 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1760, float 0xBFAAC795C0000000) #5, !dbg !127
  %1763 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1760, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i139 = select i1 %.not1.i138, float %1763, float %1762, !dbg !127
  %1764 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i140 = icmp eq i32 %1764, 0, !dbg !127
  %1765 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i139, float %1760, float 0x3FC10B2820000000) #5, !dbg !127
  %1766 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i139, float %1760, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i141 = select i1 %.not2.i140, float %1766, float %1765, !dbg !127
  %1767 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i142 = icmp eq i32 %1767, 0, !dbg !127
  %1768 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i141, float %1760, float 0xBFD5553DA0000000) #5, !dbg !127
  %1769 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i141, float %1760, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i143 = select i1 %.not3.i142, float %1769, float %1768, !dbg !127
  %1770 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i144 = icmp eq i32 %1770, 0, !dbg !127
  %1771 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i143, float %1760, float 0.000000e+00) #5, !dbg !127
  %1772 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i143, float %1760, float 0.000000e+00) #5, !dbg !127
  %.04.i145 = select i1 %.not4.i144, float %1772, float %1771, !dbg !127
  %1773 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i146 = icmp eq i32 %1773, 0, !dbg !127
  %1774 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i145, float %1567, float %1567) #5, !dbg !127
  %1775 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i145, float %1567, float %1567) #5, !dbg !127
  %.02.i147 = select i1 %.not5.i146, float %1775, float %1774, !dbg !127
  br label %__nv_tanhf.exit148, !dbg !127

__nv_tanhf.exit148:                               ; preds = %__internal_fmad.exit1.i132, %__internal_fmad.exit3.i137
  %s.1.i136 = phi float [ %1759, %__internal_fmad.exit1.i132 ], [ %.02.i147, %__internal_fmad.exit3.i137 ], !dbg !127
  %1776 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i149 = icmp eq i32 %1776, 0, !dbg !127
  %1777 = tail call float @llvm.nvvm.fabs.ftz.f(float %1568) #5, !dbg !127
  %1778 = tail call float @llvm.nvvm.fabs.f(float %1568) #5, !dbg !127
  %.01.i150 = select i1 %.not.i149, float %1778, float %1777, !dbg !127
  %1779 = fcmp ult float %.01.i150, 0x3FE3333340000000, !dbg !127
  br i1 %1779, label %__internal_fmad.exit3.i156, label %__internal_fmad.exit1.i151, !dbg !127

__internal_fmad.exit1.i151:                       ; preds = %__nv_tanhf.exit148
  %1780 = fmul float %.01.i150, 0x4007154760000000, !dbg !127
  %1781 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1780) #5, !dbg !127
  %1782 = fadd float %1781, 1.000000e+00, !dbg !127
  %1783 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1782) #6, !dbg !127, !srcloc !62
  %1784 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i152 = icmp eq i32 %1784, 0, !dbg !127
  %1785 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1783, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1786 = tail call float @llvm.nvvm.fma.rn.f(float %1783, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i153 = select i1 %.not6.i152, float %1786, float %1785, !dbg !127
  %1787 = fcmp oge float %.01.i150, 0x4022059680000000, !dbg !127
  %s.0.i154 = select i1 %1787, float 1.000000e+00, float %.03.i153, !dbg !127
  %1788 = bitcast float %s.0.i154 to i32, !dbg !127
  %1789 = bitcast float %1568 to i32, !dbg !127
  %1790 = and i32 %1789, -2147483648, !dbg !127
  %1791 = or i32 %1790, %1788, !dbg !127
  %1792 = bitcast i32 %1791 to float, !dbg !127
  br label %__nv_tanhf.exit167, !dbg !127

__internal_fmad.exit3.i156:                       ; preds = %__nv_tanhf.exit148
  %1793 = fmul float %1568, %1568, !dbg !127
  %1794 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i157 = icmp eq i32 %1794, 0, !dbg !127
  %1795 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1793, float 0xBFAAC795C0000000) #5, !dbg !127
  %1796 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1793, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i158 = select i1 %.not1.i157, float %1796, float %1795, !dbg !127
  %1797 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i159 = icmp eq i32 %1797, 0, !dbg !127
  %1798 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i158, float %1793, float 0x3FC10B2820000000) #5, !dbg !127
  %1799 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i158, float %1793, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i160 = select i1 %.not2.i159, float %1799, float %1798, !dbg !127
  %1800 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i161 = icmp eq i32 %1800, 0, !dbg !127
  %1801 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i160, float %1793, float 0xBFD5553DA0000000) #5, !dbg !127
  %1802 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i160, float %1793, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i162 = select i1 %.not3.i161, float %1802, float %1801, !dbg !127
  %1803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i163 = icmp eq i32 %1803, 0, !dbg !127
  %1804 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i162, float %1793, float 0.000000e+00) #5, !dbg !127
  %1805 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i162, float %1793, float 0.000000e+00) #5, !dbg !127
  %.04.i164 = select i1 %.not4.i163, float %1805, float %1804, !dbg !127
  %1806 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i165 = icmp eq i32 %1806, 0, !dbg !127
  %1807 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i164, float %1568, float %1568) #5, !dbg !127
  %1808 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i164, float %1568, float %1568) #5, !dbg !127
  %.02.i166 = select i1 %.not5.i165, float %1808, float %1807, !dbg !127
  br label %__nv_tanhf.exit167, !dbg !127

__nv_tanhf.exit167:                               ; preds = %__internal_fmad.exit1.i151, %__internal_fmad.exit3.i156
  %s.1.i155 = phi float [ %1792, %__internal_fmad.exit1.i151 ], [ %.02.i166, %__internal_fmad.exit3.i156 ], !dbg !127
  %1809 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i168 = icmp eq i32 %1809, 0, !dbg !127
  %1810 = tail call float @llvm.nvvm.fabs.ftz.f(float %1569) #5, !dbg !127
  %1811 = tail call float @llvm.nvvm.fabs.f(float %1569) #5, !dbg !127
  %.01.i169 = select i1 %.not.i168, float %1811, float %1810, !dbg !127
  %1812 = fcmp ult float %.01.i169, 0x3FE3333340000000, !dbg !127
  br i1 %1812, label %__internal_fmad.exit3.i175, label %__internal_fmad.exit1.i170, !dbg !127

__internal_fmad.exit1.i170:                       ; preds = %__nv_tanhf.exit167
  %1813 = fmul float %.01.i169, 0x4007154760000000, !dbg !127
  %1814 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1813) #5, !dbg !127
  %1815 = fadd float %1814, 1.000000e+00, !dbg !127
  %1816 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1815) #6, !dbg !127, !srcloc !62
  %1817 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i171 = icmp eq i32 %1817, 0, !dbg !127
  %1818 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1816, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1819 = tail call float @llvm.nvvm.fma.rn.f(float %1816, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i172 = select i1 %.not6.i171, float %1819, float %1818, !dbg !127
  %1820 = fcmp oge float %.01.i169, 0x4022059680000000, !dbg !127
  %s.0.i173 = select i1 %1820, float 1.000000e+00, float %.03.i172, !dbg !127
  %1821 = bitcast float %s.0.i173 to i32, !dbg !127
  %1822 = bitcast float %1569 to i32, !dbg !127
  %1823 = and i32 %1822, -2147483648, !dbg !127
  %1824 = or i32 %1823, %1821, !dbg !127
  %1825 = bitcast i32 %1824 to float, !dbg !127
  br label %__nv_tanhf.exit186, !dbg !127

__internal_fmad.exit3.i175:                       ; preds = %__nv_tanhf.exit167
  %1826 = fmul float %1569, %1569, !dbg !127
  %1827 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i176 = icmp eq i32 %1827, 0, !dbg !127
  %1828 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1826, float 0xBFAAC795C0000000) #5, !dbg !127
  %1829 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1826, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i177 = select i1 %.not1.i176, float %1829, float %1828, !dbg !127
  %1830 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i178 = icmp eq i32 %1830, 0, !dbg !127
  %1831 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i177, float %1826, float 0x3FC10B2820000000) #5, !dbg !127
  %1832 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i177, float %1826, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i179 = select i1 %.not2.i178, float %1832, float %1831, !dbg !127
  %1833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i180 = icmp eq i32 %1833, 0, !dbg !127
  %1834 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i179, float %1826, float 0xBFD5553DA0000000) #5, !dbg !127
  %1835 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i179, float %1826, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i181 = select i1 %.not3.i180, float %1835, float %1834, !dbg !127
  %1836 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i182 = icmp eq i32 %1836, 0, !dbg !127
  %1837 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i181, float %1826, float 0.000000e+00) #5, !dbg !127
  %1838 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i181, float %1826, float 0.000000e+00) #5, !dbg !127
  %.04.i183 = select i1 %.not4.i182, float %1838, float %1837, !dbg !127
  %1839 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i184 = icmp eq i32 %1839, 0, !dbg !127
  %1840 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i183, float %1569, float %1569) #5, !dbg !127
  %1841 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i183, float %1569, float %1569) #5, !dbg !127
  %.02.i185 = select i1 %.not5.i184, float %1841, float %1840, !dbg !127
  br label %__nv_tanhf.exit186, !dbg !127

__nv_tanhf.exit186:                               ; preds = %__internal_fmad.exit1.i170, %__internal_fmad.exit3.i175
  %s.1.i174 = phi float [ %1825, %__internal_fmad.exit1.i170 ], [ %.02.i185, %__internal_fmad.exit3.i175 ], !dbg !127
  %1842 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i187 = icmp eq i32 %1842, 0, !dbg !127
  %1843 = tail call float @llvm.nvvm.fabs.ftz.f(float %1570) #5, !dbg !127
  %1844 = tail call float @llvm.nvvm.fabs.f(float %1570) #5, !dbg !127
  %.01.i188 = select i1 %.not.i187, float %1844, float %1843, !dbg !127
  %1845 = fcmp ult float %.01.i188, 0x3FE3333340000000, !dbg !127
  br i1 %1845, label %__internal_fmad.exit3.i194, label %__internal_fmad.exit1.i189, !dbg !127

__internal_fmad.exit1.i189:                       ; preds = %__nv_tanhf.exit186
  %1846 = fmul float %.01.i188, 0x4007154760000000, !dbg !127
  %1847 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1846) #5, !dbg !127
  %1848 = fadd float %1847, 1.000000e+00, !dbg !127
  %1849 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1848) #6, !dbg !127, !srcloc !62
  %1850 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i190 = icmp eq i32 %1850, 0, !dbg !127
  %1851 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1849, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1852 = tail call float @llvm.nvvm.fma.rn.f(float %1849, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i191 = select i1 %.not6.i190, float %1852, float %1851, !dbg !127
  %1853 = fcmp oge float %.01.i188, 0x4022059680000000, !dbg !127
  %s.0.i192 = select i1 %1853, float 1.000000e+00, float %.03.i191, !dbg !127
  %1854 = bitcast float %s.0.i192 to i32, !dbg !127
  %1855 = bitcast float %1570 to i32, !dbg !127
  %1856 = and i32 %1855, -2147483648, !dbg !127
  %1857 = or i32 %1856, %1854, !dbg !127
  %1858 = bitcast i32 %1857 to float, !dbg !127
  br label %__nv_tanhf.exit205, !dbg !127

__internal_fmad.exit3.i194:                       ; preds = %__nv_tanhf.exit186
  %1859 = fmul float %1570, %1570, !dbg !127
  %1860 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i195 = icmp eq i32 %1860, 0, !dbg !127
  %1861 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1859, float 0xBFAAC795C0000000) #5, !dbg !127
  %1862 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1859, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i196 = select i1 %.not1.i195, float %1862, float %1861, !dbg !127
  %1863 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i197 = icmp eq i32 %1863, 0, !dbg !127
  %1864 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i196, float %1859, float 0x3FC10B2820000000) #5, !dbg !127
  %1865 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i196, float %1859, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i198 = select i1 %.not2.i197, float %1865, float %1864, !dbg !127
  %1866 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i199 = icmp eq i32 %1866, 0, !dbg !127
  %1867 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i198, float %1859, float 0xBFD5553DA0000000) #5, !dbg !127
  %1868 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i198, float %1859, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i200 = select i1 %.not3.i199, float %1868, float %1867, !dbg !127
  %1869 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i201 = icmp eq i32 %1869, 0, !dbg !127
  %1870 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i200, float %1859, float 0.000000e+00) #5, !dbg !127
  %1871 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i200, float %1859, float 0.000000e+00) #5, !dbg !127
  %.04.i202 = select i1 %.not4.i201, float %1871, float %1870, !dbg !127
  %1872 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i203 = icmp eq i32 %1872, 0, !dbg !127
  %1873 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i202, float %1570, float %1570) #5, !dbg !127
  %1874 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i202, float %1570, float %1570) #5, !dbg !127
  %.02.i204 = select i1 %.not5.i203, float %1874, float %1873, !dbg !127
  br label %__nv_tanhf.exit205, !dbg !127

__nv_tanhf.exit205:                               ; preds = %__internal_fmad.exit1.i189, %__internal_fmad.exit3.i194
  %s.1.i193 = phi float [ %1858, %__internal_fmad.exit1.i189 ], [ %.02.i204, %__internal_fmad.exit3.i194 ], !dbg !127
  %1875 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i206 = icmp eq i32 %1875, 0, !dbg !127
  %1876 = tail call float @llvm.nvvm.fabs.ftz.f(float %1571) #5, !dbg !127
  %1877 = tail call float @llvm.nvvm.fabs.f(float %1571) #5, !dbg !127
  %.01.i207 = select i1 %.not.i206, float %1877, float %1876, !dbg !127
  %1878 = fcmp ult float %.01.i207, 0x3FE3333340000000, !dbg !127
  br i1 %1878, label %__internal_fmad.exit3.i213, label %__internal_fmad.exit1.i208, !dbg !127

__internal_fmad.exit1.i208:                       ; preds = %__nv_tanhf.exit205
  %1879 = fmul float %.01.i207, 0x4007154760000000, !dbg !127
  %1880 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1879) #5, !dbg !127
  %1881 = fadd float %1880, 1.000000e+00, !dbg !127
  %1882 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1881) #6, !dbg !127, !srcloc !62
  %1883 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i209 = icmp eq i32 %1883, 0, !dbg !127
  %1884 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1882, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1885 = tail call float @llvm.nvvm.fma.rn.f(float %1882, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i210 = select i1 %.not6.i209, float %1885, float %1884, !dbg !127
  %1886 = fcmp oge float %.01.i207, 0x4022059680000000, !dbg !127
  %s.0.i211 = select i1 %1886, float 1.000000e+00, float %.03.i210, !dbg !127
  %1887 = bitcast float %s.0.i211 to i32, !dbg !127
  %1888 = bitcast float %1571 to i32, !dbg !127
  %1889 = and i32 %1888, -2147483648, !dbg !127
  %1890 = or i32 %1889, %1887, !dbg !127
  %1891 = bitcast i32 %1890 to float, !dbg !127
  br label %__nv_tanhf.exit224, !dbg !127

__internal_fmad.exit3.i213:                       ; preds = %__nv_tanhf.exit205
  %1892 = fmul float %1571, %1571, !dbg !127
  %1893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i214 = icmp eq i32 %1893, 0, !dbg !127
  %1894 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1892, float 0xBFAAC795C0000000) #5, !dbg !127
  %1895 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1892, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i215 = select i1 %.not1.i214, float %1895, float %1894, !dbg !127
  %1896 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i216 = icmp eq i32 %1896, 0, !dbg !127
  %1897 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i215, float %1892, float 0x3FC10B2820000000) #5, !dbg !127
  %1898 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i215, float %1892, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i217 = select i1 %.not2.i216, float %1898, float %1897, !dbg !127
  %1899 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i218 = icmp eq i32 %1899, 0, !dbg !127
  %1900 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i217, float %1892, float 0xBFD5553DA0000000) #5, !dbg !127
  %1901 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i217, float %1892, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i219 = select i1 %.not3.i218, float %1901, float %1900, !dbg !127
  %1902 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i220 = icmp eq i32 %1902, 0, !dbg !127
  %1903 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i219, float %1892, float 0.000000e+00) #5, !dbg !127
  %1904 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i219, float %1892, float 0.000000e+00) #5, !dbg !127
  %.04.i221 = select i1 %.not4.i220, float %1904, float %1903, !dbg !127
  %1905 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i222 = icmp eq i32 %1905, 0, !dbg !127
  %1906 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i221, float %1571, float %1571) #5, !dbg !127
  %1907 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i221, float %1571, float %1571) #5, !dbg !127
  %.02.i223 = select i1 %.not5.i222, float %1907, float %1906, !dbg !127
  br label %__nv_tanhf.exit224, !dbg !127

__nv_tanhf.exit224:                               ; preds = %__internal_fmad.exit1.i208, %__internal_fmad.exit3.i213
  %s.1.i212 = phi float [ %1891, %__internal_fmad.exit1.i208 ], [ %.02.i223, %__internal_fmad.exit3.i213 ], !dbg !127
  %1908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i225 = icmp eq i32 %1908, 0, !dbg !127
  %1909 = tail call float @llvm.nvvm.fabs.ftz.f(float %1572) #5, !dbg !127
  %1910 = tail call float @llvm.nvvm.fabs.f(float %1572) #5, !dbg !127
  %.01.i226 = select i1 %.not.i225, float %1910, float %1909, !dbg !127
  %1911 = fcmp ult float %.01.i226, 0x3FE3333340000000, !dbg !127
  br i1 %1911, label %__internal_fmad.exit3.i232, label %__internal_fmad.exit1.i227, !dbg !127

__internal_fmad.exit1.i227:                       ; preds = %__nv_tanhf.exit224
  %1912 = fmul float %.01.i226, 0x4007154760000000, !dbg !127
  %1913 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1912) #5, !dbg !127
  %1914 = fadd float %1913, 1.000000e+00, !dbg !127
  %1915 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1914) #6, !dbg !127, !srcloc !62
  %1916 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i228 = icmp eq i32 %1916, 0, !dbg !127
  %1917 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1915, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1918 = tail call float @llvm.nvvm.fma.rn.f(float %1915, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i229 = select i1 %.not6.i228, float %1918, float %1917, !dbg !127
  %1919 = fcmp oge float %.01.i226, 0x4022059680000000, !dbg !127
  %s.0.i230 = select i1 %1919, float 1.000000e+00, float %.03.i229, !dbg !127
  %1920 = bitcast float %s.0.i230 to i32, !dbg !127
  %1921 = bitcast float %1572 to i32, !dbg !127
  %1922 = and i32 %1921, -2147483648, !dbg !127
  %1923 = or i32 %1922, %1920, !dbg !127
  %1924 = bitcast i32 %1923 to float, !dbg !127
  br label %__nv_tanhf.exit243, !dbg !127

__internal_fmad.exit3.i232:                       ; preds = %__nv_tanhf.exit224
  %1925 = fmul float %1572, %1572, !dbg !127
  %1926 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i233 = icmp eq i32 %1926, 0, !dbg !127
  %1927 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1925, float 0xBFAAC795C0000000) #5, !dbg !127
  %1928 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1925, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i234 = select i1 %.not1.i233, float %1928, float %1927, !dbg !127
  %1929 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i235 = icmp eq i32 %1929, 0, !dbg !127
  %1930 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i234, float %1925, float 0x3FC10B2820000000) #5, !dbg !127
  %1931 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i234, float %1925, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i236 = select i1 %.not2.i235, float %1931, float %1930, !dbg !127
  %1932 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i237 = icmp eq i32 %1932, 0, !dbg !127
  %1933 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i236, float %1925, float 0xBFD5553DA0000000) #5, !dbg !127
  %1934 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i236, float %1925, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i238 = select i1 %.not3.i237, float %1934, float %1933, !dbg !127
  %1935 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i239 = icmp eq i32 %1935, 0, !dbg !127
  %1936 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i238, float %1925, float 0.000000e+00) #5, !dbg !127
  %1937 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i238, float %1925, float 0.000000e+00) #5, !dbg !127
  %.04.i240 = select i1 %.not4.i239, float %1937, float %1936, !dbg !127
  %1938 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i241 = icmp eq i32 %1938, 0, !dbg !127
  %1939 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i240, float %1572, float %1572) #5, !dbg !127
  %1940 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i240, float %1572, float %1572) #5, !dbg !127
  %.02.i242 = select i1 %.not5.i241, float %1940, float %1939, !dbg !127
  br label %__nv_tanhf.exit243, !dbg !127

__nv_tanhf.exit243:                               ; preds = %__internal_fmad.exit1.i227, %__internal_fmad.exit3.i232
  %s.1.i231 = phi float [ %1924, %__internal_fmad.exit1.i227 ], [ %.02.i242, %__internal_fmad.exit3.i232 ], !dbg !127
  %1941 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i244 = icmp eq i32 %1941, 0, !dbg !127
  %1942 = tail call float @llvm.nvvm.fabs.ftz.f(float %1573) #5, !dbg !127
  %1943 = tail call float @llvm.nvvm.fabs.f(float %1573) #5, !dbg !127
  %.01.i245 = select i1 %.not.i244, float %1943, float %1942, !dbg !127
  %1944 = fcmp ult float %.01.i245, 0x3FE3333340000000, !dbg !127
  br i1 %1944, label %__internal_fmad.exit3.i251, label %__internal_fmad.exit1.i246, !dbg !127

__internal_fmad.exit1.i246:                       ; preds = %__nv_tanhf.exit243
  %1945 = fmul float %.01.i245, 0x4007154760000000, !dbg !127
  %1946 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1945) #5, !dbg !127
  %1947 = fadd float %1946, 1.000000e+00, !dbg !127
  %1948 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1947) #6, !dbg !127, !srcloc !62
  %1949 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i247 = icmp eq i32 %1949, 0, !dbg !127
  %1950 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1948, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1951 = tail call float @llvm.nvvm.fma.rn.f(float %1948, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i248 = select i1 %.not6.i247, float %1951, float %1950, !dbg !127
  %1952 = fcmp oge float %.01.i245, 0x4022059680000000, !dbg !127
  %s.0.i249 = select i1 %1952, float 1.000000e+00, float %.03.i248, !dbg !127
  %1953 = bitcast float %s.0.i249 to i32, !dbg !127
  %1954 = bitcast float %1573 to i32, !dbg !127
  %1955 = and i32 %1954, -2147483648, !dbg !127
  %1956 = or i32 %1955, %1953, !dbg !127
  %1957 = bitcast i32 %1956 to float, !dbg !127
  br label %__nv_tanhf.exit262, !dbg !127

__internal_fmad.exit3.i251:                       ; preds = %__nv_tanhf.exit243
  %1958 = fmul float %1573, %1573, !dbg !127
  %1959 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i252 = icmp eq i32 %1959, 0, !dbg !127
  %1960 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1958, float 0xBFAAC795C0000000) #5, !dbg !127
  %1961 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1958, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i253 = select i1 %.not1.i252, float %1961, float %1960, !dbg !127
  %1962 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i254 = icmp eq i32 %1962, 0, !dbg !127
  %1963 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i253, float %1958, float 0x3FC10B2820000000) #5, !dbg !127
  %1964 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i253, float %1958, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i255 = select i1 %.not2.i254, float %1964, float %1963, !dbg !127
  %1965 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i256 = icmp eq i32 %1965, 0, !dbg !127
  %1966 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i255, float %1958, float 0xBFD5553DA0000000) #5, !dbg !127
  %1967 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i255, float %1958, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i257 = select i1 %.not3.i256, float %1967, float %1966, !dbg !127
  %1968 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i258 = icmp eq i32 %1968, 0, !dbg !127
  %1969 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i257, float %1958, float 0.000000e+00) #5, !dbg !127
  %1970 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i257, float %1958, float 0.000000e+00) #5, !dbg !127
  %.04.i259 = select i1 %.not4.i258, float %1970, float %1969, !dbg !127
  %1971 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i260 = icmp eq i32 %1971, 0, !dbg !127
  %1972 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i259, float %1573, float %1573) #5, !dbg !127
  %1973 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i259, float %1573, float %1573) #5, !dbg !127
  %.02.i261 = select i1 %.not5.i260, float %1973, float %1972, !dbg !127
  br label %__nv_tanhf.exit262, !dbg !127

__nv_tanhf.exit262:                               ; preds = %__internal_fmad.exit1.i246, %__internal_fmad.exit3.i251
  %s.1.i250 = phi float [ %1957, %__internal_fmad.exit1.i246 ], [ %.02.i261, %__internal_fmad.exit3.i251 ], !dbg !127
  %1974 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i263 = icmp eq i32 %1974, 0, !dbg !127
  %1975 = tail call float @llvm.nvvm.fabs.ftz.f(float %1574) #5, !dbg !127
  %1976 = tail call float @llvm.nvvm.fabs.f(float %1574) #5, !dbg !127
  %.01.i264 = select i1 %.not.i263, float %1976, float %1975, !dbg !127
  %1977 = fcmp ult float %.01.i264, 0x3FE3333340000000, !dbg !127
  br i1 %1977, label %__internal_fmad.exit3.i270, label %__internal_fmad.exit1.i265, !dbg !127

__internal_fmad.exit1.i265:                       ; preds = %__nv_tanhf.exit262
  %1978 = fmul float %.01.i264, 0x4007154760000000, !dbg !127
  %1979 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1978) #5, !dbg !127
  %1980 = fadd float %1979, 1.000000e+00, !dbg !127
  %1981 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1980) #6, !dbg !127, !srcloc !62
  %1982 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i266 = icmp eq i32 %1982, 0, !dbg !127
  %1983 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1981, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %1984 = tail call float @llvm.nvvm.fma.rn.f(float %1981, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i267 = select i1 %.not6.i266, float %1984, float %1983, !dbg !127
  %1985 = fcmp oge float %.01.i264, 0x4022059680000000, !dbg !127
  %s.0.i268 = select i1 %1985, float 1.000000e+00, float %.03.i267, !dbg !127
  %1986 = bitcast float %s.0.i268 to i32, !dbg !127
  %1987 = bitcast float %1574 to i32, !dbg !127
  %1988 = and i32 %1987, -2147483648, !dbg !127
  %1989 = or i32 %1988, %1986, !dbg !127
  %1990 = bitcast i32 %1989 to float, !dbg !127
  br label %__nv_tanhf.exit281, !dbg !127

__internal_fmad.exit3.i270:                       ; preds = %__nv_tanhf.exit262
  %1991 = fmul float %1574, %1574, !dbg !127
  %1992 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i271 = icmp eq i32 %1992, 0, !dbg !127
  %1993 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1991, float 0xBFAAC795C0000000) #5, !dbg !127
  %1994 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1991, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i272 = select i1 %.not1.i271, float %1994, float %1993, !dbg !127
  %1995 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i273 = icmp eq i32 %1995, 0, !dbg !127
  %1996 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i272, float %1991, float 0x3FC10B2820000000) #5, !dbg !127
  %1997 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i272, float %1991, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i274 = select i1 %.not2.i273, float %1997, float %1996, !dbg !127
  %1998 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i275 = icmp eq i32 %1998, 0, !dbg !127
  %1999 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i274, float %1991, float 0xBFD5553DA0000000) #5, !dbg !127
  %2000 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i274, float %1991, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i276 = select i1 %.not3.i275, float %2000, float %1999, !dbg !127
  %2001 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i277 = icmp eq i32 %2001, 0, !dbg !127
  %2002 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i276, float %1991, float 0.000000e+00) #5, !dbg !127
  %2003 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i276, float %1991, float 0.000000e+00) #5, !dbg !127
  %.04.i278 = select i1 %.not4.i277, float %2003, float %2002, !dbg !127
  %2004 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i279 = icmp eq i32 %2004, 0, !dbg !127
  %2005 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i278, float %1574, float %1574) #5, !dbg !127
  %2006 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i278, float %1574, float %1574) #5, !dbg !127
  %.02.i280 = select i1 %.not5.i279, float %2006, float %2005, !dbg !127
  br label %__nv_tanhf.exit281, !dbg !127

__nv_tanhf.exit281:                               ; preds = %__internal_fmad.exit1.i265, %__internal_fmad.exit3.i270
  %s.1.i269 = phi float [ %1990, %__internal_fmad.exit1.i265 ], [ %.02.i280, %__internal_fmad.exit3.i270 ], !dbg !127
  %2007 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i282 = icmp eq i32 %2007, 0, !dbg !127
  %2008 = tail call float @llvm.nvvm.fabs.ftz.f(float %1575) #5, !dbg !127
  %2009 = tail call float @llvm.nvvm.fabs.f(float %1575) #5, !dbg !127
  %.01.i283 = select i1 %.not.i282, float %2009, float %2008, !dbg !127
  %2010 = fcmp ult float %.01.i283, 0x3FE3333340000000, !dbg !127
  br i1 %2010, label %__internal_fmad.exit3.i289, label %__internal_fmad.exit1.i284, !dbg !127

__internal_fmad.exit1.i284:                       ; preds = %__nv_tanhf.exit281
  %2011 = fmul float %.01.i283, 0x4007154760000000, !dbg !127
  %2012 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %2011) #5, !dbg !127
  %2013 = fadd float %2012, 1.000000e+00, !dbg !127
  %2014 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %2013) #6, !dbg !127, !srcloc !62
  %2015 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i285 = icmp eq i32 %2015, 0, !dbg !127
  %2016 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2014, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %2017 = tail call float @llvm.nvvm.fma.rn.f(float %2014, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i286 = select i1 %.not6.i285, float %2017, float %2016, !dbg !127
  %2018 = fcmp oge float %.01.i283, 0x4022059680000000, !dbg !127
  %s.0.i287 = select i1 %2018, float 1.000000e+00, float %.03.i286, !dbg !127
  %2019 = bitcast float %s.0.i287 to i32, !dbg !127
  %2020 = bitcast float %1575 to i32, !dbg !127
  %2021 = and i32 %2020, -2147483648, !dbg !127
  %2022 = or i32 %2021, %2019, !dbg !127
  %2023 = bitcast i32 %2022 to float, !dbg !127
  br label %__nv_tanhf.exit300, !dbg !127

__internal_fmad.exit3.i289:                       ; preds = %__nv_tanhf.exit281
  %2024 = fmul float %1575, %1575, !dbg !127
  %2025 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i290 = icmp eq i32 %2025, 0, !dbg !127
  %2026 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %2024, float 0xBFAAC795C0000000) #5, !dbg !127
  %2027 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %2024, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i291 = select i1 %.not1.i290, float %2027, float %2026, !dbg !127
  %2028 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i292 = icmp eq i32 %2028, 0, !dbg !127
  %2029 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i291, float %2024, float 0x3FC10B2820000000) #5, !dbg !127
  %2030 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i291, float %2024, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i293 = select i1 %.not2.i292, float %2030, float %2029, !dbg !127
  %2031 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i294 = icmp eq i32 %2031, 0, !dbg !127
  %2032 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i293, float %2024, float 0xBFD5553DA0000000) #5, !dbg !127
  %2033 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i293, float %2024, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i295 = select i1 %.not3.i294, float %2033, float %2032, !dbg !127
  %2034 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i296 = icmp eq i32 %2034, 0, !dbg !127
  %2035 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i295, float %2024, float 0.000000e+00) #5, !dbg !127
  %2036 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i295, float %2024, float 0.000000e+00) #5, !dbg !127
  %.04.i297 = select i1 %.not4.i296, float %2036, float %2035, !dbg !127
  %2037 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i298 = icmp eq i32 %2037, 0, !dbg !127
  %2038 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i297, float %1575, float %1575) #5, !dbg !127
  %2039 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i297, float %1575, float %1575) #5, !dbg !127
  %.02.i299 = select i1 %.not5.i298, float %2039, float %2038, !dbg !127
  br label %__nv_tanhf.exit300, !dbg !127

__nv_tanhf.exit300:                               ; preds = %__internal_fmad.exit1.i284, %__internal_fmad.exit3.i289
  %s.1.i288 = phi float [ %2023, %__internal_fmad.exit1.i284 ], [ %.02.i299, %__internal_fmad.exit3.i289 ], !dbg !127
  %2040 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i301 = icmp eq i32 %2040, 0, !dbg !127
  %2041 = tail call float @llvm.nvvm.fabs.ftz.f(float %1576) #5, !dbg !127
  %2042 = tail call float @llvm.nvvm.fabs.f(float %1576) #5, !dbg !127
  %.01.i302 = select i1 %.not.i301, float %2042, float %2041, !dbg !127
  %2043 = fcmp ult float %.01.i302, 0x3FE3333340000000, !dbg !127
  br i1 %2043, label %__internal_fmad.exit3.i308, label %__internal_fmad.exit1.i303, !dbg !127

__internal_fmad.exit1.i303:                       ; preds = %__nv_tanhf.exit300
  %2044 = fmul float %.01.i302, 0x4007154760000000, !dbg !127
  %2045 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %2044) #5, !dbg !127
  %2046 = fadd float %2045, 1.000000e+00, !dbg !127
  %2047 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %2046) #6, !dbg !127, !srcloc !62
  %2048 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i304 = icmp eq i32 %2048, 0, !dbg !127
  %2049 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2047, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %2050 = tail call float @llvm.nvvm.fma.rn.f(float %2047, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i305 = select i1 %.not6.i304, float %2050, float %2049, !dbg !127
  %2051 = fcmp oge float %.01.i302, 0x4022059680000000, !dbg !127
  %s.0.i306 = select i1 %2051, float 1.000000e+00, float %.03.i305, !dbg !127
  %2052 = bitcast float %s.0.i306 to i32, !dbg !127
  %2053 = bitcast float %1576 to i32, !dbg !127
  %2054 = and i32 %2053, -2147483648, !dbg !127
  %2055 = or i32 %2054, %2052, !dbg !127
  %2056 = bitcast i32 %2055 to float, !dbg !127
  br label %__nv_tanhf.exit319, !dbg !127

__internal_fmad.exit3.i308:                       ; preds = %__nv_tanhf.exit300
  %2057 = fmul float %1576, %1576, !dbg !127
  %2058 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i309 = icmp eq i32 %2058, 0, !dbg !127
  %2059 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %2057, float 0xBFAAC795C0000000) #5, !dbg !127
  %2060 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %2057, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i310 = select i1 %.not1.i309, float %2060, float %2059, !dbg !127
  %2061 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i311 = icmp eq i32 %2061, 0, !dbg !127
  %2062 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i310, float %2057, float 0x3FC10B2820000000) #5, !dbg !127
  %2063 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i310, float %2057, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i312 = select i1 %.not2.i311, float %2063, float %2062, !dbg !127
  %2064 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i313 = icmp eq i32 %2064, 0, !dbg !127
  %2065 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i312, float %2057, float 0xBFD5553DA0000000) #5, !dbg !127
  %2066 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i312, float %2057, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i314 = select i1 %.not3.i313, float %2066, float %2065, !dbg !127
  %2067 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i315 = icmp eq i32 %2067, 0, !dbg !127
  %2068 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i314, float %2057, float 0.000000e+00) #5, !dbg !127
  %2069 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i314, float %2057, float 0.000000e+00) #5, !dbg !127
  %.04.i316 = select i1 %.not4.i315, float %2069, float %2068, !dbg !127
  %2070 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i317 = icmp eq i32 %2070, 0, !dbg !127
  %2071 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i316, float %1576, float %1576) #5, !dbg !127
  %2072 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i316, float %1576, float %1576) #5, !dbg !127
  %.02.i318 = select i1 %.not5.i317, float %2072, float %2071, !dbg !127
  br label %__nv_tanhf.exit319, !dbg !127

__nv_tanhf.exit319:                               ; preds = %__internal_fmad.exit1.i303, %__internal_fmad.exit3.i308
  %s.1.i307 = phi float [ %2056, %__internal_fmad.exit1.i303 ], [ %.02.i318, %__internal_fmad.exit3.i308 ], !dbg !127
  %2073 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not.i320 = icmp eq i32 %2073, 0, !dbg !127
  %2074 = tail call float @llvm.nvvm.fabs.ftz.f(float %1577) #5, !dbg !127
  %2075 = tail call float @llvm.nvvm.fabs.f(float %1577) #5, !dbg !127
  %.01.i321 = select i1 %.not.i320, float %2075, float %2074, !dbg !127
  %2076 = fcmp ult float %.01.i321, 0x3FE3333340000000, !dbg !127
  br i1 %2076, label %__internal_fmad.exit3.i327, label %__internal_fmad.exit1.i322, !dbg !127

__internal_fmad.exit1.i322:                       ; preds = %__nv_tanhf.exit319
  %2077 = fmul float %.01.i321, 0x4007154760000000, !dbg !127
  %2078 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %2077) #5, !dbg !127
  %2079 = fadd float %2078, 1.000000e+00, !dbg !127
  %2080 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %2079) #6, !dbg !127, !srcloc !62
  %2081 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not6.i323 = icmp eq i32 %2081, 0, !dbg !127
  %2082 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2080, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %2083 = tail call float @llvm.nvvm.fma.rn.f(float %2080, float -2.000000e+00, float 1.000000e+00) #5, !dbg !127
  %.03.i324 = select i1 %.not6.i323, float %2083, float %2082, !dbg !127
  %2084 = fcmp oge float %.01.i321, 0x4022059680000000, !dbg !127
  %s.0.i325 = select i1 %2084, float 1.000000e+00, float %.03.i324, !dbg !127
  %2085 = bitcast float %s.0.i325 to i32, !dbg !127
  %2086 = bitcast float %1577 to i32, !dbg !127
  %2087 = and i32 %2086, -2147483648, !dbg !127
  %2088 = or i32 %2087, %2085, !dbg !127
  %2089 = bitcast i32 %2088 to float, !dbg !127
  br label %__nv_tanhf.exit338, !dbg !127

__internal_fmad.exit3.i327:                       ; preds = %__nv_tanhf.exit319
  %2090 = fmul float %1577, %1577, !dbg !127
  %2091 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not1.i328 = icmp eq i32 %2091, 0, !dbg !127
  %2092 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %2090, float 0xBFAAC795C0000000) #5, !dbg !127
  %2093 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %2090, float 0xBFAAC795C0000000) #5, !dbg !127
  %.06.i329 = select i1 %.not1.i328, float %2093, float %2092, !dbg !127
  %2094 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not2.i330 = icmp eq i32 %2094, 0, !dbg !127
  %2095 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i329, float %2090, float 0x3FC10B2820000000) #5, !dbg !127
  %2096 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i329, float %2090, float 0x3FC10B2820000000) #5, !dbg !127
  %.05.i331 = select i1 %.not2.i330, float %2096, float %2095, !dbg !127
  %2097 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not3.i332 = icmp eq i32 %2097, 0, !dbg !127
  %2098 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i331, float %2090, float 0xBFD5553DA0000000) #5, !dbg !127
  %2099 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i331, float %2090, float 0xBFD5553DA0000000) #5, !dbg !127
  %.0.i333 = select i1 %.not3.i332, float %2099, float %2098, !dbg !127
  %2100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not4.i334 = icmp eq i32 %2100, 0, !dbg !127
  %2101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i333, float %2090, float 0.000000e+00) #5, !dbg !127
  %2102 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i333, float %2090, float 0.000000e+00) #5, !dbg !127
  %.04.i335 = select i1 %.not4.i334, float %2102, float %2101, !dbg !127
  %2103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !127
  %.not5.i336 = icmp eq i32 %2103, 0, !dbg !127
  %2104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i335, float %1577, float %1577) #5, !dbg !127
  %2105 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i335, float %1577, float %1577) #5, !dbg !127
  %.02.i337 = select i1 %.not5.i336, float %2105, float %2104, !dbg !127
  br label %__nv_tanhf.exit338, !dbg !127

__nv_tanhf.exit338:                               ; preds = %__internal_fmad.exit1.i322, %__internal_fmad.exit3.i327
  %s.1.i326 = phi float [ %2089, %__internal_fmad.exit1.i322 ], [ %.02.i337, %__internal_fmad.exit3.i327 ], !dbg !127
  %2106 = fadd float %s.1.i, 1.000000e+00, !dbg !128
  %2107 = fadd float %s.1.i60, 1.000000e+00, !dbg !128
  %2108 = fadd float %s.1.i79, 1.000000e+00, !dbg !128
  %2109 = fadd float %s.1.i98, 1.000000e+00, !dbg !128
  %2110 = fadd float %s.1.i117, 1.000000e+00, !dbg !128
  %2111 = fadd float %s.1.i136, 1.000000e+00, !dbg !128
  %2112 = fadd float %s.1.i155, 1.000000e+00, !dbg !128
  %2113 = fadd float %s.1.i174, 1.000000e+00, !dbg !128
  %2114 = fadd float %s.1.i193, 1.000000e+00, !dbg !128
  %2115 = fadd float %s.1.i212, 1.000000e+00, !dbg !128
  %2116 = fadd float %s.1.i231, 1.000000e+00, !dbg !128
  %2117 = fadd float %s.1.i250, 1.000000e+00, !dbg !128
  %2118 = fadd float %s.1.i269, 1.000000e+00, !dbg !128
  %2119 = fadd float %s.1.i288, 1.000000e+00, !dbg !128
  %2120 = fadd float %s.1.i307, 1.000000e+00, !dbg !128
  %2121 = fadd float %s.1.i326, 1.000000e+00, !dbg !128
  %2122 = fmul float %1482, %2106, !dbg !129
  %2123 = fmul float %1483, %2107, !dbg !129
  %2124 = fmul float %1484, %2108, !dbg !129
  %2125 = fmul float %1485, %2109, !dbg !129
  %2126 = fmul float %1486, %2110, !dbg !129
  %2127 = fmul float %1487, %2111, !dbg !129
  %2128 = fmul float %1488, %2112, !dbg !129
  %2129 = fmul float %1489, %2113, !dbg !129
  %2130 = fmul float %1490, %2114, !dbg !129
  %2131 = fmul float %1491, %2115, !dbg !129
  %2132 = fmul float %1492, %2116, !dbg !129
  %2133 = fmul float %1493, %2117, !dbg !129
  %2134 = fmul float %1494, %2118, !dbg !129
  %2135 = fmul float %1495, %2119, !dbg !129
  %2136 = fmul float %1496, %2120, !dbg !129
  %2137 = fmul float %1497, %2121, !dbg !129
  %2138 = fmul float %1426, %2122, !dbg !113
  %2139 = fmul float %1426, %2123, !dbg !113
  %2140 = fmul float %1426, %2124, !dbg !113
  %2141 = fmul float %1426, %2125, !dbg !113
  %2142 = fmul float %1426, %2126, !dbg !113
  %2143 = fmul float %1426, %2127, !dbg !113
  %2144 = fmul float %1426, %2128, !dbg !113
  %2145 = fmul float %1426, %2129, !dbg !113
  %2146 = fmul float %1426, %2130, !dbg !113
  %2147 = fmul float %1426, %2131, !dbg !113
  %2148 = fmul float %1426, %2132, !dbg !113
  %2149 = fmul float %1426, %2133, !dbg !113
  %2150 = fmul float %1426, %2134, !dbg !113
  %2151 = fmul float %1426, %2135, !dbg !113
  %2152 = fmul float %1426, %2136, !dbg !113
  %2153 = fmul float %1426, %2137, !dbg !113
  %2154 = tail call float @llvm.nvvm.round.f(float %2138) #5, !dbg !130
  %2155 = tail call float @llvm.nvvm.round.f(float %2139) #5, !dbg !130
  %2156 = tail call float @llvm.nvvm.round.f(float %2140) #5, !dbg !130
  %2157 = tail call float @llvm.nvvm.round.f(float %2141) #5, !dbg !130
  %2158 = tail call float @llvm.nvvm.round.f(float %2142) #5, !dbg !130
  %2159 = tail call float @llvm.nvvm.round.f(float %2143) #5, !dbg !130
  %2160 = tail call float @llvm.nvvm.round.f(float %2144) #5, !dbg !130
  %2161 = tail call float @llvm.nvvm.round.f(float %2145) #5, !dbg !130
  %2162 = tail call float @llvm.nvvm.round.f(float %2146) #5, !dbg !130
  %2163 = tail call float @llvm.nvvm.round.f(float %2147) #5, !dbg !130
  %2164 = tail call float @llvm.nvvm.round.f(float %2148) #5, !dbg !130
  %2165 = tail call float @llvm.nvvm.round.f(float %2149) #5, !dbg !130
  %2166 = tail call float @llvm.nvvm.round.f(float %2150) #5, !dbg !130
  %2167 = tail call float @llvm.nvvm.round.f(float %2151) #5, !dbg !130
  %2168 = tail call float @llvm.nvvm.round.f(float %2152) #5, !dbg !130
  %2169 = tail call float @llvm.nvvm.round.f(float %2153) #5, !dbg !130
  %2170 = insertelement <4 x float> poison, float %2154, i64 0, !dbg !131
  %2171 = insertelement <4 x float> %2170, float %2155, i64 1, !dbg !131
  %2172 = insertelement <4 x float> %2171, float %2156, i64 2, !dbg !131
  %2173 = insertelement <4 x float> %2172, float %2157, i64 3, !dbg !131
  %2174 = fcmp ogt <4 x float> %2173, splat (float -1.270000e+02), !dbg !131
  %2175 = fcmp uno <4 x float> %2173, zeroinitializer, !dbg !133
  %2176 = or <4 x i1> %2174, %2175, !dbg !134
  %2177 = select <4 x i1> %2176, <4 x float> %2173, <4 x float> splat (float -1.270000e+02), !dbg !135
  %2178 = fcmp olt <4 x float> %2177, splat (float 1.270000e+02), !dbg !136
  %2179 = fcmp uno <4 x float> %2177, zeroinitializer, !dbg !138
  %2180 = or <4 x i1> %2178, %2179, !dbg !139
  %2181 = fptosi <4 x float> %2177 to <4 x i8>, !dbg !140
  %2182 = select <4 x i1> %2180, <4 x i8> %2181, <4 x i8> splat (i8 127), !dbg !141
  %2183 = insertelement <4 x float> poison, float %2158, i64 0, !dbg !131
  %2184 = insertelement <4 x float> %2183, float %2159, i64 1, !dbg !131
  %2185 = insertelement <4 x float> %2184, float %2160, i64 2, !dbg !131
  %2186 = insertelement <4 x float> %2185, float %2161, i64 3, !dbg !131
  %2187 = fcmp ogt <4 x float> %2186, splat (float -1.270000e+02), !dbg !131
  %2188 = fcmp uno <4 x float> %2186, zeroinitializer, !dbg !133
  %2189 = or <4 x i1> %2187, %2188, !dbg !134
  %2190 = select <4 x i1> %2189, <4 x float> %2186, <4 x float> splat (float -1.270000e+02), !dbg !135
  %2191 = fcmp olt <4 x float> %2190, splat (float 1.270000e+02), !dbg !136
  %2192 = fcmp uno <4 x float> %2190, zeroinitializer, !dbg !138
  %2193 = or <4 x i1> %2191, %2192, !dbg !139
  %2194 = fptosi <4 x float> %2190 to <4 x i8>, !dbg !140
  %2195 = select <4 x i1> %2193, <4 x i8> %2194, <4 x i8> splat (i8 127), !dbg !141
  %2196 = insertelement <4 x float> poison, float %2162, i64 0, !dbg !131
  %2197 = insertelement <4 x float> %2196, float %2163, i64 1, !dbg !131
  %2198 = insertelement <4 x float> %2197, float %2164, i64 2, !dbg !131
  %2199 = insertelement <4 x float> %2198, float %2165, i64 3, !dbg !131
  %2200 = fcmp ogt <4 x float> %2199, splat (float -1.270000e+02), !dbg !131
  %2201 = fcmp uno <4 x float> %2199, zeroinitializer, !dbg !133
  %2202 = or <4 x i1> %2200, %2201, !dbg !134
  %2203 = select <4 x i1> %2202, <4 x float> %2199, <4 x float> splat (float -1.270000e+02), !dbg !135
  %2204 = fcmp olt <4 x float> %2203, splat (float 1.270000e+02), !dbg !136
  %2205 = fcmp uno <4 x float> %2203, zeroinitializer, !dbg !138
  %2206 = or <4 x i1> %2204, %2205, !dbg !139
  %2207 = fptosi <4 x float> %2203 to <4 x i8>, !dbg !140
  %2208 = select <4 x i1> %2206, <4 x i8> %2207, <4 x i8> splat (i8 127), !dbg !141
  %2209 = insertelement <4 x float> poison, float %2166, i64 0, !dbg !131
  %2210 = insertelement <4 x float> %2209, float %2167, i64 1, !dbg !131
  %2211 = insertelement <4 x float> %2210, float %2168, i64 2, !dbg !131
  %2212 = insertelement <4 x float> %2211, float %2169, i64 3, !dbg !131
  %2213 = fcmp ogt <4 x float> %2212, splat (float -1.270000e+02), !dbg !131
  %2214 = fcmp uno <4 x float> %2212, zeroinitializer, !dbg !133
  %2215 = or <4 x i1> %2213, %2214, !dbg !134
  %2216 = select <4 x i1> %2215, <4 x float> %2212, <4 x float> splat (float -1.270000e+02), !dbg !135
  %2217 = fcmp olt <4 x float> %2216, splat (float 1.270000e+02), !dbg !136
  %2218 = fcmp uno <4 x float> %2216, zeroinitializer, !dbg !138
  %2219 = or <4 x i1> %2217, %2218, !dbg !139
  %2220 = fptosi <4 x float> %2216 to <4 x i8>, !dbg !140
  %2221 = select <4 x i1> %2219, <4 x i8> %2220, <4 x i8> splat (i8 127), !dbg !141
  %2222 = getelementptr i8, ptr addrspace(1) %8, i64 %1437, !dbg !142
  %2223 = bitcast <4 x i8> %2182 to i32, !dbg !143
  %2224 = bitcast <4 x i8> %2195 to i32, !dbg !143
  %2225 = bitcast <4 x i8> %2208 to i32, !dbg !143
  %2226 = bitcast <4 x i8> %2221 to i32, !dbg !143
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2223, i32 %2224, i32 %2225, i32 %2226, ptr addrspace(1) %2222, i1 %1445) #5, !dbg !143
  br i1 %1428, label %1427, label %2227, !dbg !114

2227:                                             ; preds = %__nv_tanhf.exit338
  ret void, !dbg !144
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 34, column: 31, scope: !6)
!40 = !DILocation(line: 35, column: 29, scope: !6)
!41 = !DILocation(line: 39, column: 41, scope: !6)
!42 = !DILocation(line: 39, column: 34, scope: !6)
!43 = !DILocation(line: 39, column: 60, scope: !6)
!44 = !DILocation(line: 39, column: 52, scope: !6)
!45 = !DILocation(line: 40, column: 35, scope: !6)
!46 = !DILocation(line: 40, column: 42, scope: !6)
!47 = !DILocation(line: 41, column: 35, scope: !6)
!48 = !DILocation(line: 41, column: 42, scope: !6)
!49 = !DILocation(line: 42, column: 23, scope: !6)
!50 = !DILocation(line: 54, column: 23, scope: !6)
!51 = !DILocation(line: 40, column: 95, scope: !6)
!52 = !DILocation(line: 41, column: 95, scope: !6)
!53 = !DILocation(line: 55, column: 24, scope: !6)
!54 = !DILocation(line: 56, column: 24, scope: !6)
!55 = !DILocation(line: 59, column: 24, scope: !6)
!56 = !DILocation(line: 64, column: 24, scope: !6)
!57 = !DILocation(line: 60, column: 24, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 24, scope: !6)
!60 = !DILocation(line: 66, column: 24, scope: !6)
!61 = !DILocation(line: 67, column: 31, scope: !6)
!62 = !{i32 21046}
!63 = !DILocation(line: 69, column: 24, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !65)
!65 = !DILocation(line: 75, column: 47, scope: !6)
!66 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !67)
!67 = !DILocation(line: 73, column: 47, scope: !6)
!68 = !DILocation(line: 70, column: 24, scope: !6)
!69 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !67)
!70 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !67)
!71 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !67)
!72 = !DILocation(line: 74, column: 50, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !65)
!74 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !65)
!75 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !65)
!76 = !DILocation(line: 76, column: 50, scope: !6)
!77 = !DILocation(line: 77, column: 29, scope: !6)
!78 = !DILocation(line: 77, column: 54, scope: !6)
!79 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !80)
!80 = !DILocation(line: 78, column: 40, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !82, inlinedAt: !83)
!82 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!83 = !DILocation(line: 79, column: 40, scope: !6)
!84 = !DILocation(line: 96, column: 21, scope: !82, inlinedAt: !80)
!85 = !DILocation(line: 96, column: 16, scope: !82, inlinedAt: !80)
!86 = !DILocation(line: 97, column: 29, scope: !82, inlinedAt: !80)
!87 = !DILocation(line: 94, column: 15, scope: !82, inlinedAt: !80)
!88 = !DILocation(line: 80, column: 37, scope: !6)
!89 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !83)
!90 = !DILocation(line: 104, column: 21, scope: !82, inlinedAt: !83)
!91 = !DILocation(line: 104, column: 16, scope: !82, inlinedAt: !83)
!92 = !DILocation(line: 105, column: 29, scope: !82, inlinedAt: !83)
!93 = !DILocation(line: 81, column: 37, scope: !6)
!94 = !DILocation(line: 80, column: 25, scope: !6)
!95 = !DILocation(line: 81, column: 25, scope: !6)
!96 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !97)
!97 = !DILocation(line: 104, column: 46, scope: !6)
!98 = !DILocation(line: 105, column: 17, scope: !6)
!99 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 106, column: 46, scope: !6)
!101 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !102)
!104 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !102)
!105 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !102)
!106 = !DILocation(line: 109, column: 24, scope: !6)
!107 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !108)
!108 = !DILocation(line: 112, column: 46, scope: !6)
!109 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !108)
!110 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !108)
!111 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !108)
!112 = !DILocation(line: 115, column: 25, scope: !6)
!113 = !DILocation(line: 117, column: 24, scope: !6)
!114 = !DILocation(line: 82, column: 40, scope: !6)
!115 = !DILocation(line: 83, column: 31, scope: !6)
!116 = !DILocation(line: 84, column: 29, scope: !6)
!117 = !DILocation(line: 88, column: 43, scope: !6)
!118 = !DILocation(line: 88, column: 36, scope: !6)
!119 = !DILocation(line: 88, column: 62, scope: !6)
!120 = !DILocation(line: 88, column: 54, scope: !6)
!121 = !DILocation(line: 90, column: 24, scope: !6)
!122 = !DILocation(line: 91, column: 24, scope: !6)
!123 = !DILocation(line: 92, column: 24, scope: !6)
!124 = !DILocation(line: 94, column: 24, scope: !6)
!125 = !DILocation(line: 95, column: 24, scope: !6)
!126 = !DILocation(line: 97, column: 24, scope: !6)
!127 = !DILocation(line: 98, column: 31, scope: !6)
!128 = !DILocation(line: 100, column: 24, scope: !6)
!129 = !DILocation(line: 101, column: 24, scope: !6)
!130 = !DILocation(line: 118, column: 36, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !132)
!132 = !DILocation(line: 121, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !132)
!136 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 123, column: 46, scope: !6)
!138 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !137)
!140 = !DILocation(line: 125, column: 25, scope: !6)
!141 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !137)
!142 = !DILocation(line: 126, column: 29, scope: !6)
!143 = !DILocation(line: 126, column: 54, scope: !6)
!144 = !DILocation(line: 82, column: 4, scope: !6)
