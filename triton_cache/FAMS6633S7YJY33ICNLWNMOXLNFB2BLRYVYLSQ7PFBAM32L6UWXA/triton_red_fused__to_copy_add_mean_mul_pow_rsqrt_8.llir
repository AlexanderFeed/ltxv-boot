; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 2, !dbg !11
  %13 = and i32 %12, 2044, !dbg !11
  %14 = shl i32 %8, 12, !dbg !12
  %15 = or disjoint i32 %13, %14
  %16 = sext i32 %15 to i64, !dbg !13
  %17 = getelementptr bfloat, ptr addrspace(1) %0, i64 %16, !dbg !13
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %17, i1 %9) #5, !dbg !14
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !14
  %20 = bitcast i32 %19 to <2 x bfloat>, !dbg !14
  %21 = extractvalue { i32, i32 } %18, 1, !dbg !14
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !14
  %23 = getelementptr bfloat, ptr addrspace(1) %1, i64 %16, !dbg !15
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 %9) #5, !dbg !16
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = extractvalue { i32, i32 } %24, 1, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %16, !dbg !17
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %9) #5, !dbg !18
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !18
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !18
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !18
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !18
  %35 = or disjoint i32 %15, 2048, !dbg !19
  %36 = sext i32 %35 to i64, !dbg !13
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !13
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %9) #5, !dbg !14
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !14
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !14
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !14
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !14
  %43 = getelementptr bfloat, ptr addrspace(1) %1, i64 %36, !dbg !15
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %9) #5, !dbg !16
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !16
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !16
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !16
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !16
  %49 = getelementptr bfloat, ptr addrspace(1) %2, i64 %36, !dbg !17
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %9) #5, !dbg !18
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !18
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !18
  %53 = extractvalue { i32, i32 } %50, 1, !dbg !18
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !18
  %55 = fpext <2 x bfloat> %20 to <2 x float>, !dbg !20
  %56 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !21
  %57 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !22
  %58 = fadd <2 x float> %55, %56, !dbg !23
  %59 = fadd <2 x float> %58, %57, !dbg !24
  %60 = fmul <2 x float> %59, %59, !dbg !25
  %61 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !20
  %62 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !21
  %63 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !22
  %64 = fadd <2 x float> %61, %62, !dbg !23
  %65 = fadd <2 x float> %64, %63, !dbg !24
  %66 = fmul <2 x float> %65, %65, !dbg !25
  %67 = fadd <2 x float> %60, %66, !dbg !26
  %68 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !20
  %69 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !21
  %70 = fpext <2 x bfloat> %34 to <2 x float>, !dbg !22
  %71 = fadd <2 x float> %68, %69, !dbg !23
  %72 = fadd <2 x float> %71, %70, !dbg !24
  %73 = fmul <2 x float> %72, %72, !dbg !25
  %74 = fpext <2 x bfloat> %42 to <2 x float>, !dbg !20
  %75 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !21
  %76 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !22
  %77 = fadd <2 x float> %74, %75, !dbg !23
  %78 = fadd <2 x float> %77, %76, !dbg !24
  %79 = fmul <2 x float> %78, %78, !dbg !25
  %80 = fadd <2 x float> %73, %79, !dbg !26
  %81 = lshr i32 %10, 5, !dbg !11
  %shift = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %82 = fadd <2 x float> %67, %shift, !dbg !27
  %83 = fadd <2 x float> %80, %82, !dbg !27
  %shift14 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %84 = fadd <2 x float> %shift14, %83, !dbg !27
  %85 = extractelement <2 x float> %84, i64 0, !dbg !27
  %86 = select i1 %9, float %85, float 0.000000e+00, !dbg !27
  %87 = bitcast float %86 to i32, !dbg !32
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !32
  %89 = bitcast i32 %88 to float, !dbg !32
  %90 = fadd float %86, %89, !dbg !27
  %91 = bitcast float %90 to i32, !dbg !32
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !32
  %93 = bitcast i32 %92 to float, !dbg !32
  %94 = fadd float %90, %93, !dbg !27
  %95 = bitcast float %94 to i32, !dbg !32
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = fadd float %94, %97, !dbg !27
  %99 = bitcast float %98 to i32, !dbg !32
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !32
  %101 = bitcast i32 %100 to float, !dbg !32
  %102 = fadd float %98, %101, !dbg !27
  %103 = bitcast float %102 to i32, !dbg !32
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = fadd float %102, %105, !dbg !27
  %107 = and i32 %81, 15, !dbg !32
  %108 = icmp eq i32 %11, 0, !dbg !32
  %109 = zext nneg i32 %107 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !32
  %111 = bitcast float %106 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %108) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %112 = icmp slt i32 %10, 16, !dbg !32
  %113 = sext i32 %10 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i64 %113, !dbg !32
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %114, i1 %112) #5, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = fadd float %116, %118, !dbg !27
  %120 = bitcast float %119 to i32, !dbg !32
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = fadd float %119, %122, !dbg !27
  %124 = bitcast float %123 to i32, !dbg !32
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = fadd float %123, %126, !dbg !27
  %128 = bitcast float %127 to i32, !dbg !32
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !32
  %130 = bitcast i32 %129 to float, !dbg !32
  %131 = fadd float %127, %130, !dbg !27
  %132 = and i32 %10, 15, !dbg !32
  %133 = icmp eq i32 %132, 0, !dbg !32
  %134 = and i1 %112, %133, !dbg !32
  %135 = bitcast float %131 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %135, i1 %134) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %136 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %137 = tail call float @llvm.nvvm.div.full(float %136, float 4.096000e+03), !dbg !33
  %138 = fadd float %137, 0x3EB0C6F7A0000000, !dbg !34
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i8 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i8, label %145, label %143, !dbg !35

143:                                              ; preds = %__nv_rsqrtf.exit
  %144 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !35
  br label %__nv_rsqrtf.exit10, !dbg !35

145:                                              ; preds = %__nv_rsqrtf.exit
  %146 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !35
  br label %__nv_rsqrtf.exit10, !dbg !35

__nv_rsqrtf.exit10:                               ; preds = %143, %145
  %.0.i9 = phi float [ %144, %143 ], [ %146, %145 ], !dbg !35
  %147 = zext nneg i32 %13 to i64, !dbg !36
  %148 = getelementptr bfloat, ptr addrspace(1) %3, i64 %147, !dbg !37
  %149 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %148, i1 true) #5, !dbg !38
  %150 = extractvalue { i32, i32 } %149, 0, !dbg !38
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !38
  %152 = extractvalue { i32, i32 } %149, 1, !dbg !38
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !38
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %17, i1 %9) #5, !dbg !39
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !39
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !39
  %157 = extractvalue { i32, i32 } %154, 1, !dbg !39
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !39
  %159 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 %9) #5, !dbg !40
  %160 = extractvalue { i32, i32 } %159, 0, !dbg !40
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !40
  %162 = extractvalue { i32, i32 } %159, 1, !dbg !40
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !40
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %9) #5, !dbg !41
  %165 = extractvalue { i32, i32 } %164, 0, !dbg !41
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !41
  %167 = extractvalue { i32, i32 } %164, 1, !dbg !41
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !41
  %169 = getelementptr bfloat, ptr addrspace(1) %4, i64 %16, !dbg !42
  %170 = fpext <2 x bfloat> %151 to <2 x float>, !dbg !43
  %171 = fpext <2 x bfloat> %156 to <2 x float>, !dbg !44
  %172 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !45
  %173 = fpext <2 x bfloat> %166 to <2 x float>, !dbg !46
  %174 = fadd <2 x float> %171, %172, !dbg !47
  %175 = fadd <2 x float> %174, %173, !dbg !48
  %176 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !49
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %178 = fmul <2 x float> %177, %175, !dbg !49
  %179 = fmul <2 x float> %178, %170, !dbg !50
  %180 = fptrunc <2 x float> %179 to <2 x bfloat>, !dbg !51
  %181 = fpext <2 x bfloat> %153 to <2 x float>, !dbg !43
  %182 = fpext <2 x bfloat> %158 to <2 x float>, !dbg !44
  %183 = fpext <2 x bfloat> %163 to <2 x float>, !dbg !45
  %184 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !46
  %185 = fadd <2 x float> %182, %183, !dbg !47
  %186 = fadd <2 x float> %185, %184, !dbg !48
  %187 = fmul <2 x float> %177, %186, !dbg !49
  %188 = fmul <2 x float> %187, %181, !dbg !50
  %189 = fptrunc <2 x float> %188 to <2 x bfloat>, !dbg !51
  %190 = bitcast <2 x bfloat> %180 to i32, !dbg !51
  %191 = bitcast <2 x bfloat> %189 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %191, ptr addrspace(1) %169, i1 %9) #5, !dbg !51
  %192 = or disjoint i64 %147, 2048, !dbg !52
  %193 = getelementptr bfloat, ptr addrspace(1) %3, i64 %192, !dbg !37
  %194 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %193, i1 true) #5, !dbg !38
  %195 = extractvalue { i32, i32 } %194, 0, !dbg !38
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !38
  %197 = extractvalue { i32, i32 } %194, 1, !dbg !38
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !38
  %199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %9) #5, !dbg !39
  %200 = extractvalue { i32, i32 } %199, 0, !dbg !39
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !39
  %202 = extractvalue { i32, i32 } %199, 1, !dbg !39
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !39
  %204 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %9) #5, !dbg !40
  %205 = extractvalue { i32, i32 } %204, 0, !dbg !40
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !40
  %207 = extractvalue { i32, i32 } %204, 1, !dbg !40
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !40
  %209 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %9) #5, !dbg !41
  %210 = extractvalue { i32, i32 } %209, 0, !dbg !41
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !41
  %212 = extractvalue { i32, i32 } %209, 1, !dbg !41
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !41
  %214 = getelementptr bfloat, ptr addrspace(1) %4, i64 %36, !dbg !42
  %215 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !43
  %216 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !44
  %217 = fpext <2 x bfloat> %206 to <2 x float>, !dbg !45
  %218 = fpext <2 x bfloat> %211 to <2 x float>, !dbg !46
  %219 = fadd <2 x float> %216, %217, !dbg !47
  %220 = fadd <2 x float> %219, %218, !dbg !48
  %221 = fmul <2 x float> %177, %220, !dbg !49
  %222 = fmul <2 x float> %221, %215, !dbg !50
  %223 = fptrunc <2 x float> %222 to <2 x bfloat>, !dbg !51
  %224 = fpext <2 x bfloat> %198 to <2 x float>, !dbg !43
  %225 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !44
  %226 = fpext <2 x bfloat> %208 to <2 x float>, !dbg !45
  %227 = fpext <2 x bfloat> %213 to <2 x float>, !dbg !46
  %228 = fadd <2 x float> %225, %226, !dbg !47
  %229 = fadd <2 x float> %228, %227, !dbg !48
  %230 = fmul <2 x float> %177, %229, !dbg !49
  %231 = fmul <2 x float> %230, %224, !dbg !50
  %232 = fptrunc <2 x float> %231 to <2 x bfloat>, !dbg !51
  %233 = bitcast <2 x bfloat> %223 to i32, !dbg !51
  %234 = bitcast <2 x bfloat> %232 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %233, i32 %234, ptr addrspace(1) %214, i1 %9) #5, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckk463o4az44725jwu7r3wl3e47mwpiqpfzua2w2xcx6g43tuzp5.py", directory: "/tmp/torchinductor_root/kk")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 36, column: 46, scope: !6)
!13 = !DILocation(line: 36, column: 34, scope: !6)
!14 = !DILocation(line: 36, column: 51, scope: !6)
!15 = !DILocation(line: 37, column: 34, scope: !6)
!16 = !DILocation(line: 37, column: 51, scope: !6)
!17 = !DILocation(line: 38, column: 34, scope: !6)
!18 = !DILocation(line: 38, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 41, scope: !6)
!20 = !DILocation(line: 36, column: 112, scope: !6)
!21 = !DILocation(line: 37, column: 112, scope: !6)
!22 = !DILocation(line: 38, column: 112, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 40, column: 22, scope: !6)
!25 = !DILocation(line: 42, column: 22, scope: !6)
!26 = !DILocation(line: 44, column: 23, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 61, column: 24, scope: !6)
!34 = !DILocation(line: 63, column: 24, scope: !6)
!35 = !DILocation(line: 64, column: 32, scope: !6)
!36 = !DILocation(line: 47, column: 40, scope: !6)
!37 = !DILocation(line: 53, column: 35, scope: !6)
!38 = !DILocation(line: 53, column: 42, scope: !6)
!39 = !DILocation(line: 54, column: 52, scope: !6)
!40 = !DILocation(line: 55, column: 52, scope: !6)
!41 = !DILocation(line: 56, column: 52, scope: !6)
!42 = !DILocation(line: 68, column: 29, scope: !6)
!43 = !DILocation(line: 53, column: 95, scope: !6)
!44 = !DILocation(line: 54, column: 114, scope: !6)
!45 = !DILocation(line: 55, column: 114, scope: !6)
!46 = !DILocation(line: 56, column: 114, scope: !6)
!47 = !DILocation(line: 57, column: 24, scope: !6)
!48 = !DILocation(line: 58, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 24, scope: !6)
!50 = !DILocation(line: 67, column: 24, scope: !6)
!51 = !DILocation(line: 68, column: 53, scope: !6)
!52 = !DILocation(line: 48, column: 31, scope: !6)
!53 = !DILocation(line: 47, column: 4, scope: !6)
