; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 128, !dbg !11
  %.lobit = lshr exact i32 %20, 7, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 3, !dbg !14
  %26 = and i32 %25, 2040, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = shl i32 %19, 4, !dbg !14
  %29 = and i32 %28, 2032, !dbg !14
  %30 = or disjoint i32 %29, 4, !dbg !14
  %31 = or disjoint i32 %29, 8, !dbg !14
  %32 = or disjoint i32 %29, 12, !dbg !14
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %51 = bitcast i16 %50 to bfloat, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !17
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = mul i32 %22, 3072, !dbg !19
  %71 = mul i32 %17, 6144, !dbg !19
  %72 = add i32 %71, 3072, !dbg !19
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !20
  %73 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !20
  %74 = fpext bfloat %73 to float, !dbg !20
  %75 = fsub float 0.000000e+00, %74, !dbg !24
  %.inv4 = fcmp ole bfloat %69, 0xR0000, !dbg !25
  %76 = select i1 %.inv4, bfloat 0xR0000, bfloat %69, !dbg !25
  %77 = fpext bfloat %76 to float, !dbg !25
  %78 = fcmp ogt float %75, %77, !dbg !27
  %79 = fcmp uno float %75, 0.000000e+00, !dbg !29
  %80 = or i1 %79, %78, !dbg !30
  %81 = select i1 %80, float %75, float %77, !dbg !31
  %82 = fmul float %81, 0x3F80204080000000, !dbg !32
  %83 = fcmp ogt float %82, 0x3EE4F8B580000000, !dbg !33
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !35
  %85 = or i1 %83, %84, !dbg !36
  %86 = select i1 %85, float %82, float 0x3EE4F8B580000000, !dbg !37
  %87 = add i32 %70, %30
  %88 = add i32 %70, %31
  %89 = add i32 %70, %32
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %90 = and i32 %28, 4080
  %91 = lshr i32 %28, 7
  %.idx = and i32 %91, 16
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %93 = getelementptr bfloat, ptr addrspace(3) %92, i32 %90
  %94 = or disjoint i32 %90, 8
  %95 = getelementptr bfloat, ptr addrspace(3) %92, i32 %94
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %97 = getelementptr inbounds nuw i8, ptr addrspace(3) %96, i32 4112
  %98 = getelementptr float, ptr addrspace(3) %92, i32 %90
  %99 = or disjoint i32 %90, 4
  %100 = lshr i32 %28, 9
  %101 = and i32 %100, 4
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99
  %104 = getelementptr float, ptr addrspace(3) %92, i32 %94
  %105 = or disjoint i32 %90, 12
  %106 = getelementptr float, ptr addrspace(3) %102, i32 %105
  %107 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %108 = or disjoint i32 %26, 2052
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %108
  %110 = zext nneg i32 %29 to i64, !dbg !38
  %111 = zext nneg i32 %27 to i64, !dbg !38
  %112 = zext nneg i32 %26 to i64, !dbg !38
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %96, i32 4116
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %96, i32 4124
  br label %115, !dbg !38

115:                                              ; preds = %16, %._crit_edge
  %116 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %16 ], [ %548, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %16 ], [ %549, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %16 ], [ %550, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %16 ], [ %551, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %16 ], [ %552, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %16 ], [ %553, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %16 ], [ %554, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %16 ], [ %555, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %16 ], [ %556, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %16 ], [ %557, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %16 ], [ %558, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %16 ], [ %559, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %16 ], [ %560, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %16 ], [ %561, %._crit_edge ]
  %131 = phi float [ 0.000000e+00, %16 ], [ %562, %._crit_edge ]
  %132 = phi float [ 0.000000e+00, %16 ], [ %563, %._crit_edge ]
  %133 = phi float [ 0.000000e+00, %16 ], [ %532, %._crit_edge ]
  %134 = phi float [ 0.000000e+00, %16 ], [ %533, %._crit_edge ]
  %135 = phi float [ 0.000000e+00, %16 ], [ %534, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %16 ], [ %535, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %536, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %537, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %538, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %543, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %544, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %545, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %546, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %547, %._crit_edge ]
  %149 = phi <16 x float> [ zeroinitializer, %16 ], [ %531, %._crit_edge ]
  %150 = or disjoint i64 %indvars.iv, %112, !dbg !39
  %151 = or disjoint i64 %indvars.iv, %111, !dbg !39
  %152 = or disjoint i64 %indvars.iv, %110, !dbg !39
  %153 = icmp samesign ult i64 %150, 3072, !dbg !40
  %154 = icmp samesign ult i64 %152, 3072, !dbg !40
  %155 = trunc nuw nsw i64 %152 to i32, !dbg !41
  %156 = add i32 %70, %155, !dbg !41
  %157 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %158 = add i32 %87, %157, !dbg !41
  %159 = add i32 %88, %157, !dbg !41
  %160 = add i32 %89, %157, !dbg !41
  %161 = trunc nuw nsw i64 %150 to i32, !dbg !41
  %162 = add i32 %71, %161, !dbg !41
  %163 = add i32 %72, %161, !dbg !41
  %164 = sext i32 %156 to i64, !dbg !42
  %165 = getelementptr bfloat, ptr addrspace(1) %0, i64 %164, !dbg !42
  %166 = sext i32 %159 to i64, !dbg !42
  %167 = getelementptr bfloat, ptr addrspace(1) %0, i64 %166, !dbg !42
  %168 = and i1 %24, %153, !dbg !43
  %169 = and i1 %23, %154, !dbg !43
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %165, i1 %169) #5, !dbg !44
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !44
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !44
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !44
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !44
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %167, i1 %169) #5, !dbg !44
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !44
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !44
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !44
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %93, i32 %171, i32 %172, i32 %173, i32 %174, i1 true) #5, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %95, i32 %176, i32 %177, i32 %178, i32 %179, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %180 = add nuw nsw i64 %150, 6144, !dbg !46
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !47
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %151, !dbg !47
  %182 = getelementptr bfloat, ptr addrspace(1) %2, i64 %180, !dbg !48
  %183 = getelementptr i32, ptr addrspace(1) %3, i64 %164, !dbg !49
  %184 = sext i32 %158 to i64, !dbg !49
  %185 = getelementptr i32, ptr addrspace(1) %3, i64 %184, !dbg !49
  %186 = getelementptr i32, ptr addrspace(1) %3, i64 %166, !dbg !49
  %187 = sext i32 %160 to i64, !dbg !49
  %188 = getelementptr i32, ptr addrspace(1) %3, i64 %187, !dbg !49
  %189 = getelementptr bfloat, ptr addrspace(1) %6, i64 %150, !dbg !50
  %190 = getelementptr bfloat, ptr addrspace(1) %7, i64 %150, !dbg !51
  %191 = load <8 x bfloat>, ptr addrspace(3) %96, align 16, !dbg !45
  %192 = load <8 x bfloat>, ptr addrspace(3) %97, align 16, !dbg !45
  %193 = shufflevector <8 x bfloat> %191, <8 x bfloat> %192, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !45
  %194 = fpext <16 x bfloat> %193 to <16 x float>, !dbg !45
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %181, i1 %153) #5, !dbg !52
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !52
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !52
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !52
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !52
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 %153) #5, !dbg !52
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !52
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !52
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !52
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !52
  %205 = insertelement <8 x i32> poison, i32 %196, i64 0, !dbg !52
  %206 = insertelement <8 x i32> %205, i32 %197, i64 1, !dbg !52
  %207 = insertelement <8 x i32> %206, i32 %198, i64 2, !dbg !52
  %208 = insertelement <8 x i32> %207, i32 %199, i64 3, !dbg !52
  %209 = insertelement <8 x i32> %208, i32 %201, i64 4, !dbg !52
  %210 = insertelement <8 x i32> %209, i32 %202, i64 5, !dbg !52
  %211 = insertelement <8 x i32> %210, i32 %203, i64 6, !dbg !52
  %212 = insertelement <8 x i32> %211, i32 %204, i64 7, !dbg !52
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !52
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %182, i1 %153) #5, !dbg !53
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !53
  %216 = bitcast i32 %215 to <2 x bfloat>, !dbg !53
  %217 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !53
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !53
  %219 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !53
  %220 = bitcast i32 %219 to <2 x bfloat>, !dbg !53
  %221 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !53
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !53
  %223 = shufflevector <2 x bfloat> %216, <2 x bfloat> %218, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %224 = shufflevector <2 x bfloat> %220, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %225 = shufflevector <8 x bfloat> %223, <8 x bfloat> %224, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !54
  %226 = shufflevector <2 x bfloat> %220, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %227 = shufflevector <8 x bfloat> %225, <8 x bfloat> %226, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !54
  %228 = shufflevector <2 x bfloat> %222, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %229 = shufflevector <8 x bfloat> %227, <8 x bfloat> %228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !54
  %230 = shufflevector <2 x bfloat> %222, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %231 = shufflevector <8 x bfloat> %229, <8 x bfloat> %230, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !54
  %232 = fpext <8 x bfloat> %231 to <8 x float>, !dbg !54
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %169) #5, !dbg !55
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !55
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !55
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !55
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !55
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %169) #5, !dbg !55
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !55
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !55
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !55
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !55
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %169) #5, !dbg !55
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !55
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !55
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !55
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !55
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %169) #5, !dbg !55
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !55
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !55
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !55
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !55
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %189, i1 %153) #5, !dbg !56
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !56
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !56
  %256 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !56
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !56
  %258 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !56
  %259 = bitcast i32 %258 to <2 x bfloat>, !dbg !56
  %260 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !56
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !56
  %262 = shufflevector <2 x bfloat> %255, <2 x bfloat> %257, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %263 = shufflevector <2 x bfloat> %259, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %264 = shufflevector <8 x bfloat> %262, <8 x bfloat> %263, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !57
  %265 = shufflevector <2 x bfloat> %259, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %266 = shufflevector <8 x bfloat> %264, <8 x bfloat> %265, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !57
  %267 = shufflevector <2 x bfloat> %261, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %268 = shufflevector <8 x bfloat> %266, <8 x bfloat> %267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !57
  %269 = shufflevector <2 x bfloat> %261, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !57
  %270 = shufflevector <8 x bfloat> %268, <8 x bfloat> %269, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !57
  %271 = fpext <8 x bfloat> %270 to <8 x float>, !dbg !57
  %272 = shufflevector <8 x float> %271, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !57
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %190, i1 %153) #5, !dbg !58
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !58
  %275 = bitcast i32 %274 to <2 x bfloat>, !dbg !58
  %276 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !58
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !58
  %278 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !58
  %279 = bitcast i32 %278 to <2 x bfloat>, !dbg !58
  %280 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !58
  %281 = bitcast i32 %280 to <2 x bfloat>, !dbg !58
  %282 = shufflevector <2 x bfloat> %275, <2 x bfloat> %277, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %283 = shufflevector <2 x bfloat> %279, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %284 = shufflevector <8 x bfloat> %282, <8 x bfloat> %283, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !59
  %285 = shufflevector <2 x bfloat> %279, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %286 = shufflevector <8 x bfloat> %284, <8 x bfloat> %285, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !59
  %287 = shufflevector <2 x bfloat> %281, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %288 = shufflevector <8 x bfloat> %286, <8 x bfloat> %287, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !59
  %289 = shufflevector <2 x bfloat> %281, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %290 = shufflevector <8 x bfloat> %288, <8 x bfloat> %289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !59
  %291 = fpext <8 x bfloat> %290 to <8 x float>, !dbg !59
  %292 = shufflevector <8 x float> %291, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %293 = fadd <8 x float> %213, %232, !dbg !60
  %294 = shufflevector <8 x float> %293, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !60
  %295 = sitofp i32 %234 to float, !dbg !61
  %296 = sitofp i32 %235 to float, !dbg !61
  %297 = sitofp i32 %236 to float, !dbg !61
  %298 = sitofp i32 %237 to float, !dbg !61
  %299 = sitofp i32 %239 to float, !dbg !61
  %300 = sitofp i32 %240 to float, !dbg !61
  %301 = sitofp i32 %241 to float, !dbg !61
  %302 = sitofp i32 %242 to float, !dbg !61
  %303 = sitofp i32 %244 to float, !dbg !61
  %304 = sitofp i32 %245 to float, !dbg !61
  %305 = sitofp i32 %246 to float, !dbg !61
  %306 = sitofp i32 %247 to float, !dbg !61
  %307 = sitofp i32 %249 to float, !dbg !61
  %308 = sitofp i32 %250 to float, !dbg !61
  %309 = sitofp i32 %251 to float, !dbg !61
  %310 = sitofp i32 %252 to float, !dbg !61
  %311 = fmul float %86, %295, !dbg !62
  %312 = fmul float %86, %296, !dbg !62
  %313 = fmul float %86, %297, !dbg !62
  %314 = fmul float %86, %298, !dbg !62
  %315 = fmul float %86, %299, !dbg !62
  %316 = fmul float %86, %300, !dbg !62
  %317 = fmul float %86, %301, !dbg !62
  %318 = fmul float %86, %302, !dbg !62
  %319 = fmul float %86, %303, !dbg !62
  %320 = fmul float %86, %304, !dbg !62
  %321 = fmul float %86, %305, !dbg !62
  %322 = fmul float %86, %306, !dbg !62
  %323 = fmul float %86, %307, !dbg !62
  %324 = fmul float %86, %308, !dbg !62
  %325 = fmul float %86, %309, !dbg !62
  %326 = fmul float %86, %310, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %327 = bitcast float %311 to i32, !dbg !62
  %328 = bitcast float %312 to i32, !dbg !62
  %329 = bitcast float %313 to i32, !dbg !62
  %330 = bitcast float %314 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %98, i32 %327, i32 %328, i32 %329, i32 %330, i1 true) #5, !dbg !62
  %331 = bitcast float %315 to i32, !dbg !62
  %332 = bitcast float %316 to i32, !dbg !62
  %333 = bitcast float %317 to i32, !dbg !62
  %334 = bitcast float %318 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %103, i32 %331, i32 %332, i32 %333, i32 %334, i1 true) #5, !dbg !62
  %335 = bitcast float %319 to i32, !dbg !62
  %336 = bitcast float %320 to i32, !dbg !62
  %337 = bitcast float %321 to i32, !dbg !62
  %338 = bitcast float %322 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %104, i32 %335, i32 %336, i32 %337, i32 %338, i1 true) #5, !dbg !62
  %339 = bitcast float %323 to i32, !dbg !62
  %340 = bitcast float %324 to i32, !dbg !62
  %341 = bitcast float %325 to i32, !dbg !62
  %342 = bitcast float %326 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %106, i32 %339, i32 %340, i32 %341, i32 %342, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %343 = load <8 x float>, ptr addrspace(3) %107, align 16, !dbg !62
  %344 = load <8 x float>, ptr addrspace(3) %109, align 16, !dbg !62
  %345 = shufflevector <8 x float> %343, <8 x float> %344, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !63
  %346 = fmul <16 x float> %345, %272, !dbg !63
  %347 = fadd <16 x float> %346, %292, !dbg !64
  %348 = fmul <16 x float> %294, %347, !dbg !65
  %349 = fadd <16 x float> %348, %194, !dbg !66
  br i1 %116, label %._crit_edge, label %350, !dbg !67

350:                                              ; preds = %115
  %351 = fsub <16 x float> %349, %149, !dbg !69
  %352 = extractelement <16 x float> %351, i64 0, !dbg !69
  %353 = fsub <16 x float> %349, %149, !dbg !69
  %354 = extractelement <16 x float> %353, i64 1, !dbg !69
  %355 = fsub <16 x float> %349, %149, !dbg !69
  %356 = extractelement <16 x float> %355, i64 2, !dbg !69
  %357 = fsub <16 x float> %349, %149, !dbg !69
  %358 = extractelement <16 x float> %357, i64 3, !dbg !69
  %359 = fsub <16 x float> %349, %149, !dbg !69
  %360 = extractelement <16 x float> %359, i64 4, !dbg !69
  %361 = fsub <16 x float> %349, %149, !dbg !69
  %362 = extractelement <16 x float> %361, i64 5, !dbg !69
  %363 = fsub <16 x float> %349, %149, !dbg !69
  %364 = extractelement <16 x float> %363, i64 6, !dbg !69
  %365 = fsub <16 x float> %349, %149, !dbg !69
  %366 = extractelement <16 x float> %365, i64 7, !dbg !69
  %367 = fsub <16 x float> %349, %149, !dbg !69
  %368 = extractelement <16 x float> %367, i64 8, !dbg !69
  %369 = fsub <16 x float> %349, %149, !dbg !69
  %370 = extractelement <16 x float> %369, i64 9, !dbg !69
  %371 = fsub <16 x float> %349, %149, !dbg !69
  %372 = extractelement <16 x float> %371, i64 10, !dbg !69
  %373 = fsub <16 x float> %349, %149, !dbg !69
  %374 = extractelement <16 x float> %373, i64 11, !dbg !69
  %375 = fsub <16 x float> %349, %149, !dbg !69
  %376 = extractelement <16 x float> %375, i64 12, !dbg !69
  %377 = fsub <16 x float> %349, %149, !dbg !69
  %378 = extractelement <16 x float> %377, i64 13, !dbg !69
  %379 = fsub <16 x float> %349, %149, !dbg !69
  %380 = extractelement <16 x float> %379, i64 14, !dbg !69
  %381 = fsub <16 x float> %349, %149, !dbg !69
  %382 = extractelement <16 x float> %381, i64 15, !dbg !69
  %383 = fadd float %117, 1.000000e+00, !dbg !70
  %384 = fadd float %118, 1.000000e+00, !dbg !70
  %385 = fadd float %119, 1.000000e+00, !dbg !70
  %386 = fadd float %120, 1.000000e+00, !dbg !70
  %387 = fadd float %121, 1.000000e+00, !dbg !70
  %388 = fadd float %122, 1.000000e+00, !dbg !70
  %389 = fadd float %123, 1.000000e+00, !dbg !70
  %390 = fadd float %124, 1.000000e+00, !dbg !70
  %391 = fadd float %125, 1.000000e+00, !dbg !70
  %392 = fadd float %126, 1.000000e+00, !dbg !70
  %393 = fadd float %127, 1.000000e+00, !dbg !70
  %394 = fadd float %128, 1.000000e+00, !dbg !70
  %395 = fadd float %129, 1.000000e+00, !dbg !70
  %396 = fadd float %130, 1.000000e+00, !dbg !70
  %397 = fadd float %131, 1.000000e+00, !dbg !70
  %398 = fadd float %132, 1.000000e+00, !dbg !70
  %399 = tail call float @llvm.nvvm.div.full(float %352, float %383), !dbg !71
  %400 = tail call float @llvm.nvvm.div.full(float %354, float %384), !dbg !71
  %401 = tail call float @llvm.nvvm.div.full(float %356, float %385), !dbg !71
  %402 = tail call float @llvm.nvvm.div.full(float %358, float %386), !dbg !71
  %403 = tail call float @llvm.nvvm.div.full(float %360, float %387), !dbg !71
  %404 = tail call float @llvm.nvvm.div.full(float %362, float %388), !dbg !71
  %405 = tail call float @llvm.nvvm.div.full(float %364, float %389), !dbg !71
  %406 = tail call float @llvm.nvvm.div.full(float %366, float %390), !dbg !71
  %407 = tail call float @llvm.nvvm.div.full(float %368, float %391), !dbg !71
  %408 = tail call float @llvm.nvvm.div.full(float %370, float %392), !dbg !71
  %409 = tail call float @llvm.nvvm.div.full(float %372, float %393), !dbg !71
  %410 = tail call float @llvm.nvvm.div.full(float %374, float %394), !dbg !71
  %411 = tail call float @llvm.nvvm.div.full(float %376, float %395), !dbg !71
  %412 = tail call float @llvm.nvvm.div.full(float %378, float %396), !dbg !71
  %413 = tail call float @llvm.nvvm.div.full(float %380, float %397), !dbg !71
  %414 = tail call float @llvm.nvvm.div.full(float %382, float %398), !dbg !71
  %415 = insertelement <16 x float> poison, float %399, i64 0, !dbg !72
  %416 = insertelement <16 x float> %415, float %400, i64 1, !dbg !72
  %417 = insertelement <16 x float> %416, float %401, i64 2, !dbg !72
  %418 = insertelement <16 x float> %417, float %402, i64 3, !dbg !72
  %419 = insertelement <16 x float> %418, float %403, i64 4, !dbg !72
  %420 = insertelement <16 x float> %419, float %404, i64 5, !dbg !72
  %421 = insertelement <16 x float> %420, float %405, i64 6, !dbg !72
  %422 = insertelement <16 x float> %421, float %406, i64 7, !dbg !72
  %423 = insertelement <16 x float> %422, float %407, i64 8, !dbg !72
  %424 = insertelement <16 x float> %423, float %408, i64 9, !dbg !72
  %425 = insertelement <16 x float> %424, float %409, i64 10, !dbg !72
  %426 = insertelement <16 x float> %425, float %410, i64 11, !dbg !72
  %427 = insertelement <16 x float> %426, float %411, i64 12, !dbg !72
  %428 = insertelement <16 x float> %427, float %412, i64 13, !dbg !72
  %429 = insertelement <16 x float> %428, float %413, i64 14, !dbg !72
  %430 = insertelement <16 x float> %429, float %414, i64 15, !dbg !72
  %431 = fadd <16 x float> %149, %430, !dbg !72
  %432 = fsub <16 x float> %349, %431, !dbg !73
  %433 = fsub <16 x float> %349, %431, !dbg !73
  %434 = fsub <16 x float> %349, %431, !dbg !73
  %435 = fsub <16 x float> %349, %431, !dbg !73
  %436 = fsub <16 x float> %349, %431, !dbg !73
  %437 = fsub <16 x float> %349, %431, !dbg !73
  %438 = fsub <16 x float> %349, %431, !dbg !73
  %439 = fsub <16 x float> %349, %431, !dbg !73
  %440 = fsub <16 x float> %349, %431, !dbg !73
  %441 = fsub <16 x float> %349, %431, !dbg !73
  %442 = fsub <16 x float> %349, %431, !dbg !73
  %443 = fsub <16 x float> %349, %431, !dbg !73
  %444 = fsub <16 x float> %349, %431, !dbg !73
  %445 = fsub <16 x float> %349, %431, !dbg !73
  %446 = fsub <16 x float> %349, %431, !dbg !73
  %447 = fsub <16 x float> %349, %431, !dbg !73
  %448 = fmul <16 x float> %351, %432, !dbg !74
  %449 = extractelement <16 x float> %448, i64 0, !dbg !74
  %450 = fmul <16 x float> %353, %433, !dbg !74
  %451 = extractelement <16 x float> %450, i64 1, !dbg !74
  %452 = fmul <16 x float> %355, %434, !dbg !74
  %453 = extractelement <16 x float> %452, i64 2, !dbg !74
  %454 = fmul <16 x float> %357, %435, !dbg !74
  %455 = extractelement <16 x float> %454, i64 3, !dbg !74
  %456 = fmul <16 x float> %359, %436, !dbg !74
  %457 = extractelement <16 x float> %456, i64 4, !dbg !74
  %458 = fmul <16 x float> %361, %437, !dbg !74
  %459 = extractelement <16 x float> %458, i64 5, !dbg !74
  %460 = fmul <16 x float> %363, %438, !dbg !74
  %461 = extractelement <16 x float> %460, i64 6, !dbg !74
  %462 = fmul <16 x float> %365, %439, !dbg !74
  %463 = extractelement <16 x float> %462, i64 7, !dbg !74
  %464 = fmul <16 x float> %367, %440, !dbg !74
  %465 = extractelement <16 x float> %464, i64 8, !dbg !74
  %466 = fmul <16 x float> %369, %441, !dbg !74
  %467 = extractelement <16 x float> %466, i64 9, !dbg !74
  %468 = fmul <16 x float> %371, %442, !dbg !74
  %469 = extractelement <16 x float> %468, i64 10, !dbg !74
  %470 = fmul <16 x float> %373, %443, !dbg !74
  %471 = extractelement <16 x float> %470, i64 11, !dbg !74
  %472 = fmul <16 x float> %375, %444, !dbg !74
  %473 = extractelement <16 x float> %472, i64 12, !dbg !74
  %474 = fmul <16 x float> %377, %445, !dbg !74
  %475 = extractelement <16 x float> %474, i64 13, !dbg !74
  %476 = fmul <16 x float> %379, %446, !dbg !74
  %477 = extractelement <16 x float> %476, i64 14, !dbg !74
  %478 = fmul <16 x float> %381, %447, !dbg !74
  %479 = extractelement <16 x float> %478, i64 15, !dbg !74
  %480 = fadd float %133, %449, !dbg !75
  %481 = fadd float %134, %451, !dbg !75
  %482 = fadd float %135, %453, !dbg !75
  %483 = fadd float %136, %455, !dbg !75
  %484 = fadd float %137, %457, !dbg !75
  %485 = fadd float %138, %459, !dbg !75
  %486 = fadd float %139, %461, !dbg !75
  %487 = fadd float %140, %463, !dbg !75
  %488 = fadd float %141, %465, !dbg !75
  %489 = fadd float %142, %467, !dbg !75
  %490 = fadd float %143, %469, !dbg !75
  %491 = fadd float %144, %471, !dbg !75
  %492 = fadd float %145, %473, !dbg !75
  %493 = fadd float %146, %475, !dbg !75
  %494 = fadd float %147, %477, !dbg !75
  %495 = fadd float %148, %479, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %115, %350
  %496 = phi float [ %480, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %497 = phi float [ %481, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %498 = phi float [ %482, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %499 = phi float [ %483, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %500 = phi float [ %484, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %501 = phi float [ %485, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %502 = phi float [ %486, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %503 = phi float [ %487, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %504 = phi float [ %488, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %505 = phi float [ %489, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %506 = phi float [ %490, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %507 = phi float [ %491, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %508 = phi float [ %492, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %509 = phi float [ %493, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %510 = phi float [ %494, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %511 = phi float [ %495, %350 ], [ 0.000000e+00, %115 ], !dbg !68
  %512 = phi float [ %383, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %513 = phi float [ %384, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %514 = phi float [ %385, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %515 = phi float [ %386, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %516 = phi float [ %387, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %517 = phi float [ %388, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %518 = phi float [ %389, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %519 = phi float [ %390, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %520 = phi float [ %391, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %521 = phi float [ %392, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %522 = phi float [ %393, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %523 = phi float [ %394, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %524 = phi float [ %395, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %525 = phi float [ %396, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %526 = phi float [ %397, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %527 = phi float [ %398, %350 ], [ 1.000000e+00, %115 ], !dbg !68
  %528 = phi <16 x float> [ %431, %350 ], [ %349, %115 ]
  %529 = insertelement <16 x i1> poison, i1 %168, i64 0, !dbg !76
  %530 = shufflevector <16 x i1> %529, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !76
  %531 = select <16 x i1> %530, <16 x float> %528, <16 x float> %149, !dbg !76
  %532 = select i1 %168, float %496, float %133, !dbg !77
  %533 = select i1 %168, float %497, float %134, !dbg !77
  %534 = select i1 %168, float %498, float %135, !dbg !77
  %535 = select i1 %168, float %499, float %136, !dbg !77
  %536 = select i1 %168, float %500, float %137, !dbg !77
  %537 = select i1 %168, float %501, float %138, !dbg !77
  %538 = select i1 %168, float %502, float %139, !dbg !77
  %539 = select i1 %168, float %503, float %140, !dbg !77
  %540 = select i1 %168, float %504, float %141, !dbg !77
  %541 = select i1 %168, float %505, float %142, !dbg !77
  %542 = select i1 %168, float %506, float %143, !dbg !77
  %543 = select i1 %168, float %507, float %144, !dbg !77
  %544 = select i1 %168, float %508, float %145, !dbg !77
  %545 = select i1 %168, float %509, float %146, !dbg !77
  %546 = select i1 %168, float %510, float %147, !dbg !77
  %547 = select i1 %168, float %511, float %148, !dbg !77
  %548 = select i1 %168, float %512, float %117, !dbg !78
  %549 = select i1 %168, float %513, float %118, !dbg !78
  %550 = select i1 %168, float %514, float %119, !dbg !78
  %551 = select i1 %168, float %515, float %120, !dbg !78
  %552 = select i1 %168, float %516, float %121, !dbg !78
  %553 = select i1 %168, float %517, float %122, !dbg !78
  %554 = select i1 %168, float %518, float %123, !dbg !78
  %555 = select i1 %168, float %519, float %124, !dbg !78
  %556 = select i1 %168, float %520, float %125, !dbg !78
  %557 = select i1 %168, float %521, float %126, !dbg !78
  %558 = select i1 %168, float %522, float %127, !dbg !78
  %559 = select i1 %168, float %523, float %128, !dbg !78
  %560 = select i1 %168, float %524, float %129, !dbg !78
  %561 = select i1 %168, float %525, float %130, !dbg !78
  %562 = select i1 %168, float %526, float %131, !dbg !78
  %563 = select i1 %168, float %527, float %132, !dbg !78
  %564 = sext i32 %162 to i64, !dbg !79
  %565 = getelementptr bfloat, ptr addrspace(1) %8, i64 %564, !dbg !79
  %566 = sext i32 %163 to i64, !dbg !79
  %567 = getelementptr bfloat, ptr addrspace(1) %8, i64 %566, !dbg !79
  %568 = extractelement <16 x float> %349, i64 0, !dbg !80
  %569 = fptrunc float %568 to bfloat, !dbg !80
  %570 = extractelement <16 x float> %349, i64 1, !dbg !80
  %571 = fptrunc float %570 to bfloat, !dbg !80
  %572 = extractelement <16 x float> %349, i64 2, !dbg !80
  %573 = fptrunc float %572 to bfloat, !dbg !80
  %574 = extractelement <16 x float> %349, i64 3, !dbg !80
  %575 = fptrunc float %574 to bfloat, !dbg !80
  %576 = extractelement <16 x float> %349, i64 4, !dbg !80
  %577 = fptrunc float %576 to bfloat, !dbg !80
  %578 = extractelement <16 x float> %349, i64 5, !dbg !80
  %579 = fptrunc float %578 to bfloat, !dbg !80
  %580 = extractelement <16 x float> %349, i64 6, !dbg !80
  %581 = fptrunc float %580 to bfloat, !dbg !80
  %582 = extractelement <16 x float> %349, i64 7, !dbg !80
  %583 = fptrunc float %582 to bfloat, !dbg !80
  %584 = extractelement <16 x float> %349, i64 8, !dbg !80
  %585 = fptrunc float %584 to bfloat, !dbg !80
  %586 = extractelement <16 x float> %349, i64 9, !dbg !80
  %587 = fptrunc float %586 to bfloat, !dbg !80
  %588 = extractelement <16 x float> %349, i64 10, !dbg !80
  %589 = fptrunc float %588 to bfloat, !dbg !80
  %590 = extractelement <16 x float> %349, i64 11, !dbg !80
  %591 = fptrunc float %590 to bfloat, !dbg !80
  %592 = extractelement <16 x float> %349, i64 12, !dbg !80
  %593 = fptrunc float %592 to bfloat, !dbg !80
  %594 = extractelement <16 x float> %349, i64 13, !dbg !80
  %595 = fptrunc float %594 to bfloat, !dbg !80
  %596 = extractelement <16 x float> %349, i64 14, !dbg !80
  %597 = fptrunc float %596 to bfloat, !dbg !80
  %598 = extractelement <16 x float> %349, i64 15, !dbg !80
  %599 = fptrunc float %598 to bfloat, !dbg !80
  %600 = insertelement <2 x bfloat> poison, bfloat %569, i64 0, !dbg !80
  %601 = insertelement <2 x bfloat> %600, bfloat %571, i64 1, !dbg !80
  %602 = bitcast <2 x bfloat> %601 to i32, !dbg !80
  %603 = insertelement <2 x bfloat> poison, bfloat %573, i64 0, !dbg !80
  %604 = insertelement <2 x bfloat> %603, bfloat %575, i64 1, !dbg !80
  %605 = bitcast <2 x bfloat> %604 to i32, !dbg !80
  %606 = insertelement <2 x bfloat> poison, bfloat %577, i64 0, !dbg !80
  %607 = insertelement <2 x bfloat> %606, bfloat %579, i64 1, !dbg !80
  %608 = bitcast <2 x bfloat> %607 to i32, !dbg !80
  %609 = insertelement <2 x bfloat> poison, bfloat %581, i64 0, !dbg !80
  %610 = insertelement <2 x bfloat> %609, bfloat %583, i64 1, !dbg !80
  %611 = bitcast <2 x bfloat> %610 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %605, i32 %608, i32 %611, ptr addrspace(1) %565, i1 %168) #5, !dbg !80
  %612 = insertelement <2 x bfloat> poison, bfloat %585, i64 0, !dbg !80
  %613 = insertelement <2 x bfloat> %612, bfloat %587, i64 1, !dbg !80
  %614 = bitcast <2 x bfloat> %613 to i32, !dbg !80
  %615 = insertelement <2 x bfloat> poison, bfloat %589, i64 0, !dbg !80
  %616 = insertelement <2 x bfloat> %615, bfloat %591, i64 1, !dbg !80
  %617 = bitcast <2 x bfloat> %616 to i32, !dbg !80
  %618 = insertelement <2 x bfloat> poison, bfloat %593, i64 0, !dbg !80
  %619 = insertelement <2 x bfloat> %618, bfloat %595, i64 1, !dbg !80
  %620 = bitcast <2 x bfloat> %619 to i32, !dbg !80
  %621 = insertelement <2 x bfloat> poison, bfloat %597, i64 0, !dbg !80
  %622 = insertelement <2 x bfloat> %621, bfloat %599, i64 1, !dbg !80
  %623 = bitcast <2 x bfloat> %622 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %614, i32 %617, i32 %620, i32 %623, ptr addrspace(1) %567, i1 %168) #5, !dbg !80
  br i1 %116, label %115, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %624 = lshr i32 %19, 5, !dbg !11
  %625 = and i32 %19, 1, !dbg !11
  %626 = or disjoint i32 %18, %625, !dbg !12
  %627 = icmp slt i32 %626, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %628 = extractelement <16 x float> %531, i64 0, !dbg !83
  %629 = extractelement <16 x float> %531, i64 1, !dbg !83
  %630 = fsub float %629, %628, !dbg !83
  %631 = fadd float %548, %549, !dbg !85
  %632 = fcmp oeq float %631, 0.000000e+00, !dbg !86
  %633 = tail call float @llvm.nvvm.div.full(float %549, float %631), !dbg !87
  %634 = select i1 %632, float 0.000000e+00, float %633, !dbg !88
  %635 = fmul float %630, %634, !dbg !89
  %636 = fadd float %628, %635, !dbg !90
  %637 = fadd float %532, %533, !dbg !91
  %638 = fmul float %630, %630, !dbg !92
  %639 = fmul float %638, %548, !dbg !93
  %640 = fmul float %639, %634, !dbg !94
  %641 = fadd float %637, %640, !dbg !95
  %642 = extractelement <16 x float> %531, i64 2, !dbg !83
  %643 = fsub float %642, %636, !dbg !83
  %644 = fadd float %550, %631, !dbg !85
  %645 = fcmp oeq float %644, 0.000000e+00, !dbg !86
  %646 = tail call float @llvm.nvvm.div.full(float %550, float %644), !dbg !87
  %647 = select i1 %645, float 0.000000e+00, float %646, !dbg !88
  %648 = fmul float %647, %643, !dbg !89
  %649 = fadd float %636, %648, !dbg !90
  %650 = fadd float %534, %641, !dbg !91
  %651 = fmul float %643, %643, !dbg !92
  %652 = fmul float %631, %651, !dbg !93
  %653 = fmul float %647, %652, !dbg !94
  %654 = fadd float %650, %653, !dbg !95
  %655 = extractelement <16 x float> %531, i64 3, !dbg !83
  %656 = fsub float %655, %649, !dbg !83
  %657 = fadd float %551, %644, !dbg !85
  %658 = fcmp oeq float %657, 0.000000e+00, !dbg !86
  %659 = tail call float @llvm.nvvm.div.full(float %551, float %657), !dbg !87
  %660 = select i1 %658, float 0.000000e+00, float %659, !dbg !88
  %661 = fmul float %660, %656, !dbg !89
  %662 = fadd float %649, %661, !dbg !90
  %663 = fadd float %535, %654, !dbg !91
  %664 = fmul float %656, %656, !dbg !92
  %665 = fmul float %644, %664, !dbg !93
  %666 = fmul float %660, %665, !dbg !94
  %667 = fadd float %663, %666, !dbg !95
  %668 = extractelement <16 x float> %531, i64 4, !dbg !83
  %669 = fsub float %668, %662, !dbg !83
  %670 = fadd float %552, %657, !dbg !85
  %671 = fcmp oeq float %670, 0.000000e+00, !dbg !86
  %672 = tail call float @llvm.nvvm.div.full(float %552, float %670), !dbg !87
  %673 = select i1 %671, float 0.000000e+00, float %672, !dbg !88
  %674 = fmul float %673, %669, !dbg !89
  %675 = fadd float %662, %674, !dbg !90
  %676 = fadd float %536, %667, !dbg !91
  %677 = fmul float %669, %669, !dbg !92
  %678 = fmul float %657, %677, !dbg !93
  %679 = fmul float %673, %678, !dbg !94
  %680 = fadd float %676, %679, !dbg !95
  %681 = extractelement <16 x float> %531, i64 5, !dbg !83
  %682 = fsub float %681, %675, !dbg !83
  %683 = fadd float %553, %670, !dbg !85
  %684 = fcmp oeq float %683, 0.000000e+00, !dbg !86
  %685 = tail call float @llvm.nvvm.div.full(float %553, float %683), !dbg !87
  %686 = select i1 %684, float 0.000000e+00, float %685, !dbg !88
  %687 = fmul float %686, %682, !dbg !89
  %688 = fadd float %675, %687, !dbg !90
  %689 = fadd float %537, %680, !dbg !91
  %690 = fmul float %682, %682, !dbg !92
  %691 = fmul float %670, %690, !dbg !93
  %692 = fmul float %686, %691, !dbg !94
  %693 = fadd float %689, %692, !dbg !95
  %694 = extractelement <16 x float> %531, i64 6, !dbg !83
  %695 = fsub float %694, %688, !dbg !83
  %696 = fadd float %554, %683, !dbg !85
  %697 = fcmp oeq float %696, 0.000000e+00, !dbg !86
  %698 = tail call float @llvm.nvvm.div.full(float %554, float %696), !dbg !87
  %699 = select i1 %697, float 0.000000e+00, float %698, !dbg !88
  %700 = fmul float %699, %695, !dbg !89
  %701 = fadd float %688, %700, !dbg !90
  %702 = fadd float %538, %693, !dbg !91
  %703 = fmul float %695, %695, !dbg !92
  %704 = fmul float %683, %703, !dbg !93
  %705 = fmul float %699, %704, !dbg !94
  %706 = fadd float %702, %705, !dbg !95
  %707 = extractelement <16 x float> %531, i64 7, !dbg !83
  %708 = fsub float %707, %701, !dbg !83
  %709 = fadd float %555, %696, !dbg !85
  %710 = fcmp oeq float %709, 0.000000e+00, !dbg !86
  %711 = tail call float @llvm.nvvm.div.full(float %555, float %709), !dbg !87
  %712 = select i1 %710, float 0.000000e+00, float %711, !dbg !88
  %713 = fmul float %712, %708, !dbg !89
  %714 = fadd float %701, %713, !dbg !90
  %715 = fadd float %539, %706, !dbg !91
  %716 = fmul float %708, %708, !dbg !92
  %717 = fmul float %696, %716, !dbg !93
  %718 = fmul float %712, %717, !dbg !94
  %719 = fadd float %715, %718, !dbg !95
  %720 = extractelement <16 x float> %531, i64 8, !dbg !83
  %721 = extractelement <16 x float> %531, i64 9, !dbg !83
  %722 = fsub float %721, %720, !dbg !83
  %723 = fadd float %556, %557, !dbg !85
  %724 = fcmp oeq float %723, 0.000000e+00, !dbg !86
  %725 = tail call float @llvm.nvvm.div.full(float %557, float %723), !dbg !87
  %726 = select i1 %724, float 0.000000e+00, float %725, !dbg !88
  %727 = fmul float %722, %726, !dbg !89
  %728 = fadd float %720, %727, !dbg !90
  %729 = fadd float %540, %541, !dbg !91
  %730 = fmul float %722, %722, !dbg !92
  %731 = fmul float %730, %556, !dbg !93
  %732 = fmul float %731, %726, !dbg !94
  %733 = fadd float %729, %732, !dbg !95
  %734 = extractelement <16 x float> %531, i64 10, !dbg !83
  %735 = fsub float %734, %728, !dbg !83
  %736 = fadd float %558, %723, !dbg !85
  %737 = fcmp oeq float %736, 0.000000e+00, !dbg !86
  %738 = tail call float @llvm.nvvm.div.full(float %558, float %736), !dbg !87
  %739 = select i1 %737, float 0.000000e+00, float %738, !dbg !88
  %740 = fmul float %739, %735, !dbg !89
  %741 = fadd float %728, %740, !dbg !90
  %742 = fadd float %542, %733, !dbg !91
  %743 = fmul float %735, %735, !dbg !92
  %744 = fmul float %723, %743, !dbg !93
  %745 = fmul float %739, %744, !dbg !94
  %746 = fadd float %742, %745, !dbg !95
  %747 = extractelement <16 x float> %531, i64 11, !dbg !83
  %748 = fsub float %747, %741, !dbg !83
  %749 = fadd float %559, %736, !dbg !85
  %750 = fcmp oeq float %749, 0.000000e+00, !dbg !86
  %751 = tail call float @llvm.nvvm.div.full(float %559, float %749), !dbg !87
  %752 = select i1 %750, float 0.000000e+00, float %751, !dbg !88
  %753 = fmul float %752, %748, !dbg !89
  %754 = fadd float %741, %753, !dbg !90
  %755 = fadd float %543, %746, !dbg !91
  %756 = fmul float %748, %748, !dbg !92
  %757 = fmul float %736, %756, !dbg !93
  %758 = fmul float %752, %757, !dbg !94
  %759 = fadd float %755, %758, !dbg !95
  %760 = extractelement <16 x float> %531, i64 12, !dbg !83
  %761 = fsub float %760, %754, !dbg !83
  %762 = fadd float %560, %749, !dbg !85
  %763 = fcmp oeq float %762, 0.000000e+00, !dbg !86
  %764 = tail call float @llvm.nvvm.div.full(float %560, float %762), !dbg !87
  %765 = select i1 %763, float 0.000000e+00, float %764, !dbg !88
  %766 = fmul float %765, %761, !dbg !89
  %767 = fadd float %754, %766, !dbg !90
  %768 = fadd float %544, %759, !dbg !91
  %769 = fmul float %761, %761, !dbg !92
  %770 = fmul float %749, %769, !dbg !93
  %771 = fmul float %765, %770, !dbg !94
  %772 = fadd float %768, %771, !dbg !95
  %773 = extractelement <16 x float> %531, i64 13, !dbg !83
  %774 = fsub float %773, %767, !dbg !83
  %775 = fadd float %561, %762, !dbg !85
  %776 = fcmp oeq float %775, 0.000000e+00, !dbg !86
  %777 = tail call float @llvm.nvvm.div.full(float %561, float %775), !dbg !87
  %778 = select i1 %776, float 0.000000e+00, float %777, !dbg !88
  %779 = fmul float %778, %774, !dbg !89
  %780 = fadd float %767, %779, !dbg !90
  %781 = fadd float %545, %772, !dbg !91
  %782 = fmul float %774, %774, !dbg !92
  %783 = fmul float %762, %782, !dbg !93
  %784 = fmul float %778, %783, !dbg !94
  %785 = fadd float %781, %784, !dbg !95
  %786 = extractelement <16 x float> %531, i64 14, !dbg !83
  %787 = fsub float %786, %780, !dbg !83
  %788 = fadd float %562, %775, !dbg !85
  %789 = fcmp oeq float %788, 0.000000e+00, !dbg !86
  %790 = tail call float @llvm.nvvm.div.full(float %562, float %788), !dbg !87
  %791 = select i1 %789, float 0.000000e+00, float %790, !dbg !88
  %792 = fmul float %791, %787, !dbg !89
  %793 = fadd float %780, %792, !dbg !90
  %794 = fadd float %546, %785, !dbg !91
  %795 = fmul float %787, %787, !dbg !92
  %796 = fmul float %775, %795, !dbg !93
  %797 = fmul float %791, %796, !dbg !94
  %798 = fadd float %794, %797, !dbg !95
  %799 = extractelement <16 x float> %531, i64 15, !dbg !83
  %800 = fsub float %799, %793, !dbg !83
  %801 = fadd float %563, %788, !dbg !85
  %802 = fcmp oeq float %801, 0.000000e+00, !dbg !86
  %803 = tail call float @llvm.nvvm.div.full(float %563, float %801), !dbg !87
  %804 = select i1 %802, float 0.000000e+00, float %803, !dbg !88
  %805 = fmul float %804, %800, !dbg !89
  %806 = fadd float %793, %805, !dbg !90
  %807 = fadd float %547, %798, !dbg !91
  %808 = fmul float %800, %800, !dbg !92
  %809 = fmul float %788, %808, !dbg !93
  %810 = fmul float %804, %809, !dbg !94
  %811 = fadd float %807, %810, !dbg !95
  %812 = bitcast float %714 to i32, !dbg !81
  %813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %812, i32 16, i32 31), !dbg !81
  %814 = bitcast i32 %813 to float, !dbg !81
  %815 = bitcast float %719 to i32, !dbg !81
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 16, i32 31), !dbg !81
  %817 = bitcast i32 %816 to float, !dbg !81
  %818 = bitcast float %709 to i32, !dbg !81
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %818, i32 16, i32 31), !dbg !81
  %820 = bitcast i32 %819 to float, !dbg !81
  %821 = fsub float %814, %714, !dbg !83
  %822 = fadd float %709, %820, !dbg !85
  %823 = fcmp oeq float %822, 0.000000e+00, !dbg !86
  %824 = tail call float @llvm.nvvm.div.full(float %820, float %822), !dbg !87
  %825 = select i1 %823, float 0.000000e+00, float %824, !dbg !88
  %826 = fmul float %825, %821, !dbg !89
  %827 = fadd float %714, %826, !dbg !90
  %828 = fadd float %719, %817, !dbg !91
  %829 = fmul float %821, %821, !dbg !92
  %830 = fmul float %709, %829, !dbg !93
  %831 = fmul float %825, %830, !dbg !94
  %832 = fadd float %828, %831, !dbg !95
  %833 = bitcast float %827 to i32, !dbg !81
  %834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %833, i32 8, i32 31), !dbg !81
  %835 = bitcast i32 %834 to float, !dbg !81
  %836 = bitcast float %832 to i32, !dbg !81
  %837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %836, i32 8, i32 31), !dbg !81
  %838 = bitcast i32 %837 to float, !dbg !81
  %839 = bitcast float %822 to i32, !dbg !81
  %840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %839, i32 8, i32 31), !dbg !81
  %841 = bitcast i32 %840 to float, !dbg !81
  %842 = fsub float %835, %827, !dbg !83
  %843 = fadd float %822, %841, !dbg !85
  %844 = fcmp oeq float %843, 0.000000e+00, !dbg !86
  %845 = tail call float @llvm.nvvm.div.full(float %841, float %843), !dbg !87
  %846 = select i1 %844, float 0.000000e+00, float %845, !dbg !88
  %847 = fmul float %846, %842, !dbg !89
  %848 = fadd float %827, %847, !dbg !90
  %849 = fadd float %832, %838, !dbg !91
  %850 = fmul float %842, %842, !dbg !92
  %851 = fmul float %822, %850, !dbg !93
  %852 = fmul float %846, %851, !dbg !94
  %853 = fadd float %849, %852, !dbg !95
  %854 = bitcast float %848 to i32, !dbg !81
  %855 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %854, i32 4, i32 31), !dbg !81
  %856 = bitcast i32 %855 to float, !dbg !81
  %857 = bitcast float %853 to i32, !dbg !81
  %858 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %857, i32 4, i32 31), !dbg !81
  %859 = bitcast i32 %858 to float, !dbg !81
  %860 = bitcast float %843 to i32, !dbg !81
  %861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %860, i32 4, i32 31), !dbg !81
  %862 = bitcast i32 %861 to float, !dbg !81
  %863 = fsub float %856, %848, !dbg !83
  %864 = fadd float %843, %862, !dbg !85
  %865 = fcmp oeq float %864, 0.000000e+00, !dbg !86
  %866 = tail call float @llvm.nvvm.div.full(float %862, float %864), !dbg !87
  %867 = select i1 %865, float 0.000000e+00, float %866, !dbg !88
  %868 = fmul float %863, %867, !dbg !89
  %869 = fadd float %848, %868, !dbg !90
  %870 = fadd float %853, %859, !dbg !91
  %871 = fmul float %863, %863, !dbg !92
  %872 = fmul float %843, %871, !dbg !93
  %873 = fmul float %867, %872, !dbg !94
  %874 = fadd float %870, %873, !dbg !95
  %875 = bitcast float %869 to i32, !dbg !81
  %876 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %875, i32 2, i32 31), !dbg !81
  %877 = bitcast i32 %876 to float, !dbg !81
  %878 = bitcast float %874 to i32, !dbg !81
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 2, i32 31), !dbg !81
  %880 = bitcast i32 %879 to float, !dbg !81
  %881 = bitcast float %864 to i32, !dbg !81
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 2, i32 31), !dbg !81
  %883 = bitcast i32 %882 to float, !dbg !81
  %884 = fsub float %877, %869, !dbg !83
  %885 = fadd float %864, %883, !dbg !85
  %886 = fcmp oeq float %885, 0.000000e+00, !dbg !86
  %887 = tail call float @llvm.nvvm.div.full(float %883, float %885), !dbg !87
  %888 = select i1 %886, float 0.000000e+00, float %887, !dbg !88
  %889 = fmul float %884, %888, !dbg !89
  %890 = fadd float %869, %889, !dbg !90
  %891 = fadd float %874, %880, !dbg !91
  %892 = fmul float %884, %884, !dbg !92
  %893 = fmul float %864, %892, !dbg !93
  %894 = fmul float %888, %893, !dbg !94
  %895 = fadd float %891, %894, !dbg !95
  %896 = bitcast float %890 to i32, !dbg !81
  %897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %896, i32 1, i32 31), !dbg !81
  %898 = bitcast i32 %897 to float, !dbg !81
  %899 = bitcast float %895 to i32, !dbg !81
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 1, i32 31), !dbg !81
  %901 = bitcast i32 %900 to float, !dbg !81
  %902 = bitcast float %885 to i32, !dbg !81
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 1, i32 31), !dbg !81
  %904 = bitcast i32 %903 to float, !dbg !81
  %905 = fsub float %898, %890, !dbg !83
  %906 = fadd float %885, %904, !dbg !85
  %907 = fcmp oeq float %906, 0.000000e+00, !dbg !86
  %908 = tail call float @llvm.nvvm.div.full(float %904, float %906), !dbg !87
  %909 = select i1 %907, float 0.000000e+00, float %908, !dbg !88
  %910 = fmul float %905, %909, !dbg !89
  %911 = fadd float %890, %910, !dbg !90
  %912 = fadd float %895, %901, !dbg !91
  %913 = fmul float %905, %905, !dbg !92
  %914 = fmul float %885, %913, !dbg !93
  %915 = fmul float %909, %914, !dbg !94
  %916 = fadd float %912, %915, !dbg !95
  %917 = bitcast float %806 to i32, !dbg !81
  %918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %917, i32 16, i32 31), !dbg !81
  %919 = bitcast i32 %918 to float, !dbg !81
  %920 = bitcast float %811 to i32, !dbg !81
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 16, i32 31), !dbg !81
  %922 = bitcast i32 %921 to float, !dbg !81
  %923 = bitcast float %801 to i32, !dbg !81
  %924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 16, i32 31), !dbg !81
  %925 = bitcast i32 %924 to float, !dbg !81
  %926 = fsub float %919, %806, !dbg !83
  %927 = fadd float %801, %925, !dbg !85
  %928 = fcmp oeq float %927, 0.000000e+00, !dbg !86
  %929 = tail call float @llvm.nvvm.div.full(float %925, float %927), !dbg !87
  %930 = select i1 %928, float 0.000000e+00, float %929, !dbg !88
  %931 = fmul float %926, %930, !dbg !89
  %932 = fadd float %806, %931, !dbg !90
  %933 = fadd float %811, %922, !dbg !91
  %934 = fmul float %926, %926, !dbg !92
  %935 = fmul float %801, %934, !dbg !93
  %936 = fmul float %935, %930, !dbg !94
  %937 = fadd float %933, %936, !dbg !95
  %938 = bitcast float %932 to i32, !dbg !81
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 8, i32 31), !dbg !81
  %940 = bitcast i32 %939 to float, !dbg !81
  %941 = bitcast float %937 to i32, !dbg !81
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 8, i32 31), !dbg !81
  %943 = bitcast i32 %942 to float, !dbg !81
  %944 = bitcast float %927 to i32, !dbg !81
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %944, i32 8, i32 31), !dbg !81
  %946 = bitcast i32 %945 to float, !dbg !81
  %947 = fsub float %940, %932, !dbg !83
  %948 = fadd float %927, %946, !dbg !85
  %949 = fcmp oeq float %948, 0.000000e+00, !dbg !86
  %950 = tail call float @llvm.nvvm.div.full(float %946, float %948), !dbg !87
  %951 = select i1 %949, float 0.000000e+00, float %950, !dbg !88
  %952 = fmul float %947, %951, !dbg !89
  %953 = fadd float %932, %952, !dbg !90
  %954 = fadd float %937, %943, !dbg !91
  %955 = fmul float %947, %947, !dbg !92
  %956 = fmul float %927, %955, !dbg !93
  %957 = fmul float %951, %956, !dbg !94
  %958 = fadd float %954, %957, !dbg !95
  %959 = bitcast float %953 to i32, !dbg !81
  %960 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %959, i32 4, i32 31), !dbg !81
  %961 = bitcast i32 %960 to float, !dbg !81
  %962 = bitcast float %958 to i32, !dbg !81
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 4, i32 31), !dbg !81
  %964 = bitcast i32 %963 to float, !dbg !81
  %965 = bitcast float %948 to i32, !dbg !81
  %966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %965, i32 4, i32 31), !dbg !81
  %967 = bitcast i32 %966 to float, !dbg !81
  %968 = fsub float %961, %953, !dbg !83
  %969 = fadd float %948, %967, !dbg !85
  %970 = fcmp oeq float %969, 0.000000e+00, !dbg !86
  %971 = tail call float @llvm.nvvm.div.full(float %967, float %969), !dbg !87
  %972 = select i1 %970, float 0.000000e+00, float %971, !dbg !88
  %973 = fmul float %968, %972, !dbg !89
  %974 = fadd float %953, %973, !dbg !90
  %975 = fadd float %958, %964, !dbg !91
  %976 = fmul float %968, %968, !dbg !92
  %977 = fmul float %948, %976, !dbg !93
  %978 = fmul float %972, %977, !dbg !94
  %979 = fadd float %975, %978, !dbg !95
  %980 = bitcast float %974 to i32, !dbg !81
  %981 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %980, i32 2, i32 31), !dbg !81
  %982 = bitcast i32 %981 to float, !dbg !81
  %983 = bitcast float %979 to i32, !dbg !81
  %984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %983, i32 2, i32 31), !dbg !81
  %985 = bitcast i32 %984 to float, !dbg !81
  %986 = bitcast float %969 to i32, !dbg !81
  %987 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %986, i32 2, i32 31), !dbg !81
  %988 = bitcast i32 %987 to float, !dbg !81
  %989 = fsub float %982, %974, !dbg !83
  %990 = fadd float %969, %988, !dbg !85
  %991 = fcmp oeq float %990, 0.000000e+00, !dbg !86
  %992 = tail call float @llvm.nvvm.div.full(float %988, float %990), !dbg !87
  %993 = select i1 %991, float 0.000000e+00, float %992, !dbg !88
  %994 = fmul float %989, %993, !dbg !89
  %995 = fadd float %974, %994, !dbg !90
  %996 = fadd float %979, %985, !dbg !91
  %997 = fmul float %989, %989, !dbg !92
  %998 = fmul float %969, %997, !dbg !93
  %999 = fmul float %993, %998, !dbg !94
  %1000 = fadd float %996, %999, !dbg !95
  %1001 = bitcast float %995 to i32, !dbg !81
  %1002 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1001, i32 1, i32 31), !dbg !81
  %1003 = bitcast i32 %1002 to float, !dbg !81
  %1004 = bitcast float %1000 to i32, !dbg !81
  %1005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 1, i32 31), !dbg !81
  %1006 = bitcast i32 %1005 to float, !dbg !81
  %1007 = bitcast float %990 to i32, !dbg !81
  %1008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1007, i32 1, i32 31), !dbg !81
  %1009 = bitcast i32 %1008 to float, !dbg !81
  %1010 = fsub float %1003, %995, !dbg !83
  %1011 = fadd float %990, %1009, !dbg !85
  %1012 = fcmp oeq float %1011, 0.000000e+00, !dbg !86
  %1013 = tail call float @llvm.nvvm.div.full(float %1009, float %1011), !dbg !87
  %1014 = select i1 %1012, float 0.000000e+00, float %1013, !dbg !88
  %1015 = fmul float %1010, %1014, !dbg !89
  %1016 = fadd float %995, %1015, !dbg !90
  %1017 = fadd float %1000, %1006, !dbg !91
  %1018 = fmul float %1010, %1010, !dbg !92
  %1019 = fmul float %990, %1018, !dbg !93
  %1020 = fmul float %1014, %1019, !dbg !94
  %1021 = fadd float %1017, %1020, !dbg !95
  %1022 = and i32 %624, 7, !dbg !81
  %1023 = icmp eq i32 %21, 0, !dbg !81
  %1024 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1022, !dbg !81
  %1025 = bitcast float %911 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1024, <1 x i32> %1025, i1 %1023) #5, !dbg !81
  %1026 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1022, !dbg !81
  %1027 = bitcast float %916 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1027, i1 %1023) #5, !dbg !81
  %1028 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1022, !dbg !81
  %1029 = bitcast float %906 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1028, <1 x i32> %1029, i1 %1023) #5, !dbg !81
  %1030 = or disjoint i32 %1022, 8, !dbg !81
  %1031 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1030, !dbg !81
  %1032 = bitcast float %1016 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1031, <1 x i32> %1032, i1 %1023) #5, !dbg !81
  %1033 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1030, !dbg !81
  %1034 = bitcast float %1021 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1034, i1 %1023) #5, !dbg !81
  %1035 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1030, !dbg !81
  %1036 = bitcast float %1011 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1035, <1 x i32> %1036, i1 %1023) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1037 = icmp slt i32 %19, 16, !dbg !81
  %1038 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !81
  %1039 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1038, i1 %1037) #5, !dbg !81
  %1040 = bitcast i32 %1039 to float, !dbg !81
  %1041 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !81
  %1042 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1041, i1 %1037) #5, !dbg !81
  %1043 = bitcast i32 %1042 to float, !dbg !81
  %1044 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !81
  %1045 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1044, i1 %1037) #5, !dbg !81
  %1046 = bitcast i32 %1045 to float, !dbg !81
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1039, i32 4, i32 31), !dbg !81
  %1048 = bitcast i32 %1047 to float, !dbg !81
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 4, i32 31), !dbg !81
  %1050 = bitcast i32 %1049 to float, !dbg !81
  %1051 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 4, i32 31), !dbg !81
  %1052 = bitcast i32 %1051 to float, !dbg !81
  %1053 = fsub float %1048, %1040, !dbg !83
  %1054 = fadd float %1046, %1052, !dbg !85
  %1055 = fcmp oeq float %1054, 0.000000e+00, !dbg !86
  %1056 = tail call float @llvm.nvvm.div.full(float %1052, float %1054), !dbg !87
  %1057 = select i1 %1055, float 0.000000e+00, float %1056, !dbg !88
  %1058 = fmul float %1053, %1057, !dbg !89
  %1059 = fadd float %1058, %1040, !dbg !90
  %1060 = fadd float %1043, %1050, !dbg !91
  %1061 = fmul float %1053, %1053, !dbg !92
  %1062 = fmul float %1061, %1046, !dbg !93
  %1063 = fmul float %1062, %1057, !dbg !94
  %1064 = fadd float %1060, %1063, !dbg !95
  %1065 = bitcast float %1059 to i32, !dbg !81
  %1066 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1065, i32 2, i32 31), !dbg !81
  %1067 = bitcast i32 %1066 to float, !dbg !81
  %1068 = bitcast float %1064 to i32, !dbg !81
  %1069 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1068, i32 2, i32 31), !dbg !81
  %1070 = bitcast i32 %1069 to float, !dbg !81
  %1071 = bitcast float %1054 to i32, !dbg !81
  %1072 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1071, i32 2, i32 31), !dbg !81
  %1073 = bitcast i32 %1072 to float, !dbg !81
  %1074 = fsub float %1067, %1059, !dbg !83
  %1075 = fadd float %1054, %1073, !dbg !85
  %1076 = fcmp oeq float %1075, 0.000000e+00, !dbg !86
  %1077 = tail call float @llvm.nvvm.div.full(float %1073, float %1075), !dbg !87
  %1078 = select i1 %1076, float 0.000000e+00, float %1077, !dbg !88
  %1079 = fmul float %1074, %1078, !dbg !89
  %1080 = fadd float %1059, %1079, !dbg !90
  %1081 = fadd float %1064, %1070, !dbg !91
  %1082 = fmul float %1074, %1074, !dbg !92
  %1083 = fmul float %1054, %1082, !dbg !93
  %1084 = fmul float %1078, %1083, !dbg !94
  %1085 = fadd float %1081, %1084, !dbg !95
  %1086 = bitcast float %1080 to i32, !dbg !81
  %1087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1086, i32 1, i32 31), !dbg !81
  %1088 = bitcast i32 %1087 to float, !dbg !81
  %1089 = bitcast float %1085 to i32, !dbg !81
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1089, i32 1, i32 31), !dbg !81
  %1091 = bitcast i32 %1090 to float, !dbg !81
  %1092 = bitcast float %1075 to i32, !dbg !81
  %1093 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1092, i32 1, i32 31), !dbg !81
  %1094 = bitcast i32 %1093 to float, !dbg !81
  %1095 = fsub float %1088, %1080, !dbg !83
  %1096 = fadd float %1075, %1094, !dbg !85
  %1097 = fcmp oeq float %1096, 0.000000e+00, !dbg !86
  %1098 = tail call float @llvm.nvvm.div.full(float %1094, float %1096), !dbg !87
  %1099 = select i1 %1097, float 0.000000e+00, float %1098, !dbg !88
  %1100 = fmul float %1095, %1099, !dbg !89
  %1101 = fadd float %1080, %1100, !dbg !90
  %1102 = fadd float %1085, %1091, !dbg !91
  %1103 = fmul float %1095, %1095, !dbg !92
  %1104 = fmul float %1075, %1103, !dbg !93
  %1105 = fmul float %1099, %1104, !dbg !94
  %1106 = fadd float %1102, %1105, !dbg !95
  %1107 = and i32 %19, 7, !dbg !81
  %1108 = icmp eq i32 %1107, 0, !dbg !81
  %1109 = and i1 %1037, %1108, !dbg !81
  %1110 = bitcast float %1101 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1110, i1 %1109) #5, !dbg !81
  %1111 = bitcast float %1106 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1041, <1 x i32> %1111, i1 %1109) #5, !dbg !81
  %1112 = bitcast float %1096 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1044, <1 x i32> %1112, i1 %1109) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1113 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %1114 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !81
  %1115 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !81
  %1116 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !81
  %1117 = tail call float @llvm.nvvm.div.full(float %1115, float 3.072000e+03), !dbg !96
  %1118 = tail call float @llvm.nvvm.div.full(float %1116, float 3.072000e+03), !dbg !96
  %1119 = fadd float %1117, 0x3EB0C6F7A0000000, !dbg !97
  %1120 = fadd float %1118, 0x3EB0C6F7A0000000, !dbg !97
  %1121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i143 = icmp eq i32 %1128, 0, !dbg !98
  br i1 %.not.i143, label %1131, label %1129, !dbg !98

1129:                                             ; preds = %__nv_rsqrtf.exit
  %1130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1119), !dbg !98
  br label %__nv_rsqrtf.exit145, !dbg !98

1131:                                             ; preds = %__nv_rsqrtf.exit
  %1132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1119), !dbg !98
  br label %__nv_rsqrtf.exit145, !dbg !98

__nv_rsqrtf.exit145:                              ; preds = %1129, %1131
  %.0.i144 = phi float [ %1130, %1129 ], [ %1132, %1131 ], !dbg !98
  %1133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i167 = icmp eq i32 %1140, 0, !dbg !98
  br i1 %.not.i167, label %1143, label %1141, !dbg !98

1141:                                             ; preds = %__nv_rsqrtf.exit145
  %1142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1120), !dbg !98
  br label %__nv_rsqrtf.exit169, !dbg !98

1143:                                             ; preds = %__nv_rsqrtf.exit145
  %1144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1120), !dbg !98
  br label %__nv_rsqrtf.exit169, !dbg !98

__nv_rsqrtf.exit169:                              ; preds = %1141, %1143
  %.0.i168 = phi float [ %1142, %1141 ], [ %1144, %1143 ], !dbg !98
  %invariant.gep174 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !99
  %1145 = lshr i32 %28, 8
  %1146 = and i32 %1145, 8
  %1147 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1146
  %1148 = getelementptr bfloat, ptr addrspace(3) %1147, i32 %90
  %1149 = getelementptr bfloat, ptr addrspace(3) %1147, i32 %94
  %1150 = insertelement <2 x float> poison, float %.0.i168, i64 0, !dbg !100
  %1151 = shufflevector <2 x float> %1150, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %1152 = insertelement <2 x float> poison, float %1114, i64 0, !dbg !101
  %1153 = shufflevector <2 x float> %1152, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %1154 = insertelement <16 x float> poison, float %.0.i144, i64 0, !dbg !100
  %1155 = insertelement <16 x float> %1154, float %.0.i168, i64 1, !dbg !100
  %1156 = shufflevector <16 x float> %1155, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !100
  %1157 = insertelement <16 x float> poison, float %1113, i64 0, !dbg !101
  %1158 = insertelement <16 x float> %1157, float %1114, i64 1, !dbg !101
  %1159 = shufflevector <16 x float> %1158, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !101
  %invariant.op = or i32 %26, 12292, !dbg !99
  br label %1160, !dbg !99

1160:                                             ; preds = %__nv_rsqrtf.exit169, %1160
  %1161 = phi i1 [ true, %__nv_rsqrtf.exit169 ], [ false, %1160 ]
  %indvars.iv255 = phi i64 [ 0, %__nv_rsqrtf.exit169 ], [ 2048, %1160 ]
  %1162 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit169 ], [ %1354, %1160 ]
  %1163 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit169 ], [ %1355, %1160 ]
  %1164 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit169 ], [ %1367, %1160 ]
  %1165 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit169 ], [ %1370, %1160 ]
  %1166 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit169 ], [ %1361, %1160 ]
  %1167 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit169 ], [ %1358, %1160 ]
  %1168 = or disjoint i64 %indvars.iv255, %112, !dbg !102
  %1169 = or disjoint i64 %indvars.iv255, %111, !dbg !102
  %1170 = or disjoint i64 %indvars.iv255, %110, !dbg !102
  %1171 = icmp samesign ult i64 %1168, 3072, !dbg !103
  %1172 = icmp samesign ult i64 %1170, 3072, !dbg !103
  %1173 = trunc nuw nsw i64 %1170 to i32, !dbg !104
  %1174 = add i32 %70, %1173, !dbg !104
  %1175 = trunc nuw nsw i64 %indvars.iv255 to i32, !dbg !104
  %1176 = add i32 %88, %1175, !dbg !104
  %1177 = trunc nuw nsw i64 %1168 to i32, !dbg !104
  %1178 = add i32 %71, %1177, !dbg !104
  %1179 = add i32 %72, %1177, !dbg !104
  %1180 = sext i32 %1174 to i64, !dbg !105
  %1181 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1180, !dbg !105
  %1182 = sext i32 %1176 to i64, !dbg !105
  %1183 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1182, !dbg !105
  %1184 = and i1 %24, %1171, !dbg !106
  %1185 = and i1 %23, %1172, !dbg !106
  %1186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1181, i1 %1185) #5, !dbg !107
  %1187 = extractvalue { i32, i32, i32, i32 } %1186, 0, !dbg !107
  %1188 = extractvalue { i32, i32, i32, i32 } %1186, 1, !dbg !107
  %1189 = extractvalue { i32, i32, i32, i32 } %1186, 2, !dbg !107
  %1190 = extractvalue { i32, i32, i32, i32 } %1186, 3, !dbg !107
  %1191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1183, i1 %1185) #5, !dbg !107
  %1192 = extractvalue { i32, i32, i32, i32 } %1191, 0, !dbg !107
  %1193 = extractvalue { i32, i32, i32, i32 } %1191, 1, !dbg !107
  %1194 = extractvalue { i32, i32, i32, i32 } %1191, 2, !dbg !107
  %1195 = extractvalue { i32, i32, i32, i32 } %1191, 3, !dbg !107
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1148, i32 %1187, i32 %1188, i32 %1189, i32 %1190, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1149, i32 %1192, i32 %1193, i32 %1194, i32 %1195, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1196 = or disjoint i64 %1168, 12288, !dbg !108
  %.reass.reass.reass = or i32 %1175, %invariant.op
  %1197 = getelementptr float, ptr addrspace(1) %1, i64 %1196, !dbg !109
  %1198 = zext nneg i32 %.reass.reass.reass to i64, !dbg !109
  %1199 = getelementptr float, ptr addrspace(1) %1, i64 %1198, !dbg !109
  %1200 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1196, !dbg !110
  %1201 = add nuw nsw i64 %1168, 9216, !dbg !111
  %1202 = getelementptr float, ptr addrspace(1) %1, i64 %1201, !dbg !112
  %gep175 = getelementptr float, ptr addrspace(1) %invariant.gep174, i64 %1169, !dbg !112
  %1203 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1201, !dbg !113
  %1204 = fcmp uno <16 x float> %1165, zeroinitializer, !dbg !114
  %1205 = fcmp uno float %1162, 0.000000e+00, !dbg !116
  %1206 = fcmp uno float %1163, 0.000000e+00, !dbg !116
  %1207 = fcmp uno <4 x float> %1167, zeroinitializer, !dbg !116
  %1208 = fcmp uno <8 x float> %1166, zeroinitializer, !dbg !116
  %1209 = fcmp uno <2 x float> %1164, zeroinitializer, !dbg !114
  %1210 = load <2 x bfloat>, ptr addrspace(3) %97, align 16, !dbg !100
  %1211 = fpext <2 x bfloat> %1210 to <2 x float>, !dbg !118
  %1212 = fsub <2 x float> %1211, %1153, !dbg !101
  %1213 = fmul <2 x float> %1151, %1212, !dbg !100
  %1214 = load <8 x bfloat>, ptr addrspace(3) %96, align 16, !dbg !100
  %1215 = load <4 x bfloat>, ptr addrspace(3) %113, align 4, !dbg !100
  %1216 = load <2 x bfloat>, ptr addrspace(3) %114, align 4, !dbg !100
  %1217 = shufflevector <8 x bfloat> %1214, <8 x bfloat> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !118
  %1218 = shufflevector <8 x bfloat> %1214, <8 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %1219 = shufflevector <16 x bfloat> %1218, <16 x bfloat> %1217, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !118
  %1220 = shufflevector <4 x bfloat> %1215, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %1221 = shufflevector <16 x bfloat> %1219, <16 x bfloat> %1220, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !118
  %1222 = shufflevector <2 x bfloat> %1216, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !118
  %1223 = shufflevector <16 x bfloat> %1221, <16 x bfloat> %1222, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !118
  %1224 = fpext <16 x bfloat> %1223 to <16 x float>, !dbg !118
  %1225 = fsub <16 x float> %1224, %1159, !dbg !101
  %1226 = fmul <16 x float> %1156, %1225, !dbg !100
  %1227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1197, i1 %1171) #5, !dbg !119
  %1228 = extractvalue { i32, i32, i32, i32 } %1227, 0, !dbg !119
  %1229 = extractvalue { i32, i32, i32, i32 } %1227, 1, !dbg !119
  %1230 = extractvalue { i32, i32, i32, i32 } %1227, 2, !dbg !119
  %1231 = extractvalue { i32, i32, i32, i32 } %1227, 3, !dbg !119
  %1232 = insertelement <2 x i32> poison, i32 %1228, i64 0, !dbg !119
  %1233 = insertelement <2 x i32> %1232, i32 %1229, i64 1, !dbg !119
  %1234 = bitcast <2 x i32> %1233 to <2 x float>, !dbg !119
  %1235 = insertelement <2 x i32> poison, i32 %1230, i64 0, !dbg !119
  %1236 = insertelement <2 x i32> %1235, i32 %1231, i64 1, !dbg !119
  %1237 = bitcast <2 x i32> %1236 to <2 x float>, !dbg !119
  %1238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1199, i1 %1171) #5, !dbg !119
  %1239 = extractvalue { i32, i32, i32, i32 } %1238, 0, !dbg !119
  %1240 = extractvalue { i32, i32, i32, i32 } %1238, 1, !dbg !119
  %1241 = extractvalue { i32, i32, i32, i32 } %1238, 2, !dbg !119
  %1242 = extractvalue { i32, i32, i32, i32 } %1238, 3, !dbg !119
  %1243 = insertelement <4 x i32> poison, i32 %1239, i64 0, !dbg !119
  %1244 = insertelement <4 x i32> %1243, i32 %1240, i64 1, !dbg !119
  %1245 = insertelement <4 x i32> %1244, i32 %1241, i64 2, !dbg !119
  %1246 = insertelement <4 x i32> %1245, i32 %1242, i64 3, !dbg !119
  %1247 = bitcast <4 x i32> %1246 to <4 x float>, !dbg !119
  %1248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1200, i1 %1171) #5, !dbg !120
  %1249 = extractvalue { i32, i32, i32, i32 } %1248, 0, !dbg !120
  %1250 = bitcast i32 %1249 to <2 x bfloat>, !dbg !120
  %1251 = extractvalue { i32, i32, i32, i32 } %1248, 1, !dbg !120
  %1252 = bitcast i32 %1251 to <2 x bfloat>, !dbg !120
  %1253 = extractvalue { i32, i32, i32, i32 } %1248, 2, !dbg !120
  %1254 = bitcast i32 %1253 to <2 x bfloat>, !dbg !120
  %1255 = extractvalue { i32, i32, i32, i32 } %1248, 3, !dbg !120
  %1256 = bitcast i32 %1255 to <2 x bfloat>, !dbg !120
  %1257 = fpext <2 x bfloat> %1250 to <2 x float>, !dbg !121
  %1258 = fpext <2 x bfloat> %1252 to <2 x float>, !dbg !121
  %1259 = shufflevector <2 x bfloat> %1254, <2 x bfloat> %1256, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !121
  %1260 = fpext <4 x bfloat> %1259 to <4 x float>, !dbg !121
  %1261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1202, i1 %1171) #5, !dbg !122
  %1262 = extractvalue { i32, i32, i32, i32 } %1261, 0, !dbg !122
  %1263 = extractvalue { i32, i32, i32, i32 } %1261, 1, !dbg !122
  %1264 = extractvalue { i32, i32, i32, i32 } %1261, 2, !dbg !122
  %1265 = extractvalue { i32, i32, i32, i32 } %1261, 3, !dbg !122
  %1266 = insertelement <2 x i32> poison, i32 %1262, i64 0, !dbg !122
  %1267 = insertelement <2 x i32> %1266, i32 %1263, i64 1, !dbg !122
  %1268 = bitcast <2 x i32> %1267 to <2 x float>, !dbg !122
  %1269 = insertelement <2 x i32> poison, i32 %1264, i64 0, !dbg !122
  %1270 = insertelement <2 x i32> %1269, i32 %1265, i64 1, !dbg !122
  %1271 = bitcast <2 x i32> %1270 to <2 x float>, !dbg !122
  %1272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep175, i1 %1171) #5, !dbg !122
  %1273 = extractvalue { i32, i32, i32, i32 } %1272, 0, !dbg !122
  %1274 = extractvalue { i32, i32, i32, i32 } %1272, 1, !dbg !122
  %1275 = extractvalue { i32, i32, i32, i32 } %1272, 2, !dbg !122
  %1276 = extractvalue { i32, i32, i32, i32 } %1272, 3, !dbg !122
  %1277 = insertelement <4 x i32> poison, i32 %1273, i64 0, !dbg !122
  %1278 = insertelement <4 x i32> %1277, i32 %1274, i64 1, !dbg !122
  %1279 = insertelement <4 x i32> %1278, i32 %1275, i64 2, !dbg !122
  %1280 = insertelement <4 x i32> %1279, i32 %1276, i64 3, !dbg !122
  %1281 = bitcast <4 x i32> %1280 to <4 x float>, !dbg !122
  %1282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1203, i1 %1171) #5, !dbg !123
  %1283 = extractvalue { i32, i32, i32, i32 } %1282, 0, !dbg !123
  %1284 = bitcast i32 %1283 to <2 x bfloat>, !dbg !123
  %1285 = extractvalue { i32, i32, i32, i32 } %1282, 1, !dbg !123
  %1286 = bitcast i32 %1285 to <2 x bfloat>, !dbg !123
  %1287 = extractvalue { i32, i32, i32, i32 } %1282, 2, !dbg !123
  %1288 = bitcast i32 %1287 to <2 x bfloat>, !dbg !123
  %1289 = extractvalue { i32, i32, i32, i32 } %1282, 3, !dbg !123
  %1290 = bitcast i32 %1289 to <2 x bfloat>, !dbg !123
  %1291 = fpext <2 x bfloat> %1284 to <2 x float>, !dbg !124
  %1292 = fpext <2 x bfloat> %1286 to <2 x float>, !dbg !124
  %1293 = shufflevector <2 x bfloat> %1288, <2 x bfloat> %1290, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !124
  %1294 = fpext <4 x bfloat> %1293 to <4 x float>, !dbg !124
  %1295 = fadd <2 x float> %1234, %1257, !dbg !125
  %1296 = fadd <2 x float> %1237, %1258, !dbg !125
  %1297 = fadd <4 x float> %1247, %1260, !dbg !125
  %1298 = fadd <2 x float> %1295, splat (float 1.000000e+00), !dbg !126
  %1299 = fadd <2 x float> %1296, splat (float 1.000000e+00), !dbg !126
  %1300 = fadd <4 x float> %1297, splat (float 1.000000e+00), !dbg !126
  %1301 = fmul <2 x float> %1213, %1298, !dbg !127
  %1302 = shufflevector <2 x float> %1298, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %1303 = shufflevector <4 x float> %1300, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %1304 = shufflevector <8 x float> %1302, <8 x float> %1303, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !127
  %1305 = shufflevector <2 x float> %1299, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %1306 = shufflevector <8 x float> %1304, <8 x float> %1305, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !127
  %1307 = shufflevector <8 x float> %1306, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !127
  %1308 = fmul <16 x float> %1226, %1307, !dbg !127
  %1309 = fadd <2 x float> %1268, %1291, !dbg !128
  %1310 = fadd <2 x float> %1271, %1292, !dbg !128
  %1311 = fadd <4 x float> %1281, %1294, !dbg !128
  %1312 = fadd <2 x float> %1301, %1309, !dbg !129
  %1313 = shufflevector <2 x float> %1309, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !129
  %1314 = shufflevector <4 x float> %1311, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !129
  %1315 = shufflevector <8 x float> %1313, <8 x float> %1314, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !129
  %1316 = shufflevector <2 x float> %1310, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !129
  %1317 = shufflevector <8 x float> %1315, <8 x float> %1316, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !129
  %1318 = shufflevector <8 x float> %1317, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !129
  %1319 = fadd <16 x float> %1308, %1318, !dbg !129
  %1320 = extractelement <16 x float> %1319, i64 2, !dbg !130
  %1321 = fcmp olt float %1162, %1320, !dbg !131
  %1322 = extractelement <16 x float> %1319, i64 3, !dbg !130
  %1323 = fcmp olt float %1163, %1322, !dbg !131
  %1324 = extractelement <16 x float> %1319, i64 4, !dbg !130
  %1325 = extractelement <16 x float> %1319, i64 5, !dbg !130
  %1326 = extractelement <16 x float> %1319, i64 6, !dbg !130
  %1327 = extractelement <16 x float> %1319, i64 7, !dbg !130
  %1328 = extractelement <2 x float> %1312, i64 0, !dbg !130
  %1329 = extractelement <2 x float> %1312, i64 1, !dbg !130
  %1330 = extractelement <16 x float> %1319, i64 8, !dbg !130
  %1331 = extractelement <16 x float> %1319, i64 9, !dbg !130
  %1332 = extractelement <16 x float> %1319, i64 10, !dbg !130
  %1333 = extractelement <16 x float> %1319, i64 11, !dbg !130
  %1334 = extractelement <16 x float> %1319, i64 12, !dbg !130
  %1335 = extractelement <16 x float> %1319, i64 13, !dbg !130
  %1336 = or i1 %1205, %1321, !dbg !132
  %1337 = or i1 %1206, %1323, !dbg !132
  %1338 = select i1 %1336, float %1162, float %1320, !dbg !133
  %1339 = select i1 %1337, float %1163, float %1322, !dbg !133
  %1340 = shufflevector <16 x float> %1319, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !131
  %1341 = fcmp olt <4 x float> %1167, %1340, !dbg !131
  %1342 = or <4 x i1> %1207, %1341, !dbg !132
  %1343 = select <4 x i1> %1342, <4 x float> %1167, <4 x float> %1340, !dbg !133
  %1344 = shufflevector <2 x float> %1312, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !131
  %1345 = shufflevector <16 x float> %1319, <16 x float> %1344, <8 x i32> <i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 17, i32 16>, !dbg !131
  %1346 = fcmp olt <8 x float> %1166, %1345, !dbg !131
  %1347 = or <8 x i1> %1208, %1346, !dbg !132
  %1348 = select <8 x i1> %1347, <8 x float> %1166, <8 x float> %1345, !dbg !133
  %1349 = fcmp ogt <16 x float> %1165, %1319, !dbg !134
  %1350 = fcmp olt <16 x float> %1165, %1319, !dbg !134
  %1351 = shufflevector <16 x i1> %1349, <16 x i1> %1350, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !134
  %1352 = or <16 x i1> %1204, %1351, !dbg !135
  %1353 = select <16 x i1> %1352, <16 x float> %1165, <16 x float> %1319, !dbg !136
  %1354 = select i1 %1184, float %1338, float %1162, !dbg !137
  %1355 = select i1 %1184, float %1339, float %1163, !dbg !137
  %1356 = insertelement <4 x i1> poison, i1 %1184, i64 0, !dbg !137
  %1357 = shufflevector <4 x i1> %1356, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !137
  %1358 = select <4 x i1> %1357, <4 x float> %1343, <4 x float> %1167, !dbg !137
  %1359 = insertelement <8 x i1> poison, i1 %1184, i64 0, !dbg !137
  %1360 = shufflevector <8 x i1> %1359, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !137
  %1361 = select <8 x i1> %1360, <8 x float> %1348, <8 x float> %1166, !dbg !137
  %1362 = fcmp ogt <2 x float> %1164, %1312, !dbg !134
  %1363 = or <2 x i1> %1209, %1362, !dbg !135
  %1364 = select <2 x i1> %1363, <2 x float> %1164, <2 x float> %1312, !dbg !136
  %1365 = insertelement <2 x i1> poison, i1 %1184, i64 0, !dbg !138
  %1366 = shufflevector <2 x i1> %1365, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !138
  %1367 = select <2 x i1> %1366, <2 x float> %1364, <2 x float> %1164, !dbg !138
  %1368 = insertelement <16 x i1> poison, i1 %1184, i64 0, !dbg !138
  %1369 = shufflevector <16 x i1> %1368, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !138
  %1370 = select <16 x i1> %1369, <16 x float> %1353, <16 x float> %1165, !dbg !138
  %1371 = sext i32 %1178 to i64, !dbg !139
  %1372 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1371, !dbg !139
  %1373 = sext i32 %1179 to i64, !dbg !139
  %1374 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1373, !dbg !139
  %1375 = extractelement <16 x float> %1319, i64 0, !dbg !130
  %1376 = fptrunc float %1375 to bfloat, !dbg !130
  %1377 = extractelement <16 x float> %1319, i64 1, !dbg !130
  %1378 = fptrunc float %1377 to bfloat, !dbg !130
  %1379 = fptrunc float %1320 to bfloat, !dbg !130
  %1380 = fptrunc float %1322 to bfloat, !dbg !130
  %1381 = fptrunc float %1324 to bfloat, !dbg !130
  %1382 = fptrunc float %1325 to bfloat, !dbg !130
  %1383 = fptrunc float %1326 to bfloat, !dbg !130
  %1384 = fptrunc float %1327 to bfloat, !dbg !130
  %1385 = fptrunc float %1328 to bfloat, !dbg !130
  %1386 = fptrunc float %1329 to bfloat, !dbg !130
  %1387 = fptrunc float %1330 to bfloat, !dbg !130
  %1388 = fptrunc float %1331 to bfloat, !dbg !130
  %1389 = fptrunc float %1332 to bfloat, !dbg !130
  %1390 = fptrunc float %1333 to bfloat, !dbg !130
  %1391 = fptrunc float %1334 to bfloat, !dbg !130
  %1392 = fptrunc float %1335 to bfloat, !dbg !130
  %1393 = insertelement <2 x bfloat> poison, bfloat %1376, i64 0, !dbg !130
  %1394 = insertelement <2 x bfloat> %1393, bfloat %1378, i64 1, !dbg !130
  %1395 = bitcast <2 x bfloat> %1394 to i32, !dbg !130
  %1396 = insertelement <2 x bfloat> poison, bfloat %1379, i64 0, !dbg !130
  %1397 = insertelement <2 x bfloat> %1396, bfloat %1380, i64 1, !dbg !130
  %1398 = bitcast <2 x bfloat> %1397 to i32, !dbg !130
  %1399 = insertelement <2 x bfloat> poison, bfloat %1381, i64 0, !dbg !130
  %1400 = insertelement <2 x bfloat> %1399, bfloat %1382, i64 1, !dbg !130
  %1401 = bitcast <2 x bfloat> %1400 to i32, !dbg !130
  %1402 = insertelement <2 x bfloat> poison, bfloat %1383, i64 0, !dbg !130
  %1403 = insertelement <2 x bfloat> %1402, bfloat %1384, i64 1, !dbg !130
  %1404 = bitcast <2 x bfloat> %1403 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1395, i32 %1398, i32 %1401, i32 %1404, ptr addrspace(1) %1372, i1 %1184) #5, !dbg !130
  %1405 = insertelement <2 x bfloat> poison, bfloat %1385, i64 0, !dbg !130
  %1406 = insertelement <2 x bfloat> %1405, bfloat %1386, i64 1, !dbg !130
  %1407 = bitcast <2 x bfloat> %1406 to i32, !dbg !130
  %1408 = insertelement <2 x bfloat> poison, bfloat %1387, i64 0, !dbg !130
  %1409 = insertelement <2 x bfloat> %1408, bfloat %1388, i64 1, !dbg !130
  %1410 = bitcast <2 x bfloat> %1409 to i32, !dbg !130
  %1411 = insertelement <2 x bfloat> poison, bfloat %1389, i64 0, !dbg !130
  %1412 = insertelement <2 x bfloat> %1411, bfloat %1390, i64 1, !dbg !130
  %1413 = bitcast <2 x bfloat> %1412 to i32, !dbg !130
  %1414 = insertelement <2 x bfloat> poison, bfloat %1391, i64 0, !dbg !130
  %1415 = insertelement <2 x bfloat> %1414, bfloat %1392, i64 1, !dbg !130
  %1416 = bitcast <2 x bfloat> %1415 to i32, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1407, i32 %1410, i32 %1413, i32 %1416, ptr addrspace(1) %1374, i1 %1184) #5, !dbg !130
  br i1 %1161, label %1160, label %1417, !dbg !99

1417:                                             ; preds = %1160
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1418 = extractelement <16 x float> %1370, i64 14, !dbg !142
  %1419 = extractelement <16 x float> %1370, i64 15, !dbg !142
  %1420 = fcmp olt float %1418, %1419, !dbg !142
  %1421 = fcmp uno float %1418, 0.000000e+00, !dbg !143
  %1422 = or i1 %1420, %1421, !dbg !144
  %1423 = select i1 %1422, float %1418, float %1419, !dbg !145
  %1424 = fcmp olt float %1423, %1354, !dbg !142
  %1425 = fcmp uno float %1423, 0.000000e+00, !dbg !143
  %1426 = or i1 %1424, %1425, !dbg !144
  %1427 = select i1 %1426, float %1423, float %1354, !dbg !145
  %1428 = fcmp olt float %1427, %1355, !dbg !142
  %1429 = fcmp uno float %1427, 0.000000e+00, !dbg !143
  %1430 = or i1 %1428, %1429, !dbg !144
  %1431 = select i1 %1430, float %1427, float %1355, !dbg !145
  %1432 = extractelement <4 x float> %1358, i64 0, !dbg !142
  %1433 = fcmp olt float %1431, %1432, !dbg !142
  %1434 = fcmp uno float %1431, 0.000000e+00, !dbg !143
  %1435 = or i1 %1433, %1434, !dbg !144
  %1436 = select i1 %1435, float %1431, float %1432, !dbg !145
  %1437 = extractelement <4 x float> %1358, i64 1, !dbg !142
  %1438 = fcmp olt float %1436, %1437, !dbg !142
  %1439 = fcmp uno float %1436, 0.000000e+00, !dbg !143
  %1440 = or i1 %1438, %1439, !dbg !144
  %1441 = select i1 %1440, float %1436, float %1437, !dbg !145
  %1442 = extractelement <4 x float> %1358, i64 2, !dbg !142
  %1443 = fcmp olt float %1441, %1442, !dbg !142
  %1444 = fcmp uno float %1441, 0.000000e+00, !dbg !143
  %1445 = or i1 %1443, %1444, !dbg !144
  %1446 = select i1 %1445, float %1441, float %1442, !dbg !145
  %1447 = extractelement <4 x float> %1358, i64 3, !dbg !142
  %1448 = fcmp olt float %1446, %1447, !dbg !142
  %1449 = fcmp uno float %1446, 0.000000e+00, !dbg !143
  %1450 = or i1 %1448, %1449, !dbg !144
  %1451 = select i1 %1450, float %1446, float %1447, !dbg !145
  %1452 = extractelement <8 x float> %1361, i64 6, !dbg !142
  %1453 = extractelement <8 x float> %1361, i64 7, !dbg !142
  %1454 = fcmp olt float %1453, %1452, !dbg !142
  %1455 = fcmp uno float %1453, 0.000000e+00, !dbg !143
  %1456 = or i1 %1454, %1455, !dbg !144
  %1457 = select i1 %1456, float %1453, float %1452, !dbg !145
  %1458 = extractelement <8 x float> %1361, i64 5, !dbg !142
  %1459 = fcmp olt float %1457, %1458, !dbg !142
  %1460 = fcmp uno float %1457, 0.000000e+00, !dbg !143
  %1461 = or i1 %1459, %1460, !dbg !144
  %1462 = select i1 %1461, float %1457, float %1458, !dbg !145
  %1463 = extractelement <8 x float> %1361, i64 4, !dbg !142
  %1464 = fcmp olt float %1462, %1463, !dbg !142
  %1465 = fcmp uno float %1462, 0.000000e+00, !dbg !143
  %1466 = or i1 %1464, %1465, !dbg !144
  %1467 = select i1 %1466, float %1462, float %1463, !dbg !145
  %1468 = extractelement <8 x float> %1361, i64 3, !dbg !142
  %1469 = fcmp olt float %1467, %1468, !dbg !142
  %1470 = fcmp uno float %1467, 0.000000e+00, !dbg !143
  %1471 = or i1 %1469, %1470, !dbg !144
  %1472 = select i1 %1471, float %1467, float %1468, !dbg !145
  %1473 = extractelement <8 x float> %1361, i64 2, !dbg !142
  %1474 = fcmp olt float %1472, %1473, !dbg !142
  %1475 = fcmp uno float %1472, 0.000000e+00, !dbg !143
  %1476 = or i1 %1474, %1475, !dbg !144
  %1477 = select i1 %1476, float %1472, float %1473, !dbg !145
  %1478 = extractelement <8 x float> %1361, i64 1, !dbg !142
  %1479 = fcmp olt float %1477, %1478, !dbg !142
  %1480 = fcmp uno float %1477, 0.000000e+00, !dbg !143
  %1481 = or i1 %1479, %1480, !dbg !144
  %1482 = select i1 %1481, float %1477, float %1478, !dbg !145
  %1483 = extractelement <8 x float> %1361, i64 0, !dbg !142
  %1484 = fcmp olt float %1482, %1483, !dbg !142
  %1485 = fcmp uno float %1482, 0.000000e+00, !dbg !143
  %1486 = or i1 %1484, %1485, !dbg !144
  %1487 = select i1 %1486, float %1482, float %1483, !dbg !145
  %1488 = bitcast float %1451 to i32, !dbg !140
  %1489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1488, i32 16, i32 31), !dbg !140
  %1490 = bitcast i32 %1489 to float, !dbg !140
  %1491 = fcmp olt float %1451, %1490, !dbg !142
  %1492 = fcmp uno float %1451, 0.000000e+00, !dbg !143
  %1493 = or i1 %1492, %1491, !dbg !144
  %1494 = select i1 %1493, float %1451, float %1490, !dbg !145
  %1495 = bitcast float %1494 to i32, !dbg !140
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1495, i32 8, i32 31), !dbg !140
  %1497 = bitcast i32 %1496 to float, !dbg !140
  %1498 = fcmp olt float %1494, %1497, !dbg !142
  %1499 = fcmp uno float %1494, 0.000000e+00, !dbg !143
  %1500 = or i1 %1498, %1499, !dbg !144
  %1501 = select i1 %1500, float %1494, float %1497, !dbg !145
  %1502 = bitcast float %1501 to i32, !dbg !140
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1502, i32 4, i32 31), !dbg !140
  %1504 = bitcast i32 %1503 to float, !dbg !140
  %1505 = fcmp olt float %1501, %1504, !dbg !142
  %1506 = fcmp uno float %1501, 0.000000e+00, !dbg !143
  %1507 = or i1 %1505, %1506, !dbg !144
  %1508 = select i1 %1507, float %1501, float %1504, !dbg !145
  %1509 = bitcast float %1508 to i32, !dbg !140
  %1510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 2, i32 31), !dbg !140
  %1511 = bitcast i32 %1510 to float, !dbg !140
  %1512 = fcmp olt float %1508, %1511, !dbg !142
  %1513 = fcmp uno float %1508, 0.000000e+00, !dbg !143
  %1514 = or i1 %1512, %1513, !dbg !144
  %1515 = select i1 %1514, float %1508, float %1511, !dbg !145
  %1516 = bitcast float %1515 to i32, !dbg !140
  %1517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1516, i32 1, i32 31), !dbg !140
  %1518 = bitcast i32 %1517 to float, !dbg !140
  %1519 = fcmp olt float %1515, %1518, !dbg !142
  %1520 = fcmp uno float %1515, 0.000000e+00, !dbg !143
  %1521 = or i1 %1519, %1520, !dbg !144
  %1522 = bitcast float %1487 to i32, !dbg !140
  %1523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1522, i32 16, i32 31), !dbg !140
  %1524 = bitcast i32 %1523 to float, !dbg !140
  %1525 = fcmp olt float %1487, %1524, !dbg !142
  %1526 = fcmp uno float %1487, 0.000000e+00, !dbg !143
  %1527 = or i1 %1526, %1525, !dbg !144
  %1528 = select i1 %1527, float %1487, float %1524, !dbg !145
  %1529 = bitcast float %1528 to i32, !dbg !140
  %1530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1529, i32 8, i32 31), !dbg !140
  %1531 = bitcast i32 %1530 to float, !dbg !140
  %1532 = fcmp olt float %1528, %1531, !dbg !142
  %1533 = fcmp uno float %1528, 0.000000e+00, !dbg !143
  %1534 = or i1 %1532, %1533, !dbg !144
  %1535 = select i1 %1534, float %1528, float %1531, !dbg !145
  %1536 = bitcast float %1535 to i32, !dbg !140
  %1537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1536, i32 4, i32 31), !dbg !140
  %1538 = bitcast i32 %1537 to float, !dbg !140
  %1539 = fcmp olt float %1535, %1538, !dbg !142
  %1540 = fcmp uno float %1535, 0.000000e+00, !dbg !143
  %1541 = or i1 %1539, %1540, !dbg !144
  %1542 = select i1 %1541, float %1535, float %1538, !dbg !145
  %1543 = bitcast float %1542 to i32, !dbg !140
  %1544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1543, i32 2, i32 31), !dbg !140
  %1545 = bitcast i32 %1544 to float, !dbg !140
  %1546 = fcmp olt float %1542, %1545, !dbg !142
  %1547 = fcmp uno float %1542, 0.000000e+00, !dbg !143
  %1548 = or i1 %1546, %1547, !dbg !144
  %1549 = select i1 %1548, float %1542, float %1545, !dbg !145
  %1550 = bitcast float %1549 to i32, !dbg !140
  %1551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1550, i32 1, i32 31), !dbg !140
  %1552 = bitcast i32 %1551 to float, !dbg !140
  %1553 = fcmp olt float %1549, %1552, !dbg !142
  %1554 = fcmp uno float %1549, 0.000000e+00, !dbg !143
  %1555 = or i1 %1553, %1554, !dbg !144
  %1556 = select i1 %1521, i32 %1516, i32 %1517, !dbg !145
  %1557 = insertelement <1 x i32> poison, i32 %1556, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1024, <1 x i32> %1557, i1 %1023) #5, !dbg !140
  %1558 = select i1 %1555, i32 %1550, i32 %1551, !dbg !145
  %1559 = insertelement <1 x i32> poison, i32 %1558, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1031, <1 x i32> %1559, i1 %1023) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1560 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1038, i1 %1037) #5, !dbg !140
  %1561 = bitcast i32 %1560 to float, !dbg !140
  %1562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1560, i32 4, i32 31), !dbg !140
  %1563 = bitcast i32 %1562 to float, !dbg !140
  %1564 = fcmp olt float %1561, %1563, !dbg !142
  %1565 = fcmp uno float %1561, 0.000000e+00, !dbg !143
  %1566 = or i1 %1565, %1564, !dbg !144
  %1567 = select i1 %1566, float %1561, float %1563, !dbg !145
  %1568 = bitcast float %1567 to i32, !dbg !140
  %1569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1568, i32 2, i32 31), !dbg !140
  %1570 = bitcast i32 %1569 to float, !dbg !140
  %1571 = fcmp olt float %1567, %1570, !dbg !142
  %1572 = fcmp uno float %1567, 0.000000e+00, !dbg !143
  %1573 = or i1 %1571, %1572, !dbg !144
  %1574 = select i1 %1573, float %1567, float %1570, !dbg !145
  %1575 = bitcast float %1574 to i32, !dbg !140
  %1576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1575, i32 1, i32 31), !dbg !140
  %1577 = bitcast i32 %1576 to float, !dbg !140
  %1578 = fcmp olt float %1574, %1577, !dbg !142
  %1579 = fcmp uno float %1574, 0.000000e+00, !dbg !143
  %1580 = or i1 %1578, %1579, !dbg !144
  %1581 = select i1 %1580, i32 %1575, i32 %1576, !dbg !145
  %1582 = insertelement <1 x i32> poison, i32 %1581, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1582, i1 %1109) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1583 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %1584 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1585 = bitcast float %1583 to i32, !dbg !146
  %1586 = bitcast float %1584 to i32, !dbg !146
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1585, i32 %1586, i1 true) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1587 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %625, !dbg !146
  %1588 = load float, ptr addrspace(3) %1587, align 4, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1589 = extractelement <16 x float> %1370, i64 0, !dbg !149
  %1590 = extractelement <16 x float> %1370, i64 1, !dbg !149
  %1591 = fcmp ogt float %1589, %1590, !dbg !149
  %1592 = fcmp uno float %1589, 0.000000e+00, !dbg !150
  %1593 = or i1 %1591, %1592, !dbg !151
  %1594 = select i1 %1593, float %1589, float %1590, !dbg !152
  %1595 = extractelement <16 x float> %1370, i64 2, !dbg !149
  %1596 = fcmp ogt float %1594, %1595, !dbg !149
  %1597 = fcmp uno float %1594, 0.000000e+00, !dbg !150
  %1598 = or i1 %1596, %1597, !dbg !151
  %1599 = select i1 %1598, float %1594, float %1595, !dbg !152
  %1600 = extractelement <16 x float> %1370, i64 3, !dbg !149
  %1601 = fcmp ogt float %1599, %1600, !dbg !149
  %1602 = fcmp uno float %1599, 0.000000e+00, !dbg !150
  %1603 = or i1 %1601, %1602, !dbg !151
  %1604 = select i1 %1603, float %1599, float %1600, !dbg !152
  %1605 = extractelement <16 x float> %1370, i64 4, !dbg !149
  %1606 = fcmp ogt float %1604, %1605, !dbg !149
  %1607 = fcmp uno float %1604, 0.000000e+00, !dbg !150
  %1608 = or i1 %1606, %1607, !dbg !151
  %1609 = select i1 %1608, float %1604, float %1605, !dbg !152
  %1610 = extractelement <16 x float> %1370, i64 5, !dbg !149
  %1611 = fcmp ogt float %1609, %1610, !dbg !149
  %1612 = fcmp uno float %1609, 0.000000e+00, !dbg !150
  %1613 = or i1 %1611, %1612, !dbg !151
  %1614 = select i1 %1613, float %1609, float %1610, !dbg !152
  %1615 = extractelement <16 x float> %1370, i64 6, !dbg !149
  %1616 = fcmp ogt float %1614, %1615, !dbg !149
  %1617 = fcmp uno float %1614, 0.000000e+00, !dbg !150
  %1618 = or i1 %1616, %1617, !dbg !151
  %1619 = select i1 %1618, float %1614, float %1615, !dbg !152
  %1620 = extractelement <16 x float> %1370, i64 7, !dbg !149
  %1621 = fcmp ogt float %1619, %1620, !dbg !149
  %1622 = fcmp uno float %1619, 0.000000e+00, !dbg !150
  %1623 = or i1 %1621, %1622, !dbg !151
  %1624 = select i1 %1623, float %1619, float %1620, !dbg !152
  %1625 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1367, <2 x i32> <i32 0, i32 2>, !dbg !149
  %1626 = fcmp ogt <2 x float> %1625, %1367, !dbg !149
  %1627 = fcmp uno <2 x float> %1625, %1367, !dbg !149
  %shift = shufflevector <2 x i1> %1626, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !151
  %1628 = or <2 x i1> %shift, %1627, !dbg !151
  %1629 = extractelement <2 x i1> %1628, i64 0, !dbg !151
  %1630 = extractelement <2 x float> %1367, i64 0, !dbg !152
  %1631 = extractelement <2 x float> %1367, i64 1, !dbg !152
  %1632 = select i1 %1629, float %1630, float %1631, !dbg !152
  %1633 = extractelement <16 x float> %1370, i64 8, !dbg !149
  %1634 = fcmp ogt float %1632, %1633, !dbg !149
  %1635 = fcmp uno float %1632, 0.000000e+00, !dbg !150
  %1636 = or i1 %1634, %1635, !dbg !151
  %1637 = select i1 %1636, float %1632, float %1633, !dbg !152
  %1638 = extractelement <16 x float> %1370, i64 9, !dbg !149
  %1639 = fcmp ogt float %1637, %1638, !dbg !149
  %1640 = fcmp uno float %1637, 0.000000e+00, !dbg !150
  %1641 = or i1 %1639, %1640, !dbg !151
  %1642 = select i1 %1641, float %1637, float %1638, !dbg !152
  %1643 = extractelement <16 x float> %1370, i64 10, !dbg !149
  %1644 = fcmp ogt float %1642, %1643, !dbg !149
  %1645 = fcmp uno float %1642, 0.000000e+00, !dbg !150
  %1646 = or i1 %1644, %1645, !dbg !151
  %1647 = select i1 %1646, float %1642, float %1643, !dbg !152
  %1648 = extractelement <16 x float> %1370, i64 11, !dbg !149
  %1649 = fcmp ogt float %1647, %1648, !dbg !149
  %1650 = fcmp uno float %1647, 0.000000e+00, !dbg !150
  %1651 = or i1 %1649, %1650, !dbg !151
  %1652 = select i1 %1651, float %1647, float %1648, !dbg !152
  %1653 = extractelement <16 x float> %1370, i64 12, !dbg !149
  %1654 = fcmp ogt float %1652, %1653, !dbg !149
  %1655 = fcmp uno float %1652, 0.000000e+00, !dbg !150
  %1656 = or i1 %1654, %1655, !dbg !151
  %1657 = select i1 %1656, float %1652, float %1653, !dbg !152
  %1658 = extractelement <16 x float> %1370, i64 13, !dbg !149
  %1659 = fcmp ogt float %1657, %1658, !dbg !149
  %1660 = fcmp uno float %1657, 0.000000e+00, !dbg !150
  %1661 = or i1 %1659, %1660, !dbg !151
  %1662 = select i1 %1661, float %1657, float %1658, !dbg !152
  %1663 = bitcast float %1624 to i32, !dbg !147
  %1664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1663, i32 16, i32 31), !dbg !147
  %1665 = bitcast i32 %1664 to float, !dbg !147
  %1666 = fcmp ogt float %1624, %1665, !dbg !149
  %1667 = fcmp uno float %1624, 0.000000e+00, !dbg !150
  %1668 = or i1 %1667, %1666, !dbg !151
  %1669 = select i1 %1668, float %1624, float %1665, !dbg !152
  %1670 = bitcast float %1669 to i32, !dbg !147
  %1671 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1670, i32 8, i32 31), !dbg !147
  %1672 = bitcast i32 %1671 to float, !dbg !147
  %1673 = fcmp ogt float %1669, %1672, !dbg !149
  %1674 = fcmp uno float %1669, 0.000000e+00, !dbg !150
  %1675 = or i1 %1673, %1674, !dbg !151
  %1676 = select i1 %1675, float %1669, float %1672, !dbg !152
  %1677 = bitcast float %1676 to i32, !dbg !147
  %1678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1677, i32 4, i32 31), !dbg !147
  %1679 = bitcast i32 %1678 to float, !dbg !147
  %1680 = fcmp ogt float %1676, %1679, !dbg !149
  %1681 = fcmp uno float %1676, 0.000000e+00, !dbg !150
  %1682 = or i1 %1680, %1681, !dbg !151
  %1683 = select i1 %1682, float %1676, float %1679, !dbg !152
  %1684 = bitcast float %1683 to i32, !dbg !147
  %1685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1684, i32 2, i32 31), !dbg !147
  %1686 = bitcast i32 %1685 to float, !dbg !147
  %1687 = fcmp ogt float %1683, %1686, !dbg !149
  %1688 = fcmp uno float %1683, 0.000000e+00, !dbg !150
  %1689 = or i1 %1687, %1688, !dbg !151
  %1690 = select i1 %1689, float %1683, float %1686, !dbg !152
  %1691 = bitcast float %1690 to i32, !dbg !147
  %1692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1691, i32 1, i32 31), !dbg !147
  %1693 = bitcast i32 %1692 to float, !dbg !147
  %1694 = fcmp ogt float %1690, %1693, !dbg !149
  %1695 = fcmp uno float %1690, 0.000000e+00, !dbg !150
  %1696 = or i1 %1694, %1695, !dbg !151
  %1697 = bitcast float %1662 to i32, !dbg !147
  %1698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1697, i32 16, i32 31), !dbg !147
  %1699 = bitcast i32 %1698 to float, !dbg !147
  %1700 = fcmp ogt float %1662, %1699, !dbg !149
  %1701 = fcmp uno float %1662, 0.000000e+00, !dbg !150
  %1702 = or i1 %1701, %1700, !dbg !151
  %1703 = select i1 %1702, float %1662, float %1699, !dbg !152
  %1704 = bitcast float %1703 to i32, !dbg !147
  %1705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1704, i32 8, i32 31), !dbg !147
  %1706 = bitcast i32 %1705 to float, !dbg !147
  %1707 = fcmp ogt float %1703, %1706, !dbg !149
  %1708 = fcmp uno float %1703, 0.000000e+00, !dbg !150
  %1709 = or i1 %1707, %1708, !dbg !151
  %1710 = select i1 %1709, float %1703, float %1706, !dbg !152
  %1711 = bitcast float %1710 to i32, !dbg !147
  %1712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1711, i32 4, i32 31), !dbg !147
  %1713 = bitcast i32 %1712 to float, !dbg !147
  %1714 = fcmp ogt float %1710, %1713, !dbg !149
  %1715 = fcmp uno float %1710, 0.000000e+00, !dbg !150
  %1716 = or i1 %1714, %1715, !dbg !151
  %1717 = select i1 %1716, float %1710, float %1713, !dbg !152
  %1718 = bitcast float %1717 to i32, !dbg !147
  %1719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1718, i32 2, i32 31), !dbg !147
  %1720 = bitcast i32 %1719 to float, !dbg !147
  %1721 = fcmp ogt float %1717, %1720, !dbg !149
  %1722 = fcmp uno float %1717, 0.000000e+00, !dbg !150
  %1723 = or i1 %1721, %1722, !dbg !151
  %1724 = select i1 %1723, float %1717, float %1720, !dbg !152
  %1725 = bitcast float %1724 to i32, !dbg !147
  %1726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1725, i32 1, i32 31), !dbg !147
  %1727 = bitcast i32 %1726 to float, !dbg !147
  %1728 = fcmp ogt float %1724, %1727, !dbg !149
  %1729 = fcmp uno float %1724, 0.000000e+00, !dbg !150
  %1730 = or i1 %1728, %1729, !dbg !151
  %1731 = select i1 %1696, i32 %1691, i32 %1692, !dbg !152
  %1732 = insertelement <1 x i32> poison, i32 %1731, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1024, <1 x i32> %1732, i1 %1023) #5, !dbg !147
  %1733 = select i1 %1730, i32 %1725, i32 %1726, !dbg !152
  %1734 = insertelement <1 x i32> poison, i32 %1733, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1031, <1 x i32> %1734, i1 %1023) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1735 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1038, i1 %1037) #5, !dbg !147
  %1736 = bitcast i32 %1735 to float, !dbg !147
  %1737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1735, i32 4, i32 31), !dbg !147
  %1738 = bitcast i32 %1737 to float, !dbg !147
  %1739 = fcmp ogt float %1736, %1738, !dbg !149
  %1740 = fcmp uno float %1736, 0.000000e+00, !dbg !150
  %1741 = or i1 %1740, %1739, !dbg !151
  %1742 = select i1 %1741, float %1736, float %1738, !dbg !152
  %1743 = bitcast float %1742 to i32, !dbg !147
  %1744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1743, i32 2, i32 31), !dbg !147
  %1745 = bitcast i32 %1744 to float, !dbg !147
  %1746 = fcmp ogt float %1742, %1745, !dbg !149
  %1747 = fcmp uno float %1742, 0.000000e+00, !dbg !150
  %1748 = or i1 %1746, %1747, !dbg !151
  %1749 = select i1 %1748, float %1742, float %1745, !dbg !152
  %1750 = bitcast float %1749 to i32, !dbg !147
  %1751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1750, i32 1, i32 31), !dbg !147
  %1752 = bitcast i32 %1751 to float, !dbg !147
  %1753 = fcmp ogt float %1749, %1752, !dbg !149
  %1754 = fcmp uno float %1749, 0.000000e+00, !dbg !150
  %1755 = or i1 %1753, %1754, !dbg !151
  %1756 = select i1 %1755, i32 %1750, i32 %1751, !dbg !152
  %1757 = insertelement <1 x i32> poison, i32 %1756, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1757, i1 %1109) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1758 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !147
  %1759 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %1760 = bitcast float %1758 to i32, !dbg !153
  %1761 = bitcast float %1759 to i32, !dbg !153
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1760, i32 %1761, i1 true) #5, !dbg !153
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %1762 = load float, ptr addrspace(3) %1587, align 4, !dbg !153
  %1763 = sext i32 %626 to i64, !dbg !154
  %1764 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1763, !dbg !154
  %1765 = fptrunc float %1588 to bfloat, !dbg !146
  %1766 = and i32 %19, 254, !dbg !146
  %1767 = icmp eq i32 %1766, 0, !dbg !146
  %1768 = bitcast bfloat %1765 to i16, !dbg !146
  %1769 = and i1 %1767, %627, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1768, ptr addrspace(1) %1764, i1 %1769) #5, !dbg !146
  %1770 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1763, !dbg !155
  %1771 = fptrunc float %1762 to bfloat, !dbg !153
  %1772 = bitcast bfloat %1771 to i16, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1772, ptr addrspace(1) %1770, i1 %1769) #5, !dbg !153
  %.inv5 = fcmp oge float %1583, 0.000000e+00, !dbg !156
  %1773 = select i1 %.inv5, float 0.000000e+00, float %1583, !dbg !156
  %.inv6 = fcmp oge float %1584, 0.000000e+00, !dbg !156
  %1774 = select i1 %.inv6, float 0.000000e+00, float %1584, !dbg !156
  %1775 = fsub float 0.000000e+00, %1773, !dbg !158
  %1776 = fsub float 0.000000e+00, %1774, !dbg !158
  %.inv7 = fcmp ole float %1758, 0.000000e+00, !dbg !159
  %1777 = select i1 %.inv7, float 0.000000e+00, float %1758, !dbg !159
  %.inv8 = fcmp ole float %1759, 0.000000e+00, !dbg !159
  %1778 = select i1 %.inv8, float 0.000000e+00, float %1759, !dbg !159
  %1779 = fcmp ogt float %1775, %1777, !dbg !161
  %1780 = fcmp ogt float %1776, %1778, !dbg !161
  %1781 = fcmp uno float %1775, 0.000000e+00, !dbg !163
  %1782 = fcmp uno float %1776, 0.000000e+00, !dbg !163
  %1783 = or i1 %1781, %1779, !dbg !164
  %1784 = or i1 %1782, %1780, !dbg !164
  %1785 = select i1 %1783, float %1775, float %1777, !dbg !165
  %1786 = select i1 %1784, float %1776, float %1778, !dbg !165
  %1787 = fmul float %1785, 0x3F80204080000000, !dbg !166
  %1788 = fmul float %1786, 0x3F80204080000000, !dbg !166
  %1789 = fcmp ogt float %1787, 0x3EE4F8B580000000, !dbg !167
  %1790 = fcmp ogt float %1788, 0x3EE4F8B580000000, !dbg !167
  %1791 = fcmp uno float %1787, 0.000000e+00, !dbg !169
  %1792 = fcmp uno float %1788, 0.000000e+00, !dbg !169
  %1793 = or i1 %1789, %1791, !dbg !170
  %1794 = or i1 %1790, %1792, !dbg !170
  %1795 = select i1 %1793, float %1787, float 0x3EE4F8B580000000, !dbg !171
  %1796 = select i1 %1794, float %1788, float 0x3EE4F8B580000000, !dbg !171
  %1797 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1795), !dbg !172
  %1798 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1796), !dbg !172
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %1799 = bitcast float %1797 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1799, i1 true) #5, !dbg !173
  %1800 = bitcast float %1798 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1800, i1 true) #5, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %1801 = lshr exact i32 %20, 4, !dbg !173
  %1802 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1801, !dbg !173
  %1803 = load float, ptr addrspace(3) %1802, align 8, !dbg !173
  br label %1804, !dbg !174

1804:                                             ; preds = %1417, %1804
  %1805 = phi i1 [ true, %1417 ], [ false, %1804 ]
  %indvars.iv257 = phi i64 [ 0, %1417 ], [ 2048, %1804 ]
  %1806 = or disjoint i64 %indvars.iv257, %110, !dbg !175
  %1807 = icmp samesign ult i64 %1806, 3072, !dbg !176
  %1808 = trunc nuw nsw i64 %1806 to i32, !dbg !177
  %1809 = add i32 %70, %1808, !dbg !177
  %1810 = trunc nuw nsw i64 %indvars.iv257 to i32, !dbg !177
  %1811 = add i32 %88, %1810, !dbg !177
  %1812 = sext i32 %1809 to i64, !dbg !178
  %1813 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1812, !dbg !178
  %1814 = sext i32 %1811 to i64, !dbg !178
  %1815 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1814, !dbg !178
  %1816 = and i1 %23, %1807, !dbg !179
  %1817 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1813, i1 %1816) #5, !dbg !180
  %1818 = extractvalue { i32, i32, i32, i32 } %1817, 0, !dbg !180
  %1819 = bitcast i32 %1818 to <2 x bfloat>, !dbg !180
  %1820 = extractvalue { i32, i32, i32, i32 } %1817, 1, !dbg !180
  %1821 = bitcast i32 %1820 to <2 x bfloat>, !dbg !180
  %1822 = extractvalue { i32, i32, i32, i32 } %1817, 2, !dbg !180
  %1823 = bitcast i32 %1822 to <2 x bfloat>, !dbg !180
  %1824 = extractvalue { i32, i32, i32, i32 } %1817, 3, !dbg !180
  %1825 = bitcast i32 %1824 to <2 x bfloat>, !dbg !180
  %1826 = extractelement <2 x bfloat> %1819, i64 0, !dbg !180
  %1827 = extractelement <2 x bfloat> %1819, i64 1, !dbg !180
  %1828 = extractelement <2 x bfloat> %1821, i64 0, !dbg !180
  %1829 = extractelement <2 x bfloat> %1821, i64 1, !dbg !180
  %1830 = extractelement <2 x bfloat> %1823, i64 0, !dbg !180
  %1831 = extractelement <2 x bfloat> %1823, i64 1, !dbg !180
  %1832 = extractelement <2 x bfloat> %1825, i64 0, !dbg !180
  %1833 = extractelement <2 x bfloat> %1825, i64 1, !dbg !180
  %1834 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1815, i1 %1816) #5, !dbg !180
  %1835 = extractvalue { i32, i32, i32, i32 } %1834, 0, !dbg !180
  %1836 = bitcast i32 %1835 to <2 x bfloat>, !dbg !180
  %1837 = extractvalue { i32, i32, i32, i32 } %1834, 1, !dbg !180
  %1838 = bitcast i32 %1837 to <2 x bfloat>, !dbg !180
  %1839 = extractvalue { i32, i32, i32, i32 } %1834, 2, !dbg !180
  %1840 = bitcast i32 %1839 to <2 x bfloat>, !dbg !180
  %1841 = extractvalue { i32, i32, i32, i32 } %1834, 3, !dbg !180
  %1842 = bitcast i32 %1841 to <2 x bfloat>, !dbg !180
  %1843 = extractelement <2 x bfloat> %1836, i64 0, !dbg !180
  %1844 = extractelement <2 x bfloat> %1836, i64 1, !dbg !180
  %1845 = extractelement <2 x bfloat> %1838, i64 0, !dbg !180
  %1846 = extractelement <2 x bfloat> %1838, i64 1, !dbg !180
  %1847 = extractelement <2 x bfloat> %1840, i64 0, !dbg !180
  %1848 = extractelement <2 x bfloat> %1840, i64 1, !dbg !180
  %1849 = extractelement <2 x bfloat> %1842, i64 0, !dbg !180
  %1850 = extractelement <2 x bfloat> %1842, i64 1, !dbg !180
  %1851 = fpext bfloat %1826 to float, !dbg !181
  %1852 = fpext bfloat %1827 to float, !dbg !181
  %1853 = fpext bfloat %1828 to float, !dbg !181
  %1854 = fpext bfloat %1829 to float, !dbg !181
  %1855 = fpext bfloat %1830 to float, !dbg !181
  %1856 = fpext bfloat %1831 to float, !dbg !181
  %1857 = fpext bfloat %1832 to float, !dbg !181
  %1858 = fpext bfloat %1833 to float, !dbg !181
  %1859 = fpext bfloat %1843 to float, !dbg !181
  %1860 = fpext bfloat %1844 to float, !dbg !181
  %1861 = fpext bfloat %1845 to float, !dbg !181
  %1862 = fpext bfloat %1846 to float, !dbg !181
  %1863 = fpext bfloat %1847 to float, !dbg !181
  %1864 = fpext bfloat %1848 to float, !dbg !181
  %1865 = fpext bfloat %1849 to float, !dbg !181
  %1866 = fpext bfloat %1850 to float, !dbg !181
  %1867 = fmul float %1803, %1851, !dbg !173
  %1868 = fmul float %1803, %1852, !dbg !173
  %1869 = fmul float %1803, %1853, !dbg !173
  %1870 = fmul float %1803, %1854, !dbg !173
  %1871 = fmul float %1803, %1855, !dbg !173
  %1872 = fmul float %1803, %1856, !dbg !173
  %1873 = fmul float %1803, %1857, !dbg !173
  %1874 = fmul float %1803, %1858, !dbg !173
  %1875 = fmul float %1803, %1859, !dbg !173
  %1876 = fmul float %1803, %1860, !dbg !173
  %1877 = fmul float %1803, %1861, !dbg !173
  %1878 = fmul float %1803, %1862, !dbg !173
  %1879 = fmul float %1803, %1863, !dbg !173
  %1880 = fmul float %1803, %1864, !dbg !173
  %1881 = fmul float %1803, %1865, !dbg !173
  %1882 = fmul float %1803, %1866, !dbg !173
  %1883 = tail call float @llvm.nvvm.round.f(float %1867) #5, !dbg !182
  %1884 = tail call float @llvm.nvvm.round.f(float %1868) #5, !dbg !182
  %1885 = tail call float @llvm.nvvm.round.f(float %1869) #5, !dbg !182
  %1886 = tail call float @llvm.nvvm.round.f(float %1870) #5, !dbg !182
  %1887 = tail call float @llvm.nvvm.round.f(float %1871) #5, !dbg !182
  %1888 = tail call float @llvm.nvvm.round.f(float %1872) #5, !dbg !182
  %1889 = tail call float @llvm.nvvm.round.f(float %1873) #5, !dbg !182
  %1890 = tail call float @llvm.nvvm.round.f(float %1874) #5, !dbg !182
  %1891 = tail call float @llvm.nvvm.round.f(float %1875) #5, !dbg !182
  %1892 = tail call float @llvm.nvvm.round.f(float %1876) #5, !dbg !182
  %1893 = tail call float @llvm.nvvm.round.f(float %1877) #5, !dbg !182
  %1894 = tail call float @llvm.nvvm.round.f(float %1878) #5, !dbg !182
  %1895 = tail call float @llvm.nvvm.round.f(float %1879) #5, !dbg !182
  %1896 = tail call float @llvm.nvvm.round.f(float %1880) #5, !dbg !182
  %1897 = tail call float @llvm.nvvm.round.f(float %1881) #5, !dbg !182
  %1898 = tail call float @llvm.nvvm.round.f(float %1882) #5, !dbg !182
  %1899 = insertelement <4 x float> poison, float %1883, i64 0, !dbg !183
  %1900 = insertelement <4 x float> %1899, float %1884, i64 1, !dbg !183
  %1901 = insertelement <4 x float> %1900, float %1885, i64 2, !dbg !183
  %1902 = insertelement <4 x float> %1901, float %1886, i64 3, !dbg !183
  %1903 = fcmp ogt <4 x float> %1902, splat (float -1.270000e+02), !dbg !183
  %1904 = fcmp uno <4 x float> %1902, zeroinitializer, !dbg !185
  %1905 = or <4 x i1> %1903, %1904, !dbg !186
  %1906 = select <4 x i1> %1905, <4 x float> %1902, <4 x float> splat (float -1.270000e+02), !dbg !187
  %1907 = fcmp olt <4 x float> %1906, splat (float 1.270000e+02), !dbg !188
  %1908 = fcmp uno <4 x float> %1906, zeroinitializer, !dbg !190
  %1909 = or <4 x i1> %1907, %1908, !dbg !191
  %1910 = fptosi <4 x float> %1906 to <4 x i8>, !dbg !192
  %1911 = select <4 x i1> %1909, <4 x i8> %1910, <4 x i8> splat (i8 127), !dbg !193
  %1912 = insertelement <4 x float> poison, float %1887, i64 0, !dbg !183
  %1913 = insertelement <4 x float> %1912, float %1888, i64 1, !dbg !183
  %1914 = insertelement <4 x float> %1913, float %1889, i64 2, !dbg !183
  %1915 = insertelement <4 x float> %1914, float %1890, i64 3, !dbg !183
  %1916 = fcmp ogt <4 x float> %1915, splat (float -1.270000e+02), !dbg !183
  %1917 = fcmp uno <4 x float> %1915, zeroinitializer, !dbg !185
  %1918 = or <4 x i1> %1916, %1917, !dbg !186
  %1919 = select <4 x i1> %1918, <4 x float> %1915, <4 x float> splat (float -1.270000e+02), !dbg !187
  %1920 = fcmp olt <4 x float> %1919, splat (float 1.270000e+02), !dbg !188
  %1921 = fcmp uno <4 x float> %1919, zeroinitializer, !dbg !190
  %1922 = or <4 x i1> %1920, %1921, !dbg !191
  %1923 = fptosi <4 x float> %1919 to <4 x i8>, !dbg !192
  %1924 = select <4 x i1> %1922, <4 x i8> %1923, <4 x i8> splat (i8 127), !dbg !193
  %1925 = insertelement <4 x float> poison, float %1891, i64 0, !dbg !183
  %1926 = insertelement <4 x float> %1925, float %1892, i64 1, !dbg !183
  %1927 = insertelement <4 x float> %1926, float %1893, i64 2, !dbg !183
  %1928 = insertelement <4 x float> %1927, float %1894, i64 3, !dbg !183
  %1929 = fcmp ogt <4 x float> %1928, splat (float -1.270000e+02), !dbg !183
  %1930 = fcmp uno <4 x float> %1928, zeroinitializer, !dbg !185
  %1931 = or <4 x i1> %1929, %1930, !dbg !186
  %1932 = select <4 x i1> %1931, <4 x float> %1928, <4 x float> splat (float -1.270000e+02), !dbg !187
  %1933 = fcmp olt <4 x float> %1932, splat (float 1.270000e+02), !dbg !188
  %1934 = fcmp uno <4 x float> %1932, zeroinitializer, !dbg !190
  %1935 = or <4 x i1> %1933, %1934, !dbg !191
  %1936 = fptosi <4 x float> %1932 to <4 x i8>, !dbg !192
  %1937 = select <4 x i1> %1935, <4 x i8> %1936, <4 x i8> splat (i8 127), !dbg !193
  %1938 = insertelement <4 x float> poison, float %1895, i64 0, !dbg !183
  %1939 = insertelement <4 x float> %1938, float %1896, i64 1, !dbg !183
  %1940 = insertelement <4 x float> %1939, float %1897, i64 2, !dbg !183
  %1941 = insertelement <4 x float> %1940, float %1898, i64 3, !dbg !183
  %1942 = fcmp ogt <4 x float> %1941, splat (float -1.270000e+02), !dbg !183
  %1943 = fcmp uno <4 x float> %1941, zeroinitializer, !dbg !185
  %1944 = or <4 x i1> %1942, %1943, !dbg !186
  %1945 = select <4 x i1> %1944, <4 x float> %1941, <4 x float> splat (float -1.270000e+02), !dbg !187
  %1946 = fcmp olt <4 x float> %1945, splat (float 1.270000e+02), !dbg !188
  %1947 = fcmp uno <4 x float> %1945, zeroinitializer, !dbg !190
  %1948 = or <4 x i1> %1946, %1947, !dbg !191
  %1949 = fptosi <4 x float> %1945 to <4 x i8>, !dbg !192
  %1950 = select <4 x i1> %1948, <4 x i8> %1949, <4 x i8> splat (i8 127), !dbg !193
  %1951 = getelementptr i8, ptr addrspace(1) %12, i64 %1812, !dbg !194
  %1952 = bitcast <4 x i8> %1911 to i32, !dbg !195
  %1953 = bitcast <4 x i8> %1924 to i32, !dbg !195
  %1954 = bitcast <4 x i8> %1937 to i32, !dbg !195
  %1955 = bitcast <4 x i8> %1950 to i32, !dbg !195
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1952, i32 %1953, i32 %1954, i32 %1955, ptr addrspace(1) %1951, i1 %1816) #5, !dbg !195
  br i1 %1805, label %1804, label %1956, !dbg !174

1956:                                             ; preds = %1804
  ret void, !dbg !196
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 35, column: 31, scope: !6)
!40 = !DILocation(line: 36, column: 29, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 59, scope: !6)
!44 = !DILocation(line: 40, column: 51, scope: !6)
!45 = !DILocation(line: 40, column: 113, scope: !6)
!46 = !DILocation(line: 41, column: 41, scope: !6)
!47 = !DILocation(line: 41, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 41, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 43, column: 51, scope: !6)
!56 = !DILocation(line: 44, column: 42, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 42, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 60, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 70, column: 64, scope: !6)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = !DILocation(line: 72, column: 68, scope: !6)
!79 = !DILocation(line: 73, column: 29, scope: !6)
!80 = !DILocation(line: 73, column: 53, scope: !6)
!81 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 217, column: 21, scope: !84, inlinedAt: !82)
!84 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!85 = !DILocation(line: 218, column: 28, scope: !84, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 39, scope: !84, inlinedAt: !82)
!87 = !DILocation(line: 219, column: 60, scope: !84, inlinedAt: !82)
!88 = !DILocation(line: 219, column: 49, scope: !84, inlinedAt: !82)
!89 = !DILocation(line: 221, column: 25, scope: !84, inlinedAt: !82)
!90 = !DILocation(line: 221, column: 17, scope: !84, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 15, scope: !84, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 30, scope: !84, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 38, scope: !84, inlinedAt: !82)
!94 = !DILocation(line: 222, column: 49, scope: !84, inlinedAt: !82)
!95 = !DILocation(line: 222, column: 22, scope: !84, inlinedAt: !82)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 80, column: 40, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 92, column: 24, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 82, column: 29, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 61, scope: !6)
!107 = !DILocation(line: 86, column: 53, scope: !6)
!108 = !DILocation(line: 87, column: 43, scope: !6)
!109 = !DILocation(line: 87, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 35, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 90, column: 35, scope: !6)
!114 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !115)
!115 = !DILocation(line: 111, column: 47, scope: !6)
!116 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !117)
!117 = !DILocation(line: 109, column: 47, scope: !6)
!118 = !DILocation(line: 86, column: 115, scope: !6)
!119 = !DILocation(line: 87, column: 50, scope: !6)
!120 = !DILocation(line: 88, column: 50, scope: !6)
!121 = !DILocation(line: 88, column: 103, scope: !6)
!122 = !DILocation(line: 89, column: 49, scope: !6)
!123 = !DILocation(line: 90, column: 49, scope: !6)
!124 = !DILocation(line: 90, column: 102, scope: !6)
!125 = !DILocation(line: 101, column: 24, scope: !6)
!126 = !DILocation(line: 103, column: 24, scope: !6)
!127 = !DILocation(line: 104, column: 24, scope: !6)
!128 = !DILocation(line: 106, column: 24, scope: !6)
!129 = !DILocation(line: 107, column: 24, scope: !6)
!130 = !DILocation(line: 113, column: 53, scope: !6)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !117)
!132 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !117)
!133 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !117)
!134 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !115)
!135 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !115)
!136 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !115)
!137 = !DILocation(line: 110, column: 50, scope: !6)
!138 = !DILocation(line: 112, column: 50, scope: !6)
!139 = !DILocation(line: 113, column: 29, scope: !6)
!140 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !141)
!141 = !DILocation(line: 114, column: 40, scope: !6)
!142 = !DILocation(line: 94, column: 15, scope: !84, inlinedAt: !141)
!143 = !DILocation(line: 96, column: 21, scope: !84, inlinedAt: !141)
!144 = !DILocation(line: 96, column: 16, scope: !84, inlinedAt: !141)
!145 = !DILocation(line: 97, column: 29, scope: !84, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 37, scope: !6)
!147 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !148)
!148 = !DILocation(line: 115, column: 40, scope: !6)
!149 = !DILocation(line: 102, column: 15, scope: !84, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 21, scope: !84, inlinedAt: !148)
!151 = !DILocation(line: 104, column: 16, scope: !84, inlinedAt: !148)
!152 = !DILocation(line: 105, column: 29, scope: !84, inlinedAt: !148)
!153 = !DILocation(line: 117, column: 37, scope: !6)
!154 = !DILocation(line: 116, column: 25, scope: !6)
!155 = !DILocation(line: 117, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 126, column: 46, scope: !6)
!158 = !DILocation(line: 127, column: 17, scope: !6)
!159 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !160)
!160 = !DILocation(line: 128, column: 46, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !162)
!162 = !DILocation(line: 129, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !162)
!166 = !DILocation(line: 131, column: 24, scope: !6)
!167 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !168)
!168 = !DILocation(line: 134, column: 46, scope: !6)
!169 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !168)
!170 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !168)
!171 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !168)
!172 = !DILocation(line: 137, column: 25, scope: !6)
!173 = !DILocation(line: 140, column: 24, scope: !6)
!174 = !DILocation(line: 118, column: 40, scope: !6)
!175 = !DILocation(line: 119, column: 31, scope: !6)
!176 = !DILocation(line: 120, column: 29, scope: !6)
!177 = !DILocation(line: 124, column: 43, scope: !6)
!178 = !DILocation(line: 124, column: 36, scope: !6)
!179 = !DILocation(line: 124, column: 61, scope: !6)
!180 = !DILocation(line: 124, column: 53, scope: !6)
!181 = !DILocation(line: 124, column: 115, scope: !6)
!182 = !DILocation(line: 141, column: 36, scope: !6)
!183 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !184)
!184 = !DILocation(line: 144, column: 46, scope: !6)
!185 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !184)
!186 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !184)
!187 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !184)
!188 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !189)
!189 = !DILocation(line: 146, column: 46, scope: !6)
!190 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !189)
!191 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !189)
!192 = !DILocation(line: 148, column: 25, scope: !6)
!193 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !189)
!194 = !DILocation(line: 149, column: 29, scope: !6)
!195 = !DILocation(line: 149, column: 53, scope: !6)
!196 = !DILocation(line: 118, column: 4, scope: !6)
