; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %21 = icmp slt i32 %20, 4112, !dbg !10
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %23 = and i32 %22, 31, !dbg !11
  %24 = lshr i32 %22, 5, !dbg !11
  %25 = and i32 %22, 1023, !dbg !11
  %26 = mul i32 %20, 3072, !dbg !12
  %27 = or disjoint i32 %26, %25
  %28 = sext i32 %27 to i64, !dbg !13
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !13
  br i1 %21, label %.split10.us.loopexit, label %.split.preheader

.split.preheader:                                 ; preds = %19
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 false) #5, !dbg !14
  %31 = add i32 %27, 1024, !dbg !15
  %32 = sext i32 %31 to i64, !dbg !13
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !13
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 false) #5, !dbg !14
  %35 = add i32 %27, 2048, !dbg !15
  %36 = sext i32 %35 to i64, !dbg !13
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !13
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 false) #5, !dbg !14
  br label %.split10.us, !dbg !16

.split10.us.loopexit:                             ; preds = %19
  %39 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 true) #5, !dbg !14
  %40 = bitcast i16 %39 to bfloat, !dbg !14
  %41 = fpext bfloat %40 to float, !dbg !20
  %42 = add i32 %27, 1024, !dbg !15
  %43 = sext i32 %42 to i64, !dbg !13
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !13
  %45 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %44, i1 true) #5, !dbg !14
  %46 = bitcast i16 %45 to bfloat, !dbg !14
  %47 = fpext bfloat %46 to float, !dbg !20
  %48 = fsub float %47, %41, !dbg !21
  %49 = tail call float @llvm.nvvm.div.full(float %48, float 2.000000e+00), !dbg !23
  %50 = fadd float %49, %41, !dbg !24
  %51 = fsub float %47, %50, !dbg !25
  %52 = fmul float %48, %51, !dbg !26
  %53 = fadd float %52, 0.000000e+00, !dbg !27
  %54 = add i32 %27, 2048, !dbg !15
  %55 = sext i32 %54 to i64, !dbg !13
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %55, !dbg !13
  %57 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %56, i1 true) #5, !dbg !14
  %58 = bitcast i16 %57 to bfloat, !dbg !14
  %59 = fpext bfloat %58 to float, !dbg !20
  %60 = fsub float %59, %50, !dbg !21
  %61 = tail call float @llvm.nvvm.div.full(float %60, float 3.000000e+00), !dbg !23
  %62 = fadd float %50, %61, !dbg !24
  %63 = fsub float %59, %62, !dbg !25
  %64 = fmul float %60, %63, !dbg !26
  %65 = fadd float %53, %64, !dbg !27
  br label %.split10.us, !dbg !16

.split10.us:                                      ; preds = %.split.preheader, %.split10.us.loopexit
  %.us-phi = phi float [ %62, %.split10.us.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %.us-phi11 = phi float [ %65, %.split10.us.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %.us-phi12 = phi float [ 3.000000e+00, %.split10.us.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %66 = bitcast float %.us-phi to i32, !dbg !16
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !16
  %68 = bitcast i32 %67 to float, !dbg !16
  %69 = bitcast float %.us-phi11 to i32, !dbg !16
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !16
  %71 = bitcast i32 %70 to float, !dbg !16
  %72 = bitcast float %.us-phi12 to i32, !dbg !16
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !16
  %74 = bitcast i32 %73 to float, !dbg !16
  %75 = fsub float %68, %.us-phi, !dbg !28
  %76 = fadd float %.us-phi12, %74, !dbg !30
  %77 = fcmp oeq float %76, 0.000000e+00, !dbg !31
  %78 = tail call float @llvm.nvvm.div.full(float %74, float %76), !dbg !32
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !33
  %80 = fmul float %75, %79, !dbg !34
  %81 = fadd float %.us-phi, %80, !dbg !35
  %82 = fadd float %.us-phi11, %71, !dbg !36
  %83 = fmul float %75, %75, !dbg !37
  %84 = fmul float %.us-phi12, %83, !dbg !38
  %85 = fmul float %84, %79, !dbg !39
  %86 = fadd float %82, %85, !dbg !40
  %87 = bitcast float %81 to i32, !dbg !16
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !16
  %89 = bitcast i32 %88 to float, !dbg !16
  %90 = bitcast float %86 to i32, !dbg !16
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !16
  %92 = bitcast i32 %91 to float, !dbg !16
  %93 = bitcast float %76 to i32, !dbg !16
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !16
  %95 = bitcast i32 %94 to float, !dbg !16
  %96 = fsub float %89, %81, !dbg !28
  %97 = fadd float %76, %95, !dbg !30
  %98 = fcmp oeq float %97, 0.000000e+00, !dbg !31
  %99 = tail call float @llvm.nvvm.div.full(float %95, float %97), !dbg !32
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !33
  %101 = fmul float %96, %100, !dbg !34
  %102 = fadd float %81, %101, !dbg !35
  %103 = fadd float %86, %92, !dbg !36
  %104 = fmul float %96, %96, !dbg !37
  %105 = fmul float %76, %104, !dbg !38
  %106 = fmul float %100, %105, !dbg !39
  %107 = fadd float %103, %106, !dbg !40
  %108 = bitcast float %102 to i32, !dbg !16
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !16
  %110 = bitcast i32 %109 to float, !dbg !16
  %111 = bitcast float %107 to i32, !dbg !16
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !16
  %113 = bitcast i32 %112 to float, !dbg !16
  %114 = bitcast float %97 to i32, !dbg !16
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !16
  %116 = bitcast i32 %115 to float, !dbg !16
  %117 = fsub float %110, %102, !dbg !28
  %118 = fadd float %97, %116, !dbg !30
  %119 = fcmp oeq float %118, 0.000000e+00, !dbg !31
  %120 = tail call float @llvm.nvvm.div.full(float %116, float %118), !dbg !32
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !33
  %122 = fmul float %117, %121, !dbg !34
  %123 = fadd float %102, %122, !dbg !35
  %124 = fadd float %107, %113, !dbg !36
  %125 = fmul float %117, %117, !dbg !37
  %126 = fmul float %97, %125, !dbg !38
  %127 = fmul float %121, %126, !dbg !39
  %128 = fadd float %124, %127, !dbg !40
  %129 = bitcast float %123 to i32, !dbg !16
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !16
  %131 = bitcast i32 %130 to float, !dbg !16
  %132 = bitcast float %128 to i32, !dbg !16
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !16
  %134 = bitcast i32 %133 to float, !dbg !16
  %135 = bitcast float %118 to i32, !dbg !16
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !16
  %137 = bitcast i32 %136 to float, !dbg !16
  %138 = fsub float %131, %123, !dbg !28
  %139 = fadd float %118, %137, !dbg !30
  %140 = fcmp oeq float %139, 0.000000e+00, !dbg !31
  %141 = tail call float @llvm.nvvm.div.full(float %137, float %139), !dbg !32
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !33
  %143 = fmul float %138, %142, !dbg !34
  %144 = fadd float %123, %143, !dbg !35
  %145 = fadd float %128, %134, !dbg !36
  %146 = fmul float %138, %138, !dbg !37
  %147 = fmul float %118, %146, !dbg !38
  %148 = fmul float %142, %147, !dbg !39
  %149 = fadd float %145, %148, !dbg !40
  %150 = bitcast float %144 to i32, !dbg !16
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !16
  %152 = bitcast i32 %151 to float, !dbg !16
  %153 = bitcast float %149 to i32, !dbg !16
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !16
  %155 = bitcast i32 %154 to float, !dbg !16
  %156 = bitcast float %139 to i32, !dbg !16
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !16
  %158 = bitcast i32 %157 to float, !dbg !16
  %159 = fsub float %152, %144, !dbg !28
  %160 = fadd float %139, %158, !dbg !30
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !31
  %162 = tail call float @llvm.nvvm.div.full(float %158, float %160), !dbg !32
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !33
  %164 = fmul float %159, %163, !dbg !34
  %165 = fadd float %144, %164, !dbg !35
  %166 = fadd float %149, %155, !dbg !36
  %167 = fmul float %159, %159, !dbg !37
  %168 = fmul float %139, %167, !dbg !38
  %169 = fmul float %163, %168, !dbg !39
  %170 = fadd float %166, %169, !dbg !40
  %171 = and i32 %24, 31, !dbg !16
  %172 = icmp eq i32 %23, 0, !dbg !16
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !16
  %174 = bitcast float %165 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 %172) #5, !dbg !16
  %175 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %171, !dbg !16
  %176 = bitcast float %170 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 %172) #5, !dbg !16
  %177 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %171, !dbg !16
  %178 = bitcast float %160 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 %172) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %179 = icmp slt i32 %22, 32, !dbg !16
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %22, !dbg !16
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #5, !dbg !16
  %182 = bitcast i32 %181 to float, !dbg !16
  %183 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %22, !dbg !16
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %179) #5, !dbg !16
  %185 = bitcast i32 %184 to float, !dbg !16
  %186 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %22, !dbg !16
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %179) #5, !dbg !16
  %188 = bitcast i32 %187 to float, !dbg !16
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !16
  %190 = bitcast i32 %189 to float, !dbg !16
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !16
  %192 = bitcast i32 %191 to float, !dbg !16
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 16, i32 31), !dbg !16
  %194 = bitcast i32 %193 to float, !dbg !16
  %195 = fsub float %190, %182, !dbg !28
  %196 = fadd float %188, %194, !dbg !30
  %197 = fcmp oeq float %196, 0.000000e+00, !dbg !31
  %198 = tail call float @llvm.nvvm.div.full(float %194, float %196), !dbg !32
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !33
  %200 = fmul float %195, %199, !dbg !34
  %201 = fadd float %200, %182, !dbg !35
  %202 = fadd float %185, %192, !dbg !36
  %203 = fmul float %195, %195, !dbg !37
  %204 = fmul float %203, %188, !dbg !38
  %205 = fmul float %204, %199, !dbg !39
  %206 = fadd float %202, %205, !dbg !40
  %207 = bitcast float %201 to i32, !dbg !16
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !16
  %209 = bitcast i32 %208 to float, !dbg !16
  %210 = bitcast float %206 to i32, !dbg !16
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !16
  %212 = bitcast i32 %211 to float, !dbg !16
  %213 = bitcast float %196 to i32, !dbg !16
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !16
  %215 = bitcast i32 %214 to float, !dbg !16
  %216 = fsub float %209, %201, !dbg !28
  %217 = fadd float %196, %215, !dbg !30
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !31
  %219 = tail call float @llvm.nvvm.div.full(float %215, float %217), !dbg !32
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !33
  %221 = fmul float %216, %220, !dbg !34
  %222 = fadd float %201, %221, !dbg !35
  %223 = fadd float %206, %212, !dbg !36
  %224 = fmul float %216, %216, !dbg !37
  %225 = fmul float %196, %224, !dbg !38
  %226 = fmul float %220, %225, !dbg !39
  %227 = fadd float %223, %226, !dbg !40
  %228 = bitcast float %222 to i32, !dbg !16
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !16
  %230 = bitcast i32 %229 to float, !dbg !16
  %231 = bitcast float %227 to i32, !dbg !16
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !16
  %233 = bitcast i32 %232 to float, !dbg !16
  %234 = bitcast float %217 to i32, !dbg !16
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !16
  %236 = bitcast i32 %235 to float, !dbg !16
  %237 = fsub float %230, %222, !dbg !28
  %238 = fadd float %217, %236, !dbg !30
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !31
  %240 = tail call float @llvm.nvvm.div.full(float %236, float %238), !dbg !32
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !33
  %242 = fmul float %237, %241, !dbg !34
  %243 = fadd float %222, %242, !dbg !35
  %244 = fadd float %227, %233, !dbg !36
  %245 = fmul float %237, %237, !dbg !37
  %246 = fmul float %217, %245, !dbg !38
  %247 = fmul float %241, %246, !dbg !39
  %248 = fadd float %244, %247, !dbg !40
  %249 = bitcast float %243 to i32, !dbg !16
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !16
  %251 = bitcast i32 %250 to float, !dbg !16
  %252 = bitcast float %248 to i32, !dbg !16
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !16
  %254 = bitcast i32 %253 to float, !dbg !16
  %255 = bitcast float %238 to i32, !dbg !16
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !16
  %257 = bitcast i32 %256 to float, !dbg !16
  %258 = fsub float %251, %243, !dbg !28
  %259 = fadd float %238, %257, !dbg !30
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !31
  %261 = tail call float @llvm.nvvm.div.full(float %257, float %259), !dbg !32
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !33
  %263 = fmul float %258, %262, !dbg !34
  %264 = fadd float %243, %263, !dbg !35
  %265 = fadd float %248, %254, !dbg !36
  %266 = fmul float %258, %258, !dbg !37
  %267 = fmul float %238, %266, !dbg !38
  %268 = fmul float %262, %267, !dbg !39
  %269 = fadd float %265, %268, !dbg !40
  %270 = bitcast float %264 to i32, !dbg !16
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !16
  %272 = bitcast i32 %271 to float, !dbg !16
  %273 = bitcast float %269 to i32, !dbg !16
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !16
  %275 = bitcast i32 %274 to float, !dbg !16
  %276 = bitcast float %259 to i32, !dbg !16
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !16
  %278 = bitcast i32 %277 to float, !dbg !16
  %279 = fsub float %272, %264, !dbg !28
  %280 = fadd float %259, %278, !dbg !30
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !31
  %282 = tail call float @llvm.nvvm.div.full(float %278, float %280), !dbg !32
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !33
  %284 = fmul float %279, %283, !dbg !34
  %285 = fadd float %264, %284, !dbg !35
  %286 = fadd float %269, %275, !dbg !36
  %287 = fmul float %279, %279, !dbg !37
  %288 = fmul float %259, %287, !dbg !38
  %289 = fmul float %283, %288, !dbg !39
  %290 = fadd float %286, %289, !dbg !40
  %291 = and i1 %179, %172, !dbg !16
  %292 = bitcast float %285 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %292, i1 %291) #5, !dbg !16
  %293 = bitcast float %290 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %293, i1 %291) #5, !dbg !16
  %294 = bitcast float %280 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %294, i1 %291) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %295 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !16
  %296 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !16
  %297 = tail call float @llvm.nvvm.div.full(float %296, float 3.072000e+03), !dbg !41
  %298 = fadd float %297, 0x3EB0C6F7A0000000, !dbg !42
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %299, 0, !dbg !43
  br i1 %.not.i, label %302, label %300, !dbg !43

300:                                              ; preds = %.split10.us
  %301 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %298), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

302:                                              ; preds = %.split10.us
  %303 = tail call float @llvm.nvvm.rsqrt.approx.f(float %298), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %300, %302
  %.0.i = phi float [ %301, %300 ], [ %303, %302 ], !dbg !43
  %304 = zext nneg i32 %25 to i64, !dbg !44
  %305 = or disjoint i32 %25, %26, !dbg !45
  %306 = sext i32 %305 to i64, !dbg !46
  %307 = getelementptr bfloat, ptr addrspace(1) %0, i64 %306, !dbg !46
  %308 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %307, i1 %21) #5, !dbg !47
  %309 = bitcast i16 %308 to bfloat, !dbg !47
  %310 = fpext bfloat %309 to float, !dbg !48
  %311 = or disjoint i64 %304, 3072, !dbg !49
  %312 = getelementptr float, ptr addrspace(1) %1, i64 %311, !dbg !50
  %313 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %312, i1 true) #5, !dbg !51
  %314 = bitcast i32 %313 to float, !dbg !51
  %315 = getelementptr bfloat, ptr addrspace(1) %2, i64 %311, !dbg !52
  %316 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %315, i1 true) #5, !dbg !53
  %317 = bitcast i16 %316 to bfloat, !dbg !53
  %318 = fpext bfloat %317 to float, !dbg !54
  %319 = getelementptr float, ptr addrspace(1) %1, i64 %304, !dbg !55
  %320 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %319, i1 true) #5, !dbg !56
  %321 = bitcast i32 %320 to float, !dbg !56
  %322 = getelementptr bfloat, ptr addrspace(1) %2, i64 %304, !dbg !57
  %323 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %322, i1 true) #5, !dbg !58
  %324 = bitcast i16 %323 to bfloat, !dbg !58
  %325 = fpext bfloat %324 to float, !dbg !59
  %326 = fsub float %310, %295, !dbg !60
  %327 = fmul float %.0.i, %326, !dbg !61
  %328 = fadd float %314, %318, !dbg !62
  %329 = fadd float %328, 1.000000e+00, !dbg !63
  %330 = fmul float %327, %329, !dbg !64
  %331 = fadd float %321, %325, !dbg !65
  %332 = fadd float %330, %331, !dbg !66
  %333 = select i1 %21, float %332, float 0x7FF0000000000000, !dbg !67
  %334 = select i1 %21, float %332, float 0xFFF0000000000000, !dbg !68
  %335 = getelementptr bfloat, ptr addrspace(1) %3, i64 %306, !dbg !69
  %336 = fptrunc float %332 to bfloat, !dbg !70
  %337 = bitcast bfloat %336 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %337, ptr addrspace(1) %335, i1 %21) #5, !dbg !70
  %338 = or disjoint i64 %304, 1024, !dbg !71
  %339 = trunc nuw nsw i64 %338 to i32, !dbg !45
  %340 = add i32 %26, %339, !dbg !45
  %341 = sext i32 %340 to i64, !dbg !46
  %342 = getelementptr bfloat, ptr addrspace(1) %0, i64 %341, !dbg !46
  %343 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %342, i1 %21) #5, !dbg !47
  %344 = bitcast i16 %343 to bfloat, !dbg !47
  %345 = fpext bfloat %344 to float, !dbg !48
  %346 = or disjoint i64 %304, 4096, !dbg !49
  %347 = getelementptr float, ptr addrspace(1) %1, i64 %346, !dbg !50
  %348 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %347, i1 true) #5, !dbg !51
  %349 = bitcast i32 %348 to float, !dbg !51
  %350 = getelementptr bfloat, ptr addrspace(1) %2, i64 %346, !dbg !52
  %351 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %350, i1 true) #5, !dbg !53
  %352 = bitcast i16 %351 to bfloat, !dbg !53
  %353 = fpext bfloat %352 to float, !dbg !54
  %354 = getelementptr float, ptr addrspace(1) %1, i64 %338, !dbg !55
  %355 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %354, i1 true) #5, !dbg !56
  %356 = bitcast i32 %355 to float, !dbg !56
  %357 = getelementptr bfloat, ptr addrspace(1) %2, i64 %338, !dbg !57
  %358 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %357, i1 true) #5, !dbg !58
  %359 = bitcast i16 %358 to bfloat, !dbg !58
  %360 = fpext bfloat %359 to float, !dbg !59
  %361 = fsub float %345, %295, !dbg !60
  %362 = fmul float %.0.i, %361, !dbg !61
  %363 = fadd float %349, %353, !dbg !62
  %364 = fadd float %363, 1.000000e+00, !dbg !63
  %365 = fmul float %362, %364, !dbg !64
  %366 = fadd float %356, %360, !dbg !65
  %367 = fadd float %365, %366, !dbg !66
  %368 = fcmp olt float %333, %367, !dbg !72
  %369 = fcmp uno float %333, 0.000000e+00, !dbg !74
  %370 = or i1 %369, %368, !dbg !75
  %371 = select i1 %370, float %333, float %367, !dbg !76
  %372 = select i1 %21, float %371, float 0x7FF0000000000000, !dbg !67
  %373 = fcmp ogt float %334, %367, !dbg !77
  %374 = fcmp uno float %334, 0.000000e+00, !dbg !79
  %375 = or i1 %374, %373, !dbg !80
  %376 = select i1 %375, float %334, float %367, !dbg !81
  %377 = select i1 %21, float %376, float 0xFFF0000000000000, !dbg !68
  %378 = getelementptr bfloat, ptr addrspace(1) %3, i64 %341, !dbg !69
  %379 = fptrunc float %367 to bfloat, !dbg !70
  %380 = bitcast bfloat %379 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %380, ptr addrspace(1) %378, i1 %21) #5, !dbg !70
  %381 = or disjoint i64 %304, 2048, !dbg !71
  %382 = trunc nuw nsw i64 %381 to i32, !dbg !45
  %383 = add i32 %26, %382, !dbg !45
  %384 = sext i32 %383 to i64, !dbg !46
  %385 = getelementptr bfloat, ptr addrspace(1) %0, i64 %384, !dbg !46
  %386 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %385, i1 %21) #5, !dbg !47
  %387 = bitcast i16 %386 to bfloat, !dbg !47
  %388 = fpext bfloat %387 to float, !dbg !48
  %389 = or disjoint i64 %304, 5120, !dbg !49
  %390 = getelementptr float, ptr addrspace(1) %1, i64 %389, !dbg !50
  %391 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %390, i1 true) #5, !dbg !51
  %392 = bitcast i32 %391 to float, !dbg !51
  %393 = getelementptr bfloat, ptr addrspace(1) %2, i64 %389, !dbg !52
  %394 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %393, i1 true) #5, !dbg !53
  %395 = bitcast i16 %394 to bfloat, !dbg !53
  %396 = fpext bfloat %395 to float, !dbg !54
  %397 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !55
  %398 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %397, i1 true) #5, !dbg !56
  %399 = bitcast i32 %398 to float, !dbg !56
  %400 = getelementptr bfloat, ptr addrspace(1) %2, i64 %381, !dbg !57
  %401 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %400, i1 true) #5, !dbg !58
  %402 = bitcast i16 %401 to bfloat, !dbg !58
  %403 = fpext bfloat %402 to float, !dbg !59
  %404 = fsub float %388, %295, !dbg !60
  %405 = fmul float %.0.i, %404, !dbg !61
  %406 = fadd float %392, %396, !dbg !62
  %407 = fadd float %406, 1.000000e+00, !dbg !63
  %408 = fmul float %405, %407, !dbg !64
  %409 = fadd float %399, %403, !dbg !65
  %410 = fadd float %408, %409, !dbg !66
  %411 = fcmp olt float %372, %410, !dbg !72
  %412 = fcmp uno float %372, 0.000000e+00, !dbg !74
  %413 = or i1 %412, %411, !dbg !75
  %414 = select i1 %413, float %372, float %410, !dbg !76
  %415 = select i1 %21, float %414, float 0x7FF0000000000000, !dbg !67
  %416 = fcmp ogt float %377, %410, !dbg !77
  %417 = fcmp uno float %377, 0.000000e+00, !dbg !79
  %418 = or i1 %417, %416, !dbg !80
  %419 = select i1 %418, float %377, float %410, !dbg !81
  %420 = select i1 %21, float %419, float 0xFFF0000000000000, !dbg !68
  %421 = getelementptr bfloat, ptr addrspace(1) %3, i64 %384, !dbg !69
  %422 = fptrunc float %410 to bfloat, !dbg !70
  %423 = bitcast bfloat %422 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %423, ptr addrspace(1) %421, i1 %21) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %424 = bitcast float %415 to i32, !dbg !82
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 16, i32 31), !dbg !82
  %426 = bitcast i32 %425 to float, !dbg !82
  %427 = fcmp olt float %415, %426, !dbg !84
  %428 = fcmp uno float %415, 0.000000e+00, !dbg !85
  %429 = or i1 %428, %427, !dbg !86
  %430 = select i1 %429, float %415, float %426, !dbg !87
  %431 = bitcast float %430 to i32, !dbg !82
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 8, i32 31), !dbg !82
  %433 = bitcast i32 %432 to float, !dbg !82
  %434 = fcmp olt float %430, %433, !dbg !84
  %435 = fcmp uno float %430, 0.000000e+00, !dbg !85
  %436 = or i1 %434, %435, !dbg !86
  %437 = select i1 %436, float %430, float %433, !dbg !87
  %438 = bitcast float %437 to i32, !dbg !82
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 4, i32 31), !dbg !82
  %440 = bitcast i32 %439 to float, !dbg !82
  %441 = fcmp olt float %437, %440, !dbg !84
  %442 = fcmp uno float %437, 0.000000e+00, !dbg !85
  %443 = or i1 %441, %442, !dbg !86
  %444 = select i1 %443, float %437, float %440, !dbg !87
  %445 = bitcast float %444 to i32, !dbg !82
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !82
  %447 = bitcast i32 %446 to float, !dbg !82
  %448 = fcmp olt float %444, %447, !dbg !84
  %449 = fcmp uno float %444, 0.000000e+00, !dbg !85
  %450 = or i1 %448, %449, !dbg !86
  %451 = select i1 %450, float %444, float %447, !dbg !87
  %452 = bitcast float %451 to i32, !dbg !82
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 1, i32 31), !dbg !82
  %454 = bitcast i32 %453 to float, !dbg !82
  %455 = fcmp olt float %451, %454, !dbg !84
  %456 = fcmp uno float %451, 0.000000e+00, !dbg !85
  %457 = or i1 %455, %456, !dbg !86
  %458 = select i1 %457, i32 %452, i32 %453, !dbg !87
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %459, i1 %172) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %460 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #5, !dbg !82
  %461 = bitcast i32 %460 to float, !dbg !82
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 16, i32 31), !dbg !82
  %463 = bitcast i32 %462 to float, !dbg !82
  %464 = fcmp olt float %461, %463, !dbg !84
  %465 = fcmp uno float %461, 0.000000e+00, !dbg !85
  %466 = or i1 %465, %464, !dbg !86
  %467 = select i1 %466, float %461, float %463, !dbg !87
  %468 = bitcast float %467 to i32, !dbg !82
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 8, i32 31), !dbg !82
  %470 = bitcast i32 %469 to float, !dbg !82
  %471 = fcmp olt float %467, %470, !dbg !84
  %472 = fcmp uno float %467, 0.000000e+00, !dbg !85
  %473 = or i1 %471, %472, !dbg !86
  %474 = select i1 %473, float %467, float %470, !dbg !87
  %475 = bitcast float %474 to i32, !dbg !82
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 4, i32 31), !dbg !82
  %477 = bitcast i32 %476 to float, !dbg !82
  %478 = fcmp olt float %474, %477, !dbg !84
  %479 = fcmp uno float %474, 0.000000e+00, !dbg !85
  %480 = or i1 %478, %479, !dbg !86
  %481 = select i1 %480, float %474, float %477, !dbg !87
  %482 = bitcast float %481 to i32, !dbg !82
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 2, i32 31), !dbg !82
  %484 = bitcast i32 %483 to float, !dbg !82
  %485 = fcmp olt float %481, %484, !dbg !84
  %486 = fcmp uno float %481, 0.000000e+00, !dbg !85
  %487 = or i1 %485, %486, !dbg !86
  %488 = select i1 %487, float %481, float %484, !dbg !87
  %489 = bitcast float %488 to i32, !dbg !82
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 1, i32 31), !dbg !82
  %491 = bitcast i32 %490 to float, !dbg !82
  %492 = fcmp olt float %488, %491, !dbg !84
  %493 = fcmp uno float %488, 0.000000e+00, !dbg !85
  %494 = or i1 %492, %493, !dbg !86
  %495 = select i1 %494, i32 %489, i32 %490, !dbg !87
  %496 = insertelement <1 x i32> poison, i32 %495, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %496, i1 %291) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %497 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %498 = bitcast float %420 to i32, !dbg !88
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 16, i32 31), !dbg !88
  %500 = bitcast i32 %499 to float, !dbg !88
  %501 = fcmp ogt float %420, %500, !dbg !90
  %502 = fcmp uno float %420, 0.000000e+00, !dbg !91
  %503 = or i1 %502, %501, !dbg !92
  %504 = select i1 %503, float %420, float %500, !dbg !93
  %505 = bitcast float %504 to i32, !dbg !88
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 8, i32 31), !dbg !88
  %507 = bitcast i32 %506 to float, !dbg !88
  %508 = fcmp ogt float %504, %507, !dbg !90
  %509 = fcmp uno float %504, 0.000000e+00, !dbg !91
  %510 = or i1 %508, %509, !dbg !92
  %511 = select i1 %510, float %504, float %507, !dbg !93
  %512 = bitcast float %511 to i32, !dbg !88
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 4, i32 31), !dbg !88
  %514 = bitcast i32 %513 to float, !dbg !88
  %515 = fcmp ogt float %511, %514, !dbg !90
  %516 = fcmp uno float %511, 0.000000e+00, !dbg !91
  %517 = or i1 %515, %516, !dbg !92
  %518 = select i1 %517, float %511, float %514, !dbg !93
  %519 = bitcast float %518 to i32, !dbg !88
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 2, i32 31), !dbg !88
  %521 = bitcast i32 %520 to float, !dbg !88
  %522 = fcmp ogt float %518, %521, !dbg !90
  %523 = fcmp uno float %518, 0.000000e+00, !dbg !91
  %524 = or i1 %522, %523, !dbg !92
  %525 = select i1 %524, float %518, float %521, !dbg !93
  %526 = bitcast float %525 to i32, !dbg !88
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 1, i32 31), !dbg !88
  %528 = bitcast i32 %527 to float, !dbg !88
  %529 = fcmp ogt float %525, %528, !dbg !90
  %530 = fcmp uno float %525, 0.000000e+00, !dbg !91
  %531 = or i1 %529, %530, !dbg !92
  %532 = select i1 %531, i32 %526, i32 %527, !dbg !93
  %533 = insertelement <1 x i32> poison, i32 %532, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %533, i1 %172) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %534 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #5, !dbg !88
  %535 = bitcast i32 %534 to float, !dbg !88
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 16, i32 31), !dbg !88
  %537 = bitcast i32 %536 to float, !dbg !88
  %538 = fcmp ogt float %535, %537, !dbg !90
  %539 = fcmp uno float %535, 0.000000e+00, !dbg !91
  %540 = or i1 %539, %538, !dbg !92
  %541 = select i1 %540, float %535, float %537, !dbg !93
  %542 = bitcast float %541 to i32, !dbg !88
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 8, i32 31), !dbg !88
  %544 = bitcast i32 %543 to float, !dbg !88
  %545 = fcmp ogt float %541, %544, !dbg !90
  %546 = fcmp uno float %541, 0.000000e+00, !dbg !91
  %547 = or i1 %545, %546, !dbg !92
  %548 = select i1 %547, float %541, float %544, !dbg !93
  %549 = bitcast float %548 to i32, !dbg !88
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 4, i32 31), !dbg !88
  %551 = bitcast i32 %550 to float, !dbg !88
  %552 = fcmp ogt float %548, %551, !dbg !90
  %553 = fcmp uno float %548, 0.000000e+00, !dbg !91
  %554 = or i1 %552, %553, !dbg !92
  %555 = select i1 %554, float %548, float %551, !dbg !93
  %556 = bitcast float %555 to i32, !dbg !88
  %557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %556, i32 2, i32 31), !dbg !88
  %558 = bitcast i32 %557 to float, !dbg !88
  %559 = fcmp ogt float %555, %558, !dbg !90
  %560 = fcmp uno float %555, 0.000000e+00, !dbg !91
  %561 = or i1 %559, %560, !dbg !92
  %562 = select i1 %561, float %555, float %558, !dbg !93
  %563 = bitcast float %562 to i32, !dbg !88
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 1, i32 31), !dbg !88
  %565 = bitcast i32 %564 to float, !dbg !88
  %566 = fcmp ogt float %562, %565, !dbg !90
  %567 = fcmp uno float %562, 0.000000e+00, !dbg !91
  %568 = or i1 %566, %567, !dbg !92
  %569 = select i1 %568, i32 %563, i32 %564, !dbg !93
  %570 = insertelement <1 x i32> poison, i32 %569, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %570, i1 %291) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %571 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %572 = sext i32 %20 to i64, !dbg !94
  %573 = getelementptr bfloat, ptr addrspace(1) %4, i64 %572, !dbg !94
  %574 = fptrunc float %497 to bfloat, !dbg !95
  %575 = icmp eq i32 %25, 0, !dbg !95
  %576 = bitcast bfloat %574 to i16, !dbg !95
  %577 = and i1 %21, %575, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %576, ptr addrspace(1) %573, i1 %577) #5, !dbg !95
  %578 = getelementptr bfloat, ptr addrspace(1) %5, i64 %572, !dbg !96
  %579 = fptrunc float %571 to bfloat, !dbg !97
  %580 = bitcast bfloat %579 to i16, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %580, ptr addrspace(1) %578, i1 %577) #5, !dbg !97
  %581 = getelementptr bfloat, ptr addrspace(1) %6, i64 %572, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %576, ptr addrspace(1) %581, i1 %577) #5, !dbg !99
  %582 = getelementptr bfloat, ptr addrspace(1) %7, i64 %572, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %580, ptr addrspace(1) %582, i1 %577) #5, !dbg !101
  %583 = getelementptr bfloat, ptr addrspace(1) %8, i64 %572, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %576, ptr addrspace(1) %583, i1 %577) #5, !dbg !103
  %584 = getelementptr bfloat, ptr addrspace(1) %9, i64 %572, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %580, ptr addrspace(1) %584, i1 %577) #5, !dbg !105
  %585 = getelementptr bfloat, ptr addrspace(1) %10, i64 %572, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %576, ptr addrspace(1) %585, i1 %577) #5, !dbg !107
  %586 = getelementptr bfloat, ptr addrspace(1) %11, i64 %572, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %580, ptr addrspace(1) %586, i1 %577) #5, !dbg !109
  %.inv = fcmp oge float %497, 0.000000e+00, !dbg !110
  %587 = select i1 %.inv, float 0.000000e+00, float %497, !dbg !110
  %588 = fsub float 0.000000e+00, %587, !dbg !112
  %.inv3 = fcmp ole float %571, 0.000000e+00, !dbg !113
  %589 = select i1 %.inv3, float 0.000000e+00, float %571, !dbg !113
  %590 = fcmp ogt float %588, %589, !dbg !115
  %591 = fcmp uno float %588, 0.000000e+00, !dbg !117
  %592 = or i1 %591, %590, !dbg !118
  %593 = select i1 %592, float %588, float %589, !dbg !119
  %594 = fmul float %593, 0x3F80204080000000, !dbg !120
  %595 = fcmp ogt float %594, 0x3EE4F8B580000000, !dbg !121
  %596 = fcmp uno float %594, 0.000000e+00, !dbg !123
  %597 = or i1 %595, %596, !dbg !124
  %598 = select i1 %597, float %594, float 0x3EE4F8B580000000, !dbg !125
  %599 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %598), !dbg !126
  %600 = sext i32 %27 to i64, !dbg !127
  %601 = getelementptr bfloat, ptr addrspace(1) %3, i64 %600, !dbg !127
  %602 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %601, i1 %21) #5, !dbg !128
  %603 = bitcast i16 %602 to bfloat, !dbg !128
  %604 = fpext bfloat %603 to float, !dbg !129
  %605 = fmul float %599, %604, !dbg !130
  %606 = tail call float @llvm.nvvm.round.f(float %605) #5, !dbg !131
  %607 = fcmp ogt float %606, -1.270000e+02, !dbg !132
  %608 = fcmp uno float %606, 0.000000e+00, !dbg !134
  %609 = or i1 %607, %608, !dbg !135
  %610 = select i1 %609, float %606, float -1.270000e+02, !dbg !136
  %611 = fcmp olt float %610, 1.270000e+02, !dbg !137
  %612 = fcmp uno float %610, 0.000000e+00, !dbg !139
  %613 = or i1 %611, %612, !dbg !140
  %614 = fptosi float %610 to i8, !dbg !141
  %615 = select i1 %613, i8 %614, i8 127, !dbg !142
  %616 = getelementptr i8, ptr addrspace(1) %12, i64 %600, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %615, ptr addrspace(1) %616, i1 %21) #5, !dbg !144
  %617 = getelementptr i8, ptr addrspace(1) %13, i64 %600, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %615, ptr addrspace(1) %617, i1 %21) #5, !dbg !146
  %618 = getelementptr i8, ptr addrspace(1) %14, i64 %600, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %615, ptr addrspace(1) %618, i1 %21) #5, !dbg !148
  %619 = getelementptr i8, ptr addrspace(1) %15, i64 %600, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %615, ptr addrspace(1) %619, i1 %21) #5, !dbg !150
  %620 = add i32 %27, 1024, !dbg !151
  %621 = sext i32 %620 to i64, !dbg !127
  %622 = getelementptr bfloat, ptr addrspace(1) %3, i64 %621, !dbg !127
  %623 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %622, i1 %21) #5, !dbg !128
  %624 = bitcast i16 %623 to bfloat, !dbg !128
  %625 = fpext bfloat %624 to float, !dbg !129
  %626 = fmul float %599, %625, !dbg !130
  %627 = tail call float @llvm.nvvm.round.f(float %626) #5, !dbg !131
  %628 = fcmp ogt float %627, -1.270000e+02, !dbg !132
  %629 = fcmp uno float %627, 0.000000e+00, !dbg !134
  %630 = or i1 %628, %629, !dbg !135
  %631 = select i1 %630, float %627, float -1.270000e+02, !dbg !136
  %632 = fcmp olt float %631, 1.270000e+02, !dbg !137
  %633 = fcmp uno float %631, 0.000000e+00, !dbg !139
  %634 = or i1 %632, %633, !dbg !140
  %635 = fptosi float %631 to i8, !dbg !141
  %636 = select i1 %634, i8 %635, i8 127, !dbg !142
  %637 = getelementptr i8, ptr addrspace(1) %12, i64 %621, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %636, ptr addrspace(1) %637, i1 %21) #5, !dbg !144
  %638 = getelementptr i8, ptr addrspace(1) %13, i64 %621, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %636, ptr addrspace(1) %638, i1 %21) #5, !dbg !146
  %639 = getelementptr i8, ptr addrspace(1) %14, i64 %621, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %636, ptr addrspace(1) %639, i1 %21) #5, !dbg !148
  %640 = getelementptr i8, ptr addrspace(1) %15, i64 %621, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %636, ptr addrspace(1) %640, i1 %21) #5, !dbg !150
  %641 = add i32 %27, 2048, !dbg !151
  %642 = sext i32 %641 to i64, !dbg !127
  %643 = getelementptr bfloat, ptr addrspace(1) %3, i64 %642, !dbg !127
  %644 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %643, i1 %21) #5, !dbg !128
  %645 = bitcast i16 %644 to bfloat, !dbg !128
  %646 = fpext bfloat %645 to float, !dbg !129
  %647 = fmul float %599, %646, !dbg !130
  %648 = tail call float @llvm.nvvm.round.f(float %647) #5, !dbg !131
  %649 = fcmp ogt float %648, -1.270000e+02, !dbg !132
  %650 = fcmp uno float %648, 0.000000e+00, !dbg !134
  %651 = or i1 %649, %650, !dbg !135
  %652 = select i1 %651, float %648, float -1.270000e+02, !dbg !136
  %653 = fcmp olt float %652, 1.270000e+02, !dbg !137
  %654 = fcmp uno float %652, 0.000000e+00, !dbg !139
  %655 = or i1 %653, %654, !dbg !140
  %656 = fptosi float %652 to i8, !dbg !141
  %657 = select i1 %655, i8 %656, i8 127, !dbg !142
  %658 = getelementptr i8, ptr addrspace(1) %12, i64 %642, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %657, ptr addrspace(1) %658, i1 %21) #5, !dbg !144
  %659 = getelementptr i8, ptr addrspace(1) %13, i64 %642, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %657, ptr addrspace(1) %659, i1 %21) #5, !dbg !146
  %660 = getelementptr i8, ptr addrspace(1) %14, i64 %642, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %657, ptr addrspace(1) %660, i1 %21) #5, !dbg !148
  %661 = getelementptr i8, ptr addrspace(1) %15, i64 %642, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %657, ptr addrspace(1) %661, i1 %21) #5, !dbg !150
  ret void, !dbg !152
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 41, scope: !6)
!16 = !DILocation(line: 229, column: 46, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !6, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 47, column: 79, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !17, inlinedAt: !22)
!22 = !DILocation(line: 42, column: 51, scope: !6)
!23 = !DILocation(line: 210, column: 34, scope: !17, inlinedAt: !22)
!24 = !DILocation(line: 210, column: 26, scope: !17, inlinedAt: !22)
!25 = !DILocation(line: 211, column: 39, scope: !17, inlinedAt: !22)
!26 = !DILocation(line: 211, column: 31, scope: !17, inlinedAt: !22)
!27 = !DILocation(line: 211, column: 22, scope: !17, inlinedAt: !22)
!28 = !DILocation(line: 217, column: 21, scope: !29, inlinedAt: !19)
!29 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!30 = !DILocation(line: 218, column: 28, scope: !29, inlinedAt: !19)
!31 = !DILocation(line: 219, column: 39, scope: !29, inlinedAt: !19)
!32 = !DILocation(line: 219, column: 60, scope: !29, inlinedAt: !19)
!33 = !DILocation(line: 219, column: 49, scope: !29, inlinedAt: !19)
!34 = !DILocation(line: 221, column: 25, scope: !29, inlinedAt: !19)
!35 = !DILocation(line: 221, column: 17, scope: !29, inlinedAt: !19)
!36 = !DILocation(line: 222, column: 15, scope: !29, inlinedAt: !19)
!37 = !DILocation(line: 222, column: 30, scope: !29, inlinedAt: !19)
!38 = !DILocation(line: 222, column: 38, scope: !29, inlinedAt: !19)
!39 = !DILocation(line: 222, column: 49, scope: !29, inlinedAt: !19)
!40 = !DILocation(line: 222, column: 22, scope: !29, inlinedAt: !19)
!41 = !DILocation(line: 67, column: 24, scope: !6)
!42 = !DILocation(line: 69, column: 24, scope: !6)
!43 = !DILocation(line: 70, column: 32, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 59, column: 41, scope: !6)
!46 = !DILocation(line: 59, column: 34, scope: !6)
!47 = !DILocation(line: 59, column: 51, scope: !6)
!48 = !DILocation(line: 59, column: 113, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 60, column: 35, scope: !6)
!51 = !DILocation(line: 60, column: 49, scope: !6)
!52 = !DILocation(line: 61, column: 35, scope: !6)
!53 = !DILocation(line: 61, column: 49, scope: !6)
!54 = !DILocation(line: 61, column: 102, scope: !6)
!55 = !DILocation(line: 62, column: 35, scope: !6)
!56 = !DILocation(line: 62, column: 42, scope: !6)
!57 = !DILocation(line: 63, column: 35, scope: !6)
!58 = !DILocation(line: 63, column: 42, scope: !6)
!59 = !DILocation(line: 63, column: 95, scope: !6)
!60 = !DILocation(line: 65, column: 24, scope: !6)
!61 = !DILocation(line: 71, column: 24, scope: !6)
!62 = !DILocation(line: 74, column: 24, scope: !6)
!63 = !DILocation(line: 76, column: 24, scope: !6)
!64 = !DILocation(line: 77, column: 24, scope: !6)
!65 = !DILocation(line: 79, column: 24, scope: !6)
!66 = !DILocation(line: 80, column: 24, scope: !6)
!67 = !DILocation(line: 83, column: 50, scope: !6)
!68 = !DILocation(line: 85, column: 50, scope: !6)
!69 = !DILocation(line: 86, column: 29, scope: !6)
!70 = !DILocation(line: 86, column: 53, scope: !6)
!71 = !DILocation(line: 54, column: 31, scope: !6)
!72 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !73)
!73 = !DILocation(line: 82, column: 47, scope: !6)
!74 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !73)
!75 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !73)
!76 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !73)
!77 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !78)
!80 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !78)
!81 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !78)
!82 = !DILocation(line: 110, column: 29, scope: !17, inlinedAt: !83)
!83 = !DILocation(line: 87, column: 40, scope: !6)
!84 = !DILocation(line: 94, column: 15, scope: !29, inlinedAt: !83)
!85 = !DILocation(line: 96, column: 21, scope: !29, inlinedAt: !83)
!86 = !DILocation(line: 96, column: 16, scope: !29, inlinedAt: !83)
!87 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !83)
!88 = !DILocation(line: 115, column: 29, scope: !17, inlinedAt: !89)
!89 = !DILocation(line: 88, column: 40, scope: !6)
!90 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !89)
!91 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !89)
!92 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !89)
!93 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !89)
!94 = !DILocation(line: 89, column: 25, scope: !6)
!95 = !DILocation(line: 89, column: 37, scope: !6)
!96 = !DILocation(line: 90, column: 25, scope: !6)
!97 = !DILocation(line: 90, column: 37, scope: !6)
!98 = !DILocation(line: 91, column: 25, scope: !6)
!99 = !DILocation(line: 91, column: 37, scope: !6)
!100 = !DILocation(line: 92, column: 25, scope: !6)
!101 = !DILocation(line: 92, column: 37, scope: !6)
!102 = !DILocation(line: 93, column: 25, scope: !6)
!103 = !DILocation(line: 93, column: 37, scope: !6)
!104 = !DILocation(line: 94, column: 25, scope: !6)
!105 = !DILocation(line: 94, column: 37, scope: !6)
!106 = !DILocation(line: 95, column: 25, scope: !6)
!107 = !DILocation(line: 95, column: 37, scope: !6)
!108 = !DILocation(line: 96, column: 26, scope: !6)
!109 = !DILocation(line: 96, column: 38, scope: !6)
!110 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !111)
!111 = !DILocation(line: 105, column: 46, scope: !6)
!112 = !DILocation(line: 106, column: 17, scope: !6)
!113 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !114)
!114 = !DILocation(line: 107, column: 46, scope: !6)
!115 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !116)
!116 = !DILocation(line: 108, column: 46, scope: !6)
!117 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !116)
!119 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !116)
!120 = !DILocation(line: 110, column: 24, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !122)
!122 = !DILocation(line: 113, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !122)
!126 = !DILocation(line: 116, column: 25, scope: !6)
!127 = !DILocation(line: 103, column: 36, scope: !6)
!128 = !DILocation(line: 103, column: 53, scope: !6)
!129 = !DILocation(line: 103, column: 115, scope: !6)
!130 = !DILocation(line: 119, column: 24, scope: !6)
!131 = !DILocation(line: 120, column: 36, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !133)
!133 = !DILocation(line: 123, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !133)
!137 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !138)
!138 = !DILocation(line: 125, column: 46, scope: !6)
!139 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !138)
!141 = !DILocation(line: 127, column: 25, scope: !6)
!142 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !138)
!143 = !DILocation(line: 128, column: 30, scope: !6)
!144 = !DILocation(line: 128, column: 54, scope: !6)
!145 = !DILocation(line: 129, column: 30, scope: !6)
!146 = !DILocation(line: 129, column: 54, scope: !6)
!147 = !DILocation(line: 130, column: 30, scope: !6)
!148 = !DILocation(line: 130, column: 54, scope: !6)
!149 = !DILocation(line: 131, column: 30, scope: !6)
!150 = !DILocation(line: 131, column: 54, scope: !6)
!151 = !DILocation(line: 103, column: 43, scope: !6)
!152 = !DILocation(line: 97, column: 4, scope: !6)
