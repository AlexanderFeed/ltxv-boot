; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = sdiv i32 %6, 384, !dbg !10
  %8 = shl nsw i32 %7, 3, !dbg !11
  %9 = sub nsw i32 3, %8, !dbg !12
  %10 = tail call i32 @llvm.smin.i32(i32 %9, i32 8), !dbg !13
  %11 = srem i32 %6, %10, !dbg !14
  %12 = add nsw i32 %11, %8, !dbg !15
  %13 = mul i32 %7, 384, !dbg !16
  %.decomposed = sub i32 %6, %13, !dbg !16
  %14 = sdiv i32 %.decomposed, %10, !dbg !17
  %15 = shl i32 %12, 5, !dbg !18
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %17 = and i32 %16, 16, !dbg !19
  %18 = lshr i32 %16, 3, !dbg !19
  %19 = and i32 %18, 15, !dbg !19
  %20 = and i32 %16, 128, !dbg !19
  %21 = lshr exact i32 %20, 3, !dbg !19
  %22 = or disjoint i32 %19, %21, !dbg !19
  %23 = or disjoint i32 %15, %22, !dbg !20
  %24 = shl nsw i32 %14, 6, !dbg !21
  %25 = lshr i32 %16, 2, !dbg !22
  %26 = and i32 %25, 63, !dbg !22
  %27 = shl i32 %16, 3, !dbg !22
  %28 = and i32 %27, 24, !dbg !22
  %29 = or disjoint i32 %24, %26, !dbg !23
  %30 = srem i32 %23, 77, !dbg !24
  %31 = srem i32 %29, 3072, !dbg !25
  %32 = shl i32 %16, 2, !dbg !26
  %33 = and i32 %32, 8, !dbg !26
  %34 = and i32 %32, 16, !dbg !26
  %35 = and i32 %32, 28, !dbg !26
  %36 = mul nsw i32 %30, 768, !dbg !27
  %37 = mul nsw i32 %31, 768, !dbg !28
  %38 = or disjoint i32 %36, %35, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !30
  %41 = lshr exact i32 %17, 1, !dbg !31
  %42 = lshr i32 %16, 1, !dbg !31
  %43 = and i32 %42, 24, !dbg !31
  %44 = xor i32 %43, %35, !dbg !31
  %45 = shl nuw nsw i32 %22, 5, !dbg !31
  %46 = or disjoint i32 %45, %44, !dbg !31
  %47 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %47, ptr addrspace(1) %40, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %48 = or disjoint i32 %37, %28, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !33
  %50 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49, !dbg !33
  %51 = xor i32 %27, %16, !dbg !34
  %52 = and i32 %51, 24, !dbg !34
  %53 = shl nuw nsw i32 %26, 5, !dbg !34
  %54 = or disjoint i32 %52, %53, !dbg !34
  %55 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %54, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %55, ptr addrspace(1) %50, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %56 = or disjoint i32 %38, 32, !dbg !29
  %57 = sext i32 %56 to i64, !dbg !30
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %59 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %59, ptr addrspace(1) %58, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %60 = or disjoint i32 %48, 32, !dbg !32
  %61 = sext i32 %60 to i64, !dbg !33
  %62 = getelementptr bfloat, ptr addrspace(1) %1, i64 %61, !dbg !33
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %54, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %63, ptr addrspace(1) %62, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %64 = or disjoint i32 %38, 64, !dbg !29
  %65 = sext i32 %64 to i64, !dbg !30
  %66 = getelementptr bfloat, ptr addrspace(1) %0, i64 %65, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %67, ptr addrspace(1) %66, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %68 = or disjoint i32 %48, 64, !dbg !32
  %69 = sext i32 %68 to i64, !dbg !33
  %70 = getelementptr bfloat, ptr addrspace(1) %1, i64 %69, !dbg !33
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %54, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %71, ptr addrspace(1) %70, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %72 = or disjoint i32 %38, 96, !dbg !29
  %73 = sext i32 %72 to i64, !dbg !30
  %74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %73, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %46, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %75, ptr addrspace(1) %74, i32 8) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %76 = or disjoint i32 %48, 96, !dbg !32
  %77 = sext i32 %76 to i64, !dbg !33
  %78 = getelementptr bfloat, ptr addrspace(1) %1, i64 %77, !dbg !33
  %79 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %54, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %78, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %80 = and i32 %32, 24
  %81 = and i32 %16, 7
  %82 = and i32 %16, 15
  %83 = xor i32 %80, %41
  %84 = or disjoint i32 %21, %82
  %85 = shl nuw nsw i32 %84, 5
  %86 = or disjoint i32 %85, %83
  %87 = or disjoint i32 %33, 16
  %88 = or disjoint i32 %41, %34
  %89 = xor i32 %88, %87
  %90 = or disjoint i32 %89, %85
  %91 = xor i32 %32, %16
  %92 = and i32 %91, 24
  %93 = and i32 %25, 24
  %94 = or disjoint i32 %93, %81
  %95 = shl nuw nsw i32 %94, 5
  %96 = or disjoint i32 %95, %92
  %97 = or disjoint i32 %96, 1024
  %invariant.op = or disjoint i32 %38, 128, !dbg !35
  %invariant.op38 = or disjoint i32 %48, 128, !dbg !35
  %98 = sext i32 %invariant.op to i64, !dbg !35
  %99 = sext i32 %invariant.op38 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !35
  %invariant.gep57 = getelementptr bfloat, ptr addrspace(1) %1, i64 %99, !dbg !35
  br label %100, !dbg !35

100:                                              ; preds = %5, %100
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %100 ]
  %101 = phi i32 [ -1, %5 ], [ %114, %100 ]
  %102 = phi i32 [ 3, %5 ], [ %167, %100 ]
  %103 = phi float [ 0.000000e+00, %5 ], [ %156, %100 ]
  %104 = phi float [ 0.000000e+00, %5 ], [ %157, %100 ]
  %105 = phi float [ 0.000000e+00, %5 ], [ %158, %100 ]
  %106 = phi float [ 0.000000e+00, %5 ], [ %159, %100 ]
  %107 = phi float [ 0.000000e+00, %5 ], [ %161, %100 ]
  %108 = phi float [ 0.000000e+00, %5 ], [ %162, %100 ]
  %109 = phi float [ 0.000000e+00, %5 ], [ %163, %100 ]
  %110 = phi float [ 0.000000e+00, %5 ], [ %164, %100 ]
  %111 = icmp samesign ult i64 %indvars.iv, 20, !dbg !35
  %112 = add i32 %101, 1, !dbg !35
  %113 = icmp slt i32 %112, 4, !dbg !35
  %114 = select i1 %113, i32 %112, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl i32 %114, 11, !dbg !31
  %115 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx, !dbg !31
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %115, i32 %86, !dbg !31
  %117 = ptrtoint ptr addrspace(3) %116 to i32, !dbg !31
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %117) #1, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !31
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %115, i32 %90, !dbg !31
  %124 = ptrtoint ptr addrspace(3) %123 to i32, !dbg !31
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %124) #1, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !31
  %.idx26 = shl i32 %114, 12, !dbg !34
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !34
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %130, i32 %96, !dbg !34
  %132 = ptrtoint ptr addrspace(3) %131 to i32, !dbg !34
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %132) #1, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !34
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !34
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %130, i32 %97, !dbg !34
  %139 = ptrtoint ptr addrspace(3) %138 to i32, !dbg !34
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %139) #1, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !34
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !34
  %145 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %103, float %104, float %105, float %106, i32 %119, i32 %120, i32 %121, i32 %122, i32 %134, i32 %135) #1, !dbg !36
  %146 = extractvalue { float, float, float, float } %145, 0, !dbg !36
  %147 = extractvalue { float, float, float, float } %145, 1, !dbg !36
  %148 = extractvalue { float, float, float, float } %145, 2, !dbg !36
  %149 = extractvalue { float, float, float, float } %145, 3, !dbg !36
  %150 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %107, float %108, float %109, float %110, i32 %119, i32 %120, i32 %121, i32 %122, i32 %141, i32 %142) #1, !dbg !36
  %151 = extractvalue { float, float, float, float } %150, 0, !dbg !36
  %152 = extractvalue { float, float, float, float } %150, 1, !dbg !36
  %153 = extractvalue { float, float, float, float } %150, 2, !dbg !36
  %154 = extractvalue { float, float, float, float } %150, 3, !dbg !36
  %155 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %146, float %147, float %148, float %149, i32 %126, i32 %127, i32 %128, i32 %129, i32 %136, i32 %137) #1, !dbg !36
  %156 = extractvalue { float, float, float, float } %155, 0, !dbg !36
  %157 = extractvalue { float, float, float, float } %155, 1, !dbg !36
  %158 = extractvalue { float, float, float, float } %155, 2, !dbg !36
  %159 = extractvalue { float, float, float, float } %155, 3, !dbg !36
  %160 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %151, float %152, float %153, float %154, i32 %126, i32 %127, i32 %128, i32 %129, i32 %143, i32 %144) #1, !dbg !36
  %161 = extractvalue { float, float, float, float } %160, 0, !dbg !36
  %162 = extractvalue { float, float, float, float } %160, 1, !dbg !36
  %163 = extractvalue { float, float, float, float } %160, 2, !dbg !36
  %164 = extractvalue { float, float, float, float } %160, 3, !dbg !36
  %165 = add i32 %102, 1, !dbg !35
  %166 = icmp slt i32 %165, 4, !dbg !35
  %167 = select i1 %166, i32 %165, i32 0, !dbg !35
  %168 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep56 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %168, !dbg !30
  %.idx27 = shl i32 %167, 11, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %47, i32 %.idx27, !dbg !31
  %169 = select i1 %111, i32 8, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep56, i32 %169) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep58 = getelementptr bfloat, ptr addrspace(1) %invariant.gep57, i64 %168, !dbg !33
  %.idx28 = shl i32 %167, 12, !dbg !34
  %gep37 = getelementptr i8, ptr addrspace(3) %55, i32 %.idx28, !dbg !34
  %170 = select i1 %111, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep37, ptr addrspace(1) %gep58, i32 %170) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !35
  br i1 %exitcond.not, label %171, label %100, !dbg !35

171:                                              ; preds = %100
  %172 = and i32 %27, 56, !dbg !22
  %173 = or disjoint i32 %24, %172, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %174 = icmp slt i32 %23, 77, !dbg !38
  %175 = icmp slt i32 %173, 3072, !dbg !39
  %176 = and i1 %174, %175, !dbg !40
  %177 = sext i32 %173 to i64, !dbg !41
  %178 = getelementptr bfloat, ptr addrspace(1) %2, i64 %177, !dbg !41
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %176) #1, !dbg !42
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !42
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !42
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !42
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !42
  %184 = and i32 %27, 1016, !dbg !43
  %185 = shl nuw nsw i32 %20, 3, !dbg !43
  %186 = or disjoint i32 %184, %185, !dbg !43
  %187 = shl i32 %16, 1, !dbg !43
  %188 = and i32 %187, 6, !dbg !43
  %189 = shl i32 %16, 4, !dbg !43
  %190 = and i32 %189, 192, !dbg !43
  %191 = or disjoint i32 %190, %188, !dbg !43
  %192 = shl nuw nsw i32 %17, 4, !dbg !43
  %193 = or disjoint i32 %191, %192, !dbg !43
  %194 = or disjoint i32 %193, %93, !dbg !43
  %195 = or disjoint i32 %194, %185, !dbg !43
  %196 = lshr exact i32 %186, 3, !dbg !43
  %197 = and i32 %196, 248, !dbg !43
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %197, !dbg !43
  %199 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %198, i32 %186, !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %199, i32 %180, i32 %181, i32 %182, i32 %183, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %200 = lshr i32 %195, 3, !dbg !43
  %201 = and i32 %200, 536870904, !dbg !43
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %201, !dbg !43
  %203 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %202, i32 %195, !dbg !43
  %204 = load bfloat, ptr addrspace(3) %203, align 4, !dbg !43
  %205 = getelementptr inbounds nuw i8, ptr addrspace(3) %203, i32 2, !dbg !43
  %206 = load bfloat, ptr addrspace(3) %205, align 2, !dbg !43
  %207 = or disjoint i32 %195, 512, !dbg !43
  %208 = lshr i32 %207, 3, !dbg !43
  %209 = and i32 %208, 536870904, !dbg !43
  %210 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %209, !dbg !43
  %211 = getelementptr bfloat, ptr addrspace(3) %210, i32 %207, !dbg !43
  %212 = load bfloat, ptr addrspace(3) %211, align 4, !dbg !43
  %213 = getelementptr inbounds nuw i8, ptr addrspace(3) %211, i32 2, !dbg !43
  %214 = load bfloat, ptr addrspace(3) %213, align 2, !dbg !43
  %215 = or disjoint i32 %195, 32, !dbg !43
  %216 = getelementptr bfloat, ptr addrspace(3) %202, i32 %215, !dbg !43
  %217 = load bfloat, ptr addrspace(3) %216, align 4, !dbg !43
  %218 = getelementptr inbounds nuw i8, ptr addrspace(3) %216, i32 2, !dbg !43
  %219 = load bfloat, ptr addrspace(3) %218, align 2, !dbg !43
  %220 = or disjoint i32 %195, 544, !dbg !43
  %221 = lshr i32 %220, 3, !dbg !43
  %222 = and i32 %221, 536870904, !dbg !43
  %223 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %222, !dbg !43
  %224 = getelementptr bfloat, ptr addrspace(3) %223, i32 %220, !dbg !43
  %225 = load bfloat, ptr addrspace(3) %224, align 4, !dbg !43
  %226 = getelementptr inbounds nuw i8, ptr addrspace(3) %224, i32 2, !dbg !43
  %227 = load bfloat, ptr addrspace(3) %226, align 2, !dbg !43
  %228 = fpext bfloat %204 to float, !dbg !43
  %229 = fpext bfloat %206 to float, !dbg !43
  %230 = fpext bfloat %212 to float, !dbg !43
  %231 = fpext bfloat %214 to float, !dbg !43
  %232 = fpext bfloat %217 to float, !dbg !43
  %233 = fpext bfloat %219 to float, !dbg !43
  %234 = fpext bfloat %225 to float, !dbg !43
  %235 = fpext bfloat %227 to float, !dbg !43
  %236 = fadd float %156, %228, !dbg !44
  %237 = fadd float %157, %229, !dbg !44
  %238 = fadd float %158, %230, !dbg !44
  %239 = fadd float %159, %231, !dbg !44
  %240 = fadd float %161, %232, !dbg !44
  %241 = fadd float %162, %233, !dbg !44
  %242 = fadd float %163, %234, !dbg !44
  %243 = fadd float %164, %235, !dbg !44
  %244 = fmul float %236, 0x3FFB3B6460000000, !dbg !45
  %245 = fmul float %237, 0x3FFB3B6460000000, !dbg !45
  %246 = fmul float %238, 0x3FFB3B6460000000, !dbg !45
  %247 = fmul float %239, 0x3FFB3B6460000000, !dbg !45
  %248 = fmul float %240, 0x3FFB3B6460000000, !dbg !45
  %249 = fmul float %241, 0x3FFB3B6460000000, !dbg !45
  %250 = fmul float %242, 0x3FFB3B6460000000, !dbg !45
  %251 = fmul float %243, 0x3FFB3B6460000000, !dbg !45
  %252 = fsub float 0.000000e+00, %244, !dbg !46
  %253 = fsub float 0.000000e+00, %245, !dbg !46
  %254 = fsub float 0.000000e+00, %246, !dbg !46
  %255 = fsub float 0.000000e+00, %247, !dbg !46
  %256 = fsub float 0.000000e+00, %248, !dbg !46
  %257 = fsub float 0.000000e+00, %249, !dbg !46
  %258 = fsub float 0.000000e+00, %250, !dbg !46
  %259 = fsub float 0.000000e+00, %251, !dbg !46
  %260 = fmul float %252, 0x3FF7154760000000, !dbg !50
  %261 = tail call float @llvm.nvvm.ex2.approx.f(float %260), !dbg !50
  %262 = fmul float %253, 0x3FF7154760000000, !dbg !50
  %263 = tail call float @llvm.nvvm.ex2.approx.f(float %262), !dbg !50
  %264 = fmul float %254, 0x3FF7154760000000, !dbg !50
  %265 = tail call float @llvm.nvvm.ex2.approx.f(float %264), !dbg !50
  %266 = fmul float %255, 0x3FF7154760000000, !dbg !50
  %267 = tail call float @llvm.nvvm.ex2.approx.f(float %266), !dbg !50
  %268 = fmul float %256, 0x3FF7154760000000, !dbg !50
  %269 = tail call float @llvm.nvvm.ex2.approx.f(float %268), !dbg !50
  %270 = fmul float %257, 0x3FF7154760000000, !dbg !50
  %271 = tail call float @llvm.nvvm.ex2.approx.f(float %270), !dbg !50
  %272 = fmul float %258, 0x3FF7154760000000, !dbg !50
  %273 = tail call float @llvm.nvvm.ex2.approx.f(float %272), !dbg !50
  %274 = fmul float %259, 0x3FF7154760000000, !dbg !50
  %275 = tail call float @llvm.nvvm.ex2.approx.f(float %274), !dbg !50
  %276 = fadd float %261, 1.000000e+00, !dbg !51
  %277 = fadd float %263, 1.000000e+00, !dbg !51
  %278 = fadd float %265, 1.000000e+00, !dbg !51
  %279 = fadd float %267, 1.000000e+00, !dbg !51
  %280 = fadd float %269, 1.000000e+00, !dbg !51
  %281 = fadd float %271, 1.000000e+00, !dbg !51
  %282 = fadd float %273, 1.000000e+00, !dbg !51
  %283 = fadd float %275, 1.000000e+00, !dbg !51
  %284 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %276), !dbg !52
  %285 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %277), !dbg !52
  %286 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %278), !dbg !52
  %287 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %279), !dbg !52
  %288 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %280), !dbg !52
  %289 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %281), !dbg !52
  %290 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %282), !dbg !52
  %291 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %283), !dbg !52
  %292 = fmul float %236, %284, !dbg !53
  %293 = fmul float %237, %285, !dbg !53
  %294 = fmul float %238, %286, !dbg !53
  %295 = fmul float %239, %287, !dbg !53
  %296 = fmul float %240, %288, !dbg !53
  %297 = fmul float %241, %289, !dbg !53
  %298 = fmul float %242, %290, !dbg !53
  %299 = fmul float %243, %291, !dbg !53
  %300 = mul i32 %23, 3072, !dbg !54
  %301 = add i32 %300, %173, !dbg !55
  %302 = sext i32 %301 to i64, !dbg !56
  %303 = getelementptr bfloat, ptr addrspace(1) %3, i64 %302, !dbg !56
  %304 = fptrunc float %292 to bfloat, !dbg !57
  %305 = fptrunc float %293 to bfloat, !dbg !57
  %306 = fptrunc float %294 to bfloat, !dbg !57
  %307 = fptrunc float %295 to bfloat, !dbg !57
  %308 = fptrunc float %296 to bfloat, !dbg !57
  %309 = fptrunc float %297 to bfloat, !dbg !57
  %310 = fptrunc float %298 to bfloat, !dbg !57
  %311 = fptrunc float %299 to bfloat, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %312 = bitcast bfloat %304 to i16, !dbg !57
  %313 = bitcast bfloat %305 to i16, !dbg !57
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %203, i16 %312, i16 %313, i1 true) #1, !dbg !57
  %314 = bitcast bfloat %306 to i16, !dbg !57
  %315 = bitcast bfloat %307 to i16, !dbg !57
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %211, i16 %314, i16 %315, i1 true) #1, !dbg !57
  %316 = bitcast bfloat %308 to i16, !dbg !57
  %317 = bitcast bfloat %309 to i16, !dbg !57
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %216, i16 %316, i16 %317, i1 true) #1, !dbg !57
  %318 = bitcast bfloat %310 to i16, !dbg !57
  %319 = bitcast bfloat %311 to i16, !dbg !57
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %224, i16 %318, i16 %319, i1 true) #1, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %.extract = load i32, ptr addrspace(3) %199, align 16, !dbg !57
  %320 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 4, !dbg !57
  %.extract30 = load i32, ptr addrspace(3) %320, align 4, !dbg !57
  %321 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 8, !dbg !57
  %.extract32 = load i32, ptr addrspace(3) %321, align 8, !dbg !57
  %322 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 12, !dbg !57
  %.extract34 = load i32, ptr addrspace(3) %322, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract30, i32 %.extract32, i32 %.extract34, ptr addrspace(1) %303, i1 %176) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chot4drxqp36ugvcthkk447ruhhefk5mggvwo2s6zmoqpol7tgew.py", directory: "/tmp/torchinductor_root/ho")
!4 = !{ptr @triton_, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 45, column: 24, scope: !6)
!10 = !DILocation(line: 51, column: 22, scope: !6)
!11 = !DILocation(line: 52, column: 41, scope: !6)
!12 = !DILocation(line: 52, column: 30, scope: !6)
!13 = !DILocation(line: 52, column: 50, scope: !6)
!14 = !DILocation(line: 53, column: 40, scope: !6)
!15 = !DILocation(line: 53, column: 34, scope: !6)
!16 = !DILocation(line: 54, column: 19, scope: !6)
!17 = !DILocation(line: 54, column: 30, scope: !6)
!18 = !DILocation(line: 56, column: 17, scope: !6)
!19 = !DILocation(line: 56, column: 40, scope: !6)
!20 = !DILocation(line: 56, column: 27, scope: !6)
!21 = !DILocation(line: 57, column: 17, scope: !6)
!22 = !DILocation(line: 57, column: 40, scope: !6)
!23 = !DILocation(line: 57, column: 27, scope: !6)
!24 = !DILocation(line: 59, column: 57, scope: !6)
!25 = !DILocation(line: 63, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 76, column: 29, scope: !6)
!28 = !DILocation(line: 82, column: 54, scope: !6)
!29 = !DILocation(line: 76, column: 25, scope: !6)
!30 = !DILocation(line: 77, column: 25, scope: !6)
!31 = !DILocation(line: 77, column: 20, scope: !6)
!32 = !DILocation(line: 82, column: 50, scope: !6)
!33 = !DILocation(line: 82, column: 25, scope: !6)
!34 = !DILocation(line: 82, column: 20, scope: !6)
!35 = !DILocation(line: 69, column: 26, scope: !6)
!36 = !DILocation(line: 83, column: 25, scope: !6)
!37 = !DILocation(line: 71, column: 50, scope: !6)
!38 = !DILocation(line: 90, column: 20, scope: !6)
!39 = !DILocation(line: 90, column: 34, scope: !6)
!40 = !DILocation(line: 90, column: 26, scope: !6)
!41 = !DILocation(line: 94, column: 30, scope: !6)
!42 = !DILocation(line: 94, column: 66, scope: !6)
!43 = !DILocation(line: 94, column: 105, scope: !6)
!44 = !DILocation(line: 95, column: 17, scope: !6)
!45 = !DILocation(line: 97, column: 18, scope: !6)
!46 = !DILocation(line: 47, column: 30, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !6, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!49 = !DILocation(line: 98, column: 22, scope: !6)
!50 = !DILocation(line: 47, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 47, column: 20, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 47, column: 16, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 99, column: 18, scope: !6)
!54 = !DILocation(line: 100, column: 54, scope: !6)
!55 = !DILocation(line: 100, column: 49, scope: !6)
!56 = !DILocation(line: 100, column: 25, scope: !6)
!57 = !DILocation(line: 100, column: 80, scope: !6)
!58 = !DILocation(line: 100, column: 4, scope: !6)
