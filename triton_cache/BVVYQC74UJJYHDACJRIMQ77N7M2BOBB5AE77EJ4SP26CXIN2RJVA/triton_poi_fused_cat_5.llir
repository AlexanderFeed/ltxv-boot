; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 10, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 3, !dbg !11
  %14 = and i32 %13, 1016, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = sdiv i32 %15, 128, !dbg !13
  %17 = srem i32 %16, 4112, !dbg !14
  %18 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %15, %18, !dbg !15
  %19 = sdiv i32 %15, 526336, !dbg !16
  %20 = icmp slt i32 %17, 512, !dbg !17
  %21 = shl nsw i32 %19, 7, !dbg !18
  %22 = add nsw i32 %21, %.decomposed, !dbg !19
  %23 = mul nsw i32 %17, 9216, !dbg !20
  %24 = add nsw i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %20) #3, !dbg !23
  %28 = mul nsw i32 %17, 24, !dbg !24
  %29 = add nsw i32 %28, %19, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %43 = bitcast i32 %42 to float, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %47 = bitcast i32 %46 to float, !dbg !27
  %48 = tail call float @llvm.nvvm.div.full(float %33, float 1.280000e+02), !dbg !28
  %49 = tail call float @llvm.nvvm.div.full(float %35, float 1.280000e+02), !dbg !28
  %50 = tail call float @llvm.nvvm.div.full(float %37, float 1.280000e+02), !dbg !28
  %51 = tail call float @llvm.nvvm.div.full(float %39, float 1.280000e+02), !dbg !28
  %52 = tail call float @llvm.nvvm.div.full(float %41, float 1.280000e+02), !dbg !28
  %53 = tail call float @llvm.nvvm.div.full(float %43, float 1.280000e+02), !dbg !28
  %54 = tail call float @llvm.nvvm.div.full(float %45, float 1.280000e+02), !dbg !28
  %55 = tail call float @llvm.nvvm.div.full(float %47, float 1.280000e+02), !dbg !28
  %56 = fadd float %48, 0x3EB0C6F7A0000000, !dbg !29
  %57 = fadd float %49, 0x3EB0C6F7A0000000, !dbg !29
  %58 = fadd float %50, 0x3EB0C6F7A0000000, !dbg !29
  %59 = fadd float %51, 0x3EB0C6F7A0000000, !dbg !29
  %60 = fadd float %52, 0x3EB0C6F7A0000000, !dbg !29
  %61 = fadd float %53, 0x3EB0C6F7A0000000, !dbg !29
  %62 = fadd float %54, 0x3EB0C6F7A0000000, !dbg !29
  %63 = fadd float %55, 0x3EB0C6F7A0000000, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %64, 0, !dbg !30
  br i1 %.not.i, label %67, label %65, !dbg !30

65:                                               ; preds = %9
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %56), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

67:                                               ; preds = %9
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %56), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %65, %67
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], !dbg !30
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %69, 0, !dbg !30
  br i1 %.not.i1, label %72, label %70, !dbg !30

70:                                               ; preds = %__nv_rsqrtf.exit
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !30
  br label %__nv_rsqrtf.exit3, !dbg !30

72:                                               ; preds = %__nv_rsqrtf.exit
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !30
  br label %__nv_rsqrtf.exit3, !dbg !30

__nv_rsqrtf.exit3:                                ; preds = %70, %72
  %.0.i2 = phi float [ %71, %70 ], [ %73, %72 ], !dbg !30
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i4 = icmp eq i32 %74, 0, !dbg !30
  br i1 %.not.i4, label %77, label %75, !dbg !30

75:                                               ; preds = %__nv_rsqrtf.exit3
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !30
  br label %__nv_rsqrtf.exit6, !dbg !30

77:                                               ; preds = %__nv_rsqrtf.exit3
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !30
  br label %__nv_rsqrtf.exit6, !dbg !30

__nv_rsqrtf.exit6:                                ; preds = %75, %77
  %.0.i5 = phi float [ %76, %75 ], [ %78, %77 ], !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i7 = icmp eq i32 %79, 0, !dbg !30
  br i1 %.not.i7, label %82, label %80, !dbg !30

80:                                               ; preds = %__nv_rsqrtf.exit6
  %81 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %59), !dbg !30
  br label %__nv_rsqrtf.exit9, !dbg !30

82:                                               ; preds = %__nv_rsqrtf.exit6
  %83 = tail call float @llvm.nvvm.rsqrt.approx.f(float %59), !dbg !30
  br label %__nv_rsqrtf.exit9, !dbg !30

__nv_rsqrtf.exit9:                                ; preds = %80, %82
  %.0.i8 = phi float [ %81, %80 ], [ %83, %82 ], !dbg !30
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i10 = icmp eq i32 %84, 0, !dbg !30
  br i1 %.not.i10, label %87, label %85, !dbg !30

85:                                               ; preds = %__nv_rsqrtf.exit9
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !30
  br label %__nv_rsqrtf.exit12, !dbg !30

87:                                               ; preds = %__nv_rsqrtf.exit9
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !30
  br label %__nv_rsqrtf.exit12, !dbg !30

__nv_rsqrtf.exit12:                               ; preds = %85, %87
  %.0.i11 = phi float [ %86, %85 ], [ %88, %87 ], !dbg !30
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i13 = icmp eq i32 %89, 0, !dbg !30
  br i1 %.not.i13, label %92, label %90, !dbg !30

90:                                               ; preds = %__nv_rsqrtf.exit12
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !30
  br label %__nv_rsqrtf.exit15, !dbg !30

92:                                               ; preds = %__nv_rsqrtf.exit12
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !30
  br label %__nv_rsqrtf.exit15, !dbg !30

__nv_rsqrtf.exit15:                               ; preds = %90, %92
  %.0.i14 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !30
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %94, 0, !dbg !30
  br i1 %.not.i16, label %97, label %95, !dbg !30

95:                                               ; preds = %__nv_rsqrtf.exit15
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !30
  br label %__nv_rsqrtf.exit18, !dbg !30

97:                                               ; preds = %__nv_rsqrtf.exit15
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !30
  br label %__nv_rsqrtf.exit18, !dbg !30

__nv_rsqrtf.exit18:                               ; preds = %95, %97
  %.0.i17 = phi float [ %96, %95 ], [ %98, %97 ], !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i19 = icmp eq i32 %99, 0, !dbg !30
  br i1 %.not.i19, label %102, label %100, !dbg !30

100:                                              ; preds = %__nv_rsqrtf.exit18
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !30
  br label %__nv_rsqrtf.exit21, !dbg !30

102:                                              ; preds = %__nv_rsqrtf.exit18
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !30
  br label %__nv_rsqrtf.exit21, !dbg !30

__nv_rsqrtf.exit21:                               ; preds = %100, %102
  %.0.i20 = phi float [ %101, %100 ], [ %103, %102 ], !dbg !30
  %104 = sext i32 %.decomposed to i64, !dbg !31
  %105 = getelementptr bfloat, ptr addrspace(1) %2, i64 %104, !dbg !31
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %105, i1 %20) #3, !dbg !32
  %107 = icmp sgt i32 %17, 511, !dbg !33
  %108 = add nsw i32 %17, -512, !dbg !34
  %109 = mul nsw i32 %108, 9216, !dbg !35
  %110 = add nsw i32 %109, %22, !dbg !36
  %111 = sext i32 %110 to i64, !dbg !37
  %112 = getelementptr bfloat, ptr addrspace(1) %3, i64 %111, !dbg !37
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %107) #3, !dbg !38
  %114 = mul nsw i32 %108, 24, !dbg !39
  %115 = add nsw i32 %114, %19, !dbg !40
  %116 = sext i32 %115 to i64, !dbg !41
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %116, !dbg !41
  %118 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %119 = bitcast i32 %118 to float, !dbg !42
  %120 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %121 = bitcast i32 %120 to float, !dbg !42
  %122 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %123 = bitcast i32 %122 to float, !dbg !42
  %124 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %125 = bitcast i32 %124 to float, !dbg !42
  %126 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %127 = bitcast i32 %126 to float, !dbg !42
  %128 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %129 = bitcast i32 %128 to float, !dbg !42
  %130 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %131 = bitcast i32 %130 to float, !dbg !42
  %132 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %107) #3, !dbg !42
  %133 = bitcast i32 %132 to float, !dbg !42
  %134 = tail call float @llvm.nvvm.div.full(float %119, float 1.280000e+02), !dbg !43
  %135 = tail call float @llvm.nvvm.div.full(float %121, float 1.280000e+02), !dbg !43
  %136 = tail call float @llvm.nvvm.div.full(float %123, float 1.280000e+02), !dbg !43
  %137 = tail call float @llvm.nvvm.div.full(float %125, float 1.280000e+02), !dbg !43
  %138 = tail call float @llvm.nvvm.div.full(float %127, float 1.280000e+02), !dbg !43
  %139 = tail call float @llvm.nvvm.div.full(float %129, float 1.280000e+02), !dbg !43
  %140 = tail call float @llvm.nvvm.div.full(float %131, float 1.280000e+02), !dbg !43
  %141 = tail call float @llvm.nvvm.div.full(float %133, float 1.280000e+02), !dbg !43
  %142 = fadd float %134, 0x3EB0C6F7A0000000, !dbg !44
  %143 = fadd float %135, 0x3EB0C6F7A0000000, !dbg !44
  %144 = fadd float %136, 0x3EB0C6F7A0000000, !dbg !44
  %145 = fadd float %137, 0x3EB0C6F7A0000000, !dbg !44
  %146 = fadd float %138, 0x3EB0C6F7A0000000, !dbg !44
  %147 = fadd float %139, 0x3EB0C6F7A0000000, !dbg !44
  %148 = fadd float %140, 0x3EB0C6F7A0000000, !dbg !44
  %149 = fadd float %141, 0x3EB0C6F7A0000000, !dbg !44
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i22 = icmp eq i32 %150, 0, !dbg !45
  br i1 %.not.i22, label %153, label %151, !dbg !45

151:                                              ; preds = %__nv_rsqrtf.exit21
  %152 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !45
  br label %__nv_rsqrtf.exit24, !dbg !45

153:                                              ; preds = %__nv_rsqrtf.exit21
  %154 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !45
  br label %__nv_rsqrtf.exit24, !dbg !45

__nv_rsqrtf.exit24:                               ; preds = %151, %153
  %.0.i23 = phi float [ %152, %151 ], [ %154, %153 ], !dbg !45
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i25 = icmp eq i32 %155, 0, !dbg !45
  br i1 %.not.i25, label %158, label %156, !dbg !45

156:                                              ; preds = %__nv_rsqrtf.exit24
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !45
  br label %__nv_rsqrtf.exit27, !dbg !45

158:                                              ; preds = %__nv_rsqrtf.exit24
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !45
  br label %__nv_rsqrtf.exit27, !dbg !45

__nv_rsqrtf.exit27:                               ; preds = %156, %158
  %.0.i26 = phi float [ %157, %156 ], [ %159, %158 ], !dbg !45
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i28 = icmp eq i32 %160, 0, !dbg !45
  br i1 %.not.i28, label %163, label %161, !dbg !45

161:                                              ; preds = %__nv_rsqrtf.exit27
  %162 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !45
  br label %__nv_rsqrtf.exit30, !dbg !45

163:                                              ; preds = %__nv_rsqrtf.exit27
  %164 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !45
  br label %__nv_rsqrtf.exit30, !dbg !45

__nv_rsqrtf.exit30:                               ; preds = %161, %163
  %.0.i29 = phi float [ %162, %161 ], [ %164, %163 ], !dbg !45
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i31 = icmp eq i32 %165, 0, !dbg !45
  br i1 %.not.i31, label %168, label %166, !dbg !45

166:                                              ; preds = %__nv_rsqrtf.exit30
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !45
  br label %__nv_rsqrtf.exit33, !dbg !45

168:                                              ; preds = %__nv_rsqrtf.exit30
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !45
  br label %__nv_rsqrtf.exit33, !dbg !45

__nv_rsqrtf.exit33:                               ; preds = %166, %168
  %.0.i32 = phi float [ %167, %166 ], [ %169, %168 ], !dbg !45
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i34 = icmp eq i32 %170, 0, !dbg !45
  br i1 %.not.i34, label %173, label %171, !dbg !45

171:                                              ; preds = %__nv_rsqrtf.exit33
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !45
  br label %__nv_rsqrtf.exit36, !dbg !45

173:                                              ; preds = %__nv_rsqrtf.exit33
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !45
  br label %__nv_rsqrtf.exit36, !dbg !45

__nv_rsqrtf.exit36:                               ; preds = %171, %173
  %.0.i35 = phi float [ %172, %171 ], [ %174, %173 ], !dbg !45
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i37 = icmp eq i32 %175, 0, !dbg !45
  br i1 %.not.i37, label %178, label %176, !dbg !45

176:                                              ; preds = %__nv_rsqrtf.exit36
  %177 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !45
  br label %__nv_rsqrtf.exit39, !dbg !45

178:                                              ; preds = %__nv_rsqrtf.exit36
  %179 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !45
  br label %__nv_rsqrtf.exit39, !dbg !45

__nv_rsqrtf.exit39:                               ; preds = %176, %178
  %.0.i38 = phi float [ %177, %176 ], [ %179, %178 ], !dbg !45
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i40 = icmp eq i32 %180, 0, !dbg !45
  br i1 %.not.i40, label %183, label %181, !dbg !45

181:                                              ; preds = %__nv_rsqrtf.exit39
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !45
  br label %__nv_rsqrtf.exit42, !dbg !45

183:                                              ; preds = %__nv_rsqrtf.exit39
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !45
  br label %__nv_rsqrtf.exit42, !dbg !45

__nv_rsqrtf.exit42:                               ; preds = %181, %183
  %.0.i41 = phi float [ %182, %181 ], [ %184, %183 ], !dbg !45
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i43 = icmp eq i32 %185, 0, !dbg !45
  br i1 %.not.i43, label %188, label %186, !dbg !45

186:                                              ; preds = %__nv_rsqrtf.exit42
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %149), !dbg !45
  br label %__nv_rsqrtf.exit45, !dbg !45

188:                                              ; preds = %__nv_rsqrtf.exit42
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %149), !dbg !45
  br label %__nv_rsqrtf.exit45, !dbg !45

__nv_rsqrtf.exit45:                               ; preds = %186, %188
  %.0.i44 = phi float [ %187, %186 ], [ %189, %188 ], !dbg !45
  %190 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !38
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !38
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !38
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !38
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !23
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !23
  %200 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !32
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !32
  %202 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !23
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !23
  %204 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !32
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !32
  %206 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !23
  %207 = bitcast i32 %206 to <2 x bfloat>, !dbg !23
  %208 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !32
  %209 = bitcast i32 %208 to <2 x bfloat>, !dbg !32
  %210 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !23
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !23
  %212 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !32
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !32
  %214 = getelementptr bfloat, ptr addrspace(1) %5, i64 %104, !dbg !46
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %214, i1 %107) #3, !dbg !47
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !47
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !47
  %218 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !47
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !47
  %220 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !47
  %221 = bitcast i32 %220 to <2 x bfloat>, !dbg !47
  %222 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !47
  %223 = bitcast i32 %222 to <2 x bfloat>, !dbg !47
  %224 = sext i32 %15 to i64, !dbg !48
  %225 = getelementptr bfloat, ptr addrspace(1) %6, i64 %224, !dbg !48
  %226 = fpext <2 x bfloat> %197 to <2 x float>, !dbg !49
  %227 = fpext <2 x bfloat> %211 to <2 x float>, !dbg !50
  %228 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !51
  %229 = insertelement <2 x float> %228, float %.0.i2, i64 1, !dbg !51
  %230 = fmul <2 x float> %229, %227, !dbg !51
  %231 = fpext <2 x bfloat> %213 to <2 x float>, !dbg !52
  %232 = fmul <2 x float> %230, %231, !dbg !53
  %233 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !54
  %234 = insertelement <2 x float> %233, float %.0.i26, i64 1, !dbg !54
  %235 = fmul <2 x float> %234, %226, !dbg !54
  %236 = fpext <2 x bfloat> %217 to <2 x float>, !dbg !55
  %237 = fmul <2 x float> %235, %236, !dbg !56
  %238 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !57
  %239 = shufflevector <2 x i1> %238, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !57
  %240 = select <2 x i1> %239, <2 x float> %232, <2 x float> %237, !dbg !57
  %241 = fptrunc <2 x float> %240 to <2 x bfloat>, !dbg !58
  %242 = fpext <2 x bfloat> %195 to <2 x float>, !dbg !49
  %243 = fpext <2 x bfloat> %207 to <2 x float>, !dbg !50
  %244 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !51
  %245 = insertelement <2 x float> %244, float %.0.i8, i64 1, !dbg !51
  %246 = fmul <2 x float> %245, %243, !dbg !51
  %247 = fpext <2 x bfloat> %209 to <2 x float>, !dbg !52
  %248 = fmul <2 x float> %246, %247, !dbg !53
  %249 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !54
  %250 = insertelement <2 x float> %249, float %.0.i32, i64 1, !dbg !54
  %251 = fmul <2 x float> %250, %242, !dbg !54
  %252 = fpext <2 x bfloat> %219 to <2 x float>, !dbg !55
  %253 = fmul <2 x float> %251, %252, !dbg !56
  %254 = select <2 x i1> %239, <2 x float> %248, <2 x float> %253, !dbg !57
  %255 = fptrunc <2 x float> %254 to <2 x bfloat>, !dbg !58
  %256 = fpext <2 x bfloat> %193 to <2 x float>, !dbg !49
  %257 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !50
  %258 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !51
  %259 = insertelement <2 x float> %258, float %.0.i14, i64 1, !dbg !51
  %260 = fmul <2 x float> %259, %257, !dbg !51
  %261 = fpext <2 x bfloat> %205 to <2 x float>, !dbg !52
  %262 = fmul <2 x float> %260, %261, !dbg !53
  %263 = insertelement <2 x float> poison, float %.0.i35, i64 0, !dbg !54
  %264 = insertelement <2 x float> %263, float %.0.i38, i64 1, !dbg !54
  %265 = fmul <2 x float> %264, %256, !dbg !54
  %266 = fpext <2 x bfloat> %221 to <2 x float>, !dbg !55
  %267 = fmul <2 x float> %265, %266, !dbg !56
  %268 = select <2 x i1> %239, <2 x float> %262, <2 x float> %267, !dbg !57
  %269 = fptrunc <2 x float> %268 to <2 x bfloat>, !dbg !58
  %270 = fpext <2 x bfloat> %191 to <2 x float>, !dbg !49
  %271 = fpext <2 x bfloat> %199 to <2 x float>, !dbg !50
  %272 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !51
  %273 = insertelement <2 x float> %272, float %.0.i20, i64 1, !dbg !51
  %274 = fmul <2 x float> %273, %271, !dbg !51
  %275 = fpext <2 x bfloat> %201 to <2 x float>, !dbg !52
  %276 = fmul <2 x float> %274, %275, !dbg !53
  %277 = insertelement <2 x float> poison, float %.0.i41, i64 0, !dbg !54
  %278 = insertelement <2 x float> %277, float %.0.i44, i64 1, !dbg !54
  %279 = fmul <2 x float> %278, %270, !dbg !54
  %280 = fpext <2 x bfloat> %223 to <2 x float>, !dbg !55
  %281 = fmul <2 x float> %279, %280, !dbg !56
  %282 = select <2 x i1> %239, <2 x float> %276, <2 x float> %281, !dbg !57
  %283 = fptrunc <2 x float> %282 to <2 x bfloat>, !dbg !58
  %284 = bitcast <2 x bfloat> %241 to i32, !dbg !58
  %285 = bitcast <2 x bfloat> %255 to i32, !dbg !58
  %286 = bitcast <2 x bfloat> %269 to i32, !dbg !58
  %287 = bitcast <2 x bfloat> %283 to i32, !dbg !58
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %225) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfrhpq3l2u74kw33rn5scwa56uqur4qnbfws3qn2tkwloyb2siea.py", directory: "/tmp/torchinductor_root/fr")
!4 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 28, scope: !6)
!15 = !DILocation(line: 24, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 31, column: 18, scope: !6)
!18 = !DILocation(line: 32, column: 39, scope: !6)
!19 = !DILocation(line: 32, column: 35, scope: !6)
!20 = !DILocation(line: 32, column: 50, scope: !6)
!21 = !DILocation(line: 32, column: 44, scope: !6)
!22 = !DILocation(line: 32, column: 30, scope: !6)
!23 = !DILocation(line: 32, column: 56, scope: !6)
!24 = !DILocation(line: 34, column: 39, scope: !6)
!25 = !DILocation(line: 34, column: 35, scope: !6)
!26 = !DILocation(line: 34, column: 30, scope: !6)
!27 = !DILocation(line: 34, column: 45, scope: !6)
!28 = !DILocation(line: 36, column: 19, scope: !6)
!29 = !DILocation(line: 38, column: 19, scope: !6)
!30 = !DILocation(line: 39, column: 28, scope: !6)
!31 = !DILocation(line: 42, column: 31, scope: !6)
!32 = !DILocation(line: 42, column: 36, scope: !6)
!33 = !DILocation(line: 46, column: 20, scope: !6)
!34 = !DILocation(line: 49, column: 60, scope: !6)
!35 = !DILocation(line: 49, column: 51, scope: !6)
!36 = !DILocation(line: 49, column: 45, scope: !6)
!37 = !DILocation(line: 49, column: 31, scope: !6)
!38 = !DILocation(line: 49, column: 66, scope: !6)
!39 = !DILocation(line: 51, column: 40, scope: !6)
!40 = !DILocation(line: 51, column: 36, scope: !6)
!41 = !DILocation(line: 51, column: 31, scope: !6)
!42 = !DILocation(line: 51, column: 55, scope: !6)
!43 = !DILocation(line: 53, column: 21, scope: !6)
!44 = !DILocation(line: 55, column: 20, scope: !6)
!45 = !DILocation(line: 56, column: 28, scope: !6)
!46 = !DILocation(line: 59, column: 31, scope: !6)
!47 = !DILocation(line: 59, column: 36, scope: !6)
!48 = !DILocation(line: 64, column: 25, scope: !6)
!49 = !DILocation(line: 49, column: 87, scope: !6)
!50 = !DILocation(line: 32, column: 76, scope: !6)
!51 = !DILocation(line: 40, column: 19, scope: !6)
!52 = !DILocation(line: 42, column: 86, scope: !6)
!53 = !DILocation(line: 43, column: 20, scope: !6)
!54 = !DILocation(line: 57, column: 20, scope: !6)
!55 = !DILocation(line: 59, column: 87, scope: !6)
!56 = !DILocation(line: 60, column: 20, scope: !6)
!57 = !DILocation(line: 0, scope: !6)
!58 = !DILocation(line: 64, column: 37, scope: !6)
!59 = !DILocation(line: 64, column: 4, scope: !6)
