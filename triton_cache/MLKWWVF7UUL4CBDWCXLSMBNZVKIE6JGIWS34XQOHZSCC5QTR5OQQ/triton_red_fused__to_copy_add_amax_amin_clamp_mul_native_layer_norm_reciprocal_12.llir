; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 64, !dbg !11
  %.lobit = lshr exact i32 %20, 6, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %18, 512, !dbg !13
  %25 = shl i32 %19, 3, !dbg !14
  %26 = and i32 %25, 1016, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = shl i32 %19, 4, !dbg !14
  %29 = and i32 %28, 1008, !dbg !14
  %30 = or disjoint i32 %29, 4, !dbg !14
  %31 = or disjoint i32 %29, 8, !dbg !14
  %32 = or disjoint i32 %29, 12, !dbg !14
  %33 = sext i32 %22 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %4, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %51 = bitcast i16 %50 to bfloat, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %5, i64 %33, !dbg !17
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %23) #5, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = mul i32 %22, 3072, !dbg !19
  %71 = mul i32 %17, 6144, !dbg !19
  %72 = add i32 %71, 3072, !dbg !19
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !20
  %73 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !20
  %74 = fpext bfloat %73 to float, !dbg !20
  %75 = fsub float 0.000000e+00, %74, !dbg !24
  %.inv4 = fcmp ole bfloat %69, 0xR0000, !dbg !25
  %76 = select i1 %.inv4, bfloat 0xR0000, bfloat %69, !dbg !25
  %77 = fpext bfloat %76 to float, !dbg !25
  %78 = fcmp ogt float %75, %77, !dbg !27
  %79 = fcmp uno float %75, 0.000000e+00, !dbg !29
  %80 = or i1 %79, %78, !dbg !30
  %81 = select i1 %80, float %75, float %77, !dbg !31
  %82 = fmul float %81, 0x3F80204080000000, !dbg !32
  %83 = fcmp ogt float %82, 0x3EE4F8B580000000, !dbg !33
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !35
  %85 = or i1 %83, %84, !dbg !36
  %86 = select i1 %85, float %82, float 0x3EE4F8B580000000, !dbg !37
  %87 = or disjoint i32 %70, %29
  %88 = or disjoint i32 %70, %30
  %89 = or disjoint i32 %70, %31
  %90 = or disjoint i32 %70, %32
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !38
  %91 = and i32 %28, 2032
  %92 = lshr i32 %28, 6
  %.idx = and i32 %92, 16
  %93 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %94 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %93, i32 %91
  %95 = or disjoint i32 %91, 8
  %96 = getelementptr bfloat, ptr addrspace(3) %93, i32 %95
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %98 = getelementptr inbounds nuw i8, ptr addrspace(3) %97, i32 2064
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) %93, i32 %91
  %100 = or disjoint i32 %91, 4
  %101 = lshr i32 %28, 8
  %102 = and i32 %101, 4
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %100
  %105 = getelementptr float, ptr addrspace(3) %93, i32 %95
  %106 = or disjoint i32 %91, 12
  %107 = getelementptr float, ptr addrspace(3) %103, i32 %106
  %108 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %109 = or disjoint i32 %26, 1028
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %109
  %111 = zext nneg i32 %27 to i64, !dbg !38
  %112 = zext nneg i32 %26 to i64, !dbg !38
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %97, i32 2068
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %97, i32 2076
  %115 = insertelement <16 x i1> poison, i1 %24, i64 0, !dbg !39
  %116 = shufflevector <16 x i1> %115, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !39
  br label %117, !dbg !38

117:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %16 ], [ %543, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %16 ], [ %544, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %16 ], [ %545, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %16 ], [ %546, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %16 ], [ %547, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %16 ], [ %548, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %16 ], [ %549, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %16 ], [ %550, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %16 ], [ %551, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %16 ], [ %552, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %16 ], [ %553, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %16 ], [ %554, %._crit_edge ]
  %131 = phi float [ 0.000000e+00, %16 ], [ %555, %._crit_edge ]
  %132 = phi float [ 0.000000e+00, %16 ], [ %556, %._crit_edge ]
  %133 = phi float [ 0.000000e+00, %16 ], [ %557, %._crit_edge ]
  %134 = phi float [ 0.000000e+00, %16 ], [ %526, %._crit_edge ]
  %135 = phi float [ 0.000000e+00, %16 ], [ %527, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %16 ], [ %528, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %529, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %530, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %531, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %532, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %533, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %534, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %535, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %536, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %537, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %538, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %150 = phi <16 x float> [ zeroinitializer, %16 ], [ %525, %._crit_edge ]
  %151 = or disjoint i64 %indvars.iv, %112, !dbg !40
  %152 = or disjoint i64 %indvars.iv, %111, !dbg !40
  %153 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %154 = add i32 %87, %153, !dbg !41
  %155 = add i32 %88, %153, !dbg !41
  %156 = add i32 %89, %153, !dbg !41
  %157 = add i32 %90, %153, !dbg !41
  %158 = trunc nuw nsw i64 %151 to i32, !dbg !41
  %159 = add i32 %71, %158, !dbg !41
  %160 = add i32 %72, %158, !dbg !41
  %161 = sext i32 %154 to i64, !dbg !42
  %162 = getelementptr bfloat, ptr addrspace(1) %0, i64 %161, !dbg !42
  %163 = sext i32 %156 to i64, !dbg !42
  %164 = getelementptr bfloat, ptr addrspace(1) %0, i64 %163, !dbg !42
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %162, i1 %23) #5, !dbg !43
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !43
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !43
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !43
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !43
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %164, i1 %23) #5, !dbg !43
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !43
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !43
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !43
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %94, i32 %166, i32 %167, i32 %168, i32 %169, i1 true) #5, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %96, i32 %171, i32 %172, i32 %173, i32 %174, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %175 = add nuw nsw i64 %151, 6144, !dbg !45
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !46
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %152, !dbg !46
  %177 = getelementptr bfloat, ptr addrspace(1) %2, i64 %175, !dbg !47
  %178 = getelementptr i32, ptr addrspace(1) %3, i64 %161, !dbg !48
  %179 = sext i32 %155 to i64, !dbg !48
  %180 = getelementptr i32, ptr addrspace(1) %3, i64 %179, !dbg !48
  %181 = getelementptr i32, ptr addrspace(1) %3, i64 %163, !dbg !48
  %182 = sext i32 %157 to i64, !dbg !48
  %183 = getelementptr i32, ptr addrspace(1) %3, i64 %182, !dbg !48
  %184 = getelementptr bfloat, ptr addrspace(1) %6, i64 %151, !dbg !49
  %185 = getelementptr bfloat, ptr addrspace(1) %7, i64 %151, !dbg !50
  %186 = load <8 x bfloat>, ptr addrspace(3) %97, align 16, !dbg !44
  %187 = load <8 x bfloat>, ptr addrspace(3) %98, align 16, !dbg !44
  %188 = shufflevector <8 x bfloat> %186, <8 x bfloat> %187, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !44
  %189 = fpext <16 x bfloat> %188 to <16 x float>, !dbg !44
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %176, i1 true) #5, !dbg !51
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !51
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !51
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !51
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !51
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !51
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !51
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !51
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !51
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !51
  %200 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !51
  %201 = insertelement <8 x i32> %200, i32 %192, i64 1, !dbg !51
  %202 = insertelement <8 x i32> %201, i32 %193, i64 2, !dbg !51
  %203 = insertelement <8 x i32> %202, i32 %194, i64 3, !dbg !51
  %204 = insertelement <8 x i32> %203, i32 %196, i64 4, !dbg !51
  %205 = insertelement <8 x i32> %204, i32 %197, i64 5, !dbg !51
  %206 = insertelement <8 x i32> %205, i32 %198, i64 6, !dbg !51
  %207 = insertelement <8 x i32> %206, i32 %199, i64 7, !dbg !51
  %208 = bitcast <8 x i32> %207 to <8 x float>, !dbg !51
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %177, i1 true) #5, !dbg !52
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !52
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !52
  %212 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !52
  %213 = bitcast i32 %212 to <2 x bfloat>, !dbg !52
  %214 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !52
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !52
  %216 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !52
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !52
  %218 = shufflevector <2 x bfloat> %211, <2 x bfloat> %213, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %219 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %220 = shufflevector <8 x bfloat> %218, <8 x bfloat> %219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !53
  %221 = shufflevector <2 x bfloat> %215, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %222 = shufflevector <8 x bfloat> %220, <8 x bfloat> %221, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !53
  %223 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %224 = shufflevector <8 x bfloat> %222, <8 x bfloat> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !53
  %225 = shufflevector <2 x bfloat> %217, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %226 = shufflevector <8 x bfloat> %224, <8 x bfloat> %225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !53
  %227 = fpext <8 x bfloat> %226 to <8 x float>, !dbg !53
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %23) #5, !dbg !54
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !54
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !54
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !54
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !54
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %23) #5, !dbg !54
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !54
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !54
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !54
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !54
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %23) #5, !dbg !54
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !54
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !54
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !54
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !54
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %23) #5, !dbg !54
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !54
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !54
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !54
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !54
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 true) #5, !dbg !55
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !55
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !55
  %251 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !55
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !55
  %253 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !55
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !55
  %255 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !55
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !55
  %257 = shufflevector <2 x bfloat> %250, <2 x bfloat> %252, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %258 = shufflevector <2 x bfloat> %254, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %259 = shufflevector <8 x bfloat> %257, <8 x bfloat> %258, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !56
  %260 = shufflevector <2 x bfloat> %254, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %261 = shufflevector <8 x bfloat> %259, <8 x bfloat> %260, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !56
  %262 = shufflevector <2 x bfloat> %256, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %263 = shufflevector <8 x bfloat> %261, <8 x bfloat> %262, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !56
  %264 = shufflevector <2 x bfloat> %256, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %265 = shufflevector <8 x bfloat> %263, <8 x bfloat> %264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !56
  %266 = fpext <8 x bfloat> %265 to <8 x float>, !dbg !56
  %267 = shufflevector <8 x float> %266, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !56
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 true) #5, !dbg !57
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !57
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !57
  %271 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !57
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !57
  %273 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !57
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !57
  %275 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !57
  %276 = bitcast i32 %275 to <2 x bfloat>, !dbg !57
  %277 = shufflevector <2 x bfloat> %270, <2 x bfloat> %272, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %278 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %279 = shufflevector <8 x bfloat> %277, <8 x bfloat> %278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !58
  %280 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %281 = shufflevector <8 x bfloat> %279, <8 x bfloat> %280, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !58
  %282 = shufflevector <2 x bfloat> %276, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %283 = shufflevector <8 x bfloat> %281, <8 x bfloat> %282, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !58
  %284 = shufflevector <2 x bfloat> %276, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !58
  %285 = shufflevector <8 x bfloat> %283, <8 x bfloat> %284, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !58
  %286 = fpext <8 x bfloat> %285 to <8 x float>, !dbg !58
  %287 = shufflevector <8 x float> %286, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !58
  %288 = fadd <8 x float> %208, %227, !dbg !59
  %289 = shufflevector <8 x float> %288, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !59
  %290 = sitofp i32 %229 to float, !dbg !60
  %291 = sitofp i32 %230 to float, !dbg !60
  %292 = sitofp i32 %231 to float, !dbg !60
  %293 = sitofp i32 %232 to float, !dbg !60
  %294 = sitofp i32 %234 to float, !dbg !60
  %295 = sitofp i32 %235 to float, !dbg !60
  %296 = sitofp i32 %236 to float, !dbg !60
  %297 = sitofp i32 %237 to float, !dbg !60
  %298 = sitofp i32 %239 to float, !dbg !60
  %299 = sitofp i32 %240 to float, !dbg !60
  %300 = sitofp i32 %241 to float, !dbg !60
  %301 = sitofp i32 %242 to float, !dbg !60
  %302 = sitofp i32 %244 to float, !dbg !60
  %303 = sitofp i32 %245 to float, !dbg !60
  %304 = sitofp i32 %246 to float, !dbg !60
  %305 = sitofp i32 %247 to float, !dbg !60
  %306 = fmul float %86, %290, !dbg !61
  %307 = fmul float %86, %291, !dbg !61
  %308 = fmul float %86, %292, !dbg !61
  %309 = fmul float %86, %293, !dbg !61
  %310 = fmul float %86, %294, !dbg !61
  %311 = fmul float %86, %295, !dbg !61
  %312 = fmul float %86, %296, !dbg !61
  %313 = fmul float %86, %297, !dbg !61
  %314 = fmul float %86, %298, !dbg !61
  %315 = fmul float %86, %299, !dbg !61
  %316 = fmul float %86, %300, !dbg !61
  %317 = fmul float %86, %301, !dbg !61
  %318 = fmul float %86, %302, !dbg !61
  %319 = fmul float %86, %303, !dbg !61
  %320 = fmul float %86, %304, !dbg !61
  %321 = fmul float %86, %305, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %322 = bitcast float %306 to i32, !dbg !61
  %323 = bitcast float %307 to i32, !dbg !61
  %324 = bitcast float %308 to i32, !dbg !61
  %325 = bitcast float %309 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %99, i32 %322, i32 %323, i32 %324, i32 %325, i1 true) #5, !dbg !61
  %326 = bitcast float %310 to i32, !dbg !61
  %327 = bitcast float %311 to i32, !dbg !61
  %328 = bitcast float %312 to i32, !dbg !61
  %329 = bitcast float %313 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %104, i32 %326, i32 %327, i32 %328, i32 %329, i1 true) #5, !dbg !61
  %330 = bitcast float %314 to i32, !dbg !61
  %331 = bitcast float %315 to i32, !dbg !61
  %332 = bitcast float %316 to i32, !dbg !61
  %333 = bitcast float %317 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %105, i32 %330, i32 %331, i32 %332, i32 %333, i1 true) #5, !dbg !61
  %334 = bitcast float %318 to i32, !dbg !61
  %335 = bitcast float %319 to i32, !dbg !61
  %336 = bitcast float %320 to i32, !dbg !61
  %337 = bitcast float %321 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %107, i32 %334, i32 %335, i32 %336, i32 %337, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %338 = load <8 x float>, ptr addrspace(3) %108, align 16, !dbg !61
  %339 = load <8 x float>, ptr addrspace(3) %110, align 16, !dbg !61
  %340 = shufflevector <8 x float> %338, <8 x float> %339, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !62
  %341 = fmul <16 x float> %340, %267, !dbg !62
  %342 = fadd <16 x float> %341, %287, !dbg !63
  %343 = fmul <16 x float> %289, %342, !dbg !64
  %344 = fadd <16 x float> %343, %189, !dbg !65
  %345 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %345, label %._crit_edge, label %346, !dbg !67

346:                                              ; preds = %117
  %347 = fsub <16 x float> %344, %150, !dbg !69
  %348 = extractelement <16 x float> %347, i64 0, !dbg !69
  %349 = fsub <16 x float> %344, %150, !dbg !69
  %350 = extractelement <16 x float> %349, i64 1, !dbg !69
  %351 = fsub <16 x float> %344, %150, !dbg !69
  %352 = extractelement <16 x float> %351, i64 2, !dbg !69
  %353 = fsub <16 x float> %344, %150, !dbg !69
  %354 = extractelement <16 x float> %353, i64 3, !dbg !69
  %355 = fsub <16 x float> %344, %150, !dbg !69
  %356 = extractelement <16 x float> %355, i64 4, !dbg !69
  %357 = fsub <16 x float> %344, %150, !dbg !69
  %358 = extractelement <16 x float> %357, i64 5, !dbg !69
  %359 = fsub <16 x float> %344, %150, !dbg !69
  %360 = extractelement <16 x float> %359, i64 6, !dbg !69
  %361 = fsub <16 x float> %344, %150, !dbg !69
  %362 = extractelement <16 x float> %361, i64 7, !dbg !69
  %363 = fsub <16 x float> %344, %150, !dbg !69
  %364 = extractelement <16 x float> %363, i64 8, !dbg !69
  %365 = fsub <16 x float> %344, %150, !dbg !69
  %366 = extractelement <16 x float> %365, i64 9, !dbg !69
  %367 = fsub <16 x float> %344, %150, !dbg !69
  %368 = extractelement <16 x float> %367, i64 10, !dbg !69
  %369 = fsub <16 x float> %344, %150, !dbg !69
  %370 = extractelement <16 x float> %369, i64 11, !dbg !69
  %371 = fsub <16 x float> %344, %150, !dbg !69
  %372 = extractelement <16 x float> %371, i64 12, !dbg !69
  %373 = fsub <16 x float> %344, %150, !dbg !69
  %374 = extractelement <16 x float> %373, i64 13, !dbg !69
  %375 = fsub <16 x float> %344, %150, !dbg !69
  %376 = extractelement <16 x float> %375, i64 14, !dbg !69
  %377 = fsub <16 x float> %344, %150, !dbg !69
  %378 = extractelement <16 x float> %377, i64 15, !dbg !69
  %379 = fadd float %118, 1.000000e+00, !dbg !70
  %380 = fadd float %119, 1.000000e+00, !dbg !70
  %381 = fadd float %120, 1.000000e+00, !dbg !70
  %382 = fadd float %121, 1.000000e+00, !dbg !70
  %383 = fadd float %122, 1.000000e+00, !dbg !70
  %384 = fadd float %123, 1.000000e+00, !dbg !70
  %385 = fadd float %124, 1.000000e+00, !dbg !70
  %386 = fadd float %125, 1.000000e+00, !dbg !70
  %387 = fadd float %126, 1.000000e+00, !dbg !70
  %388 = fadd float %127, 1.000000e+00, !dbg !70
  %389 = fadd float %128, 1.000000e+00, !dbg !70
  %390 = fadd float %129, 1.000000e+00, !dbg !70
  %391 = fadd float %130, 1.000000e+00, !dbg !70
  %392 = fadd float %131, 1.000000e+00, !dbg !70
  %393 = fadd float %132, 1.000000e+00, !dbg !70
  %394 = fadd float %133, 1.000000e+00, !dbg !70
  %395 = tail call float @llvm.nvvm.div.full(float %348, float %379), !dbg !71
  %396 = tail call float @llvm.nvvm.div.full(float %350, float %380), !dbg !71
  %397 = tail call float @llvm.nvvm.div.full(float %352, float %381), !dbg !71
  %398 = tail call float @llvm.nvvm.div.full(float %354, float %382), !dbg !71
  %399 = tail call float @llvm.nvvm.div.full(float %356, float %383), !dbg !71
  %400 = tail call float @llvm.nvvm.div.full(float %358, float %384), !dbg !71
  %401 = tail call float @llvm.nvvm.div.full(float %360, float %385), !dbg !71
  %402 = tail call float @llvm.nvvm.div.full(float %362, float %386), !dbg !71
  %403 = tail call float @llvm.nvvm.div.full(float %364, float %387), !dbg !71
  %404 = tail call float @llvm.nvvm.div.full(float %366, float %388), !dbg !71
  %405 = tail call float @llvm.nvvm.div.full(float %368, float %389), !dbg !71
  %406 = tail call float @llvm.nvvm.div.full(float %370, float %390), !dbg !71
  %407 = tail call float @llvm.nvvm.div.full(float %372, float %391), !dbg !71
  %408 = tail call float @llvm.nvvm.div.full(float %374, float %392), !dbg !71
  %409 = tail call float @llvm.nvvm.div.full(float %376, float %393), !dbg !71
  %410 = tail call float @llvm.nvvm.div.full(float %378, float %394), !dbg !71
  %411 = insertelement <16 x float> poison, float %395, i64 0, !dbg !72
  %412 = insertelement <16 x float> %411, float %396, i64 1, !dbg !72
  %413 = insertelement <16 x float> %412, float %397, i64 2, !dbg !72
  %414 = insertelement <16 x float> %413, float %398, i64 3, !dbg !72
  %415 = insertelement <16 x float> %414, float %399, i64 4, !dbg !72
  %416 = insertelement <16 x float> %415, float %400, i64 5, !dbg !72
  %417 = insertelement <16 x float> %416, float %401, i64 6, !dbg !72
  %418 = insertelement <16 x float> %417, float %402, i64 7, !dbg !72
  %419 = insertelement <16 x float> %418, float %403, i64 8, !dbg !72
  %420 = insertelement <16 x float> %419, float %404, i64 9, !dbg !72
  %421 = insertelement <16 x float> %420, float %405, i64 10, !dbg !72
  %422 = insertelement <16 x float> %421, float %406, i64 11, !dbg !72
  %423 = insertelement <16 x float> %422, float %407, i64 12, !dbg !72
  %424 = insertelement <16 x float> %423, float %408, i64 13, !dbg !72
  %425 = insertelement <16 x float> %424, float %409, i64 14, !dbg !72
  %426 = insertelement <16 x float> %425, float %410, i64 15, !dbg !72
  %427 = fadd <16 x float> %150, %426, !dbg !72
  %428 = fsub <16 x float> %344, %427, !dbg !73
  %429 = fsub <16 x float> %344, %427, !dbg !73
  %430 = fsub <16 x float> %344, %427, !dbg !73
  %431 = fsub <16 x float> %344, %427, !dbg !73
  %432 = fsub <16 x float> %344, %427, !dbg !73
  %433 = fsub <16 x float> %344, %427, !dbg !73
  %434 = fsub <16 x float> %344, %427, !dbg !73
  %435 = fsub <16 x float> %344, %427, !dbg !73
  %436 = fsub <16 x float> %344, %427, !dbg !73
  %437 = fsub <16 x float> %344, %427, !dbg !73
  %438 = fsub <16 x float> %344, %427, !dbg !73
  %439 = fsub <16 x float> %344, %427, !dbg !73
  %440 = fsub <16 x float> %344, %427, !dbg !73
  %441 = fsub <16 x float> %344, %427, !dbg !73
  %442 = fsub <16 x float> %344, %427, !dbg !73
  %443 = fsub <16 x float> %344, %427, !dbg !73
  %444 = fmul <16 x float> %347, %428, !dbg !74
  %445 = extractelement <16 x float> %444, i64 0, !dbg !74
  %446 = fmul <16 x float> %349, %429, !dbg !74
  %447 = extractelement <16 x float> %446, i64 1, !dbg !74
  %448 = fmul <16 x float> %351, %430, !dbg !74
  %449 = extractelement <16 x float> %448, i64 2, !dbg !74
  %450 = fmul <16 x float> %353, %431, !dbg !74
  %451 = extractelement <16 x float> %450, i64 3, !dbg !74
  %452 = fmul <16 x float> %355, %432, !dbg !74
  %453 = extractelement <16 x float> %452, i64 4, !dbg !74
  %454 = fmul <16 x float> %357, %433, !dbg !74
  %455 = extractelement <16 x float> %454, i64 5, !dbg !74
  %456 = fmul <16 x float> %359, %434, !dbg !74
  %457 = extractelement <16 x float> %456, i64 6, !dbg !74
  %458 = fmul <16 x float> %361, %435, !dbg !74
  %459 = extractelement <16 x float> %458, i64 7, !dbg !74
  %460 = fmul <16 x float> %363, %436, !dbg !74
  %461 = extractelement <16 x float> %460, i64 8, !dbg !74
  %462 = fmul <16 x float> %365, %437, !dbg !74
  %463 = extractelement <16 x float> %462, i64 9, !dbg !74
  %464 = fmul <16 x float> %367, %438, !dbg !74
  %465 = extractelement <16 x float> %464, i64 10, !dbg !74
  %466 = fmul <16 x float> %369, %439, !dbg !74
  %467 = extractelement <16 x float> %466, i64 11, !dbg !74
  %468 = fmul <16 x float> %371, %440, !dbg !74
  %469 = extractelement <16 x float> %468, i64 12, !dbg !74
  %470 = fmul <16 x float> %373, %441, !dbg !74
  %471 = extractelement <16 x float> %470, i64 13, !dbg !74
  %472 = fmul <16 x float> %375, %442, !dbg !74
  %473 = extractelement <16 x float> %472, i64 14, !dbg !74
  %474 = fmul <16 x float> %377, %443, !dbg !74
  %475 = extractelement <16 x float> %474, i64 15, !dbg !74
  %476 = fadd float %134, %445, !dbg !75
  %477 = fadd float %135, %447, !dbg !75
  %478 = fadd float %136, %449, !dbg !75
  %479 = fadd float %137, %451, !dbg !75
  %480 = fadd float %138, %453, !dbg !75
  %481 = fadd float %139, %455, !dbg !75
  %482 = fadd float %140, %457, !dbg !75
  %483 = fadd float %141, %459, !dbg !75
  %484 = fadd float %142, %461, !dbg !75
  %485 = fadd float %143, %463, !dbg !75
  %486 = fadd float %144, %465, !dbg !75
  %487 = fadd float %145, %467, !dbg !75
  %488 = fadd float %146, %469, !dbg !75
  %489 = fadd float %147, %471, !dbg !75
  %490 = fadd float %148, %473, !dbg !75
  %491 = fadd float %149, %475, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %117, %346
  %492 = phi float [ %476, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %493 = phi float [ %477, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %494 = phi float [ %478, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %495 = phi float [ %479, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %496 = phi float [ %480, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %497 = phi float [ %481, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %498 = phi float [ %482, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %499 = phi float [ %483, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %500 = phi float [ %484, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %501 = phi float [ %485, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %502 = phi float [ %486, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %503 = phi float [ %487, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %504 = phi float [ %488, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %505 = phi float [ %489, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %506 = phi float [ %490, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %507 = phi float [ %491, %346 ], [ 0.000000e+00, %117 ], !dbg !68
  %508 = phi float [ %379, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %509 = phi float [ %380, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %510 = phi float [ %381, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %511 = phi float [ %382, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %512 = phi float [ %383, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %513 = phi float [ %384, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %514 = phi float [ %385, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %515 = phi float [ %386, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %516 = phi float [ %387, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %517 = phi float [ %388, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %518 = phi float [ %389, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %519 = phi float [ %390, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %520 = phi float [ %391, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %521 = phi float [ %392, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %522 = phi float [ %393, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %523 = phi float [ %394, %346 ], [ 1.000000e+00, %117 ], !dbg !68
  %524 = phi <16 x float> [ %427, %346 ], [ %344, %117 ]
  %525 = select <16 x i1> %116, <16 x float> %524, <16 x float> %150, !dbg !39
  %526 = select i1 %24, float %492, float %134, !dbg !76
  %527 = select i1 %24, float %493, float %135, !dbg !76
  %528 = select i1 %24, float %494, float %136, !dbg !76
  %529 = select i1 %24, float %495, float %137, !dbg !76
  %530 = select i1 %24, float %496, float %138, !dbg !76
  %531 = select i1 %24, float %497, float %139, !dbg !76
  %532 = select i1 %24, float %498, float %140, !dbg !76
  %533 = select i1 %24, float %499, float %141, !dbg !76
  %534 = select i1 %24, float %500, float %142, !dbg !76
  %535 = select i1 %24, float %501, float %143, !dbg !76
  %536 = select i1 %24, float %502, float %144, !dbg !76
  %537 = select i1 %24, float %503, float %145, !dbg !76
  %538 = select i1 %24, float %504, float %146, !dbg !76
  %539 = select i1 %24, float %505, float %147, !dbg !76
  %540 = select i1 %24, float %506, float %148, !dbg !76
  %541 = select i1 %24, float %507, float %149, !dbg !76
  %542 = select i1 %24, float %508, float %118, !dbg !77
  %543 = select i1 %24, float %509, float %119, !dbg !77
  %544 = select i1 %24, float %510, float %120, !dbg !77
  %545 = select i1 %24, float %511, float %121, !dbg !77
  %546 = select i1 %24, float %512, float %122, !dbg !77
  %547 = select i1 %24, float %513, float %123, !dbg !77
  %548 = select i1 %24, float %514, float %124, !dbg !77
  %549 = select i1 %24, float %515, float %125, !dbg !77
  %550 = select i1 %24, float %516, float %126, !dbg !77
  %551 = select i1 %24, float %517, float %127, !dbg !77
  %552 = select i1 %24, float %518, float %128, !dbg !77
  %553 = select i1 %24, float %519, float %129, !dbg !77
  %554 = select i1 %24, float %520, float %130, !dbg !77
  %555 = select i1 %24, float %521, float %131, !dbg !77
  %556 = select i1 %24, float %522, float %132, !dbg !77
  %557 = select i1 %24, float %523, float %133, !dbg !77
  %558 = sext i32 %159 to i64, !dbg !78
  %559 = getelementptr bfloat, ptr addrspace(1) %8, i64 %558, !dbg !78
  %560 = sext i32 %160 to i64, !dbg !78
  %561 = getelementptr bfloat, ptr addrspace(1) %8, i64 %560, !dbg !78
  %562 = extractelement <16 x float> %344, i64 0, !dbg !79
  %563 = fptrunc float %562 to bfloat, !dbg !79
  %564 = extractelement <16 x float> %344, i64 1, !dbg !79
  %565 = fptrunc float %564 to bfloat, !dbg !79
  %566 = extractelement <16 x float> %344, i64 2, !dbg !79
  %567 = fptrunc float %566 to bfloat, !dbg !79
  %568 = extractelement <16 x float> %344, i64 3, !dbg !79
  %569 = fptrunc float %568 to bfloat, !dbg !79
  %570 = extractelement <16 x float> %344, i64 4, !dbg !79
  %571 = fptrunc float %570 to bfloat, !dbg !79
  %572 = extractelement <16 x float> %344, i64 5, !dbg !79
  %573 = fptrunc float %572 to bfloat, !dbg !79
  %574 = extractelement <16 x float> %344, i64 6, !dbg !79
  %575 = fptrunc float %574 to bfloat, !dbg !79
  %576 = extractelement <16 x float> %344, i64 7, !dbg !79
  %577 = fptrunc float %576 to bfloat, !dbg !79
  %578 = extractelement <16 x float> %344, i64 8, !dbg !79
  %579 = fptrunc float %578 to bfloat, !dbg !79
  %580 = extractelement <16 x float> %344, i64 9, !dbg !79
  %581 = fptrunc float %580 to bfloat, !dbg !79
  %582 = extractelement <16 x float> %344, i64 10, !dbg !79
  %583 = fptrunc float %582 to bfloat, !dbg !79
  %584 = extractelement <16 x float> %344, i64 11, !dbg !79
  %585 = fptrunc float %584 to bfloat, !dbg !79
  %586 = extractelement <16 x float> %344, i64 12, !dbg !79
  %587 = fptrunc float %586 to bfloat, !dbg !79
  %588 = extractelement <16 x float> %344, i64 13, !dbg !79
  %589 = fptrunc float %588 to bfloat, !dbg !79
  %590 = extractelement <16 x float> %344, i64 14, !dbg !79
  %591 = fptrunc float %590 to bfloat, !dbg !79
  %592 = extractelement <16 x float> %344, i64 15, !dbg !79
  %593 = fptrunc float %592 to bfloat, !dbg !79
  %594 = insertelement <2 x bfloat> poison, bfloat %563, i64 0, !dbg !79
  %595 = insertelement <2 x bfloat> %594, bfloat %565, i64 1, !dbg !79
  %596 = bitcast <2 x bfloat> %595 to i32, !dbg !79
  %597 = insertelement <2 x bfloat> poison, bfloat %567, i64 0, !dbg !79
  %598 = insertelement <2 x bfloat> %597, bfloat %569, i64 1, !dbg !79
  %599 = bitcast <2 x bfloat> %598 to i32, !dbg !79
  %600 = insertelement <2 x bfloat> poison, bfloat %571, i64 0, !dbg !79
  %601 = insertelement <2 x bfloat> %600, bfloat %573, i64 1, !dbg !79
  %602 = bitcast <2 x bfloat> %601 to i32, !dbg !79
  %603 = insertelement <2 x bfloat> poison, bfloat %575, i64 0, !dbg !79
  %604 = insertelement <2 x bfloat> %603, bfloat %577, i64 1, !dbg !79
  %605 = bitcast <2 x bfloat> %604 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %596, i32 %599, i32 %602, i32 %605, ptr addrspace(1) %559, i1 %24) #5, !dbg !79
  %606 = insertelement <2 x bfloat> poison, bfloat %579, i64 0, !dbg !79
  %607 = insertelement <2 x bfloat> %606, bfloat %581, i64 1, !dbg !79
  %608 = bitcast <2 x bfloat> %607 to i32, !dbg !79
  %609 = insertelement <2 x bfloat> poison, bfloat %583, i64 0, !dbg !79
  %610 = insertelement <2 x bfloat> %609, bfloat %585, i64 1, !dbg !79
  %611 = bitcast <2 x bfloat> %610 to i32, !dbg !79
  %612 = insertelement <2 x bfloat> poison, bfloat %587, i64 0, !dbg !79
  %613 = insertelement <2 x bfloat> %612, bfloat %589, i64 1, !dbg !79
  %614 = bitcast <2 x bfloat> %613 to i32, !dbg !79
  %615 = insertelement <2 x bfloat> poison, bfloat %591, i64 0, !dbg !79
  %616 = insertelement <2 x bfloat> %615, bfloat %593, i64 1, !dbg !79
  %617 = bitcast <2 x bfloat> %616 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %608, i32 %611, i32 %614, i32 %617, ptr addrspace(1) %561, i1 %24) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %618 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %618, label %117, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %619 = lshr i32 %19, 5, !dbg !11
  %620 = and i32 %19, 1, !dbg !11
  %621 = or disjoint i32 %18, %620, !dbg !12
  %622 = icmp slt i32 %621, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %623 = extractelement <16 x float> %525, i64 0, !dbg !82
  %624 = extractelement <16 x float> %525, i64 1, !dbg !82
  %625 = fsub float %624, %623, !dbg !82
  %626 = fadd float %542, %543, !dbg !84
  %627 = fcmp oeq float %626, 0.000000e+00, !dbg !85
  %628 = tail call float @llvm.nvvm.div.full(float %543, float %626), !dbg !86
  %629 = select i1 %627, float 0.000000e+00, float %628, !dbg !87
  %630 = fmul float %625, %629, !dbg !88
  %631 = fadd float %623, %630, !dbg !89
  %632 = fadd float %526, %527, !dbg !90
  %633 = fmul float %625, %625, !dbg !91
  %634 = fmul float %633, %542, !dbg !92
  %635 = fmul float %634, %629, !dbg !93
  %636 = fadd float %632, %635, !dbg !94
  %637 = extractelement <16 x float> %525, i64 2, !dbg !82
  %638 = fsub float %637, %631, !dbg !82
  %639 = fadd float %544, %626, !dbg !84
  %640 = fcmp oeq float %639, 0.000000e+00, !dbg !85
  %641 = tail call float @llvm.nvvm.div.full(float %544, float %639), !dbg !86
  %642 = select i1 %640, float 0.000000e+00, float %641, !dbg !87
  %643 = fmul float %642, %638, !dbg !88
  %644 = fadd float %631, %643, !dbg !89
  %645 = fadd float %528, %636, !dbg !90
  %646 = fmul float %638, %638, !dbg !91
  %647 = fmul float %626, %646, !dbg !92
  %648 = fmul float %642, %647, !dbg !93
  %649 = fadd float %645, %648, !dbg !94
  %650 = extractelement <16 x float> %525, i64 3, !dbg !82
  %651 = fsub float %650, %644, !dbg !82
  %652 = fadd float %545, %639, !dbg !84
  %653 = fcmp oeq float %652, 0.000000e+00, !dbg !85
  %654 = tail call float @llvm.nvvm.div.full(float %545, float %652), !dbg !86
  %655 = select i1 %653, float 0.000000e+00, float %654, !dbg !87
  %656 = fmul float %655, %651, !dbg !88
  %657 = fadd float %644, %656, !dbg !89
  %658 = fadd float %529, %649, !dbg !90
  %659 = fmul float %651, %651, !dbg !91
  %660 = fmul float %639, %659, !dbg !92
  %661 = fmul float %655, %660, !dbg !93
  %662 = fadd float %658, %661, !dbg !94
  %663 = extractelement <16 x float> %525, i64 4, !dbg !82
  %664 = fsub float %663, %657, !dbg !82
  %665 = fadd float %546, %652, !dbg !84
  %666 = fcmp oeq float %665, 0.000000e+00, !dbg !85
  %667 = tail call float @llvm.nvvm.div.full(float %546, float %665), !dbg !86
  %668 = select i1 %666, float 0.000000e+00, float %667, !dbg !87
  %669 = fmul float %668, %664, !dbg !88
  %670 = fadd float %657, %669, !dbg !89
  %671 = fadd float %530, %662, !dbg !90
  %672 = fmul float %664, %664, !dbg !91
  %673 = fmul float %652, %672, !dbg !92
  %674 = fmul float %668, %673, !dbg !93
  %675 = fadd float %671, %674, !dbg !94
  %676 = extractelement <16 x float> %525, i64 5, !dbg !82
  %677 = fsub float %676, %670, !dbg !82
  %678 = fadd float %547, %665, !dbg !84
  %679 = fcmp oeq float %678, 0.000000e+00, !dbg !85
  %680 = tail call float @llvm.nvvm.div.full(float %547, float %678), !dbg !86
  %681 = select i1 %679, float 0.000000e+00, float %680, !dbg !87
  %682 = fmul float %681, %677, !dbg !88
  %683 = fadd float %670, %682, !dbg !89
  %684 = fadd float %531, %675, !dbg !90
  %685 = fmul float %677, %677, !dbg !91
  %686 = fmul float %665, %685, !dbg !92
  %687 = fmul float %681, %686, !dbg !93
  %688 = fadd float %684, %687, !dbg !94
  %689 = extractelement <16 x float> %525, i64 6, !dbg !82
  %690 = fsub float %689, %683, !dbg !82
  %691 = fadd float %548, %678, !dbg !84
  %692 = fcmp oeq float %691, 0.000000e+00, !dbg !85
  %693 = tail call float @llvm.nvvm.div.full(float %548, float %691), !dbg !86
  %694 = select i1 %692, float 0.000000e+00, float %693, !dbg !87
  %695 = fmul float %694, %690, !dbg !88
  %696 = fadd float %683, %695, !dbg !89
  %697 = fadd float %532, %688, !dbg !90
  %698 = fmul float %690, %690, !dbg !91
  %699 = fmul float %678, %698, !dbg !92
  %700 = fmul float %694, %699, !dbg !93
  %701 = fadd float %697, %700, !dbg !94
  %702 = extractelement <16 x float> %525, i64 7, !dbg !82
  %703 = fsub float %702, %696, !dbg !82
  %704 = fadd float %549, %691, !dbg !84
  %705 = fcmp oeq float %704, 0.000000e+00, !dbg !85
  %706 = tail call float @llvm.nvvm.div.full(float %549, float %704), !dbg !86
  %707 = select i1 %705, float 0.000000e+00, float %706, !dbg !87
  %708 = fmul float %707, %703, !dbg !88
  %709 = fadd float %696, %708, !dbg !89
  %710 = fadd float %533, %701, !dbg !90
  %711 = fmul float %703, %703, !dbg !91
  %712 = fmul float %691, %711, !dbg !92
  %713 = fmul float %707, %712, !dbg !93
  %714 = fadd float %710, %713, !dbg !94
  %715 = extractelement <16 x float> %525, i64 8, !dbg !82
  %716 = extractelement <16 x float> %525, i64 9, !dbg !82
  %717 = fsub float %716, %715, !dbg !82
  %718 = fadd float %550, %551, !dbg !84
  %719 = fcmp oeq float %718, 0.000000e+00, !dbg !85
  %720 = tail call float @llvm.nvvm.div.full(float %551, float %718), !dbg !86
  %721 = select i1 %719, float 0.000000e+00, float %720, !dbg !87
  %722 = fmul float %717, %721, !dbg !88
  %723 = fadd float %715, %722, !dbg !89
  %724 = fadd float %534, %535, !dbg !90
  %725 = fmul float %717, %717, !dbg !91
  %726 = fmul float %725, %550, !dbg !92
  %727 = fmul float %726, %721, !dbg !93
  %728 = fadd float %724, %727, !dbg !94
  %729 = extractelement <16 x float> %525, i64 10, !dbg !82
  %730 = fsub float %729, %723, !dbg !82
  %731 = fadd float %552, %718, !dbg !84
  %732 = fcmp oeq float %731, 0.000000e+00, !dbg !85
  %733 = tail call float @llvm.nvvm.div.full(float %552, float %731), !dbg !86
  %734 = select i1 %732, float 0.000000e+00, float %733, !dbg !87
  %735 = fmul float %734, %730, !dbg !88
  %736 = fadd float %723, %735, !dbg !89
  %737 = fadd float %536, %728, !dbg !90
  %738 = fmul float %730, %730, !dbg !91
  %739 = fmul float %718, %738, !dbg !92
  %740 = fmul float %734, %739, !dbg !93
  %741 = fadd float %737, %740, !dbg !94
  %742 = extractelement <16 x float> %525, i64 11, !dbg !82
  %743 = fsub float %742, %736, !dbg !82
  %744 = fadd float %553, %731, !dbg !84
  %745 = fcmp oeq float %744, 0.000000e+00, !dbg !85
  %746 = tail call float @llvm.nvvm.div.full(float %553, float %744), !dbg !86
  %747 = select i1 %745, float 0.000000e+00, float %746, !dbg !87
  %748 = fmul float %747, %743, !dbg !88
  %749 = fadd float %736, %748, !dbg !89
  %750 = fadd float %537, %741, !dbg !90
  %751 = fmul float %743, %743, !dbg !91
  %752 = fmul float %731, %751, !dbg !92
  %753 = fmul float %747, %752, !dbg !93
  %754 = fadd float %750, %753, !dbg !94
  %755 = extractelement <16 x float> %525, i64 12, !dbg !82
  %756 = fsub float %755, %749, !dbg !82
  %757 = fadd float %554, %744, !dbg !84
  %758 = fcmp oeq float %757, 0.000000e+00, !dbg !85
  %759 = tail call float @llvm.nvvm.div.full(float %554, float %757), !dbg !86
  %760 = select i1 %758, float 0.000000e+00, float %759, !dbg !87
  %761 = fmul float %760, %756, !dbg !88
  %762 = fadd float %749, %761, !dbg !89
  %763 = fadd float %538, %754, !dbg !90
  %764 = fmul float %756, %756, !dbg !91
  %765 = fmul float %744, %764, !dbg !92
  %766 = fmul float %760, %765, !dbg !93
  %767 = fadd float %763, %766, !dbg !94
  %768 = extractelement <16 x float> %525, i64 13, !dbg !82
  %769 = fsub float %768, %762, !dbg !82
  %770 = fadd float %555, %757, !dbg !84
  %771 = fcmp oeq float %770, 0.000000e+00, !dbg !85
  %772 = tail call float @llvm.nvvm.div.full(float %555, float %770), !dbg !86
  %773 = select i1 %771, float 0.000000e+00, float %772, !dbg !87
  %774 = fmul float %773, %769, !dbg !88
  %775 = fadd float %762, %774, !dbg !89
  %776 = fadd float %539, %767, !dbg !90
  %777 = fmul float %769, %769, !dbg !91
  %778 = fmul float %757, %777, !dbg !92
  %779 = fmul float %773, %778, !dbg !93
  %780 = fadd float %776, %779, !dbg !94
  %781 = extractelement <16 x float> %525, i64 14, !dbg !82
  %782 = fsub float %781, %775, !dbg !82
  %783 = fadd float %556, %770, !dbg !84
  %784 = fcmp oeq float %783, 0.000000e+00, !dbg !85
  %785 = tail call float @llvm.nvvm.div.full(float %556, float %783), !dbg !86
  %786 = select i1 %784, float 0.000000e+00, float %785, !dbg !87
  %787 = fmul float %786, %782, !dbg !88
  %788 = fadd float %775, %787, !dbg !89
  %789 = fadd float %540, %780, !dbg !90
  %790 = fmul float %782, %782, !dbg !91
  %791 = fmul float %770, %790, !dbg !92
  %792 = fmul float %786, %791, !dbg !93
  %793 = fadd float %789, %792, !dbg !94
  %794 = extractelement <16 x float> %525, i64 15, !dbg !82
  %795 = fsub float %794, %788, !dbg !82
  %796 = fadd float %557, %783, !dbg !84
  %797 = fcmp oeq float %796, 0.000000e+00, !dbg !85
  %798 = tail call float @llvm.nvvm.div.full(float %557, float %796), !dbg !86
  %799 = select i1 %797, float 0.000000e+00, float %798, !dbg !87
  %800 = fmul float %799, %795, !dbg !88
  %801 = fadd float %788, %800, !dbg !89
  %802 = fadd float %541, %793, !dbg !90
  %803 = fmul float %795, %795, !dbg !91
  %804 = fmul float %783, %803, !dbg !92
  %805 = fmul float %799, %804, !dbg !93
  %806 = fadd float %802, %805, !dbg !94
  %807 = bitcast float %709 to i32, !dbg !80
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 16, i32 31), !dbg !80
  %809 = bitcast i32 %808 to float, !dbg !80
  %810 = bitcast float %714 to i32, !dbg !80
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 16, i32 31), !dbg !80
  %812 = bitcast i32 %811 to float, !dbg !80
  %813 = bitcast float %704 to i32, !dbg !80
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 16, i32 31), !dbg !80
  %815 = bitcast i32 %814 to float, !dbg !80
  %816 = fsub float %809, %709, !dbg !82
  %817 = fadd float %704, %815, !dbg !84
  %818 = fcmp oeq float %817, 0.000000e+00, !dbg !85
  %819 = tail call float @llvm.nvvm.div.full(float %815, float %817), !dbg !86
  %820 = select i1 %818, float 0.000000e+00, float %819, !dbg !87
  %821 = fmul float %820, %816, !dbg !88
  %822 = fadd float %709, %821, !dbg !89
  %823 = fadd float %714, %812, !dbg !90
  %824 = fmul float %816, %816, !dbg !91
  %825 = fmul float %704, %824, !dbg !92
  %826 = fmul float %820, %825, !dbg !93
  %827 = fadd float %823, %826, !dbg !94
  %828 = bitcast float %822 to i32, !dbg !80
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 8, i32 31), !dbg !80
  %830 = bitcast i32 %829 to float, !dbg !80
  %831 = bitcast float %827 to i32, !dbg !80
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 8, i32 31), !dbg !80
  %833 = bitcast i32 %832 to float, !dbg !80
  %834 = bitcast float %817 to i32, !dbg !80
  %835 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %834, i32 8, i32 31), !dbg !80
  %836 = bitcast i32 %835 to float, !dbg !80
  %837 = fsub float %830, %822, !dbg !82
  %838 = fadd float %817, %836, !dbg !84
  %839 = fcmp oeq float %838, 0.000000e+00, !dbg !85
  %840 = tail call float @llvm.nvvm.div.full(float %836, float %838), !dbg !86
  %841 = select i1 %839, float 0.000000e+00, float %840, !dbg !87
  %842 = fmul float %841, %837, !dbg !88
  %843 = fadd float %822, %842, !dbg !89
  %844 = fadd float %827, %833, !dbg !90
  %845 = fmul float %837, %837, !dbg !91
  %846 = fmul float %817, %845, !dbg !92
  %847 = fmul float %841, %846, !dbg !93
  %848 = fadd float %844, %847, !dbg !94
  %849 = bitcast float %843 to i32, !dbg !80
  %850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %849, i32 4, i32 31), !dbg !80
  %851 = bitcast i32 %850 to float, !dbg !80
  %852 = bitcast float %848 to i32, !dbg !80
  %853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 4, i32 31), !dbg !80
  %854 = bitcast i32 %853 to float, !dbg !80
  %855 = bitcast float %838 to i32, !dbg !80
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 4, i32 31), !dbg !80
  %857 = bitcast i32 %856 to float, !dbg !80
  %858 = fsub float %851, %843, !dbg !82
  %859 = fadd float %838, %857, !dbg !84
  %860 = fcmp oeq float %859, 0.000000e+00, !dbg !85
  %861 = tail call float @llvm.nvvm.div.full(float %857, float %859), !dbg !86
  %862 = select i1 %860, float 0.000000e+00, float %861, !dbg !87
  %863 = fmul float %858, %862, !dbg !88
  %864 = fadd float %843, %863, !dbg !89
  %865 = fadd float %848, %854, !dbg !90
  %866 = fmul float %858, %858, !dbg !91
  %867 = fmul float %838, %866, !dbg !92
  %868 = fmul float %862, %867, !dbg !93
  %869 = fadd float %865, %868, !dbg !94
  %870 = bitcast float %864 to i32, !dbg !80
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 2, i32 31), !dbg !80
  %872 = bitcast i32 %871 to float, !dbg !80
  %873 = bitcast float %869 to i32, !dbg !80
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 2, i32 31), !dbg !80
  %875 = bitcast i32 %874 to float, !dbg !80
  %876 = bitcast float %859 to i32, !dbg !80
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 2, i32 31), !dbg !80
  %878 = bitcast i32 %877 to float, !dbg !80
  %879 = fsub float %872, %864, !dbg !82
  %880 = fadd float %859, %878, !dbg !84
  %881 = fcmp oeq float %880, 0.000000e+00, !dbg !85
  %882 = tail call float @llvm.nvvm.div.full(float %878, float %880), !dbg !86
  %883 = select i1 %881, float 0.000000e+00, float %882, !dbg !87
  %884 = fmul float %879, %883, !dbg !88
  %885 = fadd float %864, %884, !dbg !89
  %886 = fadd float %869, %875, !dbg !90
  %887 = fmul float %879, %879, !dbg !91
  %888 = fmul float %859, %887, !dbg !92
  %889 = fmul float %883, %888, !dbg !93
  %890 = fadd float %886, %889, !dbg !94
  %891 = bitcast float %885 to i32, !dbg !80
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 1, i32 31), !dbg !80
  %893 = bitcast i32 %892 to float, !dbg !80
  %894 = bitcast float %890 to i32, !dbg !80
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 1, i32 31), !dbg !80
  %896 = bitcast i32 %895 to float, !dbg !80
  %897 = bitcast float %880 to i32, !dbg !80
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 1, i32 31), !dbg !80
  %899 = bitcast i32 %898 to float, !dbg !80
  %900 = fsub float %893, %885, !dbg !82
  %901 = fadd float %880, %899, !dbg !84
  %902 = fcmp oeq float %901, 0.000000e+00, !dbg !85
  %903 = tail call float @llvm.nvvm.div.full(float %899, float %901), !dbg !86
  %904 = select i1 %902, float 0.000000e+00, float %903, !dbg !87
  %905 = fmul float %900, %904, !dbg !88
  %906 = fadd float %885, %905, !dbg !89
  %907 = fadd float %890, %896, !dbg !90
  %908 = fmul float %900, %900, !dbg !91
  %909 = fmul float %880, %908, !dbg !92
  %910 = fmul float %904, %909, !dbg !93
  %911 = fadd float %907, %910, !dbg !94
  %912 = bitcast float %801 to i32, !dbg !80
  %913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 16, i32 31), !dbg !80
  %914 = bitcast i32 %913 to float, !dbg !80
  %915 = bitcast float %806 to i32, !dbg !80
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 16, i32 31), !dbg !80
  %917 = bitcast i32 %916 to float, !dbg !80
  %918 = bitcast float %796 to i32, !dbg !80
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 16, i32 31), !dbg !80
  %920 = bitcast i32 %919 to float, !dbg !80
  %921 = fsub float %914, %801, !dbg !82
  %922 = fadd float %796, %920, !dbg !84
  %923 = fcmp oeq float %922, 0.000000e+00, !dbg !85
  %924 = tail call float @llvm.nvvm.div.full(float %920, float %922), !dbg !86
  %925 = select i1 %923, float 0.000000e+00, float %924, !dbg !87
  %926 = fmul float %921, %925, !dbg !88
  %927 = fadd float %801, %926, !dbg !89
  %928 = fadd float %806, %917, !dbg !90
  %929 = fmul float %921, %921, !dbg !91
  %930 = fmul float %796, %929, !dbg !92
  %931 = fmul float %930, %925, !dbg !93
  %932 = fadd float %928, %931, !dbg !94
  %933 = bitcast float %927 to i32, !dbg !80
  %934 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %933, i32 8, i32 31), !dbg !80
  %935 = bitcast i32 %934 to float, !dbg !80
  %936 = bitcast float %932 to i32, !dbg !80
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 8, i32 31), !dbg !80
  %938 = bitcast i32 %937 to float, !dbg !80
  %939 = bitcast float %922 to i32, !dbg !80
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 8, i32 31), !dbg !80
  %941 = bitcast i32 %940 to float, !dbg !80
  %942 = fsub float %935, %927, !dbg !82
  %943 = fadd float %922, %941, !dbg !84
  %944 = fcmp oeq float %943, 0.000000e+00, !dbg !85
  %945 = tail call float @llvm.nvvm.div.full(float %941, float %943), !dbg !86
  %946 = select i1 %944, float 0.000000e+00, float %945, !dbg !87
  %947 = fmul float %942, %946, !dbg !88
  %948 = fadd float %927, %947, !dbg !89
  %949 = fadd float %932, %938, !dbg !90
  %950 = fmul float %942, %942, !dbg !91
  %951 = fmul float %922, %950, !dbg !92
  %952 = fmul float %946, %951, !dbg !93
  %953 = fadd float %949, %952, !dbg !94
  %954 = bitcast float %948 to i32, !dbg !80
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 4, i32 31), !dbg !80
  %956 = bitcast i32 %955 to float, !dbg !80
  %957 = bitcast float %953 to i32, !dbg !80
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 4, i32 31), !dbg !80
  %959 = bitcast i32 %958 to float, !dbg !80
  %960 = bitcast float %943 to i32, !dbg !80
  %961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %960, i32 4, i32 31), !dbg !80
  %962 = bitcast i32 %961 to float, !dbg !80
  %963 = fsub float %956, %948, !dbg !82
  %964 = fadd float %943, %962, !dbg !84
  %965 = fcmp oeq float %964, 0.000000e+00, !dbg !85
  %966 = tail call float @llvm.nvvm.div.full(float %962, float %964), !dbg !86
  %967 = select i1 %965, float 0.000000e+00, float %966, !dbg !87
  %968 = fmul float %963, %967, !dbg !88
  %969 = fadd float %948, %968, !dbg !89
  %970 = fadd float %953, %959, !dbg !90
  %971 = fmul float %963, %963, !dbg !91
  %972 = fmul float %943, %971, !dbg !92
  %973 = fmul float %967, %972, !dbg !93
  %974 = fadd float %970, %973, !dbg !94
  %975 = bitcast float %969 to i32, !dbg !80
  %976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %975, i32 2, i32 31), !dbg !80
  %977 = bitcast i32 %976 to float, !dbg !80
  %978 = bitcast float %974 to i32, !dbg !80
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 2, i32 31), !dbg !80
  %980 = bitcast i32 %979 to float, !dbg !80
  %981 = bitcast float %964 to i32, !dbg !80
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 2, i32 31), !dbg !80
  %983 = bitcast i32 %982 to float, !dbg !80
  %984 = fsub float %977, %969, !dbg !82
  %985 = fadd float %964, %983, !dbg !84
  %986 = fcmp oeq float %985, 0.000000e+00, !dbg !85
  %987 = tail call float @llvm.nvvm.div.full(float %983, float %985), !dbg !86
  %988 = select i1 %986, float 0.000000e+00, float %987, !dbg !87
  %989 = fmul float %984, %988, !dbg !88
  %990 = fadd float %969, %989, !dbg !89
  %991 = fadd float %974, %980, !dbg !90
  %992 = fmul float %984, %984, !dbg !91
  %993 = fmul float %964, %992, !dbg !92
  %994 = fmul float %988, %993, !dbg !93
  %995 = fadd float %991, %994, !dbg !94
  %996 = bitcast float %990 to i32, !dbg !80
  %997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %996, i32 1, i32 31), !dbg !80
  %998 = bitcast i32 %997 to float, !dbg !80
  %999 = bitcast float %995 to i32, !dbg !80
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 1, i32 31), !dbg !80
  %1001 = bitcast i32 %1000 to float, !dbg !80
  %1002 = bitcast float %985 to i32, !dbg !80
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 1, i32 31), !dbg !80
  %1004 = bitcast i32 %1003 to float, !dbg !80
  %1005 = fsub float %998, %990, !dbg !82
  %1006 = fadd float %985, %1004, !dbg !84
  %1007 = fcmp oeq float %1006, 0.000000e+00, !dbg !85
  %1008 = tail call float @llvm.nvvm.div.full(float %1004, float %1006), !dbg !86
  %1009 = select i1 %1007, float 0.000000e+00, float %1008, !dbg !87
  %1010 = fmul float %1005, %1009, !dbg !88
  %1011 = fadd float %990, %1010, !dbg !89
  %1012 = fadd float %995, %1001, !dbg !90
  %1013 = fmul float %1005, %1005, !dbg !91
  %1014 = fmul float %985, %1013, !dbg !92
  %1015 = fmul float %1009, %1014, !dbg !93
  %1016 = fadd float %1012, %1015, !dbg !94
  %1017 = and i32 %619, 3, !dbg !80
  %1018 = icmp eq i32 %21, 0, !dbg !80
  %1019 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1017, !dbg !80
  %1020 = bitcast float %906 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1019, <1 x i32> %1020, i1 %1018) #5, !dbg !80
  %1021 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1017, !dbg !80
  %1022 = bitcast float %911 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1022, i1 %1018) #5, !dbg !80
  %1023 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1017, !dbg !80
  %1024 = bitcast float %901 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1023, <1 x i32> %1024, i1 %1018) #5, !dbg !80
  %1025 = or disjoint i32 %1017, 4, !dbg !80
  %1026 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1025, !dbg !80
  %1027 = bitcast float %1011 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1027, i1 %1018) #5, !dbg !80
  %1028 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %1025, !dbg !80
  %1029 = bitcast float %1016 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1028, <1 x i32> %1029, i1 %1018) #5, !dbg !80
  %1030 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1025, !dbg !80
  %1031 = bitcast float %1006 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1030, <1 x i32> %1031, i1 %1018) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1032 = icmp slt i32 %19, 8, !dbg !80
  %1033 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1034 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1033, i1 %1032) #5, !dbg !80
  %1035 = bitcast i32 %1034 to float, !dbg !80
  %1036 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !80
  %1037 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1036, i1 %1032) #5, !dbg !80
  %1038 = bitcast i32 %1037 to float, !dbg !80
  %1039 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !80
  %1040 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1039, i1 %1032) #5, !dbg !80
  %1041 = bitcast i32 %1040 to float, !dbg !80
  %1042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1034, i32 2, i32 31), !dbg !80
  %1043 = bitcast i32 %1042 to float, !dbg !80
  %1044 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1037, i32 2, i32 31), !dbg !80
  %1045 = bitcast i32 %1044 to float, !dbg !80
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1040, i32 2, i32 31), !dbg !80
  %1047 = bitcast i32 %1046 to float, !dbg !80
  %1048 = fsub float %1043, %1035, !dbg !82
  %1049 = fadd float %1041, %1047, !dbg !84
  %1050 = fcmp oeq float %1049, 0.000000e+00, !dbg !85
  %1051 = tail call float @llvm.nvvm.div.full(float %1047, float %1049), !dbg !86
  %1052 = select i1 %1050, float 0.000000e+00, float %1051, !dbg !87
  %1053 = fmul float %1048, %1052, !dbg !88
  %1054 = fadd float %1053, %1035, !dbg !89
  %1055 = fadd float %1038, %1045, !dbg !90
  %1056 = fmul float %1048, %1048, !dbg !91
  %1057 = fmul float %1056, %1041, !dbg !92
  %1058 = fmul float %1057, %1052, !dbg !93
  %1059 = fadd float %1055, %1058, !dbg !94
  %1060 = bitcast float %1054 to i32, !dbg !80
  %1061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1060, i32 1, i32 31), !dbg !80
  %1062 = bitcast i32 %1061 to float, !dbg !80
  %1063 = bitcast float %1059 to i32, !dbg !80
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 1, i32 31), !dbg !80
  %1065 = bitcast i32 %1064 to float, !dbg !80
  %1066 = bitcast float %1049 to i32, !dbg !80
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 1, i32 31), !dbg !80
  %1068 = bitcast i32 %1067 to float, !dbg !80
  %1069 = fsub float %1062, %1054, !dbg !82
  %1070 = fadd float %1049, %1068, !dbg !84
  %1071 = fcmp oeq float %1070, 0.000000e+00, !dbg !85
  %1072 = tail call float @llvm.nvvm.div.full(float %1068, float %1070), !dbg !86
  %1073 = select i1 %1071, float 0.000000e+00, float %1072, !dbg !87
  %1074 = fmul float %1069, %1073, !dbg !88
  %1075 = fadd float %1054, %1074, !dbg !89
  %1076 = fadd float %1059, %1065, !dbg !90
  %1077 = fmul float %1069, %1069, !dbg !91
  %1078 = fmul float %1049, %1077, !dbg !92
  %1079 = fmul float %1073, %1078, !dbg !93
  %1080 = fadd float %1076, %1079, !dbg !94
  %1081 = and i32 %19, 3, !dbg !80
  %1082 = icmp eq i32 %1081, 0, !dbg !80
  %1083 = and i1 %1032, %1082, !dbg !80
  %1084 = bitcast float %1075 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1084, i1 %1083) #5, !dbg !80
  %1085 = bitcast float %1080 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1036, <1 x i32> %1085, i1 %1083) #5, !dbg !80
  %1086 = bitcast float %1070 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1039, <1 x i32> %1086, i1 %1083) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1087 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1088 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !80
  %1089 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %1090 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !80
  %1091 = tail call float @llvm.nvvm.div.full(float %1089, float 3.072000e+03), !dbg !95
  %1092 = tail call float @llvm.nvvm.div.full(float %1090, float 3.072000e+03), !dbg !95
  %1093 = fadd float %1091, 0x3EB0C6F7A0000000, !dbg !96
  %1094 = fadd float %1092, 0x3EB0C6F7A0000000, !dbg !96
  %1095 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1096 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1097 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1098 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1099 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i143 = icmp eq i32 %1102, 0, !dbg !97
  br i1 %.not.i143, label %1105, label %1103, !dbg !97

1103:                                             ; preds = %__nv_rsqrtf.exit
  %1104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1093), !dbg !97
  br label %__nv_rsqrtf.exit145, !dbg !97

1105:                                             ; preds = %__nv_rsqrtf.exit
  %1106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1093), !dbg !97
  br label %__nv_rsqrtf.exit145, !dbg !97

__nv_rsqrtf.exit145:                              ; preds = %1103, %1105
  %.0.i144 = phi float [ %1104, %1103 ], [ %1106, %1105 ], !dbg !97
  %1107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i167 = icmp eq i32 %1114, 0, !dbg !97
  br i1 %.not.i167, label %1117, label %1115, !dbg !97

1115:                                             ; preds = %__nv_rsqrtf.exit145
  %1116 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1094), !dbg !97
  br label %__nv_rsqrtf.exit169, !dbg !97

1117:                                             ; preds = %__nv_rsqrtf.exit145
  %1118 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1094), !dbg !97
  br label %__nv_rsqrtf.exit169, !dbg !97

__nv_rsqrtf.exit169:                              ; preds = %1115, %1117
  %.0.i168 = phi float [ %1116, %1115 ], [ %1118, %1117 ], !dbg !97
  %invariant.gep174 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !98
  %1119 = lshr i32 %28, 7
  %1120 = and i32 %1119, 8
  %1121 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1120
  %1122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1121, i32 %91
  %1123 = getelementptr bfloat, ptr addrspace(3) %1121, i32 %95
  %1124 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !99
  %1125 = shufflevector <2 x i1> %1124, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !99
  %1126 = insertelement <2 x float> poison, float %.0.i168, i64 0, !dbg !100
  %1127 = shufflevector <2 x float> %1126, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %1128 = insertelement <2 x float> poison, float %1088, i64 0, !dbg !101
  %1129 = shufflevector <2 x float> %1128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !101
  %1130 = insertelement <16 x float> poison, float %.0.i144, i64 0, !dbg !100
  %1131 = insertelement <16 x float> %1130, float %.0.i168, i64 1, !dbg !100
  %1132 = shufflevector <16 x float> %1131, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !100
  %1133 = insertelement <16 x float> poison, float %1087, i64 0, !dbg !101
  %1134 = insertelement <16 x float> %1133, float %1088, i64 1, !dbg !101
  %1135 = shufflevector <16 x float> %1134, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0>, !dbg !101
  %1136 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !102
  %1137 = shufflevector <8 x i1> %1136, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !102
  %1138 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !102
  %1139 = shufflevector <4 x i1> %1138, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !102
  %invariant.op = or i32 %26, 12292, !dbg !98
  br label %1140, !dbg !98

1140:                                             ; preds = %__nv_rsqrtf.exit169, %1140
  %indvars.iv255 = phi i64 [ 0, %__nv_rsqrtf.exit169 ], [ %indvars.iv.next256, %1140 ]
  %1141 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit169 ], [ %1327, %1140 ]
  %1142 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit169 ], [ %1328, %1140 ]
  %1143 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit169 ], [ %1334, %1140 ]
  %1144 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit169 ], [ %1335, %1140 ]
  %1145 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit169 ], [ %1330, %1140 ]
  %1146 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit169 ], [ %1329, %1140 ]
  %1147 = or disjoint i64 %indvars.iv255, %112, !dbg !103
  %1148 = or disjoint i64 %indvars.iv255, %111, !dbg !103
  %1149 = trunc nuw nsw i64 %indvars.iv255 to i32, !dbg !104
  %1150 = add i32 %87, %1149, !dbg !104
  %1151 = add i32 %89, %1149, !dbg !104
  %1152 = trunc nuw nsw i64 %1147 to i32, !dbg !104
  %1153 = add i32 %71, %1152, !dbg !104
  %1154 = add i32 %72, %1152, !dbg !104
  %1155 = sext i32 %1150 to i64, !dbg !105
  %1156 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1155, !dbg !105
  %1157 = sext i32 %1151 to i64, !dbg !105
  %1158 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1157, !dbg !105
  %1159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1156, i1 %23) #5, !dbg !106
  %1160 = extractvalue { i32, i32, i32, i32 } %1159, 0, !dbg !106
  %1161 = extractvalue { i32, i32, i32, i32 } %1159, 1, !dbg !106
  %1162 = extractvalue { i32, i32, i32, i32 } %1159, 2, !dbg !106
  %1163 = extractvalue { i32, i32, i32, i32 } %1159, 3, !dbg !106
  %1164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1158, i1 %23) #5, !dbg !106
  %1165 = extractvalue { i32, i32, i32, i32 } %1164, 0, !dbg !106
  %1166 = extractvalue { i32, i32, i32, i32 } %1164, 1, !dbg !106
  %1167 = extractvalue { i32, i32, i32, i32 } %1164, 2, !dbg !106
  %1168 = extractvalue { i32, i32, i32, i32 } %1164, 3, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1122, i32 %1160, i32 %1161, i32 %1162, i32 %1163, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1123, i32 %1165, i32 %1166, i32 %1167, i32 %1168, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1169 = or disjoint i64 %1147, 12288, !dbg !107
  %.reass.reass.reass = or i32 %1149, %invariant.op
  %1170 = getelementptr float, ptr addrspace(1) %1, i64 %1169, !dbg !108
  %1171 = zext nneg i32 %.reass.reass.reass to i64, !dbg !108
  %1172 = getelementptr float, ptr addrspace(1) %1, i64 %1171, !dbg !108
  %1173 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1169, !dbg !109
  %1174 = add nuw nsw i64 %1147, 9216, !dbg !110
  %1175 = getelementptr float, ptr addrspace(1) %1, i64 %1174, !dbg !111
  %gep175 = getelementptr float, ptr addrspace(1) %invariant.gep174, i64 %1148, !dbg !111
  %1176 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1174, !dbg !112
  %1177 = fcmp uno <16 x float> %1144, zeroinitializer, !dbg !113
  %1178 = fcmp uno float %1141, 0.000000e+00, !dbg !115
  %1179 = fcmp uno float %1142, 0.000000e+00, !dbg !115
  %1180 = fcmp uno <4 x float> %1146, zeroinitializer, !dbg !115
  %1181 = fcmp uno <8 x float> %1145, zeroinitializer, !dbg !115
  %1182 = fcmp uno <2 x float> %1143, zeroinitializer, !dbg !113
  %1183 = load <2 x bfloat>, ptr addrspace(3) %98, align 16, !dbg !100
  %1184 = fpext <2 x bfloat> %1183 to <2 x float>, !dbg !117
  %1185 = fsub <2 x float> %1184, %1129, !dbg !101
  %1186 = fmul <2 x float> %1127, %1185, !dbg !100
  %1187 = load <8 x bfloat>, ptr addrspace(3) %97, align 16, !dbg !100
  %1188 = load <4 x bfloat>, ptr addrspace(3) %113, align 4, !dbg !100
  %1189 = load <2 x bfloat>, ptr addrspace(3) %114, align 4, !dbg !100
  %1190 = shufflevector <8 x bfloat> %1187, <8 x bfloat> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !117
  %1191 = shufflevector <8 x bfloat> %1187, <8 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1192 = shufflevector <16 x bfloat> %1191, <16 x bfloat> %1190, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !117
  %1193 = shufflevector <4 x bfloat> %1188, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1194 = shufflevector <16 x bfloat> %1192, <16 x bfloat> %1193, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !117
  %1195 = shufflevector <2 x bfloat> %1189, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %1196 = shufflevector <16 x bfloat> %1194, <16 x bfloat> %1195, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !117
  %1197 = fpext <16 x bfloat> %1196 to <16 x float>, !dbg !117
  %1198 = fsub <16 x float> %1197, %1135, !dbg !101
  %1199 = fmul <16 x float> %1132, %1198, !dbg !100
  %1200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1170, i1 true) #5, !dbg !118
  %1201 = extractvalue { i32, i32, i32, i32 } %1200, 0, !dbg !118
  %1202 = extractvalue { i32, i32, i32, i32 } %1200, 1, !dbg !118
  %1203 = extractvalue { i32, i32, i32, i32 } %1200, 2, !dbg !118
  %1204 = extractvalue { i32, i32, i32, i32 } %1200, 3, !dbg !118
  %1205 = insertelement <2 x i32> poison, i32 %1201, i64 0, !dbg !118
  %1206 = insertelement <2 x i32> %1205, i32 %1202, i64 1, !dbg !118
  %1207 = bitcast <2 x i32> %1206 to <2 x float>, !dbg !118
  %1208 = insertelement <2 x i32> poison, i32 %1203, i64 0, !dbg !118
  %1209 = insertelement <2 x i32> %1208, i32 %1204, i64 1, !dbg !118
  %1210 = bitcast <2 x i32> %1209 to <2 x float>, !dbg !118
  %1211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1172, i1 true) #5, !dbg !118
  %1212 = extractvalue { i32, i32, i32, i32 } %1211, 0, !dbg !118
  %1213 = extractvalue { i32, i32, i32, i32 } %1211, 1, !dbg !118
  %1214 = extractvalue { i32, i32, i32, i32 } %1211, 2, !dbg !118
  %1215 = extractvalue { i32, i32, i32, i32 } %1211, 3, !dbg !118
  %1216 = insertelement <4 x i32> poison, i32 %1212, i64 0, !dbg !118
  %1217 = insertelement <4 x i32> %1216, i32 %1213, i64 1, !dbg !118
  %1218 = insertelement <4 x i32> %1217, i32 %1214, i64 2, !dbg !118
  %1219 = insertelement <4 x i32> %1218, i32 %1215, i64 3, !dbg !118
  %1220 = bitcast <4 x i32> %1219 to <4 x float>, !dbg !118
  %1221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1173, i1 true) #5, !dbg !119
  %1222 = extractvalue { i32, i32, i32, i32 } %1221, 0, !dbg !119
  %1223 = bitcast i32 %1222 to <2 x bfloat>, !dbg !119
  %1224 = extractvalue { i32, i32, i32, i32 } %1221, 1, !dbg !119
  %1225 = bitcast i32 %1224 to <2 x bfloat>, !dbg !119
  %1226 = extractvalue { i32, i32, i32, i32 } %1221, 2, !dbg !119
  %1227 = bitcast i32 %1226 to <2 x bfloat>, !dbg !119
  %1228 = extractvalue { i32, i32, i32, i32 } %1221, 3, !dbg !119
  %1229 = bitcast i32 %1228 to <2 x bfloat>, !dbg !119
  %1230 = fpext <2 x bfloat> %1223 to <2 x float>, !dbg !120
  %1231 = fpext <2 x bfloat> %1225 to <2 x float>, !dbg !120
  %1232 = shufflevector <2 x bfloat> %1227, <2 x bfloat> %1229, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !120
  %1233 = fpext <4 x bfloat> %1232 to <4 x float>, !dbg !120
  %1234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1175, i1 true) #5, !dbg !121
  %1235 = extractvalue { i32, i32, i32, i32 } %1234, 0, !dbg !121
  %1236 = extractvalue { i32, i32, i32, i32 } %1234, 1, !dbg !121
  %1237 = extractvalue { i32, i32, i32, i32 } %1234, 2, !dbg !121
  %1238 = extractvalue { i32, i32, i32, i32 } %1234, 3, !dbg !121
  %1239 = insertelement <2 x i32> poison, i32 %1235, i64 0, !dbg !121
  %1240 = insertelement <2 x i32> %1239, i32 %1236, i64 1, !dbg !121
  %1241 = bitcast <2 x i32> %1240 to <2 x float>, !dbg !121
  %1242 = insertelement <2 x i32> poison, i32 %1237, i64 0, !dbg !121
  %1243 = insertelement <2 x i32> %1242, i32 %1238, i64 1, !dbg !121
  %1244 = bitcast <2 x i32> %1243 to <2 x float>, !dbg !121
  %1245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep175, i1 true) #5, !dbg !121
  %1246 = extractvalue { i32, i32, i32, i32 } %1245, 0, !dbg !121
  %1247 = extractvalue { i32, i32, i32, i32 } %1245, 1, !dbg !121
  %1248 = extractvalue { i32, i32, i32, i32 } %1245, 2, !dbg !121
  %1249 = extractvalue { i32, i32, i32, i32 } %1245, 3, !dbg !121
  %1250 = insertelement <4 x i32> poison, i32 %1246, i64 0, !dbg !121
  %1251 = insertelement <4 x i32> %1250, i32 %1247, i64 1, !dbg !121
  %1252 = insertelement <4 x i32> %1251, i32 %1248, i64 2, !dbg !121
  %1253 = insertelement <4 x i32> %1252, i32 %1249, i64 3, !dbg !121
  %1254 = bitcast <4 x i32> %1253 to <4 x float>, !dbg !121
  %1255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1176, i1 true) #5, !dbg !122
  %1256 = extractvalue { i32, i32, i32, i32 } %1255, 0, !dbg !122
  %1257 = bitcast i32 %1256 to <2 x bfloat>, !dbg !122
  %1258 = extractvalue { i32, i32, i32, i32 } %1255, 1, !dbg !122
  %1259 = bitcast i32 %1258 to <2 x bfloat>, !dbg !122
  %1260 = extractvalue { i32, i32, i32, i32 } %1255, 2, !dbg !122
  %1261 = bitcast i32 %1260 to <2 x bfloat>, !dbg !122
  %1262 = extractvalue { i32, i32, i32, i32 } %1255, 3, !dbg !122
  %1263 = bitcast i32 %1262 to <2 x bfloat>, !dbg !122
  %1264 = fpext <2 x bfloat> %1257 to <2 x float>, !dbg !123
  %1265 = fpext <2 x bfloat> %1259 to <2 x float>, !dbg !123
  %1266 = shufflevector <2 x bfloat> %1261, <2 x bfloat> %1263, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !123
  %1267 = fpext <4 x bfloat> %1266 to <4 x float>, !dbg !123
  %1268 = fadd <2 x float> %1207, %1230, !dbg !124
  %1269 = fadd <2 x float> %1210, %1231, !dbg !124
  %1270 = fadd <4 x float> %1220, %1233, !dbg !124
  %1271 = fadd <2 x float> %1268, splat (float 1.000000e+00), !dbg !125
  %1272 = fadd <2 x float> %1269, splat (float 1.000000e+00), !dbg !125
  %1273 = fadd <4 x float> %1270, splat (float 1.000000e+00), !dbg !125
  %1274 = fmul <2 x float> %1186, %1271, !dbg !126
  %1275 = shufflevector <2 x float> %1271, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %1276 = shufflevector <4 x float> %1273, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %1277 = shufflevector <8 x float> %1275, <8 x float> %1276, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !126
  %1278 = shufflevector <2 x float> %1272, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !126
  %1279 = shufflevector <8 x float> %1277, <8 x float> %1278, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !126
  %1280 = shufflevector <8 x float> %1279, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !126
  %1281 = fmul <16 x float> %1199, %1280, !dbg !126
  %1282 = fadd <2 x float> %1241, %1264, !dbg !127
  %1283 = fadd <2 x float> %1244, %1265, !dbg !127
  %1284 = fadd <4 x float> %1254, %1267, !dbg !127
  %1285 = fadd <2 x float> %1274, %1282, !dbg !128
  %1286 = shufflevector <2 x float> %1282, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1287 = shufflevector <4 x float> %1284, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1288 = shufflevector <8 x float> %1286, <8 x float> %1287, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !128
  %1289 = shufflevector <2 x float> %1283, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !128
  %1290 = shufflevector <8 x float> %1288, <8 x float> %1289, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !128
  %1291 = shufflevector <8 x float> %1290, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !128
  %1292 = fadd <16 x float> %1281, %1291, !dbg !128
  %1293 = extractelement <16 x float> %1292, i64 2, !dbg !129
  %1294 = fcmp olt float %1141, %1293, !dbg !130
  %1295 = extractelement <16 x float> %1292, i64 3, !dbg !129
  %1296 = fcmp olt float %1142, %1295, !dbg !130
  %1297 = extractelement <16 x float> %1292, i64 4, !dbg !129
  %1298 = extractelement <16 x float> %1292, i64 5, !dbg !129
  %1299 = extractelement <16 x float> %1292, i64 6, !dbg !129
  %1300 = extractelement <16 x float> %1292, i64 7, !dbg !129
  %1301 = extractelement <2 x float> %1285, i64 0, !dbg !129
  %1302 = extractelement <2 x float> %1285, i64 1, !dbg !129
  %1303 = extractelement <16 x float> %1292, i64 8, !dbg !129
  %1304 = extractelement <16 x float> %1292, i64 9, !dbg !129
  %1305 = extractelement <16 x float> %1292, i64 10, !dbg !129
  %1306 = extractelement <16 x float> %1292, i64 11, !dbg !129
  %1307 = extractelement <16 x float> %1292, i64 12, !dbg !129
  %1308 = extractelement <16 x float> %1292, i64 13, !dbg !129
  %1309 = or i1 %1178, %1294, !dbg !131
  %1310 = or i1 %1179, %1296, !dbg !131
  %1311 = select i1 %1309, float %1141, float %1293, !dbg !132
  %1312 = select i1 %1310, float %1142, float %1295, !dbg !132
  %1313 = shufflevector <16 x float> %1292, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !130
  %1314 = fcmp olt <4 x float> %1146, %1313, !dbg !130
  %1315 = or <4 x i1> %1180, %1314, !dbg !131
  %1316 = select <4 x i1> %1315, <4 x float> %1146, <4 x float> %1313, !dbg !132
  %1317 = shufflevector <2 x float> %1285, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !130
  %1318 = shufflevector <16 x float> %1292, <16 x float> %1317, <8 x i32> <i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 17, i32 16>, !dbg !130
  %1319 = fcmp olt <8 x float> %1145, %1318, !dbg !130
  %1320 = or <8 x i1> %1181, %1319, !dbg !131
  %1321 = select <8 x i1> %1320, <8 x float> %1145, <8 x float> %1318, !dbg !132
  %1322 = fcmp ogt <16 x float> %1144, %1292, !dbg !133
  %1323 = fcmp olt <16 x float> %1144, %1292, !dbg !133
  %1324 = shufflevector <16 x i1> %1322, <16 x i1> %1323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !133
  %1325 = or <16 x i1> %1177, %1324, !dbg !134
  %1326 = select <16 x i1> %1325, <16 x float> %1144, <16 x float> %1292, !dbg !135
  %1327 = select i1 %24, float %1311, float %1141, !dbg !102
  %1328 = select i1 %24, float %1312, float %1142, !dbg !102
  %1329 = select <4 x i1> %1139, <4 x float> %1316, <4 x float> %1146, !dbg !102
  %1330 = select <8 x i1> %1137, <8 x float> %1321, <8 x float> %1145, !dbg !102
  %1331 = fcmp ogt <2 x float> %1143, %1285, !dbg !133
  %1332 = or <2 x i1> %1182, %1331, !dbg !134
  %1333 = select <2 x i1> %1332, <2 x float> %1143, <2 x float> %1285, !dbg !135
  %1334 = select <2 x i1> %1125, <2 x float> %1333, <2 x float> %1143, !dbg !99
  %1335 = select <16 x i1> %116, <16 x float> %1326, <16 x float> %1144, !dbg !99
  %1336 = sext i32 %1153 to i64, !dbg !136
  %1337 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1336, !dbg !136
  %1338 = sext i32 %1154 to i64, !dbg !136
  %1339 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1338, !dbg !136
  %1340 = extractelement <16 x float> %1292, i64 0, !dbg !129
  %1341 = fptrunc float %1340 to bfloat, !dbg !129
  %1342 = extractelement <16 x float> %1292, i64 1, !dbg !129
  %1343 = fptrunc float %1342 to bfloat, !dbg !129
  %1344 = fptrunc float %1293 to bfloat, !dbg !129
  %1345 = fptrunc float %1295 to bfloat, !dbg !129
  %1346 = fptrunc float %1297 to bfloat, !dbg !129
  %1347 = fptrunc float %1298 to bfloat, !dbg !129
  %1348 = fptrunc float %1299 to bfloat, !dbg !129
  %1349 = fptrunc float %1300 to bfloat, !dbg !129
  %1350 = fptrunc float %1301 to bfloat, !dbg !129
  %1351 = fptrunc float %1302 to bfloat, !dbg !129
  %1352 = fptrunc float %1303 to bfloat, !dbg !129
  %1353 = fptrunc float %1304 to bfloat, !dbg !129
  %1354 = fptrunc float %1305 to bfloat, !dbg !129
  %1355 = fptrunc float %1306 to bfloat, !dbg !129
  %1356 = fptrunc float %1307 to bfloat, !dbg !129
  %1357 = fptrunc float %1308 to bfloat, !dbg !129
  %1358 = insertelement <2 x bfloat> poison, bfloat %1341, i64 0, !dbg !129
  %1359 = insertelement <2 x bfloat> %1358, bfloat %1343, i64 1, !dbg !129
  %1360 = bitcast <2 x bfloat> %1359 to i32, !dbg !129
  %1361 = insertelement <2 x bfloat> poison, bfloat %1344, i64 0, !dbg !129
  %1362 = insertelement <2 x bfloat> %1361, bfloat %1345, i64 1, !dbg !129
  %1363 = bitcast <2 x bfloat> %1362 to i32, !dbg !129
  %1364 = insertelement <2 x bfloat> poison, bfloat %1346, i64 0, !dbg !129
  %1365 = insertelement <2 x bfloat> %1364, bfloat %1347, i64 1, !dbg !129
  %1366 = bitcast <2 x bfloat> %1365 to i32, !dbg !129
  %1367 = insertelement <2 x bfloat> poison, bfloat %1348, i64 0, !dbg !129
  %1368 = insertelement <2 x bfloat> %1367, bfloat %1349, i64 1, !dbg !129
  %1369 = bitcast <2 x bfloat> %1368 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1360, i32 %1363, i32 %1366, i32 %1369, ptr addrspace(1) %1337, i1 %24) #5, !dbg !129
  %1370 = insertelement <2 x bfloat> poison, bfloat %1350, i64 0, !dbg !129
  %1371 = insertelement <2 x bfloat> %1370, bfloat %1351, i64 1, !dbg !129
  %1372 = bitcast <2 x bfloat> %1371 to i32, !dbg !129
  %1373 = insertelement <2 x bfloat> poison, bfloat %1352, i64 0, !dbg !129
  %1374 = insertelement <2 x bfloat> %1373, bfloat %1353, i64 1, !dbg !129
  %1375 = bitcast <2 x bfloat> %1374 to i32, !dbg !129
  %1376 = insertelement <2 x bfloat> poison, bfloat %1354, i64 0, !dbg !129
  %1377 = insertelement <2 x bfloat> %1376, bfloat %1355, i64 1, !dbg !129
  %1378 = bitcast <2 x bfloat> %1377 to i32, !dbg !129
  %1379 = insertelement <2 x bfloat> poison, bfloat %1356, i64 0, !dbg !129
  %1380 = insertelement <2 x bfloat> %1379, bfloat %1357, i64 1, !dbg !129
  %1381 = bitcast <2 x bfloat> %1380 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1372, i32 %1375, i32 %1378, i32 %1381, ptr addrspace(1) %1339, i1 %24) #5, !dbg !129
  %indvars.iv.next256 = add nuw nsw i64 %indvars.iv255, 1024, !dbg !98
  %1382 = icmp samesign ult i64 %indvars.iv255, 2048, !dbg !98
  br i1 %1382, label %1140, label %1383, !dbg !98

1383:                                             ; preds = %1140
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1384 = extractelement <16 x float> %1335, i64 14, !dbg !139
  %1385 = extractelement <16 x float> %1335, i64 15, !dbg !139
  %1386 = fcmp olt float %1384, %1385, !dbg !139
  %1387 = fcmp uno float %1384, 0.000000e+00, !dbg !140
  %1388 = or i1 %1386, %1387, !dbg !141
  %1389 = select i1 %1388, float %1384, float %1385, !dbg !142
  %1390 = fcmp olt float %1389, %1327, !dbg !139
  %1391 = fcmp uno float %1389, 0.000000e+00, !dbg !140
  %1392 = or i1 %1390, %1391, !dbg !141
  %1393 = select i1 %1392, float %1389, float %1327, !dbg !142
  %1394 = fcmp olt float %1393, %1328, !dbg !139
  %1395 = fcmp uno float %1393, 0.000000e+00, !dbg !140
  %1396 = or i1 %1394, %1395, !dbg !141
  %1397 = select i1 %1396, float %1393, float %1328, !dbg !142
  %1398 = extractelement <4 x float> %1329, i64 0, !dbg !139
  %1399 = fcmp olt float %1397, %1398, !dbg !139
  %1400 = fcmp uno float %1397, 0.000000e+00, !dbg !140
  %1401 = or i1 %1399, %1400, !dbg !141
  %1402 = select i1 %1401, float %1397, float %1398, !dbg !142
  %1403 = extractelement <4 x float> %1329, i64 1, !dbg !139
  %1404 = fcmp olt float %1402, %1403, !dbg !139
  %1405 = fcmp uno float %1402, 0.000000e+00, !dbg !140
  %1406 = or i1 %1404, %1405, !dbg !141
  %1407 = select i1 %1406, float %1402, float %1403, !dbg !142
  %1408 = extractelement <4 x float> %1329, i64 2, !dbg !139
  %1409 = fcmp olt float %1407, %1408, !dbg !139
  %1410 = fcmp uno float %1407, 0.000000e+00, !dbg !140
  %1411 = or i1 %1409, %1410, !dbg !141
  %1412 = select i1 %1411, float %1407, float %1408, !dbg !142
  %1413 = extractelement <4 x float> %1329, i64 3, !dbg !139
  %1414 = fcmp olt float %1412, %1413, !dbg !139
  %1415 = fcmp uno float %1412, 0.000000e+00, !dbg !140
  %1416 = or i1 %1414, %1415, !dbg !141
  %1417 = select i1 %1416, float %1412, float %1413, !dbg !142
  %1418 = extractelement <8 x float> %1330, i64 6, !dbg !139
  %1419 = extractelement <8 x float> %1330, i64 7, !dbg !139
  %1420 = fcmp olt float %1419, %1418, !dbg !139
  %1421 = fcmp uno float %1419, 0.000000e+00, !dbg !140
  %1422 = or i1 %1420, %1421, !dbg !141
  %1423 = select i1 %1422, float %1419, float %1418, !dbg !142
  %1424 = extractelement <8 x float> %1330, i64 5, !dbg !139
  %1425 = fcmp olt float %1423, %1424, !dbg !139
  %1426 = fcmp uno float %1423, 0.000000e+00, !dbg !140
  %1427 = or i1 %1425, %1426, !dbg !141
  %1428 = select i1 %1427, float %1423, float %1424, !dbg !142
  %1429 = extractelement <8 x float> %1330, i64 4, !dbg !139
  %1430 = fcmp olt float %1428, %1429, !dbg !139
  %1431 = fcmp uno float %1428, 0.000000e+00, !dbg !140
  %1432 = or i1 %1430, %1431, !dbg !141
  %1433 = select i1 %1432, float %1428, float %1429, !dbg !142
  %1434 = extractelement <8 x float> %1330, i64 3, !dbg !139
  %1435 = fcmp olt float %1433, %1434, !dbg !139
  %1436 = fcmp uno float %1433, 0.000000e+00, !dbg !140
  %1437 = or i1 %1435, %1436, !dbg !141
  %1438 = select i1 %1437, float %1433, float %1434, !dbg !142
  %1439 = extractelement <8 x float> %1330, i64 2, !dbg !139
  %1440 = fcmp olt float %1438, %1439, !dbg !139
  %1441 = fcmp uno float %1438, 0.000000e+00, !dbg !140
  %1442 = or i1 %1440, %1441, !dbg !141
  %1443 = select i1 %1442, float %1438, float %1439, !dbg !142
  %1444 = extractelement <8 x float> %1330, i64 1, !dbg !139
  %1445 = fcmp olt float %1443, %1444, !dbg !139
  %1446 = fcmp uno float %1443, 0.000000e+00, !dbg !140
  %1447 = or i1 %1445, %1446, !dbg !141
  %1448 = select i1 %1447, float %1443, float %1444, !dbg !142
  %1449 = extractelement <8 x float> %1330, i64 0, !dbg !139
  %1450 = fcmp olt float %1448, %1449, !dbg !139
  %1451 = fcmp uno float %1448, 0.000000e+00, !dbg !140
  %1452 = or i1 %1450, %1451, !dbg !141
  %1453 = select i1 %1452, float %1448, float %1449, !dbg !142
  %1454 = bitcast float %1417 to i32, !dbg !137
  %1455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1454, i32 16, i32 31), !dbg !137
  %1456 = bitcast i32 %1455 to float, !dbg !137
  %1457 = fcmp olt float %1417, %1456, !dbg !139
  %1458 = fcmp uno float %1417, 0.000000e+00, !dbg !140
  %1459 = or i1 %1458, %1457, !dbg !141
  %1460 = select i1 %1459, float %1417, float %1456, !dbg !142
  %1461 = bitcast float %1460 to i32, !dbg !137
  %1462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1461, i32 8, i32 31), !dbg !137
  %1463 = bitcast i32 %1462 to float, !dbg !137
  %1464 = fcmp olt float %1460, %1463, !dbg !139
  %1465 = fcmp uno float %1460, 0.000000e+00, !dbg !140
  %1466 = or i1 %1464, %1465, !dbg !141
  %1467 = select i1 %1466, float %1460, float %1463, !dbg !142
  %1468 = bitcast float %1467 to i32, !dbg !137
  %1469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1468, i32 4, i32 31), !dbg !137
  %1470 = bitcast i32 %1469 to float, !dbg !137
  %1471 = fcmp olt float %1467, %1470, !dbg !139
  %1472 = fcmp uno float %1467, 0.000000e+00, !dbg !140
  %1473 = or i1 %1471, %1472, !dbg !141
  %1474 = select i1 %1473, float %1467, float %1470, !dbg !142
  %1475 = bitcast float %1474 to i32, !dbg !137
  %1476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1475, i32 2, i32 31), !dbg !137
  %1477 = bitcast i32 %1476 to float, !dbg !137
  %1478 = fcmp olt float %1474, %1477, !dbg !139
  %1479 = fcmp uno float %1474, 0.000000e+00, !dbg !140
  %1480 = or i1 %1478, %1479, !dbg !141
  %1481 = select i1 %1480, float %1474, float %1477, !dbg !142
  %1482 = bitcast float %1481 to i32, !dbg !137
  %1483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1482, i32 1, i32 31), !dbg !137
  %1484 = bitcast i32 %1483 to float, !dbg !137
  %1485 = fcmp olt float %1481, %1484, !dbg !139
  %1486 = fcmp uno float %1481, 0.000000e+00, !dbg !140
  %1487 = or i1 %1485, %1486, !dbg !141
  %1488 = bitcast float %1453 to i32, !dbg !137
  %1489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1488, i32 16, i32 31), !dbg !137
  %1490 = bitcast i32 %1489 to float, !dbg !137
  %1491 = fcmp olt float %1453, %1490, !dbg !139
  %1492 = fcmp uno float %1453, 0.000000e+00, !dbg !140
  %1493 = or i1 %1492, %1491, !dbg !141
  %1494 = select i1 %1493, float %1453, float %1490, !dbg !142
  %1495 = bitcast float %1494 to i32, !dbg !137
  %1496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1495, i32 8, i32 31), !dbg !137
  %1497 = bitcast i32 %1496 to float, !dbg !137
  %1498 = fcmp olt float %1494, %1497, !dbg !139
  %1499 = fcmp uno float %1494, 0.000000e+00, !dbg !140
  %1500 = or i1 %1498, %1499, !dbg !141
  %1501 = select i1 %1500, float %1494, float %1497, !dbg !142
  %1502 = bitcast float %1501 to i32, !dbg !137
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1502, i32 4, i32 31), !dbg !137
  %1504 = bitcast i32 %1503 to float, !dbg !137
  %1505 = fcmp olt float %1501, %1504, !dbg !139
  %1506 = fcmp uno float %1501, 0.000000e+00, !dbg !140
  %1507 = or i1 %1505, %1506, !dbg !141
  %1508 = select i1 %1507, float %1501, float %1504, !dbg !142
  %1509 = bitcast float %1508 to i32, !dbg !137
  %1510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 2, i32 31), !dbg !137
  %1511 = bitcast i32 %1510 to float, !dbg !137
  %1512 = fcmp olt float %1508, %1511, !dbg !139
  %1513 = fcmp uno float %1508, 0.000000e+00, !dbg !140
  %1514 = or i1 %1512, %1513, !dbg !141
  %1515 = select i1 %1514, float %1508, float %1511, !dbg !142
  %1516 = bitcast float %1515 to i32, !dbg !137
  %1517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1516, i32 1, i32 31), !dbg !137
  %1518 = bitcast i32 %1517 to float, !dbg !137
  %1519 = fcmp olt float %1515, %1518, !dbg !139
  %1520 = fcmp uno float %1515, 0.000000e+00, !dbg !140
  %1521 = or i1 %1519, %1520, !dbg !141
  %1522 = select i1 %1487, i32 %1482, i32 %1483, !dbg !142
  %1523 = insertelement <1 x i32> poison, i32 %1522, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1019, <1 x i32> %1523, i1 %1018) #5, !dbg !137
  %1524 = select i1 %1521, i32 %1516, i32 %1517, !dbg !142
  %1525 = insertelement <1 x i32> poison, i32 %1524, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1525, i1 %1018) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1526 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1033, i1 %1032) #5, !dbg !137
  %1527 = bitcast i32 %1526 to float, !dbg !137
  %1528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1526, i32 2, i32 31), !dbg !137
  %1529 = bitcast i32 %1528 to float, !dbg !137
  %1530 = fcmp olt float %1527, %1529, !dbg !139
  %1531 = fcmp uno float %1527, 0.000000e+00, !dbg !140
  %1532 = or i1 %1531, %1530, !dbg !141
  %1533 = select i1 %1532, float %1527, float %1529, !dbg !142
  %1534 = bitcast float %1533 to i32, !dbg !137
  %1535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1534, i32 1, i32 31), !dbg !137
  %1536 = bitcast i32 %1535 to float, !dbg !137
  %1537 = fcmp olt float %1533, %1536, !dbg !139
  %1538 = fcmp uno float %1533, 0.000000e+00, !dbg !140
  %1539 = or i1 %1537, %1538, !dbg !141
  %1540 = select i1 %1539, i32 %1534, i32 %1535, !dbg !142
  %1541 = insertelement <1 x i32> poison, i32 %1540, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1541, i1 %1083) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %1542 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !137
  %1543 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1544 = bitcast float %1542 to i32, !dbg !143
  %1545 = bitcast float %1543 to i32, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1544, i32 %1545, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %1546 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %620, !dbg !143
  %1547 = load float, ptr addrspace(3) %1546, align 4, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %1548 = extractelement <16 x float> %1335, i64 0, !dbg !146
  %1549 = extractelement <16 x float> %1335, i64 1, !dbg !146
  %1550 = fcmp ogt float %1548, %1549, !dbg !146
  %1551 = fcmp uno float %1548, 0.000000e+00, !dbg !147
  %1552 = or i1 %1550, %1551, !dbg !148
  %1553 = select i1 %1552, float %1548, float %1549, !dbg !149
  %1554 = extractelement <16 x float> %1335, i64 2, !dbg !146
  %1555 = fcmp ogt float %1553, %1554, !dbg !146
  %1556 = fcmp uno float %1553, 0.000000e+00, !dbg !147
  %1557 = or i1 %1555, %1556, !dbg !148
  %1558 = select i1 %1557, float %1553, float %1554, !dbg !149
  %1559 = extractelement <16 x float> %1335, i64 3, !dbg !146
  %1560 = fcmp ogt float %1558, %1559, !dbg !146
  %1561 = fcmp uno float %1558, 0.000000e+00, !dbg !147
  %1562 = or i1 %1560, %1561, !dbg !148
  %1563 = select i1 %1562, float %1558, float %1559, !dbg !149
  %1564 = extractelement <16 x float> %1335, i64 4, !dbg !146
  %1565 = fcmp ogt float %1563, %1564, !dbg !146
  %1566 = fcmp uno float %1563, 0.000000e+00, !dbg !147
  %1567 = or i1 %1565, %1566, !dbg !148
  %1568 = select i1 %1567, float %1563, float %1564, !dbg !149
  %1569 = extractelement <16 x float> %1335, i64 5, !dbg !146
  %1570 = fcmp ogt float %1568, %1569, !dbg !146
  %1571 = fcmp uno float %1568, 0.000000e+00, !dbg !147
  %1572 = or i1 %1570, %1571, !dbg !148
  %1573 = select i1 %1572, float %1568, float %1569, !dbg !149
  %1574 = extractelement <16 x float> %1335, i64 6, !dbg !146
  %1575 = fcmp ogt float %1573, %1574, !dbg !146
  %1576 = fcmp uno float %1573, 0.000000e+00, !dbg !147
  %1577 = or i1 %1575, %1576, !dbg !148
  %1578 = select i1 %1577, float %1573, float %1574, !dbg !149
  %1579 = extractelement <16 x float> %1335, i64 7, !dbg !146
  %1580 = fcmp ogt float %1578, %1579, !dbg !146
  %1581 = fcmp uno float %1578, 0.000000e+00, !dbg !147
  %1582 = or i1 %1580, %1581, !dbg !148
  %1583 = select i1 %1582, float %1578, float %1579, !dbg !149
  %1584 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1334, <2 x i32> <i32 0, i32 2>, !dbg !146
  %1585 = fcmp ogt <2 x float> %1584, %1334, !dbg !146
  %1586 = fcmp uno <2 x float> %1584, %1334, !dbg !146
  %shift = shufflevector <2 x i1> %1585, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !148
  %1587 = or <2 x i1> %shift, %1586, !dbg !148
  %1588 = extractelement <2 x i1> %1587, i64 0, !dbg !148
  %1589 = extractelement <2 x float> %1334, i64 0, !dbg !149
  %1590 = extractelement <2 x float> %1334, i64 1, !dbg !149
  %1591 = select i1 %1588, float %1589, float %1590, !dbg !149
  %1592 = extractelement <16 x float> %1335, i64 8, !dbg !146
  %1593 = fcmp ogt float %1591, %1592, !dbg !146
  %1594 = fcmp uno float %1591, 0.000000e+00, !dbg !147
  %1595 = or i1 %1593, %1594, !dbg !148
  %1596 = select i1 %1595, float %1591, float %1592, !dbg !149
  %1597 = extractelement <16 x float> %1335, i64 9, !dbg !146
  %1598 = fcmp ogt float %1596, %1597, !dbg !146
  %1599 = fcmp uno float %1596, 0.000000e+00, !dbg !147
  %1600 = or i1 %1598, %1599, !dbg !148
  %1601 = select i1 %1600, float %1596, float %1597, !dbg !149
  %1602 = extractelement <16 x float> %1335, i64 10, !dbg !146
  %1603 = fcmp ogt float %1601, %1602, !dbg !146
  %1604 = fcmp uno float %1601, 0.000000e+00, !dbg !147
  %1605 = or i1 %1603, %1604, !dbg !148
  %1606 = select i1 %1605, float %1601, float %1602, !dbg !149
  %1607 = extractelement <16 x float> %1335, i64 11, !dbg !146
  %1608 = fcmp ogt float %1606, %1607, !dbg !146
  %1609 = fcmp uno float %1606, 0.000000e+00, !dbg !147
  %1610 = or i1 %1608, %1609, !dbg !148
  %1611 = select i1 %1610, float %1606, float %1607, !dbg !149
  %1612 = extractelement <16 x float> %1335, i64 12, !dbg !146
  %1613 = fcmp ogt float %1611, %1612, !dbg !146
  %1614 = fcmp uno float %1611, 0.000000e+00, !dbg !147
  %1615 = or i1 %1613, %1614, !dbg !148
  %1616 = select i1 %1615, float %1611, float %1612, !dbg !149
  %1617 = extractelement <16 x float> %1335, i64 13, !dbg !146
  %1618 = fcmp ogt float %1616, %1617, !dbg !146
  %1619 = fcmp uno float %1616, 0.000000e+00, !dbg !147
  %1620 = or i1 %1618, %1619, !dbg !148
  %1621 = select i1 %1620, float %1616, float %1617, !dbg !149
  %1622 = bitcast float %1583 to i32, !dbg !144
  %1623 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1622, i32 16, i32 31), !dbg !144
  %1624 = bitcast i32 %1623 to float, !dbg !144
  %1625 = fcmp ogt float %1583, %1624, !dbg !146
  %1626 = fcmp uno float %1583, 0.000000e+00, !dbg !147
  %1627 = or i1 %1626, %1625, !dbg !148
  %1628 = select i1 %1627, float %1583, float %1624, !dbg !149
  %1629 = bitcast float %1628 to i32, !dbg !144
  %1630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1629, i32 8, i32 31), !dbg !144
  %1631 = bitcast i32 %1630 to float, !dbg !144
  %1632 = fcmp ogt float %1628, %1631, !dbg !146
  %1633 = fcmp uno float %1628, 0.000000e+00, !dbg !147
  %1634 = or i1 %1632, %1633, !dbg !148
  %1635 = select i1 %1634, float %1628, float %1631, !dbg !149
  %1636 = bitcast float %1635 to i32, !dbg !144
  %1637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1636, i32 4, i32 31), !dbg !144
  %1638 = bitcast i32 %1637 to float, !dbg !144
  %1639 = fcmp ogt float %1635, %1638, !dbg !146
  %1640 = fcmp uno float %1635, 0.000000e+00, !dbg !147
  %1641 = or i1 %1639, %1640, !dbg !148
  %1642 = select i1 %1641, float %1635, float %1638, !dbg !149
  %1643 = bitcast float %1642 to i32, !dbg !144
  %1644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1643, i32 2, i32 31), !dbg !144
  %1645 = bitcast i32 %1644 to float, !dbg !144
  %1646 = fcmp ogt float %1642, %1645, !dbg !146
  %1647 = fcmp uno float %1642, 0.000000e+00, !dbg !147
  %1648 = or i1 %1646, %1647, !dbg !148
  %1649 = select i1 %1648, float %1642, float %1645, !dbg !149
  %1650 = bitcast float %1649 to i32, !dbg !144
  %1651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1650, i32 1, i32 31), !dbg !144
  %1652 = bitcast i32 %1651 to float, !dbg !144
  %1653 = fcmp ogt float %1649, %1652, !dbg !146
  %1654 = fcmp uno float %1649, 0.000000e+00, !dbg !147
  %1655 = or i1 %1653, %1654, !dbg !148
  %1656 = bitcast float %1621 to i32, !dbg !144
  %1657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1656, i32 16, i32 31), !dbg !144
  %1658 = bitcast i32 %1657 to float, !dbg !144
  %1659 = fcmp ogt float %1621, %1658, !dbg !146
  %1660 = fcmp uno float %1621, 0.000000e+00, !dbg !147
  %1661 = or i1 %1660, %1659, !dbg !148
  %1662 = select i1 %1661, float %1621, float %1658, !dbg !149
  %1663 = bitcast float %1662 to i32, !dbg !144
  %1664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1663, i32 8, i32 31), !dbg !144
  %1665 = bitcast i32 %1664 to float, !dbg !144
  %1666 = fcmp ogt float %1662, %1665, !dbg !146
  %1667 = fcmp uno float %1662, 0.000000e+00, !dbg !147
  %1668 = or i1 %1666, %1667, !dbg !148
  %1669 = select i1 %1668, float %1662, float %1665, !dbg !149
  %1670 = bitcast float %1669 to i32, !dbg !144
  %1671 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1670, i32 4, i32 31), !dbg !144
  %1672 = bitcast i32 %1671 to float, !dbg !144
  %1673 = fcmp ogt float %1669, %1672, !dbg !146
  %1674 = fcmp uno float %1669, 0.000000e+00, !dbg !147
  %1675 = or i1 %1673, %1674, !dbg !148
  %1676 = select i1 %1675, float %1669, float %1672, !dbg !149
  %1677 = bitcast float %1676 to i32, !dbg !144
  %1678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1677, i32 2, i32 31), !dbg !144
  %1679 = bitcast i32 %1678 to float, !dbg !144
  %1680 = fcmp ogt float %1676, %1679, !dbg !146
  %1681 = fcmp uno float %1676, 0.000000e+00, !dbg !147
  %1682 = or i1 %1680, %1681, !dbg !148
  %1683 = select i1 %1682, float %1676, float %1679, !dbg !149
  %1684 = bitcast float %1683 to i32, !dbg !144
  %1685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1684, i32 1, i32 31), !dbg !144
  %1686 = bitcast i32 %1685 to float, !dbg !144
  %1687 = fcmp ogt float %1683, %1686, !dbg !146
  %1688 = fcmp uno float %1683, 0.000000e+00, !dbg !147
  %1689 = or i1 %1687, %1688, !dbg !148
  %1690 = select i1 %1655, i32 %1650, i32 %1651, !dbg !149
  %1691 = insertelement <1 x i32> poison, i32 %1690, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1019, <1 x i32> %1691, i1 %1018) #5, !dbg !144
  %1692 = select i1 %1689, i32 %1684, i32 %1685, !dbg !149
  %1693 = insertelement <1 x i32> poison, i32 %1692, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1693, i1 %1018) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %1694 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1033, i1 %1032) #5, !dbg !144
  %1695 = bitcast i32 %1694 to float, !dbg !144
  %1696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1694, i32 2, i32 31), !dbg !144
  %1697 = bitcast i32 %1696 to float, !dbg !144
  %1698 = fcmp ogt float %1695, %1697, !dbg !146
  %1699 = fcmp uno float %1695, 0.000000e+00, !dbg !147
  %1700 = or i1 %1699, %1698, !dbg !148
  %1701 = select i1 %1700, float %1695, float %1697, !dbg !149
  %1702 = bitcast float %1701 to i32, !dbg !144
  %1703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1702, i32 1, i32 31), !dbg !144
  %1704 = bitcast i32 %1703 to float, !dbg !144
  %1705 = fcmp ogt float %1701, %1704, !dbg !146
  %1706 = fcmp uno float %1701, 0.000000e+00, !dbg !147
  %1707 = or i1 %1705, %1706, !dbg !148
  %1708 = select i1 %1707, i32 %1702, i32 %1703, !dbg !149
  %1709 = insertelement <1 x i32> poison, i32 %1708, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1709, i1 %1083) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %1710 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !144
  %1711 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %1712 = bitcast float %1710 to i32, !dbg !150
  %1713 = bitcast float %1711 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1712, i32 %1713, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %1714 = load float, ptr addrspace(3) %1546, align 4, !dbg !150
  %1715 = sext i32 %621 to i64, !dbg !151
  %1716 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1715, !dbg !151
  %1717 = fptrunc float %1547 to bfloat, !dbg !143
  %1718 = and i32 %19, 126, !dbg !143
  %1719 = icmp eq i32 %1718, 0, !dbg !143
  %1720 = bitcast bfloat %1717 to i16, !dbg !143
  %1721 = and i1 %1719, %622, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1720, ptr addrspace(1) %1716, i1 %1721) #5, !dbg !143
  %1722 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1715, !dbg !152
  %1723 = fptrunc float %1714 to bfloat, !dbg !150
  %1724 = bitcast bfloat %1723 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1724, ptr addrspace(1) %1722, i1 %1721) #5, !dbg !150
  %.inv5 = fcmp oge float %1542, 0.000000e+00, !dbg !153
  %1725 = select i1 %.inv5, float 0.000000e+00, float %1542, !dbg !153
  %.inv6 = fcmp oge float %1543, 0.000000e+00, !dbg !153
  %1726 = select i1 %.inv6, float 0.000000e+00, float %1543, !dbg !153
  %1727 = fsub float 0.000000e+00, %1725, !dbg !155
  %1728 = fsub float 0.000000e+00, %1726, !dbg !155
  %.inv7 = fcmp ole float %1710, 0.000000e+00, !dbg !156
  %1729 = select i1 %.inv7, float 0.000000e+00, float %1710, !dbg !156
  %.inv8 = fcmp ole float %1711, 0.000000e+00, !dbg !156
  %1730 = select i1 %.inv8, float 0.000000e+00, float %1711, !dbg !156
  %1731 = fcmp ogt float %1727, %1729, !dbg !158
  %1732 = fcmp ogt float %1728, %1730, !dbg !158
  %1733 = fcmp uno float %1727, 0.000000e+00, !dbg !160
  %1734 = fcmp uno float %1728, 0.000000e+00, !dbg !160
  %1735 = or i1 %1733, %1731, !dbg !161
  %1736 = or i1 %1734, %1732, !dbg !161
  %1737 = select i1 %1735, float %1727, float %1729, !dbg !162
  %1738 = select i1 %1736, float %1728, float %1730, !dbg !162
  %1739 = fmul float %1737, 0x3F80204080000000, !dbg !163
  %1740 = fmul float %1738, 0x3F80204080000000, !dbg !163
  %1741 = fcmp ogt float %1739, 0x3EE4F8B580000000, !dbg !164
  %1742 = fcmp ogt float %1740, 0x3EE4F8B580000000, !dbg !164
  %1743 = fcmp uno float %1739, 0.000000e+00, !dbg !166
  %1744 = fcmp uno float %1740, 0.000000e+00, !dbg !166
  %1745 = or i1 %1741, %1743, !dbg !167
  %1746 = or i1 %1742, %1744, !dbg !167
  %1747 = select i1 %1745, float %1739, float 0x3EE4F8B580000000, !dbg !168
  %1748 = select i1 %1746, float %1740, float 0x3EE4F8B580000000, !dbg !168
  %1749 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1747), !dbg !169
  %1750 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1748), !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %1751 = bitcast float %1749 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1751, i1 true) #5, !dbg !170
  %1752 = bitcast float %1750 to <1 x i32>, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1752, i1 true) #5, !dbg !170
  tail call void @llvm.nvvm.barrier0(), !dbg !170
  %1753 = lshr exact i32 %20, 3, !dbg !170
  %1754 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1753, !dbg !170
  %1755 = load float, ptr addrspace(3) %1754, align 8, !dbg !170
  br label %1756, !dbg !171

1756:                                             ; preds = %1383, %1756
  %indvars.iv257 = phi i64 [ 0, %1383 ], [ %indvars.iv.next258, %1756 ]
  %1757 = trunc nuw nsw i64 %indvars.iv257 to i32, !dbg !172
  %1758 = add i32 %87, %1757, !dbg !172
  %1759 = add i32 %89, %1757, !dbg !172
  %1760 = sext i32 %1758 to i64, !dbg !173
  %1761 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1760, !dbg !173
  %1762 = sext i32 %1759 to i64, !dbg !173
  %1763 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1762, !dbg !173
  %1764 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1761, i1 %23) #5, !dbg !174
  %1765 = extractvalue { i32, i32, i32, i32 } %1764, 0, !dbg !174
  %1766 = bitcast i32 %1765 to <2 x bfloat>, !dbg !174
  %1767 = extractvalue { i32, i32, i32, i32 } %1764, 1, !dbg !174
  %1768 = bitcast i32 %1767 to <2 x bfloat>, !dbg !174
  %1769 = extractvalue { i32, i32, i32, i32 } %1764, 2, !dbg !174
  %1770 = bitcast i32 %1769 to <2 x bfloat>, !dbg !174
  %1771 = extractvalue { i32, i32, i32, i32 } %1764, 3, !dbg !174
  %1772 = bitcast i32 %1771 to <2 x bfloat>, !dbg !174
  %1773 = extractelement <2 x bfloat> %1766, i64 0, !dbg !174
  %1774 = extractelement <2 x bfloat> %1766, i64 1, !dbg !174
  %1775 = extractelement <2 x bfloat> %1768, i64 0, !dbg !174
  %1776 = extractelement <2 x bfloat> %1768, i64 1, !dbg !174
  %1777 = extractelement <2 x bfloat> %1770, i64 0, !dbg !174
  %1778 = extractelement <2 x bfloat> %1770, i64 1, !dbg !174
  %1779 = extractelement <2 x bfloat> %1772, i64 0, !dbg !174
  %1780 = extractelement <2 x bfloat> %1772, i64 1, !dbg !174
  %1781 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1763, i1 %23) #5, !dbg !174
  %1782 = extractvalue { i32, i32, i32, i32 } %1781, 0, !dbg !174
  %1783 = bitcast i32 %1782 to <2 x bfloat>, !dbg !174
  %1784 = extractvalue { i32, i32, i32, i32 } %1781, 1, !dbg !174
  %1785 = bitcast i32 %1784 to <2 x bfloat>, !dbg !174
  %1786 = extractvalue { i32, i32, i32, i32 } %1781, 2, !dbg !174
  %1787 = bitcast i32 %1786 to <2 x bfloat>, !dbg !174
  %1788 = extractvalue { i32, i32, i32, i32 } %1781, 3, !dbg !174
  %1789 = bitcast i32 %1788 to <2 x bfloat>, !dbg !174
  %1790 = extractelement <2 x bfloat> %1783, i64 0, !dbg !174
  %1791 = extractelement <2 x bfloat> %1783, i64 1, !dbg !174
  %1792 = extractelement <2 x bfloat> %1785, i64 0, !dbg !174
  %1793 = extractelement <2 x bfloat> %1785, i64 1, !dbg !174
  %1794 = extractelement <2 x bfloat> %1787, i64 0, !dbg !174
  %1795 = extractelement <2 x bfloat> %1787, i64 1, !dbg !174
  %1796 = extractelement <2 x bfloat> %1789, i64 0, !dbg !174
  %1797 = extractelement <2 x bfloat> %1789, i64 1, !dbg !174
  %1798 = fpext bfloat %1773 to float, !dbg !175
  %1799 = fpext bfloat %1774 to float, !dbg !175
  %1800 = fpext bfloat %1775 to float, !dbg !175
  %1801 = fpext bfloat %1776 to float, !dbg !175
  %1802 = fpext bfloat %1777 to float, !dbg !175
  %1803 = fpext bfloat %1778 to float, !dbg !175
  %1804 = fpext bfloat %1779 to float, !dbg !175
  %1805 = fpext bfloat %1780 to float, !dbg !175
  %1806 = fpext bfloat %1790 to float, !dbg !175
  %1807 = fpext bfloat %1791 to float, !dbg !175
  %1808 = fpext bfloat %1792 to float, !dbg !175
  %1809 = fpext bfloat %1793 to float, !dbg !175
  %1810 = fpext bfloat %1794 to float, !dbg !175
  %1811 = fpext bfloat %1795 to float, !dbg !175
  %1812 = fpext bfloat %1796 to float, !dbg !175
  %1813 = fpext bfloat %1797 to float, !dbg !175
  %1814 = fmul float %1755, %1798, !dbg !170
  %1815 = fmul float %1755, %1799, !dbg !170
  %1816 = fmul float %1755, %1800, !dbg !170
  %1817 = fmul float %1755, %1801, !dbg !170
  %1818 = fmul float %1755, %1802, !dbg !170
  %1819 = fmul float %1755, %1803, !dbg !170
  %1820 = fmul float %1755, %1804, !dbg !170
  %1821 = fmul float %1755, %1805, !dbg !170
  %1822 = fmul float %1755, %1806, !dbg !170
  %1823 = fmul float %1755, %1807, !dbg !170
  %1824 = fmul float %1755, %1808, !dbg !170
  %1825 = fmul float %1755, %1809, !dbg !170
  %1826 = fmul float %1755, %1810, !dbg !170
  %1827 = fmul float %1755, %1811, !dbg !170
  %1828 = fmul float %1755, %1812, !dbg !170
  %1829 = fmul float %1755, %1813, !dbg !170
  %1830 = tail call float @llvm.nvvm.round.f(float %1814) #5, !dbg !176
  %1831 = tail call float @llvm.nvvm.round.f(float %1815) #5, !dbg !176
  %1832 = tail call float @llvm.nvvm.round.f(float %1816) #5, !dbg !176
  %1833 = tail call float @llvm.nvvm.round.f(float %1817) #5, !dbg !176
  %1834 = tail call float @llvm.nvvm.round.f(float %1818) #5, !dbg !176
  %1835 = tail call float @llvm.nvvm.round.f(float %1819) #5, !dbg !176
  %1836 = tail call float @llvm.nvvm.round.f(float %1820) #5, !dbg !176
  %1837 = tail call float @llvm.nvvm.round.f(float %1821) #5, !dbg !176
  %1838 = tail call float @llvm.nvvm.round.f(float %1822) #5, !dbg !176
  %1839 = tail call float @llvm.nvvm.round.f(float %1823) #5, !dbg !176
  %1840 = tail call float @llvm.nvvm.round.f(float %1824) #5, !dbg !176
  %1841 = tail call float @llvm.nvvm.round.f(float %1825) #5, !dbg !176
  %1842 = tail call float @llvm.nvvm.round.f(float %1826) #5, !dbg !176
  %1843 = tail call float @llvm.nvvm.round.f(float %1827) #5, !dbg !176
  %1844 = tail call float @llvm.nvvm.round.f(float %1828) #5, !dbg !176
  %1845 = tail call float @llvm.nvvm.round.f(float %1829) #5, !dbg !176
  %1846 = insertelement <4 x float> poison, float %1830, i64 0, !dbg !177
  %1847 = insertelement <4 x float> %1846, float %1831, i64 1, !dbg !177
  %1848 = insertelement <4 x float> %1847, float %1832, i64 2, !dbg !177
  %1849 = insertelement <4 x float> %1848, float %1833, i64 3, !dbg !177
  %1850 = fcmp ogt <4 x float> %1849, splat (float -1.270000e+02), !dbg !177
  %1851 = fcmp uno <4 x float> %1849, zeroinitializer, !dbg !179
  %1852 = or <4 x i1> %1850, %1851, !dbg !180
  %1853 = select <4 x i1> %1852, <4 x float> %1849, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1854 = fcmp olt <4 x float> %1853, splat (float 1.270000e+02), !dbg !182
  %1855 = fcmp uno <4 x float> %1853, zeroinitializer, !dbg !184
  %1856 = or <4 x i1> %1854, %1855, !dbg !185
  %1857 = fptosi <4 x float> %1853 to <4 x i8>, !dbg !186
  %1858 = select <4 x i1> %1856, <4 x i8> %1857, <4 x i8> splat (i8 127), !dbg !187
  %1859 = insertelement <4 x float> poison, float %1834, i64 0, !dbg !177
  %1860 = insertelement <4 x float> %1859, float %1835, i64 1, !dbg !177
  %1861 = insertelement <4 x float> %1860, float %1836, i64 2, !dbg !177
  %1862 = insertelement <4 x float> %1861, float %1837, i64 3, !dbg !177
  %1863 = fcmp ogt <4 x float> %1862, splat (float -1.270000e+02), !dbg !177
  %1864 = fcmp uno <4 x float> %1862, zeroinitializer, !dbg !179
  %1865 = or <4 x i1> %1863, %1864, !dbg !180
  %1866 = select <4 x i1> %1865, <4 x float> %1862, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1867 = fcmp olt <4 x float> %1866, splat (float 1.270000e+02), !dbg !182
  %1868 = fcmp uno <4 x float> %1866, zeroinitializer, !dbg !184
  %1869 = or <4 x i1> %1867, %1868, !dbg !185
  %1870 = fptosi <4 x float> %1866 to <4 x i8>, !dbg !186
  %1871 = select <4 x i1> %1869, <4 x i8> %1870, <4 x i8> splat (i8 127), !dbg !187
  %1872 = insertelement <4 x float> poison, float %1838, i64 0, !dbg !177
  %1873 = insertelement <4 x float> %1872, float %1839, i64 1, !dbg !177
  %1874 = insertelement <4 x float> %1873, float %1840, i64 2, !dbg !177
  %1875 = insertelement <4 x float> %1874, float %1841, i64 3, !dbg !177
  %1876 = fcmp ogt <4 x float> %1875, splat (float -1.270000e+02), !dbg !177
  %1877 = fcmp uno <4 x float> %1875, zeroinitializer, !dbg !179
  %1878 = or <4 x i1> %1876, %1877, !dbg !180
  %1879 = select <4 x i1> %1878, <4 x float> %1875, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1880 = fcmp olt <4 x float> %1879, splat (float 1.270000e+02), !dbg !182
  %1881 = fcmp uno <4 x float> %1879, zeroinitializer, !dbg !184
  %1882 = or <4 x i1> %1880, %1881, !dbg !185
  %1883 = fptosi <4 x float> %1879 to <4 x i8>, !dbg !186
  %1884 = select <4 x i1> %1882, <4 x i8> %1883, <4 x i8> splat (i8 127), !dbg !187
  %1885 = insertelement <4 x float> poison, float %1842, i64 0, !dbg !177
  %1886 = insertelement <4 x float> %1885, float %1843, i64 1, !dbg !177
  %1887 = insertelement <4 x float> %1886, float %1844, i64 2, !dbg !177
  %1888 = insertelement <4 x float> %1887, float %1845, i64 3, !dbg !177
  %1889 = fcmp ogt <4 x float> %1888, splat (float -1.270000e+02), !dbg !177
  %1890 = fcmp uno <4 x float> %1888, zeroinitializer, !dbg !179
  %1891 = or <4 x i1> %1889, %1890, !dbg !180
  %1892 = select <4 x i1> %1891, <4 x float> %1888, <4 x float> splat (float -1.270000e+02), !dbg !181
  %1893 = fcmp olt <4 x float> %1892, splat (float 1.270000e+02), !dbg !182
  %1894 = fcmp uno <4 x float> %1892, zeroinitializer, !dbg !184
  %1895 = or <4 x i1> %1893, %1894, !dbg !185
  %1896 = fptosi <4 x float> %1892 to <4 x i8>, !dbg !186
  %1897 = select <4 x i1> %1895, <4 x i8> %1896, <4 x i8> splat (i8 127), !dbg !187
  %1898 = getelementptr i8, ptr addrspace(1) %12, i64 %1760, !dbg !188
  %1899 = bitcast <4 x i8> %1858 to i32, !dbg !189
  %1900 = bitcast <4 x i8> %1871 to i32, !dbg !189
  %1901 = bitcast <4 x i8> %1884 to i32, !dbg !189
  %1902 = bitcast <4 x i8> %1897 to i32, !dbg !189
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1899, i32 %1900, i32 %1901, i32 %1902, ptr addrspace(1) %1898, i1 %23) #5, !dbg !189
  %indvars.iv.next258 = add nuw nsw i64 %indvars.iv257, 1024, !dbg !171
  %1903 = icmp samesign ult i64 %indvars.iv257, 2048, !dbg !171
  br i1 %1903, label %1756, label %1904, !dbg !171

1904:                                             ; preds = %1756
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 112, column: 50, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 92, column: 24, scope: !6)
!102 = !DILocation(line: 110, column: 50, scope: !6)
!103 = !DILocation(line: 81, column: 31, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 53, scope: !6)
!107 = !DILocation(line: 87, column: 43, scope: !6)
!108 = !DILocation(line: 87, column: 35, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 42, scope: !6)
!111 = !DILocation(line: 89, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !114)
!114 = !DILocation(line: 111, column: 47, scope: !6)
!115 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !116)
!116 = !DILocation(line: 109, column: 47, scope: !6)
!117 = !DILocation(line: 86, column: 115, scope: !6)
!118 = !DILocation(line: 87, column: 50, scope: !6)
!119 = !DILocation(line: 88, column: 50, scope: !6)
!120 = !DILocation(line: 88, column: 103, scope: !6)
!121 = !DILocation(line: 89, column: 49, scope: !6)
!122 = !DILocation(line: 90, column: 49, scope: !6)
!123 = !DILocation(line: 90, column: 102, scope: !6)
!124 = !DILocation(line: 101, column: 24, scope: !6)
!125 = !DILocation(line: 103, column: 24, scope: !6)
!126 = !DILocation(line: 104, column: 24, scope: !6)
!127 = !DILocation(line: 106, column: 24, scope: !6)
!128 = !DILocation(line: 107, column: 24, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !116)
!131 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !116)
!132 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !116)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !114)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !114)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !114)
!136 = !DILocation(line: 113, column: 29, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !138)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !145)
!145 = !DILocation(line: 115, column: 40, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !145)
!148 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !145)
!149 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !145)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 140, column: 24, scope: !6)
!171 = !DILocation(line: 118, column: 40, scope: !6)
!172 = !DILocation(line: 124, column: 43, scope: !6)
!173 = !DILocation(line: 124, column: 36, scope: !6)
!174 = !DILocation(line: 124, column: 53, scope: !6)
!175 = !DILocation(line: 124, column: 115, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
