; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 1, !dbg !11
  %11 = and i32 %10, 510, !dbg !11
  %12 = mul i32 %7, 3072, !dbg !12
  %13 = zext nneg i32 %11 to i64, !dbg !13
  %14 = getelementptr bfloat, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %14, i1 true) #4, !dbg !15
  br i1 %8, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %6
  %16 = or disjoint i32 %11, %12, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr bfloat, ptr addrspace(1) %1, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %18, i1 false) #4, !dbg !18
  %20 = or disjoint i64 %13, 512, !dbg !19
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %21, i1 true) #4, !dbg !15
  %23 = trunc nuw nsw i64 %20 to i32, !dbg !16
  %24 = or disjoint i32 %12, %23, !dbg !16
  %25 = sext i32 %24 to i64, !dbg !17
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 false) #4, !dbg !18
  %28 = or disjoint i64 %13, 1024, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !14
  %30 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 true) #4, !dbg !15
  %31 = trunc nuw nsw i64 %28 to i32, !dbg !16
  %32 = add i32 %12, %31, !dbg !16
  %33 = sext i32 %32 to i64, !dbg !17
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %34, i1 false) #4, !dbg !18
  %36 = or disjoint i64 %13, 1536, !dbg !19
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !14
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 true) #4, !dbg !15
  %39 = trunc nuw nsw i64 %36 to i32, !dbg !16
  %40 = add i32 %12, %39, !dbg !16
  %41 = sext i32 %40 to i64, !dbg !17
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %41, !dbg !17
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 false) #4, !dbg !18
  %44 = or disjoint i64 %13, 2048, !dbg !19
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !14
  %46 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 true) #4, !dbg !15
  %47 = trunc nuw nsw i64 %44 to i32, !dbg !16
  %48 = add i32 %12, %47, !dbg !16
  %49 = sext i32 %48 to i64, !dbg !17
  %50 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49, !dbg !17
  %51 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %50, i1 false) #4, !dbg !18
  %52 = or disjoint i64 %13, 2560, !dbg !19
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !14
  %54 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 true) #4, !dbg !15
  %55 = trunc nuw nsw i64 %52 to i32, !dbg !16
  %56 = add i32 %12, %55, !dbg !16
  %57 = sext i32 %56 to i64, !dbg !17
  %58 = getelementptr bfloat, ptr addrspace(1) %1, i64 %57, !dbg !17
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %58, i1 false) #4, !dbg !18
  br label %.split2.us, !dbg !11

.split.us.preheader:                              ; preds = %6
  %60 = bitcast i32 %15 to <2 x bfloat>, !dbg !15
  %61 = or disjoint i32 %11, %12, !dbg !16
  %62 = sext i32 %61 to i64, !dbg !17
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !17
  %64 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %63, i1 true) #4, !dbg !18
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !18
  %66 = or disjoint i64 %13, 512, !dbg !19
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !14
  %68 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 true) #4, !dbg !15
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !15
  %70 = trunc nuw nsw i64 %66 to i32, !dbg !16
  %71 = or disjoint i32 %12, %70, !dbg !16
  %72 = sext i32 %71 to i64, !dbg !17
  %73 = getelementptr bfloat, ptr addrspace(1) %1, i64 %72, !dbg !17
  %74 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %73, i1 true) #4, !dbg !18
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !18
  %76 = or disjoint i64 %13, 1024, !dbg !19
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !14
  %78 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %77, i1 true) #4, !dbg !15
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !15
  %80 = trunc nuw nsw i64 %76 to i32, !dbg !16
  %81 = add i32 %12, %80, !dbg !16
  %82 = sext i32 %81 to i64, !dbg !17
  %83 = getelementptr bfloat, ptr addrspace(1) %1, i64 %82, !dbg !17
  %84 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %83, i1 true) #4, !dbg !18
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !18
  %86 = or disjoint i64 %13, 1536, !dbg !19
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !14
  %88 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %87, i1 true) #4, !dbg !15
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !15
  %90 = trunc nuw nsw i64 %86 to i32, !dbg !16
  %91 = add i32 %12, %90, !dbg !16
  %92 = sext i32 %91 to i64, !dbg !17
  %93 = getelementptr bfloat, ptr addrspace(1) %1, i64 %92, !dbg !17
  %94 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %93, i1 true) #4, !dbg !18
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !18
  %96 = or disjoint i64 %13, 2048, !dbg !19
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !14
  %98 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %97, i1 true) #4, !dbg !15
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !15
  %100 = trunc nuw nsw i64 %96 to i32, !dbg !16
  %101 = add i32 %12, %100, !dbg !16
  %102 = sext i32 %101 to i64, !dbg !17
  %103 = getelementptr bfloat, ptr addrspace(1) %1, i64 %102, !dbg !17
  %104 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %103, i1 true) #4, !dbg !18
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !18
  %106 = or disjoint i64 %13, 2560, !dbg !19
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !14
  %108 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %107, i1 true) #4, !dbg !15
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !15
  %110 = trunc nuw nsw i64 %106 to i32, !dbg !16
  %111 = add i32 %12, %110, !dbg !16
  %112 = sext i32 %111 to i64, !dbg !17
  %113 = getelementptr bfloat, ptr addrspace(1) %1, i64 %112, !dbg !17
  %114 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %113, i1 true) #4, !dbg !18
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !18
  %116 = fpext <2 x bfloat> %60 to <2 x float>, !dbg !20
  %117 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !21
  %118 = extractelement <2 x float> %116, i64 0, !dbg !22
  %119 = fsub float 0.000000e+00, %118, !dbg !22
  %120 = extractelement <2 x float> %116, i64 1, !dbg !22
  %121 = fsub float 0.000000e+00, %120, !dbg !22
  %122 = fmul float %119, 0x3FF7154760000000, !dbg !26
  %123 = tail call float @llvm.nvvm.ex2.approx.f(float %122), !dbg !26
  %124 = fmul float %121, 0x3FF7154760000000, !dbg !26
  %125 = tail call float @llvm.nvvm.ex2.approx.f(float %124), !dbg !26
  %126 = fadd float %123, 1.000000e+00, !dbg !27
  %127 = fadd float %125, 1.000000e+00, !dbg !27
  %128 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %126), !dbg !28
  %129 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %127), !dbg !28
  %130 = insertelement <2 x float> poison, float %128, i64 0, !dbg !29
  %131 = insertelement <2 x float> %130, float %129, i64 1, !dbg !29
  %132 = fmul <2 x float> %131, %116, !dbg !29
  %133 = fmul <2 x float> %132, %117, !dbg !30
  %134 = fadd <2 x float> %133, zeroinitializer, !dbg !31
  %135 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !20
  %136 = fpext <2 x bfloat> %75 to <2 x float>, !dbg !21
  %137 = extractelement <2 x float> %135, i64 0, !dbg !22
  %138 = fsub float 0.000000e+00, %137, !dbg !22
  %139 = extractelement <2 x float> %135, i64 1, !dbg !22
  %140 = fsub float 0.000000e+00, %139, !dbg !22
  %141 = fmul float %138, 0x3FF7154760000000, !dbg !26
  %142 = tail call float @llvm.nvvm.ex2.approx.f(float %141), !dbg !26
  %143 = fmul float %140, 0x3FF7154760000000, !dbg !26
  %144 = tail call float @llvm.nvvm.ex2.approx.f(float %143), !dbg !26
  %145 = fadd float %142, 1.000000e+00, !dbg !27
  %146 = fadd float %144, 1.000000e+00, !dbg !27
  %147 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %145), !dbg !28
  %148 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %146), !dbg !28
  %149 = insertelement <2 x float> poison, float %147, i64 0, !dbg !29
  %150 = insertelement <2 x float> %149, float %148, i64 1, !dbg !29
  %151 = fmul <2 x float> %150, %135, !dbg !29
  %152 = fmul <2 x float> %151, %136, !dbg !30
  %153 = fadd <2 x float> %134, %152, !dbg !31
  %154 = fpext <2 x bfloat> %79 to <2 x float>, !dbg !20
  %155 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !21
  %156 = extractelement <2 x float> %154, i64 0, !dbg !22
  %157 = fsub float 0.000000e+00, %156, !dbg !22
  %158 = extractelement <2 x float> %154, i64 1, !dbg !22
  %159 = fsub float 0.000000e+00, %158, !dbg !22
  %160 = fmul float %157, 0x3FF7154760000000, !dbg !26
  %161 = tail call float @llvm.nvvm.ex2.approx.f(float %160), !dbg !26
  %162 = fmul float %159, 0x3FF7154760000000, !dbg !26
  %163 = tail call float @llvm.nvvm.ex2.approx.f(float %162), !dbg !26
  %164 = fadd float %161, 1.000000e+00, !dbg !27
  %165 = fadd float %163, 1.000000e+00, !dbg !27
  %166 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %164), !dbg !28
  %167 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %165), !dbg !28
  %168 = insertelement <2 x float> poison, float %166, i64 0, !dbg !29
  %169 = insertelement <2 x float> %168, float %167, i64 1, !dbg !29
  %170 = fmul <2 x float> %169, %154, !dbg !29
  %171 = fmul <2 x float> %170, %155, !dbg !30
  %172 = fadd <2 x float> %153, %171, !dbg !31
  %173 = fpext <2 x bfloat> %89 to <2 x float>, !dbg !20
  %174 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !21
  %175 = extractelement <2 x float> %173, i64 0, !dbg !22
  %176 = fsub float 0.000000e+00, %175, !dbg !22
  %177 = extractelement <2 x float> %173, i64 1, !dbg !22
  %178 = fsub float 0.000000e+00, %177, !dbg !22
  %179 = fmul float %176, 0x3FF7154760000000, !dbg !26
  %180 = tail call float @llvm.nvvm.ex2.approx.f(float %179), !dbg !26
  %181 = fmul float %178, 0x3FF7154760000000, !dbg !26
  %182 = tail call float @llvm.nvvm.ex2.approx.f(float %181), !dbg !26
  %183 = fadd float %180, 1.000000e+00, !dbg !27
  %184 = fadd float %182, 1.000000e+00, !dbg !27
  %185 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %183), !dbg !28
  %186 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %184), !dbg !28
  %187 = insertelement <2 x float> poison, float %185, i64 0, !dbg !29
  %188 = insertelement <2 x float> %187, float %186, i64 1, !dbg !29
  %189 = fmul <2 x float> %188, %173, !dbg !29
  %190 = fmul <2 x float> %189, %174, !dbg !30
  %191 = fadd <2 x float> %172, %190, !dbg !31
  %192 = fpext <2 x bfloat> %99 to <2 x float>, !dbg !20
  %193 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !21
  %194 = extractelement <2 x float> %192, i64 0, !dbg !22
  %195 = fsub float 0.000000e+00, %194, !dbg !22
  %196 = extractelement <2 x float> %192, i64 1, !dbg !22
  %197 = fsub float 0.000000e+00, %196, !dbg !22
  %198 = fmul float %195, 0x3FF7154760000000, !dbg !26
  %199 = tail call float @llvm.nvvm.ex2.approx.f(float %198), !dbg !26
  %200 = fmul float %197, 0x3FF7154760000000, !dbg !26
  %201 = tail call float @llvm.nvvm.ex2.approx.f(float %200), !dbg !26
  %202 = fadd float %199, 1.000000e+00, !dbg !27
  %203 = fadd float %201, 1.000000e+00, !dbg !27
  %204 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %202), !dbg !28
  %205 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %203), !dbg !28
  %206 = insertelement <2 x float> poison, float %204, i64 0, !dbg !29
  %207 = insertelement <2 x float> %206, float %205, i64 1, !dbg !29
  %208 = fmul <2 x float> %207, %192, !dbg !29
  %209 = fmul <2 x float> %208, %193, !dbg !30
  %210 = fadd <2 x float> %191, %209, !dbg !31
  %211 = fpext <2 x bfloat> %109 to <2 x float>, !dbg !20
  %212 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !21
  %213 = extractelement <2 x float> %211, i64 0, !dbg !22
  %214 = fsub float 0.000000e+00, %213, !dbg !22
  %215 = extractelement <2 x float> %211, i64 1, !dbg !22
  %216 = fsub float 0.000000e+00, %215, !dbg !22
  %217 = fmul float %214, 0x3FF7154760000000, !dbg !26
  %218 = tail call float @llvm.nvvm.ex2.approx.f(float %217), !dbg !26
  %219 = fmul float %216, 0x3FF7154760000000, !dbg !26
  %220 = tail call float @llvm.nvvm.ex2.approx.f(float %219), !dbg !26
  %221 = fadd float %218, 1.000000e+00, !dbg !27
  %222 = fadd float %220, 1.000000e+00, !dbg !27
  %223 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %221), !dbg !28
  %224 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %222), !dbg !28
  %225 = insertelement <2 x float> poison, float %223, i64 0, !dbg !29
  %226 = insertelement <2 x float> %225, float %224, i64 1, !dbg !29
  %227 = fmul <2 x float> %226, %211, !dbg !29
  %228 = fmul <2 x float> %227, %212, !dbg !30
  %229 = fadd <2 x float> %210, %228, !dbg !31
  %shift = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !11
  %230 = fadd <2 x float> %229, %shift, !dbg !11
  %231 = extractelement <2 x float> %230, i64 0, !dbg !11
  br label %.split2.us, !dbg !11

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %232 = phi float [ %231, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !32
  %233 = lshr i32 %9, 5, !dbg !11
  %234 = and i32 %9, 31, !dbg !11
  %235 = bitcast float %232 to i32, !dbg !35
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 16, i32 31), !dbg !35
  %237 = bitcast i32 %236 to float, !dbg !35
  %238 = fadd float %232, %237, !dbg !32
  %239 = bitcast float %238 to i32, !dbg !35
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !35
  %241 = bitcast i32 %240 to float, !dbg !35
  %242 = fadd float %238, %241, !dbg !32
  %243 = bitcast float %242 to i32, !dbg !35
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !35
  %245 = bitcast i32 %244 to float, !dbg !35
  %246 = fadd float %242, %245, !dbg !32
  %247 = bitcast float %246 to i32, !dbg !35
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !35
  %249 = bitcast i32 %248 to float, !dbg !35
  %250 = fadd float %246, %249, !dbg !32
  %251 = bitcast float %250 to i32, !dbg !35
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !35
  %253 = bitcast i32 %252 to float, !dbg !35
  %254 = fadd float %250, %253, !dbg !32
  %255 = and i32 %233, 7, !dbg !35
  %256 = icmp eq i32 %234, 0, !dbg !35
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %255, !dbg !35
  %258 = bitcast float %254 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 %256) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %259 = icmp slt i32 %9, 8, !dbg !35
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %261 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %260, i1 %259) #4, !dbg !35
  %262 = bitcast i32 %261 to float, !dbg !35
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !35
  %264 = bitcast i32 %263 to float, !dbg !35
  %265 = fadd float %262, %264, !dbg !32
  %266 = bitcast float %265 to i32, !dbg !35
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !35
  %268 = bitcast i32 %267 to float, !dbg !35
  %269 = fadd float %265, %268, !dbg !32
  %270 = bitcast float %269 to i32, !dbg !35
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !35
  %272 = bitcast i32 %271 to float, !dbg !35
  %273 = fadd float %269, %272, !dbg !32
  %274 = and i32 %9, 7, !dbg !35
  %275 = icmp eq i32 %274, 0, !dbg !35
  %276 = and i1 %259, %275, !dbg !35
  %277 = bitcast float %273 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %277, i1 %276) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %278 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %279 = sext i32 %7 to i64, !dbg !36
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %279, !dbg !36
  %281 = and i32 %9, 255, !dbg !37
  %282 = icmp eq i32 %281, 0, !dbg !37
  %283 = and i1 %8, %282, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %278, ptr addrspace(1) %280, i1 %283) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 41, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 31, column: 31, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 113, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!34 = !DILocation(line: 48, column: 27, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !34)
!36 = !DILocation(line: 49, column: 25, scope: !6)
!37 = !DILocation(line: 49, column: 37, scope: !6)
!38 = !DILocation(line: 49, column: 4, scope: !6)
