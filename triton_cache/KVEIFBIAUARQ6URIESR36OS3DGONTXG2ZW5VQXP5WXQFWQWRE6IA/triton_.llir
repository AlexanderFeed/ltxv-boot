; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = shl i32 %5, 12, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 3, !dbg !11
  %9 = and i32 %8, 504, !dbg !11
  %10 = or disjoint i32 %9, %6, !dbg !12
  %11 = or disjoint i32 %10, 512, !dbg !12
  %12 = or disjoint i32 %10, 1024, !dbg !12
  %13 = or disjoint i32 %10, 1536, !dbg !12
  %14 = or disjoint i32 %10, 2048, !dbg !12
  %15 = or disjoint i32 %10, 2560, !dbg !12
  %16 = or disjoint i32 %10, 3072, !dbg !12
  %17 = or disjoint i32 %10, 3584, !dbg !12
  %18 = sdiv i32 %10, 64, !dbg !13
  %19 = mul i32 %18, 64, !dbg !14
  %.decomposed = sub i32 %10, %19, !dbg !14
  %20 = sdiv i32 %11, 64, !dbg !13
  %21 = sdiv i32 %12, 64, !dbg !13
  %22 = sdiv i32 %13, 64, !dbg !13
  %23 = sdiv i32 %14, 64, !dbg !13
  %24 = sdiv i32 %15, 64, !dbg !13
  %25 = sdiv i32 %16, 64, !dbg !13
  %26 = sdiv i32 %17, 64, !dbg !13
  %27 = srem i32 %18, 64, !dbg !15
  %28 = srem i32 %20, 64, !dbg !15
  %29 = srem i32 %21, 64, !dbg !15
  %30 = srem i32 %22, 64, !dbg !15
  %31 = srem i32 %23, 64, !dbg !15
  %32 = srem i32 %24, 64, !dbg !15
  %33 = srem i32 %25, 64, !dbg !15
  %34 = srem i32 %26, 64, !dbg !15
  %35 = sdiv i32 %10, 4096, !dbg !16
  %36 = sdiv i32 %11, 4096, !dbg !16
  %37 = sdiv i32 %12, 4096, !dbg !16
  %38 = sdiv i32 %13, 4096, !dbg !16
  %39 = sdiv i32 %14, 4096, !dbg !16
  %40 = sdiv i32 %15, 4096, !dbg !16
  %41 = sdiv i32 %16, 4096, !dbg !16
  %42 = sdiv i32 %17, 4096, !dbg !16
  %43 = shl nsw i32 %35, 6, !dbg !17
  %44 = shl nsw i32 %36, 6, !dbg !17
  %45 = shl nsw i32 %37, 6, !dbg !17
  %46 = shl nsw i32 %38, 6, !dbg !17
  %47 = shl nsw i32 %39, 6, !dbg !17
  %48 = shl nsw i32 %40, 6, !dbg !17
  %49 = shl nsw i32 %41, 6, !dbg !17
  %50 = shl nsw i32 %42, 6, !dbg !17
  %51 = add nsw i32 %43, %.decomposed, !dbg !18
  %52 = add nsw i32 %44, %.decomposed, !dbg !18
  %53 = add nsw i32 %45, %.decomposed, !dbg !18
  %54 = add nsw i32 %46, %.decomposed, !dbg !18
  %55 = add nsw i32 %47, %.decomposed, !dbg !18
  %56 = add nsw i32 %48, %.decomposed, !dbg !18
  %57 = add nsw i32 %49, %.decomposed, !dbg !18
  %58 = add nsw i32 %50, %.decomposed, !dbg !18
  %59 = shl nsw i32 %27, 15, !dbg !19
  %60 = shl nsw i32 %28, 15, !dbg !19
  %61 = shl nsw i32 %29, 15, !dbg !19
  %62 = shl nsw i32 %30, 15, !dbg !19
  %63 = shl nsw i32 %31, 15, !dbg !19
  %64 = shl nsw i32 %32, 15, !dbg !19
  %65 = shl nsw i32 %33, 15, !dbg !19
  %66 = shl nsw i32 %34, 15, !dbg !19
  %67 = add nsw i32 %51, %59, !dbg !20
  %68 = add nsw i32 %52, %60, !dbg !20
  %69 = add nsw i32 %53, %61, !dbg !20
  %70 = add nsw i32 %54, %62, !dbg !20
  %71 = add nsw i32 %55, %63, !dbg !20
  %72 = add nsw i32 %56, %64, !dbg !20
  %73 = add nsw i32 %57, %65, !dbg !20
  %74 = add nsw i32 %58, %66, !dbg !20
  %75 = sext i32 %67 to i64, !dbg !21
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !21
  %77 = sext i32 %68 to i64, !dbg !21
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !21
  %79 = sext i32 %69 to i64, !dbg !21
  %80 = getelementptr bfloat, ptr addrspace(1) %0, i64 %79, !dbg !21
  %81 = sext i32 %70 to i64, !dbg !21
  %82 = getelementptr bfloat, ptr addrspace(1) %0, i64 %81, !dbg !21
  %83 = sext i32 %71 to i64, !dbg !21
  %84 = getelementptr bfloat, ptr addrspace(1) %0, i64 %83, !dbg !21
  %85 = sext i32 %72 to i64, !dbg !21
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !21
  %87 = sext i32 %73 to i64, !dbg !21
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !21
  %89 = sext i32 %74 to i64, !dbg !21
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !21
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %76) #1, !dbg !22
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !22
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !22
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !22
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !22
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %78) #1, !dbg !22
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !22
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !22
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !22
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %80) #1, !dbg !22
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !22
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !22
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !22
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !22
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %82) #1, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !22
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !22
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %84) #1, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !22
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !22
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !22
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !22
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %86) #1, !dbg !22
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !22
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !22
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !22
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %88) #1, !dbg !22
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !22
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !22
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !22
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !22
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %90) #1, !dbg !22
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !22
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !22
  %131 = sext i32 %10 to i64, !dbg !23
  %132 = getelementptr bfloat, ptr addrspace(1) %1, i64 %131, !dbg !23
  %133 = sext i32 %11 to i64, !dbg !23
  %134 = getelementptr bfloat, ptr addrspace(1) %1, i64 %133, !dbg !23
  %135 = sext i32 %12 to i64, !dbg !23
  %136 = getelementptr bfloat, ptr addrspace(1) %1, i64 %135, !dbg !23
  %137 = sext i32 %13 to i64, !dbg !23
  %138 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !23
  %139 = sext i32 %14 to i64, !dbg !23
  %140 = getelementptr bfloat, ptr addrspace(1) %1, i64 %139, !dbg !23
  %141 = sext i32 %15 to i64, !dbg !23
  %142 = getelementptr bfloat, ptr addrspace(1) %1, i64 %141, !dbg !23
  %143 = sext i32 %16 to i64, !dbg !23
  %144 = getelementptr bfloat, ptr addrspace(1) %1, i64 %143, !dbg !23
  %145 = sext i32 %17 to i64, !dbg !23
  %146 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !23
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %92, i32 %93, i32 %94, i32 %95, ptr addrspace(1) %132) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %97, i32 %98, i32 %99, i32 %100, ptr addrspace(1) %134) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %102, i32 %103, i32 %104, i32 %105, ptr addrspace(1) %136) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %107, i32 %108, i32 %109, i32 %110, ptr addrspace(1) %138) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %112, i32 %113, i32 %114, i32 %115, ptr addrspace(1) %140) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %142) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %122, i32 %123, i32 %124, i32 %125, ptr addrspace(1) %144) #1, !dbg !24
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %127, i32 %128, i32 %129, i32 %130, ptr addrspace(1) %146) #1, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4fb53p3khoksiicnjxz32r746ec27pwbi2z5fdym2iavt7tpzut.py", directory: "/tmp/torchinductor_root/4f")
!4 = !{ptr @triton_, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 28, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 27, scope: !6)
!16 = !DILocation(line: 29, column: 19, scope: !6)
!17 = !DILocation(line: 31, column: 38, scope: !6)
!18 = !DILocation(line: 31, column: 35, scope: !6)
!19 = !DILocation(line: 31, column: 49, scope: !6)
!20 = !DILocation(line: 31, column: 43, scope: !6)
!21 = !DILocation(line: 31, column: 30, scope: !6)
!22 = !DILocation(line: 31, column: 54, scope: !6)
!23 = !DILocation(line: 32, column: 25, scope: !6)
!24 = !DILocation(line: 32, column: 36, scope: !6)
!25 = !DILocation(line: 32, column: 4, scope: !6)
