; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 8, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 8, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %15, 128, !dbg !19
  %21 = lshr exact i32 %20, 2, !dbg !19
  %22 = and i32 %17, 31, !dbg !19
  %23 = or disjoint i32 %22, %21, !dbg !19
  %24 = lshr i32 %15, 3, !dbg !19
  %25 = and i32 %24, 31, !dbg !19
  %26 = or disjoint i32 %14, %23, !dbg !20
  %27 = or disjoint i32 %26, 64, !dbg !20
  %28 = shl nsw i32 %13, 6, !dbg !21
  %29 = shl i32 %15, 3, !dbg !22
  %30 = and i32 %29, 8, !dbg !22
  %31 = and i32 %15, 2, !dbg !22
  %32 = shl nuw nsw i32 %31, 3, !dbg !22
  %33 = or disjoint i32 %30, %32, !dbg !22
  %34 = shl nuw nsw i32 %16, 3, !dbg !22
  %35 = or disjoint i32 %33, %34, !dbg !22
  %36 = or disjoint i32 %28, %35, !dbg !23
  %37 = srem i32 %26, 512, !dbg !24
  %38 = srem i32 %27, 512, !dbg !24
  %39 = srem i32 %36, 64, !dbg !25
  %40 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %41 = shl nsw i32 %37, 9, !dbg !27
  %42 = shl nsw i32 %38, 9, !dbg !27
  %43 = shl i32 %40, 18, !dbg !28
  %44 = or disjoint i32 %33, %43, !dbg !29
  %45 = add i32 %44, %41, !dbg !30
  %46 = add i32 %44, %42, !dbg !30
  %47 = sext i32 %45 to i64, !dbg !31
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !31
  %49 = sext i32 %46 to i64, !dbg !31
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = shl nuw nsw i32 %25, 12, !dbg !32
  %52 = shl i32 %40, 6, !dbg !33
  %53 = add i32 %51, %52, !dbg !34
  %54 = add i32 %53, %39, !dbg !35
  %55 = sext i32 %54 to i64, !dbg !36
  %56 = getelementptr bfloat, ptr addrspace(1) %1, i64 %55, !dbg !36
  %and.ra = and i32 %15, 24, !dbg !37
  %57 = xor i32 %33, %and.ra, !dbg !37
  %58 = shl nuw nsw i32 %23, 5, !dbg !37
  %59 = or disjoint i32 %58, %57, !dbg !37
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %59, !dbg !37
  %61 = and i32 %17, 31, !dbg !37
  %62 = or disjoint i32 %61, %21, !dbg !37
  %63 = shl nuw nsw i32 %62, 5, !dbg !37
  %64 = or disjoint i32 %63, %57, !dbg !37
  %65 = or disjoint i32 %64, 2048, !dbg !37
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %65, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %60, ptr addrspace(1) %48, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %66, ptr addrspace(1) %50, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %and.ra132 = and i32 %15, 56, !dbg !38
  %67 = xor i32 %35, %and.ra132, !dbg !38
  %68 = shl nuw nsw i32 %25, 6, !dbg !38
  %69 = or disjoint i32 %67, %68, !dbg !38
  %70 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %69, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %56, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %71 = getelementptr i8, ptr addrspace(1) %48, i64 64, !dbg !39
  %72 = getelementptr i8, ptr addrspace(1) %50, i64 64, !dbg !39
  %73 = getelementptr i8, ptr addrspace(1) %56, i64 262144, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %59, !dbg !37
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %65, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %71, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %75, ptr addrspace(1) %72, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 28672), i32 %69, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %73, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %77 = getelementptr i8, ptr addrspace(1) %48, i64 128, !dbg !39
  %78 = getelementptr i8, ptr addrspace(1) %50, i64 128, !dbg !39
  %79 = getelementptr i8, ptr addrspace(1) %56, i64 524288, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %59, !dbg !37
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %65, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %77, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %78, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %69, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %79, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %83 = shl nuw nsw i32 %31, 2
  %84 = shl nuw nsw i32 %16, 2
  %85 = or disjoint i32 %83, %84
  %86 = and i32 %15, 15
  %87 = lshr i32 %15, 1
  %88 = and i32 %87, 8
  %89 = xor i32 %85, %88
  %90 = or disjoint i32 %19, %86
  %91 = or disjoint i32 %90, %21
  %92 = shl nuw nsw i32 %91, 5
  %93 = or disjoint i32 %92, %89
  %94 = or disjoint i32 %83, 16
  %95 = or disjoint i32 %88, %84
  %96 = xor i32 %95, %94
  %97 = or disjoint i32 %96, %92
  %98 = or disjoint i32 %92, 2048
  %99 = or disjoint i32 %98, %89
  %100 = or disjoint i32 %98, %96
  %101 = xor i32 %35, %18
  %102 = shl i32 %15, 6
  %103 = and i32 %102, 1984
  %104 = or disjoint i32 %101, %103
  %105 = or disjoint i32 %30, 16
  %106 = xor i32 %105, %32
  %107 = or disjoint i32 %106, %34
  %108 = xor i32 %107, %18
  %109 = or disjoint i32 %108, %103
  %110 = or disjoint i32 %33, 32
  %111 = or disjoint i32 %18, %34
  %112 = xor i32 %111, %110
  %113 = or disjoint i32 %112, %103
  %114 = or disjoint i32 %30, 48
  %115 = or disjoint i32 %111, %32
  %116 = xor i32 %115, %114
  %117 = or disjoint i32 %116, %103
  br label %118, !dbg !41

118:                                              ; preds = %4, %118
  %119 = phi i32 [ -1, %4 ], [ %157, %118 ]
  %120 = phi i32 [ 2, %4 ], [ %301, %118 ]
  %.pn50135 = phi ptr addrspace(1) [ %79, %4 ], [ %298, %118 ]
  %.pn18134 = phi ptr addrspace(1) [ %78, %4 ], [ %297, %118 ]
  %.pn34133 = phi ptr addrspace(1) [ %77, %4 ], [ %296, %118 ]
  %121 = phi float [ 0.000000e+00, %4 ], [ %257, %118 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %258, %118 ]
  %123 = phi float [ 0.000000e+00, %4 ], [ %259, %118 ]
  %124 = phi float [ 0.000000e+00, %4 ], [ %260, %118 ]
  %125 = phi float [ 0.000000e+00, %4 ], [ %262, %118 ]
  %126 = phi float [ 0.000000e+00, %4 ], [ %263, %118 ]
  %127 = phi float [ 0.000000e+00, %4 ], [ %264, %118 ]
  %128 = phi float [ 0.000000e+00, %4 ], [ %265, %118 ]
  %129 = phi float [ 0.000000e+00, %4 ], [ %267, %118 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %268, %118 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %269, %118 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %270, %118 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %272, %118 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %273, %118 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %274, %118 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %275, %118 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %277, %118 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %278, %118 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %279, %118 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %280, %118 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %282, %118 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %283, %118 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %284, %118 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %285, %118 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %287, %118 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %288, %118 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %289, %118 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %290, %118 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %292, %118 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %293, %118 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %294, %118 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %295, %118 ]
  %153 = phi i32 [ 0, %4 ], [ %306, %118 ]
  %154 = icmp samesign ult i32 %153, 416, !dbg !41
  %155 = add i32 %119, 1, !dbg !41
  %156 = icmp slt i32 %155, 3, !dbg !41
  %157 = select i1 %156, i32 %155, i32 0, !dbg !41
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %.idx = shl i32 %157, 13, !dbg !37
  %158 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !37
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %93, !dbg !37
  %160 = ptrtoint ptr addrspace(3) %159 to i32, !dbg !37
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %160) #1, !dbg !37
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !37
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !37
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !37
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %97, !dbg !37
  %167 = ptrtoint ptr addrspace(3) %166 to i32, !dbg !37
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %167) #1, !dbg !37
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !37
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !37
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !37
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !37
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %99, !dbg !37
  %174 = ptrtoint ptr addrspace(3) %173 to i32, !dbg !37
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %174) #1, !dbg !37
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !37
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !37
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !37
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %158, i32 %100, !dbg !37
  %181 = ptrtoint ptr addrspace(3) %180 to i32, !dbg !37
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %181) #1, !dbg !37
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !37
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !37
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !37
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !37
  %.idx97 = shl i32 %157, 12, !dbg !38
  %187 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %.idx97, !dbg !38
  %188 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %187, i32 %104, !dbg !38
  %189 = ptrtoint ptr addrspace(3) %188 to i32, !dbg !38
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %189) #1, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !38
  %195 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %187, i32 %109, !dbg !38
  %196 = ptrtoint ptr addrspace(3) %195 to i32, !dbg !38
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %196) #1, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !38
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !38
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !38
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %187, i32 %113, !dbg !38
  %203 = ptrtoint ptr addrspace(3) %202 to i32, !dbg !38
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %203) #1, !dbg !38
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !38
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !38
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !38
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %187, i32 %117, !dbg !38
  %210 = ptrtoint ptr addrspace(3) %209 to i32, !dbg !38
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %210) #1, !dbg !38
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !38
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !38
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !38
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !38
  %216 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %121, float %122, float %123, float %124, i32 %162, i32 %163, i32 %164, i32 %165, i32 %191, i32 %192) #1, !dbg !42
  %217 = extractvalue { float, float, float, float } %216, 0, !dbg !42
  %218 = extractvalue { float, float, float, float } %216, 1, !dbg !42
  %219 = extractvalue { float, float, float, float } %216, 2, !dbg !42
  %220 = extractvalue { float, float, float, float } %216, 3, !dbg !42
  %221 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %125, float %126, float %127, float %128, i32 %162, i32 %163, i32 %164, i32 %165, i32 %198, i32 %199) #1, !dbg !42
  %222 = extractvalue { float, float, float, float } %221, 0, !dbg !42
  %223 = extractvalue { float, float, float, float } %221, 1, !dbg !42
  %224 = extractvalue { float, float, float, float } %221, 2, !dbg !42
  %225 = extractvalue { float, float, float, float } %221, 3, !dbg !42
  %226 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %129, float %130, float %131, float %132, i32 %162, i32 %163, i32 %164, i32 %165, i32 %205, i32 %206) #1, !dbg !42
  %227 = extractvalue { float, float, float, float } %226, 0, !dbg !42
  %228 = extractvalue { float, float, float, float } %226, 1, !dbg !42
  %229 = extractvalue { float, float, float, float } %226, 2, !dbg !42
  %230 = extractvalue { float, float, float, float } %226, 3, !dbg !42
  %231 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %133, float %134, float %135, float %136, i32 %162, i32 %163, i32 %164, i32 %165, i32 %212, i32 %213) #1, !dbg !42
  %232 = extractvalue { float, float, float, float } %231, 0, !dbg !42
  %233 = extractvalue { float, float, float, float } %231, 1, !dbg !42
  %234 = extractvalue { float, float, float, float } %231, 2, !dbg !42
  %235 = extractvalue { float, float, float, float } %231, 3, !dbg !42
  %236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %137, float %138, float %139, float %140, i32 %176, i32 %177, i32 %178, i32 %179, i32 %191, i32 %192) #1, !dbg !42
  %237 = extractvalue { float, float, float, float } %236, 0, !dbg !42
  %238 = extractvalue { float, float, float, float } %236, 1, !dbg !42
  %239 = extractvalue { float, float, float, float } %236, 2, !dbg !42
  %240 = extractvalue { float, float, float, float } %236, 3, !dbg !42
  %241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %141, float %142, float %143, float %144, i32 %176, i32 %177, i32 %178, i32 %179, i32 %198, i32 %199) #1, !dbg !42
  %242 = extractvalue { float, float, float, float } %241, 0, !dbg !42
  %243 = extractvalue { float, float, float, float } %241, 1, !dbg !42
  %244 = extractvalue { float, float, float, float } %241, 2, !dbg !42
  %245 = extractvalue { float, float, float, float } %241, 3, !dbg !42
  %246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %145, float %146, float %147, float %148, i32 %176, i32 %177, i32 %178, i32 %179, i32 %205, i32 %206) #1, !dbg !42
  %247 = extractvalue { float, float, float, float } %246, 0, !dbg !42
  %248 = extractvalue { float, float, float, float } %246, 1, !dbg !42
  %249 = extractvalue { float, float, float, float } %246, 2, !dbg !42
  %250 = extractvalue { float, float, float, float } %246, 3, !dbg !42
  %251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %149, float %150, float %151, float %152, i32 %176, i32 %177, i32 %178, i32 %179, i32 %212, i32 %213) #1, !dbg !42
  %252 = extractvalue { float, float, float, float } %251, 0, !dbg !42
  %253 = extractvalue { float, float, float, float } %251, 1, !dbg !42
  %254 = extractvalue { float, float, float, float } %251, 2, !dbg !42
  %255 = extractvalue { float, float, float, float } %251, 3, !dbg !42
  %256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %169, i32 %170, i32 %171, i32 %172, i32 %193, i32 %194) #1, !dbg !42
  %257 = extractvalue { float, float, float, float } %256, 0, !dbg !42
  %258 = extractvalue { float, float, float, float } %256, 1, !dbg !42
  %259 = extractvalue { float, float, float, float } %256, 2, !dbg !42
  %260 = extractvalue { float, float, float, float } %256, 3, !dbg !42
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %222, float %223, float %224, float %225, i32 %169, i32 %170, i32 %171, i32 %172, i32 %200, i32 %201) #1, !dbg !42
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !42
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !42
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !42
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !42
  %266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %227, float %228, float %229, float %230, i32 %169, i32 %170, i32 %171, i32 %172, i32 %207, i32 %208) #1, !dbg !42
  %267 = extractvalue { float, float, float, float } %266, 0, !dbg !42
  %268 = extractvalue { float, float, float, float } %266, 1, !dbg !42
  %269 = extractvalue { float, float, float, float } %266, 2, !dbg !42
  %270 = extractvalue { float, float, float, float } %266, 3, !dbg !42
  %271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %232, float %233, float %234, float %235, i32 %169, i32 %170, i32 %171, i32 %172, i32 %214, i32 %215) #1, !dbg !42
  %272 = extractvalue { float, float, float, float } %271, 0, !dbg !42
  %273 = extractvalue { float, float, float, float } %271, 1, !dbg !42
  %274 = extractvalue { float, float, float, float } %271, 2, !dbg !42
  %275 = extractvalue { float, float, float, float } %271, 3, !dbg !42
  %276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %237, float %238, float %239, float %240, i32 %183, i32 %184, i32 %185, i32 %186, i32 %193, i32 %194) #1, !dbg !42
  %277 = extractvalue { float, float, float, float } %276, 0, !dbg !42
  %278 = extractvalue { float, float, float, float } %276, 1, !dbg !42
  %279 = extractvalue { float, float, float, float } %276, 2, !dbg !42
  %280 = extractvalue { float, float, float, float } %276, 3, !dbg !42
  %281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %242, float %243, float %244, float %245, i32 %183, i32 %184, i32 %185, i32 %186, i32 %200, i32 %201) #1, !dbg !42
  %282 = extractvalue { float, float, float, float } %281, 0, !dbg !42
  %283 = extractvalue { float, float, float, float } %281, 1, !dbg !42
  %284 = extractvalue { float, float, float, float } %281, 2, !dbg !42
  %285 = extractvalue { float, float, float, float } %281, 3, !dbg !42
  %286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %247, float %248, float %249, float %250, i32 %183, i32 %184, i32 %185, i32 %186, i32 %207, i32 %208) #1, !dbg !42
  %287 = extractvalue { float, float, float, float } %286, 0, !dbg !42
  %288 = extractvalue { float, float, float, float } %286, 1, !dbg !42
  %289 = extractvalue { float, float, float, float } %286, 2, !dbg !42
  %290 = extractvalue { float, float, float, float } %286, 3, !dbg !42
  %291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %252, float %253, float %254, float %255, i32 %183, i32 %184, i32 %185, i32 %186, i32 %214, i32 %215) #1, !dbg !42
  %292 = extractvalue { float, float, float, float } %291, 0, !dbg !42
  %293 = extractvalue { float, float, float, float } %291, 1, !dbg !42
  %294 = extractvalue { float, float, float, float } %291, 2, !dbg !42
  %295 = extractvalue { float, float, float, float } %291, 3, !dbg !42
  %296 = getelementptr i8, ptr addrspace(1) %.pn34133, i64 64, !dbg !39
  %297 = getelementptr i8, ptr addrspace(1) %.pn18134, i64 64, !dbg !39
  %298 = getelementptr i8, ptr addrspace(1) %.pn50135, i64 262144, !dbg !40
  %299 = add i32 %120, 1, !dbg !41
  %300 = icmp slt i32 %299, 3, !dbg !41
  %301 = select i1 %300, i32 %299, i32 0, !dbg !41
  %.idx98 = shl i32 %301, 13, !dbg !37
  %302 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx98, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %303 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %302, i32 %59, !dbg !37
  %304 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %302, i32 %65, !dbg !37
  %305 = select i1 %154, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %303, ptr addrspace(1) %296, i32 %305) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %304, ptr addrspace(1) %297, i32 %305) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx99 = shl i32 %301, 12, !dbg !38
  %gep = getelementptr i8, ptr addrspace(3) %70, i32 %.idx99, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %298, i32 %305) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %306 = add nuw nsw i32 %153, 32, !dbg !41
  %307 = icmp samesign ult i32 %153, 480, !dbg !41
  br i1 %307, label %118, label %308, !dbg !41

308:                                              ; preds = %118
  %309 = or disjoint i32 %14, %25, !dbg !19
  %310 = or disjoint i32 %309, 96, !dbg !20
  %311 = or disjoint i32 %309, 64, !dbg !20
  %312 = or disjoint i32 %309, 32, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %313 = icmp slt i32 %309, 512, !dbg !43
  %314 = icmp slt i32 %312, 512, !dbg !43
  %315 = icmp slt i32 %311, 512, !dbg !43
  %316 = icmp slt i32 %310, 512, !dbg !43
  %317 = icmp slt i32 %36, 64, !dbg !44
  %318 = and i1 %313, %317, !dbg !45
  %319 = and i1 %314, %317, !dbg !45
  %320 = and i1 %315, %317, !dbg !45
  %321 = and i1 %316, %317, !dbg !45
  %322 = shl i32 %309, 6, !dbg !46
  %323 = shl i32 %312, 6, !dbg !46
  %324 = shl i32 %311, 6, !dbg !46
  %325 = shl i32 %310, 6, !dbg !46
  %326 = shl i32 %40, 15, !dbg !47
  %327 = add i32 %36, %326, !dbg !48
  %328 = add i32 %327, %322, !dbg !49
  %329 = add i32 %323, %326, !dbg !48
  %330 = add i32 %329, %36, !dbg !49
  %331 = add i32 %324, %326, !dbg !48
  %332 = add i32 %331, %36, !dbg !49
  %333 = add i32 %325, %326, !dbg !48
  %334 = add i32 %333, %36, !dbg !49
  %335 = sext i32 %328 to i64, !dbg !50
  %336 = getelementptr bfloat, ptr addrspace(1) %2, i64 %335, !dbg !50
  %337 = sext i32 %330 to i64, !dbg !50
  %338 = getelementptr bfloat, ptr addrspace(1) %2, i64 %337, !dbg !50
  %339 = sext i32 %332 to i64, !dbg !50
  %340 = getelementptr bfloat, ptr addrspace(1) %2, i64 %339, !dbg !50
  %341 = sext i32 %334 to i64, !dbg !50
  %342 = getelementptr bfloat, ptr addrspace(1) %2, i64 %341, !dbg !50
  %343 = fptrunc float %257 to bfloat, !dbg !51
  %344 = fptrunc float %258 to bfloat, !dbg !51
  %345 = fptrunc float %259 to bfloat, !dbg !51
  %346 = fptrunc float %260 to bfloat, !dbg !51
  %347 = fptrunc float %262 to bfloat, !dbg !51
  %348 = fptrunc float %263 to bfloat, !dbg !51
  %349 = fptrunc float %264 to bfloat, !dbg !51
  %350 = fptrunc float %265 to bfloat, !dbg !51
  %351 = fptrunc float %267 to bfloat, !dbg !51
  %352 = fptrunc float %268 to bfloat, !dbg !51
  %353 = fptrunc float %269 to bfloat, !dbg !51
  %354 = fptrunc float %270 to bfloat, !dbg !51
  %355 = fptrunc float %272 to bfloat, !dbg !51
  %356 = fptrunc float %273 to bfloat, !dbg !51
  %357 = fptrunc float %274 to bfloat, !dbg !51
  %358 = fptrunc float %275 to bfloat, !dbg !51
  %359 = fptrunc float %277 to bfloat, !dbg !51
  %360 = fptrunc float %278 to bfloat, !dbg !51
  %361 = fptrunc float %279 to bfloat, !dbg !51
  %362 = fptrunc float %280 to bfloat, !dbg !51
  %363 = fptrunc float %282 to bfloat, !dbg !51
  %364 = fptrunc float %283 to bfloat, !dbg !51
  %365 = fptrunc float %284 to bfloat, !dbg !51
  %366 = fptrunc float %285 to bfloat, !dbg !51
  %367 = fptrunc float %287 to bfloat, !dbg !51
  %368 = fptrunc float %288 to bfloat, !dbg !51
  %369 = fptrunc float %289 to bfloat, !dbg !51
  %370 = fptrunc float %290 to bfloat, !dbg !51
  %371 = fptrunc float %292 to bfloat, !dbg !51
  %372 = fptrunc float %293 to bfloat, !dbg !51
  %373 = fptrunc float %294 to bfloat, !dbg !51
  %374 = fptrunc float %295 to bfloat, !dbg !51
  %375 = shl i32 %15, 1, !dbg !51
  %376 = and i32 %375, 6, !dbg !51
  %377 = shl i32 %15, 4, !dbg !51
  %378 = and i32 %377, 1472, !dbg !51
  %379 = or disjoint i32 %378, %376, !dbg !51
  %380 = shl nuw nsw i32 %20, 4, !dbg !51
  %381 = or disjoint i32 %379, %380, !dbg !51
  %382 = or disjoint i32 %381, %18, !dbg !51
  %383 = and i32 %29, 1984, !dbg !51
  %384 = or disjoint i32 %35, %383, !dbg !51
  %385 = lshr i32 %381, 3, !dbg !51
  %386 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %385, !dbg !51
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %386, i32 %382, !dbg !51
  %388 = bitcast bfloat %343 to i16, !dbg !51
  %389 = bitcast bfloat %344 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %387, i16 %388, i16 %389, i1 true) #1, !dbg !51
  %390 = or disjoint i32 %382, 512, !dbg !51
  %391 = lshr i32 %390, 3, !dbg !51
  %392 = and i32 %391, 536870904, !dbg !51
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %392, !dbg !51
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %393, i32 %390, !dbg !51
  %395 = bitcast bfloat %345 to i16, !dbg !51
  %396 = bitcast bfloat %346 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %394, i16 %395, i16 %396, i1 true) #1, !dbg !51
  %397 = or disjoint i32 %382, 16, !dbg !51
  %398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %386, i32 %397, !dbg !51
  %399 = bitcast bfloat %347 to i16, !dbg !51
  %400 = bitcast bfloat %348 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %398, i16 %399, i16 %400, i1 true) #1, !dbg !51
  %401 = or disjoint i32 %382, 528, !dbg !51
  %402 = lshr i32 %401, 3, !dbg !51
  %403 = and i32 %402, 536870904, !dbg !51
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %403, !dbg !51
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %404, i32 %401, !dbg !51
  %406 = bitcast bfloat %349 to i16, !dbg !51
  %407 = bitcast bfloat %350 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %405, i16 %406, i16 %407, i1 true) #1, !dbg !51
  %408 = or disjoint i32 %382, 32, !dbg !51
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %386, i32 %408, !dbg !51
  %410 = bitcast bfloat %351 to i16, !dbg !51
  %411 = bitcast bfloat %352 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %409, i16 %410, i16 %411, i1 true) #1, !dbg !51
  %412 = or disjoint i32 %382, 544, !dbg !51
  %413 = lshr i32 %412, 3, !dbg !51
  %414 = and i32 %413, 536870904, !dbg !51
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %414, !dbg !51
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %415, i32 %412, !dbg !51
  %417 = bitcast bfloat %353 to i16, !dbg !51
  %418 = bitcast bfloat %354 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %416, i16 %417, i16 %418, i1 true) #1, !dbg !51
  %419 = or disjoint i32 %382, 48, !dbg !51
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %386, i32 %419, !dbg !51
  %421 = bitcast bfloat %355 to i16, !dbg !51
  %422 = bitcast bfloat %356 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %420, i16 %421, i16 %422, i1 true) #1, !dbg !51
  %423 = or disjoint i32 %382, 560, !dbg !51
  %424 = lshr i32 %423, 3, !dbg !51
  %425 = and i32 %424, 536870904, !dbg !51
  %426 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %425, !dbg !51
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %426, i32 %423, !dbg !51
  %428 = bitcast bfloat %357 to i16, !dbg !51
  %429 = bitcast bfloat %358 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %427, i16 %428, i16 %429, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %430 = lshr exact i32 %383, 2, !dbg !51
  %431 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %430, !dbg !51
  %432 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %431, i32 %384, !dbg !51
  %433 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !51
  %434 = or disjoint i32 %384, 2048, !dbg !51
  %435 = lshr exact i32 %434, 3, !dbg !51
  %436 = and i32 %435, 536870904, !dbg !51
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %436, !dbg !51
  %438 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %437, i32 %434, !dbg !51
  %439 = load <4 x i32>, ptr addrspace(3) %438, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %440 = bitcast bfloat %359 to i16, !dbg !51
  %441 = bitcast bfloat %360 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %387, i16 %440, i16 %441, i1 true) #1, !dbg !51
  %442 = bitcast bfloat %361 to i16, !dbg !51
  %443 = bitcast bfloat %362 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %394, i16 %442, i16 %443, i1 true) #1, !dbg !51
  %444 = bitcast bfloat %363 to i16, !dbg !51
  %445 = bitcast bfloat %364 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %398, i16 %444, i16 %445, i1 true) #1, !dbg !51
  %446 = bitcast bfloat %365 to i16, !dbg !51
  %447 = bitcast bfloat %366 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %405, i16 %446, i16 %447, i1 true) #1, !dbg !51
  %448 = bitcast bfloat %367 to i16, !dbg !51
  %449 = bitcast bfloat %368 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %409, i16 %448, i16 %449, i1 true) #1, !dbg !51
  %450 = bitcast bfloat %369 to i16, !dbg !51
  %451 = bitcast bfloat %370 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %416, i16 %450, i16 %451, i1 true) #1, !dbg !51
  %452 = bitcast bfloat %371 to i16, !dbg !51
  %453 = bitcast bfloat %372 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %420, i16 %452, i16 %453, i1 true) #1, !dbg !51
  %454 = bitcast bfloat %373 to i16, !dbg !51
  %455 = bitcast bfloat %374 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %427, i16 %454, i16 %455, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %456 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !51
  %457 = load <4 x i32>, ptr addrspace(3) %438, align 16, !dbg !51
  %.extract = extractelement <4 x i32> %433, i64 0, !dbg !51
  %.extract102 = extractelement <4 x i32> %433, i64 1, !dbg !51
  %.extract104 = extractelement <4 x i32> %433, i64 2, !dbg !51
  %.extract106 = extractelement <4 x i32> %433, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract102, i32 %.extract104, i32 %.extract106, ptr addrspace(1) %336, i1 %318) #1, !dbg !51
  %.extract108 = extractelement <4 x i32> %439, i64 0, !dbg !51
  %.extract110 = extractelement <4 x i32> %439, i64 1, !dbg !51
  %.extract112 = extractelement <4 x i32> %439, i64 2, !dbg !51
  %.extract114 = extractelement <4 x i32> %439, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract108, i32 %.extract110, i32 %.extract112, i32 %.extract114, ptr addrspace(1) %338, i1 %319) #1, !dbg !51
  %.extract116 = extractelement <4 x i32> %456, i64 0, !dbg !51
  %.extract118 = extractelement <4 x i32> %456, i64 1, !dbg !51
  %.extract120 = extractelement <4 x i32> %456, i64 2, !dbg !51
  %.extract122 = extractelement <4 x i32> %456, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract116, i32 %.extract118, i32 %.extract120, i32 %.extract122, ptr addrspace(1) %340, i1 %320) #1, !dbg !51
  %.extract124 = extractelement <4 x i32> %457, i64 0, !dbg !51
  %.extract126 = extractelement <4 x i32> %457, i64 1, !dbg !51
  %.extract128 = extractelement <4 x i32> %457, i64 2, !dbg !51
  %.extract130 = extractelement <4 x i32> %457, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract124, i32 %.extract126, i32 %.extract128, i32 %.extract130, ptr addrspace(1) %342, i1 %321) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3tt3tiflxfm2l3fhlfgnyvzdmp5c64zef5tmbmq2sqwqfhcl6hd.py", directory: "/tmp/torchinductor_root/3t")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 55, column: 52, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 27, scope: !6)
!33 = !DILocation(line: 67, column: 72, scope: !6)
!34 = !DILocation(line: 67, column: 39, scope: !6)
!35 = !DILocation(line: 67, column: 66, scope: !6)
!36 = !DILocation(line: 67, column: 13, scope: !6)
!37 = !DILocation(line: 72, column: 24, scope: !6)
!38 = !DILocation(line: 73, column: 24, scope: !6)
!39 = !DILocation(line: 78, column: 13, scope: !6)
!40 = !DILocation(line: 79, column: 13, scope: !6)
!41 = !DILocation(line: 70, column: 25, scope: !6)
!42 = !DILocation(line: 77, column: 25, scope: !6)
!43 = !DILocation(line: 87, column: 20, scope: !6)
!44 = !DILocation(line: 87, column: 34, scope: !6)
!45 = !DILocation(line: 87, column: 26, scope: !6)
!46 = !DILocation(line: 90, column: 24, scope: !6)
!47 = !DILocation(line: 90, column: 38, scope: !6)
!48 = !DILocation(line: 90, column: 21, scope: !6)
!49 = !DILocation(line: 90, column: 32, scope: !6)
!50 = !DILocation(line: 91, column: 25, scope: !6)
!51 = !DILocation(line: 91, column: 67, scope: !6)
!52 = !DILocation(line: 91, column: 4, scope: !6)
