; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 2, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 5, !dbg !11
  %.lobit1 = lshr i32 %21, 8, !dbg !11
  %23 = and i32 %.lobit1, 3, !dbg !11
  %24 = and i32 %21, 31, !dbg !11
  %25 = or disjoint i32 %23, %20, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = shl i32 %21, 2, !dbg !14
  %28 = and i32 %27, 4092, !dbg !14
  %29 = shl i32 %21, 4, !dbg !14
  %30 = and i32 %29, 4080, !dbg !14
  %31 = or disjoint i32 %30, 8, !dbg !14
  %32 = icmp samesign ult i32 %28, 3072, !dbg !15
  %33 = icmp samesign ult i32 %30, 3072, !dbg !15
  %34 = mul i32 %25, 3072, !dbg !16
  %35 = add i32 %34, %30, !dbg !17
  %36 = add i32 %31, %34, !dbg !17
  %37 = sext i32 %35 to i64, !dbg !18
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !18
  %39 = sext i32 %36 to i64, !dbg !18
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !18
  %41 = and i1 %33, %26, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %41) #5, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !20
  %51 = extractelement <2 x bfloat> %44, i64 0, !dbg !20
  %52 = extractelement <2 x bfloat> %44, i64 1, !dbg !20
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !20
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !20
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !20
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !20
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !20
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !20
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %41) #5, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !20
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !20
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !20
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !20
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !20
  %68 = extractelement <2 x bfloat> %61, i64 0, !dbg !20
  %69 = extractelement <2 x bfloat> %61, i64 1, !dbg !20
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !20
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !20
  %72 = extractelement <2 x bfloat> %65, i64 0, !dbg !20
  %73 = extractelement <2 x bfloat> %65, i64 1, !dbg !20
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !20
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !20
  %76 = fpext bfloat %51 to float, !dbg !21
  %77 = fpext bfloat %52 to float, !dbg !21
  %78 = fpext bfloat %53 to float, !dbg !21
  %79 = fpext bfloat %54 to float, !dbg !21
  %80 = fpext bfloat %55 to float, !dbg !21
  %81 = fpext bfloat %56 to float, !dbg !21
  %82 = fpext bfloat %57 to float, !dbg !21
  %83 = fpext bfloat %58 to float, !dbg !21
  %84 = fpext bfloat %68 to float, !dbg !21
  %85 = fpext bfloat %69 to float, !dbg !21
  %86 = fpext bfloat %70 to float, !dbg !21
  %87 = fpext bfloat %71 to float, !dbg !21
  %88 = fpext bfloat %72 to float, !dbg !21
  %89 = fpext bfloat %73 to float, !dbg !21
  %90 = fpext bfloat %74 to float, !dbg !21
  %91 = fpext bfloat %75 to float, !dbg !21
  %92 = select i1 %41, float %76, float 0.000000e+00, !dbg !22
  %93 = select i1 %41, float %77, float 0.000000e+00, !dbg !22
  %94 = select i1 %41, float %78, float 0.000000e+00, !dbg !22
  %95 = select i1 %41, float %79, float 0.000000e+00, !dbg !22
  %96 = select i1 %41, float %80, float 0.000000e+00, !dbg !22
  %97 = select i1 %41, float %81, float 0.000000e+00, !dbg !22
  %98 = select i1 %41, float %82, float 0.000000e+00, !dbg !22
  %99 = select i1 %41, float %83, float 0.000000e+00, !dbg !22
  %100 = select i1 %41, float %84, float 0.000000e+00, !dbg !22
  %101 = select i1 %41, float %85, float 0.000000e+00, !dbg !22
  %102 = select i1 %41, float %86, float 0.000000e+00, !dbg !22
  %103 = select i1 %41, float %87, float 0.000000e+00, !dbg !22
  %104 = select i1 %41, float %88, float 0.000000e+00, !dbg !22
  %105 = select i1 %41, float %89, float 0.000000e+00, !dbg !22
  %106 = select i1 %41, float %90, float 0.000000e+00, !dbg !22
  %107 = select i1 %41, float %91, float 0.000000e+00, !dbg !22
  %108 = select i1 %41, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %109 = fsub float %93, %92, !dbg !24
  %110 = select i1 %41, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %111 = fcmp oeq float %110, 0.000000e+00, !dbg !30
  %112 = tail call float @llvm.nvvm.div.full(float %108, float %110), !dbg !31
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !32
  %114 = fmul float %113, %109, !dbg !33
  %115 = fadd float %92, %114, !dbg !34
  %116 = fmul float %109, %109, !dbg !35
  %117 = fmul float %108, %116, !dbg !36
  %118 = fmul float %113, %117, !dbg !37
  %119 = fadd float %118, 0.000000e+00, !dbg !38
  %120 = fsub float %94, %115, !dbg !24
  %121 = select i1 %41, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %122 = fcmp oeq float %121, 0.000000e+00, !dbg !30
  %123 = tail call float @llvm.nvvm.div.full(float %108, float %121), !dbg !31
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !32
  %125 = fmul float %124, %120, !dbg !33
  %126 = fadd float %115, %125, !dbg !34
  %127 = fmul float %120, %120, !dbg !35
  %128 = fmul float %110, %127, !dbg !36
  %129 = fmul float %124, %128, !dbg !37
  %130 = fadd float %119, %129, !dbg !38
  %131 = fsub float %95, %126, !dbg !24
  %132 = select i1 %41, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !30
  %134 = tail call float @llvm.nvvm.div.full(float %108, float %132), !dbg !31
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !32
  %136 = fmul float %135, %131, !dbg !33
  %137 = fadd float %126, %136, !dbg !34
  %138 = fmul float %131, %131, !dbg !35
  %139 = fmul float %121, %138, !dbg !36
  %140 = fmul float %135, %139, !dbg !37
  %141 = fadd float %130, %140, !dbg !38
  %142 = fsub float %96, %137, !dbg !24
  %143 = select i1 %41, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !30
  %145 = tail call float @llvm.nvvm.div.full(float %108, float %143), !dbg !31
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !32
  %147 = fmul float %146, %142, !dbg !33
  %148 = fadd float %137, %147, !dbg !34
  %149 = fmul float %142, %142, !dbg !35
  %150 = fmul float %132, %149, !dbg !36
  %151 = fmul float %146, %150, !dbg !37
  %152 = fadd float %141, %151, !dbg !38
  %153 = fsub float %97, %148, !dbg !24
  %154 = select i1 %41, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !30
  %156 = tail call float @llvm.nvvm.div.full(float %108, float %154), !dbg !31
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !32
  %158 = fmul float %157, %153, !dbg !33
  %159 = fadd float %148, %158, !dbg !34
  %160 = fmul float %153, %153, !dbg !35
  %161 = fmul float %143, %160, !dbg !36
  %162 = fmul float %157, %161, !dbg !37
  %163 = fadd float %152, %162, !dbg !38
  %164 = fsub float %98, %159, !dbg !24
  %165 = select i1 %41, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !30
  %167 = tail call float @llvm.nvvm.div.full(float %108, float %165), !dbg !31
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !32
  %169 = fmul float %168, %164, !dbg !33
  %170 = fadd float %159, %169, !dbg !34
  %171 = fmul float %164, %164, !dbg !35
  %172 = fmul float %154, %171, !dbg !36
  %173 = fmul float %168, %172, !dbg !37
  %174 = fadd float %163, %173, !dbg !38
  %175 = fsub float %99, %170, !dbg !24
  %176 = select i1 %41, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !30
  %178 = tail call float @llvm.nvvm.div.full(float %108, float %176), !dbg !31
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !32
  %180 = fmul float %179, %175, !dbg !33
  %181 = fadd float %170, %180, !dbg !34
  %182 = fmul float %175, %175, !dbg !35
  %183 = fmul float %165, %182, !dbg !36
  %184 = fmul float %179, %183, !dbg !37
  %185 = fadd float %174, %184, !dbg !38
  %186 = fsub float %100, %181, !dbg !24
  %187 = select i1 %41, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !30
  %189 = tail call float @llvm.nvvm.div.full(float %108, float %187), !dbg !31
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !32
  %191 = fmul float %190, %186, !dbg !33
  %192 = fadd float %181, %191, !dbg !34
  %193 = fadd float %185, 0.000000e+00, !dbg !39
  %194 = fmul float %186, %186, !dbg !35
  %195 = fmul float %176, %194, !dbg !36
  %196 = fmul float %190, %195, !dbg !37
  %197 = fadd float %193, %196, !dbg !38
  %198 = fsub float %101, %192, !dbg !24
  %199 = select i1 %41, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !30
  %201 = tail call float @llvm.nvvm.div.full(float %108, float %199), !dbg !31
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !32
  %203 = fmul float %202, %198, !dbg !33
  %204 = fadd float %192, %203, !dbg !34
  %205 = fmul float %198, %198, !dbg !35
  %206 = fmul float %187, %205, !dbg !36
  %207 = fmul float %202, %206, !dbg !37
  %208 = fadd float %197, %207, !dbg !38
  %209 = fsub float %102, %204, !dbg !24
  %210 = select i1 %41, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !30
  %212 = tail call float @llvm.nvvm.div.full(float %108, float %210), !dbg !31
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !32
  %214 = fmul float %213, %209, !dbg !33
  %215 = fadd float %204, %214, !dbg !34
  %216 = fmul float %209, %209, !dbg !35
  %217 = fmul float %199, %216, !dbg !36
  %218 = fmul float %213, %217, !dbg !37
  %219 = fadd float %208, %218, !dbg !38
  %220 = fsub float %103, %215, !dbg !24
  %221 = select i1 %41, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !30
  %223 = tail call float @llvm.nvvm.div.full(float %108, float %221), !dbg !31
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !32
  %225 = fmul float %224, %220, !dbg !33
  %226 = fadd float %215, %225, !dbg !34
  %227 = fmul float %220, %220, !dbg !35
  %228 = fmul float %210, %227, !dbg !36
  %229 = fmul float %224, %228, !dbg !37
  %230 = fadd float %219, %229, !dbg !38
  %231 = fsub float %104, %226, !dbg !24
  %232 = select i1 %41, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !30
  %234 = tail call float @llvm.nvvm.div.full(float %108, float %232), !dbg !31
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !32
  %236 = fmul float %235, %231, !dbg !33
  %237 = fadd float %226, %236, !dbg !34
  %238 = fmul float %231, %231, !dbg !35
  %239 = fmul float %221, %238, !dbg !36
  %240 = fmul float %235, %239, !dbg !37
  %241 = fadd float %230, %240, !dbg !38
  %242 = fsub float %105, %237, !dbg !24
  %243 = select i1 %41, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !30
  %245 = tail call float @llvm.nvvm.div.full(float %108, float %243), !dbg !31
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !32
  %247 = fmul float %246, %242, !dbg !33
  %248 = fadd float %237, %247, !dbg !34
  %249 = fmul float %242, %242, !dbg !35
  %250 = fmul float %232, %249, !dbg !36
  %251 = fmul float %246, %250, !dbg !37
  %252 = fadd float %241, %251, !dbg !38
  %253 = fsub float %106, %248, !dbg !24
  %254 = select i1 %41, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !30
  %256 = tail call float @llvm.nvvm.div.full(float %108, float %254), !dbg !31
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !32
  %258 = fmul float %257, %253, !dbg !33
  %259 = fadd float %248, %258, !dbg !34
  %260 = fadd float %252, 0.000000e+00, !dbg !39
  %261 = fmul float %253, %253, !dbg !35
  %262 = fmul float %243, %261, !dbg !36
  %263 = fmul float %257, %262, !dbg !37
  %264 = fadd float %260, %263, !dbg !38
  %265 = fsub float %107, %259, !dbg !24
  %266 = select i1 %41, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !30
  %268 = tail call float @llvm.nvvm.div.full(float %108, float %266), !dbg !31
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !32
  %270 = fmul float %269, %265, !dbg !33
  %271 = fadd float %259, %270, !dbg !34
  %272 = fmul float %265, %265, !dbg !35
  %273 = fmul float %254, %272, !dbg !36
  %274 = fmul float %269, %273, !dbg !37
  %275 = fadd float %264, %274, !dbg !38
  %276 = bitcast float %271 to i32, !dbg !40
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !40
  %278 = bitcast i32 %277 to float, !dbg !40
  %279 = bitcast float %275 to i32, !dbg !40
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !40
  %281 = bitcast i32 %280 to float, !dbg !40
  %282 = bitcast float %266 to i32, !dbg !40
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 16, i32 31), !dbg !40
  %284 = bitcast i32 %283 to float, !dbg !40
  %285 = fsub float %278, %271, !dbg !24
  %286 = fadd float %266, %284, !dbg !29
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !30
  %288 = tail call float @llvm.nvvm.div.full(float %284, float %286), !dbg !31
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !32
  %290 = fmul float %289, %285, !dbg !33
  %291 = fadd float %271, %290, !dbg !34
  %292 = fadd float %275, %281, !dbg !39
  %293 = fmul float %285, %285, !dbg !35
  %294 = fmul float %266, %293, !dbg !36
  %295 = fmul float %289, %294, !dbg !37
  %296 = fadd float %292, %295, !dbg !38
  %297 = bitcast float %291 to i32, !dbg !40
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = bitcast float %296 to i32, !dbg !40
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !40
  %302 = bitcast i32 %301 to float, !dbg !40
  %303 = bitcast float %286 to i32, !dbg !40
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = fsub float %299, %291, !dbg !24
  %307 = fadd float %286, %305, !dbg !29
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !30
  %309 = tail call float @llvm.nvvm.div.full(float %305, float %307), !dbg !31
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !32
  %311 = fmul float %310, %306, !dbg !33
  %312 = fadd float %291, %311, !dbg !34
  %313 = fadd float %296, %302, !dbg !39
  %314 = fmul float %306, %306, !dbg !35
  %315 = fmul float %286, %314, !dbg !36
  %316 = fmul float %310, %315, !dbg !37
  %317 = fadd float %313, %316, !dbg !38
  %318 = bitcast float %312 to i32, !dbg !40
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !40
  %320 = bitcast i32 %319 to float, !dbg !40
  %321 = bitcast float %317 to i32, !dbg !40
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !40
  %323 = bitcast i32 %322 to float, !dbg !40
  %324 = bitcast float %307 to i32, !dbg !40
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !40
  %326 = bitcast i32 %325 to float, !dbg !40
  %327 = fsub float %320, %312, !dbg !24
  %328 = fadd float %307, %326, !dbg !29
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !30
  %330 = tail call float @llvm.nvvm.div.full(float %326, float %328), !dbg !31
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !32
  %332 = fmul float %331, %327, !dbg !33
  %333 = fadd float %312, %332, !dbg !34
  %334 = fadd float %317, %323, !dbg !39
  %335 = fmul float %327, %327, !dbg !35
  %336 = fmul float %307, %335, !dbg !36
  %337 = fmul float %331, %336, !dbg !37
  %338 = fadd float %334, %337, !dbg !38
  %339 = bitcast float %333 to i32, !dbg !40
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !40
  %341 = bitcast i32 %340 to float, !dbg !40
  %342 = bitcast float %338 to i32, !dbg !40
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !40
  %344 = bitcast i32 %343 to float, !dbg !40
  %345 = bitcast float %328 to i32, !dbg !40
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !40
  %347 = bitcast i32 %346 to float, !dbg !40
  %348 = fsub float %341, %333, !dbg !24
  %349 = fadd float %328, %347, !dbg !29
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !30
  %351 = tail call float @llvm.nvvm.div.full(float %347, float %349), !dbg !31
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !32
  %353 = fmul float %352, %348, !dbg !33
  %354 = fadd float %333, %353, !dbg !34
  %355 = fadd float %338, %344, !dbg !39
  %356 = fmul float %348, %348, !dbg !35
  %357 = fmul float %328, %356, !dbg !36
  %358 = fmul float %352, %357, !dbg !37
  %359 = fadd float %355, %358, !dbg !38
  %360 = bitcast float %354 to i32, !dbg !40
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !40
  %362 = bitcast i32 %361 to float, !dbg !40
  %363 = bitcast float %359 to i32, !dbg !40
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !40
  %365 = bitcast i32 %364 to float, !dbg !40
  %366 = bitcast float %349 to i32, !dbg !40
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !40
  %368 = bitcast i32 %367 to float, !dbg !40
  %369 = fsub float %362, %354, !dbg !24
  %370 = fadd float %349, %368, !dbg !29
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !30
  %372 = tail call float @llvm.nvvm.div.full(float %368, float %370), !dbg !31
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !32
  %374 = fmul float %373, %369, !dbg !33
  %375 = fadd float %354, %374, !dbg !34
  %376 = fadd float %359, %365, !dbg !39
  %377 = fmul float %369, %369, !dbg !35
  %378 = fmul float %349, %377, !dbg !36
  %379 = fmul float %373, %378, !dbg !37
  %380 = fadd float %376, %379, !dbg !38
  %381 = and i32 %22, 7, !dbg !40
  %382 = icmp eq i32 %24, 0, !dbg !40
  %383 = shl nuw nsw i32 %23, 3, !dbg !40
  %384 = or disjoint i32 %383, %381, !dbg !40
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !40
  %386 = bitcast float %375 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 %382) #5, !dbg !40
  %387 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %384, !dbg !40
  %388 = bitcast float %380 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 %382) #5, !dbg !40
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %384, !dbg !40
  %390 = bitcast float %370 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 %382) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %391 = icmp slt i32 %21, 32, !dbg !40
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %393 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %391) #5, !dbg !40
  %394 = bitcast i32 %393 to float, !dbg !40
  %395 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !40
  %396 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %391) #5, !dbg !40
  %397 = bitcast i32 %396 to float, !dbg !40
  %398 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !40
  %399 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %398, i1 %391) #5, !dbg !40
  %400 = bitcast i32 %399 to float, !dbg !40
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !40
  %402 = bitcast i32 %401 to float, !dbg !40
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !40
  %404 = bitcast i32 %403 to float, !dbg !40
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !40
  %406 = bitcast i32 %405 to float, !dbg !40
  %407 = fsub float %402, %394, !dbg !24
  %408 = fadd float %400, %406, !dbg !29
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !30
  %410 = tail call float @llvm.nvvm.div.full(float %406, float %408), !dbg !31
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !32
  %412 = fmul float %407, %411, !dbg !33
  %413 = fadd float %412, %394, !dbg !34
  %414 = fadd float %397, %404, !dbg !39
  %415 = fmul float %407, %407, !dbg !35
  %416 = fmul float %415, %400, !dbg !36
  %417 = fmul float %416, %411, !dbg !37
  %418 = fadd float %414, %417, !dbg !38
  %419 = bitcast float %413 to i32, !dbg !40
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !40
  %421 = bitcast i32 %420 to float, !dbg !40
  %422 = bitcast float %418 to i32, !dbg !40
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !40
  %424 = bitcast i32 %423 to float, !dbg !40
  %425 = bitcast float %408 to i32, !dbg !40
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !40
  %427 = bitcast i32 %426 to float, !dbg !40
  %428 = fsub float %421, %413, !dbg !24
  %429 = fadd float %408, %427, !dbg !29
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !30
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !31
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !32
  %433 = fmul float %428, %432, !dbg !33
  %434 = fadd float %413, %433, !dbg !34
  %435 = fadd float %418, %424, !dbg !39
  %436 = fmul float %428, %428, !dbg !35
  %437 = fmul float %408, %436, !dbg !36
  %438 = fmul float %432, %437, !dbg !37
  %439 = fadd float %435, %438, !dbg !38
  %440 = bitcast float %434 to i32, !dbg !40
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !40
  %442 = bitcast i32 %441 to float, !dbg !40
  %443 = bitcast float %439 to i32, !dbg !40
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !40
  %445 = bitcast i32 %444 to float, !dbg !40
  %446 = bitcast float %429 to i32, !dbg !40
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !40
  %448 = bitcast i32 %447 to float, !dbg !40
  %449 = fsub float %442, %434, !dbg !24
  %450 = fadd float %429, %448, !dbg !29
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !30
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !31
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !32
  %454 = fmul float %449, %453, !dbg !33
  %455 = fadd float %434, %454, !dbg !34
  %456 = fadd float %439, %445, !dbg !39
  %457 = fmul float %449, %449, !dbg !35
  %458 = fmul float %429, %457, !dbg !36
  %459 = fmul float %453, %458, !dbg !37
  %460 = fadd float %456, %459, !dbg !38
  %461 = and i32 %21, 7, !dbg !40
  %462 = icmp eq i32 %461, 0, !dbg !40
  %463 = and i1 %391, %462, !dbg !40
  %464 = bitcast float %455 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %464, i1 %463) #5, !dbg !40
  %465 = bitcast float %460 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %465, i1 %463) #5, !dbg !40
  %466 = bitcast float %450 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %466, i1 %463) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !40
  %468 = load float, ptr addrspace(3) %467, align 16, !dbg !40
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %383, !dbg !40
  %470 = load float, ptr addrspace(3) %469, align 16, !dbg !40
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %41) #5, !dbg !41
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %41) #5, !dbg !41
  %473 = add nuw nsw i32 %28, 3072, !dbg !42
  %474 = zext nneg i32 %473 to i64, !dbg !43
  %475 = getelementptr float, ptr addrspace(1) %1, i64 %474, !dbg !43
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %475, i1 %32) #5, !dbg !44
  %477 = getelementptr bfloat, ptr addrspace(1) %2, i64 %474, !dbg !45
  %478 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %477, i1 %32) #5, !dbg !46
  %479 = zext nneg i32 %28 to i64, !dbg !47
  %480 = getelementptr float, ptr addrspace(1) %1, i64 %479, !dbg !47
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %480, i1 %32) #5, !dbg !48
  %482 = getelementptr bfloat, ptr addrspace(1) %2, i64 %479, !dbg !49
  %483 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %482, i1 %32) #5, !dbg !50
  %484 = tail call float @llvm.nvvm.div.full(float %470, float 3.072000e+03), !dbg !51
  %485 = fadd float %484, 0x3EB0C6F7A0000000, !dbg !52
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i92 = icmp eq i32 %501, 0, !dbg !53
  br i1 %.not.i92, label %504, label %502, !dbg !53

502:                                              ; preds = %__nv_rsqrtf.exit
  %503 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %485), !dbg !53
  br label %__nv_rsqrtf.exit94, !dbg !53

504:                                              ; preds = %__nv_rsqrtf.exit
  %505 = tail call float @llvm.nvvm.rsqrt.approx.f(float %485), !dbg !53
  br label %__nv_rsqrtf.exit94, !dbg !53

__nv_rsqrtf.exit94:                               ; preds = %502, %504
  %.0.i93 = phi float [ %503, %502 ], [ %505, %504 ], !dbg !53
  %506 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !41
  %507 = bitcast i32 %506 to <2 x bfloat>, !dbg !41
  %508 = extractelement <2 x bfloat> %507, i64 1, !dbg !41
  %509 = fpext bfloat %508 to float, !dbg !54
  %510 = fsub float %509, %468, !dbg !55
  %511 = extractelement <2 x bfloat> %507, i64 0, !dbg !41
  %512 = fpext bfloat %511 to float, !dbg !54
  %513 = fsub float %512, %468, !dbg !55
  %514 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !41
  %515 = bitcast i32 %514 to <2 x bfloat>, !dbg !41
  %516 = extractelement <2 x bfloat> %515, i64 1, !dbg !41
  %517 = fpext bfloat %516 to float, !dbg !54
  %518 = fsub float %517, %468, !dbg !55
  %519 = extractelement <2 x bfloat> %515, i64 0, !dbg !41
  %520 = fpext bfloat %519 to float, !dbg !54
  %521 = fsub float %520, %468, !dbg !55
  %522 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !41
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !41
  %524 = extractelement <2 x bfloat> %523, i64 1, !dbg !41
  %525 = fpext bfloat %524 to float, !dbg !54
  %526 = fsub float %525, %468, !dbg !55
  %527 = extractelement <2 x bfloat> %523, i64 0, !dbg !41
  %528 = fpext bfloat %527 to float, !dbg !54
  %529 = fsub float %528, %468, !dbg !55
  %530 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !41
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !41
  %532 = extractelement <2 x bfloat> %531, i64 1, !dbg !41
  %533 = fpext bfloat %532 to float, !dbg !54
  %534 = fsub float %533, %468, !dbg !55
  %535 = extractelement <2 x bfloat> %531, i64 0, !dbg !41
  %536 = fpext bfloat %535 to float, !dbg !54
  %537 = fsub float %536, %468, !dbg !55
  %538 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !41
  %539 = bitcast i32 %538 to <2 x bfloat>, !dbg !41
  %540 = extractelement <2 x bfloat> %539, i64 1, !dbg !41
  %541 = fpext bfloat %540 to float, !dbg !54
  %542 = fsub float %541, %468, !dbg !55
  %543 = extractelement <2 x bfloat> %539, i64 0, !dbg !41
  %544 = fpext bfloat %543 to float, !dbg !54
  %545 = fsub float %544, %468, !dbg !55
  %546 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !41
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !41
  %548 = extractelement <2 x bfloat> %547, i64 1, !dbg !41
  %549 = fpext bfloat %548 to float, !dbg !54
  %550 = fsub float %549, %468, !dbg !55
  %551 = extractelement <2 x bfloat> %547, i64 0, !dbg !41
  %552 = fpext bfloat %551 to float, !dbg !54
  %553 = fsub float %552, %468, !dbg !55
  %554 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !41
  %555 = bitcast i32 %554 to <2 x bfloat>, !dbg !41
  %556 = extractelement <2 x bfloat> %555, i64 1, !dbg !41
  %557 = fpext bfloat %556 to float, !dbg !54
  %558 = fsub float %557, %468, !dbg !55
  %559 = extractelement <2 x bfloat> %555, i64 0, !dbg !41
  %560 = fpext bfloat %559 to float, !dbg !54
  %561 = fsub float %560, %468, !dbg !55
  %562 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !41
  %563 = bitcast i32 %562 to <2 x bfloat>, !dbg !41
  %564 = extractelement <2 x bfloat> %563, i64 1, !dbg !41
  %565 = fpext bfloat %564 to float, !dbg !54
  %566 = fsub float %565, %468, !dbg !55
  %567 = extractelement <2 x bfloat> %563, i64 0, !dbg !41
  %568 = fpext bfloat %567 to float, !dbg !54
  %569 = fsub float %568, %468, !dbg !55
  %570 = extractvalue { i32, i32 } %483, 1, !dbg !50
  %571 = bitcast i32 %570 to <2 x bfloat>, !dbg !50
  %572 = extractelement <2 x bfloat> %571, i64 1, !dbg !50
  %573 = fpext bfloat %572 to float, !dbg !56
  %574 = extractelement <2 x bfloat> %571, i64 0, !dbg !50
  %575 = fpext bfloat %574 to float, !dbg !56
  %576 = extractvalue { i32, i32 } %483, 0, !dbg !50
  %577 = bitcast i32 %576 to <2 x bfloat>, !dbg !50
  %578 = extractelement <2 x bfloat> %577, i64 1, !dbg !50
  %579 = fpext bfloat %578 to float, !dbg !56
  %580 = extractelement <2 x bfloat> %577, i64 0, !dbg !50
  %581 = fpext bfloat %580 to float, !dbg !56
  %582 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !48
  %583 = bitcast i32 %582 to float, !dbg !48
  %584 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !48
  %585 = bitcast i32 %584 to float, !dbg !48
  %586 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !48
  %587 = bitcast i32 %586 to float, !dbg !48
  %588 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !48
  %589 = bitcast i32 %588 to float, !dbg !48
  %590 = extractvalue { i32, i32 } %478, 1, !dbg !46
  %591 = bitcast i32 %590 to <2 x bfloat>, !dbg !46
  %592 = extractelement <2 x bfloat> %591, i64 1, !dbg !46
  %593 = fpext bfloat %592 to float, !dbg !57
  %594 = extractelement <2 x bfloat> %591, i64 0, !dbg !46
  %595 = fpext bfloat %594 to float, !dbg !57
  %596 = extractvalue { i32, i32 } %478, 0, !dbg !46
  %597 = bitcast i32 %596 to <2 x bfloat>, !dbg !46
  %598 = extractelement <2 x bfloat> %597, i64 1, !dbg !46
  %599 = fpext bfloat %598 to float, !dbg !57
  %600 = extractelement <2 x bfloat> %597, i64 0, !dbg !46
  %601 = fpext bfloat %600 to float, !dbg !57
  %602 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !44
  %603 = bitcast i32 %602 to float, !dbg !44
  %604 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !44
  %605 = bitcast i32 %604 to float, !dbg !44
  %606 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !44
  %607 = bitcast i32 %606 to float, !dbg !44
  %608 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !44
  %609 = bitcast i32 %608 to float, !dbg !44
  %610 = shl i32 %21, 3, !dbg !14
  %611 = and i32 %610, 4088, !dbg !14
  %612 = icmp samesign ult i32 %611, 3072, !dbg !15
  %613 = lshr i32 %21, 9, !dbg !11
  %.lobit = and i32 %613, 1, !dbg !11
  %614 = or disjoint i32 %20, %.lobit, !dbg !12
  %615 = or disjoint i32 %614, 2, !dbg !12
  %616 = icmp slt i32 %615, 4112, !dbg !13
  %617 = and i1 %612, %616, !dbg !19
  %618 = icmp slt i32 %614, 4112, !dbg !13
  %619 = and i1 %612, %618, !dbg !19
  %620 = icmp slt i32 %20, 4112, !dbg !13
  %621 = and i1 %620, %32, !dbg !19
  %622 = mul i32 %615, 3072, !dbg !16
  %623 = add i32 %622, %611, !dbg !17
  %624 = mul i32 %614, 3072, !dbg !16
  %625 = add i32 %624, %611, !dbg !17
  %626 = and i32 %21, 3, !dbg !11
  %627 = or disjoint i32 %20, %626, !dbg !12
  %628 = icmp slt i32 %627, 4112, !dbg !13
  %629 = fmul float %569, %.0.i93, !dbg !58
  %630 = fmul float %566, %.0.i93, !dbg !58
  %631 = fmul float %561, %.0.i93, !dbg !58
  %632 = fmul float %558, %.0.i93, !dbg !58
  %633 = fmul float %553, %.0.i93, !dbg !58
  %634 = fmul float %550, %.0.i93, !dbg !58
  %635 = fmul float %545, %.0.i93, !dbg !58
  %636 = fmul float %542, %.0.i93, !dbg !58
  %637 = fmul float %537, %.0.i93, !dbg !58
  %638 = fmul float %534, %.0.i93, !dbg !58
  %639 = fmul float %529, %.0.i93, !dbg !58
  %640 = fmul float %526, %.0.i93, !dbg !58
  %641 = fmul float %521, %.0.i93, !dbg !58
  %642 = fmul float %518, %.0.i93, !dbg !58
  %643 = fmul float %513, %.0.i93, !dbg !58
  %644 = fmul float %510, %.0.i93, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %645 = and i32 %29, 16368, !dbg !58
  %646 = lshr i32 %29, 10, !dbg !58
  %647 = and i32 %646, 12, !dbg !58
  %648 = or disjoint i32 %647, %645, !dbg !58
  %649 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %648, !dbg !58
  %650 = bitcast float %629 to i32, !dbg !58
  %651 = bitcast float %630 to i32, !dbg !58
  %652 = bitcast float %631 to i32, !dbg !58
  %653 = bitcast float %632 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %649, i32 %650, i32 %651, i32 %652, i32 %653, i1 true) #5, !dbg !58
  %654 = or disjoint i32 %645, 4, !dbg !58
  %655 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %647, !dbg !58
  %656 = getelementptr inbounds nuw float, ptr addrspace(3) %655, i32 %654, !dbg !58
  %657 = bitcast float %633 to i32, !dbg !58
  %658 = bitcast float %634 to i32, !dbg !58
  %659 = bitcast float %635 to i32, !dbg !58
  %660 = bitcast float %636 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %656, i32 %657, i32 %658, i32 %659, i32 %660, i1 true) #5, !dbg !58
  %661 = or disjoint i32 %645, 8, !dbg !58
  %662 = getelementptr inbounds nuw float, ptr addrspace(3) %655, i32 %661, !dbg !58
  %663 = bitcast float %637 to i32, !dbg !58
  %664 = bitcast float %638 to i32, !dbg !58
  %665 = bitcast float %639 to i32, !dbg !58
  %666 = bitcast float %640 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %662, i32 %663, i32 %664, i32 %665, i32 %666, i1 true) #5, !dbg !58
  %667 = or disjoint i32 %645, 12, !dbg !58
  %668 = getelementptr inbounds nuw float, ptr addrspace(3) %655, i32 %667, !dbg !58
  %669 = bitcast float %641 to i32, !dbg !58
  %670 = bitcast float %642 to i32, !dbg !58
  %671 = bitcast float %643 to i32, !dbg !58
  %672 = bitcast float %644 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %668, i32 %669, i32 %670, i32 %671, i32 %672, i1 true) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %673 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28, !dbg !58
  %674 = load float, ptr addrspace(3) %673, align 16, !dbg !58
  %675 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 4, !dbg !58
  %676 = load float, ptr addrspace(3) %675, align 4, !dbg !58
  %677 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 8, !dbg !58
  %678 = load float, ptr addrspace(3) %677, align 8, !dbg !58
  %679 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 12, !dbg !58
  %680 = load float, ptr addrspace(3) %679, align 4, !dbg !58
  %681 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 16400, !dbg !58
  %682 = load float, ptr addrspace(3) %681, align 16, !dbg !58
  %683 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 16404, !dbg !58
  %684 = load float, ptr addrspace(3) %683, align 4, !dbg !58
  %685 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 16408, !dbg !58
  %686 = load float, ptr addrspace(3) %685, align 8, !dbg !58
  %687 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 16412, !dbg !58
  %688 = load float, ptr addrspace(3) %687, align 4, !dbg !58
  %689 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 32800, !dbg !58
  %690 = load float, ptr addrspace(3) %689, align 16, !dbg !58
  %691 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 32804, !dbg !58
  %692 = load float, ptr addrspace(3) %691, align 4, !dbg !58
  %693 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 32808, !dbg !58
  %694 = load float, ptr addrspace(3) %693, align 8, !dbg !58
  %695 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 32812, !dbg !58
  %696 = load float, ptr addrspace(3) %695, align 4, !dbg !58
  %697 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 49200, !dbg !58
  %698 = load float, ptr addrspace(3) %697, align 16, !dbg !58
  %699 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 49204, !dbg !58
  %700 = load float, ptr addrspace(3) %699, align 4, !dbg !58
  %701 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 49208, !dbg !58
  %702 = load float, ptr addrspace(3) %701, align 8, !dbg !58
  %703 = getelementptr inbounds nuw i8, ptr addrspace(3) %673, i32 49212, !dbg !58
  %704 = load float, ptr addrspace(3) %703, align 4, !dbg !58
  %705 = fadd float %609, %601, !dbg !59
  %706 = fadd float %607, %599, !dbg !59
  %707 = fadd float %605, %595, !dbg !59
  %708 = fadd float %603, %593, !dbg !59
  %709 = fadd float %705, 1.000000e+00, !dbg !60
  %710 = fadd float %706, 1.000000e+00, !dbg !60
  %711 = fadd float %707, 1.000000e+00, !dbg !60
  %712 = fadd float %708, 1.000000e+00, !dbg !60
  %713 = fmul float %709, %674, !dbg !61
  %714 = fmul float %710, %676, !dbg !61
  %715 = fmul float %711, %678, !dbg !61
  %716 = fmul float %712, %680, !dbg !61
  %717 = fmul float %709, %682, !dbg !61
  %718 = fmul float %710, %684, !dbg !61
  %719 = fmul float %711, %686, !dbg !61
  %720 = fmul float %712, %688, !dbg !61
  %721 = fmul float %709, %690, !dbg !61
  %722 = fmul float %710, %692, !dbg !61
  %723 = fmul float %711, %694, !dbg !61
  %724 = fmul float %712, %696, !dbg !61
  %725 = fmul float %709, %698, !dbg !61
  %726 = fmul float %710, %700, !dbg !61
  %727 = fmul float %711, %702, !dbg !61
  %728 = fmul float %712, %704, !dbg !61
  %729 = fadd float %589, %581, !dbg !62
  %730 = fadd float %587, %579, !dbg !62
  %731 = fadd float %585, %575, !dbg !62
  %732 = fadd float %583, %573, !dbg !62
  %733 = fadd float %729, %713, !dbg !63
  %734 = fadd float %730, %714, !dbg !63
  %735 = fadd float %731, %715, !dbg !63
  %736 = fadd float %732, %716, !dbg !63
  %737 = fadd float %729, %717, !dbg !63
  %738 = fadd float %730, %718, !dbg !63
  %739 = fadd float %731, %719, !dbg !63
  %740 = fadd float %732, %720, !dbg !63
  %741 = fadd float %729, %721, !dbg !63
  %742 = fadd float %730, %722, !dbg !63
  %743 = fadd float %731, %723, !dbg !63
  %744 = fadd float %732, %724, !dbg !63
  %745 = fadd float %729, %725, !dbg !63
  %746 = fadd float %730, %726, !dbg !63
  %747 = fadd float %731, %727, !dbg !63
  %748 = fadd float %732, %728, !dbg !63
  %749 = select i1 %621, float %733, float 0x7FF0000000000000, !dbg !64
  %750 = select i1 %621, float %734, float 0x7FF0000000000000, !dbg !64
  %751 = select i1 %621, float %735, float 0x7FF0000000000000, !dbg !64
  %752 = select i1 %621, float %736, float 0x7FF0000000000000, !dbg !64
  %753 = select i1 %621, float %737, float 0x7FF0000000000000, !dbg !64
  %754 = select i1 %621, float %738, float 0x7FF0000000000000, !dbg !64
  %755 = select i1 %621, float %739, float 0x7FF0000000000000, !dbg !64
  %756 = select i1 %621, float %740, float 0x7FF0000000000000, !dbg !64
  %757 = select i1 %621, float %741, float 0x7FF0000000000000, !dbg !64
  %758 = select i1 %621, float %742, float 0x7FF0000000000000, !dbg !64
  %759 = select i1 %621, float %743, float 0x7FF0000000000000, !dbg !64
  %760 = select i1 %621, float %744, float 0x7FF0000000000000, !dbg !64
  %761 = select i1 %621, float %745, float 0x7FF0000000000000, !dbg !64
  %762 = select i1 %621, float %746, float 0x7FF0000000000000, !dbg !64
  %763 = select i1 %621, float %747, float 0x7FF0000000000000, !dbg !64
  %764 = select i1 %621, float %748, float 0x7FF0000000000000, !dbg !64
  %765 = select i1 %621, float %733, float 0xFFF0000000000000, !dbg !65
  %766 = select i1 %621, float %734, float 0xFFF0000000000000, !dbg !65
  %767 = select i1 %621, float %735, float 0xFFF0000000000000, !dbg !65
  %768 = select i1 %621, float %736, float 0xFFF0000000000000, !dbg !65
  %769 = select i1 %621, float %737, float 0xFFF0000000000000, !dbg !65
  %770 = select i1 %621, float %738, float 0xFFF0000000000000, !dbg !65
  %771 = select i1 %621, float %739, float 0xFFF0000000000000, !dbg !65
  %772 = select i1 %621, float %740, float 0xFFF0000000000000, !dbg !65
  %773 = select i1 %621, float %741, float 0xFFF0000000000000, !dbg !65
  %774 = select i1 %621, float %742, float 0xFFF0000000000000, !dbg !65
  %775 = select i1 %621, float %743, float 0xFFF0000000000000, !dbg !65
  %776 = select i1 %621, float %744, float 0xFFF0000000000000, !dbg !65
  %777 = select i1 %621, float %745, float 0xFFF0000000000000, !dbg !65
  %778 = select i1 %621, float %746, float 0xFFF0000000000000, !dbg !65
  %779 = select i1 %621, float %747, float 0xFFF0000000000000, !dbg !65
  %780 = select i1 %621, float %748, float 0xFFF0000000000000, !dbg !65
  %781 = sext i32 %625 to i64, !dbg !66
  %782 = getelementptr bfloat, ptr addrspace(1) %3, i64 %781, !dbg !66
  %783 = sext i32 %623 to i64, !dbg !66
  %784 = getelementptr bfloat, ptr addrspace(1) %3, i64 %783, !dbg !66
  %785 = getelementptr bfloat, ptr addrspace(1) %3, i64 %37, !dbg !66
  %786 = getelementptr bfloat, ptr addrspace(1) %3, i64 %39, !dbg !66
  %787 = fptrunc float %733 to bfloat, !dbg !67
  %788 = fptrunc float %734 to bfloat, !dbg !67
  %789 = fptrunc float %735 to bfloat, !dbg !67
  %790 = fptrunc float %736 to bfloat, !dbg !67
  %791 = fptrunc float %737 to bfloat, !dbg !67
  %792 = fptrunc float %738 to bfloat, !dbg !67
  %793 = fptrunc float %739 to bfloat, !dbg !67
  %794 = fptrunc float %740 to bfloat, !dbg !67
  %795 = fptrunc float %741 to bfloat, !dbg !67
  %796 = fptrunc float %742 to bfloat, !dbg !67
  %797 = fptrunc float %743 to bfloat, !dbg !67
  %798 = fptrunc float %744 to bfloat, !dbg !67
  %799 = fptrunc float %745 to bfloat, !dbg !67
  %800 = fptrunc float %746 to bfloat, !dbg !67
  %801 = fptrunc float %747 to bfloat, !dbg !67
  %802 = fptrunc float %748 to bfloat, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %803 = and i32 %610, 8184, !dbg !67
  %804 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28, !dbg !67
  %805 = bitcast bfloat %787 to i16, !dbg !67
  %806 = bitcast bfloat %788 to i16, !dbg !67
  %807 = bitcast bfloat %789 to i16, !dbg !67
  %808 = bitcast bfloat %790 to i16, !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %804, i16 %805, i16 %806, i16 %807, i16 %808, i1 true) #5, !dbg !67
  %809 = getelementptr inbounds nuw i8, ptr addrspace(3) %804, i32 8208, !dbg !67
  %810 = bitcast bfloat %791 to i16, !dbg !67
  %811 = bitcast bfloat %792 to i16, !dbg !67
  %812 = bitcast bfloat %793 to i16, !dbg !67
  %813 = bitcast bfloat %794 to i16, !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %809, i16 %810, i16 %811, i16 %812, i16 %813, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %814 = lshr i32 %610, 9, !dbg !67
  %815 = and i32 %814, 8, !dbg !67
  %816 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %815, !dbg !67
  %817 = getelementptr bfloat, ptr addrspace(3) %816, i32 %803, !dbg !67
  %818 = load <4 x i32>, ptr addrspace(3) %817, align 16, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %819 = bitcast bfloat %795 to i16, !dbg !67
  %820 = bitcast bfloat %796 to i16, !dbg !67
  %821 = bitcast bfloat %797 to i16, !dbg !67
  %822 = bitcast bfloat %798 to i16, !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %804, i16 %819, i16 %820, i16 %821, i16 %822, i1 true) #5, !dbg !67
  %823 = bitcast bfloat %799 to i16, !dbg !67
  %824 = bitcast bfloat %800 to i16, !dbg !67
  %825 = bitcast bfloat %801 to i16, !dbg !67
  %826 = bitcast bfloat %802 to i16, !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %809, i16 %823, i16 %824, i16 %825, i16 %826, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %827 = load <4 x i32>, ptr addrspace(3) %817, align 16, !dbg !67
  %.extract = extractelement <4 x i32> %818, i64 0, !dbg !67
  %.extract96 = extractelement <4 x i32> %818, i64 1, !dbg !67
  %.extract98 = extractelement <4 x i32> %818, i64 2, !dbg !67
  %.extract100 = extractelement <4 x i32> %818, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract96, i32 %.extract98, i32 %.extract100, ptr addrspace(1) %782, i1 %619) #5, !dbg !67
  %.extract102 = extractelement <4 x i32> %827, i64 0, !dbg !67
  %.extract104 = extractelement <4 x i32> %827, i64 1, !dbg !67
  %.extract106 = extractelement <4 x i32> %827, i64 2, !dbg !67
  %.extract108 = extractelement <4 x i32> %827, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract102, i32 %.extract104, i32 %.extract106, i32 %.extract108, ptr addrspace(1) %784, i1 %617) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %828 = fcmp olt float %749, %750, !dbg !70
  %829 = fcmp uno float %749, 0.000000e+00, !dbg !71
  %830 = or i1 %828, %829, !dbg !72
  %831 = select i1 %830, float %749, float %750, !dbg !73
  %832 = fcmp olt float %831, %751, !dbg !70
  %833 = fcmp uno float %831, 0.000000e+00, !dbg !71
  %834 = or i1 %832, %833, !dbg !72
  %835 = select i1 %834, float %831, float %751, !dbg !73
  %836 = fcmp olt float %835, %752, !dbg !70
  %837 = fcmp uno float %835, 0.000000e+00, !dbg !71
  %838 = or i1 %836, %837, !dbg !72
  %839 = select i1 %838, float %835, float %752, !dbg !73
  %840 = fcmp olt float %753, %754, !dbg !70
  %841 = fcmp uno float %753, 0.000000e+00, !dbg !71
  %842 = or i1 %840, %841, !dbg !72
  %843 = select i1 %842, float %753, float %754, !dbg !73
  %844 = fcmp olt float %843, %755, !dbg !70
  %845 = fcmp uno float %843, 0.000000e+00, !dbg !71
  %846 = or i1 %844, %845, !dbg !72
  %847 = select i1 %846, float %843, float %755, !dbg !73
  %848 = fcmp olt float %847, %756, !dbg !70
  %849 = fcmp uno float %847, 0.000000e+00, !dbg !71
  %850 = or i1 %848, %849, !dbg !72
  %851 = select i1 %850, float %847, float %756, !dbg !73
  %852 = fcmp olt float %757, %758, !dbg !70
  %853 = fcmp uno float %757, 0.000000e+00, !dbg !71
  %854 = or i1 %852, %853, !dbg !72
  %855 = select i1 %854, float %757, float %758, !dbg !73
  %856 = fcmp olt float %855, %759, !dbg !70
  %857 = fcmp uno float %855, 0.000000e+00, !dbg !71
  %858 = or i1 %856, %857, !dbg !72
  %859 = select i1 %858, float %855, float %759, !dbg !73
  %860 = fcmp olt float %859, %760, !dbg !70
  %861 = fcmp uno float %859, 0.000000e+00, !dbg !71
  %862 = or i1 %860, %861, !dbg !72
  %863 = select i1 %862, float %859, float %760, !dbg !73
  %864 = fcmp olt float %761, %762, !dbg !70
  %865 = fcmp uno float %761, 0.000000e+00, !dbg !71
  %866 = or i1 %864, %865, !dbg !72
  %867 = select i1 %866, float %761, float %762, !dbg !73
  %868 = fcmp olt float %867, %763, !dbg !70
  %869 = fcmp uno float %867, 0.000000e+00, !dbg !71
  %870 = or i1 %868, %869, !dbg !72
  %871 = select i1 %870, float %867, float %763, !dbg !73
  %872 = fcmp olt float %871, %764, !dbg !70
  %873 = fcmp uno float %871, 0.000000e+00, !dbg !71
  %874 = or i1 %872, %873, !dbg !72
  %875 = select i1 %874, float %871, float %764, !dbg !73
  %876 = bitcast float %839 to i32, !dbg !68
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 16, i32 31), !dbg !68
  %878 = bitcast i32 %877 to float, !dbg !68
  %879 = fcmp olt float %839, %878, !dbg !70
  %880 = fcmp uno float %839, 0.000000e+00, !dbg !71
  %881 = or i1 %880, %879, !dbg !72
  %882 = select i1 %881, float %839, float %878, !dbg !73
  %883 = bitcast float %882 to i32, !dbg !68
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %883, i32 8, i32 31), !dbg !68
  %885 = bitcast i32 %884 to float, !dbg !68
  %886 = fcmp olt float %882, %885, !dbg !70
  %887 = fcmp uno float %882, 0.000000e+00, !dbg !71
  %888 = or i1 %886, %887, !dbg !72
  %889 = select i1 %888, float %882, float %885, !dbg !73
  %890 = bitcast float %889 to i32, !dbg !68
  %891 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %890, i32 4, i32 31), !dbg !68
  %892 = bitcast i32 %891 to float, !dbg !68
  %893 = fcmp olt float %889, %892, !dbg !70
  %894 = fcmp uno float %889, 0.000000e+00, !dbg !71
  %895 = or i1 %893, %894, !dbg !72
  %896 = select i1 %895, float %889, float %892, !dbg !73
  %897 = bitcast float %896 to i32, !dbg !68
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 2, i32 31), !dbg !68
  %899 = bitcast i32 %898 to float, !dbg !68
  %900 = fcmp olt float %896, %899, !dbg !70
  %901 = fcmp uno float %896, 0.000000e+00, !dbg !71
  %902 = or i1 %900, %901, !dbg !72
  %903 = select i1 %902, float %896, float %899, !dbg !73
  %904 = bitcast float %903 to i32, !dbg !68
  %905 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %904, i32 1, i32 31), !dbg !68
  %906 = bitcast i32 %905 to float, !dbg !68
  %907 = fcmp olt float %903, %906, !dbg !70
  %908 = fcmp uno float %903, 0.000000e+00, !dbg !71
  %909 = or i1 %907, %908, !dbg !72
  %910 = bitcast float %851 to i32, !dbg !68
  %911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %910, i32 16, i32 31), !dbg !68
  %912 = bitcast i32 %911 to float, !dbg !68
  %913 = fcmp olt float %851, %912, !dbg !70
  %914 = fcmp uno float %851, 0.000000e+00, !dbg !71
  %915 = or i1 %914, %913, !dbg !72
  %916 = select i1 %915, float %851, float %912, !dbg !73
  %917 = bitcast float %916 to i32, !dbg !68
  %918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %917, i32 8, i32 31), !dbg !68
  %919 = bitcast i32 %918 to float, !dbg !68
  %920 = fcmp olt float %916, %919, !dbg !70
  %921 = fcmp uno float %916, 0.000000e+00, !dbg !71
  %922 = or i1 %920, %921, !dbg !72
  %923 = select i1 %922, float %916, float %919, !dbg !73
  %924 = bitcast float %923 to i32, !dbg !68
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 4, i32 31), !dbg !68
  %926 = bitcast i32 %925 to float, !dbg !68
  %927 = fcmp olt float %923, %926, !dbg !70
  %928 = fcmp uno float %923, 0.000000e+00, !dbg !71
  %929 = or i1 %927, %928, !dbg !72
  %930 = select i1 %929, float %923, float %926, !dbg !73
  %931 = bitcast float %930 to i32, !dbg !68
  %932 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %931, i32 2, i32 31), !dbg !68
  %933 = bitcast i32 %932 to float, !dbg !68
  %934 = fcmp olt float %930, %933, !dbg !70
  %935 = fcmp uno float %930, 0.000000e+00, !dbg !71
  %936 = or i1 %934, %935, !dbg !72
  %937 = select i1 %936, float %930, float %933, !dbg !73
  %938 = bitcast float %937 to i32, !dbg !68
  %939 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %938, i32 1, i32 31), !dbg !68
  %940 = bitcast i32 %939 to float, !dbg !68
  %941 = fcmp olt float %937, %940, !dbg !70
  %942 = fcmp uno float %937, 0.000000e+00, !dbg !71
  %943 = or i1 %941, %942, !dbg !72
  %944 = bitcast float %863 to i32, !dbg !68
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %944, i32 16, i32 31), !dbg !68
  %946 = bitcast i32 %945 to float, !dbg !68
  %947 = fcmp olt float %863, %946, !dbg !70
  %948 = fcmp uno float %863, 0.000000e+00, !dbg !71
  %949 = or i1 %948, %947, !dbg !72
  %950 = select i1 %949, float %863, float %946, !dbg !73
  %951 = bitcast float %950 to i32, !dbg !68
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 8, i32 31), !dbg !68
  %953 = bitcast i32 %952 to float, !dbg !68
  %954 = fcmp olt float %950, %953, !dbg !70
  %955 = fcmp uno float %950, 0.000000e+00, !dbg !71
  %956 = or i1 %954, %955, !dbg !72
  %957 = select i1 %956, float %950, float %953, !dbg !73
  %958 = bitcast float %957 to i32, !dbg !68
  %959 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %958, i32 4, i32 31), !dbg !68
  %960 = bitcast i32 %959 to float, !dbg !68
  %961 = fcmp olt float %957, %960, !dbg !70
  %962 = fcmp uno float %957, 0.000000e+00, !dbg !71
  %963 = or i1 %961, %962, !dbg !72
  %964 = select i1 %963, float %957, float %960, !dbg !73
  %965 = bitcast float %964 to i32, !dbg !68
  %966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %965, i32 2, i32 31), !dbg !68
  %967 = bitcast i32 %966 to float, !dbg !68
  %968 = fcmp olt float %964, %967, !dbg !70
  %969 = fcmp uno float %964, 0.000000e+00, !dbg !71
  %970 = or i1 %968, %969, !dbg !72
  %971 = select i1 %970, float %964, float %967, !dbg !73
  %972 = bitcast float %971 to i32, !dbg !68
  %973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %972, i32 1, i32 31), !dbg !68
  %974 = bitcast i32 %973 to float, !dbg !68
  %975 = fcmp olt float %971, %974, !dbg !70
  %976 = fcmp uno float %971, 0.000000e+00, !dbg !71
  %977 = or i1 %975, %976, !dbg !72
  %978 = bitcast float %875 to i32, !dbg !68
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 16, i32 31), !dbg !68
  %980 = bitcast i32 %979 to float, !dbg !68
  %981 = fcmp olt float %875, %980, !dbg !70
  %982 = fcmp uno float %875, 0.000000e+00, !dbg !71
  %983 = or i1 %982, %981, !dbg !72
  %984 = select i1 %983, float %875, float %980, !dbg !73
  %985 = bitcast float %984 to i32, !dbg !68
  %986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %985, i32 8, i32 31), !dbg !68
  %987 = bitcast i32 %986 to float, !dbg !68
  %988 = fcmp olt float %984, %987, !dbg !70
  %989 = fcmp uno float %984, 0.000000e+00, !dbg !71
  %990 = or i1 %988, %989, !dbg !72
  %991 = select i1 %990, float %984, float %987, !dbg !73
  %992 = bitcast float %991 to i32, !dbg !68
  %993 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %992, i32 4, i32 31), !dbg !68
  %994 = bitcast i32 %993 to float, !dbg !68
  %995 = fcmp olt float %991, %994, !dbg !70
  %996 = fcmp uno float %991, 0.000000e+00, !dbg !71
  %997 = or i1 %995, %996, !dbg !72
  %998 = select i1 %997, float %991, float %994, !dbg !73
  %999 = bitcast float %998 to i32, !dbg !68
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 2, i32 31), !dbg !68
  %1001 = bitcast i32 %1000 to float, !dbg !68
  %1002 = fcmp olt float %998, %1001, !dbg !70
  %1003 = fcmp uno float %998, 0.000000e+00, !dbg !71
  %1004 = or i1 %1002, %1003, !dbg !72
  %1005 = select i1 %1004, float %998, float %1001, !dbg !73
  %1006 = bitcast float %1005 to i32, !dbg !68
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 1, i32 31), !dbg !68
  %1008 = bitcast i32 %1007 to float, !dbg !68
  %1009 = fcmp olt float %1005, %1008, !dbg !70
  %1010 = fcmp uno float %1005, 0.000000e+00, !dbg !71
  %1011 = or i1 %1009, %1010, !dbg !72
  %1012 = and i32 %22, 31, !dbg !68
  %1013 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1012, !dbg !68
  %1014 = select i1 %909, i32 %904, i32 %905, !dbg !73
  %1015 = insertelement <1 x i32> poison, i32 %1014, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1013, <1 x i32> %1015, i1 %382) #5, !dbg !68
  %1016 = or disjoint i32 %1012, 32, !dbg !68
  %1017 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1016, !dbg !68
  %1018 = select i1 %943, i32 %938, i32 %939, !dbg !73
  %1019 = insertelement <1 x i32> poison, i32 %1018, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1019, i1 %382) #5, !dbg !68
  %1020 = or disjoint i32 %1012, 64, !dbg !68
  %1021 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1020, !dbg !68
  %1022 = select i1 %977, i32 %972, i32 %973, !dbg !73
  %1023 = insertelement <1 x i32> poison, i32 %1022, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1023, i1 %382) #5, !dbg !68
  %1024 = or disjoint i32 %1012, 96, !dbg !68
  %1025 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1024, !dbg !68
  %1026 = select i1 %1011, i32 %1006, i32 %1007, !dbg !73
  %1027 = insertelement <1 x i32> poison, i32 %1026, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1025, <1 x i32> %1027, i1 %382) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1028 = icmp slt i32 %21, 128, !dbg !68
  %1029 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %1028) #5, !dbg !68
  %1030 = bitcast i32 %1029 to float, !dbg !68
  %1031 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 16, i32 31), !dbg !68
  %1032 = bitcast i32 %1031 to float, !dbg !68
  %1033 = fcmp olt float %1030, %1032, !dbg !70
  %1034 = fcmp uno float %1030, 0.000000e+00, !dbg !71
  %1035 = or i1 %1034, %1033, !dbg !72
  %1036 = select i1 %1035, float %1030, float %1032, !dbg !73
  %1037 = bitcast float %1036 to i32, !dbg !68
  %1038 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1037, i32 8, i32 31), !dbg !68
  %1039 = bitcast i32 %1038 to float, !dbg !68
  %1040 = fcmp olt float %1036, %1039, !dbg !70
  %1041 = fcmp uno float %1036, 0.000000e+00, !dbg !71
  %1042 = or i1 %1040, %1041, !dbg !72
  %1043 = select i1 %1042, float %1036, float %1039, !dbg !73
  %1044 = bitcast float %1043 to i32, !dbg !68
  %1045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1044, i32 4, i32 31), !dbg !68
  %1046 = bitcast i32 %1045 to float, !dbg !68
  %1047 = fcmp olt float %1043, %1046, !dbg !70
  %1048 = fcmp uno float %1043, 0.000000e+00, !dbg !71
  %1049 = or i1 %1047, %1048, !dbg !72
  %1050 = select i1 %1049, float %1043, float %1046, !dbg !73
  %1051 = bitcast float %1050 to i32, !dbg !68
  %1052 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1051, i32 2, i32 31), !dbg !68
  %1053 = bitcast i32 %1052 to float, !dbg !68
  %1054 = fcmp olt float %1050, %1053, !dbg !70
  %1055 = fcmp uno float %1050, 0.000000e+00, !dbg !71
  %1056 = or i1 %1054, %1055, !dbg !72
  %1057 = select i1 %1056, float %1050, float %1053, !dbg !73
  %1058 = bitcast float %1057 to i32, !dbg !68
  %1059 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1058, i32 1, i32 31), !dbg !68
  %1060 = bitcast i32 %1059 to float, !dbg !68
  %1061 = fcmp olt float %1057, %1060, !dbg !70
  %1062 = fcmp uno float %1057, 0.000000e+00, !dbg !71
  %1063 = or i1 %1061, %1062, !dbg !72
  %1064 = and i1 %1028, %382, !dbg !68
  %1065 = select i1 %1063, i32 %1058, i32 %1059, !dbg !73
  %1066 = insertelement <1 x i32> poison, i32 %1065, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %1066, i1 %1064) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1067 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %1068 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !68
  %1069 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !68
  %1070 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1071 = bitcast float %1067 to i32, !dbg !74
  %1072 = bitcast float %1068 to i32, !dbg !74
  %1073 = bitcast float %1069 to i32, !dbg !74
  %1074 = bitcast float %1070 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1071, i32 %1072, i32 %1073, i32 %1074, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1075 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %626, !dbg !74
  %1076 = load float, ptr addrspace(3) %1075, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1077 = fcmp ogt float %765, %766, !dbg !77
  %1078 = fcmp uno float %765, 0.000000e+00, !dbg !78
  %1079 = or i1 %1077, %1078, !dbg !79
  %1080 = select i1 %1079, float %765, float %766, !dbg !80
  %1081 = fcmp ogt float %1080, %767, !dbg !77
  %1082 = fcmp uno float %1080, 0.000000e+00, !dbg !78
  %1083 = or i1 %1081, %1082, !dbg !79
  %1084 = select i1 %1083, float %1080, float %767, !dbg !80
  %1085 = fcmp ogt float %1084, %768, !dbg !77
  %1086 = fcmp uno float %1084, 0.000000e+00, !dbg !78
  %1087 = or i1 %1085, %1086, !dbg !79
  %1088 = select i1 %1087, float %1084, float %768, !dbg !80
  %1089 = fcmp ogt float %769, %770, !dbg !77
  %1090 = fcmp uno float %769, 0.000000e+00, !dbg !78
  %1091 = or i1 %1089, %1090, !dbg !79
  %1092 = select i1 %1091, float %769, float %770, !dbg !80
  %1093 = fcmp ogt float %1092, %771, !dbg !77
  %1094 = fcmp uno float %1092, 0.000000e+00, !dbg !78
  %1095 = or i1 %1093, %1094, !dbg !79
  %1096 = select i1 %1095, float %1092, float %771, !dbg !80
  %1097 = fcmp ogt float %1096, %772, !dbg !77
  %1098 = fcmp uno float %1096, 0.000000e+00, !dbg !78
  %1099 = or i1 %1097, %1098, !dbg !79
  %1100 = select i1 %1099, float %1096, float %772, !dbg !80
  %1101 = fcmp ogt float %773, %774, !dbg !77
  %1102 = fcmp uno float %773, 0.000000e+00, !dbg !78
  %1103 = or i1 %1101, %1102, !dbg !79
  %1104 = select i1 %1103, float %773, float %774, !dbg !80
  %1105 = fcmp ogt float %1104, %775, !dbg !77
  %1106 = fcmp uno float %1104, 0.000000e+00, !dbg !78
  %1107 = or i1 %1105, %1106, !dbg !79
  %1108 = select i1 %1107, float %1104, float %775, !dbg !80
  %1109 = fcmp ogt float %1108, %776, !dbg !77
  %1110 = fcmp uno float %1108, 0.000000e+00, !dbg !78
  %1111 = or i1 %1109, %1110, !dbg !79
  %1112 = select i1 %1111, float %1108, float %776, !dbg !80
  %1113 = fcmp ogt float %777, %778, !dbg !77
  %1114 = fcmp uno float %777, 0.000000e+00, !dbg !78
  %1115 = or i1 %1113, %1114, !dbg !79
  %1116 = select i1 %1115, float %777, float %778, !dbg !80
  %1117 = fcmp ogt float %1116, %779, !dbg !77
  %1118 = fcmp uno float %1116, 0.000000e+00, !dbg !78
  %1119 = or i1 %1117, %1118, !dbg !79
  %1120 = select i1 %1119, float %1116, float %779, !dbg !80
  %1121 = fcmp ogt float %1120, %780, !dbg !77
  %1122 = fcmp uno float %1120, 0.000000e+00, !dbg !78
  %1123 = or i1 %1121, %1122, !dbg !79
  %1124 = select i1 %1123, float %1120, float %780, !dbg !80
  %1125 = bitcast float %1088 to i32, !dbg !75
  %1126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1125, i32 16, i32 31), !dbg !75
  %1127 = bitcast i32 %1126 to float, !dbg !75
  %1128 = fcmp ogt float %1088, %1127, !dbg !77
  %1129 = fcmp uno float %1088, 0.000000e+00, !dbg !78
  %1130 = or i1 %1129, %1128, !dbg !79
  %1131 = select i1 %1130, float %1088, float %1127, !dbg !80
  %1132 = bitcast float %1131 to i32, !dbg !75
  %1133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1132, i32 8, i32 31), !dbg !75
  %1134 = bitcast i32 %1133 to float, !dbg !75
  %1135 = fcmp ogt float %1131, %1134, !dbg !77
  %1136 = fcmp uno float %1131, 0.000000e+00, !dbg !78
  %1137 = or i1 %1135, %1136, !dbg !79
  %1138 = select i1 %1137, float %1131, float %1134, !dbg !80
  %1139 = bitcast float %1138 to i32, !dbg !75
  %1140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1139, i32 4, i32 31), !dbg !75
  %1141 = bitcast i32 %1140 to float, !dbg !75
  %1142 = fcmp ogt float %1138, %1141, !dbg !77
  %1143 = fcmp uno float %1138, 0.000000e+00, !dbg !78
  %1144 = or i1 %1142, %1143, !dbg !79
  %1145 = select i1 %1144, float %1138, float %1141, !dbg !80
  %1146 = bitcast float %1145 to i32, !dbg !75
  %1147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1146, i32 2, i32 31), !dbg !75
  %1148 = bitcast i32 %1147 to float, !dbg !75
  %1149 = fcmp ogt float %1145, %1148, !dbg !77
  %1150 = fcmp uno float %1145, 0.000000e+00, !dbg !78
  %1151 = or i1 %1149, %1150, !dbg !79
  %1152 = select i1 %1151, float %1145, float %1148, !dbg !80
  %1153 = bitcast float %1152 to i32, !dbg !75
  %1154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1153, i32 1, i32 31), !dbg !75
  %1155 = bitcast i32 %1154 to float, !dbg !75
  %1156 = fcmp ogt float %1152, %1155, !dbg !77
  %1157 = fcmp uno float %1152, 0.000000e+00, !dbg !78
  %1158 = or i1 %1156, %1157, !dbg !79
  %1159 = bitcast float %1100 to i32, !dbg !75
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 16, i32 31), !dbg !75
  %1161 = bitcast i32 %1160 to float, !dbg !75
  %1162 = fcmp ogt float %1100, %1161, !dbg !77
  %1163 = fcmp uno float %1100, 0.000000e+00, !dbg !78
  %1164 = or i1 %1163, %1162, !dbg !79
  %1165 = select i1 %1164, float %1100, float %1161, !dbg !80
  %1166 = bitcast float %1165 to i32, !dbg !75
  %1167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1166, i32 8, i32 31), !dbg !75
  %1168 = bitcast i32 %1167 to float, !dbg !75
  %1169 = fcmp ogt float %1165, %1168, !dbg !77
  %1170 = fcmp uno float %1165, 0.000000e+00, !dbg !78
  %1171 = or i1 %1169, %1170, !dbg !79
  %1172 = select i1 %1171, float %1165, float %1168, !dbg !80
  %1173 = bitcast float %1172 to i32, !dbg !75
  %1174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1173, i32 4, i32 31), !dbg !75
  %1175 = bitcast i32 %1174 to float, !dbg !75
  %1176 = fcmp ogt float %1172, %1175, !dbg !77
  %1177 = fcmp uno float %1172, 0.000000e+00, !dbg !78
  %1178 = or i1 %1176, %1177, !dbg !79
  %1179 = select i1 %1178, float %1172, float %1175, !dbg !80
  %1180 = bitcast float %1179 to i32, !dbg !75
  %1181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1180, i32 2, i32 31), !dbg !75
  %1182 = bitcast i32 %1181 to float, !dbg !75
  %1183 = fcmp ogt float %1179, %1182, !dbg !77
  %1184 = fcmp uno float %1179, 0.000000e+00, !dbg !78
  %1185 = or i1 %1183, %1184, !dbg !79
  %1186 = select i1 %1185, float %1179, float %1182, !dbg !80
  %1187 = bitcast float %1186 to i32, !dbg !75
  %1188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1187, i32 1, i32 31), !dbg !75
  %1189 = bitcast i32 %1188 to float, !dbg !75
  %1190 = fcmp ogt float %1186, %1189, !dbg !77
  %1191 = fcmp uno float %1186, 0.000000e+00, !dbg !78
  %1192 = or i1 %1190, %1191, !dbg !79
  %1193 = bitcast float %1112 to i32, !dbg !75
  %1194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1193, i32 16, i32 31), !dbg !75
  %1195 = bitcast i32 %1194 to float, !dbg !75
  %1196 = fcmp ogt float %1112, %1195, !dbg !77
  %1197 = fcmp uno float %1112, 0.000000e+00, !dbg !78
  %1198 = or i1 %1197, %1196, !dbg !79
  %1199 = select i1 %1198, float %1112, float %1195, !dbg !80
  %1200 = bitcast float %1199 to i32, !dbg !75
  %1201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1200, i32 8, i32 31), !dbg !75
  %1202 = bitcast i32 %1201 to float, !dbg !75
  %1203 = fcmp ogt float %1199, %1202, !dbg !77
  %1204 = fcmp uno float %1199, 0.000000e+00, !dbg !78
  %1205 = or i1 %1203, %1204, !dbg !79
  %1206 = select i1 %1205, float %1199, float %1202, !dbg !80
  %1207 = bitcast float %1206 to i32, !dbg !75
  %1208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1207, i32 4, i32 31), !dbg !75
  %1209 = bitcast i32 %1208 to float, !dbg !75
  %1210 = fcmp ogt float %1206, %1209, !dbg !77
  %1211 = fcmp uno float %1206, 0.000000e+00, !dbg !78
  %1212 = or i1 %1210, %1211, !dbg !79
  %1213 = select i1 %1212, float %1206, float %1209, !dbg !80
  %1214 = bitcast float %1213 to i32, !dbg !75
  %1215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1214, i32 2, i32 31), !dbg !75
  %1216 = bitcast i32 %1215 to float, !dbg !75
  %1217 = fcmp ogt float %1213, %1216, !dbg !77
  %1218 = fcmp uno float %1213, 0.000000e+00, !dbg !78
  %1219 = or i1 %1217, %1218, !dbg !79
  %1220 = select i1 %1219, float %1213, float %1216, !dbg !80
  %1221 = bitcast float %1220 to i32, !dbg !75
  %1222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1221, i32 1, i32 31), !dbg !75
  %1223 = bitcast i32 %1222 to float, !dbg !75
  %1224 = fcmp ogt float %1220, %1223, !dbg !77
  %1225 = fcmp uno float %1220, 0.000000e+00, !dbg !78
  %1226 = or i1 %1224, %1225, !dbg !79
  %1227 = bitcast float %1124 to i32, !dbg !75
  %1228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 16, i32 31), !dbg !75
  %1229 = bitcast i32 %1228 to float, !dbg !75
  %1230 = fcmp ogt float %1124, %1229, !dbg !77
  %1231 = fcmp uno float %1124, 0.000000e+00, !dbg !78
  %1232 = or i1 %1231, %1230, !dbg !79
  %1233 = select i1 %1232, float %1124, float %1229, !dbg !80
  %1234 = bitcast float %1233 to i32, !dbg !75
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 8, i32 31), !dbg !75
  %1236 = bitcast i32 %1235 to float, !dbg !75
  %1237 = fcmp ogt float %1233, %1236, !dbg !77
  %1238 = fcmp uno float %1233, 0.000000e+00, !dbg !78
  %1239 = or i1 %1237, %1238, !dbg !79
  %1240 = select i1 %1239, float %1233, float %1236, !dbg !80
  %1241 = bitcast float %1240 to i32, !dbg !75
  %1242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1241, i32 4, i32 31), !dbg !75
  %1243 = bitcast i32 %1242 to float, !dbg !75
  %1244 = fcmp ogt float %1240, %1243, !dbg !77
  %1245 = fcmp uno float %1240, 0.000000e+00, !dbg !78
  %1246 = or i1 %1244, %1245, !dbg !79
  %1247 = select i1 %1246, float %1240, float %1243, !dbg !80
  %1248 = bitcast float %1247 to i32, !dbg !75
  %1249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1248, i32 2, i32 31), !dbg !75
  %1250 = bitcast i32 %1249 to float, !dbg !75
  %1251 = fcmp ogt float %1247, %1250, !dbg !77
  %1252 = fcmp uno float %1247, 0.000000e+00, !dbg !78
  %1253 = or i1 %1251, %1252, !dbg !79
  %1254 = select i1 %1253, float %1247, float %1250, !dbg !80
  %1255 = bitcast float %1254 to i32, !dbg !75
  %1256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1255, i32 1, i32 31), !dbg !75
  %1257 = bitcast i32 %1256 to float, !dbg !75
  %1258 = fcmp ogt float %1254, %1257, !dbg !77
  %1259 = fcmp uno float %1254, 0.000000e+00, !dbg !78
  %1260 = or i1 %1258, %1259, !dbg !79
  %1261 = select i1 %1158, i32 %1153, i32 %1154, !dbg !80
  %1262 = insertelement <1 x i32> poison, i32 %1261, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1013, <1 x i32> %1262, i1 %382) #5, !dbg !75
  %1263 = select i1 %1192, i32 %1187, i32 %1188, !dbg !80
  %1264 = insertelement <1 x i32> poison, i32 %1263, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1264, i1 %382) #5, !dbg !75
  %1265 = select i1 %1226, i32 %1221, i32 %1222, !dbg !80
  %1266 = insertelement <1 x i32> poison, i32 %1265, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1266, i1 %382) #5, !dbg !75
  %1267 = select i1 %1260, i32 %1255, i32 %1256, !dbg !80
  %1268 = insertelement <1 x i32> poison, i32 %1267, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1025, <1 x i32> %1268, i1 %382) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %1028) #5, !dbg !75
  %1270 = bitcast i32 %1269 to float, !dbg !75
  %1271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1269, i32 16, i32 31), !dbg !75
  %1272 = bitcast i32 %1271 to float, !dbg !75
  %1273 = fcmp ogt float %1270, %1272, !dbg !77
  %1274 = fcmp uno float %1270, 0.000000e+00, !dbg !78
  %1275 = or i1 %1274, %1273, !dbg !79
  %1276 = select i1 %1275, float %1270, float %1272, !dbg !80
  %1277 = bitcast float %1276 to i32, !dbg !75
  %1278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1277, i32 8, i32 31), !dbg !75
  %1279 = bitcast i32 %1278 to float, !dbg !75
  %1280 = fcmp ogt float %1276, %1279, !dbg !77
  %1281 = fcmp uno float %1276, 0.000000e+00, !dbg !78
  %1282 = or i1 %1280, %1281, !dbg !79
  %1283 = select i1 %1282, float %1276, float %1279, !dbg !80
  %1284 = bitcast float %1283 to i32, !dbg !75
  %1285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1284, i32 4, i32 31), !dbg !75
  %1286 = bitcast i32 %1285 to float, !dbg !75
  %1287 = fcmp ogt float %1283, %1286, !dbg !77
  %1288 = fcmp uno float %1283, 0.000000e+00, !dbg !78
  %1289 = or i1 %1287, %1288, !dbg !79
  %1290 = select i1 %1289, float %1283, float %1286, !dbg !80
  %1291 = bitcast float %1290 to i32, !dbg !75
  %1292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1291, i32 2, i32 31), !dbg !75
  %1293 = bitcast i32 %1292 to float, !dbg !75
  %1294 = fcmp ogt float %1290, %1293, !dbg !77
  %1295 = fcmp uno float %1290, 0.000000e+00, !dbg !78
  %1296 = or i1 %1294, %1295, !dbg !79
  %1297 = select i1 %1296, float %1290, float %1293, !dbg !80
  %1298 = bitcast float %1297 to i32, !dbg !75
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1298, i32 1, i32 31), !dbg !75
  %1300 = bitcast i32 %1299 to float, !dbg !75
  %1301 = fcmp ogt float %1297, %1300, !dbg !77
  %1302 = fcmp uno float %1297, 0.000000e+00, !dbg !78
  %1303 = or i1 %1301, %1302, !dbg !79
  %1304 = select i1 %1303, i32 %1298, i32 %1299, !dbg !80
  %1305 = insertelement <1 x i32> poison, i32 %1304, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %1305, i1 %1064) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1306 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %1307 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !75
  %1308 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !75
  %1309 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1310 = bitcast float %1306 to i32, !dbg !81
  %1311 = bitcast float %1307 to i32, !dbg !81
  %1312 = bitcast float %1308 to i32, !dbg !81
  %1313 = bitcast float %1309 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1310, i32 %1311, i32 %1312, i32 %1313, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1314 = load float, ptr addrspace(3) %1075, align 4, !dbg !81
  %1315 = sext i32 %627 to i64, !dbg !82
  %1316 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1315, !dbg !82
  %1317 = fptrunc float %1076 to bfloat, !dbg !74
  %1318 = and i32 %21, 1020, !dbg !74
  %1319 = icmp eq i32 %1318, 0, !dbg !74
  %1320 = bitcast bfloat %1317 to i16, !dbg !74
  %1321 = and i1 %1319, %628, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1320, ptr addrspace(1) %1316, i1 %1321) #5, !dbg !74
  %1322 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1315, !dbg !83
  %1323 = fptrunc float %1314 to bfloat, !dbg !81
  %1324 = bitcast bfloat %1323 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1324, ptr addrspace(1) %1322, i1 %1321) #5, !dbg !81
  %1325 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1315, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1320, ptr addrspace(1) %1325, i1 %1321) #5, !dbg !85
  %1326 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1315, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1324, ptr addrspace(1) %1326, i1 %1321) #5, !dbg !87
  %1327 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1315, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1320, ptr addrspace(1) %1327, i1 %1321) #5, !dbg !89
  %1328 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1315, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1324, ptr addrspace(1) %1328, i1 %1321) #5, !dbg !91
  %1329 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1315, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1320, ptr addrspace(1) %1329, i1 %1321) #5, !dbg !93
  %1330 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1315, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1324, ptr addrspace(1) %1330, i1 %1321) #5, !dbg !95
  %1331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %785, i1 %41) #5, !dbg !96
  %1332 = extractvalue { i32, i32, i32, i32 } %1331, 0, !dbg !96
  %1333 = bitcast i32 %1332 to <2 x bfloat>, !dbg !96
  %1334 = extractvalue { i32, i32, i32, i32 } %1331, 1, !dbg !96
  %1335 = bitcast i32 %1334 to <2 x bfloat>, !dbg !96
  %1336 = extractvalue { i32, i32, i32, i32 } %1331, 2, !dbg !96
  %1337 = bitcast i32 %1336 to <2 x bfloat>, !dbg !96
  %1338 = extractvalue { i32, i32, i32, i32 } %1331, 3, !dbg !96
  %1339 = bitcast i32 %1338 to <2 x bfloat>, !dbg !96
  %1340 = extractelement <2 x bfloat> %1333, i64 0, !dbg !96
  %1341 = extractelement <2 x bfloat> %1333, i64 1, !dbg !96
  %1342 = extractelement <2 x bfloat> %1335, i64 0, !dbg !96
  %1343 = extractelement <2 x bfloat> %1335, i64 1, !dbg !96
  %1344 = extractelement <2 x bfloat> %1337, i64 0, !dbg !96
  %1345 = extractelement <2 x bfloat> %1337, i64 1, !dbg !96
  %1346 = extractelement <2 x bfloat> %1339, i64 0, !dbg !96
  %1347 = extractelement <2 x bfloat> %1339, i64 1, !dbg !96
  %1348 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %786, i1 %41) #5, !dbg !96
  %1349 = extractvalue { i32, i32, i32, i32 } %1348, 0, !dbg !96
  %1350 = bitcast i32 %1349 to <2 x bfloat>, !dbg !96
  %1351 = extractvalue { i32, i32, i32, i32 } %1348, 1, !dbg !96
  %1352 = bitcast i32 %1351 to <2 x bfloat>, !dbg !96
  %1353 = extractvalue { i32, i32, i32, i32 } %1348, 2, !dbg !96
  %1354 = bitcast i32 %1353 to <2 x bfloat>, !dbg !96
  %1355 = extractvalue { i32, i32, i32, i32 } %1348, 3, !dbg !96
  %1356 = bitcast i32 %1355 to <2 x bfloat>, !dbg !96
  %1357 = extractelement <2 x bfloat> %1350, i64 0, !dbg !96
  %1358 = extractelement <2 x bfloat> %1350, i64 1, !dbg !96
  %1359 = extractelement <2 x bfloat> %1352, i64 0, !dbg !96
  %1360 = extractelement <2 x bfloat> %1352, i64 1, !dbg !96
  %1361 = extractelement <2 x bfloat> %1354, i64 0, !dbg !96
  %1362 = extractelement <2 x bfloat> %1354, i64 1, !dbg !96
  %1363 = extractelement <2 x bfloat> %1356, i64 0, !dbg !96
  %1364 = extractelement <2 x bfloat> %1356, i64 1, !dbg !96
  %1365 = fpext bfloat %1340 to float, !dbg !97
  %1366 = fpext bfloat %1341 to float, !dbg !97
  %1367 = fpext bfloat %1342 to float, !dbg !97
  %1368 = fpext bfloat %1343 to float, !dbg !97
  %1369 = fpext bfloat %1344 to float, !dbg !97
  %1370 = fpext bfloat %1345 to float, !dbg !97
  %1371 = fpext bfloat %1346 to float, !dbg !97
  %1372 = fpext bfloat %1347 to float, !dbg !97
  %1373 = fpext bfloat %1357 to float, !dbg !97
  %1374 = fpext bfloat %1358 to float, !dbg !97
  %1375 = fpext bfloat %1359 to float, !dbg !97
  %1376 = fpext bfloat %1360 to float, !dbg !97
  %1377 = fpext bfloat %1361 to float, !dbg !97
  %1378 = fpext bfloat %1362 to float, !dbg !97
  %1379 = fpext bfloat %1363 to float, !dbg !97
  %1380 = fpext bfloat %1364 to float, !dbg !97
  %1381 = insertelement <4 x float> poison, float %1070, i64 0, !dbg !98
  %1382 = insertelement <4 x float> %1381, float %1069, i64 1, !dbg !98
  %1383 = insertelement <4 x float> %1382, float %1068, i64 2, !dbg !98
  %1384 = insertelement <4 x float> %1383, float %1067, i64 3, !dbg !98
  %1385 = fcmp oge <4 x float> %1384, zeroinitializer, !dbg !98
  %1386 = select <4 x i1> %1385, <4 x float> zeroinitializer, <4 x float> %1384, !dbg !98
  %1387 = fsub <4 x float> zeroinitializer, %1386, !dbg !100
  %1388 = insertelement <4 x float> poison, float %1309, i64 0, !dbg !101
  %1389 = insertelement <4 x float> %1388, float %1308, i64 1, !dbg !101
  %1390 = insertelement <4 x float> %1389, float %1307, i64 2, !dbg !101
  %1391 = insertelement <4 x float> %1390, float %1306, i64 3, !dbg !101
  %1392 = fcmp ole <4 x float> %1391, zeroinitializer, !dbg !101
  %1393 = select <4 x i1> %1392, <4 x float> zeroinitializer, <4 x float> %1391, !dbg !101
  %1394 = fcmp ogt <4 x float> %1387, %1393, !dbg !103
  %1395 = fcmp uno <4 x float> %1387, zeroinitializer, !dbg !105
  %1396 = or <4 x i1> %1395, %1394, !dbg !106
  %1397 = select <4 x i1> %1396, <4 x float> %1387, <4 x float> %1393, !dbg !107
  %1398 = fmul <4 x float> %1397, splat (float 0x3F80204080000000), !dbg !108
  %1399 = fcmp ogt <4 x float> %1398, splat (float 0x3EE4F8B580000000), !dbg !109
  %1400 = extractelement <4 x float> %1398, i64 3, !dbg !111
  %1401 = fcmp uno float %1400, 0.000000e+00, !dbg !112
  %1402 = extractelement <4 x float> %1398, i64 2, !dbg !111
  %1403 = fcmp uno float %1402, 0.000000e+00, !dbg !112
  %1404 = extractelement <4 x float> %1398, i64 1, !dbg !111
  %1405 = fcmp uno float %1404, 0.000000e+00, !dbg !112
  %1406 = extractelement <4 x float> %1398, i64 0, !dbg !111
  %1407 = fcmp uno float %1406, 0.000000e+00, !dbg !112
  %1408 = extractelement <4 x i1> %1399, i64 3, !dbg !113
  %1409 = or i1 %1408, %1401, !dbg !113
  %1410 = extractelement <4 x i1> %1399, i64 2, !dbg !113
  %1411 = or i1 %1410, %1403, !dbg !113
  %1412 = extractelement <4 x i1> %1399, i64 1, !dbg !113
  %1413 = or i1 %1412, %1405, !dbg !113
  %1414 = extractelement <4 x i1> %1399, i64 0, !dbg !113
  %1415 = or i1 %1414, %1407, !dbg !113
  %1416 = select i1 %1409, float %1400, float 0x3EE4F8B580000000, !dbg !111
  %1417 = select i1 %1411, float %1402, float 0x3EE4F8B580000000, !dbg !111
  %1418 = select i1 %1413, float %1404, float 0x3EE4F8B580000000, !dbg !111
  %1419 = select i1 %1415, float %1406, float 0x3EE4F8B580000000, !dbg !111
  %1420 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1416), !dbg !114
  %1421 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1417), !dbg !114
  %1422 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1418), !dbg !114
  %1423 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1419), !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1424 = bitcast float %1420 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1424, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1424, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1424, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1424, i1 true) #5, !dbg !115
  %1425 = bitcast float %1421 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1425, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1425, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1425, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1425, i1 true) #5, !dbg !115
  %1426 = bitcast float %1422 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1426, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1426, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1426, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1426, i1 true) #5, !dbg !115
  %1427 = bitcast float %1423 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1427, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1427, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1427, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1427, i1 true) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %1428 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %383, !dbg !115
  %1429 = load float, ptr addrspace(3) %1428, align 8, !dbg !115
  %1430 = fmul float %1429, %1365, !dbg !115
  %1431 = fmul float %1429, %1366, !dbg !115
  %1432 = fmul float %1429, %1367, !dbg !115
  %1433 = fmul float %1429, %1368, !dbg !115
  %1434 = fmul float %1429, %1369, !dbg !115
  %1435 = fmul float %1429, %1370, !dbg !115
  %1436 = fmul float %1429, %1371, !dbg !115
  %1437 = fmul float %1429, %1372, !dbg !115
  %1438 = fmul float %1429, %1373, !dbg !115
  %1439 = fmul float %1429, %1374, !dbg !115
  %1440 = fmul float %1429, %1375, !dbg !115
  %1441 = fmul float %1429, %1376, !dbg !115
  %1442 = fmul float %1429, %1377, !dbg !115
  %1443 = fmul float %1429, %1378, !dbg !115
  %1444 = fmul float %1429, %1379, !dbg !115
  %1445 = fmul float %1429, %1380, !dbg !115
  %1446 = tail call float @llvm.nvvm.round.f(float %1430) #5, !dbg !116
  %1447 = tail call float @llvm.nvvm.round.f(float %1431) #5, !dbg !116
  %1448 = tail call float @llvm.nvvm.round.f(float %1432) #5, !dbg !116
  %1449 = tail call float @llvm.nvvm.round.f(float %1433) #5, !dbg !116
  %1450 = tail call float @llvm.nvvm.round.f(float %1434) #5, !dbg !116
  %1451 = tail call float @llvm.nvvm.round.f(float %1435) #5, !dbg !116
  %1452 = tail call float @llvm.nvvm.round.f(float %1436) #5, !dbg !116
  %1453 = tail call float @llvm.nvvm.round.f(float %1437) #5, !dbg !116
  %1454 = tail call float @llvm.nvvm.round.f(float %1438) #5, !dbg !116
  %1455 = tail call float @llvm.nvvm.round.f(float %1439) #5, !dbg !116
  %1456 = tail call float @llvm.nvvm.round.f(float %1440) #5, !dbg !116
  %1457 = tail call float @llvm.nvvm.round.f(float %1441) #5, !dbg !116
  %1458 = tail call float @llvm.nvvm.round.f(float %1442) #5, !dbg !116
  %1459 = tail call float @llvm.nvvm.round.f(float %1443) #5, !dbg !116
  %1460 = tail call float @llvm.nvvm.round.f(float %1444) #5, !dbg !116
  %1461 = tail call float @llvm.nvvm.round.f(float %1445) #5, !dbg !116
  %1462 = insertelement <4 x float> poison, float %1446, i64 0, !dbg !117
  %1463 = insertelement <4 x float> %1462, float %1447, i64 1, !dbg !117
  %1464 = insertelement <4 x float> %1463, float %1448, i64 2, !dbg !117
  %1465 = insertelement <4 x float> %1464, float %1449, i64 3, !dbg !117
  %1466 = fcmp ogt <4 x float> %1465, splat (float -1.270000e+02), !dbg !117
  %1467 = fcmp uno <4 x float> %1465, zeroinitializer, !dbg !119
  %1468 = or <4 x i1> %1466, %1467, !dbg !120
  %1469 = select <4 x i1> %1468, <4 x float> %1465, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1470 = fcmp olt <4 x float> %1469, splat (float 1.270000e+02), !dbg !122
  %1471 = fcmp uno <4 x float> %1469, zeroinitializer, !dbg !124
  %1472 = or <4 x i1> %1470, %1471, !dbg !125
  %1473 = fptosi <4 x float> %1469 to <4 x i8>, !dbg !126
  %1474 = select <4 x i1> %1472, <4 x i8> %1473, <4 x i8> splat (i8 127), !dbg !127
  %1475 = insertelement <4 x float> poison, float %1450, i64 0, !dbg !117
  %1476 = insertelement <4 x float> %1475, float %1451, i64 1, !dbg !117
  %1477 = insertelement <4 x float> %1476, float %1452, i64 2, !dbg !117
  %1478 = insertelement <4 x float> %1477, float %1453, i64 3, !dbg !117
  %1479 = fcmp ogt <4 x float> %1478, splat (float -1.270000e+02), !dbg !117
  %1480 = fcmp uno <4 x float> %1478, zeroinitializer, !dbg !119
  %1481 = or <4 x i1> %1479, %1480, !dbg !120
  %1482 = select <4 x i1> %1481, <4 x float> %1478, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1483 = fcmp olt <4 x float> %1482, splat (float 1.270000e+02), !dbg !122
  %1484 = fcmp uno <4 x float> %1482, zeroinitializer, !dbg !124
  %1485 = or <4 x i1> %1483, %1484, !dbg !125
  %1486 = fptosi <4 x float> %1482 to <4 x i8>, !dbg !126
  %1487 = select <4 x i1> %1485, <4 x i8> %1486, <4 x i8> splat (i8 127), !dbg !127
  %1488 = insertelement <4 x float> poison, float %1454, i64 0, !dbg !117
  %1489 = insertelement <4 x float> %1488, float %1455, i64 1, !dbg !117
  %1490 = insertelement <4 x float> %1489, float %1456, i64 2, !dbg !117
  %1491 = insertelement <4 x float> %1490, float %1457, i64 3, !dbg !117
  %1492 = fcmp ogt <4 x float> %1491, splat (float -1.270000e+02), !dbg !117
  %1493 = fcmp uno <4 x float> %1491, zeroinitializer, !dbg !119
  %1494 = or <4 x i1> %1492, %1493, !dbg !120
  %1495 = select <4 x i1> %1494, <4 x float> %1491, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1496 = fcmp olt <4 x float> %1495, splat (float 1.270000e+02), !dbg !122
  %1497 = fcmp uno <4 x float> %1495, zeroinitializer, !dbg !124
  %1498 = or <4 x i1> %1496, %1497, !dbg !125
  %1499 = fptosi <4 x float> %1495 to <4 x i8>, !dbg !126
  %1500 = select <4 x i1> %1498, <4 x i8> %1499, <4 x i8> splat (i8 127), !dbg !127
  %1501 = insertelement <4 x float> poison, float %1458, i64 0, !dbg !117
  %1502 = insertelement <4 x float> %1501, float %1459, i64 1, !dbg !117
  %1503 = insertelement <4 x float> %1502, float %1460, i64 2, !dbg !117
  %1504 = insertelement <4 x float> %1503, float %1461, i64 3, !dbg !117
  %1505 = fcmp ogt <4 x float> %1504, splat (float -1.270000e+02), !dbg !117
  %1506 = fcmp uno <4 x float> %1504, zeroinitializer, !dbg !119
  %1507 = or <4 x i1> %1505, %1506, !dbg !120
  %1508 = select <4 x i1> %1507, <4 x float> %1504, <4 x float> splat (float -1.270000e+02), !dbg !121
  %1509 = fcmp olt <4 x float> %1508, splat (float 1.270000e+02), !dbg !122
  %1510 = fcmp uno <4 x float> %1508, zeroinitializer, !dbg !124
  %1511 = or <4 x i1> %1509, %1510, !dbg !125
  %1512 = fptosi <4 x float> %1508 to <4 x i8>, !dbg !126
  %1513 = select <4 x i1> %1511, <4 x i8> %1512, <4 x i8> splat (i8 127), !dbg !127
  %1514 = getelementptr i8, ptr addrspace(1) %12, i64 %37, !dbg !128
  %1515 = bitcast <4 x i8> %1474 to i32, !dbg !129
  %1516 = bitcast <4 x i8> %1487 to i32, !dbg !129
  %1517 = bitcast <4 x i8> %1500 to i32, !dbg !129
  %1518 = bitcast <4 x i8> %1513 to i32, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1514, i1 %41) #5, !dbg !129
  %1519 = getelementptr i8, ptr addrspace(1) %13, i64 %37, !dbg !130
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1519, i1 %41) #5, !dbg !131
  %1520 = getelementptr i8, ptr addrspace(1) %14, i64 %37, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1520, i1 %41) #5, !dbg !133
  %1521 = getelementptr i8, ptr addrspace(1) %15, i64 %37, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1515, i32 %1516, i32 %1517, i32 %1518, ptr addrspace(1) %1521, i1 %41) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 63, column: 95, scope: !6)
!57 = !DILocation(line: 61, column: 102, scope: !6)
!58 = !DILocation(line: 71, column: 24, scope: !6)
!59 = !DILocation(line: 74, column: 24, scope: !6)
!60 = !DILocation(line: 76, column: 24, scope: !6)
!61 = !DILocation(line: 77, column: 24, scope: !6)
!62 = !DILocation(line: 79, column: 24, scope: !6)
!63 = !DILocation(line: 80, column: 24, scope: !6)
!64 = !DILocation(line: 83, column: 50, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 86, column: 29, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
