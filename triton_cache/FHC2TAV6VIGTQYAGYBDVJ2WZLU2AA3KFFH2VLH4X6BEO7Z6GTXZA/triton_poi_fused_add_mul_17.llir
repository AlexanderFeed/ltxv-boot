; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_add_mul_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 10, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 3, !dbg !11
  %12 = and i32 %11, 1016, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = srem i32 %13, 3072, !dbg !13
  %15 = sext i32 %13 to i64, !dbg !14
  %16 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %16) #1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !15
  %26 = add nsw i32 %14, 15360, !dbg !16
  %27 = zext nneg i32 %26 to i64, !dbg !17
  %28 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %28) #1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !18
  %38 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %38) #1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !20
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !20
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !20
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !20
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !20
  %48 = getelementptr bfloat, ptr addrspace(1) %3, i64 %15, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %48) #1, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !22
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !22
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !22
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !22
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !22
  %58 = sext i32 %14 to i64, !dbg !23
  %59 = getelementptr bfloat, ptr addrspace(1) %4, i64 %58, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %59) #1, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !24
  %69 = fpext <2 x bfloat> %19 to <2 x float>, !dbg !25
  %70 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !26
  %71 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !27
  %72 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !28
  %73 = fpext <2 x bfloat> %62 to <2 x float>, !dbg !29
  %74 = fadd <2 x float> %70, %71, !dbg !30
  %75 = fadd <2 x float> %72, %73, !dbg !31
  %76 = fmul <2 x float> %74, %75, !dbg !32
  %77 = fadd <2 x float> %76, %69, !dbg !33
  %78 = fptrunc <2 x float> %77 to <2 x bfloat>, !dbg !34
  %79 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !25
  %80 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !26
  %81 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !27
  %82 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !28
  %83 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !29
  %84 = fadd <2 x float> %80, %81, !dbg !30
  %85 = fadd <2 x float> %82, %83, !dbg !31
  %86 = fmul <2 x float> %84, %85, !dbg !32
  %87 = fadd <2 x float> %86, %79, !dbg !33
  %88 = fptrunc <2 x float> %87 to <2 x bfloat>, !dbg !34
  %89 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !25
  %90 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !26
  %91 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !27
  %92 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !28
  %93 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !29
  %94 = fadd <2 x float> %90, %91, !dbg !30
  %95 = fadd <2 x float> %92, %93, !dbg !31
  %96 = fmul <2 x float> %94, %95, !dbg !32
  %97 = fadd <2 x float> %96, %89, !dbg !33
  %98 = fptrunc <2 x float> %97 to <2 x bfloat>, !dbg !34
  %99 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !25
  %100 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !26
  %101 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !27
  %102 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !28
  %103 = fpext <2 x bfloat> %68 to <2 x float>, !dbg !29
  %104 = fadd <2 x float> %100, %101, !dbg !30
  %105 = fadd <2 x float> %102, %103, !dbg !31
  %106 = fmul <2 x float> %104, %105, !dbg !32
  %107 = fadd <2 x float> %106, %99, !dbg !33
  %108 = fptrunc <2 x float> %107 to <2 x bfloat>, !dbg !34
  %109 = bitcast <2 x bfloat> %78 to i32, !dbg !34
  %110 = bitcast <2 x bfloat> %88 to i32, !dbg !34
  %111 = bitcast <2 x bfloat> %98 to i32, !dbg !34
  %112 = bitcast <2 x bfloat> %108 to i32, !dbg !34
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %109, i32 %110, i32 %111, i32 %112, ptr addrspace(1) %16) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmzdy2v6agq75cnj5ux4zxtfjm3wo7gv6nt6sr4yobszthdzqua2.py", directory: "/tmp/torchinductor_root/mz")
!4 = !{ptr @triton_poi_fused_add_mul_17, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_17", linkageName: "triton_poi_fused_add_mul_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 25, column: 34, scope: !6)
!15 = !DILocation(line: 25, column: 39, scope: !6)
!16 = !DILocation(line: 26, column: 38, scope: !6)
!17 = !DILocation(line: 26, column: 30, scope: !6)
!18 = !DILocation(line: 26, column: 43, scope: !6)
!19 = !DILocation(line: 27, column: 30, scope: !6)
!20 = !DILocation(line: 27, column: 43, scope: !6)
!21 = !DILocation(line: 28, column: 30, scope: !6)
!22 = !DILocation(line: 28, column: 35, scope: !6)
!23 = !DILocation(line: 29, column: 30, scope: !6)
!24 = !DILocation(line: 29, column: 35, scope: !6)
!25 = !DILocation(line: 25, column: 48, scope: !6)
!26 = !DILocation(line: 26, column: 82, scope: !6)
!27 = !DILocation(line: 27, column: 82, scope: !6)
!28 = !DILocation(line: 28, column: 44, scope: !6)
!29 = !DILocation(line: 29, column: 74, scope: !6)
!30 = !DILocation(line: 30, column: 18, scope: !6)
!31 = !DILocation(line: 31, column: 18, scope: !6)
!32 = !DILocation(line: 32, column: 18, scope: !6)
!33 = !DILocation(line: 33, column: 18, scope: !6)
!34 = !DILocation(line: 34, column: 39, scope: !6)
!35 = !DILocation(line: 34, column: 4, scope: !6)
