; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/vk/cvkaebxyomoxsqaxavllrfibzcxlvyxdu4omwa4ryyrzmjcazngj.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 1, !dbg !13
  %14 = and i32 %13, 63, !dbg !13
  %15 = lshr i32 %12, 3, !dbg !13
  %16 = and i32 %15, 15, !dbg !13
  %17 = or disjoint i32 %14, %11, !dbg !14
  %18 = or disjoint i32 %16, %11, !dbg !14
  %19 = or disjoint i32 %18, 16, !dbg !14
  %20 = or disjoint i32 %18, 32, !dbg !14
  %21 = or disjoint i32 %18, 48, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !15
  %23 = icmp slt i32 %18, 512, !dbg !15
  %24 = icmp slt i32 %19, 512, !dbg !15
  %25 = icmp slt i32 %20, 512, !dbg !15
  %26 = icmp slt i32 %21, 512, !dbg !15
  %27 = shl i32 %12, 2, !dbg !16
  %28 = and i32 %27, 4, !dbg !16
  %29 = sext i32 %17 to i64, !dbg !17
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = sext i32 %18 to i64, !dbg !17
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = sext i32 %19 to i64, !dbg !17
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33, !dbg !17
  %35 = sext i32 %20 to i64, !dbg !17
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = sext i32 %21 to i64, !dbg !17
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %22) #6, !dbg !18
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %22) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %22) #6, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %22) #6, !dbg !18
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %23) #6, !dbg !18
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %24) #6, !dbg !18
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %25) #6, !dbg !18
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %26) #6, !dbg !18
  %47 = shl i32 %17, 12, !dbg !19
  %48 = icmp slt i64 %42, 0, !dbg !20
  %49 = insertelement <4 x i64> poison, i64 %46, i64 0, !dbg !21
  %50 = insertelement <4 x i64> %49, i64 %45, i64 1, !dbg !21
  %51 = insertelement <4 x i64> %50, i64 %44, i64 2, !dbg !21
  %52 = insertelement <4 x i64> %51, i64 %43, i64 3, !dbg !21
  %53 = add <4 x i64> %52, splat (i64 32128), !dbg !21
  %54 = icmp slt <4 x i64> %52, zeroinitializer, !dbg !20
  %55 = select <4 x i1> %54, <4 x i64> %53, <4 x i64> %52, !dbg !22
  %56 = icmp ult <4 x i64> %55, splat (i64 32128), !dbg !23
  %57 = xor i1 %23, true, !dbg !24
  %58 = xor i1 %24, true, !dbg !24
  %59 = xor i1 %25, true, !dbg !24
  %60 = xor i1 %26, true, !dbg !24
  %61 = extractelement <4 x i1> %56, i64 3, !dbg !25
  %62 = or i1 %61, %57, !dbg !25
  %63 = extractelement <4 x i1> %56, i64 2, !dbg !25
  %64 = or i1 %63, %58, !dbg !25
  %65 = extractelement <4 x i1> %56, i64 1, !dbg !25
  %66 = or i1 %65, %59, !dbg !25
  %67 = extractelement <4 x i1> %56, i64 0, !dbg !25
  %68 = or i1 %67, %60, !dbg !25
  %69 = shl i64 %42, 12, !dbg !26
  %70 = add i64 %69, 131596288, !dbg !26
  %71 = select i1 %48, i64 %70, i64 %69, !dbg !26
  %invariant.op = or disjoint i32 %28, %47, !dbg !27
  %invariant.op18 = and i1 %66, %68, !dbg !27
  %72 = and i1 %64, %invariant.op18
  %.demorgan7.reass = and i1 %72, %62
  %73 = zext nneg i32 %28 to i64, !dbg !27
  %invariant.op30 = or disjoint i64 %71, %73, !dbg !27
  br label %74, !dbg !27

74:                                               ; preds = %9, %86
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %86 ]
  %75 = phi float [ 0.000000e+00, %9 ], [ %141, %86 ]
  %76 = phi float [ 0.000000e+00, %9 ], [ %142, %86 ]
  %77 = phi float [ 0.000000e+00, %9 ], [ %143, %86 ]
  %78 = phi float [ 0.000000e+00, %9 ], [ %144, %86 ]
  %79 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %79
  %80 = sext i32 %.reass to i64, !dbg !28
  %81 = getelementptr bfloat, ptr addrspace(1) %2, i64 %80, !dbg !28
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %81, i1 %22) #6, !dbg !29
  %83 = getelementptr bfloat, ptr addrspace(1) %3, i64 %80, !dbg !30
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %83, i1 %22) #6, !dbg !31
  br i1 %.demorgan7.reass, label %86, label %85, !dbg !32

85:                                               ; preds = %74
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 43, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

86:                                               ; preds = %74
  %87 = extractvalue { i32, i32 } %84, 1, !dbg !31
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !31
  %89 = extractelement <2 x bfloat> %88, i64 1, !dbg !31
  %90 = fpext bfloat %89 to float, !dbg !33
  %91 = extractelement <2 x bfloat> %88, i64 0, !dbg !31
  %92 = fpext bfloat %91 to float, !dbg !33
  %93 = extractvalue { i32, i32 } %84, 0, !dbg !31
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !31
  %95 = extractelement <2 x bfloat> %94, i64 1, !dbg !31
  %96 = fpext bfloat %95 to float, !dbg !33
  %97 = extractelement <2 x bfloat> %94, i64 0, !dbg !31
  %98 = fpext bfloat %97 to float, !dbg !33
  %99 = extractvalue { i32, i32 } %82, 1, !dbg !29
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !29
  %101 = extractelement <2 x bfloat> %100, i64 1, !dbg !29
  %102 = fpext bfloat %101 to float, !dbg !34
  %103 = extractelement <2 x bfloat> %100, i64 0, !dbg !29
  %104 = fpext bfloat %103 to float, !dbg !34
  %105 = extractvalue { i32, i32 } %82, 0, !dbg !29
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !29
  %107 = extractelement <2 x bfloat> %106, i64 1, !dbg !29
  %108 = fpext bfloat %107 to float, !dbg !34
  %109 = extractelement <2 x bfloat> %106, i64 0, !dbg !29
  %110 = fpext bfloat %109 to float, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.reass31 = or i64 %indvars.iv, %invariant.op30
  %111 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass31, !dbg !35
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %111, i1 %22) #6, !dbg !36
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !36
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !36
  %115 = extractvalue { i32, i32 } %112, 1, !dbg !36
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !36
  %117 = extractelement <2 x bfloat> %114, i64 0, !dbg !36
  %118 = extractelement <2 x bfloat> %114, i64 1, !dbg !36
  %119 = extractelement <2 x bfloat> %116, i64 0, !dbg !36
  %120 = extractelement <2 x bfloat> %116, i64 1, !dbg !36
  %121 = fpext bfloat %117 to float, !dbg !37
  %122 = fpext bfloat %118 to float, !dbg !37
  %123 = fpext bfloat %119 to float, !dbg !37
  %124 = fpext bfloat %120 to float, !dbg !37
  %125 = fadd float %110, %121, !dbg !38
  %126 = fadd float %108, %122, !dbg !38
  %127 = fadd float %104, %123, !dbg !38
  %128 = fadd float %102, %124, !dbg !38
  %129 = fadd float %125, %98, !dbg !39
  %130 = fadd float %126, %96, !dbg !39
  %131 = fadd float %127, %92, !dbg !39
  %132 = fadd float %128, %90, !dbg !39
  %133 = fmul float %129, %129, !dbg !40
  %134 = fmul float %130, %130, !dbg !40
  %135 = fmul float %131, %131, !dbg !40
  %136 = fmul float %132, %132, !dbg !40
  %137 = fadd float %75, %133, !dbg !41
  %138 = fadd float %76, %134, !dbg !41
  %139 = fadd float %77, %135, !dbg !41
  %140 = fadd float %78, %136, !dbg !41
  %141 = select i1 %22, float %137, float %75, !dbg !42
  %142 = select i1 %22, float %138, float %76, !dbg !42
  %143 = select i1 %22, float %139, float %77, !dbg !42
  %144 = select i1 %22, float %140, float %78, !dbg !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !27
  %145 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !27
  br i1 %145, label %74, label %__nv_rsqrtf.exit, !dbg !27

__nv_rsqrtf.exit:                                 ; preds = %86
  %146 = fadd float %141, %142, !dbg !43
  %147 = fadd float %143, %146, !dbg !43
  %148 = fadd float %144, %147, !dbg !43
  %149 = bitcast float %148 to i32, !dbg !48
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !48
  %151 = bitcast i32 %150 to float, !dbg !48
  %152 = fadd float %148, %151, !dbg !43
  %153 = tail call float @llvm.nvvm.div.full(float %152, float 4.096000e+03), !dbg !49
  %154 = fadd float %153, 0x3EB0C6F7A0000000, !dbg !50
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !51
  %.not.i14 = icmp eq i32 %158, 0, !dbg !51
  br i1 %.not.i14, label %161, label %159, !dbg !51

159:                                              ; preds = %__nv_rsqrtf.exit
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !51
  br label %__nv_rsqrtf.exit16, !dbg !51

161:                                              ; preds = %__nv_rsqrtf.exit
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !51
  br label %__nv_rsqrtf.exit16, !dbg !51

__nv_rsqrtf.exit16:                               ; preds = %159, %161
  %.0.i15 = phi float [ %160, %159 ], [ %162, %161 ], !dbg !51
  %invariant.op32 = or disjoint i64 %71, %73, !dbg !52
  %163 = insertelement <2 x float> poison, float %.0.i15, i64 0, !dbg !53
  %164 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  br label %165, !dbg !52

165:                                              ; preds = %165, %__nv_rsqrtf.exit16
  %indvars.iv25 = phi i64 [ 0, %__nv_rsqrtf.exit16 ], [ %indvars.iv.next26, %165 ]
  %166 = or disjoint i64 %indvars.iv25, %73, !dbg !54
  %167 = getelementptr bfloat, ptr addrspace(1) %4, i64 %166, !dbg !55
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %167, i1 true) #6, !dbg !56
  %169 = trunc nuw nsw i64 %indvars.iv25 to i32
  %.reass20 = or i32 %invariant.op, %169
  %170 = sext i32 %.reass20 to i64, !dbg !57
  %171 = getelementptr bfloat, ptr addrspace(1) %2, i64 %170, !dbg !57
  %172 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %171, i1 %22) #6, !dbg !58
  %173 = getelementptr bfloat, ptr addrspace(1) %3, i64 %170, !dbg !59
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %173, i1 %22) #6, !dbg !60
  %175 = extractvalue { i32, i32 } %174, 1, !dbg !60
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !60
  %177 = extractvalue { i32, i32 } %174, 0, !dbg !60
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !60
  %179 = extractvalue { i32, i32 } %172, 1, !dbg !58
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !58
  %181 = extractvalue { i32, i32 } %172, 0, !dbg !58
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !58
  %183 = extractvalue { i32, i32 } %168, 1, !dbg !56
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !56
  %185 = extractvalue { i32, i32 } %168, 0, !dbg !56
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %.reass33 = or i64 %indvars.iv25, %invariant.op32
  %187 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass33, !dbg !62
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %187, i1 %22) #6, !dbg !63
  %189 = extractvalue { i32, i32 } %188, 0, !dbg !63
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !63
  %191 = extractvalue { i32, i32 } %188, 1, !dbg !63
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !63
  %193 = getelementptr bfloat, ptr addrspace(1) %5, i64 %170, !dbg !64
  %194 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !65
  %195 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !66
  %196 = fpext <2 x bfloat> %186 to <2 x float>, !dbg !67
  %197 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !68
  %198 = fadd <2 x float> %195, %197, !dbg !69
  %199 = fadd <2 x float> %198, %194, !dbg !70
  %200 = fmul <2 x float> %164, %199, !dbg !53
  %201 = fmul <2 x float> %200, %196, !dbg !71
  %202 = fptrunc <2 x float> %201 to <2 x bfloat>, !dbg !72
  %203 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !65
  %204 = fpext <2 x bfloat> %180 to <2 x float>, !dbg !66
  %205 = fpext <2 x bfloat> %184 to <2 x float>, !dbg !67
  %206 = fpext <2 x bfloat> %192 to <2 x float>, !dbg !68
  %207 = fadd <2 x float> %204, %206, !dbg !69
  %208 = fadd <2 x float> %207, %203, !dbg !70
  %209 = fmul <2 x float> %164, %208, !dbg !53
  %210 = fmul <2 x float> %209, %205, !dbg !71
  %211 = fptrunc <2 x float> %210 to <2 x bfloat>, !dbg !72
  %212 = bitcast <2 x bfloat> %202 to i32, !dbg !72
  %213 = bitcast <2 x bfloat> %211 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %193, i1 %22) #6, !dbg !72
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 8, !dbg !52
  %214 = icmp samesign ult i64 %indvars.iv25, 4088, !dbg !52
  br i1 %214, label %165, label %215, !dbg !52

215:                                              ; preds = %165
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvkaebxyomoxsqaxavllrfibzcxlvyxdu4omwa4ryyrzmjcazngj.py", directory: "/tmp/torchinductor_root/vk")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_7", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 46, scope: !10)
!20 = !DILocation(line: 41, column: 22, scope: !10)
!21 = !DILocation(line: 40, column: 22, scope: !10)
!22 = !DILocation(line: 42, column: 36, scope: !10)
!23 = !DILocation(line: 43, column: 41, scope: !10)
!24 = !DILocation(line: 43, column: 60, scope: !10)
!25 = !DILocation(line: 43, column: 58, scope: !10)
!26 = !DILocation(line: 44, column: 46, scope: !10)
!27 = !DILocation(line: 31, column: 40, scope: !10)
!28 = !DILocation(line: 37, column: 34, scope: !10)
!29 = !DILocation(line: 37, column: 51, scope: !10)
!30 = !DILocation(line: 38, column: 34, scope: !10)
!31 = !DILocation(line: 38, column: 51, scope: !10)
!32 = !DILocation(line: 43, column: 68, scope: !10)
!33 = !DILocation(line: 38, column: 112, scope: !10)
!34 = !DILocation(line: 37, column: 112, scope: !10)
!35 = !DILocation(line: 44, column: 34, scope: !10)
!36 = !DILocation(line: 44, column: 53, scope: !10)
!37 = !DILocation(line: 44, column: 114, scope: !10)
!38 = !DILocation(line: 45, column: 22, scope: !10)
!39 = !DILocation(line: 46, column: 23, scope: !10)
!40 = !DILocation(line: 48, column: 24, scope: !10)
!41 = !DILocation(line: 50, column: 25, scope: !10)
!42 = !DILocation(line: 51, column: 50, scope: !10)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !10, file: !45, discriminator: 0)
!47 = !DILocation(line: 52, column: 27, scope: !10)
!48 = !DILocation(line: 286, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 72, column: 25, scope: !10)
!50 = !DILocation(line: 74, column: 24, scope: !10)
!51 = !DILocation(line: 75, column: 32, scope: !10)
!52 = !DILocation(line: 53, column: 40, scope: !10)
!53 = !DILocation(line: 76, column: 24, scope: !10)
!54 = !DILocation(line: 54, column: 31, scope: !10)
!55 = !DILocation(line: 59, column: 35, scope: !10)
!56 = !DILocation(line: 59, column: 42, scope: !10)
!57 = !DILocation(line: 60, column: 35, scope: !10)
!58 = !DILocation(line: 60, column: 52, scope: !10)
!59 = !DILocation(line: 61, column: 35, scope: !10)
!60 = !DILocation(line: 61, column: 52, scope: !10)
!61 = !DILocation(line: 66, column: 70, scope: !10)
!62 = !DILocation(line: 67, column: 35, scope: !10)
!63 = !DILocation(line: 67, column: 55, scope: !10)
!64 = !DILocation(line: 79, column: 29, scope: !10)
!65 = !DILocation(line: 61, column: 114, scope: !10)
!66 = !DILocation(line: 60, column: 114, scope: !10)
!67 = !DILocation(line: 59, column: 95, scope: !10)
!68 = !DILocation(line: 67, column: 117, scope: !10)
!69 = !DILocation(line: 68, column: 24, scope: !10)
!70 = !DILocation(line: 69, column: 24, scope: !10)
!71 = !DILocation(line: 78, column: 24, scope: !10)
!72 = !DILocation(line: 79, column: 53, scope: !10)
!73 = !DILocation(line: 53, column: 4, scope: !10)
