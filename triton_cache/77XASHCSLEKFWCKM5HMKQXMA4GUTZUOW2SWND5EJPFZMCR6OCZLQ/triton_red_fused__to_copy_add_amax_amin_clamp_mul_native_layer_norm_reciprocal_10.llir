; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = shl i32 %18, 1, !dbg !11
  %20 = and i32 %19, 1022, !dbg !11
  %21 = sext i32 %16 to i64, !dbg !12
  %22 = getelementptr bfloat, ptr addrspace(1) %4, i64 %21, !dbg !12
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %17) #5, !dbg !13
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %17) #5, !dbg !13
  %25 = bitcast i16 %24 to bfloat, !dbg !13
  %26 = getelementptr bfloat, ptr addrspace(1) %5, i64 %21, !dbg !14
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %17) #5, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %17) #5, !dbg !15
  %29 = bitcast i16 %28 to bfloat, !dbg !15
  %30 = mul i32 %16, 3072, !dbg !16
  %.inv = fcmp oge bfloat %25, 0xR0000, !dbg !17
  %31 = select i1 %.inv, bfloat 0xR0000, bfloat %25, !dbg !17
  %32 = fpext bfloat %31 to float, !dbg !17
  %33 = fsub float 0.000000e+00, %32, !dbg !21
  %.inv3 = fcmp ole bfloat %29, 0xR0000, !dbg !22
  %34 = select i1 %.inv3, bfloat 0xR0000, bfloat %29, !dbg !22
  %35 = fpext bfloat %34 to float, !dbg !22
  %36 = fcmp ogt float %33, %35, !dbg !24
  %37 = fcmp uno float %33, 0.000000e+00, !dbg !26
  %38 = or i1 %37, %36, !dbg !27
  %39 = select i1 %38, float %33, float %35, !dbg !28
  %40 = fmul float %39, 0x3F80204080000000, !dbg !29
  %41 = fcmp ogt float %40, 0x3EE4F8B580000000, !dbg !30
  %42 = fcmp uno float %40, 0.000000e+00, !dbg !32
  %43 = or i1 %41, %42, !dbg !33
  %44 = select i1 %43, float %40, float 0x3EE4F8B580000000, !dbg !34
  %45 = zext nneg i32 %20 to i64, !dbg !35
  %46 = or disjoint i32 %20, %30, !dbg !36
  %47 = sext i32 %46 to i64, !dbg !37
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 %17) #5, !dbg !38
  %50 = or disjoint i64 %45, 6144, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !40
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %51, i1 true) #5, !dbg !41
  %53 = getelementptr bfloat, ptr addrspace(1) %2, i64 %50, !dbg !42
  %54 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 true) #5, !dbg !43
  %55 = getelementptr i32, ptr addrspace(1) %3, i64 %47, !dbg !44
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %17) #5, !dbg !45
  %57 = getelementptr bfloat, ptr addrspace(1) %6, i64 %45, !dbg !46
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %57, i1 true) #5, !dbg !47
  %59 = getelementptr bfloat, ptr addrspace(1) %7, i64 %45, !dbg !48
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %59, i1 true) #5, !dbg !49
  %61 = extractvalue { i32, i32 } %52, 1, !dbg !41
  %62 = bitcast i32 %54 to <2 x bfloat>, !dbg !43
  %63 = extractvalue { i32, i32 } %56, 1, !dbg !45
  %64 = bitcast i32 %58 to <2 x bfloat>, !dbg !47
  %65 = bitcast i32 %60 to <2 x bfloat>, !dbg !49
  %66 = bitcast i32 %49 to <2 x bfloat>, !dbg !38
  %67 = extractvalue { i32, i32 } %52, 0, !dbg !41
  %68 = extractvalue { i32, i32 } %56, 0, !dbg !45
  %69 = getelementptr bfloat, ptr addrspace(1) %8, i64 %47, !dbg !50
  %70 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !41
  %71 = insertelement <2 x i32> %70, i32 %61, i64 1, !dbg !41
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !41
  %73 = fpext <2 x bfloat> %62 to <2 x float>, !dbg !51
  %74 = fadd <2 x float> %72, %73, !dbg !52
  %75 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !53
  %76 = insertelement <2 x i32> %75, i32 %63, i64 1, !dbg !53
  %77 = sitofp <2 x i32> %76 to <2 x float>, !dbg !53
  %78 = insertelement <2 x float> poison, float %44, i64 0, !dbg !54
  %79 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %80 = fmul <2 x float> %79, %77, !dbg !54
  %81 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !55
  %82 = fmul <2 x float> %80, %81, !dbg !56
  %83 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !57
  %84 = fadd <2 x float> %82, %83, !dbg !58
  %85 = fmul <2 x float> %74, %84, !dbg !59
  %86 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !60
  %87 = fadd <2 x float> %85, %86, !dbg !61
  %88 = fptrunc <2 x float> %87 to <2 x bfloat>, !dbg !62
  %89 = bitcast <2 x bfloat> %88 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %69, i1 %17) #5, !dbg !62
  %90 = extractelement <2 x float> %87, i64 1, !dbg !63
  %91 = select i1 %17, float %90, float 0.000000e+00, !dbg !63
  %92 = extractelement <2 x float> %87, i64 0, !dbg !63
  %93 = select i1 %17, float %92, float 0.000000e+00, !dbg !63
  %94 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !64
  %95 = and i32 %18, 31, !dbg !11
  %96 = or disjoint i64 %45, 1024, !dbg !65
  %97 = trunc nuw nsw i64 %96 to i32, !dbg !36
  %98 = add i32 %30, %97, !dbg !36
  %99 = sext i32 %98 to i64, !dbg !37
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !37
  %101 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %100, i1 %17) #5, !dbg !38
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !38
  %103 = or disjoint i64 %45, 7168, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !40
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %104, i1 true) #5, !dbg !41
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !41
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !41
  %108 = getelementptr bfloat, ptr addrspace(1) %2, i64 %103, !dbg !42
  %109 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %108, i1 true) #5, !dbg !43
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !43
  %111 = getelementptr i32, ptr addrspace(1) %3, i64 %99, !dbg !44
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 %17) #5, !dbg !45
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !45
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !45
  %115 = getelementptr bfloat, ptr addrspace(1) %6, i64 %96, !dbg !46
  %116 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %115, i1 true) #5, !dbg !47
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !47
  %118 = getelementptr bfloat, ptr addrspace(1) %7, i64 %96, !dbg !48
  %119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 true) #5, !dbg !49
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !49
  %121 = fadd float %94, 1.000000e+00, !dbg !66
  %122 = fadd float %94, 1.000000e+00, !dbg !66
  %123 = getelementptr bfloat, ptr addrspace(1) %8, i64 %99, !dbg !50
  %124 = fpext <2 x bfloat> %102 to <2 x float>, !dbg !60
  %125 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !41
  %126 = insertelement <2 x i32> %125, i32 %107, i64 1, !dbg !41
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !41
  %128 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !51
  %129 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !55
  %130 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !57
  %131 = fadd <2 x float> %127, %128, !dbg !52
  %132 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !53
  %133 = insertelement <2 x i32> %132, i32 %114, i64 1, !dbg !53
  %134 = sitofp <2 x i32> %133 to <2 x float>, !dbg !53
  %135 = fmul <2 x float> %79, %134, !dbg !54
  %136 = fmul <2 x float> %135, %129, !dbg !56
  %137 = fadd <2 x float> %136, %130, !dbg !58
  %138 = fmul <2 x float> %131, %137, !dbg !59
  %139 = fadd <2 x float> %138, %124, !dbg !61
  %140 = extractelement <2 x float> %139, i64 0, !dbg !68
  %141 = fsub float %140, %93, !dbg !69
  %142 = tail call float @llvm.nvvm.div.full(float %141, float %121), !dbg !70
  %143 = fadd float %93, %142, !dbg !71
  %144 = fsub float %140, %143, !dbg !68
  %145 = fmul float %141, %144, !dbg !72
  %146 = fadd float %145, 0.000000e+00, !dbg !73
  %147 = extractelement <2 x float> %139, i64 1, !dbg !68
  %148 = fsub float %147, %91, !dbg !69
  %149 = tail call float @llvm.nvvm.div.full(float %148, float %122), !dbg !70
  %150 = fadd float %91, %149, !dbg !71
  %151 = fsub float %147, %150, !dbg !68
  %152 = fmul float %148, %151, !dbg !72
  %153 = fadd float %152, 0.000000e+00, !dbg !73
  %154 = select i1 %17, float %143, float 0.000000e+00, !dbg !63
  %155 = select i1 %17, float %150, float 0.000000e+00, !dbg !63
  %156 = fptrunc <2 x float> %139 to <2 x bfloat>, !dbg !62
  %157 = bitcast <2 x bfloat> %156 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %123, i1 %17) #5, !dbg !62
  %158 = or disjoint i64 %45, 2048, !dbg !65
  %159 = trunc nuw nsw i64 %158 to i32, !dbg !36
  %160 = add i32 %30, %159, !dbg !36
  %161 = sext i32 %160 to i64, !dbg !37
  %162 = getelementptr bfloat, ptr addrspace(1) %0, i64 %161, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %162, i1 %17) #5, !dbg !38
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !38
  %165 = or disjoint i64 %45, 8192, !dbg !39
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !40
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %166, i1 true) #5, !dbg !41
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !41
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !41
  %170 = getelementptr bfloat, ptr addrspace(1) %2, i64 %165, !dbg !42
  %171 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %170, i1 true) #5, !dbg !43
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !43
  %173 = getelementptr i32, ptr addrspace(1) %3, i64 %161, !dbg !44
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %173, i1 %17) #5, !dbg !45
  %175 = extractvalue { i32, i32 } %174, 0, !dbg !45
  %176 = extractvalue { i32, i32 } %174, 1, !dbg !45
  %177 = getelementptr bfloat, ptr addrspace(1) %6, i64 %158, !dbg !46
  %178 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %177, i1 true) #5, !dbg !47
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !47
  %180 = getelementptr bfloat, ptr addrspace(1) %7, i64 %158, !dbg !48
  %181 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %180, i1 true) #5, !dbg !49
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !49
  %183 = fadd float %121, 1.000000e+00, !dbg !66
  %184 = select i1 %17, float %183, float 1.000000e+00, !dbg !64
  %185 = fadd float %122, 1.000000e+00, !dbg !66
  %186 = select i1 %17, float %185, float 1.000000e+00, !dbg !64
  %187 = select i1 %17, float %183, float 0.000000e+00, !dbg !64
  %188 = select i1 %17, float %185, float 0.000000e+00, !dbg !64
  %189 = getelementptr bfloat, ptr addrspace(1) %8, i64 %161, !dbg !50
  %190 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !60
  %191 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !41
  %192 = insertelement <2 x i32> %191, i32 %169, i64 1, !dbg !41
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !41
  %194 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !51
  %195 = fpext <2 x bfloat> %179 to <2 x float>, !dbg !55
  %196 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !57
  %197 = fadd <2 x float> %193, %194, !dbg !52
  %198 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !53
  %199 = insertelement <2 x i32> %198, i32 %176, i64 1, !dbg !53
  %200 = sitofp <2 x i32> %199 to <2 x float>, !dbg !53
  %201 = fmul <2 x float> %79, %200, !dbg !54
  %202 = fmul <2 x float> %201, %195, !dbg !56
  %203 = fadd <2 x float> %202, %196, !dbg !58
  %204 = fmul <2 x float> %197, %203, !dbg !59
  %205 = fadd <2 x float> %204, %190, !dbg !61
  %206 = extractelement <2 x float> %205, i64 0, !dbg !68
  %207 = fsub float %206, %154, !dbg !69
  %208 = tail call float @llvm.nvvm.div.full(float %207, float %184), !dbg !70
  %209 = fadd float %154, %208, !dbg !71
  %210 = fsub float %206, %209, !dbg !68
  %211 = fmul float %207, %210, !dbg !72
  %212 = fadd float %146, %211, !dbg !73
  %213 = extractelement <2 x float> %205, i64 1, !dbg !68
  %214 = fsub float %213, %155, !dbg !69
  %215 = tail call float @llvm.nvvm.div.full(float %214, float %186), !dbg !70
  %216 = fadd float %155, %215, !dbg !71
  %217 = fsub float %213, %216, !dbg !68
  %218 = fmul float %214, %217, !dbg !72
  %219 = fadd float %153, %218, !dbg !73
  %220 = select i1 %17, float %209, float 0.000000e+00, !dbg !63
  %221 = select i1 %17, float %216, float 0.000000e+00, !dbg !63
  %222 = fptrunc <2 x float> %205 to <2 x bfloat>, !dbg !62
  %223 = bitcast <2 x bfloat> %222 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %189, i1 %17) #5, !dbg !62
  %224 = lshr i32 %18, 5, !dbg !11
  %225 = fsub float %221, %220, !dbg !74
  %226 = fadd float %187, %188, !dbg !77
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !78
  %228 = tail call float @llvm.nvvm.div.full(float %188, float %226), !dbg !79
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !80
  %230 = fmul float %225, %229, !dbg !81
  %231 = fadd float %220, %230, !dbg !82
  %232 = fadd float %212, %219, !dbg !83
  %233 = select i1 %17, float %232, float 0.000000e+00, !dbg !83
  %234 = fmul float %225, %225, !dbg !84
  %235 = fmul float %234, %187, !dbg !85
  %236 = fmul float %235, %229, !dbg !86
  %237 = fadd float %233, %236, !dbg !87
  %238 = bitcast float %231 to i32, !dbg !88
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 16, i32 31), !dbg !88
  %240 = bitcast i32 %239 to float, !dbg !88
  %241 = bitcast float %237 to i32, !dbg !88
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 16, i32 31), !dbg !88
  %243 = bitcast i32 %242 to float, !dbg !88
  %244 = bitcast float %226 to i32, !dbg !88
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 16, i32 31), !dbg !88
  %246 = bitcast i32 %245 to float, !dbg !88
  %247 = fsub float %240, %231, !dbg !74
  %248 = fadd float %226, %246, !dbg !77
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !78
  %250 = tail call float @llvm.nvvm.div.full(float %246, float %248), !dbg !79
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !80
  %252 = fmul float %247, %251, !dbg !81
  %253 = fadd float %231, %252, !dbg !82
  %254 = fadd float %237, %243, !dbg !83
  %255 = fmul float %247, %247, !dbg !84
  %256 = fmul float %226, %255, !dbg !85
  %257 = fmul float %256, %251, !dbg !86
  %258 = fadd float %254, %257, !dbg !87
  %259 = bitcast float %253 to i32, !dbg !88
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !88
  %261 = bitcast i32 %260 to float, !dbg !88
  %262 = bitcast float %258 to i32, !dbg !88
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !88
  %264 = bitcast i32 %263 to float, !dbg !88
  %265 = bitcast float %248 to i32, !dbg !88
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !88
  %267 = bitcast i32 %266 to float, !dbg !88
  %268 = fsub float %261, %253, !dbg !74
  %269 = fadd float %248, %267, !dbg !77
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !78
  %271 = tail call float @llvm.nvvm.div.full(float %267, float %269), !dbg !79
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !80
  %273 = fmul float %268, %272, !dbg !81
  %274 = fadd float %253, %273, !dbg !82
  %275 = fadd float %258, %264, !dbg !83
  %276 = fmul float %268, %268, !dbg !84
  %277 = fmul float %248, %276, !dbg !85
  %278 = fmul float %272, %277, !dbg !86
  %279 = fadd float %275, %278, !dbg !87
  %280 = bitcast float %274 to i32, !dbg !88
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !88
  %282 = bitcast i32 %281 to float, !dbg !88
  %283 = bitcast float %279 to i32, !dbg !88
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !88
  %285 = bitcast i32 %284 to float, !dbg !88
  %286 = bitcast float %269 to i32, !dbg !88
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !88
  %288 = bitcast i32 %287 to float, !dbg !88
  %289 = fsub float %282, %274, !dbg !74
  %290 = fadd float %269, %288, !dbg !77
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !78
  %292 = tail call float @llvm.nvvm.div.full(float %288, float %290), !dbg !79
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !80
  %294 = fmul float %289, %293, !dbg !81
  %295 = fadd float %274, %294, !dbg !82
  %296 = fadd float %279, %285, !dbg !83
  %297 = fmul float %289, %289, !dbg !84
  %298 = fmul float %269, %297, !dbg !85
  %299 = fmul float %293, %298, !dbg !86
  %300 = fadd float %296, %299, !dbg !87
  %301 = bitcast float %295 to i32, !dbg !88
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !88
  %303 = bitcast i32 %302 to float, !dbg !88
  %304 = bitcast float %300 to i32, !dbg !88
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !88
  %306 = bitcast i32 %305 to float, !dbg !88
  %307 = bitcast float %290 to i32, !dbg !88
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !88
  %309 = bitcast i32 %308 to float, !dbg !88
  %310 = fsub float %303, %295, !dbg !74
  %311 = fadd float %290, %309, !dbg !77
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !78
  %313 = tail call float @llvm.nvvm.div.full(float %309, float %311), !dbg !79
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !80
  %315 = fmul float %310, %314, !dbg !81
  %316 = fadd float %295, %315, !dbg !82
  %317 = fadd float %300, %306, !dbg !83
  %318 = fmul float %310, %310, !dbg !84
  %319 = fmul float %290, %318, !dbg !85
  %320 = fmul float %314, %319, !dbg !86
  %321 = fadd float %317, %320, !dbg !87
  %322 = bitcast float %316 to i32, !dbg !88
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !88
  %324 = bitcast i32 %323 to float, !dbg !88
  %325 = bitcast float %321 to i32, !dbg !88
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !88
  %327 = bitcast i32 %326 to float, !dbg !88
  %328 = bitcast float %311 to i32, !dbg !88
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !88
  %330 = bitcast i32 %329 to float, !dbg !88
  %331 = fsub float %324, %316, !dbg !74
  %332 = fadd float %311, %330, !dbg !77
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !78
  %334 = tail call float @llvm.nvvm.div.full(float %330, float %332), !dbg !79
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !80
  %336 = fmul float %331, %335, !dbg !81
  %337 = fadd float %316, %336, !dbg !82
  %338 = fadd float %321, %327, !dbg !83
  %339 = fmul float %331, %331, !dbg !84
  %340 = fmul float %311, %339, !dbg !85
  %341 = fmul float %335, %340, !dbg !86
  %342 = fadd float %338, %341, !dbg !87
  %343 = and i32 %224, 15, !dbg !88
  %344 = icmp eq i32 %95, 0, !dbg !88
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !88
  %346 = bitcast float %337 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 %344) #5, !dbg !88
  %347 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %343, !dbg !88
  %348 = bitcast float %342 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 %344) #5, !dbg !88
  %349 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %343, !dbg !88
  %350 = bitcast float %332 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 %344) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %351 = icmp slt i32 %18, 16, !dbg !88
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !88
  %353 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %351) #5, !dbg !88
  %354 = bitcast i32 %353 to float, !dbg !88
  %355 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !88
  %356 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %355, i1 %351) #5, !dbg !88
  %357 = bitcast i32 %356 to float, !dbg !88
  %358 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !88
  %359 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %358, i1 %351) #5, !dbg !88
  %360 = bitcast i32 %359 to float, !dbg !88
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 8, i32 31), !dbg !88
  %362 = bitcast i32 %361 to float, !dbg !88
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 8, i32 31), !dbg !88
  %364 = bitcast i32 %363 to float, !dbg !88
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 8, i32 31), !dbg !88
  %366 = bitcast i32 %365 to float, !dbg !88
  %367 = fsub float %362, %354, !dbg !74
  %368 = fadd float %360, %366, !dbg !77
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !78
  %370 = tail call float @llvm.nvvm.div.full(float %366, float %368), !dbg !79
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !80
  %372 = fmul float %367, %371, !dbg !81
  %373 = fadd float %372, %354, !dbg !82
  %374 = fadd float %357, %364, !dbg !83
  %375 = fmul float %367, %367, !dbg !84
  %376 = fmul float %375, %360, !dbg !85
  %377 = fmul float %376, %371, !dbg !86
  %378 = fadd float %374, %377, !dbg !87
  %379 = bitcast float %373 to i32, !dbg !88
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 4, i32 31), !dbg !88
  %381 = bitcast i32 %380 to float, !dbg !88
  %382 = bitcast float %378 to i32, !dbg !88
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 4, i32 31), !dbg !88
  %384 = bitcast i32 %383 to float, !dbg !88
  %385 = bitcast float %368 to i32, !dbg !88
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 4, i32 31), !dbg !88
  %387 = bitcast i32 %386 to float, !dbg !88
  %388 = fsub float %381, %373, !dbg !74
  %389 = fadd float %368, %387, !dbg !77
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !78
  %391 = tail call float @llvm.nvvm.div.full(float %387, float %389), !dbg !79
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !80
  %393 = fmul float %388, %392, !dbg !81
  %394 = fadd float %373, %393, !dbg !82
  %395 = fadd float %378, %384, !dbg !83
  %396 = fmul float %388, %388, !dbg !84
  %397 = fmul float %368, %396, !dbg !85
  %398 = fmul float %392, %397, !dbg !86
  %399 = fadd float %395, %398, !dbg !87
  %400 = bitcast float %394 to i32, !dbg !88
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 2, i32 31), !dbg !88
  %402 = bitcast i32 %401 to float, !dbg !88
  %403 = bitcast float %399 to i32, !dbg !88
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 2, i32 31), !dbg !88
  %405 = bitcast i32 %404 to float, !dbg !88
  %406 = bitcast float %389 to i32, !dbg !88
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !88
  %408 = bitcast i32 %407 to float, !dbg !88
  %409 = fsub float %402, %394, !dbg !74
  %410 = fadd float %389, %408, !dbg !77
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !78
  %412 = tail call float @llvm.nvvm.div.full(float %408, float %410), !dbg !79
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !80
  %414 = fmul float %409, %413, !dbg !81
  %415 = fadd float %394, %414, !dbg !82
  %416 = fadd float %399, %405, !dbg !83
  %417 = fmul float %409, %409, !dbg !84
  %418 = fmul float %389, %417, !dbg !85
  %419 = fmul float %413, %418, !dbg !86
  %420 = fadd float %416, %419, !dbg !87
  %421 = bitcast float %415 to i32, !dbg !88
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 1, i32 31), !dbg !88
  %423 = bitcast i32 %422 to float, !dbg !88
  %424 = bitcast float %420 to i32, !dbg !88
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 1, i32 31), !dbg !88
  %426 = bitcast i32 %425 to float, !dbg !88
  %427 = bitcast float %410 to i32, !dbg !88
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 1, i32 31), !dbg !88
  %429 = bitcast i32 %428 to float, !dbg !88
  %430 = fsub float %423, %415, !dbg !74
  %431 = fadd float %410, %429, !dbg !77
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !78
  %433 = tail call float @llvm.nvvm.div.full(float %429, float %431), !dbg !79
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !80
  %435 = fmul float %430, %434, !dbg !81
  %436 = fadd float %415, %435, !dbg !82
  %437 = fadd float %420, %426, !dbg !83
  %438 = fmul float %430, %430, !dbg !84
  %439 = fmul float %410, %438, !dbg !85
  %440 = fmul float %434, %439, !dbg !86
  %441 = fadd float %437, %440, !dbg !87
  %442 = and i32 %18, 15, !dbg !88
  %443 = icmp eq i32 %442, 0, !dbg !88
  %444 = and i1 %351, %443, !dbg !88
  %445 = bitcast float %436 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %445, i1 %444) #5, !dbg !88
  %446 = bitcast float %441 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %446, i1 %444) #5, !dbg !88
  %447 = bitcast float %431 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %447, i1 %444) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %448 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %449 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !88
  %450 = tail call float @llvm.nvvm.div.full(float %449, float 3.072000e+03), !dbg !89
  %451 = fadd float %450, 0x3EB0C6F7A0000000, !dbg !90
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i9 = icmp eq i32 %453, 0, !dbg !91
  br i1 %.not.i9, label %456, label %454, !dbg !91

454:                                              ; preds = %.peel.next
  %455 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %451), !dbg !91
  br label %__nv_rsqrtf.exit11, !dbg !91

456:                                              ; preds = %.peel.next
  %457 = tail call float @llvm.nvvm.rsqrt.approx.f(float %451), !dbg !91
  br label %__nv_rsqrtf.exit11, !dbg !91

__nv_rsqrtf.exit11:                               ; preds = %456, %454
  %.0.i10 = phi float [ %455, %454 ], [ %457, %456 ], !dbg !91
  %458 = insertelement <2 x float> poison, float %448, i64 0, !dbg !92
  %459 = shufflevector <2 x float> %458, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %460 = insertelement <2 x float> poison, float %.0.i10, i64 0, !dbg !93
  %461 = shufflevector <2 x float> %460, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !93
  %462 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !94
  %463 = shufflevector <2 x i1> %462, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !94
  %464 = or disjoint i32 %30, %20, !dbg !95
  %465 = sext i32 %464 to i64, !dbg !96
  %466 = getelementptr bfloat, ptr addrspace(1) %8, i64 %465, !dbg !96
  %467 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %466, i1 %17) #5, !dbg !97
  %468 = bitcast i32 %467 to <2 x bfloat>, !dbg !97
  %469 = or disjoint i64 %45, 12288, !dbg !98
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %469, !dbg !99
  %471 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %470, i1 true) #5, !dbg !100
  %472 = extractvalue { i32, i32 } %471, 0, !dbg !100
  %473 = extractvalue { i32, i32 } %471, 1, !dbg !100
  %474 = getelementptr bfloat, ptr addrspace(1) %2, i64 %469, !dbg !101
  %475 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %474, i1 true) #5, !dbg !102
  %476 = bitcast i32 %475 to <2 x bfloat>, !dbg !102
  %477 = or disjoint i64 %45, 9216, !dbg !103
  %478 = getelementptr float, ptr addrspace(1) %1, i64 %477, !dbg !104
  %479 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %478, i1 true) #5, !dbg !105
  %480 = extractvalue { i32, i32 } %479, 0, !dbg !105
  %481 = extractvalue { i32, i32 } %479, 1, !dbg !105
  %482 = getelementptr bfloat, ptr addrspace(1) %2, i64 %477, !dbg !106
  %483 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %482, i1 true) #5, !dbg !107
  %484 = bitcast i32 %483 to <2 x bfloat>, !dbg !107
  %485 = fpext <2 x bfloat> %468 to <2 x float>, !dbg !108
  %486 = insertelement <2 x i32> poison, i32 %472, i64 0, !dbg !100
  %487 = insertelement <2 x i32> %486, i32 %473, i64 1, !dbg !100
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !100
  %489 = fpext <2 x bfloat> %476 to <2 x float>, !dbg !109
  %490 = insertelement <2 x i32> poison, i32 %480, i64 0, !dbg !105
  %491 = insertelement <2 x i32> %490, i32 %481, i64 1, !dbg !105
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !105
  %493 = fpext <2 x bfloat> %484 to <2 x float>, !dbg !110
  %494 = fsub <2 x float> %485, %459, !dbg !92
  %495 = fmul <2 x float> %461, %494, !dbg !93
  %496 = fadd <2 x float> %488, %489, !dbg !111
  %497 = fadd <2 x float> %496, splat (float 1.000000e+00), !dbg !112
  %498 = fmul <2 x float> %495, %497, !dbg !113
  %499 = fadd <2 x float> %492, %493, !dbg !114
  %500 = fadd <2 x float> %498, %499, !dbg !115
  %501 = select <2 x i1> %463, <2 x float> %500, <2 x float> splat (float 0x7FF0000000000000), !dbg !94
  %502 = extractelement <2 x float> %500, i64 0, !dbg !116
  %503 = extractelement <2 x float> %500, i64 1, !dbg !116
  %504 = select i1 %17, float %502, float 0xFFF0000000000000, !dbg !117
  %505 = select i1 %17, float %503, float 0xFFF0000000000000, !dbg !117
  %506 = getelementptr bfloat, ptr addrspace(1) %9, i64 %465, !dbg !118
  %507 = fptrunc float %502 to bfloat, !dbg !116
  %508 = fptrunc float %503 to bfloat, !dbg !116
  %509 = insertelement <2 x bfloat> poison, bfloat %507, i64 0, !dbg !116
  %510 = insertelement <2 x bfloat> %509, bfloat %508, i64 1, !dbg !116
  %511 = bitcast <2 x bfloat> %510 to i32, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %511, ptr addrspace(1) %506, i1 %17) #5, !dbg !116
  %512 = or disjoint i32 %20, 1024, !dbg !119
  %513 = add i32 %30, %512, !dbg !95
  %514 = sext i32 %513 to i64, !dbg !96
  %515 = getelementptr bfloat, ptr addrspace(1) %8, i64 %514, !dbg !96
  %516 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %515, i1 %17) #5, !dbg !97
  %517 = bitcast i32 %516 to <2 x bfloat>, !dbg !97
  %518 = or disjoint i64 %45, 13312, !dbg !98
  %519 = getelementptr float, ptr addrspace(1) %1, i64 %518, !dbg !99
  %520 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %519, i1 true) #5, !dbg !100
  %521 = extractvalue { i32, i32 } %520, 0, !dbg !100
  %522 = extractvalue { i32, i32 } %520, 1, !dbg !100
  %523 = getelementptr bfloat, ptr addrspace(1) %2, i64 %518, !dbg !101
  %524 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %523, i1 true) #5, !dbg !102
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !102
  %526 = or disjoint i64 %45, 10240, !dbg !103
  %527 = getelementptr float, ptr addrspace(1) %1, i64 %526, !dbg !104
  %528 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %527, i1 true) #5, !dbg !105
  %529 = extractvalue { i32, i32 } %528, 0, !dbg !105
  %530 = extractvalue { i32, i32 } %528, 1, !dbg !105
  %531 = getelementptr bfloat, ptr addrspace(1) %2, i64 %526, !dbg !106
  %532 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %531, i1 true) #5, !dbg !107
  %533 = bitcast i32 %532 to <2 x bfloat>, !dbg !107
  %534 = fcmp uno <2 x float> %501, zeroinitializer, !dbg !120
  %535 = fpext <2 x bfloat> %517 to <2 x float>, !dbg !108
  %536 = insertelement <2 x i32> poison, i32 %521, i64 0, !dbg !100
  %537 = insertelement <2 x i32> %536, i32 %522, i64 1, !dbg !100
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !100
  %539 = fpext <2 x bfloat> %525 to <2 x float>, !dbg !109
  %540 = insertelement <2 x i32> poison, i32 %529, i64 0, !dbg !105
  %541 = insertelement <2 x i32> %540, i32 %530, i64 1, !dbg !105
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !105
  %543 = fpext <2 x bfloat> %533 to <2 x float>, !dbg !110
  %544 = fsub <2 x float> %535, %459, !dbg !92
  %545 = fmul <2 x float> %461, %544, !dbg !93
  %546 = fadd <2 x float> %538, %539, !dbg !111
  %547 = fadd <2 x float> %546, splat (float 1.000000e+00), !dbg !112
  %548 = fmul <2 x float> %545, %547, !dbg !113
  %549 = fadd <2 x float> %542, %543, !dbg !114
  %550 = fadd <2 x float> %548, %549, !dbg !115
  %551 = fcmp olt <2 x float> %501, %550, !dbg !122
  %552 = or <2 x i1> %534, %551, !dbg !123
  %553 = select <2 x i1> %552, <2 x float> %501, <2 x float> %550, !dbg !124
  %554 = select <2 x i1> %463, <2 x float> %553, <2 x float> splat (float 0x7FF0000000000000), !dbg !94
  %555 = extractelement <2 x float> %550, i64 0, !dbg !116
  %556 = fcmp ogt float %504, %555, !dbg !125
  %557 = extractelement <2 x float> %550, i64 1, !dbg !116
  %558 = fcmp ogt float %505, %557, !dbg !125
  %559 = fcmp uno float %504, 0.000000e+00, !dbg !127
  %560 = fcmp uno float %505, 0.000000e+00, !dbg !127
  %561 = or i1 %559, %556, !dbg !128
  %562 = or i1 %560, %558, !dbg !128
  %563 = select i1 %561, float %504, float %555, !dbg !129
  %564 = select i1 %562, float %505, float %557, !dbg !129
  %565 = select i1 %17, float %563, float 0xFFF0000000000000, !dbg !117
  %566 = select i1 %17, float %564, float 0xFFF0000000000000, !dbg !117
  %567 = getelementptr bfloat, ptr addrspace(1) %9, i64 %514, !dbg !118
  %568 = fptrunc float %555 to bfloat, !dbg !116
  %569 = fptrunc float %557 to bfloat, !dbg !116
  %570 = insertelement <2 x bfloat> poison, bfloat %568, i64 0, !dbg !116
  %571 = insertelement <2 x bfloat> %570, bfloat %569, i64 1, !dbg !116
  %572 = bitcast <2 x bfloat> %571 to i32, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %572, ptr addrspace(1) %567, i1 %17) #5, !dbg !116
  %573 = or disjoint i32 %20, 2048, !dbg !119
  %574 = add i32 %30, %573, !dbg !95
  %575 = sext i32 %574 to i64, !dbg !96
  %576 = getelementptr bfloat, ptr addrspace(1) %8, i64 %575, !dbg !96
  %577 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %576, i1 %17) #5, !dbg !97
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !97
  %579 = or disjoint i64 %45, 14336, !dbg !98
  %580 = getelementptr float, ptr addrspace(1) %1, i64 %579, !dbg !99
  %581 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %580, i1 true) #5, !dbg !100
  %582 = extractvalue { i32, i32 } %581, 0, !dbg !100
  %583 = extractvalue { i32, i32 } %581, 1, !dbg !100
  %584 = getelementptr bfloat, ptr addrspace(1) %2, i64 %579, !dbg !101
  %585 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %584, i1 true) #5, !dbg !102
  %586 = bitcast i32 %585 to <2 x bfloat>, !dbg !102
  %587 = or disjoint i64 %45, 11264, !dbg !103
  %588 = getelementptr float, ptr addrspace(1) %1, i64 %587, !dbg !104
  %589 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %588, i1 true) #5, !dbg !105
  %590 = extractvalue { i32, i32 } %589, 0, !dbg !105
  %591 = extractvalue { i32, i32 } %589, 1, !dbg !105
  %592 = getelementptr bfloat, ptr addrspace(1) %2, i64 %587, !dbg !106
  %593 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %592, i1 true) #5, !dbg !107
  %594 = bitcast i32 %593 to <2 x bfloat>, !dbg !107
  %595 = fcmp uno <2 x float> %554, zeroinitializer, !dbg !120
  %596 = fpext <2 x bfloat> %578 to <2 x float>, !dbg !108
  %597 = insertelement <2 x i32> poison, i32 %582, i64 0, !dbg !100
  %598 = insertelement <2 x i32> %597, i32 %583, i64 1, !dbg !100
  %599 = bitcast <2 x i32> %598 to <2 x float>, !dbg !100
  %600 = fpext <2 x bfloat> %586 to <2 x float>, !dbg !109
  %601 = insertelement <2 x i32> poison, i32 %590, i64 0, !dbg !105
  %602 = insertelement <2 x i32> %601, i32 %591, i64 1, !dbg !105
  %603 = bitcast <2 x i32> %602 to <2 x float>, !dbg !105
  %604 = fpext <2 x bfloat> %594 to <2 x float>, !dbg !110
  %605 = fsub <2 x float> %596, %459, !dbg !92
  %606 = fmul <2 x float> %461, %605, !dbg !93
  %607 = fadd <2 x float> %599, %600, !dbg !111
  %608 = fadd <2 x float> %607, splat (float 1.000000e+00), !dbg !112
  %609 = fmul <2 x float> %606, %608, !dbg !113
  %610 = fadd <2 x float> %603, %604, !dbg !114
  %611 = fadd <2 x float> %609, %610, !dbg !115
  %612 = fcmp olt <2 x float> %554, %611, !dbg !122
  %613 = or <2 x i1> %595, %612, !dbg !123
  %614 = select <2 x i1> %613, <2 x float> %554, <2 x float> %611, !dbg !124
  %615 = select <2 x i1> %463, <2 x float> %614, <2 x float> splat (float 0x7FF0000000000000), !dbg !94
  %616 = extractelement <2 x float> %611, i64 0, !dbg !116
  %617 = fcmp ogt float %565, %616, !dbg !125
  %618 = extractelement <2 x float> %611, i64 1, !dbg !116
  %619 = fcmp ogt float %566, %618, !dbg !125
  %620 = fcmp uno float %565, 0.000000e+00, !dbg !127
  %621 = fcmp uno float %566, 0.000000e+00, !dbg !127
  %622 = or i1 %620, %617, !dbg !128
  %623 = or i1 %621, %619, !dbg !128
  %624 = select i1 %622, float %565, float %616, !dbg !129
  %625 = select i1 %623, float %566, float %618, !dbg !129
  %626 = select i1 %17, float %624, float 0xFFF0000000000000, !dbg !117
  %627 = select i1 %17, float %625, float 0xFFF0000000000000, !dbg !117
  %628 = getelementptr bfloat, ptr addrspace(1) %9, i64 %575, !dbg !118
  %629 = fptrunc float %616 to bfloat, !dbg !116
  %630 = fptrunc float %618 to bfloat, !dbg !116
  %631 = insertelement <2 x bfloat> poison, bfloat %629, i64 0, !dbg !116
  %632 = insertelement <2 x bfloat> %631, bfloat %630, i64 1, !dbg !116
  %633 = bitcast <2 x bfloat> %632 to i32, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %633, ptr addrspace(1) %628, i1 %17) #5, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %634 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %615, <2 x i32> <i32 0, i32 2>, !dbg !132
  %635 = fcmp olt <2 x float> %634, %615, !dbg !132
  %636 = fcmp uno <2 x float> %634, %615, !dbg !132
  %shift = shufflevector <2 x i1> %635, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !133
  %637 = or <2 x i1> %shift, %636, !dbg !133
  %638 = extractelement <2 x i1> %637, i64 0, !dbg !133
  %639 = extractelement <2 x float> %615, i64 0, !dbg !134
  %640 = extractelement <2 x float> %615, i64 1, !dbg !134
  %641 = select i1 %638, float %639, float %640, !dbg !134
  %642 = bitcast float %641 to i32, !dbg !130
  %643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 16, i32 31), !dbg !130
  %644 = bitcast i32 %643 to float, !dbg !130
  %645 = fcmp olt float %641, %644, !dbg !132
  %646 = fcmp uno float %641, 0.000000e+00, !dbg !135
  %647 = or i1 %646, %645, !dbg !133
  %648 = select i1 %647, float %641, float %644, !dbg !134
  %649 = bitcast float %648 to i32, !dbg !130
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 8, i32 31), !dbg !130
  %651 = bitcast i32 %650 to float, !dbg !130
  %652 = fcmp olt float %648, %651, !dbg !132
  %653 = fcmp uno float %648, 0.000000e+00, !dbg !135
  %654 = or i1 %652, %653, !dbg !133
  %655 = select i1 %654, float %648, float %651, !dbg !134
  %656 = bitcast float %655 to i32, !dbg !130
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 4, i32 31), !dbg !130
  %658 = bitcast i32 %657 to float, !dbg !130
  %659 = fcmp olt float %655, %658, !dbg !132
  %660 = fcmp uno float %655, 0.000000e+00, !dbg !135
  %661 = or i1 %659, %660, !dbg !133
  %662 = select i1 %661, float %655, float %658, !dbg !134
  %663 = bitcast float %662 to i32, !dbg !130
  %664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %663, i32 2, i32 31), !dbg !130
  %665 = bitcast i32 %664 to float, !dbg !130
  %666 = fcmp olt float %662, %665, !dbg !132
  %667 = fcmp uno float %662, 0.000000e+00, !dbg !135
  %668 = or i1 %666, %667, !dbg !133
  %669 = select i1 %668, float %662, float %665, !dbg !134
  %670 = bitcast float %669 to i32, !dbg !130
  %671 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %670, i32 1, i32 31), !dbg !130
  %672 = bitcast i32 %671 to float, !dbg !130
  %673 = fcmp olt float %669, %672, !dbg !132
  %674 = fcmp uno float %669, 0.000000e+00, !dbg !135
  %675 = or i1 %673, %674, !dbg !133
  %676 = select i1 %675, i32 %670, i32 %671, !dbg !134
  %677 = insertelement <1 x i32> poison, i32 %676, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %677, i1 %344) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %678 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %351) #5, !dbg !130
  %679 = bitcast i32 %678 to float, !dbg !130
  %680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 8, i32 31), !dbg !130
  %681 = bitcast i32 %680 to float, !dbg !130
  %682 = fcmp olt float %679, %681, !dbg !132
  %683 = fcmp uno float %679, 0.000000e+00, !dbg !135
  %684 = or i1 %683, %682, !dbg !133
  %685 = select i1 %684, float %679, float %681, !dbg !134
  %686 = bitcast float %685 to i32, !dbg !130
  %687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %686, i32 4, i32 31), !dbg !130
  %688 = bitcast i32 %687 to float, !dbg !130
  %689 = fcmp olt float %685, %688, !dbg !132
  %690 = fcmp uno float %685, 0.000000e+00, !dbg !135
  %691 = or i1 %689, %690, !dbg !133
  %692 = select i1 %691, float %685, float %688, !dbg !134
  %693 = bitcast float %692 to i32, !dbg !130
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %693, i32 2, i32 31), !dbg !130
  %695 = bitcast i32 %694 to float, !dbg !130
  %696 = fcmp olt float %692, %695, !dbg !132
  %697 = fcmp uno float %692, 0.000000e+00, !dbg !135
  %698 = or i1 %696, %697, !dbg !133
  %699 = select i1 %698, float %692, float %695, !dbg !134
  %700 = bitcast float %699 to i32, !dbg !130
  %701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %700, i32 1, i32 31), !dbg !130
  %702 = bitcast i32 %701 to float, !dbg !130
  %703 = fcmp olt float %699, %702, !dbg !132
  %704 = fcmp uno float %699, 0.000000e+00, !dbg !135
  %705 = or i1 %703, %704, !dbg !133
  %706 = select i1 %705, i32 %700, i32 %701, !dbg !134
  %707 = insertelement <1 x i32> poison, i32 %706, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %707, i1 %444) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %708 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %709 = fcmp ogt float %626, %627, !dbg !138
  %710 = fcmp uno float %626, 0.000000e+00, !dbg !139
  %711 = or i1 %709, %710, !dbg !140
  %712 = select i1 %711, float %626, float %627, !dbg !141
  %713 = bitcast float %712 to i32, !dbg !136
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 16, i32 31), !dbg !136
  %715 = bitcast i32 %714 to float, !dbg !136
  %716 = fcmp ogt float %712, %715, !dbg !138
  %717 = fcmp uno float %712, 0.000000e+00, !dbg !139
  %718 = or i1 %717, %716, !dbg !140
  %719 = select i1 %718, float %712, float %715, !dbg !141
  %720 = bitcast float %719 to i32, !dbg !136
  %721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %720, i32 8, i32 31), !dbg !136
  %722 = bitcast i32 %721 to float, !dbg !136
  %723 = fcmp ogt float %719, %722, !dbg !138
  %724 = fcmp uno float %719, 0.000000e+00, !dbg !139
  %725 = or i1 %723, %724, !dbg !140
  %726 = select i1 %725, float %719, float %722, !dbg !141
  %727 = bitcast float %726 to i32, !dbg !136
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %727, i32 4, i32 31), !dbg !136
  %729 = bitcast i32 %728 to float, !dbg !136
  %730 = fcmp ogt float %726, %729, !dbg !138
  %731 = fcmp uno float %726, 0.000000e+00, !dbg !139
  %732 = or i1 %730, %731, !dbg !140
  %733 = select i1 %732, float %726, float %729, !dbg !141
  %734 = bitcast float %733 to i32, !dbg !136
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 2, i32 31), !dbg !136
  %736 = bitcast i32 %735 to float, !dbg !136
  %737 = fcmp ogt float %733, %736, !dbg !138
  %738 = fcmp uno float %733, 0.000000e+00, !dbg !139
  %739 = or i1 %737, %738, !dbg !140
  %740 = select i1 %739, float %733, float %736, !dbg !141
  %741 = bitcast float %740 to i32, !dbg !136
  %742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %741, i32 1, i32 31), !dbg !136
  %743 = bitcast i32 %742 to float, !dbg !136
  %744 = fcmp ogt float %740, %743, !dbg !138
  %745 = fcmp uno float %740, 0.000000e+00, !dbg !139
  %746 = or i1 %744, %745, !dbg !140
  %747 = select i1 %746, i32 %741, i32 %742, !dbg !141
  %748 = insertelement <1 x i32> poison, i32 %747, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %748, i1 %344) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %749 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %351) #5, !dbg !136
  %750 = bitcast i32 %749 to float, !dbg !136
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %749, i32 8, i32 31), !dbg !136
  %752 = bitcast i32 %751 to float, !dbg !136
  %753 = fcmp ogt float %750, %752, !dbg !138
  %754 = fcmp uno float %750, 0.000000e+00, !dbg !139
  %755 = or i1 %754, %753, !dbg !140
  %756 = select i1 %755, float %750, float %752, !dbg !141
  %757 = bitcast float %756 to i32, !dbg !136
  %758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %757, i32 4, i32 31), !dbg !136
  %759 = bitcast i32 %758 to float, !dbg !136
  %760 = fcmp ogt float %756, %759, !dbg !138
  %761 = fcmp uno float %756, 0.000000e+00, !dbg !139
  %762 = or i1 %760, %761, !dbg !140
  %763 = select i1 %762, float %756, float %759, !dbg !141
  %764 = bitcast float %763 to i32, !dbg !136
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %764, i32 2, i32 31), !dbg !136
  %766 = bitcast i32 %765 to float, !dbg !136
  %767 = fcmp ogt float %763, %766, !dbg !138
  %768 = fcmp uno float %763, 0.000000e+00, !dbg !139
  %769 = or i1 %767, %768, !dbg !140
  %770 = select i1 %769, float %763, float %766, !dbg !141
  %771 = bitcast float %770 to i32, !dbg !136
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 1, i32 31), !dbg !136
  %773 = bitcast i32 %772 to float, !dbg !136
  %774 = fcmp ogt float %770, %773, !dbg !138
  %775 = fcmp uno float %770, 0.000000e+00, !dbg !139
  %776 = or i1 %774, %775, !dbg !140
  %777 = select i1 %776, i32 %771, i32 %772, !dbg !141
  %778 = insertelement <1 x i32> poison, i32 %777, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %778, i1 %444) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %779 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %780 = getelementptr bfloat, ptr addrspace(1) %10, i64 %21, !dbg !142
  %781 = fptrunc float %708 to bfloat, !dbg !143
  %782 = and i32 %18, 511, !dbg !143
  %783 = icmp eq i32 %782, 0, !dbg !143
  %784 = bitcast bfloat %781 to i16, !dbg !143
  %785 = and i1 %17, %783, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %784, ptr addrspace(1) %780, i1 %785) #5, !dbg !143
  %786 = getelementptr bfloat, ptr addrspace(1) %11, i64 %21, !dbg !144
  %787 = fptrunc float %779 to bfloat, !dbg !145
  %788 = bitcast bfloat %787 to i16, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %788, ptr addrspace(1) %786, i1 %785) #5, !dbg !145
  %.inv4 = fcmp oge float %708, 0.000000e+00, !dbg !146
  %789 = select i1 %.inv4, float 0.000000e+00, float %708, !dbg !146
  %790 = fsub float 0.000000e+00, %789, !dbg !148
  %.inv5 = fcmp ole float %779, 0.000000e+00, !dbg !149
  %791 = select i1 %.inv5, float 0.000000e+00, float %779, !dbg !149
  %792 = fcmp ogt float %790, %791, !dbg !151
  %793 = fcmp uno float %790, 0.000000e+00, !dbg !153
  %794 = or i1 %793, %792, !dbg !154
  %795 = select i1 %794, float %790, float %791, !dbg !155
  %796 = fmul float %795, 0x3F80204080000000, !dbg !156
  %797 = fcmp ogt float %796, 0x3EE4F8B580000000, !dbg !157
  %798 = fcmp uno float %796, 0.000000e+00, !dbg !159
  %799 = or i1 %797, %798, !dbg !160
  %800 = select i1 %799, float %796, float 0x3EE4F8B580000000, !dbg !161
  %801 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %800), !dbg !162
  %802 = or disjoint i32 %20, %30
  %803 = sext i32 %802 to i64, !dbg !163
  %804 = getelementptr bfloat, ptr addrspace(1) %9, i64 %803, !dbg !163
  %805 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %804, i1 %17) #5, !dbg !164
  %806 = bitcast i32 %805 to <2 x bfloat>, !dbg !164
  %807 = extractelement <2 x bfloat> %806, i64 0, !dbg !164
  %808 = extractelement <2 x bfloat> %806, i64 1, !dbg !164
  %809 = fpext bfloat %807 to float, !dbg !165
  %810 = fpext bfloat %808 to float, !dbg !165
  %811 = fmul float %801, %809, !dbg !166
  %812 = fmul float %801, %810, !dbg !166
  %813 = tail call float @llvm.nvvm.round.f(float %811) #5, !dbg !167
  %814 = tail call float @llvm.nvvm.round.f(float %812) #5, !dbg !167
  %815 = insertelement <2 x float> poison, float %813, i64 0, !dbg !168
  %816 = insertelement <2 x float> %815, float %814, i64 1, !dbg !168
  %817 = fcmp ogt <2 x float> %816, splat (float -1.270000e+02), !dbg !168
  %818 = fcmp uno <2 x float> %816, zeroinitializer, !dbg !170
  %819 = or <2 x i1> %817, %818, !dbg !171
  %820 = select <2 x i1> %819, <2 x float> %816, <2 x float> splat (float -1.270000e+02), !dbg !172
  %821 = fcmp olt <2 x float> %820, splat (float 1.270000e+02), !dbg !173
  %822 = fcmp uno <2 x float> %820, zeroinitializer, !dbg !175
  %823 = or <2 x i1> %821, %822, !dbg !176
  %824 = fptosi <2 x float> %820 to <2 x i8>, !dbg !177
  %825 = select <2 x i1> %823, <2 x i8> %824, <2 x i8> splat (i8 127), !dbg !178
  %826 = getelementptr i8, ptr addrspace(1) %12, i64 %803, !dbg !179
  %827 = bitcast <2 x i8> %825 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %827, ptr addrspace(1) %826, i1 %17) #5, !dbg !180
  %828 = add i32 %802, 1024, !dbg !181
  %829 = sext i32 %828 to i64, !dbg !163
  %830 = getelementptr bfloat, ptr addrspace(1) %9, i64 %829, !dbg !163
  %831 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %830, i1 %17) #5, !dbg !164
  %832 = bitcast i32 %831 to <2 x bfloat>, !dbg !164
  %833 = extractelement <2 x bfloat> %832, i64 0, !dbg !164
  %834 = extractelement <2 x bfloat> %832, i64 1, !dbg !164
  %835 = fpext bfloat %833 to float, !dbg !165
  %836 = fpext bfloat %834 to float, !dbg !165
  %837 = fmul float %801, %835, !dbg !166
  %838 = fmul float %801, %836, !dbg !166
  %839 = tail call float @llvm.nvvm.round.f(float %837) #5, !dbg !167
  %840 = tail call float @llvm.nvvm.round.f(float %838) #5, !dbg !167
  %841 = insertelement <2 x float> poison, float %839, i64 0, !dbg !168
  %842 = insertelement <2 x float> %841, float %840, i64 1, !dbg !168
  %843 = fcmp ogt <2 x float> %842, splat (float -1.270000e+02), !dbg !168
  %844 = fcmp uno <2 x float> %842, zeroinitializer, !dbg !170
  %845 = or <2 x i1> %843, %844, !dbg !171
  %846 = select <2 x i1> %845, <2 x float> %842, <2 x float> splat (float -1.270000e+02), !dbg !172
  %847 = fcmp olt <2 x float> %846, splat (float 1.270000e+02), !dbg !173
  %848 = fcmp uno <2 x float> %846, zeroinitializer, !dbg !175
  %849 = or <2 x i1> %847, %848, !dbg !176
  %850 = fptosi <2 x float> %846 to <2 x i8>, !dbg !177
  %851 = select <2 x i1> %849, <2 x i8> %850, <2 x i8> splat (i8 127), !dbg !178
  %852 = getelementptr i8, ptr addrspace(1) %12, i64 %829, !dbg !179
  %853 = bitcast <2 x i8> %851 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %853, ptr addrspace(1) %852, i1 %17) #5, !dbg !180
  %854 = add i32 %802, 2048, !dbg !181
  %855 = sext i32 %854 to i64, !dbg !163
  %856 = getelementptr bfloat, ptr addrspace(1) %9, i64 %855, !dbg !163
  %857 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %856, i1 %17) #5, !dbg !164
  %858 = bitcast i32 %857 to <2 x bfloat>, !dbg !164
  %859 = extractelement <2 x bfloat> %858, i64 0, !dbg !164
  %860 = extractelement <2 x bfloat> %858, i64 1, !dbg !164
  %861 = fpext bfloat %859 to float, !dbg !165
  %862 = fpext bfloat %860 to float, !dbg !165
  %863 = fmul float %801, %861, !dbg !166
  %864 = fmul float %801, %862, !dbg !166
  %865 = tail call float @llvm.nvvm.round.f(float %863) #5, !dbg !167
  %866 = tail call float @llvm.nvvm.round.f(float %864) #5, !dbg !167
  %867 = insertelement <2 x float> poison, float %865, i64 0, !dbg !168
  %868 = insertelement <2 x float> %867, float %866, i64 1, !dbg !168
  %869 = fcmp ogt <2 x float> %868, splat (float -1.270000e+02), !dbg !168
  %870 = fcmp uno <2 x float> %868, zeroinitializer, !dbg !170
  %871 = or <2 x i1> %869, %870, !dbg !171
  %872 = select <2 x i1> %871, <2 x float> %868, <2 x float> splat (float -1.270000e+02), !dbg !172
  %873 = fcmp olt <2 x float> %872, splat (float 1.270000e+02), !dbg !173
  %874 = fcmp uno <2 x float> %872, zeroinitializer, !dbg !175
  %875 = or <2 x i1> %873, %874, !dbg !176
  %876 = fptosi <2 x float> %872 to <2 x i8>, !dbg !177
  %877 = select <2 x i1> %875, <2 x i8> %876, <2 x i8> splat (i8 127), !dbg !178
  %878 = getelementptr i8, ptr addrspace(1) %12, i64 %855, !dbg !179
  %879 = bitcast <2 x i8> %877 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %879, ptr addrspace(1) %878, i1 %17) #5, !dbg !180
  ret void, !dbg !182
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 40, column: 41, scope: !6)
!37 = !DILocation(line: 40, column: 34, scope: !6)
!38 = !DILocation(line: 40, column: 51, scope: !6)
!39 = !DILocation(line: 41, column: 41, scope: !6)
!40 = !DILocation(line: 41, column: 34, scope: !6)
!41 = !DILocation(line: 41, column: 48, scope: !6)
!42 = !DILocation(line: 42, column: 34, scope: !6)
!43 = !DILocation(line: 42, column: 48, scope: !6)
!44 = !DILocation(line: 43, column: 34, scope: !6)
!45 = !DILocation(line: 43, column: 51, scope: !6)
!46 = !DILocation(line: 44, column: 35, scope: !6)
!47 = !DILocation(line: 44, column: 42, scope: !6)
!48 = !DILocation(line: 45, column: 35, scope: !6)
!49 = !DILocation(line: 45, column: 42, scope: !6)
!50 = !DILocation(line: 73, column: 29, scope: !6)
!51 = !DILocation(line: 42, column: 101, scope: !6)
!52 = !DILocation(line: 47, column: 22, scope: !6)
!53 = !DILocation(line: 48, column: 23, scope: !6)
!54 = !DILocation(line: 60, column: 23, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 61, column: 24, scope: !6)
!57 = !DILocation(line: 45, column: 95, scope: !6)
!58 = !DILocation(line: 62, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 23, scope: !6)
!60 = !DILocation(line: 40, column: 113, scope: !6)
!61 = !DILocation(line: 64, column: 23, scope: !6)
!62 = !DILocation(line: 73, column: 53, scope: !6)
!63 = !DILocation(line: 70, column: 64, scope: !6)
!64 = !DILocation(line: 72, column: 68, scope: !6)
!65 = !DILocation(line: 35, column: 31, scope: !6)
!66 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !67)
!67 = !DILocation(line: 68, column: 55, scope: !6)
!68 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !67)
!69 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !67)
!70 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !67)
!71 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !67)
!72 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !67)
!73 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !67)
!74 = !DILocation(line: 217, column: 21, scope: !75, inlinedAt: !76)
!75 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!76 = !DILocation(line: 74, column: 85, scope: !6)
!77 = !DILocation(line: 218, column: 28, scope: !75, inlinedAt: !76)
!78 = !DILocation(line: 219, column: 39, scope: !75, inlinedAt: !76)
!79 = !DILocation(line: 219, column: 60, scope: !75, inlinedAt: !76)
!80 = !DILocation(line: 219, column: 49, scope: !75, inlinedAt: !76)
!81 = !DILocation(line: 221, column: 25, scope: !75, inlinedAt: !76)
!82 = !DILocation(line: 221, column: 17, scope: !75, inlinedAt: !76)
!83 = !DILocation(line: 222, column: 15, scope: !75, inlinedAt: !76)
!84 = !DILocation(line: 222, column: 30, scope: !75, inlinedAt: !76)
!85 = !DILocation(line: 222, column: 38, scope: !75, inlinedAt: !76)
!86 = !DILocation(line: 222, column: 49, scope: !75, inlinedAt: !76)
!87 = !DILocation(line: 222, column: 22, scope: !75, inlinedAt: !76)
!88 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !76)
!89 = !DILocation(line: 94, column: 25, scope: !6)
!90 = !DILocation(line: 96, column: 24, scope: !6)
!91 = !DILocation(line: 97, column: 32, scope: !6)
!92 = !DILocation(line: 92, column: 24, scope: !6)
!93 = !DILocation(line: 98, column: 24, scope: !6)
!94 = !DILocation(line: 110, column: 50, scope: !6)
!95 = !DILocation(line: 86, column: 43, scope: !6)
!96 = !DILocation(line: 86, column: 36, scope: !6)
!97 = !DILocation(line: 86, column: 53, scope: !6)
!98 = !DILocation(line: 87, column: 43, scope: !6)
!99 = !DILocation(line: 87, column: 35, scope: !6)
!100 = !DILocation(line: 87, column: 50, scope: !6)
!101 = !DILocation(line: 88, column: 35, scope: !6)
!102 = !DILocation(line: 88, column: 50, scope: !6)
!103 = !DILocation(line: 89, column: 42, scope: !6)
!104 = !DILocation(line: 89, column: 35, scope: !6)
!105 = !DILocation(line: 89, column: 49, scope: !6)
!106 = !DILocation(line: 90, column: 35, scope: !6)
!107 = !DILocation(line: 90, column: 49, scope: !6)
!108 = !DILocation(line: 86, column: 115, scope: !6)
!109 = !DILocation(line: 88, column: 103, scope: !6)
!110 = !DILocation(line: 90, column: 102, scope: !6)
!111 = !DILocation(line: 101, column: 24, scope: !6)
!112 = !DILocation(line: 103, column: 24, scope: !6)
!113 = !DILocation(line: 104, column: 24, scope: !6)
!114 = !DILocation(line: 106, column: 24, scope: !6)
!115 = !DILocation(line: 107, column: 24, scope: !6)
!116 = !DILocation(line: 113, column: 53, scope: !6)
!117 = !DILocation(line: 112, column: 50, scope: !6)
!118 = !DILocation(line: 113, column: 29, scope: !6)
!119 = !DILocation(line: 81, column: 31, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !121)
!121 = !DILocation(line: 109, column: 47, scope: !6)
!122 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !121)
!123 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !121)
!124 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !121)
!125 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !126)
!126 = !DILocation(line: 111, column: 47, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !126)
!130 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !131)
!131 = !DILocation(line: 114, column: 40, scope: !6)
!132 = !DILocation(line: 94, column: 15, scope: !75, inlinedAt: !131)
!133 = !DILocation(line: 96, column: 16, scope: !75, inlinedAt: !131)
!134 = !DILocation(line: 97, column: 29, scope: !75, inlinedAt: !131)
!135 = !DILocation(line: 96, column: 21, scope: !75, inlinedAt: !131)
!136 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !137)
!137 = !DILocation(line: 115, column: 40, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !75, inlinedAt: !137)
!139 = !DILocation(line: 104, column: 21, scope: !75, inlinedAt: !137)
!140 = !DILocation(line: 104, column: 16, scope: !75, inlinedAt: !137)
!141 = !DILocation(line: 105, column: 29, scope: !75, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 25, scope: !6)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 117, column: 25, scope: !6)
!145 = !DILocation(line: 117, column: 37, scope: !6)
!146 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !147)
!147 = !DILocation(line: 126, column: 46, scope: !6)
!148 = !DILocation(line: 127, column: 17, scope: !6)
!149 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !150)
!150 = !DILocation(line: 128, column: 46, scope: !6)
!151 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !152)
!152 = !DILocation(line: 129, column: 46, scope: !6)
!153 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !152)
!154 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !152)
!155 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !152)
!156 = !DILocation(line: 131, column: 24, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !158)
!158 = !DILocation(line: 134, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !158)
!162 = !DILocation(line: 137, column: 25, scope: !6)
!163 = !DILocation(line: 124, column: 36, scope: !6)
!164 = !DILocation(line: 124, column: 53, scope: !6)
!165 = !DILocation(line: 124, column: 115, scope: !6)
!166 = !DILocation(line: 140, column: 24, scope: !6)
!167 = !DILocation(line: 141, column: 36, scope: !6)
!168 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !169)
!169 = !DILocation(line: 144, column: 46, scope: !6)
!170 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !169)
!171 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !169)
!172 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !169)
!173 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !174)
!174 = !DILocation(line: 146, column: 46, scope: !6)
!175 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !174)
!176 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !174)
!177 = !DILocation(line: 148, column: 25, scope: !6)
!178 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !174)
!179 = !DILocation(line: 149, column: 29, scope: !6)
!180 = !DILocation(line: 149, column: 53, scope: !6)
!181 = !DILocation(line: 124, column: 43, scope: !6)
!182 = !DILocation(line: 118, column: 4, scope: !6)
