; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 3, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 6, !dbg !11
  %20 = and i32 %19, 7, !dbg !11
  %21 = and i32 %18, 31, !dbg !11
  %22 = or disjoint i32 %20, %17, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = shl i32 %18, 2, !dbg !14
  %25 = and i32 %24, 252, !dbg !14
  %26 = sext i32 %22 to i64, !dbg !15
  %27 = getelementptr bfloat, ptr addrspace(1) %4, i64 %26, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %32 = bitcast i16 %31 to bfloat, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %5, i64 %26, !dbg !17
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %38 = bitcast i16 %37 to bfloat, !dbg !18
  %39 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %32, 0xR0000, !dbg !20
  %40 = select i1 %.inv, bfloat 0xR0000, bfloat %32, !dbg !20
  %41 = fpext bfloat %40 to float, !dbg !20
  %42 = fsub float 0.000000e+00, %41, !dbg !24
  %.inv3 = fcmp ole bfloat %38, 0xR0000, !dbg !25
  %43 = select i1 %.inv3, bfloat 0xR0000, bfloat %38, !dbg !25
  %44 = fpext bfloat %43 to float, !dbg !25
  %45 = fcmp ogt float %42, %44, !dbg !27
  %46 = fcmp uno float %42, 0.000000e+00, !dbg !29
  %47 = or i1 %46, %45, !dbg !30
  %48 = select i1 %47, float %42, float %44, !dbg !31
  %49 = fmul float %48, 0x3F80204080000000, !dbg !32
  %50 = fcmp ogt float %49, 0x3EE4F8B580000000, !dbg !33
  %51 = fcmp uno float %49, 0.000000e+00, !dbg !35
  %52 = or i1 %50, %51, !dbg !36
  %53 = select i1 %52, float %49, float 0x3EE4F8B580000000, !dbg !37
  %54 = zext nneg i32 %25 to i64, !dbg !38
  %55 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !39
  %56 = shufflevector <4 x i1> %55, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  %57 = insertelement <4 x float> poison, float %53, i64 0, !dbg !40
  %58 = shufflevector <4 x float> %57, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %59 = or disjoint i32 %39, %25, !dbg !41
  %60 = sext i32 %59 to i64, !dbg !42
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !42
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %61, i1 %23) #5, !dbg !43
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !43
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !43
  %65 = extractvalue { i32, i32 } %62, 1, !dbg !43
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !43
  %67 = or disjoint i64 %54, 6144, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !45
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %68, i1 true) #5, !dbg !46
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !46
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !46
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !46
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !46
  %74 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !47
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %74, i1 true) #5, !dbg !48
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !48
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !48
  %78 = extractvalue { i32, i32 } %75, 1, !dbg !48
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !48
  %80 = getelementptr i32, ptr addrspace(1) %3, i64 %60, !dbg !49
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %23) #5, !dbg !50
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !50
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !50
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !50
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !50
  %86 = getelementptr bfloat, ptr addrspace(1) %6, i64 %54, !dbg !51
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %86, i1 true) #5, !dbg !52
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !52
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !52
  %90 = extractvalue { i32, i32 } %87, 1, !dbg !52
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !52
  %92 = getelementptr bfloat, ptr addrspace(1) %7, i64 %54, !dbg !53
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %92, i1 true) #5, !dbg !54
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !54
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !54
  %96 = extractvalue { i32, i32 } %93, 1, !dbg !54
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !54
  %98 = shufflevector <2 x bfloat> %64, <2 x bfloat> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %99 = fpext <4 x bfloat> %98 to <4 x float>, !dbg !55
  %100 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !46
  %101 = insertelement <4 x i32> %100, i32 %71, i64 1, !dbg !46
  %102 = insertelement <4 x i32> %101, i32 %72, i64 2, !dbg !46
  %103 = insertelement <4 x i32> %102, i32 %73, i64 3, !dbg !46
  %104 = bitcast <4 x i32> %103 to <4 x float>, !dbg !46
  %105 = shufflevector <2 x bfloat> %77, <2 x bfloat> %79, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %106 = fpext <4 x bfloat> %105 to <4 x float>, !dbg !56
  %107 = shufflevector <2 x bfloat> %89, <2 x bfloat> %91, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %108 = fpext <4 x bfloat> %107 to <4 x float>, !dbg !57
  %109 = shufflevector <2 x bfloat> %95, <2 x bfloat> %97, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %110 = fpext <4 x bfloat> %109 to <4 x float>, !dbg !58
  %111 = fadd <4 x float> %104, %106, !dbg !59
  %112 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !60
  %113 = insertelement <4 x i32> %112, i32 %83, i64 1, !dbg !60
  %114 = insertelement <4 x i32> %113, i32 %84, i64 2, !dbg !60
  %115 = insertelement <4 x i32> %114, i32 %85, i64 3, !dbg !60
  %116 = sitofp <4 x i32> %115 to <4 x float>, !dbg !60
  %117 = fmul <4 x float> %58, %116, !dbg !40
  %118 = fmul <4 x float> %117, %108, !dbg !61
  %119 = fadd <4 x float> %118, %110, !dbg !62
  %120 = fmul <4 x float> %111, %119, !dbg !63
  %121 = fadd <4 x float> %120, %99, !dbg !64
  %122 = select <4 x i1> %56, <4 x float> %121, <4 x float> zeroinitializer, !dbg !39
  %123 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %124 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %125 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %126 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %127 = getelementptr bfloat, ptr addrspace(1) %8, i64 %60, !dbg !66
  %128 = extractelement <4 x float> %121, i64 0, !dbg !67
  %129 = fptrunc float %128 to bfloat, !dbg !67
  %130 = extractelement <4 x float> %121, i64 1, !dbg !67
  %131 = fptrunc float %130 to bfloat, !dbg !67
  %132 = extractelement <4 x float> %121, i64 2, !dbg !67
  %133 = fptrunc float %132 to bfloat, !dbg !67
  %134 = extractelement <4 x float> %121, i64 3, !dbg !67
  %135 = fptrunc float %134 to bfloat, !dbg !67
  %136 = insertelement <2 x bfloat> poison, bfloat %129, i64 0, !dbg !67
  %137 = insertelement <2 x bfloat> %136, bfloat %131, i64 1, !dbg !67
  %138 = bitcast <2 x bfloat> %137 to i32, !dbg !67
  %139 = insertelement <2 x bfloat> poison, bfloat %133, i64 0, !dbg !67
  %140 = insertelement <2 x bfloat> %139, bfloat %135, i64 1, !dbg !67
  %141 = bitcast <2 x bfloat> %140 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %141, ptr addrspace(1) %127, i1 %23) #5, !dbg !67
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 256, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %142 = phi float [ %123, %.peel.begin ], [ %258, %._crit_edge ]
  %143 = phi float [ %124, %.peel.begin ], [ %259, %._crit_edge ]
  %144 = phi float [ %125, %.peel.begin ], [ %260, %._crit_edge ]
  %145 = phi float [ %126, %.peel.begin ], [ %261, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %.peel.begin ], [ %254, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %.peel.begin ], [ %255, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %.peel.begin ], [ %256, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %.peel.begin ], [ %257, %._crit_edge ]
  %150 = phi <4 x float> [ %122, %.peel.begin ], [ %253, %._crit_edge ]
  %151 = or disjoint i64 %indvars.iv, %54, !dbg !68
  %152 = trunc nuw nsw i64 %151 to i32, !dbg !41
  %153 = add i32 %39, %152, !dbg !41
  %154 = sext i32 %153 to i64, !dbg !42
  %155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !42
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %155, i1 %23) #5, !dbg !43
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !43
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !43
  %159 = extractvalue { i32, i32 } %156, 1, !dbg !43
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !43
  %161 = add nuw nsw i64 %151, 6144, !dbg !44
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !45
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %162, i1 true) #5, !dbg !46
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !46
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !46
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !46
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !46
  %168 = getelementptr bfloat, ptr addrspace(1) %2, i64 %161, !dbg !47
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %168, i1 true) #5, !dbg !48
  %170 = extractvalue { i32, i32 } %169, 0, !dbg !48
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !48
  %172 = extractvalue { i32, i32 } %169, 1, !dbg !48
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !48
  %174 = getelementptr i32, ptr addrspace(1) %3, i64 %154, !dbg !49
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %23) #5, !dbg !50
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !50
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !50
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !50
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !50
  %180 = getelementptr bfloat, ptr addrspace(1) %6, i64 %151, !dbg !51
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %180, i1 true) #5, !dbg !52
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !52
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !52
  %184 = extractvalue { i32, i32 } %181, 1, !dbg !52
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !52
  %186 = getelementptr bfloat, ptr addrspace(1) %7, i64 %151, !dbg !53
  %187 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %186, i1 true) #5, !dbg !54
  %188 = extractvalue { i32, i32 } %187, 0, !dbg !54
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !54
  %190 = extractvalue { i32, i32 } %187, 1, !dbg !54
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !54
  %192 = shufflevector <2 x bfloat> %158, <2 x bfloat> %160, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %193 = fpext <4 x bfloat> %192 to <4 x float>, !dbg !55
  %194 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !46
  %195 = insertelement <4 x i32> %194, i32 %165, i64 1, !dbg !46
  %196 = insertelement <4 x i32> %195, i32 %166, i64 2, !dbg !46
  %197 = insertelement <4 x i32> %196, i32 %167, i64 3, !dbg !46
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !46
  %199 = shufflevector <2 x bfloat> %171, <2 x bfloat> %173, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %200 = fpext <4 x bfloat> %199 to <4 x float>, !dbg !56
  %201 = shufflevector <2 x bfloat> %183, <2 x bfloat> %185, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %202 = fpext <4 x bfloat> %201 to <4 x float>, !dbg !57
  %203 = shufflevector <2 x bfloat> %189, <2 x bfloat> %191, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %204 = fpext <4 x bfloat> %203 to <4 x float>, !dbg !58
  %205 = fadd <4 x float> %198, %200, !dbg !59
  %206 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !60
  %207 = insertelement <4 x i32> %206, i32 %177, i64 1, !dbg !60
  %208 = insertelement <4 x i32> %207, i32 %178, i64 2, !dbg !60
  %209 = insertelement <4 x i32> %208, i32 %179, i64 3, !dbg !60
  %210 = sitofp <4 x i32> %209 to <4 x float>, !dbg !60
  %211 = fmul <4 x float> %58, %210, !dbg !40
  %212 = fmul <4 x float> %211, %202, !dbg !61
  %213 = fadd <4 x float> %212, %204, !dbg !62
  %214 = fmul <4 x float> %205, %213, !dbg !63
  %215 = fadd <4 x float> %214, %193, !dbg !64
  %216 = fsub <4 x float> %215, %150, !dbg !69
  %217 = extractelement <4 x float> %216, i64 0, !dbg !69
  %218 = fsub <4 x float> %215, %150, !dbg !69
  %219 = extractelement <4 x float> %218, i64 1, !dbg !69
  %220 = fsub <4 x float> %215, %150, !dbg !69
  %221 = extractelement <4 x float> %220, i64 2, !dbg !69
  %222 = fsub <4 x float> %215, %150, !dbg !69
  %223 = extractelement <4 x float> %222, i64 3, !dbg !69
  %224 = fadd float %142, 1.000000e+00, !dbg !71
  %225 = fadd float %143, 1.000000e+00, !dbg !71
  %226 = fadd float %144, 1.000000e+00, !dbg !71
  %227 = fadd float %145, 1.000000e+00, !dbg !71
  %228 = tail call float @llvm.nvvm.div.full(float %217, float %224), !dbg !72
  %229 = tail call float @llvm.nvvm.div.full(float %219, float %225), !dbg !72
  %230 = tail call float @llvm.nvvm.div.full(float %221, float %226), !dbg !72
  %231 = tail call float @llvm.nvvm.div.full(float %223, float %227), !dbg !72
  %232 = insertelement <4 x float> poison, float %228, i64 0, !dbg !73
  %233 = insertelement <4 x float> %232, float %229, i64 1, !dbg !73
  %234 = insertelement <4 x float> %233, float %230, i64 2, !dbg !73
  %235 = insertelement <4 x float> %234, float %231, i64 3, !dbg !73
  %236 = fadd <4 x float> %150, %235, !dbg !73
  %237 = fsub <4 x float> %215, %236, !dbg !74
  %238 = fsub <4 x float> %215, %236, !dbg !74
  %239 = fsub <4 x float> %215, %236, !dbg !74
  %240 = fsub <4 x float> %215, %236, !dbg !74
  %241 = fmul <4 x float> %216, %237, !dbg !75
  %242 = extractelement <4 x float> %241, i64 0, !dbg !75
  %243 = fmul <4 x float> %218, %238, !dbg !75
  %244 = extractelement <4 x float> %243, i64 1, !dbg !75
  %245 = fmul <4 x float> %220, %239, !dbg !75
  %246 = extractelement <4 x float> %245, i64 2, !dbg !75
  %247 = fmul <4 x float> %222, %240, !dbg !75
  %248 = extractelement <4 x float> %247, i64 3, !dbg !75
  %249 = fadd float %146, %242, !dbg !76
  %250 = fadd float %147, %244, !dbg !76
  %251 = fadd float %148, %246, !dbg !76
  %252 = fadd float %149, %248, !dbg !76
  %253 = select <4 x i1> %56, <4 x float> %236, <4 x float> %150, !dbg !39
  %254 = select i1 %23, float %249, float %146, !dbg !77
  %255 = select i1 %23, float %250, float %147, !dbg !77
  %256 = select i1 %23, float %251, float %148, !dbg !77
  %257 = select i1 %23, float %252, float %149, !dbg !77
  %258 = select i1 %23, float %224, float %142, !dbg !65
  %259 = select i1 %23, float %225, float %143, !dbg !65
  %260 = select i1 %23, float %226, float %144, !dbg !65
  %261 = select i1 %23, float %227, float %145, !dbg !65
  %262 = getelementptr bfloat, ptr addrspace(1) %8, i64 %154, !dbg !66
  %263 = extractelement <4 x float> %215, i64 0, !dbg !67
  %264 = fptrunc float %263 to bfloat, !dbg !67
  %265 = extractelement <4 x float> %215, i64 1, !dbg !67
  %266 = fptrunc float %265 to bfloat, !dbg !67
  %267 = extractelement <4 x float> %215, i64 2, !dbg !67
  %268 = fptrunc float %267 to bfloat, !dbg !67
  %269 = extractelement <4 x float> %215, i64 3, !dbg !67
  %270 = fptrunc float %269 to bfloat, !dbg !67
  %271 = insertelement <2 x bfloat> poison, bfloat %264, i64 0, !dbg !67
  %272 = insertelement <2 x bfloat> %271, bfloat %266, i64 1, !dbg !67
  %273 = bitcast <2 x bfloat> %272 to i32, !dbg !67
  %274 = insertelement <2 x bfloat> poison, bfloat %268, i64 0, !dbg !67
  %275 = insertelement <2 x bfloat> %274, bfloat %270, i64 1, !dbg !67
  %276 = bitcast <2 x bfloat> %275 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %273, i32 %276, ptr addrspace(1) %262, i1 %23) #5, !dbg !67
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !38
  %277 = icmp samesign ult i64 %indvars.iv, 2816, !dbg !38
  br i1 %277, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !38, !llvm.loop !78

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %278 = fadd float %254, %255, !dbg !11
  %279 = lshr i32 %18, 5, !dbg !11
  %280 = and i32 %18, 7, !dbg !11
  %281 = or disjoint i32 %17, %280, !dbg !12
  %282 = icmp slt i32 %281, 3600, !dbg !13
  %283 = extractelement <4 x float> %253, i64 0, !dbg !80
  %284 = extractelement <4 x float> %253, i64 1, !dbg !80
  %285 = fsub float %284, %283, !dbg !80
  %286 = fadd float %258, %259, !dbg !83
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !84
  %288 = tail call float @llvm.nvvm.div.full(float %259, float %286), !dbg !85
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !86
  %290 = fmul float %285, %289, !dbg !87
  %291 = fadd float %283, %290, !dbg !88
  %292 = fmul float %285, %285, !dbg !89
  %293 = fmul float %292, %258, !dbg !90
  %294 = fmul float %293, %289, !dbg !91
  %295 = fadd float %278, %294, !dbg !92
  %296 = extractelement <4 x float> %253, i64 2, !dbg !80
  %297 = fsub float %296, %291, !dbg !80
  %298 = fadd float %260, %286, !dbg !83
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !84
  %300 = tail call float @llvm.nvvm.div.full(float %260, float %298), !dbg !85
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !86
  %302 = fmul float %301, %297, !dbg !87
  %303 = fadd float %291, %302, !dbg !88
  %304 = fadd float %256, %295, !dbg !93
  %305 = fmul float %297, %297, !dbg !89
  %306 = fmul float %286, %305, !dbg !90
  %307 = fmul float %301, %306, !dbg !91
  %308 = fadd float %304, %307, !dbg !92
  %309 = extractelement <4 x float> %253, i64 3, !dbg !80
  %310 = fsub float %309, %303, !dbg !80
  %311 = fadd float %261, %298, !dbg !83
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !84
  %313 = tail call float @llvm.nvvm.div.full(float %261, float %311), !dbg !85
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !86
  %315 = fmul float %314, %310, !dbg !87
  %316 = fadd float %303, %315, !dbg !88
  %317 = fadd float %257, %308, !dbg !93
  %318 = fmul float %310, %310, !dbg !89
  %319 = fmul float %298, %318, !dbg !90
  %320 = fmul float %314, %319, !dbg !91
  %321 = fadd float %317, %320, !dbg !92
  %322 = bitcast float %316 to i32, !dbg !94
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 16, i32 31), !dbg !94
  %324 = bitcast i32 %323 to float, !dbg !94
  %325 = bitcast float %321 to i32, !dbg !94
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 16, i32 31), !dbg !94
  %327 = bitcast i32 %326 to float, !dbg !94
  %328 = bitcast float %311 to i32, !dbg !94
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 16, i32 31), !dbg !94
  %330 = bitcast i32 %329 to float, !dbg !94
  %331 = fsub float %324, %316, !dbg !80
  %332 = fadd float %311, %330, !dbg !83
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !84
  %334 = tail call float @llvm.nvvm.div.full(float %330, float %332), !dbg !85
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !86
  %336 = fmul float %335, %331, !dbg !87
  %337 = fadd float %316, %336, !dbg !88
  %338 = fadd float %321, %327, !dbg !93
  %339 = fmul float %331, %331, !dbg !89
  %340 = fmul float %311, %339, !dbg !90
  %341 = fmul float %335, %340, !dbg !91
  %342 = fadd float %338, %341, !dbg !92
  %343 = bitcast float %337 to i32, !dbg !94
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 8, i32 31), !dbg !94
  %345 = bitcast i32 %344 to float, !dbg !94
  %346 = bitcast float %342 to i32, !dbg !94
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !94
  %348 = bitcast i32 %347 to float, !dbg !94
  %349 = bitcast float %332 to i32, !dbg !94
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 8, i32 31), !dbg !94
  %351 = bitcast i32 %350 to float, !dbg !94
  %352 = fsub float %345, %337, !dbg !80
  %353 = fadd float %332, %351, !dbg !83
  %354 = fcmp oeq float %353, 0.000000e+00, !dbg !84
  %355 = tail call float @llvm.nvvm.div.full(float %351, float %353), !dbg !85
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !86
  %357 = fmul float %352, %356, !dbg !87
  %358 = fadd float %337, %357, !dbg !88
  %359 = fadd float %342, %348, !dbg !93
  %360 = fmul float %352, %352, !dbg !89
  %361 = fmul float %332, %360, !dbg !90
  %362 = fmul float %356, %361, !dbg !91
  %363 = fadd float %359, %362, !dbg !92
  %364 = bitcast float %358 to i32, !dbg !94
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !94
  %366 = bitcast i32 %365 to float, !dbg !94
  %367 = bitcast float %363 to i32, !dbg !94
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 4, i32 31), !dbg !94
  %369 = bitcast i32 %368 to float, !dbg !94
  %370 = bitcast float %353 to i32, !dbg !94
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !94
  %372 = bitcast i32 %371 to float, !dbg !94
  %373 = fsub float %366, %358, !dbg !80
  %374 = fadd float %353, %372, !dbg !83
  %375 = fcmp oeq float %374, 0.000000e+00, !dbg !84
  %376 = tail call float @llvm.nvvm.div.full(float %372, float %374), !dbg !85
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !86
  %378 = fmul float %373, %377, !dbg !87
  %379 = fadd float %358, %378, !dbg !88
  %380 = fadd float %363, %369, !dbg !93
  %381 = fmul float %373, %373, !dbg !89
  %382 = fmul float %353, %381, !dbg !90
  %383 = fmul float %377, %382, !dbg !91
  %384 = fadd float %380, %383, !dbg !92
  %385 = bitcast float %379 to i32, !dbg !94
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !94
  %387 = bitcast i32 %386 to float, !dbg !94
  %388 = bitcast float %384 to i32, !dbg !94
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 2, i32 31), !dbg !94
  %390 = bitcast i32 %389 to float, !dbg !94
  %391 = bitcast float %374 to i32, !dbg !94
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !94
  %393 = bitcast i32 %392 to float, !dbg !94
  %394 = fsub float %387, %379, !dbg !80
  %395 = fadd float %374, %393, !dbg !83
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !84
  %397 = tail call float @llvm.nvvm.div.full(float %393, float %395), !dbg !85
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !86
  %399 = fmul float %394, %398, !dbg !87
  %400 = fadd float %379, %399, !dbg !88
  %401 = fadd float %384, %390, !dbg !93
  %402 = fmul float %394, %394, !dbg !89
  %403 = fmul float %374, %402, !dbg !90
  %404 = fmul float %398, %403, !dbg !91
  %405 = fadd float %401, %404, !dbg !92
  %406 = bitcast float %400 to i32, !dbg !94
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !94
  %408 = bitcast i32 %407 to float, !dbg !94
  %409 = bitcast float %405 to i32, !dbg !94
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 1, i32 31), !dbg !94
  %411 = bitcast i32 %410 to float, !dbg !94
  %412 = bitcast float %395 to i32, !dbg !94
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !94
  %414 = bitcast i32 %413 to float, !dbg !94
  %415 = fsub float %408, %400, !dbg !80
  %416 = fadd float %395, %414, !dbg !83
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !84
  %418 = tail call float @llvm.nvvm.div.full(float %414, float %416), !dbg !85
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !86
  %420 = fmul float %415, %419, !dbg !87
  %421 = fadd float %400, %420, !dbg !88
  %422 = fadd float %405, %411, !dbg !93
  %423 = fmul float %415, %415, !dbg !89
  %424 = fmul float %395, %423, !dbg !90
  %425 = fmul float %419, %424, !dbg !91
  %426 = fadd float %422, %425, !dbg !92
  %427 = and i32 %279, 1, !dbg !94
  %428 = icmp eq i32 %21, 0, !dbg !94
  %429 = shl nuw nsw i32 %20, 1, !dbg !94
  %430 = or disjoint i32 %429, %427, !dbg !94
  %431 = getelementptr float, ptr addrspace(3) @global_smem, i32 %430, !dbg !94
  %432 = bitcast float %421 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 %428) #5, !dbg !94
  %433 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %430, !dbg !94
  %434 = bitcast float %426 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 %428) #5, !dbg !94
  %435 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %430, !dbg !94
  %436 = bitcast float %416 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 %428) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %437 = icmp slt i32 %18, 16, !dbg !94
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !94
  %439 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %438, i1 %437) #5, !dbg !94
  %440 = bitcast i32 %439 to float, !dbg !94
  %441 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !94
  %442 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %441, i1 %437) #5, !dbg !94
  %443 = bitcast i32 %442 to float, !dbg !94
  %444 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !94
  %445 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %444, i1 %437) #5, !dbg !94
  %446 = bitcast i32 %445 to float, !dbg !94
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 1, i32 31), !dbg !94
  %448 = bitcast i32 %447 to float, !dbg !94
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !94
  %450 = bitcast i32 %449 to float, !dbg !94
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 1, i32 31), !dbg !94
  %452 = bitcast i32 %451 to float, !dbg !94
  %453 = fsub float %448, %440, !dbg !80
  %454 = fadd float %446, %452, !dbg !83
  %455 = fcmp oeq float %454, 0.000000e+00, !dbg !84
  %456 = tail call float @llvm.nvvm.div.full(float %452, float %454), !dbg !85
  %457 = select i1 %455, float 0.000000e+00, float %456, !dbg !86
  %458 = fmul float %453, %457, !dbg !87
  %459 = fadd float %458, %440, !dbg !88
  %460 = fadd float %443, %450, !dbg !93
  %461 = fmul float %453, %453, !dbg !89
  %462 = fmul float %461, %446, !dbg !90
  %463 = fmul float %462, %457, !dbg !91
  %464 = fadd float %460, %463, !dbg !92
  %465 = and i32 %18, 1, !dbg !94
  %466 = icmp eq i32 %465, 0, !dbg !94
  %467 = and i1 %437, %466, !dbg !94
  %468 = bitcast float %459 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %468, i1 %467) #5, !dbg !94
  %469 = bitcast float %464 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %469, i1 %467) #5, !dbg !94
  %470 = bitcast float %454 to <1 x i32>, !dbg !94
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %470, i1 %467) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %429, !dbg !94
  %472 = load float, ptr addrspace(3) %471, align 8, !dbg !94
  %473 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %429, !dbg !94
  %474 = load float, ptr addrspace(3) %473, align 8, !dbg !94
  %475 = tail call float @llvm.nvvm.div.full(float %474, float 3.072000e+03), !dbg !95
  %476 = fadd float %475, 0x3EB0C6F7A0000000, !dbg !96
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i19 = icmp eq i32 %480, 0, !dbg !97
  br i1 %.not.i19, label %483, label %481, !dbg !97

481:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %482 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %476), !dbg !97
  br label %__nv_rsqrtf.exit21, !dbg !97

483:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %484 = tail call float @llvm.nvvm.rsqrt.approx.f(float %476), !dbg !97
  br label %__nv_rsqrtf.exit21, !dbg !97

__nv_rsqrtf.exit21:                               ; preds = %481, %483
  %.0.i20 = phi float [ %482, %481 ], [ %484, %483 ], !dbg !97
  %485 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !98
  %486 = shufflevector <2 x i1> %485, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %487 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !99
  %488 = shufflevector <2 x float> %487, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %489 = insertelement <2 x float> poison, float %472, i64 0, !dbg !100
  %490 = shufflevector <2 x float> %489, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  br label %491, !dbg !101

491:                                              ; preds = %__nv_rsqrtf.exit21, %491
  %indvars.iv45 = phi i64 [ 0, %__nv_rsqrtf.exit21 ], [ %indvars.iv.next46, %491 ]
  %492 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit21 ], [ %582, %491 ]
  %493 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit21 ], [ %583, %491 ]
  %494 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit21 ], [ %554, %491 ]
  %495 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit21 ], [ %588, %491 ]
  %496 = or disjoint i64 %indvars.iv45, %54, !dbg !102
  %497 = trunc nuw nsw i64 %496 to i32, !dbg !103
  %498 = add i32 %39, %497, !dbg !103
  %499 = sext i32 %498 to i64, !dbg !104
  %500 = getelementptr bfloat, ptr addrspace(1) %8, i64 %499, !dbg !104
  %501 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %500, i1 %23) #5, !dbg !105
  %502 = extractvalue { i32, i32 } %501, 0, !dbg !105
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !105
  %504 = extractvalue { i32, i32 } %501, 1, !dbg !105
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !105
  %506 = or disjoint i64 %496, 12288, !dbg !106
  %507 = getelementptr float, ptr addrspace(1) %1, i64 %506, !dbg !107
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %507, i1 true) #5, !dbg !108
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !108
  %510 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !108
  %511 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !108
  %512 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !108
  %513 = getelementptr bfloat, ptr addrspace(1) %2, i64 %506, !dbg !109
  %514 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %513, i1 true) #5, !dbg !110
  %515 = extractvalue { i32, i32 } %514, 0, !dbg !110
  %516 = bitcast i32 %515 to <2 x bfloat>, !dbg !110
  %517 = extractvalue { i32, i32 } %514, 1, !dbg !110
  %518 = bitcast i32 %517 to <2 x bfloat>, !dbg !110
  %519 = add nuw nsw i64 %496, 9216, !dbg !111
  %520 = getelementptr float, ptr addrspace(1) %1, i64 %519, !dbg !112
  %521 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %520, i1 true) #5, !dbg !113
  %522 = extractvalue { i32, i32, i32, i32 } %521, 0, !dbg !113
  %523 = extractvalue { i32, i32, i32, i32 } %521, 1, !dbg !113
  %524 = extractvalue { i32, i32, i32, i32 } %521, 2, !dbg !113
  %525 = extractvalue { i32, i32, i32, i32 } %521, 3, !dbg !113
  %526 = getelementptr bfloat, ptr addrspace(1) %2, i64 %519, !dbg !114
  %527 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %526, i1 true) #5, !dbg !115
  %528 = extractvalue { i32, i32 } %527, 0, !dbg !115
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !115
  %530 = extractvalue { i32, i32 } %527, 1, !dbg !115
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !115
  %532 = fcmp uno <2 x float> %494, zeroinitializer, !dbg !116
  %533 = fcmp uno float %492, 0.000000e+00, !dbg !116
  %534 = fcmp uno float %493, 0.000000e+00, !dbg !116
  %535 = fpext <2 x bfloat> %503 to <2 x float>, !dbg !118
  %536 = insertelement <2 x i32> poison, i32 %509, i64 0, !dbg !108
  %537 = insertelement <2 x i32> %536, i32 %510, i64 1, !dbg !108
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !108
  %539 = fpext <2 x bfloat> %516 to <2 x float>, !dbg !119
  %540 = insertelement <2 x i32> poison, i32 %522, i64 0, !dbg !113
  %541 = insertelement <2 x i32> %540, i32 %523, i64 1, !dbg !113
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !113
  %543 = fpext <2 x bfloat> %529 to <2 x float>, !dbg !120
  %544 = fsub <2 x float> %535, %490, !dbg !100
  %545 = fmul <2 x float> %488, %544, !dbg !99
  %546 = fadd <2 x float> %538, %539, !dbg !121
  %547 = fadd <2 x float> %546, splat (float 1.000000e+00), !dbg !122
  %548 = fmul <2 x float> %545, %547, !dbg !123
  %549 = fadd <2 x float> %542, %543, !dbg !124
  %550 = fadd <2 x float> %548, %549, !dbg !125
  %551 = fcmp olt <2 x float> %494, %550, !dbg !126
  %552 = or <2 x i1> %532, %551, !dbg !127
  %553 = select <2 x i1> %552, <2 x float> %494, <2 x float> %550, !dbg !128
  %554 = select <2 x i1> %486, <2 x float> %553, <2 x float> %494, !dbg !98
  %555 = fcmp uno <4 x float> %495, zeroinitializer, !dbg !129
  %556 = getelementptr bfloat, ptr addrspace(1) %9, i64 %499, !dbg !131
  %557 = fptrunc <2 x float> %550 to <2 x bfloat>, !dbg !132
  %558 = fpext <2 x bfloat> %505 to <2 x float>, !dbg !118
  %559 = insertelement <2 x i32> poison, i32 %511, i64 0, !dbg !108
  %560 = insertelement <2 x i32> %559, i32 %512, i64 1, !dbg !108
  %561 = bitcast <2 x i32> %560 to <2 x float>, !dbg !108
  %562 = fpext <2 x bfloat> %518 to <2 x float>, !dbg !119
  %563 = insertelement <2 x i32> poison, i32 %524, i64 0, !dbg !113
  %564 = insertelement <2 x i32> %563, i32 %525, i64 1, !dbg !113
  %565 = bitcast <2 x i32> %564 to <2 x float>, !dbg !113
  %566 = fpext <2 x bfloat> %531 to <2 x float>, !dbg !120
  %567 = fsub <2 x float> %558, %490, !dbg !100
  %568 = fmul <2 x float> %488, %567, !dbg !99
  %569 = fadd <2 x float> %561, %562, !dbg !121
  %570 = fadd <2 x float> %569, splat (float 1.000000e+00), !dbg !122
  %571 = fmul <2 x float> %568, %570, !dbg !123
  %572 = fadd <2 x float> %565, %566, !dbg !124
  %573 = fadd <2 x float> %571, %572, !dbg !125
  %574 = extractelement <2 x float> %573, i64 0, !dbg !128
  %575 = fcmp olt float %492, %574, !dbg !126
  %576 = extractelement <2 x float> %573, i64 1, !dbg !128
  %577 = fcmp olt float %493, %576, !dbg !126
  %578 = or i1 %533, %575, !dbg !127
  %579 = or i1 %534, %577, !dbg !127
  %580 = select i1 %578, float %492, float %574, !dbg !128
  %581 = select i1 %579, float %493, float %576, !dbg !128
  %582 = select i1 %23, float %580, float %492, !dbg !98
  %583 = select i1 %23, float %581, float %493, !dbg !98
  %584 = shufflevector <2 x float> %550, <2 x float> %573, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !133
  %585 = fcmp ogt <4 x float> %495, %584, !dbg !133
  %586 = or <4 x i1> %555, %585, !dbg !134
  %587 = select <4 x i1> %586, <4 x float> %495, <4 x float> %584, !dbg !135
  %588 = select <4 x i1> %56, <4 x float> %587, <4 x float> %495, !dbg !136
  %589 = fptrunc <2 x float> %573 to <2 x bfloat>, !dbg !132
  %590 = bitcast <2 x bfloat> %557 to i32, !dbg !132
  %591 = bitcast <2 x bfloat> %589 to i32, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %590, i32 %591, ptr addrspace(1) %556, i1 %23) #5, !dbg !132
  %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 256, !dbg !101
  %592 = icmp samesign ult i64 %indvars.iv45, 2816, !dbg !101
  br i1 %592, label %491, label %593, !dbg !101

593:                                              ; preds = %491
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %594 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %554, <2 x i32> <i32 0, i32 2>, !dbg !139
  %595 = fcmp olt <2 x float> %594, %554, !dbg !139
  %596 = fcmp uno <2 x float> %594, %554, !dbg !139
  %shift = shufflevector <2 x i1> %595, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !140
  %597 = or <2 x i1> %shift, %596, !dbg !140
  %598 = extractelement <2 x i1> %597, i64 0, !dbg !140
  %599 = extractelement <2 x float> %554, i64 0, !dbg !141
  %600 = extractelement <2 x float> %554, i64 1, !dbg !141
  %601 = select i1 %598, float %599, float %600, !dbg !141
  %602 = fcmp olt float %601, %582, !dbg !139
  %603 = fcmp uno float %601, 0.000000e+00, !dbg !142
  %604 = or i1 %602, %603, !dbg !140
  %605 = select i1 %604, float %601, float %582, !dbg !141
  %606 = fcmp olt float %605, %583, !dbg !139
  %607 = fcmp uno float %605, 0.000000e+00, !dbg !142
  %608 = or i1 %606, %607, !dbg !140
  %609 = select i1 %608, float %605, float %583, !dbg !141
  %610 = bitcast float %609 to i32, !dbg !137
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 16, i32 31), !dbg !137
  %612 = bitcast i32 %611 to float, !dbg !137
  %613 = fcmp olt float %609, %612, !dbg !139
  %614 = fcmp uno float %609, 0.000000e+00, !dbg !142
  %615 = or i1 %614, %613, !dbg !140
  %616 = select i1 %615, float %609, float %612, !dbg !141
  %617 = bitcast float %616 to i32, !dbg !137
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 8, i32 31), !dbg !137
  %619 = bitcast i32 %618 to float, !dbg !137
  %620 = fcmp olt float %616, %619, !dbg !139
  %621 = fcmp uno float %616, 0.000000e+00, !dbg !142
  %622 = or i1 %620, %621, !dbg !140
  %623 = select i1 %622, float %616, float %619, !dbg !141
  %624 = bitcast float %623 to i32, !dbg !137
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 4, i32 31), !dbg !137
  %626 = bitcast i32 %625 to float, !dbg !137
  %627 = fcmp olt float %623, %626, !dbg !139
  %628 = fcmp uno float %623, 0.000000e+00, !dbg !142
  %629 = or i1 %627, %628, !dbg !140
  %630 = select i1 %629, float %623, float %626, !dbg !141
  %631 = bitcast float %630 to i32, !dbg !137
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !137
  %633 = bitcast i32 %632 to float, !dbg !137
  %634 = fcmp olt float %630, %633, !dbg !139
  %635 = fcmp uno float %630, 0.000000e+00, !dbg !142
  %636 = or i1 %634, %635, !dbg !140
  %637 = select i1 %636, float %630, float %633, !dbg !141
  %638 = bitcast float %637 to i32, !dbg !137
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 1, i32 31), !dbg !137
  %640 = bitcast i32 %639 to float, !dbg !137
  %641 = fcmp olt float %637, %640, !dbg !139
  %642 = fcmp uno float %637, 0.000000e+00, !dbg !142
  %643 = or i1 %641, %642, !dbg !140
  %644 = select i1 %643, i32 %638, i32 %639, !dbg !141
  %645 = insertelement <1 x i32> poison, i32 %644, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %645, i1 %428) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %646 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %438, i1 %437) #5, !dbg !137
  %647 = bitcast i32 %646 to float, !dbg !137
  %648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 1, i32 31), !dbg !137
  %649 = bitcast i32 %648 to float, !dbg !137
  %650 = fcmp olt float %647, %649, !dbg !139
  %651 = fcmp uno float %647, 0.000000e+00, !dbg !142
  %652 = or i1 %651, %650, !dbg !140
  %653 = select i1 %652, i32 %646, i32 %648, !dbg !141
  %654 = insertelement <1 x i32> poison, i32 %653, i64 0, !dbg !137
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %654, i1 %467) #5, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %655 = load float, ptr addrspace(3) %471, align 8, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %656 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !143
  %657 = bitcast float %655 to <1 x i32>, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %657, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %658 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %280, !dbg !143
  %659 = load float, ptr addrspace(3) %658, align 4, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %660 = extractelement <4 x float> %588, i64 0, !dbg !146
  %661 = extractelement <4 x float> %588, i64 1, !dbg !146
  %662 = fcmp ogt float %660, %661, !dbg !146
  %663 = fcmp uno float %660, 0.000000e+00, !dbg !147
  %664 = or i1 %662, %663, !dbg !148
  %665 = select i1 %664, float %660, float %661, !dbg !149
  %666 = extractelement <4 x float> %588, i64 2, !dbg !146
  %667 = fcmp ogt float %665, %666, !dbg !146
  %668 = fcmp uno float %665, 0.000000e+00, !dbg !147
  %669 = or i1 %667, %668, !dbg !148
  %670 = select i1 %669, float %665, float %666, !dbg !149
  %671 = extractelement <4 x float> %588, i64 3, !dbg !146
  %672 = fcmp ogt float %670, %671, !dbg !146
  %673 = fcmp uno float %670, 0.000000e+00, !dbg !147
  %674 = or i1 %672, %673, !dbg !148
  %675 = select i1 %674, float %670, float %671, !dbg !149
  %676 = bitcast float %675 to i32, !dbg !144
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 16, i32 31), !dbg !144
  %678 = bitcast i32 %677 to float, !dbg !144
  %679 = fcmp ogt float %675, %678, !dbg !146
  %680 = fcmp uno float %675, 0.000000e+00, !dbg !147
  %681 = or i1 %680, %679, !dbg !148
  %682 = select i1 %681, float %675, float %678, !dbg !149
  %683 = bitcast float %682 to i32, !dbg !144
  %684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %683, i32 8, i32 31), !dbg !144
  %685 = bitcast i32 %684 to float, !dbg !144
  %686 = fcmp ogt float %682, %685, !dbg !146
  %687 = fcmp uno float %682, 0.000000e+00, !dbg !147
  %688 = or i1 %686, %687, !dbg !148
  %689 = select i1 %688, float %682, float %685, !dbg !149
  %690 = bitcast float %689 to i32, !dbg !144
  %691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %690, i32 4, i32 31), !dbg !144
  %692 = bitcast i32 %691 to float, !dbg !144
  %693 = fcmp ogt float %689, %692, !dbg !146
  %694 = fcmp uno float %689, 0.000000e+00, !dbg !147
  %695 = or i1 %693, %694, !dbg !148
  %696 = select i1 %695, float %689, float %692, !dbg !149
  %697 = bitcast float %696 to i32, !dbg !144
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %697, i32 2, i32 31), !dbg !144
  %699 = bitcast i32 %698 to float, !dbg !144
  %700 = fcmp ogt float %696, %699, !dbg !146
  %701 = fcmp uno float %696, 0.000000e+00, !dbg !147
  %702 = or i1 %700, %701, !dbg !148
  %703 = select i1 %702, float %696, float %699, !dbg !149
  %704 = bitcast float %703 to i32, !dbg !144
  %705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %704, i32 1, i32 31), !dbg !144
  %706 = bitcast i32 %705 to float, !dbg !144
  %707 = fcmp ogt float %703, %706, !dbg !146
  %708 = fcmp uno float %703, 0.000000e+00, !dbg !147
  %709 = or i1 %707, %708, !dbg !148
  %710 = select i1 %709, i32 %704, i32 %705, !dbg !149
  %711 = insertelement <1 x i32> poison, i32 %710, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %711, i1 %428) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %712 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %438, i1 %437) #5, !dbg !144
  %713 = bitcast i32 %712 to float, !dbg !144
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %712, i32 1, i32 31), !dbg !144
  %715 = bitcast i32 %714 to float, !dbg !144
  %716 = fcmp ogt float %713, %715, !dbg !146
  %717 = fcmp uno float %713, 0.000000e+00, !dbg !147
  %718 = or i1 %717, %716, !dbg !148
  %719 = select i1 %718, i32 %712, i32 %714, !dbg !149
  %720 = insertelement <1 x i32> poison, i32 %719, i64 0, !dbg !144
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %720, i1 %467) #5, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %721 = load float, ptr addrspace(3) %471, align 8, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %722 = bitcast float %721 to <1 x i32>, !dbg !150
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %722, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %723 = load float, ptr addrspace(3) %658, align 4, !dbg !150
  %724 = sext i32 %281 to i64, !dbg !151
  %725 = getelementptr bfloat, ptr addrspace(1) %10, i64 %724, !dbg !151
  %726 = fptrunc float %659 to bfloat, !dbg !143
  %727 = and i32 %18, 504, !dbg !143
  %728 = icmp eq i32 %727, 0, !dbg !143
  %729 = bitcast bfloat %726 to i16, !dbg !143
  %730 = and i1 %728, %282, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %729, ptr addrspace(1) %725, i1 %730) #5, !dbg !143
  %731 = getelementptr bfloat, ptr addrspace(1) %11, i64 %724, !dbg !152
  %732 = fptrunc float %723 to bfloat, !dbg !150
  %733 = bitcast bfloat %732 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %733, ptr addrspace(1) %731, i1 %730) #5, !dbg !150
  %.inv4 = fcmp oge float %655, 0.000000e+00, !dbg !153
  %734 = select i1 %.inv4, float 0.000000e+00, float %655, !dbg !153
  %735 = fsub float 0.000000e+00, %734, !dbg !155
  %.inv5 = fcmp ole float %721, 0.000000e+00, !dbg !156
  %736 = select i1 %.inv5, float 0.000000e+00, float %721, !dbg !156
  %737 = fcmp ogt float %735, %736, !dbg !158
  %738 = fcmp uno float %735, 0.000000e+00, !dbg !160
  %739 = or i1 %738, %737, !dbg !161
  %740 = select i1 %739, float %735, float %736, !dbg !162
  %741 = fmul float %740, 0x3F80204080000000, !dbg !163
  %742 = fcmp ogt float %741, 0x3EE4F8B580000000, !dbg !164
  %743 = fcmp uno float %741, 0.000000e+00, !dbg !166
  %744 = or i1 %742, %743, !dbg !167
  %745 = select i1 %744, float %741, float 0x3EE4F8B580000000, !dbg !168
  %746 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %745), !dbg !169
  %747 = or disjoint i32 %39, %25
  br label %748, !dbg !170

748:                                              ; preds = %593, %748
  %indvars.iv47 = phi i64 [ 0, %593 ], [ %indvars.iv.next48, %748 ]
  %749 = trunc nuw nsw i64 %indvars.iv47 to i32, !dbg !171
  %750 = add i32 %747, %749, !dbg !171
  %751 = sext i32 %750 to i64, !dbg !172
  %752 = getelementptr bfloat, ptr addrspace(1) %9, i64 %751, !dbg !172
  %753 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %752, i1 %23) #5, !dbg !173
  %754 = extractvalue { i32, i32 } %753, 0, !dbg !173
  %755 = bitcast i32 %754 to <2 x bfloat>, !dbg !173
  %756 = extractvalue { i32, i32 } %753, 1, !dbg !173
  %757 = bitcast i32 %756 to <2 x bfloat>, !dbg !173
  %758 = extractelement <2 x bfloat> %755, i64 0, !dbg !173
  %759 = extractelement <2 x bfloat> %755, i64 1, !dbg !173
  %760 = extractelement <2 x bfloat> %757, i64 0, !dbg !173
  %761 = extractelement <2 x bfloat> %757, i64 1, !dbg !173
  %762 = fpext bfloat %758 to float, !dbg !174
  %763 = fpext bfloat %759 to float, !dbg !174
  %764 = fpext bfloat %760 to float, !dbg !174
  %765 = fpext bfloat %761 to float, !dbg !174
  %766 = fmul float %746, %762, !dbg !175
  %767 = fmul float %746, %763, !dbg !175
  %768 = fmul float %746, %764, !dbg !175
  %769 = fmul float %746, %765, !dbg !175
  %770 = tail call float @llvm.nvvm.round.f(float %766) #5, !dbg !176
  %771 = tail call float @llvm.nvvm.round.f(float %767) #5, !dbg !176
  %772 = tail call float @llvm.nvvm.round.f(float %768) #5, !dbg !176
  %773 = tail call float @llvm.nvvm.round.f(float %769) #5, !dbg !176
  %774 = insertelement <4 x float> poison, float %770, i64 0, !dbg !177
  %775 = insertelement <4 x float> %774, float %771, i64 1, !dbg !177
  %776 = insertelement <4 x float> %775, float %772, i64 2, !dbg !177
  %777 = insertelement <4 x float> %776, float %773, i64 3, !dbg !177
  %778 = fcmp ogt <4 x float> %777, splat (float -1.270000e+02), !dbg !177
  %779 = fcmp uno <4 x float> %777, zeroinitializer, !dbg !179
  %780 = or <4 x i1> %778, %779, !dbg !180
  %781 = select <4 x i1> %780, <4 x float> %777, <4 x float> splat (float -1.270000e+02), !dbg !181
  %782 = fcmp olt <4 x float> %781, splat (float 1.270000e+02), !dbg !182
  %783 = fcmp uno <4 x float> %781, zeroinitializer, !dbg !184
  %784 = or <4 x i1> %782, %783, !dbg !185
  %785 = fptosi <4 x float> %781 to <4 x i8>, !dbg !186
  %786 = select <4 x i1> %784, <4 x i8> %785, <4 x i8> splat (i8 127), !dbg !187
  %787 = getelementptr i8, ptr addrspace(1) %12, i64 %751, !dbg !188
  %788 = bitcast <4 x i8> %786 to i32, !dbg !189
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %788, ptr addrspace(1) %787, i1 %23) #5, !dbg !189
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 256, !dbg !170
  %789 = icmp samesign ult i64 %indvars.iv47, 2816, !dbg !170
  br i1 %789, label %748, label %790, !dbg !170

790:                                              ; preds = %748
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 60, column: 23, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 41, column: 41, scope: !6)
!45 = !DILocation(line: 41, column: 34, scope: !6)
!46 = !DILocation(line: 41, column: 48, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 48, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 43, column: 51, scope: !6)
!51 = !DILocation(line: 44, column: 35, scope: !6)
!52 = !DILocation(line: 44, column: 42, scope: !6)
!53 = !DILocation(line: 45, column: 35, scope: !6)
!54 = !DILocation(line: 45, column: 42, scope: !6)
!55 = !DILocation(line: 40, column: 113, scope: !6)
!56 = !DILocation(line: 42, column: 101, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 61, column: 24, scope: !6)
!62 = !DILocation(line: 62, column: 24, scope: !6)
!63 = !DILocation(line: 63, column: 23, scope: !6)
!64 = !DILocation(line: 64, column: 23, scope: !6)
!65 = !DILocation(line: 72, column: 68, scope: !6)
!66 = !DILocation(line: 73, column: 29, scope: !6)
!67 = !DILocation(line: 73, column: 53, scope: !6)
!68 = !DILocation(line: 35, column: 31, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 68, column: 55, scope: !6)
!71 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !70)
!72 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !70)
!73 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !70)
!74 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !70)
!75 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !70)
!76 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !70)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = distinct !{!78, !79}
!79 = !{!"llvm.loop.peeled.count", i32 1}
!80 = !DILocation(line: 217, column: 21, scope: !81, inlinedAt: !82)
!81 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 218, column: 28, scope: !81, inlinedAt: !82)
!84 = !DILocation(line: 219, column: 39, scope: !81, inlinedAt: !82)
!85 = !DILocation(line: 219, column: 60, scope: !81, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 49, scope: !81, inlinedAt: !82)
!87 = !DILocation(line: 221, column: 25, scope: !81, inlinedAt: !82)
!88 = !DILocation(line: 221, column: 17, scope: !81, inlinedAt: !82)
!89 = !DILocation(line: 222, column: 30, scope: !81, inlinedAt: !82)
!90 = !DILocation(line: 222, column: 38, scope: !81, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 49, scope: !81, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 22, scope: !81, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 15, scope: !81, inlinedAt: !82)
!94 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 43, scope: !6)
!107 = !DILocation(line: 87, column: 35, scope: !6)
!108 = !DILocation(line: 87, column: 50, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 50, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 89, column: 49, scope: !6)
!114 = !DILocation(line: 90, column: 35, scope: !6)
!115 = !DILocation(line: 90, column: 49, scope: !6)
!116 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !117)
!117 = !DILocation(line: 109, column: 47, scope: !6)
!118 = !DILocation(line: 86, column: 115, scope: !6)
!119 = !DILocation(line: 88, column: 103, scope: !6)
!120 = !DILocation(line: 90, column: 102, scope: !6)
!121 = !DILocation(line: 101, column: 24, scope: !6)
!122 = !DILocation(line: 103, column: 24, scope: !6)
!123 = !DILocation(line: 104, column: 24, scope: !6)
!124 = !DILocation(line: 106, column: 24, scope: !6)
!125 = !DILocation(line: 107, column: 24, scope: !6)
!126 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !117)
!127 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !117)
!128 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !117)
!129 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !130)
!130 = !DILocation(line: 111, column: 47, scope: !6)
!131 = !DILocation(line: 113, column: 29, scope: !6)
!132 = !DILocation(line: 113, column: 53, scope: !6)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !130)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !130)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !130)
!136 = !DILocation(line: 112, column: 50, scope: !6)
!137 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 94, column: 15, scope: !81, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 16, scope: !81, inlinedAt: !138)
!141 = !DILocation(line: 97, column: 29, scope: !81, inlinedAt: !138)
!142 = !DILocation(line: 96, column: 21, scope: !81, inlinedAt: !138)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !145)
!145 = !DILocation(line: 115, column: 40, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !81, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 21, scope: !81, inlinedAt: !145)
!148 = !DILocation(line: 104, column: 16, scope: !81, inlinedAt: !145)
!149 = !DILocation(line: 105, column: 29, scope: !81, inlinedAt: !145)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 140, column: 24, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
