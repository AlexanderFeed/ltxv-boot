; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 3, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = lshr i32 %15, 6, !dbg !11
  %17 = and i32 %16, 7, !dbg !11
  %18 = and i32 %15, 31, !dbg !11
  %.lobit35 = lshr i32 %15, 7, !dbg !11
  %19 = and i32 %.lobit35, 3, !dbg !11
  %20 = or disjoint i32 %17, %14, !dbg !12
  %21 = or disjoint i32 %19, %14, !dbg !12
  %22 = or disjoint i32 %21, 4, !dbg !12
  %23 = icmp slt i32 %20, 512, !dbg !13
  %24 = icmp slt i32 %21, 512, !dbg !13
  %25 = icmp slt i32 %22, 512, !dbg !13
  %26 = icmp slt i32 %14, 512, !dbg !13
  %27 = shl i32 %15, 3, !dbg !14
  %28 = and i32 %27, 504, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = shl i32 %15, 2, !dbg !14
  %31 = and i32 %30, 508, !dbg !14
  %32 = and i32 %15, 511, !dbg !14
  %33 = sext i32 %20 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %23) #5, !dbg !16
  %43 = bitcast i16 %42 to bfloat, !dbg !16
  %44 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !17
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %23) #5, !dbg !18
  %53 = bitcast i16 %52 to bfloat, !dbg !18
  %54 = mul i32 %20, 12288, !dbg !19
  %55 = mul i32 %21, 12288, !dbg !19
  %56 = mul i32 %22, 12288, !dbg !19
  %.inv = fcmp oge bfloat %43, 0xR0000, !dbg !20
  %57 = select i1 %.inv, bfloat 0xR0000, bfloat %43, !dbg !20
  %58 = fpext bfloat %57 to float, !dbg !20
  %59 = fsub float 0.000000e+00, %58, !dbg !24
  %.inv6 = fcmp ole bfloat %53, 0xR0000, !dbg !25
  %60 = select i1 %.inv6, bfloat 0xR0000, bfloat %53, !dbg !25
  %61 = fpext bfloat %60 to float, !dbg !25
  %62 = fcmp ogt float %59, %61, !dbg !27
  %63 = fcmp uno float %59, 0.000000e+00, !dbg !29
  %64 = or i1 %63, %62, !dbg !30
  %65 = select i1 %64, float %59, float %61, !dbg !31
  %66 = fmul float %65, 0x3F80204080000000, !dbg !32
  %67 = fcmp ogt float %66, 0x3EE4F8B580000000, !dbg !33
  %68 = fcmp uno float %66, 0.000000e+00, !dbg !35
  %69 = or i1 %67, %68, !dbg !36
  %70 = select i1 %69, float %66, float 0x3EE4F8B580000000, !dbg !37
  %71 = or disjoint i32 %54, %28
  %72 = or disjoint i32 %54, %29
  %73 = shl i32 %15, 6
  %74 = and i32 %73, 4032
  %75 = or disjoint i32 %74, %17
  %76 = and i32 %27, 4088
  %77 = lshr exact i32 %74, 1
  %78 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %77
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %75
  %80 = or disjoint i32 %75, 8
  %81 = lshr i32 %80, 3
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80
  %84 = or disjoint i32 %75, 16
  %85 = lshr i32 %84, 3
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84
  %88 = or disjoint i32 %75, 24
  %89 = lshr i32 %88, 3
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88
  %92 = or disjoint i32 %75, 32
  %93 = lshr i32 %92, 3
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92
  %96 = or disjoint i32 %75, 40
  %97 = lshr i32 %96, 3
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96
  %100 = or disjoint i32 %75, 48
  %101 = lshr i32 %100, 3
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100
  %104 = or disjoint i32 %75, 56
  %105 = lshr i32 %104, 3
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104
  %108 = lshr exact i32 %76, 1
  %109 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %108
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) %109, i32 %76
  %111 = and i32 %30, 2044
  %112 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %112, i32 2064
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %112, i32 4128
  %115 = getelementptr inbounds nuw i8, ptr addrspace(3) %112, i32 6192
  %116 = lshr i32 %30, 7
  %117 = and i32 %116, 12
  %118 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %117
  %119 = getelementptr inbounds nuw float, ptr addrspace(3) %118, i32 %111
  %120 = zext nneg i32 %32 to i64, !dbg !38
  %121 = insertelement <16 x i1> poison, i1 %26, i64 0, !dbg !39
  %122 = shufflevector <16 x i1> %121, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !39
  br label %123, !dbg !38

123:                                              ; preds = %12, %__nv_tanhf.exit321
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit321 ]
  %124 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %517, %__nv_tanhf.exit321 ]
  %125 = or disjoint i64 %indvars.iv, %120, !dbg !40
  %126 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %127 = add i32 %71, %126, !dbg !41
  %128 = add i32 %72, %126, !dbg !41
  %129 = trunc i64 %indvars.iv to i32, !dbg !41
  %130 = or disjoint i32 %31, %129, !dbg !41
  %131 = add i32 %130, %55, !dbg !41
  %132 = add i32 %130, %56, !dbg !41
  %133 = sext i32 %127 to i64, !dbg !42
  %134 = getelementptr i32, ptr addrspace(1) %0, i64 %133, !dbg !42
  %135 = sext i32 %128 to i64, !dbg !42
  %136 = getelementptr i32, ptr addrspace(1) %0, i64 %135, !dbg !42
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %23) #5, !dbg !43
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !43
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !43
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !43
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !43
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %23) #5, !dbg !43
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !43
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !43
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !43
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !43
  %147 = getelementptr bfloat, ptr addrspace(1) %3, i64 %125, !dbg !44
  %148 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %147, i1 true) #5, !dbg !45
  %149 = bitcast i16 %148 to bfloat, !dbg !45
  %150 = fpext bfloat %149 to float, !dbg !46
  %151 = getelementptr bfloat, ptr addrspace(1) %4, i64 %125, !dbg !47
  %152 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %151, i1 true) #5, !dbg !48
  %153 = bitcast i16 %152 to bfloat, !dbg !48
  %154 = fpext bfloat %153 to float, !dbg !49
  %155 = sitofp i32 %138 to float, !dbg !50
  %156 = sitofp i32 %139 to float, !dbg !50
  %157 = sitofp i32 %140 to float, !dbg !50
  %158 = sitofp i32 %141 to float, !dbg !50
  %159 = sitofp i32 %143 to float, !dbg !50
  %160 = sitofp i32 %144 to float, !dbg !50
  %161 = sitofp i32 %145 to float, !dbg !50
  %162 = sitofp i32 %146 to float, !dbg !50
  %163 = fmul float %70, %155, !dbg !51
  %164 = fmul float %70, %156, !dbg !51
  %165 = fmul float %70, %157, !dbg !51
  %166 = fmul float %70, %158, !dbg !51
  %167 = fmul float %70, %159, !dbg !51
  %168 = fmul float %70, %160, !dbg !51
  %169 = fmul float %70, %161, !dbg !51
  %170 = fmul float %70, %162, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %171 = bitcast float %163 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %171, i1 true) #5, !dbg !51
  %172 = bitcast float %164 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %172, i1 true) #5, !dbg !51
  %173 = bitcast float %165 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %173, i1 true) #5, !dbg !51
  %174 = bitcast float %166 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %174, i1 true) #5, !dbg !51
  %175 = bitcast float %167 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %175, i1 true) #5, !dbg !51
  %176 = bitcast float %168 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %176, i1 true) #5, !dbg !51
  %177 = bitcast float %169 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %177, i1 true) #5, !dbg !51
  %178 = bitcast float %170 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %178, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %179 = load <8 x float>, ptr addrspace(3) %110, align 4, !dbg !51
  %180 = insertelement <8 x float> poison, float %150, i64 0, !dbg !52
  %181 = shufflevector <8 x float> %180, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !52
  %182 = fmul <8 x float> %179, %181, !dbg !52
  %183 = insertelement <8 x float> poison, float %154, i64 0, !dbg !53
  %184 = shufflevector <8 x float> %183, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !53
  %185 = fadd <8 x float> %182, %184, !dbg !53
  %186 = fmul <8 x float> %185, splat (float 5.000000e-01), !dbg !54
  %187 = extractelement <8 x float> %185, i64 0, !dbg !55
  %188 = fmul float %187, %187, !dbg !56
  %189 = extractelement <8 x float> %185, i64 1, !dbg !55
  %190 = fmul float %189, %189, !dbg !56
  %191 = extractelement <8 x float> %185, i64 2, !dbg !55
  %192 = fmul float %191, %191, !dbg !56
  %193 = extractelement <8 x float> %185, i64 3, !dbg !55
  %194 = fmul float %193, %193, !dbg !56
  %195 = extractelement <8 x float> %185, i64 4, !dbg !55
  %196 = fmul float %195, %195, !dbg !56
  %197 = extractelement <8 x float> %185, i64 5, !dbg !55
  %198 = fmul float %197, %197, !dbg !56
  %199 = extractelement <8 x float> %185, i64 6, !dbg !55
  %200 = fmul float %199, %199, !dbg !56
  %201 = extractelement <8 x float> %185, i64 7, !dbg !55
  %202 = fmul float %201, %201, !dbg !56
  %203 = fmul float %187, %188, !dbg !57
  %204 = fmul float %189, %190, !dbg !57
  %205 = fmul float %191, %192, !dbg !57
  %206 = fmul float %193, %194, !dbg !57
  %207 = fmul float %195, %196, !dbg !57
  %208 = fmul float %197, %198, !dbg !57
  %209 = fmul float %199, %200, !dbg !57
  %210 = fmul float %201, %202, !dbg !57
  %211 = fmul float %203, 0x3FA6E4E260000000, !dbg !58
  %212 = fmul float %204, 0x3FA6E4E260000000, !dbg !58
  %213 = fmul float %205, 0x3FA6E4E260000000, !dbg !58
  %214 = fmul float %206, 0x3FA6E4E260000000, !dbg !58
  %215 = fmul float %207, 0x3FA6E4E260000000, !dbg !58
  %216 = fmul float %208, 0x3FA6E4E260000000, !dbg !58
  %217 = fmul float %209, 0x3FA6E4E260000000, !dbg !58
  %218 = fmul float %210, 0x3FA6E4E260000000, !dbg !58
  %219 = fadd float %187, %211, !dbg !55
  %220 = fadd float %189, %212, !dbg !55
  %221 = fadd float %191, %213, !dbg !55
  %222 = fadd float %193, %214, !dbg !55
  %223 = fadd float %195, %215, !dbg !55
  %224 = fadd float %197, %216, !dbg !55
  %225 = fadd float %199, %217, !dbg !55
  %226 = fadd float %201, %218, !dbg !55
  %227 = fmul float %219, 0x3FE9884540000000, !dbg !59
  %228 = fmul float %220, 0x3FE9884540000000, !dbg !59
  %229 = fmul float %221, 0x3FE9884540000000, !dbg !59
  %230 = fmul float %222, 0x3FE9884540000000, !dbg !59
  %231 = fmul float %223, 0x3FE9884540000000, !dbg !59
  %232 = fmul float %224, 0x3FE9884540000000, !dbg !59
  %233 = fmul float %225, 0x3FE9884540000000, !dbg !59
  %234 = fmul float %226, 0x3FE9884540000000, !dbg !59
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i170 = icmp eq i32 %235, 0, !dbg !60
  %236 = tail call float @llvm.nvvm.fabs.ftz.f(float %227) #5, !dbg !60
  %237 = tail call float @llvm.nvvm.fabs.f(float %227) #5, !dbg !60
  %.01.i171 = select i1 %.not.i170, float %237, float %236, !dbg !60
  %238 = fcmp ult float %.01.i171, 0x3FE3333340000000, !dbg !60
  br i1 %238, label %__internal_fmad.exit3.i177, label %__internal_fmad.exit1.i172, !dbg !60

__internal_fmad.exit1.i172:                       ; preds = %123
  %239 = fmul float %.01.i171, 0x4007154760000000, !dbg !60
  %240 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %239) #5, !dbg !60
  %241 = fadd float %240, 1.000000e+00, !dbg !60
  %242 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %241) #6, !dbg !60, !srcloc !61
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i173 = icmp eq i32 %243, 0, !dbg !60
  %244 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %242, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %245 = tail call float @llvm.nvvm.fma.rn.f(float %242, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i174 = select i1 %.not6.i173, float %245, float %244, !dbg !60
  %246 = fcmp oge float %.01.i171, 0x4022059680000000, !dbg !60
  %s.0.i175 = select i1 %246, float 1.000000e+00, float %.03.i174, !dbg !60
  %247 = bitcast float %s.0.i175 to i32, !dbg !60
  %248 = bitcast float %227 to i32, !dbg !60
  %249 = and i32 %248, -2147483648, !dbg !60
  %250 = or i32 %249, %247, !dbg !60
  %251 = bitcast i32 %250 to float, !dbg !60
  br label %__nv_tanhf.exit188, !dbg !60

__internal_fmad.exit3.i177:                       ; preds = %123
  %252 = fmul float %227, %227, !dbg !60
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i178 = icmp eq i32 %253, 0, !dbg !60
  %254 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %252, float 0xBFAAC795C0000000) #5, !dbg !60
  %255 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %252, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i179 = select i1 %.not1.i178, float %255, float %254, !dbg !60
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i180 = icmp eq i32 %256, 0, !dbg !60
  %257 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i179, float %252, float 0x3FC10B2820000000) #5, !dbg !60
  %258 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i179, float %252, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i181 = select i1 %.not2.i180, float %258, float %257, !dbg !60
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i182 = icmp eq i32 %259, 0, !dbg !60
  %260 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i181, float %252, float 0xBFD5553DA0000000) #5, !dbg !60
  %261 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i181, float %252, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i183 = select i1 %.not3.i182, float %261, float %260, !dbg !60
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i184 = icmp eq i32 %262, 0, !dbg !60
  %263 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i183, float %252, float 0.000000e+00) #5, !dbg !60
  %264 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i183, float %252, float 0.000000e+00) #5, !dbg !60
  %.04.i185 = select i1 %.not4.i184, float %264, float %263, !dbg !60
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i186 = icmp eq i32 %265, 0, !dbg !60
  %266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i185, float %227, float %227) #5, !dbg !60
  %267 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i185, float %227, float %227) #5, !dbg !60
  %.02.i187 = select i1 %.not5.i186, float %267, float %266, !dbg !60
  br label %__nv_tanhf.exit188, !dbg !60

__nv_tanhf.exit188:                               ; preds = %__internal_fmad.exit1.i172, %__internal_fmad.exit3.i177
  %s.1.i176 = phi float [ %251, %__internal_fmad.exit1.i172 ], [ %.02.i187, %__internal_fmad.exit3.i177 ], !dbg !60
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i189 = icmp eq i32 %268, 0, !dbg !60
  %269 = tail call float @llvm.nvvm.fabs.ftz.f(float %228) #5, !dbg !60
  %270 = tail call float @llvm.nvvm.fabs.f(float %228) #5, !dbg !60
  %.01.i190 = select i1 %.not.i189, float %270, float %269, !dbg !60
  %271 = fcmp ult float %.01.i190, 0x3FE3333340000000, !dbg !60
  br i1 %271, label %__internal_fmad.exit3.i196, label %__internal_fmad.exit1.i191, !dbg !60

__internal_fmad.exit1.i191:                       ; preds = %__nv_tanhf.exit188
  %272 = fmul float %.01.i190, 0x4007154760000000, !dbg !60
  %273 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %272) #5, !dbg !60
  %274 = fadd float %273, 1.000000e+00, !dbg !60
  %275 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %274) #6, !dbg !60, !srcloc !61
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i192 = icmp eq i32 %276, 0, !dbg !60
  %277 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %275, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %278 = tail call float @llvm.nvvm.fma.rn.f(float %275, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i193 = select i1 %.not6.i192, float %278, float %277, !dbg !60
  %279 = fcmp oge float %.01.i190, 0x4022059680000000, !dbg !60
  %s.0.i194 = select i1 %279, float 1.000000e+00, float %.03.i193, !dbg !60
  %280 = bitcast float %s.0.i194 to i32, !dbg !60
  %281 = bitcast float %228 to i32, !dbg !60
  %282 = and i32 %281, -2147483648, !dbg !60
  %283 = or i32 %282, %280, !dbg !60
  %284 = bitcast i32 %283 to float, !dbg !60
  br label %__nv_tanhf.exit207, !dbg !60

__internal_fmad.exit3.i196:                       ; preds = %__nv_tanhf.exit188
  %285 = fmul float %228, %228, !dbg !60
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i197 = icmp eq i32 %286, 0, !dbg !60
  %287 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %285, float 0xBFAAC795C0000000) #5, !dbg !60
  %288 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %285, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i198 = select i1 %.not1.i197, float %288, float %287, !dbg !60
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i199 = icmp eq i32 %289, 0, !dbg !60
  %290 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i198, float %285, float 0x3FC10B2820000000) #5, !dbg !60
  %291 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i198, float %285, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i200 = select i1 %.not2.i199, float %291, float %290, !dbg !60
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i201 = icmp eq i32 %292, 0, !dbg !60
  %293 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i200, float %285, float 0xBFD5553DA0000000) #5, !dbg !60
  %294 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i200, float %285, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i202 = select i1 %.not3.i201, float %294, float %293, !dbg !60
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i203 = icmp eq i32 %295, 0, !dbg !60
  %296 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i202, float %285, float 0.000000e+00) #5, !dbg !60
  %297 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i202, float %285, float 0.000000e+00) #5, !dbg !60
  %.04.i204 = select i1 %.not4.i203, float %297, float %296, !dbg !60
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i205 = icmp eq i32 %298, 0, !dbg !60
  %299 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i204, float %228, float %228) #5, !dbg !60
  %300 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i204, float %228, float %228) #5, !dbg !60
  %.02.i206 = select i1 %.not5.i205, float %300, float %299, !dbg !60
  br label %__nv_tanhf.exit207, !dbg !60

__nv_tanhf.exit207:                               ; preds = %__internal_fmad.exit1.i191, %__internal_fmad.exit3.i196
  %s.1.i195 = phi float [ %284, %__internal_fmad.exit1.i191 ], [ %.02.i206, %__internal_fmad.exit3.i196 ], !dbg !60
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i208 = icmp eq i32 %301, 0, !dbg !60
  %302 = tail call float @llvm.nvvm.fabs.ftz.f(float %229) #5, !dbg !60
  %303 = tail call float @llvm.nvvm.fabs.f(float %229) #5, !dbg !60
  %.01.i209 = select i1 %.not.i208, float %303, float %302, !dbg !60
  %304 = fcmp ult float %.01.i209, 0x3FE3333340000000, !dbg !60
  br i1 %304, label %__internal_fmad.exit3.i215, label %__internal_fmad.exit1.i210, !dbg !60

__internal_fmad.exit1.i210:                       ; preds = %__nv_tanhf.exit207
  %305 = fmul float %.01.i209, 0x4007154760000000, !dbg !60
  %306 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %305) #5, !dbg !60
  %307 = fadd float %306, 1.000000e+00, !dbg !60
  %308 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %307) #6, !dbg !60, !srcloc !61
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i211 = icmp eq i32 %309, 0, !dbg !60
  %310 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %308, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %311 = tail call float @llvm.nvvm.fma.rn.f(float %308, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i212 = select i1 %.not6.i211, float %311, float %310, !dbg !60
  %312 = fcmp oge float %.01.i209, 0x4022059680000000, !dbg !60
  %s.0.i213 = select i1 %312, float 1.000000e+00, float %.03.i212, !dbg !60
  %313 = bitcast float %s.0.i213 to i32, !dbg !60
  %314 = bitcast float %229 to i32, !dbg !60
  %315 = and i32 %314, -2147483648, !dbg !60
  %316 = or i32 %315, %313, !dbg !60
  %317 = bitcast i32 %316 to float, !dbg !60
  br label %__nv_tanhf.exit226, !dbg !60

__internal_fmad.exit3.i215:                       ; preds = %__nv_tanhf.exit207
  %318 = fmul float %229, %229, !dbg !60
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i216 = icmp eq i32 %319, 0, !dbg !60
  %320 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %318, float 0xBFAAC795C0000000) #5, !dbg !60
  %321 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %318, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i217 = select i1 %.not1.i216, float %321, float %320, !dbg !60
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i218 = icmp eq i32 %322, 0, !dbg !60
  %323 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i217, float %318, float 0x3FC10B2820000000) #5, !dbg !60
  %324 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i217, float %318, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i219 = select i1 %.not2.i218, float %324, float %323, !dbg !60
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i220 = icmp eq i32 %325, 0, !dbg !60
  %326 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i219, float %318, float 0xBFD5553DA0000000) #5, !dbg !60
  %327 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i219, float %318, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i221 = select i1 %.not3.i220, float %327, float %326, !dbg !60
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i222 = icmp eq i32 %328, 0, !dbg !60
  %329 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i221, float %318, float 0.000000e+00) #5, !dbg !60
  %330 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i221, float %318, float 0.000000e+00) #5, !dbg !60
  %.04.i223 = select i1 %.not4.i222, float %330, float %329, !dbg !60
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i224 = icmp eq i32 %331, 0, !dbg !60
  %332 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i223, float %229, float %229) #5, !dbg !60
  %333 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i223, float %229, float %229) #5, !dbg !60
  %.02.i225 = select i1 %.not5.i224, float %333, float %332, !dbg !60
  br label %__nv_tanhf.exit226, !dbg !60

__nv_tanhf.exit226:                               ; preds = %__internal_fmad.exit1.i210, %__internal_fmad.exit3.i215
  %s.1.i214 = phi float [ %317, %__internal_fmad.exit1.i210 ], [ %.02.i225, %__internal_fmad.exit3.i215 ], !dbg !60
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i227 = icmp eq i32 %334, 0, !dbg !60
  %335 = tail call float @llvm.nvvm.fabs.ftz.f(float %230) #5, !dbg !60
  %336 = tail call float @llvm.nvvm.fabs.f(float %230) #5, !dbg !60
  %.01.i228 = select i1 %.not.i227, float %336, float %335, !dbg !60
  %337 = fcmp ult float %.01.i228, 0x3FE3333340000000, !dbg !60
  br i1 %337, label %__internal_fmad.exit3.i234, label %__internal_fmad.exit1.i229, !dbg !60

__internal_fmad.exit1.i229:                       ; preds = %__nv_tanhf.exit226
  %338 = fmul float %.01.i228, 0x4007154760000000, !dbg !60
  %339 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %338) #5, !dbg !60
  %340 = fadd float %339, 1.000000e+00, !dbg !60
  %341 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %340) #6, !dbg !60, !srcloc !61
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i230 = icmp eq i32 %342, 0, !dbg !60
  %343 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %341, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %344 = tail call float @llvm.nvvm.fma.rn.f(float %341, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i231 = select i1 %.not6.i230, float %344, float %343, !dbg !60
  %345 = fcmp oge float %.01.i228, 0x4022059680000000, !dbg !60
  %s.0.i232 = select i1 %345, float 1.000000e+00, float %.03.i231, !dbg !60
  %346 = bitcast float %s.0.i232 to i32, !dbg !60
  %347 = bitcast float %230 to i32, !dbg !60
  %348 = and i32 %347, -2147483648, !dbg !60
  %349 = or i32 %348, %346, !dbg !60
  %350 = bitcast i32 %349 to float, !dbg !60
  br label %__nv_tanhf.exit245, !dbg !60

__internal_fmad.exit3.i234:                       ; preds = %__nv_tanhf.exit226
  %351 = fmul float %230, %230, !dbg !60
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i235 = icmp eq i32 %352, 0, !dbg !60
  %353 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %351, float 0xBFAAC795C0000000) #5, !dbg !60
  %354 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %351, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i236 = select i1 %.not1.i235, float %354, float %353, !dbg !60
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i237 = icmp eq i32 %355, 0, !dbg !60
  %356 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i236, float %351, float 0x3FC10B2820000000) #5, !dbg !60
  %357 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i236, float %351, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i238 = select i1 %.not2.i237, float %357, float %356, !dbg !60
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i239 = icmp eq i32 %358, 0, !dbg !60
  %359 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i238, float %351, float 0xBFD5553DA0000000) #5, !dbg !60
  %360 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i238, float %351, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i240 = select i1 %.not3.i239, float %360, float %359, !dbg !60
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i241 = icmp eq i32 %361, 0, !dbg !60
  %362 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i240, float %351, float 0.000000e+00) #5, !dbg !60
  %363 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i240, float %351, float 0.000000e+00) #5, !dbg !60
  %.04.i242 = select i1 %.not4.i241, float %363, float %362, !dbg !60
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i243 = icmp eq i32 %364, 0, !dbg !60
  %365 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i242, float %230, float %230) #5, !dbg !60
  %366 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i242, float %230, float %230) #5, !dbg !60
  %.02.i244 = select i1 %.not5.i243, float %366, float %365, !dbg !60
  br label %__nv_tanhf.exit245, !dbg !60

__nv_tanhf.exit245:                               ; preds = %__internal_fmad.exit1.i229, %__internal_fmad.exit3.i234
  %s.1.i233 = phi float [ %350, %__internal_fmad.exit1.i229 ], [ %.02.i244, %__internal_fmad.exit3.i234 ], !dbg !60
  %367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i246 = icmp eq i32 %367, 0, !dbg !60
  %368 = tail call float @llvm.nvvm.fabs.ftz.f(float %231) #5, !dbg !60
  %369 = tail call float @llvm.nvvm.fabs.f(float %231) #5, !dbg !60
  %.01.i247 = select i1 %.not.i246, float %369, float %368, !dbg !60
  %370 = fcmp ult float %.01.i247, 0x3FE3333340000000, !dbg !60
  br i1 %370, label %__internal_fmad.exit3.i253, label %__internal_fmad.exit1.i248, !dbg !60

__internal_fmad.exit1.i248:                       ; preds = %__nv_tanhf.exit245
  %371 = fmul float %.01.i247, 0x4007154760000000, !dbg !60
  %372 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %371) #5, !dbg !60
  %373 = fadd float %372, 1.000000e+00, !dbg !60
  %374 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %373) #6, !dbg !60, !srcloc !61
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i249 = icmp eq i32 %375, 0, !dbg !60
  %376 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %374, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %377 = tail call float @llvm.nvvm.fma.rn.f(float %374, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i250 = select i1 %.not6.i249, float %377, float %376, !dbg !60
  %378 = fcmp oge float %.01.i247, 0x4022059680000000, !dbg !60
  %s.0.i251 = select i1 %378, float 1.000000e+00, float %.03.i250, !dbg !60
  %379 = bitcast float %s.0.i251 to i32, !dbg !60
  %380 = bitcast float %231 to i32, !dbg !60
  %381 = and i32 %380, -2147483648, !dbg !60
  %382 = or i32 %381, %379, !dbg !60
  %383 = bitcast i32 %382 to float, !dbg !60
  br label %__nv_tanhf.exit264, !dbg !60

__internal_fmad.exit3.i253:                       ; preds = %__nv_tanhf.exit245
  %384 = fmul float %231, %231, !dbg !60
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i254 = icmp eq i32 %385, 0, !dbg !60
  %386 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %384, float 0xBFAAC795C0000000) #5, !dbg !60
  %387 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %384, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i255 = select i1 %.not1.i254, float %387, float %386, !dbg !60
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i256 = icmp eq i32 %388, 0, !dbg !60
  %389 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i255, float %384, float 0x3FC10B2820000000) #5, !dbg !60
  %390 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i255, float %384, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i257 = select i1 %.not2.i256, float %390, float %389, !dbg !60
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i258 = icmp eq i32 %391, 0, !dbg !60
  %392 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i257, float %384, float 0xBFD5553DA0000000) #5, !dbg !60
  %393 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i257, float %384, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i259 = select i1 %.not3.i258, float %393, float %392, !dbg !60
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i260 = icmp eq i32 %394, 0, !dbg !60
  %395 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i259, float %384, float 0.000000e+00) #5, !dbg !60
  %396 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i259, float %384, float 0.000000e+00) #5, !dbg !60
  %.04.i261 = select i1 %.not4.i260, float %396, float %395, !dbg !60
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i262 = icmp eq i32 %397, 0, !dbg !60
  %398 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i261, float %231, float %231) #5, !dbg !60
  %399 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i261, float %231, float %231) #5, !dbg !60
  %.02.i263 = select i1 %.not5.i262, float %399, float %398, !dbg !60
  br label %__nv_tanhf.exit264, !dbg !60

__nv_tanhf.exit264:                               ; preds = %__internal_fmad.exit1.i248, %__internal_fmad.exit3.i253
  %s.1.i252 = phi float [ %383, %__internal_fmad.exit1.i248 ], [ %.02.i263, %__internal_fmad.exit3.i253 ], !dbg !60
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i265 = icmp eq i32 %400, 0, !dbg !60
  %401 = tail call float @llvm.nvvm.fabs.ftz.f(float %232) #5, !dbg !60
  %402 = tail call float @llvm.nvvm.fabs.f(float %232) #5, !dbg !60
  %.01.i266 = select i1 %.not.i265, float %402, float %401, !dbg !60
  %403 = fcmp ult float %.01.i266, 0x3FE3333340000000, !dbg !60
  br i1 %403, label %__internal_fmad.exit3.i272, label %__internal_fmad.exit1.i267, !dbg !60

__internal_fmad.exit1.i267:                       ; preds = %__nv_tanhf.exit264
  %404 = fmul float %.01.i266, 0x4007154760000000, !dbg !60
  %405 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %404) #5, !dbg !60
  %406 = fadd float %405, 1.000000e+00, !dbg !60
  %407 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %406) #6, !dbg !60, !srcloc !61
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i268 = icmp eq i32 %408, 0, !dbg !60
  %409 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %407, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %410 = tail call float @llvm.nvvm.fma.rn.f(float %407, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i269 = select i1 %.not6.i268, float %410, float %409, !dbg !60
  %411 = fcmp oge float %.01.i266, 0x4022059680000000, !dbg !60
  %s.0.i270 = select i1 %411, float 1.000000e+00, float %.03.i269, !dbg !60
  %412 = bitcast float %s.0.i270 to i32, !dbg !60
  %413 = bitcast float %232 to i32, !dbg !60
  %414 = and i32 %413, -2147483648, !dbg !60
  %415 = or i32 %414, %412, !dbg !60
  %416 = bitcast i32 %415 to float, !dbg !60
  br label %__nv_tanhf.exit283, !dbg !60

__internal_fmad.exit3.i272:                       ; preds = %__nv_tanhf.exit264
  %417 = fmul float %232, %232, !dbg !60
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i273 = icmp eq i32 %418, 0, !dbg !60
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %417, float 0xBFAAC795C0000000) #5, !dbg !60
  %420 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %417, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i274 = select i1 %.not1.i273, float %420, float %419, !dbg !60
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i275 = icmp eq i32 %421, 0, !dbg !60
  %422 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i274, float %417, float 0x3FC10B2820000000) #5, !dbg !60
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i274, float %417, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i276 = select i1 %.not2.i275, float %423, float %422, !dbg !60
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i277 = icmp eq i32 %424, 0, !dbg !60
  %425 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i276, float %417, float 0xBFD5553DA0000000) #5, !dbg !60
  %426 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i276, float %417, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i278 = select i1 %.not3.i277, float %426, float %425, !dbg !60
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i279 = icmp eq i32 %427, 0, !dbg !60
  %428 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i278, float %417, float 0.000000e+00) #5, !dbg !60
  %429 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i278, float %417, float 0.000000e+00) #5, !dbg !60
  %.04.i280 = select i1 %.not4.i279, float %429, float %428, !dbg !60
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i281 = icmp eq i32 %430, 0, !dbg !60
  %431 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i280, float %232, float %232) #5, !dbg !60
  %432 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i280, float %232, float %232) #5, !dbg !60
  %.02.i282 = select i1 %.not5.i281, float %432, float %431, !dbg !60
  br label %__nv_tanhf.exit283, !dbg !60

__nv_tanhf.exit283:                               ; preds = %__internal_fmad.exit1.i267, %__internal_fmad.exit3.i272
  %s.1.i271 = phi float [ %416, %__internal_fmad.exit1.i267 ], [ %.02.i282, %__internal_fmad.exit3.i272 ], !dbg !60
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i284 = icmp eq i32 %433, 0, !dbg !60
  %434 = tail call float @llvm.nvvm.fabs.ftz.f(float %233) #5, !dbg !60
  %435 = tail call float @llvm.nvvm.fabs.f(float %233) #5, !dbg !60
  %.01.i285 = select i1 %.not.i284, float %435, float %434, !dbg !60
  %436 = fcmp ult float %.01.i285, 0x3FE3333340000000, !dbg !60
  br i1 %436, label %__internal_fmad.exit3.i291, label %__internal_fmad.exit1.i286, !dbg !60

__internal_fmad.exit1.i286:                       ; preds = %__nv_tanhf.exit283
  %437 = fmul float %.01.i285, 0x4007154760000000, !dbg !60
  %438 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %437) #5, !dbg !60
  %439 = fadd float %438, 1.000000e+00, !dbg !60
  %440 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %439) #6, !dbg !60, !srcloc !61
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i287 = icmp eq i32 %441, 0, !dbg !60
  %442 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %440, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %443 = tail call float @llvm.nvvm.fma.rn.f(float %440, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i288 = select i1 %.not6.i287, float %443, float %442, !dbg !60
  %444 = fcmp oge float %.01.i285, 0x4022059680000000, !dbg !60
  %s.0.i289 = select i1 %444, float 1.000000e+00, float %.03.i288, !dbg !60
  %445 = bitcast float %s.0.i289 to i32, !dbg !60
  %446 = bitcast float %233 to i32, !dbg !60
  %447 = and i32 %446, -2147483648, !dbg !60
  %448 = or i32 %447, %445, !dbg !60
  %449 = bitcast i32 %448 to float, !dbg !60
  br label %__nv_tanhf.exit302, !dbg !60

__internal_fmad.exit3.i291:                       ; preds = %__nv_tanhf.exit283
  %450 = fmul float %233, %233, !dbg !60
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i292 = icmp eq i32 %451, 0, !dbg !60
  %452 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %450, float 0xBFAAC795C0000000) #5, !dbg !60
  %453 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %450, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i293 = select i1 %.not1.i292, float %453, float %452, !dbg !60
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i294 = icmp eq i32 %454, 0, !dbg !60
  %455 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i293, float %450, float 0x3FC10B2820000000) #5, !dbg !60
  %456 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i293, float %450, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i295 = select i1 %.not2.i294, float %456, float %455, !dbg !60
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i296 = icmp eq i32 %457, 0, !dbg !60
  %458 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i295, float %450, float 0xBFD5553DA0000000) #5, !dbg !60
  %459 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i295, float %450, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i297 = select i1 %.not3.i296, float %459, float %458, !dbg !60
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i298 = icmp eq i32 %460, 0, !dbg !60
  %461 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i297, float %450, float 0.000000e+00) #5, !dbg !60
  %462 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i297, float %450, float 0.000000e+00) #5, !dbg !60
  %.04.i299 = select i1 %.not4.i298, float %462, float %461, !dbg !60
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i300 = icmp eq i32 %463, 0, !dbg !60
  %464 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i299, float %233, float %233) #5, !dbg !60
  %465 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i299, float %233, float %233) #5, !dbg !60
  %.02.i301 = select i1 %.not5.i300, float %465, float %464, !dbg !60
  br label %__nv_tanhf.exit302, !dbg !60

__nv_tanhf.exit302:                               ; preds = %__internal_fmad.exit1.i286, %__internal_fmad.exit3.i291
  %s.1.i290 = phi float [ %449, %__internal_fmad.exit1.i286 ], [ %.02.i301, %__internal_fmad.exit3.i291 ], !dbg !60
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not.i303 = icmp eq i32 %466, 0, !dbg !60
  %467 = tail call float @llvm.nvvm.fabs.ftz.f(float %234) #5, !dbg !60
  %468 = tail call float @llvm.nvvm.fabs.f(float %234) #5, !dbg !60
  %.01.i304 = select i1 %.not.i303, float %468, float %467, !dbg !60
  %469 = fcmp ult float %.01.i304, 0x3FE3333340000000, !dbg !60
  br i1 %469, label %__internal_fmad.exit3.i310, label %__internal_fmad.exit1.i305, !dbg !60

__internal_fmad.exit1.i305:                       ; preds = %__nv_tanhf.exit302
  %470 = fmul float %.01.i304, 0x4007154760000000, !dbg !60
  %471 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %470) #5, !dbg !60
  %472 = fadd float %471, 1.000000e+00, !dbg !60
  %473 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %472) #6, !dbg !60, !srcloc !61
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not6.i306 = icmp eq i32 %474, 0, !dbg !60
  %475 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %473, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %476 = tail call float @llvm.nvvm.fma.rn.f(float %473, float -2.000000e+00, float 1.000000e+00) #5, !dbg !60
  %.03.i307 = select i1 %.not6.i306, float %476, float %475, !dbg !60
  %477 = fcmp oge float %.01.i304, 0x4022059680000000, !dbg !60
  %s.0.i308 = select i1 %477, float 1.000000e+00, float %.03.i307, !dbg !60
  %478 = bitcast float %s.0.i308 to i32, !dbg !60
  %479 = bitcast float %234 to i32, !dbg !60
  %480 = and i32 %479, -2147483648, !dbg !60
  %481 = or i32 %480, %478, !dbg !60
  %482 = bitcast i32 %481 to float, !dbg !60
  br label %__nv_tanhf.exit321, !dbg !60

__internal_fmad.exit3.i310:                       ; preds = %__nv_tanhf.exit302
  %483 = fmul float %234, %234, !dbg !60
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not1.i311 = icmp eq i32 %484, 0, !dbg !60
  %485 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %483, float 0xBFAAC795C0000000) #5, !dbg !60
  %486 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %483, float 0xBFAAC795C0000000) #5, !dbg !60
  %.06.i312 = select i1 %.not1.i311, float %486, float %485, !dbg !60
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not2.i313 = icmp eq i32 %487, 0, !dbg !60
  %488 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i312, float %483, float 0x3FC10B2820000000) #5, !dbg !60
  %489 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i312, float %483, float 0x3FC10B2820000000) #5, !dbg !60
  %.05.i314 = select i1 %.not2.i313, float %489, float %488, !dbg !60
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not3.i315 = icmp eq i32 %490, 0, !dbg !60
  %491 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i314, float %483, float 0xBFD5553DA0000000) #5, !dbg !60
  %492 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i314, float %483, float 0xBFD5553DA0000000) #5, !dbg !60
  %.0.i316 = select i1 %.not3.i315, float %492, float %491, !dbg !60
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not4.i317 = icmp eq i32 %493, 0, !dbg !60
  %494 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i316, float %483, float 0.000000e+00) #5, !dbg !60
  %495 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i316, float %483, float 0.000000e+00) #5, !dbg !60
  %.04.i318 = select i1 %.not4.i317, float %495, float %494, !dbg !60
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !60
  %.not5.i319 = icmp eq i32 %496, 0, !dbg !60
  %497 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i318, float %234, float %234) #5, !dbg !60
  %498 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i318, float %234, float %234) #5, !dbg !60
  %.02.i320 = select i1 %.not5.i319, float %498, float %497, !dbg !60
  br label %__nv_tanhf.exit321, !dbg !60

__nv_tanhf.exit321:                               ; preds = %__internal_fmad.exit1.i305, %__internal_fmad.exit3.i310
  %s.1.i309 = phi float [ %482, %__internal_fmad.exit1.i305 ], [ %.02.i320, %__internal_fmad.exit3.i310 ], !dbg !60
  %499 = insertelement <8 x float> poison, float %s.1.i309, i64 0, !dbg !62
  %500 = insertelement <8 x float> %499, float %s.1.i290, i64 1, !dbg !62
  %501 = insertelement <8 x float> %500, float %s.1.i271, i64 2, !dbg !62
  %502 = insertelement <8 x float> %501, float %s.1.i252, i64 3, !dbg !62
  %503 = insertelement <8 x float> %502, float %s.1.i233, i64 4, !dbg !62
  %504 = insertelement <8 x float> %503, float %s.1.i214, i64 5, !dbg !62
  %505 = insertelement <8 x float> %504, float %s.1.i195, i64 6, !dbg !62
  %506 = insertelement <8 x float> %505, float %s.1.i176, i64 7, !dbg !62
  %507 = fadd <8 x float> %506, splat (float 1.000000e+00), !dbg !62
  %508 = fcmp uno <16 x float> %124, zeroinitializer, !dbg !63
  %509 = shufflevector <8 x float> %186, <8 x float> poison, <16 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !65
  %510 = shufflevector <8 x float> %507, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !65
  %511 = fmul <16 x float> %509, %510, !dbg !65
  %512 = fcmp ogt <16 x float> %124, %511, !dbg !66
  %513 = fcmp olt <16 x float> %124, %511, !dbg !66
  %514 = shufflevector <16 x i1> %512, <16 x i1> %513, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !66
  %515 = or <16 x i1> %508, %514, !dbg !67
  %516 = select <16 x i1> %515, <16 x float> %124, <16 x float> %511, !dbg !68
  %517 = select <16 x i1> %122, <16 x float> %516, <16 x float> %124, !dbg !39
  %518 = sext i32 %131 to i64, !dbg !69
  %519 = getelementptr float, ptr addrspace(1) %5, i64 %518, !dbg !69
  %520 = sext i32 %132 to i64, !dbg !69
  %521 = getelementptr float, ptr addrspace(1) %5, i64 %520, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %522 = bitcast float %187 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %522, i1 true) #5, !dbg !70
  %523 = bitcast float %189 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %113, <1 x i32> %523, i1 true) #5, !dbg !70
  %524 = bitcast float %191 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %114, <1 x i32> %524, i1 true) #5, !dbg !70
  %525 = bitcast float %193 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %115, <1 x i32> %525, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %526 = load <4 x i32>, ptr addrspace(3) %119, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %527 = bitcast float %195 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %527, i1 true) #5, !dbg !70
  %528 = bitcast float %197 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %113, <1 x i32> %528, i1 true) #5, !dbg !70
  %529 = bitcast float %199 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %114, <1 x i32> %529, i1 true) #5, !dbg !70
  %530 = bitcast float %201 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %115, <1 x i32> %530, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %531 = load <4 x i32>, ptr addrspace(3) %119, align 16, !dbg !70
  %.extract = extractelement <4 x i32> %526, i64 0, !dbg !70
  %.extract30 = extractelement <4 x i32> %526, i64 1, !dbg !70
  %.extract31 = extractelement <4 x i32> %526, i64 2, !dbg !70
  %.extract32 = extractelement <4 x i32> %526, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %519, i1 %24) #5, !dbg !70
  %.extract33 = extractelement <4 x i32> %531, i64 0, !dbg !70
  %.extract34 = extractelement <4 x i32> %531, i64 1, !dbg !70
  %.extract35 = extractelement <4 x i32> %531, i64 2, !dbg !70
  %.extract36 = extractelement <4 x i32> %531, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %521, i1 %25) #5, !dbg !70
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %532 = icmp samesign ult i64 %indvars.iv, 11776, !dbg !38
  br i1 %532, label %123, label %533, !dbg !38

533:                                              ; preds = %__nv_tanhf.exit321
  %534 = lshr i32 %15, 5, !dbg !11
  %535 = and i32 %15, 7, !dbg !11
  %536 = or disjoint i32 %14, %535, !dbg !12
  %537 = icmp slt i32 %536, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %538 = extractelement <16 x float> %517, i64 15, !dbg !71
  %539 = bitcast float %538 to i32, !dbg !71
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 16, i32 31), !dbg !71
  %541 = bitcast i32 %540 to float, !dbg !71
  %542 = fcmp olt float %538, %541, !dbg !73
  %543 = fcmp uno <16 x float> %517, zeroinitializer, !dbg !75
  %544 = extractelement <16 x i1> %543, i64 15, !dbg !77
  %545 = or i1 %544, %542, !dbg !77
  %546 = select i1 %545, float %538, float %541, !dbg !78
  %547 = bitcast float %546 to i32, !dbg !71
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 8, i32 31), !dbg !71
  %549 = bitcast i32 %548 to float, !dbg !71
  %550 = fcmp olt float %546, %549, !dbg !73
  %551 = fcmp uno float %546, 0.000000e+00, !dbg !79
  %552 = or i1 %550, %551, !dbg !77
  %553 = select i1 %552, float %546, float %549, !dbg !78
  %554 = bitcast float %553 to i32, !dbg !71
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 4, i32 31), !dbg !71
  %556 = bitcast i32 %555 to float, !dbg !71
  %557 = fcmp olt float %553, %556, !dbg !73
  %558 = fcmp uno float %553, 0.000000e+00, !dbg !79
  %559 = or i1 %557, %558, !dbg !77
  %560 = select i1 %559, float %553, float %556, !dbg !78
  %561 = bitcast float %560 to i32, !dbg !71
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 2, i32 31), !dbg !71
  %563 = bitcast i32 %562 to float, !dbg !71
  %564 = fcmp olt float %560, %563, !dbg !73
  %565 = fcmp uno float %560, 0.000000e+00, !dbg !79
  %566 = or i1 %564, %565, !dbg !77
  %567 = select i1 %566, float %560, float %563, !dbg !78
  %568 = bitcast float %567 to i32, !dbg !71
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 1, i32 31), !dbg !71
  %570 = bitcast i32 %569 to float, !dbg !71
  %571 = fcmp olt float %567, %570, !dbg !73
  %572 = fcmp uno float %567, 0.000000e+00, !dbg !79
  %573 = or i1 %571, %572, !dbg !77
  %574 = extractelement <16 x float> %517, i64 14, !dbg !71
  %575 = bitcast float %574 to i32, !dbg !71
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 16, i32 31), !dbg !71
  %577 = bitcast i32 %576 to float, !dbg !71
  %578 = fcmp olt float %574, %577, !dbg !73
  %579 = extractelement <16 x i1> %543, i64 14, !dbg !77
  %580 = or i1 %579, %578, !dbg !77
  %581 = select i1 %580, float %574, float %577, !dbg !78
  %582 = bitcast float %581 to i32, !dbg !71
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 8, i32 31), !dbg !71
  %584 = bitcast i32 %583 to float, !dbg !71
  %585 = fcmp olt float %581, %584, !dbg !73
  %586 = fcmp uno float %581, 0.000000e+00, !dbg !79
  %587 = or i1 %585, %586, !dbg !77
  %588 = select i1 %587, float %581, float %584, !dbg !78
  %589 = bitcast float %588 to i32, !dbg !71
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 4, i32 31), !dbg !71
  %591 = bitcast i32 %590 to float, !dbg !71
  %592 = fcmp olt float %588, %591, !dbg !73
  %593 = fcmp uno float %588, 0.000000e+00, !dbg !79
  %594 = or i1 %592, %593, !dbg !77
  %595 = select i1 %594, float %588, float %591, !dbg !78
  %596 = bitcast float %595 to i32, !dbg !71
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 2, i32 31), !dbg !71
  %598 = bitcast i32 %597 to float, !dbg !71
  %599 = fcmp olt float %595, %598, !dbg !73
  %600 = fcmp uno float %595, 0.000000e+00, !dbg !79
  %601 = or i1 %599, %600, !dbg !77
  %602 = select i1 %601, float %595, float %598, !dbg !78
  %603 = bitcast float %602 to i32, !dbg !71
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 1, i32 31), !dbg !71
  %605 = bitcast i32 %604 to float, !dbg !71
  %606 = fcmp olt float %602, %605, !dbg !73
  %607 = fcmp uno float %602, 0.000000e+00, !dbg !79
  %608 = or i1 %606, %607, !dbg !77
  %609 = extractelement <16 x float> %517, i64 13, !dbg !71
  %610 = bitcast float %609 to i32, !dbg !71
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 16, i32 31), !dbg !71
  %612 = bitcast i32 %611 to float, !dbg !71
  %613 = fcmp olt float %609, %612, !dbg !73
  %614 = extractelement <16 x i1> %543, i64 13, !dbg !77
  %615 = or i1 %614, %613, !dbg !77
  %616 = select i1 %615, float %609, float %612, !dbg !78
  %617 = bitcast float %616 to i32, !dbg !71
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 8, i32 31), !dbg !71
  %619 = bitcast i32 %618 to float, !dbg !71
  %620 = fcmp olt float %616, %619, !dbg !73
  %621 = fcmp uno float %616, 0.000000e+00, !dbg !79
  %622 = or i1 %620, %621, !dbg !77
  %623 = select i1 %622, float %616, float %619, !dbg !78
  %624 = bitcast float %623 to i32, !dbg !71
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 4, i32 31), !dbg !71
  %626 = bitcast i32 %625 to float, !dbg !71
  %627 = fcmp olt float %623, %626, !dbg !73
  %628 = fcmp uno float %623, 0.000000e+00, !dbg !79
  %629 = or i1 %627, %628, !dbg !77
  %630 = select i1 %629, float %623, float %626, !dbg !78
  %631 = bitcast float %630 to i32, !dbg !71
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !71
  %633 = bitcast i32 %632 to float, !dbg !71
  %634 = fcmp olt float %630, %633, !dbg !73
  %635 = fcmp uno float %630, 0.000000e+00, !dbg !79
  %636 = or i1 %634, %635, !dbg !77
  %637 = select i1 %636, float %630, float %633, !dbg !78
  %638 = bitcast float %637 to i32, !dbg !71
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 1, i32 31), !dbg !71
  %640 = bitcast i32 %639 to float, !dbg !71
  %641 = fcmp olt float %637, %640, !dbg !73
  %642 = fcmp uno float %637, 0.000000e+00, !dbg !79
  %643 = or i1 %641, %642, !dbg !77
  %644 = extractelement <16 x float> %517, i64 12, !dbg !71
  %645 = bitcast float %644 to i32, !dbg !71
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 16, i32 31), !dbg !71
  %647 = bitcast i32 %646 to float, !dbg !71
  %648 = fcmp olt float %644, %647, !dbg !73
  %649 = extractelement <16 x i1> %543, i64 12, !dbg !77
  %650 = or i1 %649, %648, !dbg !77
  %651 = select i1 %650, float %644, float %647, !dbg !78
  %652 = bitcast float %651 to i32, !dbg !71
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 8, i32 31), !dbg !71
  %654 = bitcast i32 %653 to float, !dbg !71
  %655 = fcmp olt float %651, %654, !dbg !73
  %656 = fcmp uno float %651, 0.000000e+00, !dbg !79
  %657 = or i1 %655, %656, !dbg !77
  %658 = select i1 %657, float %651, float %654, !dbg !78
  %659 = bitcast float %658 to i32, !dbg !71
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 4, i32 31), !dbg !71
  %661 = bitcast i32 %660 to float, !dbg !71
  %662 = fcmp olt float %658, %661, !dbg !73
  %663 = fcmp uno float %658, 0.000000e+00, !dbg !79
  %664 = or i1 %662, %663, !dbg !77
  %665 = select i1 %664, float %658, float %661, !dbg !78
  %666 = bitcast float %665 to i32, !dbg !71
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 2, i32 31), !dbg !71
  %668 = bitcast i32 %667 to float, !dbg !71
  %669 = fcmp olt float %665, %668, !dbg !73
  %670 = fcmp uno float %665, 0.000000e+00, !dbg !79
  %671 = or i1 %669, %670, !dbg !77
  %672 = select i1 %671, float %665, float %668, !dbg !78
  %673 = bitcast float %672 to i32, !dbg !71
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 1, i32 31), !dbg !71
  %675 = bitcast i32 %674 to float, !dbg !71
  %676 = fcmp olt float %672, %675, !dbg !73
  %677 = fcmp uno float %672, 0.000000e+00, !dbg !79
  %678 = or i1 %676, %677, !dbg !77
  %679 = extractelement <16 x float> %517, i64 11, !dbg !71
  %680 = bitcast float %679 to i32, !dbg !71
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 16, i32 31), !dbg !71
  %682 = bitcast i32 %681 to float, !dbg !71
  %683 = fcmp olt float %679, %682, !dbg !73
  %684 = extractelement <16 x i1> %543, i64 11, !dbg !77
  %685 = or i1 %684, %683, !dbg !77
  %686 = select i1 %685, float %679, float %682, !dbg !78
  %687 = bitcast float %686 to i32, !dbg !71
  %688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 8, i32 31), !dbg !71
  %689 = bitcast i32 %688 to float, !dbg !71
  %690 = fcmp olt float %686, %689, !dbg !73
  %691 = fcmp uno float %686, 0.000000e+00, !dbg !79
  %692 = or i1 %690, %691, !dbg !77
  %693 = select i1 %692, float %686, float %689, !dbg !78
  %694 = bitcast float %693 to i32, !dbg !71
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 4, i32 31), !dbg !71
  %696 = bitcast i32 %695 to float, !dbg !71
  %697 = fcmp olt float %693, %696, !dbg !73
  %698 = fcmp uno float %693, 0.000000e+00, !dbg !79
  %699 = or i1 %697, %698, !dbg !77
  %700 = select i1 %699, float %693, float %696, !dbg !78
  %701 = bitcast float %700 to i32, !dbg !71
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 2, i32 31), !dbg !71
  %703 = bitcast i32 %702 to float, !dbg !71
  %704 = fcmp olt float %700, %703, !dbg !73
  %705 = fcmp uno float %700, 0.000000e+00, !dbg !79
  %706 = or i1 %704, %705, !dbg !77
  %707 = select i1 %706, float %700, float %703, !dbg !78
  %708 = bitcast float %707 to i32, !dbg !71
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 1, i32 31), !dbg !71
  %710 = bitcast i32 %709 to float, !dbg !71
  %711 = fcmp olt float %707, %710, !dbg !73
  %712 = fcmp uno float %707, 0.000000e+00, !dbg !79
  %713 = or i1 %711, %712, !dbg !77
  %714 = extractelement <16 x float> %517, i64 10, !dbg !71
  %715 = bitcast float %714 to i32, !dbg !71
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 16, i32 31), !dbg !71
  %717 = bitcast i32 %716 to float, !dbg !71
  %718 = fcmp olt float %714, %717, !dbg !73
  %719 = extractelement <16 x i1> %543, i64 10, !dbg !77
  %720 = or i1 %719, %718, !dbg !77
  %721 = select i1 %720, float %714, float %717, !dbg !78
  %722 = bitcast float %721 to i32, !dbg !71
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 8, i32 31), !dbg !71
  %724 = bitcast i32 %723 to float, !dbg !71
  %725 = fcmp olt float %721, %724, !dbg !73
  %726 = fcmp uno float %721, 0.000000e+00, !dbg !79
  %727 = or i1 %725, %726, !dbg !77
  %728 = select i1 %727, float %721, float %724, !dbg !78
  %729 = bitcast float %728 to i32, !dbg !71
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 4, i32 31), !dbg !71
  %731 = bitcast i32 %730 to float, !dbg !71
  %732 = fcmp olt float %728, %731, !dbg !73
  %733 = fcmp uno float %728, 0.000000e+00, !dbg !79
  %734 = or i1 %732, %733, !dbg !77
  %735 = select i1 %734, float %728, float %731, !dbg !78
  %736 = bitcast float %735 to i32, !dbg !71
  %737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %736, i32 2, i32 31), !dbg !71
  %738 = bitcast i32 %737 to float, !dbg !71
  %739 = fcmp olt float %735, %738, !dbg !73
  %740 = fcmp uno float %735, 0.000000e+00, !dbg !79
  %741 = or i1 %739, %740, !dbg !77
  %742 = select i1 %741, float %735, float %738, !dbg !78
  %743 = bitcast float %742 to i32, !dbg !71
  %744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %743, i32 1, i32 31), !dbg !71
  %745 = bitcast i32 %744 to float, !dbg !71
  %746 = fcmp olt float %742, %745, !dbg !73
  %747 = fcmp uno float %742, 0.000000e+00, !dbg !79
  %748 = or i1 %746, %747, !dbg !77
  %749 = extractelement <16 x float> %517, i64 9, !dbg !71
  %750 = bitcast float %749 to i32, !dbg !71
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %750, i32 16, i32 31), !dbg !71
  %752 = bitcast i32 %751 to float, !dbg !71
  %753 = fcmp olt float %749, %752, !dbg !73
  %754 = extractelement <16 x i1> %543, i64 9, !dbg !77
  %755 = or i1 %754, %753, !dbg !77
  %756 = select i1 %755, float %749, float %752, !dbg !78
  %757 = bitcast float %756 to i32, !dbg !71
  %758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %757, i32 8, i32 31), !dbg !71
  %759 = bitcast i32 %758 to float, !dbg !71
  %760 = fcmp olt float %756, %759, !dbg !73
  %761 = fcmp uno float %756, 0.000000e+00, !dbg !79
  %762 = or i1 %760, %761, !dbg !77
  %763 = select i1 %762, float %756, float %759, !dbg !78
  %764 = bitcast float %763 to i32, !dbg !71
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %764, i32 4, i32 31), !dbg !71
  %766 = bitcast i32 %765 to float, !dbg !71
  %767 = fcmp olt float %763, %766, !dbg !73
  %768 = fcmp uno float %763, 0.000000e+00, !dbg !79
  %769 = or i1 %767, %768, !dbg !77
  %770 = select i1 %769, float %763, float %766, !dbg !78
  %771 = bitcast float %770 to i32, !dbg !71
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 2, i32 31), !dbg !71
  %773 = bitcast i32 %772 to float, !dbg !71
  %774 = fcmp olt float %770, %773, !dbg !73
  %775 = fcmp uno float %770, 0.000000e+00, !dbg !79
  %776 = or i1 %774, %775, !dbg !77
  %777 = select i1 %776, float %770, float %773, !dbg !78
  %778 = bitcast float %777 to i32, !dbg !71
  %779 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %778, i32 1, i32 31), !dbg !71
  %780 = bitcast i32 %779 to float, !dbg !71
  %781 = fcmp olt float %777, %780, !dbg !73
  %782 = fcmp uno float %777, 0.000000e+00, !dbg !79
  %783 = or i1 %781, %782, !dbg !77
  %784 = extractelement <16 x float> %517, i64 8, !dbg !71
  %785 = bitcast float %784 to i32, !dbg !71
  %786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %785, i32 16, i32 31), !dbg !71
  %787 = bitcast i32 %786 to float, !dbg !71
  %788 = fcmp olt float %784, %787, !dbg !73
  %789 = extractelement <16 x i1> %543, i64 8, !dbg !77
  %790 = or i1 %789, %788, !dbg !77
  %791 = select i1 %790, float %784, float %787, !dbg !78
  %792 = bitcast float %791 to i32, !dbg !71
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %792, i32 8, i32 31), !dbg !71
  %794 = bitcast i32 %793 to float, !dbg !71
  %795 = fcmp olt float %791, %794, !dbg !73
  %796 = fcmp uno float %791, 0.000000e+00, !dbg !79
  %797 = or i1 %795, %796, !dbg !77
  %798 = select i1 %797, float %791, float %794, !dbg !78
  %799 = bitcast float %798 to i32, !dbg !71
  %800 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %799, i32 4, i32 31), !dbg !71
  %801 = bitcast i32 %800 to float, !dbg !71
  %802 = fcmp olt float %798, %801, !dbg !73
  %803 = fcmp uno float %798, 0.000000e+00, !dbg !79
  %804 = or i1 %802, %803, !dbg !77
  %805 = select i1 %804, float %798, float %801, !dbg !78
  %806 = bitcast float %805 to i32, !dbg !71
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 2, i32 31), !dbg !71
  %808 = bitcast i32 %807 to float, !dbg !71
  %809 = fcmp olt float %805, %808, !dbg !73
  %810 = fcmp uno float %805, 0.000000e+00, !dbg !79
  %811 = or i1 %809, %810, !dbg !77
  %812 = select i1 %811, float %805, float %808, !dbg !78
  %813 = bitcast float %812 to i32, !dbg !71
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 1, i32 31), !dbg !71
  %815 = bitcast i32 %814 to float, !dbg !71
  %816 = fcmp olt float %812, %815, !dbg !73
  %817 = fcmp uno float %812, 0.000000e+00, !dbg !79
  %818 = or i1 %816, %817, !dbg !77
  %819 = and i32 %534, 15, !dbg !71
  %820 = icmp eq i32 %18, 0, !dbg !71
  %821 = getelementptr float, ptr addrspace(3) @global_smem, i32 %819, !dbg !71
  %822 = select i1 %573, i32 %568, i32 %569, !dbg !78
  %823 = insertelement <1 x i32> poison, i32 %822, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %821, <1 x i32> %823, i1 %820) #5, !dbg !71
  %824 = or disjoint i32 %819, 16, !dbg !71
  %825 = getelementptr float, ptr addrspace(3) @global_smem, i32 %824, !dbg !71
  %826 = select i1 %608, i32 %603, i32 %604, !dbg !78
  %827 = insertelement <1 x i32> poison, i32 %826, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %827, i1 %820) #5, !dbg !71
  %828 = or disjoint i32 %819, 32, !dbg !71
  %829 = getelementptr float, ptr addrspace(3) @global_smem, i32 %828, !dbg !71
  %830 = select i1 %643, i32 %638, i32 %639, !dbg !78
  %831 = insertelement <1 x i32> poison, i32 %830, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %829, <1 x i32> %831, i1 %820) #5, !dbg !71
  %832 = or disjoint i32 %819, 48, !dbg !71
  %833 = getelementptr float, ptr addrspace(3) @global_smem, i32 %832, !dbg !71
  %834 = select i1 %678, i32 %673, i32 %674, !dbg !78
  %835 = insertelement <1 x i32> poison, i32 %834, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %833, <1 x i32> %835, i1 %820) #5, !dbg !71
  %836 = or disjoint i32 %819, 64, !dbg !71
  %837 = getelementptr float, ptr addrspace(3) @global_smem, i32 %836, !dbg !71
  %838 = select i1 %713, i32 %708, i32 %709, !dbg !78
  %839 = insertelement <1 x i32> poison, i32 %838, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %839, i1 %820) #5, !dbg !71
  %840 = or disjoint i32 %819, 80, !dbg !71
  %841 = getelementptr float, ptr addrspace(3) @global_smem, i32 %840, !dbg !71
  %842 = select i1 %748, i32 %743, i32 %744, !dbg !78
  %843 = insertelement <1 x i32> poison, i32 %842, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %843, i1 %820) #5, !dbg !71
  %844 = or disjoint i32 %819, 96, !dbg !71
  %845 = getelementptr float, ptr addrspace(3) @global_smem, i32 %844, !dbg !71
  %846 = select i1 %783, i32 %778, i32 %779, !dbg !78
  %847 = insertelement <1 x i32> poison, i32 %846, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %847, i1 %820) #5, !dbg !71
  %848 = or disjoint i32 %819, 112, !dbg !71
  %849 = getelementptr float, ptr addrspace(3) @global_smem, i32 %848, !dbg !71
  %850 = select i1 %818, i32 %813, i32 %814, !dbg !78
  %851 = insertelement <1 x i32> poison, i32 %850, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %851, i1 %820) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %852 = icmp slt i32 %15, 128, !dbg !71
  %853 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !71
  %854 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %853, i1 %852) #5, !dbg !71
  %855 = bitcast i32 %854 to float, !dbg !71
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %854, i32 8, i32 31), !dbg !71
  %857 = bitcast i32 %856 to float, !dbg !71
  %858 = fcmp olt float %855, %857, !dbg !73
  %859 = fcmp uno float %855, 0.000000e+00, !dbg !79
  %860 = or i1 %859, %858, !dbg !77
  %861 = select i1 %860, float %855, float %857, !dbg !78
  %862 = bitcast float %861 to i32, !dbg !71
  %863 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %862, i32 4, i32 31), !dbg !71
  %864 = bitcast i32 %863 to float, !dbg !71
  %865 = fcmp olt float %861, %864, !dbg !73
  %866 = fcmp uno float %861, 0.000000e+00, !dbg !79
  %867 = or i1 %865, %866, !dbg !77
  %868 = select i1 %867, float %861, float %864, !dbg !78
  %869 = bitcast float %868 to i32, !dbg !71
  %870 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %869, i32 2, i32 31), !dbg !71
  %871 = bitcast i32 %870 to float, !dbg !71
  %872 = fcmp olt float %868, %871, !dbg !73
  %873 = fcmp uno float %868, 0.000000e+00, !dbg !79
  %874 = or i1 %872, %873, !dbg !77
  %875 = select i1 %874, float %868, float %871, !dbg !78
  %876 = bitcast float %875 to i32, !dbg !71
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 1, i32 31), !dbg !71
  %878 = bitcast i32 %877 to float, !dbg !71
  %879 = fcmp olt float %875, %878, !dbg !73
  %880 = fcmp uno float %875, 0.000000e+00, !dbg !79
  %881 = or i1 %879, %880, !dbg !77
  %882 = and i32 %15, 15, !dbg !71
  %883 = icmp eq i32 %882, 0, !dbg !71
  %884 = and i1 %852, %883, !dbg !71
  %885 = select i1 %881, i32 %876, i32 %877, !dbg !78
  %886 = insertelement <1 x i32> poison, i32 %885, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %853, <1 x i32> %886, i1 %884) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %887 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %888 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !71
  %889 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !71
  %890 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !71
  %891 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !71
  %892 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !71
  %893 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !71
  %894 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %895 = bitcast float %887 to i32, !dbg !80
  %896 = bitcast float %888 to i32, !dbg !80
  %897 = bitcast float %889 to i32, !dbg !80
  %898 = bitcast float %890 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %895, i32 %896, i32 %897, i32 %898, i1 true) #5, !dbg !80
  %899 = bitcast float %891 to i32, !dbg !80
  %900 = bitcast float %892 to i32, !dbg !80
  %901 = bitcast float %893 to i32, !dbg !80
  %902 = bitcast float %894 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %899, i32 %900, i32 %901, i32 %902, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %903 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %535, !dbg !80
  %904 = load float, ptr addrspace(3) %903, align 4, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %905 = extractelement <16 x float> %517, i64 7, !dbg !81
  %906 = bitcast float %905 to i32, !dbg !81
  %907 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %906, i32 16, i32 31), !dbg !81
  %908 = bitcast i32 %907 to float, !dbg !81
  %909 = fcmp ogt float %905, %908, !dbg !82
  %910 = extractelement <16 x i1> %543, i64 7, !dbg !83
  %911 = or i1 %910, %909, !dbg !83
  %912 = select i1 %911, float %905, float %908, !dbg !84
  %913 = bitcast float %912 to i32, !dbg !81
  %914 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %913, i32 8, i32 31), !dbg !81
  %915 = bitcast i32 %914 to float, !dbg !81
  %916 = fcmp ogt float %912, %915, !dbg !82
  %917 = fcmp uno float %912, 0.000000e+00, !dbg !75
  %918 = or i1 %916, %917, !dbg !83
  %919 = select i1 %918, float %912, float %915, !dbg !84
  %920 = bitcast float %919 to i32, !dbg !81
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 4, i32 31), !dbg !81
  %922 = bitcast i32 %921 to float, !dbg !81
  %923 = fcmp ogt float %919, %922, !dbg !82
  %924 = fcmp uno float %919, 0.000000e+00, !dbg !75
  %925 = or i1 %923, %924, !dbg !83
  %926 = select i1 %925, float %919, float %922, !dbg !84
  %927 = bitcast float %926 to i32, !dbg !81
  %928 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %927, i32 2, i32 31), !dbg !81
  %929 = bitcast i32 %928 to float, !dbg !81
  %930 = fcmp ogt float %926, %929, !dbg !82
  %931 = fcmp uno float %926, 0.000000e+00, !dbg !75
  %932 = or i1 %930, %931, !dbg !83
  %933 = select i1 %932, float %926, float %929, !dbg !84
  %934 = bitcast float %933 to i32, !dbg !81
  %935 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %934, i32 1, i32 31), !dbg !81
  %936 = bitcast i32 %935 to float, !dbg !81
  %937 = fcmp ogt float %933, %936, !dbg !82
  %938 = fcmp uno float %933, 0.000000e+00, !dbg !75
  %939 = or i1 %937, %938, !dbg !83
  %940 = extractelement <16 x float> %517, i64 6, !dbg !81
  %941 = bitcast float %940 to i32, !dbg !81
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 16, i32 31), !dbg !81
  %943 = bitcast i32 %942 to float, !dbg !81
  %944 = fcmp ogt float %940, %943, !dbg !82
  %945 = extractelement <16 x i1> %543, i64 6, !dbg !83
  %946 = or i1 %945, %944, !dbg !83
  %947 = select i1 %946, float %940, float %943, !dbg !84
  %948 = bitcast float %947 to i32, !dbg !81
  %949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %948, i32 8, i32 31), !dbg !81
  %950 = bitcast i32 %949 to float, !dbg !81
  %951 = fcmp ogt float %947, %950, !dbg !82
  %952 = fcmp uno float %947, 0.000000e+00, !dbg !75
  %953 = or i1 %951, %952, !dbg !83
  %954 = select i1 %953, float %947, float %950, !dbg !84
  %955 = bitcast float %954 to i32, !dbg !81
  %956 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %955, i32 4, i32 31), !dbg !81
  %957 = bitcast i32 %956 to float, !dbg !81
  %958 = fcmp ogt float %954, %957, !dbg !82
  %959 = fcmp uno float %954, 0.000000e+00, !dbg !75
  %960 = or i1 %958, %959, !dbg !83
  %961 = select i1 %960, float %954, float %957, !dbg !84
  %962 = bitcast float %961 to i32, !dbg !81
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 2, i32 31), !dbg !81
  %964 = bitcast i32 %963 to float, !dbg !81
  %965 = fcmp ogt float %961, %964, !dbg !82
  %966 = fcmp uno float %961, 0.000000e+00, !dbg !75
  %967 = or i1 %965, %966, !dbg !83
  %968 = select i1 %967, float %961, float %964, !dbg !84
  %969 = bitcast float %968 to i32, !dbg !81
  %970 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %969, i32 1, i32 31), !dbg !81
  %971 = bitcast i32 %970 to float, !dbg !81
  %972 = fcmp ogt float %968, %971, !dbg !82
  %973 = fcmp uno float %968, 0.000000e+00, !dbg !75
  %974 = or i1 %972, %973, !dbg !83
  %975 = extractelement <16 x float> %517, i64 5, !dbg !81
  %976 = bitcast float %975 to i32, !dbg !81
  %977 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %976, i32 16, i32 31), !dbg !81
  %978 = bitcast i32 %977 to float, !dbg !81
  %979 = fcmp ogt float %975, %978, !dbg !82
  %980 = extractelement <16 x i1> %543, i64 5, !dbg !83
  %981 = or i1 %980, %979, !dbg !83
  %982 = select i1 %981, float %975, float %978, !dbg !84
  %983 = bitcast float %982 to i32, !dbg !81
  %984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %983, i32 8, i32 31), !dbg !81
  %985 = bitcast i32 %984 to float, !dbg !81
  %986 = fcmp ogt float %982, %985, !dbg !82
  %987 = fcmp uno float %982, 0.000000e+00, !dbg !75
  %988 = or i1 %986, %987, !dbg !83
  %989 = select i1 %988, float %982, float %985, !dbg !84
  %990 = bitcast float %989 to i32, !dbg !81
  %991 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %990, i32 4, i32 31), !dbg !81
  %992 = bitcast i32 %991 to float, !dbg !81
  %993 = fcmp ogt float %989, %992, !dbg !82
  %994 = fcmp uno float %989, 0.000000e+00, !dbg !75
  %995 = or i1 %993, %994, !dbg !83
  %996 = select i1 %995, float %989, float %992, !dbg !84
  %997 = bitcast float %996 to i32, !dbg !81
  %998 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %997, i32 2, i32 31), !dbg !81
  %999 = bitcast i32 %998 to float, !dbg !81
  %1000 = fcmp ogt float %996, %999, !dbg !82
  %1001 = fcmp uno float %996, 0.000000e+00, !dbg !75
  %1002 = or i1 %1000, %1001, !dbg !83
  %1003 = select i1 %1002, float %996, float %999, !dbg !84
  %1004 = bitcast float %1003 to i32, !dbg !81
  %1005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 1, i32 31), !dbg !81
  %1006 = bitcast i32 %1005 to float, !dbg !81
  %1007 = fcmp ogt float %1003, %1006, !dbg !82
  %1008 = fcmp uno float %1003, 0.000000e+00, !dbg !75
  %1009 = or i1 %1007, %1008, !dbg !83
  %1010 = extractelement <16 x float> %517, i64 4, !dbg !81
  %1011 = bitcast float %1010 to i32, !dbg !81
  %1012 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1011, i32 16, i32 31), !dbg !81
  %1013 = bitcast i32 %1012 to float, !dbg !81
  %1014 = fcmp ogt float %1010, %1013, !dbg !82
  %1015 = extractelement <16 x i1> %543, i64 4, !dbg !83
  %1016 = or i1 %1015, %1014, !dbg !83
  %1017 = select i1 %1016, float %1010, float %1013, !dbg !84
  %1018 = bitcast float %1017 to i32, !dbg !81
  %1019 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1018, i32 8, i32 31), !dbg !81
  %1020 = bitcast i32 %1019 to float, !dbg !81
  %1021 = fcmp ogt float %1017, %1020, !dbg !82
  %1022 = fcmp uno float %1017, 0.000000e+00, !dbg !75
  %1023 = or i1 %1021, %1022, !dbg !83
  %1024 = select i1 %1023, float %1017, float %1020, !dbg !84
  %1025 = bitcast float %1024 to i32, !dbg !81
  %1026 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1025, i32 4, i32 31), !dbg !81
  %1027 = bitcast i32 %1026 to float, !dbg !81
  %1028 = fcmp ogt float %1024, %1027, !dbg !82
  %1029 = fcmp uno float %1024, 0.000000e+00, !dbg !75
  %1030 = or i1 %1028, %1029, !dbg !83
  %1031 = select i1 %1030, float %1024, float %1027, !dbg !84
  %1032 = bitcast float %1031 to i32, !dbg !81
  %1033 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1032, i32 2, i32 31), !dbg !81
  %1034 = bitcast i32 %1033 to float, !dbg !81
  %1035 = fcmp ogt float %1031, %1034, !dbg !82
  %1036 = fcmp uno float %1031, 0.000000e+00, !dbg !75
  %1037 = or i1 %1035, %1036, !dbg !83
  %1038 = select i1 %1037, float %1031, float %1034, !dbg !84
  %1039 = bitcast float %1038 to i32, !dbg !81
  %1040 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1039, i32 1, i32 31), !dbg !81
  %1041 = bitcast i32 %1040 to float, !dbg !81
  %1042 = fcmp ogt float %1038, %1041, !dbg !82
  %1043 = fcmp uno float %1038, 0.000000e+00, !dbg !75
  %1044 = or i1 %1042, %1043, !dbg !83
  %1045 = extractelement <16 x float> %517, i64 3, !dbg !81
  %1046 = bitcast float %1045 to i32, !dbg !81
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1046, i32 16, i32 31), !dbg !81
  %1048 = bitcast i32 %1047 to float, !dbg !81
  %1049 = fcmp ogt float %1045, %1048, !dbg !82
  %1050 = extractelement <16 x i1> %543, i64 3, !dbg !83
  %1051 = or i1 %1050, %1049, !dbg !83
  %1052 = select i1 %1051, float %1045, float %1048, !dbg !84
  %1053 = bitcast float %1052 to i32, !dbg !81
  %1054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1053, i32 8, i32 31), !dbg !81
  %1055 = bitcast i32 %1054 to float, !dbg !81
  %1056 = fcmp ogt float %1052, %1055, !dbg !82
  %1057 = fcmp uno float %1052, 0.000000e+00, !dbg !75
  %1058 = or i1 %1056, %1057, !dbg !83
  %1059 = select i1 %1058, float %1052, float %1055, !dbg !84
  %1060 = bitcast float %1059 to i32, !dbg !81
  %1061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1060, i32 4, i32 31), !dbg !81
  %1062 = bitcast i32 %1061 to float, !dbg !81
  %1063 = fcmp ogt float %1059, %1062, !dbg !82
  %1064 = fcmp uno float %1059, 0.000000e+00, !dbg !75
  %1065 = or i1 %1063, %1064, !dbg !83
  %1066 = select i1 %1065, float %1059, float %1062, !dbg !84
  %1067 = bitcast float %1066 to i32, !dbg !81
  %1068 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1067, i32 2, i32 31), !dbg !81
  %1069 = bitcast i32 %1068 to float, !dbg !81
  %1070 = fcmp ogt float %1066, %1069, !dbg !82
  %1071 = fcmp uno float %1066, 0.000000e+00, !dbg !75
  %1072 = or i1 %1070, %1071, !dbg !83
  %1073 = select i1 %1072, float %1066, float %1069, !dbg !84
  %1074 = bitcast float %1073 to i32, !dbg !81
  %1075 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1074, i32 1, i32 31), !dbg !81
  %1076 = bitcast i32 %1075 to float, !dbg !81
  %1077 = fcmp ogt float %1073, %1076, !dbg !82
  %1078 = fcmp uno float %1073, 0.000000e+00, !dbg !75
  %1079 = or i1 %1077, %1078, !dbg !83
  %1080 = extractelement <16 x float> %517, i64 2, !dbg !81
  %1081 = bitcast float %1080 to i32, !dbg !81
  %1082 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1081, i32 16, i32 31), !dbg !81
  %1083 = bitcast i32 %1082 to float, !dbg !81
  %1084 = fcmp ogt float %1080, %1083, !dbg !82
  %1085 = extractelement <16 x i1> %543, i64 2, !dbg !83
  %1086 = or i1 %1085, %1084, !dbg !83
  %1087 = select i1 %1086, float %1080, float %1083, !dbg !84
  %1088 = bitcast float %1087 to i32, !dbg !81
  %1089 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1088, i32 8, i32 31), !dbg !81
  %1090 = bitcast i32 %1089 to float, !dbg !81
  %1091 = fcmp ogt float %1087, %1090, !dbg !82
  %1092 = fcmp uno float %1087, 0.000000e+00, !dbg !75
  %1093 = or i1 %1091, %1092, !dbg !83
  %1094 = select i1 %1093, float %1087, float %1090, !dbg !84
  %1095 = bitcast float %1094 to i32, !dbg !81
  %1096 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1095, i32 4, i32 31), !dbg !81
  %1097 = bitcast i32 %1096 to float, !dbg !81
  %1098 = fcmp ogt float %1094, %1097, !dbg !82
  %1099 = fcmp uno float %1094, 0.000000e+00, !dbg !75
  %1100 = or i1 %1098, %1099, !dbg !83
  %1101 = select i1 %1100, float %1094, float %1097, !dbg !84
  %1102 = bitcast float %1101 to i32, !dbg !81
  %1103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1102, i32 2, i32 31), !dbg !81
  %1104 = bitcast i32 %1103 to float, !dbg !81
  %1105 = fcmp ogt float %1101, %1104, !dbg !82
  %1106 = fcmp uno float %1101, 0.000000e+00, !dbg !75
  %1107 = or i1 %1105, %1106, !dbg !83
  %1108 = select i1 %1107, float %1101, float %1104, !dbg !84
  %1109 = bitcast float %1108 to i32, !dbg !81
  %1110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1109, i32 1, i32 31), !dbg !81
  %1111 = bitcast i32 %1110 to float, !dbg !81
  %1112 = fcmp ogt float %1108, %1111, !dbg !82
  %1113 = fcmp uno float %1108, 0.000000e+00, !dbg !75
  %1114 = or i1 %1112, %1113, !dbg !83
  %1115 = extractelement <16 x float> %517, i64 1, !dbg !81
  %1116 = bitcast float %1115 to i32, !dbg !81
  %1117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1116, i32 16, i32 31), !dbg !81
  %1118 = bitcast i32 %1117 to float, !dbg !81
  %1119 = fcmp ogt float %1115, %1118, !dbg !82
  %1120 = extractelement <16 x i1> %543, i64 1, !dbg !83
  %1121 = or i1 %1120, %1119, !dbg !83
  %1122 = select i1 %1121, float %1115, float %1118, !dbg !84
  %1123 = bitcast float %1122 to i32, !dbg !81
  %1124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1123, i32 8, i32 31), !dbg !81
  %1125 = bitcast i32 %1124 to float, !dbg !81
  %1126 = fcmp ogt float %1122, %1125, !dbg !82
  %1127 = fcmp uno float %1122, 0.000000e+00, !dbg !75
  %1128 = or i1 %1126, %1127, !dbg !83
  %1129 = select i1 %1128, float %1122, float %1125, !dbg !84
  %1130 = bitcast float %1129 to i32, !dbg !81
  %1131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1130, i32 4, i32 31), !dbg !81
  %1132 = bitcast i32 %1131 to float, !dbg !81
  %1133 = fcmp ogt float %1129, %1132, !dbg !82
  %1134 = fcmp uno float %1129, 0.000000e+00, !dbg !75
  %1135 = or i1 %1133, %1134, !dbg !83
  %1136 = select i1 %1135, float %1129, float %1132, !dbg !84
  %1137 = bitcast float %1136 to i32, !dbg !81
  %1138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1137, i32 2, i32 31), !dbg !81
  %1139 = bitcast i32 %1138 to float, !dbg !81
  %1140 = fcmp ogt float %1136, %1139, !dbg !82
  %1141 = fcmp uno float %1136, 0.000000e+00, !dbg !75
  %1142 = or i1 %1140, %1141, !dbg !83
  %1143 = select i1 %1142, float %1136, float %1139, !dbg !84
  %1144 = bitcast float %1143 to i32, !dbg !81
  %1145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1144, i32 1, i32 31), !dbg !81
  %1146 = bitcast i32 %1145 to float, !dbg !81
  %1147 = fcmp ogt float %1143, %1146, !dbg !82
  %1148 = fcmp uno float %1143, 0.000000e+00, !dbg !75
  %1149 = or i1 %1147, %1148, !dbg !83
  %1150 = extractelement <16 x float> %517, i64 0, !dbg !81
  %1151 = bitcast float %1150 to i32, !dbg !81
  %1152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1151, i32 16, i32 31), !dbg !81
  %1153 = bitcast i32 %1152 to float, !dbg !81
  %1154 = fcmp ogt float %1150, %1153, !dbg !82
  %1155 = extractelement <16 x i1> %543, i64 0, !dbg !83
  %1156 = or i1 %1155, %1154, !dbg !83
  %1157 = select i1 %1156, float %1150, float %1153, !dbg !84
  %1158 = bitcast float %1157 to i32, !dbg !81
  %1159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1158, i32 8, i32 31), !dbg !81
  %1160 = bitcast i32 %1159 to float, !dbg !81
  %1161 = fcmp ogt float %1157, %1160, !dbg !82
  %1162 = fcmp uno float %1157, 0.000000e+00, !dbg !75
  %1163 = or i1 %1161, %1162, !dbg !83
  %1164 = select i1 %1163, float %1157, float %1160, !dbg !84
  %1165 = bitcast float %1164 to i32, !dbg !81
  %1166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1165, i32 4, i32 31), !dbg !81
  %1167 = bitcast i32 %1166 to float, !dbg !81
  %1168 = fcmp ogt float %1164, %1167, !dbg !82
  %1169 = fcmp uno float %1164, 0.000000e+00, !dbg !75
  %1170 = or i1 %1168, %1169, !dbg !83
  %1171 = select i1 %1170, float %1164, float %1167, !dbg !84
  %1172 = bitcast float %1171 to i32, !dbg !81
  %1173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1172, i32 2, i32 31), !dbg !81
  %1174 = bitcast i32 %1173 to float, !dbg !81
  %1175 = fcmp ogt float %1171, %1174, !dbg !82
  %1176 = fcmp uno float %1171, 0.000000e+00, !dbg !75
  %1177 = or i1 %1175, %1176, !dbg !83
  %1178 = select i1 %1177, float %1171, float %1174, !dbg !84
  %1179 = bitcast float %1178 to i32, !dbg !81
  %1180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1179, i32 1, i32 31), !dbg !81
  %1181 = bitcast i32 %1180 to float, !dbg !81
  %1182 = fcmp ogt float %1178, %1181, !dbg !82
  %1183 = fcmp uno float %1178, 0.000000e+00, !dbg !75
  %1184 = or i1 %1182, %1183, !dbg !83
  %1185 = select i1 %939, i32 %934, i32 %935, !dbg !84
  %1186 = insertelement <1 x i32> poison, i32 %1185, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %821, <1 x i32> %1186, i1 %820) #5, !dbg !81
  %1187 = select i1 %974, i32 %969, i32 %970, !dbg !84
  %1188 = insertelement <1 x i32> poison, i32 %1187, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %1188, i1 %820) #5, !dbg !81
  %1189 = select i1 %1009, i32 %1004, i32 %1005, !dbg !84
  %1190 = insertelement <1 x i32> poison, i32 %1189, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %829, <1 x i32> %1190, i1 %820) #5, !dbg !81
  %1191 = select i1 %1044, i32 %1039, i32 %1040, !dbg !84
  %1192 = insertelement <1 x i32> poison, i32 %1191, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %833, <1 x i32> %1192, i1 %820) #5, !dbg !81
  %1193 = select i1 %1079, i32 %1074, i32 %1075, !dbg !84
  %1194 = insertelement <1 x i32> poison, i32 %1193, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %1194, i1 %820) #5, !dbg !81
  %1195 = select i1 %1114, i32 %1109, i32 %1110, !dbg !84
  %1196 = insertelement <1 x i32> poison, i32 %1195, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %1196, i1 %820) #5, !dbg !81
  %1197 = select i1 %1149, i32 %1144, i32 %1145, !dbg !84
  %1198 = insertelement <1 x i32> poison, i32 %1197, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %1198, i1 %820) #5, !dbg !81
  %1199 = select i1 %1184, i32 %1179, i32 %1180, !dbg !84
  %1200 = insertelement <1 x i32> poison, i32 %1199, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %1200, i1 %820) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1201 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %853, i1 %852) #5, !dbg !81
  %1202 = bitcast i32 %1201 to float, !dbg !81
  %1203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1201, i32 8, i32 31), !dbg !81
  %1204 = bitcast i32 %1203 to float, !dbg !81
  %1205 = fcmp ogt float %1202, %1204, !dbg !82
  %1206 = fcmp uno float %1202, 0.000000e+00, !dbg !75
  %1207 = or i1 %1206, %1205, !dbg !83
  %1208 = select i1 %1207, float %1202, float %1204, !dbg !84
  %1209 = bitcast float %1208 to i32, !dbg !81
  %1210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1209, i32 4, i32 31), !dbg !81
  %1211 = bitcast i32 %1210 to float, !dbg !81
  %1212 = fcmp ogt float %1208, %1211, !dbg !82
  %1213 = fcmp uno float %1208, 0.000000e+00, !dbg !75
  %1214 = or i1 %1212, %1213, !dbg !83
  %1215 = select i1 %1214, float %1208, float %1211, !dbg !84
  %1216 = bitcast float %1215 to i32, !dbg !81
  %1217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 2, i32 31), !dbg !81
  %1218 = bitcast i32 %1217 to float, !dbg !81
  %1219 = fcmp ogt float %1215, %1218, !dbg !82
  %1220 = fcmp uno float %1215, 0.000000e+00, !dbg !75
  %1221 = or i1 %1219, %1220, !dbg !83
  %1222 = select i1 %1221, float %1215, float %1218, !dbg !84
  %1223 = bitcast float %1222 to i32, !dbg !81
  %1224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1223, i32 1, i32 31), !dbg !81
  %1225 = bitcast i32 %1224 to float, !dbg !81
  %1226 = fcmp ogt float %1222, %1225, !dbg !82
  %1227 = fcmp uno float %1222, 0.000000e+00, !dbg !75
  %1228 = or i1 %1226, %1227, !dbg !83
  %1229 = select i1 %1228, i32 %1223, i32 %1224, !dbg !84
  %1230 = insertelement <1 x i32> poison, i32 %1229, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %853, <1 x i32> %1230, i1 %884) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1231 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %1232 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !81
  %1233 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !81
  %1234 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !81
  %1235 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !81
  %1236 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !81
  %1237 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !81
  %1238 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %1239 = bitcast float %1231 to i32, !dbg !85
  %1240 = bitcast float %1232 to i32, !dbg !85
  %1241 = bitcast float %1233 to i32, !dbg !85
  %1242 = bitcast float %1234 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1239, i32 %1240, i32 %1241, i32 %1242, i1 true) #5, !dbg !85
  %1243 = bitcast float %1235 to i32, !dbg !85
  %1244 = bitcast float %1236 to i32, !dbg !85
  %1245 = bitcast float %1237 to i32, !dbg !85
  %1246 = bitcast float %1238 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1243, i32 %1244, i32 %1245, i32 %1246, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %1247 = load float, ptr addrspace(3) %903, align 4, !dbg !85
  %1248 = sext i32 %536 to i64, !dbg !86
  %1249 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1248, !dbg !86
  %1250 = fptrunc float %904 to bfloat, !dbg !80
  %1251 = and i32 %15, 504, !dbg !80
  %1252 = icmp eq i32 %1251, 0, !dbg !80
  %1253 = bitcast bfloat %1250 to i16, !dbg !80
  %1254 = and i1 %1252, %537, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1253, ptr addrspace(1) %1249, i1 %1254) #5, !dbg !80
  %1255 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1248, !dbg !87
  %1256 = fptrunc float %1247 to bfloat, !dbg !85
  %1257 = bitcast bfloat %1256 to i16, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1257, ptr addrspace(1) %1255, i1 %1254) #5, !dbg !85
  %1258 = insertelement <8 x float> poison, float %894, i64 0, !dbg !88
  %1259 = insertelement <8 x float> %1258, float %893, i64 1, !dbg !88
  %1260 = insertelement <8 x float> %1259, float %892, i64 2, !dbg !88
  %1261 = insertelement <8 x float> %1260, float %891, i64 3, !dbg !88
  %1262 = insertelement <8 x float> %1261, float %890, i64 4, !dbg !88
  %1263 = insertelement <8 x float> %1262, float %889, i64 5, !dbg !88
  %1264 = insertelement <8 x float> %1263, float %888, i64 6, !dbg !88
  %1265 = insertelement <8 x float> %1264, float %887, i64 7, !dbg !88
  %1266 = fcmp oge <8 x float> %1265, zeroinitializer, !dbg !88
  %1267 = select <8 x i1> %1266, <8 x float> zeroinitializer, <8 x float> %1265, !dbg !88
  %1268 = fsub <8 x float> zeroinitializer, %1267, !dbg !90
  %1269 = insertelement <8 x float> poison, float %1238, i64 0, !dbg !91
  %1270 = insertelement <8 x float> %1269, float %1237, i64 1, !dbg !91
  %1271 = insertelement <8 x float> %1270, float %1236, i64 2, !dbg !91
  %1272 = insertelement <8 x float> %1271, float %1235, i64 3, !dbg !91
  %1273 = insertelement <8 x float> %1272, float %1234, i64 4, !dbg !91
  %1274 = insertelement <8 x float> %1273, float %1233, i64 5, !dbg !91
  %1275 = insertelement <8 x float> %1274, float %1232, i64 6, !dbg !91
  %1276 = insertelement <8 x float> %1275, float %1231, i64 7, !dbg !91
  %1277 = fcmp ole <8 x float> %1276, zeroinitializer, !dbg !91
  %1278 = select <8 x i1> %1277, <8 x float> zeroinitializer, <8 x float> %1276, !dbg !91
  %1279 = fcmp ogt <8 x float> %1268, %1278, !dbg !93
  %1280 = fcmp uno <8 x float> %1268, zeroinitializer, !dbg !95
  %1281 = or <8 x i1> %1280, %1279, !dbg !96
  %1282 = select <8 x i1> %1281, <8 x float> %1268, <8 x float> %1278, !dbg !97
  %1283 = fmul <8 x float> %1282, splat (float 0x3F80204080000000), !dbg !98
  %1284 = fcmp ogt <8 x float> %1283, splat (float 0x3EE4F8B580000000), !dbg !99
  %1285 = extractelement <8 x float> %1283, i64 7, !dbg !101
  %1286 = fcmp uno float %1285, 0.000000e+00, !dbg !102
  %1287 = extractelement <8 x float> %1283, i64 6, !dbg !101
  %1288 = fcmp uno float %1287, 0.000000e+00, !dbg !102
  %1289 = extractelement <8 x float> %1283, i64 5, !dbg !101
  %1290 = fcmp uno float %1289, 0.000000e+00, !dbg !102
  %1291 = extractelement <8 x float> %1283, i64 4, !dbg !101
  %1292 = fcmp uno float %1291, 0.000000e+00, !dbg !102
  %1293 = extractelement <8 x float> %1283, i64 3, !dbg !101
  %1294 = fcmp uno float %1293, 0.000000e+00, !dbg !102
  %1295 = extractelement <8 x float> %1283, i64 2, !dbg !101
  %1296 = fcmp uno float %1295, 0.000000e+00, !dbg !102
  %1297 = extractelement <8 x float> %1283, i64 1, !dbg !101
  %1298 = fcmp uno float %1297, 0.000000e+00, !dbg !102
  %1299 = extractelement <8 x float> %1283, i64 0, !dbg !101
  %1300 = fcmp uno float %1299, 0.000000e+00, !dbg !102
  %1301 = extractelement <8 x i1> %1284, i64 7, !dbg !103
  %1302 = or i1 %1301, %1286, !dbg !103
  %1303 = extractelement <8 x i1> %1284, i64 6, !dbg !103
  %1304 = or i1 %1303, %1288, !dbg !103
  %1305 = extractelement <8 x i1> %1284, i64 5, !dbg !103
  %1306 = or i1 %1305, %1290, !dbg !103
  %1307 = extractelement <8 x i1> %1284, i64 4, !dbg !103
  %1308 = or i1 %1307, %1292, !dbg !103
  %1309 = extractelement <8 x i1> %1284, i64 3, !dbg !103
  %1310 = or i1 %1309, %1294, !dbg !103
  %1311 = extractelement <8 x i1> %1284, i64 2, !dbg !103
  %1312 = or i1 %1311, %1296, !dbg !103
  %1313 = extractelement <8 x i1> %1284, i64 1, !dbg !103
  %1314 = or i1 %1313, %1298, !dbg !103
  %1315 = extractelement <8 x i1> %1284, i64 0, !dbg !103
  %1316 = or i1 %1315, %1300, !dbg !103
  %1317 = select i1 %1302, float %1285, float 0x3EE4F8B580000000, !dbg !101
  %1318 = select i1 %1304, float %1287, float 0x3EE4F8B580000000, !dbg !101
  %1319 = select i1 %1306, float %1289, float 0x3EE4F8B580000000, !dbg !101
  %1320 = select i1 %1308, float %1291, float 0x3EE4F8B580000000, !dbg !101
  %1321 = select i1 %1310, float %1293, float 0x3EE4F8B580000000, !dbg !101
  %1322 = select i1 %1312, float %1295, float 0x3EE4F8B580000000, !dbg !101
  %1323 = select i1 %1314, float %1297, float 0x3EE4F8B580000000, !dbg !101
  %1324 = select i1 %1316, float %1299, float 0x3EE4F8B580000000, !dbg !101
  %1325 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1317), !dbg !104
  %1326 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1318), !dbg !104
  %1327 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1319), !dbg !104
  %1328 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1320), !dbg !104
  %1329 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1321), !dbg !104
  %1330 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1322), !dbg !104
  %1331 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1323), !dbg !104
  %1332 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1324), !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %1333 = bitcast float %1325 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1333, i1 true) #5, !dbg !105
  %1334 = bitcast float %1326 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1334, i1 true) #5, !dbg !105
  %1335 = bitcast float %1327 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1335, i1 true) #5, !dbg !105
  %1336 = bitcast float %1328 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1336, i1 true) #5, !dbg !105
  %1337 = bitcast float %1329 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 32), <1 x i32> %1337, i1 true) #5, !dbg !105
  %1338 = bitcast float %1330 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 40), <1 x i32> %1338, i1 true) #5, !dbg !105
  %1339 = bitcast float %1331 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 48), <1 x i32> %1339, i1 true) #5, !dbg !105
  %1340 = bitcast float %1332 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 56), <1 x i32> %1340, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %.idx = shl nuw nsw i32 %17, 3, !dbg !105
  %1341 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !105
  %1342 = load float, ptr addrspace(3) %1341, align 8, !dbg !105
  br label %1343, !dbg !106

1343:                                             ; preds = %533, %__nv_tanhf.exit169
  %indvars.iv338 = phi i64 [ 0, %533 ], [ %indvars.iv.next339, %__nv_tanhf.exit169 ]
  %1344 = trunc nuw nsw i64 %indvars.iv338 to i32, !dbg !107
  %1345 = add i32 %71, %1344, !dbg !107
  %1346 = add i32 %72, %1344, !dbg !107
  %1347 = sext i32 %1345 to i64, !dbg !108
  %1348 = getelementptr float, ptr addrspace(1) %5, i64 %1347, !dbg !108
  %1349 = sext i32 %1346 to i64, !dbg !108
  %1350 = getelementptr float, ptr addrspace(1) %5, i64 %1349, !dbg !108
  %1351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1348, i1 %23) #5, !dbg !109
  %1352 = extractvalue { i32, i32, i32, i32 } %1351, 0, !dbg !109
  %1353 = extractvalue { i32, i32, i32, i32 } %1351, 1, !dbg !109
  %1354 = extractvalue { i32, i32, i32, i32 } %1351, 2, !dbg !109
  %1355 = extractvalue { i32, i32, i32, i32 } %1351, 3, !dbg !109
  %1356 = bitcast i32 %1352 to float, !dbg !109
  %1357 = bitcast i32 %1353 to float, !dbg !109
  %1358 = bitcast i32 %1354 to float, !dbg !109
  %1359 = bitcast i32 %1355 to float, !dbg !109
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1350, i1 %23) #5, !dbg !109
  %1361 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !109
  %1362 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !109
  %1363 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !109
  %1364 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !109
  %1365 = bitcast i32 %1361 to float, !dbg !109
  %1366 = bitcast i32 %1362 to float, !dbg !109
  %1367 = bitcast i32 %1363 to float, !dbg !109
  %1368 = bitcast i32 %1364 to float, !dbg !109
  %1369 = fmul float %1356, 5.000000e-01, !dbg !110
  %1370 = fmul float %1357, 5.000000e-01, !dbg !110
  %1371 = fmul float %1358, 5.000000e-01, !dbg !110
  %1372 = fmul float %1359, 5.000000e-01, !dbg !110
  %1373 = fmul float %1365, 5.000000e-01, !dbg !110
  %1374 = fmul float %1366, 5.000000e-01, !dbg !110
  %1375 = fmul float %1367, 5.000000e-01, !dbg !110
  %1376 = fmul float %1368, 5.000000e-01, !dbg !110
  %1377 = fmul float %1356, %1356, !dbg !111
  %1378 = fmul float %1357, %1357, !dbg !111
  %1379 = fmul float %1358, %1358, !dbg !111
  %1380 = fmul float %1359, %1359, !dbg !111
  %1381 = fmul float %1365, %1365, !dbg !111
  %1382 = fmul float %1366, %1366, !dbg !111
  %1383 = fmul float %1367, %1367, !dbg !111
  %1384 = fmul float %1368, %1368, !dbg !111
  %1385 = fmul float %1377, %1356, !dbg !112
  %1386 = fmul float %1378, %1357, !dbg !112
  %1387 = fmul float %1379, %1358, !dbg !112
  %1388 = fmul float %1380, %1359, !dbg !112
  %1389 = fmul float %1381, %1365, !dbg !112
  %1390 = fmul float %1382, %1366, !dbg !112
  %1391 = fmul float %1383, %1367, !dbg !112
  %1392 = fmul float %1384, %1368, !dbg !112
  %1393 = fmul float %1385, 0x3FA6E4E260000000, !dbg !113
  %1394 = fmul float %1386, 0x3FA6E4E260000000, !dbg !113
  %1395 = fmul float %1387, 0x3FA6E4E260000000, !dbg !113
  %1396 = fmul float %1388, 0x3FA6E4E260000000, !dbg !113
  %1397 = fmul float %1389, 0x3FA6E4E260000000, !dbg !113
  %1398 = fmul float %1390, 0x3FA6E4E260000000, !dbg !113
  %1399 = fmul float %1391, 0x3FA6E4E260000000, !dbg !113
  %1400 = fmul float %1392, 0x3FA6E4E260000000, !dbg !113
  %1401 = fadd float %1393, %1356, !dbg !114
  %1402 = fadd float %1394, %1357, !dbg !114
  %1403 = fadd float %1395, %1358, !dbg !114
  %1404 = fadd float %1396, %1359, !dbg !114
  %1405 = fadd float %1397, %1365, !dbg !114
  %1406 = fadd float %1398, %1366, !dbg !114
  %1407 = fadd float %1399, %1367, !dbg !114
  %1408 = fadd float %1400, %1368, !dbg !114
  %1409 = fmul float %1401, 0x3FE9884540000000, !dbg !115
  %1410 = fmul float %1402, 0x3FE9884540000000, !dbg !115
  %1411 = fmul float %1403, 0x3FE9884540000000, !dbg !115
  %1412 = fmul float %1404, 0x3FE9884540000000, !dbg !115
  %1413 = fmul float %1405, 0x3FE9884540000000, !dbg !115
  %1414 = fmul float %1406, 0x3FE9884540000000, !dbg !115
  %1415 = fmul float %1407, 0x3FE9884540000000, !dbg !115
  %1416 = fmul float %1408, 0x3FE9884540000000, !dbg !115
  %1417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i = icmp eq i32 %1417, 0, !dbg !116
  %1418 = tail call float @llvm.nvvm.fabs.ftz.f(float %1409) #5, !dbg !116
  %1419 = tail call float @llvm.nvvm.fabs.f(float %1409) #5, !dbg !116
  %.01.i = select i1 %.not.i, float %1419, float %1418, !dbg !116
  %1420 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !116
  br i1 %1420, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !116

__internal_fmad.exit1.i:                          ; preds = %1343
  %1421 = fmul float %.01.i, 0x4007154760000000, !dbg !116
  %1422 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1421) #5, !dbg !116
  %1423 = fadd float %1422, 1.000000e+00, !dbg !116
  %1424 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1423) #6, !dbg !116, !srcloc !61
  %1425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i = icmp eq i32 %1425, 0, !dbg !116
  %1426 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1424, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1427 = tail call float @llvm.nvvm.fma.rn.f(float %1424, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i = select i1 %.not6.i, float %1427, float %1426, !dbg !116
  %1428 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !116
  %s.0.i = select i1 %1428, float 1.000000e+00, float %.03.i, !dbg !116
  %1429 = bitcast float %s.0.i to i32, !dbg !116
  %1430 = bitcast float %1409 to i32, !dbg !116
  %1431 = and i32 %1430, -2147483648, !dbg !116
  %1432 = or i32 %1431, %1429, !dbg !116
  %1433 = bitcast i32 %1432 to float, !dbg !116
  br label %__nv_tanhf.exit, !dbg !116

__internal_fmad.exit3.i:                          ; preds = %1343
  %1434 = fmul float %1409, %1409, !dbg !116
  %1435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i = icmp eq i32 %1435, 0, !dbg !116
  %1436 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1434, float 0xBFAAC795C0000000) #5, !dbg !116
  %1437 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1434, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i = select i1 %.not1.i, float %1437, float %1436, !dbg !116
  %1438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i = icmp eq i32 %1438, 0, !dbg !116
  %1439 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %1434, float 0x3FC10B2820000000) #5, !dbg !116
  %1440 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %1434, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i = select i1 %.not2.i, float %1440, float %1439, !dbg !116
  %1441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i = icmp eq i32 %1441, 0, !dbg !116
  %1442 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1434, float 0xBFD5553DA0000000) #5, !dbg !116
  %1443 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1434, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i = select i1 %.not3.i, float %1443, float %1442, !dbg !116
  %1444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i = icmp eq i32 %1444, 0, !dbg !116
  %1445 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %1434, float 0.000000e+00) #5, !dbg !116
  %1446 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %1434, float 0.000000e+00) #5, !dbg !116
  %.04.i = select i1 %.not4.i, float %1446, float %1445, !dbg !116
  %1447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i = icmp eq i32 %1447, 0, !dbg !116
  %1448 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %1409, float %1409) #5, !dbg !116
  %1449 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %1409, float %1409) #5, !dbg !116
  %.02.i = select i1 %.not5.i, float %1449, float %1448, !dbg !116
  br label %__nv_tanhf.exit, !dbg !116

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %1433, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !116
  %1450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i37 = icmp eq i32 %1450, 0, !dbg !116
  %1451 = tail call float @llvm.nvvm.fabs.ftz.f(float %1410) #5, !dbg !116
  %1452 = tail call float @llvm.nvvm.fabs.f(float %1410) #5, !dbg !116
  %.01.i38 = select i1 %.not.i37, float %1452, float %1451, !dbg !116
  %1453 = fcmp ult float %.01.i38, 0x3FE3333340000000, !dbg !116
  br i1 %1453, label %__internal_fmad.exit3.i44, label %__internal_fmad.exit1.i39, !dbg !116

__internal_fmad.exit1.i39:                        ; preds = %__nv_tanhf.exit
  %1454 = fmul float %.01.i38, 0x4007154760000000, !dbg !116
  %1455 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1454) #5, !dbg !116
  %1456 = fadd float %1455, 1.000000e+00, !dbg !116
  %1457 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1456) #6, !dbg !116, !srcloc !61
  %1458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i40 = icmp eq i32 %1458, 0, !dbg !116
  %1459 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1457, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1460 = tail call float @llvm.nvvm.fma.rn.f(float %1457, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i41 = select i1 %.not6.i40, float %1460, float %1459, !dbg !116
  %1461 = fcmp oge float %.01.i38, 0x4022059680000000, !dbg !116
  %s.0.i42 = select i1 %1461, float 1.000000e+00, float %.03.i41, !dbg !116
  %1462 = bitcast float %s.0.i42 to i32, !dbg !116
  %1463 = bitcast float %1410 to i32, !dbg !116
  %1464 = and i32 %1463, -2147483648, !dbg !116
  %1465 = or i32 %1464, %1462, !dbg !116
  %1466 = bitcast i32 %1465 to float, !dbg !116
  br label %__nv_tanhf.exit55, !dbg !116

__internal_fmad.exit3.i44:                        ; preds = %__nv_tanhf.exit
  %1467 = fmul float %1410, %1410, !dbg !116
  %1468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i45 = icmp eq i32 %1468, 0, !dbg !116
  %1469 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1467, float 0xBFAAC795C0000000) #5, !dbg !116
  %1470 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1467, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i46 = select i1 %.not1.i45, float %1470, float %1469, !dbg !116
  %1471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i47 = icmp eq i32 %1471, 0, !dbg !116
  %1472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i46, float %1467, float 0x3FC10B2820000000) #5, !dbg !116
  %1473 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i46, float %1467, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i48 = select i1 %.not2.i47, float %1473, float %1472, !dbg !116
  %1474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i49 = icmp eq i32 %1474, 0, !dbg !116
  %1475 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i48, float %1467, float 0xBFD5553DA0000000) #5, !dbg !116
  %1476 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i48, float %1467, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i50 = select i1 %.not3.i49, float %1476, float %1475, !dbg !116
  %1477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i51 = icmp eq i32 %1477, 0, !dbg !116
  %1478 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i50, float %1467, float 0.000000e+00) #5, !dbg !116
  %1479 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i50, float %1467, float 0.000000e+00) #5, !dbg !116
  %.04.i52 = select i1 %.not4.i51, float %1479, float %1478, !dbg !116
  %1480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i53 = icmp eq i32 %1480, 0, !dbg !116
  %1481 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i52, float %1410, float %1410) #5, !dbg !116
  %1482 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i52, float %1410, float %1410) #5, !dbg !116
  %.02.i54 = select i1 %.not5.i53, float %1482, float %1481, !dbg !116
  br label %__nv_tanhf.exit55, !dbg !116

__nv_tanhf.exit55:                                ; preds = %__internal_fmad.exit1.i39, %__internal_fmad.exit3.i44
  %s.1.i43 = phi float [ %1466, %__internal_fmad.exit1.i39 ], [ %.02.i54, %__internal_fmad.exit3.i44 ], !dbg !116
  %1483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i56 = icmp eq i32 %1483, 0, !dbg !116
  %1484 = tail call float @llvm.nvvm.fabs.ftz.f(float %1411) #5, !dbg !116
  %1485 = tail call float @llvm.nvvm.fabs.f(float %1411) #5, !dbg !116
  %.01.i57 = select i1 %.not.i56, float %1485, float %1484, !dbg !116
  %1486 = fcmp ult float %.01.i57, 0x3FE3333340000000, !dbg !116
  br i1 %1486, label %__internal_fmad.exit3.i63, label %__internal_fmad.exit1.i58, !dbg !116

__internal_fmad.exit1.i58:                        ; preds = %__nv_tanhf.exit55
  %1487 = fmul float %.01.i57, 0x4007154760000000, !dbg !116
  %1488 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1487) #5, !dbg !116
  %1489 = fadd float %1488, 1.000000e+00, !dbg !116
  %1490 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1489) #6, !dbg !116, !srcloc !61
  %1491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i59 = icmp eq i32 %1491, 0, !dbg !116
  %1492 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1490, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1493 = tail call float @llvm.nvvm.fma.rn.f(float %1490, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i60 = select i1 %.not6.i59, float %1493, float %1492, !dbg !116
  %1494 = fcmp oge float %.01.i57, 0x4022059680000000, !dbg !116
  %s.0.i61 = select i1 %1494, float 1.000000e+00, float %.03.i60, !dbg !116
  %1495 = bitcast float %s.0.i61 to i32, !dbg !116
  %1496 = bitcast float %1411 to i32, !dbg !116
  %1497 = and i32 %1496, -2147483648, !dbg !116
  %1498 = or i32 %1497, %1495, !dbg !116
  %1499 = bitcast i32 %1498 to float, !dbg !116
  br label %__nv_tanhf.exit74, !dbg !116

__internal_fmad.exit3.i63:                        ; preds = %__nv_tanhf.exit55
  %1500 = fmul float %1411, %1411, !dbg !116
  %1501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i64 = icmp eq i32 %1501, 0, !dbg !116
  %1502 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1500, float 0xBFAAC795C0000000) #5, !dbg !116
  %1503 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1500, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i65 = select i1 %.not1.i64, float %1503, float %1502, !dbg !116
  %1504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i66 = icmp eq i32 %1504, 0, !dbg !116
  %1505 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i65, float %1500, float 0x3FC10B2820000000) #5, !dbg !116
  %1506 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i65, float %1500, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i67 = select i1 %.not2.i66, float %1506, float %1505, !dbg !116
  %1507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i68 = icmp eq i32 %1507, 0, !dbg !116
  %1508 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i67, float %1500, float 0xBFD5553DA0000000) #5, !dbg !116
  %1509 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i67, float %1500, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i69 = select i1 %.not3.i68, float %1509, float %1508, !dbg !116
  %1510 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i70 = icmp eq i32 %1510, 0, !dbg !116
  %1511 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i69, float %1500, float 0.000000e+00) #5, !dbg !116
  %1512 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i69, float %1500, float 0.000000e+00) #5, !dbg !116
  %.04.i71 = select i1 %.not4.i70, float %1512, float %1511, !dbg !116
  %1513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i72 = icmp eq i32 %1513, 0, !dbg !116
  %1514 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i71, float %1411, float %1411) #5, !dbg !116
  %1515 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i71, float %1411, float %1411) #5, !dbg !116
  %.02.i73 = select i1 %.not5.i72, float %1515, float %1514, !dbg !116
  br label %__nv_tanhf.exit74, !dbg !116

__nv_tanhf.exit74:                                ; preds = %__internal_fmad.exit1.i58, %__internal_fmad.exit3.i63
  %s.1.i62 = phi float [ %1499, %__internal_fmad.exit1.i58 ], [ %.02.i73, %__internal_fmad.exit3.i63 ], !dbg !116
  %1516 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i75 = icmp eq i32 %1516, 0, !dbg !116
  %1517 = tail call float @llvm.nvvm.fabs.ftz.f(float %1412) #5, !dbg !116
  %1518 = tail call float @llvm.nvvm.fabs.f(float %1412) #5, !dbg !116
  %.01.i76 = select i1 %.not.i75, float %1518, float %1517, !dbg !116
  %1519 = fcmp ult float %.01.i76, 0x3FE3333340000000, !dbg !116
  br i1 %1519, label %__internal_fmad.exit3.i82, label %__internal_fmad.exit1.i77, !dbg !116

__internal_fmad.exit1.i77:                        ; preds = %__nv_tanhf.exit74
  %1520 = fmul float %.01.i76, 0x4007154760000000, !dbg !116
  %1521 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1520) #5, !dbg !116
  %1522 = fadd float %1521, 1.000000e+00, !dbg !116
  %1523 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1522) #6, !dbg !116, !srcloc !61
  %1524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i78 = icmp eq i32 %1524, 0, !dbg !116
  %1525 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1523, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1526 = tail call float @llvm.nvvm.fma.rn.f(float %1523, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i79 = select i1 %.not6.i78, float %1526, float %1525, !dbg !116
  %1527 = fcmp oge float %.01.i76, 0x4022059680000000, !dbg !116
  %s.0.i80 = select i1 %1527, float 1.000000e+00, float %.03.i79, !dbg !116
  %1528 = bitcast float %s.0.i80 to i32, !dbg !116
  %1529 = bitcast float %1412 to i32, !dbg !116
  %1530 = and i32 %1529, -2147483648, !dbg !116
  %1531 = or i32 %1530, %1528, !dbg !116
  %1532 = bitcast i32 %1531 to float, !dbg !116
  br label %__nv_tanhf.exit93, !dbg !116

__internal_fmad.exit3.i82:                        ; preds = %__nv_tanhf.exit74
  %1533 = fmul float %1412, %1412, !dbg !116
  %1534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i83 = icmp eq i32 %1534, 0, !dbg !116
  %1535 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1533, float 0xBFAAC795C0000000) #5, !dbg !116
  %1536 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1533, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i84 = select i1 %.not1.i83, float %1536, float %1535, !dbg !116
  %1537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i85 = icmp eq i32 %1537, 0, !dbg !116
  %1538 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i84, float %1533, float 0x3FC10B2820000000) #5, !dbg !116
  %1539 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i84, float %1533, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i86 = select i1 %.not2.i85, float %1539, float %1538, !dbg !116
  %1540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i87 = icmp eq i32 %1540, 0, !dbg !116
  %1541 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i86, float %1533, float 0xBFD5553DA0000000) #5, !dbg !116
  %1542 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i86, float %1533, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i88 = select i1 %.not3.i87, float %1542, float %1541, !dbg !116
  %1543 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i89 = icmp eq i32 %1543, 0, !dbg !116
  %1544 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i88, float %1533, float 0.000000e+00) #5, !dbg !116
  %1545 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i88, float %1533, float 0.000000e+00) #5, !dbg !116
  %.04.i90 = select i1 %.not4.i89, float %1545, float %1544, !dbg !116
  %1546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i91 = icmp eq i32 %1546, 0, !dbg !116
  %1547 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i90, float %1412, float %1412) #5, !dbg !116
  %1548 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i90, float %1412, float %1412) #5, !dbg !116
  %.02.i92 = select i1 %.not5.i91, float %1548, float %1547, !dbg !116
  br label %__nv_tanhf.exit93, !dbg !116

__nv_tanhf.exit93:                                ; preds = %__internal_fmad.exit1.i77, %__internal_fmad.exit3.i82
  %s.1.i81 = phi float [ %1532, %__internal_fmad.exit1.i77 ], [ %.02.i92, %__internal_fmad.exit3.i82 ], !dbg !116
  %1549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i94 = icmp eq i32 %1549, 0, !dbg !116
  %1550 = tail call float @llvm.nvvm.fabs.ftz.f(float %1413) #5, !dbg !116
  %1551 = tail call float @llvm.nvvm.fabs.f(float %1413) #5, !dbg !116
  %.01.i95 = select i1 %.not.i94, float %1551, float %1550, !dbg !116
  %1552 = fcmp ult float %.01.i95, 0x3FE3333340000000, !dbg !116
  br i1 %1552, label %__internal_fmad.exit3.i101, label %__internal_fmad.exit1.i96, !dbg !116

__internal_fmad.exit1.i96:                        ; preds = %__nv_tanhf.exit93
  %1553 = fmul float %.01.i95, 0x4007154760000000, !dbg !116
  %1554 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1553) #5, !dbg !116
  %1555 = fadd float %1554, 1.000000e+00, !dbg !116
  %1556 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1555) #6, !dbg !116, !srcloc !61
  %1557 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i97 = icmp eq i32 %1557, 0, !dbg !116
  %1558 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1556, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1559 = tail call float @llvm.nvvm.fma.rn.f(float %1556, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i98 = select i1 %.not6.i97, float %1559, float %1558, !dbg !116
  %1560 = fcmp oge float %.01.i95, 0x4022059680000000, !dbg !116
  %s.0.i99 = select i1 %1560, float 1.000000e+00, float %.03.i98, !dbg !116
  %1561 = bitcast float %s.0.i99 to i32, !dbg !116
  %1562 = bitcast float %1413 to i32, !dbg !116
  %1563 = and i32 %1562, -2147483648, !dbg !116
  %1564 = or i32 %1563, %1561, !dbg !116
  %1565 = bitcast i32 %1564 to float, !dbg !116
  br label %__nv_tanhf.exit112, !dbg !116

__internal_fmad.exit3.i101:                       ; preds = %__nv_tanhf.exit93
  %1566 = fmul float %1413, %1413, !dbg !116
  %1567 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i102 = icmp eq i32 %1567, 0, !dbg !116
  %1568 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1566, float 0xBFAAC795C0000000) #5, !dbg !116
  %1569 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1566, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i103 = select i1 %.not1.i102, float %1569, float %1568, !dbg !116
  %1570 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i104 = icmp eq i32 %1570, 0, !dbg !116
  %1571 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i103, float %1566, float 0x3FC10B2820000000) #5, !dbg !116
  %1572 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i103, float %1566, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i105 = select i1 %.not2.i104, float %1572, float %1571, !dbg !116
  %1573 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i106 = icmp eq i32 %1573, 0, !dbg !116
  %1574 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i105, float %1566, float 0xBFD5553DA0000000) #5, !dbg !116
  %1575 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i105, float %1566, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i107 = select i1 %.not3.i106, float %1575, float %1574, !dbg !116
  %1576 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i108 = icmp eq i32 %1576, 0, !dbg !116
  %1577 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i107, float %1566, float 0.000000e+00) #5, !dbg !116
  %1578 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i107, float %1566, float 0.000000e+00) #5, !dbg !116
  %.04.i109 = select i1 %.not4.i108, float %1578, float %1577, !dbg !116
  %1579 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i110 = icmp eq i32 %1579, 0, !dbg !116
  %1580 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i109, float %1413, float %1413) #5, !dbg !116
  %1581 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i109, float %1413, float %1413) #5, !dbg !116
  %.02.i111 = select i1 %.not5.i110, float %1581, float %1580, !dbg !116
  br label %__nv_tanhf.exit112, !dbg !116

__nv_tanhf.exit112:                               ; preds = %__internal_fmad.exit1.i96, %__internal_fmad.exit3.i101
  %s.1.i100 = phi float [ %1565, %__internal_fmad.exit1.i96 ], [ %.02.i111, %__internal_fmad.exit3.i101 ], !dbg !116
  %1582 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i113 = icmp eq i32 %1582, 0, !dbg !116
  %1583 = tail call float @llvm.nvvm.fabs.ftz.f(float %1414) #5, !dbg !116
  %1584 = tail call float @llvm.nvvm.fabs.f(float %1414) #5, !dbg !116
  %.01.i114 = select i1 %.not.i113, float %1584, float %1583, !dbg !116
  %1585 = fcmp ult float %.01.i114, 0x3FE3333340000000, !dbg !116
  br i1 %1585, label %__internal_fmad.exit3.i120, label %__internal_fmad.exit1.i115, !dbg !116

__internal_fmad.exit1.i115:                       ; preds = %__nv_tanhf.exit112
  %1586 = fmul float %.01.i114, 0x4007154760000000, !dbg !116
  %1587 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1586) #5, !dbg !116
  %1588 = fadd float %1587, 1.000000e+00, !dbg !116
  %1589 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1588) #6, !dbg !116, !srcloc !61
  %1590 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i116 = icmp eq i32 %1590, 0, !dbg !116
  %1591 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1589, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1592 = tail call float @llvm.nvvm.fma.rn.f(float %1589, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i117 = select i1 %.not6.i116, float %1592, float %1591, !dbg !116
  %1593 = fcmp oge float %.01.i114, 0x4022059680000000, !dbg !116
  %s.0.i118 = select i1 %1593, float 1.000000e+00, float %.03.i117, !dbg !116
  %1594 = bitcast float %s.0.i118 to i32, !dbg !116
  %1595 = bitcast float %1414 to i32, !dbg !116
  %1596 = and i32 %1595, -2147483648, !dbg !116
  %1597 = or i32 %1596, %1594, !dbg !116
  %1598 = bitcast i32 %1597 to float, !dbg !116
  br label %__nv_tanhf.exit131, !dbg !116

__internal_fmad.exit3.i120:                       ; preds = %__nv_tanhf.exit112
  %1599 = fmul float %1414, %1414, !dbg !116
  %1600 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i121 = icmp eq i32 %1600, 0, !dbg !116
  %1601 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1599, float 0xBFAAC795C0000000) #5, !dbg !116
  %1602 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1599, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i122 = select i1 %.not1.i121, float %1602, float %1601, !dbg !116
  %1603 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i123 = icmp eq i32 %1603, 0, !dbg !116
  %1604 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i122, float %1599, float 0x3FC10B2820000000) #5, !dbg !116
  %1605 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i122, float %1599, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i124 = select i1 %.not2.i123, float %1605, float %1604, !dbg !116
  %1606 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i125 = icmp eq i32 %1606, 0, !dbg !116
  %1607 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i124, float %1599, float 0xBFD5553DA0000000) #5, !dbg !116
  %1608 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i124, float %1599, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i126 = select i1 %.not3.i125, float %1608, float %1607, !dbg !116
  %1609 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i127 = icmp eq i32 %1609, 0, !dbg !116
  %1610 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i126, float %1599, float 0.000000e+00) #5, !dbg !116
  %1611 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i126, float %1599, float 0.000000e+00) #5, !dbg !116
  %.04.i128 = select i1 %.not4.i127, float %1611, float %1610, !dbg !116
  %1612 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i129 = icmp eq i32 %1612, 0, !dbg !116
  %1613 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i128, float %1414, float %1414) #5, !dbg !116
  %1614 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i128, float %1414, float %1414) #5, !dbg !116
  %.02.i130 = select i1 %.not5.i129, float %1614, float %1613, !dbg !116
  br label %__nv_tanhf.exit131, !dbg !116

__nv_tanhf.exit131:                               ; preds = %__internal_fmad.exit1.i115, %__internal_fmad.exit3.i120
  %s.1.i119 = phi float [ %1598, %__internal_fmad.exit1.i115 ], [ %.02.i130, %__internal_fmad.exit3.i120 ], !dbg !116
  %1615 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i132 = icmp eq i32 %1615, 0, !dbg !116
  %1616 = tail call float @llvm.nvvm.fabs.ftz.f(float %1415) #5, !dbg !116
  %1617 = tail call float @llvm.nvvm.fabs.f(float %1415) #5, !dbg !116
  %.01.i133 = select i1 %.not.i132, float %1617, float %1616, !dbg !116
  %1618 = fcmp ult float %.01.i133, 0x3FE3333340000000, !dbg !116
  br i1 %1618, label %__internal_fmad.exit3.i139, label %__internal_fmad.exit1.i134, !dbg !116

__internal_fmad.exit1.i134:                       ; preds = %__nv_tanhf.exit131
  %1619 = fmul float %.01.i133, 0x4007154760000000, !dbg !116
  %1620 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1619) #5, !dbg !116
  %1621 = fadd float %1620, 1.000000e+00, !dbg !116
  %1622 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1621) #6, !dbg !116, !srcloc !61
  %1623 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i135 = icmp eq i32 %1623, 0, !dbg !116
  %1624 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1622, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1625 = tail call float @llvm.nvvm.fma.rn.f(float %1622, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i136 = select i1 %.not6.i135, float %1625, float %1624, !dbg !116
  %1626 = fcmp oge float %.01.i133, 0x4022059680000000, !dbg !116
  %s.0.i137 = select i1 %1626, float 1.000000e+00, float %.03.i136, !dbg !116
  %1627 = bitcast float %s.0.i137 to i32, !dbg !116
  %1628 = bitcast float %1415 to i32, !dbg !116
  %1629 = and i32 %1628, -2147483648, !dbg !116
  %1630 = or i32 %1629, %1627, !dbg !116
  %1631 = bitcast i32 %1630 to float, !dbg !116
  br label %__nv_tanhf.exit150, !dbg !116

__internal_fmad.exit3.i139:                       ; preds = %__nv_tanhf.exit131
  %1632 = fmul float %1415, %1415, !dbg !116
  %1633 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i140 = icmp eq i32 %1633, 0, !dbg !116
  %1634 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1632, float 0xBFAAC795C0000000) #5, !dbg !116
  %1635 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1632, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i141 = select i1 %.not1.i140, float %1635, float %1634, !dbg !116
  %1636 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i142 = icmp eq i32 %1636, 0, !dbg !116
  %1637 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i141, float %1632, float 0x3FC10B2820000000) #5, !dbg !116
  %1638 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i141, float %1632, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i143 = select i1 %.not2.i142, float %1638, float %1637, !dbg !116
  %1639 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i144 = icmp eq i32 %1639, 0, !dbg !116
  %1640 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i143, float %1632, float 0xBFD5553DA0000000) #5, !dbg !116
  %1641 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i143, float %1632, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i145 = select i1 %.not3.i144, float %1641, float %1640, !dbg !116
  %1642 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i146 = icmp eq i32 %1642, 0, !dbg !116
  %1643 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i145, float %1632, float 0.000000e+00) #5, !dbg !116
  %1644 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i145, float %1632, float 0.000000e+00) #5, !dbg !116
  %.04.i147 = select i1 %.not4.i146, float %1644, float %1643, !dbg !116
  %1645 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i148 = icmp eq i32 %1645, 0, !dbg !116
  %1646 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i147, float %1415, float %1415) #5, !dbg !116
  %1647 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i147, float %1415, float %1415) #5, !dbg !116
  %.02.i149 = select i1 %.not5.i148, float %1647, float %1646, !dbg !116
  br label %__nv_tanhf.exit150, !dbg !116

__nv_tanhf.exit150:                               ; preds = %__internal_fmad.exit1.i134, %__internal_fmad.exit3.i139
  %s.1.i138 = phi float [ %1631, %__internal_fmad.exit1.i134 ], [ %.02.i149, %__internal_fmad.exit3.i139 ], !dbg !116
  %1648 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i151 = icmp eq i32 %1648, 0, !dbg !116
  %1649 = tail call float @llvm.nvvm.fabs.ftz.f(float %1416) #5, !dbg !116
  %1650 = tail call float @llvm.nvvm.fabs.f(float %1416) #5, !dbg !116
  %.01.i152 = select i1 %.not.i151, float %1650, float %1649, !dbg !116
  %1651 = fcmp ult float %.01.i152, 0x3FE3333340000000, !dbg !116
  br i1 %1651, label %__internal_fmad.exit3.i158, label %__internal_fmad.exit1.i153, !dbg !116

__internal_fmad.exit1.i153:                       ; preds = %__nv_tanhf.exit150
  %1652 = fmul float %.01.i152, 0x4007154760000000, !dbg !116
  %1653 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1652) #5, !dbg !116
  %1654 = fadd float %1653, 1.000000e+00, !dbg !116
  %1655 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1654) #6, !dbg !116, !srcloc !61
  %1656 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not6.i154 = icmp eq i32 %1656, 0, !dbg !116
  %1657 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1655, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %1658 = tail call float @llvm.nvvm.fma.rn.f(float %1655, float -2.000000e+00, float 1.000000e+00) #5, !dbg !116
  %.03.i155 = select i1 %.not6.i154, float %1658, float %1657, !dbg !116
  %1659 = fcmp oge float %.01.i152, 0x4022059680000000, !dbg !116
  %s.0.i156 = select i1 %1659, float 1.000000e+00, float %.03.i155, !dbg !116
  %1660 = bitcast float %s.0.i156 to i32, !dbg !116
  %1661 = bitcast float %1416 to i32, !dbg !116
  %1662 = and i32 %1661, -2147483648, !dbg !116
  %1663 = or i32 %1662, %1660, !dbg !116
  %1664 = bitcast i32 %1663 to float, !dbg !116
  br label %__nv_tanhf.exit169, !dbg !116

__internal_fmad.exit3.i158:                       ; preds = %__nv_tanhf.exit150
  %1665 = fmul float %1416, %1416, !dbg !116
  %1666 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not1.i159 = icmp eq i32 %1666, 0, !dbg !116
  %1667 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1665, float 0xBFAAC795C0000000) #5, !dbg !116
  %1668 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1665, float 0xBFAAC795C0000000) #5, !dbg !116
  %.06.i160 = select i1 %.not1.i159, float %1668, float %1667, !dbg !116
  %1669 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not2.i161 = icmp eq i32 %1669, 0, !dbg !116
  %1670 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i160, float %1665, float 0x3FC10B2820000000) #5, !dbg !116
  %1671 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i160, float %1665, float 0x3FC10B2820000000) #5, !dbg !116
  %.05.i162 = select i1 %.not2.i161, float %1671, float %1670, !dbg !116
  %1672 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not3.i163 = icmp eq i32 %1672, 0, !dbg !116
  %1673 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i162, float %1665, float 0xBFD5553DA0000000) #5, !dbg !116
  %1674 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i162, float %1665, float 0xBFD5553DA0000000) #5, !dbg !116
  %.0.i164 = select i1 %.not3.i163, float %1674, float %1673, !dbg !116
  %1675 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not4.i165 = icmp eq i32 %1675, 0, !dbg !116
  %1676 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i164, float %1665, float 0.000000e+00) #5, !dbg !116
  %1677 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i164, float %1665, float 0.000000e+00) #5, !dbg !116
  %.04.i166 = select i1 %.not4.i165, float %1677, float %1676, !dbg !116
  %1678 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not5.i167 = icmp eq i32 %1678, 0, !dbg !116
  %1679 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i166, float %1416, float %1416) #5, !dbg !116
  %1680 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i166, float %1416, float %1416) #5, !dbg !116
  %.02.i168 = select i1 %.not5.i167, float %1680, float %1679, !dbg !116
  br label %__nv_tanhf.exit169, !dbg !116

__nv_tanhf.exit169:                               ; preds = %__internal_fmad.exit1.i153, %__internal_fmad.exit3.i158
  %s.1.i157 = phi float [ %1664, %__internal_fmad.exit1.i153 ], [ %.02.i168, %__internal_fmad.exit3.i158 ], !dbg !116
  %1681 = fadd float %s.1.i, 1.000000e+00, !dbg !117
  %1682 = fadd float %s.1.i43, 1.000000e+00, !dbg !117
  %1683 = fadd float %s.1.i62, 1.000000e+00, !dbg !117
  %1684 = fadd float %s.1.i81, 1.000000e+00, !dbg !117
  %1685 = fadd float %s.1.i100, 1.000000e+00, !dbg !117
  %1686 = fadd float %s.1.i119, 1.000000e+00, !dbg !117
  %1687 = fadd float %s.1.i138, 1.000000e+00, !dbg !117
  %1688 = fadd float %s.1.i157, 1.000000e+00, !dbg !117
  %1689 = fmul float %1369, %1681, !dbg !118
  %1690 = fmul float %1370, %1682, !dbg !118
  %1691 = fmul float %1371, %1683, !dbg !118
  %1692 = fmul float %1372, %1684, !dbg !118
  %1693 = fmul float %1373, %1685, !dbg !118
  %1694 = fmul float %1374, %1686, !dbg !118
  %1695 = fmul float %1375, %1687, !dbg !118
  %1696 = fmul float %1376, %1688, !dbg !118
  %1697 = fmul float %1342, %1689, !dbg !105
  %1698 = fmul float %1342, %1690, !dbg !105
  %1699 = fmul float %1342, %1691, !dbg !105
  %1700 = fmul float %1342, %1692, !dbg !105
  %1701 = fmul float %1342, %1693, !dbg !105
  %1702 = fmul float %1342, %1694, !dbg !105
  %1703 = fmul float %1342, %1695, !dbg !105
  %1704 = fmul float %1342, %1696, !dbg !105
  %1705 = tail call float @llvm.nvvm.round.f(float %1697) #5, !dbg !119
  %1706 = tail call float @llvm.nvvm.round.f(float %1698) #5, !dbg !119
  %1707 = tail call float @llvm.nvvm.round.f(float %1699) #5, !dbg !119
  %1708 = tail call float @llvm.nvvm.round.f(float %1700) #5, !dbg !119
  %1709 = tail call float @llvm.nvvm.round.f(float %1701) #5, !dbg !119
  %1710 = tail call float @llvm.nvvm.round.f(float %1702) #5, !dbg !119
  %1711 = tail call float @llvm.nvvm.round.f(float %1703) #5, !dbg !119
  %1712 = tail call float @llvm.nvvm.round.f(float %1704) #5, !dbg !119
  %1713 = insertelement <4 x float> poison, float %1705, i64 0, !dbg !120
  %1714 = insertelement <4 x float> %1713, float %1706, i64 1, !dbg !120
  %1715 = insertelement <4 x float> %1714, float %1707, i64 2, !dbg !120
  %1716 = insertelement <4 x float> %1715, float %1708, i64 3, !dbg !120
  %1717 = fcmp ogt <4 x float> %1716, splat (float -1.270000e+02), !dbg !120
  %1718 = fcmp uno <4 x float> %1716, zeroinitializer, !dbg !122
  %1719 = or <4 x i1> %1717, %1718, !dbg !123
  %1720 = select <4 x i1> %1719, <4 x float> %1716, <4 x float> splat (float -1.270000e+02), !dbg !124
  %1721 = fcmp olt <4 x float> %1720, splat (float 1.270000e+02), !dbg !125
  %1722 = fcmp uno <4 x float> %1720, zeroinitializer, !dbg !127
  %1723 = or <4 x i1> %1721, %1722, !dbg !128
  %1724 = fptosi <4 x float> %1720 to <4 x i8>, !dbg !129
  %1725 = select <4 x i1> %1723, <4 x i8> %1724, <4 x i8> splat (i8 127), !dbg !130
  %1726 = insertelement <4 x float> poison, float %1709, i64 0, !dbg !120
  %1727 = insertelement <4 x float> %1726, float %1710, i64 1, !dbg !120
  %1728 = insertelement <4 x float> %1727, float %1711, i64 2, !dbg !120
  %1729 = insertelement <4 x float> %1728, float %1712, i64 3, !dbg !120
  %1730 = fcmp ogt <4 x float> %1729, splat (float -1.270000e+02), !dbg !120
  %1731 = fcmp uno <4 x float> %1729, zeroinitializer, !dbg !122
  %1732 = or <4 x i1> %1730, %1731, !dbg !123
  %1733 = select <4 x i1> %1732, <4 x float> %1729, <4 x float> splat (float -1.270000e+02), !dbg !124
  %1734 = fcmp olt <4 x float> %1733, splat (float 1.270000e+02), !dbg !125
  %1735 = fcmp uno <4 x float> %1733, zeroinitializer, !dbg !127
  %1736 = or <4 x i1> %1734, %1735, !dbg !128
  %1737 = fptosi <4 x float> %1733 to <4 x i8>, !dbg !129
  %1738 = select <4 x i1> %1736, <4 x i8> %1737, <4 x i8> splat (i8 127), !dbg !130
  %1739 = getelementptr i8, ptr addrspace(1) %8, i64 %1347, !dbg !131
  %1740 = bitcast <4 x i8> %1725 to i32, !dbg !132
  %1741 = bitcast <4 x i8> %1738 to i32, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1740, i32 %1741, ptr addrspace(1) %1739, i1 %23) #5, !dbg !132
  %indvars.iv.next339 = add nuw nsw i64 %indvars.iv338, 512, !dbg !106
  %1742 = icmp samesign ult i64 %indvars.iv338, 11776, !dbg !106
  br i1 %1742, label %1343, label %1743, !dbg !106

1743:                                             ; preds = %__nv_tanhf.exit169
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 76, column: 50, scope: !6)
!40 = !DILocation(line: 34, column: 31, scope: !6)
!41 = !DILocation(line: 39, column: 41, scope: !6)
!42 = !DILocation(line: 39, column: 34, scope: !6)
!43 = !DILocation(line: 39, column: 52, scope: !6)
!44 = !DILocation(line: 40, column: 35, scope: !6)
!45 = !DILocation(line: 40, column: 42, scope: !6)
!46 = !DILocation(line: 40, column: 95, scope: !6)
!47 = !DILocation(line: 41, column: 35, scope: !6)
!48 = !DILocation(line: 41, column: 42, scope: !6)
!49 = !DILocation(line: 41, column: 95, scope: !6)
!50 = !DILocation(line: 42, column: 23, scope: !6)
!51 = !DILocation(line: 54, column: 23, scope: !6)
!52 = !DILocation(line: 55, column: 24, scope: !6)
!53 = !DILocation(line: 56, column: 24, scope: !6)
!54 = !DILocation(line: 59, column: 24, scope: !6)
!55 = !DILocation(line: 64, column: 24, scope: !6)
!56 = !DILocation(line: 60, column: 24, scope: !6)
!57 = !DILocation(line: 61, column: 24, scope: !6)
!58 = !DILocation(line: 63, column: 24, scope: !6)
!59 = !DILocation(line: 66, column: 24, scope: !6)
!60 = !DILocation(line: 67, column: 31, scope: !6)
!61 = !{i32 21046}
!62 = !DILocation(line: 69, column: 24, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !64)
!64 = !DILocation(line: 75, column: 47, scope: !6)
!65 = !DILocation(line: 70, column: 24, scope: !6)
!66 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !64)
!67 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !64)
!68 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !64)
!69 = !DILocation(line: 77, column: 29, scope: !6)
!70 = !DILocation(line: 77, column: 54, scope: !6)
!71 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !72)
!72 = !DILocation(line: 78, column: 40, scope: !6)
!73 = !DILocation(line: 94, column: 15, scope: !74, inlinedAt: !72)
!74 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!75 = !DILocation(line: 104, column: 21, scope: !74, inlinedAt: !76)
!76 = !DILocation(line: 79, column: 40, scope: !6)
!77 = !DILocation(line: 96, column: 16, scope: !74, inlinedAt: !72)
!78 = !DILocation(line: 97, column: 29, scope: !74, inlinedAt: !72)
!79 = !DILocation(line: 96, column: 21, scope: !74, inlinedAt: !72)
!80 = !DILocation(line: 80, column: 37, scope: !6)
!81 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !76)
!82 = !DILocation(line: 102, column: 15, scope: !74, inlinedAt: !76)
!83 = !DILocation(line: 104, column: 16, scope: !74, inlinedAt: !76)
!84 = !DILocation(line: 105, column: 29, scope: !74, inlinedAt: !76)
!85 = !DILocation(line: 81, column: 37, scope: !6)
!86 = !DILocation(line: 80, column: 25, scope: !6)
!87 = !DILocation(line: 81, column: 25, scope: !6)
!88 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !89)
!89 = !DILocation(line: 104, column: 46, scope: !6)
!90 = !DILocation(line: 105, column: 17, scope: !6)
!91 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !92)
!92 = !DILocation(line: 106, column: 46, scope: !6)
!93 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !94)
!94 = !DILocation(line: 107, column: 46, scope: !6)
!95 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !94)
!96 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !94)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !94)
!98 = !DILocation(line: 109, column: 24, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 112, column: 46, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 115, column: 25, scope: !6)
!105 = !DILocation(line: 117, column: 24, scope: !6)
!106 = !DILocation(line: 82, column: 40, scope: !6)
!107 = !DILocation(line: 88, column: 43, scope: !6)
!108 = !DILocation(line: 88, column: 36, scope: !6)
!109 = !DILocation(line: 88, column: 54, scope: !6)
!110 = !DILocation(line: 90, column: 24, scope: !6)
!111 = !DILocation(line: 91, column: 24, scope: !6)
!112 = !DILocation(line: 92, column: 24, scope: !6)
!113 = !DILocation(line: 94, column: 24, scope: !6)
!114 = !DILocation(line: 95, column: 24, scope: !6)
!115 = !DILocation(line: 97, column: 24, scope: !6)
!116 = !DILocation(line: 98, column: 31, scope: !6)
!117 = !DILocation(line: 100, column: 24, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 118, column: 36, scope: !6)
!120 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !121)
!121 = !DILocation(line: 121, column: 46, scope: !6)
!122 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !121)
!123 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !121)
!124 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !121)
!125 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !126)
!126 = !DILocation(line: 123, column: 46, scope: !6)
!127 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !126)
!128 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !126)
!129 = !DILocation(line: 125, column: 25, scope: !6)
!130 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !126)
!131 = !DILocation(line: 126, column: 29, scope: !6)
!132 = !DILocation(line: 126, column: 54, scope: !6)
!133 = !DILocation(line: 82, column: 4, scope: !6)
