; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = or disjoint i32 %17, 1, !dbg !12
  %21 = icmp slt i32 %17, 3600, !dbg !13
  %22 = lshr i32 %18, 5, !dbg !14
  %23 = shl i32 %18, 3, !dbg !14
  %24 = and i32 %23, 2040, !dbg !14
  %25 = or disjoint i32 %24, 4, !dbg !14
  %26 = or disjoint i32 %24, 2048, !dbg !14
  %27 = or disjoint i32 %24, 2052, !dbg !14
  %28 = shl i32 %18, 4, !dbg !14
  %29 = and i32 %28, 4080, !dbg !14
  %30 = or disjoint i32 %29, 8, !dbg !14
  %31 = icmp samesign ult i32 %26, 3072, !dbg !15
  %32 = icmp samesign ult i32 %29, 3072, !dbg !15
  %33 = mul i32 %16, 6144, !dbg !16
  %34 = mul i32 %20, 3072, !dbg !16
  %35 = add i32 %29, %33, !dbg !17
  %36 = add i32 %30, %33, !dbg !17
  %37 = add i32 %34, %29, !dbg !17
  %38 = add i32 %30, %34, !dbg !17
  %39 = sext i32 %35 to i64, !dbg !18
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !18
  %41 = sext i32 %36 to i64, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !18
  %43 = sext i32 %37 to i64, !dbg !18
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !18
  %45 = sext i32 %38 to i64, !dbg !18
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !18
  %47 = and i1 %21, %32, !dbg !19
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %47) #5, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !20
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !20
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !20
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !20
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !20
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !20
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !20
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !20
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !20
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !20
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !20
  %63 = extractelement <2 x bfloat> %56, i64 0, !dbg !20
  %64 = extractelement <2 x bfloat> %56, i64 1, !dbg !20
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %47) #5, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !20
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !20
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !20
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !20
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !20
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !20
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !20
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !20
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !20
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !20
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !20
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !20
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !20
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %47) #5, !dbg !20
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !20
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !20
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !20
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !20
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !20
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !20
  %91 = extractelement <2 x bfloat> %84, i64 0, !dbg !20
  %92 = extractelement <2 x bfloat> %84, i64 1, !dbg !20
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !20
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !20
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !20
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !20
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !20
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !20
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %47) #5, !dbg !20
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !20
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !20
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !20
  %104 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !20
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !20
  %106 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !20
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !20
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !20
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !20
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !20
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !20
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !20
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !20
  %114 = extractelement <2 x bfloat> %107, i64 0, !dbg !20
  %115 = extractelement <2 x bfloat> %107, i64 1, !dbg !20
  %116 = fpext bfloat %57 to float, !dbg !21
  %117 = fpext bfloat %58 to float, !dbg !21
  %118 = fpext bfloat %59 to float, !dbg !21
  %119 = fpext bfloat %60 to float, !dbg !21
  %120 = fpext bfloat %61 to float, !dbg !21
  %121 = fpext bfloat %62 to float, !dbg !21
  %122 = fpext bfloat %63 to float, !dbg !21
  %123 = fpext bfloat %64 to float, !dbg !21
  %124 = fpext bfloat %74 to float, !dbg !21
  %125 = fpext bfloat %75 to float, !dbg !21
  %126 = fpext bfloat %76 to float, !dbg !21
  %127 = fpext bfloat %77 to float, !dbg !21
  %128 = fpext bfloat %78 to float, !dbg !21
  %129 = fpext bfloat %79 to float, !dbg !21
  %130 = fpext bfloat %80 to float, !dbg !21
  %131 = fpext bfloat %81 to float, !dbg !21
  %132 = fpext bfloat %91 to float, !dbg !21
  %133 = fpext bfloat %92 to float, !dbg !21
  %134 = fpext bfloat %93 to float, !dbg !21
  %135 = fpext bfloat %94 to float, !dbg !21
  %136 = fpext bfloat %95 to float, !dbg !21
  %137 = fpext bfloat %96 to float, !dbg !21
  %138 = fpext bfloat %97 to float, !dbg !21
  %139 = fpext bfloat %98 to float, !dbg !21
  %140 = fpext bfloat %108 to float, !dbg !21
  %141 = fpext bfloat %109 to float, !dbg !21
  %142 = fpext bfloat %110 to float, !dbg !21
  %143 = fpext bfloat %111 to float, !dbg !21
  %144 = fpext bfloat %112 to float, !dbg !21
  %145 = fpext bfloat %113 to float, !dbg !21
  %146 = fpext bfloat %114 to float, !dbg !21
  %147 = fpext bfloat %115 to float, !dbg !21
  %148 = select i1 %47, float %116, float 0.000000e+00, !dbg !22
  %149 = select i1 %47, float %117, float 0.000000e+00, !dbg !22
  %150 = select i1 %47, float %118, float 0.000000e+00, !dbg !22
  %151 = select i1 %47, float %119, float 0.000000e+00, !dbg !22
  %152 = select i1 %47, float %120, float 0.000000e+00, !dbg !22
  %153 = select i1 %47, float %121, float 0.000000e+00, !dbg !22
  %154 = select i1 %47, float %122, float 0.000000e+00, !dbg !22
  %155 = select i1 %47, float %123, float 0.000000e+00, !dbg !22
  %156 = select i1 %47, float %124, float 0.000000e+00, !dbg !22
  %157 = select i1 %47, float %125, float 0.000000e+00, !dbg !22
  %158 = select i1 %47, float %126, float 0.000000e+00, !dbg !22
  %159 = select i1 %47, float %127, float 0.000000e+00, !dbg !22
  %160 = select i1 %47, float %128, float 0.000000e+00, !dbg !22
  %161 = select i1 %47, float %129, float 0.000000e+00, !dbg !22
  %162 = select i1 %47, float %130, float 0.000000e+00, !dbg !22
  %163 = select i1 %47, float %131, float 0.000000e+00, !dbg !22
  %164 = select i1 %47, float %132, float 0.000000e+00, !dbg !22
  %165 = select i1 %47, float %133, float 0.000000e+00, !dbg !22
  %166 = select i1 %47, float %134, float 0.000000e+00, !dbg !22
  %167 = select i1 %47, float %135, float 0.000000e+00, !dbg !22
  %168 = select i1 %47, float %136, float 0.000000e+00, !dbg !22
  %169 = select i1 %47, float %137, float 0.000000e+00, !dbg !22
  %170 = select i1 %47, float %138, float 0.000000e+00, !dbg !22
  %171 = select i1 %47, float %139, float 0.000000e+00, !dbg !22
  %172 = select i1 %47, float %140, float 0.000000e+00, !dbg !22
  %173 = select i1 %47, float %141, float 0.000000e+00, !dbg !22
  %174 = select i1 %47, float %142, float 0.000000e+00, !dbg !22
  %175 = select i1 %47, float %143, float 0.000000e+00, !dbg !22
  %176 = select i1 %47, float %144, float 0.000000e+00, !dbg !22
  %177 = select i1 %47, float %145, float 0.000000e+00, !dbg !22
  %178 = select i1 %47, float %146, float 0.000000e+00, !dbg !22
  %179 = select i1 %47, float %147, float 0.000000e+00, !dbg !22
  %180 = select i1 %47, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %181 = fsub float %149, %148, !dbg !24
  %182 = select i1 %47, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !30
  %184 = tail call float @llvm.nvvm.div.full(float %180, float %182), !dbg !31
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !32
  %186 = fmul float %185, %181, !dbg !33
  %187 = fadd float %148, %186, !dbg !34
  %188 = fmul float %181, %181, !dbg !35
  %189 = fmul float %180, %188, !dbg !36
  %190 = fmul float %185, %189, !dbg !37
  %191 = fadd float %190, 0.000000e+00, !dbg !38
  %192 = fsub float %150, %187, !dbg !24
  %193 = select i1 %47, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !30
  %195 = tail call float @llvm.nvvm.div.full(float %180, float %193), !dbg !31
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !32
  %197 = fmul float %196, %192, !dbg !33
  %198 = fadd float %187, %197, !dbg !34
  %199 = fmul float %192, %192, !dbg !35
  %200 = fmul float %182, %199, !dbg !36
  %201 = fmul float %196, %200, !dbg !37
  %202 = fadd float %191, %201, !dbg !38
  %203 = fsub float %151, %198, !dbg !24
  %204 = select i1 %47, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !30
  %206 = tail call float @llvm.nvvm.div.full(float %180, float %204), !dbg !31
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !32
  %208 = fmul float %207, %203, !dbg !33
  %209 = fadd float %198, %208, !dbg !34
  %210 = fmul float %203, %203, !dbg !35
  %211 = fmul float %193, %210, !dbg !36
  %212 = fmul float %207, %211, !dbg !37
  %213 = fadd float %202, %212, !dbg !38
  %214 = fsub float %152, %209, !dbg !24
  %215 = select i1 %47, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !30
  %217 = tail call float @llvm.nvvm.div.full(float %180, float %215), !dbg !31
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !32
  %219 = fmul float %218, %214, !dbg !33
  %220 = fadd float %209, %219, !dbg !34
  %221 = fmul float %214, %214, !dbg !35
  %222 = fmul float %204, %221, !dbg !36
  %223 = fmul float %218, %222, !dbg !37
  %224 = fadd float %213, %223, !dbg !38
  %225 = fsub float %153, %220, !dbg !24
  %226 = select i1 %47, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !30
  %228 = tail call float @llvm.nvvm.div.full(float %180, float %226), !dbg !31
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !32
  %230 = fmul float %229, %225, !dbg !33
  %231 = fadd float %220, %230, !dbg !34
  %232 = fmul float %225, %225, !dbg !35
  %233 = fmul float %215, %232, !dbg !36
  %234 = fmul float %229, %233, !dbg !37
  %235 = fadd float %224, %234, !dbg !38
  %236 = fsub float %154, %231, !dbg !24
  %237 = select i1 %47, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !30
  %239 = tail call float @llvm.nvvm.div.full(float %180, float %237), !dbg !31
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !32
  %241 = fmul float %240, %236, !dbg !33
  %242 = fadd float %231, %241, !dbg !34
  %243 = fmul float %236, %236, !dbg !35
  %244 = fmul float %226, %243, !dbg !36
  %245 = fmul float %240, %244, !dbg !37
  %246 = fadd float %235, %245, !dbg !38
  %247 = fsub float %155, %242, !dbg !24
  %248 = select i1 %47, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !30
  %250 = tail call float @llvm.nvvm.div.full(float %180, float %248), !dbg !31
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !32
  %252 = fmul float %251, %247, !dbg !33
  %253 = fadd float %242, %252, !dbg !34
  %254 = fmul float %247, %247, !dbg !35
  %255 = fmul float %237, %254, !dbg !36
  %256 = fmul float %251, %255, !dbg !37
  %257 = fadd float %246, %256, !dbg !38
  %258 = fsub float %156, %253, !dbg !24
  %259 = select i1 %47, float 9.000000e+00, float 0.000000e+00, !dbg !29
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !30
  %261 = tail call float @llvm.nvvm.div.full(float %180, float %259), !dbg !31
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !32
  %263 = fmul float %262, %258, !dbg !33
  %264 = fadd float %253, %263, !dbg !34
  %265 = fadd float %257, 0.000000e+00, !dbg !39
  %266 = fmul float %258, %258, !dbg !35
  %267 = fmul float %248, %266, !dbg !36
  %268 = fmul float %262, %267, !dbg !37
  %269 = fadd float %265, %268, !dbg !38
  %270 = fsub float %157, %264, !dbg !24
  %271 = select i1 %47, float 1.000000e+01, float 0.000000e+00, !dbg !29
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !30
  %273 = tail call float @llvm.nvvm.div.full(float %180, float %271), !dbg !31
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !32
  %275 = fmul float %274, %270, !dbg !33
  %276 = fadd float %264, %275, !dbg !34
  %277 = fmul float %270, %270, !dbg !35
  %278 = fmul float %259, %277, !dbg !36
  %279 = fmul float %274, %278, !dbg !37
  %280 = fadd float %269, %279, !dbg !38
  %281 = fsub float %158, %276, !dbg !24
  %282 = select i1 %47, float 1.100000e+01, float 0.000000e+00, !dbg !29
  %283 = fcmp oeq float %282, 0.000000e+00, !dbg !30
  %284 = tail call float @llvm.nvvm.div.full(float %180, float %282), !dbg !31
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !32
  %286 = fmul float %285, %281, !dbg !33
  %287 = fadd float %276, %286, !dbg !34
  %288 = fmul float %281, %281, !dbg !35
  %289 = fmul float %271, %288, !dbg !36
  %290 = fmul float %285, %289, !dbg !37
  %291 = fadd float %280, %290, !dbg !38
  %292 = fsub float %159, %287, !dbg !24
  %293 = select i1 %47, float 1.200000e+01, float 0.000000e+00, !dbg !29
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !30
  %295 = tail call float @llvm.nvvm.div.full(float %180, float %293), !dbg !31
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !32
  %297 = fmul float %296, %292, !dbg !33
  %298 = fadd float %287, %297, !dbg !34
  %299 = fmul float %292, %292, !dbg !35
  %300 = fmul float %282, %299, !dbg !36
  %301 = fmul float %296, %300, !dbg !37
  %302 = fadd float %291, %301, !dbg !38
  %303 = fsub float %160, %298, !dbg !24
  %304 = select i1 %47, float 1.300000e+01, float 0.000000e+00, !dbg !29
  %305 = fcmp oeq float %304, 0.000000e+00, !dbg !30
  %306 = tail call float @llvm.nvvm.div.full(float %180, float %304), !dbg !31
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !32
  %308 = fmul float %307, %303, !dbg !33
  %309 = fadd float %298, %308, !dbg !34
  %310 = fmul float %303, %303, !dbg !35
  %311 = fmul float %293, %310, !dbg !36
  %312 = fmul float %307, %311, !dbg !37
  %313 = fadd float %302, %312, !dbg !38
  %314 = fsub float %161, %309, !dbg !24
  %315 = select i1 %47, float 1.400000e+01, float 0.000000e+00, !dbg !29
  %316 = fcmp oeq float %315, 0.000000e+00, !dbg !30
  %317 = tail call float @llvm.nvvm.div.full(float %180, float %315), !dbg !31
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !32
  %319 = fmul float %318, %314, !dbg !33
  %320 = fadd float %309, %319, !dbg !34
  %321 = fmul float %314, %314, !dbg !35
  %322 = fmul float %304, %321, !dbg !36
  %323 = fmul float %318, %322, !dbg !37
  %324 = fadd float %313, %323, !dbg !38
  %325 = fsub float %162, %320, !dbg !24
  %326 = select i1 %47, float 1.500000e+01, float 0.000000e+00, !dbg !29
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !30
  %328 = tail call float @llvm.nvvm.div.full(float %180, float %326), !dbg !31
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !32
  %330 = fmul float %329, %325, !dbg !33
  %331 = fadd float %320, %330, !dbg !34
  %332 = fadd float %324, 0.000000e+00, !dbg !39
  %333 = fmul float %325, %325, !dbg !35
  %334 = fmul float %315, %333, !dbg !36
  %335 = fmul float %329, %334, !dbg !37
  %336 = fadd float %332, %335, !dbg !38
  %337 = fsub float %163, %331, !dbg !24
  %338 = select i1 %47, float 1.600000e+01, float 0.000000e+00, !dbg !29
  %339 = fcmp oeq float %338, 0.000000e+00, !dbg !30
  %340 = tail call float @llvm.nvvm.div.full(float %180, float %338), !dbg !31
  %341 = select i1 %339, float 0.000000e+00, float %340, !dbg !32
  %342 = fmul float %341, %337, !dbg !33
  %343 = fadd float %331, %342, !dbg !34
  %344 = fmul float %337, %337, !dbg !35
  %345 = fmul float %326, %344, !dbg !36
  %346 = fmul float %341, %345, !dbg !37
  %347 = fadd float %336, %346, !dbg !38
  %348 = fsub float %165, %164, !dbg !24
  %349 = fmul float %185, %348, !dbg !33
  %350 = fadd float %164, %349, !dbg !34
  %351 = fmul float %348, %348, !dbg !35
  %352 = fmul float %180, %351, !dbg !36
  %353 = fmul float %185, %352, !dbg !37
  %354 = fadd float %353, 0.000000e+00, !dbg !38
  %355 = fsub float %166, %350, !dbg !24
  %356 = fmul float %196, %355, !dbg !33
  %357 = fadd float %350, %356, !dbg !34
  %358 = fmul float %355, %355, !dbg !35
  %359 = fmul float %182, %358, !dbg !36
  %360 = fmul float %196, %359, !dbg !37
  %361 = fadd float %354, %360, !dbg !38
  %362 = fsub float %167, %357, !dbg !24
  %363 = fmul float %207, %362, !dbg !33
  %364 = fadd float %357, %363, !dbg !34
  %365 = fmul float %362, %362, !dbg !35
  %366 = fmul float %193, %365, !dbg !36
  %367 = fmul float %207, %366, !dbg !37
  %368 = fadd float %361, %367, !dbg !38
  %369 = fsub float %168, %364, !dbg !24
  %370 = fmul float %218, %369, !dbg !33
  %371 = fadd float %364, %370, !dbg !34
  %372 = fmul float %369, %369, !dbg !35
  %373 = fmul float %204, %372, !dbg !36
  %374 = fmul float %218, %373, !dbg !37
  %375 = fadd float %368, %374, !dbg !38
  %376 = fsub float %169, %371, !dbg !24
  %377 = fmul float %229, %376, !dbg !33
  %378 = fadd float %371, %377, !dbg !34
  %379 = fmul float %376, %376, !dbg !35
  %380 = fmul float %215, %379, !dbg !36
  %381 = fmul float %229, %380, !dbg !37
  %382 = fadd float %375, %381, !dbg !38
  %383 = fsub float %170, %378, !dbg !24
  %384 = fmul float %240, %383, !dbg !33
  %385 = fadd float %378, %384, !dbg !34
  %386 = fmul float %383, %383, !dbg !35
  %387 = fmul float %226, %386, !dbg !36
  %388 = fmul float %240, %387, !dbg !37
  %389 = fadd float %382, %388, !dbg !38
  %390 = fsub float %171, %385, !dbg !24
  %391 = fmul float %251, %390, !dbg !33
  %392 = fadd float %385, %391, !dbg !34
  %393 = fmul float %390, %390, !dbg !35
  %394 = fmul float %237, %393, !dbg !36
  %395 = fmul float %251, %394, !dbg !37
  %396 = fadd float %389, %395, !dbg !38
  %397 = fsub float %172, %392, !dbg !24
  %398 = fmul float %262, %397, !dbg !33
  %399 = fadd float %392, %398, !dbg !34
  %400 = fadd float %396, 0.000000e+00, !dbg !39
  %401 = fmul float %397, %397, !dbg !35
  %402 = fmul float %248, %401, !dbg !36
  %403 = fmul float %262, %402, !dbg !37
  %404 = fadd float %400, %403, !dbg !38
  %405 = fsub float %173, %399, !dbg !24
  %406 = fmul float %274, %405, !dbg !33
  %407 = fadd float %399, %406, !dbg !34
  %408 = fmul float %405, %405, !dbg !35
  %409 = fmul float %259, %408, !dbg !36
  %410 = fmul float %274, %409, !dbg !37
  %411 = fadd float %404, %410, !dbg !38
  %412 = fsub float %174, %407, !dbg !24
  %413 = fmul float %285, %412, !dbg !33
  %414 = fadd float %407, %413, !dbg !34
  %415 = fmul float %412, %412, !dbg !35
  %416 = fmul float %271, %415, !dbg !36
  %417 = fmul float %285, %416, !dbg !37
  %418 = fadd float %411, %417, !dbg !38
  %419 = fsub float %175, %414, !dbg !24
  %420 = fmul float %296, %419, !dbg !33
  %421 = fadd float %414, %420, !dbg !34
  %422 = fmul float %419, %419, !dbg !35
  %423 = fmul float %282, %422, !dbg !36
  %424 = fmul float %296, %423, !dbg !37
  %425 = fadd float %418, %424, !dbg !38
  %426 = fsub float %176, %421, !dbg !24
  %427 = fmul float %307, %426, !dbg !33
  %428 = fadd float %421, %427, !dbg !34
  %429 = fmul float %426, %426, !dbg !35
  %430 = fmul float %293, %429, !dbg !36
  %431 = fmul float %307, %430, !dbg !37
  %432 = fadd float %425, %431, !dbg !38
  %433 = fsub float %177, %428, !dbg !24
  %434 = fmul float %318, %433, !dbg !33
  %435 = fadd float %428, %434, !dbg !34
  %436 = fmul float %433, %433, !dbg !35
  %437 = fmul float %304, %436, !dbg !36
  %438 = fmul float %318, %437, !dbg !37
  %439 = fadd float %432, %438, !dbg !38
  %440 = fsub float %178, %435, !dbg !24
  %441 = fmul float %329, %440, !dbg !33
  %442 = fadd float %435, %441, !dbg !34
  %443 = fadd float %439, 0.000000e+00, !dbg !39
  %444 = fmul float %440, %440, !dbg !35
  %445 = fmul float %315, %444, !dbg !36
  %446 = fmul float %329, %445, !dbg !37
  %447 = fadd float %443, %446, !dbg !38
  %448 = fsub float %179, %442, !dbg !24
  %449 = fmul float %341, %448, !dbg !33
  %450 = fadd float %442, %449, !dbg !34
  %451 = fmul float %448, %448, !dbg !35
  %452 = fmul float %326, %451, !dbg !36
  %453 = fmul float %341, %452, !dbg !37
  %454 = fadd float %447, %453, !dbg !38
  %455 = bitcast float %343 to i32, !dbg !40
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 16, i32 31), !dbg !40
  %457 = bitcast i32 %456 to float, !dbg !40
  %458 = bitcast float %347 to i32, !dbg !40
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 16, i32 31), !dbg !40
  %460 = bitcast i32 %459 to float, !dbg !40
  %461 = bitcast float %338 to i32, !dbg !40
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 16, i32 31), !dbg !40
  %463 = bitcast i32 %462 to float, !dbg !40
  %464 = fsub float %457, %343, !dbg !24
  %465 = fadd float %338, %463, !dbg !29
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !30
  %467 = tail call float @llvm.nvvm.div.full(float %463, float %465), !dbg !31
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !32
  %469 = fmul float %468, %464, !dbg !33
  %470 = fadd float %343, %469, !dbg !34
  %471 = fadd float %347, %460, !dbg !39
  %472 = fmul float %464, %464, !dbg !35
  %473 = fmul float %338, %472, !dbg !36
  %474 = fmul float %468, %473, !dbg !37
  %475 = fadd float %471, %474, !dbg !38
  %476 = bitcast float %470 to i32, !dbg !40
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 8, i32 31), !dbg !40
  %478 = bitcast i32 %477 to float, !dbg !40
  %479 = bitcast float %475 to i32, !dbg !40
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !40
  %481 = bitcast i32 %480 to float, !dbg !40
  %482 = bitcast float %465 to i32, !dbg !40
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 8, i32 31), !dbg !40
  %484 = bitcast i32 %483 to float, !dbg !40
  %485 = fsub float %478, %470, !dbg !24
  %486 = fadd float %465, %484, !dbg !29
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !30
  %488 = tail call float @llvm.nvvm.div.full(float %484, float %486), !dbg !31
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !32
  %490 = fmul float %489, %485, !dbg !33
  %491 = fadd float %470, %490, !dbg !34
  %492 = fadd float %475, %481, !dbg !39
  %493 = fmul float %485, %485, !dbg !35
  %494 = fmul float %465, %493, !dbg !36
  %495 = fmul float %489, %494, !dbg !37
  %496 = fadd float %492, %495, !dbg !38
  %497 = bitcast float %491 to i32, !dbg !40
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 4, i32 31), !dbg !40
  %499 = bitcast i32 %498 to float, !dbg !40
  %500 = bitcast float %496 to i32, !dbg !40
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 4, i32 31), !dbg !40
  %502 = bitcast i32 %501 to float, !dbg !40
  %503 = bitcast float %486 to i32, !dbg !40
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 4, i32 31), !dbg !40
  %505 = bitcast i32 %504 to float, !dbg !40
  %506 = fsub float %499, %491, !dbg !24
  %507 = fadd float %486, %505, !dbg !29
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !30
  %509 = tail call float @llvm.nvvm.div.full(float %505, float %507), !dbg !31
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !32
  %511 = fmul float %510, %506, !dbg !33
  %512 = fadd float %491, %511, !dbg !34
  %513 = fadd float %496, %502, !dbg !39
  %514 = fmul float %506, %506, !dbg !35
  %515 = fmul float %486, %514, !dbg !36
  %516 = fmul float %510, %515, !dbg !37
  %517 = fadd float %513, %516, !dbg !38
  %518 = bitcast float %512 to i32, !dbg !40
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !40
  %520 = bitcast i32 %519 to float, !dbg !40
  %521 = bitcast float %517 to i32, !dbg !40
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !40
  %523 = bitcast i32 %522 to float, !dbg !40
  %524 = bitcast float %507 to i32, !dbg !40
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 2, i32 31), !dbg !40
  %526 = bitcast i32 %525 to float, !dbg !40
  %527 = fsub float %520, %512, !dbg !24
  %528 = fadd float %507, %526, !dbg !29
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !30
  %530 = tail call float @llvm.nvvm.div.full(float %526, float %528), !dbg !31
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !32
  %532 = fmul float %531, %527, !dbg !33
  %533 = fadd float %512, %532, !dbg !34
  %534 = fadd float %517, %523, !dbg !39
  %535 = fmul float %527, %527, !dbg !35
  %536 = fmul float %507, %535, !dbg !36
  %537 = fmul float %531, %536, !dbg !37
  %538 = fadd float %534, %537, !dbg !38
  %539 = bitcast float %533 to i32, !dbg !40
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !40
  %541 = bitcast i32 %540 to float, !dbg !40
  %542 = bitcast float %538 to i32, !dbg !40
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !40
  %544 = bitcast i32 %543 to float, !dbg !40
  %545 = bitcast float %528 to i32, !dbg !40
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !40
  %547 = bitcast i32 %546 to float, !dbg !40
  %548 = fsub float %541, %533, !dbg !24
  %549 = fadd float %528, %547, !dbg !29
  %550 = fcmp oeq float %549, 0.000000e+00, !dbg !30
  %551 = tail call float @llvm.nvvm.div.full(float %547, float %549), !dbg !31
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !32
  %553 = fmul float %552, %548, !dbg !33
  %554 = fadd float %533, %553, !dbg !34
  %555 = fadd float %538, %544, !dbg !39
  %556 = fmul float %548, %548, !dbg !35
  %557 = fmul float %528, %556, !dbg !36
  %558 = fmul float %552, %557, !dbg !37
  %559 = fadd float %555, %558, !dbg !38
  %560 = bitcast float %450 to i32, !dbg !40
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 16, i32 31), !dbg !40
  %562 = bitcast i32 %561 to float, !dbg !40
  %563 = bitcast float %454 to i32, !dbg !40
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 16, i32 31), !dbg !40
  %565 = bitcast i32 %564 to float, !dbg !40
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 16, i32 31), !dbg !40
  %567 = bitcast i32 %566 to float, !dbg !40
  %568 = fsub float %562, %450, !dbg !24
  %569 = fadd float %338, %567, !dbg !29
  %570 = fcmp oeq float %569, 0.000000e+00, !dbg !30
  %571 = tail call float @llvm.nvvm.div.full(float %567, float %569), !dbg !31
  %572 = select i1 %570, float 0.000000e+00, float %571, !dbg !32
  %573 = fmul float %572, %568, !dbg !33
  %574 = fadd float %450, %573, !dbg !34
  %575 = fadd float %454, %565, !dbg !39
  %576 = fmul float %568, %568, !dbg !35
  %577 = fmul float %338, %576, !dbg !36
  %578 = fmul float %572, %577, !dbg !37
  %579 = fadd float %575, %578, !dbg !38
  %580 = bitcast float %574 to i32, !dbg !40
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 8, i32 31), !dbg !40
  %582 = bitcast i32 %581 to float, !dbg !40
  %583 = bitcast float %579 to i32, !dbg !40
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 8, i32 31), !dbg !40
  %585 = bitcast i32 %584 to float, !dbg !40
  %586 = bitcast float %569 to i32, !dbg !40
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 8, i32 31), !dbg !40
  %588 = bitcast i32 %587 to float, !dbg !40
  %589 = fsub float %582, %574, !dbg !24
  %590 = fadd float %569, %588, !dbg !29
  %591 = fcmp oeq float %590, 0.000000e+00, !dbg !30
  %592 = tail call float @llvm.nvvm.div.full(float %588, float %590), !dbg !31
  %593 = select i1 %591, float 0.000000e+00, float %592, !dbg !32
  %594 = fmul float %593, %589, !dbg !33
  %595 = fadd float %574, %594, !dbg !34
  %596 = fadd float %579, %585, !dbg !39
  %597 = fmul float %589, %589, !dbg !35
  %598 = fmul float %569, %597, !dbg !36
  %599 = fmul float %593, %598, !dbg !37
  %600 = fadd float %596, %599, !dbg !38
  %601 = bitcast float %595 to i32, !dbg !40
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 4, i32 31), !dbg !40
  %603 = bitcast i32 %602 to float, !dbg !40
  %604 = bitcast float %600 to i32, !dbg !40
  %605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 4, i32 31), !dbg !40
  %606 = bitcast i32 %605 to float, !dbg !40
  %607 = bitcast float %590 to i32, !dbg !40
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 4, i32 31), !dbg !40
  %609 = bitcast i32 %608 to float, !dbg !40
  %610 = fsub float %603, %595, !dbg !24
  %611 = fadd float %590, %609, !dbg !29
  %612 = fcmp oeq float %611, 0.000000e+00, !dbg !30
  %613 = tail call float @llvm.nvvm.div.full(float %609, float %611), !dbg !31
  %614 = select i1 %612, float 0.000000e+00, float %613, !dbg !32
  %615 = fmul float %614, %610, !dbg !33
  %616 = fadd float %595, %615, !dbg !34
  %617 = fadd float %600, %606, !dbg !39
  %618 = fmul float %610, %610, !dbg !35
  %619 = fmul float %590, %618, !dbg !36
  %620 = fmul float %614, %619, !dbg !37
  %621 = fadd float %617, %620, !dbg !38
  %622 = bitcast float %616 to i32, !dbg !40
  %623 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %622, i32 2, i32 31), !dbg !40
  %624 = bitcast i32 %623 to float, !dbg !40
  %625 = bitcast float %621 to i32, !dbg !40
  %626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %625, i32 2, i32 31), !dbg !40
  %627 = bitcast i32 %626 to float, !dbg !40
  %628 = bitcast float %611 to i32, !dbg !40
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 2, i32 31), !dbg !40
  %630 = bitcast i32 %629 to float, !dbg !40
  %631 = fsub float %624, %616, !dbg !24
  %632 = fadd float %611, %630, !dbg !29
  %633 = fcmp oeq float %632, 0.000000e+00, !dbg !30
  %634 = tail call float @llvm.nvvm.div.full(float %630, float %632), !dbg !31
  %635 = select i1 %633, float 0.000000e+00, float %634, !dbg !32
  %636 = fmul float %635, %631, !dbg !33
  %637 = fadd float %616, %636, !dbg !34
  %638 = fadd float %621, %627, !dbg !39
  %639 = fmul float %631, %631, !dbg !35
  %640 = fmul float %611, %639, !dbg !36
  %641 = fmul float %635, %640, !dbg !37
  %642 = fadd float %638, %641, !dbg !38
  %643 = bitcast float %637 to i32, !dbg !40
  %644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 1, i32 31), !dbg !40
  %645 = bitcast i32 %644 to float, !dbg !40
  %646 = bitcast float %642 to i32, !dbg !40
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 1, i32 31), !dbg !40
  %648 = bitcast i32 %647 to float, !dbg !40
  %649 = bitcast float %632 to i32, !dbg !40
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 1, i32 31), !dbg !40
  %651 = bitcast i32 %650 to float, !dbg !40
  %652 = fsub float %645, %637, !dbg !24
  %653 = fadd float %632, %651, !dbg !29
  %654 = fcmp oeq float %653, 0.000000e+00, !dbg !30
  %655 = tail call float @llvm.nvvm.div.full(float %651, float %653), !dbg !31
  %656 = select i1 %654, float 0.000000e+00, float %655, !dbg !32
  %657 = fmul float %656, %652, !dbg !33
  %658 = fadd float %637, %657, !dbg !34
  %659 = fadd float %642, %648, !dbg !39
  %660 = fmul float %652, %652, !dbg !35
  %661 = fmul float %632, %660, !dbg !36
  %662 = fmul float %656, %661, !dbg !37
  %663 = fadd float %659, %662, !dbg !38
  %664 = and i32 %22, 7, !dbg !40
  %665 = icmp eq i32 %19, 0, !dbg !40
  %666 = getelementptr float, ptr addrspace(3) @global_smem, i32 %664, !dbg !40
  %667 = bitcast float %554 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %666, <1 x i32> %667, i1 %665) #5, !dbg !40
  %668 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %664, !dbg !40
  %669 = bitcast float %559 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %668, <1 x i32> %669, i1 %665) #5, !dbg !40
  %670 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %664, !dbg !40
  %671 = bitcast float %549 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %670, <1 x i32> %671, i1 %665) #5, !dbg !40
  %672 = or disjoint i32 %664, 8, !dbg !40
  %673 = getelementptr float, ptr addrspace(3) @global_smem, i32 %672, !dbg !40
  %674 = bitcast float %658 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %673, <1 x i32> %674, i1 %665) #5, !dbg !40
  %675 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %672, !dbg !40
  %676 = bitcast float %663 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %675, <1 x i32> %676, i1 %665) #5, !dbg !40
  %677 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %672, !dbg !40
  %678 = bitcast float %653 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %678, i1 %665) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %679 = icmp slt i32 %18, 16, !dbg !40
  %680 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %681 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %680, i1 %679) #5, !dbg !40
  %682 = bitcast i32 %681 to float, !dbg !40
  %683 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !40
  %684 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %683, i1 %679) #5, !dbg !40
  %685 = bitcast i32 %684 to float, !dbg !40
  %686 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !40
  %687 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %686, i1 %679) #5, !dbg !40
  %688 = bitcast i32 %687 to float, !dbg !40
  %689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 4, i32 31), !dbg !40
  %690 = bitcast i32 %689 to float, !dbg !40
  %691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 4, i32 31), !dbg !40
  %692 = bitcast i32 %691 to float, !dbg !40
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 4, i32 31), !dbg !40
  %694 = bitcast i32 %693 to float, !dbg !40
  %695 = fsub float %690, %682, !dbg !24
  %696 = fadd float %688, %694, !dbg !29
  %697 = fcmp oeq float %696, 0.000000e+00, !dbg !30
  %698 = tail call float @llvm.nvvm.div.full(float %694, float %696), !dbg !31
  %699 = select i1 %697, float 0.000000e+00, float %698, !dbg !32
  %700 = fmul float %695, %699, !dbg !33
  %701 = fadd float %700, %682, !dbg !34
  %702 = fadd float %685, %692, !dbg !39
  %703 = fmul float %695, %695, !dbg !35
  %704 = fmul float %703, %688, !dbg !36
  %705 = fmul float %704, %699, !dbg !37
  %706 = fadd float %702, %705, !dbg !38
  %707 = bitcast float %701 to i32, !dbg !40
  %708 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %707, i32 2, i32 31), !dbg !40
  %709 = bitcast i32 %708 to float, !dbg !40
  %710 = bitcast float %706 to i32, !dbg !40
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 2, i32 31), !dbg !40
  %712 = bitcast i32 %711 to float, !dbg !40
  %713 = bitcast float %696 to i32, !dbg !40
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 2, i32 31), !dbg !40
  %715 = bitcast i32 %714 to float, !dbg !40
  %716 = fsub float %709, %701, !dbg !24
  %717 = fadd float %696, %715, !dbg !29
  %718 = fcmp oeq float %717, 0.000000e+00, !dbg !30
  %719 = tail call float @llvm.nvvm.div.full(float %715, float %717), !dbg !31
  %720 = select i1 %718, float 0.000000e+00, float %719, !dbg !32
  %721 = fmul float %716, %720, !dbg !33
  %722 = fadd float %701, %721, !dbg !34
  %723 = fadd float %706, %712, !dbg !39
  %724 = fmul float %716, %716, !dbg !35
  %725 = fmul float %696, %724, !dbg !36
  %726 = fmul float %720, %725, !dbg !37
  %727 = fadd float %723, %726, !dbg !38
  %728 = bitcast float %722 to i32, !dbg !40
  %729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %728, i32 1, i32 31), !dbg !40
  %730 = bitcast i32 %729 to float, !dbg !40
  %731 = bitcast float %727 to i32, !dbg !40
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 1, i32 31), !dbg !40
  %733 = bitcast i32 %732 to float, !dbg !40
  %734 = bitcast float %717 to i32, !dbg !40
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 1, i32 31), !dbg !40
  %736 = bitcast i32 %735 to float, !dbg !40
  %737 = fsub float %730, %722, !dbg !24
  %738 = fadd float %717, %736, !dbg !29
  %739 = fcmp oeq float %738, 0.000000e+00, !dbg !30
  %740 = tail call float @llvm.nvvm.div.full(float %736, float %738), !dbg !31
  %741 = select i1 %739, float 0.000000e+00, float %740, !dbg !32
  %742 = fmul float %737, %741, !dbg !33
  %743 = fadd float %722, %742, !dbg !34
  %744 = fadd float %727, %733, !dbg !39
  %745 = fmul float %737, %737, !dbg !35
  %746 = fmul float %717, %745, !dbg !36
  %747 = fmul float %741, %746, !dbg !37
  %748 = fadd float %744, %747, !dbg !38
  %749 = and i32 %18, 7, !dbg !40
  %750 = icmp eq i32 %749, 0, !dbg !40
  %751 = and i1 %679, %750, !dbg !40
  %752 = bitcast float %743 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %752, i1 %751) #5, !dbg !40
  %753 = bitcast float %748 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %683, <1 x i32> %753, i1 %751) #5, !dbg !40
  %754 = bitcast float %738 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %686, <1 x i32> %754, i1 %751) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %755 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %756 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !40
  %757 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !40
  %758 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !40
  %759 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %47) #5, !dbg !41
  %760 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %47) #5, !dbg !41
  %761 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %47) #5, !dbg !41
  %762 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %47) #5, !dbg !41
  %763 = add nuw nsw i32 %24, 3072, !dbg !42
  %764 = add nuw nsw i32 %24, 5120, !dbg !42
  %765 = zext nneg i32 %763 to i64, !dbg !43
  %766 = getelementptr float, ptr addrspace(1) %1, i64 %765, !dbg !43
  %767 = zext nneg i32 %24 to i64, !dbg !43
  %768 = getelementptr float, ptr addrspace(1) %1, i64 %767, !dbg !43
  %769 = getelementptr i8, ptr addrspace(1) %768, i64 12304, !dbg !43
  %770 = zext nneg i32 %764 to i64, !dbg !43
  %771 = getelementptr float, ptr addrspace(1) %1, i64 %770, !dbg !43
  %772 = getelementptr i8, ptr addrspace(1) %768, i64 20496, !dbg !43
  %773 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %766, i1 true) #5, !dbg !44
  %774 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %769, i1 true) #5, !dbg !44
  %775 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %771, i1 %31) #5, !dbg !44
  %776 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %772, i1 %31) #5, !dbg !44
  %777 = getelementptr bfloat, ptr addrspace(1) %2, i64 %765, !dbg !45
  %778 = getelementptr bfloat, ptr addrspace(1) %2, i64 %770, !dbg !45
  %779 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %777, i1 true) #5, !dbg !46
  %780 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %778, i1 %31) #5, !dbg !46
  %781 = zext nneg i32 %25 to i64, !dbg !47
  %782 = getelementptr float, ptr addrspace(1) %1, i64 %781, !dbg !47
  %783 = zext nneg i32 %26 to i64, !dbg !47
  %784 = getelementptr float, ptr addrspace(1) %1, i64 %783, !dbg !47
  %785 = zext nneg i32 %27 to i64, !dbg !47
  %786 = getelementptr float, ptr addrspace(1) %1, i64 %785, !dbg !47
  %787 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %768, i1 true) #5, !dbg !48
  %788 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %782, i1 true) #5, !dbg !48
  %789 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %784, i1 %31) #5, !dbg !48
  %790 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %786, i1 %31) #5, !dbg !48
  %791 = getelementptr bfloat, ptr addrspace(1) %2, i64 %767, !dbg !49
  %792 = getelementptr bfloat, ptr addrspace(1) %2, i64 %783, !dbg !49
  %793 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %791, i1 true) #5, !dbg !50
  %794 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %792, i1 %31) #5, !dbg !50
  %795 = tail call float @llvm.nvvm.div.full(float %757, float 3.072000e+03), !dbg !51
  %796 = tail call float @llvm.nvvm.div.full(float %758, float 3.072000e+03), !dbg !51
  %797 = fadd float %795, 0x3EB0C6F7A0000000, !dbg !52
  %798 = fadd float %796, 0x3EB0C6F7A0000000, !dbg !52
  %799 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %800 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %801 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %802 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %804 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %805 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %806 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %807 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %808 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %809 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %810 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %811 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %813 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %814 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i77 = icmp eq i32 %814, 0, !dbg !53
  br i1 %.not.i77, label %817, label %815, !dbg !53

815:                                              ; preds = %__nv_rsqrtf.exit
  %816 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %797), !dbg !53
  br label %__nv_rsqrtf.exit79, !dbg !53

817:                                              ; preds = %__nv_rsqrtf.exit
  %818 = tail call float @llvm.nvvm.rsqrt.approx.f(float %797), !dbg !53
  br label %__nv_rsqrtf.exit79, !dbg !53

__nv_rsqrtf.exit79:                               ; preds = %815, %817
  %.0.i78 = phi float [ %816, %815 ], [ %818, %817 ], !dbg !53
  %819 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %820 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %821 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %822 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %824 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %827 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %829 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %830 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %831 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %834 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i125 = icmp eq i32 %834, 0, !dbg !53
  br i1 %.not.i125, label %837, label %835, !dbg !53

835:                                              ; preds = %__nv_rsqrtf.exit79
  %836 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %798), !dbg !53
  br label %__nv_rsqrtf.exit127, !dbg !53

837:                                              ; preds = %__nv_rsqrtf.exit79
  %838 = tail call float @llvm.nvvm.rsqrt.approx.f(float %798), !dbg !53
  br label %__nv_rsqrtf.exit127, !dbg !53

__nv_rsqrtf.exit127:                              ; preds = %835, %837
  %.0.i126 = phi float [ %836, %835 ], [ %838, %837 ], !dbg !53
  %839 = extractvalue { i32, i32, i32, i32 } %762, 3, !dbg !41
  %840 = bitcast i32 %839 to <2 x bfloat>, !dbg !41
  %841 = extractelement <2 x bfloat> %840, i64 1, !dbg !41
  %842 = fpext bfloat %841 to float, !dbg !54
  %843 = fsub float %842, %756, !dbg !55
  %844 = extractelement <2 x bfloat> %840, i64 0, !dbg !41
  %845 = fpext bfloat %844 to float, !dbg !54
  %846 = fsub float %845, %756, !dbg !55
  %847 = extractvalue { i32, i32, i32, i32 } %762, 2, !dbg !41
  %848 = bitcast i32 %847 to <2 x bfloat>, !dbg !41
  %849 = extractelement <2 x bfloat> %848, i64 1, !dbg !41
  %850 = fpext bfloat %849 to float, !dbg !54
  %851 = fsub float %850, %756, !dbg !55
  %852 = extractelement <2 x bfloat> %848, i64 0, !dbg !41
  %853 = fpext bfloat %852 to float, !dbg !54
  %854 = fsub float %853, %756, !dbg !55
  %855 = extractvalue { i32, i32, i32, i32 } %762, 1, !dbg !41
  %856 = bitcast i32 %855 to <2 x bfloat>, !dbg !41
  %857 = extractelement <2 x bfloat> %856, i64 1, !dbg !41
  %858 = fpext bfloat %857 to float, !dbg !54
  %859 = fsub float %858, %756, !dbg !55
  %860 = extractelement <2 x bfloat> %856, i64 0, !dbg !41
  %861 = fpext bfloat %860 to float, !dbg !54
  %862 = fsub float %861, %756, !dbg !55
  %863 = extractvalue { i32, i32, i32, i32 } %762, 0, !dbg !41
  %864 = bitcast i32 %863 to <2 x bfloat>, !dbg !41
  %865 = extractelement <2 x bfloat> %864, i64 1, !dbg !41
  %866 = fpext bfloat %865 to float, !dbg !54
  %867 = fsub float %866, %756, !dbg !55
  %868 = extractelement <2 x bfloat> %864, i64 0, !dbg !41
  %869 = fpext bfloat %868 to float, !dbg !54
  %870 = fsub float %869, %756, !dbg !55
  %871 = extractvalue { i32, i32, i32, i32 } %761, 3, !dbg !41
  %872 = bitcast i32 %871 to <2 x bfloat>, !dbg !41
  %873 = extractelement <2 x bfloat> %872, i64 1, !dbg !41
  %874 = fpext bfloat %873 to float, !dbg !54
  %875 = fsub float %874, %756, !dbg !55
  %876 = extractelement <2 x bfloat> %872, i64 0, !dbg !41
  %877 = fpext bfloat %876 to float, !dbg !54
  %878 = fsub float %877, %756, !dbg !55
  %879 = extractvalue { i32, i32, i32, i32 } %761, 2, !dbg !41
  %880 = bitcast i32 %879 to <2 x bfloat>, !dbg !41
  %881 = extractelement <2 x bfloat> %880, i64 1, !dbg !41
  %882 = fpext bfloat %881 to float, !dbg !54
  %883 = fsub float %882, %756, !dbg !55
  %884 = extractelement <2 x bfloat> %880, i64 0, !dbg !41
  %885 = fpext bfloat %884 to float, !dbg !54
  %886 = fsub float %885, %756, !dbg !55
  %887 = extractvalue { i32, i32, i32, i32 } %761, 1, !dbg !41
  %888 = bitcast i32 %887 to <2 x bfloat>, !dbg !41
  %889 = extractelement <2 x bfloat> %888, i64 1, !dbg !41
  %890 = fpext bfloat %889 to float, !dbg !54
  %891 = fsub float %890, %756, !dbg !55
  %892 = extractelement <2 x bfloat> %888, i64 0, !dbg !41
  %893 = fpext bfloat %892 to float, !dbg !54
  %894 = fsub float %893, %756, !dbg !55
  %895 = extractvalue { i32, i32, i32, i32 } %761, 0, !dbg !41
  %896 = bitcast i32 %895 to <2 x bfloat>, !dbg !41
  %897 = extractelement <2 x bfloat> %896, i64 1, !dbg !41
  %898 = fpext bfloat %897 to float, !dbg !54
  %899 = fsub float %898, %756, !dbg !55
  %900 = extractelement <2 x bfloat> %896, i64 0, !dbg !41
  %901 = fpext bfloat %900 to float, !dbg !54
  %902 = fsub float %901, %756, !dbg !55
  %903 = extractvalue { i32, i32, i32, i32 } %760, 3, !dbg !41
  %904 = bitcast i32 %903 to <2 x bfloat>, !dbg !41
  %905 = extractelement <2 x bfloat> %904, i64 1, !dbg !41
  %906 = fpext bfloat %905 to float, !dbg !54
  %907 = fsub float %906, %755, !dbg !55
  %908 = extractelement <2 x bfloat> %904, i64 0, !dbg !41
  %909 = fpext bfloat %908 to float, !dbg !54
  %910 = fsub float %909, %755, !dbg !55
  %911 = extractvalue { i32, i32, i32, i32 } %760, 2, !dbg !41
  %912 = bitcast i32 %911 to <2 x bfloat>, !dbg !41
  %913 = extractelement <2 x bfloat> %912, i64 1, !dbg !41
  %914 = fpext bfloat %913 to float, !dbg !54
  %915 = fsub float %914, %755, !dbg !55
  %916 = extractelement <2 x bfloat> %912, i64 0, !dbg !41
  %917 = fpext bfloat %916 to float, !dbg !54
  %918 = fsub float %917, %755, !dbg !55
  %919 = extractvalue { i32, i32, i32, i32 } %760, 1, !dbg !41
  %920 = bitcast i32 %919 to <2 x bfloat>, !dbg !41
  %921 = extractelement <2 x bfloat> %920, i64 1, !dbg !41
  %922 = fpext bfloat %921 to float, !dbg !54
  %923 = fsub float %922, %755, !dbg !55
  %924 = extractelement <2 x bfloat> %920, i64 0, !dbg !41
  %925 = fpext bfloat %924 to float, !dbg !54
  %926 = fsub float %925, %755, !dbg !55
  %927 = extractvalue { i32, i32, i32, i32 } %760, 0, !dbg !41
  %928 = bitcast i32 %927 to <2 x bfloat>, !dbg !41
  %929 = extractelement <2 x bfloat> %928, i64 1, !dbg !41
  %930 = fpext bfloat %929 to float, !dbg !54
  %931 = fsub float %930, %755, !dbg !55
  %932 = extractelement <2 x bfloat> %928, i64 0, !dbg !41
  %933 = fpext bfloat %932 to float, !dbg !54
  %934 = fsub float %933, %755, !dbg !55
  %935 = extractvalue { i32, i32, i32, i32 } %759, 3, !dbg !41
  %936 = bitcast i32 %935 to <2 x bfloat>, !dbg !41
  %937 = extractelement <2 x bfloat> %936, i64 1, !dbg !41
  %938 = fpext bfloat %937 to float, !dbg !54
  %939 = fsub float %938, %755, !dbg !55
  %940 = extractelement <2 x bfloat> %936, i64 0, !dbg !41
  %941 = fpext bfloat %940 to float, !dbg !54
  %942 = fsub float %941, %755, !dbg !55
  %943 = extractvalue { i32, i32, i32, i32 } %759, 2, !dbg !41
  %944 = bitcast i32 %943 to <2 x bfloat>, !dbg !41
  %945 = extractelement <2 x bfloat> %944, i64 1, !dbg !41
  %946 = fpext bfloat %945 to float, !dbg !54
  %947 = fsub float %946, %755, !dbg !55
  %948 = extractelement <2 x bfloat> %944, i64 0, !dbg !41
  %949 = fpext bfloat %948 to float, !dbg !54
  %950 = fsub float %949, %755, !dbg !55
  %951 = extractvalue { i32, i32, i32, i32 } %759, 1, !dbg !41
  %952 = bitcast i32 %951 to <2 x bfloat>, !dbg !41
  %953 = extractelement <2 x bfloat> %952, i64 1, !dbg !41
  %954 = fpext bfloat %953 to float, !dbg !54
  %955 = fsub float %954, %755, !dbg !55
  %956 = extractelement <2 x bfloat> %952, i64 0, !dbg !41
  %957 = fpext bfloat %956 to float, !dbg !54
  %958 = fsub float %957, %755, !dbg !55
  %959 = extractvalue { i32, i32, i32, i32 } %759, 0, !dbg !41
  %960 = bitcast i32 %959 to <2 x bfloat>, !dbg !41
  %961 = extractelement <2 x bfloat> %960, i64 1, !dbg !41
  %962 = fpext bfloat %961 to float, !dbg !54
  %963 = fsub float %962, %755, !dbg !55
  %964 = extractelement <2 x bfloat> %960, i64 0, !dbg !41
  %965 = fpext bfloat %964 to float, !dbg !54
  %966 = fsub float %965, %755, !dbg !55
  %967 = extractvalue { i32, i32, i32, i32 } %794, 3, !dbg !50
  %968 = bitcast i32 %967 to <2 x bfloat>, !dbg !50
  %969 = extractvalue { i32, i32, i32, i32 } %794, 2, !dbg !50
  %970 = bitcast i32 %969 to <2 x bfloat>, !dbg !50
  %971 = extractvalue { i32, i32, i32, i32 } %794, 1, !dbg !50
  %972 = bitcast i32 %971 to <2 x bfloat>, !dbg !50
  %973 = extractvalue { i32, i32, i32, i32 } %794, 0, !dbg !50
  %974 = bitcast i32 %973 to <2 x bfloat>, !dbg !50
  %975 = extractvalue { i32, i32, i32, i32 } %793, 3, !dbg !50
  %976 = bitcast i32 %975 to <2 x bfloat>, !dbg !50
  %977 = extractvalue { i32, i32, i32, i32 } %793, 2, !dbg !50
  %978 = bitcast i32 %977 to <2 x bfloat>, !dbg !50
  %979 = extractvalue { i32, i32, i32, i32 } %793, 1, !dbg !50
  %980 = bitcast i32 %979 to <2 x bfloat>, !dbg !50
  %981 = extractvalue { i32, i32, i32, i32 } %793, 0, !dbg !50
  %982 = bitcast i32 %981 to <2 x bfloat>, !dbg !50
  %983 = extractvalue { i32, i32, i32, i32 } %790, 3, !dbg !48
  %984 = extractvalue { i32, i32, i32, i32 } %790, 2, !dbg !48
  %985 = extractvalue { i32, i32, i32, i32 } %790, 1, !dbg !48
  %986 = extractvalue { i32, i32, i32, i32 } %790, 0, !dbg !48
  %987 = extractvalue { i32, i32, i32, i32 } %789, 3, !dbg !48
  %988 = extractvalue { i32, i32, i32, i32 } %789, 2, !dbg !48
  %989 = extractvalue { i32, i32, i32, i32 } %789, 1, !dbg !48
  %990 = extractvalue { i32, i32, i32, i32 } %789, 0, !dbg !48
  %991 = extractvalue { i32, i32, i32, i32 } %788, 3, !dbg !48
  %992 = extractvalue { i32, i32, i32, i32 } %788, 2, !dbg !48
  %993 = extractvalue { i32, i32, i32, i32 } %788, 1, !dbg !48
  %994 = extractvalue { i32, i32, i32, i32 } %788, 0, !dbg !48
  %995 = extractvalue { i32, i32, i32, i32 } %787, 3, !dbg !48
  %996 = extractvalue { i32, i32, i32, i32 } %787, 2, !dbg !48
  %997 = extractvalue { i32, i32, i32, i32 } %787, 1, !dbg !48
  %998 = extractvalue { i32, i32, i32, i32 } %787, 0, !dbg !48
  %999 = extractvalue { i32, i32, i32, i32 } %780, 3, !dbg !46
  %1000 = bitcast i32 %999 to <2 x bfloat>, !dbg !46
  %1001 = extractvalue { i32, i32, i32, i32 } %780, 2, !dbg !46
  %1002 = bitcast i32 %1001 to <2 x bfloat>, !dbg !46
  %1003 = extractvalue { i32, i32, i32, i32 } %780, 1, !dbg !46
  %1004 = bitcast i32 %1003 to <2 x bfloat>, !dbg !46
  %1005 = extractvalue { i32, i32, i32, i32 } %780, 0, !dbg !46
  %1006 = bitcast i32 %1005 to <2 x bfloat>, !dbg !46
  %1007 = extractvalue { i32, i32, i32, i32 } %779, 3, !dbg !46
  %1008 = bitcast i32 %1007 to <2 x bfloat>, !dbg !46
  %1009 = extractvalue { i32, i32, i32, i32 } %779, 2, !dbg !46
  %1010 = bitcast i32 %1009 to <2 x bfloat>, !dbg !46
  %1011 = extractvalue { i32, i32, i32, i32 } %779, 1, !dbg !46
  %1012 = bitcast i32 %1011 to <2 x bfloat>, !dbg !46
  %1013 = extractvalue { i32, i32, i32, i32 } %779, 0, !dbg !46
  %1014 = bitcast i32 %1013 to <2 x bfloat>, !dbg !46
  %1015 = extractvalue { i32, i32, i32, i32 } %776, 3, !dbg !44
  %1016 = extractvalue { i32, i32, i32, i32 } %776, 2, !dbg !44
  %1017 = extractvalue { i32, i32, i32, i32 } %776, 1, !dbg !44
  %1018 = extractvalue { i32, i32, i32, i32 } %776, 0, !dbg !44
  %1019 = extractvalue { i32, i32, i32, i32 } %775, 3, !dbg !44
  %1020 = extractvalue { i32, i32, i32, i32 } %775, 2, !dbg !44
  %1021 = extractvalue { i32, i32, i32, i32 } %775, 1, !dbg !44
  %1022 = extractvalue { i32, i32, i32, i32 } %775, 0, !dbg !44
  %1023 = extractvalue { i32, i32, i32, i32 } %774, 3, !dbg !44
  %1024 = extractvalue { i32, i32, i32, i32 } %774, 2, !dbg !44
  %1025 = extractvalue { i32, i32, i32, i32 } %774, 1, !dbg !44
  %1026 = extractvalue { i32, i32, i32, i32 } %774, 0, !dbg !44
  %1027 = extractvalue { i32, i32, i32, i32 } %773, 3, !dbg !44
  %1028 = extractvalue { i32, i32, i32, i32 } %773, 2, !dbg !44
  %1029 = extractvalue { i32, i32, i32, i32 } %773, 1, !dbg !44
  %1030 = extractvalue { i32, i32, i32, i32 } %773, 0, !dbg !44
  %1031 = icmp slt i32 %20, 3600, !dbg !13
  %1032 = and i1 %1031, %31, !dbg !19
  %1033 = and i1 %21, %31, !dbg !19
  %1034 = add i32 %26, %34, !dbg !17
  %1035 = add i32 %34, %24, !dbg !17
  %1036 = add i32 %26, %33, !dbg !17
  %1037 = or disjoint i32 %24, %33, !dbg !17
  %1038 = and i32 %18, 1, !dbg !11
  %1039 = or disjoint i32 %17, %1038, !dbg !12
  %1040 = icmp slt i32 %1039, 3600, !dbg !13
  %1041 = fmul float %966, %.0.i78, !dbg !56
  %1042 = fmul float %963, %.0.i78, !dbg !56
  %1043 = fmul float %958, %.0.i78, !dbg !56
  %1044 = fmul float %955, %.0.i78, !dbg !56
  %1045 = fmul float %950, %.0.i78, !dbg !56
  %1046 = fmul float %947, %.0.i78, !dbg !56
  %1047 = fmul float %942, %.0.i78, !dbg !56
  %1048 = fmul float %939, %.0.i78, !dbg !56
  %1049 = fmul float %934, %.0.i78, !dbg !56
  %1050 = fmul float %931, %.0.i78, !dbg !56
  %1051 = fmul float %926, %.0.i78, !dbg !56
  %1052 = fmul float %923, %.0.i78, !dbg !56
  %1053 = fmul float %918, %.0.i78, !dbg !56
  %1054 = fmul float %915, %.0.i78, !dbg !56
  %1055 = fmul float %910, %.0.i78, !dbg !56
  %1056 = fmul float %907, %.0.i78, !dbg !56
  %1057 = fmul float %902, %.0.i126, !dbg !56
  %1058 = fmul float %899, %.0.i126, !dbg !56
  %1059 = fmul float %894, %.0.i126, !dbg !56
  %1060 = fmul float %891, %.0.i126, !dbg !56
  %1061 = fmul float %886, %.0.i126, !dbg !56
  %1062 = fmul float %883, %.0.i126, !dbg !56
  %1063 = fmul float %878, %.0.i126, !dbg !56
  %1064 = fmul float %875, %.0.i126, !dbg !56
  %1065 = fmul float %870, %.0.i126, !dbg !56
  %1066 = fmul float %867, %.0.i126, !dbg !56
  %1067 = fmul float %862, %.0.i126, !dbg !56
  %1068 = fmul float %859, %.0.i126, !dbg !56
  %1069 = fmul float %854, %.0.i126, !dbg !56
  %1070 = fmul float %851, %.0.i126, !dbg !56
  %1071 = fmul float %846, %.0.i126, !dbg !56
  %1072 = fmul float %843, %.0.i126, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1073 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29, !dbg !56
  %1074 = bitcast float %1041 to i32, !dbg !56
  %1075 = bitcast float %1042 to i32, !dbg !56
  %1076 = bitcast float %1043 to i32, !dbg !56
  %1077 = bitcast float %1044 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1073, i32 %1074, i32 %1075, i32 %1076, i32 %1077, i1 true) #5, !dbg !56
  %1078 = or disjoint i32 %29, 4, !dbg !56
  %1079 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1078, !dbg !56
  %1080 = bitcast float %1045 to i32, !dbg !56
  %1081 = bitcast float %1046 to i32, !dbg !56
  %1082 = bitcast float %1047 to i32, !dbg !56
  %1083 = bitcast float %1048 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1079, i32 %1080, i32 %1081, i32 %1082, i32 %1083, i1 true) #5, !dbg !56
  %1084 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %30, !dbg !56
  %1085 = bitcast float %1049 to i32, !dbg !56
  %1086 = bitcast float %1050 to i32, !dbg !56
  %1087 = bitcast float %1051 to i32, !dbg !56
  %1088 = bitcast float %1052 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1084, i32 %1085, i32 %1086, i32 %1087, i32 %1088, i1 true) #5, !dbg !56
  %1089 = or disjoint i32 %29, 12, !dbg !56
  %1090 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1089, !dbg !56
  %1091 = bitcast float %1053 to i32, !dbg !56
  %1092 = bitcast float %1054 to i32, !dbg !56
  %1093 = bitcast float %1055 to i32, !dbg !56
  %1094 = bitcast float %1056 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1090, i32 %1091, i32 %1092, i32 %1093, i32 %1094, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1095 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24, !dbg !56
  %1096 = getelementptr inbounds nuw i8, ptr addrspace(3) %1095, i32 8, !dbg !56
  %1097 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25, !dbg !56
  %1098 = getelementptr inbounds nuw i8, ptr addrspace(3) %1097, i32 8, !dbg !56
  %1099 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !56
  %1100 = getelementptr inbounds nuw i8, ptr addrspace(3) %1099, i32 8, !dbg !56
  %1101 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !56
  %1102 = getelementptr inbounds nuw i8, ptr addrspace(3) %1101, i32 8, !dbg !56
  %1103 = bitcast float %1057 to i32, !dbg !56
  %1104 = bitcast float %1058 to i32, !dbg !56
  %1105 = bitcast float %1059 to i32, !dbg !56
  %1106 = bitcast float %1060 to i32, !dbg !56
  %1107 = bitcast float %1061 to i32, !dbg !56
  %1108 = bitcast float %1062 to i32, !dbg !56
  %1109 = bitcast float %1063 to i32, !dbg !56
  %1110 = bitcast float %1064 to i32, !dbg !56
  %1111 = bitcast float %1065 to i32, !dbg !56
  %1112 = bitcast float %1066 to i32, !dbg !56
  %1113 = bitcast float %1067 to i32, !dbg !56
  %1114 = bitcast float %1068 to i32, !dbg !56
  %1115 = bitcast float %1069 to i32, !dbg !56
  %1116 = bitcast float %1070 to i32, !dbg !56
  %1117 = bitcast float %1071 to i32, !dbg !56
  %1118 = bitcast float %1072 to i32, !dbg !56
  %1119 = sext i32 %1037 to i64, !dbg !57
  %1120 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1119, !dbg !57
  %1121 = sext i32 %1036 to i64, !dbg !57
  %1122 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1121, !dbg !57
  %1123 = sext i32 %1035 to i64, !dbg !57
  %1124 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1123, !dbg !57
  %1125 = sext i32 %1034 to i64, !dbg !57
  %1126 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1125, !dbg !57
  %1127 = getelementptr bfloat, ptr addrspace(1) %3, i64 %39, !dbg !57
  %1128 = getelementptr bfloat, ptr addrspace(1) %3, i64 %41, !dbg !57
  %1129 = getelementptr bfloat, ptr addrspace(1) %3, i64 %43, !dbg !57
  %1130 = getelementptr bfloat, ptr addrspace(1) %3, i64 %45, !dbg !57
  %1131 = fpext <2 x bfloat> %982 to <2 x float>, !dbg !58
  %1132 = insertelement <2 x i32> poison, i32 %998, i64 0, !dbg !48
  %1133 = insertelement <2 x i32> %1132, i32 %997, i64 1, !dbg !48
  %1134 = bitcast <2 x i32> %1133 to <2 x float>, !dbg !48
  %1135 = fpext <2 x bfloat> %1014 to <2 x float>, !dbg !59
  %1136 = insertelement <2 x i32> poison, i32 %1030, i64 0, !dbg !44
  %1137 = insertelement <2 x i32> %1136, i32 %1029, i64 1, !dbg !44
  %1138 = bitcast <2 x i32> %1137 to <2 x float>, !dbg !44
  %1139 = load <2 x float>, ptr addrspace(3) %1095, align 16, !dbg !56
  %1140 = fadd <2 x float> %1138, %1135, !dbg !60
  %1141 = fadd <2 x float> %1140, splat (float 1.000000e+00), !dbg !61
  %1142 = fmul <2 x float> %1141, %1139, !dbg !62
  %1143 = fadd <2 x float> %1134, %1131, !dbg !63
  %1144 = fadd <2 x float> %1143, %1142, !dbg !64
  %1145 = extractelement <2 x float> %1144, i64 0, !dbg !65
  %1146 = select i1 %21, float %1145, float 0x7FF0000000000000, !dbg !66
  %1147 = extractelement <2 x float> %1144, i64 1, !dbg !65
  %1148 = select i1 %21, float %1147, float 0x7FF0000000000000, !dbg !66
  %1149 = select i1 %21, float %1145, float 0xFFF0000000000000, !dbg !65
  %1150 = select i1 %21, float %1147, float 0xFFF0000000000000, !dbg !65
  %1151 = fptrunc <2 x float> %1144 to <2 x bfloat>, !dbg !67
  %1152 = fpext <2 x bfloat> %980 to <2 x float>, !dbg !58
  %1153 = insertelement <2 x i32> poison, i32 %996, i64 0, !dbg !48
  %1154 = insertelement <2 x i32> %1153, i32 %995, i64 1, !dbg !48
  %1155 = bitcast <2 x i32> %1154 to <2 x float>, !dbg !48
  %1156 = fpext <2 x bfloat> %1012 to <2 x float>, !dbg !59
  %1157 = insertelement <2 x i32> poison, i32 %1028, i64 0, !dbg !44
  %1158 = insertelement <2 x i32> %1157, i32 %1027, i64 1, !dbg !44
  %1159 = bitcast <2 x i32> %1158 to <2 x float>, !dbg !44
  %1160 = load <2 x float>, ptr addrspace(3) %1096, align 8, !dbg !56
  %1161 = fadd <2 x float> %1159, %1156, !dbg !60
  %1162 = fadd <2 x float> %1161, splat (float 1.000000e+00), !dbg !61
  %1163 = fmul <2 x float> %1162, %1160, !dbg !62
  %1164 = fadd <2 x float> %1155, %1152, !dbg !63
  %1165 = fadd <2 x float> %1164, %1163, !dbg !64
  %1166 = extractelement <2 x float> %1165, i64 0, !dbg !65
  %1167 = select i1 %21, float %1166, float 0x7FF0000000000000, !dbg !66
  %1168 = extractelement <2 x float> %1165, i64 1, !dbg !65
  %1169 = select i1 %21, float %1168, float 0x7FF0000000000000, !dbg !66
  %1170 = select i1 %21, float %1166, float 0xFFF0000000000000, !dbg !65
  %1171 = select i1 %21, float %1168, float 0xFFF0000000000000, !dbg !65
  %1172 = fptrunc <2 x float> %1165 to <2 x bfloat>, !dbg !67
  %1173 = fpext <2 x bfloat> %978 to <2 x float>, !dbg !58
  %1174 = insertelement <2 x i32> poison, i32 %994, i64 0, !dbg !48
  %1175 = insertelement <2 x i32> %1174, i32 %993, i64 1, !dbg !48
  %1176 = bitcast <2 x i32> %1175 to <2 x float>, !dbg !48
  %1177 = fpext <2 x bfloat> %1010 to <2 x float>, !dbg !59
  %1178 = insertelement <2 x i32> poison, i32 %1026, i64 0, !dbg !44
  %1179 = insertelement <2 x i32> %1178, i32 %1025, i64 1, !dbg !44
  %1180 = bitcast <2 x i32> %1179 to <2 x float>, !dbg !44
  %1181 = load <2 x float>, ptr addrspace(3) %1097, align 16, !dbg !56
  %1182 = fadd <2 x float> %1180, %1177, !dbg !60
  %1183 = fadd <2 x float> %1182, splat (float 1.000000e+00), !dbg !61
  %1184 = fmul <2 x float> %1183, %1181, !dbg !62
  %1185 = fadd <2 x float> %1176, %1173, !dbg !63
  %1186 = fadd <2 x float> %1185, %1184, !dbg !64
  %1187 = extractelement <2 x float> %1186, i64 0, !dbg !65
  %1188 = select i1 %21, float %1187, float 0x7FF0000000000000, !dbg !66
  %1189 = extractelement <2 x float> %1186, i64 1, !dbg !65
  %1190 = select i1 %21, float %1189, float 0x7FF0000000000000, !dbg !66
  %1191 = select i1 %21, float %1187, float 0xFFF0000000000000, !dbg !65
  %1192 = select i1 %21, float %1189, float 0xFFF0000000000000, !dbg !65
  %1193 = fptrunc <2 x float> %1186 to <2 x bfloat>, !dbg !67
  %1194 = fpext <2 x bfloat> %976 to <2 x float>, !dbg !58
  %1195 = insertelement <2 x i32> poison, i32 %992, i64 0, !dbg !48
  %1196 = insertelement <2 x i32> %1195, i32 %991, i64 1, !dbg !48
  %1197 = bitcast <2 x i32> %1196 to <2 x float>, !dbg !48
  %1198 = fpext <2 x bfloat> %1008 to <2 x float>, !dbg !59
  %1199 = insertelement <2 x i32> poison, i32 %1024, i64 0, !dbg !44
  %1200 = insertelement <2 x i32> %1199, i32 %1023, i64 1, !dbg !44
  %1201 = bitcast <2 x i32> %1200 to <2 x float>, !dbg !44
  %1202 = load <2 x float>, ptr addrspace(3) %1098, align 8, !dbg !56
  %1203 = fadd <2 x float> %1201, %1198, !dbg !60
  %1204 = fadd <2 x float> %1203, splat (float 1.000000e+00), !dbg !61
  %1205 = fmul <2 x float> %1204, %1202, !dbg !62
  %1206 = fadd <2 x float> %1197, %1194, !dbg !63
  %1207 = fadd <2 x float> %1206, %1205, !dbg !64
  %1208 = extractelement <2 x float> %1207, i64 0, !dbg !65
  %1209 = select i1 %21, float %1208, float 0x7FF0000000000000, !dbg !66
  %1210 = extractelement <2 x float> %1207, i64 1, !dbg !65
  %1211 = select i1 %21, float %1210, float 0x7FF0000000000000, !dbg !66
  %1212 = select i1 %21, float %1208, float 0xFFF0000000000000, !dbg !65
  %1213 = select i1 %21, float %1210, float 0xFFF0000000000000, !dbg !65
  %1214 = fptrunc <2 x float> %1207 to <2 x bfloat>, !dbg !67
  %1215 = fpext <2 x bfloat> %974 to <2 x float>, !dbg !58
  %1216 = insertelement <2 x i32> poison, i32 %990, i64 0, !dbg !48
  %1217 = insertelement <2 x i32> %1216, i32 %989, i64 1, !dbg !48
  %1218 = bitcast <2 x i32> %1217 to <2 x float>, !dbg !48
  %1219 = fpext <2 x bfloat> %1006 to <2 x float>, !dbg !59
  %1220 = insertelement <2 x i32> poison, i32 %1022, i64 0, !dbg !44
  %1221 = insertelement <2 x i32> %1220, i32 %1021, i64 1, !dbg !44
  %1222 = bitcast <2 x i32> %1221 to <2 x float>, !dbg !44
  %1223 = load <2 x float>, ptr addrspace(3) %1099, align 16, !dbg !56
  %1224 = fadd <2 x float> %1222, %1219, !dbg !60
  %1225 = fadd <2 x float> %1224, splat (float 1.000000e+00), !dbg !61
  %1226 = fmul <2 x float> %1225, %1223, !dbg !62
  %1227 = fadd <2 x float> %1218, %1215, !dbg !63
  %1228 = fadd <2 x float> %1227, %1226, !dbg !64
  %1229 = extractelement <2 x float> %1228, i64 0, !dbg !65
  %1230 = select i1 %1033, float %1229, float 0x7FF0000000000000, !dbg !66
  %1231 = extractelement <2 x float> %1228, i64 1, !dbg !65
  %1232 = select i1 %1033, float %1231, float 0x7FF0000000000000, !dbg !66
  %1233 = select i1 %1033, float %1229, float 0xFFF0000000000000, !dbg !65
  %1234 = select i1 %1033, float %1231, float 0xFFF0000000000000, !dbg !65
  %1235 = fptrunc <2 x float> %1228 to <2 x bfloat>, !dbg !67
  %1236 = fpext <2 x bfloat> %972 to <2 x float>, !dbg !58
  %1237 = insertelement <2 x i32> poison, i32 %988, i64 0, !dbg !48
  %1238 = insertelement <2 x i32> %1237, i32 %987, i64 1, !dbg !48
  %1239 = bitcast <2 x i32> %1238 to <2 x float>, !dbg !48
  %1240 = fpext <2 x bfloat> %1004 to <2 x float>, !dbg !59
  %1241 = insertelement <2 x i32> poison, i32 %1020, i64 0, !dbg !44
  %1242 = insertelement <2 x i32> %1241, i32 %1019, i64 1, !dbg !44
  %1243 = bitcast <2 x i32> %1242 to <2 x float>, !dbg !44
  %1244 = load <2 x float>, ptr addrspace(3) %1100, align 8, !dbg !56
  %1245 = fadd <2 x float> %1243, %1240, !dbg !60
  %1246 = fadd <2 x float> %1245, splat (float 1.000000e+00), !dbg !61
  %1247 = fmul <2 x float> %1246, %1244, !dbg !62
  %1248 = fadd <2 x float> %1239, %1236, !dbg !63
  %1249 = fadd <2 x float> %1248, %1247, !dbg !64
  %1250 = extractelement <2 x float> %1249, i64 0, !dbg !65
  %1251 = select i1 %1033, float %1250, float 0x7FF0000000000000, !dbg !66
  %1252 = extractelement <2 x float> %1249, i64 1, !dbg !65
  %1253 = select i1 %1033, float %1252, float 0x7FF0000000000000, !dbg !66
  %1254 = select i1 %1033, float %1250, float 0xFFF0000000000000, !dbg !65
  %1255 = select i1 %1033, float %1252, float 0xFFF0000000000000, !dbg !65
  %1256 = fptrunc <2 x float> %1249 to <2 x bfloat>, !dbg !67
  %1257 = fpext <2 x bfloat> %970 to <2 x float>, !dbg !58
  %1258 = insertelement <2 x i32> poison, i32 %986, i64 0, !dbg !48
  %1259 = insertelement <2 x i32> %1258, i32 %985, i64 1, !dbg !48
  %1260 = bitcast <2 x i32> %1259 to <2 x float>, !dbg !48
  %1261 = fpext <2 x bfloat> %1002 to <2 x float>, !dbg !59
  %1262 = insertelement <2 x i32> poison, i32 %1018, i64 0, !dbg !44
  %1263 = insertelement <2 x i32> %1262, i32 %1017, i64 1, !dbg !44
  %1264 = bitcast <2 x i32> %1263 to <2 x float>, !dbg !44
  %1265 = load <2 x float>, ptr addrspace(3) %1101, align 16, !dbg !56
  %1266 = fadd <2 x float> %1264, %1261, !dbg !60
  %1267 = fadd <2 x float> %1266, splat (float 1.000000e+00), !dbg !61
  %1268 = fmul <2 x float> %1267, %1265, !dbg !62
  %1269 = fadd <2 x float> %1260, %1257, !dbg !63
  %1270 = fadd <2 x float> %1269, %1268, !dbg !64
  %1271 = extractelement <2 x float> %1270, i64 0, !dbg !65
  %1272 = select i1 %1033, float %1271, float 0x7FF0000000000000, !dbg !66
  %1273 = extractelement <2 x float> %1270, i64 1, !dbg !65
  %1274 = select i1 %1033, float %1273, float 0x7FF0000000000000, !dbg !66
  %1275 = select i1 %1033, float %1271, float 0xFFF0000000000000, !dbg !65
  %1276 = select i1 %1033, float %1273, float 0xFFF0000000000000, !dbg !65
  %1277 = fptrunc <2 x float> %1270 to <2 x bfloat>, !dbg !67
  %1278 = fpext <2 x bfloat> %968 to <2 x float>, !dbg !58
  %1279 = insertelement <2 x i32> poison, i32 %984, i64 0, !dbg !48
  %1280 = insertelement <2 x i32> %1279, i32 %983, i64 1, !dbg !48
  %1281 = bitcast <2 x i32> %1280 to <2 x float>, !dbg !48
  %1282 = fpext <2 x bfloat> %1000 to <2 x float>, !dbg !59
  %1283 = insertelement <2 x i32> poison, i32 %1016, i64 0, !dbg !44
  %1284 = insertelement <2 x i32> %1283, i32 %1015, i64 1, !dbg !44
  %1285 = bitcast <2 x i32> %1284 to <2 x float>, !dbg !44
  %1286 = load <2 x float>, ptr addrspace(3) %1102, align 8, !dbg !56
  %1287 = fadd <2 x float> %1285, %1282, !dbg !60
  %1288 = fadd <2 x float> %1287, splat (float 1.000000e+00), !dbg !61
  %1289 = fmul <2 x float> %1288, %1286, !dbg !62
  %1290 = fadd <2 x float> %1281, %1278, !dbg !63
  %1291 = fadd <2 x float> %1290, %1289, !dbg !64
  %1292 = extractelement <2 x float> %1291, i64 0, !dbg !65
  %1293 = select i1 %1033, float %1292, float 0x7FF0000000000000, !dbg !66
  %1294 = extractelement <2 x float> %1291, i64 1, !dbg !65
  %1295 = select i1 %1033, float %1294, float 0x7FF0000000000000, !dbg !66
  %1296 = select i1 %1033, float %1292, float 0xFFF0000000000000, !dbg !65
  %1297 = select i1 %1033, float %1294, float 0xFFF0000000000000, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1073, i32 %1103, i32 %1104, i32 %1105, i32 %1106, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1079, i32 %1107, i32 %1108, i32 %1109, i32 %1110, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1084, i32 %1111, i32 %1112, i32 %1113, i32 %1114, i1 true) #5, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1090, i32 %1115, i32 %1116, i32 %1117, i32 %1118, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1298 = fptrunc <2 x float> %1291 to <2 x bfloat>, !dbg !67
  %1299 = load <2 x float>, ptr addrspace(3) %1095, align 16, !dbg !56
  %1300 = fmul <2 x float> %1141, %1299, !dbg !62
  %1301 = fadd <2 x float> %1143, %1300, !dbg !64
  %1302 = extractelement <2 x float> %1301, i64 0, !dbg !65
  %1303 = select i1 %1031, float %1302, float 0x7FF0000000000000, !dbg !66
  %1304 = extractelement <2 x float> %1301, i64 1, !dbg !65
  %1305 = select i1 %1031, float %1304, float 0x7FF0000000000000, !dbg !66
  %1306 = select i1 %1031, float %1302, float 0xFFF0000000000000, !dbg !65
  %1307 = select i1 %1031, float %1304, float 0xFFF0000000000000, !dbg !65
  %1308 = fptrunc <2 x float> %1301 to <2 x bfloat>, !dbg !67
  %1309 = load <2 x float>, ptr addrspace(3) %1096, align 8, !dbg !56
  %1310 = fmul <2 x float> %1162, %1309, !dbg !62
  %1311 = fadd <2 x float> %1164, %1310, !dbg !64
  %1312 = extractelement <2 x float> %1311, i64 0, !dbg !65
  %1313 = select i1 %1031, float %1312, float 0x7FF0000000000000, !dbg !66
  %1314 = extractelement <2 x float> %1311, i64 1, !dbg !65
  %1315 = select i1 %1031, float %1314, float 0x7FF0000000000000, !dbg !66
  %1316 = select i1 %1031, float %1312, float 0xFFF0000000000000, !dbg !65
  %1317 = select i1 %1031, float %1314, float 0xFFF0000000000000, !dbg !65
  %1318 = fptrunc <2 x float> %1311 to <2 x bfloat>, !dbg !67
  %1319 = load <2 x float>, ptr addrspace(3) %1097, align 16, !dbg !56
  %1320 = fmul <2 x float> %1183, %1319, !dbg !62
  %1321 = fadd <2 x float> %1185, %1320, !dbg !64
  %1322 = extractelement <2 x float> %1321, i64 0, !dbg !65
  %1323 = select i1 %1031, float %1322, float 0x7FF0000000000000, !dbg !66
  %1324 = extractelement <2 x float> %1321, i64 1, !dbg !65
  %1325 = select i1 %1031, float %1324, float 0x7FF0000000000000, !dbg !66
  %1326 = select i1 %1031, float %1322, float 0xFFF0000000000000, !dbg !65
  %1327 = select i1 %1031, float %1324, float 0xFFF0000000000000, !dbg !65
  %1328 = fptrunc <2 x float> %1321 to <2 x bfloat>, !dbg !67
  %1329 = load <2 x float>, ptr addrspace(3) %1098, align 8, !dbg !56
  %1330 = fmul <2 x float> %1204, %1329, !dbg !62
  %1331 = fadd <2 x float> %1206, %1330, !dbg !64
  %1332 = extractelement <2 x float> %1331, i64 0, !dbg !65
  %1333 = select i1 %1031, float %1332, float 0x7FF0000000000000, !dbg !66
  %1334 = extractelement <2 x float> %1331, i64 1, !dbg !65
  %1335 = select i1 %1031, float %1334, float 0x7FF0000000000000, !dbg !66
  %1336 = select i1 %1031, float %1332, float 0xFFF0000000000000, !dbg !65
  %1337 = select i1 %1031, float %1334, float 0xFFF0000000000000, !dbg !65
  %1338 = fptrunc <2 x float> %1331 to <2 x bfloat>, !dbg !67
  %1339 = load <2 x float>, ptr addrspace(3) %1099, align 16, !dbg !56
  %1340 = fmul <2 x float> %1225, %1339, !dbg !62
  %1341 = fadd <2 x float> %1227, %1340, !dbg !64
  %1342 = extractelement <2 x float> %1341, i64 0, !dbg !65
  %1343 = select i1 %1032, float %1342, float 0x7FF0000000000000, !dbg !66
  %1344 = extractelement <2 x float> %1341, i64 1, !dbg !65
  %1345 = select i1 %1032, float %1344, float 0x7FF0000000000000, !dbg !66
  %1346 = select i1 %1032, float %1342, float 0xFFF0000000000000, !dbg !65
  %1347 = select i1 %1032, float %1344, float 0xFFF0000000000000, !dbg !65
  %1348 = fptrunc <2 x float> %1341 to <2 x bfloat>, !dbg !67
  %1349 = load <2 x float>, ptr addrspace(3) %1100, align 8, !dbg !56
  %1350 = fmul <2 x float> %1246, %1349, !dbg !62
  %1351 = fadd <2 x float> %1248, %1350, !dbg !64
  %1352 = extractelement <2 x float> %1351, i64 0, !dbg !65
  %1353 = select i1 %1032, float %1352, float 0x7FF0000000000000, !dbg !66
  %1354 = extractelement <2 x float> %1351, i64 1, !dbg !65
  %1355 = select i1 %1032, float %1354, float 0x7FF0000000000000, !dbg !66
  %1356 = select i1 %1032, float %1352, float 0xFFF0000000000000, !dbg !65
  %1357 = select i1 %1032, float %1354, float 0xFFF0000000000000, !dbg !65
  %1358 = fptrunc <2 x float> %1351 to <2 x bfloat>, !dbg !67
  %1359 = load <2 x float>, ptr addrspace(3) %1101, align 16, !dbg !56
  %1360 = fmul <2 x float> %1267, %1359, !dbg !62
  %1361 = fadd <2 x float> %1269, %1360, !dbg !64
  %1362 = extractelement <2 x float> %1361, i64 0, !dbg !65
  %1363 = select i1 %1032, float %1362, float 0x7FF0000000000000, !dbg !66
  %1364 = extractelement <2 x float> %1361, i64 1, !dbg !65
  %1365 = select i1 %1032, float %1364, float 0x7FF0000000000000, !dbg !66
  %1366 = select i1 %1032, float %1362, float 0xFFF0000000000000, !dbg !65
  %1367 = select i1 %1032, float %1364, float 0xFFF0000000000000, !dbg !65
  %1368 = fptrunc <2 x float> %1361 to <2 x bfloat>, !dbg !67
  %1369 = load <2 x float>, ptr addrspace(3) %1102, align 8, !dbg !56
  %1370 = fmul <2 x float> %1288, %1369, !dbg !62
  %1371 = fadd <2 x float> %1290, %1370, !dbg !64
  %1372 = extractelement <2 x float> %1371, i64 0, !dbg !65
  %1373 = select i1 %1032, float %1372, float 0x7FF0000000000000, !dbg !66
  %1374 = extractelement <2 x float> %1371, i64 1, !dbg !65
  %1375 = select i1 %1032, float %1374, float 0x7FF0000000000000, !dbg !66
  %1376 = select i1 %1032, float %1372, float 0xFFF0000000000000, !dbg !65
  %1377 = select i1 %1032, float %1374, float 0xFFF0000000000000, !dbg !65
  %1378 = fptrunc <2 x float> %1371 to <2 x bfloat>, !dbg !67
  %1379 = bitcast <2 x bfloat> %1151 to i32, !dbg !67
  %1380 = bitcast <2 x bfloat> %1172 to i32, !dbg !67
  %1381 = bitcast <2 x bfloat> %1193 to i32, !dbg !67
  %1382 = bitcast <2 x bfloat> %1214 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1379, i32 %1380, i32 %1381, i32 %1382, ptr addrspace(1) %1120, i1 %21) #5, !dbg !67
  %1383 = bitcast <2 x bfloat> %1235 to i32, !dbg !67
  %1384 = bitcast <2 x bfloat> %1256 to i32, !dbg !67
  %1385 = bitcast <2 x bfloat> %1277 to i32, !dbg !67
  %1386 = bitcast <2 x bfloat> %1298 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1383, i32 %1384, i32 %1385, i32 %1386, ptr addrspace(1) %1122, i1 %1033) #5, !dbg !67
  %1387 = bitcast <2 x bfloat> %1308 to i32, !dbg !67
  %1388 = bitcast <2 x bfloat> %1318 to i32, !dbg !67
  %1389 = bitcast <2 x bfloat> %1328 to i32, !dbg !67
  %1390 = bitcast <2 x bfloat> %1338 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1387, i32 %1388, i32 %1389, i32 %1390, ptr addrspace(1) %1124, i1 %1031) #5, !dbg !67
  %1391 = bitcast <2 x bfloat> %1348 to i32, !dbg !67
  %1392 = bitcast <2 x bfloat> %1358 to i32, !dbg !67
  %1393 = bitcast <2 x bfloat> %1368 to i32, !dbg !67
  %1394 = bitcast <2 x bfloat> %1378 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1391, i32 %1392, i32 %1393, i32 %1394, ptr addrspace(1) %1126, i1 %1032) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1395 = fcmp olt float %1146, %1148, !dbg !70
  %1396 = fcmp uno float %1146, 0.000000e+00, !dbg !71
  %1397 = or i1 %1395, %1396, !dbg !72
  %1398 = select i1 %1397, float %1146, float %1148, !dbg !73
  %1399 = fcmp olt float %1398, %1167, !dbg !70
  %1400 = fcmp uno float %1398, 0.000000e+00, !dbg !71
  %1401 = or i1 %1399, %1400, !dbg !72
  %1402 = select i1 %1401, float %1398, float %1167, !dbg !73
  %1403 = fcmp olt float %1402, %1169, !dbg !70
  %1404 = fcmp uno float %1402, 0.000000e+00, !dbg !71
  %1405 = or i1 %1403, %1404, !dbg !72
  %1406 = select i1 %1405, float %1402, float %1169, !dbg !73
  %1407 = fcmp olt float %1406, %1188, !dbg !70
  %1408 = fcmp uno float %1406, 0.000000e+00, !dbg !71
  %1409 = or i1 %1407, %1408, !dbg !72
  %1410 = select i1 %1409, float %1406, float %1188, !dbg !73
  %1411 = fcmp olt float %1410, %1190, !dbg !70
  %1412 = fcmp uno float %1410, 0.000000e+00, !dbg !71
  %1413 = or i1 %1411, %1412, !dbg !72
  %1414 = select i1 %1413, float %1410, float %1190, !dbg !73
  %1415 = fcmp olt float %1414, %1209, !dbg !70
  %1416 = fcmp uno float %1414, 0.000000e+00, !dbg !71
  %1417 = or i1 %1415, %1416, !dbg !72
  %1418 = select i1 %1417, float %1414, float %1209, !dbg !73
  %1419 = fcmp olt float %1418, %1211, !dbg !70
  %1420 = fcmp uno float %1418, 0.000000e+00, !dbg !71
  %1421 = or i1 %1419, %1420, !dbg !72
  %1422 = select i1 %1421, float %1418, float %1211, !dbg !73
  %1423 = fcmp olt float %1422, %1230, !dbg !70
  %1424 = fcmp uno float %1422, 0.000000e+00, !dbg !71
  %1425 = or i1 %1423, %1424, !dbg !72
  %1426 = select i1 %1425, float %1422, float %1230, !dbg !73
  %1427 = fcmp olt float %1426, %1232, !dbg !70
  %1428 = fcmp uno float %1426, 0.000000e+00, !dbg !71
  %1429 = or i1 %1427, %1428, !dbg !72
  %1430 = select i1 %1429, float %1426, float %1232, !dbg !73
  %1431 = fcmp olt float %1430, %1251, !dbg !70
  %1432 = fcmp uno float %1430, 0.000000e+00, !dbg !71
  %1433 = or i1 %1431, %1432, !dbg !72
  %1434 = select i1 %1433, float %1430, float %1251, !dbg !73
  %1435 = fcmp olt float %1434, %1253, !dbg !70
  %1436 = fcmp uno float %1434, 0.000000e+00, !dbg !71
  %1437 = or i1 %1435, %1436, !dbg !72
  %1438 = select i1 %1437, float %1434, float %1253, !dbg !73
  %1439 = fcmp olt float %1438, %1272, !dbg !70
  %1440 = fcmp uno float %1438, 0.000000e+00, !dbg !71
  %1441 = or i1 %1439, %1440, !dbg !72
  %1442 = select i1 %1441, float %1438, float %1272, !dbg !73
  %1443 = fcmp olt float %1442, %1274, !dbg !70
  %1444 = fcmp uno float %1442, 0.000000e+00, !dbg !71
  %1445 = or i1 %1443, %1444, !dbg !72
  %1446 = select i1 %1445, float %1442, float %1274, !dbg !73
  %1447 = fcmp olt float %1446, %1293, !dbg !70
  %1448 = fcmp uno float %1446, 0.000000e+00, !dbg !71
  %1449 = or i1 %1447, %1448, !dbg !72
  %1450 = select i1 %1449, float %1446, float %1293, !dbg !73
  %1451 = fcmp olt float %1450, %1295, !dbg !70
  %1452 = fcmp uno float %1450, 0.000000e+00, !dbg !71
  %1453 = or i1 %1451, %1452, !dbg !72
  %1454 = select i1 %1453, float %1450, float %1295, !dbg !73
  %1455 = fcmp olt float %1303, %1305, !dbg !70
  %1456 = fcmp uno float %1303, 0.000000e+00, !dbg !71
  %1457 = or i1 %1455, %1456, !dbg !72
  %1458 = select i1 %1457, float %1303, float %1305, !dbg !73
  %1459 = fcmp olt float %1458, %1313, !dbg !70
  %1460 = fcmp uno float %1458, 0.000000e+00, !dbg !71
  %1461 = or i1 %1459, %1460, !dbg !72
  %1462 = select i1 %1461, float %1458, float %1313, !dbg !73
  %1463 = fcmp olt float %1462, %1315, !dbg !70
  %1464 = fcmp uno float %1462, 0.000000e+00, !dbg !71
  %1465 = or i1 %1463, %1464, !dbg !72
  %1466 = select i1 %1465, float %1462, float %1315, !dbg !73
  %1467 = fcmp olt float %1466, %1323, !dbg !70
  %1468 = fcmp uno float %1466, 0.000000e+00, !dbg !71
  %1469 = or i1 %1467, %1468, !dbg !72
  %1470 = select i1 %1469, float %1466, float %1323, !dbg !73
  %1471 = fcmp olt float %1470, %1325, !dbg !70
  %1472 = fcmp uno float %1470, 0.000000e+00, !dbg !71
  %1473 = or i1 %1471, %1472, !dbg !72
  %1474 = select i1 %1473, float %1470, float %1325, !dbg !73
  %1475 = fcmp olt float %1474, %1333, !dbg !70
  %1476 = fcmp uno float %1474, 0.000000e+00, !dbg !71
  %1477 = or i1 %1475, %1476, !dbg !72
  %1478 = select i1 %1477, float %1474, float %1333, !dbg !73
  %1479 = fcmp olt float %1478, %1335, !dbg !70
  %1480 = fcmp uno float %1478, 0.000000e+00, !dbg !71
  %1481 = or i1 %1479, %1480, !dbg !72
  %1482 = select i1 %1481, float %1478, float %1335, !dbg !73
  %1483 = fcmp olt float %1482, %1343, !dbg !70
  %1484 = fcmp uno float %1482, 0.000000e+00, !dbg !71
  %1485 = or i1 %1483, %1484, !dbg !72
  %1486 = select i1 %1485, float %1482, float %1343, !dbg !73
  %1487 = fcmp olt float %1486, %1345, !dbg !70
  %1488 = fcmp uno float %1486, 0.000000e+00, !dbg !71
  %1489 = or i1 %1487, %1488, !dbg !72
  %1490 = select i1 %1489, float %1486, float %1345, !dbg !73
  %1491 = fcmp olt float %1490, %1353, !dbg !70
  %1492 = fcmp uno float %1490, 0.000000e+00, !dbg !71
  %1493 = or i1 %1491, %1492, !dbg !72
  %1494 = select i1 %1493, float %1490, float %1353, !dbg !73
  %1495 = fcmp olt float %1494, %1355, !dbg !70
  %1496 = fcmp uno float %1494, 0.000000e+00, !dbg !71
  %1497 = or i1 %1495, %1496, !dbg !72
  %1498 = select i1 %1497, float %1494, float %1355, !dbg !73
  %1499 = fcmp olt float %1498, %1363, !dbg !70
  %1500 = fcmp uno float %1498, 0.000000e+00, !dbg !71
  %1501 = or i1 %1499, %1500, !dbg !72
  %1502 = select i1 %1501, float %1498, float %1363, !dbg !73
  %1503 = fcmp olt float %1502, %1365, !dbg !70
  %1504 = fcmp uno float %1502, 0.000000e+00, !dbg !71
  %1505 = or i1 %1503, %1504, !dbg !72
  %1506 = select i1 %1505, float %1502, float %1365, !dbg !73
  %1507 = fcmp olt float %1506, %1373, !dbg !70
  %1508 = fcmp uno float %1506, 0.000000e+00, !dbg !71
  %1509 = or i1 %1507, %1508, !dbg !72
  %1510 = select i1 %1509, float %1506, float %1373, !dbg !73
  %1511 = fcmp olt float %1510, %1375, !dbg !70
  %1512 = fcmp uno float %1510, 0.000000e+00, !dbg !71
  %1513 = or i1 %1511, %1512, !dbg !72
  %1514 = select i1 %1513, float %1510, float %1375, !dbg !73
  %1515 = bitcast float %1454 to i32, !dbg !68
  %1516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1515, i32 16, i32 31), !dbg !68
  %1517 = bitcast i32 %1516 to float, !dbg !68
  %1518 = fcmp olt float %1454, %1517, !dbg !70
  %1519 = fcmp uno float %1454, 0.000000e+00, !dbg !71
  %1520 = or i1 %1518, %1519, !dbg !72
  %1521 = select i1 %1520, float %1454, float %1517, !dbg !73
  %1522 = bitcast float %1521 to i32, !dbg !68
  %1523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1522, i32 8, i32 31), !dbg !68
  %1524 = bitcast i32 %1523 to float, !dbg !68
  %1525 = fcmp olt float %1521, %1524, !dbg !70
  %1526 = fcmp uno float %1521, 0.000000e+00, !dbg !71
  %1527 = or i1 %1525, %1526, !dbg !72
  %1528 = select i1 %1527, float %1521, float %1524, !dbg !73
  %1529 = bitcast float %1528 to i32, !dbg !68
  %1530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1529, i32 4, i32 31), !dbg !68
  %1531 = bitcast i32 %1530 to float, !dbg !68
  %1532 = fcmp olt float %1528, %1531, !dbg !70
  %1533 = fcmp uno float %1528, 0.000000e+00, !dbg !71
  %1534 = or i1 %1532, %1533, !dbg !72
  %1535 = select i1 %1534, float %1528, float %1531, !dbg !73
  %1536 = bitcast float %1535 to i32, !dbg !68
  %1537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1536, i32 2, i32 31), !dbg !68
  %1538 = bitcast i32 %1537 to float, !dbg !68
  %1539 = fcmp olt float %1535, %1538, !dbg !70
  %1540 = fcmp uno float %1535, 0.000000e+00, !dbg !71
  %1541 = or i1 %1539, %1540, !dbg !72
  %1542 = select i1 %1541, float %1535, float %1538, !dbg !73
  %1543 = bitcast float %1542 to i32, !dbg !68
  %1544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1543, i32 1, i32 31), !dbg !68
  %1545 = bitcast i32 %1544 to float, !dbg !68
  %1546 = fcmp olt float %1542, %1545, !dbg !70
  %1547 = fcmp uno float %1542, 0.000000e+00, !dbg !71
  %1548 = or i1 %1546, %1547, !dbg !72
  %1549 = bitcast float %1514 to i32, !dbg !68
  %1550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1549, i32 16, i32 31), !dbg !68
  %1551 = bitcast i32 %1550 to float, !dbg !68
  %1552 = fcmp olt float %1514, %1551, !dbg !70
  %1553 = fcmp uno float %1514, 0.000000e+00, !dbg !71
  %1554 = or i1 %1552, %1553, !dbg !72
  %1555 = select i1 %1554, float %1514, float %1551, !dbg !73
  %1556 = bitcast float %1555 to i32, !dbg !68
  %1557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1556, i32 8, i32 31), !dbg !68
  %1558 = bitcast i32 %1557 to float, !dbg !68
  %1559 = fcmp olt float %1555, %1558, !dbg !70
  %1560 = fcmp uno float %1555, 0.000000e+00, !dbg !71
  %1561 = or i1 %1559, %1560, !dbg !72
  %1562 = select i1 %1561, float %1555, float %1558, !dbg !73
  %1563 = bitcast float %1562 to i32, !dbg !68
  %1564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1563, i32 4, i32 31), !dbg !68
  %1565 = bitcast i32 %1564 to float, !dbg !68
  %1566 = fcmp olt float %1562, %1565, !dbg !70
  %1567 = fcmp uno float %1562, 0.000000e+00, !dbg !71
  %1568 = or i1 %1566, %1567, !dbg !72
  %1569 = select i1 %1568, float %1562, float %1565, !dbg !73
  %1570 = bitcast float %1569 to i32, !dbg !68
  %1571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1570, i32 2, i32 31), !dbg !68
  %1572 = bitcast i32 %1571 to float, !dbg !68
  %1573 = fcmp olt float %1569, %1572, !dbg !70
  %1574 = fcmp uno float %1569, 0.000000e+00, !dbg !71
  %1575 = or i1 %1573, %1574, !dbg !72
  %1576 = select i1 %1575, float %1569, float %1572, !dbg !73
  %1577 = bitcast float %1576 to i32, !dbg !68
  %1578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1577, i32 1, i32 31), !dbg !68
  %1579 = bitcast i32 %1578 to float, !dbg !68
  %1580 = fcmp olt float %1576, %1579, !dbg !70
  %1581 = fcmp uno float %1576, 0.000000e+00, !dbg !71
  %1582 = or i1 %1580, %1581, !dbg !72
  %1583 = select i1 %1548, i32 %1543, i32 %1544, !dbg !73
  %1584 = insertelement <1 x i32> poison, i32 %1583, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %666, <1 x i32> %1584, i1 %665) #5, !dbg !68
  %1585 = select i1 %1582, i32 %1577, i32 %1578, !dbg !73
  %1586 = insertelement <1 x i32> poison, i32 %1585, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %673, <1 x i32> %1586, i1 %665) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1587 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %680, i1 %679) #5, !dbg !68
  %1588 = bitcast i32 %1587 to float, !dbg !68
  %1589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1587, i32 4, i32 31), !dbg !68
  %1590 = bitcast i32 %1589 to float, !dbg !68
  %1591 = fcmp olt float %1588, %1590, !dbg !70
  %1592 = fcmp uno float %1588, 0.000000e+00, !dbg !71
  %1593 = or i1 %1592, %1591, !dbg !72
  %1594 = select i1 %1593, float %1588, float %1590, !dbg !73
  %1595 = bitcast float %1594 to i32, !dbg !68
  %1596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1595, i32 2, i32 31), !dbg !68
  %1597 = bitcast i32 %1596 to float, !dbg !68
  %1598 = fcmp olt float %1594, %1597, !dbg !70
  %1599 = fcmp uno float %1594, 0.000000e+00, !dbg !71
  %1600 = or i1 %1598, %1599, !dbg !72
  %1601 = select i1 %1600, float %1594, float %1597, !dbg !73
  %1602 = bitcast float %1601 to i32, !dbg !68
  %1603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1602, i32 1, i32 31), !dbg !68
  %1604 = bitcast i32 %1603 to float, !dbg !68
  %1605 = fcmp olt float %1601, %1604, !dbg !70
  %1606 = fcmp uno float %1601, 0.000000e+00, !dbg !71
  %1607 = or i1 %1605, %1606, !dbg !72
  %1608 = select i1 %1607, i32 %1602, i32 %1603, !dbg !73
  %1609 = insertelement <1 x i32> poison, i32 %1608, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %1609, i1 %751) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %1610 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %1611 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1612 = bitcast float %1610 to i32, !dbg !74
  %1613 = bitcast float %1611 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1612, i32 %1613, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1614 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1038, !dbg !74
  %1615 = load float, ptr addrspace(3) %1614, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1616 = fcmp ogt float %1149, %1150, !dbg !77
  %1617 = fcmp uno float %1149, 0.000000e+00, !dbg !78
  %1618 = or i1 %1616, %1617, !dbg !79
  %1619 = select i1 %1618, float %1149, float %1150, !dbg !80
  %1620 = fcmp ogt float %1619, %1170, !dbg !77
  %1621 = fcmp uno float %1619, 0.000000e+00, !dbg !78
  %1622 = or i1 %1620, %1621, !dbg !79
  %1623 = select i1 %1622, float %1619, float %1170, !dbg !80
  %1624 = fcmp ogt float %1623, %1171, !dbg !77
  %1625 = fcmp uno float %1623, 0.000000e+00, !dbg !78
  %1626 = or i1 %1624, %1625, !dbg !79
  %1627 = select i1 %1626, float %1623, float %1171, !dbg !80
  %1628 = fcmp ogt float %1627, %1191, !dbg !77
  %1629 = fcmp uno float %1627, 0.000000e+00, !dbg !78
  %1630 = or i1 %1628, %1629, !dbg !79
  %1631 = select i1 %1630, float %1627, float %1191, !dbg !80
  %1632 = fcmp ogt float %1631, %1192, !dbg !77
  %1633 = fcmp uno float %1631, 0.000000e+00, !dbg !78
  %1634 = or i1 %1632, %1633, !dbg !79
  %1635 = select i1 %1634, float %1631, float %1192, !dbg !80
  %1636 = fcmp ogt float %1635, %1212, !dbg !77
  %1637 = fcmp uno float %1635, 0.000000e+00, !dbg !78
  %1638 = or i1 %1636, %1637, !dbg !79
  %1639 = select i1 %1638, float %1635, float %1212, !dbg !80
  %1640 = fcmp ogt float %1639, %1213, !dbg !77
  %1641 = fcmp uno float %1639, 0.000000e+00, !dbg !78
  %1642 = or i1 %1640, %1641, !dbg !79
  %1643 = select i1 %1642, float %1639, float %1213, !dbg !80
  %1644 = fcmp ogt float %1643, %1233, !dbg !77
  %1645 = fcmp uno float %1643, 0.000000e+00, !dbg !78
  %1646 = or i1 %1644, %1645, !dbg !79
  %1647 = select i1 %1646, float %1643, float %1233, !dbg !80
  %1648 = fcmp ogt float %1647, %1234, !dbg !77
  %1649 = fcmp uno float %1647, 0.000000e+00, !dbg !78
  %1650 = or i1 %1648, %1649, !dbg !79
  %1651 = select i1 %1650, float %1647, float %1234, !dbg !80
  %1652 = fcmp ogt float %1651, %1254, !dbg !77
  %1653 = fcmp uno float %1651, 0.000000e+00, !dbg !78
  %1654 = or i1 %1652, %1653, !dbg !79
  %1655 = select i1 %1654, float %1651, float %1254, !dbg !80
  %1656 = fcmp ogt float %1655, %1255, !dbg !77
  %1657 = fcmp uno float %1655, 0.000000e+00, !dbg !78
  %1658 = or i1 %1656, %1657, !dbg !79
  %1659 = select i1 %1658, float %1655, float %1255, !dbg !80
  %1660 = fcmp ogt float %1659, %1275, !dbg !77
  %1661 = fcmp uno float %1659, 0.000000e+00, !dbg !78
  %1662 = or i1 %1660, %1661, !dbg !79
  %1663 = select i1 %1662, float %1659, float %1275, !dbg !80
  %1664 = fcmp ogt float %1663, %1276, !dbg !77
  %1665 = fcmp uno float %1663, 0.000000e+00, !dbg !78
  %1666 = or i1 %1664, %1665, !dbg !79
  %1667 = select i1 %1666, float %1663, float %1276, !dbg !80
  %1668 = fcmp ogt float %1667, %1296, !dbg !77
  %1669 = fcmp uno float %1667, 0.000000e+00, !dbg !78
  %1670 = or i1 %1668, %1669, !dbg !79
  %1671 = select i1 %1670, float %1667, float %1296, !dbg !80
  %1672 = fcmp ogt float %1671, %1297, !dbg !77
  %1673 = fcmp uno float %1671, 0.000000e+00, !dbg !78
  %1674 = or i1 %1672, %1673, !dbg !79
  %1675 = select i1 %1674, float %1671, float %1297, !dbg !80
  %1676 = fcmp ogt float %1306, %1307, !dbg !77
  %1677 = fcmp uno float %1306, 0.000000e+00, !dbg !78
  %1678 = or i1 %1676, %1677, !dbg !79
  %1679 = select i1 %1678, float %1306, float %1307, !dbg !80
  %1680 = fcmp ogt float %1679, %1316, !dbg !77
  %1681 = fcmp uno float %1679, 0.000000e+00, !dbg !78
  %1682 = or i1 %1680, %1681, !dbg !79
  %1683 = select i1 %1682, float %1679, float %1316, !dbg !80
  %1684 = fcmp ogt float %1683, %1317, !dbg !77
  %1685 = fcmp uno float %1683, 0.000000e+00, !dbg !78
  %1686 = or i1 %1684, %1685, !dbg !79
  %1687 = select i1 %1686, float %1683, float %1317, !dbg !80
  %1688 = fcmp ogt float %1687, %1326, !dbg !77
  %1689 = fcmp uno float %1687, 0.000000e+00, !dbg !78
  %1690 = or i1 %1688, %1689, !dbg !79
  %1691 = select i1 %1690, float %1687, float %1326, !dbg !80
  %1692 = fcmp ogt float %1691, %1327, !dbg !77
  %1693 = fcmp uno float %1691, 0.000000e+00, !dbg !78
  %1694 = or i1 %1692, %1693, !dbg !79
  %1695 = select i1 %1694, float %1691, float %1327, !dbg !80
  %1696 = fcmp ogt float %1695, %1336, !dbg !77
  %1697 = fcmp uno float %1695, 0.000000e+00, !dbg !78
  %1698 = or i1 %1696, %1697, !dbg !79
  %1699 = select i1 %1698, float %1695, float %1336, !dbg !80
  %1700 = fcmp ogt float %1699, %1337, !dbg !77
  %1701 = fcmp uno float %1699, 0.000000e+00, !dbg !78
  %1702 = or i1 %1700, %1701, !dbg !79
  %1703 = select i1 %1702, float %1699, float %1337, !dbg !80
  %1704 = fcmp ogt float %1703, %1346, !dbg !77
  %1705 = fcmp uno float %1703, 0.000000e+00, !dbg !78
  %1706 = or i1 %1704, %1705, !dbg !79
  %1707 = select i1 %1706, float %1703, float %1346, !dbg !80
  %1708 = fcmp ogt float %1707, %1347, !dbg !77
  %1709 = fcmp uno float %1707, 0.000000e+00, !dbg !78
  %1710 = or i1 %1708, %1709, !dbg !79
  %1711 = select i1 %1710, float %1707, float %1347, !dbg !80
  %1712 = fcmp ogt float %1711, %1356, !dbg !77
  %1713 = fcmp uno float %1711, 0.000000e+00, !dbg !78
  %1714 = or i1 %1712, %1713, !dbg !79
  %1715 = select i1 %1714, float %1711, float %1356, !dbg !80
  %1716 = fcmp ogt float %1715, %1357, !dbg !77
  %1717 = fcmp uno float %1715, 0.000000e+00, !dbg !78
  %1718 = or i1 %1716, %1717, !dbg !79
  %1719 = select i1 %1718, float %1715, float %1357, !dbg !80
  %1720 = fcmp ogt float %1719, %1366, !dbg !77
  %1721 = fcmp uno float %1719, 0.000000e+00, !dbg !78
  %1722 = or i1 %1720, %1721, !dbg !79
  %1723 = select i1 %1722, float %1719, float %1366, !dbg !80
  %1724 = fcmp ogt float %1723, %1367, !dbg !77
  %1725 = fcmp uno float %1723, 0.000000e+00, !dbg !78
  %1726 = or i1 %1724, %1725, !dbg !79
  %1727 = select i1 %1726, float %1723, float %1367, !dbg !80
  %1728 = fcmp ogt float %1727, %1376, !dbg !77
  %1729 = fcmp uno float %1727, 0.000000e+00, !dbg !78
  %1730 = or i1 %1728, %1729, !dbg !79
  %1731 = select i1 %1730, float %1727, float %1376, !dbg !80
  %1732 = fcmp ogt float %1731, %1377, !dbg !77
  %1733 = fcmp uno float %1731, 0.000000e+00, !dbg !78
  %1734 = or i1 %1732, %1733, !dbg !79
  %1735 = select i1 %1734, float %1731, float %1377, !dbg !80
  %1736 = bitcast float %1675 to i32, !dbg !75
  %1737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1736, i32 16, i32 31), !dbg !75
  %1738 = bitcast i32 %1737 to float, !dbg !75
  %1739 = fcmp ogt float %1675, %1738, !dbg !77
  %1740 = fcmp uno float %1675, 0.000000e+00, !dbg !78
  %1741 = or i1 %1739, %1740, !dbg !79
  %1742 = select i1 %1741, float %1675, float %1738, !dbg !80
  %1743 = bitcast float %1742 to i32, !dbg !75
  %1744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1743, i32 8, i32 31), !dbg !75
  %1745 = bitcast i32 %1744 to float, !dbg !75
  %1746 = fcmp ogt float %1742, %1745, !dbg !77
  %1747 = fcmp uno float %1742, 0.000000e+00, !dbg !78
  %1748 = or i1 %1746, %1747, !dbg !79
  %1749 = select i1 %1748, float %1742, float %1745, !dbg !80
  %1750 = bitcast float %1749 to i32, !dbg !75
  %1751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1750, i32 4, i32 31), !dbg !75
  %1752 = bitcast i32 %1751 to float, !dbg !75
  %1753 = fcmp ogt float %1749, %1752, !dbg !77
  %1754 = fcmp uno float %1749, 0.000000e+00, !dbg !78
  %1755 = or i1 %1753, %1754, !dbg !79
  %1756 = select i1 %1755, float %1749, float %1752, !dbg !80
  %1757 = bitcast float %1756 to i32, !dbg !75
  %1758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1757, i32 2, i32 31), !dbg !75
  %1759 = bitcast i32 %1758 to float, !dbg !75
  %1760 = fcmp ogt float %1756, %1759, !dbg !77
  %1761 = fcmp uno float %1756, 0.000000e+00, !dbg !78
  %1762 = or i1 %1760, %1761, !dbg !79
  %1763 = select i1 %1762, float %1756, float %1759, !dbg !80
  %1764 = bitcast float %1763 to i32, !dbg !75
  %1765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1764, i32 1, i32 31), !dbg !75
  %1766 = bitcast i32 %1765 to float, !dbg !75
  %1767 = fcmp ogt float %1763, %1766, !dbg !77
  %1768 = fcmp uno float %1763, 0.000000e+00, !dbg !78
  %1769 = or i1 %1767, %1768, !dbg !79
  %1770 = bitcast float %1735 to i32, !dbg !75
  %1771 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1770, i32 16, i32 31), !dbg !75
  %1772 = bitcast i32 %1771 to float, !dbg !75
  %1773 = fcmp ogt float %1735, %1772, !dbg !77
  %1774 = fcmp uno float %1735, 0.000000e+00, !dbg !78
  %1775 = or i1 %1773, %1774, !dbg !79
  %1776 = select i1 %1775, float %1735, float %1772, !dbg !80
  %1777 = bitcast float %1776 to i32, !dbg !75
  %1778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1777, i32 8, i32 31), !dbg !75
  %1779 = bitcast i32 %1778 to float, !dbg !75
  %1780 = fcmp ogt float %1776, %1779, !dbg !77
  %1781 = fcmp uno float %1776, 0.000000e+00, !dbg !78
  %1782 = or i1 %1780, %1781, !dbg !79
  %1783 = select i1 %1782, float %1776, float %1779, !dbg !80
  %1784 = bitcast float %1783 to i32, !dbg !75
  %1785 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1784, i32 4, i32 31), !dbg !75
  %1786 = bitcast i32 %1785 to float, !dbg !75
  %1787 = fcmp ogt float %1783, %1786, !dbg !77
  %1788 = fcmp uno float %1783, 0.000000e+00, !dbg !78
  %1789 = or i1 %1787, %1788, !dbg !79
  %1790 = select i1 %1789, float %1783, float %1786, !dbg !80
  %1791 = bitcast float %1790 to i32, !dbg !75
  %1792 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1791, i32 2, i32 31), !dbg !75
  %1793 = bitcast i32 %1792 to float, !dbg !75
  %1794 = fcmp ogt float %1790, %1793, !dbg !77
  %1795 = fcmp uno float %1790, 0.000000e+00, !dbg !78
  %1796 = or i1 %1794, %1795, !dbg !79
  %1797 = select i1 %1796, float %1790, float %1793, !dbg !80
  %1798 = bitcast float %1797 to i32, !dbg !75
  %1799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1798, i32 1, i32 31), !dbg !75
  %1800 = bitcast i32 %1799 to float, !dbg !75
  %1801 = fcmp ogt float %1797, %1800, !dbg !77
  %1802 = fcmp uno float %1797, 0.000000e+00, !dbg !78
  %1803 = or i1 %1801, %1802, !dbg !79
  %1804 = select i1 %1769, i32 %1764, i32 %1765, !dbg !80
  %1805 = insertelement <1 x i32> poison, i32 %1804, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %666, <1 x i32> %1805, i1 %665) #5, !dbg !75
  %1806 = select i1 %1803, i32 %1798, i32 %1799, !dbg !80
  %1807 = insertelement <1 x i32> poison, i32 %1806, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %673, <1 x i32> %1807, i1 %665) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1808 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %680, i1 %679) #5, !dbg !75
  %1809 = bitcast i32 %1808 to float, !dbg !75
  %1810 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1808, i32 4, i32 31), !dbg !75
  %1811 = bitcast i32 %1810 to float, !dbg !75
  %1812 = fcmp ogt float %1809, %1811, !dbg !77
  %1813 = fcmp uno float %1809, 0.000000e+00, !dbg !78
  %1814 = or i1 %1813, %1812, !dbg !79
  %1815 = select i1 %1814, float %1809, float %1811, !dbg !80
  %1816 = bitcast float %1815 to i32, !dbg !75
  %1817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1816, i32 2, i32 31), !dbg !75
  %1818 = bitcast i32 %1817 to float, !dbg !75
  %1819 = fcmp ogt float %1815, %1818, !dbg !77
  %1820 = fcmp uno float %1815, 0.000000e+00, !dbg !78
  %1821 = or i1 %1819, %1820, !dbg !79
  %1822 = select i1 %1821, float %1815, float %1818, !dbg !80
  %1823 = bitcast float %1822 to i32, !dbg !75
  %1824 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1823, i32 1, i32 31), !dbg !75
  %1825 = bitcast i32 %1824 to float, !dbg !75
  %1826 = fcmp ogt float %1822, %1825, !dbg !77
  %1827 = fcmp uno float %1822, 0.000000e+00, !dbg !78
  %1828 = or i1 %1826, %1827, !dbg !79
  %1829 = select i1 %1828, i32 %1823, i32 %1824, !dbg !80
  %1830 = insertelement <1 x i32> poison, i32 %1829, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %1830, i1 %751) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %1831 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %1832 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1833 = bitcast float %1831 to i32, !dbg !81
  %1834 = bitcast float %1832 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1833, i32 %1834, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1835 = load float, ptr addrspace(3) %1614, align 4, !dbg !81
  %1836 = sext i32 %1039 to i64, !dbg !82
  %1837 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1836, !dbg !82
  %1838 = fptrunc float %1615 to bfloat, !dbg !74
  %1839 = and i32 %18, 254, !dbg !74
  %1840 = icmp eq i32 %1839, 0, !dbg !74
  %1841 = bitcast bfloat %1838 to i16, !dbg !74
  %1842 = and i1 %1840, %1040, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1841, ptr addrspace(1) %1837, i1 %1842) #5, !dbg !74
  %1843 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1836, !dbg !83
  %1844 = fptrunc float %1835 to bfloat, !dbg !81
  %1845 = bitcast bfloat %1844 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1845, ptr addrspace(1) %1843, i1 %1842) #5, !dbg !81
  %1846 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1836, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1841, ptr addrspace(1) %1846, i1 %1842) #5, !dbg !85
  %1847 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1836, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1845, ptr addrspace(1) %1847, i1 %1842) #5, !dbg !87
  %1848 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1836, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1841, ptr addrspace(1) %1848, i1 %1842) #5, !dbg !89
  %1849 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1836, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1845, ptr addrspace(1) %1849, i1 %1842) #5, !dbg !91
  %1850 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1127, i1 %47) #5, !dbg !92
  %1851 = extractvalue { i32, i32, i32, i32 } %1850, 0, !dbg !92
  %1852 = bitcast i32 %1851 to <2 x bfloat>, !dbg !92
  %1853 = extractvalue { i32, i32, i32, i32 } %1850, 1, !dbg !92
  %1854 = bitcast i32 %1853 to <2 x bfloat>, !dbg !92
  %1855 = extractvalue { i32, i32, i32, i32 } %1850, 2, !dbg !92
  %1856 = bitcast i32 %1855 to <2 x bfloat>, !dbg !92
  %1857 = extractvalue { i32, i32, i32, i32 } %1850, 3, !dbg !92
  %1858 = bitcast i32 %1857 to <2 x bfloat>, !dbg !92
  %1859 = extractelement <2 x bfloat> %1852, i64 0, !dbg !92
  %1860 = extractelement <2 x bfloat> %1852, i64 1, !dbg !92
  %1861 = extractelement <2 x bfloat> %1854, i64 0, !dbg !92
  %1862 = extractelement <2 x bfloat> %1854, i64 1, !dbg !92
  %1863 = extractelement <2 x bfloat> %1856, i64 0, !dbg !92
  %1864 = extractelement <2 x bfloat> %1856, i64 1, !dbg !92
  %1865 = extractelement <2 x bfloat> %1858, i64 0, !dbg !92
  %1866 = extractelement <2 x bfloat> %1858, i64 1, !dbg !92
  %1867 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1128, i1 %47) #5, !dbg !92
  %1868 = extractvalue { i32, i32, i32, i32 } %1867, 0, !dbg !92
  %1869 = bitcast i32 %1868 to <2 x bfloat>, !dbg !92
  %1870 = extractvalue { i32, i32, i32, i32 } %1867, 1, !dbg !92
  %1871 = bitcast i32 %1870 to <2 x bfloat>, !dbg !92
  %1872 = extractvalue { i32, i32, i32, i32 } %1867, 2, !dbg !92
  %1873 = bitcast i32 %1872 to <2 x bfloat>, !dbg !92
  %1874 = extractvalue { i32, i32, i32, i32 } %1867, 3, !dbg !92
  %1875 = bitcast i32 %1874 to <2 x bfloat>, !dbg !92
  %1876 = extractelement <2 x bfloat> %1869, i64 0, !dbg !92
  %1877 = extractelement <2 x bfloat> %1869, i64 1, !dbg !92
  %1878 = extractelement <2 x bfloat> %1871, i64 0, !dbg !92
  %1879 = extractelement <2 x bfloat> %1871, i64 1, !dbg !92
  %1880 = extractelement <2 x bfloat> %1873, i64 0, !dbg !92
  %1881 = extractelement <2 x bfloat> %1873, i64 1, !dbg !92
  %1882 = extractelement <2 x bfloat> %1875, i64 0, !dbg !92
  %1883 = extractelement <2 x bfloat> %1875, i64 1, !dbg !92
  %1884 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1129, i1 %47) #5, !dbg !92
  %1885 = extractvalue { i32, i32, i32, i32 } %1884, 0, !dbg !92
  %1886 = bitcast i32 %1885 to <2 x bfloat>, !dbg !92
  %1887 = extractvalue { i32, i32, i32, i32 } %1884, 1, !dbg !92
  %1888 = bitcast i32 %1887 to <2 x bfloat>, !dbg !92
  %1889 = extractvalue { i32, i32, i32, i32 } %1884, 2, !dbg !92
  %1890 = bitcast i32 %1889 to <2 x bfloat>, !dbg !92
  %1891 = extractvalue { i32, i32, i32, i32 } %1884, 3, !dbg !92
  %1892 = bitcast i32 %1891 to <2 x bfloat>, !dbg !92
  %1893 = extractelement <2 x bfloat> %1886, i64 0, !dbg !92
  %1894 = extractelement <2 x bfloat> %1886, i64 1, !dbg !92
  %1895 = extractelement <2 x bfloat> %1888, i64 0, !dbg !92
  %1896 = extractelement <2 x bfloat> %1888, i64 1, !dbg !92
  %1897 = extractelement <2 x bfloat> %1890, i64 0, !dbg !92
  %1898 = extractelement <2 x bfloat> %1890, i64 1, !dbg !92
  %1899 = extractelement <2 x bfloat> %1892, i64 0, !dbg !92
  %1900 = extractelement <2 x bfloat> %1892, i64 1, !dbg !92
  %1901 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1130, i1 %47) #5, !dbg !92
  %1902 = extractvalue { i32, i32, i32, i32 } %1901, 0, !dbg !92
  %1903 = bitcast i32 %1902 to <2 x bfloat>, !dbg !92
  %1904 = extractvalue { i32, i32, i32, i32 } %1901, 1, !dbg !92
  %1905 = bitcast i32 %1904 to <2 x bfloat>, !dbg !92
  %1906 = extractvalue { i32, i32, i32, i32 } %1901, 2, !dbg !92
  %1907 = bitcast i32 %1906 to <2 x bfloat>, !dbg !92
  %1908 = extractvalue { i32, i32, i32, i32 } %1901, 3, !dbg !92
  %1909 = bitcast i32 %1908 to <2 x bfloat>, !dbg !92
  %1910 = extractelement <2 x bfloat> %1903, i64 0, !dbg !92
  %1911 = extractelement <2 x bfloat> %1903, i64 1, !dbg !92
  %1912 = extractelement <2 x bfloat> %1905, i64 0, !dbg !92
  %1913 = extractelement <2 x bfloat> %1905, i64 1, !dbg !92
  %1914 = extractelement <2 x bfloat> %1907, i64 0, !dbg !92
  %1915 = extractelement <2 x bfloat> %1907, i64 1, !dbg !92
  %1916 = extractelement <2 x bfloat> %1909, i64 0, !dbg !92
  %1917 = extractelement <2 x bfloat> %1909, i64 1, !dbg !92
  %1918 = fpext bfloat %1859 to float, !dbg !93
  %1919 = fpext bfloat %1860 to float, !dbg !93
  %1920 = fpext bfloat %1861 to float, !dbg !93
  %1921 = fpext bfloat %1862 to float, !dbg !93
  %1922 = fpext bfloat %1863 to float, !dbg !93
  %1923 = fpext bfloat %1864 to float, !dbg !93
  %1924 = fpext bfloat %1865 to float, !dbg !93
  %1925 = fpext bfloat %1866 to float, !dbg !93
  %1926 = fpext bfloat %1876 to float, !dbg !93
  %1927 = fpext bfloat %1877 to float, !dbg !93
  %1928 = fpext bfloat %1878 to float, !dbg !93
  %1929 = fpext bfloat %1879 to float, !dbg !93
  %1930 = fpext bfloat %1880 to float, !dbg !93
  %1931 = fpext bfloat %1881 to float, !dbg !93
  %1932 = fpext bfloat %1882 to float, !dbg !93
  %1933 = fpext bfloat %1883 to float, !dbg !93
  %1934 = fpext bfloat %1893 to float, !dbg !93
  %1935 = fpext bfloat %1894 to float, !dbg !93
  %1936 = fpext bfloat %1895 to float, !dbg !93
  %1937 = fpext bfloat %1896 to float, !dbg !93
  %1938 = fpext bfloat %1897 to float, !dbg !93
  %1939 = fpext bfloat %1898 to float, !dbg !93
  %1940 = fpext bfloat %1899 to float, !dbg !93
  %1941 = fpext bfloat %1900 to float, !dbg !93
  %1942 = fpext bfloat %1910 to float, !dbg !93
  %1943 = fpext bfloat %1911 to float, !dbg !93
  %1944 = fpext bfloat %1912 to float, !dbg !93
  %1945 = fpext bfloat %1913 to float, !dbg !93
  %1946 = fpext bfloat %1914 to float, !dbg !93
  %1947 = fpext bfloat %1915 to float, !dbg !93
  %1948 = fpext bfloat %1916 to float, !dbg !93
  %1949 = fpext bfloat %1917 to float, !dbg !93
  %.inv = fcmp oge float %1610, 0.000000e+00, !dbg !94
  %1950 = select i1 %.inv, float 0.000000e+00, float %1610, !dbg !94
  %.inv32 = fcmp oge float %1611, 0.000000e+00, !dbg !94
  %1951 = select i1 %.inv32, float 0.000000e+00, float %1611, !dbg !94
  %1952 = fsub float 0.000000e+00, %1950, !dbg !96
  %1953 = fsub float 0.000000e+00, %1951, !dbg !96
  %.inv33 = fcmp ole float %1831, 0.000000e+00, !dbg !97
  %1954 = select i1 %.inv33, float 0.000000e+00, float %1831, !dbg !97
  %.inv34 = fcmp ole float %1832, 0.000000e+00, !dbg !97
  %1955 = select i1 %.inv34, float 0.000000e+00, float %1832, !dbg !97
  %1956 = fcmp ogt float %1952, %1954, !dbg !99
  %1957 = fcmp ogt float %1953, %1955, !dbg !99
  %1958 = fcmp uno float %1952, 0.000000e+00, !dbg !101
  %1959 = fcmp uno float %1953, 0.000000e+00, !dbg !101
  %1960 = or i1 %1958, %1956, !dbg !102
  %1961 = or i1 %1959, %1957, !dbg !102
  %1962 = select i1 %1960, float %1952, float %1954, !dbg !103
  %1963 = select i1 %1961, float %1953, float %1955, !dbg !103
  %1964 = fmul float %1962, 0x3F80204080000000, !dbg !104
  %1965 = fmul float %1963, 0x3F80204080000000, !dbg !104
  %1966 = fcmp ogt float %1964, 0x3EE4F8B580000000, !dbg !105
  %1967 = fcmp ogt float %1965, 0x3EE4F8B580000000, !dbg !105
  %1968 = fcmp uno float %1964, 0.000000e+00, !dbg !107
  %1969 = fcmp uno float %1965, 0.000000e+00, !dbg !107
  %1970 = or i1 %1966, %1968, !dbg !108
  %1971 = or i1 %1967, %1969, !dbg !108
  %1972 = select i1 %1970, float %1964, float 0x3EE4F8B580000000, !dbg !109
  %1973 = select i1 %1971, float %1965, float 0x3EE4F8B580000000, !dbg !109
  %1974 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1972), !dbg !110
  %1975 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1973), !dbg !110
  %1976 = fmul float %1974, %1918, !dbg !111
  %1977 = fmul float %1974, %1919, !dbg !111
  %1978 = fmul float %1974, %1920, !dbg !111
  %1979 = fmul float %1974, %1921, !dbg !111
  %1980 = fmul float %1974, %1922, !dbg !111
  %1981 = fmul float %1974, %1923, !dbg !111
  %1982 = fmul float %1974, %1924, !dbg !111
  %1983 = fmul float %1974, %1925, !dbg !111
  %1984 = fmul float %1974, %1926, !dbg !111
  %1985 = fmul float %1974, %1927, !dbg !111
  %1986 = fmul float %1974, %1928, !dbg !111
  %1987 = fmul float %1974, %1929, !dbg !111
  %1988 = fmul float %1974, %1930, !dbg !111
  %1989 = fmul float %1974, %1931, !dbg !111
  %1990 = fmul float %1974, %1932, !dbg !111
  %1991 = fmul float %1974, %1933, !dbg !111
  %1992 = fmul float %1975, %1934, !dbg !111
  %1993 = fmul float %1975, %1935, !dbg !111
  %1994 = fmul float %1975, %1936, !dbg !111
  %1995 = fmul float %1975, %1937, !dbg !111
  %1996 = fmul float %1975, %1938, !dbg !111
  %1997 = fmul float %1975, %1939, !dbg !111
  %1998 = fmul float %1975, %1940, !dbg !111
  %1999 = fmul float %1975, %1941, !dbg !111
  %2000 = fmul float %1975, %1942, !dbg !111
  %2001 = fmul float %1975, %1943, !dbg !111
  %2002 = fmul float %1975, %1944, !dbg !111
  %2003 = fmul float %1975, %1945, !dbg !111
  %2004 = fmul float %1975, %1946, !dbg !111
  %2005 = fmul float %1975, %1947, !dbg !111
  %2006 = fmul float %1975, %1948, !dbg !111
  %2007 = fmul float %1975, %1949, !dbg !111
  %2008 = tail call float @llvm.nvvm.round.f(float %1976) #5, !dbg !112
  %2009 = tail call float @llvm.nvvm.round.f(float %1977) #5, !dbg !112
  %2010 = tail call float @llvm.nvvm.round.f(float %1978) #5, !dbg !112
  %2011 = tail call float @llvm.nvvm.round.f(float %1979) #5, !dbg !112
  %2012 = tail call float @llvm.nvvm.round.f(float %1980) #5, !dbg !112
  %2013 = tail call float @llvm.nvvm.round.f(float %1981) #5, !dbg !112
  %2014 = tail call float @llvm.nvvm.round.f(float %1982) #5, !dbg !112
  %2015 = tail call float @llvm.nvvm.round.f(float %1983) #5, !dbg !112
  %2016 = tail call float @llvm.nvvm.round.f(float %1984) #5, !dbg !112
  %2017 = tail call float @llvm.nvvm.round.f(float %1985) #5, !dbg !112
  %2018 = tail call float @llvm.nvvm.round.f(float %1986) #5, !dbg !112
  %2019 = tail call float @llvm.nvvm.round.f(float %1987) #5, !dbg !112
  %2020 = tail call float @llvm.nvvm.round.f(float %1988) #5, !dbg !112
  %2021 = tail call float @llvm.nvvm.round.f(float %1989) #5, !dbg !112
  %2022 = tail call float @llvm.nvvm.round.f(float %1990) #5, !dbg !112
  %2023 = tail call float @llvm.nvvm.round.f(float %1991) #5, !dbg !112
  %2024 = tail call float @llvm.nvvm.round.f(float %1992) #5, !dbg !112
  %2025 = tail call float @llvm.nvvm.round.f(float %1993) #5, !dbg !112
  %2026 = tail call float @llvm.nvvm.round.f(float %1994) #5, !dbg !112
  %2027 = tail call float @llvm.nvvm.round.f(float %1995) #5, !dbg !112
  %2028 = tail call float @llvm.nvvm.round.f(float %1996) #5, !dbg !112
  %2029 = tail call float @llvm.nvvm.round.f(float %1997) #5, !dbg !112
  %2030 = tail call float @llvm.nvvm.round.f(float %1998) #5, !dbg !112
  %2031 = tail call float @llvm.nvvm.round.f(float %1999) #5, !dbg !112
  %2032 = tail call float @llvm.nvvm.round.f(float %2000) #5, !dbg !112
  %2033 = tail call float @llvm.nvvm.round.f(float %2001) #5, !dbg !112
  %2034 = tail call float @llvm.nvvm.round.f(float %2002) #5, !dbg !112
  %2035 = tail call float @llvm.nvvm.round.f(float %2003) #5, !dbg !112
  %2036 = tail call float @llvm.nvvm.round.f(float %2004) #5, !dbg !112
  %2037 = tail call float @llvm.nvvm.round.f(float %2005) #5, !dbg !112
  %2038 = tail call float @llvm.nvvm.round.f(float %2006) #5, !dbg !112
  %2039 = tail call float @llvm.nvvm.round.f(float %2007) #5, !dbg !112
  %2040 = insertelement <4 x float> poison, float %2008, i64 0, !dbg !113
  %2041 = insertelement <4 x float> %2040, float %2009, i64 1, !dbg !113
  %2042 = insertelement <4 x float> %2041, float %2010, i64 2, !dbg !113
  %2043 = insertelement <4 x float> %2042, float %2011, i64 3, !dbg !113
  %2044 = fcmp ogt <4 x float> %2043, splat (float -1.270000e+02), !dbg !113
  %2045 = fcmp uno <4 x float> %2043, zeroinitializer, !dbg !115
  %2046 = or <4 x i1> %2044, %2045, !dbg !116
  %2047 = select <4 x i1> %2046, <4 x float> %2043, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2048 = fcmp olt <4 x float> %2047, splat (float 1.270000e+02), !dbg !118
  %2049 = fcmp uno <4 x float> %2047, zeroinitializer, !dbg !120
  %2050 = or <4 x i1> %2048, %2049, !dbg !121
  %2051 = fptosi <4 x float> %2047 to <4 x i8>, !dbg !122
  %2052 = select <4 x i1> %2050, <4 x i8> %2051, <4 x i8> splat (i8 127), !dbg !123
  %2053 = insertelement <4 x float> poison, float %2012, i64 0, !dbg !113
  %2054 = insertelement <4 x float> %2053, float %2013, i64 1, !dbg !113
  %2055 = insertelement <4 x float> %2054, float %2014, i64 2, !dbg !113
  %2056 = insertelement <4 x float> %2055, float %2015, i64 3, !dbg !113
  %2057 = fcmp ogt <4 x float> %2056, splat (float -1.270000e+02), !dbg !113
  %2058 = fcmp uno <4 x float> %2056, zeroinitializer, !dbg !115
  %2059 = or <4 x i1> %2057, %2058, !dbg !116
  %2060 = select <4 x i1> %2059, <4 x float> %2056, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2061 = fcmp olt <4 x float> %2060, splat (float 1.270000e+02), !dbg !118
  %2062 = fcmp uno <4 x float> %2060, zeroinitializer, !dbg !120
  %2063 = or <4 x i1> %2061, %2062, !dbg !121
  %2064 = fptosi <4 x float> %2060 to <4 x i8>, !dbg !122
  %2065 = select <4 x i1> %2063, <4 x i8> %2064, <4 x i8> splat (i8 127), !dbg !123
  %2066 = insertelement <4 x float> poison, float %2016, i64 0, !dbg !113
  %2067 = insertelement <4 x float> %2066, float %2017, i64 1, !dbg !113
  %2068 = insertelement <4 x float> %2067, float %2018, i64 2, !dbg !113
  %2069 = insertelement <4 x float> %2068, float %2019, i64 3, !dbg !113
  %2070 = fcmp ogt <4 x float> %2069, splat (float -1.270000e+02), !dbg !113
  %2071 = fcmp uno <4 x float> %2069, zeroinitializer, !dbg !115
  %2072 = or <4 x i1> %2070, %2071, !dbg !116
  %2073 = select <4 x i1> %2072, <4 x float> %2069, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2074 = fcmp olt <4 x float> %2073, splat (float 1.270000e+02), !dbg !118
  %2075 = fcmp uno <4 x float> %2073, zeroinitializer, !dbg !120
  %2076 = or <4 x i1> %2074, %2075, !dbg !121
  %2077 = fptosi <4 x float> %2073 to <4 x i8>, !dbg !122
  %2078 = select <4 x i1> %2076, <4 x i8> %2077, <4 x i8> splat (i8 127), !dbg !123
  %2079 = insertelement <4 x float> poison, float %2020, i64 0, !dbg !113
  %2080 = insertelement <4 x float> %2079, float %2021, i64 1, !dbg !113
  %2081 = insertelement <4 x float> %2080, float %2022, i64 2, !dbg !113
  %2082 = insertelement <4 x float> %2081, float %2023, i64 3, !dbg !113
  %2083 = fcmp ogt <4 x float> %2082, splat (float -1.270000e+02), !dbg !113
  %2084 = fcmp uno <4 x float> %2082, zeroinitializer, !dbg !115
  %2085 = or <4 x i1> %2083, %2084, !dbg !116
  %2086 = select <4 x i1> %2085, <4 x float> %2082, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2087 = fcmp olt <4 x float> %2086, splat (float 1.270000e+02), !dbg !118
  %2088 = fcmp uno <4 x float> %2086, zeroinitializer, !dbg !120
  %2089 = or <4 x i1> %2087, %2088, !dbg !121
  %2090 = fptosi <4 x float> %2086 to <4 x i8>, !dbg !122
  %2091 = select <4 x i1> %2089, <4 x i8> %2090, <4 x i8> splat (i8 127), !dbg !123
  %2092 = insertelement <4 x float> poison, float %2024, i64 0, !dbg !113
  %2093 = insertelement <4 x float> %2092, float %2025, i64 1, !dbg !113
  %2094 = insertelement <4 x float> %2093, float %2026, i64 2, !dbg !113
  %2095 = insertelement <4 x float> %2094, float %2027, i64 3, !dbg !113
  %2096 = fcmp ogt <4 x float> %2095, splat (float -1.270000e+02), !dbg !113
  %2097 = fcmp uno <4 x float> %2095, zeroinitializer, !dbg !115
  %2098 = or <4 x i1> %2096, %2097, !dbg !116
  %2099 = select <4 x i1> %2098, <4 x float> %2095, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2100 = fcmp olt <4 x float> %2099, splat (float 1.270000e+02), !dbg !118
  %2101 = fcmp uno <4 x float> %2099, zeroinitializer, !dbg !120
  %2102 = or <4 x i1> %2100, %2101, !dbg !121
  %2103 = fptosi <4 x float> %2099 to <4 x i8>, !dbg !122
  %2104 = select <4 x i1> %2102, <4 x i8> %2103, <4 x i8> splat (i8 127), !dbg !123
  %2105 = insertelement <4 x float> poison, float %2028, i64 0, !dbg !113
  %2106 = insertelement <4 x float> %2105, float %2029, i64 1, !dbg !113
  %2107 = insertelement <4 x float> %2106, float %2030, i64 2, !dbg !113
  %2108 = insertelement <4 x float> %2107, float %2031, i64 3, !dbg !113
  %2109 = fcmp ogt <4 x float> %2108, splat (float -1.270000e+02), !dbg !113
  %2110 = fcmp uno <4 x float> %2108, zeroinitializer, !dbg !115
  %2111 = or <4 x i1> %2109, %2110, !dbg !116
  %2112 = select <4 x i1> %2111, <4 x float> %2108, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2113 = fcmp olt <4 x float> %2112, splat (float 1.270000e+02), !dbg !118
  %2114 = fcmp uno <4 x float> %2112, zeroinitializer, !dbg !120
  %2115 = or <4 x i1> %2113, %2114, !dbg !121
  %2116 = fptosi <4 x float> %2112 to <4 x i8>, !dbg !122
  %2117 = select <4 x i1> %2115, <4 x i8> %2116, <4 x i8> splat (i8 127), !dbg !123
  %2118 = insertelement <4 x float> poison, float %2032, i64 0, !dbg !113
  %2119 = insertelement <4 x float> %2118, float %2033, i64 1, !dbg !113
  %2120 = insertelement <4 x float> %2119, float %2034, i64 2, !dbg !113
  %2121 = insertelement <4 x float> %2120, float %2035, i64 3, !dbg !113
  %2122 = fcmp ogt <4 x float> %2121, splat (float -1.270000e+02), !dbg !113
  %2123 = fcmp uno <4 x float> %2121, zeroinitializer, !dbg !115
  %2124 = or <4 x i1> %2122, %2123, !dbg !116
  %2125 = select <4 x i1> %2124, <4 x float> %2121, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2126 = fcmp olt <4 x float> %2125, splat (float 1.270000e+02), !dbg !118
  %2127 = fcmp uno <4 x float> %2125, zeroinitializer, !dbg !120
  %2128 = or <4 x i1> %2126, %2127, !dbg !121
  %2129 = fptosi <4 x float> %2125 to <4 x i8>, !dbg !122
  %2130 = select <4 x i1> %2128, <4 x i8> %2129, <4 x i8> splat (i8 127), !dbg !123
  %2131 = insertelement <4 x float> poison, float %2036, i64 0, !dbg !113
  %2132 = insertelement <4 x float> %2131, float %2037, i64 1, !dbg !113
  %2133 = insertelement <4 x float> %2132, float %2038, i64 2, !dbg !113
  %2134 = insertelement <4 x float> %2133, float %2039, i64 3, !dbg !113
  %2135 = fcmp ogt <4 x float> %2134, splat (float -1.270000e+02), !dbg !113
  %2136 = fcmp uno <4 x float> %2134, zeroinitializer, !dbg !115
  %2137 = or <4 x i1> %2135, %2136, !dbg !116
  %2138 = select <4 x i1> %2137, <4 x float> %2134, <4 x float> splat (float -1.270000e+02), !dbg !117
  %2139 = fcmp olt <4 x float> %2138, splat (float 1.270000e+02), !dbg !118
  %2140 = fcmp uno <4 x float> %2138, zeroinitializer, !dbg !120
  %2141 = or <4 x i1> %2139, %2140, !dbg !121
  %2142 = fptosi <4 x float> %2138 to <4 x i8>, !dbg !122
  %2143 = select <4 x i1> %2141, <4 x i8> %2142, <4 x i8> splat (i8 127), !dbg !123
  %2144 = getelementptr i8, ptr addrspace(1) %10, i64 %39, !dbg !124
  %2145 = getelementptr i8, ptr addrspace(1) %10, i64 %43, !dbg !124
  %2146 = bitcast <4 x i8> %2052 to i32, !dbg !125
  %2147 = bitcast <4 x i8> %2065 to i32, !dbg !125
  %2148 = bitcast <4 x i8> %2078 to i32, !dbg !125
  %2149 = bitcast <4 x i8> %2091 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2146, i32 %2147, i32 %2148, i32 %2149, ptr addrspace(1) %2144, i1 %47) #5, !dbg !125
  %2150 = bitcast <4 x i8> %2104 to i32, !dbg !125
  %2151 = bitcast <4 x i8> %2117 to i32, !dbg !125
  %2152 = bitcast <4 x i8> %2130 to i32, !dbg !125
  %2153 = bitcast <4 x i8> %2143 to i32, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2150, i32 %2151, i32 %2152, i32 %2153, ptr addrspace(1) %2145, i1 %47) #5, !dbg !125
  %2154 = getelementptr i8, ptr addrspace(1) %11, i64 %39, !dbg !126
  %2155 = getelementptr i8, ptr addrspace(1) %11, i64 %43, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2146, i32 %2147, i32 %2148, i32 %2149, ptr addrspace(1) %2154, i1 %47) #5, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2150, i32 %2151, i32 %2152, i32 %2153, ptr addrspace(1) %2155, i1 %47) #5, !dbg !127
  %2156 = getelementptr i8, ptr addrspace(1) %12, i64 %39, !dbg !128
  %2157 = getelementptr i8, ptr addrspace(1) %12, i64 %43, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2146, i32 %2147, i32 %2148, i32 %2149, ptr addrspace(1) %2156, i1 %47) #5, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2150, i32 %2151, i32 %2152, i32 %2153, ptr addrspace(1) %2157, i1 %47) #5, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 59, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!40 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 63, column: 95, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 74, column: 24, scope: !6)
!61 = !DILocation(line: 76, column: 24, scope: !6)
!62 = !DILocation(line: 77, column: 24, scope: !6)
!63 = !DILocation(line: 79, column: 24, scope: !6)
!64 = !DILocation(line: 80, column: 24, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 83, column: 50, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 101, column: 53, scope: !6)
!93 = !DILocation(line: 101, column: 115, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !95)
!95 = !DILocation(line: 103, column: 46, scope: !6)
!96 = !DILocation(line: 104, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !98)
!98 = !DILocation(line: 105, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !100)
!100 = !DILocation(line: 106, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !100)
!104 = !DILocation(line: 108, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !106)
!106 = !DILocation(line: 111, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !106)
!110 = !DILocation(line: 114, column: 25, scope: !6)
!111 = !DILocation(line: 117, column: 24, scope: !6)
!112 = !DILocation(line: 118, column: 36, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !114)
!114 = !DILocation(line: 121, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !114)
!116 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !114)
!117 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !114)
!118 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !119)
!119 = !DILocation(line: 123, column: 46, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !119)
!122 = !DILocation(line: 125, column: 25, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !119)
!124 = !DILocation(line: 126, column: 29, scope: !6)
!125 = !DILocation(line: 126, column: 53, scope: !6)
!126 = !DILocation(line: 127, column: 30, scope: !6)
!127 = !DILocation(line: 127, column: 54, scope: !6)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 95, column: 4, scope: !6)
