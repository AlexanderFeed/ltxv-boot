; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 512, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = and i32 %19, 1023, !dbg !11
  %22 = sext i32 %17 to i64, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %4, i64 %22, !dbg !12
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %18) #5, !dbg !13
  %25 = bitcast i16 %24 to bfloat, !dbg !13
  %26 = getelementptr bfloat, ptr addrspace(1) %5, i64 %22, !dbg !14
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %18) #5, !dbg !15
  %28 = bitcast i16 %27 to bfloat, !dbg !15
  %29 = mul i32 %17, 3072, !dbg !16
  %.inv = fcmp oge bfloat %25, 0xR0000, !dbg !17
  %30 = select i1 %.inv, bfloat 0xR0000, bfloat %25, !dbg !17
  %31 = fpext bfloat %30 to float, !dbg !17
  %32 = fsub float 0.000000e+00, %31, !dbg !21
  %.inv3 = fcmp ole bfloat %28, 0xR0000, !dbg !22
  %33 = select i1 %.inv3, bfloat 0xR0000, bfloat %28, !dbg !22
  %34 = fpext bfloat %33 to float, !dbg !22
  %35 = fcmp ogt float %32, %34, !dbg !24
  %36 = fcmp uno float %32, 0.000000e+00, !dbg !26
  %37 = or i1 %35, %36, !dbg !27
  %38 = select i1 %37, float %32, float %34, !dbg !28
  %39 = fmul float %38, 0x3F80204080000000, !dbg !29
  %40 = fcmp ogt float %39, 0x3EE4F8B580000000, !dbg !30
  %41 = fcmp uno float %39, 0.000000e+00, !dbg !32
  %42 = or i1 %40, %41, !dbg !33
  %43 = select i1 %42, float %39, float 0x3EE4F8B580000000, !dbg !34
  %44 = zext nneg i32 %21 to i64, !dbg !35
  %45 = or disjoint i32 %21, %29, !dbg !36
  %46 = sext i32 %45 to i64, !dbg !37
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !37
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 %18) #5, !dbg !38
  %49 = or disjoint i64 %44, 6144, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !40
  %51 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %50, i1 true) #5, !dbg !41
  %52 = getelementptr bfloat, ptr addrspace(1) %2, i64 %49, !dbg !42
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 true) #5, !dbg !43
  %54 = getelementptr i32, ptr addrspace(1) %3, i64 %46, !dbg !44
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %18) #5, !dbg !45
  %56 = getelementptr bfloat, ptr addrspace(1) %6, i64 %44, !dbg !46
  %57 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %56, i1 true) #5, !dbg !47
  %58 = getelementptr bfloat, ptr addrspace(1) %7, i64 %44, !dbg !48
  %59 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %58, i1 true) #5, !dbg !49
  %60 = sitofp i32 %55 to float, !dbg !50
  %61 = fmul float %43, %60, !dbg !51
  %62 = bitcast i16 %57 to bfloat, !dbg !47
  %63 = fpext bfloat %62 to float, !dbg !52
  %64 = fmul float %61, %63, !dbg !53
  %65 = insertelement <2 x i16> poison, i16 %53, i64 0, !dbg !43
  %66 = insertelement <2 x i16> %65, i16 %59, i64 1, !dbg !43
  %67 = bitcast <2 x i16> %66 to <2 x bfloat>, !dbg !43
  %68 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !54
  %69 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !55
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !55
  %71 = insertelement <2 x float> %70, float %64, i64 1, !dbg !55
  %72 = fadd <2 x float> %71, %68, !dbg !55
  %shift = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %73 = fmul <2 x float> %72, %shift, !dbg !56
  %74 = extractelement <2 x float> %73, i64 0, !dbg !56
  %75 = bitcast i16 %48 to bfloat, !dbg !38
  %76 = fpext bfloat %75 to float, !dbg !57
  %77 = fadd float %74, %76, !dbg !58
  %78 = select i1 %18, float %77, float 0.000000e+00, !dbg !59
  %79 = getelementptr bfloat, ptr addrspace(1) %8, i64 %46, !dbg !60
  %80 = fptrunc float %77 to bfloat, !dbg !61
  %81 = bitcast bfloat %80 to i16, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %81, ptr addrspace(1) %79, i1 %18) #5, !dbg !61
  %82 = or disjoint i64 %44, 1024, !dbg !62
  %83 = trunc nuw nsw i64 %82 to i32, !dbg !36
  %84 = add i32 %29, %83, !dbg !36
  %85 = sext i32 %84 to i64, !dbg !37
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !37
  %87 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %86, i1 %18) #5, !dbg !38
  %88 = bitcast i16 %87 to bfloat, !dbg !38
  %89 = fpext bfloat %88 to float, !dbg !57
  %90 = or disjoint i64 %44, 7168, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !40
  %92 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %91, i1 true) #5, !dbg !41
  %93 = getelementptr bfloat, ptr addrspace(1) %2, i64 %90, !dbg !42
  %94 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %93, i1 true) #5, !dbg !43
  %95 = getelementptr i32, ptr addrspace(1) %3, i64 %85, !dbg !44
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %18) #5, !dbg !45
  %97 = getelementptr bfloat, ptr addrspace(1) %6, i64 %82, !dbg !46
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 true) #5, !dbg !47
  %99 = bitcast i16 %98 to bfloat, !dbg !47
  %100 = fpext bfloat %99 to float, !dbg !52
  %101 = getelementptr bfloat, ptr addrspace(1) %7, i64 %82, !dbg !48
  %102 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 true) #5, !dbg !49
  %103 = sitofp i32 %96 to float, !dbg !50
  %104 = fmul float %43, %103, !dbg !51
  %105 = fmul float %104, %100, !dbg !53
  %106 = insertelement <2 x i16> poison, i16 %94, i64 0, !dbg !43
  %107 = insertelement <2 x i16> %106, i16 %102, i64 1, !dbg !43
  %108 = bitcast <2 x i16> %107 to <2 x bfloat>, !dbg !43
  %109 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !54
  %110 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !55
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !55
  %112 = insertelement <2 x float> %111, float %105, i64 1, !dbg !55
  %113 = fadd <2 x float> %112, %109, !dbg !55
  %shift16 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %114 = fmul <2 x float> %113, %shift16, !dbg !56
  %115 = extractelement <2 x float> %114, i64 0, !dbg !56
  %116 = fadd float %115, %89, !dbg !58
  %117 = fsub float %116, %78, !dbg !63
  %118 = select i1 %18, float 2.000000e+00, float 1.000000e+00, !dbg !65
  %119 = tail call float @llvm.nvvm.div.full(float %117, float %118), !dbg !66
  %120 = fadd float %78, %119, !dbg !67
  %121 = fsub float %116, %120, !dbg !68
  %122 = fmul float %117, %121, !dbg !69
  %123 = fadd float %122, 0.000000e+00, !dbg !70
  %124 = select i1 %18, float %120, float 0.000000e+00, !dbg !59
  %125 = getelementptr bfloat, ptr addrspace(1) %8, i64 %85, !dbg !60
  %126 = fptrunc float %116 to bfloat, !dbg !61
  %127 = bitcast bfloat %126 to i16, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %127, ptr addrspace(1) %125, i1 %18) #5, !dbg !61
  %128 = or disjoint i64 %44, 2048, !dbg !62
  %129 = trunc nuw nsw i64 %128 to i32, !dbg !36
  %130 = add i32 %29, %129, !dbg !36
  %131 = sext i32 %130 to i64, !dbg !37
  %132 = getelementptr bfloat, ptr addrspace(1) %0, i64 %131, !dbg !37
  %133 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %132, i1 %18) #5, !dbg !38
  %134 = bitcast i16 %133 to bfloat, !dbg !38
  %135 = fpext bfloat %134 to float, !dbg !57
  %136 = or disjoint i64 %44, 8192, !dbg !39
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !40
  %138 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %137, i1 true) #5, !dbg !41
  %139 = getelementptr bfloat, ptr addrspace(1) %2, i64 %136, !dbg !42
  %140 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %139, i1 true) #5, !dbg !43
  %141 = getelementptr i32, ptr addrspace(1) %3, i64 %131, !dbg !44
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %18) #5, !dbg !45
  %143 = getelementptr bfloat, ptr addrspace(1) %6, i64 %128, !dbg !46
  %144 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %143, i1 true) #5, !dbg !47
  %145 = bitcast i16 %144 to bfloat, !dbg !47
  %146 = fpext bfloat %145 to float, !dbg !52
  %147 = getelementptr bfloat, ptr addrspace(1) %7, i64 %128, !dbg !48
  %148 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %147, i1 true) #5, !dbg !49
  %149 = sitofp i32 %142 to float, !dbg !50
  %150 = fmul float %43, %149, !dbg !51
  %151 = fmul float %150, %146, !dbg !53
  %152 = insertelement <2 x i16> poison, i16 %140, i64 0, !dbg !43
  %153 = insertelement <2 x i16> %152, i16 %148, i64 1, !dbg !43
  %154 = bitcast <2 x i16> %153 to <2 x bfloat>, !dbg !43
  %155 = fpext <2 x bfloat> %154 to <2 x float>, !dbg !54
  %156 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !55
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !55
  %158 = insertelement <2 x float> %157, float %151, i64 1, !dbg !55
  %159 = fadd <2 x float> %158, %155, !dbg !55
  %shift17 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %160 = fmul <2 x float> %159, %shift17, !dbg !56
  %161 = extractelement <2 x float> %160, i64 0, !dbg !56
  %162 = fadd float %161, %135, !dbg !58
  %163 = fsub float %162, %124, !dbg !63
  %164 = select i1 %18, float 3.000000e+00, float 1.000000e+00, !dbg !65
  %165 = tail call float @llvm.nvvm.div.full(float %163, float %164), !dbg !66
  %166 = fadd float %124, %165, !dbg !67
  %167 = fsub float %162, %166, !dbg !68
  %168 = fmul float %163, %167, !dbg !69
  %169 = fadd float %123, %168, !dbg !70
  %170 = select i1 %18, float %166, float 0.000000e+00, !dbg !59
  %171 = select i1 %18, float %169, float 0.000000e+00, !dbg !71
  %172 = select i1 %18, float 3.000000e+00, float 0.000000e+00, !dbg !65
  %173 = getelementptr bfloat, ptr addrspace(1) %8, i64 %131, !dbg !60
  %174 = fptrunc float %162 to bfloat, !dbg !61
  %175 = bitcast bfloat %174 to i16, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %175, ptr addrspace(1) %173, i1 %18) #5, !dbg !61
  %176 = lshr i32 %19, 5, !dbg !11
  %177 = bitcast float %170 to i32, !dbg !72
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !72
  %179 = bitcast i32 %178 to float, !dbg !72
  %180 = bitcast float %171 to i32, !dbg !72
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !72
  %182 = bitcast i32 %181 to float, !dbg !72
  %183 = bitcast float %172 to i32, !dbg !72
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !72
  %185 = bitcast i32 %184 to float, !dbg !72
  %186 = fsub float %179, %170, !dbg !74
  %187 = fadd float %172, %185, !dbg !76
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !77
  %189 = tail call float @llvm.nvvm.div.full(float %185, float %187), !dbg !78
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !79
  %191 = fmul float %186, %190, !dbg !80
  %192 = fadd float %170, %191, !dbg !81
  %193 = fadd float %171, %182, !dbg !82
  %194 = fmul float %186, %186, !dbg !83
  %195 = fmul float %172, %194, !dbg !84
  %196 = fmul float %195, %190, !dbg !85
  %197 = fadd float %193, %196, !dbg !86
  %198 = bitcast float %192 to i32, !dbg !72
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !72
  %200 = bitcast i32 %199 to float, !dbg !72
  %201 = bitcast float %197 to i32, !dbg !72
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !72
  %203 = bitcast i32 %202 to float, !dbg !72
  %204 = bitcast float %187 to i32, !dbg !72
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !72
  %206 = bitcast i32 %205 to float, !dbg !72
  %207 = fsub float %200, %192, !dbg !74
  %208 = fadd float %187, %206, !dbg !76
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !77
  %210 = tail call float @llvm.nvvm.div.full(float %206, float %208), !dbg !78
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !79
  %212 = fmul float %207, %211, !dbg !80
  %213 = fadd float %192, %212, !dbg !81
  %214 = fadd float %197, %203, !dbg !82
  %215 = fmul float %207, %207, !dbg !83
  %216 = fmul float %187, %215, !dbg !84
  %217 = fmul float %211, %216, !dbg !85
  %218 = fadd float %214, %217, !dbg !86
  %219 = bitcast float %213 to i32, !dbg !72
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !72
  %221 = bitcast i32 %220 to float, !dbg !72
  %222 = bitcast float %218 to i32, !dbg !72
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !72
  %224 = bitcast i32 %223 to float, !dbg !72
  %225 = bitcast float %208 to i32, !dbg !72
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !72
  %227 = bitcast i32 %226 to float, !dbg !72
  %228 = fsub float %221, %213, !dbg !74
  %229 = fadd float %208, %227, !dbg !76
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !77
  %231 = tail call float @llvm.nvvm.div.full(float %227, float %229), !dbg !78
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !79
  %233 = fmul float %228, %232, !dbg !80
  %234 = fadd float %213, %233, !dbg !81
  %235 = fadd float %218, %224, !dbg !82
  %236 = fmul float %228, %228, !dbg !83
  %237 = fmul float %208, %236, !dbg !84
  %238 = fmul float %232, %237, !dbg !85
  %239 = fadd float %235, %238, !dbg !86
  %240 = bitcast float %234 to i32, !dbg !72
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !72
  %242 = bitcast i32 %241 to float, !dbg !72
  %243 = bitcast float %239 to i32, !dbg !72
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !72
  %245 = bitcast i32 %244 to float, !dbg !72
  %246 = bitcast float %229 to i32, !dbg !72
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !72
  %248 = bitcast i32 %247 to float, !dbg !72
  %249 = fsub float %242, %234, !dbg !74
  %250 = fadd float %229, %248, !dbg !76
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !77
  %252 = tail call float @llvm.nvvm.div.full(float %248, float %250), !dbg !78
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !79
  %254 = fmul float %249, %253, !dbg !80
  %255 = fadd float %234, %254, !dbg !81
  %256 = fadd float %239, %245, !dbg !82
  %257 = fmul float %249, %249, !dbg !83
  %258 = fmul float %229, %257, !dbg !84
  %259 = fmul float %253, %258, !dbg !85
  %260 = fadd float %256, %259, !dbg !86
  %261 = bitcast float %255 to i32, !dbg !72
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !72
  %263 = bitcast i32 %262 to float, !dbg !72
  %264 = bitcast float %260 to i32, !dbg !72
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !72
  %266 = bitcast i32 %265 to float, !dbg !72
  %267 = bitcast float %250 to i32, !dbg !72
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !72
  %269 = bitcast i32 %268 to float, !dbg !72
  %270 = fsub float %263, %255, !dbg !74
  %271 = fadd float %250, %269, !dbg !76
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !77
  %273 = tail call float @llvm.nvvm.div.full(float %269, float %271), !dbg !78
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !79
  %275 = fmul float %270, %274, !dbg !80
  %276 = fadd float %255, %275, !dbg !81
  %277 = fadd float %260, %266, !dbg !82
  %278 = fmul float %270, %270, !dbg !83
  %279 = fmul float %250, %278, !dbg !84
  %280 = fmul float %274, %279, !dbg !85
  %281 = fadd float %277, %280, !dbg !86
  %282 = and i32 %176, 31, !dbg !72
  %283 = icmp eq i32 %20, 0, !dbg !72
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !72
  %285 = bitcast float %276 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 %283) #5, !dbg !72
  %286 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %282, !dbg !72
  %287 = bitcast float %281 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 %283) #5, !dbg !72
  %288 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %282, !dbg !72
  %289 = bitcast float %271 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 %283) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %290 = icmp slt i32 %19, 32, !dbg !72
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !72
  %292 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %291, i1 %290) #5, !dbg !72
  %293 = bitcast i32 %292 to float, !dbg !72
  %294 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !72
  %295 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %290) #5, !dbg !72
  %296 = bitcast i32 %295 to float, !dbg !72
  %297 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !72
  %298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %290) #5, !dbg !72
  %299 = bitcast i32 %298 to float, !dbg !72
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 16, i32 31), !dbg !72
  %301 = bitcast i32 %300 to float, !dbg !72
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !72
  %303 = bitcast i32 %302 to float, !dbg !72
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 16, i32 31), !dbg !72
  %305 = bitcast i32 %304 to float, !dbg !72
  %306 = fsub float %301, %293, !dbg !74
  %307 = fadd float %299, %305, !dbg !76
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !77
  %309 = tail call float @llvm.nvvm.div.full(float %305, float %307), !dbg !78
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !79
  %311 = fmul float %306, %310, !dbg !80
  %312 = fadd float %311, %293, !dbg !81
  %313 = fadd float %296, %303, !dbg !82
  %314 = fmul float %306, %306, !dbg !83
  %315 = fmul float %314, %299, !dbg !84
  %316 = fmul float %315, %310, !dbg !85
  %317 = fadd float %313, %316, !dbg !86
  %318 = bitcast float %312 to i32, !dbg !72
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 8, i32 31), !dbg !72
  %320 = bitcast i32 %319 to float, !dbg !72
  %321 = bitcast float %317 to i32, !dbg !72
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 8, i32 31), !dbg !72
  %323 = bitcast i32 %322 to float, !dbg !72
  %324 = bitcast float %307 to i32, !dbg !72
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 8, i32 31), !dbg !72
  %326 = bitcast i32 %325 to float, !dbg !72
  %327 = fsub float %320, %312, !dbg !74
  %328 = fadd float %307, %326, !dbg !76
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !77
  %330 = tail call float @llvm.nvvm.div.full(float %326, float %328), !dbg !78
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !79
  %332 = fmul float %327, %331, !dbg !80
  %333 = fadd float %312, %332, !dbg !81
  %334 = fadd float %317, %323, !dbg !82
  %335 = fmul float %327, %327, !dbg !83
  %336 = fmul float %307, %335, !dbg !84
  %337 = fmul float %331, %336, !dbg !85
  %338 = fadd float %334, %337, !dbg !86
  %339 = bitcast float %333 to i32, !dbg !72
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !72
  %341 = bitcast i32 %340 to float, !dbg !72
  %342 = bitcast float %338 to i32, !dbg !72
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 4, i32 31), !dbg !72
  %344 = bitcast i32 %343 to float, !dbg !72
  %345 = bitcast float %328 to i32, !dbg !72
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !72
  %347 = bitcast i32 %346 to float, !dbg !72
  %348 = fsub float %341, %333, !dbg !74
  %349 = fadd float %328, %347, !dbg !76
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !77
  %351 = tail call float @llvm.nvvm.div.full(float %347, float %349), !dbg !78
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !79
  %353 = fmul float %348, %352, !dbg !80
  %354 = fadd float %333, %353, !dbg !81
  %355 = fadd float %338, %344, !dbg !82
  %356 = fmul float %348, %348, !dbg !83
  %357 = fmul float %328, %356, !dbg !84
  %358 = fmul float %352, %357, !dbg !85
  %359 = fadd float %355, %358, !dbg !86
  %360 = bitcast float %354 to i32, !dbg !72
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !72
  %362 = bitcast i32 %361 to float, !dbg !72
  %363 = bitcast float %359 to i32, !dbg !72
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 2, i32 31), !dbg !72
  %365 = bitcast i32 %364 to float, !dbg !72
  %366 = bitcast float %349 to i32, !dbg !72
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 2, i32 31), !dbg !72
  %368 = bitcast i32 %367 to float, !dbg !72
  %369 = fsub float %362, %354, !dbg !74
  %370 = fadd float %349, %368, !dbg !76
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !77
  %372 = tail call float @llvm.nvvm.div.full(float %368, float %370), !dbg !78
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !79
  %374 = fmul float %369, %373, !dbg !80
  %375 = fadd float %354, %374, !dbg !81
  %376 = fadd float %359, %365, !dbg !82
  %377 = fmul float %369, %369, !dbg !83
  %378 = fmul float %349, %377, !dbg !84
  %379 = fmul float %373, %378, !dbg !85
  %380 = fadd float %376, %379, !dbg !86
  %381 = bitcast float %375 to i32, !dbg !72
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !72
  %383 = bitcast i32 %382 to float, !dbg !72
  %384 = bitcast float %380 to i32, !dbg !72
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 1, i32 31), !dbg !72
  %386 = bitcast i32 %385 to float, !dbg !72
  %387 = bitcast float %370 to i32, !dbg !72
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !72
  %389 = bitcast i32 %388 to float, !dbg !72
  %390 = fsub float %383, %375, !dbg !74
  %391 = fadd float %370, %389, !dbg !76
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !77
  %393 = tail call float @llvm.nvvm.div.full(float %389, float %391), !dbg !78
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !79
  %395 = fmul float %390, %394, !dbg !80
  %396 = fadd float %375, %395, !dbg !81
  %397 = fadd float %380, %386, !dbg !82
  %398 = fmul float %390, %390, !dbg !83
  %399 = fmul float %370, %398, !dbg !84
  %400 = fmul float %394, %399, !dbg !85
  %401 = fadd float %397, %400, !dbg !86
  %402 = and i1 %290, %283, !dbg !72
  %403 = bitcast float %396 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %403, i1 %402) #5, !dbg !72
  %404 = bitcast float %401 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %404, i1 %402) #5, !dbg !72
  %405 = bitcast float %391 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %405, i1 %402) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %406 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !72
  %407 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !72
  %408 = tail call float @llvm.nvvm.div.full(float %407, float 3.072000e+03), !dbg !87
  %409 = fadd float %408, 0x3EB0C6F7A0000000, !dbg !88
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !89
  %.not.i = icmp eq i32 %410, 0, !dbg !89
  br i1 %.not.i, label %413, label %411, !dbg !89

411:                                              ; preds = %16
  %412 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %409), !dbg !89
  br label %__nv_rsqrtf.exit, !dbg !89

413:                                              ; preds = %16
  %414 = tail call float @llvm.nvvm.rsqrt.approx.f(float %409), !dbg !89
  br label %__nv_rsqrtf.exit, !dbg !89

__nv_rsqrtf.exit:                                 ; preds = %411, %413
  %.0.i = phi float [ %412, %411 ], [ %414, %413 ], !dbg !89
  %415 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %79, i1 %18) #5, !dbg !90
  %416 = bitcast i16 %415 to bfloat, !dbg !90
  %417 = fpext bfloat %416 to float, !dbg !91
  %418 = or disjoint i64 %44, 12288, !dbg !92
  %419 = getelementptr float, ptr addrspace(1) %1, i64 %418, !dbg !93
  %420 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %419, i1 true) #5, !dbg !94
  %421 = bitcast i32 %420 to float, !dbg !94
  %422 = getelementptr bfloat, ptr addrspace(1) %2, i64 %418, !dbg !95
  %423 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %422, i1 true) #5, !dbg !96
  %424 = bitcast i16 %423 to bfloat, !dbg !96
  %425 = fpext bfloat %424 to float, !dbg !97
  %426 = or disjoint i64 %44, 9216, !dbg !98
  %427 = getelementptr float, ptr addrspace(1) %1, i64 %426, !dbg !99
  %428 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %427, i1 true) #5, !dbg !100
  %429 = bitcast i32 %428 to float, !dbg !100
  %430 = getelementptr bfloat, ptr addrspace(1) %2, i64 %426, !dbg !101
  %431 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %430, i1 true) #5, !dbg !102
  %432 = bitcast i16 %431 to bfloat, !dbg !102
  %433 = fpext bfloat %432 to float, !dbg !103
  %434 = fsub float %417, %406, !dbg !104
  %435 = fmul float %.0.i, %434, !dbg !105
  %436 = fadd float %421, %425, !dbg !106
  %437 = fadd float %436, 1.000000e+00, !dbg !107
  %438 = fmul float %435, %437, !dbg !108
  %439 = fadd float %429, %433, !dbg !109
  %440 = fadd float %438, %439, !dbg !110
  %441 = select i1 %18, float %440, float 0x7FF0000000000000, !dbg !111
  %442 = select i1 %18, float %440, float 0xFFF0000000000000, !dbg !112
  %443 = getelementptr bfloat, ptr addrspace(1) %9, i64 %46, !dbg !113
  %444 = fptrunc float %440 to bfloat, !dbg !114
  %445 = bitcast bfloat %444 to i16, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %445, ptr addrspace(1) %443, i1 %18) #5, !dbg !114
  %446 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %125, i1 %18) #5, !dbg !90
  %447 = bitcast i16 %446 to bfloat, !dbg !90
  %448 = fpext bfloat %447 to float, !dbg !91
  %449 = or disjoint i64 %44, 13312, !dbg !92
  %450 = getelementptr float, ptr addrspace(1) %1, i64 %449, !dbg !93
  %451 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %450, i1 true) #5, !dbg !94
  %452 = bitcast i32 %451 to float, !dbg !94
  %453 = getelementptr bfloat, ptr addrspace(1) %2, i64 %449, !dbg !95
  %454 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %453, i1 true) #5, !dbg !96
  %455 = bitcast i16 %454 to bfloat, !dbg !96
  %456 = fpext bfloat %455 to float, !dbg !97
  %457 = or disjoint i64 %44, 10240, !dbg !98
  %458 = getelementptr float, ptr addrspace(1) %1, i64 %457, !dbg !99
  %459 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %458, i1 true) #5, !dbg !100
  %460 = bitcast i32 %459 to float, !dbg !100
  %461 = getelementptr bfloat, ptr addrspace(1) %2, i64 %457, !dbg !101
  %462 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %461, i1 true) #5, !dbg !102
  %463 = bitcast i16 %462 to bfloat, !dbg !102
  %464 = fpext bfloat %463 to float, !dbg !103
  %465 = fsub float %448, %406, !dbg !104
  %466 = fmul float %.0.i, %465, !dbg !105
  %467 = fadd float %452, %456, !dbg !106
  %468 = fadd float %467, 1.000000e+00, !dbg !107
  %469 = fmul float %466, %468, !dbg !108
  %470 = fadd float %460, %464, !dbg !109
  %471 = fadd float %469, %470, !dbg !110
  %472 = fcmp olt float %441, %471, !dbg !115
  %473 = fcmp uno float %441, 0.000000e+00, !dbg !117
  %474 = or i1 %473, %472, !dbg !118
  %475 = select i1 %474, float %441, float %471, !dbg !119
  %476 = select i1 %18, float %475, float 0x7FF0000000000000, !dbg !111
  %477 = fcmp ogt float %442, %471, !dbg !120
  %478 = fcmp uno float %442, 0.000000e+00, !dbg !122
  %479 = or i1 %478, %477, !dbg !123
  %480 = select i1 %479, float %442, float %471, !dbg !124
  %481 = select i1 %18, float %480, float 0xFFF0000000000000, !dbg !112
  %482 = getelementptr bfloat, ptr addrspace(1) %9, i64 %85, !dbg !113
  %483 = fptrunc float %471 to bfloat, !dbg !114
  %484 = bitcast bfloat %483 to i16, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %484, ptr addrspace(1) %482, i1 %18) #5, !dbg !114
  %485 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %173, i1 %18) #5, !dbg !90
  %486 = bitcast i16 %485 to bfloat, !dbg !90
  %487 = fpext bfloat %486 to float, !dbg !91
  %488 = or disjoint i64 %44, 14336, !dbg !92
  %489 = getelementptr float, ptr addrspace(1) %1, i64 %488, !dbg !93
  %490 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %489, i1 true) #5, !dbg !94
  %491 = bitcast i32 %490 to float, !dbg !94
  %492 = getelementptr bfloat, ptr addrspace(1) %2, i64 %488, !dbg !95
  %493 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %492, i1 true) #5, !dbg !96
  %494 = bitcast i16 %493 to bfloat, !dbg !96
  %495 = fpext bfloat %494 to float, !dbg !97
  %496 = or disjoint i64 %44, 11264, !dbg !98
  %497 = getelementptr float, ptr addrspace(1) %1, i64 %496, !dbg !99
  %498 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %497, i1 true) #5, !dbg !100
  %499 = bitcast i32 %498 to float, !dbg !100
  %500 = getelementptr bfloat, ptr addrspace(1) %2, i64 %496, !dbg !101
  %501 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %500, i1 true) #5, !dbg !102
  %502 = bitcast i16 %501 to bfloat, !dbg !102
  %503 = fpext bfloat %502 to float, !dbg !103
  %504 = fsub float %487, %406, !dbg !104
  %505 = fmul float %.0.i, %504, !dbg !105
  %506 = fadd float %491, %495, !dbg !106
  %507 = fadd float %506, 1.000000e+00, !dbg !107
  %508 = fmul float %505, %507, !dbg !108
  %509 = fadd float %499, %503, !dbg !109
  %510 = fadd float %508, %509, !dbg !110
  %511 = fcmp olt float %476, %510, !dbg !115
  %512 = fcmp uno float %476, 0.000000e+00, !dbg !117
  %513 = or i1 %512, %511, !dbg !118
  %514 = select i1 %513, float %476, float %510, !dbg !119
  %515 = select i1 %18, float %514, float 0x7FF0000000000000, !dbg !111
  %516 = fcmp ogt float %481, %510, !dbg !120
  %517 = fcmp uno float %481, 0.000000e+00, !dbg !122
  %518 = or i1 %517, %516, !dbg !123
  %519 = select i1 %518, float %481, float %510, !dbg !124
  %520 = select i1 %18, float %519, float 0xFFF0000000000000, !dbg !112
  %521 = getelementptr bfloat, ptr addrspace(1) %9, i64 %131, !dbg !113
  %522 = fptrunc float %510 to bfloat, !dbg !114
  %523 = bitcast bfloat %522 to i16, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %523, ptr addrspace(1) %521, i1 %18) #5, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %524 = bitcast float %515 to i32, !dbg !125
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 16, i32 31), !dbg !125
  %526 = bitcast i32 %525 to float, !dbg !125
  %527 = fcmp olt float %515, %526, !dbg !127
  %528 = fcmp uno float %515, 0.000000e+00, !dbg !128
  %529 = or i1 %528, %527, !dbg !129
  %530 = select i1 %529, float %515, float %526, !dbg !130
  %531 = bitcast float %530 to i32, !dbg !125
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 8, i32 31), !dbg !125
  %533 = bitcast i32 %532 to float, !dbg !125
  %534 = fcmp olt float %530, %533, !dbg !127
  %535 = fcmp uno float %530, 0.000000e+00, !dbg !128
  %536 = or i1 %534, %535, !dbg !129
  %537 = select i1 %536, float %530, float %533, !dbg !130
  %538 = bitcast float %537 to i32, !dbg !125
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 4, i32 31), !dbg !125
  %540 = bitcast i32 %539 to float, !dbg !125
  %541 = fcmp olt float %537, %540, !dbg !127
  %542 = fcmp uno float %537, 0.000000e+00, !dbg !128
  %543 = or i1 %541, %542, !dbg !129
  %544 = select i1 %543, float %537, float %540, !dbg !130
  %545 = bitcast float %544 to i32, !dbg !125
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 2, i32 31), !dbg !125
  %547 = bitcast i32 %546 to float, !dbg !125
  %548 = fcmp olt float %544, %547, !dbg !127
  %549 = fcmp uno float %544, 0.000000e+00, !dbg !128
  %550 = or i1 %548, %549, !dbg !129
  %551 = select i1 %550, float %544, float %547, !dbg !130
  %552 = bitcast float %551 to i32, !dbg !125
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 1, i32 31), !dbg !125
  %554 = bitcast i32 %553 to float, !dbg !125
  %555 = fcmp olt float %551, %554, !dbg !127
  %556 = fcmp uno float %551, 0.000000e+00, !dbg !128
  %557 = or i1 %555, %556, !dbg !129
  %558 = select i1 %557, i32 %552, i32 %553, !dbg !130
  %559 = insertelement <1 x i32> poison, i32 %558, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %559, i1 %283) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %560 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %291, i1 %290) #5, !dbg !125
  %561 = bitcast i32 %560 to float, !dbg !125
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 16, i32 31), !dbg !125
  %563 = bitcast i32 %562 to float, !dbg !125
  %564 = fcmp olt float %561, %563, !dbg !127
  %565 = fcmp uno float %561, 0.000000e+00, !dbg !128
  %566 = or i1 %565, %564, !dbg !129
  %567 = select i1 %566, float %561, float %563, !dbg !130
  %568 = bitcast float %567 to i32, !dbg !125
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 8, i32 31), !dbg !125
  %570 = bitcast i32 %569 to float, !dbg !125
  %571 = fcmp olt float %567, %570, !dbg !127
  %572 = fcmp uno float %567, 0.000000e+00, !dbg !128
  %573 = or i1 %571, %572, !dbg !129
  %574 = select i1 %573, float %567, float %570, !dbg !130
  %575 = bitcast float %574 to i32, !dbg !125
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 4, i32 31), !dbg !125
  %577 = bitcast i32 %576 to float, !dbg !125
  %578 = fcmp olt float %574, %577, !dbg !127
  %579 = fcmp uno float %574, 0.000000e+00, !dbg !128
  %580 = or i1 %578, %579, !dbg !129
  %581 = select i1 %580, float %574, float %577, !dbg !130
  %582 = bitcast float %581 to i32, !dbg !125
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 2, i32 31), !dbg !125
  %584 = bitcast i32 %583 to float, !dbg !125
  %585 = fcmp olt float %581, %584, !dbg !127
  %586 = fcmp uno float %581, 0.000000e+00, !dbg !128
  %587 = or i1 %585, %586, !dbg !129
  %588 = select i1 %587, float %581, float %584, !dbg !130
  %589 = bitcast float %588 to i32, !dbg !125
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 1, i32 31), !dbg !125
  %591 = bitcast i32 %590 to float, !dbg !125
  %592 = fcmp olt float %588, %591, !dbg !127
  %593 = fcmp uno float %588, 0.000000e+00, !dbg !128
  %594 = or i1 %592, %593, !dbg !129
  %595 = select i1 %594, i32 %589, i32 %590, !dbg !130
  %596 = insertelement <1 x i32> poison, i32 %595, i64 0, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %596, i1 %402) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %597 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %598 = bitcast float %520 to i32, !dbg !131
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 16, i32 31), !dbg !131
  %600 = bitcast i32 %599 to float, !dbg !131
  %601 = fcmp ogt float %520, %600, !dbg !133
  %602 = fcmp uno float %520, 0.000000e+00, !dbg !134
  %603 = or i1 %602, %601, !dbg !135
  %604 = select i1 %603, float %520, float %600, !dbg !136
  %605 = bitcast float %604 to i32, !dbg !131
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 8, i32 31), !dbg !131
  %607 = bitcast i32 %606 to float, !dbg !131
  %608 = fcmp ogt float %604, %607, !dbg !133
  %609 = fcmp uno float %604, 0.000000e+00, !dbg !134
  %610 = or i1 %608, %609, !dbg !135
  %611 = select i1 %610, float %604, float %607, !dbg !136
  %612 = bitcast float %611 to i32, !dbg !131
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 4, i32 31), !dbg !131
  %614 = bitcast i32 %613 to float, !dbg !131
  %615 = fcmp ogt float %611, %614, !dbg !133
  %616 = fcmp uno float %611, 0.000000e+00, !dbg !134
  %617 = or i1 %615, %616, !dbg !135
  %618 = select i1 %617, float %611, float %614, !dbg !136
  %619 = bitcast float %618 to i32, !dbg !131
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 2, i32 31), !dbg !131
  %621 = bitcast i32 %620 to float, !dbg !131
  %622 = fcmp ogt float %618, %621, !dbg !133
  %623 = fcmp uno float %618, 0.000000e+00, !dbg !134
  %624 = or i1 %622, %623, !dbg !135
  %625 = select i1 %624, float %618, float %621, !dbg !136
  %626 = bitcast float %625 to i32, !dbg !131
  %627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 1, i32 31), !dbg !131
  %628 = bitcast i32 %627 to float, !dbg !131
  %629 = fcmp ogt float %625, %628, !dbg !133
  %630 = fcmp uno float %625, 0.000000e+00, !dbg !134
  %631 = or i1 %629, %630, !dbg !135
  %632 = select i1 %631, i32 %626, i32 %627, !dbg !136
  %633 = insertelement <1 x i32> poison, i32 %632, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %633, i1 %283) #5, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %634 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %291, i1 %290) #5, !dbg !131
  %635 = bitcast i32 %634 to float, !dbg !131
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %634, i32 16, i32 31), !dbg !131
  %637 = bitcast i32 %636 to float, !dbg !131
  %638 = fcmp ogt float %635, %637, !dbg !133
  %639 = fcmp uno float %635, 0.000000e+00, !dbg !134
  %640 = or i1 %639, %638, !dbg !135
  %641 = select i1 %640, float %635, float %637, !dbg !136
  %642 = bitcast float %641 to i32, !dbg !131
  %643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 8, i32 31), !dbg !131
  %644 = bitcast i32 %643 to float, !dbg !131
  %645 = fcmp ogt float %641, %644, !dbg !133
  %646 = fcmp uno float %641, 0.000000e+00, !dbg !134
  %647 = or i1 %645, %646, !dbg !135
  %648 = select i1 %647, float %641, float %644, !dbg !136
  %649 = bitcast float %648 to i32, !dbg !131
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 4, i32 31), !dbg !131
  %651 = bitcast i32 %650 to float, !dbg !131
  %652 = fcmp ogt float %648, %651, !dbg !133
  %653 = fcmp uno float %648, 0.000000e+00, !dbg !134
  %654 = or i1 %652, %653, !dbg !135
  %655 = select i1 %654, float %648, float %651, !dbg !136
  %656 = bitcast float %655 to i32, !dbg !131
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 2, i32 31), !dbg !131
  %658 = bitcast i32 %657 to float, !dbg !131
  %659 = fcmp ogt float %655, %658, !dbg !133
  %660 = fcmp uno float %655, 0.000000e+00, !dbg !134
  %661 = or i1 %659, %660, !dbg !135
  %662 = select i1 %661, float %655, float %658, !dbg !136
  %663 = bitcast float %662 to i32, !dbg !131
  %664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %663, i32 1, i32 31), !dbg !131
  %665 = bitcast i32 %664 to float, !dbg !131
  %666 = fcmp ogt float %662, %665, !dbg !133
  %667 = fcmp uno float %662, 0.000000e+00, !dbg !134
  %668 = or i1 %666, %667, !dbg !135
  %669 = select i1 %668, i32 %663, i32 %664, !dbg !136
  %670 = insertelement <1 x i32> poison, i32 %669, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %670, i1 %402) #5, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %671 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !131
  %672 = getelementptr bfloat, ptr addrspace(1) %10, i64 %22, !dbg !137
  %673 = fptrunc float %597 to bfloat, !dbg !138
  %674 = icmp eq i32 %21, 0, !dbg !138
  %675 = bitcast bfloat %673 to i16, !dbg !138
  %676 = and i1 %18, %674, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %675, ptr addrspace(1) %672, i1 %676) #5, !dbg !138
  %677 = getelementptr bfloat, ptr addrspace(1) %11, i64 %22, !dbg !139
  %678 = fptrunc float %671 to bfloat, !dbg !140
  %679 = bitcast bfloat %678 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %679, ptr addrspace(1) %677, i1 %676) #5, !dbg !140
  %.inv4 = fcmp oge float %597, 0.000000e+00, !dbg !141
  %680 = select i1 %.inv4, float 0.000000e+00, float %597, !dbg !141
  %681 = fsub float 0.000000e+00, %680, !dbg !143
  %.inv5 = fcmp ole float %671, 0.000000e+00, !dbg !144
  %682 = select i1 %.inv5, float 0.000000e+00, float %671, !dbg !144
  %683 = fcmp ogt float %681, %682, !dbg !146
  %684 = fcmp uno float %681, 0.000000e+00, !dbg !148
  %685 = or i1 %684, %683, !dbg !149
  %686 = select i1 %685, float %681, float %682, !dbg !150
  %687 = fmul float %686, 0x3F80204080000000, !dbg !151
  %688 = fcmp ogt float %687, 0x3EE4F8B580000000, !dbg !152
  %689 = fcmp uno float %687, 0.000000e+00, !dbg !154
  %690 = or i1 %688, %689, !dbg !155
  %691 = select i1 %690, float %687, float 0x3EE4F8B580000000, !dbg !156
  %692 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %691), !dbg !157
  %693 = or disjoint i32 %29, %21
  %694 = sext i32 %693 to i64, !dbg !158
  %695 = getelementptr bfloat, ptr addrspace(1) %9, i64 %694, !dbg !158
  %696 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %695, i1 %18) #5, !dbg !159
  %697 = bitcast i16 %696 to bfloat, !dbg !159
  %698 = fpext bfloat %697 to float, !dbg !160
  %699 = fmul float %692, %698, !dbg !161
  %700 = tail call float @llvm.nvvm.round.f(float %699) #5, !dbg !162
  %701 = fcmp ogt float %700, -1.270000e+02, !dbg !163
  %702 = fcmp uno float %700, 0.000000e+00, !dbg !165
  %703 = or i1 %701, %702, !dbg !166
  %704 = select i1 %703, float %700, float -1.270000e+02, !dbg !167
  %705 = fcmp olt float %704, 1.270000e+02, !dbg !168
  %706 = fcmp uno float %704, 0.000000e+00, !dbg !170
  %707 = or i1 %705, %706, !dbg !171
  %708 = fptosi float %704 to i8, !dbg !172
  %709 = select i1 %707, i8 %708, i8 127, !dbg !173
  %710 = getelementptr i8, ptr addrspace(1) %12, i64 %694, !dbg !174
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %709, ptr addrspace(1) %710, i1 %18) #5, !dbg !175
  %711 = add i32 %693, 1024, !dbg !176
  %712 = sext i32 %711 to i64, !dbg !158
  %713 = getelementptr bfloat, ptr addrspace(1) %9, i64 %712, !dbg !158
  %714 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %713, i1 %18) #5, !dbg !159
  %715 = bitcast i16 %714 to bfloat, !dbg !159
  %716 = fpext bfloat %715 to float, !dbg !160
  %717 = fmul float %692, %716, !dbg !161
  %718 = tail call float @llvm.nvvm.round.f(float %717) #5, !dbg !162
  %719 = fcmp ogt float %718, -1.270000e+02, !dbg !163
  %720 = fcmp uno float %718, 0.000000e+00, !dbg !165
  %721 = or i1 %719, %720, !dbg !166
  %722 = select i1 %721, float %718, float -1.270000e+02, !dbg !167
  %723 = fcmp olt float %722, 1.270000e+02, !dbg !168
  %724 = fcmp uno float %722, 0.000000e+00, !dbg !170
  %725 = or i1 %723, %724, !dbg !171
  %726 = fptosi float %722 to i8, !dbg !172
  %727 = select i1 %725, i8 %726, i8 127, !dbg !173
  %728 = getelementptr i8, ptr addrspace(1) %12, i64 %712, !dbg !174
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %727, ptr addrspace(1) %728, i1 %18) #5, !dbg !175
  %729 = add i32 %693, 2048, !dbg !176
  %730 = sext i32 %729 to i64, !dbg !158
  %731 = getelementptr bfloat, ptr addrspace(1) %9, i64 %730, !dbg !158
  %732 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %731, i1 %18) #5, !dbg !159
  %733 = bitcast i16 %732 to bfloat, !dbg !159
  %734 = fpext bfloat %733 to float, !dbg !160
  %735 = fmul float %692, %734, !dbg !161
  %736 = tail call float @llvm.nvvm.round.f(float %735) #5, !dbg !162
  %737 = fcmp ogt float %736, -1.270000e+02, !dbg !163
  %738 = fcmp uno float %736, 0.000000e+00, !dbg !165
  %739 = or i1 %737, %738, !dbg !166
  %740 = select i1 %739, float %736, float -1.270000e+02, !dbg !167
  %741 = fcmp olt float %740, 1.270000e+02, !dbg !168
  %742 = fcmp uno float %740, 0.000000e+00, !dbg !170
  %743 = or i1 %741, %742, !dbg !171
  %744 = fptosi float %740 to i8, !dbg !172
  %745 = select i1 %743, i8 %744, i8 127, !dbg !173
  %746 = getelementptr i8, ptr addrspace(1) %12, i64 %730, !dbg !174
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %745, ptr addrspace(1) %746, i1 %18) #5, !dbg !175
  ret void, !dbg !177
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 40, column: 41, scope: !6)
!37 = !DILocation(line: 40, column: 34, scope: !6)
!38 = !DILocation(line: 40, column: 51, scope: !6)
!39 = !DILocation(line: 41, column: 41, scope: !6)
!40 = !DILocation(line: 41, column: 34, scope: !6)
!41 = !DILocation(line: 41, column: 48, scope: !6)
!42 = !DILocation(line: 42, column: 34, scope: !6)
!43 = !DILocation(line: 42, column: 48, scope: !6)
!44 = !DILocation(line: 43, column: 34, scope: !6)
!45 = !DILocation(line: 43, column: 51, scope: !6)
!46 = !DILocation(line: 44, column: 35, scope: !6)
!47 = !DILocation(line: 44, column: 42, scope: !6)
!48 = !DILocation(line: 45, column: 35, scope: !6)
!49 = !DILocation(line: 45, column: 42, scope: !6)
!50 = !DILocation(line: 48, column: 23, scope: !6)
!51 = !DILocation(line: 60, column: 23, scope: !6)
!52 = !DILocation(line: 44, column: 95, scope: !6)
!53 = !DILocation(line: 61, column: 24, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 47, column: 22, scope: !6)
!56 = !DILocation(line: 63, column: 23, scope: !6)
!57 = !DILocation(line: 40, column: 113, scope: !6)
!58 = !DILocation(line: 64, column: 23, scope: !6)
!59 = !DILocation(line: 70, column: 64, scope: !6)
!60 = !DILocation(line: 73, column: 29, scope: !6)
!61 = !DILocation(line: 73, column: 53, scope: !6)
!62 = !DILocation(line: 35, column: 31, scope: !6)
!63 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !64)
!64 = !DILocation(line: 68, column: 55, scope: !6)
!65 = !DILocation(line: 72, column: 68, scope: !6)
!66 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !64)
!67 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !64)
!68 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !64)
!69 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !64)
!70 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !64)
!71 = !DILocation(line: 71, column: 60, scope: !6)
!72 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !73)
!73 = !DILocation(line: 74, column: 85, scope: !6)
!74 = !DILocation(line: 217, column: 21, scope: !75, inlinedAt: !73)
!75 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!76 = !DILocation(line: 218, column: 28, scope: !75, inlinedAt: !73)
!77 = !DILocation(line: 219, column: 39, scope: !75, inlinedAt: !73)
!78 = !DILocation(line: 219, column: 60, scope: !75, inlinedAt: !73)
!79 = !DILocation(line: 219, column: 49, scope: !75, inlinedAt: !73)
!80 = !DILocation(line: 221, column: 25, scope: !75, inlinedAt: !73)
!81 = !DILocation(line: 221, column: 17, scope: !75, inlinedAt: !73)
!82 = !DILocation(line: 222, column: 15, scope: !75, inlinedAt: !73)
!83 = !DILocation(line: 222, column: 30, scope: !75, inlinedAt: !73)
!84 = !DILocation(line: 222, column: 38, scope: !75, inlinedAt: !73)
!85 = !DILocation(line: 222, column: 49, scope: !75, inlinedAt: !73)
!86 = !DILocation(line: 222, column: 22, scope: !75, inlinedAt: !73)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 96, column: 24, scope: !6)
!89 = !DILocation(line: 97, column: 32, scope: !6)
!90 = !DILocation(line: 86, column: 53, scope: !6)
!91 = !DILocation(line: 86, column: 115, scope: !6)
!92 = !DILocation(line: 87, column: 43, scope: !6)
!93 = !DILocation(line: 87, column: 35, scope: !6)
!94 = !DILocation(line: 87, column: 50, scope: !6)
!95 = !DILocation(line: 88, column: 35, scope: !6)
!96 = !DILocation(line: 88, column: 50, scope: !6)
!97 = !DILocation(line: 88, column: 103, scope: !6)
!98 = !DILocation(line: 89, column: 42, scope: !6)
!99 = !DILocation(line: 89, column: 35, scope: !6)
!100 = !DILocation(line: 89, column: 49, scope: !6)
!101 = !DILocation(line: 90, column: 35, scope: !6)
!102 = !DILocation(line: 90, column: 49, scope: !6)
!103 = !DILocation(line: 90, column: 102, scope: !6)
!104 = !DILocation(line: 92, column: 24, scope: !6)
!105 = !DILocation(line: 98, column: 24, scope: !6)
!106 = !DILocation(line: 101, column: 24, scope: !6)
!107 = !DILocation(line: 103, column: 24, scope: !6)
!108 = !DILocation(line: 104, column: 24, scope: !6)
!109 = !DILocation(line: 106, column: 24, scope: !6)
!110 = !DILocation(line: 107, column: 24, scope: !6)
!111 = !DILocation(line: 110, column: 50, scope: !6)
!112 = !DILocation(line: 112, column: 50, scope: !6)
!113 = !DILocation(line: 113, column: 29, scope: !6)
!114 = !DILocation(line: 113, column: 53, scope: !6)
!115 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !116)
!116 = !DILocation(line: 109, column: 47, scope: !6)
!117 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !116)
!118 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !116)
!119 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !116)
!120 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !121)
!121 = !DILocation(line: 111, column: 47, scope: !6)
!122 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !121)
!123 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !121)
!124 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !121)
!125 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !126)
!126 = !DILocation(line: 114, column: 40, scope: !6)
!127 = !DILocation(line: 94, column: 15, scope: !75, inlinedAt: !126)
!128 = !DILocation(line: 96, column: 21, scope: !75, inlinedAt: !126)
!129 = !DILocation(line: 96, column: 16, scope: !75, inlinedAt: !126)
!130 = !DILocation(line: 97, column: 29, scope: !75, inlinedAt: !126)
!131 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !132)
!132 = !DILocation(line: 115, column: 40, scope: !6)
!133 = !DILocation(line: 102, column: 15, scope: !75, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 21, scope: !75, inlinedAt: !132)
!135 = !DILocation(line: 104, column: 16, scope: !75, inlinedAt: !132)
!136 = !DILocation(line: 105, column: 29, scope: !75, inlinedAt: !132)
!137 = !DILocation(line: 116, column: 25, scope: !6)
!138 = !DILocation(line: 116, column: 37, scope: !6)
!139 = !DILocation(line: 117, column: 25, scope: !6)
!140 = !DILocation(line: 117, column: 37, scope: !6)
!141 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !142)
!142 = !DILocation(line: 126, column: 46, scope: !6)
!143 = !DILocation(line: 127, column: 17, scope: !6)
!144 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !145)
!145 = !DILocation(line: 128, column: 46, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !147)
!147 = !DILocation(line: 129, column: 46, scope: !6)
!148 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !147)
!149 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !147)
!150 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !147)
!151 = !DILocation(line: 131, column: 24, scope: !6)
!152 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !153)
!153 = !DILocation(line: 134, column: 46, scope: !6)
!154 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !153)
!155 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !153)
!156 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !153)
!157 = !DILocation(line: 137, column: 25, scope: !6)
!158 = !DILocation(line: 124, column: 36, scope: !6)
!159 = !DILocation(line: 124, column: 53, scope: !6)
!160 = !DILocation(line: 124, column: 115, scope: !6)
!161 = !DILocation(line: 140, column: 24, scope: !6)
!162 = !DILocation(line: 141, column: 36, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !164)
!164 = !DILocation(line: 144, column: 46, scope: !6)
!165 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !164)
!167 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !164)
!168 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !169)
!169 = !DILocation(line: 146, column: 46, scope: !6)
!170 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !169)
!171 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !169)
!172 = !DILocation(line: 148, column: 25, scope: !6)
!173 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !169)
!174 = !DILocation(line: 149, column: 29, scope: !6)
!175 = !DILocation(line: 149, column: 53, scope: !6)
!176 = !DILocation(line: 124, column: 43, scope: !6)
!177 = !DILocation(line: 118, column: 4, scope: !6)
