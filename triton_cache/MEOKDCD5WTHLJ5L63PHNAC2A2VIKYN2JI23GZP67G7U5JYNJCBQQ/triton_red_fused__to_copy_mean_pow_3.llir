; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 3, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 5, !dbg !11
  %10 = and i32 %9, 7, !dbg !11
  %11 = and i32 %8, 7, !dbg !11
  %12 = or disjoint i32 %10, %7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !12
  %14 = shl i32 %8, 2, !dbg !13
  %15 = and i32 %14, 124, !dbg !13
  %16 = sdiv i32 %12, 24, !dbg !14
  %17 = mul i32 %16, 24, !dbg !15
  %.decomposed = sub i32 %12, %17, !dbg !15
  %18 = shl nsw i32 %.decomposed, 7, !dbg !16
  %19 = or disjoint i32 %18, %15, !dbg !17
  %20 = mul i32 %16, 9216, !dbg !18
  %21 = add i32 %19, %20, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !21
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !21
  %27 = extractvalue { i32, i32 } %24, 1, !dbg !21
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !21
  %29 = extractelement <2 x bfloat> %26, i64 0, !dbg !21
  %30 = extractelement <2 x bfloat> %26, i64 1, !dbg !21
  %31 = extractelement <2 x bfloat> %28, i64 0, !dbg !21
  %32 = extractelement <2 x bfloat> %28, i64 1, !dbg !21
  %33 = fpext bfloat %29 to float, !dbg !22
  %34 = fpext bfloat %30 to float, !dbg !22
  %35 = fpext bfloat %31 to float, !dbg !22
  %36 = fpext bfloat %32 to float, !dbg !22
  %37 = fmul float %33, %33, !dbg !23
  %38 = fmul float %34, %34, !dbg !23
  %39 = fmul float %35, %35, !dbg !23
  %40 = fmul float %36, %36, !dbg !23
  %41 = fadd float %37, %38, !dbg !24
  %42 = fadd float %39, %41, !dbg !24
  %43 = fadd float %40, %42, !dbg !24
  %44 = bitcast float %43 to i32, !dbg !29
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = fadd float %43, %46, !dbg !24
  %48 = bitcast float %47 to i32, !dbg !29
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = fadd float %47, %50, !dbg !24
  %52 = bitcast float %51 to i32, !dbg !29
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = fadd float %51, %54, !dbg !24
  %56 = bitcast float %55 to i32, !dbg !29
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = fadd float %55, %58, !dbg !24
  %60 = bitcast float %59 to i32, !dbg !29
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = fadd float %59, %62, !dbg !24
  %64 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %65 = bitcast float %63 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %67 = load i32, ptr addrspace(3) %66, align 4, !dbg !30
  %68 = sext i32 %13 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !31
  %70 = and i32 %8, 248, !dbg !32
  %71 = icmp eq i32 %70, 0, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %67, ptr addrspace(1) %69, i1 %71) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckavwgge4wo3d4gevf27syez73oho7yang6ck5clzpaesyo4cqfp.py", directory: "/tmp/torchinductor_root/ka")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_3, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_3", linkageName: "triton_red_fused__to_copy_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 45, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 55, scope: !6)
!19 = !DILocation(line: 38, column: 50, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 60, scope: !6)
!22 = !DILocation(line: 38, column: 114, scope: !6)
!23 = !DILocation(line: 40, column: 22, scope: !6)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 44, column: 25, scope: !6)
!29 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 44, column: 28, scope: !6)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 45, column: 36, scope: !6)
!33 = !DILocation(line: 45, column: 4, scope: !6)
