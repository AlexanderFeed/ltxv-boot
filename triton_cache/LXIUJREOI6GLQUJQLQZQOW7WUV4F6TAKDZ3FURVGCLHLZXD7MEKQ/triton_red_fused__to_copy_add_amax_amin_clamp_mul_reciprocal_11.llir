; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 8, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = and i32 %10, 31, !dbg !11
  %13 = or disjoint i32 %.lobit, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 2, !dbg !14
  %16 = and i32 %15, 1020, !dbg !14
  %17 = shl i32 %13, 7, !dbg !15
  %18 = and i32 %15, 124
  %invariant.op = or disjoint i32 %17, %18, !dbg !16
  %19 = zext nneg i32 %16 to i64, !dbg !16
  %20 = lshr i32 %16, 7, !dbg !17
  %21 = mul nuw nsw i32 %20, 526336, !dbg !18
  %.reass = add i32 %21, %invariant.op
  %22 = sext i32 %.reass to i64, !dbg !19
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 %14) #4, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !20
  %27 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !20
  %29 = extractelement <2 x bfloat> %26, i64 0, !dbg !20
  %30 = extractelement <2 x bfloat> %26, i64 1, !dbg !20
  %31 = extractelement <2 x bfloat> %28, i64 0, !dbg !20
  %32 = extractelement <2 x bfloat> %28, i64 1, !dbg !20
  %33 = fpext bfloat %29 to float, !dbg !21
  %34 = fpext bfloat %30 to float, !dbg !21
  %35 = fpext bfloat %31 to float, !dbg !21
  %36 = fpext bfloat %32 to float, !dbg !21
  %37 = select i1 %14, float %33, float 0x7FF0000000000000, !dbg !22
  %38 = select i1 %14, float %34, float 0x7FF0000000000000, !dbg !22
  %39 = select i1 %14, float %35, float 0x7FF0000000000000, !dbg !22
  %40 = select i1 %14, float %33, float 0xFFF0000000000000, !dbg !23
  %41 = select i1 %14, float %34, float 0xFFF0000000000000, !dbg !23
  %42 = select i1 %14, float %35, float 0xFFF0000000000000, !dbg !23
  %43 = or disjoint i64 %19, 1024, !dbg !24
  %44 = lshr i64 %43, 7, !dbg !17
  %45 = trunc nuw nsw i64 %44 to i32
  %46 = mul nuw nsw i32 %45, 526336
  %.reass.1 = add i32 %46, %invariant.op
  %47 = sext i32 %.reass.1 to i64, !dbg !19
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !19
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %14) #4, !dbg !20
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !20
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !20
  %52 = extractvalue { i32, i32 } %49, 1, !dbg !20
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !20
  %54 = extractelement <2 x bfloat> %51, i64 0, !dbg !20
  %55 = extractelement <2 x bfloat> %51, i64 1, !dbg !20
  %56 = extractelement <2 x bfloat> %53, i64 0, !dbg !20
  %57 = fpext bfloat %54 to float, !dbg !21
  %58 = fpext bfloat %55 to float, !dbg !21
  %59 = fpext bfloat %56 to float, !dbg !21
  %60 = fcmp olt float %37, %57, !dbg !25
  %61 = fcmp olt float %38, %58, !dbg !25
  %62 = fcmp olt float %39, %59, !dbg !25
  %63 = fcmp uno float %37, 0.000000e+00, !dbg !29
  %64 = fcmp uno float %38, 0.000000e+00, !dbg !29
  %65 = fcmp uno float %39, 0.000000e+00, !dbg !29
  %66 = or i1 %63, %60, !dbg !30
  %67 = or i1 %64, %61, !dbg !30
  %68 = or i1 %65, %62, !dbg !30
  %69 = select i1 %66, float %37, float %57, !dbg !31
  %70 = select i1 %67, float %38, float %58, !dbg !31
  %71 = select i1 %68, float %39, float %59, !dbg !31
  %72 = select i1 %14, float %70, float 0x7FF0000000000000, !dbg !22
  %73 = select i1 %14, float %71, float 0x7FF0000000000000, !dbg !22
  %74 = fcmp ogt float %40, %57, !dbg !32
  %75 = fcmp ogt float %41, %58, !dbg !32
  %76 = fcmp ogt float %42, %59, !dbg !32
  %77 = fcmp uno float %40, 0.000000e+00, !dbg !34
  %78 = fcmp uno float %41, 0.000000e+00, !dbg !34
  %79 = fcmp uno float %42, 0.000000e+00, !dbg !34
  %80 = or i1 %77, %74, !dbg !35
  %81 = or i1 %78, %75, !dbg !35
  %82 = or i1 %79, %76, !dbg !35
  %83 = select i1 %80, float %40, float %57, !dbg !36
  %84 = select i1 %81, float %41, float %58, !dbg !36
  %85 = select i1 %82, float %42, float %59, !dbg !36
  %86 = select i1 %14, float %84, float 0xFFF0000000000000, !dbg !23
  %87 = select i1 %14, float %85, float 0xFFF0000000000000, !dbg !23
  %88 = or disjoint i64 %19, 2048, !dbg !24
  %89 = lshr i64 %88, 7, !dbg !17
  %90 = trunc nuw nsw i64 %89 to i32
  %91 = mul nuw nsw i32 %90, 526336
  %.reass.2 = add i32 %91, %invariant.op
  %92 = sext i32 %.reass.2 to i64, !dbg !19
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !19
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %93, i1 %14) #4, !dbg !20
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !20
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !20
  %97 = extractvalue { i32, i32 } %94, 1, !dbg !20
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !20
  %99 = extractelement <2 x bfloat> %96, i64 1, !dbg !20
  %100 = extractelement <2 x bfloat> %98, i64 0, !dbg !20
  %101 = extractelement <2 x bfloat> %98, i64 1, !dbg !20
  %102 = fpext bfloat %99 to float, !dbg !21
  %103 = fpext bfloat %100 to float, !dbg !21
  %104 = fpext bfloat %101 to float, !dbg !21
  %105 = fcmp olt float %72, %102, !dbg !25
  %106 = fcmp olt float %73, %103, !dbg !25
  %107 = fcmp uno float %72, 0.000000e+00, !dbg !29
  %108 = fcmp uno float %73, 0.000000e+00, !dbg !29
  %109 = or i1 %107, %105, !dbg !30
  %110 = or i1 %108, %106, !dbg !30
  %111 = select i1 %109, float %72, float %102, !dbg !31
  %112 = select i1 %110, float %73, float %103, !dbg !31
  %113 = select i1 %14, float %111, float 0x7FF0000000000000, !dbg !22
  %114 = select i1 %14, float %112, float 0x7FF0000000000000, !dbg !22
  %115 = fcmp ogt float %86, %102, !dbg !32
  %116 = fcmp ogt float %87, %103, !dbg !32
  %117 = fcmp uno float %86, 0.000000e+00, !dbg !34
  %118 = fcmp uno float %87, 0.000000e+00, !dbg !34
  %119 = or i1 %117, %115, !dbg !35
  %120 = or i1 %118, %116, !dbg !35
  %121 = select i1 %119, float %86, float %102, !dbg !36
  %122 = select i1 %120, float %87, float %103, !dbg !36
  %123 = select i1 %14, float %121, float 0xFFF0000000000000, !dbg !23
  %124 = select i1 %14, float %122, float 0xFFF0000000000000, !dbg !23
  %125 = lshr i32 %10, 5, !dbg !11
  %126 = and i32 %10, 1, !dbg !11
  %127 = or disjoint i32 %9, %126, !dbg !12
  %128 = icmp slt i32 %127, 512, !dbg !13
  %129 = insertelement <2 x i1> poison, i1 %14, i64 0, !dbg !22
  %130 = shufflevector <2 x i1> %129, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !22
  %131 = insertelement <2 x float> poison, float %36, i64 0, !dbg !22
  %132 = insertelement <2 x float> %131, float %69, i64 1, !dbg !22
  %133 = select <2 x i1> %130, <2 x float> %132, <2 x float> splat (float 0x7FF0000000000000), !dbg !22
  %134 = shufflevector <2 x bfloat> %53, <2 x bfloat> %96, <2 x i32> <i32 1, i32 2>, !dbg !21
  %135 = fpext <2 x bfloat> %134 to <2 x float>, !dbg !21
  %136 = fcmp olt <2 x float> %133, %135, !dbg !25
  %137 = fcmp uno <2 x float> %133, zeroinitializer, !dbg !29
  %138 = or <2 x i1> %137, %136, !dbg !30
  %139 = select <2 x i1> %138, <2 x float> %133, <2 x float> %135, !dbg !31
  %140 = select <2 x i1> %130, <2 x float> %139, <2 x float> splat (float 0x7FF0000000000000), !dbg !22
  %141 = insertelement <2 x float> poison, float %104, i64 0, !dbg !25
  %142 = insertelement <2 x float> %141, float %113, i64 1, !dbg !25
  %143 = fcmp olt <2 x float> %140, %142, !dbg !25
  %144 = fcmp uno <2 x float> %140, zeroinitializer, !dbg !29
  %145 = or <2 x i1> %143, %144, !dbg !30
  %146 = select <2 x i1> %145, <2 x float> %140, <2 x float> %142, !dbg !31
  %147 = extractelement <2 x float> %146, i64 1, !dbg !37
  %148 = fcmp olt float %147, %114, !dbg !40
  %149 = fcmp uno float %147, 0.000000e+00, !dbg !37
  %150 = or i1 %148, %149, !dbg !41
  %151 = insertelement <2 x i1> %130, i1 %150, i64 1, !dbg !22
  %152 = insertelement <2 x float> <float 0x7FF0000000000000, float poison>, float %114, i64 1, !dbg !22
  %153 = select <2 x i1> %151, <2 x float> %146, <2 x float> %152, !dbg !22
  %154 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %153, <2 x i32> <i32 3, i32 1>, !dbg !40
  %155 = fcmp olt <2 x float> %154, %153, !dbg !40
  %156 = fcmp uno <2 x float> %154, %153, !dbg !40
  %shift = shufflevector <2 x i1> %156, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %157 = or <2 x i1> %155, %shift, !dbg !41
  %158 = extractelement <2 x i1> %157, i64 0, !dbg !41
  %159 = extractelement <2 x float> %153, i64 0, !dbg !42
  %160 = extractelement <2 x float> %153, i64 1, !dbg !42
  %161 = select i1 %158, float %160, float %159, !dbg !42
  %162 = bitcast float %161 to i32, !dbg !43
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = fcmp olt float %161, %164, !dbg !40
  %166 = fcmp uno float %161, 0.000000e+00, !dbg !37
  %167 = or i1 %166, %165, !dbg !41
  %168 = select i1 %167, float %161, float %164, !dbg !42
  %169 = bitcast float %168 to i32, !dbg !43
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !43
  %171 = bitcast i32 %170 to float, !dbg !43
  %172 = fcmp olt float %168, %171, !dbg !40
  %173 = fcmp uno float %168, 0.000000e+00, !dbg !37
  %174 = or i1 %172, %173, !dbg !41
  %175 = select i1 %174, float %168, float %171, !dbg !42
  %176 = bitcast float %175 to i32, !dbg !43
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 4, i32 31), !dbg !43
  %178 = bitcast i32 %177 to float, !dbg !43
  %179 = fcmp olt float %175, %178, !dbg !40
  %180 = fcmp uno float %175, 0.000000e+00, !dbg !37
  %181 = or i1 %179, %180, !dbg !41
  %182 = select i1 %181, float %175, float %178, !dbg !42
  %183 = bitcast float %182 to i32, !dbg !43
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = fcmp olt float %182, %185, !dbg !40
  %187 = fcmp uno float %182, 0.000000e+00, !dbg !37
  %188 = or i1 %186, %187, !dbg !41
  %189 = select i1 %188, float %182, float %185, !dbg !42
  %190 = bitcast float %189 to i32, !dbg !43
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 1, i32 31), !dbg !43
  %192 = bitcast i32 %191 to float, !dbg !43
  %193 = fcmp olt float %189, %192, !dbg !40
  %194 = fcmp uno float %189, 0.000000e+00, !dbg !37
  %195 = or i1 %193, %194, !dbg !41
  %196 = and i32 %125, 7, !dbg !43
  %197 = icmp eq i32 %12, 0, !dbg !43
  %198 = shl nuw nsw i32 %.lobit, 3, !dbg !43
  %199 = or disjoint i32 %198, %196, !dbg !43
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !43
  %201 = select i1 %195, i32 %190, i32 %191, !dbg !42
  %202 = insertelement <1 x i32> poison, i32 %201, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %202, i1 %197) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %203 = icmp slt i32 %10, 16, !dbg !43
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !43
  %205 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %204, i1 %203) #4, !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !43
  %208 = bitcast i32 %207 to float, !dbg !43
  %209 = fcmp olt float %206, %208, !dbg !40
  %210 = fcmp uno float %206, 0.000000e+00, !dbg !37
  %211 = or i1 %210, %209, !dbg !41
  %212 = select i1 %211, float %206, float %208, !dbg !42
  %213 = bitcast float %212 to i32, !dbg !43
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 2, i32 31), !dbg !43
  %215 = bitcast i32 %214 to float, !dbg !43
  %216 = fcmp olt float %212, %215, !dbg !40
  %217 = fcmp uno float %212, 0.000000e+00, !dbg !37
  %218 = or i1 %216, %217, !dbg !41
  %219 = select i1 %218, float %212, float %215, !dbg !42
  %220 = bitcast float %219 to i32, !dbg !43
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !43
  %222 = bitcast i32 %221 to float, !dbg !43
  %223 = fcmp olt float %219, %222, !dbg !40
  %224 = fcmp uno float %219, 0.000000e+00, !dbg !37
  %225 = or i1 %223, %224, !dbg !41
  %226 = and i32 %10, 7, !dbg !43
  %227 = icmp eq i32 %226, 0, !dbg !43
  %228 = and i1 %203, %227, !dbg !43
  %229 = select i1 %225, i32 %220, i32 %221, !dbg !42
  %230 = insertelement <1 x i32> poison, i32 %229, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %230, i1 %228) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !43
  %232 = load float, ptr addrspace(3) %231, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %233 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !44
  %234 = bitcast float %232 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %235 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %126, !dbg !44
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %237 = insertelement <2 x float> %131, float %83, i64 1, !dbg !23
  %238 = select <2 x i1> %130, <2 x float> %237, <2 x float> splat (float 0xFFF0000000000000), !dbg !23
  %239 = fcmp uno <2 x float> %238, zeroinitializer, !dbg !34
  %240 = fcmp ogt <2 x float> %238, %135, !dbg !32
  %241 = or <2 x i1> %239, %240, !dbg !35
  %242 = select <2 x i1> %241, <2 x float> %238, <2 x float> %135, !dbg !36
  %243 = select <2 x i1> %130, <2 x float> %242, <2 x float> splat (float 0xFFF0000000000000), !dbg !23
  %244 = insertelement <2 x float> %141, float %123, i64 1, !dbg !32
  %245 = fcmp ogt <2 x float> %243, %244, !dbg !32
  %246 = fcmp uno <2 x float> %243, zeroinitializer, !dbg !34
  %247 = or <2 x i1> %245, %246, !dbg !35
  %248 = select <2 x i1> %247, <2 x float> %243, <2 x float> %244, !dbg !36
  %249 = extractelement <2 x float> %248, i64 1, !dbg !47
  %250 = fcmp ogt float %249, %124, !dbg !48
  %251 = fcmp uno float %249, 0.000000e+00, !dbg !47
  %252 = or i1 %250, %251, !dbg !49
  %253 = insertelement <2 x i1> %130, i1 %252, i64 1, !dbg !23
  %254 = insertelement <2 x float> <float 0xFFF0000000000000, float poison>, float %124, i64 1, !dbg !23
  %255 = select <2 x i1> %253, <2 x float> %248, <2 x float> %254, !dbg !23
  %256 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %255, <2 x i32> <i32 3, i32 1>, !dbg !48
  %257 = fcmp ogt <2 x float> %256, %255, !dbg !48
  %258 = fcmp uno <2 x float> %256, %255, !dbg !48
  %shift13 = shufflevector <2 x i1> %258, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %259 = or <2 x i1> %257, %shift13, !dbg !49
  %260 = extractelement <2 x i1> %259, i64 0, !dbg !49
  %261 = extractelement <2 x float> %255, i64 0, !dbg !50
  %262 = extractelement <2 x float> %255, i64 1, !dbg !50
  %263 = select i1 %260, float %262, float %261, !dbg !50
  %264 = bitcast float %263 to i32, !dbg !45
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 16, i32 31), !dbg !45
  %266 = bitcast i32 %265 to float, !dbg !45
  %267 = fcmp ogt float %263, %266, !dbg !48
  %268 = fcmp uno float %263, 0.000000e+00, !dbg !47
  %269 = or i1 %268, %267, !dbg !49
  %270 = select i1 %269, float %263, float %266, !dbg !50
  %271 = bitcast float %270 to i32, !dbg !45
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 8, i32 31), !dbg !45
  %273 = bitcast i32 %272 to float, !dbg !45
  %274 = fcmp ogt float %270, %273, !dbg !48
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !47
  %276 = or i1 %274, %275, !dbg !49
  %277 = select i1 %276, float %270, float %273, !dbg !50
  %278 = bitcast float %277 to i32, !dbg !45
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 4, i32 31), !dbg !45
  %280 = bitcast i32 %279 to float, !dbg !45
  %281 = fcmp ogt float %277, %280, !dbg !48
  %282 = fcmp uno float %277, 0.000000e+00, !dbg !47
  %283 = or i1 %281, %282, !dbg !49
  %284 = select i1 %283, float %277, float %280, !dbg !50
  %285 = bitcast float %284 to i32, !dbg !45
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !45
  %287 = bitcast i32 %286 to float, !dbg !45
  %288 = fcmp ogt float %284, %287, !dbg !48
  %289 = fcmp uno float %284, 0.000000e+00, !dbg !47
  %290 = or i1 %288, %289, !dbg !49
  %291 = select i1 %290, float %284, float %287, !dbg !50
  %292 = bitcast float %291 to i32, !dbg !45
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !45
  %294 = bitcast i32 %293 to float, !dbg !45
  %295 = fcmp ogt float %291, %294, !dbg !48
  %296 = fcmp uno float %291, 0.000000e+00, !dbg !47
  %297 = or i1 %295, %296, !dbg !49
  %298 = select i1 %297, i32 %292, i32 %293, !dbg !50
  %299 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %299, i1 %197) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %300 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %204, i1 %203) #4, !dbg !45
  %301 = bitcast i32 %300 to float, !dbg !45
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 4, i32 31), !dbg !45
  %303 = bitcast i32 %302 to float, !dbg !45
  %304 = fcmp ogt float %301, %303, !dbg !48
  %305 = fcmp uno float %301, 0.000000e+00, !dbg !47
  %306 = or i1 %305, %304, !dbg !49
  %307 = select i1 %306, float %301, float %303, !dbg !50
  %308 = bitcast float %307 to i32, !dbg !45
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !45
  %310 = bitcast i32 %309 to float, !dbg !45
  %311 = fcmp ogt float %307, %310, !dbg !48
  %312 = fcmp uno float %307, 0.000000e+00, !dbg !47
  %313 = or i1 %311, %312, !dbg !49
  %314 = select i1 %313, float %307, float %310, !dbg !50
  %315 = bitcast float %314 to i32, !dbg !45
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !45
  %317 = bitcast i32 %316 to float, !dbg !45
  %318 = fcmp ogt float %314, %317, !dbg !48
  %319 = fcmp uno float %314, 0.000000e+00, !dbg !47
  %320 = or i1 %318, %319, !dbg !49
  %321 = select i1 %320, i32 %315, i32 %316, !dbg !50
  %322 = insertelement <1 x i32> poison, i32 %321, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %322, i1 %228) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %323 = load float, ptr addrspace(3) %231, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %324 = bitcast float %323 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %324, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %325 = load float, ptr addrspace(3) %235, align 4, !dbg !51
  %326 = sext i32 %127 to i64, !dbg !52
  %327 = getelementptr bfloat, ptr addrspace(1) %1, i64 %326, !dbg !52
  %328 = fptrunc float %236 to bfloat, !dbg !44
  %329 = and i32 %10, 510, !dbg !44
  %330 = icmp eq i32 %329, 0, !dbg !44
  %331 = bitcast bfloat %328 to i16, !dbg !44
  %332 = and i1 %330, %128, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %331, ptr addrspace(1) %327, i1 %332) #4, !dbg !44
  %333 = getelementptr bfloat, ptr addrspace(1) %2, i64 %326, !dbg !53
  %334 = fptrunc float %325 to bfloat, !dbg !51
  %335 = bitcast bfloat %334 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %335, ptr addrspace(1) %333, i1 %332) #4, !dbg !51
  %.inv = fcmp oge float %232, 0.000000e+00, !dbg !54
  %336 = select i1 %.inv, float 0.000000e+00, float %232, !dbg !54
  %337 = fsub float 0.000000e+00, %336, !dbg !56
  %.inv2 = fcmp ole float %323, 0.000000e+00, !dbg !57
  %338 = select i1 %.inv2, float 0.000000e+00, float %323, !dbg !57
  %339 = fcmp ogt float %337, %338, !dbg !59
  %340 = fcmp uno float %337, 0.000000e+00, !dbg !61
  %341 = or i1 %340, %339, !dbg !62
  %342 = select i1 %341, float %337, float %338, !dbg !63
  %343 = fmul float %342, 0x3F80204080000000, !dbg !64
  %344 = fcmp ogt float %343, 0x3EE4F8B580000000, !dbg !65
  %345 = fcmp uno float %343, 0.000000e+00, !dbg !67
  %346 = or i1 %344, %345, !dbg !68
  %347 = select i1 %346, float %343, float 0x3EE4F8B580000000, !dbg !69
  %348 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %347), !dbg !70
  %349 = mul i32 %13, 3072, !dbg !71
  %350 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 %14) #4, !dbg !72
  %351 = extractvalue { i32, i32 } %350, 0, !dbg !72
  %352 = bitcast i32 %351 to <2 x bfloat>, !dbg !72
  %353 = extractvalue { i32, i32 } %350, 1, !dbg !72
  %354 = bitcast i32 %353 to <2 x bfloat>, !dbg !72
  %355 = extractelement <2 x bfloat> %352, i64 0, !dbg !72
  %356 = extractelement <2 x bfloat> %352, i64 1, !dbg !72
  %357 = extractelement <2 x bfloat> %354, i64 0, !dbg !72
  %358 = extractelement <2 x bfloat> %354, i64 1, !dbg !72
  %359 = fpext bfloat %355 to float, !dbg !73
  %360 = fpext bfloat %356 to float, !dbg !73
  %361 = fpext bfloat %357 to float, !dbg !73
  %362 = fpext bfloat %358 to float, !dbg !73
  %363 = fmul float %348, %359, !dbg !74
  %364 = fmul float %348, %360, !dbg !74
  %365 = fmul float %348, %361, !dbg !74
  %366 = fmul float %348, %362, !dbg !74
  %367 = tail call float @llvm.nvvm.round.f(float %363) #4, !dbg !75
  %368 = tail call float @llvm.nvvm.round.f(float %364) #4, !dbg !75
  %369 = tail call float @llvm.nvvm.round.f(float %365) #4, !dbg !75
  %370 = tail call float @llvm.nvvm.round.f(float %366) #4, !dbg !75
  %371 = insertelement <4 x float> poison, float %367, i64 0, !dbg !76
  %372 = insertelement <4 x float> %371, float %368, i64 1, !dbg !76
  %373 = insertelement <4 x float> %372, float %369, i64 2, !dbg !76
  %374 = insertelement <4 x float> %373, float %370, i64 3, !dbg !76
  %375 = fcmp ogt <4 x float> %374, splat (float -1.270000e+02), !dbg !76
  %376 = fcmp uno <4 x float> %374, zeroinitializer, !dbg !78
  %377 = or <4 x i1> %375, %376, !dbg !79
  %378 = select <4 x i1> %377, <4 x float> %374, <4 x float> splat (float -1.270000e+02), !dbg !80
  %379 = fcmp olt <4 x float> %378, splat (float 1.270000e+02), !dbg !81
  %380 = fcmp uno <4 x float> %378, zeroinitializer, !dbg !83
  %381 = or <4 x i1> %379, %380, !dbg !84
  %382 = fptosi <4 x float> %378 to <4 x i8>, !dbg !85
  %383 = select <4 x i1> %381, <4 x i8> %382, <4 x i8> splat (i8 127), !dbg !86
  %384 = or disjoint i32 %16, %349, !dbg !87
  %385 = sext i32 %384 to i64, !dbg !88
  %386 = getelementptr i8, ptr addrspace(1) %3, i64 %385, !dbg !88
  %387 = bitcast <4 x i8> %383 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %386, i1 %14) #4, !dbg !89
  %388 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %14) #4, !dbg !72
  %389 = extractvalue { i32, i32 } %388, 0, !dbg !72
  %390 = bitcast i32 %389 to <2 x bfloat>, !dbg !72
  %391 = extractvalue { i32, i32 } %388, 1, !dbg !72
  %392 = bitcast i32 %391 to <2 x bfloat>, !dbg !72
  %393 = extractelement <2 x bfloat> %390, i64 0, !dbg !72
  %394 = extractelement <2 x bfloat> %390, i64 1, !dbg !72
  %395 = extractelement <2 x bfloat> %392, i64 0, !dbg !72
  %396 = extractelement <2 x bfloat> %392, i64 1, !dbg !72
  %397 = fpext bfloat %393 to float, !dbg !73
  %398 = fpext bfloat %394 to float, !dbg !73
  %399 = fpext bfloat %395 to float, !dbg !73
  %400 = fpext bfloat %396 to float, !dbg !73
  %401 = fmul float %348, %397, !dbg !74
  %402 = fmul float %348, %398, !dbg !74
  %403 = fmul float %348, %399, !dbg !74
  %404 = fmul float %348, %400, !dbg !74
  %405 = tail call float @llvm.nvvm.round.f(float %401) #4, !dbg !75
  %406 = tail call float @llvm.nvvm.round.f(float %402) #4, !dbg !75
  %407 = tail call float @llvm.nvvm.round.f(float %403) #4, !dbg !75
  %408 = tail call float @llvm.nvvm.round.f(float %404) #4, !dbg !75
  %409 = insertelement <4 x float> poison, float %405, i64 0, !dbg !76
  %410 = insertelement <4 x float> %409, float %406, i64 1, !dbg !76
  %411 = insertelement <4 x float> %410, float %407, i64 2, !dbg !76
  %412 = insertelement <4 x float> %411, float %408, i64 3, !dbg !76
  %413 = fcmp ogt <4 x float> %412, splat (float -1.270000e+02), !dbg !76
  %414 = fcmp uno <4 x float> %412, zeroinitializer, !dbg !78
  %415 = or <4 x i1> %413, %414, !dbg !79
  %416 = select <4 x i1> %415, <4 x float> %412, <4 x float> splat (float -1.270000e+02), !dbg !80
  %417 = fcmp olt <4 x float> %416, splat (float 1.270000e+02), !dbg !81
  %418 = fcmp uno <4 x float> %416, zeroinitializer, !dbg !83
  %419 = or <4 x i1> %417, %418, !dbg !84
  %420 = fptosi <4 x float> %416 to <4 x i8>, !dbg !85
  %421 = select <4 x i1> %419, <4 x i8> %420, <4 x i8> splat (i8 127), !dbg !86
  %422 = trunc nuw nsw i64 %43 to i32, !dbg !87
  %423 = add i32 %349, %422, !dbg !87
  %424 = sext i32 %423 to i64, !dbg !88
  %425 = getelementptr i8, ptr addrspace(1) %3, i64 %424, !dbg !88
  %426 = bitcast <4 x i8> %421 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %425, i1 %14) #4, !dbg !89
  %427 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %93, i1 %14) #4, !dbg !72
  %428 = extractvalue { i32, i32 } %427, 0, !dbg !72
  %429 = bitcast i32 %428 to <2 x bfloat>, !dbg !72
  %430 = extractvalue { i32, i32 } %427, 1, !dbg !72
  %431 = bitcast i32 %430 to <2 x bfloat>, !dbg !72
  %432 = extractelement <2 x bfloat> %429, i64 0, !dbg !72
  %433 = extractelement <2 x bfloat> %429, i64 1, !dbg !72
  %434 = extractelement <2 x bfloat> %431, i64 0, !dbg !72
  %435 = extractelement <2 x bfloat> %431, i64 1, !dbg !72
  %436 = fpext bfloat %432 to float, !dbg !73
  %437 = fpext bfloat %433 to float, !dbg !73
  %438 = fpext bfloat %434 to float, !dbg !73
  %439 = fpext bfloat %435 to float, !dbg !73
  %440 = fmul float %348, %436, !dbg !74
  %441 = fmul float %348, %437, !dbg !74
  %442 = fmul float %348, %438, !dbg !74
  %443 = fmul float %348, %439, !dbg !74
  %444 = tail call float @llvm.nvvm.round.f(float %440) #4, !dbg !75
  %445 = tail call float @llvm.nvvm.round.f(float %441) #4, !dbg !75
  %446 = tail call float @llvm.nvvm.round.f(float %442) #4, !dbg !75
  %447 = tail call float @llvm.nvvm.round.f(float %443) #4, !dbg !75
  %448 = insertelement <4 x float> poison, float %444, i64 0, !dbg !76
  %449 = insertelement <4 x float> %448, float %445, i64 1, !dbg !76
  %450 = insertelement <4 x float> %449, float %446, i64 2, !dbg !76
  %451 = insertelement <4 x float> %450, float %447, i64 3, !dbg !76
  %452 = fcmp ogt <4 x float> %451, splat (float -1.270000e+02), !dbg !76
  %453 = fcmp uno <4 x float> %451, zeroinitializer, !dbg !78
  %454 = or <4 x i1> %452, %453, !dbg !79
  %455 = select <4 x i1> %454, <4 x float> %451, <4 x float> splat (float -1.270000e+02), !dbg !80
  %456 = fcmp olt <4 x float> %455, splat (float 1.270000e+02), !dbg !81
  %457 = fcmp uno <4 x float> %455, zeroinitializer, !dbg !83
  %458 = or <4 x i1> %456, %457, !dbg !84
  %459 = fptosi <4 x float> %455 to <4 x i8>, !dbg !85
  %460 = select <4 x i1> %458, <4 x i8> %459, <4 x i8> splat (i8 127), !dbg !86
  %461 = trunc nuw nsw i64 %88 to i32, !dbg !87
  %462 = add i32 %349, %461, !dbg !87
  %463 = sext i32 %462 to i64, !dbg !88
  %464 = getelementptr i8, ptr addrspace(1) %3, i64 %463, !dbg !88
  %465 = bitcast <4 x i8> %460 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %464, i1 %14) #4, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 40, column: 48, scope: !6)
!23 = !DILocation(line: 42, column: 48, scope: !6)
!24 = !DILocation(line: 32, column: 31, scope: !6)
!25 = !DILocation(line: 94, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 39, column: 45, scope: !6)
!29 = !DILocation(line: 96, column: 21, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 96, column: 16, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 45, scope: !6)
!34 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !33)
!35 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !33)
!36 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !33)
!37 = !DILocation(line: 96, column: 21, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!39 = !DILocation(line: 43, column: 38, scope: !6)
!40 = !DILocation(line: 94, column: 15, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 96, column: 16, scope: !38, inlinedAt: !39)
!42 = !DILocation(line: 97, column: 29, scope: !38, inlinedAt: !39)
!43 = !DILocation(line: 110, column: 29, scope: !26, inlinedAt: !39)
!44 = !DILocation(line: 45, column: 36, scope: !6)
!45 = !DILocation(line: 115, column: 29, scope: !26, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 38, scope: !6)
!47 = !DILocation(line: 104, column: 21, scope: !38, inlinedAt: !46)
!48 = !DILocation(line: 102, column: 15, scope: !38, inlinedAt: !46)
!49 = !DILocation(line: 104, column: 16, scope: !38, inlinedAt: !46)
!50 = !DILocation(line: 105, column: 29, scope: !38, inlinedAt: !46)
!51 = !DILocation(line: 46, column: 36, scope: !6)
!52 = !DILocation(line: 45, column: 25, scope: !6)
!53 = !DILocation(line: 46, column: 25, scope: !6)
!54 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !55)
!55 = !DILocation(line: 55, column: 44, scope: !6)
!56 = !DILocation(line: 56, column: 16, scope: !6)
!57 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 45, scope: !6)
!59 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !6)
!61 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !60)
!62 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !60)
!63 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !60)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 46, scope: !6)
!67 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !66)
!69 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !66)
!70 = !DILocation(line: 66, column: 25, scope: !6)
!71 = !DILocation(line: 78, column: 41, scope: !6)
!72 = !DILocation(line: 53, column: 83, scope: !6)
!73 = !DILocation(line: 53, column: 145, scope: !6)
!74 = !DILocation(line: 69, column: 23, scope: !6)
!75 = !DILocation(line: 70, column: 36, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !77)
!77 = !DILocation(line: 73, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !77)
!81 = !DILocation(line: 94, column: 15, scope: !26, inlinedAt: !82)
!82 = !DILocation(line: 75, column: 46, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !26, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !26, inlinedAt: !82)
!85 = !DILocation(line: 77, column: 25, scope: !6)
!86 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !82)
!87 = !DILocation(line: 78, column: 36, scope: !6)
!88 = !DILocation(line: 78, column: 29, scope: !6)
!89 = !DILocation(line: 78, column: 53, scope: !6)
!90 = !DILocation(line: 47, column: 4, scope: !6)
