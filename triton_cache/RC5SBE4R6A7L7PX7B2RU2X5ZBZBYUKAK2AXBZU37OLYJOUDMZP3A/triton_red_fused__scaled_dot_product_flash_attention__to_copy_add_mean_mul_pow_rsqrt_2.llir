; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 3, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 5, !dbg !11
  %15 = and i32 %14, 7, !dbg !11
  %16 = and i32 %13, 7, !dbg !11
  %17 = or disjoint i32 %15, %12, !dbg !12
  %18 = or disjoint i32 %12, %16, !dbg !12
  %19 = icmp slt i32 %17, 98688, !dbg !13
  %20 = icmp slt i32 %18, 98688, !dbg !13
  %21 = shl i32 %13, 2, !dbg !14
  %22 = and i32 %21, 124, !dbg !14
  %23 = lshr i32 %13, 3, !dbg !14
  %.lobit = and i32 %23, 1, !dbg !14
  %24 = sdiv i32 %17, 24, !dbg !15
  %25 = mul i32 %24, 24, !dbg !16
  %.decomposed = sub i32 %17, %25, !dbg !16
  %26 = sdiv i32 %18, 24, !dbg !15
  %27 = or disjoint i32 %22, 3072, !dbg !17
  %28 = shl nsw i32 %.decomposed, 7, !dbg !18
  %29 = add nsw i32 %27, %28, !dbg !19
  %30 = mul i32 %24, 9216, !dbg !20
  %31 = add i32 %29, %30, !dbg !21
  %32 = sext i32 %31 to i64, !dbg !22
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 %19) #5, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !23
  %37 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !23
  %39 = extractelement <2 x bfloat> %36, i64 0, !dbg !23
  %40 = extractelement <2 x bfloat> %36, i64 1, !dbg !23
  %41 = extractelement <2 x bfloat> %38, i64 0, !dbg !23
  %42 = extractelement <2 x bfloat> %38, i64 1, !dbg !23
  %43 = fpext bfloat %39 to float, !dbg !24
  %44 = fpext bfloat %40 to float, !dbg !24
  %45 = fpext bfloat %41 to float, !dbg !24
  %46 = fpext bfloat %42 to float, !dbg !24
  %47 = or disjoint i32 %28, %22, !dbg !25
  %48 = add i32 %47, %30, !dbg !26
  %49 = sext i32 %48 to i64, !dbg !27
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %19) #5, !dbg !28
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !28
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !28
  %54 = extractvalue { i32, i32 } %51, 1, !dbg !28
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !28
  %56 = extractelement <2 x bfloat> %53, i64 0, !dbg !28
  %57 = extractelement <2 x bfloat> %53, i64 1, !dbg !28
  %58 = extractelement <2 x bfloat> %55, i64 0, !dbg !28
  %59 = extractelement <2 x bfloat> %55, i64 1, !dbg !28
  %60 = fpext bfloat %56 to float, !dbg !29
  %61 = fpext bfloat %57 to float, !dbg !29
  %62 = fpext bfloat %58 to float, !dbg !29
  %63 = fpext bfloat %59 to float, !dbg !29
  %64 = fmul float %43, %43, !dbg !30
  %65 = fmul float %44, %44, !dbg !30
  %66 = fmul float %45, %45, !dbg !30
  %67 = fmul float %46, %46, !dbg !30
  %68 = fmul float %60, %60, !dbg !31
  %69 = fmul float %61, %61, !dbg !31
  %70 = fmul float %62, %62, !dbg !31
  %71 = fmul float %63, %63, !dbg !31
  %72 = fadd float %64, %65, !dbg !32
  %73 = fadd float %66, %72, !dbg !32
  %74 = fadd float %67, %73, !dbg !32
  %75 = select i1 %19, float %74, float 0.000000e+00, !dbg !32
  %76 = bitcast float %75 to i32, !dbg !37
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !37
  %78 = bitcast i32 %77 to float, !dbg !37
  %79 = fadd float %75, %78, !dbg !32
  %80 = bitcast float %79 to i32, !dbg !37
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = fadd float %79, %82, !dbg !32
  %84 = bitcast float %83 to i32, !dbg !37
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !37
  %86 = bitcast i32 %85 to float, !dbg !37
  %87 = fadd float %83, %86, !dbg !32
  %88 = bitcast float %87 to i32, !dbg !37
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !37
  %90 = bitcast i32 %89 to float, !dbg !37
  %91 = fadd float %87, %90, !dbg !32
  %92 = bitcast float %91 to i32, !dbg !37
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !37
  %94 = bitcast i32 %93 to float, !dbg !37
  %95 = fadd float %91, %94, !dbg !32
  %96 = fadd float %68, %69, !dbg !38
  %97 = fadd float %70, %96, !dbg !38
  %98 = fadd float %71, %97, !dbg !38
  %99 = select i1 %19, float %98, float 0.000000e+00, !dbg !38
  %100 = bitcast float %99 to i32, !dbg !40
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !40
  %102 = bitcast i32 %101 to float, !dbg !40
  %103 = fadd float %99, %102, !dbg !38
  %104 = bitcast float %103 to i32, !dbg !40
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !40
  %106 = bitcast i32 %105 to float, !dbg !40
  %107 = fadd float %103, %106, !dbg !38
  %108 = bitcast float %107 to i32, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %107, %110, !dbg !38
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !38
  %116 = bitcast float %115 to i32, !dbg !40
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = fadd float %115, %118, !dbg !38
  %120 = zext nneg i32 %22 to i64, !dbg !41
  %121 = getelementptr bfloat, ptr addrspace(1) %1, i64 %120, !dbg !41
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %121, i1 true) #5, !dbg !42
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !42
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !42
  %125 = extractvalue { i32, i32 } %122, 1, !dbg !42
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !42
  %127 = extractelement <2 x bfloat> %124, i64 0, !dbg !42
  %128 = extractelement <2 x bfloat> %124, i64 1, !dbg !42
  %129 = extractelement <2 x bfloat> %126, i64 0, !dbg !42
  %130 = extractelement <2 x bfloat> %126, i64 1, !dbg !42
  %131 = fpext bfloat %127 to float, !dbg !43
  %132 = fpext bfloat %128 to float, !dbg !43
  %133 = fpext bfloat %129 to float, !dbg !43
  %134 = fpext bfloat %130 to float, !dbg !43
  %135 = shl i32 %24, 7, !dbg !44
  %136 = or disjoint i32 %135, %22, !dbg !45
  %137 = sext i32 %136 to i64, !dbg !46
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !46
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %138, i1 %19) #5, !dbg !47
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !47
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !47
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !47
  %144 = bitcast i32 %140 to float, !dbg !47
  %145 = bitcast i32 %141 to float, !dbg !47
  %146 = bitcast i32 %142 to float, !dbg !47
  %147 = bitcast i32 %143 to float, !dbg !47
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !48
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %148, i1 %19) #5, !dbg !49
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !49
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !49
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !49
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !49
  %154 = and i32 %21, 1020, !dbg !49
  %155 = shl i32 %13, 7, !dbg !49
  %156 = and i32 %155, 896, !dbg !49
  %157 = and i32 %23, 31, !dbg !49
  %158 = or disjoint i32 %157, %156, !dbg !49
  %159 = lshr i32 %21, 5, !dbg !49
  %160 = and i32 %159, 28, !dbg !49
  %161 = add nuw nsw i32 %160, %154, !dbg !49
  %162 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %161, !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %162, i32 %150, i32 %151, i32 %152, i32 %153, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %163 = lshr exact i32 %156, 5, !dbg !49
  %164 = add nuw nsw i32 %163, %158, !dbg !49
  %165 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %164, !dbg !49
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !49
  %167 = or disjoint i32 %158, 32, !dbg !49
  %168 = add nuw nsw i32 %167, %163, !dbg !49
  %169 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %168, !dbg !49
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !49
  %171 = or disjoint i32 %158, 64, !dbg !49
  %172 = add nuw nsw i32 %171, %163, !dbg !49
  %173 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %172, !dbg !49
  %174 = load float, ptr addrspace(3) %173, align 4, !dbg !49
  %175 = or disjoint i32 %158, 96, !dbg !49
  %176 = add nuw nsw i32 %175, %163, !dbg !49
  %177 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %176, !dbg !49
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !49
  %179 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 %19) #5, !dbg !50
  %180 = getelementptr bfloat, ptr addrspace(1) %4, i64 %120, !dbg !51
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %180, i1 true) #5, !dbg !52
  %182 = icmp eq i32 %.lobit, 0, !dbg !53
  %183 = and i32 %23, 30, !dbg !54
  %184 = or disjoint i32 %183, 32, !dbg !55
  %185 = or disjoint i32 %183, 64, !dbg !55
  %186 = or disjoint i32 %183, 96, !dbg !55
  %187 = or disjoint i32 %183, 1, !dbg !56
  %188 = or disjoint i32 %183, 33, !dbg !56
  %189 = or disjoint i32 %183, 65, !dbg !56
  %190 = or disjoint i32 %183, 97, !dbg !56
  %191 = shl i32 %18, 7, !dbg !57
  %192 = mul i32 %26, 6144, !dbg !57
  %193 = add i32 %192, %191, !dbg !57
  %194 = or disjoint i32 %193, %187, !dbg !58
  %195 = or disjoint i32 %193, %188, !dbg !58
  %196 = or disjoint i32 %193, %189, !dbg !58
  %197 = or disjoint i32 %193, %190, !dbg !58
  %198 = sext i32 %194 to i64, !dbg !59
  %199 = getelementptr bfloat, ptr addrspace(1) %0, i64 %198, !dbg !59
  %200 = sext i32 %195 to i64, !dbg !59
  %201 = getelementptr bfloat, ptr addrspace(1) %0, i64 %200, !dbg !59
  %202 = sext i32 %196 to i64, !dbg !59
  %203 = getelementptr bfloat, ptr addrspace(1) %0, i64 %202, !dbg !59
  %204 = sext i32 %197 to i64, !dbg !59
  %205 = getelementptr bfloat, ptr addrspace(1) %0, i64 %204, !dbg !59
  %206 = and i1 %20, %182, !dbg !60
  %207 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %199, i1 %206) #5, !dbg !61
  %208 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %201, i1 %206) #5, !dbg !61
  %209 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %203, i1 %206) #5, !dbg !61
  %210 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %205, i1 %206) #5, !dbg !61
  %211 = tail call float @llvm.nvvm.div.full(float %119, float 1.280000e+02), !dbg !62
  %212 = fadd float %211, 0x3EB0C6F7A0000000, !dbg !63
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i = icmp eq i32 %213, 0, !dbg !64
  br i1 %.not.i, label %216, label %214, !dbg !64

214:                                              ; preds = %10
  %215 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit, !dbg !64

216:                                              ; preds = %10
  %217 = tail call float @llvm.nvvm.rsqrt.approx.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit, !dbg !64

__nv_rsqrtf.exit:                                 ; preds = %214, %216
  %.0.i = phi float [ %215, %214 ], [ %217, %216 ], !dbg !64
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i16 = icmp eq i32 %218, 0, !dbg !64
  br i1 %.not.i16, label %221, label %219, !dbg !64

219:                                              ; preds = %__nv_rsqrtf.exit
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit18, !dbg !64

221:                                              ; preds = %__nv_rsqrtf.exit
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit18, !dbg !64

__nv_rsqrtf.exit18:                               ; preds = %219, %221
  %.0.i17 = phi float [ %220, %219 ], [ %222, %221 ], !dbg !64
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i19 = icmp eq i32 %223, 0, !dbg !64
  br i1 %.not.i19, label %226, label %224, !dbg !64

224:                                              ; preds = %__nv_rsqrtf.exit18
  %225 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit21, !dbg !64

226:                                              ; preds = %__nv_rsqrtf.exit18
  %227 = tail call float @llvm.nvvm.rsqrt.approx.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit21, !dbg !64

__nv_rsqrtf.exit21:                               ; preds = %224, %226
  %.0.i20 = phi float [ %225, %224 ], [ %227, %226 ], !dbg !64
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i22 = icmp eq i32 %228, 0, !dbg !64
  br i1 %.not.i22, label %231, label %229, !dbg !64

229:                                              ; preds = %__nv_rsqrtf.exit21
  %230 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit24, !dbg !64

231:                                              ; preds = %__nv_rsqrtf.exit21
  %232 = tail call float @llvm.nvvm.rsqrt.approx.f(float %212), !dbg !64
  br label %__nv_rsqrtf.exit24, !dbg !64

__nv_rsqrtf.exit24:                               ; preds = %229, %231
  %.0.i23 = phi float [ %230, %229 ], [ %232, %231 ], !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.idx = shl nuw nsw i32 %15, 3, !dbg !65
  %233 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !65
  %234 = bitcast float %.0.i to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #5, !dbg !65
  %235 = bitcast float %.0.i17 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %235, i1 true) #5, !dbg !65
  %236 = bitcast float %.0.i20 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %236, i1 true) #5, !dbg !65
  %237 = bitcast float %.0.i23 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %237, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !65
  %238 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !65
  %239 = load float, ptr addrspace(3) %238, align 8, !dbg !65
  %240 = zext nneg i32 %187 to i64, !dbg !66
  %241 = getelementptr bfloat, ptr addrspace(1) %1, i64 %240, !dbg !66
  %242 = zext nneg i32 %188 to i64, !dbg !66
  %243 = getelementptr bfloat, ptr addrspace(1) %1, i64 %242, !dbg !66
  %244 = zext nneg i32 %189 to i64, !dbg !66
  %245 = getelementptr bfloat, ptr addrspace(1) %1, i64 %244, !dbg !66
  %246 = zext nneg i32 %190 to i64, !dbg !66
  %247 = getelementptr bfloat, ptr addrspace(1) %1, i64 %246, !dbg !66
  %248 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %241, i1 %206) #5, !dbg !67
  %249 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %243, i1 %206) #5, !dbg !67
  %250 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %245, i1 %206) #5, !dbg !67
  %251 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %247, i1 %206) #5, !dbg !67
  %252 = icmp ne i32 %.lobit, 0, !dbg !68
  %253 = or disjoint i32 %193, %183, !dbg !69
  %254 = or disjoint i32 %193, %184, !dbg !69
  %255 = or disjoint i32 %193, %185, !dbg !69
  %256 = or disjoint i32 %193, %186, !dbg !69
  %257 = sext i32 %253 to i64, !dbg !70
  %258 = getelementptr bfloat, ptr addrspace(1) %0, i64 %257, !dbg !70
  %259 = sext i32 %254 to i64, !dbg !70
  %260 = getelementptr bfloat, ptr addrspace(1) %0, i64 %259, !dbg !70
  %261 = sext i32 %255 to i64, !dbg !70
  %262 = getelementptr bfloat, ptr addrspace(1) %0, i64 %261, !dbg !70
  %263 = sext i32 %256 to i64, !dbg !70
  %264 = getelementptr bfloat, ptr addrspace(1) %0, i64 %263, !dbg !70
  %265 = and i1 %20, %252, !dbg !71
  %266 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %258, i1 %265) #5, !dbg !72
  %267 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %260, i1 %265) #5, !dbg !72
  %268 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %262, i1 %265) #5, !dbg !72
  %269 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %264, i1 %265) #5, !dbg !72
  %270 = zext nneg i32 %183 to i64, !dbg !73
  %271 = getelementptr bfloat, ptr addrspace(1) %1, i64 %270, !dbg !73
  %272 = zext nneg i32 %184 to i64, !dbg !73
  %273 = getelementptr bfloat, ptr addrspace(1) %1, i64 %272, !dbg !73
  %274 = zext nneg i32 %185 to i64, !dbg !73
  %275 = getelementptr bfloat, ptr addrspace(1) %1, i64 %274, !dbg !73
  %276 = zext nneg i32 %186 to i64, !dbg !73
  %277 = getelementptr bfloat, ptr addrspace(1) %1, i64 %276, !dbg !73
  %278 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %271, i1 %265) #5, !dbg !74
  %279 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %273, i1 %265) #5, !dbg !74
  %280 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %275, i1 %265) #5, !dbg !74
  %281 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %277, i1 %265) #5, !dbg !74
  %282 = fmul float %.0.i23, %60, !dbg !75
  %283 = fmul float %.0.i23, %61, !dbg !75
  %284 = fmul float %.0.i23, %62, !dbg !75
  %285 = fmul float %.0.i23, %63, !dbg !75
  %286 = fmul float %282, %131, !dbg !76
  %287 = fmul float %283, %132, !dbg !76
  %288 = fmul float %284, %133, !dbg !76
  %289 = fmul float %285, %134, !dbg !76
  %290 = fmul float %286, %144, !dbg !77
  %291 = fmul float %287, %145, !dbg !77
  %292 = fmul float %288, %146, !dbg !77
  %293 = fmul float %289, %147, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %294 = bitcast float %290 to i32, !dbg !77
  %295 = bitcast float %291 to i32, !dbg !77
  %296 = bitcast float %292 to i32, !dbg !77
  %297 = bitcast float %293 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %162, i32 %294, i32 %295, i32 %296, i32 %297, i1 true) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %298 = load float, ptr addrspace(3) %165, align 4, !dbg !77
  %299 = load float, ptr addrspace(3) %169, align 4, !dbg !77
  %300 = load float, ptr addrspace(3) %173, align 4, !dbg !77
  %301 = load float, ptr addrspace(3) %177, align 4, !dbg !77
  %302 = add i32 %193, 3073, !dbg !78
  %303 = or disjoint i32 %302, %183, !dbg !79
  %304 = add i32 %193, 3105, !dbg !78
  %305 = or disjoint i32 %304, %183, !dbg !79
  %306 = add i32 %193, 3137, !dbg !78
  %307 = or disjoint i32 %306, %183, !dbg !79
  %308 = add i32 %193, 3169, !dbg !78
  %309 = or disjoint i32 %308, %183, !dbg !79
  %310 = sext i32 %303 to i64, !dbg !80
  %311 = getelementptr bfloat, ptr addrspace(1) %0, i64 %310, !dbg !80
  %312 = sext i32 %305 to i64, !dbg !80
  %313 = getelementptr bfloat, ptr addrspace(1) %0, i64 %312, !dbg !80
  %314 = sext i32 %307 to i64, !dbg !80
  %315 = getelementptr bfloat, ptr addrspace(1) %0, i64 %314, !dbg !80
  %316 = sext i32 %309 to i64, !dbg !80
  %317 = getelementptr bfloat, ptr addrspace(1) %0, i64 %316, !dbg !80
  %318 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %311, i1 %206) #5, !dbg !81
  %319 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %313, i1 %206) #5, !dbg !81
  %320 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %315, i1 %206) #5, !dbg !81
  %321 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %317, i1 %206) #5, !dbg !81
  %322 = tail call float @llvm.nvvm.div.full(float %95, float 1.280000e+02), !dbg !82
  %323 = fadd float %322, 0x3EB0C6F7A0000000, !dbg !83
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i25 = icmp eq i32 %324, 0, !dbg !84
  br i1 %.not.i25, label %327, label %325, !dbg !84

325:                                              ; preds = %__nv_rsqrtf.exit24
  %326 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit27, !dbg !84

327:                                              ; preds = %__nv_rsqrtf.exit24
  %328 = tail call float @llvm.nvvm.rsqrt.approx.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit27, !dbg !84

__nv_rsqrtf.exit27:                               ; preds = %325, %327
  %.0.i26 = phi float [ %326, %325 ], [ %328, %327 ], !dbg !84
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i28 = icmp eq i32 %329, 0, !dbg !84
  br i1 %.not.i28, label %332, label %330, !dbg !84

330:                                              ; preds = %__nv_rsqrtf.exit27
  %331 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit30, !dbg !84

332:                                              ; preds = %__nv_rsqrtf.exit27
  %333 = tail call float @llvm.nvvm.rsqrt.approx.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit30, !dbg !84

__nv_rsqrtf.exit30:                               ; preds = %330, %332
  %.0.i29 = phi float [ %331, %330 ], [ %333, %332 ], !dbg !84
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i31 = icmp eq i32 %334, 0, !dbg !84
  br i1 %.not.i31, label %337, label %335, !dbg !84

335:                                              ; preds = %__nv_rsqrtf.exit30
  %336 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit33, !dbg !84

337:                                              ; preds = %__nv_rsqrtf.exit30
  %338 = tail call float @llvm.nvvm.rsqrt.approx.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit33, !dbg !84

__nv_rsqrtf.exit33:                               ; preds = %335, %337
  %.0.i32 = phi float [ %336, %335 ], [ %338, %337 ], !dbg !84
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i34 = icmp eq i32 %339, 0, !dbg !84
  br i1 %.not.i34, label %342, label %340, !dbg !84

340:                                              ; preds = %__nv_rsqrtf.exit33
  %341 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit36, !dbg !84

342:                                              ; preds = %__nv_rsqrtf.exit33
  %343 = tail call float @llvm.nvvm.rsqrt.approx.f(float %323), !dbg !84
  br label %__nv_rsqrtf.exit36, !dbg !84

__nv_rsqrtf.exit36:                               ; preds = %340, %342
  %.0.i35 = phi float [ %341, %340 ], [ %343, %342 ], !dbg !84
  %344 = bitcast i16 %321 to bfloat, !dbg !81
  %345 = fpext bfloat %344 to float, !dbg !85
  %346 = bitcast i16 %320 to bfloat, !dbg !81
  %347 = fpext bfloat %346 to float, !dbg !85
  %348 = bitcast i16 %319 to bfloat, !dbg !81
  %349 = fpext bfloat %348 to float, !dbg !85
  %350 = bitcast i16 %318 to bfloat, !dbg !81
  %351 = fpext bfloat %350 to float, !dbg !85
  %352 = bitcast i16 %210 to bfloat, !dbg !61
  %353 = fpext bfloat %352 to float, !dbg !86
  %354 = fmul float %239, %353, !dbg !65
  %355 = bitcast i16 %251 to bfloat, !dbg !67
  %356 = fpext bfloat %355 to float, !dbg !87
  %357 = fmul float %354, %356, !dbg !88
  %358 = fsub float 0.000000e+00, %357, !dbg !89
  %359 = bitcast i16 %269 to bfloat, !dbg !72
  %360 = fpext bfloat %359 to float, !dbg !90
  %361 = fmul float %239, %360, !dbg !91
  %362 = bitcast i16 %281 to bfloat, !dbg !74
  %363 = fpext bfloat %362 to float, !dbg !92
  %364 = fmul float %361, %363, !dbg !93
  %365 = select i1 %182, float %358, float %364, !dbg !94
  %366 = fmul float %178, %365, !dbg !95
  %367 = fadd float %366, %301, !dbg !96
  %368 = bitcast i16 %209 to bfloat, !dbg !61
  %369 = fpext bfloat %368 to float, !dbg !86
  %370 = fmul float %239, %369, !dbg !65
  %371 = bitcast i16 %250 to bfloat, !dbg !67
  %372 = fpext bfloat %371 to float, !dbg !87
  %373 = fmul float %370, %372, !dbg !88
  %374 = fsub float 0.000000e+00, %373, !dbg !89
  %375 = bitcast i16 %268 to bfloat, !dbg !72
  %376 = fpext bfloat %375 to float, !dbg !90
  %377 = fmul float %239, %376, !dbg !91
  %378 = bitcast i16 %280 to bfloat, !dbg !74
  %379 = fpext bfloat %378 to float, !dbg !92
  %380 = fmul float %377, %379, !dbg !93
  %381 = select i1 %182, float %374, float %380, !dbg !94
  %382 = fmul float %174, %381, !dbg !95
  %383 = fadd float %382, %300, !dbg !96
  %384 = bitcast i16 %208 to bfloat, !dbg !61
  %385 = fpext bfloat %384 to float, !dbg !86
  %386 = fmul float %239, %385, !dbg !65
  %387 = bitcast i16 %249 to bfloat, !dbg !67
  %388 = fpext bfloat %387 to float, !dbg !87
  %389 = fmul float %386, %388, !dbg !88
  %390 = fsub float 0.000000e+00, %389, !dbg !89
  %391 = bitcast i16 %267 to bfloat, !dbg !72
  %392 = fpext bfloat %391 to float, !dbg !90
  %393 = fmul float %239, %392, !dbg !91
  %394 = bitcast i16 %279 to bfloat, !dbg !74
  %395 = fpext bfloat %394 to float, !dbg !92
  %396 = fmul float %393, %395, !dbg !93
  %397 = select i1 %182, float %390, float %396, !dbg !94
  %398 = fmul float %170, %397, !dbg !95
  %399 = fadd float %398, %299, !dbg !96
  %400 = bitcast i16 %207 to bfloat, !dbg !61
  %401 = fpext bfloat %400 to float, !dbg !86
  %402 = fmul float %239, %401, !dbg !65
  %403 = bitcast i16 %248 to bfloat, !dbg !67
  %404 = fpext bfloat %403 to float, !dbg !87
  %405 = fmul float %402, %404, !dbg !88
  %406 = fsub float 0.000000e+00, %405, !dbg !89
  %407 = bitcast i16 %266 to bfloat, !dbg !72
  %408 = fpext bfloat %407 to float, !dbg !90
  %409 = fmul float %239, %408, !dbg !91
  %410 = bitcast i16 %278 to bfloat, !dbg !74
  %411 = fpext bfloat %410 to float, !dbg !92
  %412 = fmul float %409, %411, !dbg !93
  %413 = select i1 %182, float %406, float %412, !dbg !94
  %414 = fmul float %166, %413, !dbg !95
  %415 = fadd float %414, %298, !dbg !96
  %416 = extractvalue { i32, i32 } %181, 1, !dbg !52
  %417 = bitcast i32 %416 to <2 x bfloat>, !dbg !52
  %418 = extractelement <2 x bfloat> %417, i64 1, !dbg !52
  %419 = fpext bfloat %418 to float, !dbg !97
  %420 = extractelement <2 x bfloat> %417, i64 0, !dbg !52
  %421 = fpext bfloat %420 to float, !dbg !97
  %422 = extractvalue { i32, i32 } %181, 0, !dbg !52
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !52
  %424 = extractelement <2 x bfloat> %423, i64 1, !dbg !52
  %425 = fpext bfloat %424 to float, !dbg !97
  %426 = extractelement <2 x bfloat> %423, i64 0, !dbg !52
  %427 = fpext bfloat %426 to float, !dbg !97
  %428 = extractvalue { i32, i32 } %179, 1, !dbg !50
  %429 = bitcast i32 %428 to <2 x bfloat>, !dbg !50
  %430 = extractelement <2 x bfloat> %429, i64 1, !dbg !50
  %431 = fpext bfloat %430 to float, !dbg !98
  %432 = extractelement <2 x bfloat> %429, i64 0, !dbg !50
  %433 = fpext bfloat %432 to float, !dbg !98
  %434 = extractvalue { i32, i32 } %179, 0, !dbg !50
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !50
  %436 = extractelement <2 x bfloat> %435, i64 1, !dbg !50
  %437 = fpext bfloat %436 to float, !dbg !98
  %438 = extractelement <2 x bfloat> %435, i64 0, !dbg !50
  %439 = fpext bfloat %438 to float, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %440 = bitcast float %.0.i26 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %440, i1 true) #5, !dbg !99
  %441 = bitcast float %.0.i29 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %441, i1 true) #5, !dbg !99
  %442 = bitcast float %.0.i32 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %442, i1 true) #5, !dbg !99
  %443 = bitcast float %.0.i35 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %443, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %444 = load float, ptr addrspace(3) %238, align 8, !dbg !99
  %445 = fmul float %444, %351, !dbg !99
  %446 = fmul float %444, %349, !dbg !99
  %447 = fmul float %444, %347, !dbg !99
  %448 = fmul float %444, %345, !dbg !99
  %449 = getelementptr bfloat, ptr addrspace(1) %4, i64 %240, !dbg !100
  %450 = getelementptr bfloat, ptr addrspace(1) %4, i64 %242, !dbg !100
  %451 = getelementptr bfloat, ptr addrspace(1) %4, i64 %244, !dbg !100
  %452 = getelementptr bfloat, ptr addrspace(1) %4, i64 %246, !dbg !100
  %453 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %449, i1 %206) #5, !dbg !101
  %454 = bitcast i16 %453 to bfloat, !dbg !101
  %455 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %450, i1 %206) #5, !dbg !101
  %456 = bitcast i16 %455 to bfloat, !dbg !101
  %457 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %451, i1 %206) #5, !dbg !101
  %458 = bitcast i16 %457 to bfloat, !dbg !101
  %459 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %452, i1 %206) #5, !dbg !101
  %460 = bitcast i16 %459 to bfloat, !dbg !101
  %461 = fpext bfloat %454 to float, !dbg !102
  %462 = fpext bfloat %456 to float, !dbg !102
  %463 = fpext bfloat %458 to float, !dbg !102
  %464 = fpext bfloat %460 to float, !dbg !102
  %465 = fmul float %445, %461, !dbg !103
  %466 = fmul float %446, %462, !dbg !103
  %467 = fmul float %447, %463, !dbg !103
  %468 = fmul float %448, %464, !dbg !103
  %469 = fsub float 0.000000e+00, %465, !dbg !104
  %470 = fsub float 0.000000e+00, %466, !dbg !104
  %471 = fsub float 0.000000e+00, %467, !dbg !104
  %472 = fsub float 0.000000e+00, %468, !dbg !104
  %473 = add i32 %193, 3072, !dbg !105
  %474 = or disjoint i32 %473, %183, !dbg !106
  %475 = add i32 %193, 3104, !dbg !105
  %476 = or disjoint i32 %475, %183, !dbg !106
  %477 = add i32 %193, 3136, !dbg !105
  %478 = or disjoint i32 %477, %183, !dbg !106
  %479 = add i32 %193, 3168, !dbg !105
  %480 = or disjoint i32 %479, %183, !dbg !106
  %481 = sext i32 %474 to i64, !dbg !107
  %482 = getelementptr bfloat, ptr addrspace(1) %0, i64 %481, !dbg !107
  %483 = sext i32 %476 to i64, !dbg !107
  %484 = getelementptr bfloat, ptr addrspace(1) %0, i64 %483, !dbg !107
  %485 = sext i32 %478 to i64, !dbg !107
  %486 = getelementptr bfloat, ptr addrspace(1) %0, i64 %485, !dbg !107
  %487 = sext i32 %480 to i64, !dbg !107
  %488 = getelementptr bfloat, ptr addrspace(1) %0, i64 %487, !dbg !107
  %489 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %482, i1 %265) #5, !dbg !108
  %490 = bitcast i16 %489 to bfloat, !dbg !108
  %491 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %484, i1 %265) #5, !dbg !108
  %492 = bitcast i16 %491 to bfloat, !dbg !108
  %493 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %486, i1 %265) #5, !dbg !108
  %494 = bitcast i16 %493 to bfloat, !dbg !108
  %495 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %488, i1 %265) #5, !dbg !108
  %496 = bitcast i16 %495 to bfloat, !dbg !108
  %497 = fpext bfloat %490 to float, !dbg !109
  %498 = fpext bfloat %492 to float, !dbg !109
  %499 = fpext bfloat %494 to float, !dbg !109
  %500 = fpext bfloat %496 to float, !dbg !109
  %501 = fmul float %444, %497, !dbg !110
  %502 = fmul float %444, %498, !dbg !110
  %503 = fmul float %444, %499, !dbg !110
  %504 = fmul float %444, %500, !dbg !110
  %505 = getelementptr bfloat, ptr addrspace(1) %4, i64 %270, !dbg !111
  %506 = getelementptr bfloat, ptr addrspace(1) %4, i64 %272, !dbg !111
  %507 = getelementptr bfloat, ptr addrspace(1) %4, i64 %274, !dbg !111
  %508 = getelementptr bfloat, ptr addrspace(1) %4, i64 %276, !dbg !111
  %509 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %505, i1 %265) #5, !dbg !112
  %510 = bitcast i16 %509 to bfloat, !dbg !112
  %511 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %506, i1 %265) #5, !dbg !112
  %512 = bitcast i16 %511 to bfloat, !dbg !112
  %513 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %507, i1 %265) #5, !dbg !112
  %514 = bitcast i16 %513 to bfloat, !dbg !112
  %515 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %508, i1 %265) #5, !dbg !112
  %516 = bitcast i16 %515 to bfloat, !dbg !112
  %517 = fpext bfloat %510 to float, !dbg !113
  %518 = fpext bfloat %512 to float, !dbg !113
  %519 = fpext bfloat %514 to float, !dbg !113
  %520 = fpext bfloat %516 to float, !dbg !113
  %521 = fmul float %501, %517, !dbg !114
  %522 = fmul float %502, %518, !dbg !114
  %523 = fmul float %503, %519, !dbg !114
  %524 = fmul float %504, %520, !dbg !114
  %525 = select i1 %182, float %469, float %521, !dbg !94
  %526 = select i1 %182, float %470, float %522, !dbg !94
  %527 = select i1 %182, float %471, float %523, !dbg !94
  %528 = select i1 %182, float %472, float %524, !dbg !94
  %529 = fmul float %.0.i35, %439, !dbg !115
  %530 = fmul float %.0.i35, %437, !dbg !115
  %531 = fmul float %.0.i35, %433, !dbg !115
  %532 = fmul float %.0.i35, %431, !dbg !115
  %533 = fmul float %529, %427, !dbg !116
  %534 = fmul float %530, %425, !dbg !116
  %535 = fmul float %531, %421, !dbg !116
  %536 = fmul float %532, %419, !dbg !116
  %537 = fmul float %533, %144, !dbg !117
  %538 = fmul float %534, %145, !dbg !117
  %539 = fmul float %535, %146, !dbg !117
  %540 = fmul float %536, %147, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %541 = bitcast float %537 to i32, !dbg !117
  %542 = bitcast float %538 to i32, !dbg !117
  %543 = bitcast float %539 to i32, !dbg !117
  %544 = bitcast float %540 to i32, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %162, i32 %541, i32 %542, i32 %543, i32 %544, i1 true) #5, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %545 = load float, ptr addrspace(3) %165, align 4, !dbg !117
  %546 = load float, ptr addrspace(3) %169, align 4, !dbg !117
  %547 = load float, ptr addrspace(3) %173, align 4, !dbg !117
  %548 = load float, ptr addrspace(3) %177, align 4, !dbg !117
  %549 = fmul float %166, %525, !dbg !118
  %550 = fmul float %170, %526, !dbg !118
  %551 = fmul float %174, %527, !dbg !118
  %552 = fmul float %178, %528, !dbg !118
  %553 = fadd float %549, %545, !dbg !119
  %554 = fadd float %550, %546, !dbg !119
  %555 = fadd float %551, %547, !dbg !119
  %556 = fadd float %552, %548, !dbg !119
  %557 = shl i32 %17, 7, !dbg !120
  %558 = or disjoint i32 %557, %22, !dbg !121
  %559 = sext i32 %558 to i64, !dbg !122
  %560 = getelementptr bfloat, ptr addrspace(1) %5, i64 %559, !dbg !122
  %561 = fptrunc float %415 to bfloat, !dbg !123
  %562 = fptrunc float %399 to bfloat, !dbg !123
  %563 = fptrunc float %383 to bfloat, !dbg !123
  %564 = fptrunc float %367 to bfloat, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %565 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %164, !dbg !123
  %566 = bitcast bfloat %561 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %565, <1 x i16> %566, i1 true) #5, !dbg !123
  %567 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %168, !dbg !123
  %568 = bitcast bfloat %562 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %567, <1 x i16> %568, i1 true) #5, !dbg !123
  %569 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %172, !dbg !123
  %570 = bitcast bfloat %563 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %569, <1 x i16> %570, i1 true) #5, !dbg !123
  %571 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %176, !dbg !123
  %572 = bitcast bfloat %564 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %571, <1 x i16> %572, i1 true) #5, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %573 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %161, !dbg !123
  %.uncasted.extract = load i32, ptr addrspace(3) %573, align 8, !dbg !123
  %574 = getelementptr inbounds nuw i8, ptr addrspace(3) %573, i32 4, !dbg !123
  %.uncasted.extract8 = load i32, ptr addrspace(3) %574, align 4, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract8, ptr addrspace(1) %560, i1 %19) #5, !dbg !123
  %575 = getelementptr bfloat, ptr addrspace(1) %6, i64 %559, !dbg !124
  %576 = fptrunc float %553 to bfloat, !dbg !125
  %577 = fptrunc float %554 to bfloat, !dbg !125
  %578 = fptrunc float %555 to bfloat, !dbg !125
  %579 = fptrunc float %556 to bfloat, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %580 = bitcast bfloat %576 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %565, <1 x i16> %580, i1 true) #5, !dbg !125
  %581 = bitcast bfloat %577 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %567, <1 x i16> %581, i1 true) #5, !dbg !125
  %582 = bitcast bfloat %578 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %569, <1 x i16> %582, i1 true) #5, !dbg !125
  %583 = bitcast bfloat %579 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %571, <1 x i16> %583, i1 true) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %.uncasted.extract13 = load i32, ptr addrspace(3) %573, align 8, !dbg !125
  %.uncasted.extract15 = load i32, ptr addrspace(3) %574, align 4, !dbg !125
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract13, i32 %.uncasted.extract15, ptr addrspace(1) %575, i1 %19) #5, !dbg !125
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4vjqhad7sc635wan56m2hfgerxquvjcsylutimuij7rrwxhwfl.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", linkageName: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 19, scope: !6)
!17 = !DILocation(line: 39, column: 41, scope: !6)
!18 = !DILocation(line: 39, column: 52, scope: !6)
!19 = !DILocation(line: 39, column: 48, scope: !6)
!20 = !DILocation(line: 39, column: 62, scope: !6)
!21 = !DILocation(line: 39, column: 57, scope: !6)
!22 = !DILocation(line: 39, column: 34, scope: !6)
!23 = !DILocation(line: 39, column: 67, scope: !6)
!24 = !DILocation(line: 39, column: 128, scope: !6)
!25 = !DILocation(line: 40, column: 41, scope: !6)
!26 = !DILocation(line: 40, column: 50, scope: !6)
!27 = !DILocation(line: 40, column: 34, scope: !6)
!28 = !DILocation(line: 40, column: 60, scope: !6)
!29 = !DILocation(line: 40, column: 121, scope: !6)
!30 = !DILocation(line: 42, column: 22, scope: !6)
!31 = !DILocation(line: 47, column: 22, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 51, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !39)
!39 = !DILocation(line: 52, column: 27, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !39)
!41 = !DILocation(line: 60, column: 35, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 95, scope: !6)
!44 = !DILocation(line: 61, column: 46, scope: !6)
!45 = !DILocation(line: 61, column: 42, scope: !6)
!46 = !DILocation(line: 61, column: 35, scope: !6)
!47 = !DILocation(line: 61, column: 51, scope: !6)
!48 = !DILocation(line: 62, column: 35, scope: !6)
!49 = !DILocation(line: 62, column: 51, scope: !6)
!50 = !DILocation(line: 63, column: 68, scope: !6)
!51 = !DILocation(line: 64, column: 35, scope: !6)
!52 = !DILocation(line: 64, column: 42, scope: !6)
!53 = !DILocation(line: 69, column: 24, scope: !6)
!54 = !DILocation(line: 70, column: 42, scope: !6)
!55 = !DILocation(line: 70, column: 50, scope: !6)
!56 = !DILocation(line: 70, column: 39, scope: !6)
!57 = !DILocation(line: 70, column: 55, scope: !6)
!58 = !DILocation(line: 70, column: 64, scope: !6)
!59 = !DILocation(line: 70, column: 35, scope: !6)
!60 = !DILocation(line: 70, column: 92, scope: !6)
!61 = !DILocation(line: 70, column: 74, scope: !6)
!62 = !DILocation(line: 73, column: 25, scope: !6)
!63 = !DILocation(line: 75, column: 24, scope: !6)
!64 = !DILocation(line: 76, column: 32, scope: !6)
!65 = !DILocation(line: 77, column: 24, scope: !6)
!66 = !DILocation(line: 79, column: 35, scope: !6)
!67 = !DILocation(line: 79, column: 92, scope: !6)
!68 = !DILocation(line: 84, column: 25, scope: !6)
!69 = !DILocation(line: 87, column: 60, scope: !6)
!70 = !DILocation(line: 87, column: 35, scope: !6)
!71 = !DILocation(line: 87, column: 88, scope: !6)
!72 = !DILocation(line: 87, column: 70, scope: !6)
!73 = !DILocation(line: 96, column: 35, scope: !6)
!74 = !DILocation(line: 96, column: 88, scope: !6)
!75 = !DILocation(line: 108, column: 24, scope: !6)
!76 = !DILocation(line: 110, column: 24, scope: !6)
!77 = !DILocation(line: 112, column: 24, scope: !6)
!78 = !DILocation(line: 116, column: 58, scope: !6)
!79 = !DILocation(line: 116, column: 67, scope: !6)
!80 = !DILocation(line: 116, column: 35, scope: !6)
!81 = !DILocation(line: 116, column: 77, scope: !6)
!82 = !DILocation(line: 118, column: 24, scope: !6)
!83 = !DILocation(line: 119, column: 24, scope: !6)
!84 = !DILocation(line: 120, column: 32, scope: !6)
!85 = !DILocation(line: 116, column: 146, scope: !6)
!86 = !DILocation(line: 70, column: 143, scope: !6)
!87 = !DILocation(line: 79, column: 161, scope: !6)
!88 = !DILocation(line: 80, column: 24, scope: !6)
!89 = !DILocation(line: 81, column: 17, scope: !6)
!90 = !DILocation(line: 87, column: 139, scope: !6)
!91 = !DILocation(line: 94, column: 24, scope: !6)
!92 = !DILocation(line: 96, column: 157, scope: !6)
!93 = !DILocation(line: 97, column: 24, scope: !6)
!94 = !DILocation(line: 0, scope: !6)
!95 = !DILocation(line: 113, column: 24, scope: !6)
!96 = !DILocation(line: 114, column: 24, scope: !6)
!97 = !DILocation(line: 64, column: 95, scope: !6)
!98 = !DILocation(line: 63, column: 130, scope: !6)
!99 = !DILocation(line: 121, column: 24, scope: !6)
!100 = !DILocation(line: 123, column: 35, scope: !6)
!101 = !DILocation(line: 123, column: 92, scope: !6)
!102 = !DILocation(line: 123, column: 161, scope: !6)
!103 = !DILocation(line: 124, column: 24, scope: !6)
!104 = !DILocation(line: 125, column: 17, scope: !6)
!105 = !DILocation(line: 128, column: 58, scope: !6)
!106 = !DILocation(line: 128, column: 67, scope: !6)
!107 = !DILocation(line: 128, column: 35, scope: !6)
!108 = !DILocation(line: 128, column: 77, scope: !6)
!109 = !DILocation(line: 128, column: 146, scope: !6)
!110 = !DILocation(line: 133, column: 24, scope: !6)
!111 = !DILocation(line: 135, column: 35, scope: !6)
!112 = !DILocation(line: 135, column: 88, scope: !6)
!113 = !DILocation(line: 135, column: 157, scope: !6)
!114 = !DILocation(line: 136, column: 24, scope: !6)
!115 = !DILocation(line: 145, column: 24, scope: !6)
!116 = !DILocation(line: 147, column: 25, scope: !6)
!117 = !DILocation(line: 149, column: 26, scope: !6)
!118 = !DILocation(line: 150, column: 25, scope: !6)
!119 = !DILocation(line: 151, column: 26, scope: !6)
!120 = !DILocation(line: 153, column: 40, scope: !6)
!121 = !DILocation(line: 153, column: 36, scope: !6)
!122 = !DILocation(line: 153, column: 29, scope: !6)
!123 = !DILocation(line: 153, column: 52, scope: !6)
!124 = !DILocation(line: 154, column: 29, scope: !6)
!125 = !DILocation(line: 154, column: 53, scope: !6)
!126 = !DILocation(line: 53, column: 4, scope: !6)
