; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [83 x i8] c"/tmp/torchinductor_root/3w/c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp11 < 77\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/3w/c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 49408\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = lshr i32 %12, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = and i32 %12, 31, !dbg !13
  %17 = shl i32 %12, 3, !dbg !13
  %18 = and i32 %17, 504, !dbg !13
  %19 = shl i32 %11, 3, !dbg !14
  %20 = or disjoint i32 %15, %19, !dbg !15
  %21 = or disjoint i32 %19, 1, !dbg !15
  %22 = or disjoint i32 %19, 2, !dbg !15
  %23 = or disjoint i32 %19, 3, !dbg !15
  %24 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !15
  %25 = shufflevector <4 x i32> %24, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %26 = or disjoint <4 x i32> %25, <i32 4, i32 5, i32 6, i32 7>, !dbg !15
  %27 = icmp slt i32 %20, 77, !dbg !16
  %28 = insertelement <8 x i32> poison, i32 %19, i64 0, !dbg !16
  %29 = insertelement <8 x i32> %28, i32 %21, i64 1, !dbg !16
  %30 = insertelement <8 x i32> %29, i32 %22, i64 2, !dbg !16
  %31 = insertelement <8 x i32> %30, i32 %23, i64 3, !dbg !16
  %32 = shufflevector <4 x i32> %26, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %33 = shufflevector <8 x i32> %31, <8 x i32> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !16
  %34 = icmp slt <8 x i32> %33, splat (i32 77), !dbg !16
  %35 = sext i32 %20 to i64, !dbg !17
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = sext i32 %19 to i64, !dbg !17
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = sext i32 %21 to i64, !dbg !17
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = sext i32 %22 to i64, !dbg !17
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = sext i32 %23 to i64, !dbg !17
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !17
  %45 = extractelement <4 x i32> %26, i64 0, !dbg !17
  %46 = sext i32 %45 to i64, !dbg !17
  %47 = getelementptr i64, ptr addrspace(1) %0, i64 %46, !dbg !17
  %48 = extractelement <4 x i32> %26, i64 1, !dbg !17
  %49 = sext i32 %48 to i64, !dbg !17
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49, !dbg !17
  %51 = extractelement <4 x i32> %26, i64 2, !dbg !17
  %52 = sext i32 %51 to i64, !dbg !17
  %53 = getelementptr i64, ptr addrspace(1) %0, i64 %52, !dbg !17
  %54 = extractelement <4 x i32> %26, i64 3, !dbg !17
  %55 = sext i32 %54 to i64, !dbg !17
  %56 = getelementptr i64, ptr addrspace(1) %0, i64 %55, !dbg !17
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %27) #6, !dbg !18
  %65 = extractelement <8 x i1> %34, i64 0, !dbg !19
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %65) #6, !dbg !18
  %67 = extractelement <8 x i1> %34, i64 1, !dbg !19
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %67) #6, !dbg !18
  %69 = extractelement <8 x i1> %34, i64 2, !dbg !19
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %69) #6, !dbg !18
  %71 = extractelement <8 x i1> %34, i64 3, !dbg !19
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %71) #6, !dbg !18
  %73 = extractelement <8 x i1> %34, i64 4, !dbg !19
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %73) #6, !dbg !18
  %75 = extractelement <8 x i1> %34, i64 5, !dbg !19
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %75) #6, !dbg !18
  %77 = extractelement <8 x i1> %34, i64 6, !dbg !19
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %77) #6, !dbg !18
  %79 = extractelement <8 x i1> %34, i64 7, !dbg !19
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %79) #6, !dbg !18
  %81 = getelementptr i64, ptr addrspace(1) %2, i64 %35, !dbg !20
  %82 = getelementptr i64, ptr addrspace(1) %2, i64 %37, !dbg !20
  %83 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !20
  %84 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !20
  %85 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !20
  %86 = getelementptr i64, ptr addrspace(1) %2, i64 %46, !dbg !20
  %87 = getelementptr i64, ptr addrspace(1) %2, i64 %49, !dbg !20
  %88 = getelementptr i64, ptr addrspace(1) %2, i64 %52, !dbg !20
  %89 = getelementptr i64, ptr addrspace(1) %2, i64 %55, !dbg !20
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %27) #6, !dbg !19
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %65) #6, !dbg !19
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 %67) #6, !dbg !19
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 %69) #6, !dbg !19
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %71) #6, !dbg !19
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %73) #6, !dbg !19
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %87, i1 %75) #6, !dbg !19
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %77) #6, !dbg !19
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %79) #6, !dbg !19
  %106 = add i64 %64, 49408, !dbg !21
  %107 = insertelement <8 x i64> poison, i64 %66, i64 0, !dbg !21
  %108 = insertelement <8 x i64> %107, i64 %68, i64 1, !dbg !21
  %109 = insertelement <8 x i64> %108, i64 %70, i64 2, !dbg !21
  %110 = insertelement <8 x i64> %109, i64 %72, i64 3, !dbg !21
  %111 = insertelement <8 x i64> %110, i64 %74, i64 4, !dbg !21
  %112 = insertelement <8 x i64> %111, i64 %76, i64 5, !dbg !21
  %113 = insertelement <8 x i64> %112, i64 %78, i64 6, !dbg !21
  %114 = insertelement <8 x i64> %113, i64 %80, i64 7, !dbg !21
  %115 = add <8 x i64> %114, splat (i64 49408), !dbg !21
  %116 = icmp slt i64 %64, 0, !dbg !22
  %117 = icmp slt <8 x i64> %114, zeroinitializer, !dbg !22
  %118 = select i1 %116, i64 %106, i64 %64, !dbg !23
  %119 = select <8 x i1> %117, <8 x i64> %115, <8 x i64> %114, !dbg !23
  %120 = xor <8 x i1> %34, splat (i1 true), !dbg !24
  %121 = add i64 %97, 77, !dbg !25
  %122 = icmp slt i64 %97, 0, !dbg !26
  %123 = select i1 %122, i64 %121, i64 %97, !dbg !27
  %124 = insertelement <8 x i64> poison, i64 %105, i64 0, !dbg !25
  %125 = insertelement <8 x i64> %124, i64 %104, i64 1, !dbg !25
  %126 = insertelement <8 x i64> %125, i64 %103, i64 2, !dbg !25
  %127 = insertelement <8 x i64> %126, i64 %102, i64 3, !dbg !25
  %128 = insertelement <8 x i64> %127, i64 %101, i64 4, !dbg !25
  %129 = insertelement <8 x i64> %128, i64 %100, i64 5, !dbg !25
  %130 = insertelement <8 x i64> %129, i64 %99, i64 6, !dbg !25
  %131 = insertelement <8 x i64> %130, i64 %98, i64 7, !dbg !25
  %132 = add <8 x i64> %131, splat (i64 77), !dbg !25
  %133 = icmp slt <8 x i64> %131, zeroinitializer, !dbg !26
  %134 = select <8 x i1> %133, <8 x i64> %132, <8 x i64> %131, !dbg !27
  %135 = icmp ult <8 x i64> %134, splat (i64 77), !dbg !28
  %shift = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %136 = or <8 x i1> %shift, %120, !dbg !29
  %shift222 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %137 = or <8 x i1> %shift222, %120, !dbg !29
  %shift225 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %138 = or <8 x i1> %135, %shift225, !dbg !29
  %shift226 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %139 = or <8 x i1> %135, %shift226, !dbg !29
  %shift227 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %140 = or <8 x i1> %135, %shift227, !dbg !29
  %141 = icmp ugt <8 x i64> %119, splat (i64 49407)
  %142 = and <8 x i1> %141, %34
  %143 = bitcast <8 x i1> %142 to i8
  %144 = icmp eq i8 %143, 0
  %145 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %146 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %shift228 = or <8 x i1> %145, %146, !dbg !30
  %147 = and <8 x i1> %137, %shift228, !dbg !30
  %148 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %149 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %shift229 = or <8 x i1> %148, %149, !dbg !30
  %150 = and <8 x i1> %147, %shift229, !dbg !30
  %151 = and <8 x i1> %150, %138, !dbg !30
  %152 = shufflevector <8 x i1> %151, <8 x i1> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %153 = shufflevector <8 x i1> %139, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %shift231 = and <8 x i1> %152, %153, !dbg !30
  %154 = and <8 x i1> %shift231, %140, !dbg !30
  %.idx = mul i64 %118, 1536
  %155 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx
  %156 = shufflevector <8 x i1> %135, <8 x i1> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %157 = shufflevector <8 x i1> %120, <8 x i1> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %shift232 = or <8 x i1> %156, %157
  %158 = and <8 x i1> %shift232, %154
  %159 = and <8 x i1> %158, %136
  %.demorgan44.reass = extractelement <8 x i1> %159, i64 0
  %.idx174 = mul i64 %123, 1536
  %160 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx174
  br i1 %144, label %.split.preheader, label %192, !dbg !31

.split.preheader:                                 ; preds = %10
  %161 = zext nneg i32 %18 to i64, !dbg !32
  br label %.split, !dbg !32

.split:                                           ; preds = %.split.preheader, %._crit_edge
  %162 = phi i1 [ true, %.split.preheader ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ 512, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %.split.preheader ], [ %342, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %.split.preheader ], [ %343, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %.split.preheader ], [ %344, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %.split.preheader ], [ %345, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %.split.preheader ], [ %346, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %.split.preheader ], [ %347, %._crit_edge ]
  %169 = phi float [ 0.000000e+00, %.split.preheader ], [ %348, %._crit_edge ]
  %170 = phi float [ 0.000000e+00, %.split.preheader ], [ %349, %._crit_edge ]
  %171 = phi float [ 0.000000e+00, %.split.preheader ], [ %334, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %.split.preheader ], [ %335, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %.split.preheader ], [ %336, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %.split.preheader ], [ %337, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %.split.preheader ], [ %338, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %.split.preheader ], [ %339, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %.split.preheader ], [ %340, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %.split.preheader ], [ %341, %._crit_edge ]
  %179 = phi float [ 0.000000e+00, %.split.preheader ], [ %326, %._crit_edge ]
  %180 = phi float [ 0.000000e+00, %.split.preheader ], [ %327, %._crit_edge ]
  %181 = phi float [ 0.000000e+00, %.split.preheader ], [ %328, %._crit_edge ]
  %182 = phi float [ 0.000000e+00, %.split.preheader ], [ %329, %._crit_edge ]
  %183 = phi float [ 0.000000e+00, %.split.preheader ], [ %330, %._crit_edge ]
  %184 = phi float [ 0.000000e+00, %.split.preheader ], [ %331, %._crit_edge ]
  %185 = phi float [ 0.000000e+00, %.split.preheader ], [ %332, %._crit_edge ]
  %186 = phi float [ 0.000000e+00, %.split.preheader ], [ %333, %._crit_edge ]
  %187 = or disjoint i64 %indvars.iv, %161, !dbg !33
  %188 = icmp samesign ult i64 %187, 768, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %189 = getelementptr bfloat, ptr addrspace(1) %155, i64 %187, !dbg !35
  %190 = and i1 %27, %188, !dbg !36
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %189, i1 %190) #6, !dbg !37
  br i1 %.demorgan44.reass, label %194, label %193, !dbg !32

192:                                              ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

193:                                              ; preds = %.split
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 50, ptr nonnull @assertFunc_1, i64 1), !dbg !32
  unreachable, !dbg !32

194:                                              ; preds = %.split
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !37
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !37
  %197 = extractelement <2 x bfloat> %196, i64 1, !dbg !37
  %198 = fpext bfloat %197 to float, !dbg !38
  %199 = extractelement <2 x bfloat> %196, i64 0, !dbg !37
  %200 = fpext bfloat %199 to float, !dbg !38
  %201 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !37
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !37
  %203 = extractelement <2 x bfloat> %202, i64 1, !dbg !37
  %204 = fpext bfloat %203 to float, !dbg !38
  %205 = extractelement <2 x bfloat> %202, i64 0, !dbg !37
  %206 = fpext bfloat %205 to float, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !37
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !37
  %209 = extractelement <2 x bfloat> %208, i64 1, !dbg !37
  %210 = fpext bfloat %209 to float, !dbg !38
  %211 = extractelement <2 x bfloat> %208, i64 0, !dbg !37
  %212 = fpext bfloat %211 to float, !dbg !38
  %213 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !37
  %214 = bitcast i32 %213 to <2 x bfloat>, !dbg !37
  %215 = extractelement <2 x bfloat> %214, i64 1, !dbg !37
  %216 = fpext bfloat %215 to float, !dbg !38
  %217 = extractelement <2 x bfloat> %214, i64 0, !dbg !37
  %218 = fpext bfloat %217 to float, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %219 = getelementptr bfloat, ptr addrspace(1) %160, i64 %187, !dbg !39
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %219, i1 %190) #6, !dbg !40
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !40
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !40
  %223 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !40
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !40
  %225 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !40
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !40
  %227 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !40
  %228 = bitcast i32 %227 to <2 x bfloat>, !dbg !40
  %229 = extractelement <2 x bfloat> %222, i64 0, !dbg !40
  %230 = extractelement <2 x bfloat> %222, i64 1, !dbg !40
  %231 = extractelement <2 x bfloat> %224, i64 0, !dbg !40
  %232 = extractelement <2 x bfloat> %224, i64 1, !dbg !40
  %233 = extractelement <2 x bfloat> %226, i64 0, !dbg !40
  %234 = extractelement <2 x bfloat> %226, i64 1, !dbg !40
  %235 = extractelement <2 x bfloat> %228, i64 0, !dbg !40
  %236 = extractelement <2 x bfloat> %228, i64 1, !dbg !40
  %237 = fpext bfloat %229 to float, !dbg !41
  %238 = fpext bfloat %230 to float, !dbg !41
  %239 = fpext bfloat %231 to float, !dbg !41
  %240 = fpext bfloat %232 to float, !dbg !41
  %241 = fpext bfloat %233 to float, !dbg !41
  %242 = fpext bfloat %234 to float, !dbg !41
  %243 = fpext bfloat %235 to float, !dbg !41
  %244 = fpext bfloat %236 to float, !dbg !41
  %245 = fadd float %218, %237, !dbg !42
  %246 = fadd float %216, %238, !dbg !42
  %247 = fadd float %212, %239, !dbg !42
  %248 = fadd float %210, %240, !dbg !42
  %249 = fadd float %206, %241, !dbg !42
  %250 = fadd float %204, %242, !dbg !42
  %251 = fadd float %200, %243, !dbg !42
  %252 = fadd float %198, %244, !dbg !42
  br i1 %162, label %._crit_edge, label %253, !dbg !43

253:                                              ; preds = %194
  %254 = fsub float %245, %179, !dbg !47
  %255 = fsub float %246, %180, !dbg !47
  %256 = fsub float %247, %181, !dbg !47
  %257 = fsub float %248, %182, !dbg !47
  %258 = fsub float %249, %183, !dbg !47
  %259 = fsub float %250, %184, !dbg !47
  %260 = fsub float %251, %185, !dbg !47
  %261 = fsub float %252, %186, !dbg !47
  %262 = fadd float %163, 1.000000e+00, !dbg !48
  %263 = fadd float %164, 1.000000e+00, !dbg !48
  %264 = fadd float %165, 1.000000e+00, !dbg !48
  %265 = fadd float %166, 1.000000e+00, !dbg !48
  %266 = fadd float %167, 1.000000e+00, !dbg !48
  %267 = fadd float %168, 1.000000e+00, !dbg !48
  %268 = fadd float %169, 1.000000e+00, !dbg !48
  %269 = fadd float %170, 1.000000e+00, !dbg !48
  %270 = tail call float @llvm.nvvm.div.full(float %254, float %262), !dbg !49
  %271 = tail call float @llvm.nvvm.div.full(float %255, float %263), !dbg !49
  %272 = tail call float @llvm.nvvm.div.full(float %256, float %264), !dbg !49
  %273 = tail call float @llvm.nvvm.div.full(float %257, float %265), !dbg !49
  %274 = tail call float @llvm.nvvm.div.full(float %258, float %266), !dbg !49
  %275 = tail call float @llvm.nvvm.div.full(float %259, float %267), !dbg !49
  %276 = tail call float @llvm.nvvm.div.full(float %260, float %268), !dbg !49
  %277 = tail call float @llvm.nvvm.div.full(float %261, float %269), !dbg !49
  %278 = fadd float %179, %270, !dbg !50
  %279 = fadd float %180, %271, !dbg !50
  %280 = fadd float %181, %272, !dbg !50
  %281 = fadd float %182, %273, !dbg !50
  %282 = fadd float %183, %274, !dbg !50
  %283 = fadd float %184, %275, !dbg !50
  %284 = fadd float %185, %276, !dbg !50
  %285 = fadd float %186, %277, !dbg !50
  %286 = fsub float %245, %278, !dbg !51
  %287 = fsub float %246, %279, !dbg !51
  %288 = fsub float %247, %280, !dbg !51
  %289 = fsub float %248, %281, !dbg !51
  %290 = fsub float %249, %282, !dbg !51
  %291 = fsub float %250, %283, !dbg !51
  %292 = fsub float %251, %284, !dbg !51
  %293 = fsub float %252, %285, !dbg !51
  %294 = fmul float %254, %286, !dbg !52
  %295 = fmul float %255, %287, !dbg !52
  %296 = fmul float %256, %288, !dbg !52
  %297 = fmul float %257, %289, !dbg !52
  %298 = fmul float %258, %290, !dbg !52
  %299 = fmul float %259, %291, !dbg !52
  %300 = fmul float %260, %292, !dbg !52
  %301 = fmul float %261, %293, !dbg !52
  %302 = fadd float %171, %294, !dbg !53
  %303 = fadd float %172, %295, !dbg !53
  %304 = fadd float %173, %296, !dbg !53
  %305 = fadd float %174, %297, !dbg !53
  %306 = fadd float %175, %298, !dbg !53
  %307 = fadd float %176, %299, !dbg !53
  %308 = fadd float %177, %300, !dbg !53
  %309 = fadd float %178, %301, !dbg !53
  br label %._crit_edge, !dbg !43

._crit_edge:                                      ; preds = %194, %253
  %310 = phi float [ %302, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %311 = phi float [ %303, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %312 = phi float [ %304, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %313 = phi float [ %305, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %314 = phi float [ %306, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %315 = phi float [ %307, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %316 = phi float [ %308, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %317 = phi float [ %309, %253 ], [ 0.000000e+00, %194 ], !dbg !46
  %.pn59 = phi float [ %278, %253 ], [ %245, %194 ]
  %.pn57 = phi float [ %279, %253 ], [ %246, %194 ]
  %.pn55 = phi float [ %280, %253 ], [ %247, %194 ]
  %.pn53 = phi float [ %281, %253 ], [ %248, %194 ]
  %.pn51 = phi float [ %282, %253 ], [ %249, %194 ]
  %.pn49 = phi float [ %283, %253 ], [ %250, %194 ]
  %.pn47 = phi float [ %284, %253 ], [ %251, %194 ]
  %.pn45 = phi float [ %285, %253 ], [ %252, %194 ]
  %318 = phi float [ %262, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %319 = phi float [ %263, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %320 = phi float [ %264, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %321 = phi float [ %265, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %322 = phi float [ %266, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %323 = phi float [ %267, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %324 = phi float [ %268, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %325 = phi float [ %269, %253 ], [ 1.000000e+00, %194 ], !dbg !46
  %326 = select i1 %190, float %.pn59, float %179, !dbg !54
  %327 = select i1 %190, float %.pn57, float %180, !dbg !54
  %328 = select i1 %190, float %.pn55, float %181, !dbg !54
  %329 = select i1 %190, float %.pn53, float %182, !dbg !54
  %330 = select i1 %190, float %.pn51, float %183, !dbg !54
  %331 = select i1 %190, float %.pn49, float %184, !dbg !54
  %332 = select i1 %190, float %.pn47, float %185, !dbg !54
  %333 = select i1 %190, float %.pn45, float %186, !dbg !54
  %334 = select i1 %190, float %310, float %171, !dbg !55
  %335 = select i1 %190, float %311, float %172, !dbg !55
  %336 = select i1 %190, float %312, float %173, !dbg !55
  %337 = select i1 %190, float %313, float %174, !dbg !55
  %338 = select i1 %190, float %314, float %175, !dbg !55
  %339 = select i1 %190, float %315, float %176, !dbg !55
  %340 = select i1 %190, float %316, float %177, !dbg !55
  %341 = select i1 %190, float %317, float %178, !dbg !55
  %342 = select i1 %190, float %318, float %163, !dbg !56
  %343 = select i1 %190, float %319, float %164, !dbg !56
  %344 = select i1 %190, float %320, float %165, !dbg !56
  %345 = select i1 %190, float %321, float %166, !dbg !56
  %346 = select i1 %190, float %322, float %167, !dbg !56
  %347 = select i1 %190, float %323, float %168, !dbg !56
  %348 = select i1 %190, float %324, float %169, !dbg !56
  %349 = select i1 %190, float %325, float %170, !dbg !56
  br i1 %162, label %.split, label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %350 = fsub float %327, %326, !dbg !57
  %351 = fadd float %342, %343, !dbg !60
  %352 = fcmp oeq float %351, 0.000000e+00, !dbg !61
  %353 = tail call float @llvm.nvvm.div.full(float %343, float %351), !dbg !62
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !63
  %355 = fmul float %350, %354, !dbg !64
  %356 = fadd float %326, %355, !dbg !65
  %357 = fadd float %334, %335, !dbg !66
  %358 = fmul float %350, %350, !dbg !67
  %359 = fmul float %358, %342, !dbg !68
  %360 = fmul float %359, %354, !dbg !69
  %361 = fadd float %357, %360, !dbg !70
  %362 = fsub float %328, %356, !dbg !57
  %363 = fadd float %344, %351, !dbg !60
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !61
  %365 = tail call float @llvm.nvvm.div.full(float %344, float %363), !dbg !62
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !63
  %367 = fmul float %366, %362, !dbg !64
  %368 = fadd float %356, %367, !dbg !65
  %369 = fadd float %336, %361, !dbg !66
  %370 = fmul float %362, %362, !dbg !67
  %371 = fmul float %351, %370, !dbg !68
  %372 = fmul float %366, %371, !dbg !69
  %373 = fadd float %369, %372, !dbg !70
  %374 = fsub float %329, %368, !dbg !57
  %375 = fadd float %345, %363, !dbg !60
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !61
  %377 = tail call float @llvm.nvvm.div.full(float %345, float %375), !dbg !62
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !63
  %379 = fmul float %378, %374, !dbg !64
  %380 = fadd float %368, %379, !dbg !65
  %381 = fadd float %337, %373, !dbg !66
  %382 = fmul float %374, %374, !dbg !67
  %383 = fmul float %363, %382, !dbg !68
  %384 = fmul float %378, %383, !dbg !69
  %385 = fadd float %381, %384, !dbg !70
  %386 = fsub float %330, %380, !dbg !57
  %387 = fadd float %346, %375, !dbg !60
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !61
  %389 = tail call float @llvm.nvvm.div.full(float %346, float %387), !dbg !62
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !63
  %391 = fmul float %390, %386, !dbg !64
  %392 = fadd float %380, %391, !dbg !65
  %393 = fadd float %338, %385, !dbg !66
  %394 = fmul float %386, %386, !dbg !67
  %395 = fmul float %375, %394, !dbg !68
  %396 = fmul float %390, %395, !dbg !69
  %397 = fadd float %393, %396, !dbg !70
  %398 = fsub float %331, %392, !dbg !57
  %399 = fadd float %347, %387, !dbg !60
  %400 = fcmp oeq float %399, 0.000000e+00, !dbg !61
  %401 = tail call float @llvm.nvvm.div.full(float %347, float %399), !dbg !62
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !63
  %403 = fmul float %402, %398, !dbg !64
  %404 = fadd float %392, %403, !dbg !65
  %405 = fadd float %339, %397, !dbg !66
  %406 = fmul float %398, %398, !dbg !67
  %407 = fmul float %387, %406, !dbg !68
  %408 = fmul float %402, %407, !dbg !69
  %409 = fadd float %405, %408, !dbg !70
  %410 = fsub float %332, %404, !dbg !57
  %411 = fadd float %348, %399, !dbg !60
  %412 = fcmp oeq float %411, 0.000000e+00, !dbg !61
  %413 = tail call float @llvm.nvvm.div.full(float %348, float %411), !dbg !62
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !63
  %415 = fmul float %414, %410, !dbg !64
  %416 = fadd float %404, %415, !dbg !65
  %417 = fadd float %340, %409, !dbg !66
  %418 = fmul float %410, %410, !dbg !67
  %419 = fmul float %399, %418, !dbg !68
  %420 = fmul float %414, %419, !dbg !69
  %421 = fadd float %417, %420, !dbg !70
  %422 = fsub float %333, %416, !dbg !57
  %423 = fadd float %349, %411, !dbg !60
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !61
  %425 = tail call float @llvm.nvvm.div.full(float %349, float %423), !dbg !62
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !63
  %427 = fmul float %426, %422, !dbg !64
  %428 = fadd float %416, %427, !dbg !65
  %429 = fadd float %341, %421, !dbg !66
  %430 = fmul float %422, %422, !dbg !67
  %431 = fmul float %411, %430, !dbg !68
  %432 = fmul float %426, %431, !dbg !69
  %433 = fadd float %429, %432, !dbg !70
  %434 = bitcast float %428 to i32, !dbg !71
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 16, i32 31), !dbg !71
  %436 = bitcast i32 %435 to float, !dbg !71
  %437 = bitcast float %433 to i32, !dbg !71
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 16, i32 31), !dbg !71
  %439 = bitcast i32 %438 to float, !dbg !71
  %440 = bitcast float %423 to i32, !dbg !71
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 16, i32 31), !dbg !71
  %442 = bitcast i32 %441 to float, !dbg !71
  %443 = fsub float %436, %428, !dbg !57
  %444 = fadd float %423, %442, !dbg !60
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !61
  %446 = tail call float @llvm.nvvm.div.full(float %442, float %444), !dbg !62
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !63
  %448 = fmul float %447, %443, !dbg !64
  %449 = fadd float %428, %448, !dbg !65
  %450 = fadd float %433, %439, !dbg !66
  %451 = fmul float %443, %443, !dbg !67
  %452 = fmul float %423, %451, !dbg !68
  %453 = fmul float %447, %452, !dbg !69
  %454 = fadd float %450, %453, !dbg !70
  %455 = bitcast float %449 to i32, !dbg !71
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 8, i32 31), !dbg !71
  %457 = bitcast i32 %456 to float, !dbg !71
  %458 = bitcast float %454 to i32, !dbg !71
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 8, i32 31), !dbg !71
  %460 = bitcast i32 %459 to float, !dbg !71
  %461 = bitcast float %444 to i32, !dbg !71
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 8, i32 31), !dbg !71
  %463 = bitcast i32 %462 to float, !dbg !71
  %464 = fsub float %457, %449, !dbg !57
  %465 = fadd float %444, %463, !dbg !60
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !61
  %467 = tail call float @llvm.nvvm.div.full(float %463, float %465), !dbg !62
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !63
  %469 = fmul float %468, %464, !dbg !64
  %470 = fadd float %449, %469, !dbg !65
  %471 = fadd float %454, %460, !dbg !66
  %472 = fmul float %464, %464, !dbg !67
  %473 = fmul float %444, %472, !dbg !68
  %474 = fmul float %468, %473, !dbg !69
  %475 = fadd float %471, %474, !dbg !70
  %476 = bitcast float %470 to i32, !dbg !71
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 4, i32 31), !dbg !71
  %478 = bitcast i32 %477 to float, !dbg !71
  %479 = bitcast float %475 to i32, !dbg !71
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 4, i32 31), !dbg !71
  %481 = bitcast i32 %480 to float, !dbg !71
  %482 = bitcast float %465 to i32, !dbg !71
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 4, i32 31), !dbg !71
  %484 = bitcast i32 %483 to float, !dbg !71
  %485 = fsub float %478, %470, !dbg !57
  %486 = fadd float %465, %484, !dbg !60
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !61
  %488 = tail call float @llvm.nvvm.div.full(float %484, float %486), !dbg !62
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !63
  %490 = fmul float %489, %485, !dbg !64
  %491 = fadd float %470, %490, !dbg !65
  %492 = fadd float %475, %481, !dbg !66
  %493 = fmul float %485, %485, !dbg !67
  %494 = fmul float %465, %493, !dbg !68
  %495 = fmul float %489, %494, !dbg !69
  %496 = fadd float %492, %495, !dbg !70
  %497 = bitcast float %491 to i32, !dbg !71
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 2, i32 31), !dbg !71
  %499 = bitcast i32 %498 to float, !dbg !71
  %500 = bitcast float %496 to i32, !dbg !71
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 2, i32 31), !dbg !71
  %502 = bitcast i32 %501 to float, !dbg !71
  %503 = bitcast float %486 to i32, !dbg !71
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 2, i32 31), !dbg !71
  %505 = bitcast i32 %504 to float, !dbg !71
  %506 = fsub float %499, %491, !dbg !57
  %507 = fadd float %486, %505, !dbg !60
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !61
  %509 = tail call float @llvm.nvvm.div.full(float %505, float %507), !dbg !62
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !63
  %511 = fmul float %510, %506, !dbg !64
  %512 = fadd float %491, %511, !dbg !65
  %513 = fadd float %496, %502, !dbg !66
  %514 = fmul float %506, %506, !dbg !67
  %515 = fmul float %486, %514, !dbg !68
  %516 = fmul float %510, %515, !dbg !69
  %517 = fadd float %513, %516, !dbg !70
  %518 = bitcast float %512 to i32, !dbg !71
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 1, i32 31), !dbg !71
  %520 = bitcast i32 %519 to float, !dbg !71
  %521 = bitcast float %517 to i32, !dbg !71
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 1, i32 31), !dbg !71
  %523 = bitcast i32 %522 to float, !dbg !71
  %524 = bitcast float %507 to i32, !dbg !71
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 1, i32 31), !dbg !71
  %526 = bitcast i32 %525 to float, !dbg !71
  %527 = fsub float %520, %512, !dbg !57
  %528 = fadd float %507, %526, !dbg !60
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !61
  %530 = tail call float @llvm.nvvm.div.full(float %526, float %528), !dbg !62
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !63
  %532 = fmul float %531, %527, !dbg !64
  %533 = fadd float %512, %532, !dbg !65
  %534 = fadd float %517, %523, !dbg !66
  %535 = fmul float %527, %527, !dbg !67
  %536 = fmul float %507, %535, !dbg !68
  %537 = fmul float %531, %536, !dbg !69
  %538 = fadd float %534, %537, !dbg !70
  %539 = and i32 %13, 1, !dbg !71
  %540 = icmp eq i32 %16, 0, !dbg !71
  %541 = shl nuw nsw i32 %15, 1, !dbg !71
  %542 = or disjoint i32 %541, %539, !dbg !71
  %543 = getelementptr float, ptr addrspace(3) @global_smem, i32 %542, !dbg !71
  %544 = bitcast float %533 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 %540) #6, !dbg !71
  %545 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %542, !dbg !71
  %546 = bitcast float %538 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %546, i1 %540) #6, !dbg !71
  %547 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %542, !dbg !71
  %548 = bitcast float %528 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, <1 x i32> %548, i1 %540) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %549 = icmp slt i32 %12, 16, !dbg !71
  %550 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !71
  %551 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %550, i1 %549) #6, !dbg !71
  %552 = bitcast i32 %551 to float, !dbg !71
  %553 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !71
  %554 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %553, i1 %549) #6, !dbg !71
  %555 = bitcast i32 %554 to float, !dbg !71
  %556 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !71
  %557 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %556, i1 %549) #6, !dbg !71
  %558 = bitcast i32 %557 to float, !dbg !71
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 1, i32 31), !dbg !71
  %560 = bitcast i32 %559 to float, !dbg !71
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 1, i32 31), !dbg !71
  %562 = bitcast i32 %561 to float, !dbg !71
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 1, i32 31), !dbg !71
  %564 = bitcast i32 %563 to float, !dbg !71
  %565 = fsub float %560, %552, !dbg !57
  %566 = fadd float %558, %564, !dbg !60
  %567 = fcmp oeq float %566, 0.000000e+00, !dbg !61
  %568 = tail call float @llvm.nvvm.div.full(float %564, float %566), !dbg !62
  %569 = select i1 %567, float 0.000000e+00, float %568, !dbg !63
  %570 = fmul float %565, %569, !dbg !64
  %571 = fadd float %570, %552, !dbg !65
  %572 = fadd float %555, %562, !dbg !66
  %573 = fmul float %565, %565, !dbg !67
  %574 = fmul float %573, %558, !dbg !68
  %575 = fmul float %574, %569, !dbg !69
  %576 = fadd float %572, %575, !dbg !70
  %577 = and i32 %12, 1, !dbg !71
  %578 = icmp eq i32 %577, 0, !dbg !71
  %579 = and i1 %549, %578, !dbg !71
  %580 = bitcast float %571 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %580, i1 %579) #6, !dbg !71
  %581 = bitcast float %576 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %553, <1 x i32> %581, i1 %579) #6, !dbg !71
  %582 = bitcast float %566 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %582, i1 %579) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %583 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !71
  %584 = load float, ptr addrspace(3) %583, align 8, !dbg !71
  %585 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %541, !dbg !71
  %586 = load float, ptr addrspace(3) %585, align 8, !dbg !71
  %587 = tail call float @llvm.nvvm.div.full(float %586, float 7.680000e+02), !dbg !72
  %588 = fadd float %587, 0x3EE4F8B580000000, !dbg !73
  %589 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %590 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %591 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %593 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %594 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %596 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !74
  %.not.i78 = icmp eq i32 %596, 0, !dbg !74
  br i1 %.not.i78, label %599, label %597, !dbg !74

597:                                              ; preds = %__nv_rsqrtf.exit
  %598 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %588), !dbg !74
  br label %__nv_rsqrtf.exit80, !dbg !74

599:                                              ; preds = %__nv_rsqrtf.exit
  %600 = tail call float @llvm.nvvm.rsqrt.approx.f(float %588), !dbg !74
  br label %__nv_rsqrtf.exit80, !dbg !74

__nv_rsqrtf.exit80:                               ; preds = %599, %597
  %.0.i79 = phi float [ %598, %597 ], [ %600, %599 ], !dbg !74
  %601 = insertelement <2 x float> poison, float %584, i64 0, !dbg !75
  %602 = shufflevector <2 x float> %601, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !75
  %603 = insertelement <2 x float> poison, float %.0.i79, i64 0, !dbg !76
  %604 = shufflevector <2 x float> %603, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !76
  %605 = or disjoint i32 %18, 4
  %606 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %605
  %607 = getelementptr inbounds nuw i8, ptr addrspace(3) %606, i32 8
  %608 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %609 = getelementptr inbounds nuw i8, ptr addrspace(3) %608, i32 8
  %610 = zext nneg i32 %18 to i64, !dbg !77
  %611 = and i32 %12, 511, !dbg !13
  %612 = zext nneg i32 %611 to i64, !dbg !77
  %613 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %611
  %614 = mul i32 %20, 768, !dbg !78
  %615 = getelementptr bfloat, ptr addrspace(1) %4, i64 %612, !dbg !79
  %616 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %615, i1 true) #6, !dbg !80
  %617 = bitcast i16 %616 to bfloat, !dbg !80
  %618 = fpext bfloat %617 to float, !dbg !81
  %619 = getelementptr bfloat, ptr addrspace(1) %5, i64 %612, !dbg !82
  %620 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %619, i1 true) #6, !dbg !83
  %621 = bitcast i16 %620 to bfloat, !dbg !83
  %622 = fpext bfloat %621 to float, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %623 = getelementptr bfloat, ptr addrspace(1) %155, i64 %610, !dbg !86
  %624 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %623, i1 %27) #6, !dbg !87
  %625 = extractvalue { i32, i32, i32, i32 } %624, 3, !dbg !87
  %626 = bitcast i32 %625 to <2 x bfloat>, !dbg !87
  %627 = extractvalue { i32, i32, i32, i32 } %624, 2, !dbg !87
  %628 = bitcast i32 %627 to <2 x bfloat>, !dbg !87
  %629 = extractvalue { i32, i32, i32, i32 } %624, 1, !dbg !87
  %630 = bitcast i32 %629 to <2 x bfloat>, !dbg !87
  %631 = extractvalue { i32, i32, i32, i32 } %624, 0, !dbg !87
  %632 = bitcast i32 %631 to <2 x bfloat>, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %633 = getelementptr bfloat, ptr addrspace(1) %160, i64 %610, !dbg !89
  %634 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %633, i1 %27) #6, !dbg !90
  %635 = extractvalue { i32, i32, i32, i32 } %634, 0, !dbg !90
  %636 = bitcast i32 %635 to <2 x bfloat>, !dbg !90
  %637 = extractvalue { i32, i32, i32, i32 } %634, 1, !dbg !90
  %638 = bitcast i32 %637 to <2 x bfloat>, !dbg !90
  %639 = extractvalue { i32, i32, i32, i32 } %634, 2, !dbg !90
  %640 = bitcast i32 %639 to <2 x bfloat>, !dbg !90
  %641 = extractvalue { i32, i32, i32, i32 } %634, 3, !dbg !90
  %642 = bitcast i32 %641 to <2 x bfloat>, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %643 = bitcast float %618 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %643, i1 true) #6, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %644 = bitcast float %622 to <1 x i32>, !dbg !92
  %645 = add i32 %614, %18, !dbg !93
  %646 = sext i32 %645 to i64, !dbg !94
  %647 = getelementptr bfloat, ptr addrspace(1) %6, i64 %646, !dbg !94
  %648 = fpext <2 x bfloat> %626 to <2 x float>, !dbg !95
  %649 = fpext <2 x bfloat> %642 to <2 x float>, !dbg !96
  %650 = fadd <2 x float> %648, %649, !dbg !97
  %651 = fsub <2 x float> %650, %602, !dbg !75
  %652 = fmul <2 x float> %604, %651, !dbg !76
  %653 = load <2 x float>, ptr addrspace(3) %607, align 8, !dbg !91
  %654 = fmul <2 x float> %653, %652, !dbg !91
  %655 = fpext <2 x bfloat> %628 to <2 x float>, !dbg !95
  %656 = fpext <2 x bfloat> %640 to <2 x float>, !dbg !96
  %657 = fadd <2 x float> %655, %656, !dbg !97
  %658 = fsub <2 x float> %657, %602, !dbg !75
  %659 = fmul <2 x float> %604, %658, !dbg !76
  %660 = load <2 x float>, ptr addrspace(3) %606, align 16, !dbg !91
  %661 = fmul <2 x float> %660, %659, !dbg !91
  %662 = fpext <2 x bfloat> %630 to <2 x float>, !dbg !95
  %663 = fpext <2 x bfloat> %638 to <2 x float>, !dbg !96
  %664 = fadd <2 x float> %662, %663, !dbg !97
  %665 = fsub <2 x float> %664, %602, !dbg !75
  %666 = fmul <2 x float> %604, %665, !dbg !76
  %667 = load <2 x float>, ptr addrspace(3) %609, align 8, !dbg !91
  %668 = fmul <2 x float> %667, %666, !dbg !91
  %669 = fpext <2 x bfloat> %632 to <2 x float>, !dbg !95
  %670 = fpext <2 x bfloat> %636 to <2 x float>, !dbg !96
  %671 = fadd <2 x float> %669, %670, !dbg !97
  %672 = fsub <2 x float> %671, %602, !dbg !75
  %673 = fmul <2 x float> %604, %672, !dbg !76
  %674 = load <2 x float>, ptr addrspace(3) %608, align 16, !dbg !91
  %675 = fmul <2 x float> %674, %673, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %644, i1 true) #6, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %676 = load <2 x float>, ptr addrspace(3) %608, align 16, !dbg !92
  %677 = load <2 x float>, ptr addrspace(3) %609, align 8, !dbg !92
  %678 = load <2 x float>, ptr addrspace(3) %606, align 16, !dbg !92
  %679 = load <2 x float>, ptr addrspace(3) %607, align 8, !dbg !92
  %680 = fadd <2 x float> %675, %676, !dbg !92
  %681 = fadd <2 x float> %668, %677, !dbg !92
  %682 = fadd <2 x float> %661, %678, !dbg !92
  %683 = fadd <2 x float> %654, %679, !dbg !92
  %684 = fptrunc <2 x float> %680 to <2 x bfloat>, !dbg !98
  %685 = fptrunc <2 x float> %681 to <2 x bfloat>, !dbg !98
  %686 = fptrunc <2 x float> %682 to <2 x bfloat>, !dbg !98
  %687 = fptrunc <2 x float> %683 to <2 x bfloat>, !dbg !98
  %688 = bitcast <2 x bfloat> %684 to i32, !dbg !98
  %689 = bitcast <2 x bfloat> %685 to i32, !dbg !98
  %690 = bitcast <2 x bfloat> %686 to i32, !dbg !98
  %691 = bitcast <2 x bfloat> %687 to i32, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %688, i32 %689, i32 %690, i32 %691, ptr addrspace(1) %647, i1 %27) #6, !dbg !98
  %692 = or disjoint i64 %610, 512, !dbg !99
  %693 = or disjoint i64 %612, 512, !dbg !99
  %694 = icmp samesign ult i64 %693, 768, !dbg !100
  %695 = getelementptr bfloat, ptr addrspace(1) %4, i64 %693, !dbg !79
  %696 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %695, i1 %694) #6, !dbg !80
  %697 = bitcast i16 %696 to bfloat, !dbg !80
  %698 = fpext bfloat %697 to float, !dbg !81
  %699 = getelementptr bfloat, ptr addrspace(1) %5, i64 %693, !dbg !82
  %700 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %699, i1 %694) #6, !dbg !83
  %701 = bitcast i16 %700 to bfloat, !dbg !83
  %702 = fpext bfloat %701 to float, !dbg !84
  %703 = icmp samesign ult i64 %692, 768, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %704 = getelementptr bfloat, ptr addrspace(1) %155, i64 %692, !dbg !86
  %705 = and i1 %27, %703, !dbg !101
  %706 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %704, i1 %705) #6, !dbg !87
  %707 = extractvalue { i32, i32, i32, i32 } %706, 3, !dbg !87
  %708 = bitcast i32 %707 to <2 x bfloat>, !dbg !87
  %709 = extractvalue { i32, i32, i32, i32 } %706, 2, !dbg !87
  %710 = bitcast i32 %709 to <2 x bfloat>, !dbg !87
  %711 = extractvalue { i32, i32, i32, i32 } %706, 1, !dbg !87
  %712 = bitcast i32 %711 to <2 x bfloat>, !dbg !87
  %713 = extractvalue { i32, i32, i32, i32 } %706, 0, !dbg !87
  %714 = bitcast i32 %713 to <2 x bfloat>, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %715 = getelementptr bfloat, ptr addrspace(1) %160, i64 %692, !dbg !89
  %716 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %715, i1 %705) #6, !dbg !90
  %717 = extractvalue { i32, i32, i32, i32 } %716, 0, !dbg !90
  %718 = bitcast i32 %717 to <2 x bfloat>, !dbg !90
  %719 = extractvalue { i32, i32, i32, i32 } %716, 1, !dbg !90
  %720 = bitcast i32 %719 to <2 x bfloat>, !dbg !90
  %721 = extractvalue { i32, i32, i32, i32 } %716, 2, !dbg !90
  %722 = bitcast i32 %721 to <2 x bfloat>, !dbg !90
  %723 = extractvalue { i32, i32, i32, i32 } %716, 3, !dbg !90
  %724 = bitcast i32 %723 to <2 x bfloat>, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %725 = bitcast float %698 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %725, i1 true) #6, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %726 = bitcast float %702 to <1 x i32>, !dbg !92
  %727 = trunc nuw nsw i64 %692 to i32, !dbg !93
  %728 = add i32 %614, %727, !dbg !93
  %729 = sext i32 %728 to i64, !dbg !94
  %730 = getelementptr bfloat, ptr addrspace(1) %6, i64 %729, !dbg !94
  %731 = fpext <2 x bfloat> %708 to <2 x float>, !dbg !95
  %732 = fpext <2 x bfloat> %724 to <2 x float>, !dbg !96
  %733 = fadd <2 x float> %731, %732, !dbg !97
  %734 = fsub <2 x float> %733, %602, !dbg !75
  %735 = fmul <2 x float> %604, %734, !dbg !76
  %736 = load <2 x float>, ptr addrspace(3) %607, align 8, !dbg !91
  %737 = fmul <2 x float> %736, %735, !dbg !91
  %738 = fpext <2 x bfloat> %710 to <2 x float>, !dbg !95
  %739 = fpext <2 x bfloat> %722 to <2 x float>, !dbg !96
  %740 = fadd <2 x float> %738, %739, !dbg !97
  %741 = fsub <2 x float> %740, %602, !dbg !75
  %742 = fmul <2 x float> %604, %741, !dbg !76
  %743 = load <2 x float>, ptr addrspace(3) %606, align 16, !dbg !91
  %744 = fmul <2 x float> %743, %742, !dbg !91
  %745 = fpext <2 x bfloat> %712 to <2 x float>, !dbg !95
  %746 = fpext <2 x bfloat> %720 to <2 x float>, !dbg !96
  %747 = fadd <2 x float> %745, %746, !dbg !97
  %748 = fsub <2 x float> %747, %602, !dbg !75
  %749 = fmul <2 x float> %604, %748, !dbg !76
  %750 = load <2 x float>, ptr addrspace(3) %609, align 8, !dbg !91
  %751 = fmul <2 x float> %750, %749, !dbg !91
  %752 = fpext <2 x bfloat> %714 to <2 x float>, !dbg !95
  %753 = fpext <2 x bfloat> %718 to <2 x float>, !dbg !96
  %754 = fadd <2 x float> %752, %753, !dbg !97
  %755 = fsub <2 x float> %754, %602, !dbg !75
  %756 = fmul <2 x float> %604, %755, !dbg !76
  %757 = load <2 x float>, ptr addrspace(3) %608, align 16, !dbg !91
  %758 = fmul <2 x float> %757, %756, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %726, i1 true) #6, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %759 = load <2 x float>, ptr addrspace(3) %608, align 16, !dbg !92
  %760 = load <2 x float>, ptr addrspace(3) %609, align 8, !dbg !92
  %761 = load <2 x float>, ptr addrspace(3) %606, align 16, !dbg !92
  %762 = load <2 x float>, ptr addrspace(3) %607, align 8, !dbg !92
  %763 = fadd <2 x float> %758, %759, !dbg !92
  %764 = fadd <2 x float> %751, %760, !dbg !92
  %765 = fadd <2 x float> %744, %761, !dbg !92
  %766 = fadd <2 x float> %737, %762, !dbg !92
  %767 = fptrunc <2 x float> %763 to <2 x bfloat>, !dbg !98
  %768 = fptrunc <2 x float> %764 to <2 x bfloat>, !dbg !98
  %769 = fptrunc <2 x float> %765 to <2 x bfloat>, !dbg !98
  %770 = fptrunc <2 x float> %766 to <2 x bfloat>, !dbg !98
  %771 = bitcast <2 x bfloat> %767 to i32, !dbg !98
  %772 = bitcast <2 x bfloat> %768 to i32, !dbg !98
  %773 = bitcast <2 x bfloat> %769 to i32, !dbg !98
  %774 = bitcast <2 x bfloat> %770 to i32, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %771, i32 %772, i32 %773, i32 %774, ptr addrspace(1) %730, i1 %705) #6, !dbg !98
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py", directory: "/tmp/torchinductor_root/3w")
!4 = !{ptr @triton_red_fused_add_embedding_native_layer_norm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_native_layer_norm_0", linkageName: "triton_red_fused_add_embedding_native_layer_norm_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 44, scope: !10)
!13 = !DILocation(line: 26, column: 37, scope: !10)
!14 = !DILocation(line: 23, column: 33, scope: !10)
!15 = !DILocation(line: 24, column: 23, scope: !10)
!16 = !DILocation(line: 25, column: 21, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 30, column: 35, scope: !10)
!20 = !DILocation(line: 30, column: 30, scope: !10)
!21 = !DILocation(line: 41, column: 22, scope: !10)
!22 = !DILocation(line: 42, column: 22, scope: !10)
!23 = !DILocation(line: 43, column: 36, scope: !10)
!24 = !DILocation(line: 44, column: 60, scope: !10)
!25 = !DILocation(line: 47, column: 22, scope: !10)
!26 = !DILocation(line: 48, column: 23, scope: !10)
!27 = !DILocation(line: 49, column: 38, scope: !10)
!28 = !DILocation(line: 50, column: 42, scope: !10)
!29 = !DILocation(line: 50, column: 57, scope: !10)
!30 = !DILocation(line: 34, column: 40, scope: !10)
!31 = !DILocation(line: 44, column: 68, scope: !10)
!32 = !DILocation(line: 50, column: 67, scope: !10)
!33 = !DILocation(line: 35, column: 31, scope: !10)
!34 = !DILocation(line: 36, column: 29, scope: !10)
!35 = !DILocation(line: 45, column: 34, scope: !10)
!36 = !DILocation(line: 45, column: 62, scope: !10)
!37 = !DILocation(line: 45, column: 52, scope: !10)
!38 = !DILocation(line: 45, column: 113, scope: !10)
!39 = !DILocation(line: 51, column: 35, scope: !10)
!40 = !DILocation(line: 51, column: 54, scope: !10)
!41 = !DILocation(line: 51, column: 115, scope: !10)
!42 = !DILocation(line: 52, column: 23, scope: !10)
!43 = !DILocation(line: 203, column: 7, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !10, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 56, column: 55, scope: !10)
!47 = !DILocation(line: 208, column: 24, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 209, column: 30, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 210, column: 34, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 210, column: 26, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 211, column: 39, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 211, column: 31, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 211, column: 22, scope: !44, inlinedAt: !46)
!54 = !DILocation(line: 58, column: 64, scope: !10)
!55 = !DILocation(line: 59, column: 60, scope: !10)
!56 = !DILocation(line: 60, column: 68, scope: !10)
!57 = !DILocation(line: 217, column: 21, scope: !58, inlinedAt: !59)
!58 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!59 = !DILocation(line: 61, column: 85, scope: !10)
!60 = !DILocation(line: 218, column: 28, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 219, column: 39, scope: !58, inlinedAt: !59)
!62 = !DILocation(line: 219, column: 60, scope: !58, inlinedAt: !59)
!63 = !DILocation(line: 219, column: 49, scope: !58, inlinedAt: !59)
!64 = !DILocation(line: 221, column: 25, scope: !58, inlinedAt: !59)
!65 = !DILocation(line: 221, column: 17, scope: !58, inlinedAt: !59)
!66 = !DILocation(line: 222, column: 15, scope: !58, inlinedAt: !59)
!67 = !DILocation(line: 222, column: 30, scope: !58, inlinedAt: !59)
!68 = !DILocation(line: 222, column: 38, scope: !58, inlinedAt: !59)
!69 = !DILocation(line: 222, column: 49, scope: !58, inlinedAt: !59)
!70 = !DILocation(line: 222, column: 22, scope: !58, inlinedAt: !59)
!71 = !DILocation(line: 229, column: 46, scope: !44, inlinedAt: !59)
!72 = !DILocation(line: 89, column: 25, scope: !10)
!73 = !DILocation(line: 91, column: 24, scope: !10)
!74 = !DILocation(line: 92, column: 32, scope: !10)
!75 = !DILocation(line: 87, column: 24, scope: !10)
!76 = !DILocation(line: 93, column: 24, scope: !10)
!77 = !DILocation(line: 65, column: 40, scope: !10)
!78 = !DILocation(line: 99, column: 40, scope: !10)
!79 = !DILocation(line: 71, column: 35, scope: !10)
!80 = !DILocation(line: 71, column: 42, scope: !10)
!81 = !DILocation(line: 71, column: 95, scope: !10)
!82 = !DILocation(line: 72, column: 35, scope: !10)
!83 = !DILocation(line: 72, column: 42, scope: !10)
!84 = !DILocation(line: 72, column: 95, scope: !10)
!85 = !DILocation(line: 77, column: 70, scope: !10)
!86 = !DILocation(line: 78, column: 35, scope: !10)
!87 = !DILocation(line: 78, column: 54, scope: !10)
!88 = !DILocation(line: 83, column: 67, scope: !10)
!89 = !DILocation(line: 84, column: 35, scope: !10)
!90 = !DILocation(line: 84, column: 54, scope: !10)
!91 = !DILocation(line: 95, column: 24, scope: !10)
!92 = !DILocation(line: 97, column: 24, scope: !10)
!93 = !DILocation(line: 99, column: 36, scope: !10)
!94 = !DILocation(line: 99, column: 29, scope: !10)
!95 = !DILocation(line: 78, column: 116, scope: !10)
!96 = !DILocation(line: 84, column: 116, scope: !10)
!97 = !DILocation(line: 85, column: 24, scope: !10)
!98 = !DILocation(line: 99, column: 52, scope: !10)
!99 = !DILocation(line: 66, column: 31, scope: !10)
!100 = !DILocation(line: 67, column: 29, scope: !10)
!101 = !DILocation(line: 78, column: 62, scope: !10)
!102 = !DILocation(line: 65, column: 4, scope: !10)
