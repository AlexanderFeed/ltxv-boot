; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 16, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 16, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 16, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = and i32 %15, 8, !dbg !19
  %18 = and i32 %15, 16, !dbg !19
  %19 = lshr exact i32 %18, 1, !dbg !19
  %20 = lshr i32 %15, 1, !dbg !19
  %21 = and i32 %20, 23, !dbg !19
  %22 = or disjoint i32 %21, %19, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = and i32 %23, 15, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 8, !dbg !19
  %28 = and i32 %26, 24, !dbg !19
  %29 = or disjoint i32 %14, %22, !dbg !20
  %30 = shl nsw i32 %13, 5, !dbg !21
  %31 = or disjoint i32 %30, %28, !dbg !22
  %32 = srem i32 %29, 512, !dbg !23
  %33 = srem i32 %31, 64, !dbg !24
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %35 = shl nsw i32 %32, 9, !dbg !26
  %36 = shl i32 %34, 18, !dbg !27
  %37 = or disjoint i32 %27, %36, !dbg !28
  %38 = add i32 %37, %35, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %39, !dbg !30
  %41 = shl nuw nsw i32 %25, 12, !dbg !31
  %42 = shl i32 %34, 6, !dbg !32
  %43 = add i32 %41, %42, !dbg !33
  %44 = add i32 %43, %33, !dbg !34
  %45 = sext i32 %44 to i64, !dbg !35
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !35
  %47 = xor i32 %27, %17
  %48 = shl nuw nsw i32 %22, 4
  %49 = or disjoint i32 %48, %47
  %50 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %49
  %51 = xor i32 %26, %15
  %52 = and i32 %51, 24
  %53 = shl nuw nsw i32 %25, 5
  %54 = or disjoint i32 %52, %53
  %55 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %54
  %56 = shl nuw nsw i32 %16, 1
  %57 = and i32 %15, 15
  %58 = xor i32 %56, %19
  %59 = shl nuw nsw i32 %57, 4
  %60 = or disjoint i32 %58, %59
  %61 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %60
  %62 = ptrtoint ptr addrspace(3) %61 to i32
  %63 = shl i32 %15, 4
  %64 = and i32 %63, 240
  %65 = or disjoint i32 %64, %58
  %66 = or disjoint i32 %65, 256
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %66
  %68 = ptrtoint ptr addrspace(3) %67 to i32
  %69 = shl i32 %15, 2
  %70 = and i32 %69, 8
  %71 = shl nuw nsw i32 %16, 2
  %72 = or disjoint i32 %70, %71
  %73 = xor i32 %72, %24
  %74 = shl nuw nsw i32 %57, 5
  %75 = or disjoint i32 %73, %74
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %75
  %77 = ptrtoint ptr addrspace(3) %76 to i32
  %78 = or disjoint i32 %70, 16
  %79 = or disjoint i32 %24, %71
  %80 = xor i32 %79, %78
  %81 = or disjoint i32 %80, %74
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %81
  %83 = ptrtoint ptr addrspace(3) %82 to i32
  br label %84, !dbg !36

84:                                               ; preds = %4, %84
  %.pn3472 = phi ptr addrspace(1) [ %46, %4 ], [ %167, %84 ]
  %.pn1871 = phi ptr addrspace(1) [ %40, %4 ], [ %166, %84 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %147, %84 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %148, %84 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %149, %84 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %150, %84 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %152, %84 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %153, %84 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %154, %84 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %155, %84 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %157, %84 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %158, %84 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %159, %84 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %160, %84 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %162, %84 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %163, %84 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %164, %84 ]
  %100 = phi float [ 0.000000e+00, %4 ], [ %165, %84 ]
  %101 = phi i32 [ 0, %4 ], [ %168, %84 ]
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %.pn1871) #2, !dbg !37
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !37
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !37
  %105 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !37
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !37
  %107 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !37
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !37
  %109 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %110 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !37
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !37
  %112 = shufflevector <2 x bfloat> %111, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %113 = shufflevector <2 x bfloat> %104, <2 x bfloat> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %114 = shufflevector <8 x bfloat> %113, <8 x bfloat> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !37
  %115 = shufflevector <8 x bfloat> %114, <8 x bfloat> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !37
  store <8 x bfloat> %115, ptr addrspace(3) %50, align 16, !dbg !37
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %.pn3472) #2, !dbg !38
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !38
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !38
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !38
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !38
  %123 = shufflevector <2 x bfloat> %122, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %124 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !38
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !38
  %126 = shufflevector <2 x bfloat> %125, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %127 = shufflevector <2 x bfloat> %118, <2 x bfloat> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %128 = shufflevector <8 x bfloat> %127, <8 x bfloat> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !38
  %129 = shufflevector <8 x bfloat> %128, <8 x bfloat> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !38
  store <8 x bfloat> %129, ptr addrspace(3) %55, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %62) #2, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !37
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !37
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !37
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %68) #2, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !37
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !37
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !37
  %140 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.trans.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %77) #2, !dbg !38
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !38
  %142 = extractvalue { i32, i32 } %140, 1, !dbg !38
  %143 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.trans.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %83) #2, !dbg !38
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !38
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !38
  %146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %85, float %86, float %87, float %88, i32 %131, i32 %132, i32 %133, i32 %134, i32 %141, i32 %142) #2, !dbg !39
  %147 = extractvalue { float, float, float, float } %146, 0, !dbg !39
  %148 = extractvalue { float, float, float, float } %146, 1, !dbg !39
  %149 = extractvalue { float, float, float, float } %146, 2, !dbg !39
  %150 = extractvalue { float, float, float, float } %146, 3, !dbg !39
  %151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %89, float %90, float %91, float %92, i32 %131, i32 %132, i32 %133, i32 %134, i32 %144, i32 %145) #2, !dbg !39
  %152 = extractvalue { float, float, float, float } %151, 0, !dbg !39
  %153 = extractvalue { float, float, float, float } %151, 1, !dbg !39
  %154 = extractvalue { float, float, float, float } %151, 2, !dbg !39
  %155 = extractvalue { float, float, float, float } %151, 3, !dbg !39
  %156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %93, float %94, float %95, float %96, i32 %136, i32 %137, i32 %138, i32 %139, i32 %141, i32 %142) #2, !dbg !39
  %157 = extractvalue { float, float, float, float } %156, 0, !dbg !39
  %158 = extractvalue { float, float, float, float } %156, 1, !dbg !39
  %159 = extractvalue { float, float, float, float } %156, 2, !dbg !39
  %160 = extractvalue { float, float, float, float } %156, 3, !dbg !39
  %161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %97, float %98, float %99, float %100, i32 %136, i32 %137, i32 %138, i32 %139, i32 %144, i32 %145) #2, !dbg !39
  %162 = extractvalue { float, float, float, float } %161, 0, !dbg !39
  %163 = extractvalue { float, float, float, float } %161, 1, !dbg !39
  %164 = extractvalue { float, float, float, float } %161, 2, !dbg !39
  %165 = extractvalue { float, float, float, float } %161, 3, !dbg !39
  %166 = getelementptr i8, ptr addrspace(1) %.pn1871, i64 32, !dbg !40
  %167 = getelementptr i8, ptr addrspace(1) %.pn3472, i64 131072, !dbg !41
  %168 = add nuw nsw i32 %101, 16, !dbg !36
  %169 = icmp samesign ult i32 %101, 496, !dbg !36
  br i1 %169, label %84, label %170, !dbg !36

170:                                              ; preds = %84
  %171 = or disjoint i32 %14, %25, !dbg !19
  %172 = or disjoint i32 %171, 16, !dbg !20
  %173 = icmp slt i32 %171, 512, !dbg !42
  %174 = icmp slt i32 %172, 512, !dbg !42
  %175 = icmp slt i32 %31, 64, !dbg !43
  %176 = and i1 %173, %175, !dbg !44
  %177 = and i1 %174, %175, !dbg !44
  %178 = shl i32 %171, 6, !dbg !45
  %179 = shl i32 %172, 6, !dbg !45
  %180 = shl i32 %34, 15, !dbg !46
  %181 = add i32 %31, %180, !dbg !47
  %182 = add i32 %181, %178, !dbg !48
  %183 = add i32 %179, %180, !dbg !47
  %184 = add i32 %183, %31, !dbg !48
  %185 = sext i32 %182 to i64, !dbg !49
  %186 = getelementptr bfloat, ptr addrspace(1) %2, i64 %185, !dbg !49
  %187 = sext i32 %184 to i64, !dbg !49
  %188 = getelementptr bfloat, ptr addrspace(1) %2, i64 %187, !dbg !49
  %189 = fptrunc float %147 to bfloat, !dbg !50
  %190 = fptrunc float %148 to bfloat, !dbg !50
  %191 = fptrunc float %149 to bfloat, !dbg !50
  %192 = fptrunc float %150 to bfloat, !dbg !50
  %193 = fptrunc float %152 to bfloat, !dbg !50
  %194 = fptrunc float %153 to bfloat, !dbg !50
  %195 = fptrunc float %154 to bfloat, !dbg !50
  %196 = fptrunc float %155 to bfloat, !dbg !50
  %197 = fptrunc float %157 to bfloat, !dbg !50
  %198 = fptrunc float %158 to bfloat, !dbg !50
  %199 = fptrunc float %159 to bfloat, !dbg !50
  %200 = fptrunc float %160 to bfloat, !dbg !50
  %201 = fptrunc float %162 to bfloat, !dbg !50
  %202 = fptrunc float %163 to bfloat, !dbg !50
  %203 = fptrunc float %164 to bfloat, !dbg !50
  %204 = fptrunc float %165 to bfloat, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %205 = shl i32 %15, 1, !dbg !50
  %206 = and i32 %205, 6, !dbg !50
  %207 = shl nuw nsw i32 %16, 3, !dbg !50
  %208 = or disjoint i32 %206, %207, !dbg !50
  %209 = shl nuw nsw i32 %17, 3, !dbg !50
  %210 = or disjoint i32 %208, %209, !dbg !50
  %211 = shl nuw nsw i32 %18, 3, !dbg !50
  %212 = or disjoint i32 %210, %211, !dbg !50
  %213 = or disjoint i32 %212, %24, !dbg !50
  %214 = and i32 %26, 312, !dbg !50
  %215 = or disjoint i32 %209, %214, !dbg !50
  %216 = or disjoint i32 %215, %211, !dbg !50
  %217 = lshr i32 %212, 2, !dbg !50
  %218 = and i32 %217, 536870904, !dbg !50
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %218, !dbg !50
  %220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %219, i32 %213, !dbg !50
  %221 = bitcast bfloat %189 to i16, !dbg !50
  %222 = bitcast bfloat %190 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %220, i16 %221, i16 %222, i1 true) #2, !dbg !50
  %223 = xor i32 %213, 256, !dbg !50
  %224 = lshr i32 %223, 2, !dbg !50
  %225 = and i32 %224, 1073741816, !dbg !50
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %225, !dbg !50
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %226, i32 %223, !dbg !50
  %228 = bitcast bfloat %191 to i16, !dbg !50
  %229 = bitcast bfloat %192 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %227, i16 %228, i16 %229, i1 true) #2, !dbg !50
  %230 = xor i32 %213, 16, !dbg !50
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %219, i32 %230, !dbg !50
  %232 = bitcast bfloat %193 to i16, !dbg !50
  %233 = bitcast bfloat %194 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %231, i16 %232, i16 %233, i1 true) #2, !dbg !50
  %234 = xor i32 %213, 272, !dbg !50
  %235 = lshr i32 %234, 2, !dbg !50
  %236 = and i32 %235, 1073741816, !dbg !50
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %236, !dbg !50
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %237, i32 %234, !dbg !50
  %239 = bitcast bfloat %195 to i16, !dbg !50
  %240 = bitcast bfloat %196 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %238, i16 %239, i16 %240, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %241 = lshr exact i32 %216, 2, !dbg !50
  %242 = and i32 %241, 120, !dbg !50
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %242, !dbg !50
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %243, i32 %216, !dbg !50
  %245 = load <4 x i32>, ptr addrspace(3) %244, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %246 = bitcast bfloat %197 to i16, !dbg !50
  %247 = bitcast bfloat %198 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %220, i16 %246, i16 %247, i1 true) #2, !dbg !50
  %248 = bitcast bfloat %199 to i16, !dbg !50
  %249 = bitcast bfloat %200 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %227, i16 %248, i16 %249, i1 true) #2, !dbg !50
  %250 = bitcast bfloat %201 to i16, !dbg !50
  %251 = bitcast bfloat %202 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %231, i16 %250, i16 %251, i1 true) #2, !dbg !50
  %252 = bitcast bfloat %203 to i16, !dbg !50
  %253 = bitcast bfloat %204 to i16, !dbg !50
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %238, i16 %252, i16 %253, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %254 = load <4 x i32>, ptr addrspace(3) %244, align 16, !dbg !50
  %.extract = extractelement <4 x i32> %245, i64 0, !dbg !50
  %.extract58 = extractelement <4 x i32> %245, i64 1, !dbg !50
  %.extract60 = extractelement <4 x i32> %245, i64 2, !dbg !50
  %.extract62 = extractelement <4 x i32> %245, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract58, i32 %.extract60, i32 %.extract62, ptr addrspace(1) %186, i1 %176) #2, !dbg !50
  %.extract64 = extractelement <4 x i32> %254, i64 0, !dbg !50
  %.extract66 = extractelement <4 x i32> %254, i64 1, !dbg !50
  %.extract68 = extractelement <4 x i32> %254, i64 2, !dbg !50
  %.extract70 = extractelement <4 x i32> %254, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract64, i32 %.extract66, i32 %.extract68, i32 %.extract70, ptr addrspace(1) %188, i1 %177) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cywa7wkr4emvcsq2n6vm4xtst65w4jvppjmuoi66jna6vx3x77cb.py", directory: "/tmp/torchinductor_root/yw")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 55, column: 52, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 27, scope: !6)
!32 = !DILocation(line: 67, column: 72, scope: !6)
!33 = !DILocation(line: 67, column: 39, scope: !6)
!34 = !DILocation(line: 67, column: 66, scope: !6)
!35 = !DILocation(line: 67, column: 13, scope: !6)
!36 = !DILocation(line: 70, column: 25, scope: !6)
!37 = !DILocation(line: 72, column: 24, scope: !6)
!38 = !DILocation(line: 73, column: 24, scope: !6)
!39 = !DILocation(line: 77, column: 25, scope: !6)
!40 = !DILocation(line: 78, column: 13, scope: !6)
!41 = !DILocation(line: 79, column: 13, scope: !6)
!42 = !DILocation(line: 87, column: 20, scope: !6)
!43 = !DILocation(line: 87, column: 34, scope: !6)
!44 = !DILocation(line: 87, column: 26, scope: !6)
!45 = !DILocation(line: 90, column: 24, scope: !6)
!46 = !DILocation(line: 90, column: 38, scope: !6)
!47 = !DILocation(line: 90, column: 21, scope: !6)
!48 = !DILocation(line: 90, column: 32, scope: !6)
!49 = !DILocation(line: 91, column: 25, scope: !6)
!50 = !DILocation(line: 91, column: 67, scope: !6)
!51 = !DILocation(line: 91, column: 4, scope: !6)
