; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 256, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 256, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 31, !dbg !19
  %20 = or disjoint i32 %19, 32, !dbg !19
  %21 = or disjoint i32 %14, %19, !dbg !20
  %22 = or disjoint i32 %14, %20, !dbg !20
  %23 = shl nsw i32 %13, 7, !dbg !21
  %24 = shl i32 %15, 3, !dbg !22
  %25 = and i32 %24, 24, !dbg !22
  %26 = or disjoint i32 %23, %19, !dbg !23
  %27 = or disjoint i32 %23, %20, !dbg !23
  %28 = srem i32 %21, 512, !dbg !24
  %29 = srem i32 %22, 512, !dbg !24
  %30 = srem i32 %26, 4096, !dbg !25
  %.lhs.trunc = trunc i32 %27 to i16, !dbg !25
  %31 = srem i16 %.lhs.trunc, 4096, !dbg !25
  %.sext = sext i16 %31 to i32, !dbg !25
  %32 = trunc i32 %26 to i16, !dbg !25
  %.lhs.trunc101 = or disjoint i16 %32, 64, !dbg !25
  %33 = srem i16 %.lhs.trunc101, 4096, !dbg !25
  %.sext102 = sext i16 %33 to i32, !dbg !25
  %.lhs.trunc103 = or disjoint i16 %32, 96, !dbg !25
  %34 = srem i16 %.lhs.trunc103, 4096, !dbg !25
  %.sext104 = sext i16 %34 to i32, !dbg !25
  %35 = mul nsw i32 %28, 10240, !dbg !26
  %36 = mul nsw i32 %29, 10240, !dbg !26
  %37 = mul nsw i32 %30, 10240, !dbg !27
  %38 = mul nsw i32 %.sext, 10240, !dbg !27
  %39 = mul nsw i32 %.sext102, 10240, !dbg !27
  %40 = mul nsw i32 %.sext104, 10240, !dbg !27
  %41 = or disjoint i32 %35, %25, !dbg !28
  %42 = or disjoint i32 %36, %25, !dbg !28
  %43 = sext i32 %41 to i64, !dbg !29
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !29
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = xor i32 %24, %15, !dbg !30
  %48 = and i32 %47, 24, !dbg !30
  %49 = shl nuw nsw i32 %19, 5, !dbg !30
  %50 = or disjoint i32 %49, %48, !dbg !30
  %51 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %50, !dbg !30
  %52 = or disjoint i32 %50, 1024, !dbg !30
  %53 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %52, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %51, ptr addrspace(1) %44, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %53, ptr addrspace(1) %46, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %54 = or disjoint i32 %37, %25, !dbg !31
  %55 = or disjoint i32 %38, %25, !dbg !31
  %56 = or disjoint i32 %39, %25, !dbg !31
  %57 = or disjoint i32 %40, %25, !dbg !31
  %58 = sext i32 %54 to i64, !dbg !32
  %59 = getelementptr bfloat, ptr addrspace(1) %1, i64 %58, !dbg !32
  %60 = sext i32 %55 to i64, !dbg !32
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = sext i32 %56 to i64, !dbg !32
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !32
  %64 = sext i32 %57 to i64, !dbg !32
  %65 = getelementptr bfloat, ptr addrspace(1) %1, i64 %64, !dbg !32
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %50, !dbg !33
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %52, !dbg !33
  %68 = or disjoint i32 %50, 2048, !dbg !33
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !33
  %70 = or disjoint i32 %50, 3072, !dbg !33
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %70, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %59, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %67, ptr addrspace(1) %61, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %69, ptr addrspace(1) %63, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %71, ptr addrspace(1) %65, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %72 = or disjoint i32 %25, 32, !dbg !34
  %73 = or disjoint i32 %35, %72, !dbg !28
  %74 = or disjoint i32 %36, %72, !dbg !28
  %75 = sext i32 %73 to i64, !dbg !29
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %74 to i64, !dbg !29
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %79 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %50, !dbg !30
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %52, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %76, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %78, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %81 = or disjoint i32 %37, %72, !dbg !31
  %82 = or disjoint i32 %38, %72, !dbg !31
  %83 = or disjoint i32 %39, %72, !dbg !31
  %84 = or disjoint i32 %40, %72, !dbg !31
  %85 = sext i32 %81 to i64, !dbg !32
  %86 = getelementptr bfloat, ptr addrspace(1) %1, i64 %85, !dbg !32
  %87 = sext i32 %82 to i64, !dbg !32
  %88 = getelementptr bfloat, ptr addrspace(1) %1, i64 %87, !dbg !32
  %89 = sext i32 %83 to i64, !dbg !32
  %90 = getelementptr bfloat, ptr addrspace(1) %1, i64 %89, !dbg !32
  %91 = sext i32 %84 to i64, !dbg !32
  %92 = getelementptr bfloat, ptr addrspace(1) %1, i64 %91, !dbg !32
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %50, !dbg !33
  %94 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %52, !dbg !33
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %68, !dbg !33
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %70, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %93, ptr addrspace(1) %86, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %94, ptr addrspace(1) %88, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %90, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %92, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op171 = or disjoint i32 %25, 64, !dbg !35
  %97 = shl i32 %15, 2
  %98 = and i32 %97, 8
  %99 = and i32 %97, 16
  %100 = and i32 %97, 24
  %101 = and i32 %15, 7
  %102 = lshr exact i32 %17, 1
  %103 = xor i32 %100, %102
  %104 = shl i32 %15, 5
  %105 = and i32 %104, 480
  %106 = or disjoint i32 %103, %105
  %107 = or disjoint i32 %98, 16
  %108 = or disjoint i32 %102, %99
  %109 = xor i32 %108, %107
  %110 = or disjoint i32 %109, %105
  %111 = or disjoint i32 %105, 512
  %112 = or disjoint i32 %103, %111
  %113 = or disjoint i32 %109, %111
  %.reass = or disjoint i32 %101, %invariant.op
  %114 = shl nuw nsw i32 %.reass, 5
  %115 = or disjoint i32 %103, %114
  %116 = or disjoint i32 %109, %114
  %117 = or disjoint i32 %105, 1536
  %118 = or disjoint i32 %103, %117
  %119 = or disjoint i32 %109, %117
  %120 = xor i32 %97, %15
  %121 = and i32 %120, 24
  %122 = and i32 %18, 24
  %123 = or disjoint i32 %122, %101
  %124 = shl nuw nsw i32 %123, 5
  %125 = or disjoint i32 %124, %121
  %invariant.op169 = and i32 %18, 24
  %126 = or disjoint i32 %invariant.op169, %101
  %127 = shl nuw nsw i32 %126, 5
  %128 = or disjoint i32 %127, %121
  %129 = or disjoint i32 %128, 1024
  %130 = or disjoint i32 %125, 2048
  %131 = or disjoint i32 %125, 3072
  %132 = zext nneg i32 %invariant.op171 to i64, !dbg !35
  %133 = sext i32 %40 to i64, !dbg !35
  %134 = sext i32 %39 to i64, !dbg !35
  %135 = sext i32 %38 to i64, !dbg !35
  %136 = sext i32 %37 to i64, !dbg !35
  %137 = sext i32 %36 to i64, !dbg !35
  %138 = sext i32 %35 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %138, !dbg !35
  %invariant.gep300 = getelementptr bfloat, ptr addrspace(1) %0, i64 %137, !dbg !35
  %invariant.gep302 = getelementptr bfloat, ptr addrspace(1) %1, i64 %136, !dbg !35
  %invariant.gep304 = getelementptr bfloat, ptr addrspace(1) %1, i64 %135, !dbg !35
  %invariant.gep306 = getelementptr bfloat, ptr addrspace(1) %1, i64 %134, !dbg !35
  %invariant.gep308 = getelementptr bfloat, ptr addrspace(1) %1, i64 %133, !dbg !35
  br label %139, !dbg !35

139:                                              ; preds = %4, %139
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %139 ]
  %140 = phi i32 [ -1, %4 ], [ %209, %139 ]
  %141 = phi i32 [ 1, %4 ], [ %458, %139 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %377, %139 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %378, %139 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %379, %139 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %380, %139 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %382, %139 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %383, %139 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %384, %139 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %385, %139 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %387, %139 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %388, %139 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %389, %139 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %390, %139 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %392, %139 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %393, %139 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %394, %139 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %395, %139 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %397, %139 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %398, %139 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %399, %139 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %400, %139 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %402, %139 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %403, %139 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %404, %139 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %405, %139 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %407, %139 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %408, %139 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %409, %139 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %410, %139 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %412, %139 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %413, %139 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %414, %139 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %415, %139 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %417, %139 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %418, %139 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %419, %139 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %420, %139 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %422, %139 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %423, %139 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %424, %139 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %425, %139 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %427, %139 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %428, %139 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %429, %139 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %430, %139 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %432, %139 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %433, %139 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %434, %139 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %435, %139 ]
  %190 = phi float [ 0.000000e+00, %4 ], [ %437, %139 ]
  %191 = phi float [ 0.000000e+00, %4 ], [ %438, %139 ]
  %192 = phi float [ 0.000000e+00, %4 ], [ %439, %139 ]
  %193 = phi float [ 0.000000e+00, %4 ], [ %440, %139 ]
  %194 = phi float [ 0.000000e+00, %4 ], [ %442, %139 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %443, %139 ]
  %196 = phi float [ 0.000000e+00, %4 ], [ %444, %139 ]
  %197 = phi float [ 0.000000e+00, %4 ], [ %445, %139 ]
  %198 = phi float [ 0.000000e+00, %4 ], [ %447, %139 ]
  %199 = phi float [ 0.000000e+00, %4 ], [ %448, %139 ]
  %200 = phi float [ 0.000000e+00, %4 ], [ %449, %139 ]
  %201 = phi float [ 0.000000e+00, %4 ], [ %450, %139 ]
  %202 = phi float [ 0.000000e+00, %4 ], [ %452, %139 ]
  %203 = phi float [ 0.000000e+00, %4 ], [ %453, %139 ]
  %204 = phi float [ 0.000000e+00, %4 ], [ %454, %139 ]
  %205 = phi float [ 0.000000e+00, %4 ], [ %455, %139 ]
  %206 = icmp samesign ult i64 %indvars.iv, 318, !dbg !35
  %207 = add i32 %140, 1, !dbg !35
  %208 = icmp slt i32 %207, 2, !dbg !35
  %209 = select i1 %208, i32 %207, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx = shl i32 %209, 12, !dbg !30
  %210 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx, !dbg !30
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %106, !dbg !30
  %212 = ptrtoint ptr addrspace(3) %211 to i32, !dbg !30
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %212) #1, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !30
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !30
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !30
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %110, !dbg !30
  %219 = ptrtoint ptr addrspace(3) %218 to i32, !dbg !30
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %219) #1, !dbg !30
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !30
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !30
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !30
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !30
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %112, !dbg !30
  %226 = ptrtoint ptr addrspace(3) %225 to i32, !dbg !30
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %226) #1, !dbg !30
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !30
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !30
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !30
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %113, !dbg !30
  %233 = ptrtoint ptr addrspace(3) %232 to i32, !dbg !30
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %233) #1, !dbg !30
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !30
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !30
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !30
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %115, !dbg !30
  %240 = ptrtoint ptr addrspace(3) %239 to i32, !dbg !30
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %240) #1, !dbg !30
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !30
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !30
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !30
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %116, !dbg !30
  %247 = ptrtoint ptr addrspace(3) %246 to i32, !dbg !30
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %247) #1, !dbg !30
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !30
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !30
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !30
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %118, !dbg !30
  %254 = ptrtoint ptr addrspace(3) %253 to i32, !dbg !30
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %254) #1, !dbg !30
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !30
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !30
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !30
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !30
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %119, !dbg !30
  %261 = ptrtoint ptr addrspace(3) %260 to i32, !dbg !30
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %261) #1, !dbg !30
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !30
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !30
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !30
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !30
  %.idx98 = shl i32 %209, 13, !dbg !33
  %267 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx98, !dbg !33
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %267, i32 %125, !dbg !33
  %269 = ptrtoint ptr addrspace(3) %268 to i32, !dbg !33
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %269) #1, !dbg !33
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !33
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !33
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !33
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !33
  %275 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %267, i32 %129, !dbg !33
  %276 = ptrtoint ptr addrspace(3) %275 to i32, !dbg !33
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %276) #1, !dbg !33
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !33
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !33
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !33
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !33
  %282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %267, i32 %130, !dbg !33
  %283 = ptrtoint ptr addrspace(3) %282 to i32, !dbg !33
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %283) #1, !dbg !33
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !33
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !33
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !33
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !33
  %289 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %267, i32 %131, !dbg !33
  %290 = ptrtoint ptr addrspace(3) %289 to i32, !dbg !33
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %290) #1, !dbg !33
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !33
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !33
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !33
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !33
  %296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %214, i32 %215, i32 %216, i32 %217, i32 %271, i32 %272) #1, !dbg !36
  %297 = extractvalue { float, float, float, float } %296, 0, !dbg !36
  %298 = extractvalue { float, float, float, float } %296, 1, !dbg !36
  %299 = extractvalue { float, float, float, float } %296, 2, !dbg !36
  %300 = extractvalue { float, float, float, float } %296, 3, !dbg !36
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %146, float %147, float %148, float %149, i32 %214, i32 %215, i32 %216, i32 %217, i32 %278, i32 %279) #1, !dbg !36
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !36
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !36
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !36
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !36
  %306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %214, i32 %215, i32 %216, i32 %217, i32 %285, i32 %286) #1, !dbg !36
  %307 = extractvalue { float, float, float, float } %306, 0, !dbg !36
  %308 = extractvalue { float, float, float, float } %306, 1, !dbg !36
  %309 = extractvalue { float, float, float, float } %306, 2, !dbg !36
  %310 = extractvalue { float, float, float, float } %306, 3, !dbg !36
  %311 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %154, float %155, float %156, float %157, i32 %214, i32 %215, i32 %216, i32 %217, i32 %292, i32 %293) #1, !dbg !36
  %312 = extractvalue { float, float, float, float } %311, 0, !dbg !36
  %313 = extractvalue { float, float, float, float } %311, 1, !dbg !36
  %314 = extractvalue { float, float, float, float } %311, 2, !dbg !36
  %315 = extractvalue { float, float, float, float } %311, 3, !dbg !36
  %316 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %158, float %159, float %160, float %161, i32 %228, i32 %229, i32 %230, i32 %231, i32 %271, i32 %272) #1, !dbg !36
  %317 = extractvalue { float, float, float, float } %316, 0, !dbg !36
  %318 = extractvalue { float, float, float, float } %316, 1, !dbg !36
  %319 = extractvalue { float, float, float, float } %316, 2, !dbg !36
  %320 = extractvalue { float, float, float, float } %316, 3, !dbg !36
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %162, float %163, float %164, float %165, i32 %228, i32 %229, i32 %230, i32 %231, i32 %278, i32 %279) #1, !dbg !36
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !36
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !36
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !36
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !36
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %166, float %167, float %168, float %169, i32 %228, i32 %229, i32 %230, i32 %231, i32 %285, i32 %286) #1, !dbg !36
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !36
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !36
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !36
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !36
  %331 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %170, float %171, float %172, float %173, i32 %228, i32 %229, i32 %230, i32 %231, i32 %292, i32 %293) #1, !dbg !36
  %332 = extractvalue { float, float, float, float } %331, 0, !dbg !36
  %333 = extractvalue { float, float, float, float } %331, 1, !dbg !36
  %334 = extractvalue { float, float, float, float } %331, 2, !dbg !36
  %335 = extractvalue { float, float, float, float } %331, 3, !dbg !36
  %336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %242, i32 %243, i32 %244, i32 %245, i32 %271, i32 %272) #1, !dbg !36
  %337 = extractvalue { float, float, float, float } %336, 0, !dbg !36
  %338 = extractvalue { float, float, float, float } %336, 1, !dbg !36
  %339 = extractvalue { float, float, float, float } %336, 2, !dbg !36
  %340 = extractvalue { float, float, float, float } %336, 3, !dbg !36
  %341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %242, i32 %243, i32 %244, i32 %245, i32 %278, i32 %279) #1, !dbg !36
  %342 = extractvalue { float, float, float, float } %341, 0, !dbg !36
  %343 = extractvalue { float, float, float, float } %341, 1, !dbg !36
  %344 = extractvalue { float, float, float, float } %341, 2, !dbg !36
  %345 = extractvalue { float, float, float, float } %341, 3, !dbg !36
  %346 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %242, i32 %243, i32 %244, i32 %245, i32 %285, i32 %286) #1, !dbg !36
  %347 = extractvalue { float, float, float, float } %346, 0, !dbg !36
  %348 = extractvalue { float, float, float, float } %346, 1, !dbg !36
  %349 = extractvalue { float, float, float, float } %346, 2, !dbg !36
  %350 = extractvalue { float, float, float, float } %346, 3, !dbg !36
  %351 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %186, float %187, float %188, float %189, i32 %242, i32 %243, i32 %244, i32 %245, i32 %292, i32 %293) #1, !dbg !36
  %352 = extractvalue { float, float, float, float } %351, 0, !dbg !36
  %353 = extractvalue { float, float, float, float } %351, 1, !dbg !36
  %354 = extractvalue { float, float, float, float } %351, 2, !dbg !36
  %355 = extractvalue { float, float, float, float } %351, 3, !dbg !36
  %356 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %190, float %191, float %192, float %193, i32 %256, i32 %257, i32 %258, i32 %259, i32 %271, i32 %272) #1, !dbg !36
  %357 = extractvalue { float, float, float, float } %356, 0, !dbg !36
  %358 = extractvalue { float, float, float, float } %356, 1, !dbg !36
  %359 = extractvalue { float, float, float, float } %356, 2, !dbg !36
  %360 = extractvalue { float, float, float, float } %356, 3, !dbg !36
  %361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %194, float %195, float %196, float %197, i32 %256, i32 %257, i32 %258, i32 %259, i32 %278, i32 %279) #1, !dbg !36
  %362 = extractvalue { float, float, float, float } %361, 0, !dbg !36
  %363 = extractvalue { float, float, float, float } %361, 1, !dbg !36
  %364 = extractvalue { float, float, float, float } %361, 2, !dbg !36
  %365 = extractvalue { float, float, float, float } %361, 3, !dbg !36
  %366 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %198, float %199, float %200, float %201, i32 %256, i32 %257, i32 %258, i32 %259, i32 %285, i32 %286) #1, !dbg !36
  %367 = extractvalue { float, float, float, float } %366, 0, !dbg !36
  %368 = extractvalue { float, float, float, float } %366, 1, !dbg !36
  %369 = extractvalue { float, float, float, float } %366, 2, !dbg !36
  %370 = extractvalue { float, float, float, float } %366, 3, !dbg !36
  %371 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %256, i32 %257, i32 %258, i32 %259, i32 %292, i32 %293) #1, !dbg !36
  %372 = extractvalue { float, float, float, float } %371, 0, !dbg !36
  %373 = extractvalue { float, float, float, float } %371, 1, !dbg !36
  %374 = extractvalue { float, float, float, float } %371, 2, !dbg !36
  %375 = extractvalue { float, float, float, float } %371, 3, !dbg !36
  %376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %297, float %298, float %299, float %300, i32 %221, i32 %222, i32 %223, i32 %224, i32 %273, i32 %274) #1, !dbg !36
  %377 = extractvalue { float, float, float, float } %376, 0, !dbg !36
  %378 = extractvalue { float, float, float, float } %376, 1, !dbg !36
  %379 = extractvalue { float, float, float, float } %376, 2, !dbg !36
  %380 = extractvalue { float, float, float, float } %376, 3, !dbg !36
  %381 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %221, i32 %222, i32 %223, i32 %224, i32 %280, i32 %281) #1, !dbg !36
  %382 = extractvalue { float, float, float, float } %381, 0, !dbg !36
  %383 = extractvalue { float, float, float, float } %381, 1, !dbg !36
  %384 = extractvalue { float, float, float, float } %381, 2, !dbg !36
  %385 = extractvalue { float, float, float, float } %381, 3, !dbg !36
  %386 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %307, float %308, float %309, float %310, i32 %221, i32 %222, i32 %223, i32 %224, i32 %287, i32 %288) #1, !dbg !36
  %387 = extractvalue { float, float, float, float } %386, 0, !dbg !36
  %388 = extractvalue { float, float, float, float } %386, 1, !dbg !36
  %389 = extractvalue { float, float, float, float } %386, 2, !dbg !36
  %390 = extractvalue { float, float, float, float } %386, 3, !dbg !36
  %391 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %312, float %313, float %314, float %315, i32 %221, i32 %222, i32 %223, i32 %224, i32 %294, i32 %295) #1, !dbg !36
  %392 = extractvalue { float, float, float, float } %391, 0, !dbg !36
  %393 = extractvalue { float, float, float, float } %391, 1, !dbg !36
  %394 = extractvalue { float, float, float, float } %391, 2, !dbg !36
  %395 = extractvalue { float, float, float, float } %391, 3, !dbg !36
  %396 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %317, float %318, float %319, float %320, i32 %235, i32 %236, i32 %237, i32 %238, i32 %273, i32 %274) #1, !dbg !36
  %397 = extractvalue { float, float, float, float } %396, 0, !dbg !36
  %398 = extractvalue { float, float, float, float } %396, 1, !dbg !36
  %399 = extractvalue { float, float, float, float } %396, 2, !dbg !36
  %400 = extractvalue { float, float, float, float } %396, 3, !dbg !36
  %401 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %235, i32 %236, i32 %237, i32 %238, i32 %280, i32 %281) #1, !dbg !36
  %402 = extractvalue { float, float, float, float } %401, 0, !dbg !36
  %403 = extractvalue { float, float, float, float } %401, 1, !dbg !36
  %404 = extractvalue { float, float, float, float } %401, 2, !dbg !36
  %405 = extractvalue { float, float, float, float } %401, 3, !dbg !36
  %406 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %235, i32 %236, i32 %237, i32 %238, i32 %287, i32 %288) #1, !dbg !36
  %407 = extractvalue { float, float, float, float } %406, 0, !dbg !36
  %408 = extractvalue { float, float, float, float } %406, 1, !dbg !36
  %409 = extractvalue { float, float, float, float } %406, 2, !dbg !36
  %410 = extractvalue { float, float, float, float } %406, 3, !dbg !36
  %411 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %332, float %333, float %334, float %335, i32 %235, i32 %236, i32 %237, i32 %238, i32 %294, i32 %295) #1, !dbg !36
  %412 = extractvalue { float, float, float, float } %411, 0, !dbg !36
  %413 = extractvalue { float, float, float, float } %411, 1, !dbg !36
  %414 = extractvalue { float, float, float, float } %411, 2, !dbg !36
  %415 = extractvalue { float, float, float, float } %411, 3, !dbg !36
  %416 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %249, i32 %250, i32 %251, i32 %252, i32 %273, i32 %274) #1, !dbg !36
  %417 = extractvalue { float, float, float, float } %416, 0, !dbg !36
  %418 = extractvalue { float, float, float, float } %416, 1, !dbg !36
  %419 = extractvalue { float, float, float, float } %416, 2, !dbg !36
  %420 = extractvalue { float, float, float, float } %416, 3, !dbg !36
  %421 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %249, i32 %250, i32 %251, i32 %252, i32 %280, i32 %281) #1, !dbg !36
  %422 = extractvalue { float, float, float, float } %421, 0, !dbg !36
  %423 = extractvalue { float, float, float, float } %421, 1, !dbg !36
  %424 = extractvalue { float, float, float, float } %421, 2, !dbg !36
  %425 = extractvalue { float, float, float, float } %421, 3, !dbg !36
  %426 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %249, i32 %250, i32 %251, i32 %252, i32 %287, i32 %288) #1, !dbg !36
  %427 = extractvalue { float, float, float, float } %426, 0, !dbg !36
  %428 = extractvalue { float, float, float, float } %426, 1, !dbg !36
  %429 = extractvalue { float, float, float, float } %426, 2, !dbg !36
  %430 = extractvalue { float, float, float, float } %426, 3, !dbg !36
  %431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %352, float %353, float %354, float %355, i32 %249, i32 %250, i32 %251, i32 %252, i32 %294, i32 %295) #1, !dbg !36
  %432 = extractvalue { float, float, float, float } %431, 0, !dbg !36
  %433 = extractvalue { float, float, float, float } %431, 1, !dbg !36
  %434 = extractvalue { float, float, float, float } %431, 2, !dbg !36
  %435 = extractvalue { float, float, float, float } %431, 3, !dbg !36
  %436 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %357, float %358, float %359, float %360, i32 %263, i32 %264, i32 %265, i32 %266, i32 %273, i32 %274) #1, !dbg !36
  %437 = extractvalue { float, float, float, float } %436, 0, !dbg !36
  %438 = extractvalue { float, float, float, float } %436, 1, !dbg !36
  %439 = extractvalue { float, float, float, float } %436, 2, !dbg !36
  %440 = extractvalue { float, float, float, float } %436, 3, !dbg !36
  %441 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %362, float %363, float %364, float %365, i32 %263, i32 %264, i32 %265, i32 %266, i32 %280, i32 %281) #1, !dbg !36
  %442 = extractvalue { float, float, float, float } %441, 0, !dbg !36
  %443 = extractvalue { float, float, float, float } %441, 1, !dbg !36
  %444 = extractvalue { float, float, float, float } %441, 2, !dbg !36
  %445 = extractvalue { float, float, float, float } %441, 3, !dbg !36
  %446 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %367, float %368, float %369, float %370, i32 %263, i32 %264, i32 %265, i32 %266, i32 %287, i32 %288) #1, !dbg !36
  %447 = extractvalue { float, float, float, float } %446, 0, !dbg !36
  %448 = extractvalue { float, float, float, float } %446, 1, !dbg !36
  %449 = extractvalue { float, float, float, float } %446, 2, !dbg !36
  %450 = extractvalue { float, float, float, float } %446, 3, !dbg !36
  %451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %372, float %373, float %374, float %375, i32 %263, i32 %264, i32 %265, i32 %266, i32 %294, i32 %295) #1, !dbg !36
  %452 = extractvalue { float, float, float, float } %451, 0, !dbg !36
  %453 = extractvalue { float, float, float, float } %451, 1, !dbg !36
  %454 = extractvalue { float, float, float, float } %451, 2, !dbg !36
  %455 = extractvalue { float, float, float, float } %451, 3, !dbg !36
  %456 = add i32 %141, 1, !dbg !35
  %457 = icmp slt i32 %456, 2, !dbg !35
  %458 = select i1 %457, i32 %456, i32 0, !dbg !35
  %459 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %460 = add nuw nsw i64 %459, %132
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %460, !dbg !29
  %gep301 = getelementptr bfloat, ptr addrspace(1) %invariant.gep300, i64 %460, !dbg !29
  %.idx99 = shl i32 %458, 12, !dbg !30
  %461 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx99, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %462 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %50, !dbg !30
  %463 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %52, !dbg !30
  %464 = select i1 %206, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %462, ptr addrspace(1) %gep, i32 %464) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %463, ptr addrspace(1) %gep301, i32 %464) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep303 = getelementptr bfloat, ptr addrspace(1) %invariant.gep302, i64 %460, !dbg !32
  %gep305 = getelementptr bfloat, ptr addrspace(1) %invariant.gep304, i64 %460, !dbg !32
  %gep307 = getelementptr bfloat, ptr addrspace(1) %invariant.gep306, i64 %460, !dbg !32
  %gep309 = getelementptr bfloat, ptr addrspace(1) %invariant.gep308, i64 %460, !dbg !32
  %.idx100 = shl i32 %458, 13, !dbg !33
  %465 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx100, !dbg !33
  %466 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %465, i32 %50, !dbg !33
  %467 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %465, i32 %52, !dbg !33
  %468 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %465, i32 %68, !dbg !33
  %469 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %465, i32 %70, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %466, ptr addrspace(1) %gep303, i32 %464) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %467, ptr addrspace(1) %gep305, i32 %464) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %468, ptr addrspace(1) %gep307, i32 %464) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %469, ptr addrspace(1) %gep309, i32 %464) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 320, !dbg !35
  br i1 %exitcond.not, label %470, label %139, !dbg !35

470:                                              ; preds = %139
  %471 = and i32 %24, 120, !dbg !22
  %472 = or disjoint i32 %23, %471, !dbg !23
  %473 = lshr i32 %15, 4, !dbg !19
  %474 = and i32 %473, 7, !dbg !19
  %475 = or disjoint i32 %474, %14, !dbg !20
  %476 = or disjoint i32 %475, 56, !dbg !20
  %477 = or disjoint i32 %475, 48, !dbg !20
  %478 = or disjoint i32 %475, 40, !dbg !20
  %479 = or disjoint i32 %475, 32, !dbg !20
  %480 = or disjoint i32 %475, 24, !dbg !20
  %481 = or disjoint i32 %475, 16, !dbg !20
  %482 = or disjoint i32 %475, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %483 = icmp slt i32 %475, 512, !dbg !38
  %484 = icmp slt i32 %482, 512, !dbg !38
  %485 = icmp slt i32 %481, 512, !dbg !38
  %486 = icmp slt i32 %480, 512, !dbg !38
  %487 = icmp slt i32 %479, 512, !dbg !38
  %488 = icmp slt i32 %478, 512, !dbg !38
  %489 = icmp slt i32 %477, 512, !dbg !38
  %490 = icmp slt i32 %476, 512, !dbg !38
  %491 = icmp slt i32 %472, 4096, !dbg !39
  %492 = and i1 %483, %491, !dbg !40
  %493 = and i1 %484, %491, !dbg !40
  %494 = and i1 %485, %491, !dbg !40
  %495 = and i1 %486, %491, !dbg !40
  %496 = and i1 %487, %491, !dbg !40
  %497 = and i1 %488, %491, !dbg !40
  %498 = and i1 %489, %491, !dbg !40
  %499 = and i1 %490, %491, !dbg !40
  %500 = shl i32 %475, 12, !dbg !41
  %501 = shl i32 %482, 12, !dbg !41
  %502 = shl i32 %481, 12, !dbg !41
  %503 = shl i32 %480, 12, !dbg !41
  %504 = shl i32 %479, 12, !dbg !41
  %505 = shl i32 %478, 12, !dbg !41
  %506 = shl i32 %477, 12, !dbg !41
  %507 = shl i32 %476, 12, !dbg !41
  %508 = add i32 %500, %472, !dbg !42
  %509 = add i32 %501, %472, !dbg !42
  %510 = add i32 %502, %472, !dbg !42
  %511 = add i32 %503, %472, !dbg !42
  %512 = add i32 %504, %472, !dbg !42
  %513 = add i32 %505, %472, !dbg !42
  %514 = add i32 %506, %472, !dbg !42
  %515 = add i32 %507, %472, !dbg !42
  %516 = sext i32 %508 to i64, !dbg !43
  %517 = getelementptr bfloat, ptr addrspace(1) %2, i64 %516, !dbg !43
  %518 = sext i32 %509 to i64, !dbg !43
  %519 = getelementptr bfloat, ptr addrspace(1) %2, i64 %518, !dbg !43
  %520 = sext i32 %510 to i64, !dbg !43
  %521 = getelementptr bfloat, ptr addrspace(1) %2, i64 %520, !dbg !43
  %522 = sext i32 %511 to i64, !dbg !43
  %523 = getelementptr bfloat, ptr addrspace(1) %2, i64 %522, !dbg !43
  %524 = sext i32 %512 to i64, !dbg !43
  %525 = getelementptr bfloat, ptr addrspace(1) %2, i64 %524, !dbg !43
  %526 = sext i32 %513 to i64, !dbg !43
  %527 = getelementptr bfloat, ptr addrspace(1) %2, i64 %526, !dbg !43
  %528 = sext i32 %514 to i64, !dbg !43
  %529 = getelementptr bfloat, ptr addrspace(1) %2, i64 %528, !dbg !43
  %530 = sext i32 %515 to i64, !dbg !43
  %531 = getelementptr bfloat, ptr addrspace(1) %2, i64 %530, !dbg !43
  %532 = fptrunc float %377 to bfloat, !dbg !44
  %533 = fptrunc float %378 to bfloat, !dbg !44
  %534 = fptrunc float %379 to bfloat, !dbg !44
  %535 = fptrunc float %380 to bfloat, !dbg !44
  %536 = fptrunc float %382 to bfloat, !dbg !44
  %537 = fptrunc float %383 to bfloat, !dbg !44
  %538 = fptrunc float %384 to bfloat, !dbg !44
  %539 = fptrunc float %385 to bfloat, !dbg !44
  %540 = fptrunc float %387 to bfloat, !dbg !44
  %541 = fptrunc float %388 to bfloat, !dbg !44
  %542 = fptrunc float %389 to bfloat, !dbg !44
  %543 = fptrunc float %390 to bfloat, !dbg !44
  %544 = fptrunc float %392 to bfloat, !dbg !44
  %545 = fptrunc float %393 to bfloat, !dbg !44
  %546 = fptrunc float %394 to bfloat, !dbg !44
  %547 = fptrunc float %395 to bfloat, !dbg !44
  %548 = fptrunc float %397 to bfloat, !dbg !44
  %549 = fptrunc float %398 to bfloat, !dbg !44
  %550 = fptrunc float %399 to bfloat, !dbg !44
  %551 = fptrunc float %400 to bfloat, !dbg !44
  %552 = fptrunc float %402 to bfloat, !dbg !44
  %553 = fptrunc float %403 to bfloat, !dbg !44
  %554 = fptrunc float %404 to bfloat, !dbg !44
  %555 = fptrunc float %405 to bfloat, !dbg !44
  %556 = fptrunc float %407 to bfloat, !dbg !44
  %557 = fptrunc float %408 to bfloat, !dbg !44
  %558 = fptrunc float %409 to bfloat, !dbg !44
  %559 = fptrunc float %410 to bfloat, !dbg !44
  %560 = fptrunc float %412 to bfloat, !dbg !44
  %561 = fptrunc float %413 to bfloat, !dbg !44
  %562 = fptrunc float %414 to bfloat, !dbg !44
  %563 = fptrunc float %415 to bfloat, !dbg !44
  %564 = fptrunc float %417 to bfloat, !dbg !44
  %565 = fptrunc float %418 to bfloat, !dbg !44
  %566 = fptrunc float %419 to bfloat, !dbg !44
  %567 = fptrunc float %420 to bfloat, !dbg !44
  %568 = fptrunc float %422 to bfloat, !dbg !44
  %569 = fptrunc float %423 to bfloat, !dbg !44
  %570 = fptrunc float %424 to bfloat, !dbg !44
  %571 = fptrunc float %425 to bfloat, !dbg !44
  %572 = fptrunc float %427 to bfloat, !dbg !44
  %573 = fptrunc float %428 to bfloat, !dbg !44
  %574 = fptrunc float %429 to bfloat, !dbg !44
  %575 = fptrunc float %430 to bfloat, !dbg !44
  %576 = fptrunc float %432 to bfloat, !dbg !44
  %577 = fptrunc float %433 to bfloat, !dbg !44
  %578 = fptrunc float %434 to bfloat, !dbg !44
  %579 = fptrunc float %435 to bfloat, !dbg !44
  %580 = fptrunc float %437 to bfloat, !dbg !44
  %581 = fptrunc float %438 to bfloat, !dbg !44
  %582 = fptrunc float %439 to bfloat, !dbg !44
  %583 = fptrunc float %440 to bfloat, !dbg !44
  %584 = fptrunc float %442 to bfloat, !dbg !44
  %585 = fptrunc float %443 to bfloat, !dbg !44
  %586 = fptrunc float %444 to bfloat, !dbg !44
  %587 = fptrunc float %445 to bfloat, !dbg !44
  %588 = fptrunc float %447 to bfloat, !dbg !44
  %589 = fptrunc float %448 to bfloat, !dbg !44
  %590 = fptrunc float %449 to bfloat, !dbg !44
  %591 = fptrunc float %450 to bfloat, !dbg !44
  %592 = fptrunc float %452 to bfloat, !dbg !44
  %593 = fptrunc float %453 to bfloat, !dbg !44
  %594 = fptrunc float %454 to bfloat, !dbg !44
  %595 = fptrunc float %455 to bfloat, !dbg !44
  %596 = shl i32 %15, 1, !dbg !44
  %597 = and i32 %596, 6, !dbg !44
  %598 = and i32 %104, 384, !dbg !44
  %599 = or disjoint i32 %598, %597, !dbg !44
  %600 = shl nuw nsw i32 %17, 5, !dbg !44
  %601 = or disjoint i32 %599, %600, !dbg !44
  %602 = or disjoint i32 %122, %601, !dbg !44
  %603 = and i32 %24, 1016, !dbg !44
  %604 = lshr i32 %601, 4, !dbg !44
  %605 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %604, !dbg !44
  %606 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %605, i32 %602, !dbg !44
  %607 = bitcast bfloat %532 to i16, !dbg !44
  %608 = bitcast bfloat %533 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %606, i16 %607, i16 %608, i1 true) #1, !dbg !44
  %609 = or disjoint i32 %602, 1024, !dbg !44
  %610 = lshr i32 %609, 4, !dbg !44
  %611 = and i32 %610, 268435448, !dbg !44
  %612 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %611, !dbg !44
  %613 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %612, i32 %609, !dbg !44
  %614 = bitcast bfloat %534 to i16, !dbg !44
  %615 = bitcast bfloat %535 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %613, i16 %614, i16 %615, i1 true) #1, !dbg !44
  %616 = or disjoint i32 %602, 32, !dbg !44
  %617 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %605, i32 %616, !dbg !44
  %618 = bitcast bfloat %536 to i16, !dbg !44
  %619 = bitcast bfloat %537 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %617, i16 %618, i16 %619, i1 true) #1, !dbg !44
  %620 = or disjoint i32 %602, 1056, !dbg !44
  %621 = lshr i32 %620, 4, !dbg !44
  %622 = and i32 %621, 268435448, !dbg !44
  %623 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %622, !dbg !44
  %624 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %623, i32 %620, !dbg !44
  %625 = bitcast bfloat %538 to i16, !dbg !44
  %626 = bitcast bfloat %539 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %624, i16 %625, i16 %626, i1 true) #1, !dbg !44
  %627 = or disjoint i32 %602, 64, !dbg !44
  %628 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %605, i32 %627, !dbg !44
  %629 = bitcast bfloat %540 to i16, !dbg !44
  %630 = bitcast bfloat %541 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %629, i16 %630, i1 true) #1, !dbg !44
  %631 = or disjoint i32 %602, 1088, !dbg !44
  %632 = lshr i32 %631, 4, !dbg !44
  %633 = and i32 %632, 268435448, !dbg !44
  %634 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %633, !dbg !44
  %635 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %634, i32 %631, !dbg !44
  %636 = bitcast bfloat %542 to i16, !dbg !44
  %637 = bitcast bfloat %543 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %635, i16 %636, i16 %637, i1 true) #1, !dbg !44
  %638 = or disjoint i32 %602, 96, !dbg !44
  %639 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %605, i32 %638, !dbg !44
  %640 = bitcast bfloat %544 to i16, !dbg !44
  %641 = bitcast bfloat %545 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %639, i16 %640, i16 %641, i1 true) #1, !dbg !44
  %642 = or disjoint i32 %602, 1120, !dbg !44
  %643 = lshr i32 %642, 4, !dbg !44
  %644 = and i32 %643, 268435448, !dbg !44
  %645 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %644, !dbg !44
  %646 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %645, i32 %642, !dbg !44
  %647 = bitcast bfloat %546 to i16, !dbg !44
  %648 = bitcast bfloat %547 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %646, i16 %647, i16 %648, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %649 = lshr i32 %24, 4, !dbg !44
  %650 = and i32 %649, 56, !dbg !44
  %651 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %650, !dbg !44
  %652 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %651, i32 %603, !dbg !44
  %653 = load <4 x i32>, ptr addrspace(3) %652, align 16, !dbg !44
  %654 = or disjoint i32 %603, 1024, !dbg !44
  %655 = lshr i32 %654, 4, !dbg !44
  %656 = and i32 %655, 120, !dbg !44
  %657 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %656, !dbg !44
  %658 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %657, i32 %654, !dbg !44
  %659 = load <4 x i32>, ptr addrspace(3) %658, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %660 = bitcast bfloat %548 to i16, !dbg !44
  %661 = bitcast bfloat %549 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %606, i16 %660, i16 %661, i1 true) #1, !dbg !44
  %662 = bitcast bfloat %550 to i16, !dbg !44
  %663 = bitcast bfloat %551 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %613, i16 %662, i16 %663, i1 true) #1, !dbg !44
  %664 = bitcast bfloat %552 to i16, !dbg !44
  %665 = bitcast bfloat %553 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %617, i16 %664, i16 %665, i1 true) #1, !dbg !44
  %666 = bitcast bfloat %554 to i16, !dbg !44
  %667 = bitcast bfloat %555 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %624, i16 %666, i16 %667, i1 true) #1, !dbg !44
  %668 = bitcast bfloat %556 to i16, !dbg !44
  %669 = bitcast bfloat %557 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %668, i16 %669, i1 true) #1, !dbg !44
  %670 = bitcast bfloat %558 to i16, !dbg !44
  %671 = bitcast bfloat %559 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %635, i16 %670, i16 %671, i1 true) #1, !dbg !44
  %672 = bitcast bfloat %560 to i16, !dbg !44
  %673 = bitcast bfloat %561 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %639, i16 %672, i16 %673, i1 true) #1, !dbg !44
  %674 = bitcast bfloat %562 to i16, !dbg !44
  %675 = bitcast bfloat %563 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %646, i16 %674, i16 %675, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %676 = load <4 x i32>, ptr addrspace(3) %652, align 16, !dbg !44
  %677 = load <4 x i32>, ptr addrspace(3) %658, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %678 = bitcast bfloat %564 to i16, !dbg !44
  %679 = bitcast bfloat %565 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %606, i16 %678, i16 %679, i1 true) #1, !dbg !44
  %680 = bitcast bfloat %566 to i16, !dbg !44
  %681 = bitcast bfloat %567 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %613, i16 %680, i16 %681, i1 true) #1, !dbg !44
  %682 = bitcast bfloat %568 to i16, !dbg !44
  %683 = bitcast bfloat %569 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %617, i16 %682, i16 %683, i1 true) #1, !dbg !44
  %684 = bitcast bfloat %570 to i16, !dbg !44
  %685 = bitcast bfloat %571 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %624, i16 %684, i16 %685, i1 true) #1, !dbg !44
  %686 = bitcast bfloat %572 to i16, !dbg !44
  %687 = bitcast bfloat %573 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %686, i16 %687, i1 true) #1, !dbg !44
  %688 = bitcast bfloat %574 to i16, !dbg !44
  %689 = bitcast bfloat %575 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %635, i16 %688, i16 %689, i1 true) #1, !dbg !44
  %690 = bitcast bfloat %576 to i16, !dbg !44
  %691 = bitcast bfloat %577 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %639, i16 %690, i16 %691, i1 true) #1, !dbg !44
  %692 = bitcast bfloat %578 to i16, !dbg !44
  %693 = bitcast bfloat %579 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %646, i16 %692, i16 %693, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %694 = load <4 x i32>, ptr addrspace(3) %652, align 16, !dbg !44
  %695 = load <4 x i32>, ptr addrspace(3) %658, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %696 = bitcast bfloat %580 to i16, !dbg !44
  %697 = bitcast bfloat %581 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %606, i16 %696, i16 %697, i1 true) #1, !dbg !44
  %698 = bitcast bfloat %582 to i16, !dbg !44
  %699 = bitcast bfloat %583 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %613, i16 %698, i16 %699, i1 true) #1, !dbg !44
  %700 = bitcast bfloat %584 to i16, !dbg !44
  %701 = bitcast bfloat %585 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %617, i16 %700, i16 %701, i1 true) #1, !dbg !44
  %702 = bitcast bfloat %586 to i16, !dbg !44
  %703 = bitcast bfloat %587 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %624, i16 %702, i16 %703, i1 true) #1, !dbg !44
  %704 = bitcast bfloat %588 to i16, !dbg !44
  %705 = bitcast bfloat %589 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %628, i16 %704, i16 %705, i1 true) #1, !dbg !44
  %706 = bitcast bfloat %590 to i16, !dbg !44
  %707 = bitcast bfloat %591 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %635, i16 %706, i16 %707, i1 true) #1, !dbg !44
  %708 = bitcast bfloat %592 to i16, !dbg !44
  %709 = bitcast bfloat %593 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %639, i16 %708, i16 %709, i1 true) #1, !dbg !44
  %710 = bitcast bfloat %594 to i16, !dbg !44
  %711 = bitcast bfloat %595 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %646, i16 %710, i16 %711, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %712 = load <4 x i32>, ptr addrspace(3) %652, align 16, !dbg !44
  %713 = load <4 x i32>, ptr addrspace(3) %658, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %653, i64 0, !dbg !44
  %.extract107 = extractelement <4 x i32> %653, i64 1, !dbg !44
  %.extract109 = extractelement <4 x i32> %653, i64 2, !dbg !44
  %.extract111 = extractelement <4 x i32> %653, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract107, i32 %.extract109, i32 %.extract111, ptr addrspace(1) %517, i1 %492) #1, !dbg !44
  %.extract113 = extractelement <4 x i32> %659, i64 0, !dbg !44
  %.extract115 = extractelement <4 x i32> %659, i64 1, !dbg !44
  %.extract117 = extractelement <4 x i32> %659, i64 2, !dbg !44
  %.extract119 = extractelement <4 x i32> %659, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract113, i32 %.extract115, i32 %.extract117, i32 %.extract119, ptr addrspace(1) %519, i1 %493) #1, !dbg !44
  %.extract121 = extractelement <4 x i32> %676, i64 0, !dbg !44
  %.extract123 = extractelement <4 x i32> %676, i64 1, !dbg !44
  %.extract125 = extractelement <4 x i32> %676, i64 2, !dbg !44
  %.extract127 = extractelement <4 x i32> %676, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract121, i32 %.extract123, i32 %.extract125, i32 %.extract127, ptr addrspace(1) %521, i1 %494) #1, !dbg !44
  %.extract129 = extractelement <4 x i32> %677, i64 0, !dbg !44
  %.extract131 = extractelement <4 x i32> %677, i64 1, !dbg !44
  %.extract133 = extractelement <4 x i32> %677, i64 2, !dbg !44
  %.extract135 = extractelement <4 x i32> %677, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract129, i32 %.extract131, i32 %.extract133, i32 %.extract135, ptr addrspace(1) %523, i1 %495) #1, !dbg !44
  %.extract137 = extractelement <4 x i32> %694, i64 0, !dbg !44
  %.extract139 = extractelement <4 x i32> %694, i64 1, !dbg !44
  %.extract141 = extractelement <4 x i32> %694, i64 2, !dbg !44
  %.extract143 = extractelement <4 x i32> %694, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract137, i32 %.extract139, i32 %.extract141, i32 %.extract143, ptr addrspace(1) %525, i1 %496) #1, !dbg !44
  %.extract145 = extractelement <4 x i32> %695, i64 0, !dbg !44
  %.extract147 = extractelement <4 x i32> %695, i64 1, !dbg !44
  %.extract149 = extractelement <4 x i32> %695, i64 2, !dbg !44
  %.extract151 = extractelement <4 x i32> %695, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract145, i32 %.extract147, i32 %.extract149, i32 %.extract151, ptr addrspace(1) %527, i1 %497) #1, !dbg !44
  %.extract153 = extractelement <4 x i32> %712, i64 0, !dbg !44
  %.extract155 = extractelement <4 x i32> %712, i64 1, !dbg !44
  %.extract157 = extractelement <4 x i32> %712, i64 2, !dbg !44
  %.extract159 = extractelement <4 x i32> %712, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract153, i32 %.extract155, i32 %.extract157, i32 %.extract159, ptr addrspace(1) %529, i1 %498) #1, !dbg !44
  %.extract161 = extractelement <4 x i32> %713, i64 0, !dbg !44
  %.extract163 = extractelement <4 x i32> %713, i64 1, !dbg !44
  %.extract165 = extractelement <4 x i32> %713, i64 2, !dbg !44
  %.extract167 = extractelement <4 x i32> %713, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract161, i32 %.extract163, i32 %.extract165, i32 %.extract167, ptr addrspace(1) %531, i1 %499) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv7eikonbgs4sms63wlfzuwxpyp3w3vr5xmufaajhk34gu46g3b.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 31, scope: !6)
!27 = !DILocation(line: 77, column: 56, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
