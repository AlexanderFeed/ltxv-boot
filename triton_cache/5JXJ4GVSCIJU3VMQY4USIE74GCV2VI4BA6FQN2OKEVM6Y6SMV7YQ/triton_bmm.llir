; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 16, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 3, !dbg !19
  %18 = and i32 %17, 15, !dbg !19
  %19 = and i32 %15, 128, !dbg !19
  %20 = lshr exact i32 %19, 3, !dbg !19
  %21 = or disjoint i32 %18, %20, !dbg !19
  %22 = or disjoint i32 %14, %21, !dbg !20
  %23 = shl nsw i32 %13, 6, !dbg !21
  %24 = lshr i32 %15, 2, !dbg !22
  %25 = and i32 %24, 63, !dbg !22
  %26 = shl i32 %15, 3, !dbg !22
  %27 = and i32 %26, 24, !dbg !22
  %28 = or disjoint i32 %23, %25, !dbg !23
  %29 = srem i32 %22, 512, !dbg !24
  %30 = srem i32 %28, 512, !dbg !25
  %31 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %32 = shl nsw i32 %29, 12, !dbg !27
  %33 = shl i32 %15, 2, !dbg !28
  %34 = and i32 %33, 8, !dbg !28
  %35 = and i32 %33, 16, !dbg !28
  %36 = and i32 %33, 28, !dbg !28
  %37 = shl i32 %31, 6, !dbg !29
  %38 = or disjoint i32 %36, %37, !dbg !30
  %39 = add i32 %38, %32, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !32
  %42 = shl nsw i32 %30, 12, !dbg !33
  %43 = or disjoint i32 %27, %37, !dbg !34
  %44 = add i32 %43, %42, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !36
  %47 = lshr exact i32 %16, 1, !dbg !37
  %48 = lshr i32 %15, 1, !dbg !37
  %49 = and i32 %48, 24, !dbg !37
  %50 = xor i32 %49, %36, !dbg !37
  %51 = shl nuw nsw i32 %21, 5, !dbg !37
  %52 = or disjoint i32 %51, %50, !dbg !37
  %53 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %52, !dbg !37
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %53, ptr addrspace(1) %41, i32 8) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %54 = xor i32 %26, %15, !dbg !38
  %55 = and i32 %54, 24, !dbg !38
  %56 = shl nuw nsw i32 %25, 5, !dbg !38
  %57 = or disjoint i32 %55, %56, !dbg !38
  %58 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %58, ptr addrspace(1) %46, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %59 = getelementptr i8, ptr addrspace(1) %41, i64 64, !dbg !39
  %60 = getelementptr i8, ptr addrspace(1) %46, i64 64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %61 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %52, !dbg !37
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %61, ptr addrspace(1) %59, i32 8) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %60, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %63 = getelementptr i8, ptr addrspace(1) %41, i64 128, !dbg !39
  %64 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %65 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %52, !dbg !37
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %63, i32 0) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %64, i32 0) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %41, i64 192, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %46, i64 192, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %52, !dbg !37
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %67, i32 0) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %57, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %68, i32 0) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %71 = and i32 %33, 24
  %72 = and i32 %15, 7
  %73 = and i32 %15, 15
  %74 = xor i32 %71, %47
  %75 = or disjoint i32 %20, %73
  %76 = shl nuw nsw i32 %75, 5
  %77 = or disjoint i32 %76, %74
  %78 = or disjoint i32 %34, 16
  %79 = or disjoint i32 %47, %35
  %80 = xor i32 %79, %78
  %81 = or disjoint i32 %80, %76
  %82 = xor i32 %33, %15
  %83 = and i32 %82, 24
  %84 = and i32 %24, 24
  %85 = or disjoint i32 %84, %72
  %86 = shl nuw nsw i32 %85, 5
  %87 = or disjoint i32 %86, %83
  %88 = or disjoint i32 %87, 1024
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %89 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %77, !dbg !37
  %90 = ptrtoint ptr addrspace(3) %89 to i32, !dbg !37
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %90) #1, !dbg !37
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !37
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !37
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %81, !dbg !37
  %97 = ptrtoint ptr addrspace(3) %96 to i32, !dbg !37
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %97) #1, !dbg !37
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !37
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !37
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !37
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !37
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %87, !dbg !38
  %104 = ptrtoint ptr addrspace(3) %103 to i32, !dbg !38
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %104) #1, !dbg !38
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %88, !dbg !38
  %111 = ptrtoint ptr addrspace(3) %110 to i32, !dbg !38
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %111) #1, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !38
  %117 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %92, i32 %93, i32 %94, i32 %95, i32 %106, i32 %107) #1, !dbg !41
  %118 = extractvalue { float, float, float, float } %117, 0, !dbg !41
  %119 = extractvalue { float, float, float, float } %117, 1, !dbg !41
  %120 = extractvalue { float, float, float, float } %117, 2, !dbg !41
  %121 = extractvalue { float, float, float, float } %117, 3, !dbg !41
  %122 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %92, i32 %93, i32 %94, i32 %95, i32 %113, i32 %114) #1, !dbg !41
  %123 = extractvalue { float, float, float, float } %122, 0, !dbg !41
  %124 = extractvalue { float, float, float, float } %122, 1, !dbg !41
  %125 = extractvalue { float, float, float, float } %122, 2, !dbg !41
  %126 = extractvalue { float, float, float, float } %122, 3, !dbg !41
  %127 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %118, float %119, float %120, float %121, i32 %99, i32 %100, i32 %101, i32 %102, i32 %108, i32 %109) #1, !dbg !41
  %128 = extractvalue { float, float, float, float } %127, 0, !dbg !41
  %129 = extractvalue { float, float, float, float } %127, 1, !dbg !41
  %130 = extractvalue { float, float, float, float } %127, 2, !dbg !41
  %131 = extractvalue { float, float, float, float } %127, 3, !dbg !41
  %132 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %123, float %124, float %125, float %126, i32 %99, i32 %100, i32 %101, i32 %102, i32 %115, i32 %116) #1, !dbg !41
  %133 = extractvalue { float, float, float, float } %132, 0, !dbg !41
  %134 = extractvalue { float, float, float, float } %132, 1, !dbg !41
  %135 = extractvalue { float, float, float, float } %132, 2, !dbg !41
  %136 = extractvalue { float, float, float, float } %132, 3, !dbg !41
  %137 = getelementptr i8, ptr addrspace(1) %41, i64 256, !dbg !39
  %138 = getelementptr i8, ptr addrspace(1) %46, i64 256, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %53, ptr addrspace(1) %137, i32 0) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %58, ptr addrspace(1) %138, i32 0) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %77, !dbg !37
  %140 = ptrtoint ptr addrspace(3) %139 to i32, !dbg !37
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %140) #1, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !37
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !37
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !37
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !37
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %81, !dbg !37
  %147 = ptrtoint ptr addrspace(3) %146 to i32, !dbg !37
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %147) #1, !dbg !37
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !37
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !37
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !37
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !37
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %87, !dbg !38
  %154 = ptrtoint ptr addrspace(3) %153 to i32, !dbg !38
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %154) #1, !dbg !38
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !38
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !38
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !38
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %88, !dbg !38
  %161 = ptrtoint ptr addrspace(3) %160 to i32, !dbg !38
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %161) #1, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !38
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !38
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !38
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !38
  %167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %128, float %129, float %130, float %131, i32 %142, i32 %143, i32 %144, i32 %145, i32 %156, i32 %157) #1, !dbg !41
  %168 = extractvalue { float, float, float, float } %167, 0, !dbg !41
  %169 = extractvalue { float, float, float, float } %167, 1, !dbg !41
  %170 = extractvalue { float, float, float, float } %167, 2, !dbg !41
  %171 = extractvalue { float, float, float, float } %167, 3, !dbg !41
  %172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %133, float %134, float %135, float %136, i32 %142, i32 %143, i32 %144, i32 %145, i32 %163, i32 %164) #1, !dbg !41
  %173 = extractvalue { float, float, float, float } %172, 0, !dbg !41
  %174 = extractvalue { float, float, float, float } %172, 1, !dbg !41
  %175 = extractvalue { float, float, float, float } %172, 2, !dbg !41
  %176 = extractvalue { float, float, float, float } %172, 3, !dbg !41
  %177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %149, i32 %150, i32 %151, i32 %152, i32 %158, i32 %159) #1, !dbg !41
  %178 = extractvalue { float, float, float, float } %177, 0, !dbg !41
  %179 = extractvalue { float, float, float, float } %177, 1, !dbg !41
  %180 = extractvalue { float, float, float, float } %177, 2, !dbg !41
  %181 = extractvalue { float, float, float, float } %177, 3, !dbg !41
  %182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %173, float %174, float %175, float %176, i32 %149, i32 %150, i32 %151, i32 %152, i32 %165, i32 %166) #1, !dbg !41
  %183 = extractvalue { float, float, float, float } %182, 0, !dbg !41
  %184 = extractvalue { float, float, float, float } %182, 1, !dbg !41
  %185 = extractvalue { float, float, float, float } %182, 2, !dbg !41
  %186 = extractvalue { float, float, float, float } %182, 3, !dbg !41
  %187 = getelementptr i8, ptr addrspace(1) %41, i64 320, !dbg !39
  %188 = getelementptr i8, ptr addrspace(1) %46, i64 320, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep.1 = getelementptr i8, ptr addrspace(3) %53, i32 2048, !dbg !37
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep.1, ptr addrspace(1) %187, i32 0) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %gep48.1 = getelementptr i8, ptr addrspace(3) %58, i32 4096, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep48.1, ptr addrspace(1) %188, i32 0) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %189 = and i32 %26, 56, !dbg !22
  %190 = or disjoint i32 %23, %189, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %191 = icmp slt i32 %22, 512, !dbg !43
  %192 = icmp slt i32 %190, 512, !dbg !44
  %193 = and i1 %191, %192, !dbg !45
  %194 = shl i32 %22, 9, !dbg !46
  %195 = shl i32 %31, 18, !dbg !47
  %196 = add i32 %190, %195, !dbg !48
  %197 = add i32 %196, %194, !dbg !49
  %198 = sext i32 %197 to i64, !dbg !50
  %199 = getelementptr bfloat, ptr addrspace(1) %2, i64 %198, !dbg !50
  %200 = fptrunc float %178 to bfloat, !dbg !51
  %201 = fptrunc float %179 to bfloat, !dbg !51
  %202 = fptrunc float %180 to bfloat, !dbg !51
  %203 = fptrunc float %181 to bfloat, !dbg !51
  %204 = fptrunc float %183 to bfloat, !dbg !51
  %205 = fptrunc float %184 to bfloat, !dbg !51
  %206 = fptrunc float %185 to bfloat, !dbg !51
  %207 = fptrunc float %186 to bfloat, !dbg !51
  %208 = shl i32 %15, 1, !dbg !51
  %209 = and i32 %208, 6, !dbg !51
  %210 = shl i32 %15, 4, !dbg !51
  %211 = and i32 %210, 192, !dbg !51
  %212 = or disjoint i32 %211, %209, !dbg !51
  %213 = shl nuw nsw i32 %16, 4, !dbg !51
  %214 = or disjoint i32 %212, %213, !dbg !51
  %215 = or disjoint i32 %214, %84, !dbg !51
  %216 = shl nuw nsw i32 %19, 3, !dbg !51
  %217 = or disjoint i32 %215, %216, !dbg !51
  %218 = and i32 %26, 1016, !dbg !51
  %219 = or disjoint i32 %218, %216, !dbg !51
  %220 = lshr i32 %217, 3, !dbg !51
  %221 = and i32 %220, 536870904, !dbg !51
  %222 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %221, !dbg !51
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %217, !dbg !51
  %224 = bitcast bfloat %200 to i16, !dbg !51
  %225 = bitcast bfloat %201 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %223, i16 %224, i16 %225, i1 true) #1, !dbg !51
  %226 = or disjoint i32 %217, 512, !dbg !51
  %227 = lshr i32 %226, 3, !dbg !51
  %228 = and i32 %227, 536870904, !dbg !51
  %229 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %228, !dbg !51
  %230 = getelementptr bfloat, ptr addrspace(3) %229, i32 %226, !dbg !51
  %231 = bitcast bfloat %202 to i16, !dbg !51
  %232 = bitcast bfloat %203 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %230, i16 %231, i16 %232, i1 true) #1, !dbg !51
  %233 = or disjoint i32 %217, 32, !dbg !51
  %234 = getelementptr bfloat, ptr addrspace(3) %222, i32 %233, !dbg !51
  %235 = bitcast bfloat %204 to i16, !dbg !51
  %236 = bitcast bfloat %205 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %234, i16 %235, i16 %236, i1 true) #1, !dbg !51
  %237 = or disjoint i32 %217, 544, !dbg !51
  %238 = lshr i32 %237, 3, !dbg !51
  %239 = and i32 %238, 536870904, !dbg !51
  %240 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %239, !dbg !51
  %241 = getelementptr bfloat, ptr addrspace(3) %240, i32 %237, !dbg !51
  %242 = bitcast bfloat %206 to i16, !dbg !51
  %243 = bitcast bfloat %207 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %241, i16 %242, i16 %243, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %244 = lshr exact i32 %219, 3, !dbg !51
  %245 = and i32 %244, 248, !dbg !51
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %245, !dbg !51
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %246, i32 %219, !dbg !51
  %.extract = load i32, ptr addrspace(3) %247, align 16, !dbg !51
  %248 = getelementptr inbounds nuw i8, ptr addrspace(3) %247, i32 4, !dbg !51
  %.extract41 = load i32, ptr addrspace(3) %248, align 4, !dbg !51
  %249 = getelementptr inbounds nuw i8, ptr addrspace(3) %247, i32 8, !dbg !51
  %.extract43 = load i32, ptr addrspace(3) %249, align 8, !dbg !51
  %250 = getelementptr inbounds nuw i8, ptr addrspace(3) %247, i32 12, !dbg !51
  %.extract45 = load i32, ptr addrspace(3) %250, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract41, i32 %.extract43, i32 %.extract45, ptr addrspace(1) %199, i1 %193) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb7i7h6w6qvdzojpeqqkjluj4yqhhj75vtrr2zmif2pxflwsvqsi.py", directory: "/tmp/torchinductor_root/b7")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 57, column: 19, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 43, scope: !6)
!29 = !DILocation(line: 66, column: 72, scope: !6)
!30 = !DILocation(line: 66, column: 40, scope: !6)
!31 = !DILocation(line: 66, column: 66, scope: !6)
!32 = !DILocation(line: 66, column: 13, scope: !6)
!33 = !DILocation(line: 67, column: 54, scope: !6)
!34 = !DILocation(line: 67, column: 39, scope: !6)
!35 = !DILocation(line: 67, column: 66, scope: !6)
!36 = !DILocation(line: 67, column: 13, scope: !6)
!37 = !DILocation(line: 72, column: 24, scope: !6)
!38 = !DILocation(line: 73, column: 24, scope: !6)
!39 = !DILocation(line: 78, column: 13, scope: !6)
!40 = !DILocation(line: 79, column: 13, scope: !6)
!41 = !DILocation(line: 77, column: 25, scope: !6)
!42 = !DILocation(line: 70, column: 25, scope: !6)
!43 = !DILocation(line: 87, column: 20, scope: !6)
!44 = !DILocation(line: 87, column: 34, scope: !6)
!45 = !DILocation(line: 87, column: 26, scope: !6)
!46 = !DILocation(line: 90, column: 25, scope: !6)
!47 = !DILocation(line: 90, column: 40, scope: !6)
!48 = !DILocation(line: 90, column: 21, scope: !6)
!49 = !DILocation(line: 90, column: 33, scope: !6)
!50 = !DILocation(line: 91, column: 25, scope: !6)
!51 = !DILocation(line: 91, column: 67, scope: !6)
!52 = !DILocation(line: 91, column: 4, scope: !6)
