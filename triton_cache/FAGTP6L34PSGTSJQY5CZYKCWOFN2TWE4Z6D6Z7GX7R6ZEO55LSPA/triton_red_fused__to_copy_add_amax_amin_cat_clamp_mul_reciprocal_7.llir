; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 4112, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 3, !dbg !11
  %14 = and i32 %13, 4088, !dbg !11
  %15 = or disjoint i32 %14, 4, !dbg !11
  %16 = mul i32 %9, 3072, !dbg !12
  %17 = mul i32 %9, 12288, !dbg !13
  %18 = add i32 %17, -3072
  %19 = add i32 %18, %15
  %20 = zext nneg i32 %14 to i64, !dbg !14
  br label %21, !dbg !14

21:                                               ; preds = %8, %__nv_tanhf.exit287
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit287 ]
  %22 = phi <8 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %417, %__nv_tanhf.exit287 ]
  %23 = phi <8 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %413, %__nv_tanhf.exit287 ]
  %24 = or disjoint i64 %indvars.iv, %20, !dbg !15
  %25 = icmp samesign ult i64 %24, 15360, !dbg !16
  %26 = icmp samesign ult i64 %24, 3072, !dbg !17
  %27 = trunc nuw nsw i64 %24 to i32, !dbg !18
  %28 = add i32 %16, %27, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = and i1 %10, %25, !dbg !20
  %32 = and i1 %10, %26, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %32) #5, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !22
  %42 = shufflevector <2 x bfloat> %41, <2 x bfloat> %39, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %43 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %44 = shufflevector <8 x bfloat> %42, <8 x bfloat> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !23
  %45 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %46 = shufflevector <8 x bfloat> %44, <8 x bfloat> %45, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !23
  %47 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <8 x bfloat> %46, <8 x bfloat> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !23
  %49 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <8 x bfloat> %48, <8 x bfloat> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !23
  %51 = fpext <8 x bfloat> %50 to <8 x float>, !dbg !23
  %52 = icmp samesign ugt i64 %24, 3071, !dbg !24
  %53 = add i32 %18, %27, !dbg !25
  %54 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !25
  %55 = add i32 %19, %54, !dbg !25
  %56 = sext i32 %53 to i64, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !26
  %58 = sext i32 %55 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !26
  %60 = and i1 %52, %31, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %60) #5, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %60) #5, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = insertelement <8 x i32> poison, i32 %70, i64 0, !dbg !28
  %72 = insertelement <8 x i32> %71, i32 %69, i64 1, !dbg !28
  %73 = insertelement <8 x i32> %72, i32 %68, i64 2, !dbg !28
  %74 = insertelement <8 x i32> %73, i32 %67, i64 3, !dbg !28
  %75 = insertelement <8 x i32> %74, i32 %65, i64 4, !dbg !28
  %76 = insertelement <8 x i32> %75, i32 %64, i64 5, !dbg !28
  %77 = insertelement <8 x i32> %76, i32 %63, i64 6, !dbg !28
  %78 = insertelement <8 x i32> %77, i32 %62, i64 7, !dbg !28
  %79 = bitcast <8 x i32> %78 to <8 x float>, !dbg !28
  %80 = fmul <8 x float> %79, splat (float 5.000000e-01), !dbg !29
  %81 = bitcast i32 %62 to float, !dbg !30
  %82 = fmul float %81, %81, !dbg !30
  %83 = bitcast i32 %63 to float, !dbg !30
  %84 = fmul float %83, %83, !dbg !30
  %85 = bitcast i32 %64 to float, !dbg !30
  %86 = fmul float %85, %85, !dbg !30
  %87 = bitcast i32 %65 to float, !dbg !30
  %88 = fmul float %87, %87, !dbg !30
  %89 = bitcast i32 %67 to float, !dbg !30
  %90 = fmul float %89, %89, !dbg !30
  %91 = bitcast i32 %68 to float, !dbg !30
  %92 = fmul float %91, %91, !dbg !30
  %93 = bitcast i32 %69 to float, !dbg !30
  %94 = fmul float %93, %93, !dbg !30
  %95 = bitcast i32 %70 to float, !dbg !30
  %96 = fmul float %95, %95, !dbg !30
  %97 = fmul float %82, %81, !dbg !31
  %98 = fmul float %84, %83, !dbg !31
  %99 = fmul float %86, %85, !dbg !31
  %100 = fmul float %88, %87, !dbg !31
  %101 = fmul float %90, %89, !dbg !31
  %102 = fmul float %92, %91, !dbg !31
  %103 = fmul float %94, %93, !dbg !31
  %104 = fmul float %96, %95, !dbg !31
  %105 = fmul float %97, 0x3FA6E4E260000000, !dbg !32
  %106 = fmul float %98, 0x3FA6E4E260000000, !dbg !32
  %107 = fmul float %99, 0x3FA6E4E260000000, !dbg !32
  %108 = fmul float %100, 0x3FA6E4E260000000, !dbg !32
  %109 = fmul float %101, 0x3FA6E4E260000000, !dbg !32
  %110 = fmul float %102, 0x3FA6E4E260000000, !dbg !32
  %111 = fmul float %103, 0x3FA6E4E260000000, !dbg !32
  %112 = fmul float %104, 0x3FA6E4E260000000, !dbg !32
  %113 = fadd float %105, %81, !dbg !33
  %114 = fadd float %106, %83, !dbg !33
  %115 = fadd float %107, %85, !dbg !33
  %116 = fadd float %108, %87, !dbg !33
  %117 = fadd float %109, %89, !dbg !33
  %118 = fadd float %110, %91, !dbg !33
  %119 = fadd float %111, %93, !dbg !33
  %120 = fadd float %112, %95, !dbg !33
  %121 = fmul float %113, 0x3FE9884540000000, !dbg !34
  %122 = fmul float %114, 0x3FE9884540000000, !dbg !34
  %123 = fmul float %115, 0x3FE9884540000000, !dbg !34
  %124 = fmul float %116, 0x3FE9884540000000, !dbg !34
  %125 = fmul float %117, 0x3FE9884540000000, !dbg !34
  %126 = fmul float %118, 0x3FE9884540000000, !dbg !34
  %127 = fmul float %119, 0x3FE9884540000000, !dbg !34
  %128 = fmul float %120, 0x3FE9884540000000, !dbg !34
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i136 = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call float @llvm.nvvm.fabs.ftz.f(float %121) #5, !dbg !35
  %131 = tail call float @llvm.nvvm.fabs.f(float %121) #5, !dbg !35
  %.01.i137 = select i1 %.not.i136, float %131, float %130, !dbg !35
  %132 = fcmp ult float %.01.i137, 0x3FE3333340000000, !dbg !35
  br i1 %132, label %__internal_fmad.exit3.i143, label %__internal_fmad.exit1.i138, !dbg !35

__internal_fmad.exit1.i138:                       ; preds = %21
  %133 = fmul float %.01.i137, 0x4007154760000000, !dbg !35
  %134 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %133) #5, !dbg !35
  %135 = fadd float %134, 1.000000e+00, !dbg !35
  %136 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %135) #6, !dbg !35, !srcloc !36
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i139 = icmp eq i32 %137, 0, !dbg !35
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %136, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %136, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i140 = select i1 %.not6.i139, float %139, float %138, !dbg !35
  %140 = fcmp oge float %.01.i137, 0x4022059680000000, !dbg !35
  %s.0.i141 = select i1 %140, float 1.000000e+00, float %.03.i140, !dbg !35
  %141 = bitcast float %s.0.i141 to i32, !dbg !35
  %142 = bitcast float %121 to i32, !dbg !35
  %143 = and i32 %142, -2147483648, !dbg !35
  %144 = or i32 %143, %141, !dbg !35
  %145 = bitcast i32 %144 to float, !dbg !35
  br label %__nv_tanhf.exit154, !dbg !35

__internal_fmad.exit3.i143:                       ; preds = %21
  %146 = fmul float %121, %121, !dbg !35
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i144 = icmp eq i32 %147, 0, !dbg !35
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %146, float 0xBFAAC795C0000000) #5, !dbg !35
  %149 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %146, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i145 = select i1 %.not1.i144, float %149, float %148, !dbg !35
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i146 = icmp eq i32 %150, 0, !dbg !35
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i145, float %146, float 0x3FC10B2820000000) #5, !dbg !35
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i145, float %146, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i147 = select i1 %.not2.i146, float %152, float %151, !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i148 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i147, float %146, float 0xBFD5553DA0000000) #5, !dbg !35
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i147, float %146, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i149 = select i1 %.not3.i148, float %155, float %154, !dbg !35
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i150 = icmp eq i32 %156, 0, !dbg !35
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i149, float %146, float 0.000000e+00) #5, !dbg !35
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i149, float %146, float 0.000000e+00) #5, !dbg !35
  %.04.i151 = select i1 %.not4.i150, float %158, float %157, !dbg !35
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i152 = icmp eq i32 %159, 0, !dbg !35
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i151, float %121, float %121) #5, !dbg !35
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i151, float %121, float %121) #5, !dbg !35
  %.02.i153 = select i1 %.not5.i152, float %161, float %160, !dbg !35
  br label %__nv_tanhf.exit154, !dbg !35

__nv_tanhf.exit154:                               ; preds = %__internal_fmad.exit1.i138, %__internal_fmad.exit3.i143
  %s.1.i142 = phi float [ %145, %__internal_fmad.exit1.i138 ], [ %.02.i153, %__internal_fmad.exit3.i143 ], !dbg !35
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i155 = icmp eq i32 %162, 0, !dbg !35
  %163 = tail call float @llvm.nvvm.fabs.ftz.f(float %122) #5, !dbg !35
  %164 = tail call float @llvm.nvvm.fabs.f(float %122) #5, !dbg !35
  %.01.i156 = select i1 %.not.i155, float %164, float %163, !dbg !35
  %165 = fcmp ult float %.01.i156, 0x3FE3333340000000, !dbg !35
  br i1 %165, label %__internal_fmad.exit3.i162, label %__internal_fmad.exit1.i157, !dbg !35

__internal_fmad.exit1.i157:                       ; preds = %__nv_tanhf.exit154
  %166 = fmul float %.01.i156, 0x4007154760000000, !dbg !35
  %167 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %166) #5, !dbg !35
  %168 = fadd float %167, 1.000000e+00, !dbg !35
  %169 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %168) #6, !dbg !35, !srcloc !36
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i158 = icmp eq i32 %170, 0, !dbg !35
  %171 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %169, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %172 = tail call float @llvm.nvvm.fma.rn.f(float %169, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i159 = select i1 %.not6.i158, float %172, float %171, !dbg !35
  %173 = fcmp oge float %.01.i156, 0x4022059680000000, !dbg !35
  %s.0.i160 = select i1 %173, float 1.000000e+00, float %.03.i159, !dbg !35
  %174 = bitcast float %s.0.i160 to i32, !dbg !35
  %175 = bitcast float %122 to i32, !dbg !35
  %176 = and i32 %175, -2147483648, !dbg !35
  %177 = or i32 %176, %174, !dbg !35
  %178 = bitcast i32 %177 to float, !dbg !35
  br label %__nv_tanhf.exit173, !dbg !35

__internal_fmad.exit3.i162:                       ; preds = %__nv_tanhf.exit154
  %179 = fmul float %122, %122, !dbg !35
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i163 = icmp eq i32 %180, 0, !dbg !35
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %179, float 0xBFAAC795C0000000) #5, !dbg !35
  %182 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %179, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i164 = select i1 %.not1.i163, float %182, float %181, !dbg !35
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i165 = icmp eq i32 %183, 0, !dbg !35
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i164, float %179, float 0x3FC10B2820000000) #5, !dbg !35
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i164, float %179, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i166 = select i1 %.not2.i165, float %185, float %184, !dbg !35
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i167 = icmp eq i32 %186, 0, !dbg !35
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i166, float %179, float 0xBFD5553DA0000000) #5, !dbg !35
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i166, float %179, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i168 = select i1 %.not3.i167, float %188, float %187, !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i169 = icmp eq i32 %189, 0, !dbg !35
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i168, float %179, float 0.000000e+00) #5, !dbg !35
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i168, float %179, float 0.000000e+00) #5, !dbg !35
  %.04.i170 = select i1 %.not4.i169, float %191, float %190, !dbg !35
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i171 = icmp eq i32 %192, 0, !dbg !35
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i170, float %122, float %122) #5, !dbg !35
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i170, float %122, float %122) #5, !dbg !35
  %.02.i172 = select i1 %.not5.i171, float %194, float %193, !dbg !35
  br label %__nv_tanhf.exit173, !dbg !35

__nv_tanhf.exit173:                               ; preds = %__internal_fmad.exit1.i157, %__internal_fmad.exit3.i162
  %s.1.i161 = phi float [ %178, %__internal_fmad.exit1.i157 ], [ %.02.i172, %__internal_fmad.exit3.i162 ], !dbg !35
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i174 = icmp eq i32 %195, 0, !dbg !35
  %196 = tail call float @llvm.nvvm.fabs.ftz.f(float %123) #5, !dbg !35
  %197 = tail call float @llvm.nvvm.fabs.f(float %123) #5, !dbg !35
  %.01.i175 = select i1 %.not.i174, float %197, float %196, !dbg !35
  %198 = fcmp ult float %.01.i175, 0x3FE3333340000000, !dbg !35
  br i1 %198, label %__internal_fmad.exit3.i181, label %__internal_fmad.exit1.i176, !dbg !35

__internal_fmad.exit1.i176:                       ; preds = %__nv_tanhf.exit173
  %199 = fmul float %.01.i175, 0x4007154760000000, !dbg !35
  %200 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %199) #5, !dbg !35
  %201 = fadd float %200, 1.000000e+00, !dbg !35
  %202 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %201) #6, !dbg !35, !srcloc !36
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i177 = icmp eq i32 %203, 0, !dbg !35
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %202, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %202, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i178 = select i1 %.not6.i177, float %205, float %204, !dbg !35
  %206 = fcmp oge float %.01.i175, 0x4022059680000000, !dbg !35
  %s.0.i179 = select i1 %206, float 1.000000e+00, float %.03.i178, !dbg !35
  %207 = bitcast float %s.0.i179 to i32, !dbg !35
  %208 = bitcast float %123 to i32, !dbg !35
  %209 = and i32 %208, -2147483648, !dbg !35
  %210 = or i32 %209, %207, !dbg !35
  %211 = bitcast i32 %210 to float, !dbg !35
  br label %__nv_tanhf.exit192, !dbg !35

__internal_fmad.exit3.i181:                       ; preds = %__nv_tanhf.exit173
  %212 = fmul float %123, %123, !dbg !35
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i182 = icmp eq i32 %213, 0, !dbg !35
  %214 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %212, float 0xBFAAC795C0000000) #5, !dbg !35
  %215 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %212, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i183 = select i1 %.not1.i182, float %215, float %214, !dbg !35
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i184 = icmp eq i32 %216, 0, !dbg !35
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i183, float %212, float 0x3FC10B2820000000) #5, !dbg !35
  %218 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i183, float %212, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i185 = select i1 %.not2.i184, float %218, float %217, !dbg !35
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i186 = icmp eq i32 %219, 0, !dbg !35
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i185, float %212, float 0xBFD5553DA0000000) #5, !dbg !35
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i185, float %212, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i187 = select i1 %.not3.i186, float %221, float %220, !dbg !35
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i188 = icmp eq i32 %222, 0, !dbg !35
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i187, float %212, float 0.000000e+00) #5, !dbg !35
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i187, float %212, float 0.000000e+00) #5, !dbg !35
  %.04.i189 = select i1 %.not4.i188, float %224, float %223, !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i190 = icmp eq i32 %225, 0, !dbg !35
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i189, float %123, float %123) #5, !dbg !35
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i189, float %123, float %123) #5, !dbg !35
  %.02.i191 = select i1 %.not5.i190, float %227, float %226, !dbg !35
  br label %__nv_tanhf.exit192, !dbg !35

__nv_tanhf.exit192:                               ; preds = %__internal_fmad.exit1.i176, %__internal_fmad.exit3.i181
  %s.1.i180 = phi float [ %211, %__internal_fmad.exit1.i176 ], [ %.02.i191, %__internal_fmad.exit3.i181 ], !dbg !35
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i193 = icmp eq i32 %228, 0, !dbg !35
  %229 = tail call float @llvm.nvvm.fabs.ftz.f(float %124) #5, !dbg !35
  %230 = tail call float @llvm.nvvm.fabs.f(float %124) #5, !dbg !35
  %.01.i194 = select i1 %.not.i193, float %230, float %229, !dbg !35
  %231 = fcmp ult float %.01.i194, 0x3FE3333340000000, !dbg !35
  br i1 %231, label %__internal_fmad.exit3.i200, label %__internal_fmad.exit1.i195, !dbg !35

__internal_fmad.exit1.i195:                       ; preds = %__nv_tanhf.exit192
  %232 = fmul float %.01.i194, 0x4007154760000000, !dbg !35
  %233 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %232) #5, !dbg !35
  %234 = fadd float %233, 1.000000e+00, !dbg !35
  %235 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %234) #6, !dbg !35, !srcloc !36
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i196 = icmp eq i32 %236, 0, !dbg !35
  %237 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %235, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %238 = tail call float @llvm.nvvm.fma.rn.f(float %235, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i197 = select i1 %.not6.i196, float %238, float %237, !dbg !35
  %239 = fcmp oge float %.01.i194, 0x4022059680000000, !dbg !35
  %s.0.i198 = select i1 %239, float 1.000000e+00, float %.03.i197, !dbg !35
  %240 = bitcast float %s.0.i198 to i32, !dbg !35
  %241 = bitcast float %124 to i32, !dbg !35
  %242 = and i32 %241, -2147483648, !dbg !35
  %243 = or i32 %242, %240, !dbg !35
  %244 = bitcast i32 %243 to float, !dbg !35
  br label %__nv_tanhf.exit211, !dbg !35

__internal_fmad.exit3.i200:                       ; preds = %__nv_tanhf.exit192
  %245 = fmul float %124, %124, !dbg !35
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i201 = icmp eq i32 %246, 0, !dbg !35
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %245, float 0xBFAAC795C0000000) #5, !dbg !35
  %248 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %245, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i202 = select i1 %.not1.i201, float %248, float %247, !dbg !35
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i203 = icmp eq i32 %249, 0, !dbg !35
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i202, float %245, float 0x3FC10B2820000000) #5, !dbg !35
  %251 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i202, float %245, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i204 = select i1 %.not2.i203, float %251, float %250, !dbg !35
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i205 = icmp eq i32 %252, 0, !dbg !35
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i204, float %245, float 0xBFD5553DA0000000) #5, !dbg !35
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i204, float %245, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i206 = select i1 %.not3.i205, float %254, float %253, !dbg !35
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i207 = icmp eq i32 %255, 0, !dbg !35
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i206, float %245, float 0.000000e+00) #5, !dbg !35
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i206, float %245, float 0.000000e+00) #5, !dbg !35
  %.04.i208 = select i1 %.not4.i207, float %257, float %256, !dbg !35
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i209 = icmp eq i32 %258, 0, !dbg !35
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i208, float %124, float %124) #5, !dbg !35
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i208, float %124, float %124) #5, !dbg !35
  %.02.i210 = select i1 %.not5.i209, float %260, float %259, !dbg !35
  br label %__nv_tanhf.exit211, !dbg !35

__nv_tanhf.exit211:                               ; preds = %__internal_fmad.exit1.i195, %__internal_fmad.exit3.i200
  %s.1.i199 = phi float [ %244, %__internal_fmad.exit1.i195 ], [ %.02.i210, %__internal_fmad.exit3.i200 ], !dbg !35
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i212 = icmp eq i32 %261, 0, !dbg !35
  %262 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #5, !dbg !35
  %263 = tail call float @llvm.nvvm.fabs.f(float %125) #5, !dbg !35
  %.01.i213 = select i1 %.not.i212, float %263, float %262, !dbg !35
  %264 = fcmp ult float %.01.i213, 0x3FE3333340000000, !dbg !35
  br i1 %264, label %__internal_fmad.exit3.i219, label %__internal_fmad.exit1.i214, !dbg !35

__internal_fmad.exit1.i214:                       ; preds = %__nv_tanhf.exit211
  %265 = fmul float %.01.i213, 0x4007154760000000, !dbg !35
  %266 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %265) #5, !dbg !35
  %267 = fadd float %266, 1.000000e+00, !dbg !35
  %268 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %267) #6, !dbg !35, !srcloc !36
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i215 = icmp eq i32 %269, 0, !dbg !35
  %270 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %268, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %271 = tail call float @llvm.nvvm.fma.rn.f(float %268, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i216 = select i1 %.not6.i215, float %271, float %270, !dbg !35
  %272 = fcmp oge float %.01.i213, 0x4022059680000000, !dbg !35
  %s.0.i217 = select i1 %272, float 1.000000e+00, float %.03.i216, !dbg !35
  %273 = bitcast float %s.0.i217 to i32, !dbg !35
  %274 = bitcast float %125 to i32, !dbg !35
  %275 = and i32 %274, -2147483648, !dbg !35
  %276 = or i32 %275, %273, !dbg !35
  %277 = bitcast i32 %276 to float, !dbg !35
  br label %__nv_tanhf.exit230, !dbg !35

__internal_fmad.exit3.i219:                       ; preds = %__nv_tanhf.exit211
  %278 = fmul float %125, %125, !dbg !35
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i220 = icmp eq i32 %279, 0, !dbg !35
  %280 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %278, float 0xBFAAC795C0000000) #5, !dbg !35
  %281 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %278, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i221 = select i1 %.not1.i220, float %281, float %280, !dbg !35
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i222 = icmp eq i32 %282, 0, !dbg !35
  %283 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i221, float %278, float 0x3FC10B2820000000) #5, !dbg !35
  %284 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i221, float %278, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i223 = select i1 %.not2.i222, float %284, float %283, !dbg !35
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i224 = icmp eq i32 %285, 0, !dbg !35
  %286 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i223, float %278, float 0xBFD5553DA0000000) #5, !dbg !35
  %287 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i223, float %278, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i225 = select i1 %.not3.i224, float %287, float %286, !dbg !35
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i226 = icmp eq i32 %288, 0, !dbg !35
  %289 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i225, float %278, float 0.000000e+00) #5, !dbg !35
  %290 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i225, float %278, float 0.000000e+00) #5, !dbg !35
  %.04.i227 = select i1 %.not4.i226, float %290, float %289, !dbg !35
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i228 = icmp eq i32 %291, 0, !dbg !35
  %292 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i227, float %125, float %125) #5, !dbg !35
  %293 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i227, float %125, float %125) #5, !dbg !35
  %.02.i229 = select i1 %.not5.i228, float %293, float %292, !dbg !35
  br label %__nv_tanhf.exit230, !dbg !35

__nv_tanhf.exit230:                               ; preds = %__internal_fmad.exit1.i214, %__internal_fmad.exit3.i219
  %s.1.i218 = phi float [ %277, %__internal_fmad.exit1.i214 ], [ %.02.i229, %__internal_fmad.exit3.i219 ], !dbg !35
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i231 = icmp eq i32 %294, 0, !dbg !35
  %295 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #5, !dbg !35
  %296 = tail call float @llvm.nvvm.fabs.f(float %126) #5, !dbg !35
  %.01.i232 = select i1 %.not.i231, float %296, float %295, !dbg !35
  %297 = fcmp ult float %.01.i232, 0x3FE3333340000000, !dbg !35
  br i1 %297, label %__internal_fmad.exit3.i238, label %__internal_fmad.exit1.i233, !dbg !35

__internal_fmad.exit1.i233:                       ; preds = %__nv_tanhf.exit230
  %298 = fmul float %.01.i232, 0x4007154760000000, !dbg !35
  %299 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %298) #5, !dbg !35
  %300 = fadd float %299, 1.000000e+00, !dbg !35
  %301 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %300) #6, !dbg !35, !srcloc !36
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i234 = icmp eq i32 %302, 0, !dbg !35
  %303 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %301, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %304 = tail call float @llvm.nvvm.fma.rn.f(float %301, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i235 = select i1 %.not6.i234, float %304, float %303, !dbg !35
  %305 = fcmp oge float %.01.i232, 0x4022059680000000, !dbg !35
  %s.0.i236 = select i1 %305, float 1.000000e+00, float %.03.i235, !dbg !35
  %306 = bitcast float %s.0.i236 to i32, !dbg !35
  %307 = bitcast float %126 to i32, !dbg !35
  %308 = and i32 %307, -2147483648, !dbg !35
  %309 = or i32 %308, %306, !dbg !35
  %310 = bitcast i32 %309 to float, !dbg !35
  br label %__nv_tanhf.exit249, !dbg !35

__internal_fmad.exit3.i238:                       ; preds = %__nv_tanhf.exit230
  %311 = fmul float %126, %126, !dbg !35
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i239 = icmp eq i32 %312, 0, !dbg !35
  %313 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %311, float 0xBFAAC795C0000000) #5, !dbg !35
  %314 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %311, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i240 = select i1 %.not1.i239, float %314, float %313, !dbg !35
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i241 = icmp eq i32 %315, 0, !dbg !35
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i240, float %311, float 0x3FC10B2820000000) #5, !dbg !35
  %317 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i240, float %311, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i242 = select i1 %.not2.i241, float %317, float %316, !dbg !35
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i243 = icmp eq i32 %318, 0, !dbg !35
  %319 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i242, float %311, float 0xBFD5553DA0000000) #5, !dbg !35
  %320 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i242, float %311, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i244 = select i1 %.not3.i243, float %320, float %319, !dbg !35
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i245 = icmp eq i32 %321, 0, !dbg !35
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i244, float %311, float 0.000000e+00) #5, !dbg !35
  %323 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i244, float %311, float 0.000000e+00) #5, !dbg !35
  %.04.i246 = select i1 %.not4.i245, float %323, float %322, !dbg !35
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i247 = icmp eq i32 %324, 0, !dbg !35
  %325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i246, float %126, float %126) #5, !dbg !35
  %326 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i246, float %126, float %126) #5, !dbg !35
  %.02.i248 = select i1 %.not5.i247, float %326, float %325, !dbg !35
  br label %__nv_tanhf.exit249, !dbg !35

__nv_tanhf.exit249:                               ; preds = %__internal_fmad.exit1.i233, %__internal_fmad.exit3.i238
  %s.1.i237 = phi float [ %310, %__internal_fmad.exit1.i233 ], [ %.02.i248, %__internal_fmad.exit3.i238 ], !dbg !35
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i250 = icmp eq i32 %327, 0, !dbg !35
  %328 = tail call float @llvm.nvvm.fabs.ftz.f(float %127) #5, !dbg !35
  %329 = tail call float @llvm.nvvm.fabs.f(float %127) #5, !dbg !35
  %.01.i251 = select i1 %.not.i250, float %329, float %328, !dbg !35
  %330 = fcmp ult float %.01.i251, 0x3FE3333340000000, !dbg !35
  br i1 %330, label %__internal_fmad.exit3.i257, label %__internal_fmad.exit1.i252, !dbg !35

__internal_fmad.exit1.i252:                       ; preds = %__nv_tanhf.exit249
  %331 = fmul float %.01.i251, 0x4007154760000000, !dbg !35
  %332 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %331) #5, !dbg !35
  %333 = fadd float %332, 1.000000e+00, !dbg !35
  %334 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %333) #6, !dbg !35, !srcloc !36
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i253 = icmp eq i32 %335, 0, !dbg !35
  %336 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %334, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %337 = tail call float @llvm.nvvm.fma.rn.f(float %334, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i254 = select i1 %.not6.i253, float %337, float %336, !dbg !35
  %338 = fcmp oge float %.01.i251, 0x4022059680000000, !dbg !35
  %s.0.i255 = select i1 %338, float 1.000000e+00, float %.03.i254, !dbg !35
  %339 = bitcast float %s.0.i255 to i32, !dbg !35
  %340 = bitcast float %127 to i32, !dbg !35
  %341 = and i32 %340, -2147483648, !dbg !35
  %342 = or i32 %341, %339, !dbg !35
  %343 = bitcast i32 %342 to float, !dbg !35
  br label %__nv_tanhf.exit268, !dbg !35

__internal_fmad.exit3.i257:                       ; preds = %__nv_tanhf.exit249
  %344 = fmul float %127, %127, !dbg !35
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i258 = icmp eq i32 %345, 0, !dbg !35
  %346 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %344, float 0xBFAAC795C0000000) #5, !dbg !35
  %347 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %344, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i259 = select i1 %.not1.i258, float %347, float %346, !dbg !35
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i260 = icmp eq i32 %348, 0, !dbg !35
  %349 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i259, float %344, float 0x3FC10B2820000000) #5, !dbg !35
  %350 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i259, float %344, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i261 = select i1 %.not2.i260, float %350, float %349, !dbg !35
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i262 = icmp eq i32 %351, 0, !dbg !35
  %352 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i261, float %344, float 0xBFD5553DA0000000) #5, !dbg !35
  %353 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i261, float %344, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i263 = select i1 %.not3.i262, float %353, float %352, !dbg !35
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i264 = icmp eq i32 %354, 0, !dbg !35
  %355 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i263, float %344, float 0.000000e+00) #5, !dbg !35
  %356 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i263, float %344, float 0.000000e+00) #5, !dbg !35
  %.04.i265 = select i1 %.not4.i264, float %356, float %355, !dbg !35
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i266 = icmp eq i32 %357, 0, !dbg !35
  %358 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i265, float %127, float %127) #5, !dbg !35
  %359 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i265, float %127, float %127) #5, !dbg !35
  %.02.i267 = select i1 %.not5.i266, float %359, float %358, !dbg !35
  br label %__nv_tanhf.exit268, !dbg !35

__nv_tanhf.exit268:                               ; preds = %__internal_fmad.exit1.i252, %__internal_fmad.exit3.i257
  %s.1.i256 = phi float [ %343, %__internal_fmad.exit1.i252 ], [ %.02.i267, %__internal_fmad.exit3.i257 ], !dbg !35
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i269 = icmp eq i32 %360, 0, !dbg !35
  %361 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !35
  %362 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !35
  %.01.i270 = select i1 %.not.i269, float %362, float %361, !dbg !35
  %363 = fcmp ult float %.01.i270, 0x3FE3333340000000, !dbg !35
  br i1 %363, label %__internal_fmad.exit3.i276, label %__internal_fmad.exit1.i271, !dbg !35

__internal_fmad.exit1.i271:                       ; preds = %__nv_tanhf.exit268
  %364 = fmul float %.01.i270, 0x4007154760000000, !dbg !35
  %365 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %364) #5, !dbg !35
  %366 = fadd float %365, 1.000000e+00, !dbg !35
  %367 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %366) #6, !dbg !35, !srcloc !36
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not6.i272 = icmp eq i32 %368, 0, !dbg !35
  %369 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %367, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %370 = tail call float @llvm.nvvm.fma.rn.f(float %367, float -2.000000e+00, float 1.000000e+00) #5, !dbg !35
  %.03.i273 = select i1 %.not6.i272, float %370, float %369, !dbg !35
  %371 = fcmp oge float %.01.i270, 0x4022059680000000, !dbg !35
  %s.0.i274 = select i1 %371, float 1.000000e+00, float %.03.i273, !dbg !35
  %372 = bitcast float %s.0.i274 to i32, !dbg !35
  %373 = bitcast float %128 to i32, !dbg !35
  %374 = and i32 %373, -2147483648, !dbg !35
  %375 = or i32 %374, %372, !dbg !35
  %376 = bitcast i32 %375 to float, !dbg !35
  br label %__nv_tanhf.exit287, !dbg !35

__internal_fmad.exit3.i276:                       ; preds = %__nv_tanhf.exit268
  %377 = fmul float %128, %128, !dbg !35
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not1.i277 = icmp eq i32 %378, 0, !dbg !35
  %379 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %377, float 0xBFAAC795C0000000) #5, !dbg !35
  %380 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %377, float 0xBFAAC795C0000000) #5, !dbg !35
  %.06.i278 = select i1 %.not1.i277, float %380, float %379, !dbg !35
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not2.i279 = icmp eq i32 %381, 0, !dbg !35
  %382 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i278, float %377, float 0x3FC10B2820000000) #5, !dbg !35
  %383 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i278, float %377, float 0x3FC10B2820000000) #5, !dbg !35
  %.05.i280 = select i1 %.not2.i279, float %383, float %382, !dbg !35
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not3.i281 = icmp eq i32 %384, 0, !dbg !35
  %385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i280, float %377, float 0xBFD5553DA0000000) #5, !dbg !35
  %386 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i280, float %377, float 0xBFD5553DA0000000) #5, !dbg !35
  %.0.i282 = select i1 %.not3.i281, float %386, float %385, !dbg !35
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not4.i283 = icmp eq i32 %387, 0, !dbg !35
  %388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i282, float %377, float 0.000000e+00) #5, !dbg !35
  %389 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i282, float %377, float 0.000000e+00) #5, !dbg !35
  %.04.i284 = select i1 %.not4.i283, float %389, float %388, !dbg !35
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not5.i285 = icmp eq i32 %390, 0, !dbg !35
  %391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i284, float %128, float %128) #5, !dbg !35
  %392 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i284, float %128, float %128) #5, !dbg !35
  %.02.i286 = select i1 %.not5.i285, float %392, float %391, !dbg !35
  br label %__nv_tanhf.exit287, !dbg !35

__nv_tanhf.exit287:                               ; preds = %__internal_fmad.exit1.i271, %__internal_fmad.exit3.i276
  %s.1.i275 = phi float [ %376, %__internal_fmad.exit1.i271 ], [ %.02.i286, %__internal_fmad.exit3.i276 ], !dbg !35
  %393 = insertelement <8 x float> poison, float %s.1.i275, i64 0, !dbg !37
  %394 = insertelement <8 x float> %393, float %s.1.i256, i64 1, !dbg !37
  %395 = insertelement <8 x float> %394, float %s.1.i237, i64 2, !dbg !37
  %396 = insertelement <8 x float> %395, float %s.1.i218, i64 3, !dbg !37
  %397 = insertelement <8 x float> %396, float %s.1.i199, i64 4, !dbg !37
  %398 = insertelement <8 x float> %397, float %s.1.i180, i64 5, !dbg !37
  %399 = insertelement <8 x float> %398, float %s.1.i161, i64 6, !dbg !37
  %400 = insertelement <8 x float> %399, float %s.1.i142, i64 7, !dbg !37
  %401 = fadd <8 x float> %400, splat (float 1.000000e+00), !dbg !37
  %402 = fcmp uno <8 x float> %23, zeroinitializer, !dbg !38
  %403 = fcmp uno <8 x float> %22, zeroinitializer, !dbg !42
  %404 = fmul <8 x float> %80, %401, !dbg !44
  %405 = insertelement <8 x i1> poison, i1 %26, i64 0, !dbg !45
  %406 = shufflevector <8 x i1> %405, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !45
  %407 = select <8 x i1> %406, <8 x float> %51, <8 x float> %404, !dbg !45
  %408 = fcmp olt <8 x float> %23, %407, !dbg !46
  %409 = or <8 x i1> %402, %408, !dbg !47
  %410 = select <8 x i1> %409, <8 x float> %23, <8 x float> %407, !dbg !48
  %411 = insertelement <8 x i1> poison, i1 %31, i64 0, !dbg !49
  %412 = shufflevector <8 x i1> %411, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !49
  %413 = select <8 x i1> %412, <8 x float> %410, <8 x float> %23, !dbg !49
  %414 = fcmp ogt <8 x float> %22, %407, !dbg !50
  %415 = or <8 x i1> %403, %414, !dbg !51
  %416 = select <8 x i1> %415, <8 x float> %22, <8 x float> %407, !dbg !52
  %417 = select <8 x i1> %412, <8 x float> %416, <8 x float> %22, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4096, !dbg !14
  %418 = icmp samesign ult i64 %indvars.iv, 11264, !dbg !14
  br i1 %418, label %21, label %419, !dbg !14

419:                                              ; preds = %__nv_tanhf.exit287
  %420 = lshr i32 %11, 5, !dbg !11
  %421 = extractelement <8 x float> %413, i64 6, !dbg !54
  %422 = extractelement <8 x float> %413, i64 7, !dbg !54
  %423 = fcmp olt float %422, %421, !dbg !54
  %424 = fcmp uno float %422, 0.000000e+00, !dbg !57
  %425 = or i1 %423, %424, !dbg !58
  %426 = select i1 %425, float %422, float %421, !dbg !59
  %427 = extractelement <8 x float> %413, i64 5, !dbg !54
  %428 = fcmp olt float %426, %427, !dbg !54
  %429 = fcmp uno float %426, 0.000000e+00, !dbg !57
  %430 = or i1 %428, %429, !dbg !58
  %431 = select i1 %430, float %426, float %427, !dbg !59
  %432 = extractelement <8 x float> %413, i64 4, !dbg !54
  %433 = fcmp olt float %431, %432, !dbg !54
  %434 = fcmp uno float %431, 0.000000e+00, !dbg !57
  %435 = or i1 %433, %434, !dbg !58
  %436 = select i1 %435, float %431, float %432, !dbg !59
  %437 = extractelement <8 x float> %413, i64 3, !dbg !54
  %438 = fcmp olt float %436, %437, !dbg !54
  %439 = fcmp uno float %436, 0.000000e+00, !dbg !57
  %440 = or i1 %438, %439, !dbg !58
  %441 = select i1 %440, float %436, float %437, !dbg !59
  %442 = extractelement <8 x float> %413, i64 2, !dbg !54
  %443 = fcmp olt float %441, %442, !dbg !54
  %444 = fcmp uno float %441, 0.000000e+00, !dbg !57
  %445 = or i1 %443, %444, !dbg !58
  %446 = select i1 %445, float %441, float %442, !dbg !59
  %447 = extractelement <8 x float> %413, i64 1, !dbg !54
  %448 = fcmp olt float %446, %447, !dbg !54
  %449 = fcmp uno float %446, 0.000000e+00, !dbg !57
  %450 = or i1 %448, %449, !dbg !58
  %451 = select i1 %450, float %446, float %447, !dbg !59
  %452 = extractelement <8 x float> %413, i64 0, !dbg !54
  %453 = fcmp olt float %451, %452, !dbg !54
  %454 = fcmp uno float %451, 0.000000e+00, !dbg !57
  %455 = or i1 %453, %454, !dbg !58
  %456 = select i1 %455, float %451, float %452, !dbg !59
  %457 = bitcast float %456 to i32, !dbg !60
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 16, i32 31), !dbg !60
  %459 = bitcast i32 %458 to float, !dbg !60
  %460 = fcmp olt float %456, %459, !dbg !54
  %461 = fcmp uno float %456, 0.000000e+00, !dbg !57
  %462 = or i1 %461, %460, !dbg !58
  %463 = select i1 %462, float %456, float %459, !dbg !59
  %464 = bitcast float %463 to i32, !dbg !60
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 8, i32 31), !dbg !60
  %466 = bitcast i32 %465 to float, !dbg !60
  %467 = fcmp olt float %463, %466, !dbg !54
  %468 = fcmp uno float %463, 0.000000e+00, !dbg !57
  %469 = or i1 %467, %468, !dbg !58
  %470 = select i1 %469, float %463, float %466, !dbg !59
  %471 = bitcast float %470 to i32, !dbg !60
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 4, i32 31), !dbg !60
  %473 = bitcast i32 %472 to float, !dbg !60
  %474 = fcmp olt float %470, %473, !dbg !54
  %475 = fcmp uno float %470, 0.000000e+00, !dbg !57
  %476 = or i1 %474, %475, !dbg !58
  %477 = select i1 %476, float %470, float %473, !dbg !59
  %478 = bitcast float %477 to i32, !dbg !60
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 2, i32 31), !dbg !60
  %480 = bitcast i32 %479 to float, !dbg !60
  %481 = fcmp olt float %477, %480, !dbg !54
  %482 = fcmp uno float %477, 0.000000e+00, !dbg !57
  %483 = or i1 %481, %482, !dbg !58
  %484 = select i1 %483, float %477, float %480, !dbg !59
  %485 = bitcast float %484 to i32, !dbg !60
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !60
  %487 = bitcast i32 %486 to float, !dbg !60
  %488 = fcmp olt float %484, %487, !dbg !54
  %489 = fcmp uno float %484, 0.000000e+00, !dbg !57
  %490 = or i1 %488, %489, !dbg !58
  %491 = and i32 %420, 15, !dbg !60
  %492 = icmp eq i32 %12, 0, !dbg !60
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %491, !dbg !60
  %494 = select i1 %490, i32 %485, i32 %486, !dbg !59
  %495 = insertelement <1 x i32> poison, i32 %494, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %495, i1 %492) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %496 = icmp slt i32 %11, 16, !dbg !60
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %498 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %496) #5, !dbg !60
  %499 = bitcast i32 %498 to float, !dbg !60
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 8, i32 31), !dbg !60
  %501 = bitcast i32 %500 to float, !dbg !60
  %502 = fcmp olt float %499, %501, !dbg !54
  %503 = fcmp uno float %499, 0.000000e+00, !dbg !57
  %504 = or i1 %503, %502, !dbg !58
  %505 = select i1 %504, float %499, float %501, !dbg !59
  %506 = bitcast float %505 to i32, !dbg !60
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 4, i32 31), !dbg !60
  %508 = bitcast i32 %507 to float, !dbg !60
  %509 = fcmp olt float %505, %508, !dbg !54
  %510 = fcmp uno float %505, 0.000000e+00, !dbg !57
  %511 = or i1 %509, %510, !dbg !58
  %512 = select i1 %511, float %505, float %508, !dbg !59
  %513 = bitcast float %512 to i32, !dbg !60
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 2, i32 31), !dbg !60
  %515 = bitcast i32 %514 to float, !dbg !60
  %516 = fcmp olt float %512, %515, !dbg !54
  %517 = fcmp uno float %512, 0.000000e+00, !dbg !57
  %518 = or i1 %516, %517, !dbg !58
  %519 = select i1 %518, float %512, float %515, !dbg !59
  %520 = bitcast float %519 to i32, !dbg !60
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 1, i32 31), !dbg !60
  %522 = bitcast i32 %521 to float, !dbg !60
  %523 = fcmp olt float %519, %522, !dbg !54
  %524 = fcmp uno float %519, 0.000000e+00, !dbg !57
  %525 = or i1 %523, %524, !dbg !58
  %526 = and i32 %11, 15, !dbg !60
  %527 = icmp eq i32 %526, 0, !dbg !60
  %528 = and i1 %496, %527, !dbg !60
  %529 = select i1 %525, i32 %520, i32 %521, !dbg !59
  %530 = insertelement <1 x i32> poison, i32 %529, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %530, i1 %528) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %531 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %532 = extractelement <8 x float> %417, i64 6, !dbg !63
  %533 = extractelement <8 x float> %417, i64 7, !dbg !63
  %534 = fcmp ogt float %533, %532, !dbg !63
  %535 = fcmp uno float %533, 0.000000e+00, !dbg !64
  %536 = or i1 %534, %535, !dbg !65
  %537 = select i1 %536, float %533, float %532, !dbg !66
  %538 = extractelement <8 x float> %417, i64 5, !dbg !63
  %539 = fcmp ogt float %537, %538, !dbg !63
  %540 = fcmp uno float %537, 0.000000e+00, !dbg !64
  %541 = or i1 %539, %540, !dbg !65
  %542 = select i1 %541, float %537, float %538, !dbg !66
  %543 = extractelement <8 x float> %417, i64 4, !dbg !63
  %544 = fcmp ogt float %542, %543, !dbg !63
  %545 = fcmp uno float %542, 0.000000e+00, !dbg !64
  %546 = or i1 %544, %545, !dbg !65
  %547 = select i1 %546, float %542, float %543, !dbg !66
  %548 = extractelement <8 x float> %417, i64 3, !dbg !63
  %549 = fcmp ogt float %547, %548, !dbg !63
  %550 = fcmp uno float %547, 0.000000e+00, !dbg !64
  %551 = or i1 %549, %550, !dbg !65
  %552 = select i1 %551, float %547, float %548, !dbg !66
  %553 = extractelement <8 x float> %417, i64 2, !dbg !63
  %554 = fcmp ogt float %552, %553, !dbg !63
  %555 = fcmp uno float %552, 0.000000e+00, !dbg !64
  %556 = or i1 %554, %555, !dbg !65
  %557 = select i1 %556, float %552, float %553, !dbg !66
  %558 = extractelement <8 x float> %417, i64 1, !dbg !63
  %559 = fcmp ogt float %557, %558, !dbg !63
  %560 = fcmp uno float %557, 0.000000e+00, !dbg !64
  %561 = or i1 %559, %560, !dbg !65
  %562 = select i1 %561, float %557, float %558, !dbg !66
  %563 = extractelement <8 x float> %417, i64 0, !dbg !63
  %564 = fcmp ogt float %562, %563, !dbg !63
  %565 = fcmp uno float %562, 0.000000e+00, !dbg !64
  %566 = or i1 %564, %565, !dbg !65
  %567 = select i1 %566, float %562, float %563, !dbg !66
  %568 = bitcast float %567 to i32, !dbg !61
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 16, i32 31), !dbg !61
  %570 = bitcast i32 %569 to float, !dbg !61
  %571 = fcmp ogt float %567, %570, !dbg !63
  %572 = fcmp uno float %567, 0.000000e+00, !dbg !64
  %573 = or i1 %572, %571, !dbg !65
  %574 = select i1 %573, float %567, float %570, !dbg !66
  %575 = bitcast float %574 to i32, !dbg !61
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 8, i32 31), !dbg !61
  %577 = bitcast i32 %576 to float, !dbg !61
  %578 = fcmp ogt float %574, %577, !dbg !63
  %579 = fcmp uno float %574, 0.000000e+00, !dbg !64
  %580 = or i1 %578, %579, !dbg !65
  %581 = select i1 %580, float %574, float %577, !dbg !66
  %582 = bitcast float %581 to i32, !dbg !61
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 4, i32 31), !dbg !61
  %584 = bitcast i32 %583 to float, !dbg !61
  %585 = fcmp ogt float %581, %584, !dbg !63
  %586 = fcmp uno float %581, 0.000000e+00, !dbg !64
  %587 = or i1 %585, %586, !dbg !65
  %588 = select i1 %587, float %581, float %584, !dbg !66
  %589 = bitcast float %588 to i32, !dbg !61
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 2, i32 31), !dbg !61
  %591 = bitcast i32 %590 to float, !dbg !61
  %592 = fcmp ogt float %588, %591, !dbg !63
  %593 = fcmp uno float %588, 0.000000e+00, !dbg !64
  %594 = or i1 %592, %593, !dbg !65
  %595 = select i1 %594, float %588, float %591, !dbg !66
  %596 = bitcast float %595 to i32, !dbg !61
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 1, i32 31), !dbg !61
  %598 = bitcast i32 %597 to float, !dbg !61
  %599 = fcmp ogt float %595, %598, !dbg !63
  %600 = fcmp uno float %595, 0.000000e+00, !dbg !64
  %601 = or i1 %599, %600, !dbg !65
  %602 = select i1 %601, i32 %596, i32 %597, !dbg !66
  %603 = insertelement <1 x i32> poison, i32 %602, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %603, i1 %492) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %604 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %496) #5, !dbg !61
  %605 = bitcast i32 %604 to float, !dbg !61
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 8, i32 31), !dbg !61
  %607 = bitcast i32 %606 to float, !dbg !61
  %608 = fcmp ogt float %605, %607, !dbg !63
  %609 = fcmp uno float %605, 0.000000e+00, !dbg !64
  %610 = or i1 %609, %608, !dbg !65
  %611 = select i1 %610, float %605, float %607, !dbg !66
  %612 = bitcast float %611 to i32, !dbg !61
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 4, i32 31), !dbg !61
  %614 = bitcast i32 %613 to float, !dbg !61
  %615 = fcmp ogt float %611, %614, !dbg !63
  %616 = fcmp uno float %611, 0.000000e+00, !dbg !64
  %617 = or i1 %615, %616, !dbg !65
  %618 = select i1 %617, float %611, float %614, !dbg !66
  %619 = bitcast float %618 to i32, !dbg !61
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 2, i32 31), !dbg !61
  %621 = bitcast i32 %620 to float, !dbg !61
  %622 = fcmp ogt float %618, %621, !dbg !63
  %623 = fcmp uno float %618, 0.000000e+00, !dbg !64
  %624 = or i1 %622, %623, !dbg !65
  %625 = select i1 %624, float %618, float %621, !dbg !66
  %626 = bitcast float %625 to i32, !dbg !61
  %627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 1, i32 31), !dbg !61
  %628 = bitcast i32 %627 to float, !dbg !61
  %629 = fcmp ogt float %625, %628, !dbg !63
  %630 = fcmp uno float %625, 0.000000e+00, !dbg !64
  %631 = or i1 %629, %630, !dbg !65
  %632 = select i1 %631, i32 %626, i32 %627, !dbg !66
  %633 = insertelement <1 x i32> poison, i32 %632, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %633, i1 %528) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %634 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !61
  %635 = sext i32 %9 to i64, !dbg !67
  %636 = getelementptr bfloat, ptr addrspace(1) %2, i64 %635, !dbg !67
  %637 = fptrunc float %531 to bfloat, !dbg !68
  %638 = and i32 %11, 511, !dbg !68
  %639 = icmp eq i32 %638, 0, !dbg !68
  %640 = bitcast bfloat %637 to i16, !dbg !68
  %641 = and i1 %10, %639, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %640, ptr addrspace(1) %636, i1 %641) #5, !dbg !68
  %642 = getelementptr bfloat, ptr addrspace(1) %3, i64 %635, !dbg !69
  %643 = fptrunc float %634 to bfloat, !dbg !70
  %644 = bitcast bfloat %643 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %644, ptr addrspace(1) %642, i1 %641) #5, !dbg !70
  %.inv = fcmp oge float %531, 0.000000e+00, !dbg !71
  %645 = select i1 %.inv, float 0.000000e+00, float %531, !dbg !71
  %646 = fsub float 0.000000e+00, %645, !dbg !73
  %.inv2 = fcmp ole float %634, 0.000000e+00, !dbg !74
  %647 = select i1 %.inv2, float 0.000000e+00, float %634, !dbg !74
  %648 = fcmp ogt float %646, %647, !dbg !76
  %649 = fcmp uno float %646, 0.000000e+00, !dbg !78
  %650 = or i1 %649, %648, !dbg !79
  %651 = select i1 %650, float %646, float %647, !dbg !80
  %652 = fmul float %651, 0x3F80204080000000, !dbg !81
  %653 = fcmp ogt float %652, 0x3EE4F8B580000000, !dbg !82
  %654 = fcmp uno float %652, 0.000000e+00, !dbg !84
  %655 = or i1 %653, %654, !dbg !85
  %656 = select i1 %655, float %652, float 0x3EE4F8B580000000, !dbg !86
  %657 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %656), !dbg !87
  %658 = mul i32 %9, 15360, !dbg !88
  br label %659, !dbg !89

659:                                              ; preds = %419, %__nv_tanhf.exit135
  %indvars.iv304 = phi i64 [ 0, %419 ], [ %indvars.iv.next305, %__nv_tanhf.exit135 ]
  %660 = or disjoint i64 %indvars.iv304, %20, !dbg !90
  %661 = icmp samesign ult i64 %660, 15360, !dbg !91
  %662 = icmp samesign ult i64 %660, 3072, !dbg !92
  %663 = trunc nuw nsw i64 %660 to i32, !dbg !93
  %664 = add i32 %16, %663, !dbg !93
  %665 = sext i32 %664 to i64, !dbg !94
  %666 = getelementptr bfloat, ptr addrspace(1) %0, i64 %665, !dbg !94
  %667 = and i1 %10, %661, !dbg !95
  %668 = and i1 %10, %662, !dbg !96
  %669 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %666, i1 %668) #5, !dbg !97
  %670 = extractvalue { i32, i32, i32, i32 } %669, 0, !dbg !97
  %671 = bitcast i32 %670 to <2 x bfloat>, !dbg !97
  %672 = extractvalue { i32, i32, i32, i32 } %669, 1, !dbg !97
  %673 = bitcast i32 %672 to <2 x bfloat>, !dbg !97
  %674 = extractvalue { i32, i32, i32, i32 } %669, 2, !dbg !97
  %675 = bitcast i32 %674 to <2 x bfloat>, !dbg !97
  %676 = extractvalue { i32, i32, i32, i32 } %669, 3, !dbg !97
  %677 = bitcast i32 %676 to <2 x bfloat>, !dbg !97
  %678 = extractelement <2 x bfloat> %671, i64 0, !dbg !97
  %679 = extractelement <2 x bfloat> %671, i64 1, !dbg !97
  %680 = extractelement <2 x bfloat> %673, i64 0, !dbg !97
  %681 = extractelement <2 x bfloat> %673, i64 1, !dbg !97
  %682 = extractelement <2 x bfloat> %675, i64 0, !dbg !97
  %683 = extractelement <2 x bfloat> %675, i64 1, !dbg !97
  %684 = extractelement <2 x bfloat> %677, i64 0, !dbg !97
  %685 = extractelement <2 x bfloat> %677, i64 1, !dbg !97
  %686 = fpext bfloat %678 to float, !dbg !98
  %687 = fpext bfloat %679 to float, !dbg !98
  %688 = fpext bfloat %680 to float, !dbg !98
  %689 = fpext bfloat %681 to float, !dbg !98
  %690 = fpext bfloat %682 to float, !dbg !98
  %691 = fpext bfloat %683 to float, !dbg !98
  %692 = fpext bfloat %684 to float, !dbg !98
  %693 = fpext bfloat %685 to float, !dbg !98
  %694 = icmp samesign ugt i64 %660, 3071, !dbg !99
  %695 = add i32 %18, %663, !dbg !100
  %696 = trunc nuw nsw i64 %indvars.iv304 to i32, !dbg !100
  %697 = add i32 %19, %696, !dbg !100
  %698 = sext i32 %695 to i64, !dbg !101
  %699 = getelementptr float, ptr addrspace(1) %1, i64 %698, !dbg !101
  %700 = sext i32 %697 to i64, !dbg !101
  %701 = getelementptr float, ptr addrspace(1) %1, i64 %700, !dbg !101
  %702 = and i1 %694, %667, !dbg !102
  %703 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %699, i1 %702) #5, !dbg !103
  %704 = extractvalue { i32, i32, i32, i32 } %703, 0, !dbg !103
  %705 = extractvalue { i32, i32, i32, i32 } %703, 1, !dbg !103
  %706 = extractvalue { i32, i32, i32, i32 } %703, 2, !dbg !103
  %707 = extractvalue { i32, i32, i32, i32 } %703, 3, !dbg !103
  %708 = bitcast i32 %704 to float, !dbg !103
  %709 = bitcast i32 %705 to float, !dbg !103
  %710 = bitcast i32 %706 to float, !dbg !103
  %711 = bitcast i32 %707 to float, !dbg !103
  %712 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %701, i1 %702) #5, !dbg !103
  %713 = extractvalue { i32, i32, i32, i32 } %712, 0, !dbg !103
  %714 = extractvalue { i32, i32, i32, i32 } %712, 1, !dbg !103
  %715 = extractvalue { i32, i32, i32, i32 } %712, 2, !dbg !103
  %716 = extractvalue { i32, i32, i32, i32 } %712, 3, !dbg !103
  %717 = bitcast i32 %713 to float, !dbg !103
  %718 = bitcast i32 %714 to float, !dbg !103
  %719 = bitcast i32 %715 to float, !dbg !103
  %720 = bitcast i32 %716 to float, !dbg !103
  %721 = fmul float %708, 5.000000e-01, !dbg !104
  %722 = fmul float %709, 5.000000e-01, !dbg !104
  %723 = fmul float %710, 5.000000e-01, !dbg !104
  %724 = fmul float %711, 5.000000e-01, !dbg !104
  %725 = fmul float %717, 5.000000e-01, !dbg !104
  %726 = fmul float %718, 5.000000e-01, !dbg !104
  %727 = fmul float %719, 5.000000e-01, !dbg !104
  %728 = fmul float %720, 5.000000e-01, !dbg !104
  %729 = fmul float %708, %708, !dbg !105
  %730 = fmul float %709, %709, !dbg !105
  %731 = fmul float %710, %710, !dbg !105
  %732 = fmul float %711, %711, !dbg !105
  %733 = fmul float %717, %717, !dbg !105
  %734 = fmul float %718, %718, !dbg !105
  %735 = fmul float %719, %719, !dbg !105
  %736 = fmul float %720, %720, !dbg !105
  %737 = fmul float %729, %708, !dbg !106
  %738 = fmul float %730, %709, !dbg !106
  %739 = fmul float %731, %710, !dbg !106
  %740 = fmul float %732, %711, !dbg !106
  %741 = fmul float %733, %717, !dbg !106
  %742 = fmul float %734, %718, !dbg !106
  %743 = fmul float %735, %719, !dbg !106
  %744 = fmul float %736, %720, !dbg !106
  %745 = fmul float %737, 0x3FA6E4E260000000, !dbg !107
  %746 = fmul float %738, 0x3FA6E4E260000000, !dbg !107
  %747 = fmul float %739, 0x3FA6E4E260000000, !dbg !107
  %748 = fmul float %740, 0x3FA6E4E260000000, !dbg !107
  %749 = fmul float %741, 0x3FA6E4E260000000, !dbg !107
  %750 = fmul float %742, 0x3FA6E4E260000000, !dbg !107
  %751 = fmul float %743, 0x3FA6E4E260000000, !dbg !107
  %752 = fmul float %744, 0x3FA6E4E260000000, !dbg !107
  %753 = fadd float %745, %708, !dbg !108
  %754 = fadd float %746, %709, !dbg !108
  %755 = fadd float %747, %710, !dbg !108
  %756 = fadd float %748, %711, !dbg !108
  %757 = fadd float %749, %717, !dbg !108
  %758 = fadd float %750, %718, !dbg !108
  %759 = fadd float %751, %719, !dbg !108
  %760 = fadd float %752, %720, !dbg !108
  %761 = fmul float %753, 0x3FE9884540000000, !dbg !109
  %762 = fmul float %754, 0x3FE9884540000000, !dbg !109
  %763 = fmul float %755, 0x3FE9884540000000, !dbg !109
  %764 = fmul float %756, 0x3FE9884540000000, !dbg !109
  %765 = fmul float %757, 0x3FE9884540000000, !dbg !109
  %766 = fmul float %758, 0x3FE9884540000000, !dbg !109
  %767 = fmul float %759, 0x3FE9884540000000, !dbg !109
  %768 = fmul float %760, 0x3FE9884540000000, !dbg !109
  %769 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i = icmp eq i32 %769, 0, !dbg !110
  %770 = tail call float @llvm.nvvm.fabs.ftz.f(float %761) #5, !dbg !110
  %771 = tail call float @llvm.nvvm.fabs.f(float %761) #5, !dbg !110
  %.01.i = select i1 %.not.i, float %771, float %770, !dbg !110
  %772 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !110
  br i1 %772, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !110

__internal_fmad.exit1.i:                          ; preds = %659
  %773 = fmul float %.01.i, 0x4007154760000000, !dbg !110
  %774 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %773) #5, !dbg !110
  %775 = fadd float %774, 1.000000e+00, !dbg !110
  %776 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %775) #6, !dbg !110, !srcloc !36
  %777 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i = icmp eq i32 %777, 0, !dbg !110
  %778 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %776, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %779 = tail call float @llvm.nvvm.fma.rn.f(float %776, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i = select i1 %.not6.i, float %779, float %778, !dbg !110
  %780 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !110
  %s.0.i = select i1 %780, float 1.000000e+00, float %.03.i, !dbg !110
  %781 = bitcast float %s.0.i to i32, !dbg !110
  %782 = bitcast float %761 to i32, !dbg !110
  %783 = and i32 %782, -2147483648, !dbg !110
  %784 = or i32 %783, %781, !dbg !110
  %785 = bitcast i32 %784 to float, !dbg !110
  br label %__nv_tanhf.exit, !dbg !110

__internal_fmad.exit3.i:                          ; preds = %659
  %786 = fmul float %761, %761, !dbg !110
  %787 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i = icmp eq i32 %787, 0, !dbg !110
  %788 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %786, float 0xBFAAC795C0000000) #5, !dbg !110
  %789 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %786, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i = select i1 %.not1.i, float %789, float %788, !dbg !110
  %790 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i = icmp eq i32 %790, 0, !dbg !110
  %791 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %786, float 0x3FC10B2820000000) #5, !dbg !110
  %792 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %786, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i = select i1 %.not2.i, float %792, float %791, !dbg !110
  %793 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i = icmp eq i32 %793, 0, !dbg !110
  %794 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %786, float 0xBFD5553DA0000000) #5, !dbg !110
  %795 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %786, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i = select i1 %.not3.i, float %795, float %794, !dbg !110
  %796 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i = icmp eq i32 %796, 0, !dbg !110
  %797 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %786, float 0.000000e+00) #5, !dbg !110
  %798 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %786, float 0.000000e+00) #5, !dbg !110
  %.04.i = select i1 %.not4.i, float %798, float %797, !dbg !110
  %799 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i = icmp eq i32 %799, 0, !dbg !110
  %800 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %761, float %761) #5, !dbg !110
  %801 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %761, float %761) #5, !dbg !110
  %.02.i = select i1 %.not5.i, float %801, float %800, !dbg !110
  br label %__nv_tanhf.exit, !dbg !110

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %785, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !110
  %802 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i3 = icmp eq i32 %802, 0, !dbg !110
  %803 = tail call float @llvm.nvvm.fabs.ftz.f(float %762) #5, !dbg !110
  %804 = tail call float @llvm.nvvm.fabs.f(float %762) #5, !dbg !110
  %.01.i4 = select i1 %.not.i3, float %804, float %803, !dbg !110
  %805 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !110
  br i1 %805, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !110

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %806 = fmul float %.01.i4, 0x4007154760000000, !dbg !110
  %807 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %806) #5, !dbg !110
  %808 = fadd float %807, 1.000000e+00, !dbg !110
  %809 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %808) #6, !dbg !110, !srcloc !36
  %810 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i6 = icmp eq i32 %810, 0, !dbg !110
  %811 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %809, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %812 = tail call float @llvm.nvvm.fma.rn.f(float %809, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i7 = select i1 %.not6.i6, float %812, float %811, !dbg !110
  %813 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !110
  %s.0.i8 = select i1 %813, float 1.000000e+00, float %.03.i7, !dbg !110
  %814 = bitcast float %s.0.i8 to i32, !dbg !110
  %815 = bitcast float %762 to i32, !dbg !110
  %816 = and i32 %815, -2147483648, !dbg !110
  %817 = or i32 %816, %814, !dbg !110
  %818 = bitcast i32 %817 to float, !dbg !110
  br label %__nv_tanhf.exit21, !dbg !110

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %819 = fmul float %762, %762, !dbg !110
  %820 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i11 = icmp eq i32 %820, 0, !dbg !110
  %821 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %819, float 0xBFAAC795C0000000) #5, !dbg !110
  %822 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %819, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i12 = select i1 %.not1.i11, float %822, float %821, !dbg !110
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i13 = icmp eq i32 %823, 0, !dbg !110
  %824 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %819, float 0x3FC10B2820000000) #5, !dbg !110
  %825 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %819, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i14 = select i1 %.not2.i13, float %825, float %824, !dbg !110
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i15 = icmp eq i32 %826, 0, !dbg !110
  %827 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %819, float 0xBFD5553DA0000000) #5, !dbg !110
  %828 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %819, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i16 = select i1 %.not3.i15, float %828, float %827, !dbg !110
  %829 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i17 = icmp eq i32 %829, 0, !dbg !110
  %830 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %819, float 0.000000e+00) #5, !dbg !110
  %831 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %819, float 0.000000e+00) #5, !dbg !110
  %.04.i18 = select i1 %.not4.i17, float %831, float %830, !dbg !110
  %832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i19 = icmp eq i32 %832, 0, !dbg !110
  %833 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %762, float %762) #5, !dbg !110
  %834 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %762, float %762) #5, !dbg !110
  %.02.i20 = select i1 %.not5.i19, float %834, float %833, !dbg !110
  br label %__nv_tanhf.exit21, !dbg !110

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %818, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !110
  %835 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i22 = icmp eq i32 %835, 0, !dbg !110
  %836 = tail call float @llvm.nvvm.fabs.ftz.f(float %763) #5, !dbg !110
  %837 = tail call float @llvm.nvvm.fabs.f(float %763) #5, !dbg !110
  %.01.i23 = select i1 %.not.i22, float %837, float %836, !dbg !110
  %838 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !110
  br i1 %838, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !110

__internal_fmad.exit1.i24:                        ; preds = %__nv_tanhf.exit21
  %839 = fmul float %.01.i23, 0x4007154760000000, !dbg !110
  %840 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %839) #5, !dbg !110
  %841 = fadd float %840, 1.000000e+00, !dbg !110
  %842 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %841) #6, !dbg !110, !srcloc !36
  %843 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i25 = icmp eq i32 %843, 0, !dbg !110
  %844 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %842, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %845 = tail call float @llvm.nvvm.fma.rn.f(float %842, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i26 = select i1 %.not6.i25, float %845, float %844, !dbg !110
  %846 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !110
  %s.0.i27 = select i1 %846, float 1.000000e+00, float %.03.i26, !dbg !110
  %847 = bitcast float %s.0.i27 to i32, !dbg !110
  %848 = bitcast float %763 to i32, !dbg !110
  %849 = and i32 %848, -2147483648, !dbg !110
  %850 = or i32 %849, %847, !dbg !110
  %851 = bitcast i32 %850 to float, !dbg !110
  br label %__nv_tanhf.exit40, !dbg !110

__internal_fmad.exit3.i29:                        ; preds = %__nv_tanhf.exit21
  %852 = fmul float %763, %763, !dbg !110
  %853 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i30 = icmp eq i32 %853, 0, !dbg !110
  %854 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %852, float 0xBFAAC795C0000000) #5, !dbg !110
  %855 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %852, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i31 = select i1 %.not1.i30, float %855, float %854, !dbg !110
  %856 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i32 = icmp eq i32 %856, 0, !dbg !110
  %857 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %852, float 0x3FC10B2820000000) #5, !dbg !110
  %858 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %852, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i33 = select i1 %.not2.i32, float %858, float %857, !dbg !110
  %859 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i34 = icmp eq i32 %859, 0, !dbg !110
  %860 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %852, float 0xBFD5553DA0000000) #5, !dbg !110
  %861 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %852, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i35 = select i1 %.not3.i34, float %861, float %860, !dbg !110
  %862 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i36 = icmp eq i32 %862, 0, !dbg !110
  %863 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %852, float 0.000000e+00) #5, !dbg !110
  %864 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %852, float 0.000000e+00) #5, !dbg !110
  %.04.i37 = select i1 %.not4.i36, float %864, float %863, !dbg !110
  %865 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i38 = icmp eq i32 %865, 0, !dbg !110
  %866 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %763, float %763) #5, !dbg !110
  %867 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %763, float %763) #5, !dbg !110
  %.02.i39 = select i1 %.not5.i38, float %867, float %866, !dbg !110
  br label %__nv_tanhf.exit40, !dbg !110

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %851, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !110
  %868 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i41 = icmp eq i32 %868, 0, !dbg !110
  %869 = tail call float @llvm.nvvm.fabs.ftz.f(float %764) #5, !dbg !110
  %870 = tail call float @llvm.nvvm.fabs.f(float %764) #5, !dbg !110
  %.01.i42 = select i1 %.not.i41, float %870, float %869, !dbg !110
  %871 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !110
  br i1 %871, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !110

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %872 = fmul float %.01.i42, 0x4007154760000000, !dbg !110
  %873 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %872) #5, !dbg !110
  %874 = fadd float %873, 1.000000e+00, !dbg !110
  %875 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %874) #6, !dbg !110, !srcloc !36
  %876 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i44 = icmp eq i32 %876, 0, !dbg !110
  %877 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %875, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %878 = tail call float @llvm.nvvm.fma.rn.f(float %875, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i45 = select i1 %.not6.i44, float %878, float %877, !dbg !110
  %879 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !110
  %s.0.i46 = select i1 %879, float 1.000000e+00, float %.03.i45, !dbg !110
  %880 = bitcast float %s.0.i46 to i32, !dbg !110
  %881 = bitcast float %764 to i32, !dbg !110
  %882 = and i32 %881, -2147483648, !dbg !110
  %883 = or i32 %882, %880, !dbg !110
  %884 = bitcast i32 %883 to float, !dbg !110
  br label %__nv_tanhf.exit59, !dbg !110

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %885 = fmul float %764, %764, !dbg !110
  %886 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i49 = icmp eq i32 %886, 0, !dbg !110
  %887 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %885, float 0xBFAAC795C0000000) #5, !dbg !110
  %888 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %885, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i50 = select i1 %.not1.i49, float %888, float %887, !dbg !110
  %889 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i51 = icmp eq i32 %889, 0, !dbg !110
  %890 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %885, float 0x3FC10B2820000000) #5, !dbg !110
  %891 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %885, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i52 = select i1 %.not2.i51, float %891, float %890, !dbg !110
  %892 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i53 = icmp eq i32 %892, 0, !dbg !110
  %893 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %885, float 0xBFD5553DA0000000) #5, !dbg !110
  %894 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %885, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i54 = select i1 %.not3.i53, float %894, float %893, !dbg !110
  %895 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i55 = icmp eq i32 %895, 0, !dbg !110
  %896 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %885, float 0.000000e+00) #5, !dbg !110
  %897 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %885, float 0.000000e+00) #5, !dbg !110
  %.04.i56 = select i1 %.not4.i55, float %897, float %896, !dbg !110
  %898 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i57 = icmp eq i32 %898, 0, !dbg !110
  %899 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %764, float %764) #5, !dbg !110
  %900 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %764, float %764) #5, !dbg !110
  %.02.i58 = select i1 %.not5.i57, float %900, float %899, !dbg !110
  br label %__nv_tanhf.exit59, !dbg !110

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %884, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !110
  %901 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i60 = icmp eq i32 %901, 0, !dbg !110
  %902 = tail call float @llvm.nvvm.fabs.ftz.f(float %765) #5, !dbg !110
  %903 = tail call float @llvm.nvvm.fabs.f(float %765) #5, !dbg !110
  %.01.i61 = select i1 %.not.i60, float %903, float %902, !dbg !110
  %904 = fcmp ult float %.01.i61, 0x3FE3333340000000, !dbg !110
  br i1 %904, label %__internal_fmad.exit3.i67, label %__internal_fmad.exit1.i62, !dbg !110

__internal_fmad.exit1.i62:                        ; preds = %__nv_tanhf.exit59
  %905 = fmul float %.01.i61, 0x4007154760000000, !dbg !110
  %906 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %905) #5, !dbg !110
  %907 = fadd float %906, 1.000000e+00, !dbg !110
  %908 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %907) #6, !dbg !110, !srcloc !36
  %909 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i63 = icmp eq i32 %909, 0, !dbg !110
  %910 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %908, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %911 = tail call float @llvm.nvvm.fma.rn.f(float %908, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i64 = select i1 %.not6.i63, float %911, float %910, !dbg !110
  %912 = fcmp oge float %.01.i61, 0x4022059680000000, !dbg !110
  %s.0.i65 = select i1 %912, float 1.000000e+00, float %.03.i64, !dbg !110
  %913 = bitcast float %s.0.i65 to i32, !dbg !110
  %914 = bitcast float %765 to i32, !dbg !110
  %915 = and i32 %914, -2147483648, !dbg !110
  %916 = or i32 %915, %913, !dbg !110
  %917 = bitcast i32 %916 to float, !dbg !110
  br label %__nv_tanhf.exit78, !dbg !110

__internal_fmad.exit3.i67:                        ; preds = %__nv_tanhf.exit59
  %918 = fmul float %765, %765, !dbg !110
  %919 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i68 = icmp eq i32 %919, 0, !dbg !110
  %920 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %918, float 0xBFAAC795C0000000) #5, !dbg !110
  %921 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %918, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i69 = select i1 %.not1.i68, float %921, float %920, !dbg !110
  %922 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i70 = icmp eq i32 %922, 0, !dbg !110
  %923 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i69, float %918, float 0x3FC10B2820000000) #5, !dbg !110
  %924 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i69, float %918, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i71 = select i1 %.not2.i70, float %924, float %923, !dbg !110
  %925 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i72 = icmp eq i32 %925, 0, !dbg !110
  %926 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i71, float %918, float 0xBFD5553DA0000000) #5, !dbg !110
  %927 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i71, float %918, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i73 = select i1 %.not3.i72, float %927, float %926, !dbg !110
  %928 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i74 = icmp eq i32 %928, 0, !dbg !110
  %929 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i73, float %918, float 0.000000e+00) #5, !dbg !110
  %930 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i73, float %918, float 0.000000e+00) #5, !dbg !110
  %.04.i75 = select i1 %.not4.i74, float %930, float %929, !dbg !110
  %931 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i76 = icmp eq i32 %931, 0, !dbg !110
  %932 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i75, float %765, float %765) #5, !dbg !110
  %933 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i75, float %765, float %765) #5, !dbg !110
  %.02.i77 = select i1 %.not5.i76, float %933, float %932, !dbg !110
  br label %__nv_tanhf.exit78, !dbg !110

__nv_tanhf.exit78:                                ; preds = %__internal_fmad.exit1.i62, %__internal_fmad.exit3.i67
  %s.1.i66 = phi float [ %917, %__internal_fmad.exit1.i62 ], [ %.02.i77, %__internal_fmad.exit3.i67 ], !dbg !110
  %934 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i79 = icmp eq i32 %934, 0, !dbg !110
  %935 = tail call float @llvm.nvvm.fabs.ftz.f(float %766) #5, !dbg !110
  %936 = tail call float @llvm.nvvm.fabs.f(float %766) #5, !dbg !110
  %.01.i80 = select i1 %.not.i79, float %936, float %935, !dbg !110
  %937 = fcmp ult float %.01.i80, 0x3FE3333340000000, !dbg !110
  br i1 %937, label %__internal_fmad.exit3.i86, label %__internal_fmad.exit1.i81, !dbg !110

__internal_fmad.exit1.i81:                        ; preds = %__nv_tanhf.exit78
  %938 = fmul float %.01.i80, 0x4007154760000000, !dbg !110
  %939 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %938) #5, !dbg !110
  %940 = fadd float %939, 1.000000e+00, !dbg !110
  %941 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %940) #6, !dbg !110, !srcloc !36
  %942 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i82 = icmp eq i32 %942, 0, !dbg !110
  %943 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %941, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %944 = tail call float @llvm.nvvm.fma.rn.f(float %941, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i83 = select i1 %.not6.i82, float %944, float %943, !dbg !110
  %945 = fcmp oge float %.01.i80, 0x4022059680000000, !dbg !110
  %s.0.i84 = select i1 %945, float 1.000000e+00, float %.03.i83, !dbg !110
  %946 = bitcast float %s.0.i84 to i32, !dbg !110
  %947 = bitcast float %766 to i32, !dbg !110
  %948 = and i32 %947, -2147483648, !dbg !110
  %949 = or i32 %948, %946, !dbg !110
  %950 = bitcast i32 %949 to float, !dbg !110
  br label %__nv_tanhf.exit97, !dbg !110

__internal_fmad.exit3.i86:                        ; preds = %__nv_tanhf.exit78
  %951 = fmul float %766, %766, !dbg !110
  %952 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i87 = icmp eq i32 %952, 0, !dbg !110
  %953 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %951, float 0xBFAAC795C0000000) #5, !dbg !110
  %954 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %951, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i88 = select i1 %.not1.i87, float %954, float %953, !dbg !110
  %955 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i89 = icmp eq i32 %955, 0, !dbg !110
  %956 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i88, float %951, float 0x3FC10B2820000000) #5, !dbg !110
  %957 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i88, float %951, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i90 = select i1 %.not2.i89, float %957, float %956, !dbg !110
  %958 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i91 = icmp eq i32 %958, 0, !dbg !110
  %959 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i90, float %951, float 0xBFD5553DA0000000) #5, !dbg !110
  %960 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i90, float %951, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i92 = select i1 %.not3.i91, float %960, float %959, !dbg !110
  %961 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i93 = icmp eq i32 %961, 0, !dbg !110
  %962 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i92, float %951, float 0.000000e+00) #5, !dbg !110
  %963 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i92, float %951, float 0.000000e+00) #5, !dbg !110
  %.04.i94 = select i1 %.not4.i93, float %963, float %962, !dbg !110
  %964 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i95 = icmp eq i32 %964, 0, !dbg !110
  %965 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i94, float %766, float %766) #5, !dbg !110
  %966 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i94, float %766, float %766) #5, !dbg !110
  %.02.i96 = select i1 %.not5.i95, float %966, float %965, !dbg !110
  br label %__nv_tanhf.exit97, !dbg !110

__nv_tanhf.exit97:                                ; preds = %__internal_fmad.exit1.i81, %__internal_fmad.exit3.i86
  %s.1.i85 = phi float [ %950, %__internal_fmad.exit1.i81 ], [ %.02.i96, %__internal_fmad.exit3.i86 ], !dbg !110
  %967 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i98 = icmp eq i32 %967, 0, !dbg !110
  %968 = tail call float @llvm.nvvm.fabs.ftz.f(float %767) #5, !dbg !110
  %969 = tail call float @llvm.nvvm.fabs.f(float %767) #5, !dbg !110
  %.01.i99 = select i1 %.not.i98, float %969, float %968, !dbg !110
  %970 = fcmp ult float %.01.i99, 0x3FE3333340000000, !dbg !110
  br i1 %970, label %__internal_fmad.exit3.i105, label %__internal_fmad.exit1.i100, !dbg !110

__internal_fmad.exit1.i100:                       ; preds = %__nv_tanhf.exit97
  %971 = fmul float %.01.i99, 0x4007154760000000, !dbg !110
  %972 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %971) #5, !dbg !110
  %973 = fadd float %972, 1.000000e+00, !dbg !110
  %974 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %973) #6, !dbg !110, !srcloc !36
  %975 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i101 = icmp eq i32 %975, 0, !dbg !110
  %976 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %974, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %977 = tail call float @llvm.nvvm.fma.rn.f(float %974, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i102 = select i1 %.not6.i101, float %977, float %976, !dbg !110
  %978 = fcmp oge float %.01.i99, 0x4022059680000000, !dbg !110
  %s.0.i103 = select i1 %978, float 1.000000e+00, float %.03.i102, !dbg !110
  %979 = bitcast float %s.0.i103 to i32, !dbg !110
  %980 = bitcast float %767 to i32, !dbg !110
  %981 = and i32 %980, -2147483648, !dbg !110
  %982 = or i32 %981, %979, !dbg !110
  %983 = bitcast i32 %982 to float, !dbg !110
  br label %__nv_tanhf.exit116, !dbg !110

__internal_fmad.exit3.i105:                       ; preds = %__nv_tanhf.exit97
  %984 = fmul float %767, %767, !dbg !110
  %985 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i106 = icmp eq i32 %985, 0, !dbg !110
  %986 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %984, float 0xBFAAC795C0000000) #5, !dbg !110
  %987 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %984, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i107 = select i1 %.not1.i106, float %987, float %986, !dbg !110
  %988 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i108 = icmp eq i32 %988, 0, !dbg !110
  %989 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i107, float %984, float 0x3FC10B2820000000) #5, !dbg !110
  %990 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i107, float %984, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i109 = select i1 %.not2.i108, float %990, float %989, !dbg !110
  %991 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i110 = icmp eq i32 %991, 0, !dbg !110
  %992 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %984, float 0xBFD5553DA0000000) #5, !dbg !110
  %993 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %984, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i111 = select i1 %.not3.i110, float %993, float %992, !dbg !110
  %994 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i112 = icmp eq i32 %994, 0, !dbg !110
  %995 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i111, float %984, float 0.000000e+00) #5, !dbg !110
  %996 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i111, float %984, float 0.000000e+00) #5, !dbg !110
  %.04.i113 = select i1 %.not4.i112, float %996, float %995, !dbg !110
  %997 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i114 = icmp eq i32 %997, 0, !dbg !110
  %998 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i113, float %767, float %767) #5, !dbg !110
  %999 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i113, float %767, float %767) #5, !dbg !110
  %.02.i115 = select i1 %.not5.i114, float %999, float %998, !dbg !110
  br label %__nv_tanhf.exit116, !dbg !110

__nv_tanhf.exit116:                               ; preds = %__internal_fmad.exit1.i100, %__internal_fmad.exit3.i105
  %s.1.i104 = phi float [ %983, %__internal_fmad.exit1.i100 ], [ %.02.i115, %__internal_fmad.exit3.i105 ], !dbg !110
  %1000 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not.i117 = icmp eq i32 %1000, 0, !dbg !110
  %1001 = tail call float @llvm.nvvm.fabs.ftz.f(float %768) #5, !dbg !110
  %1002 = tail call float @llvm.nvvm.fabs.f(float %768) #5, !dbg !110
  %.01.i118 = select i1 %.not.i117, float %1002, float %1001, !dbg !110
  %1003 = fcmp ult float %.01.i118, 0x3FE3333340000000, !dbg !110
  br i1 %1003, label %__internal_fmad.exit3.i124, label %__internal_fmad.exit1.i119, !dbg !110

__internal_fmad.exit1.i119:                       ; preds = %__nv_tanhf.exit116
  %1004 = fmul float %.01.i118, 0x4007154760000000, !dbg !110
  %1005 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1004) #5, !dbg !110
  %1006 = fadd float %1005, 1.000000e+00, !dbg !110
  %1007 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1006) #6, !dbg !110, !srcloc !36
  %1008 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not6.i120 = icmp eq i32 %1008, 0, !dbg !110
  %1009 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1007, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %1010 = tail call float @llvm.nvvm.fma.rn.f(float %1007, float -2.000000e+00, float 1.000000e+00) #5, !dbg !110
  %.03.i121 = select i1 %.not6.i120, float %1010, float %1009, !dbg !110
  %1011 = fcmp oge float %.01.i118, 0x4022059680000000, !dbg !110
  %s.0.i122 = select i1 %1011, float 1.000000e+00, float %.03.i121, !dbg !110
  %1012 = bitcast float %s.0.i122 to i32, !dbg !110
  %1013 = bitcast float %768 to i32, !dbg !110
  %1014 = and i32 %1013, -2147483648, !dbg !110
  %1015 = or i32 %1014, %1012, !dbg !110
  %1016 = bitcast i32 %1015 to float, !dbg !110
  br label %__nv_tanhf.exit135, !dbg !110

__internal_fmad.exit3.i124:                       ; preds = %__nv_tanhf.exit116
  %1017 = fmul float %768, %768, !dbg !110
  %1018 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not1.i125 = icmp eq i32 %1018, 0, !dbg !110
  %1019 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1017, float 0xBFAAC795C0000000) #5, !dbg !110
  %1020 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1017, float 0xBFAAC795C0000000) #5, !dbg !110
  %.06.i126 = select i1 %.not1.i125, float %1020, float %1019, !dbg !110
  %1021 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not2.i127 = icmp eq i32 %1021, 0, !dbg !110
  %1022 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i126, float %1017, float 0x3FC10B2820000000) #5, !dbg !110
  %1023 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i126, float %1017, float 0x3FC10B2820000000) #5, !dbg !110
  %.05.i128 = select i1 %.not2.i127, float %1023, float %1022, !dbg !110
  %1024 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not3.i129 = icmp eq i32 %1024, 0, !dbg !110
  %1025 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i128, float %1017, float 0xBFD5553DA0000000) #5, !dbg !110
  %1026 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i128, float %1017, float 0xBFD5553DA0000000) #5, !dbg !110
  %.0.i130 = select i1 %.not3.i129, float %1026, float %1025, !dbg !110
  %1027 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not4.i131 = icmp eq i32 %1027, 0, !dbg !110
  %1028 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i130, float %1017, float 0.000000e+00) #5, !dbg !110
  %1029 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i130, float %1017, float 0.000000e+00) #5, !dbg !110
  %.04.i132 = select i1 %.not4.i131, float %1029, float %1028, !dbg !110
  %1030 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !110
  %.not5.i133 = icmp eq i32 %1030, 0, !dbg !110
  %1031 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i132, float %768, float %768) #5, !dbg !110
  %1032 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i132, float %768, float %768) #5, !dbg !110
  %.02.i134 = select i1 %.not5.i133, float %1032, float %1031, !dbg !110
  br label %__nv_tanhf.exit135, !dbg !110

__nv_tanhf.exit135:                               ; preds = %__internal_fmad.exit1.i119, %__internal_fmad.exit3.i124
  %s.1.i123 = phi float [ %1016, %__internal_fmad.exit1.i119 ], [ %.02.i134, %__internal_fmad.exit3.i124 ], !dbg !110
  %1033 = fadd float %s.1.i, 1.000000e+00, !dbg !111
  %1034 = fadd float %s.1.i9, 1.000000e+00, !dbg !111
  %1035 = fadd float %s.1.i28, 1.000000e+00, !dbg !111
  %1036 = fadd float %s.1.i47, 1.000000e+00, !dbg !111
  %1037 = fadd float %s.1.i66, 1.000000e+00, !dbg !111
  %1038 = fadd float %s.1.i85, 1.000000e+00, !dbg !111
  %1039 = fadd float %s.1.i104, 1.000000e+00, !dbg !111
  %1040 = fadd float %s.1.i123, 1.000000e+00, !dbg !111
  %1041 = fmul float %721, %1033, !dbg !112
  %1042 = fmul float %722, %1034, !dbg !112
  %1043 = fmul float %723, %1035, !dbg !112
  %1044 = fmul float %724, %1036, !dbg !112
  %1045 = fmul float %725, %1037, !dbg !112
  %1046 = fmul float %726, %1038, !dbg !112
  %1047 = fmul float %727, %1039, !dbg !112
  %1048 = fmul float %728, %1040, !dbg !112
  %1049 = select i1 %662, float %686, float %1041, !dbg !113
  %1050 = select i1 %662, float %687, float %1042, !dbg !113
  %1051 = select i1 %662, float %688, float %1043, !dbg !113
  %1052 = select i1 %662, float %689, float %1044, !dbg !113
  %1053 = select i1 %662, float %690, float %1045, !dbg !113
  %1054 = select i1 %662, float %691, float %1046, !dbg !113
  %1055 = select i1 %662, float %692, float %1047, !dbg !113
  %1056 = select i1 %662, float %693, float %1048, !dbg !113
  %1057 = fmul float %657, %1049, !dbg !114
  %1058 = fmul float %657, %1050, !dbg !114
  %1059 = fmul float %657, %1051, !dbg !114
  %1060 = fmul float %657, %1052, !dbg !114
  %1061 = fmul float %657, %1053, !dbg !114
  %1062 = fmul float %657, %1054, !dbg !114
  %1063 = fmul float %657, %1055, !dbg !114
  %1064 = fmul float %657, %1056, !dbg !114
  %1065 = tail call float @llvm.nvvm.round.f(float %1057) #5, !dbg !115
  %1066 = tail call float @llvm.nvvm.round.f(float %1058) #5, !dbg !115
  %1067 = tail call float @llvm.nvvm.round.f(float %1059) #5, !dbg !115
  %1068 = tail call float @llvm.nvvm.round.f(float %1060) #5, !dbg !115
  %1069 = tail call float @llvm.nvvm.round.f(float %1061) #5, !dbg !115
  %1070 = tail call float @llvm.nvvm.round.f(float %1062) #5, !dbg !115
  %1071 = tail call float @llvm.nvvm.round.f(float %1063) #5, !dbg !115
  %1072 = tail call float @llvm.nvvm.round.f(float %1064) #5, !dbg !115
  %1073 = insertelement <4 x float> poison, float %1065, i64 0, !dbg !116
  %1074 = insertelement <4 x float> %1073, float %1066, i64 1, !dbg !116
  %1075 = insertelement <4 x float> %1074, float %1067, i64 2, !dbg !116
  %1076 = insertelement <4 x float> %1075, float %1068, i64 3, !dbg !116
  %1077 = fcmp ogt <4 x float> %1076, splat (float -1.270000e+02), !dbg !116
  %1078 = fcmp uno <4 x float> %1076, zeroinitializer, !dbg !118
  %1079 = or <4 x i1> %1077, %1078, !dbg !119
  %1080 = select <4 x i1> %1079, <4 x float> %1076, <4 x float> splat (float -1.270000e+02), !dbg !120
  %1081 = fcmp olt <4 x float> %1080, splat (float 1.270000e+02), !dbg !121
  %1082 = fcmp uno <4 x float> %1080, zeroinitializer, !dbg !123
  %1083 = or <4 x i1> %1081, %1082, !dbg !124
  %1084 = fptosi <4 x float> %1080 to <4 x i8>, !dbg !125
  %1085 = select <4 x i1> %1083, <4 x i8> %1084, <4 x i8> splat (i8 127), !dbg !126
  %1086 = insertelement <4 x float> poison, float %1069, i64 0, !dbg !116
  %1087 = insertelement <4 x float> %1086, float %1070, i64 1, !dbg !116
  %1088 = insertelement <4 x float> %1087, float %1071, i64 2, !dbg !116
  %1089 = insertelement <4 x float> %1088, float %1072, i64 3, !dbg !116
  %1090 = fcmp ogt <4 x float> %1089, splat (float -1.270000e+02), !dbg !116
  %1091 = fcmp uno <4 x float> %1089, zeroinitializer, !dbg !118
  %1092 = or <4 x i1> %1090, %1091, !dbg !119
  %1093 = select <4 x i1> %1092, <4 x float> %1089, <4 x float> splat (float -1.270000e+02), !dbg !120
  %1094 = fcmp olt <4 x float> %1093, splat (float 1.270000e+02), !dbg !121
  %1095 = fcmp uno <4 x float> %1093, zeroinitializer, !dbg !123
  %1096 = or <4 x i1> %1094, %1095, !dbg !124
  %1097 = fptosi <4 x float> %1093 to <4 x i8>, !dbg !125
  %1098 = select <4 x i1> %1096, <4 x i8> %1097, <4 x i8> splat (i8 127), !dbg !126
  %1099 = add i32 %658, %663, !dbg !127
  %1100 = sext i32 %1099 to i64, !dbg !128
  %1101 = getelementptr i8, ptr addrspace(1) %4, i64 %1100, !dbg !128
  %1102 = bitcast <4 x i8> %1085 to i32, !dbg !129
  %1103 = bitcast <4 x i8> %1098 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1102, i32 %1103, ptr addrspace(1) %1101, i1 %667) #5, !dbg !129
  %indvars.iv.next305 = add nuw nsw i64 %indvars.iv304, 4096, !dbg !89
  %1104 = icmp samesign ult i64 %indvars.iv304, 11264, !dbg !89
  br i1 %1104, label %659, label %1105, !dbg !89

1105:                                             ; preds = %__nv_tanhf.exit135
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 42, column: 39, scope: !6)
!13 = !DILocation(line: 46, column: 40, scope: !6)
!14 = !DILocation(line: 31, column: 40, scope: !6)
!15 = !DILocation(line: 32, column: 31, scope: !6)
!16 = !DILocation(line: 33, column: 29, scope: !6)
!17 = !DILocation(line: 41, column: 22, scope: !6)
!18 = !DILocation(line: 42, column: 45, scope: !6)
!19 = !DILocation(line: 42, column: 34, scope: !6)
!20 = !DILocation(line: 42, column: 63, scope: !6)
!21 = !DILocation(line: 42, column: 71, scope: !6)
!22 = !DILocation(line: 42, column: 53, scope: !6)
!23 = !DILocation(line: 42, column: 121, scope: !6)
!24 = !DILocation(line: 43, column: 23, scope: !6)
!25 = !DILocation(line: 46, column: 46, scope: !6)
!26 = !DILocation(line: 46, column: 34, scope: !6)
!27 = !DILocation(line: 46, column: 82, scope: !6)
!28 = !DILocation(line: 46, column: 64, scope: !6)
!29 = !DILocation(line: 48, column: 23, scope: !6)
!30 = !DILocation(line: 49, column: 23, scope: !6)
!31 = !DILocation(line: 50, column: 24, scope: !6)
!32 = !DILocation(line: 52, column: 24, scope: !6)
!33 = !DILocation(line: 53, column: 23, scope: !6)
!34 = !DILocation(line: 55, column: 24, scope: !6)
!35 = !DILocation(line: 56, column: 31, scope: !6)
!36 = !{i32 21046}
!37 = !DILocation(line: 58, column: 24, scope: !6)
!38 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !6, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 65, column: 47, scope: !6)
!42 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 67, column: 47, scope: !6)
!44 = !DILocation(line: 59, column: 24, scope: !6)
!45 = !DILocation(line: 63, column: 37, scope: !6)
!46 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 66, column: 50, scope: !6)
!50 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !43)
!51 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !43)
!52 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !43)
!53 = !DILocation(line: 68, column: 50, scope: !6)
!54 = !DILocation(line: 94, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!56 = !DILocation(line: 69, column: 40, scope: !6)
!57 = !DILocation(line: 96, column: 21, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 96, column: 16, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 97, column: 29, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 110, column: 29, scope: !39, inlinedAt: !56)
!61 = !DILocation(line: 115, column: 29, scope: !39, inlinedAt: !62)
!62 = !DILocation(line: 70, column: 40, scope: !6)
!63 = !DILocation(line: 102, column: 15, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 21, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 104, column: 16, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 105, column: 29, scope: !55, inlinedAt: !62)
!67 = !DILocation(line: 71, column: 25, scope: !6)
!68 = !DILocation(line: 71, column: 37, scope: !6)
!69 = !DILocation(line: 72, column: 25, scope: !6)
!70 = !DILocation(line: 72, column: 37, scope: !6)
!71 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !72)
!72 = !DILocation(line: 107, column: 46, scope: !6)
!73 = !DILocation(line: 108, column: 17, scope: !6)
!74 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !75)
!75 = !DILocation(line: 109, column: 46, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !77)
!77 = !DILocation(line: 110, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !77)
!81 = !DILocation(line: 112, column: 24, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !83)
!83 = !DILocation(line: 115, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 25, scope: !6)
!88 = !DILocation(line: 130, column: 42, scope: !6)
!89 = !DILocation(line: 73, column: 40, scope: !6)
!90 = !DILocation(line: 74, column: 31, scope: !6)
!91 = !DILocation(line: 75, column: 29, scope: !6)
!92 = !DILocation(line: 83, column: 24, scope: !6)
!93 = !DILocation(line: 84, column: 46, scope: !6)
!94 = !DILocation(line: 84, column: 35, scope: !6)
!95 = !DILocation(line: 84, column: 64, scope: !6)
!96 = !DILocation(line: 84, column: 72, scope: !6)
!97 = !DILocation(line: 84, column: 54, scope: !6)
!98 = !DILocation(line: 84, column: 123, scope: !6)
!99 = !DILocation(line: 85, column: 25, scope: !6)
!100 = !DILocation(line: 88, column: 47, scope: !6)
!101 = !DILocation(line: 88, column: 35, scope: !6)
!102 = !DILocation(line: 88, column: 83, scope: !6)
!103 = !DILocation(line: 88, column: 65, scope: !6)
!104 = !DILocation(line: 90, column: 24, scope: !6)
!105 = !DILocation(line: 91, column: 24, scope: !6)
!106 = !DILocation(line: 92, column: 24, scope: !6)
!107 = !DILocation(line: 94, column: 24, scope: !6)
!108 = !DILocation(line: 95, column: 24, scope: !6)
!109 = !DILocation(line: 97, column: 24, scope: !6)
!110 = !DILocation(line: 98, column: 31, scope: !6)
!111 = !DILocation(line: 100, column: 24, scope: !6)
!112 = !DILocation(line: 101, column: 24, scope: !6)
!113 = !DILocation(line: 105, column: 39, scope: !6)
!114 = !DILocation(line: 121, column: 24, scope: !6)
!115 = !DILocation(line: 122, column: 36, scope: !6)
!116 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !117)
!117 = !DILocation(line: 125, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !117)
!119 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !117)
!120 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !117)
!121 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !122)
!122 = !DILocation(line: 127, column: 46, scope: !6)
!123 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !122)
!124 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !122)
!125 = !DILocation(line: 129, column: 25, scope: !6)
!126 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !122)
!127 = !DILocation(line: 130, column: 36, scope: !6)
!128 = !DILocation(line: 130, column: 29, scope: !6)
!129 = !DILocation(line: 130, column: 54, scope: !6)
!130 = !DILocation(line: 73, column: 4, scope: !6)
