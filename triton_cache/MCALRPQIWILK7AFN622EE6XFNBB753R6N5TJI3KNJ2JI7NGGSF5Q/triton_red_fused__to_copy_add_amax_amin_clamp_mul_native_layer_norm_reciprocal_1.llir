; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
.peel.next:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 6, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 64, !dbg !11
  %23 = lshr i32 %21, 1, !dbg !11
  %24 = and i32 %23, 63, !dbg !11
  %25 = or disjoint i32 %24, %20, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = shl i32 %21, 2, !dbg !14
  %28 = and i32 %27, 4, !dbg !14
  %29 = mul i32 %25, 3072, !dbg !15
  %30 = or disjoint i32 %29, %28
  %31 = sext i32 %30 to i64, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !16
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %26) #5, !dbg !17
  %34 = select i1 %26, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %35 = extractvalue { i32, i32 } %33, 0, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractvalue { i32, i32 } %33, 1, !dbg !17
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !17
  %39 = shufflevector <2 x bfloat> %36, <2 x bfloat> %38, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !19
  %40 = fpext <4 x bfloat> %39 to <4 x float>, !dbg !19
  %41 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !20
  %42 = shufflevector <4 x i1> %41, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  %43 = select <4 x i1> %42, <4 x float> %40, <4 x float> zeroinitializer, !dbg !20
  br label %44, !dbg !21

44:                                               ; preds = %.peel.next, %44
  %indvars.iv = phi i64 [ 8, %.peel.next ], [ %indvars.iv.next, %44 ]
  %.pn78 = phi float [ %34, %.peel.next ], [ %81, %44 ]
  %.pn76 = phi float [ %34, %.peel.next ], [ %82, %44 ]
  %.pn74 = phi float [ %34, %.peel.next ], [ %83, %44 ]
  %.pn72 = phi float [ %34, %.peel.next ], [ %84, %44 ]
  %45 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %80, %44 ]
  %46 = phi <4 x float> [ %43, %.peel.next ], [ %79, %44 ]
  %47 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %48 = add i32 %30, %47, !dbg !22
  %49 = sext i32 %48 to i64, !dbg !16
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !16
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %26) #5, !dbg !17
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !17
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !17
  %54 = fadd float %.pn78, 1.000000e+00, !dbg !23
  %55 = fadd float %.pn76, 1.000000e+00, !dbg !23
  %56 = extractvalue { i32, i32 } %51, 1, !dbg !17
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !17
  %58 = fadd float %.pn74, 1.000000e+00, !dbg !23
  %59 = fadd float %.pn72, 1.000000e+00, !dbg !23
  %60 = shufflevector <2 x bfloat> %53, <2 x bfloat> %57, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !19
  %61 = fpext <4 x bfloat> %60 to <4 x float>, !dbg !19
  %62 = fsub <4 x float> %61, %46, !dbg !27
  %63 = extractelement <4 x float> %62, i64 0, !dbg !28
  %64 = tail call float @llvm.nvvm.div.full(float %63, float %54), !dbg !28
  %65 = extractelement <4 x float> %62, i64 1, !dbg !28
  %66 = tail call float @llvm.nvvm.div.full(float %65, float %55), !dbg !28
  %67 = extractelement <4 x float> %62, i64 2, !dbg !28
  %68 = tail call float @llvm.nvvm.div.full(float %67, float %58), !dbg !28
  %69 = extractelement <4 x float> %62, i64 3, !dbg !28
  %70 = tail call float @llvm.nvvm.div.full(float %69, float %59), !dbg !28
  %71 = insertelement <4 x float> poison, float %64, i64 0, !dbg !29
  %72 = insertelement <4 x float> %71, float %66, i64 1, !dbg !29
  %73 = insertelement <4 x float> %72, float %68, i64 2, !dbg !29
  %74 = insertelement <4 x float> %73, float %70, i64 3, !dbg !29
  %75 = fadd <4 x float> %46, %74, !dbg !29
  %76 = fsub <4 x float> %61, %75, !dbg !30
  %77 = fmul <4 x float> %62, %76, !dbg !31
  %78 = fadd <4 x float> %45, %77, !dbg !32
  %79 = select <4 x i1> %42, <4 x float> %75, <4 x float> %46, !dbg !20
  %80 = select <4 x i1> %42, <4 x float> %78, <4 x float> %45, !dbg !33
  %81 = select i1 %26, float %54, float %.pn78, !dbg !18
  %82 = select i1 %26, float %55, float %.pn76, !dbg !18
  %83 = select i1 %26, float %58, float %.pn74, !dbg !18
  %84 = select i1 %26, float %59, float %.pn72, !dbg !18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !21
  %85 = icmp samesign ult i64 %indvars.iv, 3064, !dbg !21
  br i1 %85, label %44, label %__nv_rsqrtf.exit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit:                                 ; preds = %44
  %86 = icmp eq i32 %22, 0, !dbg !11
  %87 = and i32 %21, 63, !dbg !11
  %88 = or disjoint i32 %20, %87, !dbg !12
  %89 = icmp slt i32 %88, 4112, !dbg !13
  %90 = extractelement <4 x float> %79, i64 0, !dbg !36
  %91 = extractelement <4 x float> %79, i64 1, !dbg !36
  %92 = fsub float %91, %90, !dbg !36
  %93 = fadd float %81, %82, !dbg !39
  %94 = fcmp oeq float %93, 0.000000e+00, !dbg !40
  %95 = tail call float @llvm.nvvm.div.full(float %82, float %93), !dbg !41
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !42
  %97 = fmul float %92, %96, !dbg !43
  %98 = fadd float %90, %97, !dbg !44
  %shift = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !45
  %99 = fadd <4 x float> %80, %shift, !dbg !45
  %100 = extractelement <4 x float> %99, i64 0, !dbg !45
  %101 = fmul float %92, %92, !dbg !46
  %102 = fmul float %101, %81, !dbg !47
  %103 = fmul float %102, %96, !dbg !48
  %104 = fadd float %100, %103, !dbg !49
  %105 = extractelement <4 x float> %79, i64 2, !dbg !36
  %106 = fsub float %105, %98, !dbg !36
  %107 = fadd float %83, %93, !dbg !39
  %108 = fcmp oeq float %107, 0.000000e+00, !dbg !40
  %109 = tail call float @llvm.nvvm.div.full(float %83, float %107), !dbg !41
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !42
  %111 = fmul float %110, %106, !dbg !43
  %112 = fadd float %98, %111, !dbg !44
  %113 = extractelement <4 x float> %80, i64 2, !dbg !45
  %114 = fadd float %113, %104, !dbg !45
  %115 = fmul float %106, %106, !dbg !46
  %116 = fmul float %93, %115, !dbg !47
  %117 = fmul float %110, %116, !dbg !48
  %118 = fadd float %114, %117, !dbg !49
  %119 = extractelement <4 x float> %79, i64 3, !dbg !36
  %120 = fsub float %119, %112, !dbg !36
  %121 = fadd float %84, %107, !dbg !39
  %122 = fcmp oeq float %121, 0.000000e+00, !dbg !40
  %123 = tail call float @llvm.nvvm.div.full(float %84, float %121), !dbg !41
  %124 = select i1 %122, float 0.000000e+00, float %123, !dbg !42
  %125 = fmul float %124, %120, !dbg !43
  %126 = fadd float %112, %125, !dbg !44
  %127 = extractelement <4 x float> %80, i64 3, !dbg !45
  %128 = fadd float %127, %118, !dbg !45
  %129 = fmul float %120, %120, !dbg !46
  %130 = fmul float %107, %129, !dbg !47
  %131 = fmul float %124, %130, !dbg !48
  %132 = fadd float %128, %131, !dbg !49
  %133 = bitcast float %126 to i32, !dbg !50
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !50
  %135 = bitcast i32 %134 to float, !dbg !50
  %136 = bitcast float %132 to i32, !dbg !50
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !50
  %138 = bitcast i32 %137 to float, !dbg !50
  %139 = bitcast float %121 to i32, !dbg !50
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !50
  %141 = bitcast i32 %140 to float, !dbg !50
  %142 = fsub float %135, %126, !dbg !36
  %143 = fadd float %121, %141, !dbg !39
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !40
  %145 = tail call float @llvm.nvvm.div.full(float %141, float %143), !dbg !41
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !42
  %147 = fmul float %146, %142, !dbg !43
  %148 = fadd float %126, %147, !dbg !44
  %149 = fadd float %132, %138, !dbg !45
  %150 = fmul float %142, %142, !dbg !46
  %151 = fmul float %121, %150, !dbg !47
  %152 = fmul float %146, %151, !dbg !48
  %153 = fadd float %149, %152, !dbg !49
  %154 = tail call float @llvm.nvvm.div.full(float %153, float 3.072000e+03), !dbg !51
  %155 = fadd float %154, 0x3EB0C6F7A0000000, !dbg !52
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i19 = icmp eq i32 %159, 0, !dbg !53
  br i1 %.not.i19, label %162, label %160, !dbg !53

160:                                              ; preds = %__nv_rsqrtf.exit
  %161 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !53
  br label %__nv_rsqrtf.exit21, !dbg !53

162:                                              ; preds = %__nv_rsqrtf.exit
  %163 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !53
  br label %__nv_rsqrtf.exit21, !dbg !53

__nv_rsqrtf.exit21:                               ; preds = %160, %162
  %.0.i20 = phi float [ %161, %160 ], [ %163, %162 ], !dbg !53
  %164 = zext nneg i32 %28 to i64, !dbg !54
  %165 = insertelement <2 x i1> poison, i1 %26, i64 0, !dbg !55
  %166 = shufflevector <2 x i1> %165, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %167 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !56
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %169 = insertelement <2 x float> poison, float %148, i64 0, !dbg !57
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  br label %171, !dbg !54

171:                                              ; preds = %__nv_rsqrtf.exit21, %171
  %indvars.iv46 = phi i64 [ 0, %__nv_rsqrtf.exit21 ], [ %indvars.iv.next47, %171 ]
  %172 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit21 ], [ %261, %171 ]
  %173 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit21 ], [ %262, %171 ]
  %174 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit21 ], [ %233, %171 ]
  %175 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit21 ], [ %267, %171 ]
  %176 = or disjoint i64 %indvars.iv46, %164, !dbg !58
  %177 = trunc nuw nsw i64 %176 to i32, !dbg !59
  %178 = add i32 %29, %177, !dbg !59
  %179 = sext i32 %178 to i64, !dbg !60
  %180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %179, !dbg !60
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %180, i1 %26) #5, !dbg !61
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !61
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !61
  %184 = extractvalue { i32, i32 } %181, 1, !dbg !61
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !61
  %186 = add nuw nsw i64 %176, 3072, !dbg !62
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !63
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %187, i1 true) #5, !dbg !64
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !64
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !64
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !64
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !64
  %193 = getelementptr bfloat, ptr addrspace(1) %2, i64 %186, !dbg !65
  %194 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %193, i1 true) #5, !dbg !66
  %195 = extractvalue { i32, i32 } %194, 0, !dbg !66
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !66
  %197 = extractvalue { i32, i32 } %194, 1, !dbg !66
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !66
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !67
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %199, i1 true) #5, !dbg !68
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !68
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !68
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !68
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !68
  %205 = getelementptr bfloat, ptr addrspace(1) %2, i64 %176, !dbg !69
  %206 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %205, i1 true) #5, !dbg !70
  %207 = extractvalue { i32, i32 } %206, 0, !dbg !70
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !70
  %209 = extractvalue { i32, i32 } %206, 1, !dbg !70
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !70
  %211 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !71
  %212 = fcmp uno float %172, 0.000000e+00, !dbg !71
  %213 = fcmp uno float %173, 0.000000e+00, !dbg !71
  %214 = fpext <2 x bfloat> %183 to <2 x float>, !dbg !73
  %215 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !64
  %216 = insertelement <2 x i32> %215, i32 %190, i64 1, !dbg !64
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !64
  %218 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !74
  %219 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !68
  %220 = insertelement <2 x i32> %219, i32 %202, i64 1, !dbg !68
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !68
  %222 = fpext <2 x bfloat> %208 to <2 x float>, !dbg !75
  %223 = fsub <2 x float> %214, %170, !dbg !57
  %224 = fmul <2 x float> %168, %223, !dbg !56
  %225 = fadd <2 x float> %217, %218, !dbg !76
  %226 = fadd <2 x float> %225, splat (float 1.000000e+00), !dbg !77
  %227 = fmul <2 x float> %224, %226, !dbg !78
  %228 = fadd <2 x float> %221, %222, !dbg !79
  %229 = fadd <2 x float> %227, %228, !dbg !80
  %230 = fcmp olt <2 x float> %174, %229, !dbg !81
  %231 = or <2 x i1> %211, %230, !dbg !82
  %232 = select <2 x i1> %231, <2 x float> %174, <2 x float> %229, !dbg !83
  %233 = select <2 x i1> %166, <2 x float> %232, <2 x float> %174, !dbg !55
  %234 = fcmp uno <4 x float> %175, zeroinitializer, !dbg !84
  %235 = getelementptr bfloat, ptr addrspace(1) %3, i64 %179, !dbg !86
  %236 = fptrunc <2 x float> %229 to <2 x bfloat>, !dbg !87
  %237 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !73
  %238 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !64
  %239 = insertelement <2 x i32> %238, i32 %192, i64 1, !dbg !64
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !64
  %241 = fpext <2 x bfloat> %198 to <2 x float>, !dbg !74
  %242 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !68
  %243 = insertelement <2 x i32> %242, i32 %204, i64 1, !dbg !68
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !68
  %245 = fpext <2 x bfloat> %210 to <2 x float>, !dbg !75
  %246 = fsub <2 x float> %237, %170, !dbg !57
  %247 = fmul <2 x float> %168, %246, !dbg !56
  %248 = fadd <2 x float> %240, %241, !dbg !76
  %249 = fadd <2 x float> %248, splat (float 1.000000e+00), !dbg !77
  %250 = fmul <2 x float> %247, %249, !dbg !78
  %251 = fadd <2 x float> %244, %245, !dbg !79
  %252 = fadd <2 x float> %250, %251, !dbg !80
  %253 = extractelement <2 x float> %252, i64 0, !dbg !83
  %254 = fcmp olt float %172, %253, !dbg !81
  %255 = extractelement <2 x float> %252, i64 1, !dbg !83
  %256 = fcmp olt float %173, %255, !dbg !81
  %257 = or i1 %212, %254, !dbg !82
  %258 = or i1 %213, %256, !dbg !82
  %259 = select i1 %257, float %172, float %253, !dbg !83
  %260 = select i1 %258, float %173, float %255, !dbg !83
  %261 = select i1 %26, float %259, float %172, !dbg !55
  %262 = select i1 %26, float %260, float %173, !dbg !55
  %263 = shufflevector <2 x float> %229, <2 x float> %252, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !88
  %264 = fcmp ogt <4 x float> %175, %263, !dbg !88
  %265 = or <4 x i1> %234, %264, !dbg !89
  %266 = select <4 x i1> %265, <4 x float> %175, <4 x float> %263, !dbg !90
  %267 = select <4 x i1> %42, <4 x float> %266, <4 x float> %175, !dbg !91
  %268 = fptrunc <2 x float> %252 to <2 x bfloat>, !dbg !87
  %269 = bitcast <2 x bfloat> %236 to i32, !dbg !87
  %270 = bitcast <2 x bfloat> %268 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %269, i32 %270, ptr addrspace(1) %235, i1 %26) #5, !dbg !87
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 8, !dbg !54
  %271 = icmp samesign ult i64 %indvars.iv46, 3064, !dbg !54
  br i1 %271, label %171, label %272, !dbg !54

272:                                              ; preds = %171
  %273 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %233, <2 x i32> <i32 0, i32 2>, !dbg !92
  %274 = fcmp olt <2 x float> %273, %233, !dbg !92
  %275 = fcmp uno <2 x float> %273, %233, !dbg !92
  %shift125 = shufflevector <2 x i1> %274, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %276 = or <2 x i1> %shift125, %275, !dbg !94
  %277 = extractelement <2 x i1> %276, i64 0, !dbg !94
  %278 = extractelement <2 x float> %233, i64 0, !dbg !95
  %279 = extractelement <2 x float> %233, i64 1, !dbg !95
  %280 = select i1 %277, float %278, float %279, !dbg !95
  %281 = fcmp olt float %280, %261, !dbg !92
  %282 = fcmp uno float %280, 0.000000e+00, !dbg !96
  %283 = or i1 %281, %282, !dbg !94
  %284 = select i1 %283, float %280, float %261, !dbg !95
  %285 = fcmp olt float %284, %262, !dbg !92
  %286 = fcmp uno float %284, 0.000000e+00, !dbg !96
  %287 = or i1 %285, %286, !dbg !94
  %288 = select i1 %287, float %284, float %262, !dbg !95
  %289 = bitcast float %288 to i32, !dbg !97
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !97
  %291 = bitcast i32 %290 to float, !dbg !97
  %292 = fcmp olt float %288, %291, !dbg !92
  %293 = fcmp uno float %288, 0.000000e+00, !dbg !96
  %294 = or i1 %293, %292, !dbg !94
  %295 = select i1 %294, float %288, float %291, !dbg !95
  %296 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24, !dbg !98
  %297 = bitcast float %295 to <1 x i32>, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %298 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %87, !dbg !98
  %299 = load float, ptr addrspace(3) %298, align 4, !dbg !98
  %300 = extractelement <4 x float> %267, i64 0, !dbg !99
  %301 = extractelement <4 x float> %267, i64 1, !dbg !99
  %302 = fcmp ogt float %300, %301, !dbg !99
  %303 = fcmp uno float %300, 0.000000e+00, !dbg !101
  %304 = or i1 %302, %303, !dbg !102
  %305 = select i1 %304, float %300, float %301, !dbg !103
  %306 = extractelement <4 x float> %267, i64 2, !dbg !99
  %307 = fcmp ogt float %305, %306, !dbg !99
  %308 = fcmp uno float %305, 0.000000e+00, !dbg !101
  %309 = or i1 %307, %308, !dbg !102
  %310 = select i1 %309, float %305, float %306, !dbg !103
  %311 = extractelement <4 x float> %267, i64 3, !dbg !99
  %312 = fcmp ogt float %310, %311, !dbg !99
  %313 = fcmp uno float %310, 0.000000e+00, !dbg !101
  %314 = or i1 %312, %313, !dbg !102
  %315 = select i1 %314, float %310, float %311, !dbg !103
  %316 = bitcast float %315 to i32, !dbg !104
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !104
  %318 = bitcast i32 %317 to float, !dbg !104
  %319 = fcmp ogt float %315, %318, !dbg !99
  %320 = fcmp uno float %315, 0.000000e+00, !dbg !101
  %321 = or i1 %320, %319, !dbg !102
  %322 = select i1 %321, float %315, float %318, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %323 = bitcast float %322 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %323, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %324 = load float, ptr addrspace(3) %298, align 4, !dbg !105
  %325 = sext i32 %88 to i64, !dbg !106
  %326 = getelementptr bfloat, ptr addrspace(1) %4, i64 %325, !dbg !106
  %327 = fptrunc float %299 to bfloat, !dbg !98
  %328 = bitcast bfloat %327 to i16, !dbg !98
  %329 = and i1 %86, %89, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %328, ptr addrspace(1) %326, i1 %329) #5, !dbg !98
  %330 = getelementptr bfloat, ptr addrspace(1) %5, i64 %325, !dbg !107
  %331 = fptrunc float %324 to bfloat, !dbg !105
  %332 = bitcast bfloat %331 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %332, ptr addrspace(1) %330, i1 %329) #5, !dbg !105
  %333 = getelementptr bfloat, ptr addrspace(1) %6, i64 %325, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %328, ptr addrspace(1) %333, i1 %329) #5, !dbg !109
  %334 = getelementptr bfloat, ptr addrspace(1) %7, i64 %325, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %332, ptr addrspace(1) %334, i1 %329) #5, !dbg !111
  %335 = getelementptr bfloat, ptr addrspace(1) %8, i64 %325, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %328, ptr addrspace(1) %335, i1 %329) #5, !dbg !113
  %336 = getelementptr bfloat, ptr addrspace(1) %9, i64 %325, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %332, ptr addrspace(1) %336, i1 %329) #5, !dbg !115
  %337 = getelementptr bfloat, ptr addrspace(1) %10, i64 %325, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %328, ptr addrspace(1) %337, i1 %329) #5, !dbg !117
  %338 = getelementptr bfloat, ptr addrspace(1) %11, i64 %325, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %332, ptr addrspace(1) %338, i1 %329) #5, !dbg !119
  %.inv = fcmp oge float %295, 0.000000e+00, !dbg !120
  %339 = select i1 %.inv, float 0.000000e+00, float %295, !dbg !120
  %340 = fsub float 0.000000e+00, %339, !dbg !122
  %.inv5 = fcmp ole float %322, 0.000000e+00, !dbg !123
  %341 = select i1 %.inv5, float 0.000000e+00, float %322, !dbg !123
  %342 = fcmp ogt float %340, %341, !dbg !125
  %343 = fcmp uno float %340, 0.000000e+00, !dbg !127
  %344 = or i1 %343, %342, !dbg !128
  %345 = select i1 %344, float %340, float %341, !dbg !129
  %346 = fmul float %345, 0x3F80204080000000, !dbg !130
  %347 = fcmp ogt float %346, 0x3EE4F8B580000000, !dbg !131
  %348 = fcmp uno float %346, 0.000000e+00, !dbg !133
  %349 = or i1 %347, %348, !dbg !134
  %350 = select i1 %349, float %346, float 0x3EE4F8B580000000, !dbg !135
  %351 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %350), !dbg !136
  br label %352, !dbg !137

352:                                              ; preds = %272, %352
  %indvars.iv48 = phi i64 [ 0, %272 ], [ %indvars.iv.next49, %352 ]
  %353 = trunc nuw nsw i64 %indvars.iv48 to i32, !dbg !138
  %354 = add i32 %30, %353, !dbg !138
  %355 = sext i32 %354 to i64, !dbg !139
  %356 = getelementptr bfloat, ptr addrspace(1) %3, i64 %355, !dbg !139
  %357 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %356, i1 %26) #5, !dbg !140
  %358 = extractvalue { i32, i32 } %357, 0, !dbg !140
  %359 = bitcast i32 %358 to <2 x bfloat>, !dbg !140
  %360 = extractvalue { i32, i32 } %357, 1, !dbg !140
  %361 = bitcast i32 %360 to <2 x bfloat>, !dbg !140
  %362 = extractelement <2 x bfloat> %359, i64 0, !dbg !140
  %363 = extractelement <2 x bfloat> %359, i64 1, !dbg !140
  %364 = extractelement <2 x bfloat> %361, i64 0, !dbg !140
  %365 = extractelement <2 x bfloat> %361, i64 1, !dbg !140
  %366 = fpext bfloat %362 to float, !dbg !141
  %367 = fpext bfloat %363 to float, !dbg !141
  %368 = fpext bfloat %364 to float, !dbg !141
  %369 = fpext bfloat %365 to float, !dbg !141
  %370 = fmul float %351, %366, !dbg !142
  %371 = fmul float %351, %367, !dbg !142
  %372 = fmul float %351, %368, !dbg !142
  %373 = fmul float %351, %369, !dbg !142
  %374 = tail call float @llvm.nvvm.round.f(float %370) #5, !dbg !143
  %375 = tail call float @llvm.nvvm.round.f(float %371) #5, !dbg !143
  %376 = tail call float @llvm.nvvm.round.f(float %372) #5, !dbg !143
  %377 = tail call float @llvm.nvvm.round.f(float %373) #5, !dbg !143
  %378 = insertelement <4 x float> poison, float %374, i64 0, !dbg !144
  %379 = insertelement <4 x float> %378, float %375, i64 1, !dbg !144
  %380 = insertelement <4 x float> %379, float %376, i64 2, !dbg !144
  %381 = insertelement <4 x float> %380, float %377, i64 3, !dbg !144
  %382 = fcmp ogt <4 x float> %381, splat (float -1.270000e+02), !dbg !144
  %383 = fcmp uno <4 x float> %381, zeroinitializer, !dbg !146
  %384 = or <4 x i1> %382, %383, !dbg !147
  %385 = select <4 x i1> %384, <4 x float> %381, <4 x float> splat (float -1.270000e+02), !dbg !148
  %386 = fcmp olt <4 x float> %385, splat (float 1.270000e+02), !dbg !149
  %387 = fcmp uno <4 x float> %385, zeroinitializer, !dbg !151
  %388 = or <4 x i1> %386, %387, !dbg !152
  %389 = fptosi <4 x float> %385 to <4 x i8>, !dbg !153
  %390 = select <4 x i1> %388, <4 x i8> %389, <4 x i8> splat (i8 127), !dbg !154
  %391 = getelementptr i8, ptr addrspace(1) %12, i64 %355, !dbg !155
  %392 = bitcast <4 x i8> %390 to i32, !dbg !156
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %391, i1 %26) #5, !dbg !156
  %393 = getelementptr i8, ptr addrspace(1) %13, i64 %355, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %393, i1 %26) #5, !dbg !158
  %394 = getelementptr i8, ptr addrspace(1) %14, i64 %355, !dbg !159
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %394, i1 %26) #5, !dbg !160
  %395 = getelementptr i8, ptr addrspace(1) %15, i64 %355, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %392, ptr addrspace(1) %395, i1 %26) #5, !dbg !162
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 8, !dbg !137
  %396 = icmp samesign ult i64 %indvars.iv48, 3064, !dbg !137
  br i1 %396, label %352, label %397, !dbg !137

397:                                              ; preds = %352
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 46, column: 66, scope: !6)
!19 = !DILocation(line: 38, column: 112, scope: !6)
!20 = !DILocation(line: 44, column: 62, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 65, column: 24, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 60, column: 42, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 49, scope: !6)
!65 = !DILocation(line: 61, column: 35, scope: !6)
!66 = !DILocation(line: 61, column: 49, scope: !6)
!67 = !DILocation(line: 62, column: 35, scope: !6)
!68 = !DILocation(line: 62, column: 42, scope: !6)
!69 = !DILocation(line: 63, column: 35, scope: !6)
!70 = !DILocation(line: 63, column: 42, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 82, column: 47, scope: !6)
!73 = !DILocation(line: 59, column: 113, scope: !6)
!74 = !DILocation(line: 61, column: 102, scope: !6)
!75 = !DILocation(line: 63, column: 95, scope: !6)
!76 = !DILocation(line: 74, column: 24, scope: !6)
!77 = !DILocation(line: 76, column: 24, scope: !6)
!78 = !DILocation(line: 77, column: 24, scope: !6)
!79 = !DILocation(line: 79, column: 24, scope: !6)
!80 = !DILocation(line: 80, column: 24, scope: !6)
!81 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !72)
!82 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !72)
!83 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !72)
!84 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !85)
!85 = !DILocation(line: 84, column: 47, scope: !6)
!86 = !DILocation(line: 86, column: 29, scope: !6)
!87 = !DILocation(line: 86, column: 53, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !85)
!89 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !85)
!90 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !85)
!91 = !DILocation(line: 85, column: 50, scope: !6)
!92 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 95, column: 25, scope: !6)
!117 = !DILocation(line: 95, column: 37, scope: !6)
!118 = !DILocation(line: 96, column: 26, scope: !6)
!119 = !DILocation(line: 96, column: 38, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 106, column: 17, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !124)
!124 = !DILocation(line: 107, column: 46, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !126)
!126 = !DILocation(line: 108, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !126)
!130 = !DILocation(line: 110, column: 24, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !132)
!132 = !DILocation(line: 113, column: 46, scope: !6)
!133 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !132)
!134 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !132)
!135 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !132)
!136 = !DILocation(line: 116, column: 25, scope: !6)
!137 = !DILocation(line: 97, column: 40, scope: !6)
!138 = !DILocation(line: 103, column: 43, scope: !6)
!139 = !DILocation(line: 103, column: 36, scope: !6)
!140 = !DILocation(line: 103, column: 53, scope: !6)
!141 = !DILocation(line: 103, column: 115, scope: !6)
!142 = !DILocation(line: 119, column: 24, scope: !6)
!143 = !DILocation(line: 120, column: 36, scope: !6)
!144 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !145)
!145 = !DILocation(line: 123, column: 46, scope: !6)
!146 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !145)
!148 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !145)
!149 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !150)
!150 = !DILocation(line: 125, column: 46, scope: !6)
!151 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !150)
!152 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !150)
!153 = !DILocation(line: 127, column: 25, scope: !6)
!154 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !150)
!155 = !DILocation(line: 128, column: 30, scope: !6)
!156 = !DILocation(line: 128, column: 54, scope: !6)
!157 = !DILocation(line: 129, column: 30, scope: !6)
!158 = !DILocation(line: 129, column: 54, scope: !6)
!159 = !DILocation(line: 130, column: 30, scope: !6)
!160 = !DILocation(line: 130, column: 54, scope: !6)
!161 = !DILocation(line: 131, column: 30, scope: !6)
!162 = !DILocation(line: 131, column: 54, scope: !6)
!163 = !DILocation(line: 97, column: 4, scope: !6)
