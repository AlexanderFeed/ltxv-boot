; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/p6/cp6b2ga2mpezik2yq4366xtiantk2qzno2oohfs5kmfeirt2qnoa.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp5 < 77\00"

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_poi_fused_index_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !10 {
  %6 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %0) #3, !dbg !11
  %7 = add i64 %6, 77, !dbg !12
  %8 = icmp slt i64 %6, 0, !dbg !13
  %9 = select i1 %8, i64 %7, i64 %6, !dbg !14
  %10 = icmp ugt i64 %9, 76, !dbg !15
  br i1 %10, label %11, label %12, !dbg !16

11:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 30, ptr nonnull @assertFunc_0, i64 1), !dbg !16
  unreachable, !dbg !16

12:                                               ; preds = %5
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !17
  %14 = shl i32 %13, 8, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = shl i32 %15, 1, !dbg !19
  %17 = and i32 %16, 254, !dbg !19
  %18 = or disjoint i32 %17, %14, !dbg !20
  %19 = icmp slt i32 %18, 768, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %20 = sext i32 %18 to i64, !dbg !22
  %.idx = mul nuw nsw i64 %9, 1536, !dbg !23
  %21 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !23
  %22 = getelementptr bfloat, ptr addrspace(1) %21, i64 %20, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %19) #3, !dbg !24
  %24 = getelementptr bfloat, ptr addrspace(1) %2, i64 %20, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %23, ptr addrspace(1) %24, i1 %19) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp6b2ga2mpezik2yq4366xtiantk2qzno2oohfs5kmfeirt2qnoa.py", directory: "/tmp/torchinductor_root/p6")
!4 = !{ptr @triton_poi_fused_index_11, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_poi_fused_index_11", linkageName: "triton_poi_fused_index_11", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 24, column: 19, scope: !10)
!12 = !DILocation(line: 27, column: 18, scope: !10)
!13 = !DILocation(line: 28, column: 18, scope: !10)
!14 = !DILocation(line: 29, column: 32, scope: !10)
!15 = !DILocation(line: 30, column: 36, scope: !10)
!16 = !DILocation(line: 30, column: 48, scope: !10)
!17 = !DILocation(line: 20, column: 28, scope: !10)
!18 = !DILocation(line: 20, column: 33, scope: !10)
!19 = !DILocation(line: 21, column: 36, scope: !10)
!20 = !DILocation(line: 21, column: 23, scope: !10)
!21 = !DILocation(line: 22, column: 21, scope: !10)
!22 = !DILocation(line: 31, column: 35, scope: !10)
!23 = !DILocation(line: 31, column: 30, scope: !10)
!24 = !DILocation(line: 31, column: 46, scope: !10)
!25 = !DILocation(line: 32, column: 25, scope: !10)
!26 = !DILocation(line: 32, column: 36, scope: !10)
!27 = !DILocation(line: 32, column: 4, scope: !10)
