; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [83 x i8] c"/tmp/torchinductor_root/3w/c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp11 < 77\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/3w/c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 49408\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused_add_embedding_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = icmp slt i32 %11, 77, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = and i32 %13, 31, !dbg !13
  %15 = lshr i32 %13, 5, !dbg !13
  %16 = shl i32 %13, 2, !dbg !13
  %17 = and i32 %16, 1020, !dbg !13
  %18 = sext i32 %11 to i64, !dbg !14
  %19 = getelementptr i64, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %12) #6, !dbg !15
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %12) #6, !dbg !15
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %12) #6, !dbg !15
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %12) #6, !dbg !15
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %12) #6, !dbg !15
  %25 = getelementptr i64, ptr addrspace(1) %2, i64 %18, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %12) #6, !dbg !17
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %12) #6, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %12) #6, !dbg !17
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %12) #6, !dbg !17
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %12) #6, !dbg !17
  %31 = icmp samesign ult i32 %17, 768, !dbg !18
  %32 = add i64 %24, 49408, !dbg !19
  %33 = icmp slt i64 %24, 0, !dbg !20
  %34 = select i1 %33, i64 %32, i64 %24, !dbg !21
  %35 = icmp ult i64 %34, 49408, !dbg !22
  %36 = icmp sgt i32 %11, 76, !dbg !23
  %37 = or i1 %36, %35, !dbg !24
  br i1 %37, label %39, label %38, !dbg !25

38:                                               ; preds = %10
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !25
  unreachable, !dbg !25

39:                                               ; preds = %10
  %40 = icmp slt i64 %23, 0, !dbg !20
  %41 = add i64 %23, 49408, !dbg !19
  %42 = select i1 %40, i64 %41, i64 %23, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %43 = zext nneg i32 %17 to i64, !dbg !26
  %.idx = mul i64 %42, 1536, !dbg !27
  %44 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !27
  %45 = getelementptr bfloat, ptr addrspace(1) %44, i64 %43, !dbg !27
  %46 = and i1 %12, %31, !dbg !28
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %46) #6, !dbg !29
  %48 = add i64 %30, 77, !dbg !30
  %49 = icmp slt i64 %30, 0, !dbg !31
  %50 = select i1 %49, i64 %48, i64 %30, !dbg !32
  %51 = icmp ult i64 %50, 77, !dbg !33
  %52 = or i1 %36, %51, !dbg !34
  br i1 %52, label %__nv_rsqrtf.exit, label %53, !dbg !35

53:                                               ; preds = %39
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 50, ptr nonnull @assertFunc_1, i64 1), !dbg !35
  unreachable, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %39
  %54 = icmp slt i64 %29, 0, !dbg !31
  %55 = add i64 %29, 77, !dbg !30
  %56 = select i1 %54, i64 %55, i64 %29, !dbg !32
  %57 = extractvalue { i32, i32 } %47, 1, !dbg !29
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !29
  %59 = extractelement <2 x bfloat> %58, i64 1, !dbg !29
  %60 = fpext bfloat %59 to float, !dbg !36
  %61 = extractelement <2 x bfloat> %58, i64 0, !dbg !29
  %62 = fpext bfloat %61 to float, !dbg !36
  %63 = extractvalue { i32, i32 } %47, 0, !dbg !29
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !29
  %65 = extractelement <2 x bfloat> %64, i64 1, !dbg !29
  %66 = fpext bfloat %65 to float, !dbg !36
  %67 = extractelement <2 x bfloat> %64, i64 0, !dbg !29
  %68 = fpext bfloat %67 to float, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx1 = mul i64 %56, 1536, !dbg !37
  %69 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !37
  %70 = getelementptr bfloat, ptr addrspace(1) %69, i64 %43, !dbg !37
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %70, i1 %46) #6, !dbg !38
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !38
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !38
  %74 = extractvalue { i32, i32 } %71, 1, !dbg !38
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !38
  %76 = extractelement <2 x bfloat> %73, i64 0, !dbg !38
  %77 = extractelement <2 x bfloat> %73, i64 1, !dbg !38
  %78 = extractelement <2 x bfloat> %75, i64 0, !dbg !38
  %79 = extractelement <2 x bfloat> %75, i64 1, !dbg !38
  %80 = fpext bfloat %76 to float, !dbg !39
  %81 = fpext bfloat %77 to float, !dbg !39
  %82 = fpext bfloat %78 to float, !dbg !39
  %83 = fpext bfloat %79 to float, !dbg !39
  %84 = fadd float %68, %80, !dbg !40
  %85 = fadd float %66, %81, !dbg !40
  %86 = fadd float %62, %82, !dbg !40
  %87 = fadd float %60, %83, !dbg !40
  %88 = select i1 %46, float %84, float 0.000000e+00, !dbg !41
  %89 = select i1 %46, float %85, float 0.000000e+00, !dbg !41
  %90 = select i1 %46, float %86, float 0.000000e+00, !dbg !41
  %91 = select i1 %46, float %87, float 0.000000e+00, !dbg !41
  %92 = select i1 %46, float 1.000000e+00, float 0.000000e+00, !dbg !42
  %93 = fsub float %89, %88, !dbg !43
  %94 = select i1 %46, float 2.000000e+00, float 0.000000e+00, !dbg !48
  %95 = fcmp oeq float %94, 0.000000e+00, !dbg !49
  %96 = tail call float @llvm.nvvm.div.full(float %92, float %94), !dbg !50
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !51
  %98 = fmul float %97, %93, !dbg !52
  %99 = fadd float %88, %98, !dbg !53
  %100 = fmul float %93, %93, !dbg !54
  %101 = fmul float %92, %100, !dbg !55
  %102 = fmul float %97, %101, !dbg !56
  %103 = fadd float %102, 0.000000e+00, !dbg !57
  %104 = fsub float %90, %99, !dbg !43
  %105 = select i1 %46, float 3.000000e+00, float 0.000000e+00, !dbg !48
  %106 = fcmp oeq float %105, 0.000000e+00, !dbg !49
  %107 = tail call float @llvm.nvvm.div.full(float %92, float %105), !dbg !50
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !51
  %109 = fmul float %108, %104, !dbg !52
  %110 = fadd float %99, %109, !dbg !53
  %111 = fmul float %104, %104, !dbg !54
  %112 = fmul float %94, %111, !dbg !55
  %113 = fmul float %108, %112, !dbg !56
  %114 = fadd float %103, %113, !dbg !57
  %115 = fsub float %91, %110, !dbg !43
  %116 = select i1 %46, float 4.000000e+00, float 0.000000e+00, !dbg !48
  %117 = fcmp oeq float %116, 0.000000e+00, !dbg !49
  %118 = tail call float @llvm.nvvm.div.full(float %92, float %116), !dbg !50
  %119 = select i1 %117, float 0.000000e+00, float %118, !dbg !51
  %120 = fmul float %119, %115, !dbg !52
  %121 = fadd float %110, %120, !dbg !53
  %122 = fmul float %115, %115, !dbg !54
  %123 = fmul float %105, %122, !dbg !55
  %124 = fmul float %119, %123, !dbg !56
  %125 = fadd float %114, %124, !dbg !57
  %126 = bitcast float %121 to i32, !dbg !58
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 16, i32 31), !dbg !58
  %128 = bitcast i32 %127 to float, !dbg !58
  %129 = bitcast float %125 to i32, !dbg !58
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !58
  %131 = bitcast i32 %130 to float, !dbg !58
  %132 = bitcast float %116 to i32, !dbg !58
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !58
  %134 = bitcast i32 %133 to float, !dbg !58
  %135 = fsub float %128, %121, !dbg !43
  %136 = fadd float %116, %134, !dbg !48
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !49
  %138 = tail call float @llvm.nvvm.div.full(float %134, float %136), !dbg !50
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !51
  %140 = fmul float %139, %135, !dbg !52
  %141 = fadd float %121, %140, !dbg !53
  %142 = fadd float %125, %131, !dbg !59
  %143 = fmul float %135, %135, !dbg !54
  %144 = fmul float %116, %143, !dbg !55
  %145 = fmul float %139, %144, !dbg !56
  %146 = fadd float %142, %145, !dbg !57
  %147 = bitcast float %141 to i32, !dbg !58
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !58
  %149 = bitcast i32 %148 to float, !dbg !58
  %150 = bitcast float %146 to i32, !dbg !58
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !58
  %152 = bitcast i32 %151 to float, !dbg !58
  %153 = bitcast float %136 to i32, !dbg !58
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 8, i32 31), !dbg !58
  %155 = bitcast i32 %154 to float, !dbg !58
  %156 = fsub float %149, %141, !dbg !43
  %157 = fadd float %136, %155, !dbg !48
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !49
  %159 = tail call float @llvm.nvvm.div.full(float %155, float %157), !dbg !50
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !51
  %161 = fmul float %160, %156, !dbg !52
  %162 = fadd float %141, %161, !dbg !53
  %163 = fadd float %146, %152, !dbg !59
  %164 = fmul float %156, %156, !dbg !54
  %165 = fmul float %136, %164, !dbg !55
  %166 = fmul float %160, %165, !dbg !56
  %167 = fadd float %163, %166, !dbg !57
  %168 = bitcast float %162 to i32, !dbg !58
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !58
  %170 = bitcast i32 %169 to float, !dbg !58
  %171 = bitcast float %167 to i32, !dbg !58
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !58
  %173 = bitcast i32 %172 to float, !dbg !58
  %174 = bitcast float %157 to i32, !dbg !58
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 4, i32 31), !dbg !58
  %176 = bitcast i32 %175 to float, !dbg !58
  %177 = fsub float %170, %162, !dbg !43
  %178 = fadd float %157, %176, !dbg !48
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !49
  %180 = tail call float @llvm.nvvm.div.full(float %176, float %178), !dbg !50
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !51
  %182 = fmul float %181, %177, !dbg !52
  %183 = fadd float %162, %182, !dbg !53
  %184 = fadd float %167, %173, !dbg !59
  %185 = fmul float %177, %177, !dbg !54
  %186 = fmul float %157, %185, !dbg !55
  %187 = fmul float %181, %186, !dbg !56
  %188 = fadd float %184, %187, !dbg !57
  %189 = bitcast float %183 to i32, !dbg !58
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !58
  %191 = bitcast i32 %190 to float, !dbg !58
  %192 = bitcast float %188 to i32, !dbg !58
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 2, i32 31), !dbg !58
  %194 = bitcast i32 %193 to float, !dbg !58
  %195 = bitcast float %178 to i32, !dbg !58
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !58
  %197 = bitcast i32 %196 to float, !dbg !58
  %198 = fsub float %191, %183, !dbg !43
  %199 = fadd float %178, %197, !dbg !48
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !49
  %201 = tail call float @llvm.nvvm.div.full(float %197, float %199), !dbg !50
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !51
  %203 = fmul float %202, %198, !dbg !52
  %204 = fadd float %183, %203, !dbg !53
  %205 = fadd float %188, %194, !dbg !59
  %206 = fmul float %198, %198, !dbg !54
  %207 = fmul float %178, %206, !dbg !55
  %208 = fmul float %202, %207, !dbg !56
  %209 = fadd float %205, %208, !dbg !57
  %210 = bitcast float %204 to i32, !dbg !58
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !58
  %212 = bitcast i32 %211 to float, !dbg !58
  %213 = bitcast float %209 to i32, !dbg !58
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !58
  %215 = bitcast i32 %214 to float, !dbg !58
  %216 = bitcast float %199 to i32, !dbg !58
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !58
  %218 = bitcast i32 %217 to float, !dbg !58
  %219 = fsub float %212, %204, !dbg !43
  %220 = fadd float %199, %218, !dbg !48
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !49
  %222 = tail call float @llvm.nvvm.div.full(float %218, float %220), !dbg !50
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !51
  %224 = fmul float %223, %219, !dbg !52
  %225 = fadd float %204, %224, !dbg !53
  %226 = fadd float %209, %215, !dbg !59
  %227 = fmul float %219, %219, !dbg !54
  %228 = fmul float %199, %227, !dbg !55
  %229 = fmul float %223, %228, !dbg !56
  %230 = fadd float %226, %229, !dbg !57
  %231 = and i32 %15, 7, !dbg !58
  %232 = icmp eq i32 %14, 0, !dbg !58
  %233 = zext nneg i32 %231 to i64, !dbg !58
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i64 %233, !dbg !58
  %235 = bitcast float %225 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 %232) #6, !dbg !58
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %233, !dbg !58
  %237 = bitcast float %230 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 %232) #6, !dbg !58
  %238 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %233, !dbg !58
  %239 = bitcast float %220 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 %232) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %240 = icmp slt i32 %13, 8, !dbg !58
  %241 = sext i32 %13 to i64, !dbg !58
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i64 %241, !dbg !58
  %243 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %240) #6, !dbg !58
  %244 = bitcast i32 %243 to float, !dbg !58
  %245 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %241, !dbg !58
  %246 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %245, i1 %240) #6, !dbg !58
  %247 = bitcast i32 %246 to float, !dbg !58
  %248 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %241, !dbg !58
  %249 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %248, i1 %240) #6, !dbg !58
  %250 = bitcast i32 %249 to float, !dbg !58
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !58
  %252 = bitcast i32 %251 to float, !dbg !58
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !58
  %254 = bitcast i32 %253 to float, !dbg !58
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 4, i32 31), !dbg !58
  %256 = bitcast i32 %255 to float, !dbg !58
  %257 = fsub float %252, %244, !dbg !43
  %258 = fadd float %250, %256, !dbg !48
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !49
  %260 = tail call float @llvm.nvvm.div.full(float %256, float %258), !dbg !50
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !51
  %262 = fmul float %257, %261, !dbg !52
  %263 = fadd float %262, %244, !dbg !53
  %264 = fadd float %247, %254, !dbg !59
  %265 = fmul float %257, %257, !dbg !54
  %266 = fmul float %265, %250, !dbg !55
  %267 = fmul float %266, %261, !dbg !56
  %268 = fadd float %264, %267, !dbg !57
  %269 = bitcast float %263 to i32, !dbg !58
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !58
  %271 = bitcast i32 %270 to float, !dbg !58
  %272 = bitcast float %268 to i32, !dbg !58
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !58
  %274 = bitcast i32 %273 to float, !dbg !58
  %275 = bitcast float %258 to i32, !dbg !58
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !58
  %277 = bitcast i32 %276 to float, !dbg !58
  %278 = fsub float %271, %263, !dbg !43
  %279 = fadd float %258, %277, !dbg !48
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !49
  %281 = tail call float @llvm.nvvm.div.full(float %277, float %279), !dbg !50
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !51
  %283 = fmul float %278, %282, !dbg !52
  %284 = fadd float %263, %283, !dbg !53
  %285 = fadd float %268, %274, !dbg !59
  %286 = fmul float %278, %278, !dbg !54
  %287 = fmul float %258, %286, !dbg !55
  %288 = fmul float %282, %287, !dbg !56
  %289 = fadd float %285, %288, !dbg !57
  %290 = bitcast float %284 to i32, !dbg !58
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !58
  %292 = bitcast i32 %291 to float, !dbg !58
  %293 = bitcast float %289 to i32, !dbg !58
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !58
  %295 = bitcast i32 %294 to float, !dbg !58
  %296 = bitcast float %279 to i32, !dbg !58
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !58
  %298 = bitcast i32 %297 to float, !dbg !58
  %299 = fsub float %292, %284, !dbg !43
  %300 = fadd float %279, %298, !dbg !48
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !49
  %302 = tail call float @llvm.nvvm.div.full(float %298, float %300), !dbg !50
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !51
  %304 = fmul float %299, %303, !dbg !52
  %305 = fadd float %284, %304, !dbg !53
  %306 = fadd float %289, %295, !dbg !59
  %307 = fmul float %299, %299, !dbg !54
  %308 = fmul float %279, %307, !dbg !55
  %309 = fmul float %303, %308, !dbg !56
  %310 = fadd float %306, %309, !dbg !57
  %311 = and i32 %13, 7, !dbg !58
  %312 = icmp eq i32 %311, 0, !dbg !58
  %313 = and i1 %240, %312, !dbg !58
  %314 = bitcast float %305 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %314, i1 %313) #6, !dbg !58
  %315 = bitcast float %310 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %315, i1 %313) #6, !dbg !58
  %316 = bitcast float %300 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %316, i1 %313) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %317 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %318 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !58
  %319 = getelementptr bfloat, ptr addrspace(1) %4, i64 %43, !dbg !60
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %319, i1 %31) #6, !dbg !61
  %321 = getelementptr bfloat, ptr addrspace(1) %5, i64 %43, !dbg !62
  %322 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %321, i1 %31) #6, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %323 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %46) #6, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %324 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %70, i1 %46) #6, !dbg !67
  %325 = tail call float @llvm.nvvm.div.full(float %318, float 7.680000e+02), !dbg !68
  %326 = fadd float %325, 0x3EE4F8B580000000, !dbg !69
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !70
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !70
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !70
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !70
  %.not.i8 = icmp eq i32 %330, 0, !dbg !70
  br i1 %.not.i8, label %333, label %331, !dbg !70

331:                                              ; preds = %__nv_rsqrtf.exit
  %332 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %326), !dbg !70
  br label %__nv_rsqrtf.exit10, !dbg !70

333:                                              ; preds = %__nv_rsqrtf.exit
  %334 = tail call float @llvm.nvvm.rsqrt.approx.f(float %326), !dbg !70
  br label %__nv_rsqrtf.exit10, !dbg !70

__nv_rsqrtf.exit10:                               ; preds = %331, %333
  %.0.i9 = phi float [ %332, %331 ], [ %334, %333 ], !dbg !70
  %335 = extractvalue { i32, i32 } %323, 1, !dbg !65
  %336 = bitcast i32 %335 to <2 x bfloat>, !dbg !65
  %337 = extractvalue { i32, i32 } %324, 1, !dbg !67
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !67
  %339 = extractvalue { i32, i32 } %323, 0, !dbg !65
  %340 = bitcast i32 %339 to <2 x bfloat>, !dbg !65
  %341 = extractvalue { i32, i32 } %324, 0, !dbg !67
  %342 = bitcast i32 %341 to <2 x bfloat>, !dbg !67
  %343 = extractvalue { i32, i32 } %320, 0, !dbg !61
  %344 = bitcast i32 %343 to <2 x bfloat>, !dbg !61
  %345 = extractvalue { i32, i32 } %320, 1, !dbg !61
  %346 = bitcast i32 %345 to <2 x bfloat>, !dbg !61
  %347 = extractvalue { i32, i32 } %322, 0, !dbg !63
  %348 = bitcast i32 %347 to <2 x bfloat>, !dbg !63
  %349 = extractvalue { i32, i32 } %322, 1, !dbg !63
  %350 = bitcast i32 %349 to <2 x bfloat>, !dbg !63
  %351 = mul i32 %11, 768, !dbg !71
  %352 = add i32 %17, %351, !dbg !72
  %353 = sext i32 %352 to i64, !dbg !73
  %354 = getelementptr bfloat, ptr addrspace(1) %6, i64 %353, !dbg !73
  %355 = fpext <2 x bfloat> %340 to <2 x float>, !dbg !74
  %356 = fpext <2 x bfloat> %342 to <2 x float>, !dbg !75
  %357 = fadd <2 x float> %355, %356, !dbg !76
  %358 = insertelement <2 x float> poison, float %317, i64 0, !dbg !77
  %359 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %360 = fsub <2 x float> %357, %359, !dbg !77
  %361 = fpext <2 x bfloat> %344 to <2 x float>, !dbg !78
  %362 = fpext <2 x bfloat> %348 to <2 x float>, !dbg !79
  %363 = insertelement <2 x float> poison, float %.0.i9, i64 0, !dbg !80
  %364 = shufflevector <2 x float> %363, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !80
  %365 = fmul <2 x float> %360, %364, !dbg !80
  %366 = fmul <2 x float> %365, %361, !dbg !81
  %367 = fadd <2 x float> %366, %362, !dbg !82
  %368 = fptrunc <2 x float> %367 to <2 x bfloat>, !dbg !83
  %369 = fpext <2 x bfloat> %336 to <2 x float>, !dbg !74
  %370 = fpext <2 x bfloat> %338 to <2 x float>, !dbg !75
  %371 = fadd <2 x float> %369, %370, !dbg !76
  %372 = fsub <2 x float> %371, %359, !dbg !77
  %373 = fpext <2 x bfloat> %346 to <2 x float>, !dbg !78
  %374 = fpext <2 x bfloat> %350 to <2 x float>, !dbg !79
  %375 = fmul <2 x float> %372, %364, !dbg !80
  %376 = fmul <2 x float> %375, %373, !dbg !81
  %377 = fadd <2 x float> %376, %374, !dbg !82
  %378 = fptrunc <2 x float> %377 to <2 x bfloat>, !dbg !83
  %379 = bitcast <2 x bfloat> %368 to i32, !dbg !83
  %380 = bitcast <2 x bfloat> %378 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %379, i32 %380, ptr addrspace(1) %354, i1 %46) #6, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3wcjruu5cnwpuzup4nab57zvkqinv7dv2y6i3hnvt7c6rx64gut.py", directory: "/tmp/torchinductor_root/3w")
!4 = !{ptr @triton_red_fused_add_embedding_native_layer_norm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_native_layer_norm_0", linkageName: "triton_red_fused_add_embedding_native_layer_norm_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 25, column: 21, scope: !10)
!13 = !DILocation(line: 26, column: 37, scope: !10)
!14 = !DILocation(line: 29, column: 30, scope: !10)
!15 = !DILocation(line: 29, column: 35, scope: !10)
!16 = !DILocation(line: 30, column: 30, scope: !10)
!17 = !DILocation(line: 30, column: 35, scope: !10)
!18 = !DILocation(line: 36, column: 29, scope: !10)
!19 = !DILocation(line: 41, column: 22, scope: !10)
!20 = !DILocation(line: 42, column: 22, scope: !10)
!21 = !DILocation(line: 43, column: 36, scope: !10)
!22 = !DILocation(line: 44, column: 41, scope: !10)
!23 = !DILocation(line: 0, scope: !10)
!24 = !DILocation(line: 44, column: 58, scope: !10)
!25 = !DILocation(line: 44, column: 68, scope: !10)
!26 = !DILocation(line: 45, column: 41, scope: !10)
!27 = !DILocation(line: 45, column: 34, scope: !10)
!28 = !DILocation(line: 45, column: 62, scope: !10)
!29 = !DILocation(line: 45, column: 52, scope: !10)
!30 = !DILocation(line: 47, column: 22, scope: !10)
!31 = !DILocation(line: 48, column: 23, scope: !10)
!32 = !DILocation(line: 49, column: 38, scope: !10)
!33 = !DILocation(line: 50, column: 42, scope: !10)
!34 = !DILocation(line: 50, column: 57, scope: !10)
!35 = !DILocation(line: 50, column: 67, scope: !10)
!36 = !DILocation(line: 45, column: 113, scope: !10)
!37 = !DILocation(line: 51, column: 35, scope: !10)
!38 = !DILocation(line: 51, column: 54, scope: !10)
!39 = !DILocation(line: 51, column: 115, scope: !10)
!40 = !DILocation(line: 52, column: 23, scope: !10)
!41 = !DILocation(line: 58, column: 64, scope: !10)
!42 = !DILocation(line: 60, column: 68, scope: !10)
!43 = !DILocation(line: 217, column: 21, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!46 = distinct !DILexicalBlockFile(scope: !10, file: !45, discriminator: 0)
!47 = !DILocation(line: 61, column: 85, scope: !10)
!48 = !DILocation(line: 218, column: 28, scope: !44, inlinedAt: !47)
!49 = !DILocation(line: 219, column: 39, scope: !44, inlinedAt: !47)
!50 = !DILocation(line: 219, column: 60, scope: !44, inlinedAt: !47)
!51 = !DILocation(line: 219, column: 49, scope: !44, inlinedAt: !47)
!52 = !DILocation(line: 221, column: 25, scope: !44, inlinedAt: !47)
!53 = !DILocation(line: 221, column: 17, scope: !44, inlinedAt: !47)
!54 = !DILocation(line: 222, column: 30, scope: !44, inlinedAt: !47)
!55 = !DILocation(line: 222, column: 38, scope: !44, inlinedAt: !47)
!56 = !DILocation(line: 222, column: 49, scope: !44, inlinedAt: !47)
!57 = !DILocation(line: 222, column: 22, scope: !44, inlinedAt: !47)
!58 = !DILocation(line: 229, column: 46, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 222, column: 15, scope: !44, inlinedAt: !47)
!60 = !DILocation(line: 71, column: 35, scope: !10)
!61 = !DILocation(line: 71, column: 42, scope: !10)
!62 = !DILocation(line: 72, column: 35, scope: !10)
!63 = !DILocation(line: 72, column: 42, scope: !10)
!64 = !DILocation(line: 77, column: 70, scope: !10)
!65 = !DILocation(line: 78, column: 54, scope: !10)
!66 = !DILocation(line: 83, column: 67, scope: !10)
!67 = !DILocation(line: 84, column: 54, scope: !10)
!68 = !DILocation(line: 89, column: 25, scope: !10)
!69 = !DILocation(line: 91, column: 24, scope: !10)
!70 = !DILocation(line: 92, column: 32, scope: !10)
!71 = !DILocation(line: 99, column: 40, scope: !10)
!72 = !DILocation(line: 99, column: 36, scope: !10)
!73 = !DILocation(line: 99, column: 29, scope: !10)
!74 = !DILocation(line: 78, column: 116, scope: !10)
!75 = !DILocation(line: 84, column: 116, scope: !10)
!76 = !DILocation(line: 85, column: 24, scope: !10)
!77 = !DILocation(line: 87, column: 24, scope: !10)
!78 = !DILocation(line: 71, column: 95, scope: !10)
!79 = !DILocation(line: 72, column: 95, scope: !10)
!80 = !DILocation(line: 93, column: 24, scope: !10)
!81 = !DILocation(line: 95, column: 24, scope: !10)
!82 = !DILocation(line: 97, column: 24, scope: !10)
!83 = !DILocation(line: 99, column: 52, scope: !10)
!84 = !DILocation(line: 65, column: 4, scope: !10)
