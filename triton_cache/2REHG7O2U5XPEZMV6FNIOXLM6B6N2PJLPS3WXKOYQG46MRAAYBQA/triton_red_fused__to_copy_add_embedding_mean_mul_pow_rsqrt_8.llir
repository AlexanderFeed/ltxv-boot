; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/uw/cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %11, 6, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 3, !dbg !13
  %15 = and i32 %14, 63, !dbg !13
  %16 = lshr i32 %13, 6, !dbg !13
  %17 = and i32 %16, 7, !dbg !13
  %18 = or disjoint i32 %15, %12, !dbg !14
  %19 = or disjoint i32 %17, %12, !dbg !14
  %20 = or disjoint i32 %19, 8, !dbg !14
  %21 = or disjoint i32 %19, 16, !dbg !14
  %22 = or disjoint i32 %19, 24, !dbg !14
  %23 = or disjoint i32 %19, 32, !dbg !14
  %24 = or disjoint i32 %19, 40, !dbg !14
  %25 = or disjoint i32 %19, 48, !dbg !14
  %26 = or disjoint i32 %19, 56, !dbg !14
  %27 = icmp slt i32 %18, 512, !dbg !15
  %28 = icmp slt i32 %19, 512, !dbg !15
  %29 = icmp slt i32 %20, 512, !dbg !15
  %30 = icmp slt i32 %21, 512, !dbg !15
  %31 = icmp slt i32 %22, 512, !dbg !15
  %32 = icmp slt i32 %23, 512, !dbg !15
  %33 = icmp slt i32 %24, 512, !dbg !15
  %34 = icmp slt i32 %25, 512, !dbg !15
  %35 = icmp slt i32 %26, 512, !dbg !15
  %36 = shl i32 %13, 3, !dbg !16
  %37 = and i32 %36, 56, !dbg !16
  %38 = sext i32 %18 to i64, !dbg !17
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = sext i32 %19 to i64, !dbg !17
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !17
  %42 = sext i32 %20 to i64, !dbg !17
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !17
  %44 = sext i32 %21 to i64, !dbg !17
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !17
  %46 = sext i32 %22 to i64, !dbg !17
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !17
  %48 = sext i32 %23 to i64, !dbg !17
  %49 = getelementptr i64, ptr addrspace(1) %1, i64 %48, !dbg !17
  %50 = sext i32 %24 to i64, !dbg !17
  %51 = getelementptr i64, ptr addrspace(1) %1, i64 %50, !dbg !17
  %52 = sext i32 %25 to i64, !dbg !17
  %53 = getelementptr i64, ptr addrspace(1) %1, i64 %52, !dbg !17
  %54 = sext i32 %26 to i64, !dbg !17
  %55 = getelementptr i64, ptr addrspace(1) %1, i64 %54, !dbg !17
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %28) #6, !dbg !18
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %29) #6, !dbg !18
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %30) #6, !dbg !18
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %31) #6, !dbg !18
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %32) #6, !dbg !18
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %51, i1 %33) #6, !dbg !18
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %34) #6, !dbg !18
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 %35) #6, !dbg !18
  %72 = shl i32 %18, 12, !dbg !19
  %73 = icmp slt i64 %63, 0, !dbg !20
  %74 = insertelement <8 x i64> poison, i64 %71, i64 0, !dbg !21
  %75 = insertelement <8 x i64> %74, i64 %70, i64 1, !dbg !21
  %76 = insertelement <8 x i64> %75, i64 %69, i64 2, !dbg !21
  %77 = insertelement <8 x i64> %76, i64 %68, i64 3, !dbg !21
  %78 = insertelement <8 x i64> %77, i64 %67, i64 4, !dbg !21
  %79 = insertelement <8 x i64> %78, i64 %66, i64 5, !dbg !21
  %80 = insertelement <8 x i64> %79, i64 %65, i64 6, !dbg !21
  %81 = insertelement <8 x i64> %80, i64 %64, i64 7, !dbg !21
  %82 = add <8 x i64> %81, splat (i64 32128), !dbg !21
  %83 = icmp slt <8 x i64> %81, zeroinitializer, !dbg !20
  %84 = select <8 x i1> %83, <8 x i64> %82, <8 x i64> %81, !dbg !22
  %85 = icmp ugt <8 x i64> %84, splat (i64 32127), !dbg !23
  %86 = extractelement <8 x i1> %85, i64 7, !dbg !24
  %.not3 = and i1 %28, %86, !dbg !24
  %87 = extractelement <8 x i1> %85, i64 6, !dbg !24
  %.not4 = and i1 %29, %87, !dbg !24
  %88 = extractelement <8 x i1> %85, i64 5, !dbg !24
  %.not5 = and i1 %30, %88, !dbg !24
  %89 = extractelement <8 x i1> %85, i64 4, !dbg !24
  %.not6 = and i1 %31, %89, !dbg !24
  %90 = extractelement <8 x i1> %85, i64 3, !dbg !24
  %.not7 = and i1 %32, %90, !dbg !24
  %91 = extractelement <8 x i1> %85, i64 2, !dbg !24
  %.not8 = and i1 %33, %91, !dbg !24
  %92 = extractelement <8 x i1> %85, i64 1, !dbg !24
  %.not9 = and i1 %34, %92, !dbg !24
  %93 = extractelement <8 x i1> %85, i64 0, !dbg !25
  %.not10 = and i1 %35, %93, !dbg !25
  %94 = shl i64 %63, 12, !dbg !25
  %95 = add i64 %94, 131596288, !dbg !25
  %96 = select i1 %73, i64 %95, i64 %94, !dbg !25
  %invariant.op = or disjoint i32 %37, %72, !dbg !26
  %invariant.op33 = or i1 %.not5, %.not6, !dbg !26
  %invariant.op35 = or i1 %invariant.op33, %.not7, !dbg !26
  %invariant.op37 = or i1 %invariant.op35, %.not8, !dbg !26
  %invariant.op39 = or i1 %invariant.op37, %.not9, !dbg !26
  %invariant.op41 = or i1 %invariant.op39, %.not10, !dbg !26
  %97 = or i1 %.not3, %.not4
  %.reass42 = or i1 %97, %invariant.op41
  %98 = zext nneg i32 %37 to i64, !dbg !26
  %99 = or disjoint i64 %96, %98
  %100 = insertelement <8 x i1> poison, i1 %27, i64 0, !dbg !27
  %101 = shufflevector <8 x i1> %100, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !27
  br label %102, !dbg !26

102:                                              ; preds = %10, %113
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %113 ]
  %103 = phi <8 x float> [ zeroinitializer, %10 ], [ %191, %113 ]
  %104 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %104
  %105 = sext i32 %.reass to i64, !dbg !28
  %106 = getelementptr bfloat, ptr addrspace(1) %0, i64 %105, !dbg !28
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %106, i1 %27) #6, !dbg !29
  %108 = getelementptr bfloat, ptr addrspace(1) %3, i64 %105, !dbg !30
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %108, i1 %27) #6, !dbg !31
  %110 = getelementptr bfloat, ptr addrspace(1) %4, i64 %105, !dbg !32
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %110, i1 %27) #6, !dbg !33
  br i1 %.reass42, label %112, label %113, !dbg !34

112:                                              ; preds = %102
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !34
  unreachable, !dbg !34

113:                                              ; preds = %102
  %114 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !33
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !33
  %116 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !33
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !33
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !33
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !31
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !31
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !31
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !31
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !29
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !29
  %132 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !29
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !29
  %134 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !29
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !29
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %138 = or i64 %99, %indvars.iv, !dbg !35
  %139 = getelementptr bfloat, ptr addrspace(1) %2, i64 %138, !dbg !36
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %139, i1 %27) #6, !dbg !37
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !37
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !37
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !37
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !37
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !37
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !37
  %147 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !37
  %148 = bitcast i32 %147 to <2 x bfloat>, !dbg !37
  %149 = fpext <2 x bfloat> %121 to <2 x float>, !dbg !38
  %150 = fpext <2 x bfloat> %129 to <2 x float>, !dbg !39
  %151 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !40
  %152 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !41
  %153 = fadd <2 x float> %151, %152, !dbg !42
  %154 = fadd <2 x float> %153, %150, !dbg !43
  %155 = fadd <2 x float> %154, %149, !dbg !44
  %156 = fptrunc <2 x float> %155 to <2 x bfloat>, !dbg !45
  %157 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !38
  %158 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !39
  %159 = fpext <2 x bfloat> %135 to <2 x float>, !dbg !40
  %160 = fpext <2 x bfloat> %144 to <2 x float>, !dbg !41
  %161 = fadd <2 x float> %159, %160, !dbg !42
  %162 = fadd <2 x float> %161, %158, !dbg !43
  %163 = fadd <2 x float> %162, %157, !dbg !44
  %164 = fptrunc <2 x float> %163 to <2 x bfloat>, !dbg !45
  %165 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !38
  %166 = fpext <2 x bfloat> %125 to <2 x float>, !dbg !39
  %167 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !40
  %168 = fpext <2 x bfloat> %146 to <2 x float>, !dbg !41
  %169 = fadd <2 x float> %167, %168, !dbg !42
  %170 = fadd <2 x float> %169, %166, !dbg !43
  %171 = fadd <2 x float> %170, %165, !dbg !44
  %172 = fptrunc <2 x float> %171 to <2 x bfloat>, !dbg !45
  %173 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !38
  %174 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !39
  %175 = fpext <2 x bfloat> %131 to <2 x float>, !dbg !40
  %176 = fpext <2 x bfloat> %148 to <2 x float>, !dbg !41
  %177 = fadd <2 x float> %175, %176, !dbg !42
  %178 = fadd <2 x float> %177, %174, !dbg !43
  %179 = fadd <2 x float> %178, %173, !dbg !44
  %180 = shufflevector <2 x float> %155, <2 x float> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %181 = shufflevector <2 x float> %171, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %182 = shufflevector <8 x float> %180, <8 x float> %181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !46
  %183 = shufflevector <2 x float> %171, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %184 = shufflevector <8 x float> %182, <8 x float> %183, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !46
  %185 = shufflevector <2 x float> %179, <2 x float> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %186 = shufflevector <8 x float> %184, <8 x float> %185, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !46
  %187 = shufflevector <2 x float> %179, <2 x float> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %188 = shufflevector <8 x float> %186, <8 x float> %187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !46
  %189 = fmul <8 x float> %188, %188, !dbg !46
  %190 = fadd <8 x float> %103, %189, !dbg !47
  %191 = select <8 x i1> %101, <8 x float> %190, <8 x float> %103, !dbg !27
  %192 = fptrunc <2 x float> %179 to <2 x bfloat>, !dbg !45
  %193 = bitcast <2 x bfloat> %156 to i32, !dbg !45
  %194 = bitcast <2 x bfloat> %164 to i32, !dbg !45
  %195 = bitcast <2 x bfloat> %172 to i32, !dbg !45
  %196 = bitcast <2 x bfloat> %192 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %194, i32 %195, i32 %196, ptr addrspace(1) %106, i1 %27) #6, !dbg !45
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !26
  %197 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !26
  br i1 %197, label %102, label %__nv_rsqrtf.exit, !dbg !26

__nv_rsqrtf.exit:                                 ; preds = %113
  %shift = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %198 = fadd <8 x float> %191, %shift, !dbg !48
  %shift68 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %199 = fadd <8 x float> %shift68, %198, !dbg !48
  %shift69 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %200 = fadd <8 x float> %shift69, %199, !dbg !48
  %shift70 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %201 = fadd <8 x float> %shift70, %200, !dbg !48
  %shift71 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %202 = fadd <8 x float> %shift71, %201, !dbg !48
  %shift72 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %203 = fadd <8 x float> %shift72, %202, !dbg !48
  %shift73 = shufflevector <8 x float> %191, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %204 = fadd <8 x float> %shift73, %203, !dbg !48
  %205 = extractelement <8 x float> %204, i64 0, !dbg !48
  %206 = bitcast float %205 to i32, !dbg !53
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !53
  %208 = bitcast i32 %207 to float, !dbg !53
  %209 = fadd float %205, %208, !dbg !48
  %210 = bitcast float %209 to i32, !dbg !53
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !53
  %212 = bitcast i32 %211 to float, !dbg !53
  %213 = fadd float %209, %212, !dbg !48
  %214 = bitcast float %213 to i32, !dbg !53
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !53
  %216 = bitcast i32 %215 to float, !dbg !53
  %217 = fadd float %213, %216, !dbg !48
  %218 = tail call float @llvm.nvvm.div.full(float %217, float 4.096000e+03), !dbg !54
  %219 = fadd float %218, 0x3EB0C6F7A0000000, !dbg !55
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %.not.i29 = icmp eq i32 %227, 0, !dbg !56
  br i1 %.not.i29, label %230, label %228, !dbg !56

228:                                              ; preds = %__nv_rsqrtf.exit
  %229 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %219), !dbg !56
  br label %__nv_rsqrtf.exit31, !dbg !56

230:                                              ; preds = %__nv_rsqrtf.exit
  %231 = tail call float @llvm.nvvm.rsqrt.approx.f(float %219), !dbg !56
  br label %__nv_rsqrtf.exit31, !dbg !56

__nv_rsqrtf.exit31:                               ; preds = %228, %230
  %.0.i30 = phi float [ %229, %228 ], [ %231, %230 ], !dbg !56
  %232 = insertelement <2 x float> poison, float %.0.i30, i64 0, !dbg !57
  %233 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  br label %234, !dbg !58

234:                                              ; preds = %__nv_rsqrtf.exit31, %234
  %indvars.iv52 = phi i64 [ 0, %__nv_rsqrtf.exit31 ], [ %indvars.iv.next53, %234 ]
  %235 = or disjoint i64 %indvars.iv52, %98, !dbg !59
  %236 = getelementptr bfloat, ptr addrspace(1) %5, i64 %235, !dbg !60
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %236, i1 true) #6, !dbg !61
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !61
  %239 = bitcast i32 %238 to <2 x bfloat>, !dbg !61
  %240 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !61
  %241 = bitcast i32 %240 to <2 x bfloat>, !dbg !61
  %242 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !61
  %243 = bitcast i32 %242 to <2 x bfloat>, !dbg !61
  %244 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !61
  %245 = bitcast i32 %244 to <2 x bfloat>, !dbg !61
  %246 = trunc nuw nsw i64 %indvars.iv52 to i32
  %.reass44 = or i32 %invariant.op, %246
  %247 = sext i32 %.reass44 to i64, !dbg !62
  %248 = getelementptr bfloat, ptr addrspace(1) %0, i64 %247, !dbg !62
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %248, i1 %27) #6, !dbg !63
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !63
  %251 = bitcast i32 %250 to <2 x bfloat>, !dbg !63
  %252 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !63
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !63
  %254 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !63
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !63
  %256 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !63
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !63
  %258 = getelementptr bfloat, ptr addrspace(1) %6, i64 %247, !dbg !64
  %259 = fpext <2 x bfloat> %239 to <2 x float>, !dbg !65
  %260 = fpext <2 x bfloat> %251 to <2 x float>, !dbg !66
  %261 = fmul <2 x float> %233, %260, !dbg !57
  %262 = fmul <2 x float> %261, %259, !dbg !67
  %263 = fptrunc <2 x float> %262 to <2 x bfloat>, !dbg !68
  %264 = fpext <2 x bfloat> %241 to <2 x float>, !dbg !65
  %265 = fpext <2 x bfloat> %253 to <2 x float>, !dbg !66
  %266 = fmul <2 x float> %233, %265, !dbg !57
  %267 = fmul <2 x float> %266, %264, !dbg !67
  %268 = fptrunc <2 x float> %267 to <2 x bfloat>, !dbg !68
  %269 = fpext <2 x bfloat> %243 to <2 x float>, !dbg !65
  %270 = fpext <2 x bfloat> %255 to <2 x float>, !dbg !66
  %271 = fmul <2 x float> %233, %270, !dbg !57
  %272 = fmul <2 x float> %271, %269, !dbg !67
  %273 = fptrunc <2 x float> %272 to <2 x bfloat>, !dbg !68
  %274 = fpext <2 x bfloat> %245 to <2 x float>, !dbg !65
  %275 = fpext <2 x bfloat> %257 to <2 x float>, !dbg !66
  %276 = fmul <2 x float> %233, %275, !dbg !57
  %277 = fmul <2 x float> %276, %274, !dbg !67
  %278 = fptrunc <2 x float> %277 to <2 x bfloat>, !dbg !68
  %279 = bitcast <2 x bfloat> %263 to i32, !dbg !68
  %280 = bitcast <2 x bfloat> %268 to i32, !dbg !68
  %281 = bitcast <2 x bfloat> %273 to i32, !dbg !68
  %282 = bitcast <2 x bfloat> %278 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %258, i1 %27) #6, !dbg !68
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 64, !dbg !58
  %283 = icmp samesign ult i64 %indvars.iv52, 4032, !dbg !58
  br i1 %283, label %234, label %284, !dbg !58

284:                                              ; preds = %234
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py", directory: "/tmp/torchinductor_root/uw")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 50, scope: !10)
!20 = !DILocation(line: 42, column: 22, scope: !10)
!21 = !DILocation(line: 41, column: 22, scope: !10)
!22 = !DILocation(line: 43, column: 36, scope: !10)
!23 = !DILocation(line: 44, column: 41, scope: !10)
!24 = !DILocation(line: 44, column: 58, scope: !10)
!25 = !DILocation(line: 45, column: 46, scope: !10)
!26 = !DILocation(line: 31, column: 40, scope: !10)
!27 = !DILocation(line: 53, column: 50, scope: !10)
!28 = !DILocation(line: 37, column: 38, scope: !10)
!29 = !DILocation(line: 37, column: 55, scope: !10)
!30 = !DILocation(line: 38, column: 34, scope: !10)
!31 = !DILocation(line: 38, column: 51, scope: !10)
!32 = !DILocation(line: 39, column: 35, scope: !10)
!33 = !DILocation(line: 39, column: 52, scope: !10)
!34 = !DILocation(line: 44, column: 68, scope: !10)
!35 = !DILocation(line: 45, column: 41, scope: !10)
!36 = !DILocation(line: 45, column: 34, scope: !10)
!37 = !DILocation(line: 45, column: 53, scope: !10)
!38 = !DILocation(line: 39, column: 114, scope: !10)
!39 = !DILocation(line: 38, column: 113, scope: !10)
!40 = !DILocation(line: 37, column: 117, scope: !10)
!41 = !DILocation(line: 45, column: 115, scope: !10)
!42 = !DILocation(line: 46, column: 22, scope: !10)
!43 = !DILocation(line: 47, column: 23, scope: !10)
!44 = !DILocation(line: 48, column: 24, scope: !10)
!45 = !DILocation(line: 54, column: 56, scope: !10)
!46 = !DILocation(line: 50, column: 24, scope: !10)
!47 = !DILocation(line: 52, column: 25, scope: !10)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !10, file: !50, discriminator: 0)
!52 = !DILocation(line: 55, column: 27, scope: !10)
!53 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 66, column: 25, scope: !10)
!55 = !DILocation(line: 68, column: 24, scope: !10)
!56 = !DILocation(line: 69, column: 32, scope: !10)
!57 = !DILocation(line: 70, column: 24, scope: !10)
!58 = !DILocation(line: 56, column: 40, scope: !10)
!59 = !DILocation(line: 57, column: 31, scope: !10)
!60 = !DILocation(line: 62, column: 35, scope: !10)
!61 = !DILocation(line: 62, column: 42, scope: !10)
!62 = !DILocation(line: 63, column: 39, scope: !10)
!63 = !DILocation(line: 63, column: 56, scope: !10)
!64 = !DILocation(line: 73, column: 29, scope: !10)
!65 = !DILocation(line: 62, column: 95, scope: !10)
!66 = !DILocation(line: 63, column: 118, scope: !10)
!67 = !DILocation(line: 72, column: 24, scope: !10)
!68 = !DILocation(line: 73, column: 53, scope: !10)
!69 = !DILocation(line: 56, column: 4, scope: !10)
