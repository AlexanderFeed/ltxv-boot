; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 3, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 64, !dbg !19
  %18 = lshr i32 %15, 4, !dbg !19
  %19 = and i32 %18, 7, !dbg !19
  %20 = or disjoint i32 %19, 8, !dbg !19
  %21 = or disjoint i32 %19, 16, !dbg !19
  %22 = or disjoint i32 %19, 24, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = lshr exact i32 %17, 2, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 8, !dbg !19
  %28 = and i32 %26, 16, !dbg !19
  %29 = and i32 %26, 24, !dbg !19
  %30 = or disjoint i32 %14, %19, !dbg !20
  %31 = or disjoint i32 %14, %20, !dbg !20
  %32 = or disjoint i32 %14, %21, !dbg !20
  %33 = or disjoint i32 %14, %22, !dbg !20
  %34 = shl nsw i32 %13, 5, !dbg !21
  %35 = or disjoint i32 %34, %19, !dbg !22
  %36 = or disjoint i32 %34, %20, !dbg !22
  %37 = or disjoint i32 %34, %21, !dbg !22
  %38 = or disjoint i32 %34, %22, !dbg !22
  %39 = srem i32 %30, 77, !dbg !23
  %40 = srem i32 %31, 77, !dbg !23
  %41 = srem i32 %32, 77, !dbg !23
  %42 = srem i32 %33, 77, !dbg !23
  %43 = srem i32 %35, 768, !dbg !24
  %44 = srem i32 %36, 768, !dbg !24
  %45 = srem i32 %37, 768, !dbg !24
  %46 = srem i32 %38, 768, !dbg !24
  %47 = and i32 %26, 32, !dbg !25
  %48 = and i32 %26, 56, !dbg !25
  %49 = and i32 %26, 120, !dbg !25
  %50 = mul nsw i32 %39, 768, !dbg !26
  %51 = mul nsw i32 %40, 768, !dbg !26
  %52 = mul nsw i32 %41, 768, !dbg !26
  %53 = mul nsw i32 %42, 768, !dbg !26
  %54 = mul nsw i32 %43, 768, !dbg !27
  %55 = mul nsw i32 %44, 768, !dbg !27
  %56 = mul nsw i32 %45, 768, !dbg !27
  %57 = mul nsw i32 %46, 768, !dbg !27
  %58 = or disjoint i32 %50, %49, !dbg !28
  %59 = or disjoint i32 %51, %49, !dbg !28
  %60 = or disjoint i32 %52, %49, !dbg !28
  %61 = or disjoint i32 %53, %49, !dbg !28
  %62 = sext i32 %58 to i64, !dbg !29
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !29
  %64 = sext i32 %59 to i64, !dbg !29
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !29
  %66 = sext i32 %60 to i64, !dbg !29
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !29
  %68 = sext i32 %61 to i64, !dbg !29
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = lshr exact i32 %16, 1, !dbg !30
  %71 = lshr i32 %15, 1, !dbg !30
  %72 = and i32 %71, 56, !dbg !30
  %73 = xor i32 %49, %72, !dbg !30
  %74 = shl nuw nsw i32 %19, 7, !dbg !30
  %75 = or disjoint i32 %73, %74, !dbg !30
  %76 = zext nneg i32 %75 to i64, !dbg !30
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %76, !dbg !30
  %78 = or disjoint i32 %75, 1024, !dbg !30
  %79 = zext nneg i32 %78 to i64, !dbg !30
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %79, !dbg !30
  %81 = or disjoint i32 %75, 2048, !dbg !30
  %82 = zext nneg i32 %81 to i64, !dbg !30
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %82, !dbg !30
  %84 = or disjoint i32 %75, 3072, !dbg !30
  %85 = zext nneg i32 %84 to i64, !dbg !30
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %85, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %77, ptr addrspace(1) %63, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %65, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %83, ptr addrspace(1) %67, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %69, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %87 = or disjoint i32 %54, %49, !dbg !31
  %88 = or disjoint i32 %55, %49, !dbg !31
  %89 = or disjoint i32 %56, %49, !dbg !31
  %90 = or disjoint i32 %57, %49, !dbg !31
  %91 = sext i32 %87 to i64, !dbg !32
  %92 = getelementptr bfloat, ptr addrspace(1) %1, i64 %91, !dbg !32
  %93 = sext i32 %88 to i64, !dbg !32
  %94 = getelementptr bfloat, ptr addrspace(1) %1, i64 %93, !dbg !32
  %95 = sext i32 %89 to i64, !dbg !32
  %96 = getelementptr bfloat, ptr addrspace(1) %1, i64 %95, !dbg !32
  %97 = sext i32 %90 to i64, !dbg !32
  %98 = getelementptr bfloat, ptr addrspace(1) %1, i64 %97, !dbg !32
  %99 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %76, !dbg !33
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %79, !dbg !33
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %82, !dbg !33
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %85, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %92, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %94, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %96, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %98, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %47, %70, !dbg !34
  %103 = and i32 %15, 7
  %104 = and i32 %15, 15
  %105 = xor i32 %48, %70
  %106 = or disjoint i32 %25, %104
  %107 = shl nuw nsw i32 %106, 7
  %108 = or disjoint i32 %107, %105
  %109 = zext nneg i32 %108 to i64
  %110 = or disjoint i32 %27, 16
  %111 = xor i32 %110, %28
  %112 = or disjoint i32 %111, %47
  %113 = xor i32 %112, %70
  %114 = or disjoint i32 %113, %107
  %115 = zext nneg i32 %114 to i64
  %116 = or disjoint i32 %29, 32
  %.reass = xor i32 %116, %invariant.op
  %117 = or disjoint i32 %.reass, %107
  %118 = zext nneg i32 %117 to i64
  %119 = or disjoint i32 %27, 48
  %and.ra = and i32 %26, 48
  %120 = or disjoint i32 %70, %and.ra
  %121 = xor i32 %120, %119
  %122 = or disjoint i32 %121, %107
  %123 = zext nneg i32 %122 to i64
  %124 = or disjoint i32 %48, 64
  %125 = xor i32 %124, %70
  %126 = or disjoint i32 %125, %107
  %127 = zext nneg i32 %126 to i64
  %128 = or disjoint i32 %27, 80
  %129 = xor i32 %128, %28
  %130 = or disjoint i32 %129, %47
  %131 = xor i32 %130, %70
  %132 = or disjoint i32 %131, %107
  %133 = zext nneg i32 %132 to i64
  %134 = or disjoint i32 %29, 96
  %.reass28 = xor i32 %134, %invariant.op
  %135 = or disjoint i32 %.reass28, %107
  %136 = zext nneg i32 %135 to i64
  %137 = or disjoint i32 %27, 112
  %138 = xor i32 %120, %137
  %139 = or disjoint i32 %138, %107
  %140 = zext nneg i32 %139 to i64
  %and.ra23 = and i32 %15, 24
  %141 = xor i32 %48, %and.ra23
  %142 = or disjoint i32 %24, %103
  %143 = shl nuw nsw i32 %142, 7
  %144 = or disjoint i32 %143, %141
  %145 = zext nneg i32 %144 to i64
  %146 = or disjoint i32 %47, %and.ra23
  %147 = xor i32 %146, %116
  %148 = or disjoint i32 %147, %143
  %149 = zext nneg i32 %148 to i64
  %150 = xor i32 %124, %and.ra23
  %151 = or disjoint i32 %150, %143
  %152 = zext nneg i32 %151 to i64
  %153 = xor i32 %146, %134
  %154 = or disjoint i32 %153, %143
  %155 = zext nneg i32 %154 to i64
  %156 = or disjoint i32 %143, 2048
  %157 = or disjoint i32 %156, %141
  %158 = zext nneg i32 %157 to i64
  %159 = or disjoint i32 %147, %156
  %160 = zext nneg i32 %159 to i64
  %161 = or disjoint i32 %156, %150
  %162 = zext nneg i32 %161 to i64
  %163 = or disjoint i32 %153, %156
  %164 = zext nneg i32 %163 to i64
  %165 = zext nneg i32 %49 to i64, !dbg !34
  %166 = sext i32 %57 to i64, !dbg !34
  %167 = sext i32 %56 to i64, !dbg !34
  %168 = sext i32 %55 to i64, !dbg !34
  %169 = sext i32 %54 to i64, !dbg !34
  %170 = sext i32 %53 to i64, !dbg !34
  %171 = sext i32 %52 to i64, !dbg !34
  %172 = sext i32 %51 to i64, !dbg !34
  %173 = sext i32 %50 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %173, !dbg !34
  %invariant.gep43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %172, !dbg !34
  %invariant.gep45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %171, !dbg !34
  %invariant.gep47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %170, !dbg !34
  %invariant.gep49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %169, !dbg !34
  %invariant.gep51 = getelementptr bfloat, ptr addrspace(1) %1, i64 %168, !dbg !34
  %invariant.gep53 = getelementptr bfloat, ptr addrspace(1) %1, i64 %167, !dbg !34
  %invariant.gep55 = getelementptr bfloat, ptr addrspace(1) %1, i64 %166, !dbg !34
  br label %174, !dbg !34

174:                                              ; preds = %4, %174
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %174 ]
  %175 = phi i32 [ -1, %4 ], [ %186, %174 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %390, %174 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %391, %174 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %392, %174 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %393, %174 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %395, %174 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %396, %174 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %397, %174 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %398, %174 ]
  %.not14 = icmp eq i64 %indvars.iv, 5, !dbg !34
  %184 = add i32 %175, 1, !dbg !34
  %185 = icmp ugt i32 %175, 2147483646, !dbg !34
  %186 = select i1 %185, i32 %184, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %187 = shl i32 %186, 12, !dbg !30
  %188 = sext i32 %187 to i64, !dbg !30
  %189 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %188, !dbg !30
  %190 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %109, !dbg !30
  %191 = ptrtoint ptr addrspace(3) %190 to i64, !dbg !30
  %192 = trunc i64 %191 to i32, !dbg !30
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %192) #1, !dbg !30
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !30
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !30
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !30
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !30
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %115, !dbg !30
  %199 = ptrtoint ptr addrspace(3) %198 to i64, !dbg !30
  %200 = trunc i64 %199 to i32, !dbg !30
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %200) #1, !dbg !30
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !30
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !30
  %206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %118, !dbg !30
  %207 = ptrtoint ptr addrspace(3) %206 to i64, !dbg !30
  %208 = trunc i64 %207 to i32, !dbg !30
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %208) #1, !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !30
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !30
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !30
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %123, !dbg !30
  %215 = ptrtoint ptr addrspace(3) %214 to i64, !dbg !30
  %216 = trunc i64 %215 to i32, !dbg !30
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %216) #1, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !30
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !30
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !30
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !30
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %127, !dbg !30
  %223 = ptrtoint ptr addrspace(3) %222 to i64, !dbg !30
  %224 = trunc i64 %223 to i32, !dbg !30
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #1, !dbg !30
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !30
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !30
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !30
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %133, !dbg !30
  %231 = ptrtoint ptr addrspace(3) %230 to i64, !dbg !30
  %232 = trunc i64 %231 to i32, !dbg !30
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %232) #1, !dbg !30
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !30
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !30
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !30
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %136, !dbg !30
  %239 = ptrtoint ptr addrspace(3) %238 to i64, !dbg !30
  %240 = trunc i64 %239 to i32, !dbg !30
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %240) #1, !dbg !30
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !30
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !30
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !30
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %189, i64 %140, !dbg !30
  %247 = ptrtoint ptr addrspace(3) %246 to i64, !dbg !30
  %248 = trunc i64 %247 to i32, !dbg !30
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %248) #1, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !30
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !30
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !30
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !30
  %254 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %188, !dbg !33
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %145, !dbg !33
  %256 = ptrtoint ptr addrspace(3) %255 to i64, !dbg !33
  %257 = trunc i64 %256 to i32, !dbg !33
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %257) #1, !dbg !33
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !33
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !33
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !33
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !33
  %263 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %149, !dbg !33
  %264 = ptrtoint ptr addrspace(3) %263 to i64, !dbg !33
  %265 = trunc i64 %264 to i32, !dbg !33
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %265) #1, !dbg !33
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !33
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !33
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !33
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !33
  %271 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %152, !dbg !33
  %272 = ptrtoint ptr addrspace(3) %271 to i64, !dbg !33
  %273 = trunc i64 %272 to i32, !dbg !33
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %273) #1, !dbg !33
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !33
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !33
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !33
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !33
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %155, !dbg !33
  %280 = ptrtoint ptr addrspace(3) %279 to i64, !dbg !33
  %281 = trunc i64 %280 to i32, !dbg !33
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %281) #1, !dbg !33
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !33
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !33
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !33
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !33
  %287 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %158, !dbg !33
  %288 = ptrtoint ptr addrspace(3) %287 to i64, !dbg !33
  %289 = trunc i64 %288 to i32, !dbg !33
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %289) #1, !dbg !33
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !33
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !33
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !33
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !33
  %295 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %160, !dbg !33
  %296 = ptrtoint ptr addrspace(3) %295 to i64, !dbg !33
  %297 = trunc i64 %296 to i32, !dbg !33
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %297) #1, !dbg !33
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !33
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !33
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !33
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !33
  %303 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %162, !dbg !33
  %304 = ptrtoint ptr addrspace(3) %303 to i64, !dbg !33
  %305 = trunc i64 %304 to i32, !dbg !33
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %305) #1, !dbg !33
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !33
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !33
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !33
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !33
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %254, i64 %164, !dbg !33
  %312 = ptrtoint ptr addrspace(3) %311 to i64, !dbg !33
  %313 = trunc i64 %312 to i32, !dbg !33
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %313) #1, !dbg !33
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !33
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !33
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !33
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !33
  %319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %194, i32 %195, i32 %196, i32 %197, i32 %259, i32 %260) #1, !dbg !35
  %320 = extractvalue { float, float, float, float } %319, 0, !dbg !35
  %321 = extractvalue { float, float, float, float } %319, 1, !dbg !35
  %322 = extractvalue { float, float, float, float } %319, 2, !dbg !35
  %323 = extractvalue { float, float, float, float } %319, 3, !dbg !35
  %324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %194, i32 %195, i32 %196, i32 %197, i32 %291, i32 %292) #1, !dbg !35
  %325 = extractvalue { float, float, float, float } %324, 0, !dbg !35
  %326 = extractvalue { float, float, float, float } %324, 1, !dbg !35
  %327 = extractvalue { float, float, float, float } %324, 2, !dbg !35
  %328 = extractvalue { float, float, float, float } %324, 3, !dbg !35
  %329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %320, float %321, float %322, float %323, i32 %202, i32 %203, i32 %204, i32 %205, i32 %261, i32 %262) #1, !dbg !35
  %330 = extractvalue { float, float, float, float } %329, 0, !dbg !35
  %331 = extractvalue { float, float, float, float } %329, 1, !dbg !35
  %332 = extractvalue { float, float, float, float } %329, 2, !dbg !35
  %333 = extractvalue { float, float, float, float } %329, 3, !dbg !35
  %334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %325, float %326, float %327, float %328, i32 %202, i32 %203, i32 %204, i32 %205, i32 %293, i32 %294) #1, !dbg !35
  %335 = extractvalue { float, float, float, float } %334, 0, !dbg !35
  %336 = extractvalue { float, float, float, float } %334, 1, !dbg !35
  %337 = extractvalue { float, float, float, float } %334, 2, !dbg !35
  %338 = extractvalue { float, float, float, float } %334, 3, !dbg !35
  %339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %330, float %331, float %332, float %333, i32 %210, i32 %211, i32 %212, i32 %213, i32 %267, i32 %268) #1, !dbg !35
  %340 = extractvalue { float, float, float, float } %339, 0, !dbg !35
  %341 = extractvalue { float, float, float, float } %339, 1, !dbg !35
  %342 = extractvalue { float, float, float, float } %339, 2, !dbg !35
  %343 = extractvalue { float, float, float, float } %339, 3, !dbg !35
  %344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %335, float %336, float %337, float %338, i32 %210, i32 %211, i32 %212, i32 %213, i32 %299, i32 %300) #1, !dbg !35
  %345 = extractvalue { float, float, float, float } %344, 0, !dbg !35
  %346 = extractvalue { float, float, float, float } %344, 1, !dbg !35
  %347 = extractvalue { float, float, float, float } %344, 2, !dbg !35
  %348 = extractvalue { float, float, float, float } %344, 3, !dbg !35
  %349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %340, float %341, float %342, float %343, i32 %218, i32 %219, i32 %220, i32 %221, i32 %269, i32 %270) #1, !dbg !35
  %350 = extractvalue { float, float, float, float } %349, 0, !dbg !35
  %351 = extractvalue { float, float, float, float } %349, 1, !dbg !35
  %352 = extractvalue { float, float, float, float } %349, 2, !dbg !35
  %353 = extractvalue { float, float, float, float } %349, 3, !dbg !35
  %354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %345, float %346, float %347, float %348, i32 %218, i32 %219, i32 %220, i32 %221, i32 %301, i32 %302) #1, !dbg !35
  %355 = extractvalue { float, float, float, float } %354, 0, !dbg !35
  %356 = extractvalue { float, float, float, float } %354, 1, !dbg !35
  %357 = extractvalue { float, float, float, float } %354, 2, !dbg !35
  %358 = extractvalue { float, float, float, float } %354, 3, !dbg !35
  %359 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %350, float %351, float %352, float %353, i32 %226, i32 %227, i32 %228, i32 %229, i32 %275, i32 %276) #1, !dbg !35
  %360 = extractvalue { float, float, float, float } %359, 0, !dbg !35
  %361 = extractvalue { float, float, float, float } %359, 1, !dbg !35
  %362 = extractvalue { float, float, float, float } %359, 2, !dbg !35
  %363 = extractvalue { float, float, float, float } %359, 3, !dbg !35
  %364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %355, float %356, float %357, float %358, i32 %226, i32 %227, i32 %228, i32 %229, i32 %307, i32 %308) #1, !dbg !35
  %365 = extractvalue { float, float, float, float } %364, 0, !dbg !35
  %366 = extractvalue { float, float, float, float } %364, 1, !dbg !35
  %367 = extractvalue { float, float, float, float } %364, 2, !dbg !35
  %368 = extractvalue { float, float, float, float } %364, 3, !dbg !35
  %369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %360, float %361, float %362, float %363, i32 %234, i32 %235, i32 %236, i32 %237, i32 %277, i32 %278) #1, !dbg !35
  %370 = extractvalue { float, float, float, float } %369, 0, !dbg !35
  %371 = extractvalue { float, float, float, float } %369, 1, !dbg !35
  %372 = extractvalue { float, float, float, float } %369, 2, !dbg !35
  %373 = extractvalue { float, float, float, float } %369, 3, !dbg !35
  %374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %365, float %366, float %367, float %368, i32 %234, i32 %235, i32 %236, i32 %237, i32 %309, i32 %310) #1, !dbg !35
  %375 = extractvalue { float, float, float, float } %374, 0, !dbg !35
  %376 = extractvalue { float, float, float, float } %374, 1, !dbg !35
  %377 = extractvalue { float, float, float, float } %374, 2, !dbg !35
  %378 = extractvalue { float, float, float, float } %374, 3, !dbg !35
  %379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %370, float %371, float %372, float %373, i32 %242, i32 %243, i32 %244, i32 %245, i32 %283, i32 %284) #1, !dbg !35
  %380 = extractvalue { float, float, float, float } %379, 0, !dbg !35
  %381 = extractvalue { float, float, float, float } %379, 1, !dbg !35
  %382 = extractvalue { float, float, float, float } %379, 2, !dbg !35
  %383 = extractvalue { float, float, float, float } %379, 3, !dbg !35
  %384 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %375, float %376, float %377, float %378, i32 %242, i32 %243, i32 %244, i32 %245, i32 %315, i32 %316) #1, !dbg !35
  %385 = extractvalue { float, float, float, float } %384, 0, !dbg !35
  %386 = extractvalue { float, float, float, float } %384, 1, !dbg !35
  %387 = extractvalue { float, float, float, float } %384, 2, !dbg !35
  %388 = extractvalue { float, float, float, float } %384, 3, !dbg !35
  %389 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %380, float %381, float %382, float %383, i32 %250, i32 %251, i32 %252, i32 %253, i32 %285, i32 %286) #1, !dbg !35
  %390 = extractvalue { float, float, float, float } %389, 0, !dbg !35
  %391 = extractvalue { float, float, float, float } %389, 1, !dbg !35
  %392 = extractvalue { float, float, float, float } %389, 2, !dbg !35
  %393 = extractvalue { float, float, float, float } %389, 3, !dbg !35
  %394 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %385, float %386, float %387, float %388, i32 %250, i32 %251, i32 %252, i32 %253, i32 %317, i32 %318) #1, !dbg !35
  %395 = extractvalue { float, float, float, float } %394, 0, !dbg !35
  %396 = extractvalue { float, float, float, float } %394, 1, !dbg !35
  %397 = extractvalue { float, float, float, float } %394, 2, !dbg !35
  %398 = extractvalue { float, float, float, float } %394, 3, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %399 = shl nuw nsw i64 %indvars.iv.next, 7, !dbg !36
  %400 = or disjoint i64 %399, %165, !dbg !37
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %400, !dbg !29
  %gep44 = getelementptr bfloat, ptr addrspace(1) %invariant.gep43, i64 %400, !dbg !29
  %gep46 = getelementptr bfloat, ptr addrspace(1) %invariant.gep45, i64 %400, !dbg !29
  %gep48 = getelementptr bfloat, ptr addrspace(1) %invariant.gep47, i64 %400, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %401 = select i1 %.not14, i32 0, i32 16, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %77, ptr addrspace(1) %gep, i32 %401) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %gep44, i32 %401) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %83, ptr addrspace(1) %gep46, i32 %401) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %gep48, i32 %401) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep50 = getelementptr bfloat, ptr addrspace(1) %invariant.gep49, i64 %400, !dbg !32
  %gep52 = getelementptr bfloat, ptr addrspace(1) %invariant.gep51, i64 %400, !dbg !32
  %gep54 = getelementptr bfloat, ptr addrspace(1) %invariant.gep53, i64 %400, !dbg !32
  %gep56 = getelementptr bfloat, ptr addrspace(1) %invariant.gep55, i64 %400, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %gep50, i32 %401) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %gep52, i32 %401) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %gep54, i32 %401) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %gep56, i32 %401) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !34
  br i1 %exitcond.not, label %402, label %174, !dbg !34

402:                                              ; preds = %174
  %403 = and i32 %26, 64, !dbg !25
  %404 = or disjoint i32 %34, %29, !dbg !22
  %405 = and i32 %23, 15, !dbg !19
  %406 = or disjoint i32 %405, %25, !dbg !19
  %407 = or disjoint i32 %406, %14, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %408 = icmp slt i32 %407, 77, !dbg !38
  %409 = icmp slt i32 %404, 768, !dbg !39
  %410 = and i1 %408, %409, !dbg !40
  %411 = mul i32 %407, 768, !dbg !41
  %412 = add i32 %411, %404, !dbg !42
  %413 = sext i32 %412 to i64, !dbg !43
  %414 = getelementptr bfloat, ptr addrspace(1) %2, i64 %413, !dbg !43
  %415 = fptrunc float %390 to bfloat, !dbg !44
  %416 = fptrunc float %391 to bfloat, !dbg !44
  %417 = fptrunc float %392 to bfloat, !dbg !44
  %418 = fptrunc float %393 to bfloat, !dbg !44
  %419 = fptrunc float %395 to bfloat, !dbg !44
  %420 = fptrunc float %396 to bfloat, !dbg !44
  %421 = fptrunc float %397 to bfloat, !dbg !44
  %422 = fptrunc float %398 to bfloat, !dbg !44
  %423 = shl i32 %15, 1, !dbg !44
  %424 = and i32 %423, 6, !dbg !44
  %425 = shl nuw nsw i32 %16, 3, !dbg !44
  %426 = or disjoint i32 %424, %425, !dbg !44
  %427 = or disjoint i32 %426, %403, !dbg !44
  %428 = or disjoint i32 %427, %47, !dbg !44
  %429 = or disjoint i32 %428, %24, !dbg !44
  %430 = shl nuw nsw i32 %17, 3, !dbg !44
  %431 = or disjoint i32 %429, %430, !dbg !44
  %432 = and i32 %26, 384, !dbg !44
  %433 = or disjoint i32 %430, %432, !dbg !44
  %434 = or disjoint i32 %433, %49, !dbg !44
  %435 = lshr i32 %431, 2, !dbg !44
  %436 = and i32 %435, 1073741816, !dbg !44
  %437 = add nuw nsw i32 %436, %431, !dbg !44
  %438 = zext nneg i32 %437 to i64, !dbg !44
  %439 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %438, !dbg !44
  %440 = bitcast bfloat %415 to i16, !dbg !44
  %441 = bitcast bfloat %416 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %439, i16 %440, i16 %441, i1 true) #1, !dbg !44
  %442 = xor i32 %431, 256, !dbg !44
  %443 = lshr i32 %442, 2, !dbg !44
  %444 = and i32 %443, 1073741816, !dbg !44
  %445 = add nuw nsw i32 %444, %442, !dbg !44
  %446 = zext nneg i32 %445 to i64, !dbg !44
  %447 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %446, !dbg !44
  %448 = bitcast bfloat %417 to i16, !dbg !44
  %449 = bitcast bfloat %418 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %447, i16 %448, i16 %449, i1 true) #1, !dbg !44
  %450 = xor i32 %431, 16, !dbg !44
  %451 = add nuw nsw i32 %436, %450, !dbg !44
  %452 = zext nneg i32 %451 to i64, !dbg !44
  %453 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %452, !dbg !44
  %454 = bitcast bfloat %419 to i16, !dbg !44
  %455 = bitcast bfloat %420 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %453, i16 %454, i16 %455, i1 true) #1, !dbg !44
  %456 = xor i32 %431, 272, !dbg !44
  %457 = lshr i32 %456, 2, !dbg !44
  %458 = and i32 %457, 1073741816, !dbg !44
  %459 = add nuw nsw i32 %458, %456, !dbg !44
  %460 = zext nneg i32 %459 to i64, !dbg !44
  %461 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %460, !dbg !44
  %462 = bitcast bfloat %421 to i16, !dbg !44
  %463 = bitcast bfloat %422 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %461, i16 %462, i16 %463, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %464 = lshr exact i32 %434, 2, !dbg !44
  %465 = and i32 %464, 248, !dbg !44
  %466 = add nuw nsw i32 %465, %434, !dbg !44
  %467 = zext nneg i32 %466 to i64, !dbg !44
  %468 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %467, !dbg !44
  %.extract = load i32, ptr addrspace(3) %468, align 16, !dbg !44
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %468, i64 4, !dbg !44
  %.extract17 = load i32, ptr addrspace(3) %469, align 4, !dbg !44
  %470 = getelementptr inbounds nuw i8, ptr addrspace(3) %468, i64 8, !dbg !44
  %.extract19 = load i32, ptr addrspace(3) %470, align 8, !dbg !44
  %471 = getelementptr inbounds nuw i8, ptr addrspace(3) %468, i64 12, !dbg !44
  %.extract21 = load i32, ptr addrspace(3) %471, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract19, i32 %.extract21, ptr addrspace(1) %414, i1 %410) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdijkrrugtlasbtkeav75ftjn2vxixbjurt56656xl5yviy5a2w.py", directory: "/tmp/torchinductor_root/zd")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 29, scope: !6)
!27 = !DILocation(line: 77, column: 54, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 66, column: 42, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 25, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
