; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 64, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 64, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = or disjoint i32 %20, 32, !dbg !19
  %22 = or disjoint i32 %14, %20, !dbg !20
  %23 = or disjoint i32 %14, %21, !dbg !20
  %24 = or disjoint i32 %22, 64, !dbg !20
  %25 = or disjoint i32 %22, 96, !dbg !20
  %26 = shl nsw i32 %13, 6, !dbg !21
  %27 = shl i32 %15, 3, !dbg !22
  %28 = and i32 %27, 24, !dbg !22
  %29 = or disjoint i32 %26, %20, !dbg !23
  %30 = or disjoint i32 %26, %21, !dbg !23
  %31 = srem i32 %22, 512, !dbg !24
  %32 = srem i32 %23, 512, !dbg !24
  %33 = srem i32 %24, 512, !dbg !24
  %34 = srem i32 %25, 512, !dbg !24
  %35 = srem i32 %29, 512, !dbg !25
  %.lhs.trunc = trunc i32 %30 to i16, !dbg !25
  %36 = srem i16 %.lhs.trunc, 512, !dbg !25
  %.sext = sext i16 %36 to i32, !dbg !25
  %37 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %38 = shl nsw i32 %31, 12, !dbg !27
  %39 = shl nsw i32 %32, 12, !dbg !27
  %40 = shl nsw i32 %33, 12, !dbg !27
  %41 = shl nsw i32 %34, 12, !dbg !27
  %42 = shl i32 %37, 6, !dbg !28
  %43 = or disjoint i32 %28, %42, !dbg !29
  %44 = add i32 %43, %38, !dbg !30
  %45 = add i32 %43, %39, !dbg !30
  %46 = add i32 %43, %40, !dbg !30
  %47 = add i32 %43, %41, !dbg !30
  %48 = sext i32 %44 to i64, !dbg !31
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !31
  %50 = sext i32 %45 to i64, !dbg !31
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = sext i32 %46 to i64, !dbg !31
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !31
  %54 = sext i32 %47 to i64, !dbg !31
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = shl nsw i32 %35, 12, !dbg !32
  %57 = shl nsw i32 %.sext, 12, !dbg !32
  %58 = add i32 %43, %56, !dbg !33
  %59 = add i32 %43, %57, !dbg !33
  %60 = sext i32 %58 to i64, !dbg !34
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !34
  %62 = sext i32 %59 to i64, !dbg !34
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !34
  %64 = xor i32 %27, %15, !dbg !35
  %65 = and i32 %64, 24, !dbg !35
  %66 = shl nuw nsw i32 %20, 5, !dbg !35
  %67 = or disjoint i32 %66, %65, !dbg !35
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %67, !dbg !35
  %69 = or disjoint i32 %67, 1024, !dbg !35
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %69, !dbg !35
  %71 = or disjoint i32 %67, 2048, !dbg !35
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %71, !dbg !35
  %73 = or disjoint i32 %67, 3072, !dbg !35
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %73, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %49, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %70, ptr addrspace(1) %51, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %72, ptr addrspace(1) %53, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %74, ptr addrspace(1) %55, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %67, !dbg !36
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %69, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %75, ptr addrspace(1) %61, i32 16) #1, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %76, ptr addrspace(1) %63, i32 16) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %77 = getelementptr i8, ptr addrspace(1) %49, i64 64, !dbg !37
  %78 = getelementptr i8, ptr addrspace(1) %51, i64 64, !dbg !37
  %79 = getelementptr i8, ptr addrspace(1) %53, i64 64, !dbg !37
  %80 = getelementptr i8, ptr addrspace(1) %55, i64 64, !dbg !37
  %81 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !38
  %82 = getelementptr i8, ptr addrspace(1) %63, i64 64, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %67, !dbg !35
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %69, !dbg !35
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %71, !dbg !35
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %73, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %83, ptr addrspace(1) %77, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %84, ptr addrspace(1) %78, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %85, ptr addrspace(1) %79, i32 16) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %86, ptr addrspace(1) %80, i32 16) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %67, !dbg !36
  %88 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %69, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %87, ptr addrspace(1) %81, i32 16) #1, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %88, ptr addrspace(1) %82, i32 16) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %invariant.op = or disjoint i32 %16, %19, !dbg !39
  %invariant.op260 = or disjoint i32 %invariant.op, 32, !dbg !39
  %89 = shl i32 %15, 2
  %90 = and i32 %89, 8
  %91 = and i32 %89, 16
  %92 = and i32 %89, 24
  %93 = and i32 %15, 7
  %94 = and i32 %15, 15
  %95 = lshr i32 %15, 1
  %96 = and i32 %95, 8
  %97 = xor i32 %92, %96
  %98 = or disjoint i32 %19, %94
  %99 = shl nuw nsw i32 %98, 5
  %100 = or disjoint i32 %97, %99
  %101 = or disjoint i32 %90, 16
  %102 = or disjoint i32 %96, %91
  %103 = xor i32 %102, %101
  %104 = or disjoint i32 %103, %99
  %.reass261 = or disjoint i32 %93, %invariant.op260
  %105 = shl nuw nsw i32 %.reass261, 5
  %106 = or disjoint i32 %105, %97
  %107 = or disjoint i32 %103, %105
  %108 = or disjoint i32 %99, 2048
  %109 = or disjoint i32 %108, %97
  %110 = or disjoint i32 %103, %108
  %111 = or disjoint i32 %99, 3072
  %112 = or disjoint i32 %111, %97
  %113 = or disjoint i32 %103, %111
  %114 = xor i32 %89, %15
  %115 = and i32 %114, 24
  %116 = or disjoint i32 %18, %93
  %117 = shl nuw nsw i32 %116, 5
  %118 = or disjoint i32 %115, %117
  %119 = or disjoint i32 %118, 512
  %120 = or disjoint i32 %117, 1024
  %121 = or disjoint i32 %115, %120
  %122 = or disjoint i32 %118, 1536
  br label %123, !dbg !39

123:                                              ; preds = %4, %123
  %124 = phi i32 [ -1, %4 ], [ %193, %123 ]
  %125 = phi i32 [ 1, %4 ], [ %448, %123 ]
  %.pn82267 = phi ptr addrspace(1) [ %82, %4 ], [ %445, %123 ]
  %.pn98266 = phi ptr addrspace(1) [ %81, %4 ], [ %444, %123 ]
  %.pn18265 = phi ptr addrspace(1) [ %80, %4 ], [ %443, %123 ]
  %.pn34264 = phi ptr addrspace(1) [ %79, %4 ], [ %442, %123 ]
  %.pn50263 = phi ptr addrspace(1) [ %78, %4 ], [ %441, %123 ]
  %.pn66262 = phi ptr addrspace(1) [ %77, %4 ], [ %440, %123 ]
  %126 = phi float [ 0.000000e+00, %4 ], [ %361, %123 ]
  %127 = phi float [ 0.000000e+00, %4 ], [ %362, %123 ]
  %128 = phi float [ 0.000000e+00, %4 ], [ %363, %123 ]
  %129 = phi float [ 0.000000e+00, %4 ], [ %364, %123 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %366, %123 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %367, %123 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %368, %123 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %369, %123 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %371, %123 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %372, %123 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %373, %123 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %374, %123 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %376, %123 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %377, %123 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %378, %123 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %379, %123 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %381, %123 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %382, %123 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %383, %123 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %384, %123 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %386, %123 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %387, %123 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %388, %123 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %389, %123 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %391, %123 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %392, %123 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %393, %123 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %394, %123 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %396, %123 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %397, %123 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %398, %123 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %399, %123 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %401, %123 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %402, %123 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %403, %123 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %404, %123 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %406, %123 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %407, %123 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %408, %123 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %409, %123 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %411, %123 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %412, %123 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %413, %123 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %414, %123 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %416, %123 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %417, %123 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %418, %123 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %419, %123 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %421, %123 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %422, %123 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %423, %123 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %424, %123 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %426, %123 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %427, %123 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %428, %123 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %429, %123 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %431, %123 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %432, %123 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %433, %123 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %434, %123 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %436, %123 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %437, %123 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %438, %123 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %439, %123 ]
  %190 = phi i1 [ true, %4 ], [ false, %123 ]
  %191 = add i32 %124, 1, !dbg !39
  %192 = icmp slt i32 %191, 2, !dbg !39
  %193 = select i1 %192, i32 %191, i32 0, !dbg !39
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx = shl i32 %193, 13, !dbg !35
  %194 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %195 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %100, !dbg !35
  %196 = ptrtoint ptr addrspace(3) %195 to i32, !dbg !35
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %196) #1, !dbg !35
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !35
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !35
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %104, !dbg !35
  %203 = ptrtoint ptr addrspace(3) %202 to i32, !dbg !35
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %203) #1, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !35
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !35
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !35
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !35
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %106, !dbg !35
  %210 = ptrtoint ptr addrspace(3) %209 to i32, !dbg !35
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %210) #1, !dbg !35
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !35
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !35
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !35
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !35
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %107, !dbg !35
  %217 = ptrtoint ptr addrspace(3) %216 to i32, !dbg !35
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %217) #1, !dbg !35
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !35
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !35
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !35
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %109, !dbg !35
  %224 = ptrtoint ptr addrspace(3) %223 to i32, !dbg !35
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %224) #1, !dbg !35
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !35
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !35
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !35
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !35
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %110, !dbg !35
  %231 = ptrtoint ptr addrspace(3) %230 to i32, !dbg !35
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %231) #1, !dbg !35
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !35
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !35
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !35
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !35
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %112, !dbg !35
  %238 = ptrtoint ptr addrspace(3) %237 to i32, !dbg !35
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %238) #1, !dbg !35
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !35
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !35
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !35
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !35
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %194, i32 %113, !dbg !35
  %245 = ptrtoint ptr addrspace(3) %244 to i32, !dbg !35
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %245) #1, !dbg !35
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !35
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !35
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !35
  %.idx193 = shl i32 %193, 12, !dbg !36
  %251 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx193, !dbg !36
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %251, i32 %118, !dbg !36
  %253 = ptrtoint ptr addrspace(3) %252 to i32, !dbg !36
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %253) #1, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !36
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !36
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !36
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !36
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %251, i32 %119, !dbg !36
  %260 = ptrtoint ptr addrspace(3) %259 to i32, !dbg !36
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %260) #1, !dbg !36
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !36
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !36
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !36
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !36
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %251, i32 %121, !dbg !36
  %267 = ptrtoint ptr addrspace(3) %266 to i32, !dbg !36
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %267) #1, !dbg !36
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !36
  %270 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !36
  %271 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !36
  %272 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !36
  %273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %251, i32 %122, !dbg !36
  %274 = ptrtoint ptr addrspace(3) %273 to i32, !dbg !36
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %274) #1, !dbg !36
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !36
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !36
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !36
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !36
  %280 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %126, float %127, float %128, float %129, i32 %198, i32 %199, i32 %200, i32 %201, i32 %255, i32 %256) #1, !dbg !40
  %281 = extractvalue { float, float, float, float } %280, 0, !dbg !40
  %282 = extractvalue { float, float, float, float } %280, 1, !dbg !40
  %283 = extractvalue { float, float, float, float } %280, 2, !dbg !40
  %284 = extractvalue { float, float, float, float } %280, 3, !dbg !40
  %285 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %130, float %131, float %132, float %133, i32 %198, i32 %199, i32 %200, i32 %201, i32 %262, i32 %263) #1, !dbg !40
  %286 = extractvalue { float, float, float, float } %285, 0, !dbg !40
  %287 = extractvalue { float, float, float, float } %285, 1, !dbg !40
  %288 = extractvalue { float, float, float, float } %285, 2, !dbg !40
  %289 = extractvalue { float, float, float, float } %285, 3, !dbg !40
  %290 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %134, float %135, float %136, float %137, i32 %198, i32 %199, i32 %200, i32 %201, i32 %269, i32 %270) #1, !dbg !40
  %291 = extractvalue { float, float, float, float } %290, 0, !dbg !40
  %292 = extractvalue { float, float, float, float } %290, 1, !dbg !40
  %293 = extractvalue { float, float, float, float } %290, 2, !dbg !40
  %294 = extractvalue { float, float, float, float } %290, 3, !dbg !40
  %295 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %138, float %139, float %140, float %141, i32 %198, i32 %199, i32 %200, i32 %201, i32 %276, i32 %277) #1, !dbg !40
  %296 = extractvalue { float, float, float, float } %295, 0, !dbg !40
  %297 = extractvalue { float, float, float, float } %295, 1, !dbg !40
  %298 = extractvalue { float, float, float, float } %295, 2, !dbg !40
  %299 = extractvalue { float, float, float, float } %295, 3, !dbg !40
  %300 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %212, i32 %213, i32 %214, i32 %215, i32 %255, i32 %256) #1, !dbg !40
  %301 = extractvalue { float, float, float, float } %300, 0, !dbg !40
  %302 = extractvalue { float, float, float, float } %300, 1, !dbg !40
  %303 = extractvalue { float, float, float, float } %300, 2, !dbg !40
  %304 = extractvalue { float, float, float, float } %300, 3, !dbg !40
  %305 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %146, float %147, float %148, float %149, i32 %212, i32 %213, i32 %214, i32 %215, i32 %262, i32 %263) #1, !dbg !40
  %306 = extractvalue { float, float, float, float } %305, 0, !dbg !40
  %307 = extractvalue { float, float, float, float } %305, 1, !dbg !40
  %308 = extractvalue { float, float, float, float } %305, 2, !dbg !40
  %309 = extractvalue { float, float, float, float } %305, 3, !dbg !40
  %310 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %212, i32 %213, i32 %214, i32 %215, i32 %269, i32 %270) #1, !dbg !40
  %311 = extractvalue { float, float, float, float } %310, 0, !dbg !40
  %312 = extractvalue { float, float, float, float } %310, 1, !dbg !40
  %313 = extractvalue { float, float, float, float } %310, 2, !dbg !40
  %314 = extractvalue { float, float, float, float } %310, 3, !dbg !40
  %315 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %154, float %155, float %156, float %157, i32 %212, i32 %213, i32 %214, i32 %215, i32 %276, i32 %277) #1, !dbg !40
  %316 = extractvalue { float, float, float, float } %315, 0, !dbg !40
  %317 = extractvalue { float, float, float, float } %315, 1, !dbg !40
  %318 = extractvalue { float, float, float, float } %315, 2, !dbg !40
  %319 = extractvalue { float, float, float, float } %315, 3, !dbg !40
  %320 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %158, float %159, float %160, float %161, i32 %226, i32 %227, i32 %228, i32 %229, i32 %255, i32 %256) #1, !dbg !40
  %321 = extractvalue { float, float, float, float } %320, 0, !dbg !40
  %322 = extractvalue { float, float, float, float } %320, 1, !dbg !40
  %323 = extractvalue { float, float, float, float } %320, 2, !dbg !40
  %324 = extractvalue { float, float, float, float } %320, 3, !dbg !40
  %325 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %162, float %163, float %164, float %165, i32 %226, i32 %227, i32 %228, i32 %229, i32 %262, i32 %263) #1, !dbg !40
  %326 = extractvalue { float, float, float, float } %325, 0, !dbg !40
  %327 = extractvalue { float, float, float, float } %325, 1, !dbg !40
  %328 = extractvalue { float, float, float, float } %325, 2, !dbg !40
  %329 = extractvalue { float, float, float, float } %325, 3, !dbg !40
  %330 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %166, float %167, float %168, float %169, i32 %226, i32 %227, i32 %228, i32 %229, i32 %269, i32 %270) #1, !dbg !40
  %331 = extractvalue { float, float, float, float } %330, 0, !dbg !40
  %332 = extractvalue { float, float, float, float } %330, 1, !dbg !40
  %333 = extractvalue { float, float, float, float } %330, 2, !dbg !40
  %334 = extractvalue { float, float, float, float } %330, 3, !dbg !40
  %335 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %170, float %171, float %172, float %173, i32 %226, i32 %227, i32 %228, i32 %229, i32 %276, i32 %277) #1, !dbg !40
  %336 = extractvalue { float, float, float, float } %335, 0, !dbg !40
  %337 = extractvalue { float, float, float, float } %335, 1, !dbg !40
  %338 = extractvalue { float, float, float, float } %335, 2, !dbg !40
  %339 = extractvalue { float, float, float, float } %335, 3, !dbg !40
  %340 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %240, i32 %241, i32 %242, i32 %243, i32 %255, i32 %256) #1, !dbg !40
  %341 = extractvalue { float, float, float, float } %340, 0, !dbg !40
  %342 = extractvalue { float, float, float, float } %340, 1, !dbg !40
  %343 = extractvalue { float, float, float, float } %340, 2, !dbg !40
  %344 = extractvalue { float, float, float, float } %340, 3, !dbg !40
  %345 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %240, i32 %241, i32 %242, i32 %243, i32 %262, i32 %263) #1, !dbg !40
  %346 = extractvalue { float, float, float, float } %345, 0, !dbg !40
  %347 = extractvalue { float, float, float, float } %345, 1, !dbg !40
  %348 = extractvalue { float, float, float, float } %345, 2, !dbg !40
  %349 = extractvalue { float, float, float, float } %345, 3, !dbg !40
  %350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %240, i32 %241, i32 %242, i32 %243, i32 %269, i32 %270) #1, !dbg !40
  %351 = extractvalue { float, float, float, float } %350, 0, !dbg !40
  %352 = extractvalue { float, float, float, float } %350, 1, !dbg !40
  %353 = extractvalue { float, float, float, float } %350, 2, !dbg !40
  %354 = extractvalue { float, float, float, float } %350, 3, !dbg !40
  %355 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %186, float %187, float %188, float %189, i32 %240, i32 %241, i32 %242, i32 %243, i32 %276, i32 %277) #1, !dbg !40
  %356 = extractvalue { float, float, float, float } %355, 0, !dbg !40
  %357 = extractvalue { float, float, float, float } %355, 1, !dbg !40
  %358 = extractvalue { float, float, float, float } %355, 2, !dbg !40
  %359 = extractvalue { float, float, float, float } %355, 3, !dbg !40
  %360 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %281, float %282, float %283, float %284, i32 %205, i32 %206, i32 %207, i32 %208, i32 %257, i32 %258) #1, !dbg !40
  %361 = extractvalue { float, float, float, float } %360, 0, !dbg !40
  %362 = extractvalue { float, float, float, float } %360, 1, !dbg !40
  %363 = extractvalue { float, float, float, float } %360, 2, !dbg !40
  %364 = extractvalue { float, float, float, float } %360, 3, !dbg !40
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %286, float %287, float %288, float %289, i32 %205, i32 %206, i32 %207, i32 %208, i32 %264, i32 %265) #1, !dbg !40
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !40
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !40
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !40
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !40
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %291, float %292, float %293, float %294, i32 %205, i32 %206, i32 %207, i32 %208, i32 %271, i32 %272) #1, !dbg !40
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !40
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !40
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !40
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !40
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %296, float %297, float %298, float %299, i32 %205, i32 %206, i32 %207, i32 %208, i32 %278, i32 %279) #1, !dbg !40
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !40
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !40
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !40
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !40
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %301, float %302, float %303, float %304, i32 %219, i32 %220, i32 %221, i32 %222, i32 %257, i32 %258) #1, !dbg !40
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !40
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !40
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !40
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !40
  %385 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %219, i32 %220, i32 %221, i32 %222, i32 %264, i32 %265) #1, !dbg !40
  %386 = extractvalue { float, float, float, float } %385, 0, !dbg !40
  %387 = extractvalue { float, float, float, float } %385, 1, !dbg !40
  %388 = extractvalue { float, float, float, float } %385, 2, !dbg !40
  %389 = extractvalue { float, float, float, float } %385, 3, !dbg !40
  %390 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %311, float %312, float %313, float %314, i32 %219, i32 %220, i32 %221, i32 %222, i32 %271, i32 %272) #1, !dbg !40
  %391 = extractvalue { float, float, float, float } %390, 0, !dbg !40
  %392 = extractvalue { float, float, float, float } %390, 1, !dbg !40
  %393 = extractvalue { float, float, float, float } %390, 2, !dbg !40
  %394 = extractvalue { float, float, float, float } %390, 3, !dbg !40
  %395 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %316, float %317, float %318, float %319, i32 %219, i32 %220, i32 %221, i32 %222, i32 %278, i32 %279) #1, !dbg !40
  %396 = extractvalue { float, float, float, float } %395, 0, !dbg !40
  %397 = extractvalue { float, float, float, float } %395, 1, !dbg !40
  %398 = extractvalue { float, float, float, float } %395, 2, !dbg !40
  %399 = extractvalue { float, float, float, float } %395, 3, !dbg !40
  %400 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %321, float %322, float %323, float %324, i32 %233, i32 %234, i32 %235, i32 %236, i32 %257, i32 %258) #1, !dbg !40
  %401 = extractvalue { float, float, float, float } %400, 0, !dbg !40
  %402 = extractvalue { float, float, float, float } %400, 1, !dbg !40
  %403 = extractvalue { float, float, float, float } %400, 2, !dbg !40
  %404 = extractvalue { float, float, float, float } %400, 3, !dbg !40
  %405 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %233, i32 %234, i32 %235, i32 %236, i32 %264, i32 %265) #1, !dbg !40
  %406 = extractvalue { float, float, float, float } %405, 0, !dbg !40
  %407 = extractvalue { float, float, float, float } %405, 1, !dbg !40
  %408 = extractvalue { float, float, float, float } %405, 2, !dbg !40
  %409 = extractvalue { float, float, float, float } %405, 3, !dbg !40
  %410 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %331, float %332, float %333, float %334, i32 %233, i32 %234, i32 %235, i32 %236, i32 %271, i32 %272) #1, !dbg !40
  %411 = extractvalue { float, float, float, float } %410, 0, !dbg !40
  %412 = extractvalue { float, float, float, float } %410, 1, !dbg !40
  %413 = extractvalue { float, float, float, float } %410, 2, !dbg !40
  %414 = extractvalue { float, float, float, float } %410, 3, !dbg !40
  %415 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %336, float %337, float %338, float %339, i32 %233, i32 %234, i32 %235, i32 %236, i32 %278, i32 %279) #1, !dbg !40
  %416 = extractvalue { float, float, float, float } %415, 0, !dbg !40
  %417 = extractvalue { float, float, float, float } %415, 1, !dbg !40
  %418 = extractvalue { float, float, float, float } %415, 2, !dbg !40
  %419 = extractvalue { float, float, float, float } %415, 3, !dbg !40
  %420 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %341, float %342, float %343, float %344, i32 %247, i32 %248, i32 %249, i32 %250, i32 %257, i32 %258) #1, !dbg !40
  %421 = extractvalue { float, float, float, float } %420, 0, !dbg !40
  %422 = extractvalue { float, float, float, float } %420, 1, !dbg !40
  %423 = extractvalue { float, float, float, float } %420, 2, !dbg !40
  %424 = extractvalue { float, float, float, float } %420, 3, !dbg !40
  %425 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %346, float %347, float %348, float %349, i32 %247, i32 %248, i32 %249, i32 %250, i32 %264, i32 %265) #1, !dbg !40
  %426 = extractvalue { float, float, float, float } %425, 0, !dbg !40
  %427 = extractvalue { float, float, float, float } %425, 1, !dbg !40
  %428 = extractvalue { float, float, float, float } %425, 2, !dbg !40
  %429 = extractvalue { float, float, float, float } %425, 3, !dbg !40
  %430 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %351, float %352, float %353, float %354, i32 %247, i32 %248, i32 %249, i32 %250, i32 %271, i32 %272) #1, !dbg !40
  %431 = extractvalue { float, float, float, float } %430, 0, !dbg !40
  %432 = extractvalue { float, float, float, float } %430, 1, !dbg !40
  %433 = extractvalue { float, float, float, float } %430, 2, !dbg !40
  %434 = extractvalue { float, float, float, float } %430, 3, !dbg !40
  %435 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %356, float %357, float %358, float %359, i32 %247, i32 %248, i32 %249, i32 %250, i32 %278, i32 %279) #1, !dbg !40
  %436 = extractvalue { float, float, float, float } %435, 0, !dbg !40
  %437 = extractvalue { float, float, float, float } %435, 1, !dbg !40
  %438 = extractvalue { float, float, float, float } %435, 2, !dbg !40
  %439 = extractvalue { float, float, float, float } %435, 3, !dbg !40
  %440 = getelementptr i8, ptr addrspace(1) %.pn66262, i64 64, !dbg !37
  %441 = getelementptr i8, ptr addrspace(1) %.pn50263, i64 64, !dbg !37
  %442 = getelementptr i8, ptr addrspace(1) %.pn34264, i64 64, !dbg !37
  %443 = getelementptr i8, ptr addrspace(1) %.pn18265, i64 64, !dbg !37
  %444 = getelementptr i8, ptr addrspace(1) %.pn98266, i64 64, !dbg !38
  %445 = getelementptr i8, ptr addrspace(1) %.pn82267, i64 64, !dbg !38
  %446 = add i32 %125, 1, !dbg !39
  %447 = icmp slt i32 %446, 2, !dbg !39
  %448 = select i1 %447, i32 %446, i32 0, !dbg !39
  %.idx194 = shl i32 %448, 13, !dbg !35
  %449 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx194, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %450 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %449, i32 %67, !dbg !35
  %451 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %449, i32 %69, !dbg !35
  %452 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %449, i32 %71, !dbg !35
  %453 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %449, i32 %73, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %450, ptr addrspace(1) %440, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %451, ptr addrspace(1) %441, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %452, ptr addrspace(1) %442, i32 0) #1, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %453, ptr addrspace(1) %443, i32 0) #1, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %.idx195 = shl i32 %448, 12, !dbg !36
  %454 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx195, !dbg !36
  %455 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %454, i32 %67, !dbg !36
  %456 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %454, i32 %69, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %455, ptr addrspace(1) %444, i32 0) #1, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %456, ptr addrspace(1) %445, i32 0) #1, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  br i1 %190, label %123, label %457, !dbg !39

457:                                              ; preds = %123
  %458 = and i32 %27, 56, !dbg !22
  %459 = or disjoint i32 %26, %458, !dbg !23
  %460 = lshr i32 %15, 3, !dbg !19
  %461 = and i32 %460, 15, !dbg !19
  %462 = or disjoint i32 %461, %14, !dbg !20
  %463 = or disjoint i32 %462, 112, !dbg !20
  %464 = or disjoint i32 %462, 96, !dbg !20
  %465 = or disjoint i32 %462, 80, !dbg !20
  %466 = or disjoint i32 %462, 64, !dbg !20
  %467 = or disjoint i32 %462, 48, !dbg !20
  %468 = or disjoint i32 %462, 32, !dbg !20
  %469 = or disjoint i32 %462, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %470 = icmp slt i32 %462, 512, !dbg !41
  %471 = icmp slt i32 %469, 512, !dbg !41
  %472 = icmp slt i32 %468, 512, !dbg !41
  %473 = icmp slt i32 %467, 512, !dbg !41
  %474 = icmp slt i32 %466, 512, !dbg !41
  %475 = icmp slt i32 %465, 512, !dbg !41
  %476 = icmp slt i32 %464, 512, !dbg !41
  %477 = icmp slt i32 %463, 512, !dbg !41
  %478 = icmp slt i32 %459, 512, !dbg !42
  %479 = and i1 %470, %478, !dbg !43
  %480 = and i1 %471, %478, !dbg !43
  %481 = and i1 %472, %478, !dbg !43
  %482 = and i1 %473, %478, !dbg !43
  %483 = and i1 %474, %478, !dbg !43
  %484 = and i1 %475, %478, !dbg !43
  %485 = and i1 %476, %478, !dbg !43
  %486 = and i1 %477, %478, !dbg !43
  %487 = shl i32 %462, 9, !dbg !44
  %488 = shl i32 %469, 9, !dbg !44
  %489 = shl i32 %468, 9, !dbg !44
  %490 = shl i32 %467, 9, !dbg !44
  %491 = shl i32 %466, 9, !dbg !44
  %492 = shl i32 %465, 9, !dbg !44
  %493 = shl i32 %464, 9, !dbg !44
  %494 = shl i32 %463, 9, !dbg !44
  %495 = shl i32 %37, 18, !dbg !45
  %496 = add i32 %459, %495, !dbg !46
  %497 = add i32 %496, %487, !dbg !47
  %498 = add i32 %496, %488, !dbg !47
  %499 = add i32 %496, %489, !dbg !47
  %500 = add i32 %496, %490, !dbg !47
  %501 = add i32 %496, %491, !dbg !47
  %502 = add i32 %496, %492, !dbg !47
  %503 = add i32 %496, %493, !dbg !47
  %504 = add i32 %496, %494, !dbg !47
  %505 = sext i32 %497 to i64, !dbg !48
  %506 = getelementptr bfloat, ptr addrspace(1) %2, i64 %505, !dbg !48
  %507 = sext i32 %498 to i64, !dbg !48
  %508 = getelementptr bfloat, ptr addrspace(1) %2, i64 %507, !dbg !48
  %509 = sext i32 %499 to i64, !dbg !48
  %510 = getelementptr bfloat, ptr addrspace(1) %2, i64 %509, !dbg !48
  %511 = sext i32 %500 to i64, !dbg !48
  %512 = getelementptr bfloat, ptr addrspace(1) %2, i64 %511, !dbg !48
  %513 = sext i32 %501 to i64, !dbg !48
  %514 = getelementptr bfloat, ptr addrspace(1) %2, i64 %513, !dbg !48
  %515 = sext i32 %502 to i64, !dbg !48
  %516 = getelementptr bfloat, ptr addrspace(1) %2, i64 %515, !dbg !48
  %517 = sext i32 %503 to i64, !dbg !48
  %518 = getelementptr bfloat, ptr addrspace(1) %2, i64 %517, !dbg !48
  %519 = sext i32 %504 to i64, !dbg !48
  %520 = getelementptr bfloat, ptr addrspace(1) %2, i64 %519, !dbg !48
  %521 = fptrunc float %361 to bfloat, !dbg !49
  %522 = fptrunc float %362 to bfloat, !dbg !49
  %523 = fptrunc float %363 to bfloat, !dbg !49
  %524 = fptrunc float %364 to bfloat, !dbg !49
  %525 = fptrunc float %366 to bfloat, !dbg !49
  %526 = fptrunc float %367 to bfloat, !dbg !49
  %527 = fptrunc float %368 to bfloat, !dbg !49
  %528 = fptrunc float %369 to bfloat, !dbg !49
  %529 = fptrunc float %371 to bfloat, !dbg !49
  %530 = fptrunc float %372 to bfloat, !dbg !49
  %531 = fptrunc float %373 to bfloat, !dbg !49
  %532 = fptrunc float %374 to bfloat, !dbg !49
  %533 = fptrunc float %376 to bfloat, !dbg !49
  %534 = fptrunc float %377 to bfloat, !dbg !49
  %535 = fptrunc float %378 to bfloat, !dbg !49
  %536 = fptrunc float %379 to bfloat, !dbg !49
  %537 = fptrunc float %381 to bfloat, !dbg !49
  %538 = fptrunc float %382 to bfloat, !dbg !49
  %539 = fptrunc float %383 to bfloat, !dbg !49
  %540 = fptrunc float %384 to bfloat, !dbg !49
  %541 = fptrunc float %386 to bfloat, !dbg !49
  %542 = fptrunc float %387 to bfloat, !dbg !49
  %543 = fptrunc float %388 to bfloat, !dbg !49
  %544 = fptrunc float %389 to bfloat, !dbg !49
  %545 = fptrunc float %391 to bfloat, !dbg !49
  %546 = fptrunc float %392 to bfloat, !dbg !49
  %547 = fptrunc float %393 to bfloat, !dbg !49
  %548 = fptrunc float %394 to bfloat, !dbg !49
  %549 = fptrunc float %396 to bfloat, !dbg !49
  %550 = fptrunc float %397 to bfloat, !dbg !49
  %551 = fptrunc float %398 to bfloat, !dbg !49
  %552 = fptrunc float %399 to bfloat, !dbg !49
  %553 = fptrunc float %401 to bfloat, !dbg !49
  %554 = fptrunc float %402 to bfloat, !dbg !49
  %555 = fptrunc float %403 to bfloat, !dbg !49
  %556 = fptrunc float %404 to bfloat, !dbg !49
  %557 = fptrunc float %406 to bfloat, !dbg !49
  %558 = fptrunc float %407 to bfloat, !dbg !49
  %559 = fptrunc float %408 to bfloat, !dbg !49
  %560 = fptrunc float %409 to bfloat, !dbg !49
  %561 = fptrunc float %411 to bfloat, !dbg !49
  %562 = fptrunc float %412 to bfloat, !dbg !49
  %563 = fptrunc float %413 to bfloat, !dbg !49
  %564 = fptrunc float %414 to bfloat, !dbg !49
  %565 = fptrunc float %416 to bfloat, !dbg !49
  %566 = fptrunc float %417 to bfloat, !dbg !49
  %567 = fptrunc float %418 to bfloat, !dbg !49
  %568 = fptrunc float %419 to bfloat, !dbg !49
  %569 = fptrunc float %421 to bfloat, !dbg !49
  %570 = fptrunc float %422 to bfloat, !dbg !49
  %571 = fptrunc float %423 to bfloat, !dbg !49
  %572 = fptrunc float %424 to bfloat, !dbg !49
  %573 = fptrunc float %426 to bfloat, !dbg !49
  %574 = fptrunc float %427 to bfloat, !dbg !49
  %575 = fptrunc float %428 to bfloat, !dbg !49
  %576 = fptrunc float %429 to bfloat, !dbg !49
  %577 = fptrunc float %431 to bfloat, !dbg !49
  %578 = fptrunc float %432 to bfloat, !dbg !49
  %579 = fptrunc float %433 to bfloat, !dbg !49
  %580 = fptrunc float %434 to bfloat, !dbg !49
  %581 = fptrunc float %436 to bfloat, !dbg !49
  %582 = fptrunc float %437 to bfloat, !dbg !49
  %583 = fptrunc float %438 to bfloat, !dbg !49
  %584 = fptrunc float %439 to bfloat, !dbg !49
  %585 = shl i32 %15, 1, !dbg !49
  %586 = and i32 %585, 6, !dbg !49
  %587 = shl i32 %15, 4, !dbg !49
  %588 = and i32 %587, 1472, !dbg !49
  %589 = or disjoint i32 %588, %586, !dbg !49
  %590 = or disjoint i32 %589, %18, !dbg !49
  %591 = and i32 %27, 1016, !dbg !49
  %592 = lshr exact i32 %588, 2, !dbg !49
  %593 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %592, !dbg !49
  %594 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %590, !dbg !49
  %595 = bitcast bfloat %521 to i16, !dbg !49
  %596 = bitcast bfloat %522 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %594, i16 %595, i16 %596, i1 true) #1, !dbg !49
  %597 = or disjoint i32 %590, 512, !dbg !49
  %598 = lshr i32 %597, 3, !dbg !49
  %599 = and i32 %598, 248, !dbg !49
  %600 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %599, !dbg !49
  %601 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %600, i32 %597, !dbg !49
  %602 = bitcast bfloat %523 to i16, !dbg !49
  %603 = bitcast bfloat %524 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %601, i16 %602, i16 %603, i1 true) #1, !dbg !49
  %604 = or disjoint i32 %590, 16, !dbg !49
  %605 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %604, !dbg !49
  %606 = bitcast bfloat %525 to i16, !dbg !49
  %607 = bitcast bfloat %526 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %605, i16 %606, i16 %607, i1 true) #1, !dbg !49
  %608 = or disjoint i32 %590, 528, !dbg !49
  %609 = lshr i32 %608, 3, !dbg !49
  %610 = and i32 %609, 248, !dbg !49
  %611 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %610, !dbg !49
  %612 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %611, i32 %608, !dbg !49
  %613 = bitcast bfloat %527 to i16, !dbg !49
  %614 = bitcast bfloat %528 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %612, i16 %613, i16 %614, i1 true) #1, !dbg !49
  %615 = or disjoint i32 %590, 32, !dbg !49
  %616 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %615, !dbg !49
  %617 = bitcast bfloat %529 to i16, !dbg !49
  %618 = bitcast bfloat %530 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %616, i16 %617, i16 %618, i1 true) #1, !dbg !49
  %619 = or disjoint i32 %590, 544, !dbg !49
  %620 = lshr i32 %619, 3, !dbg !49
  %621 = and i32 %620, 248, !dbg !49
  %622 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %621, !dbg !49
  %623 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %622, i32 %619, !dbg !49
  %624 = bitcast bfloat %531 to i16, !dbg !49
  %625 = bitcast bfloat %532 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %623, i16 %624, i16 %625, i1 true) #1, !dbg !49
  %626 = or disjoint i32 %590, 48, !dbg !49
  %627 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %626, !dbg !49
  %628 = bitcast bfloat %533 to i16, !dbg !49
  %629 = bitcast bfloat %534 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %627, i16 %628, i16 %629, i1 true) #1, !dbg !49
  %630 = or disjoint i32 %590, 560, !dbg !49
  %631 = lshr i32 %630, 3, !dbg !49
  %632 = and i32 %631, 248, !dbg !49
  %633 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %632, !dbg !49
  %634 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %633, i32 %630, !dbg !49
  %635 = bitcast bfloat %535 to i16, !dbg !49
  %636 = bitcast bfloat %536 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %634, i16 %635, i16 %636, i1 true) #1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %637 = and i32 %15, 120, !dbg !49
  %638 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %637, !dbg !49
  %639 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %638, i32 %591, !dbg !49
  %640 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !49
  %641 = or disjoint i32 %591, 1024, !dbg !49
  %642 = lshr exact i32 %641, 3, !dbg !49
  %643 = and i32 %642, 248, !dbg !49
  %644 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %643, !dbg !49
  %645 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %644, i32 %641, !dbg !49
  %646 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %647 = bitcast bfloat %537 to i16, !dbg !49
  %648 = bitcast bfloat %538 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %594, i16 %647, i16 %648, i1 true) #1, !dbg !49
  %649 = bitcast bfloat %539 to i16, !dbg !49
  %650 = bitcast bfloat %540 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %601, i16 %649, i16 %650, i1 true) #1, !dbg !49
  %651 = bitcast bfloat %541 to i16, !dbg !49
  %652 = bitcast bfloat %542 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %605, i16 %651, i16 %652, i1 true) #1, !dbg !49
  %653 = bitcast bfloat %543 to i16, !dbg !49
  %654 = bitcast bfloat %544 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %612, i16 %653, i16 %654, i1 true) #1, !dbg !49
  %655 = bitcast bfloat %545 to i16, !dbg !49
  %656 = bitcast bfloat %546 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %616, i16 %655, i16 %656, i1 true) #1, !dbg !49
  %657 = bitcast bfloat %547 to i16, !dbg !49
  %658 = bitcast bfloat %548 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %623, i16 %657, i16 %658, i1 true) #1, !dbg !49
  %659 = bitcast bfloat %549 to i16, !dbg !49
  %660 = bitcast bfloat %550 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %627, i16 %659, i16 %660, i1 true) #1, !dbg !49
  %661 = bitcast bfloat %551 to i16, !dbg !49
  %662 = bitcast bfloat %552 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %634, i16 %661, i16 %662, i1 true) #1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %663 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !49
  %664 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %665 = bitcast bfloat %553 to i16, !dbg !49
  %666 = bitcast bfloat %554 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %594, i16 %665, i16 %666, i1 true) #1, !dbg !49
  %667 = bitcast bfloat %555 to i16, !dbg !49
  %668 = bitcast bfloat %556 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %601, i16 %667, i16 %668, i1 true) #1, !dbg !49
  %669 = bitcast bfloat %557 to i16, !dbg !49
  %670 = bitcast bfloat %558 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %605, i16 %669, i16 %670, i1 true) #1, !dbg !49
  %671 = bitcast bfloat %559 to i16, !dbg !49
  %672 = bitcast bfloat %560 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %612, i16 %671, i16 %672, i1 true) #1, !dbg !49
  %673 = bitcast bfloat %561 to i16, !dbg !49
  %674 = bitcast bfloat %562 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %616, i16 %673, i16 %674, i1 true) #1, !dbg !49
  %675 = bitcast bfloat %563 to i16, !dbg !49
  %676 = bitcast bfloat %564 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %623, i16 %675, i16 %676, i1 true) #1, !dbg !49
  %677 = bitcast bfloat %565 to i16, !dbg !49
  %678 = bitcast bfloat %566 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %627, i16 %677, i16 %678, i1 true) #1, !dbg !49
  %679 = bitcast bfloat %567 to i16, !dbg !49
  %680 = bitcast bfloat %568 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %634, i16 %679, i16 %680, i1 true) #1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %681 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !49
  %682 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %683 = bitcast bfloat %569 to i16, !dbg !49
  %684 = bitcast bfloat %570 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %594, i16 %683, i16 %684, i1 true) #1, !dbg !49
  %685 = bitcast bfloat %571 to i16, !dbg !49
  %686 = bitcast bfloat %572 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %601, i16 %685, i16 %686, i1 true) #1, !dbg !49
  %687 = bitcast bfloat %573 to i16, !dbg !49
  %688 = bitcast bfloat %574 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %605, i16 %687, i16 %688, i1 true) #1, !dbg !49
  %689 = bitcast bfloat %575 to i16, !dbg !49
  %690 = bitcast bfloat %576 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %612, i16 %689, i16 %690, i1 true) #1, !dbg !49
  %691 = bitcast bfloat %577 to i16, !dbg !49
  %692 = bitcast bfloat %578 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %616, i16 %691, i16 %692, i1 true) #1, !dbg !49
  %693 = bitcast bfloat %579 to i16, !dbg !49
  %694 = bitcast bfloat %580 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %623, i16 %693, i16 %694, i1 true) #1, !dbg !49
  %695 = bitcast bfloat %581 to i16, !dbg !49
  %696 = bitcast bfloat %582 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %627, i16 %695, i16 %696, i1 true) #1, !dbg !49
  %697 = bitcast bfloat %583 to i16, !dbg !49
  %698 = bitcast bfloat %584 to i16, !dbg !49
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %634, i16 %697, i16 %698, i1 true) #1, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %699 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !49
  %700 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !49
  %.extract = extractelement <4 x i32> %640, i64 0, !dbg !49
  %.extract198 = extractelement <4 x i32> %640, i64 1, !dbg !49
  %.extract200 = extractelement <4 x i32> %640, i64 2, !dbg !49
  %.extract202 = extractelement <4 x i32> %640, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract198, i32 %.extract200, i32 %.extract202, ptr addrspace(1) %506, i1 %479) #1, !dbg !49
  %.extract204 = extractelement <4 x i32> %646, i64 0, !dbg !49
  %.extract206 = extractelement <4 x i32> %646, i64 1, !dbg !49
  %.extract208 = extractelement <4 x i32> %646, i64 2, !dbg !49
  %.extract210 = extractelement <4 x i32> %646, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract204, i32 %.extract206, i32 %.extract208, i32 %.extract210, ptr addrspace(1) %508, i1 %480) #1, !dbg !49
  %.extract212 = extractelement <4 x i32> %663, i64 0, !dbg !49
  %.extract214 = extractelement <4 x i32> %663, i64 1, !dbg !49
  %.extract216 = extractelement <4 x i32> %663, i64 2, !dbg !49
  %.extract218 = extractelement <4 x i32> %663, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract212, i32 %.extract214, i32 %.extract216, i32 %.extract218, ptr addrspace(1) %510, i1 %481) #1, !dbg !49
  %.extract220 = extractelement <4 x i32> %664, i64 0, !dbg !49
  %.extract222 = extractelement <4 x i32> %664, i64 1, !dbg !49
  %.extract224 = extractelement <4 x i32> %664, i64 2, !dbg !49
  %.extract226 = extractelement <4 x i32> %664, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract220, i32 %.extract222, i32 %.extract224, i32 %.extract226, ptr addrspace(1) %512, i1 %482) #1, !dbg !49
  %.extract228 = extractelement <4 x i32> %681, i64 0, !dbg !49
  %.extract230 = extractelement <4 x i32> %681, i64 1, !dbg !49
  %.extract232 = extractelement <4 x i32> %681, i64 2, !dbg !49
  %.extract234 = extractelement <4 x i32> %681, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract228, i32 %.extract230, i32 %.extract232, i32 %.extract234, ptr addrspace(1) %514, i1 %483) #1, !dbg !49
  %.extract236 = extractelement <4 x i32> %682, i64 0, !dbg !49
  %.extract238 = extractelement <4 x i32> %682, i64 1, !dbg !49
  %.extract240 = extractelement <4 x i32> %682, i64 2, !dbg !49
  %.extract242 = extractelement <4 x i32> %682, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract236, i32 %.extract238, i32 %.extract240, i32 %.extract242, ptr addrspace(1) %516, i1 %484) #1, !dbg !49
  %.extract244 = extractelement <4 x i32> %699, i64 0, !dbg !49
  %.extract246 = extractelement <4 x i32> %699, i64 1, !dbg !49
  %.extract248 = extractelement <4 x i32> %699, i64 2, !dbg !49
  %.extract250 = extractelement <4 x i32> %699, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract244, i32 %.extract246, i32 %.extract248, i32 %.extract250, ptr addrspace(1) %518, i1 %485) #1, !dbg !49
  %.extract252 = extractelement <4 x i32> %700, i64 0, !dbg !49
  %.extract254 = extractelement <4 x i32> %700, i64 1, !dbg !49
  %.extract256 = extractelement <4 x i32> %700, i64 2, !dbg !49
  %.extract258 = extractelement <4 x i32> %700, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract252, i32 %.extract254, i32 %.extract256, i32 %.extract258, ptr addrspace(1) %520, i1 %486) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpokyuot2lgjhemdh4aghiuhyu5jgh5wobbdcbtjmgonc4knte5a.py", directory: "/tmp/torchinductor_root/po")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 57, column: 19, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 54, scope: !6)
!33 = !DILocation(line: 67, column: 66, scope: !6)
!34 = !DILocation(line: 67, column: 13, scope: !6)
!35 = !DILocation(line: 72, column: 24, scope: !6)
!36 = !DILocation(line: 73, column: 24, scope: !6)
!37 = !DILocation(line: 78, column: 13, scope: !6)
!38 = !DILocation(line: 79, column: 13, scope: !6)
!39 = !DILocation(line: 70, column: 25, scope: !6)
!40 = !DILocation(line: 77, column: 25, scope: !6)
!41 = !DILocation(line: 87, column: 20, scope: !6)
!42 = !DILocation(line: 87, column: 34, scope: !6)
!43 = !DILocation(line: 87, column: 26, scope: !6)
!44 = !DILocation(line: 90, column: 25, scope: !6)
!45 = !DILocation(line: 90, column: 40, scope: !6)
!46 = !DILocation(line: 90, column: 21, scope: !6)
!47 = !DILocation(line: 90, column: 33, scope: !6)
!48 = !DILocation(line: 91, column: 25, scope: !6)
!49 = !DILocation(line: 91, column: 67, scope: !6)
!50 = !DILocation(line: 91, column: 4, scope: !6)
