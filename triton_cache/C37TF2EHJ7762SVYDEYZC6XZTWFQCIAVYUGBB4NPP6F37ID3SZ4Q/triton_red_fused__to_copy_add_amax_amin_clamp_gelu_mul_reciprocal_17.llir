; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 6, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = lshr i32 %15, 2, !dbg !11
  %17 = and i32 %16, 63, !dbg !11
  %18 = and i32 %15, 3, !dbg !11
  %19 = or disjoint i32 %17, %14, !dbg !12
  %20 = icmp slt i32 %19, 3600, !dbg !13
  %21 = sext i32 %19 to i64, !dbg !14
  %22 = getelementptr bfloat, ptr addrspace(1) %1, i64 %21, !dbg !14
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %22, i1 %20) #5, !dbg !15
  %24 = bitcast i16 %23 to bfloat, !dbg !15
  %25 = getelementptr bfloat, ptr addrspace(1) %2, i64 %21, !dbg !16
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %20) #5, !dbg !17
  %27 = bitcast i16 %26 to bfloat, !dbg !17
  %28 = mul i32 %19, 12288, !dbg !18
  %.inv = fcmp oge bfloat %24, 0xR0000, !dbg !19
  %29 = select i1 %.inv, bfloat 0xR0000, bfloat %24, !dbg !19
  %30 = fpext bfloat %29 to float, !dbg !19
  %31 = fsub float 0.000000e+00, %30, !dbg !23
  %.inv3 = fcmp ole bfloat %27, 0xR0000, !dbg !24
  %32 = select i1 %.inv3, bfloat 0xR0000, bfloat %27, !dbg !24
  %33 = fpext bfloat %32 to float, !dbg !24
  %34 = fcmp ogt float %31, %33, !dbg !26
  %35 = fcmp uno float %31, 0.000000e+00, !dbg !28
  %36 = or i1 %34, %35, !dbg !29
  %37 = select i1 %36, float %31, float %33, !dbg !30
  %38 = fmul float %37, 0x3F80204080000000, !dbg !31
  %39 = fcmp ogt float %38, 0x3EE4F8B580000000, !dbg !32
  %40 = fcmp uno float %38, 0.000000e+00, !dbg !34
  %41 = or i1 %39, %40, !dbg !35
  %42 = select i1 %41, float %38, float 0x3EE4F8B580000000, !dbg !36
  %43 = zext nneg i32 %18 to i64, !dbg !37
  br label %44, !dbg !37

44:                                               ; preds = %12, %__nv_tanhf.exit24
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit24 ]
  %45 = phi float [ 0xFFF0000000000000, %12 ], [ %115, %__nv_tanhf.exit24 ]
  %46 = phi float [ 0x7FF0000000000000, %12 ], [ %110, %__nv_tanhf.exit24 ]
  %47 = or disjoint i64 %indvars.iv, %43, !dbg !38
  %48 = trunc nuw nsw i64 %47 to i32, !dbg !39
  %49 = add i32 %28, %48, !dbg !39
  %50 = sext i32 %49 to i64, !dbg !40
  %51 = getelementptr i32, ptr addrspace(1) %0, i64 %50, !dbg !40
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #5, !dbg !41
  %53 = getelementptr bfloat, ptr addrspace(1) %3, i64 %47, !dbg !42
  %54 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %53, i1 true) #5, !dbg !43
  %55 = bitcast i16 %54 to bfloat, !dbg !43
  %56 = fpext bfloat %55 to float, !dbg !44
  %57 = getelementptr bfloat, ptr addrspace(1) %4, i64 %47, !dbg !45
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 true) #5, !dbg !46
  %59 = bitcast i16 %58 to bfloat, !dbg !46
  %60 = fpext bfloat %59 to float, !dbg !47
  %61 = sitofp i32 %52 to float, !dbg !48
  %62 = fmul float %42, %61, !dbg !49
  %63 = fmul float %62, %56, !dbg !50
  %64 = fadd float %63, %60, !dbg !51
  %65 = fmul float %64, 5.000000e-01, !dbg !52
  %66 = fmul float %64, %64, !dbg !53
  %67 = fmul float %64, %66, !dbg !54
  %68 = fmul float %67, 0x3FA6E4E260000000, !dbg !55
  %69 = fadd float %64, %68, !dbg !56
  %70 = fmul float %69, 0x3FE9884540000000, !dbg !57
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i6 = icmp eq i32 %71, 0, !dbg !58
  %72 = tail call float @llvm.nvvm.fabs.ftz.f(float %70) #5, !dbg !58
  %73 = tail call float @llvm.nvvm.fabs.f(float %70) #5, !dbg !58
  %.01.i7 = select i1 %.not.i6, float %73, float %72, !dbg !58
  %74 = fcmp ult float %.01.i7, 0x3FE3333340000000, !dbg !58
  br i1 %74, label %__internal_fmad.exit3.i13, label %__internal_fmad.exit1.i8, !dbg !58

__internal_fmad.exit1.i8:                         ; preds = %44
  %75 = fmul float %.01.i7, 0x4007154760000000, !dbg !58
  %76 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %75) #5, !dbg !58
  %77 = fadd float %76, 1.000000e+00, !dbg !58
  %78 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %77) #6, !dbg !58, !srcloc !59
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i9 = icmp eq i32 %79, 0, !dbg !58
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %78, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %78, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i10 = select i1 %.not6.i9, float %81, float %80, !dbg !58
  %82 = fcmp oge float %.01.i7, 0x4022059680000000, !dbg !58
  %s.0.i11 = select i1 %82, float 1.000000e+00, float %.03.i10, !dbg !58
  %83 = bitcast float %s.0.i11 to i32, !dbg !58
  %84 = bitcast float %70 to i32, !dbg !58
  %85 = and i32 %84, -2147483648, !dbg !58
  %86 = or i32 %85, %83, !dbg !58
  %87 = bitcast i32 %86 to float, !dbg !58
  br label %__nv_tanhf.exit24, !dbg !58

__internal_fmad.exit3.i13:                        ; preds = %44
  %88 = fmul float %70, %70, !dbg !58
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i14 = icmp eq i32 %89, 0, !dbg !58
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %88, float 0xBFAAC795C0000000) #5, !dbg !58
  %91 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %88, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i15 = select i1 %.not1.i14, float %91, float %90, !dbg !58
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i16 = icmp eq i32 %92, 0, !dbg !58
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i15, float %88, float 0x3FC10B2820000000) #5, !dbg !58
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i15, float %88, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i17 = select i1 %.not2.i16, float %94, float %93, !dbg !58
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i18 = icmp eq i32 %95, 0, !dbg !58
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i17, float %88, float 0xBFD5553DA0000000) #5, !dbg !58
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i17, float %88, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i19 = select i1 %.not3.i18, float %97, float %96, !dbg !58
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i20 = icmp eq i32 %98, 0, !dbg !58
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i19, float %88, float 0.000000e+00) #5, !dbg !58
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i19, float %88, float 0.000000e+00) #5, !dbg !58
  %.04.i21 = select i1 %.not4.i20, float %100, float %99, !dbg !58
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i22 = icmp eq i32 %101, 0, !dbg !58
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i21, float %70, float %70) #5, !dbg !58
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i21, float %70, float %70) #5, !dbg !58
  %.02.i23 = select i1 %.not5.i22, float %103, float %102, !dbg !58
  br label %__nv_tanhf.exit24, !dbg !58

__nv_tanhf.exit24:                                ; preds = %__internal_fmad.exit1.i8, %__internal_fmad.exit3.i13
  %s.1.i12 = phi float [ %87, %__internal_fmad.exit1.i8 ], [ %.02.i23, %__internal_fmad.exit3.i13 ], !dbg !58
  %104 = fadd float %s.1.i12, 1.000000e+00, !dbg !60
  %105 = fmul float %65, %104, !dbg !61
  %106 = fcmp olt float %46, %105, !dbg !62
  %107 = fcmp uno float %46, 0.000000e+00, !dbg !64
  %108 = or i1 %107, %106, !dbg !65
  %109 = select i1 %108, float %46, float %105, !dbg !66
  %110 = select i1 %20, float %109, float %46, !dbg !67
  %111 = fcmp ogt float %45, %105, !dbg !68
  %112 = fcmp uno float %45, 0.000000e+00, !dbg !70
  %113 = or i1 %112, %111, !dbg !71
  %114 = select i1 %113, float %45, float %105, !dbg !72
  %115 = select i1 %20, float %114, float %45, !dbg !73
  %116 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !74
  %117 = bitcast float %64 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %116, i1 %20) #5, !dbg !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !37
  %118 = icmp samesign ult i64 %indvars.iv, 12284, !dbg !37
  br i1 %118, label %44, label %119, !dbg !37

119:                                              ; preds = %__nv_tanhf.exit24
  %120 = and i32 %15, 63, !dbg !11
  %121 = or disjoint i32 %14, %120, !dbg !12
  %122 = icmp slt i32 %121, 3600, !dbg !13
  %123 = bitcast float %110 to i32, !dbg !76
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !76
  %125 = bitcast i32 %124 to float, !dbg !76
  %126 = fcmp olt float %110, %125, !dbg !78
  %127 = fcmp uno float %110, 0.000000e+00, !dbg !80
  %128 = or i1 %127, %126, !dbg !81
  %129 = select i1 %128, float %110, float %125, !dbg !82
  %130 = bitcast float %129 to i32, !dbg !76
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !76
  %132 = bitcast i32 %131 to float, !dbg !76
  %133 = fcmp olt float %129, %132, !dbg !78
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !80
  %135 = or i1 %133, %134, !dbg !81
  %136 = select i1 %135, float %129, float %132, !dbg !82
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !83
  %138 = bitcast float %136 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %139 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %120, !dbg !83
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !83
  %141 = bitcast float %115 to i32, !dbg !84
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !84
  %143 = bitcast i32 %142 to float, !dbg !84
  %144 = fcmp ogt float %115, %143, !dbg !86
  %145 = fcmp uno float %115, 0.000000e+00, !dbg !87
  %146 = or i1 %145, %144, !dbg !88
  %147 = select i1 %146, float %115, float %143, !dbg !89
  %148 = bitcast float %147 to i32, !dbg !84
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !84
  %150 = bitcast i32 %149 to float, !dbg !84
  %151 = fcmp ogt float %147, %150, !dbg !86
  %152 = fcmp uno float %147, 0.000000e+00, !dbg !87
  %153 = or i1 %151, %152, !dbg !88
  %154 = select i1 %153, float %147, float %150, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %155 = bitcast float %154 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %155, i1 true) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %156 = load float, ptr addrspace(3) %139, align 4, !dbg !90
  %157 = sext i32 %121 to i64, !dbg !91
  %158 = getelementptr bfloat, ptr addrspace(1) %6, i64 %157, !dbg !91
  %159 = fptrunc float %140 to bfloat, !dbg !83
  %160 = and i32 %15, 192, !dbg !83
  %161 = icmp eq i32 %160, 0, !dbg !83
  %162 = bitcast bfloat %159 to i16, !dbg !83
  %163 = and i1 %161, %122, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %162, ptr addrspace(1) %158, i1 %163) #5, !dbg !83
  %164 = getelementptr bfloat, ptr addrspace(1) %7, i64 %157, !dbg !92
  %165 = fptrunc float %156 to bfloat, !dbg !90
  %166 = bitcast bfloat %165 to i16, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %166, ptr addrspace(1) %164, i1 %163) #5, !dbg !90
  %.inv4 = fcmp oge float %136, 0.000000e+00, !dbg !93
  %167 = select i1 %.inv4, float 0.000000e+00, float %136, !dbg !93
  %168 = fsub float 0.000000e+00, %167, !dbg !95
  %.inv5 = fcmp ole float %154, 0.000000e+00, !dbg !96
  %169 = select i1 %.inv5, float 0.000000e+00, float %154, !dbg !96
  %170 = fcmp ogt float %168, %169, !dbg !98
  %171 = fcmp uno float %168, 0.000000e+00, !dbg !100
  %172 = or i1 %171, %170, !dbg !101
  %173 = select i1 %172, float %168, float %169, !dbg !102
  %174 = fmul float %173, 0x3F80204080000000, !dbg !103
  %175 = fcmp ogt float %174, 0x3EE4F8B580000000, !dbg !104
  %176 = fcmp uno float %174, 0.000000e+00, !dbg !106
  %177 = or i1 %175, %176, !dbg !107
  %178 = select i1 %177, float %174, float 0x3EE4F8B580000000, !dbg !108
  %179 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %178), !dbg !109
  %180 = or disjoint i32 %28, %18
  br label %181, !dbg !110

181:                                              ; preds = %119, %__nv_tanhf.exit
  %indvars.iv27 = phi i64 [ 0, %119 ], [ %indvars.iv.next28, %__nv_tanhf.exit ]
  %182 = trunc nuw nsw i64 %indvars.iv27 to i32, !dbg !111
  %183 = add i32 %180, %182, !dbg !111
  %184 = sext i32 %183 to i64, !dbg !112
  %185 = getelementptr float, ptr addrspace(1) %5, i64 %184, !dbg !112
  %186 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %185, i1 %20) #5, !dbg !113
  %187 = bitcast i32 %186 to float, !dbg !113
  %188 = fmul float %187, 5.000000e-01, !dbg !114
  %189 = fmul float %187, %187, !dbg !115
  %190 = fmul float %189, %187, !dbg !116
  %191 = fmul float %190, 0x3FA6E4E260000000, !dbg !117
  %192 = fadd float %191, %187, !dbg !118
  %193 = fmul float %192, 0x3FE9884540000000, !dbg !119
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not.i = icmp eq i32 %194, 0, !dbg !120
  %195 = tail call float @llvm.nvvm.fabs.ftz.f(float %193) #5, !dbg !120
  %196 = tail call float @llvm.nvvm.fabs.f(float %193) #5, !dbg !120
  %.01.i = select i1 %.not.i, float %196, float %195, !dbg !120
  %197 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !120
  br i1 %197, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !120

__internal_fmad.exit1.i:                          ; preds = %181
  %198 = fmul float %.01.i, 0x4007154760000000, !dbg !120
  %199 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %198) #5, !dbg !120
  %200 = fadd float %199, 1.000000e+00, !dbg !120
  %201 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %200) #6, !dbg !120, !srcloc !59
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not6.i = icmp eq i32 %202, 0, !dbg !120
  %203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %201, float -2.000000e+00, float 1.000000e+00) #5, !dbg !120
  %204 = tail call float @llvm.nvvm.fma.rn.f(float %201, float -2.000000e+00, float 1.000000e+00) #5, !dbg !120
  %.03.i = select i1 %.not6.i, float %204, float %203, !dbg !120
  %205 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !120
  %s.0.i = select i1 %205, float 1.000000e+00, float %.03.i, !dbg !120
  %206 = bitcast float %s.0.i to i32, !dbg !120
  %207 = bitcast float %193 to i32, !dbg !120
  %208 = and i32 %207, -2147483648, !dbg !120
  %209 = or i32 %208, %206, !dbg !120
  %210 = bitcast i32 %209 to float, !dbg !120
  br label %__nv_tanhf.exit, !dbg !120

__internal_fmad.exit3.i:                          ; preds = %181
  %211 = fmul float %193, %193, !dbg !120
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not1.i = icmp eq i32 %212, 0, !dbg !120
  %213 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %211, float 0xBFAAC795C0000000) #5, !dbg !120
  %214 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %211, float 0xBFAAC795C0000000) #5, !dbg !120
  %.06.i = select i1 %.not1.i, float %214, float %213, !dbg !120
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not2.i = icmp eq i32 %215, 0, !dbg !120
  %216 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %211, float 0x3FC10B2820000000) #5, !dbg !120
  %217 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %211, float 0x3FC10B2820000000) #5, !dbg !120
  %.05.i = select i1 %.not2.i, float %217, float %216, !dbg !120
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not3.i = icmp eq i32 %218, 0, !dbg !120
  %219 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %211, float 0xBFD5553DA0000000) #5, !dbg !120
  %220 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %211, float 0xBFD5553DA0000000) #5, !dbg !120
  %.0.i = select i1 %.not3.i, float %220, float %219, !dbg !120
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not4.i = icmp eq i32 %221, 0, !dbg !120
  %222 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %211, float 0.000000e+00) #5, !dbg !120
  %223 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %211, float 0.000000e+00) #5, !dbg !120
  %.04.i = select i1 %.not4.i, float %223, float %222, !dbg !120
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !120
  %.not5.i = icmp eq i32 %224, 0, !dbg !120
  %225 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %193, float %193) #5, !dbg !120
  %226 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %193, float %193) #5, !dbg !120
  %.02.i = select i1 %.not5.i, float %226, float %225, !dbg !120
  br label %__nv_tanhf.exit, !dbg !120

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %210, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !120
  %227 = fadd float %s.1.i, 1.000000e+00, !dbg !121
  %228 = fmul float %188, %227, !dbg !122
  %229 = fmul float %179, %228, !dbg !123
  %230 = tail call float @llvm.nvvm.round.f(float %229) #5, !dbg !124
  %231 = fcmp ogt float %230, -1.270000e+02, !dbg !125
  %232 = fcmp uno float %230, 0.000000e+00, !dbg !127
  %233 = or i1 %231, %232, !dbg !128
  %234 = select i1 %233, float %230, float -1.270000e+02, !dbg !129
  %235 = fcmp olt float %234, 1.270000e+02, !dbg !130
  %236 = fcmp uno float %234, 0.000000e+00, !dbg !132
  %237 = or i1 %235, %236, !dbg !133
  %238 = fptosi float %234 to i8, !dbg !134
  %239 = select i1 %237, i8 %238, i8 127, !dbg !135
  %240 = getelementptr i8, ptr addrspace(1) %8, i64 %184, !dbg !136
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %239, ptr addrspace(1) %240, i1 %20) #5, !dbg !137
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 4, !dbg !110
  %241 = icmp samesign ult i64 %indvars.iv27, 12284, !dbg !110
  br i1 %241, label %181, label %242, !dbg !110

242:                                              ; preds = %__nv_tanhf.exit
  ret void, !dbg !138
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gkrgu5alm7ohqdvz5epi37xuicsuvj6jhl357dxwzhi7uhuweg.py", directory: "/tmp/torchinductor_root/6g")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_17", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 29, column: 30, scope: !6)
!15 = !DILocation(line: 29, column: 35, scope: !6)
!16 = !DILocation(line: 30, column: 30, scope: !6)
!17 = !DILocation(line: 30, column: 35, scope: !6)
!18 = !DILocation(line: 39, column: 47, scope: !6)
!19 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 44, column: 44, scope: !6)
!23 = !DILocation(line: 45, column: 16, scope: !6)
!24 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 46, column: 44, scope: !6)
!26 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !27)
!27 = !DILocation(line: 47, column: 44, scope: !6)
!28 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !27)
!29 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !27)
!30 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !27)
!31 = !DILocation(line: 49, column: 23, scope: !6)
!32 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !33)
!33 = !DILocation(line: 52, column: 46, scope: !6)
!34 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !33)
!35 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !33)
!36 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !33)
!37 = !DILocation(line: 33, column: 40, scope: !6)
!38 = !DILocation(line: 34, column: 31, scope: !6)
!39 = !DILocation(line: 39, column: 41, scope: !6)
!40 = !DILocation(line: 39, column: 34, scope: !6)
!41 = !DILocation(line: 39, column: 52, scope: !6)
!42 = !DILocation(line: 40, column: 35, scope: !6)
!43 = !DILocation(line: 40, column: 42, scope: !6)
!44 = !DILocation(line: 40, column: 95, scope: !6)
!45 = !DILocation(line: 41, column: 35, scope: !6)
!46 = !DILocation(line: 41, column: 42, scope: !6)
!47 = !DILocation(line: 41, column: 95, scope: !6)
!48 = !DILocation(line: 42, column: 23, scope: !6)
!49 = !DILocation(line: 54, column: 23, scope: !6)
!50 = !DILocation(line: 55, column: 24, scope: !6)
!51 = !DILocation(line: 56, column: 24, scope: !6)
!52 = !DILocation(line: 59, column: 24, scope: !6)
!53 = !DILocation(line: 60, column: 24, scope: !6)
!54 = !DILocation(line: 61, column: 24, scope: !6)
!55 = !DILocation(line: 63, column: 24, scope: !6)
!56 = !DILocation(line: 64, column: 24, scope: !6)
!57 = !DILocation(line: 66, column: 24, scope: !6)
!58 = !DILocation(line: 67, column: 31, scope: !6)
!59 = !{i32 21046}
!60 = !DILocation(line: 69, column: 24, scope: !6)
!61 = !DILocation(line: 70, column: 24, scope: !6)
!62 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !63)
!63 = !DILocation(line: 73, column: 47, scope: !6)
!64 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !63)
!65 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !63)
!66 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !63)
!67 = !DILocation(line: 74, column: 50, scope: !6)
!68 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !69)
!69 = !DILocation(line: 75, column: 47, scope: !6)
!70 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !69)
!71 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !69)
!72 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !69)
!73 = !DILocation(line: 76, column: 50, scope: !6)
!74 = !DILocation(line: 77, column: 29, scope: !6)
!75 = !DILocation(line: 77, column: 54, scope: !6)
!76 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !77)
!77 = !DILocation(line: 78, column: 40, scope: !6)
!78 = !DILocation(line: 94, column: 15, scope: !79, inlinedAt: !77)
!79 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!80 = !DILocation(line: 96, column: 21, scope: !79, inlinedAt: !77)
!81 = !DILocation(line: 96, column: 16, scope: !79, inlinedAt: !77)
!82 = !DILocation(line: 97, column: 29, scope: !79, inlinedAt: !77)
!83 = !DILocation(line: 80, column: 37, scope: !6)
!84 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !85)
!85 = !DILocation(line: 79, column: 40, scope: !6)
!86 = !DILocation(line: 102, column: 15, scope: !79, inlinedAt: !85)
!87 = !DILocation(line: 104, column: 21, scope: !79, inlinedAt: !85)
!88 = !DILocation(line: 104, column: 16, scope: !79, inlinedAt: !85)
!89 = !DILocation(line: 105, column: 29, scope: !79, inlinedAt: !85)
!90 = !DILocation(line: 81, column: 37, scope: !6)
!91 = !DILocation(line: 80, column: 25, scope: !6)
!92 = !DILocation(line: 81, column: 25, scope: !6)
!93 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !94)
!94 = !DILocation(line: 104, column: 46, scope: !6)
!95 = !DILocation(line: 105, column: 17, scope: !6)
!96 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !97)
!97 = !DILocation(line: 106, column: 46, scope: !6)
!98 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !99)
!101 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !99)
!102 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !99)
!103 = !DILocation(line: 109, column: 24, scope: !6)
!104 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !105)
!105 = !DILocation(line: 112, column: 46, scope: !6)
!106 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !105)
!108 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !105)
!109 = !DILocation(line: 115, column: 25, scope: !6)
!110 = !DILocation(line: 82, column: 40, scope: !6)
!111 = !DILocation(line: 88, column: 43, scope: !6)
!112 = !DILocation(line: 88, column: 36, scope: !6)
!113 = !DILocation(line: 88, column: 54, scope: !6)
!114 = !DILocation(line: 90, column: 24, scope: !6)
!115 = !DILocation(line: 91, column: 24, scope: !6)
!116 = !DILocation(line: 92, column: 24, scope: !6)
!117 = !DILocation(line: 94, column: 24, scope: !6)
!118 = !DILocation(line: 95, column: 24, scope: !6)
!119 = !DILocation(line: 97, column: 24, scope: !6)
!120 = !DILocation(line: 98, column: 31, scope: !6)
!121 = !DILocation(line: 100, column: 24, scope: !6)
!122 = !DILocation(line: 101, column: 24, scope: !6)
!123 = !DILocation(line: 117, column: 24, scope: !6)
!124 = !DILocation(line: 118, column: 36, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !126)
!126 = !DILocation(line: 121, column: 46, scope: !6)
!127 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !126)
!128 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !126)
!129 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !126)
!130 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !131)
!131 = !DILocation(line: 123, column: 46, scope: !6)
!132 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !131)
!133 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !131)
!134 = !DILocation(line: 125, column: 25, scope: !6)
!135 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !131)
!136 = !DILocation(line: 126, column: 29, scope: !6)
!137 = !DILocation(line: 126, column: 54, scope: !6)
!138 = !DILocation(line: 82, column: 4, scope: !6)
