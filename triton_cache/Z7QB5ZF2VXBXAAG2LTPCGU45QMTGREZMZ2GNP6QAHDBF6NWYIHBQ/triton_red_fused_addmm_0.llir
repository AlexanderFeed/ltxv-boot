; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 6, !dbg !11
  %13 = and i32 %12, 7, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, 18432, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 504, !dbg !14
  %18 = and i32 %11, 511, !dbg !14
  %19 = mul i32 %14, 3072, !dbg !15
  %20 = or disjoint i32 %19, %17
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %22 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %23 = zext nneg i32 %18 to i64, !dbg !16
  %24 = insertelement <16 x i1> poison, i1 %15, i64 0, !dbg !17
  %25 = shufflevector <16 x i1> %24, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !17
  br label %26, !dbg !16

26:                                               ; preds = %8, %26
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %26 ]
  %27 = phi <16 x float> [ zeroinitializer, %8 ], [ %93, %26 ]
  %28 = or disjoint i64 %indvars.iv, %23, !dbg !18
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 true) #4, !dbg !20
  %31 = bitcast i16 %30 to bfloat, !dbg !20
  %32 = fpext bfloat %31 to float, !dbg !21
  %33 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %34 = add i32 %20, %33, !dbg !22
  %35 = sext i32 %34 to i64, !dbg !23
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %35, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %15) #4, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !24
  %46 = getelementptr bfloat, ptr addrspace(1) %2, i64 %35, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %15) #4, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !26
  %56 = fsub float 0.000000e+00, %32, !dbg !27
  %57 = fmul float %56, 0x3FF7154760000000, !dbg !31
  %58 = tail call float @llvm.nvvm.ex2.approx.f(float %57), !dbg !31
  %59 = fadd float %58, 1.000000e+00, !dbg !32
  %60 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %59), !dbg !33
  %61 = fmul float %60, %32, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %62 = bitcast float %61 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %62, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %63 = shufflevector <2 x bfloat> %49, <2 x bfloat> %51, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %64 = shufflevector <2 x bfloat> %53, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %65 = shufflevector <16 x bfloat> %63, <16 x bfloat> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %66 = shufflevector <2 x bfloat> %53, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %67 = shufflevector <16 x bfloat> %65, <16 x bfloat> %66, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %68 = shufflevector <2 x bfloat> %55, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %69 = shufflevector <16 x bfloat> %67, <16 x bfloat> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %70 = shufflevector <2 x bfloat> %55, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %71 = shufflevector <16 x bfloat> %69, <16 x bfloat> %70, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %72 = shufflevector <2 x bfloat> %39, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %73 = shufflevector <16 x bfloat> %71, <16 x bfloat> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %74 = shufflevector <2 x bfloat> %39, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %75 = shufflevector <16 x bfloat> %73, <16 x bfloat> %74, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %76 = shufflevector <2 x bfloat> %41, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %77 = shufflevector <16 x bfloat> %75, <16 x bfloat> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %78 = shufflevector <2 x bfloat> %41, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %79 = shufflevector <16 x bfloat> %77, <16 x bfloat> %78, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %80 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %81 = shufflevector <16 x bfloat> %79, <16 x bfloat> %80, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !36
  %82 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %83 = shufflevector <16 x bfloat> %81, <16 x bfloat> %82, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !36
  %84 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %85 = shufflevector <16 x bfloat> %83, <16 x bfloat> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !36
  %86 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %87 = shufflevector <16 x bfloat> %85, <16 x bfloat> %86, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !36
  %88 = fpext <16 x bfloat> %87 to <16 x float>, !dbg !36
  %89 = load <8 x float>, ptr addrspace(3) %22, align 16, !dbg !35
  %90 = shufflevector <8 x float> %89, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !35
  %91 = fmul <16 x float> %90, %88, !dbg !37
  %92 = fadd <16 x float> %27, %91, !dbg !38
  %93 = select <16 x i1> %25, <16 x float> %92, <16 x float> %27, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !16
  %94 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !16
  br i1 %94, label %26, label %95, !dbg !16

95:                                               ; preds = %26
  %96 = and i32 %11, 7, !dbg !11
  %97 = lshr i32 %11, 5, !dbg !11
  %98 = and i32 %11, 31, !dbg !11
  %99 = or disjoint i32 %10, %96, !dbg !12
  %100 = icmp slt i32 %99, 18432, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %shift = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %101 = fadd <16 x float> %93, %shift, !dbg !41
  %shift56 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 10, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %102 = fadd <16 x float> %shift56, %101, !dbg !41
  %shift57 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %103 = fadd <16 x float> %shift57, %102, !dbg !41
  %shift58 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %104 = fadd <16 x float> %shift58, %103, !dbg !41
  %shift59 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 13, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %105 = fadd <16 x float> %shift59, %104, !dbg !41
  %shift60 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 14, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %106 = fadd <16 x float> %shift60, %105, !dbg !41
  %shift61 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %107 = fadd <16 x float> %shift61, %106, !dbg !41
  %108 = extractelement <16 x float> %107, i64 8, !dbg !41
  %109 = bitcast float %108 to i32, !dbg !39
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !39
  %111 = bitcast i32 %110 to float, !dbg !39
  %112 = fadd float %108, %111, !dbg !41
  %113 = bitcast float %112 to i32, !dbg !39
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !39
  %115 = bitcast i32 %114 to float, !dbg !39
  %116 = fadd float %112, %115, !dbg !41
  %117 = bitcast float %116 to i32, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !39
  %119 = bitcast i32 %118 to float, !dbg !39
  %120 = fadd float %116, %119, !dbg !41
  %121 = bitcast float %120 to i32, !dbg !39
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !39
  %123 = bitcast i32 %122 to float, !dbg !39
  %124 = fadd float %120, %123, !dbg !41
  %125 = bitcast float %124 to i32, !dbg !39
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !39
  %127 = bitcast i32 %126 to float, !dbg !39
  %128 = fadd float %124, %127, !dbg !41
  %129 = and i32 %97, 1, !dbg !39
  %130 = icmp eq i32 %98, 0, !dbg !39
  %131 = shl nuw nsw i32 %13, 1, !dbg !39
  %132 = or disjoint i32 %131, %129, !dbg !39
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !39
  %134 = bitcast float %128 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 %130) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %135 = icmp slt i32 %11, 16, !dbg !39
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !39
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %135) #4, !dbg !39
  %138 = bitcast i32 %137 to float, !dbg !39
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !39
  %140 = bitcast i32 %139 to float, !dbg !39
  %141 = fadd float %138, %140, !dbg !41
  %142 = and i32 %11, 1, !dbg !39
  %143 = icmp eq i32 %142, 0, !dbg !39
  %144 = and i1 %135, %143, !dbg !39
  %145 = bitcast float %141 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %145, i1 %144) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !39
  %147 = load i32, ptr addrspace(3) %146, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %148 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !43
  %149 = insertelement <1 x i32> poison, i32 %147, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %150 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %96, !dbg !43
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %shift62 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %152 = fadd <16 x float> %93, %shift62, !dbg !46
  %shift63 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %153 = fadd <16 x float> %shift63, %152, !dbg !46
  %shift64 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %154 = fadd <16 x float> %shift64, %153, !dbg !46
  %shift65 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %155 = fadd <16 x float> %shift65, %154, !dbg !46
  %shift66 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %156 = fadd <16 x float> %shift66, %155, !dbg !46
  %shift67 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %157 = fadd <16 x float> %shift67, %156, !dbg !46
  %shift68 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %158 = fadd <16 x float> %shift68, %157, !dbg !46
  %159 = extractelement <16 x float> %158, i64 0, !dbg !46
  %160 = bitcast float %159 to i32, !dbg !44
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !44
  %162 = bitcast i32 %161 to float, !dbg !44
  %163 = fadd float %159, %162, !dbg !46
  %164 = bitcast float %163 to i32, !dbg !44
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !44
  %166 = bitcast i32 %165 to float, !dbg !44
  %167 = fadd float %163, %166, !dbg !46
  %168 = bitcast float %167 to i32, !dbg !44
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !44
  %170 = bitcast i32 %169 to float, !dbg !44
  %171 = fadd float %167, %170, !dbg !46
  %172 = bitcast float %171 to i32, !dbg !44
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !44
  %174 = bitcast i32 %173 to float, !dbg !44
  %175 = fadd float %171, %174, !dbg !46
  %176 = bitcast float %175 to i32, !dbg !44
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !44
  %178 = bitcast i32 %177 to float, !dbg !44
  %179 = fadd float %175, %178, !dbg !46
  %180 = bitcast float %179 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %180, i1 %130) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %135) #4, !dbg !44
  %182 = bitcast i32 %181 to float, !dbg !44
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !44
  %184 = bitcast i32 %183 to float, !dbg !44
  %185 = fadd float %182, %184, !dbg !46
  %186 = bitcast float %185 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %186, i1 %144) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %187 = load i32, ptr addrspace(3) %146, align 8, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %188 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %188, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %189 = load i32, ptr addrspace(3) %150, align 4, !dbg !47
  %190 = sext i32 %99 to i64, !dbg !48
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %190, !dbg !48
  %192 = and i32 %11, 504, !dbg !49
  %193 = icmp eq i32 %192, 0, !dbg !49
  %194 = and i1 %193, %100, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %191, i1 %194) #4, !dbg !49
  %195 = getelementptr float, ptr addrspace(1) %4, i64 %190, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %195, i1 %194) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpdejrfyv2kwed44vpldu3lq3fqyqqztaloewcb735r6wirux7ab.py", directory: "/tmp/torchinductor_root/pd")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 54, column: 50, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 41, scope: !6)
!21 = !DILocation(line: 37, column: 94, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 39, column: 35, scope: !6)
!26 = !DILocation(line: 39, column: 52, scope: !6)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!30 = !DILocation(line: 41, column: 26, scope: !6)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 42, column: 22, scope: !6)
!35 = !DILocation(line: 46, column: 22, scope: !6)
!36 = !DILocation(line: 39, column: 114, scope: !6)
!37 = !DILocation(line: 51, column: 23, scope: !6)
!38 = !DILocation(line: 53, column: 25, scope: !6)
!39 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !40)
!40 = !DILocation(line: 55, column: 27, scope: !6)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!43 = !DILocation(line: 55, column: 30, scope: !6)
!44 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !45)
!45 = !DILocation(line: 56, column: 27, scope: !6)
!46 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!47 = !DILocation(line: 56, column: 30, scope: !6)
!48 = !DILocation(line: 57, column: 25, scope: !6)
!49 = !DILocation(line: 57, column: 37, scope: !6)
!50 = !DILocation(line: 58, column: 25, scope: !6)
!51 = !DILocation(line: 58, column: 37, scope: !6)
!52 = !DILocation(line: 58, column: 4, scope: !6)
