; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 9, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = and i32 %10, 31, !dbg !11
  %13 = or disjoint i32 %.lobit, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 2, !dbg !14
  %16 = and i32 %15, 2044, !dbg !14
  %17 = shl i32 %13, 7, !dbg !15
  %18 = and i32 %15, 124
  %invariant.op = or disjoint i32 %17, %18, !dbg !16
  %19 = lshr i32 %16, 7, !dbg !17
  %20 = mul nuw nsw i32 %19, 526336, !dbg !18
  %.reass = add i32 %20, %invariant.op
  %21 = sext i32 %.reass to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %14) #4, !dbg !20
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !20
  %26 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !20
  %28 = extractelement <2 x bfloat> %25, i64 0, !dbg !20
  %29 = extractelement <2 x bfloat> %25, i64 1, !dbg !20
  %30 = extractelement <2 x bfloat> %27, i64 0, !dbg !20
  %31 = extractelement <2 x bfloat> %27, i64 1, !dbg !20
  %32 = fpext bfloat %28 to float, !dbg !21
  %33 = fpext bfloat %29 to float, !dbg !21
  %34 = fpext bfloat %30 to float, !dbg !21
  %35 = fpext bfloat %31 to float, !dbg !21
  %36 = select i1 %14, float %32, float 0x7FF0000000000000, !dbg !22
  %37 = select i1 %14, float %33, float 0x7FF0000000000000, !dbg !22
  %38 = select i1 %14, float %34, float 0x7FF0000000000000, !dbg !22
  %39 = select i1 %14, float %32, float 0xFFF0000000000000, !dbg !23
  %40 = select i1 %14, float %33, float 0xFFF0000000000000, !dbg !23
  %41 = select i1 %14, float %34, float 0xFFF0000000000000, !dbg !23
  %42 = or disjoint i32 %16, 2048, !dbg !24
  %43 = icmp samesign ult i32 %42, 3072, !dbg !25
  %44 = lshr i32 %42, 7, !dbg !17
  %45 = mul nuw nsw i32 %44, 526336, !dbg !18
  %.reass.1 = add i32 %45, %invariant.op
  %46 = sext i32 %.reass.1 to i64, !dbg !19
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !19
  %48 = and i1 %14, %43, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %47, i1 %48) #4, !dbg !20
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !20
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !20
  %52 = extractvalue { i32, i32 } %49, 1, !dbg !20
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !20
  %54 = extractelement <2 x bfloat> %51, i64 0, !dbg !20
  %55 = extractelement <2 x bfloat> %51, i64 1, !dbg !20
  %56 = extractelement <2 x bfloat> %53, i64 0, !dbg !20
  %57 = extractelement <2 x bfloat> %53, i64 1, !dbg !20
  %58 = fpext bfloat %54 to float, !dbg !21
  %59 = fpext bfloat %55 to float, !dbg !21
  %60 = fpext bfloat %56 to float, !dbg !21
  %61 = fpext bfloat %57 to float, !dbg !21
  %62 = fcmp olt float %36, %58, !dbg !27
  %63 = fcmp olt float %37, %59, !dbg !27
  %64 = fcmp olt float %38, %60, !dbg !27
  %65 = fcmp uno float %36, 0.000000e+00, !dbg !31
  %66 = fcmp uno float %37, 0.000000e+00, !dbg !31
  %67 = fcmp uno float %38, 0.000000e+00, !dbg !31
  %68 = or i1 %65, %62, !dbg !32
  %69 = or i1 %66, %63, !dbg !32
  %70 = or i1 %67, %64, !dbg !32
  %71 = select i1 %68, float %36, float %58, !dbg !33
  %72 = select i1 %69, float %37, float %59, !dbg !33
  %73 = select i1 %70, float %38, float %60, !dbg !33
  %74 = select i1 %48, float %72, float %37, !dbg !22
  %75 = select i1 %48, float %73, float %38, !dbg !22
  %76 = fcmp ogt float %39, %58, !dbg !34
  %77 = fcmp ogt float %40, %59, !dbg !34
  %78 = fcmp ogt float %41, %60, !dbg !34
  %79 = fcmp uno float %39, 0.000000e+00, !dbg !36
  %80 = fcmp uno float %40, 0.000000e+00, !dbg !36
  %81 = fcmp uno float %41, 0.000000e+00, !dbg !36
  %82 = or i1 %79, %76, !dbg !37
  %83 = or i1 %80, %77, !dbg !37
  %84 = or i1 %81, %78, !dbg !37
  %85 = select i1 %82, float %39, float %58, !dbg !38
  %86 = select i1 %83, float %40, float %59, !dbg !38
  %87 = select i1 %84, float %41, float %60, !dbg !38
  %88 = select i1 %48, float %86, float %40, !dbg !23
  %89 = select i1 %48, float %87, float %41, !dbg !23
  %90 = lshr i32 %10, 5, !dbg !11
  %91 = and i32 %10, 1, !dbg !11
  %92 = or disjoint i32 %9, %91, !dbg !12
  %93 = icmp slt i32 %92, 512, !dbg !13
  %94 = insertelement <2 x i1> poison, i1 %48, i64 0, !dbg !22
  %95 = insertelement <2 x i1> %94, i1 %14, i64 1, !dbg !22
  %96 = insertelement <2 x float> poison, float %71, i64 0, !dbg !22
  %97 = insertelement <2 x float> %96, float %35, i64 1, !dbg !22
  %98 = insertelement <2 x float> <float poison, float 0x7FF0000000000000>, float %36, i64 0, !dbg !22
  %99 = select <2 x i1> %95, <2 x float> %97, <2 x float> %98, !dbg !22
  %100 = insertelement <2 x float> poison, float %74, i64 0, !dbg !39
  %101 = insertelement <2 x float> %100, float %61, i64 1, !dbg !39
  %102 = fcmp olt <2 x float> %99, %101, !dbg !39
  %103 = fcmp uno <2 x float> %99, zeroinitializer, !dbg !42
  %104 = or <2 x i1> %103, %102, !dbg !43
  %105 = select <2 x i1> %104, <2 x float> %99, <2 x float> %101, !dbg !44
  %106 = extractelement <2 x float> %105, i64 0, !dbg !42
  %107 = fcmp olt float %106, %75, !dbg !39
  %108 = fcmp uno float %106, 0.000000e+00, !dbg !42
  %109 = or i1 %107, %108, !dbg !43
  %110 = insertelement <2 x i1> poison, i1 %109, i64 0, !dbg !44
  %111 = insertelement <2 x i1> %110, i1 %48, i64 1, !dbg !44
  %112 = insertelement <2 x float> %99, float %75, i64 0, !dbg !44
  %113 = select <2 x i1> %111, <2 x float> %105, <2 x float> %112, !dbg !44
  %114 = extractelement <2 x float> %113, i64 0, !dbg !44
  %115 = extractelement <2 x float> %113, i64 1, !dbg !39
  %116 = fcmp olt float %114, %115, !dbg !39
  %117 = fcmp uno float %114, 0.000000e+00, !dbg !42
  %118 = or i1 %116, %117, !dbg !43
  %119 = select i1 %118, float %114, float %115, !dbg !44
  %120 = bitcast float %119 to i32, !dbg !45
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !45
  %122 = bitcast i32 %121 to float, !dbg !45
  %123 = fcmp olt float %119, %122, !dbg !39
  %124 = fcmp uno float %119, 0.000000e+00, !dbg !42
  %125 = or i1 %124, %123, !dbg !43
  %126 = select i1 %125, float %119, float %122, !dbg !44
  %127 = bitcast float %126 to i32, !dbg !45
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !45
  %129 = bitcast i32 %128 to float, !dbg !45
  %130 = fcmp olt float %126, %129, !dbg !39
  %131 = fcmp uno float %126, 0.000000e+00, !dbg !42
  %132 = or i1 %130, %131, !dbg !43
  %133 = select i1 %132, float %126, float %129, !dbg !44
  %134 = bitcast float %133 to i32, !dbg !45
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !45
  %136 = bitcast i32 %135 to float, !dbg !45
  %137 = fcmp olt float %133, %136, !dbg !39
  %138 = fcmp uno float %133, 0.000000e+00, !dbg !42
  %139 = or i1 %137, %138, !dbg !43
  %140 = select i1 %139, float %133, float %136, !dbg !44
  %141 = bitcast float %140 to i32, !dbg !45
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !45
  %143 = bitcast i32 %142 to float, !dbg !45
  %144 = fcmp olt float %140, %143, !dbg !39
  %145 = fcmp uno float %140, 0.000000e+00, !dbg !42
  %146 = or i1 %144, %145, !dbg !43
  %147 = select i1 %146, float %140, float %143, !dbg !44
  %148 = bitcast float %147 to i32, !dbg !45
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !45
  %150 = bitcast i32 %149 to float, !dbg !45
  %151 = fcmp olt float %147, %150, !dbg !39
  %152 = fcmp uno float %147, 0.000000e+00, !dbg !42
  %153 = or i1 %151, %152, !dbg !43
  %154 = and i32 %90, 15, !dbg !45
  %155 = icmp eq i32 %12, 0, !dbg !45
  %156 = shl nuw nsw i32 %.lobit, 4, !dbg !45
  %157 = or disjoint i32 %156, %154, !dbg !45
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !45
  %159 = select i1 %153, i32 %148, i32 %149, !dbg !44
  %160 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %160, i1 %155) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %161 = icmp slt i32 %10, 32, !dbg !45
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !45
  %163 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %162, i1 %161) #4, !dbg !45
  %164 = bitcast i32 %163 to float, !dbg !45
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !45
  %166 = bitcast i32 %165 to float, !dbg !45
  %167 = fcmp olt float %164, %166, !dbg !39
  %168 = fcmp uno float %164, 0.000000e+00, !dbg !42
  %169 = or i1 %168, %167, !dbg !43
  %170 = select i1 %169, float %164, float %166, !dbg !44
  %171 = bitcast float %170 to i32, !dbg !45
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !45
  %173 = bitcast i32 %172 to float, !dbg !45
  %174 = fcmp olt float %170, %173, !dbg !39
  %175 = fcmp uno float %170, 0.000000e+00, !dbg !42
  %176 = or i1 %174, %175, !dbg !43
  %177 = select i1 %176, float %170, float %173, !dbg !44
  %178 = bitcast float %177 to i32, !dbg !45
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !45
  %180 = bitcast i32 %179 to float, !dbg !45
  %181 = fcmp olt float %177, %180, !dbg !39
  %182 = fcmp uno float %177, 0.000000e+00, !dbg !42
  %183 = or i1 %181, %182, !dbg !43
  %184 = select i1 %183, float %177, float %180, !dbg !44
  %185 = bitcast float %184 to i32, !dbg !45
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !45
  %187 = bitcast i32 %186 to float, !dbg !45
  %188 = fcmp olt float %184, %187, !dbg !39
  %189 = fcmp uno float %184, 0.000000e+00, !dbg !42
  %190 = or i1 %188, %189, !dbg !43
  %191 = and i32 %10, 15, !dbg !45
  %192 = icmp eq i32 %191, 0, !dbg !45
  %193 = and i1 %161, %192, !dbg !45
  %194 = select i1 %190, i32 %185, i32 %186, !dbg !44
  %195 = insertelement <1 x i32> poison, i32 %194, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %195, i1 %193) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !45
  %197 = load float, ptr addrspace(3) %196, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %198 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !46
  %199 = bitcast float %197 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %200 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %91, !dbg !46
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %202 = insertelement <2 x float> poison, float %85, i64 0, !dbg !23
  %203 = insertelement <2 x float> %202, float %35, i64 1, !dbg !23
  %204 = insertelement <2 x float> <float poison, float 0xFFF0000000000000>, float %39, i64 0, !dbg !23
  %205 = select <2 x i1> %95, <2 x float> %203, <2 x float> %204, !dbg !23
  %206 = insertelement <2 x float> poison, float %88, i64 0, !dbg !49
  %207 = insertelement <2 x float> %206, float %61, i64 1, !dbg !49
  %208 = fcmp ogt <2 x float> %205, %207, !dbg !49
  %209 = fcmp uno <2 x float> %205, zeroinitializer, !dbg !50
  %210 = or <2 x i1> %209, %208, !dbg !51
  %211 = select <2 x i1> %210, <2 x float> %205, <2 x float> %207, !dbg !52
  %212 = extractelement <2 x float> %211, i64 0, !dbg !50
  %213 = fcmp ogt float %212, %89, !dbg !49
  %214 = fcmp uno float %212, 0.000000e+00, !dbg !50
  %215 = or i1 %213, %214, !dbg !51
  %216 = insertelement <2 x i1> poison, i1 %215, i64 0, !dbg !52
  %217 = insertelement <2 x i1> %216, i1 %48, i64 1, !dbg !52
  %218 = insertelement <2 x float> %205, float %89, i64 0, !dbg !52
  %219 = select <2 x i1> %217, <2 x float> %211, <2 x float> %218, !dbg !52
  %220 = extractelement <2 x float> %219, i64 0, !dbg !52
  %221 = extractelement <2 x float> %219, i64 1, !dbg !49
  %222 = fcmp ogt float %220, %221, !dbg !49
  %223 = fcmp uno float %220, 0.000000e+00, !dbg !50
  %224 = or i1 %222, %223, !dbg !51
  %225 = select i1 %224, float %220, float %221, !dbg !52
  %226 = bitcast float %225 to i32, !dbg !47
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !47
  %228 = bitcast i32 %227 to float, !dbg !47
  %229 = fcmp ogt float %225, %228, !dbg !49
  %230 = fcmp uno float %225, 0.000000e+00, !dbg !50
  %231 = or i1 %230, %229, !dbg !51
  %232 = select i1 %231, float %225, float %228, !dbg !52
  %233 = bitcast float %232 to i32, !dbg !47
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !47
  %235 = bitcast i32 %234 to float, !dbg !47
  %236 = fcmp ogt float %232, %235, !dbg !49
  %237 = fcmp uno float %232, 0.000000e+00, !dbg !50
  %238 = or i1 %236, %237, !dbg !51
  %239 = select i1 %238, float %232, float %235, !dbg !52
  %240 = bitcast float %239 to i32, !dbg !47
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !47
  %242 = bitcast i32 %241 to float, !dbg !47
  %243 = fcmp ogt float %239, %242, !dbg !49
  %244 = fcmp uno float %239, 0.000000e+00, !dbg !50
  %245 = or i1 %243, %244, !dbg !51
  %246 = select i1 %245, float %239, float %242, !dbg !52
  %247 = bitcast float %246 to i32, !dbg !47
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !47
  %249 = bitcast i32 %248 to float, !dbg !47
  %250 = fcmp ogt float %246, %249, !dbg !49
  %251 = fcmp uno float %246, 0.000000e+00, !dbg !50
  %252 = or i1 %250, %251, !dbg !51
  %253 = select i1 %252, float %246, float %249, !dbg !52
  %254 = bitcast float %253 to i32, !dbg !47
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !47
  %256 = bitcast i32 %255 to float, !dbg !47
  %257 = fcmp ogt float %253, %256, !dbg !49
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !50
  %259 = or i1 %257, %258, !dbg !51
  %260 = select i1 %259, i32 %254, i32 %255, !dbg !52
  %261 = insertelement <1 x i32> poison, i32 %260, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %261, i1 %155) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %262 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %162, i1 %161) #4, !dbg !47
  %263 = bitcast i32 %262 to float, !dbg !47
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !47
  %265 = bitcast i32 %264 to float, !dbg !47
  %266 = fcmp ogt float %263, %265, !dbg !49
  %267 = fcmp uno float %263, 0.000000e+00, !dbg !50
  %268 = or i1 %267, %266, !dbg !51
  %269 = select i1 %268, float %263, float %265, !dbg !52
  %270 = bitcast float %269 to i32, !dbg !47
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !47
  %272 = bitcast i32 %271 to float, !dbg !47
  %273 = fcmp ogt float %269, %272, !dbg !49
  %274 = fcmp uno float %269, 0.000000e+00, !dbg !50
  %275 = or i1 %273, %274, !dbg !51
  %276 = select i1 %275, float %269, float %272, !dbg !52
  %277 = bitcast float %276 to i32, !dbg !47
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !47
  %279 = bitcast i32 %278 to float, !dbg !47
  %280 = fcmp ogt float %276, %279, !dbg !49
  %281 = fcmp uno float %276, 0.000000e+00, !dbg !50
  %282 = or i1 %280, %281, !dbg !51
  %283 = select i1 %282, float %276, float %279, !dbg !52
  %284 = bitcast float %283 to i32, !dbg !47
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !47
  %286 = bitcast i32 %285 to float, !dbg !47
  %287 = fcmp ogt float %283, %286, !dbg !49
  %288 = fcmp uno float %283, 0.000000e+00, !dbg !50
  %289 = or i1 %287, %288, !dbg !51
  %290 = select i1 %289, i32 %284, i32 %285, !dbg !52
  %291 = insertelement <1 x i32> poison, i32 %290, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %291, i1 %193) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %292 = load float, ptr addrspace(3) %196, align 16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %293 = bitcast float %292 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %293, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %294 = load float, ptr addrspace(3) %200, align 4, !dbg !53
  %295 = sext i32 %92 to i64, !dbg !54
  %296 = getelementptr bfloat, ptr addrspace(1) %1, i64 %295, !dbg !54
  %297 = fptrunc float %201 to bfloat, !dbg !46
  %298 = and i32 %10, 1022, !dbg !46
  %299 = icmp eq i32 %298, 0, !dbg !46
  %300 = bitcast bfloat %297 to i16, !dbg !46
  %301 = and i1 %299, %93, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %300, ptr addrspace(1) %296, i1 %301) #4, !dbg !46
  %302 = getelementptr bfloat, ptr addrspace(1) %2, i64 %295, !dbg !55
  %303 = fptrunc float %294 to bfloat, !dbg !53
  %304 = bitcast bfloat %303 to i16, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %304, ptr addrspace(1) %302, i1 %301) #4, !dbg !53
  %.inv = fcmp oge float %197, 0.000000e+00, !dbg !56
  %305 = select i1 %.inv, float 0.000000e+00, float %197, !dbg !56
  %306 = fsub float 0.000000e+00, %305, !dbg !58
  %.inv2 = fcmp ole float %292, 0.000000e+00, !dbg !59
  %307 = select i1 %.inv2, float 0.000000e+00, float %292, !dbg !59
  %308 = fcmp ogt float %306, %307, !dbg !61
  %309 = fcmp uno float %306, 0.000000e+00, !dbg !63
  %310 = or i1 %309, %308, !dbg !64
  %311 = select i1 %310, float %306, float %307, !dbg !65
  %312 = fmul float %311, 0x3F80204080000000, !dbg !66
  %313 = fcmp ogt float %312, 0x3EE4F8B580000000, !dbg !67
  %314 = fcmp uno float %312, 0.000000e+00, !dbg !69
  %315 = or i1 %313, %314, !dbg !70
  %316 = select i1 %315, float %312, float 0x3EE4F8B580000000, !dbg !71
  %317 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %316), !dbg !72
  %318 = mul i32 %13, 3072, !dbg !73
  %319 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %14) #4, !dbg !74
  %320 = extractvalue { i32, i32 } %319, 0, !dbg !74
  %321 = bitcast i32 %320 to <2 x bfloat>, !dbg !74
  %322 = extractvalue { i32, i32 } %319, 1, !dbg !74
  %323 = bitcast i32 %322 to <2 x bfloat>, !dbg !74
  %324 = extractelement <2 x bfloat> %321, i64 0, !dbg !74
  %325 = extractelement <2 x bfloat> %321, i64 1, !dbg !74
  %326 = extractelement <2 x bfloat> %323, i64 0, !dbg !74
  %327 = extractelement <2 x bfloat> %323, i64 1, !dbg !74
  %328 = fpext bfloat %324 to float, !dbg !75
  %329 = fpext bfloat %325 to float, !dbg !75
  %330 = fpext bfloat %326 to float, !dbg !75
  %331 = fpext bfloat %327 to float, !dbg !75
  %332 = fmul float %317, %328, !dbg !76
  %333 = fmul float %317, %329, !dbg !76
  %334 = fmul float %317, %330, !dbg !76
  %335 = fmul float %317, %331, !dbg !76
  %336 = tail call float @llvm.nvvm.round.f(float %332) #4, !dbg !77
  %337 = tail call float @llvm.nvvm.round.f(float %333) #4, !dbg !77
  %338 = tail call float @llvm.nvvm.round.f(float %334) #4, !dbg !77
  %339 = tail call float @llvm.nvvm.round.f(float %335) #4, !dbg !77
  %340 = insertelement <4 x float> poison, float %336, i64 0, !dbg !78
  %341 = insertelement <4 x float> %340, float %337, i64 1, !dbg !78
  %342 = insertelement <4 x float> %341, float %338, i64 2, !dbg !78
  %343 = insertelement <4 x float> %342, float %339, i64 3, !dbg !78
  %344 = fcmp ogt <4 x float> %343, splat (float -1.270000e+02), !dbg !78
  %345 = fcmp uno <4 x float> %343, zeroinitializer, !dbg !80
  %346 = or <4 x i1> %344, %345, !dbg !81
  %347 = select <4 x i1> %346, <4 x float> %343, <4 x float> splat (float -1.270000e+02), !dbg !82
  %348 = fcmp olt <4 x float> %347, splat (float 1.270000e+02), !dbg !83
  %349 = fcmp uno <4 x float> %347, zeroinitializer, !dbg !85
  %350 = or <4 x i1> %348, %349, !dbg !86
  %351 = fptosi <4 x float> %347 to <4 x i8>, !dbg !87
  %352 = select <4 x i1> %350, <4 x i8> %351, <4 x i8> splat (i8 127), !dbg !88
  %353 = add i32 %16, %318, !dbg !89
  %354 = sext i32 %353 to i64, !dbg !90
  %355 = getelementptr i8, ptr addrspace(1) %3, i64 %354, !dbg !90
  %356 = bitcast <4 x i8> %352 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %355, i1 %14) #4, !dbg !91
  %357 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %47, i1 %48) #4, !dbg !74
  %358 = extractvalue { i32, i32 } %357, 0, !dbg !74
  %359 = bitcast i32 %358 to <2 x bfloat>, !dbg !74
  %360 = extractvalue { i32, i32 } %357, 1, !dbg !74
  %361 = bitcast i32 %360 to <2 x bfloat>, !dbg !74
  %362 = extractelement <2 x bfloat> %359, i64 0, !dbg !74
  %363 = extractelement <2 x bfloat> %359, i64 1, !dbg !74
  %364 = extractelement <2 x bfloat> %361, i64 0, !dbg !74
  %365 = extractelement <2 x bfloat> %361, i64 1, !dbg !74
  %366 = fpext bfloat %362 to float, !dbg !75
  %367 = fpext bfloat %363 to float, !dbg !75
  %368 = fpext bfloat %364 to float, !dbg !75
  %369 = fpext bfloat %365 to float, !dbg !75
  %370 = fmul float %317, %366, !dbg !76
  %371 = fmul float %317, %367, !dbg !76
  %372 = fmul float %317, %368, !dbg !76
  %373 = fmul float %317, %369, !dbg !76
  %374 = tail call float @llvm.nvvm.round.f(float %370) #4, !dbg !77
  %375 = tail call float @llvm.nvvm.round.f(float %371) #4, !dbg !77
  %376 = tail call float @llvm.nvvm.round.f(float %372) #4, !dbg !77
  %377 = tail call float @llvm.nvvm.round.f(float %373) #4, !dbg !77
  %378 = insertelement <4 x float> poison, float %374, i64 0, !dbg !78
  %379 = insertelement <4 x float> %378, float %375, i64 1, !dbg !78
  %380 = insertelement <4 x float> %379, float %376, i64 2, !dbg !78
  %381 = insertelement <4 x float> %380, float %377, i64 3, !dbg !78
  %382 = fcmp ogt <4 x float> %381, splat (float -1.270000e+02), !dbg !78
  %383 = fcmp uno <4 x float> %381, zeroinitializer, !dbg !80
  %384 = or <4 x i1> %382, %383, !dbg !81
  %385 = select <4 x i1> %384, <4 x float> %381, <4 x float> splat (float -1.270000e+02), !dbg !82
  %386 = fcmp olt <4 x float> %385, splat (float 1.270000e+02), !dbg !83
  %387 = fcmp uno <4 x float> %385, zeroinitializer, !dbg !85
  %388 = or <4 x i1> %386, %387, !dbg !86
  %389 = fptosi <4 x float> %385 to <4 x i8>, !dbg !87
  %390 = select <4 x i1> %388, <4 x i8> %389, <4 x i8> splat (i8 127), !dbg !88
  %391 = add i32 %42, %318, !dbg !89
  %392 = sext i32 %391 to i64, !dbg !90
  %393 = getelementptr i8, ptr addrspace(1) %3, i64 %392, !dbg !90
  %394 = bitcast <4 x i8> %390 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %393, i1 %48) #4, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 40, column: 48, scope: !6)
!23 = !DILocation(line: 42, column: 48, scope: !6)
!24 = !DILocation(line: 32, column: 31, scope: !6)
!25 = !DILocation(line: 33, column: 29, scope: !6)
!26 = !DILocation(line: 37, column: 91, scope: !6)
!27 = !DILocation(line: 94, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 39, column: 45, scope: !6)
!31 = !DILocation(line: 96, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 96, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 97, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !35)
!35 = !DILocation(line: 41, column: 45, scope: !6)
!36 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !35)
!38 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !35)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !41)
!40 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!41 = !DILocation(line: 43, column: 38, scope: !6)
!42 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !41)
!44 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !41)
!45 = !DILocation(line: 110, column: 29, scope: !28, inlinedAt: !41)
!46 = !DILocation(line: 45, column: 36, scope: !6)
!47 = !DILocation(line: 115, column: 29, scope: !28, inlinedAt: !48)
!48 = !DILocation(line: 44, column: 38, scope: !6)
!49 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !48)
!50 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !48)
!51 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !48)
!52 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !48)
!53 = !DILocation(line: 46, column: 36, scope: !6)
!54 = !DILocation(line: 45, column: 25, scope: !6)
!55 = !DILocation(line: 46, column: 25, scope: !6)
!56 = !DILocation(line: 97, column: 29, scope: !28, inlinedAt: !57)
!57 = !DILocation(line: 55, column: 44, scope: !6)
!58 = !DILocation(line: 56, column: 16, scope: !6)
!59 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !60)
!60 = !DILocation(line: 57, column: 45, scope: !6)
!61 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !62)
!62 = !DILocation(line: 58, column: 45, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !62)
!65 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !62)
!66 = !DILocation(line: 60, column: 24, scope: !6)
!67 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !68)
!68 = !DILocation(line: 63, column: 46, scope: !6)
!69 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !68)
!70 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !68)
!71 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !68)
!72 = !DILocation(line: 66, column: 25, scope: !6)
!73 = !DILocation(line: 78, column: 41, scope: !6)
!74 = !DILocation(line: 53, column: 83, scope: !6)
!75 = !DILocation(line: 53, column: 145, scope: !6)
!76 = !DILocation(line: 69, column: 23, scope: !6)
!77 = !DILocation(line: 70, column: 36, scope: !6)
!78 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !79)
!79 = !DILocation(line: 73, column: 46, scope: !6)
!80 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !79)
!81 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !79)
!82 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !79)
!83 = !DILocation(line: 94, column: 15, scope: !28, inlinedAt: !84)
!84 = !DILocation(line: 75, column: 46, scope: !6)
!85 = !DILocation(line: 96, column: 21, scope: !28, inlinedAt: !84)
!86 = !DILocation(line: 96, column: 16, scope: !28, inlinedAt: !84)
!87 = !DILocation(line: 77, column: 25, scope: !6)
!88 = !DILocation(line: 97, column: 29, scope: !28, inlinedAt: !84)
!89 = !DILocation(line: 78, column: 36, scope: !6)
!90 = !DILocation(line: 78, column: 29, scope: !6)
!91 = !DILocation(line: 78, column: 53, scope: !6)
!92 = !DILocation(line: 47, column: 4, scope: !6)
