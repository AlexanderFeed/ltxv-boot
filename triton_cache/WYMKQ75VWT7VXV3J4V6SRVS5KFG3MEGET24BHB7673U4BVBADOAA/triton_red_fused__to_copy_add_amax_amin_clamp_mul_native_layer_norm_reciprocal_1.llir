; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
.peel.begin:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = icmp slt i32 %19, 4112, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 31, !dbg !11
  %23 = shl i32 %21, 3, !dbg !11
  %24 = and i32 %23, 1016, !dbg !11
  %25 = mul i32 %19, 3072, !dbg !12
  %26 = or disjoint i32 %24, %25
  %27 = sext i32 %26 to i64, !dbg !13
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !13
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %20) #5, !dbg !14
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !14
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !14
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !14
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !14
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !14
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !14
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !14
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !14
  %38 = extractelement <2 x bfloat> %31, i64 0, !dbg !14
  %39 = extractelement <2 x bfloat> %31, i64 1, !dbg !14
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !14
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !14
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !14
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !14
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !14
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !14
  %46 = fpext bfloat %38 to float, !dbg !15
  %47 = fpext bfloat %39 to float, !dbg !15
  %48 = fpext bfloat %40 to float, !dbg !15
  %49 = fpext bfloat %41 to float, !dbg !15
  %50 = fpext bfloat %42 to float, !dbg !15
  %51 = fpext bfloat %43 to float, !dbg !15
  %52 = fpext bfloat %44 to float, !dbg !15
  %53 = fpext bfloat %45 to float, !dbg !15
  %54 = select i1 %20, float %46, float 0.000000e+00, !dbg !16
  %55 = select i1 %20, float %47, float 0.000000e+00, !dbg !16
  %56 = select i1 %20, float %48, float 0.000000e+00, !dbg !16
  %57 = select i1 %20, float %49, float 0.000000e+00, !dbg !16
  %58 = select i1 %20, float %50, float 0.000000e+00, !dbg !16
  %59 = select i1 %20, float %51, float 0.000000e+00, !dbg !16
  %60 = select i1 %20, float %52, float 0.000000e+00, !dbg !16
  %61 = select i1 %20, float %53, float 0.000000e+00, !dbg !16
  %62 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %63 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %64 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %65 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %66 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %67 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %68 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  %69 = select i1 %20, float 1.000000e+00, float 0.000000e+00, !dbg !17
  br label %._crit_edge, !dbg !18

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 1024, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %70 = phi float [ %62, %.peel.begin ], [ %195, %._crit_edge ]
  %71 = phi float [ %63, %.peel.begin ], [ %196, %._crit_edge ]
  %72 = phi float [ %64, %.peel.begin ], [ %197, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %.peel.begin ], [ %187, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %.peel.begin ], [ %188, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %.peel.begin ], [ %189, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ %54, %.peel.begin ], [ %179, %._crit_edge ]
  %87 = phi float [ %55, %.peel.begin ], [ %180, %._crit_edge ]
  %88 = phi float [ %56, %.peel.begin ], [ %181, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %95 = add i32 %26, %94, !dbg !19
  %96 = sext i32 %95 to i64, !dbg !13
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !13
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %97, i1 %20) #5, !dbg !14
  %99 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !14
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !14
  %101 = extractelement <2 x bfloat> %100, i64 1, !dbg !14
  %102 = fpext bfloat %101 to float, !dbg !15
  %103 = extractelement <2 x bfloat> %100, i64 0, !dbg !14
  %104 = fpext bfloat %103 to float, !dbg !15
  %105 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !14
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !14
  %107 = extractelement <2 x bfloat> %106, i64 1, !dbg !14
  %108 = fpext bfloat %107 to float, !dbg !15
  %109 = extractelement <2 x bfloat> %106, i64 0, !dbg !14
  %110 = fpext bfloat %109 to float, !dbg !15
  %111 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !14
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !14
  %113 = extractelement <2 x bfloat> %112, i64 1, !dbg !14
  %114 = fpext bfloat %113 to float, !dbg !15
  %115 = extractelement <2 x bfloat> %112, i64 0, !dbg !14
  %116 = fpext bfloat %115 to float, !dbg !15
  %117 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !14
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !14
  %119 = extractelement <2 x bfloat> %118, i64 1, !dbg !14
  %120 = fpext bfloat %119 to float, !dbg !15
  %121 = extractelement <2 x bfloat> %118, i64 0, !dbg !14
  %122 = fpext bfloat %121 to float, !dbg !15
  %123 = fsub float %122, %86, !dbg !20
  %124 = fsub float %120, %87, !dbg !20
  %125 = fsub float %116, %88, !dbg !20
  %126 = fsub float %114, %89, !dbg !20
  %127 = fsub float %110, %90, !dbg !20
  %128 = fsub float %108, %91, !dbg !20
  %129 = fsub float %104, %92, !dbg !20
  %130 = fsub float %102, %93, !dbg !20
  %131 = fadd float %70, 1.000000e+00, !dbg !24
  %132 = fadd float %71, 1.000000e+00, !dbg !24
  %133 = fadd float %72, 1.000000e+00, !dbg !24
  %134 = fadd float %73, 1.000000e+00, !dbg !24
  %135 = fadd float %74, 1.000000e+00, !dbg !24
  %136 = fadd float %75, 1.000000e+00, !dbg !24
  %137 = fadd float %76, 1.000000e+00, !dbg !24
  %138 = fadd float %77, 1.000000e+00, !dbg !24
  %139 = tail call float @llvm.nvvm.div.full(float %123, float %131), !dbg !25
  %140 = tail call float @llvm.nvvm.div.full(float %124, float %132), !dbg !25
  %141 = tail call float @llvm.nvvm.div.full(float %125, float %133), !dbg !25
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !25
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !25
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !25
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !25
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !25
  %147 = fadd float %86, %139, !dbg !26
  %148 = fadd float %87, %140, !dbg !26
  %149 = fadd float %88, %141, !dbg !26
  %150 = fadd float %89, %142, !dbg !26
  %151 = fadd float %90, %143, !dbg !26
  %152 = fadd float %91, %144, !dbg !26
  %153 = fadd float %92, %145, !dbg !26
  %154 = fadd float %93, %146, !dbg !26
  %155 = fsub float %122, %147, !dbg !27
  %156 = fsub float %120, %148, !dbg !27
  %157 = fsub float %116, %149, !dbg !27
  %158 = fsub float %114, %150, !dbg !27
  %159 = fsub float %110, %151, !dbg !27
  %160 = fsub float %108, %152, !dbg !27
  %161 = fsub float %104, %153, !dbg !27
  %162 = fsub float %102, %154, !dbg !27
  %163 = fmul float %123, %155, !dbg !28
  %164 = fmul float %124, %156, !dbg !28
  %165 = fmul float %125, %157, !dbg !28
  %166 = fmul float %126, %158, !dbg !28
  %167 = fmul float %127, %159, !dbg !28
  %168 = fmul float %128, %160, !dbg !28
  %169 = fmul float %129, %161, !dbg !28
  %170 = fmul float %130, %162, !dbg !28
  %171 = fadd float %78, %163, !dbg !29
  %172 = fadd float %79, %164, !dbg !29
  %173 = fadd float %80, %165, !dbg !29
  %174 = fadd float %81, %166, !dbg !29
  %175 = fadd float %82, %167, !dbg !29
  %176 = fadd float %83, %168, !dbg !29
  %177 = fadd float %84, %169, !dbg !29
  %178 = fadd float %85, %170, !dbg !29
  %179 = select i1 %20, float %147, float %86, !dbg !16
  %180 = select i1 %20, float %148, float %87, !dbg !16
  %181 = select i1 %20, float %149, float %88, !dbg !16
  %182 = select i1 %20, float %150, float %89, !dbg !16
  %183 = select i1 %20, float %151, float %90, !dbg !16
  %184 = select i1 %20, float %152, float %91, !dbg !16
  %185 = select i1 %20, float %153, float %92, !dbg !16
  %186 = select i1 %20, float %154, float %93, !dbg !16
  %187 = select i1 %20, float %171, float %78, !dbg !30
  %188 = select i1 %20, float %172, float %79, !dbg !30
  %189 = select i1 %20, float %173, float %80, !dbg !30
  %190 = select i1 %20, float %174, float %81, !dbg !30
  %191 = select i1 %20, float %175, float %82, !dbg !30
  %192 = select i1 %20, float %176, float %83, !dbg !30
  %193 = select i1 %20, float %177, float %84, !dbg !30
  %194 = select i1 %20, float %178, float %85, !dbg !30
  %195 = select i1 %20, float %131, float %70, !dbg !17
  %196 = select i1 %20, float %132, float %71, !dbg !17
  %197 = select i1 %20, float %133, float %72, !dbg !17
  %198 = select i1 %20, float %134, float %73, !dbg !17
  %199 = select i1 %20, float %135, float %74, !dbg !17
  %200 = select i1 %20, float %136, float %75, !dbg !17
  %201 = select i1 %20, float %137, float %76, !dbg !17
  %202 = select i1 %20, float %138, float %77, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !18
  %203 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !18
  br i1 %203, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !18, !llvm.loop !31

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %204 = fadd float %187, %188, !dbg !11
  %205 = lshr i32 %21, 5, !dbg !11
  %206 = fsub float %180, %179, !dbg !33
  %207 = fadd float %195, %196, !dbg !36
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !37
  %209 = tail call float @llvm.nvvm.div.full(float %196, float %207), !dbg !38
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !39
  %211 = fmul float %206, %210, !dbg !40
  %212 = fadd float %179, %211, !dbg !41
  %213 = fmul float %206, %206, !dbg !42
  %214 = fmul float %213, %195, !dbg !43
  %215 = fmul float %214, %210, !dbg !44
  %216 = fadd float %204, %215, !dbg !45
  %217 = fsub float %181, %212, !dbg !33
  %218 = fadd float %197, %207, !dbg !36
  %219 = fcmp oeq float %218, 0.000000e+00, !dbg !37
  %220 = tail call float @llvm.nvvm.div.full(float %197, float %218), !dbg !38
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !39
  %222 = fmul float %221, %217, !dbg !40
  %223 = fadd float %212, %222, !dbg !41
  %224 = fadd float %189, %216, !dbg !46
  %225 = fmul float %217, %217, !dbg !42
  %226 = fmul float %207, %225, !dbg !43
  %227 = fmul float %221, %226, !dbg !44
  %228 = fadd float %224, %227, !dbg !45
  %229 = fsub float %182, %223, !dbg !33
  %230 = fadd float %198, %218, !dbg !36
  %231 = fcmp oeq float %230, 0.000000e+00, !dbg !37
  %232 = tail call float @llvm.nvvm.div.full(float %198, float %230), !dbg !38
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !39
  %234 = fmul float %233, %229, !dbg !40
  %235 = fadd float %223, %234, !dbg !41
  %236 = fadd float %190, %228, !dbg !46
  %237 = fmul float %229, %229, !dbg !42
  %238 = fmul float %218, %237, !dbg !43
  %239 = fmul float %233, %238, !dbg !44
  %240 = fadd float %236, %239, !dbg !45
  %241 = fsub float %183, %235, !dbg !33
  %242 = fadd float %199, %230, !dbg !36
  %243 = fcmp oeq float %242, 0.000000e+00, !dbg !37
  %244 = tail call float @llvm.nvvm.div.full(float %199, float %242), !dbg !38
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !39
  %246 = fmul float %245, %241, !dbg !40
  %247 = fadd float %235, %246, !dbg !41
  %248 = fadd float %191, %240, !dbg !46
  %249 = fmul float %241, %241, !dbg !42
  %250 = fmul float %230, %249, !dbg !43
  %251 = fmul float %245, %250, !dbg !44
  %252 = fadd float %248, %251, !dbg !45
  %253 = fsub float %184, %247, !dbg !33
  %254 = fadd float %200, %242, !dbg !36
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !37
  %256 = tail call float @llvm.nvvm.div.full(float %200, float %254), !dbg !38
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !39
  %258 = fmul float %257, %253, !dbg !40
  %259 = fadd float %247, %258, !dbg !41
  %260 = fadd float %192, %252, !dbg !46
  %261 = fmul float %253, %253, !dbg !42
  %262 = fmul float %242, %261, !dbg !43
  %263 = fmul float %257, %262, !dbg !44
  %264 = fadd float %260, %263, !dbg !45
  %265 = fsub float %185, %259, !dbg !33
  %266 = fadd float %201, %254, !dbg !36
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !37
  %268 = tail call float @llvm.nvvm.div.full(float %201, float %266), !dbg !38
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !39
  %270 = fmul float %269, %265, !dbg !40
  %271 = fadd float %259, %270, !dbg !41
  %272 = fadd float %193, %264, !dbg !46
  %273 = fmul float %265, %265, !dbg !42
  %274 = fmul float %254, %273, !dbg !43
  %275 = fmul float %269, %274, !dbg !44
  %276 = fadd float %272, %275, !dbg !45
  %277 = fsub float %186, %271, !dbg !33
  %278 = fadd float %202, %266, !dbg !36
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !37
  %280 = tail call float @llvm.nvvm.div.full(float %202, float %278), !dbg !38
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !39
  %282 = fmul float %281, %277, !dbg !40
  %283 = fadd float %271, %282, !dbg !41
  %284 = fadd float %194, %276, !dbg !46
  %285 = fmul float %277, %277, !dbg !42
  %286 = fmul float %266, %285, !dbg !43
  %287 = fmul float %281, %286, !dbg !44
  %288 = fadd float %284, %287, !dbg !45
  %289 = bitcast float %283 to i32, !dbg !47
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 16, i32 31), !dbg !47
  %291 = bitcast i32 %290 to float, !dbg !47
  %292 = bitcast float %288 to i32, !dbg !47
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 16, i32 31), !dbg !47
  %294 = bitcast i32 %293 to float, !dbg !47
  %295 = bitcast float %278 to i32, !dbg !47
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !47
  %297 = bitcast i32 %296 to float, !dbg !47
  %298 = fsub float %291, %283, !dbg !33
  %299 = fadd float %278, %297, !dbg !36
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !37
  %301 = tail call float @llvm.nvvm.div.full(float %297, float %299), !dbg !38
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !39
  %303 = fmul float %302, %298, !dbg !40
  %304 = fadd float %283, %303, !dbg !41
  %305 = fadd float %288, %294, !dbg !46
  %306 = fmul float %298, %298, !dbg !42
  %307 = fmul float %278, %306, !dbg !43
  %308 = fmul float %302, %307, !dbg !44
  %309 = fadd float %305, %308, !dbg !45
  %310 = bitcast float %304 to i32, !dbg !47
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !47
  %312 = bitcast i32 %311 to float, !dbg !47
  %313 = bitcast float %309 to i32, !dbg !47
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !47
  %315 = bitcast i32 %314 to float, !dbg !47
  %316 = bitcast float %299 to i32, !dbg !47
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !47
  %318 = bitcast i32 %317 to float, !dbg !47
  %319 = fsub float %312, %304, !dbg !33
  %320 = fadd float %299, %318, !dbg !36
  %321 = fcmp oeq float %320, 0.000000e+00, !dbg !37
  %322 = tail call float @llvm.nvvm.div.full(float %318, float %320), !dbg !38
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !39
  %324 = fmul float %323, %319, !dbg !40
  %325 = fadd float %304, %324, !dbg !41
  %326 = fadd float %309, %315, !dbg !46
  %327 = fmul float %319, %319, !dbg !42
  %328 = fmul float %299, %327, !dbg !43
  %329 = fmul float %323, %328, !dbg !44
  %330 = fadd float %326, %329, !dbg !45
  %331 = bitcast float %325 to i32, !dbg !47
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !47
  %333 = bitcast i32 %332 to float, !dbg !47
  %334 = bitcast float %330 to i32, !dbg !47
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 4, i32 31), !dbg !47
  %336 = bitcast i32 %335 to float, !dbg !47
  %337 = bitcast float %320 to i32, !dbg !47
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !47
  %339 = bitcast i32 %338 to float, !dbg !47
  %340 = fsub float %333, %325, !dbg !33
  %341 = fadd float %320, %339, !dbg !36
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !37
  %343 = tail call float @llvm.nvvm.div.full(float %339, float %341), !dbg !38
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !39
  %345 = fmul float %344, %340, !dbg !40
  %346 = fadd float %325, %345, !dbg !41
  %347 = fadd float %330, %336, !dbg !46
  %348 = fmul float %340, %340, !dbg !42
  %349 = fmul float %320, %348, !dbg !43
  %350 = fmul float %344, %349, !dbg !44
  %351 = fadd float %347, %350, !dbg !45
  %352 = bitcast float %346 to i32, !dbg !47
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !47
  %354 = bitcast i32 %353 to float, !dbg !47
  %355 = bitcast float %351 to i32, !dbg !47
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 2, i32 31), !dbg !47
  %357 = bitcast i32 %356 to float, !dbg !47
  %358 = bitcast float %341 to i32, !dbg !47
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !47
  %360 = bitcast i32 %359 to float, !dbg !47
  %361 = fsub float %354, %346, !dbg !33
  %362 = fadd float %341, %360, !dbg !36
  %363 = fcmp oeq float %362, 0.000000e+00, !dbg !37
  %364 = tail call float @llvm.nvvm.div.full(float %360, float %362), !dbg !38
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !39
  %366 = fmul float %365, %361, !dbg !40
  %367 = fadd float %346, %366, !dbg !41
  %368 = fadd float %351, %357, !dbg !46
  %369 = fmul float %361, %361, !dbg !42
  %370 = fmul float %341, %369, !dbg !43
  %371 = fmul float %365, %370, !dbg !44
  %372 = fadd float %368, %371, !dbg !45
  %373 = bitcast float %367 to i32, !dbg !47
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 1, i32 31), !dbg !47
  %375 = bitcast i32 %374 to float, !dbg !47
  %376 = bitcast float %372 to i32, !dbg !47
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 1, i32 31), !dbg !47
  %378 = bitcast i32 %377 to float, !dbg !47
  %379 = bitcast float %362 to i32, !dbg !47
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !47
  %381 = bitcast i32 %380 to float, !dbg !47
  %382 = fsub float %375, %367, !dbg !33
  %383 = fadd float %362, %381, !dbg !36
  %384 = fcmp oeq float %383, 0.000000e+00, !dbg !37
  %385 = tail call float @llvm.nvvm.div.full(float %381, float %383), !dbg !38
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !39
  %387 = fmul float %386, %382, !dbg !40
  %388 = fadd float %367, %387, !dbg !41
  %389 = fadd float %372, %378, !dbg !46
  %390 = fmul float %382, %382, !dbg !42
  %391 = fmul float %362, %390, !dbg !43
  %392 = fmul float %386, %391, !dbg !44
  %393 = fadd float %389, %392, !dbg !45
  %394 = and i32 %205, 3, !dbg !47
  %395 = icmp eq i32 %22, 0, !dbg !47
  %396 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394, !dbg !47
  %397 = bitcast float %388 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 %395) #5, !dbg !47
  %398 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %394, !dbg !47
  %399 = bitcast float %393 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 %395) #5, !dbg !47
  %400 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %394, !dbg !47
  %401 = bitcast float %383 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 %395) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %402 = icmp slt i32 %21, 4, !dbg !47
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !47
  %404 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %403, i1 %402) #5, !dbg !47
  %405 = bitcast i32 %404 to float, !dbg !47
  %406 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %21, !dbg !47
  %407 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %406, i1 %402) #5, !dbg !47
  %408 = bitcast i32 %407 to float, !dbg !47
  %409 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %21, !dbg !47
  %410 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %409, i1 %402) #5, !dbg !47
  %411 = bitcast i32 %410 to float, !dbg !47
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 2, i32 31), !dbg !47
  %413 = bitcast i32 %412 to float, !dbg !47
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !47
  %415 = bitcast i32 %414 to float, !dbg !47
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 2, i32 31), !dbg !47
  %417 = bitcast i32 %416 to float, !dbg !47
  %418 = fsub float %413, %405, !dbg !33
  %419 = fadd float %411, %417, !dbg !36
  %420 = fcmp oeq float %419, 0.000000e+00, !dbg !37
  %421 = tail call float @llvm.nvvm.div.full(float %417, float %419), !dbg !38
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !39
  %423 = fmul float %418, %422, !dbg !40
  %424 = fadd float %423, %405, !dbg !41
  %425 = fadd float %408, %415, !dbg !46
  %426 = fmul float %418, %418, !dbg !42
  %427 = fmul float %426, %411, !dbg !43
  %428 = fmul float %427, %422, !dbg !44
  %429 = fadd float %425, %428, !dbg !45
  %430 = bitcast float %424 to i32, !dbg !47
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 1, i32 31), !dbg !47
  %432 = bitcast i32 %431 to float, !dbg !47
  %433 = bitcast float %429 to i32, !dbg !47
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 1, i32 31), !dbg !47
  %435 = bitcast i32 %434 to float, !dbg !47
  %436 = bitcast float %419 to i32, !dbg !47
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 1, i32 31), !dbg !47
  %438 = bitcast i32 %437 to float, !dbg !47
  %439 = fsub float %432, %424, !dbg !33
  %440 = fadd float %419, %438, !dbg !36
  %441 = fcmp oeq float %440, 0.000000e+00, !dbg !37
  %442 = tail call float @llvm.nvvm.div.full(float %438, float %440), !dbg !38
  %443 = select i1 %441, float 0.000000e+00, float %442, !dbg !39
  %444 = fmul float %439, %443, !dbg !40
  %445 = fadd float %424, %444, !dbg !41
  %446 = fadd float %429, %435, !dbg !46
  %447 = fmul float %439, %439, !dbg !42
  %448 = fmul float %419, %447, !dbg !43
  %449 = fmul float %443, %448, !dbg !44
  %450 = fadd float %446, %449, !dbg !45
  %451 = and i32 %21, 3, !dbg !47
  %452 = icmp eq i32 %451, 0, !dbg !47
  %453 = and i1 %402, %452, !dbg !47
  %454 = bitcast float %445 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %454, i1 %453) #5, !dbg !47
  %455 = bitcast float %450 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %455, i1 %453) #5, !dbg !47
  %456 = bitcast float %440 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %456, i1 %453) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %457 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %458 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !47
  %459 = tail call float @llvm.nvvm.div.full(float %458, float 3.072000e+03), !dbg !48
  %460 = fadd float %459, 0x3EB0C6F7A0000000, !dbg !49
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i37 = icmp eq i32 %468, 0, !dbg !50
  br i1 %.not.i37, label %471, label %469, !dbg !50

469:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %470 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %460), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

471:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %472 = tail call float @llvm.nvvm.rsqrt.approx.f(float %460), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

__nv_rsqrtf.exit39:                               ; preds = %469, %471
  %.0.i38 = phi float [ %470, %469 ], [ %472, %471 ], !dbg !50
  %473 = zext nneg i32 %24 to i64, !dbg !51
  %474 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !52
  %475 = shufflevector <2 x i1> %474, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !52
  %476 = insertelement <2 x float> poison, float %.0.i38, i64 0, !dbg !53
  %477 = shufflevector <2 x float> %476, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %478 = insertelement <2 x float> poison, float %457, i64 0, !dbg !54
  %479 = shufflevector <2 x float> %478, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %480 = insertelement <8 x i1> poison, i1 %20, i64 0, !dbg !52
  %481 = shufflevector <8 x i1> %480, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !52
  %482 = insertelement <4 x float> poison, float %.0.i38, i64 0, !dbg !53
  %483 = shufflevector <4 x float> %482, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !53
  %484 = insertelement <4 x float> poison, float %457, i64 0, !dbg !54
  %485 = shufflevector <4 x float> %484, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  %486 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !55
  %487 = shufflevector <4 x i1> %486, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  br label %488, !dbg !51

488:                                              ; preds = %__nv_rsqrtf.exit39, %488
  %indvars.iv83 = phi i64 [ 0, %__nv_rsqrtf.exit39 ], [ %indvars.iv.next84, %488 ]
  %489 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %640, %488 ]
  %490 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit39 ], [ %641, %488 ]
  %491 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit39 ], [ %605, %488 ]
  %492 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit39 ], [ %650, %488 ]
  %493 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit39 ], [ %604, %488 ]
  %494 = or disjoint i64 %indvars.iv83, %473, !dbg !56
  %495 = or disjoint i64 %494, 4, !dbg !56
  %496 = trunc nuw nsw i64 %494 to i32, !dbg !57
  %497 = add i32 %25, %496, !dbg !57
  %498 = sext i32 %497 to i64, !dbg !58
  %499 = getelementptr bfloat, ptr addrspace(1) %0, i64 %498, !dbg !58
  %500 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %499, i1 %20) #5, !dbg !59
  %501 = extractvalue { i32, i32, i32, i32 } %500, 0, !dbg !59
  %502 = bitcast i32 %501 to <2 x bfloat>, !dbg !59
  %503 = extractvalue { i32, i32, i32, i32 } %500, 1, !dbg !59
  %504 = bitcast i32 %503 to <2 x bfloat>, !dbg !59
  %505 = extractvalue { i32, i32, i32, i32 } %500, 2, !dbg !59
  %506 = bitcast i32 %505 to <2 x bfloat>, !dbg !59
  %507 = extractvalue { i32, i32, i32, i32 } %500, 3, !dbg !59
  %508 = bitcast i32 %507 to <2 x bfloat>, !dbg !59
  %509 = add nuw nsw i64 %494, 3072, !dbg !60
  %510 = getelementptr float, ptr addrspace(1) %1, i64 %509, !dbg !61
  %511 = getelementptr float, ptr addrspace(1) %1, i64 %495, !dbg !61
  %512 = getelementptr i8, ptr addrspace(1) %511, i64 12288, !dbg !61
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %510, i1 true) #5, !dbg !62
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !62
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !62
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !62
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !62
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %512, i1 true) #5, !dbg !62
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !62
  %520 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !62
  %521 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !62
  %522 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !62
  %523 = getelementptr bfloat, ptr addrspace(1) %2, i64 %509, !dbg !63
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %523, i1 true) #5, !dbg !64
  %525 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !64
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !64
  %527 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !64
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !64
  %529 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !64
  %530 = bitcast i32 %529 to <2 x bfloat>, !dbg !64
  %531 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !64
  %532 = bitcast i32 %531 to <2 x bfloat>, !dbg !64
  %533 = getelementptr float, ptr addrspace(1) %1, i64 %494, !dbg !65
  %534 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %533, i1 true) #5, !dbg !66
  %535 = extractvalue { i32, i32, i32, i32 } %534, 0, !dbg !66
  %536 = extractvalue { i32, i32, i32, i32 } %534, 1, !dbg !66
  %537 = extractvalue { i32, i32, i32, i32 } %534, 2, !dbg !66
  %538 = extractvalue { i32, i32, i32, i32 } %534, 3, !dbg !66
  %539 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %511, i1 true) #5, !dbg !66
  %540 = extractvalue { i32, i32, i32, i32 } %539, 0, !dbg !66
  %541 = extractvalue { i32, i32, i32, i32 } %539, 1, !dbg !66
  %542 = extractvalue { i32, i32, i32, i32 } %539, 2, !dbg !66
  %543 = extractvalue { i32, i32, i32, i32 } %539, 3, !dbg !66
  %544 = getelementptr bfloat, ptr addrspace(1) %2, i64 %494, !dbg !67
  %545 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %544, i1 true) #5, !dbg !68
  %546 = extractvalue { i32, i32, i32, i32 } %545, 0, !dbg !68
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !68
  %548 = extractvalue { i32, i32, i32, i32 } %545, 1, !dbg !68
  %549 = bitcast i32 %548 to <2 x bfloat>, !dbg !68
  %550 = extractvalue { i32, i32, i32, i32 } %545, 2, !dbg !68
  %551 = bitcast i32 %550 to <2 x bfloat>, !dbg !68
  %552 = extractvalue { i32, i32, i32, i32 } %545, 3, !dbg !68
  %553 = bitcast i32 %552 to <2 x bfloat>, !dbg !68
  %554 = fcmp uno <8 x float> %492, zeroinitializer, !dbg !69
  %555 = fcmp uno <4 x float> %493, zeroinitializer, !dbg !71
  %556 = fcmp uno float %489, 0.000000e+00, !dbg !71
  %557 = fcmp uno float %490, 0.000000e+00, !dbg !71
  %558 = fcmp uno <2 x float> %491, zeroinitializer, !dbg !69
  %559 = fpext <2 x bfloat> %502 to <2 x float>, !dbg !73
  %560 = insertelement <2 x i32> poison, i32 %514, i64 0, !dbg !62
  %561 = insertelement <2 x i32> %560, i32 %515, i64 1, !dbg !62
  %562 = bitcast <2 x i32> %561 to <2 x float>, !dbg !62
  %563 = fpext <2 x bfloat> %526 to <2 x float>, !dbg !74
  %564 = insertelement <2 x i32> poison, i32 %535, i64 0, !dbg !66
  %565 = insertelement <2 x i32> %564, i32 %536, i64 1, !dbg !66
  %566 = bitcast <2 x i32> %565 to <2 x float>, !dbg !66
  %567 = fpext <2 x bfloat> %547 to <2 x float>, !dbg !75
  %568 = fsub <2 x float> %559, %479, !dbg !54
  %569 = fmul <2 x float> %477, %568, !dbg !53
  %570 = fadd <2 x float> %562, %563, !dbg !76
  %571 = fadd <2 x float> %570, splat (float 1.000000e+00), !dbg !77
  %572 = fmul <2 x float> %569, %571, !dbg !78
  %573 = fadd <2 x float> %566, %567, !dbg !79
  %574 = fadd <2 x float> %572, %573, !dbg !80
  %575 = fcmp ogt <2 x float> %491, %574, !dbg !81
  %576 = or <2 x i1> %558, %575, !dbg !82
  %577 = select <2 x i1> %576, <2 x float> %491, <2 x float> %574, !dbg !83
  %578 = shufflevector <2 x bfloat> %504, <2 x bfloat> %506, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !73
  %579 = fpext <4 x bfloat> %578 to <4 x float>, !dbg !73
  %580 = insertelement <4 x i32> poison, i32 %516, i64 0, !dbg !62
  %581 = insertelement <4 x i32> %580, i32 %517, i64 1, !dbg !62
  %582 = insertelement <4 x i32> %581, i32 %519, i64 2, !dbg !62
  %583 = insertelement <4 x i32> %582, i32 %520, i64 3, !dbg !62
  %584 = bitcast <4 x i32> %583 to <4 x float>, !dbg !62
  %585 = shufflevector <2 x bfloat> %528, <2 x bfloat> %530, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !74
  %586 = fpext <4 x bfloat> %585 to <4 x float>, !dbg !74
  %587 = insertelement <4 x i32> poison, i32 %537, i64 0, !dbg !66
  %588 = insertelement <4 x i32> %587, i32 %538, i64 1, !dbg !66
  %589 = insertelement <4 x i32> %588, i32 %540, i64 2, !dbg !66
  %590 = insertelement <4 x i32> %589, i32 %541, i64 3, !dbg !66
  %591 = bitcast <4 x i32> %590 to <4 x float>, !dbg !66
  %592 = shufflevector <2 x bfloat> %549, <2 x bfloat> %551, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  %593 = fpext <4 x bfloat> %592 to <4 x float>, !dbg !75
  %594 = fsub <4 x float> %579, %485, !dbg !54
  %595 = fmul <4 x float> %483, %594, !dbg !53
  %596 = fadd <4 x float> %584, %586, !dbg !76
  %597 = fadd <4 x float> %596, splat (float 1.000000e+00), !dbg !77
  %598 = fmul <4 x float> %595, %597, !dbg !78
  %599 = fadd <4 x float> %591, %593, !dbg !79
  %600 = fadd <4 x float> %598, %599, !dbg !80
  %601 = fcmp olt <4 x float> %493, %600, !dbg !84
  %602 = or <4 x i1> %555, %601, !dbg !85
  %603 = select <4 x i1> %602, <4 x float> %493, <4 x float> %600, !dbg !86
  %604 = select <4 x i1> %487, <4 x float> %603, <4 x float> %493, !dbg !55
  %605 = select <2 x i1> %475, <2 x float> %577, <2 x float> %491, !dbg !52
  %606 = getelementptr bfloat, ptr addrspace(1) %3, i64 %498, !dbg !87
  %607 = fptrunc <2 x float> %574 to <2 x bfloat>, !dbg !88
  %608 = extractelement <4 x float> %600, i64 0, !dbg !88
  %609 = fptrunc float %608 to bfloat, !dbg !88
  %610 = extractelement <4 x float> %600, i64 1, !dbg !88
  %611 = fptrunc float %610 to bfloat, !dbg !88
  %612 = extractelement <4 x float> %600, i64 2, !dbg !88
  %613 = fptrunc float %612 to bfloat, !dbg !88
  %614 = extractelement <4 x float> %600, i64 3, !dbg !88
  %615 = fptrunc float %614 to bfloat, !dbg !88
  %616 = fpext <2 x bfloat> %508 to <2 x float>, !dbg !73
  %617 = insertelement <2 x i32> poison, i32 %521, i64 0, !dbg !62
  %618 = insertelement <2 x i32> %617, i32 %522, i64 1, !dbg !62
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !62
  %620 = fpext <2 x bfloat> %532 to <2 x float>, !dbg !74
  %621 = insertelement <2 x i32> poison, i32 %542, i64 0, !dbg !66
  %622 = insertelement <2 x i32> %621, i32 %543, i64 1, !dbg !66
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !66
  %624 = fpext <2 x bfloat> %553 to <2 x float>, !dbg !75
  %625 = fsub <2 x float> %616, %479, !dbg !54
  %626 = fmul <2 x float> %477, %625, !dbg !53
  %627 = fadd <2 x float> %619, %620, !dbg !76
  %628 = fadd <2 x float> %627, splat (float 1.000000e+00), !dbg !77
  %629 = fmul <2 x float> %626, %628, !dbg !78
  %630 = fadd <2 x float> %623, %624, !dbg !79
  %631 = fadd <2 x float> %629, %630, !dbg !80
  %632 = extractelement <2 x float> %631, i64 0, !dbg !86
  %633 = fcmp olt float %489, %632, !dbg !84
  %634 = extractelement <2 x float> %631, i64 1, !dbg !86
  %635 = fcmp olt float %490, %634, !dbg !84
  %636 = or i1 %556, %633, !dbg !85
  %637 = or i1 %557, %635, !dbg !85
  %638 = select i1 %636, float %489, float %632, !dbg !86
  %639 = select i1 %637, float %490, float %634, !dbg !86
  %640 = select i1 %20, float %638, float %489, !dbg !55
  %641 = select i1 %20, float %639, float %490, !dbg !55
  %642 = shufflevector <2 x float> %574, <2 x float> %631, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 2, i32 3, i32 0, i32 1>, !dbg !81
  %643 = shufflevector <4 x float> %600, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %644 = shufflevector <8 x float> %643, <8 x float> %642, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !81
  %645 = fcmp ogt <8 x float> %492, %644, !dbg !81
  %646 = fcmp olt <8 x float> %492, %644, !dbg !81
  %647 = shufflevector <8 x i1> %645, <8 x i1> %646, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>, !dbg !81
  %648 = or <8 x i1> %554, %647, !dbg !82
  %649 = select <8 x i1> %648, <8 x float> %492, <8 x float> %644, !dbg !83
  %650 = select <8 x i1> %481, <8 x float> %649, <8 x float> %492, !dbg !52
  %651 = fptrunc <2 x float> %631 to <2 x bfloat>, !dbg !88
  %652 = bitcast <2 x bfloat> %607 to i32, !dbg !88
  %653 = insertelement <2 x bfloat> poison, bfloat %609, i64 0, !dbg !88
  %654 = insertelement <2 x bfloat> %653, bfloat %611, i64 1, !dbg !88
  %655 = bitcast <2 x bfloat> %654 to i32, !dbg !88
  %656 = insertelement <2 x bfloat> poison, bfloat %613, i64 0, !dbg !88
  %657 = insertelement <2 x bfloat> %656, bfloat %615, i64 1, !dbg !88
  %658 = bitcast <2 x bfloat> %657 to i32, !dbg !88
  %659 = bitcast <2 x bfloat> %651 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %652, i32 %655, i32 %658, i32 %659, ptr addrspace(1) %606, i1 %20) #5, !dbg !88
  %indvars.iv.next84 = add nuw nsw i64 %indvars.iv83, 1024, !dbg !51
  %660 = icmp samesign ult i64 %indvars.iv83, 2048, !dbg !51
  br i1 %660, label %488, label %661, !dbg !51

661:                                              ; preds = %488
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %662 = extractelement <8 x float> %650, i64 6, !dbg !91
  %663 = extractelement <8 x float> %650, i64 7, !dbg !91
  %664 = fcmp olt float %662, %663, !dbg !91
  %665 = fcmp uno float %662, 0.000000e+00, !dbg !92
  %666 = or i1 %664, %665, !dbg !93
  %667 = select i1 %666, float %662, float %663, !dbg !94
  %668 = extractelement <4 x float> %604, i64 0, !dbg !91
  %669 = fcmp olt float %667, %668, !dbg !91
  %670 = fcmp uno float %667, 0.000000e+00, !dbg !92
  %671 = or i1 %669, %670, !dbg !93
  %672 = select i1 %671, float %667, float %668, !dbg !94
  %673 = extractelement <4 x float> %604, i64 1, !dbg !91
  %674 = fcmp olt float %672, %673, !dbg !91
  %675 = fcmp uno float %672, 0.000000e+00, !dbg !92
  %676 = or i1 %674, %675, !dbg !93
  %677 = select i1 %676, float %672, float %673, !dbg !94
  %678 = extractelement <4 x float> %604, i64 2, !dbg !91
  %679 = fcmp olt float %677, %678, !dbg !91
  %680 = fcmp uno float %677, 0.000000e+00, !dbg !92
  %681 = or i1 %679, %680, !dbg !93
  %682 = select i1 %681, float %677, float %678, !dbg !94
  %683 = extractelement <4 x float> %604, i64 3, !dbg !91
  %684 = fcmp olt float %682, %683, !dbg !91
  %685 = fcmp uno float %682, 0.000000e+00, !dbg !92
  %686 = or i1 %684, %685, !dbg !93
  %687 = select i1 %686, float %682, float %683, !dbg !94
  %688 = fcmp olt float %687, %640, !dbg !91
  %689 = fcmp uno float %687, 0.000000e+00, !dbg !92
  %690 = or i1 %688, %689, !dbg !93
  %691 = select i1 %690, float %687, float %640, !dbg !94
  %692 = fcmp olt float %691, %641, !dbg !91
  %693 = fcmp uno float %691, 0.000000e+00, !dbg !92
  %694 = or i1 %692, %693, !dbg !93
  %695 = select i1 %694, float %691, float %641, !dbg !94
  %696 = bitcast float %695 to i32, !dbg !89
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 16, i32 31), !dbg !89
  %698 = bitcast i32 %697 to float, !dbg !89
  %699 = fcmp olt float %695, %698, !dbg !91
  %700 = fcmp uno float %695, 0.000000e+00, !dbg !92
  %701 = or i1 %700, %699, !dbg !93
  %702 = select i1 %701, float %695, float %698, !dbg !94
  %703 = bitcast float %702 to i32, !dbg !89
  %704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %703, i32 8, i32 31), !dbg !89
  %705 = bitcast i32 %704 to float, !dbg !89
  %706 = fcmp olt float %702, %705, !dbg !91
  %707 = fcmp uno float %702, 0.000000e+00, !dbg !92
  %708 = or i1 %706, %707, !dbg !93
  %709 = select i1 %708, float %702, float %705, !dbg !94
  %710 = bitcast float %709 to i32, !dbg !89
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 4, i32 31), !dbg !89
  %712 = bitcast i32 %711 to float, !dbg !89
  %713 = fcmp olt float %709, %712, !dbg !91
  %714 = fcmp uno float %709, 0.000000e+00, !dbg !92
  %715 = or i1 %713, %714, !dbg !93
  %716 = select i1 %715, float %709, float %712, !dbg !94
  %717 = bitcast float %716 to i32, !dbg !89
  %718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %717, i32 2, i32 31), !dbg !89
  %719 = bitcast i32 %718 to float, !dbg !89
  %720 = fcmp olt float %716, %719, !dbg !91
  %721 = fcmp uno float %716, 0.000000e+00, !dbg !92
  %722 = or i1 %720, %721, !dbg !93
  %723 = select i1 %722, float %716, float %719, !dbg !94
  %724 = bitcast float %723 to i32, !dbg !89
  %725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %724, i32 1, i32 31), !dbg !89
  %726 = bitcast i32 %725 to float, !dbg !89
  %727 = fcmp olt float %723, %726, !dbg !91
  %728 = fcmp uno float %723, 0.000000e+00, !dbg !92
  %729 = or i1 %727, %728, !dbg !93
  %730 = select i1 %729, i32 %724, i32 %725, !dbg !94
  %731 = insertelement <1 x i32> poison, i32 %730, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %731, i1 %395) #5, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %732 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %403, i1 %402) #5, !dbg !89
  %733 = bitcast i32 %732 to float, !dbg !89
  %734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 2, i32 31), !dbg !89
  %735 = bitcast i32 %734 to float, !dbg !89
  %736 = fcmp olt float %733, %735, !dbg !91
  %737 = fcmp uno float %733, 0.000000e+00, !dbg !92
  %738 = or i1 %737, %736, !dbg !93
  %739 = select i1 %738, float %733, float %735, !dbg !94
  %740 = bitcast float %739 to i32, !dbg !89
  %741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %740, i32 1, i32 31), !dbg !89
  %742 = bitcast i32 %741 to float, !dbg !89
  %743 = fcmp olt float %739, %742, !dbg !91
  %744 = fcmp uno float %739, 0.000000e+00, !dbg !92
  %745 = or i1 %743, %744, !dbg !93
  %746 = select i1 %745, i32 %740, i32 %741, !dbg !94
  %747 = insertelement <1 x i32> poison, i32 %746, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %747, i1 %453) #5, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %748 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %749 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %605, <2 x i32> <i32 0, i32 2>, !dbg !97
  %750 = fcmp ogt <2 x float> %749, %605, !dbg !97
  %751 = fcmp uno <2 x float> %749, %605, !dbg !97
  %shift = shufflevector <2 x i1> %750, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !98
  %752 = or <2 x i1> %shift, %751, !dbg !98
  %753 = extractelement <2 x i1> %752, i64 0, !dbg !98
  %754 = extractelement <2 x float> %605, i64 0, !dbg !99
  %755 = extractelement <2 x float> %605, i64 1, !dbg !99
  %756 = select i1 %753, float %754, float %755, !dbg !99
  %757 = extractelement <8 x float> %650, i64 0, !dbg !97
  %758 = fcmp ogt float %756, %757, !dbg !97
  %759 = fcmp uno float %756, 0.000000e+00, !dbg !100
  %760 = or i1 %758, %759, !dbg !98
  %761 = select i1 %760, float %756, float %757, !dbg !99
  %762 = extractelement <8 x float> %650, i64 1, !dbg !97
  %763 = fcmp ogt float %761, %762, !dbg !97
  %764 = fcmp uno float %761, 0.000000e+00, !dbg !100
  %765 = or i1 %763, %764, !dbg !98
  %766 = select i1 %765, float %761, float %762, !dbg !99
  %767 = extractelement <8 x float> %650, i64 2, !dbg !97
  %768 = fcmp ogt float %766, %767, !dbg !97
  %769 = fcmp uno float %766, 0.000000e+00, !dbg !100
  %770 = or i1 %768, %769, !dbg !98
  %771 = select i1 %770, float %766, float %767, !dbg !99
  %772 = extractelement <8 x float> %650, i64 3, !dbg !97
  %773 = fcmp ogt float %771, %772, !dbg !97
  %774 = fcmp uno float %771, 0.000000e+00, !dbg !100
  %775 = or i1 %773, %774, !dbg !98
  %776 = select i1 %775, float %771, float %772, !dbg !99
  %777 = extractelement <8 x float> %650, i64 4, !dbg !97
  %778 = fcmp ogt float %776, %777, !dbg !97
  %779 = fcmp uno float %776, 0.000000e+00, !dbg !100
  %780 = or i1 %778, %779, !dbg !98
  %781 = select i1 %780, float %776, float %777, !dbg !99
  %782 = extractelement <8 x float> %650, i64 5, !dbg !97
  %783 = fcmp ogt float %781, %782, !dbg !97
  %784 = fcmp uno float %781, 0.000000e+00, !dbg !100
  %785 = or i1 %783, %784, !dbg !98
  %786 = select i1 %785, float %781, float %782, !dbg !99
  %787 = bitcast float %786 to i32, !dbg !95
  %788 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %787, i32 16, i32 31), !dbg !95
  %789 = bitcast i32 %788 to float, !dbg !95
  %790 = fcmp ogt float %786, %789, !dbg !97
  %791 = fcmp uno float %786, 0.000000e+00, !dbg !100
  %792 = or i1 %791, %790, !dbg !98
  %793 = select i1 %792, float %786, float %789, !dbg !99
  %794 = bitcast float %793 to i32, !dbg !95
  %795 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %794, i32 8, i32 31), !dbg !95
  %796 = bitcast i32 %795 to float, !dbg !95
  %797 = fcmp ogt float %793, %796, !dbg !97
  %798 = fcmp uno float %793, 0.000000e+00, !dbg !100
  %799 = or i1 %797, %798, !dbg !98
  %800 = select i1 %799, float %793, float %796, !dbg !99
  %801 = bitcast float %800 to i32, !dbg !95
  %802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %801, i32 4, i32 31), !dbg !95
  %803 = bitcast i32 %802 to float, !dbg !95
  %804 = fcmp ogt float %800, %803, !dbg !97
  %805 = fcmp uno float %800, 0.000000e+00, !dbg !100
  %806 = or i1 %804, %805, !dbg !98
  %807 = select i1 %806, float %800, float %803, !dbg !99
  %808 = bitcast float %807 to i32, !dbg !95
  %809 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %808, i32 2, i32 31), !dbg !95
  %810 = bitcast i32 %809 to float, !dbg !95
  %811 = fcmp ogt float %807, %810, !dbg !97
  %812 = fcmp uno float %807, 0.000000e+00, !dbg !100
  %813 = or i1 %811, %812, !dbg !98
  %814 = select i1 %813, float %807, float %810, !dbg !99
  %815 = bitcast float %814 to i32, !dbg !95
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 1, i32 31), !dbg !95
  %817 = bitcast i32 %816 to float, !dbg !95
  %818 = fcmp ogt float %814, %817, !dbg !97
  %819 = fcmp uno float %814, 0.000000e+00, !dbg !100
  %820 = or i1 %818, %819, !dbg !98
  %821 = select i1 %820, i32 %815, i32 %816, !dbg !99
  %822 = insertelement <1 x i32> poison, i32 %821, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %822, i1 %395) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %823 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %403, i1 %402) #5, !dbg !95
  %824 = bitcast i32 %823 to float, !dbg !95
  %825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %823, i32 2, i32 31), !dbg !95
  %826 = bitcast i32 %825 to float, !dbg !95
  %827 = fcmp ogt float %824, %826, !dbg !97
  %828 = fcmp uno float %824, 0.000000e+00, !dbg !100
  %829 = or i1 %828, %827, !dbg !98
  %830 = select i1 %829, float %824, float %826, !dbg !99
  %831 = bitcast float %830 to i32, !dbg !95
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 1, i32 31), !dbg !95
  %833 = bitcast i32 %832 to float, !dbg !95
  %834 = fcmp ogt float %830, %833, !dbg !97
  %835 = fcmp uno float %830, 0.000000e+00, !dbg !100
  %836 = or i1 %834, %835, !dbg !98
  %837 = select i1 %836, i32 %831, i32 %832, !dbg !99
  %838 = insertelement <1 x i32> poison, i32 %837, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %838, i1 %453) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %839 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %840 = sext i32 %19 to i64, !dbg !101
  %841 = getelementptr bfloat, ptr addrspace(1) %4, i64 %840, !dbg !101
  %842 = fptrunc float %748 to bfloat, !dbg !102
  %843 = and i32 %21, 127, !dbg !102
  %844 = icmp eq i32 %843, 0, !dbg !102
  %845 = bitcast bfloat %842 to i16, !dbg !102
  %846 = and i1 %20, %844, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %845, ptr addrspace(1) %841, i1 %846) #5, !dbg !102
  %847 = getelementptr bfloat, ptr addrspace(1) %5, i64 %840, !dbg !103
  %848 = fptrunc float %839 to bfloat, !dbg !104
  %849 = bitcast bfloat %848 to i16, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %849, ptr addrspace(1) %847, i1 %846) #5, !dbg !104
  %850 = getelementptr bfloat, ptr addrspace(1) %6, i64 %840, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %845, ptr addrspace(1) %850, i1 %846) #5, !dbg !106
  %851 = getelementptr bfloat, ptr addrspace(1) %7, i64 %840, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %849, ptr addrspace(1) %851, i1 %846) #5, !dbg !108
  %852 = getelementptr bfloat, ptr addrspace(1) %8, i64 %840, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %845, ptr addrspace(1) %852, i1 %846) #5, !dbg !110
  %853 = getelementptr bfloat, ptr addrspace(1) %9, i64 %840, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %849, ptr addrspace(1) %853, i1 %846) #5, !dbg !112
  %854 = getelementptr bfloat, ptr addrspace(1) %10, i64 %840, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %845, ptr addrspace(1) %854, i1 %846) #5, !dbg !114
  %855 = getelementptr bfloat, ptr addrspace(1) %11, i64 %840, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %849, ptr addrspace(1) %855, i1 %846) #5, !dbg !116
  %.inv = fcmp oge float %748, 0.000000e+00, !dbg !117
  %856 = select i1 %.inv, float 0.000000e+00, float %748, !dbg !117
  %857 = fsub float 0.000000e+00, %856, !dbg !119
  %858 = fcmp uno float %857, 0.000000e+00, !dbg !120
  %.inv3 = fcmp ole float %839, 0.000000e+00, !dbg !122
  %859 = select i1 %.inv3, float 0.000000e+00, float %839, !dbg !122
  %860 = fcmp ogt float %857, %859, !dbg !124
  %861 = or i1 %858, %860, !dbg !125
  %862 = select i1 %861, float %857, float %859, !dbg !126
  %863 = fmul float %862, 0x3F80204080000000, !dbg !127
  %864 = fcmp ogt float %863, 0x3EE4F8B580000000, !dbg !128
  %865 = fcmp uno float %863, 0.000000e+00, !dbg !130
  %866 = or i1 %864, %865, !dbg !131
  %867 = select i1 %866, float %863, float 0x3EE4F8B580000000, !dbg !132
  %868 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %867), !dbg !133
  %869 = sext i32 %26 to i64, !dbg !134
  %870 = getelementptr bfloat, ptr addrspace(1) %3, i64 %869, !dbg !134
  %871 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %870, i1 %20) #5, !dbg !135
  %872 = extractvalue { i32, i32, i32, i32 } %871, 0, !dbg !135
  %873 = bitcast i32 %872 to <2 x bfloat>, !dbg !135
  %874 = extractvalue { i32, i32, i32, i32 } %871, 1, !dbg !135
  %875 = bitcast i32 %874 to <2 x bfloat>, !dbg !135
  %876 = extractvalue { i32, i32, i32, i32 } %871, 2, !dbg !135
  %877 = bitcast i32 %876 to <2 x bfloat>, !dbg !135
  %878 = extractvalue { i32, i32, i32, i32 } %871, 3, !dbg !135
  %879 = bitcast i32 %878 to <2 x bfloat>, !dbg !135
  %880 = extractelement <2 x bfloat> %873, i64 0, !dbg !135
  %881 = extractelement <2 x bfloat> %873, i64 1, !dbg !135
  %882 = extractelement <2 x bfloat> %875, i64 0, !dbg !135
  %883 = extractelement <2 x bfloat> %875, i64 1, !dbg !135
  %884 = extractelement <2 x bfloat> %877, i64 0, !dbg !135
  %885 = extractelement <2 x bfloat> %877, i64 1, !dbg !135
  %886 = extractelement <2 x bfloat> %879, i64 0, !dbg !135
  %887 = extractelement <2 x bfloat> %879, i64 1, !dbg !135
  %888 = fpext bfloat %880 to float, !dbg !136
  %889 = fpext bfloat %881 to float, !dbg !136
  %890 = fpext bfloat %882 to float, !dbg !136
  %891 = fpext bfloat %883 to float, !dbg !136
  %892 = fpext bfloat %884 to float, !dbg !136
  %893 = fpext bfloat %885 to float, !dbg !136
  %894 = fpext bfloat %886 to float, !dbg !136
  %895 = fpext bfloat %887 to float, !dbg !136
  %896 = fmul float %868, %888, !dbg !137
  %897 = fmul float %868, %889, !dbg !137
  %898 = fmul float %868, %890, !dbg !137
  %899 = fmul float %868, %891, !dbg !137
  %900 = fmul float %868, %892, !dbg !137
  %901 = fmul float %868, %893, !dbg !137
  %902 = fmul float %868, %894, !dbg !137
  %903 = fmul float %868, %895, !dbg !137
  %904 = tail call float @llvm.nvvm.round.f(float %896) #5, !dbg !138
  %905 = tail call float @llvm.nvvm.round.f(float %897) #5, !dbg !138
  %906 = tail call float @llvm.nvvm.round.f(float %898) #5, !dbg !138
  %907 = tail call float @llvm.nvvm.round.f(float %899) #5, !dbg !138
  %908 = tail call float @llvm.nvvm.round.f(float %900) #5, !dbg !138
  %909 = tail call float @llvm.nvvm.round.f(float %901) #5, !dbg !138
  %910 = tail call float @llvm.nvvm.round.f(float %902) #5, !dbg !138
  %911 = tail call float @llvm.nvvm.round.f(float %903) #5, !dbg !138
  %912 = insertelement <4 x float> poison, float %904, i64 0, !dbg !139
  %913 = insertelement <4 x float> %912, float %905, i64 1, !dbg !139
  %914 = insertelement <4 x float> %913, float %906, i64 2, !dbg !139
  %915 = insertelement <4 x float> %914, float %907, i64 3, !dbg !139
  %916 = fcmp ogt <4 x float> %915, splat (float -1.270000e+02), !dbg !139
  %917 = fcmp uno <4 x float> %915, zeroinitializer, !dbg !141
  %918 = or <4 x i1> %916, %917, !dbg !142
  %919 = select <4 x i1> %918, <4 x float> %915, <4 x float> splat (float -1.270000e+02), !dbg !143
  %920 = fcmp olt <4 x float> %919, splat (float 1.270000e+02), !dbg !144
  %921 = fcmp uno <4 x float> %919, zeroinitializer, !dbg !146
  %922 = or <4 x i1> %920, %921, !dbg !147
  %923 = fptosi <4 x float> %919 to <4 x i8>, !dbg !148
  %924 = select <4 x i1> %922, <4 x i8> %923, <4 x i8> splat (i8 127), !dbg !149
  %925 = insertelement <4 x float> poison, float %908, i64 0, !dbg !139
  %926 = insertelement <4 x float> %925, float %909, i64 1, !dbg !139
  %927 = insertelement <4 x float> %926, float %910, i64 2, !dbg !139
  %928 = insertelement <4 x float> %927, float %911, i64 3, !dbg !139
  %929 = fcmp ogt <4 x float> %928, splat (float -1.270000e+02), !dbg !139
  %930 = fcmp uno <4 x float> %928, zeroinitializer, !dbg !141
  %931 = or <4 x i1> %929, %930, !dbg !142
  %932 = select <4 x i1> %931, <4 x float> %928, <4 x float> splat (float -1.270000e+02), !dbg !143
  %933 = fcmp olt <4 x float> %932, splat (float 1.270000e+02), !dbg !144
  %934 = fcmp uno <4 x float> %932, zeroinitializer, !dbg !146
  %935 = or <4 x i1> %933, %934, !dbg !147
  %936 = fptosi <4 x float> %932 to <4 x i8>, !dbg !148
  %937 = select <4 x i1> %935, <4 x i8> %936, <4 x i8> splat (i8 127), !dbg !149
  %938 = getelementptr i8, ptr addrspace(1) %12, i64 %869, !dbg !150
  %939 = bitcast <4 x i8> %924 to i32, !dbg !151
  %940 = bitcast <4 x i8> %937 to i32, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %939, i32 %940, ptr addrspace(1) %938, i1 %20) #5, !dbg !151
  %941 = getelementptr i8, ptr addrspace(1) %13, i64 %869, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %939, i32 %940, ptr addrspace(1) %941, i1 %20) #5, !dbg !153
  %942 = getelementptr i8, ptr addrspace(1) %14, i64 %869, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %939, i32 %940, ptr addrspace(1) %942, i1 %20) #5, !dbg !155
  %943 = getelementptr i8, ptr addrspace(1) %15, i64 %869, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %939, i32 %940, ptr addrspace(1) %943, i1 %20) #5, !dbg !157
  %944 = add i32 %26, 1024, !dbg !158
  %945 = sext i32 %944 to i64, !dbg !134
  %946 = getelementptr bfloat, ptr addrspace(1) %3, i64 %945, !dbg !134
  %947 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %946, i1 %20) #5, !dbg !135
  %948 = extractvalue { i32, i32, i32, i32 } %947, 0, !dbg !135
  %949 = bitcast i32 %948 to <2 x bfloat>, !dbg !135
  %950 = extractvalue { i32, i32, i32, i32 } %947, 1, !dbg !135
  %951 = bitcast i32 %950 to <2 x bfloat>, !dbg !135
  %952 = extractvalue { i32, i32, i32, i32 } %947, 2, !dbg !135
  %953 = bitcast i32 %952 to <2 x bfloat>, !dbg !135
  %954 = extractvalue { i32, i32, i32, i32 } %947, 3, !dbg !135
  %955 = bitcast i32 %954 to <2 x bfloat>, !dbg !135
  %956 = extractelement <2 x bfloat> %949, i64 0, !dbg !135
  %957 = extractelement <2 x bfloat> %949, i64 1, !dbg !135
  %958 = extractelement <2 x bfloat> %951, i64 0, !dbg !135
  %959 = extractelement <2 x bfloat> %951, i64 1, !dbg !135
  %960 = extractelement <2 x bfloat> %953, i64 0, !dbg !135
  %961 = extractelement <2 x bfloat> %953, i64 1, !dbg !135
  %962 = extractelement <2 x bfloat> %955, i64 0, !dbg !135
  %963 = extractelement <2 x bfloat> %955, i64 1, !dbg !135
  %964 = fpext bfloat %956 to float, !dbg !136
  %965 = fpext bfloat %957 to float, !dbg !136
  %966 = fpext bfloat %958 to float, !dbg !136
  %967 = fpext bfloat %959 to float, !dbg !136
  %968 = fpext bfloat %960 to float, !dbg !136
  %969 = fpext bfloat %961 to float, !dbg !136
  %970 = fpext bfloat %962 to float, !dbg !136
  %971 = fpext bfloat %963 to float, !dbg !136
  %972 = fmul float %868, %964, !dbg !137
  %973 = fmul float %868, %965, !dbg !137
  %974 = fmul float %868, %966, !dbg !137
  %975 = fmul float %868, %967, !dbg !137
  %976 = fmul float %868, %968, !dbg !137
  %977 = fmul float %868, %969, !dbg !137
  %978 = fmul float %868, %970, !dbg !137
  %979 = fmul float %868, %971, !dbg !137
  %980 = tail call float @llvm.nvvm.round.f(float %972) #5, !dbg !138
  %981 = tail call float @llvm.nvvm.round.f(float %973) #5, !dbg !138
  %982 = tail call float @llvm.nvvm.round.f(float %974) #5, !dbg !138
  %983 = tail call float @llvm.nvvm.round.f(float %975) #5, !dbg !138
  %984 = tail call float @llvm.nvvm.round.f(float %976) #5, !dbg !138
  %985 = tail call float @llvm.nvvm.round.f(float %977) #5, !dbg !138
  %986 = tail call float @llvm.nvvm.round.f(float %978) #5, !dbg !138
  %987 = tail call float @llvm.nvvm.round.f(float %979) #5, !dbg !138
  %988 = insertelement <4 x float> poison, float %980, i64 0, !dbg !139
  %989 = insertelement <4 x float> %988, float %981, i64 1, !dbg !139
  %990 = insertelement <4 x float> %989, float %982, i64 2, !dbg !139
  %991 = insertelement <4 x float> %990, float %983, i64 3, !dbg !139
  %992 = fcmp ogt <4 x float> %991, splat (float -1.270000e+02), !dbg !139
  %993 = fcmp uno <4 x float> %991, zeroinitializer, !dbg !141
  %994 = or <4 x i1> %992, %993, !dbg !142
  %995 = select <4 x i1> %994, <4 x float> %991, <4 x float> splat (float -1.270000e+02), !dbg !143
  %996 = fcmp olt <4 x float> %995, splat (float 1.270000e+02), !dbg !144
  %997 = fcmp uno <4 x float> %995, zeroinitializer, !dbg !146
  %998 = or <4 x i1> %996, %997, !dbg !147
  %999 = fptosi <4 x float> %995 to <4 x i8>, !dbg !148
  %1000 = select <4 x i1> %998, <4 x i8> %999, <4 x i8> splat (i8 127), !dbg !149
  %1001 = insertelement <4 x float> poison, float %984, i64 0, !dbg !139
  %1002 = insertelement <4 x float> %1001, float %985, i64 1, !dbg !139
  %1003 = insertelement <4 x float> %1002, float %986, i64 2, !dbg !139
  %1004 = insertelement <4 x float> %1003, float %987, i64 3, !dbg !139
  %1005 = fcmp ogt <4 x float> %1004, splat (float -1.270000e+02), !dbg !139
  %1006 = fcmp uno <4 x float> %1004, zeroinitializer, !dbg !141
  %1007 = or <4 x i1> %1005, %1006, !dbg !142
  %1008 = select <4 x i1> %1007, <4 x float> %1004, <4 x float> splat (float -1.270000e+02), !dbg !143
  %1009 = fcmp olt <4 x float> %1008, splat (float 1.270000e+02), !dbg !144
  %1010 = fcmp uno <4 x float> %1008, zeroinitializer, !dbg !146
  %1011 = or <4 x i1> %1009, %1010, !dbg !147
  %1012 = fptosi <4 x float> %1008 to <4 x i8>, !dbg !148
  %1013 = select <4 x i1> %1011, <4 x i8> %1012, <4 x i8> splat (i8 127), !dbg !149
  %1014 = getelementptr i8, ptr addrspace(1) %12, i64 %945, !dbg !150
  %1015 = bitcast <4 x i8> %1000 to i32, !dbg !151
  %1016 = bitcast <4 x i8> %1013 to i32, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1015, i32 %1016, ptr addrspace(1) %1014, i1 %20) #5, !dbg !151
  %1017 = getelementptr i8, ptr addrspace(1) %13, i64 %945, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1015, i32 %1016, ptr addrspace(1) %1017, i1 %20) #5, !dbg !153
  %1018 = getelementptr i8, ptr addrspace(1) %14, i64 %945, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1015, i32 %1016, ptr addrspace(1) %1018, i1 %20) #5, !dbg !155
  %1019 = getelementptr i8, ptr addrspace(1) %15, i64 %945, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1015, i32 %1016, ptr addrspace(1) %1019, i1 %20) #5, !dbg !157
  %1020 = add i32 %26, 2048, !dbg !158
  %1021 = sext i32 %1020 to i64, !dbg !134
  %1022 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1021, !dbg !134
  %1023 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1022, i1 %20) #5, !dbg !135
  %1024 = extractvalue { i32, i32, i32, i32 } %1023, 0, !dbg !135
  %1025 = bitcast i32 %1024 to <2 x bfloat>, !dbg !135
  %1026 = extractvalue { i32, i32, i32, i32 } %1023, 1, !dbg !135
  %1027 = bitcast i32 %1026 to <2 x bfloat>, !dbg !135
  %1028 = extractvalue { i32, i32, i32, i32 } %1023, 2, !dbg !135
  %1029 = bitcast i32 %1028 to <2 x bfloat>, !dbg !135
  %1030 = extractvalue { i32, i32, i32, i32 } %1023, 3, !dbg !135
  %1031 = bitcast i32 %1030 to <2 x bfloat>, !dbg !135
  %1032 = extractelement <2 x bfloat> %1025, i64 0, !dbg !135
  %1033 = extractelement <2 x bfloat> %1025, i64 1, !dbg !135
  %1034 = extractelement <2 x bfloat> %1027, i64 0, !dbg !135
  %1035 = extractelement <2 x bfloat> %1027, i64 1, !dbg !135
  %1036 = extractelement <2 x bfloat> %1029, i64 0, !dbg !135
  %1037 = extractelement <2 x bfloat> %1029, i64 1, !dbg !135
  %1038 = extractelement <2 x bfloat> %1031, i64 0, !dbg !135
  %1039 = extractelement <2 x bfloat> %1031, i64 1, !dbg !135
  %1040 = fpext bfloat %1032 to float, !dbg !136
  %1041 = fpext bfloat %1033 to float, !dbg !136
  %1042 = fpext bfloat %1034 to float, !dbg !136
  %1043 = fpext bfloat %1035 to float, !dbg !136
  %1044 = fpext bfloat %1036 to float, !dbg !136
  %1045 = fpext bfloat %1037 to float, !dbg !136
  %1046 = fpext bfloat %1038 to float, !dbg !136
  %1047 = fpext bfloat %1039 to float, !dbg !136
  %1048 = fmul float %868, %1040, !dbg !137
  %1049 = fmul float %868, %1041, !dbg !137
  %1050 = fmul float %868, %1042, !dbg !137
  %1051 = fmul float %868, %1043, !dbg !137
  %1052 = fmul float %868, %1044, !dbg !137
  %1053 = fmul float %868, %1045, !dbg !137
  %1054 = fmul float %868, %1046, !dbg !137
  %1055 = fmul float %868, %1047, !dbg !137
  %1056 = tail call float @llvm.nvvm.round.f(float %1048) #5, !dbg !138
  %1057 = tail call float @llvm.nvvm.round.f(float %1049) #5, !dbg !138
  %1058 = tail call float @llvm.nvvm.round.f(float %1050) #5, !dbg !138
  %1059 = tail call float @llvm.nvvm.round.f(float %1051) #5, !dbg !138
  %1060 = tail call float @llvm.nvvm.round.f(float %1052) #5, !dbg !138
  %1061 = tail call float @llvm.nvvm.round.f(float %1053) #5, !dbg !138
  %1062 = tail call float @llvm.nvvm.round.f(float %1054) #5, !dbg !138
  %1063 = tail call float @llvm.nvvm.round.f(float %1055) #5, !dbg !138
  %1064 = insertelement <4 x float> poison, float %1056, i64 0, !dbg !139
  %1065 = insertelement <4 x float> %1064, float %1057, i64 1, !dbg !139
  %1066 = insertelement <4 x float> %1065, float %1058, i64 2, !dbg !139
  %1067 = insertelement <4 x float> %1066, float %1059, i64 3, !dbg !139
  %1068 = fcmp ogt <4 x float> %1067, splat (float -1.270000e+02), !dbg !139
  %1069 = fcmp uno <4 x float> %1067, zeroinitializer, !dbg !141
  %1070 = or <4 x i1> %1068, %1069, !dbg !142
  %1071 = select <4 x i1> %1070, <4 x float> %1067, <4 x float> splat (float -1.270000e+02), !dbg !143
  %1072 = fcmp olt <4 x float> %1071, splat (float 1.270000e+02), !dbg !144
  %1073 = fcmp uno <4 x float> %1071, zeroinitializer, !dbg !146
  %1074 = or <4 x i1> %1072, %1073, !dbg !147
  %1075 = fptosi <4 x float> %1071 to <4 x i8>, !dbg !148
  %1076 = select <4 x i1> %1074, <4 x i8> %1075, <4 x i8> splat (i8 127), !dbg !149
  %1077 = insertelement <4 x float> poison, float %1060, i64 0, !dbg !139
  %1078 = insertelement <4 x float> %1077, float %1061, i64 1, !dbg !139
  %1079 = insertelement <4 x float> %1078, float %1062, i64 2, !dbg !139
  %1080 = insertelement <4 x float> %1079, float %1063, i64 3, !dbg !139
  %1081 = fcmp ogt <4 x float> %1080, splat (float -1.270000e+02), !dbg !139
  %1082 = fcmp uno <4 x float> %1080, zeroinitializer, !dbg !141
  %1083 = or <4 x i1> %1081, %1082, !dbg !142
  %1084 = select <4 x i1> %1083, <4 x float> %1080, <4 x float> splat (float -1.270000e+02), !dbg !143
  %1085 = fcmp olt <4 x float> %1084, splat (float 1.270000e+02), !dbg !144
  %1086 = fcmp uno <4 x float> %1084, zeroinitializer, !dbg !146
  %1087 = or <4 x i1> %1085, %1086, !dbg !147
  %1088 = fptosi <4 x float> %1084 to <4 x i8>, !dbg !148
  %1089 = select <4 x i1> %1087, <4 x i8> %1088, <4 x i8> splat (i8 127), !dbg !149
  %1090 = getelementptr i8, ptr addrspace(1) %12, i64 %1021, !dbg !150
  %1091 = bitcast <4 x i8> %1076 to i32, !dbg !151
  %1092 = bitcast <4 x i8> %1089 to i32, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1091, i32 %1092, ptr addrspace(1) %1090, i1 %20) #5, !dbg !151
  %1093 = getelementptr i8, ptr addrspace(1) %13, i64 %1021, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1091, i32 %1092, ptr addrspace(1) %1093, i1 %20) #5, !dbg !153
  %1094 = getelementptr i8, ptr addrspace(1) %14, i64 %1021, !dbg !154
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1091, i32 %1092, ptr addrspace(1) %1094, i1 %20) #5, !dbg !155
  %1095 = getelementptr i8, ptr addrspace(1) %15, i64 %1021, !dbg !156
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1091, i32 %1092, ptr addrspace(1) %1095, i1 %20) #5, !dbg !157
  ret void, !dbg !159
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 112, scope: !6)
!16 = !DILocation(line: 44, column: 62, scope: !6)
!17 = !DILocation(line: 46, column: 66, scope: !6)
!18 = !DILocation(line: 32, column: 40, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 42, column: 51, scope: !6)
!24 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !23)
!26 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !23)
!27 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !23)
!28 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !23)
!29 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !23)
!30 = !DILocation(line: 45, column: 58, scope: !6)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = !DILocation(line: 217, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!35 = !DILocation(line: 47, column: 79, scope: !6)
!36 = !DILocation(line: 218, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 219, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 219, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 219, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 221, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 221, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 222, column: 30, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 222, column: 38, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 222, column: 49, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 222, column: 22, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 222, column: 15, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !35)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 53, column: 40, scope: !6)
!52 = !DILocation(line: 85, column: 50, scope: !6)
!53 = !DILocation(line: 71, column: 24, scope: !6)
!54 = !DILocation(line: 65, column: 24, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 54, column: 31, scope: !6)
!57 = !DILocation(line: 59, column: 41, scope: !6)
!58 = !DILocation(line: 59, column: 34, scope: !6)
!59 = !DILocation(line: 59, column: 51, scope: !6)
!60 = !DILocation(line: 60, column: 42, scope: !6)
!61 = !DILocation(line: 60, column: 35, scope: !6)
!62 = !DILocation(line: 60, column: 49, scope: !6)
!63 = !DILocation(line: 61, column: 35, scope: !6)
!64 = !DILocation(line: 61, column: 49, scope: !6)
!65 = !DILocation(line: 62, column: 35, scope: !6)
!66 = !DILocation(line: 62, column: 42, scope: !6)
!67 = !DILocation(line: 63, column: 35, scope: !6)
!68 = !DILocation(line: 63, column: 42, scope: !6)
!69 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 84, column: 47, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !72)
!72 = !DILocation(line: 82, column: 47, scope: !6)
!73 = !DILocation(line: 59, column: 113, scope: !6)
!74 = !DILocation(line: 61, column: 102, scope: !6)
!75 = !DILocation(line: 63, column: 95, scope: !6)
!76 = !DILocation(line: 74, column: 24, scope: !6)
!77 = !DILocation(line: 76, column: 24, scope: !6)
!78 = !DILocation(line: 77, column: 24, scope: !6)
!79 = !DILocation(line: 79, column: 24, scope: !6)
!80 = !DILocation(line: 80, column: 24, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !70)
!82 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !70)
!83 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !70)
!84 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !72)
!85 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !72)
!86 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !72)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !90)
!90 = !DILocation(line: 87, column: 40, scope: !6)
!91 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !90)
!92 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !90)
!93 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !90)
!94 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !90)
!95 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !96)
!96 = !DILocation(line: 88, column: 40, scope: !6)
!97 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !96)
!98 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !96)
!99 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !96)
!100 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !96)
!101 = !DILocation(line: 89, column: 25, scope: !6)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 90, column: 25, scope: !6)
!104 = !DILocation(line: 90, column: 37, scope: !6)
!105 = !DILocation(line: 91, column: 25, scope: !6)
!106 = !DILocation(line: 91, column: 37, scope: !6)
!107 = !DILocation(line: 92, column: 25, scope: !6)
!108 = !DILocation(line: 92, column: 37, scope: !6)
!109 = !DILocation(line: 93, column: 25, scope: !6)
!110 = !DILocation(line: 93, column: 37, scope: !6)
!111 = !DILocation(line: 94, column: 25, scope: !6)
!112 = !DILocation(line: 94, column: 37, scope: !6)
!113 = !DILocation(line: 95, column: 25, scope: !6)
!114 = !DILocation(line: 95, column: 37, scope: !6)
!115 = !DILocation(line: 96, column: 26, scope: !6)
!116 = !DILocation(line: 96, column: 38, scope: !6)
!117 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !118)
!118 = !DILocation(line: 105, column: 46, scope: !6)
!119 = !DILocation(line: 106, column: 17, scope: !6)
!120 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !121)
!121 = !DILocation(line: 108, column: 46, scope: !6)
!122 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !123)
!123 = !DILocation(line: 107, column: 46, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !121)
!125 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !121)
!126 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !121)
!127 = !DILocation(line: 110, column: 24, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !129)
!129 = !DILocation(line: 113, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !129)
!133 = !DILocation(line: 116, column: 25, scope: !6)
!134 = !DILocation(line: 103, column: 36, scope: !6)
!135 = !DILocation(line: 103, column: 53, scope: !6)
!136 = !DILocation(line: 103, column: 115, scope: !6)
!137 = !DILocation(line: 119, column: 24, scope: !6)
!138 = !DILocation(line: 120, column: 36, scope: !6)
!139 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !140)
!140 = !DILocation(line: 123, column: 46, scope: !6)
!141 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !140)
!142 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !140)
!143 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !140)
!144 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !145)
!145 = !DILocation(line: 125, column: 46, scope: !6)
!146 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !145)
!147 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !145)
!148 = !DILocation(line: 127, column: 25, scope: !6)
!149 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !145)
!150 = !DILocation(line: 128, column: 30, scope: !6)
!151 = !DILocation(line: 128, column: 54, scope: !6)
!152 = !DILocation(line: 129, column: 30, scope: !6)
!153 = !DILocation(line: 129, column: 54, scope: !6)
!154 = !DILocation(line: 130, column: 30, scope: !6)
!155 = !DILocation(line: 130, column: 54, scope: !6)
!156 = !DILocation(line: 131, column: 30, scope: !6)
!157 = !DILocation(line: 131, column: 54, scope: !6)
!158 = !DILocation(line: 103, column: 43, scope: !6)
!159 = !DILocation(line: 97, column: 4, scope: !6)
