; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 5, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 4, !dbg !11
  %15 = and i32 %14, 15, !dbg !11
  %16 = or disjoint i32 %15, 16, !dbg !11
  %17 = and i32 %13, 31, !dbg !11
  %18 = or disjoint i32 %15, %12, !dbg !12
  %19 = or disjoint i32 %16, %12, !dbg !12
  %20 = or disjoint i32 %12, %17, !dbg !12
  %21 = icmp slt i32 %18, 86400, !dbg !13
  %22 = icmp slt i32 %19, 86400, !dbg !13
  %23 = icmp slt i32 %20, 86400, !dbg !13
  %24 = shl i32 %13, 3, !dbg !14
  %25 = and i32 %24, 120, !dbg !14
  %26 = or disjoint i32 %25, 4, !dbg !14
  %27 = sdiv i32 %18, 24, !dbg !15
  %28 = sdiv i32 %19, 24, !dbg !15
  %29 = mul i32 %27, 24, !dbg !16
  %.decomposed = sub i32 %18, %29, !dbg !16
  %30 = mul i32 %28, 24, !dbg !16
  %.decomposed12 = sub i32 %19, %30, !dbg !16
  %31 = shl i32 %18, 7, !dbg !17
  %32 = shl i32 %19, 7, !dbg !17
  %33 = or disjoint i32 %31, %25, !dbg !18
  %34 = or disjoint i32 %31, %26, !dbg !18
  %35 = or disjoint i32 %32, %25, !dbg !18
  %36 = or disjoint i32 %32, %26, !dbg !18
  %37 = sext i32 %33 to i64, !dbg !19
  %38 = getelementptr i32, ptr addrspace(1) %0, i64 %37, !dbg !19
  %39 = sext i32 %34 to i64, !dbg !19
  %40 = getelementptr i32, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = sext i32 %35 to i64, !dbg !19
  %42 = getelementptr i32, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = sext i32 %36 to i64, !dbg !19
  %44 = getelementptr i32, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %21) #3, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !20
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %21) #3, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !20
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #3, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !20
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #3, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !20
  %65 = sext i32 %27 to i64, !dbg !21
  %66 = getelementptr bfloat, ptr addrspace(1) %1, i64 %65, !dbg !21
  %67 = sext i32 %28 to i64, !dbg !21
  %68 = getelementptr bfloat, ptr addrspace(1) %1, i64 %67, !dbg !21
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %21) #3, !dbg !22
  %77 = bitcast i16 %76 to bfloat, !dbg !22
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !22
  %86 = bitcast i16 %85 to bfloat, !dbg !22
  %87 = getelementptr bfloat, ptr addrspace(1) %2, i64 %65, !dbg !23
  %88 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !23
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 %21) #3, !dbg !24
  %97 = bitcast i16 %96 to bfloat, !dbg !24
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !24
  %106 = bitcast i16 %105 to bfloat, !dbg !24
  %107 = shl nsw i32 %.decomposed, 7, !dbg !25
  %108 = shl nsw i32 %.decomposed12, 7, !dbg !25
  %109 = or disjoint i32 %107, %25, !dbg !26
  %110 = or disjoint i32 %108, %25, !dbg !26
  %111 = sext i32 %109 to i64, !dbg !27
  %112 = getelementptr bfloat, ptr addrspace(1) %3, i64 %111, !dbg !27
  %113 = sext i32 %110 to i64, !dbg !27
  %114 = getelementptr bfloat, ptr addrspace(1) %3, i64 %113, !dbg !27
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %21) #3, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !28
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !28
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !28
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !28
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !28
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %114, i1 %22) #3, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !28
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !28
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !28
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !28
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !28
  %133 = getelementptr bfloat, ptr addrspace(1) %4, i64 %111, !dbg !29
  %134 = getelementptr bfloat, ptr addrspace(1) %4, i64 %113, !dbg !29
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %133, i1 %21) #3, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !30
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !30
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !30
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !30
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !30
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %134, i1 %22) #3, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !30
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !30
  %148 = bitcast i32 %147 to <2 x bfloat>, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !30
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !30
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !30
  %.inv = fcmp oge bfloat %77, 0xR0000, !dbg !31
  %153 = select i1 %.inv, bfloat 0xR0000, bfloat %77, !dbg !31
  %154 = fpext bfloat %153 to float, !dbg !31
  %.inv2 = fcmp oge bfloat %86, 0xR0000, !dbg !31
  %155 = select i1 %.inv2, bfloat 0xR0000, bfloat %86, !dbg !31
  %156 = fpext bfloat %155 to float, !dbg !31
  %157 = fsub float 0.000000e+00, %154, !dbg !35
  %158 = fsub float 0.000000e+00, %156, !dbg !35
  %.inv3 = fcmp ole bfloat %97, 0xR0000, !dbg !36
  %159 = select i1 %.inv3, bfloat 0xR0000, bfloat %97, !dbg !36
  %160 = fpext bfloat %159 to float, !dbg !36
  %.inv4 = fcmp ole bfloat %106, 0xR0000, !dbg !36
  %161 = select i1 %.inv4, bfloat 0xR0000, bfloat %106, !dbg !36
  %162 = fpext bfloat %161 to float, !dbg !36
  %163 = fcmp ogt float %157, %160, !dbg !38
  %164 = fcmp ogt float %158, %162, !dbg !38
  %165 = fcmp uno float %157, 0.000000e+00, !dbg !40
  %166 = fcmp uno float %158, 0.000000e+00, !dbg !40
  %167 = or i1 %165, %163, !dbg !41
  %168 = or i1 %166, %164, !dbg !41
  %169 = select i1 %167, float %157, float %160, !dbg !42
  %170 = select i1 %168, float %158, float %162, !dbg !42
  %171 = fmul float %169, 0x3F80204080000000, !dbg !43
  %172 = fmul float %170, 0x3F80204080000000, !dbg !43
  %173 = fcmp ogt float %171, 0x3EE4F8B580000000, !dbg !44
  %174 = fcmp ogt float %172, 0x3EE4F8B580000000, !dbg !44
  %175 = fcmp uno float %171, 0.000000e+00, !dbg !46
  %176 = fcmp uno float %172, 0.000000e+00, !dbg !46
  %177 = or i1 %173, %175, !dbg !47
  %178 = or i1 %174, %176, !dbg !47
  %179 = select i1 %177, float %171, float 0x3EE4F8B580000000, !dbg !48
  %180 = select i1 %178, float %172, float 0x3EE4F8B580000000, !dbg !48
  %181 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !49
  %182 = fpext <2 x bfloat> %139 to <2 x float>, !dbg !50
  %183 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !51
  %184 = insertelement <2 x i32> %183, i32 %49, i64 1, !dbg !51
  %185 = sitofp <2 x i32> %184 to <2 x float>, !dbg !51
  %186 = insertelement <2 x float> poison, float %179, i64 0, !dbg !52
  %187 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %188 = fmul <2 x float> %187, %185, !dbg !52
  %189 = fmul <2 x float> %188, %181, !dbg !53
  %190 = fadd <2 x float> %189, %182, !dbg !54
  %191 = fmul <2 x float> %190, %190, !dbg !55
  %192 = fpext <2 x bfloat> %121 to <2 x float>, !dbg !49
  %193 = fpext <2 x bfloat> %141 to <2 x float>, !dbg !50
  %194 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !51
  %195 = insertelement <2 x i32> %194, i32 %52, i64 1, !dbg !51
  %196 = sitofp <2 x i32> %195 to <2 x float>, !dbg !51
  %197 = fmul <2 x float> %187, %196, !dbg !52
  %198 = fmul <2 x float> %197, %192, !dbg !53
  %199 = fadd <2 x float> %198, %193, !dbg !54
  %200 = fmul <2 x float> %199, %199, !dbg !55
  %201 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !49
  %202 = fpext <2 x bfloat> %143 to <2 x float>, !dbg !50
  %203 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !51
  %204 = insertelement <2 x i32> %203, i32 %54, i64 1, !dbg !51
  %205 = sitofp <2 x i32> %204 to <2 x float>, !dbg !51
  %206 = fmul <2 x float> %187, %205, !dbg !52
  %207 = fmul <2 x float> %206, %201, !dbg !53
  %208 = fadd <2 x float> %207, %202, !dbg !54
  %209 = fmul <2 x float> %208, %208, !dbg !55
  %210 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !49
  %211 = fpext <2 x bfloat> %148 to <2 x float>, !dbg !50
  %212 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !51
  %213 = insertelement <2 x i32> %212, i32 %59, i64 1, !dbg !51
  %214 = sitofp <2 x i32> %213 to <2 x float>, !dbg !51
  %215 = insertelement <2 x float> poison, float %180, i64 0, !dbg !52
  %216 = shufflevector <2 x float> %215, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %217 = fmul <2 x float> %216, %214, !dbg !52
  %218 = fmul <2 x float> %217, %210, !dbg !53
  %219 = fadd <2 x float> %218, %211, !dbg !54
  %220 = fmul <2 x float> %219, %219, !dbg !55
  %221 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !49
  %222 = fpext <2 x bfloat> %150 to <2 x float>, !dbg !50
  %223 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !51
  %224 = insertelement <2 x i32> %223, i32 %62, i64 1, !dbg !51
  %225 = sitofp <2 x i32> %224 to <2 x float>, !dbg !51
  %226 = fmul <2 x float> %216, %225, !dbg !52
  %227 = fmul <2 x float> %226, %221, !dbg !53
  %228 = fadd <2 x float> %227, %222, !dbg !54
  %229 = fmul <2 x float> %228, %228, !dbg !55
  %230 = fpext <2 x bfloat> %132 to <2 x float>, !dbg !49
  %231 = fpext <2 x bfloat> %152 to <2 x float>, !dbg !50
  %232 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !51
  %233 = insertelement <2 x i32> %232, i32 %64, i64 1, !dbg !51
  %234 = sitofp <2 x i32> %233 to <2 x float>, !dbg !51
  %235 = fmul <2 x float> %216, %234, !dbg !52
  %236 = fmul <2 x float> %235, %230, !dbg !53
  %237 = fadd <2 x float> %236, %231, !dbg !54
  %238 = fmul <2 x float> %237, %237, !dbg !55
  %239 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !56
  %240 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !56
  %241 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !56
  %242 = getelementptr bfloat, ptr addrspace(1) %5, i64 %37, !dbg !57
  %243 = getelementptr bfloat, ptr addrspace(1) %5, i64 %41, !dbg !57
  %244 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !49
  %245 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !50
  %246 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !51
  %247 = insertelement <2 x i32> %246, i32 %47, i64 1, !dbg !51
  %248 = sitofp <2 x i32> %247 to <2 x float>, !dbg !51
  %249 = fmul <2 x float> %187, %248, !dbg !52
  %250 = fmul <2 x float> %249, %244, !dbg !53
  %251 = fadd <2 x float> %250, %245, !dbg !54
  %252 = fmul <2 x float> %251, %251, !dbg !55
  %253 = fmul <2 x float> %251, %251, !dbg !55
  %shift = shufflevector <2 x float> %253, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %254 = fadd <2 x float> %252, %shift, !dbg !58
  %255 = fadd <2 x float> %191, %254, !dbg !58
  %shift5 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %256 = fadd <2 x float> %shift5, %255, !dbg !58
  %257 = fadd <2 x float> %200, %256, !dbg !58
  %shift6 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %258 = fadd <2 x float> %shift6, %257, !dbg !58
  %259 = fadd <2 x float> %209, %258, !dbg !58
  %shift7 = shufflevector <2 x float> %209, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %260 = fadd <2 x float> %shift7, %259, !dbg !58
  %261 = extractelement <2 x float> %260, i64 0, !dbg !58
  %262 = select i1 %21, float %261, float 0.000000e+00, !dbg !58
  %263 = bitcast float %262 to i32, !dbg !63
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !63
  %265 = bitcast i32 %264 to float, !dbg !63
  %266 = fadd float %262, %265, !dbg !58
  %267 = bitcast float %266 to i32, !dbg !63
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !63
  %269 = bitcast i32 %268 to float, !dbg !63
  %270 = fadd float %266, %269, !dbg !58
  %271 = bitcast float %270 to i32, !dbg !63
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !63
  %273 = bitcast i32 %272 to float, !dbg !63
  %274 = fadd float %270, %273, !dbg !58
  %275 = bitcast float %274 to i32, !dbg !63
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !63
  %277 = bitcast i32 %276 to float, !dbg !63
  %278 = fadd float %274, %277, !dbg !58
  %279 = bitcast float %278 to <1 x i32>, !dbg !56
  %280 = fptrunc <2 x float> %251 to <2 x bfloat>, !dbg !64
  %281 = fptrunc <2 x float> %190 to <2 x bfloat>, !dbg !64
  %282 = fptrunc <2 x float> %199 to <2 x bfloat>, !dbg !64
  %283 = fptrunc <2 x float> %208 to <2 x bfloat>, !dbg !64
  %284 = fpext <2 x bfloat> %126 to <2 x float>, !dbg !49
  %285 = fpext <2 x bfloat> %146 to <2 x float>, !dbg !50
  %286 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !51
  %287 = insertelement <2 x i32> %286, i32 %57, i64 1, !dbg !51
  %288 = sitofp <2 x i32> %287 to <2 x float>, !dbg !51
  %289 = fmul <2 x float> %216, %288, !dbg !52
  %290 = fmul <2 x float> %289, %284, !dbg !53
  %291 = fadd <2 x float> %290, %285, !dbg !54
  %292 = fmul <2 x float> %291, %291, !dbg !55
  %293 = fmul <2 x float> %291, %291, !dbg !55
  %shift8 = shufflevector <2 x float> %293, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %294 = fadd <2 x float> %292, %shift8, !dbg !58
  %295 = fadd <2 x float> %220, %294, !dbg !58
  %shift9 = shufflevector <2 x float> %220, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %296 = fadd <2 x float> %shift9, %295, !dbg !58
  %297 = fadd <2 x float> %229, %296, !dbg !58
  %shift10 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %298 = fadd <2 x float> %shift10, %297, !dbg !58
  %299 = fadd <2 x float> %238, %298, !dbg !58
  %shift11 = shufflevector <2 x float> %238, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !58
  %300 = fadd <2 x float> %shift11, %299, !dbg !58
  %301 = extractelement <2 x float> %300, i64 0, !dbg !58
  %302 = select i1 %22, float %301, float 0.000000e+00, !dbg !58
  %303 = bitcast float %302 to i32, !dbg !63
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !63
  %305 = bitcast i32 %304 to float, !dbg !63
  %306 = fadd float %302, %305, !dbg !58
  %307 = bitcast float %306 to i32, !dbg !63
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 4, i32 31), !dbg !63
  %309 = bitcast i32 %308 to float, !dbg !63
  %310 = fadd float %306, %309, !dbg !58
  %311 = bitcast float %310 to i32, !dbg !63
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !63
  %313 = bitcast i32 %312 to float, !dbg !63
  %314 = fadd float %310, %313, !dbg !58
  %315 = bitcast float %314 to i32, !dbg !63
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !63
  %317 = bitcast i32 %316 to float, !dbg !63
  %318 = fadd float %314, %317, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %279, i1 true) #3, !dbg !56
  %319 = bitcast float %318 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %240, <1 x i32> %319, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %320 = load i32, ptr addrspace(3) %241, align 4, !dbg !56
  %321 = fptrunc <2 x float> %291 to <2 x bfloat>, !dbg !64
  %322 = fptrunc <2 x float> %219 to <2 x bfloat>, !dbg !64
  %323 = fptrunc <2 x float> %228 to <2 x bfloat>, !dbg !64
  %324 = fptrunc <2 x float> %237 to <2 x bfloat>, !dbg !64
  %325 = bitcast <2 x bfloat> %280 to i32, !dbg !64
  %326 = bitcast <2 x bfloat> %281 to i32, !dbg !64
  %327 = bitcast <2 x bfloat> %282 to i32, !dbg !64
  %328 = bitcast <2 x bfloat> %283 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %326, i32 %327, i32 %328, ptr addrspace(1) %242, i1 %21) #3, !dbg !64
  %329 = bitcast <2 x bfloat> %321 to i32, !dbg !64
  %330 = bitcast <2 x bfloat> %322 to i32, !dbg !64
  %331 = bitcast <2 x bfloat> %323 to i32, !dbg !64
  %332 = bitcast <2 x bfloat> %324 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %243, i1 %22) #3, !dbg !64
  %333 = sext i32 %20 to i64, !dbg !65
  %334 = getelementptr float, ptr addrspace(1) %6, i64 %333, !dbg !65
  %335 = and i32 %13, 224, !dbg !66
  %336 = icmp eq i32 %335, 0, !dbg !66
  %337 = and i1 %336, %23, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %320, ptr addrspace(1) %334, i1 %337) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6l4nhxfwkm35it64df37pcj5fh6uxgbsrmcpdepbvu2smp5xxll.py", directory: "/tmp/torchinductor_root/6l")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_4, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_4", linkageName: "triton_per_fused__to_copy_add_mean_pow_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 44, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 27, column: 38, scope: !6)
!15 = !DILocation(line: 34, column: 19, scope: !6)
!16 = !DILocation(line: 35, column: 19, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 36, column: 37, scope: !6)
!19 = !DILocation(line: 36, column: 30, scope: !6)
!20 = !DILocation(line: 36, column: 46, scope: !6)
!21 = !DILocation(line: 37, column: 30, scope: !6)
!22 = !DILocation(line: 37, column: 35, scope: !6)
!23 = !DILocation(line: 38, column: 30, scope: !6)
!24 = !DILocation(line: 38, column: 35, scope: !6)
!25 = !DILocation(line: 39, column: 42, scope: !6)
!26 = !DILocation(line: 39, column: 38, scope: !6)
!27 = !DILocation(line: 39, column: 31, scope: !6)
!28 = !DILocation(line: 39, column: 47, scope: !6)
!29 = !DILocation(line: 40, column: 31, scope: !6)
!30 = !DILocation(line: 40, column: 47, scope: !6)
!31 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 43, column: 40, scope: !6)
!35 = !DILocation(line: 44, column: 12, scope: !6)
!36 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 46, column: 40, scope: !6)
!40 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 48, column: 19, scope: !6)
!44 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !45)
!45 = !DILocation(line: 51, column: 42, scope: !6)
!46 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !45)
!47 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !45)
!48 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !45)
!49 = !DILocation(line: 39, column: 98, scope: !6)
!50 = !DILocation(line: 40, column: 98, scope: !6)
!51 = !DILocation(line: 41, column: 19, scope: !6)
!52 = !DILocation(line: 53, column: 19, scope: !6)
!53 = !DILocation(line: 54, column: 20, scope: !6)
!54 = !DILocation(line: 55, column: 20, scope: !6)
!55 = !DILocation(line: 57, column: 20, scope: !6)
!56 = !DILocation(line: 60, column: 29, scope: !6)
!57 = !DILocation(line: 61, column: 25, scope: !6)
!58 = !DILocation(line: 256, column: 15, scope: !59, inlinedAt: !62)
!59 = distinct !DILexicalBlockFile(scope: !61, file: !60, discriminator: 0)
!60 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!61 = distinct !DILexicalBlockFile(scope: !6, file: !60, discriminator: 0)
!62 = !DILocation(line: 60, column: 26, scope: !6)
!63 = !DILocation(line: 286, column: 36, scope: !61, inlinedAt: !62)
!64 = !DILocation(line: 61, column: 48, scope: !6)
!65 = !DILocation(line: 62, column: 25, scope: !6)
!66 = !DILocation(line: 62, column: 37, scope: !6)
!67 = !DILocation(line: 62, column: 4, scope: !6)
