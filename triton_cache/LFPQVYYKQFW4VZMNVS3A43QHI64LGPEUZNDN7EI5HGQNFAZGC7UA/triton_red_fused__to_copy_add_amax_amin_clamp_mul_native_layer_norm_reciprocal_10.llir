; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 256, !dbg !11
  %.lobit = lshr exact i32 %20, 8, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 2, !dbg !14
  %26 = and i32 %25, 2044, !dbg !14
  %27 = shl i32 %19, 3, !dbg !14
  %28 = and i32 %27, 2040, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = sext i32 %22 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %4, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %40 = bitcast i16 %39 to bfloat, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %5, i64 %30, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %50 = bitcast i16 %49 to bfloat, !dbg !18
  %51 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !20
  %52 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !20
  %53 = fpext bfloat %52 to float, !dbg !20
  %54 = fsub float 0.000000e+00, %53, !dbg !24
  %.inv4 = fcmp ole bfloat %50, 0xR0000, !dbg !25
  %55 = select i1 %.inv4, bfloat 0xR0000, bfloat %50, !dbg !25
  %56 = fpext bfloat %55 to float, !dbg !25
  %57 = fcmp ogt float %54, %56, !dbg !27
  %58 = fcmp uno float %54, 0.000000e+00, !dbg !29
  %59 = or i1 %58, %57, !dbg !30
  %60 = select i1 %59, float %54, float %56, !dbg !31
  %61 = fmul float %60, 0x3F80204080000000, !dbg !32
  %62 = fcmp ogt float %61, 0x3EE4F8B580000000, !dbg !33
  %63 = fcmp uno float %61, 0.000000e+00, !dbg !35
  %64 = or i1 %62, %63, !dbg !36
  %65 = select i1 %64, float %61, float 0x3EE4F8B580000000, !dbg !37
  %66 = add i32 %51, %29
  %67 = and i32 %27, 4088
  %68 = lshr i32 %27, 7
  %.idx = and i32 %68, 16
  %69 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %70 = getelementptr bfloat, ptr addrspace(3) %69, i32 %67
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %72 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 4112
  %73 = getelementptr float, ptr addrspace(3) %69, i32 %67
  %74 = or disjoint i32 %67, 4
  %75 = lshr i32 %27, 9
  %76 = and i32 %75, 4
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %74
  %79 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %80 = getelementptr inbounds nuw i8, ptr addrspace(3) %79, i32 8208
  %81 = zext nneg i32 %28 to i64, !dbg !38
  %82 = zext nneg i32 %26 to i64, !dbg !38
  %83 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 4
  %84 = getelementptr inbounds nuw i8, ptr addrspace(3) %70, i32 4
  %85 = getelementptr inbounds nuw i8, ptr addrspace(3) %70, i32 8
  %86 = getelementptr inbounds nuw i8, ptr addrspace(3) %70, i32 12
  br label %87, !dbg !38

87:                                               ; preds = %16, %._crit_edge
  %88 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %16 ], [ %315, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %105 = phi <8 x float> [ zeroinitializer, %16 ], [ %304, %._crit_edge ]
  %106 = or disjoint i64 %indvars.iv, %82, !dbg !39
  %107 = or disjoint i64 %indvars.iv, %81, !dbg !39
  %108 = icmp samesign ult i64 %106, 3072, !dbg !40
  %109 = icmp samesign ult i64 %107, 3072, !dbg !40
  %110 = trunc nuw nsw i64 %107 to i32, !dbg !41
  %111 = add i32 %51, %110, !dbg !41
  %112 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %113 = add i32 %66, %112, !dbg !41
  %114 = sext i32 %111 to i64, !dbg !42
  %115 = getelementptr bfloat, ptr addrspace(1) %0, i64 %114, !dbg !42
  %116 = and i1 %24, %108, !dbg !43
  %117 = and i1 %23, %109, !dbg !43
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %115, i1 %117) #5, !dbg !44
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !44
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !44
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !44
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %70, i32 %119, i32 %120, i32 %121, i32 %122, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %123 = add nuw nsw i64 %106, 6144, !dbg !46
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !47
  %125 = getelementptr bfloat, ptr addrspace(1) %2, i64 %123, !dbg !48
  %126 = getelementptr i32, ptr addrspace(1) %3, i64 %114, !dbg !49
  %127 = sext i32 %113 to i64, !dbg !49
  %128 = getelementptr i32, ptr addrspace(1) %3, i64 %127, !dbg !49
  %129 = getelementptr bfloat, ptr addrspace(1) %6, i64 %106, !dbg !50
  %130 = getelementptr bfloat, ptr addrspace(1) %7, i64 %106, !dbg !51
  %131 = load <4 x bfloat>, ptr addrspace(3) %71, align 8, !dbg !45
  %132 = load <4 x bfloat>, ptr addrspace(3) %72, align 8, !dbg !45
  %133 = shufflevector <4 x bfloat> %131, <4 x bfloat> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !45
  %134 = fpext <8 x bfloat> %133 to <8 x float>, !dbg !45
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %124, i1 %108) #5, !dbg !52
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !52
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !52
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !52
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !52
  %140 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !52
  %141 = insertelement <4 x i32> %140, i32 %137, i64 1, !dbg !52
  %142 = insertelement <4 x i32> %141, i32 %138, i64 2, !dbg !52
  %143 = insertelement <4 x i32> %142, i32 %139, i64 3, !dbg !52
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !52
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %125, i1 %108) #5, !dbg !53
  %146 = extractvalue { i32, i32 } %145, 0, !dbg !53
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !53
  %148 = extractvalue { i32, i32 } %145, 1, !dbg !53
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !53
  %150 = shufflevector <2 x bfloat> %147, <2 x bfloat> %149, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %151 = fpext <4 x bfloat> %150 to <4 x float>, !dbg !54
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %117) #5, !dbg !55
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !55
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !55
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !55
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !55
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %117) #5, !dbg !55
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !55
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !55
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !55
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !55
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %129, i1 %108) #5, !dbg !56
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !56
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !56
  %165 = extractvalue { i32, i32 } %162, 1, !dbg !56
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !56
  %167 = shufflevector <2 x bfloat> %164, <2 x bfloat> %166, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %168 = fpext <4 x bfloat> %167 to <4 x float>, !dbg !57
  %169 = shufflevector <4 x float> %168, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %130, i1 %108) #5, !dbg !58
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !58
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !58
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !58
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !58
  %175 = shufflevector <2 x bfloat> %172, <2 x bfloat> %174, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %176 = fpext <4 x bfloat> %175 to <4 x float>, !dbg !59
  %177 = shufflevector <4 x float> %176, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %178 = fadd <4 x float> %144, %151, !dbg !60
  %179 = shufflevector <4 x float> %178, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !60
  %180 = sitofp i32 %153 to float, !dbg !61
  %181 = sitofp i32 %154 to float, !dbg !61
  %182 = sitofp i32 %155 to float, !dbg !61
  %183 = sitofp i32 %156 to float, !dbg !61
  %184 = sitofp i32 %158 to float, !dbg !61
  %185 = sitofp i32 %159 to float, !dbg !61
  %186 = sitofp i32 %160 to float, !dbg !61
  %187 = sitofp i32 %161 to float, !dbg !61
  %188 = fmul float %65, %180, !dbg !62
  %189 = fmul float %65, %181, !dbg !62
  %190 = fmul float %65, %182, !dbg !62
  %191 = fmul float %65, %183, !dbg !62
  %192 = fmul float %65, %184, !dbg !62
  %193 = fmul float %65, %185, !dbg !62
  %194 = fmul float %65, %186, !dbg !62
  %195 = fmul float %65, %187, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %196 = bitcast float %188 to i32, !dbg !62
  %197 = bitcast float %189 to i32, !dbg !62
  %198 = bitcast float %190 to i32, !dbg !62
  %199 = bitcast float %191 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %196, i32 %197, i32 %198, i32 %199, i1 true) #5, !dbg !62
  %200 = bitcast float %192 to i32, !dbg !62
  %201 = bitcast float %193 to i32, !dbg !62
  %202 = bitcast float %194 to i32, !dbg !62
  %203 = bitcast float %195 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %78, i32 %200, i32 %201, i32 %202, i32 %203, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %204 = load <4 x float>, ptr addrspace(3) %79, align 16, !dbg !62
  %205 = load <4 x float>, ptr addrspace(3) %80, align 16, !dbg !62
  %206 = shufflevector <4 x float> %204, <4 x float> %205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !63
  %207 = fmul <8 x float> %206, %169, !dbg !63
  %208 = fadd <8 x float> %207, %177, !dbg !64
  %209 = fmul <8 x float> %179, %208, !dbg !65
  %210 = fadd <8 x float> %209, %134, !dbg !66
  br i1 %88, label %._crit_edge, label %211, !dbg !67

211:                                              ; preds = %87
  %212 = fsub <8 x float> %210, %105, !dbg !69
  %213 = extractelement <8 x float> %212, i64 0, !dbg !69
  %214 = fsub <8 x float> %210, %105, !dbg !69
  %215 = extractelement <8 x float> %214, i64 1, !dbg !69
  %216 = fsub <8 x float> %210, %105, !dbg !69
  %217 = extractelement <8 x float> %216, i64 2, !dbg !69
  %218 = fsub <8 x float> %210, %105, !dbg !69
  %219 = extractelement <8 x float> %218, i64 3, !dbg !69
  %220 = fsub <8 x float> %210, %105, !dbg !69
  %221 = extractelement <8 x float> %220, i64 4, !dbg !69
  %222 = fsub <8 x float> %210, %105, !dbg !69
  %223 = extractelement <8 x float> %222, i64 5, !dbg !69
  %224 = fsub <8 x float> %210, %105, !dbg !69
  %225 = extractelement <8 x float> %224, i64 6, !dbg !69
  %226 = fsub <8 x float> %210, %105, !dbg !69
  %227 = extractelement <8 x float> %226, i64 7, !dbg !69
  %228 = fadd float %89, 1.000000e+00, !dbg !70
  %229 = fadd float %90, 1.000000e+00, !dbg !70
  %230 = fadd float %91, 1.000000e+00, !dbg !70
  %231 = fadd float %92, 1.000000e+00, !dbg !70
  %232 = fadd float %93, 1.000000e+00, !dbg !70
  %233 = fadd float %94, 1.000000e+00, !dbg !70
  %234 = fadd float %95, 1.000000e+00, !dbg !70
  %235 = fadd float %96, 1.000000e+00, !dbg !70
  %236 = tail call float @llvm.nvvm.div.full(float %213, float %228), !dbg !71
  %237 = tail call float @llvm.nvvm.div.full(float %215, float %229), !dbg !71
  %238 = tail call float @llvm.nvvm.div.full(float %217, float %230), !dbg !71
  %239 = tail call float @llvm.nvvm.div.full(float %219, float %231), !dbg !71
  %240 = tail call float @llvm.nvvm.div.full(float %221, float %232), !dbg !71
  %241 = tail call float @llvm.nvvm.div.full(float %223, float %233), !dbg !71
  %242 = tail call float @llvm.nvvm.div.full(float %225, float %234), !dbg !71
  %243 = tail call float @llvm.nvvm.div.full(float %227, float %235), !dbg !71
  %244 = insertelement <8 x float> poison, float %236, i64 0, !dbg !72
  %245 = insertelement <8 x float> %244, float %237, i64 1, !dbg !72
  %246 = insertelement <8 x float> %245, float %238, i64 2, !dbg !72
  %247 = insertelement <8 x float> %246, float %239, i64 3, !dbg !72
  %248 = insertelement <8 x float> %247, float %240, i64 4, !dbg !72
  %249 = insertelement <8 x float> %248, float %241, i64 5, !dbg !72
  %250 = insertelement <8 x float> %249, float %242, i64 6, !dbg !72
  %251 = insertelement <8 x float> %250, float %243, i64 7, !dbg !72
  %252 = fadd <8 x float> %105, %251, !dbg !72
  %253 = fsub <8 x float> %210, %252, !dbg !73
  %254 = fsub <8 x float> %210, %252, !dbg !73
  %255 = fsub <8 x float> %210, %252, !dbg !73
  %256 = fsub <8 x float> %210, %252, !dbg !73
  %257 = fsub <8 x float> %210, %252, !dbg !73
  %258 = fsub <8 x float> %210, %252, !dbg !73
  %259 = fsub <8 x float> %210, %252, !dbg !73
  %260 = fsub <8 x float> %210, %252, !dbg !73
  %261 = fmul <8 x float> %212, %253, !dbg !74
  %262 = extractelement <8 x float> %261, i64 0, !dbg !74
  %263 = fmul <8 x float> %214, %254, !dbg !74
  %264 = extractelement <8 x float> %263, i64 1, !dbg !74
  %265 = fmul <8 x float> %216, %255, !dbg !74
  %266 = extractelement <8 x float> %265, i64 2, !dbg !74
  %267 = fmul <8 x float> %218, %256, !dbg !74
  %268 = extractelement <8 x float> %267, i64 3, !dbg !74
  %269 = fmul <8 x float> %220, %257, !dbg !74
  %270 = extractelement <8 x float> %269, i64 4, !dbg !74
  %271 = fmul <8 x float> %222, %258, !dbg !74
  %272 = extractelement <8 x float> %271, i64 5, !dbg !74
  %273 = fmul <8 x float> %224, %259, !dbg !74
  %274 = extractelement <8 x float> %273, i64 6, !dbg !74
  %275 = fmul <8 x float> %226, %260, !dbg !74
  %276 = extractelement <8 x float> %275, i64 7, !dbg !74
  %277 = fadd float %97, %262, !dbg !75
  %278 = fadd float %98, %264, !dbg !75
  %279 = fadd float %99, %266, !dbg !75
  %280 = fadd float %100, %268, !dbg !75
  %281 = fadd float %101, %270, !dbg !75
  %282 = fadd float %102, %272, !dbg !75
  %283 = fadd float %103, %274, !dbg !75
  %284 = fadd float %104, %276, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %87, %211
  %285 = phi float [ %277, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %286 = phi float [ %278, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %287 = phi float [ %279, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %288 = phi float [ %280, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %289 = phi float [ %281, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %290 = phi float [ %282, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %291 = phi float [ %283, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %292 = phi float [ %284, %211 ], [ 0.000000e+00, %87 ], !dbg !68
  %293 = phi float [ %228, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %294 = phi float [ %229, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %295 = phi float [ %230, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %296 = phi float [ %231, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %297 = phi float [ %232, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %298 = phi float [ %233, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %299 = phi float [ %234, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %300 = phi float [ %235, %211 ], [ 1.000000e+00, %87 ], !dbg !68
  %301 = phi <8 x float> [ %252, %211 ], [ %210, %87 ]
  %302 = insertelement <8 x i1> poison, i1 %116, i64 0, !dbg !76
  %303 = shufflevector <8 x i1> %302, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !76
  %304 = select <8 x i1> %303, <8 x float> %301, <8 x float> %105, !dbg !76
  %305 = select i1 %116, float %285, float %97, !dbg !77
  %306 = select i1 %116, float %286, float %98, !dbg !77
  %307 = select i1 %116, float %287, float %99, !dbg !77
  %308 = select i1 %116, float %288, float %100, !dbg !77
  %309 = select i1 %116, float %289, float %101, !dbg !77
  %310 = select i1 %116, float %290, float %102, !dbg !77
  %311 = select i1 %116, float %291, float %103, !dbg !77
  %312 = select i1 %116, float %292, float %104, !dbg !77
  %313 = select i1 %116, float %293, float %89, !dbg !78
  %314 = select i1 %116, float %294, float %90, !dbg !78
  %315 = select i1 %116, float %295, float %91, !dbg !78
  %316 = select i1 %116, float %296, float %92, !dbg !78
  %317 = select i1 %116, float %297, float %93, !dbg !78
  %318 = select i1 %116, float %298, float %94, !dbg !78
  %319 = select i1 %116, float %299, float %95, !dbg !78
  %320 = select i1 %116, float %300, float %96, !dbg !78
  %321 = getelementptr bfloat, ptr addrspace(1) %8, i64 %114, !dbg !79
  %322 = extractelement <8 x float> %210, i64 0, !dbg !80
  %323 = fptrunc float %322 to bfloat, !dbg !80
  %324 = extractelement <8 x float> %210, i64 1, !dbg !80
  %325 = fptrunc float %324 to bfloat, !dbg !80
  %326 = extractelement <8 x float> %210, i64 2, !dbg !80
  %327 = fptrunc float %326 to bfloat, !dbg !80
  %328 = extractelement <8 x float> %210, i64 3, !dbg !80
  %329 = fptrunc float %328 to bfloat, !dbg !80
  %330 = extractelement <8 x float> %210, i64 4, !dbg !80
  %331 = fptrunc float %330 to bfloat, !dbg !80
  %332 = extractelement <8 x float> %210, i64 5, !dbg !80
  %333 = fptrunc float %332 to bfloat, !dbg !80
  %334 = extractelement <8 x float> %210, i64 6, !dbg !80
  %335 = fptrunc float %334 to bfloat, !dbg !80
  %336 = extractelement <8 x float> %210, i64 7, !dbg !80
  %337 = fptrunc float %336 to bfloat, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %338 = bitcast bfloat %323 to i16, !dbg !80
  %339 = bitcast bfloat %325 to i16, !dbg !80
  %340 = bitcast bfloat %327 to i16, !dbg !80
  %341 = bitcast bfloat %329 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %71, i16 %338, i16 %339, i16 %340, i16 %341, i1 true) #5, !dbg !80
  %342 = bitcast bfloat %331 to i16, !dbg !80
  %343 = bitcast bfloat %333 to i16, !dbg !80
  %344 = bitcast bfloat %335 to i16, !dbg !80
  %345 = bitcast bfloat %337 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %72, i16 %342, i16 %343, i16 %344, i16 %345, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %.extract110 = load i32, ptr addrspace(3) %70, align 16, !dbg !80
  %.extract112 = load i32, ptr addrspace(3) %84, align 4, !dbg !80
  %.extract114 = load i32, ptr addrspace(3) %85, align 8, !dbg !80
  %.extract116 = load i32, ptr addrspace(3) %86, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract110, i32 %.extract112, i32 %.extract114, i32 %.extract116, ptr addrspace(1) %321, i1 %117) #5, !dbg !80
  br i1 %88, label %87, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %346 = lshr i32 %19, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %347 = extractelement <8 x float> %304, i64 0, !dbg !83
  %348 = extractelement <8 x float> %304, i64 1, !dbg !83
  %349 = fsub float %348, %347, !dbg !83
  %350 = fadd float %313, %314, !dbg !85
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !86
  %352 = tail call float @llvm.nvvm.div.full(float %314, float %350), !dbg !87
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !88
  %354 = fmul float %349, %353, !dbg !89
  %355 = fadd float %347, %354, !dbg !90
  %356 = fadd float %305, %306, !dbg !91
  %357 = fmul float %349, %349, !dbg !92
  %358 = fmul float %357, %313, !dbg !93
  %359 = fmul float %358, %353, !dbg !94
  %360 = fadd float %356, %359, !dbg !95
  %361 = extractelement <8 x float> %304, i64 2, !dbg !83
  %362 = fsub float %361, %355, !dbg !83
  %363 = fadd float %315, %350, !dbg !85
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !86
  %365 = tail call float @llvm.nvvm.div.full(float %315, float %363), !dbg !87
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !88
  %367 = fmul float %366, %362, !dbg !89
  %368 = fadd float %355, %367, !dbg !90
  %369 = fadd float %307, %360, !dbg !91
  %370 = fmul float %362, %362, !dbg !92
  %371 = fmul float %350, %370, !dbg !93
  %372 = fmul float %366, %371, !dbg !94
  %373 = fadd float %369, %372, !dbg !95
  %374 = extractelement <8 x float> %304, i64 3, !dbg !83
  %375 = fsub float %374, %368, !dbg !83
  %376 = fadd float %316, %363, !dbg !85
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !86
  %378 = tail call float @llvm.nvvm.div.full(float %316, float %376), !dbg !87
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !88
  %380 = fmul float %379, %375, !dbg !89
  %381 = fadd float %368, %380, !dbg !90
  %382 = fadd float %308, %373, !dbg !91
  %383 = fmul float %375, %375, !dbg !92
  %384 = fmul float %363, %383, !dbg !93
  %385 = fmul float %379, %384, !dbg !94
  %386 = fadd float %382, %385, !dbg !95
  %387 = extractelement <8 x float> %304, i64 4, !dbg !83
  %388 = extractelement <8 x float> %304, i64 5, !dbg !83
  %389 = fsub float %388, %387, !dbg !83
  %390 = fadd float %317, %318, !dbg !85
  %391 = fcmp oeq float %390, 0.000000e+00, !dbg !86
  %392 = tail call float @llvm.nvvm.div.full(float %318, float %390), !dbg !87
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !88
  %394 = fmul float %389, %393, !dbg !89
  %395 = fadd float %387, %394, !dbg !90
  %396 = fadd float %309, %310, !dbg !91
  %397 = fmul float %389, %389, !dbg !92
  %398 = fmul float %397, %317, !dbg !93
  %399 = fmul float %398, %393, !dbg !94
  %400 = fadd float %396, %399, !dbg !95
  %401 = extractelement <8 x float> %304, i64 6, !dbg !83
  %402 = fsub float %401, %395, !dbg !83
  %403 = fadd float %319, %390, !dbg !85
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !86
  %405 = tail call float @llvm.nvvm.div.full(float %319, float %403), !dbg !87
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !88
  %407 = fmul float %406, %402, !dbg !89
  %408 = fadd float %395, %407, !dbg !90
  %409 = fadd float %311, %400, !dbg !91
  %410 = fmul float %402, %402, !dbg !92
  %411 = fmul float %390, %410, !dbg !93
  %412 = fmul float %406, %411, !dbg !94
  %413 = fadd float %409, %412, !dbg !95
  %414 = extractelement <8 x float> %304, i64 7, !dbg !83
  %415 = fsub float %414, %408, !dbg !83
  %416 = fadd float %320, %403, !dbg !85
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !86
  %418 = tail call float @llvm.nvvm.div.full(float %320, float %416), !dbg !87
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !88
  %420 = fmul float %419, %415, !dbg !89
  %421 = fadd float %408, %420, !dbg !90
  %422 = fadd float %312, %413, !dbg !91
  %423 = fmul float %415, %415, !dbg !92
  %424 = fmul float %403, %423, !dbg !93
  %425 = fmul float %419, %424, !dbg !94
  %426 = fadd float %422, %425, !dbg !95
  %427 = bitcast float %381 to i32, !dbg !81
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 16, i32 31), !dbg !81
  %429 = bitcast i32 %428 to float, !dbg !81
  %430 = bitcast float %386 to i32, !dbg !81
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 16, i32 31), !dbg !81
  %432 = bitcast i32 %431 to float, !dbg !81
  %433 = bitcast float %376 to i32, !dbg !81
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 16, i32 31), !dbg !81
  %435 = bitcast i32 %434 to float, !dbg !81
  %436 = fsub float %429, %381, !dbg !83
  %437 = fadd float %376, %435, !dbg !85
  %438 = fcmp oeq float %437, 0.000000e+00, !dbg !86
  %439 = tail call float @llvm.nvvm.div.full(float %435, float %437), !dbg !87
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !88
  %441 = fmul float %436, %440, !dbg !89
  %442 = fadd float %381, %441, !dbg !90
  %443 = fadd float %386, %432, !dbg !91
  %444 = fmul float %436, %436, !dbg !92
  %445 = fmul float %376, %444, !dbg !93
  %446 = fmul float %445, %440, !dbg !94
  %447 = fadd float %443, %446, !dbg !95
  %448 = bitcast float %442 to i32, !dbg !81
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 8, i32 31), !dbg !81
  %450 = bitcast i32 %449 to float, !dbg !81
  %451 = bitcast float %447 to i32, !dbg !81
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 8, i32 31), !dbg !81
  %453 = bitcast i32 %452 to float, !dbg !81
  %454 = bitcast float %437 to i32, !dbg !81
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 8, i32 31), !dbg !81
  %456 = bitcast i32 %455 to float, !dbg !81
  %457 = fsub float %450, %442, !dbg !83
  %458 = fadd float %437, %456, !dbg !85
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !86
  %460 = tail call float @llvm.nvvm.div.full(float %456, float %458), !dbg !87
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !88
  %462 = fmul float %457, %461, !dbg !89
  %463 = fadd float %442, %462, !dbg !90
  %464 = fadd float %447, %453, !dbg !91
  %465 = fmul float %457, %457, !dbg !92
  %466 = fmul float %437, %465, !dbg !93
  %467 = fmul float %461, %466, !dbg !94
  %468 = fadd float %464, %467, !dbg !95
  %469 = bitcast float %463 to i32, !dbg !81
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 4, i32 31), !dbg !81
  %471 = bitcast i32 %470 to float, !dbg !81
  %472 = bitcast float %468 to i32, !dbg !81
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 4, i32 31), !dbg !81
  %474 = bitcast i32 %473 to float, !dbg !81
  %475 = bitcast float %458 to i32, !dbg !81
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 4, i32 31), !dbg !81
  %477 = bitcast i32 %476 to float, !dbg !81
  %478 = fsub float %471, %463, !dbg !83
  %479 = fadd float %458, %477, !dbg !85
  %480 = fcmp oeq float %479, 0.000000e+00, !dbg !86
  %481 = tail call float @llvm.nvvm.div.full(float %477, float %479), !dbg !87
  %482 = select i1 %480, float 0.000000e+00, float %481, !dbg !88
  %483 = fmul float %478, %482, !dbg !89
  %484 = fadd float %463, %483, !dbg !90
  %485 = fadd float %468, %474, !dbg !91
  %486 = fmul float %478, %478, !dbg !92
  %487 = fmul float %458, %486, !dbg !93
  %488 = fmul float %482, %487, !dbg !94
  %489 = fadd float %485, %488, !dbg !95
  %490 = bitcast float %484 to i32, !dbg !81
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 2, i32 31), !dbg !81
  %492 = bitcast i32 %491 to float, !dbg !81
  %493 = bitcast float %489 to i32, !dbg !81
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 2, i32 31), !dbg !81
  %495 = bitcast i32 %494 to float, !dbg !81
  %496 = bitcast float %479 to i32, !dbg !81
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 2, i32 31), !dbg !81
  %498 = bitcast i32 %497 to float, !dbg !81
  %499 = fsub float %492, %484, !dbg !83
  %500 = fadd float %479, %498, !dbg !85
  %501 = fcmp oeq float %500, 0.000000e+00, !dbg !86
  %502 = tail call float @llvm.nvvm.div.full(float %498, float %500), !dbg !87
  %503 = select i1 %501, float 0.000000e+00, float %502, !dbg !88
  %504 = fmul float %499, %503, !dbg !89
  %505 = fadd float %484, %504, !dbg !90
  %506 = fadd float %489, %495, !dbg !91
  %507 = fmul float %499, %499, !dbg !92
  %508 = fmul float %479, %507, !dbg !93
  %509 = fmul float %503, %508, !dbg !94
  %510 = fadd float %506, %509, !dbg !95
  %511 = bitcast float %505 to i32, !dbg !81
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 1, i32 31), !dbg !81
  %513 = bitcast i32 %512 to float, !dbg !81
  %514 = bitcast float %510 to i32, !dbg !81
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 1, i32 31), !dbg !81
  %516 = bitcast i32 %515 to float, !dbg !81
  %517 = bitcast float %500 to i32, !dbg !81
  %518 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %517, i32 1, i32 31), !dbg !81
  %519 = bitcast i32 %518 to float, !dbg !81
  %520 = fsub float %513, %505, !dbg !83
  %521 = fadd float %500, %519, !dbg !85
  %522 = fcmp oeq float %521, 0.000000e+00, !dbg !86
  %523 = tail call float @llvm.nvvm.div.full(float %519, float %521), !dbg !87
  %524 = select i1 %522, float 0.000000e+00, float %523, !dbg !88
  %525 = fmul float %520, %524, !dbg !89
  %526 = fadd float %505, %525, !dbg !90
  %527 = fadd float %510, %516, !dbg !91
  %528 = fmul float %520, %520, !dbg !92
  %529 = fmul float %500, %528, !dbg !93
  %530 = fmul float %524, %529, !dbg !94
  %531 = fadd float %527, %530, !dbg !95
  %532 = bitcast float %421 to i32, !dbg !81
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 16, i32 31), !dbg !81
  %534 = bitcast i32 %533 to float, !dbg !81
  %535 = bitcast float %426 to i32, !dbg !81
  %536 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %535, i32 16, i32 31), !dbg !81
  %537 = bitcast i32 %536 to float, !dbg !81
  %538 = bitcast float %416 to i32, !dbg !81
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 16, i32 31), !dbg !81
  %540 = bitcast i32 %539 to float, !dbg !81
  %541 = fsub float %534, %421, !dbg !83
  %542 = fadd float %416, %540, !dbg !85
  %543 = fcmp oeq float %542, 0.000000e+00, !dbg !86
  %544 = tail call float @llvm.nvvm.div.full(float %540, float %542), !dbg !87
  %545 = select i1 %543, float 0.000000e+00, float %544, !dbg !88
  %546 = fmul float %541, %545, !dbg !89
  %547 = fadd float %421, %546, !dbg !90
  %548 = fadd float %426, %537, !dbg !91
  %549 = fmul float %541, %541, !dbg !92
  %550 = fmul float %416, %549, !dbg !93
  %551 = fmul float %550, %545, !dbg !94
  %552 = fadd float %548, %551, !dbg !95
  %553 = bitcast float %547 to i32, !dbg !81
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 8, i32 31), !dbg !81
  %555 = bitcast i32 %554 to float, !dbg !81
  %556 = bitcast float %552 to i32, !dbg !81
  %557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %556, i32 8, i32 31), !dbg !81
  %558 = bitcast i32 %557 to float, !dbg !81
  %559 = bitcast float %542 to i32, !dbg !81
  %560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %559, i32 8, i32 31), !dbg !81
  %561 = bitcast i32 %560 to float, !dbg !81
  %562 = fsub float %555, %547, !dbg !83
  %563 = fadd float %542, %561, !dbg !85
  %564 = fcmp oeq float %563, 0.000000e+00, !dbg !86
  %565 = tail call float @llvm.nvvm.div.full(float %561, float %563), !dbg !87
  %566 = select i1 %564, float 0.000000e+00, float %565, !dbg !88
  %567 = fmul float %562, %566, !dbg !89
  %568 = fadd float %547, %567, !dbg !90
  %569 = fadd float %552, %558, !dbg !91
  %570 = fmul float %562, %562, !dbg !92
  %571 = fmul float %542, %570, !dbg !93
  %572 = fmul float %566, %571, !dbg !94
  %573 = fadd float %569, %572, !dbg !95
  %574 = bitcast float %568 to i32, !dbg !81
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 4, i32 31), !dbg !81
  %576 = bitcast i32 %575 to float, !dbg !81
  %577 = bitcast float %573 to i32, !dbg !81
  %578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %577, i32 4, i32 31), !dbg !81
  %579 = bitcast i32 %578 to float, !dbg !81
  %580 = bitcast float %563 to i32, !dbg !81
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 4, i32 31), !dbg !81
  %582 = bitcast i32 %581 to float, !dbg !81
  %583 = fsub float %576, %568, !dbg !83
  %584 = fadd float %563, %582, !dbg !85
  %585 = fcmp oeq float %584, 0.000000e+00, !dbg !86
  %586 = tail call float @llvm.nvvm.div.full(float %582, float %584), !dbg !87
  %587 = select i1 %585, float 0.000000e+00, float %586, !dbg !88
  %588 = fmul float %583, %587, !dbg !89
  %589 = fadd float %568, %588, !dbg !90
  %590 = fadd float %573, %579, !dbg !91
  %591 = fmul float %583, %583, !dbg !92
  %592 = fmul float %563, %591, !dbg !93
  %593 = fmul float %587, %592, !dbg !94
  %594 = fadd float %590, %593, !dbg !95
  %595 = bitcast float %589 to i32, !dbg !81
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %595, i32 2, i32 31), !dbg !81
  %597 = bitcast i32 %596 to float, !dbg !81
  %598 = bitcast float %594 to i32, !dbg !81
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 2, i32 31), !dbg !81
  %600 = bitcast i32 %599 to float, !dbg !81
  %601 = bitcast float %584 to i32, !dbg !81
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %601, i32 2, i32 31), !dbg !81
  %603 = bitcast i32 %602 to float, !dbg !81
  %604 = fsub float %597, %589, !dbg !83
  %605 = fadd float %584, %603, !dbg !85
  %606 = fcmp oeq float %605, 0.000000e+00, !dbg !86
  %607 = tail call float @llvm.nvvm.div.full(float %603, float %605), !dbg !87
  %608 = select i1 %606, float 0.000000e+00, float %607, !dbg !88
  %609 = fmul float %604, %608, !dbg !89
  %610 = fadd float %589, %609, !dbg !90
  %611 = fadd float %594, %600, !dbg !91
  %612 = fmul float %604, %604, !dbg !92
  %613 = fmul float %584, %612, !dbg !93
  %614 = fmul float %608, %613, !dbg !94
  %615 = fadd float %611, %614, !dbg !95
  %616 = bitcast float %610 to i32, !dbg !81
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 1, i32 31), !dbg !81
  %618 = bitcast i32 %617 to float, !dbg !81
  %619 = bitcast float %615 to i32, !dbg !81
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 1, i32 31), !dbg !81
  %621 = bitcast i32 %620 to float, !dbg !81
  %622 = bitcast float %605 to i32, !dbg !81
  %623 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %622, i32 1, i32 31), !dbg !81
  %624 = bitcast i32 %623 to float, !dbg !81
  %625 = fsub float %618, %610, !dbg !83
  %626 = fadd float %605, %624, !dbg !85
  %627 = fcmp oeq float %626, 0.000000e+00, !dbg !86
  %628 = tail call float @llvm.nvvm.div.full(float %624, float %626), !dbg !87
  %629 = select i1 %627, float 0.000000e+00, float %628, !dbg !88
  %630 = fmul float %625, %629, !dbg !89
  %631 = fadd float %610, %630, !dbg !90
  %632 = fadd float %615, %621, !dbg !91
  %633 = fmul float %625, %625, !dbg !92
  %634 = fmul float %605, %633, !dbg !93
  %635 = fmul float %629, %634, !dbg !94
  %636 = fadd float %632, %635, !dbg !95
  %637 = and i32 %346, 15, !dbg !81
  %638 = icmp eq i32 %21, 0, !dbg !81
  %639 = getelementptr float, ptr addrspace(3) @global_smem, i32 %637, !dbg !81
  %640 = bitcast float %526 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %639, <1 x i32> %640, i1 %638) #5, !dbg !81
  %641 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %637, !dbg !81
  %642 = bitcast float %531 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 %638) #5, !dbg !81
  %643 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %637, !dbg !81
  %644 = bitcast float %521 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %643, <1 x i32> %644, i1 %638) #5, !dbg !81
  %645 = or disjoint i32 %637, 16, !dbg !81
  %646 = getelementptr float, ptr addrspace(3) @global_smem, i32 %645, !dbg !81
  %647 = bitcast float %631 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %647, i1 %638) #5, !dbg !81
  %648 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %645, !dbg !81
  %649 = bitcast float %636 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %649, i1 %638) #5, !dbg !81
  %650 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %645, !dbg !81
  %651 = bitcast float %626 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %651, i1 %638) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %652 = icmp slt i32 %19, 32, !dbg !81
  %653 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !81
  %654 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %653, i1 %652) #5, !dbg !81
  %655 = bitcast i32 %654 to float, !dbg !81
  %656 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !81
  %657 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %656, i1 %652) #5, !dbg !81
  %658 = bitcast i32 %657 to float, !dbg !81
  %659 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !81
  %660 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %659, i1 %652) #5, !dbg !81
  %661 = bitcast i32 %660 to float, !dbg !81
  %662 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %654, i32 8, i32 31), !dbg !81
  %663 = bitcast i32 %662 to float, !dbg !81
  %664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %657, i32 8, i32 31), !dbg !81
  %665 = bitcast i32 %664 to float, !dbg !81
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 8, i32 31), !dbg !81
  %667 = bitcast i32 %666 to float, !dbg !81
  %668 = fsub float %663, %655, !dbg !83
  %669 = fadd float %661, %667, !dbg !85
  %670 = fcmp oeq float %669, 0.000000e+00, !dbg !86
  %671 = tail call float @llvm.nvvm.div.full(float %667, float %669), !dbg !87
  %672 = select i1 %670, float 0.000000e+00, float %671, !dbg !88
  %673 = fmul float %668, %672, !dbg !89
  %674 = fadd float %673, %655, !dbg !90
  %675 = fadd float %658, %665, !dbg !91
  %676 = fmul float %668, %668, !dbg !92
  %677 = fmul float %676, %661, !dbg !93
  %678 = fmul float %677, %672, !dbg !94
  %679 = fadd float %675, %678, !dbg !95
  %680 = bitcast float %674 to i32, !dbg !81
  %681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %680, i32 4, i32 31), !dbg !81
  %682 = bitcast i32 %681 to float, !dbg !81
  %683 = bitcast float %679 to i32, !dbg !81
  %684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %683, i32 4, i32 31), !dbg !81
  %685 = bitcast i32 %684 to float, !dbg !81
  %686 = bitcast float %669 to i32, !dbg !81
  %687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %686, i32 4, i32 31), !dbg !81
  %688 = bitcast i32 %687 to float, !dbg !81
  %689 = fsub float %682, %674, !dbg !83
  %690 = fadd float %669, %688, !dbg !85
  %691 = fcmp oeq float %690, 0.000000e+00, !dbg !86
  %692 = tail call float @llvm.nvvm.div.full(float %688, float %690), !dbg !87
  %693 = select i1 %691, float 0.000000e+00, float %692, !dbg !88
  %694 = fmul float %689, %693, !dbg !89
  %695 = fadd float %674, %694, !dbg !90
  %696 = fadd float %679, %685, !dbg !91
  %697 = fmul float %689, %689, !dbg !92
  %698 = fmul float %669, %697, !dbg !93
  %699 = fmul float %693, %698, !dbg !94
  %700 = fadd float %696, %699, !dbg !95
  %701 = bitcast float %695 to i32, !dbg !81
  %702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %701, i32 2, i32 31), !dbg !81
  %703 = bitcast i32 %702 to float, !dbg !81
  %704 = bitcast float %700 to i32, !dbg !81
  %705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %704, i32 2, i32 31), !dbg !81
  %706 = bitcast i32 %705 to float, !dbg !81
  %707 = bitcast float %690 to i32, !dbg !81
  %708 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %707, i32 2, i32 31), !dbg !81
  %709 = bitcast i32 %708 to float, !dbg !81
  %710 = fsub float %703, %695, !dbg !83
  %711 = fadd float %690, %709, !dbg !85
  %712 = fcmp oeq float %711, 0.000000e+00, !dbg !86
  %713 = tail call float @llvm.nvvm.div.full(float %709, float %711), !dbg !87
  %714 = select i1 %712, float 0.000000e+00, float %713, !dbg !88
  %715 = fmul float %710, %714, !dbg !89
  %716 = fadd float %695, %715, !dbg !90
  %717 = fadd float %700, %706, !dbg !91
  %718 = fmul float %710, %710, !dbg !92
  %719 = fmul float %690, %718, !dbg !93
  %720 = fmul float %714, %719, !dbg !94
  %721 = fadd float %717, %720, !dbg !95
  %722 = bitcast float %716 to i32, !dbg !81
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 1, i32 31), !dbg !81
  %724 = bitcast i32 %723 to float, !dbg !81
  %725 = bitcast float %721 to i32, !dbg !81
  %726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %725, i32 1, i32 31), !dbg !81
  %727 = bitcast i32 %726 to float, !dbg !81
  %728 = bitcast float %711 to i32, !dbg !81
  %729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %728, i32 1, i32 31), !dbg !81
  %730 = bitcast i32 %729 to float, !dbg !81
  %731 = fsub float %724, %716, !dbg !83
  %732 = fadd float %711, %730, !dbg !85
  %733 = fcmp oeq float %732, 0.000000e+00, !dbg !86
  %734 = tail call float @llvm.nvvm.div.full(float %730, float %732), !dbg !87
  %735 = select i1 %733, float 0.000000e+00, float %734, !dbg !88
  %736 = fmul float %731, %735, !dbg !89
  %737 = fadd float %716, %736, !dbg !90
  %738 = fadd float %721, %727, !dbg !91
  %739 = fmul float %731, %731, !dbg !92
  %740 = fmul float %711, %739, !dbg !93
  %741 = fmul float %735, %740, !dbg !94
  %742 = fadd float %738, %741, !dbg !95
  %743 = and i32 %19, 15, !dbg !81
  %744 = icmp eq i32 %743, 0, !dbg !81
  %745 = and i1 %652, %744, !dbg !81
  %746 = bitcast float %737 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %653, <1 x i32> %746, i1 %745) #5, !dbg !81
  %747 = bitcast float %742 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %747, i1 %745) #5, !dbg !81
  %748 = bitcast float %732 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %748, i1 %745) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %749 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %750 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !81
  %751 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !81
  %752 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !81
  %753 = tail call float @llvm.nvvm.div.full(float %751, float 3.072000e+03), !dbg !96
  %754 = tail call float @llvm.nvvm.div.full(float %752, float 3.072000e+03), !dbg !96
  %755 = fadd float %753, 0x3EB0C6F7A0000000, !dbg !97
  %756 = fadd float %754, 0x3EB0C6F7A0000000, !dbg !97
  %757 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %758 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %759 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %760 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i88 = icmp eq i32 %760, 0, !dbg !98
  br i1 %.not.i88, label %763, label %761, !dbg !98

761:                                              ; preds = %__nv_rsqrtf.exit
  %762 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %755), !dbg !98
  br label %__nv_rsqrtf.exit90, !dbg !98

763:                                              ; preds = %__nv_rsqrtf.exit
  %764 = tail call float @llvm.nvvm.rsqrt.approx.f(float %755), !dbg !98
  br label %__nv_rsqrtf.exit90, !dbg !98

__nv_rsqrtf.exit90:                               ; preds = %761, %763
  %.0.i89 = phi float [ %762, %761 ], [ %764, %763 ], !dbg !98
  %765 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %766 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %767 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %768 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i100 = icmp eq i32 %768, 0, !dbg !98
  br i1 %.not.i100, label %771, label %769, !dbg !98

769:                                              ; preds = %__nv_rsqrtf.exit90
  %770 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %756), !dbg !98
  br label %__nv_rsqrtf.exit102, !dbg !98

771:                                              ; preds = %__nv_rsqrtf.exit90
  %772 = tail call float @llvm.nvvm.rsqrt.approx.f(float %756), !dbg !98
  br label %__nv_rsqrtf.exit102, !dbg !98

__nv_rsqrtf.exit102:                              ; preds = %769, %771
  %.0.i101 = phi float [ %770, %769 ], [ %772, %771 ], !dbg !98
  %773 = lshr i32 %27, 8
  %774 = and i32 %773, 8
  %775 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %774
  %776 = getelementptr bfloat, ptr addrspace(3) %775, i32 %67
  %777 = insertelement <2 x float> poison, float %.0.i89, i64 0, !dbg !99
  %778 = shufflevector <2 x float> %777, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %779 = insertelement <2 x float> poison, float %749, i64 0, !dbg !100
  %780 = shufflevector <2 x float> %779, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %781 = insertelement <4 x float> poison, float %.0.i101, i64 0, !dbg !99
  %782 = shufflevector <4 x float> %781, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !99
  %783 = insertelement <4 x float> poison, float %750, i64 0, !dbg !100
  %784 = shufflevector <4 x float> %783, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !100
  %785 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 4
  %786 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 8
  %787 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 12
  br label %788, !dbg !101

788:                                              ; preds = %__nv_rsqrtf.exit102, %788
  %789 = phi i1 [ true, %__nv_rsqrtf.exit102 ], [ false, %788 ]
  %indvars.iv160 = phi i64 [ 0, %__nv_rsqrtf.exit102 ], [ 2048, %788 ]
  %790 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit102 ], [ %900, %788 ]
  %791 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit102 ], [ %901, %788 ]
  %792 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit102 ], [ %899, %788 ]
  %793 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit102 ], [ %915, %788 ]
  %794 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit102 ], [ %904, %788 ]
  %795 = or disjoint i64 %indvars.iv160, %82, !dbg !102
  %796 = or disjoint i64 %indvars.iv160, %81, !dbg !102
  %797 = icmp samesign ult i64 %795, 3072, !dbg !103
  %798 = icmp samesign ult i64 %796, 3072, !dbg !103
  %799 = trunc nuw nsw i64 %796 to i32, !dbg !104
  %800 = add i32 %51, %799, !dbg !104
  %801 = sext i32 %800 to i64, !dbg !105
  %802 = getelementptr bfloat, ptr addrspace(1) %8, i64 %801, !dbg !105
  %803 = and i1 %24, %797, !dbg !106
  %804 = and i1 %23, %798, !dbg !106
  %805 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %802, i1 %804) #5, !dbg !107
  %806 = extractvalue { i32, i32, i32, i32 } %805, 0, !dbg !107
  %807 = extractvalue { i32, i32, i32, i32 } %805, 1, !dbg !107
  %808 = extractvalue { i32, i32, i32, i32 } %805, 2, !dbg !107
  %809 = extractvalue { i32, i32, i32, i32 } %805, 3, !dbg !107
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %776, i32 %806, i32 %807, i32 %808, i32 %809, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %810 = or disjoint i64 %795, 12288, !dbg !108
  %811 = getelementptr float, ptr addrspace(1) %1, i64 %810, !dbg !109
  %812 = getelementptr bfloat, ptr addrspace(1) %2, i64 %810, !dbg !110
  %813 = add nuw nsw i64 %795, 9216, !dbg !111
  %814 = getelementptr float, ptr addrspace(1) %1, i64 %813, !dbg !112
  %815 = getelementptr bfloat, ptr addrspace(1) %2, i64 %813, !dbg !113
  %816 = fcmp uno <2 x float> %792, zeroinitializer, !dbg !114
  %817 = fcmp uno float %790, 0.000000e+00, !dbg !114
  %818 = fcmp uno float %791, 0.000000e+00, !dbg !114
  %819 = fcmp uno <4 x float> %794, zeroinitializer, !dbg !114
  %820 = load <2 x bfloat>, ptr addrspace(3) %71, align 8, !dbg !99
  %821 = fpext <2 x bfloat> %820 to <2 x float>, !dbg !116
  %822 = fsub <2 x float> %821, %780, !dbg !100
  %823 = fmul <2 x float> %778, %822, !dbg !99
  %824 = insertelement <2 x i1> poison, i1 %803, i64 0, !dbg !117
  %825 = shufflevector <2 x i1> %824, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !117
  %826 = fcmp uno <8 x float> %793, zeroinitializer, !dbg !118
  %827 = load <4 x bfloat>, ptr addrspace(3) %72, align 8, !dbg !99
  %828 = fpext <4 x bfloat> %827 to <4 x float>, !dbg !116
  %829 = fsub <4 x float> %828, %784, !dbg !100
  %830 = fmul <4 x float> %782, %829, !dbg !99
  %831 = load <2 x bfloat>, ptr addrspace(3) %83, align 4, !dbg !99
  %832 = fpext <2 x bfloat> %831 to <2 x float>, !dbg !116
  %833 = fsub <2 x float> %832, %780, !dbg !100
  %834 = fmul <2 x float> %778, %833, !dbg !99
  %835 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %811, i1 %797) #5, !dbg !120
  %836 = extractvalue { i32, i32, i32, i32 } %835, 0, !dbg !120
  %837 = extractvalue { i32, i32, i32, i32 } %835, 1, !dbg !120
  %838 = extractvalue { i32, i32, i32, i32 } %835, 2, !dbg !120
  %839 = extractvalue { i32, i32, i32, i32 } %835, 3, !dbg !120
  %840 = insertelement <2 x i32> poison, i32 %836, i64 0, !dbg !120
  %841 = insertelement <2 x i32> %840, i32 %837, i64 1, !dbg !120
  %842 = bitcast <2 x i32> %841 to <2 x float>, !dbg !120
  %843 = insertelement <2 x i32> poison, i32 %838, i64 0, !dbg !120
  %844 = insertelement <2 x i32> %843, i32 %839, i64 1, !dbg !120
  %845 = bitcast <2 x i32> %844 to <2 x float>, !dbg !120
  %846 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %812, i1 %797) #5, !dbg !121
  %847 = extractvalue { i32, i32 } %846, 0, !dbg !121
  %848 = bitcast i32 %847 to <2 x bfloat>, !dbg !121
  %849 = extractvalue { i32, i32 } %846, 1, !dbg !121
  %850 = bitcast i32 %849 to <2 x bfloat>, !dbg !121
  %851 = fpext <2 x bfloat> %848 to <2 x float>, !dbg !122
  %852 = fpext <2 x bfloat> %850 to <2 x float>, !dbg !122
  %853 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %814, i1 %797) #5, !dbg !123
  %854 = extractvalue { i32, i32, i32, i32 } %853, 0, !dbg !123
  %855 = extractvalue { i32, i32, i32, i32 } %853, 1, !dbg !123
  %856 = extractvalue { i32, i32, i32, i32 } %853, 2, !dbg !123
  %857 = extractvalue { i32, i32, i32, i32 } %853, 3, !dbg !123
  %858 = insertelement <2 x i32> poison, i32 %854, i64 0, !dbg !123
  %859 = insertelement <2 x i32> %858, i32 %855, i64 1, !dbg !123
  %860 = bitcast <2 x i32> %859 to <2 x float>, !dbg !123
  %861 = insertelement <2 x i32> poison, i32 %856, i64 0, !dbg !123
  %862 = insertelement <2 x i32> %861, i32 %857, i64 1, !dbg !123
  %863 = bitcast <2 x i32> %862 to <2 x float>, !dbg !123
  %864 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %815, i1 %797) #5, !dbg !124
  %865 = extractvalue { i32, i32 } %864, 0, !dbg !124
  %866 = bitcast i32 %865 to <2 x bfloat>, !dbg !124
  %867 = extractvalue { i32, i32 } %864, 1, !dbg !124
  %868 = bitcast i32 %867 to <2 x bfloat>, !dbg !124
  %869 = fpext <2 x bfloat> %866 to <2 x float>, !dbg !125
  %870 = fpext <2 x bfloat> %868 to <2 x float>, !dbg !125
  %871 = fadd <2 x float> %842, %851, !dbg !126
  %872 = fadd <2 x float> %845, %852, !dbg !126
  %873 = fadd <2 x float> %871, splat (float 1.000000e+00), !dbg !127
  %874 = fadd <2 x float> %872, splat (float 1.000000e+00), !dbg !127
  %875 = fmul <2 x float> %823, %873, !dbg !128
  %876 = fmul <2 x float> %834, %874, !dbg !128
  %877 = shufflevector <2 x float> %873, <2 x float> %874, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !128
  %878 = fmul <4 x float> %830, %877, !dbg !128
  %879 = fadd <2 x float> %860, %869, !dbg !129
  %880 = fadd <2 x float> %863, %870, !dbg !129
  %881 = fadd <2 x float> %875, %879, !dbg !130
  %882 = fadd <2 x float> %876, %880, !dbg !130
  %883 = shufflevector <2 x float> %879, <2 x float> %880, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !130
  %884 = fadd <4 x float> %878, %883, !dbg !130
  %885 = fcmp olt <2 x float> %792, %881, !dbg !131
  %886 = extractelement <2 x float> %882, i64 0, !dbg !132
  %887 = fcmp olt float %790, %886, !dbg !131
  %888 = extractelement <2 x float> %882, i64 1, !dbg !132
  %889 = fcmp olt float %791, %888, !dbg !131
  %890 = or <2 x i1> %816, %885, !dbg !133
  %891 = or i1 %817, %887, !dbg !133
  %892 = or i1 %818, %889, !dbg !133
  %893 = select <2 x i1> %890, <2 x float> %792, <2 x float> %881, !dbg !134
  %894 = select i1 %891, float %790, float %886, !dbg !134
  %895 = select i1 %892, float %791, float %888, !dbg !134
  %896 = fcmp olt <4 x float> %794, %884, !dbg !131
  %897 = or <4 x i1> %819, %896, !dbg !133
  %898 = select <4 x i1> %897, <4 x float> %794, <4 x float> %884, !dbg !134
  %899 = select <2 x i1> %825, <2 x float> %893, <2 x float> %792, !dbg !117
  %900 = select i1 %803, float %894, float %790, !dbg !117
  %901 = select i1 %803, float %895, float %791, !dbg !117
  %902 = insertelement <4 x i1> poison, i1 %803, i64 0, !dbg !117
  %903 = shufflevector <4 x i1> %902, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !117
  %904 = select <4 x i1> %903, <4 x float> %898, <4 x float> %794, !dbg !117
  %905 = extractelement <2 x float> %881, i64 0, !dbg !132
  %906 = extractelement <2 x float> %881, i64 1, !dbg !132
  %907 = shufflevector <2 x float> %881, <2 x float> %882, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !135
  %908 = shufflevector <4 x float> %884, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !135
  %909 = shufflevector <8 x float> %907, <8 x float> %908, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !135
  %910 = fcmp ogt <8 x float> %793, %909, !dbg !135
  %911 = or <8 x i1> %826, %910, !dbg !136
  %912 = select <8 x i1> %911, <8 x float> %793, <8 x float> %909, !dbg !137
  %913 = insertelement <8 x i1> poison, i1 %803, i64 0, !dbg !138
  %914 = shufflevector <8 x i1> %913, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !138
  %915 = select <8 x i1> %914, <8 x float> %912, <8 x float> %793, !dbg !138
  %916 = getelementptr bfloat, ptr addrspace(1) %9, i64 %801, !dbg !139
  %917 = fptrunc float %905 to bfloat, !dbg !132
  %918 = fptrunc float %906 to bfloat, !dbg !132
  %919 = fptrunc float %886 to bfloat, !dbg !132
  %920 = fptrunc float %888 to bfloat, !dbg !132
  %921 = extractelement <4 x float> %884, i64 0, !dbg !132
  %922 = fptrunc float %921 to bfloat, !dbg !132
  %923 = extractelement <4 x float> %884, i64 1, !dbg !132
  %924 = fptrunc float %923 to bfloat, !dbg !132
  %925 = extractelement <4 x float> %884, i64 2, !dbg !132
  %926 = fptrunc float %925 to bfloat, !dbg !132
  %927 = extractelement <4 x float> %884, i64 3, !dbg !132
  %928 = fptrunc float %927 to bfloat, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %929 = bitcast bfloat %917 to i16, !dbg !132
  %930 = bitcast bfloat %918 to i16, !dbg !132
  %931 = bitcast bfloat %919 to i16, !dbg !132
  %932 = bitcast bfloat %920 to i16, !dbg !132
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %71, i16 %929, i16 %930, i16 %931, i16 %932, i1 true) #5, !dbg !132
  %933 = bitcast bfloat %922 to i16, !dbg !132
  %934 = bitcast bfloat %924 to i16, !dbg !132
  %935 = bitcast bfloat %926 to i16, !dbg !132
  %936 = bitcast bfloat %928 to i16, !dbg !132
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %72, i16 %933, i16 %934, i16 %935, i16 %936, i1 true) #5, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %.extract = load i32, ptr addrspace(3) %776, align 16, !dbg !132
  %.extract104 = load i32, ptr addrspace(3) %785, align 4, !dbg !132
  %.extract106 = load i32, ptr addrspace(3) %786, align 8, !dbg !132
  %.extract108 = load i32, ptr addrspace(3) %787, align 4, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract104, i32 %.extract106, i32 %.extract108, ptr addrspace(1) %916, i1 %804) #5, !dbg !132
  br i1 %789, label %788, label %937, !dbg !101

937:                                              ; preds = %788
  %938 = and i32 %19, 1, !dbg !11
  %939 = or disjoint i32 %18, %938, !dbg !12
  %940 = icmp slt i32 %939, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %941 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %899, <2 x i32> <i32 0, i32 2>, !dbg !142
  %942 = fcmp olt <2 x float> %941, %899, !dbg !142
  %943 = fcmp uno <2 x float> %941, %899, !dbg !142
  %shift = shufflevector <2 x i1> %942, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !143
  %944 = or <2 x i1> %shift, %943, !dbg !143
  %945 = extractelement <2 x i1> %944, i64 0, !dbg !143
  %946 = extractelement <2 x float> %899, i64 0, !dbg !144
  %947 = extractelement <2 x float> %899, i64 1, !dbg !144
  %948 = select i1 %945, float %946, float %947, !dbg !144
  %949 = fcmp olt float %948, %900, !dbg !142
  %950 = fcmp uno float %948, 0.000000e+00, !dbg !145
  %951 = or i1 %949, %950, !dbg !143
  %952 = select i1 %951, float %948, float %900, !dbg !144
  %953 = fcmp olt float %952, %901, !dbg !142
  %954 = fcmp uno float %952, 0.000000e+00, !dbg !145
  %955 = or i1 %953, %954, !dbg !143
  %956 = select i1 %955, float %952, float %901, !dbg !144
  %957 = extractelement <4 x float> %904, i64 0, !dbg !142
  %958 = extractelement <4 x float> %904, i64 1, !dbg !142
  %959 = fcmp olt float %957, %958, !dbg !142
  %960 = fcmp uno float %957, 0.000000e+00, !dbg !145
  %961 = or i1 %959, %960, !dbg !143
  %962 = select i1 %961, float %957, float %958, !dbg !144
  %963 = extractelement <4 x float> %904, i64 2, !dbg !142
  %964 = fcmp olt float %962, %963, !dbg !142
  %965 = fcmp uno float %962, 0.000000e+00, !dbg !145
  %966 = or i1 %964, %965, !dbg !143
  %967 = select i1 %966, float %962, float %963, !dbg !144
  %968 = extractelement <4 x float> %904, i64 3, !dbg !142
  %969 = fcmp olt float %967, %968, !dbg !142
  %970 = fcmp uno float %967, 0.000000e+00, !dbg !145
  %971 = or i1 %969, %970, !dbg !143
  %972 = select i1 %971, float %967, float %968, !dbg !144
  %973 = bitcast float %956 to i32, !dbg !140
  %974 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %973, i32 16, i32 31), !dbg !140
  %975 = bitcast i32 %974 to float, !dbg !140
  %976 = fcmp olt float %956, %975, !dbg !142
  %977 = fcmp uno float %956, 0.000000e+00, !dbg !145
  %978 = or i1 %977, %976, !dbg !143
  %979 = select i1 %978, float %956, float %975, !dbg !144
  %980 = bitcast float %979 to i32, !dbg !140
  %981 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %980, i32 8, i32 31), !dbg !140
  %982 = bitcast i32 %981 to float, !dbg !140
  %983 = fcmp olt float %979, %982, !dbg !142
  %984 = fcmp uno float %979, 0.000000e+00, !dbg !145
  %985 = or i1 %983, %984, !dbg !143
  %986 = select i1 %985, float %979, float %982, !dbg !144
  %987 = bitcast float %986 to i32, !dbg !140
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 4, i32 31), !dbg !140
  %989 = bitcast i32 %988 to float, !dbg !140
  %990 = fcmp olt float %986, %989, !dbg !142
  %991 = fcmp uno float %986, 0.000000e+00, !dbg !145
  %992 = or i1 %990, %991, !dbg !143
  %993 = select i1 %992, float %986, float %989, !dbg !144
  %994 = bitcast float %993 to i32, !dbg !140
  %995 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %994, i32 2, i32 31), !dbg !140
  %996 = bitcast i32 %995 to float, !dbg !140
  %997 = fcmp olt float %993, %996, !dbg !142
  %998 = fcmp uno float %993, 0.000000e+00, !dbg !145
  %999 = or i1 %997, %998, !dbg !143
  %1000 = select i1 %999, float %993, float %996, !dbg !144
  %1001 = bitcast float %1000 to i32, !dbg !140
  %1002 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1001, i32 1, i32 31), !dbg !140
  %1003 = bitcast i32 %1002 to float, !dbg !140
  %1004 = fcmp olt float %1000, %1003, !dbg !142
  %1005 = fcmp uno float %1000, 0.000000e+00, !dbg !145
  %1006 = or i1 %1004, %1005, !dbg !143
  %1007 = bitcast float %972 to i32, !dbg !140
  %1008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1007, i32 16, i32 31), !dbg !140
  %1009 = bitcast i32 %1008 to float, !dbg !140
  %1010 = fcmp olt float %972, %1009, !dbg !142
  %1011 = fcmp uno float %972, 0.000000e+00, !dbg !145
  %1012 = or i1 %1011, %1010, !dbg !143
  %1013 = select i1 %1012, float %972, float %1009, !dbg !144
  %1014 = bitcast float %1013 to i32, !dbg !140
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 8, i32 31), !dbg !140
  %1016 = bitcast i32 %1015 to float, !dbg !140
  %1017 = fcmp olt float %1013, %1016, !dbg !142
  %1018 = fcmp uno float %1013, 0.000000e+00, !dbg !145
  %1019 = or i1 %1017, %1018, !dbg !143
  %1020 = select i1 %1019, float %1013, float %1016, !dbg !144
  %1021 = bitcast float %1020 to i32, !dbg !140
  %1022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 4, i32 31), !dbg !140
  %1023 = bitcast i32 %1022 to float, !dbg !140
  %1024 = fcmp olt float %1020, %1023, !dbg !142
  %1025 = fcmp uno float %1020, 0.000000e+00, !dbg !145
  %1026 = or i1 %1024, %1025, !dbg !143
  %1027 = select i1 %1026, float %1020, float %1023, !dbg !144
  %1028 = bitcast float %1027 to i32, !dbg !140
  %1029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1028, i32 2, i32 31), !dbg !140
  %1030 = bitcast i32 %1029 to float, !dbg !140
  %1031 = fcmp olt float %1027, %1030, !dbg !142
  %1032 = fcmp uno float %1027, 0.000000e+00, !dbg !145
  %1033 = or i1 %1031, %1032, !dbg !143
  %1034 = select i1 %1033, float %1027, float %1030, !dbg !144
  %1035 = bitcast float %1034 to i32, !dbg !140
  %1036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1035, i32 1, i32 31), !dbg !140
  %1037 = bitcast i32 %1036 to float, !dbg !140
  %1038 = fcmp olt float %1034, %1037, !dbg !142
  %1039 = fcmp uno float %1034, 0.000000e+00, !dbg !145
  %1040 = or i1 %1038, %1039, !dbg !143
  %1041 = select i1 %1006, i32 %1001, i32 %1002, !dbg !144
  %1042 = insertelement <1 x i32> poison, i32 %1041, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %639, <1 x i32> %1042, i1 %638) #5, !dbg !140
  %1043 = select i1 %1040, i32 %1035, i32 %1036, !dbg !144
  %1044 = insertelement <1 x i32> poison, i32 %1043, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %1044, i1 %638) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1045 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %653, i1 %652) #5, !dbg !140
  %1046 = bitcast i32 %1045 to float, !dbg !140
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 8, i32 31), !dbg !140
  %1048 = bitcast i32 %1047 to float, !dbg !140
  %1049 = fcmp olt float %1046, %1048, !dbg !142
  %1050 = fcmp uno float %1046, 0.000000e+00, !dbg !145
  %1051 = or i1 %1050, %1049, !dbg !143
  %1052 = select i1 %1051, float %1046, float %1048, !dbg !144
  %1053 = bitcast float %1052 to i32, !dbg !140
  %1054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1053, i32 4, i32 31), !dbg !140
  %1055 = bitcast i32 %1054 to float, !dbg !140
  %1056 = fcmp olt float %1052, %1055, !dbg !142
  %1057 = fcmp uno float %1052, 0.000000e+00, !dbg !145
  %1058 = or i1 %1056, %1057, !dbg !143
  %1059 = select i1 %1058, float %1052, float %1055, !dbg !144
  %1060 = bitcast float %1059 to i32, !dbg !140
  %1061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1060, i32 2, i32 31), !dbg !140
  %1062 = bitcast i32 %1061 to float, !dbg !140
  %1063 = fcmp olt float %1059, %1062, !dbg !142
  %1064 = fcmp uno float %1059, 0.000000e+00, !dbg !145
  %1065 = or i1 %1063, %1064, !dbg !143
  %1066 = select i1 %1065, float %1059, float %1062, !dbg !144
  %1067 = bitcast float %1066 to i32, !dbg !140
  %1068 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1067, i32 1, i32 31), !dbg !140
  %1069 = bitcast i32 %1068 to float, !dbg !140
  %1070 = fcmp olt float %1066, %1069, !dbg !142
  %1071 = fcmp uno float %1066, 0.000000e+00, !dbg !145
  %1072 = or i1 %1070, %1071, !dbg !143
  %1073 = select i1 %1072, i32 %1067, i32 %1068, !dbg !144
  %1074 = insertelement <1 x i32> poison, i32 %1073, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %653, <1 x i32> %1074, i1 %745) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1075 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %1076 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1077 = bitcast float %1075 to i32, !dbg !146
  %1078 = bitcast float %1076 to i32, !dbg !146
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1077, i32 %1078, i1 true) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1079 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %938, !dbg !146
  %1080 = load float, ptr addrspace(3) %1079, align 4, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1081 = extractelement <8 x float> %915, i64 0, !dbg !149
  %1082 = extractelement <8 x float> %915, i64 1, !dbg !149
  %1083 = fcmp ogt float %1081, %1082, !dbg !149
  %1084 = fcmp uno float %1081, 0.000000e+00, !dbg !150
  %1085 = or i1 %1083, %1084, !dbg !151
  %1086 = select i1 %1085, float %1081, float %1082, !dbg !152
  %1087 = extractelement <8 x float> %915, i64 2, !dbg !149
  %1088 = fcmp ogt float %1086, %1087, !dbg !149
  %1089 = fcmp uno float %1086, 0.000000e+00, !dbg !150
  %1090 = or i1 %1088, %1089, !dbg !151
  %1091 = select i1 %1090, float %1086, float %1087, !dbg !152
  %1092 = extractelement <8 x float> %915, i64 3, !dbg !149
  %1093 = fcmp ogt float %1091, %1092, !dbg !149
  %1094 = fcmp uno float %1091, 0.000000e+00, !dbg !150
  %1095 = or i1 %1093, %1094, !dbg !151
  %1096 = select i1 %1095, float %1091, float %1092, !dbg !152
  %1097 = extractelement <8 x float> %915, i64 4, !dbg !149
  %1098 = extractelement <8 x float> %915, i64 5, !dbg !149
  %1099 = fcmp ogt float %1097, %1098, !dbg !149
  %1100 = fcmp uno float %1097, 0.000000e+00, !dbg !150
  %1101 = or i1 %1099, %1100, !dbg !151
  %1102 = select i1 %1101, float %1097, float %1098, !dbg !152
  %1103 = extractelement <8 x float> %915, i64 6, !dbg !149
  %1104 = fcmp ogt float %1102, %1103, !dbg !149
  %1105 = fcmp uno float %1102, 0.000000e+00, !dbg !150
  %1106 = or i1 %1104, %1105, !dbg !151
  %1107 = select i1 %1106, float %1102, float %1103, !dbg !152
  %1108 = extractelement <8 x float> %915, i64 7, !dbg !149
  %1109 = fcmp ogt float %1107, %1108, !dbg !149
  %1110 = fcmp uno float %1107, 0.000000e+00, !dbg !150
  %1111 = or i1 %1109, %1110, !dbg !151
  %1112 = select i1 %1111, float %1107, float %1108, !dbg !152
  %1113 = bitcast float %1096 to i32, !dbg !147
  %1114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1113, i32 16, i32 31), !dbg !147
  %1115 = bitcast i32 %1114 to float, !dbg !147
  %1116 = fcmp ogt float %1096, %1115, !dbg !149
  %1117 = fcmp uno float %1096, 0.000000e+00, !dbg !150
  %1118 = or i1 %1117, %1116, !dbg !151
  %1119 = select i1 %1118, float %1096, float %1115, !dbg !152
  %1120 = bitcast float %1119 to i32, !dbg !147
  %1121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1120, i32 8, i32 31), !dbg !147
  %1122 = bitcast i32 %1121 to float, !dbg !147
  %1123 = fcmp ogt float %1119, %1122, !dbg !149
  %1124 = fcmp uno float %1119, 0.000000e+00, !dbg !150
  %1125 = or i1 %1123, %1124, !dbg !151
  %1126 = select i1 %1125, float %1119, float %1122, !dbg !152
  %1127 = bitcast float %1126 to i32, !dbg !147
  %1128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1127, i32 4, i32 31), !dbg !147
  %1129 = bitcast i32 %1128 to float, !dbg !147
  %1130 = fcmp ogt float %1126, %1129, !dbg !149
  %1131 = fcmp uno float %1126, 0.000000e+00, !dbg !150
  %1132 = or i1 %1130, %1131, !dbg !151
  %1133 = select i1 %1132, float %1126, float %1129, !dbg !152
  %1134 = bitcast float %1133 to i32, !dbg !147
  %1135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1134, i32 2, i32 31), !dbg !147
  %1136 = bitcast i32 %1135 to float, !dbg !147
  %1137 = fcmp ogt float %1133, %1136, !dbg !149
  %1138 = fcmp uno float %1133, 0.000000e+00, !dbg !150
  %1139 = or i1 %1137, %1138, !dbg !151
  %1140 = select i1 %1139, float %1133, float %1136, !dbg !152
  %1141 = bitcast float %1140 to i32, !dbg !147
  %1142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1141, i32 1, i32 31), !dbg !147
  %1143 = bitcast i32 %1142 to float, !dbg !147
  %1144 = fcmp ogt float %1140, %1143, !dbg !149
  %1145 = fcmp uno float %1140, 0.000000e+00, !dbg !150
  %1146 = or i1 %1144, %1145, !dbg !151
  %1147 = bitcast float %1112 to i32, !dbg !147
  %1148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1147, i32 16, i32 31), !dbg !147
  %1149 = bitcast i32 %1148 to float, !dbg !147
  %1150 = fcmp ogt float %1112, %1149, !dbg !149
  %1151 = fcmp uno float %1112, 0.000000e+00, !dbg !150
  %1152 = or i1 %1151, %1150, !dbg !151
  %1153 = select i1 %1152, float %1112, float %1149, !dbg !152
  %1154 = bitcast float %1153 to i32, !dbg !147
  %1155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1154, i32 8, i32 31), !dbg !147
  %1156 = bitcast i32 %1155 to float, !dbg !147
  %1157 = fcmp ogt float %1153, %1156, !dbg !149
  %1158 = fcmp uno float %1153, 0.000000e+00, !dbg !150
  %1159 = or i1 %1157, %1158, !dbg !151
  %1160 = select i1 %1159, float %1153, float %1156, !dbg !152
  %1161 = bitcast float %1160 to i32, !dbg !147
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 4, i32 31), !dbg !147
  %1163 = bitcast i32 %1162 to float, !dbg !147
  %1164 = fcmp ogt float %1160, %1163, !dbg !149
  %1165 = fcmp uno float %1160, 0.000000e+00, !dbg !150
  %1166 = or i1 %1164, %1165, !dbg !151
  %1167 = select i1 %1166, float %1160, float %1163, !dbg !152
  %1168 = bitcast float %1167 to i32, !dbg !147
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 2, i32 31), !dbg !147
  %1170 = bitcast i32 %1169 to float, !dbg !147
  %1171 = fcmp ogt float %1167, %1170, !dbg !149
  %1172 = fcmp uno float %1167, 0.000000e+00, !dbg !150
  %1173 = or i1 %1171, %1172, !dbg !151
  %1174 = select i1 %1173, float %1167, float %1170, !dbg !152
  %1175 = bitcast float %1174 to i32, !dbg !147
  %1176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1175, i32 1, i32 31), !dbg !147
  %1177 = bitcast i32 %1176 to float, !dbg !147
  %1178 = fcmp ogt float %1174, %1177, !dbg !149
  %1179 = fcmp uno float %1174, 0.000000e+00, !dbg !150
  %1180 = or i1 %1178, %1179, !dbg !151
  %1181 = select i1 %1146, i32 %1141, i32 %1142, !dbg !152
  %1182 = insertelement <1 x i32> poison, i32 %1181, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %639, <1 x i32> %1182, i1 %638) #5, !dbg !147
  %1183 = select i1 %1180, i32 %1175, i32 %1176, !dbg !152
  %1184 = insertelement <1 x i32> poison, i32 %1183, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %1184, i1 %638) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1185 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %653, i1 %652) #5, !dbg !147
  %1186 = bitcast i32 %1185 to float, !dbg !147
  %1187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 8, i32 31), !dbg !147
  %1188 = bitcast i32 %1187 to float, !dbg !147
  %1189 = fcmp ogt float %1186, %1188, !dbg !149
  %1190 = fcmp uno float %1186, 0.000000e+00, !dbg !150
  %1191 = or i1 %1190, %1189, !dbg !151
  %1192 = select i1 %1191, float %1186, float %1188, !dbg !152
  %1193 = bitcast float %1192 to i32, !dbg !147
  %1194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1193, i32 4, i32 31), !dbg !147
  %1195 = bitcast i32 %1194 to float, !dbg !147
  %1196 = fcmp ogt float %1192, %1195, !dbg !149
  %1197 = fcmp uno float %1192, 0.000000e+00, !dbg !150
  %1198 = or i1 %1196, %1197, !dbg !151
  %1199 = select i1 %1198, float %1192, float %1195, !dbg !152
  %1200 = bitcast float %1199 to i32, !dbg !147
  %1201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1200, i32 2, i32 31), !dbg !147
  %1202 = bitcast i32 %1201 to float, !dbg !147
  %1203 = fcmp ogt float %1199, %1202, !dbg !149
  %1204 = fcmp uno float %1199, 0.000000e+00, !dbg !150
  %1205 = or i1 %1203, %1204, !dbg !151
  %1206 = select i1 %1205, float %1199, float %1202, !dbg !152
  %1207 = bitcast float %1206 to i32, !dbg !147
  %1208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1207, i32 1, i32 31), !dbg !147
  %1209 = bitcast i32 %1208 to float, !dbg !147
  %1210 = fcmp ogt float %1206, %1209, !dbg !149
  %1211 = fcmp uno float %1206, 0.000000e+00, !dbg !150
  %1212 = or i1 %1210, %1211, !dbg !151
  %1213 = select i1 %1212, i32 %1207, i32 %1208, !dbg !152
  %1214 = insertelement <1 x i32> poison, i32 %1213, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %653, <1 x i32> %1214, i1 %745) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1215 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !147
  %1216 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %1217 = bitcast float %1215 to i32, !dbg !153
  %1218 = bitcast float %1216 to i32, !dbg !153
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1217, i32 %1218, i1 true) #5, !dbg !153
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %1219 = load float, ptr addrspace(3) %1079, align 4, !dbg !153
  %1220 = sext i32 %939 to i64, !dbg !154
  %1221 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1220, !dbg !154
  %1222 = fptrunc float %1080 to bfloat, !dbg !146
  %1223 = and i32 %19, 510, !dbg !146
  %1224 = icmp eq i32 %1223, 0, !dbg !146
  %1225 = bitcast bfloat %1222 to i16, !dbg !146
  %1226 = and i1 %1224, %940, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1225, ptr addrspace(1) %1221, i1 %1226) #5, !dbg !146
  %1227 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1220, !dbg !155
  %1228 = fptrunc float %1219 to bfloat, !dbg !153
  %1229 = bitcast bfloat %1228 to i16, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1229, ptr addrspace(1) %1227, i1 %1226) #5, !dbg !153
  %.inv5 = fcmp oge float %1075, 0.000000e+00, !dbg !156
  %1230 = select i1 %.inv5, float 0.000000e+00, float %1075, !dbg !156
  %.inv6 = fcmp oge float %1076, 0.000000e+00, !dbg !156
  %1231 = select i1 %.inv6, float 0.000000e+00, float %1076, !dbg !156
  %1232 = fsub float 0.000000e+00, %1230, !dbg !158
  %1233 = fsub float 0.000000e+00, %1231, !dbg !158
  %.inv7 = fcmp ole float %1215, 0.000000e+00, !dbg !159
  %1234 = select i1 %.inv7, float 0.000000e+00, float %1215, !dbg !159
  %.inv8 = fcmp ole float %1216, 0.000000e+00, !dbg !159
  %1235 = select i1 %.inv8, float 0.000000e+00, float %1216, !dbg !159
  %1236 = fcmp ogt float %1232, %1234, !dbg !161
  %1237 = fcmp ogt float %1233, %1235, !dbg !161
  %1238 = fcmp uno float %1232, 0.000000e+00, !dbg !163
  %1239 = fcmp uno float %1233, 0.000000e+00, !dbg !163
  %1240 = or i1 %1238, %1236, !dbg !164
  %1241 = or i1 %1239, %1237, !dbg !164
  %1242 = select i1 %1240, float %1232, float %1234, !dbg !165
  %1243 = select i1 %1241, float %1233, float %1235, !dbg !165
  %1244 = fmul float %1242, 0x3F80204080000000, !dbg !166
  %1245 = fmul float %1243, 0x3F80204080000000, !dbg !166
  %1246 = fcmp ogt float %1244, 0x3EE4F8B580000000, !dbg !167
  %1247 = fcmp ogt float %1245, 0x3EE4F8B580000000, !dbg !167
  %1248 = fcmp uno float %1244, 0.000000e+00, !dbg !169
  %1249 = fcmp uno float %1245, 0.000000e+00, !dbg !169
  %1250 = or i1 %1246, %1248, !dbg !170
  %1251 = or i1 %1247, %1249, !dbg !170
  %1252 = select i1 %1250, float %1244, float 0x3EE4F8B580000000, !dbg !171
  %1253 = select i1 %1251, float %1245, float 0x3EE4F8B580000000, !dbg !171
  %1254 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1252), !dbg !172
  %1255 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1253), !dbg !172
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %1256 = bitcast float %1254 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1256, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1256, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1256, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1256, i1 true) #5, !dbg !173
  %1257 = bitcast float %1255 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1257, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1257, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1257, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1257, i1 true) #5, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %1258 = lshr exact i32 %20, 5, !dbg !173
  %1259 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1258, !dbg !173
  %1260 = load float, ptr addrspace(3) %1259, align 8, !dbg !173
  %1261 = add i32 %28, %51, !dbg !174
  %1262 = sext i32 %1261 to i64, !dbg !175
  %1263 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1262, !dbg !175
  %1264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1263, i1 %23) #5, !dbg !176
  %1265 = extractvalue { i32, i32, i32, i32 } %1264, 0, !dbg !176
  %1266 = bitcast i32 %1265 to <2 x bfloat>, !dbg !176
  %1267 = extractvalue { i32, i32, i32, i32 } %1264, 1, !dbg !176
  %1268 = bitcast i32 %1267 to <2 x bfloat>, !dbg !176
  %1269 = extractvalue { i32, i32, i32, i32 } %1264, 2, !dbg !176
  %1270 = bitcast i32 %1269 to <2 x bfloat>, !dbg !176
  %1271 = extractvalue { i32, i32, i32, i32 } %1264, 3, !dbg !176
  %1272 = bitcast i32 %1271 to <2 x bfloat>, !dbg !176
  %1273 = extractelement <2 x bfloat> %1266, i64 0, !dbg !176
  %1274 = extractelement <2 x bfloat> %1266, i64 1, !dbg !176
  %1275 = extractelement <2 x bfloat> %1268, i64 0, !dbg !176
  %1276 = extractelement <2 x bfloat> %1268, i64 1, !dbg !176
  %1277 = extractelement <2 x bfloat> %1270, i64 0, !dbg !176
  %1278 = extractelement <2 x bfloat> %1270, i64 1, !dbg !176
  %1279 = extractelement <2 x bfloat> %1272, i64 0, !dbg !176
  %1280 = extractelement <2 x bfloat> %1272, i64 1, !dbg !176
  %1281 = fpext bfloat %1273 to float, !dbg !177
  %1282 = fpext bfloat %1274 to float, !dbg !177
  %1283 = fpext bfloat %1275 to float, !dbg !177
  %1284 = fpext bfloat %1276 to float, !dbg !177
  %1285 = fpext bfloat %1277 to float, !dbg !177
  %1286 = fpext bfloat %1278 to float, !dbg !177
  %1287 = fpext bfloat %1279 to float, !dbg !177
  %1288 = fpext bfloat %1280 to float, !dbg !177
  %1289 = fmul float %1260, %1281, !dbg !173
  %1290 = fmul float %1260, %1282, !dbg !173
  %1291 = fmul float %1260, %1283, !dbg !173
  %1292 = fmul float %1260, %1284, !dbg !173
  %1293 = fmul float %1260, %1285, !dbg !173
  %1294 = fmul float %1260, %1286, !dbg !173
  %1295 = fmul float %1260, %1287, !dbg !173
  %1296 = fmul float %1260, %1288, !dbg !173
  %1297 = tail call float @llvm.nvvm.round.f(float %1289) #5, !dbg !178
  %1298 = tail call float @llvm.nvvm.round.f(float %1290) #5, !dbg !178
  %1299 = tail call float @llvm.nvvm.round.f(float %1291) #5, !dbg !178
  %1300 = tail call float @llvm.nvvm.round.f(float %1292) #5, !dbg !178
  %1301 = tail call float @llvm.nvvm.round.f(float %1293) #5, !dbg !178
  %1302 = tail call float @llvm.nvvm.round.f(float %1294) #5, !dbg !178
  %1303 = tail call float @llvm.nvvm.round.f(float %1295) #5, !dbg !178
  %1304 = tail call float @llvm.nvvm.round.f(float %1296) #5, !dbg !178
  %1305 = insertelement <4 x float> poison, float %1297, i64 0, !dbg !179
  %1306 = insertelement <4 x float> %1305, float %1298, i64 1, !dbg !179
  %1307 = insertelement <4 x float> %1306, float %1299, i64 2, !dbg !179
  %1308 = insertelement <4 x float> %1307, float %1300, i64 3, !dbg !179
  %1309 = fcmp ogt <4 x float> %1308, splat (float -1.270000e+02), !dbg !179
  %1310 = fcmp uno <4 x float> %1308, zeroinitializer, !dbg !181
  %1311 = or <4 x i1> %1309, %1310, !dbg !182
  %1312 = select <4 x i1> %1311, <4 x float> %1308, <4 x float> splat (float -1.270000e+02), !dbg !183
  %1313 = fcmp olt <4 x float> %1312, splat (float 1.270000e+02), !dbg !184
  %1314 = fcmp uno <4 x float> %1312, zeroinitializer, !dbg !186
  %1315 = or <4 x i1> %1313, %1314, !dbg !187
  %1316 = fptosi <4 x float> %1312 to <4 x i8>, !dbg !188
  %1317 = select <4 x i1> %1315, <4 x i8> %1316, <4 x i8> splat (i8 127), !dbg !189
  %1318 = insertelement <4 x float> poison, float %1301, i64 0, !dbg !179
  %1319 = insertelement <4 x float> %1318, float %1302, i64 1, !dbg !179
  %1320 = insertelement <4 x float> %1319, float %1303, i64 2, !dbg !179
  %1321 = insertelement <4 x float> %1320, float %1304, i64 3, !dbg !179
  %1322 = fcmp ogt <4 x float> %1321, splat (float -1.270000e+02), !dbg !179
  %1323 = fcmp uno <4 x float> %1321, zeroinitializer, !dbg !181
  %1324 = or <4 x i1> %1322, %1323, !dbg !182
  %1325 = select <4 x i1> %1324, <4 x float> %1321, <4 x float> splat (float -1.270000e+02), !dbg !183
  %1326 = fcmp olt <4 x float> %1325, splat (float 1.270000e+02), !dbg !184
  %1327 = fcmp uno <4 x float> %1325, zeroinitializer, !dbg !186
  %1328 = or <4 x i1> %1326, %1327, !dbg !187
  %1329 = fptosi <4 x float> %1325 to <4 x i8>, !dbg !188
  %1330 = select <4 x i1> %1328, <4 x i8> %1329, <4 x i8> splat (i8 127), !dbg !189
  %1331 = getelementptr i8, ptr addrspace(1) %12, i64 %1262, !dbg !190
  %1332 = bitcast <4 x i8> %1317 to i32, !dbg !191
  %1333 = bitcast <4 x i8> %1330 to i32, !dbg !191
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1332, i32 %1333, ptr addrspace(1) %1331, i1 %23) #5, !dbg !191
  %1334 = or disjoint i64 %81, 2048, !dbg !192
  %1335 = icmp samesign ult i64 %1334, 3072, !dbg !193
  %1336 = trunc nuw nsw i64 %1334 to i32, !dbg !174
  %1337 = add i32 %51, %1336, !dbg !174
  %1338 = sext i32 %1337 to i64, !dbg !175
  %1339 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1338, !dbg !175
  %1340 = and i1 %23, %1335, !dbg !194
  %1341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1339, i1 %1340) #5, !dbg !176
  %1342 = extractvalue { i32, i32, i32, i32 } %1341, 0, !dbg !176
  %1343 = bitcast i32 %1342 to <2 x bfloat>, !dbg !176
  %1344 = extractvalue { i32, i32, i32, i32 } %1341, 1, !dbg !176
  %1345 = bitcast i32 %1344 to <2 x bfloat>, !dbg !176
  %1346 = extractvalue { i32, i32, i32, i32 } %1341, 2, !dbg !176
  %1347 = bitcast i32 %1346 to <2 x bfloat>, !dbg !176
  %1348 = extractvalue { i32, i32, i32, i32 } %1341, 3, !dbg !176
  %1349 = bitcast i32 %1348 to <2 x bfloat>, !dbg !176
  %1350 = extractelement <2 x bfloat> %1343, i64 0, !dbg !176
  %1351 = extractelement <2 x bfloat> %1343, i64 1, !dbg !176
  %1352 = extractelement <2 x bfloat> %1345, i64 0, !dbg !176
  %1353 = extractelement <2 x bfloat> %1345, i64 1, !dbg !176
  %1354 = extractelement <2 x bfloat> %1347, i64 0, !dbg !176
  %1355 = extractelement <2 x bfloat> %1347, i64 1, !dbg !176
  %1356 = extractelement <2 x bfloat> %1349, i64 0, !dbg !176
  %1357 = extractelement <2 x bfloat> %1349, i64 1, !dbg !176
  %1358 = fpext bfloat %1350 to float, !dbg !177
  %1359 = fpext bfloat %1351 to float, !dbg !177
  %1360 = fpext bfloat %1352 to float, !dbg !177
  %1361 = fpext bfloat %1353 to float, !dbg !177
  %1362 = fpext bfloat %1354 to float, !dbg !177
  %1363 = fpext bfloat %1355 to float, !dbg !177
  %1364 = fpext bfloat %1356 to float, !dbg !177
  %1365 = fpext bfloat %1357 to float, !dbg !177
  %1366 = fmul float %1260, %1358, !dbg !173
  %1367 = fmul float %1260, %1359, !dbg !173
  %1368 = fmul float %1260, %1360, !dbg !173
  %1369 = fmul float %1260, %1361, !dbg !173
  %1370 = fmul float %1260, %1362, !dbg !173
  %1371 = fmul float %1260, %1363, !dbg !173
  %1372 = fmul float %1260, %1364, !dbg !173
  %1373 = fmul float %1260, %1365, !dbg !173
  %1374 = tail call float @llvm.nvvm.round.f(float %1366) #5, !dbg !178
  %1375 = tail call float @llvm.nvvm.round.f(float %1367) #5, !dbg !178
  %1376 = tail call float @llvm.nvvm.round.f(float %1368) #5, !dbg !178
  %1377 = tail call float @llvm.nvvm.round.f(float %1369) #5, !dbg !178
  %1378 = tail call float @llvm.nvvm.round.f(float %1370) #5, !dbg !178
  %1379 = tail call float @llvm.nvvm.round.f(float %1371) #5, !dbg !178
  %1380 = tail call float @llvm.nvvm.round.f(float %1372) #5, !dbg !178
  %1381 = tail call float @llvm.nvvm.round.f(float %1373) #5, !dbg !178
  %1382 = insertelement <4 x float> poison, float %1374, i64 0, !dbg !179
  %1383 = insertelement <4 x float> %1382, float %1375, i64 1, !dbg !179
  %1384 = insertelement <4 x float> %1383, float %1376, i64 2, !dbg !179
  %1385 = insertelement <4 x float> %1384, float %1377, i64 3, !dbg !179
  %1386 = fcmp ogt <4 x float> %1385, splat (float -1.270000e+02), !dbg !179
  %1387 = fcmp uno <4 x float> %1385, zeroinitializer, !dbg !181
  %1388 = or <4 x i1> %1386, %1387, !dbg !182
  %1389 = select <4 x i1> %1388, <4 x float> %1385, <4 x float> splat (float -1.270000e+02), !dbg !183
  %1390 = fcmp olt <4 x float> %1389, splat (float 1.270000e+02), !dbg !184
  %1391 = fcmp uno <4 x float> %1389, zeroinitializer, !dbg !186
  %1392 = or <4 x i1> %1390, %1391, !dbg !187
  %1393 = fptosi <4 x float> %1389 to <4 x i8>, !dbg !188
  %1394 = select <4 x i1> %1392, <4 x i8> %1393, <4 x i8> splat (i8 127), !dbg !189
  %1395 = insertelement <4 x float> poison, float %1378, i64 0, !dbg !179
  %1396 = insertelement <4 x float> %1395, float %1379, i64 1, !dbg !179
  %1397 = insertelement <4 x float> %1396, float %1380, i64 2, !dbg !179
  %1398 = insertelement <4 x float> %1397, float %1381, i64 3, !dbg !179
  %1399 = fcmp ogt <4 x float> %1398, splat (float -1.270000e+02), !dbg !179
  %1400 = fcmp uno <4 x float> %1398, zeroinitializer, !dbg !181
  %1401 = or <4 x i1> %1399, %1400, !dbg !182
  %1402 = select <4 x i1> %1401, <4 x float> %1398, <4 x float> splat (float -1.270000e+02), !dbg !183
  %1403 = fcmp olt <4 x float> %1402, splat (float 1.270000e+02), !dbg !184
  %1404 = fcmp uno <4 x float> %1402, zeroinitializer, !dbg !186
  %1405 = or <4 x i1> %1403, %1404, !dbg !187
  %1406 = fptosi <4 x float> %1402 to <4 x i8>, !dbg !188
  %1407 = select <4 x i1> %1405, <4 x i8> %1406, <4 x i8> splat (i8 127), !dbg !189
  %1408 = getelementptr i8, ptr addrspace(1) %12, i64 %1338, !dbg !190
  %1409 = bitcast <4 x i8> %1394 to i32, !dbg !191
  %1410 = bitcast <4 x i8> %1407 to i32, !dbg !191
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1409, i32 %1410, ptr addrspace(1) %1408, i1 %1340) #5, !dbg !191
  ret void, !dbg !195
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 35, column: 31, scope: !6)
!40 = !DILocation(line: 36, column: 29, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 59, scope: !6)
!44 = !DILocation(line: 40, column: 51, scope: !6)
!45 = !DILocation(line: 40, column: 113, scope: !6)
!46 = !DILocation(line: 41, column: 41, scope: !6)
!47 = !DILocation(line: 41, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 41, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 43, column: 51, scope: !6)
!56 = !DILocation(line: 44, column: 42, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 42, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 60, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 70, column: 64, scope: !6)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = !DILocation(line: 72, column: 68, scope: !6)
!79 = !DILocation(line: 73, column: 29, scope: !6)
!80 = !DILocation(line: 73, column: 53, scope: !6)
!81 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 217, column: 21, scope: !84, inlinedAt: !82)
!84 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!85 = !DILocation(line: 218, column: 28, scope: !84, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 39, scope: !84, inlinedAt: !82)
!87 = !DILocation(line: 219, column: 60, scope: !84, inlinedAt: !82)
!88 = !DILocation(line: 219, column: 49, scope: !84, inlinedAt: !82)
!89 = !DILocation(line: 221, column: 25, scope: !84, inlinedAt: !82)
!90 = !DILocation(line: 221, column: 17, scope: !84, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 15, scope: !84, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 30, scope: !84, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 38, scope: !84, inlinedAt: !82)
!94 = !DILocation(line: 222, column: 49, scope: !84, inlinedAt: !82)
!95 = !DILocation(line: 222, column: 22, scope: !84, inlinedAt: !82)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 82, column: 29, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 61, scope: !6)
!107 = !DILocation(line: 86, column: 53, scope: !6)
!108 = !DILocation(line: 87, column: 43, scope: !6)
!109 = !DILocation(line: 87, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 35, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 90, column: 35, scope: !6)
!114 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !115)
!115 = !DILocation(line: 109, column: 47, scope: !6)
!116 = !DILocation(line: 86, column: 115, scope: !6)
!117 = !DILocation(line: 110, column: 50, scope: !6)
!118 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !119)
!119 = !DILocation(line: 111, column: 47, scope: !6)
!120 = !DILocation(line: 87, column: 50, scope: !6)
!121 = !DILocation(line: 88, column: 50, scope: !6)
!122 = !DILocation(line: 88, column: 103, scope: !6)
!123 = !DILocation(line: 89, column: 49, scope: !6)
!124 = !DILocation(line: 90, column: 49, scope: !6)
!125 = !DILocation(line: 90, column: 102, scope: !6)
!126 = !DILocation(line: 101, column: 24, scope: !6)
!127 = !DILocation(line: 103, column: 24, scope: !6)
!128 = !DILocation(line: 104, column: 24, scope: !6)
!129 = !DILocation(line: 106, column: 24, scope: !6)
!130 = !DILocation(line: 107, column: 24, scope: !6)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !115)
!132 = !DILocation(line: 113, column: 53, scope: !6)
!133 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !115)
!134 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !115)
!135 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !119)
!136 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !119)
!137 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !119)
!138 = !DILocation(line: 112, column: 50, scope: !6)
!139 = !DILocation(line: 113, column: 29, scope: !6)
!140 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !141)
!141 = !DILocation(line: 114, column: 40, scope: !6)
!142 = !DILocation(line: 94, column: 15, scope: !84, inlinedAt: !141)
!143 = !DILocation(line: 96, column: 16, scope: !84, inlinedAt: !141)
!144 = !DILocation(line: 97, column: 29, scope: !84, inlinedAt: !141)
!145 = !DILocation(line: 96, column: 21, scope: !84, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 37, scope: !6)
!147 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !148)
!148 = !DILocation(line: 115, column: 40, scope: !6)
!149 = !DILocation(line: 102, column: 15, scope: !84, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 21, scope: !84, inlinedAt: !148)
!151 = !DILocation(line: 104, column: 16, scope: !84, inlinedAt: !148)
!152 = !DILocation(line: 105, column: 29, scope: !84, inlinedAt: !148)
!153 = !DILocation(line: 117, column: 37, scope: !6)
!154 = !DILocation(line: 116, column: 25, scope: !6)
!155 = !DILocation(line: 117, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 126, column: 46, scope: !6)
!158 = !DILocation(line: 127, column: 17, scope: !6)
!159 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !160)
!160 = !DILocation(line: 128, column: 46, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !162)
!162 = !DILocation(line: 129, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !162)
!166 = !DILocation(line: 131, column: 24, scope: !6)
!167 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !168)
!168 = !DILocation(line: 134, column: 46, scope: !6)
!169 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !168)
!170 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !168)
!171 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !168)
!172 = !DILocation(line: 137, column: 25, scope: !6)
!173 = !DILocation(line: 140, column: 24, scope: !6)
!174 = !DILocation(line: 124, column: 43, scope: !6)
!175 = !DILocation(line: 124, column: 36, scope: !6)
!176 = !DILocation(line: 124, column: 53, scope: !6)
!177 = !DILocation(line: 124, column: 115, scope: !6)
!178 = !DILocation(line: 141, column: 36, scope: !6)
!179 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !180)
!180 = !DILocation(line: 144, column: 46, scope: !6)
!181 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !180)
!182 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !180)
!183 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !180)
!184 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !185)
!185 = !DILocation(line: 146, column: 46, scope: !6)
!186 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !185)
!187 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !185)
!188 = !DILocation(line: 148, column: 25, scope: !6)
!189 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !185)
!190 = !DILocation(line: 149, column: 29, scope: !6)
!191 = !DILocation(line: 149, column: 53, scope: !6)
!192 = !DILocation(line: 119, column: 31, scope: !6)
!193 = !DILocation(line: 120, column: 29, scope: !6)
!194 = !DILocation(line: 124, column: 61, scope: !6)
!195 = !DILocation(line: 118, column: 4, scope: !6)
