; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 10, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 3, !dbg !11
  %14 = and i32 %13, 1016, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = sdiv i32 %15, 128, !dbg !13
  %17 = srem i32 %16, 4112, !dbg !14
  %18 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %15, %18, !dbg !15
  %19 = sdiv i32 %15, 526336, !dbg !16
  %20 = icmp slt i32 %17, 512, !dbg !17
  %21 = add nsw i32 %.decomposed, 3072, !dbg !18
  %22 = shl nsw i32 %19, 7, !dbg !19
  %23 = add nsw i32 %21, %22, !dbg !20
  %24 = mul nsw i32 %17, 9216, !dbg !21
  %25 = add nsw i32 %23, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %20) #3, !dbg !24
  %29 = mul nsw i32 %17, 24, !dbg !25
  %30 = add nsw i32 %29, %19, !dbg !26
  %31 = sext i32 %30 to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %46 = bitcast i32 %45 to float, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %20) #3, !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = tail call float @llvm.nvvm.div.full(float %34, float 1.280000e+02), !dbg !29
  %50 = tail call float @llvm.nvvm.div.full(float %36, float 1.280000e+02), !dbg !29
  %51 = tail call float @llvm.nvvm.div.full(float %38, float 1.280000e+02), !dbg !29
  %52 = tail call float @llvm.nvvm.div.full(float %40, float 1.280000e+02), !dbg !29
  %53 = tail call float @llvm.nvvm.div.full(float %42, float 1.280000e+02), !dbg !29
  %54 = tail call float @llvm.nvvm.div.full(float %44, float 1.280000e+02), !dbg !29
  %55 = tail call float @llvm.nvvm.div.full(float %46, float 1.280000e+02), !dbg !29
  %56 = tail call float @llvm.nvvm.div.full(float %48, float 1.280000e+02), !dbg !29
  %57 = fadd float %49, 0x3EB0C6F7A0000000, !dbg !30
  %58 = fadd float %50, 0x3EB0C6F7A0000000, !dbg !30
  %59 = fadd float %51, 0x3EB0C6F7A0000000, !dbg !30
  %60 = fadd float %52, 0x3EB0C6F7A0000000, !dbg !30
  %61 = fadd float %53, 0x3EB0C6F7A0000000, !dbg !30
  %62 = fadd float %54, 0x3EB0C6F7A0000000, !dbg !30
  %63 = fadd float %55, 0x3EB0C6F7A0000000, !dbg !30
  %64 = fadd float %56, 0x3EB0C6F7A0000000, !dbg !30
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %65, 0, !dbg !31
  br i1 %.not.i, label %68, label %66, !dbg !31

66:                                               ; preds = %9
  %67 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

68:                                               ; preds = %9
  %69 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %66, %68
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], !dbg !31
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %70, 0, !dbg !31
  br i1 %.not.i1, label %73, label %71, !dbg !31

71:                                               ; preds = %__nv_rsqrtf.exit
  %72 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

73:                                               ; preds = %__nv_rsqrtf.exit
  %74 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %71, %73
  %.0.i2 = phi float [ %72, %71 ], [ %74, %73 ], !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i4 = icmp eq i32 %75, 0, !dbg !31
  br i1 %.not.i4, label %78, label %76, !dbg !31

76:                                               ; preds = %__nv_rsqrtf.exit3
  %77 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %59), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

78:                                               ; preds = %__nv_rsqrtf.exit3
  %79 = tail call float @llvm.nvvm.rsqrt.approx.f(float %59), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

__nv_rsqrtf.exit6:                                ; preds = %76, %78
  %.0.i5 = phi float [ %77, %76 ], [ %79, %78 ], !dbg !31
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i7 = icmp eq i32 %80, 0, !dbg !31
  br i1 %.not.i7, label %83, label %81, !dbg !31

81:                                               ; preds = %__nv_rsqrtf.exit6
  %82 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

83:                                               ; preds = %__nv_rsqrtf.exit6
  %84 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

__nv_rsqrtf.exit9:                                ; preds = %81, %83
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i10 = icmp eq i32 %85, 0, !dbg !31
  br i1 %.not.i10, label %88, label %86, !dbg !31

86:                                               ; preds = %__nv_rsqrtf.exit9
  %87 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

88:                                               ; preds = %__nv_rsqrtf.exit9
  %89 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

__nv_rsqrtf.exit12:                               ; preds = %86, %88
  %.0.i11 = phi float [ %87, %86 ], [ %89, %88 ], !dbg !31
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i13 = icmp eq i32 %90, 0, !dbg !31
  br i1 %.not.i13, label %93, label %91, !dbg !31

91:                                               ; preds = %__nv_rsqrtf.exit12
  %92 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

93:                                               ; preds = %__nv_rsqrtf.exit12
  %94 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

__nv_rsqrtf.exit15:                               ; preds = %91, %93
  %.0.i14 = phi float [ %92, %91 ], [ %94, %93 ], !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %95, 0, !dbg !31
  br i1 %.not.i16, label %98, label %96, !dbg !31

96:                                               ; preds = %__nv_rsqrtf.exit15
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

98:                                               ; preds = %__nv_rsqrtf.exit15
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

__nv_rsqrtf.exit18:                               ; preds = %96, %98
  %.0.i17 = phi float [ %97, %96 ], [ %99, %98 ], !dbg !31
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i19 = icmp eq i32 %100, 0, !dbg !31
  br i1 %.not.i19, label %103, label %101, !dbg !31

101:                                              ; preds = %__nv_rsqrtf.exit18
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

103:                                              ; preds = %__nv_rsqrtf.exit18
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

__nv_rsqrtf.exit21:                               ; preds = %101, %103
  %.0.i20 = phi float [ %102, %101 ], [ %104, %103 ], !dbg !31
  %105 = sext i32 %.decomposed to i64, !dbg !32
  %106 = getelementptr bfloat, ptr addrspace(1) %2, i64 %105, !dbg !32
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %106, i1 %20) #3, !dbg !33
  %108 = icmp sgt i32 %17, 511, !dbg !34
  %109 = add nsw i32 %17, -512, !dbg !35
  %110 = mul nsw i32 %109, 9216, !dbg !36
  %111 = add nsw i32 %110, %23, !dbg !37
  %112 = sext i32 %111 to i64, !dbg !38
  %113 = getelementptr bfloat, ptr addrspace(1) %3, i64 %112, !dbg !38
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %113, i1 %108) #3, !dbg !39
  %115 = mul nsw i32 %109, 24, !dbg !40
  %116 = add nsw i32 %115, %19, !dbg !41
  %117 = sext i32 %116 to i64, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !42
  %119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %122 = bitcast i32 %121 to float, !dbg !43
  %123 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %126 = bitcast i32 %125 to float, !dbg !43
  %127 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %128 = bitcast i32 %127 to float, !dbg !43
  %129 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %130 = bitcast i32 %129 to float, !dbg !43
  %131 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %132 = bitcast i32 %131 to float, !dbg !43
  %133 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %118, i1 %108) #3, !dbg !43
  %134 = bitcast i32 %133 to float, !dbg !43
  %135 = tail call float @llvm.nvvm.div.full(float %120, float 1.280000e+02), !dbg !44
  %136 = tail call float @llvm.nvvm.div.full(float %122, float 1.280000e+02), !dbg !44
  %137 = tail call float @llvm.nvvm.div.full(float %124, float 1.280000e+02), !dbg !44
  %138 = tail call float @llvm.nvvm.div.full(float %126, float 1.280000e+02), !dbg !44
  %139 = tail call float @llvm.nvvm.div.full(float %128, float 1.280000e+02), !dbg !44
  %140 = tail call float @llvm.nvvm.div.full(float %130, float 1.280000e+02), !dbg !44
  %141 = tail call float @llvm.nvvm.div.full(float %132, float 1.280000e+02), !dbg !44
  %142 = tail call float @llvm.nvvm.div.full(float %134, float 1.280000e+02), !dbg !44
  %143 = fadd float %135, 0x3EB0C6F7A0000000, !dbg !45
  %144 = fadd float %136, 0x3EB0C6F7A0000000, !dbg !45
  %145 = fadd float %137, 0x3EB0C6F7A0000000, !dbg !45
  %146 = fadd float %138, 0x3EB0C6F7A0000000, !dbg !45
  %147 = fadd float %139, 0x3EB0C6F7A0000000, !dbg !45
  %148 = fadd float %140, 0x3EB0C6F7A0000000, !dbg !45
  %149 = fadd float %141, 0x3EB0C6F7A0000000, !dbg !45
  %150 = fadd float %142, 0x3EB0C6F7A0000000, !dbg !45
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i22 = icmp eq i32 %151, 0, !dbg !46
  br i1 %.not.i22, label %154, label %152, !dbg !46

152:                                              ; preds = %__nv_rsqrtf.exit21
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

154:                                              ; preds = %__nv_rsqrtf.exit21
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

__nv_rsqrtf.exit24:                               ; preds = %152, %154
  %.0.i23 = phi float [ %153, %152 ], [ %155, %154 ], !dbg !46
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i25 = icmp eq i32 %156, 0, !dbg !46
  br i1 %.not.i25, label %159, label %157, !dbg !46

157:                                              ; preds = %__nv_rsqrtf.exit24
  %158 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

159:                                              ; preds = %__nv_rsqrtf.exit24
  %160 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

__nv_rsqrtf.exit27:                               ; preds = %157, %159
  %.0.i26 = phi float [ %158, %157 ], [ %160, %159 ], !dbg !46
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i28 = icmp eq i32 %161, 0, !dbg !46
  br i1 %.not.i28, label %164, label %162, !dbg !46

162:                                              ; preds = %__nv_rsqrtf.exit27
  %163 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !46
  br label %__nv_rsqrtf.exit30, !dbg !46

164:                                              ; preds = %__nv_rsqrtf.exit27
  %165 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !46
  br label %__nv_rsqrtf.exit30, !dbg !46

__nv_rsqrtf.exit30:                               ; preds = %162, %164
  %.0.i29 = phi float [ %163, %162 ], [ %165, %164 ], !dbg !46
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i31 = icmp eq i32 %166, 0, !dbg !46
  br i1 %.not.i31, label %169, label %167, !dbg !46

167:                                              ; preds = %__nv_rsqrtf.exit30
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !46
  br label %__nv_rsqrtf.exit33, !dbg !46

169:                                              ; preds = %__nv_rsqrtf.exit30
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !46
  br label %__nv_rsqrtf.exit33, !dbg !46

__nv_rsqrtf.exit33:                               ; preds = %167, %169
  %.0.i32 = phi float [ %168, %167 ], [ %170, %169 ], !dbg !46
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i34 = icmp eq i32 %171, 0, !dbg !46
  br i1 %.not.i34, label %174, label %172, !dbg !46

172:                                              ; preds = %__nv_rsqrtf.exit33
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !46
  br label %__nv_rsqrtf.exit36, !dbg !46

174:                                              ; preds = %__nv_rsqrtf.exit33
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !46
  br label %__nv_rsqrtf.exit36, !dbg !46

__nv_rsqrtf.exit36:                               ; preds = %172, %174
  %.0.i35 = phi float [ %173, %172 ], [ %175, %174 ], !dbg !46
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i37 = icmp eq i32 %176, 0, !dbg !46
  br i1 %.not.i37, label %179, label %177, !dbg !46

177:                                              ; preds = %__nv_rsqrtf.exit36
  %178 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !46
  br label %__nv_rsqrtf.exit39, !dbg !46

179:                                              ; preds = %__nv_rsqrtf.exit36
  %180 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !46
  br label %__nv_rsqrtf.exit39, !dbg !46

__nv_rsqrtf.exit39:                               ; preds = %177, %179
  %.0.i38 = phi float [ %178, %177 ], [ %180, %179 ], !dbg !46
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i40 = icmp eq i32 %181, 0, !dbg !46
  br i1 %.not.i40, label %184, label %182, !dbg !46

182:                                              ; preds = %__nv_rsqrtf.exit39
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %149), !dbg !46
  br label %__nv_rsqrtf.exit42, !dbg !46

184:                                              ; preds = %__nv_rsqrtf.exit39
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %149), !dbg !46
  br label %__nv_rsqrtf.exit42, !dbg !46

__nv_rsqrtf.exit42:                               ; preds = %182, %184
  %.0.i41 = phi float [ %183, %182 ], [ %185, %184 ], !dbg !46
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i43 = icmp eq i32 %186, 0, !dbg !46
  br i1 %.not.i43, label %189, label %187, !dbg !46

187:                                              ; preds = %__nv_rsqrtf.exit42
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %150), !dbg !46
  br label %__nv_rsqrtf.exit45, !dbg !46

189:                                              ; preds = %__nv_rsqrtf.exit42
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %150), !dbg !46
  br label %__nv_rsqrtf.exit45, !dbg !46

__nv_rsqrtf.exit45:                               ; preds = %187, %189
  %.0.i44 = phi float [ %188, %187 ], [ %190, %189 ], !dbg !46
  %191 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !39
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !39
  %193 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !39
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !39
  %195 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !39
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !39
  %197 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !39
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !39
  %199 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !24
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !24
  %201 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !33
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !33
  %203 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !24
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !33
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !33
  %207 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !24
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !24
  %209 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !33
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !33
  %211 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !24
  %212 = bitcast i32 %211 to <2 x bfloat>, !dbg !24
  %213 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !33
  %214 = bitcast i32 %213 to <2 x bfloat>, !dbg !33
  %215 = getelementptr bfloat, ptr addrspace(1) %5, i64 %105, !dbg !47
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %215, i1 %108) #3, !dbg !48
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !48
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !48
  %219 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !48
  %220 = bitcast i32 %219 to <2 x bfloat>, !dbg !48
  %221 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !48
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !48
  %223 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !48
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !48
  %225 = sext i32 %15 to i64, !dbg !49
  %226 = getelementptr bfloat, ptr addrspace(1) %6, i64 %225, !dbg !49
  %227 = fpext <2 x bfloat> %198 to <2 x float>, !dbg !50
  %228 = fpext <2 x bfloat> %212 to <2 x float>, !dbg !51
  %229 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !52
  %230 = insertelement <2 x float> %229, float %.0.i2, i64 1, !dbg !52
  %231 = fmul <2 x float> %230, %228, !dbg !52
  %232 = fpext <2 x bfloat> %214 to <2 x float>, !dbg !53
  %233 = fmul <2 x float> %231, %232, !dbg !54
  %234 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !55
  %235 = insertelement <2 x float> %234, float %.0.i26, i64 1, !dbg !55
  %236 = fmul <2 x float> %235, %227, !dbg !55
  %237 = fpext <2 x bfloat> %218 to <2 x float>, !dbg !56
  %238 = fmul <2 x float> %236, %237, !dbg !57
  %239 = insertelement <2 x i1> poison, i1 %20, i64 0, !dbg !58
  %240 = shufflevector <2 x i1> %239, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !58
  %241 = select <2 x i1> %240, <2 x float> %233, <2 x float> %238, !dbg !58
  %242 = fptrunc <2 x float> %241 to <2 x bfloat>, !dbg !59
  %243 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !50
  %244 = fpext <2 x bfloat> %208 to <2 x float>, !dbg !51
  %245 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !52
  %246 = insertelement <2 x float> %245, float %.0.i8, i64 1, !dbg !52
  %247 = fmul <2 x float> %246, %244, !dbg !52
  %248 = fpext <2 x bfloat> %210 to <2 x float>, !dbg !53
  %249 = fmul <2 x float> %247, %248, !dbg !54
  %250 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !55
  %251 = insertelement <2 x float> %250, float %.0.i32, i64 1, !dbg !55
  %252 = fmul <2 x float> %251, %243, !dbg !55
  %253 = fpext <2 x bfloat> %220 to <2 x float>, !dbg !56
  %254 = fmul <2 x float> %252, %253, !dbg !57
  %255 = select <2 x i1> %240, <2 x float> %249, <2 x float> %254, !dbg !58
  %256 = fptrunc <2 x float> %255 to <2 x bfloat>, !dbg !59
  %257 = fpext <2 x bfloat> %194 to <2 x float>, !dbg !50
  %258 = fpext <2 x bfloat> %204 to <2 x float>, !dbg !51
  %259 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !52
  %260 = insertelement <2 x float> %259, float %.0.i14, i64 1, !dbg !52
  %261 = fmul <2 x float> %260, %258, !dbg !52
  %262 = fpext <2 x bfloat> %206 to <2 x float>, !dbg !53
  %263 = fmul <2 x float> %261, %262, !dbg !54
  %264 = insertelement <2 x float> poison, float %.0.i35, i64 0, !dbg !55
  %265 = insertelement <2 x float> %264, float %.0.i38, i64 1, !dbg !55
  %266 = fmul <2 x float> %265, %257, !dbg !55
  %267 = fpext <2 x bfloat> %222 to <2 x float>, !dbg !56
  %268 = fmul <2 x float> %266, %267, !dbg !57
  %269 = select <2 x i1> %240, <2 x float> %263, <2 x float> %268, !dbg !58
  %270 = fptrunc <2 x float> %269 to <2 x bfloat>, !dbg !59
  %271 = fpext <2 x bfloat> %192 to <2 x float>, !dbg !50
  %272 = fpext <2 x bfloat> %200 to <2 x float>, !dbg !51
  %273 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !52
  %274 = insertelement <2 x float> %273, float %.0.i20, i64 1, !dbg !52
  %275 = fmul <2 x float> %274, %272, !dbg !52
  %276 = fpext <2 x bfloat> %202 to <2 x float>, !dbg !53
  %277 = fmul <2 x float> %275, %276, !dbg !54
  %278 = insertelement <2 x float> poison, float %.0.i41, i64 0, !dbg !55
  %279 = insertelement <2 x float> %278, float %.0.i44, i64 1, !dbg !55
  %280 = fmul <2 x float> %279, %271, !dbg !55
  %281 = fpext <2 x bfloat> %224 to <2 x float>, !dbg !56
  %282 = fmul <2 x float> %280, %281, !dbg !57
  %283 = select <2 x i1> %240, <2 x float> %277, <2 x float> %282, !dbg !58
  %284 = fptrunc <2 x float> %283 to <2 x bfloat>, !dbg !59
  %285 = bitcast <2 x bfloat> %242 to i32, !dbg !59
  %286 = bitcast <2 x bfloat> %256 to i32, !dbg !59
  %287 = bitcast <2 x bfloat> %270 to i32, !dbg !59
  %288 = bitcast <2 x bfloat> %284 to i32, !dbg !59
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %285, i32 %286, i32 %287, i32 %288, ptr addrspace(1) %226) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf6yqcmgzlzphkvil4se3ylohx5s2ieyajbmrujpcuhljzchah5m.py", directory: "/tmp/torchinductor_root/f6")
!4 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 28, scope: !6)
!15 = !DILocation(line: 24, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 31, column: 18, scope: !6)
!18 = !DILocation(line: 32, column: 37, scope: !6)
!19 = !DILocation(line: 32, column: 46, scope: !6)
!20 = !DILocation(line: 32, column: 42, scope: !6)
!21 = !DILocation(line: 32, column: 57, scope: !6)
!22 = !DILocation(line: 32, column: 51, scope: !6)
!23 = !DILocation(line: 32, column: 30, scope: !6)
!24 = !DILocation(line: 32, column: 63, scope: !6)
!25 = !DILocation(line: 34, column: 39, scope: !6)
!26 = !DILocation(line: 34, column: 35, scope: !6)
!27 = !DILocation(line: 34, column: 30, scope: !6)
!28 = !DILocation(line: 34, column: 45, scope: !6)
!29 = !DILocation(line: 36, column: 19, scope: !6)
!30 = !DILocation(line: 38, column: 19, scope: !6)
!31 = !DILocation(line: 39, column: 28, scope: !6)
!32 = !DILocation(line: 42, column: 31, scope: !6)
!33 = !DILocation(line: 42, column: 36, scope: !6)
!34 = !DILocation(line: 46, column: 20, scope: !6)
!35 = !DILocation(line: 49, column: 67, scope: !6)
!36 = !DILocation(line: 49, column: 58, scope: !6)
!37 = !DILocation(line: 49, column: 52, scope: !6)
!38 = !DILocation(line: 49, column: 31, scope: !6)
!39 = !DILocation(line: 49, column: 73, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 51, column: 36, scope: !6)
!42 = !DILocation(line: 51, column: 31, scope: !6)
!43 = !DILocation(line: 51, column: 55, scope: !6)
!44 = !DILocation(line: 53, column: 21, scope: !6)
!45 = !DILocation(line: 55, column: 20, scope: !6)
!46 = !DILocation(line: 56, column: 28, scope: !6)
!47 = !DILocation(line: 59, column: 31, scope: !6)
!48 = !DILocation(line: 59, column: 36, scope: !6)
!49 = !DILocation(line: 64, column: 25, scope: !6)
!50 = !DILocation(line: 49, column: 94, scope: !6)
!51 = !DILocation(line: 32, column: 83, scope: !6)
!52 = !DILocation(line: 40, column: 19, scope: !6)
!53 = !DILocation(line: 42, column: 86, scope: !6)
!54 = !DILocation(line: 43, column: 20, scope: !6)
!55 = !DILocation(line: 57, column: 20, scope: !6)
!56 = !DILocation(line: 59, column: 87, scope: !6)
!57 = !DILocation(line: 60, column: 20, scope: !6)
!58 = !DILocation(line: 0, scope: !6)
!59 = !DILocation(line: 64, column: 37, scope: !6)
!60 = !DILocation(line: 64, column: 4, scope: !6)
