; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = and i32 %21, 256, !dbg !11
  %.lobit = lshr exact i32 %22, 8, !dbg !11
  %23 = and i32 %21, 31, !dbg !11
  %24 = or disjoint i32 %.lobit, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = shl i32 %21, 2, !dbg !14
  %28 = and i32 %27, 1020, !dbg !14
  %29 = shl i32 %21, 1, !dbg !14
  %30 = mul i32 %24, 3072, !dbg !15
  %31 = or disjoint i32 %30, %28
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 %25) #5, !dbg !17
  %35 = extractvalue { i32, i32 } %34, 1, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %38 = fpext bfloat %37 to float, !dbg !18
  %39 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %40 = fpext bfloat %39 to float, !dbg !18
  %41 = extractvalue { i32, i32 } %34, 0, !dbg !17
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !17
  %43 = extractelement <2 x bfloat> %42, i64 1, !dbg !17
  %44 = fpext bfloat %43 to float, !dbg !18
  %45 = extractelement <2 x bfloat> %42, i64 0, !dbg !17
  %46 = fpext bfloat %45 to float, !dbg !18
  %47 = select i1 %25, float %46, float 0.000000e+00, !dbg !19
  %48 = select i1 %25, float %44, float 0.000000e+00, !dbg !19
  %49 = select i1 %25, float %40, float 0.000000e+00, !dbg !19
  %50 = select i1 %25, float %38, float 0.000000e+00, !dbg !19
  %51 = add i32 %31, 1024, !dbg !20
  %52 = sext i32 %51 to i64, !dbg !16
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !16
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %25) #5, !dbg !17
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !17
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !17
  %57 = extractelement <2 x bfloat> %56, i64 0, !dbg !17
  %58 = fpext bfloat %57 to float, !dbg !18
  %59 = fsub float %58, %47, !dbg !21
  %60 = select i1 %25, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %61 = tail call float @llvm.nvvm.div.full(float %59, float %60), !dbg !26
  %62 = fadd float %47, %61, !dbg !27
  %63 = fsub float %58, %62, !dbg !28
  %64 = fmul float %59, %63, !dbg !29
  %65 = fadd float %64, 0.000000e+00, !dbg !30
  %66 = extractelement <2 x bfloat> %56, i64 1, !dbg !17
  %67 = fpext bfloat %66 to float, !dbg !18
  %68 = fsub float %67, %48, !dbg !21
  %69 = tail call float @llvm.nvvm.div.full(float %68, float %60), !dbg !26
  %70 = fadd float %48, %69, !dbg !27
  %71 = fsub float %67, %70, !dbg !28
  %72 = fmul float %68, %71, !dbg !29
  %73 = fadd float %72, 0.000000e+00, !dbg !30
  %74 = extractvalue { i32, i32 } %54, 1, !dbg !17
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !17
  %76 = extractelement <2 x bfloat> %75, i64 0, !dbg !17
  %77 = fpext bfloat %76 to float, !dbg !18
  %78 = fsub float %77, %49, !dbg !21
  %79 = tail call float @llvm.nvvm.div.full(float %78, float %60), !dbg !26
  %80 = fadd float %49, %79, !dbg !27
  %81 = fsub float %77, %80, !dbg !28
  %82 = fmul float %78, %81, !dbg !29
  %83 = fadd float %82, 0.000000e+00, !dbg !30
  %84 = extractelement <2 x bfloat> %75, i64 1, !dbg !17
  %85 = fpext bfloat %84 to float, !dbg !18
  %86 = fsub float %85, %50, !dbg !21
  %87 = tail call float @llvm.nvvm.div.full(float %86, float %60), !dbg !26
  %88 = fadd float %50, %87, !dbg !27
  %89 = fsub float %85, %88, !dbg !28
  %90 = fmul float %86, %89, !dbg !29
  %91 = fadd float %90, 0.000000e+00, !dbg !30
  %92 = select i1 %25, float %62, float 0.000000e+00, !dbg !19
  %93 = select i1 %25, float %70, float 0.000000e+00, !dbg !19
  %94 = select i1 %25, float %80, float 0.000000e+00, !dbg !19
  %95 = select i1 %25, float %88, float 0.000000e+00, !dbg !19
  %96 = add i32 %31, 2048, !dbg !20
  %97 = sext i32 %96 to i64, !dbg !16
  %98 = getelementptr bfloat, ptr addrspace(1) %0, i64 %97, !dbg !16
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %98, i1 %25) #5, !dbg !17
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !17
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !17
  %102 = extractelement <2 x bfloat> %101, i64 0, !dbg !17
  %103 = fpext bfloat %102 to float, !dbg !18
  %104 = fsub float %103, %92, !dbg !21
  %105 = select i1 %25, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %106 = tail call float @llvm.nvvm.div.full(float %104, float %105), !dbg !26
  %107 = fadd float %92, %106, !dbg !27
  %108 = fsub float %103, %107, !dbg !28
  %109 = fmul float %104, %108, !dbg !29
  %110 = fadd float %65, %109, !dbg !30
  %111 = extractelement <2 x bfloat> %101, i64 1, !dbg !17
  %112 = fpext bfloat %111 to float, !dbg !18
  %113 = fsub float %112, %93, !dbg !21
  %114 = select i1 %25, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %115 = tail call float @llvm.nvvm.div.full(float %113, float %114), !dbg !26
  %116 = fadd float %93, %115, !dbg !27
  %117 = fsub float %112, %116, !dbg !28
  %118 = fmul float %113, %117, !dbg !29
  %119 = fadd float %73, %118, !dbg !30
  %120 = extractvalue { i32, i32 } %99, 1, !dbg !17
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !17
  %122 = extractelement <2 x bfloat> %121, i64 0, !dbg !17
  %123 = fpext bfloat %122 to float, !dbg !18
  %124 = fsub float %123, %94, !dbg !21
  %125 = select i1 %25, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %126 = tail call float @llvm.nvvm.div.full(float %124, float %125), !dbg !26
  %127 = fadd float %94, %126, !dbg !27
  %128 = fsub float %123, %127, !dbg !28
  %129 = fmul float %124, %128, !dbg !29
  %130 = fadd float %83, %129, !dbg !30
  %131 = extractelement <2 x bfloat> %121, i64 1, !dbg !17
  %132 = fpext bfloat %131 to float, !dbg !18
  %133 = fsub float %132, %95, !dbg !21
  %134 = select i1 %25, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %135 = tail call float @llvm.nvvm.div.full(float %133, float %134), !dbg !26
  %136 = fadd float %95, %135, !dbg !27
  %137 = fsub float %132, %136, !dbg !28
  %138 = fmul float %133, %137, !dbg !29
  %139 = fadd float %91, %138, !dbg !30
  %140 = select i1 %25, float %107, float 0.000000e+00, !dbg !19
  %141 = select i1 %25, float %116, float 0.000000e+00, !dbg !19
  %142 = select i1 %25, float %127, float 0.000000e+00, !dbg !19
  %143 = select i1 %25, float %136, float 0.000000e+00, !dbg !19
  %144 = select i1 %25, float %130, float 0.000000e+00, !dbg !31
  %145 = select i1 %25, float %139, float 0.000000e+00, !dbg !31
  %146 = select i1 %25, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %147 = select i1 %25, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %148 = select i1 %25, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %149 = select i1 %25, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %150 = lshr i32 %21, 5, !dbg !11
  %151 = and i32 %29, 1022, !dbg !14
  %152 = fsub float %141, %140, !dbg !32
  %153 = select i1 %25, float 6.000000e+00, float 0.000000e+00, !dbg !35
  %154 = fcmp oeq float %153, 0.000000e+00, !dbg !36
  %155 = tail call float @llvm.nvvm.div.full(float %147, float %153), !dbg !37
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !38
  %157 = fmul float %152, %156, !dbg !39
  %158 = fadd float %140, %157, !dbg !40
  %159 = fadd float %110, %119, !dbg !41
  %160 = select i1 %25, float %159, float 0.000000e+00, !dbg !41
  %161 = fmul float %152, %152, !dbg !42
  %162 = fmul float %161, %146, !dbg !43
  %163 = fmul float %162, %156, !dbg !44
  %164 = fadd float %160, %163, !dbg !45
  %165 = fsub float %142, %158, !dbg !32
  %166 = select i1 %25, float 9.000000e+00, float 0.000000e+00, !dbg !35
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !36
  %168 = tail call float @llvm.nvvm.div.full(float %148, float %166), !dbg !37
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !38
  %170 = fmul float %169, %165, !dbg !39
  %171 = fadd float %158, %170, !dbg !40
  %172 = fadd float %144, %164, !dbg !41
  %173 = fmul float %165, %165, !dbg !42
  %174 = fmul float %153, %173, !dbg !43
  %175 = fmul float %169, %174, !dbg !44
  %176 = fadd float %172, %175, !dbg !45
  %177 = fsub float %143, %171, !dbg !32
  %178 = select i1 %25, float 1.200000e+01, float 0.000000e+00, !dbg !35
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !36
  %180 = tail call float @llvm.nvvm.div.full(float %149, float %178), !dbg !37
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !38
  %182 = fmul float %181, %177, !dbg !39
  %183 = fadd float %171, %182, !dbg !40
  %184 = fadd float %145, %176, !dbg !41
  %185 = fmul float %177, %177, !dbg !42
  %186 = fmul float %166, %185, !dbg !43
  %187 = fmul float %181, %186, !dbg !44
  %188 = fadd float %184, %187, !dbg !45
  %189 = bitcast float %183 to i32, !dbg !46
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = bitcast float %188 to i32, !dbg !46
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !46
  %194 = bitcast i32 %193 to float, !dbg !46
  %195 = bitcast float %178 to i32, !dbg !46
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !46
  %197 = bitcast i32 %196 to float, !dbg !46
  %198 = fsub float %191, %183, !dbg !32
  %199 = fadd float %178, %197, !dbg !35
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !36
  %201 = tail call float @llvm.nvvm.div.full(float %197, float %199), !dbg !37
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !38
  %203 = fmul float %202, %198, !dbg !39
  %204 = fadd float %183, %203, !dbg !40
  %205 = fadd float %188, %194, !dbg !41
  %206 = fmul float %198, %198, !dbg !42
  %207 = fmul float %178, %206, !dbg !43
  %208 = fmul float %202, %207, !dbg !44
  %209 = fadd float %205, %208, !dbg !45
  %210 = bitcast float %204 to i32, !dbg !46
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !46
  %212 = bitcast i32 %211 to float, !dbg !46
  %213 = bitcast float %209 to i32, !dbg !46
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !46
  %215 = bitcast i32 %214 to float, !dbg !46
  %216 = bitcast float %199 to i32, !dbg !46
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !46
  %218 = bitcast i32 %217 to float, !dbg !46
  %219 = fsub float %212, %204, !dbg !32
  %220 = fadd float %199, %218, !dbg !35
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !36
  %222 = tail call float @llvm.nvvm.div.full(float %218, float %220), !dbg !37
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !38
  %224 = fmul float %219, %223, !dbg !39
  %225 = fadd float %204, %224, !dbg !40
  %226 = fadd float %209, %215, !dbg !41
  %227 = fmul float %219, %219, !dbg !42
  %228 = fmul float %199, %227, !dbg !43
  %229 = fmul float %223, %228, !dbg !44
  %230 = fadd float %226, %229, !dbg !45
  %231 = bitcast float %225 to i32, !dbg !46
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !46
  %233 = bitcast i32 %232 to float, !dbg !46
  %234 = bitcast float %230 to i32, !dbg !46
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !46
  %236 = bitcast i32 %235 to float, !dbg !46
  %237 = bitcast float %220 to i32, !dbg !46
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !46
  %239 = bitcast i32 %238 to float, !dbg !46
  %240 = fsub float %233, %225, !dbg !32
  %241 = fadd float %220, %239, !dbg !35
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !36
  %243 = tail call float @llvm.nvvm.div.full(float %239, float %241), !dbg !37
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !38
  %245 = fmul float %240, %244, !dbg !39
  %246 = fadd float %225, %245, !dbg !40
  %247 = fadd float %230, %236, !dbg !41
  %248 = fmul float %240, %240, !dbg !42
  %249 = fmul float %220, %248, !dbg !43
  %250 = fmul float %244, %249, !dbg !44
  %251 = fadd float %247, %250, !dbg !45
  %252 = bitcast float %246 to i32, !dbg !46
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !46
  %254 = bitcast i32 %253 to float, !dbg !46
  %255 = bitcast float %251 to i32, !dbg !46
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !46
  %257 = bitcast i32 %256 to float, !dbg !46
  %258 = bitcast float %241 to i32, !dbg !46
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !46
  %260 = bitcast i32 %259 to float, !dbg !46
  %261 = fsub float %254, %246, !dbg !32
  %262 = fadd float %241, %260, !dbg !35
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !36
  %264 = tail call float @llvm.nvvm.div.full(float %260, float %262), !dbg !37
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !38
  %266 = fmul float %261, %265, !dbg !39
  %267 = fadd float %246, %266, !dbg !40
  %268 = fadd float %251, %257, !dbg !41
  %269 = fmul float %261, %261, !dbg !42
  %270 = fmul float %241, %269, !dbg !43
  %271 = fmul float %265, %270, !dbg !44
  %272 = fadd float %268, %271, !dbg !45
  %273 = bitcast float %267 to i32, !dbg !46
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = bitcast float %272 to i32, !dbg !46
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !46
  %278 = bitcast i32 %277 to float, !dbg !46
  %279 = bitcast float %262 to i32, !dbg !46
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !46
  %281 = bitcast i32 %280 to float, !dbg !46
  %282 = fsub float %275, %267, !dbg !32
  %283 = fadd float %262, %281, !dbg !35
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !36
  %285 = tail call float @llvm.nvvm.div.full(float %281, float %283), !dbg !37
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !38
  %287 = fmul float %282, %286, !dbg !39
  %288 = fadd float %267, %287, !dbg !40
  %289 = fadd float %272, %278, !dbg !41
  %290 = fmul float %282, %282, !dbg !42
  %291 = fmul float %262, %290, !dbg !43
  %292 = fmul float %286, %291, !dbg !44
  %293 = fadd float %289, %292, !dbg !45
  %294 = and i32 %150, 7, !dbg !46
  %295 = icmp eq i32 %23, 0, !dbg !46
  %296 = lshr exact i32 %22, 5, !dbg !46
  %297 = or disjoint i32 %296, %294, !dbg !46
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !46
  %299 = bitcast float %288 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 %295) #5, !dbg !46
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %297, !dbg !46
  %301 = bitcast float %293 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 %295) #5, !dbg !46
  %302 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %297, !dbg !46
  %303 = bitcast float %283 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 %295) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %304 = icmp slt i32 %21, 16, !dbg !46
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !46
  %306 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %304) #5, !dbg !46
  %307 = bitcast i32 %306 to float, !dbg !46
  %308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %21, !dbg !46
  %309 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %308, i1 %304) #5, !dbg !46
  %310 = bitcast i32 %309 to float, !dbg !46
  %311 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !46
  %312 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %311, i1 %304) #5, !dbg !46
  %313 = bitcast i32 %312 to float, !dbg !46
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !46
  %315 = bitcast i32 %314 to float, !dbg !46
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !46
  %317 = bitcast i32 %316 to float, !dbg !46
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !46
  %319 = bitcast i32 %318 to float, !dbg !46
  %320 = fsub float %315, %307, !dbg !32
  %321 = fadd float %313, %319, !dbg !35
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !36
  %323 = tail call float @llvm.nvvm.div.full(float %319, float %321), !dbg !37
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !38
  %325 = fmul float %320, %324, !dbg !39
  %326 = fadd float %325, %307, !dbg !40
  %327 = fadd float %310, %317, !dbg !41
  %328 = fmul float %320, %320, !dbg !42
  %329 = fmul float %328, %313, !dbg !43
  %330 = fmul float %329, %324, !dbg !44
  %331 = fadd float %327, %330, !dbg !45
  %332 = bitcast float %326 to i32, !dbg !46
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !46
  %334 = bitcast i32 %333 to float, !dbg !46
  %335 = bitcast float %331 to i32, !dbg !46
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !46
  %337 = bitcast i32 %336 to float, !dbg !46
  %338 = bitcast float %321 to i32, !dbg !46
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !46
  %340 = bitcast i32 %339 to float, !dbg !46
  %341 = fsub float %334, %326, !dbg !32
  %342 = fadd float %321, %340, !dbg !35
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !36
  %344 = tail call float @llvm.nvvm.div.full(float %340, float %342), !dbg !37
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !38
  %346 = fmul float %341, %345, !dbg !39
  %347 = fadd float %326, %346, !dbg !40
  %348 = fadd float %331, %337, !dbg !41
  %349 = fmul float %341, %341, !dbg !42
  %350 = fmul float %321, %349, !dbg !43
  %351 = fmul float %345, %350, !dbg !44
  %352 = fadd float %348, %351, !dbg !45
  %353 = bitcast float %347 to i32, !dbg !46
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 1, i32 31), !dbg !46
  %355 = bitcast i32 %354 to float, !dbg !46
  %356 = bitcast float %352 to i32, !dbg !46
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !46
  %358 = bitcast i32 %357 to float, !dbg !46
  %359 = bitcast float %342 to i32, !dbg !46
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !46
  %361 = bitcast i32 %360 to float, !dbg !46
  %362 = fsub float %355, %347, !dbg !32
  %363 = fadd float %342, %361, !dbg !35
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !36
  %365 = tail call float @llvm.nvvm.div.full(float %361, float %363), !dbg !37
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !38
  %367 = fmul float %362, %366, !dbg !39
  %368 = fadd float %347, %367, !dbg !40
  %369 = fadd float %352, %358, !dbg !41
  %370 = fmul float %362, %362, !dbg !42
  %371 = fmul float %342, %370, !dbg !43
  %372 = fmul float %366, %371, !dbg !44
  %373 = fadd float %369, %372, !dbg !45
  %374 = and i32 %21, 7, !dbg !46
  %375 = icmp eq i32 %374, 0, !dbg !46
  %376 = and i1 %304, %375, !dbg !46
  %377 = bitcast float %368 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %377, i1 %376) #5, !dbg !46
  %378 = bitcast float %373 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %378, i1 %376) #5, !dbg !46
  %379 = bitcast float %363 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %379, i1 %376) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !46
  %381 = load float, ptr addrspace(3) %380, align 16, !dbg !46
  %382 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %296, !dbg !46
  %383 = load float, ptr addrspace(3) %382, align 16, !dbg !46
  %384 = tail call float @llvm.nvvm.div.full(float %383, float 3.072000e+03), !dbg !47
  %385 = fadd float %384, 0x3EB0C6F7A0000000, !dbg !48
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i29 = icmp eq i32 %389, 0, !dbg !49
  br i1 %.not.i29, label %392, label %390, !dbg !49

390:                                              ; preds = %__nv_rsqrtf.exit
  %391 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %385), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

392:                                              ; preds = %__nv_rsqrtf.exit
  %393 = tail call float @llvm.nvvm.rsqrt.approx.f(float %385), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

__nv_rsqrtf.exit31:                               ; preds = %390, %392
  %.0.i30 = phi float [ %391, %390 ], [ %393, %392 ], !dbg !49
  %394 = and i32 %27, 2044
  %395 = lshr i32 %27, 8
  %396 = and i32 %395, 4
  %397 = add nuw nsw i32 %396, %394
  %398 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %397
  %399 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %151
  %400 = add nuw nsw i32 %151, 1028
  %401 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %400
  %402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %151
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %400
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %397
  %405 = zext nneg i32 %151 to i64, !dbg !50
  %406 = getelementptr inbounds nuw i8, ptr addrspace(3) %401, i32 4
  %407 = getelementptr inbounds nuw i8, ptr addrspace(3) %404, i32 4
  %408 = insertelement <2 x i1> poison, i1 %26, i64 0, !dbg !51
  %409 = shufflevector <2 x i1> %408, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !51
  %410 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !52
  %411 = shufflevector <4 x i1> %410, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !52
  br label %412, !dbg !50

412:                                              ; preds = %__nv_rsqrtf.exit31, %412
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit31 ], [ %indvars.iv.next, %412 ]
  %413 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit31 ], [ %499, %412 ]
  %414 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit31 ], [ %500, %412 ]
  %415 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit31 ], [ %498, %412 ]
  %416 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit31 ], [ %510, %412 ]
  %417 = or disjoint i64 %indvars.iv, %405, !dbg !53
  %418 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !54
  %419 = add i32 %31, %418, !dbg !54
  %420 = sext i32 %419 to i64, !dbg !55
  %421 = getelementptr bfloat, ptr addrspace(1) %0, i64 %420, !dbg !55
  %422 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %421, i1 %25) #5, !dbg !56
  %423 = extractvalue { i32, i32 } %422, 0, !dbg !56
  %424 = bitcast i32 %423 to <2 x bfloat>, !dbg !56
  %425 = extractvalue { i32, i32 } %422, 1, !dbg !56
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !56
  %427 = extractelement <2 x bfloat> %424, i64 0, !dbg !56
  %428 = extractelement <2 x bfloat> %424, i64 1, !dbg !56
  %429 = extractelement <2 x bfloat> %426, i64 0, !dbg !56
  %430 = extractelement <2 x bfloat> %426, i64 1, !dbg !56
  %431 = fpext bfloat %427 to float, !dbg !57
  %432 = fpext bfloat %428 to float, !dbg !57
  %433 = fpext bfloat %429 to float, !dbg !57
  %434 = fpext bfloat %430 to float, !dbg !57
  %435 = add nuw nsw i64 %417, 3072, !dbg !58
  %436 = getelementptr float, ptr addrspace(1) %1, i64 %435, !dbg !59
  %437 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %436, i1 true) #5, !dbg !60
  %438 = extractvalue { i32, i32 } %437, 0, !dbg !60
  %439 = extractvalue { i32, i32 } %437, 1, !dbg !60
  %440 = getelementptr bfloat, ptr addrspace(1) %2, i64 %435, !dbg !61
  %441 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %440, i1 true) #5, !dbg !62
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !62
  %443 = getelementptr float, ptr addrspace(1) %1, i64 %417, !dbg !63
  %444 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %443, i1 true) #5, !dbg !64
  %445 = extractvalue { i32, i32 } %444, 0, !dbg !64
  %446 = extractvalue { i32, i32 } %444, 1, !dbg !64
  %447 = getelementptr bfloat, ptr addrspace(1) %2, i64 %417, !dbg !65
  %448 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %447, i1 true) #5, !dbg !66
  %449 = bitcast i32 %448 to <2 x bfloat>, !dbg !66
  %450 = fsub float %431, %381, !dbg !67
  %451 = fsub float %432, %381, !dbg !67
  %452 = fsub float %433, %381, !dbg !67
  %453 = fsub float %434, %381, !dbg !67
  %454 = fmul float %.0.i30, %450, !dbg !68
  %455 = fmul float %.0.i30, %451, !dbg !68
  %456 = fmul float %.0.i30, %452, !dbg !68
  %457 = fmul float %.0.i30, %453, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %458 = bitcast float %454 to i32, !dbg !68
  %459 = bitcast float %455 to i32, !dbg !68
  %460 = bitcast float %456 to i32, !dbg !68
  %461 = bitcast float %457 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %398, i32 %458, i32 %459, i32 %460, i32 %461, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %462 = load float, ptr addrspace(3) %401, align 8, !dbg !68
  %463 = load float, ptr addrspace(3) %406, align 4, !dbg !68
  %464 = fcmp uno <2 x float> %415, zeroinitializer, !dbg !69
  %465 = fcmp uno float %413, 0.000000e+00, !dbg !69
  %466 = fcmp uno float %414, 0.000000e+00, !dbg !69
  %467 = insertelement <2 x i32> poison, i32 %438, i64 0, !dbg !60
  %468 = insertelement <2 x i32> %467, i32 %439, i64 1, !dbg !60
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !60
  %470 = fpext <2 x bfloat> %442 to <2 x float>, !dbg !71
  %471 = insertelement <2 x i32> poison, i32 %445, i64 0, !dbg !64
  %472 = insertelement <2 x i32> %471, i32 %446, i64 1, !dbg !64
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !64
  %474 = fpext <2 x bfloat> %449 to <2 x float>, !dbg !72
  %475 = load <2 x float>, ptr addrspace(3) %399, align 8, !dbg !68
  %476 = fadd <2 x float> %469, %470, !dbg !73
  %477 = fadd <2 x float> %476, splat (float 1.000000e+00), !dbg !74
  %478 = fmul <2 x float> %477, %475, !dbg !75
  %479 = extractelement <2 x float> %477, i64 0, !dbg !75
  %480 = fmul float %479, %462, !dbg !75
  %481 = extractelement <2 x float> %477, i64 1, !dbg !75
  %482 = fmul float %481, %463, !dbg !75
  %483 = fadd <2 x float> %473, %474, !dbg !76
  %484 = fadd <2 x float> %483, %478, !dbg !77
  %485 = extractelement <2 x float> %483, i64 0, !dbg !77
  %486 = fadd float %485, %480, !dbg !77
  %487 = extractelement <2 x float> %483, i64 1, !dbg !77
  %488 = fadd float %487, %482, !dbg !77
  %489 = fcmp olt <2 x float> %415, %484, !dbg !78
  %490 = fcmp olt float %413, %486, !dbg !78
  %491 = fcmp olt float %414, %488, !dbg !78
  %492 = or <2 x i1> %464, %489, !dbg !79
  %493 = or i1 %465, %490, !dbg !79
  %494 = or i1 %466, %491, !dbg !79
  %495 = select <2 x i1> %492, <2 x float> %415, <2 x float> %484, !dbg !80
  %496 = select i1 %493, float %413, float %486, !dbg !80
  %497 = select i1 %494, float %414, float %488, !dbg !80
  %498 = select <2 x i1> %409, <2 x float> %495, <2 x float> %415, !dbg !51
  %499 = select i1 %26, float %496, float %413, !dbg !51
  %500 = select i1 %26, float %497, float %414, !dbg !51
  %501 = extractelement <2 x float> %484, i64 0, !dbg !81
  %502 = extractelement <2 x float> %484, i64 1, !dbg !81
  %503 = fcmp uno <4 x float> %416, zeroinitializer, !dbg !82
  %504 = shufflevector <2 x float> %484, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !84
  %505 = insertelement <4 x float> %504, float %486, i64 2, !dbg !84
  %506 = insertelement <4 x float> %505, float %488, i64 3, !dbg !84
  %507 = fcmp ogt <4 x float> %416, %506, !dbg !84
  %508 = or <4 x i1> %503, %507, !dbg !85
  %509 = select <4 x i1> %508, <4 x float> %416, <4 x float> %506, !dbg !86
  %510 = select <4 x i1> %411, <4 x float> %509, <4 x float> %416, !dbg !52
  %511 = getelementptr bfloat, ptr addrspace(1) %3, i64 %420, !dbg !87
  %512 = fptrunc float %501 to bfloat, !dbg !81
  %513 = fptrunc float %502 to bfloat, !dbg !81
  %514 = fptrunc float %486 to bfloat, !dbg !81
  %515 = fptrunc float %488 to bfloat, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %516 = bitcast bfloat %512 to i16, !dbg !81
  %517 = bitcast bfloat %513 to i16, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %402, i16 %516, i16 %517, i1 true) #5, !dbg !81
  %518 = bitcast bfloat %514 to i16, !dbg !81
  %519 = bitcast bfloat %515 to i16, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %403, i16 %518, i16 %519, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %.uncasted.extract = load i32, ptr addrspace(3) %404, align 8, !dbg !81
  %.uncasted.extract15 = load i32, ptr addrspace(3) %407, align 4, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract15, ptr addrspace(1) %511, i1 %25) #5, !dbg !81
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !50
  %520 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !50
  br i1 %520, label %412, label %521, !dbg !50

521:                                              ; preds = %412
  %522 = and i32 %21, 1, !dbg !11
  %523 = or disjoint i32 %20, %522, !dbg !12
  %524 = icmp slt i32 %523, 4112, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %525 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %498, <2 x i32> <i32 0, i32 2>, !dbg !90
  %526 = fcmp olt <2 x float> %525, %498, !dbg !90
  %527 = fcmp uno <2 x float> %525, %498, !dbg !90
  %shift = shufflevector <2 x i1> %526, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !91
  %528 = or <2 x i1> %shift, %527, !dbg !91
  %529 = extractelement <2 x i1> %528, i64 0, !dbg !91
  %530 = extractelement <2 x float> %498, i64 0, !dbg !92
  %531 = extractelement <2 x float> %498, i64 1, !dbg !92
  %532 = select i1 %529, float %530, float %531, !dbg !92
  %533 = fcmp olt float %499, %500, !dbg !90
  %534 = fcmp uno float %499, 0.000000e+00, !dbg !93
  %535 = or i1 %533, %534, !dbg !91
  %536 = select i1 %535, float %499, float %500, !dbg !92
  %537 = bitcast float %532 to i32, !dbg !88
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 16, i32 31), !dbg !88
  %539 = bitcast i32 %538 to float, !dbg !88
  %540 = fcmp olt float %532, %539, !dbg !90
  %541 = fcmp uno float %532, 0.000000e+00, !dbg !93
  %542 = or i1 %541, %540, !dbg !91
  %543 = select i1 %542, float %532, float %539, !dbg !92
  %544 = bitcast float %543 to i32, !dbg !88
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 8, i32 31), !dbg !88
  %546 = bitcast i32 %545 to float, !dbg !88
  %547 = fcmp olt float %543, %546, !dbg !90
  %548 = fcmp uno float %543, 0.000000e+00, !dbg !93
  %549 = or i1 %547, %548, !dbg !91
  %550 = select i1 %549, float %543, float %546, !dbg !92
  %551 = bitcast float %550 to i32, !dbg !88
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 4, i32 31), !dbg !88
  %553 = bitcast i32 %552 to float, !dbg !88
  %554 = fcmp olt float %550, %553, !dbg !90
  %555 = fcmp uno float %550, 0.000000e+00, !dbg !93
  %556 = or i1 %554, %555, !dbg !91
  %557 = select i1 %556, float %550, float %553, !dbg !92
  %558 = bitcast float %557 to i32, !dbg !88
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 2, i32 31), !dbg !88
  %560 = bitcast i32 %559 to float, !dbg !88
  %561 = fcmp olt float %557, %560, !dbg !90
  %562 = fcmp uno float %557, 0.000000e+00, !dbg !93
  %563 = or i1 %561, %562, !dbg !91
  %564 = select i1 %563, float %557, float %560, !dbg !92
  %565 = bitcast float %564 to i32, !dbg !88
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 1, i32 31), !dbg !88
  %567 = bitcast i32 %566 to float, !dbg !88
  %568 = fcmp olt float %564, %567, !dbg !90
  %569 = fcmp uno float %564, 0.000000e+00, !dbg !93
  %570 = or i1 %568, %569, !dbg !91
  %571 = bitcast float %536 to i32, !dbg !88
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 16, i32 31), !dbg !88
  %573 = bitcast i32 %572 to float, !dbg !88
  %574 = fcmp olt float %536, %573, !dbg !90
  %575 = fcmp uno float %536, 0.000000e+00, !dbg !93
  %576 = or i1 %575, %574, !dbg !91
  %577 = select i1 %576, float %536, float %573, !dbg !92
  %578 = bitcast float %577 to i32, !dbg !88
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 8, i32 31), !dbg !88
  %580 = bitcast i32 %579 to float, !dbg !88
  %581 = fcmp olt float %577, %580, !dbg !90
  %582 = fcmp uno float %577, 0.000000e+00, !dbg !93
  %583 = or i1 %581, %582, !dbg !91
  %584 = select i1 %583, float %577, float %580, !dbg !92
  %585 = bitcast float %584 to i32, !dbg !88
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 4, i32 31), !dbg !88
  %587 = bitcast i32 %586 to float, !dbg !88
  %588 = fcmp olt float %584, %587, !dbg !90
  %589 = fcmp uno float %584, 0.000000e+00, !dbg !93
  %590 = or i1 %588, %589, !dbg !91
  %591 = select i1 %590, float %584, float %587, !dbg !92
  %592 = bitcast float %591 to i32, !dbg !88
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 2, i32 31), !dbg !88
  %594 = bitcast i32 %593 to float, !dbg !88
  %595 = fcmp olt float %591, %594, !dbg !90
  %596 = fcmp uno float %591, 0.000000e+00, !dbg !93
  %597 = or i1 %595, %596, !dbg !91
  %598 = select i1 %597, float %591, float %594, !dbg !92
  %599 = bitcast float %598 to i32, !dbg !88
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %599, i32 1, i32 31), !dbg !88
  %601 = bitcast i32 %600 to float, !dbg !88
  %602 = fcmp olt float %598, %601, !dbg !90
  %603 = fcmp uno float %598, 0.000000e+00, !dbg !93
  %604 = or i1 %602, %603, !dbg !91
  %605 = and i32 %150, 15, !dbg !88
  %606 = getelementptr float, ptr addrspace(3) @global_smem, i32 %605, !dbg !88
  %607 = select i1 %570, i32 %565, i32 %566, !dbg !92
  %608 = insertelement <1 x i32> poison, i32 %607, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %606, <1 x i32> %608, i1 %295) #5, !dbg !88
  %609 = or disjoint i32 %605, 16, !dbg !88
  %610 = getelementptr float, ptr addrspace(3) @global_smem, i32 %609, !dbg !88
  %611 = select i1 %604, i32 %599, i32 %600, !dbg !92
  %612 = insertelement <1 x i32> poison, i32 %611, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %610, <1 x i32> %612, i1 %295) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %613 = icmp slt i32 %21, 32, !dbg !88
  %614 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %613) #5, !dbg !88
  %615 = bitcast i32 %614 to float, !dbg !88
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %614, i32 8, i32 31), !dbg !88
  %617 = bitcast i32 %616 to float, !dbg !88
  %618 = fcmp olt float %615, %617, !dbg !90
  %619 = fcmp uno float %615, 0.000000e+00, !dbg !93
  %620 = or i1 %619, %618, !dbg !91
  %621 = select i1 %620, float %615, float %617, !dbg !92
  %622 = bitcast float %621 to i32, !dbg !88
  %623 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %622, i32 4, i32 31), !dbg !88
  %624 = bitcast i32 %623 to float, !dbg !88
  %625 = fcmp olt float %621, %624, !dbg !90
  %626 = fcmp uno float %621, 0.000000e+00, !dbg !93
  %627 = or i1 %625, %626, !dbg !91
  %628 = select i1 %627, float %621, float %624, !dbg !92
  %629 = bitcast float %628 to i32, !dbg !88
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 2, i32 31), !dbg !88
  %631 = bitcast i32 %630 to float, !dbg !88
  %632 = fcmp olt float %628, %631, !dbg !90
  %633 = fcmp uno float %628, 0.000000e+00, !dbg !93
  %634 = or i1 %632, %633, !dbg !91
  %635 = select i1 %634, float %628, float %631, !dbg !92
  %636 = bitcast float %635 to i32, !dbg !88
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 1, i32 31), !dbg !88
  %638 = bitcast i32 %637 to float, !dbg !88
  %639 = fcmp olt float %635, %638, !dbg !90
  %640 = fcmp uno float %635, 0.000000e+00, !dbg !93
  %641 = or i1 %639, %640, !dbg !91
  %642 = and i32 %21, 15, !dbg !88
  %643 = icmp eq i32 %642, 0, !dbg !88
  %644 = and i1 %613, %643, !dbg !88
  %645 = select i1 %641, i32 %636, i32 %637, !dbg !92
  %646 = insertelement <1 x i32> poison, i32 %645, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %646, i1 %644) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %647 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %648 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %649 = bitcast float %647 to i32, !dbg !94
  %650 = bitcast float %648 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %649, i32 %650, i1 true) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %651 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %522, !dbg !94
  %652 = load float, ptr addrspace(3) %651, align 4, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %653 = extractelement <4 x float> %510, i64 0, !dbg !97
  %654 = extractelement <4 x float> %510, i64 1, !dbg !97
  %655 = fcmp ogt float %653, %654, !dbg !97
  %656 = fcmp uno float %653, 0.000000e+00, !dbg !98
  %657 = or i1 %655, %656, !dbg !99
  %658 = select i1 %657, float %653, float %654, !dbg !100
  %659 = extractelement <4 x float> %510, i64 2, !dbg !97
  %660 = extractelement <4 x float> %510, i64 3, !dbg !97
  %661 = fcmp ogt float %659, %660, !dbg !97
  %662 = fcmp uno float %659, 0.000000e+00, !dbg !98
  %663 = or i1 %661, %662, !dbg !99
  %664 = select i1 %663, float %659, float %660, !dbg !100
  %665 = bitcast float %658 to i32, !dbg !95
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 16, i32 31), !dbg !95
  %667 = bitcast i32 %666 to float, !dbg !95
  %668 = fcmp ogt float %658, %667, !dbg !97
  %669 = fcmp uno float %658, 0.000000e+00, !dbg !98
  %670 = or i1 %669, %668, !dbg !99
  %671 = select i1 %670, float %658, float %667, !dbg !100
  %672 = bitcast float %671 to i32, !dbg !95
  %673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 8, i32 31), !dbg !95
  %674 = bitcast i32 %673 to float, !dbg !95
  %675 = fcmp ogt float %671, %674, !dbg !97
  %676 = fcmp uno float %671, 0.000000e+00, !dbg !98
  %677 = or i1 %675, %676, !dbg !99
  %678 = select i1 %677, float %671, float %674, !dbg !100
  %679 = bitcast float %678 to i32, !dbg !95
  %680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %679, i32 4, i32 31), !dbg !95
  %681 = bitcast i32 %680 to float, !dbg !95
  %682 = fcmp ogt float %678, %681, !dbg !97
  %683 = fcmp uno float %678, 0.000000e+00, !dbg !98
  %684 = or i1 %682, %683, !dbg !99
  %685 = select i1 %684, float %678, float %681, !dbg !100
  %686 = bitcast float %685 to i32, !dbg !95
  %687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %686, i32 2, i32 31), !dbg !95
  %688 = bitcast i32 %687 to float, !dbg !95
  %689 = fcmp ogt float %685, %688, !dbg !97
  %690 = fcmp uno float %685, 0.000000e+00, !dbg !98
  %691 = or i1 %689, %690, !dbg !99
  %692 = select i1 %691, float %685, float %688, !dbg !100
  %693 = bitcast float %692 to i32, !dbg !95
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %693, i32 1, i32 31), !dbg !95
  %695 = bitcast i32 %694 to float, !dbg !95
  %696 = fcmp ogt float %692, %695, !dbg !97
  %697 = fcmp uno float %692, 0.000000e+00, !dbg !98
  %698 = or i1 %696, %697, !dbg !99
  %699 = bitcast float %664 to i32, !dbg !95
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 16, i32 31), !dbg !95
  %701 = bitcast i32 %700 to float, !dbg !95
  %702 = fcmp ogt float %664, %701, !dbg !97
  %703 = fcmp uno float %664, 0.000000e+00, !dbg !98
  %704 = or i1 %703, %702, !dbg !99
  %705 = select i1 %704, float %664, float %701, !dbg !100
  %706 = bitcast float %705 to i32, !dbg !95
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 8, i32 31), !dbg !95
  %708 = bitcast i32 %707 to float, !dbg !95
  %709 = fcmp ogt float %705, %708, !dbg !97
  %710 = fcmp uno float %705, 0.000000e+00, !dbg !98
  %711 = or i1 %709, %710, !dbg !99
  %712 = select i1 %711, float %705, float %708, !dbg !100
  %713 = bitcast float %712 to i32, !dbg !95
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 4, i32 31), !dbg !95
  %715 = bitcast i32 %714 to float, !dbg !95
  %716 = fcmp ogt float %712, %715, !dbg !97
  %717 = fcmp uno float %712, 0.000000e+00, !dbg !98
  %718 = or i1 %716, %717, !dbg !99
  %719 = select i1 %718, float %712, float %715, !dbg !100
  %720 = bitcast float %719 to i32, !dbg !95
  %721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %720, i32 2, i32 31), !dbg !95
  %722 = bitcast i32 %721 to float, !dbg !95
  %723 = fcmp ogt float %719, %722, !dbg !97
  %724 = fcmp uno float %719, 0.000000e+00, !dbg !98
  %725 = or i1 %723, %724, !dbg !99
  %726 = select i1 %725, float %719, float %722, !dbg !100
  %727 = bitcast float %726 to i32, !dbg !95
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %727, i32 1, i32 31), !dbg !95
  %729 = bitcast i32 %728 to float, !dbg !95
  %730 = fcmp ogt float %726, %729, !dbg !97
  %731 = fcmp uno float %726, 0.000000e+00, !dbg !98
  %732 = or i1 %730, %731, !dbg !99
  %733 = select i1 %698, i32 %693, i32 %694, !dbg !100
  %734 = insertelement <1 x i32> poison, i32 %733, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %606, <1 x i32> %734, i1 %295) #5, !dbg !95
  %735 = select i1 %732, i32 %727, i32 %728, !dbg !100
  %736 = insertelement <1 x i32> poison, i32 %735, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %610, <1 x i32> %736, i1 %295) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %737 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %613) #5, !dbg !95
  %738 = bitcast i32 %737 to float, !dbg !95
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 8, i32 31), !dbg !95
  %740 = bitcast i32 %739 to float, !dbg !95
  %741 = fcmp ogt float %738, %740, !dbg !97
  %742 = fcmp uno float %738, 0.000000e+00, !dbg !98
  %743 = or i1 %742, %741, !dbg !99
  %744 = select i1 %743, float %738, float %740, !dbg !100
  %745 = bitcast float %744 to i32, !dbg !95
  %746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %745, i32 4, i32 31), !dbg !95
  %747 = bitcast i32 %746 to float, !dbg !95
  %748 = fcmp ogt float %744, %747, !dbg !97
  %749 = fcmp uno float %744, 0.000000e+00, !dbg !98
  %750 = or i1 %748, %749, !dbg !99
  %751 = select i1 %750, float %744, float %747, !dbg !100
  %752 = bitcast float %751 to i32, !dbg !95
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 2, i32 31), !dbg !95
  %754 = bitcast i32 %753 to float, !dbg !95
  %755 = fcmp ogt float %751, %754, !dbg !97
  %756 = fcmp uno float %751, 0.000000e+00, !dbg !98
  %757 = or i1 %755, %756, !dbg !99
  %758 = select i1 %757, float %751, float %754, !dbg !100
  %759 = bitcast float %758 to i32, !dbg !95
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 1, i32 31), !dbg !95
  %761 = bitcast i32 %760 to float, !dbg !95
  %762 = fcmp ogt float %758, %761, !dbg !97
  %763 = fcmp uno float %758, 0.000000e+00, !dbg !98
  %764 = or i1 %762, %763, !dbg !99
  %765 = select i1 %764, i32 %759, i32 %760, !dbg !100
  %766 = insertelement <1 x i32> poison, i32 %765, i64 0, !dbg !95
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %766, i1 %644) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %767 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !95
  %768 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %769 = bitcast float %767 to i32, !dbg !101
  %770 = bitcast float %768 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %769, i32 %770, i1 true) #5, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %771 = load float, ptr addrspace(3) %651, align 4, !dbg !101
  %772 = sext i32 %523 to i64, !dbg !102
  %773 = getelementptr bfloat, ptr addrspace(1) %4, i64 %772, !dbg !102
  %774 = fptrunc float %652 to bfloat, !dbg !94
  %775 = and i32 %21, 510, !dbg !94
  %776 = icmp eq i32 %775, 0, !dbg !94
  %777 = bitcast bfloat %774 to i16, !dbg !94
  %778 = and i1 %776, %524, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %773, i1 %778) #5, !dbg !94
  %779 = getelementptr bfloat, ptr addrspace(1) %5, i64 %772, !dbg !103
  %780 = fptrunc float %771 to bfloat, !dbg !101
  %781 = bitcast bfloat %780 to i16, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %781, ptr addrspace(1) %779, i1 %778) #5, !dbg !101
  %782 = getelementptr bfloat, ptr addrspace(1) %6, i64 %772, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %782, i1 %778) #5, !dbg !105
  %783 = getelementptr bfloat, ptr addrspace(1) %7, i64 %772, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %781, ptr addrspace(1) %783, i1 %778) #5, !dbg !107
  %784 = getelementptr bfloat, ptr addrspace(1) %8, i64 %772, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %784, i1 %778) #5, !dbg !109
  %785 = getelementptr bfloat, ptr addrspace(1) %9, i64 %772, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %781, ptr addrspace(1) %785, i1 %778) #5, !dbg !111
  %786 = getelementptr bfloat, ptr addrspace(1) %10, i64 %772, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %777, ptr addrspace(1) %786, i1 %778) #5, !dbg !113
  %787 = getelementptr bfloat, ptr addrspace(1) %11, i64 %772, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %781, ptr addrspace(1) %787, i1 %778) #5, !dbg !115
  %.inv = fcmp oge float %647, 0.000000e+00, !dbg !116
  %788 = select i1 %.inv, float 0.000000e+00, float %647, !dbg !116
  %.inv4 = fcmp oge float %648, 0.000000e+00, !dbg !116
  %789 = select i1 %.inv4, float 0.000000e+00, float %648, !dbg !116
  %790 = fsub float 0.000000e+00, %788, !dbg !118
  %791 = fsub float 0.000000e+00, %789, !dbg !118
  %.inv5 = fcmp ole float %767, 0.000000e+00, !dbg !119
  %792 = select i1 %.inv5, float 0.000000e+00, float %767, !dbg !119
  %.inv6 = fcmp ole float %768, 0.000000e+00, !dbg !119
  %793 = select i1 %.inv6, float 0.000000e+00, float %768, !dbg !119
  %794 = fcmp ogt float %790, %792, !dbg !121
  %795 = fcmp ogt float %791, %793, !dbg !121
  %796 = fcmp uno float %790, 0.000000e+00, !dbg !123
  %797 = fcmp uno float %791, 0.000000e+00, !dbg !123
  %798 = or i1 %796, %794, !dbg !124
  %799 = or i1 %797, %795, !dbg !124
  %800 = select i1 %798, float %790, float %792, !dbg !125
  %801 = select i1 %799, float %791, float %793, !dbg !125
  %802 = fmul float %800, 0x3F80204080000000, !dbg !126
  %803 = fmul float %801, 0x3F80204080000000, !dbg !126
  %804 = fcmp ogt float %802, 0x3EE4F8B580000000, !dbg !127
  %805 = fcmp ogt float %803, 0x3EE4F8B580000000, !dbg !127
  %806 = fcmp uno float %802, 0.000000e+00, !dbg !129
  %807 = fcmp uno float %803, 0.000000e+00, !dbg !129
  %808 = or i1 %804, %806, !dbg !130
  %809 = or i1 %805, %807, !dbg !130
  %810 = select i1 %808, float %802, float 0x3EE4F8B580000000, !dbg !131
  %811 = select i1 %809, float %803, float 0x3EE4F8B580000000, !dbg !131
  %812 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %810), !dbg !132
  %813 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %811), !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %814 = bitcast float %812 to <1 x i32>, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %814, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %814, i1 true) #5, !dbg !133
  %815 = bitcast float %813 to <1 x i32>, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %815, i1 true) #5, !dbg !133
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %815, i1 true) #5, !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !133
  %816 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %296, !dbg !133
  %817 = load float, ptr addrspace(3) %816, align 8, !dbg !133
  %818 = getelementptr bfloat, ptr addrspace(1) %3, i64 %32, !dbg !134
  %819 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %818, i1 %25) #5, !dbg !135
  %820 = extractvalue { i32, i32 } %819, 0, !dbg !135
  %821 = bitcast i32 %820 to <2 x bfloat>, !dbg !135
  %822 = extractvalue { i32, i32 } %819, 1, !dbg !135
  %823 = bitcast i32 %822 to <2 x bfloat>, !dbg !135
  %824 = extractelement <2 x bfloat> %821, i64 0, !dbg !135
  %825 = extractelement <2 x bfloat> %821, i64 1, !dbg !135
  %826 = extractelement <2 x bfloat> %823, i64 0, !dbg !135
  %827 = extractelement <2 x bfloat> %823, i64 1, !dbg !135
  %828 = fpext bfloat %824 to float, !dbg !136
  %829 = fpext bfloat %825 to float, !dbg !136
  %830 = fpext bfloat %826 to float, !dbg !136
  %831 = fpext bfloat %827 to float, !dbg !136
  %832 = fmul float %817, %828, !dbg !133
  %833 = fmul float %817, %829, !dbg !133
  %834 = fmul float %817, %830, !dbg !133
  %835 = fmul float %817, %831, !dbg !133
  %836 = tail call float @llvm.nvvm.round.f(float %832) #5, !dbg !137
  %837 = tail call float @llvm.nvvm.round.f(float %833) #5, !dbg !137
  %838 = tail call float @llvm.nvvm.round.f(float %834) #5, !dbg !137
  %839 = tail call float @llvm.nvvm.round.f(float %835) #5, !dbg !137
  %840 = insertelement <4 x float> poison, float %836, i64 0, !dbg !138
  %841 = insertelement <4 x float> %840, float %837, i64 1, !dbg !138
  %842 = insertelement <4 x float> %841, float %838, i64 2, !dbg !138
  %843 = insertelement <4 x float> %842, float %839, i64 3, !dbg !138
  %844 = fcmp ogt <4 x float> %843, splat (float -1.270000e+02), !dbg !138
  %845 = fcmp uno <4 x float> %843, zeroinitializer, !dbg !140
  %846 = or <4 x i1> %844, %845, !dbg !141
  %847 = select <4 x i1> %846, <4 x float> %843, <4 x float> splat (float -1.270000e+02), !dbg !142
  %848 = fcmp olt <4 x float> %847, splat (float 1.270000e+02), !dbg !143
  %849 = fcmp uno <4 x float> %847, zeroinitializer, !dbg !145
  %850 = or <4 x i1> %848, %849, !dbg !146
  %851 = fptosi <4 x float> %847 to <4 x i8>, !dbg !147
  %852 = select <4 x i1> %850, <4 x i8> %851, <4 x i8> splat (i8 127), !dbg !148
  %853 = getelementptr i8, ptr addrspace(1) %12, i64 %32, !dbg !149
  %854 = bitcast <4 x i8> %852 to i32, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %854, ptr addrspace(1) %853, i1 %25) #5, !dbg !150
  %855 = getelementptr i8, ptr addrspace(1) %13, i64 %32, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %854, ptr addrspace(1) %855, i1 %25) #5, !dbg !152
  %856 = getelementptr i8, ptr addrspace(1) %14, i64 %32, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %854, ptr addrspace(1) %856, i1 %25) #5, !dbg !154
  %857 = getelementptr i8, ptr addrspace(1) %15, i64 %32, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %854, ptr addrspace(1) %857, i1 %25) #5, !dbg !156
  %858 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !134
  %859 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %858, i1 %25) #5, !dbg !135
  %860 = extractvalue { i32, i32 } %859, 0, !dbg !135
  %861 = bitcast i32 %860 to <2 x bfloat>, !dbg !135
  %862 = extractvalue { i32, i32 } %859, 1, !dbg !135
  %863 = bitcast i32 %862 to <2 x bfloat>, !dbg !135
  %864 = extractelement <2 x bfloat> %861, i64 0, !dbg !135
  %865 = extractelement <2 x bfloat> %861, i64 1, !dbg !135
  %866 = extractelement <2 x bfloat> %863, i64 0, !dbg !135
  %867 = extractelement <2 x bfloat> %863, i64 1, !dbg !135
  %868 = fpext bfloat %864 to float, !dbg !136
  %869 = fpext bfloat %865 to float, !dbg !136
  %870 = fpext bfloat %866 to float, !dbg !136
  %871 = fpext bfloat %867 to float, !dbg !136
  %872 = fmul float %817, %868, !dbg !133
  %873 = fmul float %817, %869, !dbg !133
  %874 = fmul float %817, %870, !dbg !133
  %875 = fmul float %817, %871, !dbg !133
  %876 = tail call float @llvm.nvvm.round.f(float %872) #5, !dbg !137
  %877 = tail call float @llvm.nvvm.round.f(float %873) #5, !dbg !137
  %878 = tail call float @llvm.nvvm.round.f(float %874) #5, !dbg !137
  %879 = tail call float @llvm.nvvm.round.f(float %875) #5, !dbg !137
  %880 = insertelement <4 x float> poison, float %876, i64 0, !dbg !138
  %881 = insertelement <4 x float> %880, float %877, i64 1, !dbg !138
  %882 = insertelement <4 x float> %881, float %878, i64 2, !dbg !138
  %883 = insertelement <4 x float> %882, float %879, i64 3, !dbg !138
  %884 = fcmp ogt <4 x float> %883, splat (float -1.270000e+02), !dbg !138
  %885 = fcmp uno <4 x float> %883, zeroinitializer, !dbg !140
  %886 = or <4 x i1> %884, %885, !dbg !141
  %887 = select <4 x i1> %886, <4 x float> %883, <4 x float> splat (float -1.270000e+02), !dbg !142
  %888 = fcmp olt <4 x float> %887, splat (float 1.270000e+02), !dbg !143
  %889 = fcmp uno <4 x float> %887, zeroinitializer, !dbg !145
  %890 = or <4 x i1> %888, %889, !dbg !146
  %891 = fptosi <4 x float> %887 to <4 x i8>, !dbg !147
  %892 = select <4 x i1> %890, <4 x i8> %891, <4 x i8> splat (i8 127), !dbg !148
  %893 = getelementptr i8, ptr addrspace(1) %12, i64 %52, !dbg !149
  %894 = bitcast <4 x i8> %892 to i32, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %894, ptr addrspace(1) %893, i1 %25) #5, !dbg !150
  %895 = getelementptr i8, ptr addrspace(1) %13, i64 %52, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %894, ptr addrspace(1) %895, i1 %25) #5, !dbg !152
  %896 = getelementptr i8, ptr addrspace(1) %14, i64 %52, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %894, ptr addrspace(1) %896, i1 %25) #5, !dbg !154
  %897 = getelementptr i8, ptr addrspace(1) %15, i64 %52, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %894, ptr addrspace(1) %897, i1 %25) #5, !dbg !156
  %898 = getelementptr bfloat, ptr addrspace(1) %3, i64 %97, !dbg !134
  %899 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %898, i1 %25) #5, !dbg !135
  %900 = extractvalue { i32, i32 } %899, 0, !dbg !135
  %901 = bitcast i32 %900 to <2 x bfloat>, !dbg !135
  %902 = extractvalue { i32, i32 } %899, 1, !dbg !135
  %903 = bitcast i32 %902 to <2 x bfloat>, !dbg !135
  %904 = extractelement <2 x bfloat> %901, i64 0, !dbg !135
  %905 = extractelement <2 x bfloat> %901, i64 1, !dbg !135
  %906 = extractelement <2 x bfloat> %903, i64 0, !dbg !135
  %907 = extractelement <2 x bfloat> %903, i64 1, !dbg !135
  %908 = fpext bfloat %904 to float, !dbg !136
  %909 = fpext bfloat %905 to float, !dbg !136
  %910 = fpext bfloat %906 to float, !dbg !136
  %911 = fpext bfloat %907 to float, !dbg !136
  %912 = fmul float %817, %908, !dbg !133
  %913 = fmul float %817, %909, !dbg !133
  %914 = fmul float %817, %910, !dbg !133
  %915 = fmul float %817, %911, !dbg !133
  %916 = tail call float @llvm.nvvm.round.f(float %912) #5, !dbg !137
  %917 = tail call float @llvm.nvvm.round.f(float %913) #5, !dbg !137
  %918 = tail call float @llvm.nvvm.round.f(float %914) #5, !dbg !137
  %919 = tail call float @llvm.nvvm.round.f(float %915) #5, !dbg !137
  %920 = insertelement <4 x float> poison, float %916, i64 0, !dbg !138
  %921 = insertelement <4 x float> %920, float %917, i64 1, !dbg !138
  %922 = insertelement <4 x float> %921, float %918, i64 2, !dbg !138
  %923 = insertelement <4 x float> %922, float %919, i64 3, !dbg !138
  %924 = fcmp ogt <4 x float> %923, splat (float -1.270000e+02), !dbg !138
  %925 = fcmp uno <4 x float> %923, zeroinitializer, !dbg !140
  %926 = or <4 x i1> %924, %925, !dbg !141
  %927 = select <4 x i1> %926, <4 x float> %923, <4 x float> splat (float -1.270000e+02), !dbg !142
  %928 = fcmp olt <4 x float> %927, splat (float 1.270000e+02), !dbg !143
  %929 = fcmp uno <4 x float> %927, zeroinitializer, !dbg !145
  %930 = or <4 x i1> %928, %929, !dbg !146
  %931 = fptosi <4 x float> %927 to <4 x i8>, !dbg !147
  %932 = select <4 x i1> %930, <4 x i8> %931, <4 x i8> splat (i8 127), !dbg !148
  %933 = getelementptr i8, ptr addrspace(1) %12, i64 %97, !dbg !149
  %934 = bitcast <4 x i8> %932 to i32, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %934, ptr addrspace(1) %933, i1 %25) #5, !dbg !150
  %935 = getelementptr i8, ptr addrspace(1) %13, i64 %97, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %934, ptr addrspace(1) %935, i1 %25) #5, !dbg !152
  %936 = getelementptr i8, ptr addrspace(1) %14, i64 %97, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %934, ptr addrspace(1) %936, i1 %25) #5, !dbg !154
  %937 = getelementptr i8, ptr addrspace(1) %15, i64 %97, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %934, ptr addrspace(1) %937, i1 %25) #5, !dbg !156
  ret void, !dbg !157
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 38, column: 41, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 42, column: 51, scope: !6)
!25 = !DILocation(line: 46, column: 66, scope: !6)
!26 = !DILocation(line: 210, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 210, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 211, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 211, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 211, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 45, column: 58, scope: !6)
!32 = !DILocation(line: 217, column: 21, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!34 = !DILocation(line: 47, column: 79, scope: !6)
!35 = !DILocation(line: 218, column: 28, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 219, column: 39, scope: !33, inlinedAt: !34)
!37 = !DILocation(line: 219, column: 60, scope: !33, inlinedAt: !34)
!38 = !DILocation(line: 219, column: 49, scope: !33, inlinedAt: !34)
!39 = !DILocation(line: 221, column: 25, scope: !33, inlinedAt: !34)
!40 = !DILocation(line: 221, column: 17, scope: !33, inlinedAt: !34)
!41 = !DILocation(line: 222, column: 15, scope: !33, inlinedAt: !34)
!42 = !DILocation(line: 222, column: 30, scope: !33, inlinedAt: !34)
!43 = !DILocation(line: 222, column: 38, scope: !33, inlinedAt: !34)
!44 = !DILocation(line: 222, column: 49, scope: !33, inlinedAt: !34)
!45 = !DILocation(line: 222, column: 22, scope: !33, inlinedAt: !34)
!46 = !DILocation(line: 229, column: 46, scope: !22, inlinedAt: !34)
!47 = !DILocation(line: 67, column: 24, scope: !6)
!48 = !DILocation(line: 69, column: 24, scope: !6)
!49 = !DILocation(line: 70, column: 32, scope: !6)
!50 = !DILocation(line: 53, column: 40, scope: !6)
!51 = !DILocation(line: 83, column: 50, scope: !6)
!52 = !DILocation(line: 85, column: 50, scope: !6)
!53 = !DILocation(line: 54, column: 31, scope: !6)
!54 = !DILocation(line: 59, column: 41, scope: !6)
!55 = !DILocation(line: 59, column: 34, scope: !6)
!56 = !DILocation(line: 59, column: 51, scope: !6)
!57 = !DILocation(line: 59, column: 113, scope: !6)
!58 = !DILocation(line: 60, column: 42, scope: !6)
!59 = !DILocation(line: 60, column: 35, scope: !6)
!60 = !DILocation(line: 60, column: 49, scope: !6)
!61 = !DILocation(line: 61, column: 35, scope: !6)
!62 = !DILocation(line: 61, column: 49, scope: !6)
!63 = !DILocation(line: 62, column: 35, scope: !6)
!64 = !DILocation(line: 62, column: 42, scope: !6)
!65 = !DILocation(line: 63, column: 35, scope: !6)
!66 = !DILocation(line: 63, column: 42, scope: !6)
!67 = !DILocation(line: 65, column: 24, scope: !6)
!68 = !DILocation(line: 71, column: 24, scope: !6)
!69 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !70)
!70 = !DILocation(line: 82, column: 47, scope: !6)
!71 = !DILocation(line: 61, column: 102, scope: !6)
!72 = !DILocation(line: 63, column: 95, scope: !6)
!73 = !DILocation(line: 74, column: 24, scope: !6)
!74 = !DILocation(line: 76, column: 24, scope: !6)
!75 = !DILocation(line: 77, column: 24, scope: !6)
!76 = !DILocation(line: 79, column: 24, scope: !6)
!77 = !DILocation(line: 80, column: 24, scope: !6)
!78 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !70)
!79 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !70)
!80 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !70)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !83)
!83 = !DILocation(line: 84, column: 47, scope: !6)
!84 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !83)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 110, column: 29, scope: !22, inlinedAt: !89)
!89 = !DILocation(line: 87, column: 40, scope: !6)
!90 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !89)
!91 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !89)
!92 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !89)
!93 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !89)
!94 = !DILocation(line: 89, column: 37, scope: !6)
!95 = !DILocation(line: 115, column: 29, scope: !22, inlinedAt: !96)
!96 = !DILocation(line: 88, column: 40, scope: !6)
!97 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !96)
!98 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !96)
!99 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !96)
!100 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !96)
!101 = !DILocation(line: 90, column: 37, scope: !6)
!102 = !DILocation(line: 89, column: 25, scope: !6)
!103 = !DILocation(line: 90, column: 25, scope: !6)
!104 = !DILocation(line: 91, column: 25, scope: !6)
!105 = !DILocation(line: 91, column: 37, scope: !6)
!106 = !DILocation(line: 92, column: 25, scope: !6)
!107 = !DILocation(line: 92, column: 37, scope: !6)
!108 = !DILocation(line: 93, column: 25, scope: !6)
!109 = !DILocation(line: 93, column: 37, scope: !6)
!110 = !DILocation(line: 94, column: 25, scope: !6)
!111 = !DILocation(line: 94, column: 37, scope: !6)
!112 = !DILocation(line: 95, column: 25, scope: !6)
!113 = !DILocation(line: 95, column: 37, scope: !6)
!114 = !DILocation(line: 96, column: 26, scope: !6)
!115 = !DILocation(line: 96, column: 38, scope: !6)
!116 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !117)
!117 = !DILocation(line: 105, column: 46, scope: !6)
!118 = !DILocation(line: 106, column: 17, scope: !6)
!119 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !120)
!120 = !DILocation(line: 107, column: 46, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !122)
!122 = !DILocation(line: 108, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !122)
!126 = !DILocation(line: 110, column: 24, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !128)
!128 = !DILocation(line: 113, column: 46, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !128)
!130 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !128)
!131 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !128)
!132 = !DILocation(line: 116, column: 25, scope: !6)
!133 = !DILocation(line: 119, column: 24, scope: !6)
!134 = !DILocation(line: 103, column: 36, scope: !6)
!135 = !DILocation(line: 103, column: 53, scope: !6)
!136 = !DILocation(line: 103, column: 115, scope: !6)
!137 = !DILocation(line: 120, column: 36, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !139)
!139 = !DILocation(line: 123, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !139)
!143 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !144)
!144 = !DILocation(line: 125, column: 46, scope: !6)
!145 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !144)
!146 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !144)
!147 = !DILocation(line: 127, column: 25, scope: !6)
!148 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !144)
!149 = !DILocation(line: 128, column: 30, scope: !6)
!150 = !DILocation(line: 128, column: 54, scope: !6)
!151 = !DILocation(line: 129, column: 30, scope: !6)
!152 = !DILocation(line: 129, column: 54, scope: !6)
!153 = !DILocation(line: 130, column: 30, scope: !6)
!154 = !DILocation(line: 130, column: 54, scope: !6)
!155 = !DILocation(line: 131, column: 30, scope: !6)
!156 = !DILocation(line: 131, column: 54, scope: !6)
!157 = !DILocation(line: 97, column: 4, scope: !6)
