; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 384, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 113, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 384, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %14, %23, !dbg !20
  %25 = shl nsw i32 %13, 6, !dbg !21
  %26 = lshr exact i32 %18, 2, !dbg !22
  %27 = lshr i32 %15, 2, !dbg !22
  %28 = and i32 %27, 16, !dbg !22
  %29 = and i32 %27, 39, !dbg !22
  %30 = or disjoint i32 %26, %29, !dbg !22
  %31 = or disjoint i32 %30, %28, !dbg !22
  %32 = shl i32 %15, 2, !dbg !22
  %33 = and i32 %32, 16, !dbg !22
  %34 = and i32 %32, 28, !dbg !22
  %35 = or disjoint i32 %25, %31, !dbg !23
  %36 = srem i32 %24, 3600, !dbg !24
  %37 = srem i32 %35, 3072, !dbg !25
  %38 = shl i32 %15, 3, !dbg !26
  %39 = and i32 %38, 24, !dbg !26
  %40 = mul nsw i32 %36, 3072, !dbg !27
  %41 = mul nsw i32 %37, 3072, !dbg !28
  %42 = or disjoint i32 %40, %34, !dbg !29
  %43 = sext i32 %42 to i64, !dbg !30
  %44 = getelementptr i8, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = lshr exact i32 %18, 1, !dbg !31
  %46 = xor i32 %34, %45, !dbg !31
  %47 = shl nuw nsw i32 %23, 5, !dbg !31
  %48 = or disjoint i32 %47, %46, !dbg !31
  %49 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %48, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %49, ptr addrspace(1) %44, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %50 = or disjoint i32 %41, %39, !dbg !32
  %51 = sext i32 %50 to i64, !dbg !33
  %52 = getelementptr i8, ptr addrspace(1) %1, i64 %51, !dbg !33
  %53 = xor i32 %39, %17, !dbg !34
  %54 = shl nuw nsw i32 %31, 5, !dbg !34
  %55 = or disjoint i32 %54, %53, !dbg !34
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %56, ptr addrspace(1) %52, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %57 = or disjoint i32 %42, 32, !dbg !29
  %58 = sext i32 %57 to i64, !dbg !30
  %59 = getelementptr i8, ptr addrspace(1) %0, i64 %58, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %60 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %48, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %60, ptr addrspace(1) %59, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %61 = or disjoint i32 %50, 32, !dbg !32
  %62 = sext i32 %61 to i64, !dbg !33
  %63 = getelementptr i8, ptr addrspace(1) %1, i64 %62, !dbg !33
  %64 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %55, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %63, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %65 = or disjoint i32 %42, 64, !dbg !29
  %66 = sext i32 %65 to i64, !dbg !30
  %67 = getelementptr i8, ptr addrspace(1) %0, i64 %66, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %68 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10240), i32 %48, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %67, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %69 = or disjoint i32 %50, 64, !dbg !32
  %70 = sext i32 %69 to i64, !dbg !33
  %71 = getelementptr i8, ptr addrspace(1) %1, i64 %70, !dbg !33
  %72 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %55, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %71, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %73 = or disjoint i32 %42, 96, !dbg !29
  %74 = sext i32 %73 to i64, !dbg !30
  %75 = getelementptr i8, ptr addrspace(1) %0, i64 %74, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %76 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 11264), i32 %48, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %75, i32 4) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %77 = or disjoint i32 %50, 96, !dbg !32
  %78 = sext i32 %77 to i64, !dbg !33
  %79 = getelementptr i8, ptr addrspace(1) %1, i64 %78, !dbg !33
  %80 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6144), i32 %55, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %79, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %81 = and i32 %15, 7
  %82 = and i32 %15, 15
  %83 = xor i32 %33, %17
  %84 = or disjoint i32 %22, %82
  %85 = shl nuw nsw i32 %84, 5
  %86 = or disjoint i32 %85, %83
  %invariant.gep15 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %86, !dbg !35
  %87 = shl nuw nsw i32 %16, 1
  %88 = xor i32 %33, %87
  %89 = or disjoint i32 %26, %81
  %90 = or disjoint i32 %89, %28
  %91 = shl nuw nsw i32 %90, 5
  %92 = or disjoint i32 %91, %88
  %93 = or i32 %92, 1024
  %invariant.op = or disjoint i32 %42, 128, !dbg !35
  %invariant.op17 = or disjoint i32 %50, 128, !dbg !35
  %94 = sext i32 %invariant.op to i64, !dbg !35
  %95 = sext i32 %invariant.op17 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %94, !dbg !35
  %invariant.gep36 = getelementptr i8, ptr addrspace(1) %1, i64 %95, !dbg !35
  br label %96, !dbg !35

96:                                               ; preds = %4, %96
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %96 ]
  %97 = phi i32 [ -1, %4 ], [ %110, %96 ]
  %98 = phi i32 [ 3, %4 ], [ %142, %96 ]
  %99 = phi i32 [ 0, %4 ], [ %131, %96 ]
  %100 = phi i32 [ 0, %4 ], [ %132, %96 ]
  %101 = phi i32 [ 0, %4 ], [ %133, %96 ]
  %102 = phi i32 [ 0, %4 ], [ %134, %96 ]
  %103 = phi i32 [ 0, %4 ], [ %136, %96 ]
  %104 = phi i32 [ 0, %4 ], [ %137, %96 ]
  %105 = phi i32 [ 0, %4 ], [ %138, %96 ]
  %106 = phi i32 [ 0, %4 ], [ %139, %96 ]
  %107 = icmp samesign ult i64 %indvars.iv, 92, !dbg !35
  %108 = add i32 %97, 1, !dbg !35
  %109 = icmp slt i32 %108, 4, !dbg !35
  %110 = select i1 %109, i32 %108, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %111 = shl i32 %110, 10, !dbg !31
  %gep16 = getelementptr i8, ptr addrspace(3) %invariant.gep15, i32 %111, !dbg !31
  %112 = ptrtoint ptr addrspace(3) %gep16 to i32, !dbg !31
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %112) #1, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !31
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !31
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !31
  %118 = shl i32 %110, 11, !dbg !34
  %119 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !34
  %120 = getelementptr inbounds nuw i8, ptr addrspace(3) %119, i32 %92, !dbg !34
  %121 = ptrtoint ptr addrspace(3) %120 to i32, !dbg !34
  %122 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %121) #1, !dbg !34
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !34
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !34
  %125 = getelementptr inbounds nuw i8, ptr addrspace(3) %119, i32 %93, !dbg !34
  %126 = ptrtoint ptr addrspace(3) %125 to i32, !dbg !34
  %127 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %126) #1, !dbg !34
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !34
  %129 = extractvalue { i32, i32 } %127, 1, !dbg !34
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %99, i32 %100, i32 %101, i32 %102, i32 %114, i32 %115, i32 %116, i32 %117, i32 %123, i32 %124) #1, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !36
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %103, i32 %104, i32 %105, i32 %106, i32 %114, i32 %115, i32 %116, i32 %117, i32 %128, i32 %129) #1, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !36
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !36
  %140 = add i32 %98, 1, !dbg !35
  %141 = icmp slt i32 %140, 4, !dbg !35
  %142 = select i1 %141, i32 %140, i32 0, !dbg !35
  %143 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep35 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %143, !dbg !30
  %144 = shl i32 %142, 10, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %49, i32 %144, !dbg !31
  %145 = select i1 %107, i32 4, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep35, i32 %145) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep37 = getelementptr i8, ptr addrspace(1) %invariant.gep36, i64 %143, !dbg !33
  %146 = shl i32 %142, 11, !dbg !34
  %gep14 = getelementptr i8, ptr addrspace(3) %56, i32 %146, !dbg !34
  %147 = select i1 %107, i32 8, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep14, ptr addrspace(1) %gep37, i32 %147) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !35
  br i1 %exitcond.not, label %148, label %96, !dbg !35

148:                                              ; preds = %96
  %149 = shl nuw nsw i32 %16, 2, !dbg !22
  %150 = or disjoint i32 %34, %149, !dbg !22
  %151 = or disjoint i32 %25, %150, !dbg !23
  %152 = lshr i32 %15, 4, !dbg !19
  %153 = and i32 %152, 15, !dbg !19
  %154 = or disjoint i32 %153, %14, !dbg !20
  %155 = or disjoint i32 %154, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %156 = icmp slt i32 %154, 3600, !dbg !38
  %157 = icmp slt i32 %155, 3600, !dbg !38
  %158 = icmp slt i32 %151, 3072, !dbg !39
  %159 = and i1 %156, %158, !dbg !40
  %160 = and i1 %157, %158, !dbg !40
  %161 = mul i32 %154, 3072, !dbg !41
  %162 = mul i32 %155, 3072, !dbg !41
  %163 = add i32 %161, %151, !dbg !42
  %164 = add i32 %162, %151, !dbg !42
  %165 = sext i32 %163 to i64, !dbg !43
  %166 = getelementptr i32, ptr addrspace(1) %2, i64 %165, !dbg !43
  %167 = sext i32 %164 to i64, !dbg !43
  %168 = getelementptr i32, ptr addrspace(1) %2, i64 %167, !dbg !43
  %169 = shl i32 %15, 1, !dbg !44
  %170 = and i32 %169, 6, !dbg !44
  %171 = shl i32 %15, 4, !dbg !44
  %172 = and i32 %171, 192, !dbg !44
  %173 = or disjoint i32 %172, %170, !dbg !44
  %174 = shl nuw nsw i32 %17, 4, !dbg !44
  %175 = or disjoint i32 %173, %174, !dbg !44
  %176 = shl nuw nsw i32 %21, 3, !dbg !44
  %177 = or disjoint i32 %175, %176, !dbg !44
  %178 = or disjoint i32 %28, %26, !dbg !44
  %179 = or disjoint i32 %178, %177, !dbg !44
  %180 = and i32 %32, 1020, !dbg !44
  %181 = lshr i32 %177, 4, !dbg !44
  %182 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %181, !dbg !44
  %183 = getelementptr inbounds nuw i32, ptr addrspace(3) %182, i32 %179, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %183, i32 %131, i32 %132, i1 true) #1, !dbg !44
  %184 = or disjoint i32 %179, 512, !dbg !44
  %185 = lshr i32 %184, 4, !dbg !44
  %186 = and i32 %185, 268435452, !dbg !44
  %187 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %186, !dbg !44
  %188 = getelementptr i32, ptr addrspace(3) %187, i32 %184, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %188, i32 %133, i32 %134, i1 true) #1, !dbg !44
  %189 = or disjoint i32 %179, 32, !dbg !44
  %190 = getelementptr i32, ptr addrspace(3) %182, i32 %189, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %190, i32 %136, i32 %137, i1 true) #1, !dbg !44
  %191 = or disjoint i32 %179, 544, !dbg !44
  %192 = lshr i32 %191, 4, !dbg !44
  %193 = and i32 %192, 268435452, !dbg !44
  %194 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %193, !dbg !44
  %195 = getelementptr i32, ptr addrspace(3) %194, i32 %191, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %195, i32 %138, i32 %139, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %196 = lshr i32 %32, 4, !dbg !44
  %197 = and i32 %196, 60, !dbg !44
  %198 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %197, !dbg !44
  %199 = getelementptr inbounds nuw i32, ptr addrspace(3) %198, i32 %180, !dbg !44
  %200 = or disjoint i32 %180, 1024, !dbg !44
  %201 = lshr i32 %200, 4, !dbg !44
  %202 = and i32 %201, 124, !dbg !44
  %203 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %202, !dbg !44
  %204 = getelementptr inbounds nuw i32, ptr addrspace(3) %203, i32 %200, !dbg !44
  %205 = load <4 x i32>, ptr addrspace(3) %204, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %199, align 16, !dbg !44
  %206 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 4, !dbg !44
  %.extract6 = load i32, ptr addrspace(3) %206, align 4, !dbg !44
  %207 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 8, !dbg !44
  %.extract7 = load i32, ptr addrspace(3) %207, align 8, !dbg !44
  %208 = getelementptr inbounds nuw i8, ptr addrspace(3) %199, i32 12, !dbg !44
  %.extract8 = load i32, ptr addrspace(3) %208, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %166, i1 %159) #1, !dbg !44
  %.extract9 = extractelement <4 x i32> %205, i64 0, !dbg !44
  %.extract10 = extractelement <4 x i32> %205, i64 1, !dbg !44
  %.extract11 = extractelement <4 x i32> %205, i64 2, !dbg !44
  %.extract12 = extractelement <4 x i32> %205, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract9, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %168, i1 %160) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpnrr3rxm7qpczchcgjv5v3rcibvs4ra7nl4wlc7pzbfsdpzual4.py", directory: "/tmp/torchinductor_root/pn")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 67, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
