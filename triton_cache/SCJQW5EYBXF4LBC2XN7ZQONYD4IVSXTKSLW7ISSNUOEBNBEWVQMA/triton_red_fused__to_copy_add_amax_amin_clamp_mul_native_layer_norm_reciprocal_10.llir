; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 2, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 256, !dbg !11
  %.lobit3 = lshr i32 %19, 7, !dbg !11
  %21 = and i32 %.lobit3, 3, !dbg !11
  %22 = and i32 %19, 31, !dbg !11
  %.lobit = lshr exact i32 %20, 8, !dbg !11
  %23 = or disjoint i32 %21, %18, !dbg !12
  %24 = or disjoint i32 %.lobit, %18, !dbg !12
  %25 = or disjoint i32 %24, 2, !dbg !12
  %26 = icmp slt i32 %23, 3600, !dbg !13
  %27 = icmp slt i32 %18, 3600, !dbg !13
  %28 = icmp slt i32 %24, 3600, !dbg !13
  %29 = icmp slt i32 %25, 3600, !dbg !13
  %30 = shl i32 %19, 2, !dbg !14
  %31 = and i32 %30, 2044, !dbg !14
  %32 = shl i32 %19, 4, !dbg !14
  %33 = and i32 %32, 2032, !dbg !14
  %34 = or disjoint i32 %33, 4, !dbg !14
  %35 = or disjoint i32 %33, 8, !dbg !14
  %36 = or disjoint i32 %33, 12, !dbg !14
  %37 = shl i32 %19, 3, !dbg !14
  %38 = and i32 %37, 2040, !dbg !14
  %39 = sext i32 %23 to i64, !dbg !15
  %40 = getelementptr bfloat, ptr addrspace(1) %4, i64 %39, !dbg !15
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %26) #5, !dbg !16
  %57 = bitcast i16 %56 to bfloat, !dbg !16
  %58 = getelementptr bfloat, ptr addrspace(1) %5, i64 %39, !dbg !17
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %26) #5, !dbg !18
  %75 = bitcast i16 %74 to bfloat, !dbg !18
  %76 = mul i32 %23, 3072, !dbg !19
  %77 = mul i32 %24, 3072, !dbg !19
  %78 = mul i32 %25, 3072, !dbg !19
  %.inv = fcmp oge bfloat %57, 0xR0000, !dbg !20
  %79 = select i1 %.inv, bfloat 0xR0000, bfloat %57, !dbg !20
  %80 = fpext bfloat %79 to float, !dbg !20
  %81 = fsub float 0.000000e+00, %80, !dbg !24
  %.inv6 = fcmp ole bfloat %75, 0xR0000, !dbg !25
  %82 = select i1 %.inv6, bfloat 0xR0000, bfloat %75, !dbg !25
  %83 = fpext bfloat %82 to float, !dbg !25
  %84 = fcmp ogt float %81, %83, !dbg !27
  %85 = fcmp uno float %81, 0.000000e+00, !dbg !29
  %86 = or i1 %85, %84, !dbg !30
  %87 = select i1 %86, float %81, float %83, !dbg !31
  %88 = fmul float %87, 0x3F80204080000000, !dbg !32
  %89 = fcmp ogt float %88, 0x3EE4F8B580000000, !dbg !33
  %90 = fcmp uno float %88, 0.000000e+00, !dbg !35
  %91 = or i1 %89, %90, !dbg !36
  %92 = select i1 %91, float %88, float 0x3EE4F8B580000000, !dbg !37
  %93 = add i32 %76, %34
  %94 = add i32 %76, %35
  %95 = add i32 %76, %36
  %96 = and i32 %32, 8176
  %97 = lshr i32 %96, 11
  %.idx60 = shl nuw nsw i32 %97, 4
  %98 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx60
  %99 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %98, i32 %96
  %100 = or disjoint i32 %96, 8
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %98, i32 %100
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %31
  %103 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 4112
  %104 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8224
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 12336
  %106 = shl nuw nsw i32 %97, 2
  %107 = or disjoint i32 %106, %96
  %108 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %107
  %109 = or disjoint i32 %96, 4
  %110 = lshr i32 %32, 9
  %111 = and i32 %110, 12
  %112 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %111
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) %112, i32 %109
  %114 = getelementptr inbounds nuw float, ptr addrspace(3) %98, i32 %100
  %115 = or disjoint i32 %96, 12
  %116 = getelementptr inbounds nuw float, ptr addrspace(3) %112, i32 %115
  %117 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31
  %118 = getelementptr inbounds nuw i8, ptr addrspace(3) %117, i32 8208
  %119 = getelementptr inbounds nuw i8, ptr addrspace(3) %117, i32 16416
  %120 = getelementptr inbounds nuw i8, ptr addrspace(3) %117, i32 24624
  %121 = shl nuw nsw i32 %20, 3
  %122 = or disjoint i32 %38, %121
  %123 = lshr exact i32 %20, 4
  %124 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %123
  %125 = getelementptr bfloat, ptr addrspace(3) %124, i32 %122
  %126 = zext nneg i32 %38 to i64, !dbg !38
  %127 = zext nneg i32 %33 to i64, !dbg !38
  %128 = zext nneg i32 %31 to i64, !dbg !38
  %129 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 4
  %130 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 4116
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 8228
  %132 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 12338
  %133 = getelementptr inbounds nuw i8, ptr addrspace(3) %102, i32 12340
  br label %134, !dbg !38

134:                                              ; preds = %16, %._crit_edge
  %135 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %16 ], [ %537, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %538, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %539, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %540, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %541, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %542, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %543, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %544, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %545, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %546, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %547, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %548, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %549, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %16 ], [ %550, %._crit_edge ]
  %150 = phi float [ 0.000000e+00, %16 ], [ %551, %._crit_edge ]
  %151 = phi float [ 0.000000e+00, %16 ], [ %552, %._crit_edge ]
  %152 = phi float [ 0.000000e+00, %16 ], [ %521, %._crit_edge ]
  %153 = phi float [ 0.000000e+00, %16 ], [ %522, %._crit_edge ]
  %154 = phi float [ 0.000000e+00, %16 ], [ %523, %._crit_edge ]
  %155 = phi float [ 0.000000e+00, %16 ], [ %524, %._crit_edge ]
  %156 = phi float [ 0.000000e+00, %16 ], [ %525, %._crit_edge ]
  %157 = phi float [ 0.000000e+00, %16 ], [ %526, %._crit_edge ]
  %158 = phi float [ 0.000000e+00, %16 ], [ %527, %._crit_edge ]
  %159 = phi float [ 0.000000e+00, %16 ], [ %528, %._crit_edge ]
  %160 = phi float [ 0.000000e+00, %16 ], [ %529, %._crit_edge ]
  %161 = phi float [ 0.000000e+00, %16 ], [ %530, %._crit_edge ]
  %162 = phi float [ 0.000000e+00, %16 ], [ %531, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %16 ], [ %532, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %16 ], [ %533, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %16 ], [ %534, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %16 ], [ %535, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %16 ], [ %536, %._crit_edge ]
  %168 = phi <16 x float> [ zeroinitializer, %16 ], [ %520, %._crit_edge ]
  %169 = or disjoint i64 %indvars.iv, %128, !dbg !39
  %170 = or disjoint i64 %indvars.iv, %127, !dbg !39
  %171 = or disjoint i64 %indvars.iv, %126, !dbg !39
  %172 = icmp samesign ult i64 %169, 3072, !dbg !40
  %173 = icmp samesign ult i64 %170, 3072, !dbg !40
  %174 = icmp samesign ult i64 %171, 3072, !dbg !40
  %175 = trunc nuw nsw i64 %170 to i32, !dbg !41
  %176 = add i32 %76, %175, !dbg !41
  %177 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %178 = add i32 %93, %177, !dbg !41
  %179 = add i32 %94, %177, !dbg !41
  %180 = add i32 %95, %177, !dbg !41
  %181 = trunc nuw nsw i64 %171 to i32, !dbg !41
  %182 = add i32 %77, %181, !dbg !41
  %183 = add i32 %78, %181, !dbg !41
  %184 = sext i32 %176 to i64, !dbg !42
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %184, !dbg !42
  %186 = sext i32 %179 to i64, !dbg !42
  %187 = getelementptr bfloat, ptr addrspace(1) %0, i64 %186, !dbg !42
  %188 = and i1 %27, %172, !dbg !43
  %189 = and i1 %26, %173, !dbg !43
  %190 = and i1 %28, %174, !dbg !43
  %191 = and i1 %29, %174, !dbg !43
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 %189) #5, !dbg !44
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !44
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !44
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !44
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !44
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %187, i1 %189) #5, !dbg !44
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !44
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !44
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !44
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %99, i32 %193, i32 %194, i32 %195, i32 %196, i1 true) #5, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %101, i32 %198, i32 %199, i32 %200, i32 %201, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %202 = add nuw nsw i64 %169, 6144, !dbg !46
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !47
  %204 = getelementptr bfloat, ptr addrspace(1) %2, i64 %202, !dbg !48
  %205 = getelementptr i32, ptr addrspace(1) %3, i64 %184, !dbg !49
  %206 = sext i32 %178 to i64, !dbg !49
  %207 = getelementptr i32, ptr addrspace(1) %3, i64 %206, !dbg !49
  %208 = getelementptr i32, ptr addrspace(1) %3, i64 %186, !dbg !49
  %209 = sext i32 %180 to i64, !dbg !49
  %210 = getelementptr i32, ptr addrspace(1) %3, i64 %209, !dbg !49
  %211 = getelementptr bfloat, ptr addrspace(1) %6, i64 %169, !dbg !50
  %212 = getelementptr bfloat, ptr addrspace(1) %7, i64 %169, !dbg !51
  %213 = load <4 x bfloat>, ptr addrspace(3) %102, align 8, !dbg !45
  %214 = load <4 x bfloat>, ptr addrspace(3) %103, align 8, !dbg !45
  %215 = load <4 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !45
  %216 = load <4 x bfloat>, ptr addrspace(3) %105, align 8, !dbg !45
  %217 = shufflevector <4 x bfloat> %213, <4 x bfloat> %214, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %218 = shufflevector <4 x bfloat> %215, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %219 = shufflevector <16 x bfloat> %217, <16 x bfloat> %218, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %220 = shufflevector <4 x bfloat> %216, <4 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %221 = shufflevector <16 x bfloat> %219, <16 x bfloat> %220, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !45
  %222 = fpext <16 x bfloat> %221 to <16 x float>, !dbg !45
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %203, i1 %172) #5, !dbg !52
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !52
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !52
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !52
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !52
  %228 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !52
  %229 = insertelement <4 x i32> %228, i32 %225, i64 1, !dbg !52
  %230 = insertelement <4 x i32> %229, i32 %226, i64 2, !dbg !52
  %231 = insertelement <4 x i32> %230, i32 %227, i64 3, !dbg !52
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !52
  %233 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %204, i1 %172) #5, !dbg !53
  %234 = extractvalue { i32, i32 } %233, 0, !dbg !53
  %235 = bitcast i32 %234 to <2 x bfloat>, !dbg !53
  %236 = extractvalue { i32, i32 } %233, 1, !dbg !53
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !53
  %238 = shufflevector <2 x bfloat> %235, <2 x bfloat> %237, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %239 = fpext <4 x bfloat> %238 to <4 x float>, !dbg !54
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %205, i1 %189) #5, !dbg !55
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !55
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !55
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !55
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !55
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %189) #5, !dbg !55
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !55
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !55
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !55
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !55
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %208, i1 %189) #5, !dbg !55
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !55
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !55
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !55
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !55
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %210, i1 %189) #5, !dbg !55
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !55
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !55
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !55
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !55
  %260 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %211, i1 %172) #5, !dbg !56
  %261 = extractvalue { i32, i32 } %260, 0, !dbg !56
  %262 = bitcast i32 %261 to <2 x bfloat>, !dbg !56
  %263 = extractvalue { i32, i32 } %260, 1, !dbg !56
  %264 = bitcast i32 %263 to <2 x bfloat>, !dbg !56
  %265 = shufflevector <2 x bfloat> %262, <2 x bfloat> %264, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %266 = fpext <4 x bfloat> %265 to <4 x float>, !dbg !57
  %267 = shufflevector <4 x float> %266, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %268 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %212, i1 %172) #5, !dbg !58
  %269 = extractvalue { i32, i32 } %268, 0, !dbg !58
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !58
  %271 = extractvalue { i32, i32 } %268, 1, !dbg !58
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !58
  %273 = shufflevector <2 x bfloat> %270, <2 x bfloat> %272, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %274 = fpext <4 x bfloat> %273 to <4 x float>, !dbg !59
  %275 = shufflevector <4 x float> %274, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !59
  %276 = fadd <4 x float> %232, %239, !dbg !60
  %277 = shufflevector <4 x float> %276, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !60
  %278 = sitofp i32 %241 to float, !dbg !61
  %279 = sitofp i32 %242 to float, !dbg !61
  %280 = sitofp i32 %243 to float, !dbg !61
  %281 = sitofp i32 %244 to float, !dbg !61
  %282 = sitofp i32 %246 to float, !dbg !61
  %283 = sitofp i32 %247 to float, !dbg !61
  %284 = sitofp i32 %248 to float, !dbg !61
  %285 = sitofp i32 %249 to float, !dbg !61
  %286 = sitofp i32 %251 to float, !dbg !61
  %287 = sitofp i32 %252 to float, !dbg !61
  %288 = sitofp i32 %253 to float, !dbg !61
  %289 = sitofp i32 %254 to float, !dbg !61
  %290 = sitofp i32 %256 to float, !dbg !61
  %291 = sitofp i32 %257 to float, !dbg !61
  %292 = sitofp i32 %258 to float, !dbg !61
  %293 = sitofp i32 %259 to float, !dbg !61
  %294 = fmul float %92, %278, !dbg !62
  %295 = fmul float %92, %279, !dbg !62
  %296 = fmul float %92, %280, !dbg !62
  %297 = fmul float %92, %281, !dbg !62
  %298 = fmul float %92, %282, !dbg !62
  %299 = fmul float %92, %283, !dbg !62
  %300 = fmul float %92, %284, !dbg !62
  %301 = fmul float %92, %285, !dbg !62
  %302 = fmul float %92, %286, !dbg !62
  %303 = fmul float %92, %287, !dbg !62
  %304 = fmul float %92, %288, !dbg !62
  %305 = fmul float %92, %289, !dbg !62
  %306 = fmul float %92, %290, !dbg !62
  %307 = fmul float %92, %291, !dbg !62
  %308 = fmul float %92, %292, !dbg !62
  %309 = fmul float %92, %293, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %310 = bitcast float %294 to i32, !dbg !62
  %311 = bitcast float %295 to i32, !dbg !62
  %312 = bitcast float %296 to i32, !dbg !62
  %313 = bitcast float %297 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %108, i32 %310, i32 %311, i32 %312, i32 %313, i1 true) #5, !dbg !62
  %314 = bitcast float %298 to i32, !dbg !62
  %315 = bitcast float %299 to i32, !dbg !62
  %316 = bitcast float %300 to i32, !dbg !62
  %317 = bitcast float %301 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %113, i32 %314, i32 %315, i32 %316, i32 %317, i1 true) #5, !dbg !62
  %318 = bitcast float %302 to i32, !dbg !62
  %319 = bitcast float %303 to i32, !dbg !62
  %320 = bitcast float %304 to i32, !dbg !62
  %321 = bitcast float %305 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %114, i32 %318, i32 %319, i32 %320, i32 %321, i1 true) #5, !dbg !62
  %322 = bitcast float %306 to i32, !dbg !62
  %323 = bitcast float %307 to i32, !dbg !62
  %324 = bitcast float %308 to i32, !dbg !62
  %325 = bitcast float %309 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %116, i32 %322, i32 %323, i32 %324, i32 %325, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %326 = load <4 x float>, ptr addrspace(3) %117, align 16, !dbg !62
  %327 = load <4 x float>, ptr addrspace(3) %118, align 16, !dbg !62
  %328 = load <4 x float>, ptr addrspace(3) %119, align 16, !dbg !62
  %329 = load <4 x float>, ptr addrspace(3) %120, align 16, !dbg !62
  %330 = shufflevector <4 x float> %326, <4 x float> %327, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %331 = shufflevector <4 x float> %328, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %332 = shufflevector <16 x float> %330, <16 x float> %331, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %333 = shufflevector <4 x float> %329, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !63
  %334 = shufflevector <16 x float> %332, <16 x float> %333, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !63
  %335 = fmul <16 x float> %334, %267, !dbg !63
  %336 = fadd <16 x float> %335, %275, !dbg !64
  %337 = fmul <16 x float> %277, %336, !dbg !65
  %338 = fadd <16 x float> %337, %222, !dbg !66
  br i1 %135, label %._crit_edge, label %339, !dbg !67

339:                                              ; preds = %134
  %340 = fsub <16 x float> %338, %168, !dbg !69
  %341 = extractelement <16 x float> %340, i64 0, !dbg !69
  %342 = fsub <16 x float> %338, %168, !dbg !69
  %343 = extractelement <16 x float> %342, i64 1, !dbg !69
  %344 = fsub <16 x float> %338, %168, !dbg !69
  %345 = extractelement <16 x float> %344, i64 2, !dbg !69
  %346 = fsub <16 x float> %338, %168, !dbg !69
  %347 = extractelement <16 x float> %346, i64 3, !dbg !69
  %348 = fsub <16 x float> %338, %168, !dbg !69
  %349 = extractelement <16 x float> %348, i64 4, !dbg !69
  %350 = fsub <16 x float> %338, %168, !dbg !69
  %351 = extractelement <16 x float> %350, i64 5, !dbg !69
  %352 = fsub <16 x float> %338, %168, !dbg !69
  %353 = extractelement <16 x float> %352, i64 6, !dbg !69
  %354 = fsub <16 x float> %338, %168, !dbg !69
  %355 = extractelement <16 x float> %354, i64 7, !dbg !69
  %356 = fsub <16 x float> %338, %168, !dbg !69
  %357 = extractelement <16 x float> %356, i64 8, !dbg !69
  %358 = fsub <16 x float> %338, %168, !dbg !69
  %359 = extractelement <16 x float> %358, i64 9, !dbg !69
  %360 = fsub <16 x float> %338, %168, !dbg !69
  %361 = extractelement <16 x float> %360, i64 10, !dbg !69
  %362 = fsub <16 x float> %338, %168, !dbg !69
  %363 = extractelement <16 x float> %362, i64 11, !dbg !69
  %364 = fsub <16 x float> %338, %168, !dbg !69
  %365 = extractelement <16 x float> %364, i64 12, !dbg !69
  %366 = fsub <16 x float> %338, %168, !dbg !69
  %367 = extractelement <16 x float> %366, i64 13, !dbg !69
  %368 = fsub <16 x float> %338, %168, !dbg !69
  %369 = extractelement <16 x float> %368, i64 14, !dbg !69
  %370 = fsub <16 x float> %338, %168, !dbg !69
  %371 = extractelement <16 x float> %370, i64 15, !dbg !69
  %372 = fadd float %136, 1.000000e+00, !dbg !70
  %373 = fadd float %137, 1.000000e+00, !dbg !70
  %374 = fadd float %138, 1.000000e+00, !dbg !70
  %375 = fadd float %139, 1.000000e+00, !dbg !70
  %376 = fadd float %140, 1.000000e+00, !dbg !70
  %377 = fadd float %141, 1.000000e+00, !dbg !70
  %378 = fadd float %142, 1.000000e+00, !dbg !70
  %379 = fadd float %143, 1.000000e+00, !dbg !70
  %380 = fadd float %144, 1.000000e+00, !dbg !70
  %381 = fadd float %145, 1.000000e+00, !dbg !70
  %382 = fadd float %146, 1.000000e+00, !dbg !70
  %383 = fadd float %147, 1.000000e+00, !dbg !70
  %384 = fadd float %148, 1.000000e+00, !dbg !70
  %385 = fadd float %149, 1.000000e+00, !dbg !70
  %386 = fadd float %150, 1.000000e+00, !dbg !70
  %387 = fadd float %151, 1.000000e+00, !dbg !70
  %388 = tail call float @llvm.nvvm.div.full(float %341, float %372), !dbg !71
  %389 = tail call float @llvm.nvvm.div.full(float %343, float %373), !dbg !71
  %390 = tail call float @llvm.nvvm.div.full(float %345, float %374), !dbg !71
  %391 = tail call float @llvm.nvvm.div.full(float %347, float %375), !dbg !71
  %392 = tail call float @llvm.nvvm.div.full(float %349, float %376), !dbg !71
  %393 = tail call float @llvm.nvvm.div.full(float %351, float %377), !dbg !71
  %394 = tail call float @llvm.nvvm.div.full(float %353, float %378), !dbg !71
  %395 = tail call float @llvm.nvvm.div.full(float %355, float %379), !dbg !71
  %396 = tail call float @llvm.nvvm.div.full(float %357, float %380), !dbg !71
  %397 = tail call float @llvm.nvvm.div.full(float %359, float %381), !dbg !71
  %398 = tail call float @llvm.nvvm.div.full(float %361, float %382), !dbg !71
  %399 = tail call float @llvm.nvvm.div.full(float %363, float %383), !dbg !71
  %400 = tail call float @llvm.nvvm.div.full(float %365, float %384), !dbg !71
  %401 = tail call float @llvm.nvvm.div.full(float %367, float %385), !dbg !71
  %402 = tail call float @llvm.nvvm.div.full(float %369, float %386), !dbg !71
  %403 = tail call float @llvm.nvvm.div.full(float %371, float %387), !dbg !71
  %404 = insertelement <16 x float> poison, float %388, i64 0, !dbg !72
  %405 = insertelement <16 x float> %404, float %389, i64 1, !dbg !72
  %406 = insertelement <16 x float> %405, float %390, i64 2, !dbg !72
  %407 = insertelement <16 x float> %406, float %391, i64 3, !dbg !72
  %408 = insertelement <16 x float> %407, float %392, i64 4, !dbg !72
  %409 = insertelement <16 x float> %408, float %393, i64 5, !dbg !72
  %410 = insertelement <16 x float> %409, float %394, i64 6, !dbg !72
  %411 = insertelement <16 x float> %410, float %395, i64 7, !dbg !72
  %412 = insertelement <16 x float> %411, float %396, i64 8, !dbg !72
  %413 = insertelement <16 x float> %412, float %397, i64 9, !dbg !72
  %414 = insertelement <16 x float> %413, float %398, i64 10, !dbg !72
  %415 = insertelement <16 x float> %414, float %399, i64 11, !dbg !72
  %416 = insertelement <16 x float> %415, float %400, i64 12, !dbg !72
  %417 = insertelement <16 x float> %416, float %401, i64 13, !dbg !72
  %418 = insertelement <16 x float> %417, float %402, i64 14, !dbg !72
  %419 = insertelement <16 x float> %418, float %403, i64 15, !dbg !72
  %420 = fadd <16 x float> %168, %419, !dbg !72
  %421 = fsub <16 x float> %338, %420, !dbg !73
  %422 = fsub <16 x float> %338, %420, !dbg !73
  %423 = fsub <16 x float> %338, %420, !dbg !73
  %424 = fsub <16 x float> %338, %420, !dbg !73
  %425 = fsub <16 x float> %338, %420, !dbg !73
  %426 = fsub <16 x float> %338, %420, !dbg !73
  %427 = fsub <16 x float> %338, %420, !dbg !73
  %428 = fsub <16 x float> %338, %420, !dbg !73
  %429 = fsub <16 x float> %338, %420, !dbg !73
  %430 = fsub <16 x float> %338, %420, !dbg !73
  %431 = fsub <16 x float> %338, %420, !dbg !73
  %432 = fsub <16 x float> %338, %420, !dbg !73
  %433 = fsub <16 x float> %338, %420, !dbg !73
  %434 = fsub <16 x float> %338, %420, !dbg !73
  %435 = fsub <16 x float> %338, %420, !dbg !73
  %436 = fsub <16 x float> %338, %420, !dbg !73
  %437 = fmul <16 x float> %340, %421, !dbg !74
  %438 = extractelement <16 x float> %437, i64 0, !dbg !74
  %439 = fmul <16 x float> %342, %422, !dbg !74
  %440 = extractelement <16 x float> %439, i64 1, !dbg !74
  %441 = fmul <16 x float> %344, %423, !dbg !74
  %442 = extractelement <16 x float> %441, i64 2, !dbg !74
  %443 = fmul <16 x float> %346, %424, !dbg !74
  %444 = extractelement <16 x float> %443, i64 3, !dbg !74
  %445 = fmul <16 x float> %348, %425, !dbg !74
  %446 = extractelement <16 x float> %445, i64 4, !dbg !74
  %447 = fmul <16 x float> %350, %426, !dbg !74
  %448 = extractelement <16 x float> %447, i64 5, !dbg !74
  %449 = fmul <16 x float> %352, %427, !dbg !74
  %450 = extractelement <16 x float> %449, i64 6, !dbg !74
  %451 = fmul <16 x float> %354, %428, !dbg !74
  %452 = extractelement <16 x float> %451, i64 7, !dbg !74
  %453 = fmul <16 x float> %356, %429, !dbg !74
  %454 = extractelement <16 x float> %453, i64 8, !dbg !74
  %455 = fmul <16 x float> %358, %430, !dbg !74
  %456 = extractelement <16 x float> %455, i64 9, !dbg !74
  %457 = fmul <16 x float> %360, %431, !dbg !74
  %458 = extractelement <16 x float> %457, i64 10, !dbg !74
  %459 = fmul <16 x float> %362, %432, !dbg !74
  %460 = extractelement <16 x float> %459, i64 11, !dbg !74
  %461 = fmul <16 x float> %364, %433, !dbg !74
  %462 = extractelement <16 x float> %461, i64 12, !dbg !74
  %463 = fmul <16 x float> %366, %434, !dbg !74
  %464 = extractelement <16 x float> %463, i64 13, !dbg !74
  %465 = fmul <16 x float> %368, %435, !dbg !74
  %466 = extractelement <16 x float> %465, i64 14, !dbg !74
  %467 = fmul <16 x float> %370, %436, !dbg !74
  %468 = extractelement <16 x float> %467, i64 15, !dbg !74
  %469 = fadd float %152, %438, !dbg !75
  %470 = fadd float %153, %440, !dbg !75
  %471 = fadd float %154, %442, !dbg !75
  %472 = fadd float %155, %444, !dbg !75
  %473 = fadd float %156, %446, !dbg !75
  %474 = fadd float %157, %448, !dbg !75
  %475 = fadd float %158, %450, !dbg !75
  %476 = fadd float %159, %452, !dbg !75
  %477 = fadd float %160, %454, !dbg !75
  %478 = fadd float %161, %456, !dbg !75
  %479 = fadd float %162, %458, !dbg !75
  %480 = fadd float %163, %460, !dbg !75
  %481 = fadd float %164, %462, !dbg !75
  %482 = fadd float %165, %464, !dbg !75
  %483 = fadd float %166, %466, !dbg !75
  %484 = fadd float %167, %468, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %134, %339
  %485 = phi float [ %469, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %486 = phi float [ %470, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %487 = phi float [ %471, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %488 = phi float [ %472, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %489 = phi float [ %473, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %490 = phi float [ %474, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %491 = phi float [ %475, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %492 = phi float [ %476, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %493 = phi float [ %477, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %494 = phi float [ %478, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %495 = phi float [ %479, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %496 = phi float [ %480, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %497 = phi float [ %481, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %498 = phi float [ %482, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %499 = phi float [ %483, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %500 = phi float [ %484, %339 ], [ 0.000000e+00, %134 ], !dbg !68
  %501 = phi float [ %372, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %502 = phi float [ %373, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %503 = phi float [ %374, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %504 = phi float [ %375, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %505 = phi float [ %376, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %506 = phi float [ %377, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %507 = phi float [ %378, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %508 = phi float [ %379, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %509 = phi float [ %380, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %510 = phi float [ %381, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %511 = phi float [ %382, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %512 = phi float [ %383, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %513 = phi float [ %384, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %514 = phi float [ %385, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %515 = phi float [ %386, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %516 = phi float [ %387, %339 ], [ 1.000000e+00, %134 ], !dbg !68
  %517 = phi <16 x float> [ %420, %339 ], [ %338, %134 ]
  %518 = insertelement <16 x i1> poison, i1 %188, i64 0, !dbg !76
  %519 = shufflevector <16 x i1> %518, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !76
  %520 = select <16 x i1> %519, <16 x float> %517, <16 x float> %168, !dbg !76
  %521 = select i1 %188, float %485, float %152, !dbg !77
  %522 = select i1 %188, float %486, float %153, !dbg !77
  %523 = select i1 %188, float %487, float %154, !dbg !77
  %524 = select i1 %188, float %488, float %155, !dbg !77
  %525 = select i1 %188, float %489, float %156, !dbg !77
  %526 = select i1 %188, float %490, float %157, !dbg !77
  %527 = select i1 %188, float %491, float %158, !dbg !77
  %528 = select i1 %188, float %492, float %159, !dbg !77
  %529 = select i1 %188, float %493, float %160, !dbg !77
  %530 = select i1 %188, float %494, float %161, !dbg !77
  %531 = select i1 %188, float %495, float %162, !dbg !77
  %532 = select i1 %188, float %496, float %163, !dbg !77
  %533 = select i1 %188, float %497, float %164, !dbg !77
  %534 = select i1 %188, float %498, float %165, !dbg !77
  %535 = select i1 %188, float %499, float %166, !dbg !77
  %536 = select i1 %188, float %500, float %167, !dbg !77
  %537 = select i1 %188, float %501, float %136, !dbg !78
  %538 = select i1 %188, float %502, float %137, !dbg !78
  %539 = select i1 %188, float %503, float %138, !dbg !78
  %540 = select i1 %188, float %504, float %139, !dbg !78
  %541 = select i1 %188, float %505, float %140, !dbg !78
  %542 = select i1 %188, float %506, float %141, !dbg !78
  %543 = select i1 %188, float %507, float %142, !dbg !78
  %544 = select i1 %188, float %508, float %143, !dbg !78
  %545 = select i1 %188, float %509, float %144, !dbg !78
  %546 = select i1 %188, float %510, float %145, !dbg !78
  %547 = select i1 %188, float %511, float %146, !dbg !78
  %548 = select i1 %188, float %512, float %147, !dbg !78
  %549 = select i1 %188, float %513, float %148, !dbg !78
  %550 = select i1 %188, float %514, float %149, !dbg !78
  %551 = select i1 %188, float %515, float %150, !dbg !78
  %552 = select i1 %188, float %516, float %151, !dbg !78
  %553 = sext i32 %182 to i64, !dbg !79
  %554 = getelementptr bfloat, ptr addrspace(1) %8, i64 %553, !dbg !79
  %555 = sext i32 %183 to i64, !dbg !79
  %556 = getelementptr bfloat, ptr addrspace(1) %8, i64 %555, !dbg !79
  %557 = extractelement <16 x float> %338, i64 0, !dbg !80
  %558 = fptrunc float %557 to bfloat, !dbg !80
  %559 = extractelement <16 x float> %338, i64 1, !dbg !80
  %560 = fptrunc float %559 to bfloat, !dbg !80
  %561 = extractelement <16 x float> %338, i64 2, !dbg !80
  %562 = fptrunc float %561 to bfloat, !dbg !80
  %563 = extractelement <16 x float> %338, i64 3, !dbg !80
  %564 = fptrunc float %563 to bfloat, !dbg !80
  %565 = extractelement <16 x float> %338, i64 4, !dbg !80
  %566 = fptrunc float %565 to bfloat, !dbg !80
  %567 = extractelement <16 x float> %338, i64 5, !dbg !80
  %568 = fptrunc float %567 to bfloat, !dbg !80
  %569 = extractelement <16 x float> %338, i64 6, !dbg !80
  %570 = fptrunc float %569 to bfloat, !dbg !80
  %571 = extractelement <16 x float> %338, i64 7, !dbg !80
  %572 = fptrunc float %571 to bfloat, !dbg !80
  %573 = extractelement <16 x float> %338, i64 8, !dbg !80
  %574 = fptrunc float %573 to bfloat, !dbg !80
  %575 = extractelement <16 x float> %338, i64 9, !dbg !80
  %576 = fptrunc float %575 to bfloat, !dbg !80
  %577 = extractelement <16 x float> %338, i64 10, !dbg !80
  %578 = fptrunc float %577 to bfloat, !dbg !80
  %579 = extractelement <16 x float> %338, i64 11, !dbg !80
  %580 = fptrunc float %579 to bfloat, !dbg !80
  %581 = extractelement <16 x float> %338, i64 12, !dbg !80
  %582 = fptrunc float %581 to bfloat, !dbg !80
  %583 = extractelement <16 x float> %338, i64 13, !dbg !80
  %584 = fptrunc float %583 to bfloat, !dbg !80
  %585 = extractelement <16 x float> %338, i64 14, !dbg !80
  %586 = fptrunc float %585 to bfloat, !dbg !80
  %587 = extractelement <16 x float> %338, i64 15, !dbg !80
  %588 = fptrunc float %587 to bfloat, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %589 = bitcast bfloat %558 to i16, !dbg !80
  %590 = bitcast bfloat %560 to i16, !dbg !80
  %591 = bitcast bfloat %562 to i16, !dbg !80
  %592 = bitcast bfloat %564 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %102, i16 %589, i16 %590, i16 %591, i16 %592, i1 true) #5, !dbg !80
  %593 = bitcast bfloat %566 to i16, !dbg !80
  %594 = bitcast bfloat %568 to i16, !dbg !80
  %595 = bitcast bfloat %570 to i16, !dbg !80
  %596 = bitcast bfloat %572 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %103, i16 %593, i16 %594, i16 %595, i16 %596, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %597 = load <4 x i32>, ptr addrspace(3) %125, align 16, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %598 = bitcast bfloat %574 to i16, !dbg !80
  %599 = bitcast bfloat %576 to i16, !dbg !80
  %600 = bitcast bfloat %578 to i16, !dbg !80
  %601 = bitcast bfloat %580 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %102, i16 %598, i16 %599, i16 %600, i16 %601, i1 true) #5, !dbg !80
  %602 = bitcast bfloat %582 to i16, !dbg !80
  %603 = bitcast bfloat %584 to i16, !dbg !80
  %604 = bitcast bfloat %586 to i16, !dbg !80
  %605 = bitcast bfloat %588 to i16, !dbg !80
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %103, i16 %602, i16 %603, i16 %604, i16 %605, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %606 = load <4 x i32>, ptr addrspace(3) %125, align 16, !dbg !80
  %.extract224 = extractelement <4 x i32> %597, i64 0, !dbg !80
  %.extract226 = extractelement <4 x i32> %597, i64 1, !dbg !80
  %.extract228 = extractelement <4 x i32> %597, i64 2, !dbg !80
  %.extract230 = extractelement <4 x i32> %597, i64 3, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract224, i32 %.extract226, i32 %.extract228, i32 %.extract230, ptr addrspace(1) %554, i1 %190) #5, !dbg !80
  %.extract232 = extractelement <4 x i32> %606, i64 0, !dbg !80
  %.extract234 = extractelement <4 x i32> %606, i64 1, !dbg !80
  %.extract236 = extractelement <4 x i32> %606, i64 2, !dbg !80
  %.extract238 = extractelement <4 x i32> %606, i64 3, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract232, i32 %.extract234, i32 %.extract236, i32 %.extract238, ptr addrspace(1) %556, i1 %191) #5, !dbg !80
  br i1 %135, label %134, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %607 = lshr i32 %19, 5, !dbg !11
  %608 = and i32 %19, 3, !dbg !11
  %609 = or disjoint i32 %18, %608, !dbg !12
  %610 = icmp slt i32 %609, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %611 = extractelement <16 x float> %520, i64 0, !dbg !83
  %612 = extractelement <16 x float> %520, i64 1, !dbg !83
  %613 = fsub float %612, %611, !dbg !83
  %614 = fadd float %537, %538, !dbg !85
  %615 = fcmp oeq float %614, 0.000000e+00, !dbg !86
  %616 = tail call float @llvm.nvvm.div.full(float %538, float %614), !dbg !87
  %617 = select i1 %615, float 0.000000e+00, float %616, !dbg !88
  %618 = fmul float %613, %617, !dbg !89
  %619 = fadd float %611, %618, !dbg !90
  %620 = fadd float %521, %522, !dbg !91
  %621 = fmul float %613, %613, !dbg !92
  %622 = fmul float %621, %537, !dbg !93
  %623 = fmul float %622, %617, !dbg !94
  %624 = fadd float %620, %623, !dbg !95
  %625 = extractelement <16 x float> %520, i64 2, !dbg !83
  %626 = fsub float %625, %619, !dbg !83
  %627 = fadd float %539, %614, !dbg !85
  %628 = fcmp oeq float %627, 0.000000e+00, !dbg !86
  %629 = tail call float @llvm.nvvm.div.full(float %539, float %627), !dbg !87
  %630 = select i1 %628, float 0.000000e+00, float %629, !dbg !88
  %631 = fmul float %630, %626, !dbg !89
  %632 = fadd float %619, %631, !dbg !90
  %633 = fadd float %523, %624, !dbg !91
  %634 = fmul float %626, %626, !dbg !92
  %635 = fmul float %614, %634, !dbg !93
  %636 = fmul float %630, %635, !dbg !94
  %637 = fadd float %633, %636, !dbg !95
  %638 = extractelement <16 x float> %520, i64 3, !dbg !83
  %639 = fsub float %638, %632, !dbg !83
  %640 = fadd float %540, %627, !dbg !85
  %641 = fcmp oeq float %640, 0.000000e+00, !dbg !86
  %642 = tail call float @llvm.nvvm.div.full(float %540, float %640), !dbg !87
  %643 = select i1 %641, float 0.000000e+00, float %642, !dbg !88
  %644 = fmul float %643, %639, !dbg !89
  %645 = fadd float %632, %644, !dbg !90
  %646 = fadd float %524, %637, !dbg !91
  %647 = fmul float %639, %639, !dbg !92
  %648 = fmul float %627, %647, !dbg !93
  %649 = fmul float %643, %648, !dbg !94
  %650 = fadd float %646, %649, !dbg !95
  %651 = extractelement <16 x float> %520, i64 4, !dbg !83
  %652 = extractelement <16 x float> %520, i64 5, !dbg !83
  %653 = fsub float %652, %651, !dbg !83
  %654 = fadd float %541, %542, !dbg !85
  %655 = fcmp oeq float %654, 0.000000e+00, !dbg !86
  %656 = tail call float @llvm.nvvm.div.full(float %542, float %654), !dbg !87
  %657 = select i1 %655, float 0.000000e+00, float %656, !dbg !88
  %658 = fmul float %653, %657, !dbg !89
  %659 = fadd float %651, %658, !dbg !90
  %660 = fadd float %525, %526, !dbg !91
  %661 = fmul float %653, %653, !dbg !92
  %662 = fmul float %661, %541, !dbg !93
  %663 = fmul float %662, %657, !dbg !94
  %664 = fadd float %660, %663, !dbg !95
  %665 = extractelement <16 x float> %520, i64 6, !dbg !83
  %666 = fsub float %665, %659, !dbg !83
  %667 = fadd float %543, %654, !dbg !85
  %668 = fcmp oeq float %667, 0.000000e+00, !dbg !86
  %669 = tail call float @llvm.nvvm.div.full(float %543, float %667), !dbg !87
  %670 = select i1 %668, float 0.000000e+00, float %669, !dbg !88
  %671 = fmul float %670, %666, !dbg !89
  %672 = fadd float %659, %671, !dbg !90
  %673 = fadd float %527, %664, !dbg !91
  %674 = fmul float %666, %666, !dbg !92
  %675 = fmul float %654, %674, !dbg !93
  %676 = fmul float %670, %675, !dbg !94
  %677 = fadd float %673, %676, !dbg !95
  %678 = extractelement <16 x float> %520, i64 7, !dbg !83
  %679 = fsub float %678, %672, !dbg !83
  %680 = fadd float %544, %667, !dbg !85
  %681 = fcmp oeq float %680, 0.000000e+00, !dbg !86
  %682 = tail call float @llvm.nvvm.div.full(float %544, float %680), !dbg !87
  %683 = select i1 %681, float 0.000000e+00, float %682, !dbg !88
  %684 = fmul float %683, %679, !dbg !89
  %685 = fadd float %672, %684, !dbg !90
  %686 = fadd float %528, %677, !dbg !91
  %687 = fmul float %679, %679, !dbg !92
  %688 = fmul float %667, %687, !dbg !93
  %689 = fmul float %683, %688, !dbg !94
  %690 = fadd float %686, %689, !dbg !95
  %691 = extractelement <16 x float> %520, i64 8, !dbg !83
  %692 = extractelement <16 x float> %520, i64 9, !dbg !83
  %693 = fsub float %692, %691, !dbg !83
  %694 = fadd float %545, %546, !dbg !85
  %695 = fcmp oeq float %694, 0.000000e+00, !dbg !86
  %696 = tail call float @llvm.nvvm.div.full(float %546, float %694), !dbg !87
  %697 = select i1 %695, float 0.000000e+00, float %696, !dbg !88
  %698 = fmul float %693, %697, !dbg !89
  %699 = fadd float %691, %698, !dbg !90
  %700 = fadd float %529, %530, !dbg !91
  %701 = fmul float %693, %693, !dbg !92
  %702 = fmul float %701, %545, !dbg !93
  %703 = fmul float %702, %697, !dbg !94
  %704 = fadd float %700, %703, !dbg !95
  %705 = extractelement <16 x float> %520, i64 10, !dbg !83
  %706 = fsub float %705, %699, !dbg !83
  %707 = fadd float %547, %694, !dbg !85
  %708 = fcmp oeq float %707, 0.000000e+00, !dbg !86
  %709 = tail call float @llvm.nvvm.div.full(float %547, float %707), !dbg !87
  %710 = select i1 %708, float 0.000000e+00, float %709, !dbg !88
  %711 = fmul float %710, %706, !dbg !89
  %712 = fadd float %699, %711, !dbg !90
  %713 = fadd float %531, %704, !dbg !91
  %714 = fmul float %706, %706, !dbg !92
  %715 = fmul float %694, %714, !dbg !93
  %716 = fmul float %710, %715, !dbg !94
  %717 = fadd float %713, %716, !dbg !95
  %718 = extractelement <16 x float> %520, i64 11, !dbg !83
  %719 = fsub float %718, %712, !dbg !83
  %720 = fadd float %548, %707, !dbg !85
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !86
  %722 = tail call float @llvm.nvvm.div.full(float %548, float %720), !dbg !87
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !88
  %724 = fmul float %723, %719, !dbg !89
  %725 = fadd float %712, %724, !dbg !90
  %726 = fadd float %532, %717, !dbg !91
  %727 = fmul float %719, %719, !dbg !92
  %728 = fmul float %707, %727, !dbg !93
  %729 = fmul float %723, %728, !dbg !94
  %730 = fadd float %726, %729, !dbg !95
  %731 = extractelement <16 x float> %520, i64 12, !dbg !83
  %732 = extractelement <16 x float> %520, i64 13, !dbg !83
  %733 = fsub float %732, %731, !dbg !83
  %734 = fadd float %549, %550, !dbg !85
  %735 = fcmp oeq float %734, 0.000000e+00, !dbg !86
  %736 = tail call float @llvm.nvvm.div.full(float %550, float %734), !dbg !87
  %737 = select i1 %735, float 0.000000e+00, float %736, !dbg !88
  %738 = fmul float %733, %737, !dbg !89
  %739 = fadd float %731, %738, !dbg !90
  %740 = fadd float %533, %534, !dbg !91
  %741 = fmul float %733, %733, !dbg !92
  %742 = fmul float %741, %549, !dbg !93
  %743 = fmul float %742, %737, !dbg !94
  %744 = fadd float %740, %743, !dbg !95
  %745 = extractelement <16 x float> %520, i64 14, !dbg !83
  %746 = fsub float %745, %739, !dbg !83
  %747 = fadd float %551, %734, !dbg !85
  %748 = fcmp oeq float %747, 0.000000e+00, !dbg !86
  %749 = tail call float @llvm.nvvm.div.full(float %551, float %747), !dbg !87
  %750 = select i1 %748, float 0.000000e+00, float %749, !dbg !88
  %751 = fmul float %750, %746, !dbg !89
  %752 = fadd float %739, %751, !dbg !90
  %753 = fadd float %535, %744, !dbg !91
  %754 = fmul float %746, %746, !dbg !92
  %755 = fmul float %734, %754, !dbg !93
  %756 = fmul float %750, %755, !dbg !94
  %757 = fadd float %753, %756, !dbg !95
  %758 = extractelement <16 x float> %520, i64 15, !dbg !83
  %759 = fsub float %758, %752, !dbg !83
  %760 = fadd float %552, %747, !dbg !85
  %761 = fcmp oeq float %760, 0.000000e+00, !dbg !86
  %762 = tail call float @llvm.nvvm.div.full(float %552, float %760), !dbg !87
  %763 = select i1 %761, float 0.000000e+00, float %762, !dbg !88
  %764 = fmul float %763, %759, !dbg !89
  %765 = fadd float %752, %764, !dbg !90
  %766 = fadd float %536, %757, !dbg !91
  %767 = fmul float %759, %759, !dbg !92
  %768 = fmul float %747, %767, !dbg !93
  %769 = fmul float %763, %768, !dbg !94
  %770 = fadd float %766, %769, !dbg !95
  %771 = bitcast float %645 to i32, !dbg !81
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 16, i32 31), !dbg !81
  %773 = bitcast i32 %772 to float, !dbg !81
  %774 = bitcast float %650 to i32, !dbg !81
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 16, i32 31), !dbg !81
  %776 = bitcast i32 %775 to float, !dbg !81
  %777 = bitcast float %640 to i32, !dbg !81
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 16, i32 31), !dbg !81
  %779 = bitcast i32 %778 to float, !dbg !81
  %780 = fsub float %773, %645, !dbg !83
  %781 = fadd float %640, %779, !dbg !85
  %782 = fcmp oeq float %781, 0.000000e+00, !dbg !86
  %783 = tail call float @llvm.nvvm.div.full(float %779, float %781), !dbg !87
  %784 = select i1 %782, float 0.000000e+00, float %783, !dbg !88
  %785 = fmul float %780, %784, !dbg !89
  %786 = fadd float %645, %785, !dbg !90
  %787 = fadd float %650, %776, !dbg !91
  %788 = fmul float %780, %780, !dbg !92
  %789 = fmul float %640, %788, !dbg !93
  %790 = fmul float %789, %784, !dbg !94
  %791 = fadd float %787, %790, !dbg !95
  %792 = bitcast float %786 to i32, !dbg !81
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %792, i32 8, i32 31), !dbg !81
  %794 = bitcast i32 %793 to float, !dbg !81
  %795 = bitcast float %791 to i32, !dbg !81
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 8, i32 31), !dbg !81
  %797 = bitcast i32 %796 to float, !dbg !81
  %798 = bitcast float %781 to i32, !dbg !81
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 8, i32 31), !dbg !81
  %800 = bitcast i32 %799 to float, !dbg !81
  %801 = fsub float %794, %786, !dbg !83
  %802 = fadd float %781, %800, !dbg !85
  %803 = fcmp oeq float %802, 0.000000e+00, !dbg !86
  %804 = tail call float @llvm.nvvm.div.full(float %800, float %802), !dbg !87
  %805 = select i1 %803, float 0.000000e+00, float %804, !dbg !88
  %806 = fmul float %801, %805, !dbg !89
  %807 = fadd float %786, %806, !dbg !90
  %808 = fadd float %791, %797, !dbg !91
  %809 = fmul float %801, %801, !dbg !92
  %810 = fmul float %781, %809, !dbg !93
  %811 = fmul float %805, %810, !dbg !94
  %812 = fadd float %808, %811, !dbg !95
  %813 = bitcast float %807 to i32, !dbg !81
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 4, i32 31), !dbg !81
  %815 = bitcast i32 %814 to float, !dbg !81
  %816 = bitcast float %812 to i32, !dbg !81
  %817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %816, i32 4, i32 31), !dbg !81
  %818 = bitcast i32 %817 to float, !dbg !81
  %819 = bitcast float %802 to i32, !dbg !81
  %820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %819, i32 4, i32 31), !dbg !81
  %821 = bitcast i32 %820 to float, !dbg !81
  %822 = fsub float %815, %807, !dbg !83
  %823 = fadd float %802, %821, !dbg !85
  %824 = fcmp oeq float %823, 0.000000e+00, !dbg !86
  %825 = tail call float @llvm.nvvm.div.full(float %821, float %823), !dbg !87
  %826 = select i1 %824, float 0.000000e+00, float %825, !dbg !88
  %827 = fmul float %822, %826, !dbg !89
  %828 = fadd float %807, %827, !dbg !90
  %829 = fadd float %812, %818, !dbg !91
  %830 = fmul float %822, %822, !dbg !92
  %831 = fmul float %802, %830, !dbg !93
  %832 = fmul float %826, %831, !dbg !94
  %833 = fadd float %829, %832, !dbg !95
  %834 = bitcast float %828 to i32, !dbg !81
  %835 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %834, i32 2, i32 31), !dbg !81
  %836 = bitcast i32 %835 to float, !dbg !81
  %837 = bitcast float %833 to i32, !dbg !81
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 2, i32 31), !dbg !81
  %839 = bitcast i32 %838 to float, !dbg !81
  %840 = bitcast float %823 to i32, !dbg !81
  %841 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %840, i32 2, i32 31), !dbg !81
  %842 = bitcast i32 %841 to float, !dbg !81
  %843 = fsub float %836, %828, !dbg !83
  %844 = fadd float %823, %842, !dbg !85
  %845 = fcmp oeq float %844, 0.000000e+00, !dbg !86
  %846 = tail call float @llvm.nvvm.div.full(float %842, float %844), !dbg !87
  %847 = select i1 %845, float 0.000000e+00, float %846, !dbg !88
  %848 = fmul float %843, %847, !dbg !89
  %849 = fadd float %828, %848, !dbg !90
  %850 = fadd float %833, %839, !dbg !91
  %851 = fmul float %843, %843, !dbg !92
  %852 = fmul float %823, %851, !dbg !93
  %853 = fmul float %847, %852, !dbg !94
  %854 = fadd float %850, %853, !dbg !95
  %855 = bitcast float %849 to i32, !dbg !81
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 1, i32 31), !dbg !81
  %857 = bitcast i32 %856 to float, !dbg !81
  %858 = bitcast float %854 to i32, !dbg !81
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 1, i32 31), !dbg !81
  %860 = bitcast i32 %859 to float, !dbg !81
  %861 = bitcast float %844 to i32, !dbg !81
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %861, i32 1, i32 31), !dbg !81
  %863 = bitcast i32 %862 to float, !dbg !81
  %864 = fsub float %857, %849, !dbg !83
  %865 = fadd float %844, %863, !dbg !85
  %866 = fcmp oeq float %865, 0.000000e+00, !dbg !86
  %867 = tail call float @llvm.nvvm.div.full(float %863, float %865), !dbg !87
  %868 = select i1 %866, float 0.000000e+00, float %867, !dbg !88
  %869 = fmul float %864, %868, !dbg !89
  %870 = fadd float %849, %869, !dbg !90
  %871 = fadd float %854, %860, !dbg !91
  %872 = fmul float %864, %864, !dbg !92
  %873 = fmul float %844, %872, !dbg !93
  %874 = fmul float %868, %873, !dbg !94
  %875 = fadd float %871, %874, !dbg !95
  %876 = bitcast float %685 to i32, !dbg !81
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 16, i32 31), !dbg !81
  %878 = bitcast i32 %877 to float, !dbg !81
  %879 = bitcast float %690 to i32, !dbg !81
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 16, i32 31), !dbg !81
  %881 = bitcast i32 %880 to float, !dbg !81
  %882 = bitcast float %680 to i32, !dbg !81
  %883 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %882, i32 16, i32 31), !dbg !81
  %884 = bitcast i32 %883 to float, !dbg !81
  %885 = fsub float %878, %685, !dbg !83
  %886 = fadd float %680, %884, !dbg !85
  %887 = fcmp oeq float %886, 0.000000e+00, !dbg !86
  %888 = tail call float @llvm.nvvm.div.full(float %884, float %886), !dbg !87
  %889 = select i1 %887, float 0.000000e+00, float %888, !dbg !88
  %890 = fmul float %885, %889, !dbg !89
  %891 = fadd float %685, %890, !dbg !90
  %892 = fadd float %690, %881, !dbg !91
  %893 = fmul float %885, %885, !dbg !92
  %894 = fmul float %680, %893, !dbg !93
  %895 = fmul float %894, %889, !dbg !94
  %896 = fadd float %892, %895, !dbg !95
  %897 = bitcast float %891 to i32, !dbg !81
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 8, i32 31), !dbg !81
  %899 = bitcast i32 %898 to float, !dbg !81
  %900 = bitcast float %896 to i32, !dbg !81
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 8, i32 31), !dbg !81
  %902 = bitcast i32 %901 to float, !dbg !81
  %903 = bitcast float %886 to i32, !dbg !81
  %904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %903, i32 8, i32 31), !dbg !81
  %905 = bitcast i32 %904 to float, !dbg !81
  %906 = fsub float %899, %891, !dbg !83
  %907 = fadd float %886, %905, !dbg !85
  %908 = fcmp oeq float %907, 0.000000e+00, !dbg !86
  %909 = tail call float @llvm.nvvm.div.full(float %905, float %907), !dbg !87
  %910 = select i1 %908, float 0.000000e+00, float %909, !dbg !88
  %911 = fmul float %906, %910, !dbg !89
  %912 = fadd float %891, %911, !dbg !90
  %913 = fadd float %896, %902, !dbg !91
  %914 = fmul float %906, %906, !dbg !92
  %915 = fmul float %886, %914, !dbg !93
  %916 = fmul float %910, %915, !dbg !94
  %917 = fadd float %913, %916, !dbg !95
  %918 = bitcast float %912 to i32, !dbg !81
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 4, i32 31), !dbg !81
  %920 = bitcast i32 %919 to float, !dbg !81
  %921 = bitcast float %917 to i32, !dbg !81
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 4, i32 31), !dbg !81
  %923 = bitcast i32 %922 to float, !dbg !81
  %924 = bitcast float %907 to i32, !dbg !81
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 4, i32 31), !dbg !81
  %926 = bitcast i32 %925 to float, !dbg !81
  %927 = fsub float %920, %912, !dbg !83
  %928 = fadd float %907, %926, !dbg !85
  %929 = fcmp oeq float %928, 0.000000e+00, !dbg !86
  %930 = tail call float @llvm.nvvm.div.full(float %926, float %928), !dbg !87
  %931 = select i1 %929, float 0.000000e+00, float %930, !dbg !88
  %932 = fmul float %927, %931, !dbg !89
  %933 = fadd float %912, %932, !dbg !90
  %934 = fadd float %917, %923, !dbg !91
  %935 = fmul float %927, %927, !dbg !92
  %936 = fmul float %907, %935, !dbg !93
  %937 = fmul float %931, %936, !dbg !94
  %938 = fadd float %934, %937, !dbg !95
  %939 = bitcast float %933 to i32, !dbg !81
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 2, i32 31), !dbg !81
  %941 = bitcast i32 %940 to float, !dbg !81
  %942 = bitcast float %938 to i32, !dbg !81
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 2, i32 31), !dbg !81
  %944 = bitcast i32 %943 to float, !dbg !81
  %945 = bitcast float %928 to i32, !dbg !81
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 2, i32 31), !dbg !81
  %947 = bitcast i32 %946 to float, !dbg !81
  %948 = fsub float %941, %933, !dbg !83
  %949 = fadd float %928, %947, !dbg !85
  %950 = fcmp oeq float %949, 0.000000e+00, !dbg !86
  %951 = tail call float @llvm.nvvm.div.full(float %947, float %949), !dbg !87
  %952 = select i1 %950, float 0.000000e+00, float %951, !dbg !88
  %953 = fmul float %948, %952, !dbg !89
  %954 = fadd float %933, %953, !dbg !90
  %955 = fadd float %938, %944, !dbg !91
  %956 = fmul float %948, %948, !dbg !92
  %957 = fmul float %928, %956, !dbg !93
  %958 = fmul float %952, %957, !dbg !94
  %959 = fadd float %955, %958, !dbg !95
  %960 = bitcast float %954 to i32, !dbg !81
  %961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %960, i32 1, i32 31), !dbg !81
  %962 = bitcast i32 %961 to float, !dbg !81
  %963 = bitcast float %959 to i32, !dbg !81
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 1, i32 31), !dbg !81
  %965 = bitcast i32 %964 to float, !dbg !81
  %966 = bitcast float %949 to i32, !dbg !81
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 1, i32 31), !dbg !81
  %968 = bitcast i32 %967 to float, !dbg !81
  %969 = fsub float %962, %954, !dbg !83
  %970 = fadd float %949, %968, !dbg !85
  %971 = fcmp oeq float %970, 0.000000e+00, !dbg !86
  %972 = tail call float @llvm.nvvm.div.full(float %968, float %970), !dbg !87
  %973 = select i1 %971, float 0.000000e+00, float %972, !dbg !88
  %974 = fmul float %969, %973, !dbg !89
  %975 = fadd float %954, %974, !dbg !90
  %976 = fadd float %959, %965, !dbg !91
  %977 = fmul float %969, %969, !dbg !92
  %978 = fmul float %949, %977, !dbg !93
  %979 = fmul float %973, %978, !dbg !94
  %980 = fadd float %976, %979, !dbg !95
  %981 = bitcast float %725 to i32, !dbg !81
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 16, i32 31), !dbg !81
  %983 = bitcast i32 %982 to float, !dbg !81
  %984 = bitcast float %730 to i32, !dbg !81
  %985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %984, i32 16, i32 31), !dbg !81
  %986 = bitcast i32 %985 to float, !dbg !81
  %987 = bitcast float %720 to i32, !dbg !81
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 16, i32 31), !dbg !81
  %989 = bitcast i32 %988 to float, !dbg !81
  %990 = fsub float %983, %725, !dbg !83
  %991 = fadd float %720, %989, !dbg !85
  %992 = fcmp oeq float %991, 0.000000e+00, !dbg !86
  %993 = tail call float @llvm.nvvm.div.full(float %989, float %991), !dbg !87
  %994 = select i1 %992, float 0.000000e+00, float %993, !dbg !88
  %995 = fmul float %990, %994, !dbg !89
  %996 = fadd float %725, %995, !dbg !90
  %997 = fadd float %730, %986, !dbg !91
  %998 = fmul float %990, %990, !dbg !92
  %999 = fmul float %720, %998, !dbg !93
  %1000 = fmul float %999, %994, !dbg !94
  %1001 = fadd float %997, %1000, !dbg !95
  %1002 = bitcast float %996 to i32, !dbg !81
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 8, i32 31), !dbg !81
  %1004 = bitcast i32 %1003 to float, !dbg !81
  %1005 = bitcast float %1001 to i32, !dbg !81
  %1006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 8, i32 31), !dbg !81
  %1007 = bitcast i32 %1006 to float, !dbg !81
  %1008 = bitcast float %991 to i32, !dbg !81
  %1009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1008, i32 8, i32 31), !dbg !81
  %1010 = bitcast i32 %1009 to float, !dbg !81
  %1011 = fsub float %1004, %996, !dbg !83
  %1012 = fadd float %991, %1010, !dbg !85
  %1013 = fcmp oeq float %1012, 0.000000e+00, !dbg !86
  %1014 = tail call float @llvm.nvvm.div.full(float %1010, float %1012), !dbg !87
  %1015 = select i1 %1013, float 0.000000e+00, float %1014, !dbg !88
  %1016 = fmul float %1011, %1015, !dbg !89
  %1017 = fadd float %996, %1016, !dbg !90
  %1018 = fadd float %1001, %1007, !dbg !91
  %1019 = fmul float %1011, %1011, !dbg !92
  %1020 = fmul float %991, %1019, !dbg !93
  %1021 = fmul float %1015, %1020, !dbg !94
  %1022 = fadd float %1018, %1021, !dbg !95
  %1023 = bitcast float %1017 to i32, !dbg !81
  %1024 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1023, i32 4, i32 31), !dbg !81
  %1025 = bitcast i32 %1024 to float, !dbg !81
  %1026 = bitcast float %1022 to i32, !dbg !81
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1026, i32 4, i32 31), !dbg !81
  %1028 = bitcast i32 %1027 to float, !dbg !81
  %1029 = bitcast float %1012 to i32, !dbg !81
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 4, i32 31), !dbg !81
  %1031 = bitcast i32 %1030 to float, !dbg !81
  %1032 = fsub float %1025, %1017, !dbg !83
  %1033 = fadd float %1012, %1031, !dbg !85
  %1034 = fcmp oeq float %1033, 0.000000e+00, !dbg !86
  %1035 = tail call float @llvm.nvvm.div.full(float %1031, float %1033), !dbg !87
  %1036 = select i1 %1034, float 0.000000e+00, float %1035, !dbg !88
  %1037 = fmul float %1032, %1036, !dbg !89
  %1038 = fadd float %1017, %1037, !dbg !90
  %1039 = fadd float %1022, %1028, !dbg !91
  %1040 = fmul float %1032, %1032, !dbg !92
  %1041 = fmul float %1012, %1040, !dbg !93
  %1042 = fmul float %1036, %1041, !dbg !94
  %1043 = fadd float %1039, %1042, !dbg !95
  %1044 = bitcast float %1038 to i32, !dbg !81
  %1045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1044, i32 2, i32 31), !dbg !81
  %1046 = bitcast i32 %1045 to float, !dbg !81
  %1047 = bitcast float %1043 to i32, !dbg !81
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1047, i32 2, i32 31), !dbg !81
  %1049 = bitcast i32 %1048 to float, !dbg !81
  %1050 = bitcast float %1033 to i32, !dbg !81
  %1051 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1050, i32 2, i32 31), !dbg !81
  %1052 = bitcast i32 %1051 to float, !dbg !81
  %1053 = fsub float %1046, %1038, !dbg !83
  %1054 = fadd float %1033, %1052, !dbg !85
  %1055 = fcmp oeq float %1054, 0.000000e+00, !dbg !86
  %1056 = tail call float @llvm.nvvm.div.full(float %1052, float %1054), !dbg !87
  %1057 = select i1 %1055, float 0.000000e+00, float %1056, !dbg !88
  %1058 = fmul float %1053, %1057, !dbg !89
  %1059 = fadd float %1038, %1058, !dbg !90
  %1060 = fadd float %1043, %1049, !dbg !91
  %1061 = fmul float %1053, %1053, !dbg !92
  %1062 = fmul float %1033, %1061, !dbg !93
  %1063 = fmul float %1057, %1062, !dbg !94
  %1064 = fadd float %1060, %1063, !dbg !95
  %1065 = bitcast float %1059 to i32, !dbg !81
  %1066 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1065, i32 1, i32 31), !dbg !81
  %1067 = bitcast i32 %1066 to float, !dbg !81
  %1068 = bitcast float %1064 to i32, !dbg !81
  %1069 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1068, i32 1, i32 31), !dbg !81
  %1070 = bitcast i32 %1069 to float, !dbg !81
  %1071 = bitcast float %1054 to i32, !dbg !81
  %1072 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1071, i32 1, i32 31), !dbg !81
  %1073 = bitcast i32 %1072 to float, !dbg !81
  %1074 = fsub float %1067, %1059, !dbg !83
  %1075 = fadd float %1054, %1073, !dbg !85
  %1076 = fcmp oeq float %1075, 0.000000e+00, !dbg !86
  %1077 = tail call float @llvm.nvvm.div.full(float %1073, float %1075), !dbg !87
  %1078 = select i1 %1076, float 0.000000e+00, float %1077, !dbg !88
  %1079 = fmul float %1074, %1078, !dbg !89
  %1080 = fadd float %1059, %1079, !dbg !90
  %1081 = fadd float %1064, %1070, !dbg !91
  %1082 = fmul float %1074, %1074, !dbg !92
  %1083 = fmul float %1054, %1082, !dbg !93
  %1084 = fmul float %1078, %1083, !dbg !94
  %1085 = fadd float %1081, %1084, !dbg !95
  %1086 = bitcast float %765 to i32, !dbg !81
  %1087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1086, i32 16, i32 31), !dbg !81
  %1088 = bitcast i32 %1087 to float, !dbg !81
  %1089 = bitcast float %770 to i32, !dbg !81
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1089, i32 16, i32 31), !dbg !81
  %1091 = bitcast i32 %1090 to float, !dbg !81
  %1092 = bitcast float %760 to i32, !dbg !81
  %1093 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1092, i32 16, i32 31), !dbg !81
  %1094 = bitcast i32 %1093 to float, !dbg !81
  %1095 = fsub float %1088, %765, !dbg !83
  %1096 = fadd float %760, %1094, !dbg !85
  %1097 = fcmp oeq float %1096, 0.000000e+00, !dbg !86
  %1098 = tail call float @llvm.nvvm.div.full(float %1094, float %1096), !dbg !87
  %1099 = select i1 %1097, float 0.000000e+00, float %1098, !dbg !88
  %1100 = fmul float %1095, %1099, !dbg !89
  %1101 = fadd float %765, %1100, !dbg !90
  %1102 = fadd float %770, %1091, !dbg !91
  %1103 = fmul float %1095, %1095, !dbg !92
  %1104 = fmul float %760, %1103, !dbg !93
  %1105 = fmul float %1104, %1099, !dbg !94
  %1106 = fadd float %1102, %1105, !dbg !95
  %1107 = bitcast float %1101 to i32, !dbg !81
  %1108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1107, i32 8, i32 31), !dbg !81
  %1109 = bitcast i32 %1108 to float, !dbg !81
  %1110 = bitcast float %1106 to i32, !dbg !81
  %1111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1110, i32 8, i32 31), !dbg !81
  %1112 = bitcast i32 %1111 to float, !dbg !81
  %1113 = bitcast float %1096 to i32, !dbg !81
  %1114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1113, i32 8, i32 31), !dbg !81
  %1115 = bitcast i32 %1114 to float, !dbg !81
  %1116 = fsub float %1109, %1101, !dbg !83
  %1117 = fadd float %1096, %1115, !dbg !85
  %1118 = fcmp oeq float %1117, 0.000000e+00, !dbg !86
  %1119 = tail call float @llvm.nvvm.div.full(float %1115, float %1117), !dbg !87
  %1120 = select i1 %1118, float 0.000000e+00, float %1119, !dbg !88
  %1121 = fmul float %1116, %1120, !dbg !89
  %1122 = fadd float %1101, %1121, !dbg !90
  %1123 = fadd float %1106, %1112, !dbg !91
  %1124 = fmul float %1116, %1116, !dbg !92
  %1125 = fmul float %1096, %1124, !dbg !93
  %1126 = fmul float %1120, %1125, !dbg !94
  %1127 = fadd float %1123, %1126, !dbg !95
  %1128 = bitcast float %1122 to i32, !dbg !81
  %1129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1128, i32 4, i32 31), !dbg !81
  %1130 = bitcast i32 %1129 to float, !dbg !81
  %1131 = bitcast float %1127 to i32, !dbg !81
  %1132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1131, i32 4, i32 31), !dbg !81
  %1133 = bitcast i32 %1132 to float, !dbg !81
  %1134 = bitcast float %1117 to i32, !dbg !81
  %1135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1134, i32 4, i32 31), !dbg !81
  %1136 = bitcast i32 %1135 to float, !dbg !81
  %1137 = fsub float %1130, %1122, !dbg !83
  %1138 = fadd float %1117, %1136, !dbg !85
  %1139 = fcmp oeq float %1138, 0.000000e+00, !dbg !86
  %1140 = tail call float @llvm.nvvm.div.full(float %1136, float %1138), !dbg !87
  %1141 = select i1 %1139, float 0.000000e+00, float %1140, !dbg !88
  %1142 = fmul float %1137, %1141, !dbg !89
  %1143 = fadd float %1122, %1142, !dbg !90
  %1144 = fadd float %1127, %1133, !dbg !91
  %1145 = fmul float %1137, %1137, !dbg !92
  %1146 = fmul float %1117, %1145, !dbg !93
  %1147 = fmul float %1141, %1146, !dbg !94
  %1148 = fadd float %1144, %1147, !dbg !95
  %1149 = bitcast float %1143 to i32, !dbg !81
  %1150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1149, i32 2, i32 31), !dbg !81
  %1151 = bitcast i32 %1150 to float, !dbg !81
  %1152 = bitcast float %1148 to i32, !dbg !81
  %1153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1152, i32 2, i32 31), !dbg !81
  %1154 = bitcast i32 %1153 to float, !dbg !81
  %1155 = bitcast float %1138 to i32, !dbg !81
  %1156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1155, i32 2, i32 31), !dbg !81
  %1157 = bitcast i32 %1156 to float, !dbg !81
  %1158 = fsub float %1151, %1143, !dbg !83
  %1159 = fadd float %1138, %1157, !dbg !85
  %1160 = fcmp oeq float %1159, 0.000000e+00, !dbg !86
  %1161 = tail call float @llvm.nvvm.div.full(float %1157, float %1159), !dbg !87
  %1162 = select i1 %1160, float 0.000000e+00, float %1161, !dbg !88
  %1163 = fmul float %1158, %1162, !dbg !89
  %1164 = fadd float %1143, %1163, !dbg !90
  %1165 = fadd float %1148, %1154, !dbg !91
  %1166 = fmul float %1158, %1158, !dbg !92
  %1167 = fmul float %1138, %1166, !dbg !93
  %1168 = fmul float %1162, %1167, !dbg !94
  %1169 = fadd float %1165, %1168, !dbg !95
  %1170 = bitcast float %1164 to i32, !dbg !81
  %1171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1170, i32 1, i32 31), !dbg !81
  %1172 = bitcast i32 %1171 to float, !dbg !81
  %1173 = bitcast float %1169 to i32, !dbg !81
  %1174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1173, i32 1, i32 31), !dbg !81
  %1175 = bitcast i32 %1174 to float, !dbg !81
  %1176 = bitcast float %1159 to i32, !dbg !81
  %1177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1176, i32 1, i32 31), !dbg !81
  %1178 = bitcast i32 %1177 to float, !dbg !81
  %1179 = fsub float %1172, %1164, !dbg !83
  %1180 = fadd float %1159, %1178, !dbg !85
  %1181 = fcmp oeq float %1180, 0.000000e+00, !dbg !86
  %1182 = tail call float @llvm.nvvm.div.full(float %1178, float %1180), !dbg !87
  %1183 = select i1 %1181, float 0.000000e+00, float %1182, !dbg !88
  %1184 = fmul float %1179, %1183, !dbg !89
  %1185 = fadd float %1164, %1184, !dbg !90
  %1186 = fadd float %1169, %1175, !dbg !91
  %1187 = fmul float %1179, %1179, !dbg !92
  %1188 = fmul float %1159, %1187, !dbg !93
  %1189 = fmul float %1183, %1188, !dbg !94
  %1190 = fadd float %1186, %1189, !dbg !95
  %1191 = and i32 %607, 15, !dbg !81
  %1192 = icmp eq i32 %22, 0, !dbg !81
  %1193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1191, !dbg !81
  %1194 = bitcast float %870 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1194, i1 %1192) #5, !dbg !81
  %1195 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1191, !dbg !81
  %1196 = bitcast float %875 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1195, <1 x i32> %1196, i1 %1192) #5, !dbg !81
  %1197 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1191, !dbg !81
  %1198 = bitcast float %865 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1197, <1 x i32> %1198, i1 %1192) #5, !dbg !81
  %1199 = or disjoint i32 %1191, 16, !dbg !81
  %1200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1199, !dbg !81
  %1201 = bitcast float %975 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1200, <1 x i32> %1201, i1 %1192) #5, !dbg !81
  %1202 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1199, !dbg !81
  %1203 = bitcast float %980 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1202, <1 x i32> %1203, i1 %1192) #5, !dbg !81
  %1204 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1199, !dbg !81
  %1205 = bitcast float %970 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1204, <1 x i32> %1205, i1 %1192) #5, !dbg !81
  %1206 = or disjoint i32 %1191, 32, !dbg !81
  %1207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1206, !dbg !81
  %1208 = bitcast float %1080 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1207, <1 x i32> %1208, i1 %1192) #5, !dbg !81
  %1209 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1206, !dbg !81
  %1210 = bitcast float %1085 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1209, <1 x i32> %1210, i1 %1192) #5, !dbg !81
  %1211 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1206, !dbg !81
  %1212 = bitcast float %1075 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1211, <1 x i32> %1212, i1 %1192) #5, !dbg !81
  %1213 = or disjoint i32 %1191, 48, !dbg !81
  %1214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1213, !dbg !81
  %1215 = bitcast float %1185 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1214, <1 x i32> %1215, i1 %1192) #5, !dbg !81
  %1216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %1213, !dbg !81
  %1217 = bitcast float %1190 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1216, <1 x i32> %1217, i1 %1192) #5, !dbg !81
  %1218 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1213, !dbg !81
  %1219 = bitcast float %1180 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1218, <1 x i32> %1219, i1 %1192) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1220 = icmp slt i32 %19, 64, !dbg !81
  %1221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !81
  %1222 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1221, i1 %1220) #5, !dbg !81
  %1223 = bitcast i32 %1222 to float, !dbg !81
  %1224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !81
  %1225 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1224, i1 %1220) #5, !dbg !81
  %1226 = bitcast i32 %1225 to float, !dbg !81
  %1227 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %19, !dbg !81
  %1228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1227, i1 %1220) #5, !dbg !81
  %1229 = bitcast i32 %1228 to float, !dbg !81
  %1230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1222, i32 8, i32 31), !dbg !81
  %1231 = bitcast i32 %1230 to float, !dbg !81
  %1232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1225, i32 8, i32 31), !dbg !81
  %1233 = bitcast i32 %1232 to float, !dbg !81
  %1234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1228, i32 8, i32 31), !dbg !81
  %1235 = bitcast i32 %1234 to float, !dbg !81
  %1236 = fsub float %1231, %1223, !dbg !83
  %1237 = fadd float %1229, %1235, !dbg !85
  %1238 = fcmp oeq float %1237, 0.000000e+00, !dbg !86
  %1239 = tail call float @llvm.nvvm.div.full(float %1235, float %1237), !dbg !87
  %1240 = select i1 %1238, float 0.000000e+00, float %1239, !dbg !88
  %1241 = fmul float %1236, %1240, !dbg !89
  %1242 = fadd float %1241, %1223, !dbg !90
  %1243 = fadd float %1226, %1233, !dbg !91
  %1244 = fmul float %1236, %1236, !dbg !92
  %1245 = fmul float %1244, %1229, !dbg !93
  %1246 = fmul float %1245, %1240, !dbg !94
  %1247 = fadd float %1243, %1246, !dbg !95
  %1248 = bitcast float %1242 to i32, !dbg !81
  %1249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1248, i32 4, i32 31), !dbg !81
  %1250 = bitcast i32 %1249 to float, !dbg !81
  %1251 = bitcast float %1247 to i32, !dbg !81
  %1252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1251, i32 4, i32 31), !dbg !81
  %1253 = bitcast i32 %1252 to float, !dbg !81
  %1254 = bitcast float %1237 to i32, !dbg !81
  %1255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1254, i32 4, i32 31), !dbg !81
  %1256 = bitcast i32 %1255 to float, !dbg !81
  %1257 = fsub float %1250, %1242, !dbg !83
  %1258 = fadd float %1237, %1256, !dbg !85
  %1259 = fcmp oeq float %1258, 0.000000e+00, !dbg !86
  %1260 = tail call float @llvm.nvvm.div.full(float %1256, float %1258), !dbg !87
  %1261 = select i1 %1259, float 0.000000e+00, float %1260, !dbg !88
  %1262 = fmul float %1257, %1261, !dbg !89
  %1263 = fadd float %1242, %1262, !dbg !90
  %1264 = fadd float %1247, %1253, !dbg !91
  %1265 = fmul float %1257, %1257, !dbg !92
  %1266 = fmul float %1237, %1265, !dbg !93
  %1267 = fmul float %1261, %1266, !dbg !94
  %1268 = fadd float %1264, %1267, !dbg !95
  %1269 = bitcast float %1263 to i32, !dbg !81
  %1270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1269, i32 2, i32 31), !dbg !81
  %1271 = bitcast i32 %1270 to float, !dbg !81
  %1272 = bitcast float %1268 to i32, !dbg !81
  %1273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1272, i32 2, i32 31), !dbg !81
  %1274 = bitcast i32 %1273 to float, !dbg !81
  %1275 = bitcast float %1258 to i32, !dbg !81
  %1276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1275, i32 2, i32 31), !dbg !81
  %1277 = bitcast i32 %1276 to float, !dbg !81
  %1278 = fsub float %1271, %1263, !dbg !83
  %1279 = fadd float %1258, %1277, !dbg !85
  %1280 = fcmp oeq float %1279, 0.000000e+00, !dbg !86
  %1281 = tail call float @llvm.nvvm.div.full(float %1277, float %1279), !dbg !87
  %1282 = select i1 %1280, float 0.000000e+00, float %1281, !dbg !88
  %1283 = fmul float %1278, %1282, !dbg !89
  %1284 = fadd float %1263, %1283, !dbg !90
  %1285 = fadd float %1268, %1274, !dbg !91
  %1286 = fmul float %1278, %1278, !dbg !92
  %1287 = fmul float %1258, %1286, !dbg !93
  %1288 = fmul float %1282, %1287, !dbg !94
  %1289 = fadd float %1285, %1288, !dbg !95
  %1290 = bitcast float %1284 to i32, !dbg !81
  %1291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1290, i32 1, i32 31), !dbg !81
  %1292 = bitcast i32 %1291 to float, !dbg !81
  %1293 = bitcast float %1289 to i32, !dbg !81
  %1294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1293, i32 1, i32 31), !dbg !81
  %1295 = bitcast i32 %1294 to float, !dbg !81
  %1296 = bitcast float %1279 to i32, !dbg !81
  %1297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1296, i32 1, i32 31), !dbg !81
  %1298 = bitcast i32 %1297 to float, !dbg !81
  %1299 = fsub float %1292, %1284, !dbg !83
  %1300 = fadd float %1279, %1298, !dbg !85
  %1301 = fcmp oeq float %1300, 0.000000e+00, !dbg !86
  %1302 = tail call float @llvm.nvvm.div.full(float %1298, float %1300), !dbg !87
  %1303 = select i1 %1301, float 0.000000e+00, float %1302, !dbg !88
  %1304 = fmul float %1299, %1303, !dbg !89
  %1305 = fadd float %1284, %1304, !dbg !90
  %1306 = fadd float %1289, %1295, !dbg !91
  %1307 = fmul float %1299, %1299, !dbg !92
  %1308 = fmul float %1279, %1307, !dbg !93
  %1309 = fmul float %1303, %1308, !dbg !94
  %1310 = fadd float %1306, %1309, !dbg !95
  %1311 = and i32 %19, 15, !dbg !81
  %1312 = icmp eq i32 %1311, 0, !dbg !81
  %1313 = and i1 %1220, %1312, !dbg !81
  %1314 = bitcast float %1305 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1221, <1 x i32> %1314, i1 %1313) #5, !dbg !81
  %1315 = bitcast float %1310 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1224, <1 x i32> %1315, i1 %1313) #5, !dbg !81
  %1316 = bitcast float %1300 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1227, <1 x i32> %1316, i1 %1313) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %1317 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %1318 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !81
  %1319 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !81
  %1320 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !81
  %1321 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !81
  %1322 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !81
  %1323 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !81
  %1324 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !81
  %1325 = tail call float @llvm.nvvm.div.full(float %1321, float 3.072000e+03), !dbg !96
  %1326 = tail call float @llvm.nvvm.div.full(float %1322, float 3.072000e+03), !dbg !96
  %1327 = tail call float @llvm.nvvm.div.full(float %1323, float 3.072000e+03), !dbg !96
  %1328 = tail call float @llvm.nvvm.div.full(float %1324, float 3.072000e+03), !dbg !96
  %1329 = fadd float %1325, 0x3EB0C6F7A0000000, !dbg !97
  %1330 = fadd float %1326, 0x3EB0C6F7A0000000, !dbg !97
  %1331 = fadd float %1327, 0x3EB0C6F7A0000000, !dbg !97
  %1332 = fadd float %1328, 0x3EB0C6F7A0000000, !dbg !97
  %1333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i170 = icmp eq i32 %1336, 0, !dbg !98
  br i1 %.not.i170, label %1339, label %1337, !dbg !98

1337:                                             ; preds = %__nv_rsqrtf.exit
  %1338 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1329), !dbg !98
  br label %__nv_rsqrtf.exit172, !dbg !98

1339:                                             ; preds = %__nv_rsqrtf.exit
  %1340 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1329), !dbg !98
  br label %__nv_rsqrtf.exit172, !dbg !98

__nv_rsqrtf.exit172:                              ; preds = %1337, %1339
  %.0.i171 = phi float [ %1338, %1337 ], [ %1340, %1339 ], !dbg !98
  %1341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i182 = icmp eq i32 %1344, 0, !dbg !98
  br i1 %.not.i182, label %1347, label %1345, !dbg !98

1345:                                             ; preds = %__nv_rsqrtf.exit172
  %1346 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1330), !dbg !98
  br label %__nv_rsqrtf.exit184, !dbg !98

1347:                                             ; preds = %__nv_rsqrtf.exit172
  %1348 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1330), !dbg !98
  br label %__nv_rsqrtf.exit184, !dbg !98

__nv_rsqrtf.exit184:                              ; preds = %1345, %1347
  %.0.i183 = phi float [ %1346, %1345 ], [ %1348, %1347 ], !dbg !98
  %1349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i194 = icmp eq i32 %1352, 0, !dbg !98
  br i1 %.not.i194, label %1355, label %1353, !dbg !98

1353:                                             ; preds = %__nv_rsqrtf.exit184
  %1354 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1331), !dbg !98
  br label %__nv_rsqrtf.exit196, !dbg !98

1355:                                             ; preds = %__nv_rsqrtf.exit184
  %1356 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1331), !dbg !98
  br label %__nv_rsqrtf.exit196, !dbg !98

__nv_rsqrtf.exit196:                              ; preds = %1353, %1355
  %.0.i195 = phi float [ %1354, %1353 ], [ %1356, %1355 ], !dbg !98
  %1357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %1360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i206 = icmp eq i32 %1360, 0, !dbg !98
  br i1 %.not.i206, label %1363, label %1361, !dbg !98

1361:                                             ; preds = %__nv_rsqrtf.exit196
  %1362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1332), !dbg !98
  br label %__nv_rsqrtf.exit208, !dbg !98

1363:                                             ; preds = %__nv_rsqrtf.exit196
  %1364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1332), !dbg !98
  br label %__nv_rsqrtf.exit208, !dbg !98

__nv_rsqrtf.exit208:                              ; preds = %1361, %1363
  %.0.i207 = phi float [ %1362, %1361 ], [ %1364, %1363 ], !dbg !98
  %1365 = lshr i32 %32, 8
  %1366 = and i32 %1365, 24
  %1367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1366
  %1368 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1367, i32 %96
  %1369 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1367, i32 %100
  %1370 = and i32 %37, 4088
  %1371 = lshr i32 %37, 8
  %1372 = and i32 %1371, 8
  %1373 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1372
  %1374 = getelementptr bfloat, ptr addrspace(3) %1373, i32 %1370
  %1375 = insertelement <2 x float> poison, float %.0.i171, i64 0, !dbg !99
  %1376 = shufflevector <2 x float> %1375, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %1377 = insertelement <2 x float> poison, float %1317, i64 0, !dbg !100
  %1378 = shufflevector <2 x float> %1377, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %1379 = insertelement <16 x float> poison, float %.0.i171, i64 0, !dbg !99
  %1380 = insertelement <16 x float> %1379, float %.0.i183, i64 1, !dbg !99
  %1381 = insertelement <16 x float> %1380, float %.0.i195, i64 2, !dbg !99
  %1382 = insertelement <16 x float> %1381, float %.0.i207, i64 3, !dbg !99
  %1383 = shufflevector <16 x float> %1382, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2>, !dbg !99
  %1384 = insertelement <16 x float> poison, float %1317, i64 0, !dbg !100
  %1385 = insertelement <16 x float> %1384, float %1318, i64 1, !dbg !100
  %1386 = insertelement <16 x float> %1385, float %1319, i64 2, !dbg !100
  %1387 = insertelement <16 x float> %1386, float %1320, i64 3, !dbg !100
  %1388 = shufflevector <16 x float> %1387, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2>, !dbg !100
  br label %1389, !dbg !101

1389:                                             ; preds = %__nv_rsqrtf.exit208, %1389
  %1390 = phi i1 [ true, %__nv_rsqrtf.exit208 ], [ false, %1389 ]
  %indvars.iv322 = phi i64 [ 0, %__nv_rsqrtf.exit208 ], [ 2048, %1389 ]
  %1391 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit208 ], [ %1563, %1389 ]
  %1392 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit208 ], [ %1564, %1389 ]
  %1393 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit208 ], [ %1557, %1389 ]
  %1394 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit208 ], [ %1584, %1389 ]
  %1395 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit208 ], [ %1585, %1389 ]
  %1396 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit208 ], [ %1588, %1389 ]
  %1397 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit208 ], [ %1567, %1389 ]
  %1398 = or disjoint i64 %indvars.iv322, %128, !dbg !102
  %1399 = or disjoint i64 %indvars.iv322, %127, !dbg !102
  %1400 = or disjoint i64 %indvars.iv322, %126, !dbg !102
  %1401 = icmp samesign ult i64 %1398, 3072, !dbg !103
  %1402 = icmp samesign ult i64 %1399, 3072, !dbg !103
  %1403 = icmp samesign ult i64 %1400, 3072, !dbg !103
  %1404 = trunc nuw nsw i64 %1399 to i32, !dbg !104
  %1405 = add i32 %76, %1404, !dbg !104
  %1406 = trunc nuw nsw i64 %indvars.iv322 to i32, !dbg !104
  %1407 = add i32 %94, %1406, !dbg !104
  %1408 = trunc nuw nsw i64 %1400 to i32, !dbg !104
  %1409 = add i32 %77, %1408, !dbg !104
  %1410 = add i32 %78, %1408, !dbg !104
  %1411 = sext i32 %1405 to i64, !dbg !105
  %1412 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1411, !dbg !105
  %1413 = sext i32 %1407 to i64, !dbg !105
  %1414 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1413, !dbg !105
  %1415 = and i1 %27, %1401, !dbg !106
  %1416 = and i1 %26, %1402, !dbg !106
  %1417 = and i1 %28, %1403, !dbg !106
  %1418 = and i1 %29, %1403, !dbg !106
  %1419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1412, i1 %1416) #5, !dbg !107
  %1420 = extractvalue { i32, i32, i32, i32 } %1419, 0, !dbg !107
  %1421 = extractvalue { i32, i32, i32, i32 } %1419, 1, !dbg !107
  %1422 = extractvalue { i32, i32, i32, i32 } %1419, 2, !dbg !107
  %1423 = extractvalue { i32, i32, i32, i32 } %1419, 3, !dbg !107
  %1424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1414, i1 %1416) #5, !dbg !107
  %1425 = extractvalue { i32, i32, i32, i32 } %1424, 0, !dbg !107
  %1426 = extractvalue { i32, i32, i32, i32 } %1424, 1, !dbg !107
  %1427 = extractvalue { i32, i32, i32, i32 } %1424, 2, !dbg !107
  %1428 = extractvalue { i32, i32, i32, i32 } %1424, 3, !dbg !107
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1368, i32 %1420, i32 %1421, i32 %1422, i32 %1423, i1 true) #5, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %1369, i32 %1425, i32 %1426, i32 %1427, i32 %1428, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1429 = load bfloat, ptr addrspace(3) %105, align 8, !dbg !99
  %1430 = load bfloat, ptr addrspace(3) %132, align 2, !dbg !99
  %1431 = fpext bfloat %1429 to float, !dbg !108
  %1432 = fpext bfloat %1430 to float, !dbg !108
  %1433 = or disjoint i64 %1398, 12288, !dbg !109
  %1434 = getelementptr float, ptr addrspace(1) %1, i64 %1433, !dbg !110
  %1435 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1433, !dbg !111
  %1436 = add nuw nsw i64 %1398, 9216, !dbg !112
  %1437 = getelementptr float, ptr addrspace(1) %1, i64 %1436, !dbg !113
  %1438 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1436, !dbg !114
  %1439 = fsub float %1431, %1320, !dbg !100
  %1440 = fsub float %1432, %1320, !dbg !100
  %1441 = fmul float %.0.i207, %1439, !dbg !99
  %1442 = fmul float %.0.i207, %1440, !dbg !99
  %1443 = fcmp uno <2 x float> %1393, zeroinitializer, !dbg !115
  %1444 = fcmp uno <16 x float> %1396, zeroinitializer, !dbg !117
  %1445 = fcmp uno <4 x float> %1397, zeroinitializer, !dbg !115
  %1446 = fcmp uno float %1391, 0.000000e+00, !dbg !115
  %1447 = fcmp uno float %1392, 0.000000e+00, !dbg !115
  %1448 = load <2 x bfloat>, ptr addrspace(3) %102, align 8, !dbg !99
  %1449 = fpext <2 x bfloat> %1448 to <2 x float>, !dbg !108
  %1450 = fsub <2 x float> %1449, %1378, !dbg !100
  %1451 = fmul <2 x float> %1376, %1450, !dbg !99
  %1452 = insertelement <2 x i1> poison, i1 %1415, i64 0, !dbg !119
  %1453 = shufflevector <2 x i1> %1452, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !119
  %1454 = fcmp uno <4 x float> %1394, zeroinitializer, !dbg !117
  %1455 = fcmp uno <4 x float> %1395, zeroinitializer, !dbg !117
  %1456 = load <2 x bfloat>, ptr addrspace(3) %129, align 4, !dbg !99
  %1457 = load <2 x bfloat>, ptr addrspace(3) %103, align 8, !dbg !99
  %1458 = load <2 x bfloat>, ptr addrspace(3) %130, align 4, !dbg !99
  %1459 = load <2 x bfloat>, ptr addrspace(3) %104, align 8, !dbg !99
  %1460 = load <2 x bfloat>, ptr addrspace(3) %131, align 4, !dbg !99
  %1461 = load <2 x bfloat>, ptr addrspace(3) %133, align 4, !dbg !99
  %1462 = shufflevector <2 x bfloat> %1456, <2 x bfloat> %1458, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1463 = shufflevector <2 x bfloat> %1460, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1464 = shufflevector <16 x bfloat> %1462, <16 x bfloat> %1463, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1465 = shufflevector <2 x bfloat> %1461, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1466 = shufflevector <16 x bfloat> %1464, <16 x bfloat> %1465, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1467 = shufflevector <2 x bfloat> %1456, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1468 = shufflevector <16 x bfloat> %1466, <16 x bfloat> %1467, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1469 = shufflevector <2 x bfloat> %1457, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1470 = shufflevector <16 x bfloat> %1468, <16 x bfloat> %1469, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1471 = shufflevector <2 x bfloat> %1458, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1472 = shufflevector <16 x bfloat> %1470, <16 x bfloat> %1471, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 poison, i32 poison>, !dbg !108
  %1473 = shufflevector <2 x bfloat> %1459, <2 x bfloat> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !108
  %1474 = shufflevector <16 x bfloat> %1472, <16 x bfloat> %1473, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>, !dbg !108
  %1475 = fpext <16 x bfloat> %1474 to <16 x float>, !dbg !108
  %1476 = fsub <16 x float> %1475, %1388, !dbg !100
  %1477 = fmul <16 x float> %1383, %1476, !dbg !99
  %1478 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1434, i1 %1401) #5, !dbg !120
  %1479 = extractvalue { i32, i32, i32, i32 } %1478, 0, !dbg !120
  %1480 = extractvalue { i32, i32, i32, i32 } %1478, 1, !dbg !120
  %1481 = extractvalue { i32, i32, i32, i32 } %1478, 2, !dbg !120
  %1482 = extractvalue { i32, i32, i32, i32 } %1478, 3, !dbg !120
  %1483 = insertelement <2 x i32> poison, i32 %1479, i64 0, !dbg !120
  %1484 = insertelement <2 x i32> %1483, i32 %1480, i64 1, !dbg !120
  %1485 = bitcast <2 x i32> %1484 to <2 x float>, !dbg !120
  %1486 = insertelement <2 x i32> poison, i32 %1481, i64 0, !dbg !120
  %1487 = insertelement <2 x i32> %1486, i32 %1482, i64 1, !dbg !120
  %1488 = bitcast <2 x i32> %1487 to <2 x float>, !dbg !120
  %1489 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1435, i1 %1401) #5, !dbg !121
  %1490 = extractvalue { i32, i32 } %1489, 0, !dbg !121
  %1491 = bitcast i32 %1490 to <2 x bfloat>, !dbg !121
  %1492 = extractvalue { i32, i32 } %1489, 1, !dbg !121
  %1493 = bitcast i32 %1492 to <2 x bfloat>, !dbg !121
  %1494 = fpext <2 x bfloat> %1491 to <2 x float>, !dbg !122
  %1495 = fpext <2 x bfloat> %1493 to <2 x float>, !dbg !122
  %1496 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1437, i1 %1401) #5, !dbg !123
  %1497 = extractvalue { i32, i32, i32, i32 } %1496, 0, !dbg !123
  %1498 = extractvalue { i32, i32, i32, i32 } %1496, 1, !dbg !123
  %1499 = extractvalue { i32, i32, i32, i32 } %1496, 2, !dbg !123
  %1500 = extractvalue { i32, i32, i32, i32 } %1496, 3, !dbg !123
  %1501 = insertelement <2 x i32> poison, i32 %1497, i64 0, !dbg !123
  %1502 = insertelement <2 x i32> %1501, i32 %1498, i64 1, !dbg !123
  %1503 = bitcast <2 x i32> %1502 to <2 x float>, !dbg !123
  %1504 = insertelement <2 x i32> poison, i32 %1499, i64 0, !dbg !123
  %1505 = insertelement <2 x i32> %1504, i32 %1500, i64 1, !dbg !123
  %1506 = bitcast <2 x i32> %1505 to <2 x float>, !dbg !123
  %1507 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1438, i1 %1401) #5, !dbg !124
  %1508 = extractvalue { i32, i32 } %1507, 0, !dbg !124
  %1509 = bitcast i32 %1508 to <2 x bfloat>, !dbg !124
  %1510 = extractvalue { i32, i32 } %1507, 1, !dbg !124
  %1511 = bitcast i32 %1510 to <2 x bfloat>, !dbg !124
  %1512 = fpext <2 x bfloat> %1509 to <2 x float>, !dbg !125
  %1513 = fpext <2 x bfloat> %1511 to <2 x float>, !dbg !125
  %1514 = fadd <2 x float> %1485, %1494, !dbg !126
  %1515 = fadd <2 x float> %1488, %1495, !dbg !126
  %1516 = fadd <2 x float> %1514, splat (float 1.000000e+00), !dbg !127
  %1517 = fadd <2 x float> %1515, splat (float 1.000000e+00), !dbg !127
  %1518 = fmul <2 x float> %1451, %1516, !dbg !128
  %1519 = extractelement <2 x float> %1516, i64 0, !dbg !128
  %1520 = extractelement <2 x float> %1516, i64 1, !dbg !128
  %1521 = fmul float %1441, %1519, !dbg !128
  %1522 = fmul float %1442, %1520, !dbg !128
  %1523 = shufflevector <2 x float> %1516, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !128
  %1524 = shufflevector <2 x float> %1517, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !128
  %1525 = shufflevector <4 x float> %1524, <4 x float> %1523, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !128
  %1526 = shufflevector <4 x float> %1525, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !128
  %1527 = fmul <16 x float> %1477, %1526, !dbg !128
  %1528 = fadd <2 x float> %1503, %1512, !dbg !129
  %1529 = fadd <2 x float> %1506, %1513, !dbg !129
  %1530 = fadd <2 x float> %1518, %1528, !dbg !130
  %1531 = extractelement <2 x float> %1528, i64 0, !dbg !130
  %1532 = extractelement <2 x float> %1528, i64 1, !dbg !130
  %1533 = fadd float %1521, %1531, !dbg !130
  %1534 = fadd float %1522, %1532, !dbg !130
  %1535 = shufflevector <2 x float> %1528, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !130
  %1536 = shufflevector <2 x float> %1529, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !130
  %1537 = shufflevector <4 x float> %1536, <4 x float> %1535, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !130
  %1538 = shufflevector <4 x float> %1537, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !130
  %1539 = fadd <16 x float> %1527, %1538, !dbg !130
  %1540 = fcmp olt <2 x float> %1393, %1530, !dbg !131
  %1541 = extractelement <16 x float> %1539, i64 4, !dbg !132
  %1542 = extractelement <16 x float> %1539, i64 5, !dbg !132
  %1543 = fcmp olt float %1391, %1533, !dbg !131
  %1544 = fcmp olt float %1392, %1534, !dbg !131
  %1545 = extractelement <16 x float> %1539, i64 6, !dbg !132
  %1546 = extractelement <16 x float> %1539, i64 7, !dbg !132
  %1547 = or <2 x i1> %1443, %1540, !dbg !133
  %1548 = or i1 %1446, %1543, !dbg !133
  %1549 = or i1 %1447, %1544, !dbg !133
  %1550 = select <2 x i1> %1547, <2 x float> %1393, <2 x float> %1530, !dbg !134
  %1551 = select i1 %1548, float %1391, float %1533, !dbg !134
  %1552 = select i1 %1549, float %1392, float %1534, !dbg !134
  %1553 = shufflevector <16 x float> %1539, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !131
  %1554 = fcmp olt <4 x float> %1397, %1553, !dbg !131
  %1555 = or <4 x i1> %1445, %1554, !dbg !133
  %1556 = select <4 x i1> %1555, <4 x float> %1397, <4 x float> %1553, !dbg !134
  %1557 = select <2 x i1> %1453, <2 x float> %1550, <2 x float> %1393, !dbg !119
  %1558 = fcmp ogt <16 x float> %1396, %1539, !dbg !135
  %1559 = fcmp olt <16 x float> %1396, %1539, !dbg !135
  %1560 = shufflevector <16 x i1> %1558, <16 x i1> %1559, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !135
  %1561 = or <16 x i1> %1444, %1560, !dbg !136
  %1562 = select <16 x i1> %1561, <16 x float> %1396, <16 x float> %1539, !dbg !137
  %1563 = select i1 %1415, float %1551, float %1391, !dbg !119
  %1564 = select i1 %1415, float %1552, float %1392, !dbg !119
  %1565 = insertelement <4 x i1> poison, i1 %1415, i64 0, !dbg !119
  %1566 = shufflevector <4 x i1> %1565, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !119
  %1567 = select <4 x i1> %1566, <4 x float> %1556, <4 x float> %1397, !dbg !119
  %1568 = extractelement <2 x float> %1530, i64 0, !dbg !132
  %1569 = extractelement <2 x float> %1530, i64 1, !dbg !132
  %1570 = shufflevector <2 x float> %1530, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !135
  %1571 = insertelement <4 x float> %1570, float %1533, i64 0, !dbg !135
  %1572 = shufflevector <16 x float> %1539, <16 x float> poison, <4 x i32> <i32 poison, i32 14, i32 10, i32 poison>, !dbg !135
  %1573 = shufflevector <4 x float> %1571, <4 x float> %1572, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !135
  %1574 = fcmp ogt <4 x float> %1394, %1573, !dbg !135
  %1575 = shufflevector <2 x float> %1530, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !135
  %1576 = insertelement <4 x float> %1575, float %1534, i64 0, !dbg !135
  %1577 = shufflevector <16 x float> %1539, <16 x float> poison, <4 x i32> <i32 poison, i32 15, i32 11, i32 poison>, !dbg !135
  %1578 = shufflevector <4 x float> %1576, <4 x float> %1577, <4 x i32> <i32 0, i32 5, i32 6, i32 3>, !dbg !135
  %1579 = fcmp ogt <4 x float> %1395, %1578, !dbg !135
  %1580 = or <4 x i1> %1454, %1574, !dbg !136
  %1581 = or <4 x i1> %1455, %1579, !dbg !136
  %1582 = select <4 x i1> %1580, <4 x float> %1394, <4 x float> %1573, !dbg !137
  %1583 = select <4 x i1> %1581, <4 x float> %1395, <4 x float> %1578, !dbg !137
  %1584 = select <4 x i1> %1566, <4 x float> %1582, <4 x float> %1394, !dbg !138
  %1585 = select <4 x i1> %1566, <4 x float> %1583, <4 x float> %1395, !dbg !138
  %1586 = insertelement <16 x i1> poison, i1 %1415, i64 0, !dbg !138
  %1587 = shufflevector <16 x i1> %1586, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !138
  %1588 = select <16 x i1> %1587, <16 x float> %1562, <16 x float> %1396, !dbg !138
  %1589 = sext i32 %1409 to i64, !dbg !139
  %1590 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1589, !dbg !139
  %1591 = sext i32 %1410 to i64, !dbg !139
  %1592 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1591, !dbg !139
  %1593 = fptrunc float %1568 to bfloat, !dbg !132
  %1594 = fptrunc float %1569 to bfloat, !dbg !132
  %1595 = extractelement <16 x float> %1539, i64 0, !dbg !132
  %1596 = fptrunc float %1595 to bfloat, !dbg !132
  %1597 = extractelement <16 x float> %1539, i64 1, !dbg !132
  %1598 = fptrunc float %1597 to bfloat, !dbg !132
  %1599 = extractelement <16 x float> %1539, i64 10, !dbg !132
  %1600 = fptrunc float %1599 to bfloat, !dbg !132
  %1601 = extractelement <16 x float> %1539, i64 11, !dbg !132
  %1602 = fptrunc float %1601 to bfloat, !dbg !132
  %1603 = extractelement <16 x float> %1539, i64 2, !dbg !132
  %1604 = fptrunc float %1603 to bfloat, !dbg !132
  %1605 = extractelement <16 x float> %1539, i64 3, !dbg !132
  %1606 = fptrunc float %1605 to bfloat, !dbg !132
  %1607 = extractelement <16 x float> %1539, i64 14, !dbg !132
  %1608 = fptrunc float %1607 to bfloat, !dbg !132
  %1609 = extractelement <16 x float> %1539, i64 15, !dbg !132
  %1610 = fptrunc float %1609 to bfloat, !dbg !132
  %1611 = fptrunc float %1541 to bfloat, !dbg !132
  %1612 = fptrunc float %1542 to bfloat, !dbg !132
  %1613 = fptrunc float %1533 to bfloat, !dbg !132
  %1614 = fptrunc float %1534 to bfloat, !dbg !132
  %1615 = fptrunc float %1545 to bfloat, !dbg !132
  %1616 = fptrunc float %1546 to bfloat, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %1617 = bitcast bfloat %1593 to i16, !dbg !132
  %1618 = bitcast bfloat %1594 to i16, !dbg !132
  %1619 = bitcast bfloat %1596 to i16, !dbg !132
  %1620 = bitcast bfloat %1598 to i16, !dbg !132
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %102, i16 %1617, i16 %1618, i16 %1619, i16 %1620, i1 true) #5, !dbg !132
  %1621 = bitcast bfloat %1600 to i16, !dbg !132
  %1622 = bitcast bfloat %1602 to i16, !dbg !132
  %1623 = bitcast bfloat %1604 to i16, !dbg !132
  %1624 = bitcast bfloat %1606 to i16, !dbg !132
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %103, i16 %1621, i16 %1622, i16 %1623, i16 %1624, i1 true) #5, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %1625 = load <4 x i32>, ptr addrspace(3) %1374, align 16, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %1626 = bitcast bfloat %1608 to i16, !dbg !132
  %1627 = bitcast bfloat %1610 to i16, !dbg !132
  %1628 = bitcast bfloat %1611 to i16, !dbg !132
  %1629 = bitcast bfloat %1612 to i16, !dbg !132
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %102, i16 %1626, i16 %1627, i16 %1628, i16 %1629, i1 true) #5, !dbg !132
  %1630 = bitcast bfloat %1613 to i16, !dbg !132
  %1631 = bitcast bfloat %1614 to i16, !dbg !132
  %1632 = bitcast bfloat %1615 to i16, !dbg !132
  %1633 = bitcast bfloat %1616 to i16, !dbg !132
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %103, i16 %1630, i16 %1631, i16 %1632, i16 %1633, i1 true) #5, !dbg !132
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %1634 = load <4 x i32>, ptr addrspace(3) %1374, align 16, !dbg !132
  %.extract = extractelement <4 x i32> %1625, i64 0, !dbg !132
  %.extract210 = extractelement <4 x i32> %1625, i64 1, !dbg !132
  %.extract212 = extractelement <4 x i32> %1625, i64 2, !dbg !132
  %.extract214 = extractelement <4 x i32> %1625, i64 3, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract210, i32 %.extract212, i32 %.extract214, ptr addrspace(1) %1590, i1 %1417) #5, !dbg !132
  %.extract216 = extractelement <4 x i32> %1634, i64 0, !dbg !132
  %.extract218 = extractelement <4 x i32> %1634, i64 1, !dbg !132
  %.extract220 = extractelement <4 x i32> %1634, i64 2, !dbg !132
  %.extract222 = extractelement <4 x i32> %1634, i64 3, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract216, i32 %.extract218, i32 %.extract220, i32 %.extract222, ptr addrspace(1) %1592, i1 %1418) #5, !dbg !132
  br i1 %1390, label %1389, label %1635, !dbg !101

1635:                                             ; preds = %1389
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1636 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1557, <2 x i32> <i32 0, i32 2>, !dbg !142
  %1637 = fcmp olt <2 x float> %1636, %1557, !dbg !142
  %1638 = fcmp uno <2 x float> %1636, %1557, !dbg !142
  %shift = shufflevector <2 x i1> %1637, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !143
  %1639 = or <2 x i1> %shift, %1638, !dbg !143
  %1640 = extractelement <2 x i1> %1639, i64 0, !dbg !143
  %1641 = extractelement <2 x float> %1557, i64 0, !dbg !144
  %1642 = extractelement <2 x float> %1557, i64 1, !dbg !144
  %1643 = select i1 %1640, float %1641, float %1642, !dbg !144
  %1644 = extractelement <16 x float> %1588, i64 8, !dbg !142
  %1645 = fcmp olt float %1643, %1644, !dbg !142
  %1646 = fcmp uno float %1643, 0.000000e+00, !dbg !145
  %1647 = or i1 %1645, %1646, !dbg !143
  %1648 = select i1 %1647, float %1643, float %1644, !dbg !144
  %1649 = extractelement <16 x float> %1588, i64 9, !dbg !142
  %1650 = fcmp olt float %1648, %1649, !dbg !142
  %1651 = fcmp uno float %1648, 0.000000e+00, !dbg !145
  %1652 = or i1 %1650, %1651, !dbg !143
  %1653 = select i1 %1652, float %1648, float %1649, !dbg !144
  %1654 = extractelement <16 x float> %1588, i64 10, !dbg !142
  %1655 = extractelement <16 x float> %1588, i64 11, !dbg !142
  %1656 = fcmp olt float %1654, %1655, !dbg !142
  %1657 = fcmp uno float %1654, 0.000000e+00, !dbg !145
  %1658 = or i1 %1656, %1657, !dbg !143
  %1659 = select i1 %1658, float %1654, float %1655, !dbg !144
  %1660 = extractelement <16 x float> %1588, i64 12, !dbg !142
  %1661 = fcmp olt float %1659, %1660, !dbg !142
  %1662 = fcmp uno float %1659, 0.000000e+00, !dbg !145
  %1663 = or i1 %1661, %1662, !dbg !143
  %1664 = select i1 %1663, float %1659, float %1660, !dbg !144
  %1665 = extractelement <16 x float> %1588, i64 13, !dbg !142
  %1666 = fcmp olt float %1664, %1665, !dbg !142
  %1667 = fcmp uno float %1664, 0.000000e+00, !dbg !145
  %1668 = or i1 %1666, %1667, !dbg !143
  %1669 = select i1 %1668, float %1664, float %1665, !dbg !144
  %1670 = extractelement <16 x float> %1588, i64 14, !dbg !142
  %1671 = extractelement <16 x float> %1588, i64 15, !dbg !142
  %1672 = fcmp olt float %1670, %1671, !dbg !142
  %1673 = fcmp uno float %1670, 0.000000e+00, !dbg !145
  %1674 = or i1 %1672, %1673, !dbg !143
  %1675 = select i1 %1674, float %1670, float %1671, !dbg !144
  %1676 = extractelement <4 x float> %1567, i64 0, !dbg !142
  %1677 = fcmp olt float %1675, %1676, !dbg !142
  %1678 = fcmp uno float %1675, 0.000000e+00, !dbg !145
  %1679 = or i1 %1677, %1678, !dbg !143
  %1680 = select i1 %1679, float %1675, float %1676, !dbg !144
  %1681 = extractelement <4 x float> %1567, i64 1, !dbg !142
  %1682 = fcmp olt float %1680, %1681, !dbg !142
  %1683 = fcmp uno float %1680, 0.000000e+00, !dbg !145
  %1684 = or i1 %1682, %1683, !dbg !143
  %1685 = select i1 %1684, float %1680, float %1681, !dbg !144
  %1686 = fcmp olt float %1563, %1564, !dbg !142
  %1687 = fcmp uno float %1563, 0.000000e+00, !dbg !145
  %1688 = or i1 %1686, %1687, !dbg !143
  %1689 = select i1 %1688, float %1563, float %1564, !dbg !144
  %1690 = extractelement <4 x float> %1567, i64 2, !dbg !142
  %1691 = fcmp olt float %1689, %1690, !dbg !142
  %1692 = fcmp uno float %1689, 0.000000e+00, !dbg !145
  %1693 = or i1 %1691, %1692, !dbg !143
  %1694 = select i1 %1693, float %1689, float %1690, !dbg !144
  %1695 = extractelement <4 x float> %1567, i64 3, !dbg !142
  %1696 = fcmp olt float %1694, %1695, !dbg !142
  %1697 = fcmp uno float %1694, 0.000000e+00, !dbg !145
  %1698 = or i1 %1696, %1697, !dbg !143
  %1699 = select i1 %1698, float %1694, float %1695, !dbg !144
  %1700 = bitcast float %1653 to i32, !dbg !140
  %1701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1700, i32 16, i32 31), !dbg !140
  %1702 = bitcast i32 %1701 to float, !dbg !140
  %1703 = fcmp olt float %1653, %1702, !dbg !142
  %1704 = fcmp uno float %1653, 0.000000e+00, !dbg !145
  %1705 = or i1 %1704, %1703, !dbg !143
  %1706 = select i1 %1705, float %1653, float %1702, !dbg !144
  %1707 = bitcast float %1706 to i32, !dbg !140
  %1708 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1707, i32 8, i32 31), !dbg !140
  %1709 = bitcast i32 %1708 to float, !dbg !140
  %1710 = fcmp olt float %1706, %1709, !dbg !142
  %1711 = fcmp uno float %1706, 0.000000e+00, !dbg !145
  %1712 = or i1 %1710, %1711, !dbg !143
  %1713 = select i1 %1712, float %1706, float %1709, !dbg !144
  %1714 = bitcast float %1713 to i32, !dbg !140
  %1715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1714, i32 4, i32 31), !dbg !140
  %1716 = bitcast i32 %1715 to float, !dbg !140
  %1717 = fcmp olt float %1713, %1716, !dbg !142
  %1718 = fcmp uno float %1713, 0.000000e+00, !dbg !145
  %1719 = or i1 %1717, %1718, !dbg !143
  %1720 = select i1 %1719, float %1713, float %1716, !dbg !144
  %1721 = bitcast float %1720 to i32, !dbg !140
  %1722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1721, i32 2, i32 31), !dbg !140
  %1723 = bitcast i32 %1722 to float, !dbg !140
  %1724 = fcmp olt float %1720, %1723, !dbg !142
  %1725 = fcmp uno float %1720, 0.000000e+00, !dbg !145
  %1726 = or i1 %1724, %1725, !dbg !143
  %1727 = select i1 %1726, float %1720, float %1723, !dbg !144
  %1728 = bitcast float %1727 to i32, !dbg !140
  %1729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1728, i32 1, i32 31), !dbg !140
  %1730 = bitcast i32 %1729 to float, !dbg !140
  %1731 = fcmp olt float %1727, %1730, !dbg !142
  %1732 = fcmp uno float %1727, 0.000000e+00, !dbg !145
  %1733 = or i1 %1731, %1732, !dbg !143
  %1734 = bitcast float %1669 to i32, !dbg !140
  %1735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1734, i32 16, i32 31), !dbg !140
  %1736 = bitcast i32 %1735 to float, !dbg !140
  %1737 = fcmp olt float %1669, %1736, !dbg !142
  %1738 = fcmp uno float %1669, 0.000000e+00, !dbg !145
  %1739 = or i1 %1738, %1737, !dbg !143
  %1740 = select i1 %1739, float %1669, float %1736, !dbg !144
  %1741 = bitcast float %1740 to i32, !dbg !140
  %1742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1741, i32 8, i32 31), !dbg !140
  %1743 = bitcast i32 %1742 to float, !dbg !140
  %1744 = fcmp olt float %1740, %1743, !dbg !142
  %1745 = fcmp uno float %1740, 0.000000e+00, !dbg !145
  %1746 = or i1 %1744, %1745, !dbg !143
  %1747 = select i1 %1746, float %1740, float %1743, !dbg !144
  %1748 = bitcast float %1747 to i32, !dbg !140
  %1749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1748, i32 4, i32 31), !dbg !140
  %1750 = bitcast i32 %1749 to float, !dbg !140
  %1751 = fcmp olt float %1747, %1750, !dbg !142
  %1752 = fcmp uno float %1747, 0.000000e+00, !dbg !145
  %1753 = or i1 %1751, %1752, !dbg !143
  %1754 = select i1 %1753, float %1747, float %1750, !dbg !144
  %1755 = bitcast float %1754 to i32, !dbg !140
  %1756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1755, i32 2, i32 31), !dbg !140
  %1757 = bitcast i32 %1756 to float, !dbg !140
  %1758 = fcmp olt float %1754, %1757, !dbg !142
  %1759 = fcmp uno float %1754, 0.000000e+00, !dbg !145
  %1760 = or i1 %1758, %1759, !dbg !143
  %1761 = select i1 %1760, float %1754, float %1757, !dbg !144
  %1762 = bitcast float %1761 to i32, !dbg !140
  %1763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1762, i32 1, i32 31), !dbg !140
  %1764 = bitcast i32 %1763 to float, !dbg !140
  %1765 = fcmp olt float %1761, %1764, !dbg !142
  %1766 = fcmp uno float %1761, 0.000000e+00, !dbg !145
  %1767 = or i1 %1765, %1766, !dbg !143
  %1768 = bitcast float %1685 to i32, !dbg !140
  %1769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1768, i32 16, i32 31), !dbg !140
  %1770 = bitcast i32 %1769 to float, !dbg !140
  %1771 = fcmp olt float %1685, %1770, !dbg !142
  %1772 = fcmp uno float %1685, 0.000000e+00, !dbg !145
  %1773 = or i1 %1772, %1771, !dbg !143
  %1774 = select i1 %1773, float %1685, float %1770, !dbg !144
  %1775 = bitcast float %1774 to i32, !dbg !140
  %1776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1775, i32 8, i32 31), !dbg !140
  %1777 = bitcast i32 %1776 to float, !dbg !140
  %1778 = fcmp olt float %1774, %1777, !dbg !142
  %1779 = fcmp uno float %1774, 0.000000e+00, !dbg !145
  %1780 = or i1 %1778, %1779, !dbg !143
  %1781 = select i1 %1780, float %1774, float %1777, !dbg !144
  %1782 = bitcast float %1781 to i32, !dbg !140
  %1783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1782, i32 4, i32 31), !dbg !140
  %1784 = bitcast i32 %1783 to float, !dbg !140
  %1785 = fcmp olt float %1781, %1784, !dbg !142
  %1786 = fcmp uno float %1781, 0.000000e+00, !dbg !145
  %1787 = or i1 %1785, %1786, !dbg !143
  %1788 = select i1 %1787, float %1781, float %1784, !dbg !144
  %1789 = bitcast float %1788 to i32, !dbg !140
  %1790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1789, i32 2, i32 31), !dbg !140
  %1791 = bitcast i32 %1790 to float, !dbg !140
  %1792 = fcmp olt float %1788, %1791, !dbg !142
  %1793 = fcmp uno float %1788, 0.000000e+00, !dbg !145
  %1794 = or i1 %1792, %1793, !dbg !143
  %1795 = select i1 %1794, float %1788, float %1791, !dbg !144
  %1796 = bitcast float %1795 to i32, !dbg !140
  %1797 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1796, i32 1, i32 31), !dbg !140
  %1798 = bitcast i32 %1797 to float, !dbg !140
  %1799 = fcmp olt float %1795, %1798, !dbg !142
  %1800 = fcmp uno float %1795, 0.000000e+00, !dbg !145
  %1801 = or i1 %1799, %1800, !dbg !143
  %1802 = bitcast float %1699 to i32, !dbg !140
  %1803 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1802, i32 16, i32 31), !dbg !140
  %1804 = bitcast i32 %1803 to float, !dbg !140
  %1805 = fcmp olt float %1699, %1804, !dbg !142
  %1806 = fcmp uno float %1699, 0.000000e+00, !dbg !145
  %1807 = or i1 %1806, %1805, !dbg !143
  %1808 = select i1 %1807, float %1699, float %1804, !dbg !144
  %1809 = bitcast float %1808 to i32, !dbg !140
  %1810 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1809, i32 8, i32 31), !dbg !140
  %1811 = bitcast i32 %1810 to float, !dbg !140
  %1812 = fcmp olt float %1808, %1811, !dbg !142
  %1813 = fcmp uno float %1808, 0.000000e+00, !dbg !145
  %1814 = or i1 %1812, %1813, !dbg !143
  %1815 = select i1 %1814, float %1808, float %1811, !dbg !144
  %1816 = bitcast float %1815 to i32, !dbg !140
  %1817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1816, i32 4, i32 31), !dbg !140
  %1818 = bitcast i32 %1817 to float, !dbg !140
  %1819 = fcmp olt float %1815, %1818, !dbg !142
  %1820 = fcmp uno float %1815, 0.000000e+00, !dbg !145
  %1821 = or i1 %1819, %1820, !dbg !143
  %1822 = select i1 %1821, float %1815, float %1818, !dbg !144
  %1823 = bitcast float %1822 to i32, !dbg !140
  %1824 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1823, i32 2, i32 31), !dbg !140
  %1825 = bitcast i32 %1824 to float, !dbg !140
  %1826 = fcmp olt float %1822, %1825, !dbg !142
  %1827 = fcmp uno float %1822, 0.000000e+00, !dbg !145
  %1828 = or i1 %1826, %1827, !dbg !143
  %1829 = select i1 %1828, float %1822, float %1825, !dbg !144
  %1830 = bitcast float %1829 to i32, !dbg !140
  %1831 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1830, i32 1, i32 31), !dbg !140
  %1832 = bitcast i32 %1831 to float, !dbg !140
  %1833 = fcmp olt float %1829, %1832, !dbg !142
  %1834 = fcmp uno float %1829, 0.000000e+00, !dbg !145
  %1835 = or i1 %1833, %1834, !dbg !143
  %1836 = select i1 %1733, i32 %1728, i32 %1729, !dbg !144
  %1837 = insertelement <1 x i32> poison, i32 %1836, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %1837, i1 %1192) #5, !dbg !140
  %1838 = select i1 %1767, i32 %1762, i32 %1763, !dbg !144
  %1839 = insertelement <1 x i32> poison, i32 %1838, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1200, <1 x i32> %1839, i1 %1192) #5, !dbg !140
  %1840 = select i1 %1801, i32 %1796, i32 %1797, !dbg !144
  %1841 = insertelement <1 x i32> poison, i32 %1840, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1207, <1 x i32> %1841, i1 %1192) #5, !dbg !140
  %1842 = select i1 %1835, i32 %1830, i32 %1831, !dbg !144
  %1843 = insertelement <1 x i32> poison, i32 %1842, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1214, <1 x i32> %1843, i1 %1192) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1844 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1221, i1 %1220) #5, !dbg !140
  %1845 = bitcast i32 %1844 to float, !dbg !140
  %1846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1844, i32 8, i32 31), !dbg !140
  %1847 = bitcast i32 %1846 to float, !dbg !140
  %1848 = fcmp olt float %1845, %1847, !dbg !142
  %1849 = fcmp uno float %1845, 0.000000e+00, !dbg !145
  %1850 = or i1 %1849, %1848, !dbg !143
  %1851 = select i1 %1850, float %1845, float %1847, !dbg !144
  %1852 = bitcast float %1851 to i32, !dbg !140
  %1853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1852, i32 4, i32 31), !dbg !140
  %1854 = bitcast i32 %1853 to float, !dbg !140
  %1855 = fcmp olt float %1851, %1854, !dbg !142
  %1856 = fcmp uno float %1851, 0.000000e+00, !dbg !145
  %1857 = or i1 %1855, %1856, !dbg !143
  %1858 = select i1 %1857, float %1851, float %1854, !dbg !144
  %1859 = bitcast float %1858 to i32, !dbg !140
  %1860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1859, i32 2, i32 31), !dbg !140
  %1861 = bitcast i32 %1860 to float, !dbg !140
  %1862 = fcmp olt float %1858, %1861, !dbg !142
  %1863 = fcmp uno float %1858, 0.000000e+00, !dbg !145
  %1864 = or i1 %1862, %1863, !dbg !143
  %1865 = select i1 %1864, float %1858, float %1861, !dbg !144
  %1866 = bitcast float %1865 to i32, !dbg !140
  %1867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1866, i32 1, i32 31), !dbg !140
  %1868 = bitcast i32 %1867 to float, !dbg !140
  %1869 = fcmp olt float %1865, %1868, !dbg !142
  %1870 = fcmp uno float %1865, 0.000000e+00, !dbg !145
  %1871 = or i1 %1869, %1870, !dbg !143
  %1872 = select i1 %1871, i32 %1866, i32 %1867, !dbg !144
  %1873 = insertelement <1 x i32> poison, i32 %1872, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1221, <1 x i32> %1873, i1 %1313) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1874 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %1875 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !140
  %1876 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !140
  %1877 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1878 = bitcast float %1874 to i32, !dbg !146
  %1879 = bitcast float %1875 to i32, !dbg !146
  %1880 = bitcast float %1876 to i32, !dbg !146
  %1881 = bitcast float %1877 to i32, !dbg !146
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i1 true) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1882 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %608, !dbg !146
  %1883 = load float, ptr addrspace(3) %1882, align 4, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1884 = fcmp ogt <4 x float> %1584, %1585, !dbg !149
  %1885 = extractelement <4 x float> %1584, i64 3, !dbg !150
  %1886 = fcmp uno float %1885, 0.000000e+00, !dbg !150
  %1887 = extractelement <4 x i1> %1884, i64 3, !dbg !151
  %1888 = or i1 %1887, %1886, !dbg !151
  %1889 = extractelement <4 x float> %1585, i64 3, !dbg !152
  %1890 = select i1 %1888, float %1885, float %1889, !dbg !152
  %1891 = extractelement <16 x float> %1588, i64 0, !dbg !149
  %1892 = fcmp ogt float %1890, %1891, !dbg !149
  %1893 = fcmp uno float %1890, 0.000000e+00, !dbg !150
  %1894 = or i1 %1892, %1893, !dbg !151
  %1895 = select i1 %1894, float %1890, float %1891, !dbg !152
  %1896 = extractelement <16 x float> %1588, i64 1, !dbg !149
  %1897 = fcmp ogt float %1895, %1896, !dbg !149
  %1898 = fcmp uno float %1895, 0.000000e+00, !dbg !150
  %1899 = or i1 %1897, %1898, !dbg !151
  %1900 = select i1 %1899, float %1895, float %1896, !dbg !152
  %1901 = extractelement <4 x float> %1584, i64 2, !dbg !150
  %1902 = fcmp uno float %1901, 0.000000e+00, !dbg !150
  %1903 = extractelement <4 x i1> %1884, i64 2, !dbg !151
  %1904 = or i1 %1903, %1902, !dbg !151
  %1905 = extractelement <4 x float> %1585, i64 2, !dbg !152
  %1906 = select i1 %1904, float %1901, float %1905, !dbg !152
  %1907 = extractelement <16 x float> %1588, i64 2, !dbg !149
  %1908 = fcmp ogt float %1906, %1907, !dbg !149
  %1909 = fcmp uno float %1906, 0.000000e+00, !dbg !150
  %1910 = or i1 %1908, %1909, !dbg !151
  %1911 = select i1 %1910, float %1906, float %1907, !dbg !152
  %1912 = extractelement <16 x float> %1588, i64 3, !dbg !149
  %1913 = fcmp ogt float %1911, %1912, !dbg !149
  %1914 = fcmp uno float %1911, 0.000000e+00, !dbg !150
  %1915 = or i1 %1913, %1914, !dbg !151
  %1916 = select i1 %1915, float %1911, float %1912, !dbg !152
  %1917 = extractelement <4 x float> %1584, i64 1, !dbg !150
  %1918 = fcmp uno float %1917, 0.000000e+00, !dbg !150
  %1919 = extractelement <4 x i1> %1884, i64 1, !dbg !151
  %1920 = or i1 %1919, %1918, !dbg !151
  %1921 = extractelement <4 x float> %1585, i64 1, !dbg !152
  %1922 = select i1 %1920, float %1917, float %1921, !dbg !152
  %1923 = extractelement <16 x float> %1588, i64 4, !dbg !149
  %1924 = fcmp ogt float %1922, %1923, !dbg !149
  %1925 = fcmp uno float %1922, 0.000000e+00, !dbg !150
  %1926 = or i1 %1924, %1925, !dbg !151
  %1927 = select i1 %1926, float %1922, float %1923, !dbg !152
  %1928 = extractelement <16 x float> %1588, i64 5, !dbg !149
  %1929 = fcmp ogt float %1927, %1928, !dbg !149
  %1930 = fcmp uno float %1927, 0.000000e+00, !dbg !150
  %1931 = or i1 %1929, %1930, !dbg !151
  %1932 = select i1 %1931, float %1927, float %1928, !dbg !152
  %1933 = extractelement <4 x float> %1584, i64 0, !dbg !150
  %1934 = fcmp uno float %1933, 0.000000e+00, !dbg !150
  %1935 = extractelement <4 x i1> %1884, i64 0, !dbg !151
  %1936 = or i1 %1935, %1934, !dbg !151
  %1937 = extractelement <4 x float> %1585, i64 0, !dbg !152
  %1938 = select i1 %1936, float %1933, float %1937, !dbg !152
  %1939 = extractelement <16 x float> %1588, i64 6, !dbg !149
  %1940 = fcmp ogt float %1938, %1939, !dbg !149
  %1941 = fcmp uno float %1938, 0.000000e+00, !dbg !150
  %1942 = or i1 %1940, %1941, !dbg !151
  %1943 = select i1 %1942, float %1938, float %1939, !dbg !152
  %1944 = extractelement <16 x float> %1588, i64 7, !dbg !149
  %1945 = fcmp ogt float %1943, %1944, !dbg !149
  %1946 = fcmp uno float %1943, 0.000000e+00, !dbg !150
  %1947 = or i1 %1945, %1946, !dbg !151
  %1948 = select i1 %1947, float %1943, float %1944, !dbg !152
  %1949 = bitcast float %1900 to i32, !dbg !147
  %1950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1949, i32 16, i32 31), !dbg !147
  %1951 = bitcast i32 %1950 to float, !dbg !147
  %1952 = fcmp ogt float %1900, %1951, !dbg !149
  %1953 = fcmp uno float %1900, 0.000000e+00, !dbg !150
  %1954 = or i1 %1953, %1952, !dbg !151
  %1955 = select i1 %1954, float %1900, float %1951, !dbg !152
  %1956 = bitcast float %1955 to i32, !dbg !147
  %1957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1956, i32 8, i32 31), !dbg !147
  %1958 = bitcast i32 %1957 to float, !dbg !147
  %1959 = fcmp ogt float %1955, %1958, !dbg !149
  %1960 = fcmp uno float %1955, 0.000000e+00, !dbg !150
  %1961 = or i1 %1959, %1960, !dbg !151
  %1962 = select i1 %1961, float %1955, float %1958, !dbg !152
  %1963 = bitcast float %1962 to i32, !dbg !147
  %1964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1963, i32 4, i32 31), !dbg !147
  %1965 = bitcast i32 %1964 to float, !dbg !147
  %1966 = fcmp ogt float %1962, %1965, !dbg !149
  %1967 = fcmp uno float %1962, 0.000000e+00, !dbg !150
  %1968 = or i1 %1966, %1967, !dbg !151
  %1969 = select i1 %1968, float %1962, float %1965, !dbg !152
  %1970 = bitcast float %1969 to i32, !dbg !147
  %1971 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1970, i32 2, i32 31), !dbg !147
  %1972 = bitcast i32 %1971 to float, !dbg !147
  %1973 = fcmp ogt float %1969, %1972, !dbg !149
  %1974 = fcmp uno float %1969, 0.000000e+00, !dbg !150
  %1975 = or i1 %1973, %1974, !dbg !151
  %1976 = select i1 %1975, float %1969, float %1972, !dbg !152
  %1977 = bitcast float %1976 to i32, !dbg !147
  %1978 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1977, i32 1, i32 31), !dbg !147
  %1979 = bitcast i32 %1978 to float, !dbg !147
  %1980 = fcmp ogt float %1976, %1979, !dbg !149
  %1981 = fcmp uno float %1976, 0.000000e+00, !dbg !150
  %1982 = or i1 %1980, %1981, !dbg !151
  %1983 = bitcast float %1916 to i32, !dbg !147
  %1984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1983, i32 16, i32 31), !dbg !147
  %1985 = bitcast i32 %1984 to float, !dbg !147
  %1986 = fcmp ogt float %1916, %1985, !dbg !149
  %1987 = fcmp uno float %1916, 0.000000e+00, !dbg !150
  %1988 = or i1 %1987, %1986, !dbg !151
  %1989 = select i1 %1988, float %1916, float %1985, !dbg !152
  %1990 = bitcast float %1989 to i32, !dbg !147
  %1991 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1990, i32 8, i32 31), !dbg !147
  %1992 = bitcast i32 %1991 to float, !dbg !147
  %1993 = fcmp ogt float %1989, %1992, !dbg !149
  %1994 = fcmp uno float %1989, 0.000000e+00, !dbg !150
  %1995 = or i1 %1993, %1994, !dbg !151
  %1996 = select i1 %1995, float %1989, float %1992, !dbg !152
  %1997 = bitcast float %1996 to i32, !dbg !147
  %1998 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1997, i32 4, i32 31), !dbg !147
  %1999 = bitcast i32 %1998 to float, !dbg !147
  %2000 = fcmp ogt float %1996, %1999, !dbg !149
  %2001 = fcmp uno float %1996, 0.000000e+00, !dbg !150
  %2002 = or i1 %2000, %2001, !dbg !151
  %2003 = select i1 %2002, float %1996, float %1999, !dbg !152
  %2004 = bitcast float %2003 to i32, !dbg !147
  %2005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2004, i32 2, i32 31), !dbg !147
  %2006 = bitcast i32 %2005 to float, !dbg !147
  %2007 = fcmp ogt float %2003, %2006, !dbg !149
  %2008 = fcmp uno float %2003, 0.000000e+00, !dbg !150
  %2009 = or i1 %2007, %2008, !dbg !151
  %2010 = select i1 %2009, float %2003, float %2006, !dbg !152
  %2011 = bitcast float %2010 to i32, !dbg !147
  %2012 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2011, i32 1, i32 31), !dbg !147
  %2013 = bitcast i32 %2012 to float, !dbg !147
  %2014 = fcmp ogt float %2010, %2013, !dbg !149
  %2015 = fcmp uno float %2010, 0.000000e+00, !dbg !150
  %2016 = or i1 %2014, %2015, !dbg !151
  %2017 = bitcast float %1932 to i32, !dbg !147
  %2018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2017, i32 16, i32 31), !dbg !147
  %2019 = bitcast i32 %2018 to float, !dbg !147
  %2020 = fcmp ogt float %1932, %2019, !dbg !149
  %2021 = fcmp uno float %1932, 0.000000e+00, !dbg !150
  %2022 = or i1 %2021, %2020, !dbg !151
  %2023 = select i1 %2022, float %1932, float %2019, !dbg !152
  %2024 = bitcast float %2023 to i32, !dbg !147
  %2025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2024, i32 8, i32 31), !dbg !147
  %2026 = bitcast i32 %2025 to float, !dbg !147
  %2027 = fcmp ogt float %2023, %2026, !dbg !149
  %2028 = fcmp uno float %2023, 0.000000e+00, !dbg !150
  %2029 = or i1 %2027, %2028, !dbg !151
  %2030 = select i1 %2029, float %2023, float %2026, !dbg !152
  %2031 = bitcast float %2030 to i32, !dbg !147
  %2032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2031, i32 4, i32 31), !dbg !147
  %2033 = bitcast i32 %2032 to float, !dbg !147
  %2034 = fcmp ogt float %2030, %2033, !dbg !149
  %2035 = fcmp uno float %2030, 0.000000e+00, !dbg !150
  %2036 = or i1 %2034, %2035, !dbg !151
  %2037 = select i1 %2036, float %2030, float %2033, !dbg !152
  %2038 = bitcast float %2037 to i32, !dbg !147
  %2039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2038, i32 2, i32 31), !dbg !147
  %2040 = bitcast i32 %2039 to float, !dbg !147
  %2041 = fcmp ogt float %2037, %2040, !dbg !149
  %2042 = fcmp uno float %2037, 0.000000e+00, !dbg !150
  %2043 = or i1 %2041, %2042, !dbg !151
  %2044 = select i1 %2043, float %2037, float %2040, !dbg !152
  %2045 = bitcast float %2044 to i32, !dbg !147
  %2046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2045, i32 1, i32 31), !dbg !147
  %2047 = bitcast i32 %2046 to float, !dbg !147
  %2048 = fcmp ogt float %2044, %2047, !dbg !149
  %2049 = fcmp uno float %2044, 0.000000e+00, !dbg !150
  %2050 = or i1 %2048, %2049, !dbg !151
  %2051 = bitcast float %1948 to i32, !dbg !147
  %2052 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2051, i32 16, i32 31), !dbg !147
  %2053 = bitcast i32 %2052 to float, !dbg !147
  %2054 = fcmp ogt float %1948, %2053, !dbg !149
  %2055 = fcmp uno float %1948, 0.000000e+00, !dbg !150
  %2056 = or i1 %2055, %2054, !dbg !151
  %2057 = select i1 %2056, float %1948, float %2053, !dbg !152
  %2058 = bitcast float %2057 to i32, !dbg !147
  %2059 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2058, i32 8, i32 31), !dbg !147
  %2060 = bitcast i32 %2059 to float, !dbg !147
  %2061 = fcmp ogt float %2057, %2060, !dbg !149
  %2062 = fcmp uno float %2057, 0.000000e+00, !dbg !150
  %2063 = or i1 %2061, %2062, !dbg !151
  %2064 = select i1 %2063, float %2057, float %2060, !dbg !152
  %2065 = bitcast float %2064 to i32, !dbg !147
  %2066 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2065, i32 4, i32 31), !dbg !147
  %2067 = bitcast i32 %2066 to float, !dbg !147
  %2068 = fcmp ogt float %2064, %2067, !dbg !149
  %2069 = fcmp uno float %2064, 0.000000e+00, !dbg !150
  %2070 = or i1 %2068, %2069, !dbg !151
  %2071 = select i1 %2070, float %2064, float %2067, !dbg !152
  %2072 = bitcast float %2071 to i32, !dbg !147
  %2073 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2072, i32 2, i32 31), !dbg !147
  %2074 = bitcast i32 %2073 to float, !dbg !147
  %2075 = fcmp ogt float %2071, %2074, !dbg !149
  %2076 = fcmp uno float %2071, 0.000000e+00, !dbg !150
  %2077 = or i1 %2075, %2076, !dbg !151
  %2078 = select i1 %2077, float %2071, float %2074, !dbg !152
  %2079 = bitcast float %2078 to i32, !dbg !147
  %2080 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2079, i32 1, i32 31), !dbg !147
  %2081 = bitcast i32 %2080 to float, !dbg !147
  %2082 = fcmp ogt float %2078, %2081, !dbg !149
  %2083 = fcmp uno float %2078, 0.000000e+00, !dbg !150
  %2084 = or i1 %2082, %2083, !dbg !151
  %2085 = select i1 %1982, i32 %1977, i32 %1978, !dbg !152
  %2086 = insertelement <1 x i32> poison, i32 %2085, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1193, <1 x i32> %2086, i1 %1192) #5, !dbg !147
  %2087 = select i1 %2016, i32 %2011, i32 %2012, !dbg !152
  %2088 = insertelement <1 x i32> poison, i32 %2087, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1200, <1 x i32> %2088, i1 %1192) #5, !dbg !147
  %2089 = select i1 %2050, i32 %2045, i32 %2046, !dbg !152
  %2090 = insertelement <1 x i32> poison, i32 %2089, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1207, <1 x i32> %2090, i1 %1192) #5, !dbg !147
  %2091 = select i1 %2084, i32 %2079, i32 %2080, !dbg !152
  %2092 = insertelement <1 x i32> poison, i32 %2091, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1214, <1 x i32> %2092, i1 %1192) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %2093 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1221, i1 %1220) #5, !dbg !147
  %2094 = bitcast i32 %2093 to float, !dbg !147
  %2095 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2093, i32 8, i32 31), !dbg !147
  %2096 = bitcast i32 %2095 to float, !dbg !147
  %2097 = fcmp ogt float %2094, %2096, !dbg !149
  %2098 = fcmp uno float %2094, 0.000000e+00, !dbg !150
  %2099 = or i1 %2098, %2097, !dbg !151
  %2100 = select i1 %2099, float %2094, float %2096, !dbg !152
  %2101 = bitcast float %2100 to i32, !dbg !147
  %2102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2101, i32 4, i32 31), !dbg !147
  %2103 = bitcast i32 %2102 to float, !dbg !147
  %2104 = fcmp ogt float %2100, %2103, !dbg !149
  %2105 = fcmp uno float %2100, 0.000000e+00, !dbg !150
  %2106 = or i1 %2104, %2105, !dbg !151
  %2107 = select i1 %2106, float %2100, float %2103, !dbg !152
  %2108 = bitcast float %2107 to i32, !dbg !147
  %2109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2108, i32 2, i32 31), !dbg !147
  %2110 = bitcast i32 %2109 to float, !dbg !147
  %2111 = fcmp ogt float %2107, %2110, !dbg !149
  %2112 = fcmp uno float %2107, 0.000000e+00, !dbg !150
  %2113 = or i1 %2111, %2112, !dbg !151
  %2114 = select i1 %2113, float %2107, float %2110, !dbg !152
  %2115 = bitcast float %2114 to i32, !dbg !147
  %2116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2115, i32 1, i32 31), !dbg !147
  %2117 = bitcast i32 %2116 to float, !dbg !147
  %2118 = fcmp ogt float %2114, %2117, !dbg !149
  %2119 = fcmp uno float %2114, 0.000000e+00, !dbg !150
  %2120 = or i1 %2118, %2119, !dbg !151
  %2121 = select i1 %2120, i32 %2115, i32 %2116, !dbg !152
  %2122 = insertelement <1 x i32> poison, i32 %2121, i64 0, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1221, <1 x i32> %2122, i1 %1313) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %2123 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !147
  %2124 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !147
  %2125 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !147
  %2126 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %2127 = bitcast float %2123 to i32, !dbg !153
  %2128 = bitcast float %2124 to i32, !dbg !153
  %2129 = bitcast float %2125 to i32, !dbg !153
  %2130 = bitcast float %2126 to i32, !dbg !153
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2127, i32 %2128, i32 %2129, i32 %2130, i1 true) #5, !dbg !153
  tail call void @llvm.nvvm.barrier0(), !dbg !153
  %2131 = load float, ptr addrspace(3) %1882, align 4, !dbg !153
  %2132 = sext i32 %609 to i64, !dbg !154
  %2133 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2132, !dbg !154
  %2134 = fptrunc float %1883 to bfloat, !dbg !146
  %2135 = and i32 %19, 508, !dbg !146
  %2136 = icmp eq i32 %2135, 0, !dbg !146
  %2137 = bitcast bfloat %2134 to i16, !dbg !146
  %2138 = and i1 %2136, %610, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2137, ptr addrspace(1) %2133, i1 %2138) #5, !dbg !146
  %2139 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2132, !dbg !155
  %2140 = fptrunc float %2131 to bfloat, !dbg !153
  %2141 = bitcast bfloat %2140 to i16, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2141, ptr addrspace(1) %2139, i1 %2138) #5, !dbg !153
  %2142 = insertelement <4 x float> poison, float %1877, i64 0, !dbg !156
  %2143 = insertelement <4 x float> %2142, float %1876, i64 1, !dbg !156
  %2144 = insertelement <4 x float> %2143, float %1875, i64 2, !dbg !156
  %2145 = insertelement <4 x float> %2144, float %1874, i64 3, !dbg !156
  %2146 = fcmp oge <4 x float> %2145, zeroinitializer, !dbg !156
  %2147 = select <4 x i1> %2146, <4 x float> zeroinitializer, <4 x float> %2145, !dbg !156
  %2148 = fsub <4 x float> zeroinitializer, %2147, !dbg !158
  %2149 = insertelement <4 x float> poison, float %2126, i64 0, !dbg !159
  %2150 = insertelement <4 x float> %2149, float %2125, i64 1, !dbg !159
  %2151 = insertelement <4 x float> %2150, float %2124, i64 2, !dbg !159
  %2152 = insertelement <4 x float> %2151, float %2123, i64 3, !dbg !159
  %2153 = fcmp ole <4 x float> %2152, zeroinitializer, !dbg !159
  %2154 = select <4 x i1> %2153, <4 x float> zeroinitializer, <4 x float> %2152, !dbg !159
  %2155 = fcmp ogt <4 x float> %2148, %2154, !dbg !161
  %2156 = fcmp uno <4 x float> %2148, zeroinitializer, !dbg !163
  %2157 = or <4 x i1> %2156, %2155, !dbg !164
  %2158 = select <4 x i1> %2157, <4 x float> %2148, <4 x float> %2154, !dbg !165
  %2159 = fmul <4 x float> %2158, splat (float 0x3F80204080000000), !dbg !166
  %2160 = fcmp ogt <4 x float> %2159, splat (float 0x3EE4F8B580000000), !dbg !167
  %2161 = extractelement <4 x float> %2159, i64 3, !dbg !169
  %2162 = fcmp uno float %2161, 0.000000e+00, !dbg !170
  %2163 = extractelement <4 x float> %2159, i64 2, !dbg !169
  %2164 = fcmp uno float %2163, 0.000000e+00, !dbg !170
  %2165 = extractelement <4 x float> %2159, i64 1, !dbg !169
  %2166 = fcmp uno float %2165, 0.000000e+00, !dbg !170
  %2167 = extractelement <4 x float> %2159, i64 0, !dbg !169
  %2168 = fcmp uno float %2167, 0.000000e+00, !dbg !170
  %2169 = extractelement <4 x i1> %2160, i64 3, !dbg !171
  %2170 = or i1 %2169, %2162, !dbg !171
  %2171 = extractelement <4 x i1> %2160, i64 2, !dbg !171
  %2172 = or i1 %2171, %2164, !dbg !171
  %2173 = extractelement <4 x i1> %2160, i64 1, !dbg !171
  %2174 = or i1 %2173, %2166, !dbg !171
  %2175 = extractelement <4 x i1> %2160, i64 0, !dbg !171
  %2176 = or i1 %2175, %2168, !dbg !171
  %2177 = select i1 %2170, float %2161, float 0x3EE4F8B580000000, !dbg !169
  %2178 = select i1 %2172, float %2163, float 0x3EE4F8B580000000, !dbg !169
  %2179 = select i1 %2174, float %2165, float 0x3EE4F8B580000000, !dbg !169
  %2180 = select i1 %2176, float %2167, float 0x3EE4F8B580000000, !dbg !169
  %2181 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2177), !dbg !172
  %2182 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2178), !dbg !172
  %2183 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2179), !dbg !172
  %2184 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2180), !dbg !172
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %2185 = bitcast float %2181 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2185, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2185, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2185, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2185, i1 true) #5, !dbg !173
  %2186 = bitcast float %2182 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2186, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2186, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2186, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2186, i1 true) #5, !dbg !173
  %2187 = bitcast float %2183 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2187, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2187, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2187, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2187, i1 true) #5, !dbg !173
  %2188 = bitcast float %2184 to <1 x i32>, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2188, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2188, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2188, i1 true) #5, !dbg !173
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2188, i1 true) #5, !dbg !173
  tail call void @llvm.nvvm.barrier0(), !dbg !173
  %.idx = shl nuw nsw i32 %21, 3, !dbg !173
  %2189 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !173
  %2190 = load float, ptr addrspace(3) %2189, align 8, !dbg !173
  br label %2191, !dbg !174

2191:                                             ; preds = %1635, %2191
  %2192 = phi i1 [ true, %1635 ], [ false, %2191 ]
  %indvars.iv324 = phi i64 [ 0, %1635 ], [ 2048, %2191 ]
  %2193 = or disjoint i64 %indvars.iv324, %127, !dbg !175
  %2194 = icmp samesign ult i64 %2193, 3072, !dbg !176
  %2195 = trunc nuw nsw i64 %2193 to i32, !dbg !177
  %2196 = add i32 %76, %2195, !dbg !177
  %2197 = trunc nuw nsw i64 %indvars.iv324 to i32, !dbg !177
  %2198 = add i32 %94, %2197, !dbg !177
  %2199 = sext i32 %2196 to i64, !dbg !178
  %2200 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2199, !dbg !178
  %2201 = sext i32 %2198 to i64, !dbg !178
  %2202 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2201, !dbg !178
  %2203 = and i1 %26, %2194, !dbg !179
  %2204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2200, i1 %2203) #5, !dbg !180
  %2205 = extractvalue { i32, i32, i32, i32 } %2204, 0, !dbg !180
  %2206 = bitcast i32 %2205 to <2 x bfloat>, !dbg !180
  %2207 = extractvalue { i32, i32, i32, i32 } %2204, 1, !dbg !180
  %2208 = bitcast i32 %2207 to <2 x bfloat>, !dbg !180
  %2209 = extractvalue { i32, i32, i32, i32 } %2204, 2, !dbg !180
  %2210 = bitcast i32 %2209 to <2 x bfloat>, !dbg !180
  %2211 = extractvalue { i32, i32, i32, i32 } %2204, 3, !dbg !180
  %2212 = bitcast i32 %2211 to <2 x bfloat>, !dbg !180
  %2213 = extractelement <2 x bfloat> %2206, i64 0, !dbg !180
  %2214 = extractelement <2 x bfloat> %2206, i64 1, !dbg !180
  %2215 = extractelement <2 x bfloat> %2208, i64 0, !dbg !180
  %2216 = extractelement <2 x bfloat> %2208, i64 1, !dbg !180
  %2217 = extractelement <2 x bfloat> %2210, i64 0, !dbg !180
  %2218 = extractelement <2 x bfloat> %2210, i64 1, !dbg !180
  %2219 = extractelement <2 x bfloat> %2212, i64 0, !dbg !180
  %2220 = extractelement <2 x bfloat> %2212, i64 1, !dbg !180
  %2221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2202, i1 %2203) #5, !dbg !180
  %2222 = extractvalue { i32, i32, i32, i32 } %2221, 0, !dbg !180
  %2223 = bitcast i32 %2222 to <2 x bfloat>, !dbg !180
  %2224 = extractvalue { i32, i32, i32, i32 } %2221, 1, !dbg !180
  %2225 = bitcast i32 %2224 to <2 x bfloat>, !dbg !180
  %2226 = extractvalue { i32, i32, i32, i32 } %2221, 2, !dbg !180
  %2227 = bitcast i32 %2226 to <2 x bfloat>, !dbg !180
  %2228 = extractvalue { i32, i32, i32, i32 } %2221, 3, !dbg !180
  %2229 = bitcast i32 %2228 to <2 x bfloat>, !dbg !180
  %2230 = extractelement <2 x bfloat> %2223, i64 0, !dbg !180
  %2231 = extractelement <2 x bfloat> %2223, i64 1, !dbg !180
  %2232 = extractelement <2 x bfloat> %2225, i64 0, !dbg !180
  %2233 = extractelement <2 x bfloat> %2225, i64 1, !dbg !180
  %2234 = extractelement <2 x bfloat> %2227, i64 0, !dbg !180
  %2235 = extractelement <2 x bfloat> %2227, i64 1, !dbg !180
  %2236 = extractelement <2 x bfloat> %2229, i64 0, !dbg !180
  %2237 = extractelement <2 x bfloat> %2229, i64 1, !dbg !180
  %2238 = fpext bfloat %2213 to float, !dbg !181
  %2239 = fpext bfloat %2214 to float, !dbg !181
  %2240 = fpext bfloat %2215 to float, !dbg !181
  %2241 = fpext bfloat %2216 to float, !dbg !181
  %2242 = fpext bfloat %2217 to float, !dbg !181
  %2243 = fpext bfloat %2218 to float, !dbg !181
  %2244 = fpext bfloat %2219 to float, !dbg !181
  %2245 = fpext bfloat %2220 to float, !dbg !181
  %2246 = fpext bfloat %2230 to float, !dbg !181
  %2247 = fpext bfloat %2231 to float, !dbg !181
  %2248 = fpext bfloat %2232 to float, !dbg !181
  %2249 = fpext bfloat %2233 to float, !dbg !181
  %2250 = fpext bfloat %2234 to float, !dbg !181
  %2251 = fpext bfloat %2235 to float, !dbg !181
  %2252 = fpext bfloat %2236 to float, !dbg !181
  %2253 = fpext bfloat %2237 to float, !dbg !181
  %2254 = fmul float %2190, %2238, !dbg !173
  %2255 = fmul float %2190, %2239, !dbg !173
  %2256 = fmul float %2190, %2240, !dbg !173
  %2257 = fmul float %2190, %2241, !dbg !173
  %2258 = fmul float %2190, %2242, !dbg !173
  %2259 = fmul float %2190, %2243, !dbg !173
  %2260 = fmul float %2190, %2244, !dbg !173
  %2261 = fmul float %2190, %2245, !dbg !173
  %2262 = fmul float %2190, %2246, !dbg !173
  %2263 = fmul float %2190, %2247, !dbg !173
  %2264 = fmul float %2190, %2248, !dbg !173
  %2265 = fmul float %2190, %2249, !dbg !173
  %2266 = fmul float %2190, %2250, !dbg !173
  %2267 = fmul float %2190, %2251, !dbg !173
  %2268 = fmul float %2190, %2252, !dbg !173
  %2269 = fmul float %2190, %2253, !dbg !173
  %2270 = tail call float @llvm.nvvm.round.f(float %2254) #5, !dbg !182
  %2271 = tail call float @llvm.nvvm.round.f(float %2255) #5, !dbg !182
  %2272 = tail call float @llvm.nvvm.round.f(float %2256) #5, !dbg !182
  %2273 = tail call float @llvm.nvvm.round.f(float %2257) #5, !dbg !182
  %2274 = tail call float @llvm.nvvm.round.f(float %2258) #5, !dbg !182
  %2275 = tail call float @llvm.nvvm.round.f(float %2259) #5, !dbg !182
  %2276 = tail call float @llvm.nvvm.round.f(float %2260) #5, !dbg !182
  %2277 = tail call float @llvm.nvvm.round.f(float %2261) #5, !dbg !182
  %2278 = tail call float @llvm.nvvm.round.f(float %2262) #5, !dbg !182
  %2279 = tail call float @llvm.nvvm.round.f(float %2263) #5, !dbg !182
  %2280 = tail call float @llvm.nvvm.round.f(float %2264) #5, !dbg !182
  %2281 = tail call float @llvm.nvvm.round.f(float %2265) #5, !dbg !182
  %2282 = tail call float @llvm.nvvm.round.f(float %2266) #5, !dbg !182
  %2283 = tail call float @llvm.nvvm.round.f(float %2267) #5, !dbg !182
  %2284 = tail call float @llvm.nvvm.round.f(float %2268) #5, !dbg !182
  %2285 = tail call float @llvm.nvvm.round.f(float %2269) #5, !dbg !182
  %2286 = insertelement <4 x float> poison, float %2270, i64 0, !dbg !183
  %2287 = insertelement <4 x float> %2286, float %2271, i64 1, !dbg !183
  %2288 = insertelement <4 x float> %2287, float %2272, i64 2, !dbg !183
  %2289 = insertelement <4 x float> %2288, float %2273, i64 3, !dbg !183
  %2290 = fcmp ogt <4 x float> %2289, splat (float -1.270000e+02), !dbg !183
  %2291 = fcmp uno <4 x float> %2289, zeroinitializer, !dbg !185
  %2292 = or <4 x i1> %2290, %2291, !dbg !186
  %2293 = select <4 x i1> %2292, <4 x float> %2289, <4 x float> splat (float -1.270000e+02), !dbg !187
  %2294 = fcmp olt <4 x float> %2293, splat (float 1.270000e+02), !dbg !188
  %2295 = fcmp uno <4 x float> %2293, zeroinitializer, !dbg !190
  %2296 = or <4 x i1> %2294, %2295, !dbg !191
  %2297 = fptosi <4 x float> %2293 to <4 x i8>, !dbg !192
  %2298 = select <4 x i1> %2296, <4 x i8> %2297, <4 x i8> splat (i8 127), !dbg !193
  %2299 = insertelement <4 x float> poison, float %2274, i64 0, !dbg !183
  %2300 = insertelement <4 x float> %2299, float %2275, i64 1, !dbg !183
  %2301 = insertelement <4 x float> %2300, float %2276, i64 2, !dbg !183
  %2302 = insertelement <4 x float> %2301, float %2277, i64 3, !dbg !183
  %2303 = fcmp ogt <4 x float> %2302, splat (float -1.270000e+02), !dbg !183
  %2304 = fcmp uno <4 x float> %2302, zeroinitializer, !dbg !185
  %2305 = or <4 x i1> %2303, %2304, !dbg !186
  %2306 = select <4 x i1> %2305, <4 x float> %2302, <4 x float> splat (float -1.270000e+02), !dbg !187
  %2307 = fcmp olt <4 x float> %2306, splat (float 1.270000e+02), !dbg !188
  %2308 = fcmp uno <4 x float> %2306, zeroinitializer, !dbg !190
  %2309 = or <4 x i1> %2307, %2308, !dbg !191
  %2310 = fptosi <4 x float> %2306 to <4 x i8>, !dbg !192
  %2311 = select <4 x i1> %2309, <4 x i8> %2310, <4 x i8> splat (i8 127), !dbg !193
  %2312 = insertelement <4 x float> poison, float %2278, i64 0, !dbg !183
  %2313 = insertelement <4 x float> %2312, float %2279, i64 1, !dbg !183
  %2314 = insertelement <4 x float> %2313, float %2280, i64 2, !dbg !183
  %2315 = insertelement <4 x float> %2314, float %2281, i64 3, !dbg !183
  %2316 = fcmp ogt <4 x float> %2315, splat (float -1.270000e+02), !dbg !183
  %2317 = fcmp uno <4 x float> %2315, zeroinitializer, !dbg !185
  %2318 = or <4 x i1> %2316, %2317, !dbg !186
  %2319 = select <4 x i1> %2318, <4 x float> %2315, <4 x float> splat (float -1.270000e+02), !dbg !187
  %2320 = fcmp olt <4 x float> %2319, splat (float 1.270000e+02), !dbg !188
  %2321 = fcmp uno <4 x float> %2319, zeroinitializer, !dbg !190
  %2322 = or <4 x i1> %2320, %2321, !dbg !191
  %2323 = fptosi <4 x float> %2319 to <4 x i8>, !dbg !192
  %2324 = select <4 x i1> %2322, <4 x i8> %2323, <4 x i8> splat (i8 127), !dbg !193
  %2325 = insertelement <4 x float> poison, float %2282, i64 0, !dbg !183
  %2326 = insertelement <4 x float> %2325, float %2283, i64 1, !dbg !183
  %2327 = insertelement <4 x float> %2326, float %2284, i64 2, !dbg !183
  %2328 = insertelement <4 x float> %2327, float %2285, i64 3, !dbg !183
  %2329 = fcmp ogt <4 x float> %2328, splat (float -1.270000e+02), !dbg !183
  %2330 = fcmp uno <4 x float> %2328, zeroinitializer, !dbg !185
  %2331 = or <4 x i1> %2329, %2330, !dbg !186
  %2332 = select <4 x i1> %2331, <4 x float> %2328, <4 x float> splat (float -1.270000e+02), !dbg !187
  %2333 = fcmp olt <4 x float> %2332, splat (float 1.270000e+02), !dbg !188
  %2334 = fcmp uno <4 x float> %2332, zeroinitializer, !dbg !190
  %2335 = or <4 x i1> %2333, %2334, !dbg !191
  %2336 = fptosi <4 x float> %2332 to <4 x i8>, !dbg !192
  %2337 = select <4 x i1> %2335, <4 x i8> %2336, <4 x i8> splat (i8 127), !dbg !193
  %2338 = getelementptr i8, ptr addrspace(1) %12, i64 %2199, !dbg !194
  %2339 = bitcast <4 x i8> %2298 to i32, !dbg !195
  %2340 = bitcast <4 x i8> %2311 to i32, !dbg !195
  %2341 = bitcast <4 x i8> %2324 to i32, !dbg !195
  %2342 = bitcast <4 x i8> %2337 to i32, !dbg !195
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2339, i32 %2340, i32 %2341, i32 %2342, ptr addrspace(1) %2338, i1 %2203) #5, !dbg !195
  br i1 %2192, label %2191, label %2343, !dbg !174

2343:                                             ; preds = %2191
  ret void, !dbg !196
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 35, column: 31, scope: !6)
!40 = !DILocation(line: 36, column: 29, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 59, scope: !6)
!44 = !DILocation(line: 40, column: 51, scope: !6)
!45 = !DILocation(line: 40, column: 113, scope: !6)
!46 = !DILocation(line: 41, column: 41, scope: !6)
!47 = !DILocation(line: 41, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 41, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 43, column: 51, scope: !6)
!56 = !DILocation(line: 44, column: 42, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 42, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 60, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 70, column: 64, scope: !6)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = !DILocation(line: 72, column: 68, scope: !6)
!79 = !DILocation(line: 73, column: 29, scope: !6)
!80 = !DILocation(line: 73, column: 53, scope: !6)
!81 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 217, column: 21, scope: !84, inlinedAt: !82)
!84 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!85 = !DILocation(line: 218, column: 28, scope: !84, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 39, scope: !84, inlinedAt: !82)
!87 = !DILocation(line: 219, column: 60, scope: !84, inlinedAt: !82)
!88 = !DILocation(line: 219, column: 49, scope: !84, inlinedAt: !82)
!89 = !DILocation(line: 221, column: 25, scope: !84, inlinedAt: !82)
!90 = !DILocation(line: 221, column: 17, scope: !84, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 15, scope: !84, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 30, scope: !84, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 38, scope: !84, inlinedAt: !82)
!94 = !DILocation(line: 222, column: 49, scope: !84, inlinedAt: !82)
!95 = !DILocation(line: 222, column: 22, scope: !84, inlinedAt: !82)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 82, column: 29, scope: !6)
!104 = !DILocation(line: 86, column: 43, scope: !6)
!105 = !DILocation(line: 86, column: 36, scope: !6)
!106 = !DILocation(line: 86, column: 61, scope: !6)
!107 = !DILocation(line: 86, column: 53, scope: !6)
!108 = !DILocation(line: 86, column: 115, scope: !6)
!109 = !DILocation(line: 87, column: 43, scope: !6)
!110 = !DILocation(line: 87, column: 35, scope: !6)
!111 = !DILocation(line: 88, column: 35, scope: !6)
!112 = !DILocation(line: 89, column: 42, scope: !6)
!113 = !DILocation(line: 89, column: 35, scope: !6)
!114 = !DILocation(line: 90, column: 35, scope: !6)
!115 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !116)
!116 = !DILocation(line: 109, column: 47, scope: !6)
!117 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !118)
!118 = !DILocation(line: 111, column: 47, scope: !6)
!119 = !DILocation(line: 110, column: 50, scope: !6)
!120 = !DILocation(line: 87, column: 50, scope: !6)
!121 = !DILocation(line: 88, column: 50, scope: !6)
!122 = !DILocation(line: 88, column: 103, scope: !6)
!123 = !DILocation(line: 89, column: 49, scope: !6)
!124 = !DILocation(line: 90, column: 49, scope: !6)
!125 = !DILocation(line: 90, column: 102, scope: !6)
!126 = !DILocation(line: 101, column: 24, scope: !6)
!127 = !DILocation(line: 103, column: 24, scope: !6)
!128 = !DILocation(line: 104, column: 24, scope: !6)
!129 = !DILocation(line: 106, column: 24, scope: !6)
!130 = !DILocation(line: 107, column: 24, scope: !6)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !116)
!132 = !DILocation(line: 113, column: 53, scope: !6)
!133 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !116)
!134 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !116)
!135 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !118)
!136 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !118)
!137 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !118)
!138 = !DILocation(line: 112, column: 50, scope: !6)
!139 = !DILocation(line: 113, column: 29, scope: !6)
!140 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !141)
!141 = !DILocation(line: 114, column: 40, scope: !6)
!142 = !DILocation(line: 94, column: 15, scope: !84, inlinedAt: !141)
!143 = !DILocation(line: 96, column: 16, scope: !84, inlinedAt: !141)
!144 = !DILocation(line: 97, column: 29, scope: !84, inlinedAt: !141)
!145 = !DILocation(line: 96, column: 21, scope: !84, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 37, scope: !6)
!147 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !148)
!148 = !DILocation(line: 115, column: 40, scope: !6)
!149 = !DILocation(line: 102, column: 15, scope: !84, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 21, scope: !84, inlinedAt: !148)
!151 = !DILocation(line: 104, column: 16, scope: !84, inlinedAt: !148)
!152 = !DILocation(line: 105, column: 29, scope: !84, inlinedAt: !148)
!153 = !DILocation(line: 117, column: 37, scope: !6)
!154 = !DILocation(line: 116, column: 25, scope: !6)
!155 = !DILocation(line: 117, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 126, column: 46, scope: !6)
!158 = !DILocation(line: 127, column: 17, scope: !6)
!159 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !160)
!160 = !DILocation(line: 128, column: 46, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !162)
!162 = !DILocation(line: 129, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !162)
!166 = !DILocation(line: 131, column: 24, scope: !6)
!167 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !168)
!168 = !DILocation(line: 134, column: 46, scope: !6)
!169 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !168)
!170 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !168)
!171 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !168)
!172 = !DILocation(line: 137, column: 25, scope: !6)
!173 = !DILocation(line: 140, column: 24, scope: !6)
!174 = !DILocation(line: 118, column: 40, scope: !6)
!175 = !DILocation(line: 119, column: 31, scope: !6)
!176 = !DILocation(line: 120, column: 29, scope: !6)
!177 = !DILocation(line: 124, column: 43, scope: !6)
!178 = !DILocation(line: 124, column: 36, scope: !6)
!179 = !DILocation(line: 124, column: 61, scope: !6)
!180 = !DILocation(line: 124, column: 53, scope: !6)
!181 = !DILocation(line: 124, column: 115, scope: !6)
!182 = !DILocation(line: 141, column: 36, scope: !6)
!183 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !184)
!184 = !DILocation(line: 144, column: 46, scope: !6)
!185 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !184)
!186 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !184)
!187 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !184)
!188 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !189)
!189 = !DILocation(line: 146, column: 46, scope: !6)
!190 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !189)
!191 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !189)
!192 = !DILocation(line: 148, column: 25, scope: !6)
!193 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !189)
!194 = !DILocation(line: 149, column: 29, scope: !6)
!195 = !DILocation(line: 149, column: 53, scope: !6)
!196 = !DILocation(line: 118, column: 4, scope: !6)
