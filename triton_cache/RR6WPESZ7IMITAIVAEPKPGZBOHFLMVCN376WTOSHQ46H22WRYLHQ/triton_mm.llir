; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 29, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 128, !dbg !19
  %19 = lshr i32 %15, 1, !dbg !19
  %20 = and i32 %19, 127, !dbg !19
  %21 = shl i32 %15, 2, !dbg !19
  %22 = and i32 %21, 16, !dbg !19
  %23 = or disjoint i32 %14, %20, !dbg !20
  %24 = shl nsw i32 %13, 7, !dbg !21
  %25 = or disjoint i32 %24, %20, !dbg !22
  %26 = srem i32 %23, 3600, !dbg !23
  %27 = srem i32 %25, 3072, !dbg !24
  %28 = shl i32 %15, 4, !dbg !25
  %29 = and i32 %28, 16, !dbg !25
  %30 = mul nsw i32 %26, 3072, !dbg !26
  %31 = mul nsw i32 %27, 3072, !dbg !27
  %32 = or disjoint i32 %30, %29, !dbg !28
  %33 = sext i32 %32 to i64, !dbg !29
  %34 = getelementptr i8, ptr addrspace(1) %0, i64 %33, !dbg !29
  %35 = shl nuw nsw i32 %16, 1, !dbg !30
  %36 = xor i32 %29, %35, !dbg !30
  %37 = shl nuw nsw i32 %20, 5, !dbg !30
  %38 = or disjoint i32 %36, %37, !dbg !30
  %39 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %38, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %39, ptr addrspace(1) %34, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %40 = or disjoint i32 %31, %29, !dbg !31
  %41 = sext i32 %40 to i64, !dbg !32
  %42 = getelementptr i8, ptr addrspace(1) %1, i64 %41, !dbg !32
  %43 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %38, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %43, ptr addrspace(1) %42, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !34
  %invariant.op68 = or disjoint i32 %16, 64, !dbg !34
  %invariant.op70 = or disjoint i32 %16, 96, !dbg !34
  %44 = and i32 %15, 7
  %45 = and i32 %15, 15
  %46 = xor i32 %22, %17
  %47 = lshr exact i32 %18, 3
  %48 = or disjoint i32 %47, %45
  %49 = shl nuw nsw i32 %48, 5
  %50 = or disjoint i32 %49, %46
  %.reass = or disjoint i32 %44, %invariant.op
  %51 = or disjoint i32 %.reass, %47
  %52 = shl nuw nsw i32 %51, 5
  %53 = or disjoint i32 %52, %46
  %.reass69 = or disjoint i32 %44, %invariant.op68
  %54 = or disjoint i32 %.reass69, %47
  %55 = shl nuw nsw i32 %54, 5
  %56 = or disjoint i32 %55, %46
  %.reass71 = or disjoint i32 %44, %invariant.op70
  %57 = or disjoint i32 %.reass71, %47
  %58 = shl nuw nsw i32 %57, 5
  %59 = or disjoint i32 %58, %46
  %60 = xor i32 %22, %35
  %61 = lshr i32 %15, 2
  %62 = and i32 %61, 24
  %63 = or disjoint i32 %44, %62
  %64 = shl nuw nsw i32 %63, 5
  %65 = or disjoint i32 %64, %60
  %66 = or disjoint i32 %65, 1024
  %67 = or disjoint i32 %65, 2048
  %68 = or disjoint i32 %65, 3072
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %33, !dbg !34
  %invariant.gep204 = getelementptr i8, ptr addrspace(1) %1, i64 %41, !dbg !34
  br label %69, !dbg !34

69:                                               ; preds = %4, %69
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %69 ]
  %70 = phi i32 [ -1, %4 ], [ %137, %69 ]
  %71 = phi i32 [ 0, %4 ], [ %190, %69 ]
  %72 = phi i32 [ 0, %4 ], [ %191, %69 ]
  %73 = phi i32 [ 0, %4 ], [ %192, %69 ]
  %74 = phi i32 [ 0, %4 ], [ %193, %69 ]
  %75 = phi i32 [ 0, %4 ], [ %195, %69 ]
  %76 = phi i32 [ 0, %4 ], [ %196, %69 ]
  %77 = phi i32 [ 0, %4 ], [ %197, %69 ]
  %78 = phi i32 [ 0, %4 ], [ %198, %69 ]
  %79 = phi i32 [ 0, %4 ], [ %200, %69 ]
  %80 = phi i32 [ 0, %4 ], [ %201, %69 ]
  %81 = phi i32 [ 0, %4 ], [ %202, %69 ]
  %82 = phi i32 [ 0, %4 ], [ %203, %69 ]
  %83 = phi i32 [ 0, %4 ], [ %205, %69 ]
  %84 = phi i32 [ 0, %4 ], [ %206, %69 ]
  %85 = phi i32 [ 0, %4 ], [ %207, %69 ]
  %86 = phi i32 [ 0, %4 ], [ %208, %69 ]
  %87 = phi i32 [ 0, %4 ], [ %210, %69 ]
  %88 = phi i32 [ 0, %4 ], [ %211, %69 ]
  %89 = phi i32 [ 0, %4 ], [ %212, %69 ]
  %90 = phi i32 [ 0, %4 ], [ %213, %69 ]
  %91 = phi i32 [ 0, %4 ], [ %215, %69 ]
  %92 = phi i32 [ 0, %4 ], [ %216, %69 ]
  %93 = phi i32 [ 0, %4 ], [ %217, %69 ]
  %94 = phi i32 [ 0, %4 ], [ %218, %69 ]
  %95 = phi i32 [ 0, %4 ], [ %220, %69 ]
  %96 = phi i32 [ 0, %4 ], [ %221, %69 ]
  %97 = phi i32 [ 0, %4 ], [ %222, %69 ]
  %98 = phi i32 [ 0, %4 ], [ %223, %69 ]
  %99 = phi i32 [ 0, %4 ], [ %225, %69 ]
  %100 = phi i32 [ 0, %4 ], [ %226, %69 ]
  %101 = phi i32 [ 0, %4 ], [ %227, %69 ]
  %102 = phi i32 [ 0, %4 ], [ %228, %69 ]
  %103 = phi i32 [ 0, %4 ], [ %230, %69 ]
  %104 = phi i32 [ 0, %4 ], [ %231, %69 ]
  %105 = phi i32 [ 0, %4 ], [ %232, %69 ]
  %106 = phi i32 [ 0, %4 ], [ %233, %69 ]
  %107 = phi i32 [ 0, %4 ], [ %235, %69 ]
  %108 = phi i32 [ 0, %4 ], [ %236, %69 ]
  %109 = phi i32 [ 0, %4 ], [ %237, %69 ]
  %110 = phi i32 [ 0, %4 ], [ %238, %69 ]
  %111 = phi i32 [ 0, %4 ], [ %240, %69 ]
  %112 = phi i32 [ 0, %4 ], [ %241, %69 ]
  %113 = phi i32 [ 0, %4 ], [ %242, %69 ]
  %114 = phi i32 [ 0, %4 ], [ %243, %69 ]
  %115 = phi i32 [ 0, %4 ], [ %245, %69 ]
  %116 = phi i32 [ 0, %4 ], [ %246, %69 ]
  %117 = phi i32 [ 0, %4 ], [ %247, %69 ]
  %118 = phi i32 [ 0, %4 ], [ %248, %69 ]
  %119 = phi i32 [ 0, %4 ], [ %250, %69 ]
  %120 = phi i32 [ 0, %4 ], [ %251, %69 ]
  %121 = phi i32 [ 0, %4 ], [ %252, %69 ]
  %122 = phi i32 [ 0, %4 ], [ %253, %69 ]
  %123 = phi i32 [ 0, %4 ], [ %255, %69 ]
  %124 = phi i32 [ 0, %4 ], [ %256, %69 ]
  %125 = phi i32 [ 0, %4 ], [ %257, %69 ]
  %126 = phi i32 [ 0, %4 ], [ %258, %69 ]
  %127 = phi i32 [ 0, %4 ], [ %260, %69 ]
  %128 = phi i32 [ 0, %4 ], [ %261, %69 ]
  %129 = phi i32 [ 0, %4 ], [ %262, %69 ]
  %130 = phi i32 [ 0, %4 ], [ %263, %69 ]
  %131 = phi i32 [ 0, %4 ], [ %265, %69 ]
  %132 = phi i32 [ 0, %4 ], [ %266, %69 ]
  %133 = phi i32 [ 0, %4 ], [ %267, %69 ]
  %134 = phi i32 [ 0, %4 ], [ %268, %69 ]
  %.not67 = icmp eq i64 %indvars.iv, 95, !dbg !34
  %135 = add i32 %70, 1, !dbg !34
  %136 = icmp ugt i32 %70, 2147483646, !dbg !34
  %137 = select i1 %136, i32 %135, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %138 = shl i32 %137, 12, !dbg !30
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %138, !dbg !30
  %140 = getelementptr inbounds nuw i8, ptr addrspace(3) %139, i32 %50, !dbg !30
  %141 = ptrtoint ptr addrspace(3) %140 to i32, !dbg !30
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %141) #1, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !30
  %147 = getelementptr inbounds nuw i8, ptr addrspace(3) %139, i32 %53, !dbg !30
  %148 = ptrtoint ptr addrspace(3) %147 to i32, !dbg !30
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %148) #1, !dbg !30
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !30
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !30
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !30
  %154 = getelementptr inbounds nuw i8, ptr addrspace(3) %139, i32 %56, !dbg !30
  %155 = ptrtoint ptr addrspace(3) %154 to i32, !dbg !30
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %155) #1, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !30
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !30
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !30
  %161 = getelementptr inbounds nuw i8, ptr addrspace(3) %139, i32 %59, !dbg !30
  %162 = ptrtoint ptr addrspace(3) %161 to i32, !dbg !30
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %162) #1, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !30
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !30
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !30
  %168 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %138, !dbg !33
  %169 = getelementptr inbounds nuw i8, ptr addrspace(3) %168, i32 %65, !dbg !33
  %170 = ptrtoint ptr addrspace(3) %169 to i32, !dbg !33
  %171 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %170) #1, !dbg !33
  %172 = extractvalue { i32, i32 } %171, 0, !dbg !33
  %173 = extractvalue { i32, i32 } %171, 1, !dbg !33
  %174 = getelementptr inbounds nuw i8, ptr addrspace(3) %168, i32 %66, !dbg !33
  %175 = ptrtoint ptr addrspace(3) %174 to i32, !dbg !33
  %176 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %175) #1, !dbg !33
  %177 = extractvalue { i32, i32 } %176, 0, !dbg !33
  %178 = extractvalue { i32, i32 } %176, 1, !dbg !33
  %179 = getelementptr inbounds nuw i8, ptr addrspace(3) %168, i32 %67, !dbg !33
  %180 = ptrtoint ptr addrspace(3) %179 to i32, !dbg !33
  %181 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %180) #1, !dbg !33
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !33
  %183 = extractvalue { i32, i32 } %181, 1, !dbg !33
  %184 = getelementptr inbounds nuw i8, ptr addrspace(3) %168, i32 %68, !dbg !33
  %185 = ptrtoint ptr addrspace(3) %184 to i32, !dbg !33
  %186 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %185) #1, !dbg !33
  %187 = extractvalue { i32, i32 } %186, 0, !dbg !33
  %188 = extractvalue { i32, i32 } %186, 1, !dbg !33
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %71, i32 %72, i32 %73, i32 %74, i32 %143, i32 %144, i32 %145, i32 %146, i32 %172, i32 %173) #1, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !35
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !35
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !35
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %75, i32 %76, i32 %77, i32 %78, i32 %143, i32 %144, i32 %145, i32 %146, i32 %177, i32 %178) #1, !dbg !35
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !35
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !35
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !35
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !35
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %79, i32 %80, i32 %81, i32 %82, i32 %143, i32 %144, i32 %145, i32 %146, i32 %182, i32 %183) #1, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !35
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !35
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !35
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %83, i32 %84, i32 %85, i32 %86, i32 %143, i32 %144, i32 %145, i32 %146, i32 %187, i32 %188) #1, !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !35
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !35
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !35
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !35
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %87, i32 %88, i32 %89, i32 %90, i32 %150, i32 %151, i32 %152, i32 %153, i32 %172, i32 %173) #1, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !35
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !35
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !35
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !35
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %91, i32 %92, i32 %93, i32 %94, i32 %150, i32 %151, i32 %152, i32 %153, i32 %177, i32 %178) #1, !dbg !35
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !35
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !35
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !35
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !35
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %95, i32 %96, i32 %97, i32 %98, i32 %150, i32 %151, i32 %152, i32 %153, i32 %182, i32 %183) #1, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !35
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !35
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !35
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !35
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %99, i32 %100, i32 %101, i32 %102, i32 %150, i32 %151, i32 %152, i32 %153, i32 %187, i32 %188) #1, !dbg !35
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !35
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !35
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !35
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !35
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %103, i32 %104, i32 %105, i32 %106, i32 %157, i32 %158, i32 %159, i32 %160, i32 %172, i32 %173) #1, !dbg !35
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !35
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !35
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !35
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !35
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %107, i32 %108, i32 %109, i32 %110, i32 %157, i32 %158, i32 %159, i32 %160, i32 %177, i32 %178) #1, !dbg !35
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !35
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !35
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !35
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !35
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %111, i32 %112, i32 %113, i32 %114, i32 %157, i32 %158, i32 %159, i32 %160, i32 %182, i32 %183) #1, !dbg !35
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !35
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !35
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !35
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !35
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %115, i32 %116, i32 %117, i32 %118, i32 %157, i32 %158, i32 %159, i32 %160, i32 %187, i32 %188) #1, !dbg !35
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !35
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !35
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %119, i32 %120, i32 %121, i32 %122, i32 %164, i32 %165, i32 %166, i32 %167, i32 %172, i32 %173) #1, !dbg !35
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !35
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !35
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !35
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !35
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %123, i32 %124, i32 %125, i32 %126, i32 %164, i32 %165, i32 %166, i32 %167, i32 %177, i32 %178) #1, !dbg !35
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !35
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !35
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !35
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !35
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %127, i32 %128, i32 %129, i32 %130, i32 %164, i32 %165, i32 %166, i32 %167, i32 %182, i32 %183) #1, !dbg !35
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !35
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !35
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !35
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !35
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %131, i32 %132, i32 %133, i32 %134, i32 %164, i32 %165, i32 %166, i32 %167, i32 %187, i32 %188) #1, !dbg !35
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !35
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !35
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !35
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %269 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !36
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %269, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %270 = select i1 %.not67, i32 0, i32 16, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %39, ptr addrspace(1) %gep, i32 %270) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep205 = getelementptr i8, ptr addrspace(1) %invariant.gep204, i64 %269, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %43, ptr addrspace(1) %gep205, i32 %270) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !34
  br i1 %exitcond.not, label %271, label %69, !dbg !34

271:                                              ; preds = %69
  %272 = and i32 %21, 124, !dbg !19
  %273 = or disjoint i32 %24, %272, !dbg !22
  %274 = lshr i32 %15, 5, !dbg !19
  %275 = and i32 %274, 7, !dbg !19
  %276 = or disjoint i32 %275, %14, !dbg !20
  %277 = or disjoint i32 %276, 120, !dbg !20
  %278 = or disjoint i32 %276, 112, !dbg !20
  %279 = or disjoint i32 %276, 104, !dbg !20
  %280 = or disjoint i32 %276, 96, !dbg !20
  %281 = or disjoint i32 %276, 88, !dbg !20
  %282 = or disjoint i32 %276, 80, !dbg !20
  %283 = or disjoint i32 %276, 72, !dbg !20
  %284 = or disjoint i32 %276, 64, !dbg !20
  %285 = or disjoint i32 %276, 56, !dbg !20
  %286 = or disjoint i32 %276, 48, !dbg !20
  %287 = or disjoint i32 %276, 40, !dbg !20
  %288 = or disjoint i32 %276, 32, !dbg !20
  %289 = or disjoint i32 %276, 24, !dbg !20
  %290 = or disjoint i32 %276, 16, !dbg !20
  %291 = or disjoint i32 %276, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %292 = icmp slt i32 %276, 3600, !dbg !37
  %293 = icmp slt i32 %291, 3600, !dbg !37
  %294 = icmp slt i32 %290, 3600, !dbg !37
  %295 = icmp slt i32 %289, 3600, !dbg !37
  %296 = icmp slt i32 %288, 3600, !dbg !37
  %297 = icmp slt i32 %287, 3600, !dbg !37
  %298 = icmp slt i32 %286, 3600, !dbg !37
  %299 = icmp slt i32 %285, 3600, !dbg !37
  %300 = icmp slt i32 %284, 3600, !dbg !37
  %301 = icmp slt i32 %283, 3600, !dbg !37
  %302 = icmp slt i32 %282, 3600, !dbg !37
  %303 = icmp slt i32 %281, 3600, !dbg !37
  %304 = icmp slt i32 %280, 3600, !dbg !37
  %305 = icmp slt i32 %279, 3600, !dbg !37
  %306 = icmp slt i32 %278, 3600, !dbg !37
  %307 = icmp slt i32 %277, 3600, !dbg !37
  %308 = icmp slt i32 %273, 3072, !dbg !38
  %309 = and i1 %292, %308, !dbg !39
  %310 = and i1 %293, %308, !dbg !39
  %311 = and i1 %294, %308, !dbg !39
  %312 = and i1 %295, %308, !dbg !39
  %313 = and i1 %296, %308, !dbg !39
  %314 = and i1 %297, %308, !dbg !39
  %315 = and i1 %298, %308, !dbg !39
  %316 = and i1 %299, %308, !dbg !39
  %317 = and i1 %300, %308, !dbg !39
  %318 = and i1 %301, %308, !dbg !39
  %319 = and i1 %302, %308, !dbg !39
  %320 = and i1 %303, %308, !dbg !39
  %321 = and i1 %304, %308, !dbg !39
  %322 = and i1 %305, %308, !dbg !39
  %323 = and i1 %306, %308, !dbg !39
  %324 = and i1 %307, %308, !dbg !39
  %325 = mul i32 %276, 3072, !dbg !40
  %326 = mul i32 %291, 3072, !dbg !40
  %327 = mul i32 %290, 3072, !dbg !40
  %328 = mul i32 %289, 3072, !dbg !40
  %329 = mul i32 %288, 3072, !dbg !40
  %330 = mul i32 %287, 3072, !dbg !40
  %331 = mul i32 %286, 3072, !dbg !40
  %332 = mul i32 %285, 3072, !dbg !40
  %333 = mul i32 %284, 3072, !dbg !40
  %334 = mul i32 %283, 3072, !dbg !40
  %335 = mul i32 %282, 3072, !dbg !40
  %336 = mul i32 %281, 3072, !dbg !40
  %337 = mul i32 %280, 3072, !dbg !40
  %338 = mul i32 %279, 3072, !dbg !40
  %339 = mul i32 %278, 3072, !dbg !40
  %340 = mul i32 %277, 3072, !dbg !40
  %341 = add i32 %325, %273, !dbg !41
  %342 = add i32 %326, %273, !dbg !41
  %343 = add i32 %327, %273, !dbg !41
  %344 = add i32 %328, %273, !dbg !41
  %345 = add i32 %329, %273, !dbg !41
  %346 = add i32 %330, %273, !dbg !41
  %347 = add i32 %331, %273, !dbg !41
  %348 = add i32 %332, %273, !dbg !41
  %349 = add i32 %333, %273, !dbg !41
  %350 = add i32 %334, %273, !dbg !41
  %351 = add i32 %335, %273, !dbg !41
  %352 = add i32 %336, %273, !dbg !41
  %353 = add i32 %337, %273, !dbg !41
  %354 = add i32 %338, %273, !dbg !41
  %355 = add i32 %339, %273, !dbg !41
  %356 = add i32 %340, %273, !dbg !41
  %357 = sext i32 %341 to i64, !dbg !42
  %358 = getelementptr i32, ptr addrspace(1) %2, i64 %357, !dbg !42
  %359 = sext i32 %342 to i64, !dbg !42
  %360 = getelementptr i32, ptr addrspace(1) %2, i64 %359, !dbg !42
  %361 = sext i32 %343 to i64, !dbg !42
  %362 = getelementptr i32, ptr addrspace(1) %2, i64 %361, !dbg !42
  %363 = sext i32 %344 to i64, !dbg !42
  %364 = getelementptr i32, ptr addrspace(1) %2, i64 %363, !dbg !42
  %365 = sext i32 %345 to i64, !dbg !42
  %366 = getelementptr i32, ptr addrspace(1) %2, i64 %365, !dbg !42
  %367 = sext i32 %346 to i64, !dbg !42
  %368 = getelementptr i32, ptr addrspace(1) %2, i64 %367, !dbg !42
  %369 = sext i32 %347 to i64, !dbg !42
  %370 = getelementptr i32, ptr addrspace(1) %2, i64 %369, !dbg !42
  %371 = sext i32 %348 to i64, !dbg !42
  %372 = getelementptr i32, ptr addrspace(1) %2, i64 %371, !dbg !42
  %373 = sext i32 %349 to i64, !dbg !42
  %374 = getelementptr i32, ptr addrspace(1) %2, i64 %373, !dbg !42
  %375 = sext i32 %350 to i64, !dbg !42
  %376 = getelementptr i32, ptr addrspace(1) %2, i64 %375, !dbg !42
  %377 = sext i32 %351 to i64, !dbg !42
  %378 = getelementptr i32, ptr addrspace(1) %2, i64 %377, !dbg !42
  %379 = sext i32 %352 to i64, !dbg !42
  %380 = getelementptr i32, ptr addrspace(1) %2, i64 %379, !dbg !42
  %381 = sext i32 %353 to i64, !dbg !42
  %382 = getelementptr i32, ptr addrspace(1) %2, i64 %381, !dbg !42
  %383 = sext i32 %354 to i64, !dbg !42
  %384 = getelementptr i32, ptr addrspace(1) %2, i64 %383, !dbg !42
  %385 = sext i32 %355 to i64, !dbg !42
  %386 = getelementptr i32, ptr addrspace(1) %2, i64 %385, !dbg !42
  %387 = sext i32 %356 to i64, !dbg !42
  %388 = getelementptr i32, ptr addrspace(1) %2, i64 %387, !dbg !42
  %389 = shl i32 %15, 1, !dbg !43
  %390 = and i32 %389, 6, !dbg !43
  %391 = shl i32 %15, 5, !dbg !43
  %392 = and i32 %391, 384, !dbg !43
  %393 = or disjoint i32 %392, %390, !dbg !43
  %394 = shl nuw nsw i32 %17, 5, !dbg !43
  %395 = or disjoint i32 %393, %394, !dbg !43
  %396 = and i32 %61, 24, !dbg !43
  %397 = or disjoint i32 %395, %396, !dbg !43
  %398 = shl nuw nsw i32 %18, 4, !dbg !43
  %399 = or disjoint i32 %397, %398, !dbg !43
  %400 = and i32 %21, 1020, !dbg !43
  %401 = lshr i32 %399, 5, !dbg !43
  %402 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %401, !dbg !43
  %403 = getelementptr inbounds nuw i32, ptr addrspace(3) %402, i32 %399, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %403, i32 %190, i32 %191, i1 true) #1, !dbg !43
  %404 = or disjoint i32 %399, 1024, !dbg !43
  %405 = lshr i32 %404, 5, !dbg !43
  %406 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %405, !dbg !43
  %407 = getelementptr inbounds nuw i32, ptr addrspace(3) %406, i32 %404, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %407, i32 %192, i32 %193, i1 true) #1, !dbg !43
  %408 = or disjoint i32 %399, 32, !dbg !43
  %409 = getelementptr inbounds nuw i32, ptr addrspace(3) %402, i32 %408, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %409, i32 %195, i32 %196, i1 true) #1, !dbg !43
  %410 = or disjoint i32 %399, 1056, !dbg !43
  %411 = lshr i32 %410, 5, !dbg !43
  %412 = and i32 %411, 134217724, !dbg !43
  %413 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %412, !dbg !43
  %414 = getelementptr inbounds nuw i32, ptr addrspace(3) %413, i32 %410, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %414, i32 %197, i32 %198, i1 true) #1, !dbg !43
  %415 = or disjoint i32 %399, 64, !dbg !43
  %416 = getelementptr inbounds nuw i32, ptr addrspace(3) %402, i32 %415, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %416, i32 %200, i32 %201, i1 true) #1, !dbg !43
  %417 = or disjoint i32 %399, 1088, !dbg !43
  %418 = lshr i32 %417, 5, !dbg !43
  %419 = and i32 %418, 134217724, !dbg !43
  %420 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %419, !dbg !43
  %421 = getelementptr inbounds nuw i32, ptr addrspace(3) %420, i32 %417, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %421, i32 %202, i32 %203, i1 true) #1, !dbg !43
  %422 = or disjoint i32 %399, 96, !dbg !43
  %423 = getelementptr inbounds nuw i32, ptr addrspace(3) %402, i32 %422, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %423, i32 %205, i32 %206, i1 true) #1, !dbg !43
  %424 = or disjoint i32 %399, 1120, !dbg !43
  %425 = lshr i32 %424, 5, !dbg !43
  %426 = and i32 %425, 134217724, !dbg !43
  %427 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %426, !dbg !43
  %428 = getelementptr inbounds nuw i32, ptr addrspace(3) %427, i32 %424, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %428, i32 %207, i32 %208, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %429 = lshr i32 %21, 3, !dbg !43
  %430 = and i32 %429, 112, !dbg !43
  %431 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %430, !dbg !43
  %432 = getelementptr inbounds nuw i32, ptr addrspace(3) %431, i32 %400, !dbg !43
  %433 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !43
  %434 = or disjoint i32 %400, 1024, !dbg !43
  %435 = lshr i32 %434, 5, !dbg !43
  %436 = and i32 %435, 60, !dbg !43
  %437 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %436, !dbg !43
  %438 = getelementptr inbounds nuw i32, ptr addrspace(3) %437, i32 %434, !dbg !43
  %439 = load <4 x i32>, ptr addrspace(3) %438, align 16, !dbg !43
  %440 = or disjoint i32 %400, 2048, !dbg !43
  %441 = lshr i32 %440, 5, !dbg !43
  %442 = and i32 %441, 92, !dbg !43
  %443 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %442, !dbg !43
  %444 = getelementptr inbounds nuw i32, ptr addrspace(3) %443, i32 %440, !dbg !43
  %445 = load <4 x i32>, ptr addrspace(3) %444, align 16, !dbg !43
  %446 = or disjoint i32 %400, 3072, !dbg !43
  %447 = lshr i32 %446, 5, !dbg !43
  %448 = and i32 %447, 124, !dbg !43
  %449 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %448, !dbg !43
  %450 = getelementptr inbounds nuw i32, ptr addrspace(3) %449, i32 %446, !dbg !43
  %451 = load <4 x i32>, ptr addrspace(3) %450, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %403, i32 %210, i32 %211, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %407, i32 %212, i32 %213, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %409, i32 %215, i32 %216, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %414, i32 %217, i32 %218, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %416, i32 %220, i32 %221, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %421, i32 %222, i32 %223, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %423, i32 %225, i32 %226, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %428, i32 %227, i32 %228, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %452 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !43
  %453 = load <4 x i32>, ptr addrspace(3) %438, align 16, !dbg !43
  %454 = load <4 x i32>, ptr addrspace(3) %444, align 16, !dbg !43
  %455 = load <4 x i32>, ptr addrspace(3) %450, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %403, i32 %230, i32 %231, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %407, i32 %232, i32 %233, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %409, i32 %235, i32 %236, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %414, i32 %237, i32 %238, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %416, i32 %240, i32 %241, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %421, i32 %242, i32 %243, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %423, i32 %245, i32 %246, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %428, i32 %247, i32 %248, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %456 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !43
  %457 = load <4 x i32>, ptr addrspace(3) %438, align 16, !dbg !43
  %458 = load <4 x i32>, ptr addrspace(3) %444, align 16, !dbg !43
  %459 = load <4 x i32>, ptr addrspace(3) %450, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %403, i32 %250, i32 %251, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %407, i32 %252, i32 %253, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %409, i32 %255, i32 %256, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %414, i32 %257, i32 %258, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %416, i32 %260, i32 %261, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %421, i32 %262, i32 %263, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %423, i32 %265, i32 %266, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %428, i32 %267, i32 %268, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %460 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !43
  %461 = load <4 x i32>, ptr addrspace(3) %438, align 16, !dbg !43
  %462 = load <4 x i32>, ptr addrspace(3) %444, align 16, !dbg !43
  %463 = load <4 x i32>, ptr addrspace(3) %450, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %433, i64 0, !dbg !43
  %.extract4 = extractelement <4 x i32> %433, i64 1, !dbg !43
  %.extract5 = extractelement <4 x i32> %433, i64 2, !dbg !43
  %.extract6 = extractelement <4 x i32> %433, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %358, i1 %309) #1, !dbg !43
  %.extract7 = extractelement <4 x i32> %439, i64 0, !dbg !43
  %.extract8 = extractelement <4 x i32> %439, i64 1, !dbg !43
  %.extract9 = extractelement <4 x i32> %439, i64 2, !dbg !43
  %.extract10 = extractelement <4 x i32> %439, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %360, i1 %310) #1, !dbg !43
  %.extract11 = extractelement <4 x i32> %445, i64 0, !dbg !43
  %.extract12 = extractelement <4 x i32> %445, i64 1, !dbg !43
  %.extract13 = extractelement <4 x i32> %445, i64 2, !dbg !43
  %.extract14 = extractelement <4 x i32> %445, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %362, i1 %311) #1, !dbg !43
  %.extract15 = extractelement <4 x i32> %451, i64 0, !dbg !43
  %.extract16 = extractelement <4 x i32> %451, i64 1, !dbg !43
  %.extract17 = extractelement <4 x i32> %451, i64 2, !dbg !43
  %.extract18 = extractelement <4 x i32> %451, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %364, i1 %312) #1, !dbg !43
  %.extract19 = extractelement <4 x i32> %452, i64 0, !dbg !43
  %.extract20 = extractelement <4 x i32> %452, i64 1, !dbg !43
  %.extract21 = extractelement <4 x i32> %452, i64 2, !dbg !43
  %.extract22 = extractelement <4 x i32> %452, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %366, i1 %313) #1, !dbg !43
  %.extract23 = extractelement <4 x i32> %453, i64 0, !dbg !43
  %.extract24 = extractelement <4 x i32> %453, i64 1, !dbg !43
  %.extract25 = extractelement <4 x i32> %453, i64 2, !dbg !43
  %.extract26 = extractelement <4 x i32> %453, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %368, i1 %314) #1, !dbg !43
  %.extract27 = extractelement <4 x i32> %454, i64 0, !dbg !43
  %.extract28 = extractelement <4 x i32> %454, i64 1, !dbg !43
  %.extract29 = extractelement <4 x i32> %454, i64 2, !dbg !43
  %.extract30 = extractelement <4 x i32> %454, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %370, i1 %315) #1, !dbg !43
  %.extract31 = extractelement <4 x i32> %455, i64 0, !dbg !43
  %.extract32 = extractelement <4 x i32> %455, i64 1, !dbg !43
  %.extract33 = extractelement <4 x i32> %455, i64 2, !dbg !43
  %.extract34 = extractelement <4 x i32> %455, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %372, i1 %316) #1, !dbg !43
  %.extract35 = extractelement <4 x i32> %456, i64 0, !dbg !43
  %.extract36 = extractelement <4 x i32> %456, i64 1, !dbg !43
  %.extract37 = extractelement <4 x i32> %456, i64 2, !dbg !43
  %.extract38 = extractelement <4 x i32> %456, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %374, i1 %317) #1, !dbg !43
  %.extract39 = extractelement <4 x i32> %457, i64 0, !dbg !43
  %.extract40 = extractelement <4 x i32> %457, i64 1, !dbg !43
  %.extract41 = extractelement <4 x i32> %457, i64 2, !dbg !43
  %.extract42 = extractelement <4 x i32> %457, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %376, i1 %318) #1, !dbg !43
  %.extract43 = extractelement <4 x i32> %458, i64 0, !dbg !43
  %.extract44 = extractelement <4 x i32> %458, i64 1, !dbg !43
  %.extract45 = extractelement <4 x i32> %458, i64 2, !dbg !43
  %.extract46 = extractelement <4 x i32> %458, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %378, i1 %319) #1, !dbg !43
  %.extract47 = extractelement <4 x i32> %459, i64 0, !dbg !43
  %.extract48 = extractelement <4 x i32> %459, i64 1, !dbg !43
  %.extract49 = extractelement <4 x i32> %459, i64 2, !dbg !43
  %.extract50 = extractelement <4 x i32> %459, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %380, i1 %320) #1, !dbg !43
  %.extract51 = extractelement <4 x i32> %460, i64 0, !dbg !43
  %.extract52 = extractelement <4 x i32> %460, i64 1, !dbg !43
  %.extract53 = extractelement <4 x i32> %460, i64 2, !dbg !43
  %.extract54 = extractelement <4 x i32> %460, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract51, i32 %.extract52, i32 %.extract53, i32 %.extract54, ptr addrspace(1) %382, i1 %321) #1, !dbg !43
  %.extract55 = extractelement <4 x i32> %461, i64 0, !dbg !43
  %.extract56 = extractelement <4 x i32> %461, i64 1, !dbg !43
  %.extract57 = extractelement <4 x i32> %461, i64 2, !dbg !43
  %.extract58 = extractelement <4 x i32> %461, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract55, i32 %.extract56, i32 %.extract57, i32 %.extract58, ptr addrspace(1) %384, i1 %322) #1, !dbg !43
  %.extract59 = extractelement <4 x i32> %462, i64 0, !dbg !43
  %.extract60 = extractelement <4 x i32> %462, i64 1, !dbg !43
  %.extract61 = extractelement <4 x i32> %462, i64 2, !dbg !43
  %.extract62 = extractelement <4 x i32> %462, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %386, i1 %323) #1, !dbg !43
  %.extract63 = extractelement <4 x i32> %463, i64 0, !dbg !43
  %.extract64 = extractelement <4 x i32> %463, i64 1, !dbg !43
  %.extract65 = extractelement <4 x i32> %463, i64 2, !dbg !43
  %.extract66 = extractelement <4 x i32> %463, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %388, i1 %324) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czb5hrji63ksfbkpgumv646vlb7rzxv57tv2uyv3wdunujp5sjwh.py", directory: "/tmp/torchinductor_root/zb")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
