; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 57, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 1, !dbg !19
  %19 = and i32 %18, 63, !dbg !19
  %20 = or disjoint i32 %14, %19, !dbg !20
  %21 = shl nsw i32 %13, 7, !dbg !21
  %22 = shl i32 %15, 2, !dbg !22
  %23 = and i32 %22, 16, !dbg !22
  %24 = or disjoint i32 %21, %19, !dbg !23
  %25 = srem i32 %20, 3600, !dbg !24
  %.lhs.trunc = trunc i32 %24 to i16, !dbg !25
  %26 = srem i16 %.lhs.trunc, 3072, !dbg !25
  %.sext = sext i16 %26 to i32, !dbg !25
  %.lhs.trunc67 = or disjoint i16 %.lhs.trunc, 64, !dbg !25
  %27 = srem i16 %.lhs.trunc67, 3072, !dbg !25
  %.sext68 = sext i16 %27 to i32, !dbg !25
  %28 = shl i32 %15, 4, !dbg !26
  %29 = and i32 %28, 16, !dbg !26
  %30 = mul nsw i32 %25, 3072, !dbg !27
  %31 = mul nsw i32 %.sext, 3072, !dbg !28
  %32 = mul nsw i32 %.sext68, 3072, !dbg !28
  %33 = or disjoint i32 %30, %29, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr i8, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = shl nuw nsw i32 %16, 1, !dbg !31
  %37 = xor i32 %29, %36, !dbg !31
  %38 = shl nuw nsw i32 %19, 5, !dbg !31
  %39 = or disjoint i32 %38, %37, !dbg !31
  %40 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %39, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %40, ptr addrspace(1) %35, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %41 = or disjoint i32 %31, %29, !dbg !32
  %42 = or disjoint i32 %32, %29, !dbg !32
  %43 = sext i32 %41 to i64, !dbg !33
  %44 = getelementptr i8, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = sext i32 %42 to i64, !dbg !33
  %46 = getelementptr i8, ptr addrspace(1) %1, i64 %45, !dbg !33
  %47 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %39, !dbg !34
  %48 = or disjoint i32 %39, 2048, !dbg !34
  %49 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %47, ptr addrspace(1) %44, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %49, ptr addrspace(1) %46, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %50 = or disjoint i32 %29, 32, !dbg !35
  %51 = or disjoint i32 %30, %50, !dbg !29
  %52 = sext i32 %51 to i64, !dbg !30
  %53 = getelementptr i8, ptr addrspace(1) %0, i64 %52, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %54 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10240), i32 %39, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %54, ptr addrspace(1) %53, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %55 = or disjoint i32 %31, %50, !dbg !32
  %56 = or disjoint i32 %32, %50, !dbg !32
  %57 = sext i32 %55 to i64, !dbg !33
  %58 = getelementptr i8, ptr addrspace(1) %1, i64 %57, !dbg !33
  %59 = sext i32 %56 to i64, !dbg !33
  %60 = getelementptr i8, ptr addrspace(1) %1, i64 %59, !dbg !33
  %61 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %39, !dbg !34
  %62 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %48, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %61, ptr addrspace(1) %58, i32 16) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %62, ptr addrspace(1) %60, i32 16) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %invariant.op = or disjoint i32 %29, 64, !dbg !36
  %63 = and i32 %15, 7
  %64 = xor i32 %23, %17
  %65 = shl i32 %15, 5
  %66 = and i32 %65, 480
  %67 = or disjoint i32 %64, %66
  %68 = or disjoint i32 %67, 512
  %69 = or disjoint i32 %63, 32
  %70 = or disjoint i32 %69, %16
  %71 = shl nuw nsw i32 %70, 5
  %72 = or disjoint i32 %71, %64
  %73 = or disjoint i32 %67, 1536
  %74 = xor i32 %23, %36
  %75 = lshr i32 %15, 2
  %76 = and i32 %75, 8
  %77 = lshr i32 %15, 2
  %78 = and i32 %77, 16
  %79 = or disjoint i32 %78, %76
  %80 = or disjoint i32 %79, %63
  %81 = shl nuw nsw i32 %80, 5
  %82 = or disjoint i32 %81, %74
  %83 = or disjoint i32 %69, %76
  %84 = or disjoint i32 %83, %78
  %85 = shl nuw nsw i32 %84, 5
  %86 = or disjoint i32 %85, %74
  %87 = or disjoint i32 %82, 2048
  %88 = or disjoint i32 %82, 3072
  %89 = zext nneg i32 %invariant.op to i64, !dbg !36
  %90 = sext i32 %32 to i64, !dbg !36
  %91 = sext i32 %31 to i64, !dbg !36
  %92 = sext i32 %30 to i64, !dbg !36
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %92, !dbg !36
  %invariant.gep197 = getelementptr i8, ptr addrspace(1) %1, i64 %91, !dbg !36
  %invariant.gep199 = getelementptr i8, ptr addrspace(1) %1, i64 %90, !dbg !36
  br label %93, !dbg !36

93:                                               ; preds = %4, %93
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %93 ]
  %94 = phi i32 [ -1, %4 ], [ %163, %93 ]
  %95 = phi i32 [ 1, %4 ], [ %298, %93 ]
  %96 = phi i32 [ 0, %4 ], [ %217, %93 ]
  %97 = phi i32 [ 0, %4 ], [ %218, %93 ]
  %98 = phi i32 [ 0, %4 ], [ %219, %93 ]
  %99 = phi i32 [ 0, %4 ], [ %220, %93 ]
  %100 = phi i32 [ 0, %4 ], [ %222, %93 ]
  %101 = phi i32 [ 0, %4 ], [ %223, %93 ]
  %102 = phi i32 [ 0, %4 ], [ %224, %93 ]
  %103 = phi i32 [ 0, %4 ], [ %225, %93 ]
  %104 = phi i32 [ 0, %4 ], [ %227, %93 ]
  %105 = phi i32 [ 0, %4 ], [ %228, %93 ]
  %106 = phi i32 [ 0, %4 ], [ %229, %93 ]
  %107 = phi i32 [ 0, %4 ], [ %230, %93 ]
  %108 = phi i32 [ 0, %4 ], [ %232, %93 ]
  %109 = phi i32 [ 0, %4 ], [ %233, %93 ]
  %110 = phi i32 [ 0, %4 ], [ %234, %93 ]
  %111 = phi i32 [ 0, %4 ], [ %235, %93 ]
  %112 = phi i32 [ 0, %4 ], [ %237, %93 ]
  %113 = phi i32 [ 0, %4 ], [ %238, %93 ]
  %114 = phi i32 [ 0, %4 ], [ %239, %93 ]
  %115 = phi i32 [ 0, %4 ], [ %240, %93 ]
  %116 = phi i32 [ 0, %4 ], [ %242, %93 ]
  %117 = phi i32 [ 0, %4 ], [ %243, %93 ]
  %118 = phi i32 [ 0, %4 ], [ %244, %93 ]
  %119 = phi i32 [ 0, %4 ], [ %245, %93 ]
  %120 = phi i32 [ 0, %4 ], [ %247, %93 ]
  %121 = phi i32 [ 0, %4 ], [ %248, %93 ]
  %122 = phi i32 [ 0, %4 ], [ %249, %93 ]
  %123 = phi i32 [ 0, %4 ], [ %250, %93 ]
  %124 = phi i32 [ 0, %4 ], [ %252, %93 ]
  %125 = phi i32 [ 0, %4 ], [ %253, %93 ]
  %126 = phi i32 [ 0, %4 ], [ %254, %93 ]
  %127 = phi i32 [ 0, %4 ], [ %255, %93 ]
  %128 = phi i32 [ 0, %4 ], [ %257, %93 ]
  %129 = phi i32 [ 0, %4 ], [ %258, %93 ]
  %130 = phi i32 [ 0, %4 ], [ %259, %93 ]
  %131 = phi i32 [ 0, %4 ], [ %260, %93 ]
  %132 = phi i32 [ 0, %4 ], [ %262, %93 ]
  %133 = phi i32 [ 0, %4 ], [ %263, %93 ]
  %134 = phi i32 [ 0, %4 ], [ %264, %93 ]
  %135 = phi i32 [ 0, %4 ], [ %265, %93 ]
  %136 = phi i32 [ 0, %4 ], [ %267, %93 ]
  %137 = phi i32 [ 0, %4 ], [ %268, %93 ]
  %138 = phi i32 [ 0, %4 ], [ %269, %93 ]
  %139 = phi i32 [ 0, %4 ], [ %270, %93 ]
  %140 = phi i32 [ 0, %4 ], [ %272, %93 ]
  %141 = phi i32 [ 0, %4 ], [ %273, %93 ]
  %142 = phi i32 [ 0, %4 ], [ %274, %93 ]
  %143 = phi i32 [ 0, %4 ], [ %275, %93 ]
  %144 = phi i32 [ 0, %4 ], [ %277, %93 ]
  %145 = phi i32 [ 0, %4 ], [ %278, %93 ]
  %146 = phi i32 [ 0, %4 ], [ %279, %93 ]
  %147 = phi i32 [ 0, %4 ], [ %280, %93 ]
  %148 = phi i32 [ 0, %4 ], [ %282, %93 ]
  %149 = phi i32 [ 0, %4 ], [ %283, %93 ]
  %150 = phi i32 [ 0, %4 ], [ %284, %93 ]
  %151 = phi i32 [ 0, %4 ], [ %285, %93 ]
  %152 = phi i32 [ 0, %4 ], [ %287, %93 ]
  %153 = phi i32 [ 0, %4 ], [ %288, %93 ]
  %154 = phi i32 [ 0, %4 ], [ %289, %93 ]
  %155 = phi i32 [ 0, %4 ], [ %290, %93 ]
  %156 = phi i32 [ 0, %4 ], [ %292, %93 ]
  %157 = phi i32 [ 0, %4 ], [ %293, %93 ]
  %158 = phi i32 [ 0, %4 ], [ %294, %93 ]
  %159 = phi i32 [ 0, %4 ], [ %295, %93 ]
  %160 = icmp samesign ult i64 %indvars.iv, 94, !dbg !36
  %161 = add i32 %94, 1, !dbg !36
  %162 = icmp slt i32 %161, 2, !dbg !36
  %163 = select i1 %162, i32 %161, i32 0, !dbg !36
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %164 = shl i32 %163, 11, !dbg !31
  %165 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %164, !dbg !31
  %166 = getelementptr inbounds nuw i8, ptr addrspace(3) %165, i32 %67, !dbg !31
  %167 = ptrtoint ptr addrspace(3) %166 to i32, !dbg !31
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %167) #1, !dbg !31
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !31
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !31
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !31
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !31
  %173 = getelementptr inbounds nuw i8, ptr addrspace(3) %165, i32 %68, !dbg !31
  %174 = ptrtoint ptr addrspace(3) %173 to i32, !dbg !31
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %174) #1, !dbg !31
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !31
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !31
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !31
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !31
  %180 = getelementptr inbounds nuw i8, ptr addrspace(3) %165, i32 %72, !dbg !31
  %181 = ptrtoint ptr addrspace(3) %180 to i32, !dbg !31
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %181) #1, !dbg !31
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !31
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !31
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !31
  %187 = getelementptr inbounds nuw i8, ptr addrspace(3) %165, i32 %73, !dbg !31
  %188 = ptrtoint ptr addrspace(3) %187 to i32, !dbg !31
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %188) #1, !dbg !31
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !31
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !31
  %194 = shl i32 %163, 12, !dbg !34
  %195 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %194, !dbg !34
  %196 = getelementptr inbounds nuw i8, ptr addrspace(3) %195, i32 %82, !dbg !34
  %197 = ptrtoint ptr addrspace(3) %196 to i32, !dbg !34
  %198 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %197) #1, !dbg !34
  %199 = extractvalue { i32, i32 } %198, 0, !dbg !34
  %200 = extractvalue { i32, i32 } %198, 1, !dbg !34
  %201 = getelementptr inbounds nuw i8, ptr addrspace(3) %195, i32 %86, !dbg !34
  %202 = ptrtoint ptr addrspace(3) %201 to i32, !dbg !34
  %203 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %202) #1, !dbg !34
  %204 = extractvalue { i32, i32 } %203, 0, !dbg !34
  %205 = extractvalue { i32, i32 } %203, 1, !dbg !34
  %206 = getelementptr inbounds nuw i8, ptr addrspace(3) %195, i32 %87, !dbg !34
  %207 = ptrtoint ptr addrspace(3) %206 to i32, !dbg !34
  %208 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %207) #1, !dbg !34
  %209 = extractvalue { i32, i32 } %208, 0, !dbg !34
  %210 = extractvalue { i32, i32 } %208, 1, !dbg !34
  %211 = getelementptr inbounds nuw i8, ptr addrspace(3) %195, i32 %88, !dbg !34
  %212 = ptrtoint ptr addrspace(3) %211 to i32, !dbg !34
  %213 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %212) #1, !dbg !34
  %214 = extractvalue { i32, i32 } %213, 0, !dbg !34
  %215 = extractvalue { i32, i32 } %213, 1, !dbg !34
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %96, i32 %97, i32 %98, i32 %99, i32 %169, i32 %170, i32 %171, i32 %172, i32 %199, i32 %200) #1, !dbg !37
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !37
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !37
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !37
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !37
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %100, i32 %101, i32 %102, i32 %103, i32 %169, i32 %170, i32 %171, i32 %172, i32 %204, i32 %205) #1, !dbg !37
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !37
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !37
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !37
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %104, i32 %105, i32 %106, i32 %107, i32 %169, i32 %170, i32 %171, i32 %172, i32 %209, i32 %210) #1, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !37
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !37
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !37
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %108, i32 %109, i32 %110, i32 %111, i32 %169, i32 %170, i32 %171, i32 %172, i32 %214, i32 %215) #1, !dbg !37
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !37
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %112, i32 %113, i32 %114, i32 %115, i32 %176, i32 %177, i32 %178, i32 %179, i32 %199, i32 %200) #1, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !37
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !37
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %116, i32 %117, i32 %118, i32 %119, i32 %176, i32 %177, i32 %178, i32 %179, i32 %204, i32 %205) #1, !dbg !37
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !37
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !37
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !37
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !37
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %120, i32 %121, i32 %122, i32 %123, i32 %176, i32 %177, i32 %178, i32 %179, i32 %209, i32 %210) #1, !dbg !37
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !37
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !37
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !37
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !37
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %124, i32 %125, i32 %126, i32 %127, i32 %176, i32 %177, i32 %178, i32 %179, i32 %214, i32 %215) #1, !dbg !37
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !37
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !37
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !37
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %128, i32 %129, i32 %130, i32 %131, i32 %183, i32 %184, i32 %185, i32 %186, i32 %199, i32 %200) #1, !dbg !37
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !37
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !37
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !37
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !37
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %132, i32 %133, i32 %134, i32 %135, i32 %183, i32 %184, i32 %185, i32 %186, i32 %204, i32 %205) #1, !dbg !37
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !37
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !37
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !37
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !37
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %136, i32 %137, i32 %138, i32 %139, i32 %183, i32 %184, i32 %185, i32 %186, i32 %209, i32 %210) #1, !dbg !37
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !37
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !37
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !37
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !37
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %140, i32 %141, i32 %142, i32 %143, i32 %183, i32 %184, i32 %185, i32 %186, i32 %214, i32 %215) #1, !dbg !37
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !37
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !37
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !37
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !37
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %144, i32 %145, i32 %146, i32 %147, i32 %190, i32 %191, i32 %192, i32 %193, i32 %199, i32 %200) #1, !dbg !37
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !37
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !37
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !37
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !37
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %148, i32 %149, i32 %150, i32 %151, i32 %190, i32 %191, i32 %192, i32 %193, i32 %204, i32 %205) #1, !dbg !37
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !37
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !37
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !37
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !37
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %152, i32 %153, i32 %154, i32 %155, i32 %190, i32 %191, i32 %192, i32 %193, i32 %209, i32 %210) #1, !dbg !37
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !37
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !37
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !37
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !37
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %156, i32 %157, i32 %158, i32 %159, i32 %190, i32 %191, i32 %192, i32 %193, i32 %214, i32 %215) #1, !dbg !37
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !37
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !37
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !37
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !37
  %296 = add i32 %95, 1, !dbg !36
  %297 = icmp slt i32 %296, 2, !dbg !36
  %298 = select i1 %297, i32 %296, i32 0, !dbg !36
  %299 = shl nuw nsw i64 %indvars.iv, 5, !dbg !38
  %300 = add nuw nsw i64 %299, %89
  %gep196 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %300, !dbg !30
  %301 = shl i32 %298, 11, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %40, i32 %301, !dbg !31
  %302 = select i1 %160, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep196, i32 %302) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep198 = getelementptr i8, ptr addrspace(1) %invariant.gep197, i64 %300, !dbg !33
  %gep200 = getelementptr i8, ptr addrspace(1) %invariant.gep199, i64 %300, !dbg !33
  %303 = shl i32 %298, 12, !dbg !34
  %304 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %303, !dbg !34
  %305 = getelementptr inbounds nuw i8, ptr addrspace(3) %304, i32 %39, !dbg !34
  %306 = getelementptr inbounds nuw i8, ptr addrspace(3) %304, i32 %48, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %305, ptr addrspace(1) %gep198, i32 %302) #1, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %306, ptr addrspace(1) %gep200, i32 %302) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !36
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !36
  br i1 %exitcond.not, label %307, label %93, !dbg !36

307:                                              ; preds = %93
  %308 = and i32 %22, 124, !dbg !22
  %309 = or disjoint i32 %21, %308, !dbg !23
  %.lobit13 = lshr i32 %15, 5, !dbg !19
  %310 = and i32 %.lobit13, 3, !dbg !19
  %311 = or disjoint i32 %310, %14, !dbg !20
  %312 = or disjoint i32 %311, 60, !dbg !20
  %313 = or disjoint i32 %311, 56, !dbg !20
  %314 = or disjoint i32 %311, 52, !dbg !20
  %315 = or disjoint i32 %311, 48, !dbg !20
  %316 = or disjoint i32 %311, 44, !dbg !20
  %317 = or disjoint i32 %311, 40, !dbg !20
  %318 = or disjoint i32 %311, 36, !dbg !20
  %319 = or disjoint i32 %311, 32, !dbg !20
  %320 = or disjoint i32 %311, 28, !dbg !20
  %321 = or disjoint i32 %311, 24, !dbg !20
  %322 = or disjoint i32 %311, 20, !dbg !20
  %323 = or disjoint i32 %311, 16, !dbg !20
  %324 = or disjoint i32 %311, 12, !dbg !20
  %325 = or disjoint i32 %311, 8, !dbg !20
  %326 = or disjoint i32 %311, 4, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %327 = icmp slt i32 %311, 3600, !dbg !39
  %328 = icmp slt i32 %326, 3600, !dbg !39
  %329 = icmp slt i32 %325, 3600, !dbg !39
  %330 = icmp slt i32 %324, 3600, !dbg !39
  %331 = icmp slt i32 %323, 3600, !dbg !39
  %332 = icmp slt i32 %322, 3600, !dbg !39
  %333 = icmp slt i32 %321, 3600, !dbg !39
  %334 = icmp slt i32 %320, 3600, !dbg !39
  %335 = icmp slt i32 %319, 3600, !dbg !39
  %336 = icmp slt i32 %318, 3600, !dbg !39
  %337 = icmp slt i32 %317, 3600, !dbg !39
  %338 = icmp slt i32 %316, 3600, !dbg !39
  %339 = icmp slt i32 %315, 3600, !dbg !39
  %340 = icmp slt i32 %314, 3600, !dbg !39
  %341 = icmp slt i32 %313, 3600, !dbg !39
  %342 = icmp slt i32 %312, 3600, !dbg !39
  %343 = icmp slt i32 %309, 3072, !dbg !40
  %344 = and i1 %327, %343, !dbg !41
  %345 = and i1 %328, %343, !dbg !41
  %346 = and i1 %329, %343, !dbg !41
  %347 = and i1 %330, %343, !dbg !41
  %348 = and i1 %331, %343, !dbg !41
  %349 = and i1 %332, %343, !dbg !41
  %350 = and i1 %333, %343, !dbg !41
  %351 = and i1 %334, %343, !dbg !41
  %352 = and i1 %335, %343, !dbg !41
  %353 = and i1 %336, %343, !dbg !41
  %354 = and i1 %337, %343, !dbg !41
  %355 = and i1 %338, %343, !dbg !41
  %356 = and i1 %339, %343, !dbg !41
  %357 = and i1 %340, %343, !dbg !41
  %358 = and i1 %341, %343, !dbg !41
  %359 = and i1 %342, %343, !dbg !41
  %360 = mul i32 %311, 3072, !dbg !42
  %361 = mul i32 %326, 3072, !dbg !42
  %362 = mul i32 %325, 3072, !dbg !42
  %363 = mul i32 %324, 3072, !dbg !42
  %364 = mul i32 %323, 3072, !dbg !42
  %365 = mul i32 %322, 3072, !dbg !42
  %366 = mul i32 %321, 3072, !dbg !42
  %367 = mul i32 %320, 3072, !dbg !42
  %368 = mul i32 %319, 3072, !dbg !42
  %369 = mul i32 %318, 3072, !dbg !42
  %370 = mul i32 %317, 3072, !dbg !42
  %371 = mul i32 %316, 3072, !dbg !42
  %372 = mul i32 %315, 3072, !dbg !42
  %373 = mul i32 %314, 3072, !dbg !42
  %374 = mul i32 %313, 3072, !dbg !42
  %375 = mul i32 %312, 3072, !dbg !42
  %376 = add i32 %360, %309, !dbg !43
  %377 = add i32 %361, %309, !dbg !43
  %378 = add i32 %362, %309, !dbg !43
  %379 = add i32 %363, %309, !dbg !43
  %380 = add i32 %364, %309, !dbg !43
  %381 = add i32 %365, %309, !dbg !43
  %382 = add i32 %366, %309, !dbg !43
  %383 = add i32 %367, %309, !dbg !43
  %384 = add i32 %368, %309, !dbg !43
  %385 = add i32 %369, %309, !dbg !43
  %386 = add i32 %370, %309, !dbg !43
  %387 = add i32 %371, %309, !dbg !43
  %388 = add i32 %372, %309, !dbg !43
  %389 = add i32 %373, %309, !dbg !43
  %390 = add i32 %374, %309, !dbg !43
  %391 = add i32 %375, %309, !dbg !43
  %392 = sext i32 %376 to i64, !dbg !44
  %393 = getelementptr i32, ptr addrspace(1) %2, i64 %392, !dbg !44
  %394 = sext i32 %377 to i64, !dbg !44
  %395 = getelementptr i32, ptr addrspace(1) %2, i64 %394, !dbg !44
  %396 = sext i32 %378 to i64, !dbg !44
  %397 = getelementptr i32, ptr addrspace(1) %2, i64 %396, !dbg !44
  %398 = sext i32 %379 to i64, !dbg !44
  %399 = getelementptr i32, ptr addrspace(1) %2, i64 %398, !dbg !44
  %400 = sext i32 %380 to i64, !dbg !44
  %401 = getelementptr i32, ptr addrspace(1) %2, i64 %400, !dbg !44
  %402 = sext i32 %381 to i64, !dbg !44
  %403 = getelementptr i32, ptr addrspace(1) %2, i64 %402, !dbg !44
  %404 = sext i32 %382 to i64, !dbg !44
  %405 = getelementptr i32, ptr addrspace(1) %2, i64 %404, !dbg !44
  %406 = sext i32 %383 to i64, !dbg !44
  %407 = getelementptr i32, ptr addrspace(1) %2, i64 %406, !dbg !44
  %408 = sext i32 %384 to i64, !dbg !44
  %409 = getelementptr i32, ptr addrspace(1) %2, i64 %408, !dbg !44
  %410 = sext i32 %385 to i64, !dbg !44
  %411 = getelementptr i32, ptr addrspace(1) %2, i64 %410, !dbg !44
  %412 = sext i32 %386 to i64, !dbg !44
  %413 = getelementptr i32, ptr addrspace(1) %2, i64 %412, !dbg !44
  %414 = sext i32 %387 to i64, !dbg !44
  %415 = getelementptr i32, ptr addrspace(1) %2, i64 %414, !dbg !44
  %416 = sext i32 %388 to i64, !dbg !44
  %417 = getelementptr i32, ptr addrspace(1) %2, i64 %416, !dbg !44
  %418 = sext i32 %389 to i64, !dbg !44
  %419 = getelementptr i32, ptr addrspace(1) %2, i64 %418, !dbg !44
  %420 = sext i32 %390 to i64, !dbg !44
  %421 = getelementptr i32, ptr addrspace(1) %2, i64 %420, !dbg !44
  %422 = sext i32 %391 to i64, !dbg !44
  %423 = getelementptr i32, ptr addrspace(1) %2, i64 %422, !dbg !44
  %424 = shl i32 %15, 1, !dbg !45
  %425 = and i32 %424, 6, !dbg !45
  %426 = and i32 %65, 384, !dbg !45
  %427 = or disjoint i32 %426, %425, !dbg !45
  %428 = shl nuw nsw i32 %17, 5, !dbg !45
  %429 = or disjoint i32 %427, %428, !dbg !45
  %430 = lshr i32 %15, 2, !dbg !45
  %431 = and i32 %430, 24, !dbg !45
  %432 = or disjoint i32 %429, %431, !dbg !45
  %433 = and i32 %22, 508, !dbg !45
  %434 = lshr i32 %429, 5, !dbg !45
  %435 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %434, !dbg !45
  %436 = getelementptr inbounds nuw i32, ptr addrspace(3) %435, i32 %432, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %436, i32 %217, i32 %218, i1 true) #1, !dbg !45
  %437 = or disjoint i32 %432, 1024, !dbg !45
  %438 = lshr i32 %437, 5, !dbg !45
  %439 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %438, !dbg !45
  %440 = getelementptr inbounds nuw i32, ptr addrspace(3) %439, i32 %437, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %440, i32 %219, i32 %220, i1 true) #1, !dbg !45
  %441 = or disjoint i32 %432, 32, !dbg !45
  %442 = getelementptr inbounds nuw i32, ptr addrspace(3) %435, i32 %441, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %442, i32 %222, i32 %223, i1 true) #1, !dbg !45
  %443 = or disjoint i32 %432, 1056, !dbg !45
  %444 = lshr i32 %443, 5, !dbg !45
  %445 = and i32 %444, 134217724, !dbg !45
  %446 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %445, !dbg !45
  %447 = getelementptr inbounds nuw i32, ptr addrspace(3) %446, i32 %443, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %224, i32 %225, i1 true) #1, !dbg !45
  %448 = or disjoint i32 %432, 64, !dbg !45
  %449 = getelementptr inbounds nuw i32, ptr addrspace(3) %435, i32 %448, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %449, i32 %227, i32 %228, i1 true) #1, !dbg !45
  %450 = or disjoint i32 %432, 1088, !dbg !45
  %451 = lshr i32 %450, 5, !dbg !45
  %452 = and i32 %451, 134217724, !dbg !45
  %453 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %452, !dbg !45
  %454 = getelementptr inbounds nuw i32, ptr addrspace(3) %453, i32 %450, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %454, i32 %229, i32 %230, i1 true) #1, !dbg !45
  %455 = or disjoint i32 %432, 96, !dbg !45
  %456 = getelementptr inbounds nuw i32, ptr addrspace(3) %435, i32 %455, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %456, i32 %232, i32 %233, i1 true) #1, !dbg !45
  %457 = or disjoint i32 %432, 1120, !dbg !45
  %458 = lshr i32 %457, 5, !dbg !45
  %459 = and i32 %458, 134217724, !dbg !45
  %460 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %459, !dbg !45
  %461 = getelementptr inbounds nuw i32, ptr addrspace(3) %460, i32 %457, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %461, i32 %234, i32 %235, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %462 = lshr i32 %22, 3, !dbg !45
  %463 = and i32 %462, 48, !dbg !45
  %464 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %463, !dbg !45
  %465 = getelementptr inbounds nuw i32, ptr addrspace(3) %464, i32 %433, !dbg !45
  %466 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !45
  %467 = or disjoint i32 %433, 512, !dbg !45
  %468 = lshr i32 %467, 5, !dbg !45
  %469 = and i32 %468, 28, !dbg !45
  %470 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %469, !dbg !45
  %471 = getelementptr inbounds nuw i32, ptr addrspace(3) %470, i32 %467, !dbg !45
  %472 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !45
  %473 = or disjoint i32 %433, 1024, !dbg !45
  %474 = lshr i32 %473, 5, !dbg !45
  %475 = and i32 %474, 44, !dbg !45
  %476 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %475, !dbg !45
  %477 = getelementptr inbounds nuw i32, ptr addrspace(3) %476, i32 %473, !dbg !45
  %478 = load <4 x i32>, ptr addrspace(3) %477, align 16, !dbg !45
  %479 = or disjoint i32 %433, 1536, !dbg !45
  %480 = lshr i32 %479, 5, !dbg !45
  %481 = and i32 %480, 60, !dbg !45
  %482 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i32 %481, !dbg !45
  %483 = getelementptr inbounds nuw i32, ptr addrspace(3) %482, i32 %479, !dbg !45
  %484 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %436, i32 %237, i32 %238, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %440, i32 %239, i32 %240, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %442, i32 %242, i32 %243, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %244, i32 %245, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %449, i32 %247, i32 %248, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %454, i32 %249, i32 %250, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %456, i32 %252, i32 %253, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %461, i32 %254, i32 %255, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %485 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !45
  %486 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !45
  %487 = load <4 x i32>, ptr addrspace(3) %477, align 16, !dbg !45
  %488 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %436, i32 %257, i32 %258, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %440, i32 %259, i32 %260, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %442, i32 %262, i32 %263, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %264, i32 %265, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %449, i32 %267, i32 %268, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %454, i32 %269, i32 %270, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %456, i32 %272, i32 %273, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %461, i32 %274, i32 %275, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %489 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !45
  %490 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !45
  %491 = load <4 x i32>, ptr addrspace(3) %477, align 16, !dbg !45
  %492 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %436, i32 %277, i32 %278, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %440, i32 %279, i32 %280, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %442, i32 %282, i32 %283, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %447, i32 %284, i32 %285, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %449, i32 %287, i32 %288, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %454, i32 %289, i32 %290, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %456, i32 %292, i32 %293, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %461, i32 %294, i32 %295, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %493 = load <4 x i32>, ptr addrspace(3) %465, align 16, !dbg !45
  %494 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !45
  %495 = load <4 x i32>, ptr addrspace(3) %477, align 16, !dbg !45
  %496 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %466, i64 0, !dbg !45
  %.extract4 = extractelement <4 x i32> %466, i64 1, !dbg !45
  %.extract5 = extractelement <4 x i32> %466, i64 2, !dbg !45
  %.extract6 = extractelement <4 x i32> %466, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %393, i1 %344) #1, !dbg !45
  %.extract7 = extractelement <4 x i32> %472, i64 0, !dbg !45
  %.extract8 = extractelement <4 x i32> %472, i64 1, !dbg !45
  %.extract9 = extractelement <4 x i32> %472, i64 2, !dbg !45
  %.extract10 = extractelement <4 x i32> %472, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %395, i1 %345) #1, !dbg !45
  %.extract11 = extractelement <4 x i32> %478, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %478, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %478, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %478, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %397, i1 %346) #1, !dbg !45
  %.extract15 = extractelement <4 x i32> %484, i64 0, !dbg !45
  %.extract16 = extractelement <4 x i32> %484, i64 1, !dbg !45
  %.extract17 = extractelement <4 x i32> %484, i64 2, !dbg !45
  %.extract18 = extractelement <4 x i32> %484, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %399, i1 %347) #1, !dbg !45
  %.extract19 = extractelement <4 x i32> %485, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %485, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %485, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %485, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %401, i1 %348) #1, !dbg !45
  %.extract23 = extractelement <4 x i32> %486, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %486, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %486, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %486, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %403, i1 %349) #1, !dbg !45
  %.extract27 = extractelement <4 x i32> %487, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %487, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %487, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %487, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %405, i1 %350) #1, !dbg !45
  %.extract31 = extractelement <4 x i32> %488, i64 0, !dbg !45
  %.extract32 = extractelement <4 x i32> %488, i64 1, !dbg !45
  %.extract33 = extractelement <4 x i32> %488, i64 2, !dbg !45
  %.extract34 = extractelement <4 x i32> %488, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %407, i1 %351) #1, !dbg !45
  %.extract35 = extractelement <4 x i32> %489, i64 0, !dbg !45
  %.extract36 = extractelement <4 x i32> %489, i64 1, !dbg !45
  %.extract37 = extractelement <4 x i32> %489, i64 2, !dbg !45
  %.extract38 = extractelement <4 x i32> %489, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %409, i1 %352) #1, !dbg !45
  %.extract39 = extractelement <4 x i32> %490, i64 0, !dbg !45
  %.extract40 = extractelement <4 x i32> %490, i64 1, !dbg !45
  %.extract41 = extractelement <4 x i32> %490, i64 2, !dbg !45
  %.extract42 = extractelement <4 x i32> %490, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %411, i1 %353) #1, !dbg !45
  %.extract43 = extractelement <4 x i32> %491, i64 0, !dbg !45
  %.extract44 = extractelement <4 x i32> %491, i64 1, !dbg !45
  %.extract45 = extractelement <4 x i32> %491, i64 2, !dbg !45
  %.extract46 = extractelement <4 x i32> %491, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %413, i1 %354) #1, !dbg !45
  %.extract47 = extractelement <4 x i32> %492, i64 0, !dbg !45
  %.extract48 = extractelement <4 x i32> %492, i64 1, !dbg !45
  %.extract49 = extractelement <4 x i32> %492, i64 2, !dbg !45
  %.extract50 = extractelement <4 x i32> %492, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %415, i1 %355) #1, !dbg !45
  %.extract51 = extractelement <4 x i32> %493, i64 0, !dbg !45
  %.extract52 = extractelement <4 x i32> %493, i64 1, !dbg !45
  %.extract53 = extractelement <4 x i32> %493, i64 2, !dbg !45
  %.extract54 = extractelement <4 x i32> %493, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract51, i32 %.extract52, i32 %.extract53, i32 %.extract54, ptr addrspace(1) %417, i1 %356) #1, !dbg !45
  %.extract55 = extractelement <4 x i32> %494, i64 0, !dbg !45
  %.extract56 = extractelement <4 x i32> %494, i64 1, !dbg !45
  %.extract57 = extractelement <4 x i32> %494, i64 2, !dbg !45
  %.extract58 = extractelement <4 x i32> %494, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract55, i32 %.extract56, i32 %.extract57, i32 %.extract58, ptr addrspace(1) %419, i1 %357) #1, !dbg !45
  %.extract59 = extractelement <4 x i32> %495, i64 0, !dbg !45
  %.extract60 = extractelement <4 x i32> %495, i64 1, !dbg !45
  %.extract61 = extractelement <4 x i32> %495, i64 2, !dbg !45
  %.extract62 = extractelement <4 x i32> %495, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %421, i1 %358) #1, !dbg !45
  %.extract63 = extractelement <4 x i32> %496, i64 0, !dbg !45
  %.extract64 = extractelement <4 x i32> %496, i64 1, !dbg !45
  %.extract65 = extractelement <4 x i32> %496, i64 2, !dbg !45
  %.extract66 = extractelement <4 x i32> %496, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %423, i1 %359) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coehg7skfgekqdvbq5qa4xbajcom72bci7i2fadqy2hgirjtupoa.py", directory: "/tmp/torchinductor_root/oe")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 66, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 30, scope: !6)
!28 = !DILocation(line: 77, column: 55, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 66, column: 42, scope: !6)
!36 = !DILocation(line: 64, column: 26, scope: !6)
!37 = !DILocation(line: 78, column: 25, scope: !6)
!38 = !DILocation(line: 66, column: 50, scope: !6)
!39 = !DILocation(line: 85, column: 20, scope: !6)
!40 = !DILocation(line: 85, column: 34, scope: !6)
!41 = !DILocation(line: 85, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 26, scope: !6)
!43 = !DILocation(line: 88, column: 21, scope: !6)
!44 = !DILocation(line: 89, column: 25, scope: !6)
!45 = !DILocation(line: 89, column: 67, scope: !6)
!46 = !DILocation(line: 89, column: 4, scope: !6)
