; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = shl i32 %5, 12, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 3, !dbg !11
  %9 = and i32 %8, 504, !dbg !11
  %10 = or disjoint i32 %9, %6, !dbg !12
  %11 = or disjoint i32 %10, 512, !dbg !12
  %12 = or disjoint i32 %10, 1024, !dbg !12
  %13 = or disjoint i32 %10, 1536, !dbg !12
  %14 = or disjoint i32 %10, 2048, !dbg !12
  %15 = or disjoint i32 %10, 2560, !dbg !12
  %16 = or disjoint i32 %10, 3072, !dbg !12
  %17 = or disjoint i32 %10, 3584, !dbg !12
  %18 = icmp slt i32 %10, 236544, !dbg !13
  %19 = icmp slt i32 %11, 236544, !dbg !13
  %20 = icmp slt i32 %12, 236544, !dbg !13
  %21 = icmp slt i32 %13, 236544, !dbg !13
  %22 = icmp slt i32 %14, 236544, !dbg !13
  %23 = icmp slt i32 %15, 236544, !dbg !13
  %24 = icmp slt i32 %16, 236544, !dbg !13
  %25 = icmp slt i32 %17, 236544, !dbg !13
  %26 = srem i32 %10, 3072, !dbg !14
  %27 = srem i32 %11, 3072, !dbg !14
  %28 = srem i32 %12, 3072, !dbg !14
  %29 = srem i32 %13, 3072, !dbg !14
  %30 = srem i32 %14, 3072, !dbg !14
  %31 = srem i32 %15, 3072, !dbg !14
  %32 = srem i32 %16, 3072, !dbg !14
  %33 = srem i32 %17, 3072, !dbg !14
  %34 = sext i32 %10 to i64, !dbg !15
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !15
  %36 = sext i32 %11 to i64, !dbg !15
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !15
  %38 = sext i32 %12 to i64, !dbg !15
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !15
  %40 = sext i32 %13 to i64, !dbg !15
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !15
  %42 = sext i32 %14 to i64, !dbg !15
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !15
  %44 = sext i32 %15 to i64, !dbg !15
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !15
  %46 = sext i32 %16 to i64, !dbg !15
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !15
  %48 = sext i32 %17 to i64, !dbg !15
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !15
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %18) #2, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !16
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !16
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !16
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !16
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !16
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !16
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !16
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #2, !dbg !16
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !16
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !16
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !16
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !16
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !16
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !16
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !16
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %20) #2, !dbg !16
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !16
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !16
  %71 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !16
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !16
  %73 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !16
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !16
  %75 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !16
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !16
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %21) #2, !dbg !16
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !16
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !16
  %80 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !16
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !16
  %82 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !16
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !16
  %84 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !16
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !16
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %22) #2, !dbg !16
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !16
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !16
  %89 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !16
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !16
  %91 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !16
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !16
  %93 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !16
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !16
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %23) #2, !dbg !16
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !16
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !16
  %98 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !16
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !16
  %100 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !16
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !16
  %102 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !16
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !16
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %24) #2, !dbg !16
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !16
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !16
  %107 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !16
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !16
  %109 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !16
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !16
  %111 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !16
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !16
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %25) #2, !dbg !16
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !16
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !16
  %116 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !16
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !16
  %118 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !16
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !16
  %120 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !16
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !16
  %122 = sext i32 %26 to i64, !dbg !17
  %123 = getelementptr bfloat, ptr addrspace(1) %1, i64 %122, !dbg !17
  %124 = sext i32 %27 to i64, !dbg !17
  %125 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !17
  %126 = sext i32 %28 to i64, !dbg !17
  %127 = getelementptr bfloat, ptr addrspace(1) %1, i64 %126, !dbg !17
  %128 = sext i32 %29 to i64, !dbg !17
  %129 = getelementptr bfloat, ptr addrspace(1) %1, i64 %128, !dbg !17
  %130 = sext i32 %30 to i64, !dbg !17
  %131 = getelementptr bfloat, ptr addrspace(1) %1, i64 %130, !dbg !17
  %132 = sext i32 %31 to i64, !dbg !17
  %133 = getelementptr bfloat, ptr addrspace(1) %1, i64 %132, !dbg !17
  %134 = sext i32 %32 to i64, !dbg !17
  %135 = getelementptr bfloat, ptr addrspace(1) %1, i64 %134, !dbg !17
  %136 = sext i32 %33 to i64, !dbg !17
  %137 = getelementptr bfloat, ptr addrspace(1) %1, i64 %136, !dbg !17
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %18) #2, !dbg !18
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !18
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !18
  %141 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !18
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !18
  %143 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !18
  %144 = bitcast i32 %143 to <2 x bfloat>, !dbg !18
  %145 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !18
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !18
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %19) #2, !dbg !18
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !18
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !18
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !18
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !18
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !18
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !18
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !18
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %20) #2, !dbg !18
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !18
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !18
  %159 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !18
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !18
  %161 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !18
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !18
  %163 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !18
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !18
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %21) #2, !dbg !18
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !18
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !18
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !18
  %170 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !18
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !18
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !18
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %22) #2, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !18
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !18
  %177 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !18
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !18
  %179 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !18
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !18
  %181 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !18
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !18
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %23) #2, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !18
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !18
  %186 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !18
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !18
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !18
  %190 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !18
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !18
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %24) #2, !dbg !18
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !18
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !18
  %195 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !18
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !18
  %197 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !18
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !18
  %199 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !18
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !18
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %25) #2, !dbg !18
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !18
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !18
  %204 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !18
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !18
  %206 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !18
  %207 = bitcast i32 %206 to <2 x bfloat>, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !18
  %209 = bitcast i32 %208 to <2 x bfloat>, !dbg !18
  %210 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !19
  %211 = fpext <2 x bfloat> %140 to <2 x float>, !dbg !20
  %212 = fadd <2 x float> %210, %211, !dbg !21
  %213 = extractelement <2 x float> %212, i64 0, !dbg !22
  %214 = fmul float %213, 0x3FFB3B6460000000, !dbg !22
  %215 = extractelement <2 x float> %212, i64 1, !dbg !22
  %216 = fmul float %215, 0x3FFB3B6460000000, !dbg !22
  %217 = fsub float 0.000000e+00, %214, !dbg !23
  %218 = fsub float 0.000000e+00, %216, !dbg !23
  %219 = fmul float %217, 0x3FF7154760000000, !dbg !27
  %220 = tail call float @llvm.nvvm.ex2.approx.f(float %219), !dbg !27
  %221 = fmul float %218, 0x3FF7154760000000, !dbg !27
  %222 = tail call float @llvm.nvvm.ex2.approx.f(float %221), !dbg !27
  %223 = fadd float %220, 1.000000e+00, !dbg !28
  %224 = fadd float %222, 1.000000e+00, !dbg !28
  %225 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %223), !dbg !29
  %226 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %224), !dbg !29
  %227 = insertelement <2 x float> poison, float %225, i64 0, !dbg !30
  %228 = insertelement <2 x float> %227, float %226, i64 1, !dbg !30
  %229 = fmul <2 x float> %212, %228, !dbg !30
  %230 = fptrunc <2 x float> %229 to <2 x bfloat>, !dbg !31
  %231 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !19
  %232 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !20
  %233 = fadd <2 x float> %231, %232, !dbg !21
  %234 = extractelement <2 x float> %233, i64 0, !dbg !22
  %235 = fmul float %234, 0x3FFB3B6460000000, !dbg !22
  %236 = extractelement <2 x float> %233, i64 1, !dbg !22
  %237 = fmul float %236, 0x3FFB3B6460000000, !dbg !22
  %238 = fsub float 0.000000e+00, %235, !dbg !23
  %239 = fsub float 0.000000e+00, %237, !dbg !23
  %240 = fmul float %238, 0x3FF7154760000000, !dbg !27
  %241 = tail call float @llvm.nvvm.ex2.approx.f(float %240), !dbg !27
  %242 = fmul float %239, 0x3FF7154760000000, !dbg !27
  %243 = tail call float @llvm.nvvm.ex2.approx.f(float %242), !dbg !27
  %244 = fadd float %241, 1.000000e+00, !dbg !28
  %245 = fadd float %243, 1.000000e+00, !dbg !28
  %246 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %244), !dbg !29
  %247 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %245), !dbg !29
  %248 = insertelement <2 x float> poison, float %246, i64 0, !dbg !30
  %249 = insertelement <2 x float> %248, float %247, i64 1, !dbg !30
  %250 = fmul <2 x float> %233, %249, !dbg !30
  %251 = fptrunc <2 x float> %250 to <2 x bfloat>, !dbg !31
  %252 = fpext <2 x bfloat> %56 to <2 x float>, !dbg !19
  %253 = fpext <2 x bfloat> %144 to <2 x float>, !dbg !20
  %254 = fadd <2 x float> %252, %253, !dbg !21
  %255 = extractelement <2 x float> %254, i64 0, !dbg !22
  %256 = fmul float %255, 0x3FFB3B6460000000, !dbg !22
  %257 = extractelement <2 x float> %254, i64 1, !dbg !22
  %258 = fmul float %257, 0x3FFB3B6460000000, !dbg !22
  %259 = fsub float 0.000000e+00, %256, !dbg !23
  %260 = fsub float 0.000000e+00, %258, !dbg !23
  %261 = fmul float %259, 0x3FF7154760000000, !dbg !27
  %262 = tail call float @llvm.nvvm.ex2.approx.f(float %261), !dbg !27
  %263 = fmul float %260, 0x3FF7154760000000, !dbg !27
  %264 = tail call float @llvm.nvvm.ex2.approx.f(float %263), !dbg !27
  %265 = fadd float %262, 1.000000e+00, !dbg !28
  %266 = fadd float %264, 1.000000e+00, !dbg !28
  %267 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %265), !dbg !29
  %268 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %266), !dbg !29
  %269 = insertelement <2 x float> poison, float %267, i64 0, !dbg !30
  %270 = insertelement <2 x float> %269, float %268, i64 1, !dbg !30
  %271 = fmul <2 x float> %254, %270, !dbg !30
  %272 = fptrunc <2 x float> %271 to <2 x bfloat>, !dbg !31
  %273 = fpext <2 x bfloat> %58 to <2 x float>, !dbg !19
  %274 = fpext <2 x bfloat> %146 to <2 x float>, !dbg !20
  %275 = fadd <2 x float> %273, %274, !dbg !21
  %276 = extractelement <2 x float> %275, i64 0, !dbg !22
  %277 = fmul float %276, 0x3FFB3B6460000000, !dbg !22
  %278 = extractelement <2 x float> %275, i64 1, !dbg !22
  %279 = fmul float %278, 0x3FFB3B6460000000, !dbg !22
  %280 = fsub float 0.000000e+00, %277, !dbg !23
  %281 = fsub float 0.000000e+00, %279, !dbg !23
  %282 = fmul float %280, 0x3FF7154760000000, !dbg !27
  %283 = tail call float @llvm.nvvm.ex2.approx.f(float %282), !dbg !27
  %284 = fmul float %281, 0x3FF7154760000000, !dbg !27
  %285 = tail call float @llvm.nvvm.ex2.approx.f(float %284), !dbg !27
  %286 = fadd float %283, 1.000000e+00, !dbg !28
  %287 = fadd float %285, 1.000000e+00, !dbg !28
  %288 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %286), !dbg !29
  %289 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %287), !dbg !29
  %290 = insertelement <2 x float> poison, float %288, i64 0, !dbg !30
  %291 = insertelement <2 x float> %290, float %289, i64 1, !dbg !30
  %292 = fmul <2 x float> %275, %291, !dbg !30
  %293 = fptrunc <2 x float> %292 to <2 x bfloat>, !dbg !31
  %294 = fpext <2 x bfloat> %61 to <2 x float>, !dbg !19
  %295 = fpext <2 x bfloat> %149 to <2 x float>, !dbg !20
  %296 = fadd <2 x float> %294, %295, !dbg !21
  %297 = extractelement <2 x float> %296, i64 0, !dbg !22
  %298 = fmul float %297, 0x3FFB3B6460000000, !dbg !22
  %299 = extractelement <2 x float> %296, i64 1, !dbg !22
  %300 = fmul float %299, 0x3FFB3B6460000000, !dbg !22
  %301 = fsub float 0.000000e+00, %298, !dbg !23
  %302 = fsub float 0.000000e+00, %300, !dbg !23
  %303 = fmul float %301, 0x3FF7154760000000, !dbg !27
  %304 = tail call float @llvm.nvvm.ex2.approx.f(float %303), !dbg !27
  %305 = fmul float %302, 0x3FF7154760000000, !dbg !27
  %306 = tail call float @llvm.nvvm.ex2.approx.f(float %305), !dbg !27
  %307 = fadd float %304, 1.000000e+00, !dbg !28
  %308 = fadd float %306, 1.000000e+00, !dbg !28
  %309 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %307), !dbg !29
  %310 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %308), !dbg !29
  %311 = insertelement <2 x float> poison, float %309, i64 0, !dbg !30
  %312 = insertelement <2 x float> %311, float %310, i64 1, !dbg !30
  %313 = fmul <2 x float> %296, %312, !dbg !30
  %314 = fptrunc <2 x float> %313 to <2 x bfloat>, !dbg !31
  %315 = fpext <2 x bfloat> %63 to <2 x float>, !dbg !19
  %316 = fpext <2 x bfloat> %151 to <2 x float>, !dbg !20
  %317 = fadd <2 x float> %315, %316, !dbg !21
  %318 = extractelement <2 x float> %317, i64 0, !dbg !22
  %319 = fmul float %318, 0x3FFB3B6460000000, !dbg !22
  %320 = extractelement <2 x float> %317, i64 1, !dbg !22
  %321 = fmul float %320, 0x3FFB3B6460000000, !dbg !22
  %322 = fsub float 0.000000e+00, %319, !dbg !23
  %323 = fsub float 0.000000e+00, %321, !dbg !23
  %324 = fmul float %322, 0x3FF7154760000000, !dbg !27
  %325 = tail call float @llvm.nvvm.ex2.approx.f(float %324), !dbg !27
  %326 = fmul float %323, 0x3FF7154760000000, !dbg !27
  %327 = tail call float @llvm.nvvm.ex2.approx.f(float %326), !dbg !27
  %328 = fadd float %325, 1.000000e+00, !dbg !28
  %329 = fadd float %327, 1.000000e+00, !dbg !28
  %330 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %328), !dbg !29
  %331 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %329), !dbg !29
  %332 = insertelement <2 x float> poison, float %330, i64 0, !dbg !30
  %333 = insertelement <2 x float> %332, float %331, i64 1, !dbg !30
  %334 = fmul <2 x float> %317, %333, !dbg !30
  %335 = fptrunc <2 x float> %334 to <2 x bfloat>, !dbg !31
  %336 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !19
  %337 = fpext <2 x bfloat> %153 to <2 x float>, !dbg !20
  %338 = fadd <2 x float> %336, %337, !dbg !21
  %339 = extractelement <2 x float> %338, i64 0, !dbg !22
  %340 = fmul float %339, 0x3FFB3B6460000000, !dbg !22
  %341 = extractelement <2 x float> %338, i64 1, !dbg !22
  %342 = fmul float %341, 0x3FFB3B6460000000, !dbg !22
  %343 = fsub float 0.000000e+00, %340, !dbg !23
  %344 = fsub float 0.000000e+00, %342, !dbg !23
  %345 = fmul float %343, 0x3FF7154760000000, !dbg !27
  %346 = tail call float @llvm.nvvm.ex2.approx.f(float %345), !dbg !27
  %347 = fmul float %344, 0x3FF7154760000000, !dbg !27
  %348 = tail call float @llvm.nvvm.ex2.approx.f(float %347), !dbg !27
  %349 = fadd float %346, 1.000000e+00, !dbg !28
  %350 = fadd float %348, 1.000000e+00, !dbg !28
  %351 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %349), !dbg !29
  %352 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %350), !dbg !29
  %353 = insertelement <2 x float> poison, float %351, i64 0, !dbg !30
  %354 = insertelement <2 x float> %353, float %352, i64 1, !dbg !30
  %355 = fmul <2 x float> %338, %354, !dbg !30
  %356 = fptrunc <2 x float> %355 to <2 x bfloat>, !dbg !31
  %357 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !19
  %358 = fpext <2 x bfloat> %155 to <2 x float>, !dbg !20
  %359 = fadd <2 x float> %357, %358, !dbg !21
  %360 = extractelement <2 x float> %359, i64 0, !dbg !22
  %361 = fmul float %360, 0x3FFB3B6460000000, !dbg !22
  %362 = extractelement <2 x float> %359, i64 1, !dbg !22
  %363 = fmul float %362, 0x3FFB3B6460000000, !dbg !22
  %364 = fsub float 0.000000e+00, %361, !dbg !23
  %365 = fsub float 0.000000e+00, %363, !dbg !23
  %366 = fmul float %364, 0x3FF7154760000000, !dbg !27
  %367 = tail call float @llvm.nvvm.ex2.approx.f(float %366), !dbg !27
  %368 = fmul float %365, 0x3FF7154760000000, !dbg !27
  %369 = tail call float @llvm.nvvm.ex2.approx.f(float %368), !dbg !27
  %370 = fadd float %367, 1.000000e+00, !dbg !28
  %371 = fadd float %369, 1.000000e+00, !dbg !28
  %372 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %370), !dbg !29
  %373 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %371), !dbg !29
  %374 = insertelement <2 x float> poison, float %372, i64 0, !dbg !30
  %375 = insertelement <2 x float> %374, float %373, i64 1, !dbg !30
  %376 = fmul <2 x float> %359, %375, !dbg !30
  %377 = fptrunc <2 x float> %376 to <2 x bfloat>, !dbg !31
  %378 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !19
  %379 = fpext <2 x bfloat> %158 to <2 x float>, !dbg !20
  %380 = fadd <2 x float> %378, %379, !dbg !21
  %381 = extractelement <2 x float> %380, i64 0, !dbg !22
  %382 = fmul float %381, 0x3FFB3B6460000000, !dbg !22
  %383 = extractelement <2 x float> %380, i64 1, !dbg !22
  %384 = fmul float %383, 0x3FFB3B6460000000, !dbg !22
  %385 = fsub float 0.000000e+00, %382, !dbg !23
  %386 = fsub float 0.000000e+00, %384, !dbg !23
  %387 = fmul float %385, 0x3FF7154760000000, !dbg !27
  %388 = tail call float @llvm.nvvm.ex2.approx.f(float %387), !dbg !27
  %389 = fmul float %386, 0x3FF7154760000000, !dbg !27
  %390 = tail call float @llvm.nvvm.ex2.approx.f(float %389), !dbg !27
  %391 = fadd float %388, 1.000000e+00, !dbg !28
  %392 = fadd float %390, 1.000000e+00, !dbg !28
  %393 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %391), !dbg !29
  %394 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %392), !dbg !29
  %395 = insertelement <2 x float> poison, float %393, i64 0, !dbg !30
  %396 = insertelement <2 x float> %395, float %394, i64 1, !dbg !30
  %397 = fmul <2 x float> %380, %396, !dbg !30
  %398 = fptrunc <2 x float> %397 to <2 x bfloat>, !dbg !31
  %399 = fpext <2 x bfloat> %72 to <2 x float>, !dbg !19
  %400 = fpext <2 x bfloat> %160 to <2 x float>, !dbg !20
  %401 = fadd <2 x float> %399, %400, !dbg !21
  %402 = extractelement <2 x float> %401, i64 0, !dbg !22
  %403 = fmul float %402, 0x3FFB3B6460000000, !dbg !22
  %404 = extractelement <2 x float> %401, i64 1, !dbg !22
  %405 = fmul float %404, 0x3FFB3B6460000000, !dbg !22
  %406 = fsub float 0.000000e+00, %403, !dbg !23
  %407 = fsub float 0.000000e+00, %405, !dbg !23
  %408 = fmul float %406, 0x3FF7154760000000, !dbg !27
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !27
  %410 = fmul float %407, 0x3FF7154760000000, !dbg !27
  %411 = tail call float @llvm.nvvm.ex2.approx.f(float %410), !dbg !27
  %412 = fadd float %409, 1.000000e+00, !dbg !28
  %413 = fadd float %411, 1.000000e+00, !dbg !28
  %414 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %412), !dbg !29
  %415 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %413), !dbg !29
  %416 = insertelement <2 x float> poison, float %414, i64 0, !dbg !30
  %417 = insertelement <2 x float> %416, float %415, i64 1, !dbg !30
  %418 = fmul <2 x float> %401, %417, !dbg !30
  %419 = fptrunc <2 x float> %418 to <2 x bfloat>, !dbg !31
  %420 = fpext <2 x bfloat> %74 to <2 x float>, !dbg !19
  %421 = fpext <2 x bfloat> %162 to <2 x float>, !dbg !20
  %422 = fadd <2 x float> %420, %421, !dbg !21
  %423 = extractelement <2 x float> %422, i64 0, !dbg !22
  %424 = fmul float %423, 0x3FFB3B6460000000, !dbg !22
  %425 = extractelement <2 x float> %422, i64 1, !dbg !22
  %426 = fmul float %425, 0x3FFB3B6460000000, !dbg !22
  %427 = fsub float 0.000000e+00, %424, !dbg !23
  %428 = fsub float 0.000000e+00, %426, !dbg !23
  %429 = fmul float %427, 0x3FF7154760000000, !dbg !27
  %430 = tail call float @llvm.nvvm.ex2.approx.f(float %429), !dbg !27
  %431 = fmul float %428, 0x3FF7154760000000, !dbg !27
  %432 = tail call float @llvm.nvvm.ex2.approx.f(float %431), !dbg !27
  %433 = fadd float %430, 1.000000e+00, !dbg !28
  %434 = fadd float %432, 1.000000e+00, !dbg !28
  %435 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %433), !dbg !29
  %436 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %434), !dbg !29
  %437 = insertelement <2 x float> poison, float %435, i64 0, !dbg !30
  %438 = insertelement <2 x float> %437, float %436, i64 1, !dbg !30
  %439 = fmul <2 x float> %422, %438, !dbg !30
  %440 = fptrunc <2 x float> %439 to <2 x bfloat>, !dbg !31
  %441 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !19
  %442 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !20
  %443 = fadd <2 x float> %441, %442, !dbg !21
  %444 = extractelement <2 x float> %443, i64 0, !dbg !22
  %445 = fmul float %444, 0x3FFB3B6460000000, !dbg !22
  %446 = extractelement <2 x float> %443, i64 1, !dbg !22
  %447 = fmul float %446, 0x3FFB3B6460000000, !dbg !22
  %448 = fsub float 0.000000e+00, %445, !dbg !23
  %449 = fsub float 0.000000e+00, %447, !dbg !23
  %450 = fmul float %448, 0x3FF7154760000000, !dbg !27
  %451 = tail call float @llvm.nvvm.ex2.approx.f(float %450), !dbg !27
  %452 = fmul float %449, 0x3FF7154760000000, !dbg !27
  %453 = tail call float @llvm.nvvm.ex2.approx.f(float %452), !dbg !27
  %454 = fadd float %451, 1.000000e+00, !dbg !28
  %455 = fadd float %453, 1.000000e+00, !dbg !28
  %456 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %454), !dbg !29
  %457 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %455), !dbg !29
  %458 = insertelement <2 x float> poison, float %456, i64 0, !dbg !30
  %459 = insertelement <2 x float> %458, float %457, i64 1, !dbg !30
  %460 = fmul <2 x float> %443, %459, !dbg !30
  %461 = fptrunc <2 x float> %460 to <2 x bfloat>, !dbg !31
  %462 = fpext <2 x bfloat> %79 to <2 x float>, !dbg !19
  %463 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !20
  %464 = fadd <2 x float> %462, %463, !dbg !21
  %465 = extractelement <2 x float> %464, i64 0, !dbg !22
  %466 = fmul float %465, 0x3FFB3B6460000000, !dbg !22
  %467 = extractelement <2 x float> %464, i64 1, !dbg !22
  %468 = fmul float %467, 0x3FFB3B6460000000, !dbg !22
  %469 = fsub float 0.000000e+00, %466, !dbg !23
  %470 = fsub float 0.000000e+00, %468, !dbg !23
  %471 = fmul float %469, 0x3FF7154760000000, !dbg !27
  %472 = tail call float @llvm.nvvm.ex2.approx.f(float %471), !dbg !27
  %473 = fmul float %470, 0x3FF7154760000000, !dbg !27
  %474 = tail call float @llvm.nvvm.ex2.approx.f(float %473), !dbg !27
  %475 = fadd float %472, 1.000000e+00, !dbg !28
  %476 = fadd float %474, 1.000000e+00, !dbg !28
  %477 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %475), !dbg !29
  %478 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %476), !dbg !29
  %479 = insertelement <2 x float> poison, float %477, i64 0, !dbg !30
  %480 = insertelement <2 x float> %479, float %478, i64 1, !dbg !30
  %481 = fmul <2 x float> %464, %480, !dbg !30
  %482 = fptrunc <2 x float> %481 to <2 x bfloat>, !dbg !31
  %483 = fpext <2 x bfloat> %81 to <2 x float>, !dbg !19
  %484 = fpext <2 x bfloat> %169 to <2 x float>, !dbg !20
  %485 = fadd <2 x float> %483, %484, !dbg !21
  %486 = extractelement <2 x float> %485, i64 0, !dbg !22
  %487 = fmul float %486, 0x3FFB3B6460000000, !dbg !22
  %488 = extractelement <2 x float> %485, i64 1, !dbg !22
  %489 = fmul float %488, 0x3FFB3B6460000000, !dbg !22
  %490 = fsub float 0.000000e+00, %487, !dbg !23
  %491 = fsub float 0.000000e+00, %489, !dbg !23
  %492 = fmul float %490, 0x3FF7154760000000, !dbg !27
  %493 = tail call float @llvm.nvvm.ex2.approx.f(float %492), !dbg !27
  %494 = fmul float %491, 0x3FF7154760000000, !dbg !27
  %495 = tail call float @llvm.nvvm.ex2.approx.f(float %494), !dbg !27
  %496 = fadd float %493, 1.000000e+00, !dbg !28
  %497 = fadd float %495, 1.000000e+00, !dbg !28
  %498 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %496), !dbg !29
  %499 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %497), !dbg !29
  %500 = insertelement <2 x float> poison, float %498, i64 0, !dbg !30
  %501 = insertelement <2 x float> %500, float %499, i64 1, !dbg !30
  %502 = fmul <2 x float> %485, %501, !dbg !30
  %503 = fptrunc <2 x float> %502 to <2 x bfloat>, !dbg !31
  %504 = fpext <2 x bfloat> %83 to <2 x float>, !dbg !19
  %505 = fpext <2 x bfloat> %171 to <2 x float>, !dbg !20
  %506 = fadd <2 x float> %504, %505, !dbg !21
  %507 = extractelement <2 x float> %506, i64 0, !dbg !22
  %508 = fmul float %507, 0x3FFB3B6460000000, !dbg !22
  %509 = extractelement <2 x float> %506, i64 1, !dbg !22
  %510 = fmul float %509, 0x3FFB3B6460000000, !dbg !22
  %511 = fsub float 0.000000e+00, %508, !dbg !23
  %512 = fsub float 0.000000e+00, %510, !dbg !23
  %513 = fmul float %511, 0x3FF7154760000000, !dbg !27
  %514 = tail call float @llvm.nvvm.ex2.approx.f(float %513), !dbg !27
  %515 = fmul float %512, 0x3FF7154760000000, !dbg !27
  %516 = tail call float @llvm.nvvm.ex2.approx.f(float %515), !dbg !27
  %517 = fadd float %514, 1.000000e+00, !dbg !28
  %518 = fadd float %516, 1.000000e+00, !dbg !28
  %519 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %517), !dbg !29
  %520 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %518), !dbg !29
  %521 = insertelement <2 x float> poison, float %519, i64 0, !dbg !30
  %522 = insertelement <2 x float> %521, float %520, i64 1, !dbg !30
  %523 = fmul <2 x float> %506, %522, !dbg !30
  %524 = fptrunc <2 x float> %523 to <2 x bfloat>, !dbg !31
  %525 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !19
  %526 = fpext <2 x bfloat> %173 to <2 x float>, !dbg !20
  %527 = fadd <2 x float> %525, %526, !dbg !21
  %528 = extractelement <2 x float> %527, i64 0, !dbg !22
  %529 = fmul float %528, 0x3FFB3B6460000000, !dbg !22
  %530 = extractelement <2 x float> %527, i64 1, !dbg !22
  %531 = fmul float %530, 0x3FFB3B6460000000, !dbg !22
  %532 = fsub float 0.000000e+00, %529, !dbg !23
  %533 = fsub float 0.000000e+00, %531, !dbg !23
  %534 = fmul float %532, 0x3FF7154760000000, !dbg !27
  %535 = tail call float @llvm.nvvm.ex2.approx.f(float %534), !dbg !27
  %536 = fmul float %533, 0x3FF7154760000000, !dbg !27
  %537 = tail call float @llvm.nvvm.ex2.approx.f(float %536), !dbg !27
  %538 = fadd float %535, 1.000000e+00, !dbg !28
  %539 = fadd float %537, 1.000000e+00, !dbg !28
  %540 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %538), !dbg !29
  %541 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %539), !dbg !29
  %542 = insertelement <2 x float> poison, float %540, i64 0, !dbg !30
  %543 = insertelement <2 x float> %542, float %541, i64 1, !dbg !30
  %544 = fmul <2 x float> %527, %543, !dbg !30
  %545 = fptrunc <2 x float> %544 to <2 x bfloat>, !dbg !31
  %546 = fpext <2 x bfloat> %88 to <2 x float>, !dbg !19
  %547 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !20
  %548 = fadd <2 x float> %546, %547, !dbg !21
  %549 = extractelement <2 x float> %548, i64 0, !dbg !22
  %550 = fmul float %549, 0x3FFB3B6460000000, !dbg !22
  %551 = extractelement <2 x float> %548, i64 1, !dbg !22
  %552 = fmul float %551, 0x3FFB3B6460000000, !dbg !22
  %553 = fsub float 0.000000e+00, %550, !dbg !23
  %554 = fsub float 0.000000e+00, %552, !dbg !23
  %555 = fmul float %553, 0x3FF7154760000000, !dbg !27
  %556 = tail call float @llvm.nvvm.ex2.approx.f(float %555), !dbg !27
  %557 = fmul float %554, 0x3FF7154760000000, !dbg !27
  %558 = tail call float @llvm.nvvm.ex2.approx.f(float %557), !dbg !27
  %559 = fadd float %556, 1.000000e+00, !dbg !28
  %560 = fadd float %558, 1.000000e+00, !dbg !28
  %561 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %559), !dbg !29
  %562 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %560), !dbg !29
  %563 = insertelement <2 x float> poison, float %561, i64 0, !dbg !30
  %564 = insertelement <2 x float> %563, float %562, i64 1, !dbg !30
  %565 = fmul <2 x float> %548, %564, !dbg !30
  %566 = fptrunc <2 x float> %565 to <2 x bfloat>, !dbg !31
  %567 = fpext <2 x bfloat> %90 to <2 x float>, !dbg !19
  %568 = fpext <2 x bfloat> %178 to <2 x float>, !dbg !20
  %569 = fadd <2 x float> %567, %568, !dbg !21
  %570 = extractelement <2 x float> %569, i64 0, !dbg !22
  %571 = fmul float %570, 0x3FFB3B6460000000, !dbg !22
  %572 = extractelement <2 x float> %569, i64 1, !dbg !22
  %573 = fmul float %572, 0x3FFB3B6460000000, !dbg !22
  %574 = fsub float 0.000000e+00, %571, !dbg !23
  %575 = fsub float 0.000000e+00, %573, !dbg !23
  %576 = fmul float %574, 0x3FF7154760000000, !dbg !27
  %577 = tail call float @llvm.nvvm.ex2.approx.f(float %576), !dbg !27
  %578 = fmul float %575, 0x3FF7154760000000, !dbg !27
  %579 = tail call float @llvm.nvvm.ex2.approx.f(float %578), !dbg !27
  %580 = fadd float %577, 1.000000e+00, !dbg !28
  %581 = fadd float %579, 1.000000e+00, !dbg !28
  %582 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %580), !dbg !29
  %583 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %581), !dbg !29
  %584 = insertelement <2 x float> poison, float %582, i64 0, !dbg !30
  %585 = insertelement <2 x float> %584, float %583, i64 1, !dbg !30
  %586 = fmul <2 x float> %569, %585, !dbg !30
  %587 = fptrunc <2 x float> %586 to <2 x bfloat>, !dbg !31
  %588 = fpext <2 x bfloat> %92 to <2 x float>, !dbg !19
  %589 = fpext <2 x bfloat> %180 to <2 x float>, !dbg !20
  %590 = fadd <2 x float> %588, %589, !dbg !21
  %591 = extractelement <2 x float> %590, i64 0, !dbg !22
  %592 = fmul float %591, 0x3FFB3B6460000000, !dbg !22
  %593 = extractelement <2 x float> %590, i64 1, !dbg !22
  %594 = fmul float %593, 0x3FFB3B6460000000, !dbg !22
  %595 = fsub float 0.000000e+00, %592, !dbg !23
  %596 = fsub float 0.000000e+00, %594, !dbg !23
  %597 = fmul float %595, 0x3FF7154760000000, !dbg !27
  %598 = tail call float @llvm.nvvm.ex2.approx.f(float %597), !dbg !27
  %599 = fmul float %596, 0x3FF7154760000000, !dbg !27
  %600 = tail call float @llvm.nvvm.ex2.approx.f(float %599), !dbg !27
  %601 = fadd float %598, 1.000000e+00, !dbg !28
  %602 = fadd float %600, 1.000000e+00, !dbg !28
  %603 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %601), !dbg !29
  %604 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %602), !dbg !29
  %605 = insertelement <2 x float> poison, float %603, i64 0, !dbg !30
  %606 = insertelement <2 x float> %605, float %604, i64 1, !dbg !30
  %607 = fmul <2 x float> %590, %606, !dbg !30
  %608 = fptrunc <2 x float> %607 to <2 x bfloat>, !dbg !31
  %609 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !19
  %610 = fpext <2 x bfloat> %182 to <2 x float>, !dbg !20
  %611 = fadd <2 x float> %609, %610, !dbg !21
  %612 = extractelement <2 x float> %611, i64 0, !dbg !22
  %613 = fmul float %612, 0x3FFB3B6460000000, !dbg !22
  %614 = extractelement <2 x float> %611, i64 1, !dbg !22
  %615 = fmul float %614, 0x3FFB3B6460000000, !dbg !22
  %616 = fsub float 0.000000e+00, %613, !dbg !23
  %617 = fsub float 0.000000e+00, %615, !dbg !23
  %618 = fmul float %616, 0x3FF7154760000000, !dbg !27
  %619 = tail call float @llvm.nvvm.ex2.approx.f(float %618), !dbg !27
  %620 = fmul float %617, 0x3FF7154760000000, !dbg !27
  %621 = tail call float @llvm.nvvm.ex2.approx.f(float %620), !dbg !27
  %622 = fadd float %619, 1.000000e+00, !dbg !28
  %623 = fadd float %621, 1.000000e+00, !dbg !28
  %624 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %622), !dbg !29
  %625 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %623), !dbg !29
  %626 = insertelement <2 x float> poison, float %624, i64 0, !dbg !30
  %627 = insertelement <2 x float> %626, float %625, i64 1, !dbg !30
  %628 = fmul <2 x float> %611, %627, !dbg !30
  %629 = fptrunc <2 x float> %628 to <2 x bfloat>, !dbg !31
  %630 = fpext <2 x bfloat> %97 to <2 x float>, !dbg !19
  %631 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !20
  %632 = fadd <2 x float> %630, %631, !dbg !21
  %633 = extractelement <2 x float> %632, i64 0, !dbg !22
  %634 = fmul float %633, 0x3FFB3B6460000000, !dbg !22
  %635 = extractelement <2 x float> %632, i64 1, !dbg !22
  %636 = fmul float %635, 0x3FFB3B6460000000, !dbg !22
  %637 = fsub float 0.000000e+00, %634, !dbg !23
  %638 = fsub float 0.000000e+00, %636, !dbg !23
  %639 = fmul float %637, 0x3FF7154760000000, !dbg !27
  %640 = tail call float @llvm.nvvm.ex2.approx.f(float %639), !dbg !27
  %641 = fmul float %638, 0x3FF7154760000000, !dbg !27
  %642 = tail call float @llvm.nvvm.ex2.approx.f(float %641), !dbg !27
  %643 = fadd float %640, 1.000000e+00, !dbg !28
  %644 = fadd float %642, 1.000000e+00, !dbg !28
  %645 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %643), !dbg !29
  %646 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %644), !dbg !29
  %647 = insertelement <2 x float> poison, float %645, i64 0, !dbg !30
  %648 = insertelement <2 x float> %647, float %646, i64 1, !dbg !30
  %649 = fmul <2 x float> %632, %648, !dbg !30
  %650 = fptrunc <2 x float> %649 to <2 x bfloat>, !dbg !31
  %651 = fpext <2 x bfloat> %99 to <2 x float>, !dbg !19
  %652 = fpext <2 x bfloat> %187 to <2 x float>, !dbg !20
  %653 = fadd <2 x float> %651, %652, !dbg !21
  %654 = extractelement <2 x float> %653, i64 0, !dbg !22
  %655 = fmul float %654, 0x3FFB3B6460000000, !dbg !22
  %656 = extractelement <2 x float> %653, i64 1, !dbg !22
  %657 = fmul float %656, 0x3FFB3B6460000000, !dbg !22
  %658 = fsub float 0.000000e+00, %655, !dbg !23
  %659 = fsub float 0.000000e+00, %657, !dbg !23
  %660 = fmul float %658, 0x3FF7154760000000, !dbg !27
  %661 = tail call float @llvm.nvvm.ex2.approx.f(float %660), !dbg !27
  %662 = fmul float %659, 0x3FF7154760000000, !dbg !27
  %663 = tail call float @llvm.nvvm.ex2.approx.f(float %662), !dbg !27
  %664 = fadd float %661, 1.000000e+00, !dbg !28
  %665 = fadd float %663, 1.000000e+00, !dbg !28
  %666 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %664), !dbg !29
  %667 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %665), !dbg !29
  %668 = insertelement <2 x float> poison, float %666, i64 0, !dbg !30
  %669 = insertelement <2 x float> %668, float %667, i64 1, !dbg !30
  %670 = fmul <2 x float> %653, %669, !dbg !30
  %671 = fptrunc <2 x float> %670 to <2 x bfloat>, !dbg !31
  %672 = fpext <2 x bfloat> %101 to <2 x float>, !dbg !19
  %673 = fpext <2 x bfloat> %189 to <2 x float>, !dbg !20
  %674 = fadd <2 x float> %672, %673, !dbg !21
  %675 = extractelement <2 x float> %674, i64 0, !dbg !22
  %676 = fmul float %675, 0x3FFB3B6460000000, !dbg !22
  %677 = extractelement <2 x float> %674, i64 1, !dbg !22
  %678 = fmul float %677, 0x3FFB3B6460000000, !dbg !22
  %679 = fsub float 0.000000e+00, %676, !dbg !23
  %680 = fsub float 0.000000e+00, %678, !dbg !23
  %681 = fmul float %679, 0x3FF7154760000000, !dbg !27
  %682 = tail call float @llvm.nvvm.ex2.approx.f(float %681), !dbg !27
  %683 = fmul float %680, 0x3FF7154760000000, !dbg !27
  %684 = tail call float @llvm.nvvm.ex2.approx.f(float %683), !dbg !27
  %685 = fadd float %682, 1.000000e+00, !dbg !28
  %686 = fadd float %684, 1.000000e+00, !dbg !28
  %687 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %685), !dbg !29
  %688 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %686), !dbg !29
  %689 = insertelement <2 x float> poison, float %687, i64 0, !dbg !30
  %690 = insertelement <2 x float> %689, float %688, i64 1, !dbg !30
  %691 = fmul <2 x float> %674, %690, !dbg !30
  %692 = fptrunc <2 x float> %691 to <2 x bfloat>, !dbg !31
  %693 = fpext <2 x bfloat> %103 to <2 x float>, !dbg !19
  %694 = fpext <2 x bfloat> %191 to <2 x float>, !dbg !20
  %695 = fadd <2 x float> %693, %694, !dbg !21
  %696 = extractelement <2 x float> %695, i64 0, !dbg !22
  %697 = fmul float %696, 0x3FFB3B6460000000, !dbg !22
  %698 = extractelement <2 x float> %695, i64 1, !dbg !22
  %699 = fmul float %698, 0x3FFB3B6460000000, !dbg !22
  %700 = fsub float 0.000000e+00, %697, !dbg !23
  %701 = fsub float 0.000000e+00, %699, !dbg !23
  %702 = fmul float %700, 0x3FF7154760000000, !dbg !27
  %703 = tail call float @llvm.nvvm.ex2.approx.f(float %702), !dbg !27
  %704 = fmul float %701, 0x3FF7154760000000, !dbg !27
  %705 = tail call float @llvm.nvvm.ex2.approx.f(float %704), !dbg !27
  %706 = fadd float %703, 1.000000e+00, !dbg !28
  %707 = fadd float %705, 1.000000e+00, !dbg !28
  %708 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %706), !dbg !29
  %709 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %707), !dbg !29
  %710 = insertelement <2 x float> poison, float %708, i64 0, !dbg !30
  %711 = insertelement <2 x float> %710, float %709, i64 1, !dbg !30
  %712 = fmul <2 x float> %695, %711, !dbg !30
  %713 = fptrunc <2 x float> %712 to <2 x bfloat>, !dbg !31
  %714 = fpext <2 x bfloat> %106 to <2 x float>, !dbg !19
  %715 = fpext <2 x bfloat> %194 to <2 x float>, !dbg !20
  %716 = fadd <2 x float> %714, %715, !dbg !21
  %717 = extractelement <2 x float> %716, i64 0, !dbg !22
  %718 = fmul float %717, 0x3FFB3B6460000000, !dbg !22
  %719 = extractelement <2 x float> %716, i64 1, !dbg !22
  %720 = fmul float %719, 0x3FFB3B6460000000, !dbg !22
  %721 = fsub float 0.000000e+00, %718, !dbg !23
  %722 = fsub float 0.000000e+00, %720, !dbg !23
  %723 = fmul float %721, 0x3FF7154760000000, !dbg !27
  %724 = tail call float @llvm.nvvm.ex2.approx.f(float %723), !dbg !27
  %725 = fmul float %722, 0x3FF7154760000000, !dbg !27
  %726 = tail call float @llvm.nvvm.ex2.approx.f(float %725), !dbg !27
  %727 = fadd float %724, 1.000000e+00, !dbg !28
  %728 = fadd float %726, 1.000000e+00, !dbg !28
  %729 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %727), !dbg !29
  %730 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %728), !dbg !29
  %731 = insertelement <2 x float> poison, float %729, i64 0, !dbg !30
  %732 = insertelement <2 x float> %731, float %730, i64 1, !dbg !30
  %733 = fmul <2 x float> %716, %732, !dbg !30
  %734 = fptrunc <2 x float> %733 to <2 x bfloat>, !dbg !31
  %735 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !19
  %736 = fpext <2 x bfloat> %196 to <2 x float>, !dbg !20
  %737 = fadd <2 x float> %735, %736, !dbg !21
  %738 = extractelement <2 x float> %737, i64 0, !dbg !22
  %739 = fmul float %738, 0x3FFB3B6460000000, !dbg !22
  %740 = extractelement <2 x float> %737, i64 1, !dbg !22
  %741 = fmul float %740, 0x3FFB3B6460000000, !dbg !22
  %742 = fsub float 0.000000e+00, %739, !dbg !23
  %743 = fsub float 0.000000e+00, %741, !dbg !23
  %744 = fmul float %742, 0x3FF7154760000000, !dbg !27
  %745 = tail call float @llvm.nvvm.ex2.approx.f(float %744), !dbg !27
  %746 = fmul float %743, 0x3FF7154760000000, !dbg !27
  %747 = tail call float @llvm.nvvm.ex2.approx.f(float %746), !dbg !27
  %748 = fadd float %745, 1.000000e+00, !dbg !28
  %749 = fadd float %747, 1.000000e+00, !dbg !28
  %750 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %748), !dbg !29
  %751 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %749), !dbg !29
  %752 = insertelement <2 x float> poison, float %750, i64 0, !dbg !30
  %753 = insertelement <2 x float> %752, float %751, i64 1, !dbg !30
  %754 = fmul <2 x float> %737, %753, !dbg !30
  %755 = fptrunc <2 x float> %754 to <2 x bfloat>, !dbg !31
  %756 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !19
  %757 = fpext <2 x bfloat> %198 to <2 x float>, !dbg !20
  %758 = fadd <2 x float> %756, %757, !dbg !21
  %759 = extractelement <2 x float> %758, i64 0, !dbg !22
  %760 = fmul float %759, 0x3FFB3B6460000000, !dbg !22
  %761 = extractelement <2 x float> %758, i64 1, !dbg !22
  %762 = fmul float %761, 0x3FFB3B6460000000, !dbg !22
  %763 = fsub float 0.000000e+00, %760, !dbg !23
  %764 = fsub float 0.000000e+00, %762, !dbg !23
  %765 = fmul float %763, 0x3FF7154760000000, !dbg !27
  %766 = tail call float @llvm.nvvm.ex2.approx.f(float %765), !dbg !27
  %767 = fmul float %764, 0x3FF7154760000000, !dbg !27
  %768 = tail call float @llvm.nvvm.ex2.approx.f(float %767), !dbg !27
  %769 = fadd float %766, 1.000000e+00, !dbg !28
  %770 = fadd float %768, 1.000000e+00, !dbg !28
  %771 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %769), !dbg !29
  %772 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %770), !dbg !29
  %773 = insertelement <2 x float> poison, float %771, i64 0, !dbg !30
  %774 = insertelement <2 x float> %773, float %772, i64 1, !dbg !30
  %775 = fmul <2 x float> %758, %774, !dbg !30
  %776 = fptrunc <2 x float> %775 to <2 x bfloat>, !dbg !31
  %777 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !19
  %778 = fpext <2 x bfloat> %200 to <2 x float>, !dbg !20
  %779 = fadd <2 x float> %777, %778, !dbg !21
  %780 = extractelement <2 x float> %779, i64 0, !dbg !22
  %781 = fmul float %780, 0x3FFB3B6460000000, !dbg !22
  %782 = extractelement <2 x float> %779, i64 1, !dbg !22
  %783 = fmul float %782, 0x3FFB3B6460000000, !dbg !22
  %784 = fsub float 0.000000e+00, %781, !dbg !23
  %785 = fsub float 0.000000e+00, %783, !dbg !23
  %786 = fmul float %784, 0x3FF7154760000000, !dbg !27
  %787 = tail call float @llvm.nvvm.ex2.approx.f(float %786), !dbg !27
  %788 = fmul float %785, 0x3FF7154760000000, !dbg !27
  %789 = tail call float @llvm.nvvm.ex2.approx.f(float %788), !dbg !27
  %790 = fadd float %787, 1.000000e+00, !dbg !28
  %791 = fadd float %789, 1.000000e+00, !dbg !28
  %792 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %790), !dbg !29
  %793 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %791), !dbg !29
  %794 = insertelement <2 x float> poison, float %792, i64 0, !dbg !30
  %795 = insertelement <2 x float> %794, float %793, i64 1, !dbg !30
  %796 = fmul <2 x float> %779, %795, !dbg !30
  %797 = fptrunc <2 x float> %796 to <2 x bfloat>, !dbg !31
  %798 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !19
  %799 = fpext <2 x bfloat> %203 to <2 x float>, !dbg !20
  %800 = fadd <2 x float> %798, %799, !dbg !21
  %801 = extractelement <2 x float> %800, i64 0, !dbg !22
  %802 = fmul float %801, 0x3FFB3B6460000000, !dbg !22
  %803 = extractelement <2 x float> %800, i64 1, !dbg !22
  %804 = fmul float %803, 0x3FFB3B6460000000, !dbg !22
  %805 = fsub float 0.000000e+00, %802, !dbg !23
  %806 = fsub float 0.000000e+00, %804, !dbg !23
  %807 = fmul float %805, 0x3FF7154760000000, !dbg !27
  %808 = tail call float @llvm.nvvm.ex2.approx.f(float %807), !dbg !27
  %809 = fmul float %806, 0x3FF7154760000000, !dbg !27
  %810 = tail call float @llvm.nvvm.ex2.approx.f(float %809), !dbg !27
  %811 = fadd float %808, 1.000000e+00, !dbg !28
  %812 = fadd float %810, 1.000000e+00, !dbg !28
  %813 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %811), !dbg !29
  %814 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %812), !dbg !29
  %815 = insertelement <2 x float> poison, float %813, i64 0, !dbg !30
  %816 = insertelement <2 x float> %815, float %814, i64 1, !dbg !30
  %817 = fmul <2 x float> %800, %816, !dbg !30
  %818 = fptrunc <2 x float> %817 to <2 x bfloat>, !dbg !31
  %819 = fpext <2 x bfloat> %117 to <2 x float>, !dbg !19
  %820 = fpext <2 x bfloat> %205 to <2 x float>, !dbg !20
  %821 = fadd <2 x float> %819, %820, !dbg !21
  %822 = extractelement <2 x float> %821, i64 0, !dbg !22
  %823 = fmul float %822, 0x3FFB3B6460000000, !dbg !22
  %824 = extractelement <2 x float> %821, i64 1, !dbg !22
  %825 = fmul float %824, 0x3FFB3B6460000000, !dbg !22
  %826 = fsub float 0.000000e+00, %823, !dbg !23
  %827 = fsub float 0.000000e+00, %825, !dbg !23
  %828 = fmul float %826, 0x3FF7154760000000, !dbg !27
  %829 = tail call float @llvm.nvvm.ex2.approx.f(float %828), !dbg !27
  %830 = fmul float %827, 0x3FF7154760000000, !dbg !27
  %831 = tail call float @llvm.nvvm.ex2.approx.f(float %830), !dbg !27
  %832 = fadd float %829, 1.000000e+00, !dbg !28
  %833 = fadd float %831, 1.000000e+00, !dbg !28
  %834 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %832), !dbg !29
  %835 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %833), !dbg !29
  %836 = insertelement <2 x float> poison, float %834, i64 0, !dbg !30
  %837 = insertelement <2 x float> %836, float %835, i64 1, !dbg !30
  %838 = fmul <2 x float> %821, %837, !dbg !30
  %839 = fptrunc <2 x float> %838 to <2 x bfloat>, !dbg !31
  %840 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !19
  %841 = fpext <2 x bfloat> %207 to <2 x float>, !dbg !20
  %842 = fadd <2 x float> %840, %841, !dbg !21
  %843 = extractelement <2 x float> %842, i64 0, !dbg !22
  %844 = fmul float %843, 0x3FFB3B6460000000, !dbg !22
  %845 = extractelement <2 x float> %842, i64 1, !dbg !22
  %846 = fmul float %845, 0x3FFB3B6460000000, !dbg !22
  %847 = fsub float 0.000000e+00, %844, !dbg !23
  %848 = fsub float 0.000000e+00, %846, !dbg !23
  %849 = fmul float %847, 0x3FF7154760000000, !dbg !27
  %850 = tail call float @llvm.nvvm.ex2.approx.f(float %849), !dbg !27
  %851 = fmul float %848, 0x3FF7154760000000, !dbg !27
  %852 = tail call float @llvm.nvvm.ex2.approx.f(float %851), !dbg !27
  %853 = fadd float %850, 1.000000e+00, !dbg !28
  %854 = fadd float %852, 1.000000e+00, !dbg !28
  %855 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %853), !dbg !29
  %856 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %854), !dbg !29
  %857 = insertelement <2 x float> poison, float %855, i64 0, !dbg !30
  %858 = insertelement <2 x float> %857, float %856, i64 1, !dbg !30
  %859 = fmul <2 x float> %842, %858, !dbg !30
  %860 = fptrunc <2 x float> %859 to <2 x bfloat>, !dbg !31
  %861 = fpext <2 x bfloat> %121 to <2 x float>, !dbg !19
  %862 = fpext <2 x bfloat> %209 to <2 x float>, !dbg !20
  %863 = fadd <2 x float> %861, %862, !dbg !21
  %864 = extractelement <2 x float> %863, i64 0, !dbg !22
  %865 = fmul float %864, 0x3FFB3B6460000000, !dbg !22
  %866 = extractelement <2 x float> %863, i64 1, !dbg !22
  %867 = fmul float %866, 0x3FFB3B6460000000, !dbg !22
  %868 = fsub float 0.000000e+00, %865, !dbg !23
  %869 = fsub float 0.000000e+00, %867, !dbg !23
  %870 = fmul float %868, 0x3FF7154760000000, !dbg !27
  %871 = tail call float @llvm.nvvm.ex2.approx.f(float %870), !dbg !27
  %872 = fmul float %869, 0x3FF7154760000000, !dbg !27
  %873 = tail call float @llvm.nvvm.ex2.approx.f(float %872), !dbg !27
  %874 = fadd float %871, 1.000000e+00, !dbg !28
  %875 = fadd float %873, 1.000000e+00, !dbg !28
  %876 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %874), !dbg !29
  %877 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %875), !dbg !29
  %878 = insertelement <2 x float> poison, float %876, i64 0, !dbg !30
  %879 = insertelement <2 x float> %878, float %877, i64 1, !dbg !30
  %880 = fmul <2 x float> %863, %879, !dbg !30
  %881 = fptrunc <2 x float> %880 to <2 x bfloat>, !dbg !31
  %882 = bitcast <2 x bfloat> %230 to i32, !dbg !31
  %883 = bitcast <2 x bfloat> %251 to i32, !dbg !31
  %884 = bitcast <2 x bfloat> %272 to i32, !dbg !31
  %885 = bitcast <2 x bfloat> %293 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %882, i32 %883, i32 %884, i32 %885, ptr addrspace(1) %35, i1 %18) #2, !dbg !31
  %886 = bitcast <2 x bfloat> %314 to i32, !dbg !31
  %887 = bitcast <2 x bfloat> %335 to i32, !dbg !31
  %888 = bitcast <2 x bfloat> %356 to i32, !dbg !31
  %889 = bitcast <2 x bfloat> %377 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %886, i32 %887, i32 %888, i32 %889, ptr addrspace(1) %37, i1 %19) #2, !dbg !31
  %890 = bitcast <2 x bfloat> %398 to i32, !dbg !31
  %891 = bitcast <2 x bfloat> %419 to i32, !dbg !31
  %892 = bitcast <2 x bfloat> %440 to i32, !dbg !31
  %893 = bitcast <2 x bfloat> %461 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %890, i32 %891, i32 %892, i32 %893, ptr addrspace(1) %39, i1 %20) #2, !dbg !31
  %894 = bitcast <2 x bfloat> %482 to i32, !dbg !31
  %895 = bitcast <2 x bfloat> %503 to i32, !dbg !31
  %896 = bitcast <2 x bfloat> %524 to i32, !dbg !31
  %897 = bitcast <2 x bfloat> %545 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %894, i32 %895, i32 %896, i32 %897, ptr addrspace(1) %41, i1 %21) #2, !dbg !31
  %898 = bitcast <2 x bfloat> %566 to i32, !dbg !31
  %899 = bitcast <2 x bfloat> %587 to i32, !dbg !31
  %900 = bitcast <2 x bfloat> %608 to i32, !dbg !31
  %901 = bitcast <2 x bfloat> %629 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %898, i32 %899, i32 %900, i32 %901, ptr addrspace(1) %43, i1 %22) #2, !dbg !31
  %902 = bitcast <2 x bfloat> %650 to i32, !dbg !31
  %903 = bitcast <2 x bfloat> %671 to i32, !dbg !31
  %904 = bitcast <2 x bfloat> %692 to i32, !dbg !31
  %905 = bitcast <2 x bfloat> %713 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %902, i32 %903, i32 %904, i32 %905, ptr addrspace(1) %45, i1 %23) #2, !dbg !31
  %906 = bitcast <2 x bfloat> %734 to i32, !dbg !31
  %907 = bitcast <2 x bfloat> %755 to i32, !dbg !31
  %908 = bitcast <2 x bfloat> %776 to i32, !dbg !31
  %909 = bitcast <2 x bfloat> %797 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %906, i32 %907, i32 %908, i32 %909, ptr addrspace(1) %47, i1 %24) #2, !dbg !31
  %910 = bitcast <2 x bfloat> %818 to i32, !dbg !31
  %911 = bitcast <2 x bfloat> %839 to i32, !dbg !31
  %912 = bitcast <2 x bfloat> %860 to i32, !dbg !31
  %913 = bitcast <2 x bfloat> %881 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %910, i32 %911, i32 %912, i32 %913, ptr addrspace(1) %49, i1 %25) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cays7uwl4mjrrpbn562uyt2hbd6b25qyzadsmdqftgdhj3yphang.py", directory: "/tmp/torchinductor_root/ay")
!4 = !{ptr @triton_, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 29, column: 34, scope: !6)
!16 = !DILocation(line: 29, column: 39, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 29, column: 49, scope: !6)
!20 = !DILocation(line: 30, column: 75, scope: !6)
!21 = !DILocation(line: 31, column: 18, scope: !6)
!22 = !DILocation(line: 33, column: 18, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !6)
!31 = !DILocation(line: 36, column: 39, scope: !6)
!32 = !DILocation(line: 36, column: 4, scope: !6)
