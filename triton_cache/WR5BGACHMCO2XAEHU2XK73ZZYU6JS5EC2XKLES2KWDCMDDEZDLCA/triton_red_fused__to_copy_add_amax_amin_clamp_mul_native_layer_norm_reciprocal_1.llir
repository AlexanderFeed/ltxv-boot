; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 2, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 8, !dbg !11
  %23 = and i32 %22, 3, !dbg !11
  %24 = and i32 %21, 31, !dbg !11
  %25 = or disjoint i32 %23, %20, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = icmp slt i32 %20, 4112, !dbg !13
  %28 = shl i32 %21, 2, !dbg !14
  %29 = and i32 %28, 1020, !dbg !14
  %30 = mul i32 %25, 3072, !dbg !15
  %31 = or disjoint i32 %30, %29
  %32 = sext i32 %31 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 %26) #5, !dbg !17
  %35 = extractvalue { i32, i32 } %34, 1, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %38 = fpext bfloat %37 to float, !dbg !18
  %39 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %40 = fpext bfloat %39 to float, !dbg !18
  %41 = extractvalue { i32, i32 } %34, 0, !dbg !17
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !17
  %43 = extractelement <2 x bfloat> %42, i64 1, !dbg !17
  %44 = fpext bfloat %43 to float, !dbg !18
  %45 = extractelement <2 x bfloat> %42, i64 0, !dbg !17
  %46 = fpext bfloat %45 to float, !dbg !18
  %47 = select i1 %26, float %46, float 0.000000e+00, !dbg !19
  %48 = select i1 %26, float %44, float 0.000000e+00, !dbg !19
  %49 = select i1 %26, float %40, float 0.000000e+00, !dbg !19
  %50 = select i1 %26, float %38, float 0.000000e+00, !dbg !19
  %51 = add i32 %31, 1024, !dbg !20
  %52 = sext i32 %51 to i64, !dbg !16
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !16
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %26) #5, !dbg !17
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !17
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !17
  %57 = extractelement <2 x bfloat> %56, i64 0, !dbg !17
  %58 = fpext bfloat %57 to float, !dbg !18
  %59 = fsub float %58, %47, !dbg !21
  %60 = select i1 %26, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %61 = tail call float @llvm.nvvm.div.full(float %59, float %60), !dbg !26
  %62 = fadd float %47, %61, !dbg !27
  %63 = fsub float %58, %62, !dbg !28
  %64 = fmul float %59, %63, !dbg !29
  %65 = fadd float %64, 0.000000e+00, !dbg !30
  %66 = extractelement <2 x bfloat> %56, i64 1, !dbg !17
  %67 = fpext bfloat %66 to float, !dbg !18
  %68 = fsub float %67, %48, !dbg !21
  %69 = tail call float @llvm.nvvm.div.full(float %68, float %60), !dbg !26
  %70 = fadd float %48, %69, !dbg !27
  %71 = fsub float %67, %70, !dbg !28
  %72 = fmul float %68, %71, !dbg !29
  %73 = fadd float %72, 0.000000e+00, !dbg !30
  %74 = extractvalue { i32, i32 } %54, 1, !dbg !17
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !17
  %76 = extractelement <2 x bfloat> %75, i64 0, !dbg !17
  %77 = fpext bfloat %76 to float, !dbg !18
  %78 = fsub float %77, %49, !dbg !21
  %79 = tail call float @llvm.nvvm.div.full(float %78, float %60), !dbg !26
  %80 = fadd float %49, %79, !dbg !27
  %81 = fsub float %77, %80, !dbg !28
  %82 = fmul float %78, %81, !dbg !29
  %83 = fadd float %82, 0.000000e+00, !dbg !30
  %84 = extractelement <2 x bfloat> %75, i64 1, !dbg !17
  %85 = fpext bfloat %84 to float, !dbg !18
  %86 = fsub float %85, %50, !dbg !21
  %87 = tail call float @llvm.nvvm.div.full(float %86, float %60), !dbg !26
  %88 = fadd float %50, %87, !dbg !27
  %89 = fsub float %85, %88, !dbg !28
  %90 = fmul float %86, %89, !dbg !29
  %91 = fadd float %90, 0.000000e+00, !dbg !30
  %92 = select i1 %26, float %62, float 0.000000e+00, !dbg !19
  %93 = select i1 %26, float %70, float 0.000000e+00, !dbg !19
  %94 = select i1 %26, float %80, float 0.000000e+00, !dbg !19
  %95 = select i1 %26, float %88, float 0.000000e+00, !dbg !19
  %96 = add i32 %31, 2048, !dbg !20
  %97 = sext i32 %96 to i64, !dbg !16
  %98 = getelementptr bfloat, ptr addrspace(1) %0, i64 %97, !dbg !16
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %98, i1 %26) #5, !dbg !17
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !17
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !17
  %102 = extractelement <2 x bfloat> %101, i64 0, !dbg !17
  %103 = fpext bfloat %102 to float, !dbg !18
  %104 = fsub float %103, %92, !dbg !21
  %105 = select i1 %26, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %106 = tail call float @llvm.nvvm.div.full(float %104, float %105), !dbg !26
  %107 = fadd float %92, %106, !dbg !27
  %108 = fsub float %103, %107, !dbg !28
  %109 = fmul float %104, %108, !dbg !29
  %110 = fadd float %65, %109, !dbg !30
  %111 = extractelement <2 x bfloat> %101, i64 1, !dbg !17
  %112 = fpext bfloat %111 to float, !dbg !18
  %113 = fsub float %112, %93, !dbg !21
  %114 = select i1 %26, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %115 = tail call float @llvm.nvvm.div.full(float %113, float %114), !dbg !26
  %116 = fadd float %93, %115, !dbg !27
  %117 = fsub float %112, %116, !dbg !28
  %118 = fmul float %113, %117, !dbg !29
  %119 = fadd float %73, %118, !dbg !30
  %120 = extractvalue { i32, i32 } %99, 1, !dbg !17
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !17
  %122 = extractelement <2 x bfloat> %121, i64 0, !dbg !17
  %123 = fpext bfloat %122 to float, !dbg !18
  %124 = fsub float %123, %94, !dbg !21
  %125 = select i1 %26, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %126 = tail call float @llvm.nvvm.div.full(float %124, float %125), !dbg !26
  %127 = fadd float %94, %126, !dbg !27
  %128 = fsub float %123, %127, !dbg !28
  %129 = fmul float %124, %128, !dbg !29
  %130 = fadd float %83, %129, !dbg !30
  %131 = extractelement <2 x bfloat> %121, i64 1, !dbg !17
  %132 = fpext bfloat %131 to float, !dbg !18
  %133 = fsub float %132, %95, !dbg !21
  %134 = select i1 %26, float 3.000000e+00, float 1.000000e+00, !dbg !25
  %135 = tail call float @llvm.nvvm.div.full(float %133, float %134), !dbg !26
  %136 = fadd float %95, %135, !dbg !27
  %137 = fsub float %132, %136, !dbg !28
  %138 = fmul float %133, %137, !dbg !29
  %139 = fadd float %91, %138, !dbg !30
  %140 = select i1 %26, float %107, float 0.000000e+00, !dbg !19
  %141 = select i1 %26, float %116, float 0.000000e+00, !dbg !19
  %142 = select i1 %26, float %127, float 0.000000e+00, !dbg !19
  %143 = select i1 %26, float %136, float 0.000000e+00, !dbg !19
  %144 = select i1 %26, float %130, float 0.000000e+00, !dbg !31
  %145 = select i1 %26, float %139, float 0.000000e+00, !dbg !31
  %146 = select i1 %26, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %147 = select i1 %26, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %148 = select i1 %26, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %149 = select i1 %26, float 3.000000e+00, float 0.000000e+00, !dbg !25
  %150 = lshr i32 %21, 5, !dbg !11
  %151 = and i32 %21, 1023, !dbg !14
  %152 = fsub float %141, %140, !dbg !32
  %153 = select i1 %26, float 6.000000e+00, float 0.000000e+00, !dbg !35
  %154 = fcmp oeq float %153, 0.000000e+00, !dbg !36
  %155 = tail call float @llvm.nvvm.div.full(float %147, float %153), !dbg !37
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !38
  %157 = fmul float %152, %156, !dbg !39
  %158 = fadd float %140, %157, !dbg !40
  %159 = fadd float %110, %119, !dbg !41
  %160 = select i1 %26, float %159, float 0.000000e+00, !dbg !41
  %161 = fmul float %152, %152, !dbg !42
  %162 = fmul float %161, %146, !dbg !43
  %163 = fmul float %162, %156, !dbg !44
  %164 = fadd float %160, %163, !dbg !45
  %165 = fsub float %142, %158, !dbg !32
  %166 = select i1 %26, float 9.000000e+00, float 0.000000e+00, !dbg !35
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !36
  %168 = tail call float @llvm.nvvm.div.full(float %148, float %166), !dbg !37
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !38
  %170 = fmul float %169, %165, !dbg !39
  %171 = fadd float %158, %170, !dbg !40
  %172 = fadd float %144, %164, !dbg !41
  %173 = fmul float %165, %165, !dbg !42
  %174 = fmul float %153, %173, !dbg !43
  %175 = fmul float %169, %174, !dbg !44
  %176 = fadd float %172, %175, !dbg !45
  %177 = fsub float %143, %171, !dbg !32
  %178 = select i1 %26, float 1.200000e+01, float 0.000000e+00, !dbg !35
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !36
  %180 = tail call float @llvm.nvvm.div.full(float %149, float %178), !dbg !37
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !38
  %182 = fmul float %181, %177, !dbg !39
  %183 = fadd float %171, %182, !dbg !40
  %184 = fadd float %145, %176, !dbg !41
  %185 = fmul float %177, %177, !dbg !42
  %186 = fmul float %166, %185, !dbg !43
  %187 = fmul float %181, %186, !dbg !44
  %188 = fadd float %184, %187, !dbg !45
  %189 = bitcast float %183 to i32, !dbg !46
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 16, i32 31), !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = bitcast float %188 to i32, !dbg !46
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 16, i32 31), !dbg !46
  %194 = bitcast i32 %193 to float, !dbg !46
  %195 = bitcast float %178 to i32, !dbg !46
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !46
  %197 = bitcast i32 %196 to float, !dbg !46
  %198 = fsub float %191, %183, !dbg !32
  %199 = fadd float %178, %197, !dbg !35
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !36
  %201 = tail call float @llvm.nvvm.div.full(float %197, float %199), !dbg !37
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !38
  %203 = fmul float %202, %198, !dbg !39
  %204 = fadd float %183, %203, !dbg !40
  %205 = fadd float %188, %194, !dbg !41
  %206 = fmul float %198, %198, !dbg !42
  %207 = fmul float %178, %206, !dbg !43
  %208 = fmul float %202, %207, !dbg !44
  %209 = fadd float %205, %208, !dbg !45
  %210 = bitcast float %204 to i32, !dbg !46
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !46
  %212 = bitcast i32 %211 to float, !dbg !46
  %213 = bitcast float %209 to i32, !dbg !46
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !46
  %215 = bitcast i32 %214 to float, !dbg !46
  %216 = bitcast float %199 to i32, !dbg !46
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !46
  %218 = bitcast i32 %217 to float, !dbg !46
  %219 = fsub float %212, %204, !dbg !32
  %220 = fadd float %199, %218, !dbg !35
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !36
  %222 = tail call float @llvm.nvvm.div.full(float %218, float %220), !dbg !37
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !38
  %224 = fmul float %219, %223, !dbg !39
  %225 = fadd float %204, %224, !dbg !40
  %226 = fadd float %209, %215, !dbg !41
  %227 = fmul float %219, %219, !dbg !42
  %228 = fmul float %199, %227, !dbg !43
  %229 = fmul float %223, %228, !dbg !44
  %230 = fadd float %226, %229, !dbg !45
  %231 = bitcast float %225 to i32, !dbg !46
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !46
  %233 = bitcast i32 %232 to float, !dbg !46
  %234 = bitcast float %230 to i32, !dbg !46
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !46
  %236 = bitcast i32 %235 to float, !dbg !46
  %237 = bitcast float %220 to i32, !dbg !46
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !46
  %239 = bitcast i32 %238 to float, !dbg !46
  %240 = fsub float %233, %225, !dbg !32
  %241 = fadd float %220, %239, !dbg !35
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !36
  %243 = tail call float @llvm.nvvm.div.full(float %239, float %241), !dbg !37
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !38
  %245 = fmul float %240, %244, !dbg !39
  %246 = fadd float %225, %245, !dbg !40
  %247 = fadd float %230, %236, !dbg !41
  %248 = fmul float %240, %240, !dbg !42
  %249 = fmul float %220, %248, !dbg !43
  %250 = fmul float %244, %249, !dbg !44
  %251 = fadd float %247, %250, !dbg !45
  %252 = bitcast float %246 to i32, !dbg !46
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !46
  %254 = bitcast i32 %253 to float, !dbg !46
  %255 = bitcast float %251 to i32, !dbg !46
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !46
  %257 = bitcast i32 %256 to float, !dbg !46
  %258 = bitcast float %241 to i32, !dbg !46
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !46
  %260 = bitcast i32 %259 to float, !dbg !46
  %261 = fsub float %254, %246, !dbg !32
  %262 = fadd float %241, %260, !dbg !35
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !36
  %264 = tail call float @llvm.nvvm.div.full(float %260, float %262), !dbg !37
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !38
  %266 = fmul float %261, %265, !dbg !39
  %267 = fadd float %246, %266, !dbg !40
  %268 = fadd float %251, %257, !dbg !41
  %269 = fmul float %261, %261, !dbg !42
  %270 = fmul float %241, %269, !dbg !43
  %271 = fmul float %265, %270, !dbg !44
  %272 = fadd float %268, %271, !dbg !45
  %273 = bitcast float %267 to i32, !dbg !46
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = bitcast float %272 to i32, !dbg !46
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !46
  %278 = bitcast i32 %277 to float, !dbg !46
  %279 = bitcast float %262 to i32, !dbg !46
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !46
  %281 = bitcast i32 %280 to float, !dbg !46
  %282 = fsub float %275, %267, !dbg !32
  %283 = fadd float %262, %281, !dbg !35
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !36
  %285 = tail call float @llvm.nvvm.div.full(float %281, float %283), !dbg !37
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !38
  %287 = fmul float %282, %286, !dbg !39
  %288 = fadd float %267, %287, !dbg !40
  %289 = fadd float %272, %278, !dbg !41
  %290 = fmul float %282, %282, !dbg !42
  %291 = fmul float %262, %290, !dbg !43
  %292 = fmul float %286, %291, !dbg !44
  %293 = fadd float %289, %292, !dbg !45
  %294 = and i32 %150, 7, !dbg !46
  %295 = icmp eq i32 %24, 0, !dbg !46
  %296 = shl nuw nsw i32 %23, 3, !dbg !46
  %297 = or disjoint i32 %296, %294, !dbg !46
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !46
  %299 = bitcast float %288 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 %295) #5, !dbg !46
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %297, !dbg !46
  %301 = bitcast float %293 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 %295) #5, !dbg !46
  %302 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %297, !dbg !46
  %303 = bitcast float %283 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 %295) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %304 = icmp slt i32 %21, 32, !dbg !46
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !46
  %306 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %304) #5, !dbg !46
  %307 = bitcast i32 %306 to float, !dbg !46
  %308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !46
  %309 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %308, i1 %304) #5, !dbg !46
  %310 = bitcast i32 %309 to float, !dbg !46
  %311 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !46
  %312 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %311, i1 %304) #5, !dbg !46
  %313 = bitcast i32 %312 to float, !dbg !46
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !46
  %315 = bitcast i32 %314 to float, !dbg !46
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !46
  %317 = bitcast i32 %316 to float, !dbg !46
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !46
  %319 = bitcast i32 %318 to float, !dbg !46
  %320 = fsub float %315, %307, !dbg !32
  %321 = fadd float %313, %319, !dbg !35
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !36
  %323 = tail call float @llvm.nvvm.div.full(float %319, float %321), !dbg !37
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !38
  %325 = fmul float %320, %324, !dbg !39
  %326 = fadd float %325, %307, !dbg !40
  %327 = fadd float %310, %317, !dbg !41
  %328 = fmul float %320, %320, !dbg !42
  %329 = fmul float %328, %313, !dbg !43
  %330 = fmul float %329, %324, !dbg !44
  %331 = fadd float %327, %330, !dbg !45
  %332 = bitcast float %326 to i32, !dbg !46
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !46
  %334 = bitcast i32 %333 to float, !dbg !46
  %335 = bitcast float %331 to i32, !dbg !46
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !46
  %337 = bitcast i32 %336 to float, !dbg !46
  %338 = bitcast float %321 to i32, !dbg !46
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !46
  %340 = bitcast i32 %339 to float, !dbg !46
  %341 = fsub float %334, %326, !dbg !32
  %342 = fadd float %321, %340, !dbg !35
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !36
  %344 = tail call float @llvm.nvvm.div.full(float %340, float %342), !dbg !37
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !38
  %346 = fmul float %341, %345, !dbg !39
  %347 = fadd float %326, %346, !dbg !40
  %348 = fadd float %331, %337, !dbg !41
  %349 = fmul float %341, %341, !dbg !42
  %350 = fmul float %321, %349, !dbg !43
  %351 = fmul float %345, %350, !dbg !44
  %352 = fadd float %348, %351, !dbg !45
  %353 = bitcast float %347 to i32, !dbg !46
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 1, i32 31), !dbg !46
  %355 = bitcast i32 %354 to float, !dbg !46
  %356 = bitcast float %352 to i32, !dbg !46
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !46
  %358 = bitcast i32 %357 to float, !dbg !46
  %359 = bitcast float %342 to i32, !dbg !46
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !46
  %361 = bitcast i32 %360 to float, !dbg !46
  %362 = fsub float %355, %347, !dbg !32
  %363 = fadd float %342, %361, !dbg !35
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !36
  %365 = tail call float @llvm.nvvm.div.full(float %361, float %363), !dbg !37
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !38
  %367 = fmul float %362, %366, !dbg !39
  %368 = fadd float %347, %367, !dbg !40
  %369 = fadd float %352, %358, !dbg !41
  %370 = fmul float %362, %362, !dbg !42
  %371 = fmul float %342, %370, !dbg !43
  %372 = fmul float %366, %371, !dbg !44
  %373 = fadd float %369, %372, !dbg !45
  %374 = and i32 %21, 7, !dbg !46
  %375 = icmp eq i32 %374, 0, !dbg !46
  %376 = and i1 %304, %375, !dbg !46
  %377 = bitcast float %368 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %377, i1 %376) #5, !dbg !46
  %378 = bitcast float %373 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %378, i1 %376) #5, !dbg !46
  %379 = bitcast float %363 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %379, i1 %376) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !46
  %381 = load float, ptr addrspace(3) %380, align 16, !dbg !46
  %382 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %296, !dbg !46
  %383 = load float, ptr addrspace(3) %382, align 16, !dbg !46
  %384 = tail call float @llvm.nvvm.div.full(float %383, float 3.072000e+03), !dbg !47
  %385 = fadd float %384, 0x3EB0C6F7A0000000, !dbg !48
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i29 = icmp eq i32 %389, 0, !dbg !49
  br i1 %.not.i29, label %392, label %390, !dbg !49

390:                                              ; preds = %__nv_rsqrtf.exit
  %391 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %385), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

392:                                              ; preds = %__nv_rsqrtf.exit
  %393 = tail call float @llvm.nvvm.rsqrt.approx.f(float %385), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

__nv_rsqrtf.exit31:                               ; preds = %390, %392
  %.0.i30 = phi float [ %391, %390 ], [ %393, %392 ], !dbg !49
  %394 = shl i32 %21, 4
  %395 = and i32 %394, 4080
  %396 = or disjoint i32 %395, %23
  %397 = and i32 %28, 4092
  %398 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %395
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %396
  %400 = or disjoint i32 %396, 4
  %401 = lshr i32 %400, 2
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %401
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %400
  %404 = or disjoint i32 %396, 8
  %405 = lshr i32 %404, 2
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %404
  %408 = or disjoint i32 %396, 12
  %409 = lshr i32 %408, 2
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %408
  %412 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %397
  %413 = getelementptr inbounds nuw float, ptr addrspace(3) %412, i32 %397
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %151
  %415 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i32 2056
  %416 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i32 4112
  %417 = getelementptr inbounds nuw i8, ptr addrspace(3) %414, i32 6168
  %418 = lshr i32 %28, 8
  %419 = and i32 %418, 12
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %419
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %420, i32 %397
  %422 = zext nneg i32 %151 to i64, !dbg !50
  %423 = getelementptr inbounds nuw i8, ptr addrspace(3) %421, i32 4
  %424 = insertelement <8 x i1> poison, i1 %27, i64 0, !dbg !51
  %425 = shufflevector <8 x i1> %424, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !51
  br label %426, !dbg !50

426:                                              ; preds = %__nv_rsqrtf.exit31, %426
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit31 ], [ %indvars.iv.next, %426 ]
  %427 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit31 ], [ %490, %426 ]
  %428 = or disjoint i64 %indvars.iv, %422, !dbg !52
  %429 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !53
  %430 = add i32 %31, %429, !dbg !53
  %431 = sext i32 %430 to i64, !dbg !54
  %432 = getelementptr bfloat, ptr addrspace(1) %0, i64 %431, !dbg !54
  %433 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %432, i1 %26) #5, !dbg !55
  %434 = extractvalue { i32, i32 } %433, 0, !dbg !55
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !55
  %436 = extractvalue { i32, i32 } %433, 1, !dbg !55
  %437 = bitcast i32 %436 to <2 x bfloat>, !dbg !55
  %438 = extractelement <2 x bfloat> %435, i64 0, !dbg !55
  %439 = extractelement <2 x bfloat> %435, i64 1, !dbg !55
  %440 = extractelement <2 x bfloat> %437, i64 0, !dbg !55
  %441 = extractelement <2 x bfloat> %437, i64 1, !dbg !55
  %442 = fpext bfloat %438 to float, !dbg !56
  %443 = fpext bfloat %439 to float, !dbg !56
  %444 = fpext bfloat %440 to float, !dbg !56
  %445 = fpext bfloat %441 to float, !dbg !56
  %446 = add nuw nsw i64 %428, 3072, !dbg !57
  %447 = getelementptr float, ptr addrspace(1) %1, i64 %446, !dbg !58
  %448 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %447, i1 true) #5, !dbg !59
  %449 = bitcast i32 %448 to float, !dbg !59
  %450 = getelementptr bfloat, ptr addrspace(1) %2, i64 %446, !dbg !60
  %451 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %450, i1 true) #5, !dbg !61
  %452 = bitcast i16 %451 to bfloat, !dbg !61
  %453 = fpext bfloat %452 to float, !dbg !62
  %454 = getelementptr float, ptr addrspace(1) %1, i64 %428, !dbg !63
  %455 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %454, i1 true) #5, !dbg !64
  %456 = bitcast i32 %455 to float, !dbg !64
  %457 = getelementptr bfloat, ptr addrspace(1) %2, i64 %428, !dbg !65
  %458 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %457, i1 true) #5, !dbg !66
  %459 = bitcast i16 %458 to bfloat, !dbg !66
  %460 = fpext bfloat %459 to float, !dbg !67
  %461 = fsub float %442, %381, !dbg !68
  %462 = fsub float %443, %381, !dbg !68
  %463 = fsub float %444, %381, !dbg !68
  %464 = fsub float %445, %381, !dbg !68
  %465 = fmul float %.0.i30, %461, !dbg !69
  %466 = fmul float %.0.i30, %462, !dbg !69
  %467 = fmul float %.0.i30, %463, !dbg !69
  %468 = fmul float %.0.i30, %464, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %469 = bitcast float %465 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %469, i1 true) #5, !dbg !69
  %470 = bitcast float %466 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %470, i1 true) #5, !dbg !69
  %471 = bitcast float %467 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %471, i1 true) #5, !dbg !69
  %472 = bitcast float %468 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %472, i1 true) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %473 = fadd float %449, %453, !dbg !70
  %474 = fadd float %473, 1.000000e+00, !dbg !71
  %475 = fadd float %456, %460, !dbg !72
  %476 = fcmp uno <8 x float> %427, zeroinitializer, !dbg !73
  %477 = load <4 x float>, ptr addrspace(3) %413, align 4, !dbg !69
  %478 = insertelement <4 x float> poison, float %474, i64 0, !dbg !75
  %479 = shufflevector <4 x float> %478, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !75
  %480 = fmul <4 x float> %479, %477, !dbg !75
  %481 = insertelement <4 x float> poison, float %475, i64 0, !dbg !76
  %482 = shufflevector <4 x float> %481, <4 x float> poison, <8 x i32> zeroinitializer, !dbg !76
  %483 = shufflevector <4 x float> %480, <4 x float> poison, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0>, !dbg !76
  %484 = fadd <8 x float> %482, %483, !dbg !76
  %485 = fcmp ogt <8 x float> %427, %484, !dbg !77
  %486 = fcmp olt <8 x float> %427, %484, !dbg !77
  %487 = shufflevector <8 x i1> %485, <8 x i1> %486, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !77
  %488 = or <8 x i1> %476, %487, !dbg !78
  %489 = select <8 x i1> %488, <8 x float> %427, <8 x float> %484, !dbg !79
  %490 = select <8 x i1> %425, <8 x float> %489, <8 x float> %427, !dbg !51
  %491 = getelementptr bfloat, ptr addrspace(1) %3, i64 %431, !dbg !80
  %492 = extractelement <8 x float> %484, i64 3, !dbg !81
  %493 = fptrunc float %492 to bfloat, !dbg !81
  %494 = extractelement <8 x float> %484, i64 2, !dbg !81
  %495 = fptrunc float %494 to bfloat, !dbg !81
  %496 = extractelement <8 x float> %484, i64 1, !dbg !81
  %497 = fptrunc float %496 to bfloat, !dbg !81
  %498 = extractelement <8 x float> %484, i64 0, !dbg !81
  %499 = fptrunc float %498 to bfloat, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %500 = bitcast bfloat %493 to <1 x i16>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %414, <1 x i16> %500, i1 true) #5, !dbg !81
  %501 = bitcast bfloat %495 to <1 x i16>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %415, <1 x i16> %501, i1 true) #5, !dbg !81
  %502 = bitcast bfloat %497 to <1 x i16>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %416, <1 x i16> %502, i1 true) #5, !dbg !81
  %503 = bitcast bfloat %499 to <1 x i16>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %417, <1 x i16> %503, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %.uncasted.extract = load i32, ptr addrspace(3) %421, align 8, !dbg !81
  %.uncasted.extract15 = load i32, ptr addrspace(3) %423, align 4, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract15, ptr addrspace(1) %491, i1 %26) #5, !dbg !81
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !50
  %504 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !50
  br i1 %504, label %426, label %505, !dbg !50

505:                                              ; preds = %426
  %506 = and i32 %21, 3, !dbg !11
  %507 = or disjoint i32 %20, %506, !dbg !12
  %508 = icmp slt i32 %507, 4112, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %509 = extractelement <8 x float> %490, i64 7, !dbg !82
  %510 = bitcast float %509 to i32, !dbg !82
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 16, i32 31), !dbg !82
  %512 = bitcast i32 %511 to float, !dbg !82
  %513 = fcmp olt float %509, %512, !dbg !84
  %514 = fcmp uno <8 x float> %490, zeroinitializer, !dbg !85
  %515 = extractelement <8 x i1> %514, i64 7, !dbg !87
  %516 = or i1 %515, %513, !dbg !87
  %517 = select i1 %516, float %509, float %512, !dbg !88
  %518 = bitcast float %517 to i32, !dbg !82
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 8, i32 31), !dbg !82
  %520 = bitcast i32 %519 to float, !dbg !82
  %521 = fcmp olt float %517, %520, !dbg !84
  %522 = fcmp uno float %517, 0.000000e+00, !dbg !89
  %523 = or i1 %521, %522, !dbg !87
  %524 = select i1 %523, float %517, float %520, !dbg !88
  %525 = bitcast float %524 to i32, !dbg !82
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 4, i32 31), !dbg !82
  %527 = bitcast i32 %526 to float, !dbg !82
  %528 = fcmp olt float %524, %527, !dbg !84
  %529 = fcmp uno float %524, 0.000000e+00, !dbg !89
  %530 = or i1 %528, %529, !dbg !87
  %531 = select i1 %530, float %524, float %527, !dbg !88
  %532 = bitcast float %531 to i32, !dbg !82
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 2, i32 31), !dbg !82
  %534 = bitcast i32 %533 to float, !dbg !82
  %535 = fcmp olt float %531, %534, !dbg !84
  %536 = fcmp uno float %531, 0.000000e+00, !dbg !89
  %537 = or i1 %535, %536, !dbg !87
  %538 = select i1 %537, float %531, float %534, !dbg !88
  %539 = bitcast float %538 to i32, !dbg !82
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !82
  %541 = bitcast i32 %540 to float, !dbg !82
  %542 = fcmp olt float %538, %541, !dbg !84
  %543 = fcmp uno float %538, 0.000000e+00, !dbg !89
  %544 = or i1 %542, %543, !dbg !87
  %545 = extractelement <8 x float> %490, i64 6, !dbg !82
  %546 = bitcast float %545 to i32, !dbg !82
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 16, i32 31), !dbg !82
  %548 = bitcast i32 %547 to float, !dbg !82
  %549 = fcmp olt float %545, %548, !dbg !84
  %550 = extractelement <8 x i1> %514, i64 6, !dbg !87
  %551 = or i1 %550, %549, !dbg !87
  %552 = select i1 %551, float %545, float %548, !dbg !88
  %553 = bitcast float %552 to i32, !dbg !82
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 8, i32 31), !dbg !82
  %555 = bitcast i32 %554 to float, !dbg !82
  %556 = fcmp olt float %552, %555, !dbg !84
  %557 = fcmp uno float %552, 0.000000e+00, !dbg !89
  %558 = or i1 %556, %557, !dbg !87
  %559 = select i1 %558, float %552, float %555, !dbg !88
  %560 = bitcast float %559 to i32, !dbg !82
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 4, i32 31), !dbg !82
  %562 = bitcast i32 %561 to float, !dbg !82
  %563 = fcmp olt float %559, %562, !dbg !84
  %564 = fcmp uno float %559, 0.000000e+00, !dbg !89
  %565 = or i1 %563, %564, !dbg !87
  %566 = select i1 %565, float %559, float %562, !dbg !88
  %567 = bitcast float %566 to i32, !dbg !82
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 2, i32 31), !dbg !82
  %569 = bitcast i32 %568 to float, !dbg !82
  %570 = fcmp olt float %566, %569, !dbg !84
  %571 = fcmp uno float %566, 0.000000e+00, !dbg !89
  %572 = or i1 %570, %571, !dbg !87
  %573 = select i1 %572, float %566, float %569, !dbg !88
  %574 = bitcast float %573 to i32, !dbg !82
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 1, i32 31), !dbg !82
  %576 = bitcast i32 %575 to float, !dbg !82
  %577 = fcmp olt float %573, %576, !dbg !84
  %578 = fcmp uno float %573, 0.000000e+00, !dbg !89
  %579 = or i1 %577, %578, !dbg !87
  %580 = extractelement <8 x float> %490, i64 5, !dbg !82
  %581 = bitcast float %580 to i32, !dbg !82
  %582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 16, i32 31), !dbg !82
  %583 = bitcast i32 %582 to float, !dbg !82
  %584 = fcmp olt float %580, %583, !dbg !84
  %585 = extractelement <8 x i1> %514, i64 5, !dbg !87
  %586 = or i1 %585, %584, !dbg !87
  %587 = select i1 %586, float %580, float %583, !dbg !88
  %588 = bitcast float %587 to i32, !dbg !82
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 8, i32 31), !dbg !82
  %590 = bitcast i32 %589 to float, !dbg !82
  %591 = fcmp olt float %587, %590, !dbg !84
  %592 = fcmp uno float %587, 0.000000e+00, !dbg !89
  %593 = or i1 %591, %592, !dbg !87
  %594 = select i1 %593, float %587, float %590, !dbg !88
  %595 = bitcast float %594 to i32, !dbg !82
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %595, i32 4, i32 31), !dbg !82
  %597 = bitcast i32 %596 to float, !dbg !82
  %598 = fcmp olt float %594, %597, !dbg !84
  %599 = fcmp uno float %594, 0.000000e+00, !dbg !89
  %600 = or i1 %598, %599, !dbg !87
  %601 = select i1 %600, float %594, float %597, !dbg !88
  %602 = bitcast float %601 to i32, !dbg !82
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 2, i32 31), !dbg !82
  %604 = bitcast i32 %603 to float, !dbg !82
  %605 = fcmp olt float %601, %604, !dbg !84
  %606 = fcmp uno float %601, 0.000000e+00, !dbg !89
  %607 = or i1 %605, %606, !dbg !87
  %608 = select i1 %607, float %601, float %604, !dbg !88
  %609 = bitcast float %608 to i32, !dbg !82
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !82
  %611 = bitcast i32 %610 to float, !dbg !82
  %612 = fcmp olt float %608, %611, !dbg !84
  %613 = fcmp uno float %608, 0.000000e+00, !dbg !89
  %614 = or i1 %612, %613, !dbg !87
  %615 = extractelement <8 x float> %490, i64 4, !dbg !82
  %616 = bitcast float %615 to i32, !dbg !82
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 16, i32 31), !dbg !82
  %618 = bitcast i32 %617 to float, !dbg !82
  %619 = fcmp olt float %615, %618, !dbg !84
  %620 = extractelement <8 x i1> %514, i64 4, !dbg !87
  %621 = or i1 %620, %619, !dbg !87
  %622 = select i1 %621, float %615, float %618, !dbg !88
  %623 = bitcast float %622 to i32, !dbg !82
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 8, i32 31), !dbg !82
  %625 = bitcast i32 %624 to float, !dbg !82
  %626 = fcmp olt float %622, %625, !dbg !84
  %627 = fcmp uno float %622, 0.000000e+00, !dbg !89
  %628 = or i1 %626, %627, !dbg !87
  %629 = select i1 %628, float %622, float %625, !dbg !88
  %630 = bitcast float %629 to i32, !dbg !82
  %631 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %630, i32 4, i32 31), !dbg !82
  %632 = bitcast i32 %631 to float, !dbg !82
  %633 = fcmp olt float %629, %632, !dbg !84
  %634 = fcmp uno float %629, 0.000000e+00, !dbg !89
  %635 = or i1 %633, %634, !dbg !87
  %636 = select i1 %635, float %629, float %632, !dbg !88
  %637 = bitcast float %636 to i32, !dbg !82
  %638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %637, i32 2, i32 31), !dbg !82
  %639 = bitcast i32 %638 to float, !dbg !82
  %640 = fcmp olt float %636, %639, !dbg !84
  %641 = fcmp uno float %636, 0.000000e+00, !dbg !89
  %642 = or i1 %640, %641, !dbg !87
  %643 = select i1 %642, float %636, float %639, !dbg !88
  %644 = bitcast float %643 to i32, !dbg !82
  %645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %644, i32 1, i32 31), !dbg !82
  %646 = bitcast i32 %645 to float, !dbg !82
  %647 = fcmp olt float %643, %646, !dbg !84
  %648 = fcmp uno float %643, 0.000000e+00, !dbg !89
  %649 = or i1 %647, %648, !dbg !87
  %650 = and i32 %150, 31, !dbg !82
  %651 = getelementptr float, ptr addrspace(3) @global_smem, i32 %650, !dbg !82
  %652 = select i1 %544, i32 %539, i32 %540, !dbg !88
  %653 = insertelement <1 x i32> poison, i32 %652, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %653, i1 %295) #5, !dbg !82
  %654 = or disjoint i32 %650, 32, !dbg !82
  %655 = getelementptr float, ptr addrspace(3) @global_smem, i32 %654, !dbg !82
  %656 = select i1 %579, i32 %574, i32 %575, !dbg !88
  %657 = insertelement <1 x i32> poison, i32 %656, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %655, <1 x i32> %657, i1 %295) #5, !dbg !82
  %658 = or disjoint i32 %650, 64, !dbg !82
  %659 = getelementptr float, ptr addrspace(3) @global_smem, i32 %658, !dbg !82
  %660 = select i1 %614, i32 %609, i32 %610, !dbg !88
  %661 = insertelement <1 x i32> poison, i32 %660, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %661, i1 %295) #5, !dbg !82
  %662 = or disjoint i32 %650, 96, !dbg !82
  %663 = getelementptr float, ptr addrspace(3) @global_smem, i32 %662, !dbg !82
  %664 = select i1 %649, i32 %644, i32 %645, !dbg !88
  %665 = insertelement <1 x i32> poison, i32 %664, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %663, <1 x i32> %665, i1 %295) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %666 = icmp slt i32 %21, 128, !dbg !82
  %667 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %666) #5, !dbg !82
  %668 = bitcast i32 %667 to float, !dbg !82
  %669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %667, i32 16, i32 31), !dbg !82
  %670 = bitcast i32 %669 to float, !dbg !82
  %671 = fcmp olt float %668, %670, !dbg !84
  %672 = fcmp uno float %668, 0.000000e+00, !dbg !89
  %673 = or i1 %672, %671, !dbg !87
  %674 = select i1 %673, float %668, float %670, !dbg !88
  %675 = bitcast float %674 to i32, !dbg !82
  %676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %675, i32 8, i32 31), !dbg !82
  %677 = bitcast i32 %676 to float, !dbg !82
  %678 = fcmp olt float %674, %677, !dbg !84
  %679 = fcmp uno float %674, 0.000000e+00, !dbg !89
  %680 = or i1 %678, %679, !dbg !87
  %681 = select i1 %680, float %674, float %677, !dbg !88
  %682 = bitcast float %681 to i32, !dbg !82
  %683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %682, i32 4, i32 31), !dbg !82
  %684 = bitcast i32 %683 to float, !dbg !82
  %685 = fcmp olt float %681, %684, !dbg !84
  %686 = fcmp uno float %681, 0.000000e+00, !dbg !89
  %687 = or i1 %685, %686, !dbg !87
  %688 = select i1 %687, float %681, float %684, !dbg !88
  %689 = bitcast float %688 to i32, !dbg !82
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 2, i32 31), !dbg !82
  %691 = bitcast i32 %690 to float, !dbg !82
  %692 = fcmp olt float %688, %691, !dbg !84
  %693 = fcmp uno float %688, 0.000000e+00, !dbg !89
  %694 = or i1 %692, %693, !dbg !87
  %695 = select i1 %694, float %688, float %691, !dbg !88
  %696 = bitcast float %695 to i32, !dbg !82
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 1, i32 31), !dbg !82
  %698 = bitcast i32 %697 to float, !dbg !82
  %699 = fcmp olt float %695, %698, !dbg !84
  %700 = fcmp uno float %695, 0.000000e+00, !dbg !89
  %701 = or i1 %699, %700, !dbg !87
  %702 = and i1 %666, %295, !dbg !82
  %703 = select i1 %701, i32 %696, i32 %697, !dbg !88
  %704 = insertelement <1 x i32> poison, i32 %703, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %704, i1 %702) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %705 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !82
  %706 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !82
  %707 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !82
  %708 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %709 = bitcast float %705 to i32, !dbg !90
  %710 = bitcast float %706 to i32, !dbg !90
  %711 = bitcast float %707 to i32, !dbg !90
  %712 = bitcast float %708 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %709, i32 %710, i32 %711, i32 %712, i1 true) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %713 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %506, !dbg !90
  %714 = load float, ptr addrspace(3) %713, align 4, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %715 = extractelement <8 x float> %490, i64 3, !dbg !91
  %716 = bitcast float %715 to i32, !dbg !91
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 16, i32 31), !dbg !91
  %718 = bitcast i32 %717 to float, !dbg !91
  %719 = fcmp ogt float %715, %718, !dbg !92
  %720 = extractelement <8 x i1> %514, i64 3, !dbg !93
  %721 = or i1 %720, %719, !dbg !93
  %722 = select i1 %721, float %715, float %718, !dbg !94
  %723 = bitcast float %722 to i32, !dbg !91
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 8, i32 31), !dbg !91
  %725 = bitcast i32 %724 to float, !dbg !91
  %726 = fcmp ogt float %722, %725, !dbg !92
  %727 = fcmp uno float %722, 0.000000e+00, !dbg !85
  %728 = or i1 %726, %727, !dbg !93
  %729 = select i1 %728, float %722, float %725, !dbg !94
  %730 = bitcast float %729 to i32, !dbg !91
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 4, i32 31), !dbg !91
  %732 = bitcast i32 %731 to float, !dbg !91
  %733 = fcmp ogt float %729, %732, !dbg !92
  %734 = fcmp uno float %729, 0.000000e+00, !dbg !85
  %735 = or i1 %733, %734, !dbg !93
  %736 = select i1 %735, float %729, float %732, !dbg !94
  %737 = bitcast float %736 to i32, !dbg !91
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 2, i32 31), !dbg !91
  %739 = bitcast i32 %738 to float, !dbg !91
  %740 = fcmp ogt float %736, %739, !dbg !92
  %741 = fcmp uno float %736, 0.000000e+00, !dbg !85
  %742 = or i1 %740, %741, !dbg !93
  %743 = select i1 %742, float %736, float %739, !dbg !94
  %744 = bitcast float %743 to i32, !dbg !91
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 1, i32 31), !dbg !91
  %746 = bitcast i32 %745 to float, !dbg !91
  %747 = fcmp ogt float %743, %746, !dbg !92
  %748 = fcmp uno float %743, 0.000000e+00, !dbg !85
  %749 = or i1 %747, %748, !dbg !93
  %750 = extractelement <8 x float> %490, i64 2, !dbg !91
  %751 = bitcast float %750 to i32, !dbg !91
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 16, i32 31), !dbg !91
  %753 = bitcast i32 %752 to float, !dbg !91
  %754 = fcmp ogt float %750, %753, !dbg !92
  %755 = extractelement <8 x i1> %514, i64 2, !dbg !93
  %756 = or i1 %755, %754, !dbg !93
  %757 = select i1 %756, float %750, float %753, !dbg !94
  %758 = bitcast float %757 to i32, !dbg !91
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 8, i32 31), !dbg !91
  %760 = bitcast i32 %759 to float, !dbg !91
  %761 = fcmp ogt float %757, %760, !dbg !92
  %762 = fcmp uno float %757, 0.000000e+00, !dbg !85
  %763 = or i1 %761, %762, !dbg !93
  %764 = select i1 %763, float %757, float %760, !dbg !94
  %765 = bitcast float %764 to i32, !dbg !91
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 4, i32 31), !dbg !91
  %767 = bitcast i32 %766 to float, !dbg !91
  %768 = fcmp ogt float %764, %767, !dbg !92
  %769 = fcmp uno float %764, 0.000000e+00, !dbg !85
  %770 = or i1 %768, %769, !dbg !93
  %771 = select i1 %770, float %764, float %767, !dbg !94
  %772 = bitcast float %771 to i32, !dbg !91
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 2, i32 31), !dbg !91
  %774 = bitcast i32 %773 to float, !dbg !91
  %775 = fcmp ogt float %771, %774, !dbg !92
  %776 = fcmp uno float %771, 0.000000e+00, !dbg !85
  %777 = or i1 %775, %776, !dbg !93
  %778 = select i1 %777, float %771, float %774, !dbg !94
  %779 = bitcast float %778 to i32, !dbg !91
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 1, i32 31), !dbg !91
  %781 = bitcast i32 %780 to float, !dbg !91
  %782 = fcmp ogt float %778, %781, !dbg !92
  %783 = fcmp uno float %778, 0.000000e+00, !dbg !85
  %784 = or i1 %782, %783, !dbg !93
  %785 = extractelement <8 x float> %490, i64 1, !dbg !91
  %786 = bitcast float %785 to i32, !dbg !91
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 16, i32 31), !dbg !91
  %788 = bitcast i32 %787 to float, !dbg !91
  %789 = fcmp ogt float %785, %788, !dbg !92
  %790 = extractelement <8 x i1> %514, i64 1, !dbg !93
  %791 = or i1 %790, %789, !dbg !93
  %792 = select i1 %791, float %785, float %788, !dbg !94
  %793 = bitcast float %792 to i32, !dbg !91
  %794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %793, i32 8, i32 31), !dbg !91
  %795 = bitcast i32 %794 to float, !dbg !91
  %796 = fcmp ogt float %792, %795, !dbg !92
  %797 = fcmp uno float %792, 0.000000e+00, !dbg !85
  %798 = or i1 %796, %797, !dbg !93
  %799 = select i1 %798, float %792, float %795, !dbg !94
  %800 = bitcast float %799 to i32, !dbg !91
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 4, i32 31), !dbg !91
  %802 = bitcast i32 %801 to float, !dbg !91
  %803 = fcmp ogt float %799, %802, !dbg !92
  %804 = fcmp uno float %799, 0.000000e+00, !dbg !85
  %805 = or i1 %803, %804, !dbg !93
  %806 = select i1 %805, float %799, float %802, !dbg !94
  %807 = bitcast float %806 to i32, !dbg !91
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 2, i32 31), !dbg !91
  %809 = bitcast i32 %808 to float, !dbg !91
  %810 = fcmp ogt float %806, %809, !dbg !92
  %811 = fcmp uno float %806, 0.000000e+00, !dbg !85
  %812 = or i1 %810, %811, !dbg !93
  %813 = select i1 %812, float %806, float %809, !dbg !94
  %814 = bitcast float %813 to i32, !dbg !91
  %815 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %814, i32 1, i32 31), !dbg !91
  %816 = bitcast i32 %815 to float, !dbg !91
  %817 = fcmp ogt float %813, %816, !dbg !92
  %818 = fcmp uno float %813, 0.000000e+00, !dbg !85
  %819 = or i1 %817, %818, !dbg !93
  %820 = extractelement <8 x float> %490, i64 0, !dbg !91
  %821 = bitcast float %820 to i32, !dbg !91
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %821, i32 16, i32 31), !dbg !91
  %823 = bitcast i32 %822 to float, !dbg !91
  %824 = fcmp ogt float %820, %823, !dbg !92
  %825 = extractelement <8 x i1> %514, i64 0, !dbg !93
  %826 = or i1 %825, %824, !dbg !93
  %827 = select i1 %826, float %820, float %823, !dbg !94
  %828 = bitcast float %827 to i32, !dbg !91
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 8, i32 31), !dbg !91
  %830 = bitcast i32 %829 to float, !dbg !91
  %831 = fcmp ogt float %827, %830, !dbg !92
  %832 = fcmp uno float %827, 0.000000e+00, !dbg !85
  %833 = or i1 %831, %832, !dbg !93
  %834 = select i1 %833, float %827, float %830, !dbg !94
  %835 = bitcast float %834 to i32, !dbg !91
  %836 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %835, i32 4, i32 31), !dbg !91
  %837 = bitcast i32 %836 to float, !dbg !91
  %838 = fcmp ogt float %834, %837, !dbg !92
  %839 = fcmp uno float %834, 0.000000e+00, !dbg !85
  %840 = or i1 %838, %839, !dbg !93
  %841 = select i1 %840, float %834, float %837, !dbg !94
  %842 = bitcast float %841 to i32, !dbg !91
  %843 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %842, i32 2, i32 31), !dbg !91
  %844 = bitcast i32 %843 to float, !dbg !91
  %845 = fcmp ogt float %841, %844, !dbg !92
  %846 = fcmp uno float %841, 0.000000e+00, !dbg !85
  %847 = or i1 %845, %846, !dbg !93
  %848 = select i1 %847, float %841, float %844, !dbg !94
  %849 = bitcast float %848 to i32, !dbg !91
  %850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %849, i32 1, i32 31), !dbg !91
  %851 = bitcast i32 %850 to float, !dbg !91
  %852 = fcmp ogt float %848, %851, !dbg !92
  %853 = fcmp uno float %848, 0.000000e+00, !dbg !85
  %854 = or i1 %852, %853, !dbg !93
  %855 = select i1 %749, i32 %744, i32 %745, !dbg !94
  %856 = insertelement <1 x i32> poison, i32 %855, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %856, i1 %295) #5, !dbg !91
  %857 = select i1 %784, i32 %779, i32 %780, !dbg !94
  %858 = insertelement <1 x i32> poison, i32 %857, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %655, <1 x i32> %858, i1 %295) #5, !dbg !91
  %859 = select i1 %819, i32 %814, i32 %815, !dbg !94
  %860 = insertelement <1 x i32> poison, i32 %859, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %860, i1 %295) #5, !dbg !91
  %861 = select i1 %854, i32 %849, i32 %850, !dbg !94
  %862 = insertelement <1 x i32> poison, i32 %861, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %663, <1 x i32> %862, i1 %295) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %863 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %305, i1 %666) #5, !dbg !91
  %864 = bitcast i32 %863 to float, !dbg !91
  %865 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 16, i32 31), !dbg !91
  %866 = bitcast i32 %865 to float, !dbg !91
  %867 = fcmp ogt float %864, %866, !dbg !92
  %868 = fcmp uno float %864, 0.000000e+00, !dbg !85
  %869 = or i1 %868, %867, !dbg !93
  %870 = select i1 %869, float %864, float %866, !dbg !94
  %871 = bitcast float %870 to i32, !dbg !91
  %872 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %871, i32 8, i32 31), !dbg !91
  %873 = bitcast i32 %872 to float, !dbg !91
  %874 = fcmp ogt float %870, %873, !dbg !92
  %875 = fcmp uno float %870, 0.000000e+00, !dbg !85
  %876 = or i1 %874, %875, !dbg !93
  %877 = select i1 %876, float %870, float %873, !dbg !94
  %878 = bitcast float %877 to i32, !dbg !91
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 4, i32 31), !dbg !91
  %880 = bitcast i32 %879 to float, !dbg !91
  %881 = fcmp ogt float %877, %880, !dbg !92
  %882 = fcmp uno float %877, 0.000000e+00, !dbg !85
  %883 = or i1 %881, %882, !dbg !93
  %884 = select i1 %883, float %877, float %880, !dbg !94
  %885 = bitcast float %884 to i32, !dbg !91
  %886 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %885, i32 2, i32 31), !dbg !91
  %887 = bitcast i32 %886 to float, !dbg !91
  %888 = fcmp ogt float %884, %887, !dbg !92
  %889 = fcmp uno float %884, 0.000000e+00, !dbg !85
  %890 = or i1 %888, %889, !dbg !93
  %891 = select i1 %890, float %884, float %887, !dbg !94
  %892 = bitcast float %891 to i32, !dbg !91
  %893 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %892, i32 1, i32 31), !dbg !91
  %894 = bitcast i32 %893 to float, !dbg !91
  %895 = fcmp ogt float %891, %894, !dbg !92
  %896 = fcmp uno float %891, 0.000000e+00, !dbg !85
  %897 = or i1 %895, %896, !dbg !93
  %898 = select i1 %897, i32 %892, i32 %893, !dbg !94
  %899 = insertelement <1 x i32> poison, i32 %898, i64 0, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %899, i1 %702) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %900 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %901 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !91
  %902 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !91
  %903 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %904 = bitcast float %900 to i32, !dbg !95
  %905 = bitcast float %901 to i32, !dbg !95
  %906 = bitcast float %902 to i32, !dbg !95
  %907 = bitcast float %903 to i32, !dbg !95
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %904, i32 %905, i32 %906, i32 %907, i1 true) #5, !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %908 = load float, ptr addrspace(3) %713, align 4, !dbg !95
  %909 = sext i32 %507 to i64, !dbg !96
  %910 = getelementptr bfloat, ptr addrspace(1) %4, i64 %909, !dbg !96
  %911 = fptrunc float %714 to bfloat, !dbg !90
  %912 = and i32 %21, 1020, !dbg !90
  %913 = icmp eq i32 %912, 0, !dbg !90
  %914 = bitcast bfloat %911 to i16, !dbg !90
  %915 = and i1 %913, %508, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %914, ptr addrspace(1) %910, i1 %915) #5, !dbg !90
  %916 = getelementptr bfloat, ptr addrspace(1) %5, i64 %909, !dbg !97
  %917 = fptrunc float %908 to bfloat, !dbg !95
  %918 = bitcast bfloat %917 to i16, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %918, ptr addrspace(1) %916, i1 %915) #5, !dbg !95
  %919 = getelementptr bfloat, ptr addrspace(1) %6, i64 %909, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %914, ptr addrspace(1) %919, i1 %915) #5, !dbg !99
  %920 = getelementptr bfloat, ptr addrspace(1) %7, i64 %909, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %918, ptr addrspace(1) %920, i1 %915) #5, !dbg !101
  %921 = getelementptr bfloat, ptr addrspace(1) %8, i64 %909, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %914, ptr addrspace(1) %921, i1 %915) #5, !dbg !103
  %922 = getelementptr bfloat, ptr addrspace(1) %9, i64 %909, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %918, ptr addrspace(1) %922, i1 %915) #5, !dbg !105
  %923 = getelementptr bfloat, ptr addrspace(1) %10, i64 %909, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %914, ptr addrspace(1) %923, i1 %915) #5, !dbg !107
  %924 = getelementptr bfloat, ptr addrspace(1) %11, i64 %909, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %918, ptr addrspace(1) %924, i1 %915) #5, !dbg !109
  %925 = insertelement <4 x float> poison, float %708, i64 0, !dbg !110
  %926 = insertelement <4 x float> %925, float %707, i64 1, !dbg !110
  %927 = insertelement <4 x float> %926, float %706, i64 2, !dbg !110
  %928 = insertelement <4 x float> %927, float %705, i64 3, !dbg !110
  %929 = fcmp oge <4 x float> %928, zeroinitializer, !dbg !110
  %930 = select <4 x i1> %929, <4 x float> zeroinitializer, <4 x float> %928, !dbg !110
  %931 = fsub <4 x float> zeroinitializer, %930, !dbg !112
  %932 = insertelement <4 x float> poison, float %903, i64 0, !dbg !113
  %933 = insertelement <4 x float> %932, float %902, i64 1, !dbg !113
  %934 = insertelement <4 x float> %933, float %901, i64 2, !dbg !113
  %935 = insertelement <4 x float> %934, float %900, i64 3, !dbg !113
  %936 = fcmp ole <4 x float> %935, zeroinitializer, !dbg !113
  %937 = select <4 x i1> %936, <4 x float> zeroinitializer, <4 x float> %935, !dbg !113
  %938 = fcmp ogt <4 x float> %931, %937, !dbg !115
  %939 = fcmp uno <4 x float> %931, zeroinitializer, !dbg !117
  %940 = or <4 x i1> %939, %938, !dbg !118
  %941 = select <4 x i1> %940, <4 x float> %931, <4 x float> %937, !dbg !119
  %942 = fmul <4 x float> %941, splat (float 0x3F80204080000000), !dbg !120
  %943 = fcmp ogt <4 x float> %942, splat (float 0x3EE4F8B580000000), !dbg !121
  %944 = extractelement <4 x float> %942, i64 3, !dbg !123
  %945 = fcmp uno float %944, 0.000000e+00, !dbg !124
  %946 = extractelement <4 x float> %942, i64 2, !dbg !123
  %947 = fcmp uno float %946, 0.000000e+00, !dbg !124
  %948 = extractelement <4 x float> %942, i64 1, !dbg !123
  %949 = fcmp uno float %948, 0.000000e+00, !dbg !124
  %950 = extractelement <4 x float> %942, i64 0, !dbg !123
  %951 = fcmp uno float %950, 0.000000e+00, !dbg !124
  %952 = extractelement <4 x i1> %943, i64 3, !dbg !125
  %953 = or i1 %952, %945, !dbg !125
  %954 = extractelement <4 x i1> %943, i64 2, !dbg !125
  %955 = or i1 %954, %947, !dbg !125
  %956 = extractelement <4 x i1> %943, i64 1, !dbg !125
  %957 = or i1 %956, %949, !dbg !125
  %958 = extractelement <4 x i1> %943, i64 0, !dbg !125
  %959 = or i1 %958, %951, !dbg !125
  %960 = select i1 %953, float %944, float 0x3EE4F8B580000000, !dbg !123
  %961 = select i1 %955, float %946, float 0x3EE4F8B580000000, !dbg !123
  %962 = select i1 %957, float %948, float 0x3EE4F8B580000000, !dbg !123
  %963 = select i1 %959, float %950, float 0x3EE4F8B580000000, !dbg !123
  %964 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %960), !dbg !126
  %965 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %961), !dbg !126
  %966 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %962), !dbg !126
  %967 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %963), !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %968 = bitcast float %964 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %968, i1 true) #5, !dbg !127
  %969 = bitcast float %965 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %969, i1 true) #5, !dbg !127
  %970 = bitcast float %966 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %970, i1 true) #5, !dbg !127
  %971 = bitcast float %967 to <1 x i32>, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %971, i1 true) #5, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %972 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %296, !dbg !127
  %973 = load float, ptr addrspace(3) %972, align 8, !dbg !127
  %974 = getelementptr bfloat, ptr addrspace(1) %3, i64 %32, !dbg !128
  %975 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %974, i1 %26) #5, !dbg !129
  %976 = extractvalue { i32, i32 } %975, 0, !dbg !129
  %977 = bitcast i32 %976 to <2 x bfloat>, !dbg !129
  %978 = extractvalue { i32, i32 } %975, 1, !dbg !129
  %979 = bitcast i32 %978 to <2 x bfloat>, !dbg !129
  %980 = extractelement <2 x bfloat> %977, i64 0, !dbg !129
  %981 = extractelement <2 x bfloat> %977, i64 1, !dbg !129
  %982 = extractelement <2 x bfloat> %979, i64 0, !dbg !129
  %983 = extractelement <2 x bfloat> %979, i64 1, !dbg !129
  %984 = fpext bfloat %980 to float, !dbg !130
  %985 = fpext bfloat %981 to float, !dbg !130
  %986 = fpext bfloat %982 to float, !dbg !130
  %987 = fpext bfloat %983 to float, !dbg !130
  %988 = fmul float %973, %984, !dbg !127
  %989 = fmul float %973, %985, !dbg !127
  %990 = fmul float %973, %986, !dbg !127
  %991 = fmul float %973, %987, !dbg !127
  %992 = tail call float @llvm.nvvm.round.f(float %988) #5, !dbg !131
  %993 = tail call float @llvm.nvvm.round.f(float %989) #5, !dbg !131
  %994 = tail call float @llvm.nvvm.round.f(float %990) #5, !dbg !131
  %995 = tail call float @llvm.nvvm.round.f(float %991) #5, !dbg !131
  %996 = insertelement <4 x float> poison, float %992, i64 0, !dbg !132
  %997 = insertelement <4 x float> %996, float %993, i64 1, !dbg !132
  %998 = insertelement <4 x float> %997, float %994, i64 2, !dbg !132
  %999 = insertelement <4 x float> %998, float %995, i64 3, !dbg !132
  %1000 = fcmp ogt <4 x float> %999, splat (float -1.270000e+02), !dbg !132
  %1001 = fcmp uno <4 x float> %999, zeroinitializer, !dbg !134
  %1002 = or <4 x i1> %1000, %1001, !dbg !135
  %1003 = select <4 x i1> %1002, <4 x float> %999, <4 x float> splat (float -1.270000e+02), !dbg !136
  %1004 = fcmp olt <4 x float> %1003, splat (float 1.270000e+02), !dbg !137
  %1005 = fcmp uno <4 x float> %1003, zeroinitializer, !dbg !139
  %1006 = or <4 x i1> %1004, %1005, !dbg !140
  %1007 = fptosi <4 x float> %1003 to <4 x i8>, !dbg !141
  %1008 = select <4 x i1> %1006, <4 x i8> %1007, <4 x i8> splat (i8 127), !dbg !142
  %1009 = getelementptr i8, ptr addrspace(1) %12, i64 %32, !dbg !143
  %1010 = bitcast <4 x i8> %1008 to i32, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1010, ptr addrspace(1) %1009, i1 %26) #5, !dbg !144
  %1011 = getelementptr i8, ptr addrspace(1) %13, i64 %32, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1010, ptr addrspace(1) %1011, i1 %26) #5, !dbg !146
  %1012 = getelementptr i8, ptr addrspace(1) %14, i64 %32, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1010, ptr addrspace(1) %1012, i1 %26) #5, !dbg !148
  %1013 = getelementptr i8, ptr addrspace(1) %15, i64 %32, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1010, ptr addrspace(1) %1013, i1 %26) #5, !dbg !150
  %1014 = getelementptr bfloat, ptr addrspace(1) %3, i64 %52, !dbg !128
  %1015 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1014, i1 %26) #5, !dbg !129
  %1016 = extractvalue { i32, i32 } %1015, 0, !dbg !129
  %1017 = bitcast i32 %1016 to <2 x bfloat>, !dbg !129
  %1018 = extractvalue { i32, i32 } %1015, 1, !dbg !129
  %1019 = bitcast i32 %1018 to <2 x bfloat>, !dbg !129
  %1020 = extractelement <2 x bfloat> %1017, i64 0, !dbg !129
  %1021 = extractelement <2 x bfloat> %1017, i64 1, !dbg !129
  %1022 = extractelement <2 x bfloat> %1019, i64 0, !dbg !129
  %1023 = extractelement <2 x bfloat> %1019, i64 1, !dbg !129
  %1024 = fpext bfloat %1020 to float, !dbg !130
  %1025 = fpext bfloat %1021 to float, !dbg !130
  %1026 = fpext bfloat %1022 to float, !dbg !130
  %1027 = fpext bfloat %1023 to float, !dbg !130
  %1028 = fmul float %973, %1024, !dbg !127
  %1029 = fmul float %973, %1025, !dbg !127
  %1030 = fmul float %973, %1026, !dbg !127
  %1031 = fmul float %973, %1027, !dbg !127
  %1032 = tail call float @llvm.nvvm.round.f(float %1028) #5, !dbg !131
  %1033 = tail call float @llvm.nvvm.round.f(float %1029) #5, !dbg !131
  %1034 = tail call float @llvm.nvvm.round.f(float %1030) #5, !dbg !131
  %1035 = tail call float @llvm.nvvm.round.f(float %1031) #5, !dbg !131
  %1036 = insertelement <4 x float> poison, float %1032, i64 0, !dbg !132
  %1037 = insertelement <4 x float> %1036, float %1033, i64 1, !dbg !132
  %1038 = insertelement <4 x float> %1037, float %1034, i64 2, !dbg !132
  %1039 = insertelement <4 x float> %1038, float %1035, i64 3, !dbg !132
  %1040 = fcmp ogt <4 x float> %1039, splat (float -1.270000e+02), !dbg !132
  %1041 = fcmp uno <4 x float> %1039, zeroinitializer, !dbg !134
  %1042 = or <4 x i1> %1040, %1041, !dbg !135
  %1043 = select <4 x i1> %1042, <4 x float> %1039, <4 x float> splat (float -1.270000e+02), !dbg !136
  %1044 = fcmp olt <4 x float> %1043, splat (float 1.270000e+02), !dbg !137
  %1045 = fcmp uno <4 x float> %1043, zeroinitializer, !dbg !139
  %1046 = or <4 x i1> %1044, %1045, !dbg !140
  %1047 = fptosi <4 x float> %1043 to <4 x i8>, !dbg !141
  %1048 = select <4 x i1> %1046, <4 x i8> %1047, <4 x i8> splat (i8 127), !dbg !142
  %1049 = getelementptr i8, ptr addrspace(1) %12, i64 %52, !dbg !143
  %1050 = bitcast <4 x i8> %1048 to i32, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1050, ptr addrspace(1) %1049, i1 %26) #5, !dbg !144
  %1051 = getelementptr i8, ptr addrspace(1) %13, i64 %52, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1050, ptr addrspace(1) %1051, i1 %26) #5, !dbg !146
  %1052 = getelementptr i8, ptr addrspace(1) %14, i64 %52, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1050, ptr addrspace(1) %1052, i1 %26) #5, !dbg !148
  %1053 = getelementptr i8, ptr addrspace(1) %15, i64 %52, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1050, ptr addrspace(1) %1053, i1 %26) #5, !dbg !150
  %1054 = getelementptr bfloat, ptr addrspace(1) %3, i64 %97, !dbg !128
  %1055 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1054, i1 %26) #5, !dbg !129
  %1056 = extractvalue { i32, i32 } %1055, 0, !dbg !129
  %1057 = bitcast i32 %1056 to <2 x bfloat>, !dbg !129
  %1058 = extractvalue { i32, i32 } %1055, 1, !dbg !129
  %1059 = bitcast i32 %1058 to <2 x bfloat>, !dbg !129
  %1060 = extractelement <2 x bfloat> %1057, i64 0, !dbg !129
  %1061 = extractelement <2 x bfloat> %1057, i64 1, !dbg !129
  %1062 = extractelement <2 x bfloat> %1059, i64 0, !dbg !129
  %1063 = extractelement <2 x bfloat> %1059, i64 1, !dbg !129
  %1064 = fpext bfloat %1060 to float, !dbg !130
  %1065 = fpext bfloat %1061 to float, !dbg !130
  %1066 = fpext bfloat %1062 to float, !dbg !130
  %1067 = fpext bfloat %1063 to float, !dbg !130
  %1068 = fmul float %973, %1064, !dbg !127
  %1069 = fmul float %973, %1065, !dbg !127
  %1070 = fmul float %973, %1066, !dbg !127
  %1071 = fmul float %973, %1067, !dbg !127
  %1072 = tail call float @llvm.nvvm.round.f(float %1068) #5, !dbg !131
  %1073 = tail call float @llvm.nvvm.round.f(float %1069) #5, !dbg !131
  %1074 = tail call float @llvm.nvvm.round.f(float %1070) #5, !dbg !131
  %1075 = tail call float @llvm.nvvm.round.f(float %1071) #5, !dbg !131
  %1076 = insertelement <4 x float> poison, float %1072, i64 0, !dbg !132
  %1077 = insertelement <4 x float> %1076, float %1073, i64 1, !dbg !132
  %1078 = insertelement <4 x float> %1077, float %1074, i64 2, !dbg !132
  %1079 = insertelement <4 x float> %1078, float %1075, i64 3, !dbg !132
  %1080 = fcmp ogt <4 x float> %1079, splat (float -1.270000e+02), !dbg !132
  %1081 = fcmp uno <4 x float> %1079, zeroinitializer, !dbg !134
  %1082 = or <4 x i1> %1080, %1081, !dbg !135
  %1083 = select <4 x i1> %1082, <4 x float> %1079, <4 x float> splat (float -1.270000e+02), !dbg !136
  %1084 = fcmp olt <4 x float> %1083, splat (float 1.270000e+02), !dbg !137
  %1085 = fcmp uno <4 x float> %1083, zeroinitializer, !dbg !139
  %1086 = or <4 x i1> %1084, %1085, !dbg !140
  %1087 = fptosi <4 x float> %1083 to <4 x i8>, !dbg !141
  %1088 = select <4 x i1> %1086, <4 x i8> %1087, <4 x i8> splat (i8 127), !dbg !142
  %1089 = getelementptr i8, ptr addrspace(1) %12, i64 %97, !dbg !143
  %1090 = bitcast <4 x i8> %1088 to i32, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1090, ptr addrspace(1) %1089, i1 %26) #5, !dbg !144
  %1091 = getelementptr i8, ptr addrspace(1) %13, i64 %97, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1090, ptr addrspace(1) %1091, i1 %26) #5, !dbg !146
  %1092 = getelementptr i8, ptr addrspace(1) %14, i64 %97, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1090, ptr addrspace(1) %1092, i1 %26) #5, !dbg !148
  %1093 = getelementptr i8, ptr addrspace(1) %15, i64 %97, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1090, ptr addrspace(1) %1093, i1 %26) #5, !dbg !150
  ret void, !dbg !151
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 38, column: 41, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 42, column: 51, scope: !6)
!25 = !DILocation(line: 46, column: 66, scope: !6)
!26 = !DILocation(line: 210, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 210, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 211, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 211, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 211, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 45, column: 58, scope: !6)
!32 = !DILocation(line: 217, column: 21, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!34 = !DILocation(line: 47, column: 79, scope: !6)
!35 = !DILocation(line: 218, column: 28, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 219, column: 39, scope: !33, inlinedAt: !34)
!37 = !DILocation(line: 219, column: 60, scope: !33, inlinedAt: !34)
!38 = !DILocation(line: 219, column: 49, scope: !33, inlinedAt: !34)
!39 = !DILocation(line: 221, column: 25, scope: !33, inlinedAt: !34)
!40 = !DILocation(line: 221, column: 17, scope: !33, inlinedAt: !34)
!41 = !DILocation(line: 222, column: 15, scope: !33, inlinedAt: !34)
!42 = !DILocation(line: 222, column: 30, scope: !33, inlinedAt: !34)
!43 = !DILocation(line: 222, column: 38, scope: !33, inlinedAt: !34)
!44 = !DILocation(line: 222, column: 49, scope: !33, inlinedAt: !34)
!45 = !DILocation(line: 222, column: 22, scope: !33, inlinedAt: !34)
!46 = !DILocation(line: 229, column: 46, scope: !22, inlinedAt: !34)
!47 = !DILocation(line: 67, column: 24, scope: !6)
!48 = !DILocation(line: 69, column: 24, scope: !6)
!49 = !DILocation(line: 70, column: 32, scope: !6)
!50 = !DILocation(line: 53, column: 40, scope: !6)
!51 = !DILocation(line: 85, column: 50, scope: !6)
!52 = !DILocation(line: 54, column: 31, scope: !6)
!53 = !DILocation(line: 59, column: 41, scope: !6)
!54 = !DILocation(line: 59, column: 34, scope: !6)
!55 = !DILocation(line: 59, column: 51, scope: !6)
!56 = !DILocation(line: 59, column: 113, scope: !6)
!57 = !DILocation(line: 60, column: 42, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 49, scope: !6)
!60 = !DILocation(line: 61, column: 35, scope: !6)
!61 = !DILocation(line: 61, column: 49, scope: !6)
!62 = !DILocation(line: 61, column: 102, scope: !6)
!63 = !DILocation(line: 62, column: 35, scope: !6)
!64 = !DILocation(line: 62, column: 42, scope: !6)
!65 = !DILocation(line: 63, column: 35, scope: !6)
!66 = !DILocation(line: 63, column: 42, scope: !6)
!67 = !DILocation(line: 63, column: 95, scope: !6)
!68 = !DILocation(line: 65, column: 24, scope: !6)
!69 = !DILocation(line: 71, column: 24, scope: !6)
!70 = !DILocation(line: 74, column: 24, scope: !6)
!71 = !DILocation(line: 76, column: 24, scope: !6)
!72 = !DILocation(line: 79, column: 24, scope: !6)
!73 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !74)
!74 = !DILocation(line: 84, column: 47, scope: !6)
!75 = !DILocation(line: 77, column: 24, scope: !6)
!76 = !DILocation(line: 80, column: 24, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !74)
!78 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !74)
!79 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !74)
!80 = !DILocation(line: 86, column: 29, scope: !6)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 110, column: 29, scope: !22, inlinedAt: !83)
!83 = !DILocation(line: 87, column: 40, scope: !6)
!84 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !86)
!86 = !DILocation(line: 88, column: 40, scope: !6)
!87 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !83)
!88 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !83)
!89 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !83)
!90 = !DILocation(line: 89, column: 37, scope: !6)
!91 = !DILocation(line: 115, column: 29, scope: !22, inlinedAt: !86)
!92 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !86)
!93 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !86)
!94 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !86)
!95 = !DILocation(line: 90, column: 37, scope: !6)
!96 = !DILocation(line: 89, column: 25, scope: !6)
!97 = !DILocation(line: 90, column: 25, scope: !6)
!98 = !DILocation(line: 91, column: 25, scope: !6)
!99 = !DILocation(line: 91, column: 37, scope: !6)
!100 = !DILocation(line: 92, column: 25, scope: !6)
!101 = !DILocation(line: 92, column: 37, scope: !6)
!102 = !DILocation(line: 93, column: 25, scope: !6)
!103 = !DILocation(line: 93, column: 37, scope: !6)
!104 = !DILocation(line: 94, column: 25, scope: !6)
!105 = !DILocation(line: 94, column: 37, scope: !6)
!106 = !DILocation(line: 95, column: 25, scope: !6)
!107 = !DILocation(line: 95, column: 37, scope: !6)
!108 = !DILocation(line: 96, column: 26, scope: !6)
!109 = !DILocation(line: 96, column: 38, scope: !6)
!110 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !111)
!111 = !DILocation(line: 105, column: 46, scope: !6)
!112 = !DILocation(line: 106, column: 17, scope: !6)
!113 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !114)
!114 = !DILocation(line: 107, column: 46, scope: !6)
!115 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !116)
!116 = !DILocation(line: 108, column: 46, scope: !6)
!117 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !116)
!119 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !116)
!120 = !DILocation(line: 110, column: 24, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !122)
!122 = !DILocation(line: 113, column: 46, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !122)
!125 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !122)
!126 = !DILocation(line: 116, column: 25, scope: !6)
!127 = !DILocation(line: 119, column: 24, scope: !6)
!128 = !DILocation(line: 103, column: 36, scope: !6)
!129 = !DILocation(line: 103, column: 53, scope: !6)
!130 = !DILocation(line: 103, column: 115, scope: !6)
!131 = !DILocation(line: 120, column: 36, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !133)
!133 = !DILocation(line: 123, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !133)
!137 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !138)
!138 = !DILocation(line: 125, column: 46, scope: !6)
!139 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !138)
!140 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !138)
!141 = !DILocation(line: 127, column: 25, scope: !6)
!142 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !138)
!143 = !DILocation(line: 128, column: 30, scope: !6)
!144 = !DILocation(line: 128, column: 54, scope: !6)
!145 = !DILocation(line: 129, column: 30, scope: !6)
!146 = !DILocation(line: 129, column: 54, scope: !6)
!147 = !DILocation(line: 130, column: 30, scope: !6)
!148 = !DILocation(line: 130, column: 54, scope: !6)
!149 = !DILocation(line: 131, column: 30, scope: !6)
!150 = !DILocation(line: 131, column: 54, scope: !6)
!151 = !DILocation(line: 97, column: 4, scope: !6)
