; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/uw/cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !10 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %12 = shl i32 %11, 6, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = lshr i32 %13, 1, !dbg !13
  %15 = and i32 %14, 63, !dbg !13
  %16 = lshr i32 %13, 3, !dbg !13
  %17 = and i32 %16, 15, !dbg !13
  %18 = or disjoint i32 %15, %12, !dbg !14
  %19 = or disjoint i32 %17, %12, !dbg !14
  %20 = or disjoint i32 %19, 16, !dbg !14
  %21 = or disjoint i32 %19, 32, !dbg !14
  %22 = or disjoint i32 %19, 48, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !15
  %24 = icmp slt i32 %19, 512, !dbg !15
  %25 = icmp slt i32 %20, 512, !dbg !15
  %26 = icmp slt i32 %21, 512, !dbg !15
  %27 = icmp slt i32 %22, 512, !dbg !15
  %28 = shl i32 %13, 2, !dbg !16
  %29 = and i32 %28, 4, !dbg !16
  %30 = sext i32 %18 to i64, !dbg !17
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !17
  %32 = sext i32 %19 to i64, !dbg !17
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = sext i32 %20 to i64, !dbg !17
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !17
  %36 = sext i32 %21 to i64, !dbg !17
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !17
  %38 = sext i32 %22 to i64, !dbg !17
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %23) #6, !dbg !18
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %23) #6, !dbg !18
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %23) #6, !dbg !18
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %23) #6, !dbg !18
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %24) #6, !dbg !18
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %25) #6, !dbg !18
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %26) #6, !dbg !18
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %27) #6, !dbg !18
  %48 = shl i32 %18, 12, !dbg !19
  %49 = icmp slt i64 %43, 0, !dbg !20
  %50 = insertelement <4 x i64> poison, i64 %47, i64 0, !dbg !21
  %51 = insertelement <4 x i64> %50, i64 %46, i64 1, !dbg !21
  %52 = insertelement <4 x i64> %51, i64 %45, i64 2, !dbg !21
  %53 = insertelement <4 x i64> %52, i64 %44, i64 3, !dbg !21
  %54 = add <4 x i64> %53, splat (i64 32128), !dbg !21
  %55 = icmp slt <4 x i64> %53, zeroinitializer, !dbg !20
  %56 = select <4 x i1> %55, <4 x i64> %54, <4 x i64> %53, !dbg !22
  %57 = icmp ugt <4 x i64> %56, splat (i64 32127), !dbg !23
  %58 = extractelement <4 x i1> %57, i64 3, !dbg !24
  %.not3 = and i1 %24, %58, !dbg !24
  %59 = extractelement <4 x i1> %57, i64 2, !dbg !24
  %.not4 = and i1 %25, %59, !dbg !24
  %60 = extractelement <4 x i1> %57, i64 1, !dbg !24
  %.not5 = and i1 %26, %60, !dbg !24
  %61 = extractelement <4 x i1> %57, i64 0, !dbg !25
  %.not6 = and i1 %27, %61, !dbg !25
  %62 = shl i64 %43, 12, !dbg !25
  %63 = add i64 %62, 131596288, !dbg !25
  %64 = select i1 %49, i64 %63, i64 %62, !dbg !25
  %invariant.op = or disjoint i32 %29, %48, !dbg !26
  %invariant.op17 = or i1 %.not5, %.not6, !dbg !26
  %65 = or i1 %.not3, %.not4
  %.reass18 = or i1 %65, %invariant.op17
  %66 = zext nneg i32 %29 to i64, !dbg !26
  %67 = or disjoint i64 %64, %66
  %68 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !27
  %69 = shufflevector <4 x i1> %68, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !27
  br label %70, !dbg !26

70:                                               ; preds = %10, %81
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %81 ]
  %71 = phi <4 x float> [ zeroinitializer, %10 ], [ %119, %81 ]
  %72 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %72
  %73 = sext i32 %.reass to i64, !dbg !28
  %74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %73, !dbg !28
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %74, i1 %23) #6, !dbg !29
  %76 = getelementptr bfloat, ptr addrspace(1) %3, i64 %73, !dbg !30
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %76, i1 %23) #6, !dbg !31
  %78 = getelementptr bfloat, ptr addrspace(1) %4, i64 %73, !dbg !32
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %78, i1 %23) #6, !dbg !33
  br i1 %.reass18, label %80, label %81, !dbg !34

80:                                               ; preds = %70
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 44, ptr nonnull @assertFunc_0, i64 1), !dbg !34
  unreachable, !dbg !34

81:                                               ; preds = %70
  %82 = extractvalue { i32, i32 } %79, 1, !dbg !33
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !33
  %84 = extractvalue { i32, i32 } %79, 0, !dbg !33
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !33
  %86 = extractvalue { i32, i32 } %77, 1, !dbg !31
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !31
  %88 = extractvalue { i32, i32 } %77, 0, !dbg !31
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !31
  %90 = extractvalue { i32, i32 } %75, 1, !dbg !29
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !29
  %92 = extractvalue { i32, i32 } %75, 0, !dbg !29
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %94 = or i64 %67, %indvars.iv, !dbg !35
  %95 = getelementptr bfloat, ptr addrspace(1) %2, i64 %94, !dbg !36
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %95, i1 %23) #6, !dbg !37
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !37
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !37
  %99 = extractvalue { i32, i32 } %96, 1, !dbg !37
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !37
  %101 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !38
  %102 = fpext <2 x bfloat> %89 to <2 x float>, !dbg !39
  %103 = fpext <2 x bfloat> %93 to <2 x float>, !dbg !40
  %104 = fpext <2 x bfloat> %98 to <2 x float>, !dbg !41
  %105 = fadd <2 x float> %103, %104, !dbg !42
  %106 = fadd <2 x float> %105, %102, !dbg !43
  %107 = fadd <2 x float> %106, %101, !dbg !44
  %108 = fptrunc <2 x float> %107 to <2 x bfloat>, !dbg !45
  %109 = fpext <2 x bfloat> %83 to <2 x float>, !dbg !38
  %110 = fpext <2 x bfloat> %87 to <2 x float>, !dbg !39
  %111 = fpext <2 x bfloat> %91 to <2 x float>, !dbg !40
  %112 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !41
  %113 = fadd <2 x float> %111, %112, !dbg !42
  %114 = fadd <2 x float> %113, %110, !dbg !43
  %115 = fadd <2 x float> %114, %109, !dbg !44
  %116 = shufflevector <2 x float> %107, <2 x float> %115, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !46
  %117 = fmul <4 x float> %116, %116, !dbg !46
  %118 = fadd <4 x float> %71, %117, !dbg !47
  %119 = select <4 x i1> %69, <4 x float> %118, <4 x float> %71, !dbg !27
  %120 = fptrunc <2 x float> %115 to <2 x bfloat>, !dbg !45
  %121 = bitcast <2 x bfloat> %108 to i32, !dbg !45
  %122 = bitcast <2 x bfloat> %120 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %74, i1 %23) #6, !dbg !45
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !26
  %123 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !26
  br i1 %123, label %70, label %__nv_rsqrtf.exit, !dbg !26

__nv_rsqrtf.exit:                                 ; preds = %81
  %shift = shufflevector <4 x float> %119, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !48
  %124 = fadd <4 x float> %119, %shift, !dbg !48
  %shift32 = shufflevector <4 x float> %119, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !48
  %125 = fadd <4 x float> %shift32, %124, !dbg !48
  %shift33 = shufflevector <4 x float> %119, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !48
  %126 = fadd <4 x float> %shift33, %125, !dbg !48
  %127 = extractelement <4 x float> %126, i64 0, !dbg !48
  %128 = bitcast float %127 to i32, !dbg !53
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !53
  %130 = bitcast i32 %129 to float, !dbg !53
  %131 = fadd float %127, %130, !dbg !48
  %132 = tail call float @llvm.nvvm.div.full(float %131, float 4.096000e+03), !dbg !54
  %133 = fadd float %132, 0x3EB0C6F7A0000000, !dbg !55
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !56
  %.not.i13 = icmp eq i32 %137, 0, !dbg !56
  br i1 %.not.i13, label %140, label %138, !dbg !56

138:                                              ; preds = %__nv_rsqrtf.exit
  %139 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !56
  br label %__nv_rsqrtf.exit15, !dbg !56

140:                                              ; preds = %__nv_rsqrtf.exit
  %141 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !56
  br label %__nv_rsqrtf.exit15, !dbg !56

__nv_rsqrtf.exit15:                               ; preds = %138, %140
  %.0.i14 = phi float [ %139, %138 ], [ %141, %140 ], !dbg !56
  %142 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !57
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  br label %144, !dbg !58

144:                                              ; preds = %__nv_rsqrtf.exit15, %144
  %indvars.iv24 = phi i64 [ 0, %__nv_rsqrtf.exit15 ], [ %indvars.iv.next25, %144 ]
  %145 = or disjoint i64 %indvars.iv24, %66, !dbg !59
  %146 = getelementptr bfloat, ptr addrspace(1) %5, i64 %145, !dbg !60
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %146, i1 true) #6, !dbg !61
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !61
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !61
  %150 = extractvalue { i32, i32 } %147, 1, !dbg !61
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !61
  %152 = trunc nuw nsw i64 %indvars.iv24 to i32
  %.reass20 = or i32 %invariant.op, %152
  %153 = sext i32 %.reass20 to i64, !dbg !62
  %154 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !62
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %154, i1 %23) #6, !dbg !63
  %156 = extractvalue { i32, i32 } %155, 0, !dbg !63
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !63
  %158 = extractvalue { i32, i32 } %155, 1, !dbg !63
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !63
  %160 = getelementptr bfloat, ptr addrspace(1) %6, i64 %153, !dbg !64
  %161 = fpext <2 x bfloat> %149 to <2 x float>, !dbg !65
  %162 = fpext <2 x bfloat> %157 to <2 x float>, !dbg !66
  %163 = fmul <2 x float> %143, %162, !dbg !57
  %164 = fmul <2 x float> %163, %161, !dbg !67
  %165 = fptrunc <2 x float> %164 to <2 x bfloat>, !dbg !68
  %166 = fpext <2 x bfloat> %151 to <2 x float>, !dbg !65
  %167 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !66
  %168 = fmul <2 x float> %143, %167, !dbg !57
  %169 = fmul <2 x float> %168, %166, !dbg !67
  %170 = fptrunc <2 x float> %169 to <2 x bfloat>, !dbg !68
  %171 = bitcast <2 x bfloat> %165 to i32, !dbg !68
  %172 = bitcast <2 x bfloat> %170 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %171, i32 %172, ptr addrspace(1) %160, i1 %23) #6, !dbg !68
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 8, !dbg !58
  %173 = icmp samesign ult i64 %indvars.iv24, 4088, !dbg !58
  br i1 %173, label %144, label %174, !dbg !58

174:                                              ; preds = %144
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuwqweqombf22k2ntkofgsbv57sj5vvdcybuqrcnhbhopfhqsq64.py", directory: "/tmp/torchinductor_root/uw")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 50, scope: !10)
!20 = !DILocation(line: 42, column: 22, scope: !10)
!21 = !DILocation(line: 41, column: 22, scope: !10)
!22 = !DILocation(line: 43, column: 36, scope: !10)
!23 = !DILocation(line: 44, column: 41, scope: !10)
!24 = !DILocation(line: 44, column: 58, scope: !10)
!25 = !DILocation(line: 45, column: 46, scope: !10)
!26 = !DILocation(line: 31, column: 40, scope: !10)
!27 = !DILocation(line: 53, column: 50, scope: !10)
!28 = !DILocation(line: 37, column: 38, scope: !10)
!29 = !DILocation(line: 37, column: 55, scope: !10)
!30 = !DILocation(line: 38, column: 34, scope: !10)
!31 = !DILocation(line: 38, column: 51, scope: !10)
!32 = !DILocation(line: 39, column: 35, scope: !10)
!33 = !DILocation(line: 39, column: 52, scope: !10)
!34 = !DILocation(line: 44, column: 68, scope: !10)
!35 = !DILocation(line: 45, column: 41, scope: !10)
!36 = !DILocation(line: 45, column: 34, scope: !10)
!37 = !DILocation(line: 45, column: 53, scope: !10)
!38 = !DILocation(line: 39, column: 114, scope: !10)
!39 = !DILocation(line: 38, column: 113, scope: !10)
!40 = !DILocation(line: 37, column: 117, scope: !10)
!41 = !DILocation(line: 45, column: 115, scope: !10)
!42 = !DILocation(line: 46, column: 22, scope: !10)
!43 = !DILocation(line: 47, column: 23, scope: !10)
!44 = !DILocation(line: 48, column: 24, scope: !10)
!45 = !DILocation(line: 54, column: 56, scope: !10)
!46 = !DILocation(line: 50, column: 24, scope: !10)
!47 = !DILocation(line: 52, column: 25, scope: !10)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !10, file: !50, discriminator: 0)
!52 = !DILocation(line: 55, column: 27, scope: !10)
!53 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 66, column: 25, scope: !10)
!55 = !DILocation(line: 68, column: 24, scope: !10)
!56 = !DILocation(line: 69, column: 32, scope: !10)
!57 = !DILocation(line: 70, column: 24, scope: !10)
!58 = !DILocation(line: 56, column: 40, scope: !10)
!59 = !DILocation(line: 57, column: 31, scope: !10)
!60 = !DILocation(line: 62, column: 35, scope: !10)
!61 = !DILocation(line: 62, column: 42, scope: !10)
!62 = !DILocation(line: 63, column: 39, scope: !10)
!63 = !DILocation(line: 63, column: 56, scope: !10)
!64 = !DILocation(line: 73, column: 29, scope: !10)
!65 = !DILocation(line: 62, column: 95, scope: !10)
!66 = !DILocation(line: 63, column: 118, scope: !10)
!67 = !DILocation(line: 72, column: 24, scope: !10)
!68 = !DILocation(line: 73, column: 53, scope: !10)
!69 = !DILocation(line: 56, column: 4, scope: !10)
