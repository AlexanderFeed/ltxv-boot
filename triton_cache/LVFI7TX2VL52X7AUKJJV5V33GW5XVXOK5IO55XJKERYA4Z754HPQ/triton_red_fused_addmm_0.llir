; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 1023, !dbg !11
  %11 = mul i32 %7, 3072, !dbg !12
  %12 = zext nneg i32 %10 to i64, !dbg !13
  %13 = getelementptr bfloat, ptr addrspace(1) %0, i64 %12, !dbg !14
  %14 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %13, i1 true) #4, !dbg !15
  br i1 %8, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %6
  %15 = or disjoint i32 %10, %11, !dbg !16
  %16 = sext i32 %15 to i64, !dbg !17
  %17 = getelementptr bfloat, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %17, i1 false) #4, !dbg !18
  %19 = or disjoint i64 %12, 1024, !dbg !19
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !14
  %21 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %20, i1 true) #4, !dbg !15
  %22 = trunc nuw nsw i64 %19 to i32, !dbg !16
  %23 = add i32 %11, %22, !dbg !16
  %24 = sext i32 %23 to i64, !dbg !17
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 false) #4, !dbg !18
  %27 = or disjoint i64 %12, 2048, !dbg !19
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !14
  %29 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 true) #4, !dbg !15
  %30 = trunc nuw nsw i64 %27 to i32, !dbg !16
  %31 = add i32 %11, %30, !dbg !16
  %32 = sext i32 %31 to i64, !dbg !17
  %33 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 false) #4, !dbg !18
  br label %.split2.us, !dbg !11

.split.us.preheader:                              ; preds = %6
  %35 = bitcast i16 %14 to bfloat, !dbg !15
  %36 = fpext bfloat %35 to float, !dbg !20
  %37 = or disjoint i32 %10, %11, !dbg !16
  %38 = sext i32 %37 to i64, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %39, i1 true) #4, !dbg !18
  %41 = bitcast i16 %40 to bfloat, !dbg !18
  %42 = fpext bfloat %41 to float, !dbg !21
  %43 = fsub float 0.000000e+00, %36, !dbg !22
  %44 = fmul float %43, 0x3FF7154760000000, !dbg !26
  %45 = tail call float @llvm.nvvm.ex2.approx.f(float %44), !dbg !26
  %46 = fadd float %45, 1.000000e+00, !dbg !27
  %47 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %46), !dbg !28
  %48 = fmul float %47, %36, !dbg !29
  %49 = fmul float %48, %42, !dbg !30
  %50 = fadd float %49, 0.000000e+00, !dbg !31
  %51 = or disjoint i64 %12, 1024, !dbg !19
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !14
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 true) #4, !dbg !15
  %54 = trunc nuw nsw i64 %51 to i32, !dbg !16
  %55 = add i32 %11, %54, !dbg !16
  %56 = sext i32 %55 to i64, !dbg !17
  %57 = getelementptr bfloat, ptr addrspace(1) %1, i64 %56, !dbg !17
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 true) #4, !dbg !18
  %59 = or disjoint i64 %12, 2048, !dbg !19
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !14
  %61 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %60, i1 true) #4, !dbg !15
  %62 = trunc nuw nsw i64 %59 to i32, !dbg !16
  %63 = add i32 %11, %62, !dbg !16
  %64 = sext i32 %63 to i64, !dbg !17
  %65 = getelementptr bfloat, ptr addrspace(1) %1, i64 %64, !dbg !17
  %66 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %65, i1 true) #4, !dbg !18
  %67 = insertelement <2 x i16> poison, i16 %53, i64 0, !dbg !15
  %68 = insertelement <2 x i16> %67, i16 %61, i64 1, !dbg !15
  %69 = bitcast <2 x i16> %68 to <2 x bfloat>, !dbg !15
  %70 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !20
  %71 = extractelement <2 x float> %70, i64 0, !dbg !22
  %72 = fsub float 0.000000e+00, %71, !dbg !22
  %73 = fmul float %72, 0x3FF7154760000000, !dbg !26
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %73), !dbg !26
  %75 = fadd float %74, 1.000000e+00, !dbg !27
  %76 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !28
  %77 = insertelement <2 x i16> poison, i16 %58, i64 0, !dbg !18
  %78 = insertelement <2 x i16> %77, i16 %66, i64 1, !dbg !18
  %79 = bitcast <2 x i16> %78 to <2 x bfloat>, !dbg !18
  %80 = fpext <2 x bfloat> %79 to <2 x float>, !dbg !21
  %81 = extractelement <2 x float> %70, i64 1, !dbg !22
  %82 = fsub float 0.000000e+00, %81, !dbg !22
  %83 = fmul float %82, 0x3FF7154760000000, !dbg !26
  %84 = tail call float @llvm.nvvm.ex2.approx.f(float %83), !dbg !26
  %85 = fadd float %84, 1.000000e+00, !dbg !27
  %86 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %85), !dbg !28
  %87 = insertelement <2 x float> poison, float %76, i64 0, !dbg !29
  %88 = insertelement <2 x float> %87, float %86, i64 1, !dbg !29
  %89 = fmul <2 x float> %88, %70, !dbg !29
  %90 = fmul <2 x float> %89, %80, !dbg !30
  %91 = extractelement <2 x float> %90, i64 0, !dbg !31
  %92 = fadd float %50, %91, !dbg !31
  %93 = extractelement <2 x float> %90, i64 1, !dbg !31
  %94 = fadd float %92, %93, !dbg !31
  br label %.split2.us, !dbg !11

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.us-phi = phi float [ %94, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !11
  %95 = lshr i32 %9, 5, !dbg !11
  %96 = and i32 %9, 31, !dbg !11
  %97 = bitcast float %.us-phi to i32, !dbg !32
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !32
  %99 = bitcast i32 %98 to float, !dbg !32
  %100 = fadd float %.us-phi, %99, !dbg !34
  %101 = bitcast float %100 to i32, !dbg !32
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !32
  %103 = bitcast i32 %102 to float, !dbg !32
  %104 = fadd float %100, %103, !dbg !34
  %105 = bitcast float %104 to i32, !dbg !32
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = fadd float %104, %107, !dbg !34
  %109 = bitcast float %108 to i32, !dbg !32
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = fadd float %108, %111, !dbg !34
  %113 = bitcast float %112 to i32, !dbg !32
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !32
  %115 = bitcast i32 %114 to float, !dbg !32
  %116 = fadd float %112, %115, !dbg !34
  %117 = and i32 %95, 31, !dbg !32
  %118 = icmp eq i32 %96, 0, !dbg !32
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !32
  %120 = bitcast float %116 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 %118) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %121 = icmp slt i32 %9, 32, !dbg !32
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !32
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %122, i1 %121) #4, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = fadd float %124, %126, !dbg !34
  %128 = bitcast float %127 to i32, !dbg !32
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !32
  %130 = bitcast i32 %129 to float, !dbg !32
  %131 = fadd float %127, %130, !dbg !34
  %132 = bitcast float %131 to i32, !dbg !32
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !32
  %134 = bitcast i32 %133 to float, !dbg !32
  %135 = fadd float %131, %134, !dbg !34
  %136 = bitcast float %135 to i32, !dbg !32
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !32
  %138 = bitcast i32 %137 to float, !dbg !32
  %139 = fadd float %135, %138, !dbg !34
  %140 = bitcast float %139 to i32, !dbg !32
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !32
  %142 = bitcast i32 %141 to float, !dbg !32
  %143 = fadd float %139, %142, !dbg !34
  %144 = and i1 %121, %118, !dbg !32
  %145 = bitcast float %143 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %145, i1 %144) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %146 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %147 = sext i32 %7 to i64, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !36
  %149 = icmp eq i32 %10, 0, !dbg !37
  %150 = and i1 %8, %149, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %148, i1 %150) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 30, column: 40, scope: !6)
!14 = !DILocation(line: 36, column: 34, scope: !6)
!15 = !DILocation(line: 36, column: 41, scope: !6)
!16 = !DILocation(line: 37, column: 41, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 31, column: 31, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 113, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 48, column: 27, scope: !6)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!36 = !DILocation(line: 49, column: 25, scope: !6)
!37 = !DILocation(line: 49, column: 37, scope: !6)
!38 = !DILocation(line: 49, column: 4, scope: !6)
