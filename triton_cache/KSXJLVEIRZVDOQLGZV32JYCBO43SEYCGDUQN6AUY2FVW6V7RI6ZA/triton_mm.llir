; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 640, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 640, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 4, !dbg !19
  %18 = and i32 %17, 7, !dbg !19
  %19 = or disjoint i32 %18, 8, !dbg !19
  %20 = or disjoint i32 %18, 16, !dbg !19
  %21 = or disjoint i32 %18, 24, !dbg !19
  %22 = or disjoint i32 %18, 32, !dbg !19
  %23 = or disjoint i32 %18, 40, !dbg !19
  %24 = or disjoint i32 %18, 48, !dbg !19
  %25 = or disjoint i32 %18, 56, !dbg !19
  %26 = or disjoint i32 %14, %18, !dbg !20
  %27 = or disjoint i32 %14, %19, !dbg !20
  %28 = or disjoint i32 %14, %20, !dbg !20
  %29 = or disjoint i32 %14, %21, !dbg !20
  %30 = or disjoint i32 %14, %22, !dbg !20
  %31 = or disjoint i32 %14, %23, !dbg !20
  %32 = or disjoint i32 %14, %24, !dbg !20
  %33 = or disjoint i32 %14, %25, !dbg !20
  %34 = shl nsw i32 %13, 7, !dbg !21
  %35 = shl i32 %15, 3, !dbg !22
  %36 = and i32 %35, 8, !dbg !22
  %37 = and i32 %35, 16, !dbg !22
  %38 = and i32 %35, 24, !dbg !22
  %39 = and i32 %35, 32, !dbg !22
  %40 = and i32 %35, 56, !dbg !22
  %41 = and i32 %15, 8, !dbg !22
  %42 = shl nuw nsw i32 %41, 3, !dbg !22
  %43 = or disjoint i32 %40, %42, !dbg !22
  %44 = or disjoint i32 %34, %18, !dbg !23
  %45 = or disjoint i32 %34, %19, !dbg !23
  %46 = or disjoint i32 %34, %20, !dbg !23
  %47 = or disjoint i32 %34, %21, !dbg !23
  %48 = or disjoint i32 %34, %22, !dbg !23
  %49 = or disjoint i32 %34, %23, !dbg !23
  %50 = or disjoint i32 %34, %24, !dbg !23
  %51 = or disjoint i32 %34, %25, !dbg !23
  %52 = or disjoint i32 %44, 64, !dbg !23
  %53 = or disjoint i32 %44, 72, !dbg !23
  %54 = or disjoint i32 %44, 80, !dbg !23
  %55 = or disjoint i32 %44, 88, !dbg !23
  %56 = or disjoint i32 %44, 96, !dbg !23
  %57 = or disjoint i32 %44, 104, !dbg !23
  %58 = or disjoint i32 %44, 112, !dbg !23
  %59 = or disjoint i32 %44, 120, !dbg !23
  %60 = srem i32 %26, 512, !dbg !24
  %61 = srem i32 %27, 512, !dbg !24
  %62 = srem i32 %28, 512, !dbg !24
  %63 = srem i32 %29, 512, !dbg !24
  %64 = srem i32 %30, 512, !dbg !24
  %65 = srem i32 %31, 512, !dbg !24
  %66 = srem i32 %32, 512, !dbg !24
  %67 = srem i32 %33, 512, !dbg !24
  %68 = srem i32 %44, 10240, !dbg !25
  %69 = srem i32 %45, 10240, !dbg !25
  %70 = srem i32 %46, 10240, !dbg !25
  %71 = srem i32 %47, 10240, !dbg !25
  %72 = srem i32 %48, 10240, !dbg !25
  %73 = srem i32 %49, 10240, !dbg !25
  %74 = srem i32 %50, 10240, !dbg !25
  %75 = srem i32 %51, 10240, !dbg !25
  %76 = srem i32 %52, 10240, !dbg !25
  %77 = srem i32 %53, 10240, !dbg !25
  %78 = srem i32 %54, 10240, !dbg !25
  %79 = srem i32 %55, 10240, !dbg !25
  %80 = srem i32 %56, 10240, !dbg !25
  %81 = srem i32 %57, 10240, !dbg !25
  %82 = srem i32 %58, 10240, !dbg !25
  %83 = srem i32 %59, 10240, !dbg !25
  %84 = shl nsw i32 %60, 12, !dbg !26
  %85 = shl nsw i32 %61, 12, !dbg !26
  %86 = shl nsw i32 %62, 12, !dbg !26
  %87 = shl nsw i32 %63, 12, !dbg !26
  %88 = shl nsw i32 %64, 12, !dbg !26
  %89 = shl nsw i32 %65, 12, !dbg !26
  %90 = shl nsw i32 %66, 12, !dbg !26
  %91 = shl nsw i32 %67, 12, !dbg !26
  %92 = shl nsw i32 %68, 12, !dbg !27
  %93 = shl nsw i32 %69, 12, !dbg !27
  %94 = shl nsw i32 %70, 12, !dbg !27
  %95 = shl nsw i32 %71, 12, !dbg !27
  %96 = shl nsw i32 %72, 12, !dbg !27
  %97 = shl nsw i32 %73, 12, !dbg !27
  %98 = shl nsw i32 %74, 12, !dbg !27
  %99 = shl nsw i32 %75, 12, !dbg !27
  %100 = shl nsw i32 %76, 12, !dbg !27
  %101 = shl nsw i32 %77, 12, !dbg !27
  %102 = shl nsw i32 %78, 12, !dbg !27
  %103 = shl nsw i32 %79, 12, !dbg !27
  %104 = shl nsw i32 %80, 12, !dbg !27
  %105 = shl nsw i32 %81, 12, !dbg !27
  %106 = shl nsw i32 %82, 12, !dbg !27
  %107 = shl nsw i32 %83, 12, !dbg !27
  %108 = or disjoint i32 %84, %43, !dbg !28
  %109 = or disjoint i32 %85, %43, !dbg !28
  %110 = or disjoint i32 %86, %43, !dbg !28
  %111 = or disjoint i32 %87, %43, !dbg !28
  %112 = or disjoint i32 %88, %43, !dbg !28
  %113 = or disjoint i32 %89, %43, !dbg !28
  %114 = or disjoint i32 %90, %43, !dbg !28
  %115 = or disjoint i32 %91, %43, !dbg !28
  %116 = sext i32 %108 to i64, !dbg !29
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !29
  %118 = sext i32 %109 to i64, !dbg !29
  %119 = getelementptr bfloat, ptr addrspace(1) %0, i64 %118, !dbg !29
  %120 = sext i32 %110 to i64, !dbg !29
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !29
  %122 = sext i32 %111 to i64, !dbg !29
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !29
  %124 = sext i32 %112 to i64, !dbg !29
  %125 = getelementptr bfloat, ptr addrspace(1) %0, i64 %124, !dbg !29
  %126 = sext i32 %113 to i64, !dbg !29
  %127 = getelementptr bfloat, ptr addrspace(1) %0, i64 %126, !dbg !29
  %128 = sext i32 %114 to i64, !dbg !29
  %129 = getelementptr bfloat, ptr addrspace(1) %0, i64 %128, !dbg !29
  %130 = sext i32 %115 to i64, !dbg !29
  %131 = getelementptr bfloat, ptr addrspace(1) %0, i64 %130, !dbg !29
  %132 = lshr exact i32 %16, 1, !dbg !30
  %133 = lshr i32 %15, 1, !dbg !30
  %134 = and i32 %133, 56, !dbg !30
  %135 = xor i32 %43, %134, !dbg !30
  %136 = shl nuw nsw i32 %18, 7, !dbg !30
  %137 = or disjoint i32 %135, %136, !dbg !30
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %137, !dbg !30
  %139 = or disjoint i32 %137, 1024, !dbg !30
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %139, !dbg !30
  %141 = or disjoint i32 %137, 2048, !dbg !30
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %141, !dbg !30
  %143 = or disjoint i32 %137, 3072, !dbg !30
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %143, !dbg !30
  %145 = or disjoint i32 %137, 4096, !dbg !30
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %145, !dbg !30
  %147 = or disjoint i32 %137, 5120, !dbg !30
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %147, !dbg !30
  %149 = or disjoint i32 %137, 6144, !dbg !30
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %149, !dbg !30
  %151 = or disjoint i32 %137, 7168, !dbg !30
  %152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %151, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %138, ptr addrspace(1) %117, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %119, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %121, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %123, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %146, ptr addrspace(1) %125, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %127, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %129, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %152, ptr addrspace(1) %131, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %153 = or disjoint i32 %92, %43, !dbg !31
  %154 = or disjoint i32 %93, %43, !dbg !31
  %155 = or disjoint i32 %94, %43, !dbg !31
  %156 = or disjoint i32 %95, %43, !dbg !31
  %157 = or disjoint i32 %96, %43, !dbg !31
  %158 = or disjoint i32 %97, %43, !dbg !31
  %159 = or disjoint i32 %98, %43, !dbg !31
  %160 = or disjoint i32 %99, %43, !dbg !31
  %161 = or disjoint i32 %100, %43, !dbg !31
  %162 = or disjoint i32 %101, %43, !dbg !31
  %163 = or disjoint i32 %102, %43, !dbg !31
  %164 = or disjoint i32 %103, %43, !dbg !31
  %165 = or disjoint i32 %104, %43, !dbg !31
  %166 = or disjoint i32 %105, %43, !dbg !31
  %167 = or disjoint i32 %106, %43, !dbg !31
  %168 = or disjoint i32 %107, %43, !dbg !31
  %169 = sext i32 %153 to i64, !dbg !32
  %170 = getelementptr bfloat, ptr addrspace(1) %1, i64 %169, !dbg !32
  %171 = sext i32 %154 to i64, !dbg !32
  %172 = getelementptr bfloat, ptr addrspace(1) %1, i64 %171, !dbg !32
  %173 = sext i32 %155 to i64, !dbg !32
  %174 = getelementptr bfloat, ptr addrspace(1) %1, i64 %173, !dbg !32
  %175 = sext i32 %156 to i64, !dbg !32
  %176 = getelementptr bfloat, ptr addrspace(1) %1, i64 %175, !dbg !32
  %177 = sext i32 %157 to i64, !dbg !32
  %178 = getelementptr bfloat, ptr addrspace(1) %1, i64 %177, !dbg !32
  %179 = sext i32 %158 to i64, !dbg !32
  %180 = getelementptr bfloat, ptr addrspace(1) %1, i64 %179, !dbg !32
  %181 = sext i32 %159 to i64, !dbg !32
  %182 = getelementptr bfloat, ptr addrspace(1) %1, i64 %181, !dbg !32
  %183 = sext i32 %160 to i64, !dbg !32
  %184 = getelementptr bfloat, ptr addrspace(1) %1, i64 %183, !dbg !32
  %185 = sext i32 %161 to i64, !dbg !32
  %186 = getelementptr bfloat, ptr addrspace(1) %1, i64 %185, !dbg !32
  %187 = sext i32 %162 to i64, !dbg !32
  %188 = getelementptr bfloat, ptr addrspace(1) %1, i64 %187, !dbg !32
  %189 = sext i32 %163 to i64, !dbg !32
  %190 = getelementptr bfloat, ptr addrspace(1) %1, i64 %189, !dbg !32
  %191 = sext i32 %164 to i64, !dbg !32
  %192 = getelementptr bfloat, ptr addrspace(1) %1, i64 %191, !dbg !32
  %193 = sext i32 %165 to i64, !dbg !32
  %194 = getelementptr bfloat, ptr addrspace(1) %1, i64 %193, !dbg !32
  %195 = sext i32 %166 to i64, !dbg !32
  %196 = getelementptr bfloat, ptr addrspace(1) %1, i64 %195, !dbg !32
  %197 = sext i32 %167 to i64, !dbg !32
  %198 = getelementptr bfloat, ptr addrspace(1) %1, i64 %197, !dbg !32
  %199 = sext i32 %168 to i64, !dbg !32
  %200 = getelementptr bfloat, ptr addrspace(1) %1, i64 %199, !dbg !32
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %137, !dbg !33
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %139, !dbg !33
  %203 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %141, !dbg !33
  %204 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %143, !dbg !33
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %145, !dbg !33
  %206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %147, !dbg !33
  %207 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %149, !dbg !33
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %151, !dbg !33
  %209 = or disjoint i32 %137, 8192, !dbg !33
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %209, !dbg !33
  %211 = or disjoint i32 %137, 9216, !dbg !33
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %211, !dbg !33
  %213 = or disjoint i32 %137, 10240, !dbg !33
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %213, !dbg !33
  %215 = or disjoint i32 %137, 11264, !dbg !33
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %215, !dbg !33
  %217 = or disjoint i32 %137, 12288, !dbg !33
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %217, !dbg !33
  %219 = or disjoint i32 %137, 13312, !dbg !33
  %220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %219, !dbg !33
  %221 = or disjoint i32 %137, 14336, !dbg !33
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %221, !dbg !33
  %223 = or disjoint i32 %137, 15360, !dbg !33
  %224 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %223, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %201, ptr addrspace(1) %170, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %202, ptr addrspace(1) %172, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %203, ptr addrspace(1) %174, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %204, ptr addrspace(1) %176, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %205, ptr addrspace(1) %178, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %206, ptr addrspace(1) %180, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %207, ptr addrspace(1) %182, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %208, ptr addrspace(1) %184, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %186, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %212, ptr addrspace(1) %188, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %190, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %216, ptr addrspace(1) %192, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %218, ptr addrspace(1) %194, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %220, ptr addrspace(1) %196, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %222, ptr addrspace(1) %198, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %224, ptr addrspace(1) %200, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %225 = or disjoint i32 %43, 128, !dbg !34
  %226 = or disjoint i32 %84, %225, !dbg !28
  %227 = or disjoint i32 %85, %225, !dbg !28
  %228 = or disjoint i32 %86, %225, !dbg !28
  %229 = or disjoint i32 %87, %225, !dbg !28
  %230 = or disjoint i32 %88, %225, !dbg !28
  %231 = or disjoint i32 %89, %225, !dbg !28
  %232 = or disjoint i32 %90, %225, !dbg !28
  %233 = or disjoint i32 %91, %225, !dbg !28
  %234 = sext i32 %226 to i64, !dbg !29
  %235 = getelementptr bfloat, ptr addrspace(1) %0, i64 %234, !dbg !29
  %236 = sext i32 %227 to i64, !dbg !29
  %237 = getelementptr bfloat, ptr addrspace(1) %0, i64 %236, !dbg !29
  %238 = sext i32 %228 to i64, !dbg !29
  %239 = getelementptr bfloat, ptr addrspace(1) %0, i64 %238, !dbg !29
  %240 = sext i32 %229 to i64, !dbg !29
  %241 = getelementptr bfloat, ptr addrspace(1) %0, i64 %240, !dbg !29
  %242 = sext i32 %230 to i64, !dbg !29
  %243 = getelementptr bfloat, ptr addrspace(1) %0, i64 %242, !dbg !29
  %244 = sext i32 %231 to i64, !dbg !29
  %245 = getelementptr bfloat, ptr addrspace(1) %0, i64 %244, !dbg !29
  %246 = sext i32 %232 to i64, !dbg !29
  %247 = getelementptr bfloat, ptr addrspace(1) %0, i64 %246, !dbg !29
  %248 = sext i32 %233 to i64, !dbg !29
  %249 = getelementptr bfloat, ptr addrspace(1) %0, i64 %248, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %250 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %137, !dbg !30
  %251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %139, !dbg !30
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %141, !dbg !30
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %143, !dbg !30
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %145, !dbg !30
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %147, !dbg !30
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %149, !dbg !30
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %151, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %250, ptr addrspace(1) %235, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %251, ptr addrspace(1) %237, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %252, ptr addrspace(1) %239, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %253, ptr addrspace(1) %241, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %254, ptr addrspace(1) %243, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %255, ptr addrspace(1) %245, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %247, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %249, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %258 = or disjoint i32 %92, %225, !dbg !31
  %259 = or disjoint i32 %93, %225, !dbg !31
  %260 = or disjoint i32 %94, %225, !dbg !31
  %261 = or disjoint i32 %95, %225, !dbg !31
  %262 = or disjoint i32 %96, %225, !dbg !31
  %263 = or disjoint i32 %97, %225, !dbg !31
  %264 = or disjoint i32 %98, %225, !dbg !31
  %265 = or disjoint i32 %99, %225, !dbg !31
  %266 = or disjoint i32 %100, %225, !dbg !31
  %267 = or disjoint i32 %101, %225, !dbg !31
  %268 = or disjoint i32 %102, %225, !dbg !31
  %269 = or disjoint i32 %103, %225, !dbg !31
  %270 = or disjoint i32 %104, %225, !dbg !31
  %271 = or disjoint i32 %105, %225, !dbg !31
  %272 = or disjoint i32 %106, %225, !dbg !31
  %273 = or disjoint i32 %107, %225, !dbg !31
  %274 = sext i32 %258 to i64, !dbg !32
  %275 = getelementptr bfloat, ptr addrspace(1) %1, i64 %274, !dbg !32
  %276 = sext i32 %259 to i64, !dbg !32
  %277 = getelementptr bfloat, ptr addrspace(1) %1, i64 %276, !dbg !32
  %278 = sext i32 %260 to i64, !dbg !32
  %279 = getelementptr bfloat, ptr addrspace(1) %1, i64 %278, !dbg !32
  %280 = sext i32 %261 to i64, !dbg !32
  %281 = getelementptr bfloat, ptr addrspace(1) %1, i64 %280, !dbg !32
  %282 = sext i32 %262 to i64, !dbg !32
  %283 = getelementptr bfloat, ptr addrspace(1) %1, i64 %282, !dbg !32
  %284 = sext i32 %263 to i64, !dbg !32
  %285 = getelementptr bfloat, ptr addrspace(1) %1, i64 %284, !dbg !32
  %286 = sext i32 %264 to i64, !dbg !32
  %287 = getelementptr bfloat, ptr addrspace(1) %1, i64 %286, !dbg !32
  %288 = sext i32 %265 to i64, !dbg !32
  %289 = getelementptr bfloat, ptr addrspace(1) %1, i64 %288, !dbg !32
  %290 = sext i32 %266 to i64, !dbg !32
  %291 = getelementptr bfloat, ptr addrspace(1) %1, i64 %290, !dbg !32
  %292 = sext i32 %267 to i64, !dbg !32
  %293 = getelementptr bfloat, ptr addrspace(1) %1, i64 %292, !dbg !32
  %294 = sext i32 %268 to i64, !dbg !32
  %295 = getelementptr bfloat, ptr addrspace(1) %1, i64 %294, !dbg !32
  %296 = sext i32 %269 to i64, !dbg !32
  %297 = getelementptr bfloat, ptr addrspace(1) %1, i64 %296, !dbg !32
  %298 = sext i32 %270 to i64, !dbg !32
  %299 = getelementptr bfloat, ptr addrspace(1) %1, i64 %298, !dbg !32
  %300 = sext i32 %271 to i64, !dbg !32
  %301 = getelementptr bfloat, ptr addrspace(1) %1, i64 %300, !dbg !32
  %302 = sext i32 %272 to i64, !dbg !32
  %303 = getelementptr bfloat, ptr addrspace(1) %1, i64 %302, !dbg !32
  %304 = sext i32 %273 to i64, !dbg !32
  %305 = getelementptr bfloat, ptr addrspace(1) %1, i64 %304, !dbg !32
  %306 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %137, !dbg !33
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %139, !dbg !33
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %141, !dbg !33
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %143, !dbg !33
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %145, !dbg !33
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %147, !dbg !33
  %312 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %149, !dbg !33
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %151, !dbg !33
  %314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %209, !dbg !33
  %315 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %211, !dbg !33
  %316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %213, !dbg !33
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %215, !dbg !33
  %318 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %217, !dbg !33
  %319 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %219, !dbg !33
  %320 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %221, !dbg !33
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %223, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %306, ptr addrspace(1) %275, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %307, ptr addrspace(1) %277, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %308, ptr addrspace(1) %279, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %309, ptr addrspace(1) %281, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %283, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %285, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %312, ptr addrspace(1) %287, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %313, ptr addrspace(1) %289, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %314, ptr addrspace(1) %291, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %315, ptr addrspace(1) %293, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %316, ptr addrspace(1) %295, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %317, ptr addrspace(1) %297, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %318, ptr addrspace(1) %299, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %319, ptr addrspace(1) %301, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %320, ptr addrspace(1) %303, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %321, ptr addrspace(1) %305, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %322 = or disjoint i32 %43, 256, !dbg !34
  %323 = or disjoint i32 %84, %322, !dbg !28
  %324 = or disjoint i32 %85, %322, !dbg !28
  %325 = or disjoint i32 %86, %322, !dbg !28
  %326 = or disjoint i32 %87, %322, !dbg !28
  %327 = or disjoint i32 %88, %322, !dbg !28
  %328 = or disjoint i32 %89, %322, !dbg !28
  %329 = or disjoint i32 %90, %322, !dbg !28
  %330 = or disjoint i32 %91, %322, !dbg !28
  %331 = sext i32 %323 to i64, !dbg !29
  %332 = getelementptr bfloat, ptr addrspace(1) %0, i64 %331, !dbg !29
  %333 = sext i32 %324 to i64, !dbg !29
  %334 = getelementptr bfloat, ptr addrspace(1) %0, i64 %333, !dbg !29
  %335 = sext i32 %325 to i64, !dbg !29
  %336 = getelementptr bfloat, ptr addrspace(1) %0, i64 %335, !dbg !29
  %337 = sext i32 %326 to i64, !dbg !29
  %338 = getelementptr bfloat, ptr addrspace(1) %0, i64 %337, !dbg !29
  %339 = sext i32 %327 to i64, !dbg !29
  %340 = getelementptr bfloat, ptr addrspace(1) %0, i64 %339, !dbg !29
  %341 = sext i32 %328 to i64, !dbg !29
  %342 = getelementptr bfloat, ptr addrspace(1) %0, i64 %341, !dbg !29
  %343 = sext i32 %329 to i64, !dbg !29
  %344 = getelementptr bfloat, ptr addrspace(1) %0, i64 %343, !dbg !29
  %345 = sext i32 %330 to i64, !dbg !29
  %346 = getelementptr bfloat, ptr addrspace(1) %0, i64 %345, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %137, !dbg !30
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %139, !dbg !30
  %349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %141, !dbg !30
  %350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %143, !dbg !30
  %351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %145, !dbg !30
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %147, !dbg !30
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %149, !dbg !30
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %151, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %347, ptr addrspace(1) %332, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %348, ptr addrspace(1) %334, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %349, ptr addrspace(1) %336, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %350, ptr addrspace(1) %338, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %351, ptr addrspace(1) %340, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %352, ptr addrspace(1) %342, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %353, ptr addrspace(1) %344, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %354, ptr addrspace(1) %346, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %355 = or disjoint i32 %92, %322, !dbg !31
  %356 = or disjoint i32 %93, %322, !dbg !31
  %357 = or disjoint i32 %94, %322, !dbg !31
  %358 = or disjoint i32 %95, %322, !dbg !31
  %359 = or disjoint i32 %96, %322, !dbg !31
  %360 = or disjoint i32 %97, %322, !dbg !31
  %361 = or disjoint i32 %98, %322, !dbg !31
  %362 = or disjoint i32 %99, %322, !dbg !31
  %363 = or disjoint i32 %100, %322, !dbg !31
  %364 = or disjoint i32 %101, %322, !dbg !31
  %365 = or disjoint i32 %102, %322, !dbg !31
  %366 = or disjoint i32 %103, %322, !dbg !31
  %367 = or disjoint i32 %104, %322, !dbg !31
  %368 = or disjoint i32 %105, %322, !dbg !31
  %369 = or disjoint i32 %106, %322, !dbg !31
  %370 = or disjoint i32 %107, %322, !dbg !31
  %371 = sext i32 %355 to i64, !dbg !32
  %372 = getelementptr bfloat, ptr addrspace(1) %1, i64 %371, !dbg !32
  %373 = sext i32 %356 to i64, !dbg !32
  %374 = getelementptr bfloat, ptr addrspace(1) %1, i64 %373, !dbg !32
  %375 = sext i32 %357 to i64, !dbg !32
  %376 = getelementptr bfloat, ptr addrspace(1) %1, i64 %375, !dbg !32
  %377 = sext i32 %358 to i64, !dbg !32
  %378 = getelementptr bfloat, ptr addrspace(1) %1, i64 %377, !dbg !32
  %379 = sext i32 %359 to i64, !dbg !32
  %380 = getelementptr bfloat, ptr addrspace(1) %1, i64 %379, !dbg !32
  %381 = sext i32 %360 to i64, !dbg !32
  %382 = getelementptr bfloat, ptr addrspace(1) %1, i64 %381, !dbg !32
  %383 = sext i32 %361 to i64, !dbg !32
  %384 = getelementptr bfloat, ptr addrspace(1) %1, i64 %383, !dbg !32
  %385 = sext i32 %362 to i64, !dbg !32
  %386 = getelementptr bfloat, ptr addrspace(1) %1, i64 %385, !dbg !32
  %387 = sext i32 %363 to i64, !dbg !32
  %388 = getelementptr bfloat, ptr addrspace(1) %1, i64 %387, !dbg !32
  %389 = sext i32 %364 to i64, !dbg !32
  %390 = getelementptr bfloat, ptr addrspace(1) %1, i64 %389, !dbg !32
  %391 = sext i32 %365 to i64, !dbg !32
  %392 = getelementptr bfloat, ptr addrspace(1) %1, i64 %391, !dbg !32
  %393 = sext i32 %366 to i64, !dbg !32
  %394 = getelementptr bfloat, ptr addrspace(1) %1, i64 %393, !dbg !32
  %395 = sext i32 %367 to i64, !dbg !32
  %396 = getelementptr bfloat, ptr addrspace(1) %1, i64 %395, !dbg !32
  %397 = sext i32 %368 to i64, !dbg !32
  %398 = getelementptr bfloat, ptr addrspace(1) %1, i64 %397, !dbg !32
  %399 = sext i32 %369 to i64, !dbg !32
  %400 = getelementptr bfloat, ptr addrspace(1) %1, i64 %399, !dbg !32
  %401 = sext i32 %370 to i64, !dbg !32
  %402 = getelementptr bfloat, ptr addrspace(1) %1, i64 %401, !dbg !32
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %137, !dbg !33
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %139, !dbg !33
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %141, !dbg !33
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %143, !dbg !33
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %145, !dbg !33
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %147, !dbg !33
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %149, !dbg !33
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %151, !dbg !33
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %209, !dbg !33
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %211, !dbg !33
  %413 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %213, !dbg !33
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %215, !dbg !33
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %217, !dbg !33
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %219, !dbg !33
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %221, !dbg !33
  %418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %223, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %403, ptr addrspace(1) %372, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %404, ptr addrspace(1) %374, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %405, ptr addrspace(1) %376, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %406, ptr addrspace(1) %378, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %407, ptr addrspace(1) %380, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %408, ptr addrspace(1) %382, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %409, ptr addrspace(1) %384, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %410, ptr addrspace(1) %386, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %411, ptr addrspace(1) %388, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %412, ptr addrspace(1) %390, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %413, ptr addrspace(1) %392, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %414, ptr addrspace(1) %394, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %415, ptr addrspace(1) %396, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %416, ptr addrspace(1) %398, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %417, ptr addrspace(1) %400, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %418, ptr addrspace(1) %402, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %39, %132, !dbg !35
  %invariant.op168 = or disjoint i32 %41, 32, !dbg !35
  %invariant.op170 = or disjoint i32 %43, 384, !dbg !35
  %419 = and i32 %15, 7
  %420 = xor i32 %40, %132
  %421 = shl i32 %15, 7
  %422 = and i32 %421, 1920
  %423 = or disjoint i32 %420, %422
  %424 = or disjoint i32 %36, 16
  %425 = xor i32 %424, %37
  %426 = or disjoint i32 %425, %39
  %427 = xor i32 %426, %132
  %428 = or disjoint i32 %427, %422
  %429 = or disjoint i32 %38, 32
  %.reass = xor i32 %429, %invariant.op
  %430 = or disjoint i32 %.reass, %422
  %431 = or disjoint i32 %36, 48
  %and.ra = and i32 %35, 48
  %432 = or disjoint i32 %132, %and.ra
  %433 = xor i32 %432, %431
  %434 = or disjoint i32 %433, %422
  %435 = or disjoint i32 %40, 64
  %436 = xor i32 %435, %132
  %437 = or disjoint i32 %436, %422
  %438 = or disjoint i32 %36, 80
  %439 = xor i32 %438, %37
  %440 = or disjoint i32 %439, %39
  %441 = xor i32 %440, %132
  %442 = or disjoint i32 %441, %422
  %443 = or disjoint i32 %38, 96
  %.reass167 = xor i32 %443, %invariant.op
  %444 = or disjoint i32 %.reass167, %422
  %445 = or disjoint i32 %36, 112
  %446 = xor i32 %432, %445
  %447 = or disjoint i32 %446, %422
  %448 = or disjoint i32 %422, 2048
  %449 = or disjoint i32 %420, %448
  %450 = or disjoint i32 %427, %448
  %451 = or disjoint i32 %.reass, %448
  %452 = or disjoint i32 %433, %448
  %453 = or disjoint i32 %436, %448
  %454 = or disjoint i32 %441, %448
  %455 = or disjoint i32 %.reass167, %448
  %456 = or disjoint i32 %446, %448
  %457 = or disjoint i32 %419, 32
  %.reass169 = or disjoint i32 %419, %invariant.op168
  %458 = shl nuw nsw i32 %.reass169, 7
  %459 = or disjoint i32 %458, %420
  %460 = or disjoint i32 %427, %458
  %461 = or disjoint i32 %.reass, %458
  %462 = or disjoint i32 %433, %458
  %463 = or disjoint i32 %436, %458
  %464 = or disjoint i32 %441, %458
  %465 = or disjoint i32 %.reass167, %458
  %466 = or disjoint i32 %446, %458
  %467 = or disjoint i32 %422, 6144
  %468 = or disjoint i32 %420, %467
  %469 = or disjoint i32 %427, %467
  %470 = or disjoint i32 %.reass, %467
  %471 = or disjoint i32 %433, %467
  %472 = or disjoint i32 %436, %467
  %473 = or disjoint i32 %441, %467
  %474 = or disjoint i32 %.reass167, %467
  %475 = or disjoint i32 %446, %467
  %and.ra162 = and i32 %15, 24
  %476 = xor i32 %40, %and.ra162
  %477 = lshr i32 %15, 2
  %478 = and i32 %477, 24
  %479 = or disjoint i32 %478, %419
  %480 = shl nuw nsw i32 %479, 7
  %481 = or disjoint i32 %480, %476
  %482 = or disjoint i32 %39, %and.ra162
  %483 = xor i32 %482, %429
  %484 = xor i32 %435, %and.ra162
  %485 = xor i32 %482, %443
  %486 = and i32 %477, 24
  %487 = or disjoint i32 %486, %457
  %488 = shl nuw nsw i32 %487, 7
  %489 = or disjoint i32 %488, %476
  %490 = or disjoint i32 %480, 8192
  %491 = or disjoint i32 %490, %476
  %492 = or disjoint i32 %480, 12288
  %493 = or disjoint i32 %492, %476
  %494 = or disjoint i32 %492, %483
  %495 = or disjoint i32 %492, %484
  %496 = or disjoint i32 %492, %485
  %497 = zext nneg i32 %invariant.op170 to i64, !dbg !35
  %498 = sext i32 %107 to i64, !dbg !35
  %499 = sext i32 %106 to i64, !dbg !35
  %500 = sext i32 %105 to i64, !dbg !35
  %501 = sext i32 %104 to i64, !dbg !35
  %502 = sext i32 %103 to i64, !dbg !35
  %503 = sext i32 %102 to i64, !dbg !35
  %504 = sext i32 %101 to i64, !dbg !35
  %505 = sext i32 %100 to i64, !dbg !35
  %506 = sext i32 %99 to i64, !dbg !35
  %507 = sext i32 %98 to i64, !dbg !35
  %508 = sext i32 %97 to i64, !dbg !35
  %509 = sext i32 %96 to i64, !dbg !35
  %510 = sext i32 %95 to i64, !dbg !35
  %511 = sext i32 %94 to i64, !dbg !35
  %512 = sext i32 %93 to i64, !dbg !35
  %513 = sext i32 %92 to i64, !dbg !35
  %514 = sext i32 %91 to i64, !dbg !35
  %515 = sext i32 %90 to i64, !dbg !35
  %516 = sext i32 %89 to i64, !dbg !35
  %517 = sext i32 %88 to i64, !dbg !35
  %518 = sext i32 %87 to i64, !dbg !35
  %519 = sext i32 %86 to i64, !dbg !35
  %520 = sext i32 %85 to i64, !dbg !35
  %521 = sext i32 %84 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %521, !dbg !35
  %invariant.gep299 = getelementptr bfloat, ptr addrspace(1) %0, i64 %520, !dbg !35
  %invariant.gep301 = getelementptr bfloat, ptr addrspace(1) %0, i64 %519, !dbg !35
  %invariant.gep303 = getelementptr bfloat, ptr addrspace(1) %0, i64 %518, !dbg !35
  %invariant.gep305 = getelementptr bfloat, ptr addrspace(1) %0, i64 %517, !dbg !35
  %invariant.gep307 = getelementptr bfloat, ptr addrspace(1) %0, i64 %516, !dbg !35
  %invariant.gep309 = getelementptr bfloat, ptr addrspace(1) %0, i64 %515, !dbg !35
  %invariant.gep311 = getelementptr bfloat, ptr addrspace(1) %0, i64 %514, !dbg !35
  %invariant.gep313 = getelementptr bfloat, ptr addrspace(1) %1, i64 %513, !dbg !35
  %invariant.gep315 = getelementptr bfloat, ptr addrspace(1) %1, i64 %512, !dbg !35
  %invariant.gep317 = getelementptr bfloat, ptr addrspace(1) %1, i64 %511, !dbg !35
  %invariant.gep319 = getelementptr bfloat, ptr addrspace(1) %1, i64 %510, !dbg !35
  %invariant.gep321 = getelementptr bfloat, ptr addrspace(1) %1, i64 %509, !dbg !35
  %invariant.gep323 = getelementptr bfloat, ptr addrspace(1) %1, i64 %508, !dbg !35
  %invariant.gep325 = getelementptr bfloat, ptr addrspace(1) %1, i64 %507, !dbg !35
  %invariant.gep327 = getelementptr bfloat, ptr addrspace(1) %1, i64 %506, !dbg !35
  %invariant.gep329 = getelementptr bfloat, ptr addrspace(1) %1, i64 %505, !dbg !35
  %invariant.gep331 = getelementptr bfloat, ptr addrspace(1) %1, i64 %504, !dbg !35
  %invariant.gep333 = getelementptr bfloat, ptr addrspace(1) %1, i64 %503, !dbg !35
  %invariant.gep335 = getelementptr bfloat, ptr addrspace(1) %1, i64 %502, !dbg !35
  %invariant.gep337 = getelementptr bfloat, ptr addrspace(1) %1, i64 %501, !dbg !35
  %invariant.gep339 = getelementptr bfloat, ptr addrspace(1) %1, i64 %500, !dbg !35
  %invariant.gep341 = getelementptr bfloat, ptr addrspace(1) %1, i64 %499, !dbg !35
  %invariant.gep343 = getelementptr bfloat, ptr addrspace(1) %1, i64 %498, !dbg !35
  br label %522, !dbg !35

522:                                              ; preds = %4, %522
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %522 ]
  %523 = phi i32 [ -1, %4 ], [ %592, %522 ]
  %524 = phi i32 [ 2, %4 ], [ %1576, %522 ]
  %525 = phi float [ 0.000000e+00, %4 ], [ %1495, %522 ]
  %526 = phi float [ 0.000000e+00, %4 ], [ %1496, %522 ]
  %527 = phi float [ 0.000000e+00, %4 ], [ %1497, %522 ]
  %528 = phi float [ 0.000000e+00, %4 ], [ %1498, %522 ]
  %529 = phi float [ 0.000000e+00, %4 ], [ %1500, %522 ]
  %530 = phi float [ 0.000000e+00, %4 ], [ %1501, %522 ]
  %531 = phi float [ 0.000000e+00, %4 ], [ %1502, %522 ]
  %532 = phi float [ 0.000000e+00, %4 ], [ %1503, %522 ]
  %533 = phi float [ 0.000000e+00, %4 ], [ %1505, %522 ]
  %534 = phi float [ 0.000000e+00, %4 ], [ %1506, %522 ]
  %535 = phi float [ 0.000000e+00, %4 ], [ %1507, %522 ]
  %536 = phi float [ 0.000000e+00, %4 ], [ %1508, %522 ]
  %537 = phi float [ 0.000000e+00, %4 ], [ %1510, %522 ]
  %538 = phi float [ 0.000000e+00, %4 ], [ %1511, %522 ]
  %539 = phi float [ 0.000000e+00, %4 ], [ %1512, %522 ]
  %540 = phi float [ 0.000000e+00, %4 ], [ %1513, %522 ]
  %541 = phi float [ 0.000000e+00, %4 ], [ %1515, %522 ]
  %542 = phi float [ 0.000000e+00, %4 ], [ %1516, %522 ]
  %543 = phi float [ 0.000000e+00, %4 ], [ %1517, %522 ]
  %544 = phi float [ 0.000000e+00, %4 ], [ %1518, %522 ]
  %545 = phi float [ 0.000000e+00, %4 ], [ %1520, %522 ]
  %546 = phi float [ 0.000000e+00, %4 ], [ %1521, %522 ]
  %547 = phi float [ 0.000000e+00, %4 ], [ %1522, %522 ]
  %548 = phi float [ 0.000000e+00, %4 ], [ %1523, %522 ]
  %549 = phi float [ 0.000000e+00, %4 ], [ %1525, %522 ]
  %550 = phi float [ 0.000000e+00, %4 ], [ %1526, %522 ]
  %551 = phi float [ 0.000000e+00, %4 ], [ %1527, %522 ]
  %552 = phi float [ 0.000000e+00, %4 ], [ %1528, %522 ]
  %553 = phi float [ 0.000000e+00, %4 ], [ %1530, %522 ]
  %554 = phi float [ 0.000000e+00, %4 ], [ %1531, %522 ]
  %555 = phi float [ 0.000000e+00, %4 ], [ %1532, %522 ]
  %556 = phi float [ 0.000000e+00, %4 ], [ %1533, %522 ]
  %557 = phi float [ 0.000000e+00, %4 ], [ %1535, %522 ]
  %558 = phi float [ 0.000000e+00, %4 ], [ %1536, %522 ]
  %559 = phi float [ 0.000000e+00, %4 ], [ %1537, %522 ]
  %560 = phi float [ 0.000000e+00, %4 ], [ %1538, %522 ]
  %561 = phi float [ 0.000000e+00, %4 ], [ %1540, %522 ]
  %562 = phi float [ 0.000000e+00, %4 ], [ %1541, %522 ]
  %563 = phi float [ 0.000000e+00, %4 ], [ %1542, %522 ]
  %564 = phi float [ 0.000000e+00, %4 ], [ %1543, %522 ]
  %565 = phi float [ 0.000000e+00, %4 ], [ %1545, %522 ]
  %566 = phi float [ 0.000000e+00, %4 ], [ %1546, %522 ]
  %567 = phi float [ 0.000000e+00, %4 ], [ %1547, %522 ]
  %568 = phi float [ 0.000000e+00, %4 ], [ %1548, %522 ]
  %569 = phi float [ 0.000000e+00, %4 ], [ %1550, %522 ]
  %570 = phi float [ 0.000000e+00, %4 ], [ %1551, %522 ]
  %571 = phi float [ 0.000000e+00, %4 ], [ %1552, %522 ]
  %572 = phi float [ 0.000000e+00, %4 ], [ %1553, %522 ]
  %573 = phi float [ 0.000000e+00, %4 ], [ %1555, %522 ]
  %574 = phi float [ 0.000000e+00, %4 ], [ %1556, %522 ]
  %575 = phi float [ 0.000000e+00, %4 ], [ %1557, %522 ]
  %576 = phi float [ 0.000000e+00, %4 ], [ %1558, %522 ]
  %577 = phi float [ 0.000000e+00, %4 ], [ %1560, %522 ]
  %578 = phi float [ 0.000000e+00, %4 ], [ %1561, %522 ]
  %579 = phi float [ 0.000000e+00, %4 ], [ %1562, %522 ]
  %580 = phi float [ 0.000000e+00, %4 ], [ %1563, %522 ]
  %581 = phi float [ 0.000000e+00, %4 ], [ %1565, %522 ]
  %582 = phi float [ 0.000000e+00, %4 ], [ %1566, %522 ]
  %583 = phi float [ 0.000000e+00, %4 ], [ %1567, %522 ]
  %584 = phi float [ 0.000000e+00, %4 ], [ %1568, %522 ]
  %585 = phi float [ 0.000000e+00, %4 ], [ %1570, %522 ]
  %586 = phi float [ 0.000000e+00, %4 ], [ %1571, %522 ]
  %587 = phi float [ 0.000000e+00, %4 ], [ %1572, %522 ]
  %588 = phi float [ 0.000000e+00, %4 ], [ %1573, %522 ]
  %589 = icmp samesign ult i64 %indvars.iv, 29, !dbg !35
  %590 = add i32 %523, 1, !dbg !35
  %591 = icmp slt i32 %590, 3, !dbg !35
  %592 = select i1 %591, i32 %590, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx = shl i32 %592, 14, !dbg !30
  %593 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %.idx, !dbg !30
  %594 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %423, !dbg !30
  %595 = ptrtoint ptr addrspace(3) %594 to i32, !dbg !30
  %596 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %595) #1, !dbg !30
  %597 = extractvalue { i32, i32, i32, i32 } %596, 0, !dbg !30
  %598 = extractvalue { i32, i32, i32, i32 } %596, 1, !dbg !30
  %599 = extractvalue { i32, i32, i32, i32 } %596, 2, !dbg !30
  %600 = extractvalue { i32, i32, i32, i32 } %596, 3, !dbg !30
  %601 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %428, !dbg !30
  %602 = ptrtoint ptr addrspace(3) %601 to i32, !dbg !30
  %603 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %602) #1, !dbg !30
  %604 = extractvalue { i32, i32, i32, i32 } %603, 0, !dbg !30
  %605 = extractvalue { i32, i32, i32, i32 } %603, 1, !dbg !30
  %606 = extractvalue { i32, i32, i32, i32 } %603, 2, !dbg !30
  %607 = extractvalue { i32, i32, i32, i32 } %603, 3, !dbg !30
  %608 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %430, !dbg !30
  %609 = ptrtoint ptr addrspace(3) %608 to i32, !dbg !30
  %610 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %609) #1, !dbg !30
  %611 = extractvalue { i32, i32, i32, i32 } %610, 0, !dbg !30
  %612 = extractvalue { i32, i32, i32, i32 } %610, 1, !dbg !30
  %613 = extractvalue { i32, i32, i32, i32 } %610, 2, !dbg !30
  %614 = extractvalue { i32, i32, i32, i32 } %610, 3, !dbg !30
  %615 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %434, !dbg !30
  %616 = ptrtoint ptr addrspace(3) %615 to i32, !dbg !30
  %617 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %616) #1, !dbg !30
  %618 = extractvalue { i32, i32, i32, i32 } %617, 0, !dbg !30
  %619 = extractvalue { i32, i32, i32, i32 } %617, 1, !dbg !30
  %620 = extractvalue { i32, i32, i32, i32 } %617, 2, !dbg !30
  %621 = extractvalue { i32, i32, i32, i32 } %617, 3, !dbg !30
  %622 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %437, !dbg !30
  %623 = ptrtoint ptr addrspace(3) %622 to i32, !dbg !30
  %624 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %623) #1, !dbg !30
  %625 = extractvalue { i32, i32, i32, i32 } %624, 0, !dbg !30
  %626 = extractvalue { i32, i32, i32, i32 } %624, 1, !dbg !30
  %627 = extractvalue { i32, i32, i32, i32 } %624, 2, !dbg !30
  %628 = extractvalue { i32, i32, i32, i32 } %624, 3, !dbg !30
  %629 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %442, !dbg !30
  %630 = ptrtoint ptr addrspace(3) %629 to i32, !dbg !30
  %631 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %630) #1, !dbg !30
  %632 = extractvalue { i32, i32, i32, i32 } %631, 0, !dbg !30
  %633 = extractvalue { i32, i32, i32, i32 } %631, 1, !dbg !30
  %634 = extractvalue { i32, i32, i32, i32 } %631, 2, !dbg !30
  %635 = extractvalue { i32, i32, i32, i32 } %631, 3, !dbg !30
  %636 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %444, !dbg !30
  %637 = ptrtoint ptr addrspace(3) %636 to i32, !dbg !30
  %638 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %637) #1, !dbg !30
  %639 = extractvalue { i32, i32, i32, i32 } %638, 0, !dbg !30
  %640 = extractvalue { i32, i32, i32, i32 } %638, 1, !dbg !30
  %641 = extractvalue { i32, i32, i32, i32 } %638, 2, !dbg !30
  %642 = extractvalue { i32, i32, i32, i32 } %638, 3, !dbg !30
  %643 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %447, !dbg !30
  %644 = ptrtoint ptr addrspace(3) %643 to i32, !dbg !30
  %645 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %644) #1, !dbg !30
  %646 = extractvalue { i32, i32, i32, i32 } %645, 0, !dbg !30
  %647 = extractvalue { i32, i32, i32, i32 } %645, 1, !dbg !30
  %648 = extractvalue { i32, i32, i32, i32 } %645, 2, !dbg !30
  %649 = extractvalue { i32, i32, i32, i32 } %645, 3, !dbg !30
  %650 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %449, !dbg !30
  %651 = ptrtoint ptr addrspace(3) %650 to i32, !dbg !30
  %652 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %651) #1, !dbg !30
  %653 = extractvalue { i32, i32, i32, i32 } %652, 0, !dbg !30
  %654 = extractvalue { i32, i32, i32, i32 } %652, 1, !dbg !30
  %655 = extractvalue { i32, i32, i32, i32 } %652, 2, !dbg !30
  %656 = extractvalue { i32, i32, i32, i32 } %652, 3, !dbg !30
  %657 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %450, !dbg !30
  %658 = ptrtoint ptr addrspace(3) %657 to i32, !dbg !30
  %659 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %658) #1, !dbg !30
  %660 = extractvalue { i32, i32, i32, i32 } %659, 0, !dbg !30
  %661 = extractvalue { i32, i32, i32, i32 } %659, 1, !dbg !30
  %662 = extractvalue { i32, i32, i32, i32 } %659, 2, !dbg !30
  %663 = extractvalue { i32, i32, i32, i32 } %659, 3, !dbg !30
  %664 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %451, !dbg !30
  %665 = ptrtoint ptr addrspace(3) %664 to i32, !dbg !30
  %666 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %665) #1, !dbg !30
  %667 = extractvalue { i32, i32, i32, i32 } %666, 0, !dbg !30
  %668 = extractvalue { i32, i32, i32, i32 } %666, 1, !dbg !30
  %669 = extractvalue { i32, i32, i32, i32 } %666, 2, !dbg !30
  %670 = extractvalue { i32, i32, i32, i32 } %666, 3, !dbg !30
  %671 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %452, !dbg !30
  %672 = ptrtoint ptr addrspace(3) %671 to i32, !dbg !30
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %672) #1, !dbg !30
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !30
  %675 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !30
  %676 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !30
  %677 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !30
  %678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %453, !dbg !30
  %679 = ptrtoint ptr addrspace(3) %678 to i32, !dbg !30
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %679) #1, !dbg !30
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !30
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !30
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !30
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !30
  %685 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %454, !dbg !30
  %686 = ptrtoint ptr addrspace(3) %685 to i32, !dbg !30
  %687 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %686) #1, !dbg !30
  %688 = extractvalue { i32, i32, i32, i32 } %687, 0, !dbg !30
  %689 = extractvalue { i32, i32, i32, i32 } %687, 1, !dbg !30
  %690 = extractvalue { i32, i32, i32, i32 } %687, 2, !dbg !30
  %691 = extractvalue { i32, i32, i32, i32 } %687, 3, !dbg !30
  %692 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %455, !dbg !30
  %693 = ptrtoint ptr addrspace(3) %692 to i32, !dbg !30
  %694 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %693) #1, !dbg !30
  %695 = extractvalue { i32, i32, i32, i32 } %694, 0, !dbg !30
  %696 = extractvalue { i32, i32, i32, i32 } %694, 1, !dbg !30
  %697 = extractvalue { i32, i32, i32, i32 } %694, 2, !dbg !30
  %698 = extractvalue { i32, i32, i32, i32 } %694, 3, !dbg !30
  %699 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %456, !dbg !30
  %700 = ptrtoint ptr addrspace(3) %699 to i32, !dbg !30
  %701 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %700) #1, !dbg !30
  %702 = extractvalue { i32, i32, i32, i32 } %701, 0, !dbg !30
  %703 = extractvalue { i32, i32, i32, i32 } %701, 1, !dbg !30
  %704 = extractvalue { i32, i32, i32, i32 } %701, 2, !dbg !30
  %705 = extractvalue { i32, i32, i32, i32 } %701, 3, !dbg !30
  %706 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %459, !dbg !30
  %707 = ptrtoint ptr addrspace(3) %706 to i32, !dbg !30
  %708 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %707) #1, !dbg !30
  %709 = extractvalue { i32, i32, i32, i32 } %708, 0, !dbg !30
  %710 = extractvalue { i32, i32, i32, i32 } %708, 1, !dbg !30
  %711 = extractvalue { i32, i32, i32, i32 } %708, 2, !dbg !30
  %712 = extractvalue { i32, i32, i32, i32 } %708, 3, !dbg !30
  %713 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %460, !dbg !30
  %714 = ptrtoint ptr addrspace(3) %713 to i32, !dbg !30
  %715 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %714) #1, !dbg !30
  %716 = extractvalue { i32, i32, i32, i32 } %715, 0, !dbg !30
  %717 = extractvalue { i32, i32, i32, i32 } %715, 1, !dbg !30
  %718 = extractvalue { i32, i32, i32, i32 } %715, 2, !dbg !30
  %719 = extractvalue { i32, i32, i32, i32 } %715, 3, !dbg !30
  %720 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %461, !dbg !30
  %721 = ptrtoint ptr addrspace(3) %720 to i32, !dbg !30
  %722 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %721) #1, !dbg !30
  %723 = extractvalue { i32, i32, i32, i32 } %722, 0, !dbg !30
  %724 = extractvalue { i32, i32, i32, i32 } %722, 1, !dbg !30
  %725 = extractvalue { i32, i32, i32, i32 } %722, 2, !dbg !30
  %726 = extractvalue { i32, i32, i32, i32 } %722, 3, !dbg !30
  %727 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %462, !dbg !30
  %728 = ptrtoint ptr addrspace(3) %727 to i32, !dbg !30
  %729 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %728) #1, !dbg !30
  %730 = extractvalue { i32, i32, i32, i32 } %729, 0, !dbg !30
  %731 = extractvalue { i32, i32, i32, i32 } %729, 1, !dbg !30
  %732 = extractvalue { i32, i32, i32, i32 } %729, 2, !dbg !30
  %733 = extractvalue { i32, i32, i32, i32 } %729, 3, !dbg !30
  %734 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %463, !dbg !30
  %735 = ptrtoint ptr addrspace(3) %734 to i32, !dbg !30
  %736 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %735) #1, !dbg !30
  %737 = extractvalue { i32, i32, i32, i32 } %736, 0, !dbg !30
  %738 = extractvalue { i32, i32, i32, i32 } %736, 1, !dbg !30
  %739 = extractvalue { i32, i32, i32, i32 } %736, 2, !dbg !30
  %740 = extractvalue { i32, i32, i32, i32 } %736, 3, !dbg !30
  %741 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %464, !dbg !30
  %742 = ptrtoint ptr addrspace(3) %741 to i32, !dbg !30
  %743 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %742) #1, !dbg !30
  %744 = extractvalue { i32, i32, i32, i32 } %743, 0, !dbg !30
  %745 = extractvalue { i32, i32, i32, i32 } %743, 1, !dbg !30
  %746 = extractvalue { i32, i32, i32, i32 } %743, 2, !dbg !30
  %747 = extractvalue { i32, i32, i32, i32 } %743, 3, !dbg !30
  %748 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %465, !dbg !30
  %749 = ptrtoint ptr addrspace(3) %748 to i32, !dbg !30
  %750 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %749) #1, !dbg !30
  %751 = extractvalue { i32, i32, i32, i32 } %750, 0, !dbg !30
  %752 = extractvalue { i32, i32, i32, i32 } %750, 1, !dbg !30
  %753 = extractvalue { i32, i32, i32, i32 } %750, 2, !dbg !30
  %754 = extractvalue { i32, i32, i32, i32 } %750, 3, !dbg !30
  %755 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %466, !dbg !30
  %756 = ptrtoint ptr addrspace(3) %755 to i32, !dbg !30
  %757 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %756) #1, !dbg !30
  %758 = extractvalue { i32, i32, i32, i32 } %757, 0, !dbg !30
  %759 = extractvalue { i32, i32, i32, i32 } %757, 1, !dbg !30
  %760 = extractvalue { i32, i32, i32, i32 } %757, 2, !dbg !30
  %761 = extractvalue { i32, i32, i32, i32 } %757, 3, !dbg !30
  %762 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %468, !dbg !30
  %763 = ptrtoint ptr addrspace(3) %762 to i32, !dbg !30
  %764 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %763) #1, !dbg !30
  %765 = extractvalue { i32, i32, i32, i32 } %764, 0, !dbg !30
  %766 = extractvalue { i32, i32, i32, i32 } %764, 1, !dbg !30
  %767 = extractvalue { i32, i32, i32, i32 } %764, 2, !dbg !30
  %768 = extractvalue { i32, i32, i32, i32 } %764, 3, !dbg !30
  %769 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %469, !dbg !30
  %770 = ptrtoint ptr addrspace(3) %769 to i32, !dbg !30
  %771 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %770) #1, !dbg !30
  %772 = extractvalue { i32, i32, i32, i32 } %771, 0, !dbg !30
  %773 = extractvalue { i32, i32, i32, i32 } %771, 1, !dbg !30
  %774 = extractvalue { i32, i32, i32, i32 } %771, 2, !dbg !30
  %775 = extractvalue { i32, i32, i32, i32 } %771, 3, !dbg !30
  %776 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %470, !dbg !30
  %777 = ptrtoint ptr addrspace(3) %776 to i32, !dbg !30
  %778 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %777) #1, !dbg !30
  %779 = extractvalue { i32, i32, i32, i32 } %778, 0, !dbg !30
  %780 = extractvalue { i32, i32, i32, i32 } %778, 1, !dbg !30
  %781 = extractvalue { i32, i32, i32, i32 } %778, 2, !dbg !30
  %782 = extractvalue { i32, i32, i32, i32 } %778, 3, !dbg !30
  %783 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %471, !dbg !30
  %784 = ptrtoint ptr addrspace(3) %783 to i32, !dbg !30
  %785 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %784) #1, !dbg !30
  %786 = extractvalue { i32, i32, i32, i32 } %785, 0, !dbg !30
  %787 = extractvalue { i32, i32, i32, i32 } %785, 1, !dbg !30
  %788 = extractvalue { i32, i32, i32, i32 } %785, 2, !dbg !30
  %789 = extractvalue { i32, i32, i32, i32 } %785, 3, !dbg !30
  %790 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %472, !dbg !30
  %791 = ptrtoint ptr addrspace(3) %790 to i32, !dbg !30
  %792 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %791) #1, !dbg !30
  %793 = extractvalue { i32, i32, i32, i32 } %792, 0, !dbg !30
  %794 = extractvalue { i32, i32, i32, i32 } %792, 1, !dbg !30
  %795 = extractvalue { i32, i32, i32, i32 } %792, 2, !dbg !30
  %796 = extractvalue { i32, i32, i32, i32 } %792, 3, !dbg !30
  %797 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %473, !dbg !30
  %798 = ptrtoint ptr addrspace(3) %797 to i32, !dbg !30
  %799 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %798) #1, !dbg !30
  %800 = extractvalue { i32, i32, i32, i32 } %799, 0, !dbg !30
  %801 = extractvalue { i32, i32, i32, i32 } %799, 1, !dbg !30
  %802 = extractvalue { i32, i32, i32, i32 } %799, 2, !dbg !30
  %803 = extractvalue { i32, i32, i32, i32 } %799, 3, !dbg !30
  %804 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %474, !dbg !30
  %805 = ptrtoint ptr addrspace(3) %804 to i32, !dbg !30
  %806 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %805) #1, !dbg !30
  %807 = extractvalue { i32, i32, i32, i32 } %806, 0, !dbg !30
  %808 = extractvalue { i32, i32, i32, i32 } %806, 1, !dbg !30
  %809 = extractvalue { i32, i32, i32, i32 } %806, 2, !dbg !30
  %810 = extractvalue { i32, i32, i32, i32 } %806, 3, !dbg !30
  %811 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %593, i32 %475, !dbg !30
  %812 = ptrtoint ptr addrspace(3) %811 to i32, !dbg !30
  %813 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %812) #1, !dbg !30
  %814 = extractvalue { i32, i32, i32, i32 } %813, 0, !dbg !30
  %815 = extractvalue { i32, i32, i32, i32 } %813, 1, !dbg !30
  %816 = extractvalue { i32, i32, i32, i32 } %813, 2, !dbg !30
  %817 = extractvalue { i32, i32, i32, i32 } %813, 3, !dbg !30
  %.idx95 = shl i32 %592, 15, !dbg !33
  %818 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx95, !dbg !33
  %819 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %481, !dbg !33
  %820 = ptrtoint ptr addrspace(3) %819 to i32, !dbg !33
  %821 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %820) #1, !dbg !33
  %822 = extractvalue { i32, i32, i32, i32 } %821, 0, !dbg !33
  %823 = extractvalue { i32, i32, i32, i32 } %821, 1, !dbg !33
  %824 = extractvalue { i32, i32, i32, i32 } %821, 2, !dbg !33
  %825 = extractvalue { i32, i32, i32, i32 } %821, 3, !dbg !33
  %826 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %483, !dbg !33
  %827 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %826, i32 %480, !dbg !33
  %828 = ptrtoint ptr addrspace(3) %827 to i32, !dbg !33
  %829 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %828) #1, !dbg !33
  %830 = extractvalue { i32, i32, i32, i32 } %829, 0, !dbg !33
  %831 = extractvalue { i32, i32, i32, i32 } %829, 1, !dbg !33
  %832 = extractvalue { i32, i32, i32, i32 } %829, 2, !dbg !33
  %833 = extractvalue { i32, i32, i32, i32 } %829, 3, !dbg !33
  %834 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %484, !dbg !33
  %835 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %834, i32 %480, !dbg !33
  %836 = ptrtoint ptr addrspace(3) %835 to i32, !dbg !33
  %837 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %836) #1, !dbg !33
  %838 = extractvalue { i32, i32, i32, i32 } %837, 0, !dbg !33
  %839 = extractvalue { i32, i32, i32, i32 } %837, 1, !dbg !33
  %840 = extractvalue { i32, i32, i32, i32 } %837, 2, !dbg !33
  %841 = extractvalue { i32, i32, i32, i32 } %837, 3, !dbg !33
  %842 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %485, !dbg !33
  %843 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %842, i32 %480, !dbg !33
  %844 = ptrtoint ptr addrspace(3) %843 to i32, !dbg !33
  %845 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %844) #1, !dbg !33
  %846 = extractvalue { i32, i32, i32, i32 } %845, 0, !dbg !33
  %847 = extractvalue { i32, i32, i32, i32 } %845, 1, !dbg !33
  %848 = extractvalue { i32, i32, i32, i32 } %845, 2, !dbg !33
  %849 = extractvalue { i32, i32, i32, i32 } %845, 3, !dbg !33
  %850 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %489, !dbg !33
  %851 = ptrtoint ptr addrspace(3) %850 to i32, !dbg !33
  %852 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %851) #1, !dbg !33
  %853 = extractvalue { i32, i32, i32, i32 } %852, 0, !dbg !33
  %854 = extractvalue { i32, i32, i32, i32 } %852, 1, !dbg !33
  %855 = extractvalue { i32, i32, i32, i32 } %852, 2, !dbg !33
  %856 = extractvalue { i32, i32, i32, i32 } %852, 3, !dbg !33
  %857 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %826, i32 %488, !dbg !33
  %858 = ptrtoint ptr addrspace(3) %857 to i32, !dbg !33
  %859 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %858) #1, !dbg !33
  %860 = extractvalue { i32, i32, i32, i32 } %859, 0, !dbg !33
  %861 = extractvalue { i32, i32, i32, i32 } %859, 1, !dbg !33
  %862 = extractvalue { i32, i32, i32, i32 } %859, 2, !dbg !33
  %863 = extractvalue { i32, i32, i32, i32 } %859, 3, !dbg !33
  %864 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %834, i32 %488, !dbg !33
  %865 = ptrtoint ptr addrspace(3) %864 to i32, !dbg !33
  %866 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %865) #1, !dbg !33
  %867 = extractvalue { i32, i32, i32, i32 } %866, 0, !dbg !33
  %868 = extractvalue { i32, i32, i32, i32 } %866, 1, !dbg !33
  %869 = extractvalue { i32, i32, i32, i32 } %866, 2, !dbg !33
  %870 = extractvalue { i32, i32, i32, i32 } %866, 3, !dbg !33
  %871 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %842, i32 %488, !dbg !33
  %872 = ptrtoint ptr addrspace(3) %871 to i32, !dbg !33
  %873 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %872) #1, !dbg !33
  %874 = extractvalue { i32, i32, i32, i32 } %873, 0, !dbg !33
  %875 = extractvalue { i32, i32, i32, i32 } %873, 1, !dbg !33
  %876 = extractvalue { i32, i32, i32, i32 } %873, 2, !dbg !33
  %877 = extractvalue { i32, i32, i32, i32 } %873, 3, !dbg !33
  %878 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %491, !dbg !33
  %879 = ptrtoint ptr addrspace(3) %878 to i32, !dbg !33
  %880 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %879) #1, !dbg !33
  %881 = extractvalue { i32, i32, i32, i32 } %880, 0, !dbg !33
  %882 = extractvalue { i32, i32, i32, i32 } %880, 1, !dbg !33
  %883 = extractvalue { i32, i32, i32, i32 } %880, 2, !dbg !33
  %884 = extractvalue { i32, i32, i32, i32 } %880, 3, !dbg !33
  %885 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %826, i32 %490, !dbg !33
  %886 = ptrtoint ptr addrspace(3) %885 to i32, !dbg !33
  %887 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %886) #1, !dbg !33
  %888 = extractvalue { i32, i32, i32, i32 } %887, 0, !dbg !33
  %889 = extractvalue { i32, i32, i32, i32 } %887, 1, !dbg !33
  %890 = extractvalue { i32, i32, i32, i32 } %887, 2, !dbg !33
  %891 = extractvalue { i32, i32, i32, i32 } %887, 3, !dbg !33
  %892 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %834, i32 %490, !dbg !33
  %893 = ptrtoint ptr addrspace(3) %892 to i32, !dbg !33
  %894 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %893) #1, !dbg !33
  %895 = extractvalue { i32, i32, i32, i32 } %894, 0, !dbg !33
  %896 = extractvalue { i32, i32, i32, i32 } %894, 1, !dbg !33
  %897 = extractvalue { i32, i32, i32, i32 } %894, 2, !dbg !33
  %898 = extractvalue { i32, i32, i32, i32 } %894, 3, !dbg !33
  %899 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %842, i32 %490, !dbg !33
  %900 = ptrtoint ptr addrspace(3) %899 to i32, !dbg !33
  %901 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %900) #1, !dbg !33
  %902 = extractvalue { i32, i32, i32, i32 } %901, 0, !dbg !33
  %903 = extractvalue { i32, i32, i32, i32 } %901, 1, !dbg !33
  %904 = extractvalue { i32, i32, i32, i32 } %901, 2, !dbg !33
  %905 = extractvalue { i32, i32, i32, i32 } %901, 3, !dbg !33
  %906 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %493, !dbg !33
  %907 = ptrtoint ptr addrspace(3) %906 to i32, !dbg !33
  %908 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %907) #1, !dbg !33
  %909 = extractvalue { i32, i32, i32, i32 } %908, 0, !dbg !33
  %910 = extractvalue { i32, i32, i32, i32 } %908, 1, !dbg !33
  %911 = extractvalue { i32, i32, i32, i32 } %908, 2, !dbg !33
  %912 = extractvalue { i32, i32, i32, i32 } %908, 3, !dbg !33
  %913 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %494, !dbg !33
  %914 = ptrtoint ptr addrspace(3) %913 to i32, !dbg !33
  %915 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %914) #1, !dbg !33
  %916 = extractvalue { i32, i32, i32, i32 } %915, 0, !dbg !33
  %917 = extractvalue { i32, i32, i32, i32 } %915, 1, !dbg !33
  %918 = extractvalue { i32, i32, i32, i32 } %915, 2, !dbg !33
  %919 = extractvalue { i32, i32, i32, i32 } %915, 3, !dbg !33
  %920 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %495, !dbg !33
  %921 = ptrtoint ptr addrspace(3) %920 to i32, !dbg !33
  %922 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %921) #1, !dbg !33
  %923 = extractvalue { i32, i32, i32, i32 } %922, 0, !dbg !33
  %924 = extractvalue { i32, i32, i32, i32 } %922, 1, !dbg !33
  %925 = extractvalue { i32, i32, i32, i32 } %922, 2, !dbg !33
  %926 = extractvalue { i32, i32, i32, i32 } %922, 3, !dbg !33
  %927 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %818, i32 %496, !dbg !33
  %928 = ptrtoint ptr addrspace(3) %927 to i32, !dbg !33
  %929 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %928) #1, !dbg !33
  %930 = extractvalue { i32, i32, i32, i32 } %929, 0, !dbg !33
  %931 = extractvalue { i32, i32, i32, i32 } %929, 1, !dbg !33
  %932 = extractvalue { i32, i32, i32, i32 } %929, 2, !dbg !33
  %933 = extractvalue { i32, i32, i32, i32 } %929, 3, !dbg !33
  %934 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %525, float %526, float %527, float %528, i32 %597, i32 %598, i32 %599, i32 %600, i32 %822, i32 %823) #1, !dbg !36
  %935 = extractvalue { float, float, float, float } %934, 0, !dbg !36
  %936 = extractvalue { float, float, float, float } %934, 1, !dbg !36
  %937 = extractvalue { float, float, float, float } %934, 2, !dbg !36
  %938 = extractvalue { float, float, float, float } %934, 3, !dbg !36
  %939 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %529, float %530, float %531, float %532, i32 %597, i32 %598, i32 %599, i32 %600, i32 %853, i32 %854) #1, !dbg !36
  %940 = extractvalue { float, float, float, float } %939, 0, !dbg !36
  %941 = extractvalue { float, float, float, float } %939, 1, !dbg !36
  %942 = extractvalue { float, float, float, float } %939, 2, !dbg !36
  %943 = extractvalue { float, float, float, float } %939, 3, !dbg !36
  %944 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %533, float %534, float %535, float %536, i32 %597, i32 %598, i32 %599, i32 %600, i32 %881, i32 %882) #1, !dbg !36
  %945 = extractvalue { float, float, float, float } %944, 0, !dbg !36
  %946 = extractvalue { float, float, float, float } %944, 1, !dbg !36
  %947 = extractvalue { float, float, float, float } %944, 2, !dbg !36
  %948 = extractvalue { float, float, float, float } %944, 3, !dbg !36
  %949 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %537, float %538, float %539, float %540, i32 %597, i32 %598, i32 %599, i32 %600, i32 %909, i32 %910) #1, !dbg !36
  %950 = extractvalue { float, float, float, float } %949, 0, !dbg !36
  %951 = extractvalue { float, float, float, float } %949, 1, !dbg !36
  %952 = extractvalue { float, float, float, float } %949, 2, !dbg !36
  %953 = extractvalue { float, float, float, float } %949, 3, !dbg !36
  %954 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %541, float %542, float %543, float %544, i32 %653, i32 %654, i32 %655, i32 %656, i32 %822, i32 %823) #1, !dbg !36
  %955 = extractvalue { float, float, float, float } %954, 0, !dbg !36
  %956 = extractvalue { float, float, float, float } %954, 1, !dbg !36
  %957 = extractvalue { float, float, float, float } %954, 2, !dbg !36
  %958 = extractvalue { float, float, float, float } %954, 3, !dbg !36
  %959 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %545, float %546, float %547, float %548, i32 %653, i32 %654, i32 %655, i32 %656, i32 %853, i32 %854) #1, !dbg !36
  %960 = extractvalue { float, float, float, float } %959, 0, !dbg !36
  %961 = extractvalue { float, float, float, float } %959, 1, !dbg !36
  %962 = extractvalue { float, float, float, float } %959, 2, !dbg !36
  %963 = extractvalue { float, float, float, float } %959, 3, !dbg !36
  %964 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %549, float %550, float %551, float %552, i32 %653, i32 %654, i32 %655, i32 %656, i32 %881, i32 %882) #1, !dbg !36
  %965 = extractvalue { float, float, float, float } %964, 0, !dbg !36
  %966 = extractvalue { float, float, float, float } %964, 1, !dbg !36
  %967 = extractvalue { float, float, float, float } %964, 2, !dbg !36
  %968 = extractvalue { float, float, float, float } %964, 3, !dbg !36
  %969 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %553, float %554, float %555, float %556, i32 %653, i32 %654, i32 %655, i32 %656, i32 %909, i32 %910) #1, !dbg !36
  %970 = extractvalue { float, float, float, float } %969, 0, !dbg !36
  %971 = extractvalue { float, float, float, float } %969, 1, !dbg !36
  %972 = extractvalue { float, float, float, float } %969, 2, !dbg !36
  %973 = extractvalue { float, float, float, float } %969, 3, !dbg !36
  %974 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %557, float %558, float %559, float %560, i32 %709, i32 %710, i32 %711, i32 %712, i32 %822, i32 %823) #1, !dbg !36
  %975 = extractvalue { float, float, float, float } %974, 0, !dbg !36
  %976 = extractvalue { float, float, float, float } %974, 1, !dbg !36
  %977 = extractvalue { float, float, float, float } %974, 2, !dbg !36
  %978 = extractvalue { float, float, float, float } %974, 3, !dbg !36
  %979 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %561, float %562, float %563, float %564, i32 %709, i32 %710, i32 %711, i32 %712, i32 %853, i32 %854) #1, !dbg !36
  %980 = extractvalue { float, float, float, float } %979, 0, !dbg !36
  %981 = extractvalue { float, float, float, float } %979, 1, !dbg !36
  %982 = extractvalue { float, float, float, float } %979, 2, !dbg !36
  %983 = extractvalue { float, float, float, float } %979, 3, !dbg !36
  %984 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %565, float %566, float %567, float %568, i32 %709, i32 %710, i32 %711, i32 %712, i32 %881, i32 %882) #1, !dbg !36
  %985 = extractvalue { float, float, float, float } %984, 0, !dbg !36
  %986 = extractvalue { float, float, float, float } %984, 1, !dbg !36
  %987 = extractvalue { float, float, float, float } %984, 2, !dbg !36
  %988 = extractvalue { float, float, float, float } %984, 3, !dbg !36
  %989 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %569, float %570, float %571, float %572, i32 %709, i32 %710, i32 %711, i32 %712, i32 %909, i32 %910) #1, !dbg !36
  %990 = extractvalue { float, float, float, float } %989, 0, !dbg !36
  %991 = extractvalue { float, float, float, float } %989, 1, !dbg !36
  %992 = extractvalue { float, float, float, float } %989, 2, !dbg !36
  %993 = extractvalue { float, float, float, float } %989, 3, !dbg !36
  %994 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %573, float %574, float %575, float %576, i32 %765, i32 %766, i32 %767, i32 %768, i32 %822, i32 %823) #1, !dbg !36
  %995 = extractvalue { float, float, float, float } %994, 0, !dbg !36
  %996 = extractvalue { float, float, float, float } %994, 1, !dbg !36
  %997 = extractvalue { float, float, float, float } %994, 2, !dbg !36
  %998 = extractvalue { float, float, float, float } %994, 3, !dbg !36
  %999 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %577, float %578, float %579, float %580, i32 %765, i32 %766, i32 %767, i32 %768, i32 %853, i32 %854) #1, !dbg !36
  %1000 = extractvalue { float, float, float, float } %999, 0, !dbg !36
  %1001 = extractvalue { float, float, float, float } %999, 1, !dbg !36
  %1002 = extractvalue { float, float, float, float } %999, 2, !dbg !36
  %1003 = extractvalue { float, float, float, float } %999, 3, !dbg !36
  %1004 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %581, float %582, float %583, float %584, i32 %765, i32 %766, i32 %767, i32 %768, i32 %881, i32 %882) #1, !dbg !36
  %1005 = extractvalue { float, float, float, float } %1004, 0, !dbg !36
  %1006 = extractvalue { float, float, float, float } %1004, 1, !dbg !36
  %1007 = extractvalue { float, float, float, float } %1004, 2, !dbg !36
  %1008 = extractvalue { float, float, float, float } %1004, 3, !dbg !36
  %1009 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %585, float %586, float %587, float %588, i32 %765, i32 %766, i32 %767, i32 %768, i32 %909, i32 %910) #1, !dbg !36
  %1010 = extractvalue { float, float, float, float } %1009, 0, !dbg !36
  %1011 = extractvalue { float, float, float, float } %1009, 1, !dbg !36
  %1012 = extractvalue { float, float, float, float } %1009, 2, !dbg !36
  %1013 = extractvalue { float, float, float, float } %1009, 3, !dbg !36
  %1014 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %935, float %936, float %937, float %938, i32 %604, i32 %605, i32 %606, i32 %607, i32 %824, i32 %825) #1, !dbg !36
  %1015 = extractvalue { float, float, float, float } %1014, 0, !dbg !36
  %1016 = extractvalue { float, float, float, float } %1014, 1, !dbg !36
  %1017 = extractvalue { float, float, float, float } %1014, 2, !dbg !36
  %1018 = extractvalue { float, float, float, float } %1014, 3, !dbg !36
  %1019 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %940, float %941, float %942, float %943, i32 %604, i32 %605, i32 %606, i32 %607, i32 %855, i32 %856) #1, !dbg !36
  %1020 = extractvalue { float, float, float, float } %1019, 0, !dbg !36
  %1021 = extractvalue { float, float, float, float } %1019, 1, !dbg !36
  %1022 = extractvalue { float, float, float, float } %1019, 2, !dbg !36
  %1023 = extractvalue { float, float, float, float } %1019, 3, !dbg !36
  %1024 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %945, float %946, float %947, float %948, i32 %604, i32 %605, i32 %606, i32 %607, i32 %883, i32 %884) #1, !dbg !36
  %1025 = extractvalue { float, float, float, float } %1024, 0, !dbg !36
  %1026 = extractvalue { float, float, float, float } %1024, 1, !dbg !36
  %1027 = extractvalue { float, float, float, float } %1024, 2, !dbg !36
  %1028 = extractvalue { float, float, float, float } %1024, 3, !dbg !36
  %1029 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %950, float %951, float %952, float %953, i32 %604, i32 %605, i32 %606, i32 %607, i32 %911, i32 %912) #1, !dbg !36
  %1030 = extractvalue { float, float, float, float } %1029, 0, !dbg !36
  %1031 = extractvalue { float, float, float, float } %1029, 1, !dbg !36
  %1032 = extractvalue { float, float, float, float } %1029, 2, !dbg !36
  %1033 = extractvalue { float, float, float, float } %1029, 3, !dbg !36
  %1034 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %955, float %956, float %957, float %958, i32 %660, i32 %661, i32 %662, i32 %663, i32 %824, i32 %825) #1, !dbg !36
  %1035 = extractvalue { float, float, float, float } %1034, 0, !dbg !36
  %1036 = extractvalue { float, float, float, float } %1034, 1, !dbg !36
  %1037 = extractvalue { float, float, float, float } %1034, 2, !dbg !36
  %1038 = extractvalue { float, float, float, float } %1034, 3, !dbg !36
  %1039 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %960, float %961, float %962, float %963, i32 %660, i32 %661, i32 %662, i32 %663, i32 %855, i32 %856) #1, !dbg !36
  %1040 = extractvalue { float, float, float, float } %1039, 0, !dbg !36
  %1041 = extractvalue { float, float, float, float } %1039, 1, !dbg !36
  %1042 = extractvalue { float, float, float, float } %1039, 2, !dbg !36
  %1043 = extractvalue { float, float, float, float } %1039, 3, !dbg !36
  %1044 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %965, float %966, float %967, float %968, i32 %660, i32 %661, i32 %662, i32 %663, i32 %883, i32 %884) #1, !dbg !36
  %1045 = extractvalue { float, float, float, float } %1044, 0, !dbg !36
  %1046 = extractvalue { float, float, float, float } %1044, 1, !dbg !36
  %1047 = extractvalue { float, float, float, float } %1044, 2, !dbg !36
  %1048 = extractvalue { float, float, float, float } %1044, 3, !dbg !36
  %1049 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %970, float %971, float %972, float %973, i32 %660, i32 %661, i32 %662, i32 %663, i32 %911, i32 %912) #1, !dbg !36
  %1050 = extractvalue { float, float, float, float } %1049, 0, !dbg !36
  %1051 = extractvalue { float, float, float, float } %1049, 1, !dbg !36
  %1052 = extractvalue { float, float, float, float } %1049, 2, !dbg !36
  %1053 = extractvalue { float, float, float, float } %1049, 3, !dbg !36
  %1054 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %975, float %976, float %977, float %978, i32 %716, i32 %717, i32 %718, i32 %719, i32 %824, i32 %825) #1, !dbg !36
  %1055 = extractvalue { float, float, float, float } %1054, 0, !dbg !36
  %1056 = extractvalue { float, float, float, float } %1054, 1, !dbg !36
  %1057 = extractvalue { float, float, float, float } %1054, 2, !dbg !36
  %1058 = extractvalue { float, float, float, float } %1054, 3, !dbg !36
  %1059 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %980, float %981, float %982, float %983, i32 %716, i32 %717, i32 %718, i32 %719, i32 %855, i32 %856) #1, !dbg !36
  %1060 = extractvalue { float, float, float, float } %1059, 0, !dbg !36
  %1061 = extractvalue { float, float, float, float } %1059, 1, !dbg !36
  %1062 = extractvalue { float, float, float, float } %1059, 2, !dbg !36
  %1063 = extractvalue { float, float, float, float } %1059, 3, !dbg !36
  %1064 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %985, float %986, float %987, float %988, i32 %716, i32 %717, i32 %718, i32 %719, i32 %883, i32 %884) #1, !dbg !36
  %1065 = extractvalue { float, float, float, float } %1064, 0, !dbg !36
  %1066 = extractvalue { float, float, float, float } %1064, 1, !dbg !36
  %1067 = extractvalue { float, float, float, float } %1064, 2, !dbg !36
  %1068 = extractvalue { float, float, float, float } %1064, 3, !dbg !36
  %1069 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %990, float %991, float %992, float %993, i32 %716, i32 %717, i32 %718, i32 %719, i32 %911, i32 %912) #1, !dbg !36
  %1070 = extractvalue { float, float, float, float } %1069, 0, !dbg !36
  %1071 = extractvalue { float, float, float, float } %1069, 1, !dbg !36
  %1072 = extractvalue { float, float, float, float } %1069, 2, !dbg !36
  %1073 = extractvalue { float, float, float, float } %1069, 3, !dbg !36
  %1074 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %995, float %996, float %997, float %998, i32 %772, i32 %773, i32 %774, i32 %775, i32 %824, i32 %825) #1, !dbg !36
  %1075 = extractvalue { float, float, float, float } %1074, 0, !dbg !36
  %1076 = extractvalue { float, float, float, float } %1074, 1, !dbg !36
  %1077 = extractvalue { float, float, float, float } %1074, 2, !dbg !36
  %1078 = extractvalue { float, float, float, float } %1074, 3, !dbg !36
  %1079 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1000, float %1001, float %1002, float %1003, i32 %772, i32 %773, i32 %774, i32 %775, i32 %855, i32 %856) #1, !dbg !36
  %1080 = extractvalue { float, float, float, float } %1079, 0, !dbg !36
  %1081 = extractvalue { float, float, float, float } %1079, 1, !dbg !36
  %1082 = extractvalue { float, float, float, float } %1079, 2, !dbg !36
  %1083 = extractvalue { float, float, float, float } %1079, 3, !dbg !36
  %1084 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1005, float %1006, float %1007, float %1008, i32 %772, i32 %773, i32 %774, i32 %775, i32 %883, i32 %884) #1, !dbg !36
  %1085 = extractvalue { float, float, float, float } %1084, 0, !dbg !36
  %1086 = extractvalue { float, float, float, float } %1084, 1, !dbg !36
  %1087 = extractvalue { float, float, float, float } %1084, 2, !dbg !36
  %1088 = extractvalue { float, float, float, float } %1084, 3, !dbg !36
  %1089 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1010, float %1011, float %1012, float %1013, i32 %772, i32 %773, i32 %774, i32 %775, i32 %911, i32 %912) #1, !dbg !36
  %1090 = extractvalue { float, float, float, float } %1089, 0, !dbg !36
  %1091 = extractvalue { float, float, float, float } %1089, 1, !dbg !36
  %1092 = extractvalue { float, float, float, float } %1089, 2, !dbg !36
  %1093 = extractvalue { float, float, float, float } %1089, 3, !dbg !36
  %1094 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1015, float %1016, float %1017, float %1018, i32 %611, i32 %612, i32 %613, i32 %614, i32 %830, i32 %831) #1, !dbg !36
  %1095 = extractvalue { float, float, float, float } %1094, 0, !dbg !36
  %1096 = extractvalue { float, float, float, float } %1094, 1, !dbg !36
  %1097 = extractvalue { float, float, float, float } %1094, 2, !dbg !36
  %1098 = extractvalue { float, float, float, float } %1094, 3, !dbg !36
  %1099 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1020, float %1021, float %1022, float %1023, i32 %611, i32 %612, i32 %613, i32 %614, i32 %860, i32 %861) #1, !dbg !36
  %1100 = extractvalue { float, float, float, float } %1099, 0, !dbg !36
  %1101 = extractvalue { float, float, float, float } %1099, 1, !dbg !36
  %1102 = extractvalue { float, float, float, float } %1099, 2, !dbg !36
  %1103 = extractvalue { float, float, float, float } %1099, 3, !dbg !36
  %1104 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1025, float %1026, float %1027, float %1028, i32 %611, i32 %612, i32 %613, i32 %614, i32 %888, i32 %889) #1, !dbg !36
  %1105 = extractvalue { float, float, float, float } %1104, 0, !dbg !36
  %1106 = extractvalue { float, float, float, float } %1104, 1, !dbg !36
  %1107 = extractvalue { float, float, float, float } %1104, 2, !dbg !36
  %1108 = extractvalue { float, float, float, float } %1104, 3, !dbg !36
  %1109 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1030, float %1031, float %1032, float %1033, i32 %611, i32 %612, i32 %613, i32 %614, i32 %916, i32 %917) #1, !dbg !36
  %1110 = extractvalue { float, float, float, float } %1109, 0, !dbg !36
  %1111 = extractvalue { float, float, float, float } %1109, 1, !dbg !36
  %1112 = extractvalue { float, float, float, float } %1109, 2, !dbg !36
  %1113 = extractvalue { float, float, float, float } %1109, 3, !dbg !36
  %1114 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1035, float %1036, float %1037, float %1038, i32 %667, i32 %668, i32 %669, i32 %670, i32 %830, i32 %831) #1, !dbg !36
  %1115 = extractvalue { float, float, float, float } %1114, 0, !dbg !36
  %1116 = extractvalue { float, float, float, float } %1114, 1, !dbg !36
  %1117 = extractvalue { float, float, float, float } %1114, 2, !dbg !36
  %1118 = extractvalue { float, float, float, float } %1114, 3, !dbg !36
  %1119 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1040, float %1041, float %1042, float %1043, i32 %667, i32 %668, i32 %669, i32 %670, i32 %860, i32 %861) #1, !dbg !36
  %1120 = extractvalue { float, float, float, float } %1119, 0, !dbg !36
  %1121 = extractvalue { float, float, float, float } %1119, 1, !dbg !36
  %1122 = extractvalue { float, float, float, float } %1119, 2, !dbg !36
  %1123 = extractvalue { float, float, float, float } %1119, 3, !dbg !36
  %1124 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1045, float %1046, float %1047, float %1048, i32 %667, i32 %668, i32 %669, i32 %670, i32 %888, i32 %889) #1, !dbg !36
  %1125 = extractvalue { float, float, float, float } %1124, 0, !dbg !36
  %1126 = extractvalue { float, float, float, float } %1124, 1, !dbg !36
  %1127 = extractvalue { float, float, float, float } %1124, 2, !dbg !36
  %1128 = extractvalue { float, float, float, float } %1124, 3, !dbg !36
  %1129 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1050, float %1051, float %1052, float %1053, i32 %667, i32 %668, i32 %669, i32 %670, i32 %916, i32 %917) #1, !dbg !36
  %1130 = extractvalue { float, float, float, float } %1129, 0, !dbg !36
  %1131 = extractvalue { float, float, float, float } %1129, 1, !dbg !36
  %1132 = extractvalue { float, float, float, float } %1129, 2, !dbg !36
  %1133 = extractvalue { float, float, float, float } %1129, 3, !dbg !36
  %1134 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1055, float %1056, float %1057, float %1058, i32 %723, i32 %724, i32 %725, i32 %726, i32 %830, i32 %831) #1, !dbg !36
  %1135 = extractvalue { float, float, float, float } %1134, 0, !dbg !36
  %1136 = extractvalue { float, float, float, float } %1134, 1, !dbg !36
  %1137 = extractvalue { float, float, float, float } %1134, 2, !dbg !36
  %1138 = extractvalue { float, float, float, float } %1134, 3, !dbg !36
  %1139 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1060, float %1061, float %1062, float %1063, i32 %723, i32 %724, i32 %725, i32 %726, i32 %860, i32 %861) #1, !dbg !36
  %1140 = extractvalue { float, float, float, float } %1139, 0, !dbg !36
  %1141 = extractvalue { float, float, float, float } %1139, 1, !dbg !36
  %1142 = extractvalue { float, float, float, float } %1139, 2, !dbg !36
  %1143 = extractvalue { float, float, float, float } %1139, 3, !dbg !36
  %1144 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1065, float %1066, float %1067, float %1068, i32 %723, i32 %724, i32 %725, i32 %726, i32 %888, i32 %889) #1, !dbg !36
  %1145 = extractvalue { float, float, float, float } %1144, 0, !dbg !36
  %1146 = extractvalue { float, float, float, float } %1144, 1, !dbg !36
  %1147 = extractvalue { float, float, float, float } %1144, 2, !dbg !36
  %1148 = extractvalue { float, float, float, float } %1144, 3, !dbg !36
  %1149 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1070, float %1071, float %1072, float %1073, i32 %723, i32 %724, i32 %725, i32 %726, i32 %916, i32 %917) #1, !dbg !36
  %1150 = extractvalue { float, float, float, float } %1149, 0, !dbg !36
  %1151 = extractvalue { float, float, float, float } %1149, 1, !dbg !36
  %1152 = extractvalue { float, float, float, float } %1149, 2, !dbg !36
  %1153 = extractvalue { float, float, float, float } %1149, 3, !dbg !36
  %1154 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1075, float %1076, float %1077, float %1078, i32 %779, i32 %780, i32 %781, i32 %782, i32 %830, i32 %831) #1, !dbg !36
  %1155 = extractvalue { float, float, float, float } %1154, 0, !dbg !36
  %1156 = extractvalue { float, float, float, float } %1154, 1, !dbg !36
  %1157 = extractvalue { float, float, float, float } %1154, 2, !dbg !36
  %1158 = extractvalue { float, float, float, float } %1154, 3, !dbg !36
  %1159 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1080, float %1081, float %1082, float %1083, i32 %779, i32 %780, i32 %781, i32 %782, i32 %860, i32 %861) #1, !dbg !36
  %1160 = extractvalue { float, float, float, float } %1159, 0, !dbg !36
  %1161 = extractvalue { float, float, float, float } %1159, 1, !dbg !36
  %1162 = extractvalue { float, float, float, float } %1159, 2, !dbg !36
  %1163 = extractvalue { float, float, float, float } %1159, 3, !dbg !36
  %1164 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1085, float %1086, float %1087, float %1088, i32 %779, i32 %780, i32 %781, i32 %782, i32 %888, i32 %889) #1, !dbg !36
  %1165 = extractvalue { float, float, float, float } %1164, 0, !dbg !36
  %1166 = extractvalue { float, float, float, float } %1164, 1, !dbg !36
  %1167 = extractvalue { float, float, float, float } %1164, 2, !dbg !36
  %1168 = extractvalue { float, float, float, float } %1164, 3, !dbg !36
  %1169 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1090, float %1091, float %1092, float %1093, i32 %779, i32 %780, i32 %781, i32 %782, i32 %916, i32 %917) #1, !dbg !36
  %1170 = extractvalue { float, float, float, float } %1169, 0, !dbg !36
  %1171 = extractvalue { float, float, float, float } %1169, 1, !dbg !36
  %1172 = extractvalue { float, float, float, float } %1169, 2, !dbg !36
  %1173 = extractvalue { float, float, float, float } %1169, 3, !dbg !36
  %1174 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1095, float %1096, float %1097, float %1098, i32 %618, i32 %619, i32 %620, i32 %621, i32 %832, i32 %833) #1, !dbg !36
  %1175 = extractvalue { float, float, float, float } %1174, 0, !dbg !36
  %1176 = extractvalue { float, float, float, float } %1174, 1, !dbg !36
  %1177 = extractvalue { float, float, float, float } %1174, 2, !dbg !36
  %1178 = extractvalue { float, float, float, float } %1174, 3, !dbg !36
  %1179 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1100, float %1101, float %1102, float %1103, i32 %618, i32 %619, i32 %620, i32 %621, i32 %862, i32 %863) #1, !dbg !36
  %1180 = extractvalue { float, float, float, float } %1179, 0, !dbg !36
  %1181 = extractvalue { float, float, float, float } %1179, 1, !dbg !36
  %1182 = extractvalue { float, float, float, float } %1179, 2, !dbg !36
  %1183 = extractvalue { float, float, float, float } %1179, 3, !dbg !36
  %1184 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1105, float %1106, float %1107, float %1108, i32 %618, i32 %619, i32 %620, i32 %621, i32 %890, i32 %891) #1, !dbg !36
  %1185 = extractvalue { float, float, float, float } %1184, 0, !dbg !36
  %1186 = extractvalue { float, float, float, float } %1184, 1, !dbg !36
  %1187 = extractvalue { float, float, float, float } %1184, 2, !dbg !36
  %1188 = extractvalue { float, float, float, float } %1184, 3, !dbg !36
  %1189 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1110, float %1111, float %1112, float %1113, i32 %618, i32 %619, i32 %620, i32 %621, i32 %918, i32 %919) #1, !dbg !36
  %1190 = extractvalue { float, float, float, float } %1189, 0, !dbg !36
  %1191 = extractvalue { float, float, float, float } %1189, 1, !dbg !36
  %1192 = extractvalue { float, float, float, float } %1189, 2, !dbg !36
  %1193 = extractvalue { float, float, float, float } %1189, 3, !dbg !36
  %1194 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1115, float %1116, float %1117, float %1118, i32 %674, i32 %675, i32 %676, i32 %677, i32 %832, i32 %833) #1, !dbg !36
  %1195 = extractvalue { float, float, float, float } %1194, 0, !dbg !36
  %1196 = extractvalue { float, float, float, float } %1194, 1, !dbg !36
  %1197 = extractvalue { float, float, float, float } %1194, 2, !dbg !36
  %1198 = extractvalue { float, float, float, float } %1194, 3, !dbg !36
  %1199 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1120, float %1121, float %1122, float %1123, i32 %674, i32 %675, i32 %676, i32 %677, i32 %862, i32 %863) #1, !dbg !36
  %1200 = extractvalue { float, float, float, float } %1199, 0, !dbg !36
  %1201 = extractvalue { float, float, float, float } %1199, 1, !dbg !36
  %1202 = extractvalue { float, float, float, float } %1199, 2, !dbg !36
  %1203 = extractvalue { float, float, float, float } %1199, 3, !dbg !36
  %1204 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1125, float %1126, float %1127, float %1128, i32 %674, i32 %675, i32 %676, i32 %677, i32 %890, i32 %891) #1, !dbg !36
  %1205 = extractvalue { float, float, float, float } %1204, 0, !dbg !36
  %1206 = extractvalue { float, float, float, float } %1204, 1, !dbg !36
  %1207 = extractvalue { float, float, float, float } %1204, 2, !dbg !36
  %1208 = extractvalue { float, float, float, float } %1204, 3, !dbg !36
  %1209 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1130, float %1131, float %1132, float %1133, i32 %674, i32 %675, i32 %676, i32 %677, i32 %918, i32 %919) #1, !dbg !36
  %1210 = extractvalue { float, float, float, float } %1209, 0, !dbg !36
  %1211 = extractvalue { float, float, float, float } %1209, 1, !dbg !36
  %1212 = extractvalue { float, float, float, float } %1209, 2, !dbg !36
  %1213 = extractvalue { float, float, float, float } %1209, 3, !dbg !36
  %1214 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1135, float %1136, float %1137, float %1138, i32 %730, i32 %731, i32 %732, i32 %733, i32 %832, i32 %833) #1, !dbg !36
  %1215 = extractvalue { float, float, float, float } %1214, 0, !dbg !36
  %1216 = extractvalue { float, float, float, float } %1214, 1, !dbg !36
  %1217 = extractvalue { float, float, float, float } %1214, 2, !dbg !36
  %1218 = extractvalue { float, float, float, float } %1214, 3, !dbg !36
  %1219 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1140, float %1141, float %1142, float %1143, i32 %730, i32 %731, i32 %732, i32 %733, i32 %862, i32 %863) #1, !dbg !36
  %1220 = extractvalue { float, float, float, float } %1219, 0, !dbg !36
  %1221 = extractvalue { float, float, float, float } %1219, 1, !dbg !36
  %1222 = extractvalue { float, float, float, float } %1219, 2, !dbg !36
  %1223 = extractvalue { float, float, float, float } %1219, 3, !dbg !36
  %1224 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1145, float %1146, float %1147, float %1148, i32 %730, i32 %731, i32 %732, i32 %733, i32 %890, i32 %891) #1, !dbg !36
  %1225 = extractvalue { float, float, float, float } %1224, 0, !dbg !36
  %1226 = extractvalue { float, float, float, float } %1224, 1, !dbg !36
  %1227 = extractvalue { float, float, float, float } %1224, 2, !dbg !36
  %1228 = extractvalue { float, float, float, float } %1224, 3, !dbg !36
  %1229 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1150, float %1151, float %1152, float %1153, i32 %730, i32 %731, i32 %732, i32 %733, i32 %918, i32 %919) #1, !dbg !36
  %1230 = extractvalue { float, float, float, float } %1229, 0, !dbg !36
  %1231 = extractvalue { float, float, float, float } %1229, 1, !dbg !36
  %1232 = extractvalue { float, float, float, float } %1229, 2, !dbg !36
  %1233 = extractvalue { float, float, float, float } %1229, 3, !dbg !36
  %1234 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1155, float %1156, float %1157, float %1158, i32 %786, i32 %787, i32 %788, i32 %789, i32 %832, i32 %833) #1, !dbg !36
  %1235 = extractvalue { float, float, float, float } %1234, 0, !dbg !36
  %1236 = extractvalue { float, float, float, float } %1234, 1, !dbg !36
  %1237 = extractvalue { float, float, float, float } %1234, 2, !dbg !36
  %1238 = extractvalue { float, float, float, float } %1234, 3, !dbg !36
  %1239 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1160, float %1161, float %1162, float %1163, i32 %786, i32 %787, i32 %788, i32 %789, i32 %862, i32 %863) #1, !dbg !36
  %1240 = extractvalue { float, float, float, float } %1239, 0, !dbg !36
  %1241 = extractvalue { float, float, float, float } %1239, 1, !dbg !36
  %1242 = extractvalue { float, float, float, float } %1239, 2, !dbg !36
  %1243 = extractvalue { float, float, float, float } %1239, 3, !dbg !36
  %1244 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1165, float %1166, float %1167, float %1168, i32 %786, i32 %787, i32 %788, i32 %789, i32 %890, i32 %891) #1, !dbg !36
  %1245 = extractvalue { float, float, float, float } %1244, 0, !dbg !36
  %1246 = extractvalue { float, float, float, float } %1244, 1, !dbg !36
  %1247 = extractvalue { float, float, float, float } %1244, 2, !dbg !36
  %1248 = extractvalue { float, float, float, float } %1244, 3, !dbg !36
  %1249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1170, float %1171, float %1172, float %1173, i32 %786, i32 %787, i32 %788, i32 %789, i32 %918, i32 %919) #1, !dbg !36
  %1250 = extractvalue { float, float, float, float } %1249, 0, !dbg !36
  %1251 = extractvalue { float, float, float, float } %1249, 1, !dbg !36
  %1252 = extractvalue { float, float, float, float } %1249, 2, !dbg !36
  %1253 = extractvalue { float, float, float, float } %1249, 3, !dbg !36
  %1254 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1175, float %1176, float %1177, float %1178, i32 %625, i32 %626, i32 %627, i32 %628, i32 %838, i32 %839) #1, !dbg !36
  %1255 = extractvalue { float, float, float, float } %1254, 0, !dbg !36
  %1256 = extractvalue { float, float, float, float } %1254, 1, !dbg !36
  %1257 = extractvalue { float, float, float, float } %1254, 2, !dbg !36
  %1258 = extractvalue { float, float, float, float } %1254, 3, !dbg !36
  %1259 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1180, float %1181, float %1182, float %1183, i32 %625, i32 %626, i32 %627, i32 %628, i32 %867, i32 %868) #1, !dbg !36
  %1260 = extractvalue { float, float, float, float } %1259, 0, !dbg !36
  %1261 = extractvalue { float, float, float, float } %1259, 1, !dbg !36
  %1262 = extractvalue { float, float, float, float } %1259, 2, !dbg !36
  %1263 = extractvalue { float, float, float, float } %1259, 3, !dbg !36
  %1264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1185, float %1186, float %1187, float %1188, i32 %625, i32 %626, i32 %627, i32 %628, i32 %895, i32 %896) #1, !dbg !36
  %1265 = extractvalue { float, float, float, float } %1264, 0, !dbg !36
  %1266 = extractvalue { float, float, float, float } %1264, 1, !dbg !36
  %1267 = extractvalue { float, float, float, float } %1264, 2, !dbg !36
  %1268 = extractvalue { float, float, float, float } %1264, 3, !dbg !36
  %1269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1190, float %1191, float %1192, float %1193, i32 %625, i32 %626, i32 %627, i32 %628, i32 %923, i32 %924) #1, !dbg !36
  %1270 = extractvalue { float, float, float, float } %1269, 0, !dbg !36
  %1271 = extractvalue { float, float, float, float } %1269, 1, !dbg !36
  %1272 = extractvalue { float, float, float, float } %1269, 2, !dbg !36
  %1273 = extractvalue { float, float, float, float } %1269, 3, !dbg !36
  %1274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1195, float %1196, float %1197, float %1198, i32 %681, i32 %682, i32 %683, i32 %684, i32 %838, i32 %839) #1, !dbg !36
  %1275 = extractvalue { float, float, float, float } %1274, 0, !dbg !36
  %1276 = extractvalue { float, float, float, float } %1274, 1, !dbg !36
  %1277 = extractvalue { float, float, float, float } %1274, 2, !dbg !36
  %1278 = extractvalue { float, float, float, float } %1274, 3, !dbg !36
  %1279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1200, float %1201, float %1202, float %1203, i32 %681, i32 %682, i32 %683, i32 %684, i32 %867, i32 %868) #1, !dbg !36
  %1280 = extractvalue { float, float, float, float } %1279, 0, !dbg !36
  %1281 = extractvalue { float, float, float, float } %1279, 1, !dbg !36
  %1282 = extractvalue { float, float, float, float } %1279, 2, !dbg !36
  %1283 = extractvalue { float, float, float, float } %1279, 3, !dbg !36
  %1284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1205, float %1206, float %1207, float %1208, i32 %681, i32 %682, i32 %683, i32 %684, i32 %895, i32 %896) #1, !dbg !36
  %1285 = extractvalue { float, float, float, float } %1284, 0, !dbg !36
  %1286 = extractvalue { float, float, float, float } %1284, 1, !dbg !36
  %1287 = extractvalue { float, float, float, float } %1284, 2, !dbg !36
  %1288 = extractvalue { float, float, float, float } %1284, 3, !dbg !36
  %1289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1210, float %1211, float %1212, float %1213, i32 %681, i32 %682, i32 %683, i32 %684, i32 %923, i32 %924) #1, !dbg !36
  %1290 = extractvalue { float, float, float, float } %1289, 0, !dbg !36
  %1291 = extractvalue { float, float, float, float } %1289, 1, !dbg !36
  %1292 = extractvalue { float, float, float, float } %1289, 2, !dbg !36
  %1293 = extractvalue { float, float, float, float } %1289, 3, !dbg !36
  %1294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1215, float %1216, float %1217, float %1218, i32 %737, i32 %738, i32 %739, i32 %740, i32 %838, i32 %839) #1, !dbg !36
  %1295 = extractvalue { float, float, float, float } %1294, 0, !dbg !36
  %1296 = extractvalue { float, float, float, float } %1294, 1, !dbg !36
  %1297 = extractvalue { float, float, float, float } %1294, 2, !dbg !36
  %1298 = extractvalue { float, float, float, float } %1294, 3, !dbg !36
  %1299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1220, float %1221, float %1222, float %1223, i32 %737, i32 %738, i32 %739, i32 %740, i32 %867, i32 %868) #1, !dbg !36
  %1300 = extractvalue { float, float, float, float } %1299, 0, !dbg !36
  %1301 = extractvalue { float, float, float, float } %1299, 1, !dbg !36
  %1302 = extractvalue { float, float, float, float } %1299, 2, !dbg !36
  %1303 = extractvalue { float, float, float, float } %1299, 3, !dbg !36
  %1304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1225, float %1226, float %1227, float %1228, i32 %737, i32 %738, i32 %739, i32 %740, i32 %895, i32 %896) #1, !dbg !36
  %1305 = extractvalue { float, float, float, float } %1304, 0, !dbg !36
  %1306 = extractvalue { float, float, float, float } %1304, 1, !dbg !36
  %1307 = extractvalue { float, float, float, float } %1304, 2, !dbg !36
  %1308 = extractvalue { float, float, float, float } %1304, 3, !dbg !36
  %1309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1230, float %1231, float %1232, float %1233, i32 %737, i32 %738, i32 %739, i32 %740, i32 %923, i32 %924) #1, !dbg !36
  %1310 = extractvalue { float, float, float, float } %1309, 0, !dbg !36
  %1311 = extractvalue { float, float, float, float } %1309, 1, !dbg !36
  %1312 = extractvalue { float, float, float, float } %1309, 2, !dbg !36
  %1313 = extractvalue { float, float, float, float } %1309, 3, !dbg !36
  %1314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1235, float %1236, float %1237, float %1238, i32 %793, i32 %794, i32 %795, i32 %796, i32 %838, i32 %839) #1, !dbg !36
  %1315 = extractvalue { float, float, float, float } %1314, 0, !dbg !36
  %1316 = extractvalue { float, float, float, float } %1314, 1, !dbg !36
  %1317 = extractvalue { float, float, float, float } %1314, 2, !dbg !36
  %1318 = extractvalue { float, float, float, float } %1314, 3, !dbg !36
  %1319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1240, float %1241, float %1242, float %1243, i32 %793, i32 %794, i32 %795, i32 %796, i32 %867, i32 %868) #1, !dbg !36
  %1320 = extractvalue { float, float, float, float } %1319, 0, !dbg !36
  %1321 = extractvalue { float, float, float, float } %1319, 1, !dbg !36
  %1322 = extractvalue { float, float, float, float } %1319, 2, !dbg !36
  %1323 = extractvalue { float, float, float, float } %1319, 3, !dbg !36
  %1324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1245, float %1246, float %1247, float %1248, i32 %793, i32 %794, i32 %795, i32 %796, i32 %895, i32 %896) #1, !dbg !36
  %1325 = extractvalue { float, float, float, float } %1324, 0, !dbg !36
  %1326 = extractvalue { float, float, float, float } %1324, 1, !dbg !36
  %1327 = extractvalue { float, float, float, float } %1324, 2, !dbg !36
  %1328 = extractvalue { float, float, float, float } %1324, 3, !dbg !36
  %1329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1250, float %1251, float %1252, float %1253, i32 %793, i32 %794, i32 %795, i32 %796, i32 %923, i32 %924) #1, !dbg !36
  %1330 = extractvalue { float, float, float, float } %1329, 0, !dbg !36
  %1331 = extractvalue { float, float, float, float } %1329, 1, !dbg !36
  %1332 = extractvalue { float, float, float, float } %1329, 2, !dbg !36
  %1333 = extractvalue { float, float, float, float } %1329, 3, !dbg !36
  %1334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1255, float %1256, float %1257, float %1258, i32 %632, i32 %633, i32 %634, i32 %635, i32 %840, i32 %841) #1, !dbg !36
  %1335 = extractvalue { float, float, float, float } %1334, 0, !dbg !36
  %1336 = extractvalue { float, float, float, float } %1334, 1, !dbg !36
  %1337 = extractvalue { float, float, float, float } %1334, 2, !dbg !36
  %1338 = extractvalue { float, float, float, float } %1334, 3, !dbg !36
  %1339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1260, float %1261, float %1262, float %1263, i32 %632, i32 %633, i32 %634, i32 %635, i32 %869, i32 %870) #1, !dbg !36
  %1340 = extractvalue { float, float, float, float } %1339, 0, !dbg !36
  %1341 = extractvalue { float, float, float, float } %1339, 1, !dbg !36
  %1342 = extractvalue { float, float, float, float } %1339, 2, !dbg !36
  %1343 = extractvalue { float, float, float, float } %1339, 3, !dbg !36
  %1344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1265, float %1266, float %1267, float %1268, i32 %632, i32 %633, i32 %634, i32 %635, i32 %897, i32 %898) #1, !dbg !36
  %1345 = extractvalue { float, float, float, float } %1344, 0, !dbg !36
  %1346 = extractvalue { float, float, float, float } %1344, 1, !dbg !36
  %1347 = extractvalue { float, float, float, float } %1344, 2, !dbg !36
  %1348 = extractvalue { float, float, float, float } %1344, 3, !dbg !36
  %1349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1270, float %1271, float %1272, float %1273, i32 %632, i32 %633, i32 %634, i32 %635, i32 %925, i32 %926) #1, !dbg !36
  %1350 = extractvalue { float, float, float, float } %1349, 0, !dbg !36
  %1351 = extractvalue { float, float, float, float } %1349, 1, !dbg !36
  %1352 = extractvalue { float, float, float, float } %1349, 2, !dbg !36
  %1353 = extractvalue { float, float, float, float } %1349, 3, !dbg !36
  %1354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1275, float %1276, float %1277, float %1278, i32 %688, i32 %689, i32 %690, i32 %691, i32 %840, i32 %841) #1, !dbg !36
  %1355 = extractvalue { float, float, float, float } %1354, 0, !dbg !36
  %1356 = extractvalue { float, float, float, float } %1354, 1, !dbg !36
  %1357 = extractvalue { float, float, float, float } %1354, 2, !dbg !36
  %1358 = extractvalue { float, float, float, float } %1354, 3, !dbg !36
  %1359 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1280, float %1281, float %1282, float %1283, i32 %688, i32 %689, i32 %690, i32 %691, i32 %869, i32 %870) #1, !dbg !36
  %1360 = extractvalue { float, float, float, float } %1359, 0, !dbg !36
  %1361 = extractvalue { float, float, float, float } %1359, 1, !dbg !36
  %1362 = extractvalue { float, float, float, float } %1359, 2, !dbg !36
  %1363 = extractvalue { float, float, float, float } %1359, 3, !dbg !36
  %1364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1285, float %1286, float %1287, float %1288, i32 %688, i32 %689, i32 %690, i32 %691, i32 %897, i32 %898) #1, !dbg !36
  %1365 = extractvalue { float, float, float, float } %1364, 0, !dbg !36
  %1366 = extractvalue { float, float, float, float } %1364, 1, !dbg !36
  %1367 = extractvalue { float, float, float, float } %1364, 2, !dbg !36
  %1368 = extractvalue { float, float, float, float } %1364, 3, !dbg !36
  %1369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1290, float %1291, float %1292, float %1293, i32 %688, i32 %689, i32 %690, i32 %691, i32 %925, i32 %926) #1, !dbg !36
  %1370 = extractvalue { float, float, float, float } %1369, 0, !dbg !36
  %1371 = extractvalue { float, float, float, float } %1369, 1, !dbg !36
  %1372 = extractvalue { float, float, float, float } %1369, 2, !dbg !36
  %1373 = extractvalue { float, float, float, float } %1369, 3, !dbg !36
  %1374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1295, float %1296, float %1297, float %1298, i32 %744, i32 %745, i32 %746, i32 %747, i32 %840, i32 %841) #1, !dbg !36
  %1375 = extractvalue { float, float, float, float } %1374, 0, !dbg !36
  %1376 = extractvalue { float, float, float, float } %1374, 1, !dbg !36
  %1377 = extractvalue { float, float, float, float } %1374, 2, !dbg !36
  %1378 = extractvalue { float, float, float, float } %1374, 3, !dbg !36
  %1379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1300, float %1301, float %1302, float %1303, i32 %744, i32 %745, i32 %746, i32 %747, i32 %869, i32 %870) #1, !dbg !36
  %1380 = extractvalue { float, float, float, float } %1379, 0, !dbg !36
  %1381 = extractvalue { float, float, float, float } %1379, 1, !dbg !36
  %1382 = extractvalue { float, float, float, float } %1379, 2, !dbg !36
  %1383 = extractvalue { float, float, float, float } %1379, 3, !dbg !36
  %1384 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1305, float %1306, float %1307, float %1308, i32 %744, i32 %745, i32 %746, i32 %747, i32 %897, i32 %898) #1, !dbg !36
  %1385 = extractvalue { float, float, float, float } %1384, 0, !dbg !36
  %1386 = extractvalue { float, float, float, float } %1384, 1, !dbg !36
  %1387 = extractvalue { float, float, float, float } %1384, 2, !dbg !36
  %1388 = extractvalue { float, float, float, float } %1384, 3, !dbg !36
  %1389 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1310, float %1311, float %1312, float %1313, i32 %744, i32 %745, i32 %746, i32 %747, i32 %925, i32 %926) #1, !dbg !36
  %1390 = extractvalue { float, float, float, float } %1389, 0, !dbg !36
  %1391 = extractvalue { float, float, float, float } %1389, 1, !dbg !36
  %1392 = extractvalue { float, float, float, float } %1389, 2, !dbg !36
  %1393 = extractvalue { float, float, float, float } %1389, 3, !dbg !36
  %1394 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1315, float %1316, float %1317, float %1318, i32 %800, i32 %801, i32 %802, i32 %803, i32 %840, i32 %841) #1, !dbg !36
  %1395 = extractvalue { float, float, float, float } %1394, 0, !dbg !36
  %1396 = extractvalue { float, float, float, float } %1394, 1, !dbg !36
  %1397 = extractvalue { float, float, float, float } %1394, 2, !dbg !36
  %1398 = extractvalue { float, float, float, float } %1394, 3, !dbg !36
  %1399 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1320, float %1321, float %1322, float %1323, i32 %800, i32 %801, i32 %802, i32 %803, i32 %869, i32 %870) #1, !dbg !36
  %1400 = extractvalue { float, float, float, float } %1399, 0, !dbg !36
  %1401 = extractvalue { float, float, float, float } %1399, 1, !dbg !36
  %1402 = extractvalue { float, float, float, float } %1399, 2, !dbg !36
  %1403 = extractvalue { float, float, float, float } %1399, 3, !dbg !36
  %1404 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1325, float %1326, float %1327, float %1328, i32 %800, i32 %801, i32 %802, i32 %803, i32 %897, i32 %898) #1, !dbg !36
  %1405 = extractvalue { float, float, float, float } %1404, 0, !dbg !36
  %1406 = extractvalue { float, float, float, float } %1404, 1, !dbg !36
  %1407 = extractvalue { float, float, float, float } %1404, 2, !dbg !36
  %1408 = extractvalue { float, float, float, float } %1404, 3, !dbg !36
  %1409 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1330, float %1331, float %1332, float %1333, i32 %800, i32 %801, i32 %802, i32 %803, i32 %925, i32 %926) #1, !dbg !36
  %1410 = extractvalue { float, float, float, float } %1409, 0, !dbg !36
  %1411 = extractvalue { float, float, float, float } %1409, 1, !dbg !36
  %1412 = extractvalue { float, float, float, float } %1409, 2, !dbg !36
  %1413 = extractvalue { float, float, float, float } %1409, 3, !dbg !36
  %1414 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1335, float %1336, float %1337, float %1338, i32 %639, i32 %640, i32 %641, i32 %642, i32 %846, i32 %847) #1, !dbg !36
  %1415 = extractvalue { float, float, float, float } %1414, 0, !dbg !36
  %1416 = extractvalue { float, float, float, float } %1414, 1, !dbg !36
  %1417 = extractvalue { float, float, float, float } %1414, 2, !dbg !36
  %1418 = extractvalue { float, float, float, float } %1414, 3, !dbg !36
  %1419 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1340, float %1341, float %1342, float %1343, i32 %639, i32 %640, i32 %641, i32 %642, i32 %874, i32 %875) #1, !dbg !36
  %1420 = extractvalue { float, float, float, float } %1419, 0, !dbg !36
  %1421 = extractvalue { float, float, float, float } %1419, 1, !dbg !36
  %1422 = extractvalue { float, float, float, float } %1419, 2, !dbg !36
  %1423 = extractvalue { float, float, float, float } %1419, 3, !dbg !36
  %1424 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1345, float %1346, float %1347, float %1348, i32 %639, i32 %640, i32 %641, i32 %642, i32 %902, i32 %903) #1, !dbg !36
  %1425 = extractvalue { float, float, float, float } %1424, 0, !dbg !36
  %1426 = extractvalue { float, float, float, float } %1424, 1, !dbg !36
  %1427 = extractvalue { float, float, float, float } %1424, 2, !dbg !36
  %1428 = extractvalue { float, float, float, float } %1424, 3, !dbg !36
  %1429 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1350, float %1351, float %1352, float %1353, i32 %639, i32 %640, i32 %641, i32 %642, i32 %930, i32 %931) #1, !dbg !36
  %1430 = extractvalue { float, float, float, float } %1429, 0, !dbg !36
  %1431 = extractvalue { float, float, float, float } %1429, 1, !dbg !36
  %1432 = extractvalue { float, float, float, float } %1429, 2, !dbg !36
  %1433 = extractvalue { float, float, float, float } %1429, 3, !dbg !36
  %1434 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1355, float %1356, float %1357, float %1358, i32 %695, i32 %696, i32 %697, i32 %698, i32 %846, i32 %847) #1, !dbg !36
  %1435 = extractvalue { float, float, float, float } %1434, 0, !dbg !36
  %1436 = extractvalue { float, float, float, float } %1434, 1, !dbg !36
  %1437 = extractvalue { float, float, float, float } %1434, 2, !dbg !36
  %1438 = extractvalue { float, float, float, float } %1434, 3, !dbg !36
  %1439 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1360, float %1361, float %1362, float %1363, i32 %695, i32 %696, i32 %697, i32 %698, i32 %874, i32 %875) #1, !dbg !36
  %1440 = extractvalue { float, float, float, float } %1439, 0, !dbg !36
  %1441 = extractvalue { float, float, float, float } %1439, 1, !dbg !36
  %1442 = extractvalue { float, float, float, float } %1439, 2, !dbg !36
  %1443 = extractvalue { float, float, float, float } %1439, 3, !dbg !36
  %1444 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1365, float %1366, float %1367, float %1368, i32 %695, i32 %696, i32 %697, i32 %698, i32 %902, i32 %903) #1, !dbg !36
  %1445 = extractvalue { float, float, float, float } %1444, 0, !dbg !36
  %1446 = extractvalue { float, float, float, float } %1444, 1, !dbg !36
  %1447 = extractvalue { float, float, float, float } %1444, 2, !dbg !36
  %1448 = extractvalue { float, float, float, float } %1444, 3, !dbg !36
  %1449 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1370, float %1371, float %1372, float %1373, i32 %695, i32 %696, i32 %697, i32 %698, i32 %930, i32 %931) #1, !dbg !36
  %1450 = extractvalue { float, float, float, float } %1449, 0, !dbg !36
  %1451 = extractvalue { float, float, float, float } %1449, 1, !dbg !36
  %1452 = extractvalue { float, float, float, float } %1449, 2, !dbg !36
  %1453 = extractvalue { float, float, float, float } %1449, 3, !dbg !36
  %1454 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1375, float %1376, float %1377, float %1378, i32 %751, i32 %752, i32 %753, i32 %754, i32 %846, i32 %847) #1, !dbg !36
  %1455 = extractvalue { float, float, float, float } %1454, 0, !dbg !36
  %1456 = extractvalue { float, float, float, float } %1454, 1, !dbg !36
  %1457 = extractvalue { float, float, float, float } %1454, 2, !dbg !36
  %1458 = extractvalue { float, float, float, float } %1454, 3, !dbg !36
  %1459 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1380, float %1381, float %1382, float %1383, i32 %751, i32 %752, i32 %753, i32 %754, i32 %874, i32 %875) #1, !dbg !36
  %1460 = extractvalue { float, float, float, float } %1459, 0, !dbg !36
  %1461 = extractvalue { float, float, float, float } %1459, 1, !dbg !36
  %1462 = extractvalue { float, float, float, float } %1459, 2, !dbg !36
  %1463 = extractvalue { float, float, float, float } %1459, 3, !dbg !36
  %1464 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1385, float %1386, float %1387, float %1388, i32 %751, i32 %752, i32 %753, i32 %754, i32 %902, i32 %903) #1, !dbg !36
  %1465 = extractvalue { float, float, float, float } %1464, 0, !dbg !36
  %1466 = extractvalue { float, float, float, float } %1464, 1, !dbg !36
  %1467 = extractvalue { float, float, float, float } %1464, 2, !dbg !36
  %1468 = extractvalue { float, float, float, float } %1464, 3, !dbg !36
  %1469 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1390, float %1391, float %1392, float %1393, i32 %751, i32 %752, i32 %753, i32 %754, i32 %930, i32 %931) #1, !dbg !36
  %1470 = extractvalue { float, float, float, float } %1469, 0, !dbg !36
  %1471 = extractvalue { float, float, float, float } %1469, 1, !dbg !36
  %1472 = extractvalue { float, float, float, float } %1469, 2, !dbg !36
  %1473 = extractvalue { float, float, float, float } %1469, 3, !dbg !36
  %1474 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1395, float %1396, float %1397, float %1398, i32 %807, i32 %808, i32 %809, i32 %810, i32 %846, i32 %847) #1, !dbg !36
  %1475 = extractvalue { float, float, float, float } %1474, 0, !dbg !36
  %1476 = extractvalue { float, float, float, float } %1474, 1, !dbg !36
  %1477 = extractvalue { float, float, float, float } %1474, 2, !dbg !36
  %1478 = extractvalue { float, float, float, float } %1474, 3, !dbg !36
  %1479 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1400, float %1401, float %1402, float %1403, i32 %807, i32 %808, i32 %809, i32 %810, i32 %874, i32 %875) #1, !dbg !36
  %1480 = extractvalue { float, float, float, float } %1479, 0, !dbg !36
  %1481 = extractvalue { float, float, float, float } %1479, 1, !dbg !36
  %1482 = extractvalue { float, float, float, float } %1479, 2, !dbg !36
  %1483 = extractvalue { float, float, float, float } %1479, 3, !dbg !36
  %1484 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1405, float %1406, float %1407, float %1408, i32 %807, i32 %808, i32 %809, i32 %810, i32 %902, i32 %903) #1, !dbg !36
  %1485 = extractvalue { float, float, float, float } %1484, 0, !dbg !36
  %1486 = extractvalue { float, float, float, float } %1484, 1, !dbg !36
  %1487 = extractvalue { float, float, float, float } %1484, 2, !dbg !36
  %1488 = extractvalue { float, float, float, float } %1484, 3, !dbg !36
  %1489 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1410, float %1411, float %1412, float %1413, i32 %807, i32 %808, i32 %809, i32 %810, i32 %930, i32 %931) #1, !dbg !36
  %1490 = extractvalue { float, float, float, float } %1489, 0, !dbg !36
  %1491 = extractvalue { float, float, float, float } %1489, 1, !dbg !36
  %1492 = extractvalue { float, float, float, float } %1489, 2, !dbg !36
  %1493 = extractvalue { float, float, float, float } %1489, 3, !dbg !36
  %1494 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1415, float %1416, float %1417, float %1418, i32 %646, i32 %647, i32 %648, i32 %649, i32 %848, i32 %849) #1, !dbg !36
  %1495 = extractvalue { float, float, float, float } %1494, 0, !dbg !36
  %1496 = extractvalue { float, float, float, float } %1494, 1, !dbg !36
  %1497 = extractvalue { float, float, float, float } %1494, 2, !dbg !36
  %1498 = extractvalue { float, float, float, float } %1494, 3, !dbg !36
  %1499 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1420, float %1421, float %1422, float %1423, i32 %646, i32 %647, i32 %648, i32 %649, i32 %876, i32 %877) #1, !dbg !36
  %1500 = extractvalue { float, float, float, float } %1499, 0, !dbg !36
  %1501 = extractvalue { float, float, float, float } %1499, 1, !dbg !36
  %1502 = extractvalue { float, float, float, float } %1499, 2, !dbg !36
  %1503 = extractvalue { float, float, float, float } %1499, 3, !dbg !36
  %1504 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1425, float %1426, float %1427, float %1428, i32 %646, i32 %647, i32 %648, i32 %649, i32 %904, i32 %905) #1, !dbg !36
  %1505 = extractvalue { float, float, float, float } %1504, 0, !dbg !36
  %1506 = extractvalue { float, float, float, float } %1504, 1, !dbg !36
  %1507 = extractvalue { float, float, float, float } %1504, 2, !dbg !36
  %1508 = extractvalue { float, float, float, float } %1504, 3, !dbg !36
  %1509 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1430, float %1431, float %1432, float %1433, i32 %646, i32 %647, i32 %648, i32 %649, i32 %932, i32 %933) #1, !dbg !36
  %1510 = extractvalue { float, float, float, float } %1509, 0, !dbg !36
  %1511 = extractvalue { float, float, float, float } %1509, 1, !dbg !36
  %1512 = extractvalue { float, float, float, float } %1509, 2, !dbg !36
  %1513 = extractvalue { float, float, float, float } %1509, 3, !dbg !36
  %1514 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1435, float %1436, float %1437, float %1438, i32 %702, i32 %703, i32 %704, i32 %705, i32 %848, i32 %849) #1, !dbg !36
  %1515 = extractvalue { float, float, float, float } %1514, 0, !dbg !36
  %1516 = extractvalue { float, float, float, float } %1514, 1, !dbg !36
  %1517 = extractvalue { float, float, float, float } %1514, 2, !dbg !36
  %1518 = extractvalue { float, float, float, float } %1514, 3, !dbg !36
  %1519 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1440, float %1441, float %1442, float %1443, i32 %702, i32 %703, i32 %704, i32 %705, i32 %876, i32 %877) #1, !dbg !36
  %1520 = extractvalue { float, float, float, float } %1519, 0, !dbg !36
  %1521 = extractvalue { float, float, float, float } %1519, 1, !dbg !36
  %1522 = extractvalue { float, float, float, float } %1519, 2, !dbg !36
  %1523 = extractvalue { float, float, float, float } %1519, 3, !dbg !36
  %1524 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1445, float %1446, float %1447, float %1448, i32 %702, i32 %703, i32 %704, i32 %705, i32 %904, i32 %905) #1, !dbg !36
  %1525 = extractvalue { float, float, float, float } %1524, 0, !dbg !36
  %1526 = extractvalue { float, float, float, float } %1524, 1, !dbg !36
  %1527 = extractvalue { float, float, float, float } %1524, 2, !dbg !36
  %1528 = extractvalue { float, float, float, float } %1524, 3, !dbg !36
  %1529 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1450, float %1451, float %1452, float %1453, i32 %702, i32 %703, i32 %704, i32 %705, i32 %932, i32 %933) #1, !dbg !36
  %1530 = extractvalue { float, float, float, float } %1529, 0, !dbg !36
  %1531 = extractvalue { float, float, float, float } %1529, 1, !dbg !36
  %1532 = extractvalue { float, float, float, float } %1529, 2, !dbg !36
  %1533 = extractvalue { float, float, float, float } %1529, 3, !dbg !36
  %1534 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1455, float %1456, float %1457, float %1458, i32 %758, i32 %759, i32 %760, i32 %761, i32 %848, i32 %849) #1, !dbg !36
  %1535 = extractvalue { float, float, float, float } %1534, 0, !dbg !36
  %1536 = extractvalue { float, float, float, float } %1534, 1, !dbg !36
  %1537 = extractvalue { float, float, float, float } %1534, 2, !dbg !36
  %1538 = extractvalue { float, float, float, float } %1534, 3, !dbg !36
  %1539 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1460, float %1461, float %1462, float %1463, i32 %758, i32 %759, i32 %760, i32 %761, i32 %876, i32 %877) #1, !dbg !36
  %1540 = extractvalue { float, float, float, float } %1539, 0, !dbg !36
  %1541 = extractvalue { float, float, float, float } %1539, 1, !dbg !36
  %1542 = extractvalue { float, float, float, float } %1539, 2, !dbg !36
  %1543 = extractvalue { float, float, float, float } %1539, 3, !dbg !36
  %1544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1465, float %1466, float %1467, float %1468, i32 %758, i32 %759, i32 %760, i32 %761, i32 %904, i32 %905) #1, !dbg !36
  %1545 = extractvalue { float, float, float, float } %1544, 0, !dbg !36
  %1546 = extractvalue { float, float, float, float } %1544, 1, !dbg !36
  %1547 = extractvalue { float, float, float, float } %1544, 2, !dbg !36
  %1548 = extractvalue { float, float, float, float } %1544, 3, !dbg !36
  %1549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1470, float %1471, float %1472, float %1473, i32 %758, i32 %759, i32 %760, i32 %761, i32 %932, i32 %933) #1, !dbg !36
  %1550 = extractvalue { float, float, float, float } %1549, 0, !dbg !36
  %1551 = extractvalue { float, float, float, float } %1549, 1, !dbg !36
  %1552 = extractvalue { float, float, float, float } %1549, 2, !dbg !36
  %1553 = extractvalue { float, float, float, float } %1549, 3, !dbg !36
  %1554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1475, float %1476, float %1477, float %1478, i32 %814, i32 %815, i32 %816, i32 %817, i32 %848, i32 %849) #1, !dbg !36
  %1555 = extractvalue { float, float, float, float } %1554, 0, !dbg !36
  %1556 = extractvalue { float, float, float, float } %1554, 1, !dbg !36
  %1557 = extractvalue { float, float, float, float } %1554, 2, !dbg !36
  %1558 = extractvalue { float, float, float, float } %1554, 3, !dbg !36
  %1559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1480, float %1481, float %1482, float %1483, i32 %814, i32 %815, i32 %816, i32 %817, i32 %876, i32 %877) #1, !dbg !36
  %1560 = extractvalue { float, float, float, float } %1559, 0, !dbg !36
  %1561 = extractvalue { float, float, float, float } %1559, 1, !dbg !36
  %1562 = extractvalue { float, float, float, float } %1559, 2, !dbg !36
  %1563 = extractvalue { float, float, float, float } %1559, 3, !dbg !36
  %1564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1485, float %1486, float %1487, float %1488, i32 %814, i32 %815, i32 %816, i32 %817, i32 %904, i32 %905) #1, !dbg !36
  %1565 = extractvalue { float, float, float, float } %1564, 0, !dbg !36
  %1566 = extractvalue { float, float, float, float } %1564, 1, !dbg !36
  %1567 = extractvalue { float, float, float, float } %1564, 2, !dbg !36
  %1568 = extractvalue { float, float, float, float } %1564, 3, !dbg !36
  %1569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1490, float %1491, float %1492, float %1493, i32 %814, i32 %815, i32 %816, i32 %817, i32 %932, i32 %933) #1, !dbg !36
  %1570 = extractvalue { float, float, float, float } %1569, 0, !dbg !36
  %1571 = extractvalue { float, float, float, float } %1569, 1, !dbg !36
  %1572 = extractvalue { float, float, float, float } %1569, 2, !dbg !36
  %1573 = extractvalue { float, float, float, float } %1569, 3, !dbg !36
  %1574 = add i32 %524, 1, !dbg !35
  %1575 = icmp slt i32 %1574, 3, !dbg !35
  %1576 = select i1 %1575, i32 %1574, i32 0, !dbg !35
  %1577 = shl nuw nsw i64 %indvars.iv, 7, !dbg !37
  %1578 = add nuw nsw i64 %1577, %497
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %1578, !dbg !29
  %gep300 = getelementptr bfloat, ptr addrspace(1) %invariant.gep299, i64 %1578, !dbg !29
  %gep302 = getelementptr bfloat, ptr addrspace(1) %invariant.gep301, i64 %1578, !dbg !29
  %gep304 = getelementptr bfloat, ptr addrspace(1) %invariant.gep303, i64 %1578, !dbg !29
  %gep306 = getelementptr bfloat, ptr addrspace(1) %invariant.gep305, i64 %1578, !dbg !29
  %gep308 = getelementptr bfloat, ptr addrspace(1) %invariant.gep307, i64 %1578, !dbg !29
  %gep310 = getelementptr bfloat, ptr addrspace(1) %invariant.gep309, i64 %1578, !dbg !29
  %gep312 = getelementptr bfloat, ptr addrspace(1) %invariant.gep311, i64 %1578, !dbg !29
  %.idx96 = shl i32 %1576, 14, !dbg !30
  %1579 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %.idx96, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %1580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %137, !dbg !30
  %1581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %139, !dbg !30
  %1582 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %141, !dbg !30
  %1583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %143, !dbg !30
  %1584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %145, !dbg !30
  %1585 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %147, !dbg !30
  %1586 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %149, !dbg !30
  %1587 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1579, i32 %151, !dbg !30
  %1588 = select i1 %589, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1580, ptr addrspace(1) %gep, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1581, ptr addrspace(1) %gep300, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1582, ptr addrspace(1) %gep302, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1583, ptr addrspace(1) %gep304, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1584, ptr addrspace(1) %gep306, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1585, ptr addrspace(1) %gep308, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1586, ptr addrspace(1) %gep310, i32 %1588) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1587, ptr addrspace(1) %gep312, i32 %1588) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep314 = getelementptr bfloat, ptr addrspace(1) %invariant.gep313, i64 %1578, !dbg !32
  %gep316 = getelementptr bfloat, ptr addrspace(1) %invariant.gep315, i64 %1578, !dbg !32
  %gep318 = getelementptr bfloat, ptr addrspace(1) %invariant.gep317, i64 %1578, !dbg !32
  %gep320 = getelementptr bfloat, ptr addrspace(1) %invariant.gep319, i64 %1578, !dbg !32
  %gep322 = getelementptr bfloat, ptr addrspace(1) %invariant.gep321, i64 %1578, !dbg !32
  %gep324 = getelementptr bfloat, ptr addrspace(1) %invariant.gep323, i64 %1578, !dbg !32
  %gep326 = getelementptr bfloat, ptr addrspace(1) %invariant.gep325, i64 %1578, !dbg !32
  %gep328 = getelementptr bfloat, ptr addrspace(1) %invariant.gep327, i64 %1578, !dbg !32
  %gep330 = getelementptr bfloat, ptr addrspace(1) %invariant.gep329, i64 %1578, !dbg !32
  %gep332 = getelementptr bfloat, ptr addrspace(1) %invariant.gep331, i64 %1578, !dbg !32
  %gep334 = getelementptr bfloat, ptr addrspace(1) %invariant.gep333, i64 %1578, !dbg !32
  %gep336 = getelementptr bfloat, ptr addrspace(1) %invariant.gep335, i64 %1578, !dbg !32
  %gep338 = getelementptr bfloat, ptr addrspace(1) %invariant.gep337, i64 %1578, !dbg !32
  %gep340 = getelementptr bfloat, ptr addrspace(1) %invariant.gep339, i64 %1578, !dbg !32
  %gep342 = getelementptr bfloat, ptr addrspace(1) %invariant.gep341, i64 %1578, !dbg !32
  %gep344 = getelementptr bfloat, ptr addrspace(1) %invariant.gep343, i64 %1578, !dbg !32
  %.idx97 = shl i32 %1576, 15, !dbg !33
  %1589 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx97, !dbg !33
  %1590 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %137, !dbg !33
  %1591 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %139, !dbg !33
  %1592 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %141, !dbg !33
  %1593 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %143, !dbg !33
  %1594 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %145, !dbg !33
  %1595 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %147, !dbg !33
  %1596 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %149, !dbg !33
  %1597 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %151, !dbg !33
  %1598 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %209, !dbg !33
  %1599 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %211, !dbg !33
  %1600 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %213, !dbg !33
  %1601 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %215, !dbg !33
  %1602 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %217, !dbg !33
  %1603 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %219, !dbg !33
  %1604 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %221, !dbg !33
  %1605 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1589, i32 %223, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1590, ptr addrspace(1) %gep314, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1591, ptr addrspace(1) %gep316, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1592, ptr addrspace(1) %gep318, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1593, ptr addrspace(1) %gep320, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1594, ptr addrspace(1) %gep322, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1595, ptr addrspace(1) %gep324, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1596, ptr addrspace(1) %gep326, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1597, ptr addrspace(1) %gep328, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1598, ptr addrspace(1) %gep330, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1599, ptr addrspace(1) %gep332, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1600, ptr addrspace(1) %gep334, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1601, ptr addrspace(1) %gep336, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1602, ptr addrspace(1) %gep338, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1603, ptr addrspace(1) %gep340, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1604, ptr addrspace(1) %gep342, i32 %1588) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1605, ptr addrspace(1) %gep344, i32 %1588) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 32, !dbg !35
  br i1 %exitcond.not, label %1606, label %522, !dbg !35

1606:                                             ; preds = %522
  %1607 = or disjoint i32 %34, %43, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %1608 = icmp slt i32 %26, 512, !dbg !38
  %1609 = icmp slt i32 %27, 512, !dbg !38
  %1610 = icmp slt i32 %28, 512, !dbg !38
  %1611 = icmp slt i32 %29, 512, !dbg !38
  %1612 = icmp slt i32 %30, 512, !dbg !38
  %1613 = icmp slt i32 %31, 512, !dbg !38
  %1614 = icmp slt i32 %32, 512, !dbg !38
  %1615 = icmp slt i32 %33, 512, !dbg !38
  %1616 = icmp slt i32 %1607, 10240, !dbg !39
  %1617 = and i1 %1608, %1616, !dbg !40
  %1618 = and i1 %1609, %1616, !dbg !40
  %1619 = and i1 %1610, %1616, !dbg !40
  %1620 = and i1 %1611, %1616, !dbg !40
  %1621 = and i1 %1612, %1616, !dbg !40
  %1622 = and i1 %1613, %1616, !dbg !40
  %1623 = and i1 %1614, %1616, !dbg !40
  %1624 = and i1 %1615, %1616, !dbg !40
  %1625 = mul i32 %26, 10240, !dbg !41
  %1626 = mul i32 %27, 10240, !dbg !41
  %1627 = mul i32 %28, 10240, !dbg !41
  %1628 = mul i32 %29, 10240, !dbg !41
  %1629 = mul i32 %30, 10240, !dbg !41
  %1630 = mul i32 %31, 10240, !dbg !41
  %1631 = mul i32 %32, 10240, !dbg !41
  %1632 = mul i32 %33, 10240, !dbg !41
  %1633 = add i32 %1625, %1607, !dbg !42
  %1634 = add i32 %1626, %1607, !dbg !42
  %1635 = add i32 %1627, %1607, !dbg !42
  %1636 = add i32 %1628, %1607, !dbg !42
  %1637 = add i32 %1629, %1607, !dbg !42
  %1638 = add i32 %1630, %1607, !dbg !42
  %1639 = add i32 %1631, %1607, !dbg !42
  %1640 = add i32 %1632, %1607, !dbg !42
  %1641 = sext i32 %1633 to i64, !dbg !43
  %1642 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1641, !dbg !43
  %1643 = sext i32 %1634 to i64, !dbg !43
  %1644 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1643, !dbg !43
  %1645 = sext i32 %1635 to i64, !dbg !43
  %1646 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1645, !dbg !43
  %1647 = sext i32 %1636 to i64, !dbg !43
  %1648 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1647, !dbg !43
  %1649 = sext i32 %1637 to i64, !dbg !43
  %1650 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1649, !dbg !43
  %1651 = sext i32 %1638 to i64, !dbg !43
  %1652 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1651, !dbg !43
  %1653 = sext i32 %1639 to i64, !dbg !43
  %1654 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1653, !dbg !43
  %1655 = sext i32 %1640 to i64, !dbg !43
  %1656 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1655, !dbg !43
  %1657 = fptrunc float %1495 to bfloat, !dbg !44
  %1658 = fptrunc float %1496 to bfloat, !dbg !44
  %1659 = fptrunc float %1497 to bfloat, !dbg !44
  %1660 = fptrunc float %1498 to bfloat, !dbg !44
  %1661 = fptrunc float %1500 to bfloat, !dbg !44
  %1662 = fptrunc float %1501 to bfloat, !dbg !44
  %1663 = fptrunc float %1502 to bfloat, !dbg !44
  %1664 = fptrunc float %1503 to bfloat, !dbg !44
  %1665 = fptrunc float %1505 to bfloat, !dbg !44
  %1666 = fptrunc float %1506 to bfloat, !dbg !44
  %1667 = fptrunc float %1507 to bfloat, !dbg !44
  %1668 = fptrunc float %1508 to bfloat, !dbg !44
  %1669 = fptrunc float %1510 to bfloat, !dbg !44
  %1670 = fptrunc float %1511 to bfloat, !dbg !44
  %1671 = fptrunc float %1512 to bfloat, !dbg !44
  %1672 = fptrunc float %1513 to bfloat, !dbg !44
  %1673 = fptrunc float %1515 to bfloat, !dbg !44
  %1674 = fptrunc float %1516 to bfloat, !dbg !44
  %1675 = fptrunc float %1517 to bfloat, !dbg !44
  %1676 = fptrunc float %1518 to bfloat, !dbg !44
  %1677 = fptrunc float %1520 to bfloat, !dbg !44
  %1678 = fptrunc float %1521 to bfloat, !dbg !44
  %1679 = fptrunc float %1522 to bfloat, !dbg !44
  %1680 = fptrunc float %1523 to bfloat, !dbg !44
  %1681 = fptrunc float %1525 to bfloat, !dbg !44
  %1682 = fptrunc float %1526 to bfloat, !dbg !44
  %1683 = fptrunc float %1527 to bfloat, !dbg !44
  %1684 = fptrunc float %1528 to bfloat, !dbg !44
  %1685 = fptrunc float %1530 to bfloat, !dbg !44
  %1686 = fptrunc float %1531 to bfloat, !dbg !44
  %1687 = fptrunc float %1532 to bfloat, !dbg !44
  %1688 = fptrunc float %1533 to bfloat, !dbg !44
  %1689 = fptrunc float %1535 to bfloat, !dbg !44
  %1690 = fptrunc float %1536 to bfloat, !dbg !44
  %1691 = fptrunc float %1537 to bfloat, !dbg !44
  %1692 = fptrunc float %1538 to bfloat, !dbg !44
  %1693 = fptrunc float %1540 to bfloat, !dbg !44
  %1694 = fptrunc float %1541 to bfloat, !dbg !44
  %1695 = fptrunc float %1542 to bfloat, !dbg !44
  %1696 = fptrunc float %1543 to bfloat, !dbg !44
  %1697 = fptrunc float %1545 to bfloat, !dbg !44
  %1698 = fptrunc float %1546 to bfloat, !dbg !44
  %1699 = fptrunc float %1547 to bfloat, !dbg !44
  %1700 = fptrunc float %1548 to bfloat, !dbg !44
  %1701 = fptrunc float %1550 to bfloat, !dbg !44
  %1702 = fptrunc float %1551 to bfloat, !dbg !44
  %1703 = fptrunc float %1552 to bfloat, !dbg !44
  %1704 = fptrunc float %1553 to bfloat, !dbg !44
  %1705 = fptrunc float %1555 to bfloat, !dbg !44
  %1706 = fptrunc float %1556 to bfloat, !dbg !44
  %1707 = fptrunc float %1557 to bfloat, !dbg !44
  %1708 = fptrunc float %1558 to bfloat, !dbg !44
  %1709 = fptrunc float %1560 to bfloat, !dbg !44
  %1710 = fptrunc float %1561 to bfloat, !dbg !44
  %1711 = fptrunc float %1562 to bfloat, !dbg !44
  %1712 = fptrunc float %1563 to bfloat, !dbg !44
  %1713 = fptrunc float %1565 to bfloat, !dbg !44
  %1714 = fptrunc float %1566 to bfloat, !dbg !44
  %1715 = fptrunc float %1567 to bfloat, !dbg !44
  %1716 = fptrunc float %1568 to bfloat, !dbg !44
  %1717 = fptrunc float %1570 to bfloat, !dbg !44
  %1718 = fptrunc float %1571 to bfloat, !dbg !44
  %1719 = fptrunc float %1572 to bfloat, !dbg !44
  %1720 = fptrunc float %1573 to bfloat, !dbg !44
  %1721 = shl i32 %15, 1, !dbg !44
  %1722 = and i32 %1721, 6, !dbg !44
  %1723 = shl i32 %15, 5, !dbg !44
  %1724 = and i32 %1723, 384, !dbg !44
  %1725 = or disjoint i32 %1724, %1722, !dbg !44
  %1726 = shl nuw nsw i32 %16, 5, !dbg !44
  %1727 = or disjoint i32 %1725, %1726, !dbg !44
  %1728 = and i32 %477, 24, !dbg !44
  %1729 = or disjoint i32 %1727, %1728, !dbg !44
  %1730 = and i32 %35, 1016, !dbg !44
  %1731 = lshr i32 %1727, 4, !dbg !44
  %1732 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1731, !dbg !44
  %1733 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1732, i32 %1729, !dbg !44
  %1734 = bitcast bfloat %1657 to i16, !dbg !44
  %1735 = bitcast bfloat %1658 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1733, i16 %1734, i16 %1735, i1 true) #1, !dbg !44
  %1736 = or disjoint i32 %1729, 1024, !dbg !44
  %1737 = lshr i32 %1736, 4, !dbg !44
  %1738 = and i32 %1737, 268435448, !dbg !44
  %1739 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1738, !dbg !44
  %1740 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1739, i32 %1736, !dbg !44
  %1741 = bitcast bfloat %1659 to i16, !dbg !44
  %1742 = bitcast bfloat %1660 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1740, i16 %1741, i16 %1742, i1 true) #1, !dbg !44
  %1743 = or disjoint i32 %1729, 32, !dbg !44
  %1744 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1732, i32 %1743, !dbg !44
  %1745 = bitcast bfloat %1661 to i16, !dbg !44
  %1746 = bitcast bfloat %1662 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1744, i16 %1745, i16 %1746, i1 true) #1, !dbg !44
  %1747 = or disjoint i32 %1729, 1056, !dbg !44
  %1748 = lshr i32 %1747, 4, !dbg !44
  %1749 = and i32 %1748, 268435448, !dbg !44
  %1750 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1749, !dbg !44
  %1751 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1750, i32 %1747, !dbg !44
  %1752 = bitcast bfloat %1663 to i16, !dbg !44
  %1753 = bitcast bfloat %1664 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1751, i16 %1752, i16 %1753, i1 true) #1, !dbg !44
  %1754 = or disjoint i32 %1729, 64, !dbg !44
  %1755 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1732, i32 %1754, !dbg !44
  %1756 = bitcast bfloat %1665 to i16, !dbg !44
  %1757 = bitcast bfloat %1666 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1755, i16 %1756, i16 %1757, i1 true) #1, !dbg !44
  %1758 = or disjoint i32 %1729, 1088, !dbg !44
  %1759 = lshr i32 %1758, 4, !dbg !44
  %1760 = and i32 %1759, 268435448, !dbg !44
  %1761 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1760, !dbg !44
  %1762 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %1758, !dbg !44
  %1763 = bitcast bfloat %1667 to i16, !dbg !44
  %1764 = bitcast bfloat %1668 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1762, i16 %1763, i16 %1764, i1 true) #1, !dbg !44
  %1765 = or disjoint i32 %1729, 96, !dbg !44
  %1766 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1732, i32 %1765, !dbg !44
  %1767 = bitcast bfloat %1669 to i16, !dbg !44
  %1768 = bitcast bfloat %1670 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1766, i16 %1767, i16 %1768, i1 true) #1, !dbg !44
  %1769 = or disjoint i32 %1729, 1120, !dbg !44
  %1770 = lshr i32 %1769, 4, !dbg !44
  %1771 = and i32 %1770, 268435448, !dbg !44
  %1772 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1771, !dbg !44
  %1773 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1772, i32 %1769, !dbg !44
  %1774 = bitcast bfloat %1671 to i16, !dbg !44
  %1775 = bitcast bfloat %1672 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1773, i16 %1774, i16 %1775, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1776 = lshr i32 %35, 4, !dbg !44
  %1777 = and i32 %1776, 56, !dbg !44
  %1778 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1777, !dbg !44
  %1779 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1778, i32 %1730, !dbg !44
  %1780 = load <4 x i32>, ptr addrspace(3) %1779, align 16, !dbg !44
  %1781 = or disjoint i32 %1730, 1024, !dbg !44
  %1782 = lshr i32 %1781, 4, !dbg !44
  %1783 = and i32 %1782, 120, !dbg !44
  %1784 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1783, !dbg !44
  %1785 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1784, i32 %1781, !dbg !44
  %1786 = load <4 x i32>, ptr addrspace(3) %1785, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1787 = bitcast bfloat %1673 to i16, !dbg !44
  %1788 = bitcast bfloat %1674 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1733, i16 %1787, i16 %1788, i1 true) #1, !dbg !44
  %1789 = bitcast bfloat %1675 to i16, !dbg !44
  %1790 = bitcast bfloat %1676 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1740, i16 %1789, i16 %1790, i1 true) #1, !dbg !44
  %1791 = bitcast bfloat %1677 to i16, !dbg !44
  %1792 = bitcast bfloat %1678 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1744, i16 %1791, i16 %1792, i1 true) #1, !dbg !44
  %1793 = bitcast bfloat %1679 to i16, !dbg !44
  %1794 = bitcast bfloat %1680 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1751, i16 %1793, i16 %1794, i1 true) #1, !dbg !44
  %1795 = bitcast bfloat %1681 to i16, !dbg !44
  %1796 = bitcast bfloat %1682 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1755, i16 %1795, i16 %1796, i1 true) #1, !dbg !44
  %1797 = bitcast bfloat %1683 to i16, !dbg !44
  %1798 = bitcast bfloat %1684 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1762, i16 %1797, i16 %1798, i1 true) #1, !dbg !44
  %1799 = bitcast bfloat %1685 to i16, !dbg !44
  %1800 = bitcast bfloat %1686 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1766, i16 %1799, i16 %1800, i1 true) #1, !dbg !44
  %1801 = bitcast bfloat %1687 to i16, !dbg !44
  %1802 = bitcast bfloat %1688 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1773, i16 %1801, i16 %1802, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1803 = load <4 x i32>, ptr addrspace(3) %1779, align 16, !dbg !44
  %1804 = load <4 x i32>, ptr addrspace(3) %1785, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1805 = bitcast bfloat %1689 to i16, !dbg !44
  %1806 = bitcast bfloat %1690 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1733, i16 %1805, i16 %1806, i1 true) #1, !dbg !44
  %1807 = bitcast bfloat %1691 to i16, !dbg !44
  %1808 = bitcast bfloat %1692 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1740, i16 %1807, i16 %1808, i1 true) #1, !dbg !44
  %1809 = bitcast bfloat %1693 to i16, !dbg !44
  %1810 = bitcast bfloat %1694 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1744, i16 %1809, i16 %1810, i1 true) #1, !dbg !44
  %1811 = bitcast bfloat %1695 to i16, !dbg !44
  %1812 = bitcast bfloat %1696 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1751, i16 %1811, i16 %1812, i1 true) #1, !dbg !44
  %1813 = bitcast bfloat %1697 to i16, !dbg !44
  %1814 = bitcast bfloat %1698 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1755, i16 %1813, i16 %1814, i1 true) #1, !dbg !44
  %1815 = bitcast bfloat %1699 to i16, !dbg !44
  %1816 = bitcast bfloat %1700 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1762, i16 %1815, i16 %1816, i1 true) #1, !dbg !44
  %1817 = bitcast bfloat %1701 to i16, !dbg !44
  %1818 = bitcast bfloat %1702 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1766, i16 %1817, i16 %1818, i1 true) #1, !dbg !44
  %1819 = bitcast bfloat %1703 to i16, !dbg !44
  %1820 = bitcast bfloat %1704 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1773, i16 %1819, i16 %1820, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1821 = load <4 x i32>, ptr addrspace(3) %1779, align 16, !dbg !44
  %1822 = load <4 x i32>, ptr addrspace(3) %1785, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1823 = bitcast bfloat %1705 to i16, !dbg !44
  %1824 = bitcast bfloat %1706 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1733, i16 %1823, i16 %1824, i1 true) #1, !dbg !44
  %1825 = bitcast bfloat %1707 to i16, !dbg !44
  %1826 = bitcast bfloat %1708 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1740, i16 %1825, i16 %1826, i1 true) #1, !dbg !44
  %1827 = bitcast bfloat %1709 to i16, !dbg !44
  %1828 = bitcast bfloat %1710 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1744, i16 %1827, i16 %1828, i1 true) #1, !dbg !44
  %1829 = bitcast bfloat %1711 to i16, !dbg !44
  %1830 = bitcast bfloat %1712 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1751, i16 %1829, i16 %1830, i1 true) #1, !dbg !44
  %1831 = bitcast bfloat %1713 to i16, !dbg !44
  %1832 = bitcast bfloat %1714 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1755, i16 %1831, i16 %1832, i1 true) #1, !dbg !44
  %1833 = bitcast bfloat %1715 to i16, !dbg !44
  %1834 = bitcast bfloat %1716 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1762, i16 %1833, i16 %1834, i1 true) #1, !dbg !44
  %1835 = bitcast bfloat %1717 to i16, !dbg !44
  %1836 = bitcast bfloat %1718 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1766, i16 %1835, i16 %1836, i1 true) #1, !dbg !44
  %1837 = bitcast bfloat %1719 to i16, !dbg !44
  %1838 = bitcast bfloat %1720 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1773, i16 %1837, i16 %1838, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1839 = load <4 x i32>, ptr addrspace(3) %1779, align 16, !dbg !44
  %1840 = load <4 x i32>, ptr addrspace(3) %1785, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %1780, i64 0, !dbg !44
  %.extract100 = extractelement <4 x i32> %1780, i64 1, !dbg !44
  %.extract102 = extractelement <4 x i32> %1780, i64 2, !dbg !44
  %.extract104 = extractelement <4 x i32> %1780, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract100, i32 %.extract102, i32 %.extract104, ptr addrspace(1) %1642, i1 %1617) #1, !dbg !44
  %.extract106 = extractelement <4 x i32> %1786, i64 0, !dbg !44
  %.extract108 = extractelement <4 x i32> %1786, i64 1, !dbg !44
  %.extract110 = extractelement <4 x i32> %1786, i64 2, !dbg !44
  %.extract112 = extractelement <4 x i32> %1786, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract106, i32 %.extract108, i32 %.extract110, i32 %.extract112, ptr addrspace(1) %1644, i1 %1618) #1, !dbg !44
  %.extract114 = extractelement <4 x i32> %1803, i64 0, !dbg !44
  %.extract116 = extractelement <4 x i32> %1803, i64 1, !dbg !44
  %.extract118 = extractelement <4 x i32> %1803, i64 2, !dbg !44
  %.extract120 = extractelement <4 x i32> %1803, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract114, i32 %.extract116, i32 %.extract118, i32 %.extract120, ptr addrspace(1) %1646, i1 %1619) #1, !dbg !44
  %.extract122 = extractelement <4 x i32> %1804, i64 0, !dbg !44
  %.extract124 = extractelement <4 x i32> %1804, i64 1, !dbg !44
  %.extract126 = extractelement <4 x i32> %1804, i64 2, !dbg !44
  %.extract128 = extractelement <4 x i32> %1804, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract122, i32 %.extract124, i32 %.extract126, i32 %.extract128, ptr addrspace(1) %1648, i1 %1620) #1, !dbg !44
  %.extract130 = extractelement <4 x i32> %1821, i64 0, !dbg !44
  %.extract132 = extractelement <4 x i32> %1821, i64 1, !dbg !44
  %.extract134 = extractelement <4 x i32> %1821, i64 2, !dbg !44
  %.extract136 = extractelement <4 x i32> %1821, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract130, i32 %.extract132, i32 %.extract134, i32 %.extract136, ptr addrspace(1) %1650, i1 %1621) #1, !dbg !44
  %.extract138 = extractelement <4 x i32> %1822, i64 0, !dbg !44
  %.extract140 = extractelement <4 x i32> %1822, i64 1, !dbg !44
  %.extract142 = extractelement <4 x i32> %1822, i64 2, !dbg !44
  %.extract144 = extractelement <4 x i32> %1822, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract138, i32 %.extract140, i32 %.extract142, i32 %.extract144, ptr addrspace(1) %1652, i1 %1622) #1, !dbg !44
  %.extract146 = extractelement <4 x i32> %1839, i64 0, !dbg !44
  %.extract148 = extractelement <4 x i32> %1839, i64 1, !dbg !44
  %.extract150 = extractelement <4 x i32> %1839, i64 2, !dbg !44
  %.extract152 = extractelement <4 x i32> %1839, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract148, i32 %.extract150, i32 %.extract152, ptr addrspace(1) %1654, i1 %1623) #1, !dbg !44
  %.extract154 = extractelement <4 x i32> %1840, i64 0, !dbg !44
  %.extract156 = extractelement <4 x i32> %1840, i64 1, !dbg !44
  %.extract158 = extractelement <4 x i32> %1840, i64 2, !dbg !44
  %.extract160 = extractelement <4 x i32> %1840, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %1656, i1 %1624) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3jmoj2vhodaqtnbccdporu4ux6ckxirm4vb3qya2ufq4tjzz7yp.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 27, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
