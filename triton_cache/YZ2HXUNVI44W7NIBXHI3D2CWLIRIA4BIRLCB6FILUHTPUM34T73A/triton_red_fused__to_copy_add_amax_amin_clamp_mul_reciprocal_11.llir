; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 3, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 6, !dbg !11
  %12 = and i32 %11, 7, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 120, !dbg !14
  %17 = and i32 %15, 504, !dbg !14
  %18 = shl i32 %13, 7, !dbg !15
  %invariant.op = or disjoint i32 %18, %16, !dbg !16
  %19 = zext nneg i32 %17 to i64, !dbg !16
  %20 = insertelement <16 x i1> poison, i1 %14, i64 0, !dbg !17
  %21 = shufflevector <16 x i1> %20, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !17
  %22 = and i32 %10, 31, !dbg !11
  %23 = lshr i32 %17, 7, !dbg !18
  %24 = mul nuw nsw i32 %23, 526336
  %.reass = add i32 %24, %invariant.op
  %25 = sext i32 %.reass to i64, !dbg !19
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %14) #4, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !20
  %36 = shufflevector <2 x bfloat> %29, <2 x bfloat> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %37 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %38 = shufflevector <8 x bfloat> %36, <8 x bfloat> %37, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %39 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %40 = shufflevector <8 x bfloat> %38, <8 x bfloat> %39, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %41 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %42 = shufflevector <8 x bfloat> %40, <8 x bfloat> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %43 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %44 = shufflevector <8 x bfloat> %42, <8 x bfloat> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %45 = fpext <8 x bfloat> %44 to <8 x float>, !dbg !21
  %46 = shufflevector <8 x float> %45, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %47 = fcmp olt <16 x float> %46, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !22
  %48 = fcmp ogt <16 x float> %46, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !22
  %49 = shufflevector <16 x i1> %47, <16 x i1> %48, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %50 = select <16 x i1> %49, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %46, !dbg !26
  %51 = select <16 x i1> %21, <16 x float> %50, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %52 = lshr i32 %17, 7, !dbg !18
  %53 = mul nuw nsw i32 %52, 526336
  %54 = add nuw nsw i32 %53, 2105344
  %.reass.1 = add i32 %54, %invariant.op
  %55 = sext i32 %.reass.1 to i64, !dbg !19
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %14) #4, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !20
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !20
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !20
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !20
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !20
  %66 = fcmp uno <16 x float> %51, zeroinitializer, !dbg !27
  %67 = shufflevector <2 x bfloat> %59, <2 x bfloat> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %68 = shufflevector <2 x bfloat> %63, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %69 = shufflevector <8 x bfloat> %67, <8 x bfloat> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %70 = shufflevector <2 x bfloat> %63, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %71 = shufflevector <8 x bfloat> %69, <8 x bfloat> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %72 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %73 = shufflevector <8 x bfloat> %71, <8 x bfloat> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %74 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %75 = shufflevector <8 x bfloat> %73, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %76 = fpext <8 x bfloat> %75 to <8 x float>, !dbg !21
  %77 = shufflevector <8 x float> %76, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %78 = fcmp ogt <16 x float> %51, %77, !dbg !22
  %79 = fcmp olt <16 x float> %51, %77, !dbg !22
  %80 = shufflevector <16 x i1> %78, <16 x i1> %79, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %81 = or <16 x i1> %66, %80, !dbg !28
  %82 = select <16 x i1> %81, <16 x float> %51, <16 x float> %77, !dbg !26
  %83 = select <16 x i1> %21, <16 x float> %82, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %84 = lshr i32 %17, 7, !dbg !18
  %85 = mul nuw nsw i32 %84, 526336
  %86 = add nuw nsw i32 %85, 4210688
  %.reass.2 = add i32 %86, %invariant.op
  %87 = sext i32 %.reass.2 to i64, !dbg !19
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !19
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %88, i1 %14) #4, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !20
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !20
  %92 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !20
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !20
  %94 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !20
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !20
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !20
  %98 = fcmp uno <16 x float> %83, zeroinitializer, !dbg !27
  %99 = shufflevector <2 x bfloat> %91, <2 x bfloat> %93, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %100 = shufflevector <2 x bfloat> %95, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %101 = shufflevector <8 x bfloat> %99, <8 x bfloat> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %102 = shufflevector <2 x bfloat> %95, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %103 = shufflevector <8 x bfloat> %101, <8 x bfloat> %102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %104 = shufflevector <2 x bfloat> %97, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %105 = shufflevector <8 x bfloat> %103, <8 x bfloat> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %106 = shufflevector <2 x bfloat> %97, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %107 = shufflevector <8 x bfloat> %105, <8 x bfloat> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %108 = fpext <8 x bfloat> %107 to <8 x float>, !dbg !21
  %109 = shufflevector <8 x float> %108, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %110 = fcmp ogt <16 x float> %83, %109, !dbg !22
  %111 = fcmp olt <16 x float> %83, %109, !dbg !22
  %112 = shufflevector <16 x i1> %110, <16 x i1> %111, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %113 = or <16 x i1> %98, %112, !dbg !28
  %114 = select <16 x i1> %113, <16 x float> %83, <16 x float> %109, !dbg !26
  %115 = select <16 x i1> %21, <16 x float> %114, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %116 = lshr i32 %17, 7, !dbg !18
  %117 = mul nuw nsw i32 %116, 526336
  %118 = add nuw nsw i32 %117, 6316032
  %.reass.3 = add i32 %118, %invariant.op
  %119 = sext i32 %.reass.3 to i64, !dbg !19
  %120 = getelementptr bfloat, ptr addrspace(1) %0, i64 %119, !dbg !19
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %120, i1 %14) #4, !dbg !20
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !20
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !20
  %124 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !20
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !20
  %126 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !20
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !20
  %128 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !20
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !20
  %130 = fcmp uno <16 x float> %115, zeroinitializer, !dbg !27
  %131 = shufflevector <2 x bfloat> %123, <2 x bfloat> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %132 = shufflevector <2 x bfloat> %127, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %133 = shufflevector <8 x bfloat> %131, <8 x bfloat> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %134 = shufflevector <2 x bfloat> %127, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %135 = shufflevector <8 x bfloat> %133, <8 x bfloat> %134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %136 = shufflevector <2 x bfloat> %129, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %137 = shufflevector <8 x bfloat> %135, <8 x bfloat> %136, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %138 = shufflevector <2 x bfloat> %129, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %139 = shufflevector <8 x bfloat> %137, <8 x bfloat> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %140 = fpext <8 x bfloat> %139 to <8 x float>, !dbg !21
  %141 = shufflevector <8 x float> %140, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %142 = fcmp ogt <16 x float> %115, %141, !dbg !22
  %143 = fcmp olt <16 x float> %115, %141, !dbg !22
  %144 = shufflevector <16 x i1> %142, <16 x i1> %143, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %145 = or <16 x i1> %130, %144, !dbg !28
  %146 = select <16 x i1> %145, <16 x float> %115, <16 x float> %141, !dbg !26
  %147 = select <16 x i1> %21, <16 x float> %146, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %148 = lshr i32 %17, 7, !dbg !18
  %149 = mul nuw nsw i32 %148, 526336
  %150 = add nuw nsw i32 %149, 8421376
  %.reass.4 = add i32 %150, %invariant.op
  %151 = sext i32 %.reass.4 to i64, !dbg !19
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !19
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %152, i1 %14) #4, !dbg !20
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !20
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !20
  %156 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !20
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !20
  %158 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !20
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !20
  %160 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !20
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !20
  %162 = fcmp uno <16 x float> %147, zeroinitializer, !dbg !27
  %163 = shufflevector <2 x bfloat> %155, <2 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %164 = shufflevector <2 x bfloat> %159, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %165 = shufflevector <8 x bfloat> %163, <8 x bfloat> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %166 = shufflevector <2 x bfloat> %159, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %167 = shufflevector <8 x bfloat> %165, <8 x bfloat> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %168 = shufflevector <2 x bfloat> %161, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %169 = shufflevector <8 x bfloat> %167, <8 x bfloat> %168, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %170 = shufflevector <2 x bfloat> %161, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %171 = shufflevector <8 x bfloat> %169, <8 x bfloat> %170, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %172 = fpext <8 x bfloat> %171 to <8 x float>, !dbg !21
  %173 = shufflevector <8 x float> %172, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %174 = fcmp ogt <16 x float> %147, %173, !dbg !22
  %175 = fcmp olt <16 x float> %147, %173, !dbg !22
  %176 = shufflevector <16 x i1> %174, <16 x i1> %175, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %177 = or <16 x i1> %162, %176, !dbg !28
  %178 = select <16 x i1> %177, <16 x float> %147, <16 x float> %173, !dbg !26
  %179 = select <16 x i1> %21, <16 x float> %178, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %180 = lshr i32 %17, 7, !dbg !18
  %181 = mul nuw nsw i32 %180, 526336
  %182 = add nuw nsw i32 %181, 10526720
  %.reass.5 = add i32 %182, %invariant.op
  %183 = sext i32 %.reass.5 to i64, !dbg !19
  %184 = getelementptr bfloat, ptr addrspace(1) %0, i64 %183, !dbg !19
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %14) #4, !dbg !20
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !20
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !20
  %188 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !20
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !20
  %190 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !20
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !20
  %192 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !20
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !20
  %194 = fcmp uno <16 x float> %179, zeroinitializer, !dbg !27
  %195 = shufflevector <2 x bfloat> %187, <2 x bfloat> %189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %196 = shufflevector <2 x bfloat> %191, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %197 = shufflevector <8 x bfloat> %195, <8 x bfloat> %196, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %198 = shufflevector <2 x bfloat> %191, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %199 = shufflevector <8 x bfloat> %197, <8 x bfloat> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %200 = shufflevector <2 x bfloat> %193, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %201 = shufflevector <8 x bfloat> %199, <8 x bfloat> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %202 = shufflevector <2 x bfloat> %193, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %203 = shufflevector <8 x bfloat> %201, <8 x bfloat> %202, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %204 = fpext <8 x bfloat> %203 to <8 x float>, !dbg !21
  %205 = shufflevector <8 x float> %204, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !21
  %206 = fcmp ogt <16 x float> %179, %205, !dbg !22
  %207 = fcmp olt <16 x float> %179, %205, !dbg !22
  %208 = shufflevector <16 x i1> %206, <16 x i1> %207, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !22
  %209 = or <16 x i1> %194, %208, !dbg !28
  %210 = select <16 x i1> %209, <16 x float> %179, <16 x float> %205, !dbg !26
  %211 = select <16 x i1> %21, <16 x float> %210, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !17
  %212 = lshr i32 %10, 5, !dbg !11
  %213 = and i32 %10, 7, !dbg !11
  %214 = or disjoint i32 %9, %213, !dbg !12
  %215 = icmp slt i32 %214, 512, !dbg !13
  %216 = extractelement <16 x float> %211, i64 8, !dbg !29
  %217 = extractelement <16 x float> %211, i64 9, !dbg !29
  %218 = fcmp olt float %216, %217, !dbg !29
  %219 = fcmp uno float %216, 0.000000e+00, !dbg !32
  %220 = or i1 %218, %219, !dbg !33
  %221 = select i1 %220, float %216, float %217, !dbg !34
  %222 = extractelement <16 x float> %211, i64 10, !dbg !29
  %223 = fcmp olt float %221, %222, !dbg !29
  %224 = fcmp uno float %221, 0.000000e+00, !dbg !32
  %225 = or i1 %223, %224, !dbg !33
  %226 = select i1 %225, float %221, float %222, !dbg !34
  %227 = extractelement <16 x float> %211, i64 11, !dbg !29
  %228 = fcmp olt float %226, %227, !dbg !29
  %229 = fcmp uno float %226, 0.000000e+00, !dbg !32
  %230 = or i1 %228, %229, !dbg !33
  %231 = select i1 %230, float %226, float %227, !dbg !34
  %232 = extractelement <16 x float> %211, i64 12, !dbg !29
  %233 = fcmp olt float %231, %232, !dbg !29
  %234 = fcmp uno float %231, 0.000000e+00, !dbg !32
  %235 = or i1 %233, %234, !dbg !33
  %236 = select i1 %235, float %231, float %232, !dbg !34
  %237 = extractelement <16 x float> %211, i64 13, !dbg !29
  %238 = fcmp olt float %236, %237, !dbg !29
  %239 = fcmp uno float %236, 0.000000e+00, !dbg !32
  %240 = or i1 %238, %239, !dbg !33
  %241 = select i1 %240, float %236, float %237, !dbg !34
  %242 = extractelement <16 x float> %211, i64 14, !dbg !29
  %243 = fcmp olt float %241, %242, !dbg !29
  %244 = fcmp uno float %241, 0.000000e+00, !dbg !32
  %245 = or i1 %243, %244, !dbg !33
  %246 = select i1 %245, float %241, float %242, !dbg !34
  %247 = extractelement <16 x float> %211, i64 15, !dbg !29
  %248 = fcmp olt float %246, %247, !dbg !29
  %249 = fcmp uno float %246, 0.000000e+00, !dbg !32
  %250 = or i1 %248, %249, !dbg !33
  %251 = select i1 %250, float %246, float %247, !dbg !34
  %252 = bitcast float %251 to i32, !dbg !35
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 16, i32 31), !dbg !35
  %254 = bitcast i32 %253 to float, !dbg !35
  %255 = fcmp olt float %251, %254, !dbg !29
  %256 = fcmp uno float %251, 0.000000e+00, !dbg !32
  %257 = or i1 %256, %255, !dbg !33
  %258 = select i1 %257, float %251, float %254, !dbg !34
  %259 = bitcast float %258 to i32, !dbg !35
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !35
  %261 = bitcast i32 %260 to float, !dbg !35
  %262 = fcmp olt float %258, %261, !dbg !29
  %263 = fcmp uno float %258, 0.000000e+00, !dbg !32
  %264 = or i1 %262, %263, !dbg !33
  %265 = select i1 %264, float %258, float %261, !dbg !34
  %266 = bitcast float %265 to i32, !dbg !35
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !35
  %268 = bitcast i32 %267 to float, !dbg !35
  %269 = fcmp olt float %265, %268, !dbg !29
  %270 = fcmp uno float %265, 0.000000e+00, !dbg !32
  %271 = or i1 %269, %270, !dbg !33
  %272 = select i1 %271, float %265, float %268, !dbg !34
  %273 = bitcast float %272 to i32, !dbg !35
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !35
  %275 = bitcast i32 %274 to float, !dbg !35
  %276 = fcmp olt float %272, %275, !dbg !29
  %277 = fcmp uno float %272, 0.000000e+00, !dbg !32
  %278 = or i1 %276, %277, !dbg !33
  %279 = select i1 %278, float %272, float %275, !dbg !34
  %280 = bitcast float %279 to i32, !dbg !35
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !35
  %282 = bitcast i32 %281 to float, !dbg !35
  %283 = fcmp olt float %279, %282, !dbg !29
  %284 = fcmp uno float %279, 0.000000e+00, !dbg !32
  %285 = or i1 %283, %284, !dbg !33
  %286 = and i32 %212, 1, !dbg !35
  %287 = icmp eq i32 %22, 0, !dbg !35
  %288 = shl nuw nsw i32 %12, 1, !dbg !35
  %289 = or disjoint i32 %288, %286, !dbg !35
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !35
  %291 = select i1 %285, i32 %280, i32 %281, !dbg !34
  %292 = insertelement <1 x i32> poison, i32 %291, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %292, i1 %287) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %293 = icmp slt i32 %10, 16, !dbg !35
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %295 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %293) #4, !dbg !35
  %296 = bitcast i32 %295 to float, !dbg !35
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !35
  %298 = bitcast i32 %297 to float, !dbg !35
  %299 = fcmp olt float %296, %298, !dbg !29
  %300 = fcmp uno float %296, 0.000000e+00, !dbg !32
  %301 = or i1 %300, %299, !dbg !33
  %302 = and i32 %10, 1, !dbg !35
  %303 = icmp eq i32 %302, 0, !dbg !35
  %304 = and i1 %293, %303, !dbg !35
  %305 = select i1 %301, i32 %295, i32 %297, !dbg !34
  %306 = insertelement <1 x i32> poison, i32 %305, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %306, i1 %304) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !35
  %308 = load float, ptr addrspace(3) %307, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %309 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !36
  %310 = bitcast float %308 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %311 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %213, !dbg !36
  %312 = load float, ptr addrspace(3) %311, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %313 = extractelement <16 x float> %211, i64 0, !dbg !39
  %314 = extractelement <16 x float> %211, i64 1, !dbg !39
  %315 = fcmp ogt float %313, %314, !dbg !39
  %316 = fcmp uno float %313, 0.000000e+00, !dbg !40
  %317 = or i1 %315, %316, !dbg !41
  %318 = select i1 %317, float %313, float %314, !dbg !42
  %319 = extractelement <16 x float> %211, i64 2, !dbg !39
  %320 = fcmp ogt float %318, %319, !dbg !39
  %321 = fcmp uno float %318, 0.000000e+00, !dbg !40
  %322 = or i1 %320, %321, !dbg !41
  %323 = select i1 %322, float %318, float %319, !dbg !42
  %324 = extractelement <16 x float> %211, i64 3, !dbg !39
  %325 = fcmp ogt float %323, %324, !dbg !39
  %326 = fcmp uno float %323, 0.000000e+00, !dbg !40
  %327 = or i1 %325, %326, !dbg !41
  %328 = select i1 %327, float %323, float %324, !dbg !42
  %329 = extractelement <16 x float> %211, i64 4, !dbg !39
  %330 = fcmp ogt float %328, %329, !dbg !39
  %331 = fcmp uno float %328, 0.000000e+00, !dbg !40
  %332 = or i1 %330, %331, !dbg !41
  %333 = select i1 %332, float %328, float %329, !dbg !42
  %334 = extractelement <16 x float> %211, i64 5, !dbg !39
  %335 = fcmp ogt float %333, %334, !dbg !39
  %336 = fcmp uno float %333, 0.000000e+00, !dbg !40
  %337 = or i1 %335, %336, !dbg !41
  %338 = select i1 %337, float %333, float %334, !dbg !42
  %339 = extractelement <16 x float> %211, i64 6, !dbg !39
  %340 = fcmp ogt float %338, %339, !dbg !39
  %341 = fcmp uno float %338, 0.000000e+00, !dbg !40
  %342 = or i1 %340, %341, !dbg !41
  %343 = select i1 %342, float %338, float %339, !dbg !42
  %344 = extractelement <16 x float> %211, i64 7, !dbg !39
  %345 = fcmp ogt float %343, %344, !dbg !39
  %346 = fcmp uno float %343, 0.000000e+00, !dbg !40
  %347 = or i1 %345, %346, !dbg !41
  %348 = select i1 %347, float %343, float %344, !dbg !42
  %349 = bitcast float %348 to i32, !dbg !37
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 16, i32 31), !dbg !37
  %351 = bitcast i32 %350 to float, !dbg !37
  %352 = fcmp ogt float %348, %351, !dbg !39
  %353 = fcmp uno float %348, 0.000000e+00, !dbg !40
  %354 = or i1 %353, %352, !dbg !41
  %355 = select i1 %354, float %348, float %351, !dbg !42
  %356 = bitcast float %355 to i32, !dbg !37
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 8, i32 31), !dbg !37
  %358 = bitcast i32 %357 to float, !dbg !37
  %359 = fcmp ogt float %355, %358, !dbg !39
  %360 = fcmp uno float %355, 0.000000e+00, !dbg !40
  %361 = or i1 %359, %360, !dbg !41
  %362 = select i1 %361, float %355, float %358, !dbg !42
  %363 = bitcast float %362 to i32, !dbg !37
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !37
  %365 = bitcast i32 %364 to float, !dbg !37
  %366 = fcmp ogt float %362, %365, !dbg !39
  %367 = fcmp uno float %362, 0.000000e+00, !dbg !40
  %368 = or i1 %366, %367, !dbg !41
  %369 = select i1 %368, float %362, float %365, !dbg !42
  %370 = bitcast float %369 to i32, !dbg !37
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !37
  %372 = bitcast i32 %371 to float, !dbg !37
  %373 = fcmp ogt float %369, %372, !dbg !39
  %374 = fcmp uno float %369, 0.000000e+00, !dbg !40
  %375 = or i1 %373, %374, !dbg !41
  %376 = select i1 %375, float %369, float %372, !dbg !42
  %377 = bitcast float %376 to i32, !dbg !37
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !37
  %379 = bitcast i32 %378 to float, !dbg !37
  %380 = fcmp ogt float %376, %379, !dbg !39
  %381 = fcmp uno float %376, 0.000000e+00, !dbg !40
  %382 = or i1 %380, %381, !dbg !41
  %383 = select i1 %382, i32 %377, i32 %378, !dbg !42
  %384 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %384, i1 %287) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %385 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %293) #4, !dbg !37
  %386 = bitcast i32 %385 to float, !dbg !37
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !37
  %388 = bitcast i32 %387 to float, !dbg !37
  %389 = fcmp ogt float %386, %388, !dbg !39
  %390 = fcmp uno float %386, 0.000000e+00, !dbg !40
  %391 = or i1 %390, %389, !dbg !41
  %392 = select i1 %391, i32 %385, i32 %387, !dbg !42
  %393 = insertelement <1 x i32> poison, i32 %392, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %393, i1 %304) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %394 = load float, ptr addrspace(3) %307, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %395 = bitcast float %394 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %395, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %396 = load float, ptr addrspace(3) %311, align 4, !dbg !43
  %397 = sext i32 %214 to i64, !dbg !44
  %398 = getelementptr bfloat, ptr addrspace(1) %1, i64 %397, !dbg !44
  %399 = fptrunc float %312 to bfloat, !dbg !36
  %400 = and i32 %10, 504, !dbg !36
  %401 = icmp eq i32 %400, 0, !dbg !36
  %402 = bitcast bfloat %399 to i16, !dbg !36
  %403 = and i1 %401, %215, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %402, ptr addrspace(1) %398, i1 %403) #4, !dbg !36
  %404 = getelementptr bfloat, ptr addrspace(1) %2, i64 %397, !dbg !45
  %405 = fptrunc float %396 to bfloat, !dbg !43
  %406 = bitcast bfloat %405 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %406, ptr addrspace(1) %404, i1 %403) #4, !dbg !43
  %.inv = fcmp oge float %308, 0.000000e+00, !dbg !46
  %407 = select i1 %.inv, float 0.000000e+00, float %308, !dbg !46
  %408 = fsub float 0.000000e+00, %407, !dbg !48
  %.inv2 = fcmp ole float %394, 0.000000e+00, !dbg !49
  %409 = select i1 %.inv2, float 0.000000e+00, float %394, !dbg !49
  %410 = fcmp ogt float %408, %409, !dbg !51
  %411 = fcmp uno float %408, 0.000000e+00, !dbg !53
  %412 = or i1 %411, %410, !dbg !54
  %413 = select i1 %412, float %408, float %409, !dbg !55
  %414 = fmul float %413, 0x3F80204080000000, !dbg !56
  %415 = fcmp ogt float %414, 0x3EE4F8B580000000, !dbg !57
  %416 = fcmp uno float %414, 0.000000e+00, !dbg !59
  %417 = or i1 %415, %416, !dbg !60
  %418 = select i1 %417, float %414, float 0x3EE4F8B580000000, !dbg !61
  %419 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %418), !dbg !62
  %420 = mul i32 %13, 3072, !dbg !63
  br label %421, !dbg !64

421:                                              ; preds = %7, %421
  %indvars.iv21 = phi i64 [ 0, %7 ], [ %indvars.iv.next22, %421 ]
  %422 = or disjoint i64 %indvars.iv21, %19, !dbg !65
  %423 = lshr i64 %422, 7, !dbg !66
  %424 = trunc i64 %423 to i32
  %425 = mul i32 %424, 526336
  %.reass5 = add i32 %425, %invariant.op
  %426 = sext i32 %.reass5 to i64, !dbg !67
  %427 = getelementptr bfloat, ptr addrspace(1) %0, i64 %426, !dbg !67
  %428 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %427, i1 %14) #4, !dbg !68
  %429 = extractvalue { i32, i32, i32, i32 } %428, 0, !dbg !68
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !68
  %431 = extractvalue { i32, i32, i32, i32 } %428, 1, !dbg !68
  %432 = bitcast i32 %431 to <2 x bfloat>, !dbg !68
  %433 = extractvalue { i32, i32, i32, i32 } %428, 2, !dbg !68
  %434 = bitcast i32 %433 to <2 x bfloat>, !dbg !68
  %435 = extractvalue { i32, i32, i32, i32 } %428, 3, !dbg !68
  %436 = bitcast i32 %435 to <2 x bfloat>, !dbg !68
  %437 = extractelement <2 x bfloat> %430, i64 0, !dbg !68
  %438 = extractelement <2 x bfloat> %430, i64 1, !dbg !68
  %439 = extractelement <2 x bfloat> %432, i64 0, !dbg !68
  %440 = extractelement <2 x bfloat> %432, i64 1, !dbg !68
  %441 = extractelement <2 x bfloat> %434, i64 0, !dbg !68
  %442 = extractelement <2 x bfloat> %434, i64 1, !dbg !68
  %443 = extractelement <2 x bfloat> %436, i64 0, !dbg !68
  %444 = extractelement <2 x bfloat> %436, i64 1, !dbg !68
  %445 = fpext bfloat %437 to float, !dbg !69
  %446 = fpext bfloat %438 to float, !dbg !69
  %447 = fpext bfloat %439 to float, !dbg !69
  %448 = fpext bfloat %440 to float, !dbg !69
  %449 = fpext bfloat %441 to float, !dbg !69
  %450 = fpext bfloat %442 to float, !dbg !69
  %451 = fpext bfloat %443 to float, !dbg !69
  %452 = fpext bfloat %444 to float, !dbg !69
  %453 = fmul float %419, %445, !dbg !70
  %454 = fmul float %419, %446, !dbg !70
  %455 = fmul float %419, %447, !dbg !70
  %456 = fmul float %419, %448, !dbg !70
  %457 = fmul float %419, %449, !dbg !70
  %458 = fmul float %419, %450, !dbg !70
  %459 = fmul float %419, %451, !dbg !70
  %460 = fmul float %419, %452, !dbg !70
  %461 = tail call float @llvm.nvvm.round.f(float %453) #4, !dbg !71
  %462 = tail call float @llvm.nvvm.round.f(float %454) #4, !dbg !71
  %463 = tail call float @llvm.nvvm.round.f(float %455) #4, !dbg !71
  %464 = tail call float @llvm.nvvm.round.f(float %456) #4, !dbg !71
  %465 = tail call float @llvm.nvvm.round.f(float %457) #4, !dbg !71
  %466 = tail call float @llvm.nvvm.round.f(float %458) #4, !dbg !71
  %467 = tail call float @llvm.nvvm.round.f(float %459) #4, !dbg !71
  %468 = tail call float @llvm.nvvm.round.f(float %460) #4, !dbg !71
  %469 = insertelement <4 x float> poison, float %461, i64 0, !dbg !72
  %470 = insertelement <4 x float> %469, float %462, i64 1, !dbg !72
  %471 = insertelement <4 x float> %470, float %463, i64 2, !dbg !72
  %472 = insertelement <4 x float> %471, float %464, i64 3, !dbg !72
  %473 = fcmp ogt <4 x float> %472, splat (float -1.270000e+02), !dbg !72
  %474 = fcmp uno <4 x float> %472, zeroinitializer, !dbg !74
  %475 = or <4 x i1> %473, %474, !dbg !75
  %476 = select <4 x i1> %475, <4 x float> %472, <4 x float> splat (float -1.270000e+02), !dbg !76
  %477 = fcmp olt <4 x float> %476, splat (float 1.270000e+02), !dbg !77
  %478 = fcmp uno <4 x float> %476, zeroinitializer, !dbg !79
  %479 = or <4 x i1> %477, %478, !dbg !80
  %480 = fptosi <4 x float> %476 to <4 x i8>, !dbg !81
  %481 = select <4 x i1> %479, <4 x i8> %480, <4 x i8> splat (i8 127), !dbg !82
  %482 = insertelement <4 x float> poison, float %465, i64 0, !dbg !72
  %483 = insertelement <4 x float> %482, float %466, i64 1, !dbg !72
  %484 = insertelement <4 x float> %483, float %467, i64 2, !dbg !72
  %485 = insertelement <4 x float> %484, float %468, i64 3, !dbg !72
  %486 = fcmp ogt <4 x float> %485, splat (float -1.270000e+02), !dbg !72
  %487 = fcmp uno <4 x float> %485, zeroinitializer, !dbg !74
  %488 = or <4 x i1> %486, %487, !dbg !75
  %489 = select <4 x i1> %488, <4 x float> %485, <4 x float> splat (float -1.270000e+02), !dbg !76
  %490 = fcmp olt <4 x float> %489, splat (float 1.270000e+02), !dbg !77
  %491 = fcmp uno <4 x float> %489, zeroinitializer, !dbg !79
  %492 = or <4 x i1> %490, %491, !dbg !80
  %493 = fptosi <4 x float> %489 to <4 x i8>, !dbg !81
  %494 = select <4 x i1> %492, <4 x i8> %493, <4 x i8> splat (i8 127), !dbg !82
  %495 = trunc nuw nsw i64 %422 to i32, !dbg !83
  %496 = add i32 %420, %495, !dbg !83
  %497 = sext i32 %496 to i64, !dbg !84
  %498 = getelementptr i8, ptr addrspace(1) %3, i64 %497, !dbg !84
  %499 = bitcast <4 x i8> %481 to i32, !dbg !85
  %500 = bitcast <4 x i8> %494 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %499, i32 %500, ptr addrspace(1) %498, i1 %14) #4, !dbg !85
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 512, !dbg !64
  %501 = icmp samesign ult i64 %indvars.iv21, 2560, !dbg !64
  br i1 %501, label %421, label %502, !dbg !64

502:                                              ; preds = %421
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 42, column: 48, scope: !6)
!18 = !DILocation(line: 37, column: 59, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 41, column: 45, scope: !6)
!26 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 94, column: 15, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!31 = !DILocation(line: 43, column: 38, scope: !6)
!32 = !DILocation(line: 96, column: 21, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 96, column: 16, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 97, column: 29, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !31)
!36 = !DILocation(line: 45, column: 36, scope: !6)
!37 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 38, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !30, inlinedAt: !38)
!40 = !DILocation(line: 104, column: 21, scope: !30, inlinedAt: !38)
!41 = !DILocation(line: 104, column: 16, scope: !30, inlinedAt: !38)
!42 = !DILocation(line: 105, column: 29, scope: !30, inlinedAt: !38)
!43 = !DILocation(line: 46, column: 36, scope: !6)
!44 = !DILocation(line: 45, column: 25, scope: !6)
!45 = !DILocation(line: 46, column: 25, scope: !6)
!46 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !47)
!47 = !DILocation(line: 55, column: 44, scope: !6)
!48 = !DILocation(line: 56, column: 16, scope: !6)
!49 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !50)
!50 = !DILocation(line: 57, column: 45, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !52)
!52 = !DILocation(line: 58, column: 45, scope: !6)
!53 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !52)
!54 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !52)
!55 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !52)
!56 = !DILocation(line: 60, column: 24, scope: !6)
!57 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !58)
!58 = !DILocation(line: 63, column: 46, scope: !6)
!59 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !58)
!60 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !58)
!61 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !58)
!62 = !DILocation(line: 66, column: 25, scope: !6)
!63 = !DILocation(line: 78, column: 41, scope: !6)
!64 = !DILocation(line: 47, column: 40, scope: !6)
!65 = !DILocation(line: 48, column: 31, scope: !6)
!66 = !DILocation(line: 53, column: 59, scope: !6)
!67 = !DILocation(line: 53, column: 34, scope: !6)
!68 = !DILocation(line: 53, column: 83, scope: !6)
!69 = !DILocation(line: 53, column: 145, scope: !6)
!70 = !DILocation(line: 69, column: 23, scope: !6)
!71 = !DILocation(line: 70, column: 36, scope: !6)
!72 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !73)
!73 = !DILocation(line: 73, column: 46, scope: !6)
!74 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !73)
!75 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !73)
!76 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !73)
!77 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !78)
!78 = !DILocation(line: 75, column: 46, scope: !6)
!79 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !78)
!80 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !78)
!81 = !DILocation(line: 77, column: 25, scope: !6)
!82 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !78)
!83 = !DILocation(line: 78, column: 36, scope: !6)
!84 = !DILocation(line: 78, column: 29, scope: !6)
!85 = !DILocation(line: 78, column: 53, scope: !6)
!86 = !DILocation(line: 47, column: 4, scope: !6)
