; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %8 = lshr i32 %7, 7, !dbg !9
  %.lobit = and i32 %8, 1, !dbg !9
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !10
  %10 = shl i32 %9, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %10, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = insertelement <8 x i1> poison, i1 %12, i64 0, !dbg !14
  %14 = shufflevector <8 x i1> %13, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !14
  %15 = shl i32 %7, 2, !dbg !15
  %16 = and i32 %15, 1020, !dbg !15
  %17 = zext nneg i32 %16 to i64, !dbg !16
  %18 = shl i32 %7, 3, !dbg !15
  %19 = and i32 %18, 1016, !dbg !15
  %20 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %22 = mul i32 %11, 3072, !dbg !17
  %23 = or disjoint i32 %22, %19
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %17, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %24, i1 true) #4, !dbg !19
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !19
  %28 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractelement <2 x bfloat> %27, i64 0, !dbg !19
  %31 = extractelement <2 x bfloat> %27, i64 1, !dbg !19
  %32 = extractelement <2 x bfloat> %29, i64 0, !dbg !19
  %33 = extractelement <2 x bfloat> %29, i64 1, !dbg !19
  %34 = fpext bfloat %30 to float, !dbg !20
  %35 = fpext bfloat %31 to float, !dbg !20
  %36 = fpext bfloat %32 to float, !dbg !20
  %37 = fpext bfloat %33 to float, !dbg !20
  %38 = sext i32 %23 to i64, !dbg !21
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %12) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !22
  %49 = fsub float 0.000000e+00, %34, !dbg !23
  %50 = fsub float 0.000000e+00, %35, !dbg !23
  %51 = fsub float 0.000000e+00, %36, !dbg !23
  %52 = fsub float 0.000000e+00, %37, !dbg !23
  %53 = fmul float %49, 0x3FF7154760000000, !dbg !27
  %54 = tail call float @llvm.nvvm.ex2.approx.f(float %53), !dbg !27
  %55 = fmul float %50, 0x3FF7154760000000, !dbg !27
  %56 = tail call float @llvm.nvvm.ex2.approx.f(float %55), !dbg !27
  %57 = fmul float %51, 0x3FF7154760000000, !dbg !27
  %58 = tail call float @llvm.nvvm.ex2.approx.f(float %57), !dbg !27
  %59 = fmul float %52, 0x3FF7154760000000, !dbg !27
  %60 = tail call float @llvm.nvvm.ex2.approx.f(float %59), !dbg !27
  %61 = fadd float %54, 1.000000e+00, !dbg !28
  %62 = fadd float %56, 1.000000e+00, !dbg !28
  %63 = fadd float %58, 1.000000e+00, !dbg !28
  %64 = fadd float %60, 1.000000e+00, !dbg !28
  %65 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %61), !dbg !29
  %66 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %62), !dbg !29
  %67 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %63), !dbg !29
  %68 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %64), !dbg !29
  %69 = fmul float %65, %34, !dbg !30
  %70 = fmul float %66, %35, !dbg !30
  %71 = fmul float %67, %36, !dbg !30
  %72 = fmul float %68, %37, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %73 = bitcast float %69 to i32, !dbg !31
  %74 = bitcast float %70 to i32, !dbg !31
  %75 = bitcast float %71 to i32, !dbg !31
  %76 = bitcast float %72 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %21, i32 %73, i32 %74, i32 %75, i32 %76, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %77 = shufflevector <2 x bfloat> %42, <2 x bfloat> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %78 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %79 = shufflevector <8 x bfloat> %77, <8 x bfloat> %78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %80 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %81 = shufflevector <8 x bfloat> %79, <8 x bfloat> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %82 = shufflevector <2 x bfloat> %48, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %83 = shufflevector <8 x bfloat> %81, <8 x bfloat> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %84 = shufflevector <2 x bfloat> %48, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %85 = shufflevector <8 x bfloat> %83, <8 x bfloat> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %86 = fpext <8 x bfloat> %85 to <8 x float>, !dbg !32
  %87 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %88 = fmul <8 x float> %87, %86, !dbg !31
  %89 = fadd <8 x float> %88, zeroinitializer, !dbg !33
  %90 = or disjoint i64 %17, 1024, !dbg !34
  %91 = getelementptr bfloat, ptr addrspace(1) %0, i64 %90, !dbg !18
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %91, i1 true) #4, !dbg !19
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !19
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !19
  %95 = extractvalue { i32, i32 } %92, 1, !dbg !19
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !19
  %97 = extractelement <2 x bfloat> %94, i64 0, !dbg !19
  %98 = extractelement <2 x bfloat> %94, i64 1, !dbg !19
  %99 = extractelement <2 x bfloat> %96, i64 0, !dbg !19
  %100 = extractelement <2 x bfloat> %96, i64 1, !dbg !19
  %101 = fpext bfloat %97 to float, !dbg !20
  %102 = fpext bfloat %98 to float, !dbg !20
  %103 = fpext bfloat %99 to float, !dbg !20
  %104 = fpext bfloat %100 to float, !dbg !20
  %105 = add i32 %23, 1024, !dbg !35
  %106 = sext i32 %105 to i64, !dbg !21
  %107 = getelementptr bfloat, ptr addrspace(1) %1, i64 %106, !dbg !21
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %107, i1 %12) #4, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !22
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !22
  %111 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !22
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !22
  %113 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !22
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !22
  %115 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !22
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !22
  %117 = fsub float 0.000000e+00, %101, !dbg !23
  %118 = fsub float 0.000000e+00, %102, !dbg !23
  %119 = fsub float 0.000000e+00, %103, !dbg !23
  %120 = fsub float 0.000000e+00, %104, !dbg !23
  %121 = fmul float %117, 0x3FF7154760000000, !dbg !27
  %122 = tail call float @llvm.nvvm.ex2.approx.f(float %121), !dbg !27
  %123 = fmul float %118, 0x3FF7154760000000, !dbg !27
  %124 = tail call float @llvm.nvvm.ex2.approx.f(float %123), !dbg !27
  %125 = fmul float %119, 0x3FF7154760000000, !dbg !27
  %126 = tail call float @llvm.nvvm.ex2.approx.f(float %125), !dbg !27
  %127 = fmul float %120, 0x3FF7154760000000, !dbg !27
  %128 = tail call float @llvm.nvvm.ex2.approx.f(float %127), !dbg !27
  %129 = fadd float %122, 1.000000e+00, !dbg !28
  %130 = fadd float %124, 1.000000e+00, !dbg !28
  %131 = fadd float %126, 1.000000e+00, !dbg !28
  %132 = fadd float %128, 1.000000e+00, !dbg !28
  %133 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %129), !dbg !29
  %134 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %130), !dbg !29
  %135 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %131), !dbg !29
  %136 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %132), !dbg !29
  %137 = fmul float %133, %101, !dbg !30
  %138 = fmul float %134, %102, !dbg !30
  %139 = fmul float %135, %103, !dbg !30
  %140 = fmul float %136, %104, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %141 = bitcast float %137 to i32, !dbg !31
  %142 = bitcast float %138 to i32, !dbg !31
  %143 = bitcast float %139 to i32, !dbg !31
  %144 = bitcast float %140 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %21, i32 %141, i32 %142, i32 %143, i32 %144, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %145 = shufflevector <2 x bfloat> %110, <2 x bfloat> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %146 = shufflevector <2 x bfloat> %114, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %147 = shufflevector <8 x bfloat> %145, <8 x bfloat> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %148 = shufflevector <2 x bfloat> %114, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %149 = shufflevector <8 x bfloat> %147, <8 x bfloat> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %150 = shufflevector <2 x bfloat> %116, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %151 = shufflevector <8 x bfloat> %149, <8 x bfloat> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %152 = shufflevector <2 x bfloat> %116, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %153 = shufflevector <8 x bfloat> %151, <8 x bfloat> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %154 = fpext <8 x bfloat> %153 to <8 x float>, !dbg !32
  %155 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %156 = fmul <8 x float> %155, %154, !dbg !31
  %157 = fadd <8 x float> %89, %156, !dbg !33
  %158 = or disjoint i64 %17, 2048, !dbg !34
  %159 = getelementptr bfloat, ptr addrspace(1) %0, i64 %158, !dbg !18
  %160 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %159, i1 true) #4, !dbg !19
  %161 = extractvalue { i32, i32 } %160, 0, !dbg !19
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !19
  %163 = extractvalue { i32, i32 } %160, 1, !dbg !19
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !19
  %165 = extractelement <2 x bfloat> %162, i64 0, !dbg !19
  %166 = extractelement <2 x bfloat> %162, i64 1, !dbg !19
  %167 = extractelement <2 x bfloat> %164, i64 0, !dbg !19
  %168 = extractelement <2 x bfloat> %164, i64 1, !dbg !19
  %169 = fpext bfloat %165 to float, !dbg !20
  %170 = fpext bfloat %166 to float, !dbg !20
  %171 = fpext bfloat %167 to float, !dbg !20
  %172 = fpext bfloat %168 to float, !dbg !20
  %173 = add i32 %23, 2048, !dbg !35
  %174 = sext i32 %173 to i64, !dbg !21
  %175 = getelementptr bfloat, ptr addrspace(1) %1, i64 %174, !dbg !21
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %175, i1 %12) #4, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !22
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !22
  %179 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !22
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !22
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !22
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !22
  %185 = fsub float 0.000000e+00, %169, !dbg !23
  %186 = fsub float 0.000000e+00, %170, !dbg !23
  %187 = fsub float 0.000000e+00, %171, !dbg !23
  %188 = fsub float 0.000000e+00, %172, !dbg !23
  %189 = fmul float %185, 0x3FF7154760000000, !dbg !27
  %190 = tail call float @llvm.nvvm.ex2.approx.f(float %189), !dbg !27
  %191 = fmul float %186, 0x3FF7154760000000, !dbg !27
  %192 = tail call float @llvm.nvvm.ex2.approx.f(float %191), !dbg !27
  %193 = fmul float %187, 0x3FF7154760000000, !dbg !27
  %194 = tail call float @llvm.nvvm.ex2.approx.f(float %193), !dbg !27
  %195 = fmul float %188, 0x3FF7154760000000, !dbg !27
  %196 = tail call float @llvm.nvvm.ex2.approx.f(float %195), !dbg !27
  %197 = fadd float %190, 1.000000e+00, !dbg !28
  %198 = fadd float %192, 1.000000e+00, !dbg !28
  %199 = fadd float %194, 1.000000e+00, !dbg !28
  %200 = fadd float %196, 1.000000e+00, !dbg !28
  %201 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %197), !dbg !29
  %202 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %198), !dbg !29
  %203 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %199), !dbg !29
  %204 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %200), !dbg !29
  %205 = fmul float %201, %169, !dbg !30
  %206 = fmul float %202, %170, !dbg !30
  %207 = fmul float %203, %171, !dbg !30
  %208 = fmul float %204, %172, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %209 = bitcast float %205 to i32, !dbg !31
  %210 = bitcast float %206 to i32, !dbg !31
  %211 = bitcast float %207 to i32, !dbg !31
  %212 = bitcast float %208 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %21, i32 %209, i32 %210, i32 %211, i32 %212, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %213 = shufflevector <2 x bfloat> %178, <2 x bfloat> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %214 = shufflevector <2 x bfloat> %182, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %215 = shufflevector <8 x bfloat> %213, <8 x bfloat> %214, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %216 = shufflevector <2 x bfloat> %182, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %217 = shufflevector <8 x bfloat> %215, <8 x bfloat> %216, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %218 = shufflevector <2 x bfloat> %184, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %219 = shufflevector <8 x bfloat> %217, <8 x bfloat> %218, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %220 = shufflevector <2 x bfloat> %184, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %221 = shufflevector <8 x bfloat> %219, <8 x bfloat> %220, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %222 = fpext <8 x bfloat> %221 to <8 x float>, !dbg !32
  %223 = load <8 x float>, ptr addrspace(3) %20, align 16, !dbg !31
  %224 = fmul <8 x float> %223, %222, !dbg !31
  %225 = fadd <8 x float> %157, %224, !dbg !33
  %226 = select <8 x i1> %14, <8 x float> %225, <8 x float> zeroinitializer, !dbg !14
  %227 = and i32 %7, 1, !dbg !9
  %228 = lshr i32 %7, 5, !dbg !9
  %229 = and i32 %7, 31, !dbg !9
  %230 = or disjoint i32 %10, %227, !dbg !12
  %231 = icmp slt i32 %230, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %shift = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %232 = fadd <8 x float> %226, %shift, !dbg !38
  %shift30 = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %233 = fadd <8 x float> %shift30, %232, !dbg !38
  %shift31 = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %234 = fadd <8 x float> %shift31, %233, !dbg !38
  %shift32 = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %235 = fadd <8 x float> %shift32, %234, !dbg !38
  %shift33 = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %236 = fadd <8 x float> %shift33, %235, !dbg !38
  %shift34 = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %237 = fadd <8 x float> %shift34, %236, !dbg !38
  %shift35 = shufflevector <8 x float> %226, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %238 = fadd <8 x float> %shift35, %237, !dbg !38
  %239 = extractelement <8 x float> %238, i64 0, !dbg !38
  %240 = bitcast float %239 to i32, !dbg !36
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 16, i32 31), !dbg !36
  %242 = bitcast i32 %241 to float, !dbg !36
  %243 = fadd float %239, %242, !dbg !38
  %244 = bitcast float %243 to i32, !dbg !36
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !36
  %246 = bitcast i32 %245 to float, !dbg !36
  %247 = fadd float %243, %246, !dbg !38
  %248 = bitcast float %247 to i32, !dbg !36
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !36
  %250 = bitcast i32 %249 to float, !dbg !36
  %251 = fadd float %247, %250, !dbg !38
  %252 = bitcast float %251 to i32, !dbg !36
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !36
  %254 = bitcast i32 %253 to float, !dbg !36
  %255 = fadd float %251, %254, !dbg !38
  %256 = bitcast float %255 to i32, !dbg !36
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !36
  %258 = bitcast i32 %257 to float, !dbg !36
  %259 = fadd float %255, %258, !dbg !38
  %260 = and i32 %228, 3, !dbg !36
  %261 = icmp eq i32 %229, 0, !dbg !36
  %262 = shl nuw nsw i32 %.lobit, 2, !dbg !36
  %263 = or disjoint i32 %262, %260, !dbg !36
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !36
  %265 = bitcast float %259 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 %261) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %266 = icmp slt i32 %7, 8, !dbg !36
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !36
  %268 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %267, i1 %266) #4, !dbg !36
  %269 = bitcast i32 %268 to float, !dbg !36
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !36
  %271 = bitcast i32 %270 to float, !dbg !36
  %272 = fadd float %269, %271, !dbg !38
  %273 = bitcast float %272 to i32, !dbg !36
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !36
  %275 = bitcast i32 %274 to float, !dbg !36
  %276 = fadd float %272, %275, !dbg !38
  %277 = and i32 %7, 3, !dbg !36
  %278 = icmp eq i32 %277, 0, !dbg !36
  %279 = and i1 %266, %278, !dbg !36
  %280 = bitcast float %276 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %280, i1 %279) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !36
  %282 = load i32, ptr addrspace(3) %281, align 16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %283 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !40
  %284 = insertelement <1 x i32> poison, i32 %282, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %285 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %227, !dbg !40
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !40
  %287 = sext i32 %230 to i64, !dbg !41
  %288 = getelementptr float, ptr addrspace(1) %2, i64 %287, !dbg !41
  %289 = and i32 %7, 254, !dbg !42
  %290 = icmp eq i32 %289, 0, !dbg !42
  %291 = and i1 %290, %231, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %288, i1 %291) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 44, scope: !6)
!10 = !DILocation(line: 23, column: 28, scope: !6)
!11 = !DILocation(line: 23, column: 33, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 47, column: 50, scope: !6)
!15 = !DILocation(line: 26, column: 37, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 46, scope: !6)
!18 = !DILocation(line: 36, column: 34, scope: !6)
!19 = !DILocation(line: 36, column: 41, scope: !6)
!20 = !DILocation(line: 36, column: 94, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 39, column: 26, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 40, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 22, scope: !6)
!32 = !DILocation(line: 37, column: 113, scope: !6)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 31, column: 31, scope: !6)
!35 = !DILocation(line: 37, column: 41, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !24, inlinedAt: !37)
!37 = !DILocation(line: 48, column: 27, scope: !6)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!40 = !DILocation(line: 48, column: 30, scope: !6)
!41 = !DILocation(line: 49, column: 25, scope: !6)
!42 = !DILocation(line: 49, column: 37, scope: !6)
!43 = !DILocation(line: 49, column: 4, scope: !6)
