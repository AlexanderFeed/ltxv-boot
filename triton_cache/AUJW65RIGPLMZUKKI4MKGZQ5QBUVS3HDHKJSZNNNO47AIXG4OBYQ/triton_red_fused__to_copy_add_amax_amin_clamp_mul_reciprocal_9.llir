; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 64, !dbg !11
  %12 = lshr i32 %10, 1, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %9, !dbg !12
  %15 = icmp slt i32 %14, 3600, !dbg !13
  %16 = shl i32 %10, 2, !dbg !14
  %17 = and i32 %16, 4, !dbg !14
  %18 = shl i32 %14, 7, !dbg !15
  %19 = add i32 %18, 65536, !dbg !16
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !17
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %22, !dbg !18

22:                                               ; preds = %7, %22
  %23 = phi i32 [ 0, %7 ], [ %47, %22 ]
  %24 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %7 ], [ %46, %22 ]
  %25 = lshr i32 %23, 7, !dbg !19
  %26 = mul nuw nsw i32 %25, 526336, !dbg !20
  %27 = add i32 %26, %19, !dbg !21
  %.masked = and i32 %23, 120, !dbg !22
  %28 = or disjoint i32 %27, %.masked, !dbg !23
  %29 = or disjoint i32 %28, %17, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %15) #4, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !25
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !25
  %37 = fcmp uno <8 x float> %24, zeroinitializer, !dbg !26
  %38 = shufflevector <2 x bfloat> %34, <2 x bfloat> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %39 = fpext <4 x bfloat> %38 to <4 x float>, !dbg !30
  %40 = shufflevector <4 x float> %39, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %41 = fcmp ogt <8 x float> %24, %40, !dbg !31
  %42 = fcmp olt <8 x float> %24, %40, !dbg !31
  %43 = shufflevector <8 x i1> %41, <8 x i1> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !31
  %44 = or <8 x i1> %37, %43, !dbg !32
  %45 = select <8 x i1> %44, <8 x float> %24, <8 x float> %40, !dbg !33
  %46 = select <8 x i1> %21, <8 x float> %45, <8 x float> %24, !dbg !17
  %47 = add nuw nsw i32 %23, 8, !dbg !18
  %48 = icmp samesign ult i32 %23, 3064, !dbg !18
  br i1 %48, label %22, label %49, !dbg !18

49:                                               ; preds = %22
  %50 = icmp eq i32 %11, 0, !dbg !11
  %51 = and i32 %10, 63, !dbg !11
  %52 = or disjoint i32 %9, %51, !dbg !12
  %53 = icmp slt i32 %52, 3600, !dbg !13
  %54 = extractelement <8 x float> %46, i64 4, !dbg !34
  %55 = extractelement <8 x float> %46, i64 5, !dbg !34
  %56 = fcmp olt float %54, %55, !dbg !34
  %57 = fcmp uno float %54, 0.000000e+00, !dbg !37
  %58 = or i1 %56, %57, !dbg !38
  %59 = select i1 %58, float %54, float %55, !dbg !39
  %60 = extractelement <8 x float> %46, i64 6, !dbg !34
  %61 = fcmp olt float %59, %60, !dbg !34
  %62 = fcmp uno float %59, 0.000000e+00, !dbg !37
  %63 = or i1 %61, %62, !dbg !38
  %64 = select i1 %63, float %59, float %60, !dbg !39
  %65 = extractelement <8 x float> %46, i64 7, !dbg !34
  %66 = fcmp olt float %64, %65, !dbg !34
  %67 = fcmp uno float %64, 0.000000e+00, !dbg !37
  %68 = or i1 %66, %67, !dbg !38
  %69 = select i1 %68, float %64, float %65, !dbg !39
  %70 = bitcast float %69 to i32, !dbg !40
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !40
  %72 = bitcast i32 %71 to float, !dbg !40
  %73 = fcmp olt float %69, %72, !dbg !34
  %74 = fcmp uno float %69, 0.000000e+00, !dbg !37
  %75 = or i1 %74, %73, !dbg !38
  %76 = select i1 %75, float %69, float %72, !dbg !39
  %77 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !41
  %78 = bitcast float %76 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %79 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %51, !dbg !41
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !41
  %81 = extractelement <8 x float> %46, i64 0, !dbg !42
  %82 = extractelement <8 x float> %46, i64 1, !dbg !42
  %83 = fcmp ogt float %81, %82, !dbg !42
  %84 = fcmp uno float %81, 0.000000e+00, !dbg !44
  %85 = or i1 %83, %84, !dbg !45
  %86 = select i1 %85, float %81, float %82, !dbg !46
  %87 = extractelement <8 x float> %46, i64 2, !dbg !42
  %88 = fcmp ogt float %86, %87, !dbg !42
  %89 = fcmp uno float %86, 0.000000e+00, !dbg !44
  %90 = or i1 %88, %89, !dbg !45
  %91 = select i1 %90, float %86, float %87, !dbg !46
  %92 = extractelement <8 x float> %46, i64 3, !dbg !42
  %93 = fcmp ogt float %91, %92, !dbg !42
  %94 = fcmp uno float %91, 0.000000e+00, !dbg !44
  %95 = or i1 %93, %94, !dbg !45
  %96 = select i1 %95, float %91, float %92, !dbg !46
  %97 = bitcast float %96 to i32, !dbg !47
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !47
  %99 = bitcast i32 %98 to float, !dbg !47
  %100 = fcmp ogt float %96, %99, !dbg !42
  %101 = fcmp uno float %96, 0.000000e+00, !dbg !44
  %102 = or i1 %101, %100, !dbg !45
  %103 = select i1 %102, float %96, float %99, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %104 = bitcast float %103 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %104, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %105 = load float, ptr addrspace(3) %79, align 4, !dbg !48
  %106 = sext i32 %52 to i64, !dbg !49
  %107 = getelementptr bfloat, ptr addrspace(1) %1, i64 %106, !dbg !49
  %108 = fptrunc float %80 to bfloat, !dbg !41
  %109 = bitcast bfloat %108 to i16, !dbg !41
  %110 = and i1 %50, %53, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %109, ptr addrspace(1) %107, i1 %110) #4, !dbg !41
  %111 = getelementptr bfloat, ptr addrspace(1) %2, i64 %106, !dbg !50
  %112 = fptrunc float %105 to bfloat, !dbg !48
  %113 = bitcast bfloat %112 to i16, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %113, ptr addrspace(1) %111, i1 %110) #4, !dbg !48
  %.inv = fcmp oge float %76, 0.000000e+00, !dbg !51
  %114 = select i1 %.inv, float 0.000000e+00, float %76, !dbg !51
  %115 = fsub float 0.000000e+00, %114, !dbg !53
  %.inv4 = fcmp ole float %103, 0.000000e+00, !dbg !54
  %116 = select i1 %.inv4, float 0.000000e+00, float %103, !dbg !54
  %117 = fcmp ogt float %115, %116, !dbg !56
  %118 = fcmp uno float %115, 0.000000e+00, !dbg !58
  %119 = or i1 %118, %117, !dbg !59
  %120 = select i1 %119, float %115, float %116, !dbg !60
  %121 = fmul float %120, 0x3F80204080000000, !dbg !61
  %122 = fcmp ogt float %121, 0x3EE4F8B580000000, !dbg !62
  %123 = fcmp uno float %121, 0.000000e+00, !dbg !64
  %124 = or i1 %122, %123, !dbg !65
  %125 = select i1 %124, float %121, float 0x3EE4F8B580000000, !dbg !66
  %126 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %125), !dbg !67
  %127 = mul i32 %14, 3072, !dbg !68
  br label %128, !dbg !69

128:                                              ; preds = %49, %128
  %indvars.iv = phi i64 [ 0, %49 ], [ %indvars.iv.next, %128 ]
  %129 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !70
  %130 = lshr i32 %129, 7, !dbg !70
  %131 = mul nuw nsw i32 %130, 526336, !dbg !71
  %132 = add i32 %131, %19, !dbg !72
  %133 = trunc i64 %indvars.iv to i32, !dbg !73
  %134 = or disjoint i32 %17, %133, !dbg !73
  %135 = and i32 %134, 124, !dbg !73
  %136 = or disjoint i32 %132, %135, !dbg !74
  %137 = sext i32 %136 to i64, !dbg !75
  %138 = getelementptr bfloat, ptr addrspace(1) %0, i64 %137, !dbg !75
  %139 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %138, i1 %15) #4, !dbg !76
  %140 = extractvalue { i32, i32 } %139, 0, !dbg !76
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !76
  %142 = extractvalue { i32, i32 } %139, 1, !dbg !76
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !76
  %144 = extractelement <2 x bfloat> %141, i64 0, !dbg !76
  %145 = extractelement <2 x bfloat> %141, i64 1, !dbg !76
  %146 = extractelement <2 x bfloat> %143, i64 0, !dbg !76
  %147 = extractelement <2 x bfloat> %143, i64 1, !dbg !76
  %148 = fpext bfloat %144 to float, !dbg !77
  %149 = fpext bfloat %145 to float, !dbg !77
  %150 = fpext bfloat %146 to float, !dbg !77
  %151 = fpext bfloat %147 to float, !dbg !77
  %152 = fmul float %126, %148, !dbg !78
  %153 = fmul float %126, %149, !dbg !78
  %154 = fmul float %126, %150, !dbg !78
  %155 = fmul float %126, %151, !dbg !78
  %156 = tail call float @llvm.nvvm.round.f(float %152) #4, !dbg !79
  %157 = tail call float @llvm.nvvm.round.f(float %153) #4, !dbg !79
  %158 = tail call float @llvm.nvvm.round.f(float %154) #4, !dbg !79
  %159 = tail call float @llvm.nvvm.round.f(float %155) #4, !dbg !79
  %160 = insertelement <4 x float> poison, float %156, i64 0, !dbg !80
  %161 = insertelement <4 x float> %160, float %157, i64 1, !dbg !80
  %162 = insertelement <4 x float> %161, float %158, i64 2, !dbg !80
  %163 = insertelement <4 x float> %162, float %159, i64 3, !dbg !80
  %164 = fcmp ogt <4 x float> %163, splat (float -1.270000e+02), !dbg !80
  %165 = fcmp uno <4 x float> %163, zeroinitializer, !dbg !82
  %166 = or <4 x i1> %164, %165, !dbg !83
  %167 = select <4 x i1> %166, <4 x float> %163, <4 x float> splat (float -1.270000e+02), !dbg !84
  %168 = fcmp olt <4 x float> %167, splat (float 1.270000e+02), !dbg !85
  %169 = fcmp uno <4 x float> %167, zeroinitializer, !dbg !87
  %170 = or <4 x i1> %168, %169, !dbg !88
  %171 = fptosi <4 x float> %167 to <4 x i8>, !dbg !89
  %172 = select <4 x i1> %170, <4 x i8> %171, <4 x i8> splat (i8 127), !dbg !90
  %173 = add i32 %134, %127, !dbg !91
  %174 = sext i32 %173 to i64, !dbg !92
  %175 = getelementptr i8, ptr addrspace(1) %3, i64 %174, !dbg !92
  %176 = bitcast <4 x i8> %172 to i32, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %175, i1 %15) #4, !dbg !93
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !69
  %177 = icmp samesign ult i64 %indvars.iv, 3064, !dbg !69
  br i1 %177, label %128, label %178, !dbg !69

178:                                              ; preds = %128
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqx4umnpxfbcu2l6rryhc34knavpax5uagm3mqzm7aatf72hatl.py", directory: "/tmp/torchinductor_root/iq")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 37, column: 42, scope: !6)
!17 = !DILocation(line: 42, column: 48, scope: !6)
!18 = !DILocation(line: 31, column: 40, scope: !6)
!19 = !DILocation(line: 37, column: 67, scope: !6)
!20 = !DILocation(line: 37, column: 59, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 83, scope: !6)
!23 = !DILocation(line: 37, column: 76, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 91, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 41, column: 45, scope: !6)
!30 = !DILocation(line: 37, column: 152, scope: !6)
!31 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 94, column: 15, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!36 = !DILocation(line: 43, column: 38, scope: !6)
!37 = !DILocation(line: 96, column: 21, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 96, column: 16, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 97, column: 29, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !36)
!41 = !DILocation(line: 45, column: 36, scope: !6)
!42 = !DILocation(line: 102, column: 15, scope: !35, inlinedAt: !43)
!43 = !DILocation(line: 44, column: 38, scope: !6)
!44 = !DILocation(line: 104, column: 21, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 104, column: 16, scope: !35, inlinedAt: !43)
!46 = !DILocation(line: 105, column: 29, scope: !35, inlinedAt: !43)
!47 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !43)
!48 = !DILocation(line: 46, column: 36, scope: !6)
!49 = !DILocation(line: 45, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 25, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 47, column: 40, scope: !6)
!70 = !DILocation(line: 53, column: 67, scope: !6)
!71 = !DILocation(line: 53, column: 59, scope: !6)
!72 = !DILocation(line: 53, column: 51, scope: !6)
!73 = !DILocation(line: 53, column: 83, scope: !6)
!74 = !DILocation(line: 53, column: 76, scope: !6)
!75 = !DILocation(line: 53, column: 34, scope: !6)
!76 = !DILocation(line: 53, column: 91, scope: !6)
!77 = !DILocation(line: 53, column: 153, scope: !6)
!78 = !DILocation(line: 69, column: 23, scope: !6)
!79 = !DILocation(line: 70, column: 36, scope: !6)
!80 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !81)
!81 = !DILocation(line: 73, column: 46, scope: !6)
!82 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !81)
!83 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !81)
!84 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !81)
!85 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !86)
!86 = !DILocation(line: 75, column: 46, scope: !6)
!87 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !86)
!88 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !86)
!89 = !DILocation(line: 77, column: 25, scope: !6)
!90 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !86)
!91 = !DILocation(line: 78, column: 36, scope: !6)
!92 = !DILocation(line: 78, column: 29, scope: !6)
!93 = !DILocation(line: 78, column: 53, scope: !6)
!94 = !DILocation(line: 47, column: 4, scope: !6)
