; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = icmp slt i32 %11, 86400, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = shl i32 %13, 2, !dbg !11
  %16 = and i32 %15, 124, !dbg !11
  %17 = sdiv i32 %11, 24, !dbg !12
  %18 = mul i32 %17, 24, !dbg !13
  %.decomposed = sub i32 %11, %18, !dbg !13
  %19 = shl i32 %11, 7, !dbg !14
  %20 = or disjoint i32 %16, %19, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !16
  %22 = getelementptr i32, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %12) #2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %28 = sext i32 %17 to i64, !dbg !18
  %29 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %12) #2, !dbg !19
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %12) #2, !dbg !19
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %12) #2, !dbg !19
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %12) #2, !dbg !19
  %34 = bitcast i16 %33 to bfloat, !dbg !19
  %35 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !20
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %12) #2, !dbg !21
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %12) #2, !dbg !21
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %12) #2, !dbg !21
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %12) #2, !dbg !21
  %40 = bitcast i16 %39 to bfloat, !dbg !21
  %41 = shl nsw i32 %.decomposed, 7, !dbg !22
  %42 = or disjoint i32 %16, %41, !dbg !23
  %43 = sext i32 %42 to i64, !dbg !24
  %44 = getelementptr bfloat, ptr addrspace(1) %3, i64 %43, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %12) #2, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !25
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !25
  %50 = getelementptr bfloat, ptr addrspace(1) %4, i64 %43, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %12) #2, !dbg !27
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !27
  %54 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !27
  %.inv = fcmp oge bfloat %34, 0xR0000, !dbg !28
  %56 = select i1 %.inv, bfloat 0xR0000, bfloat %34, !dbg !28
  %57 = fpext bfloat %56 to float, !dbg !28
  %58 = fsub float 0.000000e+00, %57, !dbg !32
  %.inv1 = fcmp ole bfloat %40, 0xR0000, !dbg !33
  %59 = select i1 %.inv1, bfloat 0xR0000, bfloat %40, !dbg !33
  %60 = fpext bfloat %59 to float, !dbg !33
  %61 = fcmp ogt float %58, %60, !dbg !35
  %62 = fcmp uno float %58, 0.000000e+00, !dbg !37
  %63 = or i1 %62, %61, !dbg !38
  %64 = select i1 %63, float %58, float %60, !dbg !39
  %65 = fmul float %64, 0x3F80204080000000, !dbg !40
  %66 = fcmp ogt float %65, 0x3EE4F8B580000000, !dbg !41
  %67 = fcmp uno float %65, 0.000000e+00, !dbg !43
  %68 = or i1 %66, %67, !dbg !44
  %69 = select i1 %68, float %65, float 0x3EE4F8B580000000, !dbg !45
  %70 = getelementptr bfloat, ptr addrspace(1) %5, i64 %21, !dbg !46
  %71 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !47
  %72 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !48
  %73 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !49
  %74 = insertelement <2 x i32> %73, i32 %25, i64 1, !dbg !49
  %75 = sitofp <2 x i32> %74 to <2 x float>, !dbg !49
  %76 = insertelement <2 x float> poison, float %69, i64 0, !dbg !50
  %77 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %78 = fmul <2 x float> %77, %75, !dbg !50
  %79 = fmul <2 x float> %78, %71, !dbg !51
  %80 = fadd <2 x float> %79, %72, !dbg !52
  %81 = fmul <2 x float> %80, %80, !dbg !53
  %82 = fmul <2 x float> %80, %80, !dbg !53
  %shift = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %83 = fadd <2 x float> %81, %shift, !dbg !54
  %84 = fptrunc <2 x float> %80 to <2 x bfloat>, !dbg !59
  %85 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !47
  %86 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !48
  %87 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !49
  %88 = insertelement <2 x i32> %87, i32 %27, i64 1, !dbg !49
  %89 = sitofp <2 x i32> %88 to <2 x float>, !dbg !49
  %90 = fmul <2 x float> %77, %89, !dbg !50
  %91 = fmul <2 x float> %90, %85, !dbg !51
  %92 = fadd <2 x float> %91, %86, !dbg !52
  %93 = fmul <2 x float> %92, %92, !dbg !53
  %94 = fmul <2 x float> %92, %92, !dbg !53
  %95 = fadd <2 x float> %93, %83, !dbg !54
  %shift2 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %96 = fadd <2 x float> %shift2, %95, !dbg !54
  %97 = extractelement <2 x float> %96, i64 0, !dbg !54
  %98 = select i1 %12, float %97, float 0.000000e+00, !dbg !54
  %99 = bitcast float %98 to i32, !dbg !60
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !60
  %101 = bitcast i32 %100 to float, !dbg !60
  %102 = fadd float %98, %101, !dbg !54
  %103 = bitcast float %102 to i32, !dbg !60
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !60
  %105 = bitcast i32 %104 to float, !dbg !60
  %106 = fadd float %102, %105, !dbg !54
  %107 = bitcast float %106 to i32, !dbg !60
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !60
  %109 = bitcast i32 %108 to float, !dbg !60
  %110 = fadd float %106, %109, !dbg !54
  %111 = bitcast float %110 to i32, !dbg !60
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !60
  %113 = bitcast i32 %112 to float, !dbg !60
  %114 = fadd float %110, %113, !dbg !54
  %115 = bitcast float %114 to i32, !dbg !60
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !60
  %117 = bitcast i32 %116 to float, !dbg !60
  %118 = fadd float %114, %117, !dbg !54
  %119 = fptrunc <2 x float> %92 to <2 x bfloat>, !dbg !59
  %120 = bitcast <2 x bfloat> %84 to i32, !dbg !59
  %121 = bitcast <2 x bfloat> %119 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %121, ptr addrspace(1) %70, i1 %12) #2, !dbg !59
  %122 = sext i32 %11 to i64, !dbg !61
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %122, !dbg !61
  %124 = icmp eq i32 %14, 0, !dbg !62
  %125 = bitcast float %118 to i32, !dbg !62
  %126 = and i1 %12, %124, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %123, i1 %126) #2, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6l4nhxfwkm35it64df37pcj5fh6uxgbsrmcpdepbvu2smp5xxll.py", directory: "/tmp/torchinductor_root/6l")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_4, !"reqntidx", i32 32}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_4", linkageName: "triton_per_fused__to_copy_add_mean_pow_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 26, column: 21, scope: !6)
!11 = !DILocation(line: 27, column: 38, scope: !6)
!12 = !DILocation(line: 34, column: 19, scope: !6)
!13 = !DILocation(line: 35, column: 19, scope: !6)
!14 = !DILocation(line: 36, column: 41, scope: !6)
!15 = !DILocation(line: 36, column: 37, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 46, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 35, scope: !6)
!20 = !DILocation(line: 38, column: 30, scope: !6)
!21 = !DILocation(line: 38, column: 35, scope: !6)
!22 = !DILocation(line: 39, column: 42, scope: !6)
!23 = !DILocation(line: 39, column: 38, scope: !6)
!24 = !DILocation(line: 39, column: 31, scope: !6)
!25 = !DILocation(line: 39, column: 47, scope: !6)
!26 = !DILocation(line: 40, column: 31, scope: !6)
!27 = !DILocation(line: 40, column: 47, scope: !6)
!28 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 43, column: 40, scope: !6)
!32 = !DILocation(line: 44, column: 12, scope: !6)
!33 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 45, column: 40, scope: !6)
!35 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !36)
!36 = !DILocation(line: 46, column: 40, scope: !6)
!37 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !36)
!39 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !36)
!40 = !DILocation(line: 48, column: 19, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !42)
!42 = !DILocation(line: 51, column: 42, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !42)
!45 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !42)
!46 = !DILocation(line: 61, column: 25, scope: !6)
!47 = !DILocation(line: 39, column: 98, scope: !6)
!48 = !DILocation(line: 40, column: 98, scope: !6)
!49 = !DILocation(line: 41, column: 19, scope: !6)
!50 = !DILocation(line: 53, column: 19, scope: !6)
!51 = !DILocation(line: 54, column: 20, scope: !6)
!52 = !DILocation(line: 55, column: 20, scope: !6)
!53 = !DILocation(line: 57, column: 20, scope: !6)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!55 = distinct !DILexicalBlockFile(scope: !57, file: !56, discriminator: 0)
!56 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!57 = distinct !DILexicalBlockFile(scope: !6, file: !56, discriminator: 0)
!58 = !DILocation(line: 60, column: 26, scope: !6)
!59 = !DILocation(line: 61, column: 48, scope: !6)
!60 = !DILocation(line: 286, column: 36, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 62, column: 25, scope: !6)
!62 = !DILocation(line: 62, column: 37, scope: !6)
!63 = !DILocation(line: 62, column: 4, scope: !6)
