; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 128, !dbg !11
  %.lobit = lshr exact i32 %20, 7, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 1, !dbg !14
  %26 = and i32 %25, 510, !dbg !14
  %27 = shl i32 %19, 2, !dbg !14
  %28 = and i32 %27, 508, !dbg !14
  %29 = sext i32 %22 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !15
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %35 = bitcast i16 %34 to bfloat, !dbg !16
  %36 = getelementptr bfloat, ptr addrspace(1) %5, i64 %29, !dbg !17
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %41 = bitcast i16 %40 to bfloat, !dbg !18
  %42 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %35, 0xR0000, !dbg !20
  %43 = select i1 %.inv, bfloat 0xR0000, bfloat %35, !dbg !20
  %44 = fpext bfloat %43 to float, !dbg !20
  %45 = fsub float 0.000000e+00, %44, !dbg !24
  %.inv4 = fcmp ole bfloat %41, 0xR0000, !dbg !25
  %46 = select i1 %.inv4, bfloat 0xR0000, bfloat %41, !dbg !25
  %47 = fpext bfloat %46 to float, !dbg !25
  %48 = fcmp ogt float %45, %47, !dbg !27
  %49 = fcmp uno float %45, 0.000000e+00, !dbg !29
  %50 = or i1 %49, %48, !dbg !30
  %51 = select i1 %50, float %45, float %47, !dbg !31
  %52 = fmul float %51, 0x3F80204080000000, !dbg !32
  %53 = fcmp ogt float %52, 0x3EE4F8B580000000, !dbg !33
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !35
  %55 = or i1 %53, %54, !dbg !36
  %56 = select i1 %55, float %52, float 0x3EE4F8B580000000, !dbg !37
  %57 = or disjoint i32 %42, %28
  %58 = and i32 %27, 1020
  %59 = lshr i32 %27, 7
  %60 = and i32 %59, 4
  %61 = add nuw nsw i32 %60, %58
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %61
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %64 = add nuw nsw i32 %26, 516
  %65 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %64
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %61
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %64
  %69 = zext nneg i32 %26 to i64, !dbg !38
  %70 = getelementptr inbounds nuw i8, ptr addrspace(3) %62, i32 4
  %71 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !39
  %72 = shufflevector <4 x i1> %71, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %73, !dbg !38

73:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %201, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %202, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %203, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %204, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %197, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %198, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %199, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %200, %._crit_edge ]
  %82 = phi <4 x float> [ zeroinitializer, %16 ], [ %196, %._crit_edge ]
  %83 = or disjoint i64 %indvars.iv, %69, !dbg !40
  %84 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %85 = add i32 %57, %84, !dbg !41
  %86 = sext i32 %85 to i64, !dbg !42
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !42
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %87, i1 %23) #5, !dbg !43
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !43
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !43
  %extelt.offset20 = lshr i32 %89, 16, !dbg !43
  %91 = trunc nuw i32 %extelt.offset20 to i16, !dbg !43
  %extelt.offset22 = lshr i32 %90, 16, !dbg !43
  %92 = trunc nuw i32 %extelt.offset22 to i16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %93 = trunc i32 %89 to i16, !dbg !44
  %94 = trunc i32 %90 to i16, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %62, i16 %93, i16 %91, i16 %94, i16 %92, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %95 = add nuw nsw i64 %83, 6144, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !46
  %97 = getelementptr bfloat, ptr addrspace(1) %2, i64 %95, !dbg !47
  %98 = getelementptr i32, ptr addrspace(1) %3, i64 %86, !dbg !48
  %99 = getelementptr bfloat, ptr addrspace(1) %6, i64 %83, !dbg !49
  %100 = getelementptr bfloat, ptr addrspace(1) %7, i64 %83, !dbg !50
  %101 = load <2 x bfloat>, ptr addrspace(3) %63, align 4, !dbg !44
  %102 = load <2 x bfloat>, ptr addrspace(3) %65, align 4, !dbg !44
  %103 = shufflevector <2 x bfloat> %101, <2 x bfloat> %102, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !44
  %104 = fpext <4 x bfloat> %103 to <4 x float>, !dbg !44
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %96, i1 true) #5, !dbg !51
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !51
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !51
  %108 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !51
  %109 = insertelement <2 x i32> %108, i32 %107, i64 1, !dbg !51
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !51
  %111 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %97, i1 true) #5, !dbg !52
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !52
  %113 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !53
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %23) #5, !dbg !54
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !54
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !54
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !54
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !54
  %119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %99, i1 true) #5, !dbg !55
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !55
  %121 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !56
  %122 = shufflevector <2 x float> %121, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !56
  %123 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %100, i1 true) #5, !dbg !57
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !57
  %125 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !58
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !58
  %127 = fadd <2 x float> %110, %113, !dbg !59
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !59
  %129 = sitofp i32 %115 to float, !dbg !60
  %130 = sitofp i32 %116 to float, !dbg !60
  %131 = sitofp i32 %117 to float, !dbg !60
  %132 = sitofp i32 %118 to float, !dbg !60
  %133 = fmul float %56, %129, !dbg !61
  %134 = fmul float %56, %130, !dbg !61
  %135 = fmul float %56, %131, !dbg !61
  %136 = fmul float %56, %132, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %137 = bitcast float %133 to i32, !dbg !61
  %138 = bitcast float %134 to i32, !dbg !61
  %139 = bitcast float %135 to i32, !dbg !61
  %140 = bitcast float %136 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %66, i32 %137, i32 %138, i32 %139, i32 %140, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %141 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !61
  %142 = load <2 x float>, ptr addrspace(3) %68, align 8, !dbg !61
  %143 = shufflevector <2 x float> %141, <2 x float> %142, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !62
  %144 = fmul <4 x float> %143, %122, !dbg !62
  %145 = fadd <4 x float> %144, %126, !dbg !63
  %146 = fmul <4 x float> %128, %145, !dbg !64
  %147 = fadd <4 x float> %146, %104, !dbg !65
  %148 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %148, label %._crit_edge, label %149, !dbg !67

149:                                              ; preds = %73
  %150 = fsub <4 x float> %147, %82, !dbg !69
  %151 = extractelement <4 x float> %150, i64 0, !dbg !69
  %152 = fsub <4 x float> %147, %82, !dbg !69
  %153 = extractelement <4 x float> %152, i64 1, !dbg !69
  %154 = fsub <4 x float> %147, %82, !dbg !69
  %155 = extractelement <4 x float> %154, i64 2, !dbg !69
  %156 = fsub <4 x float> %147, %82, !dbg !69
  %157 = extractelement <4 x float> %156, i64 3, !dbg !69
  %158 = fadd float %74, 1.000000e+00, !dbg !70
  %159 = fadd float %75, 1.000000e+00, !dbg !70
  %160 = fadd float %76, 1.000000e+00, !dbg !70
  %161 = fadd float %77, 1.000000e+00, !dbg !70
  %162 = tail call float @llvm.nvvm.div.full(float %151, float %158), !dbg !71
  %163 = tail call float @llvm.nvvm.div.full(float %153, float %159), !dbg !71
  %164 = tail call float @llvm.nvvm.div.full(float %155, float %160), !dbg !71
  %165 = tail call float @llvm.nvvm.div.full(float %157, float %161), !dbg !71
  %166 = insertelement <4 x float> poison, float %162, i64 0, !dbg !72
  %167 = insertelement <4 x float> %166, float %163, i64 1, !dbg !72
  %168 = insertelement <4 x float> %167, float %164, i64 2, !dbg !72
  %169 = insertelement <4 x float> %168, float %165, i64 3, !dbg !72
  %170 = fadd <4 x float> %82, %169, !dbg !72
  %171 = fsub <4 x float> %147, %170, !dbg !73
  %172 = fsub <4 x float> %147, %170, !dbg !73
  %173 = fsub <4 x float> %147, %170, !dbg !73
  %174 = fsub <4 x float> %147, %170, !dbg !73
  %175 = fmul <4 x float> %150, %171, !dbg !74
  %176 = extractelement <4 x float> %175, i64 0, !dbg !74
  %177 = fmul <4 x float> %152, %172, !dbg !74
  %178 = extractelement <4 x float> %177, i64 1, !dbg !74
  %179 = fmul <4 x float> %154, %173, !dbg !74
  %180 = extractelement <4 x float> %179, i64 2, !dbg !74
  %181 = fmul <4 x float> %156, %174, !dbg !74
  %182 = extractelement <4 x float> %181, i64 3, !dbg !74
  %183 = fadd float %78, %176, !dbg !75
  %184 = fadd float %79, %178, !dbg !75
  %185 = fadd float %80, %180, !dbg !75
  %186 = fadd float %81, %182, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %73, %149
  %187 = phi float [ %183, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %188 = phi float [ %184, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %189 = phi float [ %185, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %190 = phi float [ %186, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %191 = phi float [ %158, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %192 = phi float [ %159, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %193 = phi float [ %160, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %194 = phi float [ %161, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %195 = phi <4 x float> [ %170, %149 ], [ %147, %73 ]
  %196 = select <4 x i1> %72, <4 x float> %195, <4 x float> %82, !dbg !39
  %197 = select i1 %24, float %187, float %78, !dbg !76
  %198 = select i1 %24, float %188, float %79, !dbg !76
  %199 = select i1 %24, float %189, float %80, !dbg !76
  %200 = select i1 %24, float %190, float %81, !dbg !76
  %201 = select i1 %24, float %191, float %74, !dbg !77
  %202 = select i1 %24, float %192, float %75, !dbg !77
  %203 = select i1 %24, float %193, float %76, !dbg !77
  %204 = select i1 %24, float %194, float %77, !dbg !77
  %205 = getelementptr bfloat, ptr addrspace(1) %8, i64 %86, !dbg !78
  %206 = extractelement <4 x float> %147, i64 0, !dbg !79
  %207 = fptrunc float %206 to bfloat, !dbg !79
  %208 = extractelement <4 x float> %147, i64 1, !dbg !79
  %209 = fptrunc float %208 to bfloat, !dbg !79
  %210 = extractelement <4 x float> %147, i64 2, !dbg !79
  %211 = fptrunc float %210 to bfloat, !dbg !79
  %212 = extractelement <4 x float> %147, i64 3, !dbg !79
  %213 = fptrunc float %212 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %214 = bitcast bfloat %207 to i16, !dbg !79
  %215 = bitcast bfloat %209 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %63, i16 %214, i16 %215, i1 true) #5, !dbg !79
  %216 = bitcast bfloat %211 to i16, !dbg !79
  %217 = bitcast bfloat %213 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %65, i16 %216, i16 %217, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %.uncasted.extract43 = load i32, ptr addrspace(3) %62, align 8, !dbg !79
  %.uncasted.extract45 = load i32, ptr addrspace(3) %70, align 4, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract43, i32 %.uncasted.extract45, ptr addrspace(1) %205, i1 %23) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %218 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %218, label %73, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %219 = lshr i32 %19, 5, !dbg !11
  %220 = and i32 %19, 1, !dbg !11
  %221 = or disjoint i32 %18, %220, !dbg !12
  %222 = icmp slt i32 %221, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %223 = extractelement <4 x float> %196, i64 0, !dbg !82
  %224 = extractelement <4 x float> %196, i64 1, !dbg !82
  %225 = fsub float %224, %223, !dbg !82
  %226 = fadd float %201, %202, !dbg !84
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !85
  %228 = tail call float @llvm.nvvm.div.full(float %202, float %226), !dbg !86
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !87
  %230 = fmul float %225, %229, !dbg !88
  %231 = fadd float %223, %230, !dbg !89
  %232 = fadd float %197, %198, !dbg !90
  %233 = fmul float %225, %225, !dbg !91
  %234 = fmul float %233, %201, !dbg !92
  %235 = fmul float %234, %229, !dbg !93
  %236 = fadd float %232, %235, !dbg !94
  %237 = extractelement <4 x float> %196, i64 2, !dbg !82
  %238 = extractelement <4 x float> %196, i64 3, !dbg !82
  %239 = fsub float %238, %237, !dbg !82
  %240 = fadd float %203, %204, !dbg !84
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !85
  %242 = tail call float @llvm.nvvm.div.full(float %204, float %240), !dbg !86
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !87
  %244 = fmul float %239, %243, !dbg !88
  %245 = fadd float %237, %244, !dbg !89
  %246 = fadd float %199, %200, !dbg !90
  %247 = fmul float %239, %239, !dbg !91
  %248 = fmul float %247, %203, !dbg !92
  %249 = fmul float %248, %243, !dbg !93
  %250 = fadd float %246, %249, !dbg !94
  %251 = bitcast float %231 to i32, !dbg !80
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 16, i32 31), !dbg !80
  %253 = bitcast i32 %252 to float, !dbg !80
  %254 = bitcast float %236 to i32, !dbg !80
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 16, i32 31), !dbg !80
  %256 = bitcast i32 %255 to float, !dbg !80
  %257 = bitcast float %226 to i32, !dbg !80
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 16, i32 31), !dbg !80
  %259 = bitcast i32 %258 to float, !dbg !80
  %260 = fsub float %253, %231, !dbg !82
  %261 = fadd float %226, %259, !dbg !84
  %262 = fcmp oeq float %261, 0.000000e+00, !dbg !85
  %263 = tail call float @llvm.nvvm.div.full(float %259, float %261), !dbg !86
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !87
  %265 = fmul float %260, %264, !dbg !88
  %266 = fadd float %231, %265, !dbg !89
  %267 = fadd float %236, %256, !dbg !90
  %268 = fmul float %260, %260, !dbg !91
  %269 = fmul float %226, %268, !dbg !92
  %270 = fmul float %269, %264, !dbg !93
  %271 = fadd float %267, %270, !dbg !94
  %272 = bitcast float %266 to i32, !dbg !80
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !80
  %274 = bitcast i32 %273 to float, !dbg !80
  %275 = bitcast float %271 to i32, !dbg !80
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 8, i32 31), !dbg !80
  %277 = bitcast i32 %276 to float, !dbg !80
  %278 = bitcast float %261 to i32, !dbg !80
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 8, i32 31), !dbg !80
  %280 = bitcast i32 %279 to float, !dbg !80
  %281 = fsub float %274, %266, !dbg !82
  %282 = fadd float %261, %280, !dbg !84
  %283 = fcmp oeq float %282, 0.000000e+00, !dbg !85
  %284 = tail call float @llvm.nvvm.div.full(float %280, float %282), !dbg !86
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !87
  %286 = fmul float %281, %285, !dbg !88
  %287 = fadd float %266, %286, !dbg !89
  %288 = fadd float %271, %277, !dbg !90
  %289 = fmul float %281, %281, !dbg !91
  %290 = fmul float %261, %289, !dbg !92
  %291 = fmul float %285, %290, !dbg !93
  %292 = fadd float %288, %291, !dbg !94
  %293 = bitcast float %287 to i32, !dbg !80
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !80
  %295 = bitcast i32 %294 to float, !dbg !80
  %296 = bitcast float %292 to i32, !dbg !80
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 4, i32 31), !dbg !80
  %298 = bitcast i32 %297 to float, !dbg !80
  %299 = bitcast float %282 to i32, !dbg !80
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 4, i32 31), !dbg !80
  %301 = bitcast i32 %300 to float, !dbg !80
  %302 = fsub float %295, %287, !dbg !82
  %303 = fadd float %282, %301, !dbg !84
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !85
  %305 = tail call float @llvm.nvvm.div.full(float %301, float %303), !dbg !86
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !87
  %307 = fmul float %302, %306, !dbg !88
  %308 = fadd float %287, %307, !dbg !89
  %309 = fadd float %292, %298, !dbg !90
  %310 = fmul float %302, %302, !dbg !91
  %311 = fmul float %282, %310, !dbg !92
  %312 = fmul float %306, %311, !dbg !93
  %313 = fadd float %309, %312, !dbg !94
  %314 = bitcast float %308 to i32, !dbg !80
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !80
  %316 = bitcast i32 %315 to float, !dbg !80
  %317 = bitcast float %313 to i32, !dbg !80
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !80
  %319 = bitcast i32 %318 to float, !dbg !80
  %320 = bitcast float %303 to i32, !dbg !80
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 2, i32 31), !dbg !80
  %322 = bitcast i32 %321 to float, !dbg !80
  %323 = fsub float %316, %308, !dbg !82
  %324 = fadd float %303, %322, !dbg !84
  %325 = fcmp oeq float %324, 0.000000e+00, !dbg !85
  %326 = tail call float @llvm.nvvm.div.full(float %322, float %324), !dbg !86
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !87
  %328 = fmul float %323, %327, !dbg !88
  %329 = fadd float %308, %328, !dbg !89
  %330 = fadd float %313, %319, !dbg !90
  %331 = fmul float %323, %323, !dbg !91
  %332 = fmul float %303, %331, !dbg !92
  %333 = fmul float %327, %332, !dbg !93
  %334 = fadd float %330, %333, !dbg !94
  %335 = bitcast float %329 to i32, !dbg !80
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !80
  %337 = bitcast i32 %336 to float, !dbg !80
  %338 = bitcast float %334 to i32, !dbg !80
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 1, i32 31), !dbg !80
  %340 = bitcast i32 %339 to float, !dbg !80
  %341 = bitcast float %324 to i32, !dbg !80
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 1, i32 31), !dbg !80
  %343 = bitcast i32 %342 to float, !dbg !80
  %344 = fsub float %337, %329, !dbg !82
  %345 = fadd float %324, %343, !dbg !84
  %346 = fcmp oeq float %345, 0.000000e+00, !dbg !85
  %347 = tail call float @llvm.nvvm.div.full(float %343, float %345), !dbg !86
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !87
  %349 = fmul float %344, %348, !dbg !88
  %350 = fadd float %329, %349, !dbg !89
  %351 = fadd float %334, %340, !dbg !90
  %352 = fmul float %344, %344, !dbg !91
  %353 = fmul float %324, %352, !dbg !92
  %354 = fmul float %348, %353, !dbg !93
  %355 = fadd float %351, %354, !dbg !94
  %356 = bitcast float %245 to i32, !dbg !80
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 16, i32 31), !dbg !80
  %358 = bitcast i32 %357 to float, !dbg !80
  %359 = bitcast float %250 to i32, !dbg !80
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 16, i32 31), !dbg !80
  %361 = bitcast i32 %360 to float, !dbg !80
  %362 = bitcast float %240 to i32, !dbg !80
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 16, i32 31), !dbg !80
  %364 = bitcast i32 %363 to float, !dbg !80
  %365 = fsub float %358, %245, !dbg !82
  %366 = fadd float %240, %364, !dbg !84
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !85
  %368 = tail call float @llvm.nvvm.div.full(float %364, float %366), !dbg !86
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !87
  %370 = fmul float %365, %369, !dbg !88
  %371 = fadd float %245, %370, !dbg !89
  %372 = fadd float %250, %361, !dbg !90
  %373 = fmul float %365, %365, !dbg !91
  %374 = fmul float %240, %373, !dbg !92
  %375 = fmul float %374, %369, !dbg !93
  %376 = fadd float %372, %375, !dbg !94
  %377 = bitcast float %371 to i32, !dbg !80
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 8, i32 31), !dbg !80
  %379 = bitcast i32 %378 to float, !dbg !80
  %380 = bitcast float %376 to i32, !dbg !80
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 8, i32 31), !dbg !80
  %382 = bitcast i32 %381 to float, !dbg !80
  %383 = bitcast float %366 to i32, !dbg !80
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 8, i32 31), !dbg !80
  %385 = bitcast i32 %384 to float, !dbg !80
  %386 = fsub float %379, %371, !dbg !82
  %387 = fadd float %366, %385, !dbg !84
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !85
  %389 = tail call float @llvm.nvvm.div.full(float %385, float %387), !dbg !86
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !87
  %391 = fmul float %386, %390, !dbg !88
  %392 = fadd float %371, %391, !dbg !89
  %393 = fadd float %376, %382, !dbg !90
  %394 = fmul float %386, %386, !dbg !91
  %395 = fmul float %366, %394, !dbg !92
  %396 = fmul float %390, %395, !dbg !93
  %397 = fadd float %393, %396, !dbg !94
  %398 = bitcast float %392 to i32, !dbg !80
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !80
  %400 = bitcast i32 %399 to float, !dbg !80
  %401 = bitcast float %397 to i32, !dbg !80
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 4, i32 31), !dbg !80
  %403 = bitcast i32 %402 to float, !dbg !80
  %404 = bitcast float %387 to i32, !dbg !80
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 4, i32 31), !dbg !80
  %406 = bitcast i32 %405 to float, !dbg !80
  %407 = fsub float %400, %392, !dbg !82
  %408 = fadd float %387, %406, !dbg !84
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !85
  %410 = tail call float @llvm.nvvm.div.full(float %406, float %408), !dbg !86
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !87
  %412 = fmul float %407, %411, !dbg !88
  %413 = fadd float %392, %412, !dbg !89
  %414 = fadd float %397, %403, !dbg !90
  %415 = fmul float %407, %407, !dbg !91
  %416 = fmul float %387, %415, !dbg !92
  %417 = fmul float %411, %416, !dbg !93
  %418 = fadd float %414, %417, !dbg !94
  %419 = bitcast float %413 to i32, !dbg !80
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !80
  %421 = bitcast i32 %420 to float, !dbg !80
  %422 = bitcast float %418 to i32, !dbg !80
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !80
  %424 = bitcast i32 %423 to float, !dbg !80
  %425 = bitcast float %408 to i32, !dbg !80
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !80
  %427 = bitcast i32 %426 to float, !dbg !80
  %428 = fsub float %421, %413, !dbg !82
  %429 = fadd float %408, %427, !dbg !84
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !85
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !86
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !87
  %433 = fmul float %428, %432, !dbg !88
  %434 = fadd float %413, %433, !dbg !89
  %435 = fadd float %418, %424, !dbg !90
  %436 = fmul float %428, %428, !dbg !91
  %437 = fmul float %408, %436, !dbg !92
  %438 = fmul float %432, %437, !dbg !93
  %439 = fadd float %435, %438, !dbg !94
  %440 = bitcast float %434 to i32, !dbg !80
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !80
  %442 = bitcast i32 %441 to float, !dbg !80
  %443 = bitcast float %439 to i32, !dbg !80
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !80
  %445 = bitcast i32 %444 to float, !dbg !80
  %446 = bitcast float %429 to i32, !dbg !80
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !80
  %448 = bitcast i32 %447 to float, !dbg !80
  %449 = fsub float %442, %434, !dbg !82
  %450 = fadd float %429, %448, !dbg !84
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !85
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !86
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !87
  %454 = fmul float %449, %453, !dbg !88
  %455 = fadd float %434, %454, !dbg !89
  %456 = fadd float %439, %445, !dbg !90
  %457 = fmul float %449, %449, !dbg !91
  %458 = fmul float %429, %457, !dbg !92
  %459 = fmul float %453, %458, !dbg !93
  %460 = fadd float %456, %459, !dbg !94
  %461 = and i32 %219, 7, !dbg !80
  %462 = icmp eq i32 %21, 0, !dbg !80
  %463 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !80
  %464 = bitcast float %350 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 %462) #5, !dbg !80
  %465 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %461, !dbg !80
  %466 = bitcast float %355 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 %462) #5, !dbg !80
  %467 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %461, !dbg !80
  %468 = bitcast float %345 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 %462) #5, !dbg !80
  %469 = or disjoint i32 %461, 8, !dbg !80
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !80
  %471 = bitcast float %455 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %471, i1 %462) #5, !dbg !80
  %472 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %469, !dbg !80
  %473 = bitcast float %460 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 %462) #5, !dbg !80
  %474 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %469, !dbg !80
  %475 = bitcast float %450 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %475, i1 %462) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %476 = icmp slt i32 %19, 16, !dbg !80
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %478 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %477, i1 %476) #5, !dbg !80
  %479 = bitcast i32 %478 to float, !dbg !80
  %480 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !80
  %481 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %480, i1 %476) #5, !dbg !80
  %482 = bitcast i32 %481 to float, !dbg !80
  %483 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %484 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %483, i1 %476) #5, !dbg !80
  %485 = bitcast i32 %484 to float, !dbg !80
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 4, i32 31), !dbg !80
  %487 = bitcast i32 %486 to float, !dbg !80
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 4, i32 31), !dbg !80
  %489 = bitcast i32 %488 to float, !dbg !80
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 4, i32 31), !dbg !80
  %491 = bitcast i32 %490 to float, !dbg !80
  %492 = fsub float %487, %479, !dbg !82
  %493 = fadd float %485, %491, !dbg !84
  %494 = fcmp oeq float %493, 0.000000e+00, !dbg !85
  %495 = tail call float @llvm.nvvm.div.full(float %491, float %493), !dbg !86
  %496 = select i1 %494, float 0.000000e+00, float %495, !dbg !87
  %497 = fmul float %492, %496, !dbg !88
  %498 = fadd float %497, %479, !dbg !89
  %499 = fadd float %482, %489, !dbg !90
  %500 = fmul float %492, %492, !dbg !91
  %501 = fmul float %500, %485, !dbg !92
  %502 = fmul float %501, %496, !dbg !93
  %503 = fadd float %499, %502, !dbg !94
  %504 = bitcast float %498 to i32, !dbg !80
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 2, i32 31), !dbg !80
  %506 = bitcast i32 %505 to float, !dbg !80
  %507 = bitcast float %503 to i32, !dbg !80
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 2, i32 31), !dbg !80
  %509 = bitcast i32 %508 to float, !dbg !80
  %510 = bitcast float %493 to i32, !dbg !80
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 2, i32 31), !dbg !80
  %512 = bitcast i32 %511 to float, !dbg !80
  %513 = fsub float %506, %498, !dbg !82
  %514 = fadd float %493, %512, !dbg !84
  %515 = fcmp oeq float %514, 0.000000e+00, !dbg !85
  %516 = tail call float @llvm.nvvm.div.full(float %512, float %514), !dbg !86
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !87
  %518 = fmul float %513, %517, !dbg !88
  %519 = fadd float %498, %518, !dbg !89
  %520 = fadd float %503, %509, !dbg !90
  %521 = fmul float %513, %513, !dbg !91
  %522 = fmul float %493, %521, !dbg !92
  %523 = fmul float %517, %522, !dbg !93
  %524 = fadd float %520, %523, !dbg !94
  %525 = bitcast float %519 to i32, !dbg !80
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 1, i32 31), !dbg !80
  %527 = bitcast i32 %526 to float, !dbg !80
  %528 = bitcast float %524 to i32, !dbg !80
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 1, i32 31), !dbg !80
  %530 = bitcast i32 %529 to float, !dbg !80
  %531 = bitcast float %514 to i32, !dbg !80
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 1, i32 31), !dbg !80
  %533 = bitcast i32 %532 to float, !dbg !80
  %534 = fsub float %527, %519, !dbg !82
  %535 = fadd float %514, %533, !dbg !84
  %536 = fcmp oeq float %535, 0.000000e+00, !dbg !85
  %537 = tail call float @llvm.nvvm.div.full(float %533, float %535), !dbg !86
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !87
  %539 = fmul float %534, %538, !dbg !88
  %540 = fadd float %519, %539, !dbg !89
  %541 = fadd float %524, %530, !dbg !90
  %542 = fmul float %534, %534, !dbg !91
  %543 = fmul float %514, %542, !dbg !92
  %544 = fmul float %538, %543, !dbg !93
  %545 = fadd float %541, %544, !dbg !94
  %546 = and i32 %19, 7, !dbg !80
  %547 = icmp eq i32 %546, 0, !dbg !80
  %548 = and i1 %476, %547, !dbg !80
  %549 = bitcast float %540 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %549, i1 %548) #5, !dbg !80
  %550 = bitcast float %545 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %550, i1 %548) #5, !dbg !80
  %551 = bitcast float %535 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %551, i1 %548) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %552 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %553 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !80
  %554 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %555 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !80
  %556 = tail call float @llvm.nvvm.div.full(float %554, float 3.072000e+03), !dbg !95
  %557 = tail call float @llvm.nvvm.div.full(float %555, float 3.072000e+03), !dbg !95
  %558 = fadd float %556, 0x3EB0C6F7A0000000, !dbg !96
  %559 = fadd float %557, 0x3EB0C6F7A0000000, !dbg !96
  %560 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %561 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i46 = icmp eq i32 %561, 0, !dbg !97
  br i1 %.not.i46, label %564, label %562, !dbg !97

562:                                              ; preds = %__nv_rsqrtf.exit
  %563 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %558), !dbg !97
  br label %__nv_rsqrtf.exit48, !dbg !97

564:                                              ; preds = %__nv_rsqrtf.exit
  %565 = tail call float @llvm.nvvm.rsqrt.approx.f(float %558), !dbg !97
  br label %__nv_rsqrtf.exit48, !dbg !97

__nv_rsqrtf.exit48:                               ; preds = %562, %564
  %.0.i47 = phi float [ %563, %562 ], [ %565, %564 ], !dbg !97
  %566 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %567 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i52 = icmp eq i32 %567, 0, !dbg !97
  br i1 %.not.i52, label %570, label %568, !dbg !97

568:                                              ; preds = %__nv_rsqrtf.exit48
  %569 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %559), !dbg !97
  br label %__nv_rsqrtf.exit54, !dbg !97

570:                                              ; preds = %__nv_rsqrtf.exit48
  %571 = tail call float @llvm.nvvm.rsqrt.approx.f(float %559), !dbg !97
  br label %__nv_rsqrtf.exit54, !dbg !97

__nv_rsqrtf.exit54:                               ; preds = %568, %570
  %.0.i53 = phi float [ %569, %568 ], [ %571, %570 ], !dbg !97
  %572 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %60
  %573 = getelementptr bfloat, ptr addrspace(3) %572, i32 %58
  %574 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 1032
  %575 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 1034
  %576 = getelementptr inbounds nuw i8, ptr addrspace(3) %573, i32 4
  %577 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !98
  %578 = shufflevector <2 x i1> %577, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %579 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !99
  %580 = shufflevector <2 x float> %579, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %581 = insertelement <2 x float> poison, float %552, i64 0, !dbg !100
  %582 = shufflevector <2 x float> %581, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %invariant.op = or i32 %26, 12288, !dbg !101
  br label %583, !dbg !101

583:                                              ; preds = %__nv_rsqrtf.exit54, %583
  %indvars.iv78 = phi i64 [ 0, %__nv_rsqrtf.exit54 ], [ %indvars.iv.next79, %583 ]
  %584 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit54 ], [ %662, %583 ]
  %585 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit54 ], [ %663, %583 ]
  %586 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit54 ], [ %661, %583 ]
  %587 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit54 ], [ %673, %583 ]
  %588 = or disjoint i64 %indvars.iv78, %69, !dbg !102
  %589 = trunc nuw nsw i64 %indvars.iv78 to i32, !dbg !103
  %590 = add i32 %57, %589, !dbg !103
  %591 = sext i32 %590 to i64, !dbg !104
  %592 = getelementptr bfloat, ptr addrspace(1) %8, i64 %591, !dbg !104
  %593 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %592, i1 %23) #5, !dbg !105
  %594 = extractvalue { i32, i32 } %593, 0, !dbg !105
  %595 = extractvalue { i32, i32 } %593, 1, !dbg !105
  %extelt.offset = lshr i32 %594, 16, !dbg !105
  %596 = trunc nuw i32 %extelt.offset to i16, !dbg !105
  %extelt.offset9 = lshr i32 %595, 16, !dbg !105
  %597 = trunc nuw i32 %extelt.offset9 to i16, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %598 = trunc i32 %594 to i16, !dbg !99
  %599 = trunc i32 %595 to i16, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %573, i16 %598, i16 %596, i16 %599, i16 %597, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %600 = load bfloat, ptr addrspace(3) %574, align 4, !dbg !99
  %601 = load bfloat, ptr addrspace(3) %575, align 2, !dbg !99
  %602 = fpext bfloat %600 to float, !dbg !106
  %603 = fpext bfloat %601 to float, !dbg !106
  %.reass.reass.reass = or i32 %589, %invariant.op
  %604 = zext nneg i32 %.reass.reass.reass to i64, !dbg !107
  %605 = getelementptr float, ptr addrspace(1) %1, i64 %604, !dbg !107
  %606 = getelementptr bfloat, ptr addrspace(1) %2, i64 %604, !dbg !108
  %607 = add nuw nsw i64 %588, 9216, !dbg !109
  %608 = getelementptr float, ptr addrspace(1) %1, i64 %607, !dbg !110
  %609 = getelementptr bfloat, ptr addrspace(1) %2, i64 %607, !dbg !111
  %610 = fsub float %602, %553, !dbg !100
  %611 = fsub float %603, %553, !dbg !100
  %612 = fmul float %.0.i53, %610, !dbg !99
  %613 = fmul float %.0.i53, %611, !dbg !99
  %614 = fcmp uno <2 x float> %586, zeroinitializer, !dbg !112
  %615 = fcmp uno float %584, 0.000000e+00, !dbg !112
  %616 = fcmp uno float %585, 0.000000e+00, !dbg !112
  %617 = load <2 x bfloat>, ptr addrspace(3) %63, align 4, !dbg !99
  %618 = fpext <2 x bfloat> %617 to <2 x float>, !dbg !106
  %619 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %605, i1 true) #5, !dbg !114
  %620 = extractvalue { i32, i32 } %619, 0, !dbg !114
  %621 = extractvalue { i32, i32 } %619, 1, !dbg !114
  %622 = insertelement <2 x i32> poison, i32 %620, i64 0, !dbg !114
  %623 = insertelement <2 x i32> %622, i32 %621, i64 1, !dbg !114
  %624 = bitcast <2 x i32> %623 to <2 x float>, !dbg !114
  %625 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %606, i1 true) #5, !dbg !115
  %626 = bitcast i32 %625 to <2 x bfloat>, !dbg !115
  %627 = fpext <2 x bfloat> %626 to <2 x float>, !dbg !116
  %628 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %608, i1 true) #5, !dbg !117
  %629 = extractvalue { i32, i32 } %628, 0, !dbg !117
  %630 = extractvalue { i32, i32 } %628, 1, !dbg !117
  %631 = insertelement <2 x i32> poison, i32 %629, i64 0, !dbg !117
  %632 = insertelement <2 x i32> %631, i32 %630, i64 1, !dbg !117
  %633 = bitcast <2 x i32> %632 to <2 x float>, !dbg !117
  %634 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %609, i1 true) #5, !dbg !118
  %635 = bitcast i32 %634 to <2 x bfloat>, !dbg !118
  %636 = fpext <2 x bfloat> %635 to <2 x float>, !dbg !119
  %637 = fsub <2 x float> %618, %582, !dbg !100
  %638 = fmul <2 x float> %580, %637, !dbg !99
  %639 = fadd <2 x float> %624, %627, !dbg !120
  %640 = fadd <2 x float> %639, splat (float 1.000000e+00), !dbg !121
  %641 = fmul <2 x float> %638, %640, !dbg !122
  %642 = extractelement <2 x float> %640, i64 0, !dbg !122
  %643 = fmul float %612, %642, !dbg !122
  %644 = extractelement <2 x float> %640, i64 1, !dbg !122
  %645 = fmul float %613, %644, !dbg !122
  %646 = fadd <2 x float> %633, %636, !dbg !123
  %647 = fadd <2 x float> %641, %646, !dbg !124
  %648 = extractelement <2 x float> %646, i64 0, !dbg !124
  %649 = fadd float %643, %648, !dbg !124
  %650 = extractelement <2 x float> %646, i64 1, !dbg !124
  %651 = fadd float %645, %650, !dbg !124
  %652 = fcmp olt <2 x float> %586, %647, !dbg !125
  %653 = fcmp olt float %584, %649, !dbg !125
  %654 = fcmp olt float %585, %651, !dbg !125
  %655 = or <2 x i1> %614, %652, !dbg !126
  %656 = or i1 %615, %653, !dbg !126
  %657 = or i1 %616, %654, !dbg !126
  %658 = select <2 x i1> %655, <2 x float> %586, <2 x float> %647, !dbg !127
  %659 = select i1 %656, float %584, float %649, !dbg !127
  %660 = select i1 %657, float %585, float %651, !dbg !127
  %661 = select <2 x i1> %578, <2 x float> %658, <2 x float> %586, !dbg !98
  %662 = select i1 %24, float %659, float %584, !dbg !98
  %663 = select i1 %24, float %660, float %585, !dbg !98
  %664 = extractelement <2 x float> %647, i64 0, !dbg !128
  %665 = extractelement <2 x float> %647, i64 1, !dbg !128
  %666 = fcmp uno <4 x float> %587, zeroinitializer, !dbg !129
  %667 = shufflevector <2 x float> %647, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !131
  %668 = insertelement <4 x float> %667, float %649, i64 2, !dbg !131
  %669 = insertelement <4 x float> %668, float %651, i64 3, !dbg !131
  %670 = fcmp ogt <4 x float> %587, %669, !dbg !131
  %671 = or <4 x i1> %666, %670, !dbg !132
  %672 = select <4 x i1> %671, <4 x float> %587, <4 x float> %669, !dbg !133
  %673 = select <4 x i1> %72, <4 x float> %672, <4 x float> %587, !dbg !134
  %674 = getelementptr bfloat, ptr addrspace(1) %9, i64 %591, !dbg !135
  %675 = fptrunc float %664 to bfloat, !dbg !128
  %676 = fptrunc float %665 to bfloat, !dbg !128
  %677 = fptrunc float %649 to bfloat, !dbg !128
  %678 = fptrunc float %651 to bfloat, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %679 = bitcast bfloat %675 to i16, !dbg !128
  %680 = bitcast bfloat %676 to i16, !dbg !128
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %63, i16 %679, i16 %680, i1 true) #5, !dbg !128
  %681 = bitcast bfloat %677 to i16, !dbg !128
  %682 = bitcast bfloat %678 to i16, !dbg !128
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %574, i16 %681, i16 %682, i1 true) #5, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %.uncasted.extract = load i32, ptr addrspace(3) %573, align 8, !dbg !128
  %.uncasted.extract18 = load i32, ptr addrspace(3) %576, align 4, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract18, ptr addrspace(1) %674, i1 %23) #5, !dbg !128
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 512, !dbg !101
  %683 = icmp samesign ult i64 %indvars.iv78, 2560, !dbg !101
  br i1 %683, label %583, label %684, !dbg !101

684:                                              ; preds = %583
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %685 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %661, <2 x i32> <i32 0, i32 2>, !dbg !138
  %686 = fcmp olt <2 x float> %685, %661, !dbg !138
  %687 = fcmp uno <2 x float> %685, %661, !dbg !138
  %shift = shufflevector <2 x i1> %686, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %688 = or <2 x i1> %shift, %687, !dbg !139
  %689 = extractelement <2 x i1> %688, i64 0, !dbg !139
  %690 = extractelement <2 x float> %661, i64 0, !dbg !140
  %691 = extractelement <2 x float> %661, i64 1, !dbg !140
  %692 = select i1 %689, float %690, float %691, !dbg !140
  %693 = fcmp olt float %662, %663, !dbg !138
  %694 = fcmp uno float %662, 0.000000e+00, !dbg !141
  %695 = or i1 %693, %694, !dbg !139
  %696 = select i1 %695, float %662, float %663, !dbg !140
  %697 = bitcast float %692 to i32, !dbg !136
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %697, i32 16, i32 31), !dbg !136
  %699 = bitcast i32 %698 to float, !dbg !136
  %700 = fcmp olt float %692, %699, !dbg !138
  %701 = fcmp uno float %692, 0.000000e+00, !dbg !141
  %702 = or i1 %701, %700, !dbg !139
  %703 = select i1 %702, float %692, float %699, !dbg !140
  %704 = bitcast float %703 to i32, !dbg !136
  %705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %704, i32 8, i32 31), !dbg !136
  %706 = bitcast i32 %705 to float, !dbg !136
  %707 = fcmp olt float %703, %706, !dbg !138
  %708 = fcmp uno float %703, 0.000000e+00, !dbg !141
  %709 = or i1 %707, %708, !dbg !139
  %710 = select i1 %709, float %703, float %706, !dbg !140
  %711 = bitcast float %710 to i32, !dbg !136
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 4, i32 31), !dbg !136
  %713 = bitcast i32 %712 to float, !dbg !136
  %714 = fcmp olt float %710, %713, !dbg !138
  %715 = fcmp uno float %710, 0.000000e+00, !dbg !141
  %716 = or i1 %714, %715, !dbg !139
  %717 = select i1 %716, float %710, float %713, !dbg !140
  %718 = bitcast float %717 to i32, !dbg !136
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 2, i32 31), !dbg !136
  %720 = bitcast i32 %719 to float, !dbg !136
  %721 = fcmp olt float %717, %720, !dbg !138
  %722 = fcmp uno float %717, 0.000000e+00, !dbg !141
  %723 = or i1 %721, %722, !dbg !139
  %724 = select i1 %723, float %717, float %720, !dbg !140
  %725 = bitcast float %724 to i32, !dbg !136
  %726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %725, i32 1, i32 31), !dbg !136
  %727 = bitcast i32 %726 to float, !dbg !136
  %728 = fcmp olt float %724, %727, !dbg !138
  %729 = fcmp uno float %724, 0.000000e+00, !dbg !141
  %730 = or i1 %728, %729, !dbg !139
  %731 = bitcast float %696 to i32, !dbg !136
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 16, i32 31), !dbg !136
  %733 = bitcast i32 %732 to float, !dbg !136
  %734 = fcmp olt float %696, %733, !dbg !138
  %735 = fcmp uno float %696, 0.000000e+00, !dbg !141
  %736 = or i1 %735, %734, !dbg !139
  %737 = select i1 %736, float %696, float %733, !dbg !140
  %738 = bitcast float %737 to i32, !dbg !136
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 8, i32 31), !dbg !136
  %740 = bitcast i32 %739 to float, !dbg !136
  %741 = fcmp olt float %737, %740, !dbg !138
  %742 = fcmp uno float %737, 0.000000e+00, !dbg !141
  %743 = or i1 %741, %742, !dbg !139
  %744 = select i1 %743, float %737, float %740, !dbg !140
  %745 = bitcast float %744 to i32, !dbg !136
  %746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %745, i32 4, i32 31), !dbg !136
  %747 = bitcast i32 %746 to float, !dbg !136
  %748 = fcmp olt float %744, %747, !dbg !138
  %749 = fcmp uno float %744, 0.000000e+00, !dbg !141
  %750 = or i1 %748, %749, !dbg !139
  %751 = select i1 %750, float %744, float %747, !dbg !140
  %752 = bitcast float %751 to i32, !dbg !136
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 2, i32 31), !dbg !136
  %754 = bitcast i32 %753 to float, !dbg !136
  %755 = fcmp olt float %751, %754, !dbg !138
  %756 = fcmp uno float %751, 0.000000e+00, !dbg !141
  %757 = or i1 %755, %756, !dbg !139
  %758 = select i1 %757, float %751, float %754, !dbg !140
  %759 = bitcast float %758 to i32, !dbg !136
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 1, i32 31), !dbg !136
  %761 = bitcast i32 %760 to float, !dbg !136
  %762 = fcmp olt float %758, %761, !dbg !138
  %763 = fcmp uno float %758, 0.000000e+00, !dbg !141
  %764 = or i1 %762, %763, !dbg !139
  %765 = select i1 %730, i32 %725, i32 %726, !dbg !140
  %766 = insertelement <1 x i32> poison, i32 %765, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %766, i1 %462) #5, !dbg !136
  %767 = select i1 %764, i32 %759, i32 %760, !dbg !140
  %768 = insertelement <1 x i32> poison, i32 %767, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %768, i1 %462) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %769 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %477, i1 %476) #5, !dbg !136
  %770 = bitcast i32 %769 to float, !dbg !136
  %771 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %769, i32 4, i32 31), !dbg !136
  %772 = bitcast i32 %771 to float, !dbg !136
  %773 = fcmp olt float %770, %772, !dbg !138
  %774 = fcmp uno float %770, 0.000000e+00, !dbg !141
  %775 = or i1 %774, %773, !dbg !139
  %776 = select i1 %775, float %770, float %772, !dbg !140
  %777 = bitcast float %776 to i32, !dbg !136
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 2, i32 31), !dbg !136
  %779 = bitcast i32 %778 to float, !dbg !136
  %780 = fcmp olt float %776, %779, !dbg !138
  %781 = fcmp uno float %776, 0.000000e+00, !dbg !141
  %782 = or i1 %780, %781, !dbg !139
  %783 = select i1 %782, float %776, float %779, !dbg !140
  %784 = bitcast float %783 to i32, !dbg !136
  %785 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %784, i32 1, i32 31), !dbg !136
  %786 = bitcast i32 %785 to float, !dbg !136
  %787 = fcmp olt float %783, %786, !dbg !138
  %788 = fcmp uno float %783, 0.000000e+00, !dbg !141
  %789 = or i1 %787, %788, !dbg !139
  %790 = select i1 %789, i32 %784, i32 %785, !dbg !140
  %791 = insertelement <1 x i32> poison, i32 %790, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %791, i1 %548) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %792 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %793 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %794 = bitcast float %792 to i32, !dbg !142
  %795 = bitcast float %793 to i32, !dbg !142
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %794, i32 %795, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %796 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %220, !dbg !142
  %797 = load float, ptr addrspace(3) %796, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %798 = extractelement <4 x float> %673, i64 0, !dbg !145
  %799 = extractelement <4 x float> %673, i64 1, !dbg !145
  %800 = fcmp ogt float %798, %799, !dbg !145
  %801 = fcmp uno float %798, 0.000000e+00, !dbg !146
  %802 = or i1 %800, %801, !dbg !147
  %803 = select i1 %802, float %798, float %799, !dbg !148
  %804 = extractelement <4 x float> %673, i64 2, !dbg !145
  %805 = extractelement <4 x float> %673, i64 3, !dbg !145
  %806 = fcmp ogt float %804, %805, !dbg !145
  %807 = fcmp uno float %804, 0.000000e+00, !dbg !146
  %808 = or i1 %806, %807, !dbg !147
  %809 = select i1 %808, float %804, float %805, !dbg !148
  %810 = bitcast float %803 to i32, !dbg !143
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 16, i32 31), !dbg !143
  %812 = bitcast i32 %811 to float, !dbg !143
  %813 = fcmp ogt float %803, %812, !dbg !145
  %814 = fcmp uno float %803, 0.000000e+00, !dbg !146
  %815 = or i1 %814, %813, !dbg !147
  %816 = select i1 %815, float %803, float %812, !dbg !148
  %817 = bitcast float %816 to i32, !dbg !143
  %818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %817, i32 8, i32 31), !dbg !143
  %819 = bitcast i32 %818 to float, !dbg !143
  %820 = fcmp ogt float %816, %819, !dbg !145
  %821 = fcmp uno float %816, 0.000000e+00, !dbg !146
  %822 = or i1 %820, %821, !dbg !147
  %823 = select i1 %822, float %816, float %819, !dbg !148
  %824 = bitcast float %823 to i32, !dbg !143
  %825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %824, i32 4, i32 31), !dbg !143
  %826 = bitcast i32 %825 to float, !dbg !143
  %827 = fcmp ogt float %823, %826, !dbg !145
  %828 = fcmp uno float %823, 0.000000e+00, !dbg !146
  %829 = or i1 %827, %828, !dbg !147
  %830 = select i1 %829, float %823, float %826, !dbg !148
  %831 = bitcast float %830 to i32, !dbg !143
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 2, i32 31), !dbg !143
  %833 = bitcast i32 %832 to float, !dbg !143
  %834 = fcmp ogt float %830, %833, !dbg !145
  %835 = fcmp uno float %830, 0.000000e+00, !dbg !146
  %836 = or i1 %834, %835, !dbg !147
  %837 = select i1 %836, float %830, float %833, !dbg !148
  %838 = bitcast float %837 to i32, !dbg !143
  %839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %838, i32 1, i32 31), !dbg !143
  %840 = bitcast i32 %839 to float, !dbg !143
  %841 = fcmp ogt float %837, %840, !dbg !145
  %842 = fcmp uno float %837, 0.000000e+00, !dbg !146
  %843 = or i1 %841, %842, !dbg !147
  %844 = bitcast float %809 to i32, !dbg !143
  %845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %844, i32 16, i32 31), !dbg !143
  %846 = bitcast i32 %845 to float, !dbg !143
  %847 = fcmp ogt float %809, %846, !dbg !145
  %848 = fcmp uno float %809, 0.000000e+00, !dbg !146
  %849 = or i1 %848, %847, !dbg !147
  %850 = select i1 %849, float %809, float %846, !dbg !148
  %851 = bitcast float %850 to i32, !dbg !143
  %852 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %851, i32 8, i32 31), !dbg !143
  %853 = bitcast i32 %852 to float, !dbg !143
  %854 = fcmp ogt float %850, %853, !dbg !145
  %855 = fcmp uno float %850, 0.000000e+00, !dbg !146
  %856 = or i1 %854, %855, !dbg !147
  %857 = select i1 %856, float %850, float %853, !dbg !148
  %858 = bitcast float %857 to i32, !dbg !143
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 4, i32 31), !dbg !143
  %860 = bitcast i32 %859 to float, !dbg !143
  %861 = fcmp ogt float %857, %860, !dbg !145
  %862 = fcmp uno float %857, 0.000000e+00, !dbg !146
  %863 = or i1 %861, %862, !dbg !147
  %864 = select i1 %863, float %857, float %860, !dbg !148
  %865 = bitcast float %864 to i32, !dbg !143
  %866 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %865, i32 2, i32 31), !dbg !143
  %867 = bitcast i32 %866 to float, !dbg !143
  %868 = fcmp ogt float %864, %867, !dbg !145
  %869 = fcmp uno float %864, 0.000000e+00, !dbg !146
  %870 = or i1 %868, %869, !dbg !147
  %871 = select i1 %870, float %864, float %867, !dbg !148
  %872 = bitcast float %871 to i32, !dbg !143
  %873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %872, i32 1, i32 31), !dbg !143
  %874 = bitcast i32 %873 to float, !dbg !143
  %875 = fcmp ogt float %871, %874, !dbg !145
  %876 = fcmp uno float %871, 0.000000e+00, !dbg !146
  %877 = or i1 %875, %876, !dbg !147
  %878 = select i1 %843, i32 %838, i32 %839, !dbg !148
  %879 = insertelement <1 x i32> poison, i32 %878, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %879, i1 %462) #5, !dbg !143
  %880 = select i1 %877, i32 %872, i32 %873, !dbg !148
  %881 = insertelement <1 x i32> poison, i32 %880, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %881, i1 %462) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %882 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %477, i1 %476) #5, !dbg !143
  %883 = bitcast i32 %882 to float, !dbg !143
  %884 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %882, i32 4, i32 31), !dbg !143
  %885 = bitcast i32 %884 to float, !dbg !143
  %886 = fcmp ogt float %883, %885, !dbg !145
  %887 = fcmp uno float %883, 0.000000e+00, !dbg !146
  %888 = or i1 %887, %886, !dbg !147
  %889 = select i1 %888, float %883, float %885, !dbg !148
  %890 = bitcast float %889 to i32, !dbg !143
  %891 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %890, i32 2, i32 31), !dbg !143
  %892 = bitcast i32 %891 to float, !dbg !143
  %893 = fcmp ogt float %889, %892, !dbg !145
  %894 = fcmp uno float %889, 0.000000e+00, !dbg !146
  %895 = or i1 %893, %894, !dbg !147
  %896 = select i1 %895, float %889, float %892, !dbg !148
  %897 = bitcast float %896 to i32, !dbg !143
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 1, i32 31), !dbg !143
  %899 = bitcast i32 %898 to float, !dbg !143
  %900 = fcmp ogt float %896, %899, !dbg !145
  %901 = fcmp uno float %896, 0.000000e+00, !dbg !146
  %902 = or i1 %900, %901, !dbg !147
  %903 = select i1 %902, i32 %897, i32 %898, !dbg !148
  %904 = insertelement <1 x i32> poison, i32 %903, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %904, i1 %548) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %905 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %906 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %907 = bitcast float %905 to i32, !dbg !149
  %908 = bitcast float %906 to i32, !dbg !149
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %907, i32 %908, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %909 = load float, ptr addrspace(3) %796, align 4, !dbg !149
  %910 = sext i32 %221 to i64, !dbg !150
  %911 = getelementptr bfloat, ptr addrspace(1) %10, i64 %910, !dbg !150
  %912 = fptrunc float %797 to bfloat, !dbg !142
  %913 = and i32 %19, 254, !dbg !142
  %914 = icmp eq i32 %913, 0, !dbg !142
  %915 = bitcast bfloat %912 to i16, !dbg !142
  %916 = and i1 %914, %222, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %915, ptr addrspace(1) %911, i1 %916) #5, !dbg !142
  %917 = getelementptr bfloat, ptr addrspace(1) %11, i64 %910, !dbg !151
  %918 = fptrunc float %909 to bfloat, !dbg !149
  %919 = bitcast bfloat %918 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %919, ptr addrspace(1) %917, i1 %916) #5, !dbg !149
  %.inv5 = fcmp oge float %792, 0.000000e+00, !dbg !152
  %920 = select i1 %.inv5, float 0.000000e+00, float %792, !dbg !152
  %.inv6 = fcmp oge float %793, 0.000000e+00, !dbg !152
  %921 = select i1 %.inv6, float 0.000000e+00, float %793, !dbg !152
  %922 = fsub float 0.000000e+00, %920, !dbg !154
  %923 = fsub float 0.000000e+00, %921, !dbg !154
  %.inv7 = fcmp ole float %905, 0.000000e+00, !dbg !155
  %924 = select i1 %.inv7, float 0.000000e+00, float %905, !dbg !155
  %.inv8 = fcmp ole float %906, 0.000000e+00, !dbg !155
  %925 = select i1 %.inv8, float 0.000000e+00, float %906, !dbg !155
  %926 = fcmp ogt float %922, %924, !dbg !157
  %927 = fcmp ogt float %923, %925, !dbg !157
  %928 = fcmp uno float %922, 0.000000e+00, !dbg !159
  %929 = fcmp uno float %923, 0.000000e+00, !dbg !159
  %930 = or i1 %928, %926, !dbg !160
  %931 = or i1 %929, %927, !dbg !160
  %932 = select i1 %930, float %922, float %924, !dbg !161
  %933 = select i1 %931, float %923, float %925, !dbg !161
  %934 = fmul float %932, 0x3F80204080000000, !dbg !162
  %935 = fmul float %933, 0x3F80204080000000, !dbg !162
  %936 = fcmp ogt float %934, 0x3EE4F8B580000000, !dbg !163
  %937 = fcmp ogt float %935, 0x3EE4F8B580000000, !dbg !163
  %938 = fcmp uno float %934, 0.000000e+00, !dbg !165
  %939 = fcmp uno float %935, 0.000000e+00, !dbg !165
  %940 = or i1 %936, %938, !dbg !166
  %941 = or i1 %937, %939, !dbg !166
  %942 = select i1 %940, float %934, float 0x3EE4F8B580000000, !dbg !167
  %943 = select i1 %941, float %935, float 0x3EE4F8B580000000, !dbg !167
  %944 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %942), !dbg !168
  %945 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %943), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %946 = bitcast float %944 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %946, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %946, i1 true) #5, !dbg !169
  %947 = bitcast float %945 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %947, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %947, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %948 = lshr exact i32 %20, 4, !dbg !169
  %949 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %948, !dbg !169
  %950 = load float, ptr addrspace(3) %949, align 8, !dbg !169
  %951 = sext i32 %57 to i64, !dbg !170
  %952 = getelementptr bfloat, ptr addrspace(1) %9, i64 %951, !dbg !170
  %953 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %952, i1 %23) #5, !dbg !171
  %954 = extractvalue { i32, i32 } %953, 0, !dbg !171
  %955 = bitcast i32 %954 to <2 x bfloat>, !dbg !171
  %956 = extractvalue { i32, i32 } %953, 1, !dbg !171
  %957 = bitcast i32 %956 to <2 x bfloat>, !dbg !171
  %958 = extractelement <2 x bfloat> %955, i64 0, !dbg !171
  %959 = extractelement <2 x bfloat> %955, i64 1, !dbg !171
  %960 = extractelement <2 x bfloat> %957, i64 0, !dbg !171
  %961 = extractelement <2 x bfloat> %957, i64 1, !dbg !171
  %962 = fpext bfloat %958 to float, !dbg !172
  %963 = fpext bfloat %959 to float, !dbg !172
  %964 = fpext bfloat %960 to float, !dbg !172
  %965 = fpext bfloat %961 to float, !dbg !172
  %966 = fmul float %950, %962, !dbg !169
  %967 = fmul float %950, %963, !dbg !169
  %968 = fmul float %950, %964, !dbg !169
  %969 = fmul float %950, %965, !dbg !169
  %970 = tail call float @llvm.nvvm.round.f(float %966) #5, !dbg !173
  %971 = tail call float @llvm.nvvm.round.f(float %967) #5, !dbg !173
  %972 = tail call float @llvm.nvvm.round.f(float %968) #5, !dbg !173
  %973 = tail call float @llvm.nvvm.round.f(float %969) #5, !dbg !173
  %974 = insertelement <4 x float> poison, float %970, i64 0, !dbg !174
  %975 = insertelement <4 x float> %974, float %971, i64 1, !dbg !174
  %976 = insertelement <4 x float> %975, float %972, i64 2, !dbg !174
  %977 = insertelement <4 x float> %976, float %973, i64 3, !dbg !174
  %978 = fcmp ogt <4 x float> %977, splat (float -1.270000e+02), !dbg !174
  %979 = fcmp uno <4 x float> %977, zeroinitializer, !dbg !176
  %980 = or <4 x i1> %978, %979, !dbg !177
  %981 = select <4 x i1> %980, <4 x float> %977, <4 x float> splat (float -1.270000e+02), !dbg !178
  %982 = fcmp olt <4 x float> %981, splat (float 1.270000e+02), !dbg !179
  %983 = fcmp uno <4 x float> %981, zeroinitializer, !dbg !181
  %984 = or <4 x i1> %982, %983, !dbg !182
  %985 = fptosi <4 x float> %981 to <4 x i8>, !dbg !183
  %986 = select <4 x i1> %984, <4 x i8> %985, <4 x i8> splat (i8 127), !dbg !184
  %987 = getelementptr i8, ptr addrspace(1) %12, i64 %951, !dbg !185
  %988 = bitcast <4 x i8> %986 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %988, ptr addrspace(1) %987, i1 %23) #5, !dbg !186
  %989 = or disjoint i32 %57, 512, !dbg !187
  %990 = sext i32 %989 to i64, !dbg !170
  %991 = getelementptr bfloat, ptr addrspace(1) %9, i64 %990, !dbg !170
  %992 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %991, i1 %23) #5, !dbg !171
  %993 = extractvalue { i32, i32 } %992, 0, !dbg !171
  %994 = bitcast i32 %993 to <2 x bfloat>, !dbg !171
  %995 = extractvalue { i32, i32 } %992, 1, !dbg !171
  %996 = bitcast i32 %995 to <2 x bfloat>, !dbg !171
  %997 = extractelement <2 x bfloat> %994, i64 0, !dbg !171
  %998 = extractelement <2 x bfloat> %994, i64 1, !dbg !171
  %999 = extractelement <2 x bfloat> %996, i64 0, !dbg !171
  %1000 = extractelement <2 x bfloat> %996, i64 1, !dbg !171
  %1001 = fpext bfloat %997 to float, !dbg !172
  %1002 = fpext bfloat %998 to float, !dbg !172
  %1003 = fpext bfloat %999 to float, !dbg !172
  %1004 = fpext bfloat %1000 to float, !dbg !172
  %1005 = fmul float %950, %1001, !dbg !169
  %1006 = fmul float %950, %1002, !dbg !169
  %1007 = fmul float %950, %1003, !dbg !169
  %1008 = fmul float %950, %1004, !dbg !169
  %1009 = tail call float @llvm.nvvm.round.f(float %1005) #5, !dbg !173
  %1010 = tail call float @llvm.nvvm.round.f(float %1006) #5, !dbg !173
  %1011 = tail call float @llvm.nvvm.round.f(float %1007) #5, !dbg !173
  %1012 = tail call float @llvm.nvvm.round.f(float %1008) #5, !dbg !173
  %1013 = insertelement <4 x float> poison, float %1009, i64 0, !dbg !174
  %1014 = insertelement <4 x float> %1013, float %1010, i64 1, !dbg !174
  %1015 = insertelement <4 x float> %1014, float %1011, i64 2, !dbg !174
  %1016 = insertelement <4 x float> %1015, float %1012, i64 3, !dbg !174
  %1017 = fcmp ogt <4 x float> %1016, splat (float -1.270000e+02), !dbg !174
  %1018 = fcmp uno <4 x float> %1016, zeroinitializer, !dbg !176
  %1019 = or <4 x i1> %1017, %1018, !dbg !177
  %1020 = select <4 x i1> %1019, <4 x float> %1016, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1021 = fcmp olt <4 x float> %1020, splat (float 1.270000e+02), !dbg !179
  %1022 = fcmp uno <4 x float> %1020, zeroinitializer, !dbg !181
  %1023 = or <4 x i1> %1021, %1022, !dbg !182
  %1024 = fptosi <4 x float> %1020 to <4 x i8>, !dbg !183
  %1025 = select <4 x i1> %1023, <4 x i8> %1024, <4 x i8> splat (i8 127), !dbg !184
  %1026 = getelementptr i8, ptr addrspace(1) %12, i64 %990, !dbg !185
  %1027 = bitcast <4 x i8> %1025 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1027, ptr addrspace(1) %1026, i1 %23) #5, !dbg !186
  %1028 = add i32 %57, 1024, !dbg !187
  %1029 = sext i32 %1028 to i64, !dbg !170
  %1030 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1029, !dbg !170
  %1031 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1030, i1 %23) #5, !dbg !171
  %1032 = extractvalue { i32, i32 } %1031, 0, !dbg !171
  %1033 = bitcast i32 %1032 to <2 x bfloat>, !dbg !171
  %1034 = extractvalue { i32, i32 } %1031, 1, !dbg !171
  %1035 = bitcast i32 %1034 to <2 x bfloat>, !dbg !171
  %1036 = extractelement <2 x bfloat> %1033, i64 0, !dbg !171
  %1037 = extractelement <2 x bfloat> %1033, i64 1, !dbg !171
  %1038 = extractelement <2 x bfloat> %1035, i64 0, !dbg !171
  %1039 = extractelement <2 x bfloat> %1035, i64 1, !dbg !171
  %1040 = fpext bfloat %1036 to float, !dbg !172
  %1041 = fpext bfloat %1037 to float, !dbg !172
  %1042 = fpext bfloat %1038 to float, !dbg !172
  %1043 = fpext bfloat %1039 to float, !dbg !172
  %1044 = fmul float %950, %1040, !dbg !169
  %1045 = fmul float %950, %1041, !dbg !169
  %1046 = fmul float %950, %1042, !dbg !169
  %1047 = fmul float %950, %1043, !dbg !169
  %1048 = tail call float @llvm.nvvm.round.f(float %1044) #5, !dbg !173
  %1049 = tail call float @llvm.nvvm.round.f(float %1045) #5, !dbg !173
  %1050 = tail call float @llvm.nvvm.round.f(float %1046) #5, !dbg !173
  %1051 = tail call float @llvm.nvvm.round.f(float %1047) #5, !dbg !173
  %1052 = insertelement <4 x float> poison, float %1048, i64 0, !dbg !174
  %1053 = insertelement <4 x float> %1052, float %1049, i64 1, !dbg !174
  %1054 = insertelement <4 x float> %1053, float %1050, i64 2, !dbg !174
  %1055 = insertelement <4 x float> %1054, float %1051, i64 3, !dbg !174
  %1056 = fcmp ogt <4 x float> %1055, splat (float -1.270000e+02), !dbg !174
  %1057 = fcmp uno <4 x float> %1055, zeroinitializer, !dbg !176
  %1058 = or <4 x i1> %1056, %1057, !dbg !177
  %1059 = select <4 x i1> %1058, <4 x float> %1055, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1060 = fcmp olt <4 x float> %1059, splat (float 1.270000e+02), !dbg !179
  %1061 = fcmp uno <4 x float> %1059, zeroinitializer, !dbg !181
  %1062 = or <4 x i1> %1060, %1061, !dbg !182
  %1063 = fptosi <4 x float> %1059 to <4 x i8>, !dbg !183
  %1064 = select <4 x i1> %1062, <4 x i8> %1063, <4 x i8> splat (i8 127), !dbg !184
  %1065 = getelementptr i8, ptr addrspace(1) %12, i64 %1029, !dbg !185
  %1066 = bitcast <4 x i8> %1064 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1066, ptr addrspace(1) %1065, i1 %23) #5, !dbg !186
  %1067 = add i32 %57, 1536, !dbg !187
  %1068 = sext i32 %1067 to i64, !dbg !170
  %1069 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1068, !dbg !170
  %1070 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1069, i1 %23) #5, !dbg !171
  %1071 = extractvalue { i32, i32 } %1070, 0, !dbg !171
  %1072 = bitcast i32 %1071 to <2 x bfloat>, !dbg !171
  %1073 = extractvalue { i32, i32 } %1070, 1, !dbg !171
  %1074 = bitcast i32 %1073 to <2 x bfloat>, !dbg !171
  %1075 = extractelement <2 x bfloat> %1072, i64 0, !dbg !171
  %1076 = extractelement <2 x bfloat> %1072, i64 1, !dbg !171
  %1077 = extractelement <2 x bfloat> %1074, i64 0, !dbg !171
  %1078 = extractelement <2 x bfloat> %1074, i64 1, !dbg !171
  %1079 = fpext bfloat %1075 to float, !dbg !172
  %1080 = fpext bfloat %1076 to float, !dbg !172
  %1081 = fpext bfloat %1077 to float, !dbg !172
  %1082 = fpext bfloat %1078 to float, !dbg !172
  %1083 = fmul float %950, %1079, !dbg !169
  %1084 = fmul float %950, %1080, !dbg !169
  %1085 = fmul float %950, %1081, !dbg !169
  %1086 = fmul float %950, %1082, !dbg !169
  %1087 = tail call float @llvm.nvvm.round.f(float %1083) #5, !dbg !173
  %1088 = tail call float @llvm.nvvm.round.f(float %1084) #5, !dbg !173
  %1089 = tail call float @llvm.nvvm.round.f(float %1085) #5, !dbg !173
  %1090 = tail call float @llvm.nvvm.round.f(float %1086) #5, !dbg !173
  %1091 = insertelement <4 x float> poison, float %1087, i64 0, !dbg !174
  %1092 = insertelement <4 x float> %1091, float %1088, i64 1, !dbg !174
  %1093 = insertelement <4 x float> %1092, float %1089, i64 2, !dbg !174
  %1094 = insertelement <4 x float> %1093, float %1090, i64 3, !dbg !174
  %1095 = fcmp ogt <4 x float> %1094, splat (float -1.270000e+02), !dbg !174
  %1096 = fcmp uno <4 x float> %1094, zeroinitializer, !dbg !176
  %1097 = or <4 x i1> %1095, %1096, !dbg !177
  %1098 = select <4 x i1> %1097, <4 x float> %1094, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1099 = fcmp olt <4 x float> %1098, splat (float 1.270000e+02), !dbg !179
  %1100 = fcmp uno <4 x float> %1098, zeroinitializer, !dbg !181
  %1101 = or <4 x i1> %1099, %1100, !dbg !182
  %1102 = fptosi <4 x float> %1098 to <4 x i8>, !dbg !183
  %1103 = select <4 x i1> %1101, <4 x i8> %1102, <4 x i8> splat (i8 127), !dbg !184
  %1104 = getelementptr i8, ptr addrspace(1) %12, i64 %1068, !dbg !185
  %1105 = bitcast <4 x i8> %1103 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1105, ptr addrspace(1) %1104, i1 %23) #5, !dbg !186
  %1106 = add i32 %57, 2048, !dbg !187
  %1107 = sext i32 %1106 to i64, !dbg !170
  %1108 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1107, !dbg !170
  %1109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1108, i1 %23) #5, !dbg !171
  %1110 = extractvalue { i32, i32 } %1109, 0, !dbg !171
  %1111 = bitcast i32 %1110 to <2 x bfloat>, !dbg !171
  %1112 = extractvalue { i32, i32 } %1109, 1, !dbg !171
  %1113 = bitcast i32 %1112 to <2 x bfloat>, !dbg !171
  %1114 = extractelement <2 x bfloat> %1111, i64 0, !dbg !171
  %1115 = extractelement <2 x bfloat> %1111, i64 1, !dbg !171
  %1116 = extractelement <2 x bfloat> %1113, i64 0, !dbg !171
  %1117 = extractelement <2 x bfloat> %1113, i64 1, !dbg !171
  %1118 = fpext bfloat %1114 to float, !dbg !172
  %1119 = fpext bfloat %1115 to float, !dbg !172
  %1120 = fpext bfloat %1116 to float, !dbg !172
  %1121 = fpext bfloat %1117 to float, !dbg !172
  %1122 = fmul float %950, %1118, !dbg !169
  %1123 = fmul float %950, %1119, !dbg !169
  %1124 = fmul float %950, %1120, !dbg !169
  %1125 = fmul float %950, %1121, !dbg !169
  %1126 = tail call float @llvm.nvvm.round.f(float %1122) #5, !dbg !173
  %1127 = tail call float @llvm.nvvm.round.f(float %1123) #5, !dbg !173
  %1128 = tail call float @llvm.nvvm.round.f(float %1124) #5, !dbg !173
  %1129 = tail call float @llvm.nvvm.round.f(float %1125) #5, !dbg !173
  %1130 = insertelement <4 x float> poison, float %1126, i64 0, !dbg !174
  %1131 = insertelement <4 x float> %1130, float %1127, i64 1, !dbg !174
  %1132 = insertelement <4 x float> %1131, float %1128, i64 2, !dbg !174
  %1133 = insertelement <4 x float> %1132, float %1129, i64 3, !dbg !174
  %1134 = fcmp ogt <4 x float> %1133, splat (float -1.270000e+02), !dbg !174
  %1135 = fcmp uno <4 x float> %1133, zeroinitializer, !dbg !176
  %1136 = or <4 x i1> %1134, %1135, !dbg !177
  %1137 = select <4 x i1> %1136, <4 x float> %1133, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1138 = fcmp olt <4 x float> %1137, splat (float 1.270000e+02), !dbg !179
  %1139 = fcmp uno <4 x float> %1137, zeroinitializer, !dbg !181
  %1140 = or <4 x i1> %1138, %1139, !dbg !182
  %1141 = fptosi <4 x float> %1137 to <4 x i8>, !dbg !183
  %1142 = select <4 x i1> %1140, <4 x i8> %1141, <4 x i8> splat (i8 127), !dbg !184
  %1143 = getelementptr i8, ptr addrspace(1) %12, i64 %1107, !dbg !185
  %1144 = bitcast <4 x i8> %1142 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1144, ptr addrspace(1) %1143, i1 %23) #5, !dbg !186
  %1145 = add i32 %57, 2560, !dbg !187
  %1146 = sext i32 %1145 to i64, !dbg !170
  %1147 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1146, !dbg !170
  %1148 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1147, i1 %23) #5, !dbg !171
  %1149 = extractvalue { i32, i32 } %1148, 0, !dbg !171
  %1150 = bitcast i32 %1149 to <2 x bfloat>, !dbg !171
  %1151 = extractvalue { i32, i32 } %1148, 1, !dbg !171
  %1152 = bitcast i32 %1151 to <2 x bfloat>, !dbg !171
  %1153 = extractelement <2 x bfloat> %1150, i64 0, !dbg !171
  %1154 = extractelement <2 x bfloat> %1150, i64 1, !dbg !171
  %1155 = extractelement <2 x bfloat> %1152, i64 0, !dbg !171
  %1156 = extractelement <2 x bfloat> %1152, i64 1, !dbg !171
  %1157 = fpext bfloat %1153 to float, !dbg !172
  %1158 = fpext bfloat %1154 to float, !dbg !172
  %1159 = fpext bfloat %1155 to float, !dbg !172
  %1160 = fpext bfloat %1156 to float, !dbg !172
  %1161 = fmul float %950, %1157, !dbg !169
  %1162 = fmul float %950, %1158, !dbg !169
  %1163 = fmul float %950, %1159, !dbg !169
  %1164 = fmul float %950, %1160, !dbg !169
  %1165 = tail call float @llvm.nvvm.round.f(float %1161) #5, !dbg !173
  %1166 = tail call float @llvm.nvvm.round.f(float %1162) #5, !dbg !173
  %1167 = tail call float @llvm.nvvm.round.f(float %1163) #5, !dbg !173
  %1168 = tail call float @llvm.nvvm.round.f(float %1164) #5, !dbg !173
  %1169 = insertelement <4 x float> poison, float %1165, i64 0, !dbg !174
  %1170 = insertelement <4 x float> %1169, float %1166, i64 1, !dbg !174
  %1171 = insertelement <4 x float> %1170, float %1167, i64 2, !dbg !174
  %1172 = insertelement <4 x float> %1171, float %1168, i64 3, !dbg !174
  %1173 = fcmp ogt <4 x float> %1172, splat (float -1.270000e+02), !dbg !174
  %1174 = fcmp uno <4 x float> %1172, zeroinitializer, !dbg !176
  %1175 = or <4 x i1> %1173, %1174, !dbg !177
  %1176 = select <4 x i1> %1175, <4 x float> %1172, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1177 = fcmp olt <4 x float> %1176, splat (float 1.270000e+02), !dbg !179
  %1178 = fcmp uno <4 x float> %1176, zeroinitializer, !dbg !181
  %1179 = or <4 x i1> %1177, %1178, !dbg !182
  %1180 = fptosi <4 x float> %1176 to <4 x i8>, !dbg !183
  %1181 = select <4 x i1> %1179, <4 x i8> %1180, <4 x i8> splat (i8 127), !dbg !184
  %1182 = getelementptr i8, ptr addrspace(1) %12, i64 %1146, !dbg !185
  %1183 = bitcast <4 x i8> %1181 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1183, ptr addrspace(1) %1182, i1 %23) #5, !dbg !186
  ret void, !dbg !188
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 86, column: 115, scope: !6)
!107 = !DILocation(line: 87, column: 35, scope: !6)
!108 = !DILocation(line: 88, column: 35, scope: !6)
!109 = !DILocation(line: 89, column: 42, scope: !6)
!110 = !DILocation(line: 89, column: 35, scope: !6)
!111 = !DILocation(line: 90, column: 35, scope: !6)
!112 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !113)
!113 = !DILocation(line: 109, column: 47, scope: !6)
!114 = !DILocation(line: 87, column: 50, scope: !6)
!115 = !DILocation(line: 88, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 89, column: 49, scope: !6)
!118 = !DILocation(line: 90, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 102, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 103, column: 24, scope: !6)
!122 = !DILocation(line: 104, column: 24, scope: !6)
!123 = !DILocation(line: 106, column: 24, scope: !6)
!124 = !DILocation(line: 107, column: 24, scope: !6)
!125 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !113)
!126 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !113)
!127 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !113)
!128 = !DILocation(line: 113, column: 53, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !130)
!130 = !DILocation(line: 111, column: 47, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !130)
!133 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !130)
!134 = !DILocation(line: 112, column: 50, scope: !6)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 124, column: 36, scope: !6)
!171 = !DILocation(line: 124, column: 53, scope: !6)
!172 = !DILocation(line: 124, column: 115, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 124, column: 43, scope: !6)
!188 = !DILocation(line: 118, column: 4, scope: !6)
