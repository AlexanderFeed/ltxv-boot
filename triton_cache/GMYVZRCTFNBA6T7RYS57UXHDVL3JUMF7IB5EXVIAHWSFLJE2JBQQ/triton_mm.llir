; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 768, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 768, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 8, !dbg !19
  %20 = and i32 %18, 15, !dbg !19
  %21 = and i32 %15, 64, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %15, 128, !dbg !19
  %24 = lshr exact i32 %23, 2, !dbg !19
  %25 = or disjoint i32 %22, %20, !dbg !19
  %26 = or disjoint i32 %25, %24, !dbg !19
  %27 = or disjoint i32 %14, %26, !dbg !20
  %28 = shl nsw i32 %13, 5, !dbg !21
  %29 = lshr i32 %15, 3, !dbg !22
  %30 = and i32 %29, 31, !dbg !22
  %31 = shl i32 %15, 3, !dbg !22
  %32 = and i32 %31, 24, !dbg !22
  %33 = or disjoint i32 %28, %30, !dbg !23
  %34 = srem i32 %27, 77, !dbg !24
  %35 = srem i32 %33, 3072, !dbg !25
  %36 = shl i32 %15, 2, !dbg !26
  %37 = and i32 %36, 8, !dbg !26
  %38 = and i32 %36, 12, !dbg !26
  %39 = shl nuw nsw i32 %16, 2, !dbg !26
  %40 = or disjoint i32 %38, %39, !dbg !26
  %41 = mul nsw i32 %34, 768, !dbg !27
  %42 = mul nsw i32 %35, 768, !dbg !28
  %43 = or disjoint i32 %41, %32, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = xor i32 %31, %15, !dbg !31
  %47 = and i32 %46, 24, !dbg !31
  %48 = shl nuw nsw i32 %26, 5, !dbg !31
  %49 = or disjoint i32 %48, %47, !dbg !31
  %50 = zext nneg i32 %49 to i64, !dbg !31
  %51 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %50, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %51, ptr addrspace(1) %45, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %52 = or disjoint i32 %42, %40, !dbg !32
  %53 = sext i32 %52 to i64, !dbg !33
  %54 = getelementptr bfloat, ptr addrspace(1) %1, i64 %53, !dbg !33
  %55 = lshr exact i32 %17, 1, !dbg !34
  %56 = lshr i32 %15, 1, !dbg !34
  %57 = and i32 %56, 24, !dbg !34
  %58 = xor i32 %40, %57, !dbg !34
  %59 = shl nuw nsw i32 %30, 5, !dbg !34
  %60 = or disjoint i32 %58, %59, !dbg !34
  %61 = zext nneg i32 %60 to i64, !dbg !34
  %62 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %61, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %62, ptr addrspace(1) %54, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %63 = or disjoint i32 %43, 32, !dbg !29
  %64 = sext i32 %63 to i64, !dbg !30
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %50, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %66, ptr addrspace(1) %65, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %67 = or disjoint i32 %52, 32, !dbg !32
  %68 = sext i32 %67 to i64, !dbg !33
  %69 = getelementptr bfloat, ptr addrspace(1) %1, i64 %68, !dbg !33
  %70 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 18432), i64 %61, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %70, ptr addrspace(1) %69, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %71 = or disjoint i32 %43, 64, !dbg !29
  %72 = sext i32 %71 to i64, !dbg !30
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %50, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %73, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %75 = or disjoint i32 %52, 64, !dbg !32
  %76 = sext i32 %75 to i64, !dbg !33
  %77 = getelementptr bfloat, ptr addrspace(1) %1, i64 %76, !dbg !33
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %61, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %78, ptr addrspace(1) %77, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %79 = or disjoint i32 %43, 96, !dbg !29
  %80 = sext i32 %79 to i64, !dbg !30
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %50, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %81, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %83 = or disjoint i32 %52, 96, !dbg !32
  %84 = sext i32 %83 to i64, !dbg !33
  %85 = getelementptr bfloat, ptr addrspace(1) %1, i64 %84, !dbg !33
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %61, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %86, ptr addrspace(1) %85, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %87 = or disjoint i32 %37, %39
  %88 = and i32 %15, 7
  %89 = and i32 %15, 15
  %90 = xor i32 %87, %55
  %91 = or disjoint i32 %22, %89
  %92 = or disjoint i32 %91, %24
  %93 = shl nuw nsw i32 %92, 5
  %94 = or disjoint i32 %93, %90
  %95 = zext nneg i32 %94 to i64
  %96 = or disjoint i32 %37, 16
  %97 = or disjoint i32 %55, %39
  %98 = xor i32 %97, %96
  %99 = or disjoint i32 %98, %93
  %100 = zext nneg i32 %99 to i64
  %and.ra20 = and i32 %15, 24
  %101 = xor i32 %87, %and.ra20
  %102 = or disjoint i32 %19, %88
  %103 = shl nuw nsw i32 %102, 5
  %104 = or disjoint i32 %101, %103
  %105 = zext nneg i32 %104 to i64
  %106 = or disjoint i32 %104, 512
  %107 = zext nneg i32 %106 to i64
  %invariant.op = or disjoint i32 %43, 128, !dbg !35
  %invariant.op23 = or disjoint i32 %52, 128, !dbg !35
  %108 = sext i32 %invariant.op to i64, !dbg !35
  %109 = sext i32 %invariant.op23 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !35
  %invariant.gep42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %109, !dbg !35
  br label %110, !dbg !35

110:                                              ; preds = %4, %110
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %110 ]
  %111 = phi i32 [ -1, %4 ], [ %124, %110 ]
  %112 = phi i32 [ 3, %4 ], [ %185, %110 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %174, %110 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %175, %110 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %176, %110 ]
  %116 = phi float [ 0.000000e+00, %4 ], [ %177, %110 ]
  %117 = phi float [ 0.000000e+00, %4 ], [ %179, %110 ]
  %118 = phi float [ 0.000000e+00, %4 ], [ %180, %110 ]
  %119 = phi float [ 0.000000e+00, %4 ], [ %181, %110 ]
  %120 = phi float [ 0.000000e+00, %4 ], [ %182, %110 ]
  %121 = icmp samesign ult i64 %indvars.iv, 20, !dbg !35
  %122 = add i32 %111, 1, !dbg !35
  %123 = icmp slt i32 %122, 4, !dbg !35
  %124 = select i1 %123, i32 %122, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %125 = shl i32 %124, 11, !dbg !31
  %126 = sext i32 %125 to i64, !dbg !31
  %127 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %126, !dbg !31
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %127, i64 %95, !dbg !31
  %129 = ptrtoint ptr addrspace(3) %128 to i64, !dbg !31
  %130 = trunc i64 %129 to i32, !dbg !31
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %130) #1, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !31
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %127, i64 %100, !dbg !31
  %137 = ptrtoint ptr addrspace(3) %136 to i64, !dbg !31
  %138 = trunc i64 %137 to i32, !dbg !31
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %138) #1, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !31
  %144 = shl i32 %124, 10, !dbg !34
  %145 = sext i32 %144 to i64, !dbg !34
  %146 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %145, !dbg !34
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %146, i64 %105, !dbg !34
  %148 = ptrtoint ptr addrspace(3) %147 to i64, !dbg !34
  %149 = trunc i64 %148 to i32, !dbg !34
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %149) #1, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !34
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %146, i64 %107, !dbg !34
  %156 = ptrtoint ptr addrspace(3) %155 to i64, !dbg !34
  %157 = trunc i64 %156 to i32, !dbg !34
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %157) #1, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !34
  %163 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %113, float %114, float %115, float %116, i32 %132, i32 %133, i32 %134, i32 %135, i32 %151, i32 %152) #1, !dbg !36
  %164 = extractvalue { float, float, float, float } %163, 0, !dbg !36
  %165 = extractvalue { float, float, float, float } %163, 1, !dbg !36
  %166 = extractvalue { float, float, float, float } %163, 2, !dbg !36
  %167 = extractvalue { float, float, float, float } %163, 3, !dbg !36
  %168 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %117, float %118, float %119, float %120, i32 %132, i32 %133, i32 %134, i32 %135, i32 %159, i32 %160) #1, !dbg !36
  %169 = extractvalue { float, float, float, float } %168, 0, !dbg !36
  %170 = extractvalue { float, float, float, float } %168, 1, !dbg !36
  %171 = extractvalue { float, float, float, float } %168, 2, !dbg !36
  %172 = extractvalue { float, float, float, float } %168, 3, !dbg !36
  %173 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %140, i32 %141, i32 %142, i32 %143, i32 %153, i32 %154) #1, !dbg !36
  %174 = extractvalue { float, float, float, float } %173, 0, !dbg !36
  %175 = extractvalue { float, float, float, float } %173, 1, !dbg !36
  %176 = extractvalue { float, float, float, float } %173, 2, !dbg !36
  %177 = extractvalue { float, float, float, float } %173, 3, !dbg !36
  %178 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %169, float %170, float %171, float %172, i32 %140, i32 %141, i32 %142, i32 %143, i32 %161, i32 %162) #1, !dbg !36
  %179 = extractvalue { float, float, float, float } %178, 0, !dbg !36
  %180 = extractvalue { float, float, float, float } %178, 1, !dbg !36
  %181 = extractvalue { float, float, float, float } %178, 2, !dbg !36
  %182 = extractvalue { float, float, float, float } %178, 3, !dbg !36
  %183 = add i32 %112, 1, !dbg !35
  %184 = icmp slt i32 %183, 4, !dbg !35
  %185 = select i1 %184, i32 %183, i32 0, !dbg !35
  %186 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep41 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %186, !dbg !30
  %187 = shl i32 %185, 11, !dbg !31
  %188 = sext i32 %187 to i64, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr bfloat, ptr addrspace(3) %51, i64 %188, !dbg !31
  %189 = select i1 %121, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep41, i32 %189) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep43 = getelementptr bfloat, ptr addrspace(1) %invariant.gep42, i64 %186, !dbg !33
  %190 = shl i32 %185, 10, !dbg !34
  %191 = sext i32 %190 to i64, !dbg !34
  %gep22 = getelementptr bfloat, ptr addrspace(3) %62, i64 %191, !dbg !34
  %192 = select i1 %121, i32 8, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep22, ptr addrspace(1) %gep43, i32 %192) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !35
  br i1 %exitcond.not, label %193, label %110, !dbg !35

193:                                              ; preds = %110
  %194 = or disjoint i32 %28, %32, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %195 = icmp slt i32 %27, 77, !dbg !38
  %196 = icmp slt i32 %194, 3072, !dbg !39
  %197 = and i1 %195, %196, !dbg !40
  %198 = mul i32 %27, 3072, !dbg !41
  %199 = add i32 %198, %194, !dbg !42
  %200 = sext i32 %199 to i64, !dbg !43
  %201 = getelementptr bfloat, ptr addrspace(1) %2, i64 %200, !dbg !43
  %202 = fptrunc float %174 to bfloat, !dbg !44
  %203 = fptrunc float %175 to bfloat, !dbg !44
  %204 = fptrunc float %176 to bfloat, !dbg !44
  %205 = fptrunc float %177 to bfloat, !dbg !44
  %206 = fptrunc float %179 to bfloat, !dbg !44
  %207 = fptrunc float %180 to bfloat, !dbg !44
  %208 = fptrunc float %181 to bfloat, !dbg !44
  %209 = fptrunc float %182 to bfloat, !dbg !44
  %210 = shl i32 %15, 1, !dbg !44
  %211 = and i32 %210, 6, !dbg !44
  %212 = shl nuw nsw i32 %16, 3, !dbg !44
  %213 = or disjoint i32 %211, %212, !dbg !44
  %214 = and i32 %31, 64, !dbg !44
  %215 = or disjoint i32 %213, %214, !dbg !44
  %216 = shl nuw nsw i32 %17, 3, !dbg !44
  %217 = or disjoint i32 %215, %216, !dbg !44
  %218 = or disjoint i32 %217, %19, !dbg !44
  %219 = shl nuw nsw i32 %21, 3, !dbg !44
  %220 = shl nuw nsw i32 %23, 3, !dbg !44
  %221 = or disjoint i32 %220, %219, !dbg !44
  %222 = xor i32 %221, %218, !dbg !44
  %223 = and i32 %31, 376, !dbg !44
  %224 = or disjoint i32 %223, %216, !dbg !44
  %225 = or disjoint i32 %224, %219, !dbg !44
  %226 = or disjoint i32 %225, %220, !dbg !44
  %227 = lshr i32 %222, 2, !dbg !44
  %228 = and i32 %227, 1073741816, !dbg !44
  %229 = add nuw nsw i32 %228, %222, !dbg !44
  %230 = zext nneg i32 %229 to i64, !dbg !44
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %230, !dbg !44
  %232 = bitcast bfloat %202 to i16, !dbg !44
  %233 = bitcast bfloat %203 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %231, i16 %232, i16 %233, i1 true) #1, !dbg !44
  %234 = xor i32 %222, 256, !dbg !44
  %235 = lshr i32 %234, 2, !dbg !44
  %236 = and i32 %235, 1073741816, !dbg !44
  %237 = add nuw nsw i32 %236, %234, !dbg !44
  %238 = zext nneg i32 %237 to i64, !dbg !44
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %238, !dbg !44
  %240 = bitcast bfloat %204 to i16, !dbg !44
  %241 = bitcast bfloat %205 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %239, i16 %240, i16 %241, i1 true) #1, !dbg !44
  %242 = xor i32 %222, 16, !dbg !44
  %243 = add nuw nsw i32 %228, %242, !dbg !44
  %244 = zext nneg i32 %243 to i64, !dbg !44
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %244, !dbg !44
  %246 = bitcast bfloat %206 to i16, !dbg !44
  %247 = bitcast bfloat %207 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %245, i16 %246, i16 %247, i1 true) #1, !dbg !44
  %248 = xor i32 %222, 272, !dbg !44
  %249 = lshr i32 %248, 2, !dbg !44
  %250 = and i32 %249, 1073741816, !dbg !44
  %251 = add nuw nsw i32 %250, %248, !dbg !44
  %252 = zext nneg i32 %251 to i64, !dbg !44
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %252, !dbg !44
  %254 = bitcast bfloat %208 to i16, !dbg !44
  %255 = bitcast bfloat %209 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %253, i16 %254, i16 %255, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %256 = lshr exact i32 %226, 2, !dbg !44
  %257 = and i32 %256, 536870904, !dbg !44
  %258 = add nuw nsw i32 %257, %226, !dbg !44
  %259 = zext nneg i32 %258 to i64, !dbg !44
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %259, !dbg !44
  %.extract = load i32, ptr addrspace(3) %260, align 16, !dbg !44
  %261 = getelementptr inbounds nuw i8, ptr addrspace(3) %260, i64 4, !dbg !44
  %.extract15 = load i32, ptr addrspace(3) %261, align 4, !dbg !44
  %262 = getelementptr inbounds nuw i8, ptr addrspace(3) %260, i64 8, !dbg !44
  %.extract17 = load i32, ptr addrspace(3) %262, align 8, !dbg !44
  %263 = getelementptr inbounds nuw i8, ptr addrspace(3) %260, i64 12, !dbg !44
  %.extract19 = load i32, ptr addrspace(3) %263, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract17, i32 %.extract19, ptr addrspace(1) %201, i1 %197) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbualxtsxvijthf4336bi4kn24hm6vb6olhleea5emj5uotbgqw.py", directory: "/tmp/torchinductor_root/rb")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 67, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 29, scope: !6)
!28 = !DILocation(line: 77, column: 54, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
