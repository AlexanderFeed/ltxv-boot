; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 2, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = and i32 %8, 3, !dbg !11
  %12 = or disjoint i32 %10, %7, !dbg !12
  %13 = sdiv i32 %12, 24, !dbg !13
  %14 = mul i32 %13, 24, !dbg !14
  %.decomposed = sub i32 %12, %14, !dbg !14
  %15 = shl nsw i32 %.decomposed, 7, !dbg !15
  %16 = mul i32 %13, 9216, !dbg !16
  %17 = or disjoint i32 %15, %11
  %18 = add i32 %17, %16
  br label %19, !dbg !17

19:                                               ; preds = %5, %19
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %19 ]
  %20 = phi float [ 0.000000e+00, %5 ], [ %29, %19 ]
  %21 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !18
  %22 = add i32 %18, %21, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %24, i1 true) #3, !dbg !20
  %26 = bitcast i16 %25 to bfloat, !dbg !20
  %27 = fpext bfloat %26 to float, !dbg !21
  %28 = fmul float %27, %27, !dbg !22
  %29 = fadd float %20, %28, !dbg !23
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !17
  %30 = icmp samesign ult i64 %indvars.iv, 124, !dbg !17
  br i1 %30, label %19, label %31, !dbg !17

31:                                               ; preds = %19
  %32 = and i32 %8, 63, !dbg !11
  %33 = or disjoint i32 %7, %32, !dbg !12
  %34 = bitcast float %29 to i32, !dbg !24
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 2, i32 31), !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = fadd float %29, %36, !dbg !28
  %38 = bitcast float %37 to i32, !dbg !24
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 1, i32 31), !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = fadd float %37, %40, !dbg !28
  %42 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %43 = bitcast float %41 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %44 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32, !dbg !30
  %45 = load i32, ptr addrspace(3) %44, align 4, !dbg !30
  %46 = sext i32 %33 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !31
  %48 = and i32 %8, 192, !dbg !32
  %49 = icmp eq i32 %48, 0, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %45, ptr addrspace(1) %47, i1 %49) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckavwgge4wo3d4gevf27syez73oho7yang6ck5clzpaesyo4cqfp.py", directory: "/tmp/torchinductor_root/ka")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_3, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_3", linkageName: "triton_red_fused__to_copy_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 29, column: 19, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 38, column: 45, scope: !6)
!16 = !DILocation(line: 38, column: 55, scope: !6)
!17 = !DILocation(line: 32, column: 40, scope: !6)
!18 = !DILocation(line: 38, column: 50, scope: !6)
!19 = !DILocation(line: 38, column: 34, scope: !6)
!20 = !DILocation(line: 38, column: 60, scope: !6)
!21 = !DILocation(line: 38, column: 114, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 42, column: 23, scope: !6)
!24 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 44, column: 25, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 44, column: 28, scope: !6)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 45, column: 36, scope: !6)
!33 = !DILocation(line: 45, column: 4, scope: !6)
