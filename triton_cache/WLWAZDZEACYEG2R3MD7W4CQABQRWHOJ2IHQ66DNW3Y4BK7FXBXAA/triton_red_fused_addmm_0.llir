; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 9, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %8, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = and i32 %9, 511, !dbg !14
  %14 = mul i32 %11, 3072, !dbg !15
  %15 = zext nneg i32 %13 to i64, !dbg !16
  %16 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %16, i1 true) #4, !dbg !18
  br i1 %12, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %6
  %18 = or disjoint i32 %13, %14, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr bfloat, ptr addrspace(1) %1, i64 %19, !dbg !20
  %21 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %20, i1 false) #4, !dbg !21
  %22 = or disjoint i64 %15, 512, !dbg !22
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %23, i1 true) #4, !dbg !18
  %25 = trunc nuw nsw i64 %22 to i32, !dbg !19
  %26 = or disjoint i32 %14, %25, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 false) #4, !dbg !21
  %30 = or disjoint i64 %15, 1024, !dbg !22
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %31, i1 true) #4, !dbg !18
  %33 = trunc nuw nsw i64 %30 to i32, !dbg !19
  %34 = add i32 %14, %33, !dbg !19
  %35 = sext i32 %34 to i64, !dbg !20
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %36, i1 false) #4, !dbg !21
  %38 = or disjoint i64 %15, 1536, !dbg !22
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !17
  %40 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %39, i1 true) #4, !dbg !18
  %41 = trunc nuw nsw i64 %38 to i32, !dbg !19
  %42 = add i32 %14, %41, !dbg !19
  %43 = sext i32 %42 to i64, !dbg !20
  %44 = getelementptr bfloat, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %44, i1 false) #4, !dbg !21
  %46 = or disjoint i64 %15, 2048, !dbg !22
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !17
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 true) #4, !dbg !18
  %49 = trunc nuw nsw i64 %46 to i32, !dbg !19
  %50 = add i32 %14, %49, !dbg !19
  %51 = sext i32 %50 to i64, !dbg !20
  %52 = getelementptr bfloat, ptr addrspace(1) %1, i64 %51, !dbg !20
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 false) #4, !dbg !21
  %54 = or disjoint i64 %15, 2560, !dbg !22
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !17
  %56 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %55, i1 true) #4, !dbg !18
  %57 = trunc nuw nsw i64 %54 to i32, !dbg !19
  %58 = add i32 %14, %57, !dbg !19
  %59 = sext i32 %58 to i64, !dbg !20
  %60 = getelementptr bfloat, ptr addrspace(1) %1, i64 %59, !dbg !20
  %61 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %60, i1 false) #4, !dbg !21
  br label %.split2.us, !dbg !11

.split.us.preheader:                              ; preds = %6
  %62 = or disjoint i32 %13, %14, !dbg !19
  %63 = sext i32 %62 to i64, !dbg !20
  %64 = getelementptr bfloat, ptr addrspace(1) %1, i64 %63, !dbg !20
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 true) #4, !dbg !21
  %66 = or disjoint i64 %15, 512, !dbg !22
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !17
  %68 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %67, i1 true) #4, !dbg !18
  %69 = trunc nuw nsw i64 %66 to i32, !dbg !19
  %70 = or disjoint i32 %14, %69, !dbg !19
  %71 = sext i32 %70 to i64, !dbg !20
  %72 = getelementptr bfloat, ptr addrspace(1) %1, i64 %71, !dbg !20
  %73 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %72, i1 true) #4, !dbg !21
  %74 = insertelement <2 x i16> poison, i16 %17, i64 0, !dbg !18
  %75 = insertelement <2 x i16> %74, i16 %68, i64 1, !dbg !18
  %76 = bitcast <2 x i16> %75 to <2 x bfloat>, !dbg !18
  %77 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !23
  %78 = extractelement <2 x float> %77, i64 0, !dbg !24
  %79 = fsub float 0.000000e+00, %78, !dbg !24
  %80 = fmul float %79, 0x3FF7154760000000, !dbg !28
  %81 = tail call float @llvm.nvvm.ex2.approx.f(float %80), !dbg !28
  %82 = fadd float %81, 1.000000e+00, !dbg !29
  %83 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %82), !dbg !30
  %84 = insertelement <2 x i16> poison, i16 %65, i64 0, !dbg !21
  %85 = insertelement <2 x i16> %84, i16 %73, i64 1, !dbg !21
  %86 = bitcast <2 x i16> %85 to <2 x bfloat>, !dbg !21
  %87 = fpext <2 x bfloat> %86 to <2 x float>, !dbg !31
  %88 = extractelement <2 x float> %77, i64 1, !dbg !24
  %89 = fsub float 0.000000e+00, %88, !dbg !24
  %90 = fmul float %89, 0x3FF7154760000000, !dbg !28
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %90), !dbg !28
  %92 = fadd float %91, 1.000000e+00, !dbg !29
  %93 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %92), !dbg !30
  %94 = insertelement <2 x float> poison, float %83, i64 0, !dbg !32
  %95 = insertelement <2 x float> %94, float %93, i64 1, !dbg !32
  %96 = fmul <2 x float> %95, %77, !dbg !32
  %97 = fmul <2 x float> %96, %87, !dbg !33
  %98 = extractelement <2 x float> %97, i64 0, !dbg !34
  %99 = fadd float %98, 0.000000e+00, !dbg !34
  %100 = extractelement <2 x float> %97, i64 1, !dbg !34
  %101 = fadd float %99, %100, !dbg !34
  %102 = or disjoint i64 %15, 1024, !dbg !22
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !17
  %104 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %103, i1 true) #4, !dbg !18
  %105 = trunc nuw nsw i64 %102 to i32, !dbg !19
  %106 = add i32 %14, %105, !dbg !19
  %107 = sext i32 %106 to i64, !dbg !20
  %108 = getelementptr bfloat, ptr addrspace(1) %1, i64 %107, !dbg !20
  %109 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %108, i1 true) #4, !dbg !21
  %110 = or disjoint i64 %15, 1536, !dbg !22
  %111 = getelementptr bfloat, ptr addrspace(1) %0, i64 %110, !dbg !17
  %112 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %111, i1 true) #4, !dbg !18
  %113 = trunc nuw nsw i64 %110 to i32, !dbg !19
  %114 = add i32 %14, %113, !dbg !19
  %115 = sext i32 %114 to i64, !dbg !20
  %116 = getelementptr bfloat, ptr addrspace(1) %1, i64 %115, !dbg !20
  %117 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %116, i1 true) #4, !dbg !21
  %118 = insertelement <2 x i16> poison, i16 %104, i64 0, !dbg !18
  %119 = insertelement <2 x i16> %118, i16 %112, i64 1, !dbg !18
  %120 = bitcast <2 x i16> %119 to <2 x bfloat>, !dbg !18
  %121 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !23
  %122 = extractelement <2 x float> %121, i64 0, !dbg !24
  %123 = fsub float 0.000000e+00, %122, !dbg !24
  %124 = fmul float %123, 0x3FF7154760000000, !dbg !28
  %125 = tail call float @llvm.nvvm.ex2.approx.f(float %124), !dbg !28
  %126 = fadd float %125, 1.000000e+00, !dbg !29
  %127 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %126), !dbg !30
  %128 = insertelement <2 x i16> poison, i16 %109, i64 0, !dbg !21
  %129 = insertelement <2 x i16> %128, i16 %117, i64 1, !dbg !21
  %130 = bitcast <2 x i16> %129 to <2 x bfloat>, !dbg !21
  %131 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !31
  %132 = extractelement <2 x float> %121, i64 1, !dbg !24
  %133 = fsub float 0.000000e+00, %132, !dbg !24
  %134 = fmul float %133, 0x3FF7154760000000, !dbg !28
  %135 = tail call float @llvm.nvvm.ex2.approx.f(float %134), !dbg !28
  %136 = fadd float %135, 1.000000e+00, !dbg !29
  %137 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %136), !dbg !30
  %138 = insertelement <2 x float> poison, float %127, i64 0, !dbg !32
  %139 = insertelement <2 x float> %138, float %137, i64 1, !dbg !32
  %140 = fmul <2 x float> %139, %121, !dbg !32
  %141 = fmul <2 x float> %140, %131, !dbg !33
  %142 = extractelement <2 x float> %141, i64 0, !dbg !34
  %143 = fadd float %101, %142, !dbg !34
  %144 = extractelement <2 x float> %141, i64 1, !dbg !34
  %145 = fadd float %143, %144, !dbg !34
  %146 = or disjoint i64 %15, 2048, !dbg !22
  %147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !17
  %148 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %147, i1 true) #4, !dbg !18
  %149 = trunc nuw nsw i64 %146 to i32, !dbg !19
  %150 = add i32 %14, %149, !dbg !19
  %151 = sext i32 %150 to i64, !dbg !20
  %152 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !20
  %153 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 true) #4, !dbg !21
  %154 = or disjoint i64 %15, 2560, !dbg !22
  %155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !17
  %156 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %155, i1 true) #4, !dbg !18
  %157 = trunc nuw nsw i64 %154 to i32, !dbg !19
  %158 = add i32 %14, %157, !dbg !19
  %159 = sext i32 %158 to i64, !dbg !20
  %160 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !20
  %161 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %160, i1 true) #4, !dbg !21
  %162 = insertelement <2 x i16> poison, i16 %148, i64 0, !dbg !18
  %163 = insertelement <2 x i16> %162, i16 %156, i64 1, !dbg !18
  %164 = bitcast <2 x i16> %163 to <2 x bfloat>, !dbg !18
  %165 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !23
  %166 = extractelement <2 x float> %165, i64 0, !dbg !24
  %167 = fsub float 0.000000e+00, %166, !dbg !24
  %168 = fmul float %167, 0x3FF7154760000000, !dbg !28
  %169 = tail call float @llvm.nvvm.ex2.approx.f(float %168), !dbg !28
  %170 = fadd float %169, 1.000000e+00, !dbg !29
  %171 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %170), !dbg !30
  %172 = insertelement <2 x i16> poison, i16 %153, i64 0, !dbg !21
  %173 = insertelement <2 x i16> %172, i16 %161, i64 1, !dbg !21
  %174 = bitcast <2 x i16> %173 to <2 x bfloat>, !dbg !21
  %175 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !31
  %176 = extractelement <2 x float> %165, i64 1, !dbg !24
  %177 = fsub float 0.000000e+00, %176, !dbg !24
  %178 = fmul float %177, 0x3FF7154760000000, !dbg !28
  %179 = tail call float @llvm.nvvm.ex2.approx.f(float %178), !dbg !28
  %180 = fadd float %179, 1.000000e+00, !dbg !29
  %181 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %180), !dbg !30
  %182 = insertelement <2 x float> poison, float %171, i64 0, !dbg !32
  %183 = insertelement <2 x float> %182, float %181, i64 1, !dbg !32
  %184 = fmul <2 x float> %183, %165, !dbg !32
  %185 = fmul <2 x float> %184, %175, !dbg !33
  %186 = extractelement <2 x float> %185, i64 0, !dbg !34
  %187 = fadd float %145, %186, !dbg !34
  %188 = extractelement <2 x float> %185, i64 1, !dbg !34
  %189 = fadd float %187, %188, !dbg !34
  br label %.split2.us, !dbg !11

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.us-phi = phi float [ %189, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !11
  %190 = lshr i32 %9, 5, !dbg !11
  %191 = and i32 %9, 31, !dbg !11
  %192 = and i32 %9, 1, !dbg !11
  %193 = or disjoint i32 %8, %192, !dbg !12
  %194 = icmp slt i32 %193, 9216, !dbg !13
  %195 = bitcast float %.us-phi to i32, !dbg !35
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !35
  %197 = bitcast i32 %196 to float, !dbg !35
  %198 = fadd float %.us-phi, %197, !dbg !37
  %199 = bitcast float %198 to i32, !dbg !35
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !35
  %201 = bitcast i32 %200 to float, !dbg !35
  %202 = fadd float %198, %201, !dbg !37
  %203 = bitcast float %202 to i32, !dbg !35
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !35
  %205 = bitcast i32 %204 to float, !dbg !35
  %206 = fadd float %202, %205, !dbg !37
  %207 = bitcast float %206 to i32, !dbg !35
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !35
  %209 = bitcast i32 %208 to float, !dbg !35
  %210 = fadd float %206, %209, !dbg !37
  %211 = bitcast float %210 to i32, !dbg !35
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !35
  %213 = bitcast i32 %212 to float, !dbg !35
  %214 = fadd float %210, %213, !dbg !37
  %215 = and i32 %190, 15, !dbg !35
  %216 = icmp eq i32 %191, 0, !dbg !35
  %217 = shl nuw nsw i32 %.lobit, 4, !dbg !35
  %218 = or disjoint i32 %217, %215, !dbg !35
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !35
  %220 = bitcast float %214 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 %216) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %221 = icmp slt i32 %9, 32, !dbg !35
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %223 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %222, i1 %221) #4, !dbg !35
  %224 = bitcast i32 %223 to float, !dbg !35
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !35
  %226 = bitcast i32 %225 to float, !dbg !35
  %227 = fadd float %224, %226, !dbg !37
  %228 = bitcast float %227 to i32, !dbg !35
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !35
  %230 = bitcast i32 %229 to float, !dbg !35
  %231 = fadd float %227, %230, !dbg !37
  %232 = bitcast float %231 to i32, !dbg !35
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !35
  %234 = bitcast i32 %233 to float, !dbg !35
  %235 = fadd float %231, %234, !dbg !37
  %236 = bitcast float %235 to i32, !dbg !35
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !35
  %238 = bitcast i32 %237 to float, !dbg !35
  %239 = fadd float %235, %238, !dbg !37
  %240 = and i32 %9, 15, !dbg !35
  %241 = icmp eq i32 %240, 0, !dbg !35
  %242 = and i1 %221, %241, !dbg !35
  %243 = bitcast float %239 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %243, i1 %242) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !35
  %245 = load i32, ptr addrspace(3) %244, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %246 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !39
  %247 = insertelement <1 x i32> poison, i32 %245, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %248 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %192, !dbg !39
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !39
  %250 = sext i32 %193 to i64, !dbg !40
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %250, !dbg !40
  %252 = and i32 %9, 1022, !dbg !41
  %253 = icmp eq i32 %252, 0, !dbg !41
  %254 = and i1 %253, %194, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %249, ptr addrspace(1) %251, i1 %254) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 37, column: 41, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 31, column: 31, scope: !6)
!23 = !DILocation(line: 36, column: 94, scope: !6)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = !DILocation(line: 39, column: 26, scope: !6)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 37, column: 113, scope: !6)
!32 = !DILocation(line: 40, column: 22, scope: !6)
!33 = !DILocation(line: 44, column: 22, scope: !6)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 27, scope: !6)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!39 = !DILocation(line: 48, column: 30, scope: !6)
!40 = !DILocation(line: 49, column: 25, scope: !6)
!41 = !DILocation(line: 49, column: 37, scope: !6)
!42 = !DILocation(line: 49, column: 4, scope: !6)
