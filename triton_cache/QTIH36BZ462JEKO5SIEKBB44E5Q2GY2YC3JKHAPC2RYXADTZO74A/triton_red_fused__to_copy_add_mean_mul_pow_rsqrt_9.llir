; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = icmp slt i32 %8, 512, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 3, !dbg !12
  %14 = and i32 %13, 4088, !dbg !12
  %15 = shl i32 %7, 13, !dbg !13
  %16 = or disjoint i32 %14, %15, !dbg !14
  %17 = or disjoint i32 %16, 4096, !dbg !14
  %18 = sext i32 %16 to i64, !dbg !15
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %17 to i64, !dbg !15
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i1 %9) #5, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !16
  %31 = extractelement <2 x bfloat> %24, i64 0, !dbg !16
  %32 = extractelement <2 x bfloat> %24, i64 1, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %9) #5, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !16
  %38 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !16
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !16
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !16
  %44 = fpext bfloat %31 to float, !dbg !17
  %45 = fpext bfloat %32 to float, !dbg !17
  %46 = fpext bfloat %42 to float, !dbg !17
  %47 = fpext bfloat %43 to float, !dbg !17
  %48 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !18
  %49 = getelementptr bfloat, ptr addrspace(1) %1, i64 %20, !dbg !18
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %9) #5, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !19
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !19
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !19
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !19
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !19
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !19
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !19
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %9) #5, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !19
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !19
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !19
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !19
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !19
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !19
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !19
  %72 = fpext bfloat %59 to float, !dbg !20
  %73 = fpext bfloat %60 to float, !dbg !20
  %74 = fpext bfloat %70 to float, !dbg !20
  %75 = fpext bfloat %71 to float, !dbg !20
  %76 = fadd float %44, %72, !dbg !21
  %77 = fadd float %45, %73, !dbg !21
  %78 = fadd float %46, %74, !dbg !21
  %79 = fadd float %47, %75, !dbg !21
  %80 = fmul float %76, %76, !dbg !22
  %81 = fmul float %77, %77, !dbg !22
  %82 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !17
  %83 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !20
  %84 = fadd <2 x float> %82, %83, !dbg !21
  %85 = fmul <2 x float> %84, %84, !dbg !22
  %86 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !17
  %87 = fpext <2 x bfloat> %56 to <2 x float>, !dbg !20
  %88 = fadd <2 x float> %86, %87, !dbg !21
  %89 = fmul <2 x float> %88, %88, !dbg !22
  %90 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !17
  %91 = fpext <2 x bfloat> %58 to <2 x float>, !dbg !20
  %92 = fadd <2 x float> %90, %91, !dbg !21
  %93 = fmul <2 x float> %92, %92, !dbg !22
  %94 = fmul float %78, %78, !dbg !22
  %95 = fmul float %79, %79, !dbg !22
  %96 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !17
  %97 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !20
  %98 = fadd <2 x float> %96, %97, !dbg !21
  %99 = fmul <2 x float> %98, %98, !dbg !22
  %100 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !17
  %101 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !20
  %102 = fadd <2 x float> %100, %101, !dbg !21
  %103 = fmul <2 x float> %102, %102, !dbg !22
  %104 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !17
  %105 = fpext <2 x bfloat> %69 to <2 x float>, !dbg !20
  %106 = fadd <2 x float> %104, %105, !dbg !21
  %107 = fmul <2 x float> %106, %106, !dbg !22
  %108 = fadd float %80, %81, !dbg !23
  %109 = extractelement <2 x float> %85, i64 0, !dbg !23
  %110 = fadd float %109, %108, !dbg !23
  %111 = extractelement <2 x float> %85, i64 1, !dbg !23
  %112 = fadd float %111, %110, !dbg !23
  %113 = extractelement <2 x float> %89, i64 0, !dbg !23
  %114 = fadd float %113, %112, !dbg !23
  %115 = extractelement <2 x float> %89, i64 1, !dbg !23
  %116 = fadd float %115, %114, !dbg !23
  %117 = extractelement <2 x float> %93, i64 0, !dbg !23
  %118 = fadd float %117, %116, !dbg !23
  %119 = extractelement <2 x float> %93, i64 1, !dbg !23
  %120 = fadd float %119, %118, !dbg !23
  %121 = select i1 %9, float %120, float 0.000000e+00, !dbg !23
  %122 = fadd float %94, %95, !dbg !23
  %123 = extractelement <2 x float> %99, i64 0, !dbg !23
  %124 = fadd float %123, %122, !dbg !23
  %125 = extractelement <2 x float> %99, i64 1, !dbg !23
  %126 = fadd float %125, %124, !dbg !23
  %127 = extractelement <2 x float> %103, i64 0, !dbg !23
  %128 = fadd float %127, %126, !dbg !23
  %129 = extractelement <2 x float> %103, i64 1, !dbg !23
  %130 = fadd float %129, %128, !dbg !23
  %131 = extractelement <2 x float> %107, i64 0, !dbg !23
  %132 = fadd float %131, %130, !dbg !23
  %133 = extractelement <2 x float> %107, i64 1, !dbg !23
  %134 = fadd float %133, %132, !dbg !23
  %135 = select i1 %9, float %134, float 0.000000e+00, !dbg !23
  %136 = bitcast float %121 to i32, !dbg !28
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = fadd float %121, %138, !dbg !23
  %140 = bitcast float %139 to i32, !dbg !28
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = fadd float %139, %142, !dbg !23
  %144 = bitcast float %143 to i32, !dbg !28
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = fadd float %143, %146, !dbg !23
  %148 = bitcast float %147 to i32, !dbg !28
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = fadd float %147, %150, !dbg !23
  %152 = bitcast float %151 to i32, !dbg !28
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !28
  %154 = bitcast i32 %153 to float, !dbg !28
  %155 = fadd float %151, %154, !dbg !23
  %156 = bitcast float %135 to i32, !dbg !28
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !28
  %158 = bitcast i32 %157 to float, !dbg !28
  %159 = fadd float %135, %158, !dbg !23
  %160 = bitcast float %159 to i32, !dbg !28
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !28
  %162 = bitcast i32 %161 to float, !dbg !28
  %163 = fadd float %159, %162, !dbg !23
  %164 = bitcast float %163 to i32, !dbg !28
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !28
  %166 = bitcast i32 %165 to float, !dbg !28
  %167 = fadd float %163, %166, !dbg !23
  %168 = bitcast float %167 to i32, !dbg !28
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !28
  %170 = bitcast i32 %169 to float, !dbg !28
  %171 = fadd float %167, %170, !dbg !23
  %172 = bitcast float %171 to i32, !dbg !28
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !28
  %174 = bitcast i32 %173 to float, !dbg !28
  %175 = fadd float %171, %174, !dbg !23
  %176 = and i32 %12, 15, !dbg !28
  %177 = icmp eq i32 %11, 0, !dbg !28
  %178 = zext nneg i32 %176 to i64, !dbg !28
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i64 %178, !dbg !28
  %180 = bitcast float %155 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 %177) #5, !dbg !28
  %181 = or disjoint i32 %176, 16, !dbg !28
  %182 = zext nneg i32 %181 to i64, !dbg !28
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182, !dbg !28
  %184 = bitcast float %175 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 %177) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %185 = icmp slt i32 %10, 32, !dbg !28
  %186 = sext i32 %10 to i64, !dbg !28
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !28
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %185) #5, !dbg !28
  %189 = bitcast i32 %188 to float, !dbg !28
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !28
  %191 = bitcast i32 %190 to float, !dbg !28
  %192 = fadd float %189, %191, !dbg !23
  %193 = bitcast float %192 to i32, !dbg !28
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !28
  %195 = bitcast i32 %194 to float, !dbg !28
  %196 = fadd float %192, %195, !dbg !23
  %197 = bitcast float %196 to i32, !dbg !28
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !28
  %199 = bitcast i32 %198 to float, !dbg !28
  %200 = fadd float %196, %199, !dbg !23
  %201 = bitcast float %200 to i32, !dbg !28
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !28
  %203 = bitcast i32 %202 to float, !dbg !28
  %204 = fadd float %200, %203, !dbg !23
  %205 = and i32 %10, 15, !dbg !28
  %206 = icmp eq i32 %205, 0, !dbg !28
  %207 = and i1 %185, %206, !dbg !28
  %208 = bitcast float %204 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %208, i1 %207) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %209 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %210 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !28
  %211 = zext nneg i32 %14 to i64, !dbg !29
  %212 = getelementptr bfloat, ptr addrspace(1) %2, i64 %211, !dbg !29
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %212, i1 true) #5, !dbg !30
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i1 %9) #5, !dbg !31
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %9) #5, !dbg !31
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %9) #5, !dbg !32
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %9) #5, !dbg !32
  %218 = tail call float @llvm.nvvm.div.full(float %209, float 4.096000e+03), !dbg !33
  %219 = tail call float @llvm.nvvm.div.full(float %210, float 4.096000e+03), !dbg !33
  %220 = fadd float %218, 0x3EB0C6F7A0000000, !dbg !34
  %221 = fadd float %219, 0x3EB0C6F7A0000000, !dbg !34
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i19 = icmp eq i32 %229, 0, !dbg !35
  br i1 %.not.i19, label %232, label %230, !dbg !35

230:                                              ; preds = %__nv_rsqrtf.exit
  %231 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %220), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

232:                                              ; preds = %__nv_rsqrtf.exit
  %233 = tail call float @llvm.nvvm.rsqrt.approx.f(float %220), !dbg !35
  br label %__nv_rsqrtf.exit21, !dbg !35

__nv_rsqrtf.exit21:                               ; preds = %230, %232
  %.0.i20 = phi float [ %231, %230 ], [ %233, %232 ], !dbg !35
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i43 = icmp eq i32 %241, 0, !dbg !35
  br i1 %.not.i43, label %244, label %242, !dbg !35

242:                                              ; preds = %__nv_rsqrtf.exit21
  %243 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !35
  br label %__nv_rsqrtf.exit45, !dbg !35

244:                                              ; preds = %__nv_rsqrtf.exit21
  %245 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !35
  br label %__nv_rsqrtf.exit45, !dbg !35

__nv_rsqrtf.exit45:                               ; preds = %242, %244
  %.0.i44 = phi float [ %243, %242 ], [ %245, %244 ], !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !31
  %247 = bitcast i32 %246 to <2 x bfloat>, !dbg !31
  %248 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !32
  %249 = bitcast i32 %248 to <2 x bfloat>, !dbg !32
  %250 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !31
  %251 = bitcast i32 %250 to <2 x bfloat>, !dbg !31
  %252 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !32
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !31
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !31
  %256 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !32
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !32
  %258 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !31
  %259 = bitcast i32 %258 to <2 x bfloat>, !dbg !31
  %260 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !32
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !32
  %262 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !31
  %263 = bitcast i32 %262 to <2 x bfloat>, !dbg !31
  %264 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !32
  %265 = bitcast i32 %264 to <2 x bfloat>, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !31
  %267 = bitcast i32 %266 to <2 x bfloat>, !dbg !31
  %268 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !32
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !32
  %270 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !31
  %271 = bitcast i32 %270 to <2 x bfloat>, !dbg !31
  %272 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !32
  %273 = bitcast i32 %272 to <2 x bfloat>, !dbg !32
  %274 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !31
  %275 = bitcast i32 %274 to <2 x bfloat>, !dbg !31
  %276 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !32
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !32
  %278 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !30
  %279 = bitcast i32 %278 to <2 x bfloat>, !dbg !30
  %280 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !30
  %281 = bitcast i32 %280 to <2 x bfloat>, !dbg !30
  %282 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !30
  %283 = bitcast i32 %282 to <2 x bfloat>, !dbg !30
  %284 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !30
  %285 = bitcast i32 %284 to <2 x bfloat>, !dbg !30
  %286 = getelementptr bfloat, ptr addrspace(1) %3, i64 %18, !dbg !36
  %287 = getelementptr bfloat, ptr addrspace(1) %3, i64 %20, !dbg !36
  %288 = fpext <2 x bfloat> %275 to <2 x float>, !dbg !37
  %289 = fpext <2 x bfloat> %277 to <2 x float>, !dbg !38
  %290 = fadd <2 x float> %288, %289, !dbg !39
  %291 = fpext <2 x bfloat> %285 to <2 x float>, !dbg !40
  %292 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !41
  %293 = shufflevector <2 x float> %292, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %294 = fmul <2 x float> %290, %293, !dbg !41
  %295 = fmul <2 x float> %294, %291, !dbg !42
  %296 = fptrunc <2 x float> %295 to <2 x bfloat>, !dbg !43
  %297 = fpext <2 x bfloat> %271 to <2 x float>, !dbg !37
  %298 = fpext <2 x bfloat> %273 to <2 x float>, !dbg !38
  %299 = fadd <2 x float> %297, %298, !dbg !39
  %300 = fpext <2 x bfloat> %283 to <2 x float>, !dbg !40
  %301 = fmul <2 x float> %299, %293, !dbg !41
  %302 = fmul <2 x float> %301, %300, !dbg !42
  %303 = fptrunc <2 x float> %302 to <2 x bfloat>, !dbg !43
  %304 = fpext <2 x bfloat> %267 to <2 x float>, !dbg !37
  %305 = fpext <2 x bfloat> %269 to <2 x float>, !dbg !38
  %306 = fadd <2 x float> %304, %305, !dbg !39
  %307 = fpext <2 x bfloat> %281 to <2 x float>, !dbg !40
  %308 = fmul <2 x float> %306, %293, !dbg !41
  %309 = fmul <2 x float> %308, %307, !dbg !42
  %310 = fptrunc <2 x float> %309 to <2 x bfloat>, !dbg !43
  %311 = fpext <2 x bfloat> %263 to <2 x float>, !dbg !37
  %312 = fpext <2 x bfloat> %265 to <2 x float>, !dbg !38
  %313 = fadd <2 x float> %311, %312, !dbg !39
  %314 = fpext <2 x bfloat> %279 to <2 x float>, !dbg !40
  %315 = fmul <2 x float> %313, %293, !dbg !41
  %316 = fmul <2 x float> %315, %314, !dbg !42
  %317 = fptrunc <2 x float> %316 to <2 x bfloat>, !dbg !43
  %318 = fpext <2 x bfloat> %259 to <2 x float>, !dbg !37
  %319 = fpext <2 x bfloat> %261 to <2 x float>, !dbg !38
  %320 = fadd <2 x float> %318, %319, !dbg !39
  %321 = insertelement <2 x float> poison, float %.0.i44, i64 0, !dbg !41
  %322 = shufflevector <2 x float> %321, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %323 = fmul <2 x float> %320, %322, !dbg !41
  %324 = fmul <2 x float> %323, %291, !dbg !42
  %325 = fptrunc <2 x float> %324 to <2 x bfloat>, !dbg !43
  %326 = fpext <2 x bfloat> %255 to <2 x float>, !dbg !37
  %327 = fpext <2 x bfloat> %257 to <2 x float>, !dbg !38
  %328 = fadd <2 x float> %326, %327, !dbg !39
  %329 = fmul <2 x float> %328, %322, !dbg !41
  %330 = fmul <2 x float> %329, %300, !dbg !42
  %331 = fptrunc <2 x float> %330 to <2 x bfloat>, !dbg !43
  %332 = fpext <2 x bfloat> %251 to <2 x float>, !dbg !37
  %333 = fpext <2 x bfloat> %253 to <2 x float>, !dbg !38
  %334 = fadd <2 x float> %332, %333, !dbg !39
  %335 = fmul <2 x float> %334, %322, !dbg !41
  %336 = fmul <2 x float> %335, %307, !dbg !42
  %337 = fptrunc <2 x float> %336 to <2 x bfloat>, !dbg !43
  %338 = fpext <2 x bfloat> %247 to <2 x float>, !dbg !37
  %339 = fpext <2 x bfloat> %249 to <2 x float>, !dbg !38
  %340 = fadd <2 x float> %338, %339, !dbg !39
  %341 = fmul <2 x float> %340, %322, !dbg !41
  %342 = fmul <2 x float> %341, %314, !dbg !42
  %343 = fptrunc <2 x float> %342 to <2 x bfloat>, !dbg !43
  %344 = bitcast <2 x bfloat> %296 to i32, !dbg !43
  %345 = bitcast <2 x bfloat> %303 to i32, !dbg !43
  %346 = bitcast <2 x bfloat> %310 to i32, !dbg !43
  %347 = bitcast <2 x bfloat> %317 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %286, i1 %9) #5, !dbg !43
  %348 = bitcast <2 x bfloat> %325 to i32, !dbg !43
  %349 = bitcast <2 x bfloat> %331 to i32, !dbg !43
  %350 = bitcast <2 x bfloat> %337 to i32, !dbg !43
  %351 = bitcast <2 x bfloat> %343 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %349, i32 %350, i32 %351, ptr addrspace(1) %287, i1 %9) #5, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuqqoruredhxyjt7i3sc6go6wuy5c4eu2zhozoysdpb6ykfmzhht.py", directory: "/tmp/torchinductor_root/uq")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 21, scope: !6)
!12 = !DILocation(line: 26, column: 37, scope: !6)
!13 = !DILocation(line: 36, column: 46, scope: !6)
!14 = !DILocation(line: 36, column: 41, scope: !6)
!15 = !DILocation(line: 36, column: 34, scope: !6)
!16 = !DILocation(line: 36, column: 51, scope: !6)
!17 = !DILocation(line: 36, column: 112, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 37, column: 112, scope: !6)
!21 = !DILocation(line: 38, column: 22, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!27 = !DILocation(line: 44, column: 25, scope: !6)
!28 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 51, column: 34, scope: !6)
!30 = !DILocation(line: 51, column: 41, scope: !6)
!31 = !DILocation(line: 52, column: 51, scope: !6)
!32 = !DILocation(line: 53, column: 52, scope: !6)
!33 = !DILocation(line: 57, column: 24, scope: !6)
!34 = !DILocation(line: 59, column: 24, scope: !6)
!35 = !DILocation(line: 60, column: 32, scope: !6)
!36 = !DILocation(line: 64, column: 29, scope: !6)
!37 = !DILocation(line: 52, column: 113, scope: !6)
!38 = !DILocation(line: 53, column: 114, scope: !6)
!39 = !DILocation(line: 54, column: 23, scope: !6)
!40 = !DILocation(line: 51, column: 94, scope: !6)
!41 = !DILocation(line: 61, column: 24, scope: !6)
!42 = !DILocation(line: 63, column: 23, scope: !6)
!43 = !DILocation(line: 64, column: 53, scope: !6)
!44 = !DILocation(line: 45, column: 4, scope: !6)
