; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = lshr i32 %18, 5, !dbg !11
  %21 = shl i32 %18, 3, !dbg !11
  %22 = and i32 %21, 4088, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = icmp samesign ult i32 %22, 3072, !dbg !12
  %25 = mul i32 %16, 3072, !dbg !13
  %26 = add i32 %22, %25, !dbg !14
  %27 = sext i32 %26 to i64, !dbg !15
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !15
  %29 = and i1 %17, %24, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %29) #5, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !17
  %39 = extractelement <2 x bfloat> %32, i64 0, !dbg !17
  %40 = extractelement <2 x bfloat> %32, i64 1, !dbg !17
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !17
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !17
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !17
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !17
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !17
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !17
  %47 = fpext bfloat %39 to float, !dbg !18
  %48 = fpext bfloat %40 to float, !dbg !18
  %49 = fpext bfloat %41 to float, !dbg !18
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = fpext bfloat %46 to float, !dbg !18
  %55 = select i1 %29, float %47, float 0.000000e+00, !dbg !19
  %56 = select i1 %29, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %29, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %29, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %29, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %29, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %29, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %29, float %54, float 0.000000e+00, !dbg !19
  %63 = select i1 %29, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %64 = fsub float %56, %55, !dbg !21
  %65 = select i1 %29, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %66 = fcmp oeq float %65, 0.000000e+00, !dbg !27
  %67 = tail call float @llvm.nvvm.div.full(float %63, float %65), !dbg !28
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !29
  %69 = fmul float %68, %64, !dbg !30
  %70 = fadd float %55, %69, !dbg !31
  %71 = fmul float %64, %64, !dbg !32
  %72 = fmul float %63, %71, !dbg !33
  %73 = fmul float %68, %72, !dbg !34
  %74 = fadd float %73, 0.000000e+00, !dbg !35
  %75 = fsub float %57, %70, !dbg !21
  %76 = select i1 %29, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %77 = fcmp oeq float %76, 0.000000e+00, !dbg !27
  %78 = tail call float @llvm.nvvm.div.full(float %63, float %76), !dbg !28
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !29
  %80 = fmul float %79, %75, !dbg !30
  %81 = fadd float %70, %80, !dbg !31
  %82 = fmul float %75, %75, !dbg !32
  %83 = fmul float %65, %82, !dbg !33
  %84 = fmul float %79, %83, !dbg !34
  %85 = fadd float %74, %84, !dbg !35
  %86 = fsub float %58, %81, !dbg !21
  %87 = select i1 %29, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %88 = fcmp oeq float %87, 0.000000e+00, !dbg !27
  %89 = tail call float @llvm.nvvm.div.full(float %63, float %87), !dbg !28
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !29
  %91 = fmul float %90, %86, !dbg !30
  %92 = fadd float %81, %91, !dbg !31
  %93 = fmul float %86, %86, !dbg !32
  %94 = fmul float %76, %93, !dbg !33
  %95 = fmul float %90, %94, !dbg !34
  %96 = fadd float %85, %95, !dbg !35
  %97 = fsub float %59, %92, !dbg !21
  %98 = select i1 %29, float 5.000000e+00, float 0.000000e+00, !dbg !26
  %99 = fcmp oeq float %98, 0.000000e+00, !dbg !27
  %100 = tail call float @llvm.nvvm.div.full(float %63, float %98), !dbg !28
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !29
  %102 = fmul float %101, %97, !dbg !30
  %103 = fadd float %92, %102, !dbg !31
  %104 = fmul float %97, %97, !dbg !32
  %105 = fmul float %87, %104, !dbg !33
  %106 = fmul float %101, %105, !dbg !34
  %107 = fadd float %96, %106, !dbg !35
  %108 = fsub float %60, %103, !dbg !21
  %109 = select i1 %29, float 6.000000e+00, float 0.000000e+00, !dbg !26
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !27
  %111 = tail call float @llvm.nvvm.div.full(float %63, float %109), !dbg !28
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !29
  %113 = fmul float %112, %108, !dbg !30
  %114 = fadd float %103, %113, !dbg !31
  %115 = fmul float %108, %108, !dbg !32
  %116 = fmul float %98, %115, !dbg !33
  %117 = fmul float %112, %116, !dbg !34
  %118 = fadd float %107, %117, !dbg !35
  %119 = fsub float %61, %114, !dbg !21
  %120 = select i1 %29, float 7.000000e+00, float 0.000000e+00, !dbg !26
  %121 = fcmp oeq float %120, 0.000000e+00, !dbg !27
  %122 = tail call float @llvm.nvvm.div.full(float %63, float %120), !dbg !28
  %123 = select i1 %121, float 0.000000e+00, float %122, !dbg !29
  %124 = fmul float %123, %119, !dbg !30
  %125 = fadd float %114, %124, !dbg !31
  %126 = fmul float %119, %119, !dbg !32
  %127 = fmul float %109, %126, !dbg !33
  %128 = fmul float %123, %127, !dbg !34
  %129 = fadd float %118, %128, !dbg !35
  %130 = fsub float %62, %125, !dbg !21
  %131 = select i1 %29, float 8.000000e+00, float 0.000000e+00, !dbg !26
  %132 = fcmp oeq float %131, 0.000000e+00, !dbg !27
  %133 = tail call float @llvm.nvvm.div.full(float %63, float %131), !dbg !28
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !29
  %135 = fmul float %134, %130, !dbg !30
  %136 = fadd float %125, %135, !dbg !31
  %137 = fmul float %130, %130, !dbg !32
  %138 = fmul float %120, %137, !dbg !33
  %139 = fmul float %134, %138, !dbg !34
  %140 = fadd float %129, %139, !dbg !35
  %141 = bitcast float %136 to i32, !dbg !36
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !36
  %143 = bitcast i32 %142 to float, !dbg !36
  %144 = bitcast float %140 to i32, !dbg !36
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = bitcast float %131 to i32, !dbg !36
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = fsub float %143, %136, !dbg !21
  %151 = fadd float %131, %149, !dbg !26
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !27
  %153 = tail call float @llvm.nvvm.div.full(float %149, float %151), !dbg !28
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !29
  %155 = fmul float %154, %150, !dbg !30
  %156 = fadd float %136, %155, !dbg !31
  %157 = fadd float %140, %146, !dbg !37
  %158 = fmul float %150, %150, !dbg !32
  %159 = fmul float %131, %158, !dbg !33
  %160 = fmul float %154, %159, !dbg !34
  %161 = fadd float %157, %160, !dbg !35
  %162 = bitcast float %156 to i32, !dbg !36
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !36
  %164 = bitcast i32 %163 to float, !dbg !36
  %165 = bitcast float %161 to i32, !dbg !36
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !36
  %167 = bitcast i32 %166 to float, !dbg !36
  %168 = bitcast float %151 to i32, !dbg !36
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !36
  %170 = bitcast i32 %169 to float, !dbg !36
  %171 = fsub float %164, %156, !dbg !21
  %172 = fadd float %151, %170, !dbg !26
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !27
  %174 = tail call float @llvm.nvvm.div.full(float %170, float %172), !dbg !28
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !29
  %176 = fmul float %175, %171, !dbg !30
  %177 = fadd float %156, %176, !dbg !31
  %178 = fadd float %161, %167, !dbg !37
  %179 = fmul float %171, %171, !dbg !32
  %180 = fmul float %151, %179, !dbg !33
  %181 = fmul float %175, %180, !dbg !34
  %182 = fadd float %178, %181, !dbg !35
  %183 = bitcast float %177 to i32, !dbg !36
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !36
  %185 = bitcast i32 %184 to float, !dbg !36
  %186 = bitcast float %182 to i32, !dbg !36
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !36
  %188 = bitcast i32 %187 to float, !dbg !36
  %189 = bitcast float %172 to i32, !dbg !36
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !36
  %191 = bitcast i32 %190 to float, !dbg !36
  %192 = fsub float %185, %177, !dbg !21
  %193 = fadd float %172, %191, !dbg !26
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !27
  %195 = tail call float @llvm.nvvm.div.full(float %191, float %193), !dbg !28
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !29
  %197 = fmul float %196, %192, !dbg !30
  %198 = fadd float %177, %197, !dbg !31
  %199 = fadd float %182, %188, !dbg !37
  %200 = fmul float %192, %192, !dbg !32
  %201 = fmul float %172, %200, !dbg !33
  %202 = fmul float %196, %201, !dbg !34
  %203 = fadd float %199, %202, !dbg !35
  %204 = bitcast float %198 to i32, !dbg !36
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !36
  %206 = bitcast i32 %205 to float, !dbg !36
  %207 = bitcast float %203 to i32, !dbg !36
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !36
  %209 = bitcast i32 %208 to float, !dbg !36
  %210 = bitcast float %193 to i32, !dbg !36
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !36
  %212 = bitcast i32 %211 to float, !dbg !36
  %213 = fsub float %206, %198, !dbg !21
  %214 = fadd float %193, %212, !dbg !26
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !27
  %216 = tail call float @llvm.nvvm.div.full(float %212, float %214), !dbg !28
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !29
  %218 = fmul float %217, %213, !dbg !30
  %219 = fadd float %198, %218, !dbg !31
  %220 = fadd float %203, %209, !dbg !37
  %221 = fmul float %213, %213, !dbg !32
  %222 = fmul float %193, %221, !dbg !33
  %223 = fmul float %217, %222, !dbg !34
  %224 = fadd float %220, %223, !dbg !35
  %225 = bitcast float %219 to i32, !dbg !36
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !36
  %227 = bitcast i32 %226 to float, !dbg !36
  %228 = bitcast float %224 to i32, !dbg !36
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !36
  %230 = bitcast i32 %229 to float, !dbg !36
  %231 = bitcast float %214 to i32, !dbg !36
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !36
  %233 = bitcast i32 %232 to float, !dbg !36
  %234 = fsub float %227, %219, !dbg !21
  %235 = fadd float %214, %233, !dbg !26
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !27
  %237 = tail call float @llvm.nvvm.div.full(float %233, float %235), !dbg !28
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !29
  %239 = fmul float %238, %234, !dbg !30
  %240 = fadd float %219, %239, !dbg !31
  %241 = fadd float %224, %230, !dbg !37
  %242 = fmul float %234, %234, !dbg !32
  %243 = fmul float %214, %242, !dbg !33
  %244 = fmul float %238, %243, !dbg !34
  %245 = fadd float %241, %244, !dbg !35
  %246 = and i32 %20, 15, !dbg !36
  %247 = icmp eq i32 %19, 0, !dbg !36
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !36
  %249 = bitcast float %240 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 %247) #5, !dbg !36
  %250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %246, !dbg !36
  %251 = bitcast float %245 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 %247) #5, !dbg !36
  %252 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %246, !dbg !36
  %253 = bitcast float %235 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 %247) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %254 = icmp slt i32 %18, 16, !dbg !36
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !36
  %256 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !36
  %257 = bitcast i32 %256 to float, !dbg !36
  %258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !36
  %259 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %254) #5, !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !36
  %262 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %261, i1 %254) #5, !dbg !36
  %263 = bitcast i32 %262 to float, !dbg !36
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !36
  %265 = bitcast i32 %264 to float, !dbg !36
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !36
  %267 = bitcast i32 %266 to float, !dbg !36
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !36
  %269 = bitcast i32 %268 to float, !dbg !36
  %270 = fsub float %265, %257, !dbg !21
  %271 = fadd float %263, %269, !dbg !26
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !27
  %273 = tail call float @llvm.nvvm.div.full(float %269, float %271), !dbg !28
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !29
  %275 = fmul float %270, %274, !dbg !30
  %276 = fadd float %275, %257, !dbg !31
  %277 = fadd float %260, %267, !dbg !37
  %278 = fmul float %270, %270, !dbg !32
  %279 = fmul float %278, %263, !dbg !33
  %280 = fmul float %279, %274, !dbg !34
  %281 = fadd float %277, %280, !dbg !35
  %282 = bitcast float %276 to i32, !dbg !36
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !36
  %284 = bitcast i32 %283 to float, !dbg !36
  %285 = bitcast float %281 to i32, !dbg !36
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !36
  %287 = bitcast i32 %286 to float, !dbg !36
  %288 = bitcast float %271 to i32, !dbg !36
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !36
  %290 = bitcast i32 %289 to float, !dbg !36
  %291 = fsub float %284, %276, !dbg !21
  %292 = fadd float %271, %290, !dbg !26
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !27
  %294 = tail call float @llvm.nvvm.div.full(float %290, float %292), !dbg !28
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !29
  %296 = fmul float %291, %295, !dbg !30
  %297 = fadd float %276, %296, !dbg !31
  %298 = fadd float %281, %287, !dbg !37
  %299 = fmul float %291, %291, !dbg !32
  %300 = fmul float %271, %299, !dbg !33
  %301 = fmul float %295, %300, !dbg !34
  %302 = fadd float %298, %301, !dbg !35
  %303 = bitcast float %297 to i32, !dbg !36
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !36
  %305 = bitcast i32 %304 to float, !dbg !36
  %306 = bitcast float %302 to i32, !dbg !36
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !36
  %308 = bitcast i32 %307 to float, !dbg !36
  %309 = bitcast float %292 to i32, !dbg !36
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !36
  %311 = bitcast i32 %310 to float, !dbg !36
  %312 = fsub float %305, %297, !dbg !21
  %313 = fadd float %292, %311, !dbg !26
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !27
  %315 = tail call float @llvm.nvvm.div.full(float %311, float %313), !dbg !28
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !29
  %317 = fmul float %312, %316, !dbg !30
  %318 = fadd float %297, %317, !dbg !31
  %319 = fadd float %302, %308, !dbg !37
  %320 = fmul float %312, %312, !dbg !32
  %321 = fmul float %292, %320, !dbg !33
  %322 = fmul float %316, %321, !dbg !34
  %323 = fadd float %319, %322, !dbg !35
  %324 = bitcast float %318 to i32, !dbg !36
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !36
  %326 = bitcast i32 %325 to float, !dbg !36
  %327 = bitcast float %323 to i32, !dbg !36
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !36
  %329 = bitcast i32 %328 to float, !dbg !36
  %330 = bitcast float %313 to i32, !dbg !36
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !36
  %332 = bitcast i32 %331 to float, !dbg !36
  %333 = fsub float %326, %318, !dbg !21
  %334 = fadd float %313, %332, !dbg !26
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !27
  %336 = tail call float @llvm.nvvm.div.full(float %332, float %334), !dbg !28
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !29
  %338 = fmul float %333, %337, !dbg !30
  %339 = fadd float %318, %338, !dbg !31
  %340 = fadd float %323, %329, !dbg !37
  %341 = fmul float %333, %333, !dbg !32
  %342 = fmul float %313, %341, !dbg !33
  %343 = fmul float %337, %342, !dbg !34
  %344 = fadd float %340, %343, !dbg !35
  %345 = and i32 %18, 15, !dbg !36
  %346 = icmp eq i32 %345, 0, !dbg !36
  %347 = and i1 %254, %346, !dbg !36
  %348 = bitcast float %339 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %348, i1 %347) #5, !dbg !36
  %349 = bitcast float %344 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %349, i1 %347) #5, !dbg !36
  %350 = bitcast float %334 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %350, i1 %347) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %351 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %352 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !36
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %29) #5, !dbg !38
  %354 = add nuw nsw i32 %22, 3072, !dbg !39
  %355 = zext nneg i32 %354 to i64, !dbg !40
  %356 = getelementptr float, ptr addrspace(1) %1, i64 %355, !dbg !40
  %357 = zext nneg i32 %23 to i64, !dbg !40
  %358 = getelementptr float, ptr addrspace(1) %1, i64 %357, !dbg !40
  %359 = getelementptr i8, ptr addrspace(1) %358, i64 12288, !dbg !40
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %356, i1 %24) #5, !dbg !41
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %359, i1 %24) #5, !dbg !41
  %362 = getelementptr bfloat, ptr addrspace(1) %2, i64 %355, !dbg !42
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %362, i1 %24) #5, !dbg !43
  %364 = zext nneg i32 %22 to i64, !dbg !44
  %365 = getelementptr float, ptr addrspace(1) %1, i64 %364, !dbg !44
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %365, i1 %24) #5, !dbg !45
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %358, i1 %24) #5, !dbg !45
  %368 = getelementptr bfloat, ptr addrspace(1) %2, i64 %364, !dbg !46
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %368, i1 %24) #5, !dbg !47
  %370 = tail call float @llvm.nvvm.div.full(float %352, float 3.072000e+03), !dbg !48
  %371 = fadd float %370, 0x3EB0C6F7A0000000, !dbg !49
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i20 = icmp eq i32 %379, 0, !dbg !50
  br i1 %.not.i20, label %382, label %380, !dbg !50

380:                                              ; preds = %__nv_rsqrtf.exit
  %381 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %371), !dbg !50
  br label %__nv_rsqrtf.exit22, !dbg !50

382:                                              ; preds = %__nv_rsqrtf.exit
  %383 = tail call float @llvm.nvvm.rsqrt.approx.f(float %371), !dbg !50
  br label %__nv_rsqrtf.exit22, !dbg !50

__nv_rsqrtf.exit22:                               ; preds = %380, %382
  %.0.i21 = phi float [ %381, %380 ], [ %383, %382 ], !dbg !50
  %384 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !38
  %385 = bitcast i32 %384 to <2 x bfloat>, !dbg !38
  %386 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !38
  %387 = bitcast i32 %386 to <2 x bfloat>, !dbg !38
  %388 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !38
  %389 = bitcast i32 %388 to <2 x bfloat>, !dbg !38
  %390 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !38
  %391 = bitcast i32 %390 to <2 x bfloat>, !dbg !38
  %392 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !47
  %393 = bitcast i32 %392 to <2 x bfloat>, !dbg !47
  %394 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !47
  %395 = bitcast i32 %394 to <2 x bfloat>, !dbg !47
  %396 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !47
  %397 = bitcast i32 %396 to <2 x bfloat>, !dbg !47
  %398 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !47
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !47
  %400 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !45
  %401 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !45
  %402 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !45
  %403 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !45
  %404 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !45
  %405 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !45
  %406 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !45
  %407 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !45
  %408 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !43
  %409 = bitcast i32 %408 to <2 x bfloat>, !dbg !43
  %410 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !43
  %411 = bitcast i32 %410 to <2 x bfloat>, !dbg !43
  %412 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !43
  %413 = bitcast i32 %412 to <2 x bfloat>, !dbg !43
  %414 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !43
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !43
  %416 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !41
  %417 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !41
  %418 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !41
  %419 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !41
  %420 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !41
  %421 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !41
  %422 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !41
  %423 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !41
  %424 = getelementptr bfloat, ptr addrspace(1) %3, i64 %27, !dbg !51
  %425 = fpext <2 x bfloat> %391 to <2 x float>, !dbg !52
  %426 = insertelement <2 x float> poison, float %351, i64 0, !dbg !53
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %428 = fsub <2 x float> %425, %427, !dbg !53
  %429 = fpext <2 x bfloat> %399 to <2 x float>, !dbg !54
  %430 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !45
  %431 = insertelement <2 x i32> %430, i32 %406, i64 1, !dbg !45
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !45
  %433 = fpext <2 x bfloat> %415 to <2 x float>, !dbg !55
  %434 = insertelement <2 x i32> poison, i32 %423, i64 0, !dbg !41
  %435 = insertelement <2 x i32> %434, i32 %422, i64 1, !dbg !41
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !41
  %437 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !56
  %438 = shufflevector <2 x float> %437, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %439 = fmul <2 x float> %428, %438, !dbg !56
  %440 = fadd <2 x float> %436, %433, !dbg !57
  %441 = fadd <2 x float> %440, splat (float 1.000000e+00), !dbg !58
  %442 = fmul <2 x float> %441, %439, !dbg !59
  %443 = fadd <2 x float> %432, %429, !dbg !60
  %444 = fadd <2 x float> %443, %442, !dbg !61
  %445 = extractelement <2 x float> %444, i64 0, !dbg !62
  %446 = select i1 %29, float %445, float 0x7FF0000000000000, !dbg !63
  %447 = extractelement <2 x float> %444, i64 1, !dbg !62
  %448 = select i1 %29, float %447, float 0x7FF0000000000000, !dbg !63
  %449 = select i1 %29, float %445, float 0xFFF0000000000000, !dbg !62
  %450 = select i1 %29, float %447, float 0xFFF0000000000000, !dbg !62
  %451 = fptrunc <2 x float> %444 to <2 x bfloat>, !dbg !64
  %452 = fpext <2 x bfloat> %389 to <2 x float>, !dbg !52
  %453 = fsub <2 x float> %452, %427, !dbg !53
  %454 = fpext <2 x bfloat> %397 to <2 x float>, !dbg !54
  %455 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !45
  %456 = insertelement <2 x i32> %455, i32 %404, i64 1, !dbg !45
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !45
  %458 = fpext <2 x bfloat> %413 to <2 x float>, !dbg !55
  %459 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !41
  %460 = insertelement <2 x i32> %459, i32 %420, i64 1, !dbg !41
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !41
  %462 = fmul <2 x float> %453, %438, !dbg !56
  %463 = fadd <2 x float> %461, %458, !dbg !57
  %464 = fadd <2 x float> %463, splat (float 1.000000e+00), !dbg !58
  %465 = fmul <2 x float> %464, %462, !dbg !59
  %466 = fadd <2 x float> %457, %454, !dbg !60
  %467 = fadd <2 x float> %466, %465, !dbg !61
  %468 = extractelement <2 x float> %467, i64 0, !dbg !62
  %469 = select i1 %29, float %468, float 0x7FF0000000000000, !dbg !63
  %470 = extractelement <2 x float> %467, i64 1, !dbg !62
  %471 = select i1 %29, float %470, float 0x7FF0000000000000, !dbg !63
  %472 = select i1 %29, float %468, float 0xFFF0000000000000, !dbg !62
  %473 = select i1 %29, float %470, float 0xFFF0000000000000, !dbg !62
  %474 = fptrunc <2 x float> %467 to <2 x bfloat>, !dbg !64
  %475 = fpext <2 x bfloat> %387 to <2 x float>, !dbg !52
  %476 = fsub <2 x float> %475, %427, !dbg !53
  %477 = fpext <2 x bfloat> %395 to <2 x float>, !dbg !54
  %478 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !45
  %479 = insertelement <2 x i32> %478, i32 %402, i64 1, !dbg !45
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !45
  %481 = fpext <2 x bfloat> %411 to <2 x float>, !dbg !55
  %482 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !41
  %483 = insertelement <2 x i32> %482, i32 %418, i64 1, !dbg !41
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !41
  %485 = fmul <2 x float> %476, %438, !dbg !56
  %486 = fadd <2 x float> %484, %481, !dbg !57
  %487 = fadd <2 x float> %486, splat (float 1.000000e+00), !dbg !58
  %488 = fmul <2 x float> %487, %485, !dbg !59
  %489 = fadd <2 x float> %480, %477, !dbg !60
  %490 = fadd <2 x float> %489, %488, !dbg !61
  %491 = extractelement <2 x float> %490, i64 0, !dbg !62
  %492 = select i1 %29, float %491, float 0x7FF0000000000000, !dbg !63
  %493 = extractelement <2 x float> %490, i64 1, !dbg !62
  %494 = select i1 %29, float %493, float 0x7FF0000000000000, !dbg !63
  %495 = select i1 %29, float %491, float 0xFFF0000000000000, !dbg !62
  %496 = select i1 %29, float %493, float 0xFFF0000000000000, !dbg !62
  %497 = fptrunc <2 x float> %490 to <2 x bfloat>, !dbg !64
  %498 = fpext <2 x bfloat> %385 to <2 x float>, !dbg !52
  %499 = fsub <2 x float> %498, %427, !dbg !53
  %500 = fpext <2 x bfloat> %393 to <2 x float>, !dbg !54
  %501 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !45
  %502 = insertelement <2 x i32> %501, i32 %400, i64 1, !dbg !45
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !45
  %504 = fpext <2 x bfloat> %409 to <2 x float>, !dbg !55
  %505 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !41
  %506 = insertelement <2 x i32> %505, i32 %416, i64 1, !dbg !41
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !41
  %508 = fmul <2 x float> %499, %438, !dbg !56
  %509 = fadd <2 x float> %507, %504, !dbg !57
  %510 = fadd <2 x float> %509, splat (float 1.000000e+00), !dbg !58
  %511 = fmul <2 x float> %510, %508, !dbg !59
  %512 = fadd <2 x float> %503, %500, !dbg !60
  %513 = fadd <2 x float> %512, %511, !dbg !61
  %514 = extractelement <2 x float> %513, i64 0, !dbg !62
  %515 = select i1 %29, float %514, float 0x7FF0000000000000, !dbg !63
  %516 = extractelement <2 x float> %513, i64 1, !dbg !62
  %517 = select i1 %29, float %516, float 0x7FF0000000000000, !dbg !63
  %518 = select i1 %29, float %514, float 0xFFF0000000000000, !dbg !62
  %519 = select i1 %29, float %516, float 0xFFF0000000000000, !dbg !62
  %520 = fptrunc <2 x float> %513 to <2 x bfloat>, !dbg !64
  %521 = bitcast <2 x bfloat> %451 to i32, !dbg !64
  %522 = bitcast <2 x bfloat> %474 to i32, !dbg !64
  %523 = bitcast <2 x bfloat> %497 to i32, !dbg !64
  %524 = bitcast <2 x bfloat> %520 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %521, i32 %522, i32 %523, i32 %524, ptr addrspace(1) %424, i1 %29) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %525 = fcmp olt float %446, %448, !dbg !67
  %526 = fcmp uno float %446, 0.000000e+00, !dbg !68
  %527 = or i1 %525, %526, !dbg !69
  %528 = select i1 %527, float %446, float %448, !dbg !70
  %529 = fcmp olt float %528, %469, !dbg !67
  %530 = fcmp uno float %528, 0.000000e+00, !dbg !68
  %531 = or i1 %529, %530, !dbg !69
  %532 = select i1 %531, float %528, float %469, !dbg !70
  %533 = fcmp olt float %532, %471, !dbg !67
  %534 = fcmp uno float %532, 0.000000e+00, !dbg !68
  %535 = or i1 %533, %534, !dbg !69
  %536 = select i1 %535, float %532, float %471, !dbg !70
  %537 = fcmp olt float %536, %492, !dbg !67
  %538 = fcmp uno float %536, 0.000000e+00, !dbg !68
  %539 = or i1 %537, %538, !dbg !69
  %540 = select i1 %539, float %536, float %492, !dbg !70
  %541 = fcmp olt float %540, %494, !dbg !67
  %542 = fcmp uno float %540, 0.000000e+00, !dbg !68
  %543 = or i1 %541, %542, !dbg !69
  %544 = select i1 %543, float %540, float %494, !dbg !70
  %545 = fcmp olt float %544, %515, !dbg !67
  %546 = fcmp uno float %544, 0.000000e+00, !dbg !68
  %547 = or i1 %545, %546, !dbg !69
  %548 = select i1 %547, float %544, float %515, !dbg !70
  %549 = fcmp olt float %548, %517, !dbg !67
  %550 = fcmp uno float %548, 0.000000e+00, !dbg !68
  %551 = or i1 %549, %550, !dbg !69
  %552 = select i1 %551, float %548, float %517, !dbg !70
  %553 = bitcast float %552 to i32, !dbg !65
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 16, i32 31), !dbg !65
  %555 = bitcast i32 %554 to float, !dbg !65
  %556 = fcmp olt float %552, %555, !dbg !67
  %557 = fcmp uno float %552, 0.000000e+00, !dbg !68
  %558 = or i1 %556, %557, !dbg !69
  %559 = select i1 %558, float %552, float %555, !dbg !70
  %560 = bitcast float %559 to i32, !dbg !65
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 8, i32 31), !dbg !65
  %562 = bitcast i32 %561 to float, !dbg !65
  %563 = fcmp olt float %559, %562, !dbg !67
  %564 = fcmp uno float %559, 0.000000e+00, !dbg !68
  %565 = or i1 %563, %564, !dbg !69
  %566 = select i1 %565, float %559, float %562, !dbg !70
  %567 = bitcast float %566 to i32, !dbg !65
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !65
  %569 = bitcast i32 %568 to float, !dbg !65
  %570 = fcmp olt float %566, %569, !dbg !67
  %571 = fcmp uno float %566, 0.000000e+00, !dbg !68
  %572 = or i1 %570, %571, !dbg !69
  %573 = select i1 %572, float %566, float %569, !dbg !70
  %574 = bitcast float %573 to i32, !dbg !65
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 2, i32 31), !dbg !65
  %576 = bitcast i32 %575 to float, !dbg !65
  %577 = fcmp olt float %573, %576, !dbg !67
  %578 = fcmp uno float %573, 0.000000e+00, !dbg !68
  %579 = or i1 %577, %578, !dbg !69
  %580 = select i1 %579, float %573, float %576, !dbg !70
  %581 = bitcast float %580 to i32, !dbg !65
  %582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 1, i32 31), !dbg !65
  %583 = bitcast i32 %582 to float, !dbg !65
  %584 = fcmp olt float %580, %583, !dbg !67
  %585 = fcmp uno float %580, 0.000000e+00, !dbg !68
  %586 = or i1 %584, %585, !dbg !69
  %587 = select i1 %586, i32 %581, i32 %582, !dbg !70
  %588 = insertelement <1 x i32> poison, i32 %587, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %588, i1 %247) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %589 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !65
  %590 = bitcast i32 %589 to float, !dbg !65
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 8, i32 31), !dbg !65
  %592 = bitcast i32 %591 to float, !dbg !65
  %593 = fcmp olt float %590, %592, !dbg !67
  %594 = fcmp uno float %590, 0.000000e+00, !dbg !68
  %595 = or i1 %594, %593, !dbg !69
  %596 = select i1 %595, float %590, float %592, !dbg !70
  %597 = bitcast float %596 to i32, !dbg !65
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 4, i32 31), !dbg !65
  %599 = bitcast i32 %598 to float, !dbg !65
  %600 = fcmp olt float %596, %599, !dbg !67
  %601 = fcmp uno float %596, 0.000000e+00, !dbg !68
  %602 = or i1 %600, %601, !dbg !69
  %603 = select i1 %602, float %596, float %599, !dbg !70
  %604 = bitcast float %603 to i32, !dbg !65
  %605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 2, i32 31), !dbg !65
  %606 = bitcast i32 %605 to float, !dbg !65
  %607 = fcmp olt float %603, %606, !dbg !67
  %608 = fcmp uno float %603, 0.000000e+00, !dbg !68
  %609 = or i1 %607, %608, !dbg !69
  %610 = select i1 %609, float %603, float %606, !dbg !70
  %611 = bitcast float %610 to i32, !dbg !65
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 1, i32 31), !dbg !65
  %613 = bitcast i32 %612 to float, !dbg !65
  %614 = fcmp olt float %610, %613, !dbg !67
  %615 = fcmp uno float %610, 0.000000e+00, !dbg !68
  %616 = or i1 %614, %615, !dbg !69
  %617 = select i1 %616, i32 %611, i32 %612, !dbg !70
  %618 = insertelement <1 x i32> poison, i32 %617, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %618, i1 %347) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %619 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %620 = fcmp ogt float %449, %450, !dbg !73
  %621 = fcmp uno float %449, 0.000000e+00, !dbg !74
  %622 = or i1 %620, %621, !dbg !75
  %623 = select i1 %622, float %449, float %450, !dbg !76
  %624 = fcmp ogt float %623, %472, !dbg !73
  %625 = fcmp uno float %623, 0.000000e+00, !dbg !74
  %626 = or i1 %624, %625, !dbg !75
  %627 = select i1 %626, float %623, float %472, !dbg !76
  %628 = fcmp ogt float %627, %473, !dbg !73
  %629 = fcmp uno float %627, 0.000000e+00, !dbg !74
  %630 = or i1 %628, %629, !dbg !75
  %631 = select i1 %630, float %627, float %473, !dbg !76
  %632 = fcmp ogt float %631, %495, !dbg !73
  %633 = fcmp uno float %631, 0.000000e+00, !dbg !74
  %634 = or i1 %632, %633, !dbg !75
  %635 = select i1 %634, float %631, float %495, !dbg !76
  %636 = fcmp ogt float %635, %496, !dbg !73
  %637 = fcmp uno float %635, 0.000000e+00, !dbg !74
  %638 = or i1 %636, %637, !dbg !75
  %639 = select i1 %638, float %635, float %496, !dbg !76
  %640 = fcmp ogt float %639, %518, !dbg !73
  %641 = fcmp uno float %639, 0.000000e+00, !dbg !74
  %642 = or i1 %640, %641, !dbg !75
  %643 = select i1 %642, float %639, float %518, !dbg !76
  %644 = fcmp ogt float %643, %519, !dbg !73
  %645 = fcmp uno float %643, 0.000000e+00, !dbg !74
  %646 = or i1 %644, %645, !dbg !75
  %647 = select i1 %646, float %643, float %519, !dbg !76
  %648 = bitcast float %647 to i32, !dbg !71
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 16, i32 31), !dbg !71
  %650 = bitcast i32 %649 to float, !dbg !71
  %651 = fcmp ogt float %647, %650, !dbg !73
  %652 = fcmp uno float %647, 0.000000e+00, !dbg !74
  %653 = or i1 %651, %652, !dbg !75
  %654 = select i1 %653, float %647, float %650, !dbg !76
  %655 = bitcast float %654 to i32, !dbg !71
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 8, i32 31), !dbg !71
  %657 = bitcast i32 %656 to float, !dbg !71
  %658 = fcmp ogt float %654, %657, !dbg !73
  %659 = fcmp uno float %654, 0.000000e+00, !dbg !74
  %660 = or i1 %658, %659, !dbg !75
  %661 = select i1 %660, float %654, float %657, !dbg !76
  %662 = bitcast float %661 to i32, !dbg !71
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 4, i32 31), !dbg !71
  %664 = bitcast i32 %663 to float, !dbg !71
  %665 = fcmp ogt float %661, %664, !dbg !73
  %666 = fcmp uno float %661, 0.000000e+00, !dbg !74
  %667 = or i1 %665, %666, !dbg !75
  %668 = select i1 %667, float %661, float %664, !dbg !76
  %669 = bitcast float %668 to i32, !dbg !71
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 2, i32 31), !dbg !71
  %671 = bitcast i32 %670 to float, !dbg !71
  %672 = fcmp ogt float %668, %671, !dbg !73
  %673 = fcmp uno float %668, 0.000000e+00, !dbg !74
  %674 = or i1 %672, %673, !dbg !75
  %675 = select i1 %674, float %668, float %671, !dbg !76
  %676 = bitcast float %675 to i32, !dbg !71
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 1, i32 31), !dbg !71
  %678 = bitcast i32 %677 to float, !dbg !71
  %679 = fcmp ogt float %675, %678, !dbg !73
  %680 = fcmp uno float %675, 0.000000e+00, !dbg !74
  %681 = or i1 %679, %680, !dbg !75
  %682 = select i1 %681, i32 %676, i32 %677, !dbg !76
  %683 = insertelement <1 x i32> poison, i32 %682, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %683, i1 %247) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %684 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %254) #5, !dbg !71
  %685 = bitcast i32 %684 to float, !dbg !71
  %686 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 8, i32 31), !dbg !71
  %687 = bitcast i32 %686 to float, !dbg !71
  %688 = fcmp ogt float %685, %687, !dbg !73
  %689 = fcmp uno float %685, 0.000000e+00, !dbg !74
  %690 = or i1 %689, %688, !dbg !75
  %691 = select i1 %690, float %685, float %687, !dbg !76
  %692 = bitcast float %691 to i32, !dbg !71
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 4, i32 31), !dbg !71
  %694 = bitcast i32 %693 to float, !dbg !71
  %695 = fcmp ogt float %691, %694, !dbg !73
  %696 = fcmp uno float %691, 0.000000e+00, !dbg !74
  %697 = or i1 %695, %696, !dbg !75
  %698 = select i1 %697, float %691, float %694, !dbg !76
  %699 = bitcast float %698 to i32, !dbg !71
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 2, i32 31), !dbg !71
  %701 = bitcast i32 %700 to float, !dbg !71
  %702 = fcmp ogt float %698, %701, !dbg !73
  %703 = fcmp uno float %698, 0.000000e+00, !dbg !74
  %704 = or i1 %702, %703, !dbg !75
  %705 = select i1 %704, float %698, float %701, !dbg !76
  %706 = bitcast float %705 to i32, !dbg !71
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 1, i32 31), !dbg !71
  %708 = bitcast i32 %707 to float, !dbg !71
  %709 = fcmp ogt float %705, %708, !dbg !73
  %710 = fcmp uno float %705, 0.000000e+00, !dbg !74
  %711 = or i1 %709, %710, !dbg !75
  %712 = select i1 %711, i32 %706, i32 %707, !dbg !76
  %713 = insertelement <1 x i32> poison, i32 %712, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %713, i1 %347) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %714 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %715 = sext i32 %16 to i64, !dbg !77
  %716 = getelementptr bfloat, ptr addrspace(1) %4, i64 %715, !dbg !77
  %717 = fptrunc float %619 to bfloat, !dbg !78
  %718 = and i32 %18, 511, !dbg !78
  %719 = icmp eq i32 %718, 0, !dbg !78
  %720 = bitcast bfloat %717 to i16, !dbg !78
  %721 = and i1 %17, %719, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %716, i1 %721) #5, !dbg !78
  %722 = getelementptr bfloat, ptr addrspace(1) %5, i64 %715, !dbg !79
  %723 = fptrunc float %714 to bfloat, !dbg !80
  %724 = bitcast bfloat %723 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %722, i1 %721) #5, !dbg !80
  %725 = getelementptr bfloat, ptr addrspace(1) %6, i64 %715, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %725, i1 %721) #5, !dbg !82
  %726 = getelementptr bfloat, ptr addrspace(1) %7, i64 %715, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %726, i1 %721) #5, !dbg !84
  %727 = getelementptr bfloat, ptr addrspace(1) %8, i64 %715, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %727, i1 %721) #5, !dbg !86
  %728 = getelementptr bfloat, ptr addrspace(1) %9, i64 %715, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %724, ptr addrspace(1) %728, i1 %721) #5, !dbg !88
  %729 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %424, i1 %29) #5, !dbg !89
  %730 = extractvalue { i32, i32, i32, i32 } %729, 0, !dbg !89
  %731 = bitcast i32 %730 to <2 x bfloat>, !dbg !89
  %732 = extractvalue { i32, i32, i32, i32 } %729, 1, !dbg !89
  %733 = bitcast i32 %732 to <2 x bfloat>, !dbg !89
  %734 = extractvalue { i32, i32, i32, i32 } %729, 2, !dbg !89
  %735 = bitcast i32 %734 to <2 x bfloat>, !dbg !89
  %736 = extractvalue { i32, i32, i32, i32 } %729, 3, !dbg !89
  %737 = bitcast i32 %736 to <2 x bfloat>, !dbg !89
  %738 = extractelement <2 x bfloat> %731, i64 0, !dbg !89
  %739 = extractelement <2 x bfloat> %731, i64 1, !dbg !89
  %740 = extractelement <2 x bfloat> %733, i64 0, !dbg !89
  %741 = extractelement <2 x bfloat> %733, i64 1, !dbg !89
  %742 = extractelement <2 x bfloat> %735, i64 0, !dbg !89
  %743 = extractelement <2 x bfloat> %735, i64 1, !dbg !89
  %744 = extractelement <2 x bfloat> %737, i64 0, !dbg !89
  %745 = extractelement <2 x bfloat> %737, i64 1, !dbg !89
  %746 = fpext bfloat %738 to float, !dbg !90
  %747 = fpext bfloat %739 to float, !dbg !90
  %748 = fpext bfloat %740 to float, !dbg !90
  %749 = fpext bfloat %741 to float, !dbg !90
  %750 = fpext bfloat %742 to float, !dbg !90
  %751 = fpext bfloat %743 to float, !dbg !90
  %752 = fpext bfloat %744 to float, !dbg !90
  %753 = fpext bfloat %745 to float, !dbg !90
  %.inv = fcmp oge float %619, 0.000000e+00, !dbg !91
  %754 = select i1 %.inv, float 0.000000e+00, float %619, !dbg !91
  %755 = fsub float 0.000000e+00, %754, !dbg !93
  %.inv1 = fcmp ole float %714, 0.000000e+00, !dbg !94
  %756 = select i1 %.inv1, float 0.000000e+00, float %714, !dbg !94
  %757 = fcmp ogt float %755, %756, !dbg !96
  %758 = fcmp uno float %755, 0.000000e+00, !dbg !98
  %759 = or i1 %758, %757, !dbg !99
  %760 = select i1 %759, float %755, float %756, !dbg !100
  %761 = fmul float %760, 0x3F80204080000000, !dbg !101
  %762 = fcmp ogt float %761, 0x3EE4F8B580000000, !dbg !102
  %763 = fcmp uno float %761, 0.000000e+00, !dbg !104
  %764 = or i1 %762, %763, !dbg !105
  %765 = select i1 %764, float %761, float 0x3EE4F8B580000000, !dbg !106
  %766 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %765), !dbg !107
  %767 = fmul float %766, %746, !dbg !108
  %768 = fmul float %766, %747, !dbg !108
  %769 = fmul float %766, %748, !dbg !108
  %770 = fmul float %766, %749, !dbg !108
  %771 = fmul float %766, %750, !dbg !108
  %772 = fmul float %766, %751, !dbg !108
  %773 = fmul float %766, %752, !dbg !108
  %774 = fmul float %766, %753, !dbg !108
  %775 = tail call float @llvm.nvvm.round.f(float %767) #5, !dbg !109
  %776 = tail call float @llvm.nvvm.round.f(float %768) #5, !dbg !109
  %777 = tail call float @llvm.nvvm.round.f(float %769) #5, !dbg !109
  %778 = tail call float @llvm.nvvm.round.f(float %770) #5, !dbg !109
  %779 = tail call float @llvm.nvvm.round.f(float %771) #5, !dbg !109
  %780 = tail call float @llvm.nvvm.round.f(float %772) #5, !dbg !109
  %781 = tail call float @llvm.nvvm.round.f(float %773) #5, !dbg !109
  %782 = tail call float @llvm.nvvm.round.f(float %774) #5, !dbg !109
  %783 = insertelement <4 x float> poison, float %775, i64 0, !dbg !110
  %784 = insertelement <4 x float> %783, float %776, i64 1, !dbg !110
  %785 = insertelement <4 x float> %784, float %777, i64 2, !dbg !110
  %786 = insertelement <4 x float> %785, float %778, i64 3, !dbg !110
  %787 = fcmp ogt <4 x float> %786, splat (float -1.270000e+02), !dbg !110
  %788 = fcmp uno <4 x float> %786, zeroinitializer, !dbg !112
  %789 = or <4 x i1> %787, %788, !dbg !113
  %790 = select <4 x i1> %789, <4 x float> %786, <4 x float> splat (float -1.270000e+02), !dbg !114
  %791 = fcmp olt <4 x float> %790, splat (float 1.270000e+02), !dbg !115
  %792 = fcmp uno <4 x float> %790, zeroinitializer, !dbg !117
  %793 = or <4 x i1> %791, %792, !dbg !118
  %794 = fptosi <4 x float> %790 to <4 x i8>, !dbg !119
  %795 = select <4 x i1> %793, <4 x i8> %794, <4 x i8> splat (i8 127), !dbg !120
  %796 = insertelement <4 x float> poison, float %779, i64 0, !dbg !110
  %797 = insertelement <4 x float> %796, float %780, i64 1, !dbg !110
  %798 = insertelement <4 x float> %797, float %781, i64 2, !dbg !110
  %799 = insertelement <4 x float> %798, float %782, i64 3, !dbg !110
  %800 = fcmp ogt <4 x float> %799, splat (float -1.270000e+02), !dbg !110
  %801 = fcmp uno <4 x float> %799, zeroinitializer, !dbg !112
  %802 = or <4 x i1> %800, %801, !dbg !113
  %803 = select <4 x i1> %802, <4 x float> %799, <4 x float> splat (float -1.270000e+02), !dbg !114
  %804 = fcmp olt <4 x float> %803, splat (float 1.270000e+02), !dbg !115
  %805 = fcmp uno <4 x float> %803, zeroinitializer, !dbg !117
  %806 = or <4 x i1> %804, %805, !dbg !118
  %807 = fptosi <4 x float> %803 to <4 x i8>, !dbg !119
  %808 = select <4 x i1> %806, <4 x i8> %807, <4 x i8> splat (i8 127), !dbg !120
  %809 = getelementptr i8, ptr addrspace(1) %10, i64 %27, !dbg !121
  %810 = bitcast <4 x i8> %795 to i32, !dbg !122
  %811 = bitcast <4 x i8> %808 to i32, !dbg !122
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %810, i32 %811, ptr addrspace(1) %809, i1 %29) #5, !dbg !122
  %812 = getelementptr i8, ptr addrspace(1) %11, i64 %27, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %810, i32 %811, ptr addrspace(1) %812, i1 %29) #5, !dbg !124
  %813 = getelementptr i8, ptr addrspace(1) %12, i64 %27, !dbg !125
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %810, i32 %811, ptr addrspace(1) %813, i1 %29) #5, !dbg !126
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 59, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!37 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 101, column: 53, scope: !6)
!90 = !DILocation(line: 101, column: 115, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !92)
!92 = !DILocation(line: 103, column: 46, scope: !6)
!93 = !DILocation(line: 104, column: 17, scope: !6)
!94 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !95)
!95 = !DILocation(line: 105, column: 46, scope: !6)
!96 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !97)
!97 = !DILocation(line: 106, column: 46, scope: !6)
!98 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !97)
!100 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !97)
!101 = !DILocation(line: 108, column: 24, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !103)
!103 = !DILocation(line: 111, column: 46, scope: !6)
!104 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !103)
!106 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !103)
!107 = !DILocation(line: 114, column: 25, scope: !6)
!108 = !DILocation(line: 117, column: 24, scope: !6)
!109 = !DILocation(line: 118, column: 36, scope: !6)
!110 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !111)
!111 = !DILocation(line: 121, column: 46, scope: !6)
!112 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !111)
!113 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !111)
!114 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !111)
!115 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !116)
!116 = !DILocation(line: 123, column: 46, scope: !6)
!117 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !116)
!118 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !116)
!119 = !DILocation(line: 125, column: 25, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !116)
!121 = !DILocation(line: 126, column: 29, scope: !6)
!122 = !DILocation(line: 126, column: 53, scope: !6)
!123 = !DILocation(line: 127, column: 30, scope: !6)
!124 = !DILocation(line: 127, column: 54, scope: !6)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 95, column: 4, scope: !6)
