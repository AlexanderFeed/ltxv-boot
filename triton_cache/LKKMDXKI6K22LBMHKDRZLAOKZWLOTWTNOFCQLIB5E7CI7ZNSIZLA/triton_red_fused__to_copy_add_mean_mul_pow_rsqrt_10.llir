; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 3, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, 512, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 56, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !16
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %22, !dbg !17

22:                                               ; preds = %8, %22
  %23 = phi i32 [ 0, %8 ], [ %92, %22 ]
  %24 = phi <8 x float> [ zeroinitializer, %8 ], [ %91, %22 ]
  %25 = or i32 %19, %23, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %15) #4, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !20
  %37 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %15) #4, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %15) #4, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !24
  %57 = shufflevector <2 x bfloat> %30, <2 x bfloat> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %58 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %59 = shufflevector <8 x bfloat> %57, <8 x bfloat> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <2 x bfloat> %34, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %61 = shufflevector <8 x bfloat> %59, <8 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %63 = shufflevector <8 x bfloat> %61, <8 x bfloat> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %64 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %65 = shufflevector <8 x bfloat> %63, <8 x bfloat> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %66 = fpext <8 x bfloat> %65 to <8 x float>, !dbg !25
  %67 = shufflevector <2 x bfloat> %40, <2 x bfloat> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %68 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %69 = shufflevector <8 x bfloat> %67, <8 x bfloat> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !26
  %70 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %71 = shufflevector <8 x bfloat> %69, <8 x bfloat> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !26
  %72 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %73 = shufflevector <8 x bfloat> %71, <8 x bfloat> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !26
  %74 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %75 = shufflevector <8 x bfloat> %73, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !26
  %76 = fpext <8 x bfloat> %75 to <8 x float>, !dbg !26
  %77 = shufflevector <2 x bfloat> %50, <2 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %78 = shufflevector <2 x bfloat> %54, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %79 = shufflevector <8 x bfloat> %77, <8 x bfloat> %78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %80 = shufflevector <2 x bfloat> %54, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %81 = shufflevector <8 x bfloat> %79, <8 x bfloat> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %82 = shufflevector <2 x bfloat> %56, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %83 = shufflevector <8 x bfloat> %81, <8 x bfloat> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %84 = shufflevector <2 x bfloat> %56, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %85 = shufflevector <8 x bfloat> %83, <8 x bfloat> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %86 = fpext <8 x bfloat> %85 to <8 x float>, !dbg !27
  %87 = fadd <8 x float> %66, %76, !dbg !28
  %88 = fadd <8 x float> %87, %86, !dbg !29
  %89 = fmul <8 x float> %88, %88, !dbg !30
  %90 = fadd <8 x float> %24, %89, !dbg !31
  %91 = select <8 x i1> %21, <8 x float> %90, <8 x float> %24, !dbg !16
  %92 = add nuw nsw i32 %23, 64, !dbg !17
  %93 = icmp samesign ult i32 %23, 4032, !dbg !17
  br i1 %93, label %22, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %22
  %shift = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %94 = fadd <8 x float> %91, %shift, !dbg !32
  %shift44 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %95 = fadd <8 x float> %shift44, %94, !dbg !32
  %shift45 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %96 = fadd <8 x float> %shift45, %95, !dbg !32
  %shift46 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %97 = fadd <8 x float> %shift46, %96, !dbg !32
  %shift47 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %98 = fadd <8 x float> %shift47, %97, !dbg !32
  %shift48 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %99 = fadd <8 x float> %shift48, %98, !dbg !32
  %shift49 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %100 = fadd <8 x float> %shift49, %99, !dbg !32
  %101 = extractelement <8 x float> %100, i64 0, !dbg !32
  %102 = bitcast float %101 to i32, !dbg !37
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !37
  %104 = bitcast i32 %103 to float, !dbg !37
  %105 = fadd float %101, %104, !dbg !32
  %106 = bitcast float %105 to i32, !dbg !37
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !37
  %108 = bitcast i32 %107 to float, !dbg !37
  %109 = fadd float %105, %108, !dbg !32
  %110 = bitcast float %109 to i32, !dbg !37
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !37
  %112 = bitcast i32 %111 to float, !dbg !37
  %113 = fadd float %109, %112, !dbg !32
  %114 = tail call float @llvm.nvvm.div.full(float %113, float 4.096000e+03), !dbg !38
  %115 = fadd float %114, 0x3EB0C6F7A0000000, !dbg !39
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i20 = icmp eq i32 %123, 0, !dbg !40
  br i1 %.not.i20, label %126, label %124, !dbg !40

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !40
  br label %__nv_rsqrtf.exit22, !dbg !40

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !40
  br label %__nv_rsqrtf.exit22, !dbg !40

__nv_rsqrtf.exit22:                               ; preds = %124, %126
  %.0.i21 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !40
  %128 = zext nneg i32 %17 to i64, !dbg !41
  %129 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !42
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %131, !dbg !41

131:                                              ; preds = %__nv_rsqrtf.exit22, %131
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit22 ], [ %indvars.iv.next, %131 ]
  %132 = or disjoint i64 %indvars.iv, %128, !dbg !43
  %133 = getelementptr bfloat, ptr addrspace(1) %3, i64 %132, !dbg !44
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %133, i1 true) #4, !dbg !45
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !45
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !45
  %137 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !45
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !45
  %139 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !45
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !45
  %141 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !45
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !45
  %143 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %19, %143
  %144 = sext i32 %.reass to i64, !dbg !46
  %145 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !46
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %145, i1 %15) #4, !dbg !47
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !47
  %148 = bitcast i32 %147 to <2 x bfloat>, !dbg !47
  %149 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !47
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !47
  %151 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !47
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !47
  %153 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !47
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !47
  %155 = getelementptr bfloat, ptr addrspace(1) %1, i64 %144, !dbg !48
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %155, i1 %15) #4, !dbg !49
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !49
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !49
  %159 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !49
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !49
  %161 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !49
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !49
  %163 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !49
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !49
  %165 = getelementptr bfloat, ptr addrspace(1) %2, i64 %144, !dbg !50
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %165, i1 %15) #4, !dbg !51
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !51
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !51
  %169 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !51
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !51
  %171 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !51
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !51
  %173 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !51
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !51
  %175 = getelementptr bfloat, ptr addrspace(1) %4, i64 %144, !dbg !52
  %176 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !53
  %177 = fpext <2 x bfloat> %148 to <2 x float>, !dbg !54
  %178 = fpext <2 x bfloat> %158 to <2 x float>, !dbg !55
  %179 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !56
  %180 = fadd <2 x float> %177, %178, !dbg !57
  %181 = fadd <2 x float> %180, %179, !dbg !58
  %182 = fmul <2 x float> %130, %181, !dbg !42
  %183 = fmul <2 x float> %182, %176, !dbg !59
  %184 = fptrunc <2 x float> %183 to <2 x bfloat>, !dbg !60
  %185 = fpext <2 x bfloat> %138 to <2 x float>, !dbg !53
  %186 = fpext <2 x bfloat> %150 to <2 x float>, !dbg !54
  %187 = fpext <2 x bfloat> %160 to <2 x float>, !dbg !55
  %188 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !56
  %189 = fadd <2 x float> %186, %187, !dbg !57
  %190 = fadd <2 x float> %189, %188, !dbg !58
  %191 = fmul <2 x float> %130, %190, !dbg !42
  %192 = fmul <2 x float> %191, %185, !dbg !59
  %193 = fptrunc <2 x float> %192 to <2 x bfloat>, !dbg !60
  %194 = fpext <2 x bfloat> %140 to <2 x float>, !dbg !53
  %195 = fpext <2 x bfloat> %152 to <2 x float>, !dbg !54
  %196 = fpext <2 x bfloat> %162 to <2 x float>, !dbg !55
  %197 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !56
  %198 = fadd <2 x float> %195, %196, !dbg !57
  %199 = fadd <2 x float> %198, %197, !dbg !58
  %200 = fmul <2 x float> %130, %199, !dbg !42
  %201 = fmul <2 x float> %200, %194, !dbg !59
  %202 = fptrunc <2 x float> %201 to <2 x bfloat>, !dbg !60
  %203 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !53
  %204 = fpext <2 x bfloat> %154 to <2 x float>, !dbg !54
  %205 = fpext <2 x bfloat> %164 to <2 x float>, !dbg !55
  %206 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !56
  %207 = fadd <2 x float> %204, %205, !dbg !57
  %208 = fadd <2 x float> %207, %206, !dbg !58
  %209 = fmul <2 x float> %130, %208, !dbg !42
  %210 = fmul <2 x float> %209, %203, !dbg !59
  %211 = fptrunc <2 x float> %210 to <2 x bfloat>, !dbg !60
  %212 = bitcast <2 x bfloat> %184 to i32, !dbg !60
  %213 = bitcast <2 x bfloat> %193 to i32, !dbg !60
  %214 = bitcast <2 x bfloat> %202 to i32, !dbg !60
  %215 = bitcast <2 x bfloat> %211 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %213, i32 %214, i32 %215, ptr addrspace(1) %175, i1 %15) #4, !dbg !60
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !41
  %216 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !41
  br i1 %216, label %131, label %217, !dbg !41

217:                                              ; preds = %131
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm6asjslmly5ocj3s6mh3iu62oswtuony7ojqrjyoleomizjp2in.py", directory: "/tmp/torchinductor_root/m6")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 45, column: 48, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 36, column: 112, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 112, scope: !6)
!28 = !DILocation(line: 39, column: 22, scope: !6)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 42, column: 22, scope: !6)
!31 = !DILocation(line: 44, column: 23, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 46, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 63, column: 24, scope: !6)
!40 = !DILocation(line: 64, column: 32, scope: !6)
!41 = !DILocation(line: 47, column: 40, scope: !6)
!42 = !DILocation(line: 65, column: 24, scope: !6)
!43 = !DILocation(line: 48, column: 31, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 42, scope: !6)
!46 = !DILocation(line: 54, column: 35, scope: !6)
!47 = !DILocation(line: 54, column: 52, scope: !6)
!48 = !DILocation(line: 55, column: 35, scope: !6)
!49 = !DILocation(line: 55, column: 52, scope: !6)
!50 = !DILocation(line: 56, column: 35, scope: !6)
!51 = !DILocation(line: 56, column: 52, scope: !6)
!52 = !DILocation(line: 68, column: 29, scope: !6)
!53 = !DILocation(line: 53, column: 95, scope: !6)
!54 = !DILocation(line: 54, column: 114, scope: !6)
!55 = !DILocation(line: 55, column: 114, scope: !6)
!56 = !DILocation(line: 56, column: 114, scope: !6)
!57 = !DILocation(line: 57, column: 24, scope: !6)
!58 = !DILocation(line: 58, column: 24, scope: !6)
!59 = !DILocation(line: 67, column: 24, scope: !6)
!60 = !DILocation(line: 68, column: 53, scope: !6)
!61 = !DILocation(line: 47, column: 4, scope: !6)
