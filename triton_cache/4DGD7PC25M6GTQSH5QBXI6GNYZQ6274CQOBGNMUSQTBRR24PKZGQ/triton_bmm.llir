; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 8, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 8, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 4, !dbg !19
  %18 = and i32 %17, 7, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = or disjoint i32 %20, 16, !dbg !19
  %22 = or disjoint i32 %20, 32, !dbg !19
  %23 = or disjoint i32 %20, 48, !dbg !19
  %24 = shl i32 %15, 3, !dbg !19
  %25 = and i32 %24, 8, !dbg !19
  %26 = and i32 %24, 16, !dbg !19
  %27 = and i32 %24, 24, !dbg !19
  %28 = and i32 %24, 32, !dbg !19
  %29 = and i32 %24, 56, !dbg !19
  %30 = or disjoint i32 %14, %18, !dbg !20
  %31 = or disjoint i32 %30, 8, !dbg !20
  %32 = or disjoint i32 %30, 16, !dbg !20
  %33 = or disjoint i32 %30, 24, !dbg !20
  %34 = or disjoint i32 %30, 32, !dbg !20
  %35 = or disjoint i32 %30, 40, !dbg !20
  %36 = or disjoint i32 %30, 48, !dbg !20
  %37 = or disjoint i32 %30, 56, !dbg !20
  %38 = shl nsw i32 %13, 6, !dbg !21
  %39 = or disjoint i32 %38, %29, !dbg !22
  %40 = srem i32 %30, 512, !dbg !23
  %41 = srem i32 %31, 512, !dbg !23
  %42 = srem i32 %32, 512, !dbg !23
  %43 = srem i32 %33, 512, !dbg !23
  %44 = srem i32 %34, 512, !dbg !23
  %45 = srem i32 %35, 512, !dbg !23
  %46 = srem i32 %36, 512, !dbg !23
  %47 = srem i32 %37, 512, !dbg !23
  %48 = srem i32 %39, 64, !dbg !24
  %49 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %50 = shl nsw i32 %40, 9, !dbg !26
  %51 = shl nsw i32 %41, 9, !dbg !26
  %52 = shl nsw i32 %42, 9, !dbg !26
  %53 = shl nsw i32 %43, 9, !dbg !26
  %54 = shl nsw i32 %44, 9, !dbg !26
  %55 = shl nsw i32 %45, 9, !dbg !26
  %56 = shl nsw i32 %46, 9, !dbg !26
  %57 = shl nsw i32 %47, 9, !dbg !26
  %58 = and i32 %24, 120, !dbg !27
  %59 = shl i32 %49, 18, !dbg !28
  %60 = or disjoint i32 %58, %59, !dbg !29
  %61 = add i32 %60, %50, !dbg !30
  %62 = add i32 %60, %51, !dbg !30
  %63 = add i32 %60, %52, !dbg !30
  %64 = add i32 %60, %53, !dbg !30
  %65 = add i32 %60, %54, !dbg !30
  %66 = add i32 %60, %55, !dbg !30
  %67 = add i32 %60, %56, !dbg !30
  %68 = add i32 %60, %57, !dbg !30
  %69 = sext i32 %61 to i64, !dbg !31
  %70 = getelementptr bfloat, ptr addrspace(1) %0, i64 %69, !dbg !31
  %71 = sext i32 %62 to i64, !dbg !31
  %72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %71, !dbg !31
  %73 = sext i32 %63 to i64, !dbg !31
  %74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %73, !dbg !31
  %75 = sext i32 %64 to i64, !dbg !31
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !31
  %77 = sext i32 %65 to i64, !dbg !31
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !31
  %79 = sext i32 %66 to i64, !dbg !31
  %80 = getelementptr bfloat, ptr addrspace(1) %0, i64 %79, !dbg !31
  %81 = sext i32 %67 to i64, !dbg !31
  %82 = getelementptr bfloat, ptr addrspace(1) %0, i64 %81, !dbg !31
  %83 = sext i32 %68 to i64, !dbg !31
  %84 = getelementptr bfloat, ptr addrspace(1) %0, i64 %83, !dbg !31
  %85 = shl nuw nsw i32 %20, 12, !dbg !32
  %86 = shl nuw nsw i32 %21, 12, !dbg !32
  %87 = shl nuw nsw i32 %22, 12, !dbg !32
  %88 = shl nuw nsw i32 %23, 12, !dbg !32
  %89 = shl i32 %49, 6, !dbg !33
  %90 = add i32 %48, %89, !dbg !34
  %91 = add i32 %90, %85, !dbg !35
  %92 = add i32 %90, %86, !dbg !35
  %93 = add i32 %90, %87, !dbg !35
  %94 = add i32 %90, %88, !dbg !35
  %95 = add i32 %90, 262144, !dbg !34
  %96 = add i32 %95, %85, !dbg !35
  %97 = add i32 %90, 327680, !dbg !34
  %98 = add i32 %97, %85, !dbg !35
  %99 = add i32 %90, 393216, !dbg !34
  %100 = add i32 %99, %85, !dbg !35
  %101 = add i32 %90, 458752, !dbg !34
  %102 = add i32 %101, %85, !dbg !35
  %103 = sext i32 %91 to i64, !dbg !36
  %104 = getelementptr bfloat, ptr addrspace(1) %1, i64 %103, !dbg !36
  %105 = sext i32 %92 to i64, !dbg !36
  %106 = getelementptr bfloat, ptr addrspace(1) %1, i64 %105, !dbg !36
  %107 = sext i32 %93 to i64, !dbg !36
  %108 = getelementptr bfloat, ptr addrspace(1) %1, i64 %107, !dbg !36
  %109 = sext i32 %94 to i64, !dbg !36
  %110 = getelementptr bfloat, ptr addrspace(1) %1, i64 %109, !dbg !36
  %111 = sext i32 %96 to i64, !dbg !36
  %112 = getelementptr bfloat, ptr addrspace(1) %1, i64 %111, !dbg !36
  %113 = sext i32 %98 to i64, !dbg !36
  %114 = getelementptr bfloat, ptr addrspace(1) %1, i64 %113, !dbg !36
  %115 = sext i32 %100 to i64, !dbg !36
  %116 = getelementptr bfloat, ptr addrspace(1) %1, i64 %115, !dbg !36
  %117 = sext i32 %102 to i64, !dbg !36
  %118 = getelementptr bfloat, ptr addrspace(1) %1, i64 %117, !dbg !36
  %119 = lshr exact i32 %16, 1, !dbg !37
  %120 = lshr i32 %15, 1, !dbg !37
  %121 = and i32 %120, 56, !dbg !37
  %122 = xor i32 %58, %121, !dbg !37
  %123 = shl nuw nsw i32 %18, 7, !dbg !37
  %124 = or disjoint i32 %122, %123, !dbg !37
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %124, !dbg !37
  %126 = or disjoint i32 %124, 1024, !dbg !37
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %126, !dbg !37
  %128 = or disjoint i32 %124, 2048, !dbg !37
  %129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %128, !dbg !37
  %130 = or disjoint i32 %124, 3072, !dbg !37
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %130, !dbg !37
  %132 = or disjoint i32 %124, 4096, !dbg !37
  %133 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %132, !dbg !37
  %134 = or disjoint i32 %124, 5120, !dbg !37
  %135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %134, !dbg !37
  %136 = or disjoint i32 %124, 6144, !dbg !37
  %137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %136, !dbg !37
  %138 = or disjoint i32 %124, 7168, !dbg !37
  %139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %138, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %125, ptr addrspace(1) %70, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %127, ptr addrspace(1) %72, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %129, ptr addrspace(1) %74, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %131, ptr addrspace(1) %76, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %133, ptr addrspace(1) %78, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %135, ptr addrspace(1) %80, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %137, ptr addrspace(1) %82, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %139, ptr addrspace(1) %84, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %140 = xor i32 %24, %15, !dbg !38
  %141 = and i32 %140, 56, !dbg !38
  %142 = shl nuw nsw i32 %20, 6, !dbg !38
  %143 = or disjoint i32 %141, %142, !dbg !38
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %143, !dbg !38
  %145 = or disjoint i32 %143, 1024, !dbg !38
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %145, !dbg !38
  %147 = or disjoint i32 %143, 2048, !dbg !38
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %147, !dbg !38
  %149 = or disjoint i32 %143, 3072, !dbg !38
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %149, !dbg !38
  %151 = or disjoint i32 %143, 4096, !dbg !38
  %152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %151, !dbg !38
  %153 = or disjoint i32 %143, 5120, !dbg !38
  %154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %153, !dbg !38
  %155 = or disjoint i32 %143, 6144, !dbg !38
  %156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %155, !dbg !38
  %157 = or disjoint i32 %143, 7168, !dbg !38
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %157, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %144, ptr addrspace(1) %104, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %146, ptr addrspace(1) %106, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %108, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %110, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %152, ptr addrspace(1) %112, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %154, ptr addrspace(1) %114, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %156, ptr addrspace(1) %116, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %158, ptr addrspace(1) %118, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %159 = getelementptr i8, ptr addrspace(1) %70, i64 256, !dbg !39
  %160 = getelementptr i8, ptr addrspace(1) %72, i64 256, !dbg !39
  %161 = getelementptr i8, ptr addrspace(1) %74, i64 256, !dbg !39
  %162 = getelementptr i8, ptr addrspace(1) %76, i64 256, !dbg !39
  %163 = getelementptr i8, ptr addrspace(1) %78, i64 256, !dbg !39
  %164 = getelementptr i8, ptr addrspace(1) %80, i64 256, !dbg !39
  %165 = getelementptr i8, ptr addrspace(1) %82, i64 256, !dbg !39
  %166 = getelementptr i8, ptr addrspace(1) %84, i64 256, !dbg !39
  %167 = getelementptr i8, ptr addrspace(1) %104, i64 1048576, !dbg !40
  %168 = getelementptr i8, ptr addrspace(1) %106, i64 1048576, !dbg !40
  %169 = getelementptr i8, ptr addrspace(1) %108, i64 1048576, !dbg !40
  %170 = getelementptr i8, ptr addrspace(1) %110, i64 1048576, !dbg !40
  %171 = getelementptr i8, ptr addrspace(1) %112, i64 1048576, !dbg !40
  %172 = getelementptr i8, ptr addrspace(1) %114, i64 1048576, !dbg !40
  %173 = getelementptr i8, ptr addrspace(1) %116, i64 1048576, !dbg !40
  %174 = getelementptr i8, ptr addrspace(1) %118, i64 1048576, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %124, !dbg !37
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %126, !dbg !37
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %128, !dbg !37
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %130, !dbg !37
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %132, !dbg !37
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %134, !dbg !37
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %136, !dbg !37
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %138, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %175, ptr addrspace(1) %159, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %160, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %161, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %162, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %163, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %180, ptr addrspace(1) %164, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %165, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %166, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %143, !dbg !38
  %184 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %145, !dbg !38
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %147, !dbg !38
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %149, !dbg !38
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %151, !dbg !38
  %188 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %153, !dbg !38
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %155, !dbg !38
  %190 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %157, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %183, ptr addrspace(1) %167, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %184, ptr addrspace(1) %168, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %185, ptr addrspace(1) %169, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %186, ptr addrspace(1) %170, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %187, ptr addrspace(1) %171, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %188, ptr addrspace(1) %172, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %189, ptr addrspace(1) %173, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %190, ptr addrspace(1) %174, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %191 = getelementptr i8, ptr addrspace(1) %70, i64 512, !dbg !39
  %192 = getelementptr i8, ptr addrspace(1) %72, i64 512, !dbg !39
  %193 = getelementptr i8, ptr addrspace(1) %74, i64 512, !dbg !39
  %194 = getelementptr i8, ptr addrspace(1) %76, i64 512, !dbg !39
  %195 = getelementptr i8, ptr addrspace(1) %78, i64 512, !dbg !39
  %196 = getelementptr i8, ptr addrspace(1) %80, i64 512, !dbg !39
  %197 = getelementptr i8, ptr addrspace(1) %82, i64 512, !dbg !39
  %198 = getelementptr i8, ptr addrspace(1) %84, i64 512, !dbg !39
  %199 = getelementptr i8, ptr addrspace(1) %104, i64 2097152, !dbg !40
  %200 = getelementptr i8, ptr addrspace(1) %106, i64 2097152, !dbg !40
  %201 = getelementptr i8, ptr addrspace(1) %108, i64 2097152, !dbg !40
  %202 = getelementptr i8, ptr addrspace(1) %110, i64 2097152, !dbg !40
  %203 = getelementptr i8, ptr addrspace(1) %112, i64 2097152, !dbg !40
  %204 = getelementptr i8, ptr addrspace(1) %114, i64 2097152, !dbg !40
  %205 = getelementptr i8, ptr addrspace(1) %116, i64 2097152, !dbg !40
  %206 = getelementptr i8, ptr addrspace(1) %118, i64 2097152, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %207 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %124, !dbg !37
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %126, !dbg !37
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %128, !dbg !37
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %130, !dbg !37
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %132, !dbg !37
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %134, !dbg !37
  %213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %136, !dbg !37
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %138, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %207, ptr addrspace(1) %191, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %208, ptr addrspace(1) %192, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %209, ptr addrspace(1) %193, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %194, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %211, ptr addrspace(1) %195, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %212, ptr addrspace(1) %196, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %213, ptr addrspace(1) %197, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %198, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %143, !dbg !38
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %145, !dbg !38
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %147, !dbg !38
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %149, !dbg !38
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %151, !dbg !38
  %220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %153, !dbg !38
  %221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %155, !dbg !38
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %157, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %215, ptr addrspace(1) %199, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %216, ptr addrspace(1) %200, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %217, ptr addrspace(1) %201, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %218, ptr addrspace(1) %202, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %219, ptr addrspace(1) %203, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %220, ptr addrspace(1) %204, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %221, ptr addrspace(1) %205, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %222, ptr addrspace(1) %206, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %223 = getelementptr i8, ptr addrspace(1) %70, i64 768, !dbg !39
  %224 = getelementptr i8, ptr addrspace(1) %72, i64 768, !dbg !39
  %225 = getelementptr i8, ptr addrspace(1) %74, i64 768, !dbg !39
  %226 = getelementptr i8, ptr addrspace(1) %76, i64 768, !dbg !39
  %227 = getelementptr i8, ptr addrspace(1) %78, i64 768, !dbg !39
  %228 = getelementptr i8, ptr addrspace(1) %80, i64 768, !dbg !39
  %229 = getelementptr i8, ptr addrspace(1) %82, i64 768, !dbg !39
  %230 = getelementptr i8, ptr addrspace(1) %84, i64 768, !dbg !39
  %231 = getelementptr i8, ptr addrspace(1) %104, i64 3145728, !dbg !40
  %232 = getelementptr i8, ptr addrspace(1) %106, i64 3145728, !dbg !40
  %233 = getelementptr i8, ptr addrspace(1) %108, i64 3145728, !dbg !40
  %234 = getelementptr i8, ptr addrspace(1) %110, i64 3145728, !dbg !40
  %235 = getelementptr i8, ptr addrspace(1) %112, i64 3145728, !dbg !40
  %236 = getelementptr i8, ptr addrspace(1) %114, i64 3145728, !dbg !40
  %237 = getelementptr i8, ptr addrspace(1) %116, i64 3145728, !dbg !40
  %238 = getelementptr i8, ptr addrspace(1) %118, i64 3145728, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %124, !dbg !37
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %126, !dbg !37
  %241 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %128, !dbg !37
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %130, !dbg !37
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %132, !dbg !37
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %134, !dbg !37
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %136, !dbg !37
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %138, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %239, ptr addrspace(1) %223, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %240, ptr addrspace(1) %224, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %241, ptr addrspace(1) %225, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %242, ptr addrspace(1) %226, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %227, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %228, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %229, i32 16) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %246, ptr addrspace(1) %230, i32 16) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %143, !dbg !38
  %248 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %145, !dbg !38
  %249 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %147, !dbg !38
  %250 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %149, !dbg !38
  %251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %151, !dbg !38
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %153, !dbg !38
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %155, !dbg !38
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %157, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %247, ptr addrspace(1) %231, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %248, ptr addrspace(1) %232, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %249, ptr addrspace(1) %233, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %250, ptr addrspace(1) %234, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %251, ptr addrspace(1) %235, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %252, ptr addrspace(1) %236, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %253, ptr addrspace(1) %237, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %254, ptr addrspace(1) %238, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %invariant.op = or disjoint i32 %28, %119, !dbg !41
  %invariant.op338 = or disjoint i32 %16, 32, !dbg !41
  %255 = and i32 %15, 15
  %256 = xor i32 %29, %119
  %257 = lshr i32 %15, 2
  %258 = and i32 %257, 16
  %259 = or disjoint i32 %258, %255
  %260 = shl nuw nsw i32 %259, 7
  %261 = or disjoint i32 %260, %256
  %262 = or disjoint i32 %25, 16
  %263 = xor i32 %262, %26
  %264 = or disjoint i32 %263, %28
  %265 = xor i32 %264, %119
  %266 = or disjoint i32 %265, %260
  %267 = or disjoint i32 %27, 32
  %268 = xor i32 %267, %28
  %.reass = xor i32 %267, %invariant.op
  %269 = or disjoint i32 %.reass, %260
  %270 = or disjoint i32 %25, 48
  %and.ra = and i32 %24, 48
  %271 = xor i32 %270, %and.ra
  %272 = xor i32 %271, %119
  %273 = or disjoint i32 %272, %260
  %274 = or disjoint i32 %29, 64
  %275 = xor i32 %274, %119
  %276 = or disjoint i32 %275, %260
  %277 = or disjoint i32 %25, 80
  %278 = xor i32 %277, %26
  %279 = or disjoint i32 %278, %28
  %280 = xor i32 %279, %119
  %281 = or disjoint i32 %280, %260
  %282 = or disjoint i32 %27, 96
  %283 = xor i32 %invariant.op, %282
  %284 = or disjoint i32 %283, %260
  %285 = or disjoint i32 %25, 112
  %286 = or disjoint i32 %119, %and.ra
  %287 = xor i32 %286, %285
  %288 = or disjoint i32 %287, %260
  %289 = or disjoint i32 %260, 4096
  %290 = or disjoint i32 %289, %256
  %291 = or disjoint i32 %265, %289
  %292 = or disjoint i32 %.reass, %289
  %293 = or disjoint i32 %272, %289
  %294 = or disjoint i32 %275, %289
  %295 = or disjoint i32 %280, %289
  %296 = or disjoint i32 %283, %289
  %297 = or disjoint i32 %287, %289
  %298 = lshr i32 %15, 2
  %299 = and i32 %298, 8
  %300 = xor i32 %29, %299
  %301 = shl i32 %15, 6
  %302 = and i32 %301, 1984
  %303 = or disjoint i32 %300, %302
  %.reass339 = or disjoint i32 %255, %invariant.op338
  %304 = shl nuw nsw i32 %.reass339, 6
  %305 = or disjoint i32 %304, %300
  %306 = or disjoint i32 %302, 4096
  %307 = or disjoint i32 %300, %306
  %308 = or disjoint i32 %302, 6144
  %309 = or disjoint i32 %300, %308
  %310 = xor i32 %264, %299
  %311 = or disjoint i32 %310, %302
  %312 = or disjoint i32 %310, %304
  %313 = or disjoint i32 %310, %306
  %314 = or disjoint i32 %310, %308
  %315 = xor i32 %268, %299
  %316 = or disjoint i32 %315, %302
  %317 = or disjoint i32 %315, %304
  %318 = or disjoint i32 %315, %306
  %319 = or disjoint i32 %315, %308
  %320 = xor i32 %271, %299
  %321 = or disjoint i32 %320, %302
  %322 = or disjoint i32 %320, %304
  %323 = or disjoint i32 %320, %306
  %324 = or disjoint i32 %320, %308
  br label %325, !dbg !41

325:                                              ; preds = %4, %325
  %326 = phi i32 [ -1, %4 ], [ %363, %325 ]
  %327 = phi i32 [ 3, %4 ], [ %929, %325 ]
  %.pn145355 = phi ptr addrspace(1) [ %238, %4 ], [ %926, %325 ]
  %.pn161354 = phi ptr addrspace(1) [ %237, %4 ], [ %925, %325 ]
  %.pn177353 = phi ptr addrspace(1) [ %236, %4 ], [ %924, %325 ]
  %.pn193352 = phi ptr addrspace(1) [ %235, %4 ], [ %923, %325 ]
  %.pn209351 = phi ptr addrspace(1) [ %234, %4 ], [ %922, %325 ]
  %.pn225350 = phi ptr addrspace(1) [ %233, %4 ], [ %921, %325 ]
  %.pn241349 = phi ptr addrspace(1) [ %232, %4 ], [ %920, %325 ]
  %.pn257348 = phi ptr addrspace(1) [ %231, %4 ], [ %919, %325 ]
  %.pn17347 = phi ptr addrspace(1) [ %230, %4 ], [ %918, %325 ]
  %.pn33346 = phi ptr addrspace(1) [ %229, %4 ], [ %917, %325 ]
  %.pn49345 = phi ptr addrspace(1) [ %228, %4 ], [ %916, %325 ]
  %.pn65344 = phi ptr addrspace(1) [ %227, %4 ], [ %915, %325 ]
  %.pn81343 = phi ptr addrspace(1) [ %226, %4 ], [ %914, %325 ]
  %.pn97342 = phi ptr addrspace(1) [ %225, %4 ], [ %913, %325 ]
  %.pn113341 = phi ptr addrspace(1) [ %224, %4 ], [ %912, %325 ]
  %.pn129340 = phi ptr addrspace(1) [ %223, %4 ], [ %911, %325 ]
  %328 = phi float [ 0.000000e+00, %4 ], [ %872, %325 ]
  %329 = phi float [ 0.000000e+00, %4 ], [ %873, %325 ]
  %330 = phi float [ 0.000000e+00, %4 ], [ %874, %325 ]
  %331 = phi float [ 0.000000e+00, %4 ], [ %875, %325 ]
  %332 = phi float [ 0.000000e+00, %4 ], [ %877, %325 ]
  %333 = phi float [ 0.000000e+00, %4 ], [ %878, %325 ]
  %334 = phi float [ 0.000000e+00, %4 ], [ %879, %325 ]
  %335 = phi float [ 0.000000e+00, %4 ], [ %880, %325 ]
  %336 = phi float [ 0.000000e+00, %4 ], [ %882, %325 ]
  %337 = phi float [ 0.000000e+00, %4 ], [ %883, %325 ]
  %338 = phi float [ 0.000000e+00, %4 ], [ %884, %325 ]
  %339 = phi float [ 0.000000e+00, %4 ], [ %885, %325 ]
  %340 = phi float [ 0.000000e+00, %4 ], [ %887, %325 ]
  %341 = phi float [ 0.000000e+00, %4 ], [ %888, %325 ]
  %342 = phi float [ 0.000000e+00, %4 ], [ %889, %325 ]
  %343 = phi float [ 0.000000e+00, %4 ], [ %890, %325 ]
  %344 = phi float [ 0.000000e+00, %4 ], [ %892, %325 ]
  %345 = phi float [ 0.000000e+00, %4 ], [ %893, %325 ]
  %346 = phi float [ 0.000000e+00, %4 ], [ %894, %325 ]
  %347 = phi float [ 0.000000e+00, %4 ], [ %895, %325 ]
  %348 = phi float [ 0.000000e+00, %4 ], [ %897, %325 ]
  %349 = phi float [ 0.000000e+00, %4 ], [ %898, %325 ]
  %350 = phi float [ 0.000000e+00, %4 ], [ %899, %325 ]
  %351 = phi float [ 0.000000e+00, %4 ], [ %900, %325 ]
  %352 = phi float [ 0.000000e+00, %4 ], [ %902, %325 ]
  %353 = phi float [ 0.000000e+00, %4 ], [ %903, %325 ]
  %354 = phi float [ 0.000000e+00, %4 ], [ %904, %325 ]
  %355 = phi float [ 0.000000e+00, %4 ], [ %905, %325 ]
  %356 = phi float [ 0.000000e+00, %4 ], [ %907, %325 ]
  %357 = phi float [ 0.000000e+00, %4 ], [ %908, %325 ]
  %358 = phi float [ 0.000000e+00, %4 ], [ %909, %325 ]
  %359 = phi float [ 0.000000e+00, %4 ], [ %910, %325 ]
  %360 = phi i32 [ 0, %4 ], [ %949, %325 ]
  %361 = add i32 %326, 1, !dbg !41
  %362 = icmp slt i32 %361, 4, !dbg !41
  %363 = select i1 %362, i32 %361, i32 0, !dbg !41
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %364 = shl i32 %363, 13, !dbg !37
  %365 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %364, !dbg !37
  %366 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %261, !dbg !37
  %367 = ptrtoint ptr addrspace(3) %366 to i32, !dbg !37
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %367) #1, !dbg !37
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !37
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !37
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !37
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !37
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %266, !dbg !37
  %374 = ptrtoint ptr addrspace(3) %373 to i32, !dbg !37
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #1, !dbg !37
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !37
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !37
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !37
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !37
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %269, !dbg !37
  %381 = ptrtoint ptr addrspace(3) %380 to i32, !dbg !37
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %381) #1, !dbg !37
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !37
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !37
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !37
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !37
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %273, !dbg !37
  %388 = ptrtoint ptr addrspace(3) %387 to i32, !dbg !37
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %388) #1, !dbg !37
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !37
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !37
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !37
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !37
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %276, !dbg !37
  %395 = ptrtoint ptr addrspace(3) %394 to i32, !dbg !37
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %395) #1, !dbg !37
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !37
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !37
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !37
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !37
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %281, !dbg !37
  %402 = ptrtoint ptr addrspace(3) %401 to i32, !dbg !37
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %402) #1, !dbg !37
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !37
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !37
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !37
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !37
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %284, !dbg !37
  %409 = ptrtoint ptr addrspace(3) %408 to i32, !dbg !37
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %409) #1, !dbg !37
  %411 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !37
  %412 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !37
  %413 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !37
  %414 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !37
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %288, !dbg !37
  %416 = ptrtoint ptr addrspace(3) %415 to i32, !dbg !37
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %416) #1, !dbg !37
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !37
  %419 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !37
  %420 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !37
  %421 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !37
  %422 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %290, !dbg !37
  %423 = ptrtoint ptr addrspace(3) %422 to i32, !dbg !37
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %423) #1, !dbg !37
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !37
  %426 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !37
  %427 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !37
  %428 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !37
  %429 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %291, !dbg !37
  %430 = ptrtoint ptr addrspace(3) %429 to i32, !dbg !37
  %431 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %430) #1, !dbg !37
  %432 = extractvalue { i32, i32, i32, i32 } %431, 0, !dbg !37
  %433 = extractvalue { i32, i32, i32, i32 } %431, 1, !dbg !37
  %434 = extractvalue { i32, i32, i32, i32 } %431, 2, !dbg !37
  %435 = extractvalue { i32, i32, i32, i32 } %431, 3, !dbg !37
  %436 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %292, !dbg !37
  %437 = ptrtoint ptr addrspace(3) %436 to i32, !dbg !37
  %438 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %437) #1, !dbg !37
  %439 = extractvalue { i32, i32, i32, i32 } %438, 0, !dbg !37
  %440 = extractvalue { i32, i32, i32, i32 } %438, 1, !dbg !37
  %441 = extractvalue { i32, i32, i32, i32 } %438, 2, !dbg !37
  %442 = extractvalue { i32, i32, i32, i32 } %438, 3, !dbg !37
  %443 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %293, !dbg !37
  %444 = ptrtoint ptr addrspace(3) %443 to i32, !dbg !37
  %445 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %444) #1, !dbg !37
  %446 = extractvalue { i32, i32, i32, i32 } %445, 0, !dbg !37
  %447 = extractvalue { i32, i32, i32, i32 } %445, 1, !dbg !37
  %448 = extractvalue { i32, i32, i32, i32 } %445, 2, !dbg !37
  %449 = extractvalue { i32, i32, i32, i32 } %445, 3, !dbg !37
  %450 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %294, !dbg !37
  %451 = ptrtoint ptr addrspace(3) %450 to i32, !dbg !37
  %452 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %451) #1, !dbg !37
  %453 = extractvalue { i32, i32, i32, i32 } %452, 0, !dbg !37
  %454 = extractvalue { i32, i32, i32, i32 } %452, 1, !dbg !37
  %455 = extractvalue { i32, i32, i32, i32 } %452, 2, !dbg !37
  %456 = extractvalue { i32, i32, i32, i32 } %452, 3, !dbg !37
  %457 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %295, !dbg !37
  %458 = ptrtoint ptr addrspace(3) %457 to i32, !dbg !37
  %459 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %458) #1, !dbg !37
  %460 = extractvalue { i32, i32, i32, i32 } %459, 0, !dbg !37
  %461 = extractvalue { i32, i32, i32, i32 } %459, 1, !dbg !37
  %462 = extractvalue { i32, i32, i32, i32 } %459, 2, !dbg !37
  %463 = extractvalue { i32, i32, i32, i32 } %459, 3, !dbg !37
  %464 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %296, !dbg !37
  %465 = ptrtoint ptr addrspace(3) %464 to i32, !dbg !37
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %465) #1, !dbg !37
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !37
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !37
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !37
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !37
  %471 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %365, i32 %297, !dbg !37
  %472 = ptrtoint ptr addrspace(3) %471 to i32, !dbg !37
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %472) #1, !dbg !37
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !37
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !37
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !37
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !37
  %478 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %364, !dbg !38
  %479 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %303, !dbg !38
  %480 = ptrtoint ptr addrspace(3) %479 to i32, !dbg !38
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %480) #1, !dbg !38
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !38
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !38
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !38
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !38
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %305, !dbg !38
  %487 = ptrtoint ptr addrspace(3) %486 to i32, !dbg !38
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %487) #1, !dbg !38
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !38
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !38
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !38
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !38
  %493 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %307, !dbg !38
  %494 = ptrtoint ptr addrspace(3) %493 to i32, !dbg !38
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %494) #1, !dbg !38
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !38
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !38
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !38
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !38
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %309, !dbg !38
  %501 = ptrtoint ptr addrspace(3) %500 to i32, !dbg !38
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %501) #1, !dbg !38
  %503 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !38
  %504 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !38
  %505 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !38
  %506 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !38
  %507 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %311, !dbg !38
  %508 = ptrtoint ptr addrspace(3) %507 to i32, !dbg !38
  %509 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %508) #1, !dbg !38
  %510 = extractvalue { i32, i32, i32, i32 } %509, 0, !dbg !38
  %511 = extractvalue { i32, i32, i32, i32 } %509, 1, !dbg !38
  %512 = extractvalue { i32, i32, i32, i32 } %509, 2, !dbg !38
  %513 = extractvalue { i32, i32, i32, i32 } %509, 3, !dbg !38
  %514 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %312, !dbg !38
  %515 = ptrtoint ptr addrspace(3) %514 to i32, !dbg !38
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %515) #1, !dbg !38
  %517 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !38
  %518 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !38
  %519 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !38
  %520 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !38
  %521 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %313, !dbg !38
  %522 = ptrtoint ptr addrspace(3) %521 to i32, !dbg !38
  %523 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %522) #1, !dbg !38
  %524 = extractvalue { i32, i32, i32, i32 } %523, 0, !dbg !38
  %525 = extractvalue { i32, i32, i32, i32 } %523, 1, !dbg !38
  %526 = extractvalue { i32, i32, i32, i32 } %523, 2, !dbg !38
  %527 = extractvalue { i32, i32, i32, i32 } %523, 3, !dbg !38
  %528 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %314, !dbg !38
  %529 = ptrtoint ptr addrspace(3) %528 to i32, !dbg !38
  %530 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %529) #1, !dbg !38
  %531 = extractvalue { i32, i32, i32, i32 } %530, 0, !dbg !38
  %532 = extractvalue { i32, i32, i32, i32 } %530, 1, !dbg !38
  %533 = extractvalue { i32, i32, i32, i32 } %530, 2, !dbg !38
  %534 = extractvalue { i32, i32, i32, i32 } %530, 3, !dbg !38
  %535 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %316, !dbg !38
  %536 = ptrtoint ptr addrspace(3) %535 to i32, !dbg !38
  %537 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %536) #1, !dbg !38
  %538 = extractvalue { i32, i32, i32, i32 } %537, 0, !dbg !38
  %539 = extractvalue { i32, i32, i32, i32 } %537, 1, !dbg !38
  %540 = extractvalue { i32, i32, i32, i32 } %537, 2, !dbg !38
  %541 = extractvalue { i32, i32, i32, i32 } %537, 3, !dbg !38
  %542 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %317, !dbg !38
  %543 = ptrtoint ptr addrspace(3) %542 to i32, !dbg !38
  %544 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %543) #1, !dbg !38
  %545 = extractvalue { i32, i32, i32, i32 } %544, 0, !dbg !38
  %546 = extractvalue { i32, i32, i32, i32 } %544, 1, !dbg !38
  %547 = extractvalue { i32, i32, i32, i32 } %544, 2, !dbg !38
  %548 = extractvalue { i32, i32, i32, i32 } %544, 3, !dbg !38
  %549 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %318, !dbg !38
  %550 = ptrtoint ptr addrspace(3) %549 to i32, !dbg !38
  %551 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %550) #1, !dbg !38
  %552 = extractvalue { i32, i32, i32, i32 } %551, 0, !dbg !38
  %553 = extractvalue { i32, i32, i32, i32 } %551, 1, !dbg !38
  %554 = extractvalue { i32, i32, i32, i32 } %551, 2, !dbg !38
  %555 = extractvalue { i32, i32, i32, i32 } %551, 3, !dbg !38
  %556 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %319, !dbg !38
  %557 = ptrtoint ptr addrspace(3) %556 to i32, !dbg !38
  %558 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %557) #1, !dbg !38
  %559 = extractvalue { i32, i32, i32, i32 } %558, 0, !dbg !38
  %560 = extractvalue { i32, i32, i32, i32 } %558, 1, !dbg !38
  %561 = extractvalue { i32, i32, i32, i32 } %558, 2, !dbg !38
  %562 = extractvalue { i32, i32, i32, i32 } %558, 3, !dbg !38
  %563 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %321, !dbg !38
  %564 = ptrtoint ptr addrspace(3) %563 to i32, !dbg !38
  %565 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %564) #1, !dbg !38
  %566 = extractvalue { i32, i32, i32, i32 } %565, 0, !dbg !38
  %567 = extractvalue { i32, i32, i32, i32 } %565, 1, !dbg !38
  %568 = extractvalue { i32, i32, i32, i32 } %565, 2, !dbg !38
  %569 = extractvalue { i32, i32, i32, i32 } %565, 3, !dbg !38
  %570 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %322, !dbg !38
  %571 = ptrtoint ptr addrspace(3) %570 to i32, !dbg !38
  %572 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %571) #1, !dbg !38
  %573 = extractvalue { i32, i32, i32, i32 } %572, 0, !dbg !38
  %574 = extractvalue { i32, i32, i32, i32 } %572, 1, !dbg !38
  %575 = extractvalue { i32, i32, i32, i32 } %572, 2, !dbg !38
  %576 = extractvalue { i32, i32, i32, i32 } %572, 3, !dbg !38
  %577 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %323, !dbg !38
  %578 = ptrtoint ptr addrspace(3) %577 to i32, !dbg !38
  %579 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %578) #1, !dbg !38
  %580 = extractvalue { i32, i32, i32, i32 } %579, 0, !dbg !38
  %581 = extractvalue { i32, i32, i32, i32 } %579, 1, !dbg !38
  %582 = extractvalue { i32, i32, i32, i32 } %579, 2, !dbg !38
  %583 = extractvalue { i32, i32, i32, i32 } %579, 3, !dbg !38
  %584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %478, i32 %324, !dbg !38
  %585 = ptrtoint ptr addrspace(3) %584 to i32, !dbg !38
  %586 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %585) #1, !dbg !38
  %587 = extractvalue { i32, i32, i32, i32 } %586, 0, !dbg !38
  %588 = extractvalue { i32, i32, i32, i32 } %586, 1, !dbg !38
  %589 = extractvalue { i32, i32, i32, i32 } %586, 2, !dbg !38
  %590 = extractvalue { i32, i32, i32, i32 } %586, 3, !dbg !38
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %328, float %329, float %330, float %331, i32 %369, i32 %370, i32 %371, i32 %372, i32 %482, i32 %483) #1, !dbg !42
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !42
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !42
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !42
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !42
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %332, float %333, float %334, float %335, i32 %369, i32 %370, i32 %371, i32 %372, i32 %510, i32 %511) #1, !dbg !42
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !42
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !42
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !42
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !42
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %336, float %337, float %338, float %339, i32 %369, i32 %370, i32 %371, i32 %372, i32 %538, i32 %539) #1, !dbg !42
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !42
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !42
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !42
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !42
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %340, float %341, float %342, float %343, i32 %369, i32 %370, i32 %371, i32 %372, i32 %566, i32 %567) #1, !dbg !42
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !42
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !42
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !42
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !42
  %611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %425, i32 %426, i32 %427, i32 %428, i32 %482, i32 %483) #1, !dbg !42
  %612 = extractvalue { float, float, float, float } %611, 0, !dbg !42
  %613 = extractvalue { float, float, float, float } %611, 1, !dbg !42
  %614 = extractvalue { float, float, float, float } %611, 2, !dbg !42
  %615 = extractvalue { float, float, float, float } %611, 3, !dbg !42
  %616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %348, float %349, float %350, float %351, i32 %425, i32 %426, i32 %427, i32 %428, i32 %510, i32 %511) #1, !dbg !42
  %617 = extractvalue { float, float, float, float } %616, 0, !dbg !42
  %618 = extractvalue { float, float, float, float } %616, 1, !dbg !42
  %619 = extractvalue { float, float, float, float } %616, 2, !dbg !42
  %620 = extractvalue { float, float, float, float } %616, 3, !dbg !42
  %621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %352, float %353, float %354, float %355, i32 %425, i32 %426, i32 %427, i32 %428, i32 %538, i32 %539) #1, !dbg !42
  %622 = extractvalue { float, float, float, float } %621, 0, !dbg !42
  %623 = extractvalue { float, float, float, float } %621, 1, !dbg !42
  %624 = extractvalue { float, float, float, float } %621, 2, !dbg !42
  %625 = extractvalue { float, float, float, float } %621, 3, !dbg !42
  %626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %356, float %357, float %358, float %359, i32 %425, i32 %426, i32 %427, i32 %428, i32 %566, i32 %567) #1, !dbg !42
  %627 = extractvalue { float, float, float, float } %626, 0, !dbg !42
  %628 = extractvalue { float, float, float, float } %626, 1, !dbg !42
  %629 = extractvalue { float, float, float, float } %626, 2, !dbg !42
  %630 = extractvalue { float, float, float, float } %626, 3, !dbg !42
  %631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %592, float %593, float %594, float %595, i32 %376, i32 %377, i32 %378, i32 %379, i32 %484, i32 %485) #1, !dbg !42
  %632 = extractvalue { float, float, float, float } %631, 0, !dbg !42
  %633 = extractvalue { float, float, float, float } %631, 1, !dbg !42
  %634 = extractvalue { float, float, float, float } %631, 2, !dbg !42
  %635 = extractvalue { float, float, float, float } %631, 3, !dbg !42
  %636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %597, float %598, float %599, float %600, i32 %376, i32 %377, i32 %378, i32 %379, i32 %512, i32 %513) #1, !dbg !42
  %637 = extractvalue { float, float, float, float } %636, 0, !dbg !42
  %638 = extractvalue { float, float, float, float } %636, 1, !dbg !42
  %639 = extractvalue { float, float, float, float } %636, 2, !dbg !42
  %640 = extractvalue { float, float, float, float } %636, 3, !dbg !42
  %641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %376, i32 %377, i32 %378, i32 %379, i32 %540, i32 %541) #1, !dbg !42
  %642 = extractvalue { float, float, float, float } %641, 0, !dbg !42
  %643 = extractvalue { float, float, float, float } %641, 1, !dbg !42
  %644 = extractvalue { float, float, float, float } %641, 2, !dbg !42
  %645 = extractvalue { float, float, float, float } %641, 3, !dbg !42
  %646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %607, float %608, float %609, float %610, i32 %376, i32 %377, i32 %378, i32 %379, i32 %568, i32 %569) #1, !dbg !42
  %647 = extractvalue { float, float, float, float } %646, 0, !dbg !42
  %648 = extractvalue { float, float, float, float } %646, 1, !dbg !42
  %649 = extractvalue { float, float, float, float } %646, 2, !dbg !42
  %650 = extractvalue { float, float, float, float } %646, 3, !dbg !42
  %651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %612, float %613, float %614, float %615, i32 %432, i32 %433, i32 %434, i32 %435, i32 %484, i32 %485) #1, !dbg !42
  %652 = extractvalue { float, float, float, float } %651, 0, !dbg !42
  %653 = extractvalue { float, float, float, float } %651, 1, !dbg !42
  %654 = extractvalue { float, float, float, float } %651, 2, !dbg !42
  %655 = extractvalue { float, float, float, float } %651, 3, !dbg !42
  %656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %617, float %618, float %619, float %620, i32 %432, i32 %433, i32 %434, i32 %435, i32 %512, i32 %513) #1, !dbg !42
  %657 = extractvalue { float, float, float, float } %656, 0, !dbg !42
  %658 = extractvalue { float, float, float, float } %656, 1, !dbg !42
  %659 = extractvalue { float, float, float, float } %656, 2, !dbg !42
  %660 = extractvalue { float, float, float, float } %656, 3, !dbg !42
  %661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %622, float %623, float %624, float %625, i32 %432, i32 %433, i32 %434, i32 %435, i32 %540, i32 %541) #1, !dbg !42
  %662 = extractvalue { float, float, float, float } %661, 0, !dbg !42
  %663 = extractvalue { float, float, float, float } %661, 1, !dbg !42
  %664 = extractvalue { float, float, float, float } %661, 2, !dbg !42
  %665 = extractvalue { float, float, float, float } %661, 3, !dbg !42
  %666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %627, float %628, float %629, float %630, i32 %432, i32 %433, i32 %434, i32 %435, i32 %568, i32 %569) #1, !dbg !42
  %667 = extractvalue { float, float, float, float } %666, 0, !dbg !42
  %668 = extractvalue { float, float, float, float } %666, 1, !dbg !42
  %669 = extractvalue { float, float, float, float } %666, 2, !dbg !42
  %670 = extractvalue { float, float, float, float } %666, 3, !dbg !42
  %671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %632, float %633, float %634, float %635, i32 %383, i32 %384, i32 %385, i32 %386, i32 %489, i32 %490) #1, !dbg !42
  %672 = extractvalue { float, float, float, float } %671, 0, !dbg !42
  %673 = extractvalue { float, float, float, float } %671, 1, !dbg !42
  %674 = extractvalue { float, float, float, float } %671, 2, !dbg !42
  %675 = extractvalue { float, float, float, float } %671, 3, !dbg !42
  %676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %637, float %638, float %639, float %640, i32 %383, i32 %384, i32 %385, i32 %386, i32 %517, i32 %518) #1, !dbg !42
  %677 = extractvalue { float, float, float, float } %676, 0, !dbg !42
  %678 = extractvalue { float, float, float, float } %676, 1, !dbg !42
  %679 = extractvalue { float, float, float, float } %676, 2, !dbg !42
  %680 = extractvalue { float, float, float, float } %676, 3, !dbg !42
  %681 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %642, float %643, float %644, float %645, i32 %383, i32 %384, i32 %385, i32 %386, i32 %545, i32 %546) #1, !dbg !42
  %682 = extractvalue { float, float, float, float } %681, 0, !dbg !42
  %683 = extractvalue { float, float, float, float } %681, 1, !dbg !42
  %684 = extractvalue { float, float, float, float } %681, 2, !dbg !42
  %685 = extractvalue { float, float, float, float } %681, 3, !dbg !42
  %686 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %647, float %648, float %649, float %650, i32 %383, i32 %384, i32 %385, i32 %386, i32 %573, i32 %574) #1, !dbg !42
  %687 = extractvalue { float, float, float, float } %686, 0, !dbg !42
  %688 = extractvalue { float, float, float, float } %686, 1, !dbg !42
  %689 = extractvalue { float, float, float, float } %686, 2, !dbg !42
  %690 = extractvalue { float, float, float, float } %686, 3, !dbg !42
  %691 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %652, float %653, float %654, float %655, i32 %439, i32 %440, i32 %441, i32 %442, i32 %489, i32 %490) #1, !dbg !42
  %692 = extractvalue { float, float, float, float } %691, 0, !dbg !42
  %693 = extractvalue { float, float, float, float } %691, 1, !dbg !42
  %694 = extractvalue { float, float, float, float } %691, 2, !dbg !42
  %695 = extractvalue { float, float, float, float } %691, 3, !dbg !42
  %696 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %657, float %658, float %659, float %660, i32 %439, i32 %440, i32 %441, i32 %442, i32 %517, i32 %518) #1, !dbg !42
  %697 = extractvalue { float, float, float, float } %696, 0, !dbg !42
  %698 = extractvalue { float, float, float, float } %696, 1, !dbg !42
  %699 = extractvalue { float, float, float, float } %696, 2, !dbg !42
  %700 = extractvalue { float, float, float, float } %696, 3, !dbg !42
  %701 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %662, float %663, float %664, float %665, i32 %439, i32 %440, i32 %441, i32 %442, i32 %545, i32 %546) #1, !dbg !42
  %702 = extractvalue { float, float, float, float } %701, 0, !dbg !42
  %703 = extractvalue { float, float, float, float } %701, 1, !dbg !42
  %704 = extractvalue { float, float, float, float } %701, 2, !dbg !42
  %705 = extractvalue { float, float, float, float } %701, 3, !dbg !42
  %706 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %667, float %668, float %669, float %670, i32 %439, i32 %440, i32 %441, i32 %442, i32 %573, i32 %574) #1, !dbg !42
  %707 = extractvalue { float, float, float, float } %706, 0, !dbg !42
  %708 = extractvalue { float, float, float, float } %706, 1, !dbg !42
  %709 = extractvalue { float, float, float, float } %706, 2, !dbg !42
  %710 = extractvalue { float, float, float, float } %706, 3, !dbg !42
  %711 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %672, float %673, float %674, float %675, i32 %390, i32 %391, i32 %392, i32 %393, i32 %491, i32 %492) #1, !dbg !42
  %712 = extractvalue { float, float, float, float } %711, 0, !dbg !42
  %713 = extractvalue { float, float, float, float } %711, 1, !dbg !42
  %714 = extractvalue { float, float, float, float } %711, 2, !dbg !42
  %715 = extractvalue { float, float, float, float } %711, 3, !dbg !42
  %716 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %677, float %678, float %679, float %680, i32 %390, i32 %391, i32 %392, i32 %393, i32 %519, i32 %520) #1, !dbg !42
  %717 = extractvalue { float, float, float, float } %716, 0, !dbg !42
  %718 = extractvalue { float, float, float, float } %716, 1, !dbg !42
  %719 = extractvalue { float, float, float, float } %716, 2, !dbg !42
  %720 = extractvalue { float, float, float, float } %716, 3, !dbg !42
  %721 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %682, float %683, float %684, float %685, i32 %390, i32 %391, i32 %392, i32 %393, i32 %547, i32 %548) #1, !dbg !42
  %722 = extractvalue { float, float, float, float } %721, 0, !dbg !42
  %723 = extractvalue { float, float, float, float } %721, 1, !dbg !42
  %724 = extractvalue { float, float, float, float } %721, 2, !dbg !42
  %725 = extractvalue { float, float, float, float } %721, 3, !dbg !42
  %726 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %687, float %688, float %689, float %690, i32 %390, i32 %391, i32 %392, i32 %393, i32 %575, i32 %576) #1, !dbg !42
  %727 = extractvalue { float, float, float, float } %726, 0, !dbg !42
  %728 = extractvalue { float, float, float, float } %726, 1, !dbg !42
  %729 = extractvalue { float, float, float, float } %726, 2, !dbg !42
  %730 = extractvalue { float, float, float, float } %726, 3, !dbg !42
  %731 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %692, float %693, float %694, float %695, i32 %446, i32 %447, i32 %448, i32 %449, i32 %491, i32 %492) #1, !dbg !42
  %732 = extractvalue { float, float, float, float } %731, 0, !dbg !42
  %733 = extractvalue { float, float, float, float } %731, 1, !dbg !42
  %734 = extractvalue { float, float, float, float } %731, 2, !dbg !42
  %735 = extractvalue { float, float, float, float } %731, 3, !dbg !42
  %736 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %697, float %698, float %699, float %700, i32 %446, i32 %447, i32 %448, i32 %449, i32 %519, i32 %520) #1, !dbg !42
  %737 = extractvalue { float, float, float, float } %736, 0, !dbg !42
  %738 = extractvalue { float, float, float, float } %736, 1, !dbg !42
  %739 = extractvalue { float, float, float, float } %736, 2, !dbg !42
  %740 = extractvalue { float, float, float, float } %736, 3, !dbg !42
  %741 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %702, float %703, float %704, float %705, i32 %446, i32 %447, i32 %448, i32 %449, i32 %547, i32 %548) #1, !dbg !42
  %742 = extractvalue { float, float, float, float } %741, 0, !dbg !42
  %743 = extractvalue { float, float, float, float } %741, 1, !dbg !42
  %744 = extractvalue { float, float, float, float } %741, 2, !dbg !42
  %745 = extractvalue { float, float, float, float } %741, 3, !dbg !42
  %746 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %707, float %708, float %709, float %710, i32 %446, i32 %447, i32 %448, i32 %449, i32 %575, i32 %576) #1, !dbg !42
  %747 = extractvalue { float, float, float, float } %746, 0, !dbg !42
  %748 = extractvalue { float, float, float, float } %746, 1, !dbg !42
  %749 = extractvalue { float, float, float, float } %746, 2, !dbg !42
  %750 = extractvalue { float, float, float, float } %746, 3, !dbg !42
  %751 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %712, float %713, float %714, float %715, i32 %397, i32 %398, i32 %399, i32 %400, i32 %496, i32 %497) #1, !dbg !42
  %752 = extractvalue { float, float, float, float } %751, 0, !dbg !42
  %753 = extractvalue { float, float, float, float } %751, 1, !dbg !42
  %754 = extractvalue { float, float, float, float } %751, 2, !dbg !42
  %755 = extractvalue { float, float, float, float } %751, 3, !dbg !42
  %756 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %717, float %718, float %719, float %720, i32 %397, i32 %398, i32 %399, i32 %400, i32 %524, i32 %525) #1, !dbg !42
  %757 = extractvalue { float, float, float, float } %756, 0, !dbg !42
  %758 = extractvalue { float, float, float, float } %756, 1, !dbg !42
  %759 = extractvalue { float, float, float, float } %756, 2, !dbg !42
  %760 = extractvalue { float, float, float, float } %756, 3, !dbg !42
  %761 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %722, float %723, float %724, float %725, i32 %397, i32 %398, i32 %399, i32 %400, i32 %552, i32 %553) #1, !dbg !42
  %762 = extractvalue { float, float, float, float } %761, 0, !dbg !42
  %763 = extractvalue { float, float, float, float } %761, 1, !dbg !42
  %764 = extractvalue { float, float, float, float } %761, 2, !dbg !42
  %765 = extractvalue { float, float, float, float } %761, 3, !dbg !42
  %766 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %727, float %728, float %729, float %730, i32 %397, i32 %398, i32 %399, i32 %400, i32 %580, i32 %581) #1, !dbg !42
  %767 = extractvalue { float, float, float, float } %766, 0, !dbg !42
  %768 = extractvalue { float, float, float, float } %766, 1, !dbg !42
  %769 = extractvalue { float, float, float, float } %766, 2, !dbg !42
  %770 = extractvalue { float, float, float, float } %766, 3, !dbg !42
  %771 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %732, float %733, float %734, float %735, i32 %453, i32 %454, i32 %455, i32 %456, i32 %496, i32 %497) #1, !dbg !42
  %772 = extractvalue { float, float, float, float } %771, 0, !dbg !42
  %773 = extractvalue { float, float, float, float } %771, 1, !dbg !42
  %774 = extractvalue { float, float, float, float } %771, 2, !dbg !42
  %775 = extractvalue { float, float, float, float } %771, 3, !dbg !42
  %776 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %737, float %738, float %739, float %740, i32 %453, i32 %454, i32 %455, i32 %456, i32 %524, i32 %525) #1, !dbg !42
  %777 = extractvalue { float, float, float, float } %776, 0, !dbg !42
  %778 = extractvalue { float, float, float, float } %776, 1, !dbg !42
  %779 = extractvalue { float, float, float, float } %776, 2, !dbg !42
  %780 = extractvalue { float, float, float, float } %776, 3, !dbg !42
  %781 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %742, float %743, float %744, float %745, i32 %453, i32 %454, i32 %455, i32 %456, i32 %552, i32 %553) #1, !dbg !42
  %782 = extractvalue { float, float, float, float } %781, 0, !dbg !42
  %783 = extractvalue { float, float, float, float } %781, 1, !dbg !42
  %784 = extractvalue { float, float, float, float } %781, 2, !dbg !42
  %785 = extractvalue { float, float, float, float } %781, 3, !dbg !42
  %786 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %747, float %748, float %749, float %750, i32 %453, i32 %454, i32 %455, i32 %456, i32 %580, i32 %581) #1, !dbg !42
  %787 = extractvalue { float, float, float, float } %786, 0, !dbg !42
  %788 = extractvalue { float, float, float, float } %786, 1, !dbg !42
  %789 = extractvalue { float, float, float, float } %786, 2, !dbg !42
  %790 = extractvalue { float, float, float, float } %786, 3, !dbg !42
  %791 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %752, float %753, float %754, float %755, i32 %404, i32 %405, i32 %406, i32 %407, i32 %498, i32 %499) #1, !dbg !42
  %792 = extractvalue { float, float, float, float } %791, 0, !dbg !42
  %793 = extractvalue { float, float, float, float } %791, 1, !dbg !42
  %794 = extractvalue { float, float, float, float } %791, 2, !dbg !42
  %795 = extractvalue { float, float, float, float } %791, 3, !dbg !42
  %796 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %757, float %758, float %759, float %760, i32 %404, i32 %405, i32 %406, i32 %407, i32 %526, i32 %527) #1, !dbg !42
  %797 = extractvalue { float, float, float, float } %796, 0, !dbg !42
  %798 = extractvalue { float, float, float, float } %796, 1, !dbg !42
  %799 = extractvalue { float, float, float, float } %796, 2, !dbg !42
  %800 = extractvalue { float, float, float, float } %796, 3, !dbg !42
  %801 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %762, float %763, float %764, float %765, i32 %404, i32 %405, i32 %406, i32 %407, i32 %554, i32 %555) #1, !dbg !42
  %802 = extractvalue { float, float, float, float } %801, 0, !dbg !42
  %803 = extractvalue { float, float, float, float } %801, 1, !dbg !42
  %804 = extractvalue { float, float, float, float } %801, 2, !dbg !42
  %805 = extractvalue { float, float, float, float } %801, 3, !dbg !42
  %806 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %767, float %768, float %769, float %770, i32 %404, i32 %405, i32 %406, i32 %407, i32 %582, i32 %583) #1, !dbg !42
  %807 = extractvalue { float, float, float, float } %806, 0, !dbg !42
  %808 = extractvalue { float, float, float, float } %806, 1, !dbg !42
  %809 = extractvalue { float, float, float, float } %806, 2, !dbg !42
  %810 = extractvalue { float, float, float, float } %806, 3, !dbg !42
  %811 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %772, float %773, float %774, float %775, i32 %460, i32 %461, i32 %462, i32 %463, i32 %498, i32 %499) #1, !dbg !42
  %812 = extractvalue { float, float, float, float } %811, 0, !dbg !42
  %813 = extractvalue { float, float, float, float } %811, 1, !dbg !42
  %814 = extractvalue { float, float, float, float } %811, 2, !dbg !42
  %815 = extractvalue { float, float, float, float } %811, 3, !dbg !42
  %816 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %777, float %778, float %779, float %780, i32 %460, i32 %461, i32 %462, i32 %463, i32 %526, i32 %527) #1, !dbg !42
  %817 = extractvalue { float, float, float, float } %816, 0, !dbg !42
  %818 = extractvalue { float, float, float, float } %816, 1, !dbg !42
  %819 = extractvalue { float, float, float, float } %816, 2, !dbg !42
  %820 = extractvalue { float, float, float, float } %816, 3, !dbg !42
  %821 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %782, float %783, float %784, float %785, i32 %460, i32 %461, i32 %462, i32 %463, i32 %554, i32 %555) #1, !dbg !42
  %822 = extractvalue { float, float, float, float } %821, 0, !dbg !42
  %823 = extractvalue { float, float, float, float } %821, 1, !dbg !42
  %824 = extractvalue { float, float, float, float } %821, 2, !dbg !42
  %825 = extractvalue { float, float, float, float } %821, 3, !dbg !42
  %826 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %787, float %788, float %789, float %790, i32 %460, i32 %461, i32 %462, i32 %463, i32 %582, i32 %583) #1, !dbg !42
  %827 = extractvalue { float, float, float, float } %826, 0, !dbg !42
  %828 = extractvalue { float, float, float, float } %826, 1, !dbg !42
  %829 = extractvalue { float, float, float, float } %826, 2, !dbg !42
  %830 = extractvalue { float, float, float, float } %826, 3, !dbg !42
  %831 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %792, float %793, float %794, float %795, i32 %411, i32 %412, i32 %413, i32 %414, i32 %503, i32 %504) #1, !dbg !42
  %832 = extractvalue { float, float, float, float } %831, 0, !dbg !42
  %833 = extractvalue { float, float, float, float } %831, 1, !dbg !42
  %834 = extractvalue { float, float, float, float } %831, 2, !dbg !42
  %835 = extractvalue { float, float, float, float } %831, 3, !dbg !42
  %836 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %797, float %798, float %799, float %800, i32 %411, i32 %412, i32 %413, i32 %414, i32 %531, i32 %532) #1, !dbg !42
  %837 = extractvalue { float, float, float, float } %836, 0, !dbg !42
  %838 = extractvalue { float, float, float, float } %836, 1, !dbg !42
  %839 = extractvalue { float, float, float, float } %836, 2, !dbg !42
  %840 = extractvalue { float, float, float, float } %836, 3, !dbg !42
  %841 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %802, float %803, float %804, float %805, i32 %411, i32 %412, i32 %413, i32 %414, i32 %559, i32 %560) #1, !dbg !42
  %842 = extractvalue { float, float, float, float } %841, 0, !dbg !42
  %843 = extractvalue { float, float, float, float } %841, 1, !dbg !42
  %844 = extractvalue { float, float, float, float } %841, 2, !dbg !42
  %845 = extractvalue { float, float, float, float } %841, 3, !dbg !42
  %846 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %807, float %808, float %809, float %810, i32 %411, i32 %412, i32 %413, i32 %414, i32 %587, i32 %588) #1, !dbg !42
  %847 = extractvalue { float, float, float, float } %846, 0, !dbg !42
  %848 = extractvalue { float, float, float, float } %846, 1, !dbg !42
  %849 = extractvalue { float, float, float, float } %846, 2, !dbg !42
  %850 = extractvalue { float, float, float, float } %846, 3, !dbg !42
  %851 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %812, float %813, float %814, float %815, i32 %467, i32 %468, i32 %469, i32 %470, i32 %503, i32 %504) #1, !dbg !42
  %852 = extractvalue { float, float, float, float } %851, 0, !dbg !42
  %853 = extractvalue { float, float, float, float } %851, 1, !dbg !42
  %854 = extractvalue { float, float, float, float } %851, 2, !dbg !42
  %855 = extractvalue { float, float, float, float } %851, 3, !dbg !42
  %856 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %817, float %818, float %819, float %820, i32 %467, i32 %468, i32 %469, i32 %470, i32 %531, i32 %532) #1, !dbg !42
  %857 = extractvalue { float, float, float, float } %856, 0, !dbg !42
  %858 = extractvalue { float, float, float, float } %856, 1, !dbg !42
  %859 = extractvalue { float, float, float, float } %856, 2, !dbg !42
  %860 = extractvalue { float, float, float, float } %856, 3, !dbg !42
  %861 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %822, float %823, float %824, float %825, i32 %467, i32 %468, i32 %469, i32 %470, i32 %559, i32 %560) #1, !dbg !42
  %862 = extractvalue { float, float, float, float } %861, 0, !dbg !42
  %863 = extractvalue { float, float, float, float } %861, 1, !dbg !42
  %864 = extractvalue { float, float, float, float } %861, 2, !dbg !42
  %865 = extractvalue { float, float, float, float } %861, 3, !dbg !42
  %866 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %827, float %828, float %829, float %830, i32 %467, i32 %468, i32 %469, i32 %470, i32 %587, i32 %588) #1, !dbg !42
  %867 = extractvalue { float, float, float, float } %866, 0, !dbg !42
  %868 = extractvalue { float, float, float, float } %866, 1, !dbg !42
  %869 = extractvalue { float, float, float, float } %866, 2, !dbg !42
  %870 = extractvalue { float, float, float, float } %866, 3, !dbg !42
  %871 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %832, float %833, float %834, float %835, i32 %418, i32 %419, i32 %420, i32 %421, i32 %505, i32 %506) #1, !dbg !42
  %872 = extractvalue { float, float, float, float } %871, 0, !dbg !42
  %873 = extractvalue { float, float, float, float } %871, 1, !dbg !42
  %874 = extractvalue { float, float, float, float } %871, 2, !dbg !42
  %875 = extractvalue { float, float, float, float } %871, 3, !dbg !42
  %876 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %837, float %838, float %839, float %840, i32 %418, i32 %419, i32 %420, i32 %421, i32 %533, i32 %534) #1, !dbg !42
  %877 = extractvalue { float, float, float, float } %876, 0, !dbg !42
  %878 = extractvalue { float, float, float, float } %876, 1, !dbg !42
  %879 = extractvalue { float, float, float, float } %876, 2, !dbg !42
  %880 = extractvalue { float, float, float, float } %876, 3, !dbg !42
  %881 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %842, float %843, float %844, float %845, i32 %418, i32 %419, i32 %420, i32 %421, i32 %561, i32 %562) #1, !dbg !42
  %882 = extractvalue { float, float, float, float } %881, 0, !dbg !42
  %883 = extractvalue { float, float, float, float } %881, 1, !dbg !42
  %884 = extractvalue { float, float, float, float } %881, 2, !dbg !42
  %885 = extractvalue { float, float, float, float } %881, 3, !dbg !42
  %886 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %847, float %848, float %849, float %850, i32 %418, i32 %419, i32 %420, i32 %421, i32 %589, i32 %590) #1, !dbg !42
  %887 = extractvalue { float, float, float, float } %886, 0, !dbg !42
  %888 = extractvalue { float, float, float, float } %886, 1, !dbg !42
  %889 = extractvalue { float, float, float, float } %886, 2, !dbg !42
  %890 = extractvalue { float, float, float, float } %886, 3, !dbg !42
  %891 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %852, float %853, float %854, float %855, i32 %474, i32 %475, i32 %476, i32 %477, i32 %505, i32 %506) #1, !dbg !42
  %892 = extractvalue { float, float, float, float } %891, 0, !dbg !42
  %893 = extractvalue { float, float, float, float } %891, 1, !dbg !42
  %894 = extractvalue { float, float, float, float } %891, 2, !dbg !42
  %895 = extractvalue { float, float, float, float } %891, 3, !dbg !42
  %896 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %857, float %858, float %859, float %860, i32 %474, i32 %475, i32 %476, i32 %477, i32 %533, i32 %534) #1, !dbg !42
  %897 = extractvalue { float, float, float, float } %896, 0, !dbg !42
  %898 = extractvalue { float, float, float, float } %896, 1, !dbg !42
  %899 = extractvalue { float, float, float, float } %896, 2, !dbg !42
  %900 = extractvalue { float, float, float, float } %896, 3, !dbg !42
  %901 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %862, float %863, float %864, float %865, i32 %474, i32 %475, i32 %476, i32 %477, i32 %561, i32 %562) #1, !dbg !42
  %902 = extractvalue { float, float, float, float } %901, 0, !dbg !42
  %903 = extractvalue { float, float, float, float } %901, 1, !dbg !42
  %904 = extractvalue { float, float, float, float } %901, 2, !dbg !42
  %905 = extractvalue { float, float, float, float } %901, 3, !dbg !42
  %906 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %867, float %868, float %869, float %870, i32 %474, i32 %475, i32 %476, i32 %477, i32 %589, i32 %590) #1, !dbg !42
  %907 = extractvalue { float, float, float, float } %906, 0, !dbg !42
  %908 = extractvalue { float, float, float, float } %906, 1, !dbg !42
  %909 = extractvalue { float, float, float, float } %906, 2, !dbg !42
  %910 = extractvalue { float, float, float, float } %906, 3, !dbg !42
  %911 = getelementptr i8, ptr addrspace(1) %.pn129340, i64 256, !dbg !39
  %912 = getelementptr i8, ptr addrspace(1) %.pn113341, i64 256, !dbg !39
  %913 = getelementptr i8, ptr addrspace(1) %.pn97342, i64 256, !dbg !39
  %914 = getelementptr i8, ptr addrspace(1) %.pn81343, i64 256, !dbg !39
  %915 = getelementptr i8, ptr addrspace(1) %.pn65344, i64 256, !dbg !39
  %916 = getelementptr i8, ptr addrspace(1) %.pn49345, i64 256, !dbg !39
  %917 = getelementptr i8, ptr addrspace(1) %.pn33346, i64 256, !dbg !39
  %918 = getelementptr i8, ptr addrspace(1) %.pn17347, i64 256, !dbg !39
  %919 = getelementptr i8, ptr addrspace(1) %.pn257348, i64 1048576, !dbg !40
  %920 = getelementptr i8, ptr addrspace(1) %.pn241349, i64 1048576, !dbg !40
  %921 = getelementptr i8, ptr addrspace(1) %.pn225350, i64 1048576, !dbg !40
  %922 = getelementptr i8, ptr addrspace(1) %.pn209351, i64 1048576, !dbg !40
  %923 = getelementptr i8, ptr addrspace(1) %.pn193352, i64 1048576, !dbg !40
  %924 = getelementptr i8, ptr addrspace(1) %.pn177353, i64 1048576, !dbg !40
  %925 = getelementptr i8, ptr addrspace(1) %.pn161354, i64 1048576, !dbg !40
  %926 = getelementptr i8, ptr addrspace(1) %.pn145355, i64 1048576, !dbg !40
  %927 = add i32 %327, 1, !dbg !41
  %928 = icmp slt i32 %927, 4, !dbg !41
  %929 = select i1 %928, i32 %927, i32 0, !dbg !41
  %930 = shl i32 %929, 13, !dbg !37
  %931 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %930, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %932 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %124, !dbg !37
  %933 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %126, !dbg !37
  %934 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %128, !dbg !37
  %935 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %130, !dbg !37
  %936 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %132, !dbg !37
  %937 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %134, !dbg !37
  %938 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %136, !dbg !37
  %939 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %931, i32 %138, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %932, ptr addrspace(1) %911, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %933, ptr addrspace(1) %912, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %934, ptr addrspace(1) %913, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %935, ptr addrspace(1) %914, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %936, ptr addrspace(1) %915, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %937, ptr addrspace(1) %916, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %938, ptr addrspace(1) %917, i32 0) #1, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %939, ptr addrspace(1) %918, i32 0) #1, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %940 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %930, !dbg !38
  %941 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %143, !dbg !38
  %942 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %145, !dbg !38
  %943 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %147, !dbg !38
  %944 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %149, !dbg !38
  %945 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %151, !dbg !38
  %946 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %153, !dbg !38
  %947 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %155, !dbg !38
  %948 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %940, i32 %157, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %941, ptr addrspace(1) %919, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %942, ptr addrspace(1) %920, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %943, ptr addrspace(1) %921, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %944, ptr addrspace(1) %922, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %945, ptr addrspace(1) %923, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %946, ptr addrspace(1) %924, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %947, ptr addrspace(1) %925, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %948, ptr addrspace(1) %926, i32 0) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %949 = add nuw nsw i32 %360, 128, !dbg !41
  %950 = icmp samesign ult i32 %360, 384, !dbg !41
  br i1 %950, label %325, label %951, !dbg !41

951:                                              ; preds = %325
  %952 = or disjoint i32 %14, %23, !dbg !20
  %953 = or disjoint i32 %14, %22, !dbg !20
  %954 = or disjoint i32 %14, %21, !dbg !20
  %955 = or disjoint i32 %14, %20, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %956 = icmp slt i32 %955, 512, !dbg !43
  %957 = icmp slt i32 %954, 512, !dbg !43
  %958 = icmp slt i32 %953, 512, !dbg !43
  %959 = icmp slt i32 %952, 512, !dbg !43
  %960 = icmp slt i32 %39, 64, !dbg !44
  %961 = and i1 %956, %960, !dbg !45
  %962 = and i1 %957, %960, !dbg !45
  %963 = and i1 %958, %960, !dbg !45
  %964 = and i1 %959, %960, !dbg !45
  %965 = shl i32 %955, 6, !dbg !46
  %966 = shl i32 %954, 6, !dbg !46
  %967 = shl i32 %953, 6, !dbg !46
  %968 = shl i32 %952, 6, !dbg !46
  %969 = shl i32 %49, 15, !dbg !47
  %970 = add i32 %39, %969, !dbg !48
  %971 = add i32 %970, %965, !dbg !49
  %972 = add i32 %970, %966, !dbg !49
  %973 = add i32 %970, %967, !dbg !49
  %974 = add i32 %970, %968, !dbg !49
  %975 = sext i32 %971 to i64, !dbg !50
  %976 = getelementptr bfloat, ptr addrspace(1) %2, i64 %975, !dbg !50
  %977 = sext i32 %972 to i64, !dbg !50
  %978 = getelementptr bfloat, ptr addrspace(1) %2, i64 %977, !dbg !50
  %979 = sext i32 %973 to i64, !dbg !50
  %980 = getelementptr bfloat, ptr addrspace(1) %2, i64 %979, !dbg !50
  %981 = sext i32 %974 to i64, !dbg !50
  %982 = getelementptr bfloat, ptr addrspace(1) %2, i64 %981, !dbg !50
  %983 = fptrunc float %872 to bfloat, !dbg !51
  %984 = fptrunc float %873 to bfloat, !dbg !51
  %985 = fptrunc float %874 to bfloat, !dbg !51
  %986 = fptrunc float %875 to bfloat, !dbg !51
  %987 = fptrunc float %877 to bfloat, !dbg !51
  %988 = fptrunc float %878 to bfloat, !dbg !51
  %989 = fptrunc float %879 to bfloat, !dbg !51
  %990 = fptrunc float %880 to bfloat, !dbg !51
  %991 = fptrunc float %882 to bfloat, !dbg !51
  %992 = fptrunc float %883 to bfloat, !dbg !51
  %993 = fptrunc float %884 to bfloat, !dbg !51
  %994 = fptrunc float %885 to bfloat, !dbg !51
  %995 = fptrunc float %887 to bfloat, !dbg !51
  %996 = fptrunc float %888 to bfloat, !dbg !51
  %997 = fptrunc float %889 to bfloat, !dbg !51
  %998 = fptrunc float %890 to bfloat, !dbg !51
  %999 = fptrunc float %892 to bfloat, !dbg !51
  %1000 = fptrunc float %893 to bfloat, !dbg !51
  %1001 = fptrunc float %894 to bfloat, !dbg !51
  %1002 = fptrunc float %895 to bfloat, !dbg !51
  %1003 = fptrunc float %897 to bfloat, !dbg !51
  %1004 = fptrunc float %898 to bfloat, !dbg !51
  %1005 = fptrunc float %899 to bfloat, !dbg !51
  %1006 = fptrunc float %900 to bfloat, !dbg !51
  %1007 = fptrunc float %902 to bfloat, !dbg !51
  %1008 = fptrunc float %903 to bfloat, !dbg !51
  %1009 = fptrunc float %904 to bfloat, !dbg !51
  %1010 = fptrunc float %905 to bfloat, !dbg !51
  %1011 = fptrunc float %907 to bfloat, !dbg !51
  %1012 = fptrunc float %908 to bfloat, !dbg !51
  %1013 = fptrunc float %909 to bfloat, !dbg !51
  %1014 = fptrunc float %910 to bfloat, !dbg !51
  %1015 = shl i32 %15, 1, !dbg !51
  %1016 = and i32 %1015, 6, !dbg !51
  %1017 = shl i32 %15, 4, !dbg !51
  %1018 = and i32 %1017, 192, !dbg !51
  %1019 = or disjoint i32 %1018, %1016, !dbg !51
  %1020 = shl i32 %15, 4, !dbg !51
  %1021 = and i32 %1020, 1280, !dbg !51
  %1022 = or disjoint i32 %1021, %1019, !dbg !51
  %1023 = or disjoint i32 %1022, %299, !dbg !51
  %1024 = and i32 %24, 1016, !dbg !51
  %1025 = lshr i32 %1022, 3, !dbg !51
  %1026 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1025, !dbg !51
  %1027 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1026, i32 %1023, !dbg !51
  %1028 = bitcast bfloat %983 to i16, !dbg !51
  %1029 = bitcast bfloat %984 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1027, i16 %1028, i16 %1029, i1 true) #1, !dbg !51
  %1030 = or disjoint i32 %1023, 512, !dbg !51
  %1031 = lshr i32 %1030, 3, !dbg !51
  %1032 = and i32 %1031, 536870904, !dbg !51
  %1033 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1032, !dbg !51
  %1034 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1033, i32 %1030, !dbg !51
  %1035 = bitcast bfloat %985 to i16, !dbg !51
  %1036 = bitcast bfloat %986 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1034, i16 %1035, i16 %1036, i1 true) #1, !dbg !51
  %1037 = or disjoint i32 %1023, 16, !dbg !51
  %1038 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1026, i32 %1037, !dbg !51
  %1039 = bitcast bfloat %987 to i16, !dbg !51
  %1040 = bitcast bfloat %988 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1038, i16 %1039, i16 %1040, i1 true) #1, !dbg !51
  %1041 = or disjoint i32 %1023, 528, !dbg !51
  %1042 = lshr i32 %1041, 3, !dbg !51
  %1043 = and i32 %1042, 536870904, !dbg !51
  %1044 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1043, !dbg !51
  %1045 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1044, i32 %1041, !dbg !51
  %1046 = bitcast bfloat %989 to i16, !dbg !51
  %1047 = bitcast bfloat %990 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1045, i16 %1046, i16 %1047, i1 true) #1, !dbg !51
  %1048 = or disjoint i32 %1023, 32, !dbg !51
  %1049 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1026, i32 %1048, !dbg !51
  %1050 = bitcast bfloat %991 to i16, !dbg !51
  %1051 = bitcast bfloat %992 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1049, i16 %1050, i16 %1051, i1 true) #1, !dbg !51
  %1052 = or disjoint i32 %1023, 544, !dbg !51
  %1053 = lshr i32 %1052, 3, !dbg !51
  %1054 = and i32 %1053, 536870904, !dbg !51
  %1055 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1054, !dbg !51
  %1056 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1055, i32 %1052, !dbg !51
  %1057 = bitcast bfloat %993 to i16, !dbg !51
  %1058 = bitcast bfloat %994 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1056, i16 %1057, i16 %1058, i1 true) #1, !dbg !51
  %1059 = or disjoint i32 %1023, 48, !dbg !51
  %1060 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1026, i32 %1059, !dbg !51
  %1061 = bitcast bfloat %995 to i16, !dbg !51
  %1062 = bitcast bfloat %996 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1060, i16 %1061, i16 %1062, i1 true) #1, !dbg !51
  %1063 = or disjoint i32 %1023, 560, !dbg !51
  %1064 = lshr i32 %1063, 3, !dbg !51
  %1065 = and i32 %1064, 536870904, !dbg !51
  %1066 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1065, !dbg !51
  %1067 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1066, i32 %1063, !dbg !51
  %1068 = bitcast bfloat %997 to i16, !dbg !51
  %1069 = bitcast bfloat %998 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1067, i16 %1068, i16 %1069, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %1070 = lshr exact i32 %24, 2, !dbg !51
  %1071 = and i32 %1070, 240, !dbg !51
  %1072 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1071, !dbg !51
  %1073 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1072, i32 %1024, !dbg !51
  %1074 = load <4 x i32>, ptr addrspace(3) %1073, align 16, !dbg !51
  %1075 = or disjoint i32 %1024, 1024, !dbg !51
  %1076 = lshr exact i32 %1075, 3, !dbg !51
  %1077 = and i32 %1076, 248, !dbg !51
  %1078 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1077, !dbg !51
  %1079 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1078, i32 %1075, !dbg !51
  %1080 = load <4 x i32>, ptr addrspace(3) %1079, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %1081 = bitcast bfloat %999 to i16, !dbg !51
  %1082 = bitcast bfloat %1000 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1027, i16 %1081, i16 %1082, i1 true) #1, !dbg !51
  %1083 = bitcast bfloat %1001 to i16, !dbg !51
  %1084 = bitcast bfloat %1002 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1034, i16 %1083, i16 %1084, i1 true) #1, !dbg !51
  %1085 = bitcast bfloat %1003 to i16, !dbg !51
  %1086 = bitcast bfloat %1004 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1038, i16 %1085, i16 %1086, i1 true) #1, !dbg !51
  %1087 = bitcast bfloat %1005 to i16, !dbg !51
  %1088 = bitcast bfloat %1006 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1045, i16 %1087, i16 %1088, i1 true) #1, !dbg !51
  %1089 = bitcast bfloat %1007 to i16, !dbg !51
  %1090 = bitcast bfloat %1008 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1049, i16 %1089, i16 %1090, i1 true) #1, !dbg !51
  %1091 = bitcast bfloat %1009 to i16, !dbg !51
  %1092 = bitcast bfloat %1010 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1056, i16 %1091, i16 %1092, i1 true) #1, !dbg !51
  %1093 = bitcast bfloat %1011 to i16, !dbg !51
  %1094 = bitcast bfloat %1012 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1060, i16 %1093, i16 %1094, i1 true) #1, !dbg !51
  %1095 = bitcast bfloat %1013 to i16, !dbg !51
  %1096 = bitcast bfloat %1014 to i16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1067, i16 %1095, i16 %1096, i1 true) #1, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %1097 = load <4 x i32>, ptr addrspace(3) %1073, align 16, !dbg !51
  %1098 = load <4 x i32>, ptr addrspace(3) %1079, align 16, !dbg !51
  %.extract = extractelement <4 x i32> %1074, i64 0, !dbg !51
  %.extract307 = extractelement <4 x i32> %1074, i64 1, !dbg !51
  %.extract309 = extractelement <4 x i32> %1074, i64 2, !dbg !51
  %.extract311 = extractelement <4 x i32> %1074, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract307, i32 %.extract309, i32 %.extract311, ptr addrspace(1) %976, i1 %961) #1, !dbg !51
  %.extract313 = extractelement <4 x i32> %1080, i64 0, !dbg !51
  %.extract315 = extractelement <4 x i32> %1080, i64 1, !dbg !51
  %.extract317 = extractelement <4 x i32> %1080, i64 2, !dbg !51
  %.extract319 = extractelement <4 x i32> %1080, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract313, i32 %.extract315, i32 %.extract317, i32 %.extract319, ptr addrspace(1) %978, i1 %962) #1, !dbg !51
  %.extract321 = extractelement <4 x i32> %1097, i64 0, !dbg !51
  %.extract323 = extractelement <4 x i32> %1097, i64 1, !dbg !51
  %.extract325 = extractelement <4 x i32> %1097, i64 2, !dbg !51
  %.extract327 = extractelement <4 x i32> %1097, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract321, i32 %.extract323, i32 %.extract325, i32 %.extract327, ptr addrspace(1) %980, i1 %963) #1, !dbg !51
  %.extract329 = extractelement <4 x i32> %1098, i64 0, !dbg !51
  %.extract331 = extractelement <4 x i32> %1098, i64 1, !dbg !51
  %.extract333 = extractelement <4 x i32> %1098, i64 2, !dbg !51
  %.extract335 = extractelement <4 x i32> %1098, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract329, i32 %.extract331, i32 %.extract333, i32 %.extract335, ptr addrspace(1) %982, i1 %964) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdp7734cjzbxjf7uv37dnh6lanxvaodcxyeupbdxk5ezhmwzf7iu.py", directory: "/tmp/torchinductor_root/dp")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 55, column: 52, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 43, scope: !6)
!28 = !DILocation(line: 66, column: 72, scope: !6)
!29 = !DILocation(line: 66, column: 40, scope: !6)
!30 = !DILocation(line: 66, column: 66, scope: !6)
!31 = !DILocation(line: 66, column: 13, scope: !6)
!32 = !DILocation(line: 67, column: 27, scope: !6)
!33 = !DILocation(line: 67, column: 72, scope: !6)
!34 = !DILocation(line: 67, column: 39, scope: !6)
!35 = !DILocation(line: 67, column: 66, scope: !6)
!36 = !DILocation(line: 67, column: 13, scope: !6)
!37 = !DILocation(line: 72, column: 24, scope: !6)
!38 = !DILocation(line: 73, column: 24, scope: !6)
!39 = !DILocation(line: 78, column: 13, scope: !6)
!40 = !DILocation(line: 79, column: 13, scope: !6)
!41 = !DILocation(line: 70, column: 25, scope: !6)
!42 = !DILocation(line: 77, column: 25, scope: !6)
!43 = !DILocation(line: 87, column: 20, scope: !6)
!44 = !DILocation(line: 87, column: 34, scope: !6)
!45 = !DILocation(line: 87, column: 26, scope: !6)
!46 = !DILocation(line: 90, column: 24, scope: !6)
!47 = !DILocation(line: 90, column: 38, scope: !6)
!48 = !DILocation(line: 90, column: 21, scope: !6)
!49 = !DILocation(line: 90, column: 32, scope: !6)
!50 = !DILocation(line: 91, column: 25, scope: !6)
!51 = !DILocation(line: 91, column: 67, scope: !6)
!52 = !DILocation(line: 91, column: 4, scope: !6)
