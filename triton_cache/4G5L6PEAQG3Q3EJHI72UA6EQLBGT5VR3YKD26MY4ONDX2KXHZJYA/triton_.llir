; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = shl i32 %5, 10, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 3, !dbg !11
  %9 = and i32 %8, 504, !dbg !11
  %10 = or disjoint i32 %9, %6, !dbg !12
  %11 = or disjoint i32 %10, 512, !dbg !12
  %12 = icmp slt i32 %10, 236544, !dbg !13
  %13 = icmp slt i32 %11, 236544, !dbg !13
  %14 = srem i32 %10, 3072, !dbg !14
  %15 = srem i32 %11, 3072, !dbg !14
  %16 = sext i32 %10 to i64, !dbg !15
  %17 = getelementptr bfloat, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = sext i32 %11 to i64, !dbg !15
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 %12) #2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #2, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !16
  %38 = sext i32 %14 to i64, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = sext i32 %15 to i64, !dbg !17
  %41 = getelementptr bfloat, ptr addrspace(1) %1, i64 %40, !dbg !17
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %12) #2, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !18
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !18
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !18
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !18
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !18
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %13) #2, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !18
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !18
  %54 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !18
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !18
  %56 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !18
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !18
  %58 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !18
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !18
  %60 = fpext <2 x bfloat> %22 to <2 x float>, !dbg !19
  %61 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !20
  %62 = fadd <2 x float> %60, %61, !dbg !21
  %63 = extractelement <2 x float> %62, i64 0, !dbg !22
  %64 = fmul float %63, 0x3FFB3B6460000000, !dbg !22
  %65 = extractelement <2 x float> %62, i64 1, !dbg !22
  %66 = fmul float %65, 0x3FFB3B6460000000, !dbg !22
  %67 = fsub float 0.000000e+00, %64, !dbg !23
  %68 = fsub float 0.000000e+00, %66, !dbg !23
  %69 = fmul float %67, 0x3FF7154760000000, !dbg !27
  %70 = tail call float @llvm.nvvm.ex2.approx.f(float %69), !dbg !27
  %71 = fmul float %68, 0x3FF7154760000000, !dbg !27
  %72 = tail call float @llvm.nvvm.ex2.approx.f(float %71), !dbg !27
  %73 = fadd float %70, 1.000000e+00, !dbg !28
  %74 = fadd float %72, 1.000000e+00, !dbg !28
  %75 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %73), !dbg !29
  %76 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %74), !dbg !29
  %77 = insertelement <2 x float> poison, float %75, i64 0, !dbg !30
  %78 = insertelement <2 x float> %77, float %76, i64 1, !dbg !30
  %79 = fmul <2 x float> %62, %78, !dbg !30
  %80 = fptrunc <2 x float> %79 to <2 x bfloat>, !dbg !31
  %81 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !19
  %82 = fpext <2 x bfloat> %46 to <2 x float>, !dbg !20
  %83 = fadd <2 x float> %81, %82, !dbg !21
  %84 = extractelement <2 x float> %83, i64 0, !dbg !22
  %85 = fmul float %84, 0x3FFB3B6460000000, !dbg !22
  %86 = extractelement <2 x float> %83, i64 1, !dbg !22
  %87 = fmul float %86, 0x3FFB3B6460000000, !dbg !22
  %88 = fsub float 0.000000e+00, %85, !dbg !23
  %89 = fsub float 0.000000e+00, %87, !dbg !23
  %90 = fmul float %88, 0x3FF7154760000000, !dbg !27
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %90), !dbg !27
  %92 = fmul float %89, 0x3FF7154760000000, !dbg !27
  %93 = tail call float @llvm.nvvm.ex2.approx.f(float %92), !dbg !27
  %94 = fadd float %91, 1.000000e+00, !dbg !28
  %95 = fadd float %93, 1.000000e+00, !dbg !28
  %96 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %94), !dbg !29
  %97 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %95), !dbg !29
  %98 = insertelement <2 x float> poison, float %96, i64 0, !dbg !30
  %99 = insertelement <2 x float> %98, float %97, i64 1, !dbg !30
  %100 = fmul <2 x float> %83, %99, !dbg !30
  %101 = fptrunc <2 x float> %100 to <2 x bfloat>, !dbg !31
  %102 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !19
  %103 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !20
  %104 = fadd <2 x float> %102, %103, !dbg !21
  %105 = extractelement <2 x float> %104, i64 0, !dbg !22
  %106 = fmul float %105, 0x3FFB3B6460000000, !dbg !22
  %107 = extractelement <2 x float> %104, i64 1, !dbg !22
  %108 = fmul float %107, 0x3FFB3B6460000000, !dbg !22
  %109 = fsub float 0.000000e+00, %106, !dbg !23
  %110 = fsub float 0.000000e+00, %108, !dbg !23
  %111 = fmul float %109, 0x3FF7154760000000, !dbg !27
  %112 = tail call float @llvm.nvvm.ex2.approx.f(float %111), !dbg !27
  %113 = fmul float %110, 0x3FF7154760000000, !dbg !27
  %114 = tail call float @llvm.nvvm.ex2.approx.f(float %113), !dbg !27
  %115 = fadd float %112, 1.000000e+00, !dbg !28
  %116 = fadd float %114, 1.000000e+00, !dbg !28
  %117 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %115), !dbg !29
  %118 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %116), !dbg !29
  %119 = insertelement <2 x float> poison, float %117, i64 0, !dbg !30
  %120 = insertelement <2 x float> %119, float %118, i64 1, !dbg !30
  %121 = fmul <2 x float> %104, %120, !dbg !30
  %122 = fptrunc <2 x float> %121 to <2 x bfloat>, !dbg !31
  %123 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !19
  %124 = fpext <2 x bfloat> %50 to <2 x float>, !dbg !20
  %125 = fadd <2 x float> %123, %124, !dbg !21
  %126 = extractelement <2 x float> %125, i64 0, !dbg !22
  %127 = fmul float %126, 0x3FFB3B6460000000, !dbg !22
  %128 = extractelement <2 x float> %125, i64 1, !dbg !22
  %129 = fmul float %128, 0x3FFB3B6460000000, !dbg !22
  %130 = fsub float 0.000000e+00, %127, !dbg !23
  %131 = fsub float 0.000000e+00, %129, !dbg !23
  %132 = fmul float %130, 0x3FF7154760000000, !dbg !27
  %133 = tail call float @llvm.nvvm.ex2.approx.f(float %132), !dbg !27
  %134 = fmul float %131, 0x3FF7154760000000, !dbg !27
  %135 = tail call float @llvm.nvvm.ex2.approx.f(float %134), !dbg !27
  %136 = fadd float %133, 1.000000e+00, !dbg !28
  %137 = fadd float %135, 1.000000e+00, !dbg !28
  %138 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %136), !dbg !29
  %139 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %137), !dbg !29
  %140 = insertelement <2 x float> poison, float %138, i64 0, !dbg !30
  %141 = insertelement <2 x float> %140, float %139, i64 1, !dbg !30
  %142 = fmul <2 x float> %125, %141, !dbg !30
  %143 = fptrunc <2 x float> %142 to <2 x bfloat>, !dbg !31
  %144 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !19
  %145 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !20
  %146 = fadd <2 x float> %144, %145, !dbg !21
  %147 = extractelement <2 x float> %146, i64 0, !dbg !22
  %148 = fmul float %147, 0x3FFB3B6460000000, !dbg !22
  %149 = extractelement <2 x float> %146, i64 1, !dbg !22
  %150 = fmul float %149, 0x3FFB3B6460000000, !dbg !22
  %151 = fsub float 0.000000e+00, %148, !dbg !23
  %152 = fsub float 0.000000e+00, %150, !dbg !23
  %153 = fmul float %151, 0x3FF7154760000000, !dbg !27
  %154 = tail call float @llvm.nvvm.ex2.approx.f(float %153), !dbg !27
  %155 = fmul float %152, 0x3FF7154760000000, !dbg !27
  %156 = tail call float @llvm.nvvm.ex2.approx.f(float %155), !dbg !27
  %157 = fadd float %154, 1.000000e+00, !dbg !28
  %158 = fadd float %156, 1.000000e+00, !dbg !28
  %159 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %157), !dbg !29
  %160 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %158), !dbg !29
  %161 = insertelement <2 x float> poison, float %159, i64 0, !dbg !30
  %162 = insertelement <2 x float> %161, float %160, i64 1, !dbg !30
  %163 = fmul <2 x float> %146, %162, !dbg !30
  %164 = fptrunc <2 x float> %163 to <2 x bfloat>, !dbg !31
  %165 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !19
  %166 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !20
  %167 = fadd <2 x float> %165, %166, !dbg !21
  %168 = extractelement <2 x float> %167, i64 0, !dbg !22
  %169 = fmul float %168, 0x3FFB3B6460000000, !dbg !22
  %170 = extractelement <2 x float> %167, i64 1, !dbg !22
  %171 = fmul float %170, 0x3FFB3B6460000000, !dbg !22
  %172 = fsub float 0.000000e+00, %169, !dbg !23
  %173 = fsub float 0.000000e+00, %171, !dbg !23
  %174 = fmul float %172, 0x3FF7154760000000, !dbg !27
  %175 = tail call float @llvm.nvvm.ex2.approx.f(float %174), !dbg !27
  %176 = fmul float %173, 0x3FF7154760000000, !dbg !27
  %177 = tail call float @llvm.nvvm.ex2.approx.f(float %176), !dbg !27
  %178 = fadd float %175, 1.000000e+00, !dbg !28
  %179 = fadd float %177, 1.000000e+00, !dbg !28
  %180 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %178), !dbg !29
  %181 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %179), !dbg !29
  %182 = insertelement <2 x float> poison, float %180, i64 0, !dbg !30
  %183 = insertelement <2 x float> %182, float %181, i64 1, !dbg !30
  %184 = fmul <2 x float> %167, %183, !dbg !30
  %185 = fptrunc <2 x float> %184 to <2 x bfloat>, !dbg !31
  %186 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !19
  %187 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !20
  %188 = fadd <2 x float> %186, %187, !dbg !21
  %189 = extractelement <2 x float> %188, i64 0, !dbg !22
  %190 = fmul float %189, 0x3FFB3B6460000000, !dbg !22
  %191 = extractelement <2 x float> %188, i64 1, !dbg !22
  %192 = fmul float %191, 0x3FFB3B6460000000, !dbg !22
  %193 = fsub float 0.000000e+00, %190, !dbg !23
  %194 = fsub float 0.000000e+00, %192, !dbg !23
  %195 = fmul float %193, 0x3FF7154760000000, !dbg !27
  %196 = tail call float @llvm.nvvm.ex2.approx.f(float %195), !dbg !27
  %197 = fmul float %194, 0x3FF7154760000000, !dbg !27
  %198 = tail call float @llvm.nvvm.ex2.approx.f(float %197), !dbg !27
  %199 = fadd float %196, 1.000000e+00, !dbg !28
  %200 = fadd float %198, 1.000000e+00, !dbg !28
  %201 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %199), !dbg !29
  %202 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %200), !dbg !29
  %203 = insertelement <2 x float> poison, float %201, i64 0, !dbg !30
  %204 = insertelement <2 x float> %203, float %202, i64 1, !dbg !30
  %205 = fmul <2 x float> %188, %204, !dbg !30
  %206 = fptrunc <2 x float> %205 to <2 x bfloat>, !dbg !31
  %207 = fpext <2 x bfloat> %37 to <2 x float>, !dbg !19
  %208 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !20
  %209 = fadd <2 x float> %207, %208, !dbg !21
  %210 = extractelement <2 x float> %209, i64 0, !dbg !22
  %211 = fmul float %210, 0x3FFB3B6460000000, !dbg !22
  %212 = extractelement <2 x float> %209, i64 1, !dbg !22
  %213 = fmul float %212, 0x3FFB3B6460000000, !dbg !22
  %214 = fsub float 0.000000e+00, %211, !dbg !23
  %215 = fsub float 0.000000e+00, %213, !dbg !23
  %216 = fmul float %214, 0x3FF7154760000000, !dbg !27
  %217 = tail call float @llvm.nvvm.ex2.approx.f(float %216), !dbg !27
  %218 = fmul float %215, 0x3FF7154760000000, !dbg !27
  %219 = tail call float @llvm.nvvm.ex2.approx.f(float %218), !dbg !27
  %220 = fadd float %217, 1.000000e+00, !dbg !28
  %221 = fadd float %219, 1.000000e+00, !dbg !28
  %222 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %220), !dbg !29
  %223 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %221), !dbg !29
  %224 = insertelement <2 x float> poison, float %222, i64 0, !dbg !30
  %225 = insertelement <2 x float> %224, float %223, i64 1, !dbg !30
  %226 = fmul <2 x float> %209, %225, !dbg !30
  %227 = fptrunc <2 x float> %226 to <2 x bfloat>, !dbg !31
  %228 = bitcast <2 x bfloat> %80 to i32, !dbg !31
  %229 = bitcast <2 x bfloat> %101 to i32, !dbg !31
  %230 = bitcast <2 x bfloat> %122 to i32, !dbg !31
  %231 = bitcast <2 x bfloat> %143 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %229, i32 %230, i32 %231, ptr addrspace(1) %17, i1 %12) #2, !dbg !31
  %232 = bitcast <2 x bfloat> %164 to i32, !dbg !31
  %233 = bitcast <2 x bfloat> %185 to i32, !dbg !31
  %234 = bitcast <2 x bfloat> %206 to i32, !dbg !31
  %235 = bitcast <2 x bfloat> %227 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %19, i1 %13) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cays7uwl4mjrrpbn562uyt2hbd6b25qyzadsmdqftgdhj3yphang.py", directory: "/tmp/torchinductor_root/ay")
!4 = !{ptr @triton_, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 21, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 29, column: 34, scope: !6)
!16 = !DILocation(line: 29, column: 39, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 29, column: 49, scope: !6)
!20 = !DILocation(line: 30, column: 75, scope: !6)
!21 = !DILocation(line: 31, column: 18, scope: !6)
!22 = !DILocation(line: 33, column: 18, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!26 = !DILocation(line: 34, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 35, column: 18, scope: !6)
!31 = !DILocation(line: 36, column: 39, scope: !6)
!32 = !DILocation(line: 36, column: 4, scope: !6)
