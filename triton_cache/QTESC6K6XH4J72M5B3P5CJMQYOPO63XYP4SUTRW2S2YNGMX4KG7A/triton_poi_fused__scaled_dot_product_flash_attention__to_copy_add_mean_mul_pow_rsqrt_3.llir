; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 9, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = shl i32 %15, 2, !dbg !11
  %17 = and i32 %16, 508, !dbg !11
  %18 = or disjoint i32 %17, %14, !dbg !12
  %19 = or disjoint i32 %18, 1, !dbg !12
  %20 = or disjoint i32 %18, 2, !dbg !12
  %21 = or disjoint i32 %18, 3, !dbg !12
  %22 = sdiv i32 %18, 128, !dbg !13
  %23 = mul i32 %22, 128, !dbg !14
  %.decomposed = sub i32 %18, %23, !dbg !14
  %24 = srem i32 %19, 128, !dbg !14
  %25 = srem i32 %20, 128, !dbg !14
  %26 = srem i32 %21, 128, !dbg !14
  %27 = sdiv i32 %18, 3072, !dbg !15
  %28 = sext i32 %18 to i64, !dbg !16
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %29) #3, !dbg !17
  %31 = sext i32 %22 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %32) #3, !dbg !19
  %40 = bitcast i32 %39 to float, !dbg !19
  %41 = sext i32 %.decomposed to i64, !dbg !20
  %42 = getelementptr bfloat, ptr addrspace(1) %2, i64 %41, !dbg !20
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %42) #3, !dbg !21
  %44 = shl nsw i32 %27, 7, !dbg !22
  %45 = add nsw i32 %44, %.decomposed, !dbg !23
  %46 = sext i32 %45 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %47) #3, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %49) #3, !dbg !27
  %51 = getelementptr bfloat, ptr addrspace(1) %5, i64 %28, !dbg !28
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %51) #3, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %53) #3, !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %53) #3, !dbg !31
  %57 = bitcast i32 %56 to float, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %53) #3, !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %53) #3, !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = getelementptr bfloat, ptr addrspace(1) %7, i64 %41, !dbg !32
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %62) #3, !dbg !33
  %64 = srem i32 %19, 2, !dbg !34
  %65 = srem i32 %21, 2, !dbg !34
  %66 = icmp slt i32 %64, 1, !dbg !35
  %67 = icmp slt i32 %65, 1, !dbg !35
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !36
  %68 = ashr exact i8 %.lhs.trunc, 1, !dbg !36
  %.sext = sext i8 %68 to i32, !dbg !36
  %.lhs.trunc70 = trunc nsw i32 %24 to i8, !dbg !36
  %69 = sdiv i8 %.lhs.trunc70, 2, !dbg !36
  %.sext71 = sext i8 %69 to i32, !dbg !36
  %.lhs.trunc72 = trunc nsw i32 %25 to i8, !dbg !36
  %70 = ashr exact i8 %.lhs.trunc72, 1, !dbg !36
  %.sext73 = sext i8 %70 to i32, !dbg !36
  %.lhs.trunc74 = trunc nsw i32 %26 to i8, !dbg !36
  %71 = sdiv i8 %.lhs.trunc74, 2, !dbg !36
  %.sext75 = sext i8 %71 to i32, !dbg !36
  %72 = shl nsw i32 %.sext, 1, !dbg !37
  %73 = shl nsw i32 %.sext71, 1, !dbg !37
  %74 = shl nsw i32 %.sext73, 1, !dbg !37
  %75 = shl nsw i32 %.sext75, 1, !dbg !37
  %76 = or disjoint i32 %72, 1, !dbg !38
  %77 = or disjoint i32 %73, 1, !dbg !38
  %78 = or disjoint i32 %74, 1, !dbg !38
  %79 = or disjoint i32 %75, 1, !dbg !38
  %80 = shl nsw i32 %22, 7, !dbg !39
  %81 = add i32 %76, %80, !dbg !40
  %82 = add i32 %77, %80, !dbg !40
  %83 = add i32 %78, %80, !dbg !40
  %84 = add i32 %79, %80, !dbg !40
  %85 = sext i32 %81 to i64, !dbg !41
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !41
  %87 = sext i32 %82 to i64, !dbg !41
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !41
  %89 = sext i32 %83 to i64, !dbg !41
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !41
  %91 = sext i32 %84 to i64, !dbg !41
  %92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %91, !dbg !41
  %93 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %86, i1 true) #3, !dbg !42
  %94 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %88, i1 %66) #3, !dbg !42
  %95 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %90, i1 true) #3, !dbg !42
  %96 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %92, i1 %67) #3, !dbg !42
  %97 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #3, !dbg !43
  %98 = bitcast i32 %97 to float, !dbg !43
  %99 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %66) #3, !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 true) #3, !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %67) #3, !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = tail call float @llvm.nvvm.div.full(float %98, float 1.280000e+02), !dbg !44
  %106 = tail call float @llvm.nvvm.div.full(float %100, float 1.280000e+02), !dbg !44
  %107 = tail call float @llvm.nvvm.div.full(float %102, float 1.280000e+02), !dbg !44
  %108 = tail call float @llvm.nvvm.div.full(float %104, float 1.280000e+02), !dbg !44
  %109 = fadd float %105, 0x3EB0C6F7A0000000, !dbg !45
  %110 = fadd float %106, 0x3EB0C6F7A0000000, !dbg !45
  %111 = fadd float %107, 0x3EB0C6F7A0000000, !dbg !45
  %112 = fadd float %108, 0x3EB0C6F7A0000000, !dbg !45
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %113, 0, !dbg !46
  br i1 %.not.i, label %116, label %114, !dbg !46

114:                                              ; preds = %12
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %109), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

116:                                              ; preds = %12
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %109), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %114, %116
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], !dbg !46
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %118, 0, !dbg !46
  br i1 %.not.i1, label %121, label %119, !dbg !46

119:                                              ; preds = %__nv_rsqrtf.exit
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %110), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %110), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

__nv_rsqrtf.exit3:                                ; preds = %119, %121
  %.0.i2 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !46
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i4 = icmp eq i32 %123, 0, !dbg !46
  br i1 %.not.i4, label %126, label %124, !dbg !46

124:                                              ; preds = %__nv_rsqrtf.exit3
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

126:                                              ; preds = %__nv_rsqrtf.exit3
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

__nv_rsqrtf.exit6:                                ; preds = %124, %126
  %.0.i5 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !46
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i7 = icmp eq i32 %128, 0, !dbg !46
  br i1 %.not.i7, label %131, label %129, !dbg !46

129:                                              ; preds = %__nv_rsqrtf.exit6
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

131:                                              ; preds = %__nv_rsqrtf.exit6
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

__nv_rsqrtf.exit9:                                ; preds = %129, %131
  %.0.i8 = phi float [ %130, %129 ], [ %132, %131 ], !dbg !46
  %133 = sext i32 %76 to i64, !dbg !47
  %134 = getelementptr bfloat, ptr addrspace(1) %2, i64 %133, !dbg !47
  %135 = sext i32 %77 to i64, !dbg !47
  %136 = getelementptr bfloat, ptr addrspace(1) %2, i64 %135, !dbg !47
  %137 = sext i32 %78 to i64, !dbg !47
  %138 = getelementptr bfloat, ptr addrspace(1) %2, i64 %137, !dbg !47
  %139 = sext i32 %79 to i64, !dbg !47
  %140 = getelementptr bfloat, ptr addrspace(1) %2, i64 %139, !dbg !47
  %141 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %134, i1 true) #3, !dbg !48
  %142 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %136, i1 %66) #3, !dbg !48
  %143 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %138, i1 true) #3, !dbg !48
  %144 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %140, i1 %67) #3, !dbg !48
  %145 = icmp sgt i32 %64, 0, !dbg !49
  %146 = icmp sgt i32 %65, 0, !dbg !49
  %147 = add i32 %72, %80, !dbg !50
  %148 = add i32 %73, %80, !dbg !50
  %149 = add i32 %74, %80, !dbg !50
  %150 = add i32 %75, %80, !dbg !50
  %151 = sext i32 %147 to i64, !dbg !51
  %152 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !51
  %153 = sext i32 %148 to i64, !dbg !51
  %154 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !51
  %155 = sext i32 %149 to i64, !dbg !51
  %156 = getelementptr bfloat, ptr addrspace(1) %0, i64 %155, !dbg !51
  %157 = sext i32 %150 to i64, !dbg !51
  %158 = getelementptr bfloat, ptr addrspace(1) %0, i64 %157, !dbg !51
  %159 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %152, i1 false) #3, !dbg !52
  %160 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %154, i1 %145) #3, !dbg !52
  %161 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %156, i1 false) #3, !dbg !52
  %162 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %158, i1 %146) #3, !dbg !52
  %163 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #3, !dbg !53
  %164 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %145) #3, !dbg !53
  %165 = bitcast i32 %164 to float, !dbg !53
  %166 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #3, !dbg !53
  %167 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %146) #3, !dbg !53
  %168 = bitcast i32 %167 to float, !dbg !53
  %169 = tail call float @llvm.nvvm.div.full(float %165, float 1.280000e+02), !dbg !54
  %170 = tail call float @llvm.nvvm.div.full(float %168, float 1.280000e+02), !dbg !54
  %171 = fadd float %169, 0x3EB0C6F7A0000000, !dbg !55
  %172 = fadd float %170, 0x3EB0C6F7A0000000, !dbg !55
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i13 = icmp eq i32 %174, 0, !dbg !56
  br i1 %.not.i13, label %177, label %175, !dbg !56

175:                                              ; preds = %__nv_rsqrtf.exit9
  %176 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %171), !dbg !56
  br label %__nv_rsqrtf.exit15, !dbg !56

177:                                              ; preds = %__nv_rsqrtf.exit9
  %178 = tail call float @llvm.nvvm.rsqrt.approx.f(float %171), !dbg !56
  br label %__nv_rsqrtf.exit15, !dbg !56

__nv_rsqrtf.exit15:                               ; preds = %175, %177
  %.0.i14 = phi float [ %176, %175 ], [ %178, %177 ], !dbg !56
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i19 = icmp eq i32 %180, 0, !dbg !56
  br i1 %.not.i19, label %183, label %181, !dbg !56

181:                                              ; preds = %__nv_rsqrtf.exit15
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %172), !dbg !56
  br label %__nv_rsqrtf.exit21, !dbg !56

183:                                              ; preds = %__nv_rsqrtf.exit15
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %172), !dbg !56
  br label %__nv_rsqrtf.exit21, !dbg !56

__nv_rsqrtf.exit21:                               ; preds = %181, %183
  %.0.i20 = phi float [ %182, %181 ], [ %184, %183 ], !dbg !56
  %185 = sext i32 %72 to i64, !dbg !57
  %186 = getelementptr bfloat, ptr addrspace(1) %2, i64 %185, !dbg !57
  %187 = sext i32 %73 to i64, !dbg !57
  %188 = getelementptr bfloat, ptr addrspace(1) %2, i64 %187, !dbg !57
  %189 = sext i32 %74 to i64, !dbg !57
  %190 = getelementptr bfloat, ptr addrspace(1) %2, i64 %189, !dbg !57
  %191 = sext i32 %75 to i64, !dbg !57
  %192 = getelementptr bfloat, ptr addrspace(1) %2, i64 %191, !dbg !57
  %193 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %186, i1 false) #3, !dbg !58
  %194 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %188, i1 %145) #3, !dbg !58
  %195 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %190, i1 false) #3, !dbg !58
  %196 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %192, i1 %146) #3, !dbg !58
  %197 = tail call float @llvm.nvvm.div.full(float %34, float 1.280000e+02), !dbg !59
  %198 = tail call float @llvm.nvvm.div.full(float %36, float 1.280000e+02), !dbg !59
  %199 = tail call float @llvm.nvvm.div.full(float %38, float 1.280000e+02), !dbg !59
  %200 = tail call float @llvm.nvvm.div.full(float %40, float 1.280000e+02), !dbg !59
  %201 = fadd float %197, 0x3EB0C6F7A0000000, !dbg !60
  %202 = fadd float %198, 0x3EB0C6F7A0000000, !dbg !60
  %203 = fadd float %199, 0x3EB0C6F7A0000000, !dbg !60
  %204 = fadd float %200, 0x3EB0C6F7A0000000, !dbg !60
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i22 = icmp eq i32 %205, 0, !dbg !61
  br i1 %.not.i22, label %208, label %206, !dbg !61

206:                                              ; preds = %__nv_rsqrtf.exit21
  %207 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %201), !dbg !61
  br label %__nv_rsqrtf.exit24, !dbg !61

208:                                              ; preds = %__nv_rsqrtf.exit21
  %209 = tail call float @llvm.nvvm.rsqrt.approx.f(float %201), !dbg !61
  br label %__nv_rsqrtf.exit24, !dbg !61

__nv_rsqrtf.exit24:                               ; preds = %206, %208
  %.0.i23 = phi float [ %207, %206 ], [ %209, %208 ], !dbg !61
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i25 = icmp eq i32 %210, 0, !dbg !61
  br i1 %.not.i25, label %213, label %211, !dbg !61

211:                                              ; preds = %__nv_rsqrtf.exit24
  %212 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %202), !dbg !61
  br label %__nv_rsqrtf.exit27, !dbg !61

213:                                              ; preds = %__nv_rsqrtf.exit24
  %214 = tail call float @llvm.nvvm.rsqrt.approx.f(float %202), !dbg !61
  br label %__nv_rsqrtf.exit27, !dbg !61

__nv_rsqrtf.exit27:                               ; preds = %211, %213
  %.0.i26 = phi float [ %212, %211 ], [ %214, %213 ], !dbg !61
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i28 = icmp eq i32 %215, 0, !dbg !61
  br i1 %.not.i28, label %218, label %216, !dbg !61

216:                                              ; preds = %__nv_rsqrtf.exit27
  %217 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %203), !dbg !61
  br label %__nv_rsqrtf.exit30, !dbg !61

218:                                              ; preds = %__nv_rsqrtf.exit27
  %219 = tail call float @llvm.nvvm.rsqrt.approx.f(float %203), !dbg !61
  br label %__nv_rsqrtf.exit30, !dbg !61

__nv_rsqrtf.exit30:                               ; preds = %216, %218
  %.0.i29 = phi float [ %217, %216 ], [ %219, %218 ], !dbg !61
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i31 = icmp eq i32 %220, 0, !dbg !61
  br i1 %.not.i31, label %223, label %221, !dbg !61

221:                                              ; preds = %__nv_rsqrtf.exit30
  %222 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %204), !dbg !61
  br label %__nv_rsqrtf.exit33, !dbg !61

223:                                              ; preds = %__nv_rsqrtf.exit30
  %224 = tail call float @llvm.nvvm.rsqrt.approx.f(float %204), !dbg !61
  br label %__nv_rsqrtf.exit33, !dbg !61

__nv_rsqrtf.exit33:                               ; preds = %221, %223
  %.0.i32 = phi float [ %222, %221 ], [ %224, %223 ], !dbg !61
  %225 = getelementptr bfloat, ptr addrspace(1) %5, i64 %85, !dbg !62
  %226 = getelementptr bfloat, ptr addrspace(1) %5, i64 %87, !dbg !62
  %227 = getelementptr bfloat, ptr addrspace(1) %5, i64 %89, !dbg !62
  %228 = getelementptr bfloat, ptr addrspace(1) %5, i64 %91, !dbg !62
  %229 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %225, i1 true) #3, !dbg !63
  %230 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %226, i1 %66) #3, !dbg !63
  %231 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %227, i1 true) #3, !dbg !63
  %232 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %228, i1 %67) #3, !dbg !63
  %233 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 true) #3, !dbg !64
  %234 = bitcast i32 %233 to float, !dbg !64
  %235 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 %66) #3, !dbg !64
  %236 = bitcast i32 %235 to float, !dbg !64
  %237 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 true) #3, !dbg !64
  %238 = bitcast i32 %237 to float, !dbg !64
  %239 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 %67) #3, !dbg !64
  %240 = bitcast i32 %239 to float, !dbg !64
  %241 = tail call float @llvm.nvvm.div.full(float %234, float 1.280000e+02), !dbg !65
  %242 = tail call float @llvm.nvvm.div.full(float %236, float 1.280000e+02), !dbg !65
  %243 = tail call float @llvm.nvvm.div.full(float %238, float 1.280000e+02), !dbg !65
  %244 = tail call float @llvm.nvvm.div.full(float %240, float 1.280000e+02), !dbg !65
  %245 = fadd float %241, 0x3EB0C6F7A0000000, !dbg !66
  %246 = fadd float %242, 0x3EB0C6F7A0000000, !dbg !66
  %247 = fadd float %243, 0x3EB0C6F7A0000000, !dbg !66
  %248 = fadd float %244, 0x3EB0C6F7A0000000, !dbg !66
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i34 = icmp eq i32 %249, 0, !dbg !67
  br i1 %.not.i34, label %252, label %250, !dbg !67

250:                                              ; preds = %__nv_rsqrtf.exit33
  %251 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %245), !dbg !67
  br label %__nv_rsqrtf.exit36, !dbg !67

252:                                              ; preds = %__nv_rsqrtf.exit33
  %253 = tail call float @llvm.nvvm.rsqrt.approx.f(float %245), !dbg !67
  br label %__nv_rsqrtf.exit36, !dbg !67

__nv_rsqrtf.exit36:                               ; preds = %250, %252
  %.0.i35 = phi float [ %251, %250 ], [ %253, %252 ], !dbg !67
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i37 = icmp eq i32 %254, 0, !dbg !67
  br i1 %.not.i37, label %257, label %255, !dbg !67

255:                                              ; preds = %__nv_rsqrtf.exit36
  %256 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %246), !dbg !67
  br label %__nv_rsqrtf.exit39, !dbg !67

257:                                              ; preds = %__nv_rsqrtf.exit36
  %258 = tail call float @llvm.nvvm.rsqrt.approx.f(float %246), !dbg !67
  br label %__nv_rsqrtf.exit39, !dbg !67

__nv_rsqrtf.exit39:                               ; preds = %255, %257
  %.0.i38 = phi float [ %256, %255 ], [ %258, %257 ], !dbg !67
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i40 = icmp eq i32 %259, 0, !dbg !67
  br i1 %.not.i40, label %262, label %260, !dbg !67

260:                                              ; preds = %__nv_rsqrtf.exit39
  %261 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %247), !dbg !67
  br label %__nv_rsqrtf.exit42, !dbg !67

262:                                              ; preds = %__nv_rsqrtf.exit39
  %263 = tail call float @llvm.nvvm.rsqrt.approx.f(float %247), !dbg !67
  br label %__nv_rsqrtf.exit42, !dbg !67

__nv_rsqrtf.exit42:                               ; preds = %260, %262
  %.0.i41 = phi float [ %261, %260 ], [ %263, %262 ], !dbg !67
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i43 = icmp eq i32 %264, 0, !dbg !67
  br i1 %.not.i43, label %267, label %265, !dbg !67

265:                                              ; preds = %__nv_rsqrtf.exit42
  %266 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %248), !dbg !67
  br label %__nv_rsqrtf.exit45, !dbg !67

267:                                              ; preds = %__nv_rsqrtf.exit42
  %268 = tail call float @llvm.nvvm.rsqrt.approx.f(float %248), !dbg !67
  br label %__nv_rsqrtf.exit45, !dbg !67

__nv_rsqrtf.exit45:                               ; preds = %265, %267
  %.0.i44 = phi float [ %266, %265 ], [ %268, %267 ], !dbg !67
  %269 = getelementptr bfloat, ptr addrspace(1) %7, i64 %133, !dbg !68
  %270 = getelementptr bfloat, ptr addrspace(1) %7, i64 %135, !dbg !68
  %271 = getelementptr bfloat, ptr addrspace(1) %7, i64 %137, !dbg !68
  %272 = getelementptr bfloat, ptr addrspace(1) %7, i64 %139, !dbg !68
  %273 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %269, i1 true) #3, !dbg !69
  %274 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %270, i1 %66) #3, !dbg !69
  %275 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %271, i1 true) #3, !dbg !69
  %276 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %272, i1 %67) #3, !dbg !69
  %277 = getelementptr bfloat, ptr addrspace(1) %5, i64 %151, !dbg !70
  %278 = getelementptr bfloat, ptr addrspace(1) %5, i64 %153, !dbg !70
  %279 = getelementptr bfloat, ptr addrspace(1) %5, i64 %155, !dbg !70
  %280 = getelementptr bfloat, ptr addrspace(1) %5, i64 %157, !dbg !70
  %281 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %277, i1 false) #3, !dbg !71
  %282 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %278, i1 %145) #3, !dbg !71
  %283 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %279, i1 false) #3, !dbg !71
  %284 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %280, i1 %146) #3, !dbg !71
  %285 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 false) #3, !dbg !72
  %286 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 %145) #3, !dbg !72
  %287 = bitcast i32 %286 to float, !dbg !72
  %288 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 false) #3, !dbg !72
  %289 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %53, i1 %146) #3, !dbg !72
  %290 = bitcast i32 %289 to float, !dbg !72
  %291 = tail call float @llvm.nvvm.div.full(float %287, float 1.280000e+02), !dbg !73
  %292 = tail call float @llvm.nvvm.div.full(float %290, float 1.280000e+02), !dbg !73
  %293 = fadd float %291, 0x3EB0C6F7A0000000, !dbg !74
  %294 = fadd float %292, 0x3EB0C6F7A0000000, !dbg !74
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i49 = icmp eq i32 %296, 0, !dbg !75
  br i1 %.not.i49, label %299, label %297, !dbg !75

297:                                              ; preds = %__nv_rsqrtf.exit45
  %298 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %293), !dbg !75
  br label %__nv_rsqrtf.exit51, !dbg !75

299:                                              ; preds = %__nv_rsqrtf.exit45
  %300 = tail call float @llvm.nvvm.rsqrt.approx.f(float %293), !dbg !75
  br label %__nv_rsqrtf.exit51, !dbg !75

__nv_rsqrtf.exit51:                               ; preds = %297, %299
  %.0.i50 = phi float [ %298, %297 ], [ %300, %299 ], !dbg !75
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i55 = icmp eq i32 %302, 0, !dbg !75
  br i1 %.not.i55, label %305, label %303, !dbg !75

303:                                              ; preds = %__nv_rsqrtf.exit51
  %304 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %294), !dbg !75
  br label %__nv_rsqrtf.exit57, !dbg !75

305:                                              ; preds = %__nv_rsqrtf.exit51
  %306 = tail call float @llvm.nvvm.rsqrt.approx.f(float %294), !dbg !75
  br label %__nv_rsqrtf.exit57, !dbg !75

__nv_rsqrtf.exit57:                               ; preds = %303, %305
  %.0.i56 = phi float [ %304, %303 ], [ %306, %305 ], !dbg !75
  %307 = getelementptr bfloat, ptr addrspace(1) %7, i64 %185, !dbg !76
  %308 = getelementptr bfloat, ptr addrspace(1) %7, i64 %187, !dbg !76
  %309 = getelementptr bfloat, ptr addrspace(1) %7, i64 %189, !dbg !76
  %310 = getelementptr bfloat, ptr addrspace(1) %7, i64 %191, !dbg !76
  %311 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %307, i1 false) #3, !dbg !77
  %312 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %308, i1 %145) #3, !dbg !77
  %313 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %309, i1 false) #3, !dbg !77
  %314 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %310, i1 %146) #3, !dbg !77
  %315 = tail call float @llvm.nvvm.div.full(float %55, float 1.280000e+02), !dbg !78
  %316 = tail call float @llvm.nvvm.div.full(float %57, float 1.280000e+02), !dbg !78
  %317 = tail call float @llvm.nvvm.div.full(float %59, float 1.280000e+02), !dbg !78
  %318 = tail call float @llvm.nvvm.div.full(float %61, float 1.280000e+02), !dbg !78
  %319 = fadd float %315, 0x3EB0C6F7A0000000, !dbg !79
  %320 = fadd float %316, 0x3EB0C6F7A0000000, !dbg !79
  %321 = fadd float %317, 0x3EB0C6F7A0000000, !dbg !79
  %322 = fadd float %318, 0x3EB0C6F7A0000000, !dbg !79
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i58 = icmp eq i32 %323, 0, !dbg !80
  br i1 %.not.i58, label %326, label %324, !dbg !80

324:                                              ; preds = %__nv_rsqrtf.exit57
  %325 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %319), !dbg !80
  br label %__nv_rsqrtf.exit60, !dbg !80

326:                                              ; preds = %__nv_rsqrtf.exit57
  %327 = tail call float @llvm.nvvm.rsqrt.approx.f(float %319), !dbg !80
  br label %__nv_rsqrtf.exit60, !dbg !80

__nv_rsqrtf.exit60:                               ; preds = %324, %326
  %.0.i59 = phi float [ %325, %324 ], [ %327, %326 ], !dbg !80
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i61 = icmp eq i32 %328, 0, !dbg !80
  br i1 %.not.i61, label %331, label %329, !dbg !80

329:                                              ; preds = %__nv_rsqrtf.exit60
  %330 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %320), !dbg !80
  br label %__nv_rsqrtf.exit63, !dbg !80

331:                                              ; preds = %__nv_rsqrtf.exit60
  %332 = tail call float @llvm.nvvm.rsqrt.approx.f(float %320), !dbg !80
  br label %__nv_rsqrtf.exit63, !dbg !80

__nv_rsqrtf.exit63:                               ; preds = %329, %331
  %.0.i62 = phi float [ %330, %329 ], [ %332, %331 ], !dbg !80
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i64 = icmp eq i32 %333, 0, !dbg !80
  br i1 %.not.i64, label %336, label %334, !dbg !80

334:                                              ; preds = %__nv_rsqrtf.exit63
  %335 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %321), !dbg !80
  br label %__nv_rsqrtf.exit66, !dbg !80

336:                                              ; preds = %__nv_rsqrtf.exit63
  %337 = tail call float @llvm.nvvm.rsqrt.approx.f(float %321), !dbg !80
  br label %__nv_rsqrtf.exit66, !dbg !80

__nv_rsqrtf.exit66:                               ; preds = %334, %336
  %.0.i65 = phi float [ %335, %334 ], [ %337, %336 ], !dbg !80
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !80
  %.not.i67 = icmp eq i32 %338, 0, !dbg !80
  br i1 %.not.i67, label %341, label %339, !dbg !80

339:                                              ; preds = %__nv_rsqrtf.exit66
  %340 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %322), !dbg !80
  br label %__nv_rsqrtf.exit69, !dbg !80

341:                                              ; preds = %__nv_rsqrtf.exit66
  %342 = tail call float @llvm.nvvm.rsqrt.approx.f(float %322), !dbg !80
  br label %__nv_rsqrtf.exit69, !dbg !80

__nv_rsqrtf.exit69:                               ; preds = %339, %341
  %.0.i68 = phi float [ %340, %339 ], [ %342, %341 ], !dbg !80
  %343 = bitcast i16 %232 to bfloat, !dbg !63
  %344 = fpext bfloat %343 to float, !dbg !81
  %345 = fmul float %.0.i44, %344, !dbg !82
  %346 = bitcast i16 %276 to bfloat, !dbg !69
  %347 = fpext bfloat %346 to float, !dbg !83
  %348 = fmul float %345, %347, !dbg !84
  %349 = fsub float 0.000000e+00, %348, !dbg !85
  %350 = bitcast i16 %284 to bfloat, !dbg !71
  %351 = fpext bfloat %350 to float, !dbg !86
  %352 = fmul float %.0.i56, %351, !dbg !87
  %353 = bitcast i16 %314 to bfloat, !dbg !77
  %354 = fpext bfloat %353 to float, !dbg !88
  %355 = fmul float %352, %354, !dbg !89
  %356 = select i1 %67, float %349, float %355, !dbg !90
  %357 = bitcast i16 %231 to bfloat, !dbg !63
  %358 = fpext bfloat %357 to float, !dbg !81
  %359 = fmul float %.0.i41, %358, !dbg !82
  %360 = bitcast i16 %275 to bfloat, !dbg !69
  %361 = fpext bfloat %360 to float, !dbg !83
  %362 = fmul float %359, %361, !dbg !84
  %363 = fsub float 0.000000e+00, %362, !dbg !85
  %364 = bitcast i16 %230 to bfloat, !dbg !63
  %365 = fpext bfloat %364 to float, !dbg !81
  %366 = fmul float %.0.i38, %365, !dbg !82
  %367 = bitcast i16 %274 to bfloat, !dbg !69
  %368 = fpext bfloat %367 to float, !dbg !83
  %369 = fmul float %366, %368, !dbg !84
  %370 = fsub float 0.000000e+00, %369, !dbg !85
  %371 = bitcast i16 %282 to bfloat, !dbg !71
  %372 = fpext bfloat %371 to float, !dbg !86
  %373 = fmul float %.0.i50, %372, !dbg !87
  %374 = bitcast i16 %312 to bfloat, !dbg !77
  %375 = fpext bfloat %374 to float, !dbg !88
  %376 = fmul float %373, %375, !dbg !89
  %377 = select i1 %66, float %370, float %376, !dbg !90
  %378 = bitcast i16 %229 to bfloat, !dbg !63
  %379 = fpext bfloat %378 to float, !dbg !81
  %380 = fmul float %.0.i35, %379, !dbg !82
  %381 = bitcast i16 %273 to bfloat, !dbg !69
  %382 = fpext bfloat %381 to float, !dbg !83
  %383 = fmul float %380, %382, !dbg !84
  %384 = fsub float 0.000000e+00, %383, !dbg !85
  %385 = extractvalue { i32, i32 } %30, 1, !dbg !17
  %386 = bitcast i32 %385 to <2 x bfloat>, !dbg !17
  %387 = extractvalue { i32, i32 } %43, 1, !dbg !21
  %388 = bitcast i32 %387 to <2 x bfloat>, !dbg !21
  %389 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %390 = bitcast i16 %96 to bfloat, !dbg !42
  %391 = fpext bfloat %390 to float, !dbg !91
  %392 = fmul float %.0.i8, %391, !dbg !92
  %393 = bitcast i16 %144 to bfloat, !dbg !48
  %394 = fpext bfloat %393 to float, !dbg !93
  %395 = fmul float %392, %394, !dbg !94
  %396 = fsub float 0.000000e+00, %395, !dbg !95
  %397 = bitcast i16 %162 to bfloat, !dbg !52
  %398 = fpext bfloat %397 to float, !dbg !96
  %399 = fmul float %.0.i20, %398, !dbg !97
  %400 = bitcast i16 %196 to bfloat, !dbg !58
  %401 = fpext bfloat %400 to float, !dbg !98
  %402 = fmul float %399, %401, !dbg !99
  %403 = select i1 %67, float %396, float %402, !dbg !90
  %404 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %405 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %406 = bitcast i16 %95 to bfloat, !dbg !42
  %407 = fpext bfloat %406 to float, !dbg !91
  %408 = fmul float %.0.i5, %407, !dbg !92
  %409 = bitcast i16 %143 to bfloat, !dbg !48
  %410 = fpext bfloat %409 to float, !dbg !93
  %411 = fmul float %408, %410, !dbg !94
  %412 = fsub float 0.000000e+00, %411, !dbg !95
  %413 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %414 = extractvalue { i32, i32 } %30, 0, !dbg !17
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !17
  %416 = extractvalue { i32, i32 } %43, 0, !dbg !21
  %417 = bitcast i32 %416 to <2 x bfloat>, !dbg !21
  %418 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %419 = bitcast i16 %94 to bfloat, !dbg !42
  %420 = fpext bfloat %419 to float, !dbg !91
  %421 = fmul float %.0.i2, %420, !dbg !92
  %422 = bitcast i16 %142 to bfloat, !dbg !48
  %423 = fpext bfloat %422 to float, !dbg !93
  %424 = fmul float %421, %423, !dbg !94
  %425 = fsub float 0.000000e+00, %424, !dbg !95
  %426 = bitcast i16 %160 to bfloat, !dbg !52
  %427 = fpext bfloat %426 to float, !dbg !96
  %428 = fmul float %.0.i14, %427, !dbg !97
  %429 = bitcast i16 %194 to bfloat, !dbg !58
  %430 = fpext bfloat %429 to float, !dbg !98
  %431 = fmul float %428, %430, !dbg !99
  %432 = select i1 %66, float %425, float %431, !dbg !90
  %433 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %434 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %435 = bitcast i16 %93 to bfloat, !dbg !42
  %436 = fpext bfloat %435 to float, !dbg !91
  %437 = fmul float %.0.i, %436, !dbg !92
  %438 = bitcast i16 %141 to bfloat, !dbg !48
  %439 = fpext bfloat %438 to float, !dbg !93
  %440 = fmul float %437, %439, !dbg !94
  %441 = fsub float 0.000000e+00, %440, !dbg !95
  %442 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %443 = extractvalue { i32, i32 } %63, 1, !dbg !33
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !33
  %445 = extractvalue { i32, i32 } %63, 0, !dbg !33
  %446 = bitcast i32 %445 to <2 x bfloat>, !dbg !33
  %447 = extractvalue { i32, i32 } %52, 1, !dbg !29
  %448 = bitcast i32 %447 to <2 x bfloat>, !dbg !29
  %449 = extractvalue { i32, i32 } %52, 0, !dbg !29
  %450 = bitcast i32 %449 to <2 x bfloat>, !dbg !29
  %451 = getelementptr bfloat, ptr addrspace(1) %8, i64 %28, !dbg !100
  %452 = fpext <2 x bfloat> %415 to <2 x float>, !dbg !101
  %453 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !102
  %454 = insertelement <2 x float> %453, float %.0.i26, i64 1, !dbg !102
  %455 = fmul <2 x float> %454, %452, !dbg !102
  %456 = fpext <2 x bfloat> %417 to <2 x float>, !dbg !103
  %457 = fmul <2 x float> %455, %456, !dbg !104
  %458 = insertelement <2 x i32> poison, i32 %434, i64 0, !dbg !25
  %459 = insertelement <2 x i32> %458, i32 %418, i64 1, !dbg !25
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !25
  %461 = fmul <2 x float> %457, %460, !dbg !105
  %462 = insertelement <2 x i32> poison, i32 %442, i64 0, !dbg !27
  %463 = insertelement <2 x i32> %462, i32 %433, i64 1, !dbg !27
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !27
  %465 = insertelement <2 x float> poison, float %441, i64 0, !dbg !106
  %466 = insertelement <2 x float> %465, float %432, i64 1, !dbg !106
  %467 = fmul <2 x float> %466, %464, !dbg !106
  %468 = fadd <2 x float> %467, %461, !dbg !107
  %469 = fptrunc <2 x float> %468 to <2 x bfloat>, !dbg !108
  %470 = fpext <2 x bfloat> %386 to <2 x float>, !dbg !101
  %471 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !102
  %472 = insertelement <2 x float> %471, float %.0.i32, i64 1, !dbg !102
  %473 = fmul <2 x float> %472, %470, !dbg !102
  %474 = fpext <2 x bfloat> %388 to <2 x float>, !dbg !103
  %475 = fmul <2 x float> %473, %474, !dbg !104
  %476 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !25
  %477 = insertelement <2 x i32> %476, i32 %389, i64 1, !dbg !25
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !25
  %479 = fmul <2 x float> %475, %478, !dbg !105
  %480 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !27
  %481 = insertelement <2 x i32> %480, i32 %404, i64 1, !dbg !27
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !27
  %483 = insertelement <2 x float> poison, float %412, i64 0, !dbg !106
  %484 = insertelement <2 x float> %483, float %403, i64 1, !dbg !106
  %485 = fmul <2 x float> %484, %482, !dbg !106
  %486 = fadd <2 x float> %485, %479, !dbg !107
  %487 = fptrunc <2 x float> %486 to <2 x bfloat>, !dbg !108
  %488 = bitcast <2 x bfloat> %469 to i32, !dbg !108
  %489 = bitcast <2 x bfloat> %487 to i32, !dbg !108
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %488, i32 %489, ptr addrspace(1) %451) #3, !dbg !108
  %490 = getelementptr bfloat, ptr addrspace(1) %9, i64 %28, !dbg !109
  %491 = fpext <2 x bfloat> %446 to <2 x float>, !dbg !110
  %492 = fpext <2 x bfloat> %450 to <2 x float>, !dbg !111
  %493 = insertelement <2 x float> poison, float %.0.i59, i64 0, !dbg !112
  %494 = insertelement <2 x float> %493, float %.0.i62, i64 1, !dbg !112
  %495 = fmul <2 x float> %494, %492, !dbg !112
  %496 = fmul <2 x float> %495, %491, !dbg !113
  %497 = fmul <2 x float> %496, %460, !dbg !114
  %498 = insertelement <2 x float> poison, float %384, i64 0, !dbg !115
  %499 = insertelement <2 x float> %498, float %377, i64 1, !dbg !115
  %500 = fmul <2 x float> %499, %464, !dbg !115
  %501 = fadd <2 x float> %500, %497, !dbg !116
  %502 = fptrunc <2 x float> %501 to <2 x bfloat>, !dbg !117
  %503 = fpext <2 x bfloat> %444 to <2 x float>, !dbg !110
  %504 = fpext <2 x bfloat> %448 to <2 x float>, !dbg !111
  %505 = insertelement <2 x float> poison, float %.0.i65, i64 0, !dbg !112
  %506 = insertelement <2 x float> %505, float %.0.i68, i64 1, !dbg !112
  %507 = fmul <2 x float> %506, %504, !dbg !112
  %508 = fmul <2 x float> %507, %503, !dbg !113
  %509 = fmul <2 x float> %508, %478, !dbg !114
  %510 = insertelement <2 x float> poison, float %363, i64 0, !dbg !115
  %511 = insertelement <2 x float> %510, float %356, i64 1, !dbg !115
  %512 = fmul <2 x float> %511, %482, !dbg !115
  %513 = fadd <2 x float> %512, %509, !dbg !116
  %514 = fptrunc <2 x float> %513 to <2 x bfloat>, !dbg !117
  %515 = bitcast <2 x bfloat> %502 to i32, !dbg !117
  %516 = bitcast <2 x bfloat> %514 to i32, !dbg !117
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %515, i32 %516, ptr addrspace(1) %490) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cka5htlgwcybbmfp5fo5rnnp6zvsmkuqgrybboel23tm5mabc2ia.py", directory: "/tmp/torchinductor_root/ka")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 19, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 26, column: 19, scope: !6)
!16 = !DILocation(line: 27, column: 31, scope: !6)
!17 = !DILocation(line: 27, column: 36, scope: !6)
!18 = !DILocation(line: 28, column: 31, scope: !6)
!19 = !DILocation(line: 28, column: 36, scope: !6)
!20 = !DILocation(line: 29, column: 31, scope: !6)
!21 = !DILocation(line: 29, column: 36, scope: !6)
!22 = !DILocation(line: 30, column: 40, scope: !6)
!23 = !DILocation(line: 30, column: 36, scope: !6)
!24 = !DILocation(line: 30, column: 31, scope: !6)
!25 = !DILocation(line: 30, column: 45, scope: !6)
!26 = !DILocation(line: 31, column: 31, scope: !6)
!27 = !DILocation(line: 31, column: 45, scope: !6)
!28 = !DILocation(line: 32, column: 31, scope: !6)
!29 = !DILocation(line: 32, column: 36, scope: !6)
!30 = !DILocation(line: 33, column: 31, scope: !6)
!31 = !DILocation(line: 33, column: 36, scope: !6)
!32 = !DILocation(line: 34, column: 31, scope: !6)
!33 = !DILocation(line: 34, column: 36, scope: !6)
!34 = !DILocation(line: 35, column: 17, scope: !6)
!35 = !DILocation(line: 39, column: 18, scope: !6)
!36 = !DILocation(line: 40, column: 43, scope: !6)
!37 = !DILocation(line: 40, column: 37, scope: !6)
!38 = !DILocation(line: 40, column: 34, scope: !6)
!39 = !DILocation(line: 40, column: 52, scope: !6)
!40 = !DILocation(line: 40, column: 48, scope: !6)
!41 = !DILocation(line: 40, column: 30, scope: !6)
!42 = !DILocation(line: 40, column: 57, scope: !6)
!43 = !DILocation(line: 42, column: 35, scope: !6)
!44 = !DILocation(line: 44, column: 19, scope: !6)
!45 = !DILocation(line: 46, column: 19, scope: !6)
!46 = !DILocation(line: 47, column: 28, scope: !6)
!47 = !DILocation(line: 50, column: 31, scope: !6)
!48 = !DILocation(line: 50, column: 49, scope: !6)
!49 = !DILocation(line: 55, column: 20, scope: !6)
!50 = !DILocation(line: 58, column: 45, scope: !6)
!51 = !DILocation(line: 58, column: 31, scope: !6)
!52 = !DILocation(line: 58, column: 54, scope: !6)
!53 = !DILocation(line: 60, column: 36, scope: !6)
!54 = !DILocation(line: 62, column: 21, scope: !6)
!55 = !DILocation(line: 64, column: 20, scope: !6)
!56 = !DILocation(line: 65, column: 28, scope: !6)
!57 = !DILocation(line: 68, column: 31, scope: !6)
!58 = !DILocation(line: 68, column: 45, scope: !6)
!59 = !DILocation(line: 76, column: 21, scope: !6)
!60 = !DILocation(line: 78, column: 20, scope: !6)
!61 = !DILocation(line: 79, column: 28, scope: !6)
!62 = !DILocation(line: 88, column: 31, scope: !6)
!63 = !DILocation(line: 88, column: 58, scope: !6)
!64 = !DILocation(line: 90, column: 36, scope: !6)
!65 = !DILocation(line: 91, column: 21, scope: !6)
!66 = !DILocation(line: 92, column: 20, scope: !6)
!67 = !DILocation(line: 93, column: 28, scope: !6)
!68 = !DILocation(line: 96, column: 31, scope: !6)
!69 = !DILocation(line: 96, column: 49, scope: !6)
!70 = !DILocation(line: 101, column: 31, scope: !6)
!71 = !DILocation(line: 101, column: 54, scope: !6)
!72 = !DILocation(line: 103, column: 36, scope: !6)
!73 = !DILocation(line: 104, column: 21, scope: !6)
!74 = !DILocation(line: 105, column: 20, scope: !6)
!75 = !DILocation(line: 106, column: 28, scope: !6)
!76 = !DILocation(line: 109, column: 31, scope: !6)
!77 = !DILocation(line: 109, column: 45, scope: !6)
!78 = !DILocation(line: 116, column: 21, scope: !6)
!79 = !DILocation(line: 117, column: 20, scope: !6)
!80 = !DILocation(line: 118, column: 28, scope: !6)
!81 = !DILocation(line: 88, column: 108, scope: !6)
!82 = !DILocation(line: 94, column: 20, scope: !6)
!83 = !DILocation(line: 96, column: 99, scope: !6)
!84 = !DILocation(line: 97, column: 20, scope: !6)
!85 = !DILocation(line: 98, column: 13, scope: !6)
!86 = !DILocation(line: 101, column: 105, scope: !6)
!87 = !DILocation(line: 107, column: 20, scope: !6)
!88 = !DILocation(line: 109, column: 96, scope: !6)
!89 = !DILocation(line: 110, column: 20, scope: !6)
!90 = !DILocation(line: 0, scope: !6)
!91 = !DILocation(line: 40, column: 107, scope: !6)
!92 = !DILocation(line: 48, column: 19, scope: !6)
!93 = !DILocation(line: 50, column: 99, scope: !6)
!94 = !DILocation(line: 51, column: 20, scope: !6)
!95 = !DILocation(line: 52, column: 13, scope: !6)
!96 = !DILocation(line: 58, column: 105, scope: !6)
!97 = !DILocation(line: 66, column: 20, scope: !6)
!98 = !DILocation(line: 68, column: 96, scope: !6)
!99 = !DILocation(line: 69, column: 20, scope: !6)
!100 = !DILocation(line: 127, column: 25, scope: !6)
!101 = !DILocation(line: 27, column: 45, scope: !6)
!102 = !DILocation(line: 80, column: 20, scope: !6)
!103 = !DILocation(line: 29, column: 75, scope: !6)
!104 = !DILocation(line: 82, column: 20, scope: !6)
!105 = !DILocation(line: 84, column: 20, scope: !6)
!106 = !DILocation(line: 85, column: 20, scope: !6)
!107 = !DILocation(line: 86, column: 20, scope: !6)
!108 = !DILocation(line: 127, column: 37, scope: !6)
!109 = !DILocation(line: 128, column: 25, scope: !6)
!110 = !DILocation(line: 34, column: 75, scope: !6)
!111 = !DILocation(line: 32, column: 45, scope: !6)
!112 = !DILocation(line: 119, column: 20, scope: !6)
!113 = !DILocation(line: 121, column: 20, scope: !6)
!114 = !DILocation(line: 123, column: 20, scope: !6)
!115 = !DILocation(line: 124, column: 20, scope: !6)
!116 = !DILocation(line: 125, column: 20, scope: !6)
!117 = !DILocation(line: 128, column: 37, scope: !6)
!118 = !DILocation(line: 128, column: 4, scope: !6)
