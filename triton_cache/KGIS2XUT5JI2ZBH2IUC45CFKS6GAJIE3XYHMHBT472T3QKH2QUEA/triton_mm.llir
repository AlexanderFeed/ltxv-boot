; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 48, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 1, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 48, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = or disjoint i32 %23, 64, !dbg !19
  %26 = or disjoint i32 %23, 96, !dbg !19
  %27 = shl i32 %15, 3, !dbg !19
  %28 = and i32 %27, 8, !dbg !19
  %29 = and i32 %27, 16, !dbg !19
  %30 = and i32 %27, 24, !dbg !19
  %31 = and i32 %27, 32, !dbg !19
  %32 = and i32 %27, 56, !dbg !19
  %33 = or disjoint i32 %14, %23, !dbg !20
  %34 = or disjoint i32 %14, %24, !dbg !20
  %35 = or disjoint i32 %14, %25, !dbg !20
  %36 = or disjoint i32 %14, %26, !dbg !20
  %37 = shl nsw i32 %13, 7, !dbg !21
  %38 = or disjoint i32 %37, %23, !dbg !22
  %39 = or disjoint i32 %37, %24, !dbg !22
  %40 = or disjoint i32 %37, %25, !dbg !22
  %41 = or disjoint i32 %37, %26, !dbg !22
  %42 = srem i32 %33, 77, !dbg !23
  %43 = srem i32 %34, 77, !dbg !23
  %44 = srem i32 %35, 77, !dbg !23
  %45 = srem i32 %36, 77, !dbg !23
  %46 = srem i32 %38, 768, !dbg !24
  %.lhs.trunc = trunc i32 %39 to i16, !dbg !24
  %47 = srem i16 %.lhs.trunc, 768, !dbg !24
  %.sext = sext i16 %47 to i32, !dbg !24
  %.lhs.trunc98 = trunc i32 %40 to i16, !dbg !24
  %48 = srem i16 %.lhs.trunc98, 768, !dbg !24
  %.sext99 = sext i16 %48 to i32, !dbg !24
  %.lhs.trunc100 = trunc i32 %41 to i16, !dbg !24
  %49 = srem i16 %.lhs.trunc100, 768, !dbg !24
  %.sext101 = sext i16 %49 to i32, !dbg !24
  %50 = mul nsw i32 %42, 768, !dbg !25
  %51 = mul nsw i32 %43, 768, !dbg !25
  %52 = mul nsw i32 %44, 768, !dbg !25
  %53 = mul nsw i32 %45, 768, !dbg !25
  %54 = mul nsw i32 %46, 768, !dbg !26
  %55 = mul nsw i32 %.sext, 768, !dbg !26
  %56 = mul nsw i32 %.sext99, 768, !dbg !26
  %57 = mul nsw i32 %.sext101, 768, !dbg !26
  %58 = or disjoint i32 %50, %32, !dbg !27
  %59 = or disjoint i32 %51, %32, !dbg !27
  %60 = or disjoint i32 %52, %32, !dbg !27
  %61 = or disjoint i32 %53, %32, !dbg !27
  %62 = sext i32 %58 to i64, !dbg !28
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %59 to i64, !dbg !28
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %60 to i64, !dbg !28
  %67 = getelementptr bfloat, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %61 to i64, !dbg !28
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !28
  %and.ra = and i32 %15, 24, !dbg !29
  %70 = xor i32 %32, %and.ra, !dbg !29
  %71 = xor i32 %70, %18, !dbg !29
  %72 = shl nuw nsw i32 %23, 6, !dbg !29
  %73 = or disjoint i32 %71, %72, !dbg !29
  %74 = zext nneg i32 %73 to i64, !dbg !29
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %74, !dbg !29
  %76 = or disjoint i32 %73, 2048, !dbg !29
  %77 = zext nneg i32 %76 to i64, !dbg !29
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %77, !dbg !29
  %79 = or disjoint i32 %73, 4096, !dbg !29
  %80 = zext nneg i32 %79 to i64, !dbg !29
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %80, !dbg !29
  %82 = or disjoint i32 %73, 6144, !dbg !29
  %83 = zext nneg i32 %82 to i64, !dbg !29
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %83, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %75, ptr addrspace(1) %63, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %65, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %67, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %84, ptr addrspace(1) %69, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %85 = or disjoint i32 %54, %32, !dbg !30
  %86 = or disjoint i32 %55, %32, !dbg !30
  %87 = or disjoint i32 %56, %32, !dbg !30
  %88 = or disjoint i32 %57, %32, !dbg !30
  %89 = sext i32 %85 to i64, !dbg !31
  %90 = getelementptr bfloat, ptr addrspace(1) %1, i64 %89, !dbg !31
  %91 = sext i32 %86 to i64, !dbg !31
  %92 = getelementptr bfloat, ptr addrspace(1) %1, i64 %91, !dbg !31
  %93 = sext i32 %87 to i64, !dbg !31
  %94 = getelementptr bfloat, ptr addrspace(1) %1, i64 %93, !dbg !31
  %95 = sext i32 %88 to i64, !dbg !31
  %96 = getelementptr bfloat, ptr addrspace(1) %1, i64 %95, !dbg !31
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %74, !dbg !32
  %98 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %77, !dbg !32
  %99 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %80, !dbg !32
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %83, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %97, ptr addrspace(1) %90, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %98, ptr addrspace(1) %92, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %99, ptr addrspace(1) %94, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %96, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %101 = or disjoint i32 %32, 64, !dbg !33
  %102 = or disjoint i32 %50, %101, !dbg !27
  %103 = or disjoint i32 %51, %101, !dbg !27
  %104 = or disjoint i32 %52, %101, !dbg !27
  %105 = or disjoint i32 %53, %101, !dbg !27
  %106 = sext i32 %102 to i64, !dbg !28
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !28
  %108 = sext i32 %103 to i64, !dbg !28
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !28
  %110 = sext i32 %104 to i64, !dbg !28
  %111 = getelementptr bfloat, ptr addrspace(1) %0, i64 %110, !dbg !28
  %112 = sext i32 %105 to i64, !dbg !28
  %113 = getelementptr bfloat, ptr addrspace(1) %0, i64 %112, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %74, !dbg !29
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %77, !dbg !29
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %80, !dbg !29
  %117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %83, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %107, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %115, ptr addrspace(1) %109, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %111, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %117, ptr addrspace(1) %113, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %118 = or disjoint i32 %54, %101, !dbg !30
  %119 = or disjoint i32 %55, %101, !dbg !30
  %120 = or disjoint i32 %56, %101, !dbg !30
  %121 = or disjoint i32 %57, %101, !dbg !30
  %122 = sext i32 %118 to i64, !dbg !31
  %123 = getelementptr bfloat, ptr addrspace(1) %1, i64 %122, !dbg !31
  %124 = sext i32 %119 to i64, !dbg !31
  %125 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !31
  %126 = sext i32 %120 to i64, !dbg !31
  %127 = getelementptr bfloat, ptr addrspace(1) %1, i64 %126, !dbg !31
  %128 = sext i32 %121 to i64, !dbg !31
  %129 = getelementptr bfloat, ptr addrspace(1) %1, i64 %128, !dbg !31
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %74, !dbg !32
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %77, !dbg !32
  %132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %80, !dbg !32
  %133 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %83, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %130, ptr addrspace(1) %123, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %131, ptr addrspace(1) %125, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %132, ptr addrspace(1) %127, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %133, ptr addrspace(1) %129, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %134 = or disjoint i32 %32, 128, !dbg !33
  %135 = or disjoint i32 %50, %134, !dbg !27
  %136 = or disjoint i32 %51, %134, !dbg !27
  %137 = or disjoint i32 %52, %134, !dbg !27
  %138 = or disjoint i32 %53, %134, !dbg !27
  %139 = sext i32 %135 to i64, !dbg !28
  %140 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !28
  %141 = sext i32 %136 to i64, !dbg !28
  %142 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !28
  %143 = sext i32 %137 to i64, !dbg !28
  %144 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !28
  %145 = sext i32 %138 to i64, !dbg !28
  %146 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %74, !dbg !29
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %77, !dbg !29
  %149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %80, !dbg !29
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %83, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %147, ptr addrspace(1) %140, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %142, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %144, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %146, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %151 = or disjoint i32 %54, %134, !dbg !30
  %152 = or disjoint i32 %55, %134, !dbg !30
  %153 = or disjoint i32 %56, %134, !dbg !30
  %154 = or disjoint i32 %57, %134, !dbg !30
  %155 = sext i32 %151 to i64, !dbg !31
  %156 = getelementptr bfloat, ptr addrspace(1) %1, i64 %155, !dbg !31
  %157 = sext i32 %152 to i64, !dbg !31
  %158 = getelementptr bfloat, ptr addrspace(1) %1, i64 %157, !dbg !31
  %159 = sext i32 %153 to i64, !dbg !31
  %160 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !31
  %161 = sext i32 %154 to i64, !dbg !31
  %162 = getelementptr bfloat, ptr addrspace(1) %1, i64 %161, !dbg !31
  %163 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %74, !dbg !32
  %164 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %77, !dbg !32
  %165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %80, !dbg !32
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %83, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %163, ptr addrspace(1) %156, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %164, ptr addrspace(1) %158, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %165, ptr addrspace(1) %160, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %166, ptr addrspace(1) %162, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %167 = or disjoint i32 %32, 192, !dbg !33
  %168 = or disjoint i32 %50, %167, !dbg !27
  %169 = or disjoint i32 %51, %167, !dbg !27
  %170 = or disjoint i32 %52, %167, !dbg !27
  %171 = or disjoint i32 %53, %167, !dbg !27
  %172 = sext i32 %168 to i64, !dbg !28
  %173 = getelementptr bfloat, ptr addrspace(1) %0, i64 %172, !dbg !28
  %174 = sext i32 %169 to i64, !dbg !28
  %175 = getelementptr bfloat, ptr addrspace(1) %0, i64 %174, !dbg !28
  %176 = sext i32 %170 to i64, !dbg !28
  %177 = getelementptr bfloat, ptr addrspace(1) %0, i64 %176, !dbg !28
  %178 = sext i32 %171 to i64, !dbg !28
  %179 = getelementptr bfloat, ptr addrspace(1) %0, i64 %178, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %74, !dbg !29
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %77, !dbg !29
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %80, !dbg !29
  %183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %83, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %180, ptr addrspace(1) %173, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %175, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %177, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %183, ptr addrspace(1) %179, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %184 = or disjoint i32 %54, %167, !dbg !30
  %185 = or disjoint i32 %55, %167, !dbg !30
  %186 = or disjoint i32 %56, %167, !dbg !30
  %187 = or disjoint i32 %57, %167, !dbg !30
  %188 = sext i32 %184 to i64, !dbg !31
  %189 = getelementptr bfloat, ptr addrspace(1) %1, i64 %188, !dbg !31
  %190 = sext i32 %185 to i64, !dbg !31
  %191 = getelementptr bfloat, ptr addrspace(1) %1, i64 %190, !dbg !31
  %192 = sext i32 %186 to i64, !dbg !31
  %193 = getelementptr bfloat, ptr addrspace(1) %1, i64 %192, !dbg !31
  %194 = sext i32 %187 to i64, !dbg !31
  %195 = getelementptr bfloat, ptr addrspace(1) %1, i64 %194, !dbg !31
  %196 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %74, !dbg !32
  %197 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %77, !dbg !32
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %80, !dbg !32
  %199 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %83, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %196, ptr addrspace(1) %189, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %197, ptr addrspace(1) %191, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %198, ptr addrspace(1) %193, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %199, ptr addrspace(1) %195, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %16, %22, !dbg !34
  %invariant.op167 = or disjoint i32 %invariant.op, 32, !dbg !34
  %invariant.op170 = or disjoint i32 %invariant.op, 64, !dbg !34
  %invariant.op173 = or disjoint i32 %invariant.op, 96, !dbg !34
  %invariant.op175 = or disjoint i32 %32, 256, !dbg !34
  %200 = and i32 %15, 7
  %201 = and i32 %15, 15
  %202 = lshr exact i32 %17, 1
  %203 = xor i32 %32, %202
  %204 = or disjoint i32 %22, %201
  %205 = shl nuw nsw i32 %204, 6
  %206 = or disjoint i32 %205, %203
  %207 = zext nneg i32 %206 to i64
  %208 = or disjoint i32 %28, 16
  %209 = xor i32 %208, %29
  %210 = or disjoint i32 %209, %31
  %211 = xor i32 %210, %202
  %212 = or disjoint i32 %211, %205
  %213 = zext nneg i32 %212 to i64
  %214 = or disjoint i32 %30, 32
  %215 = xor i32 %214, %31
  %216 = xor i32 %215, %202
  %217 = or disjoint i32 %216, %205
  %218 = zext nneg i32 %217 to i64
  %219 = or disjoint i32 %28, 48
  %and.ra165 = and i32 %27, 48
  %220 = or disjoint i32 %202, %and.ra165
  %221 = xor i32 %220, %219
  %222 = or disjoint i32 %221, %205
  %223 = zext nneg i32 %222 to i64
  %224 = or disjoint i32 %200, 32
  %.reass168 = or disjoint i32 %200, %invariant.op167
  %225 = shl nuw nsw i32 %.reass168, 6
  %226 = or disjoint i32 %225, %203
  %227 = zext nneg i32 %226 to i64
  %228 = or disjoint i32 %211, %225
  %229 = zext nneg i32 %228 to i64
  %230 = or disjoint i32 %216, %225
  %231 = zext nneg i32 %230 to i64
  %232 = or disjoint i32 %221, %225
  %233 = zext nneg i32 %232 to i64
  %234 = or disjoint i32 %200, 64
  %.reass171 = or disjoint i32 %200, %invariant.op170
  %235 = shl nuw nsw i32 %.reass171, 6
  %236 = or disjoint i32 %235, %203
  %237 = zext nneg i32 %236 to i64
  %238 = or disjoint i32 %211, %235
  %239 = zext nneg i32 %238 to i64
  %240 = or disjoint i32 %216, %235
  %241 = zext nneg i32 %240 to i64
  %242 = or disjoint i32 %221, %235
  %243 = zext nneg i32 %242 to i64
  %244 = or disjoint i32 %200, 96
  %.reass174 = or disjoint i32 %200, %invariant.op173
  %245 = shl nuw nsw i32 %.reass174, 6
  %246 = or disjoint i32 %245, %203
  %247 = zext nneg i32 %246 to i64
  %248 = or disjoint i32 %211, %245
  %249 = zext nneg i32 %248 to i64
  %250 = or disjoint i32 %216, %245
  %251 = zext nneg i32 %250 to i64
  %252 = or disjoint i32 %221, %245
  %253 = zext nneg i32 %252 to i64
  %254 = lshr exact i32 %18, 2
  %255 = lshr i32 %15, 2
  %256 = and i32 %255, 16
  %257 = or disjoint i32 %256, %254
  %258 = or disjoint i32 %257, %200
  %259 = shl nuw nsw i32 %258, 6
  %260 = or disjoint i32 %259, %70
  %261 = zext nneg i32 %260 to i64
  %262 = xor i32 %215, %and.ra
  %263 = or disjoint i32 %262, %259
  %264 = zext nneg i32 %263 to i64
  %265 = or disjoint i32 %254, %224
  %266 = or disjoint i32 %265, %256
  %267 = shl nuw nsw i32 %266, 6
  %268 = or disjoint i32 %267, %70
  %269 = zext nneg i32 %268 to i64
  %270 = or disjoint i32 %262, %267
  %271 = zext nneg i32 %270 to i64
  %272 = or disjoint i32 %254, %234
  %273 = or disjoint i32 %272, %256
  %274 = shl nuw nsw i32 %273, 6
  %275 = or disjoint i32 %274, %70
  %276 = zext nneg i32 %275 to i64
  %277 = or disjoint i32 %262, %274
  %278 = zext nneg i32 %277 to i64
  %279 = or disjoint i32 %254, %244
  %280 = or disjoint i32 %279, %256
  %281 = shl nuw nsw i32 %280, 6
  %282 = or disjoint i32 %281, %70
  %283 = zext nneg i32 %282 to i64
  %284 = or disjoint i32 %262, %281
  %285 = zext nneg i32 %284 to i64
  %286 = zext nneg i32 %invariant.op175 to i64, !dbg !34
  %287 = sext i32 %57 to i64, !dbg !34
  %288 = sext i32 %56 to i64, !dbg !34
  %289 = sext i32 %55 to i64, !dbg !34
  %290 = sext i32 %54 to i64, !dbg !34
  %291 = sext i32 %53 to i64, !dbg !34
  %292 = sext i32 %52 to i64, !dbg !34
  %293 = sext i32 %51 to i64, !dbg !34
  %294 = sext i32 %50 to i64, !dbg !34
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %294, !dbg !34
  %invariant.gep303 = getelementptr bfloat, ptr addrspace(1) %0, i64 %293, !dbg !34
  %invariant.gep305 = getelementptr bfloat, ptr addrspace(1) %0, i64 %292, !dbg !34
  %invariant.gep307 = getelementptr bfloat, ptr addrspace(1) %0, i64 %291, !dbg !34
  %invariant.gep309 = getelementptr bfloat, ptr addrspace(1) %1, i64 %290, !dbg !34
  %invariant.gep311 = getelementptr bfloat, ptr addrspace(1) %1, i64 %289, !dbg !34
  %invariant.gep313 = getelementptr bfloat, ptr addrspace(1) %1, i64 %288, !dbg !34
  %invariant.gep315 = getelementptr bfloat, ptr addrspace(1) %1, i64 %287, !dbg !34
  br label %295, !dbg !34

295:                                              ; preds = %4, %295
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %295 ]
  %296 = phi i32 [ -1, %4 ], [ %365, %295 ]
  %297 = phi i32 [ 3, %4 ], [ %884, %295 ]
  %298 = phi float [ 0.000000e+00, %4 ], [ %803, %295 ]
  %299 = phi float [ 0.000000e+00, %4 ], [ %804, %295 ]
  %300 = phi float [ 0.000000e+00, %4 ], [ %805, %295 ]
  %301 = phi float [ 0.000000e+00, %4 ], [ %806, %295 ]
  %302 = phi float [ 0.000000e+00, %4 ], [ %808, %295 ]
  %303 = phi float [ 0.000000e+00, %4 ], [ %809, %295 ]
  %304 = phi float [ 0.000000e+00, %4 ], [ %810, %295 ]
  %305 = phi float [ 0.000000e+00, %4 ], [ %811, %295 ]
  %306 = phi float [ 0.000000e+00, %4 ], [ %813, %295 ]
  %307 = phi float [ 0.000000e+00, %4 ], [ %814, %295 ]
  %308 = phi float [ 0.000000e+00, %4 ], [ %815, %295 ]
  %309 = phi float [ 0.000000e+00, %4 ], [ %816, %295 ]
  %310 = phi float [ 0.000000e+00, %4 ], [ %818, %295 ]
  %311 = phi float [ 0.000000e+00, %4 ], [ %819, %295 ]
  %312 = phi float [ 0.000000e+00, %4 ], [ %820, %295 ]
  %313 = phi float [ 0.000000e+00, %4 ], [ %821, %295 ]
  %314 = phi float [ 0.000000e+00, %4 ], [ %823, %295 ]
  %315 = phi float [ 0.000000e+00, %4 ], [ %824, %295 ]
  %316 = phi float [ 0.000000e+00, %4 ], [ %825, %295 ]
  %317 = phi float [ 0.000000e+00, %4 ], [ %826, %295 ]
  %318 = phi float [ 0.000000e+00, %4 ], [ %828, %295 ]
  %319 = phi float [ 0.000000e+00, %4 ], [ %829, %295 ]
  %320 = phi float [ 0.000000e+00, %4 ], [ %830, %295 ]
  %321 = phi float [ 0.000000e+00, %4 ], [ %831, %295 ]
  %322 = phi float [ 0.000000e+00, %4 ], [ %833, %295 ]
  %323 = phi float [ 0.000000e+00, %4 ], [ %834, %295 ]
  %324 = phi float [ 0.000000e+00, %4 ], [ %835, %295 ]
  %325 = phi float [ 0.000000e+00, %4 ], [ %836, %295 ]
  %326 = phi float [ 0.000000e+00, %4 ], [ %838, %295 ]
  %327 = phi float [ 0.000000e+00, %4 ], [ %839, %295 ]
  %328 = phi float [ 0.000000e+00, %4 ], [ %840, %295 ]
  %329 = phi float [ 0.000000e+00, %4 ], [ %841, %295 ]
  %330 = phi float [ 0.000000e+00, %4 ], [ %843, %295 ]
  %331 = phi float [ 0.000000e+00, %4 ], [ %844, %295 ]
  %332 = phi float [ 0.000000e+00, %4 ], [ %845, %295 ]
  %333 = phi float [ 0.000000e+00, %4 ], [ %846, %295 ]
  %334 = phi float [ 0.000000e+00, %4 ], [ %848, %295 ]
  %335 = phi float [ 0.000000e+00, %4 ], [ %849, %295 ]
  %336 = phi float [ 0.000000e+00, %4 ], [ %850, %295 ]
  %337 = phi float [ 0.000000e+00, %4 ], [ %851, %295 ]
  %338 = phi float [ 0.000000e+00, %4 ], [ %853, %295 ]
  %339 = phi float [ 0.000000e+00, %4 ], [ %854, %295 ]
  %340 = phi float [ 0.000000e+00, %4 ], [ %855, %295 ]
  %341 = phi float [ 0.000000e+00, %4 ], [ %856, %295 ]
  %342 = phi float [ 0.000000e+00, %4 ], [ %858, %295 ]
  %343 = phi float [ 0.000000e+00, %4 ], [ %859, %295 ]
  %344 = phi float [ 0.000000e+00, %4 ], [ %860, %295 ]
  %345 = phi float [ 0.000000e+00, %4 ], [ %861, %295 ]
  %346 = phi float [ 0.000000e+00, %4 ], [ %863, %295 ]
  %347 = phi float [ 0.000000e+00, %4 ], [ %864, %295 ]
  %348 = phi float [ 0.000000e+00, %4 ], [ %865, %295 ]
  %349 = phi float [ 0.000000e+00, %4 ], [ %866, %295 ]
  %350 = phi float [ 0.000000e+00, %4 ], [ %868, %295 ]
  %351 = phi float [ 0.000000e+00, %4 ], [ %869, %295 ]
  %352 = phi float [ 0.000000e+00, %4 ], [ %870, %295 ]
  %353 = phi float [ 0.000000e+00, %4 ], [ %871, %295 ]
  %354 = phi float [ 0.000000e+00, %4 ], [ %873, %295 ]
  %355 = phi float [ 0.000000e+00, %4 ], [ %874, %295 ]
  %356 = phi float [ 0.000000e+00, %4 ], [ %875, %295 ]
  %357 = phi float [ 0.000000e+00, %4 ], [ %876, %295 ]
  %358 = phi float [ 0.000000e+00, %4 ], [ %878, %295 ]
  %359 = phi float [ 0.000000e+00, %4 ], [ %879, %295 ]
  %360 = phi float [ 0.000000e+00, %4 ], [ %880, %295 ]
  %361 = phi float [ 0.000000e+00, %4 ], [ %881, %295 ]
  %362 = icmp samesign ult i64 %indvars.iv, 8, !dbg !34
  %363 = add i32 %296, 1, !dbg !34
  %364 = icmp slt i32 %363, 4, !dbg !34
  %365 = select i1 %364, i32 %363, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %366 = shl i32 %365, 13, !dbg !29
  %367 = sext i32 %366 to i64, !dbg !29
  %368 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %367, !dbg !29
  %369 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %207, !dbg !29
  %370 = ptrtoint ptr addrspace(3) %369 to i64, !dbg !29
  %371 = trunc i64 %370 to i32, !dbg !29
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #1, !dbg !29
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !29
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !29
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !29
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !29
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %213, !dbg !29
  %378 = ptrtoint ptr addrspace(3) %377 to i64, !dbg !29
  %379 = trunc i64 %378 to i32, !dbg !29
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #1, !dbg !29
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !29
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !29
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !29
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !29
  %385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %218, !dbg !29
  %386 = ptrtoint ptr addrspace(3) %385 to i64, !dbg !29
  %387 = trunc i64 %386 to i32, !dbg !29
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %387) #1, !dbg !29
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !29
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !29
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !29
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !29
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %223, !dbg !29
  %394 = ptrtoint ptr addrspace(3) %393 to i64, !dbg !29
  %395 = trunc i64 %394 to i32, !dbg !29
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %395) #1, !dbg !29
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !29
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !29
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !29
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !29
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %227, !dbg !29
  %402 = ptrtoint ptr addrspace(3) %401 to i64, !dbg !29
  %403 = trunc i64 %402 to i32, !dbg !29
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %403) #1, !dbg !29
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !29
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !29
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !29
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !29
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %229, !dbg !29
  %410 = ptrtoint ptr addrspace(3) %409 to i64, !dbg !29
  %411 = trunc i64 %410 to i32, !dbg !29
  %412 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %411) #1, !dbg !29
  %413 = extractvalue { i32, i32, i32, i32 } %412, 0, !dbg !29
  %414 = extractvalue { i32, i32, i32, i32 } %412, 1, !dbg !29
  %415 = extractvalue { i32, i32, i32, i32 } %412, 2, !dbg !29
  %416 = extractvalue { i32, i32, i32, i32 } %412, 3, !dbg !29
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %231, !dbg !29
  %418 = ptrtoint ptr addrspace(3) %417 to i64, !dbg !29
  %419 = trunc i64 %418 to i32, !dbg !29
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %419) #1, !dbg !29
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !29
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !29
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !29
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !29
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %233, !dbg !29
  %426 = ptrtoint ptr addrspace(3) %425 to i64, !dbg !29
  %427 = trunc i64 %426 to i32, !dbg !29
  %428 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %427) #1, !dbg !29
  %429 = extractvalue { i32, i32, i32, i32 } %428, 0, !dbg !29
  %430 = extractvalue { i32, i32, i32, i32 } %428, 1, !dbg !29
  %431 = extractvalue { i32, i32, i32, i32 } %428, 2, !dbg !29
  %432 = extractvalue { i32, i32, i32, i32 } %428, 3, !dbg !29
  %433 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %237, !dbg !29
  %434 = ptrtoint ptr addrspace(3) %433 to i64, !dbg !29
  %435 = trunc i64 %434 to i32, !dbg !29
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %435) #1, !dbg !29
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !29
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !29
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !29
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !29
  %441 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %239, !dbg !29
  %442 = ptrtoint ptr addrspace(3) %441 to i64, !dbg !29
  %443 = trunc i64 %442 to i32, !dbg !29
  %444 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %443) #1, !dbg !29
  %445 = extractvalue { i32, i32, i32, i32 } %444, 0, !dbg !29
  %446 = extractvalue { i32, i32, i32, i32 } %444, 1, !dbg !29
  %447 = extractvalue { i32, i32, i32, i32 } %444, 2, !dbg !29
  %448 = extractvalue { i32, i32, i32, i32 } %444, 3, !dbg !29
  %449 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %241, !dbg !29
  %450 = ptrtoint ptr addrspace(3) %449 to i64, !dbg !29
  %451 = trunc i64 %450 to i32, !dbg !29
  %452 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %451) #1, !dbg !29
  %453 = extractvalue { i32, i32, i32, i32 } %452, 0, !dbg !29
  %454 = extractvalue { i32, i32, i32, i32 } %452, 1, !dbg !29
  %455 = extractvalue { i32, i32, i32, i32 } %452, 2, !dbg !29
  %456 = extractvalue { i32, i32, i32, i32 } %452, 3, !dbg !29
  %457 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %243, !dbg !29
  %458 = ptrtoint ptr addrspace(3) %457 to i64, !dbg !29
  %459 = trunc i64 %458 to i32, !dbg !29
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %459) #1, !dbg !29
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !29
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !29
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !29
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !29
  %465 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %247, !dbg !29
  %466 = ptrtoint ptr addrspace(3) %465 to i64, !dbg !29
  %467 = trunc i64 %466 to i32, !dbg !29
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %467) #1, !dbg !29
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !29
  %470 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !29
  %471 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !29
  %472 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !29
  %473 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %249, !dbg !29
  %474 = ptrtoint ptr addrspace(3) %473 to i64, !dbg !29
  %475 = trunc i64 %474 to i32, !dbg !29
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %475) #1, !dbg !29
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !29
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !29
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !29
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !29
  %481 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %251, !dbg !29
  %482 = ptrtoint ptr addrspace(3) %481 to i64, !dbg !29
  %483 = trunc i64 %482 to i32, !dbg !29
  %484 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %483) #1, !dbg !29
  %485 = extractvalue { i32, i32, i32, i32 } %484, 0, !dbg !29
  %486 = extractvalue { i32, i32, i32, i32 } %484, 1, !dbg !29
  %487 = extractvalue { i32, i32, i32, i32 } %484, 2, !dbg !29
  %488 = extractvalue { i32, i32, i32, i32 } %484, 3, !dbg !29
  %489 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %368, i64 %253, !dbg !29
  %490 = ptrtoint ptr addrspace(3) %489 to i64, !dbg !29
  %491 = trunc i64 %490 to i32, !dbg !29
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %491) #1, !dbg !29
  %493 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !29
  %494 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !29
  %495 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !29
  %496 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !29
  %497 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %367, !dbg !32
  %498 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %261, !dbg !32
  %499 = ptrtoint ptr addrspace(3) %498 to i64, !dbg !32
  %500 = trunc i64 %499 to i32, !dbg !32
  %501 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %500) #1, !dbg !32
  %502 = extractvalue { i32, i32, i32, i32 } %501, 0, !dbg !32
  %503 = extractvalue { i32, i32, i32, i32 } %501, 1, !dbg !32
  %504 = extractvalue { i32, i32, i32, i32 } %501, 2, !dbg !32
  %505 = extractvalue { i32, i32, i32, i32 } %501, 3, !dbg !32
  %506 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %264, !dbg !32
  %507 = ptrtoint ptr addrspace(3) %506 to i64, !dbg !32
  %508 = trunc i64 %507 to i32, !dbg !32
  %509 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %508) #1, !dbg !32
  %510 = extractvalue { i32, i32, i32, i32 } %509, 0, !dbg !32
  %511 = extractvalue { i32, i32, i32, i32 } %509, 1, !dbg !32
  %512 = extractvalue { i32, i32, i32, i32 } %509, 2, !dbg !32
  %513 = extractvalue { i32, i32, i32, i32 } %509, 3, !dbg !32
  %514 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %269, !dbg !32
  %515 = ptrtoint ptr addrspace(3) %514 to i64, !dbg !32
  %516 = trunc i64 %515 to i32, !dbg !32
  %517 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %516) #1, !dbg !32
  %518 = extractvalue { i32, i32, i32, i32 } %517, 0, !dbg !32
  %519 = extractvalue { i32, i32, i32, i32 } %517, 1, !dbg !32
  %520 = extractvalue { i32, i32, i32, i32 } %517, 2, !dbg !32
  %521 = extractvalue { i32, i32, i32, i32 } %517, 3, !dbg !32
  %522 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %271, !dbg !32
  %523 = ptrtoint ptr addrspace(3) %522 to i64, !dbg !32
  %524 = trunc i64 %523 to i32, !dbg !32
  %525 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %524) #1, !dbg !32
  %526 = extractvalue { i32, i32, i32, i32 } %525, 0, !dbg !32
  %527 = extractvalue { i32, i32, i32, i32 } %525, 1, !dbg !32
  %528 = extractvalue { i32, i32, i32, i32 } %525, 2, !dbg !32
  %529 = extractvalue { i32, i32, i32, i32 } %525, 3, !dbg !32
  %530 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %276, !dbg !32
  %531 = ptrtoint ptr addrspace(3) %530 to i64, !dbg !32
  %532 = trunc i64 %531 to i32, !dbg !32
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %532) #1, !dbg !32
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !32
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !32
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !32
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !32
  %538 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %278, !dbg !32
  %539 = ptrtoint ptr addrspace(3) %538 to i64, !dbg !32
  %540 = trunc i64 %539 to i32, !dbg !32
  %541 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %540) #1, !dbg !32
  %542 = extractvalue { i32, i32, i32, i32 } %541, 0, !dbg !32
  %543 = extractvalue { i32, i32, i32, i32 } %541, 1, !dbg !32
  %544 = extractvalue { i32, i32, i32, i32 } %541, 2, !dbg !32
  %545 = extractvalue { i32, i32, i32, i32 } %541, 3, !dbg !32
  %546 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %283, !dbg !32
  %547 = ptrtoint ptr addrspace(3) %546 to i64, !dbg !32
  %548 = trunc i64 %547 to i32, !dbg !32
  %549 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %548) #1, !dbg !32
  %550 = extractvalue { i32, i32, i32, i32 } %549, 0, !dbg !32
  %551 = extractvalue { i32, i32, i32, i32 } %549, 1, !dbg !32
  %552 = extractvalue { i32, i32, i32, i32 } %549, 2, !dbg !32
  %553 = extractvalue { i32, i32, i32, i32 } %549, 3, !dbg !32
  %554 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %497, i64 %285, !dbg !32
  %555 = ptrtoint ptr addrspace(3) %554 to i64, !dbg !32
  %556 = trunc i64 %555 to i32, !dbg !32
  %557 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %556) #1, !dbg !32
  %558 = extractvalue { i32, i32, i32, i32 } %557, 0, !dbg !32
  %559 = extractvalue { i32, i32, i32, i32 } %557, 1, !dbg !32
  %560 = extractvalue { i32, i32, i32, i32 } %557, 2, !dbg !32
  %561 = extractvalue { i32, i32, i32, i32 } %557, 3, !dbg !32
  %562 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %373, i32 %374, i32 %375, i32 %376, i32 %502, i32 %503) #1, !dbg !35
  %563 = extractvalue { float, float, float, float } %562, 0, !dbg !35
  %564 = extractvalue { float, float, float, float } %562, 1, !dbg !35
  %565 = extractvalue { float, float, float, float } %562, 2, !dbg !35
  %566 = extractvalue { float, float, float, float } %562, 3, !dbg !35
  %567 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %373, i32 %374, i32 %375, i32 %376, i32 %518, i32 %519) #1, !dbg !35
  %568 = extractvalue { float, float, float, float } %567, 0, !dbg !35
  %569 = extractvalue { float, float, float, float } %567, 1, !dbg !35
  %570 = extractvalue { float, float, float, float } %567, 2, !dbg !35
  %571 = extractvalue { float, float, float, float } %567, 3, !dbg !35
  %572 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %373, i32 %374, i32 %375, i32 %376, i32 %534, i32 %535) #1, !dbg !35
  %573 = extractvalue { float, float, float, float } %572, 0, !dbg !35
  %574 = extractvalue { float, float, float, float } %572, 1, !dbg !35
  %575 = extractvalue { float, float, float, float } %572, 2, !dbg !35
  %576 = extractvalue { float, float, float, float } %572, 3, !dbg !35
  %577 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %310, float %311, float %312, float %313, i32 %373, i32 %374, i32 %375, i32 %376, i32 %550, i32 %551) #1, !dbg !35
  %578 = extractvalue { float, float, float, float } %577, 0, !dbg !35
  %579 = extractvalue { float, float, float, float } %577, 1, !dbg !35
  %580 = extractvalue { float, float, float, float } %577, 2, !dbg !35
  %581 = extractvalue { float, float, float, float } %577, 3, !dbg !35
  %582 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %314, float %315, float %316, float %317, i32 %405, i32 %406, i32 %407, i32 %408, i32 %502, i32 %503) #1, !dbg !35
  %583 = extractvalue { float, float, float, float } %582, 0, !dbg !35
  %584 = extractvalue { float, float, float, float } %582, 1, !dbg !35
  %585 = extractvalue { float, float, float, float } %582, 2, !dbg !35
  %586 = extractvalue { float, float, float, float } %582, 3, !dbg !35
  %587 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %405, i32 %406, i32 %407, i32 %408, i32 %518, i32 %519) #1, !dbg !35
  %588 = extractvalue { float, float, float, float } %587, 0, !dbg !35
  %589 = extractvalue { float, float, float, float } %587, 1, !dbg !35
  %590 = extractvalue { float, float, float, float } %587, 2, !dbg !35
  %591 = extractvalue { float, float, float, float } %587, 3, !dbg !35
  %592 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %405, i32 %406, i32 %407, i32 %408, i32 %534, i32 %535) #1, !dbg !35
  %593 = extractvalue { float, float, float, float } %592, 0, !dbg !35
  %594 = extractvalue { float, float, float, float } %592, 1, !dbg !35
  %595 = extractvalue { float, float, float, float } %592, 2, !dbg !35
  %596 = extractvalue { float, float, float, float } %592, 3, !dbg !35
  %597 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %405, i32 %406, i32 %407, i32 %408, i32 %550, i32 %551) #1, !dbg !35
  %598 = extractvalue { float, float, float, float } %597, 0, !dbg !35
  %599 = extractvalue { float, float, float, float } %597, 1, !dbg !35
  %600 = extractvalue { float, float, float, float } %597, 2, !dbg !35
  %601 = extractvalue { float, float, float, float } %597, 3, !dbg !35
  %602 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %330, float %331, float %332, float %333, i32 %437, i32 %438, i32 %439, i32 %440, i32 %502, i32 %503) #1, !dbg !35
  %603 = extractvalue { float, float, float, float } %602, 0, !dbg !35
  %604 = extractvalue { float, float, float, float } %602, 1, !dbg !35
  %605 = extractvalue { float, float, float, float } %602, 2, !dbg !35
  %606 = extractvalue { float, float, float, float } %602, 3, !dbg !35
  %607 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %437, i32 %438, i32 %439, i32 %440, i32 %518, i32 %519) #1, !dbg !35
  %608 = extractvalue { float, float, float, float } %607, 0, !dbg !35
  %609 = extractvalue { float, float, float, float } %607, 1, !dbg !35
  %610 = extractvalue { float, float, float, float } %607, 2, !dbg !35
  %611 = extractvalue { float, float, float, float } %607, 3, !dbg !35
  %612 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %338, float %339, float %340, float %341, i32 %437, i32 %438, i32 %439, i32 %440, i32 %534, i32 %535) #1, !dbg !35
  %613 = extractvalue { float, float, float, float } %612, 0, !dbg !35
  %614 = extractvalue { float, float, float, float } %612, 1, !dbg !35
  %615 = extractvalue { float, float, float, float } %612, 2, !dbg !35
  %616 = extractvalue { float, float, float, float } %612, 3, !dbg !35
  %617 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %437, i32 %438, i32 %439, i32 %440, i32 %550, i32 %551) #1, !dbg !35
  %618 = extractvalue { float, float, float, float } %617, 0, !dbg !35
  %619 = extractvalue { float, float, float, float } %617, 1, !dbg !35
  %620 = extractvalue { float, float, float, float } %617, 2, !dbg !35
  %621 = extractvalue { float, float, float, float } %617, 3, !dbg !35
  %622 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %346, float %347, float %348, float %349, i32 %469, i32 %470, i32 %471, i32 %472, i32 %502, i32 %503) #1, !dbg !35
  %623 = extractvalue { float, float, float, float } %622, 0, !dbg !35
  %624 = extractvalue { float, float, float, float } %622, 1, !dbg !35
  %625 = extractvalue { float, float, float, float } %622, 2, !dbg !35
  %626 = extractvalue { float, float, float, float } %622, 3, !dbg !35
  %627 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %350, float %351, float %352, float %353, i32 %469, i32 %470, i32 %471, i32 %472, i32 %518, i32 %519) #1, !dbg !35
  %628 = extractvalue { float, float, float, float } %627, 0, !dbg !35
  %629 = extractvalue { float, float, float, float } %627, 1, !dbg !35
  %630 = extractvalue { float, float, float, float } %627, 2, !dbg !35
  %631 = extractvalue { float, float, float, float } %627, 3, !dbg !35
  %632 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %469, i32 %470, i32 %471, i32 %472, i32 %534, i32 %535) #1, !dbg !35
  %633 = extractvalue { float, float, float, float } %632, 0, !dbg !35
  %634 = extractvalue { float, float, float, float } %632, 1, !dbg !35
  %635 = extractvalue { float, float, float, float } %632, 2, !dbg !35
  %636 = extractvalue { float, float, float, float } %632, 3, !dbg !35
  %637 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %358, float %359, float %360, float %361, i32 %469, i32 %470, i32 %471, i32 %472, i32 %550, i32 %551) #1, !dbg !35
  %638 = extractvalue { float, float, float, float } %637, 0, !dbg !35
  %639 = extractvalue { float, float, float, float } %637, 1, !dbg !35
  %640 = extractvalue { float, float, float, float } %637, 2, !dbg !35
  %641 = extractvalue { float, float, float, float } %637, 3, !dbg !35
  %642 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %563, float %564, float %565, float %566, i32 %381, i32 %382, i32 %383, i32 %384, i32 %504, i32 %505) #1, !dbg !35
  %643 = extractvalue { float, float, float, float } %642, 0, !dbg !35
  %644 = extractvalue { float, float, float, float } %642, 1, !dbg !35
  %645 = extractvalue { float, float, float, float } %642, 2, !dbg !35
  %646 = extractvalue { float, float, float, float } %642, 3, !dbg !35
  %647 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %568, float %569, float %570, float %571, i32 %381, i32 %382, i32 %383, i32 %384, i32 %520, i32 %521) #1, !dbg !35
  %648 = extractvalue { float, float, float, float } %647, 0, !dbg !35
  %649 = extractvalue { float, float, float, float } %647, 1, !dbg !35
  %650 = extractvalue { float, float, float, float } %647, 2, !dbg !35
  %651 = extractvalue { float, float, float, float } %647, 3, !dbg !35
  %652 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %573, float %574, float %575, float %576, i32 %381, i32 %382, i32 %383, i32 %384, i32 %536, i32 %537) #1, !dbg !35
  %653 = extractvalue { float, float, float, float } %652, 0, !dbg !35
  %654 = extractvalue { float, float, float, float } %652, 1, !dbg !35
  %655 = extractvalue { float, float, float, float } %652, 2, !dbg !35
  %656 = extractvalue { float, float, float, float } %652, 3, !dbg !35
  %657 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %578, float %579, float %580, float %581, i32 %381, i32 %382, i32 %383, i32 %384, i32 %552, i32 %553) #1, !dbg !35
  %658 = extractvalue { float, float, float, float } %657, 0, !dbg !35
  %659 = extractvalue { float, float, float, float } %657, 1, !dbg !35
  %660 = extractvalue { float, float, float, float } %657, 2, !dbg !35
  %661 = extractvalue { float, float, float, float } %657, 3, !dbg !35
  %662 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %583, float %584, float %585, float %586, i32 %413, i32 %414, i32 %415, i32 %416, i32 %504, i32 %505) #1, !dbg !35
  %663 = extractvalue { float, float, float, float } %662, 0, !dbg !35
  %664 = extractvalue { float, float, float, float } %662, 1, !dbg !35
  %665 = extractvalue { float, float, float, float } %662, 2, !dbg !35
  %666 = extractvalue { float, float, float, float } %662, 3, !dbg !35
  %667 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %588, float %589, float %590, float %591, i32 %413, i32 %414, i32 %415, i32 %416, i32 %520, i32 %521) #1, !dbg !35
  %668 = extractvalue { float, float, float, float } %667, 0, !dbg !35
  %669 = extractvalue { float, float, float, float } %667, 1, !dbg !35
  %670 = extractvalue { float, float, float, float } %667, 2, !dbg !35
  %671 = extractvalue { float, float, float, float } %667, 3, !dbg !35
  %672 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %593, float %594, float %595, float %596, i32 %413, i32 %414, i32 %415, i32 %416, i32 %536, i32 %537) #1, !dbg !35
  %673 = extractvalue { float, float, float, float } %672, 0, !dbg !35
  %674 = extractvalue { float, float, float, float } %672, 1, !dbg !35
  %675 = extractvalue { float, float, float, float } %672, 2, !dbg !35
  %676 = extractvalue { float, float, float, float } %672, 3, !dbg !35
  %677 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %598, float %599, float %600, float %601, i32 %413, i32 %414, i32 %415, i32 %416, i32 %552, i32 %553) #1, !dbg !35
  %678 = extractvalue { float, float, float, float } %677, 0, !dbg !35
  %679 = extractvalue { float, float, float, float } %677, 1, !dbg !35
  %680 = extractvalue { float, float, float, float } %677, 2, !dbg !35
  %681 = extractvalue { float, float, float, float } %677, 3, !dbg !35
  %682 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %603, float %604, float %605, float %606, i32 %445, i32 %446, i32 %447, i32 %448, i32 %504, i32 %505) #1, !dbg !35
  %683 = extractvalue { float, float, float, float } %682, 0, !dbg !35
  %684 = extractvalue { float, float, float, float } %682, 1, !dbg !35
  %685 = extractvalue { float, float, float, float } %682, 2, !dbg !35
  %686 = extractvalue { float, float, float, float } %682, 3, !dbg !35
  %687 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %608, float %609, float %610, float %611, i32 %445, i32 %446, i32 %447, i32 %448, i32 %520, i32 %521) #1, !dbg !35
  %688 = extractvalue { float, float, float, float } %687, 0, !dbg !35
  %689 = extractvalue { float, float, float, float } %687, 1, !dbg !35
  %690 = extractvalue { float, float, float, float } %687, 2, !dbg !35
  %691 = extractvalue { float, float, float, float } %687, 3, !dbg !35
  %692 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %613, float %614, float %615, float %616, i32 %445, i32 %446, i32 %447, i32 %448, i32 %536, i32 %537) #1, !dbg !35
  %693 = extractvalue { float, float, float, float } %692, 0, !dbg !35
  %694 = extractvalue { float, float, float, float } %692, 1, !dbg !35
  %695 = extractvalue { float, float, float, float } %692, 2, !dbg !35
  %696 = extractvalue { float, float, float, float } %692, 3, !dbg !35
  %697 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %618, float %619, float %620, float %621, i32 %445, i32 %446, i32 %447, i32 %448, i32 %552, i32 %553) #1, !dbg !35
  %698 = extractvalue { float, float, float, float } %697, 0, !dbg !35
  %699 = extractvalue { float, float, float, float } %697, 1, !dbg !35
  %700 = extractvalue { float, float, float, float } %697, 2, !dbg !35
  %701 = extractvalue { float, float, float, float } %697, 3, !dbg !35
  %702 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %623, float %624, float %625, float %626, i32 %477, i32 %478, i32 %479, i32 %480, i32 %504, i32 %505) #1, !dbg !35
  %703 = extractvalue { float, float, float, float } %702, 0, !dbg !35
  %704 = extractvalue { float, float, float, float } %702, 1, !dbg !35
  %705 = extractvalue { float, float, float, float } %702, 2, !dbg !35
  %706 = extractvalue { float, float, float, float } %702, 3, !dbg !35
  %707 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %628, float %629, float %630, float %631, i32 %477, i32 %478, i32 %479, i32 %480, i32 %520, i32 %521) #1, !dbg !35
  %708 = extractvalue { float, float, float, float } %707, 0, !dbg !35
  %709 = extractvalue { float, float, float, float } %707, 1, !dbg !35
  %710 = extractvalue { float, float, float, float } %707, 2, !dbg !35
  %711 = extractvalue { float, float, float, float } %707, 3, !dbg !35
  %712 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %633, float %634, float %635, float %636, i32 %477, i32 %478, i32 %479, i32 %480, i32 %536, i32 %537) #1, !dbg !35
  %713 = extractvalue { float, float, float, float } %712, 0, !dbg !35
  %714 = extractvalue { float, float, float, float } %712, 1, !dbg !35
  %715 = extractvalue { float, float, float, float } %712, 2, !dbg !35
  %716 = extractvalue { float, float, float, float } %712, 3, !dbg !35
  %717 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %638, float %639, float %640, float %641, i32 %477, i32 %478, i32 %479, i32 %480, i32 %552, i32 %553) #1, !dbg !35
  %718 = extractvalue { float, float, float, float } %717, 0, !dbg !35
  %719 = extractvalue { float, float, float, float } %717, 1, !dbg !35
  %720 = extractvalue { float, float, float, float } %717, 2, !dbg !35
  %721 = extractvalue { float, float, float, float } %717, 3, !dbg !35
  %722 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %643, float %644, float %645, float %646, i32 %389, i32 %390, i32 %391, i32 %392, i32 %510, i32 %511) #1, !dbg !35
  %723 = extractvalue { float, float, float, float } %722, 0, !dbg !35
  %724 = extractvalue { float, float, float, float } %722, 1, !dbg !35
  %725 = extractvalue { float, float, float, float } %722, 2, !dbg !35
  %726 = extractvalue { float, float, float, float } %722, 3, !dbg !35
  %727 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %648, float %649, float %650, float %651, i32 %389, i32 %390, i32 %391, i32 %392, i32 %526, i32 %527) #1, !dbg !35
  %728 = extractvalue { float, float, float, float } %727, 0, !dbg !35
  %729 = extractvalue { float, float, float, float } %727, 1, !dbg !35
  %730 = extractvalue { float, float, float, float } %727, 2, !dbg !35
  %731 = extractvalue { float, float, float, float } %727, 3, !dbg !35
  %732 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %653, float %654, float %655, float %656, i32 %389, i32 %390, i32 %391, i32 %392, i32 %542, i32 %543) #1, !dbg !35
  %733 = extractvalue { float, float, float, float } %732, 0, !dbg !35
  %734 = extractvalue { float, float, float, float } %732, 1, !dbg !35
  %735 = extractvalue { float, float, float, float } %732, 2, !dbg !35
  %736 = extractvalue { float, float, float, float } %732, 3, !dbg !35
  %737 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %658, float %659, float %660, float %661, i32 %389, i32 %390, i32 %391, i32 %392, i32 %558, i32 %559) #1, !dbg !35
  %738 = extractvalue { float, float, float, float } %737, 0, !dbg !35
  %739 = extractvalue { float, float, float, float } %737, 1, !dbg !35
  %740 = extractvalue { float, float, float, float } %737, 2, !dbg !35
  %741 = extractvalue { float, float, float, float } %737, 3, !dbg !35
  %742 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %663, float %664, float %665, float %666, i32 %421, i32 %422, i32 %423, i32 %424, i32 %510, i32 %511) #1, !dbg !35
  %743 = extractvalue { float, float, float, float } %742, 0, !dbg !35
  %744 = extractvalue { float, float, float, float } %742, 1, !dbg !35
  %745 = extractvalue { float, float, float, float } %742, 2, !dbg !35
  %746 = extractvalue { float, float, float, float } %742, 3, !dbg !35
  %747 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %668, float %669, float %670, float %671, i32 %421, i32 %422, i32 %423, i32 %424, i32 %526, i32 %527) #1, !dbg !35
  %748 = extractvalue { float, float, float, float } %747, 0, !dbg !35
  %749 = extractvalue { float, float, float, float } %747, 1, !dbg !35
  %750 = extractvalue { float, float, float, float } %747, 2, !dbg !35
  %751 = extractvalue { float, float, float, float } %747, 3, !dbg !35
  %752 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %673, float %674, float %675, float %676, i32 %421, i32 %422, i32 %423, i32 %424, i32 %542, i32 %543) #1, !dbg !35
  %753 = extractvalue { float, float, float, float } %752, 0, !dbg !35
  %754 = extractvalue { float, float, float, float } %752, 1, !dbg !35
  %755 = extractvalue { float, float, float, float } %752, 2, !dbg !35
  %756 = extractvalue { float, float, float, float } %752, 3, !dbg !35
  %757 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %678, float %679, float %680, float %681, i32 %421, i32 %422, i32 %423, i32 %424, i32 %558, i32 %559) #1, !dbg !35
  %758 = extractvalue { float, float, float, float } %757, 0, !dbg !35
  %759 = extractvalue { float, float, float, float } %757, 1, !dbg !35
  %760 = extractvalue { float, float, float, float } %757, 2, !dbg !35
  %761 = extractvalue { float, float, float, float } %757, 3, !dbg !35
  %762 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %683, float %684, float %685, float %686, i32 %453, i32 %454, i32 %455, i32 %456, i32 %510, i32 %511) #1, !dbg !35
  %763 = extractvalue { float, float, float, float } %762, 0, !dbg !35
  %764 = extractvalue { float, float, float, float } %762, 1, !dbg !35
  %765 = extractvalue { float, float, float, float } %762, 2, !dbg !35
  %766 = extractvalue { float, float, float, float } %762, 3, !dbg !35
  %767 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %688, float %689, float %690, float %691, i32 %453, i32 %454, i32 %455, i32 %456, i32 %526, i32 %527) #1, !dbg !35
  %768 = extractvalue { float, float, float, float } %767, 0, !dbg !35
  %769 = extractvalue { float, float, float, float } %767, 1, !dbg !35
  %770 = extractvalue { float, float, float, float } %767, 2, !dbg !35
  %771 = extractvalue { float, float, float, float } %767, 3, !dbg !35
  %772 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %693, float %694, float %695, float %696, i32 %453, i32 %454, i32 %455, i32 %456, i32 %542, i32 %543) #1, !dbg !35
  %773 = extractvalue { float, float, float, float } %772, 0, !dbg !35
  %774 = extractvalue { float, float, float, float } %772, 1, !dbg !35
  %775 = extractvalue { float, float, float, float } %772, 2, !dbg !35
  %776 = extractvalue { float, float, float, float } %772, 3, !dbg !35
  %777 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %698, float %699, float %700, float %701, i32 %453, i32 %454, i32 %455, i32 %456, i32 %558, i32 %559) #1, !dbg !35
  %778 = extractvalue { float, float, float, float } %777, 0, !dbg !35
  %779 = extractvalue { float, float, float, float } %777, 1, !dbg !35
  %780 = extractvalue { float, float, float, float } %777, 2, !dbg !35
  %781 = extractvalue { float, float, float, float } %777, 3, !dbg !35
  %782 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %703, float %704, float %705, float %706, i32 %485, i32 %486, i32 %487, i32 %488, i32 %510, i32 %511) #1, !dbg !35
  %783 = extractvalue { float, float, float, float } %782, 0, !dbg !35
  %784 = extractvalue { float, float, float, float } %782, 1, !dbg !35
  %785 = extractvalue { float, float, float, float } %782, 2, !dbg !35
  %786 = extractvalue { float, float, float, float } %782, 3, !dbg !35
  %787 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %708, float %709, float %710, float %711, i32 %485, i32 %486, i32 %487, i32 %488, i32 %526, i32 %527) #1, !dbg !35
  %788 = extractvalue { float, float, float, float } %787, 0, !dbg !35
  %789 = extractvalue { float, float, float, float } %787, 1, !dbg !35
  %790 = extractvalue { float, float, float, float } %787, 2, !dbg !35
  %791 = extractvalue { float, float, float, float } %787, 3, !dbg !35
  %792 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %713, float %714, float %715, float %716, i32 %485, i32 %486, i32 %487, i32 %488, i32 %542, i32 %543) #1, !dbg !35
  %793 = extractvalue { float, float, float, float } %792, 0, !dbg !35
  %794 = extractvalue { float, float, float, float } %792, 1, !dbg !35
  %795 = extractvalue { float, float, float, float } %792, 2, !dbg !35
  %796 = extractvalue { float, float, float, float } %792, 3, !dbg !35
  %797 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %718, float %719, float %720, float %721, i32 %485, i32 %486, i32 %487, i32 %488, i32 %558, i32 %559) #1, !dbg !35
  %798 = extractvalue { float, float, float, float } %797, 0, !dbg !35
  %799 = extractvalue { float, float, float, float } %797, 1, !dbg !35
  %800 = extractvalue { float, float, float, float } %797, 2, !dbg !35
  %801 = extractvalue { float, float, float, float } %797, 3, !dbg !35
  %802 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %723, float %724, float %725, float %726, i32 %397, i32 %398, i32 %399, i32 %400, i32 %512, i32 %513) #1, !dbg !35
  %803 = extractvalue { float, float, float, float } %802, 0, !dbg !35
  %804 = extractvalue { float, float, float, float } %802, 1, !dbg !35
  %805 = extractvalue { float, float, float, float } %802, 2, !dbg !35
  %806 = extractvalue { float, float, float, float } %802, 3, !dbg !35
  %807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %728, float %729, float %730, float %731, i32 %397, i32 %398, i32 %399, i32 %400, i32 %528, i32 %529) #1, !dbg !35
  %808 = extractvalue { float, float, float, float } %807, 0, !dbg !35
  %809 = extractvalue { float, float, float, float } %807, 1, !dbg !35
  %810 = extractvalue { float, float, float, float } %807, 2, !dbg !35
  %811 = extractvalue { float, float, float, float } %807, 3, !dbg !35
  %812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %733, float %734, float %735, float %736, i32 %397, i32 %398, i32 %399, i32 %400, i32 %544, i32 %545) #1, !dbg !35
  %813 = extractvalue { float, float, float, float } %812, 0, !dbg !35
  %814 = extractvalue { float, float, float, float } %812, 1, !dbg !35
  %815 = extractvalue { float, float, float, float } %812, 2, !dbg !35
  %816 = extractvalue { float, float, float, float } %812, 3, !dbg !35
  %817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %738, float %739, float %740, float %741, i32 %397, i32 %398, i32 %399, i32 %400, i32 %560, i32 %561) #1, !dbg !35
  %818 = extractvalue { float, float, float, float } %817, 0, !dbg !35
  %819 = extractvalue { float, float, float, float } %817, 1, !dbg !35
  %820 = extractvalue { float, float, float, float } %817, 2, !dbg !35
  %821 = extractvalue { float, float, float, float } %817, 3, !dbg !35
  %822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %743, float %744, float %745, float %746, i32 %429, i32 %430, i32 %431, i32 %432, i32 %512, i32 %513) #1, !dbg !35
  %823 = extractvalue { float, float, float, float } %822, 0, !dbg !35
  %824 = extractvalue { float, float, float, float } %822, 1, !dbg !35
  %825 = extractvalue { float, float, float, float } %822, 2, !dbg !35
  %826 = extractvalue { float, float, float, float } %822, 3, !dbg !35
  %827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %748, float %749, float %750, float %751, i32 %429, i32 %430, i32 %431, i32 %432, i32 %528, i32 %529) #1, !dbg !35
  %828 = extractvalue { float, float, float, float } %827, 0, !dbg !35
  %829 = extractvalue { float, float, float, float } %827, 1, !dbg !35
  %830 = extractvalue { float, float, float, float } %827, 2, !dbg !35
  %831 = extractvalue { float, float, float, float } %827, 3, !dbg !35
  %832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %753, float %754, float %755, float %756, i32 %429, i32 %430, i32 %431, i32 %432, i32 %544, i32 %545) #1, !dbg !35
  %833 = extractvalue { float, float, float, float } %832, 0, !dbg !35
  %834 = extractvalue { float, float, float, float } %832, 1, !dbg !35
  %835 = extractvalue { float, float, float, float } %832, 2, !dbg !35
  %836 = extractvalue { float, float, float, float } %832, 3, !dbg !35
  %837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %758, float %759, float %760, float %761, i32 %429, i32 %430, i32 %431, i32 %432, i32 %560, i32 %561) #1, !dbg !35
  %838 = extractvalue { float, float, float, float } %837, 0, !dbg !35
  %839 = extractvalue { float, float, float, float } %837, 1, !dbg !35
  %840 = extractvalue { float, float, float, float } %837, 2, !dbg !35
  %841 = extractvalue { float, float, float, float } %837, 3, !dbg !35
  %842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %763, float %764, float %765, float %766, i32 %461, i32 %462, i32 %463, i32 %464, i32 %512, i32 %513) #1, !dbg !35
  %843 = extractvalue { float, float, float, float } %842, 0, !dbg !35
  %844 = extractvalue { float, float, float, float } %842, 1, !dbg !35
  %845 = extractvalue { float, float, float, float } %842, 2, !dbg !35
  %846 = extractvalue { float, float, float, float } %842, 3, !dbg !35
  %847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %768, float %769, float %770, float %771, i32 %461, i32 %462, i32 %463, i32 %464, i32 %528, i32 %529) #1, !dbg !35
  %848 = extractvalue { float, float, float, float } %847, 0, !dbg !35
  %849 = extractvalue { float, float, float, float } %847, 1, !dbg !35
  %850 = extractvalue { float, float, float, float } %847, 2, !dbg !35
  %851 = extractvalue { float, float, float, float } %847, 3, !dbg !35
  %852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %773, float %774, float %775, float %776, i32 %461, i32 %462, i32 %463, i32 %464, i32 %544, i32 %545) #1, !dbg !35
  %853 = extractvalue { float, float, float, float } %852, 0, !dbg !35
  %854 = extractvalue { float, float, float, float } %852, 1, !dbg !35
  %855 = extractvalue { float, float, float, float } %852, 2, !dbg !35
  %856 = extractvalue { float, float, float, float } %852, 3, !dbg !35
  %857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %778, float %779, float %780, float %781, i32 %461, i32 %462, i32 %463, i32 %464, i32 %560, i32 %561) #1, !dbg !35
  %858 = extractvalue { float, float, float, float } %857, 0, !dbg !35
  %859 = extractvalue { float, float, float, float } %857, 1, !dbg !35
  %860 = extractvalue { float, float, float, float } %857, 2, !dbg !35
  %861 = extractvalue { float, float, float, float } %857, 3, !dbg !35
  %862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %783, float %784, float %785, float %786, i32 %493, i32 %494, i32 %495, i32 %496, i32 %512, i32 %513) #1, !dbg !35
  %863 = extractvalue { float, float, float, float } %862, 0, !dbg !35
  %864 = extractvalue { float, float, float, float } %862, 1, !dbg !35
  %865 = extractvalue { float, float, float, float } %862, 2, !dbg !35
  %866 = extractvalue { float, float, float, float } %862, 3, !dbg !35
  %867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %788, float %789, float %790, float %791, i32 %493, i32 %494, i32 %495, i32 %496, i32 %528, i32 %529) #1, !dbg !35
  %868 = extractvalue { float, float, float, float } %867, 0, !dbg !35
  %869 = extractvalue { float, float, float, float } %867, 1, !dbg !35
  %870 = extractvalue { float, float, float, float } %867, 2, !dbg !35
  %871 = extractvalue { float, float, float, float } %867, 3, !dbg !35
  %872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %793, float %794, float %795, float %796, i32 %493, i32 %494, i32 %495, i32 %496, i32 %544, i32 %545) #1, !dbg !35
  %873 = extractvalue { float, float, float, float } %872, 0, !dbg !35
  %874 = extractvalue { float, float, float, float } %872, 1, !dbg !35
  %875 = extractvalue { float, float, float, float } %872, 2, !dbg !35
  %876 = extractvalue { float, float, float, float } %872, 3, !dbg !35
  %877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %798, float %799, float %800, float %801, i32 %493, i32 %494, i32 %495, i32 %496, i32 %560, i32 %561) #1, !dbg !35
  %878 = extractvalue { float, float, float, float } %877, 0, !dbg !35
  %879 = extractvalue { float, float, float, float } %877, 1, !dbg !35
  %880 = extractvalue { float, float, float, float } %877, 2, !dbg !35
  %881 = extractvalue { float, float, float, float } %877, 3, !dbg !35
  %882 = add i32 %297, 1, !dbg !34
  %883 = icmp slt i32 %882, 4, !dbg !34
  %884 = select i1 %883, i32 %882, i32 0, !dbg !34
  %885 = shl nuw nsw i64 %indvars.iv, 6, !dbg !36
  %886 = add nuw nsw i64 %885, %286
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %886, !dbg !28
  %gep304 = getelementptr bfloat, ptr addrspace(1) %invariant.gep303, i64 %886, !dbg !28
  %gep306 = getelementptr bfloat, ptr addrspace(1) %invariant.gep305, i64 %886, !dbg !28
  %gep308 = getelementptr bfloat, ptr addrspace(1) %invariant.gep307, i64 %886, !dbg !28
  %887 = shl i32 %884, 13, !dbg !29
  %888 = sext i32 %887 to i64, !dbg !29
  %889 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %888, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %890 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %889, i64 %74, !dbg !29
  %891 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %889, i64 %77, !dbg !29
  %892 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %889, i64 %80, !dbg !29
  %893 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %889, i64 %83, !dbg !29
  %894 = select i1 %362, i32 16, i32 0, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %890, ptr addrspace(1) %gep, i32 %894) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %891, ptr addrspace(1) %gep304, i32 %894) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %892, ptr addrspace(1) %gep306, i32 %894) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %893, ptr addrspace(1) %gep308, i32 %894) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep310 = getelementptr bfloat, ptr addrspace(1) %invariant.gep309, i64 %886, !dbg !31
  %gep312 = getelementptr bfloat, ptr addrspace(1) %invariant.gep311, i64 %886, !dbg !31
  %gep314 = getelementptr bfloat, ptr addrspace(1) %invariant.gep313, i64 %886, !dbg !31
  %gep316 = getelementptr bfloat, ptr addrspace(1) %invariant.gep315, i64 %886, !dbg !31
  %895 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %888, !dbg !32
  %896 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %895, i64 %74, !dbg !32
  %897 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %895, i64 %77, !dbg !32
  %898 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %895, i64 %80, !dbg !32
  %899 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %895, i64 %83, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %896, ptr addrspace(1) %gep310, i32 %894) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %897, ptr addrspace(1) %gep312, i32 %894) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %898, ptr addrspace(1) %gep314, i32 %894) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %899, ptr addrspace(1) %gep316, i32 %894) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %exitcond.not = icmp eq i64 %indvars.iv.next, 12, !dbg !34
  br i1 %exitcond.not, label %900, label %295, !dbg !34

900:                                              ; preds = %295
  %901 = shl nuw nsw i32 %16, 3, !dbg !19
  %902 = or disjoint i32 %32, %901, !dbg !19
  %903 = or disjoint i32 %37, %902, !dbg !22
  %904 = lshr i32 %15, 4, !dbg !19
  %905 = and i32 %904, 15, !dbg !19
  %906 = or disjoint i32 %905, %14, !dbg !20
  %907 = or disjoint i32 %906, 64, !dbg !20
  %908 = or disjoint i32 %906, 48, !dbg !20
  %909 = or disjoint i32 %906, 32, !dbg !20
  %910 = or disjoint i32 %906, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %911 = icmp slt i32 %906, 77, !dbg !37
  %912 = icmp slt i32 %910, 77, !dbg !37
  %913 = icmp slt i32 %909, 77, !dbg !37
  %914 = icmp slt i32 %908, 77, !dbg !37
  %915 = icmp slt i32 %907, 77, !dbg !37
  %916 = icmp slt i32 %14, 0, !dbg !37
  %917 = icmp slt i32 %903, 768, !dbg !38
  %918 = and i1 %911, %917, !dbg !39
  %919 = and i1 %912, %917, !dbg !39
  %920 = and i1 %913, %917, !dbg !39
  %921 = and i1 %914, %917, !dbg !39
  %922 = and i1 %915, %917, !dbg !39
  %923 = and i1 %916, %917, !dbg !39
  %924 = mul i32 %906, 768, !dbg !40
  %925 = mul i32 %910, 768, !dbg !40
  %926 = mul i32 %909, 768, !dbg !40
  %927 = mul i32 %908, 768, !dbg !40
  %928 = mul i32 %907, 768, !dbg !40
  %929 = add i32 %924, 61440, !dbg !40
  %930 = add i32 %924, 73728, !dbg !40
  %931 = add i32 %924, 86016, !dbg !40
  %932 = add i32 %924, %903, !dbg !41
  %933 = add i32 %925, %903, !dbg !41
  %934 = add i32 %926, %903, !dbg !41
  %935 = add i32 %927, %903, !dbg !41
  %936 = add i32 %928, %903, !dbg !41
  %937 = add i32 %929, %903, !dbg !41
  %938 = add i32 %930, %903, !dbg !41
  %939 = add i32 %931, %903, !dbg !41
  %940 = sext i32 %932 to i64, !dbg !42
  %941 = getelementptr bfloat, ptr addrspace(1) %2, i64 %940, !dbg !42
  %942 = sext i32 %933 to i64, !dbg !42
  %943 = getelementptr bfloat, ptr addrspace(1) %2, i64 %942, !dbg !42
  %944 = sext i32 %934 to i64, !dbg !42
  %945 = getelementptr bfloat, ptr addrspace(1) %2, i64 %944, !dbg !42
  %946 = sext i32 %935 to i64, !dbg !42
  %947 = getelementptr bfloat, ptr addrspace(1) %2, i64 %946, !dbg !42
  %948 = sext i32 %936 to i64, !dbg !42
  %949 = getelementptr bfloat, ptr addrspace(1) %2, i64 %948, !dbg !42
  %950 = sext i32 %937 to i64, !dbg !42
  %951 = getelementptr bfloat, ptr addrspace(1) %2, i64 %950, !dbg !42
  %952 = sext i32 %938 to i64, !dbg !42
  %953 = getelementptr bfloat, ptr addrspace(1) %2, i64 %952, !dbg !42
  %954 = sext i32 %939 to i64, !dbg !42
  %955 = getelementptr bfloat, ptr addrspace(1) %2, i64 %954, !dbg !42
  %956 = fptrunc float %803 to bfloat, !dbg !43
  %957 = fptrunc float %804 to bfloat, !dbg !43
  %958 = fptrunc float %805 to bfloat, !dbg !43
  %959 = fptrunc float %806 to bfloat, !dbg !43
  %960 = fptrunc float %808 to bfloat, !dbg !43
  %961 = fptrunc float %809 to bfloat, !dbg !43
  %962 = fptrunc float %810 to bfloat, !dbg !43
  %963 = fptrunc float %811 to bfloat, !dbg !43
  %964 = fptrunc float %813 to bfloat, !dbg !43
  %965 = fptrunc float %814 to bfloat, !dbg !43
  %966 = fptrunc float %815 to bfloat, !dbg !43
  %967 = fptrunc float %816 to bfloat, !dbg !43
  %968 = fptrunc float %818 to bfloat, !dbg !43
  %969 = fptrunc float %819 to bfloat, !dbg !43
  %970 = fptrunc float %820 to bfloat, !dbg !43
  %971 = fptrunc float %821 to bfloat, !dbg !43
  %972 = fptrunc float %823 to bfloat, !dbg !43
  %973 = fptrunc float %824 to bfloat, !dbg !43
  %974 = fptrunc float %825 to bfloat, !dbg !43
  %975 = fptrunc float %826 to bfloat, !dbg !43
  %976 = fptrunc float %828 to bfloat, !dbg !43
  %977 = fptrunc float %829 to bfloat, !dbg !43
  %978 = fptrunc float %830 to bfloat, !dbg !43
  %979 = fptrunc float %831 to bfloat, !dbg !43
  %980 = fptrunc float %833 to bfloat, !dbg !43
  %981 = fptrunc float %834 to bfloat, !dbg !43
  %982 = fptrunc float %835 to bfloat, !dbg !43
  %983 = fptrunc float %836 to bfloat, !dbg !43
  %984 = fptrunc float %838 to bfloat, !dbg !43
  %985 = fptrunc float %839 to bfloat, !dbg !43
  %986 = fptrunc float %840 to bfloat, !dbg !43
  %987 = fptrunc float %841 to bfloat, !dbg !43
  %988 = fptrunc float %843 to bfloat, !dbg !43
  %989 = fptrunc float %844 to bfloat, !dbg !43
  %990 = fptrunc float %845 to bfloat, !dbg !43
  %991 = fptrunc float %846 to bfloat, !dbg !43
  %992 = fptrunc float %848 to bfloat, !dbg !43
  %993 = fptrunc float %849 to bfloat, !dbg !43
  %994 = fptrunc float %850 to bfloat, !dbg !43
  %995 = fptrunc float %851 to bfloat, !dbg !43
  %996 = fptrunc float %853 to bfloat, !dbg !43
  %997 = fptrunc float %854 to bfloat, !dbg !43
  %998 = fptrunc float %855 to bfloat, !dbg !43
  %999 = fptrunc float %856 to bfloat, !dbg !43
  %1000 = fptrunc float %858 to bfloat, !dbg !43
  %1001 = fptrunc float %859 to bfloat, !dbg !43
  %1002 = fptrunc float %860 to bfloat, !dbg !43
  %1003 = fptrunc float %861 to bfloat, !dbg !43
  %1004 = fptrunc float %863 to bfloat, !dbg !43
  %1005 = fptrunc float %864 to bfloat, !dbg !43
  %1006 = fptrunc float %865 to bfloat, !dbg !43
  %1007 = fptrunc float %866 to bfloat, !dbg !43
  %1008 = fptrunc float %868 to bfloat, !dbg !43
  %1009 = fptrunc float %869 to bfloat, !dbg !43
  %1010 = fptrunc float %870 to bfloat, !dbg !43
  %1011 = fptrunc float %871 to bfloat, !dbg !43
  %1012 = fptrunc float %873 to bfloat, !dbg !43
  %1013 = fptrunc float %874 to bfloat, !dbg !43
  %1014 = fptrunc float %875 to bfloat, !dbg !43
  %1015 = fptrunc float %876 to bfloat, !dbg !43
  %1016 = fptrunc float %878 to bfloat, !dbg !43
  %1017 = fptrunc float %879 to bfloat, !dbg !43
  %1018 = fptrunc float %880 to bfloat, !dbg !43
  %1019 = fptrunc float %881 to bfloat, !dbg !43
  %1020 = shl i32 %15, 1, !dbg !43
  %1021 = and i32 %1020, 6, !dbg !43
  %1022 = shl i32 %15, 5, !dbg !43
  %1023 = and i32 %1022, 384, !dbg !43
  %1024 = or disjoint i32 %1023, %1021, !dbg !43
  %1025 = shl nuw nsw i32 %17, 5, !dbg !43
  %1026 = or disjoint i32 %1024, %1025, !dbg !43
  %1027 = and i32 %255, 24, !dbg !43
  %1028 = or disjoint i32 %1026, %1027, !dbg !43
  %1029 = shl nuw nsw i32 %21, 4, !dbg !43
  %1030 = or disjoint i32 %1028, %1029, !dbg !43
  %1031 = and i32 %27, 2040, !dbg !43
  %1032 = lshr i32 %1030, 4, !dbg !43
  %1033 = and i32 %1032, 268435448, !dbg !43
  %1034 = add nuw nsw i32 %1033, %1030, !dbg !43
  %1035 = zext nneg i32 %1034 to i64, !dbg !43
  %1036 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1035, !dbg !43
  %1037 = bitcast bfloat %956 to i16, !dbg !43
  %1038 = bitcast bfloat %957 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1036, i16 %1037, i16 %1038, i1 true) #1, !dbg !43
  %1039 = or disjoint i32 %1030, 1024, !dbg !43
  %1040 = lshr i32 %1039, 4, !dbg !43
  %1041 = and i32 %1040, 268435448, !dbg !43
  %1042 = add nuw nsw i32 %1041, %1039, !dbg !43
  %1043 = zext nneg i32 %1042 to i64, !dbg !43
  %1044 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1043, !dbg !43
  %1045 = bitcast bfloat %958 to i16, !dbg !43
  %1046 = bitcast bfloat %959 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1045, i16 %1046, i1 true) #1, !dbg !43
  %1047 = or disjoint i32 %1030, 32, !dbg !43
  %1048 = add nuw nsw i32 %1047, %1033, !dbg !43
  %1049 = zext nneg i32 %1048 to i64, !dbg !43
  %1050 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1049, !dbg !43
  %1051 = bitcast bfloat %960 to i16, !dbg !43
  %1052 = bitcast bfloat %961 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1051, i16 %1052, i1 true) #1, !dbg !43
  %1053 = or disjoint i32 %1030, 1056, !dbg !43
  %1054 = lshr i32 %1053, 4, !dbg !43
  %1055 = and i32 %1054, 268435448, !dbg !43
  %1056 = add nuw nsw i32 %1055, %1053, !dbg !43
  %1057 = zext nneg i32 %1056 to i64, !dbg !43
  %1058 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1057, !dbg !43
  %1059 = bitcast bfloat %962 to i16, !dbg !43
  %1060 = bitcast bfloat %963 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1059, i16 %1060, i1 true) #1, !dbg !43
  %1061 = or disjoint i32 %1030, 64, !dbg !43
  %1062 = add nuw nsw i32 %1061, %1033, !dbg !43
  %1063 = zext nneg i32 %1062 to i64, !dbg !43
  %1064 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1063, !dbg !43
  %1065 = bitcast bfloat %964 to i16, !dbg !43
  %1066 = bitcast bfloat %965 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1065, i16 %1066, i1 true) #1, !dbg !43
  %1067 = or disjoint i32 %1030, 1088, !dbg !43
  %1068 = lshr i32 %1067, 4, !dbg !43
  %1069 = and i32 %1068, 268435448, !dbg !43
  %1070 = add nuw nsw i32 %1069, %1067, !dbg !43
  %1071 = zext nneg i32 %1070 to i64, !dbg !43
  %1072 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1071, !dbg !43
  %1073 = bitcast bfloat %966 to i16, !dbg !43
  %1074 = bitcast bfloat %967 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1073, i16 %1074, i1 true) #1, !dbg !43
  %1075 = or disjoint i32 %1030, 96, !dbg !43
  %1076 = add nuw nsw i32 %1075, %1033, !dbg !43
  %1077 = zext nneg i32 %1076 to i64, !dbg !43
  %1078 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1077, !dbg !43
  %1079 = bitcast bfloat %968 to i16, !dbg !43
  %1080 = bitcast bfloat %969 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1079, i16 %1080, i1 true) #1, !dbg !43
  %1081 = or disjoint i32 %1030, 1120, !dbg !43
  %1082 = lshr i32 %1081, 4, !dbg !43
  %1083 = and i32 %1082, 268435448, !dbg !43
  %1084 = add nuw nsw i32 %1083, %1081, !dbg !43
  %1085 = zext nneg i32 %1084 to i64, !dbg !43
  %1086 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1085, !dbg !43
  %1087 = bitcast bfloat %970 to i16, !dbg !43
  %1088 = bitcast bfloat %971 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1087, i16 %1088, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1089 = lshr i32 %27, 4, !dbg !43
  %1090 = and i32 %1089, 120, !dbg !43
  %1091 = add nuw nsw i32 %1090, %1031, !dbg !43
  %1092 = zext nneg i32 %1091 to i64, !dbg !43
  %1093 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1092, !dbg !43
  %1094 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !43
  %1095 = or disjoint i32 %1031, 2048, !dbg !43
  %1096 = lshr i32 %1095, 4, !dbg !43
  %1097 = and i32 %1096, 248, !dbg !43
  %1098 = add nuw nsw i32 %1097, %1095, !dbg !43
  %1099 = zext nneg i32 %1098 to i64, !dbg !43
  %1100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1099, !dbg !43
  %1101 = load <4 x i32>, ptr addrspace(3) %1100, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1102 = bitcast bfloat %972 to i16, !dbg !43
  %1103 = bitcast bfloat %973 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1036, i16 %1102, i16 %1103, i1 true) #1, !dbg !43
  %1104 = bitcast bfloat %974 to i16, !dbg !43
  %1105 = bitcast bfloat %975 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1104, i16 %1105, i1 true) #1, !dbg !43
  %1106 = bitcast bfloat %976 to i16, !dbg !43
  %1107 = bitcast bfloat %977 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1106, i16 %1107, i1 true) #1, !dbg !43
  %1108 = bitcast bfloat %978 to i16, !dbg !43
  %1109 = bitcast bfloat %979 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1108, i16 %1109, i1 true) #1, !dbg !43
  %1110 = bitcast bfloat %980 to i16, !dbg !43
  %1111 = bitcast bfloat %981 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1110, i16 %1111, i1 true) #1, !dbg !43
  %1112 = bitcast bfloat %982 to i16, !dbg !43
  %1113 = bitcast bfloat %983 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1112, i16 %1113, i1 true) #1, !dbg !43
  %1114 = bitcast bfloat %984 to i16, !dbg !43
  %1115 = bitcast bfloat %985 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1114, i16 %1115, i1 true) #1, !dbg !43
  %1116 = bitcast bfloat %986 to i16, !dbg !43
  %1117 = bitcast bfloat %987 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1116, i16 %1117, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1118 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !43
  %1119 = load <4 x i32>, ptr addrspace(3) %1100, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1120 = bitcast bfloat %988 to i16, !dbg !43
  %1121 = bitcast bfloat %989 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1036, i16 %1120, i16 %1121, i1 true) #1, !dbg !43
  %1122 = bitcast bfloat %990 to i16, !dbg !43
  %1123 = bitcast bfloat %991 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1122, i16 %1123, i1 true) #1, !dbg !43
  %1124 = bitcast bfloat %992 to i16, !dbg !43
  %1125 = bitcast bfloat %993 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1124, i16 %1125, i1 true) #1, !dbg !43
  %1126 = bitcast bfloat %994 to i16, !dbg !43
  %1127 = bitcast bfloat %995 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1126, i16 %1127, i1 true) #1, !dbg !43
  %1128 = bitcast bfloat %996 to i16, !dbg !43
  %1129 = bitcast bfloat %997 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1128, i16 %1129, i1 true) #1, !dbg !43
  %1130 = bitcast bfloat %998 to i16, !dbg !43
  %1131 = bitcast bfloat %999 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1130, i16 %1131, i1 true) #1, !dbg !43
  %1132 = bitcast bfloat %1000 to i16, !dbg !43
  %1133 = bitcast bfloat %1001 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1132, i16 %1133, i1 true) #1, !dbg !43
  %1134 = bitcast bfloat %1002 to i16, !dbg !43
  %1135 = bitcast bfloat %1003 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1134, i16 %1135, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1136 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !43
  %1137 = load <4 x i32>, ptr addrspace(3) %1100, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1138 = bitcast bfloat %1004 to i16, !dbg !43
  %1139 = bitcast bfloat %1005 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1036, i16 %1138, i16 %1139, i1 true) #1, !dbg !43
  %1140 = bitcast bfloat %1006 to i16, !dbg !43
  %1141 = bitcast bfloat %1007 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1044, i16 %1140, i16 %1141, i1 true) #1, !dbg !43
  %1142 = bitcast bfloat %1008 to i16, !dbg !43
  %1143 = bitcast bfloat %1009 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1050, i16 %1142, i16 %1143, i1 true) #1, !dbg !43
  %1144 = bitcast bfloat %1010 to i16, !dbg !43
  %1145 = bitcast bfloat %1011 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1058, i16 %1144, i16 %1145, i1 true) #1, !dbg !43
  %1146 = bitcast bfloat %1012 to i16, !dbg !43
  %1147 = bitcast bfloat %1013 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1064, i16 %1146, i16 %1147, i1 true) #1, !dbg !43
  %1148 = bitcast bfloat %1014 to i16, !dbg !43
  %1149 = bitcast bfloat %1015 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1072, i16 %1148, i16 %1149, i1 true) #1, !dbg !43
  %1150 = bitcast bfloat %1016 to i16, !dbg !43
  %1151 = bitcast bfloat %1017 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1078, i16 %1150, i16 %1151, i1 true) #1, !dbg !43
  %1152 = bitcast bfloat %1018 to i16, !dbg !43
  %1153 = bitcast bfloat %1019 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1086, i16 %1152, i16 %1153, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %1154 = load <4 x i32>, ptr addrspace(3) %1093, align 16, !dbg !43
  %1155 = load <4 x i32>, ptr addrspace(3) %1100, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %1094, i64 0, !dbg !43
  %.extract104 = extractelement <4 x i32> %1094, i64 1, !dbg !43
  %.extract106 = extractelement <4 x i32> %1094, i64 2, !dbg !43
  %.extract108 = extractelement <4 x i32> %1094, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract104, i32 %.extract106, i32 %.extract108, ptr addrspace(1) %941, i1 %918) #1, !dbg !43
  %.extract110 = extractelement <4 x i32> %1101, i64 0, !dbg !43
  %.extract112 = extractelement <4 x i32> %1101, i64 1, !dbg !43
  %.extract114 = extractelement <4 x i32> %1101, i64 2, !dbg !43
  %.extract116 = extractelement <4 x i32> %1101, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract110, i32 %.extract112, i32 %.extract114, i32 %.extract116, ptr addrspace(1) %943, i1 %919) #1, !dbg !43
  %.extract118 = extractelement <4 x i32> %1118, i64 0, !dbg !43
  %.extract120 = extractelement <4 x i32> %1118, i64 1, !dbg !43
  %.extract122 = extractelement <4 x i32> %1118, i64 2, !dbg !43
  %.extract124 = extractelement <4 x i32> %1118, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract118, i32 %.extract120, i32 %.extract122, i32 %.extract124, ptr addrspace(1) %945, i1 %920) #1, !dbg !43
  %.extract126 = extractelement <4 x i32> %1119, i64 0, !dbg !43
  %.extract128 = extractelement <4 x i32> %1119, i64 1, !dbg !43
  %.extract130 = extractelement <4 x i32> %1119, i64 2, !dbg !43
  %.extract132 = extractelement <4 x i32> %1119, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract126, i32 %.extract128, i32 %.extract130, i32 %.extract132, ptr addrspace(1) %947, i1 %921) #1, !dbg !43
  %.extract134 = extractelement <4 x i32> %1136, i64 0, !dbg !43
  %.extract136 = extractelement <4 x i32> %1136, i64 1, !dbg !43
  %.extract138 = extractelement <4 x i32> %1136, i64 2, !dbg !43
  %.extract140 = extractelement <4 x i32> %1136, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract134, i32 %.extract136, i32 %.extract138, i32 %.extract140, ptr addrspace(1) %949, i1 %922) #1, !dbg !43
  %.extract142 = extractelement <4 x i32> %1137, i64 0, !dbg !43
  %.extract144 = extractelement <4 x i32> %1137, i64 1, !dbg !43
  %.extract146 = extractelement <4 x i32> %1137, i64 2, !dbg !43
  %.extract148 = extractelement <4 x i32> %1137, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract142, i32 %.extract144, i32 %.extract146, i32 %.extract148, ptr addrspace(1) %951, i1 %923) #1, !dbg !43
  %.extract150 = extractelement <4 x i32> %1154, i64 0, !dbg !43
  %.extract152 = extractelement <4 x i32> %1154, i64 1, !dbg !43
  %.extract154 = extractelement <4 x i32> %1154, i64 2, !dbg !43
  %.extract156 = extractelement <4 x i32> %1154, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract150, i32 %.extract152, i32 %.extract154, i32 %.extract156, ptr addrspace(1) %953, i1 %923) #1, !dbg !43
  %.extract158 = extractelement <4 x i32> %1155, i64 0, !dbg !43
  %.extract160 = extractelement <4 x i32> %1155, i64 1, !dbg !43
  %.extract162 = extractelement <4 x i32> %1155, i64 2, !dbg !43
  %.extract164 = extractelement <4 x i32> %1155, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract158, i32 %.extract160, i32 %.extract162, i32 %.extract164, ptr addrspace(1) %955, i1 %923) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c66vmwutqwvngzwhvv6kbj4wcgmxitwsomdg3z2kevff4zmfjigl.py", directory: "/tmp/torchinductor_root/66")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 56, column: 24, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 29, scope: !6)
!26 = !DILocation(line: 77, column: 54, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 66, column: 42, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 25, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
