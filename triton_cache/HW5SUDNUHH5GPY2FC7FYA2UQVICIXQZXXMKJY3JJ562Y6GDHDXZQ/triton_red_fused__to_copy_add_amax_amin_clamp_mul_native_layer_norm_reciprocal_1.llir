; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 128, !dbg !11
  %.lobit = lshr exact i32 %20, 7, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 4, !dbg !14
  %26 = and i32 %25, 2032, !dbg !14
  %27 = or disjoint i32 %26, 8, !dbg !14
  %28 = shl i32 %19, 3, !dbg !14
  %29 = and i32 %28, 2040, !dbg !14
  %30 = mul i32 %22, 3072, !dbg !15
  %31 = add i32 %30, %27
  %32 = zext nneg i32 %26 to i64, !dbg !16
  br label %33, !dbg !16

33:                                               ; preds = %16, %._crit_edge
  %34 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %321, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %16 ], [ %322, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %16 ], [ %323, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %16 ], [ %324, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %16 ], [ %325, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %16 ], [ %326, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %327, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %16 ], [ %328, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %16 ], [ %329, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %16 ], [ %330, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %16 ], [ %331, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %16 ], [ %332, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %16 ], [ %333, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %16 ], [ %334, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %16 ], [ %335, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %16 ], [ %336, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %16 ], [ %315, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %16 ], [ %289, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %16 ], [ %290, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %16 ], [ %291, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %292, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %293, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %294, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %295, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %296, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %297, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %298, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %299, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %300, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %301, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %302, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %303, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %16 ], [ %304, %._crit_edge ]
  %83 = or disjoint i64 %indvars.iv, %32, !dbg !17
  %84 = icmp samesign ult i64 %83, 3072, !dbg !18
  %85 = trunc nuw nsw i64 %83 to i32, !dbg !19
  %86 = add i32 %30, %85, !dbg !19
  %87 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %88 = add i32 %31, %87, !dbg !19
  %89 = sext i32 %86 to i64, !dbg !20
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !20
  %91 = sext i32 %88 to i64, !dbg !20
  %92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %91, !dbg !20
  %93 = and i1 %23, %84, !dbg !21
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %90, i1 %93) #5, !dbg !22
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !22
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !22
  %97 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !22
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !22
  %99 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !22
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !22
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !22
  %103 = extractelement <2 x bfloat> %96, i64 0, !dbg !22
  %104 = extractelement <2 x bfloat> %96, i64 1, !dbg !22
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !22
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !22
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !22
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !22
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !22
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !22
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %92, i1 %93) #5, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !22
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !22
  %114 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !22
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !22
  %116 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !22
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !22
  %118 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !22
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !22
  %120 = extractelement <2 x bfloat> %113, i64 0, !dbg !22
  %121 = extractelement <2 x bfloat> %113, i64 1, !dbg !22
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !22
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !22
  %124 = extractelement <2 x bfloat> %117, i64 0, !dbg !22
  %125 = extractelement <2 x bfloat> %117, i64 1, !dbg !22
  %126 = extractelement <2 x bfloat> %119, i64 0, !dbg !22
  %127 = extractelement <2 x bfloat> %119, i64 1, !dbg !22
  %128 = fpext bfloat %103 to float, !dbg !23
  %129 = fpext bfloat %104 to float, !dbg !23
  %130 = fpext bfloat %105 to float, !dbg !23
  %131 = fpext bfloat %106 to float, !dbg !23
  %132 = fpext bfloat %107 to float, !dbg !23
  %133 = fpext bfloat %108 to float, !dbg !23
  %134 = fpext bfloat %109 to float, !dbg !23
  %135 = fpext bfloat %110 to float, !dbg !23
  %136 = fpext bfloat %120 to float, !dbg !23
  %137 = fpext bfloat %121 to float, !dbg !23
  %138 = fpext bfloat %122 to float, !dbg !23
  %139 = fpext bfloat %123 to float, !dbg !23
  %140 = fpext bfloat %124 to float, !dbg !23
  %141 = fpext bfloat %125 to float, !dbg !23
  %142 = fpext bfloat %126 to float, !dbg !23
  %143 = fpext bfloat %127 to float, !dbg !23
  br i1 %34, label %._crit_edge, label %144, !dbg !24

144:                                              ; preds = %33
  %145 = fsub float %128, %67, !dbg !28
  %146 = fsub float %129, %68, !dbg !28
  %147 = fsub float %130, %69, !dbg !28
  %148 = fsub float %131, %70, !dbg !28
  %149 = fsub float %132, %71, !dbg !28
  %150 = fsub float %133, %72, !dbg !28
  %151 = fsub float %134, %73, !dbg !28
  %152 = fsub float %135, %74, !dbg !28
  %153 = fsub float %136, %75, !dbg !28
  %154 = fsub float %137, %76, !dbg !28
  %155 = fsub float %138, %77, !dbg !28
  %156 = fsub float %139, %78, !dbg !28
  %157 = fsub float %140, %79, !dbg !28
  %158 = fsub float %141, %80, !dbg !28
  %159 = fsub float %142, %81, !dbg !28
  %160 = fsub float %143, %82, !dbg !28
  %161 = fadd float %35, 1.000000e+00, !dbg !29
  %162 = fadd float %36, 1.000000e+00, !dbg !29
  %163 = fadd float %37, 1.000000e+00, !dbg !29
  %164 = fadd float %38, 1.000000e+00, !dbg !29
  %165 = fadd float %39, 1.000000e+00, !dbg !29
  %166 = fadd float %40, 1.000000e+00, !dbg !29
  %167 = fadd float %41, 1.000000e+00, !dbg !29
  %168 = fadd float %42, 1.000000e+00, !dbg !29
  %169 = fadd float %43, 1.000000e+00, !dbg !29
  %170 = fadd float %44, 1.000000e+00, !dbg !29
  %171 = fadd float %45, 1.000000e+00, !dbg !29
  %172 = fadd float %46, 1.000000e+00, !dbg !29
  %173 = fadd float %47, 1.000000e+00, !dbg !29
  %174 = fadd float %48, 1.000000e+00, !dbg !29
  %175 = fadd float %49, 1.000000e+00, !dbg !29
  %176 = fadd float %50, 1.000000e+00, !dbg !29
  %177 = tail call float @llvm.nvvm.div.full(float %145, float %161), !dbg !30
  %178 = tail call float @llvm.nvvm.div.full(float %146, float %162), !dbg !30
  %179 = tail call float @llvm.nvvm.div.full(float %147, float %163), !dbg !30
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !30
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !30
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !30
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !30
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !30
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !30
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !30
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !30
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !30
  %189 = tail call float @llvm.nvvm.div.full(float %157, float %173), !dbg !30
  %190 = tail call float @llvm.nvvm.div.full(float %158, float %174), !dbg !30
  %191 = tail call float @llvm.nvvm.div.full(float %159, float %175), !dbg !30
  %192 = tail call float @llvm.nvvm.div.full(float %160, float %176), !dbg !30
  %193 = fadd float %67, %177, !dbg !31
  %194 = fadd float %68, %178, !dbg !31
  %195 = fadd float %69, %179, !dbg !31
  %196 = fadd float %70, %180, !dbg !31
  %197 = fadd float %71, %181, !dbg !31
  %198 = fadd float %72, %182, !dbg !31
  %199 = fadd float %73, %183, !dbg !31
  %200 = fadd float %74, %184, !dbg !31
  %201 = fadd float %75, %185, !dbg !31
  %202 = fadd float %76, %186, !dbg !31
  %203 = fadd float %77, %187, !dbg !31
  %204 = fadd float %78, %188, !dbg !31
  %205 = fadd float %79, %189, !dbg !31
  %206 = fadd float %80, %190, !dbg !31
  %207 = fadd float %81, %191, !dbg !31
  %208 = fadd float %82, %192, !dbg !31
  %209 = fsub float %128, %193, !dbg !32
  %210 = fsub float %129, %194, !dbg !32
  %211 = fsub float %130, %195, !dbg !32
  %212 = fsub float %131, %196, !dbg !32
  %213 = fsub float %132, %197, !dbg !32
  %214 = fsub float %133, %198, !dbg !32
  %215 = fsub float %134, %199, !dbg !32
  %216 = fsub float %135, %200, !dbg !32
  %217 = fsub float %136, %201, !dbg !32
  %218 = fsub float %137, %202, !dbg !32
  %219 = fsub float %138, %203, !dbg !32
  %220 = fsub float %139, %204, !dbg !32
  %221 = fsub float %140, %205, !dbg !32
  %222 = fsub float %141, %206, !dbg !32
  %223 = fsub float %142, %207, !dbg !32
  %224 = fsub float %143, %208, !dbg !32
  %225 = fmul float %145, %209, !dbg !33
  %226 = fmul float %146, %210, !dbg !33
  %227 = fmul float %147, %211, !dbg !33
  %228 = fmul float %148, %212, !dbg !33
  %229 = fmul float %149, %213, !dbg !33
  %230 = fmul float %150, %214, !dbg !33
  %231 = fmul float %151, %215, !dbg !33
  %232 = fmul float %152, %216, !dbg !33
  %233 = fmul float %153, %217, !dbg !33
  %234 = fmul float %154, %218, !dbg !33
  %235 = fmul float %155, %219, !dbg !33
  %236 = fmul float %156, %220, !dbg !33
  %237 = fmul float %157, %221, !dbg !33
  %238 = fmul float %158, %222, !dbg !33
  %239 = fmul float %159, %223, !dbg !33
  %240 = fmul float %160, %224, !dbg !33
  %241 = fadd float %51, %225, !dbg !34
  %242 = fadd float %52, %226, !dbg !34
  %243 = fadd float %53, %227, !dbg !34
  %244 = fadd float %54, %228, !dbg !34
  %245 = fadd float %55, %229, !dbg !34
  %246 = fadd float %56, %230, !dbg !34
  %247 = fadd float %57, %231, !dbg !34
  %248 = fadd float %58, %232, !dbg !34
  %249 = fadd float %59, %233, !dbg !34
  %250 = fadd float %60, %234, !dbg !34
  %251 = fadd float %61, %235, !dbg !34
  %252 = fadd float %62, %236, !dbg !34
  %253 = fadd float %63, %237, !dbg !34
  %254 = fadd float %64, %238, !dbg !34
  %255 = fadd float %65, %239, !dbg !34
  %256 = fadd float %66, %240, !dbg !34
  br label %._crit_edge, !dbg !24

._crit_edge:                                      ; preds = %33, %144
  %257 = phi float [ %241, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %258 = phi float [ %242, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %259 = phi float [ %243, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %260 = phi float [ %244, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %261 = phi float [ %245, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %262 = phi float [ %246, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %263 = phi float [ %247, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %264 = phi float [ %248, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %265 = phi float [ %249, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %266 = phi float [ %250, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %267 = phi float [ %251, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %268 = phi float [ %252, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %269 = phi float [ %253, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %270 = phi float [ %254, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %271 = phi float [ %255, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %272 = phi float [ %256, %144 ], [ 0.000000e+00, %33 ], !dbg !27
  %.pn52 = phi float [ %193, %144 ], [ %128, %33 ]
  %.pn50 = phi float [ %194, %144 ], [ %129, %33 ]
  %.pn48 = phi float [ %195, %144 ], [ %130, %33 ]
  %.pn46 = phi float [ %196, %144 ], [ %131, %33 ]
  %.pn44 = phi float [ %197, %144 ], [ %132, %33 ]
  %.pn42 = phi float [ %198, %144 ], [ %133, %33 ]
  %.pn40 = phi float [ %199, %144 ], [ %134, %33 ]
  %.pn38 = phi float [ %200, %144 ], [ %135, %33 ]
  %.pn36 = phi float [ %201, %144 ], [ %136, %33 ]
  %.pn34 = phi float [ %202, %144 ], [ %137, %33 ]
  %.pn32 = phi float [ %203, %144 ], [ %138, %33 ]
  %.pn30 = phi float [ %204, %144 ], [ %139, %33 ]
  %.pn28 = phi float [ %205, %144 ], [ %140, %33 ]
  %.pn26 = phi float [ %206, %144 ], [ %141, %33 ]
  %.pn24 = phi float [ %207, %144 ], [ %142, %33 ]
  %.pn22 = phi float [ %208, %144 ], [ %143, %33 ]
  %273 = phi float [ %161, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %274 = phi float [ %162, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %275 = phi float [ %163, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %276 = phi float [ %164, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %277 = phi float [ %165, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %278 = phi float [ %166, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %279 = phi float [ %167, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %280 = phi float [ %168, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %281 = phi float [ %169, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %282 = phi float [ %170, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %283 = phi float [ %171, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %284 = phi float [ %172, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %285 = phi float [ %173, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %286 = phi float [ %174, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %287 = phi float [ %175, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %288 = phi float [ %176, %144 ], [ 1.000000e+00, %33 ], !dbg !27
  %289 = select i1 %93, float %.pn52, float %67, !dbg !35
  %290 = select i1 %93, float %.pn50, float %68, !dbg !35
  %291 = select i1 %93, float %.pn48, float %69, !dbg !35
  %292 = select i1 %93, float %.pn46, float %70, !dbg !35
  %293 = select i1 %93, float %.pn44, float %71, !dbg !35
  %294 = select i1 %93, float %.pn42, float %72, !dbg !35
  %295 = select i1 %93, float %.pn40, float %73, !dbg !35
  %296 = select i1 %93, float %.pn38, float %74, !dbg !35
  %297 = select i1 %93, float %.pn36, float %75, !dbg !35
  %298 = select i1 %93, float %.pn34, float %76, !dbg !35
  %299 = select i1 %93, float %.pn32, float %77, !dbg !35
  %300 = select i1 %93, float %.pn30, float %78, !dbg !35
  %301 = select i1 %93, float %.pn28, float %79, !dbg !35
  %302 = select i1 %93, float %.pn26, float %80, !dbg !35
  %303 = select i1 %93, float %.pn24, float %81, !dbg !35
  %304 = select i1 %93, float %.pn22, float %82, !dbg !35
  %305 = select i1 %93, float %257, float %51, !dbg !36
  %306 = select i1 %93, float %258, float %52, !dbg !36
  %307 = select i1 %93, float %259, float %53, !dbg !36
  %308 = select i1 %93, float %260, float %54, !dbg !36
  %309 = select i1 %93, float %261, float %55, !dbg !36
  %310 = select i1 %93, float %262, float %56, !dbg !36
  %311 = select i1 %93, float %263, float %57, !dbg !36
  %312 = select i1 %93, float %264, float %58, !dbg !36
  %313 = select i1 %93, float %265, float %59, !dbg !36
  %314 = select i1 %93, float %266, float %60, !dbg !36
  %315 = select i1 %93, float %267, float %61, !dbg !36
  %316 = select i1 %93, float %268, float %62, !dbg !36
  %317 = select i1 %93, float %269, float %63, !dbg !36
  %318 = select i1 %93, float %270, float %64, !dbg !36
  %319 = select i1 %93, float %271, float %65, !dbg !36
  %320 = select i1 %93, float %272, float %66, !dbg !36
  %321 = select i1 %93, float %273, float %35, !dbg !37
  %322 = select i1 %93, float %274, float %36, !dbg !37
  %323 = select i1 %93, float %275, float %37, !dbg !37
  %324 = select i1 %93, float %276, float %38, !dbg !37
  %325 = select i1 %93, float %277, float %39, !dbg !37
  %326 = select i1 %93, float %278, float %40, !dbg !37
  %327 = select i1 %93, float %279, float %41, !dbg !37
  %328 = select i1 %93, float %280, float %42, !dbg !37
  %329 = select i1 %93, float %281, float %43, !dbg !37
  %330 = select i1 %93, float %282, float %44, !dbg !37
  %331 = select i1 %93, float %283, float %45, !dbg !37
  %332 = select i1 %93, float %284, float %46, !dbg !37
  %333 = select i1 %93, float %285, float %47, !dbg !37
  %334 = select i1 %93, float %286, float %48, !dbg !37
  %335 = select i1 %93, float %287, float %49, !dbg !37
  %336 = select i1 %93, float %288, float %50, !dbg !37
  br i1 %34, label %33, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %337 = lshr i32 %19, 5, !dbg !11
  %338 = and i32 %19, 1, !dbg !11
  %339 = or disjoint i32 %18, %338, !dbg !12
  %340 = icmp slt i32 %339, 3600, !dbg !13
  %341 = or disjoint i32 %29, 4, !dbg !14
  %342 = fsub float %290, %289, !dbg !38
  %343 = fadd float %321, %322, !dbg !41
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !42
  %345 = tail call float @llvm.nvvm.div.full(float %322, float %343), !dbg !43
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !44
  %347 = fmul float %342, %346, !dbg !45
  %348 = fadd float %289, %347, !dbg !46
  %349 = fadd float %305, %306, !dbg !47
  %350 = fmul float %342, %342, !dbg !48
  %351 = fmul float %350, %321, !dbg !49
  %352 = fmul float %351, %346, !dbg !50
  %353 = fadd float %349, %352, !dbg !51
  %354 = fsub float %291, %348, !dbg !38
  %355 = fadd float %323, %343, !dbg !41
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !42
  %357 = tail call float @llvm.nvvm.div.full(float %323, float %355), !dbg !43
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !44
  %359 = fmul float %358, %354, !dbg !45
  %360 = fadd float %348, %359, !dbg !46
  %361 = fadd float %307, %353, !dbg !47
  %362 = fmul float %354, %354, !dbg !48
  %363 = fmul float %343, %362, !dbg !49
  %364 = fmul float %358, %363, !dbg !50
  %365 = fadd float %361, %364, !dbg !51
  %366 = fsub float %292, %360, !dbg !38
  %367 = fadd float %324, %355, !dbg !41
  %368 = fcmp oeq float %367, 0.000000e+00, !dbg !42
  %369 = tail call float @llvm.nvvm.div.full(float %324, float %367), !dbg !43
  %370 = select i1 %368, float 0.000000e+00, float %369, !dbg !44
  %371 = fmul float %370, %366, !dbg !45
  %372 = fadd float %360, %371, !dbg !46
  %373 = fadd float %308, %365, !dbg !47
  %374 = fmul float %366, %366, !dbg !48
  %375 = fmul float %355, %374, !dbg !49
  %376 = fmul float %370, %375, !dbg !50
  %377 = fadd float %373, %376, !dbg !51
  %378 = fsub float %293, %372, !dbg !38
  %379 = fadd float %325, %367, !dbg !41
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !42
  %381 = tail call float @llvm.nvvm.div.full(float %325, float %379), !dbg !43
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !44
  %383 = fmul float %382, %378, !dbg !45
  %384 = fadd float %372, %383, !dbg !46
  %385 = fadd float %309, %377, !dbg !47
  %386 = fmul float %378, %378, !dbg !48
  %387 = fmul float %367, %386, !dbg !49
  %388 = fmul float %382, %387, !dbg !50
  %389 = fadd float %385, %388, !dbg !51
  %390 = fsub float %294, %384, !dbg !38
  %391 = fadd float %326, %379, !dbg !41
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !42
  %393 = tail call float @llvm.nvvm.div.full(float %326, float %391), !dbg !43
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !44
  %395 = fmul float %394, %390, !dbg !45
  %396 = fadd float %384, %395, !dbg !46
  %397 = fadd float %310, %389, !dbg !47
  %398 = fmul float %390, %390, !dbg !48
  %399 = fmul float %379, %398, !dbg !49
  %400 = fmul float %394, %399, !dbg !50
  %401 = fadd float %397, %400, !dbg !51
  %402 = fsub float %295, %396, !dbg !38
  %403 = fadd float %327, %391, !dbg !41
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !42
  %405 = tail call float @llvm.nvvm.div.full(float %327, float %403), !dbg !43
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !44
  %407 = fmul float %406, %402, !dbg !45
  %408 = fadd float %396, %407, !dbg !46
  %409 = fadd float %311, %401, !dbg !47
  %410 = fmul float %402, %402, !dbg !48
  %411 = fmul float %391, %410, !dbg !49
  %412 = fmul float %406, %411, !dbg !50
  %413 = fadd float %409, %412, !dbg !51
  %414 = fsub float %296, %408, !dbg !38
  %415 = fadd float %328, %403, !dbg !41
  %416 = fcmp oeq float %415, 0.000000e+00, !dbg !42
  %417 = tail call float @llvm.nvvm.div.full(float %328, float %415), !dbg !43
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !44
  %419 = fmul float %418, %414, !dbg !45
  %420 = fadd float %408, %419, !dbg !46
  %421 = fadd float %312, %413, !dbg !47
  %422 = fmul float %414, %414, !dbg !48
  %423 = fmul float %403, %422, !dbg !49
  %424 = fmul float %418, %423, !dbg !50
  %425 = fadd float %421, %424, !dbg !51
  %426 = fsub float %297, %420, !dbg !38
  %427 = fadd float %329, %415, !dbg !41
  %428 = fcmp oeq float %427, 0.000000e+00, !dbg !42
  %429 = tail call float @llvm.nvvm.div.full(float %329, float %427), !dbg !43
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !44
  %431 = fmul float %430, %426, !dbg !45
  %432 = fadd float %420, %431, !dbg !46
  %433 = fadd float %313, %425, !dbg !47
  %434 = fmul float %426, %426, !dbg !48
  %435 = fmul float %415, %434, !dbg !49
  %436 = fmul float %430, %435, !dbg !50
  %437 = fadd float %433, %436, !dbg !51
  %438 = fsub float %298, %432, !dbg !38
  %439 = fadd float %330, %427, !dbg !41
  %440 = fcmp oeq float %439, 0.000000e+00, !dbg !42
  %441 = tail call float @llvm.nvvm.div.full(float %330, float %439), !dbg !43
  %442 = select i1 %440, float 0.000000e+00, float %441, !dbg !44
  %443 = fmul float %442, %438, !dbg !45
  %444 = fadd float %432, %443, !dbg !46
  %445 = fadd float %314, %437, !dbg !47
  %446 = fmul float %438, %438, !dbg !48
  %447 = fmul float %427, %446, !dbg !49
  %448 = fmul float %442, %447, !dbg !50
  %449 = fadd float %445, %448, !dbg !51
  %450 = fsub float %299, %444, !dbg !38
  %451 = fadd float %331, %439, !dbg !41
  %452 = fcmp oeq float %451, 0.000000e+00, !dbg !42
  %453 = tail call float @llvm.nvvm.div.full(float %331, float %451), !dbg !43
  %454 = select i1 %452, float 0.000000e+00, float %453, !dbg !44
  %455 = fmul float %454, %450, !dbg !45
  %456 = fadd float %444, %455, !dbg !46
  %457 = fadd float %315, %449, !dbg !47
  %458 = fmul float %450, %450, !dbg !48
  %459 = fmul float %439, %458, !dbg !49
  %460 = fmul float %454, %459, !dbg !50
  %461 = fadd float %457, %460, !dbg !51
  %462 = fsub float %300, %456, !dbg !38
  %463 = fadd float %332, %451, !dbg !41
  %464 = fcmp oeq float %463, 0.000000e+00, !dbg !42
  %465 = tail call float @llvm.nvvm.div.full(float %332, float %463), !dbg !43
  %466 = select i1 %464, float 0.000000e+00, float %465, !dbg !44
  %467 = fmul float %466, %462, !dbg !45
  %468 = fadd float %456, %467, !dbg !46
  %469 = fadd float %316, %461, !dbg !47
  %470 = fmul float %462, %462, !dbg !48
  %471 = fmul float %451, %470, !dbg !49
  %472 = fmul float %466, %471, !dbg !50
  %473 = fadd float %469, %472, !dbg !51
  %474 = fsub float %301, %468, !dbg !38
  %475 = fadd float %333, %463, !dbg !41
  %476 = fcmp oeq float %475, 0.000000e+00, !dbg !42
  %477 = tail call float @llvm.nvvm.div.full(float %333, float %475), !dbg !43
  %478 = select i1 %476, float 0.000000e+00, float %477, !dbg !44
  %479 = fmul float %478, %474, !dbg !45
  %480 = fadd float %468, %479, !dbg !46
  %481 = fadd float %317, %473, !dbg !47
  %482 = fmul float %474, %474, !dbg !48
  %483 = fmul float %463, %482, !dbg !49
  %484 = fmul float %478, %483, !dbg !50
  %485 = fadd float %481, %484, !dbg !51
  %486 = fsub float %302, %480, !dbg !38
  %487 = fadd float %334, %475, !dbg !41
  %488 = fcmp oeq float %487, 0.000000e+00, !dbg !42
  %489 = tail call float @llvm.nvvm.div.full(float %334, float %487), !dbg !43
  %490 = select i1 %488, float 0.000000e+00, float %489, !dbg !44
  %491 = fmul float %490, %486, !dbg !45
  %492 = fadd float %480, %491, !dbg !46
  %493 = fadd float %318, %485, !dbg !47
  %494 = fmul float %486, %486, !dbg !48
  %495 = fmul float %475, %494, !dbg !49
  %496 = fmul float %490, %495, !dbg !50
  %497 = fadd float %493, %496, !dbg !51
  %498 = fsub float %303, %492, !dbg !38
  %499 = fadd float %335, %487, !dbg !41
  %500 = fcmp oeq float %499, 0.000000e+00, !dbg !42
  %501 = tail call float @llvm.nvvm.div.full(float %335, float %499), !dbg !43
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !44
  %503 = fmul float %502, %498, !dbg !45
  %504 = fadd float %492, %503, !dbg !46
  %505 = fadd float %319, %497, !dbg !47
  %506 = fmul float %498, %498, !dbg !48
  %507 = fmul float %487, %506, !dbg !49
  %508 = fmul float %502, %507, !dbg !50
  %509 = fadd float %505, %508, !dbg !51
  %510 = fsub float %304, %504, !dbg !38
  %511 = fadd float %336, %499, !dbg !41
  %512 = fcmp oeq float %511, 0.000000e+00, !dbg !42
  %513 = tail call float @llvm.nvvm.div.full(float %336, float %511), !dbg !43
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !44
  %515 = fmul float %514, %510, !dbg !45
  %516 = fadd float %504, %515, !dbg !46
  %517 = fadd float %320, %509, !dbg !47
  %518 = fmul float %510, %510, !dbg !48
  %519 = fmul float %499, %518, !dbg !49
  %520 = fmul float %514, %519, !dbg !50
  %521 = fadd float %517, %520, !dbg !51
  %522 = bitcast float %516 to i32, !dbg !52
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 16, i32 31), !dbg !52
  %524 = bitcast i32 %523 to float, !dbg !52
  %525 = bitcast float %521 to i32, !dbg !52
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 16, i32 31), !dbg !52
  %527 = bitcast i32 %526 to float, !dbg !52
  %528 = bitcast float %511 to i32, !dbg !52
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 16, i32 31), !dbg !52
  %530 = bitcast i32 %529 to float, !dbg !52
  %531 = fsub float %524, %516, !dbg !38
  %532 = fadd float %511, %530, !dbg !41
  %533 = fcmp oeq float %532, 0.000000e+00, !dbg !42
  %534 = tail call float @llvm.nvvm.div.full(float %530, float %532), !dbg !43
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !44
  %536 = fmul float %535, %531, !dbg !45
  %537 = fadd float %516, %536, !dbg !46
  %538 = fadd float %521, %527, !dbg !47
  %539 = fmul float %531, %531, !dbg !48
  %540 = fmul float %511, %539, !dbg !49
  %541 = fmul float %535, %540, !dbg !50
  %542 = fadd float %538, %541, !dbg !51
  %543 = bitcast float %537 to i32, !dbg !52
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 8, i32 31), !dbg !52
  %545 = bitcast i32 %544 to float, !dbg !52
  %546 = bitcast float %542 to i32, !dbg !52
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !52
  %548 = bitcast i32 %547 to float, !dbg !52
  %549 = bitcast float %532 to i32, !dbg !52
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 8, i32 31), !dbg !52
  %551 = bitcast i32 %550 to float, !dbg !52
  %552 = fsub float %545, %537, !dbg !38
  %553 = fadd float %532, %551, !dbg !41
  %554 = fcmp oeq float %553, 0.000000e+00, !dbg !42
  %555 = tail call float @llvm.nvvm.div.full(float %551, float %553), !dbg !43
  %556 = select i1 %554, float 0.000000e+00, float %555, !dbg !44
  %557 = fmul float %556, %552, !dbg !45
  %558 = fadd float %537, %557, !dbg !46
  %559 = fadd float %542, %548, !dbg !47
  %560 = fmul float %552, %552, !dbg !48
  %561 = fmul float %532, %560, !dbg !49
  %562 = fmul float %556, %561, !dbg !50
  %563 = fadd float %559, %562, !dbg !51
  %564 = bitcast float %558 to i32, !dbg !52
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !52
  %566 = bitcast i32 %565 to float, !dbg !52
  %567 = bitcast float %563 to i32, !dbg !52
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !52
  %569 = bitcast i32 %568 to float, !dbg !52
  %570 = bitcast float %553 to i32, !dbg !52
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 4, i32 31), !dbg !52
  %572 = bitcast i32 %571 to float, !dbg !52
  %573 = fsub float %566, %558, !dbg !38
  %574 = fadd float %553, %572, !dbg !41
  %575 = fcmp oeq float %574, 0.000000e+00, !dbg !42
  %576 = tail call float @llvm.nvvm.div.full(float %572, float %574), !dbg !43
  %577 = select i1 %575, float 0.000000e+00, float %576, !dbg !44
  %578 = fmul float %577, %573, !dbg !45
  %579 = fadd float %558, %578, !dbg !46
  %580 = fadd float %563, %569, !dbg !47
  %581 = fmul float %573, %573, !dbg !48
  %582 = fmul float %553, %581, !dbg !49
  %583 = fmul float %577, %582, !dbg !50
  %584 = fadd float %580, %583, !dbg !51
  %585 = bitcast float %579 to i32, !dbg !52
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 2, i32 31), !dbg !52
  %587 = bitcast i32 %586 to float, !dbg !52
  %588 = bitcast float %584 to i32, !dbg !52
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !52
  %590 = bitcast i32 %589 to float, !dbg !52
  %591 = bitcast float %574 to i32, !dbg !52
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 2, i32 31), !dbg !52
  %593 = bitcast i32 %592 to float, !dbg !52
  %594 = fsub float %587, %579, !dbg !38
  %595 = fadd float %574, %593, !dbg !41
  %596 = fcmp oeq float %595, 0.000000e+00, !dbg !42
  %597 = tail call float @llvm.nvvm.div.full(float %593, float %595), !dbg !43
  %598 = select i1 %596, float 0.000000e+00, float %597, !dbg !44
  %599 = fmul float %598, %594, !dbg !45
  %600 = fadd float %579, %599, !dbg !46
  %601 = fadd float %584, %590, !dbg !47
  %602 = fmul float %594, %594, !dbg !48
  %603 = fmul float %574, %602, !dbg !49
  %604 = fmul float %598, %603, !dbg !50
  %605 = fadd float %601, %604, !dbg !51
  %606 = bitcast float %600 to i32, !dbg !52
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 1, i32 31), !dbg !52
  %608 = bitcast i32 %607 to float, !dbg !52
  %609 = bitcast float %605 to i32, !dbg !52
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !52
  %611 = bitcast i32 %610 to float, !dbg !52
  %612 = bitcast float %595 to i32, !dbg !52
  %613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %612, i32 1, i32 31), !dbg !52
  %614 = bitcast i32 %613 to float, !dbg !52
  %615 = fsub float %608, %600, !dbg !38
  %616 = fadd float %595, %614, !dbg !41
  %617 = fcmp oeq float %616, 0.000000e+00, !dbg !42
  %618 = tail call float @llvm.nvvm.div.full(float %614, float %616), !dbg !43
  %619 = select i1 %617, float 0.000000e+00, float %618, !dbg !44
  %620 = fmul float %619, %615, !dbg !45
  %621 = fadd float %600, %620, !dbg !46
  %622 = fadd float %605, %611, !dbg !47
  %623 = fmul float %615, %615, !dbg !48
  %624 = fmul float %595, %623, !dbg !49
  %625 = fmul float %619, %624, !dbg !50
  %626 = fadd float %622, %625, !dbg !51
  %627 = and i32 %337, 3, !dbg !52
  %628 = icmp eq i32 %21, 0, !dbg !52
  %629 = lshr exact i32 %20, 5, !dbg !52
  %630 = or disjoint i32 %629, %627, !dbg !52
  %631 = getelementptr float, ptr addrspace(3) @global_smem, i32 %630, !dbg !52
  %632 = bitcast float %621 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %631, <1 x i32> %632, i1 %628) #5, !dbg !52
  %633 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %630, !dbg !52
  %634 = bitcast float %626 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %633, <1 x i32> %634, i1 %628) #5, !dbg !52
  %635 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %630, !dbg !52
  %636 = bitcast float %616 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %636, i1 %628) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %637 = icmp slt i32 %19, 8, !dbg !52
  %638 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !52
  %639 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %637) #5, !dbg !52
  %640 = bitcast i32 %639 to float, !dbg !52
  %641 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !52
  %642 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %641, i1 %637) #5, !dbg !52
  %643 = bitcast i32 %642 to float, !dbg !52
  %644 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !52
  %645 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %644, i1 %637) #5, !dbg !52
  %646 = bitcast i32 %645 to float, !dbg !52
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 2, i32 31), !dbg !52
  %648 = bitcast i32 %647 to float, !dbg !52
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 2, i32 31), !dbg !52
  %650 = bitcast i32 %649 to float, !dbg !52
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 2, i32 31), !dbg !52
  %652 = bitcast i32 %651 to float, !dbg !52
  %653 = fsub float %648, %640, !dbg !38
  %654 = fadd float %646, %652, !dbg !41
  %655 = fcmp oeq float %654, 0.000000e+00, !dbg !42
  %656 = tail call float @llvm.nvvm.div.full(float %652, float %654), !dbg !43
  %657 = select i1 %655, float 0.000000e+00, float %656, !dbg !44
  %658 = fmul float %653, %657, !dbg !45
  %659 = fadd float %658, %640, !dbg !46
  %660 = fadd float %643, %650, !dbg !47
  %661 = fmul float %653, %653, !dbg !48
  %662 = fmul float %661, %646, !dbg !49
  %663 = fmul float %662, %657, !dbg !50
  %664 = fadd float %660, %663, !dbg !51
  %665 = bitcast float %659 to i32, !dbg !52
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 1, i32 31), !dbg !52
  %667 = bitcast i32 %666 to float, !dbg !52
  %668 = bitcast float %664 to i32, !dbg !52
  %669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %668, i32 1, i32 31), !dbg !52
  %670 = bitcast i32 %669 to float, !dbg !52
  %671 = bitcast float %654 to i32, !dbg !52
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 1, i32 31), !dbg !52
  %673 = bitcast i32 %672 to float, !dbg !52
  %674 = fsub float %667, %659, !dbg !38
  %675 = fadd float %654, %673, !dbg !41
  %676 = fcmp oeq float %675, 0.000000e+00, !dbg !42
  %677 = tail call float @llvm.nvvm.div.full(float %673, float %675), !dbg !43
  %678 = select i1 %676, float 0.000000e+00, float %677, !dbg !44
  %679 = fmul float %674, %678, !dbg !45
  %680 = fadd float %659, %679, !dbg !46
  %681 = fadd float %664, %670, !dbg !47
  %682 = fmul float %674, %674, !dbg !48
  %683 = fmul float %654, %682, !dbg !49
  %684 = fmul float %678, %683, !dbg !50
  %685 = fadd float %681, %684, !dbg !51
  %686 = and i32 %19, 3, !dbg !52
  %687 = icmp eq i32 %686, 0, !dbg !52
  %688 = and i1 %637, %687, !dbg !52
  %689 = bitcast float %680 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %689, i1 %688) #5, !dbg !52
  %690 = bitcast float %685 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %690, i1 %688) #5, !dbg !52
  %691 = bitcast float %675 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %691, i1 %688) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %692 = getelementptr float, ptr addrspace(3) @global_smem, i32 %629, !dbg !52
  %693 = load float, ptr addrspace(3) %692, align 16, !dbg !52
  %694 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %629, !dbg !52
  %695 = load float, ptr addrspace(3) %694, align 16, !dbg !52
  %696 = mul i32 %17, 6144, !dbg !53
  %697 = add i32 %696, 3072, !dbg !53
  %698 = tail call float @llvm.nvvm.div.full(float %695, float 3.072000e+03), !dbg !54
  %699 = fadd float %698, 0x3EB0C6F7A0000000, !dbg !55
  %700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %701 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %703 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %704 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %705 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %706 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %707 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %708 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %709 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %711 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %712 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %714 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !56
  %.not.i95 = icmp eq i32 %715, 0, !dbg !56
  br i1 %.not.i95, label %718, label %716, !dbg !56

716:                                              ; preds = %__nv_rsqrtf.exit
  %717 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %699), !dbg !56
  br label %__nv_rsqrtf.exit97, !dbg !56

718:                                              ; preds = %__nv_rsqrtf.exit
  %719 = tail call float @llvm.nvvm.rsqrt.approx.f(float %699), !dbg !56
  br label %__nv_rsqrtf.exit97, !dbg !56

__nv_rsqrtf.exit97:                               ; preds = %716, %718
  %.0.i96 = phi float [ %717, %716 ], [ %719, %718 ], !dbg !56
  %720 = and i32 %25, 4080
  %721 = lshr i32 %25, 9
  %722 = and i32 %721, 4
  %723 = or disjoint i32 %722, %720
  %724 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %723
  %725 = or disjoint i32 %720, 4
  %726 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %722
  %727 = getelementptr inbounds nuw float, ptr addrspace(3) %726, i32 %725
  %728 = or disjoint i32 %723, 8
  %729 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %728
  %730 = or disjoint i32 %720, 12
  %731 = getelementptr inbounds nuw float, ptr addrspace(3) %726, i32 %730
  %732 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29
  %733 = or disjoint i32 %29, 2048
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %733
  %734 = or disjoint i32 %29, 2052
  %gep102 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %734
  %735 = zext nneg i32 %341 to i64, !dbg !57
  %736 = zext nneg i32 %29 to i64, !dbg !57
  %737 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep, i32 8
  %738 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep102, i32 8
  br label %739, !dbg !57

739:                                              ; preds = %__nv_rsqrtf.exit97, %739
  %740 = phi i1 [ true, %__nv_rsqrtf.exit97 ], [ false, %739 ]
  %indvars.iv182 = phi i64 [ 0, %__nv_rsqrtf.exit97 ], [ 2048, %739 ]
  %741 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %1012, %739 ]
  %742 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %1013, %739 ]
  %743 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit97 ], [ %1027, %739 ]
  %744 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit97 ], [ %1030, %739 ]
  %745 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %1019, %739 ]
  %746 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %1016, %739 ]
  %747 = or disjoint i64 %indvars.iv182, %736, !dbg !58
  %748 = or disjoint i64 %indvars.iv182, %735, !dbg !58
  %749 = or disjoint i64 %indvars.iv182, %32, !dbg !58
  %750 = icmp samesign ult i64 %747, 3072, !dbg !59
  %751 = icmp samesign ult i64 %749, 3072, !dbg !59
  %752 = trunc nuw nsw i64 %749 to i32, !dbg !60
  %753 = add i32 %30, %752, !dbg !60
  %754 = trunc nuw nsw i64 %indvars.iv182 to i32, !dbg !60
  %755 = add i32 %31, %754, !dbg !60
  %756 = trunc nuw nsw i64 %747 to i32, !dbg !60
  %757 = add i32 %696, %756, !dbg !60
  %758 = add i32 %697, %756, !dbg !60
  %759 = sext i32 %753 to i64, !dbg !61
  %760 = getelementptr bfloat, ptr addrspace(1) %0, i64 %759, !dbg !61
  %761 = sext i32 %755 to i64, !dbg !61
  %762 = getelementptr bfloat, ptr addrspace(1) %0, i64 %761, !dbg !61
  %763 = and i1 %24, %750, !dbg !62
  %764 = and i1 %23, %751, !dbg !62
  %765 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %760, i1 %764) #5, !dbg !63
  %766 = extractvalue { i32, i32, i32, i32 } %765, 0, !dbg !63
  %767 = bitcast i32 %766 to <2 x bfloat>, !dbg !63
  %768 = extractvalue { i32, i32, i32, i32 } %765, 1, !dbg !63
  %769 = bitcast i32 %768 to <2 x bfloat>, !dbg !63
  %770 = extractvalue { i32, i32, i32, i32 } %765, 2, !dbg !63
  %771 = bitcast i32 %770 to <2 x bfloat>, !dbg !63
  %772 = extractvalue { i32, i32, i32, i32 } %765, 3, !dbg !63
  %773 = bitcast i32 %772 to <2 x bfloat>, !dbg !63
  %774 = extractelement <2 x bfloat> %767, i64 0, !dbg !63
  %775 = extractelement <2 x bfloat> %767, i64 1, !dbg !63
  %776 = extractelement <2 x bfloat> %769, i64 0, !dbg !63
  %777 = extractelement <2 x bfloat> %769, i64 1, !dbg !63
  %778 = extractelement <2 x bfloat> %771, i64 0, !dbg !63
  %779 = extractelement <2 x bfloat> %771, i64 1, !dbg !63
  %780 = extractelement <2 x bfloat> %773, i64 0, !dbg !63
  %781 = extractelement <2 x bfloat> %773, i64 1, !dbg !63
  %782 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %762, i1 %764) #5, !dbg !63
  %783 = extractvalue { i32, i32, i32, i32 } %782, 0, !dbg !63
  %784 = bitcast i32 %783 to <2 x bfloat>, !dbg !63
  %785 = extractvalue { i32, i32, i32, i32 } %782, 1, !dbg !63
  %786 = bitcast i32 %785 to <2 x bfloat>, !dbg !63
  %787 = extractvalue { i32, i32, i32, i32 } %782, 2, !dbg !63
  %788 = bitcast i32 %787 to <2 x bfloat>, !dbg !63
  %789 = extractvalue { i32, i32, i32, i32 } %782, 3, !dbg !63
  %790 = bitcast i32 %789 to <2 x bfloat>, !dbg !63
  %791 = extractelement <2 x bfloat> %784, i64 0, !dbg !63
  %792 = extractelement <2 x bfloat> %784, i64 1, !dbg !63
  %793 = extractelement <2 x bfloat> %786, i64 0, !dbg !63
  %794 = extractelement <2 x bfloat> %786, i64 1, !dbg !63
  %795 = extractelement <2 x bfloat> %788, i64 0, !dbg !63
  %796 = extractelement <2 x bfloat> %788, i64 1, !dbg !63
  %797 = extractelement <2 x bfloat> %790, i64 0, !dbg !63
  %798 = extractelement <2 x bfloat> %790, i64 1, !dbg !63
  %799 = fpext bfloat %774 to float, !dbg !64
  %800 = fpext bfloat %775 to float, !dbg !64
  %801 = fpext bfloat %776 to float, !dbg !64
  %802 = fpext bfloat %777 to float, !dbg !64
  %803 = fpext bfloat %778 to float, !dbg !64
  %804 = fpext bfloat %779 to float, !dbg !64
  %805 = fpext bfloat %780 to float, !dbg !64
  %806 = fpext bfloat %781 to float, !dbg !64
  %807 = fpext bfloat %791 to float, !dbg !64
  %808 = fpext bfloat %792 to float, !dbg !64
  %809 = fpext bfloat %793 to float, !dbg !64
  %810 = fpext bfloat %794 to float, !dbg !64
  %811 = fpext bfloat %795 to float, !dbg !64
  %812 = fpext bfloat %796 to float, !dbg !64
  %813 = fpext bfloat %797 to float, !dbg !64
  %814 = fpext bfloat %798 to float, !dbg !64
  %815 = add nuw nsw i64 %747, 3072, !dbg !65
  %816 = getelementptr float, ptr addrspace(1) %1, i64 %815, !dbg !66
  %817 = getelementptr float, ptr addrspace(1) %1, i64 %748, !dbg !66
  %818 = getelementptr i8, ptr addrspace(1) %817, i64 12288, !dbg !66
  %819 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %816, i1 %750) #5, !dbg !67
  %820 = extractvalue { i32, i32, i32, i32 } %819, 0, !dbg !67
  %821 = extractvalue { i32, i32, i32, i32 } %819, 1, !dbg !67
  %822 = extractvalue { i32, i32, i32, i32 } %819, 2, !dbg !67
  %823 = extractvalue { i32, i32, i32, i32 } %819, 3, !dbg !67
  %824 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %818, i1 %750) #5, !dbg !67
  %825 = extractvalue { i32, i32, i32, i32 } %824, 0, !dbg !67
  %826 = extractvalue { i32, i32, i32, i32 } %824, 1, !dbg !67
  %827 = extractvalue { i32, i32, i32, i32 } %824, 2, !dbg !67
  %828 = extractvalue { i32, i32, i32, i32 } %824, 3, !dbg !67
  %829 = getelementptr bfloat, ptr addrspace(1) %2, i64 %815, !dbg !68
  %830 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %829, i1 %750) #5, !dbg !69
  %831 = extractvalue { i32, i32, i32, i32 } %830, 0, !dbg !69
  %832 = bitcast i32 %831 to <2 x bfloat>, !dbg !69
  %833 = extractvalue { i32, i32, i32, i32 } %830, 1, !dbg !69
  %834 = bitcast i32 %833 to <2 x bfloat>, !dbg !69
  %835 = extractvalue { i32, i32, i32, i32 } %830, 2, !dbg !69
  %836 = bitcast i32 %835 to <2 x bfloat>, !dbg !69
  %837 = extractvalue { i32, i32, i32, i32 } %830, 3, !dbg !69
  %838 = bitcast i32 %837 to <2 x bfloat>, !dbg !69
  %839 = getelementptr float, ptr addrspace(1) %1, i64 %747, !dbg !70
  %840 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %839, i1 %750) #5, !dbg !71
  %841 = extractvalue { i32, i32, i32, i32 } %840, 0, !dbg !71
  %842 = extractvalue { i32, i32, i32, i32 } %840, 1, !dbg !71
  %843 = extractvalue { i32, i32, i32, i32 } %840, 2, !dbg !71
  %844 = extractvalue { i32, i32, i32, i32 } %840, 3, !dbg !71
  %845 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %817, i1 %750) #5, !dbg !71
  %846 = extractvalue { i32, i32, i32, i32 } %845, 0, !dbg !71
  %847 = extractvalue { i32, i32, i32, i32 } %845, 1, !dbg !71
  %848 = extractvalue { i32, i32, i32, i32 } %845, 2, !dbg !71
  %849 = extractvalue { i32, i32, i32, i32 } %845, 3, !dbg !71
  %850 = getelementptr bfloat, ptr addrspace(1) %2, i64 %747, !dbg !72
  %851 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %850, i1 %750) #5, !dbg !73
  %852 = extractvalue { i32, i32, i32, i32 } %851, 0, !dbg !73
  %853 = bitcast i32 %852 to <2 x bfloat>, !dbg !73
  %854 = extractvalue { i32, i32, i32, i32 } %851, 1, !dbg !73
  %855 = bitcast i32 %854 to <2 x bfloat>, !dbg !73
  %856 = extractvalue { i32, i32, i32, i32 } %851, 2, !dbg !73
  %857 = bitcast i32 %856 to <2 x bfloat>, !dbg !73
  %858 = extractvalue { i32, i32, i32, i32 } %851, 3, !dbg !73
  %859 = bitcast i32 %858 to <2 x bfloat>, !dbg !73
  %860 = fsub float %799, %693, !dbg !74
  %861 = fsub float %800, %693, !dbg !74
  %862 = fsub float %801, %693, !dbg !74
  %863 = fsub float %802, %693, !dbg !74
  %864 = fsub float %803, %693, !dbg !74
  %865 = fsub float %804, %693, !dbg !74
  %866 = fsub float %805, %693, !dbg !74
  %867 = fsub float %806, %693, !dbg !74
  %868 = fsub float %807, %693, !dbg !74
  %869 = fsub float %808, %693, !dbg !74
  %870 = fsub float %809, %693, !dbg !74
  %871 = fsub float %810, %693, !dbg !74
  %872 = fsub float %811, %693, !dbg !74
  %873 = fsub float %812, %693, !dbg !74
  %874 = fsub float %813, %693, !dbg !74
  %875 = fsub float %814, %693, !dbg !74
  %876 = fmul float %.0.i96, %860, !dbg !75
  %877 = fmul float %.0.i96, %861, !dbg !75
  %878 = fmul float %.0.i96, %862, !dbg !75
  %879 = fmul float %.0.i96, %863, !dbg !75
  %880 = fmul float %.0.i96, %864, !dbg !75
  %881 = fmul float %.0.i96, %865, !dbg !75
  %882 = fmul float %.0.i96, %866, !dbg !75
  %883 = fmul float %.0.i96, %867, !dbg !75
  %884 = fmul float %.0.i96, %868, !dbg !75
  %885 = fmul float %.0.i96, %869, !dbg !75
  %886 = fmul float %.0.i96, %870, !dbg !75
  %887 = fmul float %.0.i96, %871, !dbg !75
  %888 = fmul float %.0.i96, %872, !dbg !75
  %889 = fmul float %.0.i96, %873, !dbg !75
  %890 = fmul float %.0.i96, %874, !dbg !75
  %891 = fmul float %.0.i96, %875, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %892 = bitcast float %876 to i32, !dbg !75
  %893 = bitcast float %877 to i32, !dbg !75
  %894 = bitcast float %878 to i32, !dbg !75
  %895 = bitcast float %879 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %724, i32 %892, i32 %893, i32 %894, i32 %895, i1 true) #5, !dbg !75
  %896 = bitcast float %880 to i32, !dbg !75
  %897 = bitcast float %881 to i32, !dbg !75
  %898 = bitcast float %882 to i32, !dbg !75
  %899 = bitcast float %883 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %727, i32 %896, i32 %897, i32 %898, i32 %899, i1 true) #5, !dbg !75
  %900 = bitcast float %884 to i32, !dbg !75
  %901 = bitcast float %885 to i32, !dbg !75
  %902 = bitcast float %886 to i32, !dbg !75
  %903 = bitcast float %887 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %729, i32 %900, i32 %901, i32 %902, i32 %903, i1 true) #5, !dbg !75
  %904 = bitcast float %888 to i32, !dbg !75
  %905 = bitcast float %889 to i32, !dbg !75
  %906 = bitcast float %890 to i32, !dbg !75
  %907 = bitcast float %891 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %731, i32 %904, i32 %905, i32 %906, i32 %907, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %908 = fcmp uno <16 x float> %744, zeroinitializer, !dbg !76
  %909 = fcmp uno float %741, 0.000000e+00, !dbg !78
  %910 = fcmp uno float %742, 0.000000e+00, !dbg !78
  %911 = fcmp uno <4 x float> %746, zeroinitializer, !dbg !78
  %912 = fcmp uno <8 x float> %745, zeroinitializer, !dbg !78
  %913 = fcmp uno <2 x float> %743, zeroinitializer, !dbg !76
  %914 = insertelement <2 x i32> poison, i32 %820, i64 0, !dbg !67
  %915 = insertelement <2 x i32> %914, i32 %821, i64 1, !dbg !67
  %916 = bitcast <2 x i32> %915 to <2 x float>, !dbg !67
  %917 = fpext <2 x bfloat> %832 to <2 x float>, !dbg !80
  %918 = insertelement <2 x i32> poison, i32 %841, i64 0, !dbg !71
  %919 = insertelement <2 x i32> %918, i32 %842, i64 1, !dbg !71
  %920 = bitcast <2 x i32> %919 to <2 x float>, !dbg !71
  %921 = fpext <2 x bfloat> %853 to <2 x float>, !dbg !81
  %922 = load <2 x float>, ptr addrspace(3) %gep, align 16, !dbg !75
  %923 = fadd <2 x float> %916, %917, !dbg !82
  %924 = fadd <2 x float> %923, splat (float 1.000000e+00), !dbg !83
  %925 = fmul <2 x float> %924, %922, !dbg !84
  %926 = fadd <2 x float> %920, %921, !dbg !85
  %927 = fadd <2 x float> %926, %925, !dbg !86
  %928 = extractelement <2 x float> %927, i64 0, !dbg !87
  %929 = extractelement <2 x float> %927, i64 1, !dbg !87
  %930 = fcmp ogt <2 x float> %743, %927, !dbg !88
  %931 = or <2 x i1> %913, %930, !dbg !89
  %932 = select <2 x i1> %931, <2 x float> %743, <2 x float> %927, !dbg !90
  %933 = insertelement <2 x i32> poison, i32 %822, i64 0, !dbg !67
  %934 = insertelement <2 x i32> %933, i32 %823, i64 1, !dbg !67
  %935 = bitcast <2 x i32> %934 to <2 x float>, !dbg !67
  %936 = insertelement <4 x i32> poison, i32 %825, i64 0, !dbg !67
  %937 = insertelement <4 x i32> %936, i32 %826, i64 1, !dbg !67
  %938 = insertelement <4 x i32> %937, i32 %827, i64 2, !dbg !67
  %939 = insertelement <4 x i32> %938, i32 %828, i64 3, !dbg !67
  %940 = bitcast <4 x i32> %939 to <4 x float>, !dbg !67
  %941 = fpext <2 x bfloat> %834 to <2 x float>, !dbg !80
  %942 = shufflevector <2 x bfloat> %836, <2 x bfloat> %838, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !80
  %943 = fpext <4 x bfloat> %942 to <4 x float>, !dbg !80
  %944 = insertelement <2 x i32> poison, i32 %843, i64 0, !dbg !71
  %945 = insertelement <2 x i32> %944, i32 %844, i64 1, !dbg !71
  %946 = bitcast <2 x i32> %945 to <2 x float>, !dbg !71
  %947 = insertelement <4 x i32> poison, i32 %846, i64 0, !dbg !71
  %948 = insertelement <4 x i32> %947, i32 %847, i64 1, !dbg !71
  %949 = insertelement <4 x i32> %948, i32 %848, i64 2, !dbg !71
  %950 = insertelement <4 x i32> %949, i32 %849, i64 3, !dbg !71
  %951 = bitcast <4 x i32> %950 to <4 x float>, !dbg !71
  %952 = fpext <2 x bfloat> %855 to <2 x float>, !dbg !81
  %953 = shufflevector <2 x bfloat> %857, <2 x bfloat> %859, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %954 = fpext <4 x bfloat> %953 to <4 x float>, !dbg !81
  %955 = load <8 x float>, ptr addrspace(3) %732, align 16, !dbg !75
  %956 = load <4 x float>, ptr addrspace(3) %737, align 8, !dbg !75
  %957 = load <2 x float>, ptr addrspace(3) %738, align 8, !dbg !75
  %958 = fadd <2 x float> %935, %941, !dbg !82
  %959 = fadd <4 x float> %940, %943, !dbg !82
  %960 = fadd <2 x float> %958, splat (float 1.000000e+00), !dbg !83
  %961 = fadd <4 x float> %959, splat (float 1.000000e+00), !dbg !83
  %962 = fadd <2 x float> %946, %952, !dbg !85
  %963 = fadd <4 x float> %951, %954, !dbg !85
  %964 = shufflevector <2 x float> %924, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %965 = shufflevector <4 x float> %961, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %966 = shufflevector <8 x float> %964, <8 x float> %965, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !84
  %967 = shufflevector <2 x float> %960, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %968 = shufflevector <8 x float> %966, <8 x float> %967, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !84
  %969 = shufflevector <8 x float> %968, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !84
  %970 = shufflevector <8 x float> %955, <8 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !84
  %971 = shufflevector <8 x float> %955, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %972 = shufflevector <16 x float> %971, <16 x float> %970, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !84
  %973 = shufflevector <4 x float> %956, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %974 = shufflevector <16 x float> %972, <16 x float> %973, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !84
  %975 = shufflevector <2 x float> %957, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %976 = shufflevector <16 x float> %974, <16 x float> %975, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !84
  %977 = fmul <16 x float> %969, %976, !dbg !84
  %978 = shufflevector <2 x float> %926, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %979 = shufflevector <4 x float> %963, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %980 = shufflevector <8 x float> %978, <8 x float> %979, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !86
  %981 = shufflevector <2 x float> %962, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !86
  %982 = shufflevector <8 x float> %980, <8 x float> %981, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !86
  %983 = shufflevector <8 x float> %982, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !86
  %984 = fadd <16 x float> %983, %977, !dbg !86
  %985 = extractelement <16 x float> %984, i64 2, !dbg !87
  %986 = fcmp olt float %741, %985, !dbg !91
  %987 = extractelement <16 x float> %984, i64 3, !dbg !87
  %988 = fcmp olt float %742, %987, !dbg !91
  %989 = extractelement <16 x float> %984, i64 4, !dbg !87
  %990 = extractelement <16 x float> %984, i64 5, !dbg !87
  %991 = extractelement <16 x float> %984, i64 6, !dbg !87
  %992 = extractelement <16 x float> %984, i64 7, !dbg !87
  %993 = extractelement <16 x float> %984, i64 8, !dbg !87
  %994 = extractelement <16 x float> %984, i64 9, !dbg !87
  %995 = extractelement <16 x float> %984, i64 10, !dbg !87
  %996 = extractelement <16 x float> %984, i64 11, !dbg !87
  %997 = extractelement <16 x float> %984, i64 12, !dbg !87
  %998 = extractelement <16 x float> %984, i64 13, !dbg !87
  %999 = or i1 %909, %986, !dbg !92
  %1000 = or i1 %910, %988, !dbg !92
  %1001 = select i1 %999, float %741, float %985, !dbg !93
  %1002 = select i1 %1000, float %742, float %987, !dbg !93
  %1003 = shufflevector <2 x float> %927, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !91
  %1004 = shufflevector <16 x float> %1003, <16 x float> %984, <4 x i32> <i32 1, i32 0, i32 21, i32 20>, !dbg !91
  %1005 = fcmp olt <4 x float> %746, %1004, !dbg !91
  %1006 = or <4 x i1> %911, %1005, !dbg !92
  %1007 = select <4 x i1> %1006, <4 x float> %746, <4 x float> %1004, !dbg !93
  %1008 = shufflevector <16 x float> %984, <16 x float> poison, <8 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13>, !dbg !91
  %1009 = fcmp olt <8 x float> %745, %1008, !dbg !91
  %1010 = or <8 x i1> %912, %1009, !dbg !92
  %1011 = select <8 x i1> %1010, <8 x float> %745, <8 x float> %1008, !dbg !93
  %1012 = select i1 %763, float %1001, float %741, !dbg !94
  %1013 = select i1 %763, float %1002, float %742, !dbg !94
  %1014 = insertelement <4 x i1> poison, i1 %763, i64 0, !dbg !94
  %1015 = shufflevector <4 x i1> %1014, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !94
  %1016 = select <4 x i1> %1015, <4 x float> %1007, <4 x float> %746, !dbg !94
  %1017 = insertelement <8 x i1> poison, i1 %763, i64 0, !dbg !94
  %1018 = shufflevector <8 x i1> %1017, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !94
  %1019 = select <8 x i1> %1018, <8 x float> %1011, <8 x float> %745, !dbg !94
  %1020 = fcmp ogt <16 x float> %744, %984, !dbg !88
  %1021 = fcmp olt <16 x float> %744, %984, !dbg !88
  %1022 = shufflevector <16 x i1> %1020, <16 x i1> %1021, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !88
  %1023 = or <16 x i1> %908, %1022, !dbg !89
  %1024 = select <16 x i1> %1023, <16 x float> %744, <16 x float> %984, !dbg !90
  %1025 = insertelement <2 x i1> poison, i1 %763, i64 0, !dbg !95
  %1026 = shufflevector <2 x i1> %1025, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !95
  %1027 = select <2 x i1> %1026, <2 x float> %932, <2 x float> %743, !dbg !95
  %1028 = insertelement <16 x i1> poison, i1 %763, i64 0, !dbg !95
  %1029 = shufflevector <16 x i1> %1028, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !95
  %1030 = select <16 x i1> %1029, <16 x float> %1024, <16 x float> %744, !dbg !95
  %1031 = sext i32 %757 to i64, !dbg !96
  %1032 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1031, !dbg !96
  %1033 = sext i32 %758 to i64, !dbg !96
  %1034 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1033, !dbg !96
  %1035 = extractelement <16 x float> %984, i64 0, !dbg !87
  %1036 = fptrunc float %1035 to bfloat, !dbg !87
  %1037 = extractelement <16 x float> %984, i64 1, !dbg !87
  %1038 = fptrunc float %1037 to bfloat, !dbg !87
  %1039 = fptrunc float %985 to bfloat, !dbg !87
  %1040 = fptrunc float %987 to bfloat, !dbg !87
  %1041 = fptrunc float %989 to bfloat, !dbg !87
  %1042 = fptrunc float %990 to bfloat, !dbg !87
  %1043 = fptrunc float %991 to bfloat, !dbg !87
  %1044 = fptrunc float %992 to bfloat, !dbg !87
  %1045 = fptrunc float %928 to bfloat, !dbg !87
  %1046 = fptrunc float %929 to bfloat, !dbg !87
  %1047 = fptrunc float %993 to bfloat, !dbg !87
  %1048 = fptrunc float %994 to bfloat, !dbg !87
  %1049 = fptrunc float %995 to bfloat, !dbg !87
  %1050 = fptrunc float %996 to bfloat, !dbg !87
  %1051 = fptrunc float %997 to bfloat, !dbg !87
  %1052 = fptrunc float %998 to bfloat, !dbg !87
  %1053 = insertelement <2 x bfloat> poison, bfloat %1036, i64 0, !dbg !87
  %1054 = insertelement <2 x bfloat> %1053, bfloat %1038, i64 1, !dbg !87
  %1055 = bitcast <2 x bfloat> %1054 to i32, !dbg !87
  %1056 = insertelement <2 x bfloat> poison, bfloat %1039, i64 0, !dbg !87
  %1057 = insertelement <2 x bfloat> %1056, bfloat %1040, i64 1, !dbg !87
  %1058 = bitcast <2 x bfloat> %1057 to i32, !dbg !87
  %1059 = insertelement <2 x bfloat> poison, bfloat %1041, i64 0, !dbg !87
  %1060 = insertelement <2 x bfloat> %1059, bfloat %1042, i64 1, !dbg !87
  %1061 = bitcast <2 x bfloat> %1060 to i32, !dbg !87
  %1062 = insertelement <2 x bfloat> poison, bfloat %1043, i64 0, !dbg !87
  %1063 = insertelement <2 x bfloat> %1062, bfloat %1044, i64 1, !dbg !87
  %1064 = bitcast <2 x bfloat> %1063 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1055, i32 %1058, i32 %1061, i32 %1064, ptr addrspace(1) %1032, i1 %763) #5, !dbg !87
  %1065 = insertelement <2 x bfloat> poison, bfloat %1045, i64 0, !dbg !87
  %1066 = insertelement <2 x bfloat> %1065, bfloat %1046, i64 1, !dbg !87
  %1067 = bitcast <2 x bfloat> %1066 to i32, !dbg !87
  %1068 = insertelement <2 x bfloat> poison, bfloat %1047, i64 0, !dbg !87
  %1069 = insertelement <2 x bfloat> %1068, bfloat %1048, i64 1, !dbg !87
  %1070 = bitcast <2 x bfloat> %1069 to i32, !dbg !87
  %1071 = insertelement <2 x bfloat> poison, bfloat %1049, i64 0, !dbg !87
  %1072 = insertelement <2 x bfloat> %1071, bfloat %1050, i64 1, !dbg !87
  %1073 = bitcast <2 x bfloat> %1072 to i32, !dbg !87
  %1074 = insertelement <2 x bfloat> poison, bfloat %1051, i64 0, !dbg !87
  %1075 = insertelement <2 x bfloat> %1074, bfloat %1052, i64 1, !dbg !87
  %1076 = bitcast <2 x bfloat> %1075 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1067, i32 %1070, i32 %1073, i32 %1076, ptr addrspace(1) %1034, i1 %763) #5, !dbg !87
  br i1 %740, label %739, label %1077, !dbg !57

1077:                                             ; preds = %739
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1078 = extractelement <16 x float> %1030, i64 14, !dbg !99
  %1079 = extractelement <16 x float> %1030, i64 15, !dbg !99
  %1080 = fcmp olt float %1078, %1079, !dbg !99
  %1081 = fcmp uno float %1078, 0.000000e+00, !dbg !100
  %1082 = or i1 %1080, %1081, !dbg !101
  %1083 = select i1 %1082, float %1078, float %1079, !dbg !102
  %1084 = fcmp olt float %1083, %1012, !dbg !99
  %1085 = fcmp uno float %1083, 0.000000e+00, !dbg !100
  %1086 = or i1 %1084, %1085, !dbg !101
  %1087 = select i1 %1086, float %1083, float %1012, !dbg !102
  %1088 = fcmp olt float %1087, %1013, !dbg !99
  %1089 = fcmp uno float %1087, 0.000000e+00, !dbg !100
  %1090 = or i1 %1088, %1089, !dbg !101
  %1091 = select i1 %1090, float %1087, float %1013, !dbg !102
  %1092 = extractelement <4 x float> %1016, i64 3, !dbg !99
  %1093 = fcmp olt float %1091, %1092, !dbg !99
  %1094 = fcmp uno float %1091, 0.000000e+00, !dbg !100
  %1095 = or i1 %1093, %1094, !dbg !101
  %1096 = select i1 %1095, float %1091, float %1092, !dbg !102
  %1097 = extractelement <4 x float> %1016, i64 2, !dbg !99
  %1098 = fcmp olt float %1096, %1097, !dbg !99
  %1099 = fcmp uno float %1096, 0.000000e+00, !dbg !100
  %1100 = or i1 %1098, %1099, !dbg !101
  %1101 = select i1 %1100, float %1096, float %1097, !dbg !102
  %1102 = extractelement <8 x float> %1019, i64 0, !dbg !99
  %1103 = fcmp olt float %1101, %1102, !dbg !99
  %1104 = fcmp uno float %1101, 0.000000e+00, !dbg !100
  %1105 = or i1 %1103, %1104, !dbg !101
  %1106 = select i1 %1105, float %1101, float %1102, !dbg !102
  %1107 = extractelement <8 x float> %1019, i64 1, !dbg !99
  %1108 = fcmp olt float %1106, %1107, !dbg !99
  %1109 = fcmp uno float %1106, 0.000000e+00, !dbg !100
  %1110 = or i1 %1108, %1109, !dbg !101
  %1111 = select i1 %1110, float %1106, float %1107, !dbg !102
  %1112 = extractelement <4 x float> %1016, i64 0, !dbg !99
  %1113 = extractelement <4 x float> %1016, i64 1, !dbg !99
  %1114 = fcmp olt float %1113, %1112, !dbg !99
  %1115 = fcmp uno float %1113, 0.000000e+00, !dbg !100
  %1116 = or i1 %1114, %1115, !dbg !101
  %1117 = select i1 %1116, float %1113, float %1112, !dbg !102
  %1118 = extractelement <8 x float> %1019, i64 2, !dbg !99
  %1119 = fcmp olt float %1117, %1118, !dbg !99
  %1120 = fcmp uno float %1117, 0.000000e+00, !dbg !100
  %1121 = or i1 %1119, %1120, !dbg !101
  %1122 = select i1 %1121, float %1117, float %1118, !dbg !102
  %1123 = extractelement <8 x float> %1019, i64 3, !dbg !99
  %1124 = fcmp olt float %1122, %1123, !dbg !99
  %1125 = fcmp uno float %1122, 0.000000e+00, !dbg !100
  %1126 = or i1 %1124, %1125, !dbg !101
  %1127 = select i1 %1126, float %1122, float %1123, !dbg !102
  %1128 = extractelement <8 x float> %1019, i64 4, !dbg !99
  %1129 = fcmp olt float %1127, %1128, !dbg !99
  %1130 = fcmp uno float %1127, 0.000000e+00, !dbg !100
  %1131 = or i1 %1129, %1130, !dbg !101
  %1132 = select i1 %1131, float %1127, float %1128, !dbg !102
  %1133 = extractelement <8 x float> %1019, i64 5, !dbg !99
  %1134 = fcmp olt float %1132, %1133, !dbg !99
  %1135 = fcmp uno float %1132, 0.000000e+00, !dbg !100
  %1136 = or i1 %1134, %1135, !dbg !101
  %1137 = select i1 %1136, float %1132, float %1133, !dbg !102
  %1138 = extractelement <8 x float> %1019, i64 6, !dbg !99
  %1139 = fcmp olt float %1137, %1138, !dbg !99
  %1140 = fcmp uno float %1137, 0.000000e+00, !dbg !100
  %1141 = or i1 %1139, %1140, !dbg !101
  %1142 = select i1 %1141, float %1137, float %1138, !dbg !102
  %1143 = extractelement <8 x float> %1019, i64 7, !dbg !99
  %1144 = fcmp olt float %1142, %1143, !dbg !99
  %1145 = fcmp uno float %1142, 0.000000e+00, !dbg !100
  %1146 = or i1 %1144, %1145, !dbg !101
  %1147 = select i1 %1146, float %1142, float %1143, !dbg !102
  %1148 = bitcast float %1111 to i32, !dbg !97
  %1149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1148, i32 16, i32 31), !dbg !97
  %1150 = bitcast i32 %1149 to float, !dbg !97
  %1151 = fcmp olt float %1111, %1150, !dbg !99
  %1152 = fcmp uno float %1111, 0.000000e+00, !dbg !100
  %1153 = or i1 %1152, %1151, !dbg !101
  %1154 = select i1 %1153, float %1111, float %1150, !dbg !102
  %1155 = bitcast float %1154 to i32, !dbg !97
  %1156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1155, i32 8, i32 31), !dbg !97
  %1157 = bitcast i32 %1156 to float, !dbg !97
  %1158 = fcmp olt float %1154, %1157, !dbg !99
  %1159 = fcmp uno float %1154, 0.000000e+00, !dbg !100
  %1160 = or i1 %1158, %1159, !dbg !101
  %1161 = select i1 %1160, float %1154, float %1157, !dbg !102
  %1162 = bitcast float %1161 to i32, !dbg !97
  %1163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1162, i32 4, i32 31), !dbg !97
  %1164 = bitcast i32 %1163 to float, !dbg !97
  %1165 = fcmp olt float %1161, %1164, !dbg !99
  %1166 = fcmp uno float %1161, 0.000000e+00, !dbg !100
  %1167 = or i1 %1165, %1166, !dbg !101
  %1168 = select i1 %1167, float %1161, float %1164, !dbg !102
  %1169 = bitcast float %1168 to i32, !dbg !97
  %1170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1169, i32 2, i32 31), !dbg !97
  %1171 = bitcast i32 %1170 to float, !dbg !97
  %1172 = fcmp olt float %1168, %1171, !dbg !99
  %1173 = fcmp uno float %1168, 0.000000e+00, !dbg !100
  %1174 = or i1 %1172, %1173, !dbg !101
  %1175 = select i1 %1174, float %1168, float %1171, !dbg !102
  %1176 = bitcast float %1175 to i32, !dbg !97
  %1177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1176, i32 1, i32 31), !dbg !97
  %1178 = bitcast i32 %1177 to float, !dbg !97
  %1179 = fcmp olt float %1175, %1178, !dbg !99
  %1180 = fcmp uno float %1175, 0.000000e+00, !dbg !100
  %1181 = or i1 %1179, %1180, !dbg !101
  %1182 = bitcast float %1147 to i32, !dbg !97
  %1183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1182, i32 16, i32 31), !dbg !97
  %1184 = bitcast i32 %1183 to float, !dbg !97
  %1185 = fcmp olt float %1147, %1184, !dbg !99
  %1186 = fcmp uno float %1147, 0.000000e+00, !dbg !100
  %1187 = or i1 %1186, %1185, !dbg !101
  %1188 = select i1 %1187, float %1147, float %1184, !dbg !102
  %1189 = bitcast float %1188 to i32, !dbg !97
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 8, i32 31), !dbg !97
  %1191 = bitcast i32 %1190 to float, !dbg !97
  %1192 = fcmp olt float %1188, %1191, !dbg !99
  %1193 = fcmp uno float %1188, 0.000000e+00, !dbg !100
  %1194 = or i1 %1192, %1193, !dbg !101
  %1195 = select i1 %1194, float %1188, float %1191, !dbg !102
  %1196 = bitcast float %1195 to i32, !dbg !97
  %1197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1196, i32 4, i32 31), !dbg !97
  %1198 = bitcast i32 %1197 to float, !dbg !97
  %1199 = fcmp olt float %1195, %1198, !dbg !99
  %1200 = fcmp uno float %1195, 0.000000e+00, !dbg !100
  %1201 = or i1 %1199, %1200, !dbg !101
  %1202 = select i1 %1201, float %1195, float %1198, !dbg !102
  %1203 = bitcast float %1202 to i32, !dbg !97
  %1204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1203, i32 2, i32 31), !dbg !97
  %1205 = bitcast i32 %1204 to float, !dbg !97
  %1206 = fcmp olt float %1202, %1205, !dbg !99
  %1207 = fcmp uno float %1202, 0.000000e+00, !dbg !100
  %1208 = or i1 %1206, %1207, !dbg !101
  %1209 = select i1 %1208, float %1202, float %1205, !dbg !102
  %1210 = bitcast float %1209 to i32, !dbg !97
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 1, i32 31), !dbg !97
  %1212 = bitcast i32 %1211 to float, !dbg !97
  %1213 = fcmp olt float %1209, %1212, !dbg !99
  %1214 = fcmp uno float %1209, 0.000000e+00, !dbg !100
  %1215 = or i1 %1213, %1214, !dbg !101
  %1216 = and i32 %337, 7, !dbg !97
  %1217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1216, !dbg !97
  %1218 = select i1 %1181, i32 %1176, i32 %1177, !dbg !102
  %1219 = insertelement <1 x i32> poison, i32 %1218, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1217, <1 x i32> %1219, i1 %628) #5, !dbg !97
  %1220 = or disjoint i32 %1216, 8, !dbg !97
  %1221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1220, !dbg !97
  %1222 = select i1 %1215, i32 %1210, i32 %1211, !dbg !102
  %1223 = insertelement <1 x i32> poison, i32 %1222, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1221, <1 x i32> %1223, i1 %628) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1224 = icmp slt i32 %19, 16, !dbg !97
  %1225 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %1224) #5, !dbg !97
  %1226 = bitcast i32 %1225 to float, !dbg !97
  %1227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1225, i32 4, i32 31), !dbg !97
  %1228 = bitcast i32 %1227 to float, !dbg !97
  %1229 = fcmp olt float %1226, %1228, !dbg !99
  %1230 = fcmp uno float %1226, 0.000000e+00, !dbg !100
  %1231 = or i1 %1230, %1229, !dbg !101
  %1232 = select i1 %1231, float %1226, float %1228, !dbg !102
  %1233 = bitcast float %1232 to i32, !dbg !97
  %1234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1233, i32 2, i32 31), !dbg !97
  %1235 = bitcast i32 %1234 to float, !dbg !97
  %1236 = fcmp olt float %1232, %1235, !dbg !99
  %1237 = fcmp uno float %1232, 0.000000e+00, !dbg !100
  %1238 = or i1 %1236, %1237, !dbg !101
  %1239 = select i1 %1238, float %1232, float %1235, !dbg !102
  %1240 = bitcast float %1239 to i32, !dbg !97
  %1241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1240, i32 1, i32 31), !dbg !97
  %1242 = bitcast i32 %1241 to float, !dbg !97
  %1243 = fcmp olt float %1239, %1242, !dbg !99
  %1244 = fcmp uno float %1239, 0.000000e+00, !dbg !100
  %1245 = or i1 %1243, %1244, !dbg !101
  %1246 = and i32 %19, 7, !dbg !97
  %1247 = icmp eq i32 %1246, 0, !dbg !97
  %1248 = and i1 %1224, %1247, !dbg !97
  %1249 = select i1 %1245, i32 %1240, i32 %1241, !dbg !102
  %1250 = insertelement <1 x i32> poison, i32 %1249, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %1250, i1 %1248) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1251 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !97
  %1252 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1253 = bitcast float %1251 to i32, !dbg !103
  %1254 = bitcast float %1252 to i32, !dbg !103
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1253, i32 %1254, i1 true) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1255 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %338, !dbg !103
  %1256 = load float, ptr addrspace(3) %1255, align 4, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1257 = extractelement <16 x float> %1030, i64 0, !dbg !106
  %1258 = extractelement <16 x float> %1030, i64 1, !dbg !106
  %1259 = fcmp ogt float %1257, %1258, !dbg !106
  %1260 = fcmp uno float %1257, 0.000000e+00, !dbg !107
  %1261 = or i1 %1259, %1260, !dbg !108
  %1262 = select i1 %1261, float %1257, float %1258, !dbg !109
  %1263 = extractelement <16 x float> %1030, i64 2, !dbg !106
  %1264 = fcmp ogt float %1262, %1263, !dbg !106
  %1265 = fcmp uno float %1262, 0.000000e+00, !dbg !107
  %1266 = or i1 %1264, %1265, !dbg !108
  %1267 = select i1 %1266, float %1262, float %1263, !dbg !109
  %1268 = extractelement <16 x float> %1030, i64 3, !dbg !106
  %1269 = fcmp ogt float %1267, %1268, !dbg !106
  %1270 = fcmp uno float %1267, 0.000000e+00, !dbg !107
  %1271 = or i1 %1269, %1270, !dbg !108
  %1272 = select i1 %1271, float %1267, float %1268, !dbg !109
  %1273 = extractelement <16 x float> %1030, i64 4, !dbg !106
  %1274 = fcmp ogt float %1272, %1273, !dbg !106
  %1275 = fcmp uno float %1272, 0.000000e+00, !dbg !107
  %1276 = or i1 %1274, %1275, !dbg !108
  %1277 = select i1 %1276, float %1272, float %1273, !dbg !109
  %1278 = extractelement <16 x float> %1030, i64 5, !dbg !106
  %1279 = fcmp ogt float %1277, %1278, !dbg !106
  %1280 = fcmp uno float %1277, 0.000000e+00, !dbg !107
  %1281 = or i1 %1279, %1280, !dbg !108
  %1282 = select i1 %1281, float %1277, float %1278, !dbg !109
  %1283 = extractelement <16 x float> %1030, i64 6, !dbg !106
  %1284 = fcmp ogt float %1282, %1283, !dbg !106
  %1285 = fcmp uno float %1282, 0.000000e+00, !dbg !107
  %1286 = or i1 %1284, %1285, !dbg !108
  %1287 = select i1 %1286, float %1282, float %1283, !dbg !109
  %1288 = extractelement <16 x float> %1030, i64 7, !dbg !106
  %1289 = fcmp ogt float %1287, %1288, !dbg !106
  %1290 = fcmp uno float %1287, 0.000000e+00, !dbg !107
  %1291 = or i1 %1289, %1290, !dbg !108
  %1292 = select i1 %1291, float %1287, float %1288, !dbg !109
  %1293 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1027, <2 x i32> <i32 0, i32 2>, !dbg !106
  %1294 = fcmp ogt <2 x float> %1293, %1027, !dbg !106
  %1295 = fcmp uno <2 x float> %1293, %1027, !dbg !106
  %shift = shufflevector <2 x i1> %1294, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !108
  %1296 = or <2 x i1> %shift, %1295, !dbg !108
  %1297 = extractelement <2 x i1> %1296, i64 0, !dbg !108
  %1298 = extractelement <2 x float> %1027, i64 0, !dbg !109
  %1299 = extractelement <2 x float> %1027, i64 1, !dbg !109
  %1300 = select i1 %1297, float %1298, float %1299, !dbg !109
  %1301 = extractelement <16 x float> %1030, i64 8, !dbg !106
  %1302 = fcmp ogt float %1300, %1301, !dbg !106
  %1303 = fcmp uno float %1300, 0.000000e+00, !dbg !107
  %1304 = or i1 %1302, %1303, !dbg !108
  %1305 = select i1 %1304, float %1300, float %1301, !dbg !109
  %1306 = extractelement <16 x float> %1030, i64 9, !dbg !106
  %1307 = fcmp ogt float %1305, %1306, !dbg !106
  %1308 = fcmp uno float %1305, 0.000000e+00, !dbg !107
  %1309 = or i1 %1307, %1308, !dbg !108
  %1310 = select i1 %1309, float %1305, float %1306, !dbg !109
  %1311 = extractelement <16 x float> %1030, i64 10, !dbg !106
  %1312 = fcmp ogt float %1310, %1311, !dbg !106
  %1313 = fcmp uno float %1310, 0.000000e+00, !dbg !107
  %1314 = or i1 %1312, %1313, !dbg !108
  %1315 = select i1 %1314, float %1310, float %1311, !dbg !109
  %1316 = extractelement <16 x float> %1030, i64 11, !dbg !106
  %1317 = fcmp ogt float %1315, %1316, !dbg !106
  %1318 = fcmp uno float %1315, 0.000000e+00, !dbg !107
  %1319 = or i1 %1317, %1318, !dbg !108
  %1320 = select i1 %1319, float %1315, float %1316, !dbg !109
  %1321 = extractelement <16 x float> %1030, i64 12, !dbg !106
  %1322 = fcmp ogt float %1320, %1321, !dbg !106
  %1323 = fcmp uno float %1320, 0.000000e+00, !dbg !107
  %1324 = or i1 %1322, %1323, !dbg !108
  %1325 = select i1 %1324, float %1320, float %1321, !dbg !109
  %1326 = extractelement <16 x float> %1030, i64 13, !dbg !106
  %1327 = fcmp ogt float %1325, %1326, !dbg !106
  %1328 = fcmp uno float %1325, 0.000000e+00, !dbg !107
  %1329 = or i1 %1327, %1328, !dbg !108
  %1330 = select i1 %1329, float %1325, float %1326, !dbg !109
  %1331 = bitcast float %1292 to i32, !dbg !104
  %1332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1331, i32 16, i32 31), !dbg !104
  %1333 = bitcast i32 %1332 to float, !dbg !104
  %1334 = fcmp ogt float %1292, %1333, !dbg !106
  %1335 = fcmp uno float %1292, 0.000000e+00, !dbg !107
  %1336 = or i1 %1335, %1334, !dbg !108
  %1337 = select i1 %1336, float %1292, float %1333, !dbg !109
  %1338 = bitcast float %1337 to i32, !dbg !104
  %1339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1338, i32 8, i32 31), !dbg !104
  %1340 = bitcast i32 %1339 to float, !dbg !104
  %1341 = fcmp ogt float %1337, %1340, !dbg !106
  %1342 = fcmp uno float %1337, 0.000000e+00, !dbg !107
  %1343 = or i1 %1341, %1342, !dbg !108
  %1344 = select i1 %1343, float %1337, float %1340, !dbg !109
  %1345 = bitcast float %1344 to i32, !dbg !104
  %1346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1345, i32 4, i32 31), !dbg !104
  %1347 = bitcast i32 %1346 to float, !dbg !104
  %1348 = fcmp ogt float %1344, %1347, !dbg !106
  %1349 = fcmp uno float %1344, 0.000000e+00, !dbg !107
  %1350 = or i1 %1348, %1349, !dbg !108
  %1351 = select i1 %1350, float %1344, float %1347, !dbg !109
  %1352 = bitcast float %1351 to i32, !dbg !104
  %1353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1352, i32 2, i32 31), !dbg !104
  %1354 = bitcast i32 %1353 to float, !dbg !104
  %1355 = fcmp ogt float %1351, %1354, !dbg !106
  %1356 = fcmp uno float %1351, 0.000000e+00, !dbg !107
  %1357 = or i1 %1355, %1356, !dbg !108
  %1358 = select i1 %1357, float %1351, float %1354, !dbg !109
  %1359 = bitcast float %1358 to i32, !dbg !104
  %1360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1359, i32 1, i32 31), !dbg !104
  %1361 = bitcast i32 %1360 to float, !dbg !104
  %1362 = fcmp ogt float %1358, %1361, !dbg !106
  %1363 = fcmp uno float %1358, 0.000000e+00, !dbg !107
  %1364 = or i1 %1362, %1363, !dbg !108
  %1365 = bitcast float %1330 to i32, !dbg !104
  %1366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1365, i32 16, i32 31), !dbg !104
  %1367 = bitcast i32 %1366 to float, !dbg !104
  %1368 = fcmp ogt float %1330, %1367, !dbg !106
  %1369 = fcmp uno float %1330, 0.000000e+00, !dbg !107
  %1370 = or i1 %1369, %1368, !dbg !108
  %1371 = select i1 %1370, float %1330, float %1367, !dbg !109
  %1372 = bitcast float %1371 to i32, !dbg !104
  %1373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1372, i32 8, i32 31), !dbg !104
  %1374 = bitcast i32 %1373 to float, !dbg !104
  %1375 = fcmp ogt float %1371, %1374, !dbg !106
  %1376 = fcmp uno float %1371, 0.000000e+00, !dbg !107
  %1377 = or i1 %1375, %1376, !dbg !108
  %1378 = select i1 %1377, float %1371, float %1374, !dbg !109
  %1379 = bitcast float %1378 to i32, !dbg !104
  %1380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1379, i32 4, i32 31), !dbg !104
  %1381 = bitcast i32 %1380 to float, !dbg !104
  %1382 = fcmp ogt float %1378, %1381, !dbg !106
  %1383 = fcmp uno float %1378, 0.000000e+00, !dbg !107
  %1384 = or i1 %1382, %1383, !dbg !108
  %1385 = select i1 %1384, float %1378, float %1381, !dbg !109
  %1386 = bitcast float %1385 to i32, !dbg !104
  %1387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1386, i32 2, i32 31), !dbg !104
  %1388 = bitcast i32 %1387 to float, !dbg !104
  %1389 = fcmp ogt float %1385, %1388, !dbg !106
  %1390 = fcmp uno float %1385, 0.000000e+00, !dbg !107
  %1391 = or i1 %1389, %1390, !dbg !108
  %1392 = select i1 %1391, float %1385, float %1388, !dbg !109
  %1393 = bitcast float %1392 to i32, !dbg !104
  %1394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1393, i32 1, i32 31), !dbg !104
  %1395 = bitcast i32 %1394 to float, !dbg !104
  %1396 = fcmp ogt float %1392, %1395, !dbg !106
  %1397 = fcmp uno float %1392, 0.000000e+00, !dbg !107
  %1398 = or i1 %1396, %1397, !dbg !108
  %1399 = select i1 %1364, i32 %1359, i32 %1360, !dbg !109
  %1400 = insertelement <1 x i32> poison, i32 %1399, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1217, <1 x i32> %1400, i1 %628) #5, !dbg !104
  %1401 = select i1 %1398, i32 %1393, i32 %1394, !dbg !109
  %1402 = insertelement <1 x i32> poison, i32 %1401, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1221, <1 x i32> %1402, i1 %628) #5, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1403 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %1224) #5, !dbg !104
  %1404 = bitcast i32 %1403 to float, !dbg !104
  %1405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1403, i32 4, i32 31), !dbg !104
  %1406 = bitcast i32 %1405 to float, !dbg !104
  %1407 = fcmp ogt float %1404, %1406, !dbg !106
  %1408 = fcmp uno float %1404, 0.000000e+00, !dbg !107
  %1409 = or i1 %1408, %1407, !dbg !108
  %1410 = select i1 %1409, float %1404, float %1406, !dbg !109
  %1411 = bitcast float %1410 to i32, !dbg !104
  %1412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1411, i32 2, i32 31), !dbg !104
  %1413 = bitcast i32 %1412 to float, !dbg !104
  %1414 = fcmp ogt float %1410, %1413, !dbg !106
  %1415 = fcmp uno float %1410, 0.000000e+00, !dbg !107
  %1416 = or i1 %1414, %1415, !dbg !108
  %1417 = select i1 %1416, float %1410, float %1413, !dbg !109
  %1418 = bitcast float %1417 to i32, !dbg !104
  %1419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1418, i32 1, i32 31), !dbg !104
  %1420 = bitcast i32 %1419 to float, !dbg !104
  %1421 = fcmp ogt float %1417, %1420, !dbg !106
  %1422 = fcmp uno float %1417, 0.000000e+00, !dbg !107
  %1423 = or i1 %1421, %1422, !dbg !108
  %1424 = select i1 %1423, i32 %1418, i32 %1419, !dbg !109
  %1425 = insertelement <1 x i32> poison, i32 %1424, i64 0, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %1425, i1 %1248) #5, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1426 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !104
  %1427 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %1428 = bitcast float %1426 to i32, !dbg !110
  %1429 = bitcast float %1427 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1428, i32 %1429, i1 true) #5, !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !110
  %1430 = load float, ptr addrspace(3) %1255, align 4, !dbg !110
  %1431 = sext i32 %339 to i64, !dbg !111
  %1432 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1431, !dbg !111
  %1433 = fptrunc float %1256 to bfloat, !dbg !103
  %1434 = and i32 %19, 254, !dbg !103
  %1435 = icmp eq i32 %1434, 0, !dbg !103
  %1436 = bitcast bfloat %1433 to i16, !dbg !103
  %1437 = and i1 %1435, %340, !dbg !103
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1436, ptr addrspace(1) %1432, i1 %1437) #5, !dbg !103
  %1438 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1431, !dbg !112
  %1439 = fptrunc float %1430 to bfloat, !dbg !110
  %1440 = bitcast bfloat %1439 to i16, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1440, ptr addrspace(1) %1438, i1 %1437) #5, !dbg !110
  %1441 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1431, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1436, ptr addrspace(1) %1441, i1 %1437) #5, !dbg !114
  %1442 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1431, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1440, ptr addrspace(1) %1442, i1 %1437) #5, !dbg !116
  %1443 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1431, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1436, ptr addrspace(1) %1443, i1 %1437) #5, !dbg !118
  %1444 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1431, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1440, ptr addrspace(1) %1444, i1 %1437) #5, !dbg !120
  %.inv = fcmp oge float %1251, 0.000000e+00, !dbg !121
  %1445 = select i1 %.inv, float 0.000000e+00, float %1251, !dbg !121
  %.inv4 = fcmp oge float %1252, 0.000000e+00, !dbg !121
  %1446 = select i1 %.inv4, float 0.000000e+00, float %1252, !dbg !121
  %1447 = fsub float 0.000000e+00, %1445, !dbg !123
  %1448 = fsub float 0.000000e+00, %1446, !dbg !123
  %.inv5 = fcmp ole float %1426, 0.000000e+00, !dbg !124
  %1449 = select i1 %.inv5, float 0.000000e+00, float %1426, !dbg !124
  %.inv6 = fcmp ole float %1427, 0.000000e+00, !dbg !124
  %1450 = select i1 %.inv6, float 0.000000e+00, float %1427, !dbg !124
  %1451 = fcmp ogt float %1447, %1449, !dbg !126
  %1452 = fcmp ogt float %1448, %1450, !dbg !126
  %1453 = fcmp uno float %1447, 0.000000e+00, !dbg !128
  %1454 = fcmp uno float %1448, 0.000000e+00, !dbg !128
  %1455 = or i1 %1453, %1451, !dbg !129
  %1456 = or i1 %1454, %1452, !dbg !129
  %1457 = select i1 %1455, float %1447, float %1449, !dbg !130
  %1458 = select i1 %1456, float %1448, float %1450, !dbg !130
  %1459 = fmul float %1457, 0x3F80204080000000, !dbg !131
  %1460 = fmul float %1458, 0x3F80204080000000, !dbg !131
  %1461 = fcmp ogt float %1459, 0x3EE4F8B580000000, !dbg !132
  %1462 = fcmp ogt float %1460, 0x3EE4F8B580000000, !dbg !132
  %1463 = fcmp uno float %1459, 0.000000e+00, !dbg !134
  %1464 = fcmp uno float %1460, 0.000000e+00, !dbg !134
  %1465 = or i1 %1461, %1463, !dbg !135
  %1466 = or i1 %1462, %1464, !dbg !135
  %1467 = select i1 %1465, float %1459, float 0x3EE4F8B580000000, !dbg !136
  %1468 = select i1 %1466, float %1460, float 0x3EE4F8B580000000, !dbg !136
  %1469 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1467), !dbg !137
  %1470 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1468), !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1471 = bitcast float %1469 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1471, i1 true) #5, !dbg !138
  %1472 = bitcast float %1470 to <1 x i32>, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1472, i1 true) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1473 = lshr exact i32 %20, 4, !dbg !138
  %1474 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1473, !dbg !138
  %1475 = load float, ptr addrspace(3) %1474, align 8, !dbg !138
  br label %1476, !dbg !139

1476:                                             ; preds = %1077, %1476
  %1477 = phi i1 [ true, %1077 ], [ false, %1476 ]
  %indvars.iv184 = phi i64 [ 0, %1077 ], [ 2048, %1476 ]
  %1478 = or disjoint i64 %indvars.iv184, %32, !dbg !140
  %1479 = icmp samesign ult i64 %1478, 3072, !dbg !141
  %1480 = trunc nuw nsw i64 %1478 to i32, !dbg !142
  %1481 = add i32 %30, %1480, !dbg !142
  %1482 = trunc nuw nsw i64 %indvars.iv184 to i32, !dbg !142
  %1483 = add i32 %31, %1482, !dbg !142
  %1484 = sext i32 %1481 to i64, !dbg !143
  %1485 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1484, !dbg !143
  %1486 = sext i32 %1483 to i64, !dbg !143
  %1487 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1486, !dbg !143
  %1488 = and i1 %23, %1479, !dbg !144
  %1489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1485, i1 %1488) #5, !dbg !145
  %1490 = extractvalue { i32, i32, i32, i32 } %1489, 0, !dbg !145
  %1491 = bitcast i32 %1490 to <2 x bfloat>, !dbg !145
  %1492 = extractvalue { i32, i32, i32, i32 } %1489, 1, !dbg !145
  %1493 = bitcast i32 %1492 to <2 x bfloat>, !dbg !145
  %1494 = extractvalue { i32, i32, i32, i32 } %1489, 2, !dbg !145
  %1495 = bitcast i32 %1494 to <2 x bfloat>, !dbg !145
  %1496 = extractvalue { i32, i32, i32, i32 } %1489, 3, !dbg !145
  %1497 = bitcast i32 %1496 to <2 x bfloat>, !dbg !145
  %1498 = extractelement <2 x bfloat> %1491, i64 0, !dbg !145
  %1499 = extractelement <2 x bfloat> %1491, i64 1, !dbg !145
  %1500 = extractelement <2 x bfloat> %1493, i64 0, !dbg !145
  %1501 = extractelement <2 x bfloat> %1493, i64 1, !dbg !145
  %1502 = extractelement <2 x bfloat> %1495, i64 0, !dbg !145
  %1503 = extractelement <2 x bfloat> %1495, i64 1, !dbg !145
  %1504 = extractelement <2 x bfloat> %1497, i64 0, !dbg !145
  %1505 = extractelement <2 x bfloat> %1497, i64 1, !dbg !145
  %1506 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1487, i1 %1488) #5, !dbg !145
  %1507 = extractvalue { i32, i32, i32, i32 } %1506, 0, !dbg !145
  %1508 = bitcast i32 %1507 to <2 x bfloat>, !dbg !145
  %1509 = extractvalue { i32, i32, i32, i32 } %1506, 1, !dbg !145
  %1510 = bitcast i32 %1509 to <2 x bfloat>, !dbg !145
  %1511 = extractvalue { i32, i32, i32, i32 } %1506, 2, !dbg !145
  %1512 = bitcast i32 %1511 to <2 x bfloat>, !dbg !145
  %1513 = extractvalue { i32, i32, i32, i32 } %1506, 3, !dbg !145
  %1514 = bitcast i32 %1513 to <2 x bfloat>, !dbg !145
  %1515 = extractelement <2 x bfloat> %1508, i64 0, !dbg !145
  %1516 = extractelement <2 x bfloat> %1508, i64 1, !dbg !145
  %1517 = extractelement <2 x bfloat> %1510, i64 0, !dbg !145
  %1518 = extractelement <2 x bfloat> %1510, i64 1, !dbg !145
  %1519 = extractelement <2 x bfloat> %1512, i64 0, !dbg !145
  %1520 = extractelement <2 x bfloat> %1512, i64 1, !dbg !145
  %1521 = extractelement <2 x bfloat> %1514, i64 0, !dbg !145
  %1522 = extractelement <2 x bfloat> %1514, i64 1, !dbg !145
  %1523 = fpext bfloat %1498 to float, !dbg !146
  %1524 = fpext bfloat %1499 to float, !dbg !146
  %1525 = fpext bfloat %1500 to float, !dbg !146
  %1526 = fpext bfloat %1501 to float, !dbg !146
  %1527 = fpext bfloat %1502 to float, !dbg !146
  %1528 = fpext bfloat %1503 to float, !dbg !146
  %1529 = fpext bfloat %1504 to float, !dbg !146
  %1530 = fpext bfloat %1505 to float, !dbg !146
  %1531 = fpext bfloat %1515 to float, !dbg !146
  %1532 = fpext bfloat %1516 to float, !dbg !146
  %1533 = fpext bfloat %1517 to float, !dbg !146
  %1534 = fpext bfloat %1518 to float, !dbg !146
  %1535 = fpext bfloat %1519 to float, !dbg !146
  %1536 = fpext bfloat %1520 to float, !dbg !146
  %1537 = fpext bfloat %1521 to float, !dbg !146
  %1538 = fpext bfloat %1522 to float, !dbg !146
  %1539 = fmul float %1475, %1523, !dbg !138
  %1540 = fmul float %1475, %1524, !dbg !138
  %1541 = fmul float %1475, %1525, !dbg !138
  %1542 = fmul float %1475, %1526, !dbg !138
  %1543 = fmul float %1475, %1527, !dbg !138
  %1544 = fmul float %1475, %1528, !dbg !138
  %1545 = fmul float %1475, %1529, !dbg !138
  %1546 = fmul float %1475, %1530, !dbg !138
  %1547 = fmul float %1475, %1531, !dbg !138
  %1548 = fmul float %1475, %1532, !dbg !138
  %1549 = fmul float %1475, %1533, !dbg !138
  %1550 = fmul float %1475, %1534, !dbg !138
  %1551 = fmul float %1475, %1535, !dbg !138
  %1552 = fmul float %1475, %1536, !dbg !138
  %1553 = fmul float %1475, %1537, !dbg !138
  %1554 = fmul float %1475, %1538, !dbg !138
  %1555 = tail call float @llvm.nvvm.round.f(float %1539) #5, !dbg !147
  %1556 = tail call float @llvm.nvvm.round.f(float %1540) #5, !dbg !147
  %1557 = tail call float @llvm.nvvm.round.f(float %1541) #5, !dbg !147
  %1558 = tail call float @llvm.nvvm.round.f(float %1542) #5, !dbg !147
  %1559 = tail call float @llvm.nvvm.round.f(float %1543) #5, !dbg !147
  %1560 = tail call float @llvm.nvvm.round.f(float %1544) #5, !dbg !147
  %1561 = tail call float @llvm.nvvm.round.f(float %1545) #5, !dbg !147
  %1562 = tail call float @llvm.nvvm.round.f(float %1546) #5, !dbg !147
  %1563 = tail call float @llvm.nvvm.round.f(float %1547) #5, !dbg !147
  %1564 = tail call float @llvm.nvvm.round.f(float %1548) #5, !dbg !147
  %1565 = tail call float @llvm.nvvm.round.f(float %1549) #5, !dbg !147
  %1566 = tail call float @llvm.nvvm.round.f(float %1550) #5, !dbg !147
  %1567 = tail call float @llvm.nvvm.round.f(float %1551) #5, !dbg !147
  %1568 = tail call float @llvm.nvvm.round.f(float %1552) #5, !dbg !147
  %1569 = tail call float @llvm.nvvm.round.f(float %1553) #5, !dbg !147
  %1570 = tail call float @llvm.nvvm.round.f(float %1554) #5, !dbg !147
  %1571 = insertelement <4 x float> poison, float %1555, i64 0, !dbg !148
  %1572 = insertelement <4 x float> %1571, float %1556, i64 1, !dbg !148
  %1573 = insertelement <4 x float> %1572, float %1557, i64 2, !dbg !148
  %1574 = insertelement <4 x float> %1573, float %1558, i64 3, !dbg !148
  %1575 = fcmp ogt <4 x float> %1574, splat (float -1.270000e+02), !dbg !148
  %1576 = fcmp uno <4 x float> %1574, zeroinitializer, !dbg !150
  %1577 = or <4 x i1> %1575, %1576, !dbg !151
  %1578 = select <4 x i1> %1577, <4 x float> %1574, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1579 = fcmp olt <4 x float> %1578, splat (float 1.270000e+02), !dbg !153
  %1580 = fcmp uno <4 x float> %1578, zeroinitializer, !dbg !155
  %1581 = or <4 x i1> %1579, %1580, !dbg !156
  %1582 = fptosi <4 x float> %1578 to <4 x i8>, !dbg !157
  %1583 = select <4 x i1> %1581, <4 x i8> %1582, <4 x i8> splat (i8 127), !dbg !158
  %1584 = insertelement <4 x float> poison, float %1559, i64 0, !dbg !148
  %1585 = insertelement <4 x float> %1584, float %1560, i64 1, !dbg !148
  %1586 = insertelement <4 x float> %1585, float %1561, i64 2, !dbg !148
  %1587 = insertelement <4 x float> %1586, float %1562, i64 3, !dbg !148
  %1588 = fcmp ogt <4 x float> %1587, splat (float -1.270000e+02), !dbg !148
  %1589 = fcmp uno <4 x float> %1587, zeroinitializer, !dbg !150
  %1590 = or <4 x i1> %1588, %1589, !dbg !151
  %1591 = select <4 x i1> %1590, <4 x float> %1587, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1592 = fcmp olt <4 x float> %1591, splat (float 1.270000e+02), !dbg !153
  %1593 = fcmp uno <4 x float> %1591, zeroinitializer, !dbg !155
  %1594 = or <4 x i1> %1592, %1593, !dbg !156
  %1595 = fptosi <4 x float> %1591 to <4 x i8>, !dbg !157
  %1596 = select <4 x i1> %1594, <4 x i8> %1595, <4 x i8> splat (i8 127), !dbg !158
  %1597 = insertelement <4 x float> poison, float %1563, i64 0, !dbg !148
  %1598 = insertelement <4 x float> %1597, float %1564, i64 1, !dbg !148
  %1599 = insertelement <4 x float> %1598, float %1565, i64 2, !dbg !148
  %1600 = insertelement <4 x float> %1599, float %1566, i64 3, !dbg !148
  %1601 = fcmp ogt <4 x float> %1600, splat (float -1.270000e+02), !dbg !148
  %1602 = fcmp uno <4 x float> %1600, zeroinitializer, !dbg !150
  %1603 = or <4 x i1> %1601, %1602, !dbg !151
  %1604 = select <4 x i1> %1603, <4 x float> %1600, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1605 = fcmp olt <4 x float> %1604, splat (float 1.270000e+02), !dbg !153
  %1606 = fcmp uno <4 x float> %1604, zeroinitializer, !dbg !155
  %1607 = or <4 x i1> %1605, %1606, !dbg !156
  %1608 = fptosi <4 x float> %1604 to <4 x i8>, !dbg !157
  %1609 = select <4 x i1> %1607, <4 x i8> %1608, <4 x i8> splat (i8 127), !dbg !158
  %1610 = insertelement <4 x float> poison, float %1567, i64 0, !dbg !148
  %1611 = insertelement <4 x float> %1610, float %1568, i64 1, !dbg !148
  %1612 = insertelement <4 x float> %1611, float %1569, i64 2, !dbg !148
  %1613 = insertelement <4 x float> %1612, float %1570, i64 3, !dbg !148
  %1614 = fcmp ogt <4 x float> %1613, splat (float -1.270000e+02), !dbg !148
  %1615 = fcmp uno <4 x float> %1613, zeroinitializer, !dbg !150
  %1616 = or <4 x i1> %1614, %1615, !dbg !151
  %1617 = select <4 x i1> %1616, <4 x float> %1613, <4 x float> splat (float -1.270000e+02), !dbg !152
  %1618 = fcmp olt <4 x float> %1617, splat (float 1.270000e+02), !dbg !153
  %1619 = fcmp uno <4 x float> %1617, zeroinitializer, !dbg !155
  %1620 = or <4 x i1> %1618, %1619, !dbg !156
  %1621 = fptosi <4 x float> %1617 to <4 x i8>, !dbg !157
  %1622 = select <4 x i1> %1620, <4 x i8> %1621, <4 x i8> splat (i8 127), !dbg !158
  %1623 = getelementptr i8, ptr addrspace(1) %10, i64 %1484, !dbg !159
  %1624 = bitcast <4 x i8> %1583 to i32, !dbg !160
  %1625 = bitcast <4 x i8> %1596 to i32, !dbg !160
  %1626 = bitcast <4 x i8> %1609 to i32, !dbg !160
  %1627 = bitcast <4 x i8> %1622 to i32, !dbg !160
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1624, i32 %1625, i32 %1626, i32 %1627, ptr addrspace(1) %1623, i1 %1488) #5, !dbg !160
  %1628 = getelementptr i8, ptr addrspace(1) %11, i64 %1484, !dbg !161
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1624, i32 %1625, i32 %1626, i32 %1627, ptr addrspace(1) %1628, i1 %1488) #5, !dbg !162
  %1629 = getelementptr i8, ptr addrspace(1) %12, i64 %1484, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1624, i32 %1625, i32 %1626, i32 %1627, ptr addrspace(1) %1629, i1 %1488) #5, !dbg !164
  br i1 %1477, label %1476, label %1630, !dbg !139

1630:                                             ; preds = %1476
  ret void, !dbg !165
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 33, column: 31, scope: !6)
!18 = !DILocation(line: 34, column: 29, scope: !6)
!19 = !DILocation(line: 38, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 59, scope: !6)
!22 = !DILocation(line: 38, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 112, scope: !6)
!24 = !DILocation(line: 203, column: 7, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 42, column: 51, scope: !6)
!28 = !DILocation(line: 208, column: 24, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 209, column: 30, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 210, column: 34, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 210, column: 26, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 211, column: 39, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 211, column: 31, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 211, column: 22, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 44, column: 62, scope: !6)
!36 = !DILocation(line: 45, column: 58, scope: !6)
!37 = !DILocation(line: 46, column: 66, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !25, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 46, scope: !6)
!54 = !DILocation(line: 67, column: 24, scope: !6)
!55 = !DILocation(line: 69, column: 24, scope: !6)
!56 = !DILocation(line: 70, column: 32, scope: !6)
!57 = !DILocation(line: 53, column: 40, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 55, column: 29, scope: !6)
!60 = !DILocation(line: 59, column: 41, scope: !6)
!61 = !DILocation(line: 59, column: 34, scope: !6)
!62 = !DILocation(line: 59, column: 59, scope: !6)
!63 = !DILocation(line: 59, column: 51, scope: !6)
!64 = !DILocation(line: 59, column: 113, scope: !6)
!65 = !DILocation(line: 60, column: 42, scope: !6)
!66 = !DILocation(line: 60, column: 35, scope: !6)
!67 = !DILocation(line: 60, column: 49, scope: !6)
!68 = !DILocation(line: 61, column: 35, scope: !6)
!69 = !DILocation(line: 61, column: 49, scope: !6)
!70 = !DILocation(line: 62, column: 35, scope: !6)
!71 = !DILocation(line: 62, column: 42, scope: !6)
!72 = !DILocation(line: 63, column: 35, scope: !6)
!73 = !DILocation(line: 63, column: 42, scope: !6)
!74 = !DILocation(line: 65, column: 24, scope: !6)
!75 = !DILocation(line: 71, column: 24, scope: !6)
!76 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !77)
!77 = !DILocation(line: 84, column: 47, scope: !6)
!78 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !79)
!79 = !DILocation(line: 82, column: 47, scope: !6)
!80 = !DILocation(line: 61, column: 102, scope: !6)
!81 = !DILocation(line: 63, column: 95, scope: !6)
!82 = !DILocation(line: 74, column: 24, scope: !6)
!83 = !DILocation(line: 76, column: 24, scope: !6)
!84 = !DILocation(line: 77, column: 24, scope: !6)
!85 = !DILocation(line: 79, column: 24, scope: !6)
!86 = !DILocation(line: 80, column: 24, scope: !6)
!87 = !DILocation(line: 86, column: 53, scope: !6)
!88 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !77)
!89 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !77)
!90 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !77)
!91 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !79)
!92 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !79)
!93 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !79)
!94 = !DILocation(line: 83, column: 50, scope: !6)
!95 = !DILocation(line: 85, column: 50, scope: !6)
!96 = !DILocation(line: 86, column: 29, scope: !6)
!97 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !98)
!98 = !DILocation(line: 87, column: 40, scope: !6)
!99 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !98)
!100 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !98)
!101 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !98)
!102 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !98)
!103 = !DILocation(line: 89, column: 37, scope: !6)
!104 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !105)
!105 = !DILocation(line: 88, column: 40, scope: !6)
!106 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !105)
!108 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !105)
!109 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !105)
!110 = !DILocation(line: 90, column: 37, scope: !6)
!111 = !DILocation(line: 89, column: 25, scope: !6)
!112 = !DILocation(line: 90, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 25, scope: !6)
!114 = !DILocation(line: 91, column: 37, scope: !6)
!115 = !DILocation(line: 92, column: 25, scope: !6)
!116 = !DILocation(line: 92, column: 37, scope: !6)
!117 = !DILocation(line: 93, column: 25, scope: !6)
!118 = !DILocation(line: 93, column: 37, scope: !6)
!119 = !DILocation(line: 94, column: 25, scope: !6)
!120 = !DILocation(line: 94, column: 37, scope: !6)
!121 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !122)
!122 = !DILocation(line: 103, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 17, scope: !6)
!124 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !125)
!125 = !DILocation(line: 105, column: 46, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !127)
!127 = !DILocation(line: 106, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !127)
!131 = !DILocation(line: 108, column: 24, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !133)
!133 = !DILocation(line: 111, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !133)
!137 = !DILocation(line: 114, column: 25, scope: !6)
!138 = !DILocation(line: 117, column: 24, scope: !6)
!139 = !DILocation(line: 95, column: 40, scope: !6)
!140 = !DILocation(line: 96, column: 31, scope: !6)
!141 = !DILocation(line: 97, column: 29, scope: !6)
!142 = !DILocation(line: 101, column: 43, scope: !6)
!143 = !DILocation(line: 101, column: 36, scope: !6)
!144 = !DILocation(line: 101, column: 61, scope: !6)
!145 = !DILocation(line: 101, column: 53, scope: !6)
!146 = !DILocation(line: 101, column: 115, scope: !6)
!147 = !DILocation(line: 118, column: 36, scope: !6)
!148 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !149)
!149 = !DILocation(line: 121, column: 46, scope: !6)
!150 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !149)
!151 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !149)
!152 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !149)
!153 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !154)
!154 = !DILocation(line: 123, column: 46, scope: !6)
!155 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !154)
!156 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !154)
!157 = !DILocation(line: 125, column: 25, scope: !6)
!158 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !154)
!159 = !DILocation(line: 126, column: 29, scope: !6)
!160 = !DILocation(line: 126, column: 53, scope: !6)
!161 = !DILocation(line: 127, column: 30, scope: !6)
!162 = !DILocation(line: 127, column: 54, scope: !6)
!163 = !DILocation(line: 128, column: 30, scope: !6)
!164 = !DILocation(line: 128, column: 54, scope: !6)
!165 = !DILocation(line: 95, column: 4, scope: !6)
