; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !11
  %12 = and i32 %11, 510, !dbg !11
  %13 = shl i32 %8, 7, !dbg !12
  %14 = and i32 %11, 126
  %invariant.op = or disjoint i32 %13, %14, !dbg !13
  %15 = zext nneg i32 %12 to i64, !dbg !13
  %16 = lshr i32 %12, 7, !dbg !14
  %17 = mul nuw nsw i32 %16, 526336, !dbg !15
  %.reass.us = add i32 %17, %invariant.op
  %18 = sext i32 %.reass.us to i64, !dbg !16
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !16
  br i1 %9, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 false) #4, !dbg !17
  %21 = or disjoint i64 %15, 512, !dbg !18
  %22 = lshr i64 %21, 7, !dbg !14
  %23 = trunc nuw nsw i64 %22 to i32
  %24 = mul nuw nsw i32 %23, 526336
  %.reass.1 = add i32 %24, %invariant.op
  %25 = sext i32 %.reass.1 to i64, !dbg !16
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 false) #4, !dbg !17
  %28 = insertelement <4 x i64> poison, i64 %15, i64 0, !dbg !18
  %29 = shufflevector <4 x i64> %28, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !18
  %30 = or disjoint <4 x i64> %29, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !18
  %31 = lshr <4 x i64> %30, splat (i64 7), !dbg !14
  %32 = trunc nuw nsw <4 x i64> %31 to <4 x i32>
  %33 = mul nuw nsw <4 x i32> %32, splat (i32 526336)
  %34 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> poison, <4 x i32> zeroinitializer
  %36 = add <4 x i32> %33, %35
  %37 = extractelement <4 x i32> %36, i64 3, !dbg !16
  %38 = sext i32 %37 to i64, !dbg !16
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %38, !dbg !16
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 false) #4, !dbg !17
  %41 = extractelement <4 x i32> %36, i64 2, !dbg !16
  %42 = sext i32 %41 to i64, !dbg !16
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !16
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 false) #4, !dbg !17
  %45 = extractelement <4 x i32> %36, i64 1, !dbg !16
  %46 = sext i32 %45 to i64, !dbg !16
  %47 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !16
  %48 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %47, i1 false) #4, !dbg !17
  %49 = extractelement <4 x i32> %36, i64 0, !dbg !16
  %50 = sext i32 %49 to i64, !dbg !16
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !16
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 false) #4, !dbg !17
  %53 = extractelement <4 x i64> %30, i64 0, !dbg !19
  %54 = extractelement <4 x i64> %30, i64 1, !dbg !19
  %55 = extractelement <4 x i64> %30, i64 2, !dbg !19
  %56 = extractelement <4 x i64> %30, i64 3, !dbg !19
  br label %.split5.us, !dbg !19

.split.us.preheader:                              ; preds = %7
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 true) #4, !dbg !17
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !17
  %59 = extractelement <2 x bfloat> %58, i64 0, !dbg !17
  %60 = extractelement <2 x bfloat> %58, i64 1, !dbg !17
  %61 = fpext bfloat %59 to float, !dbg !23
  %62 = fpext bfloat %60 to float, !dbg !23
  %63 = or disjoint i64 %15, 512, !dbg !18
  %64 = lshr i64 %63, 7, !dbg !14
  %65 = trunc nuw nsw i64 %64 to i32
  %66 = mul nuw nsw i32 %65, 526336
  %.reass.us.1 = add i32 %66, %invariant.op
  %67 = sext i32 %.reass.us.1 to i64, !dbg !16
  %68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %67, !dbg !16
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 true) #4, !dbg !17
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !17
  %71 = extractelement <2 x bfloat> %70, i64 0, !dbg !17
  %72 = extractelement <2 x bfloat> %70, i64 1, !dbg !17
  %73 = fpext bfloat %71 to float, !dbg !23
  %74 = fpext bfloat %72 to float, !dbg !23
  %75 = fcmp olt bfloat %59, %71, !dbg !24
  %76 = fcmp olt bfloat %60, %72, !dbg !24
  %77 = fcmp uno bfloat %59, 0xR0000, !dbg !26
  %78 = fcmp uno bfloat %60, 0xR0000, !dbg !26
  %79 = or i1 %77, %75, !dbg !27
  %80 = or i1 %78, %76, !dbg !27
  %81 = select i1 %79, float %61, float %73, !dbg !28
  %82 = select i1 %80, float %62, float %74, !dbg !28
  %83 = fcmp ogt bfloat %59, %71, !dbg !29
  %84 = fcmp ogt bfloat %60, %72, !dbg !29
  %85 = or i1 %77, %83, !dbg !31
  %86 = or i1 %78, %84, !dbg !31
  %87 = select i1 %85, float %61, float %73, !dbg !32
  %88 = select i1 %86, float %62, float %74, !dbg !32
  %89 = insertelement <4 x i64> poison, i64 %15, i64 0, !dbg !18
  %90 = shufflevector <4 x i64> %89, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !18
  %91 = or disjoint <4 x i64> %90, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !18
  %92 = fcmp uno float %81, 0.000000e+00, !dbg !26
  %93 = fcmp uno float %82, 0.000000e+00, !dbg !26
  %94 = fcmp uno float %87, 0.000000e+00, !dbg !33
  %95 = fcmp uno float %88, 0.000000e+00, !dbg !33
  %96 = lshr <4 x i64> %91, splat (i64 7), !dbg !14
  %97 = trunc nuw nsw <4 x i64> %96 to <4 x i32>
  %98 = mul nuw nsw <4 x i32> %97, splat (i32 526336)
  %99 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %100 = shufflevector <4 x i32> %99, <4 x i32> poison, <4 x i32> zeroinitializer
  %101 = add <4 x i32> %98, %100
  %102 = extractelement <4 x i32> %101, i64 3, !dbg !16
  %103 = sext i32 %102 to i64, !dbg !16
  %104 = getelementptr bfloat, ptr addrspace(1) %0, i64 %103, !dbg !16
  %105 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %104, i1 true) #4, !dbg !17
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !17
  %107 = extractelement <2 x bfloat> %106, i64 0, !dbg !17
  %108 = extractelement <2 x bfloat> %106, i64 1, !dbg !17
  %109 = fpext bfloat %107 to float, !dbg !23
  %110 = fpext bfloat %108 to float, !dbg !23
  %111 = fcmp olt float %81, %109, !dbg !24
  %112 = fcmp olt float %82, %110, !dbg !24
  %113 = or i1 %92, %111, !dbg !27
  %114 = or i1 %93, %112, !dbg !27
  %115 = fcmp ogt float %87, %109, !dbg !29
  %116 = fcmp ogt float %88, %110, !dbg !29
  %117 = or i1 %94, %115, !dbg !31
  %118 = or i1 %95, %116, !dbg !31
  %119 = extractelement <4 x i32> %101, i64 2, !dbg !16
  %120 = sext i32 %119 to i64, !dbg !16
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !16
  %122 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %121, i1 true) #4, !dbg !17
  %123 = bitcast i32 %122 to <2 x bfloat>, !dbg !17
  %124 = extractelement <4 x i32> %101, i64 1, !dbg !16
  %125 = sext i32 %124 to i64, !dbg !16
  %126 = getelementptr bfloat, ptr addrspace(1) %0, i64 %125, !dbg !16
  %127 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %126, i1 true) #4, !dbg !17
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !17
  %129 = extractelement <4 x i32> %101, i64 0, !dbg !16
  %130 = sext i32 %129 to i64, !dbg !16
  %131 = getelementptr bfloat, ptr addrspace(1) %0, i64 %130, !dbg !16
  %132 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %131, i1 true) #4, !dbg !17
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !17
  %134 = insertelement <2 x i1> poison, i1 %113, i64 0, !dbg !28
  %135 = insertelement <2 x i1> %134, i1 %114, i64 1, !dbg !28
  %136 = insertelement <2 x float> poison, float %81, i64 0, !dbg !28
  %137 = insertelement <2 x float> %136, float %82, i64 1, !dbg !28
  %138 = insertelement <2 x float> poison, float %109, i64 0, !dbg !28
  %139 = insertelement <2 x float> %138, float %110, i64 1, !dbg !28
  %140 = select <2 x i1> %135, <2 x float> %137, <2 x float> %139, !dbg !28
  %141 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !23
  %142 = fcmp olt <2 x float> %140, %141, !dbg !24
  %143 = fcmp uno <2 x float> %140, zeroinitializer, !dbg !26
  %144 = or <2 x i1> %143, %142, !dbg !27
  %145 = select <2 x i1> %144, <2 x float> %140, <2 x float> %141, !dbg !28
  %146 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !23
  %147 = fcmp olt <2 x float> %145, %146, !dbg !24
  %148 = fcmp uno <2 x float> %145, zeroinitializer, !dbg !26
  %149 = or <2 x i1> %148, %147, !dbg !27
  %150 = select <2 x i1> %149, <2 x float> %145, <2 x float> %146, !dbg !28
  %151 = fpext <2 x bfloat> %133 to <2 x float>, !dbg !23
  %152 = fcmp olt <2 x float> %150, %151, !dbg !24
  %153 = fcmp uno <2 x float> %150, zeroinitializer, !dbg !26
  %154 = or <2 x i1> %153, %152, !dbg !27
  %155 = select <2 x i1> %154, <2 x float> %150, <2 x float> %151, !dbg !28
  %156 = insertelement <2 x i1> poison, i1 %117, i64 0, !dbg !32
  %157 = insertelement <2 x i1> %156, i1 %118, i64 1, !dbg !32
  %158 = insertelement <2 x float> poison, float %87, i64 0, !dbg !32
  %159 = insertelement <2 x float> %158, float %88, i64 1, !dbg !32
  %160 = select <2 x i1> %157, <2 x float> %159, <2 x float> %139, !dbg !32
  %161 = fcmp uno <2 x float> %160, zeroinitializer, !dbg !33
  %162 = fcmp ogt <2 x float> %160, %141, !dbg !29
  %163 = or <2 x i1> %161, %162, !dbg !31
  %164 = select <2 x i1> %163, <2 x float> %160, <2 x float> %141, !dbg !32
  %165 = fcmp ogt <2 x float> %164, %146, !dbg !29
  %166 = fcmp uno <2 x float> %164, zeroinitializer, !dbg !33
  %167 = or <2 x i1> %166, %165, !dbg !31
  %168 = select <2 x i1> %167, <2 x float> %164, <2 x float> %146, !dbg !32
  %169 = fcmp ogt <2 x float> %168, %151, !dbg !29
  %170 = fcmp uno <2 x float> %168, zeroinitializer, !dbg !33
  %171 = or <2 x i1> %170, %169, !dbg !31
  %172 = select <2 x i1> %171, <2 x float> %168, <2 x float> %151, !dbg !32
  %173 = extractelement <4 x i64> %91, i64 0, !dbg !19
  %174 = extractelement <4 x i64> %91, i64 1, !dbg !19
  %175 = extractelement <4 x i64> %91, i64 2, !dbg !19
  %176 = extractelement <4 x i64> %91, i64 3, !dbg !19
  br label %.split5.us, !dbg !19

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi35 = phi i64 [ %53, %.split.preheader ], [ %173, %.split.us.preheader ], !dbg !34
  %.pre-phi30 = phi i64 [ %54, %.split.preheader ], [ %174, %.split.us.preheader ], !dbg !34
  %.pre-phi25 = phi i64 [ %55, %.split.preheader ], [ %175, %.split.us.preheader ], !dbg !34
  %.pre-phi20 = phi i64 [ %56, %.split.preheader ], [ %176, %.split.us.preheader ], !dbg !34
  %.pre-phi19 = phi i64 [ %25, %.split.preheader ], [ %67, %.split.us.preheader ], !dbg !35
  %.pre-phi15 = phi i64 [ %21, %.split.preheader ], [ %63, %.split.us.preheader ], !dbg !34
  %177 = phi <4 x i32> [ %36, %.split.preheader ], [ %101, %.split.us.preheader ], !dbg !35
  %178 = phi <2 x float> [ splat (float 0x7FF0000000000000), %.split.preheader ], [ %155, %.split.us.preheader ], !dbg !19
  %179 = phi <2 x float> [ splat (float 0xFFF0000000000000), %.split.preheader ], [ %172, %.split.us.preheader ], !dbg !19
  %180 = lshr i32 %10, 5, !dbg !11
  %181 = and i32 %10, 31, !dbg !11
  %182 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %178, <2 x i32> <i32 0, i32 2>, !dbg !36
  %183 = fcmp olt <2 x float> %182, %178, !dbg !36
  %184 = fcmp uno <2 x float> %182, %178, !dbg !36
  %shift = shufflevector <2 x i1> %183, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %185 = or <2 x i1> %shift, %184, !dbg !38
  %186 = extractelement <2 x i1> %185, i64 0, !dbg !38
  %187 = extractelement <2 x float> %178, i64 0, !dbg !39
  %188 = extractelement <2 x float> %178, i64 1, !dbg !39
  %189 = select i1 %186, float %187, float %188, !dbg !39
  %190 = bitcast float %189 to i32, !dbg !19
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 16, i32 31), !dbg !19
  %192 = bitcast i32 %191 to float, !dbg !19
  %193 = fcmp olt float %189, %192, !dbg !36
  %194 = fcmp uno float %189, 0.000000e+00, !dbg !40
  %195 = or i1 %194, %193, !dbg !38
  %196 = select i1 %195, float %189, float %192, !dbg !39
  %197 = bitcast float %196 to i32, !dbg !19
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 8, i32 31), !dbg !19
  %199 = bitcast i32 %198 to float, !dbg !19
  %200 = fcmp olt float %196, %199, !dbg !36
  %201 = fcmp uno float %196, 0.000000e+00, !dbg !40
  %202 = or i1 %200, %201, !dbg !38
  %203 = select i1 %202, float %196, float %199, !dbg !39
  %204 = bitcast float %203 to i32, !dbg !19
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !19
  %206 = bitcast i32 %205 to float, !dbg !19
  %207 = fcmp olt float %203, %206, !dbg !36
  %208 = fcmp uno float %203, 0.000000e+00, !dbg !40
  %209 = or i1 %207, %208, !dbg !38
  %210 = select i1 %209, float %203, float %206, !dbg !39
  %211 = bitcast float %210 to i32, !dbg !19
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !19
  %213 = bitcast i32 %212 to float, !dbg !19
  %214 = fcmp olt float %210, %213, !dbg !36
  %215 = fcmp uno float %210, 0.000000e+00, !dbg !40
  %216 = or i1 %214, %215, !dbg !38
  %217 = select i1 %216, float %210, float %213, !dbg !39
  %218 = bitcast float %217 to i32, !dbg !19
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !19
  %220 = bitcast i32 %219 to float, !dbg !19
  %221 = fcmp olt float %217, %220, !dbg !36
  %222 = fcmp uno float %217, 0.000000e+00, !dbg !40
  %223 = or i1 %221, %222, !dbg !38
  %224 = and i32 %180, 7, !dbg !19
  %225 = icmp eq i32 %181, 0, !dbg !19
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !19
  %227 = select i1 %223, i32 %218, i32 %219, !dbg !39
  %228 = insertelement <1 x i32> poison, i32 %227, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %228, i1 %225) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %229 = icmp slt i32 %10, 8, !dbg !19
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !19
  %231 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %229) #4, !dbg !19
  %232 = bitcast i32 %231 to float, !dbg !19
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !19
  %234 = bitcast i32 %233 to float, !dbg !19
  %235 = fcmp olt float %232, %234, !dbg !36
  %236 = fcmp uno float %232, 0.000000e+00, !dbg !40
  %237 = or i1 %236, %235, !dbg !38
  %238 = select i1 %237, float %232, float %234, !dbg !39
  %239 = bitcast float %238 to i32, !dbg !19
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !19
  %241 = bitcast i32 %240 to float, !dbg !19
  %242 = fcmp olt float %238, %241, !dbg !36
  %243 = fcmp uno float %238, 0.000000e+00, !dbg !40
  %244 = or i1 %242, %243, !dbg !38
  %245 = select i1 %244, float %238, float %241, !dbg !39
  %246 = bitcast float %245 to i32, !dbg !19
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !19
  %248 = bitcast i32 %247 to float, !dbg !19
  %249 = fcmp olt float %245, %248, !dbg !36
  %250 = fcmp uno float %245, 0.000000e+00, !dbg !40
  %251 = or i1 %249, %250, !dbg !38
  %252 = and i32 %10, 7, !dbg !19
  %253 = icmp eq i32 %252, 0, !dbg !19
  %254 = and i1 %229, %253, !dbg !19
  %255 = select i1 %251, i32 %246, i32 %247, !dbg !39
  %256 = insertelement <1 x i32> poison, i32 %255, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %256, i1 %254) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %257 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %258 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %179, <2 x i32> <i32 0, i32 2>, !dbg !43
  %259 = fcmp ogt <2 x float> %258, %179, !dbg !43
  %260 = fcmp uno <2 x float> %258, %179, !dbg !43
  %shift40 = shufflevector <2 x i1> %259, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %261 = or <2 x i1> %shift40, %260, !dbg !44
  %262 = extractelement <2 x i1> %261, i64 0, !dbg !44
  %263 = extractelement <2 x float> %179, i64 0, !dbg !45
  %264 = extractelement <2 x float> %179, i64 1, !dbg !45
  %265 = select i1 %262, float %263, float %264, !dbg !45
  %266 = bitcast float %265 to i32, !dbg !41
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 16, i32 31), !dbg !41
  %268 = bitcast i32 %267 to float, !dbg !41
  %269 = fcmp ogt float %265, %268, !dbg !43
  %270 = fcmp uno float %265, 0.000000e+00, !dbg !46
  %271 = or i1 %270, %269, !dbg !44
  %272 = select i1 %271, float %265, float %268, !dbg !45
  %273 = bitcast float %272 to i32, !dbg !41
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !41
  %275 = bitcast i32 %274 to float, !dbg !41
  %276 = fcmp ogt float %272, %275, !dbg !43
  %277 = fcmp uno float %272, 0.000000e+00, !dbg !46
  %278 = or i1 %276, %277, !dbg !44
  %279 = select i1 %278, float %272, float %275, !dbg !45
  %280 = bitcast float %279 to i32, !dbg !41
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !41
  %282 = bitcast i32 %281 to float, !dbg !41
  %283 = fcmp ogt float %279, %282, !dbg !43
  %284 = fcmp uno float %279, 0.000000e+00, !dbg !46
  %285 = or i1 %283, %284, !dbg !44
  %286 = select i1 %285, float %279, float %282, !dbg !45
  %287 = bitcast float %286 to i32, !dbg !41
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !41
  %289 = bitcast i32 %288 to float, !dbg !41
  %290 = fcmp ogt float %286, %289, !dbg !43
  %291 = fcmp uno float %286, 0.000000e+00, !dbg !46
  %292 = or i1 %290, %291, !dbg !44
  %293 = select i1 %292, float %286, float %289, !dbg !45
  %294 = bitcast float %293 to i32, !dbg !41
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !41
  %296 = bitcast i32 %295 to float, !dbg !41
  %297 = fcmp ogt float %293, %296, !dbg !43
  %298 = fcmp uno float %293, 0.000000e+00, !dbg !46
  %299 = or i1 %297, %298, !dbg !44
  %300 = select i1 %299, i32 %294, i32 %295, !dbg !45
  %301 = insertelement <1 x i32> poison, i32 %300, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %301, i1 %225) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %302 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %229) #4, !dbg !41
  %303 = bitcast i32 %302 to float, !dbg !41
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 4, i32 31), !dbg !41
  %305 = bitcast i32 %304 to float, !dbg !41
  %306 = fcmp ogt float %303, %305, !dbg !43
  %307 = fcmp uno float %303, 0.000000e+00, !dbg !46
  %308 = or i1 %307, %306, !dbg !44
  %309 = select i1 %308, float %303, float %305, !dbg !45
  %310 = bitcast float %309 to i32, !dbg !41
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !41
  %312 = bitcast i32 %311 to float, !dbg !41
  %313 = fcmp ogt float %309, %312, !dbg !43
  %314 = fcmp uno float %309, 0.000000e+00, !dbg !46
  %315 = or i1 %313, %314, !dbg !44
  %316 = select i1 %315, float %309, float %312, !dbg !45
  %317 = bitcast float %316 to i32, !dbg !41
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 1, i32 31), !dbg !41
  %319 = bitcast i32 %318 to float, !dbg !41
  %320 = fcmp ogt float %316, %319, !dbg !43
  %321 = fcmp uno float %316, 0.000000e+00, !dbg !46
  %322 = or i1 %320, %321, !dbg !44
  %323 = select i1 %322, i32 %317, i32 %318, !dbg !45
  %324 = insertelement <1 x i32> poison, i32 %323, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %324, i1 %254) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %325 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %326 = sext i32 %8 to i64, !dbg !47
  %327 = getelementptr bfloat, ptr addrspace(1) %1, i64 %326, !dbg !47
  %328 = fptrunc float %257 to bfloat, !dbg !48
  %329 = and i32 %10, 255, !dbg !48
  %330 = icmp eq i32 %329, 0, !dbg !48
  %331 = bitcast bfloat %328 to i16, !dbg !48
  %332 = and i1 %9, %330, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %331, ptr addrspace(1) %327, i1 %332) #4, !dbg !48
  %333 = getelementptr bfloat, ptr addrspace(1) %2, i64 %326, !dbg !49
  %334 = fptrunc float %325 to bfloat, !dbg !50
  %335 = bitcast bfloat %334 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %335, ptr addrspace(1) %333, i1 %332) #4, !dbg !50
  %.inv = fcmp oge float %257, 0.000000e+00, !dbg !51
  %336 = select i1 %.inv, float 0.000000e+00, float %257, !dbg !51
  %337 = fsub float 0.000000e+00, %336, !dbg !53
  %.inv2 = fcmp ole float %325, 0.000000e+00, !dbg !54
  %338 = select i1 %.inv2, float 0.000000e+00, float %325, !dbg !54
  %339 = fcmp ogt float %337, %338, !dbg !56
  %340 = fcmp uno float %337, 0.000000e+00, !dbg !58
  %341 = or i1 %340, %339, !dbg !59
  %342 = select i1 %341, float %337, float %338, !dbg !60
  %343 = fmul float %342, 0x3F80204080000000, !dbg !61
  %344 = fcmp ogt float %343, 0x3EE4F8B580000000, !dbg !62
  %345 = fcmp uno float %343, 0.000000e+00, !dbg !64
  %346 = or i1 %344, %345, !dbg !65
  %347 = select i1 %346, float %343, float 0x3EE4F8B580000000, !dbg !66
  %348 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %347), !dbg !67
  %349 = mul i32 %8, 3072, !dbg !68
  %350 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !35
  %351 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %350, i1 %9) #4, !dbg !69
  %352 = bitcast i32 %351 to <2 x bfloat>, !dbg !69
  %353 = extractelement <2 x bfloat> %352, i64 0, !dbg !69
  %354 = extractelement <2 x bfloat> %352, i64 1, !dbg !69
  %355 = fpext bfloat %353 to float, !dbg !70
  %356 = fpext bfloat %354 to float, !dbg !70
  %357 = fmul float %348, %355, !dbg !71
  %358 = fmul float %348, %356, !dbg !71
  %359 = tail call float @llvm.nvvm.round.f(float %357) #4, !dbg !72
  %360 = tail call float @llvm.nvvm.round.f(float %358) #4, !dbg !72
  %361 = insertelement <2 x float> poison, float %359, i64 0, !dbg !73
  %362 = insertelement <2 x float> %361, float %360, i64 1, !dbg !73
  %363 = fcmp ogt <2 x float> %362, splat (float -1.270000e+02), !dbg !73
  %364 = fcmp uno <2 x float> %362, zeroinitializer, !dbg !75
  %365 = or <2 x i1> %363, %364, !dbg !76
  %366 = select <2 x i1> %365, <2 x float> %362, <2 x float> splat (float -1.270000e+02), !dbg !77
  %367 = fcmp olt <2 x float> %366, splat (float 1.270000e+02), !dbg !78
  %368 = fcmp uno <2 x float> %366, zeroinitializer, !dbg !80
  %369 = or <2 x i1> %367, %368, !dbg !81
  %370 = fptosi <2 x float> %366 to <2 x i8>, !dbg !82
  %371 = select <2 x i1> %369, <2 x i8> %370, <2 x i8> splat (i8 127), !dbg !83
  %372 = or disjoint i32 %12, %349, !dbg !84
  %373 = sext i32 %372 to i64, !dbg !85
  %374 = getelementptr i8, ptr addrspace(1) %3, i64 %373, !dbg !85
  %375 = bitcast <2 x i8> %371 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %375, ptr addrspace(1) %374, i1 %9) #4, !dbg !86
  %376 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi19, !dbg !35
  %377 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %376, i1 %9) #4, !dbg !69
  %378 = bitcast i32 %377 to <2 x bfloat>, !dbg !69
  %379 = extractelement <2 x bfloat> %378, i64 0, !dbg !69
  %380 = extractelement <2 x bfloat> %378, i64 1, !dbg !69
  %381 = fpext bfloat %379 to float, !dbg !70
  %382 = fpext bfloat %380 to float, !dbg !70
  %383 = fmul float %348, %381, !dbg !71
  %384 = fmul float %348, %382, !dbg !71
  %385 = tail call float @llvm.nvvm.round.f(float %383) #4, !dbg !72
  %386 = tail call float @llvm.nvvm.round.f(float %384) #4, !dbg !72
  %387 = insertelement <2 x float> poison, float %385, i64 0, !dbg !73
  %388 = insertelement <2 x float> %387, float %386, i64 1, !dbg !73
  %389 = fcmp ogt <2 x float> %388, splat (float -1.270000e+02), !dbg !73
  %390 = fcmp uno <2 x float> %388, zeroinitializer, !dbg !75
  %391 = or <2 x i1> %389, %390, !dbg !76
  %392 = select <2 x i1> %391, <2 x float> %388, <2 x float> splat (float -1.270000e+02), !dbg !77
  %393 = fcmp olt <2 x float> %392, splat (float 1.270000e+02), !dbg !78
  %394 = fcmp uno <2 x float> %392, zeroinitializer, !dbg !80
  %395 = or <2 x i1> %393, %394, !dbg !81
  %396 = fptosi <2 x float> %392 to <2 x i8>, !dbg !82
  %397 = select <2 x i1> %395, <2 x i8> %396, <2 x i8> splat (i8 127), !dbg !83
  %398 = trunc nuw nsw i64 %.pre-phi15 to i32, !dbg !84
  %399 = add i32 %349, %398, !dbg !84
  %400 = sext i32 %399 to i64, !dbg !85
  %401 = getelementptr i8, ptr addrspace(1) %3, i64 %400, !dbg !85
  %402 = bitcast <2 x i8> %397 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %402, ptr addrspace(1) %401, i1 %9) #4, !dbg !86
  %403 = extractelement <4 x i32> %177, i64 3, !dbg !35
  %404 = sext i32 %403 to i64, !dbg !35
  %405 = getelementptr bfloat, ptr addrspace(1) %0, i64 %404, !dbg !35
  %406 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %405, i1 %9) #4, !dbg !69
  %407 = bitcast i32 %406 to <2 x bfloat>, !dbg !69
  %408 = extractelement <2 x bfloat> %407, i64 0, !dbg !69
  %409 = extractelement <2 x bfloat> %407, i64 1, !dbg !69
  %410 = fpext bfloat %408 to float, !dbg !70
  %411 = fpext bfloat %409 to float, !dbg !70
  %412 = fmul float %348, %410, !dbg !71
  %413 = fmul float %348, %411, !dbg !71
  %414 = tail call float @llvm.nvvm.round.f(float %412) #4, !dbg !72
  %415 = tail call float @llvm.nvvm.round.f(float %413) #4, !dbg !72
  %416 = insertelement <2 x float> poison, float %414, i64 0, !dbg !73
  %417 = insertelement <2 x float> %416, float %415, i64 1, !dbg !73
  %418 = fcmp ogt <2 x float> %417, splat (float -1.270000e+02), !dbg !73
  %419 = fcmp uno <2 x float> %417, zeroinitializer, !dbg !75
  %420 = or <2 x i1> %418, %419, !dbg !76
  %421 = select <2 x i1> %420, <2 x float> %417, <2 x float> splat (float -1.270000e+02), !dbg !77
  %422 = fcmp olt <2 x float> %421, splat (float 1.270000e+02), !dbg !78
  %423 = fcmp uno <2 x float> %421, zeroinitializer, !dbg !80
  %424 = or <2 x i1> %422, %423, !dbg !81
  %425 = fptosi <2 x float> %421 to <2 x i8>, !dbg !82
  %426 = select <2 x i1> %424, <2 x i8> %425, <2 x i8> splat (i8 127), !dbg !83
  %427 = trunc nuw nsw i64 %.pre-phi20 to i32, !dbg !84
  %428 = add i32 %349, %427, !dbg !84
  %429 = sext i32 %428 to i64, !dbg !85
  %430 = getelementptr i8, ptr addrspace(1) %3, i64 %429, !dbg !85
  %431 = bitcast <2 x i8> %426 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %431, ptr addrspace(1) %430, i1 %9) #4, !dbg !86
  %432 = extractelement <4 x i32> %177, i64 2, !dbg !35
  %433 = sext i32 %432 to i64, !dbg !35
  %434 = getelementptr bfloat, ptr addrspace(1) %0, i64 %433, !dbg !35
  %435 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %434, i1 %9) #4, !dbg !69
  %436 = bitcast i32 %435 to <2 x bfloat>, !dbg !69
  %437 = extractelement <2 x bfloat> %436, i64 0, !dbg !69
  %438 = extractelement <2 x bfloat> %436, i64 1, !dbg !69
  %439 = fpext bfloat %437 to float, !dbg !70
  %440 = fpext bfloat %438 to float, !dbg !70
  %441 = fmul float %348, %439, !dbg !71
  %442 = fmul float %348, %440, !dbg !71
  %443 = tail call float @llvm.nvvm.round.f(float %441) #4, !dbg !72
  %444 = tail call float @llvm.nvvm.round.f(float %442) #4, !dbg !72
  %445 = insertelement <2 x float> poison, float %443, i64 0, !dbg !73
  %446 = insertelement <2 x float> %445, float %444, i64 1, !dbg !73
  %447 = fcmp ogt <2 x float> %446, splat (float -1.270000e+02), !dbg !73
  %448 = fcmp uno <2 x float> %446, zeroinitializer, !dbg !75
  %449 = or <2 x i1> %447, %448, !dbg !76
  %450 = select <2 x i1> %449, <2 x float> %446, <2 x float> splat (float -1.270000e+02), !dbg !77
  %451 = fcmp olt <2 x float> %450, splat (float 1.270000e+02), !dbg !78
  %452 = fcmp uno <2 x float> %450, zeroinitializer, !dbg !80
  %453 = or <2 x i1> %451, %452, !dbg !81
  %454 = fptosi <2 x float> %450 to <2 x i8>, !dbg !82
  %455 = select <2 x i1> %453, <2 x i8> %454, <2 x i8> splat (i8 127), !dbg !83
  %456 = trunc nuw nsw i64 %.pre-phi25 to i32, !dbg !84
  %457 = add i32 %349, %456, !dbg !84
  %458 = sext i32 %457 to i64, !dbg !85
  %459 = getelementptr i8, ptr addrspace(1) %3, i64 %458, !dbg !85
  %460 = bitcast <2 x i8> %455 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %460, ptr addrspace(1) %459, i1 %9) #4, !dbg !86
  %461 = extractelement <4 x i32> %177, i64 1, !dbg !35
  %462 = sext i32 %461 to i64, !dbg !35
  %463 = getelementptr bfloat, ptr addrspace(1) %0, i64 %462, !dbg !35
  %464 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %463, i1 %9) #4, !dbg !69
  %465 = bitcast i32 %464 to <2 x bfloat>, !dbg !69
  %466 = extractelement <2 x bfloat> %465, i64 0, !dbg !69
  %467 = extractelement <2 x bfloat> %465, i64 1, !dbg !69
  %468 = fpext bfloat %466 to float, !dbg !70
  %469 = fpext bfloat %467 to float, !dbg !70
  %470 = fmul float %348, %468, !dbg !71
  %471 = fmul float %348, %469, !dbg !71
  %472 = tail call float @llvm.nvvm.round.f(float %470) #4, !dbg !72
  %473 = tail call float @llvm.nvvm.round.f(float %471) #4, !dbg !72
  %474 = insertelement <2 x float> poison, float %472, i64 0, !dbg !73
  %475 = insertelement <2 x float> %474, float %473, i64 1, !dbg !73
  %476 = fcmp ogt <2 x float> %475, splat (float -1.270000e+02), !dbg !73
  %477 = fcmp uno <2 x float> %475, zeroinitializer, !dbg !75
  %478 = or <2 x i1> %476, %477, !dbg !76
  %479 = select <2 x i1> %478, <2 x float> %475, <2 x float> splat (float -1.270000e+02), !dbg !77
  %480 = fcmp olt <2 x float> %479, splat (float 1.270000e+02), !dbg !78
  %481 = fcmp uno <2 x float> %479, zeroinitializer, !dbg !80
  %482 = or <2 x i1> %480, %481, !dbg !81
  %483 = fptosi <2 x float> %479 to <2 x i8>, !dbg !82
  %484 = select <2 x i1> %482, <2 x i8> %483, <2 x i8> splat (i8 127), !dbg !83
  %485 = trunc nuw nsw i64 %.pre-phi30 to i32, !dbg !84
  %486 = add i32 %349, %485, !dbg !84
  %487 = sext i32 %486 to i64, !dbg !85
  %488 = getelementptr i8, ptr addrspace(1) %3, i64 %487, !dbg !85
  %489 = bitcast <2 x i8> %484 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %489, ptr addrspace(1) %488, i1 %9) #4, !dbg !86
  %490 = extractelement <4 x i32> %177, i64 0, !dbg !35
  %491 = sext i32 %490 to i64, !dbg !35
  %492 = getelementptr bfloat, ptr addrspace(1) %0, i64 %491, !dbg !35
  %493 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %492, i1 %9) #4, !dbg !69
  %494 = bitcast i32 %493 to <2 x bfloat>, !dbg !69
  %495 = extractelement <2 x bfloat> %494, i64 0, !dbg !69
  %496 = extractelement <2 x bfloat> %494, i64 1, !dbg !69
  %497 = fpext bfloat %495 to float, !dbg !70
  %498 = fpext bfloat %496 to float, !dbg !70
  %499 = fmul float %348, %497, !dbg !71
  %500 = fmul float %348, %498, !dbg !71
  %501 = tail call float @llvm.nvvm.round.f(float %499) #4, !dbg !72
  %502 = tail call float @llvm.nvvm.round.f(float %500) #4, !dbg !72
  %503 = insertelement <2 x float> poison, float %501, i64 0, !dbg !73
  %504 = insertelement <2 x float> %503, float %502, i64 1, !dbg !73
  %505 = fcmp ogt <2 x float> %504, splat (float -1.270000e+02), !dbg !73
  %506 = fcmp uno <2 x float> %504, zeroinitializer, !dbg !75
  %507 = or <2 x i1> %505, %506, !dbg !76
  %508 = select <2 x i1> %507, <2 x float> %504, <2 x float> splat (float -1.270000e+02), !dbg !77
  %509 = fcmp olt <2 x float> %508, splat (float 1.270000e+02), !dbg !78
  %510 = fcmp uno <2 x float> %508, zeroinitializer, !dbg !80
  %511 = or <2 x i1> %509, %510, !dbg !81
  %512 = fptosi <2 x float> %508 to <2 x i8>, !dbg !82
  %513 = select <2 x i1> %511, <2 x i8> %512, <2 x i8> splat (i8 127), !dbg !83
  %514 = trunc nuw nsw i64 %.pre-phi35 to i32, !dbg !84
  %515 = add i32 %349, %514, !dbg !84
  %516 = sext i32 %515 to i64, !dbg !85
  %517 = getelementptr i8, ptr addrspace(1) %3, i64 %516, !dbg !85
  %518 = bitcast <2 x i8> %513 to i16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %518, ptr addrspace(1) %517, i1 %9) #4, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 32, column: 31, scope: !6)
!19 = !DILocation(line: 110, column: 29, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 43, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 144, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !25)
!25 = !DILocation(line: 39, column: 45, scope: !6)
!26 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !25)
!27 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !25)
!28 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !25)
!29 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !30)
!30 = !DILocation(line: 41, column: 45, scope: !6)
!31 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !30)
!32 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !30)
!33 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !30)
!34 = !DILocation(line: 48, column: 31, scope: !6)
!35 = !DILocation(line: 53, column: 34, scope: !6)
!36 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !22)
!37 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!38 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !22)
!39 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !22)
!40 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !22)
!41 = !DILocation(line: 115, column: 29, scope: !20, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !42)
!45 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !42)
!46 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !42)
!47 = !DILocation(line: 45, column: 25, scope: !6)
!48 = !DILocation(line: 45, column: 36, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 36, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 53, column: 83, scope: !6)
!70 = !DILocation(line: 53, column: 145, scope: !6)
!71 = !DILocation(line: 69, column: 23, scope: !6)
!72 = !DILocation(line: 70, column: 36, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !20, inlinedAt: !74)
!74 = !DILocation(line: 73, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !20, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !20, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !20, inlinedAt: !74)
!78 = !DILocation(line: 94, column: 15, scope: !20, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 46, scope: !6)
!80 = !DILocation(line: 96, column: 21, scope: !20, inlinedAt: !79)
!81 = !DILocation(line: 96, column: 16, scope: !20, inlinedAt: !79)
!82 = !DILocation(line: 77, column: 25, scope: !6)
!83 = !DILocation(line: 97, column: 29, scope: !20, inlinedAt: !79)
!84 = !DILocation(line: 78, column: 36, scope: !6)
!85 = !DILocation(line: 78, column: 29, scope: !6)
!86 = !DILocation(line: 78, column: 53, scope: !6)
!87 = !DILocation(line: 47, column: 4, scope: !6)
