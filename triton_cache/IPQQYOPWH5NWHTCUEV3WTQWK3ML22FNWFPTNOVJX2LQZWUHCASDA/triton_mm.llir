; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 48, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 48, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = lshr i32 %15, 4, !dbg !19
  %18 = and i32 %17, 7, !dbg !19
  %19 = or disjoint i32 %18, 8, !dbg !19
  %20 = or disjoint i32 %18, 16, !dbg !19
  %21 = or disjoint i32 %18, 24, !dbg !19
  %22 = or disjoint i32 %18, 32, !dbg !19
  %23 = or disjoint i32 %18, 40, !dbg !19
  %24 = or disjoint i32 %18, 48, !dbg !19
  %25 = or disjoint i32 %18, 56, !dbg !19
  %26 = or disjoint i32 %14, %18, !dbg !20
  %27 = or disjoint i32 %14, %19, !dbg !20
  %28 = or disjoint i32 %14, %20, !dbg !20
  %29 = or disjoint i32 %14, %21, !dbg !20
  %30 = or disjoint i32 %14, %22, !dbg !20
  %31 = or disjoint i32 %14, %23, !dbg !20
  %32 = or disjoint i32 %14, %24, !dbg !20
  %33 = or disjoint i32 %14, %25, !dbg !20
  %34 = shl nsw i32 %13, 7, !dbg !21
  %35 = shl i32 %15, 3, !dbg !22
  %36 = and i32 %35, 8, !dbg !22
  %37 = and i32 %35, 16, !dbg !22
  %38 = and i32 %35, 24, !dbg !22
  %39 = and i32 %35, 32, !dbg !22
  %40 = and i32 %35, 56, !dbg !22
  %41 = and i32 %15, 8, !dbg !22
  %42 = shl nuw nsw i32 %41, 3, !dbg !22
  %43 = or disjoint i32 %40, %42, !dbg !22
  %44 = or disjoint i32 %34, %18, !dbg !23
  %45 = or disjoint i32 %34, %19, !dbg !23
  %46 = or disjoint i32 %34, %20, !dbg !23
  %47 = or disjoint i32 %34, %21, !dbg !23
  %48 = or disjoint i32 %34, %22, !dbg !23
  %49 = or disjoint i32 %34, %23, !dbg !23
  %50 = or disjoint i32 %34, %24, !dbg !23
  %51 = or disjoint i32 %34, %25, !dbg !23
  %52 = or disjoint i32 %44, 64, !dbg !23
  %53 = or disjoint i32 %44, 72, !dbg !23
  %54 = or disjoint i32 %44, 80, !dbg !23
  %55 = or disjoint i32 %44, 88, !dbg !23
  %56 = or disjoint i32 %44, 96, !dbg !23
  %57 = or disjoint i32 %44, 104, !dbg !23
  %58 = or disjoint i32 %44, 112, !dbg !23
  %59 = or disjoint i32 %44, 120, !dbg !23
  %60 = srem i32 %26, 77, !dbg !24
  %61 = srem i32 %27, 77, !dbg !24
  %62 = srem i32 %28, 77, !dbg !24
  %63 = srem i32 %29, 77, !dbg !24
  %64 = srem i32 %30, 77, !dbg !24
  %65 = srem i32 %31, 77, !dbg !24
  %66 = srem i32 %32, 77, !dbg !24
  %67 = srem i32 %33, 77, !dbg !24
  %68 = srem i32 %44, 768, !dbg !25
  %69 = srem i32 %45, 768, !dbg !25
  %70 = srem i32 %46, 768, !dbg !25
  %71 = srem i32 %47, 768, !dbg !25
  %72 = srem i32 %48, 768, !dbg !25
  %73 = srem i32 %49, 768, !dbg !25
  %74 = srem i32 %50, 768, !dbg !25
  %75 = srem i32 %51, 768, !dbg !25
  %76 = srem i32 %52, 768, !dbg !25
  %77 = srem i32 %53, 768, !dbg !25
  %78 = srem i32 %54, 768, !dbg !25
  %79 = srem i32 %55, 768, !dbg !25
  %80 = srem i32 %56, 768, !dbg !25
  %81 = srem i32 %57, 768, !dbg !25
  %82 = srem i32 %58, 768, !dbg !25
  %83 = srem i32 %59, 768, !dbg !25
  %84 = mul nsw i32 %60, 768, !dbg !26
  %85 = mul nsw i32 %61, 768, !dbg !26
  %86 = mul nsw i32 %62, 768, !dbg !26
  %87 = mul nsw i32 %63, 768, !dbg !26
  %88 = mul nsw i32 %64, 768, !dbg !26
  %89 = mul nsw i32 %65, 768, !dbg !26
  %90 = mul nsw i32 %66, 768, !dbg !26
  %91 = mul nsw i32 %67, 768, !dbg !26
  %92 = mul nsw i32 %68, 768, !dbg !27
  %93 = mul nsw i32 %69, 768, !dbg !27
  %94 = mul nsw i32 %70, 768, !dbg !27
  %95 = mul nsw i32 %71, 768, !dbg !27
  %96 = mul nsw i32 %72, 768, !dbg !27
  %97 = mul nsw i32 %73, 768, !dbg !27
  %98 = mul nsw i32 %74, 768, !dbg !27
  %99 = mul nsw i32 %75, 768, !dbg !27
  %100 = mul nsw i32 %76, 768, !dbg !27
  %101 = mul nsw i32 %77, 768, !dbg !27
  %102 = mul nsw i32 %78, 768, !dbg !27
  %103 = mul nsw i32 %79, 768, !dbg !27
  %104 = mul nsw i32 %80, 768, !dbg !27
  %105 = mul nsw i32 %81, 768, !dbg !27
  %106 = mul nsw i32 %82, 768, !dbg !27
  %107 = mul nsw i32 %83, 768, !dbg !27
  %108 = or disjoint i32 %84, %43, !dbg !28
  %109 = or disjoint i32 %85, %43, !dbg !28
  %110 = or disjoint i32 %86, %43, !dbg !28
  %111 = or disjoint i32 %87, %43, !dbg !28
  %112 = or disjoint i32 %88, %43, !dbg !28
  %113 = or disjoint i32 %89, %43, !dbg !28
  %114 = or disjoint i32 %90, %43, !dbg !28
  %115 = or disjoint i32 %91, %43, !dbg !28
  %116 = sext i32 %108 to i64, !dbg !29
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !29
  %118 = sext i32 %109 to i64, !dbg !29
  %119 = getelementptr bfloat, ptr addrspace(1) %0, i64 %118, !dbg !29
  %120 = sext i32 %110 to i64, !dbg !29
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !29
  %122 = sext i32 %111 to i64, !dbg !29
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !29
  %124 = sext i32 %112 to i64, !dbg !29
  %125 = getelementptr bfloat, ptr addrspace(1) %0, i64 %124, !dbg !29
  %126 = sext i32 %113 to i64, !dbg !29
  %127 = getelementptr bfloat, ptr addrspace(1) %0, i64 %126, !dbg !29
  %128 = sext i32 %114 to i64, !dbg !29
  %129 = getelementptr bfloat, ptr addrspace(1) %0, i64 %128, !dbg !29
  %130 = sext i32 %115 to i64, !dbg !29
  %131 = getelementptr bfloat, ptr addrspace(1) %0, i64 %130, !dbg !29
  %132 = lshr exact i32 %16, 1, !dbg !30
  %133 = lshr i32 %15, 1, !dbg !30
  %134 = and i32 %133, 56, !dbg !30
  %135 = xor i32 %43, %134, !dbg !30
  %136 = shl nuw nsw i32 %18, 7, !dbg !30
  %137 = or disjoint i32 %135, %136, !dbg !30
  %138 = zext nneg i32 %137 to i64, !dbg !30
  %139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %138, !dbg !30
  %140 = or disjoint i32 %137, 1024, !dbg !30
  %141 = zext nneg i32 %140 to i64, !dbg !30
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %141, !dbg !30
  %143 = or disjoint i32 %137, 2048, !dbg !30
  %144 = zext nneg i32 %143 to i64, !dbg !30
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %144, !dbg !30
  %146 = or disjoint i32 %137, 3072, !dbg !30
  %147 = zext nneg i32 %146 to i64, !dbg !30
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %147, !dbg !30
  %149 = or disjoint i32 %137, 4096, !dbg !30
  %150 = zext nneg i32 %149 to i64, !dbg !30
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %150, !dbg !30
  %152 = or disjoint i32 %137, 5120, !dbg !30
  %153 = zext nneg i32 %152 to i64, !dbg !30
  %154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %153, !dbg !30
  %155 = or disjoint i32 %137, 6144, !dbg !30
  %156 = zext nneg i32 %155 to i64, !dbg !30
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %156, !dbg !30
  %158 = or disjoint i32 %137, 7168, !dbg !30
  %159 = zext nneg i32 %158 to i64, !dbg !30
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %159, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %139, ptr addrspace(1) %117, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %119, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %145, ptr addrspace(1) %121, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %123, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %151, ptr addrspace(1) %125, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %154, ptr addrspace(1) %127, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %129, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %160, ptr addrspace(1) %131, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %161 = or disjoint i32 %92, %43, !dbg !31
  %162 = or disjoint i32 %93, %43, !dbg !31
  %163 = or disjoint i32 %94, %43, !dbg !31
  %164 = or disjoint i32 %95, %43, !dbg !31
  %165 = or disjoint i32 %96, %43, !dbg !31
  %166 = or disjoint i32 %97, %43, !dbg !31
  %167 = or disjoint i32 %98, %43, !dbg !31
  %168 = or disjoint i32 %99, %43, !dbg !31
  %169 = or disjoint i32 %100, %43, !dbg !31
  %170 = or disjoint i32 %101, %43, !dbg !31
  %171 = or disjoint i32 %102, %43, !dbg !31
  %172 = or disjoint i32 %103, %43, !dbg !31
  %173 = or disjoint i32 %104, %43, !dbg !31
  %174 = or disjoint i32 %105, %43, !dbg !31
  %175 = or disjoint i32 %106, %43, !dbg !31
  %176 = or disjoint i32 %107, %43, !dbg !31
  %177 = sext i32 %161 to i64, !dbg !32
  %178 = getelementptr bfloat, ptr addrspace(1) %1, i64 %177, !dbg !32
  %179 = sext i32 %162 to i64, !dbg !32
  %180 = getelementptr bfloat, ptr addrspace(1) %1, i64 %179, !dbg !32
  %181 = sext i32 %163 to i64, !dbg !32
  %182 = getelementptr bfloat, ptr addrspace(1) %1, i64 %181, !dbg !32
  %183 = sext i32 %164 to i64, !dbg !32
  %184 = getelementptr bfloat, ptr addrspace(1) %1, i64 %183, !dbg !32
  %185 = sext i32 %165 to i64, !dbg !32
  %186 = getelementptr bfloat, ptr addrspace(1) %1, i64 %185, !dbg !32
  %187 = sext i32 %166 to i64, !dbg !32
  %188 = getelementptr bfloat, ptr addrspace(1) %1, i64 %187, !dbg !32
  %189 = sext i32 %167 to i64, !dbg !32
  %190 = getelementptr bfloat, ptr addrspace(1) %1, i64 %189, !dbg !32
  %191 = sext i32 %168 to i64, !dbg !32
  %192 = getelementptr bfloat, ptr addrspace(1) %1, i64 %191, !dbg !32
  %193 = sext i32 %169 to i64, !dbg !32
  %194 = getelementptr bfloat, ptr addrspace(1) %1, i64 %193, !dbg !32
  %195 = sext i32 %170 to i64, !dbg !32
  %196 = getelementptr bfloat, ptr addrspace(1) %1, i64 %195, !dbg !32
  %197 = sext i32 %171 to i64, !dbg !32
  %198 = getelementptr bfloat, ptr addrspace(1) %1, i64 %197, !dbg !32
  %199 = sext i32 %172 to i64, !dbg !32
  %200 = getelementptr bfloat, ptr addrspace(1) %1, i64 %199, !dbg !32
  %201 = sext i32 %173 to i64, !dbg !32
  %202 = getelementptr bfloat, ptr addrspace(1) %1, i64 %201, !dbg !32
  %203 = sext i32 %174 to i64, !dbg !32
  %204 = getelementptr bfloat, ptr addrspace(1) %1, i64 %203, !dbg !32
  %205 = sext i32 %175 to i64, !dbg !32
  %206 = getelementptr bfloat, ptr addrspace(1) %1, i64 %205, !dbg !32
  %207 = sext i32 %176 to i64, !dbg !32
  %208 = getelementptr bfloat, ptr addrspace(1) %1, i64 %207, !dbg !32
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %138, !dbg !33
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %141, !dbg !33
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %144, !dbg !33
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %147, !dbg !33
  %213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %150, !dbg !33
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %153, !dbg !33
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %156, !dbg !33
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %159, !dbg !33
  %217 = or disjoint i32 %137, 8192, !dbg !33
  %218 = zext nneg i32 %217 to i64, !dbg !33
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %218, !dbg !33
  %220 = or disjoint i32 %137, 9216, !dbg !33
  %221 = zext nneg i32 %220 to i64, !dbg !33
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %221, !dbg !33
  %223 = or disjoint i32 %137, 10240, !dbg !33
  %224 = zext nneg i32 %223 to i64, !dbg !33
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %224, !dbg !33
  %226 = or disjoint i32 %137, 11264, !dbg !33
  %227 = zext nneg i32 %226 to i64, !dbg !33
  %228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %227, !dbg !33
  %229 = or disjoint i32 %137, 12288, !dbg !33
  %230 = zext nneg i32 %229 to i64, !dbg !33
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %230, !dbg !33
  %232 = or disjoint i32 %137, 13312, !dbg !33
  %233 = zext nneg i32 %232 to i64, !dbg !33
  %234 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %233, !dbg !33
  %235 = or disjoint i32 %137, 14336, !dbg !33
  %236 = zext nneg i32 %235 to i64, !dbg !33
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %236, !dbg !33
  %238 = or disjoint i32 %137, 15360, !dbg !33
  %239 = zext nneg i32 %238 to i64, !dbg !33
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %239, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %209, ptr addrspace(1) %178, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %180, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %211, ptr addrspace(1) %182, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %212, ptr addrspace(1) %184, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %213, ptr addrspace(1) %186, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %188, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %215, ptr addrspace(1) %190, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %216, ptr addrspace(1) %192, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %219, ptr addrspace(1) %194, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %222, ptr addrspace(1) %196, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %225, ptr addrspace(1) %198, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %228, ptr addrspace(1) %200, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %231, ptr addrspace(1) %202, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %234, ptr addrspace(1) %204, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %237, ptr addrspace(1) %206, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %240, ptr addrspace(1) %208, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %241 = or disjoint i32 %43, 128, !dbg !34
  %242 = or disjoint i32 %84, %241, !dbg !28
  %243 = or disjoint i32 %85, %241, !dbg !28
  %244 = or disjoint i32 %86, %241, !dbg !28
  %245 = or disjoint i32 %87, %241, !dbg !28
  %246 = or disjoint i32 %88, %241, !dbg !28
  %247 = or disjoint i32 %89, %241, !dbg !28
  %248 = or disjoint i32 %90, %241, !dbg !28
  %249 = or disjoint i32 %91, %241, !dbg !28
  %250 = sext i32 %242 to i64, !dbg !29
  %251 = getelementptr bfloat, ptr addrspace(1) %0, i64 %250, !dbg !29
  %252 = sext i32 %243 to i64, !dbg !29
  %253 = getelementptr bfloat, ptr addrspace(1) %0, i64 %252, !dbg !29
  %254 = sext i32 %244 to i64, !dbg !29
  %255 = getelementptr bfloat, ptr addrspace(1) %0, i64 %254, !dbg !29
  %256 = sext i32 %245 to i64, !dbg !29
  %257 = getelementptr bfloat, ptr addrspace(1) %0, i64 %256, !dbg !29
  %258 = sext i32 %246 to i64, !dbg !29
  %259 = getelementptr bfloat, ptr addrspace(1) %0, i64 %258, !dbg !29
  %260 = sext i32 %247 to i64, !dbg !29
  %261 = getelementptr bfloat, ptr addrspace(1) %0, i64 %260, !dbg !29
  %262 = sext i32 %248 to i64, !dbg !29
  %263 = getelementptr bfloat, ptr addrspace(1) %0, i64 %262, !dbg !29
  %264 = sext i32 %249 to i64, !dbg !29
  %265 = getelementptr bfloat, ptr addrspace(1) %0, i64 %264, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %266 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %138, !dbg !30
  %267 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %141, !dbg !30
  %268 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %144, !dbg !30
  %269 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %147, !dbg !30
  %270 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %150, !dbg !30
  %271 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %153, !dbg !30
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %156, !dbg !30
  %273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 114688), i64 %159, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %266, ptr addrspace(1) %251, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %267, ptr addrspace(1) %253, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %268, ptr addrspace(1) %255, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %269, ptr addrspace(1) %257, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %270, ptr addrspace(1) %259, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %271, ptr addrspace(1) %261, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %272, ptr addrspace(1) %263, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %273, ptr addrspace(1) %265, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %274 = or disjoint i32 %92, %241, !dbg !31
  %275 = or disjoint i32 %93, %241, !dbg !31
  %276 = or disjoint i32 %94, %241, !dbg !31
  %277 = or disjoint i32 %95, %241, !dbg !31
  %278 = or disjoint i32 %96, %241, !dbg !31
  %279 = or disjoint i32 %97, %241, !dbg !31
  %280 = or disjoint i32 %98, %241, !dbg !31
  %281 = or disjoint i32 %99, %241, !dbg !31
  %282 = or disjoint i32 %100, %241, !dbg !31
  %283 = or disjoint i32 %101, %241, !dbg !31
  %284 = or disjoint i32 %102, %241, !dbg !31
  %285 = or disjoint i32 %103, %241, !dbg !31
  %286 = or disjoint i32 %104, %241, !dbg !31
  %287 = or disjoint i32 %105, %241, !dbg !31
  %288 = or disjoint i32 %106, %241, !dbg !31
  %289 = or disjoint i32 %107, %241, !dbg !31
  %290 = sext i32 %274 to i64, !dbg !32
  %291 = getelementptr bfloat, ptr addrspace(1) %1, i64 %290, !dbg !32
  %292 = sext i32 %275 to i64, !dbg !32
  %293 = getelementptr bfloat, ptr addrspace(1) %1, i64 %292, !dbg !32
  %294 = sext i32 %276 to i64, !dbg !32
  %295 = getelementptr bfloat, ptr addrspace(1) %1, i64 %294, !dbg !32
  %296 = sext i32 %277 to i64, !dbg !32
  %297 = getelementptr bfloat, ptr addrspace(1) %1, i64 %296, !dbg !32
  %298 = sext i32 %278 to i64, !dbg !32
  %299 = getelementptr bfloat, ptr addrspace(1) %1, i64 %298, !dbg !32
  %300 = sext i32 %279 to i64, !dbg !32
  %301 = getelementptr bfloat, ptr addrspace(1) %1, i64 %300, !dbg !32
  %302 = sext i32 %280 to i64, !dbg !32
  %303 = getelementptr bfloat, ptr addrspace(1) %1, i64 %302, !dbg !32
  %304 = sext i32 %281 to i64, !dbg !32
  %305 = getelementptr bfloat, ptr addrspace(1) %1, i64 %304, !dbg !32
  %306 = sext i32 %282 to i64, !dbg !32
  %307 = getelementptr bfloat, ptr addrspace(1) %1, i64 %306, !dbg !32
  %308 = sext i32 %283 to i64, !dbg !32
  %309 = getelementptr bfloat, ptr addrspace(1) %1, i64 %308, !dbg !32
  %310 = sext i32 %284 to i64, !dbg !32
  %311 = getelementptr bfloat, ptr addrspace(1) %1, i64 %310, !dbg !32
  %312 = sext i32 %285 to i64, !dbg !32
  %313 = getelementptr bfloat, ptr addrspace(1) %1, i64 %312, !dbg !32
  %314 = sext i32 %286 to i64, !dbg !32
  %315 = getelementptr bfloat, ptr addrspace(1) %1, i64 %314, !dbg !32
  %316 = sext i32 %287 to i64, !dbg !32
  %317 = getelementptr bfloat, ptr addrspace(1) %1, i64 %316, !dbg !32
  %318 = sext i32 %288 to i64, !dbg !32
  %319 = getelementptr bfloat, ptr addrspace(1) %1, i64 %318, !dbg !32
  %320 = sext i32 %289 to i64, !dbg !32
  %321 = getelementptr bfloat, ptr addrspace(1) %1, i64 %320, !dbg !32
  %322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %138, !dbg !33
  %323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %141, !dbg !33
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %144, !dbg !33
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %147, !dbg !33
  %326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %150, !dbg !33
  %327 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %153, !dbg !33
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %156, !dbg !33
  %329 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %159, !dbg !33
  %330 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %218, !dbg !33
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %221, !dbg !33
  %332 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %224, !dbg !33
  %333 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %227, !dbg !33
  %334 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %230, !dbg !33
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %233, !dbg !33
  %336 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %236, !dbg !33
  %337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %239, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %322, ptr addrspace(1) %291, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %323, ptr addrspace(1) %293, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %324, ptr addrspace(1) %295, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %325, ptr addrspace(1) %297, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %326, ptr addrspace(1) %299, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %327, ptr addrspace(1) %301, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %328, ptr addrspace(1) %303, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %329, ptr addrspace(1) %305, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %330, ptr addrspace(1) %307, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %331, ptr addrspace(1) %309, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %332, ptr addrspace(1) %311, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %333, ptr addrspace(1) %313, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %334, ptr addrspace(1) %315, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %335, ptr addrspace(1) %317, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %336, ptr addrspace(1) %319, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %337, ptr addrspace(1) %321, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %338 = or disjoint i32 %43, 256, !dbg !34
  %339 = add nsw i32 %84, %338, !dbg !28
  %340 = add nsw i32 %85, %338, !dbg !28
  %341 = add nsw i32 %86, %338, !dbg !28
  %342 = add nsw i32 %87, %338, !dbg !28
  %343 = add nsw i32 %88, %338, !dbg !28
  %344 = add nsw i32 %89, %338, !dbg !28
  %345 = add nsw i32 %90, %338, !dbg !28
  %346 = add nsw i32 %91, %338, !dbg !28
  %347 = sext i32 %339 to i64, !dbg !29
  %348 = getelementptr bfloat, ptr addrspace(1) %0, i64 %347, !dbg !29
  %349 = sext i32 %340 to i64, !dbg !29
  %350 = getelementptr bfloat, ptr addrspace(1) %0, i64 %349, !dbg !29
  %351 = sext i32 %341 to i64, !dbg !29
  %352 = getelementptr bfloat, ptr addrspace(1) %0, i64 %351, !dbg !29
  %353 = sext i32 %342 to i64, !dbg !29
  %354 = getelementptr bfloat, ptr addrspace(1) %0, i64 %353, !dbg !29
  %355 = sext i32 %343 to i64, !dbg !29
  %356 = getelementptr bfloat, ptr addrspace(1) %0, i64 %355, !dbg !29
  %357 = sext i32 %344 to i64, !dbg !29
  %358 = getelementptr bfloat, ptr addrspace(1) %0, i64 %357, !dbg !29
  %359 = sext i32 %345 to i64, !dbg !29
  %360 = getelementptr bfloat, ptr addrspace(1) %0, i64 %359, !dbg !29
  %361 = sext i32 %346 to i64, !dbg !29
  %362 = getelementptr bfloat, ptr addrspace(1) %0, i64 %361, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %363 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %138, !dbg !30
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %141, !dbg !30
  %365 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %144, !dbg !30
  %366 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %147, !dbg !30
  %367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %150, !dbg !30
  %368 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %153, !dbg !30
  %369 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %156, !dbg !30
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 131072), i64 %159, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %363, ptr addrspace(1) %348, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %364, ptr addrspace(1) %350, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %365, ptr addrspace(1) %352, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %366, ptr addrspace(1) %354, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %367, ptr addrspace(1) %356, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %368, ptr addrspace(1) %358, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %369, ptr addrspace(1) %360, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %370, ptr addrspace(1) %362, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %371 = add nsw i32 %92, %338, !dbg !31
  %372 = add nsw i32 %93, %338, !dbg !31
  %373 = add nsw i32 %94, %338, !dbg !31
  %374 = add nsw i32 %95, %338, !dbg !31
  %375 = add nsw i32 %96, %338, !dbg !31
  %376 = add nsw i32 %97, %338, !dbg !31
  %377 = add nsw i32 %98, %338, !dbg !31
  %378 = add nsw i32 %99, %338, !dbg !31
  %379 = add nsw i32 %100, %338, !dbg !31
  %380 = add nsw i32 %101, %338, !dbg !31
  %381 = add nsw i32 %102, %338, !dbg !31
  %382 = add nsw i32 %103, %338, !dbg !31
  %383 = add nsw i32 %104, %338, !dbg !31
  %384 = add nsw i32 %105, %338, !dbg !31
  %385 = add nsw i32 %106, %338, !dbg !31
  %386 = add nsw i32 %107, %338, !dbg !31
  %387 = sext i32 %371 to i64, !dbg !32
  %388 = getelementptr bfloat, ptr addrspace(1) %1, i64 %387, !dbg !32
  %389 = sext i32 %372 to i64, !dbg !32
  %390 = getelementptr bfloat, ptr addrspace(1) %1, i64 %389, !dbg !32
  %391 = sext i32 %373 to i64, !dbg !32
  %392 = getelementptr bfloat, ptr addrspace(1) %1, i64 %391, !dbg !32
  %393 = sext i32 %374 to i64, !dbg !32
  %394 = getelementptr bfloat, ptr addrspace(1) %1, i64 %393, !dbg !32
  %395 = sext i32 %375 to i64, !dbg !32
  %396 = getelementptr bfloat, ptr addrspace(1) %1, i64 %395, !dbg !32
  %397 = sext i32 %376 to i64, !dbg !32
  %398 = getelementptr bfloat, ptr addrspace(1) %1, i64 %397, !dbg !32
  %399 = sext i32 %377 to i64, !dbg !32
  %400 = getelementptr bfloat, ptr addrspace(1) %1, i64 %399, !dbg !32
  %401 = sext i32 %378 to i64, !dbg !32
  %402 = getelementptr bfloat, ptr addrspace(1) %1, i64 %401, !dbg !32
  %403 = sext i32 %379 to i64, !dbg !32
  %404 = getelementptr bfloat, ptr addrspace(1) %1, i64 %403, !dbg !32
  %405 = sext i32 %380 to i64, !dbg !32
  %406 = getelementptr bfloat, ptr addrspace(1) %1, i64 %405, !dbg !32
  %407 = sext i32 %381 to i64, !dbg !32
  %408 = getelementptr bfloat, ptr addrspace(1) %1, i64 %407, !dbg !32
  %409 = sext i32 %382 to i64, !dbg !32
  %410 = getelementptr bfloat, ptr addrspace(1) %1, i64 %409, !dbg !32
  %411 = sext i32 %383 to i64, !dbg !32
  %412 = getelementptr bfloat, ptr addrspace(1) %1, i64 %411, !dbg !32
  %413 = sext i32 %384 to i64, !dbg !32
  %414 = getelementptr bfloat, ptr addrspace(1) %1, i64 %413, !dbg !32
  %415 = sext i32 %385 to i64, !dbg !32
  %416 = getelementptr bfloat, ptr addrspace(1) %1, i64 %415, !dbg !32
  %417 = sext i32 %386 to i64, !dbg !32
  %418 = getelementptr bfloat, ptr addrspace(1) %1, i64 %417, !dbg !32
  %419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %138, !dbg !33
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %141, !dbg !33
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %144, !dbg !33
  %422 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %147, !dbg !33
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %150, !dbg !33
  %424 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %153, !dbg !33
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %156, !dbg !33
  %426 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %159, !dbg !33
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %218, !dbg !33
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %221, !dbg !33
  %429 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %224, !dbg !33
  %430 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %227, !dbg !33
  %431 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %230, !dbg !33
  %432 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %233, !dbg !33
  %433 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %236, !dbg !33
  %434 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %239, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %419, ptr addrspace(1) %388, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %420, ptr addrspace(1) %390, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %421, ptr addrspace(1) %392, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %422, ptr addrspace(1) %394, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %423, ptr addrspace(1) %396, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %424, ptr addrspace(1) %398, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %425, ptr addrspace(1) %400, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %426, ptr addrspace(1) %402, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %427, ptr addrspace(1) %404, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %428, ptr addrspace(1) %406, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %429, ptr addrspace(1) %408, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %430, ptr addrspace(1) %410, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %431, ptr addrspace(1) %412, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %432, ptr addrspace(1) %414, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %433, ptr addrspace(1) %416, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %434, ptr addrspace(1) %418, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %39, %132, !dbg !35
  %invariant.op165 = or disjoint i32 %41, 32, !dbg !35
  %invariant.op167 = or disjoint i32 %43, 384, !dbg !35
  %435 = and i32 %15, 7
  %436 = xor i32 %40, %132
  %437 = shl i32 %15, 7
  %438 = and i32 %437, 1920
  %439 = or disjoint i32 %436, %438
  %440 = zext nneg i32 %439 to i64
  %441 = or disjoint i32 %36, 16
  %442 = xor i32 %441, %37
  %443 = or disjoint i32 %442, %39
  %444 = xor i32 %443, %132
  %445 = or disjoint i32 %444, %438
  %446 = zext nneg i32 %445 to i64
  %447 = or disjoint i32 %38, 32
  %.reass = xor i32 %447, %invariant.op
  %448 = or disjoint i32 %.reass, %438
  %449 = zext nneg i32 %448 to i64
  %450 = or disjoint i32 %36, 48
  %and.ra = and i32 %35, 48
  %451 = or disjoint i32 %132, %and.ra
  %452 = xor i32 %451, %450
  %453 = or disjoint i32 %452, %438
  %454 = zext nneg i32 %453 to i64
  %455 = or disjoint i32 %40, 64
  %456 = xor i32 %455, %132
  %457 = or disjoint i32 %456, %438
  %458 = zext nneg i32 %457 to i64
  %459 = or disjoint i32 %36, 80
  %460 = xor i32 %459, %37
  %461 = or disjoint i32 %460, %39
  %462 = xor i32 %461, %132
  %463 = or disjoint i32 %462, %438
  %464 = zext nneg i32 %463 to i64
  %465 = or disjoint i32 %38, 96
  %.reass164 = xor i32 %465, %invariant.op
  %466 = or disjoint i32 %.reass164, %438
  %467 = zext nneg i32 %466 to i64
  %468 = or disjoint i32 %36, 112
  %469 = xor i32 %451, %468
  %470 = or disjoint i32 %469, %438
  %471 = zext nneg i32 %470 to i64
  %472 = or disjoint i32 %438, 2048
  %473 = or disjoint i32 %436, %472
  %474 = zext nneg i32 %473 to i64
  %475 = or disjoint i32 %444, %472
  %476 = zext nneg i32 %475 to i64
  %477 = or disjoint i32 %.reass, %472
  %478 = zext nneg i32 %477 to i64
  %479 = or disjoint i32 %452, %472
  %480 = zext nneg i32 %479 to i64
  %481 = or disjoint i32 %456, %472
  %482 = zext nneg i32 %481 to i64
  %483 = or disjoint i32 %462, %472
  %484 = zext nneg i32 %483 to i64
  %485 = or disjoint i32 %.reass164, %472
  %486 = zext nneg i32 %485 to i64
  %487 = or disjoint i32 %469, %472
  %488 = zext nneg i32 %487 to i64
  %489 = or disjoint i32 %435, 32
  %.reass166 = or disjoint i32 %435, %invariant.op165
  %490 = shl nuw nsw i32 %.reass166, 7
  %491 = or disjoint i32 %490, %436
  %492 = zext nneg i32 %491 to i64
  %493 = or disjoint i32 %444, %490
  %494 = zext nneg i32 %493 to i64
  %495 = or disjoint i32 %.reass, %490
  %496 = zext nneg i32 %495 to i64
  %497 = or disjoint i32 %452, %490
  %498 = zext nneg i32 %497 to i64
  %499 = or disjoint i32 %456, %490
  %500 = zext nneg i32 %499 to i64
  %501 = or disjoint i32 %462, %490
  %502 = zext nneg i32 %501 to i64
  %503 = or disjoint i32 %.reass164, %490
  %504 = zext nneg i32 %503 to i64
  %505 = or disjoint i32 %469, %490
  %506 = zext nneg i32 %505 to i64
  %507 = or disjoint i32 %438, 6144
  %508 = or disjoint i32 %436, %507
  %509 = zext nneg i32 %508 to i64
  %510 = or disjoint i32 %444, %507
  %511 = zext nneg i32 %510 to i64
  %512 = or disjoint i32 %.reass, %507
  %513 = zext nneg i32 %512 to i64
  %514 = or disjoint i32 %452, %507
  %515 = zext nneg i32 %514 to i64
  %516 = or disjoint i32 %456, %507
  %517 = zext nneg i32 %516 to i64
  %518 = or disjoint i32 %462, %507
  %519 = zext nneg i32 %518 to i64
  %520 = or disjoint i32 %.reass164, %507
  %521 = zext nneg i32 %520 to i64
  %522 = or disjoint i32 %469, %507
  %523 = zext nneg i32 %522 to i64
  %and.ra159 = and i32 %15, 24
  %524 = xor i32 %40, %and.ra159
  %525 = lshr i32 %15, 2
  %526 = and i32 %525, 24
  %527 = or disjoint i32 %526, %435
  %528 = shl nuw nsw i32 %527, 7
  %529 = or disjoint i32 %528, %524
  %530 = zext nneg i32 %529 to i64
  %531 = or disjoint i32 %39, %and.ra159
  %532 = xor i32 %531, %447
  %533 = or disjoint i32 %532, %528
  %534 = zext nneg i32 %533 to i64
  %535 = xor i32 %455, %and.ra159
  %536 = or disjoint i32 %528, %535
  %537 = zext nneg i32 %536 to i64
  %538 = xor i32 %531, %465
  %539 = or disjoint i32 %538, %528
  %540 = zext nneg i32 %539 to i64
  %541 = and i32 %525, 24
  %542 = or disjoint i32 %541, %489
  %543 = shl nuw nsw i32 %542, 7
  %544 = or disjoint i32 %543, %524
  %545 = zext nneg i32 %544 to i64
  %546 = or disjoint i32 %532, %543
  %547 = zext nneg i32 %546 to i64
  %548 = or disjoint i32 %543, %535
  %549 = zext nneg i32 %548 to i64
  %550 = or disjoint i32 %538, %543
  %551 = zext nneg i32 %550 to i64
  %552 = or disjoint i32 %528, 8192
  %553 = or disjoint i32 %552, %524
  %554 = zext nneg i32 %553 to i64
  %555 = or disjoint i32 %552, %532
  %556 = zext nneg i32 %555 to i64
  %557 = or disjoint i32 %552, %535
  %558 = zext nneg i32 %557 to i64
  %559 = or disjoint i32 %552, %538
  %560 = zext nneg i32 %559 to i64
  %561 = or disjoint i32 %528, 12288
  %562 = or disjoint i32 %561, %524
  %563 = zext nneg i32 %562 to i64
  %564 = or disjoint i32 %561, %532
  %565 = zext nneg i32 %564 to i64
  %566 = or disjoint i32 %561, %535
  %567 = zext nneg i32 %566 to i64
  %568 = or disjoint i32 %561, %538
  %569 = zext nneg i32 %568 to i64
  %570 = zext nneg i32 %invariant.op167 to i64, !dbg !35
  %571 = sext i32 %107 to i64, !dbg !35
  %572 = sext i32 %106 to i64, !dbg !35
  %573 = sext i32 %105 to i64, !dbg !35
  %574 = sext i32 %104 to i64, !dbg !35
  %575 = sext i32 %103 to i64, !dbg !35
  %576 = sext i32 %102 to i64, !dbg !35
  %577 = sext i32 %101 to i64, !dbg !35
  %578 = sext i32 %100 to i64, !dbg !35
  %579 = sext i32 %99 to i64, !dbg !35
  %580 = sext i32 %98 to i64, !dbg !35
  %581 = sext i32 %97 to i64, !dbg !35
  %582 = sext i32 %96 to i64, !dbg !35
  %583 = sext i32 %95 to i64, !dbg !35
  %584 = sext i32 %94 to i64, !dbg !35
  %585 = sext i32 %93 to i64, !dbg !35
  %586 = sext i32 %92 to i64, !dbg !35
  %587 = sext i32 %91 to i64, !dbg !35
  %588 = sext i32 %90 to i64, !dbg !35
  %589 = sext i32 %89 to i64, !dbg !35
  %590 = sext i32 %88 to i64, !dbg !35
  %591 = sext i32 %87 to i64, !dbg !35
  %592 = sext i32 %86 to i64, !dbg !35
  %593 = sext i32 %85 to i64, !dbg !35
  %594 = sext i32 %84 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %594, !dbg !35
  %invariant.gep296 = getelementptr bfloat, ptr addrspace(1) %0, i64 %593, !dbg !35
  %invariant.gep298 = getelementptr bfloat, ptr addrspace(1) %0, i64 %592, !dbg !35
  %invariant.gep300 = getelementptr bfloat, ptr addrspace(1) %0, i64 %591, !dbg !35
  %invariant.gep302 = getelementptr bfloat, ptr addrspace(1) %0, i64 %590, !dbg !35
  %invariant.gep304 = getelementptr bfloat, ptr addrspace(1) %0, i64 %589, !dbg !35
  %invariant.gep306 = getelementptr bfloat, ptr addrspace(1) %0, i64 %588, !dbg !35
  %invariant.gep308 = getelementptr bfloat, ptr addrspace(1) %0, i64 %587, !dbg !35
  %invariant.gep310 = getelementptr bfloat, ptr addrspace(1) %1, i64 %586, !dbg !35
  %invariant.gep312 = getelementptr bfloat, ptr addrspace(1) %1, i64 %585, !dbg !35
  %invariant.gep314 = getelementptr bfloat, ptr addrspace(1) %1, i64 %584, !dbg !35
  %invariant.gep316 = getelementptr bfloat, ptr addrspace(1) %1, i64 %583, !dbg !35
  %invariant.gep318 = getelementptr bfloat, ptr addrspace(1) %1, i64 %582, !dbg !35
  %invariant.gep320 = getelementptr bfloat, ptr addrspace(1) %1, i64 %581, !dbg !35
  %invariant.gep322 = getelementptr bfloat, ptr addrspace(1) %1, i64 %580, !dbg !35
  %invariant.gep324 = getelementptr bfloat, ptr addrspace(1) %1, i64 %579, !dbg !35
  %invariant.gep326 = getelementptr bfloat, ptr addrspace(1) %1, i64 %578, !dbg !35
  %invariant.gep328 = getelementptr bfloat, ptr addrspace(1) %1, i64 %577, !dbg !35
  %invariant.gep330 = getelementptr bfloat, ptr addrspace(1) %1, i64 %576, !dbg !35
  %invariant.gep332 = getelementptr bfloat, ptr addrspace(1) %1, i64 %575, !dbg !35
  %invariant.gep334 = getelementptr bfloat, ptr addrspace(1) %1, i64 %574, !dbg !35
  %invariant.gep336 = getelementptr bfloat, ptr addrspace(1) %1, i64 %573, !dbg !35
  %invariant.gep338 = getelementptr bfloat, ptr addrspace(1) %1, i64 %572, !dbg !35
  %invariant.gep340 = getelementptr bfloat, ptr addrspace(1) %1, i64 %571, !dbg !35
  br label %595, !dbg !35

595:                                              ; preds = %4, %595
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %595 ]
  %596 = phi i32 [ -1, %4 ], [ %665, %595 ]
  %597 = phi i32 [ 2, %4 ], [ %1698, %595 ]
  %598 = phi float [ 0.000000e+00, %4 ], [ %1617, %595 ]
  %599 = phi float [ 0.000000e+00, %4 ], [ %1618, %595 ]
  %600 = phi float [ 0.000000e+00, %4 ], [ %1619, %595 ]
  %601 = phi float [ 0.000000e+00, %4 ], [ %1620, %595 ]
  %602 = phi float [ 0.000000e+00, %4 ], [ %1622, %595 ]
  %603 = phi float [ 0.000000e+00, %4 ], [ %1623, %595 ]
  %604 = phi float [ 0.000000e+00, %4 ], [ %1624, %595 ]
  %605 = phi float [ 0.000000e+00, %4 ], [ %1625, %595 ]
  %606 = phi float [ 0.000000e+00, %4 ], [ %1627, %595 ]
  %607 = phi float [ 0.000000e+00, %4 ], [ %1628, %595 ]
  %608 = phi float [ 0.000000e+00, %4 ], [ %1629, %595 ]
  %609 = phi float [ 0.000000e+00, %4 ], [ %1630, %595 ]
  %610 = phi float [ 0.000000e+00, %4 ], [ %1632, %595 ]
  %611 = phi float [ 0.000000e+00, %4 ], [ %1633, %595 ]
  %612 = phi float [ 0.000000e+00, %4 ], [ %1634, %595 ]
  %613 = phi float [ 0.000000e+00, %4 ], [ %1635, %595 ]
  %614 = phi float [ 0.000000e+00, %4 ], [ %1637, %595 ]
  %615 = phi float [ 0.000000e+00, %4 ], [ %1638, %595 ]
  %616 = phi float [ 0.000000e+00, %4 ], [ %1639, %595 ]
  %617 = phi float [ 0.000000e+00, %4 ], [ %1640, %595 ]
  %618 = phi float [ 0.000000e+00, %4 ], [ %1642, %595 ]
  %619 = phi float [ 0.000000e+00, %4 ], [ %1643, %595 ]
  %620 = phi float [ 0.000000e+00, %4 ], [ %1644, %595 ]
  %621 = phi float [ 0.000000e+00, %4 ], [ %1645, %595 ]
  %622 = phi float [ 0.000000e+00, %4 ], [ %1647, %595 ]
  %623 = phi float [ 0.000000e+00, %4 ], [ %1648, %595 ]
  %624 = phi float [ 0.000000e+00, %4 ], [ %1649, %595 ]
  %625 = phi float [ 0.000000e+00, %4 ], [ %1650, %595 ]
  %626 = phi float [ 0.000000e+00, %4 ], [ %1652, %595 ]
  %627 = phi float [ 0.000000e+00, %4 ], [ %1653, %595 ]
  %628 = phi float [ 0.000000e+00, %4 ], [ %1654, %595 ]
  %629 = phi float [ 0.000000e+00, %4 ], [ %1655, %595 ]
  %630 = phi float [ 0.000000e+00, %4 ], [ %1657, %595 ]
  %631 = phi float [ 0.000000e+00, %4 ], [ %1658, %595 ]
  %632 = phi float [ 0.000000e+00, %4 ], [ %1659, %595 ]
  %633 = phi float [ 0.000000e+00, %4 ], [ %1660, %595 ]
  %634 = phi float [ 0.000000e+00, %4 ], [ %1662, %595 ]
  %635 = phi float [ 0.000000e+00, %4 ], [ %1663, %595 ]
  %636 = phi float [ 0.000000e+00, %4 ], [ %1664, %595 ]
  %637 = phi float [ 0.000000e+00, %4 ], [ %1665, %595 ]
  %638 = phi float [ 0.000000e+00, %4 ], [ %1667, %595 ]
  %639 = phi float [ 0.000000e+00, %4 ], [ %1668, %595 ]
  %640 = phi float [ 0.000000e+00, %4 ], [ %1669, %595 ]
  %641 = phi float [ 0.000000e+00, %4 ], [ %1670, %595 ]
  %642 = phi float [ 0.000000e+00, %4 ], [ %1672, %595 ]
  %643 = phi float [ 0.000000e+00, %4 ], [ %1673, %595 ]
  %644 = phi float [ 0.000000e+00, %4 ], [ %1674, %595 ]
  %645 = phi float [ 0.000000e+00, %4 ], [ %1675, %595 ]
  %646 = phi float [ 0.000000e+00, %4 ], [ %1677, %595 ]
  %647 = phi float [ 0.000000e+00, %4 ], [ %1678, %595 ]
  %648 = phi float [ 0.000000e+00, %4 ], [ %1679, %595 ]
  %649 = phi float [ 0.000000e+00, %4 ], [ %1680, %595 ]
  %650 = phi float [ 0.000000e+00, %4 ], [ %1682, %595 ]
  %651 = phi float [ 0.000000e+00, %4 ], [ %1683, %595 ]
  %652 = phi float [ 0.000000e+00, %4 ], [ %1684, %595 ]
  %653 = phi float [ 0.000000e+00, %4 ], [ %1685, %595 ]
  %654 = phi float [ 0.000000e+00, %4 ], [ %1687, %595 ]
  %655 = phi float [ 0.000000e+00, %4 ], [ %1688, %595 ]
  %656 = phi float [ 0.000000e+00, %4 ], [ %1689, %595 ]
  %657 = phi float [ 0.000000e+00, %4 ], [ %1690, %595 ]
  %658 = phi float [ 0.000000e+00, %4 ], [ %1692, %595 ]
  %659 = phi float [ 0.000000e+00, %4 ], [ %1693, %595 ]
  %660 = phi float [ 0.000000e+00, %4 ], [ %1694, %595 ]
  %661 = phi float [ 0.000000e+00, %4 ], [ %1695, %595 ]
  %662 = icmp samesign ult i64 %indvars.iv, 3, !dbg !35
  %663 = add i32 %596, 1, !dbg !35
  %664 = icmp slt i32 %663, 3, !dbg !35
  %665 = select i1 %664, i32 %663, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %666 = shl i32 %665, 13, !dbg !30
  %667 = sext i32 %666 to i64, !dbg !30
  %668 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %667, !dbg !30
  %669 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %440, !dbg !30
  %670 = ptrtoint ptr addrspace(3) %669 to i64, !dbg !30
  %671 = trunc i64 %670 to i32, !dbg !30
  %672 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %671) #1, !dbg !30
  %673 = extractvalue { i32, i32, i32, i32 } %672, 0, !dbg !30
  %674 = extractvalue { i32, i32, i32, i32 } %672, 1, !dbg !30
  %675 = extractvalue { i32, i32, i32, i32 } %672, 2, !dbg !30
  %676 = extractvalue { i32, i32, i32, i32 } %672, 3, !dbg !30
  %677 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %446, !dbg !30
  %678 = ptrtoint ptr addrspace(3) %677 to i64, !dbg !30
  %679 = trunc i64 %678 to i32, !dbg !30
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %679) #1, !dbg !30
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !30
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !30
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !30
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !30
  %685 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %449, !dbg !30
  %686 = ptrtoint ptr addrspace(3) %685 to i64, !dbg !30
  %687 = trunc i64 %686 to i32, !dbg !30
  %688 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %687) #1, !dbg !30
  %689 = extractvalue { i32, i32, i32, i32 } %688, 0, !dbg !30
  %690 = extractvalue { i32, i32, i32, i32 } %688, 1, !dbg !30
  %691 = extractvalue { i32, i32, i32, i32 } %688, 2, !dbg !30
  %692 = extractvalue { i32, i32, i32, i32 } %688, 3, !dbg !30
  %693 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %454, !dbg !30
  %694 = ptrtoint ptr addrspace(3) %693 to i64, !dbg !30
  %695 = trunc i64 %694 to i32, !dbg !30
  %696 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %695) #1, !dbg !30
  %697 = extractvalue { i32, i32, i32, i32 } %696, 0, !dbg !30
  %698 = extractvalue { i32, i32, i32, i32 } %696, 1, !dbg !30
  %699 = extractvalue { i32, i32, i32, i32 } %696, 2, !dbg !30
  %700 = extractvalue { i32, i32, i32, i32 } %696, 3, !dbg !30
  %701 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %458, !dbg !30
  %702 = ptrtoint ptr addrspace(3) %701 to i64, !dbg !30
  %703 = trunc i64 %702 to i32, !dbg !30
  %704 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %703) #1, !dbg !30
  %705 = extractvalue { i32, i32, i32, i32 } %704, 0, !dbg !30
  %706 = extractvalue { i32, i32, i32, i32 } %704, 1, !dbg !30
  %707 = extractvalue { i32, i32, i32, i32 } %704, 2, !dbg !30
  %708 = extractvalue { i32, i32, i32, i32 } %704, 3, !dbg !30
  %709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %464, !dbg !30
  %710 = ptrtoint ptr addrspace(3) %709 to i64, !dbg !30
  %711 = trunc i64 %710 to i32, !dbg !30
  %712 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %711) #1, !dbg !30
  %713 = extractvalue { i32, i32, i32, i32 } %712, 0, !dbg !30
  %714 = extractvalue { i32, i32, i32, i32 } %712, 1, !dbg !30
  %715 = extractvalue { i32, i32, i32, i32 } %712, 2, !dbg !30
  %716 = extractvalue { i32, i32, i32, i32 } %712, 3, !dbg !30
  %717 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %467, !dbg !30
  %718 = ptrtoint ptr addrspace(3) %717 to i64, !dbg !30
  %719 = trunc i64 %718 to i32, !dbg !30
  %720 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %719) #1, !dbg !30
  %721 = extractvalue { i32, i32, i32, i32 } %720, 0, !dbg !30
  %722 = extractvalue { i32, i32, i32, i32 } %720, 1, !dbg !30
  %723 = extractvalue { i32, i32, i32, i32 } %720, 2, !dbg !30
  %724 = extractvalue { i32, i32, i32, i32 } %720, 3, !dbg !30
  %725 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %471, !dbg !30
  %726 = ptrtoint ptr addrspace(3) %725 to i64, !dbg !30
  %727 = trunc i64 %726 to i32, !dbg !30
  %728 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %727) #1, !dbg !30
  %729 = extractvalue { i32, i32, i32, i32 } %728, 0, !dbg !30
  %730 = extractvalue { i32, i32, i32, i32 } %728, 1, !dbg !30
  %731 = extractvalue { i32, i32, i32, i32 } %728, 2, !dbg !30
  %732 = extractvalue { i32, i32, i32, i32 } %728, 3, !dbg !30
  %733 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %474, !dbg !30
  %734 = ptrtoint ptr addrspace(3) %733 to i64, !dbg !30
  %735 = trunc i64 %734 to i32, !dbg !30
  %736 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %735) #1, !dbg !30
  %737 = extractvalue { i32, i32, i32, i32 } %736, 0, !dbg !30
  %738 = extractvalue { i32, i32, i32, i32 } %736, 1, !dbg !30
  %739 = extractvalue { i32, i32, i32, i32 } %736, 2, !dbg !30
  %740 = extractvalue { i32, i32, i32, i32 } %736, 3, !dbg !30
  %741 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %476, !dbg !30
  %742 = ptrtoint ptr addrspace(3) %741 to i64, !dbg !30
  %743 = trunc i64 %742 to i32, !dbg !30
  %744 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %743) #1, !dbg !30
  %745 = extractvalue { i32, i32, i32, i32 } %744, 0, !dbg !30
  %746 = extractvalue { i32, i32, i32, i32 } %744, 1, !dbg !30
  %747 = extractvalue { i32, i32, i32, i32 } %744, 2, !dbg !30
  %748 = extractvalue { i32, i32, i32, i32 } %744, 3, !dbg !30
  %749 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %478, !dbg !30
  %750 = ptrtoint ptr addrspace(3) %749 to i64, !dbg !30
  %751 = trunc i64 %750 to i32, !dbg !30
  %752 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %751) #1, !dbg !30
  %753 = extractvalue { i32, i32, i32, i32 } %752, 0, !dbg !30
  %754 = extractvalue { i32, i32, i32, i32 } %752, 1, !dbg !30
  %755 = extractvalue { i32, i32, i32, i32 } %752, 2, !dbg !30
  %756 = extractvalue { i32, i32, i32, i32 } %752, 3, !dbg !30
  %757 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %480, !dbg !30
  %758 = ptrtoint ptr addrspace(3) %757 to i64, !dbg !30
  %759 = trunc i64 %758 to i32, !dbg !30
  %760 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %759) #1, !dbg !30
  %761 = extractvalue { i32, i32, i32, i32 } %760, 0, !dbg !30
  %762 = extractvalue { i32, i32, i32, i32 } %760, 1, !dbg !30
  %763 = extractvalue { i32, i32, i32, i32 } %760, 2, !dbg !30
  %764 = extractvalue { i32, i32, i32, i32 } %760, 3, !dbg !30
  %765 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %482, !dbg !30
  %766 = ptrtoint ptr addrspace(3) %765 to i64, !dbg !30
  %767 = trunc i64 %766 to i32, !dbg !30
  %768 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %767) #1, !dbg !30
  %769 = extractvalue { i32, i32, i32, i32 } %768, 0, !dbg !30
  %770 = extractvalue { i32, i32, i32, i32 } %768, 1, !dbg !30
  %771 = extractvalue { i32, i32, i32, i32 } %768, 2, !dbg !30
  %772 = extractvalue { i32, i32, i32, i32 } %768, 3, !dbg !30
  %773 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %484, !dbg !30
  %774 = ptrtoint ptr addrspace(3) %773 to i64, !dbg !30
  %775 = trunc i64 %774 to i32, !dbg !30
  %776 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %775) #1, !dbg !30
  %777 = extractvalue { i32, i32, i32, i32 } %776, 0, !dbg !30
  %778 = extractvalue { i32, i32, i32, i32 } %776, 1, !dbg !30
  %779 = extractvalue { i32, i32, i32, i32 } %776, 2, !dbg !30
  %780 = extractvalue { i32, i32, i32, i32 } %776, 3, !dbg !30
  %781 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %486, !dbg !30
  %782 = ptrtoint ptr addrspace(3) %781 to i64, !dbg !30
  %783 = trunc i64 %782 to i32, !dbg !30
  %784 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %783) #1, !dbg !30
  %785 = extractvalue { i32, i32, i32, i32 } %784, 0, !dbg !30
  %786 = extractvalue { i32, i32, i32, i32 } %784, 1, !dbg !30
  %787 = extractvalue { i32, i32, i32, i32 } %784, 2, !dbg !30
  %788 = extractvalue { i32, i32, i32, i32 } %784, 3, !dbg !30
  %789 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %488, !dbg !30
  %790 = ptrtoint ptr addrspace(3) %789 to i64, !dbg !30
  %791 = trunc i64 %790 to i32, !dbg !30
  %792 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %791) #1, !dbg !30
  %793 = extractvalue { i32, i32, i32, i32 } %792, 0, !dbg !30
  %794 = extractvalue { i32, i32, i32, i32 } %792, 1, !dbg !30
  %795 = extractvalue { i32, i32, i32, i32 } %792, 2, !dbg !30
  %796 = extractvalue { i32, i32, i32, i32 } %792, 3, !dbg !30
  %797 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %492, !dbg !30
  %798 = ptrtoint ptr addrspace(3) %797 to i64, !dbg !30
  %799 = trunc i64 %798 to i32, !dbg !30
  %800 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %799) #1, !dbg !30
  %801 = extractvalue { i32, i32, i32, i32 } %800, 0, !dbg !30
  %802 = extractvalue { i32, i32, i32, i32 } %800, 1, !dbg !30
  %803 = extractvalue { i32, i32, i32, i32 } %800, 2, !dbg !30
  %804 = extractvalue { i32, i32, i32, i32 } %800, 3, !dbg !30
  %805 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %494, !dbg !30
  %806 = ptrtoint ptr addrspace(3) %805 to i64, !dbg !30
  %807 = trunc i64 %806 to i32, !dbg !30
  %808 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %807) #1, !dbg !30
  %809 = extractvalue { i32, i32, i32, i32 } %808, 0, !dbg !30
  %810 = extractvalue { i32, i32, i32, i32 } %808, 1, !dbg !30
  %811 = extractvalue { i32, i32, i32, i32 } %808, 2, !dbg !30
  %812 = extractvalue { i32, i32, i32, i32 } %808, 3, !dbg !30
  %813 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %496, !dbg !30
  %814 = ptrtoint ptr addrspace(3) %813 to i64, !dbg !30
  %815 = trunc i64 %814 to i32, !dbg !30
  %816 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %815) #1, !dbg !30
  %817 = extractvalue { i32, i32, i32, i32 } %816, 0, !dbg !30
  %818 = extractvalue { i32, i32, i32, i32 } %816, 1, !dbg !30
  %819 = extractvalue { i32, i32, i32, i32 } %816, 2, !dbg !30
  %820 = extractvalue { i32, i32, i32, i32 } %816, 3, !dbg !30
  %821 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %498, !dbg !30
  %822 = ptrtoint ptr addrspace(3) %821 to i64, !dbg !30
  %823 = trunc i64 %822 to i32, !dbg !30
  %824 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %823) #1, !dbg !30
  %825 = extractvalue { i32, i32, i32, i32 } %824, 0, !dbg !30
  %826 = extractvalue { i32, i32, i32, i32 } %824, 1, !dbg !30
  %827 = extractvalue { i32, i32, i32, i32 } %824, 2, !dbg !30
  %828 = extractvalue { i32, i32, i32, i32 } %824, 3, !dbg !30
  %829 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %500, !dbg !30
  %830 = ptrtoint ptr addrspace(3) %829 to i64, !dbg !30
  %831 = trunc i64 %830 to i32, !dbg !30
  %832 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %831) #1, !dbg !30
  %833 = extractvalue { i32, i32, i32, i32 } %832, 0, !dbg !30
  %834 = extractvalue { i32, i32, i32, i32 } %832, 1, !dbg !30
  %835 = extractvalue { i32, i32, i32, i32 } %832, 2, !dbg !30
  %836 = extractvalue { i32, i32, i32, i32 } %832, 3, !dbg !30
  %837 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %502, !dbg !30
  %838 = ptrtoint ptr addrspace(3) %837 to i64, !dbg !30
  %839 = trunc i64 %838 to i32, !dbg !30
  %840 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %839) #1, !dbg !30
  %841 = extractvalue { i32, i32, i32, i32 } %840, 0, !dbg !30
  %842 = extractvalue { i32, i32, i32, i32 } %840, 1, !dbg !30
  %843 = extractvalue { i32, i32, i32, i32 } %840, 2, !dbg !30
  %844 = extractvalue { i32, i32, i32, i32 } %840, 3, !dbg !30
  %845 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %504, !dbg !30
  %846 = ptrtoint ptr addrspace(3) %845 to i64, !dbg !30
  %847 = trunc i64 %846 to i32, !dbg !30
  %848 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %847) #1, !dbg !30
  %849 = extractvalue { i32, i32, i32, i32 } %848, 0, !dbg !30
  %850 = extractvalue { i32, i32, i32, i32 } %848, 1, !dbg !30
  %851 = extractvalue { i32, i32, i32, i32 } %848, 2, !dbg !30
  %852 = extractvalue { i32, i32, i32, i32 } %848, 3, !dbg !30
  %853 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %506, !dbg !30
  %854 = ptrtoint ptr addrspace(3) %853 to i64, !dbg !30
  %855 = trunc i64 %854 to i32, !dbg !30
  %856 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %855) #1, !dbg !30
  %857 = extractvalue { i32, i32, i32, i32 } %856, 0, !dbg !30
  %858 = extractvalue { i32, i32, i32, i32 } %856, 1, !dbg !30
  %859 = extractvalue { i32, i32, i32, i32 } %856, 2, !dbg !30
  %860 = extractvalue { i32, i32, i32, i32 } %856, 3, !dbg !30
  %861 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %509, !dbg !30
  %862 = ptrtoint ptr addrspace(3) %861 to i64, !dbg !30
  %863 = trunc i64 %862 to i32, !dbg !30
  %864 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %863) #1, !dbg !30
  %865 = extractvalue { i32, i32, i32, i32 } %864, 0, !dbg !30
  %866 = extractvalue { i32, i32, i32, i32 } %864, 1, !dbg !30
  %867 = extractvalue { i32, i32, i32, i32 } %864, 2, !dbg !30
  %868 = extractvalue { i32, i32, i32, i32 } %864, 3, !dbg !30
  %869 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %511, !dbg !30
  %870 = ptrtoint ptr addrspace(3) %869 to i64, !dbg !30
  %871 = trunc i64 %870 to i32, !dbg !30
  %872 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %871) #1, !dbg !30
  %873 = extractvalue { i32, i32, i32, i32 } %872, 0, !dbg !30
  %874 = extractvalue { i32, i32, i32, i32 } %872, 1, !dbg !30
  %875 = extractvalue { i32, i32, i32, i32 } %872, 2, !dbg !30
  %876 = extractvalue { i32, i32, i32, i32 } %872, 3, !dbg !30
  %877 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %513, !dbg !30
  %878 = ptrtoint ptr addrspace(3) %877 to i64, !dbg !30
  %879 = trunc i64 %878 to i32, !dbg !30
  %880 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %879) #1, !dbg !30
  %881 = extractvalue { i32, i32, i32, i32 } %880, 0, !dbg !30
  %882 = extractvalue { i32, i32, i32, i32 } %880, 1, !dbg !30
  %883 = extractvalue { i32, i32, i32, i32 } %880, 2, !dbg !30
  %884 = extractvalue { i32, i32, i32, i32 } %880, 3, !dbg !30
  %885 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %515, !dbg !30
  %886 = ptrtoint ptr addrspace(3) %885 to i64, !dbg !30
  %887 = trunc i64 %886 to i32, !dbg !30
  %888 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %887) #1, !dbg !30
  %889 = extractvalue { i32, i32, i32, i32 } %888, 0, !dbg !30
  %890 = extractvalue { i32, i32, i32, i32 } %888, 1, !dbg !30
  %891 = extractvalue { i32, i32, i32, i32 } %888, 2, !dbg !30
  %892 = extractvalue { i32, i32, i32, i32 } %888, 3, !dbg !30
  %893 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %517, !dbg !30
  %894 = ptrtoint ptr addrspace(3) %893 to i64, !dbg !30
  %895 = trunc i64 %894 to i32, !dbg !30
  %896 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %895) #1, !dbg !30
  %897 = extractvalue { i32, i32, i32, i32 } %896, 0, !dbg !30
  %898 = extractvalue { i32, i32, i32, i32 } %896, 1, !dbg !30
  %899 = extractvalue { i32, i32, i32, i32 } %896, 2, !dbg !30
  %900 = extractvalue { i32, i32, i32, i32 } %896, 3, !dbg !30
  %901 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %519, !dbg !30
  %902 = ptrtoint ptr addrspace(3) %901 to i64, !dbg !30
  %903 = trunc i64 %902 to i32, !dbg !30
  %904 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %903) #1, !dbg !30
  %905 = extractvalue { i32, i32, i32, i32 } %904, 0, !dbg !30
  %906 = extractvalue { i32, i32, i32, i32 } %904, 1, !dbg !30
  %907 = extractvalue { i32, i32, i32, i32 } %904, 2, !dbg !30
  %908 = extractvalue { i32, i32, i32, i32 } %904, 3, !dbg !30
  %909 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %521, !dbg !30
  %910 = ptrtoint ptr addrspace(3) %909 to i64, !dbg !30
  %911 = trunc i64 %910 to i32, !dbg !30
  %912 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %911) #1, !dbg !30
  %913 = extractvalue { i32, i32, i32, i32 } %912, 0, !dbg !30
  %914 = extractvalue { i32, i32, i32, i32 } %912, 1, !dbg !30
  %915 = extractvalue { i32, i32, i32, i32 } %912, 2, !dbg !30
  %916 = extractvalue { i32, i32, i32, i32 } %912, 3, !dbg !30
  %917 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %668, i64 %523, !dbg !30
  %918 = ptrtoint ptr addrspace(3) %917 to i64, !dbg !30
  %919 = trunc i64 %918 to i32, !dbg !30
  %920 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %919) #1, !dbg !30
  %921 = extractvalue { i32, i32, i32, i32 } %920, 0, !dbg !30
  %922 = extractvalue { i32, i32, i32, i32 } %920, 1, !dbg !30
  %923 = extractvalue { i32, i32, i32, i32 } %920, 2, !dbg !30
  %924 = extractvalue { i32, i32, i32, i32 } %920, 3, !dbg !30
  %925 = shl i32 %665, 14, !dbg !33
  %926 = sext i32 %925 to i64, !dbg !33
  %927 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %926, !dbg !33
  %928 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %530, !dbg !33
  %929 = ptrtoint ptr addrspace(3) %928 to i64, !dbg !33
  %930 = trunc i64 %929 to i32, !dbg !33
  %931 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %930) #1, !dbg !33
  %932 = extractvalue { i32, i32, i32, i32 } %931, 0, !dbg !33
  %933 = extractvalue { i32, i32, i32, i32 } %931, 1, !dbg !33
  %934 = extractvalue { i32, i32, i32, i32 } %931, 2, !dbg !33
  %935 = extractvalue { i32, i32, i32, i32 } %931, 3, !dbg !33
  %936 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %534, !dbg !33
  %937 = ptrtoint ptr addrspace(3) %936 to i64, !dbg !33
  %938 = trunc i64 %937 to i32, !dbg !33
  %939 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %938) #1, !dbg !33
  %940 = extractvalue { i32, i32, i32, i32 } %939, 0, !dbg !33
  %941 = extractvalue { i32, i32, i32, i32 } %939, 1, !dbg !33
  %942 = extractvalue { i32, i32, i32, i32 } %939, 2, !dbg !33
  %943 = extractvalue { i32, i32, i32, i32 } %939, 3, !dbg !33
  %944 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %537, !dbg !33
  %945 = ptrtoint ptr addrspace(3) %944 to i64, !dbg !33
  %946 = trunc i64 %945 to i32, !dbg !33
  %947 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %946) #1, !dbg !33
  %948 = extractvalue { i32, i32, i32, i32 } %947, 0, !dbg !33
  %949 = extractvalue { i32, i32, i32, i32 } %947, 1, !dbg !33
  %950 = extractvalue { i32, i32, i32, i32 } %947, 2, !dbg !33
  %951 = extractvalue { i32, i32, i32, i32 } %947, 3, !dbg !33
  %952 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %540, !dbg !33
  %953 = ptrtoint ptr addrspace(3) %952 to i64, !dbg !33
  %954 = trunc i64 %953 to i32, !dbg !33
  %955 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %954) #1, !dbg !33
  %956 = extractvalue { i32, i32, i32, i32 } %955, 0, !dbg !33
  %957 = extractvalue { i32, i32, i32, i32 } %955, 1, !dbg !33
  %958 = extractvalue { i32, i32, i32, i32 } %955, 2, !dbg !33
  %959 = extractvalue { i32, i32, i32, i32 } %955, 3, !dbg !33
  %960 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %545, !dbg !33
  %961 = ptrtoint ptr addrspace(3) %960 to i64, !dbg !33
  %962 = trunc i64 %961 to i32, !dbg !33
  %963 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %962) #1, !dbg !33
  %964 = extractvalue { i32, i32, i32, i32 } %963, 0, !dbg !33
  %965 = extractvalue { i32, i32, i32, i32 } %963, 1, !dbg !33
  %966 = extractvalue { i32, i32, i32, i32 } %963, 2, !dbg !33
  %967 = extractvalue { i32, i32, i32, i32 } %963, 3, !dbg !33
  %968 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %547, !dbg !33
  %969 = ptrtoint ptr addrspace(3) %968 to i64, !dbg !33
  %970 = trunc i64 %969 to i32, !dbg !33
  %971 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %970) #1, !dbg !33
  %972 = extractvalue { i32, i32, i32, i32 } %971, 0, !dbg !33
  %973 = extractvalue { i32, i32, i32, i32 } %971, 1, !dbg !33
  %974 = extractvalue { i32, i32, i32, i32 } %971, 2, !dbg !33
  %975 = extractvalue { i32, i32, i32, i32 } %971, 3, !dbg !33
  %976 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %549, !dbg !33
  %977 = ptrtoint ptr addrspace(3) %976 to i64, !dbg !33
  %978 = trunc i64 %977 to i32, !dbg !33
  %979 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %978) #1, !dbg !33
  %980 = extractvalue { i32, i32, i32, i32 } %979, 0, !dbg !33
  %981 = extractvalue { i32, i32, i32, i32 } %979, 1, !dbg !33
  %982 = extractvalue { i32, i32, i32, i32 } %979, 2, !dbg !33
  %983 = extractvalue { i32, i32, i32, i32 } %979, 3, !dbg !33
  %984 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %551, !dbg !33
  %985 = ptrtoint ptr addrspace(3) %984 to i64, !dbg !33
  %986 = trunc i64 %985 to i32, !dbg !33
  %987 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %986) #1, !dbg !33
  %988 = extractvalue { i32, i32, i32, i32 } %987, 0, !dbg !33
  %989 = extractvalue { i32, i32, i32, i32 } %987, 1, !dbg !33
  %990 = extractvalue { i32, i32, i32, i32 } %987, 2, !dbg !33
  %991 = extractvalue { i32, i32, i32, i32 } %987, 3, !dbg !33
  %992 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %554, !dbg !33
  %993 = ptrtoint ptr addrspace(3) %992 to i64, !dbg !33
  %994 = trunc i64 %993 to i32, !dbg !33
  %995 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %994) #1, !dbg !33
  %996 = extractvalue { i32, i32, i32, i32 } %995, 0, !dbg !33
  %997 = extractvalue { i32, i32, i32, i32 } %995, 1, !dbg !33
  %998 = extractvalue { i32, i32, i32, i32 } %995, 2, !dbg !33
  %999 = extractvalue { i32, i32, i32, i32 } %995, 3, !dbg !33
  %1000 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %556, !dbg !33
  %1001 = ptrtoint ptr addrspace(3) %1000 to i64, !dbg !33
  %1002 = trunc i64 %1001 to i32, !dbg !33
  %1003 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1002) #1, !dbg !33
  %1004 = extractvalue { i32, i32, i32, i32 } %1003, 0, !dbg !33
  %1005 = extractvalue { i32, i32, i32, i32 } %1003, 1, !dbg !33
  %1006 = extractvalue { i32, i32, i32, i32 } %1003, 2, !dbg !33
  %1007 = extractvalue { i32, i32, i32, i32 } %1003, 3, !dbg !33
  %1008 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %558, !dbg !33
  %1009 = ptrtoint ptr addrspace(3) %1008 to i64, !dbg !33
  %1010 = trunc i64 %1009 to i32, !dbg !33
  %1011 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1010) #1, !dbg !33
  %1012 = extractvalue { i32, i32, i32, i32 } %1011, 0, !dbg !33
  %1013 = extractvalue { i32, i32, i32, i32 } %1011, 1, !dbg !33
  %1014 = extractvalue { i32, i32, i32, i32 } %1011, 2, !dbg !33
  %1015 = extractvalue { i32, i32, i32, i32 } %1011, 3, !dbg !33
  %1016 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %560, !dbg !33
  %1017 = ptrtoint ptr addrspace(3) %1016 to i64, !dbg !33
  %1018 = trunc i64 %1017 to i32, !dbg !33
  %1019 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1018) #1, !dbg !33
  %1020 = extractvalue { i32, i32, i32, i32 } %1019, 0, !dbg !33
  %1021 = extractvalue { i32, i32, i32, i32 } %1019, 1, !dbg !33
  %1022 = extractvalue { i32, i32, i32, i32 } %1019, 2, !dbg !33
  %1023 = extractvalue { i32, i32, i32, i32 } %1019, 3, !dbg !33
  %1024 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %563, !dbg !33
  %1025 = ptrtoint ptr addrspace(3) %1024 to i64, !dbg !33
  %1026 = trunc i64 %1025 to i32, !dbg !33
  %1027 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1026) #1, !dbg !33
  %1028 = extractvalue { i32, i32, i32, i32 } %1027, 0, !dbg !33
  %1029 = extractvalue { i32, i32, i32, i32 } %1027, 1, !dbg !33
  %1030 = extractvalue { i32, i32, i32, i32 } %1027, 2, !dbg !33
  %1031 = extractvalue { i32, i32, i32, i32 } %1027, 3, !dbg !33
  %1032 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %565, !dbg !33
  %1033 = ptrtoint ptr addrspace(3) %1032 to i64, !dbg !33
  %1034 = trunc i64 %1033 to i32, !dbg !33
  %1035 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1034) #1, !dbg !33
  %1036 = extractvalue { i32, i32, i32, i32 } %1035, 0, !dbg !33
  %1037 = extractvalue { i32, i32, i32, i32 } %1035, 1, !dbg !33
  %1038 = extractvalue { i32, i32, i32, i32 } %1035, 2, !dbg !33
  %1039 = extractvalue { i32, i32, i32, i32 } %1035, 3, !dbg !33
  %1040 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %567, !dbg !33
  %1041 = ptrtoint ptr addrspace(3) %1040 to i64, !dbg !33
  %1042 = trunc i64 %1041 to i32, !dbg !33
  %1043 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1042) #1, !dbg !33
  %1044 = extractvalue { i32, i32, i32, i32 } %1043, 0, !dbg !33
  %1045 = extractvalue { i32, i32, i32, i32 } %1043, 1, !dbg !33
  %1046 = extractvalue { i32, i32, i32, i32 } %1043, 2, !dbg !33
  %1047 = extractvalue { i32, i32, i32, i32 } %1043, 3, !dbg !33
  %1048 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %927, i64 %569, !dbg !33
  %1049 = ptrtoint ptr addrspace(3) %1048 to i64, !dbg !33
  %1050 = trunc i64 %1049 to i32, !dbg !33
  %1051 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1050) #1, !dbg !33
  %1052 = extractvalue { i32, i32, i32, i32 } %1051, 0, !dbg !33
  %1053 = extractvalue { i32, i32, i32, i32 } %1051, 1, !dbg !33
  %1054 = extractvalue { i32, i32, i32, i32 } %1051, 2, !dbg !33
  %1055 = extractvalue { i32, i32, i32, i32 } %1051, 3, !dbg !33
  %1056 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %598, float %599, float %600, float %601, i32 %673, i32 %674, i32 %675, i32 %676, i32 %932, i32 %933) #1, !dbg !36
  %1057 = extractvalue { float, float, float, float } %1056, 0, !dbg !36
  %1058 = extractvalue { float, float, float, float } %1056, 1, !dbg !36
  %1059 = extractvalue { float, float, float, float } %1056, 2, !dbg !36
  %1060 = extractvalue { float, float, float, float } %1056, 3, !dbg !36
  %1061 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %602, float %603, float %604, float %605, i32 %673, i32 %674, i32 %675, i32 %676, i32 %964, i32 %965) #1, !dbg !36
  %1062 = extractvalue { float, float, float, float } %1061, 0, !dbg !36
  %1063 = extractvalue { float, float, float, float } %1061, 1, !dbg !36
  %1064 = extractvalue { float, float, float, float } %1061, 2, !dbg !36
  %1065 = extractvalue { float, float, float, float } %1061, 3, !dbg !36
  %1066 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %606, float %607, float %608, float %609, i32 %673, i32 %674, i32 %675, i32 %676, i32 %996, i32 %997) #1, !dbg !36
  %1067 = extractvalue { float, float, float, float } %1066, 0, !dbg !36
  %1068 = extractvalue { float, float, float, float } %1066, 1, !dbg !36
  %1069 = extractvalue { float, float, float, float } %1066, 2, !dbg !36
  %1070 = extractvalue { float, float, float, float } %1066, 3, !dbg !36
  %1071 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %610, float %611, float %612, float %613, i32 %673, i32 %674, i32 %675, i32 %676, i32 %1028, i32 %1029) #1, !dbg !36
  %1072 = extractvalue { float, float, float, float } %1071, 0, !dbg !36
  %1073 = extractvalue { float, float, float, float } %1071, 1, !dbg !36
  %1074 = extractvalue { float, float, float, float } %1071, 2, !dbg !36
  %1075 = extractvalue { float, float, float, float } %1071, 3, !dbg !36
  %1076 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %614, float %615, float %616, float %617, i32 %737, i32 %738, i32 %739, i32 %740, i32 %932, i32 %933) #1, !dbg !36
  %1077 = extractvalue { float, float, float, float } %1076, 0, !dbg !36
  %1078 = extractvalue { float, float, float, float } %1076, 1, !dbg !36
  %1079 = extractvalue { float, float, float, float } %1076, 2, !dbg !36
  %1080 = extractvalue { float, float, float, float } %1076, 3, !dbg !36
  %1081 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %618, float %619, float %620, float %621, i32 %737, i32 %738, i32 %739, i32 %740, i32 %964, i32 %965) #1, !dbg !36
  %1082 = extractvalue { float, float, float, float } %1081, 0, !dbg !36
  %1083 = extractvalue { float, float, float, float } %1081, 1, !dbg !36
  %1084 = extractvalue { float, float, float, float } %1081, 2, !dbg !36
  %1085 = extractvalue { float, float, float, float } %1081, 3, !dbg !36
  %1086 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %622, float %623, float %624, float %625, i32 %737, i32 %738, i32 %739, i32 %740, i32 %996, i32 %997) #1, !dbg !36
  %1087 = extractvalue { float, float, float, float } %1086, 0, !dbg !36
  %1088 = extractvalue { float, float, float, float } %1086, 1, !dbg !36
  %1089 = extractvalue { float, float, float, float } %1086, 2, !dbg !36
  %1090 = extractvalue { float, float, float, float } %1086, 3, !dbg !36
  %1091 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %626, float %627, float %628, float %629, i32 %737, i32 %738, i32 %739, i32 %740, i32 %1028, i32 %1029) #1, !dbg !36
  %1092 = extractvalue { float, float, float, float } %1091, 0, !dbg !36
  %1093 = extractvalue { float, float, float, float } %1091, 1, !dbg !36
  %1094 = extractvalue { float, float, float, float } %1091, 2, !dbg !36
  %1095 = extractvalue { float, float, float, float } %1091, 3, !dbg !36
  %1096 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %630, float %631, float %632, float %633, i32 %801, i32 %802, i32 %803, i32 %804, i32 %932, i32 %933) #1, !dbg !36
  %1097 = extractvalue { float, float, float, float } %1096, 0, !dbg !36
  %1098 = extractvalue { float, float, float, float } %1096, 1, !dbg !36
  %1099 = extractvalue { float, float, float, float } %1096, 2, !dbg !36
  %1100 = extractvalue { float, float, float, float } %1096, 3, !dbg !36
  %1101 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %634, float %635, float %636, float %637, i32 %801, i32 %802, i32 %803, i32 %804, i32 %964, i32 %965) #1, !dbg !36
  %1102 = extractvalue { float, float, float, float } %1101, 0, !dbg !36
  %1103 = extractvalue { float, float, float, float } %1101, 1, !dbg !36
  %1104 = extractvalue { float, float, float, float } %1101, 2, !dbg !36
  %1105 = extractvalue { float, float, float, float } %1101, 3, !dbg !36
  %1106 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %638, float %639, float %640, float %641, i32 %801, i32 %802, i32 %803, i32 %804, i32 %996, i32 %997) #1, !dbg !36
  %1107 = extractvalue { float, float, float, float } %1106, 0, !dbg !36
  %1108 = extractvalue { float, float, float, float } %1106, 1, !dbg !36
  %1109 = extractvalue { float, float, float, float } %1106, 2, !dbg !36
  %1110 = extractvalue { float, float, float, float } %1106, 3, !dbg !36
  %1111 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %642, float %643, float %644, float %645, i32 %801, i32 %802, i32 %803, i32 %804, i32 %1028, i32 %1029) #1, !dbg !36
  %1112 = extractvalue { float, float, float, float } %1111, 0, !dbg !36
  %1113 = extractvalue { float, float, float, float } %1111, 1, !dbg !36
  %1114 = extractvalue { float, float, float, float } %1111, 2, !dbg !36
  %1115 = extractvalue { float, float, float, float } %1111, 3, !dbg !36
  %1116 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %646, float %647, float %648, float %649, i32 %865, i32 %866, i32 %867, i32 %868, i32 %932, i32 %933) #1, !dbg !36
  %1117 = extractvalue { float, float, float, float } %1116, 0, !dbg !36
  %1118 = extractvalue { float, float, float, float } %1116, 1, !dbg !36
  %1119 = extractvalue { float, float, float, float } %1116, 2, !dbg !36
  %1120 = extractvalue { float, float, float, float } %1116, 3, !dbg !36
  %1121 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %650, float %651, float %652, float %653, i32 %865, i32 %866, i32 %867, i32 %868, i32 %964, i32 %965) #1, !dbg !36
  %1122 = extractvalue { float, float, float, float } %1121, 0, !dbg !36
  %1123 = extractvalue { float, float, float, float } %1121, 1, !dbg !36
  %1124 = extractvalue { float, float, float, float } %1121, 2, !dbg !36
  %1125 = extractvalue { float, float, float, float } %1121, 3, !dbg !36
  %1126 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %654, float %655, float %656, float %657, i32 %865, i32 %866, i32 %867, i32 %868, i32 %996, i32 %997) #1, !dbg !36
  %1127 = extractvalue { float, float, float, float } %1126, 0, !dbg !36
  %1128 = extractvalue { float, float, float, float } %1126, 1, !dbg !36
  %1129 = extractvalue { float, float, float, float } %1126, 2, !dbg !36
  %1130 = extractvalue { float, float, float, float } %1126, 3, !dbg !36
  %1131 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %658, float %659, float %660, float %661, i32 %865, i32 %866, i32 %867, i32 %868, i32 %1028, i32 %1029) #1, !dbg !36
  %1132 = extractvalue { float, float, float, float } %1131, 0, !dbg !36
  %1133 = extractvalue { float, float, float, float } %1131, 1, !dbg !36
  %1134 = extractvalue { float, float, float, float } %1131, 2, !dbg !36
  %1135 = extractvalue { float, float, float, float } %1131, 3, !dbg !36
  %1136 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1057, float %1058, float %1059, float %1060, i32 %681, i32 %682, i32 %683, i32 %684, i32 %934, i32 %935) #1, !dbg !36
  %1137 = extractvalue { float, float, float, float } %1136, 0, !dbg !36
  %1138 = extractvalue { float, float, float, float } %1136, 1, !dbg !36
  %1139 = extractvalue { float, float, float, float } %1136, 2, !dbg !36
  %1140 = extractvalue { float, float, float, float } %1136, 3, !dbg !36
  %1141 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1062, float %1063, float %1064, float %1065, i32 %681, i32 %682, i32 %683, i32 %684, i32 %966, i32 %967) #1, !dbg !36
  %1142 = extractvalue { float, float, float, float } %1141, 0, !dbg !36
  %1143 = extractvalue { float, float, float, float } %1141, 1, !dbg !36
  %1144 = extractvalue { float, float, float, float } %1141, 2, !dbg !36
  %1145 = extractvalue { float, float, float, float } %1141, 3, !dbg !36
  %1146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1067, float %1068, float %1069, float %1070, i32 %681, i32 %682, i32 %683, i32 %684, i32 %998, i32 %999) #1, !dbg !36
  %1147 = extractvalue { float, float, float, float } %1146, 0, !dbg !36
  %1148 = extractvalue { float, float, float, float } %1146, 1, !dbg !36
  %1149 = extractvalue { float, float, float, float } %1146, 2, !dbg !36
  %1150 = extractvalue { float, float, float, float } %1146, 3, !dbg !36
  %1151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1072, float %1073, float %1074, float %1075, i32 %681, i32 %682, i32 %683, i32 %684, i32 %1030, i32 %1031) #1, !dbg !36
  %1152 = extractvalue { float, float, float, float } %1151, 0, !dbg !36
  %1153 = extractvalue { float, float, float, float } %1151, 1, !dbg !36
  %1154 = extractvalue { float, float, float, float } %1151, 2, !dbg !36
  %1155 = extractvalue { float, float, float, float } %1151, 3, !dbg !36
  %1156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1077, float %1078, float %1079, float %1080, i32 %745, i32 %746, i32 %747, i32 %748, i32 %934, i32 %935) #1, !dbg !36
  %1157 = extractvalue { float, float, float, float } %1156, 0, !dbg !36
  %1158 = extractvalue { float, float, float, float } %1156, 1, !dbg !36
  %1159 = extractvalue { float, float, float, float } %1156, 2, !dbg !36
  %1160 = extractvalue { float, float, float, float } %1156, 3, !dbg !36
  %1161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1082, float %1083, float %1084, float %1085, i32 %745, i32 %746, i32 %747, i32 %748, i32 %966, i32 %967) #1, !dbg !36
  %1162 = extractvalue { float, float, float, float } %1161, 0, !dbg !36
  %1163 = extractvalue { float, float, float, float } %1161, 1, !dbg !36
  %1164 = extractvalue { float, float, float, float } %1161, 2, !dbg !36
  %1165 = extractvalue { float, float, float, float } %1161, 3, !dbg !36
  %1166 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1087, float %1088, float %1089, float %1090, i32 %745, i32 %746, i32 %747, i32 %748, i32 %998, i32 %999) #1, !dbg !36
  %1167 = extractvalue { float, float, float, float } %1166, 0, !dbg !36
  %1168 = extractvalue { float, float, float, float } %1166, 1, !dbg !36
  %1169 = extractvalue { float, float, float, float } %1166, 2, !dbg !36
  %1170 = extractvalue { float, float, float, float } %1166, 3, !dbg !36
  %1171 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1092, float %1093, float %1094, float %1095, i32 %745, i32 %746, i32 %747, i32 %748, i32 %1030, i32 %1031) #1, !dbg !36
  %1172 = extractvalue { float, float, float, float } %1171, 0, !dbg !36
  %1173 = extractvalue { float, float, float, float } %1171, 1, !dbg !36
  %1174 = extractvalue { float, float, float, float } %1171, 2, !dbg !36
  %1175 = extractvalue { float, float, float, float } %1171, 3, !dbg !36
  %1176 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1097, float %1098, float %1099, float %1100, i32 %809, i32 %810, i32 %811, i32 %812, i32 %934, i32 %935) #1, !dbg !36
  %1177 = extractvalue { float, float, float, float } %1176, 0, !dbg !36
  %1178 = extractvalue { float, float, float, float } %1176, 1, !dbg !36
  %1179 = extractvalue { float, float, float, float } %1176, 2, !dbg !36
  %1180 = extractvalue { float, float, float, float } %1176, 3, !dbg !36
  %1181 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1102, float %1103, float %1104, float %1105, i32 %809, i32 %810, i32 %811, i32 %812, i32 %966, i32 %967) #1, !dbg !36
  %1182 = extractvalue { float, float, float, float } %1181, 0, !dbg !36
  %1183 = extractvalue { float, float, float, float } %1181, 1, !dbg !36
  %1184 = extractvalue { float, float, float, float } %1181, 2, !dbg !36
  %1185 = extractvalue { float, float, float, float } %1181, 3, !dbg !36
  %1186 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1107, float %1108, float %1109, float %1110, i32 %809, i32 %810, i32 %811, i32 %812, i32 %998, i32 %999) #1, !dbg !36
  %1187 = extractvalue { float, float, float, float } %1186, 0, !dbg !36
  %1188 = extractvalue { float, float, float, float } %1186, 1, !dbg !36
  %1189 = extractvalue { float, float, float, float } %1186, 2, !dbg !36
  %1190 = extractvalue { float, float, float, float } %1186, 3, !dbg !36
  %1191 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1112, float %1113, float %1114, float %1115, i32 %809, i32 %810, i32 %811, i32 %812, i32 %1030, i32 %1031) #1, !dbg !36
  %1192 = extractvalue { float, float, float, float } %1191, 0, !dbg !36
  %1193 = extractvalue { float, float, float, float } %1191, 1, !dbg !36
  %1194 = extractvalue { float, float, float, float } %1191, 2, !dbg !36
  %1195 = extractvalue { float, float, float, float } %1191, 3, !dbg !36
  %1196 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1117, float %1118, float %1119, float %1120, i32 %873, i32 %874, i32 %875, i32 %876, i32 %934, i32 %935) #1, !dbg !36
  %1197 = extractvalue { float, float, float, float } %1196, 0, !dbg !36
  %1198 = extractvalue { float, float, float, float } %1196, 1, !dbg !36
  %1199 = extractvalue { float, float, float, float } %1196, 2, !dbg !36
  %1200 = extractvalue { float, float, float, float } %1196, 3, !dbg !36
  %1201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1122, float %1123, float %1124, float %1125, i32 %873, i32 %874, i32 %875, i32 %876, i32 %966, i32 %967) #1, !dbg !36
  %1202 = extractvalue { float, float, float, float } %1201, 0, !dbg !36
  %1203 = extractvalue { float, float, float, float } %1201, 1, !dbg !36
  %1204 = extractvalue { float, float, float, float } %1201, 2, !dbg !36
  %1205 = extractvalue { float, float, float, float } %1201, 3, !dbg !36
  %1206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1127, float %1128, float %1129, float %1130, i32 %873, i32 %874, i32 %875, i32 %876, i32 %998, i32 %999) #1, !dbg !36
  %1207 = extractvalue { float, float, float, float } %1206, 0, !dbg !36
  %1208 = extractvalue { float, float, float, float } %1206, 1, !dbg !36
  %1209 = extractvalue { float, float, float, float } %1206, 2, !dbg !36
  %1210 = extractvalue { float, float, float, float } %1206, 3, !dbg !36
  %1211 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1132, float %1133, float %1134, float %1135, i32 %873, i32 %874, i32 %875, i32 %876, i32 %1030, i32 %1031) #1, !dbg !36
  %1212 = extractvalue { float, float, float, float } %1211, 0, !dbg !36
  %1213 = extractvalue { float, float, float, float } %1211, 1, !dbg !36
  %1214 = extractvalue { float, float, float, float } %1211, 2, !dbg !36
  %1215 = extractvalue { float, float, float, float } %1211, 3, !dbg !36
  %1216 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1137, float %1138, float %1139, float %1140, i32 %689, i32 %690, i32 %691, i32 %692, i32 %940, i32 %941) #1, !dbg !36
  %1217 = extractvalue { float, float, float, float } %1216, 0, !dbg !36
  %1218 = extractvalue { float, float, float, float } %1216, 1, !dbg !36
  %1219 = extractvalue { float, float, float, float } %1216, 2, !dbg !36
  %1220 = extractvalue { float, float, float, float } %1216, 3, !dbg !36
  %1221 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1142, float %1143, float %1144, float %1145, i32 %689, i32 %690, i32 %691, i32 %692, i32 %972, i32 %973) #1, !dbg !36
  %1222 = extractvalue { float, float, float, float } %1221, 0, !dbg !36
  %1223 = extractvalue { float, float, float, float } %1221, 1, !dbg !36
  %1224 = extractvalue { float, float, float, float } %1221, 2, !dbg !36
  %1225 = extractvalue { float, float, float, float } %1221, 3, !dbg !36
  %1226 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1147, float %1148, float %1149, float %1150, i32 %689, i32 %690, i32 %691, i32 %692, i32 %1004, i32 %1005) #1, !dbg !36
  %1227 = extractvalue { float, float, float, float } %1226, 0, !dbg !36
  %1228 = extractvalue { float, float, float, float } %1226, 1, !dbg !36
  %1229 = extractvalue { float, float, float, float } %1226, 2, !dbg !36
  %1230 = extractvalue { float, float, float, float } %1226, 3, !dbg !36
  %1231 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1152, float %1153, float %1154, float %1155, i32 %689, i32 %690, i32 %691, i32 %692, i32 %1036, i32 %1037) #1, !dbg !36
  %1232 = extractvalue { float, float, float, float } %1231, 0, !dbg !36
  %1233 = extractvalue { float, float, float, float } %1231, 1, !dbg !36
  %1234 = extractvalue { float, float, float, float } %1231, 2, !dbg !36
  %1235 = extractvalue { float, float, float, float } %1231, 3, !dbg !36
  %1236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1157, float %1158, float %1159, float %1160, i32 %753, i32 %754, i32 %755, i32 %756, i32 %940, i32 %941) #1, !dbg !36
  %1237 = extractvalue { float, float, float, float } %1236, 0, !dbg !36
  %1238 = extractvalue { float, float, float, float } %1236, 1, !dbg !36
  %1239 = extractvalue { float, float, float, float } %1236, 2, !dbg !36
  %1240 = extractvalue { float, float, float, float } %1236, 3, !dbg !36
  %1241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1162, float %1163, float %1164, float %1165, i32 %753, i32 %754, i32 %755, i32 %756, i32 %972, i32 %973) #1, !dbg !36
  %1242 = extractvalue { float, float, float, float } %1241, 0, !dbg !36
  %1243 = extractvalue { float, float, float, float } %1241, 1, !dbg !36
  %1244 = extractvalue { float, float, float, float } %1241, 2, !dbg !36
  %1245 = extractvalue { float, float, float, float } %1241, 3, !dbg !36
  %1246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1167, float %1168, float %1169, float %1170, i32 %753, i32 %754, i32 %755, i32 %756, i32 %1004, i32 %1005) #1, !dbg !36
  %1247 = extractvalue { float, float, float, float } %1246, 0, !dbg !36
  %1248 = extractvalue { float, float, float, float } %1246, 1, !dbg !36
  %1249 = extractvalue { float, float, float, float } %1246, 2, !dbg !36
  %1250 = extractvalue { float, float, float, float } %1246, 3, !dbg !36
  %1251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1172, float %1173, float %1174, float %1175, i32 %753, i32 %754, i32 %755, i32 %756, i32 %1036, i32 %1037) #1, !dbg !36
  %1252 = extractvalue { float, float, float, float } %1251, 0, !dbg !36
  %1253 = extractvalue { float, float, float, float } %1251, 1, !dbg !36
  %1254 = extractvalue { float, float, float, float } %1251, 2, !dbg !36
  %1255 = extractvalue { float, float, float, float } %1251, 3, !dbg !36
  %1256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1177, float %1178, float %1179, float %1180, i32 %817, i32 %818, i32 %819, i32 %820, i32 %940, i32 %941) #1, !dbg !36
  %1257 = extractvalue { float, float, float, float } %1256, 0, !dbg !36
  %1258 = extractvalue { float, float, float, float } %1256, 1, !dbg !36
  %1259 = extractvalue { float, float, float, float } %1256, 2, !dbg !36
  %1260 = extractvalue { float, float, float, float } %1256, 3, !dbg !36
  %1261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1182, float %1183, float %1184, float %1185, i32 %817, i32 %818, i32 %819, i32 %820, i32 %972, i32 %973) #1, !dbg !36
  %1262 = extractvalue { float, float, float, float } %1261, 0, !dbg !36
  %1263 = extractvalue { float, float, float, float } %1261, 1, !dbg !36
  %1264 = extractvalue { float, float, float, float } %1261, 2, !dbg !36
  %1265 = extractvalue { float, float, float, float } %1261, 3, !dbg !36
  %1266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1187, float %1188, float %1189, float %1190, i32 %817, i32 %818, i32 %819, i32 %820, i32 %1004, i32 %1005) #1, !dbg !36
  %1267 = extractvalue { float, float, float, float } %1266, 0, !dbg !36
  %1268 = extractvalue { float, float, float, float } %1266, 1, !dbg !36
  %1269 = extractvalue { float, float, float, float } %1266, 2, !dbg !36
  %1270 = extractvalue { float, float, float, float } %1266, 3, !dbg !36
  %1271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1192, float %1193, float %1194, float %1195, i32 %817, i32 %818, i32 %819, i32 %820, i32 %1036, i32 %1037) #1, !dbg !36
  %1272 = extractvalue { float, float, float, float } %1271, 0, !dbg !36
  %1273 = extractvalue { float, float, float, float } %1271, 1, !dbg !36
  %1274 = extractvalue { float, float, float, float } %1271, 2, !dbg !36
  %1275 = extractvalue { float, float, float, float } %1271, 3, !dbg !36
  %1276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1197, float %1198, float %1199, float %1200, i32 %881, i32 %882, i32 %883, i32 %884, i32 %940, i32 %941) #1, !dbg !36
  %1277 = extractvalue { float, float, float, float } %1276, 0, !dbg !36
  %1278 = extractvalue { float, float, float, float } %1276, 1, !dbg !36
  %1279 = extractvalue { float, float, float, float } %1276, 2, !dbg !36
  %1280 = extractvalue { float, float, float, float } %1276, 3, !dbg !36
  %1281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1202, float %1203, float %1204, float %1205, i32 %881, i32 %882, i32 %883, i32 %884, i32 %972, i32 %973) #1, !dbg !36
  %1282 = extractvalue { float, float, float, float } %1281, 0, !dbg !36
  %1283 = extractvalue { float, float, float, float } %1281, 1, !dbg !36
  %1284 = extractvalue { float, float, float, float } %1281, 2, !dbg !36
  %1285 = extractvalue { float, float, float, float } %1281, 3, !dbg !36
  %1286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1207, float %1208, float %1209, float %1210, i32 %881, i32 %882, i32 %883, i32 %884, i32 %1004, i32 %1005) #1, !dbg !36
  %1287 = extractvalue { float, float, float, float } %1286, 0, !dbg !36
  %1288 = extractvalue { float, float, float, float } %1286, 1, !dbg !36
  %1289 = extractvalue { float, float, float, float } %1286, 2, !dbg !36
  %1290 = extractvalue { float, float, float, float } %1286, 3, !dbg !36
  %1291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1212, float %1213, float %1214, float %1215, i32 %881, i32 %882, i32 %883, i32 %884, i32 %1036, i32 %1037) #1, !dbg !36
  %1292 = extractvalue { float, float, float, float } %1291, 0, !dbg !36
  %1293 = extractvalue { float, float, float, float } %1291, 1, !dbg !36
  %1294 = extractvalue { float, float, float, float } %1291, 2, !dbg !36
  %1295 = extractvalue { float, float, float, float } %1291, 3, !dbg !36
  %1296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1217, float %1218, float %1219, float %1220, i32 %697, i32 %698, i32 %699, i32 %700, i32 %942, i32 %943) #1, !dbg !36
  %1297 = extractvalue { float, float, float, float } %1296, 0, !dbg !36
  %1298 = extractvalue { float, float, float, float } %1296, 1, !dbg !36
  %1299 = extractvalue { float, float, float, float } %1296, 2, !dbg !36
  %1300 = extractvalue { float, float, float, float } %1296, 3, !dbg !36
  %1301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1222, float %1223, float %1224, float %1225, i32 %697, i32 %698, i32 %699, i32 %700, i32 %974, i32 %975) #1, !dbg !36
  %1302 = extractvalue { float, float, float, float } %1301, 0, !dbg !36
  %1303 = extractvalue { float, float, float, float } %1301, 1, !dbg !36
  %1304 = extractvalue { float, float, float, float } %1301, 2, !dbg !36
  %1305 = extractvalue { float, float, float, float } %1301, 3, !dbg !36
  %1306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1227, float %1228, float %1229, float %1230, i32 %697, i32 %698, i32 %699, i32 %700, i32 %1006, i32 %1007) #1, !dbg !36
  %1307 = extractvalue { float, float, float, float } %1306, 0, !dbg !36
  %1308 = extractvalue { float, float, float, float } %1306, 1, !dbg !36
  %1309 = extractvalue { float, float, float, float } %1306, 2, !dbg !36
  %1310 = extractvalue { float, float, float, float } %1306, 3, !dbg !36
  %1311 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1232, float %1233, float %1234, float %1235, i32 %697, i32 %698, i32 %699, i32 %700, i32 %1038, i32 %1039) #1, !dbg !36
  %1312 = extractvalue { float, float, float, float } %1311, 0, !dbg !36
  %1313 = extractvalue { float, float, float, float } %1311, 1, !dbg !36
  %1314 = extractvalue { float, float, float, float } %1311, 2, !dbg !36
  %1315 = extractvalue { float, float, float, float } %1311, 3, !dbg !36
  %1316 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1237, float %1238, float %1239, float %1240, i32 %761, i32 %762, i32 %763, i32 %764, i32 %942, i32 %943) #1, !dbg !36
  %1317 = extractvalue { float, float, float, float } %1316, 0, !dbg !36
  %1318 = extractvalue { float, float, float, float } %1316, 1, !dbg !36
  %1319 = extractvalue { float, float, float, float } %1316, 2, !dbg !36
  %1320 = extractvalue { float, float, float, float } %1316, 3, !dbg !36
  %1321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1242, float %1243, float %1244, float %1245, i32 %761, i32 %762, i32 %763, i32 %764, i32 %974, i32 %975) #1, !dbg !36
  %1322 = extractvalue { float, float, float, float } %1321, 0, !dbg !36
  %1323 = extractvalue { float, float, float, float } %1321, 1, !dbg !36
  %1324 = extractvalue { float, float, float, float } %1321, 2, !dbg !36
  %1325 = extractvalue { float, float, float, float } %1321, 3, !dbg !36
  %1326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1247, float %1248, float %1249, float %1250, i32 %761, i32 %762, i32 %763, i32 %764, i32 %1006, i32 %1007) #1, !dbg !36
  %1327 = extractvalue { float, float, float, float } %1326, 0, !dbg !36
  %1328 = extractvalue { float, float, float, float } %1326, 1, !dbg !36
  %1329 = extractvalue { float, float, float, float } %1326, 2, !dbg !36
  %1330 = extractvalue { float, float, float, float } %1326, 3, !dbg !36
  %1331 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1252, float %1253, float %1254, float %1255, i32 %761, i32 %762, i32 %763, i32 %764, i32 %1038, i32 %1039) #1, !dbg !36
  %1332 = extractvalue { float, float, float, float } %1331, 0, !dbg !36
  %1333 = extractvalue { float, float, float, float } %1331, 1, !dbg !36
  %1334 = extractvalue { float, float, float, float } %1331, 2, !dbg !36
  %1335 = extractvalue { float, float, float, float } %1331, 3, !dbg !36
  %1336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1257, float %1258, float %1259, float %1260, i32 %825, i32 %826, i32 %827, i32 %828, i32 %942, i32 %943) #1, !dbg !36
  %1337 = extractvalue { float, float, float, float } %1336, 0, !dbg !36
  %1338 = extractvalue { float, float, float, float } %1336, 1, !dbg !36
  %1339 = extractvalue { float, float, float, float } %1336, 2, !dbg !36
  %1340 = extractvalue { float, float, float, float } %1336, 3, !dbg !36
  %1341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1262, float %1263, float %1264, float %1265, i32 %825, i32 %826, i32 %827, i32 %828, i32 %974, i32 %975) #1, !dbg !36
  %1342 = extractvalue { float, float, float, float } %1341, 0, !dbg !36
  %1343 = extractvalue { float, float, float, float } %1341, 1, !dbg !36
  %1344 = extractvalue { float, float, float, float } %1341, 2, !dbg !36
  %1345 = extractvalue { float, float, float, float } %1341, 3, !dbg !36
  %1346 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1267, float %1268, float %1269, float %1270, i32 %825, i32 %826, i32 %827, i32 %828, i32 %1006, i32 %1007) #1, !dbg !36
  %1347 = extractvalue { float, float, float, float } %1346, 0, !dbg !36
  %1348 = extractvalue { float, float, float, float } %1346, 1, !dbg !36
  %1349 = extractvalue { float, float, float, float } %1346, 2, !dbg !36
  %1350 = extractvalue { float, float, float, float } %1346, 3, !dbg !36
  %1351 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1272, float %1273, float %1274, float %1275, i32 %825, i32 %826, i32 %827, i32 %828, i32 %1038, i32 %1039) #1, !dbg !36
  %1352 = extractvalue { float, float, float, float } %1351, 0, !dbg !36
  %1353 = extractvalue { float, float, float, float } %1351, 1, !dbg !36
  %1354 = extractvalue { float, float, float, float } %1351, 2, !dbg !36
  %1355 = extractvalue { float, float, float, float } %1351, 3, !dbg !36
  %1356 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1277, float %1278, float %1279, float %1280, i32 %889, i32 %890, i32 %891, i32 %892, i32 %942, i32 %943) #1, !dbg !36
  %1357 = extractvalue { float, float, float, float } %1356, 0, !dbg !36
  %1358 = extractvalue { float, float, float, float } %1356, 1, !dbg !36
  %1359 = extractvalue { float, float, float, float } %1356, 2, !dbg !36
  %1360 = extractvalue { float, float, float, float } %1356, 3, !dbg !36
  %1361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1282, float %1283, float %1284, float %1285, i32 %889, i32 %890, i32 %891, i32 %892, i32 %974, i32 %975) #1, !dbg !36
  %1362 = extractvalue { float, float, float, float } %1361, 0, !dbg !36
  %1363 = extractvalue { float, float, float, float } %1361, 1, !dbg !36
  %1364 = extractvalue { float, float, float, float } %1361, 2, !dbg !36
  %1365 = extractvalue { float, float, float, float } %1361, 3, !dbg !36
  %1366 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1287, float %1288, float %1289, float %1290, i32 %889, i32 %890, i32 %891, i32 %892, i32 %1006, i32 %1007) #1, !dbg !36
  %1367 = extractvalue { float, float, float, float } %1366, 0, !dbg !36
  %1368 = extractvalue { float, float, float, float } %1366, 1, !dbg !36
  %1369 = extractvalue { float, float, float, float } %1366, 2, !dbg !36
  %1370 = extractvalue { float, float, float, float } %1366, 3, !dbg !36
  %1371 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1292, float %1293, float %1294, float %1295, i32 %889, i32 %890, i32 %891, i32 %892, i32 %1038, i32 %1039) #1, !dbg !36
  %1372 = extractvalue { float, float, float, float } %1371, 0, !dbg !36
  %1373 = extractvalue { float, float, float, float } %1371, 1, !dbg !36
  %1374 = extractvalue { float, float, float, float } %1371, 2, !dbg !36
  %1375 = extractvalue { float, float, float, float } %1371, 3, !dbg !36
  %1376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1297, float %1298, float %1299, float %1300, i32 %705, i32 %706, i32 %707, i32 %708, i32 %948, i32 %949) #1, !dbg !36
  %1377 = extractvalue { float, float, float, float } %1376, 0, !dbg !36
  %1378 = extractvalue { float, float, float, float } %1376, 1, !dbg !36
  %1379 = extractvalue { float, float, float, float } %1376, 2, !dbg !36
  %1380 = extractvalue { float, float, float, float } %1376, 3, !dbg !36
  %1381 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1302, float %1303, float %1304, float %1305, i32 %705, i32 %706, i32 %707, i32 %708, i32 %980, i32 %981) #1, !dbg !36
  %1382 = extractvalue { float, float, float, float } %1381, 0, !dbg !36
  %1383 = extractvalue { float, float, float, float } %1381, 1, !dbg !36
  %1384 = extractvalue { float, float, float, float } %1381, 2, !dbg !36
  %1385 = extractvalue { float, float, float, float } %1381, 3, !dbg !36
  %1386 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1307, float %1308, float %1309, float %1310, i32 %705, i32 %706, i32 %707, i32 %708, i32 %1012, i32 %1013) #1, !dbg !36
  %1387 = extractvalue { float, float, float, float } %1386, 0, !dbg !36
  %1388 = extractvalue { float, float, float, float } %1386, 1, !dbg !36
  %1389 = extractvalue { float, float, float, float } %1386, 2, !dbg !36
  %1390 = extractvalue { float, float, float, float } %1386, 3, !dbg !36
  %1391 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1312, float %1313, float %1314, float %1315, i32 %705, i32 %706, i32 %707, i32 %708, i32 %1044, i32 %1045) #1, !dbg !36
  %1392 = extractvalue { float, float, float, float } %1391, 0, !dbg !36
  %1393 = extractvalue { float, float, float, float } %1391, 1, !dbg !36
  %1394 = extractvalue { float, float, float, float } %1391, 2, !dbg !36
  %1395 = extractvalue { float, float, float, float } %1391, 3, !dbg !36
  %1396 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1317, float %1318, float %1319, float %1320, i32 %769, i32 %770, i32 %771, i32 %772, i32 %948, i32 %949) #1, !dbg !36
  %1397 = extractvalue { float, float, float, float } %1396, 0, !dbg !36
  %1398 = extractvalue { float, float, float, float } %1396, 1, !dbg !36
  %1399 = extractvalue { float, float, float, float } %1396, 2, !dbg !36
  %1400 = extractvalue { float, float, float, float } %1396, 3, !dbg !36
  %1401 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1322, float %1323, float %1324, float %1325, i32 %769, i32 %770, i32 %771, i32 %772, i32 %980, i32 %981) #1, !dbg !36
  %1402 = extractvalue { float, float, float, float } %1401, 0, !dbg !36
  %1403 = extractvalue { float, float, float, float } %1401, 1, !dbg !36
  %1404 = extractvalue { float, float, float, float } %1401, 2, !dbg !36
  %1405 = extractvalue { float, float, float, float } %1401, 3, !dbg !36
  %1406 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1327, float %1328, float %1329, float %1330, i32 %769, i32 %770, i32 %771, i32 %772, i32 %1012, i32 %1013) #1, !dbg !36
  %1407 = extractvalue { float, float, float, float } %1406, 0, !dbg !36
  %1408 = extractvalue { float, float, float, float } %1406, 1, !dbg !36
  %1409 = extractvalue { float, float, float, float } %1406, 2, !dbg !36
  %1410 = extractvalue { float, float, float, float } %1406, 3, !dbg !36
  %1411 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1332, float %1333, float %1334, float %1335, i32 %769, i32 %770, i32 %771, i32 %772, i32 %1044, i32 %1045) #1, !dbg !36
  %1412 = extractvalue { float, float, float, float } %1411, 0, !dbg !36
  %1413 = extractvalue { float, float, float, float } %1411, 1, !dbg !36
  %1414 = extractvalue { float, float, float, float } %1411, 2, !dbg !36
  %1415 = extractvalue { float, float, float, float } %1411, 3, !dbg !36
  %1416 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1337, float %1338, float %1339, float %1340, i32 %833, i32 %834, i32 %835, i32 %836, i32 %948, i32 %949) #1, !dbg !36
  %1417 = extractvalue { float, float, float, float } %1416, 0, !dbg !36
  %1418 = extractvalue { float, float, float, float } %1416, 1, !dbg !36
  %1419 = extractvalue { float, float, float, float } %1416, 2, !dbg !36
  %1420 = extractvalue { float, float, float, float } %1416, 3, !dbg !36
  %1421 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1342, float %1343, float %1344, float %1345, i32 %833, i32 %834, i32 %835, i32 %836, i32 %980, i32 %981) #1, !dbg !36
  %1422 = extractvalue { float, float, float, float } %1421, 0, !dbg !36
  %1423 = extractvalue { float, float, float, float } %1421, 1, !dbg !36
  %1424 = extractvalue { float, float, float, float } %1421, 2, !dbg !36
  %1425 = extractvalue { float, float, float, float } %1421, 3, !dbg !36
  %1426 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1347, float %1348, float %1349, float %1350, i32 %833, i32 %834, i32 %835, i32 %836, i32 %1012, i32 %1013) #1, !dbg !36
  %1427 = extractvalue { float, float, float, float } %1426, 0, !dbg !36
  %1428 = extractvalue { float, float, float, float } %1426, 1, !dbg !36
  %1429 = extractvalue { float, float, float, float } %1426, 2, !dbg !36
  %1430 = extractvalue { float, float, float, float } %1426, 3, !dbg !36
  %1431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1352, float %1353, float %1354, float %1355, i32 %833, i32 %834, i32 %835, i32 %836, i32 %1044, i32 %1045) #1, !dbg !36
  %1432 = extractvalue { float, float, float, float } %1431, 0, !dbg !36
  %1433 = extractvalue { float, float, float, float } %1431, 1, !dbg !36
  %1434 = extractvalue { float, float, float, float } %1431, 2, !dbg !36
  %1435 = extractvalue { float, float, float, float } %1431, 3, !dbg !36
  %1436 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1357, float %1358, float %1359, float %1360, i32 %897, i32 %898, i32 %899, i32 %900, i32 %948, i32 %949) #1, !dbg !36
  %1437 = extractvalue { float, float, float, float } %1436, 0, !dbg !36
  %1438 = extractvalue { float, float, float, float } %1436, 1, !dbg !36
  %1439 = extractvalue { float, float, float, float } %1436, 2, !dbg !36
  %1440 = extractvalue { float, float, float, float } %1436, 3, !dbg !36
  %1441 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1362, float %1363, float %1364, float %1365, i32 %897, i32 %898, i32 %899, i32 %900, i32 %980, i32 %981) #1, !dbg !36
  %1442 = extractvalue { float, float, float, float } %1441, 0, !dbg !36
  %1443 = extractvalue { float, float, float, float } %1441, 1, !dbg !36
  %1444 = extractvalue { float, float, float, float } %1441, 2, !dbg !36
  %1445 = extractvalue { float, float, float, float } %1441, 3, !dbg !36
  %1446 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1367, float %1368, float %1369, float %1370, i32 %897, i32 %898, i32 %899, i32 %900, i32 %1012, i32 %1013) #1, !dbg !36
  %1447 = extractvalue { float, float, float, float } %1446, 0, !dbg !36
  %1448 = extractvalue { float, float, float, float } %1446, 1, !dbg !36
  %1449 = extractvalue { float, float, float, float } %1446, 2, !dbg !36
  %1450 = extractvalue { float, float, float, float } %1446, 3, !dbg !36
  %1451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1372, float %1373, float %1374, float %1375, i32 %897, i32 %898, i32 %899, i32 %900, i32 %1044, i32 %1045) #1, !dbg !36
  %1452 = extractvalue { float, float, float, float } %1451, 0, !dbg !36
  %1453 = extractvalue { float, float, float, float } %1451, 1, !dbg !36
  %1454 = extractvalue { float, float, float, float } %1451, 2, !dbg !36
  %1455 = extractvalue { float, float, float, float } %1451, 3, !dbg !36
  %1456 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1377, float %1378, float %1379, float %1380, i32 %713, i32 %714, i32 %715, i32 %716, i32 %950, i32 %951) #1, !dbg !36
  %1457 = extractvalue { float, float, float, float } %1456, 0, !dbg !36
  %1458 = extractvalue { float, float, float, float } %1456, 1, !dbg !36
  %1459 = extractvalue { float, float, float, float } %1456, 2, !dbg !36
  %1460 = extractvalue { float, float, float, float } %1456, 3, !dbg !36
  %1461 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1382, float %1383, float %1384, float %1385, i32 %713, i32 %714, i32 %715, i32 %716, i32 %982, i32 %983) #1, !dbg !36
  %1462 = extractvalue { float, float, float, float } %1461, 0, !dbg !36
  %1463 = extractvalue { float, float, float, float } %1461, 1, !dbg !36
  %1464 = extractvalue { float, float, float, float } %1461, 2, !dbg !36
  %1465 = extractvalue { float, float, float, float } %1461, 3, !dbg !36
  %1466 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1387, float %1388, float %1389, float %1390, i32 %713, i32 %714, i32 %715, i32 %716, i32 %1014, i32 %1015) #1, !dbg !36
  %1467 = extractvalue { float, float, float, float } %1466, 0, !dbg !36
  %1468 = extractvalue { float, float, float, float } %1466, 1, !dbg !36
  %1469 = extractvalue { float, float, float, float } %1466, 2, !dbg !36
  %1470 = extractvalue { float, float, float, float } %1466, 3, !dbg !36
  %1471 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1392, float %1393, float %1394, float %1395, i32 %713, i32 %714, i32 %715, i32 %716, i32 %1046, i32 %1047) #1, !dbg !36
  %1472 = extractvalue { float, float, float, float } %1471, 0, !dbg !36
  %1473 = extractvalue { float, float, float, float } %1471, 1, !dbg !36
  %1474 = extractvalue { float, float, float, float } %1471, 2, !dbg !36
  %1475 = extractvalue { float, float, float, float } %1471, 3, !dbg !36
  %1476 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1397, float %1398, float %1399, float %1400, i32 %777, i32 %778, i32 %779, i32 %780, i32 %950, i32 %951) #1, !dbg !36
  %1477 = extractvalue { float, float, float, float } %1476, 0, !dbg !36
  %1478 = extractvalue { float, float, float, float } %1476, 1, !dbg !36
  %1479 = extractvalue { float, float, float, float } %1476, 2, !dbg !36
  %1480 = extractvalue { float, float, float, float } %1476, 3, !dbg !36
  %1481 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1402, float %1403, float %1404, float %1405, i32 %777, i32 %778, i32 %779, i32 %780, i32 %982, i32 %983) #1, !dbg !36
  %1482 = extractvalue { float, float, float, float } %1481, 0, !dbg !36
  %1483 = extractvalue { float, float, float, float } %1481, 1, !dbg !36
  %1484 = extractvalue { float, float, float, float } %1481, 2, !dbg !36
  %1485 = extractvalue { float, float, float, float } %1481, 3, !dbg !36
  %1486 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1407, float %1408, float %1409, float %1410, i32 %777, i32 %778, i32 %779, i32 %780, i32 %1014, i32 %1015) #1, !dbg !36
  %1487 = extractvalue { float, float, float, float } %1486, 0, !dbg !36
  %1488 = extractvalue { float, float, float, float } %1486, 1, !dbg !36
  %1489 = extractvalue { float, float, float, float } %1486, 2, !dbg !36
  %1490 = extractvalue { float, float, float, float } %1486, 3, !dbg !36
  %1491 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1412, float %1413, float %1414, float %1415, i32 %777, i32 %778, i32 %779, i32 %780, i32 %1046, i32 %1047) #1, !dbg !36
  %1492 = extractvalue { float, float, float, float } %1491, 0, !dbg !36
  %1493 = extractvalue { float, float, float, float } %1491, 1, !dbg !36
  %1494 = extractvalue { float, float, float, float } %1491, 2, !dbg !36
  %1495 = extractvalue { float, float, float, float } %1491, 3, !dbg !36
  %1496 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1417, float %1418, float %1419, float %1420, i32 %841, i32 %842, i32 %843, i32 %844, i32 %950, i32 %951) #1, !dbg !36
  %1497 = extractvalue { float, float, float, float } %1496, 0, !dbg !36
  %1498 = extractvalue { float, float, float, float } %1496, 1, !dbg !36
  %1499 = extractvalue { float, float, float, float } %1496, 2, !dbg !36
  %1500 = extractvalue { float, float, float, float } %1496, 3, !dbg !36
  %1501 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1422, float %1423, float %1424, float %1425, i32 %841, i32 %842, i32 %843, i32 %844, i32 %982, i32 %983) #1, !dbg !36
  %1502 = extractvalue { float, float, float, float } %1501, 0, !dbg !36
  %1503 = extractvalue { float, float, float, float } %1501, 1, !dbg !36
  %1504 = extractvalue { float, float, float, float } %1501, 2, !dbg !36
  %1505 = extractvalue { float, float, float, float } %1501, 3, !dbg !36
  %1506 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1427, float %1428, float %1429, float %1430, i32 %841, i32 %842, i32 %843, i32 %844, i32 %1014, i32 %1015) #1, !dbg !36
  %1507 = extractvalue { float, float, float, float } %1506, 0, !dbg !36
  %1508 = extractvalue { float, float, float, float } %1506, 1, !dbg !36
  %1509 = extractvalue { float, float, float, float } %1506, 2, !dbg !36
  %1510 = extractvalue { float, float, float, float } %1506, 3, !dbg !36
  %1511 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1432, float %1433, float %1434, float %1435, i32 %841, i32 %842, i32 %843, i32 %844, i32 %1046, i32 %1047) #1, !dbg !36
  %1512 = extractvalue { float, float, float, float } %1511, 0, !dbg !36
  %1513 = extractvalue { float, float, float, float } %1511, 1, !dbg !36
  %1514 = extractvalue { float, float, float, float } %1511, 2, !dbg !36
  %1515 = extractvalue { float, float, float, float } %1511, 3, !dbg !36
  %1516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1437, float %1438, float %1439, float %1440, i32 %905, i32 %906, i32 %907, i32 %908, i32 %950, i32 %951) #1, !dbg !36
  %1517 = extractvalue { float, float, float, float } %1516, 0, !dbg !36
  %1518 = extractvalue { float, float, float, float } %1516, 1, !dbg !36
  %1519 = extractvalue { float, float, float, float } %1516, 2, !dbg !36
  %1520 = extractvalue { float, float, float, float } %1516, 3, !dbg !36
  %1521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1442, float %1443, float %1444, float %1445, i32 %905, i32 %906, i32 %907, i32 %908, i32 %982, i32 %983) #1, !dbg !36
  %1522 = extractvalue { float, float, float, float } %1521, 0, !dbg !36
  %1523 = extractvalue { float, float, float, float } %1521, 1, !dbg !36
  %1524 = extractvalue { float, float, float, float } %1521, 2, !dbg !36
  %1525 = extractvalue { float, float, float, float } %1521, 3, !dbg !36
  %1526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1447, float %1448, float %1449, float %1450, i32 %905, i32 %906, i32 %907, i32 %908, i32 %1014, i32 %1015) #1, !dbg !36
  %1527 = extractvalue { float, float, float, float } %1526, 0, !dbg !36
  %1528 = extractvalue { float, float, float, float } %1526, 1, !dbg !36
  %1529 = extractvalue { float, float, float, float } %1526, 2, !dbg !36
  %1530 = extractvalue { float, float, float, float } %1526, 3, !dbg !36
  %1531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1452, float %1453, float %1454, float %1455, i32 %905, i32 %906, i32 %907, i32 %908, i32 %1046, i32 %1047) #1, !dbg !36
  %1532 = extractvalue { float, float, float, float } %1531, 0, !dbg !36
  %1533 = extractvalue { float, float, float, float } %1531, 1, !dbg !36
  %1534 = extractvalue { float, float, float, float } %1531, 2, !dbg !36
  %1535 = extractvalue { float, float, float, float } %1531, 3, !dbg !36
  %1536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1457, float %1458, float %1459, float %1460, i32 %721, i32 %722, i32 %723, i32 %724, i32 %956, i32 %957) #1, !dbg !36
  %1537 = extractvalue { float, float, float, float } %1536, 0, !dbg !36
  %1538 = extractvalue { float, float, float, float } %1536, 1, !dbg !36
  %1539 = extractvalue { float, float, float, float } %1536, 2, !dbg !36
  %1540 = extractvalue { float, float, float, float } %1536, 3, !dbg !36
  %1541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1462, float %1463, float %1464, float %1465, i32 %721, i32 %722, i32 %723, i32 %724, i32 %988, i32 %989) #1, !dbg !36
  %1542 = extractvalue { float, float, float, float } %1541, 0, !dbg !36
  %1543 = extractvalue { float, float, float, float } %1541, 1, !dbg !36
  %1544 = extractvalue { float, float, float, float } %1541, 2, !dbg !36
  %1545 = extractvalue { float, float, float, float } %1541, 3, !dbg !36
  %1546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1467, float %1468, float %1469, float %1470, i32 %721, i32 %722, i32 %723, i32 %724, i32 %1020, i32 %1021) #1, !dbg !36
  %1547 = extractvalue { float, float, float, float } %1546, 0, !dbg !36
  %1548 = extractvalue { float, float, float, float } %1546, 1, !dbg !36
  %1549 = extractvalue { float, float, float, float } %1546, 2, !dbg !36
  %1550 = extractvalue { float, float, float, float } %1546, 3, !dbg !36
  %1551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1472, float %1473, float %1474, float %1475, i32 %721, i32 %722, i32 %723, i32 %724, i32 %1052, i32 %1053) #1, !dbg !36
  %1552 = extractvalue { float, float, float, float } %1551, 0, !dbg !36
  %1553 = extractvalue { float, float, float, float } %1551, 1, !dbg !36
  %1554 = extractvalue { float, float, float, float } %1551, 2, !dbg !36
  %1555 = extractvalue { float, float, float, float } %1551, 3, !dbg !36
  %1556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1477, float %1478, float %1479, float %1480, i32 %785, i32 %786, i32 %787, i32 %788, i32 %956, i32 %957) #1, !dbg !36
  %1557 = extractvalue { float, float, float, float } %1556, 0, !dbg !36
  %1558 = extractvalue { float, float, float, float } %1556, 1, !dbg !36
  %1559 = extractvalue { float, float, float, float } %1556, 2, !dbg !36
  %1560 = extractvalue { float, float, float, float } %1556, 3, !dbg !36
  %1561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1482, float %1483, float %1484, float %1485, i32 %785, i32 %786, i32 %787, i32 %788, i32 %988, i32 %989) #1, !dbg !36
  %1562 = extractvalue { float, float, float, float } %1561, 0, !dbg !36
  %1563 = extractvalue { float, float, float, float } %1561, 1, !dbg !36
  %1564 = extractvalue { float, float, float, float } %1561, 2, !dbg !36
  %1565 = extractvalue { float, float, float, float } %1561, 3, !dbg !36
  %1566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1487, float %1488, float %1489, float %1490, i32 %785, i32 %786, i32 %787, i32 %788, i32 %1020, i32 %1021) #1, !dbg !36
  %1567 = extractvalue { float, float, float, float } %1566, 0, !dbg !36
  %1568 = extractvalue { float, float, float, float } %1566, 1, !dbg !36
  %1569 = extractvalue { float, float, float, float } %1566, 2, !dbg !36
  %1570 = extractvalue { float, float, float, float } %1566, 3, !dbg !36
  %1571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1492, float %1493, float %1494, float %1495, i32 %785, i32 %786, i32 %787, i32 %788, i32 %1052, i32 %1053) #1, !dbg !36
  %1572 = extractvalue { float, float, float, float } %1571, 0, !dbg !36
  %1573 = extractvalue { float, float, float, float } %1571, 1, !dbg !36
  %1574 = extractvalue { float, float, float, float } %1571, 2, !dbg !36
  %1575 = extractvalue { float, float, float, float } %1571, 3, !dbg !36
  %1576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1497, float %1498, float %1499, float %1500, i32 %849, i32 %850, i32 %851, i32 %852, i32 %956, i32 %957) #1, !dbg !36
  %1577 = extractvalue { float, float, float, float } %1576, 0, !dbg !36
  %1578 = extractvalue { float, float, float, float } %1576, 1, !dbg !36
  %1579 = extractvalue { float, float, float, float } %1576, 2, !dbg !36
  %1580 = extractvalue { float, float, float, float } %1576, 3, !dbg !36
  %1581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1502, float %1503, float %1504, float %1505, i32 %849, i32 %850, i32 %851, i32 %852, i32 %988, i32 %989) #1, !dbg !36
  %1582 = extractvalue { float, float, float, float } %1581, 0, !dbg !36
  %1583 = extractvalue { float, float, float, float } %1581, 1, !dbg !36
  %1584 = extractvalue { float, float, float, float } %1581, 2, !dbg !36
  %1585 = extractvalue { float, float, float, float } %1581, 3, !dbg !36
  %1586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1507, float %1508, float %1509, float %1510, i32 %849, i32 %850, i32 %851, i32 %852, i32 %1020, i32 %1021) #1, !dbg !36
  %1587 = extractvalue { float, float, float, float } %1586, 0, !dbg !36
  %1588 = extractvalue { float, float, float, float } %1586, 1, !dbg !36
  %1589 = extractvalue { float, float, float, float } %1586, 2, !dbg !36
  %1590 = extractvalue { float, float, float, float } %1586, 3, !dbg !36
  %1591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1512, float %1513, float %1514, float %1515, i32 %849, i32 %850, i32 %851, i32 %852, i32 %1052, i32 %1053) #1, !dbg !36
  %1592 = extractvalue { float, float, float, float } %1591, 0, !dbg !36
  %1593 = extractvalue { float, float, float, float } %1591, 1, !dbg !36
  %1594 = extractvalue { float, float, float, float } %1591, 2, !dbg !36
  %1595 = extractvalue { float, float, float, float } %1591, 3, !dbg !36
  %1596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1517, float %1518, float %1519, float %1520, i32 %913, i32 %914, i32 %915, i32 %916, i32 %956, i32 %957) #1, !dbg !36
  %1597 = extractvalue { float, float, float, float } %1596, 0, !dbg !36
  %1598 = extractvalue { float, float, float, float } %1596, 1, !dbg !36
  %1599 = extractvalue { float, float, float, float } %1596, 2, !dbg !36
  %1600 = extractvalue { float, float, float, float } %1596, 3, !dbg !36
  %1601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1522, float %1523, float %1524, float %1525, i32 %913, i32 %914, i32 %915, i32 %916, i32 %988, i32 %989) #1, !dbg !36
  %1602 = extractvalue { float, float, float, float } %1601, 0, !dbg !36
  %1603 = extractvalue { float, float, float, float } %1601, 1, !dbg !36
  %1604 = extractvalue { float, float, float, float } %1601, 2, !dbg !36
  %1605 = extractvalue { float, float, float, float } %1601, 3, !dbg !36
  %1606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1527, float %1528, float %1529, float %1530, i32 %913, i32 %914, i32 %915, i32 %916, i32 %1020, i32 %1021) #1, !dbg !36
  %1607 = extractvalue { float, float, float, float } %1606, 0, !dbg !36
  %1608 = extractvalue { float, float, float, float } %1606, 1, !dbg !36
  %1609 = extractvalue { float, float, float, float } %1606, 2, !dbg !36
  %1610 = extractvalue { float, float, float, float } %1606, 3, !dbg !36
  %1611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1532, float %1533, float %1534, float %1535, i32 %913, i32 %914, i32 %915, i32 %916, i32 %1052, i32 %1053) #1, !dbg !36
  %1612 = extractvalue { float, float, float, float } %1611, 0, !dbg !36
  %1613 = extractvalue { float, float, float, float } %1611, 1, !dbg !36
  %1614 = extractvalue { float, float, float, float } %1611, 2, !dbg !36
  %1615 = extractvalue { float, float, float, float } %1611, 3, !dbg !36
  %1616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1537, float %1538, float %1539, float %1540, i32 %729, i32 %730, i32 %731, i32 %732, i32 %958, i32 %959) #1, !dbg !36
  %1617 = extractvalue { float, float, float, float } %1616, 0, !dbg !36
  %1618 = extractvalue { float, float, float, float } %1616, 1, !dbg !36
  %1619 = extractvalue { float, float, float, float } %1616, 2, !dbg !36
  %1620 = extractvalue { float, float, float, float } %1616, 3, !dbg !36
  %1621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1542, float %1543, float %1544, float %1545, i32 %729, i32 %730, i32 %731, i32 %732, i32 %990, i32 %991) #1, !dbg !36
  %1622 = extractvalue { float, float, float, float } %1621, 0, !dbg !36
  %1623 = extractvalue { float, float, float, float } %1621, 1, !dbg !36
  %1624 = extractvalue { float, float, float, float } %1621, 2, !dbg !36
  %1625 = extractvalue { float, float, float, float } %1621, 3, !dbg !36
  %1626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1547, float %1548, float %1549, float %1550, i32 %729, i32 %730, i32 %731, i32 %732, i32 %1022, i32 %1023) #1, !dbg !36
  %1627 = extractvalue { float, float, float, float } %1626, 0, !dbg !36
  %1628 = extractvalue { float, float, float, float } %1626, 1, !dbg !36
  %1629 = extractvalue { float, float, float, float } %1626, 2, !dbg !36
  %1630 = extractvalue { float, float, float, float } %1626, 3, !dbg !36
  %1631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1552, float %1553, float %1554, float %1555, i32 %729, i32 %730, i32 %731, i32 %732, i32 %1054, i32 %1055) #1, !dbg !36
  %1632 = extractvalue { float, float, float, float } %1631, 0, !dbg !36
  %1633 = extractvalue { float, float, float, float } %1631, 1, !dbg !36
  %1634 = extractvalue { float, float, float, float } %1631, 2, !dbg !36
  %1635 = extractvalue { float, float, float, float } %1631, 3, !dbg !36
  %1636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1557, float %1558, float %1559, float %1560, i32 %793, i32 %794, i32 %795, i32 %796, i32 %958, i32 %959) #1, !dbg !36
  %1637 = extractvalue { float, float, float, float } %1636, 0, !dbg !36
  %1638 = extractvalue { float, float, float, float } %1636, 1, !dbg !36
  %1639 = extractvalue { float, float, float, float } %1636, 2, !dbg !36
  %1640 = extractvalue { float, float, float, float } %1636, 3, !dbg !36
  %1641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1562, float %1563, float %1564, float %1565, i32 %793, i32 %794, i32 %795, i32 %796, i32 %990, i32 %991) #1, !dbg !36
  %1642 = extractvalue { float, float, float, float } %1641, 0, !dbg !36
  %1643 = extractvalue { float, float, float, float } %1641, 1, !dbg !36
  %1644 = extractvalue { float, float, float, float } %1641, 2, !dbg !36
  %1645 = extractvalue { float, float, float, float } %1641, 3, !dbg !36
  %1646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1567, float %1568, float %1569, float %1570, i32 %793, i32 %794, i32 %795, i32 %796, i32 %1022, i32 %1023) #1, !dbg !36
  %1647 = extractvalue { float, float, float, float } %1646, 0, !dbg !36
  %1648 = extractvalue { float, float, float, float } %1646, 1, !dbg !36
  %1649 = extractvalue { float, float, float, float } %1646, 2, !dbg !36
  %1650 = extractvalue { float, float, float, float } %1646, 3, !dbg !36
  %1651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1572, float %1573, float %1574, float %1575, i32 %793, i32 %794, i32 %795, i32 %796, i32 %1054, i32 %1055) #1, !dbg !36
  %1652 = extractvalue { float, float, float, float } %1651, 0, !dbg !36
  %1653 = extractvalue { float, float, float, float } %1651, 1, !dbg !36
  %1654 = extractvalue { float, float, float, float } %1651, 2, !dbg !36
  %1655 = extractvalue { float, float, float, float } %1651, 3, !dbg !36
  %1656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1577, float %1578, float %1579, float %1580, i32 %857, i32 %858, i32 %859, i32 %860, i32 %958, i32 %959) #1, !dbg !36
  %1657 = extractvalue { float, float, float, float } %1656, 0, !dbg !36
  %1658 = extractvalue { float, float, float, float } %1656, 1, !dbg !36
  %1659 = extractvalue { float, float, float, float } %1656, 2, !dbg !36
  %1660 = extractvalue { float, float, float, float } %1656, 3, !dbg !36
  %1661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1582, float %1583, float %1584, float %1585, i32 %857, i32 %858, i32 %859, i32 %860, i32 %990, i32 %991) #1, !dbg !36
  %1662 = extractvalue { float, float, float, float } %1661, 0, !dbg !36
  %1663 = extractvalue { float, float, float, float } %1661, 1, !dbg !36
  %1664 = extractvalue { float, float, float, float } %1661, 2, !dbg !36
  %1665 = extractvalue { float, float, float, float } %1661, 3, !dbg !36
  %1666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1587, float %1588, float %1589, float %1590, i32 %857, i32 %858, i32 %859, i32 %860, i32 %1022, i32 %1023) #1, !dbg !36
  %1667 = extractvalue { float, float, float, float } %1666, 0, !dbg !36
  %1668 = extractvalue { float, float, float, float } %1666, 1, !dbg !36
  %1669 = extractvalue { float, float, float, float } %1666, 2, !dbg !36
  %1670 = extractvalue { float, float, float, float } %1666, 3, !dbg !36
  %1671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1592, float %1593, float %1594, float %1595, i32 %857, i32 %858, i32 %859, i32 %860, i32 %1054, i32 %1055) #1, !dbg !36
  %1672 = extractvalue { float, float, float, float } %1671, 0, !dbg !36
  %1673 = extractvalue { float, float, float, float } %1671, 1, !dbg !36
  %1674 = extractvalue { float, float, float, float } %1671, 2, !dbg !36
  %1675 = extractvalue { float, float, float, float } %1671, 3, !dbg !36
  %1676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1597, float %1598, float %1599, float %1600, i32 %921, i32 %922, i32 %923, i32 %924, i32 %958, i32 %959) #1, !dbg !36
  %1677 = extractvalue { float, float, float, float } %1676, 0, !dbg !36
  %1678 = extractvalue { float, float, float, float } %1676, 1, !dbg !36
  %1679 = extractvalue { float, float, float, float } %1676, 2, !dbg !36
  %1680 = extractvalue { float, float, float, float } %1676, 3, !dbg !36
  %1681 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1602, float %1603, float %1604, float %1605, i32 %921, i32 %922, i32 %923, i32 %924, i32 %990, i32 %991) #1, !dbg !36
  %1682 = extractvalue { float, float, float, float } %1681, 0, !dbg !36
  %1683 = extractvalue { float, float, float, float } %1681, 1, !dbg !36
  %1684 = extractvalue { float, float, float, float } %1681, 2, !dbg !36
  %1685 = extractvalue { float, float, float, float } %1681, 3, !dbg !36
  %1686 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1607, float %1608, float %1609, float %1610, i32 %921, i32 %922, i32 %923, i32 %924, i32 %1022, i32 %1023) #1, !dbg !36
  %1687 = extractvalue { float, float, float, float } %1686, 0, !dbg !36
  %1688 = extractvalue { float, float, float, float } %1686, 1, !dbg !36
  %1689 = extractvalue { float, float, float, float } %1686, 2, !dbg !36
  %1690 = extractvalue { float, float, float, float } %1686, 3, !dbg !36
  %1691 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1612, float %1613, float %1614, float %1615, i32 %921, i32 %922, i32 %923, i32 %924, i32 %1054, i32 %1055) #1, !dbg !36
  %1692 = extractvalue { float, float, float, float } %1691, 0, !dbg !36
  %1693 = extractvalue { float, float, float, float } %1691, 1, !dbg !36
  %1694 = extractvalue { float, float, float, float } %1691, 2, !dbg !36
  %1695 = extractvalue { float, float, float, float } %1691, 3, !dbg !36
  %1696 = add i32 %597, 1, !dbg !35
  %1697 = icmp slt i32 %1696, 3, !dbg !35
  %1698 = select i1 %1697, i32 %1696, i32 0, !dbg !35
  %1699 = shl nuw nsw i64 %indvars.iv, 7, !dbg !37
  %1700 = add nuw nsw i64 %1699, %570
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %1700, !dbg !29
  %gep297 = getelementptr bfloat, ptr addrspace(1) %invariant.gep296, i64 %1700, !dbg !29
  %gep299 = getelementptr bfloat, ptr addrspace(1) %invariant.gep298, i64 %1700, !dbg !29
  %gep301 = getelementptr bfloat, ptr addrspace(1) %invariant.gep300, i64 %1700, !dbg !29
  %gep303 = getelementptr bfloat, ptr addrspace(1) %invariant.gep302, i64 %1700, !dbg !29
  %gep305 = getelementptr bfloat, ptr addrspace(1) %invariant.gep304, i64 %1700, !dbg !29
  %gep307 = getelementptr bfloat, ptr addrspace(1) %invariant.gep306, i64 %1700, !dbg !29
  %gep309 = getelementptr bfloat, ptr addrspace(1) %invariant.gep308, i64 %1700, !dbg !29
  %1701 = shl i32 %1698, 13, !dbg !30
  %1702 = sext i32 %1701 to i64, !dbg !30
  %1703 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %1702, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %1704 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %138, !dbg !30
  %1705 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %141, !dbg !30
  %1706 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %144, !dbg !30
  %1707 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %147, !dbg !30
  %1708 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %150, !dbg !30
  %1709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %153, !dbg !30
  %1710 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %156, !dbg !30
  %1711 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1703, i64 %159, !dbg !30
  %1712 = select i1 %662, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1704, ptr addrspace(1) %gep, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1705, ptr addrspace(1) %gep297, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1706, ptr addrspace(1) %gep299, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1707, ptr addrspace(1) %gep301, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1708, ptr addrspace(1) %gep303, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1709, ptr addrspace(1) %gep305, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1710, ptr addrspace(1) %gep307, i32 %1712) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1711, ptr addrspace(1) %gep309, i32 %1712) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep311 = getelementptr bfloat, ptr addrspace(1) %invariant.gep310, i64 %1700, !dbg !32
  %gep313 = getelementptr bfloat, ptr addrspace(1) %invariant.gep312, i64 %1700, !dbg !32
  %gep315 = getelementptr bfloat, ptr addrspace(1) %invariant.gep314, i64 %1700, !dbg !32
  %gep317 = getelementptr bfloat, ptr addrspace(1) %invariant.gep316, i64 %1700, !dbg !32
  %gep319 = getelementptr bfloat, ptr addrspace(1) %invariant.gep318, i64 %1700, !dbg !32
  %gep321 = getelementptr bfloat, ptr addrspace(1) %invariant.gep320, i64 %1700, !dbg !32
  %gep323 = getelementptr bfloat, ptr addrspace(1) %invariant.gep322, i64 %1700, !dbg !32
  %gep325 = getelementptr bfloat, ptr addrspace(1) %invariant.gep324, i64 %1700, !dbg !32
  %gep327 = getelementptr bfloat, ptr addrspace(1) %invariant.gep326, i64 %1700, !dbg !32
  %gep329 = getelementptr bfloat, ptr addrspace(1) %invariant.gep328, i64 %1700, !dbg !32
  %gep331 = getelementptr bfloat, ptr addrspace(1) %invariant.gep330, i64 %1700, !dbg !32
  %gep333 = getelementptr bfloat, ptr addrspace(1) %invariant.gep332, i64 %1700, !dbg !32
  %gep335 = getelementptr bfloat, ptr addrspace(1) %invariant.gep334, i64 %1700, !dbg !32
  %gep337 = getelementptr bfloat, ptr addrspace(1) %invariant.gep336, i64 %1700, !dbg !32
  %gep339 = getelementptr bfloat, ptr addrspace(1) %invariant.gep338, i64 %1700, !dbg !32
  %gep341 = getelementptr bfloat, ptr addrspace(1) %invariant.gep340, i64 %1700, !dbg !32
  %1713 = shl i32 %1698, 14, !dbg !33
  %1714 = sext i32 %1713 to i64, !dbg !33
  %1715 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %1714, !dbg !33
  %1716 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %138, !dbg !33
  %1717 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %141, !dbg !33
  %1718 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %144, !dbg !33
  %1719 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %147, !dbg !33
  %1720 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %150, !dbg !33
  %1721 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %153, !dbg !33
  %1722 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %156, !dbg !33
  %1723 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %159, !dbg !33
  %1724 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %218, !dbg !33
  %1725 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %221, !dbg !33
  %1726 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %224, !dbg !33
  %1727 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %227, !dbg !33
  %1728 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %230, !dbg !33
  %1729 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %233, !dbg !33
  %1730 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %236, !dbg !33
  %1731 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1715, i64 %239, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1716, ptr addrspace(1) %gep311, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1717, ptr addrspace(1) %gep313, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1718, ptr addrspace(1) %gep315, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1719, ptr addrspace(1) %gep317, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1720, ptr addrspace(1) %gep319, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1721, ptr addrspace(1) %gep321, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1722, ptr addrspace(1) %gep323, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1723, ptr addrspace(1) %gep325, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1724, ptr addrspace(1) %gep327, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1725, ptr addrspace(1) %gep329, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1726, ptr addrspace(1) %gep331, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1727, ptr addrspace(1) %gep333, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1728, ptr addrspace(1) %gep335, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1729, ptr addrspace(1) %gep337, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1730, ptr addrspace(1) %gep339, i32 %1712) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1731, ptr addrspace(1) %gep341, i32 %1712) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !35
  br i1 %exitcond.not, label %1732, label %595, !dbg !35

1732:                                             ; preds = %595
  %1733 = or disjoint i32 %34, %43, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %1734 = icmp slt i32 %26, 77, !dbg !38
  %1735 = icmp slt i32 %27, 77, !dbg !38
  %1736 = icmp slt i32 %28, 77, !dbg !38
  %1737 = icmp slt i32 %29, 77, !dbg !38
  %1738 = icmp slt i32 %30, 77, !dbg !38
  %1739 = icmp slt i32 %31, 77, !dbg !38
  %1740 = icmp slt i32 %32, 77, !dbg !38
  %1741 = icmp slt i32 %33, 77, !dbg !38
  %1742 = icmp slt i32 %1733, 768, !dbg !39
  %1743 = and i1 %1734, %1742, !dbg !40
  %1744 = and i1 %1735, %1742, !dbg !40
  %1745 = and i1 %1736, %1742, !dbg !40
  %1746 = and i1 %1737, %1742, !dbg !40
  %1747 = and i1 %1738, %1742, !dbg !40
  %1748 = and i1 %1739, %1742, !dbg !40
  %1749 = and i1 %1740, %1742, !dbg !40
  %1750 = and i1 %1741, %1742, !dbg !40
  %1751 = mul i32 %26, 768, !dbg !41
  %1752 = mul i32 %27, 768, !dbg !41
  %1753 = mul i32 %28, 768, !dbg !41
  %1754 = mul i32 %29, 768, !dbg !41
  %1755 = mul i32 %30, 768, !dbg !41
  %1756 = mul i32 %31, 768, !dbg !41
  %1757 = mul i32 %32, 768, !dbg !41
  %1758 = mul i32 %33, 768, !dbg !41
  %1759 = add i32 %1751, %1733, !dbg !42
  %1760 = add i32 %1752, %1733, !dbg !42
  %1761 = add i32 %1753, %1733, !dbg !42
  %1762 = add i32 %1754, %1733, !dbg !42
  %1763 = add i32 %1755, %1733, !dbg !42
  %1764 = add i32 %1756, %1733, !dbg !42
  %1765 = add i32 %1757, %1733, !dbg !42
  %1766 = add i32 %1758, %1733, !dbg !42
  %1767 = sext i32 %1759 to i64, !dbg !43
  %1768 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1767, !dbg !43
  %1769 = sext i32 %1760 to i64, !dbg !43
  %1770 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1769, !dbg !43
  %1771 = sext i32 %1761 to i64, !dbg !43
  %1772 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1771, !dbg !43
  %1773 = sext i32 %1762 to i64, !dbg !43
  %1774 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1773, !dbg !43
  %1775 = sext i32 %1763 to i64, !dbg !43
  %1776 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1775, !dbg !43
  %1777 = sext i32 %1764 to i64, !dbg !43
  %1778 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1777, !dbg !43
  %1779 = sext i32 %1765 to i64, !dbg !43
  %1780 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1779, !dbg !43
  %1781 = sext i32 %1766 to i64, !dbg !43
  %1782 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1781, !dbg !43
  %1783 = fptrunc float %1617 to bfloat, !dbg !44
  %1784 = fptrunc float %1618 to bfloat, !dbg !44
  %1785 = fptrunc float %1619 to bfloat, !dbg !44
  %1786 = fptrunc float %1620 to bfloat, !dbg !44
  %1787 = fptrunc float %1622 to bfloat, !dbg !44
  %1788 = fptrunc float %1623 to bfloat, !dbg !44
  %1789 = fptrunc float %1624 to bfloat, !dbg !44
  %1790 = fptrunc float %1625 to bfloat, !dbg !44
  %1791 = fptrunc float %1627 to bfloat, !dbg !44
  %1792 = fptrunc float %1628 to bfloat, !dbg !44
  %1793 = fptrunc float %1629 to bfloat, !dbg !44
  %1794 = fptrunc float %1630 to bfloat, !dbg !44
  %1795 = fptrunc float %1632 to bfloat, !dbg !44
  %1796 = fptrunc float %1633 to bfloat, !dbg !44
  %1797 = fptrunc float %1634 to bfloat, !dbg !44
  %1798 = fptrunc float %1635 to bfloat, !dbg !44
  %1799 = fptrunc float %1637 to bfloat, !dbg !44
  %1800 = fptrunc float %1638 to bfloat, !dbg !44
  %1801 = fptrunc float %1639 to bfloat, !dbg !44
  %1802 = fptrunc float %1640 to bfloat, !dbg !44
  %1803 = fptrunc float %1642 to bfloat, !dbg !44
  %1804 = fptrunc float %1643 to bfloat, !dbg !44
  %1805 = fptrunc float %1644 to bfloat, !dbg !44
  %1806 = fptrunc float %1645 to bfloat, !dbg !44
  %1807 = fptrunc float %1647 to bfloat, !dbg !44
  %1808 = fptrunc float %1648 to bfloat, !dbg !44
  %1809 = fptrunc float %1649 to bfloat, !dbg !44
  %1810 = fptrunc float %1650 to bfloat, !dbg !44
  %1811 = fptrunc float %1652 to bfloat, !dbg !44
  %1812 = fptrunc float %1653 to bfloat, !dbg !44
  %1813 = fptrunc float %1654 to bfloat, !dbg !44
  %1814 = fptrunc float %1655 to bfloat, !dbg !44
  %1815 = fptrunc float %1657 to bfloat, !dbg !44
  %1816 = fptrunc float %1658 to bfloat, !dbg !44
  %1817 = fptrunc float %1659 to bfloat, !dbg !44
  %1818 = fptrunc float %1660 to bfloat, !dbg !44
  %1819 = fptrunc float %1662 to bfloat, !dbg !44
  %1820 = fptrunc float %1663 to bfloat, !dbg !44
  %1821 = fptrunc float %1664 to bfloat, !dbg !44
  %1822 = fptrunc float %1665 to bfloat, !dbg !44
  %1823 = fptrunc float %1667 to bfloat, !dbg !44
  %1824 = fptrunc float %1668 to bfloat, !dbg !44
  %1825 = fptrunc float %1669 to bfloat, !dbg !44
  %1826 = fptrunc float %1670 to bfloat, !dbg !44
  %1827 = fptrunc float %1672 to bfloat, !dbg !44
  %1828 = fptrunc float %1673 to bfloat, !dbg !44
  %1829 = fptrunc float %1674 to bfloat, !dbg !44
  %1830 = fptrunc float %1675 to bfloat, !dbg !44
  %1831 = fptrunc float %1677 to bfloat, !dbg !44
  %1832 = fptrunc float %1678 to bfloat, !dbg !44
  %1833 = fptrunc float %1679 to bfloat, !dbg !44
  %1834 = fptrunc float %1680 to bfloat, !dbg !44
  %1835 = fptrunc float %1682 to bfloat, !dbg !44
  %1836 = fptrunc float %1683 to bfloat, !dbg !44
  %1837 = fptrunc float %1684 to bfloat, !dbg !44
  %1838 = fptrunc float %1685 to bfloat, !dbg !44
  %1839 = fptrunc float %1687 to bfloat, !dbg !44
  %1840 = fptrunc float %1688 to bfloat, !dbg !44
  %1841 = fptrunc float %1689 to bfloat, !dbg !44
  %1842 = fptrunc float %1690 to bfloat, !dbg !44
  %1843 = fptrunc float %1692 to bfloat, !dbg !44
  %1844 = fptrunc float %1693 to bfloat, !dbg !44
  %1845 = fptrunc float %1694 to bfloat, !dbg !44
  %1846 = fptrunc float %1695 to bfloat, !dbg !44
  %1847 = shl i32 %15, 1, !dbg !44
  %1848 = and i32 %1847, 6, !dbg !44
  %1849 = shl i32 %15, 5, !dbg !44
  %1850 = and i32 %1849, 384, !dbg !44
  %1851 = or disjoint i32 %1850, %1848, !dbg !44
  %1852 = shl nuw nsw i32 %16, 5, !dbg !44
  %1853 = or disjoint i32 %1851, %1852, !dbg !44
  %1854 = and i32 %525, 24, !dbg !44
  %1855 = or disjoint i32 %1853, %1854, !dbg !44
  %1856 = and i32 %35, 1016, !dbg !44
  %1857 = lshr i32 %1853, 4, !dbg !44
  %1858 = add nuw nsw i32 %1857, %1855, !dbg !44
  %1859 = zext nneg i32 %1858 to i64, !dbg !44
  %1860 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1859, !dbg !44
  %1861 = bitcast bfloat %1783 to i16, !dbg !44
  %1862 = bitcast bfloat %1784 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1860, i16 %1861, i16 %1862, i1 true) #1, !dbg !44
  %1863 = or disjoint i32 %1855, 1024, !dbg !44
  %1864 = lshr i32 %1863, 4, !dbg !44
  %1865 = and i32 %1864, 268435448, !dbg !44
  %1866 = add nuw nsw i32 %1865, %1863, !dbg !44
  %1867 = zext nneg i32 %1866 to i64, !dbg !44
  %1868 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1867, !dbg !44
  %1869 = bitcast bfloat %1785 to i16, !dbg !44
  %1870 = bitcast bfloat %1786 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1868, i16 %1869, i16 %1870, i1 true) #1, !dbg !44
  %1871 = or disjoint i32 %1855, 32, !dbg !44
  %1872 = add nuw nsw i32 %1871, %1857, !dbg !44
  %1873 = zext nneg i32 %1872 to i64, !dbg !44
  %1874 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1873, !dbg !44
  %1875 = bitcast bfloat %1787 to i16, !dbg !44
  %1876 = bitcast bfloat %1788 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1874, i16 %1875, i16 %1876, i1 true) #1, !dbg !44
  %1877 = or disjoint i32 %1855, 1056, !dbg !44
  %1878 = lshr i32 %1877, 4, !dbg !44
  %1879 = and i32 %1878, 268435448, !dbg !44
  %1880 = add nuw nsw i32 %1879, %1877, !dbg !44
  %1881 = zext nneg i32 %1880 to i64, !dbg !44
  %1882 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1881, !dbg !44
  %1883 = bitcast bfloat %1789 to i16, !dbg !44
  %1884 = bitcast bfloat %1790 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1882, i16 %1883, i16 %1884, i1 true) #1, !dbg !44
  %1885 = or disjoint i32 %1855, 64, !dbg !44
  %1886 = add nuw nsw i32 %1885, %1857, !dbg !44
  %1887 = zext nneg i32 %1886 to i64, !dbg !44
  %1888 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1887, !dbg !44
  %1889 = bitcast bfloat %1791 to i16, !dbg !44
  %1890 = bitcast bfloat %1792 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1888, i16 %1889, i16 %1890, i1 true) #1, !dbg !44
  %1891 = or disjoint i32 %1855, 1088, !dbg !44
  %1892 = lshr i32 %1891, 4, !dbg !44
  %1893 = and i32 %1892, 268435448, !dbg !44
  %1894 = add nuw nsw i32 %1893, %1891, !dbg !44
  %1895 = zext nneg i32 %1894 to i64, !dbg !44
  %1896 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1895, !dbg !44
  %1897 = bitcast bfloat %1793 to i16, !dbg !44
  %1898 = bitcast bfloat %1794 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1896, i16 %1897, i16 %1898, i1 true) #1, !dbg !44
  %1899 = or disjoint i32 %1855, 96, !dbg !44
  %1900 = add nuw nsw i32 %1899, %1857, !dbg !44
  %1901 = zext nneg i32 %1900 to i64, !dbg !44
  %1902 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1901, !dbg !44
  %1903 = bitcast bfloat %1795 to i16, !dbg !44
  %1904 = bitcast bfloat %1796 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1902, i16 %1903, i16 %1904, i1 true) #1, !dbg !44
  %1905 = or disjoint i32 %1855, 1120, !dbg !44
  %1906 = lshr i32 %1905, 4, !dbg !44
  %1907 = and i32 %1906, 268435448, !dbg !44
  %1908 = add nuw nsw i32 %1907, %1905, !dbg !44
  %1909 = zext nneg i32 %1908 to i64, !dbg !44
  %1910 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1909, !dbg !44
  %1911 = bitcast bfloat %1797 to i16, !dbg !44
  %1912 = bitcast bfloat %1798 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1910, i16 %1911, i16 %1912, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1913 = lshr i32 %35, 4, !dbg !44
  %1914 = and i32 %1913, 56, !dbg !44
  %1915 = add nuw nsw i32 %1914, %1856, !dbg !44
  %1916 = zext nneg i32 %1915 to i64, !dbg !44
  %1917 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1916, !dbg !44
  %1918 = load <4 x i32>, ptr addrspace(3) %1917, align 16, !dbg !44
  %1919 = or disjoint i32 %1856, 1024, !dbg !44
  %1920 = lshr i32 %1919, 4, !dbg !44
  %1921 = and i32 %1920, 120, !dbg !44
  %1922 = add nuw nsw i32 %1921, %1919, !dbg !44
  %1923 = zext nneg i32 %1922 to i64, !dbg !44
  %1924 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %1923, !dbg !44
  %1925 = load <4 x i32>, ptr addrspace(3) %1924, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1926 = bitcast bfloat %1799 to i16, !dbg !44
  %1927 = bitcast bfloat %1800 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1860, i16 %1926, i16 %1927, i1 true) #1, !dbg !44
  %1928 = bitcast bfloat %1801 to i16, !dbg !44
  %1929 = bitcast bfloat %1802 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1868, i16 %1928, i16 %1929, i1 true) #1, !dbg !44
  %1930 = bitcast bfloat %1803 to i16, !dbg !44
  %1931 = bitcast bfloat %1804 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1874, i16 %1930, i16 %1931, i1 true) #1, !dbg !44
  %1932 = bitcast bfloat %1805 to i16, !dbg !44
  %1933 = bitcast bfloat %1806 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1882, i16 %1932, i16 %1933, i1 true) #1, !dbg !44
  %1934 = bitcast bfloat %1807 to i16, !dbg !44
  %1935 = bitcast bfloat %1808 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1888, i16 %1934, i16 %1935, i1 true) #1, !dbg !44
  %1936 = bitcast bfloat %1809 to i16, !dbg !44
  %1937 = bitcast bfloat %1810 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1896, i16 %1936, i16 %1937, i1 true) #1, !dbg !44
  %1938 = bitcast bfloat %1811 to i16, !dbg !44
  %1939 = bitcast bfloat %1812 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1902, i16 %1938, i16 %1939, i1 true) #1, !dbg !44
  %1940 = bitcast bfloat %1813 to i16, !dbg !44
  %1941 = bitcast bfloat %1814 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1910, i16 %1940, i16 %1941, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1942 = load <4 x i32>, ptr addrspace(3) %1917, align 16, !dbg !44
  %1943 = load <4 x i32>, ptr addrspace(3) %1924, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1944 = bitcast bfloat %1815 to i16, !dbg !44
  %1945 = bitcast bfloat %1816 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1860, i16 %1944, i16 %1945, i1 true) #1, !dbg !44
  %1946 = bitcast bfloat %1817 to i16, !dbg !44
  %1947 = bitcast bfloat %1818 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1868, i16 %1946, i16 %1947, i1 true) #1, !dbg !44
  %1948 = bitcast bfloat %1819 to i16, !dbg !44
  %1949 = bitcast bfloat %1820 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1874, i16 %1948, i16 %1949, i1 true) #1, !dbg !44
  %1950 = bitcast bfloat %1821 to i16, !dbg !44
  %1951 = bitcast bfloat %1822 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1882, i16 %1950, i16 %1951, i1 true) #1, !dbg !44
  %1952 = bitcast bfloat %1823 to i16, !dbg !44
  %1953 = bitcast bfloat %1824 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1888, i16 %1952, i16 %1953, i1 true) #1, !dbg !44
  %1954 = bitcast bfloat %1825 to i16, !dbg !44
  %1955 = bitcast bfloat %1826 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1896, i16 %1954, i16 %1955, i1 true) #1, !dbg !44
  %1956 = bitcast bfloat %1827 to i16, !dbg !44
  %1957 = bitcast bfloat %1828 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1902, i16 %1956, i16 %1957, i1 true) #1, !dbg !44
  %1958 = bitcast bfloat %1829 to i16, !dbg !44
  %1959 = bitcast bfloat %1830 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1910, i16 %1958, i16 %1959, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1960 = load <4 x i32>, ptr addrspace(3) %1917, align 16, !dbg !44
  %1961 = load <4 x i32>, ptr addrspace(3) %1924, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1962 = bitcast bfloat %1831 to i16, !dbg !44
  %1963 = bitcast bfloat %1832 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1860, i16 %1962, i16 %1963, i1 true) #1, !dbg !44
  %1964 = bitcast bfloat %1833 to i16, !dbg !44
  %1965 = bitcast bfloat %1834 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1868, i16 %1964, i16 %1965, i1 true) #1, !dbg !44
  %1966 = bitcast bfloat %1835 to i16, !dbg !44
  %1967 = bitcast bfloat %1836 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1874, i16 %1966, i16 %1967, i1 true) #1, !dbg !44
  %1968 = bitcast bfloat %1837 to i16, !dbg !44
  %1969 = bitcast bfloat %1838 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1882, i16 %1968, i16 %1969, i1 true) #1, !dbg !44
  %1970 = bitcast bfloat %1839 to i16, !dbg !44
  %1971 = bitcast bfloat %1840 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1888, i16 %1970, i16 %1971, i1 true) #1, !dbg !44
  %1972 = bitcast bfloat %1841 to i16, !dbg !44
  %1973 = bitcast bfloat %1842 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1896, i16 %1972, i16 %1973, i1 true) #1, !dbg !44
  %1974 = bitcast bfloat %1843 to i16, !dbg !44
  %1975 = bitcast bfloat %1844 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1902, i16 %1974, i16 %1975, i1 true) #1, !dbg !44
  %1976 = bitcast bfloat %1845 to i16, !dbg !44
  %1977 = bitcast bfloat %1846 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1910, i16 %1976, i16 %1977, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1978 = load <4 x i32>, ptr addrspace(3) %1917, align 16, !dbg !44
  %1979 = load <4 x i32>, ptr addrspace(3) %1924, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %1918, i64 0, !dbg !44
  %.extract97 = extractelement <4 x i32> %1918, i64 1, !dbg !44
  %.extract99 = extractelement <4 x i32> %1918, i64 2, !dbg !44
  %.extract101 = extractelement <4 x i32> %1918, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract97, i32 %.extract99, i32 %.extract101, ptr addrspace(1) %1768, i1 %1743) #1, !dbg !44
  %.extract103 = extractelement <4 x i32> %1925, i64 0, !dbg !44
  %.extract105 = extractelement <4 x i32> %1925, i64 1, !dbg !44
  %.extract107 = extractelement <4 x i32> %1925, i64 2, !dbg !44
  %.extract109 = extractelement <4 x i32> %1925, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract103, i32 %.extract105, i32 %.extract107, i32 %.extract109, ptr addrspace(1) %1770, i1 %1744) #1, !dbg !44
  %.extract111 = extractelement <4 x i32> %1942, i64 0, !dbg !44
  %.extract113 = extractelement <4 x i32> %1942, i64 1, !dbg !44
  %.extract115 = extractelement <4 x i32> %1942, i64 2, !dbg !44
  %.extract117 = extractelement <4 x i32> %1942, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract113, i32 %.extract115, i32 %.extract117, ptr addrspace(1) %1772, i1 %1745) #1, !dbg !44
  %.extract119 = extractelement <4 x i32> %1943, i64 0, !dbg !44
  %.extract121 = extractelement <4 x i32> %1943, i64 1, !dbg !44
  %.extract123 = extractelement <4 x i32> %1943, i64 2, !dbg !44
  %.extract125 = extractelement <4 x i32> %1943, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract119, i32 %.extract121, i32 %.extract123, i32 %.extract125, ptr addrspace(1) %1774, i1 %1746) #1, !dbg !44
  %.extract127 = extractelement <4 x i32> %1960, i64 0, !dbg !44
  %.extract129 = extractelement <4 x i32> %1960, i64 1, !dbg !44
  %.extract131 = extractelement <4 x i32> %1960, i64 2, !dbg !44
  %.extract133 = extractelement <4 x i32> %1960, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract127, i32 %.extract129, i32 %.extract131, i32 %.extract133, ptr addrspace(1) %1776, i1 %1747) #1, !dbg !44
  %.extract135 = extractelement <4 x i32> %1961, i64 0, !dbg !44
  %.extract137 = extractelement <4 x i32> %1961, i64 1, !dbg !44
  %.extract139 = extractelement <4 x i32> %1961, i64 2, !dbg !44
  %.extract141 = extractelement <4 x i32> %1961, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141, ptr addrspace(1) %1778, i1 %1748) #1, !dbg !44
  %.extract143 = extractelement <4 x i32> %1978, i64 0, !dbg !44
  %.extract145 = extractelement <4 x i32> %1978, i64 1, !dbg !44
  %.extract147 = extractelement <4 x i32> %1978, i64 2, !dbg !44
  %.extract149 = extractelement <4 x i32> %1978, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract143, i32 %.extract145, i32 %.extract147, i32 %.extract149, ptr addrspace(1) %1780, i1 %1749) #1, !dbg !44
  %.extract151 = extractelement <4 x i32> %1979, i64 0, !dbg !44
  %.extract153 = extractelement <4 x i32> %1979, i64 1, !dbg !44
  %.extract155 = extractelement <4 x i32> %1979, i64 2, !dbg !44
  %.extract157 = extractelement <4 x i32> %1979, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract151, i32 %.extract153, i32 %.extract155, i32 %.extract157, ptr addrspace(1) %1782, i1 %1750) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cydqd4o27af7qjriabxp53thxkm6d2xjca6szcyb4mqlysuacu7s.py", directory: "/tmp/torchinductor_root/yd")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 29, scope: !6)
!27 = !DILocation(line: 77, column: 54, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 25, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
