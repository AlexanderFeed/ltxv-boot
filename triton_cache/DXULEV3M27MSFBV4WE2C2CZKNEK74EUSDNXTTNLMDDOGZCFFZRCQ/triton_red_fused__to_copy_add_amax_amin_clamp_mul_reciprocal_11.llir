; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 7, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = or disjoint i32 %.lobit, %9, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %10, 4, !dbg !14
  %15 = and i32 %14, 112, !dbg !14
  %16 = and i32 %14, 2032, !dbg !14
  %17 = shl i32 %12, 7, !dbg !15
  %18 = and i32 %14, 112
  %19 = or disjoint i32 %18, 8
  %20 = zext nneg i32 %16 to i64, !dbg !16
  %21 = and i32 %10, 31, !dbg !11
  %22 = lshr i32 %16, 7, !dbg !17
  %23 = mul nuw nsw i32 %22, 526336, !dbg !18
  %24 = add i32 %23, %17, !dbg !18
  %25 = or disjoint i32 %24, %15, !dbg !19
  %26 = or disjoint i32 %24, %19, !dbg !19
  %27 = sext i32 %25 to i64, !dbg !20
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = sext i32 %26 to i64, !dbg !20
  %30 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %13) #4, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %13) #4, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !21
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !21
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !21
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !21
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !21
  %49 = shufflevector <2 x bfloat> %33, <2 x bfloat> %35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %50 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %51 = shufflevector <16 x bfloat> %49, <16 x bfloat> %50, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %52 = shufflevector <2 x bfloat> %37, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %53 = shufflevector <16 x bfloat> %51, <16 x bfloat> %52, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %54 = shufflevector <2 x bfloat> %39, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %55 = shufflevector <16 x bfloat> %53, <16 x bfloat> %54, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %56 = shufflevector <2 x bfloat> %39, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %57 = shufflevector <16 x bfloat> %55, <16 x bfloat> %56, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %58 = shufflevector <2 x bfloat> %42, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %59 = shufflevector <16 x bfloat> %57, <16 x bfloat> %58, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %60 = shufflevector <2 x bfloat> %42, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %61 = shufflevector <16 x bfloat> %59, <16 x bfloat> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %62 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %63 = shufflevector <16 x bfloat> %61, <16 x bfloat> %62, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %64 = shufflevector <2 x bfloat> %44, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %65 = shufflevector <16 x bfloat> %63, <16 x bfloat> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %66 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %67 = shufflevector <16 x bfloat> %65, <16 x bfloat> %66, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !22
  %68 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %69 = shufflevector <16 x bfloat> %67, <16 x bfloat> %68, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !22
  %70 = shufflevector <2 x bfloat> %48, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %71 = shufflevector <16 x bfloat> %69, <16 x bfloat> %70, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !22
  %72 = shufflevector <2 x bfloat> %48, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %73 = shufflevector <16 x bfloat> %71, <16 x bfloat> %72, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !22
  %74 = fpext <16 x bfloat> %73 to <16 x float>, !dbg !22
  %75 = shufflevector <16 x float> %74, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %76 = fcmp olt <32 x float> %75, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !23
  %77 = fcmp ogt <32 x float> %75, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !23
  %78 = shufflevector <32 x i1> %76, <32 x i1> %77, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !23
  %79 = select <32 x i1> %78, <32 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <32 x float> %75, !dbg !27
  %80 = insertelement <32 x i1> poison, i1 %13, i64 0, !dbg !28
  %81 = shufflevector <32 x i1> %80, <32 x i1> poison, <32 x i32> zeroinitializer, !dbg !28
  %82 = select <32 x i1> %81, <32 x float> %79, <32 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !28
  %83 = or disjoint i64 %20, 2048, !dbg !29
  %84 = icmp samesign ult i64 %83, 3072, !dbg !30
  %85 = lshr i64 %83, 7, !dbg !17
  %86 = trunc nuw nsw i64 %85 to i32, !dbg !18
  %87 = mul nuw nsw i32 %86, 526336, !dbg !18
  %88 = add i32 %87, %17, !dbg !18
  %89 = or disjoint i32 %88, %15, !dbg !19
  %90 = or disjoint i32 %88, %19, !dbg !19
  %91 = sext i32 %89 to i64, !dbg !20
  %92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %91, !dbg !20
  %93 = sext i32 %90 to i64, !dbg !20
  %94 = getelementptr bfloat, ptr addrspace(1) %0, i64 %93, !dbg !20
  %95 = and i1 %13, %84, !dbg !31
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %92, i1 %95) #4, !dbg !21
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !21
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !21
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !21
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !21
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !21
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !21
  %103 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !21
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !21
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %94, i1 %95) #4, !dbg !21
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !21
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !21
  %108 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !21
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !21
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !21
  %112 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !21
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !21
  %114 = fcmp uno <32 x float> %82, zeroinitializer, !dbg !32
  %115 = shufflevector <2 x bfloat> %98, <2 x bfloat> %100, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %116 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %117 = shufflevector <16 x bfloat> %115, <16 x bfloat> %116, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %118 = shufflevector <2 x bfloat> %102, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %119 = shufflevector <16 x bfloat> %117, <16 x bfloat> %118, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %120 = shufflevector <2 x bfloat> %104, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %121 = shufflevector <16 x bfloat> %119, <16 x bfloat> %120, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %122 = shufflevector <2 x bfloat> %104, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %123 = shufflevector <16 x bfloat> %121, <16 x bfloat> %122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %124 = shufflevector <2 x bfloat> %107, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %125 = shufflevector <16 x bfloat> %123, <16 x bfloat> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %126 = shufflevector <2 x bfloat> %107, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %127 = shufflevector <16 x bfloat> %125, <16 x bfloat> %126, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %128 = shufflevector <2 x bfloat> %109, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %129 = shufflevector <16 x bfloat> %127, <16 x bfloat> %128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %130 = shufflevector <2 x bfloat> %109, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %131 = shufflevector <16 x bfloat> %129, <16 x bfloat> %130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %132 = shufflevector <2 x bfloat> %111, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %133 = shufflevector <16 x bfloat> %131, <16 x bfloat> %132, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !22
  %134 = shufflevector <2 x bfloat> %111, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %135 = shufflevector <16 x bfloat> %133, <16 x bfloat> %134, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !22
  %136 = shufflevector <2 x bfloat> %113, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %137 = shufflevector <16 x bfloat> %135, <16 x bfloat> %136, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !22
  %138 = shufflevector <2 x bfloat> %113, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %139 = shufflevector <16 x bfloat> %137, <16 x bfloat> %138, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !22
  %140 = fpext <16 x bfloat> %139 to <16 x float>, !dbg !22
  %141 = shufflevector <16 x float> %140, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !22
  %142 = fcmp ogt <32 x float> %82, %141, !dbg !23
  %143 = fcmp olt <32 x float> %82, %141, !dbg !23
  %144 = shufflevector <32 x i1> %142, <32 x i1> %143, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>, !dbg !23
  %145 = or <32 x i1> %114, %144, !dbg !33
  %146 = select <32 x i1> %145, <32 x float> %82, <32 x float> %141, !dbg !27
  %147 = insertelement <32 x i1> poison, i1 %95, i64 0, !dbg !28
  %148 = shufflevector <32 x i1> %147, <32 x i1> poison, <32 x i32> zeroinitializer, !dbg !28
  %149 = select <32 x i1> %148, <32 x float> %146, <32 x float> %82, !dbg !28
  %150 = lshr i32 %10, 5, !dbg !11
  %151 = and i32 %10, 1, !dbg !11
  %152 = or disjoint i32 %9, %151, !dbg !12
  %153 = icmp slt i32 %152, 512, !dbg !13
  %154 = extractelement <32 x float> %149, i64 16, !dbg !34
  %155 = extractelement <32 x float> %149, i64 17, !dbg !34
  %156 = fcmp olt float %154, %155, !dbg !34
  %157 = fcmp uno float %154, 0.000000e+00, !dbg !37
  %158 = or i1 %156, %157, !dbg !38
  %159 = select i1 %158, float %154, float %155, !dbg !39
  %160 = extractelement <32 x float> %149, i64 18, !dbg !34
  %161 = fcmp olt float %159, %160, !dbg !34
  %162 = fcmp uno float %159, 0.000000e+00, !dbg !37
  %163 = or i1 %161, %162, !dbg !38
  %164 = select i1 %163, float %159, float %160, !dbg !39
  %165 = extractelement <32 x float> %149, i64 19, !dbg !34
  %166 = fcmp olt float %164, %165, !dbg !34
  %167 = fcmp uno float %164, 0.000000e+00, !dbg !37
  %168 = or i1 %166, %167, !dbg !38
  %169 = select i1 %168, float %164, float %165, !dbg !39
  %170 = extractelement <32 x float> %149, i64 20, !dbg !34
  %171 = fcmp olt float %169, %170, !dbg !34
  %172 = fcmp uno float %169, 0.000000e+00, !dbg !37
  %173 = or i1 %171, %172, !dbg !38
  %174 = select i1 %173, float %169, float %170, !dbg !39
  %175 = extractelement <32 x float> %149, i64 21, !dbg !34
  %176 = fcmp olt float %174, %175, !dbg !34
  %177 = fcmp uno float %174, 0.000000e+00, !dbg !37
  %178 = or i1 %176, %177, !dbg !38
  %179 = select i1 %178, float %174, float %175, !dbg !39
  %180 = extractelement <32 x float> %149, i64 22, !dbg !34
  %181 = fcmp olt float %179, %180, !dbg !34
  %182 = fcmp uno float %179, 0.000000e+00, !dbg !37
  %183 = or i1 %181, %182, !dbg !38
  %184 = select i1 %183, float %179, float %180, !dbg !39
  %185 = extractelement <32 x float> %149, i64 23, !dbg !34
  %186 = fcmp olt float %184, %185, !dbg !34
  %187 = fcmp uno float %184, 0.000000e+00, !dbg !37
  %188 = or i1 %186, %187, !dbg !38
  %189 = select i1 %188, float %184, float %185, !dbg !39
  %190 = extractelement <32 x float> %149, i64 24, !dbg !34
  %191 = fcmp olt float %189, %190, !dbg !34
  %192 = fcmp uno float %189, 0.000000e+00, !dbg !37
  %193 = or i1 %191, %192, !dbg !38
  %194 = select i1 %193, float %189, float %190, !dbg !39
  %195 = extractelement <32 x float> %149, i64 25, !dbg !34
  %196 = fcmp olt float %194, %195, !dbg !34
  %197 = fcmp uno float %194, 0.000000e+00, !dbg !37
  %198 = or i1 %196, %197, !dbg !38
  %199 = select i1 %198, float %194, float %195, !dbg !39
  %200 = extractelement <32 x float> %149, i64 26, !dbg !34
  %201 = fcmp olt float %199, %200, !dbg !34
  %202 = fcmp uno float %199, 0.000000e+00, !dbg !37
  %203 = or i1 %201, %202, !dbg !38
  %204 = select i1 %203, float %199, float %200, !dbg !39
  %205 = extractelement <32 x float> %149, i64 27, !dbg !34
  %206 = fcmp olt float %204, %205, !dbg !34
  %207 = fcmp uno float %204, 0.000000e+00, !dbg !37
  %208 = or i1 %206, %207, !dbg !38
  %209 = select i1 %208, float %204, float %205, !dbg !39
  %210 = extractelement <32 x float> %149, i64 28, !dbg !34
  %211 = fcmp olt float %209, %210, !dbg !34
  %212 = fcmp uno float %209, 0.000000e+00, !dbg !37
  %213 = or i1 %211, %212, !dbg !38
  %214 = select i1 %213, float %209, float %210, !dbg !39
  %215 = extractelement <32 x float> %149, i64 29, !dbg !34
  %216 = fcmp olt float %214, %215, !dbg !34
  %217 = fcmp uno float %214, 0.000000e+00, !dbg !37
  %218 = or i1 %216, %217, !dbg !38
  %219 = select i1 %218, float %214, float %215, !dbg !39
  %220 = extractelement <32 x float> %149, i64 30, !dbg !34
  %221 = fcmp olt float %219, %220, !dbg !34
  %222 = fcmp uno float %219, 0.000000e+00, !dbg !37
  %223 = or i1 %221, %222, !dbg !38
  %224 = select i1 %223, float %219, float %220, !dbg !39
  %225 = extractelement <32 x float> %149, i64 31, !dbg !34
  %226 = fcmp olt float %224, %225, !dbg !34
  %227 = fcmp uno float %224, 0.000000e+00, !dbg !37
  %228 = or i1 %226, %227, !dbg !38
  %229 = select i1 %228, float %224, float %225, !dbg !39
  %230 = bitcast float %229 to i32, !dbg !40
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 16, i32 31), !dbg !40
  %232 = bitcast i32 %231 to float, !dbg !40
  %233 = fcmp olt float %229, %232, !dbg !34
  %234 = fcmp uno float %229, 0.000000e+00, !dbg !37
  %235 = or i1 %234, %233, !dbg !38
  %236 = select i1 %235, float %229, float %232, !dbg !39
  %237 = bitcast float %236 to i32, !dbg !40
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !40
  %239 = bitcast i32 %238 to float, !dbg !40
  %240 = fcmp olt float %236, %239, !dbg !34
  %241 = fcmp uno float %236, 0.000000e+00, !dbg !37
  %242 = or i1 %240, %241, !dbg !38
  %243 = select i1 %242, float %236, float %239, !dbg !39
  %244 = bitcast float %243 to i32, !dbg !40
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !40
  %246 = bitcast i32 %245 to float, !dbg !40
  %247 = fcmp olt float %243, %246, !dbg !34
  %248 = fcmp uno float %243, 0.000000e+00, !dbg !37
  %249 = or i1 %247, %248, !dbg !38
  %250 = select i1 %249, float %243, float %246, !dbg !39
  %251 = bitcast float %250 to i32, !dbg !40
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 2, i32 31), !dbg !40
  %253 = bitcast i32 %252 to float, !dbg !40
  %254 = fcmp olt float %250, %253, !dbg !34
  %255 = fcmp uno float %250, 0.000000e+00, !dbg !37
  %256 = or i1 %254, %255, !dbg !38
  %257 = select i1 %256, float %250, float %253, !dbg !39
  %258 = bitcast float %257 to i32, !dbg !40
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !40
  %260 = bitcast i32 %259 to float, !dbg !40
  %261 = fcmp olt float %257, %260, !dbg !34
  %262 = fcmp uno float %257, 0.000000e+00, !dbg !37
  %263 = or i1 %261, %262, !dbg !38
  %264 = and i32 %150, 3, !dbg !40
  %265 = icmp eq i32 %21, 0, !dbg !40
  %266 = shl nuw nsw i32 %.lobit, 2, !dbg !40
  %267 = or disjoint i32 %266, %264, !dbg !40
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !40
  %269 = select i1 %263, i32 %258, i32 %259, !dbg !39
  %270 = insertelement <1 x i32> poison, i32 %269, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %270, i1 %265) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %271 = icmp slt i32 %10, 8, !dbg !40
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %273 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %272, i1 %271) #4, !dbg !40
  %274 = bitcast i32 %273 to float, !dbg !40
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !40
  %276 = bitcast i32 %275 to float, !dbg !40
  %277 = fcmp olt float %274, %276, !dbg !34
  %278 = fcmp uno float %274, 0.000000e+00, !dbg !37
  %279 = or i1 %278, %277, !dbg !38
  %280 = select i1 %279, float %274, float %276, !dbg !39
  %281 = bitcast float %280 to i32, !dbg !40
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !40
  %283 = bitcast i32 %282 to float, !dbg !40
  %284 = fcmp olt float %280, %283, !dbg !34
  %285 = fcmp uno float %280, 0.000000e+00, !dbg !37
  %286 = or i1 %284, %285, !dbg !38
  %287 = and i32 %10, 3, !dbg !40
  %288 = icmp eq i32 %287, 0, !dbg !40
  %289 = and i1 %271, %288, !dbg !40
  %290 = select i1 %286, i32 %281, i32 %282, !dbg !39
  %291 = insertelement <1 x i32> poison, i32 %290, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %291, i1 %289) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !40
  %293 = load float, ptr addrspace(3) %292, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %294 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !41
  %295 = bitcast float %293 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %296 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %151, !dbg !41
  %297 = load float, ptr addrspace(3) %296, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %298 = extractelement <32 x float> %149, i64 0, !dbg !44
  %299 = extractelement <32 x float> %149, i64 1, !dbg !44
  %300 = fcmp ogt float %298, %299, !dbg !44
  %301 = fcmp uno float %298, 0.000000e+00, !dbg !45
  %302 = or i1 %300, %301, !dbg !46
  %303 = select i1 %302, float %298, float %299, !dbg !47
  %304 = extractelement <32 x float> %149, i64 2, !dbg !44
  %305 = fcmp ogt float %303, %304, !dbg !44
  %306 = fcmp uno float %303, 0.000000e+00, !dbg !45
  %307 = or i1 %305, %306, !dbg !46
  %308 = select i1 %307, float %303, float %304, !dbg !47
  %309 = extractelement <32 x float> %149, i64 3, !dbg !44
  %310 = fcmp ogt float %308, %309, !dbg !44
  %311 = fcmp uno float %308, 0.000000e+00, !dbg !45
  %312 = or i1 %310, %311, !dbg !46
  %313 = select i1 %312, float %308, float %309, !dbg !47
  %314 = extractelement <32 x float> %149, i64 4, !dbg !44
  %315 = fcmp ogt float %313, %314, !dbg !44
  %316 = fcmp uno float %313, 0.000000e+00, !dbg !45
  %317 = or i1 %315, %316, !dbg !46
  %318 = select i1 %317, float %313, float %314, !dbg !47
  %319 = extractelement <32 x float> %149, i64 5, !dbg !44
  %320 = fcmp ogt float %318, %319, !dbg !44
  %321 = fcmp uno float %318, 0.000000e+00, !dbg !45
  %322 = or i1 %320, %321, !dbg !46
  %323 = select i1 %322, float %318, float %319, !dbg !47
  %324 = extractelement <32 x float> %149, i64 6, !dbg !44
  %325 = fcmp ogt float %323, %324, !dbg !44
  %326 = fcmp uno float %323, 0.000000e+00, !dbg !45
  %327 = or i1 %325, %326, !dbg !46
  %328 = select i1 %327, float %323, float %324, !dbg !47
  %329 = extractelement <32 x float> %149, i64 7, !dbg !44
  %330 = fcmp ogt float %328, %329, !dbg !44
  %331 = fcmp uno float %328, 0.000000e+00, !dbg !45
  %332 = or i1 %330, %331, !dbg !46
  %333 = select i1 %332, float %328, float %329, !dbg !47
  %334 = extractelement <32 x float> %149, i64 8, !dbg !44
  %335 = fcmp ogt float %333, %334, !dbg !44
  %336 = fcmp uno float %333, 0.000000e+00, !dbg !45
  %337 = or i1 %335, %336, !dbg !46
  %338 = select i1 %337, float %333, float %334, !dbg !47
  %339 = extractelement <32 x float> %149, i64 9, !dbg !44
  %340 = fcmp ogt float %338, %339, !dbg !44
  %341 = fcmp uno float %338, 0.000000e+00, !dbg !45
  %342 = or i1 %340, %341, !dbg !46
  %343 = select i1 %342, float %338, float %339, !dbg !47
  %344 = extractelement <32 x float> %149, i64 10, !dbg !44
  %345 = fcmp ogt float %343, %344, !dbg !44
  %346 = fcmp uno float %343, 0.000000e+00, !dbg !45
  %347 = or i1 %345, %346, !dbg !46
  %348 = select i1 %347, float %343, float %344, !dbg !47
  %349 = extractelement <32 x float> %149, i64 11, !dbg !44
  %350 = fcmp ogt float %348, %349, !dbg !44
  %351 = fcmp uno float %348, 0.000000e+00, !dbg !45
  %352 = or i1 %350, %351, !dbg !46
  %353 = select i1 %352, float %348, float %349, !dbg !47
  %354 = extractelement <32 x float> %149, i64 12, !dbg !44
  %355 = fcmp ogt float %353, %354, !dbg !44
  %356 = fcmp uno float %353, 0.000000e+00, !dbg !45
  %357 = or i1 %355, %356, !dbg !46
  %358 = select i1 %357, float %353, float %354, !dbg !47
  %359 = extractelement <32 x float> %149, i64 13, !dbg !44
  %360 = fcmp ogt float %358, %359, !dbg !44
  %361 = fcmp uno float %358, 0.000000e+00, !dbg !45
  %362 = or i1 %360, %361, !dbg !46
  %363 = select i1 %362, float %358, float %359, !dbg !47
  %364 = extractelement <32 x float> %149, i64 14, !dbg !44
  %365 = fcmp ogt float %363, %364, !dbg !44
  %366 = fcmp uno float %363, 0.000000e+00, !dbg !45
  %367 = or i1 %365, %366, !dbg !46
  %368 = select i1 %367, float %363, float %364, !dbg !47
  %369 = extractelement <32 x float> %149, i64 15, !dbg !44
  %370 = fcmp ogt float %368, %369, !dbg !44
  %371 = fcmp uno float %368, 0.000000e+00, !dbg !45
  %372 = or i1 %370, %371, !dbg !46
  %373 = select i1 %372, float %368, float %369, !dbg !47
  %374 = bitcast float %373 to i32, !dbg !42
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 16, i32 31), !dbg !42
  %376 = bitcast i32 %375 to float, !dbg !42
  %377 = fcmp ogt float %373, %376, !dbg !44
  %378 = fcmp uno float %373, 0.000000e+00, !dbg !45
  %379 = or i1 %378, %377, !dbg !46
  %380 = select i1 %379, float %373, float %376, !dbg !47
  %381 = bitcast float %380 to i32, !dbg !42
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 8, i32 31), !dbg !42
  %383 = bitcast i32 %382 to float, !dbg !42
  %384 = fcmp ogt float %380, %383, !dbg !44
  %385 = fcmp uno float %380, 0.000000e+00, !dbg !45
  %386 = or i1 %384, %385, !dbg !46
  %387 = select i1 %386, float %380, float %383, !dbg !47
  %388 = bitcast float %387 to i32, !dbg !42
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 4, i32 31), !dbg !42
  %390 = bitcast i32 %389 to float, !dbg !42
  %391 = fcmp ogt float %387, %390, !dbg !44
  %392 = fcmp uno float %387, 0.000000e+00, !dbg !45
  %393 = or i1 %391, %392, !dbg !46
  %394 = select i1 %393, float %387, float %390, !dbg !47
  %395 = bitcast float %394 to i32, !dbg !42
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !42
  %397 = bitcast i32 %396 to float, !dbg !42
  %398 = fcmp ogt float %394, %397, !dbg !44
  %399 = fcmp uno float %394, 0.000000e+00, !dbg !45
  %400 = or i1 %398, %399, !dbg !46
  %401 = select i1 %400, float %394, float %397, !dbg !47
  %402 = bitcast float %401 to i32, !dbg !42
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !42
  %404 = bitcast i32 %403 to float, !dbg !42
  %405 = fcmp ogt float %401, %404, !dbg !44
  %406 = fcmp uno float %401, 0.000000e+00, !dbg !45
  %407 = or i1 %405, %406, !dbg !46
  %408 = select i1 %407, i32 %402, i32 %403, !dbg !47
  %409 = insertelement <1 x i32> poison, i32 %408, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %409, i1 %265) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %410 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %272, i1 %271) #4, !dbg !42
  %411 = bitcast i32 %410 to float, !dbg !42
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 2, i32 31), !dbg !42
  %413 = bitcast i32 %412 to float, !dbg !42
  %414 = fcmp ogt float %411, %413, !dbg !44
  %415 = fcmp uno float %411, 0.000000e+00, !dbg !45
  %416 = or i1 %415, %414, !dbg !46
  %417 = select i1 %416, float %411, float %413, !dbg !47
  %418 = bitcast float %417 to i32, !dbg !42
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 1, i32 31), !dbg !42
  %420 = bitcast i32 %419 to float, !dbg !42
  %421 = fcmp ogt float %417, %420, !dbg !44
  %422 = fcmp uno float %417, 0.000000e+00, !dbg !45
  %423 = or i1 %421, %422, !dbg !46
  %424 = select i1 %423, i32 %418, i32 %419, !dbg !47
  %425 = insertelement <1 x i32> poison, i32 %424, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %425, i1 %289) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %426 = load float, ptr addrspace(3) %292, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %427 = bitcast float %426 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %427, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %428 = load float, ptr addrspace(3) %296, align 4, !dbg !48
  %429 = sext i32 %152 to i64, !dbg !49
  %430 = getelementptr bfloat, ptr addrspace(1) %1, i64 %429, !dbg !49
  %431 = fptrunc float %297 to bfloat, !dbg !41
  %432 = and i32 %10, 254, !dbg !41
  %433 = icmp eq i32 %432, 0, !dbg !41
  %434 = bitcast bfloat %431 to i16, !dbg !41
  %435 = and i1 %433, %153, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %434, ptr addrspace(1) %430, i1 %435) #4, !dbg !41
  %436 = getelementptr bfloat, ptr addrspace(1) %2, i64 %429, !dbg !50
  %437 = fptrunc float %428 to bfloat, !dbg !48
  %438 = bitcast bfloat %437 to i16, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %438, ptr addrspace(1) %436, i1 %435) #4, !dbg !48
  %.inv = fcmp oge float %293, 0.000000e+00, !dbg !51
  %439 = select i1 %.inv, float 0.000000e+00, float %293, !dbg !51
  %440 = fsub float 0.000000e+00, %439, !dbg !53
  %.inv2 = fcmp ole float %426, 0.000000e+00, !dbg !54
  %441 = select i1 %.inv2, float 0.000000e+00, float %426, !dbg !54
  %442 = fcmp ogt float %440, %441, !dbg !56
  %443 = fcmp uno float %440, 0.000000e+00, !dbg !58
  %444 = or i1 %443, %442, !dbg !59
  %445 = select i1 %444, float %440, float %441, !dbg !60
  %446 = fmul float %445, 0x3F80204080000000, !dbg !61
  %447 = fcmp ogt float %446, 0x3EE4F8B580000000, !dbg !62
  %448 = fcmp uno float %446, 0.000000e+00, !dbg !64
  %449 = or i1 %447, %448, !dbg !65
  %450 = select i1 %449, float %446, float 0x3EE4F8B580000000, !dbg !66
  %451 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %450), !dbg !67
  %452 = mul i32 %12, 3072, !dbg !68
  br label %453, !dbg !69

453:                                              ; preds = %7, %453
  %454 = phi i1 [ true, %7 ], [ false, %453 ]
  %indvars.iv35 = phi i64 [ 0, %7 ], [ 2048, %453 ]
  %455 = or disjoint i64 %indvars.iv35, %20, !dbg !70
  %456 = icmp samesign ult i64 %455, 3072, !dbg !71
  %457 = lshr i64 %455, 7, !dbg !72
  %458 = trunc nuw nsw i64 %457 to i32, !dbg !73
  %459 = mul nuw nsw i32 %458, 526336, !dbg !73
  %460 = add i32 %459, %17, !dbg !73
  %461 = or disjoint i32 %460, %15, !dbg !74
  %462 = or disjoint i32 %460, %19, !dbg !74
  %463 = sext i32 %461 to i64, !dbg !75
  %464 = getelementptr bfloat, ptr addrspace(1) %0, i64 %463, !dbg !75
  %465 = sext i32 %462 to i64, !dbg !75
  %466 = getelementptr bfloat, ptr addrspace(1) %0, i64 %465, !dbg !75
  %467 = and i1 %13, %456, !dbg !76
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %464, i1 %467) #4, !dbg !77
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !77
  %470 = bitcast i32 %469 to <2 x bfloat>, !dbg !77
  %471 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !77
  %472 = bitcast i32 %471 to <2 x bfloat>, !dbg !77
  %473 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !77
  %474 = bitcast i32 %473 to <2 x bfloat>, !dbg !77
  %475 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !77
  %476 = bitcast i32 %475 to <2 x bfloat>, !dbg !77
  %477 = extractelement <2 x bfloat> %470, i64 0, !dbg !77
  %478 = extractelement <2 x bfloat> %470, i64 1, !dbg !77
  %479 = extractelement <2 x bfloat> %472, i64 0, !dbg !77
  %480 = extractelement <2 x bfloat> %472, i64 1, !dbg !77
  %481 = extractelement <2 x bfloat> %474, i64 0, !dbg !77
  %482 = extractelement <2 x bfloat> %474, i64 1, !dbg !77
  %483 = extractelement <2 x bfloat> %476, i64 0, !dbg !77
  %484 = extractelement <2 x bfloat> %476, i64 1, !dbg !77
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %466, i1 %467) #4, !dbg !77
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !77
  %487 = bitcast i32 %486 to <2 x bfloat>, !dbg !77
  %488 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !77
  %489 = bitcast i32 %488 to <2 x bfloat>, !dbg !77
  %490 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !77
  %491 = bitcast i32 %490 to <2 x bfloat>, !dbg !77
  %492 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !77
  %493 = bitcast i32 %492 to <2 x bfloat>, !dbg !77
  %494 = extractelement <2 x bfloat> %487, i64 0, !dbg !77
  %495 = extractelement <2 x bfloat> %487, i64 1, !dbg !77
  %496 = extractelement <2 x bfloat> %489, i64 0, !dbg !77
  %497 = extractelement <2 x bfloat> %489, i64 1, !dbg !77
  %498 = extractelement <2 x bfloat> %491, i64 0, !dbg !77
  %499 = extractelement <2 x bfloat> %491, i64 1, !dbg !77
  %500 = extractelement <2 x bfloat> %493, i64 0, !dbg !77
  %501 = extractelement <2 x bfloat> %493, i64 1, !dbg !77
  %502 = fpext bfloat %477 to float, !dbg !78
  %503 = fpext bfloat %478 to float, !dbg !78
  %504 = fpext bfloat %479 to float, !dbg !78
  %505 = fpext bfloat %480 to float, !dbg !78
  %506 = fpext bfloat %481 to float, !dbg !78
  %507 = fpext bfloat %482 to float, !dbg !78
  %508 = fpext bfloat %483 to float, !dbg !78
  %509 = fpext bfloat %484 to float, !dbg !78
  %510 = fpext bfloat %494 to float, !dbg !78
  %511 = fpext bfloat %495 to float, !dbg !78
  %512 = fpext bfloat %496 to float, !dbg !78
  %513 = fpext bfloat %497 to float, !dbg !78
  %514 = fpext bfloat %498 to float, !dbg !78
  %515 = fpext bfloat %499 to float, !dbg !78
  %516 = fpext bfloat %500 to float, !dbg !78
  %517 = fpext bfloat %501 to float, !dbg !78
  %518 = fmul float %451, %502, !dbg !79
  %519 = fmul float %451, %503, !dbg !79
  %520 = fmul float %451, %504, !dbg !79
  %521 = fmul float %451, %505, !dbg !79
  %522 = fmul float %451, %506, !dbg !79
  %523 = fmul float %451, %507, !dbg !79
  %524 = fmul float %451, %508, !dbg !79
  %525 = fmul float %451, %509, !dbg !79
  %526 = fmul float %451, %510, !dbg !79
  %527 = fmul float %451, %511, !dbg !79
  %528 = fmul float %451, %512, !dbg !79
  %529 = fmul float %451, %513, !dbg !79
  %530 = fmul float %451, %514, !dbg !79
  %531 = fmul float %451, %515, !dbg !79
  %532 = fmul float %451, %516, !dbg !79
  %533 = fmul float %451, %517, !dbg !79
  %534 = tail call float @llvm.nvvm.round.f(float %518) #4, !dbg !80
  %535 = tail call float @llvm.nvvm.round.f(float %519) #4, !dbg !80
  %536 = tail call float @llvm.nvvm.round.f(float %520) #4, !dbg !80
  %537 = tail call float @llvm.nvvm.round.f(float %521) #4, !dbg !80
  %538 = tail call float @llvm.nvvm.round.f(float %522) #4, !dbg !80
  %539 = tail call float @llvm.nvvm.round.f(float %523) #4, !dbg !80
  %540 = tail call float @llvm.nvvm.round.f(float %524) #4, !dbg !80
  %541 = tail call float @llvm.nvvm.round.f(float %525) #4, !dbg !80
  %542 = tail call float @llvm.nvvm.round.f(float %526) #4, !dbg !80
  %543 = tail call float @llvm.nvvm.round.f(float %527) #4, !dbg !80
  %544 = tail call float @llvm.nvvm.round.f(float %528) #4, !dbg !80
  %545 = tail call float @llvm.nvvm.round.f(float %529) #4, !dbg !80
  %546 = tail call float @llvm.nvvm.round.f(float %530) #4, !dbg !80
  %547 = tail call float @llvm.nvvm.round.f(float %531) #4, !dbg !80
  %548 = tail call float @llvm.nvvm.round.f(float %532) #4, !dbg !80
  %549 = tail call float @llvm.nvvm.round.f(float %533) #4, !dbg !80
  %550 = insertelement <4 x float> poison, float %534, i64 0, !dbg !81
  %551 = insertelement <4 x float> %550, float %535, i64 1, !dbg !81
  %552 = insertelement <4 x float> %551, float %536, i64 2, !dbg !81
  %553 = insertelement <4 x float> %552, float %537, i64 3, !dbg !81
  %554 = fcmp ogt <4 x float> %553, splat (float -1.270000e+02), !dbg !81
  %555 = fcmp uno <4 x float> %553, zeroinitializer, !dbg !83
  %556 = or <4 x i1> %554, %555, !dbg !84
  %557 = select <4 x i1> %556, <4 x float> %553, <4 x float> splat (float -1.270000e+02), !dbg !85
  %558 = fcmp olt <4 x float> %557, splat (float 1.270000e+02), !dbg !86
  %559 = fcmp uno <4 x float> %557, zeroinitializer, !dbg !88
  %560 = or <4 x i1> %558, %559, !dbg !89
  %561 = fptosi <4 x float> %557 to <4 x i8>, !dbg !90
  %562 = select <4 x i1> %560, <4 x i8> %561, <4 x i8> splat (i8 127), !dbg !91
  %563 = insertelement <4 x float> poison, float %538, i64 0, !dbg !81
  %564 = insertelement <4 x float> %563, float %539, i64 1, !dbg !81
  %565 = insertelement <4 x float> %564, float %540, i64 2, !dbg !81
  %566 = insertelement <4 x float> %565, float %541, i64 3, !dbg !81
  %567 = fcmp ogt <4 x float> %566, splat (float -1.270000e+02), !dbg !81
  %568 = fcmp uno <4 x float> %566, zeroinitializer, !dbg !83
  %569 = or <4 x i1> %567, %568, !dbg !84
  %570 = select <4 x i1> %569, <4 x float> %566, <4 x float> splat (float -1.270000e+02), !dbg !85
  %571 = fcmp olt <4 x float> %570, splat (float 1.270000e+02), !dbg !86
  %572 = fcmp uno <4 x float> %570, zeroinitializer, !dbg !88
  %573 = or <4 x i1> %571, %572, !dbg !89
  %574 = fptosi <4 x float> %570 to <4 x i8>, !dbg !90
  %575 = select <4 x i1> %573, <4 x i8> %574, <4 x i8> splat (i8 127), !dbg !91
  %576 = insertelement <4 x float> poison, float %542, i64 0, !dbg !81
  %577 = insertelement <4 x float> %576, float %543, i64 1, !dbg !81
  %578 = insertelement <4 x float> %577, float %544, i64 2, !dbg !81
  %579 = insertelement <4 x float> %578, float %545, i64 3, !dbg !81
  %580 = fcmp ogt <4 x float> %579, splat (float -1.270000e+02), !dbg !81
  %581 = fcmp uno <4 x float> %579, zeroinitializer, !dbg !83
  %582 = or <4 x i1> %580, %581, !dbg !84
  %583 = select <4 x i1> %582, <4 x float> %579, <4 x float> splat (float -1.270000e+02), !dbg !85
  %584 = fcmp olt <4 x float> %583, splat (float 1.270000e+02), !dbg !86
  %585 = fcmp uno <4 x float> %583, zeroinitializer, !dbg !88
  %586 = or <4 x i1> %584, %585, !dbg !89
  %587 = fptosi <4 x float> %583 to <4 x i8>, !dbg !90
  %588 = select <4 x i1> %586, <4 x i8> %587, <4 x i8> splat (i8 127), !dbg !91
  %589 = insertelement <4 x float> poison, float %546, i64 0, !dbg !81
  %590 = insertelement <4 x float> %589, float %547, i64 1, !dbg !81
  %591 = insertelement <4 x float> %590, float %548, i64 2, !dbg !81
  %592 = insertelement <4 x float> %591, float %549, i64 3, !dbg !81
  %593 = fcmp ogt <4 x float> %592, splat (float -1.270000e+02), !dbg !81
  %594 = fcmp uno <4 x float> %592, zeroinitializer, !dbg !83
  %595 = or <4 x i1> %593, %594, !dbg !84
  %596 = select <4 x i1> %595, <4 x float> %592, <4 x float> splat (float -1.270000e+02), !dbg !85
  %597 = fcmp olt <4 x float> %596, splat (float 1.270000e+02), !dbg !86
  %598 = fcmp uno <4 x float> %596, zeroinitializer, !dbg !88
  %599 = or <4 x i1> %597, %598, !dbg !89
  %600 = fptosi <4 x float> %596 to <4 x i8>, !dbg !90
  %601 = select <4 x i1> %599, <4 x i8> %600, <4 x i8> splat (i8 127), !dbg !91
  %602 = trunc nuw nsw i64 %455 to i32, !dbg !92
  %603 = add i32 %452, %602, !dbg !92
  %604 = sext i32 %603 to i64, !dbg !93
  %605 = getelementptr i8, ptr addrspace(1) %3, i64 %604, !dbg !93
  %606 = bitcast <4 x i8> %562 to i32, !dbg !94
  %607 = bitcast <4 x i8> %575 to i32, !dbg !94
  %608 = bitcast <4 x i8> %588 to i32, !dbg !94
  %609 = bitcast <4 x i8> %601 to i32, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %606, i32 %607, i32 %608, i32 %609, ptr addrspace(1) %605, i1 %467) #4, !dbg !94
  br i1 %454, label %453, label %610, !dbg !69

610:                                              ; preds = %453
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 43, scope: !6)
!19 = !DILocation(line: 37, column: 68, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 83, scope: !6)
!22 = !DILocation(line: 37, column: 144, scope: !6)
!23 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 41, column: 45, scope: !6)
!27 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 42, column: 48, scope: !6)
!29 = !DILocation(line: 32, column: 31, scope: !6)
!30 = !DILocation(line: 33, column: 29, scope: !6)
!31 = !DILocation(line: 37, column: 91, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !26)
!34 = !DILocation(line: 94, column: 15, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!36 = !DILocation(line: 43, column: 38, scope: !6)
!37 = !DILocation(line: 96, column: 21, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 96, column: 16, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 97, column: 29, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !36)
!41 = !DILocation(line: 45, column: 36, scope: !6)
!42 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !43)
!43 = !DILocation(line: 44, column: 38, scope: !6)
!44 = !DILocation(line: 102, column: 15, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 104, column: 21, scope: !35, inlinedAt: !43)
!46 = !DILocation(line: 104, column: 16, scope: !35, inlinedAt: !43)
!47 = !DILocation(line: 105, column: 29, scope: !35, inlinedAt: !43)
!48 = !DILocation(line: 46, column: 36, scope: !6)
!49 = !DILocation(line: 45, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 25, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 47, column: 40, scope: !6)
!70 = !DILocation(line: 48, column: 31, scope: !6)
!71 = !DILocation(line: 49, column: 29, scope: !6)
!72 = !DILocation(line: 53, column: 59, scope: !6)
!73 = !DILocation(line: 53, column: 43, scope: !6)
!74 = !DILocation(line: 53, column: 68, scope: !6)
!75 = !DILocation(line: 53, column: 34, scope: !6)
!76 = !DILocation(line: 53, column: 91, scope: !6)
!77 = !DILocation(line: 53, column: 83, scope: !6)
!78 = !DILocation(line: 53, column: 145, scope: !6)
!79 = !DILocation(line: 69, column: 23, scope: !6)
!80 = !DILocation(line: 70, column: 36, scope: !6)
!81 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !82)
!82 = !DILocation(line: 73, column: 46, scope: !6)
!83 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !82)
!84 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !82)
!85 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !82)
!86 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !87)
!87 = !DILocation(line: 75, column: 46, scope: !6)
!88 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !87)
!89 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !87)
!90 = !DILocation(line: 77, column: 25, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !87)
!92 = !DILocation(line: 78, column: 36, scope: !6)
!93 = !DILocation(line: 78, column: 29, scope: !6)
!94 = !DILocation(line: 78, column: 53, scope: !6)
!95 = !DILocation(line: 47, column: 4, scope: !6)
