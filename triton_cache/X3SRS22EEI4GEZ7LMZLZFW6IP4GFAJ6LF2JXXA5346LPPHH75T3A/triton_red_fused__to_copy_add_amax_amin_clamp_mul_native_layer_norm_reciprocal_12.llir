; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = or disjoint i32 %18, 1, !dbg !12
  %22 = icmp slt i32 %18, 512, !dbg !13
  %23 = icmp slt i32 %21, 512, !dbg !13
  %24 = lshr i32 %19, 5, !dbg !14
  %25 = shl i32 %19, 3, !dbg !14
  %26 = and i32 %25, 2040, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = or disjoint i32 %26, 2048, !dbg !14
  %29 = or disjoint i32 %26, 2052, !dbg !14
  %30 = shl i32 %19, 4, !dbg !14
  %31 = and i32 %30, 4080, !dbg !14
  %32 = or disjoint i32 %31, 4, !dbg !14
  %33 = or disjoint i32 %31, 8, !dbg !14
  %34 = or disjoint i32 %31, 12, !dbg !14
  %35 = sext i32 %18 to i64, !dbg !15
  %36 = getelementptr bfloat, ptr addrspace(1) %4, i64 %35, !dbg !15
  %37 = sext i32 %21 to i64, !dbg !15
  %38 = getelementptr bfloat, ptr addrspace(1) %4, i64 %37, !dbg !15
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %22) #5, !dbg !16
  %55 = bitcast i16 %54 to bfloat, !dbg !16
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %71 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %38, i1 %23) #5, !dbg !16
  %72 = bitcast i16 %71 to bfloat, !dbg !16
  %73 = getelementptr bfloat, ptr addrspace(1) %5, i64 %35, !dbg !17
  %74 = getelementptr bfloat, ptr addrspace(1) %5, i64 %37, !dbg !17
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 %22) #5, !dbg !18
  %91 = bitcast i16 %90 to bfloat, !dbg !18
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %93 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %95 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %102 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %74, i1 %23) #5, !dbg !18
  %108 = bitcast i16 %107 to bfloat, !dbg !18
  %109 = icmp samesign ult i32 %28, 3072, !dbg !19
  %110 = icmp samesign ult i32 %31, 3072, !dbg !19
  %111 = mul i32 %17, 6144, !dbg !20
  %112 = mul i32 %21, 3072, !dbg !20
  %113 = add i32 %31, %111, !dbg !21
  %114 = add i32 %32, %111, !dbg !21
  %115 = add i32 %33, %111, !dbg !21
  %116 = add i32 %34, %111, !dbg !21
  %117 = add i32 %112, %31, !dbg !21
  %118 = add i32 %32, %112, !dbg !21
  %119 = add i32 %33, %112, !dbg !21
  %120 = add i32 %34, %112, !dbg !21
  %121 = or disjoint i32 %26, %111, !dbg !21
  %122 = add i32 %28, %111, !dbg !21
  %123 = add i32 %112, %26, !dbg !21
  %124 = add i32 %28, %112, !dbg !21
  %125 = sext i32 %113 to i64, !dbg !22
  %126 = getelementptr bfloat, ptr addrspace(1) %0, i64 %125, !dbg !22
  %127 = sext i32 %115 to i64, !dbg !22
  %128 = getelementptr bfloat, ptr addrspace(1) %0, i64 %127, !dbg !22
  %129 = sext i32 %117 to i64, !dbg !22
  %130 = getelementptr bfloat, ptr addrspace(1) %0, i64 %129, !dbg !22
  %131 = sext i32 %119 to i64, !dbg !22
  %132 = getelementptr bfloat, ptr addrspace(1) %0, i64 %131, !dbg !22
  %133 = and i1 %22, %109, !dbg !23
  %134 = and i1 %23, %109, !dbg !23
  %135 = and i1 %22, %110, !dbg !23
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %126, i1 %135) #5, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !24
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !24
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !24
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %128, i1 %135) #5, !dbg !24
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !24
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !24
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !24
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !24
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %130, i1 %135) #5, !dbg !24
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !24
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !24
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !24
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !24
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %132, i1 %135) #5, !dbg !24
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !24
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !24
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !24
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !24
  %156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %31, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %156, i32 %137, i32 %138, i32 %139, i32 %140, i1 true) #5, !dbg !25
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %33, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %157, i32 %142, i32 %143, i32 %144, i32 %145, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26, !dbg !25
  %159 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 4, !dbg !25
  %160 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 8, !dbg !25
  %161 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 12, !dbg !25
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28, !dbg !25
  %163 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 4, !dbg !25
  %164 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 8, !dbg !25
  %165 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 12, !dbg !25
  %166 = or disjoint i32 %26, 6144, !dbg !26
  %167 = or disjoint i32 %26, 6148, !dbg !26
  %168 = or disjoint i32 %26, 8192, !dbg !26
  %169 = or disjoint i32 %26, 8196, !dbg !26
  %170 = zext nneg i32 %166 to i64, !dbg !27
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !27
  %172 = zext nneg i32 %167 to i64, !dbg !27
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !27
  %174 = zext nneg i32 %168 to i64, !dbg !27
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !27
  %176 = zext nneg i32 %169 to i64, !dbg !27
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !27
  %178 = getelementptr bfloat, ptr addrspace(1) %2, i64 %170, !dbg !28
  %179 = getelementptr bfloat, ptr addrspace(1) %2, i64 %174, !dbg !28
  %180 = getelementptr i32, ptr addrspace(1) %3, i64 %125, !dbg !29
  %181 = sext i32 %114 to i64, !dbg !29
  %182 = getelementptr i32, ptr addrspace(1) %3, i64 %181, !dbg !29
  %183 = getelementptr i32, ptr addrspace(1) %3, i64 %127, !dbg !29
  %184 = sext i32 %116 to i64, !dbg !29
  %185 = getelementptr i32, ptr addrspace(1) %3, i64 %184, !dbg !29
  %186 = getelementptr i32, ptr addrspace(1) %3, i64 %129, !dbg !29
  %187 = sext i32 %118 to i64, !dbg !29
  %188 = getelementptr i32, ptr addrspace(1) %3, i64 %187, !dbg !29
  %189 = getelementptr i32, ptr addrspace(1) %3, i64 %131, !dbg !29
  %190 = sext i32 %120 to i64, !dbg !29
  %191 = getelementptr i32, ptr addrspace(1) %3, i64 %190, !dbg !29
  %192 = zext nneg i32 %26 to i64, !dbg !30
  %193 = getelementptr bfloat, ptr addrspace(1) %6, i64 %192, !dbg !30
  %194 = zext nneg i32 %28 to i64, !dbg !30
  %195 = getelementptr bfloat, ptr addrspace(1) %6, i64 %194, !dbg !30
  %196 = getelementptr bfloat, ptr addrspace(1) %7, i64 %192, !dbg !31
  %197 = getelementptr bfloat, ptr addrspace(1) %7, i64 %194, !dbg !31
  %.inv = fcmp oge bfloat %55, 0xR0000, !dbg !32
  %198 = select i1 %.inv, bfloat 0xR0000, bfloat %55, !dbg !32
  %199 = fpext bfloat %198 to float, !dbg !32
  %.inv67 = fcmp oge bfloat %72, 0xR0000, !dbg !32
  %200 = select i1 %.inv67, bfloat 0xR0000, bfloat %72, !dbg !32
  %201 = fpext bfloat %200 to float, !dbg !32
  %202 = fsub float 0.000000e+00, %199, !dbg !36
  %203 = fsub float 0.000000e+00, %201, !dbg !36
  %.inv68 = fcmp ole bfloat %91, 0xR0000, !dbg !37
  %204 = select i1 %.inv68, bfloat 0xR0000, bfloat %91, !dbg !37
  %205 = fpext bfloat %204 to float, !dbg !37
  %.inv69 = fcmp ole bfloat %108, 0xR0000, !dbg !37
  %206 = select i1 %.inv69, bfloat 0xR0000, bfloat %108, !dbg !37
  %207 = fpext bfloat %206 to float, !dbg !37
  %208 = fcmp ogt float %202, %205, !dbg !39
  %209 = fcmp ogt float %203, %207, !dbg !39
  %210 = fcmp uno float %202, 0.000000e+00, !dbg !41
  %211 = fcmp uno float %203, 0.000000e+00, !dbg !41
  %212 = or i1 %210, %208, !dbg !42
  %213 = or i1 %211, %209, !dbg !42
  %214 = select i1 %212, float %202, float %205, !dbg !43
  %215 = select i1 %213, float %203, float %207, !dbg !43
  %216 = fmul float %214, 0x3F80204080000000, !dbg !44
  %217 = fmul float %215, 0x3F80204080000000, !dbg !44
  %218 = fcmp ogt float %216, 0x3EE4F8B580000000, !dbg !45
  %219 = fcmp ogt float %217, 0x3EE4F8B580000000, !dbg !45
  %220 = fcmp uno float %216, 0.000000e+00, !dbg !47
  %221 = fcmp uno float %217, 0.000000e+00, !dbg !47
  %222 = or i1 %218, %220, !dbg !48
  %223 = or i1 %219, %221, !dbg !48
  %224 = select i1 %222, float %216, float 0x3EE4F8B580000000, !dbg !49
  %225 = select i1 %223, float %217, float 0x3EE4F8B580000000, !dbg !49
  %226 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31, !dbg !50
  %227 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32, !dbg !50
  %228 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %33, !dbg !50
  %229 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %34, !dbg !50
  %230 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !50
  %231 = getelementptr inbounds nuw i8, ptr addrspace(3) %230, i32 8, !dbg !50
  %232 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !50
  %233 = getelementptr inbounds nuw i8, ptr addrspace(3) %232, i32 8, !dbg !50
  %234 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28, !dbg !50
  %235 = getelementptr inbounds nuw i8, ptr addrspace(3) %234, i32 8, !dbg !50
  %236 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29, !dbg !50
  %237 = getelementptr inbounds nuw i8, ptr addrspace(3) %236, i32 8, !dbg !50
  %238 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %239 = select i1 %133, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %240 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %241 = select i1 %134, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %242 = sext i32 %121 to i64, !dbg !52
  %243 = getelementptr bfloat, ptr addrspace(1) %8, i64 %242, !dbg !52
  %244 = sext i32 %122 to i64, !dbg !52
  %245 = getelementptr bfloat, ptr addrspace(1) %8, i64 %244, !dbg !52
  %246 = sext i32 %123 to i64, !dbg !52
  %247 = getelementptr bfloat, ptr addrspace(1) %8, i64 %246, !dbg !52
  %248 = sext i32 %124 to i64, !dbg !52
  %249 = getelementptr bfloat, ptr addrspace(1) %8, i64 %248, !dbg !52
  %250 = getelementptr bfloat, ptr addrspace(1) %8, i64 %125, !dbg !52
  %251 = getelementptr bfloat, ptr addrspace(1) %8, i64 %127, !dbg !52
  %252 = getelementptr bfloat, ptr addrspace(1) %8, i64 %129, !dbg !52
  %253 = getelementptr bfloat, ptr addrspace(1) %8, i64 %131, !dbg !52
  %254 = load <2 x bfloat>, ptr addrspace(3) %161, align 4, !dbg !25
  %255 = fpext <2 x bfloat> %254 to <2 x float>, !dbg !25
  %256 = load <2 x bfloat>, ptr addrspace(3) %160, align 8, !dbg !25
  %257 = fpext <2 x bfloat> %256 to <2 x float>, !dbg !25
  %258 = load <2 x bfloat>, ptr addrspace(3) %159, align 4, !dbg !25
  %259 = fpext <2 x bfloat> %258 to <2 x float>, !dbg !25
  %260 = load <2 x bfloat>, ptr addrspace(3) %158, align 16, !dbg !25
  %261 = fpext <2 x bfloat> %260 to <2 x float>, !dbg !25
  %262 = load <2 x bfloat>, ptr addrspace(3) %165, align 4, !dbg !25
  %263 = fpext <2 x bfloat> %262 to <2 x float>, !dbg !25
  %264 = load <2 x bfloat>, ptr addrspace(3) %164, align 8, !dbg !25
  %265 = fpext <2 x bfloat> %264 to <2 x float>, !dbg !25
  %266 = load <2 x bfloat>, ptr addrspace(3) %163, align 4, !dbg !25
  %267 = fpext <2 x bfloat> %266 to <2 x float>, !dbg !25
  %268 = load <2 x bfloat>, ptr addrspace(3) %162, align 16, !dbg !25
  %269 = fpext <2 x bfloat> %268 to <2 x float>, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %156, i32 %147, i32 %148, i32 %149, i32 %150, i1 true) #5, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %157, i32 %152, i32 %153, i32 %154, i32 %155, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %270 = load <2 x bfloat>, ptr addrspace(3) %161, align 4, !dbg !25
  %271 = fpext <2 x bfloat> %270 to <2 x float>, !dbg !25
  %272 = load <2 x bfloat>, ptr addrspace(3) %160, align 8, !dbg !25
  %273 = fpext <2 x bfloat> %272 to <2 x float>, !dbg !25
  %274 = load <2 x bfloat>, ptr addrspace(3) %159, align 4, !dbg !25
  %275 = fpext <2 x bfloat> %274 to <2 x float>, !dbg !25
  %276 = load <2 x bfloat>, ptr addrspace(3) %158, align 16, !dbg !25
  %277 = fpext <2 x bfloat> %276 to <2 x float>, !dbg !25
  %278 = load <2 x bfloat>, ptr addrspace(3) %165, align 4, !dbg !25
  %279 = fpext <2 x bfloat> %278 to <2 x float>, !dbg !25
  %280 = load <2 x bfloat>, ptr addrspace(3) %164, align 8, !dbg !25
  %281 = fpext <2 x bfloat> %280 to <2 x float>, !dbg !25
  %282 = load <2 x bfloat>, ptr addrspace(3) %163, align 4, !dbg !25
  %283 = fpext <2 x bfloat> %282 to <2 x float>, !dbg !25
  %284 = load <2 x bfloat>, ptr addrspace(3) %162, align 16, !dbg !25
  %285 = fpext <2 x bfloat> %284 to <2 x float>, !dbg !25
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %171, i1 true) #5, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !53
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !53
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !53
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !53
  %291 = insertelement <2 x i32> poison, i32 %287, i64 0, !dbg !53
  %292 = insertelement <2 x i32> %291, i32 %288, i64 1, !dbg !53
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !53
  %294 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !53
  %295 = insertelement <2 x i32> %294, i32 %290, i64 1, !dbg !53
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !53
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %173, i1 true) #5, !dbg !53
  %298 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !53
  %299 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !53
  %300 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !53
  %301 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !53
  %302 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !53
  %303 = insertelement <2 x i32> %302, i32 %299, i64 1, !dbg !53
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !53
  %305 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !53
  %306 = insertelement <2 x i32> %305, i32 %301, i64 1, !dbg !53
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !53
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %175, i1 %109) #5, !dbg !53
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !53
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !53
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !53
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !53
  %313 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !53
  %314 = insertelement <2 x i32> %313, i32 %310, i64 1, !dbg !53
  %315 = bitcast <2 x i32> %314 to <2 x float>, !dbg !53
  %316 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !53
  %317 = insertelement <2 x i32> %316, i32 %312, i64 1, !dbg !53
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !53
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %177, i1 %109) #5, !dbg !53
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !53
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !53
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !53
  %324 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !53
  %325 = insertelement <2 x i32> %324, i32 %321, i64 1, !dbg !53
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !53
  %327 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !53
  %328 = insertelement <2 x i32> %327, i32 %323, i64 1, !dbg !53
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !53
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %178, i1 true) #5, !dbg !54
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !54
  %332 = bitcast i32 %331 to <2 x bfloat>, !dbg !54
  %333 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !54
  %334 = bitcast i32 %333 to <2 x bfloat>, !dbg !54
  %335 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !54
  %336 = bitcast i32 %335 to <2 x bfloat>, !dbg !54
  %337 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !54
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !54
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %179, i1 %109) #5, !dbg !54
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !54
  %341 = bitcast i32 %340 to <2 x bfloat>, !dbg !54
  %342 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !54
  %343 = bitcast i32 %342 to <2 x bfloat>, !dbg !54
  %344 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !54
  %345 = bitcast i32 %344 to <2 x bfloat>, !dbg !54
  %346 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !54
  %347 = bitcast i32 %346 to <2 x bfloat>, !dbg !54
  %348 = fpext <2 x bfloat> %332 to <2 x float>, !dbg !55
  %349 = fpext <2 x bfloat> %334 to <2 x float>, !dbg !55
  %350 = fpext <2 x bfloat> %336 to <2 x float>, !dbg !55
  %351 = fpext <2 x bfloat> %338 to <2 x float>, !dbg !55
  %352 = fpext <2 x bfloat> %341 to <2 x float>, !dbg !55
  %353 = fpext <2 x bfloat> %343 to <2 x float>, !dbg !55
  %354 = fpext <2 x bfloat> %345 to <2 x float>, !dbg !55
  %355 = fpext <2 x bfloat> %347 to <2 x float>, !dbg !55
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %135) #5, !dbg !56
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !56
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !56
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !56
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !56
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %135) #5, !dbg !56
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !56
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !56
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !56
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !56
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %135) #5, !dbg !56
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !56
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !56
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !56
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !56
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %135) #5, !dbg !56
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !56
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !56
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !56
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !56
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %135) #5, !dbg !56
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !56
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !56
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !56
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !56
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %135) #5, !dbg !56
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !56
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !56
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !56
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !56
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %135) #5, !dbg !56
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !56
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !56
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !56
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !56
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %135) #5, !dbg !56
  %392 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !56
  %393 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !56
  %394 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !56
  %395 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !56
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %193, i1 true) #5, !dbg !57
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !57
  %398 = bitcast i32 %397 to <2 x bfloat>, !dbg !57
  %399 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !57
  %400 = bitcast i32 %399 to <2 x bfloat>, !dbg !57
  %401 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !57
  %402 = bitcast i32 %401 to <2 x bfloat>, !dbg !57
  %403 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !57
  %404 = bitcast i32 %403 to <2 x bfloat>, !dbg !57
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %195, i1 %109) #5, !dbg !57
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !57
  %407 = bitcast i32 %406 to <2 x bfloat>, !dbg !57
  %408 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !57
  %409 = bitcast i32 %408 to <2 x bfloat>, !dbg !57
  %410 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !57
  %411 = bitcast i32 %410 to <2 x bfloat>, !dbg !57
  %412 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !57
  %413 = bitcast i32 %412 to <2 x bfloat>, !dbg !57
  %414 = fpext <2 x bfloat> %398 to <2 x float>, !dbg !58
  %415 = fpext <2 x bfloat> %400 to <2 x float>, !dbg !58
  %416 = fpext <2 x bfloat> %402 to <2 x float>, !dbg !58
  %417 = fpext <2 x bfloat> %404 to <2 x float>, !dbg !58
  %418 = fpext <2 x bfloat> %407 to <2 x float>, !dbg !58
  %419 = fpext <2 x bfloat> %409 to <2 x float>, !dbg !58
  %420 = fpext <2 x bfloat> %411 to <2 x float>, !dbg !58
  %421 = fpext <2 x bfloat> %413 to <2 x float>, !dbg !58
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %196, i1 true) #5, !dbg !59
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !59
  %424 = bitcast i32 %423 to <2 x bfloat>, !dbg !59
  %425 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !59
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !59
  %427 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !59
  %428 = bitcast i32 %427 to <2 x bfloat>, !dbg !59
  %429 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !59
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !59
  %431 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %197, i1 %109) #5, !dbg !59
  %432 = extractvalue { i32, i32, i32, i32 } %431, 0, !dbg !59
  %433 = bitcast i32 %432 to <2 x bfloat>, !dbg !59
  %434 = extractvalue { i32, i32, i32, i32 } %431, 1, !dbg !59
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !59
  %436 = extractvalue { i32, i32, i32, i32 } %431, 2, !dbg !59
  %437 = bitcast i32 %436 to <2 x bfloat>, !dbg !59
  %438 = extractvalue { i32, i32, i32, i32 } %431, 3, !dbg !59
  %439 = bitcast i32 %438 to <2 x bfloat>, !dbg !59
  %440 = fpext <2 x bfloat> %424 to <2 x float>, !dbg !60
  %441 = fpext <2 x bfloat> %426 to <2 x float>, !dbg !60
  %442 = fpext <2 x bfloat> %428 to <2 x float>, !dbg !60
  %443 = fpext <2 x bfloat> %430 to <2 x float>, !dbg !60
  %444 = fpext <2 x bfloat> %433 to <2 x float>, !dbg !60
  %445 = fpext <2 x bfloat> %435 to <2 x float>, !dbg !60
  %446 = fpext <2 x bfloat> %437 to <2 x float>, !dbg !60
  %447 = fpext <2 x bfloat> %439 to <2 x float>, !dbg !60
  %448 = fadd <2 x float> %293, %348, !dbg !61
  %449 = fadd <2 x float> %296, %349, !dbg !61
  %450 = fadd <2 x float> %304, %350, !dbg !61
  %451 = fadd <2 x float> %307, %351, !dbg !61
  %452 = fadd <2 x float> %315, %352, !dbg !61
  %453 = fadd <2 x float> %318, %353, !dbg !61
  %454 = fadd <2 x float> %326, %354, !dbg !61
  %455 = fadd <2 x float> %329, %355, !dbg !61
  %456 = sitofp i32 %357 to float, !dbg !62
  %457 = sitofp i32 %358 to float, !dbg !62
  %458 = sitofp i32 %359 to float, !dbg !62
  %459 = sitofp i32 %360 to float, !dbg !62
  %460 = sitofp i32 %362 to float, !dbg !62
  %461 = sitofp i32 %363 to float, !dbg !62
  %462 = sitofp i32 %364 to float, !dbg !62
  %463 = sitofp i32 %365 to float, !dbg !62
  %464 = sitofp i32 %367 to float, !dbg !62
  %465 = sitofp i32 %368 to float, !dbg !62
  %466 = sitofp i32 %369 to float, !dbg !62
  %467 = sitofp i32 %370 to float, !dbg !62
  %468 = sitofp i32 %372 to float, !dbg !62
  %469 = sitofp i32 %373 to float, !dbg !62
  %470 = sitofp i32 %374 to float, !dbg !62
  %471 = sitofp i32 %375 to float, !dbg !62
  %472 = sitofp i32 %377 to float, !dbg !62
  %473 = sitofp i32 %378 to float, !dbg !62
  %474 = sitofp i32 %379 to float, !dbg !62
  %475 = sitofp i32 %380 to float, !dbg !62
  %476 = sitofp i32 %382 to float, !dbg !62
  %477 = sitofp i32 %383 to float, !dbg !62
  %478 = sitofp i32 %384 to float, !dbg !62
  %479 = sitofp i32 %385 to float, !dbg !62
  %480 = sitofp i32 %387 to float, !dbg !62
  %481 = sitofp i32 %388 to float, !dbg !62
  %482 = sitofp i32 %389 to float, !dbg !62
  %483 = sitofp i32 %390 to float, !dbg !62
  %484 = sitofp i32 %392 to float, !dbg !62
  %485 = sitofp i32 %393 to float, !dbg !62
  %486 = sitofp i32 %394 to float, !dbg !62
  %487 = sitofp i32 %395 to float, !dbg !62
  %488 = fmul float %224, %456, !dbg !50
  %489 = fmul float %224, %457, !dbg !50
  %490 = fmul float %224, %458, !dbg !50
  %491 = fmul float %224, %459, !dbg !50
  %492 = fmul float %224, %460, !dbg !50
  %493 = fmul float %224, %461, !dbg !50
  %494 = fmul float %224, %462, !dbg !50
  %495 = fmul float %224, %463, !dbg !50
  %496 = fmul float %224, %464, !dbg !50
  %497 = fmul float %224, %465, !dbg !50
  %498 = fmul float %224, %466, !dbg !50
  %499 = fmul float %224, %467, !dbg !50
  %500 = fmul float %224, %468, !dbg !50
  %501 = fmul float %224, %469, !dbg !50
  %502 = fmul float %224, %470, !dbg !50
  %503 = fmul float %224, %471, !dbg !50
  %504 = fmul float %225, %472, !dbg !50
  %505 = fmul float %225, %473, !dbg !50
  %506 = fmul float %225, %474, !dbg !50
  %507 = fmul float %225, %475, !dbg !50
  %508 = fmul float %225, %476, !dbg !50
  %509 = fmul float %225, %477, !dbg !50
  %510 = fmul float %225, %478, !dbg !50
  %511 = fmul float %225, %479, !dbg !50
  %512 = fmul float %225, %480, !dbg !50
  %513 = fmul float %225, %481, !dbg !50
  %514 = fmul float %225, %482, !dbg !50
  %515 = fmul float %225, %483, !dbg !50
  %516 = fmul float %225, %484, !dbg !50
  %517 = fmul float %225, %485, !dbg !50
  %518 = fmul float %225, %486, !dbg !50
  %519 = fmul float %225, %487, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %520 = bitcast float %488 to i32, !dbg !50
  %521 = bitcast float %489 to i32, !dbg !50
  %522 = bitcast float %490 to i32, !dbg !50
  %523 = bitcast float %491 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %226, i32 %520, i32 %521, i32 %522, i32 %523, i1 true) #5, !dbg !50
  %524 = bitcast float %492 to i32, !dbg !50
  %525 = bitcast float %493 to i32, !dbg !50
  %526 = bitcast float %494 to i32, !dbg !50
  %527 = bitcast float %495 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %227, i32 %524, i32 %525, i32 %526, i32 %527, i1 true) #5, !dbg !50
  %528 = bitcast float %496 to i32, !dbg !50
  %529 = bitcast float %497 to i32, !dbg !50
  %530 = bitcast float %498 to i32, !dbg !50
  %531 = bitcast float %499 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %228, i32 %528, i32 %529, i32 %530, i32 %531, i1 true) #5, !dbg !50
  %532 = bitcast float %500 to i32, !dbg !50
  %533 = bitcast float %501 to i32, !dbg !50
  %534 = bitcast float %502 to i32, !dbg !50
  %535 = bitcast float %503 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %229, i32 %532, i32 %533, i32 %534, i32 %535, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %536 = load <2 x float>, ptr addrspace(3) %230, align 16, !dbg !50
  %537 = load <2 x float>, ptr addrspace(3) %231, align 8, !dbg !50
  %538 = load <2 x float>, ptr addrspace(3) %232, align 16, !dbg !50
  %539 = load <2 x float>, ptr addrspace(3) %233, align 8, !dbg !50
  %540 = load <2 x float>, ptr addrspace(3) %234, align 16, !dbg !50
  %541 = load <2 x float>, ptr addrspace(3) %235, align 8, !dbg !50
  %542 = load <2 x float>, ptr addrspace(3) %236, align 16, !dbg !50
  %543 = load <2 x float>, ptr addrspace(3) %237, align 8, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %544 = bitcast float %504 to i32, !dbg !50
  %545 = bitcast float %505 to i32, !dbg !50
  %546 = bitcast float %506 to i32, !dbg !50
  %547 = bitcast float %507 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %226, i32 %544, i32 %545, i32 %546, i32 %547, i1 true) #5, !dbg !50
  %548 = bitcast float %508 to i32, !dbg !50
  %549 = bitcast float %509 to i32, !dbg !50
  %550 = bitcast float %510 to i32, !dbg !50
  %551 = bitcast float %511 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %227, i32 %548, i32 %549, i32 %550, i32 %551, i1 true) #5, !dbg !50
  %552 = bitcast float %512 to i32, !dbg !50
  %553 = bitcast float %513 to i32, !dbg !50
  %554 = bitcast float %514 to i32, !dbg !50
  %555 = bitcast float %515 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %228, i32 %552, i32 %553, i32 %554, i32 %555, i1 true) #5, !dbg !50
  %556 = bitcast float %516 to i32, !dbg !50
  %557 = bitcast float %517 to i32, !dbg !50
  %558 = bitcast float %518 to i32, !dbg !50
  %559 = bitcast float %519 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %229, i32 %556, i32 %557, i32 %558, i32 %559, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %560 = load <2 x float>, ptr addrspace(3) %230, align 16, !dbg !50
  %561 = load <2 x float>, ptr addrspace(3) %231, align 8, !dbg !50
  %562 = load <2 x float>, ptr addrspace(3) %232, align 16, !dbg !50
  %563 = load <2 x float>, ptr addrspace(3) %233, align 8, !dbg !50
  %564 = load <2 x float>, ptr addrspace(3) %234, align 16, !dbg !50
  %565 = load <2 x float>, ptr addrspace(3) %235, align 8, !dbg !50
  %566 = load <2 x float>, ptr addrspace(3) %236, align 16, !dbg !50
  %567 = load <2 x float>, ptr addrspace(3) %237, align 8, !dbg !50
  %568 = fmul <2 x float> %536, %414, !dbg !63
  %569 = fmul <2 x float> %537, %415, !dbg !63
  %570 = fmul <2 x float> %538, %416, !dbg !63
  %571 = fmul <2 x float> %539, %417, !dbg !63
  %572 = fmul <2 x float> %540, %418, !dbg !63
  %573 = fmul <2 x float> %541, %419, !dbg !63
  %574 = fmul <2 x float> %542, %420, !dbg !63
  %575 = fmul <2 x float> %543, %421, !dbg !63
  %576 = fmul <2 x float> %560, %414, !dbg !63
  %577 = fmul <2 x float> %561, %415, !dbg !63
  %578 = fmul <2 x float> %562, %416, !dbg !63
  %579 = fmul <2 x float> %563, %417, !dbg !63
  %580 = fmul <2 x float> %564, %418, !dbg !63
  %581 = fmul <2 x float> %565, %419, !dbg !63
  %582 = fmul <2 x float> %566, %420, !dbg !63
  %583 = fmul <2 x float> %567, %421, !dbg !63
  %584 = fadd <2 x float> %568, %440, !dbg !64
  %585 = fadd <2 x float> %569, %441, !dbg !64
  %586 = fadd <2 x float> %570, %442, !dbg !64
  %587 = fadd <2 x float> %571, %443, !dbg !64
  %588 = fadd <2 x float> %572, %444, !dbg !64
  %589 = fadd <2 x float> %573, %445, !dbg !64
  %590 = fadd <2 x float> %574, %446, !dbg !64
  %591 = fadd <2 x float> %575, %447, !dbg !64
  %592 = fadd <2 x float> %576, %440, !dbg !64
  %593 = fadd <2 x float> %577, %441, !dbg !64
  %594 = fadd <2 x float> %578, %442, !dbg !64
  %595 = fadd <2 x float> %579, %443, !dbg !64
  %596 = fadd <2 x float> %580, %444, !dbg !64
  %597 = fadd <2 x float> %581, %445, !dbg !64
  %598 = fadd <2 x float> %582, %446, !dbg !64
  %599 = fadd <2 x float> %583, %447, !dbg !64
  %600 = fmul <2 x float> %448, %584, !dbg !65
  %601 = fmul <2 x float> %449, %585, !dbg !65
  %602 = fmul <2 x float> %450, %586, !dbg !65
  %603 = fmul <2 x float> %451, %587, !dbg !65
  %604 = fmul <2 x float> %452, %588, !dbg !65
  %605 = fmul <2 x float> %453, %589, !dbg !65
  %606 = fmul <2 x float> %454, %590, !dbg !65
  %607 = fmul <2 x float> %455, %591, !dbg !65
  %608 = fmul <2 x float> %448, %592, !dbg !65
  %609 = fmul <2 x float> %449, %593, !dbg !65
  %610 = fmul <2 x float> %450, %594, !dbg !65
  %611 = fmul <2 x float> %451, %595, !dbg !65
  %612 = fmul <2 x float> %452, %596, !dbg !65
  %613 = fmul <2 x float> %453, %597, !dbg !65
  %614 = fmul <2 x float> %454, %598, !dbg !65
  %615 = fmul <2 x float> %455, %599, !dbg !65
  %616 = fadd <2 x float> %600, %261, !dbg !66
  %617 = fadd <2 x float> %601, %259, !dbg !66
  %618 = fadd <2 x float> %602, %257, !dbg !66
  %619 = fadd <2 x float> %603, %255, !dbg !66
  %620 = fadd <2 x float> %604, %269, !dbg !66
  %621 = fadd <2 x float> %605, %267, !dbg !66
  %622 = fadd <2 x float> %606, %265, !dbg !66
  %623 = fadd <2 x float> %607, %263, !dbg !66
  %624 = fadd <2 x float> %608, %277, !dbg !66
  %625 = fadd <2 x float> %609, %275, !dbg !66
  %626 = fadd <2 x float> %610, %273, !dbg !66
  %627 = fadd <2 x float> %611, %271, !dbg !66
  %628 = fadd <2 x float> %612, %285, !dbg !66
  %629 = fadd <2 x float> %613, %283, !dbg !66
  %630 = fadd <2 x float> %614, %281, !dbg !66
  %631 = fadd <2 x float> %615, %279, !dbg !66
  %632 = extractelement <2 x float> %616, i64 0, !dbg !67
  %633 = select i1 %22, float %632, float 0.000000e+00, !dbg !67
  %634 = extractelement <2 x float> %616, i64 1, !dbg !67
  %635 = select i1 %22, float %634, float 0.000000e+00, !dbg !67
  %636 = extractelement <2 x float> %617, i64 0, !dbg !67
  %637 = select i1 %22, float %636, float 0.000000e+00, !dbg !67
  %638 = extractelement <2 x float> %617, i64 1, !dbg !67
  %639 = select i1 %22, float %638, float 0.000000e+00, !dbg !67
  %640 = extractelement <2 x float> %618, i64 0, !dbg !67
  %641 = select i1 %22, float %640, float 0.000000e+00, !dbg !67
  %642 = extractelement <2 x float> %618, i64 1, !dbg !67
  %643 = select i1 %22, float %642, float 0.000000e+00, !dbg !67
  %644 = extractelement <2 x float> %619, i64 0, !dbg !67
  %645 = select i1 %22, float %644, float 0.000000e+00, !dbg !67
  %646 = extractelement <2 x float> %619, i64 1, !dbg !67
  %647 = select i1 %22, float %646, float 0.000000e+00, !dbg !67
  %648 = extractelement <2 x float> %620, i64 0, !dbg !67
  %649 = select i1 %133, float %648, float 0.000000e+00, !dbg !67
  %650 = extractelement <2 x float> %620, i64 1, !dbg !67
  %651 = select i1 %133, float %650, float 0.000000e+00, !dbg !67
  %652 = extractelement <2 x float> %621, i64 0, !dbg !67
  %653 = select i1 %133, float %652, float 0.000000e+00, !dbg !67
  %654 = extractelement <2 x float> %621, i64 1, !dbg !67
  %655 = select i1 %133, float %654, float 0.000000e+00, !dbg !67
  %656 = extractelement <2 x float> %622, i64 0, !dbg !67
  %657 = select i1 %133, float %656, float 0.000000e+00, !dbg !67
  %658 = extractelement <2 x float> %622, i64 1, !dbg !67
  %659 = select i1 %133, float %658, float 0.000000e+00, !dbg !67
  %660 = extractelement <2 x float> %623, i64 0, !dbg !67
  %661 = select i1 %133, float %660, float 0.000000e+00, !dbg !67
  %662 = extractelement <2 x float> %623, i64 1, !dbg !67
  %663 = select i1 %133, float %662, float 0.000000e+00, !dbg !67
  %664 = extractelement <2 x float> %624, i64 0, !dbg !67
  %665 = select i1 %23, float %664, float 0.000000e+00, !dbg !67
  %666 = extractelement <2 x float> %624, i64 1, !dbg !67
  %667 = select i1 %23, float %666, float 0.000000e+00, !dbg !67
  %668 = extractelement <2 x float> %625, i64 0, !dbg !67
  %669 = select i1 %23, float %668, float 0.000000e+00, !dbg !67
  %670 = extractelement <2 x float> %625, i64 1, !dbg !67
  %671 = select i1 %23, float %670, float 0.000000e+00, !dbg !67
  %672 = extractelement <2 x float> %626, i64 0, !dbg !67
  %673 = select i1 %23, float %672, float 0.000000e+00, !dbg !67
  %674 = extractelement <2 x float> %626, i64 1, !dbg !67
  %675 = select i1 %23, float %674, float 0.000000e+00, !dbg !67
  %676 = extractelement <2 x float> %627, i64 0, !dbg !67
  %677 = select i1 %23, float %676, float 0.000000e+00, !dbg !67
  %678 = extractelement <2 x float> %627, i64 1, !dbg !67
  %679 = select i1 %23, float %678, float 0.000000e+00, !dbg !67
  %680 = extractelement <2 x float> %628, i64 0, !dbg !67
  %681 = select i1 %134, float %680, float 0.000000e+00, !dbg !67
  %682 = extractelement <2 x float> %628, i64 1, !dbg !67
  %683 = select i1 %134, float %682, float 0.000000e+00, !dbg !67
  %684 = extractelement <2 x float> %629, i64 0, !dbg !67
  %685 = select i1 %134, float %684, float 0.000000e+00, !dbg !67
  %686 = extractelement <2 x float> %629, i64 1, !dbg !67
  %687 = select i1 %134, float %686, float 0.000000e+00, !dbg !67
  %688 = extractelement <2 x float> %630, i64 0, !dbg !67
  %689 = select i1 %134, float %688, float 0.000000e+00, !dbg !67
  %690 = extractelement <2 x float> %630, i64 1, !dbg !67
  %691 = select i1 %134, float %690, float 0.000000e+00, !dbg !67
  %692 = extractelement <2 x float> %631, i64 0, !dbg !67
  %693 = select i1 %134, float %692, float 0.000000e+00, !dbg !67
  %694 = extractelement <2 x float> %631, i64 1, !dbg !67
  %695 = select i1 %134, float %694, float 0.000000e+00, !dbg !67
  %696 = fptrunc <2 x float> %616 to <2 x bfloat>, !dbg !68
  %697 = fptrunc <2 x float> %617 to <2 x bfloat>, !dbg !68
  %698 = fptrunc <2 x float> %618 to <2 x bfloat>, !dbg !68
  %699 = fptrunc <2 x float> %619 to <2 x bfloat>, !dbg !68
  %700 = fptrunc <2 x float> %620 to <2 x bfloat>, !dbg !68
  %701 = fptrunc <2 x float> %621 to <2 x bfloat>, !dbg !68
  %702 = fptrunc <2 x float> %622 to <2 x bfloat>, !dbg !68
  %703 = fptrunc <2 x float> %623 to <2 x bfloat>, !dbg !68
  %704 = fptrunc <2 x float> %624 to <2 x bfloat>, !dbg !68
  %705 = fptrunc <2 x float> %625 to <2 x bfloat>, !dbg !68
  %706 = fptrunc <2 x float> %626 to <2 x bfloat>, !dbg !68
  %707 = fptrunc <2 x float> %627 to <2 x bfloat>, !dbg !68
  %708 = fptrunc <2 x float> %628 to <2 x bfloat>, !dbg !68
  %709 = fptrunc <2 x float> %629 to <2 x bfloat>, !dbg !68
  %710 = fptrunc <2 x float> %630 to <2 x bfloat>, !dbg !68
  %711 = fptrunc <2 x float> %631 to <2 x bfloat>, !dbg !68
  %712 = bitcast <2 x bfloat> %696 to i32, !dbg !68
  %713 = bitcast <2 x bfloat> %697 to i32, !dbg !68
  %714 = bitcast <2 x bfloat> %698 to i32, !dbg !68
  %715 = bitcast <2 x bfloat> %699 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %712, i32 %713, i32 %714, i32 %715, ptr addrspace(1) %243, i1 %22) #5, !dbg !68
  %716 = bitcast <2 x bfloat> %700 to i32, !dbg !68
  %717 = bitcast <2 x bfloat> %701 to i32, !dbg !68
  %718 = bitcast <2 x bfloat> %702 to i32, !dbg !68
  %719 = bitcast <2 x bfloat> %703 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %716, i32 %717, i32 %718, i32 %719, ptr addrspace(1) %245, i1 %133) #5, !dbg !68
  %720 = bitcast <2 x bfloat> %704 to i32, !dbg !68
  %721 = bitcast <2 x bfloat> %705 to i32, !dbg !68
  %722 = bitcast <2 x bfloat> %706 to i32, !dbg !68
  %723 = bitcast <2 x bfloat> %707 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %720, i32 %721, i32 %722, i32 %723, ptr addrspace(1) %247, i1 %23) #5, !dbg !68
  %724 = bitcast <2 x bfloat> %708 to i32, !dbg !68
  %725 = bitcast <2 x bfloat> %709 to i32, !dbg !68
  %726 = bitcast <2 x bfloat> %710 to i32, !dbg !68
  %727 = bitcast <2 x bfloat> %711 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %724, i32 %725, i32 %726, i32 %727, ptr addrspace(1) %249, i1 %134) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %728 = fsub float %635, %633, !dbg !71
  %729 = select i1 %22, float 2.000000e+00, float 0.000000e+00, !dbg !73
  %730 = fcmp oeq float %729, 0.000000e+00, !dbg !74
  %731 = tail call float @llvm.nvvm.div.full(float %238, float %729), !dbg !75
  %732 = select i1 %730, float 0.000000e+00, float %731, !dbg !76
  %733 = fmul float %728, %732, !dbg !77
  %734 = fadd float %633, %733, !dbg !78
  %735 = fmul float %728, %728, !dbg !79
  %736 = fmul float %238, %735, !dbg !80
  %737 = fmul float %736, %732, !dbg !81
  %738 = fadd float %737, 0.000000e+00, !dbg !82
  %739 = fsub float %637, %734, !dbg !71
  %740 = select i1 %22, float 3.000000e+00, float 0.000000e+00, !dbg !73
  %741 = fcmp oeq float %740, 0.000000e+00, !dbg !74
  %742 = tail call float @llvm.nvvm.div.full(float %238, float %740), !dbg !75
  %743 = select i1 %741, float 0.000000e+00, float %742, !dbg !76
  %744 = fmul float %743, %739, !dbg !77
  %745 = fadd float %734, %744, !dbg !78
  %746 = fmul float %739, %739, !dbg !79
  %747 = fmul float %729, %746, !dbg !80
  %748 = fmul float %743, %747, !dbg !81
  %749 = fadd float %738, %748, !dbg !82
  %750 = fsub float %639, %745, !dbg !71
  %751 = select i1 %22, float 4.000000e+00, float 0.000000e+00, !dbg !73
  %752 = fcmp oeq float %751, 0.000000e+00, !dbg !74
  %753 = tail call float @llvm.nvvm.div.full(float %238, float %751), !dbg !75
  %754 = select i1 %752, float 0.000000e+00, float %753, !dbg !76
  %755 = fmul float %754, %750, !dbg !77
  %756 = fadd float %745, %755, !dbg !78
  %757 = fmul float %750, %750, !dbg !79
  %758 = fmul float %740, %757, !dbg !80
  %759 = fmul float %754, %758, !dbg !81
  %760 = fadd float %749, %759, !dbg !82
  %761 = fsub float %641, %756, !dbg !71
  %762 = select i1 %22, float 5.000000e+00, float 0.000000e+00, !dbg !73
  %763 = fcmp oeq float %762, 0.000000e+00, !dbg !74
  %764 = tail call float @llvm.nvvm.div.full(float %238, float %762), !dbg !75
  %765 = select i1 %763, float 0.000000e+00, float %764, !dbg !76
  %766 = fmul float %765, %761, !dbg !77
  %767 = fadd float %756, %766, !dbg !78
  %768 = fmul float %761, %761, !dbg !79
  %769 = fmul float %751, %768, !dbg !80
  %770 = fmul float %765, %769, !dbg !81
  %771 = fadd float %760, %770, !dbg !82
  %772 = fsub float %643, %767, !dbg !71
  %773 = select i1 %22, float 6.000000e+00, float 0.000000e+00, !dbg !73
  %774 = fcmp oeq float %773, 0.000000e+00, !dbg !74
  %775 = tail call float @llvm.nvvm.div.full(float %238, float %773), !dbg !75
  %776 = select i1 %774, float 0.000000e+00, float %775, !dbg !76
  %777 = fmul float %776, %772, !dbg !77
  %778 = fadd float %767, %777, !dbg !78
  %779 = fmul float %772, %772, !dbg !79
  %780 = fmul float %762, %779, !dbg !80
  %781 = fmul float %776, %780, !dbg !81
  %782 = fadd float %771, %781, !dbg !82
  %783 = fsub float %645, %778, !dbg !71
  %784 = select i1 %22, float 7.000000e+00, float 0.000000e+00, !dbg !73
  %785 = fcmp oeq float %784, 0.000000e+00, !dbg !74
  %786 = tail call float @llvm.nvvm.div.full(float %238, float %784), !dbg !75
  %787 = select i1 %785, float 0.000000e+00, float %786, !dbg !76
  %788 = fmul float %787, %783, !dbg !77
  %789 = fadd float %778, %788, !dbg !78
  %790 = fmul float %783, %783, !dbg !79
  %791 = fmul float %773, %790, !dbg !80
  %792 = fmul float %787, %791, !dbg !81
  %793 = fadd float %782, %792, !dbg !82
  %794 = fsub float %647, %789, !dbg !71
  %795 = select i1 %22, float 8.000000e+00, float 0.000000e+00, !dbg !73
  %796 = fcmp oeq float %795, 0.000000e+00, !dbg !74
  %797 = tail call float @llvm.nvvm.div.full(float %238, float %795), !dbg !75
  %798 = select i1 %796, float 0.000000e+00, float %797, !dbg !76
  %799 = fmul float %798, %794, !dbg !77
  %800 = fadd float %789, %799, !dbg !78
  %801 = fmul float %794, %794, !dbg !79
  %802 = fmul float %784, %801, !dbg !80
  %803 = fmul float %798, %802, !dbg !81
  %804 = fadd float %793, %803, !dbg !82
  %805 = fsub float %649, %800, !dbg !71
  %806 = fadd float %795, %239, !dbg !73
  %807 = fcmp oeq float %806, 0.000000e+00, !dbg !74
  %808 = tail call float @llvm.nvvm.div.full(float %239, float %806), !dbg !75
  %809 = select i1 %807, float 0.000000e+00, float %808, !dbg !76
  %810 = fmul float %809, %805, !dbg !77
  %811 = fadd float %800, %810, !dbg !78
  %812 = fadd float %804, 0.000000e+00, !dbg !83
  %813 = fmul float %805, %805, !dbg !79
  %814 = fmul float %795, %813, !dbg !80
  %815 = fmul float %809, %814, !dbg !81
  %816 = fadd float %812, %815, !dbg !82
  %817 = fsub float %651, %811, !dbg !71
  %818 = fadd float %239, %806, !dbg !73
  %819 = fcmp oeq float %818, 0.000000e+00, !dbg !74
  %820 = tail call float @llvm.nvvm.div.full(float %239, float %818), !dbg !75
  %821 = select i1 %819, float 0.000000e+00, float %820, !dbg !76
  %822 = fmul float %821, %817, !dbg !77
  %823 = fadd float %811, %822, !dbg !78
  %824 = fmul float %817, %817, !dbg !79
  %825 = fmul float %806, %824, !dbg !80
  %826 = fmul float %821, %825, !dbg !81
  %827 = fadd float %816, %826, !dbg !82
  %828 = fsub float %653, %823, !dbg !71
  %829 = fadd float %239, %818, !dbg !73
  %830 = fcmp oeq float %829, 0.000000e+00, !dbg !74
  %831 = tail call float @llvm.nvvm.div.full(float %239, float %829), !dbg !75
  %832 = select i1 %830, float 0.000000e+00, float %831, !dbg !76
  %833 = fmul float %832, %828, !dbg !77
  %834 = fadd float %823, %833, !dbg !78
  %835 = fmul float %828, %828, !dbg !79
  %836 = fmul float %818, %835, !dbg !80
  %837 = fmul float %832, %836, !dbg !81
  %838 = fadd float %827, %837, !dbg !82
  %839 = fsub float %655, %834, !dbg !71
  %840 = fadd float %239, %829, !dbg !73
  %841 = fcmp oeq float %840, 0.000000e+00, !dbg !74
  %842 = tail call float @llvm.nvvm.div.full(float %239, float %840), !dbg !75
  %843 = select i1 %841, float 0.000000e+00, float %842, !dbg !76
  %844 = fmul float %843, %839, !dbg !77
  %845 = fadd float %834, %844, !dbg !78
  %846 = fmul float %839, %839, !dbg !79
  %847 = fmul float %829, %846, !dbg !80
  %848 = fmul float %843, %847, !dbg !81
  %849 = fadd float %838, %848, !dbg !82
  %850 = fsub float %657, %845, !dbg !71
  %851 = fadd float %239, %840, !dbg !73
  %852 = fcmp oeq float %851, 0.000000e+00, !dbg !74
  %853 = tail call float @llvm.nvvm.div.full(float %239, float %851), !dbg !75
  %854 = select i1 %852, float 0.000000e+00, float %853, !dbg !76
  %855 = fmul float %854, %850, !dbg !77
  %856 = fadd float %845, %855, !dbg !78
  %857 = fmul float %850, %850, !dbg !79
  %858 = fmul float %840, %857, !dbg !80
  %859 = fmul float %854, %858, !dbg !81
  %860 = fadd float %849, %859, !dbg !82
  %861 = fsub float %659, %856, !dbg !71
  %862 = fmul float %861, %861, !dbg !79
  %863 = fmul float %851, %862, !dbg !80
  %864 = fadd float %239, %851, !dbg !73
  %865 = fcmp oeq float %864, 0.000000e+00, !dbg !74
  %866 = tail call float @llvm.nvvm.div.full(float %239, float %864), !dbg !75
  %867 = select i1 %865, float 0.000000e+00, float %866, !dbg !76
  %868 = fmul float %867, %861, !dbg !77
  %869 = fadd float %856, %868, !dbg !78
  %870 = fmul float %867, %863, !dbg !81
  %871 = fadd float %860, %870, !dbg !82
  %872 = fsub float %661, %869, !dbg !71
  %873 = fadd float %239, %864, !dbg !73
  %874 = tail call float @llvm.nvvm.div.full(float %239, float %873), !dbg !75
  %875 = fadd float %239, %873, !dbg !73
  %876 = insertelement <2 x float> poison, float %873, i64 0, !dbg !74
  %877 = insertelement <2 x float> %876, float %875, i64 1, !dbg !74
  %878 = fcmp oeq <2 x float> %877, zeroinitializer, !dbg !74
  %879 = tail call float @llvm.nvvm.div.full(float %239, float %875), !dbg !75
  %880 = insertelement <2 x float> poison, float %874, i64 0, !dbg !76
  %881 = insertelement <2 x float> %880, float %879, i64 1, !dbg !76
  %882 = select <2 x i1> %878, <2 x float> zeroinitializer, <2 x float> %881, !dbg !76
  %883 = extractelement <2 x float> %882, i64 0, !dbg !77
  %884 = fmul float %883, %872, !dbg !77
  %885 = fadd float %869, %884, !dbg !78
  %886 = fadd float %871, 0.000000e+00, !dbg !83
  %887 = fsub float %663, %885, !dbg !71
  %888 = insertelement <2 x float> poison, float %872, i64 0, !dbg !79
  %889 = insertelement <2 x float> %888, float %887, i64 1, !dbg !79
  %890 = fmul <2 x float> %889, %889, !dbg !79
  %891 = insertelement <2 x float> poison, float %864, i64 0, !dbg !80
  %892 = insertelement <2 x float> %891, float %873, i64 1, !dbg !80
  %893 = fmul <2 x float> %892, %890, !dbg !80
  %894 = fmul <2 x float> %882, %893, !dbg !81
  %895 = extractelement <2 x float> %894, i64 0, !dbg !82
  %896 = fadd float %886, %895, !dbg !82
  %897 = extractelement <2 x float> %882, i64 1, !dbg !77
  %898 = fmul float %897, %887, !dbg !77
  %899 = fadd float %885, %898, !dbg !78
  %900 = extractelement <2 x float> %894, i64 1, !dbg !82
  %901 = fadd float %896, %900, !dbg !82
  %902 = fsub float %667, %665, !dbg !71
  %903 = select i1 %23, float 2.000000e+00, float 0.000000e+00, !dbg !73
  %904 = fcmp oeq float %903, 0.000000e+00, !dbg !74
  %905 = tail call float @llvm.nvvm.div.full(float %240, float %903), !dbg !75
  %906 = select i1 %904, float 0.000000e+00, float %905, !dbg !76
  %907 = fmul float %902, %906, !dbg !77
  %908 = fadd float %665, %907, !dbg !78
  %909 = fmul float %902, %902, !dbg !79
  %910 = fmul float %240, %909, !dbg !80
  %911 = fmul float %910, %906, !dbg !81
  %912 = fadd float %911, 0.000000e+00, !dbg !82
  %913 = fsub float %669, %908, !dbg !71
  %914 = select i1 %23, float 3.000000e+00, float 0.000000e+00, !dbg !73
  %915 = fcmp oeq float %914, 0.000000e+00, !dbg !74
  %916 = tail call float @llvm.nvvm.div.full(float %240, float %914), !dbg !75
  %917 = select i1 %915, float 0.000000e+00, float %916, !dbg !76
  %918 = fmul float %917, %913, !dbg !77
  %919 = fadd float %908, %918, !dbg !78
  %920 = fmul float %913, %913, !dbg !79
  %921 = fmul float %903, %920, !dbg !80
  %922 = fmul float %917, %921, !dbg !81
  %923 = fadd float %912, %922, !dbg !82
  %924 = fsub float %671, %919, !dbg !71
  %925 = select i1 %23, float 4.000000e+00, float 0.000000e+00, !dbg !73
  %926 = fcmp oeq float %925, 0.000000e+00, !dbg !74
  %927 = tail call float @llvm.nvvm.div.full(float %240, float %925), !dbg !75
  %928 = select i1 %926, float 0.000000e+00, float %927, !dbg !76
  %929 = fmul float %928, %924, !dbg !77
  %930 = fadd float %919, %929, !dbg !78
  %931 = fmul float %924, %924, !dbg !79
  %932 = fmul float %914, %931, !dbg !80
  %933 = fmul float %928, %932, !dbg !81
  %934 = fadd float %923, %933, !dbg !82
  %935 = fsub float %673, %930, !dbg !71
  %936 = select i1 %23, float 5.000000e+00, float 0.000000e+00, !dbg !73
  %937 = fcmp oeq float %936, 0.000000e+00, !dbg !74
  %938 = tail call float @llvm.nvvm.div.full(float %240, float %936), !dbg !75
  %939 = select i1 %937, float 0.000000e+00, float %938, !dbg !76
  %940 = fmul float %939, %935, !dbg !77
  %941 = fadd float %930, %940, !dbg !78
  %942 = fmul float %935, %935, !dbg !79
  %943 = fmul float %925, %942, !dbg !80
  %944 = fmul float %939, %943, !dbg !81
  %945 = fadd float %934, %944, !dbg !82
  %946 = fsub float %675, %941, !dbg !71
  %947 = select i1 %23, float 6.000000e+00, float 0.000000e+00, !dbg !73
  %948 = fcmp oeq float %947, 0.000000e+00, !dbg !74
  %949 = tail call float @llvm.nvvm.div.full(float %240, float %947), !dbg !75
  %950 = select i1 %948, float 0.000000e+00, float %949, !dbg !76
  %951 = fmul float %950, %946, !dbg !77
  %952 = fadd float %941, %951, !dbg !78
  %953 = fmul float %946, %946, !dbg !79
  %954 = fmul float %936, %953, !dbg !80
  %955 = fmul float %950, %954, !dbg !81
  %956 = fadd float %945, %955, !dbg !82
  %957 = fsub float %677, %952, !dbg !71
  %958 = select i1 %23, float 7.000000e+00, float 0.000000e+00, !dbg !73
  %959 = fcmp oeq float %958, 0.000000e+00, !dbg !74
  %960 = tail call float @llvm.nvvm.div.full(float %240, float %958), !dbg !75
  %961 = select i1 %959, float 0.000000e+00, float %960, !dbg !76
  %962 = fmul float %961, %957, !dbg !77
  %963 = fadd float %952, %962, !dbg !78
  %964 = fmul float %957, %957, !dbg !79
  %965 = fmul float %947, %964, !dbg !80
  %966 = fmul float %961, %965, !dbg !81
  %967 = fadd float %956, %966, !dbg !82
  %968 = fsub float %679, %963, !dbg !71
  %969 = select i1 %23, float 8.000000e+00, float 0.000000e+00, !dbg !73
  %970 = fcmp oeq float %969, 0.000000e+00, !dbg !74
  %971 = tail call float @llvm.nvvm.div.full(float %240, float %969), !dbg !75
  %972 = select i1 %970, float 0.000000e+00, float %971, !dbg !76
  %973 = fmul float %972, %968, !dbg !77
  %974 = fadd float %963, %973, !dbg !78
  %975 = fmul float %968, %968, !dbg !79
  %976 = fmul float %958, %975, !dbg !80
  %977 = fmul float %972, %976, !dbg !81
  %978 = fadd float %967, %977, !dbg !82
  %979 = fsub float %681, %974, !dbg !71
  %980 = fadd float %969, %241, !dbg !73
  %981 = fcmp oeq float %980, 0.000000e+00, !dbg !74
  %982 = tail call float @llvm.nvvm.div.full(float %241, float %980), !dbg !75
  %983 = select i1 %981, float 0.000000e+00, float %982, !dbg !76
  %984 = fmul float %983, %979, !dbg !77
  %985 = fadd float %974, %984, !dbg !78
  %986 = fadd float %978, 0.000000e+00, !dbg !83
  %987 = fmul float %979, %979, !dbg !79
  %988 = fmul float %969, %987, !dbg !80
  %989 = fmul float %983, %988, !dbg !81
  %990 = fadd float %986, %989, !dbg !82
  %991 = fsub float %683, %985, !dbg !71
  %992 = fadd float %241, %980, !dbg !73
  %993 = fcmp oeq float %992, 0.000000e+00, !dbg !74
  %994 = tail call float @llvm.nvvm.div.full(float %241, float %992), !dbg !75
  %995 = select i1 %993, float 0.000000e+00, float %994, !dbg !76
  %996 = fmul float %995, %991, !dbg !77
  %997 = fadd float %985, %996, !dbg !78
  %998 = fmul float %991, %991, !dbg !79
  %999 = fmul float %980, %998, !dbg !80
  %1000 = fmul float %995, %999, !dbg !81
  %1001 = fadd float %990, %1000, !dbg !82
  %1002 = fsub float %685, %997, !dbg !71
  %1003 = fadd float %241, %992, !dbg !73
  %1004 = fcmp oeq float %1003, 0.000000e+00, !dbg !74
  %1005 = tail call float @llvm.nvvm.div.full(float %241, float %1003), !dbg !75
  %1006 = select i1 %1004, float 0.000000e+00, float %1005, !dbg !76
  %1007 = fmul float %1006, %1002, !dbg !77
  %1008 = fadd float %997, %1007, !dbg !78
  %1009 = fmul float %1002, %1002, !dbg !79
  %1010 = fmul float %992, %1009, !dbg !80
  %1011 = fmul float %1006, %1010, !dbg !81
  %1012 = fadd float %1001, %1011, !dbg !82
  %1013 = fsub float %687, %1008, !dbg !71
  %1014 = fadd float %241, %1003, !dbg !73
  %1015 = fcmp oeq float %1014, 0.000000e+00, !dbg !74
  %1016 = tail call float @llvm.nvvm.div.full(float %241, float %1014), !dbg !75
  %1017 = select i1 %1015, float 0.000000e+00, float %1016, !dbg !76
  %1018 = fmul float %1017, %1013, !dbg !77
  %1019 = fadd float %1008, %1018, !dbg !78
  %1020 = fmul float %1013, %1013, !dbg !79
  %1021 = fmul float %1003, %1020, !dbg !80
  %1022 = fmul float %1017, %1021, !dbg !81
  %1023 = fadd float %1012, %1022, !dbg !82
  %1024 = fsub float %689, %1019, !dbg !71
  %1025 = fadd float %241, %1014, !dbg !73
  %1026 = fcmp oeq float %1025, 0.000000e+00, !dbg !74
  %1027 = tail call float @llvm.nvvm.div.full(float %241, float %1025), !dbg !75
  %1028 = select i1 %1026, float 0.000000e+00, float %1027, !dbg !76
  %1029 = fmul float %1028, %1024, !dbg !77
  %1030 = fadd float %1019, %1029, !dbg !78
  %1031 = fmul float %1024, %1024, !dbg !79
  %1032 = fmul float %1014, %1031, !dbg !80
  %1033 = fmul float %1028, %1032, !dbg !81
  %1034 = fadd float %1023, %1033, !dbg !82
  %1035 = fsub float %691, %1030, !dbg !71
  %1036 = fmul float %1035, %1035, !dbg !79
  %1037 = fmul float %1025, %1036, !dbg !80
  %1038 = fadd float %241, %1025, !dbg !73
  %1039 = fcmp oeq float %1038, 0.000000e+00, !dbg !74
  %1040 = tail call float @llvm.nvvm.div.full(float %241, float %1038), !dbg !75
  %1041 = select i1 %1039, float 0.000000e+00, float %1040, !dbg !76
  %1042 = fmul float %1041, %1035, !dbg !77
  %1043 = fadd float %1030, %1042, !dbg !78
  %1044 = fmul float %1041, %1037, !dbg !81
  %1045 = fadd float %1034, %1044, !dbg !82
  %1046 = fsub float %693, %1043, !dbg !71
  %1047 = fadd float %241, %1038, !dbg !73
  %1048 = tail call float @llvm.nvvm.div.full(float %241, float %1047), !dbg !75
  %1049 = fadd float %241, %1047, !dbg !73
  %1050 = insertelement <2 x float> poison, float %1047, i64 0, !dbg !74
  %1051 = insertelement <2 x float> %1050, float %1049, i64 1, !dbg !74
  %1052 = fcmp oeq <2 x float> %1051, zeroinitializer, !dbg !74
  %1053 = tail call float @llvm.nvvm.div.full(float %241, float %1049), !dbg !75
  %1054 = insertelement <2 x float> poison, float %1048, i64 0, !dbg !76
  %1055 = insertelement <2 x float> %1054, float %1053, i64 1, !dbg !76
  %1056 = select <2 x i1> %1052, <2 x float> zeroinitializer, <2 x float> %1055, !dbg !76
  %1057 = extractelement <2 x float> %1056, i64 0, !dbg !77
  %1058 = fmul float %1057, %1046, !dbg !77
  %1059 = fadd float %1043, %1058, !dbg !78
  %1060 = fadd float %1045, 0.000000e+00, !dbg !83
  %1061 = fsub float %695, %1059, !dbg !71
  %1062 = insertelement <2 x float> poison, float %1046, i64 0, !dbg !79
  %1063 = insertelement <2 x float> %1062, float %1061, i64 1, !dbg !79
  %1064 = fmul <2 x float> %1063, %1063, !dbg !79
  %1065 = insertelement <2 x float> poison, float %1038, i64 0, !dbg !80
  %1066 = insertelement <2 x float> %1065, float %1047, i64 1, !dbg !80
  %1067 = fmul <2 x float> %1066, %1064, !dbg !80
  %1068 = fmul <2 x float> %1056, %1067, !dbg !81
  %1069 = extractelement <2 x float> %1068, i64 0, !dbg !82
  %1070 = fadd float %1060, %1069, !dbg !82
  %1071 = extractelement <2 x float> %1056, i64 1, !dbg !77
  %1072 = fmul float %1071, %1061, !dbg !77
  %1073 = fadd float %1059, %1072, !dbg !78
  %1074 = extractelement <2 x float> %1068, i64 1, !dbg !82
  %1075 = fadd float %1070, %1074, !dbg !82
  %1076 = bitcast float %899 to i32, !dbg !69
  %1077 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1076, i32 16, i32 31), !dbg !69
  %1078 = bitcast i32 %1077 to float, !dbg !69
  %1079 = bitcast float %901 to i32, !dbg !69
  %1080 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1079, i32 16, i32 31), !dbg !69
  %1081 = bitcast i32 %1080 to float, !dbg !69
  %1082 = bitcast float %875 to i32, !dbg !69
  %1083 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1082, i32 16, i32 31), !dbg !69
  %1084 = bitcast i32 %1083 to float, !dbg !69
  %1085 = fsub float %1078, %899, !dbg !71
  %1086 = fadd float %875, %1084, !dbg !73
  %1087 = fcmp oeq float %1086, 0.000000e+00, !dbg !74
  %1088 = tail call float @llvm.nvvm.div.full(float %1084, float %1086), !dbg !75
  %1089 = select i1 %1087, float 0.000000e+00, float %1088, !dbg !76
  %1090 = fmul float %1089, %1085, !dbg !77
  %1091 = fadd float %899, %1090, !dbg !78
  %1092 = fadd float %901, %1081, !dbg !83
  %1093 = fmul float %1085, %1085, !dbg !79
  %1094 = fmul float %875, %1093, !dbg !80
  %1095 = fmul float %1089, %1094, !dbg !81
  %1096 = fadd float %1092, %1095, !dbg !82
  %1097 = bitcast float %1091 to i32, !dbg !69
  %1098 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1097, i32 8, i32 31), !dbg !69
  %1099 = bitcast i32 %1098 to float, !dbg !69
  %1100 = bitcast float %1096 to i32, !dbg !69
  %1101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1100, i32 8, i32 31), !dbg !69
  %1102 = bitcast i32 %1101 to float, !dbg !69
  %1103 = bitcast float %1086 to i32, !dbg !69
  %1104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1103, i32 8, i32 31), !dbg !69
  %1105 = bitcast i32 %1104 to float, !dbg !69
  %1106 = fsub float %1099, %1091, !dbg !71
  %1107 = fadd float %1086, %1105, !dbg !73
  %1108 = fcmp oeq float %1107, 0.000000e+00, !dbg !74
  %1109 = tail call float @llvm.nvvm.div.full(float %1105, float %1107), !dbg !75
  %1110 = select i1 %1108, float 0.000000e+00, float %1109, !dbg !76
  %1111 = fmul float %1110, %1106, !dbg !77
  %1112 = fadd float %1091, %1111, !dbg !78
  %1113 = fadd float %1096, %1102, !dbg !83
  %1114 = fmul float %1106, %1106, !dbg !79
  %1115 = fmul float %1086, %1114, !dbg !80
  %1116 = fmul float %1110, %1115, !dbg !81
  %1117 = fadd float %1113, %1116, !dbg !82
  %1118 = bitcast float %1112 to i32, !dbg !69
  %1119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1118, i32 4, i32 31), !dbg !69
  %1120 = bitcast i32 %1119 to float, !dbg !69
  %1121 = bitcast float %1117 to i32, !dbg !69
  %1122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1121, i32 4, i32 31), !dbg !69
  %1123 = bitcast i32 %1122 to float, !dbg !69
  %1124 = bitcast float %1107 to i32, !dbg !69
  %1125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1124, i32 4, i32 31), !dbg !69
  %1126 = bitcast i32 %1125 to float, !dbg !69
  %1127 = fsub float %1120, %1112, !dbg !71
  %1128 = fadd float %1107, %1126, !dbg !73
  %1129 = fcmp oeq float %1128, 0.000000e+00, !dbg !74
  %1130 = tail call float @llvm.nvvm.div.full(float %1126, float %1128), !dbg !75
  %1131 = select i1 %1129, float 0.000000e+00, float %1130, !dbg !76
  %1132 = fmul float %1131, %1127, !dbg !77
  %1133 = fadd float %1112, %1132, !dbg !78
  %1134 = fadd float %1117, %1123, !dbg !83
  %1135 = fmul float %1127, %1127, !dbg !79
  %1136 = fmul float %1107, %1135, !dbg !80
  %1137 = fmul float %1131, %1136, !dbg !81
  %1138 = fadd float %1134, %1137, !dbg !82
  %1139 = bitcast float %1133 to i32, !dbg !69
  %1140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1139, i32 2, i32 31), !dbg !69
  %1141 = bitcast i32 %1140 to float, !dbg !69
  %1142 = bitcast float %1138 to i32, !dbg !69
  %1143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1142, i32 2, i32 31), !dbg !69
  %1144 = bitcast i32 %1143 to float, !dbg !69
  %1145 = bitcast float %1128 to i32, !dbg !69
  %1146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1145, i32 2, i32 31), !dbg !69
  %1147 = bitcast i32 %1146 to float, !dbg !69
  %1148 = fsub float %1141, %1133, !dbg !71
  %1149 = fadd float %1128, %1147, !dbg !73
  %1150 = fcmp oeq float %1149, 0.000000e+00, !dbg !74
  %1151 = tail call float @llvm.nvvm.div.full(float %1147, float %1149), !dbg !75
  %1152 = select i1 %1150, float 0.000000e+00, float %1151, !dbg !76
  %1153 = fmul float %1152, %1148, !dbg !77
  %1154 = fadd float %1133, %1153, !dbg !78
  %1155 = fadd float %1138, %1144, !dbg !83
  %1156 = fmul float %1148, %1148, !dbg !79
  %1157 = fmul float %1128, %1156, !dbg !80
  %1158 = fmul float %1152, %1157, !dbg !81
  %1159 = fadd float %1155, %1158, !dbg !82
  %1160 = bitcast float %1154 to i32, !dbg !69
  %1161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1160, i32 1, i32 31), !dbg !69
  %1162 = bitcast i32 %1161 to float, !dbg !69
  %1163 = bitcast float %1159 to i32, !dbg !69
  %1164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1163, i32 1, i32 31), !dbg !69
  %1165 = bitcast i32 %1164 to float, !dbg !69
  %1166 = bitcast float %1149 to i32, !dbg !69
  %1167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1166, i32 1, i32 31), !dbg !69
  %1168 = bitcast i32 %1167 to float, !dbg !69
  %1169 = fsub float %1162, %1154, !dbg !71
  %1170 = fadd float %1149, %1168, !dbg !73
  %1171 = fcmp oeq float %1170, 0.000000e+00, !dbg !74
  %1172 = tail call float @llvm.nvvm.div.full(float %1168, float %1170), !dbg !75
  %1173 = select i1 %1171, float 0.000000e+00, float %1172, !dbg !76
  %1174 = fmul float %1173, %1169, !dbg !77
  %1175 = fadd float %1154, %1174, !dbg !78
  %1176 = fadd float %1159, %1165, !dbg !83
  %1177 = fmul float %1169, %1169, !dbg !79
  %1178 = fmul float %1149, %1177, !dbg !80
  %1179 = fmul float %1173, %1178, !dbg !81
  %1180 = fadd float %1176, %1179, !dbg !82
  %1181 = bitcast float %1073 to i32, !dbg !69
  %1182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1181, i32 16, i32 31), !dbg !69
  %1183 = bitcast i32 %1182 to float, !dbg !69
  %1184 = bitcast float %1075 to i32, !dbg !69
  %1185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1184, i32 16, i32 31), !dbg !69
  %1186 = bitcast i32 %1185 to float, !dbg !69
  %1187 = bitcast float %1049 to i32, !dbg !69
  %1188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1187, i32 16, i32 31), !dbg !69
  %1189 = bitcast i32 %1188 to float, !dbg !69
  %1190 = fsub float %1183, %1073, !dbg !71
  %1191 = fadd float %1049, %1189, !dbg !73
  %1192 = fcmp oeq float %1191, 0.000000e+00, !dbg !74
  %1193 = tail call float @llvm.nvvm.div.full(float %1189, float %1191), !dbg !75
  %1194 = select i1 %1192, float 0.000000e+00, float %1193, !dbg !76
  %1195 = fmul float %1194, %1190, !dbg !77
  %1196 = fadd float %1073, %1195, !dbg !78
  %1197 = fadd float %1075, %1186, !dbg !83
  %1198 = fmul float %1190, %1190, !dbg !79
  %1199 = fmul float %1049, %1198, !dbg !80
  %1200 = fmul float %1194, %1199, !dbg !81
  %1201 = fadd float %1197, %1200, !dbg !82
  %1202 = bitcast float %1196 to i32, !dbg !69
  %1203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1202, i32 8, i32 31), !dbg !69
  %1204 = bitcast i32 %1203 to float, !dbg !69
  %1205 = bitcast float %1201 to i32, !dbg !69
  %1206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1205, i32 8, i32 31), !dbg !69
  %1207 = bitcast i32 %1206 to float, !dbg !69
  %1208 = bitcast float %1191 to i32, !dbg !69
  %1209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1208, i32 8, i32 31), !dbg !69
  %1210 = bitcast i32 %1209 to float, !dbg !69
  %1211 = fsub float %1204, %1196, !dbg !71
  %1212 = fadd float %1191, %1210, !dbg !73
  %1213 = fcmp oeq float %1212, 0.000000e+00, !dbg !74
  %1214 = tail call float @llvm.nvvm.div.full(float %1210, float %1212), !dbg !75
  %1215 = select i1 %1213, float 0.000000e+00, float %1214, !dbg !76
  %1216 = fmul float %1215, %1211, !dbg !77
  %1217 = fadd float %1196, %1216, !dbg !78
  %1218 = fadd float %1201, %1207, !dbg !83
  %1219 = fmul float %1211, %1211, !dbg !79
  %1220 = fmul float %1191, %1219, !dbg !80
  %1221 = fmul float %1215, %1220, !dbg !81
  %1222 = fadd float %1218, %1221, !dbg !82
  %1223 = bitcast float %1217 to i32, !dbg !69
  %1224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1223, i32 4, i32 31), !dbg !69
  %1225 = bitcast i32 %1224 to float, !dbg !69
  %1226 = bitcast float %1222 to i32, !dbg !69
  %1227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1226, i32 4, i32 31), !dbg !69
  %1228 = bitcast i32 %1227 to float, !dbg !69
  %1229 = bitcast float %1212 to i32, !dbg !69
  %1230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1229, i32 4, i32 31), !dbg !69
  %1231 = bitcast i32 %1230 to float, !dbg !69
  %1232 = fsub float %1225, %1217, !dbg !71
  %1233 = fadd float %1212, %1231, !dbg !73
  %1234 = fcmp oeq float %1233, 0.000000e+00, !dbg !74
  %1235 = tail call float @llvm.nvvm.div.full(float %1231, float %1233), !dbg !75
  %1236 = select i1 %1234, float 0.000000e+00, float %1235, !dbg !76
  %1237 = fmul float %1236, %1232, !dbg !77
  %1238 = fadd float %1217, %1237, !dbg !78
  %1239 = fadd float %1222, %1228, !dbg !83
  %1240 = fmul float %1232, %1232, !dbg !79
  %1241 = fmul float %1212, %1240, !dbg !80
  %1242 = fmul float %1236, %1241, !dbg !81
  %1243 = fadd float %1239, %1242, !dbg !82
  %1244 = bitcast float %1238 to i32, !dbg !69
  %1245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1244, i32 2, i32 31), !dbg !69
  %1246 = bitcast i32 %1245 to float, !dbg !69
  %1247 = bitcast float %1243 to i32, !dbg !69
  %1248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1247, i32 2, i32 31), !dbg !69
  %1249 = bitcast i32 %1248 to float, !dbg !69
  %1250 = bitcast float %1233 to i32, !dbg !69
  %1251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1250, i32 2, i32 31), !dbg !69
  %1252 = bitcast i32 %1251 to float, !dbg !69
  %1253 = fsub float %1246, %1238, !dbg !71
  %1254 = fadd float %1233, %1252, !dbg !73
  %1255 = fcmp oeq float %1254, 0.000000e+00, !dbg !74
  %1256 = tail call float @llvm.nvvm.div.full(float %1252, float %1254), !dbg !75
  %1257 = select i1 %1255, float 0.000000e+00, float %1256, !dbg !76
  %1258 = fmul float %1257, %1253, !dbg !77
  %1259 = fadd float %1238, %1258, !dbg !78
  %1260 = fadd float %1243, %1249, !dbg !83
  %1261 = fmul float %1253, %1253, !dbg !79
  %1262 = fmul float %1233, %1261, !dbg !80
  %1263 = fmul float %1257, %1262, !dbg !81
  %1264 = fadd float %1260, %1263, !dbg !82
  %1265 = bitcast float %1259 to i32, !dbg !69
  %1266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1265, i32 1, i32 31), !dbg !69
  %1267 = bitcast i32 %1266 to float, !dbg !69
  %1268 = bitcast float %1264 to i32, !dbg !69
  %1269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1268, i32 1, i32 31), !dbg !69
  %1270 = bitcast i32 %1269 to float, !dbg !69
  %1271 = bitcast float %1254 to i32, !dbg !69
  %1272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 1, i32 31), !dbg !69
  %1273 = bitcast i32 %1272 to float, !dbg !69
  %1274 = fsub float %1267, %1259, !dbg !71
  %1275 = fadd float %1254, %1273, !dbg !73
  %1276 = fcmp oeq float %1275, 0.000000e+00, !dbg !74
  %1277 = tail call float @llvm.nvvm.div.full(float %1273, float %1275), !dbg !75
  %1278 = select i1 %1276, float 0.000000e+00, float %1277, !dbg !76
  %1279 = fmul float %1278, %1274, !dbg !77
  %1280 = fadd float %1259, %1279, !dbg !78
  %1281 = fadd float %1264, %1270, !dbg !83
  %1282 = fmul float %1274, %1274, !dbg !79
  %1283 = fmul float %1254, %1282, !dbg !80
  %1284 = fmul float %1278, %1283, !dbg !81
  %1285 = fadd float %1281, %1284, !dbg !82
  %1286 = and i32 %24, 7, !dbg !69
  %1287 = icmp eq i32 %20, 0, !dbg !69
  %1288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1286, !dbg !69
  %1289 = bitcast float %1175 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1288, <1 x i32> %1289, i1 %1287) #5, !dbg !69
  %1290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1286, !dbg !69
  %1291 = bitcast float %1180 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1290, <1 x i32> %1291, i1 %1287) #5, !dbg !69
  %1292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1286, !dbg !69
  %1293 = bitcast float %1170 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1292, <1 x i32> %1293, i1 %1287) #5, !dbg !69
  %1294 = or disjoint i32 %1286, 8, !dbg !69
  %1295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1294, !dbg !69
  %1296 = bitcast float %1280 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1295, <1 x i32> %1296, i1 %1287) #5, !dbg !69
  %1297 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %1294, !dbg !69
  %1298 = bitcast float %1285 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1297, <1 x i32> %1298, i1 %1287) #5, !dbg !69
  %1299 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %1294, !dbg !69
  %1300 = bitcast float %1275 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1299, <1 x i32> %1300, i1 %1287) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %1301 = icmp slt i32 %19, 16, !dbg !69
  %1302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !69
  %1303 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1302, i1 %1301) #5, !dbg !69
  %1304 = bitcast i32 %1303 to float, !dbg !69
  %1305 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !69
  %1306 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1305, i1 %1301) #5, !dbg !69
  %1307 = bitcast i32 %1306 to float, !dbg !69
  %1308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !69
  %1309 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1308, i1 %1301) #5, !dbg !69
  %1310 = bitcast i32 %1309 to float, !dbg !69
  %1311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1303, i32 4, i32 31), !dbg !69
  %1312 = bitcast i32 %1311 to float, !dbg !69
  %1313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1306, i32 4, i32 31), !dbg !69
  %1314 = bitcast i32 %1313 to float, !dbg !69
  %1315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1309, i32 4, i32 31), !dbg !69
  %1316 = bitcast i32 %1315 to float, !dbg !69
  %1317 = fsub float %1312, %1304, !dbg !71
  %1318 = fadd float %1310, %1316, !dbg !73
  %1319 = fcmp oeq float %1318, 0.000000e+00, !dbg !74
  %1320 = tail call float @llvm.nvvm.div.full(float %1316, float %1318), !dbg !75
  %1321 = select i1 %1319, float 0.000000e+00, float %1320, !dbg !76
  %1322 = fmul float %1317, %1321, !dbg !77
  %1323 = fadd float %1322, %1304, !dbg !78
  %1324 = fadd float %1307, %1314, !dbg !83
  %1325 = fmul float %1317, %1317, !dbg !79
  %1326 = fmul float %1325, %1310, !dbg !80
  %1327 = fmul float %1326, %1321, !dbg !81
  %1328 = fadd float %1324, %1327, !dbg !82
  %1329 = bitcast float %1323 to i32, !dbg !69
  %1330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1329, i32 2, i32 31), !dbg !69
  %1331 = bitcast i32 %1330 to float, !dbg !69
  %1332 = bitcast float %1328 to i32, !dbg !69
  %1333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1332, i32 2, i32 31), !dbg !69
  %1334 = bitcast i32 %1333 to float, !dbg !69
  %1335 = bitcast float %1318 to i32, !dbg !69
  %1336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1335, i32 2, i32 31), !dbg !69
  %1337 = bitcast i32 %1336 to float, !dbg !69
  %1338 = fsub float %1331, %1323, !dbg !71
  %1339 = fadd float %1318, %1337, !dbg !73
  %1340 = fcmp oeq float %1339, 0.000000e+00, !dbg !74
  %1341 = tail call float @llvm.nvvm.div.full(float %1337, float %1339), !dbg !75
  %1342 = select i1 %1340, float 0.000000e+00, float %1341, !dbg !76
  %1343 = fmul float %1338, %1342, !dbg !77
  %1344 = fadd float %1323, %1343, !dbg !78
  %1345 = fadd float %1328, %1334, !dbg !83
  %1346 = fmul float %1338, %1338, !dbg !79
  %1347 = fmul float %1318, %1346, !dbg !80
  %1348 = fmul float %1342, %1347, !dbg !81
  %1349 = fadd float %1345, %1348, !dbg !82
  %1350 = bitcast float %1344 to i32, !dbg !69
  %1351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1350, i32 1, i32 31), !dbg !69
  %1352 = bitcast i32 %1351 to float, !dbg !69
  %1353 = bitcast float %1349 to i32, !dbg !69
  %1354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1353, i32 1, i32 31), !dbg !69
  %1355 = bitcast i32 %1354 to float, !dbg !69
  %1356 = bitcast float %1339 to i32, !dbg !69
  %1357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1356, i32 1, i32 31), !dbg !69
  %1358 = bitcast i32 %1357 to float, !dbg !69
  %1359 = fsub float %1352, %1344, !dbg !71
  %1360 = fadd float %1339, %1358, !dbg !73
  %1361 = fcmp oeq float %1360, 0.000000e+00, !dbg !74
  %1362 = tail call float @llvm.nvvm.div.full(float %1358, float %1360), !dbg !75
  %1363 = select i1 %1361, float 0.000000e+00, float %1362, !dbg !76
  %1364 = fmul float %1359, %1363, !dbg !77
  %1365 = fadd float %1344, %1364, !dbg !78
  %1366 = fadd float %1349, %1355, !dbg !83
  %1367 = fmul float %1359, %1359, !dbg !79
  %1368 = fmul float %1339, %1367, !dbg !80
  %1369 = fmul float %1363, %1368, !dbg !81
  %1370 = fadd float %1366, %1369, !dbg !82
  %1371 = and i32 %19, 7, !dbg !69
  %1372 = icmp eq i32 %1371, 0, !dbg !69
  %1373 = and i1 %1301, %1372, !dbg !69
  %1374 = bitcast float %1365 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1302, <1 x i32> %1374, i1 %1373) #5, !dbg !69
  %1375 = bitcast float %1370 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1305, <1 x i32> %1375, i1 %1373) #5, !dbg !69
  %1376 = bitcast float %1360 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1308, <1 x i32> %1376, i1 %1373) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %1377 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %1378 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !69
  %1379 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !69
  %1380 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !69
  %1381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %250, i1 %135) #5, !dbg !84
  %1382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %251, i1 %135) #5, !dbg !84
  %1383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %252, i1 %135) #5, !dbg !84
  %1384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %253, i1 %135) #5, !dbg !84
  %1385 = or disjoint i32 %26, 12288, !dbg !85
  %1386 = or disjoint i32 %26, 12292, !dbg !85
  %1387 = or disjoint i32 %26, 14336, !dbg !85
  %1388 = or disjoint i32 %26, 14340, !dbg !85
  %1389 = zext nneg i32 %1385 to i64, !dbg !86
  %1390 = getelementptr float, ptr addrspace(1) %1, i64 %1389, !dbg !86
  %1391 = zext nneg i32 %1386 to i64, !dbg !86
  %1392 = getelementptr float, ptr addrspace(1) %1, i64 %1391, !dbg !86
  %1393 = zext nneg i32 %1387 to i64, !dbg !86
  %1394 = getelementptr float, ptr addrspace(1) %1, i64 %1393, !dbg !86
  %1395 = zext nneg i32 %1388 to i64, !dbg !86
  %1396 = getelementptr float, ptr addrspace(1) %1, i64 %1395, !dbg !86
  %1397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1390, i1 true) #5, !dbg !87
  %1398 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1392, i1 true) #5, !dbg !87
  %1399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1394, i1 %109) #5, !dbg !87
  %1400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1396, i1 %109) #5, !dbg !87
  %1401 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1389, !dbg !88
  %1402 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1393, !dbg !88
  %1403 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1401, i1 true) #5, !dbg !89
  %1404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1402, i1 %109) #5, !dbg !89
  %1405 = add nuw nsw i32 %26, 9216, !dbg !90
  %1406 = add nuw nsw i32 %26, 11264, !dbg !90
  %1407 = zext nneg i32 %1405 to i64, !dbg !91
  %1408 = getelementptr float, ptr addrspace(1) %1, i64 %1407, !dbg !91
  %1409 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !91
  %1410 = getelementptr i8, ptr addrspace(1) %1409, i64 36880, !dbg !91
  %1411 = zext nneg i32 %1406 to i64, !dbg !91
  %1412 = getelementptr float, ptr addrspace(1) %1, i64 %1411, !dbg !91
  %1413 = getelementptr i8, ptr addrspace(1) %1409, i64 45072, !dbg !91
  %1414 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1408, i1 true) #5, !dbg !92
  %1415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1410, i1 true) #5, !dbg !92
  %1416 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1412, i1 %109) #5, !dbg !92
  %1417 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1413, i1 %109) #5, !dbg !92
  %1418 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1407, !dbg !93
  %1419 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1411, !dbg !93
  %1420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1418, i1 true) #5, !dbg !94
  %1421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1419, i1 %109) #5, !dbg !94
  %1422 = tail call float @llvm.nvvm.div.full(float %1379, float 3.072000e+03), !dbg !95
  %1423 = tail call float @llvm.nvvm.div.full(float %1380, float 3.072000e+03), !dbg !95
  %1424 = fadd float %1422, 0x3EB0C6F7A0000000, !dbg !96
  %1425 = fadd float %1423, 0x3EB0C6F7A0000000, !dbg !96
  %1426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i = icmp eq i32 %1426, 0, !dbg !97
  br i1 %.not.i, label %1429, label %1427, !dbg !97

1427:                                             ; preds = %16
  %1428 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1424), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

1429:                                             ; preds = %16
  %1430 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1424), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

__nv_rsqrtf.exit:                                 ; preds = %1427, %1429
  %.0.i = phi float [ %1428, %1427 ], [ %1430, %1429 ], !dbg !97
  %1431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i159 = icmp eq i32 %1438, 0, !dbg !97
  br i1 %.not.i159, label %1441, label %1439, !dbg !97

1439:                                             ; preds = %__nv_rsqrtf.exit
  %1440 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1425), !dbg !97
  br label %__nv_rsqrtf.exit161, !dbg !97

1441:                                             ; preds = %__nv_rsqrtf.exit
  %1442 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1425), !dbg !97
  br label %__nv_rsqrtf.exit161, !dbg !97

__nv_rsqrtf.exit161:                              ; preds = %1439, %1441
  %.0.i160 = phi float [ %1440, %1439 ], [ %1442, %1441 ], !dbg !97
  %1443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %1450 = extractvalue { i32, i32, i32, i32 } %1384, 3, !dbg !84
  %1451 = bitcast i32 %1450 to <2 x bfloat>, !dbg !84
  %1452 = extractelement <2 x bfloat> %1451, i64 1, !dbg !84
  %1453 = fpext bfloat %1452 to float, !dbg !98
  %1454 = fsub float %1453, %1378, !dbg !99
  %1455 = extractelement <2 x bfloat> %1451, i64 0, !dbg !84
  %1456 = fpext bfloat %1455 to float, !dbg !98
  %1457 = fsub float %1456, %1378, !dbg !99
  %1458 = extractvalue { i32, i32, i32, i32 } %1384, 2, !dbg !84
  %1459 = bitcast i32 %1458 to <2 x bfloat>, !dbg !84
  %1460 = extractelement <2 x bfloat> %1459, i64 1, !dbg !84
  %1461 = fpext bfloat %1460 to float, !dbg !98
  %1462 = fsub float %1461, %1378, !dbg !99
  %1463 = extractelement <2 x bfloat> %1459, i64 0, !dbg !84
  %1464 = fpext bfloat %1463 to float, !dbg !98
  %1465 = fsub float %1464, %1378, !dbg !99
  %1466 = extractvalue { i32, i32, i32, i32 } %1384, 1, !dbg !84
  %1467 = bitcast i32 %1466 to <2 x bfloat>, !dbg !84
  %1468 = extractelement <2 x bfloat> %1467, i64 1, !dbg !84
  %1469 = fpext bfloat %1468 to float, !dbg !98
  %1470 = fsub float %1469, %1378, !dbg !99
  %1471 = extractelement <2 x bfloat> %1467, i64 0, !dbg !84
  %1472 = fpext bfloat %1471 to float, !dbg !98
  %1473 = fsub float %1472, %1378, !dbg !99
  %1474 = extractvalue { i32, i32, i32, i32 } %1384, 0, !dbg !84
  %1475 = bitcast i32 %1474 to <2 x bfloat>, !dbg !84
  %1476 = extractelement <2 x bfloat> %1475, i64 1, !dbg !84
  %1477 = fpext bfloat %1476 to float, !dbg !98
  %1478 = fsub float %1477, %1378, !dbg !99
  %1479 = extractelement <2 x bfloat> %1475, i64 0, !dbg !84
  %1480 = fpext bfloat %1479 to float, !dbg !98
  %1481 = fsub float %1480, %1378, !dbg !99
  %1482 = extractvalue { i32, i32, i32, i32 } %1383, 3, !dbg !84
  %1483 = bitcast i32 %1482 to <2 x bfloat>, !dbg !84
  %1484 = extractelement <2 x bfloat> %1483, i64 1, !dbg !84
  %1485 = fpext bfloat %1484 to float, !dbg !98
  %1486 = fsub float %1485, %1378, !dbg !99
  %1487 = extractelement <2 x bfloat> %1483, i64 0, !dbg !84
  %1488 = fpext bfloat %1487 to float, !dbg !98
  %1489 = fsub float %1488, %1378, !dbg !99
  %1490 = extractvalue { i32, i32, i32, i32 } %1383, 2, !dbg !84
  %1491 = bitcast i32 %1490 to <2 x bfloat>, !dbg !84
  %1492 = extractelement <2 x bfloat> %1491, i64 1, !dbg !84
  %1493 = fpext bfloat %1492 to float, !dbg !98
  %1494 = fsub float %1493, %1378, !dbg !99
  %1495 = extractelement <2 x bfloat> %1491, i64 0, !dbg !84
  %1496 = fpext bfloat %1495 to float, !dbg !98
  %1497 = fsub float %1496, %1378, !dbg !99
  %1498 = extractvalue { i32, i32, i32, i32 } %1383, 1, !dbg !84
  %1499 = bitcast i32 %1498 to <2 x bfloat>, !dbg !84
  %1500 = extractelement <2 x bfloat> %1499, i64 1, !dbg !84
  %1501 = fpext bfloat %1500 to float, !dbg !98
  %1502 = fsub float %1501, %1378, !dbg !99
  %1503 = extractelement <2 x bfloat> %1499, i64 0, !dbg !84
  %1504 = fpext bfloat %1503 to float, !dbg !98
  %1505 = fsub float %1504, %1378, !dbg !99
  %1506 = extractvalue { i32, i32, i32, i32 } %1383, 0, !dbg !84
  %1507 = bitcast i32 %1506 to <2 x bfloat>, !dbg !84
  %1508 = extractelement <2 x bfloat> %1507, i64 1, !dbg !84
  %1509 = fpext bfloat %1508 to float, !dbg !98
  %1510 = fsub float %1509, %1378, !dbg !99
  %1511 = extractelement <2 x bfloat> %1507, i64 0, !dbg !84
  %1512 = fpext bfloat %1511 to float, !dbg !98
  %1513 = fsub float %1512, %1378, !dbg !99
  %1514 = extractvalue { i32, i32, i32, i32 } %1382, 3, !dbg !84
  %1515 = bitcast i32 %1514 to <2 x bfloat>, !dbg !84
  %1516 = extractelement <2 x bfloat> %1515, i64 1, !dbg !84
  %1517 = fpext bfloat %1516 to float, !dbg !98
  %1518 = fsub float %1517, %1377, !dbg !99
  %1519 = extractelement <2 x bfloat> %1515, i64 0, !dbg !84
  %1520 = fpext bfloat %1519 to float, !dbg !98
  %1521 = fsub float %1520, %1377, !dbg !99
  %1522 = extractvalue { i32, i32, i32, i32 } %1382, 2, !dbg !84
  %1523 = bitcast i32 %1522 to <2 x bfloat>, !dbg !84
  %1524 = extractelement <2 x bfloat> %1523, i64 1, !dbg !84
  %1525 = fpext bfloat %1524 to float, !dbg !98
  %1526 = fsub float %1525, %1377, !dbg !99
  %1527 = extractelement <2 x bfloat> %1523, i64 0, !dbg !84
  %1528 = fpext bfloat %1527 to float, !dbg !98
  %1529 = fsub float %1528, %1377, !dbg !99
  %1530 = extractvalue { i32, i32, i32, i32 } %1382, 1, !dbg !84
  %1531 = bitcast i32 %1530 to <2 x bfloat>, !dbg !84
  %1532 = extractelement <2 x bfloat> %1531, i64 1, !dbg !84
  %1533 = fpext bfloat %1532 to float, !dbg !98
  %1534 = fsub float %1533, %1377, !dbg !99
  %1535 = extractelement <2 x bfloat> %1531, i64 0, !dbg !84
  %1536 = fpext bfloat %1535 to float, !dbg !98
  %1537 = fsub float %1536, %1377, !dbg !99
  %1538 = extractvalue { i32, i32, i32, i32 } %1382, 0, !dbg !84
  %1539 = bitcast i32 %1538 to <2 x bfloat>, !dbg !84
  %1540 = extractelement <2 x bfloat> %1539, i64 1, !dbg !84
  %1541 = fpext bfloat %1540 to float, !dbg !98
  %1542 = fsub float %1541, %1377, !dbg !99
  %1543 = extractelement <2 x bfloat> %1539, i64 0, !dbg !84
  %1544 = fpext bfloat %1543 to float, !dbg !98
  %1545 = fsub float %1544, %1377, !dbg !99
  %1546 = extractvalue { i32, i32, i32, i32 } %1381, 3, !dbg !84
  %1547 = bitcast i32 %1546 to <2 x bfloat>, !dbg !84
  %1548 = extractelement <2 x bfloat> %1547, i64 1, !dbg !84
  %1549 = fpext bfloat %1548 to float, !dbg !98
  %1550 = fsub float %1549, %1377, !dbg !99
  %1551 = extractelement <2 x bfloat> %1547, i64 0, !dbg !84
  %1552 = fpext bfloat %1551 to float, !dbg !98
  %1553 = fsub float %1552, %1377, !dbg !99
  %1554 = extractvalue { i32, i32, i32, i32 } %1381, 2, !dbg !84
  %1555 = bitcast i32 %1554 to <2 x bfloat>, !dbg !84
  %1556 = extractelement <2 x bfloat> %1555, i64 1, !dbg !84
  %1557 = fpext bfloat %1556 to float, !dbg !98
  %1558 = fsub float %1557, %1377, !dbg !99
  %1559 = extractelement <2 x bfloat> %1555, i64 0, !dbg !84
  %1560 = fpext bfloat %1559 to float, !dbg !98
  %1561 = fsub float %1560, %1377, !dbg !99
  %1562 = extractvalue { i32, i32, i32, i32 } %1381, 1, !dbg !84
  %1563 = bitcast i32 %1562 to <2 x bfloat>, !dbg !84
  %1564 = extractelement <2 x bfloat> %1563, i64 1, !dbg !84
  %1565 = fpext bfloat %1564 to float, !dbg !98
  %1566 = fsub float %1565, %1377, !dbg !99
  %1567 = extractelement <2 x bfloat> %1563, i64 0, !dbg !84
  %1568 = fpext bfloat %1567 to float, !dbg !98
  %1569 = fsub float %1568, %1377, !dbg !99
  %1570 = extractvalue { i32, i32, i32, i32 } %1381, 0, !dbg !84
  %1571 = bitcast i32 %1570 to <2 x bfloat>, !dbg !84
  %1572 = extractelement <2 x bfloat> %1571, i64 1, !dbg !84
  %1573 = fpext bfloat %1572 to float, !dbg !98
  %1574 = fsub float %1573, %1377, !dbg !99
  %1575 = extractelement <2 x bfloat> %1571, i64 0, !dbg !84
  %1576 = fpext bfloat %1575 to float, !dbg !98
  %1577 = fsub float %1576, %1377, !dbg !99
  %1578 = extractvalue { i32, i32, i32, i32 } %1421, 3, !dbg !94
  %1579 = bitcast i32 %1578 to <2 x bfloat>, !dbg !94
  %1580 = extractvalue { i32, i32, i32, i32 } %1421, 2, !dbg !94
  %1581 = bitcast i32 %1580 to <2 x bfloat>, !dbg !94
  %1582 = extractvalue { i32, i32, i32, i32 } %1421, 1, !dbg !94
  %1583 = bitcast i32 %1582 to <2 x bfloat>, !dbg !94
  %1584 = extractvalue { i32, i32, i32, i32 } %1421, 0, !dbg !94
  %1585 = bitcast i32 %1584 to <2 x bfloat>, !dbg !94
  %1586 = extractvalue { i32, i32, i32, i32 } %1420, 3, !dbg !94
  %1587 = bitcast i32 %1586 to <2 x bfloat>, !dbg !94
  %1588 = extractvalue { i32, i32, i32, i32 } %1420, 2, !dbg !94
  %1589 = bitcast i32 %1588 to <2 x bfloat>, !dbg !94
  %1590 = extractvalue { i32, i32, i32, i32 } %1420, 1, !dbg !94
  %1591 = bitcast i32 %1590 to <2 x bfloat>, !dbg !94
  %1592 = extractvalue { i32, i32, i32, i32 } %1420, 0, !dbg !94
  %1593 = bitcast i32 %1592 to <2 x bfloat>, !dbg !94
  %1594 = extractvalue { i32, i32, i32, i32 } %1417, 3, !dbg !92
  %1595 = extractvalue { i32, i32, i32, i32 } %1417, 2, !dbg !92
  %1596 = extractvalue { i32, i32, i32, i32 } %1417, 1, !dbg !92
  %1597 = extractvalue { i32, i32, i32, i32 } %1417, 0, !dbg !92
  %1598 = extractvalue { i32, i32, i32, i32 } %1416, 3, !dbg !92
  %1599 = extractvalue { i32, i32, i32, i32 } %1416, 2, !dbg !92
  %1600 = extractvalue { i32, i32, i32, i32 } %1416, 1, !dbg !92
  %1601 = extractvalue { i32, i32, i32, i32 } %1416, 0, !dbg !92
  %1602 = extractvalue { i32, i32, i32, i32 } %1415, 3, !dbg !92
  %1603 = extractvalue { i32, i32, i32, i32 } %1415, 2, !dbg !92
  %1604 = extractvalue { i32, i32, i32, i32 } %1415, 1, !dbg !92
  %1605 = extractvalue { i32, i32, i32, i32 } %1415, 0, !dbg !92
  %1606 = extractvalue { i32, i32, i32, i32 } %1414, 3, !dbg !92
  %1607 = extractvalue { i32, i32, i32, i32 } %1414, 2, !dbg !92
  %1608 = extractvalue { i32, i32, i32, i32 } %1414, 1, !dbg !92
  %1609 = extractvalue { i32, i32, i32, i32 } %1414, 0, !dbg !92
  %1610 = extractvalue { i32, i32, i32, i32 } %1404, 3, !dbg !89
  %1611 = bitcast i32 %1610 to <2 x bfloat>, !dbg !89
  %1612 = extractvalue { i32, i32, i32, i32 } %1404, 2, !dbg !89
  %1613 = bitcast i32 %1612 to <2 x bfloat>, !dbg !89
  %1614 = extractvalue { i32, i32, i32, i32 } %1404, 1, !dbg !89
  %1615 = bitcast i32 %1614 to <2 x bfloat>, !dbg !89
  %1616 = extractvalue { i32, i32, i32, i32 } %1404, 0, !dbg !89
  %1617 = bitcast i32 %1616 to <2 x bfloat>, !dbg !89
  %1618 = extractvalue { i32, i32, i32, i32 } %1403, 3, !dbg !89
  %1619 = bitcast i32 %1618 to <2 x bfloat>, !dbg !89
  %1620 = extractvalue { i32, i32, i32, i32 } %1403, 2, !dbg !89
  %1621 = bitcast i32 %1620 to <2 x bfloat>, !dbg !89
  %1622 = extractvalue { i32, i32, i32, i32 } %1403, 1, !dbg !89
  %1623 = bitcast i32 %1622 to <2 x bfloat>, !dbg !89
  %1624 = extractvalue { i32, i32, i32, i32 } %1403, 0, !dbg !89
  %1625 = bitcast i32 %1624 to <2 x bfloat>, !dbg !89
  %1626 = extractvalue { i32, i32, i32, i32 } %1400, 3, !dbg !87
  %1627 = extractvalue { i32, i32, i32, i32 } %1400, 2, !dbg !87
  %1628 = extractvalue { i32, i32, i32, i32 } %1400, 1, !dbg !87
  %1629 = extractvalue { i32, i32, i32, i32 } %1400, 0, !dbg !87
  %1630 = extractvalue { i32, i32, i32, i32 } %1399, 3, !dbg !87
  %1631 = extractvalue { i32, i32, i32, i32 } %1399, 2, !dbg !87
  %1632 = extractvalue { i32, i32, i32, i32 } %1399, 1, !dbg !87
  %1633 = extractvalue { i32, i32, i32, i32 } %1399, 0, !dbg !87
  %1634 = extractvalue { i32, i32, i32, i32 } %1398, 3, !dbg !87
  %1635 = extractvalue { i32, i32, i32, i32 } %1398, 2, !dbg !87
  %1636 = extractvalue { i32, i32, i32, i32 } %1398, 1, !dbg !87
  %1637 = extractvalue { i32, i32, i32, i32 } %1398, 0, !dbg !87
  %1638 = extractvalue { i32, i32, i32, i32 } %1397, 3, !dbg !87
  %1639 = extractvalue { i32, i32, i32, i32 } %1397, 2, !dbg !87
  %1640 = extractvalue { i32, i32, i32, i32 } %1397, 1, !dbg !87
  %1641 = extractvalue { i32, i32, i32, i32 } %1397, 0, !dbg !87
  %1642 = and i32 %19, 1, !dbg !11
  %1643 = or disjoint i32 %18, %1642, !dbg !12
  %1644 = icmp slt i32 %1643, 512, !dbg !13
  %1645 = fmul float %1577, %.0.i, !dbg !100
  %1646 = fmul float %1574, %.0.i, !dbg !100
  %1647 = fmul float %1569, %.0.i, !dbg !100
  %1648 = fmul float %1566, %.0.i, !dbg !100
  %1649 = fmul float %1561, %.0.i, !dbg !100
  %1650 = fmul float %1558, %.0.i, !dbg !100
  %1651 = fmul float %1553, %.0.i, !dbg !100
  %1652 = fmul float %1550, %.0.i, !dbg !100
  %1653 = fmul float %1545, %.0.i, !dbg !100
  %1654 = fmul float %1542, %.0.i, !dbg !100
  %1655 = fmul float %1537, %.0.i, !dbg !100
  %1656 = fmul float %1534, %.0.i, !dbg !100
  %1657 = fmul float %1529, %.0.i, !dbg !100
  %1658 = fmul float %1526, %.0.i, !dbg !100
  %1659 = fmul float %1521, %.0.i, !dbg !100
  %1660 = fmul float %1518, %.0.i, !dbg !100
  %1661 = fmul float %1513, %.0.i160, !dbg !100
  %1662 = fmul float %1510, %.0.i160, !dbg !100
  %1663 = fmul float %1505, %.0.i160, !dbg !100
  %1664 = fmul float %1502, %.0.i160, !dbg !100
  %1665 = fmul float %1497, %.0.i160, !dbg !100
  %1666 = fmul float %1494, %.0.i160, !dbg !100
  %1667 = fmul float %1489, %.0.i160, !dbg !100
  %1668 = fmul float %1486, %.0.i160, !dbg !100
  %1669 = fmul float %1481, %.0.i160, !dbg !100
  %1670 = fmul float %1478, %.0.i160, !dbg !100
  %1671 = fmul float %1473, %.0.i160, !dbg !100
  %1672 = fmul float %1470, %.0.i160, !dbg !100
  %1673 = fmul float %1465, %.0.i160, !dbg !100
  %1674 = fmul float %1462, %.0.i160, !dbg !100
  %1675 = fmul float %1457, %.0.i160, !dbg !100
  %1676 = fmul float %1454, %.0.i160, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1677 = bitcast float %1645 to i32, !dbg !100
  %1678 = bitcast float %1646 to i32, !dbg !100
  %1679 = bitcast float %1647 to i32, !dbg !100
  %1680 = bitcast float %1648 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %226, i32 %1677, i32 %1678, i32 %1679, i32 %1680, i1 true) #5, !dbg !100
  %1681 = bitcast float %1649 to i32, !dbg !100
  %1682 = bitcast float %1650 to i32, !dbg !100
  %1683 = bitcast float %1651 to i32, !dbg !100
  %1684 = bitcast float %1652 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %227, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i1 true) #5, !dbg !100
  %1685 = bitcast float %1653 to i32, !dbg !100
  %1686 = bitcast float %1654 to i32, !dbg !100
  %1687 = bitcast float %1655 to i32, !dbg !100
  %1688 = bitcast float %1656 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %228, i32 %1685, i32 %1686, i32 %1687, i32 %1688, i1 true) #5, !dbg !100
  %1689 = bitcast float %1657 to i32, !dbg !100
  %1690 = bitcast float %1658 to i32, !dbg !100
  %1691 = bitcast float %1659 to i32, !dbg !100
  %1692 = bitcast float %1660 to i32, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %229, i32 %1689, i32 %1690, i32 %1691, i32 %1692, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1693 = bitcast float %1661 to i32, !dbg !100
  %1694 = bitcast float %1662 to i32, !dbg !100
  %1695 = bitcast float %1663 to i32, !dbg !100
  %1696 = bitcast float %1664 to i32, !dbg !100
  %1697 = bitcast float %1665 to i32, !dbg !100
  %1698 = bitcast float %1666 to i32, !dbg !100
  %1699 = bitcast float %1667 to i32, !dbg !100
  %1700 = bitcast float %1668 to i32, !dbg !100
  %1701 = bitcast float %1669 to i32, !dbg !100
  %1702 = bitcast float %1670 to i32, !dbg !100
  %1703 = bitcast float %1671 to i32, !dbg !100
  %1704 = bitcast float %1672 to i32, !dbg !100
  %1705 = bitcast float %1673 to i32, !dbg !100
  %1706 = bitcast float %1674 to i32, !dbg !100
  %1707 = bitcast float %1675 to i32, !dbg !100
  %1708 = bitcast float %1676 to i32, !dbg !100
  %1709 = getelementptr bfloat, ptr addrspace(1) %9, i64 %242, !dbg !101
  %1710 = getelementptr bfloat, ptr addrspace(1) %9, i64 %244, !dbg !101
  %1711 = getelementptr bfloat, ptr addrspace(1) %9, i64 %246, !dbg !101
  %1712 = getelementptr bfloat, ptr addrspace(1) %9, i64 %248, !dbg !101
  %1713 = getelementptr bfloat, ptr addrspace(1) %9, i64 %125, !dbg !101
  %1714 = getelementptr bfloat, ptr addrspace(1) %9, i64 %127, !dbg !101
  %1715 = getelementptr bfloat, ptr addrspace(1) %9, i64 %129, !dbg !101
  %1716 = getelementptr bfloat, ptr addrspace(1) %9, i64 %131, !dbg !101
  %1717 = fpext <2 x bfloat> %1593 to <2 x float>, !dbg !102
  %1718 = insertelement <2 x i32> poison, i32 %1609, i64 0, !dbg !92
  %1719 = insertelement <2 x i32> %1718, i32 %1608, i64 1, !dbg !92
  %1720 = bitcast <2 x i32> %1719 to <2 x float>, !dbg !92
  %1721 = fpext <2 x bfloat> %1625 to <2 x float>, !dbg !103
  %1722 = insertelement <2 x i32> poison, i32 %1641, i64 0, !dbg !87
  %1723 = insertelement <2 x i32> %1722, i32 %1640, i64 1, !dbg !87
  %1724 = bitcast <2 x i32> %1723 to <2 x float>, !dbg !87
  %1725 = load <2 x float>, ptr addrspace(3) %230, align 16, !dbg !100
  %1726 = fadd <2 x float> %1724, %1721, !dbg !104
  %1727 = fadd <2 x float> %1726, splat (float 1.000000e+00), !dbg !105
  %1728 = fmul <2 x float> %1727, %1725, !dbg !106
  %1729 = fadd <2 x float> %1720, %1717, !dbg !107
  %1730 = fadd <2 x float> %1729, %1728, !dbg !108
  %1731 = extractelement <2 x float> %1730, i64 0, !dbg !109
  %1732 = select i1 %22, float %1731, float 0x7FF0000000000000, !dbg !110
  %1733 = extractelement <2 x float> %1730, i64 1, !dbg !109
  %1734 = select i1 %22, float %1733, float 0x7FF0000000000000, !dbg !110
  %1735 = select i1 %22, float %1731, float 0xFFF0000000000000, !dbg !109
  %1736 = select i1 %22, float %1733, float 0xFFF0000000000000, !dbg !109
  %1737 = fptrunc <2 x float> %1730 to <2 x bfloat>, !dbg !111
  %1738 = fpext <2 x bfloat> %1591 to <2 x float>, !dbg !102
  %1739 = insertelement <2 x i32> poison, i32 %1607, i64 0, !dbg !92
  %1740 = insertelement <2 x i32> %1739, i32 %1606, i64 1, !dbg !92
  %1741 = bitcast <2 x i32> %1740 to <2 x float>, !dbg !92
  %1742 = fpext <2 x bfloat> %1623 to <2 x float>, !dbg !103
  %1743 = insertelement <2 x i32> poison, i32 %1639, i64 0, !dbg !87
  %1744 = insertelement <2 x i32> %1743, i32 %1638, i64 1, !dbg !87
  %1745 = bitcast <2 x i32> %1744 to <2 x float>, !dbg !87
  %1746 = load <2 x float>, ptr addrspace(3) %231, align 8, !dbg !100
  %1747 = fadd <2 x float> %1745, %1742, !dbg !104
  %1748 = fadd <2 x float> %1747, splat (float 1.000000e+00), !dbg !105
  %1749 = fmul <2 x float> %1748, %1746, !dbg !106
  %1750 = fadd <2 x float> %1741, %1738, !dbg !107
  %1751 = fadd <2 x float> %1750, %1749, !dbg !108
  %1752 = extractelement <2 x float> %1751, i64 0, !dbg !109
  %1753 = select i1 %22, float %1752, float 0x7FF0000000000000, !dbg !110
  %1754 = extractelement <2 x float> %1751, i64 1, !dbg !109
  %1755 = select i1 %22, float %1754, float 0x7FF0000000000000, !dbg !110
  %1756 = select i1 %22, float %1752, float 0xFFF0000000000000, !dbg !109
  %1757 = select i1 %22, float %1754, float 0xFFF0000000000000, !dbg !109
  %1758 = fptrunc <2 x float> %1751 to <2 x bfloat>, !dbg !111
  %1759 = fpext <2 x bfloat> %1589 to <2 x float>, !dbg !102
  %1760 = insertelement <2 x i32> poison, i32 %1605, i64 0, !dbg !92
  %1761 = insertelement <2 x i32> %1760, i32 %1604, i64 1, !dbg !92
  %1762 = bitcast <2 x i32> %1761 to <2 x float>, !dbg !92
  %1763 = fpext <2 x bfloat> %1621 to <2 x float>, !dbg !103
  %1764 = insertelement <2 x i32> poison, i32 %1637, i64 0, !dbg !87
  %1765 = insertelement <2 x i32> %1764, i32 %1636, i64 1, !dbg !87
  %1766 = bitcast <2 x i32> %1765 to <2 x float>, !dbg !87
  %1767 = load <2 x float>, ptr addrspace(3) %232, align 16, !dbg !100
  %1768 = fadd <2 x float> %1766, %1763, !dbg !104
  %1769 = fadd <2 x float> %1768, splat (float 1.000000e+00), !dbg !105
  %1770 = fmul <2 x float> %1769, %1767, !dbg !106
  %1771 = fadd <2 x float> %1762, %1759, !dbg !107
  %1772 = fadd <2 x float> %1771, %1770, !dbg !108
  %1773 = extractelement <2 x float> %1772, i64 0, !dbg !109
  %1774 = select i1 %22, float %1773, float 0x7FF0000000000000, !dbg !110
  %1775 = extractelement <2 x float> %1772, i64 1, !dbg !109
  %1776 = select i1 %22, float %1775, float 0x7FF0000000000000, !dbg !110
  %1777 = select i1 %22, float %1773, float 0xFFF0000000000000, !dbg !109
  %1778 = select i1 %22, float %1775, float 0xFFF0000000000000, !dbg !109
  %1779 = fptrunc <2 x float> %1772 to <2 x bfloat>, !dbg !111
  %1780 = fpext <2 x bfloat> %1587 to <2 x float>, !dbg !102
  %1781 = insertelement <2 x i32> poison, i32 %1603, i64 0, !dbg !92
  %1782 = insertelement <2 x i32> %1781, i32 %1602, i64 1, !dbg !92
  %1783 = bitcast <2 x i32> %1782 to <2 x float>, !dbg !92
  %1784 = fpext <2 x bfloat> %1619 to <2 x float>, !dbg !103
  %1785 = insertelement <2 x i32> poison, i32 %1635, i64 0, !dbg !87
  %1786 = insertelement <2 x i32> %1785, i32 %1634, i64 1, !dbg !87
  %1787 = bitcast <2 x i32> %1786 to <2 x float>, !dbg !87
  %1788 = load <2 x float>, ptr addrspace(3) %233, align 8, !dbg !100
  %1789 = fadd <2 x float> %1787, %1784, !dbg !104
  %1790 = fadd <2 x float> %1789, splat (float 1.000000e+00), !dbg !105
  %1791 = fmul <2 x float> %1790, %1788, !dbg !106
  %1792 = fadd <2 x float> %1783, %1780, !dbg !107
  %1793 = fadd <2 x float> %1792, %1791, !dbg !108
  %1794 = extractelement <2 x float> %1793, i64 0, !dbg !109
  %1795 = select i1 %22, float %1794, float 0x7FF0000000000000, !dbg !110
  %1796 = extractelement <2 x float> %1793, i64 1, !dbg !109
  %1797 = select i1 %22, float %1796, float 0x7FF0000000000000, !dbg !110
  %1798 = select i1 %22, float %1794, float 0xFFF0000000000000, !dbg !109
  %1799 = select i1 %22, float %1796, float 0xFFF0000000000000, !dbg !109
  %1800 = fptrunc <2 x float> %1793 to <2 x bfloat>, !dbg !111
  %1801 = fpext <2 x bfloat> %1585 to <2 x float>, !dbg !102
  %1802 = insertelement <2 x i32> poison, i32 %1601, i64 0, !dbg !92
  %1803 = insertelement <2 x i32> %1802, i32 %1600, i64 1, !dbg !92
  %1804 = bitcast <2 x i32> %1803 to <2 x float>, !dbg !92
  %1805 = fpext <2 x bfloat> %1617 to <2 x float>, !dbg !103
  %1806 = insertelement <2 x i32> poison, i32 %1633, i64 0, !dbg !87
  %1807 = insertelement <2 x i32> %1806, i32 %1632, i64 1, !dbg !87
  %1808 = bitcast <2 x i32> %1807 to <2 x float>, !dbg !87
  %1809 = load <2 x float>, ptr addrspace(3) %234, align 16, !dbg !100
  %1810 = fadd <2 x float> %1808, %1805, !dbg !104
  %1811 = fadd <2 x float> %1810, splat (float 1.000000e+00), !dbg !105
  %1812 = fmul <2 x float> %1811, %1809, !dbg !106
  %1813 = fadd <2 x float> %1804, %1801, !dbg !107
  %1814 = fadd <2 x float> %1813, %1812, !dbg !108
  %1815 = extractelement <2 x float> %1814, i64 0, !dbg !109
  %1816 = select i1 %133, float %1815, float 0x7FF0000000000000, !dbg !110
  %1817 = extractelement <2 x float> %1814, i64 1, !dbg !109
  %1818 = select i1 %133, float %1817, float 0x7FF0000000000000, !dbg !110
  %1819 = select i1 %133, float %1815, float 0xFFF0000000000000, !dbg !109
  %1820 = select i1 %133, float %1817, float 0xFFF0000000000000, !dbg !109
  %1821 = fptrunc <2 x float> %1814 to <2 x bfloat>, !dbg !111
  %1822 = fpext <2 x bfloat> %1583 to <2 x float>, !dbg !102
  %1823 = insertelement <2 x i32> poison, i32 %1599, i64 0, !dbg !92
  %1824 = insertelement <2 x i32> %1823, i32 %1598, i64 1, !dbg !92
  %1825 = bitcast <2 x i32> %1824 to <2 x float>, !dbg !92
  %1826 = fpext <2 x bfloat> %1615 to <2 x float>, !dbg !103
  %1827 = insertelement <2 x i32> poison, i32 %1631, i64 0, !dbg !87
  %1828 = insertelement <2 x i32> %1827, i32 %1630, i64 1, !dbg !87
  %1829 = bitcast <2 x i32> %1828 to <2 x float>, !dbg !87
  %1830 = load <2 x float>, ptr addrspace(3) %235, align 8, !dbg !100
  %1831 = fadd <2 x float> %1829, %1826, !dbg !104
  %1832 = fadd <2 x float> %1831, splat (float 1.000000e+00), !dbg !105
  %1833 = fmul <2 x float> %1832, %1830, !dbg !106
  %1834 = fadd <2 x float> %1825, %1822, !dbg !107
  %1835 = fadd <2 x float> %1834, %1833, !dbg !108
  %1836 = extractelement <2 x float> %1835, i64 0, !dbg !109
  %1837 = select i1 %133, float %1836, float 0x7FF0000000000000, !dbg !110
  %1838 = extractelement <2 x float> %1835, i64 1, !dbg !109
  %1839 = select i1 %133, float %1838, float 0x7FF0000000000000, !dbg !110
  %1840 = select i1 %133, float %1836, float 0xFFF0000000000000, !dbg !109
  %1841 = select i1 %133, float %1838, float 0xFFF0000000000000, !dbg !109
  %1842 = fptrunc <2 x float> %1835 to <2 x bfloat>, !dbg !111
  %1843 = fpext <2 x bfloat> %1581 to <2 x float>, !dbg !102
  %1844 = insertelement <2 x i32> poison, i32 %1597, i64 0, !dbg !92
  %1845 = insertelement <2 x i32> %1844, i32 %1596, i64 1, !dbg !92
  %1846 = bitcast <2 x i32> %1845 to <2 x float>, !dbg !92
  %1847 = fpext <2 x bfloat> %1613 to <2 x float>, !dbg !103
  %1848 = insertelement <2 x i32> poison, i32 %1629, i64 0, !dbg !87
  %1849 = insertelement <2 x i32> %1848, i32 %1628, i64 1, !dbg !87
  %1850 = bitcast <2 x i32> %1849 to <2 x float>, !dbg !87
  %1851 = load <2 x float>, ptr addrspace(3) %236, align 16, !dbg !100
  %1852 = fadd <2 x float> %1850, %1847, !dbg !104
  %1853 = fadd <2 x float> %1852, splat (float 1.000000e+00), !dbg !105
  %1854 = fmul <2 x float> %1853, %1851, !dbg !106
  %1855 = fadd <2 x float> %1846, %1843, !dbg !107
  %1856 = fadd <2 x float> %1855, %1854, !dbg !108
  %1857 = extractelement <2 x float> %1856, i64 0, !dbg !109
  %1858 = select i1 %133, float %1857, float 0x7FF0000000000000, !dbg !110
  %1859 = extractelement <2 x float> %1856, i64 1, !dbg !109
  %1860 = select i1 %133, float %1859, float 0x7FF0000000000000, !dbg !110
  %1861 = select i1 %133, float %1857, float 0xFFF0000000000000, !dbg !109
  %1862 = select i1 %133, float %1859, float 0xFFF0000000000000, !dbg !109
  %1863 = fptrunc <2 x float> %1856 to <2 x bfloat>, !dbg !111
  %1864 = fpext <2 x bfloat> %1579 to <2 x float>, !dbg !102
  %1865 = insertelement <2 x i32> poison, i32 %1595, i64 0, !dbg !92
  %1866 = insertelement <2 x i32> %1865, i32 %1594, i64 1, !dbg !92
  %1867 = bitcast <2 x i32> %1866 to <2 x float>, !dbg !92
  %1868 = fpext <2 x bfloat> %1611 to <2 x float>, !dbg !103
  %1869 = insertelement <2 x i32> poison, i32 %1627, i64 0, !dbg !87
  %1870 = insertelement <2 x i32> %1869, i32 %1626, i64 1, !dbg !87
  %1871 = bitcast <2 x i32> %1870 to <2 x float>, !dbg !87
  %1872 = load <2 x float>, ptr addrspace(3) %237, align 8, !dbg !100
  %1873 = fadd <2 x float> %1871, %1868, !dbg !104
  %1874 = fadd <2 x float> %1873, splat (float 1.000000e+00), !dbg !105
  %1875 = fmul <2 x float> %1874, %1872, !dbg !106
  %1876 = fadd <2 x float> %1867, %1864, !dbg !107
  %1877 = fadd <2 x float> %1876, %1875, !dbg !108
  %1878 = extractelement <2 x float> %1877, i64 0, !dbg !109
  %1879 = select i1 %133, float %1878, float 0x7FF0000000000000, !dbg !110
  %1880 = extractelement <2 x float> %1877, i64 1, !dbg !109
  %1881 = select i1 %133, float %1880, float 0x7FF0000000000000, !dbg !110
  %1882 = select i1 %133, float %1878, float 0xFFF0000000000000, !dbg !109
  %1883 = select i1 %133, float %1880, float 0xFFF0000000000000, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %226, i32 %1693, i32 %1694, i32 %1695, i32 %1696, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %227, i32 %1697, i32 %1698, i32 %1699, i32 %1700, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %228, i32 %1701, i32 %1702, i32 %1703, i32 %1704, i1 true) #5, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %229, i32 %1705, i32 %1706, i32 %1707, i32 %1708, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1884 = fptrunc <2 x float> %1877 to <2 x bfloat>, !dbg !111
  %1885 = load <2 x float>, ptr addrspace(3) %230, align 16, !dbg !100
  %1886 = fmul <2 x float> %1727, %1885, !dbg !106
  %1887 = fadd <2 x float> %1729, %1886, !dbg !108
  %1888 = extractelement <2 x float> %1887, i64 0, !dbg !109
  %1889 = select i1 %23, float %1888, float 0x7FF0000000000000, !dbg !110
  %1890 = extractelement <2 x float> %1887, i64 1, !dbg !109
  %1891 = select i1 %23, float %1890, float 0x7FF0000000000000, !dbg !110
  %1892 = select i1 %23, float %1888, float 0xFFF0000000000000, !dbg !109
  %1893 = select i1 %23, float %1890, float 0xFFF0000000000000, !dbg !109
  %1894 = fptrunc <2 x float> %1887 to <2 x bfloat>, !dbg !111
  %1895 = load <2 x float>, ptr addrspace(3) %231, align 8, !dbg !100
  %1896 = fmul <2 x float> %1748, %1895, !dbg !106
  %1897 = fadd <2 x float> %1750, %1896, !dbg !108
  %1898 = extractelement <2 x float> %1897, i64 0, !dbg !109
  %1899 = select i1 %23, float %1898, float 0x7FF0000000000000, !dbg !110
  %1900 = extractelement <2 x float> %1897, i64 1, !dbg !109
  %1901 = select i1 %23, float %1900, float 0x7FF0000000000000, !dbg !110
  %1902 = select i1 %23, float %1898, float 0xFFF0000000000000, !dbg !109
  %1903 = select i1 %23, float %1900, float 0xFFF0000000000000, !dbg !109
  %1904 = fptrunc <2 x float> %1897 to <2 x bfloat>, !dbg !111
  %1905 = load <2 x float>, ptr addrspace(3) %232, align 16, !dbg !100
  %1906 = fmul <2 x float> %1769, %1905, !dbg !106
  %1907 = fadd <2 x float> %1771, %1906, !dbg !108
  %1908 = extractelement <2 x float> %1907, i64 0, !dbg !109
  %1909 = select i1 %23, float %1908, float 0x7FF0000000000000, !dbg !110
  %1910 = extractelement <2 x float> %1907, i64 1, !dbg !109
  %1911 = select i1 %23, float %1910, float 0x7FF0000000000000, !dbg !110
  %1912 = select i1 %23, float %1908, float 0xFFF0000000000000, !dbg !109
  %1913 = select i1 %23, float %1910, float 0xFFF0000000000000, !dbg !109
  %1914 = fptrunc <2 x float> %1907 to <2 x bfloat>, !dbg !111
  %1915 = load <2 x float>, ptr addrspace(3) %233, align 8, !dbg !100
  %1916 = fmul <2 x float> %1790, %1915, !dbg !106
  %1917 = fadd <2 x float> %1792, %1916, !dbg !108
  %1918 = extractelement <2 x float> %1917, i64 0, !dbg !109
  %1919 = select i1 %23, float %1918, float 0x7FF0000000000000, !dbg !110
  %1920 = extractelement <2 x float> %1917, i64 1, !dbg !109
  %1921 = select i1 %23, float %1920, float 0x7FF0000000000000, !dbg !110
  %1922 = select i1 %23, float %1918, float 0xFFF0000000000000, !dbg !109
  %1923 = select i1 %23, float %1920, float 0xFFF0000000000000, !dbg !109
  %1924 = fptrunc <2 x float> %1917 to <2 x bfloat>, !dbg !111
  %1925 = load <2 x float>, ptr addrspace(3) %234, align 16, !dbg !100
  %1926 = fmul <2 x float> %1811, %1925, !dbg !106
  %1927 = fadd <2 x float> %1813, %1926, !dbg !108
  %1928 = extractelement <2 x float> %1927, i64 0, !dbg !109
  %1929 = select i1 %134, float %1928, float 0x7FF0000000000000, !dbg !110
  %1930 = extractelement <2 x float> %1927, i64 1, !dbg !109
  %1931 = select i1 %134, float %1930, float 0x7FF0000000000000, !dbg !110
  %1932 = select i1 %134, float %1928, float 0xFFF0000000000000, !dbg !109
  %1933 = select i1 %134, float %1930, float 0xFFF0000000000000, !dbg !109
  %1934 = fptrunc <2 x float> %1927 to <2 x bfloat>, !dbg !111
  %1935 = load <2 x float>, ptr addrspace(3) %235, align 8, !dbg !100
  %1936 = fmul <2 x float> %1832, %1935, !dbg !106
  %1937 = fadd <2 x float> %1834, %1936, !dbg !108
  %1938 = extractelement <2 x float> %1937, i64 0, !dbg !109
  %1939 = select i1 %134, float %1938, float 0x7FF0000000000000, !dbg !110
  %1940 = extractelement <2 x float> %1937, i64 1, !dbg !109
  %1941 = select i1 %134, float %1940, float 0x7FF0000000000000, !dbg !110
  %1942 = select i1 %134, float %1938, float 0xFFF0000000000000, !dbg !109
  %1943 = select i1 %134, float %1940, float 0xFFF0000000000000, !dbg !109
  %1944 = fptrunc <2 x float> %1937 to <2 x bfloat>, !dbg !111
  %1945 = load <2 x float>, ptr addrspace(3) %236, align 16, !dbg !100
  %1946 = fmul <2 x float> %1853, %1945, !dbg !106
  %1947 = fadd <2 x float> %1855, %1946, !dbg !108
  %1948 = extractelement <2 x float> %1947, i64 0, !dbg !109
  %1949 = select i1 %134, float %1948, float 0x7FF0000000000000, !dbg !110
  %1950 = extractelement <2 x float> %1947, i64 1, !dbg !109
  %1951 = select i1 %134, float %1950, float 0x7FF0000000000000, !dbg !110
  %1952 = select i1 %134, float %1948, float 0xFFF0000000000000, !dbg !109
  %1953 = select i1 %134, float %1950, float 0xFFF0000000000000, !dbg !109
  %1954 = fptrunc <2 x float> %1947 to <2 x bfloat>, !dbg !111
  %1955 = load <2 x float>, ptr addrspace(3) %237, align 8, !dbg !100
  %1956 = fmul <2 x float> %1874, %1955, !dbg !106
  %1957 = fadd <2 x float> %1876, %1956, !dbg !108
  %1958 = extractelement <2 x float> %1957, i64 0, !dbg !109
  %1959 = select i1 %134, float %1958, float 0x7FF0000000000000, !dbg !110
  %1960 = extractelement <2 x float> %1957, i64 1, !dbg !109
  %1961 = select i1 %134, float %1960, float 0x7FF0000000000000, !dbg !110
  %1962 = select i1 %134, float %1958, float 0xFFF0000000000000, !dbg !109
  %1963 = select i1 %134, float %1960, float 0xFFF0000000000000, !dbg !109
  %1964 = fptrunc <2 x float> %1957 to <2 x bfloat>, !dbg !111
  %1965 = bitcast <2 x bfloat> %1737 to i32, !dbg !111
  %1966 = bitcast <2 x bfloat> %1758 to i32, !dbg !111
  %1967 = bitcast <2 x bfloat> %1779 to i32, !dbg !111
  %1968 = bitcast <2 x bfloat> %1800 to i32, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1965, i32 %1966, i32 %1967, i32 %1968, ptr addrspace(1) %1709, i1 %22) #5, !dbg !111
  %1969 = bitcast <2 x bfloat> %1821 to i32, !dbg !111
  %1970 = bitcast <2 x bfloat> %1842 to i32, !dbg !111
  %1971 = bitcast <2 x bfloat> %1863 to i32, !dbg !111
  %1972 = bitcast <2 x bfloat> %1884 to i32, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1969, i32 %1970, i32 %1971, i32 %1972, ptr addrspace(1) %1710, i1 %133) #5, !dbg !111
  %1973 = bitcast <2 x bfloat> %1894 to i32, !dbg !111
  %1974 = bitcast <2 x bfloat> %1904 to i32, !dbg !111
  %1975 = bitcast <2 x bfloat> %1914 to i32, !dbg !111
  %1976 = bitcast <2 x bfloat> %1924 to i32, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1973, i32 %1974, i32 %1975, i32 %1976, ptr addrspace(1) %1711, i1 %23) #5, !dbg !111
  %1977 = bitcast <2 x bfloat> %1934 to i32, !dbg !111
  %1978 = bitcast <2 x bfloat> %1944 to i32, !dbg !111
  %1979 = bitcast <2 x bfloat> %1954 to i32, !dbg !111
  %1980 = bitcast <2 x bfloat> %1964 to i32, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1977, i32 %1978, i32 %1979, i32 %1980, ptr addrspace(1) %1712, i1 %134) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %1981 = fcmp olt float %1732, %1734, !dbg !114
  %1982 = fcmp uno float %1732, 0.000000e+00, !dbg !115
  %1983 = or i1 %1981, %1982, !dbg !116
  %1984 = select i1 %1983, float %1732, float %1734, !dbg !117
  %1985 = fcmp olt float %1984, %1753, !dbg !114
  %1986 = fcmp uno float %1984, 0.000000e+00, !dbg !115
  %1987 = or i1 %1985, %1986, !dbg !116
  %1988 = select i1 %1987, float %1984, float %1753, !dbg !117
  %1989 = fcmp olt float %1988, %1755, !dbg !114
  %1990 = fcmp uno float %1988, 0.000000e+00, !dbg !115
  %1991 = or i1 %1989, %1990, !dbg !116
  %1992 = select i1 %1991, float %1988, float %1755, !dbg !117
  %1993 = fcmp olt float %1992, %1774, !dbg !114
  %1994 = fcmp uno float %1992, 0.000000e+00, !dbg !115
  %1995 = or i1 %1993, %1994, !dbg !116
  %1996 = select i1 %1995, float %1992, float %1774, !dbg !117
  %1997 = fcmp olt float %1996, %1776, !dbg !114
  %1998 = fcmp uno float %1996, 0.000000e+00, !dbg !115
  %1999 = or i1 %1997, %1998, !dbg !116
  %2000 = select i1 %1999, float %1996, float %1776, !dbg !117
  %2001 = fcmp olt float %2000, %1795, !dbg !114
  %2002 = fcmp uno float %2000, 0.000000e+00, !dbg !115
  %2003 = or i1 %2001, %2002, !dbg !116
  %2004 = select i1 %2003, float %2000, float %1795, !dbg !117
  %2005 = fcmp olt float %2004, %1797, !dbg !114
  %2006 = fcmp uno float %2004, 0.000000e+00, !dbg !115
  %2007 = or i1 %2005, %2006, !dbg !116
  %2008 = select i1 %2007, float %2004, float %1797, !dbg !117
  %2009 = fcmp olt float %2008, %1816, !dbg !114
  %2010 = fcmp uno float %2008, 0.000000e+00, !dbg !115
  %2011 = or i1 %2009, %2010, !dbg !116
  %2012 = select i1 %2011, float %2008, float %1816, !dbg !117
  %2013 = fcmp olt float %2012, %1818, !dbg !114
  %2014 = fcmp uno float %2012, 0.000000e+00, !dbg !115
  %2015 = or i1 %2013, %2014, !dbg !116
  %2016 = select i1 %2015, float %2012, float %1818, !dbg !117
  %2017 = fcmp olt float %2016, %1837, !dbg !114
  %2018 = fcmp uno float %2016, 0.000000e+00, !dbg !115
  %2019 = or i1 %2017, %2018, !dbg !116
  %2020 = select i1 %2019, float %2016, float %1837, !dbg !117
  %2021 = fcmp olt float %2020, %1839, !dbg !114
  %2022 = fcmp uno float %2020, 0.000000e+00, !dbg !115
  %2023 = or i1 %2021, %2022, !dbg !116
  %2024 = select i1 %2023, float %2020, float %1839, !dbg !117
  %2025 = fcmp olt float %2024, %1858, !dbg !114
  %2026 = fcmp uno float %2024, 0.000000e+00, !dbg !115
  %2027 = or i1 %2025, %2026, !dbg !116
  %2028 = select i1 %2027, float %2024, float %1858, !dbg !117
  %2029 = fcmp olt float %2028, %1860, !dbg !114
  %2030 = fcmp uno float %2028, 0.000000e+00, !dbg !115
  %2031 = or i1 %2029, %2030, !dbg !116
  %2032 = select i1 %2031, float %2028, float %1860, !dbg !117
  %2033 = fcmp olt float %2032, %1879, !dbg !114
  %2034 = fcmp uno float %2032, 0.000000e+00, !dbg !115
  %2035 = or i1 %2033, %2034, !dbg !116
  %2036 = select i1 %2035, float %2032, float %1879, !dbg !117
  %2037 = fcmp olt float %2036, %1881, !dbg !114
  %2038 = fcmp uno float %2036, 0.000000e+00, !dbg !115
  %2039 = or i1 %2037, %2038, !dbg !116
  %2040 = select i1 %2039, float %2036, float %1881, !dbg !117
  %2041 = fcmp olt float %1889, %1891, !dbg !114
  %2042 = fcmp uno float %1889, 0.000000e+00, !dbg !115
  %2043 = or i1 %2041, %2042, !dbg !116
  %2044 = select i1 %2043, float %1889, float %1891, !dbg !117
  %2045 = fcmp olt float %2044, %1899, !dbg !114
  %2046 = fcmp uno float %2044, 0.000000e+00, !dbg !115
  %2047 = or i1 %2045, %2046, !dbg !116
  %2048 = select i1 %2047, float %2044, float %1899, !dbg !117
  %2049 = fcmp olt float %2048, %1901, !dbg !114
  %2050 = fcmp uno float %2048, 0.000000e+00, !dbg !115
  %2051 = or i1 %2049, %2050, !dbg !116
  %2052 = select i1 %2051, float %2048, float %1901, !dbg !117
  %2053 = fcmp olt float %2052, %1909, !dbg !114
  %2054 = fcmp uno float %2052, 0.000000e+00, !dbg !115
  %2055 = or i1 %2053, %2054, !dbg !116
  %2056 = select i1 %2055, float %2052, float %1909, !dbg !117
  %2057 = fcmp olt float %2056, %1911, !dbg !114
  %2058 = fcmp uno float %2056, 0.000000e+00, !dbg !115
  %2059 = or i1 %2057, %2058, !dbg !116
  %2060 = select i1 %2059, float %2056, float %1911, !dbg !117
  %2061 = fcmp olt float %2060, %1919, !dbg !114
  %2062 = fcmp uno float %2060, 0.000000e+00, !dbg !115
  %2063 = or i1 %2061, %2062, !dbg !116
  %2064 = select i1 %2063, float %2060, float %1919, !dbg !117
  %2065 = fcmp olt float %2064, %1921, !dbg !114
  %2066 = fcmp uno float %2064, 0.000000e+00, !dbg !115
  %2067 = or i1 %2065, %2066, !dbg !116
  %2068 = select i1 %2067, float %2064, float %1921, !dbg !117
  %2069 = fcmp olt float %2068, %1929, !dbg !114
  %2070 = fcmp uno float %2068, 0.000000e+00, !dbg !115
  %2071 = or i1 %2069, %2070, !dbg !116
  %2072 = select i1 %2071, float %2068, float %1929, !dbg !117
  %2073 = fcmp olt float %2072, %1931, !dbg !114
  %2074 = fcmp uno float %2072, 0.000000e+00, !dbg !115
  %2075 = or i1 %2073, %2074, !dbg !116
  %2076 = select i1 %2075, float %2072, float %1931, !dbg !117
  %2077 = fcmp olt float %2076, %1939, !dbg !114
  %2078 = fcmp uno float %2076, 0.000000e+00, !dbg !115
  %2079 = or i1 %2077, %2078, !dbg !116
  %2080 = select i1 %2079, float %2076, float %1939, !dbg !117
  %2081 = fcmp olt float %2080, %1941, !dbg !114
  %2082 = fcmp uno float %2080, 0.000000e+00, !dbg !115
  %2083 = or i1 %2081, %2082, !dbg !116
  %2084 = select i1 %2083, float %2080, float %1941, !dbg !117
  %2085 = fcmp olt float %2084, %1949, !dbg !114
  %2086 = fcmp uno float %2084, 0.000000e+00, !dbg !115
  %2087 = or i1 %2085, %2086, !dbg !116
  %2088 = select i1 %2087, float %2084, float %1949, !dbg !117
  %2089 = fcmp olt float %2088, %1951, !dbg !114
  %2090 = fcmp uno float %2088, 0.000000e+00, !dbg !115
  %2091 = or i1 %2089, %2090, !dbg !116
  %2092 = select i1 %2091, float %2088, float %1951, !dbg !117
  %2093 = fcmp olt float %2092, %1959, !dbg !114
  %2094 = fcmp uno float %2092, 0.000000e+00, !dbg !115
  %2095 = or i1 %2093, %2094, !dbg !116
  %2096 = select i1 %2095, float %2092, float %1959, !dbg !117
  %2097 = fcmp olt float %2096, %1961, !dbg !114
  %2098 = fcmp uno float %2096, 0.000000e+00, !dbg !115
  %2099 = or i1 %2097, %2098, !dbg !116
  %2100 = select i1 %2099, float %2096, float %1961, !dbg !117
  %2101 = bitcast float %2040 to i32, !dbg !112
  %2102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2101, i32 16, i32 31), !dbg !112
  %2103 = bitcast i32 %2102 to float, !dbg !112
  %2104 = fcmp olt float %2040, %2103, !dbg !114
  %2105 = fcmp uno float %2040, 0.000000e+00, !dbg !115
  %2106 = or i1 %2104, %2105, !dbg !116
  %2107 = select i1 %2106, float %2040, float %2103, !dbg !117
  %2108 = bitcast float %2107 to i32, !dbg !112
  %2109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2108, i32 8, i32 31), !dbg !112
  %2110 = bitcast i32 %2109 to float, !dbg !112
  %2111 = fcmp olt float %2107, %2110, !dbg !114
  %2112 = fcmp uno float %2107, 0.000000e+00, !dbg !115
  %2113 = or i1 %2111, %2112, !dbg !116
  %2114 = select i1 %2113, float %2107, float %2110, !dbg !117
  %2115 = bitcast float %2114 to i32, !dbg !112
  %2116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2115, i32 4, i32 31), !dbg !112
  %2117 = bitcast i32 %2116 to float, !dbg !112
  %2118 = fcmp olt float %2114, %2117, !dbg !114
  %2119 = fcmp uno float %2114, 0.000000e+00, !dbg !115
  %2120 = or i1 %2118, %2119, !dbg !116
  %2121 = select i1 %2120, float %2114, float %2117, !dbg !117
  %2122 = bitcast float %2121 to i32, !dbg !112
  %2123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2122, i32 2, i32 31), !dbg !112
  %2124 = bitcast i32 %2123 to float, !dbg !112
  %2125 = fcmp olt float %2121, %2124, !dbg !114
  %2126 = fcmp uno float %2121, 0.000000e+00, !dbg !115
  %2127 = or i1 %2125, %2126, !dbg !116
  %2128 = select i1 %2127, float %2121, float %2124, !dbg !117
  %2129 = bitcast float %2128 to i32, !dbg !112
  %2130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2129, i32 1, i32 31), !dbg !112
  %2131 = bitcast i32 %2130 to float, !dbg !112
  %2132 = fcmp olt float %2128, %2131, !dbg !114
  %2133 = fcmp uno float %2128, 0.000000e+00, !dbg !115
  %2134 = or i1 %2132, %2133, !dbg !116
  %2135 = bitcast float %2100 to i32, !dbg !112
  %2136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2135, i32 16, i32 31), !dbg !112
  %2137 = bitcast i32 %2136 to float, !dbg !112
  %2138 = fcmp olt float %2100, %2137, !dbg !114
  %2139 = fcmp uno float %2100, 0.000000e+00, !dbg !115
  %2140 = or i1 %2138, %2139, !dbg !116
  %2141 = select i1 %2140, float %2100, float %2137, !dbg !117
  %2142 = bitcast float %2141 to i32, !dbg !112
  %2143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2142, i32 8, i32 31), !dbg !112
  %2144 = bitcast i32 %2143 to float, !dbg !112
  %2145 = fcmp olt float %2141, %2144, !dbg !114
  %2146 = fcmp uno float %2141, 0.000000e+00, !dbg !115
  %2147 = or i1 %2145, %2146, !dbg !116
  %2148 = select i1 %2147, float %2141, float %2144, !dbg !117
  %2149 = bitcast float %2148 to i32, !dbg !112
  %2150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2149, i32 4, i32 31), !dbg !112
  %2151 = bitcast i32 %2150 to float, !dbg !112
  %2152 = fcmp olt float %2148, %2151, !dbg !114
  %2153 = fcmp uno float %2148, 0.000000e+00, !dbg !115
  %2154 = or i1 %2152, %2153, !dbg !116
  %2155 = select i1 %2154, float %2148, float %2151, !dbg !117
  %2156 = bitcast float %2155 to i32, !dbg !112
  %2157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2156, i32 2, i32 31), !dbg !112
  %2158 = bitcast i32 %2157 to float, !dbg !112
  %2159 = fcmp olt float %2155, %2158, !dbg !114
  %2160 = fcmp uno float %2155, 0.000000e+00, !dbg !115
  %2161 = or i1 %2159, %2160, !dbg !116
  %2162 = select i1 %2161, float %2155, float %2158, !dbg !117
  %2163 = bitcast float %2162 to i32, !dbg !112
  %2164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2163, i32 1, i32 31), !dbg !112
  %2165 = bitcast i32 %2164 to float, !dbg !112
  %2166 = fcmp olt float %2162, %2165, !dbg !114
  %2167 = fcmp uno float %2162, 0.000000e+00, !dbg !115
  %2168 = or i1 %2166, %2167, !dbg !116
  %2169 = select i1 %2134, i32 %2129, i32 %2130, !dbg !117
  %2170 = insertelement <1 x i32> poison, i32 %2169, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1288, <1 x i32> %2170, i1 %1287) #5, !dbg !112
  %2171 = select i1 %2168, i32 %2163, i32 %2164, !dbg !117
  %2172 = insertelement <1 x i32> poison, i32 %2171, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1295, <1 x i32> %2172, i1 %1287) #5, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %2173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1302, i1 %1301) #5, !dbg !112
  %2174 = bitcast i32 %2173 to float, !dbg !112
  %2175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2173, i32 4, i32 31), !dbg !112
  %2176 = bitcast i32 %2175 to float, !dbg !112
  %2177 = fcmp olt float %2174, %2176, !dbg !114
  %2178 = fcmp uno float %2174, 0.000000e+00, !dbg !115
  %2179 = or i1 %2178, %2177, !dbg !116
  %2180 = select i1 %2179, float %2174, float %2176, !dbg !117
  %2181 = bitcast float %2180 to i32, !dbg !112
  %2182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2181, i32 2, i32 31), !dbg !112
  %2183 = bitcast i32 %2182 to float, !dbg !112
  %2184 = fcmp olt float %2180, %2183, !dbg !114
  %2185 = fcmp uno float %2180, 0.000000e+00, !dbg !115
  %2186 = or i1 %2184, %2185, !dbg !116
  %2187 = select i1 %2186, float %2180, float %2183, !dbg !117
  %2188 = bitcast float %2187 to i32, !dbg !112
  %2189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2188, i32 1, i32 31), !dbg !112
  %2190 = bitcast i32 %2189 to float, !dbg !112
  %2191 = fcmp olt float %2187, %2190, !dbg !114
  %2192 = fcmp uno float %2187, 0.000000e+00, !dbg !115
  %2193 = or i1 %2191, %2192, !dbg !116
  %2194 = select i1 %2193, i32 %2188, i32 %2189, !dbg !117
  %2195 = insertelement <1 x i32> poison, i32 %2194, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1302, <1 x i32> %2195, i1 %1373) #5, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %2196 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !112
  %2197 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %2198 = bitcast float %2196 to i32, !dbg !118
  %2199 = bitcast float %2197 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2198, i32 %2199, i1 true) #5, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %2200 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1642, !dbg !118
  %2201 = load float, ptr addrspace(3) %2200, align 4, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %2202 = fcmp ogt float %1735, %1736, !dbg !121
  %2203 = fcmp uno float %1735, 0.000000e+00, !dbg !122
  %2204 = or i1 %2202, %2203, !dbg !123
  %2205 = select i1 %2204, float %1735, float %1736, !dbg !124
  %2206 = fcmp ogt float %2205, %1756, !dbg !121
  %2207 = fcmp uno float %2205, 0.000000e+00, !dbg !122
  %2208 = or i1 %2206, %2207, !dbg !123
  %2209 = select i1 %2208, float %2205, float %1756, !dbg !124
  %2210 = fcmp ogt float %2209, %1757, !dbg !121
  %2211 = fcmp uno float %2209, 0.000000e+00, !dbg !122
  %2212 = or i1 %2210, %2211, !dbg !123
  %2213 = select i1 %2212, float %2209, float %1757, !dbg !124
  %2214 = fcmp ogt float %2213, %1777, !dbg !121
  %2215 = fcmp uno float %2213, 0.000000e+00, !dbg !122
  %2216 = or i1 %2214, %2215, !dbg !123
  %2217 = select i1 %2216, float %2213, float %1777, !dbg !124
  %2218 = fcmp ogt float %2217, %1778, !dbg !121
  %2219 = fcmp uno float %2217, 0.000000e+00, !dbg !122
  %2220 = or i1 %2218, %2219, !dbg !123
  %2221 = select i1 %2220, float %2217, float %1778, !dbg !124
  %2222 = fcmp ogt float %2221, %1798, !dbg !121
  %2223 = fcmp uno float %2221, 0.000000e+00, !dbg !122
  %2224 = or i1 %2222, %2223, !dbg !123
  %2225 = select i1 %2224, float %2221, float %1798, !dbg !124
  %2226 = fcmp ogt float %2225, %1799, !dbg !121
  %2227 = fcmp uno float %2225, 0.000000e+00, !dbg !122
  %2228 = or i1 %2226, %2227, !dbg !123
  %2229 = select i1 %2228, float %2225, float %1799, !dbg !124
  %2230 = fcmp ogt float %2229, %1819, !dbg !121
  %2231 = fcmp uno float %2229, 0.000000e+00, !dbg !122
  %2232 = or i1 %2230, %2231, !dbg !123
  %2233 = select i1 %2232, float %2229, float %1819, !dbg !124
  %2234 = fcmp ogt float %2233, %1820, !dbg !121
  %2235 = fcmp uno float %2233, 0.000000e+00, !dbg !122
  %2236 = or i1 %2234, %2235, !dbg !123
  %2237 = select i1 %2236, float %2233, float %1820, !dbg !124
  %2238 = fcmp ogt float %2237, %1840, !dbg !121
  %2239 = fcmp uno float %2237, 0.000000e+00, !dbg !122
  %2240 = or i1 %2238, %2239, !dbg !123
  %2241 = select i1 %2240, float %2237, float %1840, !dbg !124
  %2242 = fcmp ogt float %2241, %1841, !dbg !121
  %2243 = fcmp uno float %2241, 0.000000e+00, !dbg !122
  %2244 = or i1 %2242, %2243, !dbg !123
  %2245 = select i1 %2244, float %2241, float %1841, !dbg !124
  %2246 = fcmp ogt float %2245, %1861, !dbg !121
  %2247 = fcmp uno float %2245, 0.000000e+00, !dbg !122
  %2248 = or i1 %2246, %2247, !dbg !123
  %2249 = select i1 %2248, float %2245, float %1861, !dbg !124
  %2250 = fcmp ogt float %2249, %1862, !dbg !121
  %2251 = fcmp uno float %2249, 0.000000e+00, !dbg !122
  %2252 = or i1 %2250, %2251, !dbg !123
  %2253 = select i1 %2252, float %2249, float %1862, !dbg !124
  %2254 = fcmp ogt float %2253, %1882, !dbg !121
  %2255 = fcmp uno float %2253, 0.000000e+00, !dbg !122
  %2256 = or i1 %2254, %2255, !dbg !123
  %2257 = select i1 %2256, float %2253, float %1882, !dbg !124
  %2258 = fcmp ogt float %2257, %1883, !dbg !121
  %2259 = fcmp uno float %2257, 0.000000e+00, !dbg !122
  %2260 = or i1 %2258, %2259, !dbg !123
  %2261 = select i1 %2260, float %2257, float %1883, !dbg !124
  %2262 = fcmp ogt float %1892, %1893, !dbg !121
  %2263 = fcmp uno float %1892, 0.000000e+00, !dbg !122
  %2264 = or i1 %2262, %2263, !dbg !123
  %2265 = select i1 %2264, float %1892, float %1893, !dbg !124
  %2266 = fcmp ogt float %2265, %1902, !dbg !121
  %2267 = fcmp uno float %2265, 0.000000e+00, !dbg !122
  %2268 = or i1 %2266, %2267, !dbg !123
  %2269 = select i1 %2268, float %2265, float %1902, !dbg !124
  %2270 = fcmp ogt float %2269, %1903, !dbg !121
  %2271 = fcmp uno float %2269, 0.000000e+00, !dbg !122
  %2272 = or i1 %2270, %2271, !dbg !123
  %2273 = select i1 %2272, float %2269, float %1903, !dbg !124
  %2274 = fcmp ogt float %2273, %1912, !dbg !121
  %2275 = fcmp uno float %2273, 0.000000e+00, !dbg !122
  %2276 = or i1 %2274, %2275, !dbg !123
  %2277 = select i1 %2276, float %2273, float %1912, !dbg !124
  %2278 = fcmp ogt float %2277, %1913, !dbg !121
  %2279 = fcmp uno float %2277, 0.000000e+00, !dbg !122
  %2280 = or i1 %2278, %2279, !dbg !123
  %2281 = select i1 %2280, float %2277, float %1913, !dbg !124
  %2282 = fcmp ogt float %2281, %1922, !dbg !121
  %2283 = fcmp uno float %2281, 0.000000e+00, !dbg !122
  %2284 = or i1 %2282, %2283, !dbg !123
  %2285 = select i1 %2284, float %2281, float %1922, !dbg !124
  %2286 = fcmp ogt float %2285, %1923, !dbg !121
  %2287 = fcmp uno float %2285, 0.000000e+00, !dbg !122
  %2288 = or i1 %2286, %2287, !dbg !123
  %2289 = select i1 %2288, float %2285, float %1923, !dbg !124
  %2290 = fcmp ogt float %2289, %1932, !dbg !121
  %2291 = fcmp uno float %2289, 0.000000e+00, !dbg !122
  %2292 = or i1 %2290, %2291, !dbg !123
  %2293 = select i1 %2292, float %2289, float %1932, !dbg !124
  %2294 = fcmp ogt float %2293, %1933, !dbg !121
  %2295 = fcmp uno float %2293, 0.000000e+00, !dbg !122
  %2296 = or i1 %2294, %2295, !dbg !123
  %2297 = select i1 %2296, float %2293, float %1933, !dbg !124
  %2298 = fcmp ogt float %2297, %1942, !dbg !121
  %2299 = fcmp uno float %2297, 0.000000e+00, !dbg !122
  %2300 = or i1 %2298, %2299, !dbg !123
  %2301 = select i1 %2300, float %2297, float %1942, !dbg !124
  %2302 = fcmp ogt float %2301, %1943, !dbg !121
  %2303 = fcmp uno float %2301, 0.000000e+00, !dbg !122
  %2304 = or i1 %2302, %2303, !dbg !123
  %2305 = select i1 %2304, float %2301, float %1943, !dbg !124
  %2306 = fcmp ogt float %2305, %1952, !dbg !121
  %2307 = fcmp uno float %2305, 0.000000e+00, !dbg !122
  %2308 = or i1 %2306, %2307, !dbg !123
  %2309 = select i1 %2308, float %2305, float %1952, !dbg !124
  %2310 = fcmp ogt float %2309, %1953, !dbg !121
  %2311 = fcmp uno float %2309, 0.000000e+00, !dbg !122
  %2312 = or i1 %2310, %2311, !dbg !123
  %2313 = select i1 %2312, float %2309, float %1953, !dbg !124
  %2314 = fcmp ogt float %2313, %1962, !dbg !121
  %2315 = fcmp uno float %2313, 0.000000e+00, !dbg !122
  %2316 = or i1 %2314, %2315, !dbg !123
  %2317 = select i1 %2316, float %2313, float %1962, !dbg !124
  %2318 = fcmp ogt float %2317, %1963, !dbg !121
  %2319 = fcmp uno float %2317, 0.000000e+00, !dbg !122
  %2320 = or i1 %2318, %2319, !dbg !123
  %2321 = select i1 %2320, float %2317, float %1963, !dbg !124
  %2322 = bitcast float %2261 to i32, !dbg !119
  %2323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2322, i32 16, i32 31), !dbg !119
  %2324 = bitcast i32 %2323 to float, !dbg !119
  %2325 = fcmp ogt float %2261, %2324, !dbg !121
  %2326 = fcmp uno float %2261, 0.000000e+00, !dbg !122
  %2327 = or i1 %2325, %2326, !dbg !123
  %2328 = select i1 %2327, float %2261, float %2324, !dbg !124
  %2329 = bitcast float %2328 to i32, !dbg !119
  %2330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2329, i32 8, i32 31), !dbg !119
  %2331 = bitcast i32 %2330 to float, !dbg !119
  %2332 = fcmp ogt float %2328, %2331, !dbg !121
  %2333 = fcmp uno float %2328, 0.000000e+00, !dbg !122
  %2334 = or i1 %2332, %2333, !dbg !123
  %2335 = select i1 %2334, float %2328, float %2331, !dbg !124
  %2336 = bitcast float %2335 to i32, !dbg !119
  %2337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2336, i32 4, i32 31), !dbg !119
  %2338 = bitcast i32 %2337 to float, !dbg !119
  %2339 = fcmp ogt float %2335, %2338, !dbg !121
  %2340 = fcmp uno float %2335, 0.000000e+00, !dbg !122
  %2341 = or i1 %2339, %2340, !dbg !123
  %2342 = select i1 %2341, float %2335, float %2338, !dbg !124
  %2343 = bitcast float %2342 to i32, !dbg !119
  %2344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2343, i32 2, i32 31), !dbg !119
  %2345 = bitcast i32 %2344 to float, !dbg !119
  %2346 = fcmp ogt float %2342, %2345, !dbg !121
  %2347 = fcmp uno float %2342, 0.000000e+00, !dbg !122
  %2348 = or i1 %2346, %2347, !dbg !123
  %2349 = select i1 %2348, float %2342, float %2345, !dbg !124
  %2350 = bitcast float %2349 to i32, !dbg !119
  %2351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2350, i32 1, i32 31), !dbg !119
  %2352 = bitcast i32 %2351 to float, !dbg !119
  %2353 = fcmp ogt float %2349, %2352, !dbg !121
  %2354 = fcmp uno float %2349, 0.000000e+00, !dbg !122
  %2355 = or i1 %2353, %2354, !dbg !123
  %2356 = bitcast float %2321 to i32, !dbg !119
  %2357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2356, i32 16, i32 31), !dbg !119
  %2358 = bitcast i32 %2357 to float, !dbg !119
  %2359 = fcmp ogt float %2321, %2358, !dbg !121
  %2360 = fcmp uno float %2321, 0.000000e+00, !dbg !122
  %2361 = or i1 %2359, %2360, !dbg !123
  %2362 = select i1 %2361, float %2321, float %2358, !dbg !124
  %2363 = bitcast float %2362 to i32, !dbg !119
  %2364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2363, i32 8, i32 31), !dbg !119
  %2365 = bitcast i32 %2364 to float, !dbg !119
  %2366 = fcmp ogt float %2362, %2365, !dbg !121
  %2367 = fcmp uno float %2362, 0.000000e+00, !dbg !122
  %2368 = or i1 %2366, %2367, !dbg !123
  %2369 = select i1 %2368, float %2362, float %2365, !dbg !124
  %2370 = bitcast float %2369 to i32, !dbg !119
  %2371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2370, i32 4, i32 31), !dbg !119
  %2372 = bitcast i32 %2371 to float, !dbg !119
  %2373 = fcmp ogt float %2369, %2372, !dbg !121
  %2374 = fcmp uno float %2369, 0.000000e+00, !dbg !122
  %2375 = or i1 %2373, %2374, !dbg !123
  %2376 = select i1 %2375, float %2369, float %2372, !dbg !124
  %2377 = bitcast float %2376 to i32, !dbg !119
  %2378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2377, i32 2, i32 31), !dbg !119
  %2379 = bitcast i32 %2378 to float, !dbg !119
  %2380 = fcmp ogt float %2376, %2379, !dbg !121
  %2381 = fcmp uno float %2376, 0.000000e+00, !dbg !122
  %2382 = or i1 %2380, %2381, !dbg !123
  %2383 = select i1 %2382, float %2376, float %2379, !dbg !124
  %2384 = bitcast float %2383 to i32, !dbg !119
  %2385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2384, i32 1, i32 31), !dbg !119
  %2386 = bitcast i32 %2385 to float, !dbg !119
  %2387 = fcmp ogt float %2383, %2386, !dbg !121
  %2388 = fcmp uno float %2383, 0.000000e+00, !dbg !122
  %2389 = or i1 %2387, %2388, !dbg !123
  %2390 = select i1 %2355, i32 %2350, i32 %2351, !dbg !124
  %2391 = insertelement <1 x i32> poison, i32 %2390, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1288, <1 x i32> %2391, i1 %1287) #5, !dbg !119
  %2392 = select i1 %2389, i32 %2384, i32 %2385, !dbg !124
  %2393 = insertelement <1 x i32> poison, i32 %2392, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1295, <1 x i32> %2393, i1 %1287) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %2394 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1302, i1 %1301) #5, !dbg !119
  %2395 = bitcast i32 %2394 to float, !dbg !119
  %2396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2394, i32 4, i32 31), !dbg !119
  %2397 = bitcast i32 %2396 to float, !dbg !119
  %2398 = fcmp ogt float %2395, %2397, !dbg !121
  %2399 = fcmp uno float %2395, 0.000000e+00, !dbg !122
  %2400 = or i1 %2399, %2398, !dbg !123
  %2401 = select i1 %2400, float %2395, float %2397, !dbg !124
  %2402 = bitcast float %2401 to i32, !dbg !119
  %2403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2402, i32 2, i32 31), !dbg !119
  %2404 = bitcast i32 %2403 to float, !dbg !119
  %2405 = fcmp ogt float %2401, %2404, !dbg !121
  %2406 = fcmp uno float %2401, 0.000000e+00, !dbg !122
  %2407 = or i1 %2405, %2406, !dbg !123
  %2408 = select i1 %2407, float %2401, float %2404, !dbg !124
  %2409 = bitcast float %2408 to i32, !dbg !119
  %2410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2409, i32 1, i32 31), !dbg !119
  %2411 = bitcast i32 %2410 to float, !dbg !119
  %2412 = fcmp ogt float %2408, %2411, !dbg !121
  %2413 = fcmp uno float %2408, 0.000000e+00, !dbg !122
  %2414 = or i1 %2412, %2413, !dbg !123
  %2415 = select i1 %2414, i32 %2409, i32 %2410, !dbg !124
  %2416 = insertelement <1 x i32> poison, i32 %2415, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1302, <1 x i32> %2416, i1 %1373) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %2417 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !119
  %2418 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %2419 = bitcast float %2417 to i32, !dbg !125
  %2420 = bitcast float %2418 to i32, !dbg !125
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2419, i32 %2420, i1 true) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %2421 = load float, ptr addrspace(3) %2200, align 4, !dbg !125
  %2422 = sext i32 %1643 to i64, !dbg !126
  %2423 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2422, !dbg !126
  %2424 = fptrunc float %2201 to bfloat, !dbg !118
  %2425 = and i32 %19, 254, !dbg !118
  %2426 = icmp eq i32 %2425, 0, !dbg !118
  %2427 = bitcast bfloat %2424 to i16, !dbg !118
  %2428 = and i1 %2426, %1644, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2427, ptr addrspace(1) %2423, i1 %2428) #5, !dbg !118
  %2429 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2422, !dbg !127
  %2430 = fptrunc float %2421 to bfloat, !dbg !125
  %2431 = bitcast bfloat %2430 to i16, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2431, ptr addrspace(1) %2429, i1 %2428) #5, !dbg !125
  %2432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1713, i1 %135) #5, !dbg !128
  %2433 = extractvalue { i32, i32, i32, i32 } %2432, 0, !dbg !128
  %2434 = bitcast i32 %2433 to <2 x bfloat>, !dbg !128
  %2435 = extractvalue { i32, i32, i32, i32 } %2432, 1, !dbg !128
  %2436 = bitcast i32 %2435 to <2 x bfloat>, !dbg !128
  %2437 = extractvalue { i32, i32, i32, i32 } %2432, 2, !dbg !128
  %2438 = bitcast i32 %2437 to <2 x bfloat>, !dbg !128
  %2439 = extractvalue { i32, i32, i32, i32 } %2432, 3, !dbg !128
  %2440 = bitcast i32 %2439 to <2 x bfloat>, !dbg !128
  %2441 = extractelement <2 x bfloat> %2434, i64 0, !dbg !128
  %2442 = extractelement <2 x bfloat> %2434, i64 1, !dbg !128
  %2443 = extractelement <2 x bfloat> %2436, i64 0, !dbg !128
  %2444 = extractelement <2 x bfloat> %2436, i64 1, !dbg !128
  %2445 = extractelement <2 x bfloat> %2438, i64 0, !dbg !128
  %2446 = extractelement <2 x bfloat> %2438, i64 1, !dbg !128
  %2447 = extractelement <2 x bfloat> %2440, i64 0, !dbg !128
  %2448 = extractelement <2 x bfloat> %2440, i64 1, !dbg !128
  %2449 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1714, i1 %135) #5, !dbg !128
  %2450 = extractvalue { i32, i32, i32, i32 } %2449, 0, !dbg !128
  %2451 = bitcast i32 %2450 to <2 x bfloat>, !dbg !128
  %2452 = extractvalue { i32, i32, i32, i32 } %2449, 1, !dbg !128
  %2453 = bitcast i32 %2452 to <2 x bfloat>, !dbg !128
  %2454 = extractvalue { i32, i32, i32, i32 } %2449, 2, !dbg !128
  %2455 = bitcast i32 %2454 to <2 x bfloat>, !dbg !128
  %2456 = extractvalue { i32, i32, i32, i32 } %2449, 3, !dbg !128
  %2457 = bitcast i32 %2456 to <2 x bfloat>, !dbg !128
  %2458 = extractelement <2 x bfloat> %2451, i64 0, !dbg !128
  %2459 = extractelement <2 x bfloat> %2451, i64 1, !dbg !128
  %2460 = extractelement <2 x bfloat> %2453, i64 0, !dbg !128
  %2461 = extractelement <2 x bfloat> %2453, i64 1, !dbg !128
  %2462 = extractelement <2 x bfloat> %2455, i64 0, !dbg !128
  %2463 = extractelement <2 x bfloat> %2455, i64 1, !dbg !128
  %2464 = extractelement <2 x bfloat> %2457, i64 0, !dbg !128
  %2465 = extractelement <2 x bfloat> %2457, i64 1, !dbg !128
  %2466 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1715, i1 %135) #5, !dbg !128
  %2467 = extractvalue { i32, i32, i32, i32 } %2466, 0, !dbg !128
  %2468 = bitcast i32 %2467 to <2 x bfloat>, !dbg !128
  %2469 = extractvalue { i32, i32, i32, i32 } %2466, 1, !dbg !128
  %2470 = bitcast i32 %2469 to <2 x bfloat>, !dbg !128
  %2471 = extractvalue { i32, i32, i32, i32 } %2466, 2, !dbg !128
  %2472 = bitcast i32 %2471 to <2 x bfloat>, !dbg !128
  %2473 = extractvalue { i32, i32, i32, i32 } %2466, 3, !dbg !128
  %2474 = bitcast i32 %2473 to <2 x bfloat>, !dbg !128
  %2475 = extractelement <2 x bfloat> %2468, i64 0, !dbg !128
  %2476 = extractelement <2 x bfloat> %2468, i64 1, !dbg !128
  %2477 = extractelement <2 x bfloat> %2470, i64 0, !dbg !128
  %2478 = extractelement <2 x bfloat> %2470, i64 1, !dbg !128
  %2479 = extractelement <2 x bfloat> %2472, i64 0, !dbg !128
  %2480 = extractelement <2 x bfloat> %2472, i64 1, !dbg !128
  %2481 = extractelement <2 x bfloat> %2474, i64 0, !dbg !128
  %2482 = extractelement <2 x bfloat> %2474, i64 1, !dbg !128
  %2483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1716, i1 %135) #5, !dbg !128
  %2484 = extractvalue { i32, i32, i32, i32 } %2483, 0, !dbg !128
  %2485 = bitcast i32 %2484 to <2 x bfloat>, !dbg !128
  %2486 = extractvalue { i32, i32, i32, i32 } %2483, 1, !dbg !128
  %2487 = bitcast i32 %2486 to <2 x bfloat>, !dbg !128
  %2488 = extractvalue { i32, i32, i32, i32 } %2483, 2, !dbg !128
  %2489 = bitcast i32 %2488 to <2 x bfloat>, !dbg !128
  %2490 = extractvalue { i32, i32, i32, i32 } %2483, 3, !dbg !128
  %2491 = bitcast i32 %2490 to <2 x bfloat>, !dbg !128
  %2492 = extractelement <2 x bfloat> %2485, i64 0, !dbg !128
  %2493 = extractelement <2 x bfloat> %2485, i64 1, !dbg !128
  %2494 = extractelement <2 x bfloat> %2487, i64 0, !dbg !128
  %2495 = extractelement <2 x bfloat> %2487, i64 1, !dbg !128
  %2496 = extractelement <2 x bfloat> %2489, i64 0, !dbg !128
  %2497 = extractelement <2 x bfloat> %2489, i64 1, !dbg !128
  %2498 = extractelement <2 x bfloat> %2491, i64 0, !dbg !128
  %2499 = extractelement <2 x bfloat> %2491, i64 1, !dbg !128
  %2500 = fpext bfloat %2441 to float, !dbg !129
  %2501 = fpext bfloat %2442 to float, !dbg !129
  %2502 = fpext bfloat %2443 to float, !dbg !129
  %2503 = fpext bfloat %2444 to float, !dbg !129
  %2504 = fpext bfloat %2445 to float, !dbg !129
  %2505 = fpext bfloat %2446 to float, !dbg !129
  %2506 = fpext bfloat %2447 to float, !dbg !129
  %2507 = fpext bfloat %2448 to float, !dbg !129
  %2508 = fpext bfloat %2458 to float, !dbg !129
  %2509 = fpext bfloat %2459 to float, !dbg !129
  %2510 = fpext bfloat %2460 to float, !dbg !129
  %2511 = fpext bfloat %2461 to float, !dbg !129
  %2512 = fpext bfloat %2462 to float, !dbg !129
  %2513 = fpext bfloat %2463 to float, !dbg !129
  %2514 = fpext bfloat %2464 to float, !dbg !129
  %2515 = fpext bfloat %2465 to float, !dbg !129
  %2516 = fpext bfloat %2475 to float, !dbg !129
  %2517 = fpext bfloat %2476 to float, !dbg !129
  %2518 = fpext bfloat %2477 to float, !dbg !129
  %2519 = fpext bfloat %2478 to float, !dbg !129
  %2520 = fpext bfloat %2479 to float, !dbg !129
  %2521 = fpext bfloat %2480 to float, !dbg !129
  %2522 = fpext bfloat %2481 to float, !dbg !129
  %2523 = fpext bfloat %2482 to float, !dbg !129
  %2524 = fpext bfloat %2492 to float, !dbg !129
  %2525 = fpext bfloat %2493 to float, !dbg !129
  %2526 = fpext bfloat %2494 to float, !dbg !129
  %2527 = fpext bfloat %2495 to float, !dbg !129
  %2528 = fpext bfloat %2496 to float, !dbg !129
  %2529 = fpext bfloat %2497 to float, !dbg !129
  %2530 = fpext bfloat %2498 to float, !dbg !129
  %2531 = fpext bfloat %2499 to float, !dbg !129
  %.inv134 = fcmp oge float %2196, 0.000000e+00, !dbg !130
  %2532 = select i1 %.inv134, float 0.000000e+00, float %2196, !dbg !130
  %.inv135 = fcmp oge float %2197, 0.000000e+00, !dbg !130
  %2533 = select i1 %.inv135, float 0.000000e+00, float %2197, !dbg !130
  %2534 = fsub float 0.000000e+00, %2532, !dbg !132
  %2535 = fsub float 0.000000e+00, %2533, !dbg !132
  %.inv136 = fcmp ole float %2417, 0.000000e+00, !dbg !133
  %2536 = select i1 %.inv136, float 0.000000e+00, float %2417, !dbg !133
  %.inv137 = fcmp ole float %2418, 0.000000e+00, !dbg !133
  %2537 = select i1 %.inv137, float 0.000000e+00, float %2418, !dbg !133
  %2538 = fcmp ogt float %2534, %2536, !dbg !135
  %2539 = fcmp ogt float %2535, %2537, !dbg !135
  %2540 = fcmp uno float %2534, 0.000000e+00, !dbg !137
  %2541 = fcmp uno float %2535, 0.000000e+00, !dbg !137
  %2542 = or i1 %2540, %2538, !dbg !138
  %2543 = or i1 %2541, %2539, !dbg !138
  %2544 = select i1 %2542, float %2534, float %2536, !dbg !139
  %2545 = select i1 %2543, float %2535, float %2537, !dbg !139
  %2546 = fmul float %2544, 0x3F80204080000000, !dbg !140
  %2547 = fmul float %2545, 0x3F80204080000000, !dbg !140
  %2548 = fcmp ogt float %2546, 0x3EE4F8B580000000, !dbg !141
  %2549 = fcmp ogt float %2547, 0x3EE4F8B580000000, !dbg !141
  %2550 = fcmp uno float %2546, 0.000000e+00, !dbg !143
  %2551 = fcmp uno float %2547, 0.000000e+00, !dbg !143
  %2552 = or i1 %2548, %2550, !dbg !144
  %2553 = or i1 %2549, %2551, !dbg !144
  %2554 = select i1 %2552, float %2546, float 0x3EE4F8B580000000, !dbg !145
  %2555 = select i1 %2553, float %2547, float 0x3EE4F8B580000000, !dbg !145
  %2556 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2554), !dbg !146
  %2557 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2555), !dbg !146
  %2558 = fmul float %2556, %2500, !dbg !147
  %2559 = fmul float %2556, %2501, !dbg !147
  %2560 = fmul float %2556, %2502, !dbg !147
  %2561 = fmul float %2556, %2503, !dbg !147
  %2562 = fmul float %2556, %2504, !dbg !147
  %2563 = fmul float %2556, %2505, !dbg !147
  %2564 = fmul float %2556, %2506, !dbg !147
  %2565 = fmul float %2556, %2507, !dbg !147
  %2566 = fmul float %2556, %2508, !dbg !147
  %2567 = fmul float %2556, %2509, !dbg !147
  %2568 = fmul float %2556, %2510, !dbg !147
  %2569 = fmul float %2556, %2511, !dbg !147
  %2570 = fmul float %2556, %2512, !dbg !147
  %2571 = fmul float %2556, %2513, !dbg !147
  %2572 = fmul float %2556, %2514, !dbg !147
  %2573 = fmul float %2556, %2515, !dbg !147
  %2574 = fmul float %2557, %2516, !dbg !147
  %2575 = fmul float %2557, %2517, !dbg !147
  %2576 = fmul float %2557, %2518, !dbg !147
  %2577 = fmul float %2557, %2519, !dbg !147
  %2578 = fmul float %2557, %2520, !dbg !147
  %2579 = fmul float %2557, %2521, !dbg !147
  %2580 = fmul float %2557, %2522, !dbg !147
  %2581 = fmul float %2557, %2523, !dbg !147
  %2582 = fmul float %2557, %2524, !dbg !147
  %2583 = fmul float %2557, %2525, !dbg !147
  %2584 = fmul float %2557, %2526, !dbg !147
  %2585 = fmul float %2557, %2527, !dbg !147
  %2586 = fmul float %2557, %2528, !dbg !147
  %2587 = fmul float %2557, %2529, !dbg !147
  %2588 = fmul float %2557, %2530, !dbg !147
  %2589 = fmul float %2557, %2531, !dbg !147
  %2590 = tail call float @llvm.nvvm.round.f(float %2558) #5, !dbg !148
  %2591 = tail call float @llvm.nvvm.round.f(float %2559) #5, !dbg !148
  %2592 = tail call float @llvm.nvvm.round.f(float %2560) #5, !dbg !148
  %2593 = tail call float @llvm.nvvm.round.f(float %2561) #5, !dbg !148
  %2594 = tail call float @llvm.nvvm.round.f(float %2562) #5, !dbg !148
  %2595 = tail call float @llvm.nvvm.round.f(float %2563) #5, !dbg !148
  %2596 = tail call float @llvm.nvvm.round.f(float %2564) #5, !dbg !148
  %2597 = tail call float @llvm.nvvm.round.f(float %2565) #5, !dbg !148
  %2598 = tail call float @llvm.nvvm.round.f(float %2566) #5, !dbg !148
  %2599 = tail call float @llvm.nvvm.round.f(float %2567) #5, !dbg !148
  %2600 = tail call float @llvm.nvvm.round.f(float %2568) #5, !dbg !148
  %2601 = tail call float @llvm.nvvm.round.f(float %2569) #5, !dbg !148
  %2602 = tail call float @llvm.nvvm.round.f(float %2570) #5, !dbg !148
  %2603 = tail call float @llvm.nvvm.round.f(float %2571) #5, !dbg !148
  %2604 = tail call float @llvm.nvvm.round.f(float %2572) #5, !dbg !148
  %2605 = tail call float @llvm.nvvm.round.f(float %2573) #5, !dbg !148
  %2606 = tail call float @llvm.nvvm.round.f(float %2574) #5, !dbg !148
  %2607 = tail call float @llvm.nvvm.round.f(float %2575) #5, !dbg !148
  %2608 = tail call float @llvm.nvvm.round.f(float %2576) #5, !dbg !148
  %2609 = tail call float @llvm.nvvm.round.f(float %2577) #5, !dbg !148
  %2610 = tail call float @llvm.nvvm.round.f(float %2578) #5, !dbg !148
  %2611 = tail call float @llvm.nvvm.round.f(float %2579) #5, !dbg !148
  %2612 = tail call float @llvm.nvvm.round.f(float %2580) #5, !dbg !148
  %2613 = tail call float @llvm.nvvm.round.f(float %2581) #5, !dbg !148
  %2614 = tail call float @llvm.nvvm.round.f(float %2582) #5, !dbg !148
  %2615 = tail call float @llvm.nvvm.round.f(float %2583) #5, !dbg !148
  %2616 = tail call float @llvm.nvvm.round.f(float %2584) #5, !dbg !148
  %2617 = tail call float @llvm.nvvm.round.f(float %2585) #5, !dbg !148
  %2618 = tail call float @llvm.nvvm.round.f(float %2586) #5, !dbg !148
  %2619 = tail call float @llvm.nvvm.round.f(float %2587) #5, !dbg !148
  %2620 = tail call float @llvm.nvvm.round.f(float %2588) #5, !dbg !148
  %2621 = tail call float @llvm.nvvm.round.f(float %2589) #5, !dbg !148
  %2622 = insertelement <4 x float> poison, float %2590, i64 0, !dbg !149
  %2623 = insertelement <4 x float> %2622, float %2591, i64 1, !dbg !149
  %2624 = insertelement <4 x float> %2623, float %2592, i64 2, !dbg !149
  %2625 = insertelement <4 x float> %2624, float %2593, i64 3, !dbg !149
  %2626 = fcmp ogt <4 x float> %2625, splat (float -1.270000e+02), !dbg !149
  %2627 = fcmp uno <4 x float> %2625, zeroinitializer, !dbg !151
  %2628 = or <4 x i1> %2626, %2627, !dbg !152
  %2629 = select <4 x i1> %2628, <4 x float> %2625, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2630 = fcmp olt <4 x float> %2629, splat (float 1.270000e+02), !dbg !154
  %2631 = fcmp uno <4 x float> %2629, zeroinitializer, !dbg !156
  %2632 = or <4 x i1> %2630, %2631, !dbg !157
  %2633 = fptosi <4 x float> %2629 to <4 x i8>, !dbg !158
  %2634 = select <4 x i1> %2632, <4 x i8> %2633, <4 x i8> splat (i8 127), !dbg !159
  %2635 = insertelement <4 x float> poison, float %2594, i64 0, !dbg !149
  %2636 = insertelement <4 x float> %2635, float %2595, i64 1, !dbg !149
  %2637 = insertelement <4 x float> %2636, float %2596, i64 2, !dbg !149
  %2638 = insertelement <4 x float> %2637, float %2597, i64 3, !dbg !149
  %2639 = fcmp ogt <4 x float> %2638, splat (float -1.270000e+02), !dbg !149
  %2640 = fcmp uno <4 x float> %2638, zeroinitializer, !dbg !151
  %2641 = or <4 x i1> %2639, %2640, !dbg !152
  %2642 = select <4 x i1> %2641, <4 x float> %2638, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2643 = fcmp olt <4 x float> %2642, splat (float 1.270000e+02), !dbg !154
  %2644 = fcmp uno <4 x float> %2642, zeroinitializer, !dbg !156
  %2645 = or <4 x i1> %2643, %2644, !dbg !157
  %2646 = fptosi <4 x float> %2642 to <4 x i8>, !dbg !158
  %2647 = select <4 x i1> %2645, <4 x i8> %2646, <4 x i8> splat (i8 127), !dbg !159
  %2648 = insertelement <4 x float> poison, float %2598, i64 0, !dbg !149
  %2649 = insertelement <4 x float> %2648, float %2599, i64 1, !dbg !149
  %2650 = insertelement <4 x float> %2649, float %2600, i64 2, !dbg !149
  %2651 = insertelement <4 x float> %2650, float %2601, i64 3, !dbg !149
  %2652 = fcmp ogt <4 x float> %2651, splat (float -1.270000e+02), !dbg !149
  %2653 = fcmp uno <4 x float> %2651, zeroinitializer, !dbg !151
  %2654 = or <4 x i1> %2652, %2653, !dbg !152
  %2655 = select <4 x i1> %2654, <4 x float> %2651, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2656 = fcmp olt <4 x float> %2655, splat (float 1.270000e+02), !dbg !154
  %2657 = fcmp uno <4 x float> %2655, zeroinitializer, !dbg !156
  %2658 = or <4 x i1> %2656, %2657, !dbg !157
  %2659 = fptosi <4 x float> %2655 to <4 x i8>, !dbg !158
  %2660 = select <4 x i1> %2658, <4 x i8> %2659, <4 x i8> splat (i8 127), !dbg !159
  %2661 = insertelement <4 x float> poison, float %2602, i64 0, !dbg !149
  %2662 = insertelement <4 x float> %2661, float %2603, i64 1, !dbg !149
  %2663 = insertelement <4 x float> %2662, float %2604, i64 2, !dbg !149
  %2664 = insertelement <4 x float> %2663, float %2605, i64 3, !dbg !149
  %2665 = fcmp ogt <4 x float> %2664, splat (float -1.270000e+02), !dbg !149
  %2666 = fcmp uno <4 x float> %2664, zeroinitializer, !dbg !151
  %2667 = or <4 x i1> %2665, %2666, !dbg !152
  %2668 = select <4 x i1> %2667, <4 x float> %2664, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2669 = fcmp olt <4 x float> %2668, splat (float 1.270000e+02), !dbg !154
  %2670 = fcmp uno <4 x float> %2668, zeroinitializer, !dbg !156
  %2671 = or <4 x i1> %2669, %2670, !dbg !157
  %2672 = fptosi <4 x float> %2668 to <4 x i8>, !dbg !158
  %2673 = select <4 x i1> %2671, <4 x i8> %2672, <4 x i8> splat (i8 127), !dbg !159
  %2674 = insertelement <4 x float> poison, float %2606, i64 0, !dbg !149
  %2675 = insertelement <4 x float> %2674, float %2607, i64 1, !dbg !149
  %2676 = insertelement <4 x float> %2675, float %2608, i64 2, !dbg !149
  %2677 = insertelement <4 x float> %2676, float %2609, i64 3, !dbg !149
  %2678 = fcmp ogt <4 x float> %2677, splat (float -1.270000e+02), !dbg !149
  %2679 = fcmp uno <4 x float> %2677, zeroinitializer, !dbg !151
  %2680 = or <4 x i1> %2678, %2679, !dbg !152
  %2681 = select <4 x i1> %2680, <4 x float> %2677, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2682 = fcmp olt <4 x float> %2681, splat (float 1.270000e+02), !dbg !154
  %2683 = fcmp uno <4 x float> %2681, zeroinitializer, !dbg !156
  %2684 = or <4 x i1> %2682, %2683, !dbg !157
  %2685 = fptosi <4 x float> %2681 to <4 x i8>, !dbg !158
  %2686 = select <4 x i1> %2684, <4 x i8> %2685, <4 x i8> splat (i8 127), !dbg !159
  %2687 = insertelement <4 x float> poison, float %2610, i64 0, !dbg !149
  %2688 = insertelement <4 x float> %2687, float %2611, i64 1, !dbg !149
  %2689 = insertelement <4 x float> %2688, float %2612, i64 2, !dbg !149
  %2690 = insertelement <4 x float> %2689, float %2613, i64 3, !dbg !149
  %2691 = fcmp ogt <4 x float> %2690, splat (float -1.270000e+02), !dbg !149
  %2692 = fcmp uno <4 x float> %2690, zeroinitializer, !dbg !151
  %2693 = or <4 x i1> %2691, %2692, !dbg !152
  %2694 = select <4 x i1> %2693, <4 x float> %2690, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2695 = fcmp olt <4 x float> %2694, splat (float 1.270000e+02), !dbg !154
  %2696 = fcmp uno <4 x float> %2694, zeroinitializer, !dbg !156
  %2697 = or <4 x i1> %2695, %2696, !dbg !157
  %2698 = fptosi <4 x float> %2694 to <4 x i8>, !dbg !158
  %2699 = select <4 x i1> %2697, <4 x i8> %2698, <4 x i8> splat (i8 127), !dbg !159
  %2700 = insertelement <4 x float> poison, float %2614, i64 0, !dbg !149
  %2701 = insertelement <4 x float> %2700, float %2615, i64 1, !dbg !149
  %2702 = insertelement <4 x float> %2701, float %2616, i64 2, !dbg !149
  %2703 = insertelement <4 x float> %2702, float %2617, i64 3, !dbg !149
  %2704 = fcmp ogt <4 x float> %2703, splat (float -1.270000e+02), !dbg !149
  %2705 = fcmp uno <4 x float> %2703, zeroinitializer, !dbg !151
  %2706 = or <4 x i1> %2704, %2705, !dbg !152
  %2707 = select <4 x i1> %2706, <4 x float> %2703, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2708 = fcmp olt <4 x float> %2707, splat (float 1.270000e+02), !dbg !154
  %2709 = fcmp uno <4 x float> %2707, zeroinitializer, !dbg !156
  %2710 = or <4 x i1> %2708, %2709, !dbg !157
  %2711 = fptosi <4 x float> %2707 to <4 x i8>, !dbg !158
  %2712 = select <4 x i1> %2710, <4 x i8> %2711, <4 x i8> splat (i8 127), !dbg !159
  %2713 = insertelement <4 x float> poison, float %2618, i64 0, !dbg !149
  %2714 = insertelement <4 x float> %2713, float %2619, i64 1, !dbg !149
  %2715 = insertelement <4 x float> %2714, float %2620, i64 2, !dbg !149
  %2716 = insertelement <4 x float> %2715, float %2621, i64 3, !dbg !149
  %2717 = fcmp ogt <4 x float> %2716, splat (float -1.270000e+02), !dbg !149
  %2718 = fcmp uno <4 x float> %2716, zeroinitializer, !dbg !151
  %2719 = or <4 x i1> %2717, %2718, !dbg !152
  %2720 = select <4 x i1> %2719, <4 x float> %2716, <4 x float> splat (float -1.270000e+02), !dbg !153
  %2721 = fcmp olt <4 x float> %2720, splat (float 1.270000e+02), !dbg !154
  %2722 = fcmp uno <4 x float> %2720, zeroinitializer, !dbg !156
  %2723 = or <4 x i1> %2721, %2722, !dbg !157
  %2724 = fptosi <4 x float> %2720 to <4 x i8>, !dbg !158
  %2725 = select <4 x i1> %2723, <4 x i8> %2724, <4 x i8> splat (i8 127), !dbg !159
  %2726 = getelementptr i8, ptr addrspace(1) %12, i64 %125, !dbg !160
  %2727 = getelementptr i8, ptr addrspace(1) %12, i64 %129, !dbg !160
  %2728 = bitcast <4 x i8> %2634 to i32, !dbg !161
  %2729 = bitcast <4 x i8> %2647 to i32, !dbg !161
  %2730 = bitcast <4 x i8> %2660 to i32, !dbg !161
  %2731 = bitcast <4 x i8> %2673 to i32, !dbg !161
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2728, i32 %2729, i32 %2730, i32 %2731, ptr addrspace(1) %2726, i1 %135) #5, !dbg !161
  %2732 = bitcast <4 x i8> %2686 to i32, !dbg !161
  %2733 = bitcast <4 x i8> %2699 to i32, !dbg !161
  %2734 = bitcast <4 x i8> %2712 to i32, !dbg !161
  %2735 = bitcast <4 x i8> %2725 to i32, !dbg !161
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2732, i32 %2733, i32 %2734, i32 %2735, ptr addrspace(1) %2727, i1 %135) #5, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 36, column: 29, scope: !6)
!20 = !DILocation(line: 40, column: 46, scope: !6)
!21 = !DILocation(line: 40, column: 41, scope: !6)
!22 = !DILocation(line: 40, column: 34, scope: !6)
!23 = !DILocation(line: 40, column: 59, scope: !6)
!24 = !DILocation(line: 40, column: 51, scope: !6)
!25 = !DILocation(line: 40, column: 113, scope: !6)
!26 = !DILocation(line: 41, column: 41, scope: !6)
!27 = !DILocation(line: 41, column: 34, scope: !6)
!28 = !DILocation(line: 42, column: 34, scope: !6)
!29 = !DILocation(line: 43, column: 34, scope: !6)
!30 = !DILocation(line: 44, column: 35, scope: !6)
!31 = !DILocation(line: 45, column: 35, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 50, column: 44, scope: !6)
!36 = !DILocation(line: 51, column: 17, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 52, column: 46, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 53, column: 46, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 55, column: 24, scope: !6)
!45 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !46)
!46 = !DILocation(line: 58, column: 46, scope: !6)
!47 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !46)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !46)
!50 = !DILocation(line: 60, column: 23, scope: !6)
!51 = !DILocation(line: 72, column: 68, scope: !6)
!52 = !DILocation(line: 73, column: 29, scope: !6)
!53 = !DILocation(line: 41, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 48, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 43, column: 51, scope: !6)
!57 = !DILocation(line: 44, column: 42, scope: !6)
!58 = !DILocation(line: 44, column: 95, scope: !6)
!59 = !DILocation(line: 45, column: 42, scope: !6)
!60 = !DILocation(line: 45, column: 95, scope: !6)
!61 = !DILocation(line: 47, column: 22, scope: !6)
!62 = !DILocation(line: 48, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 70, column: 64, scope: !6)
!68 = !DILocation(line: 73, column: 53, scope: !6)
!69 = !DILocation(line: 229, column: 46, scope: !33, inlinedAt: !70)
!70 = !DILocation(line: 74, column: 85, scope: !6)
!71 = !DILocation(line: 217, column: 21, scope: !72, inlinedAt: !70)
!72 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!73 = !DILocation(line: 218, column: 28, scope: !72, inlinedAt: !70)
!74 = !DILocation(line: 219, column: 39, scope: !72, inlinedAt: !70)
!75 = !DILocation(line: 219, column: 60, scope: !72, inlinedAt: !70)
!76 = !DILocation(line: 219, column: 49, scope: !72, inlinedAt: !70)
!77 = !DILocation(line: 221, column: 25, scope: !72, inlinedAt: !70)
!78 = !DILocation(line: 221, column: 17, scope: !72, inlinedAt: !70)
!79 = !DILocation(line: 222, column: 30, scope: !72, inlinedAt: !70)
!80 = !DILocation(line: 222, column: 38, scope: !72, inlinedAt: !70)
!81 = !DILocation(line: 222, column: 49, scope: !72, inlinedAt: !70)
!82 = !DILocation(line: 222, column: 22, scope: !72, inlinedAt: !70)
!83 = !DILocation(line: 222, column: 15, scope: !72, inlinedAt: !70)
!84 = !DILocation(line: 86, column: 53, scope: !6)
!85 = !DILocation(line: 87, column: 43, scope: !6)
!86 = !DILocation(line: 87, column: 35, scope: !6)
!87 = !DILocation(line: 87, column: 50, scope: !6)
!88 = !DILocation(line: 88, column: 35, scope: !6)
!89 = !DILocation(line: 88, column: 50, scope: !6)
!90 = !DILocation(line: 89, column: 42, scope: !6)
!91 = !DILocation(line: 89, column: 35, scope: !6)
!92 = !DILocation(line: 89, column: 49, scope: !6)
!93 = !DILocation(line: 90, column: 35, scope: !6)
!94 = !DILocation(line: 90, column: 49, scope: !6)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 86, column: 115, scope: !6)
!99 = !DILocation(line: 92, column: 24, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 113, column: 29, scope: !6)
!102 = !DILocation(line: 90, column: 102, scope: !6)
!103 = !DILocation(line: 88, column: 103, scope: !6)
!104 = !DILocation(line: 101, column: 24, scope: !6)
!105 = !DILocation(line: 103, column: 24, scope: !6)
!106 = !DILocation(line: 104, column: 24, scope: !6)
!107 = !DILocation(line: 106, column: 24, scope: !6)
!108 = !DILocation(line: 107, column: 24, scope: !6)
!109 = !DILocation(line: 112, column: 50, scope: !6)
!110 = !DILocation(line: 110, column: 50, scope: !6)
!111 = !DILocation(line: 113, column: 53, scope: !6)
!112 = !DILocation(line: 110, column: 29, scope: !33, inlinedAt: !113)
!113 = !DILocation(line: 114, column: 40, scope: !6)
!114 = !DILocation(line: 94, column: 15, scope: !72, inlinedAt: !113)
!115 = !DILocation(line: 96, column: 21, scope: !72, inlinedAt: !113)
!116 = !DILocation(line: 96, column: 16, scope: !72, inlinedAt: !113)
!117 = !DILocation(line: 97, column: 29, scope: !72, inlinedAt: !113)
!118 = !DILocation(line: 116, column: 37, scope: !6)
!119 = !DILocation(line: 115, column: 29, scope: !33, inlinedAt: !120)
!120 = !DILocation(line: 115, column: 40, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !72, inlinedAt: !120)
!122 = !DILocation(line: 104, column: 21, scope: !72, inlinedAt: !120)
!123 = !DILocation(line: 104, column: 16, scope: !72, inlinedAt: !120)
!124 = !DILocation(line: 105, column: 29, scope: !72, inlinedAt: !120)
!125 = !DILocation(line: 117, column: 37, scope: !6)
!126 = !DILocation(line: 116, column: 25, scope: !6)
!127 = !DILocation(line: 117, column: 25, scope: !6)
!128 = !DILocation(line: 124, column: 53, scope: !6)
!129 = !DILocation(line: 124, column: 115, scope: !6)
!130 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !131)
!131 = !DILocation(line: 126, column: 46, scope: !6)
!132 = !DILocation(line: 127, column: 17, scope: !6)
!133 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !134)
!134 = !DILocation(line: 128, column: 46, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !136)
!136 = !DILocation(line: 129, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !136)
!140 = !DILocation(line: 131, column: 24, scope: !6)
!141 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !142)
!142 = !DILocation(line: 134, column: 46, scope: !6)
!143 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !142)
!145 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !142)
!146 = !DILocation(line: 137, column: 25, scope: !6)
!147 = !DILocation(line: 140, column: 24, scope: !6)
!148 = !DILocation(line: 141, column: 36, scope: !6)
!149 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !150)
!150 = !DILocation(line: 144, column: 46, scope: !6)
!151 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !150)
!152 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !150)
!153 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !150)
!154 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !155)
!155 = !DILocation(line: 146, column: 46, scope: !6)
!156 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !155)
!157 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !155)
!158 = !DILocation(line: 148, column: 25, scope: !6)
!159 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !155)
!160 = !DILocation(line: 149, column: 29, scope: !6)
!161 = !DILocation(line: 149, column: 53, scope: !6)
!162 = !DILocation(line: 118, column: 4, scope: !6)
