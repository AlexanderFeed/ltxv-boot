; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 2, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = and i32 %8, 3, !dbg !11
  %12 = or disjoint i32 %10, %7, !dbg !12
  %13 = icmp slt i32 %12, 86400, !dbg !13
  %14 = sdiv i32 %12, 24, !dbg !14
  %15 = mul i32 %14, 24, !dbg !15
  %.decomposed = sub i32 %12, %15, !dbg !15
  %16 = shl nsw i32 %.decomposed, 7, !dbg !16
  %17 = mul i32 %14, 9216, !dbg !17
  %18 = or disjoint i32 %16, %11
  %19 = add i32 %18, %17
  br i1 %13, label %.split.us, label %.split.preheader

.split.preheader:                                 ; preds = %5
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 false) #3, !dbg !19
  %23 = or disjoint i32 %19, 4, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !18
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 false) #3, !dbg !19
  %27 = or disjoint i32 %19, 8, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !18
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 false) #3, !dbg !19
  %31 = or disjoint i32 %19, 12, !dbg !20
  %32 = sext i32 %31 to i64, !dbg !18
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 false) #3, !dbg !19
  %35 = or disjoint i32 %19, 16, !dbg !20
  %36 = sext i32 %35 to i64, !dbg !18
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 false) #3, !dbg !19
  %39 = or disjoint i32 %19, 20, !dbg !20
  %40 = sext i32 %39 to i64, !dbg !18
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %41, i1 false) #3, !dbg !19
  %43 = or disjoint i32 %19, 24, !dbg !20
  %44 = sext i32 %43 to i64, !dbg !18
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 false) #3, !dbg !19
  %47 = or disjoint i32 %19, 28, !dbg !20
  %48 = sext i32 %47 to i64, !dbg !18
  %49 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !18
  %50 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %49, i1 false) #3, !dbg !19
  %51 = or disjoint i32 %19, 32, !dbg !20
  %52 = sext i32 %51 to i64, !dbg !18
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %53, i1 false) #3, !dbg !19
  %55 = or disjoint i32 %19, 36, !dbg !20
  %56 = sext i32 %55 to i64, !dbg !18
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 false) #3, !dbg !19
  %59 = or disjoint i32 %19, 40, !dbg !20
  %60 = sext i32 %59 to i64, !dbg !18
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %61, i1 false) #3, !dbg !19
  %63 = or disjoint i32 %19, 44, !dbg !20
  %64 = sext i32 %63 to i64, !dbg !18
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %65, i1 false) #3, !dbg !19
  %67 = or disjoint i32 %19, 48, !dbg !20
  %68 = sext i32 %67 to i64, !dbg !18
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !18
  %70 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %69, i1 false) #3, !dbg !19
  %71 = or disjoint i32 %19, 52, !dbg !20
  %72 = sext i32 %71 to i64, !dbg !18
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !18
  %74 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %73, i1 false) #3, !dbg !19
  %75 = or disjoint i32 %19, 56, !dbg !20
  %76 = sext i32 %75 to i64, !dbg !18
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !18
  %78 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %77, i1 false) #3, !dbg !19
  %79 = or disjoint i32 %19, 60, !dbg !20
  %80 = sext i32 %79 to i64, !dbg !18
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !18
  %82 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %81, i1 false) #3, !dbg !19
  %83 = or disjoint i32 %19, 64, !dbg !20
  %84 = sext i32 %83 to i64, !dbg !18
  %85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %84, !dbg !18
  %86 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %85, i1 false) #3, !dbg !19
  %87 = or disjoint i32 %19, 68, !dbg !20
  %88 = sext i32 %87 to i64, !dbg !18
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !18
  %90 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %89, i1 false) #3, !dbg !19
  %91 = or disjoint i32 %19, 72, !dbg !20
  %92 = sext i32 %91 to i64, !dbg !18
  %93 = getelementptr bfloat, ptr addrspace(1) %0, i64 %92, !dbg !18
  %94 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %93, i1 false) #3, !dbg !19
  %95 = or disjoint i32 %19, 76, !dbg !20
  %96 = sext i32 %95 to i64, !dbg !18
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !18
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 false) #3, !dbg !19
  %99 = or disjoint i32 %19, 80, !dbg !20
  %100 = sext i32 %99 to i64, !dbg !18
  %101 = getelementptr bfloat, ptr addrspace(1) %0, i64 %100, !dbg !18
  %102 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 false) #3, !dbg !19
  %103 = or disjoint i32 %19, 84, !dbg !20
  %104 = sext i32 %103 to i64, !dbg !18
  %105 = getelementptr bfloat, ptr addrspace(1) %0, i64 %104, !dbg !18
  %106 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %105, i1 false) #3, !dbg !19
  %107 = or disjoint i32 %19, 88, !dbg !20
  %108 = sext i32 %107 to i64, !dbg !18
  %109 = getelementptr bfloat, ptr addrspace(1) %0, i64 %108, !dbg !18
  %110 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %109, i1 false) #3, !dbg !19
  %111 = or disjoint i32 %19, 92, !dbg !20
  %112 = sext i32 %111 to i64, !dbg !18
  %113 = getelementptr bfloat, ptr addrspace(1) %0, i64 %112, !dbg !18
  %114 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %113, i1 false) #3, !dbg !19
  %115 = or disjoint i32 %19, 96, !dbg !20
  %116 = sext i32 %115 to i64, !dbg !18
  %117 = getelementptr bfloat, ptr addrspace(1) %0, i64 %116, !dbg !18
  %118 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %117, i1 false) #3, !dbg !19
  %119 = or disjoint i32 %19, 100, !dbg !20
  %120 = sext i32 %119 to i64, !dbg !18
  %121 = getelementptr bfloat, ptr addrspace(1) %0, i64 %120, !dbg !18
  %122 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %121, i1 false) #3, !dbg !19
  %123 = or disjoint i32 %19, 104, !dbg !20
  %124 = sext i32 %123 to i64, !dbg !18
  %125 = getelementptr bfloat, ptr addrspace(1) %0, i64 %124, !dbg !18
  %126 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %125, i1 false) #3, !dbg !19
  %127 = or disjoint i32 %19, 108, !dbg !20
  %128 = sext i32 %127 to i64, !dbg !18
  %129 = getelementptr bfloat, ptr addrspace(1) %0, i64 %128, !dbg !18
  %130 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %129, i1 false) #3, !dbg !19
  %131 = or disjoint i32 %19, 112, !dbg !20
  %132 = sext i32 %131 to i64, !dbg !18
  %133 = getelementptr bfloat, ptr addrspace(1) %0, i64 %132, !dbg !18
  %134 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %133, i1 false) #3, !dbg !19
  %135 = or disjoint i32 %19, 116, !dbg !20
  %136 = sext i32 %135 to i64, !dbg !18
  %137 = getelementptr bfloat, ptr addrspace(1) %0, i64 %136, !dbg !18
  %138 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %137, i1 false) #3, !dbg !19
  %139 = or disjoint i32 %19, 120, !dbg !20
  %140 = sext i32 %139 to i64, !dbg !18
  %141 = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !18
  %142 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %141, i1 false) #3, !dbg !19
  %143 = or disjoint i32 %19, 124, !dbg !20
  %144 = sext i32 %143 to i64, !dbg !18
  %145 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !18
  %146 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %145, i1 false) #3, !dbg !19
  br label %.split3.us, !dbg !11

.split.us:                                        ; preds = %5, %.split.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split.us ], [ 0, %5 ]
  %147 = phi float [ %156, %.split.us ], [ 0.000000e+00, %5 ]
  %148 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !20
  %149 = add i32 %19, %148, !dbg !20
  %150 = sext i32 %149 to i64, !dbg !18
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !18
  %152 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %151, i1 true) #3, !dbg !19
  %153 = bitcast i16 %152 to bfloat, !dbg !19
  %154 = fpext bfloat %153 to float, !dbg !21
  %155 = fmul float %154, %154, !dbg !22
  %156 = fadd float %147, %155, !dbg !23
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !24
  %157 = icmp samesign ult i64 %indvars.iv, 124, !dbg !24
  br i1 %157, label %.split.us, label %.split3.us, !dbg !24

.split3.us:                                       ; preds = %.split.us, %.split.preheader
  %.us-phi = phi float [ 0.000000e+00, %.split.preheader ], [ %156, %.split.us ], !dbg !11
  %158 = and i32 %8, 63, !dbg !11
  %159 = or disjoint i32 %7, %158, !dbg !12
  %160 = icmp slt i32 %159, 86400, !dbg !13
  %161 = bitcast float %.us-phi to i32, !dbg !25
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !25
  %163 = bitcast i32 %162 to float, !dbg !25
  %164 = fadd float %.us-phi, %163, !dbg !29
  %165 = bitcast float %164 to i32, !dbg !25
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !25
  %167 = bitcast i32 %166 to float, !dbg !25
  %168 = fadd float %164, %167, !dbg !29
  %169 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %170 = bitcast float %168 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %171 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %158, !dbg !31
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !31
  %173 = sext i32 %159 to i64, !dbg !32
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !32
  %175 = and i32 %8, 192, !dbg !33
  %176 = icmp eq i32 %175, 0, !dbg !33
  %177 = and i1 %176, %160, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %174, i1 %177) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvltpna72szvalp7fozxjqbarwav7bnep53hb6q7tuni7yet5hqg.py", directory: "/tmp/torchinductor_root/vl")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_4, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_4", linkageName: "triton_red_fused__to_copy_mean_pow_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 45, scope: !6)
!17 = !DILocation(line: 38, column: 55, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 60, scope: !6)
!20 = !DILocation(line: 38, column: 50, scope: !6)
!21 = !DILocation(line: 38, column: 122, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 42, column: 23, scope: !6)
!24 = !DILocation(line: 32, column: 40, scope: !6)
!25 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!28 = !DILocation(line: 44, column: 25, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 44, column: 28, scope: !6)
!32 = !DILocation(line: 45, column: 25, scope: !6)
!33 = !DILocation(line: 45, column: 36, scope: !6)
!34 = !DILocation(line: 45, column: 4, scope: !6)
