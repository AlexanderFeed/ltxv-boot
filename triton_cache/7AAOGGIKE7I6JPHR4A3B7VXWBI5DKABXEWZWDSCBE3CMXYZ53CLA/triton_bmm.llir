; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 128, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 16, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 128, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = and i32 %15, 8, !dbg !19
  %18 = and i32 %15, 16, !dbg !19
  %19 = lshr exact i32 %18, 1, !dbg !19
  %20 = lshr i32 %15, 1, !dbg !19
  %21 = and i32 %20, 23, !dbg !19
  %22 = or disjoint i32 %21, %19, !dbg !19
  %23 = lshr i32 %15, 2, !dbg !19
  %24 = and i32 %23, 8, !dbg !19
  %25 = shl i32 %15, 3, !dbg !19
  %26 = and i32 %25, 8, !dbg !19
  %27 = or disjoint i32 %14, %22, !dbg !20
  %28 = shl nsw i32 %13, 5, !dbg !21
  %29 = or disjoint i32 %28, %22, !dbg !22
  %30 = srem i32 %27, 512, !dbg !23
  %31 = srem i32 %29, 512, !dbg !24
  %32 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !25
  %33 = shl nsw i32 %30, 12, !dbg !26
  %34 = shl i32 %32, 6, !dbg !27
  %35 = or disjoint i32 %26, %34, !dbg !28
  %36 = add i32 %35, %33, !dbg !29
  %37 = sext i32 %36 to i64, !dbg !30
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !30
  %39 = shl nsw i32 %31, 12, !dbg !31
  %40 = add i32 %35, %39, !dbg !32
  %41 = sext i32 %40 to i64, !dbg !33
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %41, !dbg !33
  %43 = xor i32 %26, %17
  %44 = shl nuw nsw i32 %22, 4
  %45 = or disjoint i32 %44, %43
  %46 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %45
  %47 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %45
  %48 = shl nuw nsw i32 %16, 1
  %49 = and i32 %15, 7
  %50 = xor i32 %48, %19
  %51 = shl i32 %15, 4
  %52 = and i32 %51, 240
  %53 = or disjoint i32 %50, %52
  %54 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %53
  %55 = ptrtoint ptr addrspace(3) %54 to i32
  %56 = or disjoint i32 %49, 16
  %57 = or disjoint i32 %56, %17
  %58 = shl nuw nsw i32 %57, 4
  %59 = or disjoint i32 %58, %50
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %59
  %61 = ptrtoint ptr addrspace(3) %60 to i32
  %62 = xor i32 %48, %17
  %63 = or disjoint i32 %24, %49
  %64 = shl nuw nsw i32 %63, 4
  %65 = or disjoint i32 %64, %62
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %65
  %67 = ptrtoint ptr addrspace(3) %66 to i32
  %68 = or disjoint i32 %56, %24
  %69 = shl nuw nsw i32 %68, 4
  %70 = or disjoint i32 %69, %62
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %70
  %72 = ptrtoint ptr addrspace(3) %71 to i32
  br label %73, !dbg !34

73:                                               ; preds = %4, %73
  %.pn3472 = phi ptr addrspace(1) [ %42, %4 ], [ %156, %73 ]
  %.pn1871 = phi ptr addrspace(1) [ %38, %4 ], [ %155, %73 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %136, %73 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %137, %73 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %138, %73 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %139, %73 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %141, %73 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %142, %73 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %143, %73 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %144, %73 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %146, %73 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %147, %73 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %148, %73 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %149, %73 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %151, %73 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %152, %73 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %153, %73 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %154, %73 ]
  %90 = phi i32 [ 0, %4 ], [ %157, %73 ]
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %.pn1871) #2, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !35
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !35
  %94 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !35
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !35
  %96 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !35
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !35
  %98 = shufflevector <2 x bfloat> %97, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %99 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !35
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !35
  %101 = shufflevector <2 x bfloat> %100, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %102 = shufflevector <2 x bfloat> %93, <2 x bfloat> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %103 = shufflevector <8 x bfloat> %102, <8 x bfloat> %98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !35
  %104 = shufflevector <8 x bfloat> %103, <8 x bfloat> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !35
  store <8 x bfloat> %104, ptr addrspace(3) %46, align 16, !dbg !35
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %.pn3472) #2, !dbg !36
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !36
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !36
  %108 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !36
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !36
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !36
  %112 = shufflevector <2 x bfloat> %111, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %113 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !36
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !36
  %115 = shufflevector <2 x bfloat> %114, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %116 = shufflevector <2 x bfloat> %107, <2 x bfloat> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %117 = shufflevector <8 x bfloat> %116, <8 x bfloat> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %118 = shufflevector <8 x bfloat> %117, <8 x bfloat> %115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  store <8 x bfloat> %118, ptr addrspace(3) %47, align 16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %55) #2, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !35
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !35
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %61) #2, !dbg !35
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !35
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !35
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !35
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !35
  %129 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %67) #2, !dbg !36
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !36
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !36
  %132 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %72) #2, !dbg !36
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !36
  %134 = extractvalue { i32, i32 } %132, 1, !dbg !36
  %135 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %74, float %75, float %76, float %77, i32 %120, i32 %121, i32 %122, i32 %123, i32 %130, i32 %131) #2, !dbg !37
  %136 = extractvalue { float, float, float, float } %135, 0, !dbg !37
  %137 = extractvalue { float, float, float, float } %135, 1, !dbg !37
  %138 = extractvalue { float, float, float, float } %135, 2, !dbg !37
  %139 = extractvalue { float, float, float, float } %135, 3, !dbg !37
  %140 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %78, float %79, float %80, float %81, i32 %120, i32 %121, i32 %122, i32 %123, i32 %133, i32 %134) #2, !dbg !37
  %141 = extractvalue { float, float, float, float } %140, 0, !dbg !37
  %142 = extractvalue { float, float, float, float } %140, 1, !dbg !37
  %143 = extractvalue { float, float, float, float } %140, 2, !dbg !37
  %144 = extractvalue { float, float, float, float } %140, 3, !dbg !37
  %145 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %82, float %83, float %84, float %85, i32 %125, i32 %126, i32 %127, i32 %128, i32 %130, i32 %131) #2, !dbg !37
  %146 = extractvalue { float, float, float, float } %145, 0, !dbg !37
  %147 = extractvalue { float, float, float, float } %145, 1, !dbg !37
  %148 = extractvalue { float, float, float, float } %145, 2, !dbg !37
  %149 = extractvalue { float, float, float, float } %145, 3, !dbg !37
  %150 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %86, float %87, float %88, float %89, i32 %125, i32 %126, i32 %127, i32 %128, i32 %133, i32 %134) #2, !dbg !37
  %151 = extractvalue { float, float, float, float } %150, 0, !dbg !37
  %152 = extractvalue { float, float, float, float } %150, 1, !dbg !37
  %153 = extractvalue { float, float, float, float } %150, 2, !dbg !37
  %154 = extractvalue { float, float, float, float } %150, 3, !dbg !37
  %155 = getelementptr i8, ptr addrspace(1) %.pn1871, i64 32, !dbg !38
  %156 = getelementptr i8, ptr addrspace(1) %.pn3472, i64 32, !dbg !39
  %157 = add nuw nsw i32 %90, 16, !dbg !34
  %158 = icmp samesign ult i32 %90, 48, !dbg !34
  br i1 %158, label %73, label %159, !dbg !34

159:                                              ; preds = %73
  %160 = and i32 %25, 24, !dbg !19
  %161 = or disjoint i32 %28, %160, !dbg !22
  %162 = and i32 %23, 15, !dbg !19
  %163 = or disjoint i32 %162, %14, !dbg !20
  %164 = or disjoint i32 %163, 16, !dbg !20
  %165 = icmp slt i32 %163, 512, !dbg !40
  %166 = icmp slt i32 %164, 512, !dbg !40
  %167 = icmp slt i32 %161, 512, !dbg !41
  %168 = and i1 %165, %167, !dbg !42
  %169 = and i1 %166, %167, !dbg !42
  %170 = shl i32 %163, 9, !dbg !43
  %171 = shl i32 %164, 9, !dbg !43
  %172 = shl i32 %32, 18, !dbg !44
  %173 = add i32 %161, %172, !dbg !45
  %174 = add i32 %173, %170, !dbg !46
  %175 = add i32 %173, %171, !dbg !46
  %176 = sext i32 %174 to i64, !dbg !47
  %177 = getelementptr bfloat, ptr addrspace(1) %2, i64 %176, !dbg !47
  %178 = sext i32 %175 to i64, !dbg !47
  %179 = getelementptr bfloat, ptr addrspace(1) %2, i64 %178, !dbg !47
  %180 = fptrunc float %136 to bfloat, !dbg !48
  %181 = fptrunc float %137 to bfloat, !dbg !48
  %182 = fptrunc float %138 to bfloat, !dbg !48
  %183 = fptrunc float %139 to bfloat, !dbg !48
  %184 = fptrunc float %141 to bfloat, !dbg !48
  %185 = fptrunc float %142 to bfloat, !dbg !48
  %186 = fptrunc float %143 to bfloat, !dbg !48
  %187 = fptrunc float %144 to bfloat, !dbg !48
  %188 = fptrunc float %146 to bfloat, !dbg !48
  %189 = fptrunc float %147 to bfloat, !dbg !48
  %190 = fptrunc float %148 to bfloat, !dbg !48
  %191 = fptrunc float %149 to bfloat, !dbg !48
  %192 = fptrunc float %151 to bfloat, !dbg !48
  %193 = fptrunc float %152 to bfloat, !dbg !48
  %194 = fptrunc float %153 to bfloat, !dbg !48
  %195 = fptrunc float %154 to bfloat, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %196 = shl i32 %15, 1, !dbg !48
  %197 = and i32 %196, 6, !dbg !48
  %198 = shl nuw nsw i32 %16, 3, !dbg !48
  %199 = or disjoint i32 %197, %198, !dbg !48
  %200 = shl nuw nsw i32 %17, 3, !dbg !48
  %201 = or disjoint i32 %199, %200, !dbg !48
  %202 = shl nuw nsw i32 %18, 3, !dbg !48
  %203 = or disjoint i32 %201, %202, !dbg !48
  %204 = or disjoint i32 %203, %24, !dbg !48
  %205 = and i32 %25, 312, !dbg !48
  %206 = or disjoint i32 %200, %205, !dbg !48
  %207 = or disjoint i32 %206, %202, !dbg !48
  %208 = lshr i32 %203, 2, !dbg !48
  %209 = and i32 %208, 536870904, !dbg !48
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %209, !dbg !48
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %204, !dbg !48
  %212 = bitcast bfloat %180 to i16, !dbg !48
  %213 = bitcast bfloat %181 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %211, i16 %212, i16 %213, i1 true) #2, !dbg !48
  %214 = xor i32 %204, 256, !dbg !48
  %215 = lshr i32 %214, 2, !dbg !48
  %216 = and i32 %215, 1073741816, !dbg !48
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %216, !dbg !48
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %217, i32 %214, !dbg !48
  %219 = bitcast bfloat %182 to i16, !dbg !48
  %220 = bitcast bfloat %183 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %218, i16 %219, i16 %220, i1 true) #2, !dbg !48
  %221 = xor i32 %204, 16, !dbg !48
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %221, !dbg !48
  %223 = bitcast bfloat %184 to i16, !dbg !48
  %224 = bitcast bfloat %185 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %222, i16 %223, i16 %224, i1 true) #2, !dbg !48
  %225 = xor i32 %204, 272, !dbg !48
  %226 = lshr i32 %225, 2, !dbg !48
  %227 = and i32 %226, 1073741816, !dbg !48
  %228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %227, !dbg !48
  %229 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %228, i32 %225, !dbg !48
  %230 = bitcast bfloat %186 to i16, !dbg !48
  %231 = bitcast bfloat %187 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %229, i16 %230, i16 %231, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %232 = lshr exact i32 %207, 2, !dbg !48
  %233 = and i32 %232, 120, !dbg !48
  %234 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %233, !dbg !48
  %235 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %234, i32 %207, !dbg !48
  %236 = load <4 x i32>, ptr addrspace(3) %235, align 16, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %237 = bitcast bfloat %188 to i16, !dbg !48
  %238 = bitcast bfloat %189 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %211, i16 %237, i16 %238, i1 true) #2, !dbg !48
  %239 = bitcast bfloat %190 to i16, !dbg !48
  %240 = bitcast bfloat %191 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %218, i16 %239, i16 %240, i1 true) #2, !dbg !48
  %241 = bitcast bfloat %192 to i16, !dbg !48
  %242 = bitcast bfloat %193 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %222, i16 %241, i16 %242, i1 true) #2, !dbg !48
  %243 = bitcast bfloat %194 to i16, !dbg !48
  %244 = bitcast bfloat %195 to i16, !dbg !48
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %229, i16 %243, i16 %244, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %245 = load <4 x i32>, ptr addrspace(3) %235, align 16, !dbg !48
  %.extract = extractelement <4 x i32> %236, i64 0, !dbg !48
  %.extract58 = extractelement <4 x i32> %236, i64 1, !dbg !48
  %.extract60 = extractelement <4 x i32> %236, i64 2, !dbg !48
  %.extract62 = extractelement <4 x i32> %236, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract58, i32 %.extract60, i32 %.extract62, ptr addrspace(1) %177, i1 %168) #2, !dbg !48
  %.extract64 = extractelement <4 x i32> %245, i64 0, !dbg !48
  %.extract66 = extractelement <4 x i32> %245, i64 1, !dbg !48
  %.extract68 = extractelement <4 x i32> %245, i64 2, !dbg !48
  %.extract70 = extractelement <4 x i32> %245, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract64, i32 %.extract66, i32 %.extract68, i32 %.extract70, ptr addrspace(1) %179, i1 %169) #2, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c65lcetpsja2wql4pi7chyuci2ubizbcpa7w4lhugeqt7to4fu77.py", directory: "/tmp/torchinductor_root/65")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 27, scope: !6)
!23 = !DILocation(line: 57, column: 19, scope: !6)
!24 = !DILocation(line: 61, column: 19, scope: !6)
!25 = !DILocation(line: 65, column: 26, scope: !6)
!26 = !DILocation(line: 66, column: 28, scope: !6)
!27 = !DILocation(line: 66, column: 72, scope: !6)
!28 = !DILocation(line: 66, column: 40, scope: !6)
!29 = !DILocation(line: 66, column: 66, scope: !6)
!30 = !DILocation(line: 66, column: 13, scope: !6)
!31 = !DILocation(line: 67, column: 54, scope: !6)
!32 = !DILocation(line: 67, column: 66, scope: !6)
!33 = !DILocation(line: 67, column: 13, scope: !6)
!34 = !DILocation(line: 70, column: 25, scope: !6)
!35 = !DILocation(line: 72, column: 24, scope: !6)
!36 = !DILocation(line: 73, column: 24, scope: !6)
!37 = !DILocation(line: 77, column: 25, scope: !6)
!38 = !DILocation(line: 78, column: 13, scope: !6)
!39 = !DILocation(line: 79, column: 13, scope: !6)
!40 = !DILocation(line: 87, column: 20, scope: !6)
!41 = !DILocation(line: 87, column: 34, scope: !6)
!42 = !DILocation(line: 87, column: 26, scope: !6)
!43 = !DILocation(line: 90, column: 25, scope: !6)
!44 = !DILocation(line: 90, column: 40, scope: !6)
!45 = !DILocation(line: 90, column: 21, scope: !6)
!46 = !DILocation(line: 90, column: 33, scope: !6)
!47 = !DILocation(line: 91, column: 25, scope: !6)
!48 = !DILocation(line: 91, column: 67, scope: !6)
!49 = !DILocation(line: 91, column: 4, scope: !6)
