; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_per_fused__to_copy_add_mean_pow_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = icmp slt i32 %11, 98688, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = shl i32 %13, 1, !dbg !11
  %17 = and i32 %16, 126, !dbg !11
  %18 = sdiv i32 %11, 24, !dbg !12
  %19 = mul i32 %18, 24, !dbg !13
  %.decomposed = sub i32 %11, %19, !dbg !13
  %20 = shl i32 %11, 7, !dbg !14
  %21 = or disjoint i32 %17, %20, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr i32, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %27 = sext i32 %18 to i64, !dbg !18
  %28 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %12) #3, !dbg !19
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %12) #3, !dbg !19
  %31 = bitcast i16 %30 to bfloat, !dbg !19
  %32 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !20
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %12) #3, !dbg !21
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %12) #3, !dbg !21
  %35 = bitcast i16 %34 to bfloat, !dbg !21
  %36 = shl nsw i32 %.decomposed, 7, !dbg !22
  %37 = or disjoint i32 %17, %36, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr bfloat, ptr addrspace(1) %3, i64 %38, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 %12) #3, !dbg !25
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !25
  %42 = getelementptr bfloat, ptr addrspace(1) %4, i64 %38, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 %12) #3, !dbg !27
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !27
  %.inv = fcmp oge bfloat %31, 0xR0000, !dbg !28
  %45 = select i1 %.inv, bfloat 0xR0000, bfloat %31, !dbg !28
  %46 = fpext bfloat %45 to float, !dbg !28
  %47 = fsub float 0.000000e+00, %46, !dbg !32
  %.inv1 = fcmp ole bfloat %35, 0xR0000, !dbg !33
  %48 = select i1 %.inv1, bfloat 0xR0000, bfloat %35, !dbg !33
  %49 = fpext bfloat %48 to float, !dbg !33
  %50 = fcmp ogt float %47, %49, !dbg !35
  %51 = fcmp uno float %47, 0.000000e+00, !dbg !37
  %52 = or i1 %51, %50, !dbg !38
  %53 = select i1 %52, float %47, float %49, !dbg !39
  %54 = fmul float %53, 0x3F80204080000000, !dbg !40
  %55 = fcmp ogt float %54, 0x3EE4F8B580000000, !dbg !41
  %56 = fcmp uno float %54, 0.000000e+00, !dbg !43
  %57 = or i1 %55, %56, !dbg !44
  %58 = select i1 %57, float %54, float 0x3EE4F8B580000000, !dbg !45
  %59 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !46
  %60 = fpext <2 x bfloat> %44 to <2 x float>, !dbg !47
  %61 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !48
  %62 = insertelement <2 x i32> %61, i32 %26, i64 1, !dbg !48
  %63 = sitofp <2 x i32> %62 to <2 x float>, !dbg !48
  %64 = insertelement <2 x float> poison, float %58, i64 0, !dbg !49
  %65 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %66 = fmul <2 x float> %65, %63, !dbg !49
  %67 = fmul <2 x float> %66, %59, !dbg !50
  %68 = fadd <2 x float> %67, %60, !dbg !51
  %69 = fmul <2 x float> %68, %68, !dbg !52
  %shift = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %70 = fadd <2 x float> %69, %shift, !dbg !53
  %71 = extractelement <2 x float> %70, i64 0, !dbg !53
  %72 = select i1 %12, float %71, float 0.000000e+00, !dbg !53
  %73 = bitcast float %72 to i32, !dbg !58
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !58
  %75 = bitcast i32 %74 to float, !dbg !58
  %76 = fadd float %72, %75, !dbg !53
  %77 = bitcast float %76 to i32, !dbg !58
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !58
  %79 = bitcast i32 %78 to float, !dbg !58
  %80 = fadd float %76, %79, !dbg !53
  %81 = bitcast float %80 to i32, !dbg !58
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !58
  %83 = bitcast i32 %82 to float, !dbg !58
  %84 = fadd float %80, %83, !dbg !53
  %85 = bitcast float %84 to i32, !dbg !58
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !58
  %87 = bitcast i32 %86 to float, !dbg !58
  %88 = fadd float %84, %87, !dbg !53
  %89 = bitcast float %88 to i32, !dbg !58
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !58
  %91 = bitcast i32 %90 to float, !dbg !58
  %92 = fadd float %88, %91, !dbg !53
  %93 = and i32 %15, 1, !dbg !58
  %94 = icmp eq i32 %14, 0, !dbg !58
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !58
  %96 = bitcast float %92 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %94) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %97 = icmp slt i32 %13, 2, !dbg !58
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !58
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %97) #3, !dbg !58
  %100 = bitcast i32 %99 to float, !dbg !58
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !58
  %102 = bitcast i32 %101 to float, !dbg !58
  %103 = fadd float %100, %102, !dbg !53
  %104 = and i32 %13, 1, !dbg !58
  %105 = icmp eq i32 %104, 0, !dbg !58
  %106 = and i1 %97, %105, !dbg !58
  %107 = bitcast float %103 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %107, i1 %106) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %108 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %109 = getelementptr bfloat, ptr addrspace(1) %5, i64 %22, !dbg !59
  %110 = fptrunc <2 x float> %68 to <2 x bfloat>, !dbg !60
  %111 = bitcast <2 x bfloat> %110 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %109, i1 %12) #3, !dbg !60
  %112 = sext i32 %11 to i64, !dbg !61
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !61
  %114 = and i32 %13, 63, !dbg !62
  %115 = icmp eq i32 %114, 0, !dbg !62
  %116 = and i1 %12, %115, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %113, i1 %116) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceqrvh7wabbdeykqepa3zmii6o4hoe3ux2wiocyvm5ynym6kf2go.py", directory: "/tmp/torchinductor_root/eq")
!4 = !{ptr @triton_per_fused__to_copy_add_mean_pow_2, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_mean_pow_2", linkageName: "triton_per_fused__to_copy_add_mean_pow_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 26, column: 21, scope: !6)
!11 = !DILocation(line: 27, column: 38, scope: !6)
!12 = !DILocation(line: 34, column: 19, scope: !6)
!13 = !DILocation(line: 35, column: 19, scope: !6)
!14 = !DILocation(line: 36, column: 41, scope: !6)
!15 = !DILocation(line: 36, column: 37, scope: !6)
!16 = !DILocation(line: 36, column: 30, scope: !6)
!17 = !DILocation(line: 36, column: 46, scope: !6)
!18 = !DILocation(line: 37, column: 30, scope: !6)
!19 = !DILocation(line: 37, column: 35, scope: !6)
!20 = !DILocation(line: 38, column: 30, scope: !6)
!21 = !DILocation(line: 38, column: 35, scope: !6)
!22 = !DILocation(line: 39, column: 42, scope: !6)
!23 = !DILocation(line: 39, column: 38, scope: !6)
!24 = !DILocation(line: 39, column: 31, scope: !6)
!25 = !DILocation(line: 39, column: 47, scope: !6)
!26 = !DILocation(line: 40, column: 31, scope: !6)
!27 = !DILocation(line: 40, column: 47, scope: !6)
!28 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 43, column: 40, scope: !6)
!32 = !DILocation(line: 44, column: 12, scope: !6)
!33 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 45, column: 40, scope: !6)
!35 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !36)
!36 = !DILocation(line: 46, column: 40, scope: !6)
!37 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !36)
!39 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !36)
!40 = !DILocation(line: 48, column: 19, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !42)
!42 = !DILocation(line: 51, column: 42, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !42)
!45 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !42)
!46 = !DILocation(line: 39, column: 98, scope: !6)
!47 = !DILocation(line: 40, column: 98, scope: !6)
!48 = !DILocation(line: 41, column: 19, scope: !6)
!49 = !DILocation(line: 53, column: 19, scope: !6)
!50 = !DILocation(line: 54, column: 20, scope: !6)
!51 = !DILocation(line: 55, column: 20, scope: !6)
!52 = !DILocation(line: 57, column: 20, scope: !6)
!53 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !57)
!54 = distinct !DILexicalBlockFile(scope: !56, file: !55, discriminator: 0)
!55 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!56 = distinct !DILexicalBlockFile(scope: !6, file: !55, discriminator: 0)
!57 = !DILocation(line: 60, column: 26, scope: !6)
!58 = !DILocation(line: 286, column: 36, scope: !56, inlinedAt: !57)
!59 = !DILocation(line: 61, column: 25, scope: !6)
!60 = !DILocation(line: 61, column: 48, scope: !6)
!61 = !DILocation(line: 62, column: 25, scope: !6)
!62 = !DILocation(line: 62, column: 37, scope: !6)
!63 = !DILocation(line: 62, column: 4, scope: !6)
