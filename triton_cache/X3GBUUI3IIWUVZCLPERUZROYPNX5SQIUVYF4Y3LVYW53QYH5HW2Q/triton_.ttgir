#blocked = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 16, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 16, perPhase = 1, maxPhase = 8, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0), %arg6: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":22:0)) attributes {noinline = false} {
    %c22_i32 = arith.constant 22 : i32 loc(#loc1)
    %cst = arith.constant dense<128> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<true> : tensor<128x256xi1, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<true> : tensor<128x128xi1, #blocked1> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<4112> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<4112> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3072> : tensor<1x256xi32, #blocked2> loc(#loc1)
    %cst_6 = arith.constant dense<3072> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<3072> : tensor<128x1xi32, #blocked2> loc(#loc1)
    %cst_8 = arith.constant dense<3072> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<3072> : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_10 = arith.constant dense<4112> : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c33_i32 = arith.constant 33 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c24_i32 = arith.constant 24 : i32 loc(#loc1)
    %cst_11 = arith.constant dense<9.99999974E-6> : tensor<128x256xf32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<0.00787401571> : tensor<128x256xf32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<0> : tensor<128x256xi32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %c96_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.subi %c33_i32, %2 : i32 loc(#loc5)
    %4 = arith.minsi %3, %c8_i32 : i32 loc(#loc6)
    %5 = arith.remsi %0, %4 : i32 loc(#loc7)
    %6 = arith.addi %2, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %c96_i32 : i32 loc(#loc9)
    %8 = arith.divsi %7, %4 : i32 loc(#loc10)
    %9 = arith.muli %6, %c128_i32 : i32 loc(#loc11)
    %10 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc12)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc12)
    %13 = tt.splat %9 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc13)
    %14 = tt.splat %9 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %15 = tt.splat %9 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc13)
    %16 = arith.addi %13, %10 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc13)
    %17 = arith.addi %14, %11 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %18 = arith.addi %15, %12 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc13)
    %19 = arith.muli %8, %c256_i32 : i32 loc(#loc14)
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %21 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc15)
    %22 = tt.splat %19 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc16)
    %23 = tt.splat %19 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc16)
    %24 = arith.addi %22, %20 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc16)
    %25 = arith.addi %23, %21 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc16)
    %26 = arith.remsi %16, %cst_10 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc17)
    %27 = arith.remsi %24, %cst_9 {tt.contiguity = dense<256> : tensor<1xi32>, tt.divisibility = dense<256> : tensor<1xi32>} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %28 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc19)
    %29 = tt.expand_dims %28 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc19)
    %30 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc20)
    %31 = tt.expand_dims %26 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc21)
    %32 = arith.muli %31, %cst_8 : tensor<128x1xi32, #blocked1> loc(#loc22)
    %33 = tt.broadcast %32 : tensor<128x1xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc23)
    %34 = tt.splat %arg0 : !tt.ptr<i8> -> tensor<128x128x!tt.ptr<i8>, #blocked1> loc(#loc24)
    %35 = tt.expand_dims %27 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc25)
    %36 = arith.muli %35, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc26)
    %37 = tt.broadcast %36 : tensor<1x256xi32, #blocked> -> tensor<128x256xi32, #blocked> loc(#loc27)
    %38 = tt.splat %arg1 : !tt.ptr<i8> -> tensor<128x256x!tt.ptr<i8>, #blocked> loc(#loc28)
    %39 = ttg.local_alloc  : () -> !ttg.memdesc<2x128x128xi8, #shared, #smem, mutable> loc(#loc29)
    %40 = ttg.local_alloc  : () -> !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> loc(#loc30)
    %41 = tt.broadcast %29 : tensor<1x128xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc23)
    %42 = arith.addi %41, %33 : tensor<128x128xi32, #blocked1> loc(#loc23)
    %43 = tt.addptr %34, %42 : tensor<128x128x!tt.ptr<i8>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc24)
    %44 = ttg.memdesc_subview %39[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
    %45 = ttg.async_copy_global_to_local %43, %44 mask %cst_2 : tensor<128x128x!tt.ptr<i8>, #blocked1> -> <128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
    %46 = ttg.async_commit_group %45 loc(#loc29)
    %47 = tt.broadcast %30 : tensor<128x1xi32, #blocked> -> tensor<128x256xi32, #blocked> loc(#loc27)
    %48 = arith.addi %47, %37 : tensor<128x256xi32, #blocked> loc(#loc27)
    %49 = tt.addptr %38, %48 : tensor<128x256x!tt.ptr<i8>, #blocked>, tensor<128x256xi32, #blocked> loc(#loc28)
    %50 = ttg.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
    %51 = ttg.async_copy_global_to_local %49, %50 mask %cst_1 : tensor<128x256x!tt.ptr<i8>, #blocked> -> <128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
    %52 = ttg.async_commit_group %51 loc(#loc30)
    %53 = arith.addi %29, %cst_0 : tensor<1x128xi32, #blocked1> loc(#loc31)
    %54 = arith.addi %30, %cst : tensor<128x1xi32, #blocked> loc(#loc32)
    %55 = tt.broadcast %53 : tensor<1x128xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc23)
    %56 = arith.addi %55, %33 : tensor<128x128xi32, #blocked1> loc(#loc23)
    %57 = tt.addptr %34, %56 : tensor<128x128x!tt.ptr<i8>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc24)
    %58 = ttg.memdesc_subview %39[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
    %59 = ttg.async_copy_global_to_local %57, %58 mask %cst_2 : tensor<128x128x!tt.ptr<i8>, #blocked1> -> <128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
    %60 = ttg.async_commit_group %59 loc(#loc29)
    %61 = tt.broadcast %54 : tensor<128x1xi32, #blocked> -> tensor<128x256xi32, #blocked> loc(#loc27)
    %62 = arith.addi %61, %37 : tensor<128x256xi32, #blocked> loc(#loc27)
    %63 = tt.addptr %38, %62 : tensor<128x256x!tt.ptr<i8>, #blocked>, tensor<128x256xi32, #blocked> loc(#loc28)
    %64 = ttg.memdesc_subview %40[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
    %65 = ttg.async_copy_global_to_local %63, %64 mask %cst_1 : tensor<128x256x!tt.ptr<i8>, #blocked> -> <128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
    %66 = ttg.async_commit_group %65 loc(#loc30)
    %67:5 = scf.for %arg7 = %c0_i32 to %c24_i32 step %c1_i32 iter_args(%arg8 = %cst_14, %arg9 = %c1_i32, %arg10 = %c-1_i32, %arg11 = %52, %arg12 = %66) -> (tensor<128x256xi32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token)  : i32 {
      %136 = arith.cmpi slt, %arg7, %c22_i32 : i32 loc(#loc33)
      %137 = arith.addi %arg10, %c1_i32 : i32 loc(#loc33)
      %138 = arith.cmpi slt, %137, %c2_i32 : i32 loc(#loc33)
      %139 = arith.select %138, %137, %c0_i32 : i32 loc(#loc33)
      %140 = ttg.async_wait %arg11 {num = 2 : i32} loc(#loc29)
      %141 = ttg.memdesc_subview %39[%139, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
      %142 = ttg.local_load %141 : !ttg.memdesc<128x128xi8, #shared, #smem, mutable, 2x128x128> -> tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc29)
      %143 = ttg.memdesc_subview %40[%139, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
      %144 = ttg.local_load %143 : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable, 2x128x256> -> tensor<128x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc30)
      %145 = tt.dot %142, %144, %arg8, inputPrecision = tf32 : tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<128x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x256xi32, #mma> loc(#loc34)
      %146 = arith.addi %arg9, %c1_i32 : i32 loc(#loc33)
      %147 = arith.cmpi slt, %146, %c2_i32 : i32 loc(#loc33)
      %148 = arith.select %147, %146, %c0_i32 : i32 loc(#loc33)
      %149 = arith.addi %arg7, %c2_i32 : i32 loc(#loc33)
      %150 = arith.muli %149, %c128_i32 : i32 loc(#loc35)
      %151 = tt.splat %150 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc31)
      %152 = arith.addi %29, %151 : tensor<1x128xi32, #blocked1> loc(#loc31)
      %153 = tt.splat %150 : i32 -> tensor<128x1xi32, #blocked> loc(#loc32)
      %154 = arith.addi %30, %153 : tensor<128x1xi32, #blocked> loc(#loc32)
      %155 = tt.broadcast %152 : tensor<1x128xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc23)
      %156 = arith.addi %155, %33 : tensor<128x128xi32, #blocked1> loc(#loc23)
      %157 = tt.addptr %34, %156 : tensor<128x128x!tt.ptr<i8>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc24)
      %158 = ttg.memdesc_subview %39[%148, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
      %159 = tt.splat %136 : i1 -> tensor<128x128xi1, #blocked1> loc(#loc33)
      %160 = ttg.async_copy_global_to_local %157, %158 mask %159 : tensor<128x128x!tt.ptr<i8>, #blocked1> -> <128x128xi8, #shared, #smem, mutable, 2x128x128> loc(#loc29)
      %161 = ttg.async_commit_group %160 loc(#loc29)
      %162 = tt.broadcast %154 : tensor<128x1xi32, #blocked> -> tensor<128x256xi32, #blocked> loc(#loc27)
      %163 = arith.addi %162, %37 : tensor<128x256xi32, #blocked> loc(#loc27)
      %164 = tt.addptr %38, %163 : tensor<128x256x!tt.ptr<i8>, #blocked>, tensor<128x256xi32, #blocked> loc(#loc28)
      %165 = ttg.memdesc_subview %40[%148, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
      %166 = tt.splat %136 : i1 -> tensor<128x256xi1, #blocked> loc(#loc33)
      %167 = ttg.async_copy_global_to_local %164, %165 mask %166 : tensor<128x256x!tt.ptr<i8>, #blocked> -> <128x256xi8, #shared1, #smem, mutable, 2x128x256> loc(#loc30)
      %168 = ttg.async_commit_group %167 loc(#loc30)
      scf.yield %145, %148, %139, %arg12, %168 : tensor<128x256xi32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token loc(#loc33)
    } loc(#loc33)
    %68 = ttg.async_wait  {num = 0 : i32} loc(#loc33)
    ttg.local_dealloc %40 : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> loc(#loc33)
    ttg.local_dealloc %39 : !ttg.memdesc<2x128x128xi8, #shared, #smem, mutable> loc(#loc33)
    %69 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc36)
    %70 = tt.expand_dims %18 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc36)
    %71 = tt.expand_dims %24 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc37)
    %72 = tt.expand_dims %25 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc37)
    %73 = arith.cmpi slt, %69, %cst_4 : tensor<128x1xi32, #blocked> loc(#loc38)
    %74 = arith.cmpi slt, %70, %cst_3 : tensor<128x1xi32, #blocked2> loc(#loc38)
    %75 = arith.cmpi slt, %71, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc39)
    %76 = arith.cmpi slt, %72, %cst_5 : tensor<1x256xi32, #blocked2> loc(#loc39)
    %77 = tt.broadcast %73 : tensor<128x1xi1, #blocked> -> tensor<128x256xi1, #blocked> loc(#loc40)
    %78 = tt.broadcast %74 : tensor<128x1xi1, #blocked2> -> tensor<128x256xi1, #blocked2> loc(#loc40)
    %79 = tt.broadcast %75 : tensor<1x256xi1, #blocked> -> tensor<128x256xi1, #blocked> loc(#loc40)
    %80 = tt.broadcast %76 : tensor<1x256xi1, #blocked2> -> tensor<128x256xi1, #blocked2> loc(#loc40)
    %81 = arith.andi %77, %79 : tensor<128x256xi1, #blocked> loc(#loc40)
    %82 = arith.andi %78, %80 : tensor<128x256xi1, #blocked2> loc(#loc40)
    %83 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>, #blocked> loc(#loc41)
    %84 = tt.addptr %83, %69 : tensor<128x1x!tt.ptr<bf16>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc41)
    %85 = tt.broadcast %84 : tensor<128x1x!tt.ptr<bf16>, #blocked> -> tensor<128x256x!tt.ptr<bf16>, #blocked> loc(#loc41)
    %86 = tt.load %85, %81 evictionPolicy = evict_last : tensor<128x256x!tt.ptr<bf16>, #blocked> loc(#loc42)
    %87 = arith.extf %86 : tensor<128x256xbf16, #blocked> to tensor<128x256xf32, #blocked> loc(#loc43)
    %88 = tt.splat %arg3 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>, #blocked> loc(#loc44)
    %89 = tt.addptr %88, %69 : tensor<128x1x!tt.ptr<bf16>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc44)
    %90 = tt.broadcast %89 : tensor<128x1x!tt.ptr<bf16>, #blocked> -> tensor<128x256x!tt.ptr<bf16>, #blocked> loc(#loc44)
    %91 = tt.load %90, %81 evictionPolicy = evict_last : tensor<128x256x!tt.ptr<bf16>, #blocked> loc(#loc45)
    %92 = arith.extf %91 : tensor<128x256xbf16, #blocked> to tensor<128x256xf32, #blocked> loc(#loc46)
    %93 = tt.splat %arg4 : !tt.ptr<bf16> -> tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc47)
    %94 = tt.addptr %93, %72 : tensor<1x256x!tt.ptr<bf16>, #blocked2>, tensor<1x256xi32, #blocked2> loc(#loc47)
    %95 = tt.broadcast %94 : tensor<1x256x!tt.ptr<bf16>, #blocked2> -> tensor<128x256x!tt.ptr<bf16>, #blocked2> loc(#loc47)
    %96 = tt.load %95, %82 evictionPolicy = evict_last : tensor<128x256x!tt.ptr<bf16>, #blocked2> loc(#loc48)
    %97 = ttg.convert_layout %96 : tensor<128x256xbf16, #blocked2> -> tensor<128x256xbf16, #mma> loc(#loc49)
    %98 = arith.extf %97 : tensor<128x256xbf16, #mma> to tensor<128x256xf32, #mma> loc(#loc49)
    %99 = tt.splat %arg5 : !tt.ptr<bf16> -> tensor<1x256x!tt.ptr<bf16>, #blocked2> loc(#loc50)
    %100 = tt.addptr %99, %72 : tensor<1x256x!tt.ptr<bf16>, #blocked2>, tensor<1x256xi32, #blocked2> loc(#loc50)
    %101 = tt.broadcast %100 : tensor<1x256x!tt.ptr<bf16>, #blocked2> -> tensor<128x256x!tt.ptr<bf16>, #blocked2> loc(#loc50)
    %102 = tt.load %101, %82 evictionPolicy = evict_last : tensor<128x256x!tt.ptr<bf16>, #blocked2> loc(#loc51)
    %103 = ttg.convert_layout %102 : tensor<128x256xbf16, #blocked2> -> tensor<128x256xbf16, #mma> loc(#loc52)
    %104 = arith.extf %103 : tensor<128x256xbf16, #mma> to tensor<128x256xf32, #mma> loc(#loc52)
    %105 = arith.sitofp %67#0 : tensor<128x256xi32, #mma> to tensor<128x256xf32, #mma> loc(#loc53)
    %106 = arith.cmpf olt, %87, %cst_13 : tensor<128x256xf32, #blocked> loc(#loc76)
    %107 = arith.cmpf une, %87, %87 : tensor<128x256xf32, #blocked> loc(#loc77)
    %108 = arith.ori %106, %107 : tensor<128x256xi1, #blocked> loc(#loc78)
    %109 = arith.select %108, %87, %cst_13 : tensor<128x256xi1, #blocked>, tensor<128x256xf32, #blocked> loc(#loc79)
    %110 = arith.subf %cst_13, %109 : tensor<128x256xf32, #blocked> loc(#loc59)
    %111 = arith.cmpf ogt, %92, %cst_13 : tensor<128x256xf32, #blocked> loc(#loc80)
    %112 = arith.cmpf une, %92, %92 : tensor<128x256xf32, #blocked> loc(#loc81)
    %113 = arith.ori %111, %112 : tensor<128x256xi1, #blocked> loc(#loc82)
    %114 = arith.select %113, %92, %cst_13 : tensor<128x256xi1, #blocked>, tensor<128x256xf32, #blocked> loc(#loc83)
    %115 = arith.cmpf ogt, %110, %114 : tensor<128x256xf32, #blocked> loc(#loc84)
    %116 = arith.cmpf une, %110, %110 : tensor<128x256xf32, #blocked> loc(#loc85)
    %117 = arith.ori %115, %116 : tensor<128x256xi1, #blocked> loc(#loc86)
    %118 = arith.select %117, %110, %114 : tensor<128x256xi1, #blocked>, tensor<128x256xf32, #blocked> loc(#loc87)
    %119 = arith.mulf %118, %cst_12 : tensor<128x256xf32, #blocked> loc(#loc66)
    %120 = arith.cmpf ogt, %119, %cst_11 : tensor<128x256xf32, #blocked> loc(#loc88)
    %121 = arith.cmpf une, %119, %119 : tensor<128x256xf32, #blocked> loc(#loc89)
    %122 = arith.ori %120, %121 : tensor<128x256xi1, #blocked> loc(#loc90)
    %123 = arith.select %122, %119, %cst_11 : tensor<128x256xi1, #blocked>, tensor<128x256xf32, #blocked> loc(#loc91)
    %124 = ttg.convert_layout %123 : tensor<128x256xf32, #blocked> -> tensor<128x256xf32, #mma> loc(#loc91)
    %125 = arith.mulf %105, %124 : tensor<128x256xf32, #mma> loc(#loc68)
    %126 = arith.mulf %125, %98 : tensor<128x256xf32, #mma> loc(#loc69)
    %127 = arith.addf %126, %104 : tensor<128x256xf32, #mma> loc(#loc70)
    %128 = arith.muli %70, %cst_7 : tensor<128x1xi32, #blocked2> loc(#loc71)
    %129 = tt.broadcast %72 : tensor<1x256xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc72)
    %130 = tt.broadcast %128 : tensor<128x1xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc72)
    %131 = arith.addi %129, %130 : tensor<128x256xi32, #blocked2> loc(#loc72)
    %132 = tt.splat %arg6 : !tt.ptr<bf16> -> tensor<128x256x!tt.ptr<bf16>, #blocked2> loc(#loc73)
    %133 = tt.addptr %132, %131 : tensor<128x256x!tt.ptr<bf16>, #blocked2>, tensor<128x256xi32, #blocked2> loc(#loc73)
    %134 = arith.truncf %127 : tensor<128x256xf32, #mma> to tensor<128x256xbf16, #mma> loc(#loc74)
    %135 = ttg.convert_layout %134 : tensor<128x256xbf16, #mma> -> tensor<128x256xbf16, #blocked2> loc(#loc74)
    tt.store %133, %135, %82 : tensor<128x256x!tt.ptr<bf16>, #blocked2> loc(#loc74)
    tt.return loc(#loc75)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":45:24)
#loc3 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":51:22)
#loc4 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":52:41)
#loc5 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":52:30)
#loc6 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":52:50)
#loc7 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":53:40)
#loc8 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":53:34)
#loc9 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":54:19)
#loc10 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":54:30)
#loc11 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":56:17)
#loc12 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":56:40)
#loc13 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":56:27)
#loc14 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":57:17)
#loc15 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":57:40)
#loc16 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":57:27)
#loc17 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":59:57)
#loc18 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":63:57)
#loc19 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":71:30)
#loc20 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":72:30)
#loc21 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":74:25)
#loc22 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":76:30)
#loc23 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":76:25)
#loc24 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":77:25)
#loc25 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":80:25)
#loc26 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":82:55)
#loc27 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":82:50)
#loc28 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":82:25)
#loc29 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":77:20)
#loc30 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":82:20)
#loc31 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":71:42)
#loc32 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":72:42)
#loc33 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":69:26)
#loc34 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":83:25)
#loc35 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":71:50)
#loc36 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":88:15)
#loc37 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":89:15)
#loc38 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":90:20)
#loc39 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":90:34)
#loc40 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":90:26)
#loc41 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":94:30)
#loc42 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":94:66)
#loc43 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":94:105)
#loc44 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":95:30)
#loc45 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":95:66)
#loc46 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":95:105)
#loc47 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":96:31)
#loc48 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":96:67)
#loc49 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":96:106)
#loc50 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":97:31)
#loc51 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":97:67)
#loc52 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":97:106)
#loc53 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":98:18)
#loc54 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":94:15)
#loc55 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":100:40)
#loc56 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":96:21)
#loc57 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":96:16)
#loc58 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":97:29)
#loc59 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":101:12)
#loc60 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":102:15)
#loc61 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":102:40)
#loc62 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":104:21)
#loc63 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":104:16)
#loc64 = loc("/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime/triton_helpers.py":105:29)
#loc65 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":103:40)
#loc66 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":105:18)
#loc67 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":108:42)
#loc68 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":110:19)
#loc69 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":111:20)
#loc70 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":112:20)
#loc71 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":113:54)
#loc72 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":113:49)
#loc73 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":113:25)
#loc74 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":113:81)
#loc75 = loc("/tmp/torchinductor_root/zw/czwzuaj3aj2w3h4zhpehnzzhj2q6t3iqymp7nwqv62cjtf6cgtgh.py":113:4)
#loc76 = loc(callsite(#loc54 at #loc55))
#loc77 = loc(callsite(#loc56 at #loc55))
#loc78 = loc(callsite(#loc57 at #loc55))
#loc79 = loc(callsite(#loc58 at #loc55))
#loc80 = loc(callsite(#loc60 at #loc61))
#loc81 = loc(callsite(#loc62 at #loc61))
#loc82 = loc(callsite(#loc63 at #loc61))
#loc83 = loc(callsite(#loc64 at #loc61))
#loc84 = loc(callsite(#loc60 at #loc65))
#loc85 = loc(callsite(#loc62 at #loc65))
#loc86 = loc(callsite(#loc63 at #loc65))
#loc87 = loc(callsite(#loc64 at #loc65))
#loc88 = loc(callsite(#loc60 at #loc67))
#loc89 = loc(callsite(#loc62 at #loc67))
#loc90 = loc(callsite(#loc63 at #loc67))
#loc91 = loc(callsite(#loc64 at #loc67))
