; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/ds/cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !10 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %9 = shl i32 %8, 6, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = lshr i32 %10, 3, !dbg !13
  %12 = and i32 %11, 63, !dbg !13
  %13 = lshr i32 %10, 6, !dbg !13
  %14 = and i32 %13, 7, !dbg !13
  %15 = or disjoint i32 %12, %9, !dbg !14
  %16 = icmp slt i32 %15, 512, !dbg !15
  %17 = shl i32 %10, 3, !dbg !16
  %18 = and i32 %17, 56, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %29 = icmp slt i64 %28, 0, !dbg !19
  %30 = or disjoint i32 %14, %9, !dbg !14
  %31 = or disjoint i32 %30, 8, !dbg !14
  %32 = or disjoint i32 %30, 16, !dbg !14
  %33 = or disjoint i32 %30, 24, !dbg !14
  %34 = or disjoint i32 %30, 32, !dbg !14
  %35 = or disjoint i32 %30, 40, !dbg !14
  %36 = or disjoint i32 %30, 48, !dbg !14
  %37 = or disjoint i32 %30, 56, !dbg !14
  %38 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !15
  %39 = insertelement <8 x i32> %38, i32 %31, i64 1, !dbg !15
  %40 = insertelement <8 x i32> %39, i32 %32, i64 2, !dbg !15
  %41 = insertelement <8 x i32> %40, i32 %33, i64 3, !dbg !15
  %42 = insertelement <8 x i32> %41, i32 %34, i64 4, !dbg !15
  %43 = insertelement <8 x i32> %42, i32 %35, i64 5, !dbg !15
  %44 = insertelement <8 x i32> %43, i32 %36, i64 6, !dbg !15
  %45 = insertelement <8 x i32> %44, i32 %37, i64 7, !dbg !15
  %46 = icmp slt <8 x i32> %45, splat (i32 512), !dbg !15
  %47 = sext i32 %30 to i64, !dbg !17
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47, !dbg !17
  %49 = sext i32 %31 to i64, !dbg !17
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49, !dbg !17
  %51 = sext i32 %32 to i64, !dbg !17
  %52 = getelementptr i64, ptr addrspace(1) %0, i64 %51, !dbg !17
  %53 = sext i32 %33 to i64, !dbg !17
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53, !dbg !17
  %55 = sext i32 %34 to i64, !dbg !17
  %56 = getelementptr i64, ptr addrspace(1) %0, i64 %55, !dbg !17
  %57 = sext i32 %35 to i64, !dbg !17
  %58 = getelementptr i64, ptr addrspace(1) %0, i64 %57, !dbg !17
  %59 = sext i32 %36 to i64, !dbg !17
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59, !dbg !17
  %61 = sext i32 %37 to i64, !dbg !17
  %62 = getelementptr i64, ptr addrspace(1) %0, i64 %61, !dbg !17
  %63 = extractelement <8 x i1> %46, i64 0, !dbg !18
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %63) #6, !dbg !18
  %65 = extractelement <8 x i1> %46, i64 1, !dbg !18
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %65) #6, !dbg !18
  %67 = extractelement <8 x i1> %46, i64 2, !dbg !18
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %67) #6, !dbg !18
  %69 = extractelement <8 x i1> %46, i64 3, !dbg !18
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %69) #6, !dbg !18
  %71 = extractelement <8 x i1> %46, i64 4, !dbg !18
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %71) #6, !dbg !18
  %73 = extractelement <8 x i1> %46, i64 5, !dbg !18
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %73) #6, !dbg !18
  %75 = extractelement <8 x i1> %46, i64 6, !dbg !18
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %75) #6, !dbg !18
  %77 = extractelement <8 x i1> %46, i64 7, !dbg !18
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %77) #6, !dbg !18
  %79 = insertelement <8 x i64> poison, i64 %64, i64 0, !dbg !20
  %80 = insertelement <8 x i64> %79, i64 %66, i64 1, !dbg !20
  %81 = insertelement <8 x i64> %80, i64 %68, i64 2, !dbg !20
  %82 = insertelement <8 x i64> %81, i64 %70, i64 3, !dbg !20
  %83 = insertelement <8 x i64> %82, i64 %72, i64 4, !dbg !20
  %84 = insertelement <8 x i64> %83, i64 %74, i64 5, !dbg !20
  %85 = insertelement <8 x i64> %84, i64 %76, i64 6, !dbg !20
  %86 = insertelement <8 x i64> %85, i64 %78, i64 7, !dbg !20
  %87 = add <8 x i64> %86, splat (i64 32128), !dbg !20
  %88 = icmp slt <8 x i64> %86, zeroinitializer, !dbg !19
  %89 = select <8 x i1> %88, <8 x i64> %87, <8 x i64> %86, !dbg !21
  %90 = shl i64 %28, 12, !dbg !22
  %91 = add i64 %90, 131596288, !dbg !22
  %92 = select i1 %29, i64 %91, i64 %90, !dbg !22
  %93 = icmp ugt <8 x i64> %89, splat (i64 32127)
  %94 = and <8 x i1> %93, %46
  %95 = bitcast <8 x i1> %94 to i8
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %.split.preheader, label %125, !dbg !23

.split.preheader:                                 ; preds = %7
  %97 = zext nneg i32 %18 to i64, !dbg !24
  %invariant.op = or disjoint i64 %92, %97, !dbg !24
  %98 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !25
  %99 = shufflevector <8 x i1> %98, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !25
  br label %.split, !dbg !24

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %100 = phi <8 x float> [ zeroinitializer, %.split.preheader ], [ %123, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass = or i64 %indvars.iv, %invariant.op
  %101 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass, !dbg !26
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %101, i1 %16) #6, !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !27
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !27
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !27
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !27
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !27
  %111 = shufflevector <2 x bfloat> %104, <2 x bfloat> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %112 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %113 = shufflevector <8 x bfloat> %111, <8 x bfloat> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %114 = shufflevector <2 x bfloat> %108, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %115 = shufflevector <8 x bfloat> %113, <8 x bfloat> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %116 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %117 = shufflevector <8 x bfloat> %115, <8 x bfloat> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %118 = shufflevector <2 x bfloat> %110, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %119 = shufflevector <8 x bfloat> %117, <8 x bfloat> %118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %120 = fpext <8 x bfloat> %119 to <8 x float>, !dbg !28
  %121 = fmul <8 x float> %120, %120, !dbg !29
  %122 = fadd <8 x float> %100, %121, !dbg !30
  %123 = select <8 x i1> %99, <8 x float> %122, <8 x float> %100, !dbg !25
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !24
  %124 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !24
  br i1 %124, label %.split, label %__nv_rsqrtf.exit, !dbg !24

125:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  unreachable, !dbg !23

__nv_rsqrtf.exit:                                 ; preds = %.split
  %shift = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %126 = fadd <8 x float> %123, %shift, !dbg !31
  %shift65 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %127 = fadd <8 x float> %shift65, %126, !dbg !31
  %shift66 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %128 = fadd <8 x float> %shift66, %127, !dbg !31
  %shift67 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %129 = fadd <8 x float> %shift67, %128, !dbg !31
  %shift68 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %130 = fadd <8 x float> %shift68, %129, !dbg !31
  %shift69 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %131 = fadd <8 x float> %shift69, %130, !dbg !31
  %shift70 = shufflevector <8 x float> %123, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %132 = fadd <8 x float> %shift70, %131, !dbg !31
  %133 = extractelement <8 x float> %132, i64 0, !dbg !31
  %134 = bitcast float %133 to i32, !dbg !36
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = fadd float %133, %136, !dbg !31
  %138 = bitcast float %137 to i32, !dbg !36
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = fadd float %137, %140, !dbg !31
  %142 = bitcast float %141 to i32, !dbg !36
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = fadd float %141, %144, !dbg !31
  %146 = tail call float @llvm.nvvm.div.full(float %145, float 4.096000e+03), !dbg !37
  %147 = fadd float %146, 0x3EB0C6F7A0000000, !dbg !38
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i34 = icmp eq i32 %155, 0, !dbg !39
  br i1 %.not.i34, label %158, label %156, !dbg !39

156:                                              ; preds = %__nv_rsqrtf.exit
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !39
  br label %__nv_rsqrtf.exit36, !dbg !39

158:                                              ; preds = %__nv_rsqrtf.exit
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !39
  br label %__nv_rsqrtf.exit36, !dbg !39

__nv_rsqrtf.exit36:                               ; preds = %156, %158
  %.0.i35 = phi float [ %157, %156 ], [ %159, %158 ], !dbg !39
  %160 = shl i32 %15, 12, !dbg !40
  %161 = zext nneg i32 %18 to i64, !dbg !41
  %162 = sext i32 %160 to i64, !dbg !41
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %3, i64 %162, !dbg !41
  %163 = insertelement <2 x float> poison, float %.0.i35, i64 0, !dbg !42
  %164 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %165, !dbg !41

165:                                              ; preds = %165, %__nv_rsqrtf.exit36
  %indvars.iv49 = phi i64 [ 0, %__nv_rsqrtf.exit36 ], [ %indvars.iv.next50, %165 ]
  %166 = or disjoint i64 %indvars.iv49, %161, !dbg !43
  %167 = getelementptr bfloat, ptr addrspace(1) %2, i64 %166, !dbg !44
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %167, i1 true) #6, !dbg !45
  %169 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !45
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !45
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !45
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !45
  %173 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !45
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !45
  %175 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !45
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %177 = or disjoint i64 %92, %166, !dbg !47
  %178 = getelementptr bfloat, ptr addrspace(1) %1, i64 %177, !dbg !48
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %178, i1 %16) #6, !dbg !49
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !49
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !49
  %182 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !49
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !49
  %184 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !49
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !49
  %186 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !49
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !49
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %166, !dbg !50
  %188 = fpext <2 x bfloat> %176 to <2 x float>, !dbg !51
  %189 = fpext <2 x bfloat> %181 to <2 x float>, !dbg !52
  %190 = fmul <2 x float> %164, %189, !dbg !42
  %191 = fmul <2 x float> %190, %188, !dbg !53
  %192 = fptrunc <2 x float> %191 to <2 x bfloat>, !dbg !54
  %193 = fpext <2 x bfloat> %174 to <2 x float>, !dbg !51
  %194 = fpext <2 x bfloat> %183 to <2 x float>, !dbg !52
  %195 = fmul <2 x float> %164, %194, !dbg !42
  %196 = fmul <2 x float> %195, %193, !dbg !53
  %197 = fptrunc <2 x float> %196 to <2 x bfloat>, !dbg !54
  %198 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !51
  %199 = fpext <2 x bfloat> %185 to <2 x float>, !dbg !52
  %200 = fmul <2 x float> %164, %199, !dbg !42
  %201 = fmul <2 x float> %200, %198, !dbg !53
  %202 = fptrunc <2 x float> %201 to <2 x bfloat>, !dbg !54
  %203 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !51
  %204 = fpext <2 x bfloat> %187 to <2 x float>, !dbg !52
  %205 = fmul <2 x float> %164, %204, !dbg !42
  %206 = fmul <2 x float> %205, %203, !dbg !53
  %207 = fptrunc <2 x float> %206 to <2 x bfloat>, !dbg !54
  %208 = bitcast <2 x bfloat> %192 to i32, !dbg !54
  %209 = bitcast <2 x bfloat> %197 to i32, !dbg !54
  %210 = bitcast <2 x bfloat> %202 to i32, !dbg !54
  %211 = bitcast <2 x bfloat> %207 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %209, i32 %210, i32 %211, ptr addrspace(1) %gep, i1 %16) #6, !dbg !54
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 64, !dbg !41
  %212 = icmp samesign ult i64 %indvars.iv49, 4032, !dbg !41
  br i1 %212, label %165, label %213, !dbg !41

213:                                              ; preds = %165
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py", directory: "/tmp/torchinductor_root/ds")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 39, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 40, column: 36, scope: !10)
!22 = !DILocation(line: 42, column: 46, scope: !10)
!23 = !DILocation(line: 41, column: 68, scope: !10)
!24 = !DILocation(line: 31, column: 40, scope: !10)
!25 = !DILocation(line: 47, column: 50, scope: !10)
!26 = !DILocation(line: 42, column: 34, scope: !10)
!27 = !DILocation(line: 42, column: 53, scope: !10)
!28 = !DILocation(line: 42, column: 114, scope: !10)
!29 = !DILocation(line: 44, column: 22, scope: !10)
!30 = !DILocation(line: 46, column: 25, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 64, column: 25, scope: !10)
!38 = !DILocation(line: 66, column: 24, scope: !10)
!39 = !DILocation(line: 67, column: 32, scope: !10)
!40 = !DILocation(line: 71, column: 41, scope: !10)
!41 = !DILocation(line: 49, column: 40, scope: !10)
!42 = !DILocation(line: 68, column: 24, scope: !10)
!43 = !DILocation(line: 50, column: 31, scope: !10)
!44 = !DILocation(line: 55, column: 35, scope: !10)
!45 = !DILocation(line: 55, column: 42, scope: !10)
!46 = !DILocation(line: 60, column: 70, scope: !10)
!47 = !DILocation(line: 61, column: 42, scope: !10)
!48 = !DILocation(line: 61, column: 35, scope: !10)
!49 = !DILocation(line: 61, column: 55, scope: !10)
!50 = !DILocation(line: 71, column: 29, scope: !10)
!51 = !DILocation(line: 55, column: 95, scope: !10)
!52 = !DILocation(line: 61, column: 117, scope: !10)
!53 = !DILocation(line: 70, column: 24, scope: !10)
!54 = !DILocation(line: 71, column: 53, scope: !10)
!55 = !DILocation(line: 49, column: 4, scope: !10)
