; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 1024, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 1024, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl nsw i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 4, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 8, !dbg !19
  %20 = and i32 %18, 15, !dbg !19
  %21 = and i32 %15, 64, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %15, 128, !dbg !19
  %24 = lshr exact i32 %23, 2, !dbg !19
  %25 = or disjoint i32 %22, %20, !dbg !19
  %26 = or disjoint i32 %25, %24, !dbg !19
  %27 = or disjoint i32 %14, %26, !dbg !20
  %28 = shl nsw i32 %13, 5, !dbg !21
  %29 = lshr i32 %15, 3, !dbg !22
  %30 = and i32 %29, 31, !dbg !22
  %31 = shl i32 %15, 3, !dbg !22
  %32 = and i32 %31, 24, !dbg !22
  %33 = or disjoint i32 %28, %30, !dbg !23
  %34 = srem i32 %27, 512, !dbg !24
  %35 = srem i32 %33, 4096, !dbg !25
  %36 = shl i32 %15, 2, !dbg !26
  %37 = and i32 %36, 8, !dbg !26
  %38 = and i32 %36, 12, !dbg !26
  %39 = shl nuw nsw i32 %16, 2, !dbg !26
  %40 = or disjoint i32 %38, %39, !dbg !26
  %41 = mul nsw i32 %34, 10240, !dbg !27
  %42 = mul nsw i32 %35, 10240, !dbg !28
  %43 = or disjoint i32 %41, %32, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = xor i32 %31, %15, !dbg !31
  %47 = and i32 %46, 24, !dbg !31
  %48 = shl nuw nsw i32 %26, 5, !dbg !31
  %49 = or disjoint i32 %48, %47, !dbg !31
  %50 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %49, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %50, ptr addrspace(1) %45, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %51 = or disjoint i32 %42, %40, !dbg !32
  %52 = sext i32 %51 to i64, !dbg !33
  %53 = getelementptr bfloat, ptr addrspace(1) %1, i64 %52, !dbg !33
  %54 = lshr exact i32 %17, 1, !dbg !34
  %55 = lshr i32 %15, 1, !dbg !34
  %56 = and i32 %55, 24, !dbg !34
  %57 = xor i32 %40, %56, !dbg !34
  %58 = shl nuw nsw i32 %30, 5, !dbg !34
  %59 = or disjoint i32 %57, %58, !dbg !34
  %60 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %59, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %60, ptr addrspace(1) %53, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %61 = or disjoint i32 %43, 32, !dbg !29
  %62 = sext i32 %61 to i64, !dbg !30
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %49, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %63, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %65 = or disjoint i32 %51, 32, !dbg !32
  %66 = sext i32 %65 to i64, !dbg !33
  %67 = getelementptr bfloat, ptr addrspace(1) %1, i64 %66, !dbg !33
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %59, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %67, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %69 = or disjoint i32 %43, 64, !dbg !29
  %70 = sext i32 %69 to i64, !dbg !30
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %49, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %71, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %73 = or disjoint i32 %51, 64, !dbg !32
  %74 = sext i32 %73 to i64, !dbg !33
  %75 = getelementptr bfloat, ptr addrspace(1) %1, i64 %74, !dbg !33
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 20480), i32 %59, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %75, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %77 = or disjoint i32 %43, 96, !dbg !29
  %78 = sext i32 %77 to i64, !dbg !30
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %49, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %79, i32 16) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %81 = or disjoint i32 %51, 96, !dbg !32
  %82 = sext i32 %81 to i64, !dbg !33
  %83 = getelementptr bfloat, ptr addrspace(1) %1, i64 %82, !dbg !33
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 22528), i32 %59, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %84, ptr addrspace(1) %83, i32 8) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %85 = or disjoint i32 %37, %39
  %86 = and i32 %15, 7
  %87 = and i32 %15, 15
  %88 = xor i32 %85, %54
  %89 = or disjoint i32 %22, %87
  %90 = or disjoint i32 %89, %24
  %91 = shl nuw nsw i32 %90, 5
  %92 = or disjoint i32 %91, %88
  %93 = or disjoint i32 %37, 16
  %94 = or disjoint i32 %54, %39
  %95 = xor i32 %94, %93
  %96 = or disjoint i32 %95, %91
  %and.ra23 = and i32 %15, 24
  %97 = xor i32 %85, %and.ra23
  %98 = or disjoint i32 %19, %86
  %99 = shl nuw nsw i32 %98, 5
  %100 = or disjoint i32 %97, %99
  %101 = or disjoint i32 %100, 512
  %invariant.op = or disjoint i32 %43, 128, !dbg !35
  %invariant.op26 = or disjoint i32 %51, 128, !dbg !35
  %102 = sext i32 %invariant.op to i64, !dbg !35
  %103 = sext i32 %invariant.op26 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !35
  %invariant.gep45 = getelementptr bfloat, ptr addrspace(1) %1, i64 %103, !dbg !35
  br label %104, !dbg !35

104:                                              ; preds = %4, %104
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %104 ]
  %105 = phi i32 [ -1, %4 ], [ %118, %104 ]
  %106 = phi i32 [ 3, %4 ], [ %171, %104 ]
  %107 = phi float [ 0.000000e+00, %4 ], [ %160, %104 ]
  %108 = phi float [ 0.000000e+00, %4 ], [ %161, %104 ]
  %109 = phi float [ 0.000000e+00, %4 ], [ %162, %104 ]
  %110 = phi float [ 0.000000e+00, %4 ], [ %163, %104 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %165, %104 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %166, %104 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %167, %104 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %168, %104 ]
  %115 = icmp samesign ult i64 %indvars.iv, 316, !dbg !35
  %116 = add i32 %105, 1, !dbg !35
  %117 = icmp slt i32 %116, 4, !dbg !35
  %118 = select i1 %117, i32 %116, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl i32 %118, 12, !dbg !31
  %119 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %119, i32 %92, !dbg !31
  %121 = ptrtoint ptr addrspace(3) %120 to i32, !dbg !31
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %121) #1, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !31
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %119, i32 %96, !dbg !31
  %128 = ptrtoint ptr addrspace(3) %127 to i32, !dbg !31
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %128) #1, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !31
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !31
  %.idx14 = shl i32 %118, 11, !dbg !34
  %134 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %.idx14, !dbg !34
  %135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %134, i32 %100, !dbg !34
  %136 = ptrtoint ptr addrspace(3) %135 to i32, !dbg !34
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %136) #1, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !34
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %134, i32 %101, !dbg !34
  %143 = ptrtoint ptr addrspace(3) %142 to i32, !dbg !34
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %143) #1, !dbg !34
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !34
  %149 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %107, float %108, float %109, float %110, i32 %123, i32 %124, i32 %125, i32 %126, i32 %138, i32 %139) #1, !dbg !36
  %150 = extractvalue { float, float, float, float } %149, 0, !dbg !36
  %151 = extractvalue { float, float, float, float } %149, 1, !dbg !36
  %152 = extractvalue { float, float, float, float } %149, 2, !dbg !36
  %153 = extractvalue { float, float, float, float } %149, 3, !dbg !36
  %154 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %111, float %112, float %113, float %114, i32 %123, i32 %124, i32 %125, i32 %126, i32 %145, i32 %146) #1, !dbg !36
  %155 = extractvalue { float, float, float, float } %154, 0, !dbg !36
  %156 = extractvalue { float, float, float, float } %154, 1, !dbg !36
  %157 = extractvalue { float, float, float, float } %154, 2, !dbg !36
  %158 = extractvalue { float, float, float, float } %154, 3, !dbg !36
  %159 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %130, i32 %131, i32 %132, i32 %133, i32 %140, i32 %141) #1, !dbg !36
  %160 = extractvalue { float, float, float, float } %159, 0, !dbg !36
  %161 = extractvalue { float, float, float, float } %159, 1, !dbg !36
  %162 = extractvalue { float, float, float, float } %159, 2, !dbg !36
  %163 = extractvalue { float, float, float, float } %159, 3, !dbg !36
  %164 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %155, float %156, float %157, float %158, i32 %130, i32 %131, i32 %132, i32 %133, i32 %147, i32 %148) #1, !dbg !36
  %165 = extractvalue { float, float, float, float } %164, 0, !dbg !36
  %166 = extractvalue { float, float, float, float } %164, 1, !dbg !36
  %167 = extractvalue { float, float, float, float } %164, 2, !dbg !36
  %168 = extractvalue { float, float, float, float } %164, 3, !dbg !36
  %169 = add i32 %106, 1, !dbg !35
  %170 = icmp slt i32 %169, 4, !dbg !35
  %171 = select i1 %170, i32 %169, i32 0, !dbg !35
  %172 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %gep44 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %172, !dbg !30
  %.idx15 = shl i32 %171, 12, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i8, ptr addrspace(3) %50, i32 %.idx15, !dbg !31
  %173 = select i1 %115, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep44, i32 %173) #1, !dbg !31
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !31
  %gep46 = getelementptr bfloat, ptr addrspace(1) %invariant.gep45, i64 %172, !dbg !33
  %.idx16 = shl i32 %171, 11, !dbg !34
  %gep25 = getelementptr i8, ptr addrspace(3) %60, i32 %.idx16, !dbg !34
  %174 = select i1 %115, i32 8, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r"(ptr addrspace(3) %gep25, ptr addrspace(1) %gep46, i32 %174) #1, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 320, !dbg !35
  br i1 %exitcond.not, label %175, label %104, !dbg !35

175:                                              ; preds = %104
  %176 = or disjoint i32 %28, %32, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %177 = icmp slt i32 %27, 512, !dbg !38
  %178 = icmp slt i32 %176, 4096, !dbg !39
  %179 = and i1 %177, %178, !dbg !40
  %180 = shl i32 %27, 12, !dbg !41
  %181 = add i32 %180, %176, !dbg !42
  %182 = sext i32 %181 to i64, !dbg !43
  %183 = getelementptr bfloat, ptr addrspace(1) %2, i64 %182, !dbg !43
  %184 = fptrunc float %160 to bfloat, !dbg !44
  %185 = fptrunc float %161 to bfloat, !dbg !44
  %186 = fptrunc float %162 to bfloat, !dbg !44
  %187 = fptrunc float %163 to bfloat, !dbg !44
  %188 = fptrunc float %165 to bfloat, !dbg !44
  %189 = fptrunc float %166 to bfloat, !dbg !44
  %190 = fptrunc float %167 to bfloat, !dbg !44
  %191 = fptrunc float %168 to bfloat, !dbg !44
  %192 = shl i32 %15, 1, !dbg !44
  %193 = and i32 %192, 6, !dbg !44
  %194 = shl nuw nsw i32 %16, 3, !dbg !44
  %195 = or disjoint i32 %193, %194, !dbg !44
  %196 = and i32 %31, 64, !dbg !44
  %197 = or disjoint i32 %195, %196, !dbg !44
  %198 = shl nuw nsw i32 %17, 3, !dbg !44
  %199 = or disjoint i32 %197, %198, !dbg !44
  %200 = or disjoint i32 %199, %19, !dbg !44
  %201 = shl nuw nsw i32 %21, 3, !dbg !44
  %202 = shl nuw nsw i32 %23, 3, !dbg !44
  %203 = or disjoint i32 %202, %201, !dbg !44
  %204 = xor i32 %203, %200, !dbg !44
  %205 = and i32 %31, 376, !dbg !44
  %206 = or disjoint i32 %205, %198, !dbg !44
  %207 = or disjoint i32 %206, %201, !dbg !44
  %208 = or disjoint i32 %207, %202, !dbg !44
  %209 = lshr i32 %204, 2, !dbg !44
  %210 = and i32 %209, 1073741816, !dbg !44
  %211 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %210, !dbg !44
  %212 = getelementptr bfloat, ptr addrspace(3) %211, i32 %204, !dbg !44
  %213 = bitcast bfloat %184 to i16, !dbg !44
  %214 = bitcast bfloat %185 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %212, i16 %213, i16 %214, i1 true) #1, !dbg !44
  %215 = xor i32 %204, 256, !dbg !44
  %216 = lshr i32 %215, 2, !dbg !44
  %217 = and i32 %216, 1073741816, !dbg !44
  %218 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %217, !dbg !44
  %219 = getelementptr bfloat, ptr addrspace(3) %218, i32 %215, !dbg !44
  %220 = bitcast bfloat %186 to i16, !dbg !44
  %221 = bitcast bfloat %187 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %219, i16 %220, i16 %221, i1 true) #1, !dbg !44
  %222 = xor i32 %204, 16, !dbg !44
  %223 = getelementptr bfloat, ptr addrspace(3) %211, i32 %222, !dbg !44
  %224 = bitcast bfloat %188 to i16, !dbg !44
  %225 = bitcast bfloat %189 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %223, i16 %224, i16 %225, i1 true) #1, !dbg !44
  %226 = xor i32 %204, 272, !dbg !44
  %227 = lshr i32 %226, 2, !dbg !44
  %228 = and i32 %227, 1073741816, !dbg !44
  %229 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %228, !dbg !44
  %230 = getelementptr bfloat, ptr addrspace(3) %229, i32 %226, !dbg !44
  %231 = bitcast bfloat %190 to i16, !dbg !44
  %232 = bitcast bfloat %191 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %230, i16 %231, i16 %232, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %233 = lshr exact i32 %208, 2, !dbg !44
  %234 = and i32 %233, 536870904, !dbg !44
  %235 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %234, !dbg !44
  %236 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %235, i32 %208, !dbg !44
  %.extract = load i32, ptr addrspace(3) %236, align 16, !dbg !44
  %237 = getelementptr inbounds nuw i8, ptr addrspace(3) %236, i32 4, !dbg !44
  %.extract18 = load i32, ptr addrspace(3) %237, align 4, !dbg !44
  %238 = getelementptr inbounds nuw i8, ptr addrspace(3) %236, i32 8, !dbg !44
  %.extract20 = load i32, ptr addrspace(3) %238, align 8, !dbg !44
  %239 = getelementptr inbounds nuw i8, ptr addrspace(3) %236, i32 12, !dbg !44
  %.extract22 = load i32, ptr addrspace(3) %239, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract20, i32 %.extract22, ptr addrspace(1) %183, i1 %179) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvcrwzaawc5o22ltkopxisfo4z3t73zwm5wdsjmhm66svdkwvwxt.py", directory: "/tmp/torchinductor_root/vc")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 67, column: 30, scope: !6)
!27 = !DILocation(line: 71, column: 31, scope: !6)
!28 = !DILocation(line: 77, column: 56, scope: !6)
!29 = !DILocation(line: 71, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 25, scope: !6)
!31 = !DILocation(line: 72, column: 20, scope: !6)
!32 = !DILocation(line: 77, column: 50, scope: !6)
!33 = !DILocation(line: 77, column: 25, scope: !6)
!34 = !DILocation(line: 77, column: 20, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
