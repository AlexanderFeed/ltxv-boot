; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 5, !dbg !11
  %20 = and i32 %18, 512, !dbg !11
  %.lobit = lshr exact i32 %20, 9, !dbg !11
  %21 = and i32 %18, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %17, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %17, 512, !dbg !13
  %25 = shl i32 %18, 2, !dbg !14
  %26 = and i32 %25, 4092, !dbg !14
  %27 = shl i32 %18, 3, !dbg !14
  %28 = and i32 %27, 4088, !dbg !14
  %29 = or disjoint i32 %28, 4, !dbg !14
  %30 = sext i32 %22 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %4, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %23) #5, !dbg !16
  %40 = bitcast i16 %39 to bfloat, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %5, i64 %30, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !18
  %50 = bitcast i16 %49 to bfloat, !dbg !18
  %51 = icmp samesign ult i32 %26, 3072, !dbg !19
  %52 = icmp samesign ult i32 %28, 3072, !dbg !19
  %53 = mul i32 %22, 3072, !dbg !20
  %54 = add i32 %53, %28, !dbg !21
  %55 = add i32 %29, %53, !dbg !21
  %56 = sext i32 %54 to i64, !dbg !22
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = and i1 %24, %51, !dbg !23
  %59 = and i1 %52, %23, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %59) #5, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %65 = and i32 %27, 8184, !dbg !25
  %66 = lshr i32 %27, 8, !dbg !25
  %.idx = and i32 %66, 16, !dbg !25
  %67 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !25
  %68 = getelementptr bfloat, ptr addrspace(3) %67, i32 %65, !dbg !25
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %68, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26, !dbg !25
  %70 = getelementptr inbounds nuw i8, ptr addrspace(3) %69, i32 4, !dbg !25
  %71 = load bfloat, ptr addrspace(3) %70, align 4, !dbg !25
  %72 = getelementptr inbounds nuw i8, ptr addrspace(3) %69, i32 6, !dbg !25
  %73 = load bfloat, ptr addrspace(3) %72, align 2, !dbg !25
  %74 = getelementptr inbounds nuw i8, ptr addrspace(3) %69, i32 8208, !dbg !25
  %75 = getelementptr inbounds nuw i8, ptr addrspace(3) %69, i32 8212, !dbg !25
  %76 = load bfloat, ptr addrspace(3) %75, align 4, !dbg !25
  %77 = getelementptr inbounds nuw i8, ptr addrspace(3) %69, i32 8214, !dbg !25
  %78 = load bfloat, ptr addrspace(3) %77, align 2, !dbg !25
  %79 = fpext bfloat %71 to float, !dbg !25
  %80 = fpext bfloat %73 to float, !dbg !25
  %81 = fpext bfloat %76 to float, !dbg !25
  %82 = fpext bfloat %78 to float, !dbg !25
  %83 = add nuw nsw i32 %26, 6144, !dbg !26
  %84 = zext nneg i32 %83 to i64, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !27
  %86 = getelementptr bfloat, ptr addrspace(1) %2, i64 %84, !dbg !28
  %87 = getelementptr i32, ptr addrspace(1) %3, i64 %56, !dbg !29
  %88 = sext i32 %55 to i64, !dbg !29
  %89 = getelementptr i32, ptr addrspace(1) %3, i64 %88, !dbg !29
  %90 = zext nneg i32 %26 to i64, !dbg !30
  %91 = getelementptr bfloat, ptr addrspace(1) %6, i64 %90, !dbg !30
  %92 = getelementptr bfloat, ptr addrspace(1) %7, i64 %90, !dbg !31
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !32
  %93 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !32
  %94 = fpext bfloat %93 to float, !dbg !32
  %95 = fsub float 0.000000e+00, %94, !dbg !36
  %.inv12 = fcmp ole bfloat %50, 0xR0000, !dbg !37
  %96 = select i1 %.inv12, bfloat 0xR0000, bfloat %50, !dbg !37
  %97 = fpext bfloat %96 to float, !dbg !37
  %98 = fcmp ogt float %95, %97, !dbg !39
  %99 = fcmp uno float %95, 0.000000e+00, !dbg !41
  %100 = or i1 %99, %98, !dbg !42
  %101 = select i1 %100, float %95, float %97, !dbg !43
  %102 = fmul float %101, 0x3F80204080000000, !dbg !44
  %103 = fcmp ogt float %102, 0x3EE4F8B580000000, !dbg !45
  %104 = fcmp uno float %102, 0.000000e+00, !dbg !47
  %105 = or i1 %103, %104, !dbg !48
  %106 = select i1 %105, float %102, float 0x3EE4F8B580000000, !dbg !49
  %107 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !50
  %108 = or disjoint i32 %65, 4, !dbg !50
  %109 = lshr i32 %27, 10, !dbg !50
  %110 = and i32 %109, 4, !dbg !50
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !50
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %108, !dbg !50
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !50
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %113, i32 8, !dbg !50
  %115 = getelementptr inbounds nuw i8, ptr addrspace(3) %113, i32 12, !dbg !50
  %116 = getelementptr inbounds nuw i8, ptr addrspace(3) %113, i32 16400, !dbg !50
  %117 = getelementptr inbounds nuw i8, ptr addrspace(3) %113, i32 16408, !dbg !50
  %118 = getelementptr inbounds nuw i8, ptr addrspace(3) %113, i32 16412, !dbg !50
  %119 = load <2 x bfloat>, ptr addrspace(3) %69, align 8, !dbg !25
  %120 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !25
  %121 = insertelement <2 x i1> poison, i1 %58, i64 0, !dbg !51
  %122 = shufflevector <2 x i1> %121, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !51
  %123 = load <2 x bfloat>, ptr addrspace(3) %74, align 8, !dbg !25
  %124 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !25
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %85, i1 %51) #5, !dbg !52
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !52
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !52
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !52
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !52
  %130 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !52
  %131 = insertelement <2 x i32> %130, i32 %127, i64 1, !dbg !52
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !52
  %133 = bitcast i32 %128 to float, !dbg !52
  %134 = bitcast i32 %129 to float, !dbg !52
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %86, i1 %51) #5, !dbg !53
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !53
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !53
  %138 = extractvalue { i32, i32 } %135, 1, !dbg !53
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !53
  %140 = extractelement <2 x bfloat> %139, i64 0, !dbg !53
  %141 = extractelement <2 x bfloat> %139, i64 1, !dbg !53
  %142 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !54
  %143 = fpext bfloat %140 to float, !dbg !54
  %144 = fpext bfloat %141 to float, !dbg !54
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %59) #5, !dbg !55
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !55
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !55
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !55
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !55
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 %59) #5, !dbg !55
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !55
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !55
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !55
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !55
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %91, i1 %51) #5, !dbg !56
  %156 = extractvalue { i32, i32 } %155, 0, !dbg !56
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !56
  %158 = extractvalue { i32, i32 } %155, 1, !dbg !56
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !56
  %160 = extractelement <2 x bfloat> %159, i64 0, !dbg !56
  %161 = extractelement <2 x bfloat> %159, i64 1, !dbg !56
  %162 = fpext <2 x bfloat> %157 to <2 x float>, !dbg !57
  %163 = fpext bfloat %160 to float, !dbg !57
  %164 = fpext bfloat %161 to float, !dbg !57
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %92, i1 %51) #5, !dbg !58
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !58
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !58
  %168 = extractvalue { i32, i32 } %165, 1, !dbg !58
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !58
  %170 = extractelement <2 x bfloat> %169, i64 0, !dbg !58
  %171 = extractelement <2 x bfloat> %169, i64 1, !dbg !58
  %172 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !59
  %173 = fpext bfloat %170 to float, !dbg !59
  %174 = fpext bfloat %171 to float, !dbg !59
  %175 = fadd <2 x float> %132, %142, !dbg !60
  %176 = fadd float %133, %143, !dbg !60
  %177 = fadd float %134, %144, !dbg !60
  %178 = sitofp i32 %146 to float, !dbg !61
  %179 = sitofp i32 %147 to float, !dbg !61
  %180 = sitofp i32 %148 to float, !dbg !61
  %181 = sitofp i32 %149 to float, !dbg !61
  %182 = sitofp i32 %151 to float, !dbg !61
  %183 = sitofp i32 %152 to float, !dbg !61
  %184 = sitofp i32 %153 to float, !dbg !61
  %185 = sitofp i32 %154 to float, !dbg !61
  %186 = fmul float %106, %178, !dbg !50
  %187 = fmul float %106, %179, !dbg !50
  %188 = fmul float %106, %180, !dbg !50
  %189 = fmul float %106, %181, !dbg !50
  %190 = fmul float %106, %182, !dbg !50
  %191 = fmul float %106, %183, !dbg !50
  %192 = fmul float %106, %184, !dbg !50
  %193 = fmul float %106, %185, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %194 = bitcast float %186 to i32, !dbg !50
  %195 = bitcast float %187 to i32, !dbg !50
  %196 = bitcast float %188 to i32, !dbg !50
  %197 = bitcast float %189 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %107, i32 %194, i32 %195, i32 %196, i32 %197, i1 true) #5, !dbg !50
  %198 = bitcast float %190 to i32, !dbg !50
  %199 = bitcast float %191 to i32, !dbg !50
  %200 = bitcast float %192 to i32, !dbg !50
  %201 = bitcast float %193 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %112, i32 %198, i32 %199, i32 %200, i32 %201, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %202 = load <2 x float>, ptr addrspace(3) %113, align 16, !dbg !50
  %203 = load float, ptr addrspace(3) %114, align 8, !dbg !50
  %204 = load float, ptr addrspace(3) %115, align 4, !dbg !50
  %205 = load <2 x float>, ptr addrspace(3) %116, align 16, !dbg !50
  %206 = load float, ptr addrspace(3) %117, align 8, !dbg !50
  %207 = load float, ptr addrspace(3) %118, align 4, !dbg !50
  %208 = fmul <2 x float> %202, %162, !dbg !62
  %209 = fmul float %203, %163, !dbg !62
  %210 = fmul float %204, %164, !dbg !62
  %211 = fmul <2 x float> %205, %162, !dbg !62
  %212 = fmul float %206, %163, !dbg !62
  %213 = fmul float %207, %164, !dbg !62
  %214 = fadd <2 x float> %208, %172, !dbg !63
  %215 = fadd float %209, %173, !dbg !63
  %216 = fadd float %210, %174, !dbg !63
  %217 = fadd <2 x float> %211, %172, !dbg !63
  %218 = fadd float %212, %173, !dbg !63
  %219 = fadd float %213, %174, !dbg !63
  %220 = fmul <2 x float> %175, %214, !dbg !64
  %221 = fmul float %176, %215, !dbg !64
  %222 = fmul float %177, %216, !dbg !64
  %223 = fmul <2 x float> %175, %217, !dbg !64
  %224 = fmul float %176, %218, !dbg !64
  %225 = fmul float %177, %219, !dbg !64
  %226 = fadd <2 x float> %220, %120, !dbg !65
  %227 = fadd float %221, %79, !dbg !65
  %228 = fadd float %222, %80, !dbg !65
  %229 = fadd <2 x float> %223, %124, !dbg !65
  %230 = fadd float %224, %81, !dbg !65
  %231 = fadd float %225, %82, !dbg !65
  %232 = select <2 x i1> %122, <2 x float> %226, <2 x float> zeroinitializer, !dbg !51
  %233 = select i1 %58, float %227, float 0.000000e+00, !dbg !51
  %234 = select i1 %58, float %228, float 0.000000e+00, !dbg !51
  %235 = select <2 x i1> %122, <2 x float> %229, <2 x float> zeroinitializer, !dbg !51
  %236 = select i1 %58, float %230, float 0.000000e+00, !dbg !51
  %237 = select i1 %58, float %231, float 0.000000e+00, !dbg !51
  %238 = select i1 %58, float 1.000000e+00, float 0.000000e+00, !dbg !66
  %239 = getelementptr bfloat, ptr addrspace(1) %8, i64 %56, !dbg !67
  %240 = extractelement <2 x float> %226, i64 0, !dbg !68
  %241 = fptrunc float %240 to bfloat, !dbg !68
  %242 = extractelement <2 x float> %226, i64 1, !dbg !68
  %243 = fptrunc float %242 to bfloat, !dbg !68
  %244 = fptrunc float %227 to bfloat, !dbg !68
  %245 = fptrunc float %228 to bfloat, !dbg !68
  %246 = extractelement <2 x float> %229, i64 0, !dbg !68
  %247 = fptrunc float %246 to bfloat, !dbg !68
  %248 = extractelement <2 x float> %229, i64 1, !dbg !68
  %249 = fptrunc float %248 to bfloat, !dbg !68
  %250 = fptrunc float %230 to bfloat, !dbg !68
  %251 = fptrunc float %231 to bfloat, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %252 = bitcast bfloat %241 to i16, !dbg !68
  %253 = bitcast bfloat %243 to i16, !dbg !68
  %254 = bitcast bfloat %244 to i16, !dbg !68
  %255 = bitcast bfloat %245 to i16, !dbg !68
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %69, i16 %252, i16 %253, i16 %254, i16 %255, i1 true) #5, !dbg !68
  %256 = bitcast bfloat %247 to i16, !dbg !68
  %257 = bitcast bfloat %249 to i16, !dbg !68
  %258 = bitcast bfloat %250 to i16, !dbg !68
  %259 = bitcast bfloat %251 to i16, !dbg !68
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %74, i16 %256, i16 %257, i16 %258, i16 %259, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %.extract = load i32, ptr addrspace(3) %68, align 16, !dbg !68
  %260 = getelementptr inbounds nuw i8, ptr addrspace(3) %68, i32 4, !dbg !68
  %.extract87 = load i32, ptr addrspace(3) %260, align 4, !dbg !68
  %261 = getelementptr inbounds nuw i8, ptr addrspace(3) %68, i32 8, !dbg !68
  %.extract89 = load i32, ptr addrspace(3) %261, align 8, !dbg !68
  %262 = getelementptr inbounds nuw i8, ptr addrspace(3) %68, i32 12, !dbg !68
  %.extract91 = load i32, ptr addrspace(3) %262, align 4, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract87, i32 %.extract89, i32 %.extract91, ptr addrspace(1) %239, i1 %59) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %263 = extractelement <2 x float> %232, i64 0, !dbg !71
  %264 = extractelement <2 x float> %232, i64 1, !dbg !73
  %265 = fsub float %264, %263, !dbg !73
  %266 = select i1 %58, float 2.000000e+00, float 0.000000e+00, !dbg !74
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !75
  %268 = tail call float @llvm.nvvm.div.full(float %238, float %266), !dbg !76
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !77
  %270 = fmul float %265, %269, !dbg !78
  %271 = fadd float %263, %270, !dbg !71
  %272 = fmul float %265, %265, !dbg !79
  %273 = fmul float %238, %272, !dbg !80
  %274 = fmul float %273, %269, !dbg !81
  %275 = fadd float %274, 0.000000e+00, !dbg !82
  %276 = fsub float %233, %271, !dbg !73
  %277 = select i1 %58, float 3.000000e+00, float 0.000000e+00, !dbg !74
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !75
  %279 = tail call float @llvm.nvvm.div.full(float %238, float %277), !dbg !76
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !77
  %281 = fmul float %280, %276, !dbg !78
  %282 = fadd float %271, %281, !dbg !71
  %283 = fmul float %276, %276, !dbg !79
  %284 = fmul float %266, %283, !dbg !80
  %285 = fmul float %280, %284, !dbg !81
  %286 = fadd float %275, %285, !dbg !82
  %287 = fsub float %234, %282, !dbg !73
  %288 = select i1 %58, float 4.000000e+00, float 0.000000e+00, !dbg !74
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !75
  %290 = tail call float @llvm.nvvm.div.full(float %238, float %288), !dbg !76
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !77
  %292 = fmul float %291, %287, !dbg !78
  %293 = fadd float %282, %292, !dbg !71
  %294 = fmul float %287, %287, !dbg !79
  %295 = fmul float %277, %294, !dbg !80
  %296 = fmul float %291, %295, !dbg !81
  %297 = fadd float %286, %296, !dbg !82
  %298 = extractelement <2 x float> %235, i64 0, !dbg !71
  %299 = extractelement <2 x float> %235, i64 1, !dbg !73
  %300 = fsub float %299, %298, !dbg !73
  %301 = fmul float %300, %269, !dbg !78
  %302 = fadd float %298, %301, !dbg !71
  %303 = fmul float %300, %300, !dbg !79
  %304 = fmul float %238, %303, !dbg !80
  %305 = fmul float %304, %269, !dbg !81
  %306 = fadd float %305, 0.000000e+00, !dbg !82
  %307 = fsub float %236, %302, !dbg !73
  %308 = fmul float %280, %307, !dbg !78
  %309 = fadd float %302, %308, !dbg !71
  %310 = fmul float %307, %307, !dbg !79
  %311 = fmul float %266, %310, !dbg !80
  %312 = fmul float %280, %311, !dbg !81
  %313 = fadd float %306, %312, !dbg !82
  %314 = fsub float %237, %309, !dbg !73
  %315 = fmul float %291, %314, !dbg !78
  %316 = fadd float %309, %315, !dbg !71
  %317 = fmul float %314, %314, !dbg !79
  %318 = fmul float %277, %317, !dbg !80
  %319 = fmul float %291, %318, !dbg !81
  %320 = fadd float %313, %319, !dbg !82
  %321 = bitcast float %293 to i32, !dbg !69
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 16, i32 31), !dbg !69
  %323 = bitcast i32 %322 to float, !dbg !69
  %324 = bitcast float %297 to i32, !dbg !69
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 16, i32 31), !dbg !69
  %326 = bitcast i32 %325 to float, !dbg !69
  %327 = bitcast float %288 to i32, !dbg !69
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 16, i32 31), !dbg !69
  %329 = bitcast i32 %328 to float, !dbg !69
  %330 = fsub float %323, %293, !dbg !73
  %331 = fadd float %288, %329, !dbg !74
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !75
  %333 = tail call float @llvm.nvvm.div.full(float %329, float %331), !dbg !76
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !77
  %335 = fmul float %334, %330, !dbg !78
  %336 = fadd float %293, %335, !dbg !71
  %337 = fadd float %297, %326, !dbg !83
  %338 = fmul float %330, %330, !dbg !79
  %339 = fmul float %288, %338, !dbg !80
  %340 = fmul float %334, %339, !dbg !81
  %341 = fadd float %337, %340, !dbg !82
  %342 = bitcast float %336 to i32, !dbg !69
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 8, i32 31), !dbg !69
  %344 = bitcast i32 %343 to float, !dbg !69
  %345 = bitcast float %341 to i32, !dbg !69
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 8, i32 31), !dbg !69
  %347 = bitcast i32 %346 to float, !dbg !69
  %348 = bitcast float %331 to i32, !dbg !69
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 8, i32 31), !dbg !69
  %350 = bitcast i32 %349 to float, !dbg !69
  %351 = fsub float %344, %336, !dbg !73
  %352 = fadd float %331, %350, !dbg !74
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !75
  %354 = tail call float @llvm.nvvm.div.full(float %350, float %352), !dbg !76
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !77
  %356 = fmul float %351, %355, !dbg !78
  %357 = fadd float %336, %356, !dbg !71
  %358 = fadd float %341, %347, !dbg !83
  %359 = fmul float %351, %351, !dbg !79
  %360 = fmul float %331, %359, !dbg !80
  %361 = fmul float %355, %360, !dbg !81
  %362 = fadd float %358, %361, !dbg !82
  %363 = bitcast float %357 to i32, !dbg !69
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !69
  %365 = bitcast i32 %364 to float, !dbg !69
  %366 = bitcast float %362 to i32, !dbg !69
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !69
  %368 = bitcast i32 %367 to float, !dbg !69
  %369 = bitcast float %352 to i32, !dbg !69
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 4, i32 31), !dbg !69
  %371 = bitcast i32 %370 to float, !dbg !69
  %372 = fsub float %365, %357, !dbg !73
  %373 = fadd float %352, %371, !dbg !74
  %374 = fcmp oeq float %373, 0.000000e+00, !dbg !75
  %375 = tail call float @llvm.nvvm.div.full(float %371, float %373), !dbg !76
  %376 = select i1 %374, float 0.000000e+00, float %375, !dbg !77
  %377 = fmul float %372, %376, !dbg !78
  %378 = fadd float %357, %377, !dbg !71
  %379 = fadd float %362, %368, !dbg !83
  %380 = fmul float %372, %372, !dbg !79
  %381 = fmul float %352, %380, !dbg !80
  %382 = fmul float %376, %381, !dbg !81
  %383 = fadd float %379, %382, !dbg !82
  %384 = bitcast float %378 to i32, !dbg !69
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !69
  %386 = bitcast i32 %385 to float, !dbg !69
  %387 = bitcast float %383 to i32, !dbg !69
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 2, i32 31), !dbg !69
  %389 = bitcast i32 %388 to float, !dbg !69
  %390 = bitcast float %373 to i32, !dbg !69
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !69
  %392 = bitcast i32 %391 to float, !dbg !69
  %393 = fsub float %386, %378, !dbg !73
  %394 = fadd float %373, %392, !dbg !74
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !75
  %396 = tail call float @llvm.nvvm.div.full(float %392, float %394), !dbg !76
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !77
  %398 = fmul float %393, %397, !dbg !78
  %399 = fadd float %378, %398, !dbg !71
  %400 = fadd float %383, %389, !dbg !83
  %401 = fmul float %393, %393, !dbg !79
  %402 = fmul float %373, %401, !dbg !80
  %403 = fmul float %397, %402, !dbg !81
  %404 = fadd float %400, %403, !dbg !82
  %405 = bitcast float %399 to i32, !dbg !69
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 1, i32 31), !dbg !69
  %407 = bitcast i32 %406 to float, !dbg !69
  %408 = bitcast float %404 to i32, !dbg !69
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 1, i32 31), !dbg !69
  %410 = bitcast i32 %409 to float, !dbg !69
  %411 = bitcast float %394 to i32, !dbg !69
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !69
  %413 = bitcast i32 %412 to float, !dbg !69
  %414 = fsub float %407, %399, !dbg !73
  %415 = fadd float %394, %413, !dbg !74
  %416 = fcmp oeq float %415, 0.000000e+00, !dbg !75
  %417 = tail call float @llvm.nvvm.div.full(float %413, float %415), !dbg !76
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !77
  %419 = fmul float %414, %418, !dbg !78
  %420 = fadd float %399, %419, !dbg !71
  %421 = fadd float %404, %410, !dbg !83
  %422 = fmul float %414, %414, !dbg !79
  %423 = fmul float %394, %422, !dbg !80
  %424 = fmul float %418, %423, !dbg !81
  %425 = fadd float %421, %424, !dbg !82
  %426 = bitcast float %316 to i32, !dbg !69
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 16, i32 31), !dbg !69
  %428 = bitcast i32 %427 to float, !dbg !69
  %429 = bitcast float %320 to i32, !dbg !69
  %430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 16, i32 31), !dbg !69
  %431 = bitcast i32 %430 to float, !dbg !69
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 16, i32 31), !dbg !69
  %433 = bitcast i32 %432 to float, !dbg !69
  %434 = fsub float %428, %316, !dbg !73
  %435 = fadd float %288, %433, !dbg !74
  %436 = fcmp oeq float %435, 0.000000e+00, !dbg !75
  %437 = tail call float @llvm.nvvm.div.full(float %433, float %435), !dbg !76
  %438 = select i1 %436, float 0.000000e+00, float %437, !dbg !77
  %439 = fmul float %434, %438, !dbg !78
  %440 = fadd float %316, %439, !dbg !71
  %441 = fadd float %320, %431, !dbg !83
  %442 = fmul float %434, %434, !dbg !79
  %443 = fmul float %288, %442, !dbg !80
  %444 = fmul float %443, %438, !dbg !81
  %445 = fadd float %441, %444, !dbg !82
  %446 = bitcast float %440 to i32, !dbg !69
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !69
  %448 = bitcast i32 %447 to float, !dbg !69
  %449 = bitcast float %445 to i32, !dbg !69
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 8, i32 31), !dbg !69
  %451 = bitcast i32 %450 to float, !dbg !69
  %452 = bitcast float %435 to i32, !dbg !69
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 8, i32 31), !dbg !69
  %454 = bitcast i32 %453 to float, !dbg !69
  %455 = fsub float %448, %440, !dbg !73
  %456 = fadd float %435, %454, !dbg !74
  %457 = fcmp oeq float %456, 0.000000e+00, !dbg !75
  %458 = tail call float @llvm.nvvm.div.full(float %454, float %456), !dbg !76
  %459 = select i1 %457, float 0.000000e+00, float %458, !dbg !77
  %460 = fmul float %455, %459, !dbg !78
  %461 = fadd float %440, %460, !dbg !71
  %462 = fadd float %445, %451, !dbg !83
  %463 = fmul float %455, %455, !dbg !79
  %464 = fmul float %435, %463, !dbg !80
  %465 = fmul float %459, %464, !dbg !81
  %466 = fadd float %462, %465, !dbg !82
  %467 = bitcast float %461 to i32, !dbg !69
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 4, i32 31), !dbg !69
  %469 = bitcast i32 %468 to float, !dbg !69
  %470 = bitcast float %466 to i32, !dbg !69
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 4, i32 31), !dbg !69
  %472 = bitcast i32 %471 to float, !dbg !69
  %473 = bitcast float %456 to i32, !dbg !69
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 4, i32 31), !dbg !69
  %475 = bitcast i32 %474 to float, !dbg !69
  %476 = fsub float %469, %461, !dbg !73
  %477 = fadd float %456, %475, !dbg !74
  %478 = fcmp oeq float %477, 0.000000e+00, !dbg !75
  %479 = tail call float @llvm.nvvm.div.full(float %475, float %477), !dbg !76
  %480 = select i1 %478, float 0.000000e+00, float %479, !dbg !77
  %481 = fmul float %476, %480, !dbg !78
  %482 = fadd float %461, %481, !dbg !71
  %483 = fadd float %466, %472, !dbg !83
  %484 = fmul float %476, %476, !dbg !79
  %485 = fmul float %456, %484, !dbg !80
  %486 = fmul float %480, %485, !dbg !81
  %487 = fadd float %483, %486, !dbg !82
  %488 = bitcast float %482 to i32, !dbg !69
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 2, i32 31), !dbg !69
  %490 = bitcast i32 %489 to float, !dbg !69
  %491 = bitcast float %487 to i32, !dbg !69
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 2, i32 31), !dbg !69
  %493 = bitcast i32 %492 to float, !dbg !69
  %494 = bitcast float %477 to i32, !dbg !69
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 2, i32 31), !dbg !69
  %496 = bitcast i32 %495 to float, !dbg !69
  %497 = fsub float %490, %482, !dbg !73
  %498 = fadd float %477, %496, !dbg !74
  %499 = fcmp oeq float %498, 0.000000e+00, !dbg !75
  %500 = tail call float @llvm.nvvm.div.full(float %496, float %498), !dbg !76
  %501 = select i1 %499, float 0.000000e+00, float %500, !dbg !77
  %502 = fmul float %497, %501, !dbg !78
  %503 = fadd float %482, %502, !dbg !71
  %504 = fadd float %487, %493, !dbg !83
  %505 = fmul float %497, %497, !dbg !79
  %506 = fmul float %477, %505, !dbg !80
  %507 = fmul float %501, %506, !dbg !81
  %508 = fadd float %504, %507, !dbg !82
  %509 = bitcast float %503 to i32, !dbg !69
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 1, i32 31), !dbg !69
  %511 = bitcast i32 %510 to float, !dbg !69
  %512 = bitcast float %508 to i32, !dbg !69
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !69
  %514 = bitcast i32 %513 to float, !dbg !69
  %515 = bitcast float %498 to i32, !dbg !69
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 1, i32 31), !dbg !69
  %517 = bitcast i32 %516 to float, !dbg !69
  %518 = fsub float %511, %503, !dbg !73
  %519 = fadd float %498, %517, !dbg !74
  %520 = fcmp oeq float %519, 0.000000e+00, !dbg !75
  %521 = tail call float @llvm.nvvm.div.full(float %517, float %519), !dbg !76
  %522 = select i1 %520, float 0.000000e+00, float %521, !dbg !77
  %523 = fmul float %518, %522, !dbg !78
  %524 = fadd float %503, %523, !dbg !71
  %525 = fadd float %508, %514, !dbg !83
  %526 = fmul float %518, %518, !dbg !79
  %527 = fmul float %498, %526, !dbg !80
  %528 = fmul float %522, %527, !dbg !81
  %529 = fadd float %525, %528, !dbg !82
  %530 = and i32 %19, 31, !dbg !69
  %531 = icmp eq i32 %21, 0, !dbg !69
  %532 = getelementptr float, ptr addrspace(3) @global_smem, i32 %530, !dbg !69
  %533 = bitcast float %420 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %533, i1 %531) #5, !dbg !69
  %534 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %530, !dbg !69
  %535 = bitcast float %425 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %534, <1 x i32> %535, i1 %531) #5, !dbg !69
  %536 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %530, !dbg !69
  %537 = bitcast float %415 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, <1 x i32> %537, i1 %531) #5, !dbg !69
  %538 = or disjoint i32 %530, 32, !dbg !69
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i32 %538, !dbg !69
  %540 = bitcast float %524 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %540, i1 %531) #5, !dbg !69
  %541 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %538, !dbg !69
  %542 = bitcast float %529 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %542, i1 %531) #5, !dbg !69
  %543 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %538, !dbg !69
  %544 = bitcast float %519 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 %531) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %545 = icmp slt i32 %18, 64, !dbg !69
  %546 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !69
  %547 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %546, i1 %545) #5, !dbg !69
  %548 = bitcast i32 %547 to float, !dbg !69
  %549 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %18, !dbg !69
  %550 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %549, i1 %545) #5, !dbg !69
  %551 = bitcast i32 %550 to float, !dbg !69
  %552 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %18, !dbg !69
  %553 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %552, i1 %545) #5, !dbg !69
  %554 = bitcast i32 %553 to float, !dbg !69
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 16, i32 31), !dbg !69
  %556 = bitcast i32 %555 to float, !dbg !69
  %557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 16, i32 31), !dbg !69
  %558 = bitcast i32 %557 to float, !dbg !69
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 16, i32 31), !dbg !69
  %560 = bitcast i32 %559 to float, !dbg !69
  %561 = fsub float %556, %548, !dbg !73
  %562 = fadd float %554, %560, !dbg !74
  %563 = fcmp oeq float %562, 0.000000e+00, !dbg !75
  %564 = tail call float @llvm.nvvm.div.full(float %560, float %562), !dbg !76
  %565 = select i1 %563, float 0.000000e+00, float %564, !dbg !77
  %566 = fmul float %561, %565, !dbg !78
  %567 = fadd float %566, %548, !dbg !71
  %568 = fadd float %551, %558, !dbg !83
  %569 = fmul float %561, %561, !dbg !79
  %570 = fmul float %569, %554, !dbg !80
  %571 = fmul float %570, %565, !dbg !81
  %572 = fadd float %568, %571, !dbg !82
  %573 = bitcast float %567 to i32, !dbg !69
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 8, i32 31), !dbg !69
  %575 = bitcast i32 %574 to float, !dbg !69
  %576 = bitcast float %572 to i32, !dbg !69
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 8, i32 31), !dbg !69
  %578 = bitcast i32 %577 to float, !dbg !69
  %579 = bitcast float %562 to i32, !dbg !69
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 8, i32 31), !dbg !69
  %581 = bitcast i32 %580 to float, !dbg !69
  %582 = fsub float %575, %567, !dbg !73
  %583 = fadd float %562, %581, !dbg !74
  %584 = fcmp oeq float %583, 0.000000e+00, !dbg !75
  %585 = tail call float @llvm.nvvm.div.full(float %581, float %583), !dbg !76
  %586 = select i1 %584, float 0.000000e+00, float %585, !dbg !77
  %587 = fmul float %582, %586, !dbg !78
  %588 = fadd float %567, %587, !dbg !71
  %589 = fadd float %572, %578, !dbg !83
  %590 = fmul float %582, %582, !dbg !79
  %591 = fmul float %562, %590, !dbg !80
  %592 = fmul float %586, %591, !dbg !81
  %593 = fadd float %589, %592, !dbg !82
  %594 = bitcast float %588 to i32, !dbg !69
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 4, i32 31), !dbg !69
  %596 = bitcast i32 %595 to float, !dbg !69
  %597 = bitcast float %593 to i32, !dbg !69
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 4, i32 31), !dbg !69
  %599 = bitcast i32 %598 to float, !dbg !69
  %600 = bitcast float %583 to i32, !dbg !69
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 4, i32 31), !dbg !69
  %602 = bitcast i32 %601 to float, !dbg !69
  %603 = fsub float %596, %588, !dbg !73
  %604 = fadd float %583, %602, !dbg !74
  %605 = fcmp oeq float %604, 0.000000e+00, !dbg !75
  %606 = tail call float @llvm.nvvm.div.full(float %602, float %604), !dbg !76
  %607 = select i1 %605, float 0.000000e+00, float %606, !dbg !77
  %608 = fmul float %603, %607, !dbg !78
  %609 = fadd float %588, %608, !dbg !71
  %610 = fadd float %593, %599, !dbg !83
  %611 = fmul float %603, %603, !dbg !79
  %612 = fmul float %583, %611, !dbg !80
  %613 = fmul float %607, %612, !dbg !81
  %614 = fadd float %610, %613, !dbg !82
  %615 = bitcast float %609 to i32, !dbg !69
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 2, i32 31), !dbg !69
  %617 = bitcast i32 %616 to float, !dbg !69
  %618 = bitcast float %614 to i32, !dbg !69
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 2, i32 31), !dbg !69
  %620 = bitcast i32 %619 to float, !dbg !69
  %621 = bitcast float %604 to i32, !dbg !69
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 2, i32 31), !dbg !69
  %623 = bitcast i32 %622 to float, !dbg !69
  %624 = fsub float %617, %609, !dbg !73
  %625 = fadd float %604, %623, !dbg !74
  %626 = fcmp oeq float %625, 0.000000e+00, !dbg !75
  %627 = tail call float @llvm.nvvm.div.full(float %623, float %625), !dbg !76
  %628 = select i1 %626, float 0.000000e+00, float %627, !dbg !77
  %629 = fmul float %624, %628, !dbg !78
  %630 = fadd float %609, %629, !dbg !71
  %631 = fadd float %614, %620, !dbg !83
  %632 = fmul float %624, %624, !dbg !79
  %633 = fmul float %604, %632, !dbg !80
  %634 = fmul float %628, %633, !dbg !81
  %635 = fadd float %631, %634, !dbg !82
  %636 = bitcast float %630 to i32, !dbg !69
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 1, i32 31), !dbg !69
  %638 = bitcast i32 %637 to float, !dbg !69
  %639 = bitcast float %635 to i32, !dbg !69
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !69
  %641 = bitcast i32 %640 to float, !dbg !69
  %642 = bitcast float %625 to i32, !dbg !69
  %643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 1, i32 31), !dbg !69
  %644 = bitcast i32 %643 to float, !dbg !69
  %645 = fsub float %638, %630, !dbg !73
  %646 = fadd float %625, %644, !dbg !74
  %647 = fcmp oeq float %646, 0.000000e+00, !dbg !75
  %648 = tail call float @llvm.nvvm.div.full(float %644, float %646), !dbg !76
  %649 = select i1 %647, float 0.000000e+00, float %648, !dbg !77
  %650 = fmul float %645, %649, !dbg !78
  %651 = fadd float %630, %650, !dbg !71
  %652 = fadd float %635, %641, !dbg !83
  %653 = fmul float %645, %645, !dbg !79
  %654 = fmul float %625, %653, !dbg !80
  %655 = fmul float %649, %654, !dbg !81
  %656 = fadd float %652, %655, !dbg !82
  %657 = and i1 %545, %531, !dbg !69
  %658 = bitcast float %651 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %658, i1 %657) #5, !dbg !69
  %659 = bitcast float %656 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %659, i1 %657) #5, !dbg !69
  %660 = bitcast float %646 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %552, <1 x i32> %660, i1 %657) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %661 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %662 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !69
  %663 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !69
  %664 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !69
  %665 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %239, i1 %59) #5, !dbg !84
  %666 = extractvalue { i32, i32, i32, i32 } %665, 0, !dbg !84
  %667 = extractvalue { i32, i32, i32, i32 } %665, 1, !dbg !84
  %668 = extractvalue { i32, i32, i32, i32 } %665, 2, !dbg !84
  %669 = extractvalue { i32, i32, i32, i32 } %665, 3, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %68, i32 %666, i32 %667, i32 %668, i32 %669, i1 true) #5, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %670 = load <4 x bfloat>, ptr addrspace(3) %69, align 8, !dbg !85
  %671 = load <4 x bfloat>, ptr addrspace(3) %74, align 8, !dbg !85
  %672 = or disjoint i32 %26, 12288, !dbg !86
  %673 = zext nneg i32 %672 to i64, !dbg !87
  %674 = getelementptr float, ptr addrspace(1) %1, i64 %673, !dbg !87
  %675 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %674, i1 %51) #5, !dbg !88
  %676 = getelementptr bfloat, ptr addrspace(1) %2, i64 %673, !dbg !89
  %677 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %676, i1 %51) #5, !dbg !90
  %678 = add nuw nsw i32 %26, 9216, !dbg !91
  %679 = zext nneg i32 %678 to i64, !dbg !92
  %680 = getelementptr float, ptr addrspace(1) %1, i64 %679, !dbg !92
  %681 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %680, i1 %51) #5, !dbg !93
  %682 = getelementptr bfloat, ptr addrspace(1) %2, i64 %679, !dbg !94
  %683 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %682, i1 %51) #5, !dbg !95
  %684 = tail call float @llvm.nvvm.div.full(float %663, float 3.072000e+03), !dbg !96
  %685 = tail call float @llvm.nvvm.div.full(float %664, float 3.072000e+03), !dbg !96
  %686 = fadd float %684, 0x3EB0C6F7A0000000, !dbg !97
  %687 = fadd float %685, 0x3EB0C6F7A0000000, !dbg !97
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i71 = icmp eq i32 %691, 0, !dbg !98
  br i1 %.not.i71, label %694, label %692, !dbg !98

692:                                              ; preds = %__nv_rsqrtf.exit
  %693 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %686), !dbg !98
  br label %__nv_rsqrtf.exit73, !dbg !98

694:                                              ; preds = %__nv_rsqrtf.exit
  %695 = tail call float @llvm.nvvm.rsqrt.approx.f(float %686), !dbg !98
  br label %__nv_rsqrtf.exit73, !dbg !98

__nv_rsqrtf.exit73:                               ; preds = %692, %694
  %.0.i72 = phi float [ %693, %692 ], [ %695, %694 ], !dbg !98
  %696 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %698 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i83 = icmp eq i32 %699, 0, !dbg !98
  br i1 %.not.i83, label %702, label %700, !dbg !98

700:                                              ; preds = %__nv_rsqrtf.exit73
  %701 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %687), !dbg !98
  br label %__nv_rsqrtf.exit85, !dbg !98

702:                                              ; preds = %__nv_rsqrtf.exit73
  %703 = tail call float @llvm.nvvm.rsqrt.approx.f(float %687), !dbg !98
  br label %__nv_rsqrtf.exit85, !dbg !98

__nv_rsqrtf.exit85:                               ; preds = %700, %702
  %.0.i84 = phi float [ %701, %700 ], [ %703, %702 ], !dbg !98
  %704 = extractelement <4 x bfloat> %671, i64 3, !dbg !85
  %705 = fpext bfloat %704 to float, !dbg !99
  %706 = fsub float %705, %662, !dbg !100
  %707 = extractelement <4 x bfloat> %671, i64 2, !dbg !85
  %708 = fpext bfloat %707 to float, !dbg !99
  %709 = fsub float %708, %662, !dbg !100
  %710 = extractelement <4 x bfloat> %671, i64 1, !dbg !85
  %711 = fpext bfloat %710 to float, !dbg !99
  %712 = fsub float %711, %662, !dbg !100
  %713 = extractelement <4 x bfloat> %671, i64 0, !dbg !85
  %714 = fpext bfloat %713 to float, !dbg !99
  %715 = fsub float %714, %662, !dbg !100
  %716 = extractelement <4 x bfloat> %670, i64 3, !dbg !85
  %717 = fpext bfloat %716 to float, !dbg !99
  %718 = fsub float %717, %661, !dbg !100
  %719 = extractelement <4 x bfloat> %670, i64 2, !dbg !85
  %720 = fpext bfloat %719 to float, !dbg !99
  %721 = fsub float %720, %661, !dbg !100
  %722 = extractelement <4 x bfloat> %670, i64 1, !dbg !85
  %723 = fpext bfloat %722 to float, !dbg !99
  %724 = fsub float %723, %661, !dbg !100
  %725 = extractelement <4 x bfloat> %670, i64 0, !dbg !85
  %726 = fpext bfloat %725 to float, !dbg !99
  %727 = fsub float %726, %661, !dbg !100
  %728 = extractvalue { i32, i32 } %683, 1, !dbg !95
  %729 = bitcast i32 %728 to <2 x bfloat>, !dbg !95
  %730 = extractelement <2 x bfloat> %729, i64 1, !dbg !95
  %731 = fpext bfloat %730 to float, !dbg !101
  %732 = extractelement <2 x bfloat> %729, i64 0, !dbg !95
  %733 = fpext bfloat %732 to float, !dbg !101
  %734 = extractvalue { i32, i32 } %683, 0, !dbg !95
  %735 = bitcast i32 %734 to <2 x bfloat>, !dbg !95
  %736 = extractelement <2 x bfloat> %735, i64 1, !dbg !95
  %737 = fpext bfloat %736 to float, !dbg !101
  %738 = extractelement <2 x bfloat> %735, i64 0, !dbg !95
  %739 = fpext bfloat %738 to float, !dbg !101
  %740 = extractvalue { i32, i32, i32, i32 } %681, 3, !dbg !93
  %741 = bitcast i32 %740 to float, !dbg !93
  %742 = extractvalue { i32, i32, i32, i32 } %681, 2, !dbg !93
  %743 = bitcast i32 %742 to float, !dbg !93
  %744 = extractvalue { i32, i32, i32, i32 } %681, 1, !dbg !93
  %745 = bitcast i32 %744 to float, !dbg !93
  %746 = extractvalue { i32, i32, i32, i32 } %681, 0, !dbg !93
  %747 = bitcast i32 %746 to float, !dbg !93
  %748 = extractvalue { i32, i32 } %677, 1, !dbg !90
  %749 = bitcast i32 %748 to <2 x bfloat>, !dbg !90
  %750 = extractelement <2 x bfloat> %749, i64 1, !dbg !90
  %751 = fpext bfloat %750 to float, !dbg !102
  %752 = extractelement <2 x bfloat> %749, i64 0, !dbg !90
  %753 = fpext bfloat %752 to float, !dbg !102
  %754 = extractvalue { i32, i32 } %677, 0, !dbg !90
  %755 = bitcast i32 %754 to <2 x bfloat>, !dbg !90
  %756 = extractelement <2 x bfloat> %755, i64 1, !dbg !90
  %757 = fpext bfloat %756 to float, !dbg !102
  %758 = extractelement <2 x bfloat> %755, i64 0, !dbg !90
  %759 = fpext bfloat %758 to float, !dbg !102
  %760 = extractvalue { i32, i32, i32, i32 } %675, 3, !dbg !88
  %761 = bitcast i32 %760 to float, !dbg !88
  %762 = extractvalue { i32, i32, i32, i32 } %675, 2, !dbg !88
  %763 = bitcast i32 %762 to float, !dbg !88
  %764 = extractvalue { i32, i32, i32, i32 } %675, 1, !dbg !88
  %765 = bitcast i32 %764 to float, !dbg !88
  %766 = extractvalue { i32, i32, i32, i32 } %675, 0, !dbg !88
  %767 = bitcast i32 %766 to float, !dbg !88
  %768 = and i32 %18, 1, !dbg !11
  %769 = or disjoint i32 %17, %768, !dbg !12
  %770 = icmp slt i32 %769, 512, !dbg !13
  %771 = fmul float %727, %.0.i72, !dbg !85
  %772 = fmul float %724, %.0.i72, !dbg !85
  %773 = fmul float %721, %.0.i72, !dbg !85
  %774 = fmul float %718, %.0.i72, !dbg !85
  %775 = fmul float %715, %.0.i84, !dbg !85
  %776 = fmul float %712, %.0.i84, !dbg !85
  %777 = fmul float %709, %.0.i84, !dbg !85
  %778 = fmul float %706, %.0.i84, !dbg !85
  %779 = fadd float %767, %759, !dbg !103
  %780 = fadd float %765, %757, !dbg !103
  %781 = fadd float %763, %753, !dbg !103
  %782 = fadd float %761, %751, !dbg !103
  %783 = fadd float %779, 1.000000e+00, !dbg !104
  %784 = fadd float %780, 1.000000e+00, !dbg !104
  %785 = fadd float %781, 1.000000e+00, !dbg !104
  %786 = fadd float %782, 1.000000e+00, !dbg !104
  %787 = fmul float %783, %771, !dbg !105
  %788 = fmul float %784, %772, !dbg !105
  %789 = fmul float %785, %773, !dbg !105
  %790 = fmul float %786, %774, !dbg !105
  %791 = fmul float %783, %775, !dbg !105
  %792 = fmul float %784, %776, !dbg !105
  %793 = fmul float %785, %777, !dbg !105
  %794 = fmul float %786, %778, !dbg !105
  %795 = fadd float %747, %739, !dbg !106
  %796 = fadd float %745, %737, !dbg !106
  %797 = fadd float %743, %733, !dbg !106
  %798 = fadd float %741, %731, !dbg !106
  %799 = fadd float %795, %787, !dbg !107
  %800 = fadd float %796, %788, !dbg !107
  %801 = fadd float %797, %789, !dbg !107
  %802 = fadd float %798, %790, !dbg !107
  %803 = fadd float %795, %791, !dbg !107
  %804 = fadd float %796, %792, !dbg !107
  %805 = fadd float %797, %793, !dbg !107
  %806 = fadd float %798, %794, !dbg !107
  %807 = select i1 %58, float %799, float 0x7FF0000000000000, !dbg !108
  %808 = select i1 %58, float %800, float 0x7FF0000000000000, !dbg !108
  %809 = select i1 %58, float %801, float 0x7FF0000000000000, !dbg !108
  %810 = select i1 %58, float %802, float 0x7FF0000000000000, !dbg !108
  %811 = select i1 %58, float %803, float 0x7FF0000000000000, !dbg !108
  %812 = select i1 %58, float %804, float 0x7FF0000000000000, !dbg !108
  %813 = select i1 %58, float %805, float 0x7FF0000000000000, !dbg !108
  %814 = select i1 %58, float %806, float 0x7FF0000000000000, !dbg !108
  %815 = select i1 %58, float %799, float 0xFFF0000000000000, !dbg !109
  %816 = select i1 %58, float %800, float 0xFFF0000000000000, !dbg !109
  %817 = select i1 %58, float %801, float 0xFFF0000000000000, !dbg !109
  %818 = select i1 %58, float %802, float 0xFFF0000000000000, !dbg !109
  %819 = select i1 %58, float %803, float 0xFFF0000000000000, !dbg !109
  %820 = select i1 %58, float %804, float 0xFFF0000000000000, !dbg !109
  %821 = select i1 %58, float %805, float 0xFFF0000000000000, !dbg !109
  %822 = select i1 %58, float %806, float 0xFFF0000000000000, !dbg !109
  %823 = getelementptr bfloat, ptr addrspace(1) %9, i64 %56, !dbg !110
  %824 = fptrunc float %799 to bfloat, !dbg !111
  %825 = fptrunc float %800 to bfloat, !dbg !111
  %826 = fptrunc float %801 to bfloat, !dbg !111
  %827 = fptrunc float %802 to bfloat, !dbg !111
  %828 = fptrunc float %803 to bfloat, !dbg !111
  %829 = fptrunc float %804 to bfloat, !dbg !111
  %830 = fptrunc float %805 to bfloat, !dbg !111
  %831 = fptrunc float %806 to bfloat, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %832 = bitcast bfloat %824 to i16, !dbg !111
  %833 = bitcast bfloat %825 to i16, !dbg !111
  %834 = bitcast bfloat %826 to i16, !dbg !111
  %835 = bitcast bfloat %827 to i16, !dbg !111
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %69, i16 %832, i16 %833, i16 %834, i16 %835, i1 true) #5, !dbg !111
  %836 = bitcast bfloat %828 to i16, !dbg !111
  %837 = bitcast bfloat %829 to i16, !dbg !111
  %838 = bitcast bfloat %830 to i16, !dbg !111
  %839 = bitcast bfloat %831 to i16, !dbg !111
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %74, i16 %836, i16 %837, i16 %838, i16 %839, i1 true) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %.extract93 = load i32, ptr addrspace(3) %68, align 16, !dbg !111
  %840 = getelementptr inbounds nuw i8, ptr addrspace(3) %68, i32 4, !dbg !111
  %.extract95 = load i32, ptr addrspace(3) %840, align 4, !dbg !111
  %841 = getelementptr inbounds nuw i8, ptr addrspace(3) %68, i32 8, !dbg !111
  %.extract97 = load i32, ptr addrspace(3) %841, align 8, !dbg !111
  %842 = getelementptr inbounds nuw i8, ptr addrspace(3) %68, i32 12, !dbg !111
  %.extract99 = load i32, ptr addrspace(3) %842, align 4, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract93, i32 %.extract95, i32 %.extract97, i32 %.extract99, ptr addrspace(1) %823, i1 %59) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %843 = fcmp olt float %807, %808, !dbg !114
  %844 = fcmp uno float %807, 0.000000e+00, !dbg !115
  %845 = or i1 %843, %844, !dbg !116
  %846 = select i1 %845, float %807, float %808, !dbg !117
  %847 = fcmp olt float %846, %809, !dbg !114
  %848 = fcmp uno float %846, 0.000000e+00, !dbg !115
  %849 = or i1 %847, %848, !dbg !116
  %850 = select i1 %849, float %846, float %809, !dbg !117
  %851 = fcmp olt float %850, %810, !dbg !114
  %852 = fcmp uno float %850, 0.000000e+00, !dbg !115
  %853 = or i1 %851, %852, !dbg !116
  %854 = select i1 %853, float %850, float %810, !dbg !117
  %855 = fcmp olt float %811, %812, !dbg !114
  %856 = fcmp uno float %811, 0.000000e+00, !dbg !115
  %857 = or i1 %855, %856, !dbg !116
  %858 = select i1 %857, float %811, float %812, !dbg !117
  %859 = fcmp olt float %858, %813, !dbg !114
  %860 = fcmp uno float %858, 0.000000e+00, !dbg !115
  %861 = or i1 %859, %860, !dbg !116
  %862 = select i1 %861, float %858, float %813, !dbg !117
  %863 = fcmp olt float %862, %814, !dbg !114
  %864 = fcmp uno float %862, 0.000000e+00, !dbg !115
  %865 = or i1 %863, %864, !dbg !116
  %866 = select i1 %865, float %862, float %814, !dbg !117
  %867 = bitcast float %854 to i32, !dbg !112
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 16, i32 31), !dbg !112
  %869 = bitcast i32 %868 to float, !dbg !112
  %870 = fcmp olt float %854, %869, !dbg !114
  %871 = fcmp uno float %854, 0.000000e+00, !dbg !115
  %872 = or i1 %871, %870, !dbg !116
  %873 = select i1 %872, float %854, float %869, !dbg !117
  %874 = bitcast float %873 to i32, !dbg !112
  %875 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %874, i32 8, i32 31), !dbg !112
  %876 = bitcast i32 %875 to float, !dbg !112
  %877 = fcmp olt float %873, %876, !dbg !114
  %878 = fcmp uno float %873, 0.000000e+00, !dbg !115
  %879 = or i1 %877, %878, !dbg !116
  %880 = select i1 %879, float %873, float %876, !dbg !117
  %881 = bitcast float %880 to i32, !dbg !112
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 4, i32 31), !dbg !112
  %883 = bitcast i32 %882 to float, !dbg !112
  %884 = fcmp olt float %880, %883, !dbg !114
  %885 = fcmp uno float %880, 0.000000e+00, !dbg !115
  %886 = or i1 %884, %885, !dbg !116
  %887 = select i1 %886, float %880, float %883, !dbg !117
  %888 = bitcast float %887 to i32, !dbg !112
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 2, i32 31), !dbg !112
  %890 = bitcast i32 %889 to float, !dbg !112
  %891 = fcmp olt float %887, %890, !dbg !114
  %892 = fcmp uno float %887, 0.000000e+00, !dbg !115
  %893 = or i1 %891, %892, !dbg !116
  %894 = select i1 %893, float %887, float %890, !dbg !117
  %895 = bitcast float %894 to i32, !dbg !112
  %896 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %895, i32 1, i32 31), !dbg !112
  %897 = bitcast i32 %896 to float, !dbg !112
  %898 = fcmp olt float %894, %897, !dbg !114
  %899 = fcmp uno float %894, 0.000000e+00, !dbg !115
  %900 = or i1 %898, %899, !dbg !116
  %901 = bitcast float %866 to i32, !dbg !112
  %902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %901, i32 16, i32 31), !dbg !112
  %903 = bitcast i32 %902 to float, !dbg !112
  %904 = fcmp olt float %866, %903, !dbg !114
  %905 = fcmp uno float %866, 0.000000e+00, !dbg !115
  %906 = or i1 %905, %904, !dbg !116
  %907 = select i1 %906, float %866, float %903, !dbg !117
  %908 = bitcast float %907 to i32, !dbg !112
  %909 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %908, i32 8, i32 31), !dbg !112
  %910 = bitcast i32 %909 to float, !dbg !112
  %911 = fcmp olt float %907, %910, !dbg !114
  %912 = fcmp uno float %907, 0.000000e+00, !dbg !115
  %913 = or i1 %911, %912, !dbg !116
  %914 = select i1 %913, float %907, float %910, !dbg !117
  %915 = bitcast float %914 to i32, !dbg !112
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 4, i32 31), !dbg !112
  %917 = bitcast i32 %916 to float, !dbg !112
  %918 = fcmp olt float %914, %917, !dbg !114
  %919 = fcmp uno float %914, 0.000000e+00, !dbg !115
  %920 = or i1 %918, %919, !dbg !116
  %921 = select i1 %920, float %914, float %917, !dbg !117
  %922 = bitcast float %921 to i32, !dbg !112
  %923 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %922, i32 2, i32 31), !dbg !112
  %924 = bitcast i32 %923 to float, !dbg !112
  %925 = fcmp olt float %921, %924, !dbg !114
  %926 = fcmp uno float %921, 0.000000e+00, !dbg !115
  %927 = or i1 %925, %926, !dbg !116
  %928 = select i1 %927, float %921, float %924, !dbg !117
  %929 = bitcast float %928 to i32, !dbg !112
  %930 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %929, i32 1, i32 31), !dbg !112
  %931 = bitcast i32 %930 to float, !dbg !112
  %932 = fcmp olt float %928, %931, !dbg !114
  %933 = fcmp uno float %928, 0.000000e+00, !dbg !115
  %934 = or i1 %932, %933, !dbg !116
  %935 = select i1 %900, i32 %895, i32 %896, !dbg !117
  %936 = insertelement <1 x i32> poison, i32 %935, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %936, i1 %531) #5, !dbg !112
  %937 = select i1 %934, i32 %929, i32 %930, !dbg !117
  %938 = insertelement <1 x i32> poison, i32 %937, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %938, i1 %531) #5, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %939 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %546, i1 %545) #5, !dbg !112
  %940 = bitcast i32 %939 to float, !dbg !112
  %941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 16, i32 31), !dbg !112
  %942 = bitcast i32 %941 to float, !dbg !112
  %943 = fcmp olt float %940, %942, !dbg !114
  %944 = fcmp uno float %940, 0.000000e+00, !dbg !115
  %945 = or i1 %944, %943, !dbg !116
  %946 = select i1 %945, float %940, float %942, !dbg !117
  %947 = bitcast float %946 to i32, !dbg !112
  %948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 8, i32 31), !dbg !112
  %949 = bitcast i32 %948 to float, !dbg !112
  %950 = fcmp olt float %946, %949, !dbg !114
  %951 = fcmp uno float %946, 0.000000e+00, !dbg !115
  %952 = or i1 %950, %951, !dbg !116
  %953 = select i1 %952, float %946, float %949, !dbg !117
  %954 = bitcast float %953 to i32, !dbg !112
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 4, i32 31), !dbg !112
  %956 = bitcast i32 %955 to float, !dbg !112
  %957 = fcmp olt float %953, %956, !dbg !114
  %958 = fcmp uno float %953, 0.000000e+00, !dbg !115
  %959 = or i1 %957, %958, !dbg !116
  %960 = select i1 %959, float %953, float %956, !dbg !117
  %961 = bitcast float %960 to i32, !dbg !112
  %962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %961, i32 2, i32 31), !dbg !112
  %963 = bitcast i32 %962 to float, !dbg !112
  %964 = fcmp olt float %960, %963, !dbg !114
  %965 = fcmp uno float %960, 0.000000e+00, !dbg !115
  %966 = or i1 %964, %965, !dbg !116
  %967 = select i1 %966, float %960, float %963, !dbg !117
  %968 = bitcast float %967 to i32, !dbg !112
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 1, i32 31), !dbg !112
  %970 = bitcast i32 %969 to float, !dbg !112
  %971 = fcmp olt float %967, %970, !dbg !114
  %972 = fcmp uno float %967, 0.000000e+00, !dbg !115
  %973 = or i1 %971, %972, !dbg !116
  %974 = select i1 %973, i32 %968, i32 %969, !dbg !117
  %975 = insertelement <1 x i32> poison, i32 %974, i64 0, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %975, i1 %657) #5, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %976 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !112
  %977 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %978 = bitcast float %976 to i32, !dbg !118
  %979 = bitcast float %977 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %978, i32 %979, i1 true) #5, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !118
  %980 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %768, !dbg !118
  %981 = load float, ptr addrspace(3) %980, align 4, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %982 = fcmp ogt float %815, %816, !dbg !121
  %983 = fcmp uno float %815, 0.000000e+00, !dbg !122
  %984 = or i1 %982, %983, !dbg !123
  %985 = select i1 %984, float %815, float %816, !dbg !124
  %986 = fcmp ogt float %985, %817, !dbg !121
  %987 = fcmp uno float %985, 0.000000e+00, !dbg !122
  %988 = or i1 %986, %987, !dbg !123
  %989 = select i1 %988, float %985, float %817, !dbg !124
  %990 = fcmp ogt float %989, %818, !dbg !121
  %991 = fcmp uno float %989, 0.000000e+00, !dbg !122
  %992 = or i1 %990, %991, !dbg !123
  %993 = select i1 %992, float %989, float %818, !dbg !124
  %994 = fcmp ogt float %819, %820, !dbg !121
  %995 = fcmp uno float %819, 0.000000e+00, !dbg !122
  %996 = or i1 %994, %995, !dbg !123
  %997 = select i1 %996, float %819, float %820, !dbg !124
  %998 = fcmp ogt float %997, %821, !dbg !121
  %999 = fcmp uno float %997, 0.000000e+00, !dbg !122
  %1000 = or i1 %998, %999, !dbg !123
  %1001 = select i1 %1000, float %997, float %821, !dbg !124
  %1002 = fcmp ogt float %1001, %822, !dbg !121
  %1003 = fcmp uno float %1001, 0.000000e+00, !dbg !122
  %1004 = or i1 %1002, %1003, !dbg !123
  %1005 = select i1 %1004, float %1001, float %822, !dbg !124
  %1006 = bitcast float %993 to i32, !dbg !119
  %1007 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1006, i32 16, i32 31), !dbg !119
  %1008 = bitcast i32 %1007 to float, !dbg !119
  %1009 = fcmp ogt float %993, %1008, !dbg !121
  %1010 = fcmp uno float %993, 0.000000e+00, !dbg !122
  %1011 = or i1 %1010, %1009, !dbg !123
  %1012 = select i1 %1011, float %993, float %1008, !dbg !124
  %1013 = bitcast float %1012 to i32, !dbg !119
  %1014 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1013, i32 8, i32 31), !dbg !119
  %1015 = bitcast i32 %1014 to float, !dbg !119
  %1016 = fcmp ogt float %1012, %1015, !dbg !121
  %1017 = fcmp uno float %1012, 0.000000e+00, !dbg !122
  %1018 = or i1 %1016, %1017, !dbg !123
  %1019 = select i1 %1018, float %1012, float %1015, !dbg !124
  %1020 = bitcast float %1019 to i32, !dbg !119
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 4, i32 31), !dbg !119
  %1022 = bitcast i32 %1021 to float, !dbg !119
  %1023 = fcmp ogt float %1019, %1022, !dbg !121
  %1024 = fcmp uno float %1019, 0.000000e+00, !dbg !122
  %1025 = or i1 %1023, %1024, !dbg !123
  %1026 = select i1 %1025, float %1019, float %1022, !dbg !124
  %1027 = bitcast float %1026 to i32, !dbg !119
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 2, i32 31), !dbg !119
  %1029 = bitcast i32 %1028 to float, !dbg !119
  %1030 = fcmp ogt float %1026, %1029, !dbg !121
  %1031 = fcmp uno float %1026, 0.000000e+00, !dbg !122
  %1032 = or i1 %1030, %1031, !dbg !123
  %1033 = select i1 %1032, float %1026, float %1029, !dbg !124
  %1034 = bitcast float %1033 to i32, !dbg !119
  %1035 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1034, i32 1, i32 31), !dbg !119
  %1036 = bitcast i32 %1035 to float, !dbg !119
  %1037 = fcmp ogt float %1033, %1036, !dbg !121
  %1038 = fcmp uno float %1033, 0.000000e+00, !dbg !122
  %1039 = or i1 %1037, %1038, !dbg !123
  %1040 = bitcast float %1005 to i32, !dbg !119
  %1041 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1040, i32 16, i32 31), !dbg !119
  %1042 = bitcast i32 %1041 to float, !dbg !119
  %1043 = fcmp ogt float %1005, %1042, !dbg !121
  %1044 = fcmp uno float %1005, 0.000000e+00, !dbg !122
  %1045 = or i1 %1044, %1043, !dbg !123
  %1046 = select i1 %1045, float %1005, float %1042, !dbg !124
  %1047 = bitcast float %1046 to i32, !dbg !119
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1047, i32 8, i32 31), !dbg !119
  %1049 = bitcast i32 %1048 to float, !dbg !119
  %1050 = fcmp ogt float %1046, %1049, !dbg !121
  %1051 = fcmp uno float %1046, 0.000000e+00, !dbg !122
  %1052 = or i1 %1050, %1051, !dbg !123
  %1053 = select i1 %1052, float %1046, float %1049, !dbg !124
  %1054 = bitcast float %1053 to i32, !dbg !119
  %1055 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1054, i32 4, i32 31), !dbg !119
  %1056 = bitcast i32 %1055 to float, !dbg !119
  %1057 = fcmp ogt float %1053, %1056, !dbg !121
  %1058 = fcmp uno float %1053, 0.000000e+00, !dbg !122
  %1059 = or i1 %1057, %1058, !dbg !123
  %1060 = select i1 %1059, float %1053, float %1056, !dbg !124
  %1061 = bitcast float %1060 to i32, !dbg !119
  %1062 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1061, i32 2, i32 31), !dbg !119
  %1063 = bitcast i32 %1062 to float, !dbg !119
  %1064 = fcmp ogt float %1060, %1063, !dbg !121
  %1065 = fcmp uno float %1060, 0.000000e+00, !dbg !122
  %1066 = or i1 %1064, %1065, !dbg !123
  %1067 = select i1 %1066, float %1060, float %1063, !dbg !124
  %1068 = bitcast float %1067 to i32, !dbg !119
  %1069 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1068, i32 1, i32 31), !dbg !119
  %1070 = bitcast i32 %1069 to float, !dbg !119
  %1071 = fcmp ogt float %1067, %1070, !dbg !121
  %1072 = fcmp uno float %1067, 0.000000e+00, !dbg !122
  %1073 = or i1 %1071, %1072, !dbg !123
  %1074 = select i1 %1039, i32 %1034, i32 %1035, !dbg !124
  %1075 = insertelement <1 x i32> poison, i32 %1074, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %1075, i1 %531) #5, !dbg !119
  %1076 = select i1 %1073, i32 %1068, i32 %1069, !dbg !124
  %1077 = insertelement <1 x i32> poison, i32 %1076, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %1077, i1 %531) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %1078 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %546, i1 %545) #5, !dbg !119
  %1079 = bitcast i32 %1078 to float, !dbg !119
  %1080 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1078, i32 16, i32 31), !dbg !119
  %1081 = bitcast i32 %1080 to float, !dbg !119
  %1082 = fcmp ogt float %1079, %1081, !dbg !121
  %1083 = fcmp uno float %1079, 0.000000e+00, !dbg !122
  %1084 = or i1 %1083, %1082, !dbg !123
  %1085 = select i1 %1084, float %1079, float %1081, !dbg !124
  %1086 = bitcast float %1085 to i32, !dbg !119
  %1087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1086, i32 8, i32 31), !dbg !119
  %1088 = bitcast i32 %1087 to float, !dbg !119
  %1089 = fcmp ogt float %1085, %1088, !dbg !121
  %1090 = fcmp uno float %1085, 0.000000e+00, !dbg !122
  %1091 = or i1 %1089, %1090, !dbg !123
  %1092 = select i1 %1091, float %1085, float %1088, !dbg !124
  %1093 = bitcast float %1092 to i32, !dbg !119
  %1094 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1093, i32 4, i32 31), !dbg !119
  %1095 = bitcast i32 %1094 to float, !dbg !119
  %1096 = fcmp ogt float %1092, %1095, !dbg !121
  %1097 = fcmp uno float %1092, 0.000000e+00, !dbg !122
  %1098 = or i1 %1096, %1097, !dbg !123
  %1099 = select i1 %1098, float %1092, float %1095, !dbg !124
  %1100 = bitcast float %1099 to i32, !dbg !119
  %1101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1100, i32 2, i32 31), !dbg !119
  %1102 = bitcast i32 %1101 to float, !dbg !119
  %1103 = fcmp ogt float %1099, %1102, !dbg !121
  %1104 = fcmp uno float %1099, 0.000000e+00, !dbg !122
  %1105 = or i1 %1103, %1104, !dbg !123
  %1106 = select i1 %1105, float %1099, float %1102, !dbg !124
  %1107 = bitcast float %1106 to i32, !dbg !119
  %1108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1107, i32 1, i32 31), !dbg !119
  %1109 = bitcast i32 %1108 to float, !dbg !119
  %1110 = fcmp ogt float %1106, %1109, !dbg !121
  %1111 = fcmp uno float %1106, 0.000000e+00, !dbg !122
  %1112 = or i1 %1110, %1111, !dbg !123
  %1113 = select i1 %1112, i32 %1107, i32 %1108, !dbg !124
  %1114 = insertelement <1 x i32> poison, i32 %1113, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %1114, i1 %657) #5, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %1115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !119
  %1116 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %1117 = bitcast float %1115 to i32, !dbg !125
  %1118 = bitcast float %1116 to i32, !dbg !125
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1117, i32 %1118, i1 true) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %1119 = load float, ptr addrspace(3) %980, align 4, !dbg !125
  %1120 = sext i32 %769 to i64, !dbg !126
  %1121 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1120, !dbg !126
  %1122 = fptrunc float %981 to bfloat, !dbg !118
  %1123 = and i32 %18, 1022, !dbg !118
  %1124 = icmp eq i32 %1123, 0, !dbg !118
  %1125 = bitcast bfloat %1122 to i16, !dbg !118
  %1126 = and i1 %1124, %770, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1125, ptr addrspace(1) %1121, i1 %1126) #5, !dbg !118
  %1127 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1120, !dbg !127
  %1128 = fptrunc float %1119 to bfloat, !dbg !125
  %1129 = bitcast bfloat %1128 to i16, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1129, ptr addrspace(1) %1127, i1 %1126) #5, !dbg !125
  %1130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %823, i1 %59) #5, !dbg !128
  %1131 = extractvalue { i32, i32, i32, i32 } %1130, 0, !dbg !128
  %1132 = bitcast i32 %1131 to <2 x bfloat>, !dbg !128
  %1133 = extractvalue { i32, i32, i32, i32 } %1130, 1, !dbg !128
  %1134 = bitcast i32 %1133 to <2 x bfloat>, !dbg !128
  %1135 = extractvalue { i32, i32, i32, i32 } %1130, 2, !dbg !128
  %1136 = bitcast i32 %1135 to <2 x bfloat>, !dbg !128
  %1137 = extractvalue { i32, i32, i32, i32 } %1130, 3, !dbg !128
  %1138 = bitcast i32 %1137 to <2 x bfloat>, !dbg !128
  %1139 = extractelement <2 x bfloat> %1132, i64 0, !dbg !128
  %1140 = extractelement <2 x bfloat> %1132, i64 1, !dbg !128
  %1141 = extractelement <2 x bfloat> %1134, i64 0, !dbg !128
  %1142 = extractelement <2 x bfloat> %1134, i64 1, !dbg !128
  %1143 = extractelement <2 x bfloat> %1136, i64 0, !dbg !128
  %1144 = extractelement <2 x bfloat> %1136, i64 1, !dbg !128
  %1145 = extractelement <2 x bfloat> %1138, i64 0, !dbg !128
  %1146 = extractelement <2 x bfloat> %1138, i64 1, !dbg !128
  %1147 = fpext bfloat %1139 to float, !dbg !129
  %1148 = fpext bfloat %1140 to float, !dbg !129
  %1149 = fpext bfloat %1141 to float, !dbg !129
  %1150 = fpext bfloat %1142 to float, !dbg !129
  %1151 = fpext bfloat %1143 to float, !dbg !129
  %1152 = fpext bfloat %1144 to float, !dbg !129
  %1153 = fpext bfloat %1145 to float, !dbg !129
  %1154 = fpext bfloat %1146 to float, !dbg !129
  %.inv61 = fcmp oge float %976, 0.000000e+00, !dbg !130
  %1155 = select i1 %.inv61, float 0.000000e+00, float %976, !dbg !130
  %.inv62 = fcmp oge float %977, 0.000000e+00, !dbg !130
  %1156 = select i1 %.inv62, float 0.000000e+00, float %977, !dbg !130
  %1157 = fsub float 0.000000e+00, %1155, !dbg !132
  %1158 = fsub float 0.000000e+00, %1156, !dbg !132
  %.inv63 = fcmp ole float %1115, 0.000000e+00, !dbg !133
  %1159 = select i1 %.inv63, float 0.000000e+00, float %1115, !dbg !133
  %.inv64 = fcmp ole float %1116, 0.000000e+00, !dbg !133
  %1160 = select i1 %.inv64, float 0.000000e+00, float %1116, !dbg !133
  %1161 = fcmp ogt float %1157, %1159, !dbg !135
  %1162 = fcmp ogt float %1158, %1160, !dbg !135
  %1163 = fcmp uno float %1157, 0.000000e+00, !dbg !137
  %1164 = fcmp uno float %1158, 0.000000e+00, !dbg !137
  %1165 = or i1 %1163, %1161, !dbg !138
  %1166 = or i1 %1164, %1162, !dbg !138
  %1167 = select i1 %1165, float %1157, float %1159, !dbg !139
  %1168 = select i1 %1166, float %1158, float %1160, !dbg !139
  %1169 = fmul float %1167, 0x3F80204080000000, !dbg !140
  %1170 = fmul float %1168, 0x3F80204080000000, !dbg !140
  %1171 = fcmp ogt float %1169, 0x3EE4F8B580000000, !dbg !141
  %1172 = fcmp ogt float %1170, 0x3EE4F8B580000000, !dbg !141
  %1173 = fcmp uno float %1169, 0.000000e+00, !dbg !143
  %1174 = fcmp uno float %1170, 0.000000e+00, !dbg !143
  %1175 = or i1 %1171, %1173, !dbg !144
  %1176 = or i1 %1172, %1174, !dbg !144
  %1177 = select i1 %1175, float %1169, float 0x3EE4F8B580000000, !dbg !145
  %1178 = select i1 %1176, float %1170, float 0x3EE4F8B580000000, !dbg !145
  %1179 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1177), !dbg !146
  %1180 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1178), !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1181 = bitcast float %1179 to <1 x i32>, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1181, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1181, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1181, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1181, i1 true) #5, !dbg !147
  %1182 = bitcast float %1180 to <1 x i32>, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1182, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1182, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1182, i1 true) #5, !dbg !147
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1182, i1 true) #5, !dbg !147
  tail call void @llvm.nvvm.barrier0(), !dbg !147
  %1183 = lshr exact i32 %20, 6, !dbg !147
  %1184 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1183, !dbg !147
  %1185 = load float, ptr addrspace(3) %1184, align 8, !dbg !147
  %1186 = fmul float %1185, %1147, !dbg !147
  %1187 = fmul float %1185, %1148, !dbg !147
  %1188 = fmul float %1185, %1149, !dbg !147
  %1189 = fmul float %1185, %1150, !dbg !147
  %1190 = fmul float %1185, %1151, !dbg !147
  %1191 = fmul float %1185, %1152, !dbg !147
  %1192 = fmul float %1185, %1153, !dbg !147
  %1193 = fmul float %1185, %1154, !dbg !147
  %1194 = tail call float @llvm.nvvm.round.f(float %1186) #5, !dbg !148
  %1195 = tail call float @llvm.nvvm.round.f(float %1187) #5, !dbg !148
  %1196 = tail call float @llvm.nvvm.round.f(float %1188) #5, !dbg !148
  %1197 = tail call float @llvm.nvvm.round.f(float %1189) #5, !dbg !148
  %1198 = tail call float @llvm.nvvm.round.f(float %1190) #5, !dbg !148
  %1199 = tail call float @llvm.nvvm.round.f(float %1191) #5, !dbg !148
  %1200 = tail call float @llvm.nvvm.round.f(float %1192) #5, !dbg !148
  %1201 = tail call float @llvm.nvvm.round.f(float %1193) #5, !dbg !148
  %1202 = insertelement <4 x float> poison, float %1194, i64 0, !dbg !149
  %1203 = insertelement <4 x float> %1202, float %1195, i64 1, !dbg !149
  %1204 = insertelement <4 x float> %1203, float %1196, i64 2, !dbg !149
  %1205 = insertelement <4 x float> %1204, float %1197, i64 3, !dbg !149
  %1206 = fcmp ogt <4 x float> %1205, splat (float -1.270000e+02), !dbg !149
  %1207 = fcmp uno <4 x float> %1205, zeroinitializer, !dbg !151
  %1208 = or <4 x i1> %1206, %1207, !dbg !152
  %1209 = select <4 x i1> %1208, <4 x float> %1205, <4 x float> splat (float -1.270000e+02), !dbg !153
  %1210 = fcmp olt <4 x float> %1209, splat (float 1.270000e+02), !dbg !154
  %1211 = fcmp uno <4 x float> %1209, zeroinitializer, !dbg !156
  %1212 = or <4 x i1> %1210, %1211, !dbg !157
  %1213 = fptosi <4 x float> %1209 to <4 x i8>, !dbg !158
  %1214 = select <4 x i1> %1212, <4 x i8> %1213, <4 x i8> splat (i8 127), !dbg !159
  %1215 = insertelement <4 x float> poison, float %1198, i64 0, !dbg !149
  %1216 = insertelement <4 x float> %1215, float %1199, i64 1, !dbg !149
  %1217 = insertelement <4 x float> %1216, float %1200, i64 2, !dbg !149
  %1218 = insertelement <4 x float> %1217, float %1201, i64 3, !dbg !149
  %1219 = fcmp ogt <4 x float> %1218, splat (float -1.270000e+02), !dbg !149
  %1220 = fcmp uno <4 x float> %1218, zeroinitializer, !dbg !151
  %1221 = or <4 x i1> %1219, %1220, !dbg !152
  %1222 = select <4 x i1> %1221, <4 x float> %1218, <4 x float> splat (float -1.270000e+02), !dbg !153
  %1223 = fcmp olt <4 x float> %1222, splat (float 1.270000e+02), !dbg !154
  %1224 = fcmp uno <4 x float> %1222, zeroinitializer, !dbg !156
  %1225 = or <4 x i1> %1223, %1224, !dbg !157
  %1226 = fptosi <4 x float> %1222 to <4 x i8>, !dbg !158
  %1227 = select <4 x i1> %1225, <4 x i8> %1226, <4 x i8> splat (i8 127), !dbg !159
  %1228 = getelementptr i8, ptr addrspace(1) %12, i64 %56, !dbg !160
  %1229 = bitcast <4 x i8> %1214 to i32, !dbg !161
  %1230 = bitcast <4 x i8> %1227 to i32, !dbg !161
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1229, i32 %1230, ptr addrspace(1) %1228, i1 %59) #5, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 36, column: 29, scope: !6)
!20 = !DILocation(line: 40, column: 46, scope: !6)
!21 = !DILocation(line: 40, column: 41, scope: !6)
!22 = !DILocation(line: 40, column: 34, scope: !6)
!23 = !DILocation(line: 40, column: 59, scope: !6)
!24 = !DILocation(line: 40, column: 51, scope: !6)
!25 = !DILocation(line: 40, column: 113, scope: !6)
!26 = !DILocation(line: 41, column: 41, scope: !6)
!27 = !DILocation(line: 41, column: 34, scope: !6)
!28 = !DILocation(line: 42, column: 34, scope: !6)
!29 = !DILocation(line: 43, column: 34, scope: !6)
!30 = !DILocation(line: 44, column: 35, scope: !6)
!31 = !DILocation(line: 45, column: 35, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 50, column: 44, scope: !6)
!36 = !DILocation(line: 51, column: 17, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 52, column: 46, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 53, column: 46, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 55, column: 24, scope: !6)
!45 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !46)
!46 = !DILocation(line: 58, column: 46, scope: !6)
!47 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !46)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !46)
!50 = !DILocation(line: 60, column: 23, scope: !6)
!51 = !DILocation(line: 70, column: 64, scope: !6)
!52 = !DILocation(line: 41, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 43, column: 51, scope: !6)
!56 = !DILocation(line: 44, column: 42, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 42, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 72, column: 68, scope: !6)
!67 = !DILocation(line: 73, column: 29, scope: !6)
!68 = !DILocation(line: 73, column: 53, scope: !6)
!69 = !DILocation(line: 229, column: 46, scope: !33, inlinedAt: !70)
!70 = !DILocation(line: 74, column: 85, scope: !6)
!71 = !DILocation(line: 221, column: 17, scope: !72, inlinedAt: !70)
!72 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!73 = !DILocation(line: 217, column: 21, scope: !72, inlinedAt: !70)
!74 = !DILocation(line: 218, column: 28, scope: !72, inlinedAt: !70)
!75 = !DILocation(line: 219, column: 39, scope: !72, inlinedAt: !70)
!76 = !DILocation(line: 219, column: 60, scope: !72, inlinedAt: !70)
!77 = !DILocation(line: 219, column: 49, scope: !72, inlinedAt: !70)
!78 = !DILocation(line: 221, column: 25, scope: !72, inlinedAt: !70)
!79 = !DILocation(line: 222, column: 30, scope: !72, inlinedAt: !70)
!80 = !DILocation(line: 222, column: 38, scope: !72, inlinedAt: !70)
!81 = !DILocation(line: 222, column: 49, scope: !72, inlinedAt: !70)
!82 = !DILocation(line: 222, column: 22, scope: !72, inlinedAt: !70)
!83 = !DILocation(line: 222, column: 15, scope: !72, inlinedAt: !70)
!84 = !DILocation(line: 86, column: 53, scope: !6)
!85 = !DILocation(line: 98, column: 24, scope: !6)
!86 = !DILocation(line: 87, column: 43, scope: !6)
!87 = !DILocation(line: 87, column: 35, scope: !6)
!88 = !DILocation(line: 87, column: 50, scope: !6)
!89 = !DILocation(line: 88, column: 35, scope: !6)
!90 = !DILocation(line: 88, column: 50, scope: !6)
!91 = !DILocation(line: 89, column: 42, scope: !6)
!92 = !DILocation(line: 89, column: 35, scope: !6)
!93 = !DILocation(line: 89, column: 49, scope: !6)
!94 = !DILocation(line: 90, column: 35, scope: !6)
!95 = !DILocation(line: 90, column: 49, scope: !6)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 86, column: 115, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 90, column: 102, scope: !6)
!102 = !DILocation(line: 88, column: 103, scope: !6)
!103 = !DILocation(line: 101, column: 24, scope: !6)
!104 = !DILocation(line: 103, column: 24, scope: !6)
!105 = !DILocation(line: 104, column: 24, scope: !6)
!106 = !DILocation(line: 106, column: 24, scope: !6)
!107 = !DILocation(line: 107, column: 24, scope: !6)
!108 = !DILocation(line: 110, column: 50, scope: !6)
!109 = !DILocation(line: 112, column: 50, scope: !6)
!110 = !DILocation(line: 113, column: 29, scope: !6)
!111 = !DILocation(line: 113, column: 53, scope: !6)
!112 = !DILocation(line: 110, column: 29, scope: !33, inlinedAt: !113)
!113 = !DILocation(line: 114, column: 40, scope: !6)
!114 = !DILocation(line: 94, column: 15, scope: !72, inlinedAt: !113)
!115 = !DILocation(line: 96, column: 21, scope: !72, inlinedAt: !113)
!116 = !DILocation(line: 96, column: 16, scope: !72, inlinedAt: !113)
!117 = !DILocation(line: 97, column: 29, scope: !72, inlinedAt: !113)
!118 = !DILocation(line: 116, column: 37, scope: !6)
!119 = !DILocation(line: 115, column: 29, scope: !33, inlinedAt: !120)
!120 = !DILocation(line: 115, column: 40, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !72, inlinedAt: !120)
!122 = !DILocation(line: 104, column: 21, scope: !72, inlinedAt: !120)
!123 = !DILocation(line: 104, column: 16, scope: !72, inlinedAt: !120)
!124 = !DILocation(line: 105, column: 29, scope: !72, inlinedAt: !120)
!125 = !DILocation(line: 117, column: 37, scope: !6)
!126 = !DILocation(line: 116, column: 25, scope: !6)
!127 = !DILocation(line: 117, column: 25, scope: !6)
!128 = !DILocation(line: 124, column: 53, scope: !6)
!129 = !DILocation(line: 124, column: 115, scope: !6)
!130 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !131)
!131 = !DILocation(line: 126, column: 46, scope: !6)
!132 = !DILocation(line: 127, column: 17, scope: !6)
!133 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !134)
!134 = !DILocation(line: 128, column: 46, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !136)
!136 = !DILocation(line: 129, column: 46, scope: !6)
!137 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !136)
!139 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !136)
!140 = !DILocation(line: 131, column: 24, scope: !6)
!141 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !142)
!142 = !DILocation(line: 134, column: 46, scope: !6)
!143 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !142)
!145 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !142)
!146 = !DILocation(line: 137, column: 25, scope: !6)
!147 = !DILocation(line: 140, column: 24, scope: !6)
!148 = !DILocation(line: 141, column: 36, scope: !6)
!149 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !150)
!150 = !DILocation(line: 144, column: 46, scope: !6)
!151 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !150)
!152 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !150)
!153 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !150)
!154 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !155)
!155 = !DILocation(line: 146, column: 46, scope: !6)
!156 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !155)
!157 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !155)
!158 = !DILocation(line: 148, column: 25, scope: !6)
!159 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !155)
!160 = !DILocation(line: 149, column: 29, scope: !6)
!161 = !DILocation(line: 149, column: 53, scope: !6)
!162 = !DILocation(line: 118, column: 4, scope: !6)
