; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 2, !dbg !11
  %13 = and i32 %12, 1020, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = or disjoint i32 %14, 1, !dbg !12
  %16 = or disjoint i32 %14, 2, !dbg !12
  %17 = or disjoint i32 %14, 3, !dbg !12
  %18 = srem i32 %14, 526336, !dbg !13
  %19 = sdiv i32 %14, 128, !dbg !14
  %20 = mul i32 %19, 128, !dbg !15
  %.decomposed = sub i32 %14, %20, !dbg !15
  %21 = srem i32 %15, 128, !dbg !15
  %22 = srem i32 %16, 128, !dbg !15
  %23 = srem i32 %17, 128, !dbg !15
  %24 = sext i32 %14 to i64, !dbg !16
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %25) #1, !dbg !17
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !17
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !17
  %31 = sext i32 %18 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %32) #1, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %38) #1, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !21
  %44 = getelementptr bfloat, ptr addrspace(1) %3, i64 %24, !dbg !22
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l"(ptr addrspace(1) %44) #1, !dbg !23
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !23
  %47 = bitcast i32 %46 to <2 x bfloat>, !dbg !23
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !23
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !23
  %50 = srem i32 %15, 2, !dbg !24
  %51 = srem i32 %17, 2, !dbg !24
  %52 = icmp slt i32 %50, 1, !dbg !25
  %53 = icmp slt i32 %51, 1, !dbg !25
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !26
  %54 = ashr exact i8 %.lhs.trunc, 1, !dbg !26
  %.sext = sext i8 %54 to i32, !dbg !26
  %.lhs.trunc1 = trunc nsw i32 %21 to i8, !dbg !26
  %55 = sdiv i8 %.lhs.trunc1, 2, !dbg !26
  %.sext2 = sext i8 %55 to i32, !dbg !26
  %.lhs.trunc3 = trunc nsw i32 %22 to i8, !dbg !26
  %56 = ashr exact i8 %.lhs.trunc3, 1, !dbg !26
  %.sext4 = sext i8 %56 to i32, !dbg !26
  %.lhs.trunc5 = trunc nsw i32 %23 to i8, !dbg !26
  %57 = sdiv i8 %.lhs.trunc5, 2, !dbg !26
  %.sext6 = sext i8 %57 to i32, !dbg !26
  %58 = shl nsw i32 %.sext, 1, !dbg !27
  %59 = shl nsw i32 %.sext2, 1, !dbg !27
  %60 = shl nsw i32 %.sext4, 1, !dbg !27
  %61 = shl nsw i32 %.sext6, 1, !dbg !27
  %62 = shl nsw i32 %19, 7, !dbg !28
  %63 = or disjoint i32 %62, 1, !dbg !29
  %64 = add i32 %63, %58, !dbg !30
  %65 = add i32 %63, %59, !dbg !30
  %66 = add i32 %63, %60, !dbg !30
  %67 = add i32 %63, %61, !dbg !30
  %68 = sext i32 %64 to i64, !dbg !31
  %69 = getelementptr bfloat, ptr addrspace(1) %0, i64 %68, !dbg !31
  %70 = sext i32 %65 to i64, !dbg !31
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !31
  %72 = sext i32 %66 to i64, !dbg !31
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !31
  %74 = sext i32 %67 to i64, !dbg !31
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !31
  %76 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %69, i1 true) #1, !dbg !32
  %77 = bitcast i16 %76 to bfloat, !dbg !32
  %78 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %71, i1 %52) #1, !dbg !32
  %79 = bitcast i16 %78 to bfloat, !dbg !32
  %80 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %73, i1 true) #1, !dbg !32
  %81 = bitcast i16 %80 to bfloat, !dbg !32
  %82 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %75, i1 %53) #1, !dbg !32
  %83 = bitcast i16 %82 to bfloat, !dbg !32
  %84 = fpext bfloat %77 to float, !dbg !33
  %85 = fpext bfloat %79 to float, !dbg !33
  %86 = fpext bfloat %81 to float, !dbg !33
  %87 = fpext bfloat %83 to float, !dbg !33
  %88 = fsub float 0.000000e+00, %84, !dbg !34
  %89 = fsub float 0.000000e+00, %85, !dbg !34
  %90 = fsub float 0.000000e+00, %86, !dbg !34
  %91 = fsub float 0.000000e+00, %87, !dbg !34
  %92 = icmp sgt i32 %50, 0, !dbg !35
  %93 = icmp sgt i32 %51, 0, !dbg !35
  %94 = add i32 %58, %62, !dbg !36
  %95 = add i32 %59, %62, !dbg !36
  %96 = add i32 %60, %62, !dbg !36
  %97 = add i32 %61, %62, !dbg !36
  %98 = sext i32 %94 to i64, !dbg !37
  %99 = getelementptr bfloat, ptr addrspace(1) %0, i64 %98, !dbg !37
  %100 = sext i32 %95 to i64, !dbg !37
  %101 = getelementptr bfloat, ptr addrspace(1) %0, i64 %100, !dbg !37
  %102 = sext i32 %96 to i64, !dbg !37
  %103 = getelementptr bfloat, ptr addrspace(1) %0, i64 %102, !dbg !37
  %104 = sext i32 %97 to i64, !dbg !37
  %105 = getelementptr bfloat, ptr addrspace(1) %0, i64 %104, !dbg !37
  %106 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 false) #1, !dbg !38
  %107 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 %92) #1, !dbg !38
  %108 = bitcast i16 %107 to bfloat, !dbg !38
  %109 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %103, i1 false) #1, !dbg !38
  %110 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %105, i1 %93) #1, !dbg !38
  %111 = bitcast i16 %110 to bfloat, !dbg !38
  %112 = fpext bfloat %108 to float, !dbg !39
  %113 = fpext bfloat %111 to float, !dbg !39
  %114 = select i1 %52, float %89, float %112, !dbg !40
  %115 = select i1 %53, float %91, float %113, !dbg !40
  %116 = getelementptr bfloat, ptr addrspace(1) %3, i64 %68, !dbg !41
  %117 = getelementptr bfloat, ptr addrspace(1) %3, i64 %70, !dbg !41
  %118 = getelementptr bfloat, ptr addrspace(1) %3, i64 %72, !dbg !41
  %119 = getelementptr bfloat, ptr addrspace(1) %3, i64 %74, !dbg !41
  %120 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %116, i1 true) #1, !dbg !42
  %121 = bitcast i16 %120 to bfloat, !dbg !42
  %122 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %117, i1 %52) #1, !dbg !42
  %123 = bitcast i16 %122 to bfloat, !dbg !42
  %124 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %118, i1 true) #1, !dbg !42
  %125 = bitcast i16 %124 to bfloat, !dbg !42
  %126 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %119, i1 %53) #1, !dbg !42
  %127 = bitcast i16 %126 to bfloat, !dbg !42
  %128 = fpext bfloat %121 to float, !dbg !43
  %129 = fpext bfloat %123 to float, !dbg !43
  %130 = fpext bfloat %125 to float, !dbg !43
  %131 = fpext bfloat %127 to float, !dbg !43
  %132 = fsub float 0.000000e+00, %128, !dbg !44
  %133 = fsub float 0.000000e+00, %129, !dbg !44
  %134 = fsub float 0.000000e+00, %130, !dbg !44
  %135 = fsub float 0.000000e+00, %131, !dbg !44
  %136 = getelementptr bfloat, ptr addrspace(1) %3, i64 %98, !dbg !45
  %137 = getelementptr bfloat, ptr addrspace(1) %3, i64 %100, !dbg !45
  %138 = getelementptr bfloat, ptr addrspace(1) %3, i64 %102, !dbg !45
  %139 = getelementptr bfloat, ptr addrspace(1) %3, i64 %104, !dbg !45
  %140 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %136, i1 false) #1, !dbg !46
  %141 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %137, i1 %92) #1, !dbg !46
  %142 = bitcast i16 %141 to bfloat, !dbg !46
  %143 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %138, i1 false) #1, !dbg !46
  %144 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %139, i1 %93) #1, !dbg !46
  %145 = bitcast i16 %144 to bfloat, !dbg !46
  %146 = fpext bfloat %142 to float, !dbg !47
  %147 = fpext bfloat %145 to float, !dbg !47
  %148 = select i1 %52, float %133, float %146, !dbg !40
  %149 = select i1 %53, float %135, float %147, !dbg !40
  %150 = getelementptr bfloat, ptr addrspace(1) %4, i64 %24, !dbg !48
  %151 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !49
  %152 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %153 = insertelement <2 x i32> %152, i32 %35, i64 1, !dbg !19
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !19
  %155 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !21
  %156 = insertelement <2 x i32> %155, i32 %41, i64 1, !dbg !21
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !21
  %158 = fmul <2 x float> %154, %151, !dbg !50
  %159 = insertelement <2 x float> poison, float %88, i64 0, !dbg !51
  %160 = insertelement <2 x float> %159, float %114, i64 1, !dbg !51
  %161 = fmul <2 x float> %160, %157, !dbg !51
  %162 = fadd <2 x float> %158, %161, !dbg !52
  %163 = fptrunc <2 x float> %162 to <2 x bfloat>, !dbg !53
  %164 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !49
  %165 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !19
  %166 = insertelement <2 x i32> %165, i32 %37, i64 1, !dbg !19
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !19
  %168 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !21
  %169 = insertelement <2 x i32> %168, i32 %43, i64 1, !dbg !21
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !21
  %171 = fmul <2 x float> %167, %164, !dbg !50
  %172 = insertelement <2 x float> poison, float %90, i64 0, !dbg !51
  %173 = insertelement <2 x float> %172, float %115, i64 1, !dbg !51
  %174 = fmul <2 x float> %173, %170, !dbg !51
  %175 = fadd <2 x float> %171, %174, !dbg !52
  %176 = fptrunc <2 x float> %175 to <2 x bfloat>, !dbg !53
  %177 = bitcast <2 x bfloat> %163 to i32, !dbg !53
  %178 = bitcast <2 x bfloat> %176 to i32, !dbg !53
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %177, i32 %178, ptr addrspace(1) %150) #1, !dbg !53
  %179 = getelementptr bfloat, ptr addrspace(1) %5, i64 %24, !dbg !54
  %180 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !55
  %181 = fmul <2 x float> %154, %180, !dbg !56
  %182 = insertelement <2 x float> poison, float %132, i64 0, !dbg !57
  %183 = insertelement <2 x float> %182, float %148, i64 1, !dbg !57
  %184 = fmul <2 x float> %183, %157, !dbg !57
  %185 = fadd <2 x float> %181, %184, !dbg !58
  %186 = fptrunc <2 x float> %185 to <2 x bfloat>, !dbg !59
  %187 = fpext <2 x bfloat> %49 to <2 x float>, !dbg !55
  %188 = fmul <2 x float> %167, %187, !dbg !56
  %189 = insertelement <2 x float> poison, float %134, i64 0, !dbg !57
  %190 = insertelement <2 x float> %189, float %149, i64 1, !dbg !57
  %191 = fmul <2 x float> %190, %170, !dbg !57
  %192 = fadd <2 x float> %188, %191, !dbg !58
  %193 = fptrunc <2 x float> %192 to <2 x bfloat>, !dbg !59
  %194 = bitcast <2 x bfloat> %186 to i32, !dbg !59
  %195 = bitcast <2 x bfloat> %193 to i32, !dbg !59
  tail call void asm sideeffect "st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l"(i32 %194, i32 %195, ptr addrspace(1) %179) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqi2ajouraonbwbthagtwszunenxe2kxpx5ttht5ojcvmgyxwkf.py", directory: "/tmp/torchinductor_root/qq")
!4 = !{ptr @triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8", linkageName: "triton_poi_fused__scaled_dot_product_flash_attention__to_copy_add_mul_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 19, scope: !6)
!14 = !DILocation(line: 26, column: 19, scope: !6)
!15 = !DILocation(line: 25, column: 19, scope: !6)
!16 = !DILocation(line: 27, column: 30, scope: !6)
!17 = !DILocation(line: 27, column: 35, scope: !6)
!18 = !DILocation(line: 28, column: 30, scope: !6)
!19 = !DILocation(line: 28, column: 35, scope: !6)
!20 = !DILocation(line: 29, column: 31, scope: !6)
!21 = !DILocation(line: 29, column: 36, scope: !6)
!22 = !DILocation(line: 30, column: 31, scope: !6)
!23 = !DILocation(line: 30, column: 36, scope: !6)
!24 = !DILocation(line: 33, column: 17, scope: !6)
!25 = !DILocation(line: 37, column: 18, scope: !6)
!26 = !DILocation(line: 38, column: 43, scope: !6)
!27 = !DILocation(line: 38, column: 37, scope: !6)
!28 = !DILocation(line: 38, column: 52, scope: !6)
!29 = !DILocation(line: 38, column: 34, scope: !6)
!30 = !DILocation(line: 38, column: 48, scope: !6)
!31 = !DILocation(line: 38, column: 30, scope: !6)
!32 = !DILocation(line: 38, column: 57, scope: !6)
!33 = !DILocation(line: 38, column: 107, scope: !6)
!34 = !DILocation(line: 39, column: 13, scope: !6)
!35 = !DILocation(line: 42, column: 20, scope: !6)
!36 = !DILocation(line: 45, column: 45, scope: !6)
!37 = !DILocation(line: 45, column: 31, scope: !6)
!38 = !DILocation(line: 45, column: 54, scope: !6)
!39 = !DILocation(line: 45, column: 105, scope: !6)
!40 = !DILocation(line: 0, scope: !6)
!41 = !DILocation(line: 53, column: 31, scope: !6)
!42 = !DILocation(line: 53, column: 58, scope: !6)
!43 = !DILocation(line: 53, column: 108, scope: !6)
!44 = !DILocation(line: 54, column: 13, scope: !6)
!45 = !DILocation(line: 57, column: 31, scope: !6)
!46 = !DILocation(line: 57, column: 54, scope: !6)
!47 = !DILocation(line: 57, column: 105, scope: !6)
!48 = !DILocation(line: 63, column: 25, scope: !6)
!49 = !DILocation(line: 27, column: 44, scope: !6)
!50 = !DILocation(line: 32, column: 18, scope: !6)
!51 = !DILocation(line: 48, column: 20, scope: !6)
!52 = !DILocation(line: 49, column: 19, scope: !6)
!53 = !DILocation(line: 63, column: 37, scope: !6)
!54 = !DILocation(line: 64, column: 25, scope: !6)
!55 = !DILocation(line: 30, column: 45, scope: !6)
!56 = !DILocation(line: 52, column: 20, scope: !6)
!57 = !DILocation(line: 60, column: 20, scope: !6)
!58 = !DILocation(line: 61, column: 20, scope: !6)
!59 = !DILocation(line: 64, column: 37, scope: !6)
!60 = !DILocation(line: 64, column: 4, scope: !6)
