; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = lshr i32 %18, 5, !dbg !11
  %21 = shl i32 %18, 3, !dbg !11
  %22 = and i32 %21, 4088, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = sext i32 %16 to i64, !dbg !12
  %25 = getelementptr bfloat, ptr addrspace(1) %4, i64 %24, !dbg !12
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !13
  %34 = bitcast i16 %33 to bfloat, !dbg !13
  %35 = getelementptr bfloat, ptr addrspace(1) %5, i64 %24, !dbg !14
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %35, i1 %17) #5, !dbg !15
  %44 = bitcast i16 %43 to bfloat, !dbg !15
  %45 = icmp samesign ult i32 %22, 3072, !dbg !16
  %46 = mul i32 %16, 3072, !dbg !17
  %47 = add i32 %22, %46, !dbg !18
  %48 = add i32 %23, %46, !dbg !18
  %49 = sext i32 %47 to i64, !dbg !19
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = and i1 %17, %45, !dbg !20
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %50, i1 %51) #5, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !21
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !21
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !21
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !21
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !21
  %61 = add nuw nsw i32 %22, 6144, !dbg !22
  %62 = zext nneg i32 %61 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !23
  %64 = zext nneg i32 %23 to i64, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !23
  %66 = getelementptr i8, ptr addrspace(1) %65, i64 24576, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %45) #5, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %45) #5, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = getelementptr bfloat, ptr addrspace(1) %2, i64 %62, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %77, i1 %45) #5, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !26
  %87 = getelementptr i32, ptr addrspace(1) %3, i64 %49, !dbg !27
  %88 = sext i32 %48 to i64, !dbg !27
  %89 = getelementptr i32, ptr addrspace(1) %3, i64 %88, !dbg !27
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %51) #5, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 %51) #5, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !28
  %100 = zext nneg i32 %22 to i64, !dbg !29
  %101 = getelementptr bfloat, ptr addrspace(1) %6, i64 %100, !dbg !29
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %101, i1 %45) #5, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !30
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !30
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !30
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !30
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !30
  %111 = getelementptr bfloat, ptr addrspace(1) %7, i64 %100, !dbg !31
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %111, i1 %45) #5, !dbg !32
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !32
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !32
  %115 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !32
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !32
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !32
  %119 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !32
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !32
  %.inv = fcmp oge bfloat %34, 0xR0000, !dbg !33
  %121 = select i1 %.inv, bfloat 0xR0000, bfloat %34, !dbg !33
  %122 = fpext bfloat %121 to float, !dbg !33
  %123 = fsub float 0.000000e+00, %122, !dbg !37
  %.inv1 = fcmp ole bfloat %44, 0xR0000, !dbg !38
  %124 = select i1 %.inv1, bfloat 0xR0000, bfloat %44, !dbg !38
  %125 = fpext bfloat %124 to float, !dbg !38
  %126 = fcmp ogt float %123, %125, !dbg !40
  %127 = fcmp uno float %123, 0.000000e+00, !dbg !42
  %128 = or i1 %127, %126, !dbg !43
  %129 = select i1 %128, float %123, float %125, !dbg !44
  %130 = fmul float %129, 0x3F80204080000000, !dbg !45
  %131 = fcmp ogt float %130, 0x3EE4F8B580000000, !dbg !46
  %132 = fcmp uno float %130, 0.000000e+00, !dbg !48
  %133 = or i1 %131, %132, !dbg !49
  %134 = select i1 %133, float %130, float 0x3EE4F8B580000000, !dbg !50
  %135 = select i1 %51, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %136 = getelementptr bfloat, ptr addrspace(1) %8, i64 %49, !dbg !52
  %137 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !53
  %138 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !24
  %139 = insertelement <2 x i32> %138, i32 %69, i64 1, !dbg !24
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !24
  %141 = fpext <2 x bfloat> %80 to <2 x float>, !dbg !54
  %142 = fpext <2 x bfloat> %104 to <2 x float>, !dbg !55
  %143 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !56
  %144 = fadd <2 x float> %140, %141, !dbg !57
  %145 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !58
  %146 = insertelement <2 x i32> %145, i32 %92, i64 1, !dbg !58
  %147 = sitofp <2 x i32> %146 to <2 x float>, !dbg !58
  %148 = insertelement <2 x float> poison, float %134, i64 0, !dbg !59
  %149 = shufflevector <2 x float> %148, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %150 = fmul <2 x float> %149, %147, !dbg !59
  %151 = fmul <2 x float> %150, %142, !dbg !60
  %152 = fadd <2 x float> %151, %143, !dbg !61
  %153 = fmul <2 x float> %144, %152, !dbg !62
  %154 = fadd <2 x float> %153, %137, !dbg !63
  %155 = extractelement <2 x float> %154, i64 0, !dbg !64
  %156 = select i1 %51, float %155, float 0.000000e+00, !dbg !64
  %157 = extractelement <2 x float> %154, i64 1, !dbg !64
  %158 = select i1 %51, float %157, float 0.000000e+00, !dbg !64
  %159 = fptrunc <2 x float> %154 to <2 x bfloat>, !dbg !65
  %160 = fpext <2 x bfloat> %56 to <2 x float>, !dbg !53
  %161 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !24
  %162 = insertelement <2 x i32> %161, i32 %71, i64 1, !dbg !24
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !24
  %164 = fpext <2 x bfloat> %82 to <2 x float>, !dbg !54
  %165 = fpext <2 x bfloat> %106 to <2 x float>, !dbg !55
  %166 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !56
  %167 = fadd <2 x float> %163, %164, !dbg !57
  %168 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !58
  %169 = insertelement <2 x i32> %168, i32 %94, i64 1, !dbg !58
  %170 = sitofp <2 x i32> %169 to <2 x float>, !dbg !58
  %171 = fmul <2 x float> %149, %170, !dbg !59
  %172 = fmul <2 x float> %171, %165, !dbg !60
  %173 = fadd <2 x float> %172, %166, !dbg !61
  %174 = fmul <2 x float> %167, %173, !dbg !62
  %175 = fadd <2 x float> %174, %160, !dbg !63
  %176 = extractelement <2 x float> %175, i64 0, !dbg !64
  %177 = select i1 %51, float %176, float 0.000000e+00, !dbg !64
  %178 = extractelement <2 x float> %175, i64 1, !dbg !64
  %179 = select i1 %51, float %178, float 0.000000e+00, !dbg !64
  %180 = fptrunc <2 x float> %175 to <2 x bfloat>, !dbg !65
  %181 = fpext <2 x bfloat> %58 to <2 x float>, !dbg !53
  %182 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !24
  %183 = insertelement <2 x i32> %182, i32 %74, i64 1, !dbg !24
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !24
  %185 = fpext <2 x bfloat> %84 to <2 x float>, !dbg !54
  %186 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !55
  %187 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !56
  %188 = fadd <2 x float> %184, %185, !dbg !57
  %189 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !58
  %190 = insertelement <2 x i32> %189, i32 %97, i64 1, !dbg !58
  %191 = sitofp <2 x i32> %190 to <2 x float>, !dbg !58
  %192 = fmul <2 x float> %149, %191, !dbg !59
  %193 = fmul <2 x float> %192, %186, !dbg !60
  %194 = fadd <2 x float> %193, %187, !dbg !61
  %195 = fmul <2 x float> %188, %194, !dbg !62
  %196 = fadd <2 x float> %195, %181, !dbg !63
  %197 = extractelement <2 x float> %196, i64 0, !dbg !64
  %198 = select i1 %51, float %197, float 0.000000e+00, !dbg !64
  %199 = extractelement <2 x float> %196, i64 1, !dbg !64
  %200 = select i1 %51, float %199, float 0.000000e+00, !dbg !64
  %201 = fptrunc <2 x float> %196 to <2 x bfloat>, !dbg !65
  %202 = fpext <2 x bfloat> %60 to <2 x float>, !dbg !53
  %203 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !24
  %204 = insertelement <2 x i32> %203, i32 %76, i64 1, !dbg !24
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !24
  %206 = fpext <2 x bfloat> %86 to <2 x float>, !dbg !54
  %207 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !55
  %208 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !56
  %209 = fadd <2 x float> %205, %206, !dbg !57
  %210 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !58
  %211 = insertelement <2 x i32> %210, i32 %99, i64 1, !dbg !58
  %212 = sitofp <2 x i32> %211 to <2 x float>, !dbg !58
  %213 = fmul <2 x float> %149, %212, !dbg !59
  %214 = fmul <2 x float> %213, %207, !dbg !60
  %215 = fadd <2 x float> %214, %208, !dbg !61
  %216 = fmul <2 x float> %209, %215, !dbg !62
  %217 = fadd <2 x float> %216, %202, !dbg !63
  %218 = extractelement <2 x float> %217, i64 0, !dbg !64
  %219 = select i1 %51, float %218, float 0.000000e+00, !dbg !64
  %220 = extractelement <2 x float> %217, i64 1, !dbg !64
  %221 = select i1 %51, float %220, float 0.000000e+00, !dbg !64
  %222 = fptrunc <2 x float> %217 to <2 x bfloat>, !dbg !65
  %223 = bitcast <2 x bfloat> %159 to i32, !dbg !65
  %224 = bitcast <2 x bfloat> %180 to i32, !dbg !65
  %225 = bitcast <2 x bfloat> %201 to i32, !dbg !65
  %226 = bitcast <2 x bfloat> %222 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %136, i1 %51) #5, !dbg !65
  %227 = fsub float %158, %156, !dbg !66
  %228 = select i1 %51, float 2.000000e+00, float 0.000000e+00, !dbg !69
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !70
  %230 = tail call float @llvm.nvvm.div.full(float %135, float %228), !dbg !71
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !72
  %232 = fmul float %231, %227, !dbg !73
  %233 = fadd float %156, %232, !dbg !74
  %234 = fmul float %227, %227, !dbg !75
  %235 = fmul float %135, %234, !dbg !76
  %236 = fmul float %231, %235, !dbg !77
  %237 = fadd float %236, 0.000000e+00, !dbg !78
  %238 = fsub float %177, %233, !dbg !66
  %239 = select i1 %51, float 3.000000e+00, float 0.000000e+00, !dbg !69
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !70
  %241 = tail call float @llvm.nvvm.div.full(float %135, float %239), !dbg !71
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !72
  %243 = fmul float %242, %238, !dbg !73
  %244 = fadd float %233, %243, !dbg !74
  %245 = fmul float %238, %238, !dbg !75
  %246 = fmul float %228, %245, !dbg !76
  %247 = fmul float %242, %246, !dbg !77
  %248 = fadd float %237, %247, !dbg !78
  %249 = fsub float %179, %244, !dbg !66
  %250 = select i1 %51, float 4.000000e+00, float 0.000000e+00, !dbg !69
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !70
  %252 = tail call float @llvm.nvvm.div.full(float %135, float %250), !dbg !71
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !72
  %254 = fmul float %253, %249, !dbg !73
  %255 = fadd float %244, %254, !dbg !74
  %256 = fmul float %249, %249, !dbg !75
  %257 = fmul float %239, %256, !dbg !76
  %258 = fmul float %253, %257, !dbg !77
  %259 = fadd float %248, %258, !dbg !78
  %260 = fsub float %198, %255, !dbg !66
  %261 = select i1 %51, float 5.000000e+00, float 0.000000e+00, !dbg !69
  %262 = fcmp oeq float %261, 0.000000e+00, !dbg !70
  %263 = tail call float @llvm.nvvm.div.full(float %135, float %261), !dbg !71
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !72
  %265 = fmul float %264, %260, !dbg !73
  %266 = fadd float %255, %265, !dbg !74
  %267 = fmul float %260, %260, !dbg !75
  %268 = fmul float %250, %267, !dbg !76
  %269 = fmul float %264, %268, !dbg !77
  %270 = fadd float %259, %269, !dbg !78
  %271 = fsub float %200, %266, !dbg !66
  %272 = select i1 %51, float 6.000000e+00, float 0.000000e+00, !dbg !69
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !70
  %274 = tail call float @llvm.nvvm.div.full(float %135, float %272), !dbg !71
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !72
  %276 = fmul float %275, %271, !dbg !73
  %277 = fadd float %266, %276, !dbg !74
  %278 = fmul float %271, %271, !dbg !75
  %279 = fmul float %261, %278, !dbg !76
  %280 = fmul float %275, %279, !dbg !77
  %281 = fadd float %270, %280, !dbg !78
  %282 = fsub float %219, %277, !dbg !66
  %283 = select i1 %51, float 7.000000e+00, float 0.000000e+00, !dbg !69
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !70
  %285 = tail call float @llvm.nvvm.div.full(float %135, float %283), !dbg !71
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !72
  %287 = fmul float %286, %282, !dbg !73
  %288 = fadd float %277, %287, !dbg !74
  %289 = fmul float %282, %282, !dbg !75
  %290 = fmul float %272, %289, !dbg !76
  %291 = fmul float %286, %290, !dbg !77
  %292 = fadd float %281, %291, !dbg !78
  %293 = fsub float %221, %288, !dbg !66
  %294 = select i1 %51, float 8.000000e+00, float 0.000000e+00, !dbg !69
  %295 = fcmp oeq float %294, 0.000000e+00, !dbg !70
  %296 = tail call float @llvm.nvvm.div.full(float %135, float %294), !dbg !71
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !72
  %298 = fmul float %297, %293, !dbg !73
  %299 = fadd float %288, %298, !dbg !74
  %300 = fmul float %293, %293, !dbg !75
  %301 = fmul float %283, %300, !dbg !76
  %302 = fmul float %297, %301, !dbg !77
  %303 = fadd float %292, %302, !dbg !78
  %304 = bitcast float %299 to i32, !dbg !79
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 16, i32 31), !dbg !79
  %306 = bitcast i32 %305 to float, !dbg !79
  %307 = bitcast float %303 to i32, !dbg !79
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 16, i32 31), !dbg !79
  %309 = bitcast i32 %308 to float, !dbg !79
  %310 = bitcast float %294 to i32, !dbg !79
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 16, i32 31), !dbg !79
  %312 = bitcast i32 %311 to float, !dbg !79
  %313 = fsub float %306, %299, !dbg !66
  %314 = fadd float %294, %312, !dbg !69
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !70
  %316 = tail call float @llvm.nvvm.div.full(float %312, float %314), !dbg !71
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !72
  %318 = fmul float %317, %313, !dbg !73
  %319 = fadd float %299, %318, !dbg !74
  %320 = fadd float %303, %309, !dbg !80
  %321 = fmul float %313, %313, !dbg !75
  %322 = fmul float %294, %321, !dbg !76
  %323 = fmul float %317, %322, !dbg !77
  %324 = fadd float %320, %323, !dbg !78
  %325 = bitcast float %319 to i32, !dbg !79
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 8, i32 31), !dbg !79
  %327 = bitcast i32 %326 to float, !dbg !79
  %328 = bitcast float %324 to i32, !dbg !79
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 8, i32 31), !dbg !79
  %330 = bitcast i32 %329 to float, !dbg !79
  %331 = bitcast float %314 to i32, !dbg !79
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !79
  %333 = bitcast i32 %332 to float, !dbg !79
  %334 = fsub float %327, %319, !dbg !66
  %335 = fadd float %314, %333, !dbg !69
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !70
  %337 = tail call float @llvm.nvvm.div.full(float %333, float %335), !dbg !71
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !72
  %339 = fmul float %338, %334, !dbg !73
  %340 = fadd float %319, %339, !dbg !74
  %341 = fadd float %324, %330, !dbg !80
  %342 = fmul float %334, %334, !dbg !75
  %343 = fmul float %314, %342, !dbg !76
  %344 = fmul float %338, %343, !dbg !77
  %345 = fadd float %341, %344, !dbg !78
  %346 = bitcast float %340 to i32, !dbg !79
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 4, i32 31), !dbg !79
  %348 = bitcast i32 %347 to float, !dbg !79
  %349 = bitcast float %345 to i32, !dbg !79
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 4, i32 31), !dbg !79
  %351 = bitcast i32 %350 to float, !dbg !79
  %352 = bitcast float %335 to i32, !dbg !79
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !79
  %354 = bitcast i32 %353 to float, !dbg !79
  %355 = fsub float %348, %340, !dbg !66
  %356 = fadd float %335, %354, !dbg !69
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !70
  %358 = tail call float @llvm.nvvm.div.full(float %354, float %356), !dbg !71
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !72
  %360 = fmul float %359, %355, !dbg !73
  %361 = fadd float %340, %360, !dbg !74
  %362 = fadd float %345, %351, !dbg !80
  %363 = fmul float %355, %355, !dbg !75
  %364 = fmul float %335, %363, !dbg !76
  %365 = fmul float %359, %364, !dbg !77
  %366 = fadd float %362, %365, !dbg !78
  %367 = bitcast float %361 to i32, !dbg !79
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !79
  %369 = bitcast i32 %368 to float, !dbg !79
  %370 = bitcast float %366 to i32, !dbg !79
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 2, i32 31), !dbg !79
  %372 = bitcast i32 %371 to float, !dbg !79
  %373 = bitcast float %356 to i32, !dbg !79
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 2, i32 31), !dbg !79
  %375 = bitcast i32 %374 to float, !dbg !79
  %376 = fsub float %369, %361, !dbg !66
  %377 = fadd float %356, %375, !dbg !69
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !70
  %379 = tail call float @llvm.nvvm.div.full(float %375, float %377), !dbg !71
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !72
  %381 = fmul float %380, %376, !dbg !73
  %382 = fadd float %361, %381, !dbg !74
  %383 = fadd float %366, %372, !dbg !80
  %384 = fmul float %376, %376, !dbg !75
  %385 = fmul float %356, %384, !dbg !76
  %386 = fmul float %380, %385, !dbg !77
  %387 = fadd float %383, %386, !dbg !78
  %388 = bitcast float %382 to i32, !dbg !79
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !79
  %390 = bitcast i32 %389 to float, !dbg !79
  %391 = bitcast float %387 to i32, !dbg !79
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 1, i32 31), !dbg !79
  %393 = bitcast i32 %392 to float, !dbg !79
  %394 = bitcast float %377 to i32, !dbg !79
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !79
  %396 = bitcast i32 %395 to float, !dbg !79
  %397 = fsub float %390, %382, !dbg !66
  %398 = fadd float %377, %396, !dbg !69
  %399 = fcmp oeq float %398, 0.000000e+00, !dbg !70
  %400 = tail call float @llvm.nvvm.div.full(float %396, float %398), !dbg !71
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !72
  %402 = fmul float %401, %397, !dbg !73
  %403 = fadd float %382, %402, !dbg !74
  %404 = fadd float %387, %393, !dbg !80
  %405 = fmul float %397, %397, !dbg !75
  %406 = fmul float %377, %405, !dbg !76
  %407 = fmul float %401, %406, !dbg !77
  %408 = fadd float %404, %407, !dbg !78
  %409 = and i32 %20, 15, !dbg !79
  %410 = icmp eq i32 %19, 0, !dbg !79
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !79
  %412 = bitcast float %403 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 %410) #5, !dbg !79
  %413 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %409, !dbg !79
  %414 = bitcast float %408 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 %410) #5, !dbg !79
  %415 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %409, !dbg !79
  %416 = bitcast float %398 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 %410) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %417 = icmp slt i32 %18, 16, !dbg !79
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !79
  %419 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %418, i1 %417) #5, !dbg !79
  %420 = bitcast i32 %419 to float, !dbg !79
  %421 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !79
  %422 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %421, i1 %417) #5, !dbg !79
  %423 = bitcast i32 %422 to float, !dbg !79
  %424 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !79
  %425 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %424, i1 %417) #5, !dbg !79
  %426 = bitcast i32 %425 to float, !dbg !79
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 8, i32 31), !dbg !79
  %428 = bitcast i32 %427 to float, !dbg !79
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 8, i32 31), !dbg !79
  %430 = bitcast i32 %429 to float, !dbg !79
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 8, i32 31), !dbg !79
  %432 = bitcast i32 %431 to float, !dbg !79
  %433 = fsub float %428, %420, !dbg !66
  %434 = fadd float %426, %432, !dbg !69
  %435 = fcmp oeq float %434, 0.000000e+00, !dbg !70
  %436 = tail call float @llvm.nvvm.div.full(float %432, float %434), !dbg !71
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !72
  %438 = fmul float %433, %437, !dbg !73
  %439 = fadd float %438, %420, !dbg !74
  %440 = fadd float %423, %430, !dbg !80
  %441 = fmul float %433, %433, !dbg !75
  %442 = fmul float %441, %426, !dbg !76
  %443 = fmul float %442, %437, !dbg !77
  %444 = fadd float %440, %443, !dbg !78
  %445 = bitcast float %439 to i32, !dbg !79
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 4, i32 31), !dbg !79
  %447 = bitcast i32 %446 to float, !dbg !79
  %448 = bitcast float %444 to i32, !dbg !79
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 4, i32 31), !dbg !79
  %450 = bitcast i32 %449 to float, !dbg !79
  %451 = bitcast float %434 to i32, !dbg !79
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 4, i32 31), !dbg !79
  %453 = bitcast i32 %452 to float, !dbg !79
  %454 = fsub float %447, %439, !dbg !66
  %455 = fadd float %434, %453, !dbg !69
  %456 = fcmp oeq float %455, 0.000000e+00, !dbg !70
  %457 = tail call float @llvm.nvvm.div.full(float %453, float %455), !dbg !71
  %458 = select i1 %456, float 0.000000e+00, float %457, !dbg !72
  %459 = fmul float %454, %458, !dbg !73
  %460 = fadd float %439, %459, !dbg !74
  %461 = fadd float %444, %450, !dbg !80
  %462 = fmul float %454, %454, !dbg !75
  %463 = fmul float %434, %462, !dbg !76
  %464 = fmul float %458, %463, !dbg !77
  %465 = fadd float %461, %464, !dbg !78
  %466 = bitcast float %460 to i32, !dbg !79
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 2, i32 31), !dbg !79
  %468 = bitcast i32 %467 to float, !dbg !79
  %469 = bitcast float %465 to i32, !dbg !79
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 2, i32 31), !dbg !79
  %471 = bitcast i32 %470 to float, !dbg !79
  %472 = bitcast float %455 to i32, !dbg !79
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 2, i32 31), !dbg !79
  %474 = bitcast i32 %473 to float, !dbg !79
  %475 = fsub float %468, %460, !dbg !66
  %476 = fadd float %455, %474, !dbg !69
  %477 = fcmp oeq float %476, 0.000000e+00, !dbg !70
  %478 = tail call float @llvm.nvvm.div.full(float %474, float %476), !dbg !71
  %479 = select i1 %477, float 0.000000e+00, float %478, !dbg !72
  %480 = fmul float %475, %479, !dbg !73
  %481 = fadd float %460, %480, !dbg !74
  %482 = fadd float %465, %471, !dbg !80
  %483 = fmul float %475, %475, !dbg !75
  %484 = fmul float %455, %483, !dbg !76
  %485 = fmul float %479, %484, !dbg !77
  %486 = fadd float %482, %485, !dbg !78
  %487 = bitcast float %481 to i32, !dbg !79
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 1, i32 31), !dbg !79
  %489 = bitcast i32 %488 to float, !dbg !79
  %490 = bitcast float %486 to i32, !dbg !79
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 1, i32 31), !dbg !79
  %492 = bitcast i32 %491 to float, !dbg !79
  %493 = bitcast float %476 to i32, !dbg !79
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 1, i32 31), !dbg !79
  %495 = bitcast i32 %494 to float, !dbg !79
  %496 = fsub float %489, %481, !dbg !66
  %497 = fadd float %476, %495, !dbg !69
  %498 = fcmp oeq float %497, 0.000000e+00, !dbg !70
  %499 = tail call float @llvm.nvvm.div.full(float %495, float %497), !dbg !71
  %500 = select i1 %498, float 0.000000e+00, float %499, !dbg !72
  %501 = fmul float %496, %500, !dbg !73
  %502 = fadd float %481, %501, !dbg !74
  %503 = fadd float %486, %492, !dbg !80
  %504 = fmul float %496, %496, !dbg !75
  %505 = fmul float %476, %504, !dbg !76
  %506 = fmul float %500, %505, !dbg !77
  %507 = fadd float %503, %506, !dbg !78
  %508 = and i32 %18, 15, !dbg !79
  %509 = icmp eq i32 %508, 0, !dbg !79
  %510 = and i1 %417, %509, !dbg !79
  %511 = bitcast float %502 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %511, i1 %510) #5, !dbg !79
  %512 = bitcast float %507 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %512, i1 %510) #5, !dbg !79
  %513 = bitcast float %497 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %513, i1 %510) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %514 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  %515 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !79
  %516 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %136, i1 %51) #5, !dbg !81
  %517 = or disjoint i32 %22, 12288, !dbg !82
  %518 = zext nneg i32 %517 to i64, !dbg !83
  %519 = getelementptr float, ptr addrspace(1) %1, i64 %518, !dbg !83
  %520 = getelementptr i8, ptr addrspace(1) %65, i64 49152, !dbg !83
  %521 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %519, i1 %45) #5, !dbg !84
  %522 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %520, i1 %45) #5, !dbg !84
  %523 = getelementptr bfloat, ptr addrspace(1) %2, i64 %518, !dbg !85
  %524 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %523, i1 %45) #5, !dbg !86
  %525 = add nuw nsw i32 %22, 9216, !dbg !87
  %526 = zext nneg i32 %525 to i64, !dbg !88
  %527 = getelementptr float, ptr addrspace(1) %1, i64 %526, !dbg !88
  %528 = getelementptr i8, ptr addrspace(1) %65, i64 36864, !dbg !88
  %529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %527, i1 %45) #5, !dbg !89
  %530 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %528, i1 %45) #5, !dbg !89
  %531 = getelementptr bfloat, ptr addrspace(1) %2, i64 %526, !dbg !90
  %532 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %531, i1 %45) #5, !dbg !91
  %533 = tail call float @llvm.nvvm.div.full(float %515, float 3.072000e+03), !dbg !92
  %534 = fadd float %533, 0x3EB0C6F7A0000000, !dbg !93
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %538 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %539 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %541 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %542 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i22 = icmp eq i32 %542, 0, !dbg !94
  br i1 %.not.i22, label %545, label %543, !dbg !94

543:                                              ; preds = %__nv_rsqrtf.exit
  %544 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %534), !dbg !94
  br label %__nv_rsqrtf.exit24, !dbg !94

545:                                              ; preds = %__nv_rsqrtf.exit
  %546 = tail call float @llvm.nvvm.rsqrt.approx.f(float %534), !dbg !94
  br label %__nv_rsqrtf.exit24, !dbg !94

__nv_rsqrtf.exit24:                               ; preds = %543, %545
  %.0.i23 = phi float [ %544, %543 ], [ %546, %545 ], !dbg !94
  %547 = extractvalue { i32, i32, i32, i32 } %516, 3, !dbg !81
  %548 = bitcast i32 %547 to <2 x bfloat>, !dbg !81
  %549 = extractvalue { i32, i32, i32, i32 } %516, 2, !dbg !81
  %550 = bitcast i32 %549 to <2 x bfloat>, !dbg !81
  %551 = extractvalue { i32, i32, i32, i32 } %516, 1, !dbg !81
  %552 = bitcast i32 %551 to <2 x bfloat>, !dbg !81
  %553 = extractvalue { i32, i32, i32, i32 } %516, 0, !dbg !81
  %554 = bitcast i32 %553 to <2 x bfloat>, !dbg !81
  %555 = extractvalue { i32, i32, i32, i32 } %532, 3, !dbg !91
  %556 = bitcast i32 %555 to <2 x bfloat>, !dbg !91
  %557 = extractvalue { i32, i32, i32, i32 } %532, 2, !dbg !91
  %558 = bitcast i32 %557 to <2 x bfloat>, !dbg !91
  %559 = extractvalue { i32, i32, i32, i32 } %532, 1, !dbg !91
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !91
  %561 = extractvalue { i32, i32, i32, i32 } %532, 0, !dbg !91
  %562 = bitcast i32 %561 to <2 x bfloat>, !dbg !91
  %563 = extractvalue { i32, i32, i32, i32 } %530, 3, !dbg !89
  %564 = extractvalue { i32, i32, i32, i32 } %530, 2, !dbg !89
  %565 = extractvalue { i32, i32, i32, i32 } %530, 1, !dbg !89
  %566 = extractvalue { i32, i32, i32, i32 } %530, 0, !dbg !89
  %567 = extractvalue { i32, i32, i32, i32 } %529, 3, !dbg !89
  %568 = extractvalue { i32, i32, i32, i32 } %529, 2, !dbg !89
  %569 = extractvalue { i32, i32, i32, i32 } %529, 1, !dbg !89
  %570 = extractvalue { i32, i32, i32, i32 } %529, 0, !dbg !89
  %571 = extractvalue { i32, i32, i32, i32 } %524, 3, !dbg !86
  %572 = bitcast i32 %571 to <2 x bfloat>, !dbg !86
  %573 = extractvalue { i32, i32, i32, i32 } %524, 2, !dbg !86
  %574 = bitcast i32 %573 to <2 x bfloat>, !dbg !86
  %575 = extractvalue { i32, i32, i32, i32 } %524, 1, !dbg !86
  %576 = bitcast i32 %575 to <2 x bfloat>, !dbg !86
  %577 = extractvalue { i32, i32, i32, i32 } %524, 0, !dbg !86
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !86
  %579 = extractvalue { i32, i32, i32, i32 } %522, 3, !dbg !84
  %580 = extractvalue { i32, i32, i32, i32 } %522, 2, !dbg !84
  %581 = extractvalue { i32, i32, i32, i32 } %522, 1, !dbg !84
  %582 = extractvalue { i32, i32, i32, i32 } %522, 0, !dbg !84
  %583 = extractvalue { i32, i32, i32, i32 } %521, 3, !dbg !84
  %584 = extractvalue { i32, i32, i32, i32 } %521, 2, !dbg !84
  %585 = extractvalue { i32, i32, i32, i32 } %521, 1, !dbg !84
  %586 = extractvalue { i32, i32, i32, i32 } %521, 0, !dbg !84
  %587 = getelementptr bfloat, ptr addrspace(1) %9, i64 %49, !dbg !95
  %588 = fpext <2 x bfloat> %554 to <2 x float>, !dbg !96
  %589 = insertelement <2 x float> poison, float %514, i64 0, !dbg !97
  %590 = shufflevector <2 x float> %589, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %591 = fsub <2 x float> %588, %590, !dbg !97
  %592 = fpext <2 x bfloat> %562 to <2 x float>, !dbg !98
  %593 = insertelement <2 x i32> poison, i32 %570, i64 0, !dbg !89
  %594 = insertelement <2 x i32> %593, i32 %569, i64 1, !dbg !89
  %595 = bitcast <2 x i32> %594 to <2 x float>, !dbg !89
  %596 = fpext <2 x bfloat> %578 to <2 x float>, !dbg !99
  %597 = insertelement <2 x i32> poison, i32 %586, i64 0, !dbg !84
  %598 = insertelement <2 x i32> %597, i32 %585, i64 1, !dbg !84
  %599 = bitcast <2 x i32> %598 to <2 x float>, !dbg !84
  %600 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !100
  %601 = shufflevector <2 x float> %600, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %602 = fmul <2 x float> %591, %601, !dbg !100
  %603 = fadd <2 x float> %599, %596, !dbg !101
  %604 = fadd <2 x float> %603, splat (float 1.000000e+00), !dbg !102
  %605 = fmul <2 x float> %604, %602, !dbg !103
  %606 = fadd <2 x float> %595, %592, !dbg !104
  %607 = fadd <2 x float> %606, %605, !dbg !105
  %608 = extractelement <2 x float> %607, i64 0, !dbg !106
  %609 = select i1 %51, float %608, float 0x7FF0000000000000, !dbg !107
  %610 = extractelement <2 x float> %607, i64 1, !dbg !106
  %611 = select i1 %51, float %610, float 0x7FF0000000000000, !dbg !107
  %612 = select i1 %51, float %608, float 0xFFF0000000000000, !dbg !106
  %613 = select i1 %51, float %610, float 0xFFF0000000000000, !dbg !106
  %614 = fptrunc <2 x float> %607 to <2 x bfloat>, !dbg !108
  %615 = fpext <2 x bfloat> %552 to <2 x float>, !dbg !96
  %616 = fsub <2 x float> %615, %590, !dbg !97
  %617 = fpext <2 x bfloat> %560 to <2 x float>, !dbg !98
  %618 = insertelement <2 x i32> poison, i32 %568, i64 0, !dbg !89
  %619 = insertelement <2 x i32> %618, i32 %567, i64 1, !dbg !89
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !89
  %621 = fpext <2 x bfloat> %576 to <2 x float>, !dbg !99
  %622 = insertelement <2 x i32> poison, i32 %584, i64 0, !dbg !84
  %623 = insertelement <2 x i32> %622, i32 %583, i64 1, !dbg !84
  %624 = bitcast <2 x i32> %623 to <2 x float>, !dbg !84
  %625 = fmul <2 x float> %616, %601, !dbg !100
  %626 = fadd <2 x float> %624, %621, !dbg !101
  %627 = fadd <2 x float> %626, splat (float 1.000000e+00), !dbg !102
  %628 = fmul <2 x float> %627, %625, !dbg !103
  %629 = fadd <2 x float> %620, %617, !dbg !104
  %630 = fadd <2 x float> %629, %628, !dbg !105
  %631 = extractelement <2 x float> %630, i64 0, !dbg !106
  %632 = select i1 %51, float %631, float 0x7FF0000000000000, !dbg !107
  %633 = extractelement <2 x float> %630, i64 1, !dbg !106
  %634 = select i1 %51, float %633, float 0x7FF0000000000000, !dbg !107
  %635 = select i1 %51, float %631, float 0xFFF0000000000000, !dbg !106
  %636 = select i1 %51, float %633, float 0xFFF0000000000000, !dbg !106
  %637 = fptrunc <2 x float> %630 to <2 x bfloat>, !dbg !108
  %638 = fpext <2 x bfloat> %550 to <2 x float>, !dbg !96
  %639 = fsub <2 x float> %638, %590, !dbg !97
  %640 = fpext <2 x bfloat> %558 to <2 x float>, !dbg !98
  %641 = insertelement <2 x i32> poison, i32 %566, i64 0, !dbg !89
  %642 = insertelement <2 x i32> %641, i32 %565, i64 1, !dbg !89
  %643 = bitcast <2 x i32> %642 to <2 x float>, !dbg !89
  %644 = fpext <2 x bfloat> %574 to <2 x float>, !dbg !99
  %645 = insertelement <2 x i32> poison, i32 %582, i64 0, !dbg !84
  %646 = insertelement <2 x i32> %645, i32 %581, i64 1, !dbg !84
  %647 = bitcast <2 x i32> %646 to <2 x float>, !dbg !84
  %648 = fmul <2 x float> %639, %601, !dbg !100
  %649 = fadd <2 x float> %647, %644, !dbg !101
  %650 = fadd <2 x float> %649, splat (float 1.000000e+00), !dbg !102
  %651 = fmul <2 x float> %650, %648, !dbg !103
  %652 = fadd <2 x float> %643, %640, !dbg !104
  %653 = fadd <2 x float> %652, %651, !dbg !105
  %654 = extractelement <2 x float> %653, i64 0, !dbg !106
  %655 = select i1 %51, float %654, float 0x7FF0000000000000, !dbg !107
  %656 = extractelement <2 x float> %653, i64 1, !dbg !106
  %657 = select i1 %51, float %656, float 0x7FF0000000000000, !dbg !107
  %658 = select i1 %51, float %654, float 0xFFF0000000000000, !dbg !106
  %659 = select i1 %51, float %656, float 0xFFF0000000000000, !dbg !106
  %660 = fptrunc <2 x float> %653 to <2 x bfloat>, !dbg !108
  %661 = fpext <2 x bfloat> %548 to <2 x float>, !dbg !96
  %662 = fsub <2 x float> %661, %590, !dbg !97
  %663 = fpext <2 x bfloat> %556 to <2 x float>, !dbg !98
  %664 = insertelement <2 x i32> poison, i32 %564, i64 0, !dbg !89
  %665 = insertelement <2 x i32> %664, i32 %563, i64 1, !dbg !89
  %666 = bitcast <2 x i32> %665 to <2 x float>, !dbg !89
  %667 = fpext <2 x bfloat> %572 to <2 x float>, !dbg !99
  %668 = insertelement <2 x i32> poison, i32 %580, i64 0, !dbg !84
  %669 = insertelement <2 x i32> %668, i32 %579, i64 1, !dbg !84
  %670 = bitcast <2 x i32> %669 to <2 x float>, !dbg !84
  %671 = fmul <2 x float> %662, %601, !dbg !100
  %672 = fadd <2 x float> %670, %667, !dbg !101
  %673 = fadd <2 x float> %672, splat (float 1.000000e+00), !dbg !102
  %674 = fmul <2 x float> %673, %671, !dbg !103
  %675 = fadd <2 x float> %666, %663, !dbg !104
  %676 = fadd <2 x float> %675, %674, !dbg !105
  %677 = extractelement <2 x float> %676, i64 0, !dbg !106
  %678 = select i1 %51, float %677, float 0x7FF0000000000000, !dbg !107
  %679 = extractelement <2 x float> %676, i64 1, !dbg !106
  %680 = select i1 %51, float %679, float 0x7FF0000000000000, !dbg !107
  %681 = select i1 %51, float %677, float 0xFFF0000000000000, !dbg !106
  %682 = select i1 %51, float %679, float 0xFFF0000000000000, !dbg !106
  %683 = fptrunc <2 x float> %676 to <2 x bfloat>, !dbg !108
  %684 = bitcast <2 x bfloat> %614 to i32, !dbg !108
  %685 = bitcast <2 x bfloat> %637 to i32, !dbg !108
  %686 = bitcast <2 x bfloat> %660 to i32, !dbg !108
  %687 = bitcast <2 x bfloat> %683 to i32, !dbg !108
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %684, i32 %685, i32 %686, i32 %687, ptr addrspace(1) %587, i1 %51) #5, !dbg !108
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %688 = fcmp olt float %609, %611, !dbg !111
  %689 = fcmp uno float %609, 0.000000e+00, !dbg !112
  %690 = or i1 %688, %689, !dbg !113
  %691 = select i1 %690, float %609, float %611, !dbg !114
  %692 = fcmp olt float %691, %632, !dbg !111
  %693 = fcmp uno float %691, 0.000000e+00, !dbg !112
  %694 = or i1 %692, %693, !dbg !113
  %695 = select i1 %694, float %691, float %632, !dbg !114
  %696 = fcmp olt float %695, %634, !dbg !111
  %697 = fcmp uno float %695, 0.000000e+00, !dbg !112
  %698 = or i1 %696, %697, !dbg !113
  %699 = select i1 %698, float %695, float %634, !dbg !114
  %700 = fcmp olt float %699, %655, !dbg !111
  %701 = fcmp uno float %699, 0.000000e+00, !dbg !112
  %702 = or i1 %700, %701, !dbg !113
  %703 = select i1 %702, float %699, float %655, !dbg !114
  %704 = fcmp olt float %703, %657, !dbg !111
  %705 = fcmp uno float %703, 0.000000e+00, !dbg !112
  %706 = or i1 %704, %705, !dbg !113
  %707 = select i1 %706, float %703, float %657, !dbg !114
  %708 = fcmp olt float %707, %678, !dbg !111
  %709 = fcmp uno float %707, 0.000000e+00, !dbg !112
  %710 = or i1 %708, %709, !dbg !113
  %711 = select i1 %710, float %707, float %678, !dbg !114
  %712 = fcmp olt float %711, %680, !dbg !111
  %713 = fcmp uno float %711, 0.000000e+00, !dbg !112
  %714 = or i1 %712, %713, !dbg !113
  %715 = select i1 %714, float %711, float %680, !dbg !114
  %716 = bitcast float %715 to i32, !dbg !109
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 16, i32 31), !dbg !109
  %718 = bitcast i32 %717 to float, !dbg !109
  %719 = fcmp olt float %715, %718, !dbg !111
  %720 = fcmp uno float %715, 0.000000e+00, !dbg !112
  %721 = or i1 %719, %720, !dbg !113
  %722 = select i1 %721, float %715, float %718, !dbg !114
  %723 = bitcast float %722 to i32, !dbg !109
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 8, i32 31), !dbg !109
  %725 = bitcast i32 %724 to float, !dbg !109
  %726 = fcmp olt float %722, %725, !dbg !111
  %727 = fcmp uno float %722, 0.000000e+00, !dbg !112
  %728 = or i1 %726, %727, !dbg !113
  %729 = select i1 %728, float %722, float %725, !dbg !114
  %730 = bitcast float %729 to i32, !dbg !109
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 4, i32 31), !dbg !109
  %732 = bitcast i32 %731 to float, !dbg !109
  %733 = fcmp olt float %729, %732, !dbg !111
  %734 = fcmp uno float %729, 0.000000e+00, !dbg !112
  %735 = or i1 %733, %734, !dbg !113
  %736 = select i1 %735, float %729, float %732, !dbg !114
  %737 = bitcast float %736 to i32, !dbg !109
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 2, i32 31), !dbg !109
  %739 = bitcast i32 %738 to float, !dbg !109
  %740 = fcmp olt float %736, %739, !dbg !111
  %741 = fcmp uno float %736, 0.000000e+00, !dbg !112
  %742 = or i1 %740, %741, !dbg !113
  %743 = select i1 %742, float %736, float %739, !dbg !114
  %744 = bitcast float %743 to i32, !dbg !109
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 1, i32 31), !dbg !109
  %746 = bitcast i32 %745 to float, !dbg !109
  %747 = fcmp olt float %743, %746, !dbg !111
  %748 = fcmp uno float %743, 0.000000e+00, !dbg !112
  %749 = or i1 %747, %748, !dbg !113
  %750 = select i1 %749, i32 %744, i32 %745, !dbg !114
  %751 = insertelement <1 x i32> poison, i32 %750, i64 0, !dbg !109
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %751, i1 %410) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %752 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %418, i1 %417) #5, !dbg !109
  %753 = bitcast i32 %752 to float, !dbg !109
  %754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 8, i32 31), !dbg !109
  %755 = bitcast i32 %754 to float, !dbg !109
  %756 = fcmp olt float %753, %755, !dbg !111
  %757 = fcmp uno float %753, 0.000000e+00, !dbg !112
  %758 = or i1 %757, %756, !dbg !113
  %759 = select i1 %758, float %753, float %755, !dbg !114
  %760 = bitcast float %759 to i32, !dbg !109
  %761 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %760, i32 4, i32 31), !dbg !109
  %762 = bitcast i32 %761 to float, !dbg !109
  %763 = fcmp olt float %759, %762, !dbg !111
  %764 = fcmp uno float %759, 0.000000e+00, !dbg !112
  %765 = or i1 %763, %764, !dbg !113
  %766 = select i1 %765, float %759, float %762, !dbg !114
  %767 = bitcast float %766 to i32, !dbg !109
  %768 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %767, i32 2, i32 31), !dbg !109
  %769 = bitcast i32 %768 to float, !dbg !109
  %770 = fcmp olt float %766, %769, !dbg !111
  %771 = fcmp uno float %766, 0.000000e+00, !dbg !112
  %772 = or i1 %770, %771, !dbg !113
  %773 = select i1 %772, float %766, float %769, !dbg !114
  %774 = bitcast float %773 to i32, !dbg !109
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 1, i32 31), !dbg !109
  %776 = bitcast i32 %775 to float, !dbg !109
  %777 = fcmp olt float %773, %776, !dbg !111
  %778 = fcmp uno float %773, 0.000000e+00, !dbg !112
  %779 = or i1 %777, %778, !dbg !113
  %780 = select i1 %779, i32 %774, i32 %775, !dbg !114
  %781 = insertelement <1 x i32> poison, i32 %780, i64 0, !dbg !109
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %781, i1 %510) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %782 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %783 = fcmp ogt float %612, %613, !dbg !117
  %784 = fcmp uno float %612, 0.000000e+00, !dbg !118
  %785 = or i1 %783, %784, !dbg !119
  %786 = select i1 %785, float %612, float %613, !dbg !120
  %787 = fcmp ogt float %786, %635, !dbg !117
  %788 = fcmp uno float %786, 0.000000e+00, !dbg !118
  %789 = or i1 %787, %788, !dbg !119
  %790 = select i1 %789, float %786, float %635, !dbg !120
  %791 = fcmp ogt float %790, %636, !dbg !117
  %792 = fcmp uno float %790, 0.000000e+00, !dbg !118
  %793 = or i1 %791, %792, !dbg !119
  %794 = select i1 %793, float %790, float %636, !dbg !120
  %795 = fcmp ogt float %794, %658, !dbg !117
  %796 = fcmp uno float %794, 0.000000e+00, !dbg !118
  %797 = or i1 %795, %796, !dbg !119
  %798 = select i1 %797, float %794, float %658, !dbg !120
  %799 = fcmp ogt float %798, %659, !dbg !117
  %800 = fcmp uno float %798, 0.000000e+00, !dbg !118
  %801 = or i1 %799, %800, !dbg !119
  %802 = select i1 %801, float %798, float %659, !dbg !120
  %803 = fcmp ogt float %802, %681, !dbg !117
  %804 = fcmp uno float %802, 0.000000e+00, !dbg !118
  %805 = or i1 %803, %804, !dbg !119
  %806 = select i1 %805, float %802, float %681, !dbg !120
  %807 = fcmp ogt float %806, %682, !dbg !117
  %808 = fcmp uno float %806, 0.000000e+00, !dbg !118
  %809 = or i1 %807, %808, !dbg !119
  %810 = select i1 %809, float %806, float %682, !dbg !120
  %811 = bitcast float %810 to i32, !dbg !115
  %812 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %811, i32 16, i32 31), !dbg !115
  %813 = bitcast i32 %812 to float, !dbg !115
  %814 = fcmp ogt float %810, %813, !dbg !117
  %815 = fcmp uno float %810, 0.000000e+00, !dbg !118
  %816 = or i1 %814, %815, !dbg !119
  %817 = select i1 %816, float %810, float %813, !dbg !120
  %818 = bitcast float %817 to i32, !dbg !115
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %818, i32 8, i32 31), !dbg !115
  %820 = bitcast i32 %819 to float, !dbg !115
  %821 = fcmp ogt float %817, %820, !dbg !117
  %822 = fcmp uno float %817, 0.000000e+00, !dbg !118
  %823 = or i1 %821, %822, !dbg !119
  %824 = select i1 %823, float %817, float %820, !dbg !120
  %825 = bitcast float %824 to i32, !dbg !115
  %826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %825, i32 4, i32 31), !dbg !115
  %827 = bitcast i32 %826 to float, !dbg !115
  %828 = fcmp ogt float %824, %827, !dbg !117
  %829 = fcmp uno float %824, 0.000000e+00, !dbg !118
  %830 = or i1 %828, %829, !dbg !119
  %831 = select i1 %830, float %824, float %827, !dbg !120
  %832 = bitcast float %831 to i32, !dbg !115
  %833 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %832, i32 2, i32 31), !dbg !115
  %834 = bitcast i32 %833 to float, !dbg !115
  %835 = fcmp ogt float %831, %834, !dbg !117
  %836 = fcmp uno float %831, 0.000000e+00, !dbg !118
  %837 = or i1 %835, %836, !dbg !119
  %838 = select i1 %837, float %831, float %834, !dbg !120
  %839 = bitcast float %838 to i32, !dbg !115
  %840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %839, i32 1, i32 31), !dbg !115
  %841 = bitcast i32 %840 to float, !dbg !115
  %842 = fcmp ogt float %838, %841, !dbg !117
  %843 = fcmp uno float %838, 0.000000e+00, !dbg !118
  %844 = or i1 %842, %843, !dbg !119
  %845 = select i1 %844, i32 %839, i32 %840, !dbg !120
  %846 = insertelement <1 x i32> poison, i32 %845, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %846, i1 %410) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %847 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %418, i1 %417) #5, !dbg !115
  %848 = bitcast i32 %847 to float, !dbg !115
  %849 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %847, i32 8, i32 31), !dbg !115
  %850 = bitcast i32 %849 to float, !dbg !115
  %851 = fcmp ogt float %848, %850, !dbg !117
  %852 = fcmp uno float %848, 0.000000e+00, !dbg !118
  %853 = or i1 %852, %851, !dbg !119
  %854 = select i1 %853, float %848, float %850, !dbg !120
  %855 = bitcast float %854 to i32, !dbg !115
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 4, i32 31), !dbg !115
  %857 = bitcast i32 %856 to float, !dbg !115
  %858 = fcmp ogt float %854, %857, !dbg !117
  %859 = fcmp uno float %854, 0.000000e+00, !dbg !118
  %860 = or i1 %858, %859, !dbg !119
  %861 = select i1 %860, float %854, float %857, !dbg !120
  %862 = bitcast float %861 to i32, !dbg !115
  %863 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %862, i32 2, i32 31), !dbg !115
  %864 = bitcast i32 %863 to float, !dbg !115
  %865 = fcmp ogt float %861, %864, !dbg !117
  %866 = fcmp uno float %861, 0.000000e+00, !dbg !118
  %867 = or i1 %865, %866, !dbg !119
  %868 = select i1 %867, float %861, float %864, !dbg !120
  %869 = bitcast float %868 to i32, !dbg !115
  %870 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %869, i32 1, i32 31), !dbg !115
  %871 = bitcast i32 %870 to float, !dbg !115
  %872 = fcmp ogt float %868, %871, !dbg !117
  %873 = fcmp uno float %868, 0.000000e+00, !dbg !118
  %874 = or i1 %872, %873, !dbg !119
  %875 = select i1 %874, i32 %869, i32 %870, !dbg !120
  %876 = insertelement <1 x i32> poison, i32 %875, i64 0, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %876, i1 %510) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %877 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !115
  %878 = getelementptr bfloat, ptr addrspace(1) %10, i64 %24, !dbg !121
  %879 = fptrunc float %782 to bfloat, !dbg !122
  %880 = and i32 %18, 511, !dbg !122
  %881 = icmp eq i32 %880, 0, !dbg !122
  %882 = bitcast bfloat %879 to i16, !dbg !122
  %883 = and i1 %17, %881, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %882, ptr addrspace(1) %878, i1 %883) #5, !dbg !122
  %884 = getelementptr bfloat, ptr addrspace(1) %11, i64 %24, !dbg !123
  %885 = fptrunc float %877 to bfloat, !dbg !124
  %886 = bitcast bfloat %885 to i16, !dbg !124
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %886, ptr addrspace(1) %884, i1 %883) #5, !dbg !124
  %887 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %587, i1 %51) #5, !dbg !125
  %888 = extractvalue { i32, i32, i32, i32 } %887, 0, !dbg !125
  %889 = bitcast i32 %888 to <2 x bfloat>, !dbg !125
  %890 = extractvalue { i32, i32, i32, i32 } %887, 1, !dbg !125
  %891 = bitcast i32 %890 to <2 x bfloat>, !dbg !125
  %892 = extractvalue { i32, i32, i32, i32 } %887, 2, !dbg !125
  %893 = bitcast i32 %892 to <2 x bfloat>, !dbg !125
  %894 = extractvalue { i32, i32, i32, i32 } %887, 3, !dbg !125
  %895 = bitcast i32 %894 to <2 x bfloat>, !dbg !125
  %896 = extractelement <2 x bfloat> %889, i64 0, !dbg !125
  %897 = extractelement <2 x bfloat> %889, i64 1, !dbg !125
  %898 = extractelement <2 x bfloat> %891, i64 0, !dbg !125
  %899 = extractelement <2 x bfloat> %891, i64 1, !dbg !125
  %900 = extractelement <2 x bfloat> %893, i64 0, !dbg !125
  %901 = extractelement <2 x bfloat> %893, i64 1, !dbg !125
  %902 = extractelement <2 x bfloat> %895, i64 0, !dbg !125
  %903 = extractelement <2 x bfloat> %895, i64 1, !dbg !125
  %904 = fpext bfloat %896 to float, !dbg !126
  %905 = fpext bfloat %897 to float, !dbg !126
  %906 = fpext bfloat %898 to float, !dbg !126
  %907 = fpext bfloat %899 to float, !dbg !126
  %908 = fpext bfloat %900 to float, !dbg !126
  %909 = fpext bfloat %901 to float, !dbg !126
  %910 = fpext bfloat %902 to float, !dbg !126
  %911 = fpext bfloat %903 to float, !dbg !126
  %.inv2 = fcmp oge float %782, 0.000000e+00, !dbg !127
  %912 = select i1 %.inv2, float 0.000000e+00, float %782, !dbg !127
  %913 = fsub float 0.000000e+00, %912, !dbg !129
  %.inv3 = fcmp ole float %877, 0.000000e+00, !dbg !130
  %914 = select i1 %.inv3, float 0.000000e+00, float %877, !dbg !130
  %915 = fcmp ogt float %913, %914, !dbg !132
  %916 = fcmp uno float %913, 0.000000e+00, !dbg !134
  %917 = or i1 %916, %915, !dbg !135
  %918 = select i1 %917, float %913, float %914, !dbg !136
  %919 = fmul float %918, 0x3F80204080000000, !dbg !137
  %920 = fcmp ogt float %919, 0x3EE4F8B580000000, !dbg !138
  %921 = fcmp uno float %919, 0.000000e+00, !dbg !140
  %922 = or i1 %920, %921, !dbg !141
  %923 = select i1 %922, float %919, float 0x3EE4F8B580000000, !dbg !142
  %924 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %923), !dbg !143
  %925 = fmul float %924, %904, !dbg !144
  %926 = fmul float %924, %905, !dbg !144
  %927 = fmul float %924, %906, !dbg !144
  %928 = fmul float %924, %907, !dbg !144
  %929 = fmul float %924, %908, !dbg !144
  %930 = fmul float %924, %909, !dbg !144
  %931 = fmul float %924, %910, !dbg !144
  %932 = fmul float %924, %911, !dbg !144
  %933 = tail call float @llvm.nvvm.round.f(float %925) #5, !dbg !145
  %934 = tail call float @llvm.nvvm.round.f(float %926) #5, !dbg !145
  %935 = tail call float @llvm.nvvm.round.f(float %927) #5, !dbg !145
  %936 = tail call float @llvm.nvvm.round.f(float %928) #5, !dbg !145
  %937 = tail call float @llvm.nvvm.round.f(float %929) #5, !dbg !145
  %938 = tail call float @llvm.nvvm.round.f(float %930) #5, !dbg !145
  %939 = tail call float @llvm.nvvm.round.f(float %931) #5, !dbg !145
  %940 = tail call float @llvm.nvvm.round.f(float %932) #5, !dbg !145
  %941 = insertelement <4 x float> poison, float %933, i64 0, !dbg !146
  %942 = insertelement <4 x float> %941, float %934, i64 1, !dbg !146
  %943 = insertelement <4 x float> %942, float %935, i64 2, !dbg !146
  %944 = insertelement <4 x float> %943, float %936, i64 3, !dbg !146
  %945 = fcmp ogt <4 x float> %944, splat (float -1.270000e+02), !dbg !146
  %946 = fcmp uno <4 x float> %944, zeroinitializer, !dbg !148
  %947 = or <4 x i1> %945, %946, !dbg !149
  %948 = select <4 x i1> %947, <4 x float> %944, <4 x float> splat (float -1.270000e+02), !dbg !150
  %949 = fcmp olt <4 x float> %948, splat (float 1.270000e+02), !dbg !151
  %950 = fcmp uno <4 x float> %948, zeroinitializer, !dbg !153
  %951 = or <4 x i1> %949, %950, !dbg !154
  %952 = fptosi <4 x float> %948 to <4 x i8>, !dbg !155
  %953 = select <4 x i1> %951, <4 x i8> %952, <4 x i8> splat (i8 127), !dbg !156
  %954 = insertelement <4 x float> poison, float %937, i64 0, !dbg !146
  %955 = insertelement <4 x float> %954, float %938, i64 1, !dbg !146
  %956 = insertelement <4 x float> %955, float %939, i64 2, !dbg !146
  %957 = insertelement <4 x float> %956, float %940, i64 3, !dbg !146
  %958 = fcmp ogt <4 x float> %957, splat (float -1.270000e+02), !dbg !146
  %959 = fcmp uno <4 x float> %957, zeroinitializer, !dbg !148
  %960 = or <4 x i1> %958, %959, !dbg !149
  %961 = select <4 x i1> %960, <4 x float> %957, <4 x float> splat (float -1.270000e+02), !dbg !150
  %962 = fcmp olt <4 x float> %961, splat (float 1.270000e+02), !dbg !151
  %963 = fcmp uno <4 x float> %961, zeroinitializer, !dbg !153
  %964 = or <4 x i1> %962, %963, !dbg !154
  %965 = fptosi <4 x float> %961 to <4 x i8>, !dbg !155
  %966 = select <4 x i1> %964, <4 x i8> %965, <4 x i8> splat (i8 127), !dbg !156
  %967 = getelementptr i8, ptr addrspace(1) %12, i64 %49, !dbg !157
  %968 = bitcast <4 x i8> %953 to i32, !dbg !158
  %969 = bitcast <4 x i8> %966 to i32, !dbg !158
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %968, i32 %969, ptr addrspace(1) %967, i1 %51) #5, !dbg !158
  ret void, !dbg !159
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 36, column: 29, scope: !6)
!17 = !DILocation(line: 40, column: 46, scope: !6)
!18 = !DILocation(line: 40, column: 41, scope: !6)
!19 = !DILocation(line: 40, column: 34, scope: !6)
!20 = !DILocation(line: 40, column: 59, scope: !6)
!21 = !DILocation(line: 40, column: 51, scope: !6)
!22 = !DILocation(line: 41, column: 41, scope: !6)
!23 = !DILocation(line: 41, column: 34, scope: !6)
!24 = !DILocation(line: 41, column: 48, scope: !6)
!25 = !DILocation(line: 42, column: 34, scope: !6)
!26 = !DILocation(line: 42, column: 48, scope: !6)
!27 = !DILocation(line: 43, column: 34, scope: !6)
!28 = !DILocation(line: 43, column: 51, scope: !6)
!29 = !DILocation(line: 44, column: 35, scope: !6)
!30 = !DILocation(line: 44, column: 42, scope: !6)
!31 = !DILocation(line: 45, column: 35, scope: !6)
!32 = !DILocation(line: 45, column: 42, scope: !6)
!33 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 50, column: 44, scope: !6)
!37 = !DILocation(line: 51, column: 17, scope: !6)
!38 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !39)
!39 = !DILocation(line: 52, column: 46, scope: !6)
!40 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 53, column: 46, scope: !6)
!42 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 55, column: 24, scope: !6)
!46 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !47)
!47 = !DILocation(line: 58, column: 46, scope: !6)
!48 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !47)
!50 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !47)
!51 = !DILocation(line: 72, column: 68, scope: !6)
!52 = !DILocation(line: 73, column: 29, scope: !6)
!53 = !DILocation(line: 40, column: 113, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 45, column: 95, scope: !6)
!57 = !DILocation(line: 47, column: 22, scope: !6)
!58 = !DILocation(line: 48, column: 23, scope: !6)
!59 = !DILocation(line: 60, column: 23, scope: !6)
!60 = !DILocation(line: 61, column: 24, scope: !6)
!61 = !DILocation(line: 62, column: 24, scope: !6)
!62 = !DILocation(line: 63, column: 23, scope: !6)
!63 = !DILocation(line: 64, column: 23, scope: !6)
!64 = !DILocation(line: 70, column: 64, scope: !6)
!65 = !DILocation(line: 73, column: 53, scope: !6)
!66 = !DILocation(line: 217, column: 21, scope: !67, inlinedAt: !68)
!67 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!68 = !DILocation(line: 74, column: 85, scope: !6)
!69 = !DILocation(line: 218, column: 28, scope: !67, inlinedAt: !68)
!70 = !DILocation(line: 219, column: 39, scope: !67, inlinedAt: !68)
!71 = !DILocation(line: 219, column: 60, scope: !67, inlinedAt: !68)
!72 = !DILocation(line: 219, column: 49, scope: !67, inlinedAt: !68)
!73 = !DILocation(line: 221, column: 25, scope: !67, inlinedAt: !68)
!74 = !DILocation(line: 221, column: 17, scope: !67, inlinedAt: !68)
!75 = !DILocation(line: 222, column: 30, scope: !67, inlinedAt: !68)
!76 = !DILocation(line: 222, column: 38, scope: !67, inlinedAt: !68)
!77 = !DILocation(line: 222, column: 49, scope: !67, inlinedAt: !68)
!78 = !DILocation(line: 222, column: 22, scope: !67, inlinedAt: !68)
!79 = !DILocation(line: 229, column: 46, scope: !34, inlinedAt: !68)
!80 = !DILocation(line: 222, column: 15, scope: !67, inlinedAt: !68)
!81 = !DILocation(line: 86, column: 53, scope: !6)
!82 = !DILocation(line: 87, column: 43, scope: !6)
!83 = !DILocation(line: 87, column: 35, scope: !6)
!84 = !DILocation(line: 87, column: 50, scope: !6)
!85 = !DILocation(line: 88, column: 35, scope: !6)
!86 = !DILocation(line: 88, column: 50, scope: !6)
!87 = !DILocation(line: 89, column: 42, scope: !6)
!88 = !DILocation(line: 89, column: 35, scope: !6)
!89 = !DILocation(line: 89, column: 49, scope: !6)
!90 = !DILocation(line: 90, column: 35, scope: !6)
!91 = !DILocation(line: 90, column: 49, scope: !6)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 113, column: 29, scope: !6)
!96 = !DILocation(line: 86, column: 115, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 90, column: 102, scope: !6)
!99 = !DILocation(line: 88, column: 103, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 101, column: 24, scope: !6)
!102 = !DILocation(line: 103, column: 24, scope: !6)
!103 = !DILocation(line: 104, column: 24, scope: !6)
!104 = !DILocation(line: 106, column: 24, scope: !6)
!105 = !DILocation(line: 107, column: 24, scope: !6)
!106 = !DILocation(line: 112, column: 50, scope: !6)
!107 = !DILocation(line: 110, column: 50, scope: !6)
!108 = !DILocation(line: 113, column: 53, scope: !6)
!109 = !DILocation(line: 110, column: 29, scope: !34, inlinedAt: !110)
!110 = !DILocation(line: 114, column: 40, scope: !6)
!111 = !DILocation(line: 94, column: 15, scope: !67, inlinedAt: !110)
!112 = !DILocation(line: 96, column: 21, scope: !67, inlinedAt: !110)
!113 = !DILocation(line: 96, column: 16, scope: !67, inlinedAt: !110)
!114 = !DILocation(line: 97, column: 29, scope: !67, inlinedAt: !110)
!115 = !DILocation(line: 115, column: 29, scope: !34, inlinedAt: !116)
!116 = !DILocation(line: 115, column: 40, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !67, inlinedAt: !116)
!118 = !DILocation(line: 104, column: 21, scope: !67, inlinedAt: !116)
!119 = !DILocation(line: 104, column: 16, scope: !67, inlinedAt: !116)
!120 = !DILocation(line: 105, column: 29, scope: !67, inlinedAt: !116)
!121 = !DILocation(line: 116, column: 25, scope: !6)
!122 = !DILocation(line: 116, column: 37, scope: !6)
!123 = !DILocation(line: 117, column: 25, scope: !6)
!124 = !DILocation(line: 117, column: 37, scope: !6)
!125 = !DILocation(line: 124, column: 53, scope: !6)
!126 = !DILocation(line: 124, column: 115, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !128)
!128 = !DILocation(line: 126, column: 46, scope: !6)
!129 = !DILocation(line: 127, column: 17, scope: !6)
!130 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !131)
!131 = !DILocation(line: 128, column: 46, scope: !6)
!132 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !133)
!133 = !DILocation(line: 129, column: 46, scope: !6)
!134 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !133)
!135 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !133)
!136 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !133)
!137 = !DILocation(line: 131, column: 24, scope: !6)
!138 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !139)
!139 = !DILocation(line: 134, column: 46, scope: !6)
!140 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !139)
!141 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !139)
!142 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !139)
!143 = !DILocation(line: 137, column: 25, scope: !6)
!144 = !DILocation(line: 140, column: 24, scope: !6)
!145 = !DILocation(line: 141, column: 36, scope: !6)
!146 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !147)
!147 = !DILocation(line: 144, column: 46, scope: !6)
!148 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !147)
!149 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !147)
!150 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !147)
!151 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !152)
!152 = !DILocation(line: 146, column: 46, scope: !6)
!153 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !152)
!154 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !152)
!155 = !DILocation(line: 148, column: 25, scope: !6)
!156 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !152)
!157 = !DILocation(line: 149, column: 29, scope: !6)
!158 = !DILocation(line: 149, column: 53, scope: !6)
!159 = !DILocation(line: 118, column: 4, scope: !6)
