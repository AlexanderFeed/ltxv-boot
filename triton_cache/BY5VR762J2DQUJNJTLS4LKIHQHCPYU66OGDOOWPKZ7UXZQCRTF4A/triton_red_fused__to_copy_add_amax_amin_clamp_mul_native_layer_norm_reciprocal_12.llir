; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 512, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = shl i32 %19, 4, !dbg !11
  %22 = and i32 %21, 1008, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = or disjoint i32 %22, 8, !dbg !11
  %25 = or disjoint i32 %22, 12, !dbg !11
  %26 = shl i32 %19, 3, !dbg !11
  %27 = and i32 %26, 504, !dbg !11
  %28 = or disjoint i32 %27, 512, !dbg !11
  %29 = sext i32 %17 to i64, !dbg !12
  %30 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !12
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %18) #5, !dbg !13
  %47 = bitcast i16 %46 to bfloat, !dbg !13
  %48 = getelementptr bfloat, ptr addrspace(1) %5, i64 %29, !dbg !14
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %48, i1 %18) #5, !dbg !15
  %65 = bitcast i16 %64 to bfloat, !dbg !15
  %66 = mul i32 %17, 3072, !dbg !16
  %.inv = fcmp oge bfloat %47, 0xR0000, !dbg !17
  %67 = select i1 %.inv, bfloat 0xR0000, bfloat %47, !dbg !17
  %68 = fpext bfloat %67 to float, !dbg !17
  %69 = fsub float 0.000000e+00, %68, !dbg !21
  %.inv3 = fcmp ole bfloat %65, 0xR0000, !dbg !22
  %70 = select i1 %.inv3, bfloat 0xR0000, bfloat %65, !dbg !22
  %71 = fpext bfloat %70 to float, !dbg !22
  %72 = fcmp ogt float %69, %71, !dbg !24
  %73 = fcmp uno float %69, 0.000000e+00, !dbg !26
  %74 = or i1 %73, %72, !dbg !27
  %75 = select i1 %74, float %69, float %71, !dbg !28
  %76 = fmul float %75, 0x3F80204080000000, !dbg !29
  %77 = fcmp ogt float %76, 0x3EE4F8B580000000, !dbg !30
  %78 = fcmp uno float %76, 0.000000e+00, !dbg !32
  %79 = or i1 %77, %78, !dbg !33
  %80 = select i1 %79, float %76, float 0x3EE4F8B580000000, !dbg !34
  %81 = or disjoint i32 %27, %66
  %82 = or disjoint i32 %28, %66
  %invariant.gep = getelementptr i8, ptr addrspace(1) %1, i64 24576, !dbg !35
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %24
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %27
  %86 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28
  %87 = zext nneg i32 %25 to i64, !dbg !35
  %88 = zext nneg i32 %24 to i64, !dbg !35
  %89 = zext nneg i32 %23 to i64, !dbg !35
  %90 = zext nneg i32 %22 to i64, !dbg !35
  %91 = insertelement <16 x i1> poison, i1 %18, i64 0, !dbg !36
  %92 = shufflevector <16 x i1> %91, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !36
  %93 = insertelement <16 x float> poison, float %80, i64 0, !dbg !37
  %94 = shufflevector <16 x float> %93, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !37
  %95 = getelementptr inbounds nuw i8, ptr addrspace(3) %85, i32 4
  %96 = getelementptr inbounds nuw i8, ptr addrspace(3) %85, i32 8
  %97 = getelementptr inbounds nuw i8, ptr addrspace(3) %85, i32 12
  br label %98, !dbg !35

98:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %16 ], [ %620, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %16 ], [ %621, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %16 ], [ %622, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %16 ], [ %623, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %16 ], [ %624, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %16 ], [ %625, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %16 ], [ %626, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %16 ], [ %627, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %16 ], [ %628, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %16 ], [ %629, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %16 ], [ %630, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %16 ], [ %631, %._crit_edge ]
  %111 = phi float [ 0.000000e+00, %16 ], [ %632, %._crit_edge ]
  %112 = phi float [ 0.000000e+00, %16 ], [ %633, %._crit_edge ]
  %113 = phi float [ 0.000000e+00, %16 ], [ %634, %._crit_edge ]
  %114 = phi float [ 0.000000e+00, %16 ], [ %635, %._crit_edge ]
  %115 = phi float [ 0.000000e+00, %16 ], [ %604, %._crit_edge ]
  %116 = phi float [ 0.000000e+00, %16 ], [ %605, %._crit_edge ]
  %117 = phi float [ 0.000000e+00, %16 ], [ %606, %._crit_edge ]
  %118 = phi float [ 0.000000e+00, %16 ], [ %607, %._crit_edge ]
  %119 = phi float [ 0.000000e+00, %16 ], [ %608, %._crit_edge ]
  %120 = phi float [ 0.000000e+00, %16 ], [ %609, %._crit_edge ]
  %121 = phi float [ 0.000000e+00, %16 ], [ %610, %._crit_edge ]
  %122 = phi float [ 0.000000e+00, %16 ], [ %611, %._crit_edge ]
  %123 = phi float [ 0.000000e+00, %16 ], [ %612, %._crit_edge ]
  %124 = phi float [ 0.000000e+00, %16 ], [ %613, %._crit_edge ]
  %125 = phi float [ 0.000000e+00, %16 ], [ %614, %._crit_edge ]
  %126 = phi float [ 0.000000e+00, %16 ], [ %615, %._crit_edge ]
  %127 = phi float [ 0.000000e+00, %16 ], [ %616, %._crit_edge ]
  %128 = phi float [ 0.000000e+00, %16 ], [ %617, %._crit_edge ]
  %129 = phi float [ 0.000000e+00, %16 ], [ %618, %._crit_edge ]
  %130 = phi float [ 0.000000e+00, %16 ], [ %619, %._crit_edge ]
  %131 = phi <16 x float> [ zeroinitializer, %16 ], [ %603, %._crit_edge ]
  %132 = or disjoint i64 %indvars.iv, %90, !dbg !38
  %133 = or disjoint i64 %indvars.iv, %89, !dbg !38
  %134 = or disjoint i64 %indvars.iv, %88, !dbg !38
  %135 = or disjoint i64 %indvars.iv, %87, !dbg !38
  %136 = trunc nuw nsw i64 %132 to i32, !dbg !39
  %137 = add i32 %66, %136, !dbg !39
  %138 = trunc nuw nsw i64 %133 to i32, !dbg !39
  %139 = add i32 %66, %138, !dbg !39
  %140 = trunc nuw nsw i64 %134 to i32, !dbg !39
  %141 = add i32 %66, %140, !dbg !39
  %142 = trunc nuw nsw i64 %135 to i32, !dbg !39
  %143 = add i32 %66, %142, !dbg !39
  %144 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !39
  %145 = add i32 %81, %144, !dbg !39
  %146 = add i32 %82, %144, !dbg !39
  %147 = sext i32 %137 to i64, !dbg !40
  %148 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !40
  %149 = sext i32 %141 to i64, !dbg !40
  %150 = getelementptr bfloat, ptr addrspace(1) %0, i64 %149, !dbg !40
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %148, i1 %18) #5, !dbg !41
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !41
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !41
  %154 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !41
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !41
  %156 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !41
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !41
  %158 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !41
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !41
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %150, i1 %18) #5, !dbg !41
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !41
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !41
  %163 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !41
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !41
  %165 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !41
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !41
  %167 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !41
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !41
  %169 = add nuw nsw i64 %132, 6144, !dbg !42
  %170 = add nuw nsw i64 %134, 6144, !dbg !42
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !43
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %133, !dbg !43
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !43
  %gep163 = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %135, !dbg !43
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %171, i1 true) #5, !dbg !44
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !44
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !44
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !44
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !44
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep, i1 true) #5, !dbg !44
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !44
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !44
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !44
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !44
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %172, i1 true) #5, !dbg !44
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !44
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !44
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !44
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !44
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep163, i1 true) #5, !dbg !44
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !44
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !44
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !44
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !44
  %193 = getelementptr bfloat, ptr addrspace(1) %2, i64 %169, !dbg !45
  %194 = getelementptr bfloat, ptr addrspace(1) %2, i64 %170, !dbg !45
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %193, i1 true) #5, !dbg !46
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !46
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !46
  %198 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !46
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !46
  %200 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !46
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !46
  %202 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !46
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !46
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %194, i1 true) #5, !dbg !46
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !46
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !46
  %207 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !46
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !46
  %209 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !46
  %210 = bitcast i32 %209 to <2 x bfloat>, !dbg !46
  %211 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !46
  %212 = bitcast i32 %211 to <2 x bfloat>, !dbg !46
  %213 = getelementptr i32, ptr addrspace(1) %3, i64 %147, !dbg !47
  %214 = sext i32 %139 to i64, !dbg !47
  %215 = getelementptr i32, ptr addrspace(1) %3, i64 %214, !dbg !47
  %216 = getelementptr i32, ptr addrspace(1) %3, i64 %149, !dbg !47
  %217 = sext i32 %143 to i64, !dbg !47
  %218 = getelementptr i32, ptr addrspace(1) %3, i64 %217, !dbg !47
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %18) #5, !dbg !48
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !48
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !48
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !48
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !48
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %18) #5, !dbg !48
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !48
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !48
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !48
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !48
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %18) #5, !dbg !48
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !48
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !48
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !48
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !48
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %18) #5, !dbg !48
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !48
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !48
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !48
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !48
  %239 = getelementptr bfloat, ptr addrspace(1) %6, i64 %132, !dbg !49
  %240 = getelementptr bfloat, ptr addrspace(1) %6, i64 %134, !dbg !49
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %239, i1 true) #5, !dbg !50
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !50
  %243 = bitcast i32 %242 to <2 x bfloat>, !dbg !50
  %244 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !50
  %245 = bitcast i32 %244 to <2 x bfloat>, !dbg !50
  %246 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !50
  %247 = bitcast i32 %246 to <2 x bfloat>, !dbg !50
  %248 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !50
  %249 = bitcast i32 %248 to <2 x bfloat>, !dbg !50
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %240, i1 true) #5, !dbg !50
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !50
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !50
  %253 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !50
  %254 = bitcast i32 %253 to <2 x bfloat>, !dbg !50
  %255 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !50
  %256 = bitcast i32 %255 to <2 x bfloat>, !dbg !50
  %257 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !50
  %258 = bitcast i32 %257 to <2 x bfloat>, !dbg !50
  %259 = getelementptr bfloat, ptr addrspace(1) %7, i64 %132, !dbg !51
  %260 = getelementptr bfloat, ptr addrspace(1) %7, i64 %134, !dbg !51
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %259, i1 true) #5, !dbg !52
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !52
  %263 = bitcast i32 %262 to <2 x bfloat>, !dbg !52
  %264 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !52
  %265 = bitcast i32 %264 to <2 x bfloat>, !dbg !52
  %266 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !52
  %267 = bitcast i32 %266 to <2 x bfloat>, !dbg !52
  %268 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !52
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !52
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %260, i1 true) #5, !dbg !52
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !52
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !52
  %273 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !52
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !52
  %275 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !52
  %276 = bitcast i32 %275 to <2 x bfloat>, !dbg !52
  %277 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !52
  %278 = bitcast i32 %277 to <2 x bfloat>, !dbg !52
  %279 = shufflevector <2 x bfloat> %153, <2 x bfloat> %155, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %280 = shufflevector <2 x bfloat> %157, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %281 = shufflevector <16 x bfloat> %279, <16 x bfloat> %280, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %282 = shufflevector <2 x bfloat> %157, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %283 = shufflevector <16 x bfloat> %281, <16 x bfloat> %282, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %284 = shufflevector <2 x bfloat> %159, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %285 = shufflevector <16 x bfloat> %283, <16 x bfloat> %284, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %286 = shufflevector <2 x bfloat> %159, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %287 = shufflevector <16 x bfloat> %285, <16 x bfloat> %286, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %288 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %289 = shufflevector <16 x bfloat> %287, <16 x bfloat> %288, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %290 = shufflevector <2 x bfloat> %162, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %291 = shufflevector <16 x bfloat> %289, <16 x bfloat> %290, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %292 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %293 = shufflevector <16 x bfloat> %291, <16 x bfloat> %292, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %294 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %295 = shufflevector <16 x bfloat> %293, <16 x bfloat> %294, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %296 = shufflevector <2 x bfloat> %166, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %297 = shufflevector <16 x bfloat> %295, <16 x bfloat> %296, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !53
  %298 = shufflevector <2 x bfloat> %166, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %299 = shufflevector <16 x bfloat> %297, <16 x bfloat> %298, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !53
  %300 = shufflevector <2 x bfloat> %168, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %301 = shufflevector <16 x bfloat> %299, <16 x bfloat> %300, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !53
  %302 = shufflevector <2 x bfloat> %168, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %303 = shufflevector <16 x bfloat> %301, <16 x bfloat> %302, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !53
  %304 = fpext <16 x bfloat> %303 to <16 x float>, !dbg !53
  %305 = insertelement <16 x i32> poison, i32 %174, i64 0, !dbg !44
  %306 = insertelement <16 x i32> %305, i32 %175, i64 1, !dbg !44
  %307 = insertelement <16 x i32> %306, i32 %176, i64 2, !dbg !44
  %308 = insertelement <16 x i32> %307, i32 %177, i64 3, !dbg !44
  %309 = insertelement <16 x i32> %308, i32 %179, i64 4, !dbg !44
  %310 = insertelement <16 x i32> %309, i32 %180, i64 5, !dbg !44
  %311 = insertelement <16 x i32> %310, i32 %181, i64 6, !dbg !44
  %312 = insertelement <16 x i32> %311, i32 %182, i64 7, !dbg !44
  %313 = insertelement <16 x i32> %312, i32 %184, i64 8, !dbg !44
  %314 = insertelement <16 x i32> %313, i32 %185, i64 9, !dbg !44
  %315 = insertelement <16 x i32> %314, i32 %186, i64 10, !dbg !44
  %316 = insertelement <16 x i32> %315, i32 %187, i64 11, !dbg !44
  %317 = insertelement <16 x i32> %316, i32 %189, i64 12, !dbg !44
  %318 = insertelement <16 x i32> %317, i32 %190, i64 13, !dbg !44
  %319 = insertelement <16 x i32> %318, i32 %191, i64 14, !dbg !44
  %320 = insertelement <16 x i32> %319, i32 %192, i64 15, !dbg !44
  %321 = bitcast <16 x i32> %320 to <16 x float>, !dbg !44
  %322 = shufflevector <2 x bfloat> %197, <2 x bfloat> %199, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %323 = shufflevector <2 x bfloat> %201, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %324 = shufflevector <16 x bfloat> %322, <16 x bfloat> %323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %325 = shufflevector <2 x bfloat> %201, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %326 = shufflevector <16 x bfloat> %324, <16 x bfloat> %325, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %327 = shufflevector <2 x bfloat> %203, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %328 = shufflevector <16 x bfloat> %326, <16 x bfloat> %327, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %329 = shufflevector <2 x bfloat> %203, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %330 = shufflevector <16 x bfloat> %328, <16 x bfloat> %329, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %331 = shufflevector <2 x bfloat> %206, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %332 = shufflevector <16 x bfloat> %330, <16 x bfloat> %331, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %333 = shufflevector <2 x bfloat> %206, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %334 = shufflevector <16 x bfloat> %332, <16 x bfloat> %333, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %335 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %336 = shufflevector <16 x bfloat> %334, <16 x bfloat> %335, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %337 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %338 = shufflevector <16 x bfloat> %336, <16 x bfloat> %337, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %339 = shufflevector <2 x bfloat> %210, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %340 = shufflevector <16 x bfloat> %338, <16 x bfloat> %339, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !54
  %341 = shufflevector <2 x bfloat> %210, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %342 = shufflevector <16 x bfloat> %340, <16 x bfloat> %341, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !54
  %343 = shufflevector <2 x bfloat> %212, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %344 = shufflevector <16 x bfloat> %342, <16 x bfloat> %343, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !54
  %345 = shufflevector <2 x bfloat> %212, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %346 = shufflevector <16 x bfloat> %344, <16 x bfloat> %345, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !54
  %347 = fpext <16 x bfloat> %346 to <16 x float>, !dbg !54
  %348 = shufflevector <2 x bfloat> %243, <2 x bfloat> %245, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %349 = shufflevector <2 x bfloat> %247, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %350 = shufflevector <16 x bfloat> %348, <16 x bfloat> %349, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %351 = shufflevector <2 x bfloat> %247, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %352 = shufflevector <16 x bfloat> %350, <16 x bfloat> %351, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %353 = shufflevector <2 x bfloat> %249, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %354 = shufflevector <16 x bfloat> %352, <16 x bfloat> %353, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %355 = shufflevector <2 x bfloat> %249, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %356 = shufflevector <16 x bfloat> %354, <16 x bfloat> %355, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %357 = shufflevector <2 x bfloat> %252, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %358 = shufflevector <16 x bfloat> %356, <16 x bfloat> %357, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %359 = shufflevector <2 x bfloat> %252, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %360 = shufflevector <16 x bfloat> %358, <16 x bfloat> %359, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %361 = shufflevector <2 x bfloat> %254, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %362 = shufflevector <16 x bfloat> %360, <16 x bfloat> %361, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %363 = shufflevector <2 x bfloat> %254, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %364 = shufflevector <16 x bfloat> %362, <16 x bfloat> %363, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %365 = shufflevector <2 x bfloat> %256, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %366 = shufflevector <16 x bfloat> %364, <16 x bfloat> %365, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !55
  %367 = shufflevector <2 x bfloat> %256, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %368 = shufflevector <16 x bfloat> %366, <16 x bfloat> %367, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !55
  %369 = shufflevector <2 x bfloat> %258, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %370 = shufflevector <16 x bfloat> %368, <16 x bfloat> %369, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !55
  %371 = shufflevector <2 x bfloat> %258, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %372 = shufflevector <16 x bfloat> %370, <16 x bfloat> %371, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !55
  %373 = fpext <16 x bfloat> %372 to <16 x float>, !dbg !55
  %374 = shufflevector <2 x bfloat> %263, <2 x bfloat> %265, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %375 = shufflevector <2 x bfloat> %267, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %376 = shufflevector <16 x bfloat> %374, <16 x bfloat> %375, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %377 = shufflevector <2 x bfloat> %267, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %378 = shufflevector <16 x bfloat> %376, <16 x bfloat> %377, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %379 = shufflevector <2 x bfloat> %269, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %380 = shufflevector <16 x bfloat> %378, <16 x bfloat> %379, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %381 = shufflevector <2 x bfloat> %269, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %382 = shufflevector <16 x bfloat> %380, <16 x bfloat> %381, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %383 = shufflevector <2 x bfloat> %272, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %384 = shufflevector <16 x bfloat> %382, <16 x bfloat> %383, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %385 = shufflevector <2 x bfloat> %272, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %386 = shufflevector <16 x bfloat> %384, <16 x bfloat> %385, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %387 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %388 = shufflevector <16 x bfloat> %386, <16 x bfloat> %387, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %389 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %390 = shufflevector <16 x bfloat> %388, <16 x bfloat> %389, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %391 = shufflevector <2 x bfloat> %276, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %392 = shufflevector <16 x bfloat> %390, <16 x bfloat> %391, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !56
  %393 = shufflevector <2 x bfloat> %276, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %394 = shufflevector <16 x bfloat> %392, <16 x bfloat> %393, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !56
  %395 = shufflevector <2 x bfloat> %278, <2 x bfloat> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %396 = shufflevector <16 x bfloat> %394, <16 x bfloat> %395, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !56
  %397 = shufflevector <2 x bfloat> %278, <2 x bfloat> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !56
  %398 = shufflevector <16 x bfloat> %396, <16 x bfloat> %397, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !56
  %399 = fpext <16 x bfloat> %398 to <16 x float>, !dbg !56
  %400 = fadd <16 x float> %321, %347, !dbg !57
  %401 = insertelement <16 x i32> poison, i32 %220, i64 0, !dbg !58
  %402 = insertelement <16 x i32> %401, i32 %221, i64 1, !dbg !58
  %403 = insertelement <16 x i32> %402, i32 %222, i64 2, !dbg !58
  %404 = insertelement <16 x i32> %403, i32 %223, i64 3, !dbg !58
  %405 = insertelement <16 x i32> %404, i32 %225, i64 4, !dbg !58
  %406 = insertelement <16 x i32> %405, i32 %226, i64 5, !dbg !58
  %407 = insertelement <16 x i32> %406, i32 %227, i64 6, !dbg !58
  %408 = insertelement <16 x i32> %407, i32 %228, i64 7, !dbg !58
  %409 = insertelement <16 x i32> %408, i32 %230, i64 8, !dbg !58
  %410 = insertelement <16 x i32> %409, i32 %231, i64 9, !dbg !58
  %411 = insertelement <16 x i32> %410, i32 %232, i64 10, !dbg !58
  %412 = insertelement <16 x i32> %411, i32 %233, i64 11, !dbg !58
  %413 = insertelement <16 x i32> %412, i32 %235, i64 12, !dbg !58
  %414 = insertelement <16 x i32> %413, i32 %236, i64 13, !dbg !58
  %415 = insertelement <16 x i32> %414, i32 %237, i64 14, !dbg !58
  %416 = insertelement <16 x i32> %415, i32 %238, i64 15, !dbg !58
  %417 = sitofp <16 x i32> %416 to <16 x float>, !dbg !58
  %418 = fmul <16 x float> %94, %417, !dbg !37
  %419 = fmul <16 x float> %418, %373, !dbg !59
  %420 = fadd <16 x float> %419, %399, !dbg !60
  %421 = fmul <16 x float> %400, %420, !dbg !61
  %422 = fadd <16 x float> %421, %304, !dbg !62
  %423 = icmp eq i64 %indvars.iv, 0, !dbg !63
  br i1 %423, label %._crit_edge, label %424, !dbg !64

424:                                              ; preds = %98
  %425 = fsub <16 x float> %422, %131, !dbg !66
  %426 = extractelement <16 x float> %425, i64 0, !dbg !66
  %427 = fsub <16 x float> %422, %131, !dbg !66
  %428 = extractelement <16 x float> %427, i64 1, !dbg !66
  %429 = fsub <16 x float> %422, %131, !dbg !66
  %430 = extractelement <16 x float> %429, i64 2, !dbg !66
  %431 = fsub <16 x float> %422, %131, !dbg !66
  %432 = extractelement <16 x float> %431, i64 3, !dbg !66
  %433 = fsub <16 x float> %422, %131, !dbg !66
  %434 = extractelement <16 x float> %433, i64 4, !dbg !66
  %435 = fsub <16 x float> %422, %131, !dbg !66
  %436 = extractelement <16 x float> %435, i64 5, !dbg !66
  %437 = fsub <16 x float> %422, %131, !dbg !66
  %438 = extractelement <16 x float> %437, i64 6, !dbg !66
  %439 = fsub <16 x float> %422, %131, !dbg !66
  %440 = extractelement <16 x float> %439, i64 7, !dbg !66
  %441 = fsub <16 x float> %422, %131, !dbg !66
  %442 = extractelement <16 x float> %441, i64 8, !dbg !66
  %443 = fsub <16 x float> %422, %131, !dbg !66
  %444 = extractelement <16 x float> %443, i64 9, !dbg !66
  %445 = fsub <16 x float> %422, %131, !dbg !66
  %446 = extractelement <16 x float> %445, i64 10, !dbg !66
  %447 = fsub <16 x float> %422, %131, !dbg !66
  %448 = extractelement <16 x float> %447, i64 11, !dbg !66
  %449 = fsub <16 x float> %422, %131, !dbg !66
  %450 = extractelement <16 x float> %449, i64 12, !dbg !66
  %451 = fsub <16 x float> %422, %131, !dbg !66
  %452 = extractelement <16 x float> %451, i64 13, !dbg !66
  %453 = fsub <16 x float> %422, %131, !dbg !66
  %454 = extractelement <16 x float> %453, i64 14, !dbg !66
  %455 = fsub <16 x float> %422, %131, !dbg !66
  %456 = extractelement <16 x float> %455, i64 15, !dbg !66
  %457 = fadd float %99, 1.000000e+00, !dbg !67
  %458 = fadd float %100, 1.000000e+00, !dbg !67
  %459 = fadd float %101, 1.000000e+00, !dbg !67
  %460 = fadd float %102, 1.000000e+00, !dbg !67
  %461 = fadd float %103, 1.000000e+00, !dbg !67
  %462 = fadd float %104, 1.000000e+00, !dbg !67
  %463 = fadd float %105, 1.000000e+00, !dbg !67
  %464 = fadd float %106, 1.000000e+00, !dbg !67
  %465 = fadd float %107, 1.000000e+00, !dbg !67
  %466 = fadd float %108, 1.000000e+00, !dbg !67
  %467 = fadd float %109, 1.000000e+00, !dbg !67
  %468 = fadd float %110, 1.000000e+00, !dbg !67
  %469 = fadd float %111, 1.000000e+00, !dbg !67
  %470 = fadd float %112, 1.000000e+00, !dbg !67
  %471 = fadd float %113, 1.000000e+00, !dbg !67
  %472 = fadd float %114, 1.000000e+00, !dbg !67
  %473 = tail call float @llvm.nvvm.div.full(float %426, float %457), !dbg !68
  %474 = tail call float @llvm.nvvm.div.full(float %428, float %458), !dbg !68
  %475 = tail call float @llvm.nvvm.div.full(float %430, float %459), !dbg !68
  %476 = tail call float @llvm.nvvm.div.full(float %432, float %460), !dbg !68
  %477 = tail call float @llvm.nvvm.div.full(float %434, float %461), !dbg !68
  %478 = tail call float @llvm.nvvm.div.full(float %436, float %462), !dbg !68
  %479 = tail call float @llvm.nvvm.div.full(float %438, float %463), !dbg !68
  %480 = tail call float @llvm.nvvm.div.full(float %440, float %464), !dbg !68
  %481 = tail call float @llvm.nvvm.div.full(float %442, float %465), !dbg !68
  %482 = tail call float @llvm.nvvm.div.full(float %444, float %466), !dbg !68
  %483 = tail call float @llvm.nvvm.div.full(float %446, float %467), !dbg !68
  %484 = tail call float @llvm.nvvm.div.full(float %448, float %468), !dbg !68
  %485 = tail call float @llvm.nvvm.div.full(float %450, float %469), !dbg !68
  %486 = tail call float @llvm.nvvm.div.full(float %452, float %470), !dbg !68
  %487 = tail call float @llvm.nvvm.div.full(float %454, float %471), !dbg !68
  %488 = tail call float @llvm.nvvm.div.full(float %456, float %472), !dbg !68
  %489 = insertelement <16 x float> poison, float %473, i64 0, !dbg !69
  %490 = insertelement <16 x float> %489, float %474, i64 1, !dbg !69
  %491 = insertelement <16 x float> %490, float %475, i64 2, !dbg !69
  %492 = insertelement <16 x float> %491, float %476, i64 3, !dbg !69
  %493 = insertelement <16 x float> %492, float %477, i64 4, !dbg !69
  %494 = insertelement <16 x float> %493, float %478, i64 5, !dbg !69
  %495 = insertelement <16 x float> %494, float %479, i64 6, !dbg !69
  %496 = insertelement <16 x float> %495, float %480, i64 7, !dbg !69
  %497 = insertelement <16 x float> %496, float %481, i64 8, !dbg !69
  %498 = insertelement <16 x float> %497, float %482, i64 9, !dbg !69
  %499 = insertelement <16 x float> %498, float %483, i64 10, !dbg !69
  %500 = insertelement <16 x float> %499, float %484, i64 11, !dbg !69
  %501 = insertelement <16 x float> %500, float %485, i64 12, !dbg !69
  %502 = insertelement <16 x float> %501, float %486, i64 13, !dbg !69
  %503 = insertelement <16 x float> %502, float %487, i64 14, !dbg !69
  %504 = insertelement <16 x float> %503, float %488, i64 15, !dbg !69
  %505 = fadd <16 x float> %131, %504, !dbg !69
  %506 = fsub <16 x float> %422, %505, !dbg !70
  %507 = fsub <16 x float> %422, %505, !dbg !70
  %508 = fsub <16 x float> %422, %505, !dbg !70
  %509 = fsub <16 x float> %422, %505, !dbg !70
  %510 = fsub <16 x float> %422, %505, !dbg !70
  %511 = fsub <16 x float> %422, %505, !dbg !70
  %512 = fsub <16 x float> %422, %505, !dbg !70
  %513 = fsub <16 x float> %422, %505, !dbg !70
  %514 = fsub <16 x float> %422, %505, !dbg !70
  %515 = fsub <16 x float> %422, %505, !dbg !70
  %516 = fsub <16 x float> %422, %505, !dbg !70
  %517 = fsub <16 x float> %422, %505, !dbg !70
  %518 = fsub <16 x float> %422, %505, !dbg !70
  %519 = fsub <16 x float> %422, %505, !dbg !70
  %520 = fsub <16 x float> %422, %505, !dbg !70
  %521 = fsub <16 x float> %422, %505, !dbg !70
  %522 = fmul <16 x float> %425, %506, !dbg !71
  %523 = extractelement <16 x float> %522, i64 0, !dbg !71
  %524 = fmul <16 x float> %427, %507, !dbg !71
  %525 = extractelement <16 x float> %524, i64 1, !dbg !71
  %526 = fmul <16 x float> %429, %508, !dbg !71
  %527 = extractelement <16 x float> %526, i64 2, !dbg !71
  %528 = fmul <16 x float> %431, %509, !dbg !71
  %529 = extractelement <16 x float> %528, i64 3, !dbg !71
  %530 = fmul <16 x float> %433, %510, !dbg !71
  %531 = extractelement <16 x float> %530, i64 4, !dbg !71
  %532 = fmul <16 x float> %435, %511, !dbg !71
  %533 = extractelement <16 x float> %532, i64 5, !dbg !71
  %534 = fmul <16 x float> %437, %512, !dbg !71
  %535 = extractelement <16 x float> %534, i64 6, !dbg !71
  %536 = fmul <16 x float> %439, %513, !dbg !71
  %537 = extractelement <16 x float> %536, i64 7, !dbg !71
  %538 = fmul <16 x float> %441, %514, !dbg !71
  %539 = extractelement <16 x float> %538, i64 8, !dbg !71
  %540 = fmul <16 x float> %443, %515, !dbg !71
  %541 = extractelement <16 x float> %540, i64 9, !dbg !71
  %542 = fmul <16 x float> %445, %516, !dbg !71
  %543 = extractelement <16 x float> %542, i64 10, !dbg !71
  %544 = fmul <16 x float> %447, %517, !dbg !71
  %545 = extractelement <16 x float> %544, i64 11, !dbg !71
  %546 = fmul <16 x float> %449, %518, !dbg !71
  %547 = extractelement <16 x float> %546, i64 12, !dbg !71
  %548 = fmul <16 x float> %451, %519, !dbg !71
  %549 = extractelement <16 x float> %548, i64 13, !dbg !71
  %550 = fmul <16 x float> %453, %520, !dbg !71
  %551 = extractelement <16 x float> %550, i64 14, !dbg !71
  %552 = fmul <16 x float> %455, %521, !dbg !71
  %553 = extractelement <16 x float> %552, i64 15, !dbg !71
  %554 = fadd float %115, %523, !dbg !72
  %555 = fadd float %116, %525, !dbg !72
  %556 = fadd float %117, %527, !dbg !72
  %557 = fadd float %118, %529, !dbg !72
  %558 = fadd float %119, %531, !dbg !72
  %559 = fadd float %120, %533, !dbg !72
  %560 = fadd float %121, %535, !dbg !72
  %561 = fadd float %122, %537, !dbg !72
  %562 = fadd float %123, %539, !dbg !72
  %563 = fadd float %124, %541, !dbg !72
  %564 = fadd float %125, %543, !dbg !72
  %565 = fadd float %126, %545, !dbg !72
  %566 = fadd float %127, %547, !dbg !72
  %567 = fadd float %128, %549, !dbg !72
  %568 = fadd float %129, %551, !dbg !72
  %569 = fadd float %130, %553, !dbg !72
  br label %._crit_edge, !dbg !64

._crit_edge:                                      ; preds = %98, %424
  %570 = phi float [ %554, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %571 = phi float [ %555, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %572 = phi float [ %556, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %573 = phi float [ %557, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %574 = phi float [ %558, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %575 = phi float [ %559, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %576 = phi float [ %560, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %577 = phi float [ %561, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %578 = phi float [ %562, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %579 = phi float [ %563, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %580 = phi float [ %564, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %581 = phi float [ %565, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %582 = phi float [ %566, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %583 = phi float [ %567, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %584 = phi float [ %568, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %585 = phi float [ %569, %424 ], [ 0.000000e+00, %98 ], !dbg !65
  %586 = phi float [ %457, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %587 = phi float [ %458, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %588 = phi float [ %459, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %589 = phi float [ %460, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %590 = phi float [ %461, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %591 = phi float [ %462, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %592 = phi float [ %463, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %593 = phi float [ %464, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %594 = phi float [ %465, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %595 = phi float [ %466, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %596 = phi float [ %467, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %597 = phi float [ %468, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %598 = phi float [ %469, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %599 = phi float [ %470, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %600 = phi float [ %471, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %601 = phi float [ %472, %424 ], [ 1.000000e+00, %98 ], !dbg !65
  %602 = phi <16 x float> [ %505, %424 ], [ %422, %98 ]
  %603 = select <16 x i1> %92, <16 x float> %602, <16 x float> %131, !dbg !36
  %604 = select i1 %18, float %570, float %115, !dbg !73
  %605 = select i1 %18, float %571, float %116, !dbg !73
  %606 = select i1 %18, float %572, float %117, !dbg !73
  %607 = select i1 %18, float %573, float %118, !dbg !73
  %608 = select i1 %18, float %574, float %119, !dbg !73
  %609 = select i1 %18, float %575, float %120, !dbg !73
  %610 = select i1 %18, float %576, float %121, !dbg !73
  %611 = select i1 %18, float %577, float %122, !dbg !73
  %612 = select i1 %18, float %578, float %123, !dbg !73
  %613 = select i1 %18, float %579, float %124, !dbg !73
  %614 = select i1 %18, float %580, float %125, !dbg !73
  %615 = select i1 %18, float %581, float %126, !dbg !73
  %616 = select i1 %18, float %582, float %127, !dbg !73
  %617 = select i1 %18, float %583, float %128, !dbg !73
  %618 = select i1 %18, float %584, float %129, !dbg !73
  %619 = select i1 %18, float %585, float %130, !dbg !73
  %620 = select i1 %18, float %586, float %99, !dbg !74
  %621 = select i1 %18, float %587, float %100, !dbg !74
  %622 = select i1 %18, float %588, float %101, !dbg !74
  %623 = select i1 %18, float %589, float %102, !dbg !74
  %624 = select i1 %18, float %590, float %103, !dbg !74
  %625 = select i1 %18, float %591, float %104, !dbg !74
  %626 = select i1 %18, float %592, float %105, !dbg !74
  %627 = select i1 %18, float %593, float %106, !dbg !74
  %628 = select i1 %18, float %594, float %107, !dbg !74
  %629 = select i1 %18, float %595, float %108, !dbg !74
  %630 = select i1 %18, float %596, float %109, !dbg !74
  %631 = select i1 %18, float %597, float %110, !dbg !74
  %632 = select i1 %18, float %598, float %111, !dbg !74
  %633 = select i1 %18, float %599, float %112, !dbg !74
  %634 = select i1 %18, float %600, float %113, !dbg !74
  %635 = select i1 %18, float %601, float %114, !dbg !74
  %636 = sext i32 %145 to i64, !dbg !75
  %637 = getelementptr bfloat, ptr addrspace(1) %8, i64 %636, !dbg !75
  %638 = sext i32 %146 to i64, !dbg !75
  %639 = getelementptr bfloat, ptr addrspace(1) %8, i64 %638, !dbg !75
  %640 = extractelement <16 x float> %422, i64 0, !dbg !76
  %641 = fptrunc float %640 to bfloat, !dbg !76
  %642 = extractelement <16 x float> %422, i64 1, !dbg !76
  %643 = fptrunc float %642 to bfloat, !dbg !76
  %644 = extractelement <16 x float> %422, i64 2, !dbg !76
  %645 = fptrunc float %644 to bfloat, !dbg !76
  %646 = extractelement <16 x float> %422, i64 3, !dbg !76
  %647 = fptrunc float %646 to bfloat, !dbg !76
  %648 = extractelement <16 x float> %422, i64 4, !dbg !76
  %649 = fptrunc float %648 to bfloat, !dbg !76
  %650 = extractelement <16 x float> %422, i64 5, !dbg !76
  %651 = fptrunc float %650 to bfloat, !dbg !76
  %652 = extractelement <16 x float> %422, i64 6, !dbg !76
  %653 = fptrunc float %652 to bfloat, !dbg !76
  %654 = extractelement <16 x float> %422, i64 7, !dbg !76
  %655 = fptrunc float %654 to bfloat, !dbg !76
  %656 = extractelement <16 x float> %422, i64 8, !dbg !76
  %657 = fptrunc float %656 to bfloat, !dbg !76
  %658 = extractelement <16 x float> %422, i64 9, !dbg !76
  %659 = fptrunc float %658 to bfloat, !dbg !76
  %660 = extractelement <16 x float> %422, i64 10, !dbg !76
  %661 = fptrunc float %660 to bfloat, !dbg !76
  %662 = extractelement <16 x float> %422, i64 11, !dbg !76
  %663 = fptrunc float %662 to bfloat, !dbg !76
  %664 = extractelement <16 x float> %422, i64 12, !dbg !76
  %665 = fptrunc float %664 to bfloat, !dbg !76
  %666 = extractelement <16 x float> %422, i64 13, !dbg !76
  %667 = fptrunc float %666 to bfloat, !dbg !76
  %668 = extractelement <16 x float> %422, i64 14, !dbg !76
  %669 = fptrunc float %668 to bfloat, !dbg !76
  %670 = extractelement <16 x float> %422, i64 15, !dbg !76
  %671 = fptrunc float %670 to bfloat, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %672 = insertelement <2 x bfloat> poison, bfloat %641, i64 0, !dbg !76
  %673 = insertelement <2 x bfloat> %672, bfloat %643, i64 1, !dbg !76
  %674 = bitcast <2 x bfloat> %673 to i32, !dbg !76
  %675 = insertelement <2 x bfloat> poison, bfloat %645, i64 0, !dbg !76
  %676 = insertelement <2 x bfloat> %675, bfloat %647, i64 1, !dbg !76
  %677 = bitcast <2 x bfloat> %676 to i32, !dbg !76
  %678 = insertelement <2 x bfloat> poison, bfloat %649, i64 0, !dbg !76
  %679 = insertelement <2 x bfloat> %678, bfloat %651, i64 1, !dbg !76
  %680 = bitcast <2 x bfloat> %679 to i32, !dbg !76
  %681 = insertelement <2 x bfloat> poison, bfloat %653, i64 0, !dbg !76
  %682 = insertelement <2 x bfloat> %681, bfloat %655, i64 1, !dbg !76
  %683 = bitcast <2 x bfloat> %682 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %83, i32 %674, i32 %677, i32 %680, i32 %683, i1 true) #5, !dbg !76
  %684 = insertelement <2 x bfloat> poison, bfloat %657, i64 0, !dbg !76
  %685 = insertelement <2 x bfloat> %684, bfloat %659, i64 1, !dbg !76
  %686 = bitcast <2 x bfloat> %685 to i32, !dbg !76
  %687 = insertelement <2 x bfloat> poison, bfloat %661, i64 0, !dbg !76
  %688 = insertelement <2 x bfloat> %687, bfloat %663, i64 1, !dbg !76
  %689 = bitcast <2 x bfloat> %688 to i32, !dbg !76
  %690 = insertelement <2 x bfloat> poison, bfloat %665, i64 0, !dbg !76
  %691 = insertelement <2 x bfloat> %690, bfloat %667, i64 1, !dbg !76
  %692 = bitcast <2 x bfloat> %691 to i32, !dbg !76
  %693 = insertelement <2 x bfloat> poison, bfloat %669, i64 0, !dbg !76
  %694 = insertelement <2 x bfloat> %693, bfloat %671, i64 1, !dbg !76
  %695 = bitcast <2 x bfloat> %694 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %84, i32 %686, i32 %689, i32 %692, i32 %695, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %696 = load <4 x i32>, ptr addrspace(3) %86, align 16, !dbg !76
  %.extract143 = load i32, ptr addrspace(3) %85, align 16, !dbg !76
  %.extract145 = load i32, ptr addrspace(3) %95, align 4, !dbg !76
  %.extract147 = load i32, ptr addrspace(3) %96, align 8, !dbg !76
  %.extract149 = load i32, ptr addrspace(3) %97, align 4, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract143, i32 %.extract145, i32 %.extract147, i32 %.extract149, ptr addrspace(1) %637, i1 %18) #5, !dbg !76
  %.extract151 = extractelement <4 x i32> %696, i64 0, !dbg !76
  %.extract153 = extractelement <4 x i32> %696, i64 1, !dbg !76
  %.extract155 = extractelement <4 x i32> %696, i64 2, !dbg !76
  %.extract157 = extractelement <4 x i32> %696, i64 3, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract151, i32 %.extract153, i32 %.extract155, i32 %.extract157, ptr addrspace(1) %639, i1 %18) #5, !dbg !76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !35
  %697 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !35
  br i1 %697, label %98, label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %698 = lshr i32 %19, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %699 = extractelement <16 x float> %603, i64 0, !dbg !79
  %700 = extractelement <16 x float> %603, i64 1, !dbg !79
  %701 = fsub float %700, %699, !dbg !79
  %702 = fadd float %620, %621, !dbg !81
  %703 = fcmp oeq float %702, 0.000000e+00, !dbg !82
  %704 = tail call float @llvm.nvvm.div.full(float %621, float %702), !dbg !83
  %705 = select i1 %703, float 0.000000e+00, float %704, !dbg !84
  %706 = fmul float %701, %705, !dbg !85
  %707 = fadd float %699, %706, !dbg !86
  %708 = fadd float %604, %605, !dbg !87
  %709 = fmul float %701, %701, !dbg !88
  %710 = fmul float %709, %620, !dbg !89
  %711 = fmul float %710, %705, !dbg !90
  %712 = fadd float %708, %711, !dbg !91
  %713 = extractelement <16 x float> %603, i64 2, !dbg !79
  %714 = fsub float %713, %707, !dbg !79
  %715 = fadd float %622, %702, !dbg !81
  %716 = fcmp oeq float %715, 0.000000e+00, !dbg !82
  %717 = tail call float @llvm.nvvm.div.full(float %622, float %715), !dbg !83
  %718 = select i1 %716, float 0.000000e+00, float %717, !dbg !84
  %719 = fmul float %718, %714, !dbg !85
  %720 = fadd float %707, %719, !dbg !86
  %721 = fadd float %606, %712, !dbg !87
  %722 = fmul float %714, %714, !dbg !88
  %723 = fmul float %702, %722, !dbg !89
  %724 = fmul float %718, %723, !dbg !90
  %725 = fadd float %721, %724, !dbg !91
  %726 = extractelement <16 x float> %603, i64 3, !dbg !79
  %727 = fsub float %726, %720, !dbg !79
  %728 = fadd float %623, %715, !dbg !81
  %729 = fcmp oeq float %728, 0.000000e+00, !dbg !82
  %730 = tail call float @llvm.nvvm.div.full(float %623, float %728), !dbg !83
  %731 = select i1 %729, float 0.000000e+00, float %730, !dbg !84
  %732 = fmul float %731, %727, !dbg !85
  %733 = fadd float %720, %732, !dbg !86
  %734 = fadd float %607, %725, !dbg !87
  %735 = fmul float %727, %727, !dbg !88
  %736 = fmul float %715, %735, !dbg !89
  %737 = fmul float %731, %736, !dbg !90
  %738 = fadd float %734, %737, !dbg !91
  %739 = extractelement <16 x float> %603, i64 4, !dbg !79
  %740 = fsub float %739, %733, !dbg !79
  %741 = fadd float %624, %728, !dbg !81
  %742 = fcmp oeq float %741, 0.000000e+00, !dbg !82
  %743 = tail call float @llvm.nvvm.div.full(float %624, float %741), !dbg !83
  %744 = select i1 %742, float 0.000000e+00, float %743, !dbg !84
  %745 = fmul float %744, %740, !dbg !85
  %746 = fadd float %733, %745, !dbg !86
  %747 = fadd float %608, %738, !dbg !87
  %748 = fmul float %740, %740, !dbg !88
  %749 = fmul float %728, %748, !dbg !89
  %750 = fmul float %744, %749, !dbg !90
  %751 = fadd float %747, %750, !dbg !91
  %752 = extractelement <16 x float> %603, i64 5, !dbg !79
  %753 = fsub float %752, %746, !dbg !79
  %754 = fadd float %625, %741, !dbg !81
  %755 = fcmp oeq float %754, 0.000000e+00, !dbg !82
  %756 = tail call float @llvm.nvvm.div.full(float %625, float %754), !dbg !83
  %757 = select i1 %755, float 0.000000e+00, float %756, !dbg !84
  %758 = fmul float %757, %753, !dbg !85
  %759 = fadd float %746, %758, !dbg !86
  %760 = fadd float %609, %751, !dbg !87
  %761 = fmul float %753, %753, !dbg !88
  %762 = fmul float %741, %761, !dbg !89
  %763 = fmul float %757, %762, !dbg !90
  %764 = fadd float %760, %763, !dbg !91
  %765 = extractelement <16 x float> %603, i64 6, !dbg !79
  %766 = fsub float %765, %759, !dbg !79
  %767 = fadd float %626, %754, !dbg !81
  %768 = fcmp oeq float %767, 0.000000e+00, !dbg !82
  %769 = tail call float @llvm.nvvm.div.full(float %626, float %767), !dbg !83
  %770 = select i1 %768, float 0.000000e+00, float %769, !dbg !84
  %771 = fmul float %770, %766, !dbg !85
  %772 = fadd float %759, %771, !dbg !86
  %773 = fadd float %610, %764, !dbg !87
  %774 = fmul float %766, %766, !dbg !88
  %775 = fmul float %754, %774, !dbg !89
  %776 = fmul float %770, %775, !dbg !90
  %777 = fadd float %773, %776, !dbg !91
  %778 = extractelement <16 x float> %603, i64 7, !dbg !79
  %779 = fsub float %778, %772, !dbg !79
  %780 = fadd float %627, %767, !dbg !81
  %781 = fcmp oeq float %780, 0.000000e+00, !dbg !82
  %782 = tail call float @llvm.nvvm.div.full(float %627, float %780), !dbg !83
  %783 = select i1 %781, float 0.000000e+00, float %782, !dbg !84
  %784 = fmul float %783, %779, !dbg !85
  %785 = fadd float %772, %784, !dbg !86
  %786 = fadd float %611, %777, !dbg !87
  %787 = fmul float %779, %779, !dbg !88
  %788 = fmul float %767, %787, !dbg !89
  %789 = fmul float %783, %788, !dbg !90
  %790 = fadd float %786, %789, !dbg !91
  %791 = extractelement <16 x float> %603, i64 8, !dbg !79
  %792 = fsub float %791, %785, !dbg !79
  %793 = fadd float %628, %780, !dbg !81
  %794 = fcmp oeq float %793, 0.000000e+00, !dbg !82
  %795 = tail call float @llvm.nvvm.div.full(float %628, float %793), !dbg !83
  %796 = select i1 %794, float 0.000000e+00, float %795, !dbg !84
  %797 = fmul float %796, %792, !dbg !85
  %798 = fadd float %785, %797, !dbg !86
  %799 = fadd float %612, %790, !dbg !87
  %800 = fmul float %792, %792, !dbg !88
  %801 = fmul float %780, %800, !dbg !89
  %802 = fmul float %796, %801, !dbg !90
  %803 = fadd float %799, %802, !dbg !91
  %804 = extractelement <16 x float> %603, i64 9, !dbg !79
  %805 = fsub float %804, %798, !dbg !79
  %806 = fadd float %629, %793, !dbg !81
  %807 = fcmp oeq float %806, 0.000000e+00, !dbg !82
  %808 = tail call float @llvm.nvvm.div.full(float %629, float %806), !dbg !83
  %809 = select i1 %807, float 0.000000e+00, float %808, !dbg !84
  %810 = fmul float %809, %805, !dbg !85
  %811 = fadd float %798, %810, !dbg !86
  %812 = fadd float %613, %803, !dbg !87
  %813 = fmul float %805, %805, !dbg !88
  %814 = fmul float %793, %813, !dbg !89
  %815 = fmul float %809, %814, !dbg !90
  %816 = fadd float %812, %815, !dbg !91
  %817 = extractelement <16 x float> %603, i64 10, !dbg !79
  %818 = fsub float %817, %811, !dbg !79
  %819 = fadd float %630, %806, !dbg !81
  %820 = fcmp oeq float %819, 0.000000e+00, !dbg !82
  %821 = tail call float @llvm.nvvm.div.full(float %630, float %819), !dbg !83
  %822 = select i1 %820, float 0.000000e+00, float %821, !dbg !84
  %823 = fmul float %822, %818, !dbg !85
  %824 = fadd float %811, %823, !dbg !86
  %825 = fadd float %614, %816, !dbg !87
  %826 = fmul float %818, %818, !dbg !88
  %827 = fmul float %806, %826, !dbg !89
  %828 = fmul float %822, %827, !dbg !90
  %829 = fadd float %825, %828, !dbg !91
  %830 = extractelement <16 x float> %603, i64 11, !dbg !79
  %831 = fsub float %830, %824, !dbg !79
  %832 = fadd float %631, %819, !dbg !81
  %833 = fcmp oeq float %832, 0.000000e+00, !dbg !82
  %834 = tail call float @llvm.nvvm.div.full(float %631, float %832), !dbg !83
  %835 = select i1 %833, float 0.000000e+00, float %834, !dbg !84
  %836 = fmul float %835, %831, !dbg !85
  %837 = fadd float %824, %836, !dbg !86
  %838 = fadd float %615, %829, !dbg !87
  %839 = fmul float %831, %831, !dbg !88
  %840 = fmul float %819, %839, !dbg !89
  %841 = fmul float %835, %840, !dbg !90
  %842 = fadd float %838, %841, !dbg !91
  %843 = extractelement <16 x float> %603, i64 12, !dbg !79
  %844 = fsub float %843, %837, !dbg !79
  %845 = fadd float %632, %832, !dbg !81
  %846 = fcmp oeq float %845, 0.000000e+00, !dbg !82
  %847 = tail call float @llvm.nvvm.div.full(float %632, float %845), !dbg !83
  %848 = select i1 %846, float 0.000000e+00, float %847, !dbg !84
  %849 = fmul float %848, %844, !dbg !85
  %850 = fadd float %837, %849, !dbg !86
  %851 = fadd float %616, %842, !dbg !87
  %852 = fmul float %844, %844, !dbg !88
  %853 = fmul float %832, %852, !dbg !89
  %854 = fmul float %848, %853, !dbg !90
  %855 = fadd float %851, %854, !dbg !91
  %856 = extractelement <16 x float> %603, i64 13, !dbg !79
  %857 = fsub float %856, %850, !dbg !79
  %858 = fadd float %633, %845, !dbg !81
  %859 = fcmp oeq float %858, 0.000000e+00, !dbg !82
  %860 = tail call float @llvm.nvvm.div.full(float %633, float %858), !dbg !83
  %861 = select i1 %859, float 0.000000e+00, float %860, !dbg !84
  %862 = fmul float %861, %857, !dbg !85
  %863 = fadd float %850, %862, !dbg !86
  %864 = fadd float %617, %855, !dbg !87
  %865 = fmul float %857, %857, !dbg !88
  %866 = fmul float %845, %865, !dbg !89
  %867 = fmul float %861, %866, !dbg !90
  %868 = fadd float %864, %867, !dbg !91
  %869 = extractelement <16 x float> %603, i64 14, !dbg !79
  %870 = fsub float %869, %863, !dbg !79
  %871 = fadd float %634, %858, !dbg !81
  %872 = fcmp oeq float %871, 0.000000e+00, !dbg !82
  %873 = tail call float @llvm.nvvm.div.full(float %634, float %871), !dbg !83
  %874 = select i1 %872, float 0.000000e+00, float %873, !dbg !84
  %875 = fmul float %874, %870, !dbg !85
  %876 = fadd float %863, %875, !dbg !86
  %877 = fadd float %618, %868, !dbg !87
  %878 = fmul float %870, %870, !dbg !88
  %879 = fmul float %858, %878, !dbg !89
  %880 = fmul float %874, %879, !dbg !90
  %881 = fadd float %877, %880, !dbg !91
  %882 = extractelement <16 x float> %603, i64 15, !dbg !79
  %883 = fsub float %882, %876, !dbg !79
  %884 = fadd float %635, %871, !dbg !81
  %885 = fcmp oeq float %884, 0.000000e+00, !dbg !82
  %886 = tail call float @llvm.nvvm.div.full(float %635, float %884), !dbg !83
  %887 = select i1 %885, float 0.000000e+00, float %886, !dbg !84
  %888 = fmul float %887, %883, !dbg !85
  %889 = fadd float %876, %888, !dbg !86
  %890 = fadd float %619, %881, !dbg !87
  %891 = fmul float %883, %883, !dbg !88
  %892 = fmul float %871, %891, !dbg !89
  %893 = fmul float %887, %892, !dbg !90
  %894 = fadd float %890, %893, !dbg !91
  %895 = bitcast float %889 to i32, !dbg !77
  %896 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %895, i32 16, i32 31), !dbg !77
  %897 = bitcast i32 %896 to float, !dbg !77
  %898 = bitcast float %894 to i32, !dbg !77
  %899 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %898, i32 16, i32 31), !dbg !77
  %900 = bitcast i32 %899 to float, !dbg !77
  %901 = bitcast float %884 to i32, !dbg !77
  %902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %901, i32 16, i32 31), !dbg !77
  %903 = bitcast i32 %902 to float, !dbg !77
  %904 = fsub float %897, %889, !dbg !79
  %905 = fadd float %884, %903, !dbg !81
  %906 = fcmp oeq float %905, 0.000000e+00, !dbg !82
  %907 = tail call float @llvm.nvvm.div.full(float %903, float %905), !dbg !83
  %908 = select i1 %906, float 0.000000e+00, float %907, !dbg !84
  %909 = fmul float %908, %904, !dbg !85
  %910 = fadd float %889, %909, !dbg !86
  %911 = fadd float %894, %900, !dbg !87
  %912 = fmul float %904, %904, !dbg !88
  %913 = fmul float %884, %912, !dbg !89
  %914 = fmul float %908, %913, !dbg !90
  %915 = fadd float %911, %914, !dbg !91
  %916 = bitcast float %910 to i32, !dbg !77
  %917 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %916, i32 8, i32 31), !dbg !77
  %918 = bitcast i32 %917 to float, !dbg !77
  %919 = bitcast float %915 to i32, !dbg !77
  %920 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %919, i32 8, i32 31), !dbg !77
  %921 = bitcast i32 %920 to float, !dbg !77
  %922 = bitcast float %905 to i32, !dbg !77
  %923 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %922, i32 8, i32 31), !dbg !77
  %924 = bitcast i32 %923 to float, !dbg !77
  %925 = fsub float %918, %910, !dbg !79
  %926 = fadd float %905, %924, !dbg !81
  %927 = fcmp oeq float %926, 0.000000e+00, !dbg !82
  %928 = tail call float @llvm.nvvm.div.full(float %924, float %926), !dbg !83
  %929 = select i1 %927, float 0.000000e+00, float %928, !dbg !84
  %930 = fmul float %929, %925, !dbg !85
  %931 = fadd float %910, %930, !dbg !86
  %932 = fadd float %915, %921, !dbg !87
  %933 = fmul float %925, %925, !dbg !88
  %934 = fmul float %905, %933, !dbg !89
  %935 = fmul float %929, %934, !dbg !90
  %936 = fadd float %932, %935, !dbg !91
  %937 = bitcast float %931 to i32, !dbg !77
  %938 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %937, i32 4, i32 31), !dbg !77
  %939 = bitcast i32 %938 to float, !dbg !77
  %940 = bitcast float %936 to i32, !dbg !77
  %941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %940, i32 4, i32 31), !dbg !77
  %942 = bitcast i32 %941 to float, !dbg !77
  %943 = bitcast float %926 to i32, !dbg !77
  %944 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %943, i32 4, i32 31), !dbg !77
  %945 = bitcast i32 %944 to float, !dbg !77
  %946 = fsub float %939, %931, !dbg !79
  %947 = fadd float %926, %945, !dbg !81
  %948 = fcmp oeq float %947, 0.000000e+00, !dbg !82
  %949 = tail call float @llvm.nvvm.div.full(float %945, float %947), !dbg !83
  %950 = select i1 %948, float 0.000000e+00, float %949, !dbg !84
  %951 = fmul float %950, %946, !dbg !85
  %952 = fadd float %931, %951, !dbg !86
  %953 = fadd float %936, %942, !dbg !87
  %954 = fmul float %946, %946, !dbg !88
  %955 = fmul float %926, %954, !dbg !89
  %956 = fmul float %950, %955, !dbg !90
  %957 = fadd float %953, %956, !dbg !91
  %958 = bitcast float %952 to i32, !dbg !77
  %959 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %958, i32 2, i32 31), !dbg !77
  %960 = bitcast i32 %959 to float, !dbg !77
  %961 = bitcast float %957 to i32, !dbg !77
  %962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %961, i32 2, i32 31), !dbg !77
  %963 = bitcast i32 %962 to float, !dbg !77
  %964 = bitcast float %947 to i32, !dbg !77
  %965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %964, i32 2, i32 31), !dbg !77
  %966 = bitcast i32 %965 to float, !dbg !77
  %967 = fsub float %960, %952, !dbg !79
  %968 = fadd float %947, %966, !dbg !81
  %969 = fcmp oeq float %968, 0.000000e+00, !dbg !82
  %970 = tail call float @llvm.nvvm.div.full(float %966, float %968), !dbg !83
  %971 = select i1 %969, float 0.000000e+00, float %970, !dbg !84
  %972 = fmul float %971, %967, !dbg !85
  %973 = fadd float %952, %972, !dbg !86
  %974 = fadd float %957, %963, !dbg !87
  %975 = fmul float %967, %967, !dbg !88
  %976 = fmul float %947, %975, !dbg !89
  %977 = fmul float %971, %976, !dbg !90
  %978 = fadd float %974, %977, !dbg !91
  %979 = bitcast float %973 to i32, !dbg !77
  %980 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %979, i32 1, i32 31), !dbg !77
  %981 = bitcast i32 %980 to float, !dbg !77
  %982 = bitcast float %978 to i32, !dbg !77
  %983 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %982, i32 1, i32 31), !dbg !77
  %984 = bitcast i32 %983 to float, !dbg !77
  %985 = bitcast float %968 to i32, !dbg !77
  %986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %985, i32 1, i32 31), !dbg !77
  %987 = bitcast i32 %986 to float, !dbg !77
  %988 = fsub float %981, %973, !dbg !79
  %989 = fadd float %968, %987, !dbg !81
  %990 = fcmp oeq float %989, 0.000000e+00, !dbg !82
  %991 = tail call float @llvm.nvvm.div.full(float %987, float %989), !dbg !83
  %992 = select i1 %990, float 0.000000e+00, float %991, !dbg !84
  %993 = fmul float %992, %988, !dbg !85
  %994 = fadd float %973, %993, !dbg !86
  %995 = fadd float %978, %984, !dbg !87
  %996 = fmul float %988, %988, !dbg !88
  %997 = fmul float %968, %996, !dbg !89
  %998 = fmul float %992, %997, !dbg !90
  %999 = fadd float %995, %998, !dbg !91
  %1000 = and i32 %698, 1, !dbg !77
  %1001 = icmp eq i32 %20, 0, !dbg !77
  %1002 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1000, !dbg !77
  %1003 = bitcast float %994 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1002, <1 x i32> %1003, i1 %1001) #5, !dbg !77
  %1004 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %1000, !dbg !77
  %1005 = bitcast float %999 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1004, <1 x i32> %1005, i1 %1001) #5, !dbg !77
  %1006 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1000, !dbg !77
  %1007 = bitcast float %989 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1006, <1 x i32> %1007, i1 %1001) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %1008 = icmp slt i32 %19, 2, !dbg !77
  %1009 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !77
  %1010 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1009, i1 %1008) #5, !dbg !77
  %1011 = bitcast i32 %1010 to float, !dbg !77
  %1012 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), i32 %19, !dbg !77
  %1013 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1012, i1 %1008) #5, !dbg !77
  %1014 = bitcast i32 %1013 to float, !dbg !77
  %1015 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !77
  %1016 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1015, i1 %1008) #5, !dbg !77
  %1017 = bitcast i32 %1016 to float, !dbg !77
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 1, i32 31), !dbg !77
  %1019 = bitcast i32 %1018 to float, !dbg !77
  %1020 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1013, i32 1, i32 31), !dbg !77
  %1021 = bitcast i32 %1020 to float, !dbg !77
  %1022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1016, i32 1, i32 31), !dbg !77
  %1023 = bitcast i32 %1022 to float, !dbg !77
  %1024 = fsub float %1019, %1011, !dbg !79
  %1025 = fadd float %1017, %1023, !dbg !81
  %1026 = fcmp oeq float %1025, 0.000000e+00, !dbg !82
  %1027 = tail call float @llvm.nvvm.div.full(float %1023, float %1025), !dbg !83
  %1028 = select i1 %1026, float 0.000000e+00, float %1027, !dbg !84
  %1029 = fmul float %1024, %1028, !dbg !85
  %1030 = fadd float %1029, %1011, !dbg !86
  %1031 = fadd float %1014, %1021, !dbg !87
  %1032 = fmul float %1024, %1024, !dbg !88
  %1033 = fmul float %1032, %1017, !dbg !89
  %1034 = fmul float %1033, %1028, !dbg !90
  %1035 = fadd float %1031, %1034, !dbg !91
  %1036 = and i32 %19, 1, !dbg !77
  %1037 = icmp eq i32 %1036, 0, !dbg !77
  %1038 = and i1 %1008, %1037, !dbg !77
  %1039 = bitcast float %1030 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1009, <1 x i32> %1039, i1 %1038) #5, !dbg !77
  %1040 = bitcast float %1035 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1012, <1 x i32> %1040, i1 %1038) #5, !dbg !77
  %1041 = bitcast float %1025 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1015, <1 x i32> %1041, i1 %1038) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %1042 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !77
  %1043 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8), align 8, !dbg !77
  %1044 = tail call float @llvm.nvvm.div.full(float %1043, float 3.072000e+03), !dbg !92
  %1045 = fadd float %1044, 0x3EB0C6F7A0000000, !dbg !93
  %1046 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1047 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1048 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1049 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1050 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1051 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1052 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1053 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1054 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1055 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1056 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1057 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1058 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1059 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1060 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %1061 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i125 = icmp eq i32 %1061, 0, !dbg !94
  br i1 %.not.i125, label %1064, label %1062, !dbg !94

1062:                                             ; preds = %__nv_rsqrtf.exit
  %1063 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1045), !dbg !94
  br label %__nv_rsqrtf.exit127, !dbg !94

1064:                                             ; preds = %__nv_rsqrtf.exit
  %1065 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1045), !dbg !94
  br label %__nv_rsqrtf.exit127, !dbg !94

__nv_rsqrtf.exit127:                              ; preds = %1062, %1064
  %.0.i126 = phi float [ %1063, %1062 ], [ %1065, %1064 ], !dbg !94
  %invariant.gep166 = getelementptr i8, ptr addrspace(1) %1, i64 36864, !dbg !95
  %1066 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !96
  %1067 = shufflevector <2 x i1> %1066, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !96
  %1068 = insertelement <2 x float> poison, float %.0.i126, i64 0, !dbg !97
  %1069 = shufflevector <2 x float> %1068, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  %1070 = insertelement <2 x float> poison, float %1042, i64 0, !dbg !98
  %1071 = shufflevector <2 x float> %1070, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !98
  %1072 = insertelement <8 x float> poison, float %.0.i126, i64 0, !dbg !97
  %1073 = shufflevector <8 x float> %1072, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !97
  %1074 = insertelement <8 x float> poison, float %1042, i64 0, !dbg !98
  %1075 = shufflevector <8 x float> %1074, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !98
  %1076 = insertelement <4 x float> poison, float %.0.i126, i64 0, !dbg !97
  %1077 = shufflevector <4 x float> %1076, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !97
  %1078 = insertelement <4 x float> poison, float %1042, i64 0, !dbg !98
  %1079 = shufflevector <4 x float> %1078, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !98
  %1080 = insertelement <8 x i1> poison, i1 %18, i64 0, !dbg !99
  %1081 = shufflevector <8 x i1> %1080, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !99
  %1082 = insertelement <4 x i1> poison, i1 %18, i64 0, !dbg !99
  %1083 = shufflevector <4 x i1> %1082, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !99
  %invariant.op582 = or i32 %22, 12292, !dbg !95
  %invariant.op583 = or i32 %22, 12300, !dbg !95
  %1084 = getelementptr inbounds nuw i8, ptr addrspace(3) %85, i32 4
  %1085 = getelementptr inbounds nuw i8, ptr addrspace(3) %85, i32 8
  %1086 = getelementptr inbounds nuw i8, ptr addrspace(3) %85, i32 12
  br label %1087, !dbg !95

1087:                                             ; preds = %__nv_rsqrtf.exit127, %1087
  %indvars.iv249 = phi i64 [ 0, %__nv_rsqrtf.exit127 ], [ %indvars.iv.next250, %1087 ]
  %1088 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %1368, %1087 ]
  %1089 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit127 ], [ %1369, %1087 ]
  %1090 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit127 ], [ %1382, %1087 ]
  %1091 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit127 ], [ %1383, %1087 ]
  %1092 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %1371, %1087 ]
  %1093 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit127 ], [ %1370, %1087 ]
  %1094 = or disjoint i64 %indvars.iv249, %90, !dbg !100
  %1095 = or disjoint i64 %indvars.iv249, %89, !dbg !100
  %1096 = or disjoint i64 %indvars.iv249, %88, !dbg !100
  %1097 = or disjoint i64 %indvars.iv249, %87, !dbg !100
  %1098 = trunc nuw nsw i64 %1094 to i32, !dbg !101
  %1099 = add i32 %66, %1098, !dbg !101
  %1100 = trunc nuw nsw i64 %1096 to i32, !dbg !101
  %1101 = add i32 %66, %1100, !dbg !101
  %1102 = trunc nuw nsw i64 %indvars.iv249 to i32, !dbg !101
  %1103 = add i32 %81, %1102, !dbg !101
  %1104 = add i32 %82, %1102, !dbg !101
  %1105 = sext i32 %1099 to i64, !dbg !102
  %1106 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1105, !dbg !102
  %1107 = sext i32 %1101 to i64, !dbg !102
  %1108 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1107, !dbg !102
  %1109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1106, i1 %18) #5, !dbg !103
  %1110 = extractvalue { i32, i32, i32, i32 } %1109, 0, !dbg !103
  %1111 = bitcast i32 %1110 to <2 x bfloat>, !dbg !103
  %1112 = extractvalue { i32, i32, i32, i32 } %1109, 1, !dbg !103
  %1113 = bitcast i32 %1112 to <2 x bfloat>, !dbg !103
  %1114 = extractvalue { i32, i32, i32, i32 } %1109, 2, !dbg !103
  %1115 = bitcast i32 %1114 to <2 x bfloat>, !dbg !103
  %1116 = extractvalue { i32, i32, i32, i32 } %1109, 3, !dbg !103
  %1117 = bitcast i32 %1116 to <2 x bfloat>, !dbg !103
  %1118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1108, i1 %18) #5, !dbg !103
  %1119 = extractvalue { i32, i32, i32, i32 } %1118, 0, !dbg !103
  %1120 = bitcast i32 %1119 to <2 x bfloat>, !dbg !103
  %1121 = extractvalue { i32, i32, i32, i32 } %1118, 1, !dbg !103
  %1122 = bitcast i32 %1121 to <2 x bfloat>, !dbg !103
  %1123 = extractvalue { i32, i32, i32, i32 } %1118, 2, !dbg !103
  %1124 = bitcast i32 %1123 to <2 x bfloat>, !dbg !103
  %1125 = extractvalue { i32, i32, i32, i32 } %1118, 3, !dbg !103
  %1126 = bitcast i32 %1125 to <2 x bfloat>, !dbg !103
  %1127 = or disjoint i64 %1094, 12288, !dbg !104
  %.reass.reass.reass = or i32 %1102, %invariant.op582
  %1128 = or disjoint i64 %1096, 12288, !dbg !104
  %.reass165.reass.reass = or i32 %1102, %invariant.op583
  %1129 = getelementptr float, ptr addrspace(1) %1, i64 %1127, !dbg !105
  %1130 = zext nneg i32 %.reass.reass.reass to i64, !dbg !105
  %1131 = getelementptr float, ptr addrspace(1) %1, i64 %1130, !dbg !105
  %1132 = getelementptr float, ptr addrspace(1) %1, i64 %1128, !dbg !105
  %1133 = zext nneg i32 %.reass165.reass.reass to i64, !dbg !105
  %1134 = getelementptr float, ptr addrspace(1) %1, i64 %1133, !dbg !105
  %1135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1129, i1 true) #5, !dbg !106
  %1136 = extractvalue { i32, i32, i32, i32 } %1135, 0, !dbg !106
  %1137 = extractvalue { i32, i32, i32, i32 } %1135, 1, !dbg !106
  %1138 = extractvalue { i32, i32, i32, i32 } %1135, 2, !dbg !106
  %1139 = extractvalue { i32, i32, i32, i32 } %1135, 3, !dbg !106
  %1140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1131, i1 true) #5, !dbg !106
  %1141 = extractvalue { i32, i32, i32, i32 } %1140, 0, !dbg !106
  %1142 = extractvalue { i32, i32, i32, i32 } %1140, 1, !dbg !106
  %1143 = extractvalue { i32, i32, i32, i32 } %1140, 2, !dbg !106
  %1144 = extractvalue { i32, i32, i32, i32 } %1140, 3, !dbg !106
  %1145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1132, i1 true) #5, !dbg !106
  %1146 = extractvalue { i32, i32, i32, i32 } %1145, 0, !dbg !106
  %1147 = extractvalue { i32, i32, i32, i32 } %1145, 1, !dbg !106
  %1148 = extractvalue { i32, i32, i32, i32 } %1145, 2, !dbg !106
  %1149 = extractvalue { i32, i32, i32, i32 } %1145, 3, !dbg !106
  %1150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1134, i1 true) #5, !dbg !106
  %1151 = extractvalue { i32, i32, i32, i32 } %1150, 0, !dbg !106
  %1152 = extractvalue { i32, i32, i32, i32 } %1150, 1, !dbg !106
  %1153 = extractvalue { i32, i32, i32, i32 } %1150, 2, !dbg !106
  %1154 = extractvalue { i32, i32, i32, i32 } %1150, 3, !dbg !106
  %1155 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1127, !dbg !107
  %1156 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1128, !dbg !107
  %1157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1155, i1 true) #5, !dbg !108
  %1158 = extractvalue { i32, i32, i32, i32 } %1157, 0, !dbg !108
  %1159 = bitcast i32 %1158 to <2 x bfloat>, !dbg !108
  %1160 = extractvalue { i32, i32, i32, i32 } %1157, 1, !dbg !108
  %1161 = bitcast i32 %1160 to <2 x bfloat>, !dbg !108
  %1162 = extractvalue { i32, i32, i32, i32 } %1157, 2, !dbg !108
  %1163 = bitcast i32 %1162 to <2 x bfloat>, !dbg !108
  %1164 = extractvalue { i32, i32, i32, i32 } %1157, 3, !dbg !108
  %1165 = bitcast i32 %1164 to <2 x bfloat>, !dbg !108
  %1166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1156, i1 true) #5, !dbg !108
  %1167 = extractvalue { i32, i32, i32, i32 } %1166, 0, !dbg !108
  %1168 = bitcast i32 %1167 to <2 x bfloat>, !dbg !108
  %1169 = extractvalue { i32, i32, i32, i32 } %1166, 1, !dbg !108
  %1170 = bitcast i32 %1169 to <2 x bfloat>, !dbg !108
  %1171 = extractvalue { i32, i32, i32, i32 } %1166, 2, !dbg !108
  %1172 = bitcast i32 %1171 to <2 x bfloat>, !dbg !108
  %1173 = extractvalue { i32, i32, i32, i32 } %1166, 3, !dbg !108
  %1174 = bitcast i32 %1173 to <2 x bfloat>, !dbg !108
  %1175 = add nuw nsw i64 %1094, 9216, !dbg !109
  %1176 = add nuw nsw i64 %1096, 9216, !dbg !109
  %1177 = getelementptr float, ptr addrspace(1) %1, i64 %1175, !dbg !110
  %gep167 = getelementptr float, ptr addrspace(1) %invariant.gep166, i64 %1095, !dbg !110
  %1178 = getelementptr float, ptr addrspace(1) %1, i64 %1176, !dbg !110
  %gep169 = getelementptr float, ptr addrspace(1) %invariant.gep166, i64 %1097, !dbg !110
  %1179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1177, i1 true) #5, !dbg !111
  %1180 = extractvalue { i32, i32, i32, i32 } %1179, 0, !dbg !111
  %1181 = extractvalue { i32, i32, i32, i32 } %1179, 1, !dbg !111
  %1182 = extractvalue { i32, i32, i32, i32 } %1179, 2, !dbg !111
  %1183 = extractvalue { i32, i32, i32, i32 } %1179, 3, !dbg !111
  %1184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep167, i1 true) #5, !dbg !111
  %1185 = extractvalue { i32, i32, i32, i32 } %1184, 0, !dbg !111
  %1186 = extractvalue { i32, i32, i32, i32 } %1184, 1, !dbg !111
  %1187 = extractvalue { i32, i32, i32, i32 } %1184, 2, !dbg !111
  %1188 = extractvalue { i32, i32, i32, i32 } %1184, 3, !dbg !111
  %1189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1178, i1 true) #5, !dbg !111
  %1190 = extractvalue { i32, i32, i32, i32 } %1189, 0, !dbg !111
  %1191 = extractvalue { i32, i32, i32, i32 } %1189, 1, !dbg !111
  %1192 = extractvalue { i32, i32, i32, i32 } %1189, 2, !dbg !111
  %1193 = extractvalue { i32, i32, i32, i32 } %1189, 3, !dbg !111
  %1194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %gep169, i1 true) #5, !dbg !111
  %1195 = extractvalue { i32, i32, i32, i32 } %1194, 0, !dbg !111
  %1196 = extractvalue { i32, i32, i32, i32 } %1194, 1, !dbg !111
  %1197 = extractvalue { i32, i32, i32, i32 } %1194, 2, !dbg !111
  %1198 = extractvalue { i32, i32, i32, i32 } %1194, 3, !dbg !111
  %1199 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1175, !dbg !112
  %1200 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1176, !dbg !112
  %1201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1199, i1 true) #5, !dbg !113
  %1202 = extractvalue { i32, i32, i32, i32 } %1201, 0, !dbg !113
  %1203 = bitcast i32 %1202 to <2 x bfloat>, !dbg !113
  %1204 = extractvalue { i32, i32, i32, i32 } %1201, 1, !dbg !113
  %1205 = bitcast i32 %1204 to <2 x bfloat>, !dbg !113
  %1206 = extractvalue { i32, i32, i32, i32 } %1201, 2, !dbg !113
  %1207 = bitcast i32 %1206 to <2 x bfloat>, !dbg !113
  %1208 = extractvalue { i32, i32, i32, i32 } %1201, 3, !dbg !113
  %1209 = bitcast i32 %1208 to <2 x bfloat>, !dbg !113
  %1210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1200, i1 true) #5, !dbg !113
  %1211 = extractvalue { i32, i32, i32, i32 } %1210, 0, !dbg !113
  %1212 = bitcast i32 %1211 to <2 x bfloat>, !dbg !113
  %1213 = extractvalue { i32, i32, i32, i32 } %1210, 1, !dbg !113
  %1214 = bitcast i32 %1213 to <2 x bfloat>, !dbg !113
  %1215 = extractvalue { i32, i32, i32, i32 } %1210, 2, !dbg !113
  %1216 = bitcast i32 %1215 to <2 x bfloat>, !dbg !113
  %1217 = extractvalue { i32, i32, i32, i32 } %1210, 3, !dbg !113
  %1218 = bitcast i32 %1217 to <2 x bfloat>, !dbg !113
  %1219 = fpext <2 x bfloat> %1126 to <2 x float>, !dbg !114
  %1220 = insertelement <2 x i32> poison, i32 %1153, i64 0, !dbg !106
  %1221 = insertelement <2 x i32> %1220, i32 %1154, i64 1, !dbg !106
  %1222 = bitcast <2 x i32> %1221 to <2 x float>, !dbg !106
  %1223 = fpext <2 x bfloat> %1174 to <2 x float>, !dbg !115
  %1224 = insertelement <2 x i32> poison, i32 %1197, i64 0, !dbg !111
  %1225 = insertelement <2 x i32> %1224, i32 %1198, i64 1, !dbg !111
  %1226 = bitcast <2 x i32> %1225 to <2 x float>, !dbg !111
  %1227 = fpext <2 x bfloat> %1218 to <2 x float>, !dbg !116
  %1228 = fsub <2 x float> %1219, %1071, !dbg !98
  %1229 = fmul <2 x float> %1069, %1228, !dbg !97
  %1230 = fadd <2 x float> %1222, %1223, !dbg !117
  %1231 = fadd <2 x float> %1230, splat (float 1.000000e+00), !dbg !118
  %1232 = fmul <2 x float> %1229, %1231, !dbg !119
  %1233 = fadd <2 x float> %1226, %1227, !dbg !120
  %1234 = fadd <2 x float> %1232, %1233, !dbg !121
  %1235 = extractelement <2 x float> %1234, i64 0, !dbg !122
  %1236 = extractelement <2 x float> %1234, i64 1, !dbg !122
  %1237 = fcmp uno <16 x float> %1091, zeroinitializer, !dbg !123
  %1238 = fcmp uno float %1088, 0.000000e+00, !dbg !125
  %1239 = fcmp uno float %1089, 0.000000e+00, !dbg !125
  %1240 = fcmp uno <4 x float> %1093, zeroinitializer, !dbg !125
  %1241 = fcmp uno <8 x float> %1092, zeroinitializer, !dbg !125
  %1242 = fcmp uno <2 x float> %1090, zeroinitializer, !dbg !123
  %1243 = fpext <2 x bfloat> %1111 to <2 x float>, !dbg !114
  %1244 = insertelement <2 x i32> poison, i32 %1136, i64 0, !dbg !106
  %1245 = insertelement <2 x i32> %1244, i32 %1137, i64 1, !dbg !106
  %1246 = bitcast <2 x i32> %1245 to <2 x float>, !dbg !106
  %1247 = fpext <2 x bfloat> %1159 to <2 x float>, !dbg !115
  %1248 = insertelement <2 x i32> poison, i32 %1180, i64 0, !dbg !111
  %1249 = insertelement <2 x i32> %1248, i32 %1181, i64 1, !dbg !111
  %1250 = bitcast <2 x i32> %1249 to <2 x float>, !dbg !111
  %1251 = fpext <2 x bfloat> %1203 to <2 x float>, !dbg !116
  %1252 = fsub <2 x float> %1243, %1071, !dbg !98
  %1253 = fmul <2 x float> %1069, %1252, !dbg !97
  %1254 = fadd <2 x float> %1246, %1247, !dbg !117
  %1255 = fadd <2 x float> %1254, splat (float 1.000000e+00), !dbg !118
  %1256 = fmul <2 x float> %1253, %1255, !dbg !119
  %1257 = fadd <2 x float> %1250, %1251, !dbg !120
  %1258 = fadd <2 x float> %1256, %1257, !dbg !121
  %1259 = fcmp ogt <2 x float> %1090, %1258, !dbg !127
  %1260 = or <2 x i1> %1242, %1259, !dbg !128
  %1261 = select <2 x i1> %1260, <2 x float> %1090, <2 x float> %1258, !dbg !129
  %1262 = shufflevector <2 x bfloat> %1113, <2 x bfloat> %1115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !114
  %1263 = shufflevector <2 x bfloat> %1117, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !114
  %1264 = shufflevector <8 x bfloat> %1262, <8 x bfloat> %1263, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !114
  %1265 = shufflevector <2 x bfloat> %1117, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !114
  %1266 = shufflevector <8 x bfloat> %1264, <8 x bfloat> %1265, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !114
  %1267 = shufflevector <2 x bfloat> %1120, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !114
  %1268 = shufflevector <8 x bfloat> %1266, <8 x bfloat> %1267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !114
  %1269 = shufflevector <2 x bfloat> %1120, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !114
  %1270 = shufflevector <8 x bfloat> %1268, <8 x bfloat> %1269, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !114
  %1271 = fpext <8 x bfloat> %1270 to <8 x float>, !dbg !114
  %1272 = shufflevector <2 x bfloat> %1122, <2 x bfloat> %1124, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !114
  %1273 = fpext <4 x bfloat> %1272 to <4 x float>, !dbg !114
  %1274 = insertelement <8 x i32> poison, i32 %1138, i64 0, !dbg !106
  %1275 = insertelement <8 x i32> %1274, i32 %1139, i64 1, !dbg !106
  %1276 = insertelement <8 x i32> %1275, i32 %1141, i64 2, !dbg !106
  %1277 = insertelement <8 x i32> %1276, i32 %1142, i64 3, !dbg !106
  %1278 = insertelement <8 x i32> %1277, i32 %1143, i64 4, !dbg !106
  %1279 = insertelement <8 x i32> %1278, i32 %1144, i64 5, !dbg !106
  %1280 = insertelement <8 x i32> %1279, i32 %1146, i64 6, !dbg !106
  %1281 = insertelement <8 x i32> %1280, i32 %1147, i64 7, !dbg !106
  %1282 = bitcast <8 x i32> %1281 to <8 x float>, !dbg !106
  %1283 = insertelement <4 x i32> poison, i32 %1148, i64 0, !dbg !106
  %1284 = insertelement <4 x i32> %1283, i32 %1149, i64 1, !dbg !106
  %1285 = insertelement <4 x i32> %1284, i32 %1151, i64 2, !dbg !106
  %1286 = insertelement <4 x i32> %1285, i32 %1152, i64 3, !dbg !106
  %1287 = bitcast <4 x i32> %1286 to <4 x float>, !dbg !106
  %1288 = shufflevector <2 x bfloat> %1161, <2 x bfloat> %1163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1289 = shufflevector <2 x bfloat> %1165, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1290 = shufflevector <8 x bfloat> %1288, <8 x bfloat> %1289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1291 = shufflevector <2 x bfloat> %1165, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1292 = shufflevector <8 x bfloat> %1290, <8 x bfloat> %1291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !115
  %1293 = shufflevector <2 x bfloat> %1168, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1294 = shufflevector <8 x bfloat> %1292, <8 x bfloat> %1293, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !115
  %1295 = shufflevector <2 x bfloat> %1168, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %1296 = shufflevector <8 x bfloat> %1294, <8 x bfloat> %1295, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !115
  %1297 = fpext <8 x bfloat> %1296 to <8 x float>, !dbg !115
  %1298 = shufflevector <2 x bfloat> %1170, <2 x bfloat> %1172, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !115
  %1299 = fpext <4 x bfloat> %1298 to <4 x float>, !dbg !115
  %1300 = insertelement <8 x i32> poison, i32 %1182, i64 0, !dbg !111
  %1301 = insertelement <8 x i32> %1300, i32 %1183, i64 1, !dbg !111
  %1302 = insertelement <8 x i32> %1301, i32 %1185, i64 2, !dbg !111
  %1303 = insertelement <8 x i32> %1302, i32 %1186, i64 3, !dbg !111
  %1304 = insertelement <8 x i32> %1303, i32 %1187, i64 4, !dbg !111
  %1305 = insertelement <8 x i32> %1304, i32 %1188, i64 5, !dbg !111
  %1306 = insertelement <8 x i32> %1305, i32 %1190, i64 6, !dbg !111
  %1307 = insertelement <8 x i32> %1306, i32 %1191, i64 7, !dbg !111
  %1308 = bitcast <8 x i32> %1307 to <8 x float>, !dbg !111
  %1309 = insertelement <4 x i32> poison, i32 %1192, i64 0, !dbg !111
  %1310 = insertelement <4 x i32> %1309, i32 %1193, i64 1, !dbg !111
  %1311 = insertelement <4 x i32> %1310, i32 %1195, i64 2, !dbg !111
  %1312 = insertelement <4 x i32> %1311, i32 %1196, i64 3, !dbg !111
  %1313 = bitcast <4 x i32> %1312 to <4 x float>, !dbg !111
  %1314 = shufflevector <2 x bfloat> %1205, <2 x bfloat> %1207, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1315 = shufflevector <2 x bfloat> %1209, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1316 = shufflevector <8 x bfloat> %1314, <8 x bfloat> %1315, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1317 = shufflevector <2 x bfloat> %1209, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1318 = shufflevector <8 x bfloat> %1316, <8 x bfloat> %1317, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !116
  %1319 = shufflevector <2 x bfloat> %1212, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1320 = shufflevector <8 x bfloat> %1318, <8 x bfloat> %1319, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !116
  %1321 = shufflevector <2 x bfloat> %1212, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !116
  %1322 = shufflevector <8 x bfloat> %1320, <8 x bfloat> %1321, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !116
  %1323 = fpext <8 x bfloat> %1322 to <8 x float>, !dbg !116
  %1324 = shufflevector <2 x bfloat> %1214, <2 x bfloat> %1216, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !116
  %1325 = fpext <4 x bfloat> %1324 to <4 x float>, !dbg !116
  %1326 = fsub <8 x float> %1271, %1075, !dbg !98
  %1327 = fsub <4 x float> %1273, %1079, !dbg !98
  %1328 = fmul <8 x float> %1073, %1326, !dbg !97
  %1329 = fmul <4 x float> %1077, %1327, !dbg !97
  %1330 = fadd <8 x float> %1282, %1297, !dbg !117
  %1331 = fadd <4 x float> %1287, %1299, !dbg !117
  %1332 = fadd <8 x float> %1330, splat (float 1.000000e+00), !dbg !118
  %1333 = fadd <4 x float> %1331, splat (float 1.000000e+00), !dbg !118
  %1334 = fmul <8 x float> %1328, %1332, !dbg !119
  %1335 = fmul <4 x float> %1329, %1333, !dbg !119
  %1336 = fadd <8 x float> %1308, %1323, !dbg !120
  %1337 = fadd <4 x float> %1313, %1325, !dbg !120
  %1338 = fadd <8 x float> %1334, %1336, !dbg !121
  %1339 = fadd <4 x float> %1335, %1337, !dbg !121
  %1340 = extractelement <8 x float> %1338, i64 0, !dbg !122
  %1341 = fcmp olt float %1088, %1340, !dbg !130
  %1342 = extractelement <8 x float> %1338, i64 1, !dbg !122
  %1343 = fcmp olt float %1089, %1342, !dbg !130
  %1344 = extractelement <8 x float> %1338, i64 2, !dbg !122
  %1345 = extractelement <8 x float> %1338, i64 3, !dbg !122
  %1346 = extractelement <8 x float> %1338, i64 4, !dbg !122
  %1347 = extractelement <8 x float> %1338, i64 5, !dbg !122
  %1348 = extractelement <8 x float> %1338, i64 6, !dbg !122
  %1349 = extractelement <8 x float> %1338, i64 7, !dbg !122
  %1350 = extractelement <4 x float> %1339, i64 0, !dbg !122
  %1351 = extractelement <4 x float> %1339, i64 1, !dbg !122
  %1352 = extractelement <4 x float> %1339, i64 2, !dbg !122
  %1353 = extractelement <4 x float> %1339, i64 3, !dbg !122
  %1354 = or i1 %1238, %1341, !dbg !131
  %1355 = or i1 %1239, %1343, !dbg !131
  %1356 = select i1 %1354, float %1088, float %1340, !dbg !132
  %1357 = select i1 %1355, float %1089, float %1342, !dbg !132
  %1358 = shufflevector <2 x float> %1234, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !130
  %1359 = shufflevector <8 x float> %1358, <8 x float> %1338, <4 x i32> <i32 1, i32 0, i32 11, i32 10>, !dbg !130
  %1360 = fcmp olt <4 x float> %1093, %1359, !dbg !130
  %1361 = or <4 x i1> %1240, %1360, !dbg !131
  %1362 = select <4 x i1> %1361, <4 x float> %1093, <4 x float> %1359, !dbg !132
  %1363 = shufflevector <4 x float> %1339, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !130
  %1364 = shufflevector <8 x float> %1363, <8 x float> %1338, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 15, i32 14, i32 13, i32 12>, !dbg !130
  %1365 = fcmp olt <8 x float> %1092, %1364, !dbg !130
  %1366 = or <8 x i1> %1241, %1365, !dbg !131
  %1367 = select <8 x i1> %1366, <8 x float> %1092, <8 x float> %1364, !dbg !132
  %1368 = select i1 %18, float %1356, float %1088, !dbg !99
  %1369 = select i1 %18, float %1357, float %1089, !dbg !99
  %1370 = select <4 x i1> %1083, <4 x float> %1362, <4 x float> %1093, !dbg !99
  %1371 = select <8 x i1> %1081, <8 x float> %1367, <8 x float> %1092, !dbg !99
  %1372 = shufflevector <2 x float> %1234, <2 x float> %1258, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>, !dbg !127
  %1373 = shufflevector <8 x float> %1338, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %1374 = shufflevector <16 x float> %1373, <16 x float> %1372, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !127
  %1375 = shufflevector <4 x float> %1339, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !127
  %1376 = shufflevector <16 x float> %1374, <16 x float> %1375, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 12, i32 13, i32 14, i32 15>, !dbg !127
  %1377 = fcmp ogt <16 x float> %1091, %1376, !dbg !127
  %1378 = fcmp olt <16 x float> %1091, %1376, !dbg !127
  %1379 = shufflevector <16 x i1> %1377, <16 x i1> %1378, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !127
  %1380 = or <16 x i1> %1237, %1379, !dbg !128
  %1381 = select <16 x i1> %1380, <16 x float> %1091, <16 x float> %1376, !dbg !129
  %1382 = select <2 x i1> %1067, <2 x float> %1261, <2 x float> %1090, !dbg !96
  %1383 = select <16 x i1> %92, <16 x float> %1381, <16 x float> %1091, !dbg !96
  %1384 = sext i32 %1103 to i64, !dbg !133
  %1385 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1384, !dbg !133
  %1386 = sext i32 %1104 to i64, !dbg !133
  %1387 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1386, !dbg !133
  %1388 = fptrunc <2 x float> %1258 to <2 x bfloat>, !dbg !122
  %1389 = fptrunc float %1340 to bfloat, !dbg !122
  %1390 = fptrunc float %1342 to bfloat, !dbg !122
  %1391 = fptrunc float %1344 to bfloat, !dbg !122
  %1392 = fptrunc float %1345 to bfloat, !dbg !122
  %1393 = fptrunc float %1346 to bfloat, !dbg !122
  %1394 = fptrunc float %1347 to bfloat, !dbg !122
  %1395 = fptrunc float %1348 to bfloat, !dbg !122
  %1396 = fptrunc float %1349 to bfloat, !dbg !122
  %1397 = fptrunc float %1350 to bfloat, !dbg !122
  %1398 = fptrunc float %1351 to bfloat, !dbg !122
  %1399 = fptrunc float %1352 to bfloat, !dbg !122
  %1400 = fptrunc float %1353 to bfloat, !dbg !122
  %1401 = fptrunc float %1235 to bfloat, !dbg !122
  %1402 = fptrunc float %1236 to bfloat, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %1403 = bitcast <2 x bfloat> %1388 to i32, !dbg !122
  %1404 = insertelement <2 x bfloat> poison, bfloat %1389, i64 0, !dbg !122
  %1405 = insertelement <2 x bfloat> %1404, bfloat %1390, i64 1, !dbg !122
  %1406 = bitcast <2 x bfloat> %1405 to i32, !dbg !122
  %1407 = insertelement <2 x bfloat> poison, bfloat %1391, i64 0, !dbg !122
  %1408 = insertelement <2 x bfloat> %1407, bfloat %1392, i64 1, !dbg !122
  %1409 = bitcast <2 x bfloat> %1408 to i32, !dbg !122
  %1410 = insertelement <2 x bfloat> poison, bfloat %1393, i64 0, !dbg !122
  %1411 = insertelement <2 x bfloat> %1410, bfloat %1394, i64 1, !dbg !122
  %1412 = bitcast <2 x bfloat> %1411 to i32, !dbg !122
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %83, i32 %1403, i32 %1406, i32 %1409, i32 %1412, i1 true) #5, !dbg !122
  %1413 = insertelement <2 x bfloat> poison, bfloat %1395, i64 0, !dbg !122
  %1414 = insertelement <2 x bfloat> %1413, bfloat %1396, i64 1, !dbg !122
  %1415 = bitcast <2 x bfloat> %1414 to i32, !dbg !122
  %1416 = insertelement <2 x bfloat> poison, bfloat %1397, i64 0, !dbg !122
  %1417 = insertelement <2 x bfloat> %1416, bfloat %1398, i64 1, !dbg !122
  %1418 = bitcast <2 x bfloat> %1417 to i32, !dbg !122
  %1419 = insertelement <2 x bfloat> poison, bfloat %1399, i64 0, !dbg !122
  %1420 = insertelement <2 x bfloat> %1419, bfloat %1400, i64 1, !dbg !122
  %1421 = bitcast <2 x bfloat> %1420 to i32, !dbg !122
  %1422 = insertelement <2 x bfloat> poison, bfloat %1401, i64 0, !dbg !122
  %1423 = insertelement <2 x bfloat> %1422, bfloat %1402, i64 1, !dbg !122
  %1424 = bitcast <2 x bfloat> %1423 to i32, !dbg !122
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %84, i32 %1415, i32 %1418, i32 %1421, i32 %1424, i1 true) #5, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %1425 = load <4 x i32>, ptr addrspace(3) %86, align 16, !dbg !122
  %.extract = load i32, ptr addrspace(3) %85, align 16, !dbg !122
  %.extract129 = load i32, ptr addrspace(3) %1084, align 4, !dbg !122
  %.extract131 = load i32, ptr addrspace(3) %1085, align 8, !dbg !122
  %.extract133 = load i32, ptr addrspace(3) %1086, align 4, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract129, i32 %.extract131, i32 %.extract133, ptr addrspace(1) %1385, i1 %18) #5, !dbg !122
  %.extract135 = extractelement <4 x i32> %1425, i64 0, !dbg !122
  %.extract137 = extractelement <4 x i32> %1425, i64 1, !dbg !122
  %.extract139 = extractelement <4 x i32> %1425, i64 2, !dbg !122
  %.extract141 = extractelement <4 x i32> %1425, i64 3, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract137, i32 %.extract139, i32 %.extract141, ptr addrspace(1) %1387, i1 %18) #5, !dbg !122
  %indvars.iv.next250 = add nuw nsw i64 %indvars.iv249, 1024, !dbg !95
  %1426 = icmp samesign ult i64 %indvars.iv249, 2048, !dbg !95
  br i1 %1426, label %1087, label %1427, !dbg !95

1427:                                             ; preds = %1087
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %1428 = extractelement <16 x float> %1383, i64 14, !dbg !136
  %1429 = extractelement <16 x float> %1383, i64 15, !dbg !136
  %1430 = fcmp olt float %1428, %1429, !dbg !136
  %1431 = fcmp uno float %1428, 0.000000e+00, !dbg !137
  %1432 = or i1 %1430, %1431, !dbg !138
  %1433 = select i1 %1432, float %1428, float %1429, !dbg !139
  %1434 = fcmp olt float %1433, %1368, !dbg !136
  %1435 = fcmp uno float %1433, 0.000000e+00, !dbg !137
  %1436 = or i1 %1434, %1435, !dbg !138
  %1437 = select i1 %1436, float %1433, float %1368, !dbg !139
  %1438 = fcmp olt float %1437, %1369, !dbg !136
  %1439 = fcmp uno float %1437, 0.000000e+00, !dbg !137
  %1440 = or i1 %1438, %1439, !dbg !138
  %1441 = select i1 %1440, float %1437, float %1369, !dbg !139
  %1442 = extractelement <4 x float> %1370, i64 3, !dbg !136
  %1443 = fcmp olt float %1441, %1442, !dbg !136
  %1444 = fcmp uno float %1441, 0.000000e+00, !dbg !137
  %1445 = or i1 %1443, %1444, !dbg !138
  %1446 = select i1 %1445, float %1441, float %1442, !dbg !139
  %1447 = extractelement <4 x float> %1370, i64 2, !dbg !136
  %1448 = fcmp olt float %1446, %1447, !dbg !136
  %1449 = fcmp uno float %1446, 0.000000e+00, !dbg !137
  %1450 = or i1 %1448, %1449, !dbg !138
  %1451 = select i1 %1450, float %1446, float %1447, !dbg !139
  %1452 = extractelement <8 x float> %1371, i64 7, !dbg !136
  %1453 = fcmp olt float %1451, %1452, !dbg !136
  %1454 = fcmp uno float %1451, 0.000000e+00, !dbg !137
  %1455 = or i1 %1453, %1454, !dbg !138
  %1456 = select i1 %1455, float %1451, float %1452, !dbg !139
  %1457 = extractelement <8 x float> %1371, i64 6, !dbg !136
  %1458 = fcmp olt float %1456, %1457, !dbg !136
  %1459 = fcmp uno float %1456, 0.000000e+00, !dbg !137
  %1460 = or i1 %1458, %1459, !dbg !138
  %1461 = select i1 %1460, float %1456, float %1457, !dbg !139
  %1462 = extractelement <8 x float> %1371, i64 5, !dbg !136
  %1463 = fcmp olt float %1461, %1462, !dbg !136
  %1464 = fcmp uno float %1461, 0.000000e+00, !dbg !137
  %1465 = or i1 %1463, %1464, !dbg !138
  %1466 = select i1 %1465, float %1461, float %1462, !dbg !139
  %1467 = extractelement <8 x float> %1371, i64 4, !dbg !136
  %1468 = fcmp olt float %1466, %1467, !dbg !136
  %1469 = fcmp uno float %1466, 0.000000e+00, !dbg !137
  %1470 = or i1 %1468, %1469, !dbg !138
  %1471 = select i1 %1470, float %1466, float %1467, !dbg !139
  %1472 = extractelement <8 x float> %1371, i64 3, !dbg !136
  %1473 = fcmp olt float %1471, %1472, !dbg !136
  %1474 = fcmp uno float %1471, 0.000000e+00, !dbg !137
  %1475 = or i1 %1473, %1474, !dbg !138
  %1476 = select i1 %1475, float %1471, float %1472, !dbg !139
  %1477 = extractelement <8 x float> %1371, i64 2, !dbg !136
  %1478 = fcmp olt float %1476, %1477, !dbg !136
  %1479 = fcmp uno float %1476, 0.000000e+00, !dbg !137
  %1480 = or i1 %1478, %1479, !dbg !138
  %1481 = select i1 %1480, float %1476, float %1477, !dbg !139
  %1482 = extractelement <8 x float> %1371, i64 1, !dbg !136
  %1483 = fcmp olt float %1481, %1482, !dbg !136
  %1484 = fcmp uno float %1481, 0.000000e+00, !dbg !137
  %1485 = or i1 %1483, %1484, !dbg !138
  %1486 = select i1 %1485, float %1481, float %1482, !dbg !139
  %1487 = extractelement <8 x float> %1371, i64 0, !dbg !136
  %1488 = fcmp olt float %1486, %1487, !dbg !136
  %1489 = fcmp uno float %1486, 0.000000e+00, !dbg !137
  %1490 = or i1 %1488, %1489, !dbg !138
  %1491 = select i1 %1490, float %1486, float %1487, !dbg !139
  %1492 = extractelement <4 x float> %1370, i64 1, !dbg !136
  %1493 = fcmp olt float %1491, %1492, !dbg !136
  %1494 = fcmp uno float %1491, 0.000000e+00, !dbg !137
  %1495 = or i1 %1493, %1494, !dbg !138
  %1496 = select i1 %1495, float %1491, float %1492, !dbg !139
  %1497 = extractelement <4 x float> %1370, i64 0, !dbg !136
  %1498 = fcmp olt float %1496, %1497, !dbg !136
  %1499 = fcmp uno float %1496, 0.000000e+00, !dbg !137
  %1500 = or i1 %1498, %1499, !dbg !138
  %1501 = select i1 %1500, float %1496, float %1497, !dbg !139
  %1502 = bitcast float %1501 to i32, !dbg !134
  %1503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1502, i32 16, i32 31), !dbg !134
  %1504 = bitcast i32 %1503 to float, !dbg !134
  %1505 = fcmp olt float %1501, %1504, !dbg !136
  %1506 = fcmp uno float %1501, 0.000000e+00, !dbg !137
  %1507 = or i1 %1506, %1505, !dbg !138
  %1508 = select i1 %1507, float %1501, float %1504, !dbg !139
  %1509 = bitcast float %1508 to i32, !dbg !134
  %1510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1509, i32 8, i32 31), !dbg !134
  %1511 = bitcast i32 %1510 to float, !dbg !134
  %1512 = fcmp olt float %1508, %1511, !dbg !136
  %1513 = fcmp uno float %1508, 0.000000e+00, !dbg !137
  %1514 = or i1 %1512, %1513, !dbg !138
  %1515 = select i1 %1514, float %1508, float %1511, !dbg !139
  %1516 = bitcast float %1515 to i32, !dbg !134
  %1517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1516, i32 4, i32 31), !dbg !134
  %1518 = bitcast i32 %1517 to float, !dbg !134
  %1519 = fcmp olt float %1515, %1518, !dbg !136
  %1520 = fcmp uno float %1515, 0.000000e+00, !dbg !137
  %1521 = or i1 %1519, %1520, !dbg !138
  %1522 = select i1 %1521, float %1515, float %1518, !dbg !139
  %1523 = bitcast float %1522 to i32, !dbg !134
  %1524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1523, i32 2, i32 31), !dbg !134
  %1525 = bitcast i32 %1524 to float, !dbg !134
  %1526 = fcmp olt float %1522, %1525, !dbg !136
  %1527 = fcmp uno float %1522, 0.000000e+00, !dbg !137
  %1528 = or i1 %1526, %1527, !dbg !138
  %1529 = select i1 %1528, float %1522, float %1525, !dbg !139
  %1530 = bitcast float %1529 to i32, !dbg !134
  %1531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1530, i32 1, i32 31), !dbg !134
  %1532 = bitcast i32 %1531 to float, !dbg !134
  %1533 = fcmp olt float %1529, %1532, !dbg !136
  %1534 = fcmp uno float %1529, 0.000000e+00, !dbg !137
  %1535 = or i1 %1533, %1534, !dbg !138
  %1536 = select i1 %1535, i32 %1530, i32 %1531, !dbg !139
  %1537 = insertelement <1 x i32> poison, i32 %1536, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1002, <1 x i32> %1537, i1 %1001) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %1538 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1009, i1 %1008) #5, !dbg !134
  %1539 = bitcast i32 %1538 to float, !dbg !134
  %1540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1538, i32 1, i32 31), !dbg !134
  %1541 = bitcast i32 %1540 to float, !dbg !134
  %1542 = fcmp olt float %1539, %1541, !dbg !136
  %1543 = fcmp uno float %1539, 0.000000e+00, !dbg !137
  %1544 = or i1 %1543, %1542, !dbg !138
  %1545 = select i1 %1544, i32 %1538, i32 %1540, !dbg !139
  %1546 = insertelement <1 x i32> poison, i32 %1545, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1009, <1 x i32> %1546, i1 %1038) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %1547 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1548 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %1382, <2 x i32> <i32 0, i32 2>, !dbg !142
  %1549 = fcmp ogt <2 x float> %1548, %1382, !dbg !142
  %1550 = fcmp uno <2 x float> %1548, %1382, !dbg !142
  %shift = shufflevector <2 x i1> %1549, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !143
  %1551 = or <2 x i1> %shift, %1550, !dbg !143
  %1552 = extractelement <2 x i1> %1551, i64 0, !dbg !143
  %1553 = extractelement <2 x float> %1382, i64 0, !dbg !144
  %1554 = extractelement <2 x float> %1382, i64 1, !dbg !144
  %1555 = select i1 %1552, float %1553, float %1554, !dbg !144
  %1556 = extractelement <16 x float> %1383, i64 0, !dbg !142
  %1557 = fcmp ogt float %1555, %1556, !dbg !142
  %1558 = fcmp uno float %1555, 0.000000e+00, !dbg !145
  %1559 = or i1 %1557, %1558, !dbg !143
  %1560 = select i1 %1559, float %1555, float %1556, !dbg !144
  %1561 = extractelement <16 x float> %1383, i64 1, !dbg !142
  %1562 = fcmp ogt float %1560, %1561, !dbg !142
  %1563 = fcmp uno float %1560, 0.000000e+00, !dbg !145
  %1564 = or i1 %1562, %1563, !dbg !143
  %1565 = select i1 %1564, float %1560, float %1561, !dbg !144
  %1566 = extractelement <16 x float> %1383, i64 2, !dbg !142
  %1567 = fcmp ogt float %1565, %1566, !dbg !142
  %1568 = fcmp uno float %1565, 0.000000e+00, !dbg !145
  %1569 = or i1 %1567, %1568, !dbg !143
  %1570 = select i1 %1569, float %1565, float %1566, !dbg !144
  %1571 = extractelement <16 x float> %1383, i64 3, !dbg !142
  %1572 = fcmp ogt float %1570, %1571, !dbg !142
  %1573 = fcmp uno float %1570, 0.000000e+00, !dbg !145
  %1574 = or i1 %1572, %1573, !dbg !143
  %1575 = select i1 %1574, float %1570, float %1571, !dbg !144
  %1576 = extractelement <16 x float> %1383, i64 4, !dbg !142
  %1577 = fcmp ogt float %1575, %1576, !dbg !142
  %1578 = fcmp uno float %1575, 0.000000e+00, !dbg !145
  %1579 = or i1 %1577, %1578, !dbg !143
  %1580 = select i1 %1579, float %1575, float %1576, !dbg !144
  %1581 = extractelement <16 x float> %1383, i64 5, !dbg !142
  %1582 = fcmp ogt float %1580, %1581, !dbg !142
  %1583 = fcmp uno float %1580, 0.000000e+00, !dbg !145
  %1584 = or i1 %1582, %1583, !dbg !143
  %1585 = select i1 %1584, float %1580, float %1581, !dbg !144
  %1586 = extractelement <16 x float> %1383, i64 6, !dbg !142
  %1587 = fcmp ogt float %1585, %1586, !dbg !142
  %1588 = fcmp uno float %1585, 0.000000e+00, !dbg !145
  %1589 = or i1 %1587, %1588, !dbg !143
  %1590 = select i1 %1589, float %1585, float %1586, !dbg !144
  %1591 = extractelement <16 x float> %1383, i64 7, !dbg !142
  %1592 = fcmp ogt float %1590, %1591, !dbg !142
  %1593 = fcmp uno float %1590, 0.000000e+00, !dbg !145
  %1594 = or i1 %1592, %1593, !dbg !143
  %1595 = select i1 %1594, float %1590, float %1591, !dbg !144
  %1596 = extractelement <16 x float> %1383, i64 8, !dbg !142
  %1597 = fcmp ogt float %1595, %1596, !dbg !142
  %1598 = fcmp uno float %1595, 0.000000e+00, !dbg !145
  %1599 = or i1 %1597, %1598, !dbg !143
  %1600 = select i1 %1599, float %1595, float %1596, !dbg !144
  %1601 = extractelement <16 x float> %1383, i64 9, !dbg !142
  %1602 = fcmp ogt float %1600, %1601, !dbg !142
  %1603 = fcmp uno float %1600, 0.000000e+00, !dbg !145
  %1604 = or i1 %1602, %1603, !dbg !143
  %1605 = select i1 %1604, float %1600, float %1601, !dbg !144
  %1606 = extractelement <16 x float> %1383, i64 10, !dbg !142
  %1607 = fcmp ogt float %1605, %1606, !dbg !142
  %1608 = fcmp uno float %1605, 0.000000e+00, !dbg !145
  %1609 = or i1 %1607, %1608, !dbg !143
  %1610 = select i1 %1609, float %1605, float %1606, !dbg !144
  %1611 = extractelement <16 x float> %1383, i64 11, !dbg !142
  %1612 = fcmp ogt float %1610, %1611, !dbg !142
  %1613 = fcmp uno float %1610, 0.000000e+00, !dbg !145
  %1614 = or i1 %1612, %1613, !dbg !143
  %1615 = select i1 %1614, float %1610, float %1611, !dbg !144
  %1616 = extractelement <16 x float> %1383, i64 12, !dbg !142
  %1617 = fcmp ogt float %1615, %1616, !dbg !142
  %1618 = fcmp uno float %1615, 0.000000e+00, !dbg !145
  %1619 = or i1 %1617, %1618, !dbg !143
  %1620 = select i1 %1619, float %1615, float %1616, !dbg !144
  %1621 = extractelement <16 x float> %1383, i64 13, !dbg !142
  %1622 = fcmp ogt float %1620, %1621, !dbg !142
  %1623 = fcmp uno float %1620, 0.000000e+00, !dbg !145
  %1624 = or i1 %1622, %1623, !dbg !143
  %1625 = select i1 %1624, float %1620, float %1621, !dbg !144
  %1626 = bitcast float %1625 to i32, !dbg !140
  %1627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1626, i32 16, i32 31), !dbg !140
  %1628 = bitcast i32 %1627 to float, !dbg !140
  %1629 = fcmp ogt float %1625, %1628, !dbg !142
  %1630 = fcmp uno float %1625, 0.000000e+00, !dbg !145
  %1631 = or i1 %1630, %1629, !dbg !143
  %1632 = select i1 %1631, float %1625, float %1628, !dbg !144
  %1633 = bitcast float %1632 to i32, !dbg !140
  %1634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1633, i32 8, i32 31), !dbg !140
  %1635 = bitcast i32 %1634 to float, !dbg !140
  %1636 = fcmp ogt float %1632, %1635, !dbg !142
  %1637 = fcmp uno float %1632, 0.000000e+00, !dbg !145
  %1638 = or i1 %1636, %1637, !dbg !143
  %1639 = select i1 %1638, float %1632, float %1635, !dbg !144
  %1640 = bitcast float %1639 to i32, !dbg !140
  %1641 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1640, i32 4, i32 31), !dbg !140
  %1642 = bitcast i32 %1641 to float, !dbg !140
  %1643 = fcmp ogt float %1639, %1642, !dbg !142
  %1644 = fcmp uno float %1639, 0.000000e+00, !dbg !145
  %1645 = or i1 %1643, %1644, !dbg !143
  %1646 = select i1 %1645, float %1639, float %1642, !dbg !144
  %1647 = bitcast float %1646 to i32, !dbg !140
  %1648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1647, i32 2, i32 31), !dbg !140
  %1649 = bitcast i32 %1648 to float, !dbg !140
  %1650 = fcmp ogt float %1646, %1649, !dbg !142
  %1651 = fcmp uno float %1646, 0.000000e+00, !dbg !145
  %1652 = or i1 %1650, %1651, !dbg !143
  %1653 = select i1 %1652, float %1646, float %1649, !dbg !144
  %1654 = bitcast float %1653 to i32, !dbg !140
  %1655 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1654, i32 1, i32 31), !dbg !140
  %1656 = bitcast i32 %1655 to float, !dbg !140
  %1657 = fcmp ogt float %1653, %1656, !dbg !142
  %1658 = fcmp uno float %1653, 0.000000e+00, !dbg !145
  %1659 = or i1 %1657, %1658, !dbg !143
  %1660 = select i1 %1659, i32 %1654, i32 %1655, !dbg !144
  %1661 = insertelement <1 x i32> poison, i32 %1660, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1002, <1 x i32> %1661, i1 %1001) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1662 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1009, i1 %1008) #5, !dbg !140
  %1663 = bitcast i32 %1662 to float, !dbg !140
  %1664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1662, i32 1, i32 31), !dbg !140
  %1665 = bitcast i32 %1664 to float, !dbg !140
  %1666 = fcmp ogt float %1663, %1665, !dbg !142
  %1667 = fcmp uno float %1663, 0.000000e+00, !dbg !145
  %1668 = or i1 %1667, %1666, !dbg !143
  %1669 = select i1 %1668, i32 %1662, i32 %1664, !dbg !144
  %1670 = insertelement <1 x i32> poison, i32 %1669, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1009, <1 x i32> %1670, i1 %1038) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1671 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %1672 = getelementptr bfloat, ptr addrspace(1) %10, i64 %29, !dbg !146
  %1673 = fptrunc float %1547 to bfloat, !dbg !147
  %1674 = and i32 %19, 63, !dbg !147
  %1675 = icmp eq i32 %1674, 0, !dbg !147
  %1676 = bitcast bfloat %1673 to i16, !dbg !147
  %1677 = and i1 %18, %1675, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1676, ptr addrspace(1) %1672, i1 %1677) #5, !dbg !147
  %1678 = getelementptr bfloat, ptr addrspace(1) %11, i64 %29, !dbg !148
  %1679 = fptrunc float %1671 to bfloat, !dbg !149
  %1680 = bitcast bfloat %1679 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1680, ptr addrspace(1) %1678, i1 %1677) #5, !dbg !149
  %.inv4 = fcmp oge float %1547, 0.000000e+00, !dbg !150
  %1681 = select i1 %.inv4, float 0.000000e+00, float %1547, !dbg !150
  %1682 = fsub float 0.000000e+00, %1681, !dbg !152
  %.inv5 = fcmp ole float %1671, 0.000000e+00, !dbg !153
  %1683 = select i1 %.inv5, float 0.000000e+00, float %1671, !dbg !153
  %1684 = fcmp ogt float %1682, %1683, !dbg !155
  %1685 = fcmp uno float %1682, 0.000000e+00, !dbg !157
  %1686 = or i1 %1685, %1684, !dbg !158
  %1687 = select i1 %1686, float %1682, float %1683, !dbg !159
  %1688 = fmul float %1687, 0x3F80204080000000, !dbg !160
  %1689 = fcmp ogt float %1688, 0x3EE4F8B580000000, !dbg !161
  %1690 = fcmp uno float %1688, 0.000000e+00, !dbg !163
  %1691 = or i1 %1689, %1690, !dbg !164
  %1692 = select i1 %1691, float %1688, float 0x3EE4F8B580000000, !dbg !165
  %1693 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1692), !dbg !166
  %1694 = or disjoint i32 %22, %66
  %1695 = or disjoint i32 %24, %66
  br label %1696, !dbg !167

1696:                                             ; preds = %1427, %1696
  %indvars.iv251 = phi i64 [ 0, %1427 ], [ %indvars.iv.next252, %1696 ]
  %1697 = trunc nuw nsw i64 %indvars.iv251 to i32, !dbg !168
  %1698 = add i32 %1694, %1697, !dbg !168
  %1699 = add i32 %1695, %1697, !dbg !168
  %1700 = sext i32 %1698 to i64, !dbg !169
  %1701 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1700, !dbg !169
  %1702 = sext i32 %1699 to i64, !dbg !169
  %1703 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1702, !dbg !169
  %1704 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1701, i1 %18) #5, !dbg !170
  %1705 = extractvalue { i32, i32, i32, i32 } %1704, 0, !dbg !170
  %1706 = bitcast i32 %1705 to <2 x bfloat>, !dbg !170
  %1707 = extractvalue { i32, i32, i32, i32 } %1704, 1, !dbg !170
  %1708 = bitcast i32 %1707 to <2 x bfloat>, !dbg !170
  %1709 = extractvalue { i32, i32, i32, i32 } %1704, 2, !dbg !170
  %1710 = bitcast i32 %1709 to <2 x bfloat>, !dbg !170
  %1711 = extractvalue { i32, i32, i32, i32 } %1704, 3, !dbg !170
  %1712 = bitcast i32 %1711 to <2 x bfloat>, !dbg !170
  %1713 = extractelement <2 x bfloat> %1706, i64 0, !dbg !170
  %1714 = extractelement <2 x bfloat> %1706, i64 1, !dbg !170
  %1715 = extractelement <2 x bfloat> %1708, i64 0, !dbg !170
  %1716 = extractelement <2 x bfloat> %1708, i64 1, !dbg !170
  %1717 = extractelement <2 x bfloat> %1710, i64 0, !dbg !170
  %1718 = extractelement <2 x bfloat> %1710, i64 1, !dbg !170
  %1719 = extractelement <2 x bfloat> %1712, i64 0, !dbg !170
  %1720 = extractelement <2 x bfloat> %1712, i64 1, !dbg !170
  %1721 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1703, i1 %18) #5, !dbg !170
  %1722 = extractvalue { i32, i32, i32, i32 } %1721, 0, !dbg !170
  %1723 = bitcast i32 %1722 to <2 x bfloat>, !dbg !170
  %1724 = extractvalue { i32, i32, i32, i32 } %1721, 1, !dbg !170
  %1725 = bitcast i32 %1724 to <2 x bfloat>, !dbg !170
  %1726 = extractvalue { i32, i32, i32, i32 } %1721, 2, !dbg !170
  %1727 = bitcast i32 %1726 to <2 x bfloat>, !dbg !170
  %1728 = extractvalue { i32, i32, i32, i32 } %1721, 3, !dbg !170
  %1729 = bitcast i32 %1728 to <2 x bfloat>, !dbg !170
  %1730 = extractelement <2 x bfloat> %1723, i64 0, !dbg !170
  %1731 = extractelement <2 x bfloat> %1723, i64 1, !dbg !170
  %1732 = extractelement <2 x bfloat> %1725, i64 0, !dbg !170
  %1733 = extractelement <2 x bfloat> %1725, i64 1, !dbg !170
  %1734 = extractelement <2 x bfloat> %1727, i64 0, !dbg !170
  %1735 = extractelement <2 x bfloat> %1727, i64 1, !dbg !170
  %1736 = extractelement <2 x bfloat> %1729, i64 0, !dbg !170
  %1737 = extractelement <2 x bfloat> %1729, i64 1, !dbg !170
  %1738 = fpext bfloat %1713 to float, !dbg !171
  %1739 = fpext bfloat %1714 to float, !dbg !171
  %1740 = fpext bfloat %1715 to float, !dbg !171
  %1741 = fpext bfloat %1716 to float, !dbg !171
  %1742 = fpext bfloat %1717 to float, !dbg !171
  %1743 = fpext bfloat %1718 to float, !dbg !171
  %1744 = fpext bfloat %1719 to float, !dbg !171
  %1745 = fpext bfloat %1720 to float, !dbg !171
  %1746 = fpext bfloat %1730 to float, !dbg !171
  %1747 = fpext bfloat %1731 to float, !dbg !171
  %1748 = fpext bfloat %1732 to float, !dbg !171
  %1749 = fpext bfloat %1733 to float, !dbg !171
  %1750 = fpext bfloat %1734 to float, !dbg !171
  %1751 = fpext bfloat %1735 to float, !dbg !171
  %1752 = fpext bfloat %1736 to float, !dbg !171
  %1753 = fpext bfloat %1737 to float, !dbg !171
  %1754 = fmul float %1693, %1738, !dbg !172
  %1755 = fmul float %1693, %1739, !dbg !172
  %1756 = fmul float %1693, %1740, !dbg !172
  %1757 = fmul float %1693, %1741, !dbg !172
  %1758 = fmul float %1693, %1742, !dbg !172
  %1759 = fmul float %1693, %1743, !dbg !172
  %1760 = fmul float %1693, %1744, !dbg !172
  %1761 = fmul float %1693, %1745, !dbg !172
  %1762 = fmul float %1693, %1746, !dbg !172
  %1763 = fmul float %1693, %1747, !dbg !172
  %1764 = fmul float %1693, %1748, !dbg !172
  %1765 = fmul float %1693, %1749, !dbg !172
  %1766 = fmul float %1693, %1750, !dbg !172
  %1767 = fmul float %1693, %1751, !dbg !172
  %1768 = fmul float %1693, %1752, !dbg !172
  %1769 = fmul float %1693, %1753, !dbg !172
  %1770 = tail call float @llvm.nvvm.round.f(float %1754) #5, !dbg !173
  %1771 = tail call float @llvm.nvvm.round.f(float %1755) #5, !dbg !173
  %1772 = tail call float @llvm.nvvm.round.f(float %1756) #5, !dbg !173
  %1773 = tail call float @llvm.nvvm.round.f(float %1757) #5, !dbg !173
  %1774 = tail call float @llvm.nvvm.round.f(float %1758) #5, !dbg !173
  %1775 = tail call float @llvm.nvvm.round.f(float %1759) #5, !dbg !173
  %1776 = tail call float @llvm.nvvm.round.f(float %1760) #5, !dbg !173
  %1777 = tail call float @llvm.nvvm.round.f(float %1761) #5, !dbg !173
  %1778 = tail call float @llvm.nvvm.round.f(float %1762) #5, !dbg !173
  %1779 = tail call float @llvm.nvvm.round.f(float %1763) #5, !dbg !173
  %1780 = tail call float @llvm.nvvm.round.f(float %1764) #5, !dbg !173
  %1781 = tail call float @llvm.nvvm.round.f(float %1765) #5, !dbg !173
  %1782 = tail call float @llvm.nvvm.round.f(float %1766) #5, !dbg !173
  %1783 = tail call float @llvm.nvvm.round.f(float %1767) #5, !dbg !173
  %1784 = tail call float @llvm.nvvm.round.f(float %1768) #5, !dbg !173
  %1785 = tail call float @llvm.nvvm.round.f(float %1769) #5, !dbg !173
  %1786 = insertelement <4 x float> poison, float %1770, i64 0, !dbg !174
  %1787 = insertelement <4 x float> %1786, float %1771, i64 1, !dbg !174
  %1788 = insertelement <4 x float> %1787, float %1772, i64 2, !dbg !174
  %1789 = insertelement <4 x float> %1788, float %1773, i64 3, !dbg !174
  %1790 = fcmp ogt <4 x float> %1789, splat (float -1.270000e+02), !dbg !174
  %1791 = fcmp uno <4 x float> %1789, zeroinitializer, !dbg !176
  %1792 = or <4 x i1> %1790, %1791, !dbg !177
  %1793 = select <4 x i1> %1792, <4 x float> %1789, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1794 = fcmp olt <4 x float> %1793, splat (float 1.270000e+02), !dbg !179
  %1795 = fcmp uno <4 x float> %1793, zeroinitializer, !dbg !181
  %1796 = or <4 x i1> %1794, %1795, !dbg !182
  %1797 = fptosi <4 x float> %1793 to <4 x i8>, !dbg !183
  %1798 = select <4 x i1> %1796, <4 x i8> %1797, <4 x i8> splat (i8 127), !dbg !184
  %1799 = insertelement <4 x float> poison, float %1774, i64 0, !dbg !174
  %1800 = insertelement <4 x float> %1799, float %1775, i64 1, !dbg !174
  %1801 = insertelement <4 x float> %1800, float %1776, i64 2, !dbg !174
  %1802 = insertelement <4 x float> %1801, float %1777, i64 3, !dbg !174
  %1803 = fcmp ogt <4 x float> %1802, splat (float -1.270000e+02), !dbg !174
  %1804 = fcmp uno <4 x float> %1802, zeroinitializer, !dbg !176
  %1805 = or <4 x i1> %1803, %1804, !dbg !177
  %1806 = select <4 x i1> %1805, <4 x float> %1802, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1807 = fcmp olt <4 x float> %1806, splat (float 1.270000e+02), !dbg !179
  %1808 = fcmp uno <4 x float> %1806, zeroinitializer, !dbg !181
  %1809 = or <4 x i1> %1807, %1808, !dbg !182
  %1810 = fptosi <4 x float> %1806 to <4 x i8>, !dbg !183
  %1811 = select <4 x i1> %1809, <4 x i8> %1810, <4 x i8> splat (i8 127), !dbg !184
  %1812 = insertelement <4 x float> poison, float %1778, i64 0, !dbg !174
  %1813 = insertelement <4 x float> %1812, float %1779, i64 1, !dbg !174
  %1814 = insertelement <4 x float> %1813, float %1780, i64 2, !dbg !174
  %1815 = insertelement <4 x float> %1814, float %1781, i64 3, !dbg !174
  %1816 = fcmp ogt <4 x float> %1815, splat (float -1.270000e+02), !dbg !174
  %1817 = fcmp uno <4 x float> %1815, zeroinitializer, !dbg !176
  %1818 = or <4 x i1> %1816, %1817, !dbg !177
  %1819 = select <4 x i1> %1818, <4 x float> %1815, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1820 = fcmp olt <4 x float> %1819, splat (float 1.270000e+02), !dbg !179
  %1821 = fcmp uno <4 x float> %1819, zeroinitializer, !dbg !181
  %1822 = or <4 x i1> %1820, %1821, !dbg !182
  %1823 = fptosi <4 x float> %1819 to <4 x i8>, !dbg !183
  %1824 = select <4 x i1> %1822, <4 x i8> %1823, <4 x i8> splat (i8 127), !dbg !184
  %1825 = insertelement <4 x float> poison, float %1782, i64 0, !dbg !174
  %1826 = insertelement <4 x float> %1825, float %1783, i64 1, !dbg !174
  %1827 = insertelement <4 x float> %1826, float %1784, i64 2, !dbg !174
  %1828 = insertelement <4 x float> %1827, float %1785, i64 3, !dbg !174
  %1829 = fcmp ogt <4 x float> %1828, splat (float -1.270000e+02), !dbg !174
  %1830 = fcmp uno <4 x float> %1828, zeroinitializer, !dbg !176
  %1831 = or <4 x i1> %1829, %1830, !dbg !177
  %1832 = select <4 x i1> %1831, <4 x float> %1828, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1833 = fcmp olt <4 x float> %1832, splat (float 1.270000e+02), !dbg !179
  %1834 = fcmp uno <4 x float> %1832, zeroinitializer, !dbg !181
  %1835 = or <4 x i1> %1833, %1834, !dbg !182
  %1836 = fptosi <4 x float> %1832 to <4 x i8>, !dbg !183
  %1837 = select <4 x i1> %1835, <4 x i8> %1836, <4 x i8> splat (i8 127), !dbg !184
  %1838 = getelementptr i8, ptr addrspace(1) %12, i64 %1700, !dbg !185
  %1839 = bitcast <4 x i8> %1798 to i32, !dbg !186
  %1840 = bitcast <4 x i8> %1811 to i32, !dbg !186
  %1841 = bitcast <4 x i8> %1824 to i32, !dbg !186
  %1842 = bitcast <4 x i8> %1837 to i32, !dbg !186
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1839, i32 %1840, i32 %1841, i32 %1842, ptr addrspace(1) %1838, i1 %18) #5, !dbg !186
  %indvars.iv.next252 = add nuw nsw i64 %indvars.iv251, 1024, !dbg !167
  %1843 = icmp samesign ult i64 %indvars.iv251, 2048, !dbg !167
  br i1 %1843, label %1696, label %1844, !dbg !167

1844:                                             ; preds = %1696
  ret void, !dbg !187
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 70, column: 64, scope: !6)
!37 = !DILocation(line: 60, column: 23, scope: !6)
!38 = !DILocation(line: 35, column: 31, scope: !6)
!39 = !DILocation(line: 40, column: 41, scope: !6)
!40 = !DILocation(line: 40, column: 34, scope: !6)
!41 = !DILocation(line: 40, column: 51, scope: !6)
!42 = !DILocation(line: 41, column: 41, scope: !6)
!43 = !DILocation(line: 41, column: 34, scope: !6)
!44 = !DILocation(line: 41, column: 48, scope: !6)
!45 = !DILocation(line: 42, column: 34, scope: !6)
!46 = !DILocation(line: 42, column: 48, scope: !6)
!47 = !DILocation(line: 43, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 51, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 44, column: 42, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 45, column: 42, scope: !6)
!53 = !DILocation(line: 40, column: 113, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 44, column: 95, scope: !6)
!56 = !DILocation(line: 45, column: 95, scope: !6)
!57 = !DILocation(line: 47, column: 22, scope: !6)
!58 = !DILocation(line: 48, column: 23, scope: !6)
!59 = !DILocation(line: 61, column: 24, scope: !6)
!60 = !DILocation(line: 62, column: 24, scope: !6)
!61 = !DILocation(line: 63, column: 23, scope: !6)
!62 = !DILocation(line: 64, column: 23, scope: !6)
!63 = !DILocation(line: 68, column: 66, scope: !6)
!64 = !DILocation(line: 203, column: 7, scope: !18, inlinedAt: !65)
!65 = !DILocation(line: 68, column: 55, scope: !6)
!66 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !65)
!67 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !65)
!68 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !65)
!69 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !65)
!70 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !65)
!71 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !65)
!72 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !65)
!73 = !DILocation(line: 71, column: 60, scope: !6)
!74 = !DILocation(line: 72, column: 68, scope: !6)
!75 = !DILocation(line: 73, column: 29, scope: !6)
!76 = !DILocation(line: 73, column: 53, scope: !6)
!77 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !78)
!78 = !DILocation(line: 74, column: 85, scope: !6)
!79 = !DILocation(line: 217, column: 21, scope: !80, inlinedAt: !78)
!80 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!81 = !DILocation(line: 218, column: 28, scope: !80, inlinedAt: !78)
!82 = !DILocation(line: 219, column: 39, scope: !80, inlinedAt: !78)
!83 = !DILocation(line: 219, column: 60, scope: !80, inlinedAt: !78)
!84 = !DILocation(line: 219, column: 49, scope: !80, inlinedAt: !78)
!85 = !DILocation(line: 221, column: 25, scope: !80, inlinedAt: !78)
!86 = !DILocation(line: 221, column: 17, scope: !80, inlinedAt: !78)
!87 = !DILocation(line: 222, column: 15, scope: !80, inlinedAt: !78)
!88 = !DILocation(line: 222, column: 30, scope: !80, inlinedAt: !78)
!89 = !DILocation(line: 222, column: 38, scope: !80, inlinedAt: !78)
!90 = !DILocation(line: 222, column: 49, scope: !80, inlinedAt: !78)
!91 = !DILocation(line: 222, column: 22, scope: !80, inlinedAt: !78)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 80, column: 40, scope: !6)
!96 = !DILocation(line: 112, column: 50, scope: !6)
!97 = !DILocation(line: 98, column: 24, scope: !6)
!98 = !DILocation(line: 92, column: 24, scope: !6)
!99 = !DILocation(line: 110, column: 50, scope: !6)
!100 = !DILocation(line: 81, column: 31, scope: !6)
!101 = !DILocation(line: 86, column: 43, scope: !6)
!102 = !DILocation(line: 86, column: 36, scope: !6)
!103 = !DILocation(line: 86, column: 53, scope: !6)
!104 = !DILocation(line: 87, column: 43, scope: !6)
!105 = !DILocation(line: 87, column: 35, scope: !6)
!106 = !DILocation(line: 87, column: 50, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 88, column: 50, scope: !6)
!109 = !DILocation(line: 89, column: 42, scope: !6)
!110 = !DILocation(line: 89, column: 35, scope: !6)
!111 = !DILocation(line: 89, column: 49, scope: !6)
!112 = !DILocation(line: 90, column: 35, scope: !6)
!113 = !DILocation(line: 90, column: 49, scope: !6)
!114 = !DILocation(line: 86, column: 115, scope: !6)
!115 = !DILocation(line: 88, column: 103, scope: !6)
!116 = !DILocation(line: 90, column: 102, scope: !6)
!117 = !DILocation(line: 101, column: 24, scope: !6)
!118 = !DILocation(line: 103, column: 24, scope: !6)
!119 = !DILocation(line: 104, column: 24, scope: !6)
!120 = !DILocation(line: 106, column: 24, scope: !6)
!121 = !DILocation(line: 107, column: 24, scope: !6)
!122 = !DILocation(line: 113, column: 53, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !124)
!124 = !DILocation(line: 111, column: 47, scope: !6)
!125 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !126)
!126 = !DILocation(line: 109, column: 47, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !124)
!128 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !124)
!129 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !124)
!130 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !126)
!131 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !126)
!132 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !126)
!133 = !DILocation(line: 113, column: 29, scope: !6)
!134 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !135)
!135 = !DILocation(line: 114, column: 40, scope: !6)
!136 = !DILocation(line: 94, column: 15, scope: !80, inlinedAt: !135)
!137 = !DILocation(line: 96, column: 21, scope: !80, inlinedAt: !135)
!138 = !DILocation(line: 96, column: 16, scope: !80, inlinedAt: !135)
!139 = !DILocation(line: 97, column: 29, scope: !80, inlinedAt: !135)
!140 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !141)
!141 = !DILocation(line: 115, column: 40, scope: !6)
!142 = !DILocation(line: 102, column: 15, scope: !80, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 16, scope: !80, inlinedAt: !141)
!144 = !DILocation(line: 105, column: 29, scope: !80, inlinedAt: !141)
!145 = !DILocation(line: 104, column: 21, scope: !80, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 25, scope: !6)
!147 = !DILocation(line: 116, column: 37, scope: !6)
!148 = !DILocation(line: 117, column: 25, scope: !6)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !151)
!151 = !DILocation(line: 126, column: 46, scope: !6)
!152 = !DILocation(line: 127, column: 17, scope: !6)
!153 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 128, column: 46, scope: !6)
!155 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !156)
!156 = !DILocation(line: 129, column: 46, scope: !6)
!157 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !156)
!158 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !156)
!159 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !156)
!160 = !DILocation(line: 131, column: 24, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !162)
!162 = !DILocation(line: 134, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !162)
!166 = !DILocation(line: 137, column: 25, scope: !6)
!167 = !DILocation(line: 118, column: 40, scope: !6)
!168 = !DILocation(line: 124, column: 43, scope: !6)
!169 = !DILocation(line: 124, column: 36, scope: !6)
!170 = !DILocation(line: 124, column: 53, scope: !6)
!171 = !DILocation(line: 124, column: 115, scope: !6)
!172 = !DILocation(line: 140, column: 24, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 118, column: 4, scope: !6)
