; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 2, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit1 = lshr i32 %13, 5, !dbg !11
  %14 = and i32 %.lobit1, 3, !dbg !11
  %15 = and i32 %13, 3, !dbg !11
  %16 = or disjoint i32 %14, %12, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !12
  %18 = icmp slt i32 %16, 98688, !dbg !13
  %19 = icmp slt i32 %17, 98688, !dbg !13
  %20 = shl i32 %13, 2, !dbg !14
  %21 = and i32 %20, 124, !dbg !14
  %22 = lshr i32 %13, 2, !dbg !14
  %.lobit = and i32 %22, 1, !dbg !14
  %23 = and i32 %22, 31, !dbg !14
  %24 = or disjoint i32 %23, 32, !dbg !14
  %25 = or disjoint i32 %23, 64, !dbg !14
  %26 = or disjoint i32 %23, 96, !dbg !14
  %27 = and i32 %13, 127, !dbg !14
  %28 = sdiv i32 %16, 24, !dbg !15
  %29 = mul i32 %28, 24, !dbg !16
  %.decomposed = sub i32 %16, %29, !dbg !16
  %30 = sdiv i32 %17, 24, !dbg !15
  %31 = or disjoint i32 %21, 3072, !dbg !17
  %32 = shl nsw i32 %.decomposed, 7, !dbg !18
  %33 = add nsw i32 %31, %32, !dbg !19
  %34 = mul i32 %28, 9216, !dbg !20
  %35 = add i32 %33, %34, !dbg !21
  %36 = sext i32 %35 to i64, !dbg !22
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %18) #5, !dbg !23
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !23
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !23
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !23
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !23
  %43 = extractelement <2 x bfloat> %40, i64 0, !dbg !23
  %44 = extractelement <2 x bfloat> %40, i64 1, !dbg !23
  %45 = extractelement <2 x bfloat> %42, i64 0, !dbg !23
  %46 = extractelement <2 x bfloat> %42, i64 1, !dbg !23
  %47 = fpext bfloat %43 to float, !dbg !24
  %48 = fpext bfloat %44 to float, !dbg !24
  %49 = fpext bfloat %45 to float, !dbg !24
  %50 = fpext bfloat %46 to float, !dbg !24
  %51 = or disjoint i32 %32, %21, !dbg !25
  %52 = add i32 %51, %34, !dbg !26
  %53 = sext i32 %52 to i64, !dbg !27
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %18) #5, !dbg !28
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !28
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !28
  %58 = extractvalue { i32, i32 } %55, 1, !dbg !28
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !28
  %60 = extractelement <2 x bfloat> %57, i64 0, !dbg !28
  %61 = extractelement <2 x bfloat> %57, i64 1, !dbg !28
  %62 = extractelement <2 x bfloat> %59, i64 0, !dbg !28
  %63 = extractelement <2 x bfloat> %59, i64 1, !dbg !28
  %64 = fpext bfloat %60 to float, !dbg !29
  %65 = fpext bfloat %61 to float, !dbg !29
  %66 = fpext bfloat %62 to float, !dbg !29
  %67 = fpext bfloat %63 to float, !dbg !29
  %68 = fmul float %47, %47, !dbg !30
  %69 = fmul float %48, %48, !dbg !30
  %70 = fmul float %49, %49, !dbg !30
  %71 = fmul float %50, %50, !dbg !30
  %72 = fmul float %64, %64, !dbg !31
  %73 = fmul float %65, %65, !dbg !31
  %74 = fmul float %66, %66, !dbg !31
  %75 = fmul float %67, %67, !dbg !31
  %76 = fadd float %68, %69, !dbg !32
  %77 = fadd float %70, %76, !dbg !32
  %78 = fadd float %71, %77, !dbg !32
  %79 = select i1 %18, float %78, float 0.000000e+00, !dbg !32
  %80 = bitcast float %79 to i32, !dbg !37
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = fadd float %79, %82, !dbg !32
  %84 = bitcast float %83 to i32, !dbg !37
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !37
  %86 = bitcast i32 %85 to float, !dbg !37
  %87 = fadd float %83, %86, !dbg !32
  %88 = bitcast float %87 to i32, !dbg !37
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !37
  %90 = bitcast i32 %89 to float, !dbg !37
  %91 = fadd float %87, %90, !dbg !32
  %92 = bitcast float %91 to i32, !dbg !37
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !37
  %94 = bitcast i32 %93 to float, !dbg !37
  %95 = fadd float %91, %94, !dbg !32
  %96 = bitcast float %95 to i32, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %95, %98, !dbg !32
  %100 = fadd float %72, %73, !dbg !38
  %101 = fadd float %74, %100, !dbg !38
  %102 = fadd float %75, %101, !dbg !38
  %103 = select i1 %18, float %102, float 0.000000e+00, !dbg !38
  %104 = bitcast float %103 to i32, !dbg !40
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 16, i32 31), !dbg !40
  %106 = bitcast i32 %105 to float, !dbg !40
  %107 = fadd float %103, %106, !dbg !38
  %108 = bitcast float %107 to i32, !dbg !40
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !40
  %110 = bitcast i32 %109 to float, !dbg !40
  %111 = fadd float %107, %110, !dbg !38
  %112 = bitcast float %111 to i32, !dbg !40
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !40
  %114 = bitcast i32 %113 to float, !dbg !40
  %115 = fadd float %111, %114, !dbg !38
  %116 = bitcast float %115 to i32, !dbg !40
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !40
  %118 = bitcast i32 %117 to float, !dbg !40
  %119 = fadd float %115, %118, !dbg !38
  %120 = bitcast float %119 to i32, !dbg !40
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !40
  %122 = bitcast i32 %121 to float, !dbg !40
  %123 = fadd float %119, %122, !dbg !38
  %124 = zext nneg i32 %27 to i64, !dbg !41
  %125 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !41
  %126 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %125, i1 true) #5, !dbg !42
  %127 = bitcast i16 %126 to bfloat, !dbg !42
  %128 = fpext bfloat %127 to float, !dbg !43
  %129 = shl i32 %28, 7, !dbg !44
  %130 = or disjoint i32 %129, %21, !dbg !45
  %131 = sext i32 %130 to i64, !dbg !46
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !46
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %132, i1 %18) #5, !dbg !47
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !47
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !47
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !47
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !47
  %138 = bitcast i32 %134 to float, !dbg !47
  %139 = bitcast i32 %135 to float, !dbg !47
  %140 = bitcast i32 %136 to float, !dbg !47
  %141 = bitcast i32 %137 to float, !dbg !47
  %142 = and i32 %20, 508, !dbg !47
  %143 = shl i32 %13, 7, !dbg !47
  %144 = and i32 %143, 384, !dbg !47
  %145 = or disjoint i32 %23, %144, !dbg !47
  %146 = lshr i32 %20, 5, !dbg !47
  %147 = and i32 %146, 12, !dbg !47
  %148 = add nuw nsw i32 %147, %142, !dbg !47
  %149 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %148, !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %134, i32 %135, i32 %136, i32 %137, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %150 = lshr exact i32 %144, 5, !dbg !47
  %151 = add nuw nsw i32 %150, %145, !dbg !47
  %152 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %151, !dbg !47
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !47
  %154 = or disjoint i32 %145, 32, !dbg !47
  %155 = add nuw nsw i32 %154, %150, !dbg !47
  %156 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %155, !dbg !47
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !47
  %158 = or disjoint i32 %145, 64, !dbg !47
  %159 = add nuw nsw i32 %158, %150, !dbg !47
  %160 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %159, !dbg !47
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !47
  %162 = or disjoint i32 %145, 96, !dbg !47
  %163 = add nuw nsw i32 %162, %150, !dbg !47
  %164 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %163, !dbg !47
  %165 = load float, ptr addrspace(3) %164, align 4, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !48
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %166, i1 %18) #5, !dbg !49
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !49
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !49
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !49
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %168, i32 %169, i32 %170, i32 %171, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %172 = load float, ptr addrspace(3) %152, align 4, !dbg !49
  %173 = load float, ptr addrspace(3) %156, align 4, !dbg !49
  %174 = load float, ptr addrspace(3) %160, align 4, !dbg !49
  %175 = load float, ptr addrspace(3) %164, align 4, !dbg !49
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %18) #5, !dbg !50
  %177 = getelementptr bfloat, ptr addrspace(1) %4, i64 %124, !dbg !51
  %178 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %177, i1 true) #5, !dbg !52
  %179 = icmp eq i32 %.lobit, 0, !dbg !53
  %180 = and i32 %22, 30, !dbg !54
  %181 = and i32 %24, 62, !dbg !54
  %182 = and i32 %25, 94, !dbg !54
  %183 = and i32 %26, 126, !dbg !54
  %184 = or disjoint i32 %180, 1, !dbg !55
  %185 = or i32 %23, 33, !dbg !55
  %186 = or i32 %23, 65, !dbg !55
  %187 = or i32 %23, 97, !dbg !55
  %188 = shl i32 %17, 7, !dbg !56
  %189 = mul i32 %30, 6144, !dbg !56
  %190 = add i32 %189, %188, !dbg !56
  %191 = or disjoint i32 %190, %184, !dbg !57
  %192 = or disjoint i32 %190, %185, !dbg !57
  %193 = or disjoint i32 %190, %186, !dbg !57
  %194 = or disjoint i32 %190, %187, !dbg !57
  %195 = sext i32 %191 to i64, !dbg !58
  %196 = getelementptr bfloat, ptr addrspace(1) %0, i64 %195, !dbg !58
  %197 = sext i32 %192 to i64, !dbg !58
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %197, !dbg !58
  %199 = sext i32 %193 to i64, !dbg !58
  %200 = getelementptr bfloat, ptr addrspace(1) %0, i64 %199, !dbg !58
  %201 = sext i32 %194 to i64, !dbg !58
  %202 = getelementptr bfloat, ptr addrspace(1) %0, i64 %201, !dbg !58
  %203 = and i1 %19, %179, !dbg !59
  %204 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %196, i1 %203) #5, !dbg !60
  %205 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %198, i1 %203) #5, !dbg !60
  %206 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %200, i1 %203) #5, !dbg !60
  %207 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %202, i1 %203) #5, !dbg !60
  %208 = tail call float @llvm.nvvm.div.full(float %123, float 1.280000e+02), !dbg !61
  %209 = fadd float %208, 0x3EB0C6F7A0000000, !dbg !62
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not.i = icmp eq i32 %210, 0, !dbg !63
  br i1 %.not.i, label %213, label %211, !dbg !63

211:                                              ; preds = %10
  %212 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit, !dbg !63

213:                                              ; preds = %10
  %214 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit, !dbg !63

__nv_rsqrtf.exit:                                 ; preds = %211, %213
  %.0.i = phi float [ %212, %211 ], [ %214, %213 ], !dbg !63
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not.i22 = icmp eq i32 %215, 0, !dbg !63
  br i1 %.not.i22, label %218, label %216, !dbg !63

216:                                              ; preds = %__nv_rsqrtf.exit
  %217 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit24, !dbg !63

218:                                              ; preds = %__nv_rsqrtf.exit
  %219 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit24, !dbg !63

__nv_rsqrtf.exit24:                               ; preds = %216, %218
  %.0.i23 = phi float [ %217, %216 ], [ %219, %218 ], !dbg !63
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not.i25 = icmp eq i32 %220, 0, !dbg !63
  br i1 %.not.i25, label %223, label %221, !dbg !63

221:                                              ; preds = %__nv_rsqrtf.exit24
  %222 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit27, !dbg !63

223:                                              ; preds = %__nv_rsqrtf.exit24
  %224 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit27, !dbg !63

__nv_rsqrtf.exit27:                               ; preds = %221, %223
  %.0.i26 = phi float [ %222, %221 ], [ %224, %223 ], !dbg !63
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !63
  %.not.i28 = icmp eq i32 %225, 0, !dbg !63
  br i1 %.not.i28, label %228, label %226, !dbg !63

226:                                              ; preds = %__nv_rsqrtf.exit27
  %227 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit30, !dbg !63

228:                                              ; preds = %__nv_rsqrtf.exit27
  %229 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !63
  br label %__nv_rsqrtf.exit30, !dbg !63

__nv_rsqrtf.exit30:                               ; preds = %226, %228
  %.0.i29 = phi float [ %227, %226 ], [ %229, %228 ], !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %.idx = shl nuw nsw i32 %14, 3, !dbg !64
  %230 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !64
  %231 = bitcast float %.0.i to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #5, !dbg !64
  %232 = bitcast float %.0.i23 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %232, i1 true) #5, !dbg !64
  %233 = bitcast float %.0.i26 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %233, i1 true) #5, !dbg !64
  %234 = bitcast float %.0.i29 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %234, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !64
  %235 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !64
  %236 = load float, ptr addrspace(3) %235, align 8, !dbg !64
  %237 = zext nneg i32 %184 to i64, !dbg !65
  %238 = getelementptr bfloat, ptr addrspace(1) %1, i64 %237, !dbg !65
  %239 = zext nneg i32 %185 to i64, !dbg !65
  %240 = getelementptr bfloat, ptr addrspace(1) %1, i64 %239, !dbg !65
  %241 = zext nneg i32 %186 to i64, !dbg !65
  %242 = getelementptr bfloat, ptr addrspace(1) %1, i64 %241, !dbg !65
  %243 = zext nneg i32 %187 to i64, !dbg !65
  %244 = getelementptr bfloat, ptr addrspace(1) %1, i64 %243, !dbg !65
  %245 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %238, i1 %203) #5, !dbg !66
  %246 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %240, i1 %203) #5, !dbg !66
  %247 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %242, i1 %203) #5, !dbg !66
  %248 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %244, i1 %203) #5, !dbg !66
  %249 = icmp ne i32 %.lobit, 0, !dbg !67
  %250 = or disjoint i32 %190, %180, !dbg !68
  %251 = or disjoint i32 %190, %181, !dbg !68
  %252 = or disjoint i32 %190, %182, !dbg !68
  %253 = or disjoint i32 %190, %183, !dbg !68
  %254 = sext i32 %250 to i64, !dbg !69
  %255 = getelementptr bfloat, ptr addrspace(1) %0, i64 %254, !dbg !69
  %256 = sext i32 %251 to i64, !dbg !69
  %257 = getelementptr bfloat, ptr addrspace(1) %0, i64 %256, !dbg !69
  %258 = sext i32 %252 to i64, !dbg !69
  %259 = getelementptr bfloat, ptr addrspace(1) %0, i64 %258, !dbg !69
  %260 = sext i32 %253 to i64, !dbg !69
  %261 = getelementptr bfloat, ptr addrspace(1) %0, i64 %260, !dbg !69
  %262 = and i1 %19, %249, !dbg !70
  %263 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %255, i1 %262) #5, !dbg !71
  %264 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %257, i1 %262) #5, !dbg !71
  %265 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %259, i1 %262) #5, !dbg !71
  %266 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %261, i1 %262) #5, !dbg !71
  %267 = zext nneg i32 %180 to i64, !dbg !72
  %268 = getelementptr bfloat, ptr addrspace(1) %1, i64 %267, !dbg !72
  %269 = zext nneg i32 %181 to i64, !dbg !72
  %270 = getelementptr bfloat, ptr addrspace(1) %1, i64 %269, !dbg !72
  %271 = zext nneg i32 %182 to i64, !dbg !72
  %272 = getelementptr bfloat, ptr addrspace(1) %1, i64 %271, !dbg !72
  %273 = zext nneg i32 %183 to i64, !dbg !72
  %274 = getelementptr bfloat, ptr addrspace(1) %1, i64 %273, !dbg !72
  %275 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %268, i1 %262) #5, !dbg !73
  %276 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %270, i1 %262) #5, !dbg !73
  %277 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %272, i1 %262) #5, !dbg !73
  %278 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %274, i1 %262) #5, !dbg !73
  %279 = fmul float %.0.i29, %64, !dbg !74
  %280 = fmul float %.0.i29, %65, !dbg !74
  %281 = fmul float %.0.i29, %66, !dbg !74
  %282 = fmul float %.0.i29, %67, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %283 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !75
  %284 = bitcast float %128 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %285 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %21, !dbg !75
  %286 = load float, ptr addrspace(3) %285, align 16, !dbg !75
  %287 = getelementptr inbounds nuw i8, ptr addrspace(3) %285, i32 4, !dbg !75
  %288 = load float, ptr addrspace(3) %287, align 4, !dbg !75
  %289 = getelementptr inbounds nuw i8, ptr addrspace(3) %285, i32 8, !dbg !75
  %290 = load float, ptr addrspace(3) %289, align 8, !dbg !75
  %291 = getelementptr inbounds nuw i8, ptr addrspace(3) %285, i32 12, !dbg !75
  %292 = load float, ptr addrspace(3) %291, align 4, !dbg !75
  %293 = fmul float %279, %286, !dbg !75
  %294 = fmul float %280, %288, !dbg !75
  %295 = fmul float %281, %290, !dbg !75
  %296 = fmul float %282, %292, !dbg !75
  %297 = fmul float %293, %138, !dbg !76
  %298 = fmul float %294, %139, !dbg !76
  %299 = fmul float %295, %140, !dbg !76
  %300 = fmul float %296, %141, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %301 = bitcast float %297 to i32, !dbg !76
  %302 = bitcast float %298 to i32, !dbg !76
  %303 = bitcast float %299 to i32, !dbg !76
  %304 = bitcast float %300 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %301, i32 %302, i32 %303, i32 %304, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %305 = load float, ptr addrspace(3) %152, align 4, !dbg !76
  %306 = load float, ptr addrspace(3) %156, align 4, !dbg !76
  %307 = load float, ptr addrspace(3) %160, align 4, !dbg !76
  %308 = load float, ptr addrspace(3) %164, align 4, !dbg !76
  %309 = or i32 %23, 3105, !dbg !77
  %310 = or i32 %23, 3137, !dbg !77
  %311 = or i32 %23, 3169, !dbg !77
  %312 = add i32 %190, 3073, !dbg !78
  %313 = or disjoint i32 %312, %180, !dbg !79
  %314 = add i32 %190, %309, !dbg !79
  %315 = add i32 %190, %310, !dbg !79
  %316 = add i32 %190, %311, !dbg !79
  %317 = sext i32 %313 to i64, !dbg !80
  %318 = getelementptr bfloat, ptr addrspace(1) %0, i64 %317, !dbg !80
  %319 = sext i32 %314 to i64, !dbg !80
  %320 = getelementptr bfloat, ptr addrspace(1) %0, i64 %319, !dbg !80
  %321 = sext i32 %315 to i64, !dbg !80
  %322 = getelementptr bfloat, ptr addrspace(1) %0, i64 %321, !dbg !80
  %323 = sext i32 %316 to i64, !dbg !80
  %324 = getelementptr bfloat, ptr addrspace(1) %0, i64 %323, !dbg !80
  %325 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %318, i1 %203) #5, !dbg !81
  %326 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %320, i1 %203) #5, !dbg !81
  %327 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %322, i1 %203) #5, !dbg !81
  %328 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %324, i1 %203) #5, !dbg !81
  %329 = tail call float @llvm.nvvm.div.full(float %99, float 1.280000e+02), !dbg !82
  %330 = fadd float %329, 0x3EB0C6F7A0000000, !dbg !83
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i31 = icmp eq i32 %331, 0, !dbg !84
  br i1 %.not.i31, label %334, label %332, !dbg !84

332:                                              ; preds = %__nv_rsqrtf.exit30
  %333 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit33, !dbg !84

334:                                              ; preds = %__nv_rsqrtf.exit30
  %335 = tail call float @llvm.nvvm.rsqrt.approx.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit33, !dbg !84

__nv_rsqrtf.exit33:                               ; preds = %332, %334
  %.0.i32 = phi float [ %333, %332 ], [ %335, %334 ], !dbg !84
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i34 = icmp eq i32 %336, 0, !dbg !84
  br i1 %.not.i34, label %339, label %337, !dbg !84

337:                                              ; preds = %__nv_rsqrtf.exit33
  %338 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit36, !dbg !84

339:                                              ; preds = %__nv_rsqrtf.exit33
  %340 = tail call float @llvm.nvvm.rsqrt.approx.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit36, !dbg !84

__nv_rsqrtf.exit36:                               ; preds = %337, %339
  %.0.i35 = phi float [ %338, %337 ], [ %340, %339 ], !dbg !84
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i37 = icmp eq i32 %341, 0, !dbg !84
  br i1 %.not.i37, label %344, label %342, !dbg !84

342:                                              ; preds = %__nv_rsqrtf.exit36
  %343 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit39, !dbg !84

344:                                              ; preds = %__nv_rsqrtf.exit36
  %345 = tail call float @llvm.nvvm.rsqrt.approx.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit39, !dbg !84

__nv_rsqrtf.exit39:                               ; preds = %342, %344
  %.0.i38 = phi float [ %343, %342 ], [ %345, %344 ], !dbg !84
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !84
  %.not.i40 = icmp eq i32 %346, 0, !dbg !84
  br i1 %.not.i40, label %349, label %347, !dbg !84

347:                                              ; preds = %__nv_rsqrtf.exit39
  %348 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit42, !dbg !84

349:                                              ; preds = %__nv_rsqrtf.exit39
  %350 = tail call float @llvm.nvvm.rsqrt.approx.f(float %330), !dbg !84
  br label %__nv_rsqrtf.exit42, !dbg !84

__nv_rsqrtf.exit42:                               ; preds = %347, %349
  %.0.i41 = phi float [ %348, %347 ], [ %350, %349 ], !dbg !84
  %351 = bitcast i16 %328 to bfloat, !dbg !81
  %352 = fpext bfloat %351 to float, !dbg !85
  %353 = bitcast i16 %327 to bfloat, !dbg !81
  %354 = fpext bfloat %353 to float, !dbg !85
  %355 = bitcast i16 %326 to bfloat, !dbg !81
  %356 = fpext bfloat %355 to float, !dbg !85
  %357 = bitcast i16 %325 to bfloat, !dbg !81
  %358 = fpext bfloat %357 to float, !dbg !85
  %359 = bitcast i16 %207 to bfloat, !dbg !60
  %360 = fpext bfloat %359 to float, !dbg !86
  %361 = fmul float %236, %360, !dbg !64
  %362 = bitcast i16 %248 to bfloat, !dbg !66
  %363 = fpext bfloat %362 to float, !dbg !87
  %364 = fmul float %361, %363, !dbg !88
  %365 = fsub float 0.000000e+00, %364, !dbg !89
  %366 = bitcast i16 %266 to bfloat, !dbg !71
  %367 = fpext bfloat %366 to float, !dbg !90
  %368 = fmul float %236, %367, !dbg !91
  %369 = bitcast i16 %278 to bfloat, !dbg !73
  %370 = fpext bfloat %369 to float, !dbg !92
  %371 = fmul float %368, %370, !dbg !93
  %372 = select i1 %179, float %365, float %371, !dbg !94
  %373 = fmul float %175, %372, !dbg !95
  %374 = fadd float %373, %308, !dbg !96
  %375 = bitcast i16 %206 to bfloat, !dbg !60
  %376 = fpext bfloat %375 to float, !dbg !86
  %377 = fmul float %236, %376, !dbg !64
  %378 = bitcast i16 %247 to bfloat, !dbg !66
  %379 = fpext bfloat %378 to float, !dbg !87
  %380 = fmul float %377, %379, !dbg !88
  %381 = fsub float 0.000000e+00, %380, !dbg !89
  %382 = bitcast i16 %265 to bfloat, !dbg !71
  %383 = fpext bfloat %382 to float, !dbg !90
  %384 = fmul float %236, %383, !dbg !91
  %385 = bitcast i16 %277 to bfloat, !dbg !73
  %386 = fpext bfloat %385 to float, !dbg !92
  %387 = fmul float %384, %386, !dbg !93
  %388 = select i1 %179, float %381, float %387, !dbg !94
  %389 = fmul float %174, %388, !dbg !95
  %390 = fadd float %389, %307, !dbg !96
  %391 = bitcast i16 %205 to bfloat, !dbg !60
  %392 = fpext bfloat %391 to float, !dbg !86
  %393 = fmul float %236, %392, !dbg !64
  %394 = bitcast i16 %246 to bfloat, !dbg !66
  %395 = fpext bfloat %394 to float, !dbg !87
  %396 = fmul float %393, %395, !dbg !88
  %397 = fsub float 0.000000e+00, %396, !dbg !89
  %398 = bitcast i16 %264 to bfloat, !dbg !71
  %399 = fpext bfloat %398 to float, !dbg !90
  %400 = fmul float %236, %399, !dbg !91
  %401 = bitcast i16 %276 to bfloat, !dbg !73
  %402 = fpext bfloat %401 to float, !dbg !92
  %403 = fmul float %400, %402, !dbg !93
  %404 = select i1 %179, float %397, float %403, !dbg !94
  %405 = fmul float %173, %404, !dbg !95
  %406 = fadd float %405, %306, !dbg !96
  %407 = bitcast i16 %204 to bfloat, !dbg !60
  %408 = fpext bfloat %407 to float, !dbg !86
  %409 = fmul float %236, %408, !dbg !64
  %410 = bitcast i16 %245 to bfloat, !dbg !66
  %411 = fpext bfloat %410 to float, !dbg !87
  %412 = fmul float %409, %411, !dbg !88
  %413 = fsub float 0.000000e+00, %412, !dbg !89
  %414 = bitcast i16 %263 to bfloat, !dbg !71
  %415 = fpext bfloat %414 to float, !dbg !90
  %416 = fmul float %236, %415, !dbg !91
  %417 = bitcast i16 %275 to bfloat, !dbg !73
  %418 = fpext bfloat %417 to float, !dbg !92
  %419 = fmul float %416, %418, !dbg !93
  %420 = select i1 %179, float %413, float %419, !dbg !94
  %421 = fmul float %172, %420, !dbg !95
  %422 = fadd float %421, %305, !dbg !96
  %423 = bitcast i16 %178 to bfloat, !dbg !52
  %424 = fpext bfloat %423 to float, !dbg !97
  %425 = extractvalue { i32, i32 } %176, 1, !dbg !50
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !50
  %427 = extractelement <2 x bfloat> %426, i64 1, !dbg !50
  %428 = fpext bfloat %427 to float, !dbg !98
  %429 = extractelement <2 x bfloat> %426, i64 0, !dbg !50
  %430 = fpext bfloat %429 to float, !dbg !98
  %431 = extractvalue { i32, i32 } %176, 0, !dbg !50
  %432 = bitcast i32 %431 to <2 x bfloat>, !dbg !50
  %433 = extractelement <2 x bfloat> %432, i64 1, !dbg !50
  %434 = fpext bfloat %433 to float, !dbg !98
  %435 = extractelement <2 x bfloat> %432, i64 0, !dbg !50
  %436 = fpext bfloat %435 to float, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %437 = bitcast float %.0.i32 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %437, i1 true) #5, !dbg !99
  %438 = bitcast float %.0.i35 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %438, i1 true) #5, !dbg !99
  %439 = bitcast float %.0.i38 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %439, i1 true) #5, !dbg !99
  %440 = bitcast float %.0.i41 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %440, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %441 = load float, ptr addrspace(3) %235, align 8, !dbg !99
  %442 = fmul float %441, %358, !dbg !99
  %443 = fmul float %441, %356, !dbg !99
  %444 = fmul float %441, %354, !dbg !99
  %445 = fmul float %441, %352, !dbg !99
  %446 = getelementptr bfloat, ptr addrspace(1) %4, i64 %237, !dbg !100
  %447 = getelementptr bfloat, ptr addrspace(1) %4, i64 %239, !dbg !100
  %448 = getelementptr bfloat, ptr addrspace(1) %4, i64 %241, !dbg !100
  %449 = getelementptr bfloat, ptr addrspace(1) %4, i64 %243, !dbg !100
  %450 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %446, i1 %203) #5, !dbg !101
  %451 = bitcast i16 %450 to bfloat, !dbg !101
  %452 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %447, i1 %203) #5, !dbg !101
  %453 = bitcast i16 %452 to bfloat, !dbg !101
  %454 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %448, i1 %203) #5, !dbg !101
  %455 = bitcast i16 %454 to bfloat, !dbg !101
  %456 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %449, i1 %203) #5, !dbg !101
  %457 = bitcast i16 %456 to bfloat, !dbg !101
  %458 = fpext bfloat %451 to float, !dbg !102
  %459 = fpext bfloat %453 to float, !dbg !102
  %460 = fpext bfloat %455 to float, !dbg !102
  %461 = fpext bfloat %457 to float, !dbg !102
  %462 = fmul float %442, %458, !dbg !103
  %463 = fmul float %443, %459, !dbg !103
  %464 = fmul float %444, %460, !dbg !103
  %465 = fmul float %445, %461, !dbg !103
  %466 = fsub float 0.000000e+00, %462, !dbg !104
  %467 = fsub float 0.000000e+00, %463, !dbg !104
  %468 = fsub float 0.000000e+00, %464, !dbg !104
  %469 = fsub float 0.000000e+00, %465, !dbg !104
  %470 = add i32 %190, 3072, !dbg !105
  %471 = or disjoint i32 %470, %180, !dbg !106
  %472 = or disjoint i32 %470, %181, !dbg !106
  %473 = or disjoint i32 %470, %182, !dbg !106
  %474 = or disjoint i32 %470, %183, !dbg !106
  %475 = sext i32 %471 to i64, !dbg !107
  %476 = getelementptr bfloat, ptr addrspace(1) %0, i64 %475, !dbg !107
  %477 = sext i32 %472 to i64, !dbg !107
  %478 = getelementptr bfloat, ptr addrspace(1) %0, i64 %477, !dbg !107
  %479 = sext i32 %473 to i64, !dbg !107
  %480 = getelementptr bfloat, ptr addrspace(1) %0, i64 %479, !dbg !107
  %481 = sext i32 %474 to i64, !dbg !107
  %482 = getelementptr bfloat, ptr addrspace(1) %0, i64 %481, !dbg !107
  %483 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %476, i1 %262) #5, !dbg !108
  %484 = bitcast i16 %483 to bfloat, !dbg !108
  %485 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %478, i1 %262) #5, !dbg !108
  %486 = bitcast i16 %485 to bfloat, !dbg !108
  %487 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %480, i1 %262) #5, !dbg !108
  %488 = bitcast i16 %487 to bfloat, !dbg !108
  %489 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %482, i1 %262) #5, !dbg !108
  %490 = bitcast i16 %489 to bfloat, !dbg !108
  %491 = fpext bfloat %484 to float, !dbg !109
  %492 = fpext bfloat %486 to float, !dbg !109
  %493 = fpext bfloat %488 to float, !dbg !109
  %494 = fpext bfloat %490 to float, !dbg !109
  %495 = fmul float %441, %491, !dbg !110
  %496 = fmul float %441, %492, !dbg !110
  %497 = fmul float %441, %493, !dbg !110
  %498 = fmul float %441, %494, !dbg !110
  %499 = getelementptr bfloat, ptr addrspace(1) %4, i64 %267, !dbg !111
  %500 = getelementptr bfloat, ptr addrspace(1) %4, i64 %269, !dbg !111
  %501 = getelementptr bfloat, ptr addrspace(1) %4, i64 %271, !dbg !111
  %502 = getelementptr bfloat, ptr addrspace(1) %4, i64 %273, !dbg !111
  %503 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %499, i1 %262) #5, !dbg !112
  %504 = bitcast i16 %503 to bfloat, !dbg !112
  %505 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %500, i1 %262) #5, !dbg !112
  %506 = bitcast i16 %505 to bfloat, !dbg !112
  %507 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %501, i1 %262) #5, !dbg !112
  %508 = bitcast i16 %507 to bfloat, !dbg !112
  %509 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %502, i1 %262) #5, !dbg !112
  %510 = bitcast i16 %509 to bfloat, !dbg !112
  %511 = fpext bfloat %504 to float, !dbg !113
  %512 = fpext bfloat %506 to float, !dbg !113
  %513 = fpext bfloat %508 to float, !dbg !113
  %514 = fpext bfloat %510 to float, !dbg !113
  %515 = fmul float %495, %511, !dbg !114
  %516 = fmul float %496, %512, !dbg !114
  %517 = fmul float %497, %513, !dbg !114
  %518 = fmul float %498, %514, !dbg !114
  %519 = select i1 %179, float %466, float %515, !dbg !94
  %520 = select i1 %179, float %467, float %516, !dbg !94
  %521 = select i1 %179, float %468, float %517, !dbg !94
  %522 = select i1 %179, float %469, float %518, !dbg !94
  %523 = fmul float %.0.i41, %436, !dbg !115
  %524 = fmul float %.0.i41, %434, !dbg !115
  %525 = fmul float %.0.i41, %430, !dbg !115
  %526 = fmul float %.0.i41, %428, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %527 = bitcast float %523 to i32, !dbg !115
  %528 = bitcast float %524 to i32, !dbg !115
  %529 = bitcast float %525 to i32, !dbg !115
  %530 = bitcast float %526 to i32, !dbg !115
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %527, i32 %528, i32 %529, i32 %530, i1 true) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %531 = load float, ptr addrspace(3) %152, align 4, !dbg !115
  %532 = load float, ptr addrspace(3) %156, align 4, !dbg !115
  %533 = load float, ptr addrspace(3) %160, align 4, !dbg !115
  %534 = load float, ptr addrspace(3) %164, align 4, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %535 = bitcast float %424 to <1 x i32>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %535, i1 true) #5, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %536 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23, !dbg !116
  %537 = load float, ptr addrspace(3) %536, align 4, !dbg !116
  %538 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24, !dbg !116
  %539 = load float, ptr addrspace(3) %538, align 4, !dbg !116
  %540 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25, !dbg !116
  %541 = load float, ptr addrspace(3) %540, align 4, !dbg !116
  %542 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !116
  %543 = load float, ptr addrspace(3) %542, align 4, !dbg !116
  %544 = fmul float %531, %537, !dbg !117
  %545 = fmul float %532, %539, !dbg !117
  %546 = fmul float %533, %541, !dbg !117
  %547 = fmul float %534, %543, !dbg !117
  %548 = fmul float %153, %544, !dbg !116
  %549 = fmul float %157, %545, !dbg !116
  %550 = fmul float %161, %546, !dbg !116
  %551 = fmul float %165, %547, !dbg !116
  %552 = fmul float %172, %519, !dbg !118
  %553 = fmul float %173, %520, !dbg !118
  %554 = fmul float %174, %521, !dbg !118
  %555 = fmul float %175, %522, !dbg !118
  %556 = fadd float %552, %548, !dbg !119
  %557 = fadd float %553, %549, !dbg !119
  %558 = fadd float %554, %550, !dbg !119
  %559 = fadd float %555, %551, !dbg !119
  %560 = shl i32 %16, 7, !dbg !120
  %561 = or disjoint i32 %560, %21, !dbg !121
  %562 = sext i32 %561 to i64, !dbg !122
  %563 = getelementptr bfloat, ptr addrspace(1) %5, i64 %562, !dbg !122
  %564 = fptrunc float %422 to bfloat, !dbg !123
  %565 = fptrunc float %406 to bfloat, !dbg !123
  %566 = fptrunc float %390 to bfloat, !dbg !123
  %567 = fptrunc float %374 to bfloat, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %568 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %151, !dbg !123
  %569 = bitcast bfloat %564 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %568, <1 x i16> %569, i1 true) #5, !dbg !123
  %570 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %155, !dbg !123
  %571 = bitcast bfloat %565 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %570, <1 x i16> %571, i1 true) #5, !dbg !123
  %572 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %159, !dbg !123
  %573 = bitcast bfloat %566 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %572, <1 x i16> %573, i1 true) #5, !dbg !123
  %574 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %163, !dbg !123
  %575 = bitcast bfloat %567 to <1 x i16>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %574, <1 x i16> %575, i1 true) #5, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %576 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %148, !dbg !123
  %.uncasted.extract = load i32, ptr addrspace(3) %576, align 8, !dbg !123
  %577 = getelementptr inbounds nuw i8, ptr addrspace(3) %576, i32 4, !dbg !123
  %.uncasted.extract13 = load i32, ptr addrspace(3) %577, align 4, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract13, ptr addrspace(1) %563, i1 %18) #5, !dbg !123
  %578 = getelementptr bfloat, ptr addrspace(1) %6, i64 %562, !dbg !124
  %579 = fptrunc float %556 to bfloat, !dbg !125
  %580 = fptrunc float %557 to bfloat, !dbg !125
  %581 = fptrunc float %558 to bfloat, !dbg !125
  %582 = fptrunc float %559 to bfloat, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %583 = bitcast bfloat %579 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %568, <1 x i16> %583, i1 true) #5, !dbg !125
  %584 = bitcast bfloat %580 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %570, <1 x i16> %584, i1 true) #5, !dbg !125
  %585 = bitcast bfloat %581 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %572, <1 x i16> %585, i1 true) #5, !dbg !125
  %586 = bitcast bfloat %582 to <1 x i16>, !dbg !125
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %574, <1 x i16> %586, i1 true) #5, !dbg !125
  tail call void @llvm.nvvm.barrier0(), !dbg !125
  %.uncasted.extract19 = load i32, ptr addrspace(3) %576, align 8, !dbg !125
  %.uncasted.extract21 = load i32, ptr addrspace(3) %577, align 4, !dbg !125
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract19, i32 %.uncasted.extract21, ptr addrspace(1) %578, i1 %18) #5, !dbg !125
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4vjqhad7sc635wan56m2hfgerxquvjcsylutimuij7rrwxhwfl.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", linkageName: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 19, scope: !6)
!17 = !DILocation(line: 39, column: 41, scope: !6)
!18 = !DILocation(line: 39, column: 52, scope: !6)
!19 = !DILocation(line: 39, column: 48, scope: !6)
!20 = !DILocation(line: 39, column: 62, scope: !6)
!21 = !DILocation(line: 39, column: 57, scope: !6)
!22 = !DILocation(line: 39, column: 34, scope: !6)
!23 = !DILocation(line: 39, column: 67, scope: !6)
!24 = !DILocation(line: 39, column: 128, scope: !6)
!25 = !DILocation(line: 40, column: 41, scope: !6)
!26 = !DILocation(line: 40, column: 50, scope: !6)
!27 = !DILocation(line: 40, column: 34, scope: !6)
!28 = !DILocation(line: 40, column: 60, scope: !6)
!29 = !DILocation(line: 40, column: 121, scope: !6)
!30 = !DILocation(line: 42, column: 22, scope: !6)
!31 = !DILocation(line: 47, column: 22, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 51, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !39)
!39 = !DILocation(line: 52, column: 27, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !39)
!41 = !DILocation(line: 60, column: 35, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 95, scope: !6)
!44 = !DILocation(line: 61, column: 46, scope: !6)
!45 = !DILocation(line: 61, column: 42, scope: !6)
!46 = !DILocation(line: 61, column: 35, scope: !6)
!47 = !DILocation(line: 61, column: 51, scope: !6)
!48 = !DILocation(line: 62, column: 35, scope: !6)
!49 = !DILocation(line: 62, column: 51, scope: !6)
!50 = !DILocation(line: 63, column: 68, scope: !6)
!51 = !DILocation(line: 64, column: 35, scope: !6)
!52 = !DILocation(line: 64, column: 42, scope: !6)
!53 = !DILocation(line: 69, column: 24, scope: !6)
!54 = !DILocation(line: 70, column: 42, scope: !6)
!55 = !DILocation(line: 70, column: 39, scope: !6)
!56 = !DILocation(line: 70, column: 55, scope: !6)
!57 = !DILocation(line: 70, column: 64, scope: !6)
!58 = !DILocation(line: 70, column: 35, scope: !6)
!59 = !DILocation(line: 70, column: 92, scope: !6)
!60 = !DILocation(line: 70, column: 74, scope: !6)
!61 = !DILocation(line: 73, column: 25, scope: !6)
!62 = !DILocation(line: 75, column: 24, scope: !6)
!63 = !DILocation(line: 76, column: 32, scope: !6)
!64 = !DILocation(line: 77, column: 24, scope: !6)
!65 = !DILocation(line: 79, column: 35, scope: !6)
!66 = !DILocation(line: 79, column: 92, scope: !6)
!67 = !DILocation(line: 84, column: 25, scope: !6)
!68 = !DILocation(line: 87, column: 60, scope: !6)
!69 = !DILocation(line: 87, column: 35, scope: !6)
!70 = !DILocation(line: 87, column: 88, scope: !6)
!71 = !DILocation(line: 87, column: 70, scope: !6)
!72 = !DILocation(line: 96, column: 35, scope: !6)
!73 = !DILocation(line: 96, column: 88, scope: !6)
!74 = !DILocation(line: 108, column: 24, scope: !6)
!75 = !DILocation(line: 110, column: 24, scope: !6)
!76 = !DILocation(line: 112, column: 24, scope: !6)
!77 = !DILocation(line: 116, column: 42, scope: !6)
!78 = !DILocation(line: 116, column: 58, scope: !6)
!79 = !DILocation(line: 116, column: 67, scope: !6)
!80 = !DILocation(line: 116, column: 35, scope: !6)
!81 = !DILocation(line: 116, column: 77, scope: !6)
!82 = !DILocation(line: 118, column: 24, scope: !6)
!83 = !DILocation(line: 119, column: 24, scope: !6)
!84 = !DILocation(line: 120, column: 32, scope: !6)
!85 = !DILocation(line: 116, column: 146, scope: !6)
!86 = !DILocation(line: 70, column: 143, scope: !6)
!87 = !DILocation(line: 79, column: 161, scope: !6)
!88 = !DILocation(line: 80, column: 24, scope: !6)
!89 = !DILocation(line: 81, column: 17, scope: !6)
!90 = !DILocation(line: 87, column: 139, scope: !6)
!91 = !DILocation(line: 94, column: 24, scope: !6)
!92 = !DILocation(line: 96, column: 157, scope: !6)
!93 = !DILocation(line: 97, column: 24, scope: !6)
!94 = !DILocation(line: 0, scope: !6)
!95 = !DILocation(line: 113, column: 24, scope: !6)
!96 = !DILocation(line: 114, column: 24, scope: !6)
!97 = !DILocation(line: 64, column: 95, scope: !6)
!98 = !DILocation(line: 63, column: 130, scope: !6)
!99 = !DILocation(line: 121, column: 24, scope: !6)
!100 = !DILocation(line: 123, column: 35, scope: !6)
!101 = !DILocation(line: 123, column: 92, scope: !6)
!102 = !DILocation(line: 123, column: 161, scope: !6)
!103 = !DILocation(line: 124, column: 24, scope: !6)
!104 = !DILocation(line: 125, column: 17, scope: !6)
!105 = !DILocation(line: 128, column: 58, scope: !6)
!106 = !DILocation(line: 128, column: 67, scope: !6)
!107 = !DILocation(line: 128, column: 35, scope: !6)
!108 = !DILocation(line: 128, column: 77, scope: !6)
!109 = !DILocation(line: 128, column: 146, scope: !6)
!110 = !DILocation(line: 133, column: 24, scope: !6)
!111 = !DILocation(line: 135, column: 35, scope: !6)
!112 = !DILocation(line: 135, column: 88, scope: !6)
!113 = !DILocation(line: 135, column: 157, scope: !6)
!114 = !DILocation(line: 136, column: 24, scope: !6)
!115 = !DILocation(line: 145, column: 24, scope: !6)
!116 = !DILocation(line: 149, column: 26, scope: !6)
!117 = !DILocation(line: 147, column: 25, scope: !6)
!118 = !DILocation(line: 150, column: 25, scope: !6)
!119 = !DILocation(line: 151, column: 26, scope: !6)
!120 = !DILocation(line: 153, column: 40, scope: !6)
!121 = !DILocation(line: 153, column: 36, scope: !6)
!122 = !DILocation(line: 153, column: 29, scope: !6)
!123 = !DILocation(line: 153, column: 52, scope: !6)
!124 = !DILocation(line: 154, column: 29, scope: !6)
!125 = !DILocation(line: 154, column: 53, scope: !6)
!126 = !DILocation(line: 53, column: 4, scope: !6)
