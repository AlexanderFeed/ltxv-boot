; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
._crit_edge:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 2, !dbg !11
  %21 = and i32 %20, 2044, !dbg !11
  %22 = sext i32 %16 to i64, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %4, i64 %22, !dbg !12
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %28 = bitcast i16 %27 to bfloat, !dbg !13
  %29 = getelementptr bfloat, ptr addrspace(1) %5, i64 %22, !dbg !14
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %34 = bitcast i16 %33 to bfloat, !dbg !15
  %35 = mul i32 %16, 3072, !dbg !16
  %.inv = fcmp oge bfloat %28, 0xR0000, !dbg !17
  %36 = select i1 %.inv, bfloat 0xR0000, bfloat %28, !dbg !17
  %37 = fpext bfloat %36 to float, !dbg !17
  %38 = fsub float 0.000000e+00, %37, !dbg !21
  %.inv3 = fcmp ole bfloat %34, 0xR0000, !dbg !22
  %39 = select i1 %.inv3, bfloat 0xR0000, bfloat %34, !dbg !22
  %40 = fpext bfloat %39 to float, !dbg !22
  %41 = fcmp ogt float %38, %40, !dbg !24
  %42 = fcmp uno float %38, 0.000000e+00, !dbg !26
  %43 = or i1 %42, %41, !dbg !27
  %44 = select i1 %43, float %38, float %40, !dbg !28
  %45 = fmul float %44, 0x3F80204080000000, !dbg !29
  %46 = fcmp ogt float %45, 0x3EE4F8B580000000, !dbg !30
  %47 = fcmp uno float %45, 0.000000e+00, !dbg !32
  %48 = or i1 %46, %47, !dbg !33
  %49 = select i1 %48, float %45, float 0x3EE4F8B580000000, !dbg !34
  %50 = zext nneg i32 %21 to i64, !dbg !35
  %51 = insertelement <4 x float> poison, float %49, i64 0, !dbg !36
  %52 = shufflevector <4 x float> %51, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !36
  %53 = add i32 %35, %21, !dbg !37
  %54 = sext i32 %53 to i64, !dbg !38
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !38
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %17) #5, !dbg !39
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !39
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !39
  %59 = extractvalue { i32, i32 } %56, 1, !dbg !39
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !39
  %61 = or disjoint i64 %50, 6144, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !41
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 true) #5, !dbg !42
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !42
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !42
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !42
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !42
  %68 = getelementptr bfloat, ptr addrspace(1) %2, i64 %61, !dbg !43
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %68, i1 true) #5, !dbg !44
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !44
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !44
  %72 = extractvalue { i32, i32 } %69, 1, !dbg !44
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !44
  %74 = getelementptr i32, ptr addrspace(1) %3, i64 %54, !dbg !45
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %17) #5, !dbg !46
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !46
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !46
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !46
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !46
  %80 = getelementptr bfloat, ptr addrspace(1) %6, i64 %50, !dbg !47
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %80, i1 true) #5, !dbg !48
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !48
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !48
  %84 = extractvalue { i32, i32 } %81, 1, !dbg !48
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !48
  %86 = getelementptr bfloat, ptr addrspace(1) %7, i64 %50, !dbg !49
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %86, i1 true) #5, !dbg !50
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !50
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !50
  %90 = extractvalue { i32, i32 } %87, 1, !dbg !50
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !50
  %92 = shufflevector <2 x bfloat> %58, <2 x bfloat> %60, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !51
  %93 = fpext <4 x bfloat> %92 to <4 x float>, !dbg !51
  %94 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !42
  %95 = insertelement <4 x i32> %94, i32 %65, i64 1, !dbg !42
  %96 = insertelement <4 x i32> %95, i32 %66, i64 2, !dbg !42
  %97 = insertelement <4 x i32> %96, i32 %67, i64 3, !dbg !42
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !42
  %99 = shufflevector <2 x bfloat> %71, <2 x bfloat> %73, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %100 = fpext <4 x bfloat> %99 to <4 x float>, !dbg !52
  %101 = shufflevector <2 x bfloat> %83, <2 x bfloat> %85, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %102 = fpext <4 x bfloat> %101 to <4 x float>, !dbg !53
  %103 = shufflevector <2 x bfloat> %89, <2 x bfloat> %91, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %104 = fpext <4 x bfloat> %103 to <4 x float>, !dbg !54
  %105 = fadd <4 x float> %98, %100, !dbg !55
  %106 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !56
  %107 = insertelement <4 x i32> %106, i32 %77, i64 1, !dbg !56
  %108 = insertelement <4 x i32> %107, i32 %78, i64 2, !dbg !56
  %109 = insertelement <4 x i32> %108, i32 %79, i64 3, !dbg !56
  %110 = sitofp <4 x i32> %109 to <4 x float>, !dbg !56
  %111 = fmul <4 x float> %52, %110, !dbg !36
  %112 = fmul <4 x float> %111, %102, !dbg !57
  %113 = fadd <4 x float> %112, %104, !dbg !58
  %114 = fmul <4 x float> %105, %113, !dbg !59
  %115 = fadd <4 x float> %114, %93, !dbg !60
  %116 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !61
  %117 = shufflevector <4 x i1> %116, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !61
  %118 = select <4 x i1> %117, <4 x float> %115, <4 x float> zeroinitializer, !dbg !61
  %119 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %120 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %121 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %122 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %123 = getelementptr bfloat, ptr addrspace(1) %8, i64 %54, !dbg !63
  %124 = extractelement <4 x float> %115, i64 0, !dbg !64
  %125 = fptrunc float %124 to bfloat, !dbg !64
  %126 = extractelement <4 x float> %115, i64 1, !dbg !64
  %127 = fptrunc float %126 to bfloat, !dbg !64
  %128 = extractelement <4 x float> %115, i64 2, !dbg !64
  %129 = fptrunc float %128 to bfloat, !dbg !64
  %130 = extractelement <4 x float> %115, i64 3, !dbg !64
  %131 = fptrunc float %130 to bfloat, !dbg !64
  %132 = insertelement <2 x bfloat> poison, bfloat %125, i64 0, !dbg !64
  %133 = insertelement <2 x bfloat> %132, bfloat %127, i64 1, !dbg !64
  %134 = bitcast <2 x bfloat> %133 to i32, !dbg !64
  %135 = insertelement <2 x bfloat> poison, bfloat %129, i64 0, !dbg !64
  %136 = insertelement <2 x bfloat> %135, bfloat %131, i64 1, !dbg !64
  %137 = bitcast <2 x bfloat> %136 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %137, ptr addrspace(1) %123, i1 %17) #5, !dbg !64
  %138 = or disjoint i64 %50, 2048, !dbg !65
  %139 = icmp samesign ult i64 %138, 3072, !dbg !66
  %140 = trunc nuw nsw i64 %138 to i32, !dbg !37
  %141 = add i32 %35, %140, !dbg !37
  %142 = sext i32 %141 to i64, !dbg !38
  %143 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !38
  %144 = and i1 %17, %139, !dbg !67
  %145 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %143, i1 %144) #5, !dbg !39
  %146 = extractvalue { i32, i32 } %145, 0, !dbg !39
  %147 = bitcast i32 %146 to <2 x bfloat>, !dbg !39
  %148 = extractvalue { i32, i32 } %145, 1, !dbg !39
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !39
  %150 = or disjoint i64 %50, 8192, !dbg !40
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !41
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %151, i1 %139) #5, !dbg !42
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !42
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !42
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !42
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !42
  %157 = getelementptr bfloat, ptr addrspace(1) %2, i64 %150, !dbg !43
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %157, i1 %139) #5, !dbg !44
  %159 = extractvalue { i32, i32 } %158, 0, !dbg !44
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !44
  %161 = extractvalue { i32, i32 } %158, 1, !dbg !44
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !44
  %163 = getelementptr i32, ptr addrspace(1) %3, i64 %142, !dbg !45
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %144) #5, !dbg !46
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !46
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !46
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !46
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !46
  %169 = getelementptr bfloat, ptr addrspace(1) %6, i64 %138, !dbg !47
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %169, i1 %139) #5, !dbg !48
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !48
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !48
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !48
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !48
  %175 = getelementptr bfloat, ptr addrspace(1) %7, i64 %138, !dbg !49
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %175, i1 %139) #5, !dbg !50
  %177 = extractvalue { i32, i32 } %176, 0, !dbg !50
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !50
  %179 = extractvalue { i32, i32 } %176, 1, !dbg !50
  %180 = bitcast i32 %179 to <2 x bfloat>, !dbg !50
  %181 = shufflevector <2 x bfloat> %147, <2 x bfloat> %149, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !51
  %182 = fpext <4 x bfloat> %181 to <4 x float>, !dbg !51
  %183 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !42
  %184 = insertelement <4 x i32> %183, i32 %154, i64 1, !dbg !42
  %185 = insertelement <4 x i32> %184, i32 %155, i64 2, !dbg !42
  %186 = insertelement <4 x i32> %185, i32 %156, i64 3, !dbg !42
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !42
  %188 = shufflevector <2 x bfloat> %160, <2 x bfloat> %162, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %189 = fpext <4 x bfloat> %188 to <4 x float>, !dbg !52
  %190 = shufflevector <2 x bfloat> %172, <2 x bfloat> %174, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %191 = fpext <4 x bfloat> %190 to <4 x float>, !dbg !53
  %192 = shufflevector <2 x bfloat> %178, <2 x bfloat> %180, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %193 = fpext <4 x bfloat> %192 to <4 x float>, !dbg !54
  %194 = fadd <4 x float> %187, %189, !dbg !55
  %195 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !56
  %196 = insertelement <4 x i32> %195, i32 %166, i64 1, !dbg !56
  %197 = insertelement <4 x i32> %196, i32 %167, i64 2, !dbg !56
  %198 = insertelement <4 x i32> %197, i32 %168, i64 3, !dbg !56
  %199 = sitofp <4 x i32> %198 to <4 x float>, !dbg !56
  %200 = fmul <4 x float> %52, %199, !dbg !36
  %201 = fmul <4 x float> %200, %191, !dbg !57
  %202 = fadd <4 x float> %201, %193, !dbg !58
  %203 = fmul <4 x float> %194, %202, !dbg !59
  %204 = fadd <4 x float> %203, %182, !dbg !60
  %205 = fsub <4 x float> %204, %118, !dbg !68
  %206 = extractelement <4 x float> %205, i64 0, !dbg !68
  %207 = fsub <4 x float> %204, %118, !dbg !68
  %208 = extractelement <4 x float> %207, i64 1, !dbg !68
  %209 = fsub <4 x float> %204, %118, !dbg !68
  %210 = extractelement <4 x float> %209, i64 2, !dbg !68
  %211 = fsub <4 x float> %204, %118, !dbg !68
  %212 = extractelement <4 x float> %211, i64 3, !dbg !68
  %213 = fadd float %119, 1.000000e+00, !dbg !70
  %214 = fadd float %120, 1.000000e+00, !dbg !70
  %215 = fadd float %121, 1.000000e+00, !dbg !70
  %216 = fadd float %122, 1.000000e+00, !dbg !70
  %217 = tail call float @llvm.nvvm.div.full(float %206, float %213), !dbg !71
  %218 = tail call float @llvm.nvvm.div.full(float %208, float %214), !dbg !71
  %219 = tail call float @llvm.nvvm.div.full(float %210, float %215), !dbg !71
  %220 = tail call float @llvm.nvvm.div.full(float %212, float %216), !dbg !71
  %221 = insertelement <4 x float> poison, float %217, i64 0, !dbg !72
  %222 = insertelement <4 x float> %221, float %218, i64 1, !dbg !72
  %223 = insertelement <4 x float> %222, float %219, i64 2, !dbg !72
  %224 = insertelement <4 x float> %223, float %220, i64 3, !dbg !72
  %225 = fadd <4 x float> %118, %224, !dbg !72
  %226 = fsub <4 x float> %204, %225, !dbg !73
  %227 = fsub <4 x float> %204, %225, !dbg !73
  %228 = fsub <4 x float> %204, %225, !dbg !73
  %229 = fsub <4 x float> %204, %225, !dbg !73
  %230 = fmul <4 x float> %205, %226, !dbg !74
  %231 = extractelement <4 x float> %230, i64 0, !dbg !74
  %232 = fmul <4 x float> %207, %227, !dbg !74
  %233 = extractelement <4 x float> %232, i64 1, !dbg !74
  %234 = fmul <4 x float> %209, %228, !dbg !74
  %235 = extractelement <4 x float> %234, i64 2, !dbg !74
  %236 = fmul <4 x float> %211, %229, !dbg !74
  %237 = extractelement <4 x float> %236, i64 3, !dbg !74
  %238 = fadd float %231, 0.000000e+00, !dbg !75
  %239 = fadd float %233, 0.000000e+00, !dbg !75
  %240 = fadd float %235, 0.000000e+00, !dbg !75
  %241 = fadd float %237, 0.000000e+00, !dbg !75
  %242 = insertelement <4 x i1> poison, i1 %144, i64 0, !dbg !61
  %243 = shufflevector <4 x i1> %242, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !61
  %244 = select <4 x i1> %243, <4 x float> %225, <4 x float> %118, !dbg !61
  %245 = select i1 %144, float %240, float 0.000000e+00, !dbg !76
  %246 = select i1 %144, float %241, float 0.000000e+00, !dbg !76
  %247 = select i1 %144, float %213, float %119, !dbg !62
  %248 = select i1 %144, float %214, float %120, !dbg !62
  %249 = select i1 %144, float %215, float %121, !dbg !62
  %250 = select i1 %144, float %216, float %122, !dbg !62
  %251 = getelementptr bfloat, ptr addrspace(1) %8, i64 %142, !dbg !63
  %252 = extractelement <4 x float> %204, i64 0, !dbg !64
  %253 = fptrunc float %252 to bfloat, !dbg !64
  %254 = extractelement <4 x float> %204, i64 1, !dbg !64
  %255 = fptrunc float %254 to bfloat, !dbg !64
  %256 = extractelement <4 x float> %204, i64 2, !dbg !64
  %257 = fptrunc float %256 to bfloat, !dbg !64
  %258 = extractelement <4 x float> %204, i64 3, !dbg !64
  %259 = fptrunc float %258 to bfloat, !dbg !64
  %260 = insertelement <2 x bfloat> poison, bfloat %253, i64 0, !dbg !64
  %261 = insertelement <2 x bfloat> %260, bfloat %255, i64 1, !dbg !64
  %262 = bitcast <2 x bfloat> %261 to i32, !dbg !64
  %263 = insertelement <2 x bfloat> poison, bfloat %257, i64 0, !dbg !64
  %264 = insertelement <2 x bfloat> %263, bfloat %259, i64 1, !dbg !64
  %265 = bitcast <2 x bfloat> %264 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %262, i32 %265, ptr addrspace(1) %251, i1 %144) #5, !dbg !64
  %266 = lshr i32 %18, 5, !dbg !11
  %267 = extractelement <4 x float> %244, i64 0, !dbg !77
  %268 = extractelement <4 x float> %244, i64 1, !dbg !77
  %269 = fsub float %268, %267, !dbg !77
  %270 = fadd float %247, %248, !dbg !80
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !81
  %272 = tail call float @llvm.nvvm.div.full(float %248, float %270), !dbg !82
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !83
  %274 = fmul float %269, %273, !dbg !84
  %275 = fadd float %267, %274, !dbg !85
  %276 = fadd float %238, %239, !dbg !86
  %277 = select i1 %144, float %276, float 0.000000e+00, !dbg !86
  %278 = fmul float %269, %269, !dbg !87
  %279 = fmul float %278, %247, !dbg !88
  %280 = fmul float %279, %273, !dbg !89
  %281 = fadd float %277, %280, !dbg !90
  %282 = extractelement <4 x float> %244, i64 2, !dbg !77
  %283 = fsub float %282, %275, !dbg !77
  %284 = fadd float %249, %270, !dbg !80
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !81
  %286 = tail call float @llvm.nvvm.div.full(float %249, float %284), !dbg !82
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !83
  %288 = fmul float %287, %283, !dbg !84
  %289 = fadd float %275, %288, !dbg !85
  %290 = fadd float %245, %281, !dbg !86
  %291 = fmul float %283, %283, !dbg !87
  %292 = fmul float %270, %291, !dbg !88
  %293 = fmul float %287, %292, !dbg !89
  %294 = fadd float %290, %293, !dbg !90
  %295 = extractelement <4 x float> %244, i64 3, !dbg !77
  %296 = fsub float %295, %289, !dbg !77
  %297 = fadd float %250, %284, !dbg !80
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !81
  %299 = tail call float @llvm.nvvm.div.full(float %250, float %297), !dbg !82
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !83
  %301 = fmul float %300, %296, !dbg !84
  %302 = fadd float %289, %301, !dbg !85
  %303 = fadd float %246, %294, !dbg !86
  %304 = fmul float %296, %296, !dbg !87
  %305 = fmul float %284, %304, !dbg !88
  %306 = fmul float %300, %305, !dbg !89
  %307 = fadd float %303, %306, !dbg !90
  %308 = bitcast float %302 to i32, !dbg !91
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 16, i32 31), !dbg !91
  %310 = bitcast i32 %309 to float, !dbg !91
  %311 = bitcast float %307 to i32, !dbg !91
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 16, i32 31), !dbg !91
  %313 = bitcast i32 %312 to float, !dbg !91
  %314 = bitcast float %297 to i32, !dbg !91
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 16, i32 31), !dbg !91
  %316 = bitcast i32 %315 to float, !dbg !91
  %317 = fsub float %310, %302, !dbg !77
  %318 = fadd float %297, %316, !dbg !80
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !81
  %320 = tail call float @llvm.nvvm.div.full(float %316, float %318), !dbg !82
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !83
  %322 = fmul float %321, %317, !dbg !84
  %323 = fadd float %302, %322, !dbg !85
  %324 = fadd float %307, %313, !dbg !86
  %325 = fmul float %317, %317, !dbg !87
  %326 = fmul float %297, %325, !dbg !88
  %327 = fmul float %321, %326, !dbg !89
  %328 = fadd float %324, %327, !dbg !90
  %329 = bitcast float %323 to i32, !dbg !91
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 8, i32 31), !dbg !91
  %331 = bitcast i32 %330 to float, !dbg !91
  %332 = bitcast float %328 to i32, !dbg !91
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 8, i32 31), !dbg !91
  %334 = bitcast i32 %333 to float, !dbg !91
  %335 = bitcast float %318 to i32, !dbg !91
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 8, i32 31), !dbg !91
  %337 = bitcast i32 %336 to float, !dbg !91
  %338 = fsub float %331, %323, !dbg !77
  %339 = fadd float %318, %337, !dbg !80
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !81
  %341 = tail call float @llvm.nvvm.div.full(float %337, float %339), !dbg !82
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !83
  %343 = fmul float %338, %342, !dbg !84
  %344 = fadd float %323, %343, !dbg !85
  %345 = fadd float %328, %334, !dbg !86
  %346 = fmul float %338, %338, !dbg !87
  %347 = fmul float %318, %346, !dbg !88
  %348 = fmul float %342, %347, !dbg !89
  %349 = fadd float %345, %348, !dbg !90
  %350 = bitcast float %344 to i32, !dbg !91
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 4, i32 31), !dbg !91
  %352 = bitcast i32 %351 to float, !dbg !91
  %353 = bitcast float %349 to i32, !dbg !91
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 4, i32 31), !dbg !91
  %355 = bitcast i32 %354 to float, !dbg !91
  %356 = bitcast float %339 to i32, !dbg !91
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 4, i32 31), !dbg !91
  %358 = bitcast i32 %357 to float, !dbg !91
  %359 = fsub float %352, %344, !dbg !77
  %360 = fadd float %339, %358, !dbg !80
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !81
  %362 = tail call float @llvm.nvvm.div.full(float %358, float %360), !dbg !82
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !83
  %364 = fmul float %359, %363, !dbg !84
  %365 = fadd float %344, %364, !dbg !85
  %366 = fadd float %349, %355, !dbg !86
  %367 = fmul float %359, %359, !dbg !87
  %368 = fmul float %339, %367, !dbg !88
  %369 = fmul float %363, %368, !dbg !89
  %370 = fadd float %366, %369, !dbg !90
  %371 = bitcast float %365 to i32, !dbg !91
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 2, i32 31), !dbg !91
  %373 = bitcast i32 %372 to float, !dbg !91
  %374 = bitcast float %370 to i32, !dbg !91
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 2, i32 31), !dbg !91
  %376 = bitcast i32 %375 to float, !dbg !91
  %377 = bitcast float %360 to i32, !dbg !91
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 2, i32 31), !dbg !91
  %379 = bitcast i32 %378 to float, !dbg !91
  %380 = fsub float %373, %365, !dbg !77
  %381 = fadd float %360, %379, !dbg !80
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !81
  %383 = tail call float @llvm.nvvm.div.full(float %379, float %381), !dbg !82
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !83
  %385 = fmul float %380, %384, !dbg !84
  %386 = fadd float %365, %385, !dbg !85
  %387 = fadd float %370, %376, !dbg !86
  %388 = fmul float %380, %380, !dbg !87
  %389 = fmul float %360, %388, !dbg !88
  %390 = fmul float %384, %389, !dbg !89
  %391 = fadd float %387, %390, !dbg !90
  %392 = bitcast float %386 to i32, !dbg !91
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 1, i32 31), !dbg !91
  %394 = bitcast i32 %393 to float, !dbg !91
  %395 = bitcast float %391 to i32, !dbg !91
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 1, i32 31), !dbg !91
  %397 = bitcast i32 %396 to float, !dbg !91
  %398 = bitcast float %381 to i32, !dbg !91
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 1, i32 31), !dbg !91
  %400 = bitcast i32 %399 to float, !dbg !91
  %401 = fsub float %394, %386, !dbg !77
  %402 = fadd float %381, %400, !dbg !80
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !81
  %404 = tail call float @llvm.nvvm.div.full(float %400, float %402), !dbg !82
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !83
  %406 = fmul float %401, %405, !dbg !84
  %407 = fadd float %386, %406, !dbg !85
  %408 = fadd float %391, %397, !dbg !86
  %409 = fmul float %401, %401, !dbg !87
  %410 = fmul float %381, %409, !dbg !88
  %411 = fmul float %405, %410, !dbg !89
  %412 = fadd float %408, %411, !dbg !90
  %413 = and i32 %266, 15, !dbg !91
  %414 = icmp eq i32 %19, 0, !dbg !91
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i32 %413, !dbg !91
  %416 = bitcast float %407 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 %414) #5, !dbg !91
  %417 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %413, !dbg !91
  %418 = bitcast float %412 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 %414) #5, !dbg !91
  %419 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %413, !dbg !91
  %420 = bitcast float %402 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 %414) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %421 = icmp slt i32 %18, 16, !dbg !91
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !91
  %423 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %422, i1 %421) #5, !dbg !91
  %424 = bitcast i32 %423 to float, !dbg !91
  %425 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !91
  %426 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %425, i1 %421) #5, !dbg !91
  %427 = bitcast i32 %426 to float, !dbg !91
  %428 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !91
  %429 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %428, i1 %421) #5, !dbg !91
  %430 = bitcast i32 %429 to float, !dbg !91
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 8, i32 31), !dbg !91
  %432 = bitcast i32 %431 to float, !dbg !91
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 8, i32 31), !dbg !91
  %434 = bitcast i32 %433 to float, !dbg !91
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 8, i32 31), !dbg !91
  %436 = bitcast i32 %435 to float, !dbg !91
  %437 = fsub float %432, %424, !dbg !77
  %438 = fadd float %430, %436, !dbg !80
  %439 = fcmp oeq float %438, 0.000000e+00, !dbg !81
  %440 = tail call float @llvm.nvvm.div.full(float %436, float %438), !dbg !82
  %441 = select i1 %439, float 0.000000e+00, float %440, !dbg !83
  %442 = fmul float %437, %441, !dbg !84
  %443 = fadd float %442, %424, !dbg !85
  %444 = fadd float %427, %434, !dbg !86
  %445 = fmul float %437, %437, !dbg !87
  %446 = fmul float %445, %430, !dbg !88
  %447 = fmul float %446, %441, !dbg !89
  %448 = fadd float %444, %447, !dbg !90
  %449 = bitcast float %443 to i32, !dbg !91
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 4, i32 31), !dbg !91
  %451 = bitcast i32 %450 to float, !dbg !91
  %452 = bitcast float %448 to i32, !dbg !91
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 4, i32 31), !dbg !91
  %454 = bitcast i32 %453 to float, !dbg !91
  %455 = bitcast float %438 to i32, !dbg !91
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 4, i32 31), !dbg !91
  %457 = bitcast i32 %456 to float, !dbg !91
  %458 = fsub float %451, %443, !dbg !77
  %459 = fadd float %438, %457, !dbg !80
  %460 = fcmp oeq float %459, 0.000000e+00, !dbg !81
  %461 = tail call float @llvm.nvvm.div.full(float %457, float %459), !dbg !82
  %462 = select i1 %460, float 0.000000e+00, float %461, !dbg !83
  %463 = fmul float %458, %462, !dbg !84
  %464 = fadd float %443, %463, !dbg !85
  %465 = fadd float %448, %454, !dbg !86
  %466 = fmul float %458, %458, !dbg !87
  %467 = fmul float %438, %466, !dbg !88
  %468 = fmul float %462, %467, !dbg !89
  %469 = fadd float %465, %468, !dbg !90
  %470 = bitcast float %464 to i32, !dbg !91
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !91
  %472 = bitcast i32 %471 to float, !dbg !91
  %473 = bitcast float %469 to i32, !dbg !91
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 2, i32 31), !dbg !91
  %475 = bitcast i32 %474 to float, !dbg !91
  %476 = bitcast float %459 to i32, !dbg !91
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !91
  %478 = bitcast i32 %477 to float, !dbg !91
  %479 = fsub float %472, %464, !dbg !77
  %480 = fadd float %459, %478, !dbg !80
  %481 = fcmp oeq float %480, 0.000000e+00, !dbg !81
  %482 = tail call float @llvm.nvvm.div.full(float %478, float %480), !dbg !82
  %483 = select i1 %481, float 0.000000e+00, float %482, !dbg !83
  %484 = fmul float %479, %483, !dbg !84
  %485 = fadd float %464, %484, !dbg !85
  %486 = fadd float %469, %475, !dbg !86
  %487 = fmul float %479, %479, !dbg !87
  %488 = fmul float %459, %487, !dbg !88
  %489 = fmul float %483, %488, !dbg !89
  %490 = fadd float %486, %489, !dbg !90
  %491 = bitcast float %485 to i32, !dbg !91
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !91
  %493 = bitcast i32 %492 to float, !dbg !91
  %494 = bitcast float %490 to i32, !dbg !91
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 1, i32 31), !dbg !91
  %496 = bitcast i32 %495 to float, !dbg !91
  %497 = bitcast float %480 to i32, !dbg !91
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !91
  %499 = bitcast i32 %498 to float, !dbg !91
  %500 = fsub float %493, %485, !dbg !77
  %501 = fadd float %480, %499, !dbg !80
  %502 = fcmp oeq float %501, 0.000000e+00, !dbg !81
  %503 = tail call float @llvm.nvvm.div.full(float %499, float %501), !dbg !82
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !83
  %505 = fmul float %500, %504, !dbg !84
  %506 = fadd float %485, %505, !dbg !85
  %507 = fadd float %490, %496, !dbg !86
  %508 = fmul float %500, %500, !dbg !87
  %509 = fmul float %480, %508, !dbg !88
  %510 = fmul float %504, %509, !dbg !89
  %511 = fadd float %507, %510, !dbg !90
  %512 = and i32 %18, 15, !dbg !91
  %513 = icmp eq i32 %512, 0, !dbg !91
  %514 = and i1 %421, %513, !dbg !91
  %515 = bitcast float %506 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %515, i1 %514) #5, !dbg !91
  %516 = bitcast float %511 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %516, i1 %514) #5, !dbg !91
  %517 = bitcast float %501 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %517, i1 %514) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %518 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %519 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !91
  %520 = tail call float @llvm.nvvm.div.full(float %519, float 3.072000e+03), !dbg !92
  %521 = fadd float %520, 0x3EB0C6F7A0000000, !dbg !93
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %523 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i19 = icmp eq i32 %525, 0, !dbg !94
  br i1 %.not.i19, label %528, label %526, !dbg !94

526:                                              ; preds = %._crit_edge
  %527 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %521), !dbg !94
  br label %__nv_rsqrtf.exit21, !dbg !94

528:                                              ; preds = %._crit_edge
  %529 = tail call float @llvm.nvvm.rsqrt.approx.f(float %521), !dbg !94
  br label %__nv_rsqrtf.exit21, !dbg !94

__nv_rsqrtf.exit21:                               ; preds = %528, %526
  %.0.i20 = phi float [ %527, %526 ], [ %529, %528 ], !dbg !94
  %530 = insertelement <2 x float> poison, float %518, i64 0, !dbg !95
  %531 = shufflevector <2 x float> %530, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !95
  %532 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !96
  %533 = shufflevector <2 x float> %532, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %534 = add i32 %35, %21, !dbg !97
  %535 = sext i32 %534 to i64, !dbg !98
  %536 = getelementptr bfloat, ptr addrspace(1) %8, i64 %535, !dbg !98
  %537 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %536, i1 %17) #5, !dbg !99
  %538 = extractvalue { i32, i32 } %537, 0, !dbg !99
  %539 = bitcast i32 %538 to <2 x bfloat>, !dbg !99
  %540 = extractvalue { i32, i32 } %537, 1, !dbg !99
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !99
  %542 = or disjoint i64 %50, 12288, !dbg !100
  %543 = getelementptr float, ptr addrspace(1) %1, i64 %542, !dbg !101
  %544 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %543, i1 true) #5, !dbg !102
  %545 = extractvalue { i32, i32, i32, i32 } %544, 0, !dbg !102
  %546 = extractvalue { i32, i32, i32, i32 } %544, 1, !dbg !102
  %547 = extractvalue { i32, i32, i32, i32 } %544, 2, !dbg !102
  %548 = extractvalue { i32, i32, i32, i32 } %544, 3, !dbg !102
  %549 = getelementptr bfloat, ptr addrspace(1) %2, i64 %542, !dbg !103
  %550 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %549, i1 true) #5, !dbg !104
  %551 = extractvalue { i32, i32 } %550, 0, !dbg !104
  %552 = bitcast i32 %551 to <2 x bfloat>, !dbg !104
  %553 = extractvalue { i32, i32 } %550, 1, !dbg !104
  %554 = bitcast i32 %553 to <2 x bfloat>, !dbg !104
  %555 = add nuw nsw i64 %50, 9216, !dbg !105
  %556 = getelementptr float, ptr addrspace(1) %1, i64 %555, !dbg !106
  %557 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %556, i1 true) #5, !dbg !107
  %558 = extractvalue { i32, i32, i32, i32 } %557, 0, !dbg !107
  %559 = extractvalue { i32, i32, i32, i32 } %557, 1, !dbg !107
  %560 = extractvalue { i32, i32, i32, i32 } %557, 2, !dbg !107
  %561 = extractvalue { i32, i32, i32, i32 } %557, 3, !dbg !107
  %562 = getelementptr bfloat, ptr addrspace(1) %2, i64 %555, !dbg !108
  %563 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %562, i1 true) #5, !dbg !109
  %564 = extractvalue { i32, i32 } %563, 0, !dbg !109
  %565 = bitcast i32 %564 to <2 x bfloat>, !dbg !109
  %566 = extractvalue { i32, i32 } %563, 1, !dbg !109
  %567 = bitcast i32 %566 to <2 x bfloat>, !dbg !109
  %568 = fpext <2 x bfloat> %539 to <2 x float>, !dbg !110
  %569 = insertelement <2 x i32> poison, i32 %545, i64 0, !dbg !102
  %570 = insertelement <2 x i32> %569, i32 %546, i64 1, !dbg !102
  %571 = bitcast <2 x i32> %570 to <2 x float>, !dbg !102
  %572 = fpext <2 x bfloat> %552 to <2 x float>, !dbg !111
  %573 = insertelement <2 x i32> poison, i32 %558, i64 0, !dbg !107
  %574 = insertelement <2 x i32> %573, i32 %559, i64 1, !dbg !107
  %575 = bitcast <2 x i32> %574 to <2 x float>, !dbg !107
  %576 = fpext <2 x bfloat> %565 to <2 x float>, !dbg !112
  %577 = fsub <2 x float> %568, %531, !dbg !95
  %578 = fmul <2 x float> %533, %577, !dbg !96
  %579 = fadd <2 x float> %571, %572, !dbg !113
  %580 = fadd <2 x float> %579, splat (float 1.000000e+00), !dbg !114
  %581 = fmul <2 x float> %578, %580, !dbg !115
  %582 = fadd <2 x float> %575, %576, !dbg !116
  %583 = fadd <2 x float> %581, %582, !dbg !117
  %584 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !118
  %585 = shufflevector <2 x i1> %584, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !118
  %586 = select <2 x i1> %585, <2 x float> %583, <2 x float> splat (float 0x7FF0000000000000), !dbg !118
  %587 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !119
  %588 = shufflevector <4 x i1> %587, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !119
  %589 = getelementptr bfloat, ptr addrspace(1) %9, i64 %535, !dbg !120
  %590 = fptrunc <2 x float> %583 to <2 x bfloat>, !dbg !121
  %591 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !110
  %592 = insertelement <2 x i32> poison, i32 %547, i64 0, !dbg !102
  %593 = insertelement <2 x i32> %592, i32 %548, i64 1, !dbg !102
  %594 = bitcast <2 x i32> %593 to <2 x float>, !dbg !102
  %595 = fpext <2 x bfloat> %554 to <2 x float>, !dbg !111
  %596 = insertelement <2 x i32> poison, i32 %560, i64 0, !dbg !107
  %597 = insertelement <2 x i32> %596, i32 %561, i64 1, !dbg !107
  %598 = bitcast <2 x i32> %597 to <2 x float>, !dbg !107
  %599 = fpext <2 x bfloat> %567 to <2 x float>, !dbg !112
  %600 = fsub <2 x float> %591, %531, !dbg !95
  %601 = fmul <2 x float> %533, %600, !dbg !96
  %602 = fadd <2 x float> %594, %595, !dbg !113
  %603 = fadd <2 x float> %602, splat (float 1.000000e+00), !dbg !114
  %604 = fmul <2 x float> %601, %603, !dbg !115
  %605 = fadd <2 x float> %598, %599, !dbg !116
  %606 = fadd <2 x float> %604, %605, !dbg !117
  %607 = extractelement <2 x float> %606, i64 0, !dbg !122
  %608 = extractelement <2 x float> %606, i64 1, !dbg !122
  %609 = select i1 %17, float %607, float 0x7FF0000000000000, !dbg !118
  %610 = select i1 %17, float %608, float 0x7FF0000000000000, !dbg !118
  %611 = shufflevector <2 x float> %583, <2 x float> %606, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !124
  %612 = select <4 x i1> %588, <4 x float> %611, <4 x float> splat (float 0xFFF0000000000000), !dbg !119
  %613 = fptrunc <2 x float> %606 to <2 x bfloat>, !dbg !121
  %614 = bitcast <2 x bfloat> %590 to i32, !dbg !121
  %615 = bitcast <2 x bfloat> %613 to i32, !dbg !121
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %614, i32 %615, ptr addrspace(1) %589, i1 %17) #5, !dbg !121
  %616 = or disjoint i64 %50, 2048, !dbg !126
  %617 = icmp samesign ult i64 %616, 3072, !dbg !127
  %618 = trunc nuw nsw i64 %616 to i32, !dbg !97
  %619 = add i32 %35, %618, !dbg !97
  %620 = sext i32 %619 to i64, !dbg !98
  %621 = getelementptr bfloat, ptr addrspace(1) %8, i64 %620, !dbg !98
  %622 = and i1 %17, %617, !dbg !128
  %623 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %621, i1 %622) #5, !dbg !99
  %624 = extractvalue { i32, i32 } %623, 0, !dbg !99
  %625 = bitcast i32 %624 to <2 x bfloat>, !dbg !99
  %626 = extractvalue { i32, i32 } %623, 1, !dbg !99
  %627 = bitcast i32 %626 to <2 x bfloat>, !dbg !99
  %628 = or disjoint i64 %50, 14336, !dbg !100
  %629 = getelementptr float, ptr addrspace(1) %1, i64 %628, !dbg !101
  %630 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %629, i1 %617) #5, !dbg !102
  %631 = extractvalue { i32, i32, i32, i32 } %630, 0, !dbg !102
  %632 = extractvalue { i32, i32, i32, i32 } %630, 1, !dbg !102
  %633 = extractvalue { i32, i32, i32, i32 } %630, 2, !dbg !102
  %634 = extractvalue { i32, i32, i32, i32 } %630, 3, !dbg !102
  %635 = getelementptr bfloat, ptr addrspace(1) %2, i64 %628, !dbg !103
  %636 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %635, i1 %617) #5, !dbg !104
  %637 = extractvalue { i32, i32 } %636, 0, !dbg !104
  %638 = bitcast i32 %637 to <2 x bfloat>, !dbg !104
  %639 = extractvalue { i32, i32 } %636, 1, !dbg !104
  %640 = bitcast i32 %639 to <2 x bfloat>, !dbg !104
  %641 = add nuw nsw i64 %50, 11264, !dbg !105
  %642 = getelementptr float, ptr addrspace(1) %1, i64 %641, !dbg !106
  %643 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %642, i1 %617) #5, !dbg !107
  %644 = extractvalue { i32, i32, i32, i32 } %643, 0, !dbg !107
  %645 = extractvalue { i32, i32, i32, i32 } %643, 1, !dbg !107
  %646 = extractvalue { i32, i32, i32, i32 } %643, 2, !dbg !107
  %647 = extractvalue { i32, i32, i32, i32 } %643, 3, !dbg !107
  %648 = getelementptr bfloat, ptr addrspace(1) %2, i64 %641, !dbg !108
  %649 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %648, i1 %617) #5, !dbg !109
  %650 = extractvalue { i32, i32 } %649, 0, !dbg !109
  %651 = bitcast i32 %650 to <2 x bfloat>, !dbg !109
  %652 = extractvalue { i32, i32 } %649, 1, !dbg !109
  %653 = bitcast i32 %652 to <2 x bfloat>, !dbg !109
  %654 = fcmp uno <2 x float> %586, zeroinitializer, !dbg !129
  %655 = fcmp uno float %609, 0.000000e+00, !dbg !129
  %656 = fcmp uno float %610, 0.000000e+00, !dbg !129
  %657 = fpext <2 x bfloat> %625 to <2 x float>, !dbg !110
  %658 = insertelement <2 x i32> poison, i32 %631, i64 0, !dbg !102
  %659 = insertelement <2 x i32> %658, i32 %632, i64 1, !dbg !102
  %660 = bitcast <2 x i32> %659 to <2 x float>, !dbg !102
  %661 = fpext <2 x bfloat> %638 to <2 x float>, !dbg !111
  %662 = insertelement <2 x i32> poison, i32 %644, i64 0, !dbg !107
  %663 = insertelement <2 x i32> %662, i32 %645, i64 1, !dbg !107
  %664 = bitcast <2 x i32> %663 to <2 x float>, !dbg !107
  %665 = fpext <2 x bfloat> %651 to <2 x float>, !dbg !112
  %666 = fsub <2 x float> %657, %531, !dbg !95
  %667 = fmul <2 x float> %533, %666, !dbg !96
  %668 = fadd <2 x float> %660, %661, !dbg !113
  %669 = fadd <2 x float> %668, splat (float 1.000000e+00), !dbg !114
  %670 = fmul <2 x float> %667, %669, !dbg !115
  %671 = fadd <2 x float> %664, %665, !dbg !116
  %672 = fadd <2 x float> %670, %671, !dbg !117
  %673 = fcmp olt <2 x float> %586, %672, !dbg !130
  %674 = or <2 x i1> %654, %673, !dbg !131
  %675 = select <2 x i1> %674, <2 x float> %586, <2 x float> %672, !dbg !122
  %676 = insertelement <2 x i1> poison, i1 %622, i64 0, !dbg !118
  %677 = shufflevector <2 x i1> %676, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !118
  %678 = select <2 x i1> %677, <2 x float> %675, <2 x float> %586, !dbg !118
  %679 = fcmp uno <4 x float> %612, zeroinitializer, !dbg !132
  %680 = insertelement <4 x i1> poison, i1 %622, i64 0, !dbg !119
  %681 = shufflevector <4 x i1> %680, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !119
  %682 = getelementptr bfloat, ptr addrspace(1) %9, i64 %620, !dbg !120
  %683 = fptrunc <2 x float> %672 to <2 x bfloat>, !dbg !121
  %684 = fpext <2 x bfloat> %627 to <2 x float>, !dbg !110
  %685 = insertelement <2 x i32> poison, i32 %633, i64 0, !dbg !102
  %686 = insertelement <2 x i32> %685, i32 %634, i64 1, !dbg !102
  %687 = bitcast <2 x i32> %686 to <2 x float>, !dbg !102
  %688 = fpext <2 x bfloat> %640 to <2 x float>, !dbg !111
  %689 = insertelement <2 x i32> poison, i32 %646, i64 0, !dbg !107
  %690 = insertelement <2 x i32> %689, i32 %647, i64 1, !dbg !107
  %691 = bitcast <2 x i32> %690 to <2 x float>, !dbg !107
  %692 = fpext <2 x bfloat> %653 to <2 x float>, !dbg !112
  %693 = fsub <2 x float> %684, %531, !dbg !95
  %694 = fmul <2 x float> %533, %693, !dbg !96
  %695 = fadd <2 x float> %687, %688, !dbg !113
  %696 = fadd <2 x float> %695, splat (float 1.000000e+00), !dbg !114
  %697 = fmul <2 x float> %694, %696, !dbg !115
  %698 = fadd <2 x float> %691, %692, !dbg !116
  %699 = fadd <2 x float> %697, %698, !dbg !117
  %700 = extractelement <2 x float> %699, i64 0, !dbg !122
  %701 = fcmp olt float %609, %700, !dbg !130
  %702 = extractelement <2 x float> %699, i64 1, !dbg !122
  %703 = fcmp olt float %610, %702, !dbg !130
  %704 = or i1 %655, %701, !dbg !131
  %705 = or i1 %656, %703, !dbg !131
  %706 = select i1 %704, float %609, float %700, !dbg !122
  %707 = select i1 %705, float %610, float %702, !dbg !122
  %708 = select i1 %622, float %706, float %609, !dbg !118
  %709 = select i1 %622, float %707, float %610, !dbg !118
  %710 = shufflevector <2 x float> %672, <2 x float> %699, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !124
  %711 = fcmp ogt <4 x float> %612, %710, !dbg !124
  %712 = or <4 x i1> %679, %711, !dbg !133
  %713 = select <4 x i1> %712, <4 x float> %612, <4 x float> %710, !dbg !134
  %714 = select <4 x i1> %681, <4 x float> %713, <4 x float> %612, !dbg !119
  %715 = fptrunc <2 x float> %699 to <2 x bfloat>, !dbg !121
  %716 = bitcast <2 x bfloat> %683 to i32, !dbg !121
  %717 = bitcast <2 x bfloat> %715 to i32, !dbg !121
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %716, i32 %717, ptr addrspace(1) %682, i1 %622) #5, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %718 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %678, <2 x i32> <i32 0, i32 2>, !dbg !137
  %719 = fcmp olt <2 x float> %718, %678, !dbg !137
  %720 = fcmp uno <2 x float> %718, %678, !dbg !137
  %shift = shufflevector <2 x i1> %719, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !138
  %721 = or <2 x i1> %shift, %720, !dbg !138
  %722 = extractelement <2 x i1> %721, i64 0, !dbg !138
  %723 = extractelement <2 x float> %678, i64 0, !dbg !139
  %724 = extractelement <2 x float> %678, i64 1, !dbg !139
  %725 = select i1 %722, float %723, float %724, !dbg !139
  %726 = fcmp olt float %725, %708, !dbg !137
  %727 = fcmp uno float %725, 0.000000e+00, !dbg !140
  %728 = or i1 %726, %727, !dbg !138
  %729 = select i1 %728, float %725, float %708, !dbg !139
  %730 = fcmp olt float %729, %709, !dbg !137
  %731 = fcmp uno float %729, 0.000000e+00, !dbg !140
  %732 = or i1 %730, %731, !dbg !138
  %733 = select i1 %732, float %729, float %709, !dbg !139
  %734 = bitcast float %733 to i32, !dbg !135
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 16, i32 31), !dbg !135
  %736 = bitcast i32 %735 to float, !dbg !135
  %737 = fcmp olt float %733, %736, !dbg !137
  %738 = fcmp uno float %733, 0.000000e+00, !dbg !140
  %739 = or i1 %738, %737, !dbg !138
  %740 = select i1 %739, float %733, float %736, !dbg !139
  %741 = bitcast float %740 to i32, !dbg !135
  %742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %741, i32 8, i32 31), !dbg !135
  %743 = bitcast i32 %742 to float, !dbg !135
  %744 = fcmp olt float %740, %743, !dbg !137
  %745 = fcmp uno float %740, 0.000000e+00, !dbg !140
  %746 = or i1 %744, %745, !dbg !138
  %747 = select i1 %746, float %740, float %743, !dbg !139
  %748 = bitcast float %747 to i32, !dbg !135
  %749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %748, i32 4, i32 31), !dbg !135
  %750 = bitcast i32 %749 to float, !dbg !135
  %751 = fcmp olt float %747, %750, !dbg !137
  %752 = fcmp uno float %747, 0.000000e+00, !dbg !140
  %753 = or i1 %751, %752, !dbg !138
  %754 = select i1 %753, float %747, float %750, !dbg !139
  %755 = bitcast float %754 to i32, !dbg !135
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 2, i32 31), !dbg !135
  %757 = bitcast i32 %756 to float, !dbg !135
  %758 = fcmp olt float %754, %757, !dbg !137
  %759 = fcmp uno float %754, 0.000000e+00, !dbg !140
  %760 = or i1 %758, %759, !dbg !138
  %761 = select i1 %760, float %754, float %757, !dbg !139
  %762 = bitcast float %761 to i32, !dbg !135
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 1, i32 31), !dbg !135
  %764 = bitcast i32 %763 to float, !dbg !135
  %765 = fcmp olt float %761, %764, !dbg !137
  %766 = fcmp uno float %761, 0.000000e+00, !dbg !140
  %767 = or i1 %765, %766, !dbg !138
  %768 = select i1 %767, i32 %762, i32 %763, !dbg !139
  %769 = insertelement <1 x i32> poison, i32 %768, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %769, i1 %414) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %770 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %422, i1 %421) #5, !dbg !135
  %771 = bitcast i32 %770 to float, !dbg !135
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %770, i32 8, i32 31), !dbg !135
  %773 = bitcast i32 %772 to float, !dbg !135
  %774 = fcmp olt float %771, %773, !dbg !137
  %775 = fcmp uno float %771, 0.000000e+00, !dbg !140
  %776 = or i1 %775, %774, !dbg !138
  %777 = select i1 %776, float %771, float %773, !dbg !139
  %778 = bitcast float %777 to i32, !dbg !135
  %779 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %778, i32 4, i32 31), !dbg !135
  %780 = bitcast i32 %779 to float, !dbg !135
  %781 = fcmp olt float %777, %780, !dbg !137
  %782 = fcmp uno float %777, 0.000000e+00, !dbg !140
  %783 = or i1 %781, %782, !dbg !138
  %784 = select i1 %783, float %777, float %780, !dbg !139
  %785 = bitcast float %784 to i32, !dbg !135
  %786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %785, i32 2, i32 31), !dbg !135
  %787 = bitcast i32 %786 to float, !dbg !135
  %788 = fcmp olt float %784, %787, !dbg !137
  %789 = fcmp uno float %784, 0.000000e+00, !dbg !140
  %790 = or i1 %788, %789, !dbg !138
  %791 = select i1 %790, float %784, float %787, !dbg !139
  %792 = bitcast float %791 to i32, !dbg !135
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %792, i32 1, i32 31), !dbg !135
  %794 = bitcast i32 %793 to float, !dbg !135
  %795 = fcmp olt float %791, %794, !dbg !137
  %796 = fcmp uno float %791, 0.000000e+00, !dbg !140
  %797 = or i1 %795, %796, !dbg !138
  %798 = select i1 %797, i32 %792, i32 %793, !dbg !139
  %799 = insertelement <1 x i32> poison, i32 %798, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %799, i1 %514) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %800 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %801 = extractelement <4 x float> %714, i64 0, !dbg !143
  %802 = extractelement <4 x float> %714, i64 1, !dbg !143
  %803 = fcmp ogt float %801, %802, !dbg !143
  %804 = fcmp uno float %801, 0.000000e+00, !dbg !144
  %805 = or i1 %803, %804, !dbg !145
  %806 = select i1 %805, float %801, float %802, !dbg !146
  %807 = extractelement <4 x float> %714, i64 2, !dbg !143
  %808 = fcmp ogt float %806, %807, !dbg !143
  %809 = fcmp uno float %806, 0.000000e+00, !dbg !144
  %810 = or i1 %808, %809, !dbg !145
  %811 = select i1 %810, float %806, float %807, !dbg !146
  %812 = extractelement <4 x float> %714, i64 3, !dbg !143
  %813 = fcmp ogt float %811, %812, !dbg !143
  %814 = fcmp uno float %811, 0.000000e+00, !dbg !144
  %815 = or i1 %813, %814, !dbg !145
  %816 = select i1 %815, float %811, float %812, !dbg !146
  %817 = bitcast float %816 to i32, !dbg !141
  %818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %817, i32 16, i32 31), !dbg !141
  %819 = bitcast i32 %818 to float, !dbg !141
  %820 = fcmp ogt float %816, %819, !dbg !143
  %821 = fcmp uno float %816, 0.000000e+00, !dbg !144
  %822 = or i1 %821, %820, !dbg !145
  %823 = select i1 %822, float %816, float %819, !dbg !146
  %824 = bitcast float %823 to i32, !dbg !141
  %825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %824, i32 8, i32 31), !dbg !141
  %826 = bitcast i32 %825 to float, !dbg !141
  %827 = fcmp ogt float %823, %826, !dbg !143
  %828 = fcmp uno float %823, 0.000000e+00, !dbg !144
  %829 = or i1 %827, %828, !dbg !145
  %830 = select i1 %829, float %823, float %826, !dbg !146
  %831 = bitcast float %830 to i32, !dbg !141
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 4, i32 31), !dbg !141
  %833 = bitcast i32 %832 to float, !dbg !141
  %834 = fcmp ogt float %830, %833, !dbg !143
  %835 = fcmp uno float %830, 0.000000e+00, !dbg !144
  %836 = or i1 %834, %835, !dbg !145
  %837 = select i1 %836, float %830, float %833, !dbg !146
  %838 = bitcast float %837 to i32, !dbg !141
  %839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %838, i32 2, i32 31), !dbg !141
  %840 = bitcast i32 %839 to float, !dbg !141
  %841 = fcmp ogt float %837, %840, !dbg !143
  %842 = fcmp uno float %837, 0.000000e+00, !dbg !144
  %843 = or i1 %841, %842, !dbg !145
  %844 = select i1 %843, float %837, float %840, !dbg !146
  %845 = bitcast float %844 to i32, !dbg !141
  %846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %845, i32 1, i32 31), !dbg !141
  %847 = bitcast i32 %846 to float, !dbg !141
  %848 = fcmp ogt float %844, %847, !dbg !143
  %849 = fcmp uno float %844, 0.000000e+00, !dbg !144
  %850 = or i1 %848, %849, !dbg !145
  %851 = select i1 %850, i32 %845, i32 %846, !dbg !146
  %852 = insertelement <1 x i32> poison, i32 %851, i64 0, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %852, i1 %414) #5, !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %853 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %422, i1 %421) #5, !dbg !141
  %854 = bitcast i32 %853 to float, !dbg !141
  %855 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %853, i32 8, i32 31), !dbg !141
  %856 = bitcast i32 %855 to float, !dbg !141
  %857 = fcmp ogt float %854, %856, !dbg !143
  %858 = fcmp uno float %854, 0.000000e+00, !dbg !144
  %859 = or i1 %858, %857, !dbg !145
  %860 = select i1 %859, float %854, float %856, !dbg !146
  %861 = bitcast float %860 to i32, !dbg !141
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %861, i32 4, i32 31), !dbg !141
  %863 = bitcast i32 %862 to float, !dbg !141
  %864 = fcmp ogt float %860, %863, !dbg !143
  %865 = fcmp uno float %860, 0.000000e+00, !dbg !144
  %866 = or i1 %864, %865, !dbg !145
  %867 = select i1 %866, float %860, float %863, !dbg !146
  %868 = bitcast float %867 to i32, !dbg !141
  %869 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %868, i32 2, i32 31), !dbg !141
  %870 = bitcast i32 %869 to float, !dbg !141
  %871 = fcmp ogt float %867, %870, !dbg !143
  %872 = fcmp uno float %867, 0.000000e+00, !dbg !144
  %873 = or i1 %871, %872, !dbg !145
  %874 = select i1 %873, float %867, float %870, !dbg !146
  %875 = bitcast float %874 to i32, !dbg !141
  %876 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %875, i32 1, i32 31), !dbg !141
  %877 = bitcast i32 %876 to float, !dbg !141
  %878 = fcmp ogt float %874, %877, !dbg !143
  %879 = fcmp uno float %874, 0.000000e+00, !dbg !144
  %880 = or i1 %878, %879, !dbg !145
  %881 = select i1 %880, i32 %875, i32 %876, !dbg !146
  %882 = insertelement <1 x i32> poison, i32 %881, i64 0, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %882, i1 %514) #5, !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %883 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !141
  %884 = getelementptr bfloat, ptr addrspace(1) %10, i64 %22, !dbg !147
  %885 = fptrunc float %800 to bfloat, !dbg !148
  %886 = and i32 %18, 511, !dbg !148
  %887 = icmp eq i32 %886, 0, !dbg !148
  %888 = bitcast bfloat %885 to i16, !dbg !148
  %889 = and i1 %17, %887, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %888, ptr addrspace(1) %884, i1 %889) #5, !dbg !148
  %890 = getelementptr bfloat, ptr addrspace(1) %11, i64 %22, !dbg !149
  %891 = fptrunc float %883 to bfloat, !dbg !150
  %892 = bitcast bfloat %891 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %892, ptr addrspace(1) %890, i1 %889) #5, !dbg !150
  %.inv4 = fcmp oge float %800, 0.000000e+00, !dbg !151
  %893 = select i1 %.inv4, float 0.000000e+00, float %800, !dbg !151
  %894 = fsub float 0.000000e+00, %893, !dbg !153
  %.inv5 = fcmp ole float %883, 0.000000e+00, !dbg !154
  %895 = select i1 %.inv5, float 0.000000e+00, float %883, !dbg !154
  %896 = fcmp ogt float %894, %895, !dbg !156
  %897 = fcmp uno float %894, 0.000000e+00, !dbg !158
  %898 = or i1 %897, %896, !dbg !159
  %899 = select i1 %898, float %894, float %895, !dbg !160
  %900 = fmul float %899, 0x3F80204080000000, !dbg !161
  %901 = fcmp ogt float %900, 0x3EE4F8B580000000, !dbg !162
  %902 = fcmp uno float %900, 0.000000e+00, !dbg !164
  %903 = or i1 %901, %902, !dbg !165
  %904 = select i1 %903, float %900, float 0x3EE4F8B580000000, !dbg !166
  %905 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %904), !dbg !167
  %906 = add i32 %21, %35, !dbg !168
  %907 = sext i32 %906 to i64, !dbg !169
  %908 = getelementptr bfloat, ptr addrspace(1) %9, i64 %907, !dbg !169
  %909 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %908, i1 %17) #5, !dbg !170
  %910 = extractvalue { i32, i32 } %909, 0, !dbg !170
  %911 = bitcast i32 %910 to <2 x bfloat>, !dbg !170
  %912 = extractvalue { i32, i32 } %909, 1, !dbg !170
  %913 = bitcast i32 %912 to <2 x bfloat>, !dbg !170
  %914 = extractelement <2 x bfloat> %911, i64 0, !dbg !170
  %915 = extractelement <2 x bfloat> %911, i64 1, !dbg !170
  %916 = extractelement <2 x bfloat> %913, i64 0, !dbg !170
  %917 = extractelement <2 x bfloat> %913, i64 1, !dbg !170
  %918 = fpext bfloat %914 to float, !dbg !171
  %919 = fpext bfloat %915 to float, !dbg !171
  %920 = fpext bfloat %916 to float, !dbg !171
  %921 = fpext bfloat %917 to float, !dbg !171
  %922 = fmul float %905, %918, !dbg !172
  %923 = fmul float %905, %919, !dbg !172
  %924 = fmul float %905, %920, !dbg !172
  %925 = fmul float %905, %921, !dbg !172
  %926 = tail call float @llvm.nvvm.round.f(float %922) #5, !dbg !173
  %927 = tail call float @llvm.nvvm.round.f(float %923) #5, !dbg !173
  %928 = tail call float @llvm.nvvm.round.f(float %924) #5, !dbg !173
  %929 = tail call float @llvm.nvvm.round.f(float %925) #5, !dbg !173
  %930 = insertelement <4 x float> poison, float %926, i64 0, !dbg !174
  %931 = insertelement <4 x float> %930, float %927, i64 1, !dbg !174
  %932 = insertelement <4 x float> %931, float %928, i64 2, !dbg !174
  %933 = insertelement <4 x float> %932, float %929, i64 3, !dbg !174
  %934 = fcmp ogt <4 x float> %933, splat (float -1.270000e+02), !dbg !174
  %935 = fcmp uno <4 x float> %933, zeroinitializer, !dbg !176
  %936 = or <4 x i1> %934, %935, !dbg !177
  %937 = select <4 x i1> %936, <4 x float> %933, <4 x float> splat (float -1.270000e+02), !dbg !178
  %938 = fcmp olt <4 x float> %937, splat (float 1.270000e+02), !dbg !179
  %939 = fcmp uno <4 x float> %937, zeroinitializer, !dbg !181
  %940 = or <4 x i1> %938, %939, !dbg !182
  %941 = fptosi <4 x float> %937 to <4 x i8>, !dbg !183
  %942 = select <4 x i1> %940, <4 x i8> %941, <4 x i8> splat (i8 127), !dbg !184
  %943 = getelementptr i8, ptr addrspace(1) %12, i64 %907, !dbg !185
  %944 = bitcast <4 x i8> %942 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %944, ptr addrspace(1) %943, i1 %17) #5, !dbg !186
  %945 = or disjoint i64 %50, 2048, !dbg !187
  %946 = icmp samesign ult i64 %945, 3072, !dbg !188
  %947 = trunc nuw nsw i64 %945 to i32, !dbg !168
  %948 = add i32 %35, %947, !dbg !168
  %949 = sext i32 %948 to i64, !dbg !169
  %950 = getelementptr bfloat, ptr addrspace(1) %9, i64 %949, !dbg !169
  %951 = and i1 %17, %946, !dbg !189
  %952 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %950, i1 %951) #5, !dbg !170
  %953 = extractvalue { i32, i32 } %952, 0, !dbg !170
  %954 = bitcast i32 %953 to <2 x bfloat>, !dbg !170
  %955 = extractvalue { i32, i32 } %952, 1, !dbg !170
  %956 = bitcast i32 %955 to <2 x bfloat>, !dbg !170
  %957 = extractelement <2 x bfloat> %954, i64 0, !dbg !170
  %958 = extractelement <2 x bfloat> %954, i64 1, !dbg !170
  %959 = extractelement <2 x bfloat> %956, i64 0, !dbg !170
  %960 = extractelement <2 x bfloat> %956, i64 1, !dbg !170
  %961 = fpext bfloat %957 to float, !dbg !171
  %962 = fpext bfloat %958 to float, !dbg !171
  %963 = fpext bfloat %959 to float, !dbg !171
  %964 = fpext bfloat %960 to float, !dbg !171
  %965 = fmul float %905, %961, !dbg !172
  %966 = fmul float %905, %962, !dbg !172
  %967 = fmul float %905, %963, !dbg !172
  %968 = fmul float %905, %964, !dbg !172
  %969 = tail call float @llvm.nvvm.round.f(float %965) #5, !dbg !173
  %970 = tail call float @llvm.nvvm.round.f(float %966) #5, !dbg !173
  %971 = tail call float @llvm.nvvm.round.f(float %967) #5, !dbg !173
  %972 = tail call float @llvm.nvvm.round.f(float %968) #5, !dbg !173
  %973 = insertelement <4 x float> poison, float %969, i64 0, !dbg !174
  %974 = insertelement <4 x float> %973, float %970, i64 1, !dbg !174
  %975 = insertelement <4 x float> %974, float %971, i64 2, !dbg !174
  %976 = insertelement <4 x float> %975, float %972, i64 3, !dbg !174
  %977 = fcmp ogt <4 x float> %976, splat (float -1.270000e+02), !dbg !174
  %978 = fcmp uno <4 x float> %976, zeroinitializer, !dbg !176
  %979 = or <4 x i1> %977, %978, !dbg !177
  %980 = select <4 x i1> %979, <4 x float> %976, <4 x float> splat (float -1.270000e+02), !dbg !178
  %981 = fcmp olt <4 x float> %980, splat (float 1.270000e+02), !dbg !179
  %982 = fcmp uno <4 x float> %980, zeroinitializer, !dbg !181
  %983 = or <4 x i1> %981, %982, !dbg !182
  %984 = fptosi <4 x float> %980 to <4 x i8>, !dbg !183
  %985 = select <4 x i1> %983, <4 x i8> %984, <4 x i8> splat (i8 127), !dbg !184
  %986 = getelementptr i8, ptr addrspace(1) %12, i64 %949, !dbg !185
  %987 = bitcast <4 x i8> %985 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %987, ptr addrspace(1) %986, i1 %951) #5, !dbg !186
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 60, column: 23, scope: !6)
!37 = !DILocation(line: 40, column: 41, scope: !6)
!38 = !DILocation(line: 40, column: 34, scope: !6)
!39 = !DILocation(line: 40, column: 51, scope: !6)
!40 = !DILocation(line: 41, column: 41, scope: !6)
!41 = !DILocation(line: 41, column: 34, scope: !6)
!42 = !DILocation(line: 41, column: 48, scope: !6)
!43 = !DILocation(line: 42, column: 34, scope: !6)
!44 = !DILocation(line: 42, column: 48, scope: !6)
!45 = !DILocation(line: 43, column: 34, scope: !6)
!46 = !DILocation(line: 43, column: 51, scope: !6)
!47 = !DILocation(line: 44, column: 35, scope: !6)
!48 = !DILocation(line: 44, column: 42, scope: !6)
!49 = !DILocation(line: 45, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 42, scope: !6)
!51 = !DILocation(line: 40, column: 113, scope: !6)
!52 = !DILocation(line: 42, column: 101, scope: !6)
!53 = !DILocation(line: 44, column: 95, scope: !6)
!54 = !DILocation(line: 45, column: 95, scope: !6)
!55 = !DILocation(line: 47, column: 22, scope: !6)
!56 = !DILocation(line: 48, column: 23, scope: !6)
!57 = !DILocation(line: 61, column: 24, scope: !6)
!58 = !DILocation(line: 62, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 23, scope: !6)
!60 = !DILocation(line: 64, column: 23, scope: !6)
!61 = !DILocation(line: 70, column: 64, scope: !6)
!62 = !DILocation(line: 72, column: 68, scope: !6)
!63 = !DILocation(line: 73, column: 29, scope: !6)
!64 = !DILocation(line: 73, column: 53, scope: !6)
!65 = !DILocation(line: 35, column: 31, scope: !6)
!66 = !DILocation(line: 36, column: 29, scope: !6)
!67 = !DILocation(line: 40, column: 59, scope: !6)
!68 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !69)
!69 = !DILocation(line: 68, column: 55, scope: !6)
!70 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !69)
!71 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !69)
!72 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !69)
!73 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !69)
!74 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !69)
!75 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !69)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 217, column: 21, scope: !78, inlinedAt: !79)
!78 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!79 = !DILocation(line: 74, column: 85, scope: !6)
!80 = !DILocation(line: 218, column: 28, scope: !78, inlinedAt: !79)
!81 = !DILocation(line: 219, column: 39, scope: !78, inlinedAt: !79)
!82 = !DILocation(line: 219, column: 60, scope: !78, inlinedAt: !79)
!83 = !DILocation(line: 219, column: 49, scope: !78, inlinedAt: !79)
!84 = !DILocation(line: 221, column: 25, scope: !78, inlinedAt: !79)
!85 = !DILocation(line: 221, column: 17, scope: !78, inlinedAt: !79)
!86 = !DILocation(line: 222, column: 15, scope: !78, inlinedAt: !79)
!87 = !DILocation(line: 222, column: 30, scope: !78, inlinedAt: !79)
!88 = !DILocation(line: 222, column: 38, scope: !78, inlinedAt: !79)
!89 = !DILocation(line: 222, column: 49, scope: !78, inlinedAt: !79)
!90 = !DILocation(line: 222, column: 22, scope: !78, inlinedAt: !79)
!91 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !79)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 92, column: 24, scope: !6)
!96 = !DILocation(line: 98, column: 24, scope: !6)
!97 = !DILocation(line: 86, column: 43, scope: !6)
!98 = !DILocation(line: 86, column: 36, scope: !6)
!99 = !DILocation(line: 86, column: 53, scope: !6)
!100 = !DILocation(line: 87, column: 43, scope: !6)
!101 = !DILocation(line: 87, column: 35, scope: !6)
!102 = !DILocation(line: 87, column: 50, scope: !6)
!103 = !DILocation(line: 88, column: 35, scope: !6)
!104 = !DILocation(line: 88, column: 50, scope: !6)
!105 = !DILocation(line: 89, column: 42, scope: !6)
!106 = !DILocation(line: 89, column: 35, scope: !6)
!107 = !DILocation(line: 89, column: 49, scope: !6)
!108 = !DILocation(line: 90, column: 35, scope: !6)
!109 = !DILocation(line: 90, column: 49, scope: !6)
!110 = !DILocation(line: 86, column: 115, scope: !6)
!111 = !DILocation(line: 88, column: 103, scope: !6)
!112 = !DILocation(line: 90, column: 102, scope: !6)
!113 = !DILocation(line: 101, column: 24, scope: !6)
!114 = !DILocation(line: 103, column: 24, scope: !6)
!115 = !DILocation(line: 104, column: 24, scope: !6)
!116 = !DILocation(line: 106, column: 24, scope: !6)
!117 = !DILocation(line: 107, column: 24, scope: !6)
!118 = !DILocation(line: 110, column: 50, scope: !6)
!119 = !DILocation(line: 112, column: 50, scope: !6)
!120 = !DILocation(line: 113, column: 29, scope: !6)
!121 = !DILocation(line: 113, column: 53, scope: !6)
!122 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !123)
!123 = !DILocation(line: 109, column: 47, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !125)
!125 = !DILocation(line: 111, column: 47, scope: !6)
!126 = !DILocation(line: 81, column: 31, scope: !6)
!127 = !DILocation(line: 82, column: 29, scope: !6)
!128 = !DILocation(line: 86, column: 61, scope: !6)
!129 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !123)
!130 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !123)
!131 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !123)
!132 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !125)
!133 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !125)
!134 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !125)
!135 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !136)
!136 = !DILocation(line: 114, column: 40, scope: !6)
!137 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !136)
!138 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !136)
!139 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !136)
!140 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !136)
!141 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !142)
!142 = !DILocation(line: 115, column: 40, scope: !6)
!143 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !142)
!145 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !142)
!146 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !142)
!147 = !DILocation(line: 116, column: 25, scope: !6)
!148 = !DILocation(line: 116, column: 37, scope: !6)
!149 = !DILocation(line: 117, column: 25, scope: !6)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !152)
!152 = !DILocation(line: 126, column: 46, scope: !6)
!153 = !DILocation(line: 127, column: 17, scope: !6)
!154 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !155)
!155 = !DILocation(line: 128, column: 46, scope: !6)
!156 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !157)
!157 = !DILocation(line: 129, column: 46, scope: !6)
!158 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !157)
!159 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !157)
!160 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !157)
!161 = !DILocation(line: 131, column: 24, scope: !6)
!162 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !163)
!163 = !DILocation(line: 134, column: 46, scope: !6)
!164 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !163)
!165 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !163)
!166 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !163)
!167 = !DILocation(line: 137, column: 25, scope: !6)
!168 = !DILocation(line: 124, column: 43, scope: !6)
!169 = !DILocation(line: 124, column: 36, scope: !6)
!170 = !DILocation(line: 124, column: 53, scope: !6)
!171 = !DILocation(line: 124, column: 115, scope: !6)
!172 = !DILocation(line: 140, column: 24, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 119, column: 31, scope: !6)
!188 = !DILocation(line: 120, column: 29, scope: !6)
!189 = !DILocation(line: 124, column: 61, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
