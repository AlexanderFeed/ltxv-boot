; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 256, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 256, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = or disjoint i32 %20, 16, !dbg !19
  %22 = or disjoint i32 %20, 32, !dbg !19
  %23 = or disjoint i32 %20, 48, !dbg !19
  %24 = or disjoint i32 %14, %20, !dbg !20
  %25 = or disjoint i32 %14, %21, !dbg !20
  %26 = or disjoint i32 %14, %22, !dbg !20
  %27 = or disjoint i32 %14, %23, !dbg !20
  %28 = shl nsw i32 %13, 7, !dbg !21
  %29 = shl i32 %15, 3, !dbg !22
  %30 = and i32 %29, 8, !dbg !22
  %31 = and i32 %29, 16, !dbg !22
  %32 = and i32 %29, 24, !dbg !22
  %33 = and i32 %29, 32, !dbg !22
  %34 = and i32 %29, 56, !dbg !22
  %35 = or disjoint i32 %28, %20, !dbg !23
  %36 = or disjoint i32 %28, %21, !dbg !23
  %37 = or disjoint i32 %28, %22, !dbg !23
  %38 = or disjoint i32 %28, %23, !dbg !23
  %39 = or disjoint i32 %35, 64, !dbg !23
  %40 = or disjoint i32 %35, 80, !dbg !23
  %41 = or disjoint i32 %35, 96, !dbg !23
  %42 = or disjoint i32 %35, 112, !dbg !23
  %43 = srem i32 %24, 512, !dbg !24
  %44 = srem i32 %25, 512, !dbg !24
  %45 = srem i32 %26, 512, !dbg !24
  %46 = srem i32 %27, 512, !dbg !24
  %47 = srem i32 %35, 4096, !dbg !25
  %48 = srem i32 %36, 4096, !dbg !25
  %49 = srem i32 %37, 4096, !dbg !25
  %50 = srem i32 %38, 4096, !dbg !25
  %51 = srem i32 %39, 4096, !dbg !25
  %52 = srem i32 %40, 4096, !dbg !25
  %53 = srem i32 %41, 4096, !dbg !25
  %54 = srem i32 %42, 4096, !dbg !25
  %55 = shl nsw i32 %43, 12, !dbg !26
  %56 = shl nsw i32 %44, 12, !dbg !26
  %57 = shl nsw i32 %45, 12, !dbg !26
  %58 = shl nsw i32 %46, 12, !dbg !26
  %59 = shl nsw i32 %47, 12, !dbg !27
  %60 = shl nsw i32 %48, 12, !dbg !27
  %61 = shl nsw i32 %49, 12, !dbg !27
  %62 = shl nsw i32 %50, 12, !dbg !27
  %63 = shl nsw i32 %51, 12, !dbg !27
  %64 = shl nsw i32 %52, 12, !dbg !27
  %65 = shl nsw i32 %53, 12, !dbg !27
  %66 = shl nsw i32 %54, 12, !dbg !27
  %67 = or disjoint i32 %55, %34, !dbg !28
  %68 = or disjoint i32 %56, %34, !dbg !28
  %69 = or disjoint i32 %57, %34, !dbg !28
  %70 = or disjoint i32 %58, %34, !dbg !28
  %71 = sext i32 %67 to i64, !dbg !29
  %72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %71, !dbg !29
  %73 = sext i32 %68 to i64, !dbg !29
  %74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %73, !dbg !29
  %75 = sext i32 %69 to i64, !dbg !29
  %76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %70 to i64, !dbg !29
  %78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %77, !dbg !29
  %and.ra = and i32 %15, 24, !dbg !30
  %79 = xor i32 %34, %and.ra, !dbg !30
  %80 = xor i32 %79, %18, !dbg !30
  %81 = shl nuw nsw i32 %20, 6, !dbg !30
  %82 = or disjoint i32 %80, %81, !dbg !30
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %82, !dbg !30
  %84 = or disjoint i32 %82, 1024, !dbg !30
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %84, !dbg !30
  %86 = or disjoint i32 %82, 2048, !dbg !30
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %86, !dbg !30
  %88 = or disjoint i32 %82, 3072, !dbg !30
  %89 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %88, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %83, ptr addrspace(1) %72, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %85, ptr addrspace(1) %74, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %87, ptr addrspace(1) %76, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %89, ptr addrspace(1) %78, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %90 = or disjoint i32 %59, %34, !dbg !31
  %91 = or disjoint i32 %60, %34, !dbg !31
  %92 = or disjoint i32 %61, %34, !dbg !31
  %93 = or disjoint i32 %62, %34, !dbg !31
  %94 = or disjoint i32 %63, %34, !dbg !31
  %95 = or disjoint i32 %64, %34, !dbg !31
  %96 = or disjoint i32 %65, %34, !dbg !31
  %97 = or disjoint i32 %66, %34, !dbg !31
  %98 = sext i32 %90 to i64, !dbg !32
  %99 = getelementptr bfloat, ptr addrspace(1) %1, i64 %98, !dbg !32
  %100 = sext i32 %91 to i64, !dbg !32
  %101 = getelementptr bfloat, ptr addrspace(1) %1, i64 %100, !dbg !32
  %102 = sext i32 %92 to i64, !dbg !32
  %103 = getelementptr bfloat, ptr addrspace(1) %1, i64 %102, !dbg !32
  %104 = sext i32 %93 to i64, !dbg !32
  %105 = getelementptr bfloat, ptr addrspace(1) %1, i64 %104, !dbg !32
  %106 = sext i32 %94 to i64, !dbg !32
  %107 = getelementptr bfloat, ptr addrspace(1) %1, i64 %106, !dbg !32
  %108 = sext i32 %95 to i64, !dbg !32
  %109 = getelementptr bfloat, ptr addrspace(1) %1, i64 %108, !dbg !32
  %110 = sext i32 %96 to i64, !dbg !32
  %111 = getelementptr bfloat, ptr addrspace(1) %1, i64 %110, !dbg !32
  %112 = sext i32 %97 to i64, !dbg !32
  %113 = getelementptr bfloat, ptr addrspace(1) %1, i64 %112, !dbg !32
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %82, !dbg !33
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %84, !dbg !33
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86, !dbg !33
  %117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %88, !dbg !33
  %118 = or disjoint i32 %82, 4096, !dbg !33
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %118, !dbg !33
  %120 = or disjoint i32 %82, 5120, !dbg !33
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %120, !dbg !33
  %122 = or disjoint i32 %82, 6144, !dbg !33
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %122, !dbg !33
  %124 = or disjoint i32 %82, 7168, !dbg !33
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %124, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %99, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %115, ptr addrspace(1) %101, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %103, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %117, ptr addrspace(1) %105, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %119, ptr addrspace(1) %107, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %109, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %123, ptr addrspace(1) %111, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %125, ptr addrspace(1) %113, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %126 = or disjoint i32 %34, 64, !dbg !34
  %127 = or disjoint i32 %55, %126, !dbg !28
  %128 = or disjoint i32 %56, %126, !dbg !28
  %129 = or disjoint i32 %57, %126, !dbg !28
  %130 = or disjoint i32 %58, %126, !dbg !28
  %131 = sext i32 %127 to i64, !dbg !29
  %132 = getelementptr bfloat, ptr addrspace(1) %0, i64 %131, !dbg !29
  %133 = sext i32 %128 to i64, !dbg !29
  %134 = getelementptr bfloat, ptr addrspace(1) %0, i64 %133, !dbg !29
  %135 = sext i32 %129 to i64, !dbg !29
  %136 = getelementptr bfloat, ptr addrspace(1) %0, i64 %135, !dbg !29
  %137 = sext i32 %130 to i64, !dbg !29
  %138 = getelementptr bfloat, ptr addrspace(1) %0, i64 %137, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %82, !dbg !30
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %84, !dbg !30
  %141 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %86, !dbg !30
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %88, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %139, ptr addrspace(1) %132, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %134, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %141, ptr addrspace(1) %136, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %138, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %143 = or disjoint i32 %59, %126, !dbg !31
  %144 = or disjoint i32 %60, %126, !dbg !31
  %145 = or disjoint i32 %61, %126, !dbg !31
  %146 = or disjoint i32 %62, %126, !dbg !31
  %147 = or disjoint i32 %63, %126, !dbg !31
  %148 = or disjoint i32 %64, %126, !dbg !31
  %149 = or disjoint i32 %65, %126, !dbg !31
  %150 = or disjoint i32 %66, %126, !dbg !31
  %151 = sext i32 %143 to i64, !dbg !32
  %152 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !32
  %153 = sext i32 %144 to i64, !dbg !32
  %154 = getelementptr bfloat, ptr addrspace(1) %1, i64 %153, !dbg !32
  %155 = sext i32 %145 to i64, !dbg !32
  %156 = getelementptr bfloat, ptr addrspace(1) %1, i64 %155, !dbg !32
  %157 = sext i32 %146 to i64, !dbg !32
  %158 = getelementptr bfloat, ptr addrspace(1) %1, i64 %157, !dbg !32
  %159 = sext i32 %147 to i64, !dbg !32
  %160 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !32
  %161 = sext i32 %148 to i64, !dbg !32
  %162 = getelementptr bfloat, ptr addrspace(1) %1, i64 %161, !dbg !32
  %163 = sext i32 %149 to i64, !dbg !32
  %164 = getelementptr bfloat, ptr addrspace(1) %1, i64 %163, !dbg !32
  %165 = sext i32 %150 to i64, !dbg !32
  %166 = getelementptr bfloat, ptr addrspace(1) %1, i64 %165, !dbg !32
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %82, !dbg !33
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %84, !dbg !33
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %86, !dbg !33
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %88, !dbg !33
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %118, !dbg !33
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %120, !dbg !33
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %122, !dbg !33
  %174 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %124, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %167, ptr addrspace(1) %152, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %168, ptr addrspace(1) %154, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %169, ptr addrspace(1) %156, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %170, ptr addrspace(1) %158, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %171, ptr addrspace(1) %160, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %172, ptr addrspace(1) %162, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %173, ptr addrspace(1) %164, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %174, ptr addrspace(1) %166, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op166 = or disjoint i32 %79, 4096, !dbg !35
  %invariant.op168 = or disjoint i32 %79, 6144, !dbg !35
  %invariant.op170 = or disjoint i32 %34, 128, !dbg !35
  %175 = and i32 %15, 7
  %176 = lshr exact i32 %17, 1
  %177 = xor i32 %34, %176
  %178 = shl i32 %15, 6
  %179 = and i32 %178, 960
  %180 = or disjoint i32 %177, %179
  %181 = or disjoint i32 %30, 16
  %182 = xor i32 %181, %31
  %183 = or disjoint i32 %182, %33
  %184 = xor i32 %183, %176
  %185 = or disjoint i32 %184, %179
  %186 = or disjoint i32 %32, 32
  %187 = xor i32 %186, %33
  %188 = xor i32 %187, %176
  %189 = or disjoint i32 %188, %179
  %190 = or disjoint i32 %30, 48
  %and.ra164 = and i32 %29, 48
  %191 = or disjoint i32 %176, %and.ra164
  %192 = xor i32 %191, %190
  %193 = or disjoint i32 %192, %179
  %194 = or disjoint i32 %179, 1024
  %195 = or disjoint i32 %177, %194
  %196 = or disjoint i32 %184, %194
  %197 = or disjoint i32 %188, %194
  %198 = or disjoint i32 %192, %194
  %199 = or disjoint i32 %175, 32
  %.reass = or disjoint i32 %175, %invariant.op
  %200 = shl nuw nsw i32 %.reass, 6
  %201 = or disjoint i32 %200, %177
  %202 = or disjoint i32 %184, %200
  %203 = or disjoint i32 %188, %200
  %204 = or disjoint i32 %192, %200
  %205 = or disjoint i32 %179, 3072
  %206 = or disjoint i32 %177, %205
  %207 = or disjoint i32 %184, %205
  %208 = or disjoint i32 %188, %205
  %209 = or disjoint i32 %192, %205
  %210 = lshr exact i32 %18, 2
  %211 = lshr i32 %15, 2
  %212 = and i32 %211, 16
  %213 = or disjoint i32 %212, %210
  %214 = or disjoint i32 %213, %175
  %215 = shl nuw nsw i32 %214, 6
  %216 = or disjoint i32 %215, %79
  %217 = xor i32 %187, %and.ra
  %218 = or disjoint i32 %210, %199
  %219 = or disjoint i32 %218, %212
  %220 = shl nuw nsw i32 %219, 6
  %221 = or disjoint i32 %220, %79
  %222 = or disjoint i32 %215, 4096
  %.reass167 = or disjoint i32 %215, %invariant.op166
  %.reass169 = or disjoint i32 %215, %invariant.op168
  %223 = or disjoint i32 %215, %217
  %224 = or i32 %223, 6144
  %225 = zext nneg i32 %invariant.op170 to i64, !dbg !35
  %226 = sext i32 %66 to i64, !dbg !35
  %227 = sext i32 %65 to i64, !dbg !35
  %228 = sext i32 %64 to i64, !dbg !35
  %229 = sext i32 %63 to i64, !dbg !35
  %230 = sext i32 %62 to i64, !dbg !35
  %231 = sext i32 %61 to i64, !dbg !35
  %232 = sext i32 %60 to i64, !dbg !35
  %233 = sext i32 %59 to i64, !dbg !35
  %234 = sext i32 %58 to i64, !dbg !35
  %235 = sext i32 %57 to i64, !dbg !35
  %236 = sext i32 %56 to i64, !dbg !35
  %237 = sext i32 %55 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %237, !dbg !35
  %invariant.gep299 = getelementptr bfloat, ptr addrspace(1) %0, i64 %236, !dbg !35
  %invariant.gep301 = getelementptr bfloat, ptr addrspace(1) %0, i64 %235, !dbg !35
  %invariant.gep303 = getelementptr bfloat, ptr addrspace(1) %0, i64 %234, !dbg !35
  %invariant.gep305 = getelementptr bfloat, ptr addrspace(1) %1, i64 %233, !dbg !35
  %invariant.gep307 = getelementptr bfloat, ptr addrspace(1) %1, i64 %232, !dbg !35
  %invariant.gep309 = getelementptr bfloat, ptr addrspace(1) %1, i64 %231, !dbg !35
  %invariant.gep311 = getelementptr bfloat, ptr addrspace(1) %1, i64 %230, !dbg !35
  %invariant.gep313 = getelementptr bfloat, ptr addrspace(1) %1, i64 %229, !dbg !35
  %invariant.gep315 = getelementptr bfloat, ptr addrspace(1) %1, i64 %228, !dbg !35
  %invariant.gep317 = getelementptr bfloat, ptr addrspace(1) %1, i64 %227, !dbg !35
  %invariant.gep319 = getelementptr bfloat, ptr addrspace(1) %1, i64 %226, !dbg !35
  br label %238, !dbg !35

238:                                              ; preds = %4, %238
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %238 ]
  %239 = phi i32 [ -1, %4 ], [ %308, %238 ]
  %240 = phi i32 [ 1, %4 ], [ %802, %238 ]
  %241 = phi float [ 0.000000e+00, %4 ], [ %721, %238 ]
  %242 = phi float [ 0.000000e+00, %4 ], [ %722, %238 ]
  %243 = phi float [ 0.000000e+00, %4 ], [ %723, %238 ]
  %244 = phi float [ 0.000000e+00, %4 ], [ %724, %238 ]
  %245 = phi float [ 0.000000e+00, %4 ], [ %726, %238 ]
  %246 = phi float [ 0.000000e+00, %4 ], [ %727, %238 ]
  %247 = phi float [ 0.000000e+00, %4 ], [ %728, %238 ]
  %248 = phi float [ 0.000000e+00, %4 ], [ %729, %238 ]
  %249 = phi float [ 0.000000e+00, %4 ], [ %731, %238 ]
  %250 = phi float [ 0.000000e+00, %4 ], [ %732, %238 ]
  %251 = phi float [ 0.000000e+00, %4 ], [ %733, %238 ]
  %252 = phi float [ 0.000000e+00, %4 ], [ %734, %238 ]
  %253 = phi float [ 0.000000e+00, %4 ], [ %736, %238 ]
  %254 = phi float [ 0.000000e+00, %4 ], [ %737, %238 ]
  %255 = phi float [ 0.000000e+00, %4 ], [ %738, %238 ]
  %256 = phi float [ 0.000000e+00, %4 ], [ %739, %238 ]
  %257 = phi float [ 0.000000e+00, %4 ], [ %741, %238 ]
  %258 = phi float [ 0.000000e+00, %4 ], [ %742, %238 ]
  %259 = phi float [ 0.000000e+00, %4 ], [ %743, %238 ]
  %260 = phi float [ 0.000000e+00, %4 ], [ %744, %238 ]
  %261 = phi float [ 0.000000e+00, %4 ], [ %746, %238 ]
  %262 = phi float [ 0.000000e+00, %4 ], [ %747, %238 ]
  %263 = phi float [ 0.000000e+00, %4 ], [ %748, %238 ]
  %264 = phi float [ 0.000000e+00, %4 ], [ %749, %238 ]
  %265 = phi float [ 0.000000e+00, %4 ], [ %751, %238 ]
  %266 = phi float [ 0.000000e+00, %4 ], [ %752, %238 ]
  %267 = phi float [ 0.000000e+00, %4 ], [ %753, %238 ]
  %268 = phi float [ 0.000000e+00, %4 ], [ %754, %238 ]
  %269 = phi float [ 0.000000e+00, %4 ], [ %756, %238 ]
  %270 = phi float [ 0.000000e+00, %4 ], [ %757, %238 ]
  %271 = phi float [ 0.000000e+00, %4 ], [ %758, %238 ]
  %272 = phi float [ 0.000000e+00, %4 ], [ %759, %238 ]
  %273 = phi float [ 0.000000e+00, %4 ], [ %761, %238 ]
  %274 = phi float [ 0.000000e+00, %4 ], [ %762, %238 ]
  %275 = phi float [ 0.000000e+00, %4 ], [ %763, %238 ]
  %276 = phi float [ 0.000000e+00, %4 ], [ %764, %238 ]
  %277 = phi float [ 0.000000e+00, %4 ], [ %766, %238 ]
  %278 = phi float [ 0.000000e+00, %4 ], [ %767, %238 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %768, %238 ]
  %280 = phi float [ 0.000000e+00, %4 ], [ %769, %238 ]
  %281 = phi float [ 0.000000e+00, %4 ], [ %771, %238 ]
  %282 = phi float [ 0.000000e+00, %4 ], [ %772, %238 ]
  %283 = phi float [ 0.000000e+00, %4 ], [ %773, %238 ]
  %284 = phi float [ 0.000000e+00, %4 ], [ %774, %238 ]
  %285 = phi float [ 0.000000e+00, %4 ], [ %776, %238 ]
  %286 = phi float [ 0.000000e+00, %4 ], [ %777, %238 ]
  %287 = phi float [ 0.000000e+00, %4 ], [ %778, %238 ]
  %288 = phi float [ 0.000000e+00, %4 ], [ %779, %238 ]
  %289 = phi float [ 0.000000e+00, %4 ], [ %781, %238 ]
  %290 = phi float [ 0.000000e+00, %4 ], [ %782, %238 ]
  %291 = phi float [ 0.000000e+00, %4 ], [ %783, %238 ]
  %292 = phi float [ 0.000000e+00, %4 ], [ %784, %238 ]
  %293 = phi float [ 0.000000e+00, %4 ], [ %786, %238 ]
  %294 = phi float [ 0.000000e+00, %4 ], [ %787, %238 ]
  %295 = phi float [ 0.000000e+00, %4 ], [ %788, %238 ]
  %296 = phi float [ 0.000000e+00, %4 ], [ %789, %238 ]
  %297 = phi float [ 0.000000e+00, %4 ], [ %791, %238 ]
  %298 = phi float [ 0.000000e+00, %4 ], [ %792, %238 ]
  %299 = phi float [ 0.000000e+00, %4 ], [ %793, %238 ]
  %300 = phi float [ 0.000000e+00, %4 ], [ %794, %238 ]
  %301 = phi float [ 0.000000e+00, %4 ], [ %796, %238 ]
  %302 = phi float [ 0.000000e+00, %4 ], [ %797, %238 ]
  %303 = phi float [ 0.000000e+00, %4 ], [ %798, %238 ]
  %304 = phi float [ 0.000000e+00, %4 ], [ %799, %238 ]
  %305 = icmp samesign ult i64 %indvars.iv, 62, !dbg !35
  %306 = add i32 %239, 1, !dbg !35
  %307 = icmp slt i32 %306, 2, !dbg !35
  %308 = select i1 %307, i32 %306, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx = shl i32 %308, 13, !dbg !30
  %309 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %.idx, !dbg !30
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %180, !dbg !30
  %311 = ptrtoint ptr addrspace(3) %310 to i32, !dbg !30
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %311) #1, !dbg !30
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !30
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !30
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !30
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !30
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %185, !dbg !30
  %318 = ptrtoint ptr addrspace(3) %317 to i32, !dbg !30
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %318) #1, !dbg !30
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !30
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !30
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !30
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !30
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %189, !dbg !30
  %325 = ptrtoint ptr addrspace(3) %324 to i32, !dbg !30
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %325) #1, !dbg !30
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !30
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !30
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !30
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %193, !dbg !30
  %332 = ptrtoint ptr addrspace(3) %331 to i32, !dbg !30
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %332) #1, !dbg !30
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !30
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !30
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !30
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !30
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %195, !dbg !30
  %339 = ptrtoint ptr addrspace(3) %338 to i32, !dbg !30
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %339) #1, !dbg !30
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !30
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !30
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !30
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !30
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %196, !dbg !30
  %346 = ptrtoint ptr addrspace(3) %345 to i32, !dbg !30
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #1, !dbg !30
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !30
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !30
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !30
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !30
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %197, !dbg !30
  %353 = ptrtoint ptr addrspace(3) %352 to i32, !dbg !30
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %353) #1, !dbg !30
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !30
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !30
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !30
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !30
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %198, !dbg !30
  %360 = ptrtoint ptr addrspace(3) %359 to i32, !dbg !30
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %360) #1, !dbg !30
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !30
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !30
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !30
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !30
  %366 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %201, !dbg !30
  %367 = ptrtoint ptr addrspace(3) %366 to i32, !dbg !30
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %367) #1, !dbg !30
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !30
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !30
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !30
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !30
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %202, !dbg !30
  %374 = ptrtoint ptr addrspace(3) %373 to i32, !dbg !30
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #1, !dbg !30
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !30
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !30
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !30
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !30
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %203, !dbg !30
  %381 = ptrtoint ptr addrspace(3) %380 to i32, !dbg !30
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %381) #1, !dbg !30
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !30
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !30
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !30
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !30
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %204, !dbg !30
  %388 = ptrtoint ptr addrspace(3) %387 to i32, !dbg !30
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %388) #1, !dbg !30
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !30
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !30
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !30
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !30
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %206, !dbg !30
  %395 = ptrtoint ptr addrspace(3) %394 to i32, !dbg !30
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %395) #1, !dbg !30
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !30
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !30
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !30
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !30
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %207, !dbg !30
  %402 = ptrtoint ptr addrspace(3) %401 to i32, !dbg !30
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %402) #1, !dbg !30
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !30
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !30
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !30
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !30
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %208, !dbg !30
  %409 = ptrtoint ptr addrspace(3) %408 to i32, !dbg !30
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %409) #1, !dbg !30
  %411 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !30
  %412 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !30
  %413 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !30
  %414 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !30
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %309, i32 %209, !dbg !30
  %416 = ptrtoint ptr addrspace(3) %415 to i32, !dbg !30
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %416) #1, !dbg !30
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !30
  %419 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !30
  %420 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !30
  %421 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !30
  %.idx98 = shl i32 %308, 14, !dbg !33
  %422 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx98, !dbg !33
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %422, i32 %216, !dbg !33
  %424 = ptrtoint ptr addrspace(3) %423 to i32, !dbg !33
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #1, !dbg !33
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !33
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !33
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !33
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !33
  %430 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %422, i32 %217, !dbg !33
  %431 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %215, !dbg !33
  %432 = ptrtoint ptr addrspace(3) %431 to i32, !dbg !33
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %432) #1, !dbg !33
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !33
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !33
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !33
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !33
  %438 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %422, i32 %221, !dbg !33
  %439 = ptrtoint ptr addrspace(3) %438 to i32, !dbg !33
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %439) #1, !dbg !33
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !33
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !33
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !33
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !33
  %445 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %220, !dbg !33
  %446 = ptrtoint ptr addrspace(3) %445 to i32, !dbg !33
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #1, !dbg !33
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !33
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !33
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !33
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !33
  %452 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %422, i32 %.reass167, !dbg !33
  %453 = ptrtoint ptr addrspace(3) %452 to i32, !dbg !33
  %454 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %453) #1, !dbg !33
  %455 = extractvalue { i32, i32, i32, i32 } %454, 0, !dbg !33
  %456 = extractvalue { i32, i32, i32, i32 } %454, 1, !dbg !33
  %457 = extractvalue { i32, i32, i32, i32 } %454, 2, !dbg !33
  %458 = extractvalue { i32, i32, i32, i32 } %454, 3, !dbg !33
  %459 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %430, i32 %222, !dbg !33
  %460 = ptrtoint ptr addrspace(3) %459 to i32, !dbg !33
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %460) #1, !dbg !33
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !33
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !33
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !33
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !33
  %466 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %422, i32 %.reass169, !dbg !33
  %467 = ptrtoint ptr addrspace(3) %466 to i32, !dbg !33
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %467) #1, !dbg !33
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !33
  %470 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !33
  %471 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !33
  %472 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !33
  %473 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %422, i32 %224, !dbg !33
  %474 = ptrtoint ptr addrspace(3) %473 to i32, !dbg !33
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %474) #1, !dbg !33
  %476 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !33
  %477 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !33
  %478 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !33
  %479 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !33
  %480 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %241, float %242, float %243, float %244, i32 %313, i32 %314, i32 %315, i32 %316, i32 %426, i32 %427) #1, !dbg !36
  %481 = extractvalue { float, float, float, float } %480, 0, !dbg !36
  %482 = extractvalue { float, float, float, float } %480, 1, !dbg !36
  %483 = extractvalue { float, float, float, float } %480, 2, !dbg !36
  %484 = extractvalue { float, float, float, float } %480, 3, !dbg !36
  %485 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %245, float %246, float %247, float %248, i32 %313, i32 %314, i32 %315, i32 %316, i32 %441, i32 %442) #1, !dbg !36
  %486 = extractvalue { float, float, float, float } %485, 0, !dbg !36
  %487 = extractvalue { float, float, float, float } %485, 1, !dbg !36
  %488 = extractvalue { float, float, float, float } %485, 2, !dbg !36
  %489 = extractvalue { float, float, float, float } %485, 3, !dbg !36
  %490 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %249, float %250, float %251, float %252, i32 %313, i32 %314, i32 %315, i32 %316, i32 %455, i32 %456) #1, !dbg !36
  %491 = extractvalue { float, float, float, float } %490, 0, !dbg !36
  %492 = extractvalue { float, float, float, float } %490, 1, !dbg !36
  %493 = extractvalue { float, float, float, float } %490, 2, !dbg !36
  %494 = extractvalue { float, float, float, float } %490, 3, !dbg !36
  %495 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %253, float %254, float %255, float %256, i32 %313, i32 %314, i32 %315, i32 %316, i32 %469, i32 %470) #1, !dbg !36
  %496 = extractvalue { float, float, float, float } %495, 0, !dbg !36
  %497 = extractvalue { float, float, float, float } %495, 1, !dbg !36
  %498 = extractvalue { float, float, float, float } %495, 2, !dbg !36
  %499 = extractvalue { float, float, float, float } %495, 3, !dbg !36
  %500 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %257, float %258, float %259, float %260, i32 %341, i32 %342, i32 %343, i32 %344, i32 %426, i32 %427) #1, !dbg !36
  %501 = extractvalue { float, float, float, float } %500, 0, !dbg !36
  %502 = extractvalue { float, float, float, float } %500, 1, !dbg !36
  %503 = extractvalue { float, float, float, float } %500, 2, !dbg !36
  %504 = extractvalue { float, float, float, float } %500, 3, !dbg !36
  %505 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %261, float %262, float %263, float %264, i32 %341, i32 %342, i32 %343, i32 %344, i32 %441, i32 %442) #1, !dbg !36
  %506 = extractvalue { float, float, float, float } %505, 0, !dbg !36
  %507 = extractvalue { float, float, float, float } %505, 1, !dbg !36
  %508 = extractvalue { float, float, float, float } %505, 2, !dbg !36
  %509 = extractvalue { float, float, float, float } %505, 3, !dbg !36
  %510 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %265, float %266, float %267, float %268, i32 %341, i32 %342, i32 %343, i32 %344, i32 %455, i32 %456) #1, !dbg !36
  %511 = extractvalue { float, float, float, float } %510, 0, !dbg !36
  %512 = extractvalue { float, float, float, float } %510, 1, !dbg !36
  %513 = extractvalue { float, float, float, float } %510, 2, !dbg !36
  %514 = extractvalue { float, float, float, float } %510, 3, !dbg !36
  %515 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %269, float %270, float %271, float %272, i32 %341, i32 %342, i32 %343, i32 %344, i32 %469, i32 %470) #1, !dbg !36
  %516 = extractvalue { float, float, float, float } %515, 0, !dbg !36
  %517 = extractvalue { float, float, float, float } %515, 1, !dbg !36
  %518 = extractvalue { float, float, float, float } %515, 2, !dbg !36
  %519 = extractvalue { float, float, float, float } %515, 3, !dbg !36
  %520 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %273, float %274, float %275, float %276, i32 %369, i32 %370, i32 %371, i32 %372, i32 %426, i32 %427) #1, !dbg !36
  %521 = extractvalue { float, float, float, float } %520, 0, !dbg !36
  %522 = extractvalue { float, float, float, float } %520, 1, !dbg !36
  %523 = extractvalue { float, float, float, float } %520, 2, !dbg !36
  %524 = extractvalue { float, float, float, float } %520, 3, !dbg !36
  %525 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %277, float %278, float %279, float %280, i32 %369, i32 %370, i32 %371, i32 %372, i32 %441, i32 %442) #1, !dbg !36
  %526 = extractvalue { float, float, float, float } %525, 0, !dbg !36
  %527 = extractvalue { float, float, float, float } %525, 1, !dbg !36
  %528 = extractvalue { float, float, float, float } %525, 2, !dbg !36
  %529 = extractvalue { float, float, float, float } %525, 3, !dbg !36
  %530 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %281, float %282, float %283, float %284, i32 %369, i32 %370, i32 %371, i32 %372, i32 %455, i32 %456) #1, !dbg !36
  %531 = extractvalue { float, float, float, float } %530, 0, !dbg !36
  %532 = extractvalue { float, float, float, float } %530, 1, !dbg !36
  %533 = extractvalue { float, float, float, float } %530, 2, !dbg !36
  %534 = extractvalue { float, float, float, float } %530, 3, !dbg !36
  %535 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %285, float %286, float %287, float %288, i32 %369, i32 %370, i32 %371, i32 %372, i32 %469, i32 %470) #1, !dbg !36
  %536 = extractvalue { float, float, float, float } %535, 0, !dbg !36
  %537 = extractvalue { float, float, float, float } %535, 1, !dbg !36
  %538 = extractvalue { float, float, float, float } %535, 2, !dbg !36
  %539 = extractvalue { float, float, float, float } %535, 3, !dbg !36
  %540 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %289, float %290, float %291, float %292, i32 %397, i32 %398, i32 %399, i32 %400, i32 %426, i32 %427) #1, !dbg !36
  %541 = extractvalue { float, float, float, float } %540, 0, !dbg !36
  %542 = extractvalue { float, float, float, float } %540, 1, !dbg !36
  %543 = extractvalue { float, float, float, float } %540, 2, !dbg !36
  %544 = extractvalue { float, float, float, float } %540, 3, !dbg !36
  %545 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %293, float %294, float %295, float %296, i32 %397, i32 %398, i32 %399, i32 %400, i32 %441, i32 %442) #1, !dbg !36
  %546 = extractvalue { float, float, float, float } %545, 0, !dbg !36
  %547 = extractvalue { float, float, float, float } %545, 1, !dbg !36
  %548 = extractvalue { float, float, float, float } %545, 2, !dbg !36
  %549 = extractvalue { float, float, float, float } %545, 3, !dbg !36
  %550 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %297, float %298, float %299, float %300, i32 %397, i32 %398, i32 %399, i32 %400, i32 %455, i32 %456) #1, !dbg !36
  %551 = extractvalue { float, float, float, float } %550, 0, !dbg !36
  %552 = extractvalue { float, float, float, float } %550, 1, !dbg !36
  %553 = extractvalue { float, float, float, float } %550, 2, !dbg !36
  %554 = extractvalue { float, float, float, float } %550, 3, !dbg !36
  %555 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %301, float %302, float %303, float %304, i32 %397, i32 %398, i32 %399, i32 %400, i32 %469, i32 %470) #1, !dbg !36
  %556 = extractvalue { float, float, float, float } %555, 0, !dbg !36
  %557 = extractvalue { float, float, float, float } %555, 1, !dbg !36
  %558 = extractvalue { float, float, float, float } %555, 2, !dbg !36
  %559 = extractvalue { float, float, float, float } %555, 3, !dbg !36
  %560 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %481, float %482, float %483, float %484, i32 %320, i32 %321, i32 %322, i32 %323, i32 %428, i32 %429) #1, !dbg !36
  %561 = extractvalue { float, float, float, float } %560, 0, !dbg !36
  %562 = extractvalue { float, float, float, float } %560, 1, !dbg !36
  %563 = extractvalue { float, float, float, float } %560, 2, !dbg !36
  %564 = extractvalue { float, float, float, float } %560, 3, !dbg !36
  %565 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %486, float %487, float %488, float %489, i32 %320, i32 %321, i32 %322, i32 %323, i32 %443, i32 %444) #1, !dbg !36
  %566 = extractvalue { float, float, float, float } %565, 0, !dbg !36
  %567 = extractvalue { float, float, float, float } %565, 1, !dbg !36
  %568 = extractvalue { float, float, float, float } %565, 2, !dbg !36
  %569 = extractvalue { float, float, float, float } %565, 3, !dbg !36
  %570 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %491, float %492, float %493, float %494, i32 %320, i32 %321, i32 %322, i32 %323, i32 %457, i32 %458) #1, !dbg !36
  %571 = extractvalue { float, float, float, float } %570, 0, !dbg !36
  %572 = extractvalue { float, float, float, float } %570, 1, !dbg !36
  %573 = extractvalue { float, float, float, float } %570, 2, !dbg !36
  %574 = extractvalue { float, float, float, float } %570, 3, !dbg !36
  %575 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %496, float %497, float %498, float %499, i32 %320, i32 %321, i32 %322, i32 %323, i32 %471, i32 %472) #1, !dbg !36
  %576 = extractvalue { float, float, float, float } %575, 0, !dbg !36
  %577 = extractvalue { float, float, float, float } %575, 1, !dbg !36
  %578 = extractvalue { float, float, float, float } %575, 2, !dbg !36
  %579 = extractvalue { float, float, float, float } %575, 3, !dbg !36
  %580 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %501, float %502, float %503, float %504, i32 %348, i32 %349, i32 %350, i32 %351, i32 %428, i32 %429) #1, !dbg !36
  %581 = extractvalue { float, float, float, float } %580, 0, !dbg !36
  %582 = extractvalue { float, float, float, float } %580, 1, !dbg !36
  %583 = extractvalue { float, float, float, float } %580, 2, !dbg !36
  %584 = extractvalue { float, float, float, float } %580, 3, !dbg !36
  %585 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %506, float %507, float %508, float %509, i32 %348, i32 %349, i32 %350, i32 %351, i32 %443, i32 %444) #1, !dbg !36
  %586 = extractvalue { float, float, float, float } %585, 0, !dbg !36
  %587 = extractvalue { float, float, float, float } %585, 1, !dbg !36
  %588 = extractvalue { float, float, float, float } %585, 2, !dbg !36
  %589 = extractvalue { float, float, float, float } %585, 3, !dbg !36
  %590 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %511, float %512, float %513, float %514, i32 %348, i32 %349, i32 %350, i32 %351, i32 %457, i32 %458) #1, !dbg !36
  %591 = extractvalue { float, float, float, float } %590, 0, !dbg !36
  %592 = extractvalue { float, float, float, float } %590, 1, !dbg !36
  %593 = extractvalue { float, float, float, float } %590, 2, !dbg !36
  %594 = extractvalue { float, float, float, float } %590, 3, !dbg !36
  %595 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %516, float %517, float %518, float %519, i32 %348, i32 %349, i32 %350, i32 %351, i32 %471, i32 %472) #1, !dbg !36
  %596 = extractvalue { float, float, float, float } %595, 0, !dbg !36
  %597 = extractvalue { float, float, float, float } %595, 1, !dbg !36
  %598 = extractvalue { float, float, float, float } %595, 2, !dbg !36
  %599 = extractvalue { float, float, float, float } %595, 3, !dbg !36
  %600 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %521, float %522, float %523, float %524, i32 %376, i32 %377, i32 %378, i32 %379, i32 %428, i32 %429) #1, !dbg !36
  %601 = extractvalue { float, float, float, float } %600, 0, !dbg !36
  %602 = extractvalue { float, float, float, float } %600, 1, !dbg !36
  %603 = extractvalue { float, float, float, float } %600, 2, !dbg !36
  %604 = extractvalue { float, float, float, float } %600, 3, !dbg !36
  %605 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %526, float %527, float %528, float %529, i32 %376, i32 %377, i32 %378, i32 %379, i32 %443, i32 %444) #1, !dbg !36
  %606 = extractvalue { float, float, float, float } %605, 0, !dbg !36
  %607 = extractvalue { float, float, float, float } %605, 1, !dbg !36
  %608 = extractvalue { float, float, float, float } %605, 2, !dbg !36
  %609 = extractvalue { float, float, float, float } %605, 3, !dbg !36
  %610 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %531, float %532, float %533, float %534, i32 %376, i32 %377, i32 %378, i32 %379, i32 %457, i32 %458) #1, !dbg !36
  %611 = extractvalue { float, float, float, float } %610, 0, !dbg !36
  %612 = extractvalue { float, float, float, float } %610, 1, !dbg !36
  %613 = extractvalue { float, float, float, float } %610, 2, !dbg !36
  %614 = extractvalue { float, float, float, float } %610, 3, !dbg !36
  %615 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %536, float %537, float %538, float %539, i32 %376, i32 %377, i32 %378, i32 %379, i32 %471, i32 %472) #1, !dbg !36
  %616 = extractvalue { float, float, float, float } %615, 0, !dbg !36
  %617 = extractvalue { float, float, float, float } %615, 1, !dbg !36
  %618 = extractvalue { float, float, float, float } %615, 2, !dbg !36
  %619 = extractvalue { float, float, float, float } %615, 3, !dbg !36
  %620 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %541, float %542, float %543, float %544, i32 %404, i32 %405, i32 %406, i32 %407, i32 %428, i32 %429) #1, !dbg !36
  %621 = extractvalue { float, float, float, float } %620, 0, !dbg !36
  %622 = extractvalue { float, float, float, float } %620, 1, !dbg !36
  %623 = extractvalue { float, float, float, float } %620, 2, !dbg !36
  %624 = extractvalue { float, float, float, float } %620, 3, !dbg !36
  %625 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %546, float %547, float %548, float %549, i32 %404, i32 %405, i32 %406, i32 %407, i32 %443, i32 %444) #1, !dbg !36
  %626 = extractvalue { float, float, float, float } %625, 0, !dbg !36
  %627 = extractvalue { float, float, float, float } %625, 1, !dbg !36
  %628 = extractvalue { float, float, float, float } %625, 2, !dbg !36
  %629 = extractvalue { float, float, float, float } %625, 3, !dbg !36
  %630 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %551, float %552, float %553, float %554, i32 %404, i32 %405, i32 %406, i32 %407, i32 %457, i32 %458) #1, !dbg !36
  %631 = extractvalue { float, float, float, float } %630, 0, !dbg !36
  %632 = extractvalue { float, float, float, float } %630, 1, !dbg !36
  %633 = extractvalue { float, float, float, float } %630, 2, !dbg !36
  %634 = extractvalue { float, float, float, float } %630, 3, !dbg !36
  %635 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %556, float %557, float %558, float %559, i32 %404, i32 %405, i32 %406, i32 %407, i32 %471, i32 %472) #1, !dbg !36
  %636 = extractvalue { float, float, float, float } %635, 0, !dbg !36
  %637 = extractvalue { float, float, float, float } %635, 1, !dbg !36
  %638 = extractvalue { float, float, float, float } %635, 2, !dbg !36
  %639 = extractvalue { float, float, float, float } %635, 3, !dbg !36
  %640 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %561, float %562, float %563, float %564, i32 %327, i32 %328, i32 %329, i32 %330, i32 %434, i32 %435) #1, !dbg !36
  %641 = extractvalue { float, float, float, float } %640, 0, !dbg !36
  %642 = extractvalue { float, float, float, float } %640, 1, !dbg !36
  %643 = extractvalue { float, float, float, float } %640, 2, !dbg !36
  %644 = extractvalue { float, float, float, float } %640, 3, !dbg !36
  %645 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %566, float %567, float %568, float %569, i32 %327, i32 %328, i32 %329, i32 %330, i32 %448, i32 %449) #1, !dbg !36
  %646 = extractvalue { float, float, float, float } %645, 0, !dbg !36
  %647 = extractvalue { float, float, float, float } %645, 1, !dbg !36
  %648 = extractvalue { float, float, float, float } %645, 2, !dbg !36
  %649 = extractvalue { float, float, float, float } %645, 3, !dbg !36
  %650 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %571, float %572, float %573, float %574, i32 %327, i32 %328, i32 %329, i32 %330, i32 %462, i32 %463) #1, !dbg !36
  %651 = extractvalue { float, float, float, float } %650, 0, !dbg !36
  %652 = extractvalue { float, float, float, float } %650, 1, !dbg !36
  %653 = extractvalue { float, float, float, float } %650, 2, !dbg !36
  %654 = extractvalue { float, float, float, float } %650, 3, !dbg !36
  %655 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %576, float %577, float %578, float %579, i32 %327, i32 %328, i32 %329, i32 %330, i32 %476, i32 %477) #1, !dbg !36
  %656 = extractvalue { float, float, float, float } %655, 0, !dbg !36
  %657 = extractvalue { float, float, float, float } %655, 1, !dbg !36
  %658 = extractvalue { float, float, float, float } %655, 2, !dbg !36
  %659 = extractvalue { float, float, float, float } %655, 3, !dbg !36
  %660 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %581, float %582, float %583, float %584, i32 %355, i32 %356, i32 %357, i32 %358, i32 %434, i32 %435) #1, !dbg !36
  %661 = extractvalue { float, float, float, float } %660, 0, !dbg !36
  %662 = extractvalue { float, float, float, float } %660, 1, !dbg !36
  %663 = extractvalue { float, float, float, float } %660, 2, !dbg !36
  %664 = extractvalue { float, float, float, float } %660, 3, !dbg !36
  %665 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %586, float %587, float %588, float %589, i32 %355, i32 %356, i32 %357, i32 %358, i32 %448, i32 %449) #1, !dbg !36
  %666 = extractvalue { float, float, float, float } %665, 0, !dbg !36
  %667 = extractvalue { float, float, float, float } %665, 1, !dbg !36
  %668 = extractvalue { float, float, float, float } %665, 2, !dbg !36
  %669 = extractvalue { float, float, float, float } %665, 3, !dbg !36
  %670 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %591, float %592, float %593, float %594, i32 %355, i32 %356, i32 %357, i32 %358, i32 %462, i32 %463) #1, !dbg !36
  %671 = extractvalue { float, float, float, float } %670, 0, !dbg !36
  %672 = extractvalue { float, float, float, float } %670, 1, !dbg !36
  %673 = extractvalue { float, float, float, float } %670, 2, !dbg !36
  %674 = extractvalue { float, float, float, float } %670, 3, !dbg !36
  %675 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %596, float %597, float %598, float %599, i32 %355, i32 %356, i32 %357, i32 %358, i32 %476, i32 %477) #1, !dbg !36
  %676 = extractvalue { float, float, float, float } %675, 0, !dbg !36
  %677 = extractvalue { float, float, float, float } %675, 1, !dbg !36
  %678 = extractvalue { float, float, float, float } %675, 2, !dbg !36
  %679 = extractvalue { float, float, float, float } %675, 3, !dbg !36
  %680 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %601, float %602, float %603, float %604, i32 %383, i32 %384, i32 %385, i32 %386, i32 %434, i32 %435) #1, !dbg !36
  %681 = extractvalue { float, float, float, float } %680, 0, !dbg !36
  %682 = extractvalue { float, float, float, float } %680, 1, !dbg !36
  %683 = extractvalue { float, float, float, float } %680, 2, !dbg !36
  %684 = extractvalue { float, float, float, float } %680, 3, !dbg !36
  %685 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %606, float %607, float %608, float %609, i32 %383, i32 %384, i32 %385, i32 %386, i32 %448, i32 %449) #1, !dbg !36
  %686 = extractvalue { float, float, float, float } %685, 0, !dbg !36
  %687 = extractvalue { float, float, float, float } %685, 1, !dbg !36
  %688 = extractvalue { float, float, float, float } %685, 2, !dbg !36
  %689 = extractvalue { float, float, float, float } %685, 3, !dbg !36
  %690 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %611, float %612, float %613, float %614, i32 %383, i32 %384, i32 %385, i32 %386, i32 %462, i32 %463) #1, !dbg !36
  %691 = extractvalue { float, float, float, float } %690, 0, !dbg !36
  %692 = extractvalue { float, float, float, float } %690, 1, !dbg !36
  %693 = extractvalue { float, float, float, float } %690, 2, !dbg !36
  %694 = extractvalue { float, float, float, float } %690, 3, !dbg !36
  %695 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %616, float %617, float %618, float %619, i32 %383, i32 %384, i32 %385, i32 %386, i32 %476, i32 %477) #1, !dbg !36
  %696 = extractvalue { float, float, float, float } %695, 0, !dbg !36
  %697 = extractvalue { float, float, float, float } %695, 1, !dbg !36
  %698 = extractvalue { float, float, float, float } %695, 2, !dbg !36
  %699 = extractvalue { float, float, float, float } %695, 3, !dbg !36
  %700 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %621, float %622, float %623, float %624, i32 %411, i32 %412, i32 %413, i32 %414, i32 %434, i32 %435) #1, !dbg !36
  %701 = extractvalue { float, float, float, float } %700, 0, !dbg !36
  %702 = extractvalue { float, float, float, float } %700, 1, !dbg !36
  %703 = extractvalue { float, float, float, float } %700, 2, !dbg !36
  %704 = extractvalue { float, float, float, float } %700, 3, !dbg !36
  %705 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %626, float %627, float %628, float %629, i32 %411, i32 %412, i32 %413, i32 %414, i32 %448, i32 %449) #1, !dbg !36
  %706 = extractvalue { float, float, float, float } %705, 0, !dbg !36
  %707 = extractvalue { float, float, float, float } %705, 1, !dbg !36
  %708 = extractvalue { float, float, float, float } %705, 2, !dbg !36
  %709 = extractvalue { float, float, float, float } %705, 3, !dbg !36
  %710 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %631, float %632, float %633, float %634, i32 %411, i32 %412, i32 %413, i32 %414, i32 %462, i32 %463) #1, !dbg !36
  %711 = extractvalue { float, float, float, float } %710, 0, !dbg !36
  %712 = extractvalue { float, float, float, float } %710, 1, !dbg !36
  %713 = extractvalue { float, float, float, float } %710, 2, !dbg !36
  %714 = extractvalue { float, float, float, float } %710, 3, !dbg !36
  %715 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %636, float %637, float %638, float %639, i32 %411, i32 %412, i32 %413, i32 %414, i32 %476, i32 %477) #1, !dbg !36
  %716 = extractvalue { float, float, float, float } %715, 0, !dbg !36
  %717 = extractvalue { float, float, float, float } %715, 1, !dbg !36
  %718 = extractvalue { float, float, float, float } %715, 2, !dbg !36
  %719 = extractvalue { float, float, float, float } %715, 3, !dbg !36
  %720 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %641, float %642, float %643, float %644, i32 %334, i32 %335, i32 %336, i32 %337, i32 %436, i32 %437) #1, !dbg !36
  %721 = extractvalue { float, float, float, float } %720, 0, !dbg !36
  %722 = extractvalue { float, float, float, float } %720, 1, !dbg !36
  %723 = extractvalue { float, float, float, float } %720, 2, !dbg !36
  %724 = extractvalue { float, float, float, float } %720, 3, !dbg !36
  %725 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %646, float %647, float %648, float %649, i32 %334, i32 %335, i32 %336, i32 %337, i32 %450, i32 %451) #1, !dbg !36
  %726 = extractvalue { float, float, float, float } %725, 0, !dbg !36
  %727 = extractvalue { float, float, float, float } %725, 1, !dbg !36
  %728 = extractvalue { float, float, float, float } %725, 2, !dbg !36
  %729 = extractvalue { float, float, float, float } %725, 3, !dbg !36
  %730 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %651, float %652, float %653, float %654, i32 %334, i32 %335, i32 %336, i32 %337, i32 %464, i32 %465) #1, !dbg !36
  %731 = extractvalue { float, float, float, float } %730, 0, !dbg !36
  %732 = extractvalue { float, float, float, float } %730, 1, !dbg !36
  %733 = extractvalue { float, float, float, float } %730, 2, !dbg !36
  %734 = extractvalue { float, float, float, float } %730, 3, !dbg !36
  %735 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %656, float %657, float %658, float %659, i32 %334, i32 %335, i32 %336, i32 %337, i32 %478, i32 %479) #1, !dbg !36
  %736 = extractvalue { float, float, float, float } %735, 0, !dbg !36
  %737 = extractvalue { float, float, float, float } %735, 1, !dbg !36
  %738 = extractvalue { float, float, float, float } %735, 2, !dbg !36
  %739 = extractvalue { float, float, float, float } %735, 3, !dbg !36
  %740 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %661, float %662, float %663, float %664, i32 %362, i32 %363, i32 %364, i32 %365, i32 %436, i32 %437) #1, !dbg !36
  %741 = extractvalue { float, float, float, float } %740, 0, !dbg !36
  %742 = extractvalue { float, float, float, float } %740, 1, !dbg !36
  %743 = extractvalue { float, float, float, float } %740, 2, !dbg !36
  %744 = extractvalue { float, float, float, float } %740, 3, !dbg !36
  %745 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %666, float %667, float %668, float %669, i32 %362, i32 %363, i32 %364, i32 %365, i32 %450, i32 %451) #1, !dbg !36
  %746 = extractvalue { float, float, float, float } %745, 0, !dbg !36
  %747 = extractvalue { float, float, float, float } %745, 1, !dbg !36
  %748 = extractvalue { float, float, float, float } %745, 2, !dbg !36
  %749 = extractvalue { float, float, float, float } %745, 3, !dbg !36
  %750 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %671, float %672, float %673, float %674, i32 %362, i32 %363, i32 %364, i32 %365, i32 %464, i32 %465) #1, !dbg !36
  %751 = extractvalue { float, float, float, float } %750, 0, !dbg !36
  %752 = extractvalue { float, float, float, float } %750, 1, !dbg !36
  %753 = extractvalue { float, float, float, float } %750, 2, !dbg !36
  %754 = extractvalue { float, float, float, float } %750, 3, !dbg !36
  %755 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %676, float %677, float %678, float %679, i32 %362, i32 %363, i32 %364, i32 %365, i32 %478, i32 %479) #1, !dbg !36
  %756 = extractvalue { float, float, float, float } %755, 0, !dbg !36
  %757 = extractvalue { float, float, float, float } %755, 1, !dbg !36
  %758 = extractvalue { float, float, float, float } %755, 2, !dbg !36
  %759 = extractvalue { float, float, float, float } %755, 3, !dbg !36
  %760 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %681, float %682, float %683, float %684, i32 %390, i32 %391, i32 %392, i32 %393, i32 %436, i32 %437) #1, !dbg !36
  %761 = extractvalue { float, float, float, float } %760, 0, !dbg !36
  %762 = extractvalue { float, float, float, float } %760, 1, !dbg !36
  %763 = extractvalue { float, float, float, float } %760, 2, !dbg !36
  %764 = extractvalue { float, float, float, float } %760, 3, !dbg !36
  %765 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %686, float %687, float %688, float %689, i32 %390, i32 %391, i32 %392, i32 %393, i32 %450, i32 %451) #1, !dbg !36
  %766 = extractvalue { float, float, float, float } %765, 0, !dbg !36
  %767 = extractvalue { float, float, float, float } %765, 1, !dbg !36
  %768 = extractvalue { float, float, float, float } %765, 2, !dbg !36
  %769 = extractvalue { float, float, float, float } %765, 3, !dbg !36
  %770 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %691, float %692, float %693, float %694, i32 %390, i32 %391, i32 %392, i32 %393, i32 %464, i32 %465) #1, !dbg !36
  %771 = extractvalue { float, float, float, float } %770, 0, !dbg !36
  %772 = extractvalue { float, float, float, float } %770, 1, !dbg !36
  %773 = extractvalue { float, float, float, float } %770, 2, !dbg !36
  %774 = extractvalue { float, float, float, float } %770, 3, !dbg !36
  %775 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %696, float %697, float %698, float %699, i32 %390, i32 %391, i32 %392, i32 %393, i32 %478, i32 %479) #1, !dbg !36
  %776 = extractvalue { float, float, float, float } %775, 0, !dbg !36
  %777 = extractvalue { float, float, float, float } %775, 1, !dbg !36
  %778 = extractvalue { float, float, float, float } %775, 2, !dbg !36
  %779 = extractvalue { float, float, float, float } %775, 3, !dbg !36
  %780 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %701, float %702, float %703, float %704, i32 %418, i32 %419, i32 %420, i32 %421, i32 %436, i32 %437) #1, !dbg !36
  %781 = extractvalue { float, float, float, float } %780, 0, !dbg !36
  %782 = extractvalue { float, float, float, float } %780, 1, !dbg !36
  %783 = extractvalue { float, float, float, float } %780, 2, !dbg !36
  %784 = extractvalue { float, float, float, float } %780, 3, !dbg !36
  %785 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %706, float %707, float %708, float %709, i32 %418, i32 %419, i32 %420, i32 %421, i32 %450, i32 %451) #1, !dbg !36
  %786 = extractvalue { float, float, float, float } %785, 0, !dbg !36
  %787 = extractvalue { float, float, float, float } %785, 1, !dbg !36
  %788 = extractvalue { float, float, float, float } %785, 2, !dbg !36
  %789 = extractvalue { float, float, float, float } %785, 3, !dbg !36
  %790 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %711, float %712, float %713, float %714, i32 %418, i32 %419, i32 %420, i32 %421, i32 %464, i32 %465) #1, !dbg !36
  %791 = extractvalue { float, float, float, float } %790, 0, !dbg !36
  %792 = extractvalue { float, float, float, float } %790, 1, !dbg !36
  %793 = extractvalue { float, float, float, float } %790, 2, !dbg !36
  %794 = extractvalue { float, float, float, float } %790, 3, !dbg !36
  %795 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %716, float %717, float %718, float %719, i32 %418, i32 %419, i32 %420, i32 %421, i32 %478, i32 %479) #1, !dbg !36
  %796 = extractvalue { float, float, float, float } %795, 0, !dbg !36
  %797 = extractvalue { float, float, float, float } %795, 1, !dbg !36
  %798 = extractvalue { float, float, float, float } %795, 2, !dbg !36
  %799 = extractvalue { float, float, float, float } %795, 3, !dbg !36
  %800 = add i32 %240, 1, !dbg !35
  %801 = icmp slt i32 %800, 2, !dbg !35
  %802 = select i1 %801, i32 %800, i32 0, !dbg !35
  %803 = shl nuw nsw i64 %indvars.iv, 6, !dbg !37
  %804 = add nuw nsw i64 %803, %225
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %804, !dbg !29
  %gep300 = getelementptr bfloat, ptr addrspace(1) %invariant.gep299, i64 %804, !dbg !29
  %gep302 = getelementptr bfloat, ptr addrspace(1) %invariant.gep301, i64 %804, !dbg !29
  %gep304 = getelementptr bfloat, ptr addrspace(1) %invariant.gep303, i64 %804, !dbg !29
  %.idx99 = shl i32 %802, 13, !dbg !30
  %805 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %.idx99, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %806 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %805, i32 %82, !dbg !30
  %807 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %805, i32 %84, !dbg !30
  %808 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %805, i32 %86, !dbg !30
  %809 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %805, i32 %88, !dbg !30
  %810 = select i1 %305, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %806, ptr addrspace(1) %gep, i32 %810) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %807, ptr addrspace(1) %gep300, i32 %810) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %808, ptr addrspace(1) %gep302, i32 %810) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %809, ptr addrspace(1) %gep304, i32 %810) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep306 = getelementptr bfloat, ptr addrspace(1) %invariant.gep305, i64 %804, !dbg !32
  %gep308 = getelementptr bfloat, ptr addrspace(1) %invariant.gep307, i64 %804, !dbg !32
  %gep310 = getelementptr bfloat, ptr addrspace(1) %invariant.gep309, i64 %804, !dbg !32
  %gep312 = getelementptr bfloat, ptr addrspace(1) %invariant.gep311, i64 %804, !dbg !32
  %gep314 = getelementptr bfloat, ptr addrspace(1) %invariant.gep313, i64 %804, !dbg !32
  %gep316 = getelementptr bfloat, ptr addrspace(1) %invariant.gep315, i64 %804, !dbg !32
  %gep318 = getelementptr bfloat, ptr addrspace(1) %invariant.gep317, i64 %804, !dbg !32
  %gep320 = getelementptr bfloat, ptr addrspace(1) %invariant.gep319, i64 %804, !dbg !32
  %.idx100 = shl i32 %802, 14, !dbg !33
  %811 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx100, !dbg !33
  %812 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %82, !dbg !33
  %813 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %84, !dbg !33
  %814 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %86, !dbg !33
  %815 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %88, !dbg !33
  %816 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %118, !dbg !33
  %817 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %120, !dbg !33
  %818 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %122, !dbg !33
  %819 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %811, i32 %124, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %812, ptr addrspace(1) %gep306, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %813, ptr addrspace(1) %gep308, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %814, ptr addrspace(1) %gep310, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %815, ptr addrspace(1) %gep312, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %816, ptr addrspace(1) %gep314, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %817, ptr addrspace(1) %gep316, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %818, ptr addrspace(1) %gep318, i32 %810) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %819, ptr addrspace(1) %gep320, i32 %810) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 64, !dbg !35
  br i1 %exitcond.not, label %820, label %238, !dbg !35

820:                                              ; preds = %238
  %821 = shl nuw nsw i32 %16, 3, !dbg !22
  %822 = or disjoint i32 %34, %821, !dbg !22
  %823 = or disjoint i32 %28, %822, !dbg !23
  %824 = lshr i32 %15, 4, !dbg !19
  %825 = and i32 %824, 7, !dbg !19
  %826 = or disjoint i32 %825, %14, !dbg !20
  %827 = or disjoint i32 %826, 56, !dbg !20
  %828 = or disjoint i32 %826, 48, !dbg !20
  %829 = or disjoint i32 %826, 40, !dbg !20
  %830 = or disjoint i32 %826, 32, !dbg !20
  %831 = or disjoint i32 %826, 24, !dbg !20
  %832 = or disjoint i32 %826, 16, !dbg !20
  %833 = or disjoint i32 %826, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %834 = icmp slt i32 %826, 512, !dbg !38
  %835 = icmp slt i32 %833, 512, !dbg !38
  %836 = icmp slt i32 %832, 512, !dbg !38
  %837 = icmp slt i32 %831, 512, !dbg !38
  %838 = icmp slt i32 %830, 512, !dbg !38
  %839 = icmp slt i32 %829, 512, !dbg !38
  %840 = icmp slt i32 %828, 512, !dbg !38
  %841 = icmp slt i32 %827, 512, !dbg !38
  %842 = icmp slt i32 %823, 4096, !dbg !39
  %843 = and i1 %834, %842, !dbg !40
  %844 = and i1 %835, %842, !dbg !40
  %845 = and i1 %836, %842, !dbg !40
  %846 = and i1 %837, %842, !dbg !40
  %847 = and i1 %838, %842, !dbg !40
  %848 = and i1 %839, %842, !dbg !40
  %849 = and i1 %840, %842, !dbg !40
  %850 = and i1 %841, %842, !dbg !40
  %851 = shl i32 %826, 12, !dbg !41
  %852 = shl i32 %833, 12, !dbg !41
  %853 = shl i32 %832, 12, !dbg !41
  %854 = shl i32 %831, 12, !dbg !41
  %855 = shl i32 %830, 12, !dbg !41
  %856 = shl i32 %829, 12, !dbg !41
  %857 = shl i32 %828, 12, !dbg !41
  %858 = shl i32 %827, 12, !dbg !41
  %859 = add i32 %851, %823, !dbg !42
  %860 = add i32 %852, %823, !dbg !42
  %861 = add i32 %853, %823, !dbg !42
  %862 = add i32 %854, %823, !dbg !42
  %863 = add i32 %855, %823, !dbg !42
  %864 = add i32 %856, %823, !dbg !42
  %865 = add i32 %857, %823, !dbg !42
  %866 = add i32 %858, %823, !dbg !42
  %867 = sext i32 %859 to i64, !dbg !43
  %868 = getelementptr bfloat, ptr addrspace(1) %2, i64 %867, !dbg !43
  %869 = sext i32 %860 to i64, !dbg !43
  %870 = getelementptr bfloat, ptr addrspace(1) %2, i64 %869, !dbg !43
  %871 = sext i32 %861 to i64, !dbg !43
  %872 = getelementptr bfloat, ptr addrspace(1) %2, i64 %871, !dbg !43
  %873 = sext i32 %862 to i64, !dbg !43
  %874 = getelementptr bfloat, ptr addrspace(1) %2, i64 %873, !dbg !43
  %875 = sext i32 %863 to i64, !dbg !43
  %876 = getelementptr bfloat, ptr addrspace(1) %2, i64 %875, !dbg !43
  %877 = sext i32 %864 to i64, !dbg !43
  %878 = getelementptr bfloat, ptr addrspace(1) %2, i64 %877, !dbg !43
  %879 = sext i32 %865 to i64, !dbg !43
  %880 = getelementptr bfloat, ptr addrspace(1) %2, i64 %879, !dbg !43
  %881 = sext i32 %866 to i64, !dbg !43
  %882 = getelementptr bfloat, ptr addrspace(1) %2, i64 %881, !dbg !43
  %883 = fptrunc float %721 to bfloat, !dbg !44
  %884 = fptrunc float %722 to bfloat, !dbg !44
  %885 = fptrunc float %723 to bfloat, !dbg !44
  %886 = fptrunc float %724 to bfloat, !dbg !44
  %887 = fptrunc float %726 to bfloat, !dbg !44
  %888 = fptrunc float %727 to bfloat, !dbg !44
  %889 = fptrunc float %728 to bfloat, !dbg !44
  %890 = fptrunc float %729 to bfloat, !dbg !44
  %891 = fptrunc float %731 to bfloat, !dbg !44
  %892 = fptrunc float %732 to bfloat, !dbg !44
  %893 = fptrunc float %733 to bfloat, !dbg !44
  %894 = fptrunc float %734 to bfloat, !dbg !44
  %895 = fptrunc float %736 to bfloat, !dbg !44
  %896 = fptrunc float %737 to bfloat, !dbg !44
  %897 = fptrunc float %738 to bfloat, !dbg !44
  %898 = fptrunc float %739 to bfloat, !dbg !44
  %899 = fptrunc float %741 to bfloat, !dbg !44
  %900 = fptrunc float %742 to bfloat, !dbg !44
  %901 = fptrunc float %743 to bfloat, !dbg !44
  %902 = fptrunc float %744 to bfloat, !dbg !44
  %903 = fptrunc float %746 to bfloat, !dbg !44
  %904 = fptrunc float %747 to bfloat, !dbg !44
  %905 = fptrunc float %748 to bfloat, !dbg !44
  %906 = fptrunc float %749 to bfloat, !dbg !44
  %907 = fptrunc float %751 to bfloat, !dbg !44
  %908 = fptrunc float %752 to bfloat, !dbg !44
  %909 = fptrunc float %753 to bfloat, !dbg !44
  %910 = fptrunc float %754 to bfloat, !dbg !44
  %911 = fptrunc float %756 to bfloat, !dbg !44
  %912 = fptrunc float %757 to bfloat, !dbg !44
  %913 = fptrunc float %758 to bfloat, !dbg !44
  %914 = fptrunc float %759 to bfloat, !dbg !44
  %915 = fptrunc float %761 to bfloat, !dbg !44
  %916 = fptrunc float %762 to bfloat, !dbg !44
  %917 = fptrunc float %763 to bfloat, !dbg !44
  %918 = fptrunc float %764 to bfloat, !dbg !44
  %919 = fptrunc float %766 to bfloat, !dbg !44
  %920 = fptrunc float %767 to bfloat, !dbg !44
  %921 = fptrunc float %768 to bfloat, !dbg !44
  %922 = fptrunc float %769 to bfloat, !dbg !44
  %923 = fptrunc float %771 to bfloat, !dbg !44
  %924 = fptrunc float %772 to bfloat, !dbg !44
  %925 = fptrunc float %773 to bfloat, !dbg !44
  %926 = fptrunc float %774 to bfloat, !dbg !44
  %927 = fptrunc float %776 to bfloat, !dbg !44
  %928 = fptrunc float %777 to bfloat, !dbg !44
  %929 = fptrunc float %778 to bfloat, !dbg !44
  %930 = fptrunc float %779 to bfloat, !dbg !44
  %931 = fptrunc float %781 to bfloat, !dbg !44
  %932 = fptrunc float %782 to bfloat, !dbg !44
  %933 = fptrunc float %783 to bfloat, !dbg !44
  %934 = fptrunc float %784 to bfloat, !dbg !44
  %935 = fptrunc float %786 to bfloat, !dbg !44
  %936 = fptrunc float %787 to bfloat, !dbg !44
  %937 = fptrunc float %788 to bfloat, !dbg !44
  %938 = fptrunc float %789 to bfloat, !dbg !44
  %939 = fptrunc float %791 to bfloat, !dbg !44
  %940 = fptrunc float %792 to bfloat, !dbg !44
  %941 = fptrunc float %793 to bfloat, !dbg !44
  %942 = fptrunc float %794 to bfloat, !dbg !44
  %943 = fptrunc float %796 to bfloat, !dbg !44
  %944 = fptrunc float %797 to bfloat, !dbg !44
  %945 = fptrunc float %798 to bfloat, !dbg !44
  %946 = fptrunc float %799 to bfloat, !dbg !44
  %947 = shl i32 %15, 1, !dbg !44
  %948 = and i32 %947, 6, !dbg !44
  %949 = shl i32 %15, 5, !dbg !44
  %950 = and i32 %949, 384, !dbg !44
  %951 = or disjoint i32 %950, %948, !dbg !44
  %952 = shl nuw nsw i32 %17, 5, !dbg !44
  %953 = or disjoint i32 %951, %952, !dbg !44
  %954 = and i32 %211, 24, !dbg !44
  %955 = or disjoint i32 %953, %954, !dbg !44
  %956 = and i32 %29, 1016, !dbg !44
  %957 = lshr i32 %953, 4, !dbg !44
  %958 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %957, !dbg !44
  %959 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %958, i32 %955, !dbg !44
  %960 = bitcast bfloat %883 to i16, !dbg !44
  %961 = bitcast bfloat %884 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %959, i16 %960, i16 %961, i1 true) #1, !dbg !44
  %962 = or disjoint i32 %955, 1024, !dbg !44
  %963 = lshr i32 %962, 4, !dbg !44
  %964 = and i32 %963, 268435448, !dbg !44
  %965 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %964, !dbg !44
  %966 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %965, i32 %962, !dbg !44
  %967 = bitcast bfloat %885 to i16, !dbg !44
  %968 = bitcast bfloat %886 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %966, i16 %967, i16 %968, i1 true) #1, !dbg !44
  %969 = or disjoint i32 %955, 32, !dbg !44
  %970 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %958, i32 %969, !dbg !44
  %971 = bitcast bfloat %887 to i16, !dbg !44
  %972 = bitcast bfloat %888 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %970, i16 %971, i16 %972, i1 true) #1, !dbg !44
  %973 = or disjoint i32 %955, 1056, !dbg !44
  %974 = lshr i32 %973, 4, !dbg !44
  %975 = and i32 %974, 268435448, !dbg !44
  %976 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %975, !dbg !44
  %977 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %976, i32 %973, !dbg !44
  %978 = bitcast bfloat %889 to i16, !dbg !44
  %979 = bitcast bfloat %890 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %977, i16 %978, i16 %979, i1 true) #1, !dbg !44
  %980 = or disjoint i32 %955, 64, !dbg !44
  %981 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %958, i32 %980, !dbg !44
  %982 = bitcast bfloat %891 to i16, !dbg !44
  %983 = bitcast bfloat %892 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %981, i16 %982, i16 %983, i1 true) #1, !dbg !44
  %984 = or disjoint i32 %955, 1088, !dbg !44
  %985 = lshr i32 %984, 4, !dbg !44
  %986 = and i32 %985, 268435448, !dbg !44
  %987 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %986, !dbg !44
  %988 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %987, i32 %984, !dbg !44
  %989 = bitcast bfloat %893 to i16, !dbg !44
  %990 = bitcast bfloat %894 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %988, i16 %989, i16 %990, i1 true) #1, !dbg !44
  %991 = or disjoint i32 %955, 96, !dbg !44
  %992 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %958, i32 %991, !dbg !44
  %993 = bitcast bfloat %895 to i16, !dbg !44
  %994 = bitcast bfloat %896 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %992, i16 %993, i16 %994, i1 true) #1, !dbg !44
  %995 = or disjoint i32 %955, 1120, !dbg !44
  %996 = lshr i32 %995, 4, !dbg !44
  %997 = and i32 %996, 268435448, !dbg !44
  %998 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %997, !dbg !44
  %999 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %998, i32 %995, !dbg !44
  %1000 = bitcast bfloat %897 to i16, !dbg !44
  %1001 = bitcast bfloat %898 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1000, i16 %1001, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1002 = lshr i32 %29, 4, !dbg !44
  %1003 = and i32 %1002, 56, !dbg !44
  %1004 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1003, !dbg !44
  %1005 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1004, i32 %956, !dbg !44
  %1006 = load <4 x i32>, ptr addrspace(3) %1005, align 16, !dbg !44
  %1007 = or disjoint i32 %956, 1024, !dbg !44
  %1008 = lshr i32 %1007, 4, !dbg !44
  %1009 = and i32 %1008, 120, !dbg !44
  %1010 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1009, !dbg !44
  %1011 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1010, i32 %1007, !dbg !44
  %1012 = load <4 x i32>, ptr addrspace(3) %1011, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1013 = bitcast bfloat %899 to i16, !dbg !44
  %1014 = bitcast bfloat %900 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %959, i16 %1013, i16 %1014, i1 true) #1, !dbg !44
  %1015 = bitcast bfloat %901 to i16, !dbg !44
  %1016 = bitcast bfloat %902 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %966, i16 %1015, i16 %1016, i1 true) #1, !dbg !44
  %1017 = bitcast bfloat %903 to i16, !dbg !44
  %1018 = bitcast bfloat %904 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %970, i16 %1017, i16 %1018, i1 true) #1, !dbg !44
  %1019 = bitcast bfloat %905 to i16, !dbg !44
  %1020 = bitcast bfloat %906 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %977, i16 %1019, i16 %1020, i1 true) #1, !dbg !44
  %1021 = bitcast bfloat %907 to i16, !dbg !44
  %1022 = bitcast bfloat %908 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %981, i16 %1021, i16 %1022, i1 true) #1, !dbg !44
  %1023 = bitcast bfloat %909 to i16, !dbg !44
  %1024 = bitcast bfloat %910 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %988, i16 %1023, i16 %1024, i1 true) #1, !dbg !44
  %1025 = bitcast bfloat %911 to i16, !dbg !44
  %1026 = bitcast bfloat %912 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %992, i16 %1025, i16 %1026, i1 true) #1, !dbg !44
  %1027 = bitcast bfloat %913 to i16, !dbg !44
  %1028 = bitcast bfloat %914 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1027, i16 %1028, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1029 = load <4 x i32>, ptr addrspace(3) %1005, align 16, !dbg !44
  %1030 = load <4 x i32>, ptr addrspace(3) %1011, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1031 = bitcast bfloat %915 to i16, !dbg !44
  %1032 = bitcast bfloat %916 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %959, i16 %1031, i16 %1032, i1 true) #1, !dbg !44
  %1033 = bitcast bfloat %917 to i16, !dbg !44
  %1034 = bitcast bfloat %918 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %966, i16 %1033, i16 %1034, i1 true) #1, !dbg !44
  %1035 = bitcast bfloat %919 to i16, !dbg !44
  %1036 = bitcast bfloat %920 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %970, i16 %1035, i16 %1036, i1 true) #1, !dbg !44
  %1037 = bitcast bfloat %921 to i16, !dbg !44
  %1038 = bitcast bfloat %922 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %977, i16 %1037, i16 %1038, i1 true) #1, !dbg !44
  %1039 = bitcast bfloat %923 to i16, !dbg !44
  %1040 = bitcast bfloat %924 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %981, i16 %1039, i16 %1040, i1 true) #1, !dbg !44
  %1041 = bitcast bfloat %925 to i16, !dbg !44
  %1042 = bitcast bfloat %926 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %988, i16 %1041, i16 %1042, i1 true) #1, !dbg !44
  %1043 = bitcast bfloat %927 to i16, !dbg !44
  %1044 = bitcast bfloat %928 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %992, i16 %1043, i16 %1044, i1 true) #1, !dbg !44
  %1045 = bitcast bfloat %929 to i16, !dbg !44
  %1046 = bitcast bfloat %930 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1045, i16 %1046, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1047 = load <4 x i32>, ptr addrspace(3) %1005, align 16, !dbg !44
  %1048 = load <4 x i32>, ptr addrspace(3) %1011, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1049 = bitcast bfloat %931 to i16, !dbg !44
  %1050 = bitcast bfloat %932 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %959, i16 %1049, i16 %1050, i1 true) #1, !dbg !44
  %1051 = bitcast bfloat %933 to i16, !dbg !44
  %1052 = bitcast bfloat %934 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %966, i16 %1051, i16 %1052, i1 true) #1, !dbg !44
  %1053 = bitcast bfloat %935 to i16, !dbg !44
  %1054 = bitcast bfloat %936 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %970, i16 %1053, i16 %1054, i1 true) #1, !dbg !44
  %1055 = bitcast bfloat %937 to i16, !dbg !44
  %1056 = bitcast bfloat %938 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %977, i16 %1055, i16 %1056, i1 true) #1, !dbg !44
  %1057 = bitcast bfloat %939 to i16, !dbg !44
  %1058 = bitcast bfloat %940 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %981, i16 %1057, i16 %1058, i1 true) #1, !dbg !44
  %1059 = bitcast bfloat %941 to i16, !dbg !44
  %1060 = bitcast bfloat %942 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %988, i16 %1059, i16 %1060, i1 true) #1, !dbg !44
  %1061 = bitcast bfloat %943 to i16, !dbg !44
  %1062 = bitcast bfloat %944 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %992, i16 %1061, i16 %1062, i1 true) #1, !dbg !44
  %1063 = bitcast bfloat %945 to i16, !dbg !44
  %1064 = bitcast bfloat %946 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %999, i16 %1063, i16 %1064, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1065 = load <4 x i32>, ptr addrspace(3) %1005, align 16, !dbg !44
  %1066 = load <4 x i32>, ptr addrspace(3) %1011, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %1006, i64 0, !dbg !44
  %.extract103 = extractelement <4 x i32> %1006, i64 1, !dbg !44
  %.extract105 = extractelement <4 x i32> %1006, i64 2, !dbg !44
  %.extract107 = extractelement <4 x i32> %1006, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract103, i32 %.extract105, i32 %.extract107, ptr addrspace(1) %868, i1 %843) #1, !dbg !44
  %.extract109 = extractelement <4 x i32> %1012, i64 0, !dbg !44
  %.extract111 = extractelement <4 x i32> %1012, i64 1, !dbg !44
  %.extract113 = extractelement <4 x i32> %1012, i64 2, !dbg !44
  %.extract115 = extractelement <4 x i32> %1012, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115, ptr addrspace(1) %870, i1 %844) #1, !dbg !44
  %.extract117 = extractelement <4 x i32> %1029, i64 0, !dbg !44
  %.extract119 = extractelement <4 x i32> %1029, i64 1, !dbg !44
  %.extract121 = extractelement <4 x i32> %1029, i64 2, !dbg !44
  %.extract123 = extractelement <4 x i32> %1029, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract117, i32 %.extract119, i32 %.extract121, i32 %.extract123, ptr addrspace(1) %872, i1 %845) #1, !dbg !44
  %.extract125 = extractelement <4 x i32> %1030, i64 0, !dbg !44
  %.extract127 = extractelement <4 x i32> %1030, i64 1, !dbg !44
  %.extract129 = extractelement <4 x i32> %1030, i64 2, !dbg !44
  %.extract131 = extractelement <4 x i32> %1030, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract125, i32 %.extract127, i32 %.extract129, i32 %.extract131, ptr addrspace(1) %874, i1 %846) #1, !dbg !44
  %.extract133 = extractelement <4 x i32> %1047, i64 0, !dbg !44
  %.extract135 = extractelement <4 x i32> %1047, i64 1, !dbg !44
  %.extract137 = extractelement <4 x i32> %1047, i64 2, !dbg !44
  %.extract139 = extractelement <4 x i32> %1047, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract133, i32 %.extract135, i32 %.extract137, i32 %.extract139, ptr addrspace(1) %876, i1 %847) #1, !dbg !44
  %.extract141 = extractelement <4 x i32> %1048, i64 0, !dbg !44
  %.extract143 = extractelement <4 x i32> %1048, i64 1, !dbg !44
  %.extract145 = extractelement <4 x i32> %1048, i64 2, !dbg !44
  %.extract147 = extractelement <4 x i32> %1048, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract141, i32 %.extract143, i32 %.extract145, i32 %.extract147, ptr addrspace(1) %878, i1 %848) #1, !dbg !44
  %.extract149 = extractelement <4 x i32> %1065, i64 0, !dbg !44
  %.extract151 = extractelement <4 x i32> %1065, i64 1, !dbg !44
  %.extract153 = extractelement <4 x i32> %1065, i64 2, !dbg !44
  %.extract155 = extractelement <4 x i32> %1065, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract149, i32 %.extract151, i32 %.extract153, i32 %.extract155, ptr addrspace(1) %880, i1 %849) #1, !dbg !44
  %.extract157 = extractelement <4 x i32> %1066, i64 0, !dbg !44
  %.extract159 = extractelement <4 x i32> %1066, i64 1, !dbg !44
  %.extract161 = extractelement <4 x i32> %1066, i64 2, !dbg !44
  %.extract163 = extractelement <4 x i32> %1066, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract157, i32 %.extract159, i32 %.extract161, i32 %.extract163, ptr addrspace(1) %882, i1 %850) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm23c6folp627hsr3peu2x3pk7jhexggugsm56oqxx5jddppc3sr.py", directory: "/tmp/torchinductor_root/m2")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
