; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = icmp slt i32 %11, 86400, !dbg !13
  %13 = shl i32 %8, 3, !dbg !14
  %14 = and i32 %13, 56, !dbg !14
  %15 = sdiv i32 %11, 24, !dbg !15
  %16 = mul i32 %15, 24, !dbg !16
  %.decomposed = sub i32 %11, %16, !dbg !16
  %17 = shl nsw i32 %.decomposed, 7, !dbg !17
  %18 = mul i32 %15, 9216, !dbg !18
  %19 = add nsw i32 %17, 3072
  %20 = add i32 %19, %18
  %21 = or disjoint i32 %20, %14, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i1 %12) #3, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !21
  %33 = or disjoint i32 %14, 64, !dbg !22
  %34 = or disjoint i32 %20, %33, !dbg !19
  %35 = sext i32 %34 to i64, !dbg !20
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %12) #3, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !21
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !21
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !21
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !21
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !21
  %46 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !23
  %47 = fmul <2 x float> %46, %46, !dbg !24
  %48 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !23
  %49 = fmul <2 x float> %48, %48, !dbg !24
  %50 = fadd <2 x float> %47, %49, !dbg !25
  %51 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !23
  %52 = fmul <2 x float> %51, %51, !dbg !24
  %53 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !23
  %54 = fmul <2 x float> %53, %53, !dbg !24
  %55 = fadd <2 x float> %52, %54, !dbg !25
  %56 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !23
  %57 = fmul <2 x float> %56, %56, !dbg !24
  %58 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !23
  %59 = fmul <2 x float> %58, %58, !dbg !24
  %60 = fadd <2 x float> %57, %59, !dbg !25
  %61 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !23
  %62 = fmul <2 x float> %61, %61, !dbg !24
  %63 = fpext <2 x bfloat> %45 to <2 x float>, !dbg !23
  %64 = fmul <2 x float> %63, %63, !dbg !24
  %65 = fadd <2 x float> %62, %64, !dbg !25
  %66 = and i32 %8, 63, !dbg !11
  %67 = or disjoint i32 %7, %66, !dbg !12
  %68 = icmp slt i32 %67, 86400, !dbg !13
  %shift = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %69 = fadd <2 x float> %50, %shift, !dbg !26
  %70 = fadd <2 x float> %55, %69, !dbg !26
  %shift10 = shufflevector <2 x float> %55, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %71 = fadd <2 x float> %shift10, %70, !dbg !26
  %72 = fadd <2 x float> %60, %71, !dbg !26
  %shift11 = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %73 = fadd <2 x float> %shift11, %72, !dbg !26
  %74 = fadd <2 x float> %65, %73, !dbg !26
  %shift12 = shufflevector <2 x float> %65, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %75 = fadd <2 x float> %shift12, %74, !dbg !26
  %76 = extractelement <2 x float> %75, i64 0, !dbg !26
  %77 = select i1 %12, float %76, float 0.000000e+00, !dbg !26
  %78 = bitcast float %77 to i32, !dbg !31
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = fadd float %77, %80, !dbg !26
  %82 = bitcast float %81 to i32, !dbg !31
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !31
  %84 = bitcast i32 %83 to float, !dbg !31
  %85 = fadd float %81, %84, !dbg !26
  %86 = bitcast float %85 to i32, !dbg !31
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !31
  %88 = bitcast i32 %87 to float, !dbg !31
  %89 = fadd float %85, %88, !dbg !26
  %90 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  %91 = bitcast float %89 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %92 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %66, !dbg !32
  %93 = load i32, ptr addrspace(3) %92, align 4, !dbg !32
  %94 = sext i32 %67 to i64, !dbg !33
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !33
  %96 = and i32 %8, 448, !dbg !34
  %97 = icmp eq i32 %96, 0, !dbg !34
  %98 = and i1 %97, %68, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %95, i1 %98) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctukkjgi3ilus5xqhbuvomraszqcwuo43btmyeda555wzrbb4pe6.py", directory: "/tmp/torchinductor_root/tu")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_7", linkageName: "triton_red_fused__to_copy_mean_pow_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 28, column: 19, scope: !6)
!17 = !DILocation(line: 38, column: 52, scope: !6)
!18 = !DILocation(line: 38, column: 62, scope: !6)
!19 = !DILocation(line: 38, column: 57, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 67, scope: !6)
!22 = !DILocation(line: 33, column: 31, scope: !6)
!23 = !DILocation(line: 38, column: 129, scope: !6)
!24 = !DILocation(line: 40, column: 22, scope: !6)
!25 = !DILocation(line: 42, column: 23, scope: !6)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!30 = !DILocation(line: 44, column: 25, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 44, column: 28, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 45, column: 36, scope: !6)
!35 = !DILocation(line: 45, column: 4, scope: !6)
