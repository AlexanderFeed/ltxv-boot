; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 1, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %22 = lshr i32 %21, 5, !dbg !11
  %23 = and i32 %21, 512, !dbg !11
  %.lobit = lshr exact i32 %23, 9, !dbg !11
  %24 = and i32 %21, 31, !dbg !11
  %25 = or disjoint i32 %.lobit, %20, !dbg !12
  %26 = icmp slt i32 %25, 4112, !dbg !13
  %27 = shl i32 %21, 2, !dbg !14
  %28 = and i32 %27, 4092, !dbg !14
  %29 = shl i32 %21, 3, !dbg !14
  %30 = and i32 %29, 4088, !dbg !14
  %31 = icmp samesign ult i32 %28, 3072, !dbg !15
  %32 = icmp samesign ult i32 %30, 3072, !dbg !15
  %33 = mul i32 %25, 3072, !dbg !16
  %34 = add i32 %33, %30, !dbg !17
  %35 = sext i32 %34 to i64, !dbg !18
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !18
  %37 = and i1 %32, %26, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %37) #5, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !20
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !20
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !20
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !20
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !20
  %51 = extractelement <2 x bfloat> %44, i64 0, !dbg !20
  %52 = extractelement <2 x bfloat> %44, i64 1, !dbg !20
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !20
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !20
  %55 = fpext bfloat %47 to float, !dbg !21
  %56 = fpext bfloat %48 to float, !dbg !21
  %57 = fpext bfloat %49 to float, !dbg !21
  %58 = fpext bfloat %50 to float, !dbg !21
  %59 = fpext bfloat %51 to float, !dbg !21
  %60 = fpext bfloat %52 to float, !dbg !21
  %61 = fpext bfloat %53 to float, !dbg !21
  %62 = fpext bfloat %54 to float, !dbg !21
  %63 = select i1 %37, float %55, float 0.000000e+00, !dbg !22
  %64 = select i1 %37, float %56, float 0.000000e+00, !dbg !22
  %65 = select i1 %37, float %57, float 0.000000e+00, !dbg !22
  %66 = select i1 %37, float %58, float 0.000000e+00, !dbg !22
  %67 = select i1 %37, float %59, float 0.000000e+00, !dbg !22
  %68 = select i1 %37, float %60, float 0.000000e+00, !dbg !22
  %69 = select i1 %37, float %61, float 0.000000e+00, !dbg !22
  %70 = select i1 %37, float %62, float 0.000000e+00, !dbg !22
  %71 = select i1 %37, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %72 = fsub float %64, %63, !dbg !24
  %73 = select i1 %37, float 2.000000e+00, float 0.000000e+00, !dbg !29
  %74 = fcmp oeq float %73, 0.000000e+00, !dbg !30
  %75 = tail call float @llvm.nvvm.div.full(float %71, float %73), !dbg !31
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !32
  %77 = fmul float %76, %72, !dbg !33
  %78 = fadd float %63, %77, !dbg !34
  %79 = fmul float %72, %72, !dbg !35
  %80 = fmul float %71, %79, !dbg !36
  %81 = fmul float %76, %80, !dbg !37
  %82 = fadd float %81, 0.000000e+00, !dbg !38
  %83 = fsub float %65, %78, !dbg !24
  %84 = select i1 %37, float 3.000000e+00, float 0.000000e+00, !dbg !29
  %85 = fcmp oeq float %84, 0.000000e+00, !dbg !30
  %86 = tail call float @llvm.nvvm.div.full(float %71, float %84), !dbg !31
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !32
  %88 = fmul float %87, %83, !dbg !33
  %89 = fadd float %78, %88, !dbg !34
  %90 = fmul float %83, %83, !dbg !35
  %91 = fmul float %73, %90, !dbg !36
  %92 = fmul float %87, %91, !dbg !37
  %93 = fadd float %82, %92, !dbg !38
  %94 = fsub float %66, %89, !dbg !24
  %95 = select i1 %37, float 4.000000e+00, float 0.000000e+00, !dbg !29
  %96 = fcmp oeq float %95, 0.000000e+00, !dbg !30
  %97 = tail call float @llvm.nvvm.div.full(float %71, float %95), !dbg !31
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !32
  %99 = fmul float %98, %94, !dbg !33
  %100 = fadd float %89, %99, !dbg !34
  %101 = fmul float %94, %94, !dbg !35
  %102 = fmul float %84, %101, !dbg !36
  %103 = fmul float %98, %102, !dbg !37
  %104 = fadd float %93, %103, !dbg !38
  %105 = fsub float %67, %100, !dbg !24
  %106 = select i1 %37, float 5.000000e+00, float 0.000000e+00, !dbg !29
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !30
  %108 = tail call float @llvm.nvvm.div.full(float %71, float %106), !dbg !31
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !32
  %110 = fmul float %109, %105, !dbg !33
  %111 = fadd float %100, %110, !dbg !34
  %112 = fmul float %105, %105, !dbg !35
  %113 = fmul float %95, %112, !dbg !36
  %114 = fmul float %109, %113, !dbg !37
  %115 = fadd float %104, %114, !dbg !38
  %116 = fsub float %68, %111, !dbg !24
  %117 = select i1 %37, float 6.000000e+00, float 0.000000e+00, !dbg !29
  %118 = fcmp oeq float %117, 0.000000e+00, !dbg !30
  %119 = tail call float @llvm.nvvm.div.full(float %71, float %117), !dbg !31
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !32
  %121 = fmul float %120, %116, !dbg !33
  %122 = fadd float %111, %121, !dbg !34
  %123 = fmul float %116, %116, !dbg !35
  %124 = fmul float %106, %123, !dbg !36
  %125 = fmul float %120, %124, !dbg !37
  %126 = fadd float %115, %125, !dbg !38
  %127 = fsub float %69, %122, !dbg !24
  %128 = select i1 %37, float 7.000000e+00, float 0.000000e+00, !dbg !29
  %129 = fcmp oeq float %128, 0.000000e+00, !dbg !30
  %130 = tail call float @llvm.nvvm.div.full(float %71, float %128), !dbg !31
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !32
  %132 = fmul float %131, %127, !dbg !33
  %133 = fadd float %122, %132, !dbg !34
  %134 = fmul float %127, %127, !dbg !35
  %135 = fmul float %117, %134, !dbg !36
  %136 = fmul float %131, %135, !dbg !37
  %137 = fadd float %126, %136, !dbg !38
  %138 = fsub float %70, %133, !dbg !24
  %139 = select i1 %37, float 8.000000e+00, float 0.000000e+00, !dbg !29
  %140 = fcmp oeq float %139, 0.000000e+00, !dbg !30
  %141 = tail call float @llvm.nvvm.div.full(float %71, float %139), !dbg !31
  %142 = select i1 %140, float 0.000000e+00, float %141, !dbg !32
  %143 = fmul float %142, %138, !dbg !33
  %144 = fadd float %133, %143, !dbg !34
  %145 = fmul float %138, %138, !dbg !35
  %146 = fmul float %128, %145, !dbg !36
  %147 = fmul float %142, %146, !dbg !37
  %148 = fadd float %137, %147, !dbg !38
  %149 = bitcast float %144 to i32, !dbg !39
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 16, i32 31), !dbg !39
  %151 = bitcast i32 %150 to float, !dbg !39
  %152 = bitcast float %148 to i32, !dbg !39
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !39
  %154 = bitcast i32 %153 to float, !dbg !39
  %155 = bitcast float %139 to i32, !dbg !39
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !39
  %157 = bitcast i32 %156 to float, !dbg !39
  %158 = fsub float %151, %144, !dbg !24
  %159 = fadd float %139, %157, !dbg !29
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !30
  %161 = tail call float @llvm.nvvm.div.full(float %157, float %159), !dbg !31
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !32
  %163 = fmul float %162, %158, !dbg !33
  %164 = fadd float %144, %163, !dbg !34
  %165 = fadd float %148, %154, !dbg !40
  %166 = fmul float %158, %158, !dbg !35
  %167 = fmul float %139, %166, !dbg !36
  %168 = fmul float %162, %167, !dbg !37
  %169 = fadd float %165, %168, !dbg !38
  %170 = bitcast float %164 to i32, !dbg !39
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !39
  %172 = bitcast i32 %171 to float, !dbg !39
  %173 = bitcast float %169 to i32, !dbg !39
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !39
  %175 = bitcast i32 %174 to float, !dbg !39
  %176 = bitcast float %159 to i32, !dbg !39
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !39
  %178 = bitcast i32 %177 to float, !dbg !39
  %179 = fsub float %172, %164, !dbg !24
  %180 = fadd float %159, %178, !dbg !29
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !30
  %182 = tail call float @llvm.nvvm.div.full(float %178, float %180), !dbg !31
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !32
  %184 = fmul float %183, %179, !dbg !33
  %185 = fadd float %164, %184, !dbg !34
  %186 = fadd float %169, %175, !dbg !40
  %187 = fmul float %179, %179, !dbg !35
  %188 = fmul float %159, %187, !dbg !36
  %189 = fmul float %183, %188, !dbg !37
  %190 = fadd float %186, %189, !dbg !38
  %191 = bitcast float %185 to i32, !dbg !39
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !39
  %193 = bitcast i32 %192 to float, !dbg !39
  %194 = bitcast float %190 to i32, !dbg !39
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !39
  %196 = bitcast i32 %195 to float, !dbg !39
  %197 = bitcast float %180 to i32, !dbg !39
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !39
  %199 = bitcast i32 %198 to float, !dbg !39
  %200 = fsub float %193, %185, !dbg !24
  %201 = fadd float %180, %199, !dbg !29
  %202 = fcmp oeq float %201, 0.000000e+00, !dbg !30
  %203 = tail call float @llvm.nvvm.div.full(float %199, float %201), !dbg !31
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !32
  %205 = fmul float %204, %200, !dbg !33
  %206 = fadd float %185, %205, !dbg !34
  %207 = fadd float %190, %196, !dbg !40
  %208 = fmul float %200, %200, !dbg !35
  %209 = fmul float %180, %208, !dbg !36
  %210 = fmul float %204, %209, !dbg !37
  %211 = fadd float %207, %210, !dbg !38
  %212 = bitcast float %206 to i32, !dbg !39
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !39
  %214 = bitcast i32 %213 to float, !dbg !39
  %215 = bitcast float %211 to i32, !dbg !39
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !39
  %217 = bitcast i32 %216 to float, !dbg !39
  %218 = bitcast float %201 to i32, !dbg !39
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !39
  %220 = bitcast i32 %219 to float, !dbg !39
  %221 = fsub float %214, %206, !dbg !24
  %222 = fadd float %201, %220, !dbg !29
  %223 = fcmp oeq float %222, 0.000000e+00, !dbg !30
  %224 = tail call float @llvm.nvvm.div.full(float %220, float %222), !dbg !31
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !32
  %226 = fmul float %225, %221, !dbg !33
  %227 = fadd float %206, %226, !dbg !34
  %228 = fadd float %211, %217, !dbg !40
  %229 = fmul float %221, %221, !dbg !35
  %230 = fmul float %201, %229, !dbg !36
  %231 = fmul float %225, %230, !dbg !37
  %232 = fadd float %228, %231, !dbg !38
  %233 = bitcast float %227 to i32, !dbg !39
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 1, i32 31), !dbg !39
  %235 = bitcast i32 %234 to float, !dbg !39
  %236 = bitcast float %232 to i32, !dbg !39
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !39
  %238 = bitcast i32 %237 to float, !dbg !39
  %239 = bitcast float %222 to i32, !dbg !39
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !39
  %241 = bitcast i32 %240 to float, !dbg !39
  %242 = fsub float %235, %227, !dbg !24
  %243 = fadd float %222, %241, !dbg !29
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !30
  %245 = tail call float @llvm.nvvm.div.full(float %241, float %243), !dbg !31
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !32
  %247 = fmul float %246, %242, !dbg !33
  %248 = fadd float %227, %247, !dbg !34
  %249 = fadd float %232, %238, !dbg !40
  %250 = fmul float %242, %242, !dbg !35
  %251 = fmul float %222, %250, !dbg !36
  %252 = fmul float %246, %251, !dbg !37
  %253 = fadd float %249, %252, !dbg !38
  %254 = and i32 %22, 15, !dbg !39
  %255 = icmp eq i32 %24, 0, !dbg !39
  %256 = lshr exact i32 %23, 5, !dbg !39
  %257 = or disjoint i32 %256, %254, !dbg !39
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !39
  %259 = bitcast float %248 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 %255) #5, !dbg !39
  %260 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %257, !dbg !39
  %261 = bitcast float %253 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 %255) #5, !dbg !39
  %262 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %257, !dbg !39
  %263 = bitcast float %243 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 %255) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %264 = icmp slt i32 %21, 32, !dbg !39
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !39
  %266 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %265, i1 %264) #5, !dbg !39
  %267 = bitcast i32 %266 to float, !dbg !39
  %268 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !39
  %269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %268, i1 %264) #5, !dbg !39
  %270 = bitcast i32 %269 to float, !dbg !39
  %271 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !39
  %272 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %271, i1 %264) #5, !dbg !39
  %273 = bitcast i32 %272 to float, !dbg !39
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !39
  %275 = bitcast i32 %274 to float, !dbg !39
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !39
  %277 = bitcast i32 %276 to float, !dbg !39
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !39
  %279 = bitcast i32 %278 to float, !dbg !39
  %280 = fsub float %275, %267, !dbg !24
  %281 = fadd float %273, %279, !dbg !29
  %282 = fcmp oeq float %281, 0.000000e+00, !dbg !30
  %283 = tail call float @llvm.nvvm.div.full(float %279, float %281), !dbg !31
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !32
  %285 = fmul float %280, %284, !dbg !33
  %286 = fadd float %285, %267, !dbg !34
  %287 = fadd float %270, %277, !dbg !40
  %288 = fmul float %280, %280, !dbg !35
  %289 = fmul float %288, %273, !dbg !36
  %290 = fmul float %289, %284, !dbg !37
  %291 = fadd float %287, %290, !dbg !38
  %292 = bitcast float %286 to i32, !dbg !39
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !39
  %294 = bitcast i32 %293 to float, !dbg !39
  %295 = bitcast float %291 to i32, !dbg !39
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !39
  %297 = bitcast i32 %296 to float, !dbg !39
  %298 = bitcast float %281 to i32, !dbg !39
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !39
  %300 = bitcast i32 %299 to float, !dbg !39
  %301 = fsub float %294, %286, !dbg !24
  %302 = fadd float %281, %300, !dbg !29
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !30
  %304 = tail call float @llvm.nvvm.div.full(float %300, float %302), !dbg !31
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !32
  %306 = fmul float %301, %305, !dbg !33
  %307 = fadd float %286, %306, !dbg !34
  %308 = fadd float %291, %297, !dbg !40
  %309 = fmul float %301, %301, !dbg !35
  %310 = fmul float %281, %309, !dbg !36
  %311 = fmul float %305, %310, !dbg !37
  %312 = fadd float %308, %311, !dbg !38
  %313 = bitcast float %307 to i32, !dbg !39
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !39
  %315 = bitcast i32 %314 to float, !dbg !39
  %316 = bitcast float %312 to i32, !dbg !39
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 2, i32 31), !dbg !39
  %318 = bitcast i32 %317 to float, !dbg !39
  %319 = bitcast float %302 to i32, !dbg !39
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 2, i32 31), !dbg !39
  %321 = bitcast i32 %320 to float, !dbg !39
  %322 = fsub float %315, %307, !dbg !24
  %323 = fadd float %302, %321, !dbg !29
  %324 = fcmp oeq float %323, 0.000000e+00, !dbg !30
  %325 = tail call float @llvm.nvvm.div.full(float %321, float %323), !dbg !31
  %326 = select i1 %324, float 0.000000e+00, float %325, !dbg !32
  %327 = fmul float %322, %326, !dbg !33
  %328 = fadd float %307, %327, !dbg !34
  %329 = fadd float %312, %318, !dbg !40
  %330 = fmul float %322, %322, !dbg !35
  %331 = fmul float %302, %330, !dbg !36
  %332 = fmul float %326, %331, !dbg !37
  %333 = fadd float %329, %332, !dbg !38
  %334 = bitcast float %328 to i32, !dbg !39
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !39
  %336 = bitcast i32 %335 to float, !dbg !39
  %337 = bitcast float %333 to i32, !dbg !39
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !39
  %339 = bitcast i32 %338 to float, !dbg !39
  %340 = bitcast float %323 to i32, !dbg !39
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !39
  %342 = bitcast i32 %341 to float, !dbg !39
  %343 = fsub float %336, %328, !dbg !24
  %344 = fadd float %323, %342, !dbg !29
  %345 = fcmp oeq float %344, 0.000000e+00, !dbg !30
  %346 = tail call float @llvm.nvvm.div.full(float %342, float %344), !dbg !31
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !32
  %348 = fmul float %343, %347, !dbg !33
  %349 = fadd float %328, %348, !dbg !34
  %350 = fadd float %333, %339, !dbg !40
  %351 = fmul float %343, %343, !dbg !35
  %352 = fmul float %323, %351, !dbg !36
  %353 = fmul float %347, %352, !dbg !37
  %354 = fadd float %350, %353, !dbg !38
  %355 = and i32 %21, 15, !dbg !39
  %356 = icmp eq i32 %355, 0, !dbg !39
  %357 = and i1 %264, %356, !dbg !39
  %358 = bitcast float %349 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %358, i1 %357) #5, !dbg !39
  %359 = bitcast float %354 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %359, i1 %357) #5, !dbg !39
  %360 = bitcast float %344 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %360, i1 %357) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !39
  %362 = load float, ptr addrspace(3) %361, align 16, !dbg !39
  %363 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %256, !dbg !39
  %364 = load float, ptr addrspace(3) %363, align 16, !dbg !39
  %365 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %37) #5, !dbg !41
  %366 = add nuw nsw i32 %28, 3072, !dbg !42
  %367 = zext nneg i32 %366 to i64, !dbg !43
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !43
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %368, i1 %31) #5, !dbg !44
  %370 = getelementptr bfloat, ptr addrspace(1) %2, i64 %367, !dbg !45
  %371 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %370, i1 %31) #5, !dbg !46
  %372 = zext nneg i32 %28 to i64, !dbg !47
  %373 = getelementptr float, ptr addrspace(1) %1, i64 %372, !dbg !47
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %373, i1 %31) #5, !dbg !48
  %375 = getelementptr bfloat, ptr addrspace(1) %2, i64 %372, !dbg !49
  %376 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %375, i1 %31) #5, !dbg !50
  %377 = tail call float @llvm.nvvm.div.full(float %364, float 3.072000e+03), !dbg !51
  %378 = fadd float %377, 0x3EB0C6F7A0000000, !dbg !52
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i43 = icmp eq i32 %386, 0, !dbg !53
  br i1 %.not.i43, label %389, label %387, !dbg !53

387:                                              ; preds = %__nv_rsqrtf.exit
  %388 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %378), !dbg !53
  br label %__nv_rsqrtf.exit45, !dbg !53

389:                                              ; preds = %__nv_rsqrtf.exit
  %390 = tail call float @llvm.nvvm.rsqrt.approx.f(float %378), !dbg !53
  br label %__nv_rsqrtf.exit45, !dbg !53

__nv_rsqrtf.exit45:                               ; preds = %387, %389
  %.0.i44 = phi float [ %388, %387 ], [ %390, %389 ], !dbg !53
  %391 = extractvalue { i32, i32, i32, i32 } %365, 3, !dbg !41
  %392 = bitcast i32 %391 to <2 x bfloat>, !dbg !41
  %393 = extractelement <2 x bfloat> %392, i64 1, !dbg !41
  %394 = fpext bfloat %393 to float, !dbg !54
  %395 = fsub float %394, %362, !dbg !55
  %396 = extractelement <2 x bfloat> %392, i64 0, !dbg !41
  %397 = fpext bfloat %396 to float, !dbg !54
  %398 = fsub float %397, %362, !dbg !55
  %399 = extractvalue { i32, i32, i32, i32 } %365, 2, !dbg !41
  %400 = bitcast i32 %399 to <2 x bfloat>, !dbg !41
  %401 = extractelement <2 x bfloat> %400, i64 1, !dbg !41
  %402 = fpext bfloat %401 to float, !dbg !54
  %403 = fsub float %402, %362, !dbg !55
  %404 = extractelement <2 x bfloat> %400, i64 0, !dbg !41
  %405 = fpext bfloat %404 to float, !dbg !54
  %406 = fsub float %405, %362, !dbg !55
  %407 = extractvalue { i32, i32, i32, i32 } %365, 1, !dbg !41
  %408 = bitcast i32 %407 to <2 x bfloat>, !dbg !41
  %409 = extractelement <2 x bfloat> %408, i64 1, !dbg !41
  %410 = fpext bfloat %409 to float, !dbg !54
  %411 = fsub float %410, %362, !dbg !55
  %412 = extractelement <2 x bfloat> %408, i64 0, !dbg !41
  %413 = fpext bfloat %412 to float, !dbg !54
  %414 = fsub float %413, %362, !dbg !55
  %415 = extractvalue { i32, i32, i32, i32 } %365, 0, !dbg !41
  %416 = bitcast i32 %415 to <2 x bfloat>, !dbg !41
  %417 = extractelement <2 x bfloat> %416, i64 1, !dbg !41
  %418 = fpext bfloat %417 to float, !dbg !54
  %419 = fsub float %418, %362, !dbg !55
  %420 = extractelement <2 x bfloat> %416, i64 0, !dbg !41
  %421 = fpext bfloat %420 to float, !dbg !54
  %422 = fsub float %421, %362, !dbg !55
  %423 = extractvalue { i32, i32 } %376, 1, !dbg !50
  %424 = bitcast i32 %423 to <2 x bfloat>, !dbg !50
  %425 = extractelement <2 x bfloat> %424, i64 1, !dbg !50
  %426 = fpext bfloat %425 to float, !dbg !56
  %427 = extractelement <2 x bfloat> %424, i64 0, !dbg !50
  %428 = fpext bfloat %427 to float, !dbg !56
  %429 = extractvalue { i32, i32 } %376, 0, !dbg !50
  %430 = bitcast i32 %429 to <2 x bfloat>, !dbg !50
  %431 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !48
  %432 = bitcast i32 %431 to float, !dbg !48
  %433 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !48
  %434 = bitcast i32 %433 to float, !dbg !48
  %435 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !48
  %436 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !48
  %437 = extractvalue { i32, i32 } %371, 1, !dbg !46
  %438 = bitcast i32 %437 to <2 x bfloat>, !dbg !46
  %439 = extractelement <2 x bfloat> %438, i64 1, !dbg !46
  %440 = fpext bfloat %439 to float, !dbg !57
  %441 = extractelement <2 x bfloat> %438, i64 0, !dbg !46
  %442 = fpext bfloat %441 to float, !dbg !57
  %443 = extractvalue { i32, i32 } %371, 0, !dbg !46
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !46
  %445 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !44
  %446 = bitcast i32 %445 to float, !dbg !44
  %447 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !44
  %448 = bitcast i32 %447 to float, !dbg !44
  %449 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !44
  %450 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !44
  %451 = icmp slt i32 %20, 4112, !dbg !13
  %452 = and i1 %451, %31, !dbg !19
  %453 = and i32 %21, 1, !dbg !11
  %454 = or disjoint i32 %20, %453, !dbg !12
  %455 = icmp slt i32 %454, 4112, !dbg !13
  %456 = fmul float %422, %.0.i44, !dbg !58
  %457 = fmul float %419, %.0.i44, !dbg !58
  %458 = fmul float %414, %.0.i44, !dbg !58
  %459 = fmul float %411, %.0.i44, !dbg !58
  %460 = fmul float %406, %.0.i44, !dbg !58
  %461 = fmul float %403, %.0.i44, !dbg !58
  %462 = fmul float %398, %.0.i44, !dbg !58
  %463 = fmul float %395, %.0.i44, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %464 = and i32 %29, 8184, !dbg !58
  %465 = lshr i32 %29, 8, !dbg !58
  %.idx = and i32 %465, 16, !dbg !58
  %466 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !58
  %467 = getelementptr float, ptr addrspace(3) %466, i32 %464, !dbg !58
  %468 = bitcast float %456 to i32, !dbg !58
  %469 = bitcast float %457 to i32, !dbg !58
  %470 = bitcast float %458 to i32, !dbg !58
  %471 = bitcast float %459 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %467, i32 %468, i32 %469, i32 %470, i32 %471, i1 true) #5, !dbg !58
  %472 = or disjoint i32 %464, 4, !dbg !58
  %473 = lshr i32 %29, 10, !dbg !58
  %474 = and i32 %473, 4, !dbg !58
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474, !dbg !58
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %472, !dbg !58
  %477 = bitcast float %460 to i32, !dbg !58
  %478 = bitcast float %461 to i32, !dbg !58
  %479 = bitcast float %462 to i32, !dbg !58
  %480 = bitcast float %463 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %476, i32 %477, i32 %478, i32 %479, i32 %480, i1 true) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %481 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %28, !dbg !58
  %482 = load float, ptr addrspace(3) %481, align 16, !dbg !58
  %483 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 4, !dbg !58
  %484 = load float, ptr addrspace(3) %483, align 4, !dbg !58
  %485 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 8, !dbg !58
  %486 = load float, ptr addrspace(3) %485, align 8, !dbg !58
  %487 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 12, !dbg !58
  %488 = load float, ptr addrspace(3) %487, align 4, !dbg !58
  %489 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 16400, !dbg !58
  %490 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 16408, !dbg !58
  %491 = load float, ptr addrspace(3) %490, align 8, !dbg !58
  %492 = getelementptr inbounds nuw i8, ptr addrspace(3) %481, i32 16412, !dbg !58
  %493 = load float, ptr addrspace(3) %492, align 4, !dbg !58
  %494 = fadd float %448, %442, !dbg !59
  %495 = fadd float %446, %440, !dbg !59
  %496 = fadd float %494, 1.000000e+00, !dbg !60
  %497 = fadd float %495, 1.000000e+00, !dbg !60
  %498 = fmul float %496, %486, !dbg !61
  %499 = fmul float %497, %488, !dbg !61
  %500 = fmul float %496, %491, !dbg !61
  %501 = fmul float %497, %493, !dbg !61
  %502 = fadd float %434, %428, !dbg !62
  %503 = fadd float %432, %426, !dbg !62
  %504 = fadd float %502, %498, !dbg !63
  %505 = fadd float %503, %499, !dbg !63
  %506 = fadd float %502, %500, !dbg !63
  %507 = fadd float %503, %501, !dbg !63
  %508 = select i1 %452, float %504, float 0x7FF0000000000000, !dbg !64
  %509 = select i1 %452, float %505, float 0x7FF0000000000000, !dbg !64
  %510 = select i1 %452, float %506, float 0x7FF0000000000000, !dbg !64
  %511 = select i1 %452, float %507, float 0x7FF0000000000000, !dbg !64
  %512 = select i1 %452, float %504, float 0xFFF0000000000000, !dbg !65
  %513 = select i1 %452, float %505, float 0xFFF0000000000000, !dbg !65
  %514 = fpext <2 x bfloat> %430 to <2 x float>, !dbg !56
  %515 = insertelement <2 x i32> poison, i32 %436, i64 0, !dbg !48
  %516 = insertelement <2 x i32> %515, i32 %435, i64 1, !dbg !48
  %517 = bitcast <2 x i32> %516 to <2 x float>, !dbg !48
  %518 = fpext <2 x bfloat> %444 to <2 x float>, !dbg !57
  %519 = insertelement <2 x i32> poison, i32 %450, i64 0, !dbg !44
  %520 = insertelement <2 x i32> %519, i32 %449, i64 1, !dbg !44
  %521 = bitcast <2 x i32> %520 to <2 x float>, !dbg !44
  %522 = load <2 x float>, ptr addrspace(3) %489, align 16, !dbg !58
  %523 = fadd <2 x float> %521, %518, !dbg !59
  %524 = fadd <2 x float> %523, splat (float 1.000000e+00), !dbg !60
  %525 = extractelement <2 x float> %524, i64 0, !dbg !61
  %526 = fmul float %525, %482, !dbg !61
  %527 = extractelement <2 x float> %524, i64 1, !dbg !61
  %528 = fmul float %527, %484, !dbg !61
  %529 = fmul <2 x float> %524, %522, !dbg !61
  %530 = fadd <2 x float> %517, %514, !dbg !62
  %531 = extractelement <2 x float> %530, i64 0, !dbg !63
  %532 = fadd float %531, %526, !dbg !63
  %533 = extractelement <2 x float> %530, i64 1, !dbg !63
  %534 = fadd float %533, %528, !dbg !63
  %535 = fadd <2 x float> %530, %529, !dbg !63
  %536 = select i1 %452, float %532, float 0x7FF0000000000000, !dbg !64
  %537 = select i1 %452, float %534, float 0x7FF0000000000000, !dbg !64
  %538 = extractelement <2 x float> %535, i64 0, !dbg !64
  %539 = select i1 %452, float %538, float 0x7FF0000000000000, !dbg !64
  %540 = extractelement <2 x float> %535, i64 1, !dbg !64
  %541 = select i1 %452, float %540, float 0x7FF0000000000000, !dbg !64
  %542 = select i1 %452, float %532, float 0xFFF0000000000000, !dbg !65
  %543 = select i1 %452, float %534, float 0xFFF0000000000000, !dbg !65
  %544 = insertelement <2 x i1> poison, i1 %452, i64 0, !dbg !65
  %545 = shufflevector <2 x i1> %544, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !65
  %546 = select <2 x i1> %545, <2 x float> %535, <2 x float> splat (float 0xFFF0000000000000), !dbg !65
  %547 = select i1 %452, float %506, float 0xFFF0000000000000, !dbg !65
  %548 = select i1 %452, float %507, float 0xFFF0000000000000, !dbg !65
  %549 = getelementptr bfloat, ptr addrspace(1) %3, i64 %35, !dbg !66
  %550 = fptrunc float %532 to bfloat, !dbg !67
  %551 = fptrunc float %534 to bfloat, !dbg !67
  %552 = fptrunc float %504 to bfloat, !dbg !67
  %553 = fptrunc float %505 to bfloat, !dbg !67
  %554 = fptrunc float %538 to bfloat, !dbg !67
  %555 = fptrunc float %540 to bfloat, !dbg !67
  %556 = fptrunc float %506 to bfloat, !dbg !67
  %557 = fptrunc float %507 to bfloat, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %558 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %28, !dbg !67
  %559 = bitcast bfloat %550 to i16, !dbg !67
  %560 = bitcast bfloat %551 to i16, !dbg !67
  %561 = bitcast bfloat %552 to i16, !dbg !67
  %562 = bitcast bfloat %553 to i16, !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %558, i16 %559, i16 %560, i16 %561, i16 %562, i1 true) #5, !dbg !67
  %563 = getelementptr inbounds nuw i8, ptr addrspace(3) %558, i32 8208, !dbg !67
  %564 = bitcast bfloat %554 to i16, !dbg !67
  %565 = bitcast bfloat %555 to i16, !dbg !67
  %566 = bitcast bfloat %556 to i16, !dbg !67
  %567 = bitcast bfloat %557 to i16, !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) nonnull %563, i16 %564, i16 %565, i16 %566, i16 %567, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %568 = getelementptr bfloat, ptr addrspace(3) %466, i32 %464, !dbg !67
  %.extract = load i32, ptr addrspace(3) %568, align 16, !dbg !67
  %569 = getelementptr inbounds nuw i8, ptr addrspace(3) %568, i32 4, !dbg !67
  %.extract47 = load i32, ptr addrspace(3) %569, align 4, !dbg !67
  %570 = getelementptr inbounds nuw i8, ptr addrspace(3) %568, i32 8, !dbg !67
  %.extract49 = load i32, ptr addrspace(3) %570, align 8, !dbg !67
  %571 = getelementptr inbounds nuw i8, ptr addrspace(3) %568, i32 12, !dbg !67
  %.extract51 = load i32, ptr addrspace(3) %571, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract47, i32 %.extract49, i32 %.extract51, ptr addrspace(1) %549, i1 %37) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %572 = fcmp olt float %536, %537, !dbg !70
  %573 = fcmp uno float %536, 0.000000e+00, !dbg !71
  %574 = or i1 %572, %573, !dbg !72
  %575 = select i1 %574, float %536, float %537, !dbg !73
  %576 = fcmp olt float %575, %508, !dbg !70
  %577 = fcmp uno float %575, 0.000000e+00, !dbg !71
  %578 = or i1 %576, %577, !dbg !72
  %579 = select i1 %578, float %575, float %508, !dbg !73
  %580 = fcmp olt float %579, %509, !dbg !70
  %581 = fcmp uno float %579, 0.000000e+00, !dbg !71
  %582 = or i1 %580, %581, !dbg !72
  %583 = select i1 %582, float %579, float %509, !dbg !73
  %584 = fcmp olt float %539, %541, !dbg !70
  %585 = fcmp uno float %539, 0.000000e+00, !dbg !71
  %586 = or i1 %584, %585, !dbg !72
  %587 = select i1 %586, float %539, float %541, !dbg !73
  %588 = fcmp olt float %587, %510, !dbg !70
  %589 = fcmp uno float %587, 0.000000e+00, !dbg !71
  %590 = or i1 %588, %589, !dbg !72
  %591 = select i1 %590, float %587, float %510, !dbg !73
  %592 = fcmp olt float %591, %511, !dbg !70
  %593 = fcmp uno float %591, 0.000000e+00, !dbg !71
  %594 = or i1 %592, %593, !dbg !72
  %595 = select i1 %594, float %591, float %511, !dbg !73
  %596 = bitcast float %583 to i32, !dbg !68
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 16, i32 31), !dbg !68
  %598 = bitcast i32 %597 to float, !dbg !68
  %599 = fcmp olt float %583, %598, !dbg !70
  %600 = fcmp uno float %583, 0.000000e+00, !dbg !71
  %601 = or i1 %599, %600, !dbg !72
  %602 = select i1 %601, float %583, float %598, !dbg !73
  %603 = bitcast float %602 to i32, !dbg !68
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 8, i32 31), !dbg !68
  %605 = bitcast i32 %604 to float, !dbg !68
  %606 = fcmp olt float %602, %605, !dbg !70
  %607 = fcmp uno float %602, 0.000000e+00, !dbg !71
  %608 = or i1 %606, %607, !dbg !72
  %609 = select i1 %608, float %602, float %605, !dbg !73
  %610 = bitcast float %609 to i32, !dbg !68
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 4, i32 31), !dbg !68
  %612 = bitcast i32 %611 to float, !dbg !68
  %613 = fcmp olt float %609, %612, !dbg !70
  %614 = fcmp uno float %609, 0.000000e+00, !dbg !71
  %615 = or i1 %613, %614, !dbg !72
  %616 = select i1 %615, float %609, float %612, !dbg !73
  %617 = bitcast float %616 to i32, !dbg !68
  %618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %617, i32 2, i32 31), !dbg !68
  %619 = bitcast i32 %618 to float, !dbg !68
  %620 = fcmp olt float %616, %619, !dbg !70
  %621 = fcmp uno float %616, 0.000000e+00, !dbg !71
  %622 = or i1 %620, %621, !dbg !72
  %623 = select i1 %622, float %616, float %619, !dbg !73
  %624 = bitcast float %623 to i32, !dbg !68
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 1, i32 31), !dbg !68
  %626 = bitcast i32 %625 to float, !dbg !68
  %627 = fcmp olt float %623, %626, !dbg !70
  %628 = fcmp uno float %623, 0.000000e+00, !dbg !71
  %629 = or i1 %627, %628, !dbg !72
  %630 = bitcast float %595 to i32, !dbg !68
  %631 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %630, i32 16, i32 31), !dbg !68
  %632 = bitcast i32 %631 to float, !dbg !68
  %633 = fcmp olt float %595, %632, !dbg !70
  %634 = fcmp uno float %595, 0.000000e+00, !dbg !71
  %635 = or i1 %634, %633, !dbg !72
  %636 = select i1 %635, float %595, float %632, !dbg !73
  %637 = bitcast float %636 to i32, !dbg !68
  %638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %637, i32 8, i32 31), !dbg !68
  %639 = bitcast i32 %638 to float, !dbg !68
  %640 = fcmp olt float %636, %639, !dbg !70
  %641 = fcmp uno float %636, 0.000000e+00, !dbg !71
  %642 = or i1 %640, %641, !dbg !72
  %643 = select i1 %642, float %636, float %639, !dbg !73
  %644 = bitcast float %643 to i32, !dbg !68
  %645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %644, i32 4, i32 31), !dbg !68
  %646 = bitcast i32 %645 to float, !dbg !68
  %647 = fcmp olt float %643, %646, !dbg !70
  %648 = fcmp uno float %643, 0.000000e+00, !dbg !71
  %649 = or i1 %647, %648, !dbg !72
  %650 = select i1 %649, float %643, float %646, !dbg !73
  %651 = bitcast float %650 to i32, !dbg !68
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 2, i32 31), !dbg !68
  %653 = bitcast i32 %652 to float, !dbg !68
  %654 = fcmp olt float %650, %653, !dbg !70
  %655 = fcmp uno float %650, 0.000000e+00, !dbg !71
  %656 = or i1 %654, %655, !dbg !72
  %657 = select i1 %656, float %650, float %653, !dbg !73
  %658 = bitcast float %657 to i32, !dbg !68
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %658, i32 1, i32 31), !dbg !68
  %660 = bitcast i32 %659 to float, !dbg !68
  %661 = fcmp olt float %657, %660, !dbg !70
  %662 = fcmp uno float %657, 0.000000e+00, !dbg !71
  %663 = or i1 %661, %662, !dbg !72
  %664 = and i32 %22, 31, !dbg !68
  %665 = getelementptr float, ptr addrspace(3) @global_smem, i32 %664, !dbg !68
  %666 = select i1 %629, i32 %624, i32 %625, !dbg !73
  %667 = insertelement <1 x i32> poison, i32 %666, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %667, i1 %255) #5, !dbg !68
  %668 = or disjoint i32 %664, 32, !dbg !68
  %669 = getelementptr float, ptr addrspace(3) @global_smem, i32 %668, !dbg !68
  %670 = select i1 %663, i32 %658, i32 %659, !dbg !73
  %671 = insertelement <1 x i32> poison, i32 %670, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %669, <1 x i32> %671, i1 %255) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %672 = icmp slt i32 %21, 64, !dbg !68
  %673 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %265, i1 %672) #5, !dbg !68
  %674 = bitcast i32 %673 to float, !dbg !68
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 16, i32 31), !dbg !68
  %676 = bitcast i32 %675 to float, !dbg !68
  %677 = fcmp olt float %674, %676, !dbg !70
  %678 = fcmp uno float %674, 0.000000e+00, !dbg !71
  %679 = or i1 %678, %677, !dbg !72
  %680 = select i1 %679, float %674, float %676, !dbg !73
  %681 = bitcast float %680 to i32, !dbg !68
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 8, i32 31), !dbg !68
  %683 = bitcast i32 %682 to float, !dbg !68
  %684 = fcmp olt float %680, %683, !dbg !70
  %685 = fcmp uno float %680, 0.000000e+00, !dbg !71
  %686 = or i1 %684, %685, !dbg !72
  %687 = select i1 %686, float %680, float %683, !dbg !73
  %688 = bitcast float %687 to i32, !dbg !68
  %689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %688, i32 4, i32 31), !dbg !68
  %690 = bitcast i32 %689 to float, !dbg !68
  %691 = fcmp olt float %687, %690, !dbg !70
  %692 = fcmp uno float %687, 0.000000e+00, !dbg !71
  %693 = or i1 %691, %692, !dbg !72
  %694 = select i1 %693, float %687, float %690, !dbg !73
  %695 = bitcast float %694 to i32, !dbg !68
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 2, i32 31), !dbg !68
  %697 = bitcast i32 %696 to float, !dbg !68
  %698 = fcmp olt float %694, %697, !dbg !70
  %699 = fcmp uno float %694, 0.000000e+00, !dbg !71
  %700 = or i1 %698, %699, !dbg !72
  %701 = select i1 %700, float %694, float %697, !dbg !73
  %702 = bitcast float %701 to i32, !dbg !68
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 1, i32 31), !dbg !68
  %704 = bitcast i32 %703 to float, !dbg !68
  %705 = fcmp olt float %701, %704, !dbg !70
  %706 = fcmp uno float %701, 0.000000e+00, !dbg !71
  %707 = or i1 %705, %706, !dbg !72
  %708 = and i1 %672, %255, !dbg !68
  %709 = select i1 %707, i32 %702, i32 %703, !dbg !73
  %710 = insertelement <1 x i32> poison, i32 %709, i64 0, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %710, i1 %708) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %711 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %712 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %713 = bitcast float %711 to i32, !dbg !74
  %714 = bitcast float %712 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %713, i32 %714, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %715 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %453, !dbg !74
  %716 = load float, ptr addrspace(3) %715, align 4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %717 = fcmp ogt float %542, %543, !dbg !77
  %718 = fcmp uno float %542, 0.000000e+00, !dbg !78
  %719 = or i1 %717, %718, !dbg !79
  %720 = select i1 %719, float %542, float %543, !dbg !80
  %721 = fcmp ogt float %720, %512, !dbg !77
  %722 = fcmp uno float %720, 0.000000e+00, !dbg !78
  %723 = or i1 %721, %722, !dbg !79
  %724 = select i1 %723, float %720, float %512, !dbg !80
  %725 = fcmp ogt float %724, %513, !dbg !77
  %726 = fcmp uno float %724, 0.000000e+00, !dbg !78
  %727 = or i1 %725, %726, !dbg !79
  %728 = select i1 %727, float %724, float %513, !dbg !80
  %729 = extractelement <2 x float> %546, i64 0, !dbg !80
  %730 = extractelement <2 x float> %546, i64 1, !dbg !80
  %731 = fcmp ogt float %729, %730, !dbg !77
  %732 = fcmp uno float %729, 0.000000e+00, !dbg !78
  %733 = or i1 %731, %732, !dbg !79
  %734 = select i1 %733, float %729, float %730, !dbg !80
  %735 = fcmp ogt float %734, %547, !dbg !77
  %736 = fcmp uno float %734, 0.000000e+00, !dbg !78
  %737 = or i1 %735, %736, !dbg !79
  %738 = select i1 %737, float %734, float %547, !dbg !80
  %739 = fcmp ogt float %738, %548, !dbg !77
  %740 = fcmp uno float %738, 0.000000e+00, !dbg !78
  %741 = or i1 %739, %740, !dbg !79
  %742 = select i1 %741, float %738, float %548, !dbg !80
  %743 = bitcast float %728 to i32, !dbg !75
  %744 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %743, i32 16, i32 31), !dbg !75
  %745 = bitcast i32 %744 to float, !dbg !75
  %746 = fcmp ogt float %728, %745, !dbg !77
  %747 = fcmp uno float %728, 0.000000e+00, !dbg !78
  %748 = or i1 %747, %746, !dbg !79
  %749 = select i1 %748, float %728, float %745, !dbg !80
  %750 = bitcast float %749 to i32, !dbg !75
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %750, i32 8, i32 31), !dbg !75
  %752 = bitcast i32 %751 to float, !dbg !75
  %753 = fcmp ogt float %749, %752, !dbg !77
  %754 = fcmp uno float %749, 0.000000e+00, !dbg !78
  %755 = or i1 %753, %754, !dbg !79
  %756 = select i1 %755, float %749, float %752, !dbg !80
  %757 = bitcast float %756 to i32, !dbg !75
  %758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %757, i32 4, i32 31), !dbg !75
  %759 = bitcast i32 %758 to float, !dbg !75
  %760 = fcmp ogt float %756, %759, !dbg !77
  %761 = fcmp uno float %756, 0.000000e+00, !dbg !78
  %762 = or i1 %760, %761, !dbg !79
  %763 = select i1 %762, float %756, float %759, !dbg !80
  %764 = bitcast float %763 to i32, !dbg !75
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %764, i32 2, i32 31), !dbg !75
  %766 = bitcast i32 %765 to float, !dbg !75
  %767 = fcmp ogt float %763, %766, !dbg !77
  %768 = fcmp uno float %763, 0.000000e+00, !dbg !78
  %769 = or i1 %767, %768, !dbg !79
  %770 = select i1 %769, float %763, float %766, !dbg !80
  %771 = bitcast float %770 to i32, !dbg !75
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 1, i32 31), !dbg !75
  %773 = bitcast i32 %772 to float, !dbg !75
  %774 = fcmp ogt float %770, %773, !dbg !77
  %775 = fcmp uno float %770, 0.000000e+00, !dbg !78
  %776 = or i1 %774, %775, !dbg !79
  %777 = bitcast float %742 to i32, !dbg !75
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 16, i32 31), !dbg !75
  %779 = bitcast i32 %778 to float, !dbg !75
  %780 = fcmp ogt float %742, %779, !dbg !77
  %781 = fcmp uno float %742, 0.000000e+00, !dbg !78
  %782 = or i1 %781, %780, !dbg !79
  %783 = select i1 %782, float %742, float %779, !dbg !80
  %784 = bitcast float %783 to i32, !dbg !75
  %785 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %784, i32 8, i32 31), !dbg !75
  %786 = bitcast i32 %785 to float, !dbg !75
  %787 = fcmp ogt float %783, %786, !dbg !77
  %788 = fcmp uno float %783, 0.000000e+00, !dbg !78
  %789 = or i1 %787, %788, !dbg !79
  %790 = select i1 %789, float %783, float %786, !dbg !80
  %791 = bitcast float %790 to i32, !dbg !75
  %792 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %791, i32 4, i32 31), !dbg !75
  %793 = bitcast i32 %792 to float, !dbg !75
  %794 = fcmp ogt float %790, %793, !dbg !77
  %795 = fcmp uno float %790, 0.000000e+00, !dbg !78
  %796 = or i1 %794, %795, !dbg !79
  %797 = select i1 %796, float %790, float %793, !dbg !80
  %798 = bitcast float %797 to i32, !dbg !75
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 2, i32 31), !dbg !75
  %800 = bitcast i32 %799 to float, !dbg !75
  %801 = fcmp ogt float %797, %800, !dbg !77
  %802 = fcmp uno float %797, 0.000000e+00, !dbg !78
  %803 = or i1 %801, %802, !dbg !79
  %804 = select i1 %803, float %797, float %800, !dbg !80
  %805 = bitcast float %804 to i32, !dbg !75
  %806 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %805, i32 1, i32 31), !dbg !75
  %807 = bitcast i32 %806 to float, !dbg !75
  %808 = fcmp ogt float %804, %807, !dbg !77
  %809 = fcmp uno float %804, 0.000000e+00, !dbg !78
  %810 = or i1 %808, %809, !dbg !79
  %811 = select i1 %776, i32 %771, i32 %772, !dbg !80
  %812 = insertelement <1 x i32> poison, i32 %811, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %812, i1 %255) #5, !dbg !75
  %813 = select i1 %810, i32 %805, i32 %806, !dbg !80
  %814 = insertelement <1 x i32> poison, i32 %813, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %669, <1 x i32> %814, i1 %255) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %815 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %265, i1 %672) #5, !dbg !75
  %816 = bitcast i32 %815 to float, !dbg !75
  %817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 16, i32 31), !dbg !75
  %818 = bitcast i32 %817 to float, !dbg !75
  %819 = fcmp ogt float %816, %818, !dbg !77
  %820 = fcmp uno float %816, 0.000000e+00, !dbg !78
  %821 = or i1 %820, %819, !dbg !79
  %822 = select i1 %821, float %816, float %818, !dbg !80
  %823 = bitcast float %822 to i32, !dbg !75
  %824 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %823, i32 8, i32 31), !dbg !75
  %825 = bitcast i32 %824 to float, !dbg !75
  %826 = fcmp ogt float %822, %825, !dbg !77
  %827 = fcmp uno float %822, 0.000000e+00, !dbg !78
  %828 = or i1 %826, %827, !dbg !79
  %829 = select i1 %828, float %822, float %825, !dbg !80
  %830 = bitcast float %829 to i32, !dbg !75
  %831 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %830, i32 4, i32 31), !dbg !75
  %832 = bitcast i32 %831 to float, !dbg !75
  %833 = fcmp ogt float %829, %832, !dbg !77
  %834 = fcmp uno float %829, 0.000000e+00, !dbg !78
  %835 = or i1 %833, %834, !dbg !79
  %836 = select i1 %835, float %829, float %832, !dbg !80
  %837 = bitcast float %836 to i32, !dbg !75
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 2, i32 31), !dbg !75
  %839 = bitcast i32 %838 to float, !dbg !75
  %840 = fcmp ogt float %836, %839, !dbg !77
  %841 = fcmp uno float %836, 0.000000e+00, !dbg !78
  %842 = or i1 %840, %841, !dbg !79
  %843 = select i1 %842, float %836, float %839, !dbg !80
  %844 = bitcast float %843 to i32, !dbg !75
  %845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %844, i32 1, i32 31), !dbg !75
  %846 = bitcast i32 %845 to float, !dbg !75
  %847 = fcmp ogt float %843, %846, !dbg !77
  %848 = fcmp uno float %843, 0.000000e+00, !dbg !78
  %849 = or i1 %847, %848, !dbg !79
  %850 = select i1 %849, i32 %844, i32 %845, !dbg !80
  %851 = insertelement <1 x i32> poison, i32 %850, i64 0, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %851, i1 %708) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %852 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !75
  %853 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %854 = bitcast float %852 to i32, !dbg !81
  %855 = bitcast float %853 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %854, i32 %855, i1 true) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %856 = load float, ptr addrspace(3) %715, align 4, !dbg !81
  %857 = sext i32 %454 to i64, !dbg !82
  %858 = getelementptr bfloat, ptr addrspace(1) %4, i64 %857, !dbg !82
  %859 = fptrunc float %716 to bfloat, !dbg !74
  %860 = and i32 %21, 1022, !dbg !74
  %861 = icmp eq i32 %860, 0, !dbg !74
  %862 = bitcast bfloat %859 to i16, !dbg !74
  %863 = and i1 %861, %455, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %858, i1 %863) #5, !dbg !74
  %864 = getelementptr bfloat, ptr addrspace(1) %5, i64 %857, !dbg !83
  %865 = fptrunc float %856 to bfloat, !dbg !81
  %866 = bitcast bfloat %865 to i16, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %866, ptr addrspace(1) %864, i1 %863) #5, !dbg !81
  %867 = getelementptr bfloat, ptr addrspace(1) %6, i64 %857, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %867, i1 %863) #5, !dbg !85
  %868 = getelementptr bfloat, ptr addrspace(1) %7, i64 %857, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %866, ptr addrspace(1) %868, i1 %863) #5, !dbg !87
  %869 = getelementptr bfloat, ptr addrspace(1) %8, i64 %857, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %869, i1 %863) #5, !dbg !89
  %870 = getelementptr bfloat, ptr addrspace(1) %9, i64 %857, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %866, ptr addrspace(1) %870, i1 %863) #5, !dbg !91
  %871 = getelementptr bfloat, ptr addrspace(1) %10, i64 %857, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %862, ptr addrspace(1) %871, i1 %863) #5, !dbg !93
  %872 = getelementptr bfloat, ptr addrspace(1) %11, i64 %857, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %866, ptr addrspace(1) %872, i1 %863) #5, !dbg !95
  %873 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %549, i1 %37) #5, !dbg !96
  %874 = extractvalue { i32, i32, i32, i32 } %873, 0, !dbg !96
  %875 = bitcast i32 %874 to <2 x bfloat>, !dbg !96
  %876 = extractvalue { i32, i32, i32, i32 } %873, 1, !dbg !96
  %877 = bitcast i32 %876 to <2 x bfloat>, !dbg !96
  %878 = extractvalue { i32, i32, i32, i32 } %873, 2, !dbg !96
  %879 = bitcast i32 %878 to <2 x bfloat>, !dbg !96
  %880 = extractvalue { i32, i32, i32, i32 } %873, 3, !dbg !96
  %881 = bitcast i32 %880 to <2 x bfloat>, !dbg !96
  %882 = extractelement <2 x bfloat> %875, i64 0, !dbg !96
  %883 = extractelement <2 x bfloat> %875, i64 1, !dbg !96
  %884 = extractelement <2 x bfloat> %877, i64 0, !dbg !96
  %885 = extractelement <2 x bfloat> %877, i64 1, !dbg !96
  %886 = extractelement <2 x bfloat> %879, i64 0, !dbg !96
  %887 = extractelement <2 x bfloat> %879, i64 1, !dbg !96
  %888 = extractelement <2 x bfloat> %881, i64 0, !dbg !96
  %889 = extractelement <2 x bfloat> %881, i64 1, !dbg !96
  %890 = fpext bfloat %882 to float, !dbg !97
  %891 = fpext bfloat %883 to float, !dbg !97
  %892 = fpext bfloat %884 to float, !dbg !97
  %893 = fpext bfloat %885 to float, !dbg !97
  %894 = fpext bfloat %886 to float, !dbg !97
  %895 = fpext bfloat %887 to float, !dbg !97
  %896 = fpext bfloat %888 to float, !dbg !97
  %897 = fpext bfloat %889 to float, !dbg !97
  %.inv = fcmp oge float %711, 0.000000e+00, !dbg !98
  %898 = select i1 %.inv, float 0.000000e+00, float %711, !dbg !98
  %.inv22 = fcmp oge float %712, 0.000000e+00, !dbg !98
  %899 = select i1 %.inv22, float 0.000000e+00, float %712, !dbg !98
  %900 = fsub float 0.000000e+00, %898, !dbg !100
  %901 = fsub float 0.000000e+00, %899, !dbg !100
  %.inv23 = fcmp ole float %852, 0.000000e+00, !dbg !101
  %902 = select i1 %.inv23, float 0.000000e+00, float %852, !dbg !101
  %.inv24 = fcmp ole float %853, 0.000000e+00, !dbg !101
  %903 = select i1 %.inv24, float 0.000000e+00, float %853, !dbg !101
  %904 = fcmp ogt float %900, %902, !dbg !103
  %905 = fcmp ogt float %901, %903, !dbg !103
  %906 = fcmp uno float %900, 0.000000e+00, !dbg !105
  %907 = fcmp uno float %901, 0.000000e+00, !dbg !105
  %908 = or i1 %906, %904, !dbg !106
  %909 = or i1 %907, %905, !dbg !106
  %910 = select i1 %908, float %900, float %902, !dbg !107
  %911 = select i1 %909, float %901, float %903, !dbg !107
  %912 = fmul float %910, 0x3F80204080000000, !dbg !108
  %913 = fmul float %911, 0x3F80204080000000, !dbg !108
  %914 = fcmp ogt float %912, 0x3EE4F8B580000000, !dbg !109
  %915 = fcmp ogt float %913, 0x3EE4F8B580000000, !dbg !109
  %916 = fcmp uno float %912, 0.000000e+00, !dbg !111
  %917 = fcmp uno float %913, 0.000000e+00, !dbg !111
  %918 = or i1 %914, %916, !dbg !112
  %919 = or i1 %915, %917, !dbg !112
  %920 = select i1 %918, float %912, float 0x3EE4F8B580000000, !dbg !113
  %921 = select i1 %919, float %913, float 0x3EE4F8B580000000, !dbg !113
  %922 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %920), !dbg !114
  %923 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %921), !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %924 = bitcast float %922 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %924, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %924, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %924, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %924, i1 true) #5, !dbg !115
  %925 = bitcast float %923 to <1 x i32>, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %925, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %925, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %925, i1 true) #5, !dbg !115
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %925, i1 true) #5, !dbg !115
  tail call void @llvm.nvvm.barrier0(), !dbg !115
  %926 = lshr exact i32 %23, 6, !dbg !115
  %927 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %926, !dbg !115
  %928 = load float, ptr addrspace(3) %927, align 8, !dbg !115
  %929 = fmul float %928, %890, !dbg !115
  %930 = fmul float %928, %891, !dbg !115
  %931 = fmul float %928, %892, !dbg !115
  %932 = fmul float %928, %893, !dbg !115
  %933 = fmul float %928, %894, !dbg !115
  %934 = fmul float %928, %895, !dbg !115
  %935 = fmul float %928, %896, !dbg !115
  %936 = fmul float %928, %897, !dbg !115
  %937 = tail call float @llvm.nvvm.round.f(float %929) #5, !dbg !116
  %938 = tail call float @llvm.nvvm.round.f(float %930) #5, !dbg !116
  %939 = tail call float @llvm.nvvm.round.f(float %931) #5, !dbg !116
  %940 = tail call float @llvm.nvvm.round.f(float %932) #5, !dbg !116
  %941 = tail call float @llvm.nvvm.round.f(float %933) #5, !dbg !116
  %942 = tail call float @llvm.nvvm.round.f(float %934) #5, !dbg !116
  %943 = tail call float @llvm.nvvm.round.f(float %935) #5, !dbg !116
  %944 = tail call float @llvm.nvvm.round.f(float %936) #5, !dbg !116
  %945 = insertelement <4 x float> poison, float %937, i64 0, !dbg !117
  %946 = insertelement <4 x float> %945, float %938, i64 1, !dbg !117
  %947 = insertelement <4 x float> %946, float %939, i64 2, !dbg !117
  %948 = insertelement <4 x float> %947, float %940, i64 3, !dbg !117
  %949 = fcmp ogt <4 x float> %948, splat (float -1.270000e+02), !dbg !117
  %950 = fcmp uno <4 x float> %948, zeroinitializer, !dbg !119
  %951 = or <4 x i1> %949, %950, !dbg !120
  %952 = select <4 x i1> %951, <4 x float> %948, <4 x float> splat (float -1.270000e+02), !dbg !121
  %953 = fcmp olt <4 x float> %952, splat (float 1.270000e+02), !dbg !122
  %954 = fcmp uno <4 x float> %952, zeroinitializer, !dbg !124
  %955 = or <4 x i1> %953, %954, !dbg !125
  %956 = fptosi <4 x float> %952 to <4 x i8>, !dbg !126
  %957 = select <4 x i1> %955, <4 x i8> %956, <4 x i8> splat (i8 127), !dbg !127
  %958 = insertelement <4 x float> poison, float %941, i64 0, !dbg !117
  %959 = insertelement <4 x float> %958, float %942, i64 1, !dbg !117
  %960 = insertelement <4 x float> %959, float %943, i64 2, !dbg !117
  %961 = insertelement <4 x float> %960, float %944, i64 3, !dbg !117
  %962 = fcmp ogt <4 x float> %961, splat (float -1.270000e+02), !dbg !117
  %963 = fcmp uno <4 x float> %961, zeroinitializer, !dbg !119
  %964 = or <4 x i1> %962, %963, !dbg !120
  %965 = select <4 x i1> %964, <4 x float> %961, <4 x float> splat (float -1.270000e+02), !dbg !121
  %966 = fcmp olt <4 x float> %965, splat (float 1.270000e+02), !dbg !122
  %967 = fcmp uno <4 x float> %965, zeroinitializer, !dbg !124
  %968 = or <4 x i1> %966, %967, !dbg !125
  %969 = fptosi <4 x float> %965 to <4 x i8>, !dbg !126
  %970 = select <4 x i1> %968, <4 x i8> %969, <4 x i8> splat (i8 127), !dbg !127
  %971 = getelementptr i8, ptr addrspace(1) %12, i64 %35, !dbg !128
  %972 = bitcast <4 x i8> %957 to i32, !dbg !129
  %973 = bitcast <4 x i8> %970 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %972, i32 %973, ptr addrspace(1) %971, i1 %37) #5, !dbg !129
  %974 = getelementptr i8, ptr addrspace(1) %13, i64 %35, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %972, i32 %973, ptr addrspace(1) %974, i1 %37) #5, !dbg !131
  %975 = getelementptr i8, ptr addrspace(1) %14, i64 %35, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %972, i32 %973, ptr addrspace(1) %975, i1 %37) #5, !dbg !133
  %976 = getelementptr i8, ptr addrspace(1) %15, i64 %35, !dbg !134
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %972, i32 %973, ptr addrspace(1) %976, i1 %37) #5, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 34, column: 29, scope: !6)
!16 = !DILocation(line: 38, column: 46, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 61, scope: !6)
!20 = !DILocation(line: 38, column: 51, scope: !6)
!21 = !DILocation(line: 38, column: 112, scope: !6)
!22 = !DILocation(line: 44, column: 62, scope: !6)
!23 = !DILocation(line: 46, column: 66, scope: !6)
!24 = !DILocation(line: 217, column: 21, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 47, column: 79, scope: !6)
!29 = !DILocation(line: 218, column: 28, scope: !25, inlinedAt: !28)
!30 = !DILocation(line: 219, column: 39, scope: !25, inlinedAt: !28)
!31 = !DILocation(line: 219, column: 60, scope: !25, inlinedAt: !28)
!32 = !DILocation(line: 219, column: 49, scope: !25, inlinedAt: !28)
!33 = !DILocation(line: 221, column: 25, scope: !25, inlinedAt: !28)
!34 = !DILocation(line: 221, column: 17, scope: !25, inlinedAt: !28)
!35 = !DILocation(line: 222, column: 30, scope: !25, inlinedAt: !28)
!36 = !DILocation(line: 222, column: 38, scope: !25, inlinedAt: !28)
!37 = !DILocation(line: 222, column: 49, scope: !25, inlinedAt: !28)
!38 = !DILocation(line: 222, column: 22, scope: !25, inlinedAt: !28)
!39 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !28)
!40 = !DILocation(line: 222, column: 15, scope: !25, inlinedAt: !28)
!41 = !DILocation(line: 59, column: 51, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 60, column: 35, scope: !6)
!44 = !DILocation(line: 60, column: 49, scope: !6)
!45 = !DILocation(line: 61, column: 35, scope: !6)
!46 = !DILocation(line: 61, column: 49, scope: !6)
!47 = !DILocation(line: 62, column: 35, scope: !6)
!48 = !DILocation(line: 62, column: 42, scope: !6)
!49 = !DILocation(line: 63, column: 35, scope: !6)
!50 = !DILocation(line: 63, column: 42, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 59, column: 113, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 63, column: 95, scope: !6)
!57 = !DILocation(line: 61, column: 102, scope: !6)
!58 = !DILocation(line: 71, column: 24, scope: !6)
!59 = !DILocation(line: 74, column: 24, scope: !6)
!60 = !DILocation(line: 76, column: 24, scope: !6)
!61 = !DILocation(line: 77, column: 24, scope: !6)
!62 = !DILocation(line: 79, column: 24, scope: !6)
!63 = !DILocation(line: 80, column: 24, scope: !6)
!64 = !DILocation(line: 83, column: 50, scope: !6)
!65 = !DILocation(line: 85, column: 50, scope: !6)
!66 = !DILocation(line: 86, column: 29, scope: !6)
!67 = !DILocation(line: 86, column: 53, scope: !6)
!68 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !69)
!69 = !DILocation(line: 87, column: 40, scope: !6)
!70 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !69)
!71 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !69)
!72 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !69)
!73 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !69)
!74 = !DILocation(line: 89, column: 37, scope: !6)
!75 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 88, column: 40, scope: !6)
!77 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!81 = !DILocation(line: 90, column: 37, scope: !6)
!82 = !DILocation(line: 89, column: 25, scope: !6)
!83 = !DILocation(line: 90, column: 25, scope: !6)
!84 = !DILocation(line: 91, column: 25, scope: !6)
!85 = !DILocation(line: 91, column: 37, scope: !6)
!86 = !DILocation(line: 92, column: 25, scope: !6)
!87 = !DILocation(line: 92, column: 37, scope: !6)
!88 = !DILocation(line: 93, column: 25, scope: !6)
!89 = !DILocation(line: 93, column: 37, scope: !6)
!90 = !DILocation(line: 94, column: 25, scope: !6)
!91 = !DILocation(line: 94, column: 37, scope: !6)
!92 = !DILocation(line: 95, column: 25, scope: !6)
!93 = !DILocation(line: 95, column: 37, scope: !6)
!94 = !DILocation(line: 96, column: 26, scope: !6)
!95 = !DILocation(line: 96, column: 38, scope: !6)
!96 = !DILocation(line: 103, column: 53, scope: !6)
!97 = !DILocation(line: 103, column: 115, scope: !6)
!98 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !99)
!99 = !DILocation(line: 105, column: 46, scope: !6)
!100 = !DILocation(line: 106, column: 17, scope: !6)
!101 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !102)
!102 = !DILocation(line: 107, column: 46, scope: !6)
!103 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 108, column: 46, scope: !6)
!105 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !104)
!107 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !104)
!108 = !DILocation(line: 110, column: 24, scope: !6)
!109 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !110)
!110 = !DILocation(line: 113, column: 46, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !110)
!112 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !110)
!113 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !110)
!114 = !DILocation(line: 116, column: 25, scope: !6)
!115 = !DILocation(line: 119, column: 24, scope: !6)
!116 = !DILocation(line: 120, column: 36, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !118)
!118 = !DILocation(line: 123, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !118)
!122 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !123)
!123 = !DILocation(line: 125, column: 46, scope: !6)
!124 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !123)
!125 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !123)
!126 = !DILocation(line: 127, column: 25, scope: !6)
!127 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !123)
!128 = !DILocation(line: 128, column: 30, scope: !6)
!129 = !DILocation(line: 128, column: 54, scope: !6)
!130 = !DILocation(line: 129, column: 30, scope: !6)
!131 = !DILocation(line: 129, column: 54, scope: !6)
!132 = !DILocation(line: 130, column: 30, scope: !6)
!133 = !DILocation(line: 130, column: 54, scope: !6)
!134 = !DILocation(line: 131, column: 30, scope: !6)
!135 = !DILocation(line: 131, column: 54, scope: !6)
!136 = !DILocation(line: 97, column: 4, scope: !6)
