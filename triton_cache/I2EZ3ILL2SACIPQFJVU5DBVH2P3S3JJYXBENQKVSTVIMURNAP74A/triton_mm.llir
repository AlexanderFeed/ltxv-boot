; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 256, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 4, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 256, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %18, 8, !dbg !19
  %20 = and i32 %18, 16, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 2, !dbg !19
  %23 = and i32 %18, 31, !dbg !19
  %24 = or disjoint i32 %23, %22, !dbg !19
  %25 = or disjoint i32 %24, 64, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 24, !dbg !19
  %28 = or disjoint i32 %14, %24, !dbg !20
  %29 = or disjoint i32 %14, %25, !dbg !20
  %30 = shl nsw i32 %13, 7, !dbg !21
  %31 = or disjoint i32 %30, %24, !dbg !22
  %32 = or disjoint i32 %30, %25, !dbg !22
  %33 = srem i32 %28, 512, !dbg !23
  %34 = srem i32 %29, 512, !dbg !23
  %.lhs.trunc = trunc i32 %31 to i16, !dbg !24
  %35 = srem i16 %.lhs.trunc, 4096, !dbg !24
  %.sext = sext i16 %35 to i32, !dbg !24
  %.lhs.trunc99 = trunc i32 %32 to i16, !dbg !24
  %36 = srem i16 %.lhs.trunc99, 4096, !dbg !24
  %.sext100 = sext i16 %36 to i32, !dbg !24
  %37 = shl nsw i32 %33, 12, !dbg !25
  %38 = shl nsw i32 %34, 12, !dbg !25
  %39 = shl nsw i32 %.sext, 12, !dbg !26
  %40 = shl nsw i32 %.sext100, 12, !dbg !26
  %41 = or disjoint i32 %37, %27, !dbg !27
  %42 = or disjoint i32 %38, %27, !dbg !27
  %43 = sext i32 %41 to i64, !dbg !28
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = sext i32 %42 to i64, !dbg !28
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = xor i32 %26, %15, !dbg !29
  %48 = and i32 %47, 24, !dbg !29
  %49 = shl nuw nsw i32 %24, 5, !dbg !29
  %50 = or disjoint i32 %49, %48, !dbg !29
  %51 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %50, !dbg !29
  %52 = and i32 %18, 31, !dbg !29
  %53 = or disjoint i32 %52, %22, !dbg !29
  %54 = shl nuw nsw i32 %53, 5, !dbg !29
  %55 = or disjoint i32 %54, %48, !dbg !29
  %56 = or disjoint i32 %55, 2048, !dbg !29
  %57 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %56, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %51, ptr addrspace(1) %44, i32 16) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %46, i32 16) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %58 = or disjoint i32 %39, %27, !dbg !30
  %59 = or disjoint i32 %40, %27, !dbg !30
  %60 = sext i32 %58 to i64, !dbg !31
  %61 = getelementptr bfloat, ptr addrspace(1) %1, i64 %60, !dbg !31
  %62 = sext i32 %59 to i64, !dbg !31
  %63 = getelementptr bfloat, ptr addrspace(1) %1, i64 %62, !dbg !31
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %50, !dbg !32
  %65 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %56, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %61, i32 16) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %65, ptr addrspace(1) %63, i32 16) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %invariant.op = or disjoint i32 %19, 32, !dbg !33
  %invariant.op165 = or disjoint i32 %19, 64, !dbg !33
  %invariant.op167 = or disjoint i32 %19, 96, !dbg !33
  %66 = shl i32 %15, 2
  %67 = and i32 %66, 8
  %68 = and i32 %66, 16
  %69 = and i32 %66, 24
  %70 = and i32 %15, 7
  %71 = and i32 %15, 15
  %72 = lshr exact i32 %17, 1
  %73 = xor i32 %69, %72
  %74 = lshr exact i32 %21, 3
  %75 = or disjoint i32 %74, %71
  %76 = shl nuw nsw i32 %75, 5
  %77 = or disjoint i32 %73, %76
  %78 = or disjoint i32 %67, 16
  %79 = or disjoint i32 %72, %68
  %80 = xor i32 %79, %78
  %81 = or disjoint i32 %80, %76
  %82 = or disjoint i32 %70, 32
  %83 = or disjoint i32 %16, %82
  %84 = or disjoint i32 %83, %74
  %85 = shl nuw nsw i32 %84, 5
  %86 = or disjoint i32 %85, %73
  %87 = or disjoint i32 %80, %85
  %88 = or disjoint i32 %70, 64
  %89 = or disjoint i32 %16, %88
  %90 = or disjoint i32 %89, %74
  %91 = shl nuw nsw i32 %90, 5
  %92 = or disjoint i32 %91, %73
  %93 = or disjoint i32 %80, %91
  %94 = or disjoint i32 %70, 96
  %95 = or disjoint i32 %16, %94
  %96 = or disjoint i32 %95, %74
  %97 = shl nuw nsw i32 %96, 5
  %98 = or disjoint i32 %97, %73
  %99 = or disjoint i32 %80, %97
  %100 = xor i32 %66, %15
  %101 = and i32 %100, 24
  %102 = or disjoint i32 %70, %19
  %103 = or disjoint i32 %102, %20
  %104 = shl nuw nsw i32 %103, 5
  %105 = or disjoint i32 %104, %101
  %.reass = or disjoint i32 %70, %invariant.op
  %106 = or disjoint i32 %.reass, %20
  %107 = shl nuw nsw i32 %106, 5
  %108 = or disjoint i32 %107, %101
  %.reass166 = or disjoint i32 %70, %invariant.op165
  %109 = or disjoint i32 %.reass166, %20
  %110 = shl nuw nsw i32 %109, 5
  %111 = or disjoint i32 %110, %101
  %.reass168 = or disjoint i32 %70, %invariant.op167
  %112 = or disjoint i32 %.reass168, %20
  %113 = shl nuw nsw i32 %112, 5
  %114 = or disjoint i32 %113, %101
  %115 = zext nneg i32 %27 to i64, !dbg !33
  %116 = sext i32 %40 to i64, !dbg !33
  %117 = sext i32 %39 to i64, !dbg !33
  %118 = sext i32 %38 to i64, !dbg !33
  %119 = sext i32 %37 to i64, !dbg !33
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %119, !dbg !33
  %invariant.gep295 = getelementptr bfloat, ptr addrspace(1) %0, i64 %118, !dbg !33
  %invariant.gep297 = getelementptr bfloat, ptr addrspace(1) %1, i64 %117, !dbg !33
  %invariant.gep299 = getelementptr bfloat, ptr addrspace(1) %1, i64 %116, !dbg !33
  br label %120, !dbg !33

120:                                              ; preds = %4, %120
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %120 ]
  %121 = phi i32 [ -1, %4 ], [ %188, %120 ]
  %122 = phi float [ 0.000000e+00, %4 ], [ %357, %120 ]
  %123 = phi float [ 0.000000e+00, %4 ], [ %358, %120 ]
  %124 = phi float [ 0.000000e+00, %4 ], [ %359, %120 ]
  %125 = phi float [ 0.000000e+00, %4 ], [ %360, %120 ]
  %126 = phi float [ 0.000000e+00, %4 ], [ %362, %120 ]
  %127 = phi float [ 0.000000e+00, %4 ], [ %363, %120 ]
  %128 = phi float [ 0.000000e+00, %4 ], [ %364, %120 ]
  %129 = phi float [ 0.000000e+00, %4 ], [ %365, %120 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %367, %120 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %368, %120 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %369, %120 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %370, %120 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %372, %120 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %373, %120 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %374, %120 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %375, %120 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %377, %120 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %378, %120 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %379, %120 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %380, %120 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %382, %120 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %383, %120 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %384, %120 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %385, %120 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %387, %120 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %388, %120 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %389, %120 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %390, %120 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %392, %120 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %393, %120 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %394, %120 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %395, %120 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %397, %120 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %398, %120 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %399, %120 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %400, %120 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %402, %120 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %403, %120 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %404, %120 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %405, %120 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %407, %120 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %408, %120 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %409, %120 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %410, %120 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %412, %120 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %413, %120 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %414, %120 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %415, %120 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %417, %120 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %418, %120 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %419, %120 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %420, %120 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %422, %120 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %423, %120 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %424, %120 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %425, %120 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %427, %120 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %428, %120 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %429, %120 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %430, %120 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %432, %120 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %433, %120 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %434, %120 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %435, %120 ]
  %.not98 = icmp eq i64 %indvars.iv, 127, !dbg !33
  %186 = add i32 %121, 1, !dbg !33
  %187 = icmp ugt i32 %121, 2147483646, !dbg !33
  %188 = select i1 %187, i32 %186, i32 0, !dbg !33
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %189 = shl i32 %188, 12, !dbg !29
  %190 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %189, !dbg !29
  %191 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %77, !dbg !29
  %192 = ptrtoint ptr addrspace(3) %191 to i32, !dbg !29
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %192) #1, !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !29
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %81, !dbg !29
  %199 = ptrtoint ptr addrspace(3) %198 to i32, !dbg !29
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %199) #1, !dbg !29
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !29
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !29
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %86, !dbg !29
  %206 = ptrtoint ptr addrspace(3) %205 to i32, !dbg !29
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %206) #1, !dbg !29
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !29
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !29
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !29
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !29
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %87, !dbg !29
  %213 = ptrtoint ptr addrspace(3) %212 to i32, !dbg !29
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %213) #1, !dbg !29
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !29
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !29
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !29
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !29
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %92, !dbg !29
  %220 = ptrtoint ptr addrspace(3) %219 to i32, !dbg !29
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %220) #1, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !29
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !29
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !29
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !29
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %93, !dbg !29
  %227 = ptrtoint ptr addrspace(3) %226 to i32, !dbg !29
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %227) #1, !dbg !29
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !29
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !29
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !29
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !29
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %98, !dbg !29
  %234 = ptrtoint ptr addrspace(3) %233 to i32, !dbg !29
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %234) #1, !dbg !29
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !29
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !29
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !29
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !29
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %190, i32 %99, !dbg !29
  %241 = ptrtoint ptr addrspace(3) %240 to i32, !dbg !29
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %241) #1, !dbg !29
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !29
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !29
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !29
  %247 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %189, !dbg !32
  %248 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %247, i32 %105, !dbg !32
  %249 = ptrtoint ptr addrspace(3) %248 to i32, !dbg !32
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %249) #1, !dbg !32
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !32
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %247, i32 %108, !dbg !32
  %256 = ptrtoint ptr addrspace(3) %255 to i32, !dbg !32
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %256) #1, !dbg !32
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !32
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !32
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !32
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !32
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %247, i32 %111, !dbg !32
  %263 = ptrtoint ptr addrspace(3) %262 to i32, !dbg !32
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %263) #1, !dbg !32
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !32
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !32
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !32
  %269 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %247, i32 %114, !dbg !32
  %270 = ptrtoint ptr addrspace(3) %269 to i32, !dbg !32
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %270) #1, !dbg !32
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !32
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !32
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !32
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !32
  %276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %122, float %123, float %124, float %125, i32 %194, i32 %195, i32 %196, i32 %197, i32 %251, i32 %252) #1, !dbg !34
  %277 = extractvalue { float, float, float, float } %276, 0, !dbg !34
  %278 = extractvalue { float, float, float, float } %276, 1, !dbg !34
  %279 = extractvalue { float, float, float, float } %276, 2, !dbg !34
  %280 = extractvalue { float, float, float, float } %276, 3, !dbg !34
  %281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %126, float %127, float %128, float %129, i32 %194, i32 %195, i32 %196, i32 %197, i32 %258, i32 %259) #1, !dbg !34
  %282 = extractvalue { float, float, float, float } %281, 0, !dbg !34
  %283 = extractvalue { float, float, float, float } %281, 1, !dbg !34
  %284 = extractvalue { float, float, float, float } %281, 2, !dbg !34
  %285 = extractvalue { float, float, float, float } %281, 3, !dbg !34
  %286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %130, float %131, float %132, float %133, i32 %194, i32 %195, i32 %196, i32 %197, i32 %265, i32 %266) #1, !dbg !34
  %287 = extractvalue { float, float, float, float } %286, 0, !dbg !34
  %288 = extractvalue { float, float, float, float } %286, 1, !dbg !34
  %289 = extractvalue { float, float, float, float } %286, 2, !dbg !34
  %290 = extractvalue { float, float, float, float } %286, 3, !dbg !34
  %291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %134, float %135, float %136, float %137, i32 %194, i32 %195, i32 %196, i32 %197, i32 %272, i32 %273) #1, !dbg !34
  %292 = extractvalue { float, float, float, float } %291, 0, !dbg !34
  %293 = extractvalue { float, float, float, float } %291, 1, !dbg !34
  %294 = extractvalue { float, float, float, float } %291, 2, !dbg !34
  %295 = extractvalue { float, float, float, float } %291, 3, !dbg !34
  %296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %138, float %139, float %140, float %141, i32 %208, i32 %209, i32 %210, i32 %211, i32 %251, i32 %252) #1, !dbg !34
  %297 = extractvalue { float, float, float, float } %296, 0, !dbg !34
  %298 = extractvalue { float, float, float, float } %296, 1, !dbg !34
  %299 = extractvalue { float, float, float, float } %296, 2, !dbg !34
  %300 = extractvalue { float, float, float, float } %296, 3, !dbg !34
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %208, i32 %209, i32 %210, i32 %211, i32 %258, i32 %259) #1, !dbg !34
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !34
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !34
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !34
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !34
  %306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %146, float %147, float %148, float %149, i32 %208, i32 %209, i32 %210, i32 %211, i32 %265, i32 %266) #1, !dbg !34
  %307 = extractvalue { float, float, float, float } %306, 0, !dbg !34
  %308 = extractvalue { float, float, float, float } %306, 1, !dbg !34
  %309 = extractvalue { float, float, float, float } %306, 2, !dbg !34
  %310 = extractvalue { float, float, float, float } %306, 3, !dbg !34
  %311 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %208, i32 %209, i32 %210, i32 %211, i32 %272, i32 %273) #1, !dbg !34
  %312 = extractvalue { float, float, float, float } %311, 0, !dbg !34
  %313 = extractvalue { float, float, float, float } %311, 1, !dbg !34
  %314 = extractvalue { float, float, float, float } %311, 2, !dbg !34
  %315 = extractvalue { float, float, float, float } %311, 3, !dbg !34
  %316 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %154, float %155, float %156, float %157, i32 %222, i32 %223, i32 %224, i32 %225, i32 %251, i32 %252) #1, !dbg !34
  %317 = extractvalue { float, float, float, float } %316, 0, !dbg !34
  %318 = extractvalue { float, float, float, float } %316, 1, !dbg !34
  %319 = extractvalue { float, float, float, float } %316, 2, !dbg !34
  %320 = extractvalue { float, float, float, float } %316, 3, !dbg !34
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %158, float %159, float %160, float %161, i32 %222, i32 %223, i32 %224, i32 %225, i32 %258, i32 %259) #1, !dbg !34
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !34
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !34
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !34
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !34
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %162, float %163, float %164, float %165, i32 %222, i32 %223, i32 %224, i32 %225, i32 %265, i32 %266) #1, !dbg !34
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !34
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !34
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !34
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !34
  %331 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %166, float %167, float %168, float %169, i32 %222, i32 %223, i32 %224, i32 %225, i32 %272, i32 %273) #1, !dbg !34
  %332 = extractvalue { float, float, float, float } %331, 0, !dbg !34
  %333 = extractvalue { float, float, float, float } %331, 1, !dbg !34
  %334 = extractvalue { float, float, float, float } %331, 2, !dbg !34
  %335 = extractvalue { float, float, float, float } %331, 3, !dbg !34
  %336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %170, float %171, float %172, float %173, i32 %236, i32 %237, i32 %238, i32 %239, i32 %251, i32 %252) #1, !dbg !34
  %337 = extractvalue { float, float, float, float } %336, 0, !dbg !34
  %338 = extractvalue { float, float, float, float } %336, 1, !dbg !34
  %339 = extractvalue { float, float, float, float } %336, 2, !dbg !34
  %340 = extractvalue { float, float, float, float } %336, 3, !dbg !34
  %341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %236, i32 %237, i32 %238, i32 %239, i32 %258, i32 %259) #1, !dbg !34
  %342 = extractvalue { float, float, float, float } %341, 0, !dbg !34
  %343 = extractvalue { float, float, float, float } %341, 1, !dbg !34
  %344 = extractvalue { float, float, float, float } %341, 2, !dbg !34
  %345 = extractvalue { float, float, float, float } %341, 3, !dbg !34
  %346 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %236, i32 %237, i32 %238, i32 %239, i32 %265, i32 %266) #1, !dbg !34
  %347 = extractvalue { float, float, float, float } %346, 0, !dbg !34
  %348 = extractvalue { float, float, float, float } %346, 1, !dbg !34
  %349 = extractvalue { float, float, float, float } %346, 2, !dbg !34
  %350 = extractvalue { float, float, float, float } %346, 3, !dbg !34
  %351 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %236, i32 %237, i32 %238, i32 %239, i32 %272, i32 %273) #1, !dbg !34
  %352 = extractvalue { float, float, float, float } %351, 0, !dbg !34
  %353 = extractvalue { float, float, float, float } %351, 1, !dbg !34
  %354 = extractvalue { float, float, float, float } %351, 2, !dbg !34
  %355 = extractvalue { float, float, float, float } %351, 3, !dbg !34
  %356 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %277, float %278, float %279, float %280, i32 %201, i32 %202, i32 %203, i32 %204, i32 %253, i32 %254) #1, !dbg !34
  %357 = extractvalue { float, float, float, float } %356, 0, !dbg !34
  %358 = extractvalue { float, float, float, float } %356, 1, !dbg !34
  %359 = extractvalue { float, float, float, float } %356, 2, !dbg !34
  %360 = extractvalue { float, float, float, float } %356, 3, !dbg !34
  %361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %282, float %283, float %284, float %285, i32 %201, i32 %202, i32 %203, i32 %204, i32 %260, i32 %261) #1, !dbg !34
  %362 = extractvalue { float, float, float, float } %361, 0, !dbg !34
  %363 = extractvalue { float, float, float, float } %361, 1, !dbg !34
  %364 = extractvalue { float, float, float, float } %361, 2, !dbg !34
  %365 = extractvalue { float, float, float, float } %361, 3, !dbg !34
  %366 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %287, float %288, float %289, float %290, i32 %201, i32 %202, i32 %203, i32 %204, i32 %267, i32 %268) #1, !dbg !34
  %367 = extractvalue { float, float, float, float } %366, 0, !dbg !34
  %368 = extractvalue { float, float, float, float } %366, 1, !dbg !34
  %369 = extractvalue { float, float, float, float } %366, 2, !dbg !34
  %370 = extractvalue { float, float, float, float } %366, 3, !dbg !34
  %371 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %292, float %293, float %294, float %295, i32 %201, i32 %202, i32 %203, i32 %204, i32 %274, i32 %275) #1, !dbg !34
  %372 = extractvalue { float, float, float, float } %371, 0, !dbg !34
  %373 = extractvalue { float, float, float, float } %371, 1, !dbg !34
  %374 = extractvalue { float, float, float, float } %371, 2, !dbg !34
  %375 = extractvalue { float, float, float, float } %371, 3, !dbg !34
  %376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %297, float %298, float %299, float %300, i32 %215, i32 %216, i32 %217, i32 %218, i32 %253, i32 %254) #1, !dbg !34
  %377 = extractvalue { float, float, float, float } %376, 0, !dbg !34
  %378 = extractvalue { float, float, float, float } %376, 1, !dbg !34
  %379 = extractvalue { float, float, float, float } %376, 2, !dbg !34
  %380 = extractvalue { float, float, float, float } %376, 3, !dbg !34
  %381 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %215, i32 %216, i32 %217, i32 %218, i32 %260, i32 %261) #1, !dbg !34
  %382 = extractvalue { float, float, float, float } %381, 0, !dbg !34
  %383 = extractvalue { float, float, float, float } %381, 1, !dbg !34
  %384 = extractvalue { float, float, float, float } %381, 2, !dbg !34
  %385 = extractvalue { float, float, float, float } %381, 3, !dbg !34
  %386 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %307, float %308, float %309, float %310, i32 %215, i32 %216, i32 %217, i32 %218, i32 %267, i32 %268) #1, !dbg !34
  %387 = extractvalue { float, float, float, float } %386, 0, !dbg !34
  %388 = extractvalue { float, float, float, float } %386, 1, !dbg !34
  %389 = extractvalue { float, float, float, float } %386, 2, !dbg !34
  %390 = extractvalue { float, float, float, float } %386, 3, !dbg !34
  %391 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %312, float %313, float %314, float %315, i32 %215, i32 %216, i32 %217, i32 %218, i32 %274, i32 %275) #1, !dbg !34
  %392 = extractvalue { float, float, float, float } %391, 0, !dbg !34
  %393 = extractvalue { float, float, float, float } %391, 1, !dbg !34
  %394 = extractvalue { float, float, float, float } %391, 2, !dbg !34
  %395 = extractvalue { float, float, float, float } %391, 3, !dbg !34
  %396 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %317, float %318, float %319, float %320, i32 %229, i32 %230, i32 %231, i32 %232, i32 %253, i32 %254) #1, !dbg !34
  %397 = extractvalue { float, float, float, float } %396, 0, !dbg !34
  %398 = extractvalue { float, float, float, float } %396, 1, !dbg !34
  %399 = extractvalue { float, float, float, float } %396, 2, !dbg !34
  %400 = extractvalue { float, float, float, float } %396, 3, !dbg !34
  %401 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %229, i32 %230, i32 %231, i32 %232, i32 %260, i32 %261) #1, !dbg !34
  %402 = extractvalue { float, float, float, float } %401, 0, !dbg !34
  %403 = extractvalue { float, float, float, float } %401, 1, !dbg !34
  %404 = extractvalue { float, float, float, float } %401, 2, !dbg !34
  %405 = extractvalue { float, float, float, float } %401, 3, !dbg !34
  %406 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %229, i32 %230, i32 %231, i32 %232, i32 %267, i32 %268) #1, !dbg !34
  %407 = extractvalue { float, float, float, float } %406, 0, !dbg !34
  %408 = extractvalue { float, float, float, float } %406, 1, !dbg !34
  %409 = extractvalue { float, float, float, float } %406, 2, !dbg !34
  %410 = extractvalue { float, float, float, float } %406, 3, !dbg !34
  %411 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %332, float %333, float %334, float %335, i32 %229, i32 %230, i32 %231, i32 %232, i32 %274, i32 %275) #1, !dbg !34
  %412 = extractvalue { float, float, float, float } %411, 0, !dbg !34
  %413 = extractvalue { float, float, float, float } %411, 1, !dbg !34
  %414 = extractvalue { float, float, float, float } %411, 2, !dbg !34
  %415 = extractvalue { float, float, float, float } %411, 3, !dbg !34
  %416 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %243, i32 %244, i32 %245, i32 %246, i32 %253, i32 %254) #1, !dbg !34
  %417 = extractvalue { float, float, float, float } %416, 0, !dbg !34
  %418 = extractvalue { float, float, float, float } %416, 1, !dbg !34
  %419 = extractvalue { float, float, float, float } %416, 2, !dbg !34
  %420 = extractvalue { float, float, float, float } %416, 3, !dbg !34
  %421 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %243, i32 %244, i32 %245, i32 %246, i32 %260, i32 %261) #1, !dbg !34
  %422 = extractvalue { float, float, float, float } %421, 0, !dbg !34
  %423 = extractvalue { float, float, float, float } %421, 1, !dbg !34
  %424 = extractvalue { float, float, float, float } %421, 2, !dbg !34
  %425 = extractvalue { float, float, float, float } %421, 3, !dbg !34
  %426 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %243, i32 %244, i32 %245, i32 %246, i32 %267, i32 %268) #1, !dbg !34
  %427 = extractvalue { float, float, float, float } %426, 0, !dbg !34
  %428 = extractvalue { float, float, float, float } %426, 1, !dbg !34
  %429 = extractvalue { float, float, float, float } %426, 2, !dbg !34
  %430 = extractvalue { float, float, float, float } %426, 3, !dbg !34
  %431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %352, float %353, float %354, float %355, i32 %243, i32 %244, i32 %245, i32 %246, i32 %274, i32 %275) #1, !dbg !34
  %432 = extractvalue { float, float, float, float } %431, 0, !dbg !34
  %433 = extractvalue { float, float, float, float } %431, 1, !dbg !34
  %434 = extractvalue { float, float, float, float } %431, 2, !dbg !34
  %435 = extractvalue { float, float, float, float } %431, 3, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !33
  %436 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !35
  %437 = or disjoint i64 %436, %115, !dbg !36
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %437, !dbg !28
  %gep296 = getelementptr bfloat, ptr addrspace(1) %invariant.gep295, i64 %437, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %438 = select i1 %.not98, i32 0, i32 16, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %51, ptr addrspace(1) %gep, i32 %438) #1, !dbg !29
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %57, ptr addrspace(1) %gep296, i32 %438) #1, !dbg !29
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !29
  %gep298 = getelementptr bfloat, ptr addrspace(1) %invariant.gep297, i64 %437, !dbg !31
  %gep300 = getelementptr bfloat, ptr addrspace(1) %invariant.gep299, i64 %437, !dbg !31
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %64, ptr addrspace(1) %gep298, i32 %438) #1, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %65, ptr addrspace(1) %gep300, i32 %438) #1, !dbg !32
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !32
  %exitcond.not = icmp eq i64 %indvars.iv.next, 128, !dbg !33
  br i1 %exitcond.not, label %439, label %120, !dbg !33

439:                                              ; preds = %120
  %440 = and i32 %26, 120, !dbg !19
  %441 = or disjoint i32 %30, %440, !dbg !22
  %442 = lshr i32 %15, 4, !dbg !19
  %443 = and i32 %442, 15, !dbg !19
  %444 = or disjoint i32 %443, %14, !dbg !20
  %445 = or disjoint i32 %444, 112, !dbg !20
  %446 = or disjoint i32 %444, 96, !dbg !20
  %447 = or disjoint i32 %444, 80, !dbg !20
  %448 = or disjoint i32 %444, 64, !dbg !20
  %449 = or disjoint i32 %444, 48, !dbg !20
  %450 = or disjoint i32 %444, 32, !dbg !20
  %451 = or disjoint i32 %444, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %452 = icmp slt i32 %444, 512, !dbg !37
  %453 = icmp slt i32 %451, 512, !dbg !37
  %454 = icmp slt i32 %450, 512, !dbg !37
  %455 = icmp slt i32 %449, 512, !dbg !37
  %456 = icmp slt i32 %448, 512, !dbg !37
  %457 = icmp slt i32 %447, 512, !dbg !37
  %458 = icmp slt i32 %446, 512, !dbg !37
  %459 = icmp slt i32 %445, 512, !dbg !37
  %460 = icmp slt i32 %441, 4096, !dbg !38
  %461 = and i1 %452, %460, !dbg !39
  %462 = and i1 %453, %460, !dbg !39
  %463 = and i1 %454, %460, !dbg !39
  %464 = and i1 %455, %460, !dbg !39
  %465 = and i1 %456, %460, !dbg !39
  %466 = and i1 %457, %460, !dbg !39
  %467 = and i1 %458, %460, !dbg !39
  %468 = and i1 %459, %460, !dbg !39
  %469 = shl i32 %444, 12, !dbg !40
  %470 = shl i32 %451, 12, !dbg !40
  %471 = shl i32 %450, 12, !dbg !40
  %472 = shl i32 %449, 12, !dbg !40
  %473 = shl i32 %448, 12, !dbg !40
  %474 = shl i32 %447, 12, !dbg !40
  %475 = shl i32 %446, 12, !dbg !40
  %476 = shl i32 %445, 12, !dbg !40
  %477 = add i32 %469, %441, !dbg !41
  %478 = add i32 %470, %441, !dbg !41
  %479 = add i32 %471, %441, !dbg !41
  %480 = add i32 %472, %441, !dbg !41
  %481 = add i32 %473, %441, !dbg !41
  %482 = add i32 %474, %441, !dbg !41
  %483 = add i32 %475, %441, !dbg !41
  %484 = add i32 %476, %441, !dbg !41
  %485 = sext i32 %477 to i64, !dbg !42
  %486 = getelementptr bfloat, ptr addrspace(1) %2, i64 %485, !dbg !42
  %487 = sext i32 %478 to i64, !dbg !42
  %488 = getelementptr bfloat, ptr addrspace(1) %2, i64 %487, !dbg !42
  %489 = sext i32 %479 to i64, !dbg !42
  %490 = getelementptr bfloat, ptr addrspace(1) %2, i64 %489, !dbg !42
  %491 = sext i32 %480 to i64, !dbg !42
  %492 = getelementptr bfloat, ptr addrspace(1) %2, i64 %491, !dbg !42
  %493 = sext i32 %481 to i64, !dbg !42
  %494 = getelementptr bfloat, ptr addrspace(1) %2, i64 %493, !dbg !42
  %495 = sext i32 %482 to i64, !dbg !42
  %496 = getelementptr bfloat, ptr addrspace(1) %2, i64 %495, !dbg !42
  %497 = sext i32 %483 to i64, !dbg !42
  %498 = getelementptr bfloat, ptr addrspace(1) %2, i64 %497, !dbg !42
  %499 = sext i32 %484 to i64, !dbg !42
  %500 = getelementptr bfloat, ptr addrspace(1) %2, i64 %499, !dbg !42
  %501 = fptrunc float %357 to bfloat, !dbg !43
  %502 = fptrunc float %358 to bfloat, !dbg !43
  %503 = fptrunc float %359 to bfloat, !dbg !43
  %504 = fptrunc float %360 to bfloat, !dbg !43
  %505 = fptrunc float %362 to bfloat, !dbg !43
  %506 = fptrunc float %363 to bfloat, !dbg !43
  %507 = fptrunc float %364 to bfloat, !dbg !43
  %508 = fptrunc float %365 to bfloat, !dbg !43
  %509 = fptrunc float %367 to bfloat, !dbg !43
  %510 = fptrunc float %368 to bfloat, !dbg !43
  %511 = fptrunc float %369 to bfloat, !dbg !43
  %512 = fptrunc float %370 to bfloat, !dbg !43
  %513 = fptrunc float %372 to bfloat, !dbg !43
  %514 = fptrunc float %373 to bfloat, !dbg !43
  %515 = fptrunc float %374 to bfloat, !dbg !43
  %516 = fptrunc float %375 to bfloat, !dbg !43
  %517 = fptrunc float %377 to bfloat, !dbg !43
  %518 = fptrunc float %378 to bfloat, !dbg !43
  %519 = fptrunc float %379 to bfloat, !dbg !43
  %520 = fptrunc float %380 to bfloat, !dbg !43
  %521 = fptrunc float %382 to bfloat, !dbg !43
  %522 = fptrunc float %383 to bfloat, !dbg !43
  %523 = fptrunc float %384 to bfloat, !dbg !43
  %524 = fptrunc float %385 to bfloat, !dbg !43
  %525 = fptrunc float %387 to bfloat, !dbg !43
  %526 = fptrunc float %388 to bfloat, !dbg !43
  %527 = fptrunc float %389 to bfloat, !dbg !43
  %528 = fptrunc float %390 to bfloat, !dbg !43
  %529 = fptrunc float %392 to bfloat, !dbg !43
  %530 = fptrunc float %393 to bfloat, !dbg !43
  %531 = fptrunc float %394 to bfloat, !dbg !43
  %532 = fptrunc float %395 to bfloat, !dbg !43
  %533 = fptrunc float %397 to bfloat, !dbg !43
  %534 = fptrunc float %398 to bfloat, !dbg !43
  %535 = fptrunc float %399 to bfloat, !dbg !43
  %536 = fptrunc float %400 to bfloat, !dbg !43
  %537 = fptrunc float %402 to bfloat, !dbg !43
  %538 = fptrunc float %403 to bfloat, !dbg !43
  %539 = fptrunc float %404 to bfloat, !dbg !43
  %540 = fptrunc float %405 to bfloat, !dbg !43
  %541 = fptrunc float %407 to bfloat, !dbg !43
  %542 = fptrunc float %408 to bfloat, !dbg !43
  %543 = fptrunc float %409 to bfloat, !dbg !43
  %544 = fptrunc float %410 to bfloat, !dbg !43
  %545 = fptrunc float %412 to bfloat, !dbg !43
  %546 = fptrunc float %413 to bfloat, !dbg !43
  %547 = fptrunc float %414 to bfloat, !dbg !43
  %548 = fptrunc float %415 to bfloat, !dbg !43
  %549 = fptrunc float %417 to bfloat, !dbg !43
  %550 = fptrunc float %418 to bfloat, !dbg !43
  %551 = fptrunc float %419 to bfloat, !dbg !43
  %552 = fptrunc float %420 to bfloat, !dbg !43
  %553 = fptrunc float %422 to bfloat, !dbg !43
  %554 = fptrunc float %423 to bfloat, !dbg !43
  %555 = fptrunc float %424 to bfloat, !dbg !43
  %556 = fptrunc float %425 to bfloat, !dbg !43
  %557 = fptrunc float %427 to bfloat, !dbg !43
  %558 = fptrunc float %428 to bfloat, !dbg !43
  %559 = fptrunc float %429 to bfloat, !dbg !43
  %560 = fptrunc float %430 to bfloat, !dbg !43
  %561 = fptrunc float %432 to bfloat, !dbg !43
  %562 = fptrunc float %433 to bfloat, !dbg !43
  %563 = fptrunc float %434 to bfloat, !dbg !43
  %564 = fptrunc float %435 to bfloat, !dbg !43
  %565 = shl i32 %15, 1, !dbg !43
  %566 = and i32 %565, 6, !dbg !43
  %567 = shl i32 %15, 5, !dbg !43
  %568 = and i32 %567, 384, !dbg !43
  %569 = or disjoint i32 %568, %566, !dbg !43
  %570 = shl nuw nsw i32 %17, 5, !dbg !43
  %571 = or disjoint i32 %569, %570, !dbg !43
  %572 = shl nuw nsw i32 %21, 4, !dbg !43
  %573 = or disjoint i32 %571, %572, !dbg !43
  %574 = and i32 %18, 24, !dbg !43
  %575 = or disjoint i32 %574, %573, !dbg !43
  %576 = and i32 %26, 2040, !dbg !43
  %577 = lshr i32 %573, 4, !dbg !43
  %578 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %577, !dbg !43
  %579 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %578, i32 %575, !dbg !43
  %580 = bitcast bfloat %501 to i16, !dbg !43
  %581 = bitcast bfloat %502 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %579, i16 %580, i16 %581, i1 true) #1, !dbg !43
  %582 = or disjoint i32 %575, 1024, !dbg !43
  %583 = lshr i32 %582, 4, !dbg !43
  %584 = and i32 %583, 268435448, !dbg !43
  %585 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %584, !dbg !43
  %586 = getelementptr bfloat, ptr addrspace(3) %585, i32 %582, !dbg !43
  %587 = bitcast bfloat %503 to i16, !dbg !43
  %588 = bitcast bfloat %504 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %586, i16 %587, i16 %588, i1 true) #1, !dbg !43
  %589 = or disjoint i32 %575, 32, !dbg !43
  %590 = getelementptr bfloat, ptr addrspace(3) %578, i32 %589, !dbg !43
  %591 = bitcast bfloat %505 to i16, !dbg !43
  %592 = bitcast bfloat %506 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %590, i16 %591, i16 %592, i1 true) #1, !dbg !43
  %593 = or disjoint i32 %575, 1056, !dbg !43
  %594 = lshr i32 %593, 4, !dbg !43
  %595 = and i32 %594, 268435448, !dbg !43
  %596 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %595, !dbg !43
  %597 = getelementptr bfloat, ptr addrspace(3) %596, i32 %593, !dbg !43
  %598 = bitcast bfloat %507 to i16, !dbg !43
  %599 = bitcast bfloat %508 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %597, i16 %598, i16 %599, i1 true) #1, !dbg !43
  %600 = or disjoint i32 %575, 64, !dbg !43
  %601 = getelementptr bfloat, ptr addrspace(3) %578, i32 %600, !dbg !43
  %602 = bitcast bfloat %509 to i16, !dbg !43
  %603 = bitcast bfloat %510 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %601, i16 %602, i16 %603, i1 true) #1, !dbg !43
  %604 = or disjoint i32 %575, 1088, !dbg !43
  %605 = lshr i32 %604, 4, !dbg !43
  %606 = and i32 %605, 268435448, !dbg !43
  %607 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %606, !dbg !43
  %608 = getelementptr bfloat, ptr addrspace(3) %607, i32 %604, !dbg !43
  %609 = bitcast bfloat %511 to i16, !dbg !43
  %610 = bitcast bfloat %512 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %608, i16 %609, i16 %610, i1 true) #1, !dbg !43
  %611 = or disjoint i32 %575, 96, !dbg !43
  %612 = getelementptr bfloat, ptr addrspace(3) %578, i32 %611, !dbg !43
  %613 = bitcast bfloat %513 to i16, !dbg !43
  %614 = bitcast bfloat %514 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %612, i16 %613, i16 %614, i1 true) #1, !dbg !43
  %615 = or disjoint i32 %575, 1120, !dbg !43
  %616 = lshr i32 %615, 4, !dbg !43
  %617 = and i32 %616, 268435448, !dbg !43
  %618 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %617, !dbg !43
  %619 = getelementptr bfloat, ptr addrspace(3) %618, i32 %615, !dbg !43
  %620 = bitcast bfloat %515 to i16, !dbg !43
  %621 = bitcast bfloat %516 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %619, i16 %620, i16 %621, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %622 = lshr i32 %26, 4, !dbg !43
  %623 = and i32 %622, 120, !dbg !43
  %624 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %623, !dbg !43
  %625 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %624, i32 %576, !dbg !43
  %626 = load <4 x i32>, ptr addrspace(3) %625, align 16, !dbg !43
  %627 = or disjoint i32 %576, 2048, !dbg !43
  %628 = lshr i32 %627, 4, !dbg !43
  %629 = and i32 %628, 248, !dbg !43
  %630 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %629, !dbg !43
  %631 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %630, i32 %627, !dbg !43
  %632 = load <4 x i32>, ptr addrspace(3) %631, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %633 = bitcast bfloat %517 to i16, !dbg !43
  %634 = bitcast bfloat %518 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %579, i16 %633, i16 %634, i1 true) #1, !dbg !43
  %635 = bitcast bfloat %519 to i16, !dbg !43
  %636 = bitcast bfloat %520 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %586, i16 %635, i16 %636, i1 true) #1, !dbg !43
  %637 = bitcast bfloat %521 to i16, !dbg !43
  %638 = bitcast bfloat %522 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %590, i16 %637, i16 %638, i1 true) #1, !dbg !43
  %639 = bitcast bfloat %523 to i16, !dbg !43
  %640 = bitcast bfloat %524 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %597, i16 %639, i16 %640, i1 true) #1, !dbg !43
  %641 = bitcast bfloat %525 to i16, !dbg !43
  %642 = bitcast bfloat %526 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %601, i16 %641, i16 %642, i1 true) #1, !dbg !43
  %643 = bitcast bfloat %527 to i16, !dbg !43
  %644 = bitcast bfloat %528 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %608, i16 %643, i16 %644, i1 true) #1, !dbg !43
  %645 = bitcast bfloat %529 to i16, !dbg !43
  %646 = bitcast bfloat %530 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %612, i16 %645, i16 %646, i1 true) #1, !dbg !43
  %647 = bitcast bfloat %531 to i16, !dbg !43
  %648 = bitcast bfloat %532 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %619, i16 %647, i16 %648, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %649 = load <4 x i32>, ptr addrspace(3) %625, align 16, !dbg !43
  %650 = load <4 x i32>, ptr addrspace(3) %631, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %651 = bitcast bfloat %533 to i16, !dbg !43
  %652 = bitcast bfloat %534 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %579, i16 %651, i16 %652, i1 true) #1, !dbg !43
  %653 = bitcast bfloat %535 to i16, !dbg !43
  %654 = bitcast bfloat %536 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %586, i16 %653, i16 %654, i1 true) #1, !dbg !43
  %655 = bitcast bfloat %537 to i16, !dbg !43
  %656 = bitcast bfloat %538 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %590, i16 %655, i16 %656, i1 true) #1, !dbg !43
  %657 = bitcast bfloat %539 to i16, !dbg !43
  %658 = bitcast bfloat %540 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %597, i16 %657, i16 %658, i1 true) #1, !dbg !43
  %659 = bitcast bfloat %541 to i16, !dbg !43
  %660 = bitcast bfloat %542 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %601, i16 %659, i16 %660, i1 true) #1, !dbg !43
  %661 = bitcast bfloat %543 to i16, !dbg !43
  %662 = bitcast bfloat %544 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %608, i16 %661, i16 %662, i1 true) #1, !dbg !43
  %663 = bitcast bfloat %545 to i16, !dbg !43
  %664 = bitcast bfloat %546 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %612, i16 %663, i16 %664, i1 true) #1, !dbg !43
  %665 = bitcast bfloat %547 to i16, !dbg !43
  %666 = bitcast bfloat %548 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %619, i16 %665, i16 %666, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %667 = load <4 x i32>, ptr addrspace(3) %625, align 16, !dbg !43
  %668 = load <4 x i32>, ptr addrspace(3) %631, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %669 = bitcast bfloat %549 to i16, !dbg !43
  %670 = bitcast bfloat %550 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %579, i16 %669, i16 %670, i1 true) #1, !dbg !43
  %671 = bitcast bfloat %551 to i16, !dbg !43
  %672 = bitcast bfloat %552 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %586, i16 %671, i16 %672, i1 true) #1, !dbg !43
  %673 = bitcast bfloat %553 to i16, !dbg !43
  %674 = bitcast bfloat %554 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %590, i16 %673, i16 %674, i1 true) #1, !dbg !43
  %675 = bitcast bfloat %555 to i16, !dbg !43
  %676 = bitcast bfloat %556 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %597, i16 %675, i16 %676, i1 true) #1, !dbg !43
  %677 = bitcast bfloat %557 to i16, !dbg !43
  %678 = bitcast bfloat %558 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %601, i16 %677, i16 %678, i1 true) #1, !dbg !43
  %679 = bitcast bfloat %559 to i16, !dbg !43
  %680 = bitcast bfloat %560 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %608, i16 %679, i16 %680, i1 true) #1, !dbg !43
  %681 = bitcast bfloat %561 to i16, !dbg !43
  %682 = bitcast bfloat %562 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %612, i16 %681, i16 %682, i1 true) #1, !dbg !43
  %683 = bitcast bfloat %563 to i16, !dbg !43
  %684 = bitcast bfloat %564 to i16, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %619, i16 %683, i16 %684, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %685 = load <4 x i32>, ptr addrspace(3) %625, align 16, !dbg !43
  %686 = load <4 x i32>, ptr addrspace(3) %631, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %626, i64 0, !dbg !43
  %.extract103 = extractelement <4 x i32> %626, i64 1, !dbg !43
  %.extract105 = extractelement <4 x i32> %626, i64 2, !dbg !43
  %.extract107 = extractelement <4 x i32> %626, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract103, i32 %.extract105, i32 %.extract107, ptr addrspace(1) %486, i1 %461) #1, !dbg !43
  %.extract109 = extractelement <4 x i32> %632, i64 0, !dbg !43
  %.extract111 = extractelement <4 x i32> %632, i64 1, !dbg !43
  %.extract113 = extractelement <4 x i32> %632, i64 2, !dbg !43
  %.extract115 = extractelement <4 x i32> %632, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract109, i32 %.extract111, i32 %.extract113, i32 %.extract115, ptr addrspace(1) %488, i1 %462) #1, !dbg !43
  %.extract117 = extractelement <4 x i32> %649, i64 0, !dbg !43
  %.extract119 = extractelement <4 x i32> %649, i64 1, !dbg !43
  %.extract121 = extractelement <4 x i32> %649, i64 2, !dbg !43
  %.extract123 = extractelement <4 x i32> %649, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract117, i32 %.extract119, i32 %.extract121, i32 %.extract123, ptr addrspace(1) %490, i1 %463) #1, !dbg !43
  %.extract125 = extractelement <4 x i32> %650, i64 0, !dbg !43
  %.extract127 = extractelement <4 x i32> %650, i64 1, !dbg !43
  %.extract129 = extractelement <4 x i32> %650, i64 2, !dbg !43
  %.extract131 = extractelement <4 x i32> %650, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract125, i32 %.extract127, i32 %.extract129, i32 %.extract131, ptr addrspace(1) %492, i1 %464) #1, !dbg !43
  %.extract133 = extractelement <4 x i32> %667, i64 0, !dbg !43
  %.extract135 = extractelement <4 x i32> %667, i64 1, !dbg !43
  %.extract137 = extractelement <4 x i32> %667, i64 2, !dbg !43
  %.extract139 = extractelement <4 x i32> %667, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract133, i32 %.extract135, i32 %.extract137, i32 %.extract139, ptr addrspace(1) %494, i1 %465) #1, !dbg !43
  %.extract141 = extractelement <4 x i32> %668, i64 0, !dbg !43
  %.extract143 = extractelement <4 x i32> %668, i64 1, !dbg !43
  %.extract145 = extractelement <4 x i32> %668, i64 2, !dbg !43
  %.extract147 = extractelement <4 x i32> %668, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract141, i32 %.extract143, i32 %.extract145, i32 %.extract147, ptr addrspace(1) %496, i1 %466) #1, !dbg !43
  %.extract149 = extractelement <4 x i32> %685, i64 0, !dbg !43
  %.extract151 = extractelement <4 x i32> %685, i64 1, !dbg !43
  %.extract153 = extractelement <4 x i32> %685, i64 2, !dbg !43
  %.extract155 = extractelement <4 x i32> %685, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract149, i32 %.extract151, i32 %.extract153, i32 %.extract155, ptr addrspace(1) %498, i1 %467) #1, !dbg !43
  %.extract157 = extractelement <4 x i32> %686, i64 0, !dbg !43
  %.extract159 = extractelement <4 x i32> %686, i64 1, !dbg !43
  %.extract161 = extractelement <4 x i32> %686, i64 2, !dbg !43
  %.extract163 = extractelement <4 x i32> %686, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract157, i32 %.extract159, i32 %.extract161, i32 %.extract163, ptr addrspace(1) %500, i1 %468) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqbakzt5ucpfp4vbw3cmgu3mkhia4wbkv2mgitbc7srgvgnlcldt.py", directory: "/tmp/torchinductor_root/qb")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 71, column: 30, scope: !6)
!26 = !DILocation(line: 77, column: 55, scope: !6)
!27 = !DILocation(line: 71, column: 25, scope: !6)
!28 = !DILocation(line: 72, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 20, scope: !6)
!30 = !DILocation(line: 77, column: 50, scope: !6)
!31 = !DILocation(line: 77, column: 25, scope: !6)
!32 = !DILocation(line: 77, column: 20, scope: !6)
!33 = !DILocation(line: 64, column: 26, scope: !6)
!34 = !DILocation(line: 78, column: 25, scope: !6)
!35 = !DILocation(line: 66, column: 50, scope: !6)
!36 = !DILocation(line: 66, column: 42, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
