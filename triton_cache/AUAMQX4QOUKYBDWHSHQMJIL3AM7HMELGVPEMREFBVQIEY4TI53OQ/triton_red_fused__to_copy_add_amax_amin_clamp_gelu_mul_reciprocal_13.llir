; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = shl i32 %13, 1, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 256, !dbg !11
  %.lobit = lshr exact i32 %16, 8, !dbg !11
  %17 = and i32 %15, 31, !dbg !11
  %18 = or disjoint i32 %.lobit, %14, !dbg !12
  %19 = or disjoint i32 %14, 1, !dbg !12
  %20 = icmp slt i32 %18, 512, !dbg !13
  %21 = icmp slt i32 %14, 512, !dbg !13
  %22 = icmp slt i32 %19, 512, !dbg !13
  %23 = shl i32 %15, 3, !dbg !14
  %24 = and i32 %23, 4088, !dbg !14
  %25 = shl i32 %15, 4, !dbg !14
  %26 = and i32 %25, 4080, !dbg !14
  %27 = or disjoint i32 %26, 4, !dbg !14
  %28 = or disjoint i32 %26, 8, !dbg !14
  %29 = or disjoint i32 %26, 12, !dbg !14
  %30 = shl i32 %15, 2, !dbg !14
  %31 = and i32 %30, 2044, !dbg !14
  %32 = or disjoint i32 %31, 2048, !dbg !14
  %33 = sext i32 %18 to i64, !dbg !15
  %34 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !15
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 %20) #5, !dbg !16
  %51 = bitcast i16 %50 to bfloat, !dbg !16
  %52 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !17
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %63 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !18
  %69 = bitcast i16 %68 to bfloat, !dbg !18
  %70 = mul i32 %18, 12288, !dbg !19
  %71 = mul i32 %13, 24576, !dbg !19
  %72 = mul i32 %19, 12288, !dbg !19
  %.inv = fcmp oge bfloat %51, 0xR0000, !dbg !20
  %73 = select i1 %.inv, bfloat 0xR0000, bfloat %51, !dbg !20
  %74 = fpext bfloat %73 to float, !dbg !20
  %75 = fsub float 0.000000e+00, %74, !dbg !24
  %.inv3 = fcmp ole bfloat %69, 0xR0000, !dbg !25
  %76 = select i1 %.inv3, bfloat 0xR0000, bfloat %69, !dbg !25
  %77 = fpext bfloat %76 to float, !dbg !25
  %78 = fcmp ogt float %75, %77, !dbg !27
  %79 = fcmp uno float %75, 0.000000e+00, !dbg !29
  %80 = or i1 %79, %78, !dbg !30
  %81 = select i1 %80, float %75, float %77, !dbg !31
  %82 = fmul float %81, 0x3F80204080000000, !dbg !32
  %83 = fcmp ogt float %82, 0x3EE4F8B580000000, !dbg !33
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !35
  %85 = or i1 %83, %84, !dbg !36
  %86 = select i1 %85, float %82, float 0x3EE4F8B580000000, !dbg !37
  %87 = or disjoint i32 %70, %26
  %88 = or disjoint i32 %70, %27
  %89 = or disjoint i32 %70, %28
  %90 = or disjoint i32 %70, %29
  %91 = and i32 %25, 8176
  %92 = lshr i32 %25, 10
  %93 = and i32 %92, 4
  %94 = or disjoint i32 %93, %91
  %95 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %94
  %96 = or disjoint i32 %91, 4
  %97 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %93
  %98 = getelementptr inbounds nuw float, ptr addrspace(3) %97, i32 %96
  %99 = or disjoint i32 %94, 8
  %100 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %99
  %101 = or disjoint i32 %91, 12
  %102 = getelementptr inbounds nuw float, ptr addrspace(3) %97, i32 %101
  %103 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %104 = or disjoint i32 %24, 4
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %104
  %106 = or disjoint i32 %24, 4100
  %107 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %106
  %108 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 16416
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %31
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %32
  %111 = zext nneg i32 %24 to i64, !dbg !38
  %112 = getelementptr inbounds nuw i8, ptr addrspace(3) %103, i32 8
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %105, i32 8
  %114 = getelementptr inbounds nuw i8, ptr addrspace(3) %107, i32 8
  %115 = insertelement <4 x i1> poison, i1 %21, i64 0, !dbg !39
  %116 = shufflevector <4 x i1> %115, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  %117 = insertelement <8 x i1> poison, i1 %21, i64 0, !dbg !40
  %118 = shufflevector <8 x i1> %117, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !40
  br label %119, !dbg !38

119:                                              ; preds = %12, %__nv_tanhf.exit642
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %__nv_tanhf.exit642 ]
  %120 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %957, %__nv_tanhf.exit642 ]
  %121 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %958, %__nv_tanhf.exit642 ]
  %122 = phi <8 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %930, %__nv_tanhf.exit642 ]
  %123 = phi <8 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %959, %__nv_tanhf.exit642 ]
  %124 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %956, %__nv_tanhf.exit642 ]
  %125 = phi <4 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %937, %__nv_tanhf.exit642 ]
  %126 = or disjoint i64 %indvars.iv, %111, !dbg !41
  %127 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !42
  %128 = add i32 %87, %127, !dbg !42
  %129 = add i32 %88, %127, !dbg !42
  %130 = add i32 %89, %127, !dbg !42
  %131 = add i32 %90, %127, !dbg !42
  %132 = trunc i64 %indvars.iv to i32, !dbg !42
  %133 = or disjoint i32 %31, %132, !dbg !42
  %134 = add i32 %133, %71, !dbg !42
  %135 = trunc i64 %indvars.iv to i32, !dbg !42
  %136 = or disjoint i32 %32, %135, !dbg !42
  %137 = add i32 %136, %71, !dbg !42
  %138 = add i32 %133, %72, !dbg !42
  %139 = add i32 %136, %72, !dbg !42
  %140 = sext i32 %128 to i64, !dbg !43
  %141 = getelementptr i32, ptr addrspace(1) %0, i64 %140, !dbg !43
  %142 = sext i32 %129 to i64, !dbg !43
  %143 = getelementptr i32, ptr addrspace(1) %0, i64 %142, !dbg !43
  %144 = sext i32 %130 to i64, !dbg !43
  %145 = getelementptr i32, ptr addrspace(1) %0, i64 %144, !dbg !43
  %146 = sext i32 %131 to i64, !dbg !43
  %147 = getelementptr i32, ptr addrspace(1) %0, i64 %146, !dbg !43
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %20) #5, !dbg !44
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !44
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !44
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !44
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !44
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %20) #5, !dbg !44
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !44
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !44
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !44
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !44
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %20) #5, !dbg !44
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !44
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !44
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !44
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !44
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %20) #5, !dbg !44
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !44
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !44
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !44
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !44
  %168 = getelementptr bfloat, ptr addrspace(1) %3, i64 %126, !dbg !45
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %168, i1 true) #5, !dbg !46
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !46
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !46
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !46
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !46
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !46
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !46
  %176 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !46
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !46
  %178 = getelementptr bfloat, ptr addrspace(1) %4, i64 %126, !dbg !47
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %178, i1 true) #5, !dbg !48
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !48
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !48
  %182 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !48
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !48
  %184 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !48
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !48
  %186 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !48
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !48
  %188 = sitofp i32 %149 to float, !dbg !49
  %189 = sitofp i32 %150 to float, !dbg !49
  %190 = sitofp i32 %151 to float, !dbg !49
  %191 = sitofp i32 %152 to float, !dbg !49
  %192 = sitofp i32 %154 to float, !dbg !49
  %193 = sitofp i32 %155 to float, !dbg !49
  %194 = sitofp i32 %156 to float, !dbg !49
  %195 = sitofp i32 %157 to float, !dbg !49
  %196 = sitofp i32 %159 to float, !dbg !49
  %197 = sitofp i32 %160 to float, !dbg !49
  %198 = sitofp i32 %161 to float, !dbg !49
  %199 = sitofp i32 %162 to float, !dbg !49
  %200 = sitofp i32 %164 to float, !dbg !49
  %201 = sitofp i32 %165 to float, !dbg !49
  %202 = sitofp i32 %166 to float, !dbg !49
  %203 = sitofp i32 %167 to float, !dbg !49
  %204 = fmul float %86, %188, !dbg !50
  %205 = fmul float %86, %189, !dbg !50
  %206 = fmul float %86, %190, !dbg !50
  %207 = fmul float %86, %191, !dbg !50
  %208 = fmul float %86, %192, !dbg !50
  %209 = fmul float %86, %193, !dbg !50
  %210 = fmul float %86, %194, !dbg !50
  %211 = fmul float %86, %195, !dbg !50
  %212 = fmul float %86, %196, !dbg !50
  %213 = fmul float %86, %197, !dbg !50
  %214 = fmul float %86, %198, !dbg !50
  %215 = fmul float %86, %199, !dbg !50
  %216 = fmul float %86, %200, !dbg !50
  %217 = fmul float %86, %201, !dbg !50
  %218 = fmul float %86, %202, !dbg !50
  %219 = fmul float %86, %203, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %220 = bitcast float %204 to i32, !dbg !50
  %221 = bitcast float %205 to i32, !dbg !50
  %222 = bitcast float %206 to i32, !dbg !50
  %223 = bitcast float %207 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %95, i32 %220, i32 %221, i32 %222, i32 %223, i1 true) #5, !dbg !50
  %224 = bitcast float %208 to i32, !dbg !50
  %225 = bitcast float %209 to i32, !dbg !50
  %226 = bitcast float %210 to i32, !dbg !50
  %227 = bitcast float %211 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %98, i32 %224, i32 %225, i32 %226, i32 %227, i1 true) #5, !dbg !50
  %228 = bitcast float %212 to i32, !dbg !50
  %229 = bitcast float %213 to i32, !dbg !50
  %230 = bitcast float %214 to i32, !dbg !50
  %231 = bitcast float %215 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %100, i32 %228, i32 %229, i32 %230, i32 %231, i1 true) #5, !dbg !50
  %232 = bitcast float %216 to i32, !dbg !50
  %233 = bitcast float %217 to i32, !dbg !50
  %234 = bitcast float %218 to i32, !dbg !50
  %235 = bitcast float %219 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %102, i32 %232, i32 %233, i32 %234, i32 %235, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %236 = fpext <2 x bfloat> %171 to <2 x float>, !dbg !51
  %237 = shufflevector <2 x float> %236, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !51
  %238 = fpext <2 x bfloat> %181 to <2 x float>, !dbg !52
  %239 = shufflevector <2 x float> %238, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !52
  %240 = load <2 x float>, ptr addrspace(3) %103, align 16, !dbg !50
  %241 = load <2 x float>, ptr addrspace(3) %107, align 16, !dbg !50
  %242 = shufflevector <2 x float> %241, <2 x float> %240, <4 x i32> <i32 0, i32 2, i32 1, i32 3>, !dbg !53
  %243 = fmul <4 x float> %242, %237, !dbg !53
  %244 = fadd <4 x float> %243, %239, !dbg !54
  %245 = shufflevector <2 x bfloat> %177, <2 x bfloat> %175, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 1, i32 0>, !dbg !51
  %246 = shufflevector <2 x bfloat> %173, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %247 = shufflevector <8 x bfloat> %245, <8 x bfloat> %246, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 6, i32 7>, !dbg !51
  %248 = shufflevector <2 x bfloat> %173, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !51
  %249 = shufflevector <8 x bfloat> %247, <8 x bfloat> %248, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 6, i32 7>, !dbg !51
  %250 = fpext <8 x bfloat> %249 to <8 x float>, !dbg !51
  %251 = shufflevector <2 x bfloat> %187, <2 x bfloat> %185, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 1, i32 0>, !dbg !52
  %252 = shufflevector <2 x bfloat> %183, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %253 = shufflevector <8 x bfloat> %251, <8 x bfloat> %252, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 6, i32 7>, !dbg !52
  %254 = shufflevector <2 x bfloat> %183, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !52
  %255 = shufflevector <8 x bfloat> %253, <8 x bfloat> %254, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 6, i32 7>, !dbg !52
  %256 = fpext <8 x bfloat> %255 to <8 x float>, !dbg !52
  %257 = load <2 x float>, ptr addrspace(3) %113, align 8, !dbg !50
  %258 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !50
  %259 = load <2 x float>, ptr addrspace(3) %114, align 8, !dbg !50
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !50
  %261 = load <4 x float>, ptr addrspace(3) %108, align 16, !dbg !50
  %262 = shufflevector <4 x float> %261, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !50
  %263 = shufflevector <4 x float> %262, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %264 = shufflevector <2 x float> %260, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %265 = shufflevector <8 x float> %263, <8 x float> %264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !53
  %266 = shufflevector <2 x float> %258, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !53
  %267 = shufflevector <8 x float> %265, <8 x float> %266, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !53
  %268 = fmul <8 x float> %267, %250, !dbg !53
  %269 = load <4 x float>, ptr addrspace(3) %112, align 8, !dbg !50
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !50
  %271 = shufflevector <8 x float> %250, <8 x float> poison, <4 x i32> <i32 2, i32 3, i32 4, i32 5>, !dbg !53
  %272 = fmul <4 x float> %270, %271, !dbg !53
  %273 = shufflevector <8 x float> %256, <8 x float> poison, <4 x i32> <i32 2, i32 3, i32 4, i32 5>, !dbg !54
  %274 = fadd <4 x float> %272, %273, !dbg !54
  %275 = fadd <8 x float> %268, %256, !dbg !54
  %276 = fmul <4 x float> %274, splat (float 5.000000e-01), !dbg !55
  %277 = fmul <4 x float> %244, splat (float 5.000000e-01), !dbg !55
  %278 = fmul <8 x float> %275, splat (float 5.000000e-01), !dbg !55
  %279 = extractelement <4 x float> %244, i64 1, !dbg !56
  %280 = fmul float %279, %279, !dbg !57
  %281 = extractelement <4 x float> %244, i64 3, !dbg !56
  %282 = fmul float %281, %281, !dbg !57
  %283 = extractelement <4 x float> %274, i64 3, !dbg !56
  %284 = fmul float %283, %283, !dbg !57
  %285 = extractelement <4 x float> %274, i64 2, !dbg !56
  %286 = fmul float %285, %285, !dbg !57
  %287 = extractelement <4 x float> %274, i64 1, !dbg !56
  %288 = fmul float %287, %287, !dbg !57
  %289 = extractelement <4 x float> %274, i64 0, !dbg !56
  %290 = fmul float %289, %289, !dbg !57
  %291 = extractelement <8 x float> %275, i64 7, !dbg !56
  %292 = fmul float %291, %291, !dbg !57
  %293 = extractelement <8 x float> %275, i64 6, !dbg !56
  %294 = fmul float %293, %293, !dbg !57
  %295 = extractelement <4 x float> %244, i64 0, !dbg !56
  %296 = fmul float %295, %295, !dbg !57
  %297 = extractelement <4 x float> %244, i64 2, !dbg !56
  %298 = fmul float %297, %297, !dbg !57
  %299 = extractelement <8 x float> %275, i64 5, !dbg !56
  %300 = fmul float %299, %299, !dbg !57
  %301 = extractelement <8 x float> %275, i64 4, !dbg !56
  %302 = fmul float %301, %301, !dbg !57
  %303 = extractelement <8 x float> %275, i64 3, !dbg !56
  %304 = fmul float %303, %303, !dbg !57
  %305 = extractelement <8 x float> %275, i64 2, !dbg !56
  %306 = fmul float %305, %305, !dbg !57
  %307 = extractelement <8 x float> %275, i64 1, !dbg !56
  %308 = fmul float %307, %307, !dbg !57
  %309 = extractelement <8 x float> %275, i64 0, !dbg !56
  %310 = fmul float %309, %309, !dbg !57
  %311 = fmul float %279, %280, !dbg !58
  %312 = fmul float %281, %282, !dbg !58
  %313 = fmul float %283, %284, !dbg !58
  %314 = fmul float %285, %286, !dbg !58
  %315 = fmul float %287, %288, !dbg !58
  %316 = fmul float %289, %290, !dbg !58
  %317 = fmul float %291, %292, !dbg !58
  %318 = fmul float %293, %294, !dbg !58
  %319 = fmul float %295, %296, !dbg !58
  %320 = fmul float %297, %298, !dbg !58
  %321 = fmul float %299, %300, !dbg !58
  %322 = fmul float %301, %302, !dbg !58
  %323 = fmul float %303, %304, !dbg !58
  %324 = fmul float %305, %306, !dbg !58
  %325 = fmul float %307, %308, !dbg !58
  %326 = fmul float %309, %310, !dbg !58
  %327 = fmul float %311, 0x3FA6E4E260000000, !dbg !59
  %328 = fmul float %312, 0x3FA6E4E260000000, !dbg !59
  %329 = fmul float %313, 0x3FA6E4E260000000, !dbg !59
  %330 = fmul float %314, 0x3FA6E4E260000000, !dbg !59
  %331 = fmul float %315, 0x3FA6E4E260000000, !dbg !59
  %332 = fmul float %316, 0x3FA6E4E260000000, !dbg !59
  %333 = fmul float %317, 0x3FA6E4E260000000, !dbg !59
  %334 = fmul float %318, 0x3FA6E4E260000000, !dbg !59
  %335 = fmul float %319, 0x3FA6E4E260000000, !dbg !59
  %336 = fmul float %320, 0x3FA6E4E260000000, !dbg !59
  %337 = fmul float %321, 0x3FA6E4E260000000, !dbg !59
  %338 = fmul float %322, 0x3FA6E4E260000000, !dbg !59
  %339 = fmul float %323, 0x3FA6E4E260000000, !dbg !59
  %340 = fmul float %324, 0x3FA6E4E260000000, !dbg !59
  %341 = fmul float %325, 0x3FA6E4E260000000, !dbg !59
  %342 = fmul float %326, 0x3FA6E4E260000000, !dbg !59
  %343 = fadd float %279, %327, !dbg !56
  %344 = fadd float %281, %328, !dbg !56
  %345 = fadd float %283, %329, !dbg !56
  %346 = fadd float %285, %330, !dbg !56
  %347 = fadd float %287, %331, !dbg !56
  %348 = fadd float %289, %332, !dbg !56
  %349 = fadd float %291, %333, !dbg !56
  %350 = fadd float %293, %334, !dbg !56
  %351 = fadd float %295, %335, !dbg !56
  %352 = fadd float %297, %336, !dbg !56
  %353 = fadd float %299, %337, !dbg !56
  %354 = fadd float %301, %338, !dbg !56
  %355 = fadd float %303, %339, !dbg !56
  %356 = fadd float %305, %340, !dbg !56
  %357 = fadd float %307, %341, !dbg !56
  %358 = fadd float %309, %342, !dbg !56
  %359 = fmul float %343, 0x3FE9884540000000, !dbg !60
  %360 = fmul float %344, 0x3FE9884540000000, !dbg !60
  %361 = fmul float %345, 0x3FE9884540000000, !dbg !60
  %362 = fmul float %346, 0x3FE9884540000000, !dbg !60
  %363 = fmul float %347, 0x3FE9884540000000, !dbg !60
  %364 = fmul float %348, 0x3FE9884540000000, !dbg !60
  %365 = fmul float %349, 0x3FE9884540000000, !dbg !60
  %366 = fmul float %350, 0x3FE9884540000000, !dbg !60
  %367 = fmul float %351, 0x3FE9884540000000, !dbg !60
  %368 = fmul float %352, 0x3FE9884540000000, !dbg !60
  %369 = fmul float %353, 0x3FE9884540000000, !dbg !60
  %370 = fmul float %354, 0x3FE9884540000000, !dbg !60
  %371 = fmul float %355, 0x3FE9884540000000, !dbg !60
  %372 = fmul float %356, 0x3FE9884540000000, !dbg !60
  %373 = fmul float %357, 0x3FE9884540000000, !dbg !60
  %374 = fmul float %358, 0x3FE9884540000000, !dbg !60
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i339 = icmp eq i32 %375, 0, !dbg !61
  %376 = tail call float @llvm.nvvm.fabs.ftz.f(float %359) #5, !dbg !61
  %377 = tail call float @llvm.nvvm.fabs.f(float %359) #5, !dbg !61
  %.01.i340 = select i1 %.not.i339, float %377, float %376, !dbg !61
  %378 = fcmp ult float %.01.i340, 0x3FE3333340000000, !dbg !61
  br i1 %378, label %__internal_fmad.exit3.i346, label %__internal_fmad.exit1.i341, !dbg !61

__internal_fmad.exit1.i341:                       ; preds = %119
  %379 = fmul float %.01.i340, 0x4007154760000000, !dbg !61
  %380 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %379) #5, !dbg !61
  %381 = fadd float %380, 1.000000e+00, !dbg !61
  %382 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %381) #6, !dbg !61, !srcloc !62
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i342 = icmp eq i32 %383, 0, !dbg !61
  %384 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %382, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %385 = tail call float @llvm.nvvm.fma.rn.f(float %382, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i343 = select i1 %.not6.i342, float %385, float %384, !dbg !61
  %386 = fcmp oge float %.01.i340, 0x4022059680000000, !dbg !61
  %s.0.i344 = select i1 %386, float 1.000000e+00, float %.03.i343, !dbg !61
  %387 = bitcast float %s.0.i344 to i32, !dbg !61
  %388 = bitcast float %359 to i32, !dbg !61
  %389 = and i32 %388, -2147483648, !dbg !61
  %390 = or i32 %389, %387, !dbg !61
  %391 = bitcast i32 %390 to float, !dbg !61
  br label %__nv_tanhf.exit357, !dbg !61

__internal_fmad.exit3.i346:                       ; preds = %119
  %392 = fmul float %359, %359, !dbg !61
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i347 = icmp eq i32 %393, 0, !dbg !61
  %394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %392, float 0xBFAAC795C0000000) #5, !dbg !61
  %395 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %392, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i348 = select i1 %.not1.i347, float %395, float %394, !dbg !61
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i349 = icmp eq i32 %396, 0, !dbg !61
  %397 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i348, float %392, float 0x3FC10B2820000000) #5, !dbg !61
  %398 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i348, float %392, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i350 = select i1 %.not2.i349, float %398, float %397, !dbg !61
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i351 = icmp eq i32 %399, 0, !dbg !61
  %400 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i350, float %392, float 0xBFD5553DA0000000) #5, !dbg !61
  %401 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i350, float %392, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i352 = select i1 %.not3.i351, float %401, float %400, !dbg !61
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i353 = icmp eq i32 %402, 0, !dbg !61
  %403 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i352, float %392, float 0.000000e+00) #5, !dbg !61
  %404 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i352, float %392, float 0.000000e+00) #5, !dbg !61
  %.04.i354 = select i1 %.not4.i353, float %404, float %403, !dbg !61
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i355 = icmp eq i32 %405, 0, !dbg !61
  %406 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i354, float %359, float %359) #5, !dbg !61
  %407 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i354, float %359, float %359) #5, !dbg !61
  %.02.i356 = select i1 %.not5.i355, float %407, float %406, !dbg !61
  br label %__nv_tanhf.exit357, !dbg !61

__nv_tanhf.exit357:                               ; preds = %__internal_fmad.exit1.i341, %__internal_fmad.exit3.i346
  %s.1.i345 = phi float [ %391, %__internal_fmad.exit1.i341 ], [ %.02.i356, %__internal_fmad.exit3.i346 ], !dbg !61
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i358 = icmp eq i32 %408, 0, !dbg !61
  %409 = tail call float @llvm.nvvm.fabs.ftz.f(float %360) #5, !dbg !61
  %410 = tail call float @llvm.nvvm.fabs.f(float %360) #5, !dbg !61
  %.01.i359 = select i1 %.not.i358, float %410, float %409, !dbg !61
  %411 = fcmp ult float %.01.i359, 0x3FE3333340000000, !dbg !61
  br i1 %411, label %__internal_fmad.exit3.i365, label %__internal_fmad.exit1.i360, !dbg !61

__internal_fmad.exit1.i360:                       ; preds = %__nv_tanhf.exit357
  %412 = fmul float %.01.i359, 0x4007154760000000, !dbg !61
  %413 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %412) #5, !dbg !61
  %414 = fadd float %413, 1.000000e+00, !dbg !61
  %415 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %414) #6, !dbg !61, !srcloc !62
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i361 = icmp eq i32 %416, 0, !dbg !61
  %417 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %415, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %418 = tail call float @llvm.nvvm.fma.rn.f(float %415, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i362 = select i1 %.not6.i361, float %418, float %417, !dbg !61
  %419 = fcmp oge float %.01.i359, 0x4022059680000000, !dbg !61
  %s.0.i363 = select i1 %419, float 1.000000e+00, float %.03.i362, !dbg !61
  %420 = bitcast float %s.0.i363 to i32, !dbg !61
  %421 = bitcast float %360 to i32, !dbg !61
  %422 = and i32 %421, -2147483648, !dbg !61
  %423 = or i32 %422, %420, !dbg !61
  %424 = bitcast i32 %423 to float, !dbg !61
  br label %__nv_tanhf.exit376, !dbg !61

__internal_fmad.exit3.i365:                       ; preds = %__nv_tanhf.exit357
  %425 = fmul float %360, %360, !dbg !61
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i366 = icmp eq i32 %426, 0, !dbg !61
  %427 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %425, float 0xBFAAC795C0000000) #5, !dbg !61
  %428 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %425, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i367 = select i1 %.not1.i366, float %428, float %427, !dbg !61
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i368 = icmp eq i32 %429, 0, !dbg !61
  %430 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i367, float %425, float 0x3FC10B2820000000) #5, !dbg !61
  %431 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i367, float %425, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i369 = select i1 %.not2.i368, float %431, float %430, !dbg !61
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i370 = icmp eq i32 %432, 0, !dbg !61
  %433 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i369, float %425, float 0xBFD5553DA0000000) #5, !dbg !61
  %434 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i369, float %425, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i371 = select i1 %.not3.i370, float %434, float %433, !dbg !61
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i372 = icmp eq i32 %435, 0, !dbg !61
  %436 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i371, float %425, float 0.000000e+00) #5, !dbg !61
  %437 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i371, float %425, float 0.000000e+00) #5, !dbg !61
  %.04.i373 = select i1 %.not4.i372, float %437, float %436, !dbg !61
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i374 = icmp eq i32 %438, 0, !dbg !61
  %439 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i373, float %360, float %360) #5, !dbg !61
  %440 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i373, float %360, float %360) #5, !dbg !61
  %.02.i375 = select i1 %.not5.i374, float %440, float %439, !dbg !61
  br label %__nv_tanhf.exit376, !dbg !61

__nv_tanhf.exit376:                               ; preds = %__internal_fmad.exit1.i360, %__internal_fmad.exit3.i365
  %s.1.i364 = phi float [ %424, %__internal_fmad.exit1.i360 ], [ %.02.i375, %__internal_fmad.exit3.i365 ], !dbg !61
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i377 = icmp eq i32 %441, 0, !dbg !61
  %442 = tail call float @llvm.nvvm.fabs.ftz.f(float %361) #5, !dbg !61
  %443 = tail call float @llvm.nvvm.fabs.f(float %361) #5, !dbg !61
  %.01.i378 = select i1 %.not.i377, float %443, float %442, !dbg !61
  %444 = fcmp ult float %.01.i378, 0x3FE3333340000000, !dbg !61
  br i1 %444, label %__internal_fmad.exit3.i384, label %__internal_fmad.exit1.i379, !dbg !61

__internal_fmad.exit1.i379:                       ; preds = %__nv_tanhf.exit376
  %445 = fmul float %.01.i378, 0x4007154760000000, !dbg !61
  %446 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %445) #5, !dbg !61
  %447 = fadd float %446, 1.000000e+00, !dbg !61
  %448 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %447) #6, !dbg !61, !srcloc !62
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i380 = icmp eq i32 %449, 0, !dbg !61
  %450 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %448, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %451 = tail call float @llvm.nvvm.fma.rn.f(float %448, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i381 = select i1 %.not6.i380, float %451, float %450, !dbg !61
  %452 = fcmp oge float %.01.i378, 0x4022059680000000, !dbg !61
  %s.0.i382 = select i1 %452, float 1.000000e+00, float %.03.i381, !dbg !61
  %453 = bitcast float %s.0.i382 to i32, !dbg !61
  %454 = bitcast float %361 to i32, !dbg !61
  %455 = and i32 %454, -2147483648, !dbg !61
  %456 = or i32 %455, %453, !dbg !61
  %457 = bitcast i32 %456 to float, !dbg !61
  br label %__nv_tanhf.exit395, !dbg !61

__internal_fmad.exit3.i384:                       ; preds = %__nv_tanhf.exit376
  %458 = fmul float %361, %361, !dbg !61
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i385 = icmp eq i32 %459, 0, !dbg !61
  %460 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %458, float 0xBFAAC795C0000000) #5, !dbg !61
  %461 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %458, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i386 = select i1 %.not1.i385, float %461, float %460, !dbg !61
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i387 = icmp eq i32 %462, 0, !dbg !61
  %463 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i386, float %458, float 0x3FC10B2820000000) #5, !dbg !61
  %464 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i386, float %458, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i388 = select i1 %.not2.i387, float %464, float %463, !dbg !61
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i389 = icmp eq i32 %465, 0, !dbg !61
  %466 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i388, float %458, float 0xBFD5553DA0000000) #5, !dbg !61
  %467 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i388, float %458, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i390 = select i1 %.not3.i389, float %467, float %466, !dbg !61
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i391 = icmp eq i32 %468, 0, !dbg !61
  %469 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i390, float %458, float 0.000000e+00) #5, !dbg !61
  %470 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i390, float %458, float 0.000000e+00) #5, !dbg !61
  %.04.i392 = select i1 %.not4.i391, float %470, float %469, !dbg !61
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i393 = icmp eq i32 %471, 0, !dbg !61
  %472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i392, float %361, float %361) #5, !dbg !61
  %473 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i392, float %361, float %361) #5, !dbg !61
  %.02.i394 = select i1 %.not5.i393, float %473, float %472, !dbg !61
  br label %__nv_tanhf.exit395, !dbg !61

__nv_tanhf.exit395:                               ; preds = %__internal_fmad.exit1.i379, %__internal_fmad.exit3.i384
  %s.1.i383 = phi float [ %457, %__internal_fmad.exit1.i379 ], [ %.02.i394, %__internal_fmad.exit3.i384 ], !dbg !61
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i396 = icmp eq i32 %474, 0, !dbg !61
  %475 = tail call float @llvm.nvvm.fabs.ftz.f(float %362) #5, !dbg !61
  %476 = tail call float @llvm.nvvm.fabs.f(float %362) #5, !dbg !61
  %.01.i397 = select i1 %.not.i396, float %476, float %475, !dbg !61
  %477 = fcmp ult float %.01.i397, 0x3FE3333340000000, !dbg !61
  br i1 %477, label %__internal_fmad.exit3.i403, label %__internal_fmad.exit1.i398, !dbg !61

__internal_fmad.exit1.i398:                       ; preds = %__nv_tanhf.exit395
  %478 = fmul float %.01.i397, 0x4007154760000000, !dbg !61
  %479 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %478) #5, !dbg !61
  %480 = fadd float %479, 1.000000e+00, !dbg !61
  %481 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %480) #6, !dbg !61, !srcloc !62
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i399 = icmp eq i32 %482, 0, !dbg !61
  %483 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %481, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %484 = tail call float @llvm.nvvm.fma.rn.f(float %481, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i400 = select i1 %.not6.i399, float %484, float %483, !dbg !61
  %485 = fcmp oge float %.01.i397, 0x4022059680000000, !dbg !61
  %s.0.i401 = select i1 %485, float 1.000000e+00, float %.03.i400, !dbg !61
  %486 = bitcast float %s.0.i401 to i32, !dbg !61
  %487 = bitcast float %362 to i32, !dbg !61
  %488 = and i32 %487, -2147483648, !dbg !61
  %489 = or i32 %488, %486, !dbg !61
  %490 = bitcast i32 %489 to float, !dbg !61
  br label %__nv_tanhf.exit414, !dbg !61

__internal_fmad.exit3.i403:                       ; preds = %__nv_tanhf.exit395
  %491 = fmul float %362, %362, !dbg !61
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i404 = icmp eq i32 %492, 0, !dbg !61
  %493 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %491, float 0xBFAAC795C0000000) #5, !dbg !61
  %494 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %491, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i405 = select i1 %.not1.i404, float %494, float %493, !dbg !61
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i406 = icmp eq i32 %495, 0, !dbg !61
  %496 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i405, float %491, float 0x3FC10B2820000000) #5, !dbg !61
  %497 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i405, float %491, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i407 = select i1 %.not2.i406, float %497, float %496, !dbg !61
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i408 = icmp eq i32 %498, 0, !dbg !61
  %499 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i407, float %491, float 0xBFD5553DA0000000) #5, !dbg !61
  %500 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i407, float %491, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i409 = select i1 %.not3.i408, float %500, float %499, !dbg !61
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i410 = icmp eq i32 %501, 0, !dbg !61
  %502 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i409, float %491, float 0.000000e+00) #5, !dbg !61
  %503 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i409, float %491, float 0.000000e+00) #5, !dbg !61
  %.04.i411 = select i1 %.not4.i410, float %503, float %502, !dbg !61
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i412 = icmp eq i32 %504, 0, !dbg !61
  %505 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i411, float %362, float %362) #5, !dbg !61
  %506 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i411, float %362, float %362) #5, !dbg !61
  %.02.i413 = select i1 %.not5.i412, float %506, float %505, !dbg !61
  br label %__nv_tanhf.exit414, !dbg !61

__nv_tanhf.exit414:                               ; preds = %__internal_fmad.exit1.i398, %__internal_fmad.exit3.i403
  %s.1.i402 = phi float [ %490, %__internal_fmad.exit1.i398 ], [ %.02.i413, %__internal_fmad.exit3.i403 ], !dbg !61
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i415 = icmp eq i32 %507, 0, !dbg !61
  %508 = tail call float @llvm.nvvm.fabs.ftz.f(float %363) #5, !dbg !61
  %509 = tail call float @llvm.nvvm.fabs.f(float %363) #5, !dbg !61
  %.01.i416 = select i1 %.not.i415, float %509, float %508, !dbg !61
  %510 = fcmp ult float %.01.i416, 0x3FE3333340000000, !dbg !61
  br i1 %510, label %__internal_fmad.exit3.i422, label %__internal_fmad.exit1.i417, !dbg !61

__internal_fmad.exit1.i417:                       ; preds = %__nv_tanhf.exit414
  %511 = fmul float %.01.i416, 0x4007154760000000, !dbg !61
  %512 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %511) #5, !dbg !61
  %513 = fadd float %512, 1.000000e+00, !dbg !61
  %514 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %513) #6, !dbg !61, !srcloc !62
  %515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i418 = icmp eq i32 %515, 0, !dbg !61
  %516 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %514, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %517 = tail call float @llvm.nvvm.fma.rn.f(float %514, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i419 = select i1 %.not6.i418, float %517, float %516, !dbg !61
  %518 = fcmp oge float %.01.i416, 0x4022059680000000, !dbg !61
  %s.0.i420 = select i1 %518, float 1.000000e+00, float %.03.i419, !dbg !61
  %519 = bitcast float %s.0.i420 to i32, !dbg !61
  %520 = bitcast float %363 to i32, !dbg !61
  %521 = and i32 %520, -2147483648, !dbg !61
  %522 = or i32 %521, %519, !dbg !61
  %523 = bitcast i32 %522 to float, !dbg !61
  br label %__nv_tanhf.exit433, !dbg !61

__internal_fmad.exit3.i422:                       ; preds = %__nv_tanhf.exit414
  %524 = fmul float %363, %363, !dbg !61
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i423 = icmp eq i32 %525, 0, !dbg !61
  %526 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %524, float 0xBFAAC795C0000000) #5, !dbg !61
  %527 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %524, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i424 = select i1 %.not1.i423, float %527, float %526, !dbg !61
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i425 = icmp eq i32 %528, 0, !dbg !61
  %529 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i424, float %524, float 0x3FC10B2820000000) #5, !dbg !61
  %530 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i424, float %524, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i426 = select i1 %.not2.i425, float %530, float %529, !dbg !61
  %531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i427 = icmp eq i32 %531, 0, !dbg !61
  %532 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i426, float %524, float 0xBFD5553DA0000000) #5, !dbg !61
  %533 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i426, float %524, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i428 = select i1 %.not3.i427, float %533, float %532, !dbg !61
  %534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i429 = icmp eq i32 %534, 0, !dbg !61
  %535 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i428, float %524, float 0.000000e+00) #5, !dbg !61
  %536 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i428, float %524, float 0.000000e+00) #5, !dbg !61
  %.04.i430 = select i1 %.not4.i429, float %536, float %535, !dbg !61
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i431 = icmp eq i32 %537, 0, !dbg !61
  %538 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i430, float %363, float %363) #5, !dbg !61
  %539 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i430, float %363, float %363) #5, !dbg !61
  %.02.i432 = select i1 %.not5.i431, float %539, float %538, !dbg !61
  br label %__nv_tanhf.exit433, !dbg !61

__nv_tanhf.exit433:                               ; preds = %__internal_fmad.exit1.i417, %__internal_fmad.exit3.i422
  %s.1.i421 = phi float [ %523, %__internal_fmad.exit1.i417 ], [ %.02.i432, %__internal_fmad.exit3.i422 ], !dbg !61
  %540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i434 = icmp eq i32 %540, 0, !dbg !61
  %541 = tail call float @llvm.nvvm.fabs.ftz.f(float %364) #5, !dbg !61
  %542 = tail call float @llvm.nvvm.fabs.f(float %364) #5, !dbg !61
  %.01.i435 = select i1 %.not.i434, float %542, float %541, !dbg !61
  %543 = fcmp ult float %.01.i435, 0x3FE3333340000000, !dbg !61
  br i1 %543, label %__internal_fmad.exit3.i441, label %__internal_fmad.exit1.i436, !dbg !61

__internal_fmad.exit1.i436:                       ; preds = %__nv_tanhf.exit433
  %544 = fmul float %.01.i435, 0x4007154760000000, !dbg !61
  %545 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %544) #5, !dbg !61
  %546 = fadd float %545, 1.000000e+00, !dbg !61
  %547 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %546) #6, !dbg !61, !srcloc !62
  %548 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i437 = icmp eq i32 %548, 0, !dbg !61
  %549 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %547, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %550 = tail call float @llvm.nvvm.fma.rn.f(float %547, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i438 = select i1 %.not6.i437, float %550, float %549, !dbg !61
  %551 = fcmp oge float %.01.i435, 0x4022059680000000, !dbg !61
  %s.0.i439 = select i1 %551, float 1.000000e+00, float %.03.i438, !dbg !61
  %552 = bitcast float %s.0.i439 to i32, !dbg !61
  %553 = bitcast float %364 to i32, !dbg !61
  %554 = and i32 %553, -2147483648, !dbg !61
  %555 = or i32 %554, %552, !dbg !61
  %556 = bitcast i32 %555 to float, !dbg !61
  br label %__nv_tanhf.exit452, !dbg !61

__internal_fmad.exit3.i441:                       ; preds = %__nv_tanhf.exit433
  %557 = fmul float %364, %364, !dbg !61
  %558 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i442 = icmp eq i32 %558, 0, !dbg !61
  %559 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %557, float 0xBFAAC795C0000000) #5, !dbg !61
  %560 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %557, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i443 = select i1 %.not1.i442, float %560, float %559, !dbg !61
  %561 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i444 = icmp eq i32 %561, 0, !dbg !61
  %562 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i443, float %557, float 0x3FC10B2820000000) #5, !dbg !61
  %563 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i443, float %557, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i445 = select i1 %.not2.i444, float %563, float %562, !dbg !61
  %564 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i446 = icmp eq i32 %564, 0, !dbg !61
  %565 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i445, float %557, float 0xBFD5553DA0000000) #5, !dbg !61
  %566 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i445, float %557, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i447 = select i1 %.not3.i446, float %566, float %565, !dbg !61
  %567 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i448 = icmp eq i32 %567, 0, !dbg !61
  %568 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i447, float %557, float 0.000000e+00) #5, !dbg !61
  %569 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i447, float %557, float 0.000000e+00) #5, !dbg !61
  %.04.i449 = select i1 %.not4.i448, float %569, float %568, !dbg !61
  %570 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i450 = icmp eq i32 %570, 0, !dbg !61
  %571 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i449, float %364, float %364) #5, !dbg !61
  %572 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i449, float %364, float %364) #5, !dbg !61
  %.02.i451 = select i1 %.not5.i450, float %572, float %571, !dbg !61
  br label %__nv_tanhf.exit452, !dbg !61

__nv_tanhf.exit452:                               ; preds = %__internal_fmad.exit1.i436, %__internal_fmad.exit3.i441
  %s.1.i440 = phi float [ %556, %__internal_fmad.exit1.i436 ], [ %.02.i451, %__internal_fmad.exit3.i441 ], !dbg !61
  %573 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i453 = icmp eq i32 %573, 0, !dbg !61
  %574 = tail call float @llvm.nvvm.fabs.ftz.f(float %365) #5, !dbg !61
  %575 = tail call float @llvm.nvvm.fabs.f(float %365) #5, !dbg !61
  %.01.i454 = select i1 %.not.i453, float %575, float %574, !dbg !61
  %576 = fcmp ult float %.01.i454, 0x3FE3333340000000, !dbg !61
  br i1 %576, label %__internal_fmad.exit3.i460, label %__internal_fmad.exit1.i455, !dbg !61

__internal_fmad.exit1.i455:                       ; preds = %__nv_tanhf.exit452
  %577 = fmul float %.01.i454, 0x4007154760000000, !dbg !61
  %578 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %577) #5, !dbg !61
  %579 = fadd float %578, 1.000000e+00, !dbg !61
  %580 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %579) #6, !dbg !61, !srcloc !62
  %581 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i456 = icmp eq i32 %581, 0, !dbg !61
  %582 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %580, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %583 = tail call float @llvm.nvvm.fma.rn.f(float %580, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i457 = select i1 %.not6.i456, float %583, float %582, !dbg !61
  %584 = fcmp oge float %.01.i454, 0x4022059680000000, !dbg !61
  %s.0.i458 = select i1 %584, float 1.000000e+00, float %.03.i457, !dbg !61
  %585 = bitcast float %s.0.i458 to i32, !dbg !61
  %586 = bitcast float %365 to i32, !dbg !61
  %587 = and i32 %586, -2147483648, !dbg !61
  %588 = or i32 %587, %585, !dbg !61
  %589 = bitcast i32 %588 to float, !dbg !61
  br label %__nv_tanhf.exit471, !dbg !61

__internal_fmad.exit3.i460:                       ; preds = %__nv_tanhf.exit452
  %590 = fmul float %365, %365, !dbg !61
  %591 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i461 = icmp eq i32 %591, 0, !dbg !61
  %592 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %590, float 0xBFAAC795C0000000) #5, !dbg !61
  %593 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %590, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i462 = select i1 %.not1.i461, float %593, float %592, !dbg !61
  %594 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i463 = icmp eq i32 %594, 0, !dbg !61
  %595 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i462, float %590, float 0x3FC10B2820000000) #5, !dbg !61
  %596 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i462, float %590, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i464 = select i1 %.not2.i463, float %596, float %595, !dbg !61
  %597 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i465 = icmp eq i32 %597, 0, !dbg !61
  %598 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i464, float %590, float 0xBFD5553DA0000000) #5, !dbg !61
  %599 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i464, float %590, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i466 = select i1 %.not3.i465, float %599, float %598, !dbg !61
  %600 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i467 = icmp eq i32 %600, 0, !dbg !61
  %601 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i466, float %590, float 0.000000e+00) #5, !dbg !61
  %602 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i466, float %590, float 0.000000e+00) #5, !dbg !61
  %.04.i468 = select i1 %.not4.i467, float %602, float %601, !dbg !61
  %603 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i469 = icmp eq i32 %603, 0, !dbg !61
  %604 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i468, float %365, float %365) #5, !dbg !61
  %605 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i468, float %365, float %365) #5, !dbg !61
  %.02.i470 = select i1 %.not5.i469, float %605, float %604, !dbg !61
  br label %__nv_tanhf.exit471, !dbg !61

__nv_tanhf.exit471:                               ; preds = %__internal_fmad.exit1.i455, %__internal_fmad.exit3.i460
  %s.1.i459 = phi float [ %589, %__internal_fmad.exit1.i455 ], [ %.02.i470, %__internal_fmad.exit3.i460 ], !dbg !61
  %606 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i472 = icmp eq i32 %606, 0, !dbg !61
  %607 = tail call float @llvm.nvvm.fabs.ftz.f(float %366) #5, !dbg !61
  %608 = tail call float @llvm.nvvm.fabs.f(float %366) #5, !dbg !61
  %.01.i473 = select i1 %.not.i472, float %608, float %607, !dbg !61
  %609 = fcmp ult float %.01.i473, 0x3FE3333340000000, !dbg !61
  br i1 %609, label %__internal_fmad.exit3.i479, label %__internal_fmad.exit1.i474, !dbg !61

__internal_fmad.exit1.i474:                       ; preds = %__nv_tanhf.exit471
  %610 = fmul float %.01.i473, 0x4007154760000000, !dbg !61
  %611 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %610) #5, !dbg !61
  %612 = fadd float %611, 1.000000e+00, !dbg !61
  %613 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %612) #6, !dbg !61, !srcloc !62
  %614 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i475 = icmp eq i32 %614, 0, !dbg !61
  %615 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %613, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %616 = tail call float @llvm.nvvm.fma.rn.f(float %613, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i476 = select i1 %.not6.i475, float %616, float %615, !dbg !61
  %617 = fcmp oge float %.01.i473, 0x4022059680000000, !dbg !61
  %s.0.i477 = select i1 %617, float 1.000000e+00, float %.03.i476, !dbg !61
  %618 = bitcast float %s.0.i477 to i32, !dbg !61
  %619 = bitcast float %366 to i32, !dbg !61
  %620 = and i32 %619, -2147483648, !dbg !61
  %621 = or i32 %620, %618, !dbg !61
  %622 = bitcast i32 %621 to float, !dbg !61
  br label %__nv_tanhf.exit490, !dbg !61

__internal_fmad.exit3.i479:                       ; preds = %__nv_tanhf.exit471
  %623 = fmul float %366, %366, !dbg !61
  %624 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i480 = icmp eq i32 %624, 0, !dbg !61
  %625 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %623, float 0xBFAAC795C0000000) #5, !dbg !61
  %626 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %623, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i481 = select i1 %.not1.i480, float %626, float %625, !dbg !61
  %627 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i482 = icmp eq i32 %627, 0, !dbg !61
  %628 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i481, float %623, float 0x3FC10B2820000000) #5, !dbg !61
  %629 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i481, float %623, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i483 = select i1 %.not2.i482, float %629, float %628, !dbg !61
  %630 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i484 = icmp eq i32 %630, 0, !dbg !61
  %631 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i483, float %623, float 0xBFD5553DA0000000) #5, !dbg !61
  %632 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i483, float %623, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i485 = select i1 %.not3.i484, float %632, float %631, !dbg !61
  %633 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i486 = icmp eq i32 %633, 0, !dbg !61
  %634 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i485, float %623, float 0.000000e+00) #5, !dbg !61
  %635 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i485, float %623, float 0.000000e+00) #5, !dbg !61
  %.04.i487 = select i1 %.not4.i486, float %635, float %634, !dbg !61
  %636 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i488 = icmp eq i32 %636, 0, !dbg !61
  %637 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i487, float %366, float %366) #5, !dbg !61
  %638 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i487, float %366, float %366) #5, !dbg !61
  %.02.i489 = select i1 %.not5.i488, float %638, float %637, !dbg !61
  br label %__nv_tanhf.exit490, !dbg !61

__nv_tanhf.exit490:                               ; preds = %__internal_fmad.exit1.i474, %__internal_fmad.exit3.i479
  %s.1.i478 = phi float [ %622, %__internal_fmad.exit1.i474 ], [ %.02.i489, %__internal_fmad.exit3.i479 ], !dbg !61
  %639 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i491 = icmp eq i32 %639, 0, !dbg !61
  %640 = tail call float @llvm.nvvm.fabs.ftz.f(float %367) #5, !dbg !61
  %641 = tail call float @llvm.nvvm.fabs.f(float %367) #5, !dbg !61
  %.01.i492 = select i1 %.not.i491, float %641, float %640, !dbg !61
  %642 = fcmp ult float %.01.i492, 0x3FE3333340000000, !dbg !61
  br i1 %642, label %__internal_fmad.exit3.i498, label %__internal_fmad.exit1.i493, !dbg !61

__internal_fmad.exit1.i493:                       ; preds = %__nv_tanhf.exit490
  %643 = fmul float %.01.i492, 0x4007154760000000, !dbg !61
  %644 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %643) #5, !dbg !61
  %645 = fadd float %644, 1.000000e+00, !dbg !61
  %646 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %645) #6, !dbg !61, !srcloc !62
  %647 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i494 = icmp eq i32 %647, 0, !dbg !61
  %648 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %646, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %649 = tail call float @llvm.nvvm.fma.rn.f(float %646, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i495 = select i1 %.not6.i494, float %649, float %648, !dbg !61
  %650 = fcmp oge float %.01.i492, 0x4022059680000000, !dbg !61
  %s.0.i496 = select i1 %650, float 1.000000e+00, float %.03.i495, !dbg !61
  %651 = bitcast float %s.0.i496 to i32, !dbg !61
  %652 = bitcast float %367 to i32, !dbg !61
  %653 = and i32 %652, -2147483648, !dbg !61
  %654 = or i32 %653, %651, !dbg !61
  %655 = bitcast i32 %654 to float, !dbg !61
  br label %__nv_tanhf.exit509, !dbg !61

__internal_fmad.exit3.i498:                       ; preds = %__nv_tanhf.exit490
  %656 = fmul float %367, %367, !dbg !61
  %657 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i499 = icmp eq i32 %657, 0, !dbg !61
  %658 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %656, float 0xBFAAC795C0000000) #5, !dbg !61
  %659 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %656, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i500 = select i1 %.not1.i499, float %659, float %658, !dbg !61
  %660 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i501 = icmp eq i32 %660, 0, !dbg !61
  %661 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i500, float %656, float 0x3FC10B2820000000) #5, !dbg !61
  %662 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i500, float %656, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i502 = select i1 %.not2.i501, float %662, float %661, !dbg !61
  %663 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i503 = icmp eq i32 %663, 0, !dbg !61
  %664 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i502, float %656, float 0xBFD5553DA0000000) #5, !dbg !61
  %665 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i502, float %656, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i504 = select i1 %.not3.i503, float %665, float %664, !dbg !61
  %666 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i505 = icmp eq i32 %666, 0, !dbg !61
  %667 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i504, float %656, float 0.000000e+00) #5, !dbg !61
  %668 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i504, float %656, float 0.000000e+00) #5, !dbg !61
  %.04.i506 = select i1 %.not4.i505, float %668, float %667, !dbg !61
  %669 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i507 = icmp eq i32 %669, 0, !dbg !61
  %670 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i506, float %367, float %367) #5, !dbg !61
  %671 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i506, float %367, float %367) #5, !dbg !61
  %.02.i508 = select i1 %.not5.i507, float %671, float %670, !dbg !61
  br label %__nv_tanhf.exit509, !dbg !61

__nv_tanhf.exit509:                               ; preds = %__internal_fmad.exit1.i493, %__internal_fmad.exit3.i498
  %s.1.i497 = phi float [ %655, %__internal_fmad.exit1.i493 ], [ %.02.i508, %__internal_fmad.exit3.i498 ], !dbg !61
  %672 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i510 = icmp eq i32 %672, 0, !dbg !61
  %673 = tail call float @llvm.nvvm.fabs.ftz.f(float %368) #5, !dbg !61
  %674 = tail call float @llvm.nvvm.fabs.f(float %368) #5, !dbg !61
  %.01.i511 = select i1 %.not.i510, float %674, float %673, !dbg !61
  %675 = fcmp ult float %.01.i511, 0x3FE3333340000000, !dbg !61
  br i1 %675, label %__internal_fmad.exit3.i517, label %__internal_fmad.exit1.i512, !dbg !61

__internal_fmad.exit1.i512:                       ; preds = %__nv_tanhf.exit509
  %676 = fmul float %.01.i511, 0x4007154760000000, !dbg !61
  %677 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %676) #5, !dbg !61
  %678 = fadd float %677, 1.000000e+00, !dbg !61
  %679 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %678) #6, !dbg !61, !srcloc !62
  %680 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i513 = icmp eq i32 %680, 0, !dbg !61
  %681 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %679, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %682 = tail call float @llvm.nvvm.fma.rn.f(float %679, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i514 = select i1 %.not6.i513, float %682, float %681, !dbg !61
  %683 = fcmp oge float %.01.i511, 0x4022059680000000, !dbg !61
  %s.0.i515 = select i1 %683, float 1.000000e+00, float %.03.i514, !dbg !61
  %684 = bitcast float %s.0.i515 to i32, !dbg !61
  %685 = bitcast float %368 to i32, !dbg !61
  %686 = and i32 %685, -2147483648, !dbg !61
  %687 = or i32 %686, %684, !dbg !61
  %688 = bitcast i32 %687 to float, !dbg !61
  br label %__nv_tanhf.exit528, !dbg !61

__internal_fmad.exit3.i517:                       ; preds = %__nv_tanhf.exit509
  %689 = fmul float %368, %368, !dbg !61
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i518 = icmp eq i32 %690, 0, !dbg !61
  %691 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %689, float 0xBFAAC795C0000000) #5, !dbg !61
  %692 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %689, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i519 = select i1 %.not1.i518, float %692, float %691, !dbg !61
  %693 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i520 = icmp eq i32 %693, 0, !dbg !61
  %694 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i519, float %689, float 0x3FC10B2820000000) #5, !dbg !61
  %695 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i519, float %689, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i521 = select i1 %.not2.i520, float %695, float %694, !dbg !61
  %696 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i522 = icmp eq i32 %696, 0, !dbg !61
  %697 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i521, float %689, float 0xBFD5553DA0000000) #5, !dbg !61
  %698 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i521, float %689, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i523 = select i1 %.not3.i522, float %698, float %697, !dbg !61
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i524 = icmp eq i32 %699, 0, !dbg !61
  %700 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i523, float %689, float 0.000000e+00) #5, !dbg !61
  %701 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i523, float %689, float 0.000000e+00) #5, !dbg !61
  %.04.i525 = select i1 %.not4.i524, float %701, float %700, !dbg !61
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i526 = icmp eq i32 %702, 0, !dbg !61
  %703 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i525, float %368, float %368) #5, !dbg !61
  %704 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i525, float %368, float %368) #5, !dbg !61
  %.02.i527 = select i1 %.not5.i526, float %704, float %703, !dbg !61
  br label %__nv_tanhf.exit528, !dbg !61

__nv_tanhf.exit528:                               ; preds = %__internal_fmad.exit1.i512, %__internal_fmad.exit3.i517
  %s.1.i516 = phi float [ %688, %__internal_fmad.exit1.i512 ], [ %.02.i527, %__internal_fmad.exit3.i517 ], !dbg !61
  %705 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i529 = icmp eq i32 %705, 0, !dbg !61
  %706 = tail call float @llvm.nvvm.fabs.ftz.f(float %369) #5, !dbg !61
  %707 = tail call float @llvm.nvvm.fabs.f(float %369) #5, !dbg !61
  %.01.i530 = select i1 %.not.i529, float %707, float %706, !dbg !61
  %708 = fcmp ult float %.01.i530, 0x3FE3333340000000, !dbg !61
  br i1 %708, label %__internal_fmad.exit3.i536, label %__internal_fmad.exit1.i531, !dbg !61

__internal_fmad.exit1.i531:                       ; preds = %__nv_tanhf.exit528
  %709 = fmul float %.01.i530, 0x4007154760000000, !dbg !61
  %710 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %709) #5, !dbg !61
  %711 = fadd float %710, 1.000000e+00, !dbg !61
  %712 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %711) #6, !dbg !61, !srcloc !62
  %713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i532 = icmp eq i32 %713, 0, !dbg !61
  %714 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %712, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %715 = tail call float @llvm.nvvm.fma.rn.f(float %712, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i533 = select i1 %.not6.i532, float %715, float %714, !dbg !61
  %716 = fcmp oge float %.01.i530, 0x4022059680000000, !dbg !61
  %s.0.i534 = select i1 %716, float 1.000000e+00, float %.03.i533, !dbg !61
  %717 = bitcast float %s.0.i534 to i32, !dbg !61
  %718 = bitcast float %369 to i32, !dbg !61
  %719 = and i32 %718, -2147483648, !dbg !61
  %720 = or i32 %719, %717, !dbg !61
  %721 = bitcast i32 %720 to float, !dbg !61
  br label %__nv_tanhf.exit547, !dbg !61

__internal_fmad.exit3.i536:                       ; preds = %__nv_tanhf.exit528
  %722 = fmul float %369, %369, !dbg !61
  %723 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i537 = icmp eq i32 %723, 0, !dbg !61
  %724 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %722, float 0xBFAAC795C0000000) #5, !dbg !61
  %725 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %722, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i538 = select i1 %.not1.i537, float %725, float %724, !dbg !61
  %726 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i539 = icmp eq i32 %726, 0, !dbg !61
  %727 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i538, float %722, float 0x3FC10B2820000000) #5, !dbg !61
  %728 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i538, float %722, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i540 = select i1 %.not2.i539, float %728, float %727, !dbg !61
  %729 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i541 = icmp eq i32 %729, 0, !dbg !61
  %730 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i540, float %722, float 0xBFD5553DA0000000) #5, !dbg !61
  %731 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i540, float %722, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i542 = select i1 %.not3.i541, float %731, float %730, !dbg !61
  %732 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i543 = icmp eq i32 %732, 0, !dbg !61
  %733 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i542, float %722, float 0.000000e+00) #5, !dbg !61
  %734 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i542, float %722, float 0.000000e+00) #5, !dbg !61
  %.04.i544 = select i1 %.not4.i543, float %734, float %733, !dbg !61
  %735 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i545 = icmp eq i32 %735, 0, !dbg !61
  %736 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i544, float %369, float %369) #5, !dbg !61
  %737 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i544, float %369, float %369) #5, !dbg !61
  %.02.i546 = select i1 %.not5.i545, float %737, float %736, !dbg !61
  br label %__nv_tanhf.exit547, !dbg !61

__nv_tanhf.exit547:                               ; preds = %__internal_fmad.exit1.i531, %__internal_fmad.exit3.i536
  %s.1.i535 = phi float [ %721, %__internal_fmad.exit1.i531 ], [ %.02.i546, %__internal_fmad.exit3.i536 ], !dbg !61
  %738 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i548 = icmp eq i32 %738, 0, !dbg !61
  %739 = tail call float @llvm.nvvm.fabs.ftz.f(float %370) #5, !dbg !61
  %740 = tail call float @llvm.nvvm.fabs.f(float %370) #5, !dbg !61
  %.01.i549 = select i1 %.not.i548, float %740, float %739, !dbg !61
  %741 = fcmp ult float %.01.i549, 0x3FE3333340000000, !dbg !61
  br i1 %741, label %__internal_fmad.exit3.i555, label %__internal_fmad.exit1.i550, !dbg !61

__internal_fmad.exit1.i550:                       ; preds = %__nv_tanhf.exit547
  %742 = fmul float %.01.i549, 0x4007154760000000, !dbg !61
  %743 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %742) #5, !dbg !61
  %744 = fadd float %743, 1.000000e+00, !dbg !61
  %745 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %744) #6, !dbg !61, !srcloc !62
  %746 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i551 = icmp eq i32 %746, 0, !dbg !61
  %747 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %745, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %748 = tail call float @llvm.nvvm.fma.rn.f(float %745, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i552 = select i1 %.not6.i551, float %748, float %747, !dbg !61
  %749 = fcmp oge float %.01.i549, 0x4022059680000000, !dbg !61
  %s.0.i553 = select i1 %749, float 1.000000e+00, float %.03.i552, !dbg !61
  %750 = bitcast float %s.0.i553 to i32, !dbg !61
  %751 = bitcast float %370 to i32, !dbg !61
  %752 = and i32 %751, -2147483648, !dbg !61
  %753 = or i32 %752, %750, !dbg !61
  %754 = bitcast i32 %753 to float, !dbg !61
  br label %__nv_tanhf.exit566, !dbg !61

__internal_fmad.exit3.i555:                       ; preds = %__nv_tanhf.exit547
  %755 = fmul float %370, %370, !dbg !61
  %756 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i556 = icmp eq i32 %756, 0, !dbg !61
  %757 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %755, float 0xBFAAC795C0000000) #5, !dbg !61
  %758 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %755, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i557 = select i1 %.not1.i556, float %758, float %757, !dbg !61
  %759 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i558 = icmp eq i32 %759, 0, !dbg !61
  %760 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i557, float %755, float 0x3FC10B2820000000) #5, !dbg !61
  %761 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i557, float %755, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i559 = select i1 %.not2.i558, float %761, float %760, !dbg !61
  %762 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i560 = icmp eq i32 %762, 0, !dbg !61
  %763 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i559, float %755, float 0xBFD5553DA0000000) #5, !dbg !61
  %764 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i559, float %755, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i561 = select i1 %.not3.i560, float %764, float %763, !dbg !61
  %765 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i562 = icmp eq i32 %765, 0, !dbg !61
  %766 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i561, float %755, float 0.000000e+00) #5, !dbg !61
  %767 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i561, float %755, float 0.000000e+00) #5, !dbg !61
  %.04.i563 = select i1 %.not4.i562, float %767, float %766, !dbg !61
  %768 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i564 = icmp eq i32 %768, 0, !dbg !61
  %769 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i563, float %370, float %370) #5, !dbg !61
  %770 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i563, float %370, float %370) #5, !dbg !61
  %.02.i565 = select i1 %.not5.i564, float %770, float %769, !dbg !61
  br label %__nv_tanhf.exit566, !dbg !61

__nv_tanhf.exit566:                               ; preds = %__internal_fmad.exit1.i550, %__internal_fmad.exit3.i555
  %s.1.i554 = phi float [ %754, %__internal_fmad.exit1.i550 ], [ %.02.i565, %__internal_fmad.exit3.i555 ], !dbg !61
  %771 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i567 = icmp eq i32 %771, 0, !dbg !61
  %772 = tail call float @llvm.nvvm.fabs.ftz.f(float %371) #5, !dbg !61
  %773 = tail call float @llvm.nvvm.fabs.f(float %371) #5, !dbg !61
  %.01.i568 = select i1 %.not.i567, float %773, float %772, !dbg !61
  %774 = fcmp ult float %.01.i568, 0x3FE3333340000000, !dbg !61
  br i1 %774, label %__internal_fmad.exit3.i574, label %__internal_fmad.exit1.i569, !dbg !61

__internal_fmad.exit1.i569:                       ; preds = %__nv_tanhf.exit566
  %775 = fmul float %.01.i568, 0x4007154760000000, !dbg !61
  %776 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %775) #5, !dbg !61
  %777 = fadd float %776, 1.000000e+00, !dbg !61
  %778 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %777) #6, !dbg !61, !srcloc !62
  %779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i570 = icmp eq i32 %779, 0, !dbg !61
  %780 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %778, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %781 = tail call float @llvm.nvvm.fma.rn.f(float %778, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i571 = select i1 %.not6.i570, float %781, float %780, !dbg !61
  %782 = fcmp oge float %.01.i568, 0x4022059680000000, !dbg !61
  %s.0.i572 = select i1 %782, float 1.000000e+00, float %.03.i571, !dbg !61
  %783 = bitcast float %s.0.i572 to i32, !dbg !61
  %784 = bitcast float %371 to i32, !dbg !61
  %785 = and i32 %784, -2147483648, !dbg !61
  %786 = or i32 %785, %783, !dbg !61
  %787 = bitcast i32 %786 to float, !dbg !61
  br label %__nv_tanhf.exit585, !dbg !61

__internal_fmad.exit3.i574:                       ; preds = %__nv_tanhf.exit566
  %788 = fmul float %371, %371, !dbg !61
  %789 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i575 = icmp eq i32 %789, 0, !dbg !61
  %790 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %788, float 0xBFAAC795C0000000) #5, !dbg !61
  %791 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %788, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i576 = select i1 %.not1.i575, float %791, float %790, !dbg !61
  %792 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i577 = icmp eq i32 %792, 0, !dbg !61
  %793 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i576, float %788, float 0x3FC10B2820000000) #5, !dbg !61
  %794 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i576, float %788, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i578 = select i1 %.not2.i577, float %794, float %793, !dbg !61
  %795 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i579 = icmp eq i32 %795, 0, !dbg !61
  %796 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i578, float %788, float 0xBFD5553DA0000000) #5, !dbg !61
  %797 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i578, float %788, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i580 = select i1 %.not3.i579, float %797, float %796, !dbg !61
  %798 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i581 = icmp eq i32 %798, 0, !dbg !61
  %799 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i580, float %788, float 0.000000e+00) #5, !dbg !61
  %800 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i580, float %788, float 0.000000e+00) #5, !dbg !61
  %.04.i582 = select i1 %.not4.i581, float %800, float %799, !dbg !61
  %801 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i583 = icmp eq i32 %801, 0, !dbg !61
  %802 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i582, float %371, float %371) #5, !dbg !61
  %803 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i582, float %371, float %371) #5, !dbg !61
  %.02.i584 = select i1 %.not5.i583, float %803, float %802, !dbg !61
  br label %__nv_tanhf.exit585, !dbg !61

__nv_tanhf.exit585:                               ; preds = %__internal_fmad.exit1.i569, %__internal_fmad.exit3.i574
  %s.1.i573 = phi float [ %787, %__internal_fmad.exit1.i569 ], [ %.02.i584, %__internal_fmad.exit3.i574 ], !dbg !61
  %804 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i586 = icmp eq i32 %804, 0, !dbg !61
  %805 = tail call float @llvm.nvvm.fabs.ftz.f(float %372) #5, !dbg !61
  %806 = tail call float @llvm.nvvm.fabs.f(float %372) #5, !dbg !61
  %.01.i587 = select i1 %.not.i586, float %806, float %805, !dbg !61
  %807 = fcmp ult float %.01.i587, 0x3FE3333340000000, !dbg !61
  br i1 %807, label %__internal_fmad.exit3.i593, label %__internal_fmad.exit1.i588, !dbg !61

__internal_fmad.exit1.i588:                       ; preds = %__nv_tanhf.exit585
  %808 = fmul float %.01.i587, 0x4007154760000000, !dbg !61
  %809 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %808) #5, !dbg !61
  %810 = fadd float %809, 1.000000e+00, !dbg !61
  %811 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %810) #6, !dbg !61, !srcloc !62
  %812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i589 = icmp eq i32 %812, 0, !dbg !61
  %813 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %811, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %814 = tail call float @llvm.nvvm.fma.rn.f(float %811, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i590 = select i1 %.not6.i589, float %814, float %813, !dbg !61
  %815 = fcmp oge float %.01.i587, 0x4022059680000000, !dbg !61
  %s.0.i591 = select i1 %815, float 1.000000e+00, float %.03.i590, !dbg !61
  %816 = bitcast float %s.0.i591 to i32, !dbg !61
  %817 = bitcast float %372 to i32, !dbg !61
  %818 = and i32 %817, -2147483648, !dbg !61
  %819 = or i32 %818, %816, !dbg !61
  %820 = bitcast i32 %819 to float, !dbg !61
  br label %__nv_tanhf.exit604, !dbg !61

__internal_fmad.exit3.i593:                       ; preds = %__nv_tanhf.exit585
  %821 = fmul float %372, %372, !dbg !61
  %822 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i594 = icmp eq i32 %822, 0, !dbg !61
  %823 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %821, float 0xBFAAC795C0000000) #5, !dbg !61
  %824 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %821, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i595 = select i1 %.not1.i594, float %824, float %823, !dbg !61
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i596 = icmp eq i32 %825, 0, !dbg !61
  %826 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i595, float %821, float 0x3FC10B2820000000) #5, !dbg !61
  %827 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i595, float %821, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i597 = select i1 %.not2.i596, float %827, float %826, !dbg !61
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i598 = icmp eq i32 %828, 0, !dbg !61
  %829 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i597, float %821, float 0xBFD5553DA0000000) #5, !dbg !61
  %830 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i597, float %821, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i599 = select i1 %.not3.i598, float %830, float %829, !dbg !61
  %831 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i600 = icmp eq i32 %831, 0, !dbg !61
  %832 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i599, float %821, float 0.000000e+00) #5, !dbg !61
  %833 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i599, float %821, float 0.000000e+00) #5, !dbg !61
  %.04.i601 = select i1 %.not4.i600, float %833, float %832, !dbg !61
  %834 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i602 = icmp eq i32 %834, 0, !dbg !61
  %835 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i601, float %372, float %372) #5, !dbg !61
  %836 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i601, float %372, float %372) #5, !dbg !61
  %.02.i603 = select i1 %.not5.i602, float %836, float %835, !dbg !61
  br label %__nv_tanhf.exit604, !dbg !61

__nv_tanhf.exit604:                               ; preds = %__internal_fmad.exit1.i588, %__internal_fmad.exit3.i593
  %s.1.i592 = phi float [ %820, %__internal_fmad.exit1.i588 ], [ %.02.i603, %__internal_fmad.exit3.i593 ], !dbg !61
  %837 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i605 = icmp eq i32 %837, 0, !dbg !61
  %838 = tail call float @llvm.nvvm.fabs.ftz.f(float %373) #5, !dbg !61
  %839 = tail call float @llvm.nvvm.fabs.f(float %373) #5, !dbg !61
  %.01.i606 = select i1 %.not.i605, float %839, float %838, !dbg !61
  %840 = fcmp ult float %.01.i606, 0x3FE3333340000000, !dbg !61
  br i1 %840, label %__internal_fmad.exit3.i612, label %__internal_fmad.exit1.i607, !dbg !61

__internal_fmad.exit1.i607:                       ; preds = %__nv_tanhf.exit604
  %841 = fmul float %.01.i606, 0x4007154760000000, !dbg !61
  %842 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %841) #5, !dbg !61
  %843 = fadd float %842, 1.000000e+00, !dbg !61
  %844 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %843) #6, !dbg !61, !srcloc !62
  %845 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i608 = icmp eq i32 %845, 0, !dbg !61
  %846 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %844, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %847 = tail call float @llvm.nvvm.fma.rn.f(float %844, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i609 = select i1 %.not6.i608, float %847, float %846, !dbg !61
  %848 = fcmp oge float %.01.i606, 0x4022059680000000, !dbg !61
  %s.0.i610 = select i1 %848, float 1.000000e+00, float %.03.i609, !dbg !61
  %849 = bitcast float %s.0.i610 to i32, !dbg !61
  %850 = bitcast float %373 to i32, !dbg !61
  %851 = and i32 %850, -2147483648, !dbg !61
  %852 = or i32 %851, %849, !dbg !61
  %853 = bitcast i32 %852 to float, !dbg !61
  br label %__nv_tanhf.exit623, !dbg !61

__internal_fmad.exit3.i612:                       ; preds = %__nv_tanhf.exit604
  %854 = fmul float %373, %373, !dbg !61
  %855 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i613 = icmp eq i32 %855, 0, !dbg !61
  %856 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %854, float 0xBFAAC795C0000000) #5, !dbg !61
  %857 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %854, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i614 = select i1 %.not1.i613, float %857, float %856, !dbg !61
  %858 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i615 = icmp eq i32 %858, 0, !dbg !61
  %859 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i614, float %854, float 0x3FC10B2820000000) #5, !dbg !61
  %860 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i614, float %854, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i616 = select i1 %.not2.i615, float %860, float %859, !dbg !61
  %861 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i617 = icmp eq i32 %861, 0, !dbg !61
  %862 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i616, float %854, float 0xBFD5553DA0000000) #5, !dbg !61
  %863 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i616, float %854, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i618 = select i1 %.not3.i617, float %863, float %862, !dbg !61
  %864 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i619 = icmp eq i32 %864, 0, !dbg !61
  %865 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i618, float %854, float 0.000000e+00) #5, !dbg !61
  %866 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i618, float %854, float 0.000000e+00) #5, !dbg !61
  %.04.i620 = select i1 %.not4.i619, float %866, float %865, !dbg !61
  %867 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i621 = icmp eq i32 %867, 0, !dbg !61
  %868 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i620, float %373, float %373) #5, !dbg !61
  %869 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i620, float %373, float %373) #5, !dbg !61
  %.02.i622 = select i1 %.not5.i621, float %869, float %868, !dbg !61
  br label %__nv_tanhf.exit623, !dbg !61

__nv_tanhf.exit623:                               ; preds = %__internal_fmad.exit1.i607, %__internal_fmad.exit3.i612
  %s.1.i611 = phi float [ %853, %__internal_fmad.exit1.i607 ], [ %.02.i622, %__internal_fmad.exit3.i612 ], !dbg !61
  %870 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not.i624 = icmp eq i32 %870, 0, !dbg !61
  %871 = tail call float @llvm.nvvm.fabs.ftz.f(float %374) #5, !dbg !61
  %872 = tail call float @llvm.nvvm.fabs.f(float %374) #5, !dbg !61
  %.01.i625 = select i1 %.not.i624, float %872, float %871, !dbg !61
  %873 = fcmp ult float %.01.i625, 0x3FE3333340000000, !dbg !61
  br i1 %873, label %__internal_fmad.exit3.i631, label %__internal_fmad.exit1.i626, !dbg !61

__internal_fmad.exit1.i626:                       ; preds = %__nv_tanhf.exit623
  %874 = fmul float %.01.i625, 0x4007154760000000, !dbg !61
  %875 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %874) #5, !dbg !61
  %876 = fadd float %875, 1.000000e+00, !dbg !61
  %877 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %876) #6, !dbg !61, !srcloc !62
  %878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not6.i627 = icmp eq i32 %878, 0, !dbg !61
  %879 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %877, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %880 = tail call float @llvm.nvvm.fma.rn.f(float %877, float -2.000000e+00, float 1.000000e+00) #5, !dbg !61
  %.03.i628 = select i1 %.not6.i627, float %880, float %879, !dbg !61
  %881 = fcmp oge float %.01.i625, 0x4022059680000000, !dbg !61
  %s.0.i629 = select i1 %881, float 1.000000e+00, float %.03.i628, !dbg !61
  %882 = bitcast float %s.0.i629 to i32, !dbg !61
  %883 = bitcast float %374 to i32, !dbg !61
  %884 = and i32 %883, -2147483648, !dbg !61
  %885 = or i32 %884, %882, !dbg !61
  %886 = bitcast i32 %885 to float, !dbg !61
  br label %__nv_tanhf.exit642, !dbg !61

__internal_fmad.exit3.i631:                       ; preds = %__nv_tanhf.exit623
  %887 = fmul float %374, %374, !dbg !61
  %888 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not1.i632 = icmp eq i32 %888, 0, !dbg !61
  %889 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %887, float 0xBFAAC795C0000000) #5, !dbg !61
  %890 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %887, float 0xBFAAC795C0000000) #5, !dbg !61
  %.06.i633 = select i1 %.not1.i632, float %890, float %889, !dbg !61
  %891 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not2.i634 = icmp eq i32 %891, 0, !dbg !61
  %892 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i633, float %887, float 0x3FC10B2820000000) #5, !dbg !61
  %893 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i633, float %887, float 0x3FC10B2820000000) #5, !dbg !61
  %.05.i635 = select i1 %.not2.i634, float %893, float %892, !dbg !61
  %894 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not3.i636 = icmp eq i32 %894, 0, !dbg !61
  %895 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i635, float %887, float 0xBFD5553DA0000000) #5, !dbg !61
  %896 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i635, float %887, float 0xBFD5553DA0000000) #5, !dbg !61
  %.0.i637 = select i1 %.not3.i636, float %896, float %895, !dbg !61
  %897 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not4.i638 = icmp eq i32 %897, 0, !dbg !61
  %898 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i637, float %887, float 0.000000e+00) #5, !dbg !61
  %899 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i637, float %887, float 0.000000e+00) #5, !dbg !61
  %.04.i639 = select i1 %.not4.i638, float %899, float %898, !dbg !61
  %900 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !61
  %.not5.i640 = icmp eq i32 %900, 0, !dbg !61
  %901 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i639, float %374, float %374) #5, !dbg !61
  %902 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i639, float %374, float %374) #5, !dbg !61
  %.02.i641 = select i1 %.not5.i640, float %902, float %901, !dbg !61
  br label %__nv_tanhf.exit642, !dbg !61

__nv_tanhf.exit642:                               ; preds = %__internal_fmad.exit1.i626, %__internal_fmad.exit3.i631
  %s.1.i630 = phi float [ %886, %__internal_fmad.exit1.i626 ], [ %.02.i641, %__internal_fmad.exit3.i631 ], !dbg !61
  %903 = insertelement <4 x float> poison, float %s.1.i497, i64 0, !dbg !63
  %904 = insertelement <4 x float> %903, float %s.1.i345, i64 1, !dbg !63
  %905 = insertelement <4 x float> %904, float %s.1.i516, i64 2, !dbg !63
  %906 = insertelement <4 x float> %905, float %s.1.i364, i64 3, !dbg !63
  %907 = fadd <4 x float> %906, splat (float 1.000000e+00), !dbg !63
  %908 = insertelement <4 x float> poison, float %s.1.i440, i64 0, !dbg !63
  %909 = insertelement <4 x float> %908, float %s.1.i421, i64 1, !dbg !63
  %910 = insertelement <4 x float> %909, float %s.1.i402, i64 2, !dbg !63
  %911 = insertelement <4 x float> %910, float %s.1.i383, i64 3, !dbg !63
  %912 = fadd <4 x float> %911, splat (float 1.000000e+00), !dbg !63
  %913 = insertelement <8 x float> poison, float %s.1.i630, i64 0, !dbg !63
  %914 = insertelement <8 x float> %913, float %s.1.i611, i64 1, !dbg !63
  %915 = insertelement <8 x float> %914, float %s.1.i592, i64 2, !dbg !63
  %916 = insertelement <8 x float> %915, float %s.1.i573, i64 3, !dbg !63
  %917 = insertelement <8 x float> %916, float %s.1.i554, i64 4, !dbg !63
  %918 = insertelement <8 x float> %917, float %s.1.i535, i64 5, !dbg !63
  %919 = insertelement <8 x float> %918, float %s.1.i478, i64 6, !dbg !63
  %920 = insertelement <8 x float> %919, float %s.1.i459, i64 7, !dbg !63
  %921 = fadd <8 x float> %920, splat (float 1.000000e+00), !dbg !63
  %922 = fcmp uno <4 x float> %121, zeroinitializer, !dbg !64
  %923 = fcmp uno <4 x float> %120, zeroinitializer, !dbg !64
  %924 = fcmp uno <4 x float> %125, zeroinitializer, !dbg !66
  %925 = fcmp uno <8 x float> %122, zeroinitializer, !dbg !66
  %926 = fmul <8 x float> %278, %921, !dbg !68
  %927 = fcmp olt <8 x float> %122, %926, !dbg !69
  %928 = or <8 x i1> %925, %927, !dbg !70
  %929 = select <8 x i1> %928, <8 x float> %122, <8 x float> %926, !dbg !71
  %930 = select <8 x i1> %118, <8 x float> %929, <8 x float> %122, !dbg !40
  %931 = fcmp uno <4 x float> %124, zeroinitializer, !dbg !64
  %932 = fcmp uno <8 x float> %123, zeroinitializer, !dbg !64
  %933 = fmul <4 x float> %276, %912, !dbg !68
  %934 = fcmp olt <4 x float> %125, %933, !dbg !69
  %935 = or <4 x i1> %924, %934, !dbg !70
  %936 = select <4 x i1> %935, <4 x float> %125, <4 x float> %933, !dbg !71
  %937 = select <4 x i1> %116, <4 x float> %936, <4 x float> %125, !dbg !40
  %938 = fcmp ogt <4 x float> %124, %933, !dbg !72
  %939 = or <4 x i1> %931, %938, !dbg !73
  %940 = select <4 x i1> %939, <4 x float> %124, <4 x float> %933, !dbg !74
  %941 = fmul <4 x float> %277, %907, !dbg !68
  %942 = shufflevector <4 x float> %941, <4 x float> poison, <4 x i32> <i32 2, i32 3, i32 0, i32 1>, !dbg !72
  %943 = fcmp ogt <4 x float> %121, %942, !dbg !72
  %944 = fcmp olt <4 x float> %121, %942, !dbg !72
  %945 = shufflevector <4 x i1> %943, <4 x i1> %944, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !72
  %946 = or <4 x i1> %922, %945, !dbg !73
  %947 = select <4 x i1> %946, <4 x float> %121, <4 x float> %942, !dbg !74
  %948 = fcmp ogt <4 x float> %120, %941, !dbg !72
  %949 = fcmp olt <4 x float> %120, %941, !dbg !72
  %950 = shufflevector <4 x i1> %948, <4 x i1> %949, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !72
  %951 = or <4 x i1> %923, %950, !dbg !73
  %952 = select <4 x i1> %951, <4 x float> %120, <4 x float> %941, !dbg !74
  %953 = fcmp ogt <8 x float> %123, %926, !dbg !72
  %954 = or <8 x i1> %932, %953, !dbg !73
  %955 = select <8 x i1> %954, <8 x float> %123, <8 x float> %926, !dbg !74
  %956 = select <4 x i1> %116, <4 x float> %940, <4 x float> %124, !dbg !39
  %957 = select <4 x i1> %116, <4 x float> %952, <4 x float> %120, !dbg !39
  %958 = select <4 x i1> %116, <4 x float> %947, <4 x float> %121, !dbg !39
  %959 = select <8 x i1> %118, <8 x float> %955, <8 x float> %123, !dbg !39
  %960 = sext i32 %134 to i64, !dbg !75
  %961 = getelementptr float, ptr addrspace(1) %5, i64 %960, !dbg !75
  %962 = sext i32 %137 to i64, !dbg !75
  %963 = getelementptr float, ptr addrspace(1) %5, i64 %962, !dbg !75
  %964 = sext i32 %138 to i64, !dbg !75
  %965 = getelementptr float, ptr addrspace(1) %5, i64 %964, !dbg !75
  %966 = sext i32 %139 to i64, !dbg !75
  %967 = getelementptr float, ptr addrspace(1) %5, i64 %966, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %968 = bitcast float %279 to i32, !dbg !76
  %969 = bitcast float %281 to i32, !dbg !76
  %970 = bitcast float %283 to i32, !dbg !76
  %971 = bitcast float %285 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %103, i32 %968, i32 %969, i32 %970, i32 %971, i1 true) #5, !dbg !76
  %972 = bitcast float %287 to i32, !dbg !76
  %973 = bitcast float %289 to i32, !dbg !76
  %974 = bitcast float %291 to i32, !dbg !76
  %975 = bitcast float %293 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %105, i32 %972, i32 %973, i32 %974, i32 %975, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %976 = load <4 x i32>, ptr addrspace(3) %109, align 16, !dbg !76
  %977 = load <4 x i32>, ptr addrspace(3) %110, align 16, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %978 = bitcast float %295 to i32, !dbg !76
  %979 = bitcast float %297 to i32, !dbg !76
  %980 = bitcast float %299 to i32, !dbg !76
  %981 = bitcast float %301 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %103, i32 %978, i32 %979, i32 %980, i32 %981, i1 true) #5, !dbg !76
  %982 = bitcast float %303 to i32, !dbg !76
  %983 = bitcast float %305 to i32, !dbg !76
  %984 = bitcast float %307 to i32, !dbg !76
  %985 = bitcast float %309 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %105, i32 %982, i32 %983, i32 %984, i32 %985, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %986 = load <4 x i32>, ptr addrspace(3) %109, align 16, !dbg !76
  %987 = load <4 x i32>, ptr addrspace(3) %110, align 16, !dbg !76
  %.extract = extractelement <4 x i32> %976, i64 0, !dbg !76
  %.extract39 = extractelement <4 x i32> %976, i64 1, !dbg !76
  %.extract40 = extractelement <4 x i32> %976, i64 2, !dbg !76
  %.extract41 = extractelement <4 x i32> %976, i64 3, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract39, i32 %.extract40, i32 %.extract41, ptr addrspace(1) %961, i1 %21) #5, !dbg !76
  %.extract42 = extractelement <4 x i32> %977, i64 0, !dbg !76
  %.extract43 = extractelement <4 x i32> %977, i64 1, !dbg !76
  %.extract44 = extractelement <4 x i32> %977, i64 2, !dbg !76
  %.extract45 = extractelement <4 x i32> %977, i64 3, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract42, i32 %.extract43, i32 %.extract44, i32 %.extract45, ptr addrspace(1) %963, i1 %21) #5, !dbg !76
  %.extract46 = extractelement <4 x i32> %986, i64 0, !dbg !76
  %.extract47 = extractelement <4 x i32> %986, i64 1, !dbg !76
  %.extract48 = extractelement <4 x i32> %986, i64 2, !dbg !76
  %.extract49 = extractelement <4 x i32> %986, i64 3, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract46, i32 %.extract47, i32 %.extract48, i32 %.extract49, ptr addrspace(1) %965, i1 %22) #5, !dbg !76
  %.extract50 = extractelement <4 x i32> %987, i64 0, !dbg !76
  %.extract51 = extractelement <4 x i32> %987, i64 1, !dbg !76
  %.extract52 = extractelement <4 x i32> %987, i64 2, !dbg !76
  %.extract53 = extractelement <4 x i32> %987, i64 3, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract50, i32 %.extract51, i32 %.extract52, i32 %.extract53, ptr addrspace(1) %967, i1 %22) #5, !dbg !76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4096, !dbg !38
  %988 = icmp samesign ult i64 %indvars.iv, 8192, !dbg !38
  br i1 %988, label %119, label %989, !dbg !38

989:                                              ; preds = %__nv_tanhf.exit642
  %990 = lshr i32 %15, 5, !dbg !11
  %991 = and i32 %15, 1, !dbg !11
  %992 = or disjoint i32 %14, %991, !dbg !12
  %993 = icmp slt i32 %992, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %994 = fcmp ogt <4 x float> %957, %958, !dbg !79
  %995 = extractelement <4 x float> %958, i64 3, !dbg !82
  %996 = fcmp uno float %995, 0.000000e+00, !dbg !82
  %997 = extractelement <4 x i1> %994, i64 3, !dbg !83
  %998 = or i1 %997, %996, !dbg !83
  %999 = extractelement <4 x float> %957, i64 3, !dbg !84
  %1000 = select i1 %998, float %995, float %999, !dbg !84
  %1001 = extractelement <4 x float> %937, i64 3, !dbg !85
  %1002 = fcmp olt float %1000, %1001, !dbg !85
  %1003 = fcmp uno float %1000, 0.000000e+00, !dbg !82
  %1004 = or i1 %1002, %1003, !dbg !83
  %1005 = select i1 %1004, float %1000, float %1001, !dbg !84
  %1006 = extractelement <4 x float> %937, i64 2, !dbg !85
  %1007 = fcmp olt float %1005, %1006, !dbg !85
  %1008 = fcmp uno float %1005, 0.000000e+00, !dbg !82
  %1009 = or i1 %1007, %1008, !dbg !83
  %1010 = select i1 %1009, float %1005, float %1006, !dbg !84
  %1011 = extractelement <4 x float> %937, i64 1, !dbg !85
  %1012 = fcmp olt float %1010, %1011, !dbg !85
  %1013 = fcmp uno float %1010, 0.000000e+00, !dbg !82
  %1014 = or i1 %1012, %1013, !dbg !83
  %1015 = select i1 %1014, float %1010, float %1011, !dbg !84
  %1016 = extractelement <4 x float> %937, i64 0, !dbg !85
  %1017 = fcmp olt float %1015, %1016, !dbg !85
  %1018 = fcmp uno float %1015, 0.000000e+00, !dbg !82
  %1019 = or i1 %1017, %1018, !dbg !83
  %1020 = select i1 %1019, float %1015, float %1016, !dbg !84
  %1021 = extractelement <8 x float> %930, i64 7, !dbg !85
  %1022 = fcmp olt float %1020, %1021, !dbg !85
  %1023 = fcmp uno float %1020, 0.000000e+00, !dbg !82
  %1024 = or i1 %1022, %1023, !dbg !83
  %1025 = select i1 %1024, float %1020, float %1021, !dbg !84
  %1026 = extractelement <8 x float> %930, i64 6, !dbg !85
  %1027 = fcmp olt float %1025, %1026, !dbg !85
  %1028 = fcmp uno float %1025, 0.000000e+00, !dbg !82
  %1029 = or i1 %1027, %1028, !dbg !83
  %1030 = select i1 %1029, float %1025, float %1026, !dbg !84
  %1031 = extractelement <4 x float> %958, i64 2, !dbg !82
  %1032 = fcmp uno float %1031, 0.000000e+00, !dbg !82
  %1033 = extractelement <4 x i1> %994, i64 2, !dbg !83
  %1034 = or i1 %1033, %1032, !dbg !83
  %1035 = extractelement <4 x float> %957, i64 2, !dbg !84
  %1036 = select i1 %1034, float %1031, float %1035, !dbg !84
  %1037 = extractelement <8 x float> %930, i64 5, !dbg !85
  %1038 = fcmp olt float %1036, %1037, !dbg !85
  %1039 = fcmp uno float %1036, 0.000000e+00, !dbg !82
  %1040 = or i1 %1038, %1039, !dbg !83
  %1041 = select i1 %1040, float %1036, float %1037, !dbg !84
  %1042 = extractelement <8 x float> %930, i64 4, !dbg !85
  %1043 = fcmp olt float %1041, %1042, !dbg !85
  %1044 = fcmp uno float %1041, 0.000000e+00, !dbg !82
  %1045 = or i1 %1043, %1044, !dbg !83
  %1046 = select i1 %1045, float %1041, float %1042, !dbg !84
  %1047 = extractelement <8 x float> %930, i64 3, !dbg !85
  %1048 = fcmp olt float %1046, %1047, !dbg !85
  %1049 = fcmp uno float %1046, 0.000000e+00, !dbg !82
  %1050 = or i1 %1048, %1049, !dbg !83
  %1051 = select i1 %1050, float %1046, float %1047, !dbg !84
  %1052 = extractelement <8 x float> %930, i64 2, !dbg !85
  %1053 = fcmp olt float %1051, %1052, !dbg !85
  %1054 = fcmp uno float %1051, 0.000000e+00, !dbg !82
  %1055 = or i1 %1053, %1054, !dbg !83
  %1056 = select i1 %1055, float %1051, float %1052, !dbg !84
  %1057 = extractelement <8 x float> %930, i64 1, !dbg !85
  %1058 = fcmp olt float %1056, %1057, !dbg !85
  %1059 = fcmp uno float %1056, 0.000000e+00, !dbg !82
  %1060 = or i1 %1058, %1059, !dbg !83
  %1061 = select i1 %1060, float %1056, float %1057, !dbg !84
  %1062 = extractelement <8 x float> %930, i64 0, !dbg !85
  %1063 = fcmp olt float %1061, %1062, !dbg !85
  %1064 = fcmp uno float %1061, 0.000000e+00, !dbg !82
  %1065 = or i1 %1063, %1064, !dbg !83
  %1066 = select i1 %1065, float %1061, float %1062, !dbg !84
  %1067 = bitcast float %1030 to i32, !dbg !77
  %1068 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1067, i32 16, i32 31), !dbg !77
  %1069 = bitcast i32 %1068 to float, !dbg !77
  %1070 = fcmp olt float %1030, %1069, !dbg !85
  %1071 = fcmp uno float %1030, 0.000000e+00, !dbg !82
  %1072 = or i1 %1071, %1070, !dbg !83
  %1073 = select i1 %1072, float %1030, float %1069, !dbg !84
  %1074 = bitcast float %1073 to i32, !dbg !77
  %1075 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1074, i32 8, i32 31), !dbg !77
  %1076 = bitcast i32 %1075 to float, !dbg !77
  %1077 = fcmp olt float %1073, %1076, !dbg !85
  %1078 = fcmp uno float %1073, 0.000000e+00, !dbg !82
  %1079 = or i1 %1077, %1078, !dbg !83
  %1080 = select i1 %1079, float %1073, float %1076, !dbg !84
  %1081 = bitcast float %1080 to i32, !dbg !77
  %1082 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1081, i32 4, i32 31), !dbg !77
  %1083 = bitcast i32 %1082 to float, !dbg !77
  %1084 = fcmp olt float %1080, %1083, !dbg !85
  %1085 = fcmp uno float %1080, 0.000000e+00, !dbg !82
  %1086 = or i1 %1084, %1085, !dbg !83
  %1087 = select i1 %1086, float %1080, float %1083, !dbg !84
  %1088 = bitcast float %1087 to i32, !dbg !77
  %1089 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1088, i32 2, i32 31), !dbg !77
  %1090 = bitcast i32 %1089 to float, !dbg !77
  %1091 = fcmp olt float %1087, %1090, !dbg !85
  %1092 = fcmp uno float %1087, 0.000000e+00, !dbg !82
  %1093 = or i1 %1091, %1092, !dbg !83
  %1094 = select i1 %1093, float %1087, float %1090, !dbg !84
  %1095 = bitcast float %1094 to i32, !dbg !77
  %1096 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1095, i32 1, i32 31), !dbg !77
  %1097 = bitcast i32 %1096 to float, !dbg !77
  %1098 = fcmp olt float %1094, %1097, !dbg !85
  %1099 = fcmp uno float %1094, 0.000000e+00, !dbg !82
  %1100 = or i1 %1098, %1099, !dbg !83
  %1101 = bitcast float %1066 to i32, !dbg !77
  %1102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1101, i32 16, i32 31), !dbg !77
  %1103 = bitcast i32 %1102 to float, !dbg !77
  %1104 = fcmp olt float %1066, %1103, !dbg !85
  %1105 = fcmp uno float %1066, 0.000000e+00, !dbg !82
  %1106 = or i1 %1105, %1104, !dbg !83
  %1107 = select i1 %1106, float %1066, float %1103, !dbg !84
  %1108 = bitcast float %1107 to i32, !dbg !77
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 8, i32 31), !dbg !77
  %1110 = bitcast i32 %1109 to float, !dbg !77
  %1111 = fcmp olt float %1107, %1110, !dbg !85
  %1112 = fcmp uno float %1107, 0.000000e+00, !dbg !82
  %1113 = or i1 %1111, %1112, !dbg !83
  %1114 = select i1 %1113, float %1107, float %1110, !dbg !84
  %1115 = bitcast float %1114 to i32, !dbg !77
  %1116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1115, i32 4, i32 31), !dbg !77
  %1117 = bitcast i32 %1116 to float, !dbg !77
  %1118 = fcmp olt float %1114, %1117, !dbg !85
  %1119 = fcmp uno float %1114, 0.000000e+00, !dbg !82
  %1120 = or i1 %1118, %1119, !dbg !83
  %1121 = select i1 %1120, float %1114, float %1117, !dbg !84
  %1122 = bitcast float %1121 to i32, !dbg !77
  %1123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1122, i32 2, i32 31), !dbg !77
  %1124 = bitcast i32 %1123 to float, !dbg !77
  %1125 = fcmp olt float %1121, %1124, !dbg !85
  %1126 = fcmp uno float %1121, 0.000000e+00, !dbg !82
  %1127 = or i1 %1125, %1126, !dbg !83
  %1128 = select i1 %1127, float %1121, float %1124, !dbg !84
  %1129 = bitcast float %1128 to i32, !dbg !77
  %1130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1129, i32 1, i32 31), !dbg !77
  %1131 = bitcast i32 %1130 to float, !dbg !77
  %1132 = fcmp olt float %1128, %1131, !dbg !85
  %1133 = fcmp uno float %1128, 0.000000e+00, !dbg !82
  %1134 = or i1 %1132, %1133, !dbg !83
  %1135 = and i32 %990, 15, !dbg !77
  %1136 = icmp eq i32 %17, 0, !dbg !77
  %1137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1135, !dbg !77
  %1138 = select i1 %1100, i32 %1095, i32 %1096, !dbg !84
  %1139 = insertelement <1 x i32> poison, i32 %1138, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1137, <1 x i32> %1139, i1 %1136) #5, !dbg !77
  %1140 = or disjoint i32 %1135, 16, !dbg !77
  %1141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1140, !dbg !77
  %1142 = select i1 %1134, i32 %1129, i32 %1130, !dbg !84
  %1143 = insertelement <1 x i32> poison, i32 %1142, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1141, <1 x i32> %1143, i1 %1136) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %1144 = icmp slt i32 %15, 32, !dbg !77
  %1145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !77
  %1146 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1145, i1 %1144) #5, !dbg !77
  %1147 = bitcast i32 %1146 to float, !dbg !77
  %1148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1146, i32 8, i32 31), !dbg !77
  %1149 = bitcast i32 %1148 to float, !dbg !77
  %1150 = fcmp olt float %1147, %1149, !dbg !85
  %1151 = fcmp uno float %1147, 0.000000e+00, !dbg !82
  %1152 = or i1 %1151, %1150, !dbg !83
  %1153 = select i1 %1152, float %1147, float %1149, !dbg !84
  %1154 = bitcast float %1153 to i32, !dbg !77
  %1155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1154, i32 4, i32 31), !dbg !77
  %1156 = bitcast i32 %1155 to float, !dbg !77
  %1157 = fcmp olt float %1153, %1156, !dbg !85
  %1158 = fcmp uno float %1153, 0.000000e+00, !dbg !82
  %1159 = or i1 %1157, %1158, !dbg !83
  %1160 = select i1 %1159, float %1153, float %1156, !dbg !84
  %1161 = bitcast float %1160 to i32, !dbg !77
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 2, i32 31), !dbg !77
  %1163 = bitcast i32 %1162 to float, !dbg !77
  %1164 = fcmp olt float %1160, %1163, !dbg !85
  %1165 = fcmp uno float %1160, 0.000000e+00, !dbg !82
  %1166 = or i1 %1164, %1165, !dbg !83
  %1167 = select i1 %1166, float %1160, float %1163, !dbg !84
  %1168 = bitcast float %1167 to i32, !dbg !77
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 1, i32 31), !dbg !77
  %1170 = bitcast i32 %1169 to float, !dbg !77
  %1171 = fcmp olt float %1167, %1170, !dbg !85
  %1172 = fcmp uno float %1167, 0.000000e+00, !dbg !82
  %1173 = or i1 %1171, %1172, !dbg !83
  %1174 = and i32 %15, 15, !dbg !77
  %1175 = icmp eq i32 %1174, 0, !dbg !77
  %1176 = and i1 %1144, %1175, !dbg !77
  %1177 = select i1 %1173, i32 %1168, i32 %1169, !dbg !84
  %1178 = insertelement <1 x i32> poison, i32 %1177, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1145, <1 x i32> %1178, i1 %1176) #5, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %1179 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !77
  %1180 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %1181 = bitcast float %1179 to i32, !dbg !86
  %1182 = bitcast float %1180 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1181, i32 %1182, i1 true) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %1183 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %991, !dbg !86
  %1184 = load float, ptr addrspace(3) %1183, align 4, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1185 = extractelement <4 x float> %957, i64 1, !dbg !88
  %1186 = fcmp uno float %1185, 0.000000e+00, !dbg !88
  %1187 = extractelement <4 x i1> %994, i64 1, !dbg !89
  %1188 = or i1 %1187, %1186, !dbg !89
  %1189 = extractelement <4 x float> %958, i64 1, !dbg !90
  %1190 = select i1 %1188, float %1185, float %1189, !dbg !90
  %1191 = extractelement <4 x float> %956, i64 3, !dbg !79
  %1192 = fcmp ogt float %1190, %1191, !dbg !79
  %1193 = fcmp uno float %1190, 0.000000e+00, !dbg !88
  %1194 = or i1 %1192, %1193, !dbg !89
  %1195 = select i1 %1194, float %1190, float %1191, !dbg !90
  %1196 = extractelement <4 x float> %956, i64 2, !dbg !79
  %1197 = fcmp ogt float %1195, %1196, !dbg !79
  %1198 = fcmp uno float %1195, 0.000000e+00, !dbg !88
  %1199 = or i1 %1197, %1198, !dbg !89
  %1200 = select i1 %1199, float %1195, float %1196, !dbg !90
  %1201 = extractelement <4 x float> %956, i64 1, !dbg !79
  %1202 = fcmp ogt float %1200, %1201, !dbg !79
  %1203 = fcmp uno float %1200, 0.000000e+00, !dbg !88
  %1204 = or i1 %1202, %1203, !dbg !89
  %1205 = select i1 %1204, float %1200, float %1201, !dbg !90
  %1206 = extractelement <4 x float> %956, i64 0, !dbg !79
  %1207 = fcmp ogt float %1205, %1206, !dbg !79
  %1208 = fcmp uno float %1205, 0.000000e+00, !dbg !88
  %1209 = or i1 %1207, %1208, !dbg !89
  %1210 = select i1 %1209, float %1205, float %1206, !dbg !90
  %1211 = extractelement <8 x float> %959, i64 7, !dbg !79
  %1212 = fcmp ogt float %1210, %1211, !dbg !79
  %1213 = fcmp uno float %1210, 0.000000e+00, !dbg !88
  %1214 = or i1 %1212, %1213, !dbg !89
  %1215 = select i1 %1214, float %1210, float %1211, !dbg !90
  %1216 = extractelement <8 x float> %959, i64 6, !dbg !79
  %1217 = fcmp ogt float %1215, %1216, !dbg !79
  %1218 = fcmp uno float %1215, 0.000000e+00, !dbg !88
  %1219 = or i1 %1217, %1218, !dbg !89
  %1220 = select i1 %1219, float %1215, float %1216, !dbg !90
  %1221 = extractelement <4 x float> %957, i64 0, !dbg !88
  %1222 = fcmp uno float %1221, 0.000000e+00, !dbg !88
  %1223 = extractelement <4 x i1> %994, i64 0, !dbg !89
  %1224 = or i1 %1223, %1222, !dbg !89
  %1225 = extractelement <4 x float> %958, i64 0, !dbg !90
  %1226 = select i1 %1224, float %1221, float %1225, !dbg !90
  %1227 = extractelement <8 x float> %959, i64 5, !dbg !79
  %1228 = fcmp ogt float %1226, %1227, !dbg !79
  %1229 = fcmp uno float %1226, 0.000000e+00, !dbg !88
  %1230 = or i1 %1228, %1229, !dbg !89
  %1231 = select i1 %1230, float %1226, float %1227, !dbg !90
  %1232 = extractelement <8 x float> %959, i64 4, !dbg !79
  %1233 = fcmp ogt float %1231, %1232, !dbg !79
  %1234 = fcmp uno float %1231, 0.000000e+00, !dbg !88
  %1235 = or i1 %1233, %1234, !dbg !89
  %1236 = select i1 %1235, float %1231, float %1232, !dbg !90
  %1237 = extractelement <8 x float> %959, i64 3, !dbg !79
  %1238 = fcmp ogt float %1236, %1237, !dbg !79
  %1239 = fcmp uno float %1236, 0.000000e+00, !dbg !88
  %1240 = or i1 %1238, %1239, !dbg !89
  %1241 = select i1 %1240, float %1236, float %1237, !dbg !90
  %1242 = extractelement <8 x float> %959, i64 2, !dbg !79
  %1243 = fcmp ogt float %1241, %1242, !dbg !79
  %1244 = fcmp uno float %1241, 0.000000e+00, !dbg !88
  %1245 = or i1 %1243, %1244, !dbg !89
  %1246 = select i1 %1245, float %1241, float %1242, !dbg !90
  %1247 = extractelement <8 x float> %959, i64 1, !dbg !79
  %1248 = fcmp ogt float %1246, %1247, !dbg !79
  %1249 = fcmp uno float %1246, 0.000000e+00, !dbg !88
  %1250 = or i1 %1248, %1249, !dbg !89
  %1251 = select i1 %1250, float %1246, float %1247, !dbg !90
  %1252 = extractelement <8 x float> %959, i64 0, !dbg !79
  %1253 = fcmp ogt float %1251, %1252, !dbg !79
  %1254 = fcmp uno float %1251, 0.000000e+00, !dbg !88
  %1255 = or i1 %1253, %1254, !dbg !89
  %1256 = select i1 %1255, float %1251, float %1252, !dbg !90
  %1257 = bitcast float %1220 to i32, !dbg !87
  %1258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1257, i32 16, i32 31), !dbg !87
  %1259 = bitcast i32 %1258 to float, !dbg !87
  %1260 = fcmp ogt float %1220, %1259, !dbg !79
  %1261 = fcmp uno float %1220, 0.000000e+00, !dbg !88
  %1262 = or i1 %1261, %1260, !dbg !89
  %1263 = select i1 %1262, float %1220, float %1259, !dbg !90
  %1264 = bitcast float %1263 to i32, !dbg !87
  %1265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 8, i32 31), !dbg !87
  %1266 = bitcast i32 %1265 to float, !dbg !87
  %1267 = fcmp ogt float %1263, %1266, !dbg !79
  %1268 = fcmp uno float %1263, 0.000000e+00, !dbg !88
  %1269 = or i1 %1267, %1268, !dbg !89
  %1270 = select i1 %1269, float %1263, float %1266, !dbg !90
  %1271 = bitcast float %1270 to i32, !dbg !87
  %1272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 4, i32 31), !dbg !87
  %1273 = bitcast i32 %1272 to float, !dbg !87
  %1274 = fcmp ogt float %1270, %1273, !dbg !79
  %1275 = fcmp uno float %1270, 0.000000e+00, !dbg !88
  %1276 = or i1 %1274, %1275, !dbg !89
  %1277 = select i1 %1276, float %1270, float %1273, !dbg !90
  %1278 = bitcast float %1277 to i32, !dbg !87
  %1279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1278, i32 2, i32 31), !dbg !87
  %1280 = bitcast i32 %1279 to float, !dbg !87
  %1281 = fcmp ogt float %1277, %1280, !dbg !79
  %1282 = fcmp uno float %1277, 0.000000e+00, !dbg !88
  %1283 = or i1 %1281, %1282, !dbg !89
  %1284 = select i1 %1283, float %1277, float %1280, !dbg !90
  %1285 = bitcast float %1284 to i32, !dbg !87
  %1286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1285, i32 1, i32 31), !dbg !87
  %1287 = bitcast i32 %1286 to float, !dbg !87
  %1288 = fcmp ogt float %1284, %1287, !dbg !79
  %1289 = fcmp uno float %1284, 0.000000e+00, !dbg !88
  %1290 = or i1 %1288, %1289, !dbg !89
  %1291 = bitcast float %1256 to i32, !dbg !87
  %1292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1291, i32 16, i32 31), !dbg !87
  %1293 = bitcast i32 %1292 to float, !dbg !87
  %1294 = fcmp ogt float %1256, %1293, !dbg !79
  %1295 = fcmp uno float %1256, 0.000000e+00, !dbg !88
  %1296 = or i1 %1295, %1294, !dbg !89
  %1297 = select i1 %1296, float %1256, float %1293, !dbg !90
  %1298 = bitcast float %1297 to i32, !dbg !87
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1298, i32 8, i32 31), !dbg !87
  %1300 = bitcast i32 %1299 to float, !dbg !87
  %1301 = fcmp ogt float %1297, %1300, !dbg !79
  %1302 = fcmp uno float %1297, 0.000000e+00, !dbg !88
  %1303 = or i1 %1301, %1302, !dbg !89
  %1304 = select i1 %1303, float %1297, float %1300, !dbg !90
  %1305 = bitcast float %1304 to i32, !dbg !87
  %1306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1305, i32 4, i32 31), !dbg !87
  %1307 = bitcast i32 %1306 to float, !dbg !87
  %1308 = fcmp ogt float %1304, %1307, !dbg !79
  %1309 = fcmp uno float %1304, 0.000000e+00, !dbg !88
  %1310 = or i1 %1308, %1309, !dbg !89
  %1311 = select i1 %1310, float %1304, float %1307, !dbg !90
  %1312 = bitcast float %1311 to i32, !dbg !87
  %1313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1312, i32 2, i32 31), !dbg !87
  %1314 = bitcast i32 %1313 to float, !dbg !87
  %1315 = fcmp ogt float %1311, %1314, !dbg !79
  %1316 = fcmp uno float %1311, 0.000000e+00, !dbg !88
  %1317 = or i1 %1315, %1316, !dbg !89
  %1318 = select i1 %1317, float %1311, float %1314, !dbg !90
  %1319 = bitcast float %1318 to i32, !dbg !87
  %1320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1319, i32 1, i32 31), !dbg !87
  %1321 = bitcast i32 %1320 to float, !dbg !87
  %1322 = fcmp ogt float %1318, %1321, !dbg !79
  %1323 = fcmp uno float %1318, 0.000000e+00, !dbg !88
  %1324 = or i1 %1322, %1323, !dbg !89
  %1325 = select i1 %1290, i32 %1285, i32 %1286, !dbg !90
  %1326 = insertelement <1 x i32> poison, i32 %1325, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1137, <1 x i32> %1326, i1 %1136) #5, !dbg !87
  %1327 = select i1 %1324, i32 %1319, i32 %1320, !dbg !90
  %1328 = insertelement <1 x i32> poison, i32 %1327, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1141, <1 x i32> %1328, i1 %1136) #5, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1329 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1145, i1 %1144) #5, !dbg !87
  %1330 = bitcast i32 %1329 to float, !dbg !87
  %1331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1329, i32 8, i32 31), !dbg !87
  %1332 = bitcast i32 %1331 to float, !dbg !87
  %1333 = fcmp ogt float %1330, %1332, !dbg !79
  %1334 = fcmp uno float %1330, 0.000000e+00, !dbg !88
  %1335 = or i1 %1334, %1333, !dbg !89
  %1336 = select i1 %1335, float %1330, float %1332, !dbg !90
  %1337 = bitcast float %1336 to i32, !dbg !87
  %1338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1337, i32 4, i32 31), !dbg !87
  %1339 = bitcast i32 %1338 to float, !dbg !87
  %1340 = fcmp ogt float %1336, %1339, !dbg !79
  %1341 = fcmp uno float %1336, 0.000000e+00, !dbg !88
  %1342 = or i1 %1340, %1341, !dbg !89
  %1343 = select i1 %1342, float %1336, float %1339, !dbg !90
  %1344 = bitcast float %1343 to i32, !dbg !87
  %1345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1344, i32 2, i32 31), !dbg !87
  %1346 = bitcast i32 %1345 to float, !dbg !87
  %1347 = fcmp ogt float %1343, %1346, !dbg !79
  %1348 = fcmp uno float %1343, 0.000000e+00, !dbg !88
  %1349 = or i1 %1347, %1348, !dbg !89
  %1350 = select i1 %1349, float %1343, float %1346, !dbg !90
  %1351 = bitcast float %1350 to i32, !dbg !87
  %1352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1351, i32 1, i32 31), !dbg !87
  %1353 = bitcast i32 %1352 to float, !dbg !87
  %1354 = fcmp ogt float %1350, %1353, !dbg !79
  %1355 = fcmp uno float %1350, 0.000000e+00, !dbg !88
  %1356 = or i1 %1354, %1355, !dbg !89
  %1357 = select i1 %1356, i32 %1351, i32 %1352, !dbg !90
  %1358 = insertelement <1 x i32> poison, i32 %1357, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1145, <1 x i32> %1358, i1 %1176) #5, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %1359 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !87
  %1360 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1361 = bitcast float %1359 to i32, !dbg !91
  %1362 = bitcast float %1360 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1361, i32 %1362, i1 true) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1363 = load float, ptr addrspace(3) %1183, align 4, !dbg !91
  %1364 = sext i32 %992 to i64, !dbg !92
  %1365 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1364, !dbg !92
  %1366 = fptrunc float %1184 to bfloat, !dbg !86
  %1367 = and i32 %15, 510, !dbg !86
  %1368 = icmp eq i32 %1367, 0, !dbg !86
  %1369 = bitcast bfloat %1366 to i16, !dbg !86
  %1370 = and i1 %1368, %993, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1369, ptr addrspace(1) %1365, i1 %1370) #5, !dbg !86
  %1371 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1364, !dbg !93
  %1372 = fptrunc float %1363 to bfloat, !dbg !91
  %1373 = bitcast bfloat %1372 to i16, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1373, ptr addrspace(1) %1371, i1 %1370) #5, !dbg !91
  %.inv4 = fcmp oge float %1179, 0.000000e+00, !dbg !94
  %1374 = select i1 %.inv4, float 0.000000e+00, float %1179, !dbg !94
  %.inv5 = fcmp oge float %1180, 0.000000e+00, !dbg !94
  %1375 = select i1 %.inv5, float 0.000000e+00, float %1180, !dbg !94
  %1376 = fsub float 0.000000e+00, %1374, !dbg !96
  %1377 = fsub float 0.000000e+00, %1375, !dbg !96
  %.inv6 = fcmp ole float %1359, 0.000000e+00, !dbg !97
  %1378 = select i1 %.inv6, float 0.000000e+00, float %1359, !dbg !97
  %.inv7 = fcmp ole float %1360, 0.000000e+00, !dbg !97
  %1379 = select i1 %.inv7, float 0.000000e+00, float %1360, !dbg !97
  %1380 = fcmp ogt float %1376, %1378, !dbg !99
  %1381 = fcmp ogt float %1377, %1379, !dbg !99
  %1382 = fcmp uno float %1376, 0.000000e+00, !dbg !101
  %1383 = fcmp uno float %1377, 0.000000e+00, !dbg !101
  %1384 = or i1 %1382, %1380, !dbg !102
  %1385 = or i1 %1383, %1381, !dbg !102
  %1386 = select i1 %1384, float %1376, float %1378, !dbg !103
  %1387 = select i1 %1385, float %1377, float %1379, !dbg !103
  %1388 = fmul float %1386, 0x3F80204080000000, !dbg !104
  %1389 = fmul float %1387, 0x3F80204080000000, !dbg !104
  %1390 = fcmp ogt float %1388, 0x3EE4F8B580000000, !dbg !105
  %1391 = fcmp ogt float %1389, 0x3EE4F8B580000000, !dbg !105
  %1392 = fcmp uno float %1388, 0.000000e+00, !dbg !107
  %1393 = fcmp uno float %1389, 0.000000e+00, !dbg !107
  %1394 = or i1 %1390, %1392, !dbg !108
  %1395 = or i1 %1391, %1393, !dbg !108
  %1396 = select i1 %1394, float %1388, float 0x3EE4F8B580000000, !dbg !109
  %1397 = select i1 %1395, float %1389, float 0x3EE4F8B580000000, !dbg !109
  %1398 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1396), !dbg !110
  %1399 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1397), !dbg !110
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %1400 = bitcast float %1398 to <1 x i32>, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1400, i1 true) #5, !dbg !111
  %1401 = bitcast float %1399 to <1 x i32>, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1401, i1 true) #5, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %1402 = lshr exact i32 %16, 5, !dbg !111
  %1403 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1402, !dbg !111
  %1404 = load float, ptr addrspace(3) %1403, align 8, !dbg !111
  br label %1405, !dbg !112

1405:                                             ; preds = %989, %__nv_tanhf.exit338
  %indvars.iv675 = phi i64 [ 0, %989 ], [ %indvars.iv.next676, %__nv_tanhf.exit338 ]
  %1406 = trunc nuw nsw i64 %indvars.iv675 to i32, !dbg !113
  %1407 = add i32 %87, %1406, !dbg !113
  %1408 = add i32 %88, %1406, !dbg !113
  %1409 = add i32 %89, %1406, !dbg !113
  %1410 = add i32 %90, %1406, !dbg !113
  %1411 = sext i32 %1407 to i64, !dbg !114
  %1412 = getelementptr float, ptr addrspace(1) %5, i64 %1411, !dbg !114
  %1413 = sext i32 %1408 to i64, !dbg !114
  %1414 = getelementptr float, ptr addrspace(1) %5, i64 %1413, !dbg !114
  %1415 = sext i32 %1409 to i64, !dbg !114
  %1416 = getelementptr float, ptr addrspace(1) %5, i64 %1415, !dbg !114
  %1417 = sext i32 %1410 to i64, !dbg !114
  %1418 = getelementptr float, ptr addrspace(1) %5, i64 %1417, !dbg !114
  %1419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1412, i1 %20) #5, !dbg !115
  %1420 = extractvalue { i32, i32, i32, i32 } %1419, 0, !dbg !115
  %1421 = extractvalue { i32, i32, i32, i32 } %1419, 1, !dbg !115
  %1422 = extractvalue { i32, i32, i32, i32 } %1419, 2, !dbg !115
  %1423 = extractvalue { i32, i32, i32, i32 } %1419, 3, !dbg !115
  %1424 = bitcast i32 %1420 to float, !dbg !115
  %1425 = bitcast i32 %1421 to float, !dbg !115
  %1426 = bitcast i32 %1422 to float, !dbg !115
  %1427 = bitcast i32 %1423 to float, !dbg !115
  %1428 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1414, i1 %20) #5, !dbg !115
  %1429 = extractvalue { i32, i32, i32, i32 } %1428, 0, !dbg !115
  %1430 = extractvalue { i32, i32, i32, i32 } %1428, 1, !dbg !115
  %1431 = extractvalue { i32, i32, i32, i32 } %1428, 2, !dbg !115
  %1432 = extractvalue { i32, i32, i32, i32 } %1428, 3, !dbg !115
  %1433 = bitcast i32 %1429 to float, !dbg !115
  %1434 = bitcast i32 %1430 to float, !dbg !115
  %1435 = bitcast i32 %1431 to float, !dbg !115
  %1436 = bitcast i32 %1432 to float, !dbg !115
  %1437 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1416, i1 %20) #5, !dbg !115
  %1438 = extractvalue { i32, i32, i32, i32 } %1437, 0, !dbg !115
  %1439 = extractvalue { i32, i32, i32, i32 } %1437, 1, !dbg !115
  %1440 = extractvalue { i32, i32, i32, i32 } %1437, 2, !dbg !115
  %1441 = extractvalue { i32, i32, i32, i32 } %1437, 3, !dbg !115
  %1442 = bitcast i32 %1438 to float, !dbg !115
  %1443 = bitcast i32 %1439 to float, !dbg !115
  %1444 = bitcast i32 %1440 to float, !dbg !115
  %1445 = bitcast i32 %1441 to float, !dbg !115
  %1446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1418, i1 %20) #5, !dbg !115
  %1447 = extractvalue { i32, i32, i32, i32 } %1446, 0, !dbg !115
  %1448 = extractvalue { i32, i32, i32, i32 } %1446, 1, !dbg !115
  %1449 = extractvalue { i32, i32, i32, i32 } %1446, 2, !dbg !115
  %1450 = extractvalue { i32, i32, i32, i32 } %1446, 3, !dbg !115
  %1451 = bitcast i32 %1447 to float, !dbg !115
  %1452 = bitcast i32 %1448 to float, !dbg !115
  %1453 = bitcast i32 %1449 to float, !dbg !115
  %1454 = bitcast i32 %1450 to float, !dbg !115
  %1455 = fmul float %1424, 5.000000e-01, !dbg !116
  %1456 = fmul float %1425, 5.000000e-01, !dbg !116
  %1457 = fmul float %1426, 5.000000e-01, !dbg !116
  %1458 = fmul float %1427, 5.000000e-01, !dbg !116
  %1459 = fmul float %1433, 5.000000e-01, !dbg !116
  %1460 = fmul float %1434, 5.000000e-01, !dbg !116
  %1461 = fmul float %1435, 5.000000e-01, !dbg !116
  %1462 = fmul float %1436, 5.000000e-01, !dbg !116
  %1463 = fmul float %1442, 5.000000e-01, !dbg !116
  %1464 = fmul float %1443, 5.000000e-01, !dbg !116
  %1465 = fmul float %1444, 5.000000e-01, !dbg !116
  %1466 = fmul float %1445, 5.000000e-01, !dbg !116
  %1467 = fmul float %1451, 5.000000e-01, !dbg !116
  %1468 = fmul float %1452, 5.000000e-01, !dbg !116
  %1469 = fmul float %1453, 5.000000e-01, !dbg !116
  %1470 = fmul float %1454, 5.000000e-01, !dbg !116
  %1471 = fmul float %1424, %1424, !dbg !117
  %1472 = fmul float %1425, %1425, !dbg !117
  %1473 = fmul float %1426, %1426, !dbg !117
  %1474 = fmul float %1427, %1427, !dbg !117
  %1475 = fmul float %1433, %1433, !dbg !117
  %1476 = fmul float %1434, %1434, !dbg !117
  %1477 = fmul float %1435, %1435, !dbg !117
  %1478 = fmul float %1436, %1436, !dbg !117
  %1479 = fmul float %1442, %1442, !dbg !117
  %1480 = fmul float %1443, %1443, !dbg !117
  %1481 = fmul float %1444, %1444, !dbg !117
  %1482 = fmul float %1445, %1445, !dbg !117
  %1483 = fmul float %1451, %1451, !dbg !117
  %1484 = fmul float %1452, %1452, !dbg !117
  %1485 = fmul float %1453, %1453, !dbg !117
  %1486 = fmul float %1454, %1454, !dbg !117
  %1487 = fmul float %1471, %1424, !dbg !118
  %1488 = fmul float %1472, %1425, !dbg !118
  %1489 = fmul float %1473, %1426, !dbg !118
  %1490 = fmul float %1474, %1427, !dbg !118
  %1491 = fmul float %1475, %1433, !dbg !118
  %1492 = fmul float %1476, %1434, !dbg !118
  %1493 = fmul float %1477, %1435, !dbg !118
  %1494 = fmul float %1478, %1436, !dbg !118
  %1495 = fmul float %1479, %1442, !dbg !118
  %1496 = fmul float %1480, %1443, !dbg !118
  %1497 = fmul float %1481, %1444, !dbg !118
  %1498 = fmul float %1482, %1445, !dbg !118
  %1499 = fmul float %1483, %1451, !dbg !118
  %1500 = fmul float %1484, %1452, !dbg !118
  %1501 = fmul float %1485, %1453, !dbg !118
  %1502 = fmul float %1486, %1454, !dbg !118
  %1503 = fmul float %1487, 0x3FA6E4E260000000, !dbg !119
  %1504 = fmul float %1488, 0x3FA6E4E260000000, !dbg !119
  %1505 = fmul float %1489, 0x3FA6E4E260000000, !dbg !119
  %1506 = fmul float %1490, 0x3FA6E4E260000000, !dbg !119
  %1507 = fmul float %1491, 0x3FA6E4E260000000, !dbg !119
  %1508 = fmul float %1492, 0x3FA6E4E260000000, !dbg !119
  %1509 = fmul float %1493, 0x3FA6E4E260000000, !dbg !119
  %1510 = fmul float %1494, 0x3FA6E4E260000000, !dbg !119
  %1511 = fmul float %1495, 0x3FA6E4E260000000, !dbg !119
  %1512 = fmul float %1496, 0x3FA6E4E260000000, !dbg !119
  %1513 = fmul float %1497, 0x3FA6E4E260000000, !dbg !119
  %1514 = fmul float %1498, 0x3FA6E4E260000000, !dbg !119
  %1515 = fmul float %1499, 0x3FA6E4E260000000, !dbg !119
  %1516 = fmul float %1500, 0x3FA6E4E260000000, !dbg !119
  %1517 = fmul float %1501, 0x3FA6E4E260000000, !dbg !119
  %1518 = fmul float %1502, 0x3FA6E4E260000000, !dbg !119
  %1519 = fadd float %1503, %1424, !dbg !120
  %1520 = fadd float %1504, %1425, !dbg !120
  %1521 = fadd float %1505, %1426, !dbg !120
  %1522 = fadd float %1506, %1427, !dbg !120
  %1523 = fadd float %1507, %1433, !dbg !120
  %1524 = fadd float %1508, %1434, !dbg !120
  %1525 = fadd float %1509, %1435, !dbg !120
  %1526 = fadd float %1510, %1436, !dbg !120
  %1527 = fadd float %1511, %1442, !dbg !120
  %1528 = fadd float %1512, %1443, !dbg !120
  %1529 = fadd float %1513, %1444, !dbg !120
  %1530 = fadd float %1514, %1445, !dbg !120
  %1531 = fadd float %1515, %1451, !dbg !120
  %1532 = fadd float %1516, %1452, !dbg !120
  %1533 = fadd float %1517, %1453, !dbg !120
  %1534 = fadd float %1518, %1454, !dbg !120
  %1535 = fmul float %1519, 0x3FE9884540000000, !dbg !121
  %1536 = fmul float %1520, 0x3FE9884540000000, !dbg !121
  %1537 = fmul float %1521, 0x3FE9884540000000, !dbg !121
  %1538 = fmul float %1522, 0x3FE9884540000000, !dbg !121
  %1539 = fmul float %1523, 0x3FE9884540000000, !dbg !121
  %1540 = fmul float %1524, 0x3FE9884540000000, !dbg !121
  %1541 = fmul float %1525, 0x3FE9884540000000, !dbg !121
  %1542 = fmul float %1526, 0x3FE9884540000000, !dbg !121
  %1543 = fmul float %1527, 0x3FE9884540000000, !dbg !121
  %1544 = fmul float %1528, 0x3FE9884540000000, !dbg !121
  %1545 = fmul float %1529, 0x3FE9884540000000, !dbg !121
  %1546 = fmul float %1530, 0x3FE9884540000000, !dbg !121
  %1547 = fmul float %1531, 0x3FE9884540000000, !dbg !121
  %1548 = fmul float %1532, 0x3FE9884540000000, !dbg !121
  %1549 = fmul float %1533, 0x3FE9884540000000, !dbg !121
  %1550 = fmul float %1534, 0x3FE9884540000000, !dbg !121
  %1551 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i = icmp eq i32 %1551, 0, !dbg !122
  %1552 = tail call float @llvm.nvvm.fabs.ftz.f(float %1535) #5, !dbg !122
  %1553 = tail call float @llvm.nvvm.fabs.f(float %1535) #5, !dbg !122
  %.01.i = select i1 %.not.i, float %1553, float %1552, !dbg !122
  %1554 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !122
  br i1 %1554, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !122

__internal_fmad.exit1.i:                          ; preds = %1405
  %1555 = fmul float %.01.i, 0x4007154760000000, !dbg !122
  %1556 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1555) #5, !dbg !122
  %1557 = fadd float %1556, 1.000000e+00, !dbg !122
  %1558 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1557) #6, !dbg !122, !srcloc !62
  %1559 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i = icmp eq i32 %1559, 0, !dbg !122
  %1560 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1558, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1561 = tail call float @llvm.nvvm.fma.rn.f(float %1558, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i = select i1 %.not6.i, float %1561, float %1560, !dbg !122
  %1562 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !122
  %s.0.i = select i1 %1562, float 1.000000e+00, float %.03.i, !dbg !122
  %1563 = bitcast float %s.0.i to i32, !dbg !122
  %1564 = bitcast float %1535 to i32, !dbg !122
  %1565 = and i32 %1564, -2147483648, !dbg !122
  %1566 = or i32 %1565, %1563, !dbg !122
  %1567 = bitcast i32 %1566 to float, !dbg !122
  br label %__nv_tanhf.exit, !dbg !122

__internal_fmad.exit3.i:                          ; preds = %1405
  %1568 = fmul float %1535, %1535, !dbg !122
  %1569 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i = icmp eq i32 %1569, 0, !dbg !122
  %1570 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1568, float 0xBFAAC795C0000000) #5, !dbg !122
  %1571 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1568, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i = select i1 %.not1.i, float %1571, float %1570, !dbg !122
  %1572 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i = icmp eq i32 %1572, 0, !dbg !122
  %1573 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %1568, float 0x3FC10B2820000000) #5, !dbg !122
  %1574 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %1568, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i = select i1 %.not2.i, float %1574, float %1573, !dbg !122
  %1575 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i = icmp eq i32 %1575, 0, !dbg !122
  %1576 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1568, float 0xBFD5553DA0000000) #5, !dbg !122
  %1577 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1568, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i = select i1 %.not3.i, float %1577, float %1576, !dbg !122
  %1578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i = icmp eq i32 %1578, 0, !dbg !122
  %1579 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %1568, float 0.000000e+00) #5, !dbg !122
  %1580 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %1568, float 0.000000e+00) #5, !dbg !122
  %.04.i = select i1 %.not4.i, float %1580, float %1579, !dbg !122
  %1581 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i = icmp eq i32 %1581, 0, !dbg !122
  %1582 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %1535, float %1535) #5, !dbg !122
  %1583 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %1535, float %1535) #5, !dbg !122
  %.02.i = select i1 %.not5.i, float %1583, float %1582, !dbg !122
  br label %__nv_tanhf.exit, !dbg !122

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %1567, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !122
  %1584 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i54 = icmp eq i32 %1584, 0, !dbg !122
  %1585 = tail call float @llvm.nvvm.fabs.ftz.f(float %1536) #5, !dbg !122
  %1586 = tail call float @llvm.nvvm.fabs.f(float %1536) #5, !dbg !122
  %.01.i55 = select i1 %.not.i54, float %1586, float %1585, !dbg !122
  %1587 = fcmp ult float %.01.i55, 0x3FE3333340000000, !dbg !122
  br i1 %1587, label %__internal_fmad.exit3.i61, label %__internal_fmad.exit1.i56, !dbg !122

__internal_fmad.exit1.i56:                        ; preds = %__nv_tanhf.exit
  %1588 = fmul float %.01.i55, 0x4007154760000000, !dbg !122
  %1589 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1588) #5, !dbg !122
  %1590 = fadd float %1589, 1.000000e+00, !dbg !122
  %1591 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1590) #6, !dbg !122, !srcloc !62
  %1592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i57 = icmp eq i32 %1592, 0, !dbg !122
  %1593 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1591, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1594 = tail call float @llvm.nvvm.fma.rn.f(float %1591, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i58 = select i1 %.not6.i57, float %1594, float %1593, !dbg !122
  %1595 = fcmp oge float %.01.i55, 0x4022059680000000, !dbg !122
  %s.0.i59 = select i1 %1595, float 1.000000e+00, float %.03.i58, !dbg !122
  %1596 = bitcast float %s.0.i59 to i32, !dbg !122
  %1597 = bitcast float %1536 to i32, !dbg !122
  %1598 = and i32 %1597, -2147483648, !dbg !122
  %1599 = or i32 %1598, %1596, !dbg !122
  %1600 = bitcast i32 %1599 to float, !dbg !122
  br label %__nv_tanhf.exit72, !dbg !122

__internal_fmad.exit3.i61:                        ; preds = %__nv_tanhf.exit
  %1601 = fmul float %1536, %1536, !dbg !122
  %1602 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i62 = icmp eq i32 %1602, 0, !dbg !122
  %1603 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1601, float 0xBFAAC795C0000000) #5, !dbg !122
  %1604 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1601, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i63 = select i1 %.not1.i62, float %1604, float %1603, !dbg !122
  %1605 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i64 = icmp eq i32 %1605, 0, !dbg !122
  %1606 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i63, float %1601, float 0x3FC10B2820000000) #5, !dbg !122
  %1607 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i63, float %1601, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i65 = select i1 %.not2.i64, float %1607, float %1606, !dbg !122
  %1608 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i66 = icmp eq i32 %1608, 0, !dbg !122
  %1609 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i65, float %1601, float 0xBFD5553DA0000000) #5, !dbg !122
  %1610 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i65, float %1601, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i67 = select i1 %.not3.i66, float %1610, float %1609, !dbg !122
  %1611 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i68 = icmp eq i32 %1611, 0, !dbg !122
  %1612 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i67, float %1601, float 0.000000e+00) #5, !dbg !122
  %1613 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i67, float %1601, float 0.000000e+00) #5, !dbg !122
  %.04.i69 = select i1 %.not4.i68, float %1613, float %1612, !dbg !122
  %1614 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i70 = icmp eq i32 %1614, 0, !dbg !122
  %1615 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i69, float %1536, float %1536) #5, !dbg !122
  %1616 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i69, float %1536, float %1536) #5, !dbg !122
  %.02.i71 = select i1 %.not5.i70, float %1616, float %1615, !dbg !122
  br label %__nv_tanhf.exit72, !dbg !122

__nv_tanhf.exit72:                                ; preds = %__internal_fmad.exit1.i56, %__internal_fmad.exit3.i61
  %s.1.i60 = phi float [ %1600, %__internal_fmad.exit1.i56 ], [ %.02.i71, %__internal_fmad.exit3.i61 ], !dbg !122
  %1617 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i73 = icmp eq i32 %1617, 0, !dbg !122
  %1618 = tail call float @llvm.nvvm.fabs.ftz.f(float %1537) #5, !dbg !122
  %1619 = tail call float @llvm.nvvm.fabs.f(float %1537) #5, !dbg !122
  %.01.i74 = select i1 %.not.i73, float %1619, float %1618, !dbg !122
  %1620 = fcmp ult float %.01.i74, 0x3FE3333340000000, !dbg !122
  br i1 %1620, label %__internal_fmad.exit3.i80, label %__internal_fmad.exit1.i75, !dbg !122

__internal_fmad.exit1.i75:                        ; preds = %__nv_tanhf.exit72
  %1621 = fmul float %.01.i74, 0x4007154760000000, !dbg !122
  %1622 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1621) #5, !dbg !122
  %1623 = fadd float %1622, 1.000000e+00, !dbg !122
  %1624 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1623) #6, !dbg !122, !srcloc !62
  %1625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i76 = icmp eq i32 %1625, 0, !dbg !122
  %1626 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1624, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1627 = tail call float @llvm.nvvm.fma.rn.f(float %1624, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i77 = select i1 %.not6.i76, float %1627, float %1626, !dbg !122
  %1628 = fcmp oge float %.01.i74, 0x4022059680000000, !dbg !122
  %s.0.i78 = select i1 %1628, float 1.000000e+00, float %.03.i77, !dbg !122
  %1629 = bitcast float %s.0.i78 to i32, !dbg !122
  %1630 = bitcast float %1537 to i32, !dbg !122
  %1631 = and i32 %1630, -2147483648, !dbg !122
  %1632 = or i32 %1631, %1629, !dbg !122
  %1633 = bitcast i32 %1632 to float, !dbg !122
  br label %__nv_tanhf.exit91, !dbg !122

__internal_fmad.exit3.i80:                        ; preds = %__nv_tanhf.exit72
  %1634 = fmul float %1537, %1537, !dbg !122
  %1635 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i81 = icmp eq i32 %1635, 0, !dbg !122
  %1636 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1634, float 0xBFAAC795C0000000) #5, !dbg !122
  %1637 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1634, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i82 = select i1 %.not1.i81, float %1637, float %1636, !dbg !122
  %1638 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i83 = icmp eq i32 %1638, 0, !dbg !122
  %1639 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i82, float %1634, float 0x3FC10B2820000000) #5, !dbg !122
  %1640 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i82, float %1634, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i84 = select i1 %.not2.i83, float %1640, float %1639, !dbg !122
  %1641 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i85 = icmp eq i32 %1641, 0, !dbg !122
  %1642 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i84, float %1634, float 0xBFD5553DA0000000) #5, !dbg !122
  %1643 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i84, float %1634, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i86 = select i1 %.not3.i85, float %1643, float %1642, !dbg !122
  %1644 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i87 = icmp eq i32 %1644, 0, !dbg !122
  %1645 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i86, float %1634, float 0.000000e+00) #5, !dbg !122
  %1646 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i86, float %1634, float 0.000000e+00) #5, !dbg !122
  %.04.i88 = select i1 %.not4.i87, float %1646, float %1645, !dbg !122
  %1647 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i89 = icmp eq i32 %1647, 0, !dbg !122
  %1648 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i88, float %1537, float %1537) #5, !dbg !122
  %1649 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i88, float %1537, float %1537) #5, !dbg !122
  %.02.i90 = select i1 %.not5.i89, float %1649, float %1648, !dbg !122
  br label %__nv_tanhf.exit91, !dbg !122

__nv_tanhf.exit91:                                ; preds = %__internal_fmad.exit1.i75, %__internal_fmad.exit3.i80
  %s.1.i79 = phi float [ %1633, %__internal_fmad.exit1.i75 ], [ %.02.i90, %__internal_fmad.exit3.i80 ], !dbg !122
  %1650 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i92 = icmp eq i32 %1650, 0, !dbg !122
  %1651 = tail call float @llvm.nvvm.fabs.ftz.f(float %1538) #5, !dbg !122
  %1652 = tail call float @llvm.nvvm.fabs.f(float %1538) #5, !dbg !122
  %.01.i93 = select i1 %.not.i92, float %1652, float %1651, !dbg !122
  %1653 = fcmp ult float %.01.i93, 0x3FE3333340000000, !dbg !122
  br i1 %1653, label %__internal_fmad.exit3.i99, label %__internal_fmad.exit1.i94, !dbg !122

__internal_fmad.exit1.i94:                        ; preds = %__nv_tanhf.exit91
  %1654 = fmul float %.01.i93, 0x4007154760000000, !dbg !122
  %1655 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1654) #5, !dbg !122
  %1656 = fadd float %1655, 1.000000e+00, !dbg !122
  %1657 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1656) #6, !dbg !122, !srcloc !62
  %1658 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i95 = icmp eq i32 %1658, 0, !dbg !122
  %1659 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1657, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1660 = tail call float @llvm.nvvm.fma.rn.f(float %1657, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i96 = select i1 %.not6.i95, float %1660, float %1659, !dbg !122
  %1661 = fcmp oge float %.01.i93, 0x4022059680000000, !dbg !122
  %s.0.i97 = select i1 %1661, float 1.000000e+00, float %.03.i96, !dbg !122
  %1662 = bitcast float %s.0.i97 to i32, !dbg !122
  %1663 = bitcast float %1538 to i32, !dbg !122
  %1664 = and i32 %1663, -2147483648, !dbg !122
  %1665 = or i32 %1664, %1662, !dbg !122
  %1666 = bitcast i32 %1665 to float, !dbg !122
  br label %__nv_tanhf.exit110, !dbg !122

__internal_fmad.exit3.i99:                        ; preds = %__nv_tanhf.exit91
  %1667 = fmul float %1538, %1538, !dbg !122
  %1668 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i100 = icmp eq i32 %1668, 0, !dbg !122
  %1669 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1667, float 0xBFAAC795C0000000) #5, !dbg !122
  %1670 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1667, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i101 = select i1 %.not1.i100, float %1670, float %1669, !dbg !122
  %1671 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i102 = icmp eq i32 %1671, 0, !dbg !122
  %1672 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i101, float %1667, float 0x3FC10B2820000000) #5, !dbg !122
  %1673 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i101, float %1667, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i103 = select i1 %.not2.i102, float %1673, float %1672, !dbg !122
  %1674 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i104 = icmp eq i32 %1674, 0, !dbg !122
  %1675 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i103, float %1667, float 0xBFD5553DA0000000) #5, !dbg !122
  %1676 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i103, float %1667, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i105 = select i1 %.not3.i104, float %1676, float %1675, !dbg !122
  %1677 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i106 = icmp eq i32 %1677, 0, !dbg !122
  %1678 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i105, float %1667, float 0.000000e+00) #5, !dbg !122
  %1679 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i105, float %1667, float 0.000000e+00) #5, !dbg !122
  %.04.i107 = select i1 %.not4.i106, float %1679, float %1678, !dbg !122
  %1680 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i108 = icmp eq i32 %1680, 0, !dbg !122
  %1681 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i107, float %1538, float %1538) #5, !dbg !122
  %1682 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i107, float %1538, float %1538) #5, !dbg !122
  %.02.i109 = select i1 %.not5.i108, float %1682, float %1681, !dbg !122
  br label %__nv_tanhf.exit110, !dbg !122

__nv_tanhf.exit110:                               ; preds = %__internal_fmad.exit1.i94, %__internal_fmad.exit3.i99
  %s.1.i98 = phi float [ %1666, %__internal_fmad.exit1.i94 ], [ %.02.i109, %__internal_fmad.exit3.i99 ], !dbg !122
  %1683 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i111 = icmp eq i32 %1683, 0, !dbg !122
  %1684 = tail call float @llvm.nvvm.fabs.ftz.f(float %1539) #5, !dbg !122
  %1685 = tail call float @llvm.nvvm.fabs.f(float %1539) #5, !dbg !122
  %.01.i112 = select i1 %.not.i111, float %1685, float %1684, !dbg !122
  %1686 = fcmp ult float %.01.i112, 0x3FE3333340000000, !dbg !122
  br i1 %1686, label %__internal_fmad.exit3.i118, label %__internal_fmad.exit1.i113, !dbg !122

__internal_fmad.exit1.i113:                       ; preds = %__nv_tanhf.exit110
  %1687 = fmul float %.01.i112, 0x4007154760000000, !dbg !122
  %1688 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1687) #5, !dbg !122
  %1689 = fadd float %1688, 1.000000e+00, !dbg !122
  %1690 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1689) #6, !dbg !122, !srcloc !62
  %1691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i114 = icmp eq i32 %1691, 0, !dbg !122
  %1692 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1690, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1693 = tail call float @llvm.nvvm.fma.rn.f(float %1690, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i115 = select i1 %.not6.i114, float %1693, float %1692, !dbg !122
  %1694 = fcmp oge float %.01.i112, 0x4022059680000000, !dbg !122
  %s.0.i116 = select i1 %1694, float 1.000000e+00, float %.03.i115, !dbg !122
  %1695 = bitcast float %s.0.i116 to i32, !dbg !122
  %1696 = bitcast float %1539 to i32, !dbg !122
  %1697 = and i32 %1696, -2147483648, !dbg !122
  %1698 = or i32 %1697, %1695, !dbg !122
  %1699 = bitcast i32 %1698 to float, !dbg !122
  br label %__nv_tanhf.exit129, !dbg !122

__internal_fmad.exit3.i118:                       ; preds = %__nv_tanhf.exit110
  %1700 = fmul float %1539, %1539, !dbg !122
  %1701 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i119 = icmp eq i32 %1701, 0, !dbg !122
  %1702 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1700, float 0xBFAAC795C0000000) #5, !dbg !122
  %1703 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1700, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i120 = select i1 %.not1.i119, float %1703, float %1702, !dbg !122
  %1704 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i121 = icmp eq i32 %1704, 0, !dbg !122
  %1705 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i120, float %1700, float 0x3FC10B2820000000) #5, !dbg !122
  %1706 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i120, float %1700, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i122 = select i1 %.not2.i121, float %1706, float %1705, !dbg !122
  %1707 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i123 = icmp eq i32 %1707, 0, !dbg !122
  %1708 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i122, float %1700, float 0xBFD5553DA0000000) #5, !dbg !122
  %1709 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i122, float %1700, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i124 = select i1 %.not3.i123, float %1709, float %1708, !dbg !122
  %1710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i125 = icmp eq i32 %1710, 0, !dbg !122
  %1711 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i124, float %1700, float 0.000000e+00) #5, !dbg !122
  %1712 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i124, float %1700, float 0.000000e+00) #5, !dbg !122
  %.04.i126 = select i1 %.not4.i125, float %1712, float %1711, !dbg !122
  %1713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i127 = icmp eq i32 %1713, 0, !dbg !122
  %1714 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i126, float %1539, float %1539) #5, !dbg !122
  %1715 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i126, float %1539, float %1539) #5, !dbg !122
  %.02.i128 = select i1 %.not5.i127, float %1715, float %1714, !dbg !122
  br label %__nv_tanhf.exit129, !dbg !122

__nv_tanhf.exit129:                               ; preds = %__internal_fmad.exit1.i113, %__internal_fmad.exit3.i118
  %s.1.i117 = phi float [ %1699, %__internal_fmad.exit1.i113 ], [ %.02.i128, %__internal_fmad.exit3.i118 ], !dbg !122
  %1716 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i130 = icmp eq i32 %1716, 0, !dbg !122
  %1717 = tail call float @llvm.nvvm.fabs.ftz.f(float %1540) #5, !dbg !122
  %1718 = tail call float @llvm.nvvm.fabs.f(float %1540) #5, !dbg !122
  %.01.i131 = select i1 %.not.i130, float %1718, float %1717, !dbg !122
  %1719 = fcmp ult float %.01.i131, 0x3FE3333340000000, !dbg !122
  br i1 %1719, label %__internal_fmad.exit3.i137, label %__internal_fmad.exit1.i132, !dbg !122

__internal_fmad.exit1.i132:                       ; preds = %__nv_tanhf.exit129
  %1720 = fmul float %.01.i131, 0x4007154760000000, !dbg !122
  %1721 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1720) #5, !dbg !122
  %1722 = fadd float %1721, 1.000000e+00, !dbg !122
  %1723 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1722) #6, !dbg !122, !srcloc !62
  %1724 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i133 = icmp eq i32 %1724, 0, !dbg !122
  %1725 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1723, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1726 = tail call float @llvm.nvvm.fma.rn.f(float %1723, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i134 = select i1 %.not6.i133, float %1726, float %1725, !dbg !122
  %1727 = fcmp oge float %.01.i131, 0x4022059680000000, !dbg !122
  %s.0.i135 = select i1 %1727, float 1.000000e+00, float %.03.i134, !dbg !122
  %1728 = bitcast float %s.0.i135 to i32, !dbg !122
  %1729 = bitcast float %1540 to i32, !dbg !122
  %1730 = and i32 %1729, -2147483648, !dbg !122
  %1731 = or i32 %1730, %1728, !dbg !122
  %1732 = bitcast i32 %1731 to float, !dbg !122
  br label %__nv_tanhf.exit148, !dbg !122

__internal_fmad.exit3.i137:                       ; preds = %__nv_tanhf.exit129
  %1733 = fmul float %1540, %1540, !dbg !122
  %1734 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i138 = icmp eq i32 %1734, 0, !dbg !122
  %1735 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1733, float 0xBFAAC795C0000000) #5, !dbg !122
  %1736 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1733, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i139 = select i1 %.not1.i138, float %1736, float %1735, !dbg !122
  %1737 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i140 = icmp eq i32 %1737, 0, !dbg !122
  %1738 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i139, float %1733, float 0x3FC10B2820000000) #5, !dbg !122
  %1739 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i139, float %1733, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i141 = select i1 %.not2.i140, float %1739, float %1738, !dbg !122
  %1740 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i142 = icmp eq i32 %1740, 0, !dbg !122
  %1741 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i141, float %1733, float 0xBFD5553DA0000000) #5, !dbg !122
  %1742 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i141, float %1733, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i143 = select i1 %.not3.i142, float %1742, float %1741, !dbg !122
  %1743 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i144 = icmp eq i32 %1743, 0, !dbg !122
  %1744 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i143, float %1733, float 0.000000e+00) #5, !dbg !122
  %1745 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i143, float %1733, float 0.000000e+00) #5, !dbg !122
  %.04.i145 = select i1 %.not4.i144, float %1745, float %1744, !dbg !122
  %1746 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i146 = icmp eq i32 %1746, 0, !dbg !122
  %1747 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i145, float %1540, float %1540) #5, !dbg !122
  %1748 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i145, float %1540, float %1540) #5, !dbg !122
  %.02.i147 = select i1 %.not5.i146, float %1748, float %1747, !dbg !122
  br label %__nv_tanhf.exit148, !dbg !122

__nv_tanhf.exit148:                               ; preds = %__internal_fmad.exit1.i132, %__internal_fmad.exit3.i137
  %s.1.i136 = phi float [ %1732, %__internal_fmad.exit1.i132 ], [ %.02.i147, %__internal_fmad.exit3.i137 ], !dbg !122
  %1749 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i149 = icmp eq i32 %1749, 0, !dbg !122
  %1750 = tail call float @llvm.nvvm.fabs.ftz.f(float %1541) #5, !dbg !122
  %1751 = tail call float @llvm.nvvm.fabs.f(float %1541) #5, !dbg !122
  %.01.i150 = select i1 %.not.i149, float %1751, float %1750, !dbg !122
  %1752 = fcmp ult float %.01.i150, 0x3FE3333340000000, !dbg !122
  br i1 %1752, label %__internal_fmad.exit3.i156, label %__internal_fmad.exit1.i151, !dbg !122

__internal_fmad.exit1.i151:                       ; preds = %__nv_tanhf.exit148
  %1753 = fmul float %.01.i150, 0x4007154760000000, !dbg !122
  %1754 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1753) #5, !dbg !122
  %1755 = fadd float %1754, 1.000000e+00, !dbg !122
  %1756 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1755) #6, !dbg !122, !srcloc !62
  %1757 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i152 = icmp eq i32 %1757, 0, !dbg !122
  %1758 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1756, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1759 = tail call float @llvm.nvvm.fma.rn.f(float %1756, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i153 = select i1 %.not6.i152, float %1759, float %1758, !dbg !122
  %1760 = fcmp oge float %.01.i150, 0x4022059680000000, !dbg !122
  %s.0.i154 = select i1 %1760, float 1.000000e+00, float %.03.i153, !dbg !122
  %1761 = bitcast float %s.0.i154 to i32, !dbg !122
  %1762 = bitcast float %1541 to i32, !dbg !122
  %1763 = and i32 %1762, -2147483648, !dbg !122
  %1764 = or i32 %1763, %1761, !dbg !122
  %1765 = bitcast i32 %1764 to float, !dbg !122
  br label %__nv_tanhf.exit167, !dbg !122

__internal_fmad.exit3.i156:                       ; preds = %__nv_tanhf.exit148
  %1766 = fmul float %1541, %1541, !dbg !122
  %1767 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i157 = icmp eq i32 %1767, 0, !dbg !122
  %1768 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1766, float 0xBFAAC795C0000000) #5, !dbg !122
  %1769 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1766, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i158 = select i1 %.not1.i157, float %1769, float %1768, !dbg !122
  %1770 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i159 = icmp eq i32 %1770, 0, !dbg !122
  %1771 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i158, float %1766, float 0x3FC10B2820000000) #5, !dbg !122
  %1772 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i158, float %1766, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i160 = select i1 %.not2.i159, float %1772, float %1771, !dbg !122
  %1773 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i161 = icmp eq i32 %1773, 0, !dbg !122
  %1774 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i160, float %1766, float 0xBFD5553DA0000000) #5, !dbg !122
  %1775 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i160, float %1766, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i162 = select i1 %.not3.i161, float %1775, float %1774, !dbg !122
  %1776 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i163 = icmp eq i32 %1776, 0, !dbg !122
  %1777 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i162, float %1766, float 0.000000e+00) #5, !dbg !122
  %1778 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i162, float %1766, float 0.000000e+00) #5, !dbg !122
  %.04.i164 = select i1 %.not4.i163, float %1778, float %1777, !dbg !122
  %1779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i165 = icmp eq i32 %1779, 0, !dbg !122
  %1780 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i164, float %1541, float %1541) #5, !dbg !122
  %1781 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i164, float %1541, float %1541) #5, !dbg !122
  %.02.i166 = select i1 %.not5.i165, float %1781, float %1780, !dbg !122
  br label %__nv_tanhf.exit167, !dbg !122

__nv_tanhf.exit167:                               ; preds = %__internal_fmad.exit1.i151, %__internal_fmad.exit3.i156
  %s.1.i155 = phi float [ %1765, %__internal_fmad.exit1.i151 ], [ %.02.i166, %__internal_fmad.exit3.i156 ], !dbg !122
  %1782 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i168 = icmp eq i32 %1782, 0, !dbg !122
  %1783 = tail call float @llvm.nvvm.fabs.ftz.f(float %1542) #5, !dbg !122
  %1784 = tail call float @llvm.nvvm.fabs.f(float %1542) #5, !dbg !122
  %.01.i169 = select i1 %.not.i168, float %1784, float %1783, !dbg !122
  %1785 = fcmp ult float %.01.i169, 0x3FE3333340000000, !dbg !122
  br i1 %1785, label %__internal_fmad.exit3.i175, label %__internal_fmad.exit1.i170, !dbg !122

__internal_fmad.exit1.i170:                       ; preds = %__nv_tanhf.exit167
  %1786 = fmul float %.01.i169, 0x4007154760000000, !dbg !122
  %1787 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1786) #5, !dbg !122
  %1788 = fadd float %1787, 1.000000e+00, !dbg !122
  %1789 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1788) #6, !dbg !122, !srcloc !62
  %1790 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i171 = icmp eq i32 %1790, 0, !dbg !122
  %1791 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1789, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1792 = tail call float @llvm.nvvm.fma.rn.f(float %1789, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i172 = select i1 %.not6.i171, float %1792, float %1791, !dbg !122
  %1793 = fcmp oge float %.01.i169, 0x4022059680000000, !dbg !122
  %s.0.i173 = select i1 %1793, float 1.000000e+00, float %.03.i172, !dbg !122
  %1794 = bitcast float %s.0.i173 to i32, !dbg !122
  %1795 = bitcast float %1542 to i32, !dbg !122
  %1796 = and i32 %1795, -2147483648, !dbg !122
  %1797 = or i32 %1796, %1794, !dbg !122
  %1798 = bitcast i32 %1797 to float, !dbg !122
  br label %__nv_tanhf.exit186, !dbg !122

__internal_fmad.exit3.i175:                       ; preds = %__nv_tanhf.exit167
  %1799 = fmul float %1542, %1542, !dbg !122
  %1800 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i176 = icmp eq i32 %1800, 0, !dbg !122
  %1801 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1799, float 0xBFAAC795C0000000) #5, !dbg !122
  %1802 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1799, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i177 = select i1 %.not1.i176, float %1802, float %1801, !dbg !122
  %1803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i178 = icmp eq i32 %1803, 0, !dbg !122
  %1804 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i177, float %1799, float 0x3FC10B2820000000) #5, !dbg !122
  %1805 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i177, float %1799, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i179 = select i1 %.not2.i178, float %1805, float %1804, !dbg !122
  %1806 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i180 = icmp eq i32 %1806, 0, !dbg !122
  %1807 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i179, float %1799, float 0xBFD5553DA0000000) #5, !dbg !122
  %1808 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i179, float %1799, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i181 = select i1 %.not3.i180, float %1808, float %1807, !dbg !122
  %1809 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i182 = icmp eq i32 %1809, 0, !dbg !122
  %1810 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i181, float %1799, float 0.000000e+00) #5, !dbg !122
  %1811 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i181, float %1799, float 0.000000e+00) #5, !dbg !122
  %.04.i183 = select i1 %.not4.i182, float %1811, float %1810, !dbg !122
  %1812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i184 = icmp eq i32 %1812, 0, !dbg !122
  %1813 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i183, float %1542, float %1542) #5, !dbg !122
  %1814 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i183, float %1542, float %1542) #5, !dbg !122
  %.02.i185 = select i1 %.not5.i184, float %1814, float %1813, !dbg !122
  br label %__nv_tanhf.exit186, !dbg !122

__nv_tanhf.exit186:                               ; preds = %__internal_fmad.exit1.i170, %__internal_fmad.exit3.i175
  %s.1.i174 = phi float [ %1798, %__internal_fmad.exit1.i170 ], [ %.02.i185, %__internal_fmad.exit3.i175 ], !dbg !122
  %1815 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i187 = icmp eq i32 %1815, 0, !dbg !122
  %1816 = tail call float @llvm.nvvm.fabs.ftz.f(float %1543) #5, !dbg !122
  %1817 = tail call float @llvm.nvvm.fabs.f(float %1543) #5, !dbg !122
  %.01.i188 = select i1 %.not.i187, float %1817, float %1816, !dbg !122
  %1818 = fcmp ult float %.01.i188, 0x3FE3333340000000, !dbg !122
  br i1 %1818, label %__internal_fmad.exit3.i194, label %__internal_fmad.exit1.i189, !dbg !122

__internal_fmad.exit1.i189:                       ; preds = %__nv_tanhf.exit186
  %1819 = fmul float %.01.i188, 0x4007154760000000, !dbg !122
  %1820 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1819) #5, !dbg !122
  %1821 = fadd float %1820, 1.000000e+00, !dbg !122
  %1822 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1821) #6, !dbg !122, !srcloc !62
  %1823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i190 = icmp eq i32 %1823, 0, !dbg !122
  %1824 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1822, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1825 = tail call float @llvm.nvvm.fma.rn.f(float %1822, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i191 = select i1 %.not6.i190, float %1825, float %1824, !dbg !122
  %1826 = fcmp oge float %.01.i188, 0x4022059680000000, !dbg !122
  %s.0.i192 = select i1 %1826, float 1.000000e+00, float %.03.i191, !dbg !122
  %1827 = bitcast float %s.0.i192 to i32, !dbg !122
  %1828 = bitcast float %1543 to i32, !dbg !122
  %1829 = and i32 %1828, -2147483648, !dbg !122
  %1830 = or i32 %1829, %1827, !dbg !122
  %1831 = bitcast i32 %1830 to float, !dbg !122
  br label %__nv_tanhf.exit205, !dbg !122

__internal_fmad.exit3.i194:                       ; preds = %__nv_tanhf.exit186
  %1832 = fmul float %1543, %1543, !dbg !122
  %1833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i195 = icmp eq i32 %1833, 0, !dbg !122
  %1834 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1832, float 0xBFAAC795C0000000) #5, !dbg !122
  %1835 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1832, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i196 = select i1 %.not1.i195, float %1835, float %1834, !dbg !122
  %1836 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i197 = icmp eq i32 %1836, 0, !dbg !122
  %1837 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i196, float %1832, float 0x3FC10B2820000000) #5, !dbg !122
  %1838 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i196, float %1832, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i198 = select i1 %.not2.i197, float %1838, float %1837, !dbg !122
  %1839 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i199 = icmp eq i32 %1839, 0, !dbg !122
  %1840 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i198, float %1832, float 0xBFD5553DA0000000) #5, !dbg !122
  %1841 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i198, float %1832, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i200 = select i1 %.not3.i199, float %1841, float %1840, !dbg !122
  %1842 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i201 = icmp eq i32 %1842, 0, !dbg !122
  %1843 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i200, float %1832, float 0.000000e+00) #5, !dbg !122
  %1844 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i200, float %1832, float 0.000000e+00) #5, !dbg !122
  %.04.i202 = select i1 %.not4.i201, float %1844, float %1843, !dbg !122
  %1845 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i203 = icmp eq i32 %1845, 0, !dbg !122
  %1846 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i202, float %1543, float %1543) #5, !dbg !122
  %1847 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i202, float %1543, float %1543) #5, !dbg !122
  %.02.i204 = select i1 %.not5.i203, float %1847, float %1846, !dbg !122
  br label %__nv_tanhf.exit205, !dbg !122

__nv_tanhf.exit205:                               ; preds = %__internal_fmad.exit1.i189, %__internal_fmad.exit3.i194
  %s.1.i193 = phi float [ %1831, %__internal_fmad.exit1.i189 ], [ %.02.i204, %__internal_fmad.exit3.i194 ], !dbg !122
  %1848 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i206 = icmp eq i32 %1848, 0, !dbg !122
  %1849 = tail call float @llvm.nvvm.fabs.ftz.f(float %1544) #5, !dbg !122
  %1850 = tail call float @llvm.nvvm.fabs.f(float %1544) #5, !dbg !122
  %.01.i207 = select i1 %.not.i206, float %1850, float %1849, !dbg !122
  %1851 = fcmp ult float %.01.i207, 0x3FE3333340000000, !dbg !122
  br i1 %1851, label %__internal_fmad.exit3.i213, label %__internal_fmad.exit1.i208, !dbg !122

__internal_fmad.exit1.i208:                       ; preds = %__nv_tanhf.exit205
  %1852 = fmul float %.01.i207, 0x4007154760000000, !dbg !122
  %1853 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1852) #5, !dbg !122
  %1854 = fadd float %1853, 1.000000e+00, !dbg !122
  %1855 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1854) #6, !dbg !122, !srcloc !62
  %1856 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i209 = icmp eq i32 %1856, 0, !dbg !122
  %1857 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1855, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1858 = tail call float @llvm.nvvm.fma.rn.f(float %1855, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i210 = select i1 %.not6.i209, float %1858, float %1857, !dbg !122
  %1859 = fcmp oge float %.01.i207, 0x4022059680000000, !dbg !122
  %s.0.i211 = select i1 %1859, float 1.000000e+00, float %.03.i210, !dbg !122
  %1860 = bitcast float %s.0.i211 to i32, !dbg !122
  %1861 = bitcast float %1544 to i32, !dbg !122
  %1862 = and i32 %1861, -2147483648, !dbg !122
  %1863 = or i32 %1862, %1860, !dbg !122
  %1864 = bitcast i32 %1863 to float, !dbg !122
  br label %__nv_tanhf.exit224, !dbg !122

__internal_fmad.exit3.i213:                       ; preds = %__nv_tanhf.exit205
  %1865 = fmul float %1544, %1544, !dbg !122
  %1866 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i214 = icmp eq i32 %1866, 0, !dbg !122
  %1867 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1865, float 0xBFAAC795C0000000) #5, !dbg !122
  %1868 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1865, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i215 = select i1 %.not1.i214, float %1868, float %1867, !dbg !122
  %1869 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i216 = icmp eq i32 %1869, 0, !dbg !122
  %1870 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i215, float %1865, float 0x3FC10B2820000000) #5, !dbg !122
  %1871 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i215, float %1865, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i217 = select i1 %.not2.i216, float %1871, float %1870, !dbg !122
  %1872 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i218 = icmp eq i32 %1872, 0, !dbg !122
  %1873 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i217, float %1865, float 0xBFD5553DA0000000) #5, !dbg !122
  %1874 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i217, float %1865, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i219 = select i1 %.not3.i218, float %1874, float %1873, !dbg !122
  %1875 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i220 = icmp eq i32 %1875, 0, !dbg !122
  %1876 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i219, float %1865, float 0.000000e+00) #5, !dbg !122
  %1877 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i219, float %1865, float 0.000000e+00) #5, !dbg !122
  %.04.i221 = select i1 %.not4.i220, float %1877, float %1876, !dbg !122
  %1878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i222 = icmp eq i32 %1878, 0, !dbg !122
  %1879 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i221, float %1544, float %1544) #5, !dbg !122
  %1880 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i221, float %1544, float %1544) #5, !dbg !122
  %.02.i223 = select i1 %.not5.i222, float %1880, float %1879, !dbg !122
  br label %__nv_tanhf.exit224, !dbg !122

__nv_tanhf.exit224:                               ; preds = %__internal_fmad.exit1.i208, %__internal_fmad.exit3.i213
  %s.1.i212 = phi float [ %1864, %__internal_fmad.exit1.i208 ], [ %.02.i223, %__internal_fmad.exit3.i213 ], !dbg !122
  %1881 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i225 = icmp eq i32 %1881, 0, !dbg !122
  %1882 = tail call float @llvm.nvvm.fabs.ftz.f(float %1545) #5, !dbg !122
  %1883 = tail call float @llvm.nvvm.fabs.f(float %1545) #5, !dbg !122
  %.01.i226 = select i1 %.not.i225, float %1883, float %1882, !dbg !122
  %1884 = fcmp ult float %.01.i226, 0x3FE3333340000000, !dbg !122
  br i1 %1884, label %__internal_fmad.exit3.i232, label %__internal_fmad.exit1.i227, !dbg !122

__internal_fmad.exit1.i227:                       ; preds = %__nv_tanhf.exit224
  %1885 = fmul float %.01.i226, 0x4007154760000000, !dbg !122
  %1886 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1885) #5, !dbg !122
  %1887 = fadd float %1886, 1.000000e+00, !dbg !122
  %1888 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1887) #6, !dbg !122, !srcloc !62
  %1889 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i228 = icmp eq i32 %1889, 0, !dbg !122
  %1890 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1888, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1891 = tail call float @llvm.nvvm.fma.rn.f(float %1888, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i229 = select i1 %.not6.i228, float %1891, float %1890, !dbg !122
  %1892 = fcmp oge float %.01.i226, 0x4022059680000000, !dbg !122
  %s.0.i230 = select i1 %1892, float 1.000000e+00, float %.03.i229, !dbg !122
  %1893 = bitcast float %s.0.i230 to i32, !dbg !122
  %1894 = bitcast float %1545 to i32, !dbg !122
  %1895 = and i32 %1894, -2147483648, !dbg !122
  %1896 = or i32 %1895, %1893, !dbg !122
  %1897 = bitcast i32 %1896 to float, !dbg !122
  br label %__nv_tanhf.exit243, !dbg !122

__internal_fmad.exit3.i232:                       ; preds = %__nv_tanhf.exit224
  %1898 = fmul float %1545, %1545, !dbg !122
  %1899 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i233 = icmp eq i32 %1899, 0, !dbg !122
  %1900 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1898, float 0xBFAAC795C0000000) #5, !dbg !122
  %1901 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1898, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i234 = select i1 %.not1.i233, float %1901, float %1900, !dbg !122
  %1902 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i235 = icmp eq i32 %1902, 0, !dbg !122
  %1903 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i234, float %1898, float 0x3FC10B2820000000) #5, !dbg !122
  %1904 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i234, float %1898, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i236 = select i1 %.not2.i235, float %1904, float %1903, !dbg !122
  %1905 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i237 = icmp eq i32 %1905, 0, !dbg !122
  %1906 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i236, float %1898, float 0xBFD5553DA0000000) #5, !dbg !122
  %1907 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i236, float %1898, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i238 = select i1 %.not3.i237, float %1907, float %1906, !dbg !122
  %1908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i239 = icmp eq i32 %1908, 0, !dbg !122
  %1909 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i238, float %1898, float 0.000000e+00) #5, !dbg !122
  %1910 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i238, float %1898, float 0.000000e+00) #5, !dbg !122
  %.04.i240 = select i1 %.not4.i239, float %1910, float %1909, !dbg !122
  %1911 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i241 = icmp eq i32 %1911, 0, !dbg !122
  %1912 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i240, float %1545, float %1545) #5, !dbg !122
  %1913 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i240, float %1545, float %1545) #5, !dbg !122
  %.02.i242 = select i1 %.not5.i241, float %1913, float %1912, !dbg !122
  br label %__nv_tanhf.exit243, !dbg !122

__nv_tanhf.exit243:                               ; preds = %__internal_fmad.exit1.i227, %__internal_fmad.exit3.i232
  %s.1.i231 = phi float [ %1897, %__internal_fmad.exit1.i227 ], [ %.02.i242, %__internal_fmad.exit3.i232 ], !dbg !122
  %1914 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i244 = icmp eq i32 %1914, 0, !dbg !122
  %1915 = tail call float @llvm.nvvm.fabs.ftz.f(float %1546) #5, !dbg !122
  %1916 = tail call float @llvm.nvvm.fabs.f(float %1546) #5, !dbg !122
  %.01.i245 = select i1 %.not.i244, float %1916, float %1915, !dbg !122
  %1917 = fcmp ult float %.01.i245, 0x3FE3333340000000, !dbg !122
  br i1 %1917, label %__internal_fmad.exit3.i251, label %__internal_fmad.exit1.i246, !dbg !122

__internal_fmad.exit1.i246:                       ; preds = %__nv_tanhf.exit243
  %1918 = fmul float %.01.i245, 0x4007154760000000, !dbg !122
  %1919 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1918) #5, !dbg !122
  %1920 = fadd float %1919, 1.000000e+00, !dbg !122
  %1921 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1920) #6, !dbg !122, !srcloc !62
  %1922 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i247 = icmp eq i32 %1922, 0, !dbg !122
  %1923 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1921, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1924 = tail call float @llvm.nvvm.fma.rn.f(float %1921, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i248 = select i1 %.not6.i247, float %1924, float %1923, !dbg !122
  %1925 = fcmp oge float %.01.i245, 0x4022059680000000, !dbg !122
  %s.0.i249 = select i1 %1925, float 1.000000e+00, float %.03.i248, !dbg !122
  %1926 = bitcast float %s.0.i249 to i32, !dbg !122
  %1927 = bitcast float %1546 to i32, !dbg !122
  %1928 = and i32 %1927, -2147483648, !dbg !122
  %1929 = or i32 %1928, %1926, !dbg !122
  %1930 = bitcast i32 %1929 to float, !dbg !122
  br label %__nv_tanhf.exit262, !dbg !122

__internal_fmad.exit3.i251:                       ; preds = %__nv_tanhf.exit243
  %1931 = fmul float %1546, %1546, !dbg !122
  %1932 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i252 = icmp eq i32 %1932, 0, !dbg !122
  %1933 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1931, float 0xBFAAC795C0000000) #5, !dbg !122
  %1934 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1931, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i253 = select i1 %.not1.i252, float %1934, float %1933, !dbg !122
  %1935 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i254 = icmp eq i32 %1935, 0, !dbg !122
  %1936 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i253, float %1931, float 0x3FC10B2820000000) #5, !dbg !122
  %1937 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i253, float %1931, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i255 = select i1 %.not2.i254, float %1937, float %1936, !dbg !122
  %1938 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i256 = icmp eq i32 %1938, 0, !dbg !122
  %1939 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i255, float %1931, float 0xBFD5553DA0000000) #5, !dbg !122
  %1940 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i255, float %1931, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i257 = select i1 %.not3.i256, float %1940, float %1939, !dbg !122
  %1941 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i258 = icmp eq i32 %1941, 0, !dbg !122
  %1942 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i257, float %1931, float 0.000000e+00) #5, !dbg !122
  %1943 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i257, float %1931, float 0.000000e+00) #5, !dbg !122
  %.04.i259 = select i1 %.not4.i258, float %1943, float %1942, !dbg !122
  %1944 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i260 = icmp eq i32 %1944, 0, !dbg !122
  %1945 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i259, float %1546, float %1546) #5, !dbg !122
  %1946 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i259, float %1546, float %1546) #5, !dbg !122
  %.02.i261 = select i1 %.not5.i260, float %1946, float %1945, !dbg !122
  br label %__nv_tanhf.exit262, !dbg !122

__nv_tanhf.exit262:                               ; preds = %__internal_fmad.exit1.i246, %__internal_fmad.exit3.i251
  %s.1.i250 = phi float [ %1930, %__internal_fmad.exit1.i246 ], [ %.02.i261, %__internal_fmad.exit3.i251 ], !dbg !122
  %1947 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i263 = icmp eq i32 %1947, 0, !dbg !122
  %1948 = tail call float @llvm.nvvm.fabs.ftz.f(float %1547) #5, !dbg !122
  %1949 = tail call float @llvm.nvvm.fabs.f(float %1547) #5, !dbg !122
  %.01.i264 = select i1 %.not.i263, float %1949, float %1948, !dbg !122
  %1950 = fcmp ult float %.01.i264, 0x3FE3333340000000, !dbg !122
  br i1 %1950, label %__internal_fmad.exit3.i270, label %__internal_fmad.exit1.i265, !dbg !122

__internal_fmad.exit1.i265:                       ; preds = %__nv_tanhf.exit262
  %1951 = fmul float %.01.i264, 0x4007154760000000, !dbg !122
  %1952 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1951) #5, !dbg !122
  %1953 = fadd float %1952, 1.000000e+00, !dbg !122
  %1954 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1953) #6, !dbg !122, !srcloc !62
  %1955 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i266 = icmp eq i32 %1955, 0, !dbg !122
  %1956 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1954, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1957 = tail call float @llvm.nvvm.fma.rn.f(float %1954, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i267 = select i1 %.not6.i266, float %1957, float %1956, !dbg !122
  %1958 = fcmp oge float %.01.i264, 0x4022059680000000, !dbg !122
  %s.0.i268 = select i1 %1958, float 1.000000e+00, float %.03.i267, !dbg !122
  %1959 = bitcast float %s.0.i268 to i32, !dbg !122
  %1960 = bitcast float %1547 to i32, !dbg !122
  %1961 = and i32 %1960, -2147483648, !dbg !122
  %1962 = or i32 %1961, %1959, !dbg !122
  %1963 = bitcast i32 %1962 to float, !dbg !122
  br label %__nv_tanhf.exit281, !dbg !122

__internal_fmad.exit3.i270:                       ; preds = %__nv_tanhf.exit262
  %1964 = fmul float %1547, %1547, !dbg !122
  %1965 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i271 = icmp eq i32 %1965, 0, !dbg !122
  %1966 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1964, float 0xBFAAC795C0000000) #5, !dbg !122
  %1967 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1964, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i272 = select i1 %.not1.i271, float %1967, float %1966, !dbg !122
  %1968 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i273 = icmp eq i32 %1968, 0, !dbg !122
  %1969 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i272, float %1964, float 0x3FC10B2820000000) #5, !dbg !122
  %1970 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i272, float %1964, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i274 = select i1 %.not2.i273, float %1970, float %1969, !dbg !122
  %1971 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i275 = icmp eq i32 %1971, 0, !dbg !122
  %1972 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i274, float %1964, float 0xBFD5553DA0000000) #5, !dbg !122
  %1973 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i274, float %1964, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i276 = select i1 %.not3.i275, float %1973, float %1972, !dbg !122
  %1974 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i277 = icmp eq i32 %1974, 0, !dbg !122
  %1975 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i276, float %1964, float 0.000000e+00) #5, !dbg !122
  %1976 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i276, float %1964, float 0.000000e+00) #5, !dbg !122
  %.04.i278 = select i1 %.not4.i277, float %1976, float %1975, !dbg !122
  %1977 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i279 = icmp eq i32 %1977, 0, !dbg !122
  %1978 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i278, float %1547, float %1547) #5, !dbg !122
  %1979 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i278, float %1547, float %1547) #5, !dbg !122
  %.02.i280 = select i1 %.not5.i279, float %1979, float %1978, !dbg !122
  br label %__nv_tanhf.exit281, !dbg !122

__nv_tanhf.exit281:                               ; preds = %__internal_fmad.exit1.i265, %__internal_fmad.exit3.i270
  %s.1.i269 = phi float [ %1963, %__internal_fmad.exit1.i265 ], [ %.02.i280, %__internal_fmad.exit3.i270 ], !dbg !122
  %1980 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i282 = icmp eq i32 %1980, 0, !dbg !122
  %1981 = tail call float @llvm.nvvm.fabs.ftz.f(float %1548) #5, !dbg !122
  %1982 = tail call float @llvm.nvvm.fabs.f(float %1548) #5, !dbg !122
  %.01.i283 = select i1 %.not.i282, float %1982, float %1981, !dbg !122
  %1983 = fcmp ult float %.01.i283, 0x3FE3333340000000, !dbg !122
  br i1 %1983, label %__internal_fmad.exit3.i289, label %__internal_fmad.exit1.i284, !dbg !122

__internal_fmad.exit1.i284:                       ; preds = %__nv_tanhf.exit281
  %1984 = fmul float %.01.i283, 0x4007154760000000, !dbg !122
  %1985 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1984) #5, !dbg !122
  %1986 = fadd float %1985, 1.000000e+00, !dbg !122
  %1987 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1986) #6, !dbg !122, !srcloc !62
  %1988 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i285 = icmp eq i32 %1988, 0, !dbg !122
  %1989 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1987, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %1990 = tail call float @llvm.nvvm.fma.rn.f(float %1987, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i286 = select i1 %.not6.i285, float %1990, float %1989, !dbg !122
  %1991 = fcmp oge float %.01.i283, 0x4022059680000000, !dbg !122
  %s.0.i287 = select i1 %1991, float 1.000000e+00, float %.03.i286, !dbg !122
  %1992 = bitcast float %s.0.i287 to i32, !dbg !122
  %1993 = bitcast float %1548 to i32, !dbg !122
  %1994 = and i32 %1993, -2147483648, !dbg !122
  %1995 = or i32 %1994, %1992, !dbg !122
  %1996 = bitcast i32 %1995 to float, !dbg !122
  br label %__nv_tanhf.exit300, !dbg !122

__internal_fmad.exit3.i289:                       ; preds = %__nv_tanhf.exit281
  %1997 = fmul float %1548, %1548, !dbg !122
  %1998 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i290 = icmp eq i32 %1998, 0, !dbg !122
  %1999 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1997, float 0xBFAAC795C0000000) #5, !dbg !122
  %2000 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1997, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i291 = select i1 %.not1.i290, float %2000, float %1999, !dbg !122
  %2001 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i292 = icmp eq i32 %2001, 0, !dbg !122
  %2002 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i291, float %1997, float 0x3FC10B2820000000) #5, !dbg !122
  %2003 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i291, float %1997, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i293 = select i1 %.not2.i292, float %2003, float %2002, !dbg !122
  %2004 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i294 = icmp eq i32 %2004, 0, !dbg !122
  %2005 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i293, float %1997, float 0xBFD5553DA0000000) #5, !dbg !122
  %2006 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i293, float %1997, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i295 = select i1 %.not3.i294, float %2006, float %2005, !dbg !122
  %2007 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i296 = icmp eq i32 %2007, 0, !dbg !122
  %2008 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i295, float %1997, float 0.000000e+00) #5, !dbg !122
  %2009 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i295, float %1997, float 0.000000e+00) #5, !dbg !122
  %.04.i297 = select i1 %.not4.i296, float %2009, float %2008, !dbg !122
  %2010 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i298 = icmp eq i32 %2010, 0, !dbg !122
  %2011 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i297, float %1548, float %1548) #5, !dbg !122
  %2012 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i297, float %1548, float %1548) #5, !dbg !122
  %.02.i299 = select i1 %.not5.i298, float %2012, float %2011, !dbg !122
  br label %__nv_tanhf.exit300, !dbg !122

__nv_tanhf.exit300:                               ; preds = %__internal_fmad.exit1.i284, %__internal_fmad.exit3.i289
  %s.1.i288 = phi float [ %1996, %__internal_fmad.exit1.i284 ], [ %.02.i299, %__internal_fmad.exit3.i289 ], !dbg !122
  %2013 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i301 = icmp eq i32 %2013, 0, !dbg !122
  %2014 = tail call float @llvm.nvvm.fabs.ftz.f(float %1549) #5, !dbg !122
  %2015 = tail call float @llvm.nvvm.fabs.f(float %1549) #5, !dbg !122
  %.01.i302 = select i1 %.not.i301, float %2015, float %2014, !dbg !122
  %2016 = fcmp ult float %.01.i302, 0x3FE3333340000000, !dbg !122
  br i1 %2016, label %__internal_fmad.exit3.i308, label %__internal_fmad.exit1.i303, !dbg !122

__internal_fmad.exit1.i303:                       ; preds = %__nv_tanhf.exit300
  %2017 = fmul float %.01.i302, 0x4007154760000000, !dbg !122
  %2018 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %2017) #5, !dbg !122
  %2019 = fadd float %2018, 1.000000e+00, !dbg !122
  %2020 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %2019) #6, !dbg !122, !srcloc !62
  %2021 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i304 = icmp eq i32 %2021, 0, !dbg !122
  %2022 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2020, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %2023 = tail call float @llvm.nvvm.fma.rn.f(float %2020, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i305 = select i1 %.not6.i304, float %2023, float %2022, !dbg !122
  %2024 = fcmp oge float %.01.i302, 0x4022059680000000, !dbg !122
  %s.0.i306 = select i1 %2024, float 1.000000e+00, float %.03.i305, !dbg !122
  %2025 = bitcast float %s.0.i306 to i32, !dbg !122
  %2026 = bitcast float %1549 to i32, !dbg !122
  %2027 = and i32 %2026, -2147483648, !dbg !122
  %2028 = or i32 %2027, %2025, !dbg !122
  %2029 = bitcast i32 %2028 to float, !dbg !122
  br label %__nv_tanhf.exit319, !dbg !122

__internal_fmad.exit3.i308:                       ; preds = %__nv_tanhf.exit300
  %2030 = fmul float %1549, %1549, !dbg !122
  %2031 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i309 = icmp eq i32 %2031, 0, !dbg !122
  %2032 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %2030, float 0xBFAAC795C0000000) #5, !dbg !122
  %2033 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %2030, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i310 = select i1 %.not1.i309, float %2033, float %2032, !dbg !122
  %2034 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i311 = icmp eq i32 %2034, 0, !dbg !122
  %2035 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i310, float %2030, float 0x3FC10B2820000000) #5, !dbg !122
  %2036 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i310, float %2030, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i312 = select i1 %.not2.i311, float %2036, float %2035, !dbg !122
  %2037 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i313 = icmp eq i32 %2037, 0, !dbg !122
  %2038 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i312, float %2030, float 0xBFD5553DA0000000) #5, !dbg !122
  %2039 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i312, float %2030, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i314 = select i1 %.not3.i313, float %2039, float %2038, !dbg !122
  %2040 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i315 = icmp eq i32 %2040, 0, !dbg !122
  %2041 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i314, float %2030, float 0.000000e+00) #5, !dbg !122
  %2042 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i314, float %2030, float 0.000000e+00) #5, !dbg !122
  %.04.i316 = select i1 %.not4.i315, float %2042, float %2041, !dbg !122
  %2043 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i317 = icmp eq i32 %2043, 0, !dbg !122
  %2044 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i316, float %1549, float %1549) #5, !dbg !122
  %2045 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i316, float %1549, float %1549) #5, !dbg !122
  %.02.i318 = select i1 %.not5.i317, float %2045, float %2044, !dbg !122
  br label %__nv_tanhf.exit319, !dbg !122

__nv_tanhf.exit319:                               ; preds = %__internal_fmad.exit1.i303, %__internal_fmad.exit3.i308
  %s.1.i307 = phi float [ %2029, %__internal_fmad.exit1.i303 ], [ %.02.i318, %__internal_fmad.exit3.i308 ], !dbg !122
  %2046 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not.i320 = icmp eq i32 %2046, 0, !dbg !122
  %2047 = tail call float @llvm.nvvm.fabs.ftz.f(float %1550) #5, !dbg !122
  %2048 = tail call float @llvm.nvvm.fabs.f(float %1550) #5, !dbg !122
  %.01.i321 = select i1 %.not.i320, float %2048, float %2047, !dbg !122
  %2049 = fcmp ult float %.01.i321, 0x3FE3333340000000, !dbg !122
  br i1 %2049, label %__internal_fmad.exit3.i327, label %__internal_fmad.exit1.i322, !dbg !122

__internal_fmad.exit1.i322:                       ; preds = %__nv_tanhf.exit319
  %2050 = fmul float %.01.i321, 0x4007154760000000, !dbg !122
  %2051 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %2050) #5, !dbg !122
  %2052 = fadd float %2051, 1.000000e+00, !dbg !122
  %2053 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %2052) #6, !dbg !122, !srcloc !62
  %2054 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not6.i323 = icmp eq i32 %2054, 0, !dbg !122
  %2055 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %2053, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %2056 = tail call float @llvm.nvvm.fma.rn.f(float %2053, float -2.000000e+00, float 1.000000e+00) #5, !dbg !122
  %.03.i324 = select i1 %.not6.i323, float %2056, float %2055, !dbg !122
  %2057 = fcmp oge float %.01.i321, 0x4022059680000000, !dbg !122
  %s.0.i325 = select i1 %2057, float 1.000000e+00, float %.03.i324, !dbg !122
  %2058 = bitcast float %s.0.i325 to i32, !dbg !122
  %2059 = bitcast float %1550 to i32, !dbg !122
  %2060 = and i32 %2059, -2147483648, !dbg !122
  %2061 = or i32 %2060, %2058, !dbg !122
  %2062 = bitcast i32 %2061 to float, !dbg !122
  br label %__nv_tanhf.exit338, !dbg !122

__internal_fmad.exit3.i327:                       ; preds = %__nv_tanhf.exit319
  %2063 = fmul float %1550, %1550, !dbg !122
  %2064 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not1.i328 = icmp eq i32 %2064, 0, !dbg !122
  %2065 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %2063, float 0xBFAAC795C0000000) #5, !dbg !122
  %2066 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %2063, float 0xBFAAC795C0000000) #5, !dbg !122
  %.06.i329 = select i1 %.not1.i328, float %2066, float %2065, !dbg !122
  %2067 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not2.i330 = icmp eq i32 %2067, 0, !dbg !122
  %2068 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i329, float %2063, float 0x3FC10B2820000000) #5, !dbg !122
  %2069 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i329, float %2063, float 0x3FC10B2820000000) #5, !dbg !122
  %.05.i331 = select i1 %.not2.i330, float %2069, float %2068, !dbg !122
  %2070 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not3.i332 = icmp eq i32 %2070, 0, !dbg !122
  %2071 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i331, float %2063, float 0xBFD5553DA0000000) #5, !dbg !122
  %2072 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i331, float %2063, float 0xBFD5553DA0000000) #5, !dbg !122
  %.0.i333 = select i1 %.not3.i332, float %2072, float %2071, !dbg !122
  %2073 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not4.i334 = icmp eq i32 %2073, 0, !dbg !122
  %2074 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i333, float %2063, float 0.000000e+00) #5, !dbg !122
  %2075 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i333, float %2063, float 0.000000e+00) #5, !dbg !122
  %.04.i335 = select i1 %.not4.i334, float %2075, float %2074, !dbg !122
  %2076 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !122
  %.not5.i336 = icmp eq i32 %2076, 0, !dbg !122
  %2077 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i335, float %1550, float %1550) #5, !dbg !122
  %2078 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i335, float %1550, float %1550) #5, !dbg !122
  %.02.i337 = select i1 %.not5.i336, float %2078, float %2077, !dbg !122
  br label %__nv_tanhf.exit338, !dbg !122

__nv_tanhf.exit338:                               ; preds = %__internal_fmad.exit1.i322, %__internal_fmad.exit3.i327
  %s.1.i326 = phi float [ %2062, %__internal_fmad.exit1.i322 ], [ %.02.i337, %__internal_fmad.exit3.i327 ], !dbg !122
  %2079 = fadd float %s.1.i, 1.000000e+00, !dbg !123
  %2080 = fadd float %s.1.i60, 1.000000e+00, !dbg !123
  %2081 = fadd float %s.1.i79, 1.000000e+00, !dbg !123
  %2082 = fadd float %s.1.i98, 1.000000e+00, !dbg !123
  %2083 = fadd float %s.1.i117, 1.000000e+00, !dbg !123
  %2084 = fadd float %s.1.i136, 1.000000e+00, !dbg !123
  %2085 = fadd float %s.1.i155, 1.000000e+00, !dbg !123
  %2086 = fadd float %s.1.i174, 1.000000e+00, !dbg !123
  %2087 = fadd float %s.1.i193, 1.000000e+00, !dbg !123
  %2088 = fadd float %s.1.i212, 1.000000e+00, !dbg !123
  %2089 = fadd float %s.1.i231, 1.000000e+00, !dbg !123
  %2090 = fadd float %s.1.i250, 1.000000e+00, !dbg !123
  %2091 = fadd float %s.1.i269, 1.000000e+00, !dbg !123
  %2092 = fadd float %s.1.i288, 1.000000e+00, !dbg !123
  %2093 = fadd float %s.1.i307, 1.000000e+00, !dbg !123
  %2094 = fadd float %s.1.i326, 1.000000e+00, !dbg !123
  %2095 = fmul float %1455, %2079, !dbg !124
  %2096 = fmul float %1456, %2080, !dbg !124
  %2097 = fmul float %1457, %2081, !dbg !124
  %2098 = fmul float %1458, %2082, !dbg !124
  %2099 = fmul float %1459, %2083, !dbg !124
  %2100 = fmul float %1460, %2084, !dbg !124
  %2101 = fmul float %1461, %2085, !dbg !124
  %2102 = fmul float %1462, %2086, !dbg !124
  %2103 = fmul float %1463, %2087, !dbg !124
  %2104 = fmul float %1464, %2088, !dbg !124
  %2105 = fmul float %1465, %2089, !dbg !124
  %2106 = fmul float %1466, %2090, !dbg !124
  %2107 = fmul float %1467, %2091, !dbg !124
  %2108 = fmul float %1468, %2092, !dbg !124
  %2109 = fmul float %1469, %2093, !dbg !124
  %2110 = fmul float %1470, %2094, !dbg !124
  %2111 = fmul float %1404, %2095, !dbg !111
  %2112 = fmul float %1404, %2096, !dbg !111
  %2113 = fmul float %1404, %2097, !dbg !111
  %2114 = fmul float %1404, %2098, !dbg !111
  %2115 = fmul float %1404, %2099, !dbg !111
  %2116 = fmul float %1404, %2100, !dbg !111
  %2117 = fmul float %1404, %2101, !dbg !111
  %2118 = fmul float %1404, %2102, !dbg !111
  %2119 = fmul float %1404, %2103, !dbg !111
  %2120 = fmul float %1404, %2104, !dbg !111
  %2121 = fmul float %1404, %2105, !dbg !111
  %2122 = fmul float %1404, %2106, !dbg !111
  %2123 = fmul float %1404, %2107, !dbg !111
  %2124 = fmul float %1404, %2108, !dbg !111
  %2125 = fmul float %1404, %2109, !dbg !111
  %2126 = fmul float %1404, %2110, !dbg !111
  %2127 = tail call float @llvm.nvvm.round.f(float %2111) #5, !dbg !125
  %2128 = tail call float @llvm.nvvm.round.f(float %2112) #5, !dbg !125
  %2129 = tail call float @llvm.nvvm.round.f(float %2113) #5, !dbg !125
  %2130 = tail call float @llvm.nvvm.round.f(float %2114) #5, !dbg !125
  %2131 = tail call float @llvm.nvvm.round.f(float %2115) #5, !dbg !125
  %2132 = tail call float @llvm.nvvm.round.f(float %2116) #5, !dbg !125
  %2133 = tail call float @llvm.nvvm.round.f(float %2117) #5, !dbg !125
  %2134 = tail call float @llvm.nvvm.round.f(float %2118) #5, !dbg !125
  %2135 = tail call float @llvm.nvvm.round.f(float %2119) #5, !dbg !125
  %2136 = tail call float @llvm.nvvm.round.f(float %2120) #5, !dbg !125
  %2137 = tail call float @llvm.nvvm.round.f(float %2121) #5, !dbg !125
  %2138 = tail call float @llvm.nvvm.round.f(float %2122) #5, !dbg !125
  %2139 = tail call float @llvm.nvvm.round.f(float %2123) #5, !dbg !125
  %2140 = tail call float @llvm.nvvm.round.f(float %2124) #5, !dbg !125
  %2141 = tail call float @llvm.nvvm.round.f(float %2125) #5, !dbg !125
  %2142 = tail call float @llvm.nvvm.round.f(float %2126) #5, !dbg !125
  %2143 = insertelement <4 x float> poison, float %2127, i64 0, !dbg !126
  %2144 = insertelement <4 x float> %2143, float %2128, i64 1, !dbg !126
  %2145 = insertelement <4 x float> %2144, float %2129, i64 2, !dbg !126
  %2146 = insertelement <4 x float> %2145, float %2130, i64 3, !dbg !126
  %2147 = fcmp ogt <4 x float> %2146, splat (float -1.270000e+02), !dbg !126
  %2148 = fcmp uno <4 x float> %2146, zeroinitializer, !dbg !128
  %2149 = or <4 x i1> %2147, %2148, !dbg !129
  %2150 = select <4 x i1> %2149, <4 x float> %2146, <4 x float> splat (float -1.270000e+02), !dbg !130
  %2151 = fcmp olt <4 x float> %2150, splat (float 1.270000e+02), !dbg !131
  %2152 = fcmp uno <4 x float> %2150, zeroinitializer, !dbg !133
  %2153 = or <4 x i1> %2151, %2152, !dbg !134
  %2154 = fptosi <4 x float> %2150 to <4 x i8>, !dbg !135
  %2155 = select <4 x i1> %2153, <4 x i8> %2154, <4 x i8> splat (i8 127), !dbg !136
  %2156 = insertelement <4 x float> poison, float %2131, i64 0, !dbg !126
  %2157 = insertelement <4 x float> %2156, float %2132, i64 1, !dbg !126
  %2158 = insertelement <4 x float> %2157, float %2133, i64 2, !dbg !126
  %2159 = insertelement <4 x float> %2158, float %2134, i64 3, !dbg !126
  %2160 = fcmp ogt <4 x float> %2159, splat (float -1.270000e+02), !dbg !126
  %2161 = fcmp uno <4 x float> %2159, zeroinitializer, !dbg !128
  %2162 = or <4 x i1> %2160, %2161, !dbg !129
  %2163 = select <4 x i1> %2162, <4 x float> %2159, <4 x float> splat (float -1.270000e+02), !dbg !130
  %2164 = fcmp olt <4 x float> %2163, splat (float 1.270000e+02), !dbg !131
  %2165 = fcmp uno <4 x float> %2163, zeroinitializer, !dbg !133
  %2166 = or <4 x i1> %2164, %2165, !dbg !134
  %2167 = fptosi <4 x float> %2163 to <4 x i8>, !dbg !135
  %2168 = select <4 x i1> %2166, <4 x i8> %2167, <4 x i8> splat (i8 127), !dbg !136
  %2169 = insertelement <4 x float> poison, float %2135, i64 0, !dbg !126
  %2170 = insertelement <4 x float> %2169, float %2136, i64 1, !dbg !126
  %2171 = insertelement <4 x float> %2170, float %2137, i64 2, !dbg !126
  %2172 = insertelement <4 x float> %2171, float %2138, i64 3, !dbg !126
  %2173 = fcmp ogt <4 x float> %2172, splat (float -1.270000e+02), !dbg !126
  %2174 = fcmp uno <4 x float> %2172, zeroinitializer, !dbg !128
  %2175 = or <4 x i1> %2173, %2174, !dbg !129
  %2176 = select <4 x i1> %2175, <4 x float> %2172, <4 x float> splat (float -1.270000e+02), !dbg !130
  %2177 = fcmp olt <4 x float> %2176, splat (float 1.270000e+02), !dbg !131
  %2178 = fcmp uno <4 x float> %2176, zeroinitializer, !dbg !133
  %2179 = or <4 x i1> %2177, %2178, !dbg !134
  %2180 = fptosi <4 x float> %2176 to <4 x i8>, !dbg !135
  %2181 = select <4 x i1> %2179, <4 x i8> %2180, <4 x i8> splat (i8 127), !dbg !136
  %2182 = insertelement <4 x float> poison, float %2139, i64 0, !dbg !126
  %2183 = insertelement <4 x float> %2182, float %2140, i64 1, !dbg !126
  %2184 = insertelement <4 x float> %2183, float %2141, i64 2, !dbg !126
  %2185 = insertelement <4 x float> %2184, float %2142, i64 3, !dbg !126
  %2186 = fcmp ogt <4 x float> %2185, splat (float -1.270000e+02), !dbg !126
  %2187 = fcmp uno <4 x float> %2185, zeroinitializer, !dbg !128
  %2188 = or <4 x i1> %2186, %2187, !dbg !129
  %2189 = select <4 x i1> %2188, <4 x float> %2185, <4 x float> splat (float -1.270000e+02), !dbg !130
  %2190 = fcmp olt <4 x float> %2189, splat (float 1.270000e+02), !dbg !131
  %2191 = fcmp uno <4 x float> %2189, zeroinitializer, !dbg !133
  %2192 = or <4 x i1> %2190, %2191, !dbg !134
  %2193 = fptosi <4 x float> %2189 to <4 x i8>, !dbg !135
  %2194 = select <4 x i1> %2192, <4 x i8> %2193, <4 x i8> splat (i8 127), !dbg !136
  %2195 = getelementptr i8, ptr addrspace(1) %8, i64 %1411, !dbg !137
  %2196 = bitcast <4 x i8> %2155 to i32, !dbg !138
  %2197 = bitcast <4 x i8> %2168 to i32, !dbg !138
  %2198 = bitcast <4 x i8> %2181 to i32, !dbg !138
  %2199 = bitcast <4 x i8> %2194 to i32, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2196, i32 %2197, i32 %2198, i32 %2199, ptr addrspace(1) %2195, i1 %20) #5, !dbg !138
  %indvars.iv.next676 = add nuw nsw i64 %indvars.iv675, 4096, !dbg !112
  %2200 = icmp samesign ult i64 %indvars.iv675, 8192, !dbg !112
  br i1 %2200, label %1405, label %2201, !dbg !112

2201:                                             ; preds = %__nv_tanhf.exit338
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 30, scope: !6)
!18 = !DILocation(line: 30, column: 35, scope: !6)
!19 = !DILocation(line: 39, column: 47, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 44, column: 44, scope: !6)
!24 = !DILocation(line: 45, column: 16, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 46, column: 44, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 47, column: 44, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 49, column: 23, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 33, column: 40, scope: !6)
!39 = !DILocation(line: 76, column: 50, scope: !6)
!40 = !DILocation(line: 74, column: 50, scope: !6)
!41 = !DILocation(line: 34, column: 31, scope: !6)
!42 = !DILocation(line: 39, column: 41, scope: !6)
!43 = !DILocation(line: 39, column: 34, scope: !6)
!44 = !DILocation(line: 39, column: 52, scope: !6)
!45 = !DILocation(line: 40, column: 35, scope: !6)
!46 = !DILocation(line: 40, column: 42, scope: !6)
!47 = !DILocation(line: 41, column: 35, scope: !6)
!48 = !DILocation(line: 41, column: 42, scope: !6)
!49 = !DILocation(line: 42, column: 23, scope: !6)
!50 = !DILocation(line: 54, column: 23, scope: !6)
!51 = !DILocation(line: 40, column: 95, scope: !6)
!52 = !DILocation(line: 41, column: 95, scope: !6)
!53 = !DILocation(line: 55, column: 24, scope: !6)
!54 = !DILocation(line: 56, column: 24, scope: !6)
!55 = !DILocation(line: 59, column: 24, scope: !6)
!56 = !DILocation(line: 64, column: 24, scope: !6)
!57 = !DILocation(line: 60, column: 24, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 63, column: 24, scope: !6)
!60 = !DILocation(line: 66, column: 24, scope: !6)
!61 = !DILocation(line: 67, column: 31, scope: !6)
!62 = !{i32 21046}
!63 = !DILocation(line: 69, column: 24, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !65)
!65 = !DILocation(line: 75, column: 47, scope: !6)
!66 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !67)
!67 = !DILocation(line: 73, column: 47, scope: !6)
!68 = !DILocation(line: 70, column: 24, scope: !6)
!69 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !67)
!70 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !67)
!71 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !67)
!72 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !65)
!73 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !65)
!74 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !65)
!75 = !DILocation(line: 77, column: 29, scope: !6)
!76 = !DILocation(line: 77, column: 54, scope: !6)
!77 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !78)
!78 = !DILocation(line: 78, column: 40, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !80, inlinedAt: !81)
!80 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!81 = !DILocation(line: 79, column: 40, scope: !6)
!82 = !DILocation(line: 96, column: 21, scope: !80, inlinedAt: !78)
!83 = !DILocation(line: 96, column: 16, scope: !80, inlinedAt: !78)
!84 = !DILocation(line: 97, column: 29, scope: !80, inlinedAt: !78)
!85 = !DILocation(line: 94, column: 15, scope: !80, inlinedAt: !78)
!86 = !DILocation(line: 80, column: 37, scope: !6)
!87 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !81)
!88 = !DILocation(line: 104, column: 21, scope: !80, inlinedAt: !81)
!89 = !DILocation(line: 104, column: 16, scope: !80, inlinedAt: !81)
!90 = !DILocation(line: 105, column: 29, scope: !80, inlinedAt: !81)
!91 = !DILocation(line: 81, column: 37, scope: !6)
!92 = !DILocation(line: 80, column: 25, scope: !6)
!93 = !DILocation(line: 81, column: 25, scope: !6)
!94 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !95)
!95 = !DILocation(line: 104, column: 46, scope: !6)
!96 = !DILocation(line: 105, column: 17, scope: !6)
!97 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !98)
!98 = !DILocation(line: 106, column: 46, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !100)
!100 = !DILocation(line: 107, column: 46, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !100)
!104 = !DILocation(line: 109, column: 24, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !106)
!106 = !DILocation(line: 112, column: 46, scope: !6)
!107 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !106)
!108 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !106)
!109 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !106)
!110 = !DILocation(line: 115, column: 25, scope: !6)
!111 = !DILocation(line: 117, column: 24, scope: !6)
!112 = !DILocation(line: 82, column: 40, scope: !6)
!113 = !DILocation(line: 88, column: 43, scope: !6)
!114 = !DILocation(line: 88, column: 36, scope: !6)
!115 = !DILocation(line: 88, column: 54, scope: !6)
!116 = !DILocation(line: 90, column: 24, scope: !6)
!117 = !DILocation(line: 91, column: 24, scope: !6)
!118 = !DILocation(line: 92, column: 24, scope: !6)
!119 = !DILocation(line: 94, column: 24, scope: !6)
!120 = !DILocation(line: 95, column: 24, scope: !6)
!121 = !DILocation(line: 97, column: 24, scope: !6)
!122 = !DILocation(line: 98, column: 31, scope: !6)
!123 = !DILocation(line: 100, column: 24, scope: !6)
!124 = !DILocation(line: 101, column: 24, scope: !6)
!125 = !DILocation(line: 118, column: 36, scope: !6)
!126 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !127)
!127 = !DILocation(line: 121, column: 46, scope: !6)
!128 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !127)
!130 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !127)
!131 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !132)
!132 = !DILocation(line: 123, column: 46, scope: !6)
!133 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !132)
!134 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !132)
!135 = !DILocation(line: 125, column: 25, scope: !6)
!136 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !132)
!137 = !DILocation(line: 126, column: 29, scope: !6)
!138 = !DILocation(line: 126, column: 54, scope: !6)
!139 = !DILocation(line: 82, column: 4, scope: !6)
