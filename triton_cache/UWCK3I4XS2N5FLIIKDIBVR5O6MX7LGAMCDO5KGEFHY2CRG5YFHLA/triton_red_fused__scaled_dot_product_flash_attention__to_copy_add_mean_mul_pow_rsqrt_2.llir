; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 6, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 1, !dbg !11
  %15 = and i32 %14, 63, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, 98688, !dbg !13
  %18 = shl i32 %13, 2, !dbg !14
  %19 = and i32 %18, 4, !dbg !14
  %20 = lshr i32 %13, 6, !dbg !14
  %21 = sdiv i32 %16, 24, !dbg !15
  %22 = shl i32 %16, 7
  %23 = mul i32 %21, 6144
  %24 = add i32 %23, %22
  %25 = add i32 %24, 3072
  %26 = zext nneg i32 %19 to i64, !dbg !16
  %27 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !17
  %28 = shufflevector <8 x i1> %27, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %29, !dbg !16

29:                                               ; preds = %10, %29
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %29 ]
  %30 = phi <8 x float> [ zeroinitializer, %10 ], [ %61, %29 ]
  %31 = trunc i64 %indvars.iv to i32, !dbg !18
  %32 = or disjoint i32 %19, %31, !dbg !18
  %33 = add i32 %25, %32, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %35, i1 %17) #5, !dbg !20
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !20
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !20
  %39 = extractvalue { i32, i32 } %36, 1, !dbg !20
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !20
  %41 = add i32 %24, %32, !dbg !21
  %42 = sext i32 %41 to i64, !dbg !22
  %43 = getelementptr bfloat, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %17) #5, !dbg !23
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !23
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !23
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !23
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !23
  %49 = shufflevector <2 x bfloat> %46, <2 x bfloat> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %50 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %51 = shufflevector <8 x bfloat> %49, <8 x bfloat> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %52 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %53 = shufflevector <8 x bfloat> %51, <8 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %54 = shufflevector <2 x bfloat> %40, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %55 = shufflevector <8 x bfloat> %53, <8 x bfloat> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %56 = shufflevector <2 x bfloat> %40, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %57 = shufflevector <8 x bfloat> %55, <8 x bfloat> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %58 = fpext <8 x bfloat> %57 to <8 x float>, !dbg !24
  %59 = fmul <8 x float> %58, %58, !dbg !25
  %60 = fadd <8 x float> %30, %59, !dbg !26
  %61 = select <8 x i1> %28, <8 x float> %60, <8 x float> %30, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %62 = icmp samesign ult i64 %indvars.iv, 120, !dbg !16
  br i1 %62, label %29, label %63, !dbg !16

63:                                               ; preds = %29
  %64 = and i32 %13, 63, !dbg !11
  %65 = or disjoint i32 %12, %64, !dbg !12
  %66 = icmp slt i32 %65, 98688, !dbg !13
  %.lobit = and i32 %20, 1, !dbg !14
  %67 = sdiv i32 %65, 24, !dbg !15
  %shift = shufflevector <8 x float> %61, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !27
  %68 = fadd <8 x float> %61, %shift, !dbg !27
  %shift93 = shufflevector <8 x float> %61, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !27
  %69 = fadd <8 x float> %shift93, %68, !dbg !27
  %shift94 = shufflevector <8 x float> %61, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !27
  %70 = fadd <8 x float> %shift94, %69, !dbg !27
  %71 = extractelement <8 x float> %70, i64 4, !dbg !27
  %72 = bitcast float %71 to i32, !dbg !32
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !32
  %74 = bitcast i32 %73 to float, !dbg !32
  %75 = fadd float %71, %74, !dbg !27
  %shift95 = shufflevector <8 x float> %61, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %76 = fadd <8 x float> %61, %shift95, !dbg !33
  %shift96 = shufflevector <8 x float> %61, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %77 = fadd <8 x float> %shift96, %76, !dbg !33
  %shift97 = shufflevector <8 x float> %61, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %78 = fadd <8 x float> %shift97, %77, !dbg !33
  %79 = extractelement <8 x float> %78, i64 0, !dbg !33
  %80 = bitcast float %79 to i32, !dbg !35
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !35
  %82 = bitcast i32 %81 to float, !dbg !35
  %83 = fadd float %79, %82, !dbg !33
  %84 = shl i32 %21, 7, !dbg !36
  %85 = tail call float @llvm.nvvm.div.full(float %83, float 1.280000e+02), !dbg !37
  %86 = fadd float %85, 0x3EB0C6F7A0000000, !dbg !38
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %87, 0, !dbg !39
  br i1 %.not.i, label %90, label %88, !dbg !39

88:                                               ; preds = %63
  %89 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

90:                                               ; preds = %63
  %91 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %88, %90
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], !dbg !39
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i18 = icmp eq i32 %92, 0, !dbg !39
  br i1 %.not.i18, label %95, label %93, !dbg !39

93:                                               ; preds = %__nv_rsqrtf.exit
  %94 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit20, !dbg !39

95:                                               ; preds = %__nv_rsqrtf.exit
  %96 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit20, !dbg !39

__nv_rsqrtf.exit20:                               ; preds = %93, %95
  %.0.i19 = phi float [ %94, %93 ], [ %96, %95 ], !dbg !39
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i21 = icmp eq i32 %97, 0, !dbg !39
  br i1 %.not.i21, label %100, label %98, !dbg !39

98:                                               ; preds = %__nv_rsqrtf.exit20
  %99 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit23, !dbg !39

100:                                              ; preds = %__nv_rsqrtf.exit20
  %101 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit23, !dbg !39

__nv_rsqrtf.exit23:                               ; preds = %98, %100
  %.0.i22 = phi float [ %99, %98 ], [ %101, %100 ], !dbg !39
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i24 = icmp eq i32 %102, 0, !dbg !39
  br i1 %.not.i24, label %105, label %103, !dbg !39

103:                                              ; preds = %__nv_rsqrtf.exit23
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

105:                                              ; preds = %__nv_rsqrtf.exit23
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

__nv_rsqrtf.exit26:                               ; preds = %103, %105
  %.0.i25 = phi float [ %104, %103 ], [ %106, %105 ], !dbg !39
  %.idx = shl nuw nsw i32 %15, 3, !dbg !40
  %107 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !40
  %108 = bitcast float %.0.i to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #5, !dbg !40
  %109 = bitcast float %.0.i19 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %109, i1 true) #5, !dbg !40
  %110 = bitcast float %.0.i22 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %110, i1 true) #5, !dbg !40
  %111 = bitcast float %.0.i25 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %111, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %.idx5 = shl nuw nsw i32 %64, 3, !dbg !40
  %112 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !40
  %113 = load float, ptr addrspace(3) %112, align 8, !dbg !40
  %114 = tail call float @llvm.nvvm.div.full(float %75, float 1.280000e+02), !dbg !41
  %115 = fadd float %114, 0x3EB0C6F7A0000000, !dbg !42
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i27 = icmp eq i32 %116, 0, !dbg !43
  br i1 %.not.i27, label %119, label %117, !dbg !43

117:                                              ; preds = %__nv_rsqrtf.exit26
  %118 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit29, !dbg !43

119:                                              ; preds = %__nv_rsqrtf.exit26
  %120 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit29, !dbg !43

__nv_rsqrtf.exit29:                               ; preds = %117, %119
  %.0.i28 = phi float [ %118, %117 ], [ %120, %119 ], !dbg !43
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i30 = icmp eq i32 %121, 0, !dbg !43
  br i1 %.not.i30, label %124, label %122, !dbg !43

122:                                              ; preds = %__nv_rsqrtf.exit29
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit32, !dbg !43

124:                                              ; preds = %__nv_rsqrtf.exit29
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit32, !dbg !43

__nv_rsqrtf.exit32:                               ; preds = %122, %124
  %.0.i31 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !43
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i33 = icmp eq i32 %126, 0, !dbg !43
  br i1 %.not.i33, label %129, label %127, !dbg !43

127:                                              ; preds = %__nv_rsqrtf.exit32
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit35, !dbg !43

129:                                              ; preds = %__nv_rsqrtf.exit32
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit35, !dbg !43

__nv_rsqrtf.exit35:                               ; preds = %127, %129
  %.0.i34 = phi float [ %128, %127 ], [ %130, %129 ], !dbg !43
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i36 = icmp eq i32 %131, 0, !dbg !43
  br i1 %.not.i36, label %134, label %132, !dbg !43

132:                                              ; preds = %__nv_rsqrtf.exit35
  %133 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit38, !dbg !43

134:                                              ; preds = %__nv_rsqrtf.exit35
  %135 = tail call float @llvm.nvvm.rsqrt.approx.f(float %115), !dbg !43
  br label %__nv_rsqrtf.exit38, !dbg !43

__nv_rsqrtf.exit38:                               ; preds = %132, %134
  %.0.i37 = phi float [ %133, %132 ], [ %135, %134 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %136 = bitcast float %.0.i28 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %136, i1 true) #5, !dbg !44
  %137 = bitcast float %.0.i31 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %137, i1 true) #5, !dbg !44
  %138 = bitcast float %.0.i34 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %138, i1 true) #5, !dbg !44
  %139 = bitcast float %.0.i37 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %139, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %140 = load float, ptr addrspace(3) %112, align 8, !dbg !44
  %141 = shl i32 %16, 7, !dbg !45
  %142 = and i32 %18, 508
  %143 = shl i32 %13, 3
  %144 = and i32 %143, 504
  %145 = or disjoint i32 %144, %.lobit
  %146 = lshr exact i32 %18, 1
  %147 = and i32 %146, 252
  %148 = add nuw nsw i32 %147, %142
  %149 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %148
  %150 = lshr exact i32 %144, 1
  %151 = add nuw nsw i32 %150, %145
  %152 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %151
  %153 = or disjoint i32 %145, 2
  %154 = add nuw nsw i32 %153, %150
  %155 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %154
  %156 = or disjoint i32 %145, 4
  %157 = add nuw nsw i32 %156, %150
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %157
  %159 = or disjoint i32 %145, 6
  %160 = add nuw nsw i32 %159, %150
  %161 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %160
  %162 = icmp eq i32 %.lobit, 0
  %163 = shl i32 %65, 7
  %164 = mul i32 %67, 6144
  %165 = add i32 %164, %163
  %166 = and i1 %66, %162
  %167 = icmp ne i32 %.lobit, 0
  %168 = and i1 %66, %167
  %169 = add i32 %165, 3073
  %170 = add i32 %165, 3075
  %171 = add i32 %165, 3077
  %172 = add i32 %165, 3079
  %173 = add i32 %165, 3072
  %174 = add i32 %165, 3074
  %175 = add i32 %165, 3076
  %176 = add i32 %165, 3078
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %151
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %154
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %157
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %160
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %148
  %182 = sext i32 %176 to i64, !dbg !46
  %183 = sext i32 %175 to i64, !dbg !46
  %184 = sext i32 %174 to i64, !dbg !46
  %185 = sext i32 %173 to i64, !dbg !46
  %186 = sext i32 %172 to i64, !dbg !46
  %187 = sext i32 %171 to i64, !dbg !46
  %188 = sext i32 %170 to i64, !dbg !46
  %189 = sext i32 %169 to i64, !dbg !46
  %190 = sext i32 %165 to i64, !dbg !46
  %191 = sext i32 %84 to i64, !dbg !46
  %192 = sext i32 %141 to i64, !dbg !46
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep62 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep64 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep66 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep68 = getelementptr bfloat, ptr addrspace(1) %0, i64 %190, !dbg !46
  %invariant.gep70 = getelementptr bfloat, ptr addrspace(1) %0, i64 %189, !dbg !46
  %invariant.gep72 = getelementptr bfloat, ptr addrspace(1) %0, i64 %188, !dbg !46
  %invariant.gep74 = getelementptr bfloat, ptr addrspace(1) %0, i64 %187, !dbg !46
  %invariant.gep76 = getelementptr bfloat, ptr addrspace(1) %0, i64 %186, !dbg !46
  %invariant.gep78 = getelementptr bfloat, ptr addrspace(1) %0, i64 %185, !dbg !46
  %invariant.gep80 = getelementptr bfloat, ptr addrspace(1) %0, i64 %184, !dbg !46
  %invariant.gep82 = getelementptr bfloat, ptr addrspace(1) %0, i64 %183, !dbg !46
  %invariant.gep84 = getelementptr bfloat, ptr addrspace(1) %0, i64 %182, !dbg !46
  %193 = getelementptr inbounds nuw i8, ptr addrspace(3) %181, i32 4
  br label %194, !dbg !46

194:                                              ; preds = %__nv_rsqrtf.exit38, %194
  %indvars.iv47 = phi i64 [ 0, %__nv_rsqrtf.exit38 ], [ %indvars.iv.next48, %194 ]
  %195 = or disjoint i64 %indvars.iv47, %26, !dbg !47
  %196 = trunc nuw nsw i64 %195 to i32, !dbg !48
  %197 = add i32 %24, %196, !dbg !48
  %198 = sext i32 %197 to i64, !dbg !49
  %199 = getelementptr bfloat, ptr addrspace(1) %0, i64 %198, !dbg !49
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %199, i1 %17) #5, !dbg !50
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !50
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !50
  %203 = extractvalue { i32, i32 } %200, 1, !dbg !50
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !50
  %205 = extractelement <2 x bfloat> %202, i64 0, !dbg !50
  %206 = extractelement <2 x bfloat> %202, i64 1, !dbg !50
  %207 = extractelement <2 x bfloat> %204, i64 0, !dbg !50
  %208 = extractelement <2 x bfloat> %204, i64 1, !dbg !50
  %209 = fpext bfloat %205 to float, !dbg !51
  %210 = fpext bfloat %206 to float, !dbg !51
  %211 = fpext bfloat %207 to float, !dbg !51
  %212 = fpext bfloat %208 to float, !dbg !51
  %213 = getelementptr bfloat, ptr addrspace(1) %1, i64 %195, !dbg !52
  %214 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %213, i1 true) #5, !dbg !53
  %215 = extractvalue { i32, i32 } %214, 0, !dbg !53
  %216 = bitcast i32 %215 to <2 x bfloat>, !dbg !53
  %217 = extractvalue { i32, i32 } %214, 1, !dbg !53
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !53
  %219 = extractelement <2 x bfloat> %216, i64 0, !dbg !53
  %220 = extractelement <2 x bfloat> %216, i64 1, !dbg !53
  %221 = extractelement <2 x bfloat> %218, i64 0, !dbg !53
  %222 = extractelement <2 x bfloat> %218, i64 1, !dbg !53
  %223 = fpext bfloat %219 to float, !dbg !54
  %224 = fpext bfloat %220 to float, !dbg !54
  %225 = fpext bfloat %221 to float, !dbg !54
  %226 = fpext bfloat %222 to float, !dbg !54
  %227 = add nuw nsw i64 %195, %191, !dbg !55
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !56
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %228, i1 %17) #5, !dbg !57
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !57
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !57
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !57
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !57
  %234 = bitcast i32 %230 to float, !dbg !57
  %235 = bitcast i32 %231 to float, !dbg !57
  %236 = bitcast i32 %232 to float, !dbg !57
  %237 = bitcast i32 %233 to float, !dbg !57
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %227, !dbg !58
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %238, i1 %17) #5, !dbg !59
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !59
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !59
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !59
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %240, i32 %241, i32 %242, i32 %243, i1 true) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %244 = load float, ptr addrspace(3) %152, align 4, !dbg !59
  %245 = load float, ptr addrspace(3) %155, align 4, !dbg !59
  %246 = load float, ptr addrspace(3) %158, align 4, !dbg !59
  %247 = load float, ptr addrspace(3) %161, align 4, !dbg !59
  %248 = add i32 %25, %196, !dbg !60
  %249 = sext i32 %248 to i64, !dbg !61
  %250 = getelementptr bfloat, ptr addrspace(1) %0, i64 %249, !dbg !61
  %251 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %250, i1 %17) #5, !dbg !62
  %252 = extractvalue { i32, i32 } %251, 0, !dbg !62
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !62
  %254 = extractvalue { i32, i32 } %251, 1, !dbg !62
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !62
  %256 = extractelement <2 x bfloat> %253, i64 0, !dbg !62
  %257 = extractelement <2 x bfloat> %253, i64 1, !dbg !62
  %258 = extractelement <2 x bfloat> %255, i64 0, !dbg !62
  %259 = extractelement <2 x bfloat> %255, i64 1, !dbg !62
  %260 = fpext bfloat %256 to float, !dbg !63
  %261 = fpext bfloat %257 to float, !dbg !63
  %262 = fpext bfloat %258 to float, !dbg !63
  %263 = fpext bfloat %259 to float, !dbg !63
  %264 = getelementptr bfloat, ptr addrspace(1) %4, i64 %195, !dbg !64
  %265 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %264, i1 true) #5, !dbg !65
  %266 = extractvalue { i32, i32 } %265, 0, !dbg !65
  %267 = bitcast i32 %266 to <2 x bfloat>, !dbg !65
  %268 = extractvalue { i32, i32 } %265, 1, !dbg !65
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !65
  %270 = extractelement <2 x bfloat> %267, i64 0, !dbg !65
  %271 = extractelement <2 x bfloat> %267, i64 1, !dbg !65
  %272 = extractelement <2 x bfloat> %269, i64 0, !dbg !65
  %273 = extractelement <2 x bfloat> %269, i64 1, !dbg !65
  %274 = fpext bfloat %270 to float, !dbg !66
  %275 = fpext bfloat %271 to float, !dbg !66
  %276 = fpext bfloat %272 to float, !dbg !66
  %277 = fpext bfloat %273 to float, !dbg !66
  %278 = or disjoint i64 %indvars.iv47, 2, !dbg !67
  %279 = or disjoint i64 %indvars.iv47, 4, !dbg !67
  %280 = or disjoint i64 %indvars.iv47, 6, !dbg !67
  %281 = or disjoint i64 %indvars.iv47, 1, !dbg !68
  %282 = or disjoint i64 %indvars.iv47, 3, !dbg !68
  %283 = or disjoint i64 %indvars.iv47, 5, !dbg !68
  %284 = or disjoint i64 %indvars.iv47, 7, !dbg !68
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %281, !dbg !69
  %gep57 = getelementptr bfloat, ptr addrspace(1) %invariant.gep56, i64 %282, !dbg !69
  %gep59 = getelementptr bfloat, ptr addrspace(1) %invariant.gep58, i64 %283, !dbg !69
  %gep61 = getelementptr bfloat, ptr addrspace(1) %invariant.gep60, i64 %284, !dbg !69
  %285 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep, i1 %166) #5, !dbg !70
  %286 = bitcast i16 %285 to bfloat, !dbg !70
  %287 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep57, i1 %166) #5, !dbg !70
  %288 = bitcast i16 %287 to bfloat, !dbg !70
  %289 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep59, i1 %166) #5, !dbg !70
  %290 = bitcast i16 %289 to bfloat, !dbg !70
  %291 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep61, i1 %166) #5, !dbg !70
  %292 = bitcast i16 %291 to bfloat, !dbg !70
  %293 = fpext bfloat %286 to float, !dbg !71
  %294 = fpext bfloat %288 to float, !dbg !71
  %295 = fpext bfloat %290 to float, !dbg !71
  %296 = fpext bfloat %292 to float, !dbg !71
  %297 = fmul float %113, %293, !dbg !40
  %298 = fmul float %113, %294, !dbg !40
  %299 = fmul float %113, %295, !dbg !40
  %300 = fmul float %113, %296, !dbg !40
  %301 = getelementptr bfloat, ptr addrspace(1) %1, i64 %281, !dbg !72
  %302 = getelementptr bfloat, ptr addrspace(1) %1, i64 %282, !dbg !72
  %303 = getelementptr bfloat, ptr addrspace(1) %1, i64 %283, !dbg !72
  %304 = getelementptr bfloat, ptr addrspace(1) %1, i64 %284, !dbg !72
  %305 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %301, i1 %166) #5, !dbg !73
  %306 = bitcast i16 %305 to bfloat, !dbg !73
  %307 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %302, i1 %166) #5, !dbg !73
  %308 = bitcast i16 %307 to bfloat, !dbg !73
  %309 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %303, i1 %166) #5, !dbg !73
  %310 = bitcast i16 %309 to bfloat, !dbg !73
  %311 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %304, i1 %166) #5, !dbg !73
  %312 = bitcast i16 %311 to bfloat, !dbg !73
  %313 = fpext bfloat %306 to float, !dbg !74
  %314 = fpext bfloat %308 to float, !dbg !74
  %315 = fpext bfloat %310 to float, !dbg !74
  %316 = fpext bfloat %312 to float, !dbg !74
  %317 = fmul float %297, %313, !dbg !75
  %318 = fmul float %298, %314, !dbg !75
  %319 = fmul float %299, %315, !dbg !75
  %320 = fmul float %300, %316, !dbg !75
  %321 = fsub float 0.000000e+00, %317, !dbg !76
  %322 = fsub float 0.000000e+00, %318, !dbg !76
  %323 = fsub float 0.000000e+00, %319, !dbg !76
  %324 = fsub float 0.000000e+00, %320, !dbg !76
  %gep63 = getelementptr bfloat, ptr addrspace(1) %invariant.gep62, i64 %indvars.iv47, !dbg !77
  %gep65 = getelementptr bfloat, ptr addrspace(1) %invariant.gep64, i64 %278, !dbg !77
  %gep67 = getelementptr bfloat, ptr addrspace(1) %invariant.gep66, i64 %279, !dbg !77
  %gep69 = getelementptr bfloat, ptr addrspace(1) %invariant.gep68, i64 %280, !dbg !77
  %325 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep63, i1 %168) #5, !dbg !78
  %326 = bitcast i16 %325 to bfloat, !dbg !78
  %327 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep65, i1 %168) #5, !dbg !78
  %328 = bitcast i16 %327 to bfloat, !dbg !78
  %329 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep67, i1 %168) #5, !dbg !78
  %330 = bitcast i16 %329 to bfloat, !dbg !78
  %331 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep69, i1 %168) #5, !dbg !78
  %332 = bitcast i16 %331 to bfloat, !dbg !78
  %333 = fpext bfloat %326 to float, !dbg !79
  %334 = fpext bfloat %328 to float, !dbg !79
  %335 = fpext bfloat %330 to float, !dbg !79
  %336 = fpext bfloat %332 to float, !dbg !79
  %337 = fmul float %113, %333, !dbg !80
  %338 = fmul float %113, %334, !dbg !80
  %339 = fmul float %113, %335, !dbg !80
  %340 = fmul float %113, %336, !dbg !80
  %341 = getelementptr bfloat, ptr addrspace(1) %1, i64 %indvars.iv47, !dbg !81
  %342 = getelementptr bfloat, ptr addrspace(1) %1, i64 %278, !dbg !81
  %343 = getelementptr bfloat, ptr addrspace(1) %1, i64 %279, !dbg !81
  %344 = getelementptr bfloat, ptr addrspace(1) %1, i64 %280, !dbg !81
  %345 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %341, i1 %168) #5, !dbg !82
  %346 = bitcast i16 %345 to bfloat, !dbg !82
  %347 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %342, i1 %168) #5, !dbg !82
  %348 = bitcast i16 %347 to bfloat, !dbg !82
  %349 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %343, i1 %168) #5, !dbg !82
  %350 = bitcast i16 %349 to bfloat, !dbg !82
  %351 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %344, i1 %168) #5, !dbg !82
  %352 = bitcast i16 %351 to bfloat, !dbg !82
  %353 = fpext bfloat %346 to float, !dbg !83
  %354 = fpext bfloat %348 to float, !dbg !83
  %355 = fpext bfloat %350 to float, !dbg !83
  %356 = fpext bfloat %352 to float, !dbg !83
  %357 = fmul float %337, %353, !dbg !84
  %358 = fmul float %338, %354, !dbg !84
  %359 = fmul float %339, %355, !dbg !84
  %360 = fmul float %340, %356, !dbg !84
  %361 = select i1 %162, float %321, float %357, !dbg !85
  %362 = select i1 %162, float %322, float %358, !dbg !85
  %363 = select i1 %162, float %323, float %359, !dbg !85
  %364 = select i1 %162, float %324, float %360, !dbg !85
  %365 = fmul float %.0.i25, %209, !dbg !86
  %366 = fmul float %.0.i25, %210, !dbg !86
  %367 = fmul float %.0.i25, %211, !dbg !86
  %368 = fmul float %.0.i25, %212, !dbg !86
  %369 = fmul float %365, %223, !dbg !87
  %370 = fmul float %366, %224, !dbg !87
  %371 = fmul float %367, %225, !dbg !87
  %372 = fmul float %368, %226, !dbg !87
  %373 = fmul float %369, %234, !dbg !88
  %374 = fmul float %370, %235, !dbg !88
  %375 = fmul float %371, %236, !dbg !88
  %376 = fmul float %372, %237, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %377 = bitcast float %373 to i32, !dbg !88
  %378 = bitcast float %374 to i32, !dbg !88
  %379 = bitcast float %375 to i32, !dbg !88
  %380 = bitcast float %376 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %377, i32 %378, i32 %379, i32 %380, i1 true) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %381 = load float, ptr addrspace(3) %152, align 4, !dbg !88
  %382 = load float, ptr addrspace(3) %155, align 4, !dbg !88
  %383 = load float, ptr addrspace(3) %158, align 4, !dbg !88
  %384 = load float, ptr addrspace(3) %161, align 4, !dbg !88
  %385 = fmul float %244, %361, !dbg !89
  %386 = fmul float %245, %362, !dbg !89
  %387 = fmul float %246, %363, !dbg !89
  %388 = fmul float %247, %364, !dbg !89
  %389 = fadd float %385, %381, !dbg !90
  %390 = fadd float %386, %382, !dbg !90
  %391 = fadd float %387, %383, !dbg !90
  %392 = fadd float %388, %384, !dbg !90
  %gep71 = getelementptr bfloat, ptr addrspace(1) %invariant.gep70, i64 %indvars.iv47, !dbg !91
  %gep73 = getelementptr bfloat, ptr addrspace(1) %invariant.gep72, i64 %indvars.iv47, !dbg !91
  %gep75 = getelementptr bfloat, ptr addrspace(1) %invariant.gep74, i64 %indvars.iv47, !dbg !91
  %gep77 = getelementptr bfloat, ptr addrspace(1) %invariant.gep76, i64 %indvars.iv47, !dbg !91
  %393 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep71, i1 %166) #5, !dbg !92
  %394 = bitcast i16 %393 to bfloat, !dbg !92
  %395 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep73, i1 %166) #5, !dbg !92
  %396 = bitcast i16 %395 to bfloat, !dbg !92
  %397 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep75, i1 %166) #5, !dbg !92
  %398 = bitcast i16 %397 to bfloat, !dbg !92
  %399 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep77, i1 %166) #5, !dbg !92
  %400 = bitcast i16 %399 to bfloat, !dbg !92
  %401 = fpext bfloat %394 to float, !dbg !93
  %402 = fpext bfloat %396 to float, !dbg !93
  %403 = fpext bfloat %398 to float, !dbg !93
  %404 = fpext bfloat %400 to float, !dbg !93
  %405 = fmul float %140, %401, !dbg !44
  %406 = fmul float %140, %402, !dbg !44
  %407 = fmul float %140, %403, !dbg !44
  %408 = fmul float %140, %404, !dbg !44
  %409 = getelementptr bfloat, ptr addrspace(1) %4, i64 %281, !dbg !94
  %410 = getelementptr bfloat, ptr addrspace(1) %4, i64 %282, !dbg !94
  %411 = getelementptr bfloat, ptr addrspace(1) %4, i64 %283, !dbg !94
  %412 = getelementptr bfloat, ptr addrspace(1) %4, i64 %284, !dbg !94
  %413 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %409, i1 %166) #5, !dbg !95
  %414 = bitcast i16 %413 to bfloat, !dbg !95
  %415 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %410, i1 %166) #5, !dbg !95
  %416 = bitcast i16 %415 to bfloat, !dbg !95
  %417 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %411, i1 %166) #5, !dbg !95
  %418 = bitcast i16 %417 to bfloat, !dbg !95
  %419 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %412, i1 %166) #5, !dbg !95
  %420 = bitcast i16 %419 to bfloat, !dbg !95
  %421 = fpext bfloat %414 to float, !dbg !96
  %422 = fpext bfloat %416 to float, !dbg !96
  %423 = fpext bfloat %418 to float, !dbg !96
  %424 = fpext bfloat %420 to float, !dbg !96
  %425 = fmul float %405, %421, !dbg !97
  %426 = fmul float %406, %422, !dbg !97
  %427 = fmul float %407, %423, !dbg !97
  %428 = fmul float %408, %424, !dbg !97
  %429 = fsub float 0.000000e+00, %425, !dbg !98
  %430 = fsub float 0.000000e+00, %426, !dbg !98
  %431 = fsub float 0.000000e+00, %427, !dbg !98
  %432 = fsub float 0.000000e+00, %428, !dbg !98
  %gep79 = getelementptr bfloat, ptr addrspace(1) %invariant.gep78, i64 %indvars.iv47, !dbg !99
  %gep81 = getelementptr bfloat, ptr addrspace(1) %invariant.gep80, i64 %indvars.iv47, !dbg !99
  %gep83 = getelementptr bfloat, ptr addrspace(1) %invariant.gep82, i64 %indvars.iv47, !dbg !99
  %gep85 = getelementptr bfloat, ptr addrspace(1) %invariant.gep84, i64 %indvars.iv47, !dbg !99
  %433 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep79, i1 %168) #5, !dbg !100
  %434 = bitcast i16 %433 to bfloat, !dbg !100
  %435 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep81, i1 %168) #5, !dbg !100
  %436 = bitcast i16 %435 to bfloat, !dbg !100
  %437 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep83, i1 %168) #5, !dbg !100
  %438 = bitcast i16 %437 to bfloat, !dbg !100
  %439 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %gep85, i1 %168) #5, !dbg !100
  %440 = bitcast i16 %439 to bfloat, !dbg !100
  %441 = fpext bfloat %434 to float, !dbg !101
  %442 = fpext bfloat %436 to float, !dbg !101
  %443 = fpext bfloat %438 to float, !dbg !101
  %444 = fpext bfloat %440 to float, !dbg !101
  %445 = fmul float %140, %441, !dbg !102
  %446 = fmul float %140, %442, !dbg !102
  %447 = fmul float %140, %443, !dbg !102
  %448 = fmul float %140, %444, !dbg !102
  %449 = getelementptr bfloat, ptr addrspace(1) %4, i64 %indvars.iv47, !dbg !103
  %450 = getelementptr bfloat, ptr addrspace(1) %4, i64 %278, !dbg !103
  %451 = getelementptr bfloat, ptr addrspace(1) %4, i64 %279, !dbg !103
  %452 = getelementptr bfloat, ptr addrspace(1) %4, i64 %280, !dbg !103
  %453 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %449, i1 %168) #5, !dbg !104
  %454 = bitcast i16 %453 to bfloat, !dbg !104
  %455 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %450, i1 %168) #5, !dbg !104
  %456 = bitcast i16 %455 to bfloat, !dbg !104
  %457 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %451, i1 %168) #5, !dbg !104
  %458 = bitcast i16 %457 to bfloat, !dbg !104
  %459 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %452, i1 %168) #5, !dbg !104
  %460 = bitcast i16 %459 to bfloat, !dbg !104
  %461 = fpext bfloat %454 to float, !dbg !105
  %462 = fpext bfloat %456 to float, !dbg !105
  %463 = fpext bfloat %458 to float, !dbg !105
  %464 = fpext bfloat %460 to float, !dbg !105
  %465 = fmul float %445, %461, !dbg !106
  %466 = fmul float %446, %462, !dbg !106
  %467 = fmul float %447, %463, !dbg !106
  %468 = fmul float %448, %464, !dbg !106
  %469 = select i1 %162, float %429, float %465, !dbg !85
  %470 = select i1 %162, float %430, float %466, !dbg !85
  %471 = select i1 %162, float %431, float %467, !dbg !85
  %472 = select i1 %162, float %432, float %468, !dbg !85
  %473 = fmul float %.0.i37, %260, !dbg !107
  %474 = fmul float %.0.i37, %261, !dbg !107
  %475 = fmul float %.0.i37, %262, !dbg !107
  %476 = fmul float %.0.i37, %263, !dbg !107
  %477 = fmul float %473, %274, !dbg !108
  %478 = fmul float %474, %275, !dbg !108
  %479 = fmul float %475, %276, !dbg !108
  %480 = fmul float %476, %277, !dbg !108
  %481 = fmul float %477, %234, !dbg !109
  %482 = fmul float %478, %235, !dbg !109
  %483 = fmul float %479, %236, !dbg !109
  %484 = fmul float %480, %237, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %485 = bitcast float %481 to i32, !dbg !109
  %486 = bitcast float %482 to i32, !dbg !109
  %487 = bitcast float %483 to i32, !dbg !109
  %488 = bitcast float %484 to i32, !dbg !109
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %485, i32 %486, i32 %487, i32 %488, i1 true) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %489 = load float, ptr addrspace(3) %152, align 4, !dbg !109
  %490 = load float, ptr addrspace(3) %155, align 4, !dbg !109
  %491 = load float, ptr addrspace(3) %158, align 4, !dbg !109
  %492 = load float, ptr addrspace(3) %161, align 4, !dbg !109
  %493 = fmul float %244, %469, !dbg !110
  %494 = fmul float %245, %470, !dbg !110
  %495 = fmul float %246, %471, !dbg !110
  %496 = fmul float %247, %472, !dbg !110
  %497 = fadd float %493, %489, !dbg !111
  %498 = fadd float %494, %490, !dbg !111
  %499 = fadd float %495, %491, !dbg !111
  %500 = fadd float %496, %492, !dbg !111
  %501 = add nuw nsw i64 %195, %192, !dbg !112
  %502 = getelementptr bfloat, ptr addrspace(1) %5, i64 %501, !dbg !113
  %503 = fptrunc float %389 to bfloat, !dbg !114
  %504 = fptrunc float %390 to bfloat, !dbg !114
  %505 = fptrunc float %391 to bfloat, !dbg !114
  %506 = fptrunc float %392 to bfloat, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %507 = bitcast bfloat %503 to <1 x i16>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %177, <1 x i16> %507, i1 true) #5, !dbg !114
  %508 = bitcast bfloat %504 to <1 x i16>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %178, <1 x i16> %508, i1 true) #5, !dbg !114
  %509 = bitcast bfloat %505 to <1 x i16>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %179, <1 x i16> %509, i1 true) #5, !dbg !114
  %510 = bitcast bfloat %506 to <1 x i16>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %180, <1 x i16> %510, i1 true) #5, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %.uncasted.extract = load i32, ptr addrspace(3) %181, align 8, !dbg !114
  %.uncasted.extract10 = load i32, ptr addrspace(3) %193, align 4, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract10, ptr addrspace(1) %502, i1 %17) #5, !dbg !114
  %511 = getelementptr bfloat, ptr addrspace(1) %6, i64 %501, !dbg !115
  %512 = fptrunc float %497 to bfloat, !dbg !116
  %513 = fptrunc float %498 to bfloat, !dbg !116
  %514 = fptrunc float %499 to bfloat, !dbg !116
  %515 = fptrunc float %500 to bfloat, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %516 = bitcast bfloat %512 to <1 x i16>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %177, <1 x i16> %516, i1 true) #5, !dbg !116
  %517 = bitcast bfloat %513 to <1 x i16>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %178, <1 x i16> %517, i1 true) #5, !dbg !116
  %518 = bitcast bfloat %514 to <1 x i16>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %179, <1 x i16> %518, i1 true) #5, !dbg !116
  %519 = bitcast bfloat %515 to <1 x i16>, !dbg !116
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %180, <1 x i16> %519, i1 true) #5, !dbg !116
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %.uncasted.extract15 = load i32, ptr addrspace(3) %181, align 8, !dbg !116
  %.uncasted.extract17 = load i32, ptr addrspace(3) %193, align 4, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract15, i32 %.uncasted.extract17, ptr addrspace(1) %511, i1 %17) #5, !dbg !116
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 8, !dbg !46
  %520 = icmp samesign ult i64 %indvars.iv47, 120, !dbg !46
  br i1 %520, label %194, label %521, !dbg !46

521:                                              ; preds = %194
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct4vjqhad7sc635wan56m2hfgerxquvjcsylutimuij7rrwxhwfl.py", directory: "/tmp/torchinductor_root/t4")
!4 = !{ptr @triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", linkageName: "triton_red_fused__scaled_dot_product_flash_attention__to_copy_add_mean_mul_pow_rsqrt_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 19, scope: !6)
!16 = !DILocation(line: 33, column: 40, scope: !6)
!17 = !DILocation(line: 50, column: 50, scope: !6)
!18 = !DILocation(line: 39, column: 57, scope: !6)
!19 = !DILocation(line: 39, column: 34, scope: !6)
!20 = !DILocation(line: 39, column: 67, scope: !6)
!21 = !DILocation(line: 40, column: 50, scope: !6)
!22 = !DILocation(line: 40, column: 34, scope: !6)
!23 = !DILocation(line: 40, column: 60, scope: !6)
!24 = !DILocation(line: 40, column: 121, scope: !6)
!25 = !DILocation(line: 47, column: 22, scope: !6)
!26 = !DILocation(line: 49, column: 25, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 51, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !34)
!34 = !DILocation(line: 52, column: 27, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !34)
!36 = !DILocation(line: 61, column: 46, scope: !6)
!37 = !DILocation(line: 73, column: 25, scope: !6)
!38 = !DILocation(line: 75, column: 24, scope: !6)
!39 = !DILocation(line: 76, column: 32, scope: !6)
!40 = !DILocation(line: 77, column: 24, scope: !6)
!41 = !DILocation(line: 118, column: 24, scope: !6)
!42 = !DILocation(line: 119, column: 24, scope: !6)
!43 = !DILocation(line: 120, column: 32, scope: !6)
!44 = !DILocation(line: 121, column: 24, scope: !6)
!45 = !DILocation(line: 153, column: 40, scope: !6)
!46 = !DILocation(line: 53, column: 40, scope: !6)
!47 = !DILocation(line: 54, column: 31, scope: !6)
!48 = !DILocation(line: 59, column: 51, scope: !6)
!49 = !DILocation(line: 59, column: 35, scope: !6)
!50 = !DILocation(line: 59, column: 61, scope: !6)
!51 = !DILocation(line: 59, column: 122, scope: !6)
!52 = !DILocation(line: 60, column: 35, scope: !6)
!53 = !DILocation(line: 60, column: 42, scope: !6)
!54 = !DILocation(line: 60, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 42, scope: !6)
!56 = !DILocation(line: 61, column: 35, scope: !6)
!57 = !DILocation(line: 61, column: 51, scope: !6)
!58 = !DILocation(line: 62, column: 35, scope: !6)
!59 = !DILocation(line: 62, column: 51, scope: !6)
!60 = !DILocation(line: 63, column: 58, scope: !6)
!61 = !DILocation(line: 63, column: 35, scope: !6)
!62 = !DILocation(line: 63, column: 68, scope: !6)
!63 = !DILocation(line: 63, column: 130, scope: !6)
!64 = !DILocation(line: 64, column: 35, scope: !6)
!65 = !DILocation(line: 64, column: 42, scope: !6)
!66 = !DILocation(line: 64, column: 95, scope: !6)
!67 = !DILocation(line: 70, column: 50, scope: !6)
!68 = !DILocation(line: 70, column: 39, scope: !6)
!69 = !DILocation(line: 70, column: 35, scope: !6)
!70 = !DILocation(line: 70, column: 74, scope: !6)
!71 = !DILocation(line: 70, column: 143, scope: !6)
!72 = !DILocation(line: 79, column: 35, scope: !6)
!73 = !DILocation(line: 79, column: 92, scope: !6)
!74 = !DILocation(line: 79, column: 161, scope: !6)
!75 = !DILocation(line: 80, column: 24, scope: !6)
!76 = !DILocation(line: 81, column: 17, scope: !6)
!77 = !DILocation(line: 87, column: 35, scope: !6)
!78 = !DILocation(line: 87, column: 70, scope: !6)
!79 = !DILocation(line: 87, column: 139, scope: !6)
!80 = !DILocation(line: 94, column: 24, scope: !6)
!81 = !DILocation(line: 96, column: 35, scope: !6)
!82 = !DILocation(line: 96, column: 88, scope: !6)
!83 = !DILocation(line: 96, column: 157, scope: !6)
!84 = !DILocation(line: 97, column: 24, scope: !6)
!85 = !DILocation(line: 0, scope: !6)
!86 = !DILocation(line: 108, column: 24, scope: !6)
!87 = !DILocation(line: 110, column: 24, scope: !6)
!88 = !DILocation(line: 112, column: 24, scope: !6)
!89 = !DILocation(line: 113, column: 24, scope: !6)
!90 = !DILocation(line: 114, column: 24, scope: !6)
!91 = !DILocation(line: 116, column: 35, scope: !6)
!92 = !DILocation(line: 116, column: 77, scope: !6)
!93 = !DILocation(line: 116, column: 146, scope: !6)
!94 = !DILocation(line: 123, column: 35, scope: !6)
!95 = !DILocation(line: 123, column: 92, scope: !6)
!96 = !DILocation(line: 123, column: 161, scope: !6)
!97 = !DILocation(line: 124, column: 24, scope: !6)
!98 = !DILocation(line: 125, column: 17, scope: !6)
!99 = !DILocation(line: 128, column: 35, scope: !6)
!100 = !DILocation(line: 128, column: 77, scope: !6)
!101 = !DILocation(line: 128, column: 146, scope: !6)
!102 = !DILocation(line: 133, column: 24, scope: !6)
!103 = !DILocation(line: 135, column: 35, scope: !6)
!104 = !DILocation(line: 135, column: 88, scope: !6)
!105 = !DILocation(line: 135, column: 157, scope: !6)
!106 = !DILocation(line: 136, column: 24, scope: !6)
!107 = !DILocation(line: 145, column: 24, scope: !6)
!108 = !DILocation(line: 147, column: 25, scope: !6)
!109 = !DILocation(line: 149, column: 26, scope: !6)
!110 = !DILocation(line: 150, column: 25, scope: !6)
!111 = !DILocation(line: 151, column: 26, scope: !6)
!112 = !DILocation(line: 153, column: 36, scope: !6)
!113 = !DILocation(line: 153, column: 29, scope: !6)
!114 = !DILocation(line: 153, column: 52, scope: !6)
!115 = !DILocation(line: 154, column: 29, scope: !6)
!116 = !DILocation(line: 154, column: 53, scope: !6)
!117 = !DILocation(line: 53, column: 4, scope: !6)
