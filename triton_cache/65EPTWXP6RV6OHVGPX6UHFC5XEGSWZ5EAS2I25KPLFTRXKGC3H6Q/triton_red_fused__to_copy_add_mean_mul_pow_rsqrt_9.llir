; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 3, !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 56, !dbg !14
  %17 = shl i32 %13, 12, !dbg !15
  %18 = or disjoint i32 %17, %16
  %19 = insertelement <8 x i1> poison, i1 %14, i64 0, !dbg !16
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %21, !dbg !17

21:                                               ; preds = %7, %21
  %22 = phi i32 [ 0, %7 ], [ %70, %21 ]
  %23 = phi <8 x float> [ zeroinitializer, %7 ], [ %69, %21 ]
  %24 = or i32 %18, %22, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %14) #4, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !20
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %14) #4, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = shufflevector <2 x bfloat> %29, <2 x bfloat> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %47 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <8 x bfloat> %46, <8 x bfloat> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <8 x bfloat> %48, <8 x bfloat> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %52 = shufflevector <8 x bfloat> %50, <8 x bfloat> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %53 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %54 = shufflevector <8 x bfloat> %52, <8 x bfloat> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %55 = fpext <8 x bfloat> %54 to <8 x float>, !dbg !23
  %56 = shufflevector <2 x bfloat> %39, <2 x bfloat> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %57 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %58 = shufflevector <8 x bfloat> %56, <8 x bfloat> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <8 x bfloat> %58, <8 x bfloat> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %62 = shufflevector <8 x bfloat> %60, <8 x bfloat> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %63 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %64 = shufflevector <8 x bfloat> %62, <8 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %65 = fpext <8 x bfloat> %64 to <8 x float>, !dbg !24
  %66 = fadd <8 x float> %55, %65, !dbg !25
  %67 = fmul <8 x float> %66, %66, !dbg !26
  %68 = fadd <8 x float> %23, %67, !dbg !27
  %69 = select <8 x i1> %20, <8 x float> %68, <8 x float> %23, !dbg !16
  %70 = add nuw nsw i32 %22, 64, !dbg !17
  %71 = icmp samesign ult i32 %22, 4032, !dbg !17
  br i1 %71, label %21, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %21
  %shift = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %72 = fadd <8 x float> %69, %shift, !dbg !28
  %shift44 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %73 = fadd <8 x float> %shift44, %72, !dbg !28
  %shift45 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %74 = fadd <8 x float> %shift45, %73, !dbg !28
  %shift46 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %75 = fadd <8 x float> %shift46, %74, !dbg !28
  %shift47 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %76 = fadd <8 x float> %shift47, %75, !dbg !28
  %shift48 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %77 = fadd <8 x float> %shift48, %76, !dbg !28
  %shift49 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %78 = fadd <8 x float> %shift49, %77, !dbg !28
  %79 = extractelement <8 x float> %78, i64 0, !dbg !28
  %80 = bitcast float %79 to i32, !dbg !33
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !33
  %82 = bitcast i32 %81 to float, !dbg !33
  %83 = fadd float %79, %82, !dbg !28
  %84 = bitcast float %83 to i32, !dbg !33
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = fadd float %83, %86, !dbg !28
  %88 = bitcast float %87 to i32, !dbg !33
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !33
  %90 = bitcast i32 %89 to float, !dbg !33
  %91 = fadd float %87, %90, !dbg !28
  %92 = tail call float @llvm.nvvm.div.full(float %91, float 4.096000e+03), !dbg !34
  %93 = fadd float %92, 0x3EB0C6F7A0000000, !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i20 = icmp eq i32 %101, 0, !dbg !36
  br i1 %.not.i20, label %104, label %102, !dbg !36

102:                                              ; preds = %__nv_rsqrtf.exit
  %103 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !36
  br label %__nv_rsqrtf.exit22, !dbg !36

104:                                              ; preds = %__nv_rsqrtf.exit
  %105 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !36
  br label %__nv_rsqrtf.exit22, !dbg !36

__nv_rsqrtf.exit22:                               ; preds = %102, %104
  %.0.i21 = phi float [ %103, %102 ], [ %105, %104 ], !dbg !36
  %106 = zext nneg i32 %16 to i64, !dbg !37
  %107 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !38
  %108 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  br label %109, !dbg !37

109:                                              ; preds = %__nv_rsqrtf.exit22, %109
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit22 ], [ %indvars.iv.next, %109 ]
  %110 = or disjoint i64 %indvars.iv, %106, !dbg !39
  %111 = getelementptr bfloat, ptr addrspace(1) %2, i64 %110, !dbg !40
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %111, i1 true) #4, !dbg !41
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !41
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !41
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !41
  %117 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !41
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !41
  %119 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !41
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !41
  %121 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %18, %121
  %122 = sext i32 %.reass to i64, !dbg !42
  %123 = getelementptr bfloat, ptr addrspace(1) %0, i64 %122, !dbg !42
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %123, i1 %14) #4, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !43
  %127 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !43
  %129 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %130 = bitcast i32 %129 to <2 x bfloat>, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !43
  %133 = getelementptr bfloat, ptr addrspace(1) %1, i64 %122, !dbg !44
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %133, i1 %14) #4, !dbg !45
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !45
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !45
  %137 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !45
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !45
  %139 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !45
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !45
  %141 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !45
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !45
  %143 = getelementptr bfloat, ptr addrspace(1) %3, i64 %122, !dbg !46
  %144 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !47
  %145 = fpext <2 x bfloat> %126 to <2 x float>, !dbg !48
  %146 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !49
  %147 = fadd <2 x float> %145, %146, !dbg !50
  %148 = fmul <2 x float> %108, %147, !dbg !38
  %149 = fmul <2 x float> %148, %144, !dbg !51
  %150 = fptrunc <2 x float> %149 to <2 x bfloat>, !dbg !52
  %151 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !47
  %152 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !48
  %153 = fpext <2 x bfloat> %138 to <2 x float>, !dbg !49
  %154 = fadd <2 x float> %152, %153, !dbg !50
  %155 = fmul <2 x float> %108, %154, !dbg !38
  %156 = fmul <2 x float> %155, %151, !dbg !51
  %157 = fptrunc <2 x float> %156 to <2 x bfloat>, !dbg !52
  %158 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !47
  %159 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !48
  %160 = fpext <2 x bfloat> %140 to <2 x float>, !dbg !49
  %161 = fadd <2 x float> %159, %160, !dbg !50
  %162 = fmul <2 x float> %108, %161, !dbg !38
  %163 = fmul <2 x float> %162, %158, !dbg !51
  %164 = fptrunc <2 x float> %163 to <2 x bfloat>, !dbg !52
  %165 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !47
  %166 = fpext <2 x bfloat> %132 to <2 x float>, !dbg !48
  %167 = fpext <2 x bfloat> %142 to <2 x float>, !dbg !49
  %168 = fadd <2 x float> %166, %167, !dbg !50
  %169 = fmul <2 x float> %108, %168, !dbg !38
  %170 = fmul <2 x float> %169, %165, !dbg !51
  %171 = fptrunc <2 x float> %170 to <2 x bfloat>, !dbg !52
  %172 = bitcast <2 x bfloat> %150 to i32, !dbg !52
  %173 = bitcast <2 x bfloat> %157 to i32, !dbg !52
  %174 = bitcast <2 x bfloat> %164 to i32, !dbg !52
  %175 = bitcast <2 x bfloat> %171 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %173, i32 %174, i32 %175, ptr addrspace(1) %143, i1 %14) #4, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !37
  %176 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !37
  br i1 %176, label %109, label %177, !dbg !37

177:                                              ; preds = %109
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuqqoruredhxyjt7i3sc6go6wuy5c4eu2zhozoysdpb6ykfmzhht.py", directory: "/tmp/torchinductor_root/uq")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 43, column: 48, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 112, scope: !6)
!25 = !DILocation(line: 38, column: 22, scope: !6)
!26 = !DILocation(line: 40, column: 22, scope: !6)
!27 = !DILocation(line: 42, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 44, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 57, column: 24, scope: !6)
!35 = !DILocation(line: 59, column: 24, scope: !6)
!36 = !DILocation(line: 60, column: 32, scope: !6)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 46, column: 31, scope: !6)
!40 = !DILocation(line: 51, column: 34, scope: !6)
!41 = !DILocation(line: 51, column: 41, scope: !6)
!42 = !DILocation(line: 52, column: 34, scope: !6)
!43 = !DILocation(line: 52, column: 51, scope: !6)
!44 = !DILocation(line: 53, column: 35, scope: !6)
!45 = !DILocation(line: 53, column: 52, scope: !6)
!46 = !DILocation(line: 64, column: 29, scope: !6)
!47 = !DILocation(line: 51, column: 94, scope: !6)
!48 = !DILocation(line: 52, column: 113, scope: !6)
!49 = !DILocation(line: 53, column: 114, scope: !6)
!50 = !DILocation(line: 54, column: 23, scope: !6)
!51 = !DILocation(line: 63, column: 23, scope: !6)
!52 = !DILocation(line: 64, column: 53, scope: !6)
!53 = !DILocation(line: 45, column: 4, scope: !6)
