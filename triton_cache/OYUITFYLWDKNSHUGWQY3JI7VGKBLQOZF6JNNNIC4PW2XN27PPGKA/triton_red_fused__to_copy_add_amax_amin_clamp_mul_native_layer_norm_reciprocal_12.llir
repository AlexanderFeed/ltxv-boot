; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 512, !dbg !11
  %.lobit = lshr exact i32 %20, 9, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 512, !dbg !13
  %24 = icmp slt i32 %18, 512, !dbg !13
  %25 = shl i32 %19, 1, !dbg !14
  %26 = and i32 %25, 2046, !dbg !14
  %27 = shl i32 %19, 2, !dbg !14
  %28 = and i32 %27, 2044, !dbg !14
  %29 = sext i32 %22 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !15
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %35 = bitcast i16 %34 to bfloat, !dbg !16
  %36 = getelementptr bfloat, ptr addrspace(1) %5, i64 %29, !dbg !17
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %41 = bitcast i16 %40 to bfloat, !dbg !18
  %42 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %35, 0xR0000, !dbg !20
  %43 = select i1 %.inv, bfloat 0xR0000, bfloat %35, !dbg !20
  %44 = fpext bfloat %43 to float, !dbg !20
  %45 = fsub float 0.000000e+00, %44, !dbg !24
  %.inv4 = fcmp ole bfloat %41, 0xR0000, !dbg !25
  %46 = select i1 %.inv4, bfloat 0xR0000, bfloat %41, !dbg !25
  %47 = fpext bfloat %46 to float, !dbg !25
  %48 = fcmp ogt float %45, %47, !dbg !27
  %49 = fcmp uno float %45, 0.000000e+00, !dbg !29
  %50 = or i1 %49, %48, !dbg !30
  %51 = select i1 %50, float %45, float %47, !dbg !31
  %52 = fmul float %51, 0x3F80204080000000, !dbg !32
  %53 = fcmp ogt float %52, 0x3EE4F8B580000000, !dbg !33
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !35
  %55 = or i1 %53, %54, !dbg !36
  %56 = select i1 %55, float %52, float 0x3EE4F8B580000000, !dbg !37
  %57 = and i32 %27, 4092
  %58 = lshr i32 %27, 9
  %59 = and i32 %58, 4
  %60 = add nuw nsw i32 %59, %57
  %61 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %60
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %63 = add nuw nsw i32 %26, 2052
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63
  %65 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %60
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63
  %68 = zext nneg i32 %28 to i64, !dbg !38
  %69 = zext nneg i32 %26 to i64, !dbg !38
  %70 = getelementptr inbounds nuw i8, ptr addrspace(3) %61, i32 4
  br label %71, !dbg !38

71:                                               ; preds = %16, %._crit_edge
  %72 = phi i1 [ true, %16 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %16 ], [ 2048, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %206, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %207, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %208, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %209, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %202, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %203, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %204, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %205, %._crit_edge ]
  %81 = phi <4 x float> [ zeroinitializer, %16 ], [ %201, %._crit_edge ]
  %82 = or disjoint i64 %indvars.iv, %69, !dbg !39
  %83 = or disjoint i64 %indvars.iv, %68, !dbg !39
  %84 = icmp samesign ult i64 %82, 3072, !dbg !40
  %85 = icmp samesign ult i64 %83, 3072, !dbg !40
  %86 = trunc nuw nsw i64 %83 to i32, !dbg !41
  %87 = add i32 %42, %86, !dbg !41
  %88 = sext i32 %87 to i64, !dbg !42
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !42
  %90 = and i1 %24, %84, !dbg !43
  %91 = and i1 %23, %85, !dbg !43
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %89, i1 %91) #5, !dbg !44
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !44
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !44
  %extelt.offset20 = lshr i32 %93, 16, !dbg !44
  %95 = trunc nuw i32 %extelt.offset20 to i16, !dbg !44
  %extelt.offset22 = lshr i32 %94, 16, !dbg !44
  %96 = trunc nuw i32 %extelt.offset22 to i16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %97 = trunc i32 %93 to i16, !dbg !45
  %98 = trunc i32 %94 to i16, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %61, i16 %97, i16 %95, i16 %98, i16 %96, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %99 = add nuw nsw i64 %82, 6144, !dbg !46
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !47
  %101 = getelementptr bfloat, ptr addrspace(1) %2, i64 %99, !dbg !48
  %102 = getelementptr i32, ptr addrspace(1) %3, i64 %88, !dbg !49
  %103 = getelementptr bfloat, ptr addrspace(1) %6, i64 %82, !dbg !50
  %104 = getelementptr bfloat, ptr addrspace(1) %7, i64 %82, !dbg !51
  %105 = load <2 x bfloat>, ptr addrspace(3) %62, align 4, !dbg !45
  %106 = load <2 x bfloat>, ptr addrspace(3) %64, align 4, !dbg !45
  %107 = shufflevector <2 x bfloat> %105, <2 x bfloat> %106, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !45
  %108 = fpext <4 x bfloat> %107 to <4 x float>, !dbg !45
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %100, i1 %84) #5, !dbg !52
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !52
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !52
  %112 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !52
  %113 = insertelement <2 x i32> %112, i32 %111, i64 1, !dbg !52
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !52
  %115 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %101, i1 %84) #5, !dbg !53
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !53
  %117 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !54
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %91) #5, !dbg !55
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !55
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !55
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !55
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !55
  %123 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %103, i1 %84) #5, !dbg !56
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !56
  %125 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !57
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !57
  %127 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %104, i1 %84) #5, !dbg !58
  %128 = bitcast i32 %127 to <2 x bfloat>, !dbg !58
  %129 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !59
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !59
  %131 = fadd <2 x float> %114, %117, !dbg !60
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !60
  %133 = sitofp i32 %119 to float, !dbg !61
  %134 = sitofp i32 %120 to float, !dbg !61
  %135 = sitofp i32 %121 to float, !dbg !61
  %136 = sitofp i32 %122 to float, !dbg !61
  %137 = fmul float %56, %133, !dbg !62
  %138 = fmul float %56, %134, !dbg !62
  %139 = fmul float %56, %135, !dbg !62
  %140 = fmul float %56, %136, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %141 = bitcast float %137 to i32, !dbg !62
  %142 = bitcast float %138 to i32, !dbg !62
  %143 = bitcast float %139 to i32, !dbg !62
  %144 = bitcast float %140 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %65, i32 %141, i32 %142, i32 %143, i32 %144, i1 true) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %145 = load <2 x float>, ptr addrspace(3) %66, align 8, !dbg !62
  %146 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !62
  %147 = shufflevector <2 x float> %145, <2 x float> %146, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !63
  %148 = fmul <4 x float> %147, %126, !dbg !63
  %149 = fadd <4 x float> %148, %130, !dbg !64
  %150 = fmul <4 x float> %132, %149, !dbg !65
  %151 = fadd <4 x float> %150, %108, !dbg !66
  br i1 %72, label %._crit_edge, label %152, !dbg !67

152:                                              ; preds = %71
  %153 = fsub <4 x float> %151, %81, !dbg !69
  %154 = extractelement <4 x float> %153, i64 0, !dbg !69
  %155 = fsub <4 x float> %151, %81, !dbg !69
  %156 = extractelement <4 x float> %155, i64 1, !dbg !69
  %157 = fsub <4 x float> %151, %81, !dbg !69
  %158 = extractelement <4 x float> %157, i64 2, !dbg !69
  %159 = fsub <4 x float> %151, %81, !dbg !69
  %160 = extractelement <4 x float> %159, i64 3, !dbg !69
  %161 = fadd float %73, 1.000000e+00, !dbg !70
  %162 = fadd float %74, 1.000000e+00, !dbg !70
  %163 = fadd float %75, 1.000000e+00, !dbg !70
  %164 = fadd float %76, 1.000000e+00, !dbg !70
  %165 = tail call float @llvm.nvvm.div.full(float %154, float %161), !dbg !71
  %166 = tail call float @llvm.nvvm.div.full(float %156, float %162), !dbg !71
  %167 = tail call float @llvm.nvvm.div.full(float %158, float %163), !dbg !71
  %168 = tail call float @llvm.nvvm.div.full(float %160, float %164), !dbg !71
  %169 = insertelement <4 x float> poison, float %165, i64 0, !dbg !72
  %170 = insertelement <4 x float> %169, float %166, i64 1, !dbg !72
  %171 = insertelement <4 x float> %170, float %167, i64 2, !dbg !72
  %172 = insertelement <4 x float> %171, float %168, i64 3, !dbg !72
  %173 = fadd <4 x float> %81, %172, !dbg !72
  %174 = fsub <4 x float> %151, %173, !dbg !73
  %175 = fsub <4 x float> %151, %173, !dbg !73
  %176 = fsub <4 x float> %151, %173, !dbg !73
  %177 = fsub <4 x float> %151, %173, !dbg !73
  %178 = fmul <4 x float> %153, %174, !dbg !74
  %179 = extractelement <4 x float> %178, i64 0, !dbg !74
  %180 = fmul <4 x float> %155, %175, !dbg !74
  %181 = extractelement <4 x float> %180, i64 1, !dbg !74
  %182 = fmul <4 x float> %157, %176, !dbg !74
  %183 = extractelement <4 x float> %182, i64 2, !dbg !74
  %184 = fmul <4 x float> %159, %177, !dbg !74
  %185 = extractelement <4 x float> %184, i64 3, !dbg !74
  %186 = fadd float %77, %179, !dbg !75
  %187 = fadd float %78, %181, !dbg !75
  %188 = fadd float %79, %183, !dbg !75
  %189 = fadd float %80, %185, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %71, %152
  %190 = phi float [ %186, %152 ], [ 0.000000e+00, %71 ], !dbg !68
  %191 = phi float [ %187, %152 ], [ 0.000000e+00, %71 ], !dbg !68
  %192 = phi float [ %188, %152 ], [ 0.000000e+00, %71 ], !dbg !68
  %193 = phi float [ %189, %152 ], [ 0.000000e+00, %71 ], !dbg !68
  %194 = phi float [ %161, %152 ], [ 1.000000e+00, %71 ], !dbg !68
  %195 = phi float [ %162, %152 ], [ 1.000000e+00, %71 ], !dbg !68
  %196 = phi float [ %163, %152 ], [ 1.000000e+00, %71 ], !dbg !68
  %197 = phi float [ %164, %152 ], [ 1.000000e+00, %71 ], !dbg !68
  %198 = phi <4 x float> [ %173, %152 ], [ %151, %71 ]
  %199 = insertelement <4 x i1> poison, i1 %90, i64 0, !dbg !76
  %200 = shufflevector <4 x i1> %199, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !76
  %201 = select <4 x i1> %200, <4 x float> %198, <4 x float> %81, !dbg !76
  %202 = select i1 %90, float %190, float %77, !dbg !77
  %203 = select i1 %90, float %191, float %78, !dbg !77
  %204 = select i1 %90, float %192, float %79, !dbg !77
  %205 = select i1 %90, float %193, float %80, !dbg !77
  %206 = select i1 %90, float %194, float %73, !dbg !78
  %207 = select i1 %90, float %195, float %74, !dbg !78
  %208 = select i1 %90, float %196, float %75, !dbg !78
  %209 = select i1 %90, float %197, float %76, !dbg !78
  %210 = getelementptr bfloat, ptr addrspace(1) %8, i64 %88, !dbg !79
  %211 = extractelement <4 x float> %151, i64 0, !dbg !80
  %212 = fptrunc float %211 to bfloat, !dbg !80
  %213 = extractelement <4 x float> %151, i64 1, !dbg !80
  %214 = fptrunc float %213 to bfloat, !dbg !80
  %215 = extractelement <4 x float> %151, i64 2, !dbg !80
  %216 = fptrunc float %215 to bfloat, !dbg !80
  %217 = extractelement <4 x float> %151, i64 3, !dbg !80
  %218 = fptrunc float %217 to bfloat, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %219 = bitcast bfloat %212 to i16, !dbg !80
  %220 = bitcast bfloat %214 to i16, !dbg !80
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %62, i16 %219, i16 %220, i1 true) #5, !dbg !80
  %221 = bitcast bfloat %216 to i16, !dbg !80
  %222 = bitcast bfloat %218 to i16, !dbg !80
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %64, i16 %221, i16 %222, i1 true) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %.uncasted.extract43 = load i32, ptr addrspace(3) %61, align 8, !dbg !80
  %.uncasted.extract45 = load i32, ptr addrspace(3) %70, align 4, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract43, i32 %.uncasted.extract45, ptr addrspace(1) %210, i1 %91) #5, !dbg !80
  br i1 %72, label %71, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %223 = lshr i32 %19, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %224 = extractelement <4 x float> %201, i64 0, !dbg !83
  %225 = extractelement <4 x float> %201, i64 1, !dbg !83
  %226 = fsub float %225, %224, !dbg !83
  %227 = fadd float %206, %207, !dbg !85
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !86
  %229 = tail call float @llvm.nvvm.div.full(float %207, float %227), !dbg !87
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !88
  %231 = fmul float %226, %230, !dbg !89
  %232 = fadd float %224, %231, !dbg !90
  %233 = fadd float %202, %203, !dbg !91
  %234 = fmul float %226, %226, !dbg !92
  %235 = fmul float %234, %206, !dbg !93
  %236 = fmul float %235, %230, !dbg !94
  %237 = fadd float %233, %236, !dbg !95
  %238 = extractelement <4 x float> %201, i64 2, !dbg !83
  %239 = extractelement <4 x float> %201, i64 3, !dbg !83
  %240 = fsub float %239, %238, !dbg !83
  %241 = fadd float %208, %209, !dbg !85
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !86
  %243 = tail call float @llvm.nvvm.div.full(float %209, float %241), !dbg !87
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !88
  %245 = fmul float %240, %244, !dbg !89
  %246 = fadd float %238, %245, !dbg !90
  %247 = fadd float %204, %205, !dbg !91
  %248 = fmul float %240, %240, !dbg !92
  %249 = fmul float %248, %208, !dbg !93
  %250 = fmul float %249, %244, !dbg !94
  %251 = fadd float %247, %250, !dbg !95
  %252 = bitcast float %232 to i32, !dbg !81
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 16, i32 31), !dbg !81
  %254 = bitcast i32 %253 to float, !dbg !81
  %255 = bitcast float %237 to i32, !dbg !81
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 16, i32 31), !dbg !81
  %257 = bitcast i32 %256 to float, !dbg !81
  %258 = bitcast float %227 to i32, !dbg !81
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 16, i32 31), !dbg !81
  %260 = bitcast i32 %259 to float, !dbg !81
  %261 = fsub float %254, %232, !dbg !83
  %262 = fadd float %227, %260, !dbg !85
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !86
  %264 = tail call float @llvm.nvvm.div.full(float %260, float %262), !dbg !87
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !88
  %266 = fmul float %261, %265, !dbg !89
  %267 = fadd float %232, %266, !dbg !90
  %268 = fadd float %237, %257, !dbg !91
  %269 = fmul float %261, %261, !dbg !92
  %270 = fmul float %227, %269, !dbg !93
  %271 = fmul float %270, %265, !dbg !94
  %272 = fadd float %268, %271, !dbg !95
  %273 = bitcast float %267 to i32, !dbg !81
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !81
  %275 = bitcast i32 %274 to float, !dbg !81
  %276 = bitcast float %272 to i32, !dbg !81
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 8, i32 31), !dbg !81
  %278 = bitcast i32 %277 to float, !dbg !81
  %279 = bitcast float %262 to i32, !dbg !81
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 8, i32 31), !dbg !81
  %281 = bitcast i32 %280 to float, !dbg !81
  %282 = fsub float %275, %267, !dbg !83
  %283 = fadd float %262, %281, !dbg !85
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !86
  %285 = tail call float @llvm.nvvm.div.full(float %281, float %283), !dbg !87
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !88
  %287 = fmul float %282, %286, !dbg !89
  %288 = fadd float %267, %287, !dbg !90
  %289 = fadd float %272, %278, !dbg !91
  %290 = fmul float %282, %282, !dbg !92
  %291 = fmul float %262, %290, !dbg !93
  %292 = fmul float %286, %291, !dbg !94
  %293 = fadd float %289, %292, !dbg !95
  %294 = bitcast float %288 to i32, !dbg !81
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !81
  %296 = bitcast i32 %295 to float, !dbg !81
  %297 = bitcast float %293 to i32, !dbg !81
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 4, i32 31), !dbg !81
  %299 = bitcast i32 %298 to float, !dbg !81
  %300 = bitcast float %283 to i32, !dbg !81
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 4, i32 31), !dbg !81
  %302 = bitcast i32 %301 to float, !dbg !81
  %303 = fsub float %296, %288, !dbg !83
  %304 = fadd float %283, %302, !dbg !85
  %305 = fcmp oeq float %304, 0.000000e+00, !dbg !86
  %306 = tail call float @llvm.nvvm.div.full(float %302, float %304), !dbg !87
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !88
  %308 = fmul float %303, %307, !dbg !89
  %309 = fadd float %288, %308, !dbg !90
  %310 = fadd float %293, %299, !dbg !91
  %311 = fmul float %303, %303, !dbg !92
  %312 = fmul float %283, %311, !dbg !93
  %313 = fmul float %307, %312, !dbg !94
  %314 = fadd float %310, %313, !dbg !95
  %315 = bitcast float %309 to i32, !dbg !81
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !81
  %317 = bitcast i32 %316 to float, !dbg !81
  %318 = bitcast float %314 to i32, !dbg !81
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !81
  %320 = bitcast i32 %319 to float, !dbg !81
  %321 = bitcast float %304 to i32, !dbg !81
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 2, i32 31), !dbg !81
  %323 = bitcast i32 %322 to float, !dbg !81
  %324 = fsub float %317, %309, !dbg !83
  %325 = fadd float %304, %323, !dbg !85
  %326 = fcmp oeq float %325, 0.000000e+00, !dbg !86
  %327 = tail call float @llvm.nvvm.div.full(float %323, float %325), !dbg !87
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !88
  %329 = fmul float %324, %328, !dbg !89
  %330 = fadd float %309, %329, !dbg !90
  %331 = fadd float %314, %320, !dbg !91
  %332 = fmul float %324, %324, !dbg !92
  %333 = fmul float %304, %332, !dbg !93
  %334 = fmul float %328, %333, !dbg !94
  %335 = fadd float %331, %334, !dbg !95
  %336 = bitcast float %330 to i32, !dbg !81
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !81
  %338 = bitcast i32 %337 to float, !dbg !81
  %339 = bitcast float %335 to i32, !dbg !81
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !81
  %341 = bitcast i32 %340 to float, !dbg !81
  %342 = bitcast float %325 to i32, !dbg !81
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !81
  %344 = bitcast i32 %343 to float, !dbg !81
  %345 = fsub float %338, %330, !dbg !83
  %346 = fadd float %325, %344, !dbg !85
  %347 = fcmp oeq float %346, 0.000000e+00, !dbg !86
  %348 = tail call float @llvm.nvvm.div.full(float %344, float %346), !dbg !87
  %349 = select i1 %347, float 0.000000e+00, float %348, !dbg !88
  %350 = fmul float %345, %349, !dbg !89
  %351 = fadd float %330, %350, !dbg !90
  %352 = fadd float %335, %341, !dbg !91
  %353 = fmul float %345, %345, !dbg !92
  %354 = fmul float %325, %353, !dbg !93
  %355 = fmul float %349, %354, !dbg !94
  %356 = fadd float %352, %355, !dbg !95
  %357 = bitcast float %246 to i32, !dbg !81
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 16, i32 31), !dbg !81
  %359 = bitcast i32 %358 to float, !dbg !81
  %360 = bitcast float %251 to i32, !dbg !81
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 16, i32 31), !dbg !81
  %362 = bitcast i32 %361 to float, !dbg !81
  %363 = bitcast float %241 to i32, !dbg !81
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 16, i32 31), !dbg !81
  %365 = bitcast i32 %364 to float, !dbg !81
  %366 = fsub float %359, %246, !dbg !83
  %367 = fadd float %241, %365, !dbg !85
  %368 = fcmp oeq float %367, 0.000000e+00, !dbg !86
  %369 = tail call float @llvm.nvvm.div.full(float %365, float %367), !dbg !87
  %370 = select i1 %368, float 0.000000e+00, float %369, !dbg !88
  %371 = fmul float %366, %370, !dbg !89
  %372 = fadd float %246, %371, !dbg !90
  %373 = fadd float %251, %362, !dbg !91
  %374 = fmul float %366, %366, !dbg !92
  %375 = fmul float %241, %374, !dbg !93
  %376 = fmul float %375, %370, !dbg !94
  %377 = fadd float %373, %376, !dbg !95
  %378 = bitcast float %372 to i32, !dbg !81
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 8, i32 31), !dbg !81
  %380 = bitcast i32 %379 to float, !dbg !81
  %381 = bitcast float %377 to i32, !dbg !81
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 8, i32 31), !dbg !81
  %383 = bitcast i32 %382 to float, !dbg !81
  %384 = bitcast float %367 to i32, !dbg !81
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 8, i32 31), !dbg !81
  %386 = bitcast i32 %385 to float, !dbg !81
  %387 = fsub float %380, %372, !dbg !83
  %388 = fadd float %367, %386, !dbg !85
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !86
  %390 = tail call float @llvm.nvvm.div.full(float %386, float %388), !dbg !87
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !88
  %392 = fmul float %387, %391, !dbg !89
  %393 = fadd float %372, %392, !dbg !90
  %394 = fadd float %377, %383, !dbg !91
  %395 = fmul float %387, %387, !dbg !92
  %396 = fmul float %367, %395, !dbg !93
  %397 = fmul float %391, %396, !dbg !94
  %398 = fadd float %394, %397, !dbg !95
  %399 = bitcast float %393 to i32, !dbg !81
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !81
  %401 = bitcast i32 %400 to float, !dbg !81
  %402 = bitcast float %398 to i32, !dbg !81
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 4, i32 31), !dbg !81
  %404 = bitcast i32 %403 to float, !dbg !81
  %405 = bitcast float %388 to i32, !dbg !81
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 4, i32 31), !dbg !81
  %407 = bitcast i32 %406 to float, !dbg !81
  %408 = fsub float %401, %393, !dbg !83
  %409 = fadd float %388, %407, !dbg !85
  %410 = fcmp oeq float %409, 0.000000e+00, !dbg !86
  %411 = tail call float @llvm.nvvm.div.full(float %407, float %409), !dbg !87
  %412 = select i1 %410, float 0.000000e+00, float %411, !dbg !88
  %413 = fmul float %408, %412, !dbg !89
  %414 = fadd float %393, %413, !dbg !90
  %415 = fadd float %398, %404, !dbg !91
  %416 = fmul float %408, %408, !dbg !92
  %417 = fmul float %388, %416, !dbg !93
  %418 = fmul float %412, %417, !dbg !94
  %419 = fadd float %415, %418, !dbg !95
  %420 = bitcast float %414 to i32, !dbg !81
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !81
  %422 = bitcast i32 %421 to float, !dbg !81
  %423 = bitcast float %419 to i32, !dbg !81
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 2, i32 31), !dbg !81
  %425 = bitcast i32 %424 to float, !dbg !81
  %426 = bitcast float %409 to i32, !dbg !81
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 2, i32 31), !dbg !81
  %428 = bitcast i32 %427 to float, !dbg !81
  %429 = fsub float %422, %414, !dbg !83
  %430 = fadd float %409, %428, !dbg !85
  %431 = fcmp oeq float %430, 0.000000e+00, !dbg !86
  %432 = tail call float @llvm.nvvm.div.full(float %428, float %430), !dbg !87
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !88
  %434 = fmul float %429, %433, !dbg !89
  %435 = fadd float %414, %434, !dbg !90
  %436 = fadd float %419, %425, !dbg !91
  %437 = fmul float %429, %429, !dbg !92
  %438 = fmul float %409, %437, !dbg !93
  %439 = fmul float %433, %438, !dbg !94
  %440 = fadd float %436, %439, !dbg !95
  %441 = bitcast float %435 to i32, !dbg !81
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !81
  %443 = bitcast i32 %442 to float, !dbg !81
  %444 = bitcast float %440 to i32, !dbg !81
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !81
  %446 = bitcast i32 %445 to float, !dbg !81
  %447 = bitcast float %430 to i32, !dbg !81
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 1, i32 31), !dbg !81
  %449 = bitcast i32 %448 to float, !dbg !81
  %450 = fsub float %443, %435, !dbg !83
  %451 = fadd float %430, %449, !dbg !85
  %452 = fcmp oeq float %451, 0.000000e+00, !dbg !86
  %453 = tail call float @llvm.nvvm.div.full(float %449, float %451), !dbg !87
  %454 = select i1 %452, float 0.000000e+00, float %453, !dbg !88
  %455 = fmul float %450, %454, !dbg !89
  %456 = fadd float %435, %455, !dbg !90
  %457 = fadd float %440, %446, !dbg !91
  %458 = fmul float %450, %450, !dbg !92
  %459 = fmul float %430, %458, !dbg !93
  %460 = fmul float %454, %459, !dbg !94
  %461 = fadd float %457, %460, !dbg !95
  %462 = and i32 %223, 31, !dbg !81
  %463 = icmp eq i32 %21, 0, !dbg !81
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %462, !dbg !81
  %465 = bitcast float %351 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 %463) #5, !dbg !81
  %466 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %462, !dbg !81
  %467 = bitcast float %356 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 %463) #5, !dbg !81
  %468 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %462, !dbg !81
  %469 = bitcast float %346 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 %463) #5, !dbg !81
  %470 = or disjoint i32 %462, 32, !dbg !81
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !81
  %472 = bitcast float %456 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 %463) #5, !dbg !81
  %473 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %470, !dbg !81
  %474 = bitcast float %461 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 %463) #5, !dbg !81
  %475 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %470, !dbg !81
  %476 = bitcast float %451 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 %463) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %477 = icmp slt i32 %19, 64, !dbg !81
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !81
  %479 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %478, i1 %477) #5, !dbg !81
  %480 = bitcast i32 %479 to float, !dbg !81
  %481 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !81
  %482 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %481, i1 %477) #5, !dbg !81
  %483 = bitcast i32 %482 to float, !dbg !81
  %484 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %19, !dbg !81
  %485 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %484, i1 %477) #5, !dbg !81
  %486 = bitcast i32 %485 to float, !dbg !81
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 16, i32 31), !dbg !81
  %488 = bitcast i32 %487 to float, !dbg !81
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 16, i32 31), !dbg !81
  %490 = bitcast i32 %489 to float, !dbg !81
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 16, i32 31), !dbg !81
  %492 = bitcast i32 %491 to float, !dbg !81
  %493 = fsub float %488, %480, !dbg !83
  %494 = fadd float %486, %492, !dbg !85
  %495 = fcmp oeq float %494, 0.000000e+00, !dbg !86
  %496 = tail call float @llvm.nvvm.div.full(float %492, float %494), !dbg !87
  %497 = select i1 %495, float 0.000000e+00, float %496, !dbg !88
  %498 = fmul float %493, %497, !dbg !89
  %499 = fadd float %498, %480, !dbg !90
  %500 = fadd float %483, %490, !dbg !91
  %501 = fmul float %493, %493, !dbg !92
  %502 = fmul float %501, %486, !dbg !93
  %503 = fmul float %502, %497, !dbg !94
  %504 = fadd float %500, %503, !dbg !95
  %505 = bitcast float %499 to i32, !dbg !81
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 8, i32 31), !dbg !81
  %507 = bitcast i32 %506 to float, !dbg !81
  %508 = bitcast float %504 to i32, !dbg !81
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 8, i32 31), !dbg !81
  %510 = bitcast i32 %509 to float, !dbg !81
  %511 = bitcast float %494 to i32, !dbg !81
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 8, i32 31), !dbg !81
  %513 = bitcast i32 %512 to float, !dbg !81
  %514 = fsub float %507, %499, !dbg !83
  %515 = fadd float %494, %513, !dbg !85
  %516 = fcmp oeq float %515, 0.000000e+00, !dbg !86
  %517 = tail call float @llvm.nvvm.div.full(float %513, float %515), !dbg !87
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !88
  %519 = fmul float %514, %518, !dbg !89
  %520 = fadd float %499, %519, !dbg !90
  %521 = fadd float %504, %510, !dbg !91
  %522 = fmul float %514, %514, !dbg !92
  %523 = fmul float %494, %522, !dbg !93
  %524 = fmul float %518, %523, !dbg !94
  %525 = fadd float %521, %524, !dbg !95
  %526 = bitcast float %520 to i32, !dbg !81
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 4, i32 31), !dbg !81
  %528 = bitcast i32 %527 to float, !dbg !81
  %529 = bitcast float %525 to i32, !dbg !81
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 4, i32 31), !dbg !81
  %531 = bitcast i32 %530 to float, !dbg !81
  %532 = bitcast float %515 to i32, !dbg !81
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 4, i32 31), !dbg !81
  %534 = bitcast i32 %533 to float, !dbg !81
  %535 = fsub float %528, %520, !dbg !83
  %536 = fadd float %515, %534, !dbg !85
  %537 = fcmp oeq float %536, 0.000000e+00, !dbg !86
  %538 = tail call float @llvm.nvvm.div.full(float %534, float %536), !dbg !87
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !88
  %540 = fmul float %535, %539, !dbg !89
  %541 = fadd float %520, %540, !dbg !90
  %542 = fadd float %525, %531, !dbg !91
  %543 = fmul float %535, %535, !dbg !92
  %544 = fmul float %515, %543, !dbg !93
  %545 = fmul float %539, %544, !dbg !94
  %546 = fadd float %542, %545, !dbg !95
  %547 = bitcast float %541 to i32, !dbg !81
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 2, i32 31), !dbg !81
  %549 = bitcast i32 %548 to float, !dbg !81
  %550 = bitcast float %546 to i32, !dbg !81
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 2, i32 31), !dbg !81
  %552 = bitcast i32 %551 to float, !dbg !81
  %553 = bitcast float %536 to i32, !dbg !81
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 2, i32 31), !dbg !81
  %555 = bitcast i32 %554 to float, !dbg !81
  %556 = fsub float %549, %541, !dbg !83
  %557 = fadd float %536, %555, !dbg !85
  %558 = fcmp oeq float %557, 0.000000e+00, !dbg !86
  %559 = tail call float @llvm.nvvm.div.full(float %555, float %557), !dbg !87
  %560 = select i1 %558, float 0.000000e+00, float %559, !dbg !88
  %561 = fmul float %556, %560, !dbg !89
  %562 = fadd float %541, %561, !dbg !90
  %563 = fadd float %546, %552, !dbg !91
  %564 = fmul float %556, %556, !dbg !92
  %565 = fmul float %536, %564, !dbg !93
  %566 = fmul float %560, %565, !dbg !94
  %567 = fadd float %563, %566, !dbg !95
  %568 = bitcast float %562 to i32, !dbg !81
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 1, i32 31), !dbg !81
  %570 = bitcast i32 %569 to float, !dbg !81
  %571 = bitcast float %567 to i32, !dbg !81
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 1, i32 31), !dbg !81
  %573 = bitcast i32 %572 to float, !dbg !81
  %574 = bitcast float %557 to i32, !dbg !81
  %575 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %574, i32 1, i32 31), !dbg !81
  %576 = bitcast i32 %575 to float, !dbg !81
  %577 = fsub float %570, %562, !dbg !83
  %578 = fadd float %557, %576, !dbg !85
  %579 = fcmp oeq float %578, 0.000000e+00, !dbg !86
  %580 = tail call float @llvm.nvvm.div.full(float %576, float %578), !dbg !87
  %581 = select i1 %579, float 0.000000e+00, float %580, !dbg !88
  %582 = fmul float %577, %581, !dbg !89
  %583 = fadd float %562, %582, !dbg !90
  %584 = fadd float %567, %573, !dbg !91
  %585 = fmul float %577, %577, !dbg !92
  %586 = fmul float %557, %585, !dbg !93
  %587 = fmul float %581, %586, !dbg !94
  %588 = fadd float %584, %587, !dbg !95
  %589 = and i1 %477, %463, !dbg !81
  %590 = bitcast float %583 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %590, i1 %589) #5, !dbg !81
  %591 = bitcast float %588 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %591, i1 %589) #5, !dbg !81
  %592 = bitcast float %578 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %592, i1 %589) #5, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %593 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  %594 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !81
  %595 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !81
  %596 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !81
  %597 = tail call float @llvm.nvvm.div.full(float %595, float 3.072000e+03), !dbg !96
  %598 = tail call float @llvm.nvvm.div.full(float %596, float 3.072000e+03), !dbg !96
  %599 = fadd float %597, 0x3EB0C6F7A0000000, !dbg !97
  %600 = fadd float %598, 0x3EB0C6F7A0000000, !dbg !97
  %601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %602 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i46 = icmp eq i32 %602, 0, !dbg !98
  br i1 %.not.i46, label %605, label %603, !dbg !98

603:                                              ; preds = %__nv_rsqrtf.exit
  %604 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %599), !dbg !98
  br label %__nv_rsqrtf.exit48, !dbg !98

605:                                              ; preds = %__nv_rsqrtf.exit
  %606 = tail call float @llvm.nvvm.rsqrt.approx.f(float %599), !dbg !98
  br label %__nv_rsqrtf.exit48, !dbg !98

__nv_rsqrtf.exit48:                               ; preds = %603, %605
  %.0.i47 = phi float [ %604, %603 ], [ %606, %605 ], !dbg !98
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %608 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i52 = icmp eq i32 %608, 0, !dbg !98
  br i1 %.not.i52, label %611, label %609, !dbg !98

609:                                              ; preds = %__nv_rsqrtf.exit48
  %610 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %600), !dbg !98
  br label %__nv_rsqrtf.exit54, !dbg !98

611:                                              ; preds = %__nv_rsqrtf.exit48
  %612 = tail call float @llvm.nvvm.rsqrt.approx.f(float %600), !dbg !98
  br label %__nv_rsqrtf.exit54, !dbg !98

__nv_rsqrtf.exit54:                               ; preds = %611, %609
  %.0.i53 = phi float [ %610, %609 ], [ %612, %611 ], !dbg !98
  %613 = insertelement <2 x float> poison, float %593, i64 0, !dbg !99
  %614 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %615 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !100
  %616 = shufflevector <2 x float> %615, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %617 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %59
  %618 = getelementptr bfloat, ptr addrspace(3) %617, i32 %57
  %619 = getelementptr inbounds nuw i8, ptr addrspace(3) %618, i32 4
  %620 = getelementptr inbounds nuw i8, ptr addrspace(3) %62, i32 4106
  %621 = getelementptr inbounds nuw i8, ptr addrspace(3) %62, i32 4104
  %622 = add i32 %42, %28, !dbg !101
  %623 = sext i32 %622 to i64, !dbg !102
  %624 = getelementptr bfloat, ptr addrspace(1) %8, i64 %623, !dbg !102
  %625 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %624, i1 %23) #5, !dbg !103
  %626 = extractvalue { i32, i32 } %625, 0, !dbg !103
  %627 = extractvalue { i32, i32 } %625, 1, !dbg !103
  %extelt.offset = lshr i32 %626, 16, !dbg !103
  %628 = trunc nuw i32 %extelt.offset to i16, !dbg !103
  %extelt.offset9 = lshr i32 %627, 16, !dbg !103
  %629 = trunc nuw i32 %extelt.offset9 to i16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %630 = trunc i32 %626 to i16, !dbg !100
  %631 = trunc i32 %627 to i16, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %618, i16 %630, i16 %628, i16 %631, i16 %629, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %632 = load bfloat, ptr addrspace(3) %621, align 4, !dbg !100
  %633 = load bfloat, ptr addrspace(3) %620, align 2, !dbg !100
  %634 = fpext bfloat %632 to float, !dbg !104
  %635 = fpext bfloat %633 to float, !dbg !104
  %636 = or disjoint i64 %69, 12288, !dbg !105
  %637 = getelementptr float, ptr addrspace(1) %1, i64 %636, !dbg !106
  %638 = getelementptr bfloat, ptr addrspace(1) %2, i64 %636, !dbg !107
  %639 = add nuw nsw i64 %69, 9216, !dbg !108
  %640 = getelementptr float, ptr addrspace(1) %1, i64 %639, !dbg !109
  %641 = getelementptr bfloat, ptr addrspace(1) %2, i64 %639, !dbg !110
  %642 = fsub float %634, %594, !dbg !99
  %643 = fsub float %635, %594, !dbg !99
  %644 = fmul float %.0.i53, %642, !dbg !100
  %645 = fmul float %.0.i53, %643, !dbg !100
  %646 = load <2 x bfloat>, ptr addrspace(3) %62, align 4, !dbg !100
  %647 = fpext <2 x bfloat> %646 to <2 x float>, !dbg !104
  %648 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %637, i1 true) #5, !dbg !111
  %649 = extractvalue { i32, i32 } %648, 0, !dbg !111
  %650 = extractvalue { i32, i32 } %648, 1, !dbg !111
  %651 = insertelement <2 x i32> poison, i32 %649, i64 0, !dbg !111
  %652 = insertelement <2 x i32> %651, i32 %650, i64 1, !dbg !111
  %653 = bitcast <2 x i32> %652 to <2 x float>, !dbg !111
  %654 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %638, i1 true) #5, !dbg !112
  %655 = bitcast i32 %654 to <2 x bfloat>, !dbg !112
  %656 = fpext <2 x bfloat> %655 to <2 x float>, !dbg !113
  %657 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %640, i1 true) #5, !dbg !114
  %658 = extractvalue { i32, i32 } %657, 0, !dbg !114
  %659 = extractvalue { i32, i32 } %657, 1, !dbg !114
  %660 = insertelement <2 x i32> poison, i32 %658, i64 0, !dbg !114
  %661 = insertelement <2 x i32> %660, i32 %659, i64 1, !dbg !114
  %662 = bitcast <2 x i32> %661 to <2 x float>, !dbg !114
  %663 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %641, i1 true) #5, !dbg !115
  %664 = bitcast i32 %663 to <2 x bfloat>, !dbg !115
  %665 = fpext <2 x bfloat> %664 to <2 x float>, !dbg !116
  %666 = fsub <2 x float> %647, %614, !dbg !99
  %667 = fmul <2 x float> %616, %666, !dbg !100
  %668 = fadd <2 x float> %653, %656, !dbg !117
  %669 = fadd <2 x float> %668, splat (float 1.000000e+00), !dbg !118
  %670 = fmul <2 x float> %667, %669, !dbg !119
  %671 = extractelement <2 x float> %669, i64 0, !dbg !119
  %672 = fmul float %644, %671, !dbg !119
  %673 = extractelement <2 x float> %669, i64 1, !dbg !119
  %674 = fmul float %645, %673, !dbg !119
  %675 = fadd <2 x float> %662, %665, !dbg !120
  %676 = fadd <2 x float> %670, %675, !dbg !121
  %677 = extractelement <2 x float> %675, i64 0, !dbg !121
  %678 = fadd float %672, %677, !dbg !121
  %679 = extractelement <2 x float> %675, i64 1, !dbg !121
  %680 = fadd float %674, %679, !dbg !121
  %681 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !122
  %682 = shufflevector <2 x i1> %681, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !122
  %683 = select <2 x i1> %682, <2 x float> %676, <2 x float> splat (float 0x7FF0000000000000), !dbg !122
  %684 = select i1 %24, float %678, float 0x7FF0000000000000, !dbg !122
  %685 = select i1 %24, float %680, float 0x7FF0000000000000, !dbg !122
  %686 = extractelement <2 x float> %676, i64 0, !dbg !123
  %687 = extractelement <2 x float> %676, i64 1, !dbg !123
  %688 = shufflevector <2 x float> %676, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !124
  %689 = insertelement <4 x float> %688, float %678, i64 2, !dbg !124
  %690 = insertelement <4 x float> %689, float %680, i64 3, !dbg !124
  %691 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !126
  %692 = shufflevector <4 x i1> %691, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !126
  %693 = select <4 x i1> %692, <4 x float> %690, <4 x float> splat (float 0xFFF0000000000000), !dbg !126
  %694 = getelementptr bfloat, ptr addrspace(1) %9, i64 %623, !dbg !127
  %695 = fptrunc float %686 to bfloat, !dbg !123
  %696 = fptrunc float %687 to bfloat, !dbg !123
  %697 = fptrunc float %678 to bfloat, !dbg !123
  %698 = fptrunc float %680 to bfloat, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %699 = bitcast bfloat %695 to i16, !dbg !123
  %700 = bitcast bfloat %696 to i16, !dbg !123
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %62, i16 %699, i16 %700, i1 true) #5, !dbg !123
  %701 = bitcast bfloat %697 to i16, !dbg !123
  %702 = bitcast bfloat %698 to i16, !dbg !123
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %621, i16 %701, i16 %702, i1 true) #5, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %.uncasted.extract = load i32, ptr addrspace(3) %618, align 8, !dbg !123
  %.uncasted.extract18 = load i32, ptr addrspace(3) %619, align 4, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract18, ptr addrspace(1) %694, i1 %23) #5, !dbg !123
  %703 = or disjoint i64 %69, 2048, !dbg !128
  %704 = or disjoint i64 %68, 2048, !dbg !128
  %705 = icmp samesign ult i64 %703, 3072, !dbg !129
  %706 = icmp samesign ult i64 %704, 3072, !dbg !129
  %707 = trunc nuw nsw i64 %704 to i32, !dbg !101
  %708 = add i32 %42, %707, !dbg !101
  %709 = sext i32 %708 to i64, !dbg !102
  %710 = getelementptr bfloat, ptr addrspace(1) %8, i64 %709, !dbg !102
  %711 = and i1 %24, %705, !dbg !130
  %712 = and i1 %23, %706, !dbg !130
  %713 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %710, i1 %712) #5, !dbg !103
  %714 = extractvalue { i32, i32 } %713, 0, !dbg !103
  %715 = extractvalue { i32, i32 } %713, 1, !dbg !103
  %extelt.offset.1 = lshr i32 %714, 16, !dbg !103
  %716 = trunc nuw i32 %extelt.offset.1 to i16, !dbg !103
  %extelt.offset9.1 = lshr i32 %715, 16, !dbg !103
  %717 = trunc nuw i32 %extelt.offset9.1 to i16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %718 = trunc i32 %714 to i16, !dbg !100
  %719 = trunc i32 %715 to i16, !dbg !100
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %618, i16 %718, i16 %716, i16 %719, i16 %717, i1 true) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %720 = load bfloat, ptr addrspace(3) %621, align 4, !dbg !100
  %721 = load bfloat, ptr addrspace(3) %620, align 2, !dbg !100
  %722 = fpext bfloat %720 to float, !dbg !104
  %723 = fpext bfloat %721 to float, !dbg !104
  %724 = or disjoint i64 %69, 14336, !dbg !105
  %725 = getelementptr float, ptr addrspace(1) %1, i64 %724, !dbg !106
  %726 = getelementptr bfloat, ptr addrspace(1) %2, i64 %724, !dbg !107
  %727 = add nuw nsw i64 %69, 11264, !dbg !108
  %728 = getelementptr float, ptr addrspace(1) %1, i64 %727, !dbg !109
  %729 = getelementptr bfloat, ptr addrspace(1) %2, i64 %727, !dbg !110
  %730 = fsub float %722, %594, !dbg !99
  %731 = fsub float %723, %594, !dbg !99
  %732 = fmul float %.0.i53, %730, !dbg !100
  %733 = fmul float %.0.i53, %731, !dbg !100
  %734 = fcmp uno <2 x float> %683, zeroinitializer, !dbg !131
  %735 = fcmp uno float %684, 0.000000e+00, !dbg !131
  %736 = fcmp uno float %685, 0.000000e+00, !dbg !131
  %737 = load <2 x bfloat>, ptr addrspace(3) %62, align 4, !dbg !100
  %738 = fpext <2 x bfloat> %737 to <2 x float>, !dbg !104
  %739 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %725, i1 %705) #5, !dbg !111
  %740 = extractvalue { i32, i32 } %739, 0, !dbg !111
  %741 = extractvalue { i32, i32 } %739, 1, !dbg !111
  %742 = insertelement <2 x i32> poison, i32 %740, i64 0, !dbg !111
  %743 = insertelement <2 x i32> %742, i32 %741, i64 1, !dbg !111
  %744 = bitcast <2 x i32> %743 to <2 x float>, !dbg !111
  %745 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %726, i1 %705) #5, !dbg !112
  %746 = bitcast i32 %745 to <2 x bfloat>, !dbg !112
  %747 = fpext <2 x bfloat> %746 to <2 x float>, !dbg !113
  %748 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %728, i1 %705) #5, !dbg !114
  %749 = extractvalue { i32, i32 } %748, 0, !dbg !114
  %750 = extractvalue { i32, i32 } %748, 1, !dbg !114
  %751 = insertelement <2 x i32> poison, i32 %749, i64 0, !dbg !114
  %752 = insertelement <2 x i32> %751, i32 %750, i64 1, !dbg !114
  %753 = bitcast <2 x i32> %752 to <2 x float>, !dbg !114
  %754 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %729, i1 %705) #5, !dbg !115
  %755 = bitcast i32 %754 to <2 x bfloat>, !dbg !115
  %756 = fpext <2 x bfloat> %755 to <2 x float>, !dbg !116
  %757 = fsub <2 x float> %738, %614, !dbg !99
  %758 = fmul <2 x float> %616, %757, !dbg !100
  %759 = fadd <2 x float> %744, %747, !dbg !117
  %760 = fadd <2 x float> %759, splat (float 1.000000e+00), !dbg !118
  %761 = fmul <2 x float> %758, %760, !dbg !119
  %762 = extractelement <2 x float> %760, i64 0, !dbg !119
  %763 = fmul float %732, %762, !dbg !119
  %764 = extractelement <2 x float> %760, i64 1, !dbg !119
  %765 = fmul float %733, %764, !dbg !119
  %766 = fadd <2 x float> %753, %756, !dbg !120
  %767 = fadd <2 x float> %761, %766, !dbg !121
  %768 = extractelement <2 x float> %766, i64 0, !dbg !121
  %769 = fadd float %763, %768, !dbg !121
  %770 = extractelement <2 x float> %766, i64 1, !dbg !121
  %771 = fadd float %765, %770, !dbg !121
  %772 = fcmp olt <2 x float> %683, %767, !dbg !133
  %773 = fcmp olt float %684, %769, !dbg !133
  %774 = fcmp olt float %685, %771, !dbg !133
  %775 = or <2 x i1> %734, %772, !dbg !134
  %776 = or i1 %735, %773, !dbg !134
  %777 = or i1 %736, %774, !dbg !134
  %778 = select <2 x i1> %775, <2 x float> %683, <2 x float> %767, !dbg !135
  %779 = select i1 %776, float %684, float %769, !dbg !135
  %780 = select i1 %777, float %685, float %771, !dbg !135
  %781 = insertelement <2 x i1> poison, i1 %711, i64 0, !dbg !122
  %782 = shufflevector <2 x i1> %781, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !122
  %783 = select <2 x i1> %782, <2 x float> %778, <2 x float> %683, !dbg !122
  %784 = select i1 %711, float %779, float %684, !dbg !122
  %785 = select i1 %711, float %780, float %685, !dbg !122
  %786 = extractelement <2 x float> %767, i64 0, !dbg !123
  %787 = extractelement <2 x float> %767, i64 1, !dbg !123
  %788 = fcmp uno <4 x float> %693, zeroinitializer, !dbg !136
  %789 = shufflevector <2 x float> %767, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !124
  %790 = insertelement <4 x float> %789, float %769, i64 2, !dbg !124
  %791 = insertelement <4 x float> %790, float %771, i64 3, !dbg !124
  %792 = fcmp ogt <4 x float> %693, %791, !dbg !124
  %793 = or <4 x i1> %788, %792, !dbg !137
  %794 = select <4 x i1> %793, <4 x float> %693, <4 x float> %791, !dbg !138
  %795 = insertelement <4 x i1> poison, i1 %711, i64 0, !dbg !126
  %796 = shufflevector <4 x i1> %795, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !126
  %797 = select <4 x i1> %796, <4 x float> %794, <4 x float> %693, !dbg !126
  %798 = getelementptr bfloat, ptr addrspace(1) %9, i64 %709, !dbg !127
  %799 = fptrunc float %786 to bfloat, !dbg !123
  %800 = fptrunc float %787 to bfloat, !dbg !123
  %801 = fptrunc float %769 to bfloat, !dbg !123
  %802 = fptrunc float %771 to bfloat, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %803 = bitcast bfloat %799 to i16, !dbg !123
  %804 = bitcast bfloat %800 to i16, !dbg !123
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %62, i16 %803, i16 %804, i1 true) #5, !dbg !123
  %805 = bitcast bfloat %801 to i16, !dbg !123
  %806 = bitcast bfloat %802 to i16, !dbg !123
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %621, i16 %805, i16 %806, i1 true) #5, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %.uncasted.extract.1 = load i32, ptr addrspace(3) %618, align 8, !dbg !123
  %.uncasted.extract18.1 = load i32, ptr addrspace(3) %619, align 4, !dbg !123
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract.1, i32 %.uncasted.extract18.1, ptr addrspace(1) %798, i1 %712) #5, !dbg !123
  %807 = and i32 %19, 1, !dbg !11
  %808 = or disjoint i32 %18, %807, !dbg !12
  %809 = icmp slt i32 %808, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %810 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %783, <2 x i32> <i32 0, i32 2>, !dbg !141
  %811 = fcmp olt <2 x float> %810, %783, !dbg !141
  %812 = fcmp uno <2 x float> %810, %783, !dbg !141
  %shift = shufflevector <2 x i1> %811, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !142
  %813 = or <2 x i1> %shift, %812, !dbg !142
  %814 = extractelement <2 x i1> %813, i64 0, !dbg !142
  %815 = extractelement <2 x float> %783, i64 0, !dbg !143
  %816 = extractelement <2 x float> %783, i64 1, !dbg !143
  %817 = select i1 %814, float %815, float %816, !dbg !143
  %818 = fcmp olt float %784, %785, !dbg !141
  %819 = fcmp uno float %784, 0.000000e+00, !dbg !144
  %820 = or i1 %818, %819, !dbg !142
  %821 = select i1 %820, float %784, float %785, !dbg !143
  %822 = bitcast float %817 to i32, !dbg !139
  %823 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %822, i32 16, i32 31), !dbg !139
  %824 = bitcast i32 %823 to float, !dbg !139
  %825 = fcmp olt float %817, %824, !dbg !141
  %826 = fcmp uno float %817, 0.000000e+00, !dbg !144
  %827 = or i1 %826, %825, !dbg !142
  %828 = select i1 %827, float %817, float %824, !dbg !143
  %829 = bitcast float %828 to i32, !dbg !139
  %830 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %829, i32 8, i32 31), !dbg !139
  %831 = bitcast i32 %830 to float, !dbg !139
  %832 = fcmp olt float %828, %831, !dbg !141
  %833 = fcmp uno float %828, 0.000000e+00, !dbg !144
  %834 = or i1 %832, %833, !dbg !142
  %835 = select i1 %834, float %828, float %831, !dbg !143
  %836 = bitcast float %835 to i32, !dbg !139
  %837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %836, i32 4, i32 31), !dbg !139
  %838 = bitcast i32 %837 to float, !dbg !139
  %839 = fcmp olt float %835, %838, !dbg !141
  %840 = fcmp uno float %835, 0.000000e+00, !dbg !144
  %841 = or i1 %839, %840, !dbg !142
  %842 = select i1 %841, float %835, float %838, !dbg !143
  %843 = bitcast float %842 to i32, !dbg !139
  %844 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %843, i32 2, i32 31), !dbg !139
  %845 = bitcast i32 %844 to float, !dbg !139
  %846 = fcmp olt float %842, %845, !dbg !141
  %847 = fcmp uno float %842, 0.000000e+00, !dbg !144
  %848 = or i1 %846, %847, !dbg !142
  %849 = select i1 %848, float %842, float %845, !dbg !143
  %850 = bitcast float %849 to i32, !dbg !139
  %851 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %850, i32 1, i32 31), !dbg !139
  %852 = bitcast i32 %851 to float, !dbg !139
  %853 = fcmp olt float %849, %852, !dbg !141
  %854 = fcmp uno float %849, 0.000000e+00, !dbg !144
  %855 = or i1 %853, %854, !dbg !142
  %856 = bitcast float %821 to i32, !dbg !139
  %857 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %856, i32 16, i32 31), !dbg !139
  %858 = bitcast i32 %857 to float, !dbg !139
  %859 = fcmp olt float %821, %858, !dbg !141
  %860 = fcmp uno float %821, 0.000000e+00, !dbg !144
  %861 = or i1 %860, %859, !dbg !142
  %862 = select i1 %861, float %821, float %858, !dbg !143
  %863 = bitcast float %862 to i32, !dbg !139
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 8, i32 31), !dbg !139
  %865 = bitcast i32 %864 to float, !dbg !139
  %866 = fcmp olt float %862, %865, !dbg !141
  %867 = fcmp uno float %862, 0.000000e+00, !dbg !144
  %868 = or i1 %866, %867, !dbg !142
  %869 = select i1 %868, float %862, float %865, !dbg !143
  %870 = bitcast float %869 to i32, !dbg !139
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 4, i32 31), !dbg !139
  %872 = bitcast i32 %871 to float, !dbg !139
  %873 = fcmp olt float %869, %872, !dbg !141
  %874 = fcmp uno float %869, 0.000000e+00, !dbg !144
  %875 = or i1 %873, %874, !dbg !142
  %876 = select i1 %875, float %869, float %872, !dbg !143
  %877 = bitcast float %876 to i32, !dbg !139
  %878 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %877, i32 2, i32 31), !dbg !139
  %879 = bitcast i32 %878 to float, !dbg !139
  %880 = fcmp olt float %876, %879, !dbg !141
  %881 = fcmp uno float %876, 0.000000e+00, !dbg !144
  %882 = or i1 %880, %881, !dbg !142
  %883 = select i1 %882, float %876, float %879, !dbg !143
  %884 = bitcast float %883 to i32, !dbg !139
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 1, i32 31), !dbg !139
  %886 = bitcast i32 %885 to float, !dbg !139
  %887 = fcmp olt float %883, %886, !dbg !141
  %888 = fcmp uno float %883, 0.000000e+00, !dbg !144
  %889 = or i1 %887, %888, !dbg !142
  %890 = select i1 %855, i32 %850, i32 %851, !dbg !143
  %891 = insertelement <1 x i32> poison, i32 %890, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %891, i1 %463) #5, !dbg !139
  %892 = select i1 %889, i32 %884, i32 %885, !dbg !143
  %893 = insertelement <1 x i32> poison, i32 %892, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %893, i1 %463) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %894 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %478, i1 %477) #5, !dbg !139
  %895 = bitcast i32 %894 to float, !dbg !139
  %896 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 16, i32 31), !dbg !139
  %897 = bitcast i32 %896 to float, !dbg !139
  %898 = fcmp olt float %895, %897, !dbg !141
  %899 = fcmp uno float %895, 0.000000e+00, !dbg !144
  %900 = or i1 %899, %898, !dbg !142
  %901 = select i1 %900, float %895, float %897, !dbg !143
  %902 = bitcast float %901 to i32, !dbg !139
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 8, i32 31), !dbg !139
  %904 = bitcast i32 %903 to float, !dbg !139
  %905 = fcmp olt float %901, %904, !dbg !141
  %906 = fcmp uno float %901, 0.000000e+00, !dbg !144
  %907 = or i1 %905, %906, !dbg !142
  %908 = select i1 %907, float %901, float %904, !dbg !143
  %909 = bitcast float %908 to i32, !dbg !139
  %910 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %909, i32 4, i32 31), !dbg !139
  %911 = bitcast i32 %910 to float, !dbg !139
  %912 = fcmp olt float %908, %911, !dbg !141
  %913 = fcmp uno float %908, 0.000000e+00, !dbg !144
  %914 = or i1 %912, %913, !dbg !142
  %915 = select i1 %914, float %908, float %911, !dbg !143
  %916 = bitcast float %915 to i32, !dbg !139
  %917 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %916, i32 2, i32 31), !dbg !139
  %918 = bitcast i32 %917 to float, !dbg !139
  %919 = fcmp olt float %915, %918, !dbg !141
  %920 = fcmp uno float %915, 0.000000e+00, !dbg !144
  %921 = or i1 %919, %920, !dbg !142
  %922 = select i1 %921, float %915, float %918, !dbg !143
  %923 = bitcast float %922 to i32, !dbg !139
  %924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 1, i32 31), !dbg !139
  %925 = bitcast i32 %924 to float, !dbg !139
  %926 = fcmp olt float %922, %925, !dbg !141
  %927 = fcmp uno float %922, 0.000000e+00, !dbg !144
  %928 = or i1 %926, %927, !dbg !142
  %929 = select i1 %928, i32 %923, i32 %924, !dbg !143
  %930 = insertelement <1 x i32> poison, i32 %929, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %930, i1 %589) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %931 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !139
  %932 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %933 = bitcast float %931 to i32, !dbg !145
  %934 = bitcast float %932 to i32, !dbg !145
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %933, i32 %934, i1 true) #5, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %935 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %807, !dbg !145
  %936 = load float, ptr addrspace(3) %935, align 4, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %937 = extractelement <4 x float> %797, i64 0, !dbg !148
  %938 = extractelement <4 x float> %797, i64 1, !dbg !148
  %939 = fcmp ogt float %937, %938, !dbg !148
  %940 = fcmp uno float %937, 0.000000e+00, !dbg !149
  %941 = or i1 %939, %940, !dbg !150
  %942 = select i1 %941, float %937, float %938, !dbg !151
  %943 = extractelement <4 x float> %797, i64 2, !dbg !148
  %944 = extractelement <4 x float> %797, i64 3, !dbg !148
  %945 = fcmp ogt float %943, %944, !dbg !148
  %946 = fcmp uno float %943, 0.000000e+00, !dbg !149
  %947 = or i1 %945, %946, !dbg !150
  %948 = select i1 %947, float %943, float %944, !dbg !151
  %949 = bitcast float %942 to i32, !dbg !146
  %950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %949, i32 16, i32 31), !dbg !146
  %951 = bitcast i32 %950 to float, !dbg !146
  %952 = fcmp ogt float %942, %951, !dbg !148
  %953 = fcmp uno float %942, 0.000000e+00, !dbg !149
  %954 = or i1 %953, %952, !dbg !150
  %955 = select i1 %954, float %942, float %951, !dbg !151
  %956 = bitcast float %955 to i32, !dbg !146
  %957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %956, i32 8, i32 31), !dbg !146
  %958 = bitcast i32 %957 to float, !dbg !146
  %959 = fcmp ogt float %955, %958, !dbg !148
  %960 = fcmp uno float %955, 0.000000e+00, !dbg !149
  %961 = or i1 %959, %960, !dbg !150
  %962 = select i1 %961, float %955, float %958, !dbg !151
  %963 = bitcast float %962 to i32, !dbg !146
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 4, i32 31), !dbg !146
  %965 = bitcast i32 %964 to float, !dbg !146
  %966 = fcmp ogt float %962, %965, !dbg !148
  %967 = fcmp uno float %962, 0.000000e+00, !dbg !149
  %968 = or i1 %966, %967, !dbg !150
  %969 = select i1 %968, float %962, float %965, !dbg !151
  %970 = bitcast float %969 to i32, !dbg !146
  %971 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %970, i32 2, i32 31), !dbg !146
  %972 = bitcast i32 %971 to float, !dbg !146
  %973 = fcmp ogt float %969, %972, !dbg !148
  %974 = fcmp uno float %969, 0.000000e+00, !dbg !149
  %975 = or i1 %973, %974, !dbg !150
  %976 = select i1 %975, float %969, float %972, !dbg !151
  %977 = bitcast float %976 to i32, !dbg !146
  %978 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %977, i32 1, i32 31), !dbg !146
  %979 = bitcast i32 %978 to float, !dbg !146
  %980 = fcmp ogt float %976, %979, !dbg !148
  %981 = fcmp uno float %976, 0.000000e+00, !dbg !149
  %982 = or i1 %980, %981, !dbg !150
  %983 = bitcast float %948 to i32, !dbg !146
  %984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %983, i32 16, i32 31), !dbg !146
  %985 = bitcast i32 %984 to float, !dbg !146
  %986 = fcmp ogt float %948, %985, !dbg !148
  %987 = fcmp uno float %948, 0.000000e+00, !dbg !149
  %988 = or i1 %987, %986, !dbg !150
  %989 = select i1 %988, float %948, float %985, !dbg !151
  %990 = bitcast float %989 to i32, !dbg !146
  %991 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %990, i32 8, i32 31), !dbg !146
  %992 = bitcast i32 %991 to float, !dbg !146
  %993 = fcmp ogt float %989, %992, !dbg !148
  %994 = fcmp uno float %989, 0.000000e+00, !dbg !149
  %995 = or i1 %993, %994, !dbg !150
  %996 = select i1 %995, float %989, float %992, !dbg !151
  %997 = bitcast float %996 to i32, !dbg !146
  %998 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %997, i32 4, i32 31), !dbg !146
  %999 = bitcast i32 %998 to float, !dbg !146
  %1000 = fcmp ogt float %996, %999, !dbg !148
  %1001 = fcmp uno float %996, 0.000000e+00, !dbg !149
  %1002 = or i1 %1000, %1001, !dbg !150
  %1003 = select i1 %1002, float %996, float %999, !dbg !151
  %1004 = bitcast float %1003 to i32, !dbg !146
  %1005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 2, i32 31), !dbg !146
  %1006 = bitcast i32 %1005 to float, !dbg !146
  %1007 = fcmp ogt float %1003, %1006, !dbg !148
  %1008 = fcmp uno float %1003, 0.000000e+00, !dbg !149
  %1009 = or i1 %1007, %1008, !dbg !150
  %1010 = select i1 %1009, float %1003, float %1006, !dbg !151
  %1011 = bitcast float %1010 to i32, !dbg !146
  %1012 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1011, i32 1, i32 31), !dbg !146
  %1013 = bitcast i32 %1012 to float, !dbg !146
  %1014 = fcmp ogt float %1010, %1013, !dbg !148
  %1015 = fcmp uno float %1010, 0.000000e+00, !dbg !149
  %1016 = or i1 %1014, %1015, !dbg !150
  %1017 = select i1 %982, i32 %977, i32 %978, !dbg !151
  %1018 = insertelement <1 x i32> poison, i32 %1017, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %1018, i1 %463) #5, !dbg !146
  %1019 = select i1 %1016, i32 %1011, i32 %1012, !dbg !151
  %1020 = insertelement <1 x i32> poison, i32 %1019, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %1020, i1 %463) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1021 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %478, i1 %477) #5, !dbg !146
  %1022 = bitcast i32 %1021 to float, !dbg !146
  %1023 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 16, i32 31), !dbg !146
  %1024 = bitcast i32 %1023 to float, !dbg !146
  %1025 = fcmp ogt float %1022, %1024, !dbg !148
  %1026 = fcmp uno float %1022, 0.000000e+00, !dbg !149
  %1027 = or i1 %1026, %1025, !dbg !150
  %1028 = select i1 %1027, float %1022, float %1024, !dbg !151
  %1029 = bitcast float %1028 to i32, !dbg !146
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 8, i32 31), !dbg !146
  %1031 = bitcast i32 %1030 to float, !dbg !146
  %1032 = fcmp ogt float %1028, %1031, !dbg !148
  %1033 = fcmp uno float %1028, 0.000000e+00, !dbg !149
  %1034 = or i1 %1032, %1033, !dbg !150
  %1035 = select i1 %1034, float %1028, float %1031, !dbg !151
  %1036 = bitcast float %1035 to i32, !dbg !146
  %1037 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1036, i32 4, i32 31), !dbg !146
  %1038 = bitcast i32 %1037 to float, !dbg !146
  %1039 = fcmp ogt float %1035, %1038, !dbg !148
  %1040 = fcmp uno float %1035, 0.000000e+00, !dbg !149
  %1041 = or i1 %1039, %1040, !dbg !150
  %1042 = select i1 %1041, float %1035, float %1038, !dbg !151
  %1043 = bitcast float %1042 to i32, !dbg !146
  %1044 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1043, i32 2, i32 31), !dbg !146
  %1045 = bitcast i32 %1044 to float, !dbg !146
  %1046 = fcmp ogt float %1042, %1045, !dbg !148
  %1047 = fcmp uno float %1042, 0.000000e+00, !dbg !149
  %1048 = or i1 %1046, %1047, !dbg !150
  %1049 = select i1 %1048, float %1042, float %1045, !dbg !151
  %1050 = bitcast float %1049 to i32, !dbg !146
  %1051 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1050, i32 1, i32 31), !dbg !146
  %1052 = bitcast i32 %1051 to float, !dbg !146
  %1053 = fcmp ogt float %1049, %1052, !dbg !148
  %1054 = fcmp uno float %1049, 0.000000e+00, !dbg !149
  %1055 = or i1 %1053, %1054, !dbg !150
  %1056 = select i1 %1055, i32 %1050, i32 %1051, !dbg !151
  %1057 = insertelement <1 x i32> poison, i32 %1056, i64 0, !dbg !146
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %1057, i1 %589) #5, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !146
  %1058 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !146
  %1059 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !146
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %1060 = bitcast float %1058 to i32, !dbg !152
  %1061 = bitcast float %1059 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1060, i32 %1061, i1 true) #5, !dbg !152
  tail call void @llvm.nvvm.barrier0(), !dbg !152
  %1062 = load float, ptr addrspace(3) %935, align 4, !dbg !152
  %1063 = sext i32 %808 to i64, !dbg !153
  %1064 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1063, !dbg !153
  %1065 = fptrunc float %936 to bfloat, !dbg !145
  %1066 = and i32 %19, 1022, !dbg !145
  %1067 = icmp eq i32 %1066, 0, !dbg !145
  %1068 = bitcast bfloat %1065 to i16, !dbg !145
  %1069 = and i1 %1067, %809, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1068, ptr addrspace(1) %1064, i1 %1069) #5, !dbg !145
  %1070 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1063, !dbg !154
  %1071 = fptrunc float %1062 to bfloat, !dbg !152
  %1072 = bitcast bfloat %1071 to i16, !dbg !152
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1072, ptr addrspace(1) %1070, i1 %1069) #5, !dbg !152
  %.inv5 = fcmp oge float %931, 0.000000e+00, !dbg !155
  %1073 = select i1 %.inv5, float 0.000000e+00, float %931, !dbg !155
  %.inv6 = fcmp oge float %932, 0.000000e+00, !dbg !155
  %1074 = select i1 %.inv6, float 0.000000e+00, float %932, !dbg !155
  %1075 = fsub float 0.000000e+00, %1073, !dbg !157
  %1076 = fsub float 0.000000e+00, %1074, !dbg !157
  %.inv7 = fcmp ole float %1058, 0.000000e+00, !dbg !158
  %1077 = select i1 %.inv7, float 0.000000e+00, float %1058, !dbg !158
  %.inv8 = fcmp ole float %1059, 0.000000e+00, !dbg !158
  %1078 = select i1 %.inv8, float 0.000000e+00, float %1059, !dbg !158
  %1079 = fcmp ogt float %1075, %1077, !dbg !160
  %1080 = fcmp ogt float %1076, %1078, !dbg !160
  %1081 = fcmp uno float %1075, 0.000000e+00, !dbg !162
  %1082 = fcmp uno float %1076, 0.000000e+00, !dbg !162
  %1083 = or i1 %1081, %1079, !dbg !163
  %1084 = or i1 %1082, %1080, !dbg !163
  %1085 = select i1 %1083, float %1075, float %1077, !dbg !164
  %1086 = select i1 %1084, float %1076, float %1078, !dbg !164
  %1087 = fmul float %1085, 0x3F80204080000000, !dbg !165
  %1088 = fmul float %1086, 0x3F80204080000000, !dbg !165
  %1089 = fcmp ogt float %1087, 0x3EE4F8B580000000, !dbg !166
  %1090 = fcmp ogt float %1088, 0x3EE4F8B580000000, !dbg !166
  %1091 = fcmp uno float %1087, 0.000000e+00, !dbg !168
  %1092 = fcmp uno float %1088, 0.000000e+00, !dbg !168
  %1093 = or i1 %1089, %1091, !dbg !169
  %1094 = or i1 %1090, %1092, !dbg !169
  %1095 = select i1 %1093, float %1087, float 0x3EE4F8B580000000, !dbg !170
  %1096 = select i1 %1094, float %1088, float 0x3EE4F8B580000000, !dbg !170
  %1097 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1095), !dbg !171
  %1098 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1096), !dbg !171
  tail call void @llvm.nvvm.barrier0(), !dbg !172
  %1099 = bitcast float %1097 to <1 x i32>, !dbg !172
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1099, i1 true) #5, !dbg !172
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1099, i1 true) #5, !dbg !172
  %1100 = bitcast float %1098 to <1 x i32>, !dbg !172
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1100, i1 true) #5, !dbg !172
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1100, i1 true) #5, !dbg !172
  tail call void @llvm.nvvm.barrier0(), !dbg !172
  %1101 = lshr exact i32 %20, 6, !dbg !172
  %1102 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1101, !dbg !172
  %1103 = load float, ptr addrspace(3) %1102, align 8, !dbg !172
  %1104 = add i32 %28, %42, !dbg !173
  %1105 = sext i32 %1104 to i64, !dbg !174
  %1106 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1105, !dbg !174
  %1107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1106, i1 %23) #5, !dbg !175
  %1108 = extractvalue { i32, i32 } %1107, 0, !dbg !175
  %1109 = bitcast i32 %1108 to <2 x bfloat>, !dbg !175
  %1110 = extractvalue { i32, i32 } %1107, 1, !dbg !175
  %1111 = bitcast i32 %1110 to <2 x bfloat>, !dbg !175
  %1112 = extractelement <2 x bfloat> %1109, i64 0, !dbg !175
  %1113 = extractelement <2 x bfloat> %1109, i64 1, !dbg !175
  %1114 = extractelement <2 x bfloat> %1111, i64 0, !dbg !175
  %1115 = extractelement <2 x bfloat> %1111, i64 1, !dbg !175
  %1116 = fpext bfloat %1112 to float, !dbg !176
  %1117 = fpext bfloat %1113 to float, !dbg !176
  %1118 = fpext bfloat %1114 to float, !dbg !176
  %1119 = fpext bfloat %1115 to float, !dbg !176
  %1120 = fmul float %1103, %1116, !dbg !172
  %1121 = fmul float %1103, %1117, !dbg !172
  %1122 = fmul float %1103, %1118, !dbg !172
  %1123 = fmul float %1103, %1119, !dbg !172
  %1124 = tail call float @llvm.nvvm.round.f(float %1120) #5, !dbg !177
  %1125 = tail call float @llvm.nvvm.round.f(float %1121) #5, !dbg !177
  %1126 = tail call float @llvm.nvvm.round.f(float %1122) #5, !dbg !177
  %1127 = tail call float @llvm.nvvm.round.f(float %1123) #5, !dbg !177
  %1128 = insertelement <4 x float> poison, float %1124, i64 0, !dbg !178
  %1129 = insertelement <4 x float> %1128, float %1125, i64 1, !dbg !178
  %1130 = insertelement <4 x float> %1129, float %1126, i64 2, !dbg !178
  %1131 = insertelement <4 x float> %1130, float %1127, i64 3, !dbg !178
  %1132 = fcmp ogt <4 x float> %1131, splat (float -1.270000e+02), !dbg !178
  %1133 = fcmp uno <4 x float> %1131, zeroinitializer, !dbg !180
  %1134 = or <4 x i1> %1132, %1133, !dbg !181
  %1135 = select <4 x i1> %1134, <4 x float> %1131, <4 x float> splat (float -1.270000e+02), !dbg !182
  %1136 = fcmp olt <4 x float> %1135, splat (float 1.270000e+02), !dbg !183
  %1137 = fcmp uno <4 x float> %1135, zeroinitializer, !dbg !185
  %1138 = or <4 x i1> %1136, %1137, !dbg !186
  %1139 = fptosi <4 x float> %1135 to <4 x i8>, !dbg !187
  %1140 = select <4 x i1> %1138, <4 x i8> %1139, <4 x i8> splat (i8 127), !dbg !188
  %1141 = getelementptr i8, ptr addrspace(1) %12, i64 %1105, !dbg !189
  %1142 = bitcast <4 x i8> %1140 to i32, !dbg !190
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1142, ptr addrspace(1) %1141, i1 %23) #5, !dbg !190
  %1143 = or disjoint i64 %68, 2048, !dbg !191
  %1144 = icmp samesign ult i64 %1143, 3072, !dbg !192
  %1145 = trunc nuw nsw i64 %1143 to i32, !dbg !173
  %1146 = add i32 %42, %1145, !dbg !173
  %1147 = sext i32 %1146 to i64, !dbg !174
  %1148 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1147, !dbg !174
  %1149 = and i1 %23, %1144, !dbg !193
  %1150 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1148, i1 %1149) #5, !dbg !175
  %1151 = extractvalue { i32, i32 } %1150, 0, !dbg !175
  %1152 = bitcast i32 %1151 to <2 x bfloat>, !dbg !175
  %1153 = extractvalue { i32, i32 } %1150, 1, !dbg !175
  %1154 = bitcast i32 %1153 to <2 x bfloat>, !dbg !175
  %1155 = extractelement <2 x bfloat> %1152, i64 0, !dbg !175
  %1156 = extractelement <2 x bfloat> %1152, i64 1, !dbg !175
  %1157 = extractelement <2 x bfloat> %1154, i64 0, !dbg !175
  %1158 = extractelement <2 x bfloat> %1154, i64 1, !dbg !175
  %1159 = fpext bfloat %1155 to float, !dbg !176
  %1160 = fpext bfloat %1156 to float, !dbg !176
  %1161 = fpext bfloat %1157 to float, !dbg !176
  %1162 = fpext bfloat %1158 to float, !dbg !176
  %1163 = fmul float %1103, %1159, !dbg !172
  %1164 = fmul float %1103, %1160, !dbg !172
  %1165 = fmul float %1103, %1161, !dbg !172
  %1166 = fmul float %1103, %1162, !dbg !172
  %1167 = tail call float @llvm.nvvm.round.f(float %1163) #5, !dbg !177
  %1168 = tail call float @llvm.nvvm.round.f(float %1164) #5, !dbg !177
  %1169 = tail call float @llvm.nvvm.round.f(float %1165) #5, !dbg !177
  %1170 = tail call float @llvm.nvvm.round.f(float %1166) #5, !dbg !177
  %1171 = insertelement <4 x float> poison, float %1167, i64 0, !dbg !178
  %1172 = insertelement <4 x float> %1171, float %1168, i64 1, !dbg !178
  %1173 = insertelement <4 x float> %1172, float %1169, i64 2, !dbg !178
  %1174 = insertelement <4 x float> %1173, float %1170, i64 3, !dbg !178
  %1175 = fcmp ogt <4 x float> %1174, splat (float -1.270000e+02), !dbg !178
  %1176 = fcmp uno <4 x float> %1174, zeroinitializer, !dbg !180
  %1177 = or <4 x i1> %1175, %1176, !dbg !181
  %1178 = select <4 x i1> %1177, <4 x float> %1174, <4 x float> splat (float -1.270000e+02), !dbg !182
  %1179 = fcmp olt <4 x float> %1178, splat (float 1.270000e+02), !dbg !183
  %1180 = fcmp uno <4 x float> %1178, zeroinitializer, !dbg !185
  %1181 = or <4 x i1> %1179, %1180, !dbg !186
  %1182 = fptosi <4 x float> %1178 to <4 x i8>, !dbg !187
  %1183 = select <4 x i1> %1181, <4 x i8> %1182, <4 x i8> splat (i8 127), !dbg !188
  %1184 = getelementptr i8, ptr addrspace(1) %12, i64 %1147, !dbg !189
  %1185 = bitcast <4 x i8> %1183 to i32, !dbg !190
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1185, ptr addrspace(1) %1184, i1 %1149) #5, !dbg !190
  ret void, !dbg !194
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 35, column: 31, scope: !6)
!40 = !DILocation(line: 36, column: 29, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 59, scope: !6)
!44 = !DILocation(line: 40, column: 51, scope: !6)
!45 = !DILocation(line: 40, column: 113, scope: !6)
!46 = !DILocation(line: 41, column: 41, scope: !6)
!47 = !DILocation(line: 41, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 34, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 44, column: 35, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 41, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 48, scope: !6)
!54 = !DILocation(line: 42, column: 101, scope: !6)
!55 = !DILocation(line: 43, column: 51, scope: !6)
!56 = !DILocation(line: 44, column: 42, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 42, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 47, column: 22, scope: !6)
!61 = !DILocation(line: 48, column: 23, scope: !6)
!62 = !DILocation(line: 60, column: 23, scope: !6)
!63 = !DILocation(line: 61, column: 24, scope: !6)
!64 = !DILocation(line: 62, column: 24, scope: !6)
!65 = !DILocation(line: 63, column: 23, scope: !6)
!66 = !DILocation(line: 64, column: 23, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 70, column: 64, scope: !6)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = !DILocation(line: 72, column: 68, scope: !6)
!79 = !DILocation(line: 73, column: 29, scope: !6)
!80 = !DILocation(line: 73, column: 53, scope: !6)
!81 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 217, column: 21, scope: !84, inlinedAt: !82)
!84 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!85 = !DILocation(line: 218, column: 28, scope: !84, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 39, scope: !84, inlinedAt: !82)
!87 = !DILocation(line: 219, column: 60, scope: !84, inlinedAt: !82)
!88 = !DILocation(line: 219, column: 49, scope: !84, inlinedAt: !82)
!89 = !DILocation(line: 221, column: 25, scope: !84, inlinedAt: !82)
!90 = !DILocation(line: 221, column: 17, scope: !84, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 15, scope: !84, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 30, scope: !84, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 38, scope: !84, inlinedAt: !82)
!94 = !DILocation(line: 222, column: 49, scope: !84, inlinedAt: !82)
!95 = !DILocation(line: 222, column: 22, scope: !84, inlinedAt: !82)
!96 = !DILocation(line: 94, column: 25, scope: !6)
!97 = !DILocation(line: 96, column: 24, scope: !6)
!98 = !DILocation(line: 97, column: 32, scope: !6)
!99 = !DILocation(line: 92, column: 24, scope: !6)
!100 = !DILocation(line: 98, column: 24, scope: !6)
!101 = !DILocation(line: 86, column: 43, scope: !6)
!102 = !DILocation(line: 86, column: 36, scope: !6)
!103 = !DILocation(line: 86, column: 53, scope: !6)
!104 = !DILocation(line: 86, column: 115, scope: !6)
!105 = !DILocation(line: 87, column: 43, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 90, column: 35, scope: !6)
!111 = !DILocation(line: 87, column: 50, scope: !6)
!112 = !DILocation(line: 88, column: 50, scope: !6)
!113 = !DILocation(line: 88, column: 103, scope: !6)
!114 = !DILocation(line: 89, column: 49, scope: !6)
!115 = !DILocation(line: 90, column: 49, scope: !6)
!116 = !DILocation(line: 90, column: 102, scope: !6)
!117 = !DILocation(line: 101, column: 24, scope: !6)
!118 = !DILocation(line: 103, column: 24, scope: !6)
!119 = !DILocation(line: 104, column: 24, scope: !6)
!120 = !DILocation(line: 106, column: 24, scope: !6)
!121 = !DILocation(line: 107, column: 24, scope: !6)
!122 = !DILocation(line: 110, column: 50, scope: !6)
!123 = !DILocation(line: 113, column: 53, scope: !6)
!124 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !125)
!125 = !DILocation(line: 111, column: 47, scope: !6)
!126 = !DILocation(line: 112, column: 50, scope: !6)
!127 = !DILocation(line: 113, column: 29, scope: !6)
!128 = !DILocation(line: 81, column: 31, scope: !6)
!129 = !DILocation(line: 82, column: 29, scope: !6)
!130 = !DILocation(line: 86, column: 61, scope: !6)
!131 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !132)
!132 = !DILocation(line: 109, column: 47, scope: !6)
!133 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !132)
!134 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !132)
!135 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !132)
!136 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !125)
!137 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !125)
!138 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !125)
!139 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !140)
!140 = !DILocation(line: 114, column: 40, scope: !6)
!141 = !DILocation(line: 94, column: 15, scope: !84, inlinedAt: !140)
!142 = !DILocation(line: 96, column: 16, scope: !84, inlinedAt: !140)
!143 = !DILocation(line: 97, column: 29, scope: !84, inlinedAt: !140)
!144 = !DILocation(line: 96, column: 21, scope: !84, inlinedAt: !140)
!145 = !DILocation(line: 116, column: 37, scope: !6)
!146 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !147)
!147 = !DILocation(line: 115, column: 40, scope: !6)
!148 = !DILocation(line: 102, column: 15, scope: !84, inlinedAt: !147)
!149 = !DILocation(line: 104, column: 21, scope: !84, inlinedAt: !147)
!150 = !DILocation(line: 104, column: 16, scope: !84, inlinedAt: !147)
!151 = !DILocation(line: 105, column: 29, scope: !84, inlinedAt: !147)
!152 = !DILocation(line: 117, column: 37, scope: !6)
!153 = !DILocation(line: 116, column: 25, scope: !6)
!154 = !DILocation(line: 117, column: 25, scope: !6)
!155 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 126, column: 46, scope: !6)
!157 = !DILocation(line: 127, column: 17, scope: !6)
!158 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 128, column: 46, scope: !6)
!160 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !161)
!161 = !DILocation(line: 129, column: 46, scope: !6)
!162 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !161)
!163 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !161)
!164 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !161)
!165 = !DILocation(line: 131, column: 24, scope: !6)
!166 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !167)
!167 = !DILocation(line: 134, column: 46, scope: !6)
!168 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !167)
!169 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !167)
!170 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !167)
!171 = !DILocation(line: 137, column: 25, scope: !6)
!172 = !DILocation(line: 140, column: 24, scope: !6)
!173 = !DILocation(line: 124, column: 43, scope: !6)
!174 = !DILocation(line: 124, column: 36, scope: !6)
!175 = !DILocation(line: 124, column: 53, scope: !6)
!176 = !DILocation(line: 124, column: 115, scope: !6)
!177 = !DILocation(line: 141, column: 36, scope: !6)
!178 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !179)
!179 = !DILocation(line: 144, column: 46, scope: !6)
!180 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !179)
!181 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !179)
!182 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !179)
!183 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !184)
!184 = !DILocation(line: 146, column: 46, scope: !6)
!185 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !184)
!186 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !184)
!187 = !DILocation(line: 148, column: 25, scope: !6)
!188 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !184)
!189 = !DILocation(line: 149, column: 29, scope: !6)
!190 = !DILocation(line: 149, column: 53, scope: !6)
!191 = !DILocation(line: 119, column: 31, scope: !6)
!192 = !DILocation(line: 120, column: 29, scope: !6)
!193 = !DILocation(line: 124, column: 61, scope: !6)
!194 = !DILocation(line: 118, column: 4, scope: !6)
