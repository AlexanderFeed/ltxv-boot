; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = lshr i32 %18, 5, !dbg !11
  %21 = shl i32 %18, 4, !dbg !11
  %22 = and i32 %21, 4080, !dbg !11
  %23 = or disjoint i32 %22, 4, !dbg !11
  %24 = or disjoint i32 %22, 8, !dbg !11
  %25 = or disjoint i32 %22, 12, !dbg !11
  %26 = icmp samesign ult i32 %22, 3072, !dbg !12
  %27 = mul i32 %16, 3072, !dbg !13
  %28 = add i32 %22, %27, !dbg !14
  %29 = add i32 %24, %27, !dbg !14
  %30 = sext i32 %28 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !15
  %32 = sext i32 %29 to i64, !dbg !15
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !15
  %34 = and i1 %17, %26, !dbg !16
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %34) #5, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !17
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !17
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !17
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !17
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !17
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !17
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !17
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !17
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !17
  %48 = extractelement <2 x bfloat> %41, i64 0, !dbg !17
  %49 = extractelement <2 x bfloat> %41, i64 1, !dbg !17
  %50 = extractelement <2 x bfloat> %43, i64 0, !dbg !17
  %51 = extractelement <2 x bfloat> %43, i64 1, !dbg !17
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %34) #5, !dbg !17
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !17
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !17
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !17
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !17
  %59 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !17
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !17
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !17
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !17
  %63 = extractelement <2 x bfloat> %56, i64 0, !dbg !17
  %64 = extractelement <2 x bfloat> %56, i64 1, !dbg !17
  %65 = extractelement <2 x bfloat> %58, i64 0, !dbg !17
  %66 = extractelement <2 x bfloat> %58, i64 1, !dbg !17
  %67 = extractelement <2 x bfloat> %60, i64 0, !dbg !17
  %68 = extractelement <2 x bfloat> %60, i64 1, !dbg !17
  %69 = fpext bfloat %44 to float, !dbg !18
  %70 = fpext bfloat %45 to float, !dbg !18
  %71 = fpext bfloat %46 to float, !dbg !18
  %72 = fpext bfloat %47 to float, !dbg !18
  %73 = fpext bfloat %48 to float, !dbg !18
  %74 = fpext bfloat %49 to float, !dbg !18
  %75 = fpext bfloat %50 to float, !dbg !18
  %76 = fpext bfloat %51 to float, !dbg !18
  %77 = fpext bfloat %61 to float, !dbg !18
  %78 = fpext bfloat %62 to float, !dbg !18
  %79 = fpext bfloat %63 to float, !dbg !18
  %80 = fpext bfloat %64 to float, !dbg !18
  %81 = fpext bfloat %65 to float, !dbg !18
  %82 = fpext bfloat %66 to float, !dbg !18
  %83 = fpext bfloat %67 to float, !dbg !18
  %84 = fpext bfloat %68 to float, !dbg !18
  %85 = select i1 %34, float %69, float 0.000000e+00, !dbg !19
  %86 = select i1 %34, float %70, float 0.000000e+00, !dbg !19
  %87 = select i1 %34, float %71, float 0.000000e+00, !dbg !19
  %88 = select i1 %34, float %72, float 0.000000e+00, !dbg !19
  %89 = select i1 %34, float %73, float 0.000000e+00, !dbg !19
  %90 = select i1 %34, float %74, float 0.000000e+00, !dbg !19
  %91 = select i1 %34, float %75, float 0.000000e+00, !dbg !19
  %92 = select i1 %34, float %76, float 0.000000e+00, !dbg !19
  %93 = select i1 %34, float %77, float 0.000000e+00, !dbg !19
  %94 = select i1 %34, float %78, float 0.000000e+00, !dbg !19
  %95 = select i1 %34, float %79, float 0.000000e+00, !dbg !19
  %96 = select i1 %34, float %80, float 0.000000e+00, !dbg !19
  %97 = select i1 %34, float %81, float 0.000000e+00, !dbg !19
  %98 = select i1 %34, float %82, float 0.000000e+00, !dbg !19
  %99 = select i1 %34, float %83, float 0.000000e+00, !dbg !19
  %100 = select i1 %34, float %84, float 0.000000e+00, !dbg !19
  %101 = select i1 %34, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %102 = fsub float %86, %85, !dbg !21
  %103 = select i1 %34, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !27
  %105 = tail call float @llvm.nvvm.div.full(float %101, float %103), !dbg !28
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !29
  %107 = fmul float %106, %102, !dbg !30
  %108 = fadd float %85, %107, !dbg !31
  %109 = fmul float %102, %102, !dbg !32
  %110 = fmul float %101, %109, !dbg !33
  %111 = fmul float %106, %110, !dbg !34
  %112 = fadd float %111, 0.000000e+00, !dbg !35
  %113 = fsub float %87, %108, !dbg !21
  %114 = select i1 %34, float 3.000000e+00, float 0.000000e+00, !dbg !26
  %115 = fcmp oeq float %114, 0.000000e+00, !dbg !27
  %116 = tail call float @llvm.nvvm.div.full(float %101, float %114), !dbg !28
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !29
  %118 = fmul float %117, %113, !dbg !30
  %119 = fadd float %108, %118, !dbg !31
  %120 = fmul float %113, %113, !dbg !32
  %121 = fmul float %103, %120, !dbg !33
  %122 = fmul float %117, %121, !dbg !34
  %123 = fadd float %112, %122, !dbg !35
  %124 = fsub float %88, %119, !dbg !21
  %125 = select i1 %34, float 4.000000e+00, float 0.000000e+00, !dbg !26
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !27
  %127 = tail call float @llvm.nvvm.div.full(float %101, float %125), !dbg !28
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !29
  %129 = fmul float %128, %124, !dbg !30
  %130 = fadd float %119, %129, !dbg !31
  %131 = fmul float %124, %124, !dbg !32
  %132 = fmul float %114, %131, !dbg !33
  %133 = fmul float %128, %132, !dbg !34
  %134 = fadd float %123, %133, !dbg !35
  %135 = fsub float %89, %130, !dbg !21
  %136 = select i1 %34, float 5.000000e+00, float 0.000000e+00, !dbg !26
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !27
  %138 = tail call float @llvm.nvvm.div.full(float %101, float %136), !dbg !28
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !29
  %140 = fmul float %139, %135, !dbg !30
  %141 = fadd float %130, %140, !dbg !31
  %142 = fmul float %135, %135, !dbg !32
  %143 = fmul float %125, %142, !dbg !33
  %144 = fmul float %139, %143, !dbg !34
  %145 = fadd float %134, %144, !dbg !35
  %146 = fsub float %90, %141, !dbg !21
  %147 = select i1 %34, float 6.000000e+00, float 0.000000e+00, !dbg !26
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !27
  %149 = tail call float @llvm.nvvm.div.full(float %101, float %147), !dbg !28
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !29
  %151 = fmul float %150, %146, !dbg !30
  %152 = fadd float %141, %151, !dbg !31
  %153 = fmul float %146, %146, !dbg !32
  %154 = fmul float %136, %153, !dbg !33
  %155 = fmul float %150, %154, !dbg !34
  %156 = fadd float %145, %155, !dbg !35
  %157 = fsub float %91, %152, !dbg !21
  %158 = select i1 %34, float 7.000000e+00, float 0.000000e+00, !dbg !26
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !27
  %160 = tail call float @llvm.nvvm.div.full(float %101, float %158), !dbg !28
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !29
  %162 = fmul float %161, %157, !dbg !30
  %163 = fadd float %152, %162, !dbg !31
  %164 = fmul float %157, %157, !dbg !32
  %165 = fmul float %147, %164, !dbg !33
  %166 = fmul float %161, %165, !dbg !34
  %167 = fadd float %156, %166, !dbg !35
  %168 = fsub float %92, %163, !dbg !21
  %169 = select i1 %34, float 8.000000e+00, float 0.000000e+00, !dbg !26
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !27
  %171 = tail call float @llvm.nvvm.div.full(float %101, float %169), !dbg !28
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !29
  %173 = fmul float %172, %168, !dbg !30
  %174 = fadd float %163, %173, !dbg !31
  %175 = fmul float %168, %168, !dbg !32
  %176 = fmul float %158, %175, !dbg !33
  %177 = fmul float %172, %176, !dbg !34
  %178 = fadd float %167, %177, !dbg !35
  %179 = fsub float %93, %174, !dbg !21
  %180 = select i1 %34, float 9.000000e+00, float 0.000000e+00, !dbg !26
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !27
  %182 = tail call float @llvm.nvvm.div.full(float %101, float %180), !dbg !28
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !29
  %184 = fmul float %183, %179, !dbg !30
  %185 = fadd float %174, %184, !dbg !31
  %186 = fadd float %178, 0.000000e+00, !dbg !36
  %187 = fmul float %179, %179, !dbg !32
  %188 = fmul float %169, %187, !dbg !33
  %189 = fmul float %183, %188, !dbg !34
  %190 = fadd float %186, %189, !dbg !35
  %191 = fsub float %94, %185, !dbg !21
  %192 = select i1 %34, float 1.000000e+01, float 0.000000e+00, !dbg !26
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !27
  %194 = tail call float @llvm.nvvm.div.full(float %101, float %192), !dbg !28
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !29
  %196 = fmul float %195, %191, !dbg !30
  %197 = fadd float %185, %196, !dbg !31
  %198 = fmul float %191, %191, !dbg !32
  %199 = fmul float %180, %198, !dbg !33
  %200 = fmul float %195, %199, !dbg !34
  %201 = fadd float %190, %200, !dbg !35
  %202 = fsub float %95, %197, !dbg !21
  %203 = select i1 %34, float 1.100000e+01, float 0.000000e+00, !dbg !26
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !27
  %205 = tail call float @llvm.nvvm.div.full(float %101, float %203), !dbg !28
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !29
  %207 = fmul float %206, %202, !dbg !30
  %208 = fadd float %197, %207, !dbg !31
  %209 = fmul float %202, %202, !dbg !32
  %210 = fmul float %192, %209, !dbg !33
  %211 = fmul float %206, %210, !dbg !34
  %212 = fadd float %201, %211, !dbg !35
  %213 = fsub float %96, %208, !dbg !21
  %214 = select i1 %34, float 1.200000e+01, float 0.000000e+00, !dbg !26
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !27
  %216 = tail call float @llvm.nvvm.div.full(float %101, float %214), !dbg !28
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !29
  %218 = fmul float %217, %213, !dbg !30
  %219 = fadd float %208, %218, !dbg !31
  %220 = fmul float %213, %213, !dbg !32
  %221 = fmul float %203, %220, !dbg !33
  %222 = fmul float %217, %221, !dbg !34
  %223 = fadd float %212, %222, !dbg !35
  %224 = fsub float %97, %219, !dbg !21
  %225 = select i1 %34, float 1.300000e+01, float 0.000000e+00, !dbg !26
  %226 = fcmp oeq float %225, 0.000000e+00, !dbg !27
  %227 = tail call float @llvm.nvvm.div.full(float %101, float %225), !dbg !28
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !29
  %229 = fmul float %228, %224, !dbg !30
  %230 = fadd float %219, %229, !dbg !31
  %231 = fmul float %224, %224, !dbg !32
  %232 = fmul float %214, %231, !dbg !33
  %233 = fmul float %228, %232, !dbg !34
  %234 = fadd float %223, %233, !dbg !35
  %235 = fsub float %98, %230, !dbg !21
  %236 = select i1 %34, float 1.400000e+01, float 0.000000e+00, !dbg !26
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !27
  %238 = tail call float @llvm.nvvm.div.full(float %101, float %236), !dbg !28
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !29
  %240 = fmul float %239, %235, !dbg !30
  %241 = fadd float %230, %240, !dbg !31
  %242 = fmul float %235, %235, !dbg !32
  %243 = fmul float %225, %242, !dbg !33
  %244 = fmul float %239, %243, !dbg !34
  %245 = fadd float %234, %244, !dbg !35
  %246 = fsub float %99, %241, !dbg !21
  %247 = select i1 %34, float 1.500000e+01, float 0.000000e+00, !dbg !26
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !27
  %249 = tail call float @llvm.nvvm.div.full(float %101, float %247), !dbg !28
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !29
  %251 = fmul float %250, %246, !dbg !30
  %252 = fadd float %241, %251, !dbg !31
  %253 = fadd float %245, 0.000000e+00, !dbg !36
  %254 = fmul float %246, %246, !dbg !32
  %255 = fmul float %236, %254, !dbg !33
  %256 = fmul float %250, %255, !dbg !34
  %257 = fadd float %253, %256, !dbg !35
  %258 = fsub float %100, %252, !dbg !21
  %259 = select i1 %34, float 1.600000e+01, float 0.000000e+00, !dbg !26
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !27
  %261 = tail call float @llvm.nvvm.div.full(float %101, float %259), !dbg !28
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !29
  %263 = fmul float %262, %258, !dbg !30
  %264 = fadd float %252, %263, !dbg !31
  %265 = fmul float %258, %258, !dbg !32
  %266 = fmul float %247, %265, !dbg !33
  %267 = fmul float %262, %266, !dbg !34
  %268 = fadd float %257, %267, !dbg !35
  %269 = bitcast float %264 to i32, !dbg !37
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 16, i32 31), !dbg !37
  %271 = bitcast i32 %270 to float, !dbg !37
  %272 = bitcast float %268 to i32, !dbg !37
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 16, i32 31), !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = bitcast float %259 to i32, !dbg !37
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 16, i32 31), !dbg !37
  %277 = bitcast i32 %276 to float, !dbg !37
  %278 = fsub float %271, %264, !dbg !21
  %279 = fadd float %259, %277, !dbg !26
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !27
  %281 = tail call float @llvm.nvvm.div.full(float %277, float %279), !dbg !28
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !29
  %283 = fmul float %282, %278, !dbg !30
  %284 = fadd float %264, %283, !dbg !31
  %285 = fadd float %268, %274, !dbg !36
  %286 = fmul float %278, %278, !dbg !32
  %287 = fmul float %259, %286, !dbg !33
  %288 = fmul float %282, %287, !dbg !34
  %289 = fadd float %285, %288, !dbg !35
  %290 = bitcast float %284 to i32, !dbg !37
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 8, i32 31), !dbg !37
  %292 = bitcast i32 %291 to float, !dbg !37
  %293 = bitcast float %289 to i32, !dbg !37
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 8, i32 31), !dbg !37
  %295 = bitcast i32 %294 to float, !dbg !37
  %296 = bitcast float %279 to i32, !dbg !37
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 8, i32 31), !dbg !37
  %298 = bitcast i32 %297 to float, !dbg !37
  %299 = fsub float %292, %284, !dbg !21
  %300 = fadd float %279, %298, !dbg !26
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !27
  %302 = tail call float @llvm.nvvm.div.full(float %298, float %300), !dbg !28
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !29
  %304 = fmul float %303, %299, !dbg !30
  %305 = fadd float %284, %304, !dbg !31
  %306 = fadd float %289, %295, !dbg !36
  %307 = fmul float %299, %299, !dbg !32
  %308 = fmul float %279, %307, !dbg !33
  %309 = fmul float %303, %308, !dbg !34
  %310 = fadd float %306, %309, !dbg !35
  %311 = bitcast float %305 to i32, !dbg !37
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 4, i32 31), !dbg !37
  %313 = bitcast i32 %312 to float, !dbg !37
  %314 = bitcast float %310 to i32, !dbg !37
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !37
  %316 = bitcast i32 %315 to float, !dbg !37
  %317 = bitcast float %300 to i32, !dbg !37
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 4, i32 31), !dbg !37
  %319 = bitcast i32 %318 to float, !dbg !37
  %320 = fsub float %313, %305, !dbg !21
  %321 = fadd float %300, %319, !dbg !26
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !27
  %323 = tail call float @llvm.nvvm.div.full(float %319, float %321), !dbg !28
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !29
  %325 = fmul float %324, %320, !dbg !30
  %326 = fadd float %305, %325, !dbg !31
  %327 = fadd float %310, %316, !dbg !36
  %328 = fmul float %320, %320, !dbg !32
  %329 = fmul float %300, %328, !dbg !33
  %330 = fmul float %324, %329, !dbg !34
  %331 = fadd float %327, %330, !dbg !35
  %332 = bitcast float %326 to i32, !dbg !37
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !37
  %334 = bitcast i32 %333 to float, !dbg !37
  %335 = bitcast float %331 to i32, !dbg !37
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !37
  %337 = bitcast i32 %336 to float, !dbg !37
  %338 = bitcast float %321 to i32, !dbg !37
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !37
  %340 = bitcast i32 %339 to float, !dbg !37
  %341 = fsub float %334, %326, !dbg !21
  %342 = fadd float %321, %340, !dbg !26
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !27
  %344 = tail call float @llvm.nvvm.div.full(float %340, float %342), !dbg !28
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !29
  %346 = fmul float %345, %341, !dbg !30
  %347 = fadd float %326, %346, !dbg !31
  %348 = fadd float %331, %337, !dbg !36
  %349 = fmul float %341, %341, !dbg !32
  %350 = fmul float %321, %349, !dbg !33
  %351 = fmul float %345, %350, !dbg !34
  %352 = fadd float %348, %351, !dbg !35
  %353 = bitcast float %347 to i32, !dbg !37
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 1, i32 31), !dbg !37
  %355 = bitcast i32 %354 to float, !dbg !37
  %356 = bitcast float %352 to i32, !dbg !37
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !37
  %358 = bitcast i32 %357 to float, !dbg !37
  %359 = bitcast float %342 to i32, !dbg !37
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !37
  %361 = bitcast i32 %360 to float, !dbg !37
  %362 = fsub float %355, %347, !dbg !21
  %363 = fadd float %342, %361, !dbg !26
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !27
  %365 = tail call float @llvm.nvvm.div.full(float %361, float %363), !dbg !28
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !29
  %367 = fmul float %366, %362, !dbg !30
  %368 = fadd float %347, %367, !dbg !31
  %369 = fadd float %352, %358, !dbg !36
  %370 = fmul float %362, %362, !dbg !32
  %371 = fmul float %342, %370, !dbg !33
  %372 = fmul float %366, %371, !dbg !34
  %373 = fadd float %369, %372, !dbg !35
  %374 = and i32 %20, 7, !dbg !37
  %375 = icmp eq i32 %19, 0, !dbg !37
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !37
  %377 = bitcast float %368 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 %375) #5, !dbg !37
  %378 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %374, !dbg !37
  %379 = bitcast float %373 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 %375) #5, !dbg !37
  %380 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %374, !dbg !37
  %381 = bitcast float %363 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 %375) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %382 = icmp slt i32 %18, 8, !dbg !37
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %384 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %383, i1 %382) #5, !dbg !37
  %385 = bitcast i32 %384 to float, !dbg !37
  %386 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !37
  %387 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %386, i1 %382) #5, !dbg !37
  %388 = bitcast i32 %387 to float, !dbg !37
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %18, !dbg !37
  %390 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %389, i1 %382) #5, !dbg !37
  %391 = bitcast i32 %390 to float, !dbg !37
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 4, i32 31), !dbg !37
  %393 = bitcast i32 %392 to float, !dbg !37
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !37
  %395 = bitcast i32 %394 to float, !dbg !37
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !37
  %397 = bitcast i32 %396 to float, !dbg !37
  %398 = fsub float %393, %385, !dbg !21
  %399 = fadd float %391, %397, !dbg !26
  %400 = fcmp oeq float %399, 0.000000e+00, !dbg !27
  %401 = tail call float @llvm.nvvm.div.full(float %397, float %399), !dbg !28
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !29
  %403 = fmul float %398, %402, !dbg !30
  %404 = fadd float %403, %385, !dbg !31
  %405 = fadd float %388, %395, !dbg !36
  %406 = fmul float %398, %398, !dbg !32
  %407 = fmul float %406, %391, !dbg !33
  %408 = fmul float %407, %402, !dbg !34
  %409 = fadd float %405, %408, !dbg !35
  %410 = bitcast float %404 to i32, !dbg !37
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 2, i32 31), !dbg !37
  %412 = bitcast i32 %411 to float, !dbg !37
  %413 = bitcast float %409 to i32, !dbg !37
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 2, i32 31), !dbg !37
  %415 = bitcast i32 %414 to float, !dbg !37
  %416 = bitcast float %399 to i32, !dbg !37
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 2, i32 31), !dbg !37
  %418 = bitcast i32 %417 to float, !dbg !37
  %419 = fsub float %412, %404, !dbg !21
  %420 = fadd float %399, %418, !dbg !26
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !27
  %422 = tail call float @llvm.nvvm.div.full(float %418, float %420), !dbg !28
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !29
  %424 = fmul float %419, %423, !dbg !30
  %425 = fadd float %404, %424, !dbg !31
  %426 = fadd float %409, %415, !dbg !36
  %427 = fmul float %419, %419, !dbg !32
  %428 = fmul float %399, %427, !dbg !33
  %429 = fmul float %423, %428, !dbg !34
  %430 = fadd float %426, %429, !dbg !35
  %431 = bitcast float %425 to i32, !dbg !37
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 1, i32 31), !dbg !37
  %433 = bitcast i32 %432 to float, !dbg !37
  %434 = bitcast float %430 to i32, !dbg !37
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 1, i32 31), !dbg !37
  %436 = bitcast i32 %435 to float, !dbg !37
  %437 = bitcast float %420 to i32, !dbg !37
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 1, i32 31), !dbg !37
  %439 = bitcast i32 %438 to float, !dbg !37
  %440 = fsub float %433, %425, !dbg !21
  %441 = fadd float %420, %439, !dbg !26
  %442 = fcmp oeq float %441, 0.000000e+00, !dbg !27
  %443 = tail call float @llvm.nvvm.div.full(float %439, float %441), !dbg !28
  %444 = select i1 %442, float 0.000000e+00, float %443, !dbg !29
  %445 = fmul float %440, %444, !dbg !30
  %446 = fadd float %425, %445, !dbg !31
  %447 = fadd float %430, %436, !dbg !36
  %448 = fmul float %440, %440, !dbg !32
  %449 = fmul float %420, %448, !dbg !33
  %450 = fmul float %444, %449, !dbg !34
  %451 = fadd float %447, %450, !dbg !35
  %452 = and i32 %18, 7, !dbg !37
  %453 = icmp eq i32 %452, 0, !dbg !37
  %454 = and i1 %382, %453, !dbg !37
  %455 = bitcast float %446 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %455, i1 %454) #5, !dbg !37
  %456 = bitcast float %451 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %456, i1 %454) #5, !dbg !37
  %457 = bitcast float %441 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %457, i1 %454) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %458 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %459 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !37
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %34) #5, !dbg !38
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %34) #5, !dbg !38
  %462 = add nuw nsw i32 %22, 3072, !dbg !39
  %463 = add nuw nsw i32 %22, 3080, !dbg !39
  %464 = zext nneg i32 %462 to i64, !dbg !40
  %465 = getelementptr float, ptr addrspace(1) %1, i64 %464, !dbg !40
  %466 = zext nneg i32 %22 to i64, !dbg !40
  %467 = getelementptr float, ptr addrspace(1) %1, i64 %466, !dbg !40
  %468 = getelementptr i8, ptr addrspace(1) %467, i64 12304, !dbg !40
  %469 = zext nneg i32 %463 to i64, !dbg !40
  %470 = getelementptr float, ptr addrspace(1) %1, i64 %469, !dbg !40
  %471 = getelementptr i8, ptr addrspace(1) %467, i64 12336, !dbg !40
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %465, i1 %26) #5, !dbg !41
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %468, i1 %26) #5, !dbg !41
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %470, i1 %26) #5, !dbg !41
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %471, i1 %26) #5, !dbg !41
  %476 = getelementptr bfloat, ptr addrspace(1) %2, i64 %464, !dbg !42
  %477 = getelementptr bfloat, ptr addrspace(1) %2, i64 %469, !dbg !42
  %478 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %476, i1 %26) #5, !dbg !43
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %477, i1 %26) #5, !dbg !43
  %480 = zext nneg i32 %23 to i64, !dbg !44
  %481 = getelementptr float, ptr addrspace(1) %1, i64 %480, !dbg !44
  %482 = zext nneg i32 %24 to i64, !dbg !44
  %483 = getelementptr float, ptr addrspace(1) %1, i64 %482, !dbg !44
  %484 = zext nneg i32 %25 to i64, !dbg !44
  %485 = getelementptr float, ptr addrspace(1) %1, i64 %484, !dbg !44
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %467, i1 %26) #5, !dbg !45
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %481, i1 %26) #5, !dbg !45
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %483, i1 %26) #5, !dbg !45
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %485, i1 %26) #5, !dbg !45
  %490 = getelementptr bfloat, ptr addrspace(1) %2, i64 %466, !dbg !46
  %491 = getelementptr bfloat, ptr addrspace(1) %2, i64 %482, !dbg !46
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %490, i1 %26) #5, !dbg !47
  %493 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %491, i1 %26) #5, !dbg !47
  %494 = tail call float @llvm.nvvm.div.full(float %459, float 3.072000e+03), !dbg !48
  %495 = fadd float %494, 0x3EB0C6F7A0000000, !dbg !49
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %510 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i66 = icmp eq i32 %511, 0, !dbg !50
  br i1 %.not.i66, label %514, label %512, !dbg !50

512:                                              ; preds = %__nv_rsqrtf.exit
  %513 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %495), !dbg !50
  br label %__nv_rsqrtf.exit68, !dbg !50

514:                                              ; preds = %__nv_rsqrtf.exit
  %515 = tail call float @llvm.nvvm.rsqrt.approx.f(float %495), !dbg !50
  br label %__nv_rsqrtf.exit68, !dbg !50

__nv_rsqrtf.exit68:                               ; preds = %512, %514
  %.0.i67 = phi float [ %513, %512 ], [ %515, %514 ], !dbg !50
  %516 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !38
  %517 = bitcast i32 %516 to <2 x bfloat>, !dbg !38
  %518 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !38
  %519 = bitcast i32 %518 to <2 x bfloat>, !dbg !38
  %520 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !38
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !38
  %522 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !38
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !38
  %524 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !38
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !38
  %526 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !38
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !38
  %528 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !38
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !38
  %530 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !38
  %531 = bitcast i32 %530 to <2 x bfloat>, !dbg !38
  %532 = extractvalue { i32, i32, i32, i32 } %493, 3, !dbg !47
  %533 = bitcast i32 %532 to <2 x bfloat>, !dbg !47
  %534 = extractvalue { i32, i32, i32, i32 } %493, 2, !dbg !47
  %535 = bitcast i32 %534 to <2 x bfloat>, !dbg !47
  %536 = extractvalue { i32, i32, i32, i32 } %493, 1, !dbg !47
  %537 = bitcast i32 %536 to <2 x bfloat>, !dbg !47
  %538 = extractvalue { i32, i32, i32, i32 } %493, 0, !dbg !47
  %539 = bitcast i32 %538 to <2 x bfloat>, !dbg !47
  %540 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !47
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !47
  %542 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !47
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !47
  %544 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !47
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !47
  %546 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !47
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !47
  %548 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !45
  %549 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !45
  %550 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !45
  %551 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !45
  %552 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !45
  %553 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !45
  %554 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !45
  %555 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !45
  %556 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !45
  %557 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !45
  %558 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !45
  %559 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !45
  %560 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !45
  %561 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !45
  %562 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !45
  %563 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !45
  %564 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !43
  %565 = bitcast i32 %564 to <2 x bfloat>, !dbg !43
  %566 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !43
  %567 = bitcast i32 %566 to <2 x bfloat>, !dbg !43
  %568 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !43
  %569 = bitcast i32 %568 to <2 x bfloat>, !dbg !43
  %570 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !43
  %571 = bitcast i32 %570 to <2 x bfloat>, !dbg !43
  %572 = extractvalue { i32, i32, i32, i32 } %478, 3, !dbg !43
  %573 = bitcast i32 %572 to <2 x bfloat>, !dbg !43
  %574 = extractvalue { i32, i32, i32, i32 } %478, 2, !dbg !43
  %575 = bitcast i32 %574 to <2 x bfloat>, !dbg !43
  %576 = extractvalue { i32, i32, i32, i32 } %478, 1, !dbg !43
  %577 = bitcast i32 %576 to <2 x bfloat>, !dbg !43
  %578 = extractvalue { i32, i32, i32, i32 } %478, 0, !dbg !43
  %579 = bitcast i32 %578 to <2 x bfloat>, !dbg !43
  %580 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !41
  %581 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !41
  %582 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !41
  %583 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !41
  %584 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !41
  %585 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !41
  %586 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !41
  %587 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !41
  %588 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !41
  %589 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !41
  %590 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !41
  %591 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !41
  %592 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !41
  %593 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !41
  %594 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !41
  %595 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !41
  %596 = shl i32 %18, 3, !dbg !11
  %597 = and i32 %596, 2040, !dbg !11
  %598 = or disjoint i32 %597, 2048, !dbg !11
  %599 = icmp samesign ult i32 %598, 3072, !dbg !12
  %600 = and i1 %17, %599, !dbg !16
  %601 = add i32 %598, %27, !dbg !14
  %602 = add i32 %597, %27, !dbg !14
  %603 = sext i32 %602 to i64, !dbg !51
  %604 = getelementptr bfloat, ptr addrspace(1) %3, i64 %603, !dbg !51
  %605 = sext i32 %601 to i64, !dbg !51
  %606 = getelementptr bfloat, ptr addrspace(1) %3, i64 %605, !dbg !51
  %607 = getelementptr bfloat, ptr addrspace(1) %3, i64 %30, !dbg !51
  %608 = getelementptr bfloat, ptr addrspace(1) %3, i64 %32, !dbg !51
  %609 = fpext <2 x bfloat> %531 to <2 x float>, !dbg !52
  %610 = insertelement <2 x float> poison, float %458, i64 0, !dbg !53
  %611 = shufflevector <2 x float> %610, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %612 = fsub <2 x float> %609, %611, !dbg !53
  %613 = fpext <2 x bfloat> %547 to <2 x float>, !dbg !54
  %614 = insertelement <2 x i32> poison, i32 %563, i64 0, !dbg !45
  %615 = insertelement <2 x i32> %614, i32 %562, i64 1, !dbg !45
  %616 = bitcast <2 x i32> %615 to <2 x float>, !dbg !45
  %617 = fpext <2 x bfloat> %579 to <2 x float>, !dbg !55
  %618 = insertelement <2 x i32> poison, i32 %595, i64 0, !dbg !41
  %619 = insertelement <2 x i32> %618, i32 %594, i64 1, !dbg !41
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !41
  %621 = insertelement <2 x float> poison, float %.0.i67, i64 0, !dbg !56
  %622 = shufflevector <2 x float> %621, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %623 = fmul <2 x float> %612, %622, !dbg !56
  %624 = fadd <2 x float> %620, %617, !dbg !57
  %625 = fadd <2 x float> %624, splat (float 1.000000e+00), !dbg !58
  %626 = fmul <2 x float> %625, %623, !dbg !59
  %627 = fadd <2 x float> %616, %613, !dbg !60
  %628 = fadd <2 x float> %627, %626, !dbg !61
  %629 = extractelement <2 x float> %628, i64 0, !dbg !62
  %630 = select i1 %34, float %629, float 0x7FF0000000000000, !dbg !63
  %631 = extractelement <2 x float> %628, i64 1, !dbg !62
  %632 = select i1 %34, float %631, float 0x7FF0000000000000, !dbg !63
  %633 = select i1 %34, float %629, float 0xFFF0000000000000, !dbg !62
  %634 = select i1 %34, float %631, float 0xFFF0000000000000, !dbg !62
  %635 = fptrunc <2 x float> %628 to <2 x bfloat>, !dbg !64
  %636 = fpext <2 x bfloat> %529 to <2 x float>, !dbg !52
  %637 = fsub <2 x float> %636, %611, !dbg !53
  %638 = fpext <2 x bfloat> %545 to <2 x float>, !dbg !54
  %639 = insertelement <2 x i32> poison, i32 %561, i64 0, !dbg !45
  %640 = insertelement <2 x i32> %639, i32 %560, i64 1, !dbg !45
  %641 = bitcast <2 x i32> %640 to <2 x float>, !dbg !45
  %642 = fpext <2 x bfloat> %577 to <2 x float>, !dbg !55
  %643 = insertelement <2 x i32> poison, i32 %593, i64 0, !dbg !41
  %644 = insertelement <2 x i32> %643, i32 %592, i64 1, !dbg !41
  %645 = bitcast <2 x i32> %644 to <2 x float>, !dbg !41
  %646 = fmul <2 x float> %637, %622, !dbg !56
  %647 = fadd <2 x float> %645, %642, !dbg !57
  %648 = fadd <2 x float> %647, splat (float 1.000000e+00), !dbg !58
  %649 = fmul <2 x float> %648, %646, !dbg !59
  %650 = fadd <2 x float> %641, %638, !dbg !60
  %651 = fadd <2 x float> %650, %649, !dbg !61
  %652 = extractelement <2 x float> %651, i64 0, !dbg !62
  %653 = select i1 %34, float %652, float 0x7FF0000000000000, !dbg !63
  %654 = extractelement <2 x float> %651, i64 1, !dbg !62
  %655 = select i1 %34, float %654, float 0x7FF0000000000000, !dbg !63
  %656 = select i1 %34, float %652, float 0xFFF0000000000000, !dbg !62
  %657 = select i1 %34, float %654, float 0xFFF0000000000000, !dbg !62
  %658 = fptrunc <2 x float> %651 to <2 x bfloat>, !dbg !64
  %659 = fpext <2 x bfloat> %527 to <2 x float>, !dbg !52
  %660 = fsub <2 x float> %659, %611, !dbg !53
  %661 = fpext <2 x bfloat> %543 to <2 x float>, !dbg !54
  %662 = insertelement <2 x i32> poison, i32 %559, i64 0, !dbg !45
  %663 = insertelement <2 x i32> %662, i32 %558, i64 1, !dbg !45
  %664 = bitcast <2 x i32> %663 to <2 x float>, !dbg !45
  %665 = fpext <2 x bfloat> %575 to <2 x float>, !dbg !55
  %666 = insertelement <2 x i32> poison, i32 %591, i64 0, !dbg !41
  %667 = insertelement <2 x i32> %666, i32 %590, i64 1, !dbg !41
  %668 = bitcast <2 x i32> %667 to <2 x float>, !dbg !41
  %669 = fmul <2 x float> %660, %622, !dbg !56
  %670 = fadd <2 x float> %668, %665, !dbg !57
  %671 = fadd <2 x float> %670, splat (float 1.000000e+00), !dbg !58
  %672 = fmul <2 x float> %671, %669, !dbg !59
  %673 = fadd <2 x float> %664, %661, !dbg !60
  %674 = fadd <2 x float> %673, %672, !dbg !61
  %675 = extractelement <2 x float> %674, i64 0, !dbg !62
  %676 = select i1 %34, float %675, float 0x7FF0000000000000, !dbg !63
  %677 = extractelement <2 x float> %674, i64 1, !dbg !62
  %678 = select i1 %34, float %677, float 0x7FF0000000000000, !dbg !63
  %679 = select i1 %34, float %675, float 0xFFF0000000000000, !dbg !62
  %680 = select i1 %34, float %677, float 0xFFF0000000000000, !dbg !62
  %681 = fptrunc <2 x float> %674 to <2 x bfloat>, !dbg !64
  %682 = fpext <2 x bfloat> %525 to <2 x float>, !dbg !52
  %683 = fsub <2 x float> %682, %611, !dbg !53
  %684 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !54
  %685 = insertelement <2 x i32> poison, i32 %557, i64 0, !dbg !45
  %686 = insertelement <2 x i32> %685, i32 %556, i64 1, !dbg !45
  %687 = bitcast <2 x i32> %686 to <2 x float>, !dbg !45
  %688 = fpext <2 x bfloat> %573 to <2 x float>, !dbg !55
  %689 = insertelement <2 x i32> poison, i32 %589, i64 0, !dbg !41
  %690 = insertelement <2 x i32> %689, i32 %588, i64 1, !dbg !41
  %691 = bitcast <2 x i32> %690 to <2 x float>, !dbg !41
  %692 = fmul <2 x float> %683, %622, !dbg !56
  %693 = fadd <2 x float> %691, %688, !dbg !57
  %694 = fadd <2 x float> %693, splat (float 1.000000e+00), !dbg !58
  %695 = fmul <2 x float> %694, %692, !dbg !59
  %696 = fadd <2 x float> %687, %684, !dbg !60
  %697 = fadd <2 x float> %696, %695, !dbg !61
  %698 = extractelement <2 x float> %697, i64 0, !dbg !62
  %699 = select i1 %34, float %698, float 0x7FF0000000000000, !dbg !63
  %700 = extractelement <2 x float> %697, i64 1, !dbg !62
  %701 = select i1 %34, float %700, float 0x7FF0000000000000, !dbg !63
  %702 = select i1 %34, float %698, float 0xFFF0000000000000, !dbg !62
  %703 = select i1 %34, float %700, float 0xFFF0000000000000, !dbg !62
  %704 = fptrunc <2 x float> %697 to <2 x bfloat>, !dbg !64
  %705 = fpext <2 x bfloat> %523 to <2 x float>, !dbg !52
  %706 = fsub <2 x float> %705, %611, !dbg !53
  %707 = fpext <2 x bfloat> %539 to <2 x float>, !dbg !54
  %708 = insertelement <2 x i32> poison, i32 %555, i64 0, !dbg !45
  %709 = insertelement <2 x i32> %708, i32 %554, i64 1, !dbg !45
  %710 = bitcast <2 x i32> %709 to <2 x float>, !dbg !45
  %711 = fpext <2 x bfloat> %571 to <2 x float>, !dbg !55
  %712 = insertelement <2 x i32> poison, i32 %587, i64 0, !dbg !41
  %713 = insertelement <2 x i32> %712, i32 %586, i64 1, !dbg !41
  %714 = bitcast <2 x i32> %713 to <2 x float>, !dbg !41
  %715 = fmul <2 x float> %706, %622, !dbg !56
  %716 = fadd <2 x float> %714, %711, !dbg !57
  %717 = fadd <2 x float> %716, splat (float 1.000000e+00), !dbg !58
  %718 = fmul <2 x float> %717, %715, !dbg !59
  %719 = fadd <2 x float> %710, %707, !dbg !60
  %720 = fadd <2 x float> %719, %718, !dbg !61
  %721 = extractelement <2 x float> %720, i64 0, !dbg !62
  %722 = select i1 %34, float %721, float 0x7FF0000000000000, !dbg !63
  %723 = extractelement <2 x float> %720, i64 1, !dbg !62
  %724 = select i1 %34, float %723, float 0x7FF0000000000000, !dbg !63
  %725 = select i1 %34, float %721, float 0xFFF0000000000000, !dbg !62
  %726 = select i1 %34, float %723, float 0xFFF0000000000000, !dbg !62
  %727 = fptrunc <2 x float> %720 to <2 x bfloat>, !dbg !64
  %728 = fpext <2 x bfloat> %521 to <2 x float>, !dbg !52
  %729 = fsub <2 x float> %728, %611, !dbg !53
  %730 = fpext <2 x bfloat> %537 to <2 x float>, !dbg !54
  %731 = insertelement <2 x i32> poison, i32 %553, i64 0, !dbg !45
  %732 = insertelement <2 x i32> %731, i32 %552, i64 1, !dbg !45
  %733 = bitcast <2 x i32> %732 to <2 x float>, !dbg !45
  %734 = fpext <2 x bfloat> %569 to <2 x float>, !dbg !55
  %735 = insertelement <2 x i32> poison, i32 %585, i64 0, !dbg !41
  %736 = insertelement <2 x i32> %735, i32 %584, i64 1, !dbg !41
  %737 = bitcast <2 x i32> %736 to <2 x float>, !dbg !41
  %738 = fmul <2 x float> %729, %622, !dbg !56
  %739 = fadd <2 x float> %737, %734, !dbg !57
  %740 = fadd <2 x float> %739, splat (float 1.000000e+00), !dbg !58
  %741 = fmul <2 x float> %740, %738, !dbg !59
  %742 = fadd <2 x float> %733, %730, !dbg !60
  %743 = fadd <2 x float> %742, %741, !dbg !61
  %744 = extractelement <2 x float> %743, i64 0, !dbg !62
  %745 = select i1 %34, float %744, float 0x7FF0000000000000, !dbg !63
  %746 = extractelement <2 x float> %743, i64 1, !dbg !62
  %747 = select i1 %34, float %746, float 0x7FF0000000000000, !dbg !63
  %748 = select i1 %34, float %744, float 0xFFF0000000000000, !dbg !62
  %749 = select i1 %34, float %746, float 0xFFF0000000000000, !dbg !62
  %750 = fptrunc <2 x float> %743 to <2 x bfloat>, !dbg !64
  %751 = fpext <2 x bfloat> %519 to <2 x float>, !dbg !52
  %752 = fsub <2 x float> %751, %611, !dbg !53
  %753 = fpext <2 x bfloat> %535 to <2 x float>, !dbg !54
  %754 = insertelement <2 x i32> poison, i32 %551, i64 0, !dbg !45
  %755 = insertelement <2 x i32> %754, i32 %550, i64 1, !dbg !45
  %756 = bitcast <2 x i32> %755 to <2 x float>, !dbg !45
  %757 = fpext <2 x bfloat> %567 to <2 x float>, !dbg !55
  %758 = insertelement <2 x i32> poison, i32 %583, i64 0, !dbg !41
  %759 = insertelement <2 x i32> %758, i32 %582, i64 1, !dbg !41
  %760 = bitcast <2 x i32> %759 to <2 x float>, !dbg !41
  %761 = fmul <2 x float> %752, %622, !dbg !56
  %762 = fadd <2 x float> %760, %757, !dbg !57
  %763 = fadd <2 x float> %762, splat (float 1.000000e+00), !dbg !58
  %764 = fmul <2 x float> %763, %761, !dbg !59
  %765 = fadd <2 x float> %756, %753, !dbg !60
  %766 = fadd <2 x float> %765, %764, !dbg !61
  %767 = extractelement <2 x float> %766, i64 0, !dbg !62
  %768 = select i1 %34, float %767, float 0x7FF0000000000000, !dbg !63
  %769 = extractelement <2 x float> %766, i64 1, !dbg !62
  %770 = select i1 %34, float %769, float 0x7FF0000000000000, !dbg !63
  %771 = select i1 %34, float %767, float 0xFFF0000000000000, !dbg !62
  %772 = select i1 %34, float %769, float 0xFFF0000000000000, !dbg !62
  %773 = fptrunc <2 x float> %766 to <2 x bfloat>, !dbg !64
  %774 = fpext <2 x bfloat> %517 to <2 x float>, !dbg !52
  %775 = fsub <2 x float> %774, %611, !dbg !53
  %776 = fpext <2 x bfloat> %533 to <2 x float>, !dbg !54
  %777 = insertelement <2 x i32> poison, i32 %549, i64 0, !dbg !45
  %778 = insertelement <2 x i32> %777, i32 %548, i64 1, !dbg !45
  %779 = bitcast <2 x i32> %778 to <2 x float>, !dbg !45
  %780 = fpext <2 x bfloat> %565 to <2 x float>, !dbg !55
  %781 = insertelement <2 x i32> poison, i32 %581, i64 0, !dbg !41
  %782 = insertelement <2 x i32> %781, i32 %580, i64 1, !dbg !41
  %783 = bitcast <2 x i32> %782 to <2 x float>, !dbg !41
  %784 = fmul <2 x float> %775, %622, !dbg !56
  %785 = fadd <2 x float> %783, %780, !dbg !57
  %786 = fadd <2 x float> %785, splat (float 1.000000e+00), !dbg !58
  %787 = fmul <2 x float> %786, %784, !dbg !59
  %788 = fadd <2 x float> %779, %776, !dbg !60
  %789 = fadd <2 x float> %788, %787, !dbg !61
  %790 = extractelement <2 x float> %789, i64 0, !dbg !62
  %791 = select i1 %34, float %790, float 0x7FF0000000000000, !dbg !63
  %792 = extractelement <2 x float> %789, i64 1, !dbg !62
  %793 = select i1 %34, float %792, float 0x7FF0000000000000, !dbg !63
  %794 = select i1 %34, float %790, float 0xFFF0000000000000, !dbg !62
  %795 = select i1 %34, float %792, float 0xFFF0000000000000, !dbg !62
  %796 = fptrunc <2 x float> %789 to <2 x bfloat>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %797 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22, !dbg !64
  %798 = bitcast <2 x bfloat> %635 to i32, !dbg !64
  %799 = bitcast <2 x bfloat> %658 to i32, !dbg !64
  %800 = bitcast <2 x bfloat> %681 to i32, !dbg !64
  %801 = bitcast <2 x bfloat> %704 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %797, i32 %798, i32 %799, i32 %800, i32 %801, i1 true) #5, !dbg !64
  %802 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %24, !dbg !64
  %803 = bitcast <2 x bfloat> %727 to i32, !dbg !64
  %804 = bitcast <2 x bfloat> %750 to i32, !dbg !64
  %805 = bitcast <2 x bfloat> %773 to i32, !dbg !64
  %806 = bitcast <2 x bfloat> %796 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %802, i32 %803, i32 %804, i32 %805, i32 %806, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %807 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %597, !dbg !64
  %808 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %598, !dbg !64
  %809 = load <4 x i32>, ptr addrspace(3) %808, align 16, !dbg !64
  %.extract = load i32, ptr addrspace(3) %807, align 16, !dbg !64
  %810 = getelementptr inbounds nuw i8, ptr addrspace(3) %807, i32 4, !dbg !64
  %.extract70 = load i32, ptr addrspace(3) %810, align 4, !dbg !64
  %811 = getelementptr inbounds nuw i8, ptr addrspace(3) %807, i32 8, !dbg !64
  %.extract72 = load i32, ptr addrspace(3) %811, align 8, !dbg !64
  %812 = getelementptr inbounds nuw i8, ptr addrspace(3) %807, i32 12, !dbg !64
  %.extract74 = load i32, ptr addrspace(3) %812, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract70, i32 %.extract72, i32 %.extract74, ptr addrspace(1) %604, i1 %17) #5, !dbg !64
  %.extract76 = extractelement <4 x i32> %809, i64 0, !dbg !64
  %.extract78 = extractelement <4 x i32> %809, i64 1, !dbg !64
  %.extract80 = extractelement <4 x i32> %809, i64 2, !dbg !64
  %.extract82 = extractelement <4 x i32> %809, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract76, i32 %.extract78, i32 %.extract80, i32 %.extract82, ptr addrspace(1) %606, i1 %600) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %813 = fcmp olt float %630, %632, !dbg !67
  %814 = fcmp uno float %630, 0.000000e+00, !dbg !68
  %815 = or i1 %813, %814, !dbg !69
  %816 = select i1 %815, float %630, float %632, !dbg !70
  %817 = fcmp olt float %816, %653, !dbg !67
  %818 = fcmp uno float %816, 0.000000e+00, !dbg !68
  %819 = or i1 %817, %818, !dbg !69
  %820 = select i1 %819, float %816, float %653, !dbg !70
  %821 = fcmp olt float %820, %655, !dbg !67
  %822 = fcmp uno float %820, 0.000000e+00, !dbg !68
  %823 = or i1 %821, %822, !dbg !69
  %824 = select i1 %823, float %820, float %655, !dbg !70
  %825 = fcmp olt float %824, %676, !dbg !67
  %826 = fcmp uno float %824, 0.000000e+00, !dbg !68
  %827 = or i1 %825, %826, !dbg !69
  %828 = select i1 %827, float %824, float %676, !dbg !70
  %829 = fcmp olt float %828, %678, !dbg !67
  %830 = fcmp uno float %828, 0.000000e+00, !dbg !68
  %831 = or i1 %829, %830, !dbg !69
  %832 = select i1 %831, float %828, float %678, !dbg !70
  %833 = fcmp olt float %832, %699, !dbg !67
  %834 = fcmp uno float %832, 0.000000e+00, !dbg !68
  %835 = or i1 %833, %834, !dbg !69
  %836 = select i1 %835, float %832, float %699, !dbg !70
  %837 = fcmp olt float %836, %701, !dbg !67
  %838 = fcmp uno float %836, 0.000000e+00, !dbg !68
  %839 = or i1 %837, %838, !dbg !69
  %840 = select i1 %839, float %836, float %701, !dbg !70
  %841 = fcmp olt float %840, %722, !dbg !67
  %842 = fcmp uno float %840, 0.000000e+00, !dbg !68
  %843 = or i1 %841, %842, !dbg !69
  %844 = select i1 %843, float %840, float %722, !dbg !70
  %845 = fcmp olt float %844, %724, !dbg !67
  %846 = fcmp uno float %844, 0.000000e+00, !dbg !68
  %847 = or i1 %845, %846, !dbg !69
  %848 = select i1 %847, float %844, float %724, !dbg !70
  %849 = fcmp olt float %848, %745, !dbg !67
  %850 = fcmp uno float %848, 0.000000e+00, !dbg !68
  %851 = or i1 %849, %850, !dbg !69
  %852 = select i1 %851, float %848, float %745, !dbg !70
  %853 = fcmp olt float %852, %747, !dbg !67
  %854 = fcmp uno float %852, 0.000000e+00, !dbg !68
  %855 = or i1 %853, %854, !dbg !69
  %856 = select i1 %855, float %852, float %747, !dbg !70
  %857 = fcmp olt float %856, %768, !dbg !67
  %858 = fcmp uno float %856, 0.000000e+00, !dbg !68
  %859 = or i1 %857, %858, !dbg !69
  %860 = select i1 %859, float %856, float %768, !dbg !70
  %861 = fcmp olt float %860, %770, !dbg !67
  %862 = fcmp uno float %860, 0.000000e+00, !dbg !68
  %863 = or i1 %861, %862, !dbg !69
  %864 = select i1 %863, float %860, float %770, !dbg !70
  %865 = fcmp olt float %864, %791, !dbg !67
  %866 = fcmp uno float %864, 0.000000e+00, !dbg !68
  %867 = or i1 %865, %866, !dbg !69
  %868 = select i1 %867, float %864, float %791, !dbg !70
  %869 = fcmp olt float %868, %793, !dbg !67
  %870 = fcmp uno float %868, 0.000000e+00, !dbg !68
  %871 = or i1 %869, %870, !dbg !69
  %872 = select i1 %871, float %868, float %793, !dbg !70
  %873 = bitcast float %872 to i32, !dbg !65
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 16, i32 31), !dbg !65
  %875 = bitcast i32 %874 to float, !dbg !65
  %876 = fcmp olt float %872, %875, !dbg !67
  %877 = fcmp uno float %872, 0.000000e+00, !dbg !68
  %878 = or i1 %876, %877, !dbg !69
  %879 = select i1 %878, float %872, float %875, !dbg !70
  %880 = bitcast float %879 to i32, !dbg !65
  %881 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %880, i32 8, i32 31), !dbg !65
  %882 = bitcast i32 %881 to float, !dbg !65
  %883 = fcmp olt float %879, %882, !dbg !67
  %884 = fcmp uno float %879, 0.000000e+00, !dbg !68
  %885 = or i1 %883, %884, !dbg !69
  %886 = select i1 %885, float %879, float %882, !dbg !70
  %887 = bitcast float %886 to i32, !dbg !65
  %888 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %887, i32 4, i32 31), !dbg !65
  %889 = bitcast i32 %888 to float, !dbg !65
  %890 = fcmp olt float %886, %889, !dbg !67
  %891 = fcmp uno float %886, 0.000000e+00, !dbg !68
  %892 = or i1 %890, %891, !dbg !69
  %893 = select i1 %892, float %886, float %889, !dbg !70
  %894 = bitcast float %893 to i32, !dbg !65
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 2, i32 31), !dbg !65
  %896 = bitcast i32 %895 to float, !dbg !65
  %897 = fcmp olt float %893, %896, !dbg !67
  %898 = fcmp uno float %893, 0.000000e+00, !dbg !68
  %899 = or i1 %897, %898, !dbg !69
  %900 = select i1 %899, float %893, float %896, !dbg !70
  %901 = bitcast float %900 to i32, !dbg !65
  %902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %901, i32 1, i32 31), !dbg !65
  %903 = bitcast i32 %902 to float, !dbg !65
  %904 = fcmp olt float %900, %903, !dbg !67
  %905 = fcmp uno float %900, 0.000000e+00, !dbg !68
  %906 = or i1 %904, %905, !dbg !69
  %907 = select i1 %906, i32 %901, i32 %902, !dbg !70
  %908 = insertelement <1 x i32> poison, i32 %907, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %908, i1 %375) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %909 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %383, i1 %382) #5, !dbg !65
  %910 = bitcast i32 %909 to float, !dbg !65
  %911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %909, i32 4, i32 31), !dbg !65
  %912 = bitcast i32 %911 to float, !dbg !65
  %913 = fcmp olt float %910, %912, !dbg !67
  %914 = fcmp uno float %910, 0.000000e+00, !dbg !68
  %915 = or i1 %914, %913, !dbg !69
  %916 = select i1 %915, float %910, float %912, !dbg !70
  %917 = bitcast float %916 to i32, !dbg !65
  %918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %917, i32 2, i32 31), !dbg !65
  %919 = bitcast i32 %918 to float, !dbg !65
  %920 = fcmp olt float %916, %919, !dbg !67
  %921 = fcmp uno float %916, 0.000000e+00, !dbg !68
  %922 = or i1 %920, %921, !dbg !69
  %923 = select i1 %922, float %916, float %919, !dbg !70
  %924 = bitcast float %923 to i32, !dbg !65
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 1, i32 31), !dbg !65
  %926 = bitcast i32 %925 to float, !dbg !65
  %927 = fcmp olt float %923, %926, !dbg !67
  %928 = fcmp uno float %923, 0.000000e+00, !dbg !68
  %929 = or i1 %927, %928, !dbg !69
  %930 = select i1 %929, i32 %924, i32 %925, !dbg !70
  %931 = insertelement <1 x i32> poison, i32 %930, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %931, i1 %454) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %932 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %933 = fcmp ogt float %633, %634, !dbg !73
  %934 = fcmp uno float %633, 0.000000e+00, !dbg !74
  %935 = or i1 %933, %934, !dbg !75
  %936 = select i1 %935, float %633, float %634, !dbg !76
  %937 = fcmp ogt float %936, %656, !dbg !73
  %938 = fcmp uno float %936, 0.000000e+00, !dbg !74
  %939 = or i1 %937, %938, !dbg !75
  %940 = select i1 %939, float %936, float %656, !dbg !76
  %941 = fcmp ogt float %940, %657, !dbg !73
  %942 = fcmp uno float %940, 0.000000e+00, !dbg !74
  %943 = or i1 %941, %942, !dbg !75
  %944 = select i1 %943, float %940, float %657, !dbg !76
  %945 = fcmp ogt float %944, %679, !dbg !73
  %946 = fcmp uno float %944, 0.000000e+00, !dbg !74
  %947 = or i1 %945, %946, !dbg !75
  %948 = select i1 %947, float %944, float %679, !dbg !76
  %949 = fcmp ogt float %948, %680, !dbg !73
  %950 = fcmp uno float %948, 0.000000e+00, !dbg !74
  %951 = or i1 %949, %950, !dbg !75
  %952 = select i1 %951, float %948, float %680, !dbg !76
  %953 = fcmp ogt float %952, %702, !dbg !73
  %954 = fcmp uno float %952, 0.000000e+00, !dbg !74
  %955 = or i1 %953, %954, !dbg !75
  %956 = select i1 %955, float %952, float %702, !dbg !76
  %957 = fcmp ogt float %956, %703, !dbg !73
  %958 = fcmp uno float %956, 0.000000e+00, !dbg !74
  %959 = or i1 %957, %958, !dbg !75
  %960 = select i1 %959, float %956, float %703, !dbg !76
  %961 = fcmp ogt float %960, %725, !dbg !73
  %962 = fcmp uno float %960, 0.000000e+00, !dbg !74
  %963 = or i1 %961, %962, !dbg !75
  %964 = select i1 %963, float %960, float %725, !dbg !76
  %965 = fcmp ogt float %964, %726, !dbg !73
  %966 = fcmp uno float %964, 0.000000e+00, !dbg !74
  %967 = or i1 %965, %966, !dbg !75
  %968 = select i1 %967, float %964, float %726, !dbg !76
  %969 = fcmp ogt float %968, %748, !dbg !73
  %970 = fcmp uno float %968, 0.000000e+00, !dbg !74
  %971 = or i1 %969, %970, !dbg !75
  %972 = select i1 %971, float %968, float %748, !dbg !76
  %973 = fcmp ogt float %972, %749, !dbg !73
  %974 = fcmp uno float %972, 0.000000e+00, !dbg !74
  %975 = or i1 %973, %974, !dbg !75
  %976 = select i1 %975, float %972, float %749, !dbg !76
  %977 = fcmp ogt float %976, %771, !dbg !73
  %978 = fcmp uno float %976, 0.000000e+00, !dbg !74
  %979 = or i1 %977, %978, !dbg !75
  %980 = select i1 %979, float %976, float %771, !dbg !76
  %981 = fcmp ogt float %980, %772, !dbg !73
  %982 = fcmp uno float %980, 0.000000e+00, !dbg !74
  %983 = or i1 %981, %982, !dbg !75
  %984 = select i1 %983, float %980, float %772, !dbg !76
  %985 = fcmp ogt float %984, %794, !dbg !73
  %986 = fcmp uno float %984, 0.000000e+00, !dbg !74
  %987 = or i1 %985, %986, !dbg !75
  %988 = select i1 %987, float %984, float %794, !dbg !76
  %989 = fcmp ogt float %988, %795, !dbg !73
  %990 = fcmp uno float %988, 0.000000e+00, !dbg !74
  %991 = or i1 %989, %990, !dbg !75
  %992 = select i1 %991, float %988, float %795, !dbg !76
  %993 = bitcast float %992 to i32, !dbg !71
  %994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %993, i32 16, i32 31), !dbg !71
  %995 = bitcast i32 %994 to float, !dbg !71
  %996 = fcmp ogt float %992, %995, !dbg !73
  %997 = fcmp uno float %992, 0.000000e+00, !dbg !74
  %998 = or i1 %996, %997, !dbg !75
  %999 = select i1 %998, float %992, float %995, !dbg !76
  %1000 = bitcast float %999 to i32, !dbg !71
  %1001 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1000, i32 8, i32 31), !dbg !71
  %1002 = bitcast i32 %1001 to float, !dbg !71
  %1003 = fcmp ogt float %999, %1002, !dbg !73
  %1004 = fcmp uno float %999, 0.000000e+00, !dbg !74
  %1005 = or i1 %1003, %1004, !dbg !75
  %1006 = select i1 %1005, float %999, float %1002, !dbg !76
  %1007 = bitcast float %1006 to i32, !dbg !71
  %1008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1007, i32 4, i32 31), !dbg !71
  %1009 = bitcast i32 %1008 to float, !dbg !71
  %1010 = fcmp ogt float %1006, %1009, !dbg !73
  %1011 = fcmp uno float %1006, 0.000000e+00, !dbg !74
  %1012 = or i1 %1010, %1011, !dbg !75
  %1013 = select i1 %1012, float %1006, float %1009, !dbg !76
  %1014 = bitcast float %1013 to i32, !dbg !71
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 2, i32 31), !dbg !71
  %1016 = bitcast i32 %1015 to float, !dbg !71
  %1017 = fcmp ogt float %1013, %1016, !dbg !73
  %1018 = fcmp uno float %1013, 0.000000e+00, !dbg !74
  %1019 = or i1 %1017, %1018, !dbg !75
  %1020 = select i1 %1019, float %1013, float %1016, !dbg !76
  %1021 = bitcast float %1020 to i32, !dbg !71
  %1022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 1, i32 31), !dbg !71
  %1023 = bitcast i32 %1022 to float, !dbg !71
  %1024 = fcmp ogt float %1020, %1023, !dbg !73
  %1025 = fcmp uno float %1020, 0.000000e+00, !dbg !74
  %1026 = or i1 %1024, %1025, !dbg !75
  %1027 = select i1 %1026, i32 %1021, i32 %1022, !dbg !76
  %1028 = insertelement <1 x i32> poison, i32 %1027, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %1028, i1 %375) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1029 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %383, i1 %382) #5, !dbg !71
  %1030 = bitcast i32 %1029 to float, !dbg !71
  %1031 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 4, i32 31), !dbg !71
  %1032 = bitcast i32 %1031 to float, !dbg !71
  %1033 = fcmp ogt float %1030, %1032, !dbg !73
  %1034 = fcmp uno float %1030, 0.000000e+00, !dbg !74
  %1035 = or i1 %1034, %1033, !dbg !75
  %1036 = select i1 %1035, float %1030, float %1032, !dbg !76
  %1037 = bitcast float %1036 to i32, !dbg !71
  %1038 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1037, i32 2, i32 31), !dbg !71
  %1039 = bitcast i32 %1038 to float, !dbg !71
  %1040 = fcmp ogt float %1036, %1039, !dbg !73
  %1041 = fcmp uno float %1036, 0.000000e+00, !dbg !74
  %1042 = or i1 %1040, %1041, !dbg !75
  %1043 = select i1 %1042, float %1036, float %1039, !dbg !76
  %1044 = bitcast float %1043 to i32, !dbg !71
  %1045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1044, i32 1, i32 31), !dbg !71
  %1046 = bitcast i32 %1045 to float, !dbg !71
  %1047 = fcmp ogt float %1043, %1046, !dbg !73
  %1048 = fcmp uno float %1043, 0.000000e+00, !dbg !74
  %1049 = or i1 %1047, %1048, !dbg !75
  %1050 = select i1 %1049, i32 %1044, i32 %1045, !dbg !76
  %1051 = insertelement <1 x i32> poison, i32 %1050, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %1051, i1 %454) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %1052 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %1053 = sext i32 %16 to i64, !dbg !77
  %1054 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1053, !dbg !77
  %1055 = fptrunc float %932 to bfloat, !dbg !78
  %1056 = and i32 %18, 255, !dbg !78
  %1057 = icmp eq i32 %1056, 0, !dbg !78
  %1058 = bitcast bfloat %1055 to i16, !dbg !78
  %1059 = and i1 %17, %1057, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1058, ptr addrspace(1) %1054, i1 %1059) #5, !dbg !78
  %1060 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1053, !dbg !79
  %1061 = fptrunc float %1052 to bfloat, !dbg !80
  %1062 = bitcast bfloat %1061 to i16, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1062, ptr addrspace(1) %1060, i1 %1059) #5, !dbg !80
  %1063 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1053, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1058, ptr addrspace(1) %1063, i1 %1059) #5, !dbg !82
  %1064 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1053, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1062, ptr addrspace(1) %1064, i1 %1059) #5, !dbg !84
  %1065 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1053, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1058, ptr addrspace(1) %1065, i1 %1059) #5, !dbg !86
  %1066 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1053, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1062, ptr addrspace(1) %1066, i1 %1059) #5, !dbg !88
  %1067 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %607, i1 %34) #5, !dbg !89
  %1068 = extractvalue { i32, i32, i32, i32 } %1067, 0, !dbg !89
  %1069 = bitcast i32 %1068 to <2 x bfloat>, !dbg !89
  %1070 = extractvalue { i32, i32, i32, i32 } %1067, 1, !dbg !89
  %1071 = bitcast i32 %1070 to <2 x bfloat>, !dbg !89
  %1072 = extractvalue { i32, i32, i32, i32 } %1067, 2, !dbg !89
  %1073 = bitcast i32 %1072 to <2 x bfloat>, !dbg !89
  %1074 = extractvalue { i32, i32, i32, i32 } %1067, 3, !dbg !89
  %1075 = bitcast i32 %1074 to <2 x bfloat>, !dbg !89
  %1076 = extractelement <2 x bfloat> %1069, i64 0, !dbg !89
  %1077 = extractelement <2 x bfloat> %1069, i64 1, !dbg !89
  %1078 = extractelement <2 x bfloat> %1071, i64 0, !dbg !89
  %1079 = extractelement <2 x bfloat> %1071, i64 1, !dbg !89
  %1080 = extractelement <2 x bfloat> %1073, i64 0, !dbg !89
  %1081 = extractelement <2 x bfloat> %1073, i64 1, !dbg !89
  %1082 = extractelement <2 x bfloat> %1075, i64 0, !dbg !89
  %1083 = extractelement <2 x bfloat> %1075, i64 1, !dbg !89
  %1084 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %608, i1 %34) #5, !dbg !89
  %1085 = extractvalue { i32, i32, i32, i32 } %1084, 0, !dbg !89
  %1086 = bitcast i32 %1085 to <2 x bfloat>, !dbg !89
  %1087 = extractvalue { i32, i32, i32, i32 } %1084, 1, !dbg !89
  %1088 = bitcast i32 %1087 to <2 x bfloat>, !dbg !89
  %1089 = extractvalue { i32, i32, i32, i32 } %1084, 2, !dbg !89
  %1090 = bitcast i32 %1089 to <2 x bfloat>, !dbg !89
  %1091 = extractvalue { i32, i32, i32, i32 } %1084, 3, !dbg !89
  %1092 = bitcast i32 %1091 to <2 x bfloat>, !dbg !89
  %1093 = extractelement <2 x bfloat> %1086, i64 0, !dbg !89
  %1094 = extractelement <2 x bfloat> %1086, i64 1, !dbg !89
  %1095 = extractelement <2 x bfloat> %1088, i64 0, !dbg !89
  %1096 = extractelement <2 x bfloat> %1088, i64 1, !dbg !89
  %1097 = extractelement <2 x bfloat> %1090, i64 0, !dbg !89
  %1098 = extractelement <2 x bfloat> %1090, i64 1, !dbg !89
  %1099 = extractelement <2 x bfloat> %1092, i64 0, !dbg !89
  %1100 = extractelement <2 x bfloat> %1092, i64 1, !dbg !89
  %1101 = fpext bfloat %1076 to float, !dbg !90
  %1102 = fpext bfloat %1077 to float, !dbg !90
  %1103 = fpext bfloat %1078 to float, !dbg !90
  %1104 = fpext bfloat %1079 to float, !dbg !90
  %1105 = fpext bfloat %1080 to float, !dbg !90
  %1106 = fpext bfloat %1081 to float, !dbg !90
  %1107 = fpext bfloat %1082 to float, !dbg !90
  %1108 = fpext bfloat %1083 to float, !dbg !90
  %1109 = fpext bfloat %1093 to float, !dbg !90
  %1110 = fpext bfloat %1094 to float, !dbg !90
  %1111 = fpext bfloat %1095 to float, !dbg !90
  %1112 = fpext bfloat %1096 to float, !dbg !90
  %1113 = fpext bfloat %1097 to float, !dbg !90
  %1114 = fpext bfloat %1098 to float, !dbg !90
  %1115 = fpext bfloat %1099 to float, !dbg !90
  %1116 = fpext bfloat %1100 to float, !dbg !90
  %.inv = fcmp oge float %932, 0.000000e+00, !dbg !91
  %1117 = select i1 %.inv, float 0.000000e+00, float %932, !dbg !91
  %1118 = fsub float 0.000000e+00, %1117, !dbg !93
  %.inv23 = fcmp ole float %1052, 0.000000e+00, !dbg !94
  %1119 = select i1 %.inv23, float 0.000000e+00, float %1052, !dbg !94
  %1120 = fcmp ogt float %1118, %1119, !dbg !96
  %1121 = fcmp uno float %1118, 0.000000e+00, !dbg !98
  %1122 = or i1 %1121, %1120, !dbg !99
  %1123 = select i1 %1122, float %1118, float %1119, !dbg !100
  %1124 = fmul float %1123, 0x3F80204080000000, !dbg !101
  %1125 = fcmp ogt float %1124, 0x3EE4F8B580000000, !dbg !102
  %1126 = fcmp uno float %1124, 0.000000e+00, !dbg !104
  %1127 = or i1 %1125, %1126, !dbg !105
  %1128 = select i1 %1127, float %1124, float 0x3EE4F8B580000000, !dbg !106
  %1129 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1128), !dbg !107
  %1130 = fmul float %1129, %1101, !dbg !108
  %1131 = fmul float %1129, %1102, !dbg !108
  %1132 = fmul float %1129, %1103, !dbg !108
  %1133 = fmul float %1129, %1104, !dbg !108
  %1134 = fmul float %1129, %1105, !dbg !108
  %1135 = fmul float %1129, %1106, !dbg !108
  %1136 = fmul float %1129, %1107, !dbg !108
  %1137 = fmul float %1129, %1108, !dbg !108
  %1138 = fmul float %1129, %1109, !dbg !108
  %1139 = fmul float %1129, %1110, !dbg !108
  %1140 = fmul float %1129, %1111, !dbg !108
  %1141 = fmul float %1129, %1112, !dbg !108
  %1142 = fmul float %1129, %1113, !dbg !108
  %1143 = fmul float %1129, %1114, !dbg !108
  %1144 = fmul float %1129, %1115, !dbg !108
  %1145 = fmul float %1129, %1116, !dbg !108
  %1146 = tail call float @llvm.nvvm.round.f(float %1130) #5, !dbg !109
  %1147 = tail call float @llvm.nvvm.round.f(float %1131) #5, !dbg !109
  %1148 = tail call float @llvm.nvvm.round.f(float %1132) #5, !dbg !109
  %1149 = tail call float @llvm.nvvm.round.f(float %1133) #5, !dbg !109
  %1150 = tail call float @llvm.nvvm.round.f(float %1134) #5, !dbg !109
  %1151 = tail call float @llvm.nvvm.round.f(float %1135) #5, !dbg !109
  %1152 = tail call float @llvm.nvvm.round.f(float %1136) #5, !dbg !109
  %1153 = tail call float @llvm.nvvm.round.f(float %1137) #5, !dbg !109
  %1154 = tail call float @llvm.nvvm.round.f(float %1138) #5, !dbg !109
  %1155 = tail call float @llvm.nvvm.round.f(float %1139) #5, !dbg !109
  %1156 = tail call float @llvm.nvvm.round.f(float %1140) #5, !dbg !109
  %1157 = tail call float @llvm.nvvm.round.f(float %1141) #5, !dbg !109
  %1158 = tail call float @llvm.nvvm.round.f(float %1142) #5, !dbg !109
  %1159 = tail call float @llvm.nvvm.round.f(float %1143) #5, !dbg !109
  %1160 = tail call float @llvm.nvvm.round.f(float %1144) #5, !dbg !109
  %1161 = tail call float @llvm.nvvm.round.f(float %1145) #5, !dbg !109
  %1162 = insertelement <4 x float> poison, float %1146, i64 0, !dbg !110
  %1163 = insertelement <4 x float> %1162, float %1147, i64 1, !dbg !110
  %1164 = insertelement <4 x float> %1163, float %1148, i64 2, !dbg !110
  %1165 = insertelement <4 x float> %1164, float %1149, i64 3, !dbg !110
  %1166 = fcmp ogt <4 x float> %1165, splat (float -1.270000e+02), !dbg !110
  %1167 = fcmp uno <4 x float> %1165, zeroinitializer, !dbg !112
  %1168 = or <4 x i1> %1166, %1167, !dbg !113
  %1169 = select <4 x i1> %1168, <4 x float> %1165, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1170 = fcmp olt <4 x float> %1169, splat (float 1.270000e+02), !dbg !115
  %1171 = fcmp uno <4 x float> %1169, zeroinitializer, !dbg !117
  %1172 = or <4 x i1> %1170, %1171, !dbg !118
  %1173 = fptosi <4 x float> %1169 to <4 x i8>, !dbg !119
  %1174 = select <4 x i1> %1172, <4 x i8> %1173, <4 x i8> splat (i8 127), !dbg !120
  %1175 = insertelement <4 x float> poison, float %1150, i64 0, !dbg !110
  %1176 = insertelement <4 x float> %1175, float %1151, i64 1, !dbg !110
  %1177 = insertelement <4 x float> %1176, float %1152, i64 2, !dbg !110
  %1178 = insertelement <4 x float> %1177, float %1153, i64 3, !dbg !110
  %1179 = fcmp ogt <4 x float> %1178, splat (float -1.270000e+02), !dbg !110
  %1180 = fcmp uno <4 x float> %1178, zeroinitializer, !dbg !112
  %1181 = or <4 x i1> %1179, %1180, !dbg !113
  %1182 = select <4 x i1> %1181, <4 x float> %1178, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1183 = fcmp olt <4 x float> %1182, splat (float 1.270000e+02), !dbg !115
  %1184 = fcmp uno <4 x float> %1182, zeroinitializer, !dbg !117
  %1185 = or <4 x i1> %1183, %1184, !dbg !118
  %1186 = fptosi <4 x float> %1182 to <4 x i8>, !dbg !119
  %1187 = select <4 x i1> %1185, <4 x i8> %1186, <4 x i8> splat (i8 127), !dbg !120
  %1188 = insertelement <4 x float> poison, float %1154, i64 0, !dbg !110
  %1189 = insertelement <4 x float> %1188, float %1155, i64 1, !dbg !110
  %1190 = insertelement <4 x float> %1189, float %1156, i64 2, !dbg !110
  %1191 = insertelement <4 x float> %1190, float %1157, i64 3, !dbg !110
  %1192 = fcmp ogt <4 x float> %1191, splat (float -1.270000e+02), !dbg !110
  %1193 = fcmp uno <4 x float> %1191, zeroinitializer, !dbg !112
  %1194 = or <4 x i1> %1192, %1193, !dbg !113
  %1195 = select <4 x i1> %1194, <4 x float> %1191, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1196 = fcmp olt <4 x float> %1195, splat (float 1.270000e+02), !dbg !115
  %1197 = fcmp uno <4 x float> %1195, zeroinitializer, !dbg !117
  %1198 = or <4 x i1> %1196, %1197, !dbg !118
  %1199 = fptosi <4 x float> %1195 to <4 x i8>, !dbg !119
  %1200 = select <4 x i1> %1198, <4 x i8> %1199, <4 x i8> splat (i8 127), !dbg !120
  %1201 = insertelement <4 x float> poison, float %1158, i64 0, !dbg !110
  %1202 = insertelement <4 x float> %1201, float %1159, i64 1, !dbg !110
  %1203 = insertelement <4 x float> %1202, float %1160, i64 2, !dbg !110
  %1204 = insertelement <4 x float> %1203, float %1161, i64 3, !dbg !110
  %1205 = fcmp ogt <4 x float> %1204, splat (float -1.270000e+02), !dbg !110
  %1206 = fcmp uno <4 x float> %1204, zeroinitializer, !dbg !112
  %1207 = or <4 x i1> %1205, %1206, !dbg !113
  %1208 = select <4 x i1> %1207, <4 x float> %1204, <4 x float> splat (float -1.270000e+02), !dbg !114
  %1209 = fcmp olt <4 x float> %1208, splat (float 1.270000e+02), !dbg !115
  %1210 = fcmp uno <4 x float> %1208, zeroinitializer, !dbg !117
  %1211 = or <4 x i1> %1209, %1210, !dbg !118
  %1212 = fptosi <4 x float> %1208 to <4 x i8>, !dbg !119
  %1213 = select <4 x i1> %1211, <4 x i8> %1212, <4 x i8> splat (i8 127), !dbg !120
  %1214 = getelementptr i8, ptr addrspace(1) %10, i64 %30, !dbg !121
  %1215 = bitcast <4 x i8> %1174 to i32, !dbg !122
  %1216 = bitcast <4 x i8> %1187 to i32, !dbg !122
  %1217 = bitcast <4 x i8> %1200 to i32, !dbg !122
  %1218 = bitcast <4 x i8> %1213 to i32, !dbg !122
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1215, i32 %1216, i32 %1217, i32 %1218, ptr addrspace(1) %1214, i1 %34) #5, !dbg !122
  %1219 = getelementptr i8, ptr addrspace(1) %11, i64 %30, !dbg !123
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1215, i32 %1216, i32 %1217, i32 %1218, ptr addrspace(1) %1219, i1 %34) #5, !dbg !124
  %1220 = getelementptr i8, ptr addrspace(1) %12, i64 %30, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1215, i32 %1216, i32 %1217, i32 %1218, ptr addrspace(1) %1220, i1 %34) #5, !dbg !126
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 34, column: 29, scope: !6)
!13 = !DILocation(line: 38, column: 46, scope: !6)
!14 = !DILocation(line: 38, column: 41, scope: !6)
!15 = !DILocation(line: 38, column: 34, scope: !6)
!16 = !DILocation(line: 38, column: 59, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 217, column: 21, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!25 = !DILocation(line: 47, column: 79, scope: !6)
!26 = !DILocation(line: 218, column: 28, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 219, column: 39, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 219, column: 60, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 219, column: 49, scope: !22, inlinedAt: !25)
!30 = !DILocation(line: 221, column: 25, scope: !22, inlinedAt: !25)
!31 = !DILocation(line: 221, column: 17, scope: !22, inlinedAt: !25)
!32 = !DILocation(line: 222, column: 30, scope: !22, inlinedAt: !25)
!33 = !DILocation(line: 222, column: 38, scope: !22, inlinedAt: !25)
!34 = !DILocation(line: 222, column: 49, scope: !22, inlinedAt: !25)
!35 = !DILocation(line: 222, column: 22, scope: !22, inlinedAt: !25)
!36 = !DILocation(line: 222, column: 15, scope: !22, inlinedAt: !25)
!37 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !25)
!38 = !DILocation(line: 59, column: 51, scope: !6)
!39 = !DILocation(line: 60, column: 42, scope: !6)
!40 = !DILocation(line: 60, column: 35, scope: !6)
!41 = !DILocation(line: 60, column: 49, scope: !6)
!42 = !DILocation(line: 61, column: 35, scope: !6)
!43 = !DILocation(line: 61, column: 49, scope: !6)
!44 = !DILocation(line: 62, column: 35, scope: !6)
!45 = !DILocation(line: 62, column: 42, scope: !6)
!46 = !DILocation(line: 63, column: 35, scope: !6)
!47 = !DILocation(line: 63, column: 42, scope: !6)
!48 = !DILocation(line: 67, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 32, scope: !6)
!51 = !DILocation(line: 86, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 113, scope: !6)
!53 = !DILocation(line: 65, column: 24, scope: !6)
!54 = !DILocation(line: 63, column: 95, scope: !6)
!55 = !DILocation(line: 61, column: 102, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 74, column: 24, scope: !6)
!58 = !DILocation(line: 76, column: 24, scope: !6)
!59 = !DILocation(line: 77, column: 24, scope: !6)
!60 = !DILocation(line: 79, column: 24, scope: !6)
!61 = !DILocation(line: 80, column: 24, scope: !6)
!62 = !DILocation(line: 85, column: 50, scope: !6)
!63 = !DILocation(line: 83, column: 50, scope: !6)
!64 = !DILocation(line: 86, column: 53, scope: !6)
!65 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !66)
!66 = !DILocation(line: 87, column: 40, scope: !6)
!67 = !DILocation(line: 94, column: 15, scope: !22, inlinedAt: !66)
!68 = !DILocation(line: 96, column: 21, scope: !22, inlinedAt: !66)
!69 = !DILocation(line: 96, column: 16, scope: !22, inlinedAt: !66)
!70 = !DILocation(line: 97, column: 29, scope: !22, inlinedAt: !66)
!71 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !72)
!72 = !DILocation(line: 88, column: 40, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !22, inlinedAt: !72)
!74 = !DILocation(line: 104, column: 21, scope: !22, inlinedAt: !72)
!75 = !DILocation(line: 104, column: 16, scope: !22, inlinedAt: !72)
!76 = !DILocation(line: 105, column: 29, scope: !22, inlinedAt: !72)
!77 = !DILocation(line: 89, column: 25, scope: !6)
!78 = !DILocation(line: 89, column: 37, scope: !6)
!79 = !DILocation(line: 90, column: 25, scope: !6)
!80 = !DILocation(line: 90, column: 37, scope: !6)
!81 = !DILocation(line: 91, column: 25, scope: !6)
!82 = !DILocation(line: 91, column: 37, scope: !6)
!83 = !DILocation(line: 92, column: 25, scope: !6)
!84 = !DILocation(line: 92, column: 37, scope: !6)
!85 = !DILocation(line: 93, column: 25, scope: !6)
!86 = !DILocation(line: 93, column: 37, scope: !6)
!87 = !DILocation(line: 94, column: 25, scope: !6)
!88 = !DILocation(line: 94, column: 37, scope: !6)
!89 = !DILocation(line: 101, column: 53, scope: !6)
!90 = !DILocation(line: 101, column: 115, scope: !6)
!91 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !92)
!92 = !DILocation(line: 103, column: 46, scope: !6)
!93 = !DILocation(line: 104, column: 17, scope: !6)
!94 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !95)
!95 = !DILocation(line: 105, column: 46, scope: !6)
!96 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !97)
!97 = !DILocation(line: 106, column: 46, scope: !6)
!98 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !97)
!99 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !97)
!100 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !97)
!101 = !DILocation(line: 108, column: 24, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !103)
!103 = !DILocation(line: 111, column: 46, scope: !6)
!104 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !103)
!105 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !103)
!106 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !103)
!107 = !DILocation(line: 114, column: 25, scope: !6)
!108 = !DILocation(line: 117, column: 24, scope: !6)
!109 = !DILocation(line: 118, column: 36, scope: !6)
!110 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !111)
!111 = !DILocation(line: 121, column: 46, scope: !6)
!112 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !111)
!113 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !111)
!114 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !111)
!115 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !116)
!116 = !DILocation(line: 123, column: 46, scope: !6)
!117 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !116)
!118 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !116)
!119 = !DILocation(line: 125, column: 25, scope: !6)
!120 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !116)
!121 = !DILocation(line: 126, column: 29, scope: !6)
!122 = !DILocation(line: 126, column: 53, scope: !6)
!123 = !DILocation(line: 127, column: 30, scope: !6)
!124 = !DILocation(line: 127, column: 54, scope: !6)
!125 = !DILocation(line: 128, column: 30, scope: !6)
!126 = !DILocation(line: 128, column: 54, scope: !6)
!127 = !DILocation(line: 95, column: 4, scope: !6)
