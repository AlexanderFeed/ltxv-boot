; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 2, !dbg !11
  %13 = and i32 %12, 1020, !dbg !11
  %14 = shl i32 %8, 7, !dbg !12
  %15 = and i32 %12, 124
  %invariant.op = or disjoint i32 %14, %15, !dbg !13
  %16 = zext nneg i32 %13 to i64, !dbg !13
  %17 = lshr i32 %13, 7, !dbg !14
  %18 = mul nuw nsw i32 %17, 526336, !dbg !15
  %.reass = add i32 %18, %invariant.op
  %19 = sext i32 %.reass to i64, !dbg !16
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %9) #4, !dbg !17
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !17
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !17
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !17
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !17
  %26 = extractelement <2 x bfloat> %23, i64 0, !dbg !17
  %27 = extractelement <2 x bfloat> %23, i64 1, !dbg !17
  %28 = extractelement <2 x bfloat> %25, i64 0, !dbg !17
  %29 = extractelement <2 x bfloat> %25, i64 1, !dbg !17
  %30 = fpext bfloat %26 to float, !dbg !18
  %31 = fpext bfloat %27 to float, !dbg !18
  %32 = fpext bfloat %28 to float, !dbg !18
  %33 = fpext bfloat %29 to float, !dbg !18
  %34 = select i1 %9, float %30, float 0x7FF0000000000000, !dbg !19
  %35 = select i1 %9, float %31, float 0x7FF0000000000000, !dbg !19
  %36 = select i1 %9, float %32, float 0x7FF0000000000000, !dbg !19
  %37 = select i1 %9, float %30, float 0xFFF0000000000000, !dbg !20
  %38 = select i1 %9, float %31, float 0xFFF0000000000000, !dbg !20
  %39 = select i1 %9, float %32, float 0xFFF0000000000000, !dbg !20
  %40 = or disjoint i64 %16, 1024, !dbg !21
  %41 = lshr i64 %40, 7, !dbg !14
  %42 = trunc nuw nsw i64 %41 to i32
  %43 = mul nuw nsw i32 %42, 526336
  %.reass.1 = add i32 %43, %invariant.op
  %44 = sext i32 %.reass.1 to i64, !dbg !16
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !16
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %9) #4, !dbg !17
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !17
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !17
  %49 = extractvalue { i32, i32 } %46, 1, !dbg !17
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !17
  %51 = extractelement <2 x bfloat> %48, i64 0, !dbg !17
  %52 = extractelement <2 x bfloat> %48, i64 1, !dbg !17
  %53 = extractelement <2 x bfloat> %50, i64 0, !dbg !17
  %54 = fpext bfloat %51 to float, !dbg !18
  %55 = fpext bfloat %52 to float, !dbg !18
  %56 = fpext bfloat %53 to float, !dbg !18
  %57 = fcmp olt float %34, %54, !dbg !22
  %58 = fcmp olt float %35, %55, !dbg !22
  %59 = fcmp olt float %36, %56, !dbg !22
  %60 = fcmp uno float %34, 0.000000e+00, !dbg !26
  %61 = fcmp uno float %35, 0.000000e+00, !dbg !26
  %62 = fcmp uno float %36, 0.000000e+00, !dbg !26
  %63 = or i1 %60, %57, !dbg !27
  %64 = or i1 %61, %58, !dbg !27
  %65 = or i1 %62, %59, !dbg !27
  %66 = select i1 %63, float %34, float %54, !dbg !28
  %67 = select i1 %64, float %35, float %55, !dbg !28
  %68 = select i1 %65, float %36, float %56, !dbg !28
  %69 = select i1 %9, float %67, float 0x7FF0000000000000, !dbg !19
  %70 = select i1 %9, float %68, float 0x7FF0000000000000, !dbg !19
  %71 = fcmp ogt float %37, %54, !dbg !29
  %72 = fcmp ogt float %38, %55, !dbg !29
  %73 = fcmp ogt float %39, %56, !dbg !29
  %74 = fcmp uno float %37, 0.000000e+00, !dbg !31
  %75 = fcmp uno float %38, 0.000000e+00, !dbg !31
  %76 = fcmp uno float %39, 0.000000e+00, !dbg !31
  %77 = or i1 %74, %71, !dbg !32
  %78 = or i1 %75, %72, !dbg !32
  %79 = or i1 %76, %73, !dbg !32
  %80 = select i1 %77, float %37, float %54, !dbg !33
  %81 = select i1 %78, float %38, float %55, !dbg !33
  %82 = select i1 %79, float %39, float %56, !dbg !33
  %83 = select i1 %9, float %81, float 0xFFF0000000000000, !dbg !20
  %84 = select i1 %9, float %82, float 0xFFF0000000000000, !dbg !20
  %85 = or disjoint i64 %16, 2048, !dbg !21
  %86 = lshr i64 %85, 7, !dbg !14
  %87 = trunc nuw nsw i64 %86 to i32
  %88 = mul nuw nsw i32 %87, 526336
  %.reass.2 = add i32 %88, %invariant.op
  %89 = sext i32 %.reass.2 to i64, !dbg !16
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !16
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %90, i1 %9) #4, !dbg !17
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !17
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !17
  %94 = extractvalue { i32, i32 } %91, 1, !dbg !17
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !17
  %96 = extractelement <2 x bfloat> %93, i64 1, !dbg !17
  %97 = extractelement <2 x bfloat> %95, i64 0, !dbg !17
  %98 = extractelement <2 x bfloat> %95, i64 1, !dbg !17
  %99 = fpext bfloat %96 to float, !dbg !18
  %100 = fpext bfloat %97 to float, !dbg !18
  %101 = fpext bfloat %98 to float, !dbg !18
  %102 = fcmp olt float %69, %99, !dbg !22
  %103 = fcmp olt float %70, %100, !dbg !22
  %104 = fcmp uno float %69, 0.000000e+00, !dbg !26
  %105 = fcmp uno float %70, 0.000000e+00, !dbg !26
  %106 = or i1 %104, %102, !dbg !27
  %107 = or i1 %105, %103, !dbg !27
  %108 = select i1 %106, float %69, float %99, !dbg !28
  %109 = select i1 %107, float %70, float %100, !dbg !28
  %110 = select i1 %9, float %108, float 0x7FF0000000000000, !dbg !19
  %111 = select i1 %9, float %109, float 0x7FF0000000000000, !dbg !19
  %112 = fcmp ogt float %83, %99, !dbg !29
  %113 = fcmp ogt float %84, %100, !dbg !29
  %114 = fcmp uno float %83, 0.000000e+00, !dbg !31
  %115 = fcmp uno float %84, 0.000000e+00, !dbg !31
  %116 = or i1 %114, %112, !dbg !32
  %117 = or i1 %115, %113, !dbg !32
  %118 = select i1 %116, float %83, float %99, !dbg !33
  %119 = select i1 %117, float %84, float %100, !dbg !33
  %120 = select i1 %9, float %118, float 0xFFF0000000000000, !dbg !20
  %121 = select i1 %9, float %119, float 0xFFF0000000000000, !dbg !20
  %122 = lshr i32 %10, 5, !dbg !11
  %123 = insertelement <2 x i1> poison, i1 %9, i64 0, !dbg !19
  %124 = shufflevector <2 x i1> %123, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !19
  %125 = insertelement <2 x float> poison, float %33, i64 0, !dbg !19
  %126 = insertelement <2 x float> %125, float %66, i64 1, !dbg !19
  %127 = select <2 x i1> %124, <2 x float> %126, <2 x float> splat (float 0x7FF0000000000000), !dbg !19
  %128 = shufflevector <2 x bfloat> %50, <2 x bfloat> %93, <2 x i32> <i32 1, i32 2>, !dbg !18
  %129 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !18
  %130 = fcmp olt <2 x float> %127, %129, !dbg !22
  %131 = fcmp uno <2 x float> %127, zeroinitializer, !dbg !26
  %132 = or <2 x i1> %131, %130, !dbg !27
  %133 = select <2 x i1> %132, <2 x float> %127, <2 x float> %129, !dbg !28
  %134 = select <2 x i1> %124, <2 x float> %133, <2 x float> splat (float 0x7FF0000000000000), !dbg !19
  %135 = insertelement <2 x float> poison, float %101, i64 0, !dbg !22
  %136 = insertelement <2 x float> %135, float %110, i64 1, !dbg !22
  %137 = fcmp olt <2 x float> %134, %136, !dbg !22
  %138 = fcmp uno <2 x float> %134, zeroinitializer, !dbg !26
  %139 = or <2 x i1> %137, %138, !dbg !27
  %140 = select <2 x i1> %139, <2 x float> %134, <2 x float> %136, !dbg !28
  %141 = extractelement <2 x float> %140, i64 1, !dbg !34
  %142 = fcmp olt float %141, %111, !dbg !37
  %143 = fcmp uno float %141, 0.000000e+00, !dbg !34
  %144 = or i1 %142, %143, !dbg !38
  %145 = insertelement <2 x i1> %124, i1 %144, i64 1, !dbg !19
  %146 = insertelement <2 x float> <float 0x7FF0000000000000, float poison>, float %111, i64 1, !dbg !19
  %147 = select <2 x i1> %145, <2 x float> %140, <2 x float> %146, !dbg !19
  %148 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %147, <2 x i32> <i32 3, i32 1>, !dbg !37
  %149 = fcmp olt <2 x float> %148, %147, !dbg !37
  %150 = fcmp uno <2 x float> %148, %147, !dbg !37
  %shift = shufflevector <2 x i1> %150, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %151 = or <2 x i1> %149, %shift, !dbg !38
  %152 = extractelement <2 x i1> %151, i64 0, !dbg !38
  %153 = extractelement <2 x float> %147, i64 0, !dbg !39
  %154 = extractelement <2 x float> %147, i64 1, !dbg !39
  %155 = select i1 %152, float %154, float %153, !dbg !39
  %156 = bitcast float %155 to i32, !dbg !40
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !40
  %158 = bitcast i32 %157 to float, !dbg !40
  %159 = fcmp olt float %155, %158, !dbg !37
  %160 = fcmp uno float %155, 0.000000e+00, !dbg !34
  %161 = or i1 %160, %159, !dbg !38
  %162 = select i1 %161, float %155, float %158, !dbg !39
  %163 = bitcast float %162 to i32, !dbg !40
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !40
  %165 = bitcast i32 %164 to float, !dbg !40
  %166 = fcmp olt float %162, %165, !dbg !37
  %167 = fcmp uno float %162, 0.000000e+00, !dbg !34
  %168 = or i1 %166, %167, !dbg !38
  %169 = select i1 %168, float %162, float %165, !dbg !39
  %170 = bitcast float %169 to i32, !dbg !40
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !40
  %172 = bitcast i32 %171 to float, !dbg !40
  %173 = fcmp olt float %169, %172, !dbg !37
  %174 = fcmp uno float %169, 0.000000e+00, !dbg !34
  %175 = or i1 %173, %174, !dbg !38
  %176 = select i1 %175, float %169, float %172, !dbg !39
  %177 = bitcast float %176 to i32, !dbg !40
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !40
  %179 = bitcast i32 %178 to float, !dbg !40
  %180 = fcmp olt float %176, %179, !dbg !37
  %181 = fcmp uno float %176, 0.000000e+00, !dbg !34
  %182 = or i1 %180, %181, !dbg !38
  %183 = select i1 %182, float %176, float %179, !dbg !39
  %184 = bitcast float %183 to i32, !dbg !40
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = fcmp olt float %183, %186, !dbg !37
  %188 = fcmp uno float %183, 0.000000e+00, !dbg !34
  %189 = or i1 %187, %188, !dbg !38
  %190 = and i32 %122, 7, !dbg !40
  %191 = icmp eq i32 %11, 0, !dbg !40
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !40
  %193 = select i1 %189, i32 %184, i32 %185, !dbg !39
  %194 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %194, i1 %191) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %195 = icmp slt i32 %10, 8, !dbg !40
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %197 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #4, !dbg !40
  %198 = bitcast i32 %197 to float, !dbg !40
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !40
  %200 = bitcast i32 %199 to float, !dbg !40
  %201 = fcmp olt float %198, %200, !dbg !37
  %202 = fcmp uno float %198, 0.000000e+00, !dbg !34
  %203 = or i1 %202, %201, !dbg !38
  %204 = select i1 %203, float %198, float %200, !dbg !39
  %205 = bitcast float %204 to i32, !dbg !40
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = fcmp olt float %204, %207, !dbg !37
  %209 = fcmp uno float %204, 0.000000e+00, !dbg !34
  %210 = or i1 %208, %209, !dbg !38
  %211 = select i1 %210, float %204, float %207, !dbg !39
  %212 = bitcast float %211 to i32, !dbg !40
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !40
  %214 = bitcast i32 %213 to float, !dbg !40
  %215 = fcmp olt float %211, %214, !dbg !37
  %216 = fcmp uno float %211, 0.000000e+00, !dbg !34
  %217 = or i1 %215, %216, !dbg !38
  %218 = and i32 %10, 7, !dbg !40
  %219 = icmp eq i32 %218, 0, !dbg !40
  %220 = and i1 %195, %219, !dbg !40
  %221 = select i1 %217, i32 %212, i32 %213, !dbg !39
  %222 = insertelement <1 x i32> poison, i32 %221, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %222, i1 %220) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %223 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %224 = insertelement <2 x float> %125, float %80, i64 1, !dbg !20
  %225 = select <2 x i1> %124, <2 x float> %224, <2 x float> splat (float 0xFFF0000000000000), !dbg !20
  %226 = fcmp uno <2 x float> %225, zeroinitializer, !dbg !31
  %227 = fcmp ogt <2 x float> %225, %129, !dbg !29
  %228 = or <2 x i1> %226, %227, !dbg !32
  %229 = select <2 x i1> %228, <2 x float> %225, <2 x float> %129, !dbg !33
  %230 = select <2 x i1> %124, <2 x float> %229, <2 x float> splat (float 0xFFF0000000000000), !dbg !20
  %231 = insertelement <2 x float> %135, float %120, i64 1, !dbg !29
  %232 = fcmp ogt <2 x float> %230, %231, !dbg !29
  %233 = fcmp uno <2 x float> %230, zeroinitializer, !dbg !31
  %234 = or <2 x i1> %232, %233, !dbg !32
  %235 = select <2 x i1> %234, <2 x float> %230, <2 x float> %231, !dbg !33
  %236 = extractelement <2 x float> %235, i64 1, !dbg !43
  %237 = fcmp ogt float %236, %121, !dbg !44
  %238 = fcmp uno float %236, 0.000000e+00, !dbg !43
  %239 = or i1 %237, %238, !dbg !45
  %240 = insertelement <2 x i1> %124, i1 %239, i64 1, !dbg !20
  %241 = insertelement <2 x float> <float 0xFFF0000000000000, float poison>, float %121, i64 1, !dbg !20
  %242 = select <2 x i1> %240, <2 x float> %235, <2 x float> %241, !dbg !20
  %243 = shufflevector <2 x float> <float poison, float 0.000000e+00>, <2 x float> %242, <2 x i32> <i32 3, i32 1>, !dbg !44
  %244 = fcmp ogt <2 x float> %243, %242, !dbg !44
  %245 = fcmp uno <2 x float> %243, %242, !dbg !44
  %shift13 = shufflevector <2 x i1> %245, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %246 = or <2 x i1> %244, %shift13, !dbg !45
  %247 = extractelement <2 x i1> %246, i64 0, !dbg !45
  %248 = extractelement <2 x float> %242, i64 0, !dbg !46
  %249 = extractelement <2 x float> %242, i64 1, !dbg !46
  %250 = select i1 %247, float %249, float %248, !dbg !46
  %251 = bitcast float %250 to i32, !dbg !41
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 16, i32 31), !dbg !41
  %253 = bitcast i32 %252 to float, !dbg !41
  %254 = fcmp ogt float %250, %253, !dbg !44
  %255 = fcmp uno float %250, 0.000000e+00, !dbg !43
  %256 = or i1 %255, %254, !dbg !45
  %257 = select i1 %256, float %250, float %253, !dbg !46
  %258 = bitcast float %257 to i32, !dbg !41
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !41
  %260 = bitcast i32 %259 to float, !dbg !41
  %261 = fcmp ogt float %257, %260, !dbg !44
  %262 = fcmp uno float %257, 0.000000e+00, !dbg !43
  %263 = or i1 %261, %262, !dbg !45
  %264 = select i1 %263, float %257, float %260, !dbg !46
  %265 = bitcast float %264 to i32, !dbg !41
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !41
  %267 = bitcast i32 %266 to float, !dbg !41
  %268 = fcmp ogt float %264, %267, !dbg !44
  %269 = fcmp uno float %264, 0.000000e+00, !dbg !43
  %270 = or i1 %268, %269, !dbg !45
  %271 = select i1 %270, float %264, float %267, !dbg !46
  %272 = bitcast float %271 to i32, !dbg !41
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !41
  %274 = bitcast i32 %273 to float, !dbg !41
  %275 = fcmp ogt float %271, %274, !dbg !44
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !43
  %277 = or i1 %275, %276, !dbg !45
  %278 = select i1 %277, float %271, float %274, !dbg !46
  %279 = bitcast float %278 to i32, !dbg !41
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !41
  %281 = bitcast i32 %280 to float, !dbg !41
  %282 = fcmp ogt float %278, %281, !dbg !44
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !43
  %284 = or i1 %282, %283, !dbg !45
  %285 = select i1 %284, i32 %279, i32 %280, !dbg !46
  %286 = insertelement <1 x i32> poison, i32 %285, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %286, i1 %191) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %287 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #4, !dbg !41
  %288 = bitcast i32 %287 to float, !dbg !41
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !41
  %290 = bitcast i32 %289 to float, !dbg !41
  %291 = fcmp ogt float %288, %290, !dbg !44
  %292 = fcmp uno float %288, 0.000000e+00, !dbg !43
  %293 = or i1 %292, %291, !dbg !45
  %294 = select i1 %293, float %288, float %290, !dbg !46
  %295 = bitcast float %294 to i32, !dbg !41
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !41
  %297 = bitcast i32 %296 to float, !dbg !41
  %298 = fcmp ogt float %294, %297, !dbg !44
  %299 = fcmp uno float %294, 0.000000e+00, !dbg !43
  %300 = or i1 %298, %299, !dbg !45
  %301 = select i1 %300, float %294, float %297, !dbg !46
  %302 = bitcast float %301 to i32, !dbg !41
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !41
  %304 = bitcast i32 %303 to float, !dbg !41
  %305 = fcmp ogt float %301, %304, !dbg !44
  %306 = fcmp uno float %301, 0.000000e+00, !dbg !43
  %307 = or i1 %305, %306, !dbg !45
  %308 = select i1 %307, i32 %302, i32 %303, !dbg !46
  %309 = insertelement <1 x i32> poison, i32 %308, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %309, i1 %220) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %310 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %311 = sext i32 %8 to i64, !dbg !47
  %312 = getelementptr bfloat, ptr addrspace(1) %1, i64 %311, !dbg !47
  %313 = fptrunc float %223 to bfloat, !dbg !48
  %314 = and i32 %10, 255, !dbg !48
  %315 = icmp eq i32 %314, 0, !dbg !48
  %316 = bitcast bfloat %313 to i16, !dbg !48
  %317 = and i1 %9, %315, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %316, ptr addrspace(1) %312, i1 %317) #4, !dbg !48
  %318 = getelementptr bfloat, ptr addrspace(1) %2, i64 %311, !dbg !49
  %319 = fptrunc float %310 to bfloat, !dbg !50
  %320 = bitcast bfloat %319 to i16, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %320, ptr addrspace(1) %318, i1 %317) #4, !dbg !50
  %.inv = fcmp oge float %223, 0.000000e+00, !dbg !51
  %321 = select i1 %.inv, float 0.000000e+00, float %223, !dbg !51
  %322 = fsub float 0.000000e+00, %321, !dbg !53
  %.inv2 = fcmp ole float %310, 0.000000e+00, !dbg !54
  %323 = select i1 %.inv2, float 0.000000e+00, float %310, !dbg !54
  %324 = fcmp ogt float %322, %323, !dbg !56
  %325 = fcmp uno float %322, 0.000000e+00, !dbg !58
  %326 = or i1 %325, %324, !dbg !59
  %327 = select i1 %326, float %322, float %323, !dbg !60
  %328 = fmul float %327, 0x3F80204080000000, !dbg !61
  %329 = fcmp ogt float %328, 0x3EE4F8B580000000, !dbg !62
  %330 = fcmp uno float %328, 0.000000e+00, !dbg !64
  %331 = or i1 %329, %330, !dbg !65
  %332 = select i1 %331, float %328, float 0x3EE4F8B580000000, !dbg !66
  %333 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %332), !dbg !67
  %334 = mul i32 %8, 3072, !dbg !68
  %335 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %9) #4, !dbg !69
  %336 = extractvalue { i32, i32 } %335, 0, !dbg !69
  %337 = bitcast i32 %336 to <2 x bfloat>, !dbg !69
  %338 = extractvalue { i32, i32 } %335, 1, !dbg !69
  %339 = bitcast i32 %338 to <2 x bfloat>, !dbg !69
  %340 = extractelement <2 x bfloat> %337, i64 0, !dbg !69
  %341 = extractelement <2 x bfloat> %337, i64 1, !dbg !69
  %342 = extractelement <2 x bfloat> %339, i64 0, !dbg !69
  %343 = extractelement <2 x bfloat> %339, i64 1, !dbg !69
  %344 = fpext bfloat %340 to float, !dbg !70
  %345 = fpext bfloat %341 to float, !dbg !70
  %346 = fpext bfloat %342 to float, !dbg !70
  %347 = fpext bfloat %343 to float, !dbg !70
  %348 = fmul float %333, %344, !dbg !71
  %349 = fmul float %333, %345, !dbg !71
  %350 = fmul float %333, %346, !dbg !71
  %351 = fmul float %333, %347, !dbg !71
  %352 = tail call float @llvm.nvvm.round.f(float %348) #4, !dbg !72
  %353 = tail call float @llvm.nvvm.round.f(float %349) #4, !dbg !72
  %354 = tail call float @llvm.nvvm.round.f(float %350) #4, !dbg !72
  %355 = tail call float @llvm.nvvm.round.f(float %351) #4, !dbg !72
  %356 = insertelement <4 x float> poison, float %352, i64 0, !dbg !73
  %357 = insertelement <4 x float> %356, float %353, i64 1, !dbg !73
  %358 = insertelement <4 x float> %357, float %354, i64 2, !dbg !73
  %359 = insertelement <4 x float> %358, float %355, i64 3, !dbg !73
  %360 = fcmp ogt <4 x float> %359, splat (float -1.270000e+02), !dbg !73
  %361 = fcmp uno <4 x float> %359, zeroinitializer, !dbg !75
  %362 = or <4 x i1> %360, %361, !dbg !76
  %363 = select <4 x i1> %362, <4 x float> %359, <4 x float> splat (float -1.270000e+02), !dbg !77
  %364 = fcmp olt <4 x float> %363, splat (float 1.270000e+02), !dbg !78
  %365 = fcmp uno <4 x float> %363, zeroinitializer, !dbg !80
  %366 = or <4 x i1> %364, %365, !dbg !81
  %367 = fptosi <4 x float> %363 to <4 x i8>, !dbg !82
  %368 = select <4 x i1> %366, <4 x i8> %367, <4 x i8> splat (i8 127), !dbg !83
  %369 = or disjoint i32 %13, %334, !dbg !84
  %370 = sext i32 %369 to i64, !dbg !85
  %371 = getelementptr i8, ptr addrspace(1) %3, i64 %370, !dbg !85
  %372 = bitcast <4 x i8> %368 to i32, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %372, ptr addrspace(1) %371, i1 %9) #4, !dbg !86
  %373 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %9) #4, !dbg !69
  %374 = extractvalue { i32, i32 } %373, 0, !dbg !69
  %375 = bitcast i32 %374 to <2 x bfloat>, !dbg !69
  %376 = extractvalue { i32, i32 } %373, 1, !dbg !69
  %377 = bitcast i32 %376 to <2 x bfloat>, !dbg !69
  %378 = extractelement <2 x bfloat> %375, i64 0, !dbg !69
  %379 = extractelement <2 x bfloat> %375, i64 1, !dbg !69
  %380 = extractelement <2 x bfloat> %377, i64 0, !dbg !69
  %381 = extractelement <2 x bfloat> %377, i64 1, !dbg !69
  %382 = fpext bfloat %378 to float, !dbg !70
  %383 = fpext bfloat %379 to float, !dbg !70
  %384 = fpext bfloat %380 to float, !dbg !70
  %385 = fpext bfloat %381 to float, !dbg !70
  %386 = fmul float %333, %382, !dbg !71
  %387 = fmul float %333, %383, !dbg !71
  %388 = fmul float %333, %384, !dbg !71
  %389 = fmul float %333, %385, !dbg !71
  %390 = tail call float @llvm.nvvm.round.f(float %386) #4, !dbg !72
  %391 = tail call float @llvm.nvvm.round.f(float %387) #4, !dbg !72
  %392 = tail call float @llvm.nvvm.round.f(float %388) #4, !dbg !72
  %393 = tail call float @llvm.nvvm.round.f(float %389) #4, !dbg !72
  %394 = insertelement <4 x float> poison, float %390, i64 0, !dbg !73
  %395 = insertelement <4 x float> %394, float %391, i64 1, !dbg !73
  %396 = insertelement <4 x float> %395, float %392, i64 2, !dbg !73
  %397 = insertelement <4 x float> %396, float %393, i64 3, !dbg !73
  %398 = fcmp ogt <4 x float> %397, splat (float -1.270000e+02), !dbg !73
  %399 = fcmp uno <4 x float> %397, zeroinitializer, !dbg !75
  %400 = or <4 x i1> %398, %399, !dbg !76
  %401 = select <4 x i1> %400, <4 x float> %397, <4 x float> splat (float -1.270000e+02), !dbg !77
  %402 = fcmp olt <4 x float> %401, splat (float 1.270000e+02), !dbg !78
  %403 = fcmp uno <4 x float> %401, zeroinitializer, !dbg !80
  %404 = or <4 x i1> %402, %403, !dbg !81
  %405 = fptosi <4 x float> %401 to <4 x i8>, !dbg !82
  %406 = select <4 x i1> %404, <4 x i8> %405, <4 x i8> splat (i8 127), !dbg !83
  %407 = trunc nuw nsw i64 %40 to i32, !dbg !84
  %408 = add i32 %334, %407, !dbg !84
  %409 = sext i32 %408 to i64, !dbg !85
  %410 = getelementptr i8, ptr addrspace(1) %3, i64 %409, !dbg !85
  %411 = bitcast <4 x i8> %406 to i32, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %411, ptr addrspace(1) %410, i1 %9) #4, !dbg !86
  %412 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %90, i1 %9) #4, !dbg !69
  %413 = extractvalue { i32, i32 } %412, 0, !dbg !69
  %414 = bitcast i32 %413 to <2 x bfloat>, !dbg !69
  %415 = extractvalue { i32, i32 } %412, 1, !dbg !69
  %416 = bitcast i32 %415 to <2 x bfloat>, !dbg !69
  %417 = extractelement <2 x bfloat> %414, i64 0, !dbg !69
  %418 = extractelement <2 x bfloat> %414, i64 1, !dbg !69
  %419 = extractelement <2 x bfloat> %416, i64 0, !dbg !69
  %420 = extractelement <2 x bfloat> %416, i64 1, !dbg !69
  %421 = fpext bfloat %417 to float, !dbg !70
  %422 = fpext bfloat %418 to float, !dbg !70
  %423 = fpext bfloat %419 to float, !dbg !70
  %424 = fpext bfloat %420 to float, !dbg !70
  %425 = fmul float %333, %421, !dbg !71
  %426 = fmul float %333, %422, !dbg !71
  %427 = fmul float %333, %423, !dbg !71
  %428 = fmul float %333, %424, !dbg !71
  %429 = tail call float @llvm.nvvm.round.f(float %425) #4, !dbg !72
  %430 = tail call float @llvm.nvvm.round.f(float %426) #4, !dbg !72
  %431 = tail call float @llvm.nvvm.round.f(float %427) #4, !dbg !72
  %432 = tail call float @llvm.nvvm.round.f(float %428) #4, !dbg !72
  %433 = insertelement <4 x float> poison, float %429, i64 0, !dbg !73
  %434 = insertelement <4 x float> %433, float %430, i64 1, !dbg !73
  %435 = insertelement <4 x float> %434, float %431, i64 2, !dbg !73
  %436 = insertelement <4 x float> %435, float %432, i64 3, !dbg !73
  %437 = fcmp ogt <4 x float> %436, splat (float -1.270000e+02), !dbg !73
  %438 = fcmp uno <4 x float> %436, zeroinitializer, !dbg !75
  %439 = or <4 x i1> %437, %438, !dbg !76
  %440 = select <4 x i1> %439, <4 x float> %436, <4 x float> splat (float -1.270000e+02), !dbg !77
  %441 = fcmp olt <4 x float> %440, splat (float 1.270000e+02), !dbg !78
  %442 = fcmp uno <4 x float> %440, zeroinitializer, !dbg !80
  %443 = or <4 x i1> %441, %442, !dbg !81
  %444 = fptosi <4 x float> %440 to <4 x i8>, !dbg !82
  %445 = select <4 x i1> %443, <4 x i8> %444, <4 x i8> splat (i8 127), !dbg !83
  %446 = trunc nuw nsw i64 %85 to i32, !dbg !84
  %447 = add i32 %334, %446, !dbg !84
  %448 = sext i32 %447 to i64, !dbg !85
  %449 = getelementptr i8, ptr addrspace(1) %3, i64 %448, !dbg !85
  %450 = bitcast <4 x i8> %445 to i32, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %449, i1 %9) #4, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 37, column: 144, scope: !6)
!19 = !DILocation(line: 40, column: 48, scope: !6)
!20 = !DILocation(line: 42, column: 48, scope: !6)
!21 = !DILocation(line: 32, column: 31, scope: !6)
!22 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 39, column: 45, scope: !6)
!26 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !30)
!30 = !DILocation(line: 41, column: 45, scope: !6)
!31 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !30)
!33 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !30)
!34 = !DILocation(line: 96, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!36 = !DILocation(line: 43, column: 38, scope: !6)
!37 = !DILocation(line: 94, column: 15, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 96, column: 16, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 97, column: 29, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !36)
!41 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 102, column: 15, scope: !35, inlinedAt: !42)
!45 = !DILocation(line: 104, column: 16, scope: !35, inlinedAt: !42)
!46 = !DILocation(line: 105, column: 29, scope: !35, inlinedAt: !42)
!47 = !DILocation(line: 45, column: 25, scope: !6)
!48 = !DILocation(line: 45, column: 36, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 46, column: 36, scope: !6)
!51 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !52)
!52 = !DILocation(line: 55, column: 44, scope: !6)
!53 = !DILocation(line: 56, column: 16, scope: !6)
!54 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !55)
!55 = !DILocation(line: 57, column: 45, scope: !6)
!56 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !57)
!57 = !DILocation(line: 58, column: 45, scope: !6)
!58 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !57)
!59 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !57)
!60 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !57)
!61 = !DILocation(line: 60, column: 24, scope: !6)
!62 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !63)
!63 = !DILocation(line: 63, column: 46, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !63)
!66 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !63)
!67 = !DILocation(line: 66, column: 25, scope: !6)
!68 = !DILocation(line: 78, column: 41, scope: !6)
!69 = !DILocation(line: 53, column: 83, scope: !6)
!70 = !DILocation(line: 53, column: 145, scope: !6)
!71 = !DILocation(line: 69, column: 23, scope: !6)
!72 = !DILocation(line: 70, column: 36, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !74)
!74 = !DILocation(line: 73, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !74)
!78 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !79)
!79 = !DILocation(line: 75, column: 46, scope: !6)
!80 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !79)
!81 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !79)
!82 = !DILocation(line: 77, column: 25, scope: !6)
!83 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !79)
!84 = !DILocation(line: 78, column: 36, scope: !6)
!85 = !DILocation(line: 78, column: 29, scope: !6)
!86 = !DILocation(line: 78, column: 53, scope: !6)
!87 = !DILocation(line: 47, column: 4, scope: !6)
