; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 256, !dbg !11
  %.lobit = lshr exact i32 %20, 8, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 1, !dbg !14
  %26 = and i32 %25, 1022, !dbg !14
  %27 = shl i32 %19, 2, !dbg !14
  %28 = and i32 %27, 1020, !dbg !14
  %29 = sext i32 %22 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %4, i64 %29, !dbg !15
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %23) #5, !dbg !16
  %35 = bitcast i16 %34 to bfloat, !dbg !16
  %36 = getelementptr bfloat, ptr addrspace(1) %5, i64 %29, !dbg !17
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %36, i1 %23) #5, !dbg !18
  %41 = bitcast i16 %40 to bfloat, !dbg !18
  %42 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %35, 0xR0000, !dbg !20
  %43 = select i1 %.inv, bfloat 0xR0000, bfloat %35, !dbg !20
  %44 = fpext bfloat %43 to float, !dbg !20
  %45 = fsub float 0.000000e+00, %44, !dbg !24
  %.inv4 = fcmp ole bfloat %41, 0xR0000, !dbg !25
  %46 = select i1 %.inv4, bfloat 0xR0000, bfloat %41, !dbg !25
  %47 = fpext bfloat %46 to float, !dbg !25
  %48 = fcmp ogt float %45, %47, !dbg !27
  %49 = fcmp uno float %45, 0.000000e+00, !dbg !29
  %50 = or i1 %49, %48, !dbg !30
  %51 = select i1 %50, float %45, float %47, !dbg !31
  %52 = fmul float %51, 0x3F80204080000000, !dbg !32
  %53 = fcmp ogt float %52, 0x3EE4F8B580000000, !dbg !33
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !35
  %55 = or i1 %53, %54, !dbg !36
  %56 = select i1 %55, float %52, float 0x3EE4F8B580000000, !dbg !37
  %57 = or disjoint i32 %42, %28
  %58 = and i32 %27, 2044
  %59 = lshr i32 %27, 8
  %60 = and i32 %59, 4
  %61 = add nuw nsw i32 %60, %58
  %62 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %61
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %64 = add nuw nsw i32 %26, 1028
  %65 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %64
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %61
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %64
  %69 = zext nneg i32 %26 to i64, !dbg !38
  %70 = getelementptr inbounds nuw i8, ptr addrspace(3) %62, i32 4
  %71 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !39
  %72 = shufflevector <4 x i1> %71, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  br label %73, !dbg !38

73:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %201, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %202, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %203, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %204, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %197, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %198, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %199, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %200, %._crit_edge ]
  %82 = phi <4 x float> [ zeroinitializer, %16 ], [ %196, %._crit_edge ]
  %83 = or disjoint i64 %indvars.iv, %69, !dbg !40
  %84 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %85 = add i32 %57, %84, !dbg !41
  %86 = sext i32 %85 to i64, !dbg !42
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !42
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %87, i1 %23) #5, !dbg !43
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !43
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !43
  %extelt.offset20 = lshr i32 %89, 16, !dbg !43
  %91 = trunc nuw i32 %extelt.offset20 to i16, !dbg !43
  %extelt.offset22 = lshr i32 %90, 16, !dbg !43
  %92 = trunc nuw i32 %extelt.offset22 to i16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %93 = trunc i32 %89 to i16, !dbg !44
  %94 = trunc i32 %90 to i16, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %62, i16 %93, i16 %91, i16 %94, i16 %92, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %95 = add nuw nsw i64 %83, 6144, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !46
  %97 = getelementptr bfloat, ptr addrspace(1) %2, i64 %95, !dbg !47
  %98 = getelementptr i32, ptr addrspace(1) %3, i64 %86, !dbg !48
  %99 = getelementptr bfloat, ptr addrspace(1) %6, i64 %83, !dbg !49
  %100 = getelementptr bfloat, ptr addrspace(1) %7, i64 %83, !dbg !50
  %101 = load <2 x bfloat>, ptr addrspace(3) %63, align 4, !dbg !44
  %102 = load <2 x bfloat>, ptr addrspace(3) %65, align 4, !dbg !44
  %103 = shufflevector <2 x bfloat> %101, <2 x bfloat> %102, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !44
  %104 = fpext <4 x bfloat> %103 to <4 x float>, !dbg !44
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %96, i1 true) #5, !dbg !51
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !51
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !51
  %108 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !51
  %109 = insertelement <2 x i32> %108, i32 %107, i64 1, !dbg !51
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !51
  %111 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %97, i1 true) #5, !dbg !52
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !52
  %113 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !53
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %23) #5, !dbg !54
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !54
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !54
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !54
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !54
  %119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %99, i1 true) #5, !dbg !55
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !55
  %121 = fpext <2 x bfloat> %120 to <2 x float>, !dbg !56
  %122 = shufflevector <2 x float> %121, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !56
  %123 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %100, i1 true) #5, !dbg !57
  %124 = bitcast i32 %123 to <2 x bfloat>, !dbg !57
  %125 = fpext <2 x bfloat> %124 to <2 x float>, !dbg !58
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !58
  %127 = fadd <2 x float> %110, %113, !dbg !59
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !59
  %129 = sitofp i32 %115 to float, !dbg !60
  %130 = sitofp i32 %116 to float, !dbg !60
  %131 = sitofp i32 %117 to float, !dbg !60
  %132 = sitofp i32 %118 to float, !dbg !60
  %133 = fmul float %56, %129, !dbg !61
  %134 = fmul float %56, %130, !dbg !61
  %135 = fmul float %56, %131, !dbg !61
  %136 = fmul float %56, %132, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %137 = bitcast float %133 to i32, !dbg !61
  %138 = bitcast float %134 to i32, !dbg !61
  %139 = bitcast float %135 to i32, !dbg !61
  %140 = bitcast float %136 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %66, i32 %137, i32 %138, i32 %139, i32 %140, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %141 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !61
  %142 = load <2 x float>, ptr addrspace(3) %68, align 8, !dbg !61
  %143 = shufflevector <2 x float> %141, <2 x float> %142, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !62
  %144 = fmul <4 x float> %143, %122, !dbg !62
  %145 = fadd <4 x float> %144, %126, !dbg !63
  %146 = fmul <4 x float> %128, %145, !dbg !64
  %147 = fadd <4 x float> %146, %104, !dbg !65
  %148 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %148, label %._crit_edge, label %149, !dbg !67

149:                                              ; preds = %73
  %150 = fsub <4 x float> %147, %82, !dbg !69
  %151 = extractelement <4 x float> %150, i64 0, !dbg !69
  %152 = fsub <4 x float> %147, %82, !dbg !69
  %153 = extractelement <4 x float> %152, i64 1, !dbg !69
  %154 = fsub <4 x float> %147, %82, !dbg !69
  %155 = extractelement <4 x float> %154, i64 2, !dbg !69
  %156 = fsub <4 x float> %147, %82, !dbg !69
  %157 = extractelement <4 x float> %156, i64 3, !dbg !69
  %158 = fadd float %74, 1.000000e+00, !dbg !70
  %159 = fadd float %75, 1.000000e+00, !dbg !70
  %160 = fadd float %76, 1.000000e+00, !dbg !70
  %161 = fadd float %77, 1.000000e+00, !dbg !70
  %162 = tail call float @llvm.nvvm.div.full(float %151, float %158), !dbg !71
  %163 = tail call float @llvm.nvvm.div.full(float %153, float %159), !dbg !71
  %164 = tail call float @llvm.nvvm.div.full(float %155, float %160), !dbg !71
  %165 = tail call float @llvm.nvvm.div.full(float %157, float %161), !dbg !71
  %166 = insertelement <4 x float> poison, float %162, i64 0, !dbg !72
  %167 = insertelement <4 x float> %166, float %163, i64 1, !dbg !72
  %168 = insertelement <4 x float> %167, float %164, i64 2, !dbg !72
  %169 = insertelement <4 x float> %168, float %165, i64 3, !dbg !72
  %170 = fadd <4 x float> %82, %169, !dbg !72
  %171 = fsub <4 x float> %147, %170, !dbg !73
  %172 = fsub <4 x float> %147, %170, !dbg !73
  %173 = fsub <4 x float> %147, %170, !dbg !73
  %174 = fsub <4 x float> %147, %170, !dbg !73
  %175 = fmul <4 x float> %150, %171, !dbg !74
  %176 = extractelement <4 x float> %175, i64 0, !dbg !74
  %177 = fmul <4 x float> %152, %172, !dbg !74
  %178 = extractelement <4 x float> %177, i64 1, !dbg !74
  %179 = fmul <4 x float> %154, %173, !dbg !74
  %180 = extractelement <4 x float> %179, i64 2, !dbg !74
  %181 = fmul <4 x float> %156, %174, !dbg !74
  %182 = extractelement <4 x float> %181, i64 3, !dbg !74
  %183 = fadd float %78, %176, !dbg !75
  %184 = fadd float %79, %178, !dbg !75
  %185 = fadd float %80, %180, !dbg !75
  %186 = fadd float %81, %182, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %73, %149
  %187 = phi float [ %183, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %188 = phi float [ %184, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %189 = phi float [ %185, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %190 = phi float [ %186, %149 ], [ 0.000000e+00, %73 ], !dbg !68
  %191 = phi float [ %158, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %192 = phi float [ %159, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %193 = phi float [ %160, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %194 = phi float [ %161, %149 ], [ 1.000000e+00, %73 ], !dbg !68
  %195 = phi <4 x float> [ %170, %149 ], [ %147, %73 ]
  %196 = select <4 x i1> %72, <4 x float> %195, <4 x float> %82, !dbg !39
  %197 = select i1 %24, float %187, float %78, !dbg !76
  %198 = select i1 %24, float %188, float %79, !dbg !76
  %199 = select i1 %24, float %189, float %80, !dbg !76
  %200 = select i1 %24, float %190, float %81, !dbg !76
  %201 = select i1 %24, float %191, float %74, !dbg !77
  %202 = select i1 %24, float %192, float %75, !dbg !77
  %203 = select i1 %24, float %193, float %76, !dbg !77
  %204 = select i1 %24, float %194, float %77, !dbg !77
  %205 = getelementptr bfloat, ptr addrspace(1) %8, i64 %86, !dbg !78
  %206 = extractelement <4 x float> %147, i64 0, !dbg !79
  %207 = fptrunc float %206 to bfloat, !dbg !79
  %208 = extractelement <4 x float> %147, i64 1, !dbg !79
  %209 = fptrunc float %208 to bfloat, !dbg !79
  %210 = extractelement <4 x float> %147, i64 2, !dbg !79
  %211 = fptrunc float %210 to bfloat, !dbg !79
  %212 = extractelement <4 x float> %147, i64 3, !dbg !79
  %213 = fptrunc float %212 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %214 = bitcast bfloat %207 to i16, !dbg !79
  %215 = bitcast bfloat %209 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %63, i16 %214, i16 %215, i1 true) #5, !dbg !79
  %216 = bitcast bfloat %211 to i16, !dbg !79
  %217 = bitcast bfloat %213 to i16, !dbg !79
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %65, i16 %216, i16 %217, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %.uncasted.extract43 = load i32, ptr addrspace(3) %62, align 8, !dbg !79
  %.uncasted.extract45 = load i32, ptr addrspace(3) %70, align 4, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract43, i32 %.uncasted.extract45, ptr addrspace(1) %205, i1 %23) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !38
  %218 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !38
  br i1 %218, label %73, label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %219 = lshr i32 %19, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %220 = extractelement <4 x float> %196, i64 0, !dbg !82
  %221 = extractelement <4 x float> %196, i64 1, !dbg !82
  %222 = fsub float %221, %220, !dbg !82
  %223 = fadd float %201, %202, !dbg !84
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !85
  %225 = tail call float @llvm.nvvm.div.full(float %202, float %223), !dbg !86
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !87
  %227 = fmul float %222, %226, !dbg !88
  %228 = fadd float %220, %227, !dbg !89
  %229 = fadd float %197, %198, !dbg !90
  %230 = fmul float %222, %222, !dbg !91
  %231 = fmul float %230, %201, !dbg !92
  %232 = fmul float %231, %226, !dbg !93
  %233 = fadd float %229, %232, !dbg !94
  %234 = extractelement <4 x float> %196, i64 2, !dbg !82
  %235 = extractelement <4 x float> %196, i64 3, !dbg !82
  %236 = fsub float %235, %234, !dbg !82
  %237 = fadd float %203, %204, !dbg !84
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !85
  %239 = tail call float @llvm.nvvm.div.full(float %204, float %237), !dbg !86
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !87
  %241 = fmul float %236, %240, !dbg !88
  %242 = fadd float %234, %241, !dbg !89
  %243 = fadd float %199, %200, !dbg !90
  %244 = fmul float %236, %236, !dbg !91
  %245 = fmul float %244, %203, !dbg !92
  %246 = fmul float %245, %240, !dbg !93
  %247 = fadd float %243, %246, !dbg !94
  %248 = bitcast float %228 to i32, !dbg !80
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !80
  %250 = bitcast i32 %249 to float, !dbg !80
  %251 = bitcast float %233 to i32, !dbg !80
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 16, i32 31), !dbg !80
  %253 = bitcast i32 %252 to float, !dbg !80
  %254 = bitcast float %223 to i32, !dbg !80
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 16, i32 31), !dbg !80
  %256 = bitcast i32 %255 to float, !dbg !80
  %257 = fsub float %250, %228, !dbg !82
  %258 = fadd float %223, %256, !dbg !84
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !85
  %260 = tail call float @llvm.nvvm.div.full(float %256, float %258), !dbg !86
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !87
  %262 = fmul float %257, %261, !dbg !88
  %263 = fadd float %228, %262, !dbg !89
  %264 = fadd float %233, %253, !dbg !90
  %265 = fmul float %257, %257, !dbg !91
  %266 = fmul float %223, %265, !dbg !92
  %267 = fmul float %266, %261, !dbg !93
  %268 = fadd float %264, %267, !dbg !94
  %269 = bitcast float %263 to i32, !dbg !80
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !80
  %271 = bitcast i32 %270 to float, !dbg !80
  %272 = bitcast float %268 to i32, !dbg !80
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !80
  %274 = bitcast i32 %273 to float, !dbg !80
  %275 = bitcast float %258 to i32, !dbg !80
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 8, i32 31), !dbg !80
  %277 = bitcast i32 %276 to float, !dbg !80
  %278 = fsub float %271, %263, !dbg !82
  %279 = fadd float %258, %277, !dbg !84
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !85
  %281 = tail call float @llvm.nvvm.div.full(float %277, float %279), !dbg !86
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !87
  %283 = fmul float %278, %282, !dbg !88
  %284 = fadd float %263, %283, !dbg !89
  %285 = fadd float %268, %274, !dbg !90
  %286 = fmul float %278, %278, !dbg !91
  %287 = fmul float %258, %286, !dbg !92
  %288 = fmul float %282, %287, !dbg !93
  %289 = fadd float %285, %288, !dbg !94
  %290 = bitcast float %284 to i32, !dbg !80
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !80
  %292 = bitcast i32 %291 to float, !dbg !80
  %293 = bitcast float %289 to i32, !dbg !80
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !80
  %295 = bitcast i32 %294 to float, !dbg !80
  %296 = bitcast float %279 to i32, !dbg !80
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 4, i32 31), !dbg !80
  %298 = bitcast i32 %297 to float, !dbg !80
  %299 = fsub float %292, %284, !dbg !82
  %300 = fadd float %279, %298, !dbg !84
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !85
  %302 = tail call float @llvm.nvvm.div.full(float %298, float %300), !dbg !86
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !87
  %304 = fmul float %299, %303, !dbg !88
  %305 = fadd float %284, %304, !dbg !89
  %306 = fadd float %289, %295, !dbg !90
  %307 = fmul float %299, %299, !dbg !91
  %308 = fmul float %279, %307, !dbg !92
  %309 = fmul float %303, %308, !dbg !93
  %310 = fadd float %306, %309, !dbg !94
  %311 = bitcast float %305 to i32, !dbg !80
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !80
  %313 = bitcast i32 %312 to float, !dbg !80
  %314 = bitcast float %310 to i32, !dbg !80
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !80
  %316 = bitcast i32 %315 to float, !dbg !80
  %317 = bitcast float %300 to i32, !dbg !80
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !80
  %319 = bitcast i32 %318 to float, !dbg !80
  %320 = fsub float %313, %305, !dbg !82
  %321 = fadd float %300, %319, !dbg !84
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !85
  %323 = tail call float @llvm.nvvm.div.full(float %319, float %321), !dbg !86
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !87
  %325 = fmul float %320, %324, !dbg !88
  %326 = fadd float %305, %325, !dbg !89
  %327 = fadd float %310, %316, !dbg !90
  %328 = fmul float %320, %320, !dbg !91
  %329 = fmul float %300, %328, !dbg !92
  %330 = fmul float %324, %329, !dbg !93
  %331 = fadd float %327, %330, !dbg !94
  %332 = bitcast float %326 to i32, !dbg !80
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !80
  %334 = bitcast i32 %333 to float, !dbg !80
  %335 = bitcast float %331 to i32, !dbg !80
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !80
  %337 = bitcast i32 %336 to float, !dbg !80
  %338 = bitcast float %321 to i32, !dbg !80
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 1, i32 31), !dbg !80
  %340 = bitcast i32 %339 to float, !dbg !80
  %341 = fsub float %334, %326, !dbg !82
  %342 = fadd float %321, %340, !dbg !84
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !85
  %344 = tail call float @llvm.nvvm.div.full(float %340, float %342), !dbg !86
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !87
  %346 = fmul float %341, %345, !dbg !88
  %347 = fadd float %326, %346, !dbg !89
  %348 = fadd float %331, %337, !dbg !90
  %349 = fmul float %341, %341, !dbg !91
  %350 = fmul float %321, %349, !dbg !92
  %351 = fmul float %345, %350, !dbg !93
  %352 = fadd float %348, %351, !dbg !94
  %353 = bitcast float %242 to i32, !dbg !80
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 16, i32 31), !dbg !80
  %355 = bitcast i32 %354 to float, !dbg !80
  %356 = bitcast float %247 to i32, !dbg !80
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 16, i32 31), !dbg !80
  %358 = bitcast i32 %357 to float, !dbg !80
  %359 = bitcast float %237 to i32, !dbg !80
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 16, i32 31), !dbg !80
  %361 = bitcast i32 %360 to float, !dbg !80
  %362 = fsub float %355, %242, !dbg !82
  %363 = fadd float %237, %361, !dbg !84
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !85
  %365 = tail call float @llvm.nvvm.div.full(float %361, float %363), !dbg !86
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !87
  %367 = fmul float %362, %366, !dbg !88
  %368 = fadd float %242, %367, !dbg !89
  %369 = fadd float %247, %358, !dbg !90
  %370 = fmul float %362, %362, !dbg !91
  %371 = fmul float %237, %370, !dbg !92
  %372 = fmul float %371, %366, !dbg !93
  %373 = fadd float %369, %372, !dbg !94
  %374 = bitcast float %368 to i32, !dbg !80
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 8, i32 31), !dbg !80
  %376 = bitcast i32 %375 to float, !dbg !80
  %377 = bitcast float %373 to i32, !dbg !80
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 8, i32 31), !dbg !80
  %379 = bitcast i32 %378 to float, !dbg !80
  %380 = bitcast float %363 to i32, !dbg !80
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 8, i32 31), !dbg !80
  %382 = bitcast i32 %381 to float, !dbg !80
  %383 = fsub float %376, %368, !dbg !82
  %384 = fadd float %363, %382, !dbg !84
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !85
  %386 = tail call float @llvm.nvvm.div.full(float %382, float %384), !dbg !86
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !87
  %388 = fmul float %383, %387, !dbg !88
  %389 = fadd float %368, %388, !dbg !89
  %390 = fadd float %373, %379, !dbg !90
  %391 = fmul float %383, %383, !dbg !91
  %392 = fmul float %363, %391, !dbg !92
  %393 = fmul float %387, %392, !dbg !93
  %394 = fadd float %390, %393, !dbg !94
  %395 = bitcast float %389 to i32, !dbg !80
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 4, i32 31), !dbg !80
  %397 = bitcast i32 %396 to float, !dbg !80
  %398 = bitcast float %394 to i32, !dbg !80
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !80
  %400 = bitcast i32 %399 to float, !dbg !80
  %401 = bitcast float %384 to i32, !dbg !80
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 4, i32 31), !dbg !80
  %403 = bitcast i32 %402 to float, !dbg !80
  %404 = fsub float %397, %389, !dbg !82
  %405 = fadd float %384, %403, !dbg !84
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !85
  %407 = tail call float @llvm.nvvm.div.full(float %403, float %405), !dbg !86
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !87
  %409 = fmul float %404, %408, !dbg !88
  %410 = fadd float %389, %409, !dbg !89
  %411 = fadd float %394, %400, !dbg !90
  %412 = fmul float %404, %404, !dbg !91
  %413 = fmul float %384, %412, !dbg !92
  %414 = fmul float %408, %413, !dbg !93
  %415 = fadd float %411, %414, !dbg !94
  %416 = bitcast float %410 to i32, !dbg !80
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 2, i32 31), !dbg !80
  %418 = bitcast i32 %417 to float, !dbg !80
  %419 = bitcast float %415 to i32, !dbg !80
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !80
  %421 = bitcast i32 %420 to float, !dbg !80
  %422 = bitcast float %405 to i32, !dbg !80
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !80
  %424 = bitcast i32 %423 to float, !dbg !80
  %425 = fsub float %418, %410, !dbg !82
  %426 = fadd float %405, %424, !dbg !84
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !85
  %428 = tail call float @llvm.nvvm.div.full(float %424, float %426), !dbg !86
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !87
  %430 = fmul float %425, %429, !dbg !88
  %431 = fadd float %410, %430, !dbg !89
  %432 = fadd float %415, %421, !dbg !90
  %433 = fmul float %425, %425, !dbg !91
  %434 = fmul float %405, %433, !dbg !92
  %435 = fmul float %429, %434, !dbg !93
  %436 = fadd float %432, %435, !dbg !94
  %437 = bitcast float %431 to i32, !dbg !80
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 1, i32 31), !dbg !80
  %439 = bitcast i32 %438 to float, !dbg !80
  %440 = bitcast float %436 to i32, !dbg !80
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !80
  %442 = bitcast i32 %441 to float, !dbg !80
  %443 = bitcast float %426 to i32, !dbg !80
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !80
  %445 = bitcast i32 %444 to float, !dbg !80
  %446 = fsub float %439, %431, !dbg !82
  %447 = fadd float %426, %445, !dbg !84
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !85
  %449 = tail call float @llvm.nvvm.div.full(float %445, float %447), !dbg !86
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !87
  %451 = fmul float %446, %450, !dbg !88
  %452 = fadd float %431, %451, !dbg !89
  %453 = fadd float %436, %442, !dbg !90
  %454 = fmul float %446, %446, !dbg !91
  %455 = fmul float %426, %454, !dbg !92
  %456 = fmul float %450, %455, !dbg !93
  %457 = fadd float %453, %456, !dbg !94
  %458 = and i32 %219, 15, !dbg !80
  %459 = icmp eq i32 %21, 0, !dbg !80
  %460 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !80
  %461 = bitcast float %347 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 %459) #5, !dbg !80
  %462 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %458, !dbg !80
  %463 = bitcast float %352 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %463, i1 %459) #5, !dbg !80
  %464 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %458, !dbg !80
  %465 = bitcast float %342 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 %459) #5, !dbg !80
  %466 = or disjoint i32 %458, 16, !dbg !80
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !80
  %468 = bitcast float %452 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 %459) #5, !dbg !80
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %466, !dbg !80
  %470 = bitcast float %457 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 %459) #5, !dbg !80
  %471 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %466, !dbg !80
  %472 = bitcast float %447 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 %459) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %473 = icmp slt i32 %19, 32, !dbg !80
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %475 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %474, i1 %473) #5, !dbg !80
  %476 = bitcast i32 %475 to float, !dbg !80
  %477 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !80
  %478 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %477, i1 %473) #5, !dbg !80
  %479 = bitcast i32 %478 to float, !dbg !80
  %480 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %19, !dbg !80
  %481 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %480, i1 %473) #5, !dbg !80
  %482 = bitcast i32 %481 to float, !dbg !80
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 8, i32 31), !dbg !80
  %484 = bitcast i32 %483 to float, !dbg !80
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 8, i32 31), !dbg !80
  %486 = bitcast i32 %485 to float, !dbg !80
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 8, i32 31), !dbg !80
  %488 = bitcast i32 %487 to float, !dbg !80
  %489 = fsub float %484, %476, !dbg !82
  %490 = fadd float %482, %488, !dbg !84
  %491 = fcmp oeq float %490, 0.000000e+00, !dbg !85
  %492 = tail call float @llvm.nvvm.div.full(float %488, float %490), !dbg !86
  %493 = select i1 %491, float 0.000000e+00, float %492, !dbg !87
  %494 = fmul float %489, %493, !dbg !88
  %495 = fadd float %494, %476, !dbg !89
  %496 = fadd float %479, %486, !dbg !90
  %497 = fmul float %489, %489, !dbg !91
  %498 = fmul float %497, %482, !dbg !92
  %499 = fmul float %498, %493, !dbg !93
  %500 = fadd float %496, %499, !dbg !94
  %501 = bitcast float %495 to i32, !dbg !80
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 4, i32 31), !dbg !80
  %503 = bitcast i32 %502 to float, !dbg !80
  %504 = bitcast float %500 to i32, !dbg !80
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 4, i32 31), !dbg !80
  %506 = bitcast i32 %505 to float, !dbg !80
  %507 = bitcast float %490 to i32, !dbg !80
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 4, i32 31), !dbg !80
  %509 = bitcast i32 %508 to float, !dbg !80
  %510 = fsub float %503, %495, !dbg !82
  %511 = fadd float %490, %509, !dbg !84
  %512 = fcmp oeq float %511, 0.000000e+00, !dbg !85
  %513 = tail call float @llvm.nvvm.div.full(float %509, float %511), !dbg !86
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !87
  %515 = fmul float %510, %514, !dbg !88
  %516 = fadd float %495, %515, !dbg !89
  %517 = fadd float %500, %506, !dbg !90
  %518 = fmul float %510, %510, !dbg !91
  %519 = fmul float %490, %518, !dbg !92
  %520 = fmul float %514, %519, !dbg !93
  %521 = fadd float %517, %520, !dbg !94
  %522 = bitcast float %516 to i32, !dbg !80
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 2, i32 31), !dbg !80
  %524 = bitcast i32 %523 to float, !dbg !80
  %525 = bitcast float %521 to i32, !dbg !80
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 2, i32 31), !dbg !80
  %527 = bitcast i32 %526 to float, !dbg !80
  %528 = bitcast float %511 to i32, !dbg !80
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 2, i32 31), !dbg !80
  %530 = bitcast i32 %529 to float, !dbg !80
  %531 = fsub float %524, %516, !dbg !82
  %532 = fadd float %511, %530, !dbg !84
  %533 = fcmp oeq float %532, 0.000000e+00, !dbg !85
  %534 = tail call float @llvm.nvvm.div.full(float %530, float %532), !dbg !86
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !87
  %536 = fmul float %531, %535, !dbg !88
  %537 = fadd float %516, %536, !dbg !89
  %538 = fadd float %521, %527, !dbg !90
  %539 = fmul float %531, %531, !dbg !91
  %540 = fmul float %511, %539, !dbg !92
  %541 = fmul float %535, %540, !dbg !93
  %542 = fadd float %538, %541, !dbg !94
  %543 = bitcast float %537 to i32, !dbg !80
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 1, i32 31), !dbg !80
  %545 = bitcast i32 %544 to float, !dbg !80
  %546 = bitcast float %542 to i32, !dbg !80
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 1, i32 31), !dbg !80
  %548 = bitcast i32 %547 to float, !dbg !80
  %549 = bitcast float %532 to i32, !dbg !80
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 1, i32 31), !dbg !80
  %551 = bitcast i32 %550 to float, !dbg !80
  %552 = fsub float %545, %537, !dbg !82
  %553 = fadd float %532, %551, !dbg !84
  %554 = fcmp oeq float %553, 0.000000e+00, !dbg !85
  %555 = tail call float @llvm.nvvm.div.full(float %551, float %553), !dbg !86
  %556 = select i1 %554, float 0.000000e+00, float %555, !dbg !87
  %557 = fmul float %552, %556, !dbg !88
  %558 = fadd float %537, %557, !dbg !89
  %559 = fadd float %542, %548, !dbg !90
  %560 = fmul float %552, %552, !dbg !91
  %561 = fmul float %532, %560, !dbg !92
  %562 = fmul float %556, %561, !dbg !93
  %563 = fadd float %559, %562, !dbg !94
  %564 = and i32 %19, 15, !dbg !80
  %565 = icmp eq i32 %564, 0, !dbg !80
  %566 = and i1 %473, %565, !dbg !80
  %567 = bitcast float %558 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %567, i1 %566) #5, !dbg !80
  %568 = bitcast float %563 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %568, i1 %566) #5, !dbg !80
  %569 = bitcast float %553 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %569, i1 %566) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %570 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %571 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %572 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !80
  %573 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !80
  %574 = tail call float @llvm.nvvm.div.full(float %572, float 3.072000e+03), !dbg !95
  %575 = tail call float @llvm.nvvm.div.full(float %573, float 3.072000e+03), !dbg !95
  %576 = fadd float %574, 0x3EB0C6F7A0000000, !dbg !96
  %577 = fadd float %575, 0x3EB0C6F7A0000000, !dbg !96
  %578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %579 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i46 = icmp eq i32 %579, 0, !dbg !97
  br i1 %.not.i46, label %582, label %580, !dbg !97

580:                                              ; preds = %__nv_rsqrtf.exit
  %581 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %576), !dbg !97
  br label %__nv_rsqrtf.exit48, !dbg !97

582:                                              ; preds = %__nv_rsqrtf.exit
  %583 = tail call float @llvm.nvvm.rsqrt.approx.f(float %576), !dbg !97
  br label %__nv_rsqrtf.exit48, !dbg !97

__nv_rsqrtf.exit48:                               ; preds = %580, %582
  %.0.i47 = phi float [ %581, %580 ], [ %583, %582 ], !dbg !97
  %584 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i52 = icmp eq i32 %585, 0, !dbg !97
  br i1 %.not.i52, label %588, label %586, !dbg !97

586:                                              ; preds = %__nv_rsqrtf.exit48
  %587 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %577), !dbg !97
  br label %__nv_rsqrtf.exit54, !dbg !97

588:                                              ; preds = %__nv_rsqrtf.exit48
  %589 = tail call float @llvm.nvvm.rsqrt.approx.f(float %577), !dbg !97
  br label %__nv_rsqrtf.exit54, !dbg !97

__nv_rsqrtf.exit54:                               ; preds = %586, %588
  %.0.i53 = phi float [ %587, %586 ], [ %589, %588 ], !dbg !97
  %590 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %60
  %591 = getelementptr bfloat, ptr addrspace(3) %590, i32 %58
  %592 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 2056
  %593 = getelementptr inbounds nuw i8, ptr addrspace(3) %63, i32 2058
  %594 = getelementptr inbounds nuw i8, ptr addrspace(3) %591, i32 4
  %595 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !98
  %596 = shufflevector <2 x i1> %595, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %597 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !99
  %598 = shufflevector <2 x float> %597, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %599 = insertelement <2 x float> poison, float %570, i64 0, !dbg !100
  %600 = shufflevector <2 x float> %599, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  %invariant.op = or i32 %26, 12288, !dbg !101
  br label %601, !dbg !101

601:                                              ; preds = %__nv_rsqrtf.exit54, %601
  %indvars.iv78 = phi i64 [ 0, %__nv_rsqrtf.exit54 ], [ %indvars.iv.next79, %601 ]
  %602 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit54 ], [ %680, %601 ]
  %603 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit54 ], [ %681, %601 ]
  %604 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit54 ], [ %679, %601 ]
  %605 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit54 ], [ %691, %601 ]
  %606 = or disjoint i64 %indvars.iv78, %69, !dbg !102
  %607 = trunc nuw nsw i64 %indvars.iv78 to i32, !dbg !103
  %608 = add i32 %57, %607, !dbg !103
  %609 = sext i32 %608 to i64, !dbg !104
  %610 = getelementptr bfloat, ptr addrspace(1) %8, i64 %609, !dbg !104
  %611 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %610, i1 %23) #5, !dbg !105
  %612 = extractvalue { i32, i32 } %611, 0, !dbg !105
  %613 = extractvalue { i32, i32 } %611, 1, !dbg !105
  %extelt.offset = lshr i32 %612, 16, !dbg !105
  %614 = trunc nuw i32 %extelt.offset to i16, !dbg !105
  %extelt.offset9 = lshr i32 %613, 16, !dbg !105
  %615 = trunc nuw i32 %extelt.offset9 to i16, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %616 = trunc i32 %612 to i16, !dbg !99
  %617 = trunc i32 %613 to i16, !dbg !99
  tail call void asm sideeffect "@$5 st.shared.v4.b16 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %591, i16 %616, i16 %614, i16 %617, i16 %615, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %618 = load bfloat, ptr addrspace(3) %592, align 4, !dbg !99
  %619 = load bfloat, ptr addrspace(3) %593, align 2, !dbg !99
  %620 = fpext bfloat %618 to float, !dbg !106
  %621 = fpext bfloat %619 to float, !dbg !106
  %.reass.reass.reass = or i32 %607, %invariant.op
  %622 = zext nneg i32 %.reass.reass.reass to i64, !dbg !107
  %623 = getelementptr float, ptr addrspace(1) %1, i64 %622, !dbg !107
  %624 = getelementptr bfloat, ptr addrspace(1) %2, i64 %622, !dbg !108
  %625 = add nuw nsw i64 %606, 9216, !dbg !109
  %626 = getelementptr float, ptr addrspace(1) %1, i64 %625, !dbg !110
  %627 = getelementptr bfloat, ptr addrspace(1) %2, i64 %625, !dbg !111
  %628 = fsub float %620, %571, !dbg !100
  %629 = fsub float %621, %571, !dbg !100
  %630 = fmul float %.0.i53, %628, !dbg !99
  %631 = fmul float %.0.i53, %629, !dbg !99
  %632 = fcmp uno <2 x float> %604, zeroinitializer, !dbg !112
  %633 = fcmp uno float %602, 0.000000e+00, !dbg !112
  %634 = fcmp uno float %603, 0.000000e+00, !dbg !112
  %635 = load <2 x bfloat>, ptr addrspace(3) %63, align 4, !dbg !99
  %636 = fpext <2 x bfloat> %635 to <2 x float>, !dbg !106
  %637 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %623, i1 true) #5, !dbg !114
  %638 = extractvalue { i32, i32 } %637, 0, !dbg !114
  %639 = extractvalue { i32, i32 } %637, 1, !dbg !114
  %640 = insertelement <2 x i32> poison, i32 %638, i64 0, !dbg !114
  %641 = insertelement <2 x i32> %640, i32 %639, i64 1, !dbg !114
  %642 = bitcast <2 x i32> %641 to <2 x float>, !dbg !114
  %643 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %624, i1 true) #5, !dbg !115
  %644 = bitcast i32 %643 to <2 x bfloat>, !dbg !115
  %645 = fpext <2 x bfloat> %644 to <2 x float>, !dbg !116
  %646 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %626, i1 true) #5, !dbg !117
  %647 = extractvalue { i32, i32 } %646, 0, !dbg !117
  %648 = extractvalue { i32, i32 } %646, 1, !dbg !117
  %649 = insertelement <2 x i32> poison, i32 %647, i64 0, !dbg !117
  %650 = insertelement <2 x i32> %649, i32 %648, i64 1, !dbg !117
  %651 = bitcast <2 x i32> %650 to <2 x float>, !dbg !117
  %652 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %627, i1 true) #5, !dbg !118
  %653 = bitcast i32 %652 to <2 x bfloat>, !dbg !118
  %654 = fpext <2 x bfloat> %653 to <2 x float>, !dbg !119
  %655 = fsub <2 x float> %636, %600, !dbg !100
  %656 = fmul <2 x float> %598, %655, !dbg !99
  %657 = fadd <2 x float> %642, %645, !dbg !120
  %658 = fadd <2 x float> %657, splat (float 1.000000e+00), !dbg !121
  %659 = fmul <2 x float> %656, %658, !dbg !122
  %660 = extractelement <2 x float> %658, i64 0, !dbg !122
  %661 = fmul float %630, %660, !dbg !122
  %662 = extractelement <2 x float> %658, i64 1, !dbg !122
  %663 = fmul float %631, %662, !dbg !122
  %664 = fadd <2 x float> %651, %654, !dbg !123
  %665 = fadd <2 x float> %659, %664, !dbg !124
  %666 = extractelement <2 x float> %664, i64 0, !dbg !124
  %667 = fadd float %661, %666, !dbg !124
  %668 = extractelement <2 x float> %664, i64 1, !dbg !124
  %669 = fadd float %663, %668, !dbg !124
  %670 = fcmp olt <2 x float> %604, %665, !dbg !125
  %671 = fcmp olt float %602, %667, !dbg !125
  %672 = fcmp olt float %603, %669, !dbg !125
  %673 = or <2 x i1> %632, %670, !dbg !126
  %674 = or i1 %633, %671, !dbg !126
  %675 = or i1 %634, %672, !dbg !126
  %676 = select <2 x i1> %673, <2 x float> %604, <2 x float> %665, !dbg !127
  %677 = select i1 %674, float %602, float %667, !dbg !127
  %678 = select i1 %675, float %603, float %669, !dbg !127
  %679 = select <2 x i1> %596, <2 x float> %676, <2 x float> %604, !dbg !98
  %680 = select i1 %24, float %677, float %602, !dbg !98
  %681 = select i1 %24, float %678, float %603, !dbg !98
  %682 = extractelement <2 x float> %665, i64 0, !dbg !128
  %683 = extractelement <2 x float> %665, i64 1, !dbg !128
  %684 = fcmp uno <4 x float> %605, zeroinitializer, !dbg !129
  %685 = shufflevector <2 x float> %665, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !131
  %686 = insertelement <4 x float> %685, float %667, i64 2, !dbg !131
  %687 = insertelement <4 x float> %686, float %669, i64 3, !dbg !131
  %688 = fcmp ogt <4 x float> %605, %687, !dbg !131
  %689 = or <4 x i1> %684, %688, !dbg !132
  %690 = select <4 x i1> %689, <4 x float> %605, <4 x float> %687, !dbg !133
  %691 = select <4 x i1> %72, <4 x float> %690, <4 x float> %605, !dbg !134
  %692 = getelementptr bfloat, ptr addrspace(1) %9, i64 %609, !dbg !135
  %693 = fptrunc float %682 to bfloat, !dbg !128
  %694 = fptrunc float %683 to bfloat, !dbg !128
  %695 = fptrunc float %667 to bfloat, !dbg !128
  %696 = fptrunc float %669 to bfloat, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %697 = bitcast bfloat %693 to i16, !dbg !128
  %698 = bitcast bfloat %694 to i16, !dbg !128
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %63, i16 %697, i16 %698, i1 true) #5, !dbg !128
  %699 = bitcast bfloat %695 to i16, !dbg !128
  %700 = bitcast bfloat %696 to i16, !dbg !128
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %592, i16 %699, i16 %700, i1 true) #5, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %.uncasted.extract = load i32, ptr addrspace(3) %591, align 8, !dbg !128
  %.uncasted.extract18 = load i32, ptr addrspace(3) %594, align 4, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.uncasted.extract, i32 %.uncasted.extract18, ptr addrspace(1) %692, i1 %23) #5, !dbg !128
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1024, !dbg !101
  %701 = icmp samesign ult i64 %indvars.iv78, 2048, !dbg !101
  br i1 %701, label %601, label %702, !dbg !101

702:                                              ; preds = %601
  %703 = and i32 %19, 1, !dbg !11
  %704 = or disjoint i32 %18, %703, !dbg !12
  %705 = icmp slt i32 %704, 3600, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %706 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %679, <2 x i32> <i32 0, i32 2>, !dbg !138
  %707 = fcmp olt <2 x float> %706, %679, !dbg !138
  %708 = fcmp uno <2 x float> %706, %679, !dbg !138
  %shift = shufflevector <2 x i1> %707, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %709 = or <2 x i1> %shift, %708, !dbg !139
  %710 = extractelement <2 x i1> %709, i64 0, !dbg !139
  %711 = extractelement <2 x float> %679, i64 0, !dbg !140
  %712 = extractelement <2 x float> %679, i64 1, !dbg !140
  %713 = select i1 %710, float %711, float %712, !dbg !140
  %714 = fcmp olt float %680, %681, !dbg !138
  %715 = fcmp uno float %680, 0.000000e+00, !dbg !141
  %716 = or i1 %714, %715, !dbg !139
  %717 = select i1 %716, float %680, float %681, !dbg !140
  %718 = bitcast float %713 to i32, !dbg !136
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 16, i32 31), !dbg !136
  %720 = bitcast i32 %719 to float, !dbg !136
  %721 = fcmp olt float %713, %720, !dbg !138
  %722 = fcmp uno float %713, 0.000000e+00, !dbg !141
  %723 = or i1 %722, %721, !dbg !139
  %724 = select i1 %723, float %713, float %720, !dbg !140
  %725 = bitcast float %724 to i32, !dbg !136
  %726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %725, i32 8, i32 31), !dbg !136
  %727 = bitcast i32 %726 to float, !dbg !136
  %728 = fcmp olt float %724, %727, !dbg !138
  %729 = fcmp uno float %724, 0.000000e+00, !dbg !141
  %730 = or i1 %728, %729, !dbg !139
  %731 = select i1 %730, float %724, float %727, !dbg !140
  %732 = bitcast float %731 to i32, !dbg !136
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 4, i32 31), !dbg !136
  %734 = bitcast i32 %733 to float, !dbg !136
  %735 = fcmp olt float %731, %734, !dbg !138
  %736 = fcmp uno float %731, 0.000000e+00, !dbg !141
  %737 = or i1 %735, %736, !dbg !139
  %738 = select i1 %737, float %731, float %734, !dbg !140
  %739 = bitcast float %738 to i32, !dbg !136
  %740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %739, i32 2, i32 31), !dbg !136
  %741 = bitcast i32 %740 to float, !dbg !136
  %742 = fcmp olt float %738, %741, !dbg !138
  %743 = fcmp uno float %738, 0.000000e+00, !dbg !141
  %744 = or i1 %742, %743, !dbg !139
  %745 = select i1 %744, float %738, float %741, !dbg !140
  %746 = bitcast float %745 to i32, !dbg !136
  %747 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %746, i32 1, i32 31), !dbg !136
  %748 = bitcast i32 %747 to float, !dbg !136
  %749 = fcmp olt float %745, %748, !dbg !138
  %750 = fcmp uno float %745, 0.000000e+00, !dbg !141
  %751 = or i1 %749, %750, !dbg !139
  %752 = bitcast float %717 to i32, !dbg !136
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 16, i32 31), !dbg !136
  %754 = bitcast i32 %753 to float, !dbg !136
  %755 = fcmp olt float %717, %754, !dbg !138
  %756 = fcmp uno float %717, 0.000000e+00, !dbg !141
  %757 = or i1 %756, %755, !dbg !139
  %758 = select i1 %757, float %717, float %754, !dbg !140
  %759 = bitcast float %758 to i32, !dbg !136
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 8, i32 31), !dbg !136
  %761 = bitcast i32 %760 to float, !dbg !136
  %762 = fcmp olt float %758, %761, !dbg !138
  %763 = fcmp uno float %758, 0.000000e+00, !dbg !141
  %764 = or i1 %762, %763, !dbg !139
  %765 = select i1 %764, float %758, float %761, !dbg !140
  %766 = bitcast float %765 to i32, !dbg !136
  %767 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %766, i32 4, i32 31), !dbg !136
  %768 = bitcast i32 %767 to float, !dbg !136
  %769 = fcmp olt float %765, %768, !dbg !138
  %770 = fcmp uno float %765, 0.000000e+00, !dbg !141
  %771 = or i1 %769, %770, !dbg !139
  %772 = select i1 %771, float %765, float %768, !dbg !140
  %773 = bitcast float %772 to i32, !dbg !136
  %774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %773, i32 2, i32 31), !dbg !136
  %775 = bitcast i32 %774 to float, !dbg !136
  %776 = fcmp olt float %772, %775, !dbg !138
  %777 = fcmp uno float %772, 0.000000e+00, !dbg !141
  %778 = or i1 %776, %777, !dbg !139
  %779 = select i1 %778, float %772, float %775, !dbg !140
  %780 = bitcast float %779 to i32, !dbg !136
  %781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 1, i32 31), !dbg !136
  %782 = bitcast i32 %781 to float, !dbg !136
  %783 = fcmp olt float %779, %782, !dbg !138
  %784 = fcmp uno float %779, 0.000000e+00, !dbg !141
  %785 = or i1 %783, %784, !dbg !139
  %786 = select i1 %751, i32 %746, i32 %747, !dbg !140
  %787 = insertelement <1 x i32> poison, i32 %786, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %787, i1 %459) #5, !dbg !136
  %788 = select i1 %785, i32 %780, i32 %781, !dbg !140
  %789 = insertelement <1 x i32> poison, i32 %788, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %789, i1 %459) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %790 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %474, i1 %473) #5, !dbg !136
  %791 = bitcast i32 %790 to float, !dbg !136
  %792 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %790, i32 8, i32 31), !dbg !136
  %793 = bitcast i32 %792 to float, !dbg !136
  %794 = fcmp olt float %791, %793, !dbg !138
  %795 = fcmp uno float %791, 0.000000e+00, !dbg !141
  %796 = or i1 %795, %794, !dbg !139
  %797 = select i1 %796, float %791, float %793, !dbg !140
  %798 = bitcast float %797 to i32, !dbg !136
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 4, i32 31), !dbg !136
  %800 = bitcast i32 %799 to float, !dbg !136
  %801 = fcmp olt float %797, %800, !dbg !138
  %802 = fcmp uno float %797, 0.000000e+00, !dbg !141
  %803 = or i1 %801, %802, !dbg !139
  %804 = select i1 %803, float %797, float %800, !dbg !140
  %805 = bitcast float %804 to i32, !dbg !136
  %806 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %805, i32 2, i32 31), !dbg !136
  %807 = bitcast i32 %806 to float, !dbg !136
  %808 = fcmp olt float %804, %807, !dbg !138
  %809 = fcmp uno float %804, 0.000000e+00, !dbg !141
  %810 = or i1 %808, %809, !dbg !139
  %811 = select i1 %810, float %804, float %807, !dbg !140
  %812 = bitcast float %811 to i32, !dbg !136
  %813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %812, i32 1, i32 31), !dbg !136
  %814 = bitcast i32 %813 to float, !dbg !136
  %815 = fcmp olt float %811, %814, !dbg !138
  %816 = fcmp uno float %811, 0.000000e+00, !dbg !141
  %817 = or i1 %815, %816, !dbg !139
  %818 = select i1 %817, i32 %812, i32 %813, !dbg !140
  %819 = insertelement <1 x i32> poison, i32 %818, i64 0, !dbg !136
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %819, i1 %566) #5, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %820 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !136
  %821 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %822 = bitcast float %820 to i32, !dbg !142
  %823 = bitcast float %821 to i32, !dbg !142
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %822, i32 %823, i1 true) #5, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %824 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %703, !dbg !142
  %825 = load float, ptr addrspace(3) %824, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %826 = extractelement <4 x float> %691, i64 0, !dbg !145
  %827 = extractelement <4 x float> %691, i64 1, !dbg !145
  %828 = fcmp ogt float %826, %827, !dbg !145
  %829 = fcmp uno float %826, 0.000000e+00, !dbg !146
  %830 = or i1 %828, %829, !dbg !147
  %831 = select i1 %830, float %826, float %827, !dbg !148
  %832 = extractelement <4 x float> %691, i64 2, !dbg !145
  %833 = extractelement <4 x float> %691, i64 3, !dbg !145
  %834 = fcmp ogt float %832, %833, !dbg !145
  %835 = fcmp uno float %832, 0.000000e+00, !dbg !146
  %836 = or i1 %834, %835, !dbg !147
  %837 = select i1 %836, float %832, float %833, !dbg !148
  %838 = bitcast float %831 to i32, !dbg !143
  %839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %838, i32 16, i32 31), !dbg !143
  %840 = bitcast i32 %839 to float, !dbg !143
  %841 = fcmp ogt float %831, %840, !dbg !145
  %842 = fcmp uno float %831, 0.000000e+00, !dbg !146
  %843 = or i1 %842, %841, !dbg !147
  %844 = select i1 %843, float %831, float %840, !dbg !148
  %845 = bitcast float %844 to i32, !dbg !143
  %846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %845, i32 8, i32 31), !dbg !143
  %847 = bitcast i32 %846 to float, !dbg !143
  %848 = fcmp ogt float %844, %847, !dbg !145
  %849 = fcmp uno float %844, 0.000000e+00, !dbg !146
  %850 = or i1 %848, %849, !dbg !147
  %851 = select i1 %850, float %844, float %847, !dbg !148
  %852 = bitcast float %851 to i32, !dbg !143
  %853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 4, i32 31), !dbg !143
  %854 = bitcast i32 %853 to float, !dbg !143
  %855 = fcmp ogt float %851, %854, !dbg !145
  %856 = fcmp uno float %851, 0.000000e+00, !dbg !146
  %857 = or i1 %855, %856, !dbg !147
  %858 = select i1 %857, float %851, float %854, !dbg !148
  %859 = bitcast float %858 to i32, !dbg !143
  %860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %859, i32 2, i32 31), !dbg !143
  %861 = bitcast i32 %860 to float, !dbg !143
  %862 = fcmp ogt float %858, %861, !dbg !145
  %863 = fcmp uno float %858, 0.000000e+00, !dbg !146
  %864 = or i1 %862, %863, !dbg !147
  %865 = select i1 %864, float %858, float %861, !dbg !148
  %866 = bitcast float %865 to i32, !dbg !143
  %867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %866, i32 1, i32 31), !dbg !143
  %868 = bitcast i32 %867 to float, !dbg !143
  %869 = fcmp ogt float %865, %868, !dbg !145
  %870 = fcmp uno float %865, 0.000000e+00, !dbg !146
  %871 = or i1 %869, %870, !dbg !147
  %872 = bitcast float %837 to i32, !dbg !143
  %873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %872, i32 16, i32 31), !dbg !143
  %874 = bitcast i32 %873 to float, !dbg !143
  %875 = fcmp ogt float %837, %874, !dbg !145
  %876 = fcmp uno float %837, 0.000000e+00, !dbg !146
  %877 = or i1 %876, %875, !dbg !147
  %878 = select i1 %877, float %837, float %874, !dbg !148
  %879 = bitcast float %878 to i32, !dbg !143
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 8, i32 31), !dbg !143
  %881 = bitcast i32 %880 to float, !dbg !143
  %882 = fcmp ogt float %878, %881, !dbg !145
  %883 = fcmp uno float %878, 0.000000e+00, !dbg !146
  %884 = or i1 %882, %883, !dbg !147
  %885 = select i1 %884, float %878, float %881, !dbg !148
  %886 = bitcast float %885 to i32, !dbg !143
  %887 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %886, i32 4, i32 31), !dbg !143
  %888 = bitcast i32 %887 to float, !dbg !143
  %889 = fcmp ogt float %885, %888, !dbg !145
  %890 = fcmp uno float %885, 0.000000e+00, !dbg !146
  %891 = or i1 %889, %890, !dbg !147
  %892 = select i1 %891, float %885, float %888, !dbg !148
  %893 = bitcast float %892 to i32, !dbg !143
  %894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %893, i32 2, i32 31), !dbg !143
  %895 = bitcast i32 %894 to float, !dbg !143
  %896 = fcmp ogt float %892, %895, !dbg !145
  %897 = fcmp uno float %892, 0.000000e+00, !dbg !146
  %898 = or i1 %896, %897, !dbg !147
  %899 = select i1 %898, float %892, float %895, !dbg !148
  %900 = bitcast float %899 to i32, !dbg !143
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 1, i32 31), !dbg !143
  %902 = bitcast i32 %901 to float, !dbg !143
  %903 = fcmp ogt float %899, %902, !dbg !145
  %904 = fcmp uno float %899, 0.000000e+00, !dbg !146
  %905 = or i1 %903, %904, !dbg !147
  %906 = select i1 %871, i32 %866, i32 %867, !dbg !148
  %907 = insertelement <1 x i32> poison, i32 %906, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %907, i1 %459) #5, !dbg !143
  %908 = select i1 %905, i32 %900, i32 %901, !dbg !148
  %909 = insertelement <1 x i32> poison, i32 %908, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %909, i1 %459) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %910 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %474, i1 %473) #5, !dbg !143
  %911 = bitcast i32 %910 to float, !dbg !143
  %912 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %910, i32 8, i32 31), !dbg !143
  %913 = bitcast i32 %912 to float, !dbg !143
  %914 = fcmp ogt float %911, %913, !dbg !145
  %915 = fcmp uno float %911, 0.000000e+00, !dbg !146
  %916 = or i1 %915, %914, !dbg !147
  %917 = select i1 %916, float %911, float %913, !dbg !148
  %918 = bitcast float %917 to i32, !dbg !143
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 4, i32 31), !dbg !143
  %920 = bitcast i32 %919 to float, !dbg !143
  %921 = fcmp ogt float %917, %920, !dbg !145
  %922 = fcmp uno float %917, 0.000000e+00, !dbg !146
  %923 = or i1 %921, %922, !dbg !147
  %924 = select i1 %923, float %917, float %920, !dbg !148
  %925 = bitcast float %924 to i32, !dbg !143
  %926 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %925, i32 2, i32 31), !dbg !143
  %927 = bitcast i32 %926 to float, !dbg !143
  %928 = fcmp ogt float %924, %927, !dbg !145
  %929 = fcmp uno float %924, 0.000000e+00, !dbg !146
  %930 = or i1 %928, %929, !dbg !147
  %931 = select i1 %930, float %924, float %927, !dbg !148
  %932 = bitcast float %931 to i32, !dbg !143
  %933 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %932, i32 1, i32 31), !dbg !143
  %934 = bitcast i32 %933 to float, !dbg !143
  %935 = fcmp ogt float %931, %934, !dbg !145
  %936 = fcmp uno float %931, 0.000000e+00, !dbg !146
  %937 = or i1 %935, %936, !dbg !147
  %938 = select i1 %937, i32 %932, i32 %933, !dbg !148
  %939 = insertelement <1 x i32> poison, i32 %938, i64 0, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %939, i1 %566) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %940 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !143
  %941 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %942 = bitcast float %940 to i32, !dbg !149
  %943 = bitcast float %941 to i32, !dbg !149
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %942, i32 %943, i1 true) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %944 = load float, ptr addrspace(3) %824, align 4, !dbg !149
  %945 = sext i32 %704 to i64, !dbg !150
  %946 = getelementptr bfloat, ptr addrspace(1) %10, i64 %945, !dbg !150
  %947 = fptrunc float %825 to bfloat, !dbg !142
  %948 = and i32 %19, 510, !dbg !142
  %949 = icmp eq i32 %948, 0, !dbg !142
  %950 = bitcast bfloat %947 to i16, !dbg !142
  %951 = and i1 %949, %705, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %950, ptr addrspace(1) %946, i1 %951) #5, !dbg !142
  %952 = getelementptr bfloat, ptr addrspace(1) %11, i64 %945, !dbg !151
  %953 = fptrunc float %944 to bfloat, !dbg !149
  %954 = bitcast bfloat %953 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %954, ptr addrspace(1) %952, i1 %951) #5, !dbg !149
  %.inv5 = fcmp oge float %820, 0.000000e+00, !dbg !152
  %955 = select i1 %.inv5, float 0.000000e+00, float %820, !dbg !152
  %.inv6 = fcmp oge float %821, 0.000000e+00, !dbg !152
  %956 = select i1 %.inv6, float 0.000000e+00, float %821, !dbg !152
  %957 = fsub float 0.000000e+00, %955, !dbg !154
  %958 = fsub float 0.000000e+00, %956, !dbg !154
  %.inv7 = fcmp ole float %940, 0.000000e+00, !dbg !155
  %959 = select i1 %.inv7, float 0.000000e+00, float %940, !dbg !155
  %.inv8 = fcmp ole float %941, 0.000000e+00, !dbg !155
  %960 = select i1 %.inv8, float 0.000000e+00, float %941, !dbg !155
  %961 = fcmp ogt float %957, %959, !dbg !157
  %962 = fcmp ogt float %958, %960, !dbg !157
  %963 = fcmp uno float %957, 0.000000e+00, !dbg !159
  %964 = fcmp uno float %958, 0.000000e+00, !dbg !159
  %965 = or i1 %963, %961, !dbg !160
  %966 = or i1 %964, %962, !dbg !160
  %967 = select i1 %965, float %957, float %959, !dbg !161
  %968 = select i1 %966, float %958, float %960, !dbg !161
  %969 = fmul float %967, 0x3F80204080000000, !dbg !162
  %970 = fmul float %968, 0x3F80204080000000, !dbg !162
  %971 = fcmp ogt float %969, 0x3EE4F8B580000000, !dbg !163
  %972 = fcmp ogt float %970, 0x3EE4F8B580000000, !dbg !163
  %973 = fcmp uno float %969, 0.000000e+00, !dbg !165
  %974 = fcmp uno float %970, 0.000000e+00, !dbg !165
  %975 = or i1 %971, %973, !dbg !166
  %976 = or i1 %972, %974, !dbg !166
  %977 = select i1 %975, float %969, float 0x3EE4F8B580000000, !dbg !167
  %978 = select i1 %976, float %970, float 0x3EE4F8B580000000, !dbg !167
  %979 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %977), !dbg !168
  %980 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %978), !dbg !168
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %981 = bitcast float %979 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %981, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %981, i1 true) #5, !dbg !169
  %982 = bitcast float %980 to <1 x i32>, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %982, i1 true) #5, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %982, i1 true) #5, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %983 = lshr exact i32 %20, 5, !dbg !169
  %984 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %983, !dbg !169
  %985 = load float, ptr addrspace(3) %984, align 8, !dbg !169
  %986 = sext i32 %57 to i64, !dbg !170
  %987 = getelementptr bfloat, ptr addrspace(1) %9, i64 %986, !dbg !170
  %988 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %987, i1 %23) #5, !dbg !171
  %989 = extractvalue { i32, i32 } %988, 0, !dbg !171
  %990 = bitcast i32 %989 to <2 x bfloat>, !dbg !171
  %991 = extractvalue { i32, i32 } %988, 1, !dbg !171
  %992 = bitcast i32 %991 to <2 x bfloat>, !dbg !171
  %993 = extractelement <2 x bfloat> %990, i64 0, !dbg !171
  %994 = extractelement <2 x bfloat> %990, i64 1, !dbg !171
  %995 = extractelement <2 x bfloat> %992, i64 0, !dbg !171
  %996 = extractelement <2 x bfloat> %992, i64 1, !dbg !171
  %997 = fpext bfloat %993 to float, !dbg !172
  %998 = fpext bfloat %994 to float, !dbg !172
  %999 = fpext bfloat %995 to float, !dbg !172
  %1000 = fpext bfloat %996 to float, !dbg !172
  %1001 = fmul float %985, %997, !dbg !169
  %1002 = fmul float %985, %998, !dbg !169
  %1003 = fmul float %985, %999, !dbg !169
  %1004 = fmul float %985, %1000, !dbg !169
  %1005 = tail call float @llvm.nvvm.round.f(float %1001) #5, !dbg !173
  %1006 = tail call float @llvm.nvvm.round.f(float %1002) #5, !dbg !173
  %1007 = tail call float @llvm.nvvm.round.f(float %1003) #5, !dbg !173
  %1008 = tail call float @llvm.nvvm.round.f(float %1004) #5, !dbg !173
  %1009 = insertelement <4 x float> poison, float %1005, i64 0, !dbg !174
  %1010 = insertelement <4 x float> %1009, float %1006, i64 1, !dbg !174
  %1011 = insertelement <4 x float> %1010, float %1007, i64 2, !dbg !174
  %1012 = insertelement <4 x float> %1011, float %1008, i64 3, !dbg !174
  %1013 = fcmp ogt <4 x float> %1012, splat (float -1.270000e+02), !dbg !174
  %1014 = fcmp uno <4 x float> %1012, zeroinitializer, !dbg !176
  %1015 = or <4 x i1> %1013, %1014, !dbg !177
  %1016 = select <4 x i1> %1015, <4 x float> %1012, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1017 = fcmp olt <4 x float> %1016, splat (float 1.270000e+02), !dbg !179
  %1018 = fcmp uno <4 x float> %1016, zeroinitializer, !dbg !181
  %1019 = or <4 x i1> %1017, %1018, !dbg !182
  %1020 = fptosi <4 x float> %1016 to <4 x i8>, !dbg !183
  %1021 = select <4 x i1> %1019, <4 x i8> %1020, <4 x i8> splat (i8 127), !dbg !184
  %1022 = getelementptr i8, ptr addrspace(1) %12, i64 %986, !dbg !185
  %1023 = bitcast <4 x i8> %1021 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1023, ptr addrspace(1) %1022, i1 %23) #5, !dbg !186
  %1024 = add i32 %57, 1024, !dbg !187
  %1025 = sext i32 %1024 to i64, !dbg !170
  %1026 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1025, !dbg !170
  %1027 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1026, i1 %23) #5, !dbg !171
  %1028 = extractvalue { i32, i32 } %1027, 0, !dbg !171
  %1029 = bitcast i32 %1028 to <2 x bfloat>, !dbg !171
  %1030 = extractvalue { i32, i32 } %1027, 1, !dbg !171
  %1031 = bitcast i32 %1030 to <2 x bfloat>, !dbg !171
  %1032 = extractelement <2 x bfloat> %1029, i64 0, !dbg !171
  %1033 = extractelement <2 x bfloat> %1029, i64 1, !dbg !171
  %1034 = extractelement <2 x bfloat> %1031, i64 0, !dbg !171
  %1035 = extractelement <2 x bfloat> %1031, i64 1, !dbg !171
  %1036 = fpext bfloat %1032 to float, !dbg !172
  %1037 = fpext bfloat %1033 to float, !dbg !172
  %1038 = fpext bfloat %1034 to float, !dbg !172
  %1039 = fpext bfloat %1035 to float, !dbg !172
  %1040 = fmul float %985, %1036, !dbg !169
  %1041 = fmul float %985, %1037, !dbg !169
  %1042 = fmul float %985, %1038, !dbg !169
  %1043 = fmul float %985, %1039, !dbg !169
  %1044 = tail call float @llvm.nvvm.round.f(float %1040) #5, !dbg !173
  %1045 = tail call float @llvm.nvvm.round.f(float %1041) #5, !dbg !173
  %1046 = tail call float @llvm.nvvm.round.f(float %1042) #5, !dbg !173
  %1047 = tail call float @llvm.nvvm.round.f(float %1043) #5, !dbg !173
  %1048 = insertelement <4 x float> poison, float %1044, i64 0, !dbg !174
  %1049 = insertelement <4 x float> %1048, float %1045, i64 1, !dbg !174
  %1050 = insertelement <4 x float> %1049, float %1046, i64 2, !dbg !174
  %1051 = insertelement <4 x float> %1050, float %1047, i64 3, !dbg !174
  %1052 = fcmp ogt <4 x float> %1051, splat (float -1.270000e+02), !dbg !174
  %1053 = fcmp uno <4 x float> %1051, zeroinitializer, !dbg !176
  %1054 = or <4 x i1> %1052, %1053, !dbg !177
  %1055 = select <4 x i1> %1054, <4 x float> %1051, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1056 = fcmp olt <4 x float> %1055, splat (float 1.270000e+02), !dbg !179
  %1057 = fcmp uno <4 x float> %1055, zeroinitializer, !dbg !181
  %1058 = or <4 x i1> %1056, %1057, !dbg !182
  %1059 = fptosi <4 x float> %1055 to <4 x i8>, !dbg !183
  %1060 = select <4 x i1> %1058, <4 x i8> %1059, <4 x i8> splat (i8 127), !dbg !184
  %1061 = getelementptr i8, ptr addrspace(1) %12, i64 %1025, !dbg !185
  %1062 = bitcast <4 x i8> %1060 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1062, ptr addrspace(1) %1061, i1 %23) #5, !dbg !186
  %1063 = add i32 %57, 2048, !dbg !187
  %1064 = sext i32 %1063 to i64, !dbg !170
  %1065 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1064, !dbg !170
  %1066 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %1065, i1 %23) #5, !dbg !171
  %1067 = extractvalue { i32, i32 } %1066, 0, !dbg !171
  %1068 = bitcast i32 %1067 to <2 x bfloat>, !dbg !171
  %1069 = extractvalue { i32, i32 } %1066, 1, !dbg !171
  %1070 = bitcast i32 %1069 to <2 x bfloat>, !dbg !171
  %1071 = extractelement <2 x bfloat> %1068, i64 0, !dbg !171
  %1072 = extractelement <2 x bfloat> %1068, i64 1, !dbg !171
  %1073 = extractelement <2 x bfloat> %1070, i64 0, !dbg !171
  %1074 = extractelement <2 x bfloat> %1070, i64 1, !dbg !171
  %1075 = fpext bfloat %1071 to float, !dbg !172
  %1076 = fpext bfloat %1072 to float, !dbg !172
  %1077 = fpext bfloat %1073 to float, !dbg !172
  %1078 = fpext bfloat %1074 to float, !dbg !172
  %1079 = fmul float %985, %1075, !dbg !169
  %1080 = fmul float %985, %1076, !dbg !169
  %1081 = fmul float %985, %1077, !dbg !169
  %1082 = fmul float %985, %1078, !dbg !169
  %1083 = tail call float @llvm.nvvm.round.f(float %1079) #5, !dbg !173
  %1084 = tail call float @llvm.nvvm.round.f(float %1080) #5, !dbg !173
  %1085 = tail call float @llvm.nvvm.round.f(float %1081) #5, !dbg !173
  %1086 = tail call float @llvm.nvvm.round.f(float %1082) #5, !dbg !173
  %1087 = insertelement <4 x float> poison, float %1083, i64 0, !dbg !174
  %1088 = insertelement <4 x float> %1087, float %1084, i64 1, !dbg !174
  %1089 = insertelement <4 x float> %1088, float %1085, i64 2, !dbg !174
  %1090 = insertelement <4 x float> %1089, float %1086, i64 3, !dbg !174
  %1091 = fcmp ogt <4 x float> %1090, splat (float -1.270000e+02), !dbg !174
  %1092 = fcmp uno <4 x float> %1090, zeroinitializer, !dbg !176
  %1093 = or <4 x i1> %1091, %1092, !dbg !177
  %1094 = select <4 x i1> %1093, <4 x float> %1090, <4 x float> splat (float -1.270000e+02), !dbg !178
  %1095 = fcmp olt <4 x float> %1094, splat (float 1.270000e+02), !dbg !179
  %1096 = fcmp uno <4 x float> %1094, zeroinitializer, !dbg !181
  %1097 = or <4 x i1> %1095, %1096, !dbg !182
  %1098 = fptosi <4 x float> %1094 to <4 x i8>, !dbg !183
  %1099 = select <4 x i1> %1097, <4 x i8> %1098, <4 x i8> splat (i8 127), !dbg !184
  %1100 = getelementptr i8, ptr addrspace(1) %12, i64 %1064, !dbg !185
  %1101 = bitcast <4 x i8> %1099 to i32, !dbg !186
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1101, ptr addrspace(1) %1100, i1 %23) #5, !dbg !186
  ret void, !dbg !188
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 86, column: 115, scope: !6)
!107 = !DILocation(line: 87, column: 35, scope: !6)
!108 = !DILocation(line: 88, column: 35, scope: !6)
!109 = !DILocation(line: 89, column: 42, scope: !6)
!110 = !DILocation(line: 89, column: 35, scope: !6)
!111 = !DILocation(line: 90, column: 35, scope: !6)
!112 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !113)
!113 = !DILocation(line: 109, column: 47, scope: !6)
!114 = !DILocation(line: 87, column: 50, scope: !6)
!115 = !DILocation(line: 88, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 89, column: 49, scope: !6)
!118 = !DILocation(line: 90, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 102, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 103, column: 24, scope: !6)
!122 = !DILocation(line: 104, column: 24, scope: !6)
!123 = !DILocation(line: 106, column: 24, scope: !6)
!124 = !DILocation(line: 107, column: 24, scope: !6)
!125 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !113)
!126 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !113)
!127 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !113)
!128 = !DILocation(line: 113, column: 53, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !130)
!130 = !DILocation(line: 111, column: 47, scope: !6)
!131 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !130)
!133 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !130)
!134 = !DILocation(line: 112, column: 50, scope: !6)
!135 = !DILocation(line: 113, column: 29, scope: !6)
!136 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !137)
!137 = !DILocation(line: 114, column: 40, scope: !6)
!138 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !137)
!139 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !137)
!140 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !137)
!141 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !137)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !144)
!144 = !DILocation(line: 115, column: 40, scope: !6)
!145 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !144)
!146 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !144)
!147 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !144)
!148 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !144)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 116, column: 25, scope: !6)
!151 = !DILocation(line: 117, column: 25, scope: !6)
!152 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !153)
!153 = !DILocation(line: 126, column: 46, scope: !6)
!154 = !DILocation(line: 127, column: 17, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 129, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 131, column: 24, scope: !6)
!163 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !164)
!164 = !DILocation(line: 134, column: 46, scope: !6)
!165 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !164)
!166 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !164)
!167 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !164)
!168 = !DILocation(line: 137, column: 25, scope: !6)
!169 = !DILocation(line: 140, column: 24, scope: !6)
!170 = !DILocation(line: 124, column: 36, scope: !6)
!171 = !DILocation(line: 124, column: 53, scope: !6)
!172 = !DILocation(line: 124, column: 115, scope: !6)
!173 = !DILocation(line: 141, column: 36, scope: !6)
!174 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !175)
!175 = !DILocation(line: 144, column: 46, scope: !6)
!176 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !175)
!177 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !175)
!178 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !175)
!179 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !180)
!180 = !DILocation(line: 146, column: 46, scope: !6)
!181 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !180)
!182 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !180)
!183 = !DILocation(line: 148, column: 25, scope: !6)
!184 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !180)
!185 = !DILocation(line: 149, column: 29, scope: !6)
!186 = !DILocation(line: 149, column: 53, scope: !6)
!187 = !DILocation(line: 124, column: 43, scope: !6)
!188 = !DILocation(line: 118, column: 4, scope: !6)
