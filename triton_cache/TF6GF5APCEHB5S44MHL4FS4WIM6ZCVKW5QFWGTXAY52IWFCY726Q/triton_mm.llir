; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 1536, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 65, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 1536, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl nsw i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = shl i32 %15, 2, !dbg !19
  %20 = and i32 %19, 16, !dbg !19
  %21 = or disjoint i32 %14, %18, !dbg !20
  %22 = shl nsw i32 %13, 6, !dbg !21
  %23 = or disjoint i32 %22, %18, !dbg !22
  %24 = srem i32 %21, 4112, !dbg !23
  %25 = srem i32 %23, 12288, !dbg !24
  %26 = shl i32 %15, 4, !dbg !25
  %27 = and i32 %26, 16, !dbg !25
  %28 = mul nsw i32 %24, 3072, !dbg !26
  %29 = mul nsw i32 %25, 3072, !dbg !27
  %30 = or disjoint i32 %28, %27, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr i8, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = shl nuw nsw i32 %16, 1, !dbg !30
  %34 = xor i32 %27, %33, !dbg !30
  %35 = shl nuw nsw i32 %18, 5, !dbg !30
  %36 = or disjoint i32 %34, %35, !dbg !30
  %37 = zext nneg i32 %36 to i64, !dbg !30
  %38 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %37, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %38, ptr addrspace(1) %32, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %39 = or disjoint i32 %29, %27, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr i8, ptr addrspace(1) %1, i64 %40, !dbg !32
  %42 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %37, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %42, ptr addrspace(1) %41, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !34
  %43 = and i32 %15, 7
  %44 = and i32 %15, 15
  %45 = xor i32 %19, %15
  %46 = and i32 %45, 16
  %47 = lshr i32 %15, 2
  %48 = and i32 %47, 16
  %49 = or disjoint i32 %48, %44
  %50 = shl nuw nsw i32 %49, 5
  %51 = or disjoint i32 %50, %46
  %52 = zext nneg i32 %51 to i64
  %.reass = or disjoint i32 %43, %invariant.op
  %53 = or disjoint i32 %.reass, %48
  %54 = shl nuw nsw i32 %53, 5
  %55 = or disjoint i32 %54, %46
  %56 = zext nneg i32 %55 to i64
  %57 = xor i32 %20, %33
  %58 = lshr i32 %15, 2
  %59 = and i32 %58, 8
  %60 = or disjoint i32 %59, %43
  %61 = shl nuw nsw i32 %60, 5
  %62 = or disjoint i32 %61, %57
  %63 = zext nneg i32 %62 to i64
  %64 = or disjoint i32 %62, 512
  %65 = zext nneg i32 %64 to i64
  %66 = or disjoint i32 %62, 1024
  %67 = zext nneg i32 %66 to i64
  %68 = or disjoint i32 %62, 1536
  %69 = zext nneg i32 %68 to i64
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %31, !dbg !34
  %invariant.gep104 = getelementptr i8, ptr addrspace(1) %1, i64 %40, !dbg !34
  br label %70, !dbg !34

70:                                               ; preds = %4, %70
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %70 ]
  %71 = phi i32 [ -1, %4 ], [ %106, %70 ]
  %72 = phi i32 [ 0, %4 ], [ %152, %70 ]
  %73 = phi i32 [ 0, %4 ], [ %153, %70 ]
  %74 = phi i32 [ 0, %4 ], [ %154, %70 ]
  %75 = phi i32 [ 0, %4 ], [ %155, %70 ]
  %76 = phi i32 [ 0, %4 ], [ %157, %70 ]
  %77 = phi i32 [ 0, %4 ], [ %158, %70 ]
  %78 = phi i32 [ 0, %4 ], [ %159, %70 ]
  %79 = phi i32 [ 0, %4 ], [ %160, %70 ]
  %80 = phi i32 [ 0, %4 ], [ %162, %70 ]
  %81 = phi i32 [ 0, %4 ], [ %163, %70 ]
  %82 = phi i32 [ 0, %4 ], [ %164, %70 ]
  %83 = phi i32 [ 0, %4 ], [ %165, %70 ]
  %84 = phi i32 [ 0, %4 ], [ %167, %70 ]
  %85 = phi i32 [ 0, %4 ], [ %168, %70 ]
  %86 = phi i32 [ 0, %4 ], [ %169, %70 ]
  %87 = phi i32 [ 0, %4 ], [ %170, %70 ]
  %88 = phi i32 [ 0, %4 ], [ %172, %70 ]
  %89 = phi i32 [ 0, %4 ], [ %173, %70 ]
  %90 = phi i32 [ 0, %4 ], [ %174, %70 ]
  %91 = phi i32 [ 0, %4 ], [ %175, %70 ]
  %92 = phi i32 [ 0, %4 ], [ %177, %70 ]
  %93 = phi i32 [ 0, %4 ], [ %178, %70 ]
  %94 = phi i32 [ 0, %4 ], [ %179, %70 ]
  %95 = phi i32 [ 0, %4 ], [ %180, %70 ]
  %96 = phi i32 [ 0, %4 ], [ %182, %70 ]
  %97 = phi i32 [ 0, %4 ], [ %183, %70 ]
  %98 = phi i32 [ 0, %4 ], [ %184, %70 ]
  %99 = phi i32 [ 0, %4 ], [ %185, %70 ]
  %100 = phi i32 [ 0, %4 ], [ %187, %70 ]
  %101 = phi i32 [ 0, %4 ], [ %188, %70 ]
  %102 = phi i32 [ 0, %4 ], [ %189, %70 ]
  %103 = phi i32 [ 0, %4 ], [ %190, %70 ]
  %.not35 = icmp eq i64 %indvars.iv, 95, !dbg !34
  %104 = add i32 %71, 1, !dbg !34
  %105 = icmp ugt i32 %71, 2147483646, !dbg !34
  %106 = select i1 %105, i32 %104, i32 0, !dbg !34
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %107 = shl i32 %106, 11, !dbg !30
  %108 = sext i32 %107 to i64, !dbg !30
  %109 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %108, !dbg !30
  %110 = getelementptr inbounds nuw i8, ptr addrspace(3) %109, i64 %52, !dbg !30
  %111 = ptrtoint ptr addrspace(3) %110 to i64, !dbg !30
  %112 = trunc i64 %111 to i32, !dbg !30
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %112) #1, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !30
  %118 = getelementptr inbounds nuw i8, ptr addrspace(3) %109, i64 %56, !dbg !30
  %119 = ptrtoint ptr addrspace(3) %118 to i64, !dbg !30
  %120 = trunc i64 %119 to i32, !dbg !30
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %120) #1, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !30
  %126 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %108, !dbg !33
  %127 = getelementptr inbounds nuw i8, ptr addrspace(3) %126, i64 %63, !dbg !33
  %128 = ptrtoint ptr addrspace(3) %127 to i64, !dbg !33
  %129 = trunc i64 %128 to i32, !dbg !33
  %130 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %129) #1, !dbg !33
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !33
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !33
  %133 = getelementptr inbounds nuw i8, ptr addrspace(3) %126, i64 %65, !dbg !33
  %134 = ptrtoint ptr addrspace(3) %133 to i64, !dbg !33
  %135 = trunc i64 %134 to i32, !dbg !33
  %136 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %135) #1, !dbg !33
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !33
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !33
  %139 = getelementptr inbounds nuw i8, ptr addrspace(3) %126, i64 %67, !dbg !33
  %140 = ptrtoint ptr addrspace(3) %139 to i64, !dbg !33
  %141 = trunc i64 %140 to i32, !dbg !33
  %142 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %141) #1, !dbg !33
  %143 = extractvalue { i32, i32 } %142, 0, !dbg !33
  %144 = extractvalue { i32, i32 } %142, 1, !dbg !33
  %145 = getelementptr inbounds nuw i8, ptr addrspace(3) %126, i64 %69, !dbg !33
  %146 = ptrtoint ptr addrspace(3) %145 to i64, !dbg !33
  %147 = trunc i64 %146 to i32, !dbg !33
  %148 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %147) #1, !dbg !33
  %149 = extractvalue { i32, i32 } %148, 0, !dbg !33
  %150 = extractvalue { i32, i32 } %148, 1, !dbg !33
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %72, i32 %73, i32 %74, i32 %75, i32 %114, i32 %115, i32 %116, i32 %117, i32 %131, i32 %132) #1, !dbg !35
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !35
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !35
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !35
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %76, i32 %77, i32 %78, i32 %79, i32 %114, i32 %115, i32 %116, i32 %117, i32 %137, i32 %138) #1, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !35
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %80, i32 %81, i32 %82, i32 %83, i32 %114, i32 %115, i32 %116, i32 %117, i32 %143, i32 %144) #1, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !35
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %84, i32 %85, i32 %86, i32 %87, i32 %114, i32 %115, i32 %116, i32 %117, i32 %149, i32 %150) #1, !dbg !35
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !35
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %88, i32 %89, i32 %90, i32 %91, i32 %122, i32 %123, i32 %124, i32 %125, i32 %131, i32 %132) #1, !dbg !35
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !35
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !35
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !35
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %92, i32 %93, i32 %94, i32 %95, i32 %122, i32 %123, i32 %124, i32 %125, i32 %137, i32 %138) #1, !dbg !35
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !35
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !35
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !35
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !35
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %96, i32 %97, i32 %98, i32 %99, i32 %122, i32 %123, i32 %124, i32 %125, i32 %143, i32 %144) #1, !dbg !35
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !35
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !35
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !35
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !35
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %100, i32 %101, i32 %102, i32 %103, i32 %122, i32 %123, i32 %124, i32 %125, i32 %149, i32 %150) #1, !dbg !35
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !35
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !35
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %191 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !36
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %191, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %192 = select i1 %.not35, i32 0, i32 16, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %38, ptr addrspace(1) %gep, i32 %192) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep105 = getelementptr i8, ptr addrspace(1) %invariant.gep104, i64 %191, !dbg !32
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %42, ptr addrspace(1) %gep105, i32 %192) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 96, !dbg !34
  br i1 %exitcond.not, label %193, label %70, !dbg !34

193:                                              ; preds = %70
  %194 = and i32 %19, 60, !dbg !19
  %195 = or disjoint i32 %22, %194, !dbg !22
  %196 = lshr i32 %15, 4, !dbg !19
  %197 = and i32 %196, 7, !dbg !19
  %198 = or disjoint i32 %197, %14, !dbg !20
  %199 = or disjoint i32 %198, 56, !dbg !20
  %200 = or disjoint i32 %198, 48, !dbg !20
  %201 = or disjoint i32 %198, 40, !dbg !20
  %202 = or disjoint i32 %198, 32, !dbg !20
  %203 = or disjoint i32 %198, 24, !dbg !20
  %204 = or disjoint i32 %198, 16, !dbg !20
  %205 = or disjoint i32 %198, 8, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %206 = icmp slt i32 %198, 4112, !dbg !37
  %207 = icmp slt i32 %205, 4112, !dbg !37
  %208 = icmp slt i32 %204, 4112, !dbg !37
  %209 = icmp slt i32 %203, 4112, !dbg !37
  %210 = icmp slt i32 %202, 4112, !dbg !37
  %211 = icmp slt i32 %201, 4112, !dbg !37
  %212 = icmp slt i32 %200, 4112, !dbg !37
  %213 = icmp slt i32 %199, 4112, !dbg !37
  %214 = icmp slt i32 %195, 12288, !dbg !38
  %215 = and i1 %206, %214, !dbg !39
  %216 = and i1 %207, %214, !dbg !39
  %217 = and i1 %208, %214, !dbg !39
  %218 = and i1 %209, %214, !dbg !39
  %219 = and i1 %210, %214, !dbg !39
  %220 = and i1 %211, %214, !dbg !39
  %221 = and i1 %212, %214, !dbg !39
  %222 = and i1 %213, %214, !dbg !39
  %223 = mul i32 %198, 12288, !dbg !40
  %224 = mul i32 %205, 12288, !dbg !40
  %225 = mul i32 %204, 12288, !dbg !40
  %226 = mul i32 %203, 12288, !dbg !40
  %227 = mul i32 %202, 12288, !dbg !40
  %228 = mul i32 %201, 12288, !dbg !40
  %229 = mul i32 %200, 12288, !dbg !40
  %230 = mul i32 %199, 12288, !dbg !40
  %231 = add i32 %223, %195, !dbg !41
  %232 = add i32 %224, %195, !dbg !41
  %233 = add i32 %225, %195, !dbg !41
  %234 = add i32 %226, %195, !dbg !41
  %235 = add i32 %227, %195, !dbg !41
  %236 = add i32 %228, %195, !dbg !41
  %237 = add i32 %229, %195, !dbg !41
  %238 = add i32 %230, %195, !dbg !41
  %239 = sext i32 %231 to i64, !dbg !42
  %240 = getelementptr i32, ptr addrspace(1) %2, i64 %239, !dbg !42
  %241 = sext i32 %232 to i64, !dbg !42
  %242 = getelementptr i32, ptr addrspace(1) %2, i64 %241, !dbg !42
  %243 = sext i32 %233 to i64, !dbg !42
  %244 = getelementptr i32, ptr addrspace(1) %2, i64 %243, !dbg !42
  %245 = sext i32 %234 to i64, !dbg !42
  %246 = getelementptr i32, ptr addrspace(1) %2, i64 %245, !dbg !42
  %247 = sext i32 %235 to i64, !dbg !42
  %248 = getelementptr i32, ptr addrspace(1) %2, i64 %247, !dbg !42
  %249 = sext i32 %236 to i64, !dbg !42
  %250 = getelementptr i32, ptr addrspace(1) %2, i64 %249, !dbg !42
  %251 = sext i32 %237 to i64, !dbg !42
  %252 = getelementptr i32, ptr addrspace(1) %2, i64 %251, !dbg !42
  %253 = sext i32 %238 to i64, !dbg !42
  %254 = getelementptr i32, ptr addrspace(1) %2, i64 %253, !dbg !42
  %255 = shl i32 %15, 1, !dbg !43
  %256 = and i32 %255, 6, !dbg !43
  %257 = and i32 %26, 192, !dbg !43
  %258 = or disjoint i32 %257, %256, !dbg !43
  %259 = shl i32 %15, 4, !dbg !43
  %260 = and i32 %259, 1280, !dbg !43
  %261 = or disjoint i32 %260, %258, !dbg !43
  %262 = or disjoint i32 %261, %59, !dbg !43
  %263 = and i32 %19, 508, !dbg !43
  %264 = lshr i32 %261, 4, !dbg !43
  %265 = add nuw nsw i32 %264, %262, !dbg !43
  %266 = zext nneg i32 %265 to i64, !dbg !43
  %267 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %266, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %267, i32 %152, i32 %153, i1 true) #1, !dbg !43
  %268 = or disjoint i32 %262, 512, !dbg !43
  %269 = lshr i32 %268, 4, !dbg !43
  %270 = add nuw nsw i32 %269, %268, !dbg !43
  %271 = zext nneg i32 %270 to i64, !dbg !43
  %272 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %271, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %272, i32 %154, i32 %155, i1 true) #1, !dbg !43
  %273 = or disjoint i32 %262, 16, !dbg !43
  %274 = add nuw nsw i32 %273, %264, !dbg !43
  %275 = zext nneg i32 %274 to i64, !dbg !43
  %276 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %275, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %276, i32 %157, i32 %158, i1 true) #1, !dbg !43
  %277 = or disjoint i32 %262, 528, !dbg !43
  %278 = lshr i32 %277, 4, !dbg !43
  %279 = and i32 %278, 268435452, !dbg !43
  %280 = add nuw nsw i32 %279, %277, !dbg !43
  %281 = zext nneg i32 %280 to i64, !dbg !43
  %282 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %281, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %282, i32 %159, i32 %160, i1 true) #1, !dbg !43
  %283 = or disjoint i32 %262, 32, !dbg !43
  %284 = add nuw nsw i32 %283, %264, !dbg !43
  %285 = zext nneg i32 %284 to i64, !dbg !43
  %286 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %285, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %286, i32 %162, i32 %163, i1 true) #1, !dbg !43
  %287 = or disjoint i32 %262, 544, !dbg !43
  %288 = lshr i32 %287, 4, !dbg !43
  %289 = and i32 %288, 268435452, !dbg !43
  %290 = add nuw nsw i32 %289, %287, !dbg !43
  %291 = zext nneg i32 %290 to i64, !dbg !43
  %292 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %291, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %292, i32 %164, i32 %165, i1 true) #1, !dbg !43
  %293 = or disjoint i32 %262, 48, !dbg !43
  %294 = add nuw nsw i32 %293, %264, !dbg !43
  %295 = zext nneg i32 %294 to i64, !dbg !43
  %296 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %295, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %296, i32 %167, i32 %168, i1 true) #1, !dbg !43
  %297 = or disjoint i32 %262, 560, !dbg !43
  %298 = lshr i32 %297, 4, !dbg !43
  %299 = and i32 %298, 268435452, !dbg !43
  %300 = add nuw nsw i32 %299, %297, !dbg !43
  %301 = zext nneg i32 %300 to i64, !dbg !43
  %302 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %301, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %302, i32 %169, i32 %170, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %303 = lshr i32 %19, 4, !dbg !43
  %304 = and i32 %303, 28, !dbg !43
  %305 = add nuw nsw i32 %304, %263, !dbg !43
  %306 = zext nneg i32 %305 to i64, !dbg !43
  %307 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %306, !dbg !43
  %308 = load <4 x i32>, ptr addrspace(3) %307, align 16, !dbg !43
  %309 = or disjoint i32 %263, 512, !dbg !43
  %310 = lshr i32 %309, 4, !dbg !43
  %311 = and i32 %310, 60, !dbg !43
  %312 = add nuw nsw i32 %311, %309, !dbg !43
  %313 = zext nneg i32 %312 to i64, !dbg !43
  %314 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %313, !dbg !43
  %315 = load <4 x i32>, ptr addrspace(3) %314, align 16, !dbg !43
  %316 = or disjoint i32 %263, 1024, !dbg !43
  %317 = lshr i32 %316, 4, !dbg !43
  %318 = and i32 %317, 92, !dbg !43
  %319 = add nuw nsw i32 %318, %316, !dbg !43
  %320 = zext nneg i32 %319 to i64, !dbg !43
  %321 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %320, !dbg !43
  %322 = load <4 x i32>, ptr addrspace(3) %321, align 16, !dbg !43
  %323 = or disjoint i32 %263, 1536, !dbg !43
  %324 = lshr i32 %323, 4, !dbg !43
  %325 = and i32 %324, 124, !dbg !43
  %326 = add nuw nsw i32 %325, %323, !dbg !43
  %327 = zext nneg i32 %326 to i64, !dbg !43
  %328 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %327, !dbg !43
  %329 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %267, i32 %172, i32 %173, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %272, i32 %174, i32 %175, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %276, i32 %177, i32 %178, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %282, i32 %179, i32 %180, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %286, i32 %182, i32 %183, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %292, i32 %184, i32 %185, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %296, i32 %187, i32 %188, i1 true) #1, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %302, i32 %189, i32 %190, i1 true) #1, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %330 = load <4 x i32>, ptr addrspace(3) %307, align 16, !dbg !43
  %331 = load <4 x i32>, ptr addrspace(3) %314, align 16, !dbg !43
  %332 = load <4 x i32>, ptr addrspace(3) %321, align 16, !dbg !43
  %333 = load <4 x i32>, ptr addrspace(3) %328, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %308, i64 0, !dbg !43
  %.extract4 = extractelement <4 x i32> %308, i64 1, !dbg !43
  %.extract5 = extractelement <4 x i32> %308, i64 2, !dbg !43
  %.extract6 = extractelement <4 x i32> %308, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %240, i1 %215) #1, !dbg !43
  %.extract7 = extractelement <4 x i32> %315, i64 0, !dbg !43
  %.extract8 = extractelement <4 x i32> %315, i64 1, !dbg !43
  %.extract9 = extractelement <4 x i32> %315, i64 2, !dbg !43
  %.extract10 = extractelement <4 x i32> %315, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %242, i1 %216) #1, !dbg !43
  %.extract11 = extractelement <4 x i32> %322, i64 0, !dbg !43
  %.extract12 = extractelement <4 x i32> %322, i64 1, !dbg !43
  %.extract13 = extractelement <4 x i32> %322, i64 2, !dbg !43
  %.extract14 = extractelement <4 x i32> %322, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %244, i1 %217) #1, !dbg !43
  %.extract15 = extractelement <4 x i32> %329, i64 0, !dbg !43
  %.extract16 = extractelement <4 x i32> %329, i64 1, !dbg !43
  %.extract17 = extractelement <4 x i32> %329, i64 2, !dbg !43
  %.extract18 = extractelement <4 x i32> %329, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %246, i1 %218) #1, !dbg !43
  %.extract19 = extractelement <4 x i32> %330, i64 0, !dbg !43
  %.extract20 = extractelement <4 x i32> %330, i64 1, !dbg !43
  %.extract21 = extractelement <4 x i32> %330, i64 2, !dbg !43
  %.extract22 = extractelement <4 x i32> %330, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %248, i1 %219) #1, !dbg !43
  %.extract23 = extractelement <4 x i32> %331, i64 0, !dbg !43
  %.extract24 = extractelement <4 x i32> %331, i64 1, !dbg !43
  %.extract25 = extractelement <4 x i32> %331, i64 2, !dbg !43
  %.extract26 = extractelement <4 x i32> %331, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %250, i1 %220) #1, !dbg !43
  %.extract27 = extractelement <4 x i32> %332, i64 0, !dbg !43
  %.extract28 = extractelement <4 x i32> %332, i64 1, !dbg !43
  %.extract29 = extractelement <4 x i32> %332, i64 2, !dbg !43
  %.extract30 = extractelement <4 x i32> %332, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %252, i1 %221) #1, !dbg !43
  %.extract31 = extractelement <4 x i32> %333, i64 0, !dbg !43
  %.extract32 = extractelement <4 x i32> %333, i64 1, !dbg !43
  %.extract33 = extractelement <4 x i32> %333, i64 2, !dbg !43
  %.extract34 = extractelement <4 x i32> %333, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %254, i1 %222) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cokqpzn6hnsvj4ho6bijf6ssmdfpwba7jv65wfjers3ac5xuypui.py", directory: "/tmp/torchinductor_root/ok")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 64, column: 26, scope: !6)
!35 = !DILocation(line: 78, column: 25, scope: !6)
!36 = !DILocation(line: 66, column: 50, scope: !6)
!37 = !DILocation(line: 85, column: 20, scope: !6)
!38 = !DILocation(line: 85, column: 34, scope: !6)
!39 = !DILocation(line: 85, column: 26, scope: !6)
!40 = !DILocation(line: 88, column: 27, scope: !6)
!41 = !DILocation(line: 88, column: 21, scope: !6)
!42 = !DILocation(line: 89, column: 25, scope: !6)
!43 = !DILocation(line: 89, column: 67, scope: !6)
!44 = !DILocation(line: 89, column: 4, scope: !6)
