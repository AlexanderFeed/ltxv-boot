; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 512, !dbg !11
  %.lobit = lshr exact i32 %19, 9, !dbg !11
  %20 = or disjoint i32 %.lobit, %17, !dbg !12
  %21 = icmp slt i32 %20, 512, !dbg !13
  %22 = icmp slt i32 %17, 512, !dbg !13
  %23 = shl i32 %18, 1, !dbg !14
  %24 = and i32 %23, 1022, !dbg !14
  %25 = and i32 %18, 1023, !dbg !14
  %26 = sext i32 %20 to i64, !dbg !15
  %27 = getelementptr bfloat, ptr addrspace(1) %4, i64 %26, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %21) #5, !dbg !16
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %21) #5, !dbg !16
  %30 = bitcast i16 %29 to bfloat, !dbg !16
  %31 = getelementptr bfloat, ptr addrspace(1) %5, i64 %26, !dbg !17
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %21) #5, !dbg !18
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %21) #5, !dbg !18
  %34 = bitcast i16 %33 to bfloat, !dbg !18
  %35 = mul i32 %20, 3072, !dbg !19
  %.inv = fcmp oge bfloat %30, 0xR0000, !dbg !20
  %36 = select i1 %.inv, bfloat 0xR0000, bfloat %30, !dbg !20
  %37 = fpext bfloat %36 to float, !dbg !20
  %38 = fsub float 0.000000e+00, %37, !dbg !24
  %.inv4 = fcmp ole bfloat %34, 0xR0000, !dbg !25
  %39 = select i1 %.inv4, bfloat 0xR0000, bfloat %34, !dbg !25
  %40 = fpext bfloat %39 to float, !dbg !25
  %41 = fcmp ogt float %38, %40, !dbg !27
  %42 = fcmp uno float %38, 0.000000e+00, !dbg !29
  %43 = or i1 %42, %41, !dbg !30
  %44 = select i1 %43, float %38, float %40, !dbg !31
  %45 = fmul float %44, 0x3F80204080000000, !dbg !32
  %46 = fcmp ogt float %45, 0x3EE4F8B580000000, !dbg !33
  %47 = fcmp uno float %45, 0.000000e+00, !dbg !35
  %48 = or i1 %46, %47, !dbg !36
  %49 = select i1 %48, float %45, float 0x3EE4F8B580000000, !dbg !37
  %50 = or disjoint i32 %35, %24
  %invariant.op = or disjoint i32 %.lobit, 2, !dbg !38
  %51 = shl i32 %18, 2
  %52 = and i32 %51, 2044
  %53 = or disjoint i32 %52, %.lobit
  %54 = and i32 %23, 2046
  %55 = lshr exact i32 %52, 1
  %56 = add nuw nsw i32 %55, %53
  %57 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %56
  %.reass = or disjoint i32 %52, %invariant.op
  %58 = lshr i32 %.reass, 1
  %59 = add nuw nsw i32 %58, %.reass
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %59
  %61 = lshr exact i32 %54, 1
  %62 = add nuw nsw i32 %61, %54
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %62
  %64 = or disjoint i32 %54, 1
  %65 = add nuw nsw i32 %61, %64
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %65
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %56
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %59
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %62
  %70 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %65
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25
  %72 = getelementptr inbounds nuw i8, ptr addrspace(3) %71, i32 2052
  %73 = lshr i32 %23, 9
  %74 = and i32 %73, 2
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %74
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %75, i32 %54
  %77 = zext nneg i32 %25 to i64, !dbg !38
  %78 = sext i32 %50 to i64, !dbg !39
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !39
  %80 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %79, i1 %21) #5, !dbg !40
  %extelt.offset10.peel = lshr i32 %80, 16, !dbg !40
  %81 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %82 = trunc i32 %80 to i16, !dbg !41
  %83 = insertelement <1 x i16> poison, i16 %82, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %57, <1 x i16> %83, i1 true) #5, !dbg !41
  %84 = insertelement <1 x i16> poison, i16 %81, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %60, <1 x i16> %84, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %85 = load bfloat, ptr addrspace(3) %63, align 2, !dbg !41
  %86 = load bfloat, ptr addrspace(3) %66, align 2, !dbg !41
  %87 = or disjoint i64 %77, 6144, !dbg !42
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !43
  %89 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %88, i1 true) #5, !dbg !44
  %90 = getelementptr bfloat, ptr addrspace(1) %2, i64 %87, !dbg !45
  %91 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %90, i1 true) #5, !dbg !46
  %92 = getelementptr i32, ptr addrspace(1) %3, i64 %78, !dbg !47
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %21) #5, !dbg !48
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !48
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !48
  %96 = getelementptr bfloat, ptr addrspace(1) %6, i64 %77, !dbg !49
  %97 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %96, i1 true) #5, !dbg !50
  %98 = getelementptr bfloat, ptr addrspace(1) %7, i64 %77, !dbg !51
  %99 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %98, i1 true) #5, !dbg !52
  %100 = sitofp i32 %94 to float, !dbg !53
  %101 = sitofp i32 %95 to float, !dbg !53
  %102 = fmul float %49, %100, !dbg !54
  %103 = fmul float %49, %101, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %104 = bitcast float %102 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %104, i1 true) #5, !dbg !54
  %105 = bitcast float %103 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %68, <1 x i32> %105, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %106 = bitcast i32 %89 to float, !dbg !44
  %107 = bitcast i16 %91 to bfloat, !dbg !46
  %108 = fpext bfloat %107 to float, !dbg !55
  %109 = fadd float %106, %108, !dbg !56
  %110 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %111 = bitcast i16 %97 to bfloat, !dbg !50
  %112 = fpext bfloat %111 to float, !dbg !57
  %113 = fmul float %110, %112, !dbg !58
  %114 = bitcast i16 %99 to bfloat, !dbg !52
  %115 = fpext bfloat %114 to float, !dbg !59
  %116 = fadd float %113, %115, !dbg !60
  %117 = fmul float %109, %116, !dbg !61
  %118 = fpext bfloat %86 to float, !dbg !41
  %119 = fadd float %117, %118, !dbg !62
  %120 = load float, ptr addrspace(3) %69, align 4, !dbg !54
  %121 = fmul float %120, %112, !dbg !58
  %122 = fadd float %121, %115, !dbg !60
  %123 = fmul float %109, %122, !dbg !61
  %124 = fpext bfloat %85 to float, !dbg !41
  %125 = fadd float %123, %124, !dbg !62
  %126 = getelementptr bfloat, ptr addrspace(1) %8, i64 %78, !dbg !63
  %127 = fptrunc float %125 to bfloat, !dbg !64
  %128 = fptrunc float %119 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %129 = bitcast bfloat %127 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %71, <1 x i16> %129, i1 true) #5, !dbg !64
  %130 = bitcast bfloat %128 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %72, <1 x i16> %130, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %131 = load i32, ptr addrspace(3) %76, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %126, i1 %21) #5, !dbg !64
  %132 = select i1 %22, float %119, float 0.000000e+00, !dbg !65
  %133 = select i1 %22, float %125, float 0.000000e+00, !dbg !65
  %134 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !66
  %135 = and i32 %18, 31, !dbg !11
  %136 = or disjoint i64 %77, 1024, !dbg !67
  %137 = add i32 %50, 1024, !dbg !68
  %138 = sext i32 %137 to i64, !dbg !39
  %139 = getelementptr bfloat, ptr addrspace(1) %0, i64 %138, !dbg !39
  %140 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %139, i1 %21) #5, !dbg !40
  %extelt.offset10 = lshr i32 %140, 16, !dbg !40
  %141 = trunc nuw i32 %extelt.offset10 to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %142 = trunc i32 %140 to i16, !dbg !41
  %143 = insertelement <1 x i16> poison, i16 %142, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %57, <1 x i16> %143, i1 true) #5, !dbg !41
  %144 = insertelement <1 x i16> poison, i16 %141, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %60, <1 x i16> %144, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %145 = load bfloat, ptr addrspace(3) %63, align 2, !dbg !41
  %146 = load bfloat, ptr addrspace(3) %66, align 2, !dbg !41
  %147 = fpext bfloat %145 to float, !dbg !41
  %148 = fpext bfloat %146 to float, !dbg !41
  %149 = or disjoint i64 %77, 7168, !dbg !42
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !43
  %151 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %150, i1 true) #5, !dbg !44
  %152 = bitcast i32 %151 to float, !dbg !44
  %153 = getelementptr bfloat, ptr addrspace(1) %2, i64 %149, !dbg !45
  %154 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %153, i1 true) #5, !dbg !46
  %155 = bitcast i16 %154 to bfloat, !dbg !46
  %156 = fpext bfloat %155 to float, !dbg !55
  %157 = getelementptr i32, ptr addrspace(1) %3, i64 %138, !dbg !47
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %157, i1 %21) #5, !dbg !48
  %159 = extractvalue { i32, i32 } %158, 0, !dbg !48
  %160 = extractvalue { i32, i32 } %158, 1, !dbg !48
  %161 = getelementptr bfloat, ptr addrspace(1) %6, i64 %136, !dbg !49
  %162 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %161, i1 true) #5, !dbg !50
  %163 = bitcast i16 %162 to bfloat, !dbg !50
  %164 = fpext bfloat %163 to float, !dbg !57
  %165 = getelementptr bfloat, ptr addrspace(1) %7, i64 %136, !dbg !51
  %166 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %165, i1 true) #5, !dbg !52
  %167 = bitcast i16 %166 to bfloat, !dbg !52
  %168 = fpext bfloat %167 to float, !dbg !59
  %169 = fadd float %152, %156, !dbg !56
  %170 = sitofp i32 %159 to float, !dbg !53
  %171 = sitofp i32 %160 to float, !dbg !53
  %172 = fmul float %49, %170, !dbg !54
  %173 = fmul float %49, %171, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %174 = bitcast float %172 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %174, i1 true) #5, !dbg !54
  %175 = bitcast float %173 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %68, <1 x i32> %175, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %176 = load float, ptr addrspace(3) %69, align 4, !dbg !54
  %177 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %178 = fmul float %176, %164, !dbg !58
  %179 = fmul float %177, %164, !dbg !58
  %180 = fadd float %178, %168, !dbg !60
  %181 = fadd float %179, %168, !dbg !60
  %182 = fmul float %169, %180, !dbg !61
  %183 = fmul float %169, %181, !dbg !61
  %184 = fadd float %182, %147, !dbg !62
  %185 = fadd float %183, %148, !dbg !62
  %186 = fsub float %184, %133, !dbg !69
  %187 = fadd float %134, 1.000000e+00, !dbg !71
  %188 = tail call float @llvm.nvvm.div.full(float %186, float %187), !dbg !72
  %189 = fadd float %133, %188, !dbg !73
  %190 = fsub float %184, %189, !dbg !74
  %191 = fmul float %186, %190, !dbg !75
  %192 = fadd float %191, 0.000000e+00, !dbg !76
  %193 = fsub float %185, %132, !dbg !69
  %194 = fadd float %134, 1.000000e+00, !dbg !71
  %195 = tail call float @llvm.nvvm.div.full(float %193, float %194), !dbg !72
  %196 = fadd float %132, %195, !dbg !73
  %197 = fsub float %185, %196, !dbg !74
  %198 = fmul float %193, %197, !dbg !75
  %199 = fadd float %198, 0.000000e+00, !dbg !76
  %200 = select i1 %22, float %189, float 0.000000e+00, !dbg !65
  %201 = select i1 %22, float %196, float 0.000000e+00, !dbg !65
  %202 = getelementptr bfloat, ptr addrspace(1) %8, i64 %138, !dbg !63
  %203 = fptrunc float %184 to bfloat, !dbg !64
  %204 = fptrunc float %185 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %205 = bitcast bfloat %203 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %71, <1 x i16> %205, i1 true) #5, !dbg !64
  %206 = bitcast bfloat %204 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %72, <1 x i16> %206, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %207 = load i32, ptr addrspace(3) %76, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %202, i1 %21) #5, !dbg !64
  %208 = or disjoint i64 %77, 2048, !dbg !67
  %209 = add i32 %50, 2048, !dbg !68
  %210 = sext i32 %209 to i64, !dbg !39
  %211 = getelementptr bfloat, ptr addrspace(1) %0, i64 %210, !dbg !39
  %212 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %211, i1 %21) #5, !dbg !40
  %extelt.offset10.1 = lshr i32 %212, 16, !dbg !40
  %213 = trunc nuw i32 %extelt.offset10.1 to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %214 = trunc i32 %212 to i16, !dbg !41
  %215 = insertelement <1 x i16> poison, i16 %214, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %57, <1 x i16> %215, i1 true) #5, !dbg !41
  %216 = insertelement <1 x i16> poison, i16 %213, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %60, <1 x i16> %216, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %217 = load bfloat, ptr addrspace(3) %63, align 2, !dbg !41
  %218 = load bfloat, ptr addrspace(3) %66, align 2, !dbg !41
  %219 = fpext bfloat %217 to float, !dbg !41
  %220 = fpext bfloat %218 to float, !dbg !41
  %221 = or disjoint i64 %77, 8192, !dbg !42
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !43
  %223 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %222, i1 true) #5, !dbg !44
  %224 = bitcast i32 %223 to float, !dbg !44
  %225 = getelementptr bfloat, ptr addrspace(1) %2, i64 %221, !dbg !45
  %226 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %225, i1 true) #5, !dbg !46
  %227 = bitcast i16 %226 to bfloat, !dbg !46
  %228 = fpext bfloat %227 to float, !dbg !55
  %229 = getelementptr i32, ptr addrspace(1) %3, i64 %210, !dbg !47
  %230 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %229, i1 %21) #5, !dbg !48
  %231 = extractvalue { i32, i32 } %230, 0, !dbg !48
  %232 = extractvalue { i32, i32 } %230, 1, !dbg !48
  %233 = getelementptr bfloat, ptr addrspace(1) %6, i64 %208, !dbg !49
  %234 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %233, i1 true) #5, !dbg !50
  %235 = bitcast i16 %234 to bfloat, !dbg !50
  %236 = fpext bfloat %235 to float, !dbg !57
  %237 = getelementptr bfloat, ptr addrspace(1) %7, i64 %208, !dbg !51
  %238 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %237, i1 true) #5, !dbg !52
  %239 = bitcast i16 %238 to bfloat, !dbg !52
  %240 = fpext bfloat %239 to float, !dbg !59
  %241 = fadd float %224, %228, !dbg !56
  %242 = sitofp i32 %231 to float, !dbg !53
  %243 = sitofp i32 %232 to float, !dbg !53
  %244 = fmul float %49, %242, !dbg !54
  %245 = fmul float %49, %243, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %246 = bitcast float %244 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %246, i1 true) #5, !dbg !54
  %247 = bitcast float %245 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %68, <1 x i32> %247, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %248 = load float, ptr addrspace(3) %69, align 4, !dbg !54
  %249 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %250 = fmul float %248, %236, !dbg !58
  %251 = fmul float %249, %236, !dbg !58
  %252 = fadd float %250, %240, !dbg !60
  %253 = fadd float %251, %240, !dbg !60
  %254 = fmul float %241, %252, !dbg !61
  %255 = fmul float %241, %253, !dbg !61
  %256 = fadd float %254, %219, !dbg !62
  %257 = fadd float %255, %220, !dbg !62
  %258 = fsub float %256, %200, !dbg !69
  %259 = fadd float %187, 1.000000e+00, !dbg !71
  %260 = select i1 %22, float %259, float 1.000000e+00, !dbg !66
  %261 = tail call float @llvm.nvvm.div.full(float %258, float %260), !dbg !72
  %262 = fadd float %200, %261, !dbg !73
  %263 = fsub float %256, %262, !dbg !74
  %264 = fmul float %258, %263, !dbg !75
  %265 = fadd float %192, %264, !dbg !76
  %266 = fsub float %257, %201, !dbg !69
  %267 = fadd float %194, 1.000000e+00, !dbg !71
  %268 = select i1 %22, float %267, float 1.000000e+00, !dbg !66
  %269 = tail call float @llvm.nvvm.div.full(float %266, float %268), !dbg !72
  %270 = fadd float %201, %269, !dbg !73
  %271 = fsub float %257, %270, !dbg !74
  %272 = fmul float %266, %271, !dbg !75
  %273 = fadd float %199, %272, !dbg !76
  %274 = select i1 %22, float %262, float 0.000000e+00, !dbg !65
  %275 = select i1 %22, float %270, float 0.000000e+00, !dbg !65
  %276 = select i1 %22, float %265, float 0.000000e+00, !dbg !77
  %277 = select i1 %22, float %273, float 0.000000e+00, !dbg !77
  %278 = select i1 %22, float %259, float 0.000000e+00, !dbg !66
  %279 = select i1 %22, float %267, float 0.000000e+00, !dbg !66
  %280 = getelementptr bfloat, ptr addrspace(1) %8, i64 %210, !dbg !63
  %281 = fptrunc float %256 to bfloat, !dbg !64
  %282 = fptrunc float %257 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %283 = bitcast bfloat %281 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %71, <1 x i16> %283, i1 true) #5, !dbg !64
  %284 = bitcast bfloat %282 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %72, <1 x i16> %284, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %285 = load i32, ptr addrspace(3) %76, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %285, ptr addrspace(1) %280, i1 %21) #5, !dbg !64
  %286 = lshr i32 %18, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %287 = bitcast float %274 to i32, !dbg !78
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 16, i32 31), !dbg !78
  %289 = bitcast i32 %288 to float, !dbg !78
  %290 = bitcast float %276 to i32, !dbg !78
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 16, i32 31), !dbg !78
  %292 = bitcast i32 %291 to float, !dbg !78
  %293 = bitcast float %278 to i32, !dbg !78
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 16, i32 31), !dbg !78
  %295 = bitcast i32 %294 to float, !dbg !78
  %296 = fsub float %289, %274, !dbg !80
  %297 = fadd float %278, %295, !dbg !82
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !83
  %299 = tail call float @llvm.nvvm.div.full(float %295, float %297), !dbg !84
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !85
  %301 = fmul float %296, %300, !dbg !86
  %302 = fadd float %274, %301, !dbg !87
  %303 = fadd float %276, %292, !dbg !88
  %304 = fmul float %296, %296, !dbg !89
  %305 = fmul float %278, %304, !dbg !90
  %306 = fmul float %305, %300, !dbg !91
  %307 = fadd float %303, %306, !dbg !92
  %308 = bitcast float %302 to i32, !dbg !78
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 8, i32 31), !dbg !78
  %310 = bitcast i32 %309 to float, !dbg !78
  %311 = bitcast float %307 to i32, !dbg !78
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 8, i32 31), !dbg !78
  %313 = bitcast i32 %312 to float, !dbg !78
  %314 = bitcast float %297 to i32, !dbg !78
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 8, i32 31), !dbg !78
  %316 = bitcast i32 %315 to float, !dbg !78
  %317 = fsub float %310, %302, !dbg !80
  %318 = fadd float %297, %316, !dbg !82
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !83
  %320 = tail call float @llvm.nvvm.div.full(float %316, float %318), !dbg !84
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !85
  %322 = fmul float %317, %321, !dbg !86
  %323 = fadd float %302, %322, !dbg !87
  %324 = fadd float %307, %313, !dbg !88
  %325 = fmul float %317, %317, !dbg !89
  %326 = fmul float %297, %325, !dbg !90
  %327 = fmul float %321, %326, !dbg !91
  %328 = fadd float %324, %327, !dbg !92
  %329 = bitcast float %323 to i32, !dbg !78
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 4, i32 31), !dbg !78
  %331 = bitcast i32 %330 to float, !dbg !78
  %332 = bitcast float %328 to i32, !dbg !78
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 4, i32 31), !dbg !78
  %334 = bitcast i32 %333 to float, !dbg !78
  %335 = bitcast float %318 to i32, !dbg !78
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 4, i32 31), !dbg !78
  %337 = bitcast i32 %336 to float, !dbg !78
  %338 = fsub float %331, %323, !dbg !80
  %339 = fadd float %318, %337, !dbg !82
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !83
  %341 = tail call float @llvm.nvvm.div.full(float %337, float %339), !dbg !84
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !85
  %343 = fmul float %338, %342, !dbg !86
  %344 = fadd float %323, %343, !dbg !87
  %345 = fadd float %328, %334, !dbg !88
  %346 = fmul float %338, %338, !dbg !89
  %347 = fmul float %318, %346, !dbg !90
  %348 = fmul float %342, %347, !dbg !91
  %349 = fadd float %345, %348, !dbg !92
  %350 = bitcast float %344 to i32, !dbg !78
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 2, i32 31), !dbg !78
  %352 = bitcast i32 %351 to float, !dbg !78
  %353 = bitcast float %349 to i32, !dbg !78
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 2, i32 31), !dbg !78
  %355 = bitcast i32 %354 to float, !dbg !78
  %356 = bitcast float %339 to i32, !dbg !78
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 2, i32 31), !dbg !78
  %358 = bitcast i32 %357 to float, !dbg !78
  %359 = fsub float %352, %344, !dbg !80
  %360 = fadd float %339, %358, !dbg !82
  %361 = fcmp oeq float %360, 0.000000e+00, !dbg !83
  %362 = tail call float @llvm.nvvm.div.full(float %358, float %360), !dbg !84
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !85
  %364 = fmul float %359, %363, !dbg !86
  %365 = fadd float %344, %364, !dbg !87
  %366 = fadd float %349, %355, !dbg !88
  %367 = fmul float %359, %359, !dbg !89
  %368 = fmul float %339, %367, !dbg !90
  %369 = fmul float %363, %368, !dbg !91
  %370 = fadd float %366, %369, !dbg !92
  %371 = bitcast float %365 to i32, !dbg !78
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !78
  %373 = bitcast i32 %372 to float, !dbg !78
  %374 = bitcast float %370 to i32, !dbg !78
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 1, i32 31), !dbg !78
  %376 = bitcast i32 %375 to float, !dbg !78
  %377 = bitcast float %360 to i32, !dbg !78
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !78
  %379 = bitcast i32 %378 to float, !dbg !78
  %380 = fsub float %373, %365, !dbg !80
  %381 = fadd float %360, %379, !dbg !82
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !83
  %383 = tail call float @llvm.nvvm.div.full(float %379, float %381), !dbg !84
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !85
  %385 = fmul float %380, %384, !dbg !86
  %386 = fadd float %365, %385, !dbg !87
  %387 = fadd float %370, %376, !dbg !88
  %388 = fmul float %380, %380, !dbg !89
  %389 = fmul float %360, %388, !dbg !90
  %390 = fmul float %384, %389, !dbg !91
  %391 = fadd float %387, %390, !dbg !92
  %392 = bitcast float %275 to i32, !dbg !78
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 16, i32 31), !dbg !78
  %394 = bitcast i32 %393 to float, !dbg !78
  %395 = bitcast float %277 to i32, !dbg !78
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 16, i32 31), !dbg !78
  %397 = bitcast i32 %396 to float, !dbg !78
  %398 = bitcast float %279 to i32, !dbg !78
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 16, i32 31), !dbg !78
  %400 = bitcast i32 %399 to float, !dbg !78
  %401 = fsub float %394, %275, !dbg !80
  %402 = fadd float %279, %400, !dbg !82
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !83
  %404 = tail call float @llvm.nvvm.div.full(float %400, float %402), !dbg !84
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !85
  %406 = fmul float %401, %405, !dbg !86
  %407 = fadd float %275, %406, !dbg !87
  %408 = fadd float %277, %397, !dbg !88
  %409 = fmul float %401, %401, !dbg !89
  %410 = fmul float %279, %409, !dbg !90
  %411 = fmul float %410, %405, !dbg !91
  %412 = fadd float %408, %411, !dbg !92
  %413 = bitcast float %407 to i32, !dbg !78
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 8, i32 31), !dbg !78
  %415 = bitcast i32 %414 to float, !dbg !78
  %416 = bitcast float %412 to i32, !dbg !78
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 8, i32 31), !dbg !78
  %418 = bitcast i32 %417 to float, !dbg !78
  %419 = bitcast float %402 to i32, !dbg !78
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 8, i32 31), !dbg !78
  %421 = bitcast i32 %420 to float, !dbg !78
  %422 = fsub float %415, %407, !dbg !80
  %423 = fadd float %402, %421, !dbg !82
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !83
  %425 = tail call float @llvm.nvvm.div.full(float %421, float %423), !dbg !84
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !85
  %427 = fmul float %422, %426, !dbg !86
  %428 = fadd float %407, %427, !dbg !87
  %429 = fadd float %412, %418, !dbg !88
  %430 = fmul float %422, %422, !dbg !89
  %431 = fmul float %402, %430, !dbg !90
  %432 = fmul float %426, %431, !dbg !91
  %433 = fadd float %429, %432, !dbg !92
  %434 = bitcast float %428 to i32, !dbg !78
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 4, i32 31), !dbg !78
  %436 = bitcast i32 %435 to float, !dbg !78
  %437 = bitcast float %433 to i32, !dbg !78
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 4, i32 31), !dbg !78
  %439 = bitcast i32 %438 to float, !dbg !78
  %440 = bitcast float %423 to i32, !dbg !78
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 4, i32 31), !dbg !78
  %442 = bitcast i32 %441 to float, !dbg !78
  %443 = fsub float %436, %428, !dbg !80
  %444 = fadd float %423, %442, !dbg !82
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !83
  %446 = tail call float @llvm.nvvm.div.full(float %442, float %444), !dbg !84
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !85
  %448 = fmul float %443, %447, !dbg !86
  %449 = fadd float %428, %448, !dbg !87
  %450 = fadd float %433, %439, !dbg !88
  %451 = fmul float %443, %443, !dbg !89
  %452 = fmul float %423, %451, !dbg !90
  %453 = fmul float %447, %452, !dbg !91
  %454 = fadd float %450, %453, !dbg !92
  %455 = bitcast float %449 to i32, !dbg !78
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 2, i32 31), !dbg !78
  %457 = bitcast i32 %456 to float, !dbg !78
  %458 = bitcast float %454 to i32, !dbg !78
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 2, i32 31), !dbg !78
  %460 = bitcast i32 %459 to float, !dbg !78
  %461 = bitcast float %444 to i32, !dbg !78
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 2, i32 31), !dbg !78
  %463 = bitcast i32 %462 to float, !dbg !78
  %464 = fsub float %457, %449, !dbg !80
  %465 = fadd float %444, %463, !dbg !82
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !83
  %467 = tail call float @llvm.nvvm.div.full(float %463, float %465), !dbg !84
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !85
  %469 = fmul float %464, %468, !dbg !86
  %470 = fadd float %449, %469, !dbg !87
  %471 = fadd float %454, %460, !dbg !88
  %472 = fmul float %464, %464, !dbg !89
  %473 = fmul float %444, %472, !dbg !90
  %474 = fmul float %468, %473, !dbg !91
  %475 = fadd float %471, %474, !dbg !92
  %476 = bitcast float %470 to i32, !dbg !78
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 1, i32 31), !dbg !78
  %478 = bitcast i32 %477 to float, !dbg !78
  %479 = bitcast float %475 to i32, !dbg !78
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 1, i32 31), !dbg !78
  %481 = bitcast i32 %480 to float, !dbg !78
  %482 = bitcast float %465 to i32, !dbg !78
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 1, i32 31), !dbg !78
  %484 = bitcast i32 %483 to float, !dbg !78
  %485 = fsub float %478, %470, !dbg !80
  %486 = fadd float %465, %484, !dbg !82
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !83
  %488 = tail call float @llvm.nvvm.div.full(float %484, float %486), !dbg !84
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !85
  %490 = fmul float %485, %489, !dbg !86
  %491 = fadd float %470, %490, !dbg !87
  %492 = fadd float %475, %481, !dbg !88
  %493 = fmul float %485, %485, !dbg !89
  %494 = fmul float %465, %493, !dbg !90
  %495 = fmul float %489, %494, !dbg !91
  %496 = fadd float %492, %495, !dbg !92
  %497 = and i32 %286, 31, !dbg !78
  %498 = icmp eq i32 %135, 0, !dbg !78
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497, !dbg !78
  %500 = bitcast float %386 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %500, i1 %498) #5, !dbg !78
  %501 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %497, !dbg !78
  %502 = bitcast float %391 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %502, i1 %498) #5, !dbg !78
  %503 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %497, !dbg !78
  %504 = bitcast float %381 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %504, i1 %498) #5, !dbg !78
  %505 = or disjoint i32 %497, 32, !dbg !78
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !78
  %507 = bitcast float %491 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 %498) #5, !dbg !78
  %508 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %505, !dbg !78
  %509 = bitcast float %496 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %509, i1 %498) #5, !dbg !78
  %510 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %505, !dbg !78
  %511 = bitcast float %486 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %511, i1 %498) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %512 = icmp slt i32 %18, 64, !dbg !78
  %513 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !78
  %514 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %513, i1 %512) #5, !dbg !78
  %515 = bitcast i32 %514 to float, !dbg !78
  %516 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %18, !dbg !78
  %517 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %516, i1 %512) #5, !dbg !78
  %518 = bitcast i32 %517 to float, !dbg !78
  %519 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %18, !dbg !78
  %520 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %519, i1 %512) #5, !dbg !78
  %521 = bitcast i32 %520 to float, !dbg !78
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 16, i32 31), !dbg !78
  %523 = bitcast i32 %522 to float, !dbg !78
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %517, i32 16, i32 31), !dbg !78
  %525 = bitcast i32 %524 to float, !dbg !78
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 16, i32 31), !dbg !78
  %527 = bitcast i32 %526 to float, !dbg !78
  %528 = fsub float %523, %515, !dbg !80
  %529 = fadd float %521, %527, !dbg !82
  %530 = fcmp oeq float %529, 0.000000e+00, !dbg !83
  %531 = tail call float @llvm.nvvm.div.full(float %527, float %529), !dbg !84
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !85
  %533 = fmul float %528, %532, !dbg !86
  %534 = fadd float %533, %515, !dbg !87
  %535 = fadd float %518, %525, !dbg !88
  %536 = fmul float %528, %528, !dbg !89
  %537 = fmul float %536, %521, !dbg !90
  %538 = fmul float %537, %532, !dbg !91
  %539 = fadd float %535, %538, !dbg !92
  %540 = bitcast float %534 to i32, !dbg !78
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 8, i32 31), !dbg !78
  %542 = bitcast i32 %541 to float, !dbg !78
  %543 = bitcast float %539 to i32, !dbg !78
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 8, i32 31), !dbg !78
  %545 = bitcast i32 %544 to float, !dbg !78
  %546 = bitcast float %529 to i32, !dbg !78
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !78
  %548 = bitcast i32 %547 to float, !dbg !78
  %549 = fsub float %542, %534, !dbg !80
  %550 = fadd float %529, %548, !dbg !82
  %551 = fcmp oeq float %550, 0.000000e+00, !dbg !83
  %552 = tail call float @llvm.nvvm.div.full(float %548, float %550), !dbg !84
  %553 = select i1 %551, float 0.000000e+00, float %552, !dbg !85
  %554 = fmul float %549, %553, !dbg !86
  %555 = fadd float %534, %554, !dbg !87
  %556 = fadd float %539, %545, !dbg !88
  %557 = fmul float %549, %549, !dbg !89
  %558 = fmul float %529, %557, !dbg !90
  %559 = fmul float %553, %558, !dbg !91
  %560 = fadd float %556, %559, !dbg !92
  %561 = bitcast float %555 to i32, !dbg !78
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 4, i32 31), !dbg !78
  %563 = bitcast i32 %562 to float, !dbg !78
  %564 = bitcast float %560 to i32, !dbg !78
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !78
  %566 = bitcast i32 %565 to float, !dbg !78
  %567 = bitcast float %550 to i32, !dbg !78
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !78
  %569 = bitcast i32 %568 to float, !dbg !78
  %570 = fsub float %563, %555, !dbg !80
  %571 = fadd float %550, %569, !dbg !82
  %572 = fcmp oeq float %571, 0.000000e+00, !dbg !83
  %573 = tail call float @llvm.nvvm.div.full(float %569, float %571), !dbg !84
  %574 = select i1 %572, float 0.000000e+00, float %573, !dbg !85
  %575 = fmul float %570, %574, !dbg !86
  %576 = fadd float %555, %575, !dbg !87
  %577 = fadd float %560, %566, !dbg !88
  %578 = fmul float %570, %570, !dbg !89
  %579 = fmul float %550, %578, !dbg !90
  %580 = fmul float %574, %579, !dbg !91
  %581 = fadd float %577, %580, !dbg !92
  %582 = bitcast float %576 to i32, !dbg !78
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 2, i32 31), !dbg !78
  %584 = bitcast i32 %583 to float, !dbg !78
  %585 = bitcast float %581 to i32, !dbg !78
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 2, i32 31), !dbg !78
  %587 = bitcast i32 %586 to float, !dbg !78
  %588 = bitcast float %571 to i32, !dbg !78
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !78
  %590 = bitcast i32 %589 to float, !dbg !78
  %591 = fsub float %584, %576, !dbg !80
  %592 = fadd float %571, %590, !dbg !82
  %593 = fcmp oeq float %592, 0.000000e+00, !dbg !83
  %594 = tail call float @llvm.nvvm.div.full(float %590, float %592), !dbg !84
  %595 = select i1 %593, float 0.000000e+00, float %594, !dbg !85
  %596 = fmul float %591, %595, !dbg !86
  %597 = fadd float %576, %596, !dbg !87
  %598 = fadd float %581, %587, !dbg !88
  %599 = fmul float %591, %591, !dbg !89
  %600 = fmul float %571, %599, !dbg !90
  %601 = fmul float %595, %600, !dbg !91
  %602 = fadd float %598, %601, !dbg !92
  %603 = bitcast float %597 to i32, !dbg !78
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 1, i32 31), !dbg !78
  %605 = bitcast i32 %604 to float, !dbg !78
  %606 = bitcast float %602 to i32, !dbg !78
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 1, i32 31), !dbg !78
  %608 = bitcast i32 %607 to float, !dbg !78
  %609 = bitcast float %592 to i32, !dbg !78
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !78
  %611 = bitcast i32 %610 to float, !dbg !78
  %612 = fsub float %605, %597, !dbg !80
  %613 = fadd float %592, %611, !dbg !82
  %614 = fcmp oeq float %613, 0.000000e+00, !dbg !83
  %615 = tail call float @llvm.nvvm.div.full(float %611, float %613), !dbg !84
  %616 = select i1 %614, float 0.000000e+00, float %615, !dbg !85
  %617 = fmul float %612, %616, !dbg !86
  %618 = fadd float %597, %617, !dbg !87
  %619 = fadd float %602, %608, !dbg !88
  %620 = fmul float %612, %612, !dbg !89
  %621 = fmul float %592, %620, !dbg !90
  %622 = fmul float %616, %621, !dbg !91
  %623 = fadd float %619, %622, !dbg !92
  %624 = and i1 %512, %498, !dbg !78
  %625 = bitcast float %618 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %625, i1 %624) #5, !dbg !78
  %626 = bitcast float %623 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %626, i1 %624) #5, !dbg !78
  %627 = bitcast float %613 to <1 x i32>, !dbg !78
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %627, i1 %624) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %628 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !78
  %629 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !78
  %630 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !78
  %631 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !78
  %632 = tail call float @llvm.nvvm.div.full(float %630, float 3.072000e+03), !dbg !93
  %633 = tail call float @llvm.nvvm.div.full(float %631, float 3.072000e+03), !dbg !93
  %634 = fadd float %632, 0x3EB0C6F7A0000000, !dbg !94
  %635 = fadd float %633, 0x3EB0C6F7A0000000, !dbg !94
  %636 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i = icmp eq i32 %636, 0, !dbg !95
  br i1 %.not.i, label %639, label %637, !dbg !95

637:                                              ; preds = %.peel.next
  %638 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %634), !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !95

639:                                              ; preds = %.peel.next
  %640 = tail call float @llvm.nvvm.rsqrt.approx.f(float %634), !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !95

__nv_rsqrtf.exit:                                 ; preds = %637, %639
  %.0.i = phi float [ %638, %637 ], [ %640, %639 ], !dbg !95
  %641 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i15 = icmp eq i32 %641, 0, !dbg !95
  br i1 %.not.i15, label %644, label %642, !dbg !95

642:                                              ; preds = %__nv_rsqrtf.exit
  %643 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %635), !dbg !95
  br label %__nv_rsqrtf.exit17, !dbg !95

644:                                              ; preds = %__nv_rsqrtf.exit
  %645 = tail call float @llvm.nvvm.rsqrt.approx.f(float %635), !dbg !95
  br label %__nv_rsqrtf.exit17, !dbg !95

__nv_rsqrtf.exit17:                               ; preds = %644, %642
  %.0.i16 = phi float [ %643, %642 ], [ %645, %644 ], !dbg !95
  %646 = insertelement <2 x float> poison, float %628, i64 0, !dbg !96
  %647 = insertelement <2 x float> %646, float %629, i64 1, !dbg !96
  %648 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !97
  %649 = insertelement <2 x float> %648, float %.0.i16, i64 1, !dbg !97
  %650 = insertelement <4 x i1> poison, i1 %22, i64 0, !dbg !98
  %651 = shufflevector <4 x i1> %650, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !98
  %652 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %54
  %653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %652, i32 %54
  %654 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %58
  %655 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %654, i32 %.reass
  %656 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %52
  %657 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %656, i32 %53
  %658 = sext i32 %50 to i64, !dbg !99
  %659 = getelementptr bfloat, ptr addrspace(1) %8, i64 %658, !dbg !99
  %660 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %659, i1 %21) #5, !dbg !100
  %extelt.offset = lshr i32 %660, 16, !dbg !100
  %661 = trunc nuw i32 %extelt.offset to i16, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %662 = trunc i32 %660 to i16, !dbg !97
  %663 = insertelement <1 x i16> poison, i16 %662, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %657, <1 x i16> %663, i1 true) #5, !dbg !97
  %664 = insertelement <1 x i16> poison, i16 %661, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %655, <1 x i16> %664, i1 true) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %.reass25.reass = or disjoint i32 %25, 12288
  %665 = zext nneg i32 %.reass25.reass to i64, !dbg !101
  %666 = getelementptr float, ptr addrspace(1) %1, i64 %665, !dbg !101
  %667 = getelementptr bfloat, ptr addrspace(1) %2, i64 %665, !dbg !102
  %668 = or disjoint i64 %77, 9216, !dbg !103
  %669 = getelementptr float, ptr addrspace(1) %1, i64 %668, !dbg !104
  %670 = getelementptr bfloat, ptr addrspace(1) %2, i64 %668, !dbg !105
  %671 = load <2 x bfloat>, ptr addrspace(3) %653, align 2, !dbg !97
  %672 = fpext <2 x bfloat> %671 to <2 x float>, !dbg !106
  %673 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %666, i1 true) #5, !dbg !107
  %674 = bitcast i32 %673 to float, !dbg !107
  %675 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %667, i1 true) #5, !dbg !108
  %676 = bitcast i16 %675 to bfloat, !dbg !108
  %677 = fpext bfloat %676 to float, !dbg !109
  %678 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %669, i1 true) #5, !dbg !110
  %679 = bitcast i32 %678 to float, !dbg !110
  %680 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %670, i1 true) #5, !dbg !111
  %681 = bitcast i16 %680 to bfloat, !dbg !111
  %682 = fpext bfloat %681 to float, !dbg !112
  %683 = fsub <2 x float> %672, %647, !dbg !96
  %684 = fmul <2 x float> %649, %683, !dbg !97
  %685 = fadd float %674, %677, !dbg !113
  %686 = fadd float %685, 1.000000e+00, !dbg !114
  %687 = insertelement <2 x float> poison, float %686, i64 0, !dbg !115
  %688 = shufflevector <2 x float> %687, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !115
  %689 = fmul <2 x float> %684, %688, !dbg !115
  %690 = fadd float %679, %682, !dbg !116
  %691 = insertelement <2 x float> poison, float %690, i64 0, !dbg !117
  %692 = shufflevector <2 x float> %689, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !117
  %693 = shufflevector <2 x float> %691, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !117
  %694 = fadd <4 x float> %692, %693, !dbg !117
  %695 = fcmp olt <4 x float> %694, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !118
  %696 = fcmp ogt <4 x float> %694, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !118
  %697 = shufflevector <4 x i1> %695, <4 x i1> %696, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !118
  %698 = select <4 x i1> %697, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <4 x float> %694, !dbg !120
  %699 = select <4 x i1> %651, <4 x float> %698, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !98
  %700 = getelementptr bfloat, ptr addrspace(1) %9, i64 %658, !dbg !121
  %701 = extractelement <4 x float> %694, i64 1, !dbg !122
  %702 = fptrunc float %701 to bfloat, !dbg !122
  %703 = extractelement <4 x float> %694, i64 0, !dbg !122
  %704 = fptrunc float %703 to bfloat, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %705 = bitcast bfloat %702 to <1 x i16>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %71, <1 x i16> %705, i1 true) #5, !dbg !122
  %706 = bitcast bfloat %704 to <1 x i16>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %72, <1 x i16> %706, i1 true) #5, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %707 = load i32, ptr addrspace(3) %76, align 4, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %707, ptr addrspace(1) %700, i1 %21) #5, !dbg !122
  %708 = add i32 %50, 1024, !dbg !123
  %709 = sext i32 %708 to i64, !dbg !99
  %710 = getelementptr bfloat, ptr addrspace(1) %8, i64 %709, !dbg !99
  %711 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %710, i1 %21) #5, !dbg !100
  %extelt.offset.1 = lshr i32 %711, 16, !dbg !100
  %712 = trunc nuw i32 %extelt.offset.1 to i16, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %713 = trunc i32 %711 to i16, !dbg !97
  %714 = insertelement <1 x i16> poison, i16 %713, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %657, <1 x i16> %714, i1 true) #5, !dbg !97
  %715 = insertelement <1 x i16> poison, i16 %712, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %655, <1 x i16> %715, i1 true) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %.reass25.reass.1 = or disjoint i32 %25, 13312
  %716 = zext nneg i32 %.reass25.reass.1 to i64, !dbg !101
  %717 = getelementptr float, ptr addrspace(1) %1, i64 %716, !dbg !101
  %718 = getelementptr bfloat, ptr addrspace(1) %2, i64 %716, !dbg !102
  %719 = or disjoint i64 %77, 10240, !dbg !103
  %720 = getelementptr float, ptr addrspace(1) %1, i64 %719, !dbg !104
  %721 = getelementptr bfloat, ptr addrspace(1) %2, i64 %719, !dbg !105
  %722 = fcmp uno <4 x float> %699, zeroinitializer, !dbg !124
  %723 = load <2 x bfloat>, ptr addrspace(3) %653, align 2, !dbg !97
  %724 = fpext <2 x bfloat> %723 to <2 x float>, !dbg !106
  %725 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %717, i1 true) #5, !dbg !107
  %726 = bitcast i32 %725 to float, !dbg !107
  %727 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %718, i1 true) #5, !dbg !108
  %728 = bitcast i16 %727 to bfloat, !dbg !108
  %729 = fpext bfloat %728 to float, !dbg !109
  %730 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %720, i1 true) #5, !dbg !110
  %731 = bitcast i32 %730 to float, !dbg !110
  %732 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %721, i1 true) #5, !dbg !111
  %733 = bitcast i16 %732 to bfloat, !dbg !111
  %734 = fpext bfloat %733 to float, !dbg !112
  %735 = fsub <2 x float> %724, %647, !dbg !96
  %736 = fmul <2 x float> %649, %735, !dbg !97
  %737 = fadd float %726, %729, !dbg !113
  %738 = fadd float %737, 1.000000e+00, !dbg !114
  %739 = insertelement <2 x float> poison, float %738, i64 0, !dbg !115
  %740 = shufflevector <2 x float> %739, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !115
  %741 = fmul <2 x float> %736, %740, !dbg !115
  %742 = fadd float %731, %734, !dbg !116
  %743 = insertelement <2 x float> poison, float %742, i64 0, !dbg !117
  %744 = shufflevector <2 x float> %741, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !117
  %745 = shufflevector <2 x float> %743, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !117
  %746 = fadd <4 x float> %744, %745, !dbg !117
  %747 = fcmp ogt <4 x float> %699, %746, !dbg !118
  %748 = fcmp olt <4 x float> %699, %746, !dbg !118
  %749 = shufflevector <4 x i1> %747, <4 x i1> %748, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !118
  %750 = or <4 x i1> %722, %749, !dbg !125
  %751 = select <4 x i1> %750, <4 x float> %699, <4 x float> %746, !dbg !120
  %752 = select <4 x i1> %651, <4 x float> %751, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !98
  %753 = getelementptr bfloat, ptr addrspace(1) %9, i64 %709, !dbg !121
  %754 = extractelement <4 x float> %746, i64 1, !dbg !122
  %755 = fptrunc float %754 to bfloat, !dbg !122
  %756 = extractelement <4 x float> %746, i64 0, !dbg !122
  %757 = fptrunc float %756 to bfloat, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %758 = bitcast bfloat %755 to <1 x i16>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %71, <1 x i16> %758, i1 true) #5, !dbg !122
  %759 = bitcast bfloat %757 to <1 x i16>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %72, <1 x i16> %759, i1 true) #5, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %760 = load i32, ptr addrspace(3) %76, align 4, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %760, ptr addrspace(1) %753, i1 %21) #5, !dbg !122
  %761 = add i32 %50, 2048, !dbg !123
  %762 = sext i32 %761 to i64, !dbg !99
  %763 = getelementptr bfloat, ptr addrspace(1) %8, i64 %762, !dbg !99
  %764 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %763, i1 %21) #5, !dbg !100
  %extelt.offset.2 = lshr i32 %764, 16, !dbg !100
  %765 = trunc nuw i32 %extelt.offset.2 to i16, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %766 = trunc i32 %764 to i16, !dbg !97
  %767 = insertelement <1 x i16> poison, i16 %766, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %657, <1 x i16> %767, i1 true) #5, !dbg !97
  %768 = insertelement <1 x i16> poison, i16 %765, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %655, <1 x i16> %768, i1 true) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %.reass25.reass.2 = or disjoint i32 %25, 14336
  %769 = zext nneg i32 %.reass25.reass.2 to i64, !dbg !101
  %770 = getelementptr float, ptr addrspace(1) %1, i64 %769, !dbg !101
  %771 = getelementptr bfloat, ptr addrspace(1) %2, i64 %769, !dbg !102
  %772 = or disjoint i64 %77, 11264, !dbg !103
  %773 = getelementptr float, ptr addrspace(1) %1, i64 %772, !dbg !104
  %774 = getelementptr bfloat, ptr addrspace(1) %2, i64 %772, !dbg !105
  %775 = fcmp uno <4 x float> %752, zeroinitializer, !dbg !124
  %776 = load <2 x bfloat>, ptr addrspace(3) %653, align 2, !dbg !97
  %777 = fpext <2 x bfloat> %776 to <2 x float>, !dbg !106
  %778 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %770, i1 true) #5, !dbg !107
  %779 = bitcast i32 %778 to float, !dbg !107
  %780 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %771, i1 true) #5, !dbg !108
  %781 = bitcast i16 %780 to bfloat, !dbg !108
  %782 = fpext bfloat %781 to float, !dbg !109
  %783 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %773, i1 true) #5, !dbg !110
  %784 = bitcast i32 %783 to float, !dbg !110
  %785 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %774, i1 true) #5, !dbg !111
  %786 = bitcast i16 %785 to bfloat, !dbg !111
  %787 = fpext bfloat %786 to float, !dbg !112
  %788 = fsub <2 x float> %777, %647, !dbg !96
  %789 = fmul <2 x float> %649, %788, !dbg !97
  %790 = fadd float %779, %782, !dbg !113
  %791 = fadd float %790, 1.000000e+00, !dbg !114
  %792 = insertelement <2 x float> poison, float %791, i64 0, !dbg !115
  %793 = shufflevector <2 x float> %792, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !115
  %794 = fmul <2 x float> %789, %793, !dbg !115
  %795 = fadd float %784, %787, !dbg !116
  %796 = insertelement <2 x float> poison, float %795, i64 0, !dbg !117
  %797 = shufflevector <2 x float> %794, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !117
  %798 = shufflevector <2 x float> %796, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !117
  %799 = fadd <4 x float> %797, %798, !dbg !117
  %800 = fcmp ogt <4 x float> %752, %799, !dbg !118
  %801 = fcmp olt <4 x float> %752, %799, !dbg !118
  %802 = shufflevector <4 x i1> %800, <4 x i1> %801, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !118
  %803 = or <4 x i1> %775, %802, !dbg !125
  %804 = select <4 x i1> %803, <4 x float> %752, <4 x float> %799, !dbg !120
  %805 = select <4 x i1> %651, <4 x float> %804, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, !dbg !98
  %806 = getelementptr bfloat, ptr addrspace(1) %9, i64 %762, !dbg !121
  %807 = extractelement <4 x float> %799, i64 1, !dbg !122
  %808 = fptrunc float %807 to bfloat, !dbg !122
  %809 = extractelement <4 x float> %799, i64 0, !dbg !122
  %810 = fptrunc float %809 to bfloat, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %811 = bitcast bfloat %808 to <1 x i16>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %71, <1 x i16> %811, i1 true) #5, !dbg !122
  %812 = bitcast bfloat %810 to <1 x i16>, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %72, <1 x i16> %812, i1 true) #5, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %813 = load i32, ptr addrspace(3) %76, align 4, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %813, ptr addrspace(1) %806, i1 %21) #5, !dbg !122
  %814 = and i32 %18, 1, !dbg !11
  %815 = or disjoint i32 %17, %814, !dbg !12
  %816 = icmp slt i32 %815, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %817 = extractelement <4 x float> %805, i64 3, !dbg !126
  %818 = bitcast float %817 to i32, !dbg !126
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %818, i32 16, i32 31), !dbg !126
  %820 = bitcast i32 %819 to float, !dbg !126
  %821 = fcmp olt float %817, %820, !dbg !128
  %822 = fcmp uno <4 x float> %805, zeroinitializer, !dbg !129
  %823 = extractelement <4 x i1> %822, i64 3, !dbg !131
  %824 = or i1 %823, %821, !dbg !131
  %825 = select i1 %824, float %817, float %820, !dbg !132
  %826 = bitcast float %825 to i32, !dbg !126
  %827 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %826, i32 8, i32 31), !dbg !126
  %828 = bitcast i32 %827 to float, !dbg !126
  %829 = fcmp olt float %825, %828, !dbg !128
  %830 = fcmp uno float %825, 0.000000e+00, !dbg !133
  %831 = or i1 %829, %830, !dbg !131
  %832 = select i1 %831, float %825, float %828, !dbg !132
  %833 = bitcast float %832 to i32, !dbg !126
  %834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %833, i32 4, i32 31), !dbg !126
  %835 = bitcast i32 %834 to float, !dbg !126
  %836 = fcmp olt float %832, %835, !dbg !128
  %837 = fcmp uno float %832, 0.000000e+00, !dbg !133
  %838 = or i1 %836, %837, !dbg !131
  %839 = select i1 %838, float %832, float %835, !dbg !132
  %840 = bitcast float %839 to i32, !dbg !126
  %841 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %840, i32 2, i32 31), !dbg !126
  %842 = bitcast i32 %841 to float, !dbg !126
  %843 = fcmp olt float %839, %842, !dbg !128
  %844 = fcmp uno float %839, 0.000000e+00, !dbg !133
  %845 = or i1 %843, %844, !dbg !131
  %846 = select i1 %845, float %839, float %842, !dbg !132
  %847 = bitcast float %846 to i32, !dbg !126
  %848 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %847, i32 1, i32 31), !dbg !126
  %849 = bitcast i32 %848 to float, !dbg !126
  %850 = fcmp olt float %846, %849, !dbg !128
  %851 = fcmp uno float %846, 0.000000e+00, !dbg !133
  %852 = or i1 %850, %851, !dbg !131
  %853 = extractelement <4 x float> %805, i64 2, !dbg !126
  %854 = bitcast float %853 to i32, !dbg !126
  %855 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %854, i32 16, i32 31), !dbg !126
  %856 = bitcast i32 %855 to float, !dbg !126
  %857 = fcmp olt float %853, %856, !dbg !128
  %858 = extractelement <4 x i1> %822, i64 2, !dbg !131
  %859 = or i1 %858, %857, !dbg !131
  %860 = select i1 %859, float %853, float %856, !dbg !132
  %861 = bitcast float %860 to i32, !dbg !126
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %861, i32 8, i32 31), !dbg !126
  %863 = bitcast i32 %862 to float, !dbg !126
  %864 = fcmp olt float %860, %863, !dbg !128
  %865 = fcmp uno float %860, 0.000000e+00, !dbg !133
  %866 = or i1 %864, %865, !dbg !131
  %867 = select i1 %866, float %860, float %863, !dbg !132
  %868 = bitcast float %867 to i32, !dbg !126
  %869 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %868, i32 4, i32 31), !dbg !126
  %870 = bitcast i32 %869 to float, !dbg !126
  %871 = fcmp olt float %867, %870, !dbg !128
  %872 = fcmp uno float %867, 0.000000e+00, !dbg !133
  %873 = or i1 %871, %872, !dbg !131
  %874 = select i1 %873, float %867, float %870, !dbg !132
  %875 = bitcast float %874 to i32, !dbg !126
  %876 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %875, i32 2, i32 31), !dbg !126
  %877 = bitcast i32 %876 to float, !dbg !126
  %878 = fcmp olt float %874, %877, !dbg !128
  %879 = fcmp uno float %874, 0.000000e+00, !dbg !133
  %880 = or i1 %878, %879, !dbg !131
  %881 = select i1 %880, float %874, float %877, !dbg !132
  %882 = bitcast float %881 to i32, !dbg !126
  %883 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %882, i32 1, i32 31), !dbg !126
  %884 = bitcast i32 %883 to float, !dbg !126
  %885 = fcmp olt float %881, %884, !dbg !128
  %886 = fcmp uno float %881, 0.000000e+00, !dbg !133
  %887 = or i1 %885, %886, !dbg !131
  %888 = select i1 %852, i32 %847, i32 %848, !dbg !132
  %889 = insertelement <1 x i32> poison, i32 %888, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %889, i1 %498) #5, !dbg !126
  %890 = select i1 %887, i32 %882, i32 %883, !dbg !132
  %891 = insertelement <1 x i32> poison, i32 %890, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %891, i1 %498) #5, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %892 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %513, i1 %512) #5, !dbg !126
  %893 = bitcast i32 %892 to float, !dbg !126
  %894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %892, i32 16, i32 31), !dbg !126
  %895 = bitcast i32 %894 to float, !dbg !126
  %896 = fcmp olt float %893, %895, !dbg !128
  %897 = fcmp uno float %893, 0.000000e+00, !dbg !133
  %898 = or i1 %897, %896, !dbg !131
  %899 = select i1 %898, float %893, float %895, !dbg !132
  %900 = bitcast float %899 to i32, !dbg !126
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 8, i32 31), !dbg !126
  %902 = bitcast i32 %901 to float, !dbg !126
  %903 = fcmp olt float %899, %902, !dbg !128
  %904 = fcmp uno float %899, 0.000000e+00, !dbg !133
  %905 = or i1 %903, %904, !dbg !131
  %906 = select i1 %905, float %899, float %902, !dbg !132
  %907 = bitcast float %906 to i32, !dbg !126
  %908 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %907, i32 4, i32 31), !dbg !126
  %909 = bitcast i32 %908 to float, !dbg !126
  %910 = fcmp olt float %906, %909, !dbg !128
  %911 = fcmp uno float %906, 0.000000e+00, !dbg !133
  %912 = or i1 %910, %911, !dbg !131
  %913 = select i1 %912, float %906, float %909, !dbg !132
  %914 = bitcast float %913 to i32, !dbg !126
  %915 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %914, i32 2, i32 31), !dbg !126
  %916 = bitcast i32 %915 to float, !dbg !126
  %917 = fcmp olt float %913, %916, !dbg !128
  %918 = fcmp uno float %913, 0.000000e+00, !dbg !133
  %919 = or i1 %917, %918, !dbg !131
  %920 = select i1 %919, float %913, float %916, !dbg !132
  %921 = bitcast float %920 to i32, !dbg !126
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 1, i32 31), !dbg !126
  %923 = bitcast i32 %922 to float, !dbg !126
  %924 = fcmp olt float %920, %923, !dbg !128
  %925 = fcmp uno float %920, 0.000000e+00, !dbg !133
  %926 = or i1 %924, %925, !dbg !131
  %927 = select i1 %926, i32 %921, i32 %922, !dbg !132
  %928 = insertelement <1 x i32> poison, i32 %927, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %928, i1 %624) #5, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %929 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !126
  %930 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %931 = bitcast float %929 to i32, !dbg !134
  %932 = bitcast float %930 to i32, !dbg !134
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %931, i32 %932, i1 true) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %933 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %814, !dbg !134
  %934 = load float, ptr addrspace(3) %933, align 4, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %935 = extractelement <4 x float> %805, i64 1, !dbg !135
  %936 = bitcast float %935 to i32, !dbg !135
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 16, i32 31), !dbg !135
  %938 = bitcast i32 %937 to float, !dbg !135
  %939 = fcmp ogt float %935, %938, !dbg !136
  %940 = extractelement <4 x i1> %822, i64 1, !dbg !137
  %941 = or i1 %940, %939, !dbg !137
  %942 = select i1 %941, float %935, float %938, !dbg !138
  %943 = bitcast float %942 to i32, !dbg !135
  %944 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %943, i32 8, i32 31), !dbg !135
  %945 = bitcast i32 %944 to float, !dbg !135
  %946 = fcmp ogt float %942, %945, !dbg !136
  %947 = fcmp uno float %942, 0.000000e+00, !dbg !129
  %948 = or i1 %946, %947, !dbg !137
  %949 = select i1 %948, float %942, float %945, !dbg !138
  %950 = bitcast float %949 to i32, !dbg !135
  %951 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %950, i32 4, i32 31), !dbg !135
  %952 = bitcast i32 %951 to float, !dbg !135
  %953 = fcmp ogt float %949, %952, !dbg !136
  %954 = fcmp uno float %949, 0.000000e+00, !dbg !129
  %955 = or i1 %953, %954, !dbg !137
  %956 = select i1 %955, float %949, float %952, !dbg !138
  %957 = bitcast float %956 to i32, !dbg !135
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 2, i32 31), !dbg !135
  %959 = bitcast i32 %958 to float, !dbg !135
  %960 = fcmp ogt float %956, %959, !dbg !136
  %961 = fcmp uno float %956, 0.000000e+00, !dbg !129
  %962 = or i1 %960, %961, !dbg !137
  %963 = select i1 %962, float %956, float %959, !dbg !138
  %964 = bitcast float %963 to i32, !dbg !135
  %965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %964, i32 1, i32 31), !dbg !135
  %966 = bitcast i32 %965 to float, !dbg !135
  %967 = fcmp ogt float %963, %966, !dbg !136
  %968 = fcmp uno float %963, 0.000000e+00, !dbg !129
  %969 = or i1 %967, %968, !dbg !137
  %970 = extractelement <4 x float> %805, i64 0, !dbg !135
  %971 = bitcast float %970 to i32, !dbg !135
  %972 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %971, i32 16, i32 31), !dbg !135
  %973 = bitcast i32 %972 to float, !dbg !135
  %974 = fcmp ogt float %970, %973, !dbg !136
  %975 = extractelement <4 x i1> %822, i64 0, !dbg !137
  %976 = or i1 %975, %974, !dbg !137
  %977 = select i1 %976, float %970, float %973, !dbg !138
  %978 = bitcast float %977 to i32, !dbg !135
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 8, i32 31), !dbg !135
  %980 = bitcast i32 %979 to float, !dbg !135
  %981 = fcmp ogt float %977, %980, !dbg !136
  %982 = fcmp uno float %977, 0.000000e+00, !dbg !129
  %983 = or i1 %981, %982, !dbg !137
  %984 = select i1 %983, float %977, float %980, !dbg !138
  %985 = bitcast float %984 to i32, !dbg !135
  %986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %985, i32 4, i32 31), !dbg !135
  %987 = bitcast i32 %986 to float, !dbg !135
  %988 = fcmp ogt float %984, %987, !dbg !136
  %989 = fcmp uno float %984, 0.000000e+00, !dbg !129
  %990 = or i1 %988, %989, !dbg !137
  %991 = select i1 %990, float %984, float %987, !dbg !138
  %992 = bitcast float %991 to i32, !dbg !135
  %993 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %992, i32 2, i32 31), !dbg !135
  %994 = bitcast i32 %993 to float, !dbg !135
  %995 = fcmp ogt float %991, %994, !dbg !136
  %996 = fcmp uno float %991, 0.000000e+00, !dbg !129
  %997 = or i1 %995, %996, !dbg !137
  %998 = select i1 %997, float %991, float %994, !dbg !138
  %999 = bitcast float %998 to i32, !dbg !135
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 1, i32 31), !dbg !135
  %1001 = bitcast i32 %1000 to float, !dbg !135
  %1002 = fcmp ogt float %998, %1001, !dbg !136
  %1003 = fcmp uno float %998, 0.000000e+00, !dbg !129
  %1004 = or i1 %1002, %1003, !dbg !137
  %1005 = select i1 %969, i32 %964, i32 %965, !dbg !138
  %1006 = insertelement <1 x i32> poison, i32 %1005, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %1006, i1 %498) #5, !dbg !135
  %1007 = select i1 %1004, i32 %999, i32 %1000, !dbg !138
  %1008 = insertelement <1 x i32> poison, i32 %1007, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %1008, i1 %498) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %1009 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %513, i1 %512) #5, !dbg !135
  %1010 = bitcast i32 %1009 to float, !dbg !135
  %1011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1009, i32 16, i32 31), !dbg !135
  %1012 = bitcast i32 %1011 to float, !dbg !135
  %1013 = fcmp ogt float %1010, %1012, !dbg !136
  %1014 = fcmp uno float %1010, 0.000000e+00, !dbg !129
  %1015 = or i1 %1014, %1013, !dbg !137
  %1016 = select i1 %1015, float %1010, float %1012, !dbg !138
  %1017 = bitcast float %1016 to i32, !dbg !135
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1017, i32 8, i32 31), !dbg !135
  %1019 = bitcast i32 %1018 to float, !dbg !135
  %1020 = fcmp ogt float %1016, %1019, !dbg !136
  %1021 = fcmp uno float %1016, 0.000000e+00, !dbg !129
  %1022 = or i1 %1020, %1021, !dbg !137
  %1023 = select i1 %1022, float %1016, float %1019, !dbg !138
  %1024 = bitcast float %1023 to i32, !dbg !135
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 4, i32 31), !dbg !135
  %1026 = bitcast i32 %1025 to float, !dbg !135
  %1027 = fcmp ogt float %1023, %1026, !dbg !136
  %1028 = fcmp uno float %1023, 0.000000e+00, !dbg !129
  %1029 = or i1 %1027, %1028, !dbg !137
  %1030 = select i1 %1029, float %1023, float %1026, !dbg !138
  %1031 = bitcast float %1030 to i32, !dbg !135
  %1032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1031, i32 2, i32 31), !dbg !135
  %1033 = bitcast i32 %1032 to float, !dbg !135
  %1034 = fcmp ogt float %1030, %1033, !dbg !136
  %1035 = fcmp uno float %1030, 0.000000e+00, !dbg !129
  %1036 = or i1 %1034, %1035, !dbg !137
  %1037 = select i1 %1036, float %1030, float %1033, !dbg !138
  %1038 = bitcast float %1037 to i32, !dbg !135
  %1039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1038, i32 1, i32 31), !dbg !135
  %1040 = bitcast i32 %1039 to float, !dbg !135
  %1041 = fcmp ogt float %1037, %1040, !dbg !136
  %1042 = fcmp uno float %1037, 0.000000e+00, !dbg !129
  %1043 = or i1 %1041, %1042, !dbg !137
  %1044 = select i1 %1043, i32 %1038, i32 %1039, !dbg !138
  %1045 = insertelement <1 x i32> poison, i32 %1044, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %1045, i1 %624) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %1046 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !135
  %1047 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %1048 = bitcast float %1046 to i32, !dbg !139
  %1049 = bitcast float %1047 to i32, !dbg !139
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1048, i32 %1049, i1 true) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %1050 = load float, ptr addrspace(3) %933, align 4, !dbg !139
  %1051 = sext i32 %815 to i64, !dbg !140
  %1052 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1051, !dbg !140
  %1053 = fptrunc float %934 to bfloat, !dbg !134
  %1054 = and i32 %18, 1022, !dbg !134
  %1055 = icmp eq i32 %1054, 0, !dbg !134
  %1056 = bitcast bfloat %1053 to i16, !dbg !134
  %1057 = and i1 %1055, %816, !dbg !134
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1056, ptr addrspace(1) %1052, i1 %1057) #5, !dbg !134
  %1058 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1051, !dbg !141
  %1059 = fptrunc float %1050 to bfloat, !dbg !139
  %1060 = bitcast bfloat %1059 to i16, !dbg !139
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1060, ptr addrspace(1) %1058, i1 %1057) #5, !dbg !139
  %.inv5 = fcmp oge float %929, 0.000000e+00, !dbg !142
  %1061 = select i1 %.inv5, float 0.000000e+00, float %929, !dbg !142
  %.inv6 = fcmp oge float %930, 0.000000e+00, !dbg !142
  %1062 = select i1 %.inv6, float 0.000000e+00, float %930, !dbg !142
  %1063 = fsub float 0.000000e+00, %1061, !dbg !144
  %1064 = fsub float 0.000000e+00, %1062, !dbg !144
  %.inv7 = fcmp ole float %1046, 0.000000e+00, !dbg !145
  %1065 = select i1 %.inv7, float 0.000000e+00, float %1046, !dbg !145
  %.inv8 = fcmp ole float %1047, 0.000000e+00, !dbg !145
  %1066 = select i1 %.inv8, float 0.000000e+00, float %1047, !dbg !145
  %1067 = fcmp ogt float %1063, %1065, !dbg !147
  %1068 = fcmp ogt float %1064, %1066, !dbg !147
  %1069 = fcmp uno float %1063, 0.000000e+00, !dbg !149
  %1070 = fcmp uno float %1064, 0.000000e+00, !dbg !149
  %1071 = or i1 %1069, %1067, !dbg !150
  %1072 = or i1 %1070, %1068, !dbg !150
  %1073 = select i1 %1071, float %1063, float %1065, !dbg !151
  %1074 = select i1 %1072, float %1064, float %1066, !dbg !151
  %1075 = fmul float %1073, 0x3F80204080000000, !dbg !152
  %1076 = fmul float %1074, 0x3F80204080000000, !dbg !152
  %1077 = fcmp ogt float %1075, 0x3EE4F8B580000000, !dbg !153
  %1078 = fcmp ogt float %1076, 0x3EE4F8B580000000, !dbg !153
  %1079 = fcmp uno float %1075, 0.000000e+00, !dbg !155
  %1080 = fcmp uno float %1076, 0.000000e+00, !dbg !155
  %1081 = or i1 %1077, %1079, !dbg !156
  %1082 = or i1 %1078, %1080, !dbg !156
  %1083 = select i1 %1081, float %1075, float 0x3EE4F8B580000000, !dbg !157
  %1084 = select i1 %1082, float %1076, float 0x3EE4F8B580000000, !dbg !157
  %1085 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1083), !dbg !158
  %1086 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1084), !dbg !158
  tail call void @llvm.nvvm.barrier0(), !dbg !159
  %1087 = bitcast float %1085 to <1 x i32>, !dbg !159
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1087, i1 true) #5, !dbg !159
  %1088 = bitcast float %1086 to <1 x i32>, !dbg !159
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1088, i1 true) #5, !dbg !159
  tail call void @llvm.nvvm.barrier0(), !dbg !159
  %1089 = lshr exact i32 %19, 6, !dbg !159
  %1090 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1089, !dbg !159
  %1091 = load float, ptr addrspace(3) %1090, align 8, !dbg !159
  %1092 = getelementptr bfloat, ptr addrspace(1) %9, i64 %78, !dbg !160
  %1093 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1092, i1 %21) #5, !dbg !161
  %1094 = bitcast i32 %1093 to <2 x bfloat>, !dbg !161
  %1095 = extractelement <2 x bfloat> %1094, i64 0, !dbg !161
  %1096 = extractelement <2 x bfloat> %1094, i64 1, !dbg !161
  %1097 = fpext bfloat %1095 to float, !dbg !162
  %1098 = fpext bfloat %1096 to float, !dbg !162
  %1099 = fmul float %1091, %1097, !dbg !159
  %1100 = fmul float %1091, %1098, !dbg !159
  %1101 = tail call float @llvm.nvvm.round.f(float %1099) #5, !dbg !163
  %1102 = tail call float @llvm.nvvm.round.f(float %1100) #5, !dbg !163
  %1103 = insertelement <2 x float> poison, float %1101, i64 0, !dbg !164
  %1104 = insertelement <2 x float> %1103, float %1102, i64 1, !dbg !164
  %1105 = fcmp ogt <2 x float> %1104, splat (float -1.270000e+02), !dbg !164
  %1106 = fcmp uno <2 x float> %1104, zeroinitializer, !dbg !166
  %1107 = or <2 x i1> %1105, %1106, !dbg !167
  %1108 = select <2 x i1> %1107, <2 x float> %1104, <2 x float> splat (float -1.270000e+02), !dbg !168
  %1109 = fcmp olt <2 x float> %1108, splat (float 1.270000e+02), !dbg !169
  %1110 = fcmp uno <2 x float> %1108, zeroinitializer, !dbg !171
  %1111 = or <2 x i1> %1109, %1110, !dbg !172
  %1112 = fptosi <2 x float> %1108 to <2 x i8>, !dbg !173
  %1113 = select <2 x i1> %1111, <2 x i8> %1112, <2 x i8> splat (i8 127), !dbg !174
  %1114 = getelementptr i8, ptr addrspace(1) %12, i64 %78, !dbg !175
  %1115 = bitcast <2 x i8> %1113 to i16, !dbg !176
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1115, ptr addrspace(1) %1114, i1 %21) #5, !dbg !176
  %1116 = add i32 %50, 1024, !dbg !177
  %1117 = sext i32 %1116 to i64, !dbg !160
  %1118 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1117, !dbg !160
  %1119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1118, i1 %21) #5, !dbg !161
  %1120 = bitcast i32 %1119 to <2 x bfloat>, !dbg !161
  %1121 = extractelement <2 x bfloat> %1120, i64 0, !dbg !161
  %1122 = extractelement <2 x bfloat> %1120, i64 1, !dbg !161
  %1123 = fpext bfloat %1121 to float, !dbg !162
  %1124 = fpext bfloat %1122 to float, !dbg !162
  %1125 = fmul float %1091, %1123, !dbg !159
  %1126 = fmul float %1091, %1124, !dbg !159
  %1127 = tail call float @llvm.nvvm.round.f(float %1125) #5, !dbg !163
  %1128 = tail call float @llvm.nvvm.round.f(float %1126) #5, !dbg !163
  %1129 = insertelement <2 x float> poison, float %1127, i64 0, !dbg !164
  %1130 = insertelement <2 x float> %1129, float %1128, i64 1, !dbg !164
  %1131 = fcmp ogt <2 x float> %1130, splat (float -1.270000e+02), !dbg !164
  %1132 = fcmp uno <2 x float> %1130, zeroinitializer, !dbg !166
  %1133 = or <2 x i1> %1131, %1132, !dbg !167
  %1134 = select <2 x i1> %1133, <2 x float> %1130, <2 x float> splat (float -1.270000e+02), !dbg !168
  %1135 = fcmp olt <2 x float> %1134, splat (float 1.270000e+02), !dbg !169
  %1136 = fcmp uno <2 x float> %1134, zeroinitializer, !dbg !171
  %1137 = or <2 x i1> %1135, %1136, !dbg !172
  %1138 = fptosi <2 x float> %1134 to <2 x i8>, !dbg !173
  %1139 = select <2 x i1> %1137, <2 x i8> %1138, <2 x i8> splat (i8 127), !dbg !174
  %1140 = getelementptr i8, ptr addrspace(1) %12, i64 %1117, !dbg !175
  %1141 = bitcast <2 x i8> %1139 to i16, !dbg !176
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1141, ptr addrspace(1) %1140, i1 %21) #5, !dbg !176
  %1142 = add i32 %50, 2048, !dbg !177
  %1143 = sext i32 %1142 to i64, !dbg !160
  %1144 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1143, !dbg !160
  %1145 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1144, i1 %21) #5, !dbg !161
  %1146 = bitcast i32 %1145 to <2 x bfloat>, !dbg !161
  %1147 = extractelement <2 x bfloat> %1146, i64 0, !dbg !161
  %1148 = extractelement <2 x bfloat> %1146, i64 1, !dbg !161
  %1149 = fpext bfloat %1147 to float, !dbg !162
  %1150 = fpext bfloat %1148 to float, !dbg !162
  %1151 = fmul float %1091, %1149, !dbg !159
  %1152 = fmul float %1091, %1150, !dbg !159
  %1153 = tail call float @llvm.nvvm.round.f(float %1151) #5, !dbg !163
  %1154 = tail call float @llvm.nvvm.round.f(float %1152) #5, !dbg !163
  %1155 = insertelement <2 x float> poison, float %1153, i64 0, !dbg !164
  %1156 = insertelement <2 x float> %1155, float %1154, i64 1, !dbg !164
  %1157 = fcmp ogt <2 x float> %1156, splat (float -1.270000e+02), !dbg !164
  %1158 = fcmp uno <2 x float> %1156, zeroinitializer, !dbg !166
  %1159 = or <2 x i1> %1157, %1158, !dbg !167
  %1160 = select <2 x i1> %1159, <2 x float> %1156, <2 x float> splat (float -1.270000e+02), !dbg !168
  %1161 = fcmp olt <2 x float> %1160, splat (float 1.270000e+02), !dbg !169
  %1162 = fcmp uno <2 x float> %1160, zeroinitializer, !dbg !171
  %1163 = or <2 x i1> %1161, %1162, !dbg !172
  %1164 = fptosi <2 x float> %1160 to <2 x i8>, !dbg !173
  %1165 = select <2 x i1> %1163, <2 x i8> %1164, <2 x i8> splat (i8 127), !dbg !174
  %1166 = getelementptr i8, ptr addrspace(1) %12, i64 %1143, !dbg !175
  %1167 = bitcast <2 x i8> %1165 to i16, !dbg !176
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1167, ptr addrspace(1) %1166, i1 %21) #5, !dbg !176
  ret void, !dbg !178
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 40, column: 34, scope: !6)
!40 = !DILocation(line: 40, column: 51, scope: !6)
!41 = !DILocation(line: 40, column: 113, scope: !6)
!42 = !DILocation(line: 41, column: 41, scope: !6)
!43 = !DILocation(line: 41, column: 34, scope: !6)
!44 = !DILocation(line: 41, column: 48, scope: !6)
!45 = !DILocation(line: 42, column: 34, scope: !6)
!46 = !DILocation(line: 42, column: 48, scope: !6)
!47 = !DILocation(line: 43, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 51, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 44, column: 42, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 45, column: 42, scope: !6)
!53 = !DILocation(line: 48, column: 23, scope: !6)
!54 = !DILocation(line: 60, column: 23, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 47, column: 22, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 62, column: 24, scope: !6)
!61 = !DILocation(line: 63, column: 23, scope: !6)
!62 = !DILocation(line: 64, column: 23, scope: !6)
!63 = !DILocation(line: 73, column: 29, scope: !6)
!64 = !DILocation(line: 73, column: 53, scope: !6)
!65 = !DILocation(line: 70, column: 64, scope: !6)
!66 = !DILocation(line: 72, column: 68, scope: !6)
!67 = !DILocation(line: 35, column: 31, scope: !6)
!68 = !DILocation(line: 40, column: 41, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 68, column: 55, scope: !6)
!71 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !70)
!72 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !70)
!73 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !70)
!74 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !70)
!75 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !70)
!76 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !70)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !79)
!79 = !DILocation(line: 74, column: 85, scope: !6)
!80 = !DILocation(line: 217, column: 21, scope: !81, inlinedAt: !79)
!81 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!82 = !DILocation(line: 218, column: 28, scope: !81, inlinedAt: !79)
!83 = !DILocation(line: 219, column: 39, scope: !81, inlinedAt: !79)
!84 = !DILocation(line: 219, column: 60, scope: !81, inlinedAt: !79)
!85 = !DILocation(line: 219, column: 49, scope: !81, inlinedAt: !79)
!86 = !DILocation(line: 221, column: 25, scope: !81, inlinedAt: !79)
!87 = !DILocation(line: 221, column: 17, scope: !81, inlinedAt: !79)
!88 = !DILocation(line: 222, column: 15, scope: !81, inlinedAt: !79)
!89 = !DILocation(line: 222, column: 30, scope: !81, inlinedAt: !79)
!90 = !DILocation(line: 222, column: 38, scope: !81, inlinedAt: !79)
!91 = !DILocation(line: 222, column: 49, scope: !81, inlinedAt: !79)
!92 = !DILocation(line: 222, column: 22, scope: !81, inlinedAt: !79)
!93 = !DILocation(line: 94, column: 25, scope: !6)
!94 = !DILocation(line: 96, column: 24, scope: !6)
!95 = !DILocation(line: 97, column: 32, scope: !6)
!96 = !DILocation(line: 92, column: 24, scope: !6)
!97 = !DILocation(line: 98, column: 24, scope: !6)
!98 = !DILocation(line: 112, column: 50, scope: !6)
!99 = !DILocation(line: 86, column: 36, scope: !6)
!100 = !DILocation(line: 86, column: 53, scope: !6)
!101 = !DILocation(line: 87, column: 35, scope: !6)
!102 = !DILocation(line: 88, column: 35, scope: !6)
!103 = !DILocation(line: 89, column: 42, scope: !6)
!104 = !DILocation(line: 89, column: 35, scope: !6)
!105 = !DILocation(line: 90, column: 35, scope: !6)
!106 = !DILocation(line: 86, column: 115, scope: !6)
!107 = !DILocation(line: 87, column: 50, scope: !6)
!108 = !DILocation(line: 88, column: 50, scope: !6)
!109 = !DILocation(line: 88, column: 103, scope: !6)
!110 = !DILocation(line: 89, column: 49, scope: !6)
!111 = !DILocation(line: 90, column: 49, scope: !6)
!112 = !DILocation(line: 90, column: 102, scope: !6)
!113 = !DILocation(line: 101, column: 24, scope: !6)
!114 = !DILocation(line: 103, column: 24, scope: !6)
!115 = !DILocation(line: 104, column: 24, scope: !6)
!116 = !DILocation(line: 106, column: 24, scope: !6)
!117 = !DILocation(line: 107, column: 24, scope: !6)
!118 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !119)
!119 = !DILocation(line: 111, column: 47, scope: !6)
!120 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !119)
!121 = !DILocation(line: 113, column: 29, scope: !6)
!122 = !DILocation(line: 113, column: 53, scope: !6)
!123 = !DILocation(line: 86, column: 43, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !119)
!125 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !119)
!126 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !127)
!127 = !DILocation(line: 114, column: 40, scope: !6)
!128 = !DILocation(line: 94, column: 15, scope: !81, inlinedAt: !127)
!129 = !DILocation(line: 104, column: 21, scope: !81, inlinedAt: !130)
!130 = !DILocation(line: 115, column: 40, scope: !6)
!131 = !DILocation(line: 96, column: 16, scope: !81, inlinedAt: !127)
!132 = !DILocation(line: 97, column: 29, scope: !81, inlinedAt: !127)
!133 = !DILocation(line: 96, column: 21, scope: !81, inlinedAt: !127)
!134 = !DILocation(line: 116, column: 37, scope: !6)
!135 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !130)
!136 = !DILocation(line: 102, column: 15, scope: !81, inlinedAt: !130)
!137 = !DILocation(line: 104, column: 16, scope: !81, inlinedAt: !130)
!138 = !DILocation(line: 105, column: 29, scope: !81, inlinedAt: !130)
!139 = !DILocation(line: 117, column: 37, scope: !6)
!140 = !DILocation(line: 116, column: 25, scope: !6)
!141 = !DILocation(line: 117, column: 25, scope: !6)
!142 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !143)
!143 = !DILocation(line: 126, column: 46, scope: !6)
!144 = !DILocation(line: 127, column: 17, scope: !6)
!145 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !146)
!146 = !DILocation(line: 128, column: 46, scope: !6)
!147 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !148)
!148 = !DILocation(line: 129, column: 46, scope: !6)
!149 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !148)
!151 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !148)
!152 = !DILocation(line: 131, column: 24, scope: !6)
!153 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 134, column: 46, scope: !6)
!155 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !154)
!156 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !154)
!157 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !154)
!158 = !DILocation(line: 137, column: 25, scope: !6)
!159 = !DILocation(line: 140, column: 24, scope: !6)
!160 = !DILocation(line: 124, column: 36, scope: !6)
!161 = !DILocation(line: 124, column: 53, scope: !6)
!162 = !DILocation(line: 124, column: 115, scope: !6)
!163 = !DILocation(line: 141, column: 36, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 144, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !170)
!170 = !DILocation(line: 146, column: 46, scope: !6)
!171 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !170)
!172 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !170)
!173 = !DILocation(line: 148, column: 25, scope: !6)
!174 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !170)
!175 = !DILocation(line: 149, column: 29, scope: !6)
!176 = !DILocation(line: 149, column: 53, scope: !6)
!177 = !DILocation(line: 124, column: 43, scope: !6)
!178 = !DILocation(line: 118, column: 4, scope: !6)
