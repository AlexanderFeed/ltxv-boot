; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 6, !dbg !11
  %13 = and i32 %12, 7, !dbg !11
  %14 = and i32 %11, 31, !dbg !11
  %15 = or disjoint i32 %13, %10, !dbg !12
  %16 = icmp slt i32 %15, 4112, !dbg !13
  %17 = shl i32 %11, 3, !dbg !14
  %18 = and i32 %17, 504, !dbg !14
  %19 = or disjoint i32 %18, 4, !dbg !14
  %20 = mul i32 %15, 3072, !dbg !15
  %21 = mul i32 %15, 12288, !dbg !16
  %22 = add i32 %21, -3072
  %23 = or disjoint i32 %22, %19
  %24 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !17
  %25 = shufflevector <8 x i1> %24, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %26, !dbg !18

26:                                               ; preds = %8, %__nv_tanhf.exit287
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit287 ]
  %27 = phi <8 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %418, %__nv_tanhf.exit287 ]
  %28 = phi <8 x float> [ splat (float 0x7FF0000000000000), %8 ], [ %414, %__nv_tanhf.exit287 ]
  %29 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !19
  %30 = trunc i64 %indvars.iv to i32, !dbg !20
  %31 = or disjoint i32 %18, %30, !dbg !20
  %32 = add i32 %31, %20, !dbg !20
  %33 = sext i32 %32 to i64, !dbg !21
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = and i1 %16, %29, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %35) #5, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !23
  %45 = shufflevector <2 x bfloat> %44, <2 x bfloat> %42, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %46 = shufflevector <2 x bfloat> %40, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %47 = shufflevector <8 x bfloat> %45, <8 x bfloat> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !24
  %48 = shufflevector <2 x bfloat> %40, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %49 = shufflevector <8 x bfloat> %47, <8 x bfloat> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !24
  %50 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %51 = shufflevector <8 x bfloat> %49, <8 x bfloat> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !24
  %52 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %53 = shufflevector <8 x bfloat> %51, <8 x bfloat> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !24
  %54 = fpext <8 x bfloat> %53 to <8 x float>, !dbg !24
  %55 = icmp samesign ugt i64 %indvars.iv, 3071, !dbg !25
  %56 = add i32 %22, %31, !dbg !26
  %57 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !26
  %58 = add i32 %23, %57, !dbg !26
  %59 = sext i32 %56 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !27
  %61 = sext i32 %58 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !27
  %63 = and i1 %16, %55, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %63) #5, !dbg !29
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %63) #5, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !29
  %74 = insertelement <8 x i32> poison, i32 %73, i64 0, !dbg !29
  %75 = insertelement <8 x i32> %74, i32 %72, i64 1, !dbg !29
  %76 = insertelement <8 x i32> %75, i32 %71, i64 2, !dbg !29
  %77 = insertelement <8 x i32> %76, i32 %70, i64 3, !dbg !29
  %78 = insertelement <8 x i32> %77, i32 %68, i64 4, !dbg !29
  %79 = insertelement <8 x i32> %78, i32 %67, i64 5, !dbg !29
  %80 = insertelement <8 x i32> %79, i32 %66, i64 6, !dbg !29
  %81 = insertelement <8 x i32> %80, i32 %65, i64 7, !dbg !29
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !29
  %83 = fmul <8 x float> %82, splat (float 5.000000e-01), !dbg !30
  %84 = bitcast i32 %65 to float, !dbg !31
  %85 = fmul float %84, %84, !dbg !31
  %86 = bitcast i32 %66 to float, !dbg !31
  %87 = fmul float %86, %86, !dbg !31
  %88 = bitcast i32 %67 to float, !dbg !31
  %89 = fmul float %88, %88, !dbg !31
  %90 = bitcast i32 %68 to float, !dbg !31
  %91 = fmul float %90, %90, !dbg !31
  %92 = bitcast i32 %70 to float, !dbg !31
  %93 = fmul float %92, %92, !dbg !31
  %94 = bitcast i32 %71 to float, !dbg !31
  %95 = fmul float %94, %94, !dbg !31
  %96 = bitcast i32 %72 to float, !dbg !31
  %97 = fmul float %96, %96, !dbg !31
  %98 = bitcast i32 %73 to float, !dbg !31
  %99 = fmul float %98, %98, !dbg !31
  %100 = fmul float %85, %84, !dbg !32
  %101 = fmul float %87, %86, !dbg !32
  %102 = fmul float %89, %88, !dbg !32
  %103 = fmul float %91, %90, !dbg !32
  %104 = fmul float %93, %92, !dbg !32
  %105 = fmul float %95, %94, !dbg !32
  %106 = fmul float %97, %96, !dbg !32
  %107 = fmul float %99, %98, !dbg !32
  %108 = fmul float %100, 0x3FA6E4E260000000, !dbg !33
  %109 = fmul float %101, 0x3FA6E4E260000000, !dbg !33
  %110 = fmul float %102, 0x3FA6E4E260000000, !dbg !33
  %111 = fmul float %103, 0x3FA6E4E260000000, !dbg !33
  %112 = fmul float %104, 0x3FA6E4E260000000, !dbg !33
  %113 = fmul float %105, 0x3FA6E4E260000000, !dbg !33
  %114 = fmul float %106, 0x3FA6E4E260000000, !dbg !33
  %115 = fmul float %107, 0x3FA6E4E260000000, !dbg !33
  %116 = fadd float %108, %84, !dbg !34
  %117 = fadd float %109, %86, !dbg !34
  %118 = fadd float %110, %88, !dbg !34
  %119 = fadd float %111, %90, !dbg !34
  %120 = fadd float %112, %92, !dbg !34
  %121 = fadd float %113, %94, !dbg !34
  %122 = fadd float %114, %96, !dbg !34
  %123 = fadd float %115, %98, !dbg !34
  %124 = fmul float %116, 0x3FE9884540000000, !dbg !35
  %125 = fmul float %117, 0x3FE9884540000000, !dbg !35
  %126 = fmul float %118, 0x3FE9884540000000, !dbg !35
  %127 = fmul float %119, 0x3FE9884540000000, !dbg !35
  %128 = fmul float %120, 0x3FE9884540000000, !dbg !35
  %129 = fmul float %121, 0x3FE9884540000000, !dbg !35
  %130 = fmul float %122, 0x3FE9884540000000, !dbg !35
  %131 = fmul float %123, 0x3FE9884540000000, !dbg !35
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i136 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call float @llvm.nvvm.fabs.ftz.f(float %124) #5, !dbg !36
  %134 = tail call float @llvm.nvvm.fabs.f(float %124) #5, !dbg !36
  %.01.i137 = select i1 %.not.i136, float %134, float %133, !dbg !36
  %135 = fcmp ult float %.01.i137, 0x3FE3333340000000, !dbg !36
  br i1 %135, label %__internal_fmad.exit3.i143, label %__internal_fmad.exit1.i138, !dbg !36

__internal_fmad.exit1.i138:                       ; preds = %26
  %136 = fmul float %.01.i137, 0x4007154760000000, !dbg !36
  %137 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %136) #5, !dbg !36
  %138 = fadd float %137, 1.000000e+00, !dbg !36
  %139 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %138) #6, !dbg !36, !srcloc !37
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i139 = icmp eq i32 %140, 0, !dbg !36
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i140 = select i1 %.not6.i139, float %142, float %141, !dbg !36
  %143 = fcmp oge float %.01.i137, 0x4022059680000000, !dbg !36
  %s.0.i141 = select i1 %143, float 1.000000e+00, float %.03.i140, !dbg !36
  %144 = bitcast float %s.0.i141 to i32, !dbg !36
  %145 = bitcast float %124 to i32, !dbg !36
  %146 = and i32 %145, -2147483648, !dbg !36
  %147 = or i32 %146, %144, !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  br label %__nv_tanhf.exit154, !dbg !36

__internal_fmad.exit3.i143:                       ; preds = %26
  %149 = fmul float %124, %124, !dbg !36
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i144 = icmp eq i32 %150, 0, !dbg !36
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !36
  %152 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i145 = select i1 %.not1.i144, float %152, float %151, !dbg !36
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i146 = icmp eq i32 %153, 0, !dbg !36
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i145, float %149, float 0x3FC10B2820000000) #5, !dbg !36
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i145, float %149, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i147 = select i1 %.not2.i146, float %155, float %154, !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i148 = icmp eq i32 %156, 0, !dbg !36
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i147, float %149, float 0xBFD5553DA0000000) #5, !dbg !36
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i147, float %149, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i149 = select i1 %.not3.i148, float %158, float %157, !dbg !36
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i150 = icmp eq i32 %159, 0, !dbg !36
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i149, float %149, float 0.000000e+00) #5, !dbg !36
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i149, float %149, float 0.000000e+00) #5, !dbg !36
  %.04.i151 = select i1 %.not4.i150, float %161, float %160, !dbg !36
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i152 = icmp eq i32 %162, 0, !dbg !36
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i151, float %124, float %124) #5, !dbg !36
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i151, float %124, float %124) #5, !dbg !36
  %.02.i153 = select i1 %.not5.i152, float %164, float %163, !dbg !36
  br label %__nv_tanhf.exit154, !dbg !36

__nv_tanhf.exit154:                               ; preds = %__internal_fmad.exit1.i138, %__internal_fmad.exit3.i143
  %s.1.i142 = phi float [ %148, %__internal_fmad.exit1.i138 ], [ %.02.i153, %__internal_fmad.exit3.i143 ], !dbg !36
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i155 = icmp eq i32 %165, 0, !dbg !36
  %166 = tail call float @llvm.nvvm.fabs.ftz.f(float %125) #5, !dbg !36
  %167 = tail call float @llvm.nvvm.fabs.f(float %125) #5, !dbg !36
  %.01.i156 = select i1 %.not.i155, float %167, float %166, !dbg !36
  %168 = fcmp ult float %.01.i156, 0x3FE3333340000000, !dbg !36
  br i1 %168, label %__internal_fmad.exit3.i162, label %__internal_fmad.exit1.i157, !dbg !36

__internal_fmad.exit1.i157:                       ; preds = %__nv_tanhf.exit154
  %169 = fmul float %.01.i156, 0x4007154760000000, !dbg !36
  %170 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %169) #5, !dbg !36
  %171 = fadd float %170, 1.000000e+00, !dbg !36
  %172 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %171) #6, !dbg !36, !srcloc !37
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i158 = icmp eq i32 %173, 0, !dbg !36
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %172, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i159 = select i1 %.not6.i158, float %175, float %174, !dbg !36
  %176 = fcmp oge float %.01.i156, 0x4022059680000000, !dbg !36
  %s.0.i160 = select i1 %176, float 1.000000e+00, float %.03.i159, !dbg !36
  %177 = bitcast float %s.0.i160 to i32, !dbg !36
  %178 = bitcast float %125 to i32, !dbg !36
  %179 = and i32 %178, -2147483648, !dbg !36
  %180 = or i32 %179, %177, !dbg !36
  %181 = bitcast i32 %180 to float, !dbg !36
  br label %__nv_tanhf.exit173, !dbg !36

__internal_fmad.exit3.i162:                       ; preds = %__nv_tanhf.exit154
  %182 = fmul float %125, %125, !dbg !36
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i163 = icmp eq i32 %183, 0, !dbg !36
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !36
  %185 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %182, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i164 = select i1 %.not1.i163, float %185, float %184, !dbg !36
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i165 = icmp eq i32 %186, 0, !dbg !36
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i164, float %182, float 0x3FC10B2820000000) #5, !dbg !36
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i164, float %182, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i166 = select i1 %.not2.i165, float %188, float %187, !dbg !36
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i167 = icmp eq i32 %189, 0, !dbg !36
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i166, float %182, float 0xBFD5553DA0000000) #5, !dbg !36
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i166, float %182, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i168 = select i1 %.not3.i167, float %191, float %190, !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i169 = icmp eq i32 %192, 0, !dbg !36
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i168, float %182, float 0.000000e+00) #5, !dbg !36
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i168, float %182, float 0.000000e+00) #5, !dbg !36
  %.04.i170 = select i1 %.not4.i169, float %194, float %193, !dbg !36
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i171 = icmp eq i32 %195, 0, !dbg !36
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i170, float %125, float %125) #5, !dbg !36
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i170, float %125, float %125) #5, !dbg !36
  %.02.i172 = select i1 %.not5.i171, float %197, float %196, !dbg !36
  br label %__nv_tanhf.exit173, !dbg !36

__nv_tanhf.exit173:                               ; preds = %__internal_fmad.exit1.i157, %__internal_fmad.exit3.i162
  %s.1.i161 = phi float [ %181, %__internal_fmad.exit1.i157 ], [ %.02.i172, %__internal_fmad.exit3.i162 ], !dbg !36
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i174 = icmp eq i32 %198, 0, !dbg !36
  %199 = tail call float @llvm.nvvm.fabs.ftz.f(float %126) #5, !dbg !36
  %200 = tail call float @llvm.nvvm.fabs.f(float %126) #5, !dbg !36
  %.01.i175 = select i1 %.not.i174, float %200, float %199, !dbg !36
  %201 = fcmp ult float %.01.i175, 0x3FE3333340000000, !dbg !36
  br i1 %201, label %__internal_fmad.exit3.i181, label %__internal_fmad.exit1.i176, !dbg !36

__internal_fmad.exit1.i176:                       ; preds = %__nv_tanhf.exit173
  %202 = fmul float %.01.i175, 0x4007154760000000, !dbg !36
  %203 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %202) #5, !dbg !36
  %204 = fadd float %203, 1.000000e+00, !dbg !36
  %205 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %204) #6, !dbg !36, !srcloc !37
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i177 = icmp eq i32 %206, 0, !dbg !36
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %205, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i178 = select i1 %.not6.i177, float %208, float %207, !dbg !36
  %209 = fcmp oge float %.01.i175, 0x4022059680000000, !dbg !36
  %s.0.i179 = select i1 %209, float 1.000000e+00, float %.03.i178, !dbg !36
  %210 = bitcast float %s.0.i179 to i32, !dbg !36
  %211 = bitcast float %126 to i32, !dbg !36
  %212 = and i32 %211, -2147483648, !dbg !36
  %213 = or i32 %212, %210, !dbg !36
  %214 = bitcast i32 %213 to float, !dbg !36
  br label %__nv_tanhf.exit192, !dbg !36

__internal_fmad.exit3.i181:                       ; preds = %__nv_tanhf.exit173
  %215 = fmul float %126, %126, !dbg !36
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i182 = icmp eq i32 %216, 0, !dbg !36
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !36
  %218 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %215, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i183 = select i1 %.not1.i182, float %218, float %217, !dbg !36
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i184 = icmp eq i32 %219, 0, !dbg !36
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i183, float %215, float 0x3FC10B2820000000) #5, !dbg !36
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i183, float %215, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i185 = select i1 %.not2.i184, float %221, float %220, !dbg !36
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i186 = icmp eq i32 %222, 0, !dbg !36
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i185, float %215, float 0xBFD5553DA0000000) #5, !dbg !36
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i185, float %215, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i187 = select i1 %.not3.i186, float %224, float %223, !dbg !36
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i188 = icmp eq i32 %225, 0, !dbg !36
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i187, float %215, float 0.000000e+00) #5, !dbg !36
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i187, float %215, float 0.000000e+00) #5, !dbg !36
  %.04.i189 = select i1 %.not4.i188, float %227, float %226, !dbg !36
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i190 = icmp eq i32 %228, 0, !dbg !36
  %229 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i189, float %126, float %126) #5, !dbg !36
  %230 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i189, float %126, float %126) #5, !dbg !36
  %.02.i191 = select i1 %.not5.i190, float %230, float %229, !dbg !36
  br label %__nv_tanhf.exit192, !dbg !36

__nv_tanhf.exit192:                               ; preds = %__internal_fmad.exit1.i176, %__internal_fmad.exit3.i181
  %s.1.i180 = phi float [ %214, %__internal_fmad.exit1.i176 ], [ %.02.i191, %__internal_fmad.exit3.i181 ], !dbg !36
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i193 = icmp eq i32 %231, 0, !dbg !36
  %232 = tail call float @llvm.nvvm.fabs.ftz.f(float %127) #5, !dbg !36
  %233 = tail call float @llvm.nvvm.fabs.f(float %127) #5, !dbg !36
  %.01.i194 = select i1 %.not.i193, float %233, float %232, !dbg !36
  %234 = fcmp ult float %.01.i194, 0x3FE3333340000000, !dbg !36
  br i1 %234, label %__internal_fmad.exit3.i200, label %__internal_fmad.exit1.i195, !dbg !36

__internal_fmad.exit1.i195:                       ; preds = %__nv_tanhf.exit192
  %235 = fmul float %.01.i194, 0x4007154760000000, !dbg !36
  %236 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %235) #5, !dbg !36
  %237 = fadd float %236, 1.000000e+00, !dbg !36
  %238 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %237) #6, !dbg !36, !srcloc !37
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i196 = icmp eq i32 %239, 0, !dbg !36
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %238, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i197 = select i1 %.not6.i196, float %241, float %240, !dbg !36
  %242 = fcmp oge float %.01.i194, 0x4022059680000000, !dbg !36
  %s.0.i198 = select i1 %242, float 1.000000e+00, float %.03.i197, !dbg !36
  %243 = bitcast float %s.0.i198 to i32, !dbg !36
  %244 = bitcast float %127 to i32, !dbg !36
  %245 = and i32 %244, -2147483648, !dbg !36
  %246 = or i32 %245, %243, !dbg !36
  %247 = bitcast i32 %246 to float, !dbg !36
  br label %__nv_tanhf.exit211, !dbg !36

__internal_fmad.exit3.i200:                       ; preds = %__nv_tanhf.exit192
  %248 = fmul float %127, %127, !dbg !36
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i201 = icmp eq i32 %249, 0, !dbg !36
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !36
  %251 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %248, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i202 = select i1 %.not1.i201, float %251, float %250, !dbg !36
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i203 = icmp eq i32 %252, 0, !dbg !36
  %253 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i202, float %248, float 0x3FC10B2820000000) #5, !dbg !36
  %254 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i202, float %248, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i204 = select i1 %.not2.i203, float %254, float %253, !dbg !36
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i205 = icmp eq i32 %255, 0, !dbg !36
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i204, float %248, float 0xBFD5553DA0000000) #5, !dbg !36
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i204, float %248, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i206 = select i1 %.not3.i205, float %257, float %256, !dbg !36
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i207 = icmp eq i32 %258, 0, !dbg !36
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i206, float %248, float 0.000000e+00) #5, !dbg !36
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i206, float %248, float 0.000000e+00) #5, !dbg !36
  %.04.i208 = select i1 %.not4.i207, float %260, float %259, !dbg !36
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i209 = icmp eq i32 %261, 0, !dbg !36
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i208, float %127, float %127) #5, !dbg !36
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i208, float %127, float %127) #5, !dbg !36
  %.02.i210 = select i1 %.not5.i209, float %263, float %262, !dbg !36
  br label %__nv_tanhf.exit211, !dbg !36

__nv_tanhf.exit211:                               ; preds = %__internal_fmad.exit1.i195, %__internal_fmad.exit3.i200
  %s.1.i199 = phi float [ %247, %__internal_fmad.exit1.i195 ], [ %.02.i210, %__internal_fmad.exit3.i200 ], !dbg !36
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i212 = icmp eq i32 %264, 0, !dbg !36
  %265 = tail call float @llvm.nvvm.fabs.ftz.f(float %128) #5, !dbg !36
  %266 = tail call float @llvm.nvvm.fabs.f(float %128) #5, !dbg !36
  %.01.i213 = select i1 %.not.i212, float %266, float %265, !dbg !36
  %267 = fcmp ult float %.01.i213, 0x3FE3333340000000, !dbg !36
  br i1 %267, label %__internal_fmad.exit3.i219, label %__internal_fmad.exit1.i214, !dbg !36

__internal_fmad.exit1.i214:                       ; preds = %__nv_tanhf.exit211
  %268 = fmul float %.01.i213, 0x4007154760000000, !dbg !36
  %269 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %268) #5, !dbg !36
  %270 = fadd float %269, 1.000000e+00, !dbg !36
  %271 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %270) #6, !dbg !36, !srcloc !37
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i215 = icmp eq i32 %272, 0, !dbg !36
  %273 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %271, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %274 = tail call float @llvm.nvvm.fma.rn.f(float %271, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i216 = select i1 %.not6.i215, float %274, float %273, !dbg !36
  %275 = fcmp oge float %.01.i213, 0x4022059680000000, !dbg !36
  %s.0.i217 = select i1 %275, float 1.000000e+00, float %.03.i216, !dbg !36
  %276 = bitcast float %s.0.i217 to i32, !dbg !36
  %277 = bitcast float %128 to i32, !dbg !36
  %278 = and i32 %277, -2147483648, !dbg !36
  %279 = or i32 %278, %276, !dbg !36
  %280 = bitcast i32 %279 to float, !dbg !36
  br label %__nv_tanhf.exit230, !dbg !36

__internal_fmad.exit3.i219:                       ; preds = %__nv_tanhf.exit211
  %281 = fmul float %128, %128, !dbg !36
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i220 = icmp eq i32 %282, 0, !dbg !36
  %283 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %281, float 0xBFAAC795C0000000) #5, !dbg !36
  %284 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %281, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i221 = select i1 %.not1.i220, float %284, float %283, !dbg !36
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i222 = icmp eq i32 %285, 0, !dbg !36
  %286 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i221, float %281, float 0x3FC10B2820000000) #5, !dbg !36
  %287 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i221, float %281, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i223 = select i1 %.not2.i222, float %287, float %286, !dbg !36
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i224 = icmp eq i32 %288, 0, !dbg !36
  %289 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i223, float %281, float 0xBFD5553DA0000000) #5, !dbg !36
  %290 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i223, float %281, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i225 = select i1 %.not3.i224, float %290, float %289, !dbg !36
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i226 = icmp eq i32 %291, 0, !dbg !36
  %292 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i225, float %281, float 0.000000e+00) #5, !dbg !36
  %293 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i225, float %281, float 0.000000e+00) #5, !dbg !36
  %.04.i227 = select i1 %.not4.i226, float %293, float %292, !dbg !36
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i228 = icmp eq i32 %294, 0, !dbg !36
  %295 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i227, float %128, float %128) #5, !dbg !36
  %296 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i227, float %128, float %128) #5, !dbg !36
  %.02.i229 = select i1 %.not5.i228, float %296, float %295, !dbg !36
  br label %__nv_tanhf.exit230, !dbg !36

__nv_tanhf.exit230:                               ; preds = %__internal_fmad.exit1.i214, %__internal_fmad.exit3.i219
  %s.1.i218 = phi float [ %280, %__internal_fmad.exit1.i214 ], [ %.02.i229, %__internal_fmad.exit3.i219 ], !dbg !36
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i231 = icmp eq i32 %297, 0, !dbg !36
  %298 = tail call float @llvm.nvvm.fabs.ftz.f(float %129) #5, !dbg !36
  %299 = tail call float @llvm.nvvm.fabs.f(float %129) #5, !dbg !36
  %.01.i232 = select i1 %.not.i231, float %299, float %298, !dbg !36
  %300 = fcmp ult float %.01.i232, 0x3FE3333340000000, !dbg !36
  br i1 %300, label %__internal_fmad.exit3.i238, label %__internal_fmad.exit1.i233, !dbg !36

__internal_fmad.exit1.i233:                       ; preds = %__nv_tanhf.exit230
  %301 = fmul float %.01.i232, 0x4007154760000000, !dbg !36
  %302 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %301) #5, !dbg !36
  %303 = fadd float %302, 1.000000e+00, !dbg !36
  %304 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %303) #6, !dbg !36, !srcloc !37
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i234 = icmp eq i32 %305, 0, !dbg !36
  %306 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %304, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %307 = tail call float @llvm.nvvm.fma.rn.f(float %304, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i235 = select i1 %.not6.i234, float %307, float %306, !dbg !36
  %308 = fcmp oge float %.01.i232, 0x4022059680000000, !dbg !36
  %s.0.i236 = select i1 %308, float 1.000000e+00, float %.03.i235, !dbg !36
  %309 = bitcast float %s.0.i236 to i32, !dbg !36
  %310 = bitcast float %129 to i32, !dbg !36
  %311 = and i32 %310, -2147483648, !dbg !36
  %312 = or i32 %311, %309, !dbg !36
  %313 = bitcast i32 %312 to float, !dbg !36
  br label %__nv_tanhf.exit249, !dbg !36

__internal_fmad.exit3.i238:                       ; preds = %__nv_tanhf.exit230
  %314 = fmul float %129, %129, !dbg !36
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i239 = icmp eq i32 %315, 0, !dbg !36
  %316 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %314, float 0xBFAAC795C0000000) #5, !dbg !36
  %317 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %314, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i240 = select i1 %.not1.i239, float %317, float %316, !dbg !36
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i241 = icmp eq i32 %318, 0, !dbg !36
  %319 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i240, float %314, float 0x3FC10B2820000000) #5, !dbg !36
  %320 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i240, float %314, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i242 = select i1 %.not2.i241, float %320, float %319, !dbg !36
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i243 = icmp eq i32 %321, 0, !dbg !36
  %322 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i242, float %314, float 0xBFD5553DA0000000) #5, !dbg !36
  %323 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i242, float %314, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i244 = select i1 %.not3.i243, float %323, float %322, !dbg !36
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i245 = icmp eq i32 %324, 0, !dbg !36
  %325 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i244, float %314, float 0.000000e+00) #5, !dbg !36
  %326 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i244, float %314, float 0.000000e+00) #5, !dbg !36
  %.04.i246 = select i1 %.not4.i245, float %326, float %325, !dbg !36
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i247 = icmp eq i32 %327, 0, !dbg !36
  %328 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i246, float %129, float %129) #5, !dbg !36
  %329 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i246, float %129, float %129) #5, !dbg !36
  %.02.i248 = select i1 %.not5.i247, float %329, float %328, !dbg !36
  br label %__nv_tanhf.exit249, !dbg !36

__nv_tanhf.exit249:                               ; preds = %__internal_fmad.exit1.i233, %__internal_fmad.exit3.i238
  %s.1.i237 = phi float [ %313, %__internal_fmad.exit1.i233 ], [ %.02.i248, %__internal_fmad.exit3.i238 ], !dbg !36
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i250 = icmp eq i32 %330, 0, !dbg !36
  %331 = tail call float @llvm.nvvm.fabs.ftz.f(float %130) #5, !dbg !36
  %332 = tail call float @llvm.nvvm.fabs.f(float %130) #5, !dbg !36
  %.01.i251 = select i1 %.not.i250, float %332, float %331, !dbg !36
  %333 = fcmp ult float %.01.i251, 0x3FE3333340000000, !dbg !36
  br i1 %333, label %__internal_fmad.exit3.i257, label %__internal_fmad.exit1.i252, !dbg !36

__internal_fmad.exit1.i252:                       ; preds = %__nv_tanhf.exit249
  %334 = fmul float %.01.i251, 0x4007154760000000, !dbg !36
  %335 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %334) #5, !dbg !36
  %336 = fadd float %335, 1.000000e+00, !dbg !36
  %337 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %336) #6, !dbg !36, !srcloc !37
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i253 = icmp eq i32 %338, 0, !dbg !36
  %339 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %337, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %340 = tail call float @llvm.nvvm.fma.rn.f(float %337, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i254 = select i1 %.not6.i253, float %340, float %339, !dbg !36
  %341 = fcmp oge float %.01.i251, 0x4022059680000000, !dbg !36
  %s.0.i255 = select i1 %341, float 1.000000e+00, float %.03.i254, !dbg !36
  %342 = bitcast float %s.0.i255 to i32, !dbg !36
  %343 = bitcast float %130 to i32, !dbg !36
  %344 = and i32 %343, -2147483648, !dbg !36
  %345 = or i32 %344, %342, !dbg !36
  %346 = bitcast i32 %345 to float, !dbg !36
  br label %__nv_tanhf.exit268, !dbg !36

__internal_fmad.exit3.i257:                       ; preds = %__nv_tanhf.exit249
  %347 = fmul float %130, %130, !dbg !36
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i258 = icmp eq i32 %348, 0, !dbg !36
  %349 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %347, float 0xBFAAC795C0000000) #5, !dbg !36
  %350 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %347, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i259 = select i1 %.not1.i258, float %350, float %349, !dbg !36
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i260 = icmp eq i32 %351, 0, !dbg !36
  %352 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i259, float %347, float 0x3FC10B2820000000) #5, !dbg !36
  %353 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i259, float %347, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i261 = select i1 %.not2.i260, float %353, float %352, !dbg !36
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i262 = icmp eq i32 %354, 0, !dbg !36
  %355 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i261, float %347, float 0xBFD5553DA0000000) #5, !dbg !36
  %356 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i261, float %347, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i263 = select i1 %.not3.i262, float %356, float %355, !dbg !36
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i264 = icmp eq i32 %357, 0, !dbg !36
  %358 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i263, float %347, float 0.000000e+00) #5, !dbg !36
  %359 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i263, float %347, float 0.000000e+00) #5, !dbg !36
  %.04.i265 = select i1 %.not4.i264, float %359, float %358, !dbg !36
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i266 = icmp eq i32 %360, 0, !dbg !36
  %361 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i265, float %130, float %130) #5, !dbg !36
  %362 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i265, float %130, float %130) #5, !dbg !36
  %.02.i267 = select i1 %.not5.i266, float %362, float %361, !dbg !36
  br label %__nv_tanhf.exit268, !dbg !36

__nv_tanhf.exit268:                               ; preds = %__internal_fmad.exit1.i252, %__internal_fmad.exit3.i257
  %s.1.i256 = phi float [ %346, %__internal_fmad.exit1.i252 ], [ %.02.i267, %__internal_fmad.exit3.i257 ], !dbg !36
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i269 = icmp eq i32 %363, 0, !dbg !36
  %364 = tail call float @llvm.nvvm.fabs.ftz.f(float %131) #5, !dbg !36
  %365 = tail call float @llvm.nvvm.fabs.f(float %131) #5, !dbg !36
  %.01.i270 = select i1 %.not.i269, float %365, float %364, !dbg !36
  %366 = fcmp ult float %.01.i270, 0x3FE3333340000000, !dbg !36
  br i1 %366, label %__internal_fmad.exit3.i276, label %__internal_fmad.exit1.i271, !dbg !36

__internal_fmad.exit1.i271:                       ; preds = %__nv_tanhf.exit268
  %367 = fmul float %.01.i270, 0x4007154760000000, !dbg !36
  %368 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %367) #5, !dbg !36
  %369 = fadd float %368, 1.000000e+00, !dbg !36
  %370 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %369) #6, !dbg !36, !srcloc !37
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not6.i272 = icmp eq i32 %371, 0, !dbg !36
  %372 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %370, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %373 = tail call float @llvm.nvvm.fma.rn.f(float %370, float -2.000000e+00, float 1.000000e+00) #5, !dbg !36
  %.03.i273 = select i1 %.not6.i272, float %373, float %372, !dbg !36
  %374 = fcmp oge float %.01.i270, 0x4022059680000000, !dbg !36
  %s.0.i274 = select i1 %374, float 1.000000e+00, float %.03.i273, !dbg !36
  %375 = bitcast float %s.0.i274 to i32, !dbg !36
  %376 = bitcast float %131 to i32, !dbg !36
  %377 = and i32 %376, -2147483648, !dbg !36
  %378 = or i32 %377, %375, !dbg !36
  %379 = bitcast i32 %378 to float, !dbg !36
  br label %__nv_tanhf.exit287, !dbg !36

__internal_fmad.exit3.i276:                       ; preds = %__nv_tanhf.exit268
  %380 = fmul float %131, %131, !dbg !36
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not1.i277 = icmp eq i32 %381, 0, !dbg !36
  %382 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %380, float 0xBFAAC795C0000000) #5, !dbg !36
  %383 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %380, float 0xBFAAC795C0000000) #5, !dbg !36
  %.06.i278 = select i1 %.not1.i277, float %383, float %382, !dbg !36
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not2.i279 = icmp eq i32 %384, 0, !dbg !36
  %385 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i278, float %380, float 0x3FC10B2820000000) #5, !dbg !36
  %386 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i278, float %380, float 0x3FC10B2820000000) #5, !dbg !36
  %.05.i280 = select i1 %.not2.i279, float %386, float %385, !dbg !36
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not3.i281 = icmp eq i32 %387, 0, !dbg !36
  %388 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i280, float %380, float 0xBFD5553DA0000000) #5, !dbg !36
  %389 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i280, float %380, float 0xBFD5553DA0000000) #5, !dbg !36
  %.0.i282 = select i1 %.not3.i281, float %389, float %388, !dbg !36
  %390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not4.i283 = icmp eq i32 %390, 0, !dbg !36
  %391 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i282, float %380, float 0.000000e+00) #5, !dbg !36
  %392 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i282, float %380, float 0.000000e+00) #5, !dbg !36
  %.04.i284 = select i1 %.not4.i283, float %392, float %391, !dbg !36
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not5.i285 = icmp eq i32 %393, 0, !dbg !36
  %394 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i284, float %131, float %131) #5, !dbg !36
  %395 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i284, float %131, float %131) #5, !dbg !36
  %.02.i286 = select i1 %.not5.i285, float %395, float %394, !dbg !36
  br label %__nv_tanhf.exit287, !dbg !36

__nv_tanhf.exit287:                               ; preds = %__internal_fmad.exit1.i271, %__internal_fmad.exit3.i276
  %s.1.i275 = phi float [ %379, %__internal_fmad.exit1.i271 ], [ %.02.i286, %__internal_fmad.exit3.i276 ], !dbg !36
  %396 = insertelement <8 x float> poison, float %s.1.i275, i64 0, !dbg !38
  %397 = insertelement <8 x float> %396, float %s.1.i256, i64 1, !dbg !38
  %398 = insertelement <8 x float> %397, float %s.1.i237, i64 2, !dbg !38
  %399 = insertelement <8 x float> %398, float %s.1.i218, i64 3, !dbg !38
  %400 = insertelement <8 x float> %399, float %s.1.i199, i64 4, !dbg !38
  %401 = insertelement <8 x float> %400, float %s.1.i180, i64 5, !dbg !38
  %402 = insertelement <8 x float> %401, float %s.1.i161, i64 6, !dbg !38
  %403 = insertelement <8 x float> %402, float %s.1.i142, i64 7, !dbg !38
  %404 = fadd <8 x float> %403, splat (float 1.000000e+00), !dbg !38
  %405 = fcmp uno <8 x float> %28, zeroinitializer, !dbg !39
  %406 = fcmp uno <8 x float> %27, zeroinitializer, !dbg !43
  %407 = fmul <8 x float> %83, %404, !dbg !45
  %408 = insertelement <8 x i1> poison, i1 %29, i64 0, !dbg !46
  %409 = shufflevector <8 x i1> %408, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !46
  %410 = select <8 x i1> %409, <8 x float> %54, <8 x float> %407, !dbg !46
  %411 = fcmp olt <8 x float> %28, %410, !dbg !47
  %412 = or <8 x i1> %405, %411, !dbg !48
  %413 = select <8 x i1> %412, <8 x float> %28, <8 x float> %410, !dbg !49
  %414 = select <8 x i1> %25, <8 x float> %413, <8 x float> %28, !dbg !50
  %415 = fcmp ogt <8 x float> %27, %410, !dbg !51
  %416 = or <8 x i1> %406, %415, !dbg !52
  %417 = select <8 x i1> %416, <8 x float> %27, <8 x float> %410, !dbg !53
  %418 = select <8 x i1> %25, <8 x float> %417, <8 x float> %27, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !18
  %419 = icmp samesign ult i64 %indvars.iv, 14848, !dbg !18
  br i1 %419, label %26, label %420, !dbg !18

420:                                              ; preds = %__nv_tanhf.exit287
  %421 = lshr i32 %11, 5, !dbg !11
  %422 = and i32 %11, 7, !dbg !11
  %423 = or disjoint i32 %10, %422, !dbg !12
  %424 = icmp slt i32 %423, 4112, !dbg !13
  %425 = extractelement <8 x float> %414, i64 6, !dbg !54
  %426 = extractelement <8 x float> %414, i64 7, !dbg !54
  %427 = fcmp olt float %426, %425, !dbg !54
  %428 = fcmp uno float %426, 0.000000e+00, !dbg !57
  %429 = or i1 %427, %428, !dbg !58
  %430 = select i1 %429, float %426, float %425, !dbg !59
  %431 = extractelement <8 x float> %414, i64 5, !dbg !54
  %432 = fcmp olt float %430, %431, !dbg !54
  %433 = fcmp uno float %430, 0.000000e+00, !dbg !57
  %434 = or i1 %432, %433, !dbg !58
  %435 = select i1 %434, float %430, float %431, !dbg !59
  %436 = extractelement <8 x float> %414, i64 4, !dbg !54
  %437 = fcmp olt float %435, %436, !dbg !54
  %438 = fcmp uno float %435, 0.000000e+00, !dbg !57
  %439 = or i1 %437, %438, !dbg !58
  %440 = select i1 %439, float %435, float %436, !dbg !59
  %441 = extractelement <8 x float> %414, i64 3, !dbg !54
  %442 = fcmp olt float %440, %441, !dbg !54
  %443 = fcmp uno float %440, 0.000000e+00, !dbg !57
  %444 = or i1 %442, %443, !dbg !58
  %445 = select i1 %444, float %440, float %441, !dbg !59
  %446 = extractelement <8 x float> %414, i64 2, !dbg !54
  %447 = fcmp olt float %445, %446, !dbg !54
  %448 = fcmp uno float %445, 0.000000e+00, !dbg !57
  %449 = or i1 %447, %448, !dbg !58
  %450 = select i1 %449, float %445, float %446, !dbg !59
  %451 = extractelement <8 x float> %414, i64 1, !dbg !54
  %452 = fcmp olt float %450, %451, !dbg !54
  %453 = fcmp uno float %450, 0.000000e+00, !dbg !57
  %454 = or i1 %452, %453, !dbg !58
  %455 = select i1 %454, float %450, float %451, !dbg !59
  %456 = extractelement <8 x float> %414, i64 0, !dbg !54
  %457 = fcmp olt float %455, %456, !dbg !54
  %458 = fcmp uno float %455, 0.000000e+00, !dbg !57
  %459 = or i1 %457, %458, !dbg !58
  %460 = select i1 %459, float %455, float %456, !dbg !59
  %461 = bitcast float %460 to i32, !dbg !60
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 16, i32 31), !dbg !60
  %463 = bitcast i32 %462 to float, !dbg !60
  %464 = fcmp olt float %460, %463, !dbg !54
  %465 = fcmp uno float %460, 0.000000e+00, !dbg !57
  %466 = or i1 %465, %464, !dbg !58
  %467 = select i1 %466, float %460, float %463, !dbg !59
  %468 = bitcast float %467 to i32, !dbg !60
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 8, i32 31), !dbg !60
  %470 = bitcast i32 %469 to float, !dbg !60
  %471 = fcmp olt float %467, %470, !dbg !54
  %472 = fcmp uno float %467, 0.000000e+00, !dbg !57
  %473 = or i1 %471, %472, !dbg !58
  %474 = select i1 %473, float %467, float %470, !dbg !59
  %475 = bitcast float %474 to i32, !dbg !60
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 4, i32 31), !dbg !60
  %477 = bitcast i32 %476 to float, !dbg !60
  %478 = fcmp olt float %474, %477, !dbg !54
  %479 = fcmp uno float %474, 0.000000e+00, !dbg !57
  %480 = or i1 %478, %479, !dbg !58
  %481 = select i1 %480, float %474, float %477, !dbg !59
  %482 = bitcast float %481 to i32, !dbg !60
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 2, i32 31), !dbg !60
  %484 = bitcast i32 %483 to float, !dbg !60
  %485 = fcmp olt float %481, %484, !dbg !54
  %486 = fcmp uno float %481, 0.000000e+00, !dbg !57
  %487 = or i1 %485, %486, !dbg !58
  %488 = select i1 %487, float %481, float %484, !dbg !59
  %489 = bitcast float %488 to i32, !dbg !60
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 1, i32 31), !dbg !60
  %491 = bitcast i32 %490 to float, !dbg !60
  %492 = fcmp olt float %488, %491, !dbg !54
  %493 = fcmp uno float %488, 0.000000e+00, !dbg !57
  %494 = or i1 %492, %493, !dbg !58
  %495 = and i32 %421, 1, !dbg !60
  %496 = icmp eq i32 %14, 0, !dbg !60
  %497 = shl nuw nsw i32 %13, 1, !dbg !60
  %498 = or disjoint i32 %497, %495, !dbg !60
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !60
  %500 = select i1 %494, i32 %489, i32 %490, !dbg !59
  %501 = insertelement <1 x i32> poison, i32 %500, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %501, i1 %496) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %502 = icmp slt i32 %11, 16, !dbg !60
  %503 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %504 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %503, i1 %502) #5, !dbg !60
  %505 = bitcast i32 %504 to float, !dbg !60
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 1, i32 31), !dbg !60
  %507 = bitcast i32 %506 to float, !dbg !60
  %508 = fcmp olt float %505, %507, !dbg !54
  %509 = fcmp uno float %505, 0.000000e+00, !dbg !57
  %510 = or i1 %509, %508, !dbg !58
  %511 = and i32 %11, 1, !dbg !60
  %512 = icmp eq i32 %511, 0, !dbg !60
  %513 = and i1 %502, %512, !dbg !60
  %514 = select i1 %510, i32 %504, i32 %506, !dbg !59
  %515 = insertelement <1 x i32> poison, i32 %514, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %515, i1 %513) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %516 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497, !dbg !60
  %517 = load float, ptr addrspace(3) %516, align 8, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %518 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !61
  %519 = bitcast float %517 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %519, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %520 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %422, !dbg !61
  %521 = load float, ptr addrspace(3) %520, align 4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %522 = extractelement <8 x float> %418, i64 6, !dbg !64
  %523 = extractelement <8 x float> %418, i64 7, !dbg !64
  %524 = fcmp ogt float %523, %522, !dbg !64
  %525 = fcmp uno float %523, 0.000000e+00, !dbg !65
  %526 = or i1 %524, %525, !dbg !66
  %527 = select i1 %526, float %523, float %522, !dbg !67
  %528 = extractelement <8 x float> %418, i64 5, !dbg !64
  %529 = fcmp ogt float %527, %528, !dbg !64
  %530 = fcmp uno float %527, 0.000000e+00, !dbg !65
  %531 = or i1 %529, %530, !dbg !66
  %532 = select i1 %531, float %527, float %528, !dbg !67
  %533 = extractelement <8 x float> %418, i64 4, !dbg !64
  %534 = fcmp ogt float %532, %533, !dbg !64
  %535 = fcmp uno float %532, 0.000000e+00, !dbg !65
  %536 = or i1 %534, %535, !dbg !66
  %537 = select i1 %536, float %532, float %533, !dbg !67
  %538 = extractelement <8 x float> %418, i64 3, !dbg !64
  %539 = fcmp ogt float %537, %538, !dbg !64
  %540 = fcmp uno float %537, 0.000000e+00, !dbg !65
  %541 = or i1 %539, %540, !dbg !66
  %542 = select i1 %541, float %537, float %538, !dbg !67
  %543 = extractelement <8 x float> %418, i64 2, !dbg !64
  %544 = fcmp ogt float %542, %543, !dbg !64
  %545 = fcmp uno float %542, 0.000000e+00, !dbg !65
  %546 = or i1 %544, %545, !dbg !66
  %547 = select i1 %546, float %542, float %543, !dbg !67
  %548 = extractelement <8 x float> %418, i64 1, !dbg !64
  %549 = fcmp ogt float %547, %548, !dbg !64
  %550 = fcmp uno float %547, 0.000000e+00, !dbg !65
  %551 = or i1 %549, %550, !dbg !66
  %552 = select i1 %551, float %547, float %548, !dbg !67
  %553 = extractelement <8 x float> %418, i64 0, !dbg !64
  %554 = fcmp ogt float %552, %553, !dbg !64
  %555 = fcmp uno float %552, 0.000000e+00, !dbg !65
  %556 = or i1 %554, %555, !dbg !66
  %557 = select i1 %556, float %552, float %553, !dbg !67
  %558 = bitcast float %557 to i32, !dbg !62
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 16, i32 31), !dbg !62
  %560 = bitcast i32 %559 to float, !dbg !62
  %561 = fcmp ogt float %557, %560, !dbg !64
  %562 = fcmp uno float %557, 0.000000e+00, !dbg !65
  %563 = or i1 %562, %561, !dbg !66
  %564 = select i1 %563, float %557, float %560, !dbg !67
  %565 = bitcast float %564 to i32, !dbg !62
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 8, i32 31), !dbg !62
  %567 = bitcast i32 %566 to float, !dbg !62
  %568 = fcmp ogt float %564, %567, !dbg !64
  %569 = fcmp uno float %564, 0.000000e+00, !dbg !65
  %570 = or i1 %568, %569, !dbg !66
  %571 = select i1 %570, float %564, float %567, !dbg !67
  %572 = bitcast float %571 to i32, !dbg !62
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 4, i32 31), !dbg !62
  %574 = bitcast i32 %573 to float, !dbg !62
  %575 = fcmp ogt float %571, %574, !dbg !64
  %576 = fcmp uno float %571, 0.000000e+00, !dbg !65
  %577 = or i1 %575, %576, !dbg !66
  %578 = select i1 %577, float %571, float %574, !dbg !67
  %579 = bitcast float %578 to i32, !dbg !62
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 2, i32 31), !dbg !62
  %581 = bitcast i32 %580 to float, !dbg !62
  %582 = fcmp ogt float %578, %581, !dbg !64
  %583 = fcmp uno float %578, 0.000000e+00, !dbg !65
  %584 = or i1 %582, %583, !dbg !66
  %585 = select i1 %584, float %578, float %581, !dbg !67
  %586 = bitcast float %585 to i32, !dbg !62
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 1, i32 31), !dbg !62
  %588 = bitcast i32 %587 to float, !dbg !62
  %589 = fcmp ogt float %585, %588, !dbg !64
  %590 = fcmp uno float %585, 0.000000e+00, !dbg !65
  %591 = or i1 %589, %590, !dbg !66
  %592 = select i1 %591, i32 %586, i32 %587, !dbg !67
  %593 = insertelement <1 x i32> poison, i32 %592, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %593, i1 %496) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %594 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %503, i1 %502) #5, !dbg !62
  %595 = bitcast i32 %594 to float, !dbg !62
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 1, i32 31), !dbg !62
  %597 = bitcast i32 %596 to float, !dbg !62
  %598 = fcmp ogt float %595, %597, !dbg !64
  %599 = fcmp uno float %595, 0.000000e+00, !dbg !65
  %600 = or i1 %599, %598, !dbg !66
  %601 = select i1 %600, i32 %594, i32 %596, !dbg !67
  %602 = insertelement <1 x i32> poison, i32 %601, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %602, i1 %513) #5, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %603 = load float, ptr addrspace(3) %516, align 8, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %604 = bitcast float %603 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %604, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %605 = load float, ptr addrspace(3) %520, align 4, !dbg !68
  %606 = sext i32 %423 to i64, !dbg !69
  %607 = getelementptr bfloat, ptr addrspace(1) %2, i64 %606, !dbg !69
  %608 = fptrunc float %521 to bfloat, !dbg !61
  %609 = and i32 %11, 504, !dbg !61
  %610 = icmp eq i32 %609, 0, !dbg !61
  %611 = bitcast bfloat %608 to i16, !dbg !61
  %612 = and i1 %610, %424, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %611, ptr addrspace(1) %607, i1 %612) #5, !dbg !61
  %613 = getelementptr bfloat, ptr addrspace(1) %3, i64 %606, !dbg !70
  %614 = fptrunc float %605 to bfloat, !dbg !68
  %615 = bitcast bfloat %614 to i16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %615, ptr addrspace(1) %613, i1 %612) #5, !dbg !68
  %.inv = fcmp oge float %517, 0.000000e+00, !dbg !71
  %616 = select i1 %.inv, float 0.000000e+00, float %517, !dbg !71
  %617 = fsub float 0.000000e+00, %616, !dbg !73
  %.inv2 = fcmp ole float %603, 0.000000e+00, !dbg !74
  %618 = select i1 %.inv2, float 0.000000e+00, float %603, !dbg !74
  %619 = fcmp ogt float %617, %618, !dbg !76
  %620 = fcmp uno float %617, 0.000000e+00, !dbg !78
  %621 = or i1 %620, %619, !dbg !79
  %622 = select i1 %621, float %617, float %618, !dbg !80
  %623 = fmul float %622, 0x3F80204080000000, !dbg !81
  %624 = fcmp ogt float %623, 0x3EE4F8B580000000, !dbg !82
  %625 = fcmp uno float %623, 0.000000e+00, !dbg !84
  %626 = or i1 %624, %625, !dbg !85
  %627 = select i1 %626, float %623, float 0x3EE4F8B580000000, !dbg !86
  %628 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %627), !dbg !87
  %629 = mul i32 %15, 15360, !dbg !88
  br label %630, !dbg !89

630:                                              ; preds = %420, %__nv_tanhf.exit135
  %indvars.iv304 = phi i64 [ 0, %420 ], [ %indvars.iv.next305, %__nv_tanhf.exit135 ]
  %631 = icmp samesign ult i64 %indvars.iv304, 3072, !dbg !90
  %632 = trunc i64 %indvars.iv304 to i32, !dbg !91
  %633 = or disjoint i32 %18, %632, !dbg !91
  %634 = add i32 %633, %20, !dbg !91
  %635 = sext i32 %634 to i64, !dbg !92
  %636 = getelementptr bfloat, ptr addrspace(1) %0, i64 %635, !dbg !92
  %637 = and i1 %16, %631, !dbg !93
  %638 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %636, i1 %637) #5, !dbg !94
  %639 = extractvalue { i32, i32, i32, i32 } %638, 0, !dbg !94
  %640 = bitcast i32 %639 to <2 x bfloat>, !dbg !94
  %641 = extractvalue { i32, i32, i32, i32 } %638, 1, !dbg !94
  %642 = bitcast i32 %641 to <2 x bfloat>, !dbg !94
  %643 = extractvalue { i32, i32, i32, i32 } %638, 2, !dbg !94
  %644 = bitcast i32 %643 to <2 x bfloat>, !dbg !94
  %645 = extractvalue { i32, i32, i32, i32 } %638, 3, !dbg !94
  %646 = bitcast i32 %645 to <2 x bfloat>, !dbg !94
  %647 = extractelement <2 x bfloat> %640, i64 0, !dbg !94
  %648 = extractelement <2 x bfloat> %640, i64 1, !dbg !94
  %649 = extractelement <2 x bfloat> %642, i64 0, !dbg !94
  %650 = extractelement <2 x bfloat> %642, i64 1, !dbg !94
  %651 = extractelement <2 x bfloat> %644, i64 0, !dbg !94
  %652 = extractelement <2 x bfloat> %644, i64 1, !dbg !94
  %653 = extractelement <2 x bfloat> %646, i64 0, !dbg !94
  %654 = extractelement <2 x bfloat> %646, i64 1, !dbg !94
  %655 = fpext bfloat %647 to float, !dbg !95
  %656 = fpext bfloat %648 to float, !dbg !95
  %657 = fpext bfloat %649 to float, !dbg !95
  %658 = fpext bfloat %650 to float, !dbg !95
  %659 = fpext bfloat %651 to float, !dbg !95
  %660 = fpext bfloat %652 to float, !dbg !95
  %661 = fpext bfloat %653 to float, !dbg !95
  %662 = fpext bfloat %654 to float, !dbg !95
  %663 = icmp samesign ugt i64 %indvars.iv304, 3071, !dbg !96
  %664 = add i32 %22, %633, !dbg !97
  %665 = trunc nuw nsw i64 %indvars.iv304 to i32, !dbg !97
  %666 = add i32 %23, %665, !dbg !97
  %667 = sext i32 %664 to i64, !dbg !98
  %668 = getelementptr float, ptr addrspace(1) %1, i64 %667, !dbg !98
  %669 = sext i32 %666 to i64, !dbg !98
  %670 = getelementptr float, ptr addrspace(1) %1, i64 %669, !dbg !98
  %671 = and i1 %16, %663, !dbg !99
  %672 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %668, i1 %671) #5, !dbg !100
  %673 = extractvalue { i32, i32, i32, i32 } %672, 0, !dbg !100
  %674 = extractvalue { i32, i32, i32, i32 } %672, 1, !dbg !100
  %675 = extractvalue { i32, i32, i32, i32 } %672, 2, !dbg !100
  %676 = extractvalue { i32, i32, i32, i32 } %672, 3, !dbg !100
  %677 = bitcast i32 %673 to float, !dbg !100
  %678 = bitcast i32 %674 to float, !dbg !100
  %679 = bitcast i32 %675 to float, !dbg !100
  %680 = bitcast i32 %676 to float, !dbg !100
  %681 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %670, i1 %671) #5, !dbg !100
  %682 = extractvalue { i32, i32, i32, i32 } %681, 0, !dbg !100
  %683 = extractvalue { i32, i32, i32, i32 } %681, 1, !dbg !100
  %684 = extractvalue { i32, i32, i32, i32 } %681, 2, !dbg !100
  %685 = extractvalue { i32, i32, i32, i32 } %681, 3, !dbg !100
  %686 = bitcast i32 %682 to float, !dbg !100
  %687 = bitcast i32 %683 to float, !dbg !100
  %688 = bitcast i32 %684 to float, !dbg !100
  %689 = bitcast i32 %685 to float, !dbg !100
  %690 = fmul float %677, 5.000000e-01, !dbg !101
  %691 = fmul float %678, 5.000000e-01, !dbg !101
  %692 = fmul float %679, 5.000000e-01, !dbg !101
  %693 = fmul float %680, 5.000000e-01, !dbg !101
  %694 = fmul float %686, 5.000000e-01, !dbg !101
  %695 = fmul float %687, 5.000000e-01, !dbg !101
  %696 = fmul float %688, 5.000000e-01, !dbg !101
  %697 = fmul float %689, 5.000000e-01, !dbg !101
  %698 = fmul float %677, %677, !dbg !102
  %699 = fmul float %678, %678, !dbg !102
  %700 = fmul float %679, %679, !dbg !102
  %701 = fmul float %680, %680, !dbg !102
  %702 = fmul float %686, %686, !dbg !102
  %703 = fmul float %687, %687, !dbg !102
  %704 = fmul float %688, %688, !dbg !102
  %705 = fmul float %689, %689, !dbg !102
  %706 = fmul float %698, %677, !dbg !103
  %707 = fmul float %699, %678, !dbg !103
  %708 = fmul float %700, %679, !dbg !103
  %709 = fmul float %701, %680, !dbg !103
  %710 = fmul float %702, %686, !dbg !103
  %711 = fmul float %703, %687, !dbg !103
  %712 = fmul float %704, %688, !dbg !103
  %713 = fmul float %705, %689, !dbg !103
  %714 = fmul float %706, 0x3FA6E4E260000000, !dbg !104
  %715 = fmul float %707, 0x3FA6E4E260000000, !dbg !104
  %716 = fmul float %708, 0x3FA6E4E260000000, !dbg !104
  %717 = fmul float %709, 0x3FA6E4E260000000, !dbg !104
  %718 = fmul float %710, 0x3FA6E4E260000000, !dbg !104
  %719 = fmul float %711, 0x3FA6E4E260000000, !dbg !104
  %720 = fmul float %712, 0x3FA6E4E260000000, !dbg !104
  %721 = fmul float %713, 0x3FA6E4E260000000, !dbg !104
  %722 = fadd float %714, %677, !dbg !105
  %723 = fadd float %715, %678, !dbg !105
  %724 = fadd float %716, %679, !dbg !105
  %725 = fadd float %717, %680, !dbg !105
  %726 = fadd float %718, %686, !dbg !105
  %727 = fadd float %719, %687, !dbg !105
  %728 = fadd float %720, %688, !dbg !105
  %729 = fadd float %721, %689, !dbg !105
  %730 = fmul float %722, 0x3FE9884540000000, !dbg !106
  %731 = fmul float %723, 0x3FE9884540000000, !dbg !106
  %732 = fmul float %724, 0x3FE9884540000000, !dbg !106
  %733 = fmul float %725, 0x3FE9884540000000, !dbg !106
  %734 = fmul float %726, 0x3FE9884540000000, !dbg !106
  %735 = fmul float %727, 0x3FE9884540000000, !dbg !106
  %736 = fmul float %728, 0x3FE9884540000000, !dbg !106
  %737 = fmul float %729, 0x3FE9884540000000, !dbg !106
  %738 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i = icmp eq i32 %738, 0, !dbg !107
  %739 = tail call float @llvm.nvvm.fabs.ftz.f(float %730) #5, !dbg !107
  %740 = tail call float @llvm.nvvm.fabs.f(float %730) #5, !dbg !107
  %.01.i = select i1 %.not.i, float %740, float %739, !dbg !107
  %741 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !107
  br i1 %741, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !107

__internal_fmad.exit1.i:                          ; preds = %630
  %742 = fmul float %.01.i, 0x4007154760000000, !dbg !107
  %743 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %742) #5, !dbg !107
  %744 = fadd float %743, 1.000000e+00, !dbg !107
  %745 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %744) #6, !dbg !107, !srcloc !37
  %746 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i = icmp eq i32 %746, 0, !dbg !107
  %747 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %745, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %748 = tail call float @llvm.nvvm.fma.rn.f(float %745, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i = select i1 %.not6.i, float %748, float %747, !dbg !107
  %749 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !107
  %s.0.i = select i1 %749, float 1.000000e+00, float %.03.i, !dbg !107
  %750 = bitcast float %s.0.i to i32, !dbg !107
  %751 = bitcast float %730 to i32, !dbg !107
  %752 = and i32 %751, -2147483648, !dbg !107
  %753 = or i32 %752, %750, !dbg !107
  %754 = bitcast i32 %753 to float, !dbg !107
  br label %__nv_tanhf.exit, !dbg !107

__internal_fmad.exit3.i:                          ; preds = %630
  %755 = fmul float %730, %730, !dbg !107
  %756 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i = icmp eq i32 %756, 0, !dbg !107
  %757 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %755, float 0xBFAAC795C0000000) #5, !dbg !107
  %758 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %755, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i = select i1 %.not1.i, float %758, float %757, !dbg !107
  %759 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i = icmp eq i32 %759, 0, !dbg !107
  %760 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %755, float 0x3FC10B2820000000) #5, !dbg !107
  %761 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %755, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i = select i1 %.not2.i, float %761, float %760, !dbg !107
  %762 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i = icmp eq i32 %762, 0, !dbg !107
  %763 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %755, float 0xBFD5553DA0000000) #5, !dbg !107
  %764 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %755, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i = select i1 %.not3.i, float %764, float %763, !dbg !107
  %765 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i = icmp eq i32 %765, 0, !dbg !107
  %766 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %755, float 0.000000e+00) #5, !dbg !107
  %767 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %755, float 0.000000e+00) #5, !dbg !107
  %.04.i = select i1 %.not4.i, float %767, float %766, !dbg !107
  %768 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i = icmp eq i32 %768, 0, !dbg !107
  %769 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %730, float %730) #5, !dbg !107
  %770 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %730, float %730) #5, !dbg !107
  %.02.i = select i1 %.not5.i, float %770, float %769, !dbg !107
  br label %__nv_tanhf.exit, !dbg !107

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %754, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !107
  %771 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i3 = icmp eq i32 %771, 0, !dbg !107
  %772 = tail call float @llvm.nvvm.fabs.ftz.f(float %731) #5, !dbg !107
  %773 = tail call float @llvm.nvvm.fabs.f(float %731) #5, !dbg !107
  %.01.i4 = select i1 %.not.i3, float %773, float %772, !dbg !107
  %774 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !107
  br i1 %774, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !107

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %775 = fmul float %.01.i4, 0x4007154760000000, !dbg !107
  %776 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %775) #5, !dbg !107
  %777 = fadd float %776, 1.000000e+00, !dbg !107
  %778 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %777) #6, !dbg !107, !srcloc !37
  %779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i6 = icmp eq i32 %779, 0, !dbg !107
  %780 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %778, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %781 = tail call float @llvm.nvvm.fma.rn.f(float %778, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i7 = select i1 %.not6.i6, float %781, float %780, !dbg !107
  %782 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !107
  %s.0.i8 = select i1 %782, float 1.000000e+00, float %.03.i7, !dbg !107
  %783 = bitcast float %s.0.i8 to i32, !dbg !107
  %784 = bitcast float %731 to i32, !dbg !107
  %785 = and i32 %784, -2147483648, !dbg !107
  %786 = or i32 %785, %783, !dbg !107
  %787 = bitcast i32 %786 to float, !dbg !107
  br label %__nv_tanhf.exit21, !dbg !107

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %788 = fmul float %731, %731, !dbg !107
  %789 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i11 = icmp eq i32 %789, 0, !dbg !107
  %790 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %788, float 0xBFAAC795C0000000) #5, !dbg !107
  %791 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %788, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i12 = select i1 %.not1.i11, float %791, float %790, !dbg !107
  %792 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i13 = icmp eq i32 %792, 0, !dbg !107
  %793 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %788, float 0x3FC10B2820000000) #5, !dbg !107
  %794 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %788, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i14 = select i1 %.not2.i13, float %794, float %793, !dbg !107
  %795 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i15 = icmp eq i32 %795, 0, !dbg !107
  %796 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %788, float 0xBFD5553DA0000000) #5, !dbg !107
  %797 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %788, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i16 = select i1 %.not3.i15, float %797, float %796, !dbg !107
  %798 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i17 = icmp eq i32 %798, 0, !dbg !107
  %799 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %788, float 0.000000e+00) #5, !dbg !107
  %800 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %788, float 0.000000e+00) #5, !dbg !107
  %.04.i18 = select i1 %.not4.i17, float %800, float %799, !dbg !107
  %801 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i19 = icmp eq i32 %801, 0, !dbg !107
  %802 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %731, float %731) #5, !dbg !107
  %803 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %731, float %731) #5, !dbg !107
  %.02.i20 = select i1 %.not5.i19, float %803, float %802, !dbg !107
  br label %__nv_tanhf.exit21, !dbg !107

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %787, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !107
  %804 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i22 = icmp eq i32 %804, 0, !dbg !107
  %805 = tail call float @llvm.nvvm.fabs.ftz.f(float %732) #5, !dbg !107
  %806 = tail call float @llvm.nvvm.fabs.f(float %732) #5, !dbg !107
  %.01.i23 = select i1 %.not.i22, float %806, float %805, !dbg !107
  %807 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !107
  br i1 %807, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !107

__internal_fmad.exit1.i24:                        ; preds = %__nv_tanhf.exit21
  %808 = fmul float %.01.i23, 0x4007154760000000, !dbg !107
  %809 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %808) #5, !dbg !107
  %810 = fadd float %809, 1.000000e+00, !dbg !107
  %811 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %810) #6, !dbg !107, !srcloc !37
  %812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i25 = icmp eq i32 %812, 0, !dbg !107
  %813 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %811, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %814 = tail call float @llvm.nvvm.fma.rn.f(float %811, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i26 = select i1 %.not6.i25, float %814, float %813, !dbg !107
  %815 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !107
  %s.0.i27 = select i1 %815, float 1.000000e+00, float %.03.i26, !dbg !107
  %816 = bitcast float %s.0.i27 to i32, !dbg !107
  %817 = bitcast float %732 to i32, !dbg !107
  %818 = and i32 %817, -2147483648, !dbg !107
  %819 = or i32 %818, %816, !dbg !107
  %820 = bitcast i32 %819 to float, !dbg !107
  br label %__nv_tanhf.exit40, !dbg !107

__internal_fmad.exit3.i29:                        ; preds = %__nv_tanhf.exit21
  %821 = fmul float %732, %732, !dbg !107
  %822 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i30 = icmp eq i32 %822, 0, !dbg !107
  %823 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %821, float 0xBFAAC795C0000000) #5, !dbg !107
  %824 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %821, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i31 = select i1 %.not1.i30, float %824, float %823, !dbg !107
  %825 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i32 = icmp eq i32 %825, 0, !dbg !107
  %826 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %821, float 0x3FC10B2820000000) #5, !dbg !107
  %827 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %821, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i33 = select i1 %.not2.i32, float %827, float %826, !dbg !107
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i34 = icmp eq i32 %828, 0, !dbg !107
  %829 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %821, float 0xBFD5553DA0000000) #5, !dbg !107
  %830 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %821, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i35 = select i1 %.not3.i34, float %830, float %829, !dbg !107
  %831 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i36 = icmp eq i32 %831, 0, !dbg !107
  %832 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %821, float 0.000000e+00) #5, !dbg !107
  %833 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %821, float 0.000000e+00) #5, !dbg !107
  %.04.i37 = select i1 %.not4.i36, float %833, float %832, !dbg !107
  %834 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i38 = icmp eq i32 %834, 0, !dbg !107
  %835 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %732, float %732) #5, !dbg !107
  %836 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %732, float %732) #5, !dbg !107
  %.02.i39 = select i1 %.not5.i38, float %836, float %835, !dbg !107
  br label %__nv_tanhf.exit40, !dbg !107

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %820, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !107
  %837 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i41 = icmp eq i32 %837, 0, !dbg !107
  %838 = tail call float @llvm.nvvm.fabs.ftz.f(float %733) #5, !dbg !107
  %839 = tail call float @llvm.nvvm.fabs.f(float %733) #5, !dbg !107
  %.01.i42 = select i1 %.not.i41, float %839, float %838, !dbg !107
  %840 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !107
  br i1 %840, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !107

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %841 = fmul float %.01.i42, 0x4007154760000000, !dbg !107
  %842 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %841) #5, !dbg !107
  %843 = fadd float %842, 1.000000e+00, !dbg !107
  %844 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %843) #6, !dbg !107, !srcloc !37
  %845 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i44 = icmp eq i32 %845, 0, !dbg !107
  %846 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %844, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %847 = tail call float @llvm.nvvm.fma.rn.f(float %844, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i45 = select i1 %.not6.i44, float %847, float %846, !dbg !107
  %848 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !107
  %s.0.i46 = select i1 %848, float 1.000000e+00, float %.03.i45, !dbg !107
  %849 = bitcast float %s.0.i46 to i32, !dbg !107
  %850 = bitcast float %733 to i32, !dbg !107
  %851 = and i32 %850, -2147483648, !dbg !107
  %852 = or i32 %851, %849, !dbg !107
  %853 = bitcast i32 %852 to float, !dbg !107
  br label %__nv_tanhf.exit59, !dbg !107

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %854 = fmul float %733, %733, !dbg !107
  %855 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i49 = icmp eq i32 %855, 0, !dbg !107
  %856 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %854, float 0xBFAAC795C0000000) #5, !dbg !107
  %857 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %854, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i50 = select i1 %.not1.i49, float %857, float %856, !dbg !107
  %858 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i51 = icmp eq i32 %858, 0, !dbg !107
  %859 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %854, float 0x3FC10B2820000000) #5, !dbg !107
  %860 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %854, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i52 = select i1 %.not2.i51, float %860, float %859, !dbg !107
  %861 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i53 = icmp eq i32 %861, 0, !dbg !107
  %862 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %854, float 0xBFD5553DA0000000) #5, !dbg !107
  %863 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %854, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i54 = select i1 %.not3.i53, float %863, float %862, !dbg !107
  %864 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i55 = icmp eq i32 %864, 0, !dbg !107
  %865 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %854, float 0.000000e+00) #5, !dbg !107
  %866 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %854, float 0.000000e+00) #5, !dbg !107
  %.04.i56 = select i1 %.not4.i55, float %866, float %865, !dbg !107
  %867 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i57 = icmp eq i32 %867, 0, !dbg !107
  %868 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %733, float %733) #5, !dbg !107
  %869 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %733, float %733) #5, !dbg !107
  %.02.i58 = select i1 %.not5.i57, float %869, float %868, !dbg !107
  br label %__nv_tanhf.exit59, !dbg !107

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %853, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !107
  %870 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i60 = icmp eq i32 %870, 0, !dbg !107
  %871 = tail call float @llvm.nvvm.fabs.ftz.f(float %734) #5, !dbg !107
  %872 = tail call float @llvm.nvvm.fabs.f(float %734) #5, !dbg !107
  %.01.i61 = select i1 %.not.i60, float %872, float %871, !dbg !107
  %873 = fcmp ult float %.01.i61, 0x3FE3333340000000, !dbg !107
  br i1 %873, label %__internal_fmad.exit3.i67, label %__internal_fmad.exit1.i62, !dbg !107

__internal_fmad.exit1.i62:                        ; preds = %__nv_tanhf.exit59
  %874 = fmul float %.01.i61, 0x4007154760000000, !dbg !107
  %875 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %874) #5, !dbg !107
  %876 = fadd float %875, 1.000000e+00, !dbg !107
  %877 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %876) #6, !dbg !107, !srcloc !37
  %878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i63 = icmp eq i32 %878, 0, !dbg !107
  %879 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %877, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %880 = tail call float @llvm.nvvm.fma.rn.f(float %877, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i64 = select i1 %.not6.i63, float %880, float %879, !dbg !107
  %881 = fcmp oge float %.01.i61, 0x4022059680000000, !dbg !107
  %s.0.i65 = select i1 %881, float 1.000000e+00, float %.03.i64, !dbg !107
  %882 = bitcast float %s.0.i65 to i32, !dbg !107
  %883 = bitcast float %734 to i32, !dbg !107
  %884 = and i32 %883, -2147483648, !dbg !107
  %885 = or i32 %884, %882, !dbg !107
  %886 = bitcast i32 %885 to float, !dbg !107
  br label %__nv_tanhf.exit78, !dbg !107

__internal_fmad.exit3.i67:                        ; preds = %__nv_tanhf.exit59
  %887 = fmul float %734, %734, !dbg !107
  %888 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i68 = icmp eq i32 %888, 0, !dbg !107
  %889 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %887, float 0xBFAAC795C0000000) #5, !dbg !107
  %890 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %887, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i69 = select i1 %.not1.i68, float %890, float %889, !dbg !107
  %891 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i70 = icmp eq i32 %891, 0, !dbg !107
  %892 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i69, float %887, float 0x3FC10B2820000000) #5, !dbg !107
  %893 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i69, float %887, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i71 = select i1 %.not2.i70, float %893, float %892, !dbg !107
  %894 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i72 = icmp eq i32 %894, 0, !dbg !107
  %895 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i71, float %887, float 0xBFD5553DA0000000) #5, !dbg !107
  %896 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i71, float %887, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i73 = select i1 %.not3.i72, float %896, float %895, !dbg !107
  %897 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i74 = icmp eq i32 %897, 0, !dbg !107
  %898 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i73, float %887, float 0.000000e+00) #5, !dbg !107
  %899 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i73, float %887, float 0.000000e+00) #5, !dbg !107
  %.04.i75 = select i1 %.not4.i74, float %899, float %898, !dbg !107
  %900 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i76 = icmp eq i32 %900, 0, !dbg !107
  %901 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i75, float %734, float %734) #5, !dbg !107
  %902 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i75, float %734, float %734) #5, !dbg !107
  %.02.i77 = select i1 %.not5.i76, float %902, float %901, !dbg !107
  br label %__nv_tanhf.exit78, !dbg !107

__nv_tanhf.exit78:                                ; preds = %__internal_fmad.exit1.i62, %__internal_fmad.exit3.i67
  %s.1.i66 = phi float [ %886, %__internal_fmad.exit1.i62 ], [ %.02.i77, %__internal_fmad.exit3.i67 ], !dbg !107
  %903 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i79 = icmp eq i32 %903, 0, !dbg !107
  %904 = tail call float @llvm.nvvm.fabs.ftz.f(float %735) #5, !dbg !107
  %905 = tail call float @llvm.nvvm.fabs.f(float %735) #5, !dbg !107
  %.01.i80 = select i1 %.not.i79, float %905, float %904, !dbg !107
  %906 = fcmp ult float %.01.i80, 0x3FE3333340000000, !dbg !107
  br i1 %906, label %__internal_fmad.exit3.i86, label %__internal_fmad.exit1.i81, !dbg !107

__internal_fmad.exit1.i81:                        ; preds = %__nv_tanhf.exit78
  %907 = fmul float %.01.i80, 0x4007154760000000, !dbg !107
  %908 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %907) #5, !dbg !107
  %909 = fadd float %908, 1.000000e+00, !dbg !107
  %910 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %909) #6, !dbg !107, !srcloc !37
  %911 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i82 = icmp eq i32 %911, 0, !dbg !107
  %912 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %910, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %913 = tail call float @llvm.nvvm.fma.rn.f(float %910, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i83 = select i1 %.not6.i82, float %913, float %912, !dbg !107
  %914 = fcmp oge float %.01.i80, 0x4022059680000000, !dbg !107
  %s.0.i84 = select i1 %914, float 1.000000e+00, float %.03.i83, !dbg !107
  %915 = bitcast float %s.0.i84 to i32, !dbg !107
  %916 = bitcast float %735 to i32, !dbg !107
  %917 = and i32 %916, -2147483648, !dbg !107
  %918 = or i32 %917, %915, !dbg !107
  %919 = bitcast i32 %918 to float, !dbg !107
  br label %__nv_tanhf.exit97, !dbg !107

__internal_fmad.exit3.i86:                        ; preds = %__nv_tanhf.exit78
  %920 = fmul float %735, %735, !dbg !107
  %921 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i87 = icmp eq i32 %921, 0, !dbg !107
  %922 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %920, float 0xBFAAC795C0000000) #5, !dbg !107
  %923 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %920, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i88 = select i1 %.not1.i87, float %923, float %922, !dbg !107
  %924 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i89 = icmp eq i32 %924, 0, !dbg !107
  %925 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i88, float %920, float 0x3FC10B2820000000) #5, !dbg !107
  %926 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i88, float %920, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i90 = select i1 %.not2.i89, float %926, float %925, !dbg !107
  %927 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i91 = icmp eq i32 %927, 0, !dbg !107
  %928 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i90, float %920, float 0xBFD5553DA0000000) #5, !dbg !107
  %929 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i90, float %920, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i92 = select i1 %.not3.i91, float %929, float %928, !dbg !107
  %930 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i93 = icmp eq i32 %930, 0, !dbg !107
  %931 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i92, float %920, float 0.000000e+00) #5, !dbg !107
  %932 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i92, float %920, float 0.000000e+00) #5, !dbg !107
  %.04.i94 = select i1 %.not4.i93, float %932, float %931, !dbg !107
  %933 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i95 = icmp eq i32 %933, 0, !dbg !107
  %934 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i94, float %735, float %735) #5, !dbg !107
  %935 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i94, float %735, float %735) #5, !dbg !107
  %.02.i96 = select i1 %.not5.i95, float %935, float %934, !dbg !107
  br label %__nv_tanhf.exit97, !dbg !107

__nv_tanhf.exit97:                                ; preds = %__internal_fmad.exit1.i81, %__internal_fmad.exit3.i86
  %s.1.i85 = phi float [ %919, %__internal_fmad.exit1.i81 ], [ %.02.i96, %__internal_fmad.exit3.i86 ], !dbg !107
  %936 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i98 = icmp eq i32 %936, 0, !dbg !107
  %937 = tail call float @llvm.nvvm.fabs.ftz.f(float %736) #5, !dbg !107
  %938 = tail call float @llvm.nvvm.fabs.f(float %736) #5, !dbg !107
  %.01.i99 = select i1 %.not.i98, float %938, float %937, !dbg !107
  %939 = fcmp ult float %.01.i99, 0x3FE3333340000000, !dbg !107
  br i1 %939, label %__internal_fmad.exit3.i105, label %__internal_fmad.exit1.i100, !dbg !107

__internal_fmad.exit1.i100:                       ; preds = %__nv_tanhf.exit97
  %940 = fmul float %.01.i99, 0x4007154760000000, !dbg !107
  %941 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %940) #5, !dbg !107
  %942 = fadd float %941, 1.000000e+00, !dbg !107
  %943 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %942) #6, !dbg !107, !srcloc !37
  %944 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i101 = icmp eq i32 %944, 0, !dbg !107
  %945 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %943, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %946 = tail call float @llvm.nvvm.fma.rn.f(float %943, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i102 = select i1 %.not6.i101, float %946, float %945, !dbg !107
  %947 = fcmp oge float %.01.i99, 0x4022059680000000, !dbg !107
  %s.0.i103 = select i1 %947, float 1.000000e+00, float %.03.i102, !dbg !107
  %948 = bitcast float %s.0.i103 to i32, !dbg !107
  %949 = bitcast float %736 to i32, !dbg !107
  %950 = and i32 %949, -2147483648, !dbg !107
  %951 = or i32 %950, %948, !dbg !107
  %952 = bitcast i32 %951 to float, !dbg !107
  br label %__nv_tanhf.exit116, !dbg !107

__internal_fmad.exit3.i105:                       ; preds = %__nv_tanhf.exit97
  %953 = fmul float %736, %736, !dbg !107
  %954 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i106 = icmp eq i32 %954, 0, !dbg !107
  %955 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %953, float 0xBFAAC795C0000000) #5, !dbg !107
  %956 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %953, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i107 = select i1 %.not1.i106, float %956, float %955, !dbg !107
  %957 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i108 = icmp eq i32 %957, 0, !dbg !107
  %958 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i107, float %953, float 0x3FC10B2820000000) #5, !dbg !107
  %959 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i107, float %953, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i109 = select i1 %.not2.i108, float %959, float %958, !dbg !107
  %960 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i110 = icmp eq i32 %960, 0, !dbg !107
  %961 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i109, float %953, float 0xBFD5553DA0000000) #5, !dbg !107
  %962 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i109, float %953, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i111 = select i1 %.not3.i110, float %962, float %961, !dbg !107
  %963 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i112 = icmp eq i32 %963, 0, !dbg !107
  %964 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i111, float %953, float 0.000000e+00) #5, !dbg !107
  %965 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i111, float %953, float 0.000000e+00) #5, !dbg !107
  %.04.i113 = select i1 %.not4.i112, float %965, float %964, !dbg !107
  %966 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i114 = icmp eq i32 %966, 0, !dbg !107
  %967 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i113, float %736, float %736) #5, !dbg !107
  %968 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i113, float %736, float %736) #5, !dbg !107
  %.02.i115 = select i1 %.not5.i114, float %968, float %967, !dbg !107
  br label %__nv_tanhf.exit116, !dbg !107

__nv_tanhf.exit116:                               ; preds = %__internal_fmad.exit1.i100, %__internal_fmad.exit3.i105
  %s.1.i104 = phi float [ %952, %__internal_fmad.exit1.i100 ], [ %.02.i115, %__internal_fmad.exit3.i105 ], !dbg !107
  %969 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not.i117 = icmp eq i32 %969, 0, !dbg !107
  %970 = tail call float @llvm.nvvm.fabs.ftz.f(float %737) #5, !dbg !107
  %971 = tail call float @llvm.nvvm.fabs.f(float %737) #5, !dbg !107
  %.01.i118 = select i1 %.not.i117, float %971, float %970, !dbg !107
  %972 = fcmp ult float %.01.i118, 0x3FE3333340000000, !dbg !107
  br i1 %972, label %__internal_fmad.exit3.i124, label %__internal_fmad.exit1.i119, !dbg !107

__internal_fmad.exit1.i119:                       ; preds = %__nv_tanhf.exit116
  %973 = fmul float %.01.i118, 0x4007154760000000, !dbg !107
  %974 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %973) #5, !dbg !107
  %975 = fadd float %974, 1.000000e+00, !dbg !107
  %976 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %975) #6, !dbg !107, !srcloc !37
  %977 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not6.i120 = icmp eq i32 %977, 0, !dbg !107
  %978 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %976, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %979 = tail call float @llvm.nvvm.fma.rn.f(float %976, float -2.000000e+00, float 1.000000e+00) #5, !dbg !107
  %.03.i121 = select i1 %.not6.i120, float %979, float %978, !dbg !107
  %980 = fcmp oge float %.01.i118, 0x4022059680000000, !dbg !107
  %s.0.i122 = select i1 %980, float 1.000000e+00, float %.03.i121, !dbg !107
  %981 = bitcast float %s.0.i122 to i32, !dbg !107
  %982 = bitcast float %737 to i32, !dbg !107
  %983 = and i32 %982, -2147483648, !dbg !107
  %984 = or i32 %983, %981, !dbg !107
  %985 = bitcast i32 %984 to float, !dbg !107
  br label %__nv_tanhf.exit135, !dbg !107

__internal_fmad.exit3.i124:                       ; preds = %__nv_tanhf.exit116
  %986 = fmul float %737, %737, !dbg !107
  %987 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not1.i125 = icmp eq i32 %987, 0, !dbg !107
  %988 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %986, float 0xBFAAC795C0000000) #5, !dbg !107
  %989 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %986, float 0xBFAAC795C0000000) #5, !dbg !107
  %.06.i126 = select i1 %.not1.i125, float %989, float %988, !dbg !107
  %990 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not2.i127 = icmp eq i32 %990, 0, !dbg !107
  %991 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i126, float %986, float 0x3FC10B2820000000) #5, !dbg !107
  %992 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i126, float %986, float 0x3FC10B2820000000) #5, !dbg !107
  %.05.i128 = select i1 %.not2.i127, float %992, float %991, !dbg !107
  %993 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not3.i129 = icmp eq i32 %993, 0, !dbg !107
  %994 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i128, float %986, float 0xBFD5553DA0000000) #5, !dbg !107
  %995 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i128, float %986, float 0xBFD5553DA0000000) #5, !dbg !107
  %.0.i130 = select i1 %.not3.i129, float %995, float %994, !dbg !107
  %996 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not4.i131 = icmp eq i32 %996, 0, !dbg !107
  %997 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i130, float %986, float 0.000000e+00) #5, !dbg !107
  %998 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i130, float %986, float 0.000000e+00) #5, !dbg !107
  %.04.i132 = select i1 %.not4.i131, float %998, float %997, !dbg !107
  %999 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !107
  %.not5.i133 = icmp eq i32 %999, 0, !dbg !107
  %1000 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i132, float %737, float %737) #5, !dbg !107
  %1001 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i132, float %737, float %737) #5, !dbg !107
  %.02.i134 = select i1 %.not5.i133, float %1001, float %1000, !dbg !107
  br label %__nv_tanhf.exit135, !dbg !107

__nv_tanhf.exit135:                               ; preds = %__internal_fmad.exit1.i119, %__internal_fmad.exit3.i124
  %s.1.i123 = phi float [ %985, %__internal_fmad.exit1.i119 ], [ %.02.i134, %__internal_fmad.exit3.i124 ], !dbg !107
  %1002 = fadd float %s.1.i, 1.000000e+00, !dbg !108
  %1003 = fadd float %s.1.i9, 1.000000e+00, !dbg !108
  %1004 = fadd float %s.1.i28, 1.000000e+00, !dbg !108
  %1005 = fadd float %s.1.i47, 1.000000e+00, !dbg !108
  %1006 = fadd float %s.1.i66, 1.000000e+00, !dbg !108
  %1007 = fadd float %s.1.i85, 1.000000e+00, !dbg !108
  %1008 = fadd float %s.1.i104, 1.000000e+00, !dbg !108
  %1009 = fadd float %s.1.i123, 1.000000e+00, !dbg !108
  %1010 = fmul float %690, %1002, !dbg !109
  %1011 = fmul float %691, %1003, !dbg !109
  %1012 = fmul float %692, %1004, !dbg !109
  %1013 = fmul float %693, %1005, !dbg !109
  %1014 = fmul float %694, %1006, !dbg !109
  %1015 = fmul float %695, %1007, !dbg !109
  %1016 = fmul float %696, %1008, !dbg !109
  %1017 = fmul float %697, %1009, !dbg !109
  %1018 = select i1 %631, float %655, float %1010, !dbg !110
  %1019 = select i1 %631, float %656, float %1011, !dbg !110
  %1020 = select i1 %631, float %657, float %1012, !dbg !110
  %1021 = select i1 %631, float %658, float %1013, !dbg !110
  %1022 = select i1 %631, float %659, float %1014, !dbg !110
  %1023 = select i1 %631, float %660, float %1015, !dbg !110
  %1024 = select i1 %631, float %661, float %1016, !dbg !110
  %1025 = select i1 %631, float %662, float %1017, !dbg !110
  %1026 = fmul float %628, %1018, !dbg !111
  %1027 = fmul float %628, %1019, !dbg !111
  %1028 = fmul float %628, %1020, !dbg !111
  %1029 = fmul float %628, %1021, !dbg !111
  %1030 = fmul float %628, %1022, !dbg !111
  %1031 = fmul float %628, %1023, !dbg !111
  %1032 = fmul float %628, %1024, !dbg !111
  %1033 = fmul float %628, %1025, !dbg !111
  %1034 = tail call float @llvm.nvvm.round.f(float %1026) #5, !dbg !112
  %1035 = tail call float @llvm.nvvm.round.f(float %1027) #5, !dbg !112
  %1036 = tail call float @llvm.nvvm.round.f(float %1028) #5, !dbg !112
  %1037 = tail call float @llvm.nvvm.round.f(float %1029) #5, !dbg !112
  %1038 = tail call float @llvm.nvvm.round.f(float %1030) #5, !dbg !112
  %1039 = tail call float @llvm.nvvm.round.f(float %1031) #5, !dbg !112
  %1040 = tail call float @llvm.nvvm.round.f(float %1032) #5, !dbg !112
  %1041 = tail call float @llvm.nvvm.round.f(float %1033) #5, !dbg !112
  %1042 = insertelement <4 x float> poison, float %1034, i64 0, !dbg !113
  %1043 = insertelement <4 x float> %1042, float %1035, i64 1, !dbg !113
  %1044 = insertelement <4 x float> %1043, float %1036, i64 2, !dbg !113
  %1045 = insertelement <4 x float> %1044, float %1037, i64 3, !dbg !113
  %1046 = fcmp ogt <4 x float> %1045, splat (float -1.270000e+02), !dbg !113
  %1047 = fcmp uno <4 x float> %1045, zeroinitializer, !dbg !115
  %1048 = or <4 x i1> %1046, %1047, !dbg !116
  %1049 = select <4 x i1> %1048, <4 x float> %1045, <4 x float> splat (float -1.270000e+02), !dbg !117
  %1050 = fcmp olt <4 x float> %1049, splat (float 1.270000e+02), !dbg !118
  %1051 = fcmp uno <4 x float> %1049, zeroinitializer, !dbg !120
  %1052 = or <4 x i1> %1050, %1051, !dbg !121
  %1053 = fptosi <4 x float> %1049 to <4 x i8>, !dbg !122
  %1054 = select <4 x i1> %1052, <4 x i8> %1053, <4 x i8> splat (i8 127), !dbg !123
  %1055 = insertelement <4 x float> poison, float %1038, i64 0, !dbg !113
  %1056 = insertelement <4 x float> %1055, float %1039, i64 1, !dbg !113
  %1057 = insertelement <4 x float> %1056, float %1040, i64 2, !dbg !113
  %1058 = insertelement <4 x float> %1057, float %1041, i64 3, !dbg !113
  %1059 = fcmp ogt <4 x float> %1058, splat (float -1.270000e+02), !dbg !113
  %1060 = fcmp uno <4 x float> %1058, zeroinitializer, !dbg !115
  %1061 = or <4 x i1> %1059, %1060, !dbg !116
  %1062 = select <4 x i1> %1061, <4 x float> %1058, <4 x float> splat (float -1.270000e+02), !dbg !117
  %1063 = fcmp olt <4 x float> %1062, splat (float 1.270000e+02), !dbg !118
  %1064 = fcmp uno <4 x float> %1062, zeroinitializer, !dbg !120
  %1065 = or <4 x i1> %1063, %1064, !dbg !121
  %1066 = fptosi <4 x float> %1062 to <4 x i8>, !dbg !122
  %1067 = select <4 x i1> %1065, <4 x i8> %1066, <4 x i8> splat (i8 127), !dbg !123
  %1068 = add i32 %633, %629, !dbg !124
  %1069 = sext i32 %1068 to i64, !dbg !125
  %1070 = getelementptr i8, ptr addrspace(1) %4, i64 %1069, !dbg !125
  %1071 = bitcast <4 x i8> %1054 to i32, !dbg !126
  %1072 = bitcast <4 x i8> %1067 to i32, !dbg !126
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1071, i32 %1072, ptr addrspace(1) %1070, i1 %16) #5, !dbg !126
  %indvars.iv.next305 = add nuw nsw i64 %indvars.iv304, 512, !dbg !89
  %1073 = icmp samesign ult i64 %indvars.iv304, 14848, !dbg !89
  br i1 %1073, label %630, label %1074, !dbg !89

1074:                                             ; preds = %__nv_tanhf.exit135
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 42, column: 39, scope: !6)
!16 = !DILocation(line: 46, column: 40, scope: !6)
!17 = !DILocation(line: 68, column: 50, scope: !6)
!18 = !DILocation(line: 31, column: 40, scope: !6)
!19 = !DILocation(line: 41, column: 22, scope: !6)
!20 = !DILocation(line: 42, column: 45, scope: !6)
!21 = !DILocation(line: 42, column: 34, scope: !6)
!22 = !DILocation(line: 42, column: 71, scope: !6)
!23 = !DILocation(line: 42, column: 53, scope: !6)
!24 = !DILocation(line: 42, column: 121, scope: !6)
!25 = !DILocation(line: 43, column: 23, scope: !6)
!26 = !DILocation(line: 46, column: 46, scope: !6)
!27 = !DILocation(line: 46, column: 34, scope: !6)
!28 = !DILocation(line: 46, column: 82, scope: !6)
!29 = !DILocation(line: 46, column: 64, scope: !6)
!30 = !DILocation(line: 48, column: 23, scope: !6)
!31 = !DILocation(line: 49, column: 23, scope: !6)
!32 = !DILocation(line: 50, column: 24, scope: !6)
!33 = !DILocation(line: 52, column: 24, scope: !6)
!34 = !DILocation(line: 53, column: 23, scope: !6)
!35 = !DILocation(line: 55, column: 24, scope: !6)
!36 = !DILocation(line: 56, column: 31, scope: !6)
!37 = !{i32 21046}
!38 = !DILocation(line: 58, column: 24, scope: !6)
!39 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 65, column: 47, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 67, column: 47, scope: !6)
!45 = !DILocation(line: 59, column: 24, scope: !6)
!46 = !DILocation(line: 63, column: 37, scope: !6)
!47 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !42)
!50 = !DILocation(line: 66, column: 50, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !44)
!52 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !44)
!53 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !44)
!54 = !DILocation(line: 94, column: 15, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!56 = !DILocation(line: 69, column: 40, scope: !6)
!57 = !DILocation(line: 96, column: 21, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 96, column: 16, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 97, column: 29, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 110, column: 29, scope: !40, inlinedAt: !56)
!61 = !DILocation(line: 71, column: 37, scope: !6)
!62 = !DILocation(line: 115, column: 29, scope: !40, inlinedAt: !63)
!63 = !DILocation(line: 70, column: 40, scope: !6)
!64 = !DILocation(line: 102, column: 15, scope: !55, inlinedAt: !63)
!65 = !DILocation(line: 104, column: 21, scope: !55, inlinedAt: !63)
!66 = !DILocation(line: 104, column: 16, scope: !55, inlinedAt: !63)
!67 = !DILocation(line: 105, column: 29, scope: !55, inlinedAt: !63)
!68 = !DILocation(line: 72, column: 37, scope: !6)
!69 = !DILocation(line: 71, column: 25, scope: !6)
!70 = !DILocation(line: 72, column: 25, scope: !6)
!71 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !72)
!72 = !DILocation(line: 107, column: 46, scope: !6)
!73 = !DILocation(line: 108, column: 17, scope: !6)
!74 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !75)
!75 = !DILocation(line: 109, column: 46, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !77)
!77 = !DILocation(line: 110, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !77)
!81 = !DILocation(line: 112, column: 24, scope: !6)
!82 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !83)
!83 = !DILocation(line: 115, column: 46, scope: !6)
!84 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !83)
!85 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !83)
!86 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 25, scope: !6)
!88 = !DILocation(line: 130, column: 42, scope: !6)
!89 = !DILocation(line: 73, column: 40, scope: !6)
!90 = !DILocation(line: 83, column: 24, scope: !6)
!91 = !DILocation(line: 84, column: 46, scope: !6)
!92 = !DILocation(line: 84, column: 35, scope: !6)
!93 = !DILocation(line: 84, column: 72, scope: !6)
!94 = !DILocation(line: 84, column: 54, scope: !6)
!95 = !DILocation(line: 84, column: 123, scope: !6)
!96 = !DILocation(line: 85, column: 25, scope: !6)
!97 = !DILocation(line: 88, column: 47, scope: !6)
!98 = !DILocation(line: 88, column: 35, scope: !6)
!99 = !DILocation(line: 88, column: 83, scope: !6)
!100 = !DILocation(line: 88, column: 65, scope: !6)
!101 = !DILocation(line: 90, column: 24, scope: !6)
!102 = !DILocation(line: 91, column: 24, scope: !6)
!103 = !DILocation(line: 92, column: 24, scope: !6)
!104 = !DILocation(line: 94, column: 24, scope: !6)
!105 = !DILocation(line: 95, column: 24, scope: !6)
!106 = !DILocation(line: 97, column: 24, scope: !6)
!107 = !DILocation(line: 98, column: 31, scope: !6)
!108 = !DILocation(line: 100, column: 24, scope: !6)
!109 = !DILocation(line: 101, column: 24, scope: !6)
!110 = !DILocation(line: 105, column: 39, scope: !6)
!111 = !DILocation(line: 121, column: 24, scope: !6)
!112 = !DILocation(line: 122, column: 36, scope: !6)
!113 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !114)
!114 = !DILocation(line: 125, column: 46, scope: !6)
!115 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !114)
!116 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !114)
!117 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !114)
!118 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !119)
!119 = !DILocation(line: 127, column: 46, scope: !6)
!120 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !119)
!121 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !119)
!122 = !DILocation(line: 129, column: 25, scope: !6)
!123 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !119)
!124 = !DILocation(line: 130, column: 36, scope: !6)
!125 = !DILocation(line: 130, column: 29, scope: !6)
!126 = !DILocation(line: 130, column: 54, scope: !6)
!127 = !DILocation(line: 73, column: 4, scope: !6)
