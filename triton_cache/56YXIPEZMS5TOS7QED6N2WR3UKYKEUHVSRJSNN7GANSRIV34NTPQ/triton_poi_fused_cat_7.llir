; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 1016, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = sdiv i32 %14, 128, !dbg !13
  %17 = mul i32 %16, 128, !dbg !14
  %.decomposed = sub i32 %14, %17, !dbg !14
  %18 = srem i32 %15, 128, !dbg !14
  %19 = srem i32 %16, 3600, !dbg !15
  %20 = sdiv i32 %14, 460800, !dbg !16
  %21 = shl nsw i32 %20, 7, !dbg !17
  %22 = add nsw i32 %21, %.decomposed, !dbg !18
  %23 = add nsw i32 %18, %21, !dbg !18
  %24 = mul nsw i32 %19, 3072, !dbg !19
  %25 = add nsw i32 %22, %24, !dbg !20
  %26 = add nsw i32 %23, %24, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr i32, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr i32, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %28) #1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %30) #1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %41 = sext i32 %19 to i64, !dbg !23
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %41, !dbg !23
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %42) #1, !dbg !24
  %51 = getelementptr bfloat, ptr addrspace(1) %2, i64 %41, !dbg !25
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %51) #1, !dbg !26
  %60 = sext i32 %22 to i64, !dbg !27
  %61 = getelementptr bfloat, ptr addrspace(1) %3, i64 %60, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %61) #1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !28
  %71 = getelementptr bfloat, ptr addrspace(1) %4, i64 %60, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %71) #1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !30
  %81 = insertelement <2 x i16> poison, i16 %43, i64 0, !dbg !24
  %82 = insertelement <2 x i16> %81, i16 %44, i64 1, !dbg !24
  %83 = bitcast <2 x i16> %82 to <2 x bfloat>, !dbg !24
  %84 = fcmp oge <2 x bfloat> %83, zeroinitializer, !dbg !31
  %85 = select <2 x i1> %84, <2 x bfloat> zeroinitializer, <2 x bfloat> %83, !dbg !31
  %86 = insertelement <2 x i16> poison, i16 %45, i64 0, !dbg !24
  %87 = insertelement <2 x i16> %86, i16 %46, i64 1, !dbg !24
  %88 = bitcast <2 x i16> %87 to <2 x bfloat>, !dbg !24
  %89 = fcmp oge <2 x bfloat> %88, zeroinitializer, !dbg !31
  %90 = select <2 x i1> %89, <2 x bfloat> zeroinitializer, <2 x bfloat> %88, !dbg !31
  %91 = insertelement <2 x i16> poison, i16 %47, i64 0, !dbg !24
  %92 = insertelement <2 x i16> %91, i16 %48, i64 1, !dbg !24
  %93 = bitcast <2 x i16> %92 to <2 x bfloat>, !dbg !24
  %94 = fcmp oge <2 x bfloat> %93, zeroinitializer, !dbg !31
  %95 = select <2 x i1> %94, <2 x bfloat> zeroinitializer, <2 x bfloat> %93, !dbg !31
  %96 = insertelement <2 x i16> poison, i16 %49, i64 0, !dbg !24
  %97 = insertelement <2 x i16> %96, i16 %50, i64 1, !dbg !24
  %98 = bitcast <2 x i16> %97 to <2 x bfloat>, !dbg !24
  %99 = fcmp oge <2 x bfloat> %98, zeroinitializer, !dbg !31
  %100 = select <2 x i1> %99, <2 x bfloat> zeroinitializer, <2 x bfloat> %98, !dbg !31
  %101 = insertelement <2 x i16> poison, i16 %52, i64 0, !dbg !26
  %102 = insertelement <2 x i16> %101, i16 %53, i64 1, !dbg !26
  %103 = bitcast <2 x i16> %102 to <2 x bfloat>, !dbg !26
  %104 = fcmp ole <2 x bfloat> %103, zeroinitializer, !dbg !35
  %105 = insertelement <2 x i16> poison, i16 %54, i64 0, !dbg !26
  %106 = insertelement <2 x i16> %105, i16 %55, i64 1, !dbg !26
  %107 = bitcast <2 x i16> %106 to <2 x bfloat>, !dbg !26
  %108 = fcmp ole <2 x bfloat> %107, zeroinitializer, !dbg !35
  %109 = insertelement <2 x i16> poison, i16 %56, i64 0, !dbg !26
  %110 = insertelement <2 x i16> %109, i16 %57, i64 1, !dbg !26
  %111 = bitcast <2 x i16> %110 to <2 x bfloat>, !dbg !26
  %112 = fcmp ole <2 x bfloat> %111, zeroinitializer, !dbg !35
  %113 = insertelement <2 x i16> poison, i16 %58, i64 0, !dbg !26
  %114 = insertelement <2 x i16> %113, i16 %59, i64 1, !dbg !26
  %115 = bitcast <2 x i16> %114 to <2 x bfloat>, !dbg !26
  %116 = fcmp ole <2 x bfloat> %115, zeroinitializer, !dbg !35
  %117 = shl nsw i32 %20, 16, !dbg !37
  %118 = add i32 %117, %14, !dbg !37
  %119 = sext i32 %118 to i64, !dbg !38
  %120 = getelementptr bfloat, ptr addrspace(1) %5, i64 %119, !dbg !38
  %121 = fpext <2 x bfloat> %64 to <2 x float>, !dbg !39
  %122 = fpext <2 x bfloat> %74 to <2 x float>, !dbg !40
  %123 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !41
  %124 = insertelement <2 x i32> %123, i32 %33, i64 1, !dbg !41
  %125 = sitofp <2 x i32> %124 to <2 x float>, !dbg !41
  %126 = fpext <2 x bfloat> %85 to <2 x float>, !dbg !31
  %127 = fsub <2 x float> zeroinitializer, %126, !dbg !42
  %128 = select <2 x i1> %104, <2 x bfloat> zeroinitializer, <2 x bfloat> %103, !dbg !35
  %129 = fpext <2 x bfloat> %128 to <2 x float>, !dbg !35
  %130 = fcmp ogt <2 x float> %127, %129, !dbg !43
  %131 = fcmp uno <2 x float> %127, zeroinitializer, !dbg !45
  %132 = or <2 x i1> %131, %130, !dbg !46
  %133 = select <2 x i1> %132, <2 x float> %127, <2 x float> %129, !dbg !47
  %134 = fmul <2 x float> %133, splat (float 0x3F80204080000000), !dbg !48
  %135 = fcmp ogt <2 x float> %134, splat (float 0x3EE4F8B580000000), !dbg !49
  %136 = fcmp uno <2 x float> %134, zeroinitializer, !dbg !51
  %137 = or <2 x i1> %135, %136, !dbg !52
  %138 = select <2 x i1> %137, <2 x float> %134, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %139 = fmul <2 x float> %138, %125, !dbg !54
  %140 = fmul <2 x float> %139, %121, !dbg !55
  %141 = fadd <2 x float> %140, %122, !dbg !56
  %142 = fptrunc <2 x float> %141 to <2 x bfloat>, !dbg !57
  %143 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !39
  %144 = fpext <2 x bfloat> %76 to <2 x float>, !dbg !40
  %145 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !41
  %146 = insertelement <2 x i32> %145, i32 %35, i64 1, !dbg !41
  %147 = sitofp <2 x i32> %146 to <2 x float>, !dbg !41
  %148 = fpext <2 x bfloat> %90 to <2 x float>, !dbg !31
  %149 = fsub <2 x float> zeroinitializer, %148, !dbg !42
  %150 = select <2 x i1> %108, <2 x bfloat> zeroinitializer, <2 x bfloat> %107, !dbg !35
  %151 = fpext <2 x bfloat> %150 to <2 x float>, !dbg !35
  %152 = fcmp ogt <2 x float> %149, %151, !dbg !43
  %153 = fcmp uno <2 x float> %149, zeroinitializer, !dbg !45
  %154 = or <2 x i1> %153, %152, !dbg !46
  %155 = select <2 x i1> %154, <2 x float> %149, <2 x float> %151, !dbg !47
  %156 = fmul <2 x float> %155, splat (float 0x3F80204080000000), !dbg !48
  %157 = fcmp ogt <2 x float> %156, splat (float 0x3EE4F8B580000000), !dbg !49
  %158 = fcmp uno <2 x float> %156, zeroinitializer, !dbg !51
  %159 = or <2 x i1> %157, %158, !dbg !52
  %160 = select <2 x i1> %159, <2 x float> %156, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %161 = fmul <2 x float> %160, %147, !dbg !54
  %162 = fmul <2 x float> %161, %143, !dbg !55
  %163 = fadd <2 x float> %162, %144, !dbg !56
  %164 = fptrunc <2 x float> %163 to <2 x bfloat>, !dbg !57
  %165 = fpext <2 x bfloat> %68 to <2 x float>, !dbg !39
  %166 = fpext <2 x bfloat> %78 to <2 x float>, !dbg !40
  %167 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !41
  %168 = insertelement <2 x i32> %167, i32 %38, i64 1, !dbg !41
  %169 = sitofp <2 x i32> %168 to <2 x float>, !dbg !41
  %170 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !31
  %171 = fsub <2 x float> zeroinitializer, %170, !dbg !42
  %172 = select <2 x i1> %112, <2 x bfloat> zeroinitializer, <2 x bfloat> %111, !dbg !35
  %173 = fpext <2 x bfloat> %172 to <2 x float>, !dbg !35
  %174 = fcmp ogt <2 x float> %171, %173, !dbg !43
  %175 = fcmp uno <2 x float> %171, zeroinitializer, !dbg !45
  %176 = or <2 x i1> %175, %174, !dbg !46
  %177 = select <2 x i1> %176, <2 x float> %171, <2 x float> %173, !dbg !47
  %178 = fmul <2 x float> %177, splat (float 0x3F80204080000000), !dbg !48
  %179 = fcmp ogt <2 x float> %178, splat (float 0x3EE4F8B580000000), !dbg !49
  %180 = fcmp uno <2 x float> %178, zeroinitializer, !dbg !51
  %181 = or <2 x i1> %179, %180, !dbg !52
  %182 = select <2 x i1> %181, <2 x float> %178, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %183 = fmul <2 x float> %182, %169, !dbg !54
  %184 = fmul <2 x float> %183, %165, !dbg !55
  %185 = fadd <2 x float> %184, %166, !dbg !56
  %186 = fptrunc <2 x float> %185 to <2 x bfloat>, !dbg !57
  %187 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !39
  %188 = fpext <2 x bfloat> %80 to <2 x float>, !dbg !40
  %189 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !41
  %190 = insertelement <2 x i32> %189, i32 %40, i64 1, !dbg !41
  %191 = sitofp <2 x i32> %190 to <2 x float>, !dbg !41
  %192 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !31
  %193 = fsub <2 x float> zeroinitializer, %192, !dbg !42
  %194 = select <2 x i1> %116, <2 x bfloat> zeroinitializer, <2 x bfloat> %115, !dbg !35
  %195 = fpext <2 x bfloat> %194 to <2 x float>, !dbg !35
  %196 = fcmp ogt <2 x float> %193, %195, !dbg !43
  %197 = fcmp uno <2 x float> %193, zeroinitializer, !dbg !45
  %198 = or <2 x i1> %197, %196, !dbg !46
  %199 = select <2 x i1> %198, <2 x float> %193, <2 x float> %195, !dbg !47
  %200 = fmul <2 x float> %199, splat (float 0x3F80204080000000), !dbg !48
  %201 = fcmp ogt <2 x float> %200, splat (float 0x3EE4F8B580000000), !dbg !49
  %202 = fcmp uno <2 x float> %200, zeroinitializer, !dbg !51
  %203 = or <2 x i1> %201, %202, !dbg !52
  %204 = select <2 x i1> %203, <2 x float> %200, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !53
  %205 = fmul <2 x float> %204, %191, !dbg !54
  %206 = fmul <2 x float> %205, %187, !dbg !55
  %207 = fadd <2 x float> %206, %188, !dbg !56
  %208 = fptrunc <2 x float> %207 to <2 x bfloat>, !dbg !57
  %209 = bitcast <2 x bfloat> %142 to i32, !dbg !57
  %210 = bitcast <2 x bfloat> %164 to i32, !dbg !57
  %211 = bitcast <2 x bfloat> %186 to i32, !dbg !57
  %212 = bitcast <2 x bfloat> %208 to i32, !dbg !57
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %209, i32 %210, i32 %211, i32 %212, ptr addrspace(1) %120) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpduyi257hekzywwmvuszprlfyl44wtwmea5kiuhhyb6aron4awh.py", directory: "/tmp/torchinductor_root/pd")
!4 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 20, column: 28, scope: !6)
!10 = !DILocation(line: 20, column: 33, scope: !6)
!11 = !DILocation(line: 21, column: 36, scope: !6)
!12 = !DILocation(line: 21, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 19, scope: !6)
!15 = !DILocation(line: 24, column: 28, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 27, column: 39, scope: !6)
!18 = !DILocation(line: 27, column: 35, scope: !6)
!19 = !DILocation(line: 27, column: 49, scope: !6)
!20 = !DILocation(line: 27, column: 44, scope: !6)
!21 = !DILocation(line: 27, column: 30, scope: !6)
!22 = !DILocation(line: 27, column: 54, scope: !6)
!23 = !DILocation(line: 28, column: 30, scope: !6)
!24 = !DILocation(line: 28, column: 35, scope: !6)
!25 = !DILocation(line: 29, column: 30, scope: !6)
!26 = !DILocation(line: 29, column: 35, scope: !6)
!27 = !DILocation(line: 30, column: 31, scope: !6)
!28 = !DILocation(line: 30, column: 45, scope: !6)
!29 = !DILocation(line: 31, column: 31, scope: !6)
!30 = !DILocation(line: 31, column: 45, scope: !6)
!31 = !DILocation(line: 97, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 34, column: 40, scope: !6)
!35 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 36, column: 40, scope: !6)
!37 = !DILocation(line: 47, column: 30, scope: !6)
!38 = !DILocation(line: 47, column: 25, scope: !6)
!39 = !DILocation(line: 30, column: 84, scope: !6)
!40 = !DILocation(line: 31, column: 84, scope: !6)
!41 = !DILocation(line: 32, column: 19, scope: !6)
!42 = !DILocation(line: 35, column: 12, scope: !6)
!43 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 37, column: 40, scope: !6)
!45 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 39, column: 19, scope: !6)
!49 = !DILocation(line: 102, column: 15, scope: !32, inlinedAt: !50)
!50 = !DILocation(line: 42, column: 42, scope: !6)
!51 = !DILocation(line: 104, column: 21, scope: !32, inlinedAt: !50)
!52 = !DILocation(line: 104, column: 16, scope: !32, inlinedAt: !50)
!53 = !DILocation(line: 105, column: 29, scope: !32, inlinedAt: !50)
!54 = !DILocation(line: 44, column: 19, scope: !6)
!55 = !DILocation(line: 45, column: 20, scope: !6)
!56 = !DILocation(line: 46, column: 20, scope: !6)
!57 = !DILocation(line: 47, column: 49, scope: !6)
!58 = !DILocation(line: 47, column: 4, scope: !6)
