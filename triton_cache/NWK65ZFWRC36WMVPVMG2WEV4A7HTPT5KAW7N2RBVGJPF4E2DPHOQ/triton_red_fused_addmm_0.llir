; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 1, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 9, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, %8, !dbg !12
  %12 = icmp slt i32 %11, 9216, !dbg !13
  %13 = shl i32 %9, 1, !dbg !14
  %14 = and i32 %13, 1022, !dbg !14
  %15 = and i32 %9, 1023, !dbg !14
  %16 = mul i32 %11, 3072, !dbg !15
  %17 = or disjoint i32 %16, %14
  %18 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15
  %19 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14
  %20 = zext nneg i32 %15 to i64, !dbg !16
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = bitcast i16 %22 to bfloat, !dbg !18
  %24 = fpext bfloat %23 to float, !dbg !19
  %25 = sext i32 %17 to i64, !dbg !20
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 %12) #4, !dbg !21
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !21
  %29 = fsub float 0.000000e+00, %24, !dbg !22
  %30 = fmul float %29, 0x3FF7154760000000, !dbg !26
  %31 = tail call float @llvm.nvvm.ex2.approx.f(float %30), !dbg !26
  %32 = fadd float %31, 1.000000e+00, !dbg !27
  %33 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %32), !dbg !28
  %34 = fmul float %33, %24, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %35 = bitcast float %34 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %35, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %36 = or disjoint i64 %20, 1024, !dbg !31
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = add i32 %17, 1024, !dbg !32
  %39 = sext i32 %38 to i64, !dbg !20
  %40 = getelementptr bfloat, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = or disjoint i64 %20, 2048, !dbg !31
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = add i32 %17, 2048, !dbg !32
  %44 = sext i32 %43 to i64, !dbg !20
  %45 = getelementptr bfloat, ptr addrspace(1) %1, i64 %44, !dbg !20
  %46 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !33
  %47 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %48 = fmul <2 x float> %47, %46, !dbg !30
  %49 = fadd <2 x float> %48, zeroinitializer, !dbg !34
  %50 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 true) #4, !dbg !18
  %51 = bitcast i16 %50 to bfloat, !dbg !18
  %52 = fpext bfloat %51 to float, !dbg !19
  %53 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %12) #4, !dbg !21
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !21
  %55 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !33
  %56 = fsub float 0.000000e+00, %52, !dbg !22
  %57 = fmul float %56, 0x3FF7154760000000, !dbg !26
  %58 = tail call float @llvm.nvvm.ex2.approx.f(float %57), !dbg !26
  %59 = fadd float %58, 1.000000e+00, !dbg !27
  %60 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %59), !dbg !28
  %61 = fmul float %60, %52, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %62 = bitcast float %61 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %62, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %63 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %64 = fmul <2 x float> %63, %55, !dbg !30
  %65 = fadd <2 x float> %49, %64, !dbg !34
  %66 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 true) #4, !dbg !18
  %67 = bitcast i16 %66 to bfloat, !dbg !18
  %68 = fpext bfloat %67 to float, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %12) #4, !dbg !21
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !21
  %71 = fpext <2 x bfloat> %70 to <2 x float>, !dbg !33
  %72 = fsub float 0.000000e+00, %68, !dbg !22
  %73 = fmul float %72, 0x3FF7154760000000, !dbg !26
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %73), !dbg !26
  %75 = fadd float %74, 1.000000e+00, !dbg !27
  %76 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !28
  %77 = fmul float %76, %68, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %78 = bitcast float %77 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %18, <1 x i32> %78, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %79 = load <2 x float>, ptr addrspace(3) %19, align 8, !dbg !30
  %80 = fmul <2 x float> %79, %71, !dbg !30
  %81 = fadd <2 x float> %65, %80, !dbg !34
  %82 = and i32 %9, 1, !dbg !11
  %83 = lshr i32 %9, 5, !dbg !11
  %84 = and i32 %9, 31, !dbg !11
  %85 = or disjoint i32 %8, %82, !dbg !12
  %86 = icmp slt i32 %85, 9216, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %shift = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %87 = fadd <2 x float> %81, %shift, !dbg !37
  %88 = extractelement <2 x float> %87, i64 0, !dbg !37
  %89 = select i1 %12, float %88, float 0.000000e+00, !dbg !37
  %90 = bitcast float %89 to i32, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fadd float %89, %92, !dbg !37
  %94 = bitcast float %93 to i32, !dbg !35
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fadd float %93, %96, !dbg !37
  %98 = bitcast float %97 to i32, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %97, %100, !dbg !37
  %102 = bitcast float %101 to i32, !dbg !35
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !35
  %104 = bitcast i32 %103 to float, !dbg !35
  %105 = fadd float %101, %104, !dbg !37
  %106 = bitcast float %105 to i32, !dbg !35
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !35
  %108 = bitcast i32 %107 to float, !dbg !35
  %109 = fadd float %105, %108, !dbg !37
  %110 = and i32 %83, 15, !dbg !35
  %111 = icmp eq i32 %84, 0, !dbg !35
  %112 = shl nuw nsw i32 %.lobit, 4, !dbg !35
  %113 = or disjoint i32 %112, %110, !dbg !35
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !35
  %115 = bitcast float %109 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %111) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %116 = icmp slt i32 %9, 32, !dbg !35
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #4, !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !35
  %121 = bitcast i32 %120 to float, !dbg !35
  %122 = fadd float %119, %121, !dbg !37
  %123 = bitcast float %122 to i32, !dbg !35
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !35
  %125 = bitcast i32 %124 to float, !dbg !35
  %126 = fadd float %122, %125, !dbg !37
  %127 = bitcast float %126 to i32, !dbg !35
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !35
  %129 = bitcast i32 %128 to float, !dbg !35
  %130 = fadd float %126, %129, !dbg !37
  %131 = bitcast float %130 to i32, !dbg !35
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !35
  %133 = bitcast i32 %132 to float, !dbg !35
  %134 = fadd float %130, %133, !dbg !37
  %135 = and i32 %9, 15, !dbg !35
  %136 = icmp eq i32 %135, 0, !dbg !35
  %137 = and i1 %116, %136, !dbg !35
  %138 = bitcast float %134 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %138, i1 %137) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !35
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %141 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !39
  %142 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %143 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %82, !dbg !39
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !39
  %145 = sext i32 %85 to i64, !dbg !40
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !40
  %147 = and i32 %9, 1022, !dbg !41
  %148 = icmp eq i32 %147, 0, !dbg !41
  %149 = and i1 %148, %86, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %146, i1 %149) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 46, scope: !6)
!16 = !DILocation(line: 30, column: 40, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 94, scope: !6)
!20 = !DILocation(line: 37, column: 34, scope: !6)
!21 = !DILocation(line: 37, column: 51, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 31, column: 31, scope: !6)
!32 = !DILocation(line: 37, column: 41, scope: !6)
!33 = !DILocation(line: 37, column: 113, scope: !6)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 27, scope: !6)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!39 = !DILocation(line: 48, column: 30, scope: !6)
!40 = !DILocation(line: 49, column: 25, scope: !6)
!41 = !DILocation(line: 49, column: 37, scope: !6)
!42 = !DILocation(line: 49, column: 4, scope: !6)
