; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 6, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = lshr i32 %18, 3, !dbg !11
  %20 = and i32 %19, 63, !dbg !11
  %21 = or disjoint i32 %20, %17, !dbg !12
  %22 = icmp slt i32 %21, 3600, !dbg !13
  %23 = shl i32 %18, 3, !dbg !14
  %24 = and i32 %23, 56, !dbg !14
  %25 = mul i32 %21, 3072, !dbg !15
  %26 = or disjoint i32 %25, %24
  %27 = sext i32 %26 to i64, !dbg !16
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %22) #5, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !17
  %38 = extractelement <2 x bfloat> %31, i64 0, !dbg !17
  %39 = extractelement <2 x bfloat> %31, i64 1, !dbg !17
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !17
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !17
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !17
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !17
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !17
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !17
  %46 = fpext bfloat %38 to float, !dbg !18
  %47 = fpext bfloat %39 to float, !dbg !18
  %48 = fpext bfloat %40 to float, !dbg !18
  %49 = fpext bfloat %41 to float, !dbg !18
  %50 = fpext bfloat %42 to float, !dbg !18
  %51 = fpext bfloat %43 to float, !dbg !18
  %52 = fpext bfloat %44 to float, !dbg !18
  %53 = fpext bfloat %45 to float, !dbg !18
  %54 = select i1 %22, float %46, float 0.000000e+00, !dbg !19
  %55 = select i1 %22, float %47, float 0.000000e+00, !dbg !19
  %56 = select i1 %22, float %48, float 0.000000e+00, !dbg !19
  %57 = select i1 %22, float %49, float 0.000000e+00, !dbg !19
  %58 = select i1 %22, float %50, float 0.000000e+00, !dbg !19
  %59 = select i1 %22, float %51, float 0.000000e+00, !dbg !19
  %60 = select i1 %22, float %52, float 0.000000e+00, !dbg !19
  %61 = select i1 %22, float %53, float 0.000000e+00, !dbg !19
  %62 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %63 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %64 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %65 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %66 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %68 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %69 = select i1 %22, float 1.000000e+00, float 0.000000e+00, !dbg !20
  br label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 64, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %70 = phi float [ %62, %.peel.begin ], [ %195, %._crit_edge ]
  %71 = phi float [ %63, %.peel.begin ], [ %196, %._crit_edge ]
  %72 = phi float [ %64, %.peel.begin ], [ %197, %._crit_edge ]
  %73 = phi float [ %65, %.peel.begin ], [ %198, %._crit_edge ]
  %74 = phi float [ %66, %.peel.begin ], [ %199, %._crit_edge ]
  %75 = phi float [ %67, %.peel.begin ], [ %200, %._crit_edge ]
  %76 = phi float [ %68, %.peel.begin ], [ %201, %._crit_edge ]
  %77 = phi float [ %69, %.peel.begin ], [ %202, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %.peel.begin ], [ %187, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %.peel.begin ], [ %188, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %.peel.begin ], [ %189, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %.peel.begin ], [ %190, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %.peel.begin ], [ %191, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %.peel.begin ], [ %192, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %.peel.begin ], [ %193, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %.peel.begin ], [ %194, %._crit_edge ]
  %86 = phi float [ %54, %.peel.begin ], [ %179, %._crit_edge ]
  %87 = phi float [ %55, %.peel.begin ], [ %180, %._crit_edge ]
  %88 = phi float [ %56, %.peel.begin ], [ %181, %._crit_edge ]
  %89 = phi float [ %57, %.peel.begin ], [ %182, %._crit_edge ]
  %90 = phi float [ %58, %.peel.begin ], [ %183, %._crit_edge ]
  %91 = phi float [ %59, %.peel.begin ], [ %184, %._crit_edge ]
  %92 = phi float [ %60, %.peel.begin ], [ %185, %._crit_edge ]
  %93 = phi float [ %61, %.peel.begin ], [ %186, %._crit_edge ]
  %94 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !22
  %95 = add i32 %26, %94, !dbg !22
  %96 = sext i32 %95 to i64, !dbg !16
  %97 = getelementptr bfloat, ptr addrspace(1) %0, i64 %96, !dbg !16
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %97, i1 %22) #5, !dbg !17
  %99 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !17
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !17
  %101 = extractelement <2 x bfloat> %100, i64 1, !dbg !17
  %102 = fpext bfloat %101 to float, !dbg !18
  %103 = extractelement <2 x bfloat> %100, i64 0, !dbg !17
  %104 = fpext bfloat %103 to float, !dbg !18
  %105 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !17
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !17
  %107 = extractelement <2 x bfloat> %106, i64 1, !dbg !17
  %108 = fpext bfloat %107 to float, !dbg !18
  %109 = extractelement <2 x bfloat> %106, i64 0, !dbg !17
  %110 = fpext bfloat %109 to float, !dbg !18
  %111 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !17
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !17
  %113 = extractelement <2 x bfloat> %112, i64 1, !dbg !17
  %114 = fpext bfloat %113 to float, !dbg !18
  %115 = extractelement <2 x bfloat> %112, i64 0, !dbg !17
  %116 = fpext bfloat %115 to float, !dbg !18
  %117 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !17
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !17
  %119 = extractelement <2 x bfloat> %118, i64 1, !dbg !17
  %120 = fpext bfloat %119 to float, !dbg !18
  %121 = extractelement <2 x bfloat> %118, i64 0, !dbg !17
  %122 = fpext bfloat %121 to float, !dbg !18
  %123 = fsub float %122, %86, !dbg !23
  %124 = fsub float %120, %87, !dbg !23
  %125 = fsub float %116, %88, !dbg !23
  %126 = fsub float %114, %89, !dbg !23
  %127 = fsub float %110, %90, !dbg !23
  %128 = fsub float %108, %91, !dbg !23
  %129 = fsub float %104, %92, !dbg !23
  %130 = fsub float %102, %93, !dbg !23
  %131 = fadd float %70, 1.000000e+00, !dbg !27
  %132 = fadd float %71, 1.000000e+00, !dbg !27
  %133 = fadd float %72, 1.000000e+00, !dbg !27
  %134 = fadd float %73, 1.000000e+00, !dbg !27
  %135 = fadd float %74, 1.000000e+00, !dbg !27
  %136 = fadd float %75, 1.000000e+00, !dbg !27
  %137 = fadd float %76, 1.000000e+00, !dbg !27
  %138 = fadd float %77, 1.000000e+00, !dbg !27
  %139 = tail call float @llvm.nvvm.div.full(float %123, float %131), !dbg !28
  %140 = tail call float @llvm.nvvm.div.full(float %124, float %132), !dbg !28
  %141 = tail call float @llvm.nvvm.div.full(float %125, float %133), !dbg !28
  %142 = tail call float @llvm.nvvm.div.full(float %126, float %134), !dbg !28
  %143 = tail call float @llvm.nvvm.div.full(float %127, float %135), !dbg !28
  %144 = tail call float @llvm.nvvm.div.full(float %128, float %136), !dbg !28
  %145 = tail call float @llvm.nvvm.div.full(float %129, float %137), !dbg !28
  %146 = tail call float @llvm.nvvm.div.full(float %130, float %138), !dbg !28
  %147 = fadd float %86, %139, !dbg !29
  %148 = fadd float %87, %140, !dbg !29
  %149 = fadd float %88, %141, !dbg !29
  %150 = fadd float %89, %142, !dbg !29
  %151 = fadd float %90, %143, !dbg !29
  %152 = fadd float %91, %144, !dbg !29
  %153 = fadd float %92, %145, !dbg !29
  %154 = fadd float %93, %146, !dbg !29
  %155 = fsub float %122, %147, !dbg !30
  %156 = fsub float %120, %148, !dbg !30
  %157 = fsub float %116, %149, !dbg !30
  %158 = fsub float %114, %150, !dbg !30
  %159 = fsub float %110, %151, !dbg !30
  %160 = fsub float %108, %152, !dbg !30
  %161 = fsub float %104, %153, !dbg !30
  %162 = fsub float %102, %154, !dbg !30
  %163 = fmul float %123, %155, !dbg !31
  %164 = fmul float %124, %156, !dbg !31
  %165 = fmul float %125, %157, !dbg !31
  %166 = fmul float %126, %158, !dbg !31
  %167 = fmul float %127, %159, !dbg !31
  %168 = fmul float %128, %160, !dbg !31
  %169 = fmul float %129, %161, !dbg !31
  %170 = fmul float %130, %162, !dbg !31
  %171 = fadd float %78, %163, !dbg !32
  %172 = fadd float %79, %164, !dbg !32
  %173 = fadd float %80, %165, !dbg !32
  %174 = fadd float %81, %166, !dbg !32
  %175 = fadd float %82, %167, !dbg !32
  %176 = fadd float %83, %168, !dbg !32
  %177 = fadd float %84, %169, !dbg !32
  %178 = fadd float %85, %170, !dbg !32
  %179 = select i1 %22, float %147, float %86, !dbg !19
  %180 = select i1 %22, float %148, float %87, !dbg !19
  %181 = select i1 %22, float %149, float %88, !dbg !19
  %182 = select i1 %22, float %150, float %89, !dbg !19
  %183 = select i1 %22, float %151, float %90, !dbg !19
  %184 = select i1 %22, float %152, float %91, !dbg !19
  %185 = select i1 %22, float %153, float %92, !dbg !19
  %186 = select i1 %22, float %154, float %93, !dbg !19
  %187 = select i1 %22, float %171, float %78, !dbg !33
  %188 = select i1 %22, float %172, float %79, !dbg !33
  %189 = select i1 %22, float %173, float %80, !dbg !33
  %190 = select i1 %22, float %174, float %81, !dbg !33
  %191 = select i1 %22, float %175, float %82, !dbg !33
  %192 = select i1 %22, float %176, float %83, !dbg !33
  %193 = select i1 %22, float %177, float %84, !dbg !33
  %194 = select i1 %22, float %178, float %85, !dbg !33
  %195 = select i1 %22, float %131, float %70, !dbg !20
  %196 = select i1 %22, float %132, float %71, !dbg !20
  %197 = select i1 %22, float %133, float %72, !dbg !20
  %198 = select i1 %22, float %134, float %73, !dbg !20
  %199 = select i1 %22, float %135, float %74, !dbg !20
  %200 = select i1 %22, float %136, float %75, !dbg !20
  %201 = select i1 %22, float %137, float %76, !dbg !20
  %202 = select i1 %22, float %138, float %77, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !21
  %203 = icmp samesign ult i64 %indvars.iv, 3008, !dbg !21
  br i1 %203, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %204 = fadd float %187, %188, !dbg !11
  %205 = and i32 %18, 63, !dbg !11
  %206 = or disjoint i32 %17, %205, !dbg !12
  %207 = icmp slt i32 %206, 3600, !dbg !13
  %208 = fsub float %180, %179, !dbg !36
  %209 = fadd float %195, %196, !dbg !39
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !40
  %211 = tail call float @llvm.nvvm.div.full(float %196, float %209), !dbg !41
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !42
  %213 = fmul float %208, %212, !dbg !43
  %214 = fadd float %179, %213, !dbg !44
  %215 = fmul float %208, %208, !dbg !45
  %216 = fmul float %215, %195, !dbg !46
  %217 = fmul float %216, %212, !dbg !47
  %218 = fadd float %204, %217, !dbg !48
  %219 = fsub float %181, %214, !dbg !36
  %220 = fadd float %197, %209, !dbg !39
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !40
  %222 = tail call float @llvm.nvvm.div.full(float %197, float %220), !dbg !41
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !42
  %224 = fmul float %223, %219, !dbg !43
  %225 = fadd float %214, %224, !dbg !44
  %226 = fadd float %189, %218, !dbg !49
  %227 = fmul float %219, %219, !dbg !45
  %228 = fmul float %209, %227, !dbg !46
  %229 = fmul float %223, %228, !dbg !47
  %230 = fadd float %226, %229, !dbg !48
  %231 = fsub float %182, %225, !dbg !36
  %232 = fadd float %198, %220, !dbg !39
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !40
  %234 = tail call float @llvm.nvvm.div.full(float %198, float %232), !dbg !41
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !42
  %236 = fmul float %235, %231, !dbg !43
  %237 = fadd float %225, %236, !dbg !44
  %238 = fadd float %190, %230, !dbg !49
  %239 = fmul float %231, %231, !dbg !45
  %240 = fmul float %220, %239, !dbg !46
  %241 = fmul float %235, %240, !dbg !47
  %242 = fadd float %238, %241, !dbg !48
  %243 = fsub float %183, %237, !dbg !36
  %244 = fadd float %199, %232, !dbg !39
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !40
  %246 = tail call float @llvm.nvvm.div.full(float %199, float %244), !dbg !41
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !42
  %248 = fmul float %247, %243, !dbg !43
  %249 = fadd float %237, %248, !dbg !44
  %250 = fadd float %191, %242, !dbg !49
  %251 = fmul float %243, %243, !dbg !45
  %252 = fmul float %232, %251, !dbg !46
  %253 = fmul float %247, %252, !dbg !47
  %254 = fadd float %250, %253, !dbg !48
  %255 = fsub float %184, %249, !dbg !36
  %256 = fadd float %200, %244, !dbg !39
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !40
  %258 = tail call float @llvm.nvvm.div.full(float %200, float %256), !dbg !41
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !42
  %260 = fmul float %259, %255, !dbg !43
  %261 = fadd float %249, %260, !dbg !44
  %262 = fadd float %192, %254, !dbg !49
  %263 = fmul float %255, %255, !dbg !45
  %264 = fmul float %244, %263, !dbg !46
  %265 = fmul float %259, %264, !dbg !47
  %266 = fadd float %262, %265, !dbg !48
  %267 = fsub float %185, %261, !dbg !36
  %268 = fadd float %201, %256, !dbg !39
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !40
  %270 = tail call float @llvm.nvvm.div.full(float %201, float %268), !dbg !41
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !42
  %272 = fmul float %271, %267, !dbg !43
  %273 = fadd float %261, %272, !dbg !44
  %274 = fadd float %193, %266, !dbg !49
  %275 = fmul float %267, %267, !dbg !45
  %276 = fmul float %256, %275, !dbg !46
  %277 = fmul float %271, %276, !dbg !47
  %278 = fadd float %274, %277, !dbg !48
  %279 = fsub float %186, %273, !dbg !36
  %280 = fadd float %202, %268, !dbg !39
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !40
  %282 = tail call float @llvm.nvvm.div.full(float %202, float %280), !dbg !41
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !42
  %284 = fmul float %283, %279, !dbg !43
  %285 = fadd float %273, %284, !dbg !44
  %286 = fadd float %194, %278, !dbg !49
  %287 = fmul float %279, %279, !dbg !45
  %288 = fmul float %268, %287, !dbg !46
  %289 = fmul float %283, %288, !dbg !47
  %290 = fadd float %286, %289, !dbg !48
  %291 = bitcast float %285 to i32, !dbg !50
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 4, i32 31), !dbg !50
  %293 = bitcast i32 %292 to float, !dbg !50
  %294 = bitcast float %290 to i32, !dbg !50
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !50
  %296 = bitcast i32 %295 to float, !dbg !50
  %297 = bitcast float %280 to i32, !dbg !50
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 4, i32 31), !dbg !50
  %299 = bitcast i32 %298 to float, !dbg !50
  %300 = fsub float %293, %285, !dbg !36
  %301 = fadd float %280, %299, !dbg !39
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !40
  %303 = tail call float @llvm.nvvm.div.full(float %299, float %301), !dbg !41
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !42
  %305 = fmul float %304, %300, !dbg !43
  %306 = fadd float %285, %305, !dbg !44
  %307 = fadd float %290, %296, !dbg !49
  %308 = fmul float %300, %300, !dbg !45
  %309 = fmul float %280, %308, !dbg !46
  %310 = fmul float %304, %309, !dbg !47
  %311 = fadd float %307, %310, !dbg !48
  %312 = bitcast float %306 to i32, !dbg !50
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 2, i32 31), !dbg !50
  %314 = bitcast i32 %313 to float, !dbg !50
  %315 = bitcast float %311 to i32, !dbg !50
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !50
  %317 = bitcast i32 %316 to float, !dbg !50
  %318 = bitcast float %301 to i32, !dbg !50
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !50
  %320 = bitcast i32 %319 to float, !dbg !50
  %321 = fsub float %314, %306, !dbg !36
  %322 = fadd float %301, %320, !dbg !39
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !40
  %324 = tail call float @llvm.nvvm.div.full(float %320, float %322), !dbg !41
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !42
  %326 = fmul float %325, %321, !dbg !43
  %327 = fadd float %306, %326, !dbg !44
  %328 = fadd float %311, %317, !dbg !49
  %329 = fmul float %321, %321, !dbg !45
  %330 = fmul float %301, %329, !dbg !46
  %331 = fmul float %325, %330, !dbg !47
  %332 = fadd float %328, %331, !dbg !48
  %333 = bitcast float %327 to i32, !dbg !50
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 1, i32 31), !dbg !50
  %335 = bitcast i32 %334 to float, !dbg !50
  %336 = bitcast float %332 to i32, !dbg !50
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !50
  %338 = bitcast i32 %337 to float, !dbg !50
  %339 = bitcast float %322 to i32, !dbg !50
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !50
  %341 = bitcast i32 %340 to float, !dbg !50
  %342 = fsub float %335, %327, !dbg !36
  %343 = fadd float %322, %341, !dbg !39
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !40
  %345 = tail call float @llvm.nvvm.div.full(float %341, float %343), !dbg !41
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !42
  %347 = fmul float %346, %342, !dbg !43
  %348 = fadd float %327, %347, !dbg !44
  %349 = fadd float %332, %338, !dbg !49
  %350 = fmul float %342, %342, !dbg !45
  %351 = fmul float %322, %350, !dbg !46
  %352 = fmul float %346, %351, !dbg !47
  %353 = fadd float %349, %352, !dbg !48
  %354 = tail call float @llvm.nvvm.div.full(float %353, float 3.072000e+03), !dbg !51
  %355 = fadd float %354, 0x3EB0C6F7A0000000, !dbg !52
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i39 = icmp eq i32 %363, 0, !dbg !53
  br i1 %.not.i39, label %366, label %364, !dbg !53

364:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %365 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %355), !dbg !53
  br label %__nv_rsqrtf.exit41, !dbg !53

366:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %367 = tail call float @llvm.nvvm.rsqrt.approx.f(float %355), !dbg !53
  br label %__nv_rsqrtf.exit41, !dbg !53

__nv_rsqrtf.exit41:                               ; preds = %364, %366
  %.0.i40 = phi float [ %365, %364 ], [ %367, %366 ], !dbg !53
  %368 = zext nneg i32 %24 to i64, !dbg !54
  %369 = insertelement <2 x i1> poison, i1 %22, i64 0, !dbg !55
  %370 = shufflevector <2 x i1> %369, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !55
  %371 = insertelement <2 x float> poison, float %.0.i40, i64 0, !dbg !56
  %372 = shufflevector <2 x float> %371, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %373 = insertelement <2 x float> poison, float %348, i64 0, !dbg !57
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %375 = insertelement <8 x i1> poison, i1 %22, i64 0, !dbg !58
  %376 = shufflevector <8 x i1> %375, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !58
  %377 = insertelement <4 x float> poison, float %.0.i40, i64 0, !dbg !56
  %378 = shufflevector <4 x float> %377, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %379 = insertelement <4 x float> poison, float %348, i64 0, !dbg !57
  %380 = shufflevector <4 x float> %379, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %381 = insertelement <4 x i1> poison, i1 %22, i64 0, !dbg !55
  %382 = shufflevector <4 x i1> %381, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  br label %383, !dbg !54

383:                                              ; preds = %__nv_rsqrtf.exit41, %383
  %indvars.iv85 = phi i64 [ 0, %__nv_rsqrtf.exit41 ], [ %indvars.iv.next86, %383 ]
  %384 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %527, %383 ]
  %385 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit41 ], [ %528, %383 ]
  %386 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit41 ], [ %472, %383 ]
  %387 = phi <8 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit41 ], [ %535, %383 ]
  %388 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit41 ], [ %500, %383 ]
  %389 = or disjoint i64 %indvars.iv85, %368, !dbg !59
  %390 = or disjoint i64 %389, 4, !dbg !59
  %391 = trunc nuw nsw i64 %389 to i32, !dbg !60
  %392 = add i32 %25, %391, !dbg !60
  %393 = sext i32 %392 to i64, !dbg !61
  %394 = getelementptr bfloat, ptr addrspace(1) %0, i64 %393, !dbg !61
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %394, i1 %22) #5, !dbg !62
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !62
  %397 = bitcast i32 %396 to <2 x bfloat>, !dbg !62
  %398 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !62
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !62
  %400 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !62
  %401 = bitcast i32 %400 to <2 x bfloat>, !dbg !62
  %402 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !62
  %403 = bitcast i32 %402 to <2 x bfloat>, !dbg !62
  %404 = add nuw nsw i64 %389, 3072, !dbg !63
  %405 = getelementptr float, ptr addrspace(1) %1, i64 %404, !dbg !64
  %406 = getelementptr float, ptr addrspace(1) %1, i64 %390, !dbg !64
  %407 = getelementptr i8, ptr addrspace(1) %406, i64 12288, !dbg !64
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %405, i1 true) #5, !dbg !65
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !65
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !65
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !65
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !65
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %407, i1 true) #5, !dbg !65
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !65
  %415 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !65
  %416 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !65
  %417 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !65
  %418 = getelementptr bfloat, ptr addrspace(1) %2, i64 %404, !dbg !66
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %418, i1 true) #5, !dbg !67
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !67
  %421 = bitcast i32 %420 to <2 x bfloat>, !dbg !67
  %422 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !67
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !67
  %424 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !67
  %425 = bitcast i32 %424 to <2 x bfloat>, !dbg !67
  %426 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !67
  %427 = bitcast i32 %426 to <2 x bfloat>, !dbg !67
  %428 = getelementptr float, ptr addrspace(1) %1, i64 %389, !dbg !68
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %428, i1 true) #5, !dbg !69
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !69
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !69
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !69
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !69
  %434 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %406, i1 true) #5, !dbg !69
  %435 = extractvalue { i32, i32, i32, i32 } %434, 0, !dbg !69
  %436 = extractvalue { i32, i32, i32, i32 } %434, 1, !dbg !69
  %437 = extractvalue { i32, i32, i32, i32 } %434, 2, !dbg !69
  %438 = extractvalue { i32, i32, i32, i32 } %434, 3, !dbg !69
  %439 = getelementptr bfloat, ptr addrspace(1) %2, i64 %389, !dbg !70
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %439, i1 true) #5, !dbg !71
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !71
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !71
  %443 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !71
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !71
  %445 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !71
  %446 = bitcast i32 %445 to <2 x bfloat>, !dbg !71
  %447 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !71
  %448 = bitcast i32 %447 to <2 x bfloat>, !dbg !71
  %449 = fcmp uno <2 x float> %386, zeroinitializer, !dbg !72
  %450 = fcmp uno float %384, 0.000000e+00, !dbg !72
  %451 = fcmp uno float %385, 0.000000e+00, !dbg !72
  %452 = fcmp uno <4 x float> %388, zeroinitializer, !dbg !72
  %453 = fpext <2 x bfloat> %397 to <2 x float>, !dbg !74
  %454 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !65
  %455 = insertelement <2 x i32> %454, i32 %410, i64 1, !dbg !65
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !65
  %457 = fpext <2 x bfloat> %421 to <2 x float>, !dbg !75
  %458 = insertelement <2 x i32> poison, i32 %430, i64 0, !dbg !69
  %459 = insertelement <2 x i32> %458, i32 %431, i64 1, !dbg !69
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !69
  %461 = fpext <2 x bfloat> %442 to <2 x float>, !dbg !76
  %462 = fsub <2 x float> %453, %374, !dbg !57
  %463 = fmul <2 x float> %372, %462, !dbg !56
  %464 = fadd <2 x float> %456, %457, !dbg !77
  %465 = fadd <2 x float> %464, splat (float 1.000000e+00), !dbg !78
  %466 = fmul <2 x float> %463, %465, !dbg !79
  %467 = fadd <2 x float> %460, %461, !dbg !80
  %468 = fadd <2 x float> %466, %467, !dbg !81
  %469 = fcmp olt <2 x float> %386, %468, !dbg !82
  %470 = or <2 x i1> %449, %469, !dbg !83
  %471 = select <2 x i1> %470, <2 x float> %386, <2 x float> %468, !dbg !84
  %472 = select <2 x i1> %370, <2 x float> %471, <2 x float> %386, !dbg !55
  %473 = fcmp uno <8 x float> %387, zeroinitializer, !dbg !85
  %474 = shufflevector <2 x bfloat> %401, <2 x bfloat> %403, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !74
  %475 = fpext <4 x bfloat> %474 to <4 x float>, !dbg !74
  %476 = insertelement <4 x i32> poison, i32 %414, i64 0, !dbg !65
  %477 = insertelement <4 x i32> %476, i32 %415, i64 1, !dbg !65
  %478 = insertelement <4 x i32> %477, i32 %416, i64 2, !dbg !65
  %479 = insertelement <4 x i32> %478, i32 %417, i64 3, !dbg !65
  %480 = bitcast <4 x i32> %479 to <4 x float>, !dbg !65
  %481 = shufflevector <2 x bfloat> %425, <2 x bfloat> %427, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !75
  %482 = fpext <4 x bfloat> %481 to <4 x float>, !dbg !75
  %483 = insertelement <4 x i32> poison, i32 %435, i64 0, !dbg !69
  %484 = insertelement <4 x i32> %483, i32 %436, i64 1, !dbg !69
  %485 = insertelement <4 x i32> %484, i32 %437, i64 2, !dbg !69
  %486 = insertelement <4 x i32> %485, i32 %438, i64 3, !dbg !69
  %487 = bitcast <4 x i32> %486 to <4 x float>, !dbg !69
  %488 = shufflevector <2 x bfloat> %446, <2 x bfloat> %448, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !76
  %489 = fpext <4 x bfloat> %488 to <4 x float>, !dbg !76
  %490 = fsub <4 x float> %475, %380, !dbg !57
  %491 = fmul <4 x float> %378, %490, !dbg !56
  %492 = fadd <4 x float> %480, %482, !dbg !77
  %493 = fadd <4 x float> %492, splat (float 1.000000e+00), !dbg !78
  %494 = fmul <4 x float> %491, %493, !dbg !79
  %495 = fadd <4 x float> %487, %489, !dbg !80
  %496 = fadd <4 x float> %494, %495, !dbg !81
  %497 = fcmp olt <4 x float> %388, %496, !dbg !82
  %498 = or <4 x i1> %452, %497, !dbg !83
  %499 = select <4 x i1> %498, <4 x float> %388, <4 x float> %496, !dbg !84
  %500 = select <4 x i1> %382, <4 x float> %499, <4 x float> %388, !dbg !55
  %501 = getelementptr bfloat, ptr addrspace(1) %3, i64 %393, !dbg !87
  %502 = fptrunc <2 x float> %468 to <2 x bfloat>, !dbg !88
  %503 = fpext <2 x bfloat> %399 to <2 x float>, !dbg !74
  %504 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !65
  %505 = insertelement <2 x i32> %504, i32 %412, i64 1, !dbg !65
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !65
  %507 = fpext <2 x bfloat> %423 to <2 x float>, !dbg !75
  %508 = insertelement <2 x i32> poison, i32 %432, i64 0, !dbg !69
  %509 = insertelement <2 x i32> %508, i32 %433, i64 1, !dbg !69
  %510 = bitcast <2 x i32> %509 to <2 x float>, !dbg !69
  %511 = fpext <2 x bfloat> %444 to <2 x float>, !dbg !76
  %512 = fsub <2 x float> %503, %374, !dbg !57
  %513 = fmul <2 x float> %372, %512, !dbg !56
  %514 = fadd <2 x float> %506, %507, !dbg !77
  %515 = fadd <2 x float> %514, splat (float 1.000000e+00), !dbg !78
  %516 = fmul <2 x float> %513, %515, !dbg !79
  %517 = fadd <2 x float> %510, %511, !dbg !80
  %518 = fadd <2 x float> %516, %517, !dbg !81
  %519 = extractelement <2 x float> %518, i64 0, !dbg !84
  %520 = fcmp olt float %384, %519, !dbg !82
  %521 = extractelement <2 x float> %518, i64 1, !dbg !84
  %522 = fcmp olt float %385, %521, !dbg !82
  %523 = or i1 %450, %520, !dbg !83
  %524 = or i1 %451, %522, !dbg !83
  %525 = select i1 %523, float %384, float %519, !dbg !84
  %526 = select i1 %524, float %385, float %521, !dbg !84
  %527 = select i1 %22, float %525, float %384, !dbg !55
  %528 = select i1 %22, float %526, float %385, !dbg !55
  %529 = shufflevector <2 x float> %468, <2 x float> %518, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %530 = shufflevector <4 x float> %496, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %531 = shufflevector <8 x float> %529, <8 x float> %530, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !89
  %532 = fcmp ogt <8 x float> %387, %531, !dbg !89
  %533 = or <8 x i1> %473, %532, !dbg !90
  %534 = select <8 x i1> %533, <8 x float> %387, <8 x float> %531, !dbg !91
  %535 = select <8 x i1> %376, <8 x float> %534, <8 x float> %387, !dbg !58
  %536 = fptrunc <2 x float> %518 to <2 x bfloat>, !dbg !88
  %537 = extractelement <4 x float> %496, i64 0, !dbg !88
  %538 = fptrunc float %537 to bfloat, !dbg !88
  %539 = extractelement <4 x float> %496, i64 1, !dbg !88
  %540 = fptrunc float %539 to bfloat, !dbg !88
  %541 = extractelement <4 x float> %496, i64 2, !dbg !88
  %542 = fptrunc float %541 to bfloat, !dbg !88
  %543 = extractelement <4 x float> %496, i64 3, !dbg !88
  %544 = fptrunc float %543 to bfloat, !dbg !88
  %545 = bitcast <2 x bfloat> %502 to i32, !dbg !88
  %546 = bitcast <2 x bfloat> %536 to i32, !dbg !88
  %547 = insertelement <2 x bfloat> poison, bfloat %538, i64 0, !dbg !88
  %548 = insertelement <2 x bfloat> %547, bfloat %540, i64 1, !dbg !88
  %549 = bitcast <2 x bfloat> %548 to i32, !dbg !88
  %550 = insertelement <2 x bfloat> poison, bfloat %542, i64 0, !dbg !88
  %551 = insertelement <2 x bfloat> %550, bfloat %544, i64 1, !dbg !88
  %552 = bitcast <2 x bfloat> %551 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %545, i32 %546, i32 %549, i32 %552, ptr addrspace(1) %501, i1 %22) #5, !dbg !88
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 64, !dbg !54
  %553 = icmp samesign ult i64 %indvars.iv85, 3008, !dbg !54
  br i1 %553, label %383, label %554, !dbg !54

554:                                              ; preds = %383
  %555 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %472, <2 x i32> <i32 0, i32 2>, !dbg !92
  %556 = fcmp olt <2 x float> %555, %472, !dbg !92
  %557 = fcmp uno <2 x float> %555, %472, !dbg !92
  %shift = shufflevector <2 x i1> %556, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %558 = or <2 x i1> %shift, %557, !dbg !94
  %559 = extractelement <2 x i1> %558, i64 0, !dbg !94
  %560 = extractelement <2 x float> %472, i64 0, !dbg !95
  %561 = extractelement <2 x float> %472, i64 1, !dbg !95
  %562 = select i1 %559, float %560, float %561, !dbg !95
  %563 = fcmp olt float %562, %527, !dbg !92
  %564 = fcmp uno float %562, 0.000000e+00, !dbg !96
  %565 = or i1 %563, %564, !dbg !94
  %566 = select i1 %565, float %562, float %527, !dbg !95
  %567 = fcmp olt float %566, %528, !dbg !92
  %568 = fcmp uno float %566, 0.000000e+00, !dbg !96
  %569 = or i1 %567, %568, !dbg !94
  %570 = select i1 %569, float %566, float %528, !dbg !95
  %571 = extractelement <4 x float> %500, i64 0, !dbg !92
  %572 = fcmp olt float %570, %571, !dbg !92
  %573 = fcmp uno float %570, 0.000000e+00, !dbg !96
  %574 = or i1 %572, %573, !dbg !94
  %575 = select i1 %574, float %570, float %571, !dbg !95
  %576 = extractelement <4 x float> %500, i64 1, !dbg !92
  %577 = fcmp olt float %575, %576, !dbg !92
  %578 = fcmp uno float %575, 0.000000e+00, !dbg !96
  %579 = or i1 %577, %578, !dbg !94
  %580 = select i1 %579, float %575, float %576, !dbg !95
  %581 = extractelement <4 x float> %500, i64 2, !dbg !92
  %582 = fcmp olt float %580, %581, !dbg !92
  %583 = fcmp uno float %580, 0.000000e+00, !dbg !96
  %584 = or i1 %582, %583, !dbg !94
  %585 = select i1 %584, float %580, float %581, !dbg !95
  %586 = extractelement <4 x float> %500, i64 3, !dbg !92
  %587 = fcmp olt float %585, %586, !dbg !92
  %588 = fcmp uno float %585, 0.000000e+00, !dbg !96
  %589 = or i1 %587, %588, !dbg !94
  %590 = select i1 %589, float %585, float %586, !dbg !95
  %591 = bitcast float %590 to i32, !dbg !97
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 4, i32 31), !dbg !97
  %593 = bitcast i32 %592 to float, !dbg !97
  %594 = fcmp olt float %590, %593, !dbg !92
  %595 = fcmp uno float %590, 0.000000e+00, !dbg !96
  %596 = or i1 %595, %594, !dbg !94
  %597 = select i1 %596, float %590, float %593, !dbg !95
  %598 = bitcast float %597 to i32, !dbg !97
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 2, i32 31), !dbg !97
  %600 = bitcast i32 %599 to float, !dbg !97
  %601 = fcmp olt float %597, %600, !dbg !92
  %602 = fcmp uno float %597, 0.000000e+00, !dbg !96
  %603 = or i1 %601, %602, !dbg !94
  %604 = select i1 %603, float %597, float %600, !dbg !95
  %605 = bitcast float %604 to i32, !dbg !97
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 1, i32 31), !dbg !97
  %607 = bitcast i32 %606 to float, !dbg !97
  %608 = fcmp olt float %604, %607, !dbg !92
  %609 = fcmp uno float %604, 0.000000e+00, !dbg !96
  %610 = or i1 %608, %609, !dbg !94
  %611 = select i1 %610, float %604, float %607, !dbg !95
  %612 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !98
  %613 = bitcast float %611 to <1 x i32>, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %613, i1 true) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %614 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %205, !dbg !98
  %615 = load float, ptr addrspace(3) %614, align 4, !dbg !98
  %616 = extractelement <8 x float> %535, i64 0, !dbg !99
  %617 = extractelement <8 x float> %535, i64 1, !dbg !99
  %618 = fcmp ogt float %616, %617, !dbg !99
  %619 = fcmp uno float %616, 0.000000e+00, !dbg !101
  %620 = or i1 %618, %619, !dbg !102
  %621 = select i1 %620, float %616, float %617, !dbg !103
  %622 = extractelement <8 x float> %535, i64 2, !dbg !99
  %623 = fcmp ogt float %621, %622, !dbg !99
  %624 = fcmp uno float %621, 0.000000e+00, !dbg !101
  %625 = or i1 %623, %624, !dbg !102
  %626 = select i1 %625, float %621, float %622, !dbg !103
  %627 = extractelement <8 x float> %535, i64 3, !dbg !99
  %628 = fcmp ogt float %626, %627, !dbg !99
  %629 = fcmp uno float %626, 0.000000e+00, !dbg !101
  %630 = or i1 %628, %629, !dbg !102
  %631 = select i1 %630, float %626, float %627, !dbg !103
  %632 = extractelement <8 x float> %535, i64 4, !dbg !99
  %633 = fcmp ogt float %631, %632, !dbg !99
  %634 = fcmp uno float %631, 0.000000e+00, !dbg !101
  %635 = or i1 %633, %634, !dbg !102
  %636 = select i1 %635, float %631, float %632, !dbg !103
  %637 = extractelement <8 x float> %535, i64 5, !dbg !99
  %638 = fcmp ogt float %636, %637, !dbg !99
  %639 = fcmp uno float %636, 0.000000e+00, !dbg !101
  %640 = or i1 %638, %639, !dbg !102
  %641 = select i1 %640, float %636, float %637, !dbg !103
  %642 = extractelement <8 x float> %535, i64 6, !dbg !99
  %643 = fcmp ogt float %641, %642, !dbg !99
  %644 = fcmp uno float %641, 0.000000e+00, !dbg !101
  %645 = or i1 %643, %644, !dbg !102
  %646 = select i1 %645, float %641, float %642, !dbg !103
  %647 = extractelement <8 x float> %535, i64 7, !dbg !99
  %648 = fcmp ogt float %646, %647, !dbg !99
  %649 = fcmp uno float %646, 0.000000e+00, !dbg !101
  %650 = or i1 %648, %649, !dbg !102
  %651 = select i1 %650, float %646, float %647, !dbg !103
  %652 = bitcast float %651 to i32, !dbg !104
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 4, i32 31), !dbg !104
  %654 = bitcast i32 %653 to float, !dbg !104
  %655 = fcmp ogt float %651, %654, !dbg !99
  %656 = fcmp uno float %651, 0.000000e+00, !dbg !101
  %657 = or i1 %656, %655, !dbg !102
  %658 = select i1 %657, float %651, float %654, !dbg !103
  %659 = bitcast float %658 to i32, !dbg !104
  %660 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %659, i32 2, i32 31), !dbg !104
  %661 = bitcast i32 %660 to float, !dbg !104
  %662 = fcmp ogt float %658, %661, !dbg !99
  %663 = fcmp uno float %658, 0.000000e+00, !dbg !101
  %664 = or i1 %662, %663, !dbg !102
  %665 = select i1 %664, float %658, float %661, !dbg !103
  %666 = bitcast float %665 to i32, !dbg !104
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 1, i32 31), !dbg !104
  %668 = bitcast i32 %667 to float, !dbg !104
  %669 = fcmp ogt float %665, %668, !dbg !99
  %670 = fcmp uno float %665, 0.000000e+00, !dbg !101
  %671 = or i1 %669, %670, !dbg !102
  %672 = select i1 %671, float %665, float %668, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %673 = bitcast float %672 to <1 x i32>, !dbg !105
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %673, i1 true) #5, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %674 = load float, ptr addrspace(3) %614, align 4, !dbg !105
  %675 = sext i32 %206 to i64, !dbg !106
  %676 = getelementptr bfloat, ptr addrspace(1) %4, i64 %675, !dbg !106
  %677 = fptrunc float %615 to bfloat, !dbg !98
  %678 = and i32 %18, 448, !dbg !98
  %679 = icmp eq i32 %678, 0, !dbg !98
  %680 = bitcast bfloat %677 to i16, !dbg !98
  %681 = and i1 %679, %207, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %676, i1 %681) #5, !dbg !98
  %682 = getelementptr bfloat, ptr addrspace(1) %5, i64 %675, !dbg !107
  %683 = fptrunc float %674 to bfloat, !dbg !105
  %684 = bitcast bfloat %683 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %684, ptr addrspace(1) %682, i1 %681) #5, !dbg !105
  %685 = getelementptr bfloat, ptr addrspace(1) %6, i64 %675, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %685, i1 %681) #5, !dbg !109
  %686 = getelementptr bfloat, ptr addrspace(1) %7, i64 %675, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %684, ptr addrspace(1) %686, i1 %681) #5, !dbg !111
  %687 = getelementptr bfloat, ptr addrspace(1) %8, i64 %675, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %687, i1 %681) #5, !dbg !113
  %688 = getelementptr bfloat, ptr addrspace(1) %9, i64 %675, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %684, ptr addrspace(1) %688, i1 %681) #5, !dbg !115
  %.inv = fcmp oge float %611, 0.000000e+00, !dbg !116
  %689 = select i1 %.inv, float 0.000000e+00, float %611, !dbg !116
  %690 = fsub float 0.000000e+00, %689, !dbg !118
  %.inv5 = fcmp ole float %672, 0.000000e+00, !dbg !119
  %691 = select i1 %.inv5, float 0.000000e+00, float %672, !dbg !119
  %692 = fcmp ogt float %690, %691, !dbg !121
  %693 = fcmp uno float %690, 0.000000e+00, !dbg !123
  %694 = or i1 %693, %692, !dbg !124
  %695 = select i1 %694, float %690, float %691, !dbg !125
  %696 = fmul float %695, 0x3F80204080000000, !dbg !126
  %697 = fcmp ogt float %696, 0x3EE4F8B580000000, !dbg !127
  %698 = fcmp uno float %696, 0.000000e+00, !dbg !129
  %699 = or i1 %697, %698, !dbg !130
  %700 = select i1 %699, float %696, float 0x3EE4F8B580000000, !dbg !131
  %701 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %700), !dbg !132
  br label %702, !dbg !133

702:                                              ; preds = %554, %702
  %indvars.iv87 = phi i64 [ 0, %554 ], [ %indvars.iv.next88, %702 ]
  %703 = trunc nuw nsw i64 %indvars.iv87 to i32, !dbg !134
  %704 = add i32 %26, %703, !dbg !134
  %705 = sext i32 %704 to i64, !dbg !135
  %706 = getelementptr bfloat, ptr addrspace(1) %3, i64 %705, !dbg !135
  %707 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %706, i1 %22) #5, !dbg !136
  %708 = extractvalue { i32, i32, i32, i32 } %707, 0, !dbg !136
  %709 = bitcast i32 %708 to <2 x bfloat>, !dbg !136
  %710 = extractvalue { i32, i32, i32, i32 } %707, 1, !dbg !136
  %711 = bitcast i32 %710 to <2 x bfloat>, !dbg !136
  %712 = extractvalue { i32, i32, i32, i32 } %707, 2, !dbg !136
  %713 = bitcast i32 %712 to <2 x bfloat>, !dbg !136
  %714 = extractvalue { i32, i32, i32, i32 } %707, 3, !dbg !136
  %715 = bitcast i32 %714 to <2 x bfloat>, !dbg !136
  %716 = extractelement <2 x bfloat> %709, i64 0, !dbg !136
  %717 = extractelement <2 x bfloat> %709, i64 1, !dbg !136
  %718 = extractelement <2 x bfloat> %711, i64 0, !dbg !136
  %719 = extractelement <2 x bfloat> %711, i64 1, !dbg !136
  %720 = extractelement <2 x bfloat> %713, i64 0, !dbg !136
  %721 = extractelement <2 x bfloat> %713, i64 1, !dbg !136
  %722 = extractelement <2 x bfloat> %715, i64 0, !dbg !136
  %723 = extractelement <2 x bfloat> %715, i64 1, !dbg !136
  %724 = fpext bfloat %716 to float, !dbg !137
  %725 = fpext bfloat %717 to float, !dbg !137
  %726 = fpext bfloat %718 to float, !dbg !137
  %727 = fpext bfloat %719 to float, !dbg !137
  %728 = fpext bfloat %720 to float, !dbg !137
  %729 = fpext bfloat %721 to float, !dbg !137
  %730 = fpext bfloat %722 to float, !dbg !137
  %731 = fpext bfloat %723 to float, !dbg !137
  %732 = fmul float %701, %724, !dbg !138
  %733 = fmul float %701, %725, !dbg !138
  %734 = fmul float %701, %726, !dbg !138
  %735 = fmul float %701, %727, !dbg !138
  %736 = fmul float %701, %728, !dbg !138
  %737 = fmul float %701, %729, !dbg !138
  %738 = fmul float %701, %730, !dbg !138
  %739 = fmul float %701, %731, !dbg !138
  %740 = tail call float @llvm.nvvm.round.f(float %732) #5, !dbg !139
  %741 = tail call float @llvm.nvvm.round.f(float %733) #5, !dbg !139
  %742 = tail call float @llvm.nvvm.round.f(float %734) #5, !dbg !139
  %743 = tail call float @llvm.nvvm.round.f(float %735) #5, !dbg !139
  %744 = tail call float @llvm.nvvm.round.f(float %736) #5, !dbg !139
  %745 = tail call float @llvm.nvvm.round.f(float %737) #5, !dbg !139
  %746 = tail call float @llvm.nvvm.round.f(float %738) #5, !dbg !139
  %747 = tail call float @llvm.nvvm.round.f(float %739) #5, !dbg !139
  %748 = insertelement <4 x float> poison, float %740, i64 0, !dbg !140
  %749 = insertelement <4 x float> %748, float %741, i64 1, !dbg !140
  %750 = insertelement <4 x float> %749, float %742, i64 2, !dbg !140
  %751 = insertelement <4 x float> %750, float %743, i64 3, !dbg !140
  %752 = fcmp ogt <4 x float> %751, splat (float -1.270000e+02), !dbg !140
  %753 = fcmp uno <4 x float> %751, zeroinitializer, !dbg !142
  %754 = or <4 x i1> %752, %753, !dbg !143
  %755 = select <4 x i1> %754, <4 x float> %751, <4 x float> splat (float -1.270000e+02), !dbg !144
  %756 = fcmp olt <4 x float> %755, splat (float 1.270000e+02), !dbg !145
  %757 = fcmp uno <4 x float> %755, zeroinitializer, !dbg !147
  %758 = or <4 x i1> %756, %757, !dbg !148
  %759 = fptosi <4 x float> %755 to <4 x i8>, !dbg !149
  %760 = select <4 x i1> %758, <4 x i8> %759, <4 x i8> splat (i8 127), !dbg !150
  %761 = insertelement <4 x float> poison, float %744, i64 0, !dbg !140
  %762 = insertelement <4 x float> %761, float %745, i64 1, !dbg !140
  %763 = insertelement <4 x float> %762, float %746, i64 2, !dbg !140
  %764 = insertelement <4 x float> %763, float %747, i64 3, !dbg !140
  %765 = fcmp ogt <4 x float> %764, splat (float -1.270000e+02), !dbg !140
  %766 = fcmp uno <4 x float> %764, zeroinitializer, !dbg !142
  %767 = or <4 x i1> %765, %766, !dbg !143
  %768 = select <4 x i1> %767, <4 x float> %764, <4 x float> splat (float -1.270000e+02), !dbg !144
  %769 = fcmp olt <4 x float> %768, splat (float 1.270000e+02), !dbg !145
  %770 = fcmp uno <4 x float> %768, zeroinitializer, !dbg !147
  %771 = or <4 x i1> %769, %770, !dbg !148
  %772 = fptosi <4 x float> %768 to <4 x i8>, !dbg !149
  %773 = select <4 x i1> %771, <4 x i8> %772, <4 x i8> splat (i8 127), !dbg !150
  %774 = getelementptr i8, ptr addrspace(1) %10, i64 %705, !dbg !151
  %775 = bitcast <4 x i8> %760 to i32, !dbg !152
  %776 = bitcast <4 x i8> %773 to i32, !dbg !152
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %775, i32 %776, ptr addrspace(1) %774, i1 %22) #5, !dbg !152
  %777 = getelementptr i8, ptr addrspace(1) %11, i64 %705, !dbg !153
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %775, i32 %776, ptr addrspace(1) %777, i1 %22) #5, !dbg !154
  %778 = getelementptr i8, ptr addrspace(1) %12, i64 %705, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %775, i32 %776, ptr addrspace(1) %778, i1 %22) #5, !dbg !156
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 64, !dbg !133
  %779 = icmp samesign ult i64 %indvars.iv87, 3008, !dbg !133
  br i1 %779, label %702, label %780, !dbg !133

780:                                              ; preds = %702
  ret void, !dbg !157
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 38, column: 34, scope: !6)
!17 = !DILocation(line: 38, column: 51, scope: !6)
!18 = !DILocation(line: 38, column: 112, scope: !6)
!19 = !DILocation(line: 44, column: 62, scope: !6)
!20 = !DILocation(line: 46, column: 66, scope: !6)
!21 = !DILocation(line: 32, column: 40, scope: !6)
!22 = !DILocation(line: 38, column: 41, scope: !6)
!23 = !DILocation(line: 208, column: 24, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 42, column: 51, scope: !6)
!27 = !DILocation(line: 209, column: 30, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 210, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 210, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 211, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 211, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 211, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 45, column: 58, scope: !6)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 69, column: 24, scope: !6)
!53 = !DILocation(line: 70, column: 32, scope: !6)
!54 = !DILocation(line: 53, column: 40, scope: !6)
!55 = !DILocation(line: 83, column: 50, scope: !6)
!56 = !DILocation(line: 71, column: 24, scope: !6)
!57 = !DILocation(line: 65, column: 24, scope: !6)
!58 = !DILocation(line: 85, column: 50, scope: !6)
!59 = !DILocation(line: 54, column: 31, scope: !6)
!60 = !DILocation(line: 59, column: 41, scope: !6)
!61 = !DILocation(line: 59, column: 34, scope: !6)
!62 = !DILocation(line: 59, column: 51, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 49, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 42, scope: !6)
!70 = !DILocation(line: 63, column: 35, scope: !6)
!71 = !DILocation(line: 63, column: 42, scope: !6)
!72 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !73)
!73 = !DILocation(line: 82, column: 47, scope: !6)
!74 = !DILocation(line: 59, column: 113, scope: !6)
!75 = !DILocation(line: 61, column: 102, scope: !6)
!76 = !DILocation(line: 63, column: 95, scope: !6)
!77 = !DILocation(line: 74, column: 24, scope: !6)
!78 = !DILocation(line: 76, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 80, column: 24, scope: !6)
!82 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !73)
!83 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !73)
!84 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !73)
!85 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !86)
!86 = !DILocation(line: 84, column: 47, scope: !6)
!87 = !DILocation(line: 86, column: 29, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !86)
!90 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !86)
!91 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !86)
!92 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !93)
!93 = !DILocation(line: 87, column: 40, scope: !6)
!94 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !93)
!95 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !93)
!96 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !93)
!97 = !DILocation(line: 110, column: 29, scope: !24, inlinedAt: !93)
!98 = !DILocation(line: 89, column: 37, scope: !6)
!99 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !100)
!100 = !DILocation(line: 88, column: 40, scope: !6)
!101 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !100)
!102 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !100)
!103 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !100)
!104 = !DILocation(line: 115, column: 29, scope: !24, inlinedAt: !100)
!105 = !DILocation(line: 90, column: 37, scope: !6)
!106 = !DILocation(line: 89, column: 25, scope: !6)
!107 = !DILocation(line: 90, column: 25, scope: !6)
!108 = !DILocation(line: 91, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 37, scope: !6)
!110 = !DILocation(line: 92, column: 25, scope: !6)
!111 = !DILocation(line: 92, column: 37, scope: !6)
!112 = !DILocation(line: 93, column: 25, scope: !6)
!113 = !DILocation(line: 93, column: 37, scope: !6)
!114 = !DILocation(line: 94, column: 25, scope: !6)
!115 = !DILocation(line: 94, column: 37, scope: !6)
!116 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !117)
!117 = !DILocation(line: 103, column: 46, scope: !6)
!118 = !DILocation(line: 104, column: 17, scope: !6)
!119 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !120)
!120 = !DILocation(line: 105, column: 46, scope: !6)
!121 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !122)
!122 = !DILocation(line: 106, column: 46, scope: !6)
!123 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !122)
!124 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !122)
!125 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !122)
!126 = !DILocation(line: 108, column: 24, scope: !6)
!127 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !128)
!128 = !DILocation(line: 111, column: 46, scope: !6)
!129 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !128)
!130 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !128)
!131 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !128)
!132 = !DILocation(line: 114, column: 25, scope: !6)
!133 = !DILocation(line: 95, column: 40, scope: !6)
!134 = !DILocation(line: 101, column: 43, scope: !6)
!135 = !DILocation(line: 101, column: 36, scope: !6)
!136 = !DILocation(line: 101, column: 53, scope: !6)
!137 = !DILocation(line: 101, column: 115, scope: !6)
!138 = !DILocation(line: 117, column: 24, scope: !6)
!139 = !DILocation(line: 118, column: 36, scope: !6)
!140 = !DILocation(line: 102, column: 15, scope: !24, inlinedAt: !141)
!141 = !DILocation(line: 121, column: 46, scope: !6)
!142 = !DILocation(line: 104, column: 21, scope: !24, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 16, scope: !24, inlinedAt: !141)
!144 = !DILocation(line: 105, column: 29, scope: !24, inlinedAt: !141)
!145 = !DILocation(line: 94, column: 15, scope: !24, inlinedAt: !146)
!146 = !DILocation(line: 123, column: 46, scope: !6)
!147 = !DILocation(line: 96, column: 21, scope: !24, inlinedAt: !146)
!148 = !DILocation(line: 96, column: 16, scope: !24, inlinedAt: !146)
!149 = !DILocation(line: 125, column: 25, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !24, inlinedAt: !146)
!151 = !DILocation(line: 126, column: 29, scope: !6)
!152 = !DILocation(line: 126, column: 53, scope: !6)
!153 = !DILocation(line: 127, column: 30, scope: !6)
!154 = !DILocation(line: 127, column: 54, scope: !6)
!155 = !DILocation(line: 128, column: 30, scope: !6)
!156 = !DILocation(line: 128, column: 54, scope: !6)
!157 = !DILocation(line: 95, column: 4, scope: !6)
