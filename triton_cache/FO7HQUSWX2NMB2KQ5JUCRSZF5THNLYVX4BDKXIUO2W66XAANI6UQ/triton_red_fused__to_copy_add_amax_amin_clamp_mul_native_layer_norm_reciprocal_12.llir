; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
__nv_rsqrtf.exit:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 512, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 1, !dbg !11
  %21 = and i32 %20, 2046, !dbg !11
  %22 = sext i32 %16 to i64, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %4, i64 %22, !dbg !12
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %26 = getelementptr bfloat, ptr addrspace(1) %5, i64 %22, !dbg !14
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %17) #5, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %26, i1 %17) #5, !dbg !15
  %29 = mul i32 %16, 3072, !dbg !16
  %30 = zext nneg i32 %21 to i64, !dbg !17
  %31 = add i32 %21, %29, !dbg !18
  %32 = sext i32 %31 to i64, !dbg !19
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 %17) #5, !dbg !20
  %35 = or disjoint i64 %30, 6144, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 true) #5, !dbg !23
  %38 = getelementptr bfloat, ptr addrspace(1) %2, i64 %35, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %38, i1 true) #5, !dbg !25
  %40 = getelementptr i32, ptr addrspace(1) %3, i64 %32, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %17) #5, !dbg !27
  %42 = getelementptr bfloat, ptr addrspace(1) %6, i64 %30, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 true) #5, !dbg !29
  %44 = getelementptr bfloat, ptr addrspace(1) %7, i64 %30, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 true) #5, !dbg !31
  %46 = extractvalue { i32, i32 } %37, 1, !dbg !23
  %47 = bitcast i32 %39 to <2 x bfloat>, !dbg !25
  %48 = bitcast i16 %25 to bfloat, !dbg !13
  %.inv = fcmp oge bfloat %48, 0xR0000, !dbg !32
  %49 = select i1 %.inv, bfloat 0xR0000, bfloat %48, !dbg !32
  %50 = fpext bfloat %49 to float, !dbg !32
  %51 = fsub float 0.000000e+00, %50, !dbg !36
  %52 = fcmp uno float %51, 0.000000e+00, !dbg !37
  %53 = bitcast i16 %28 to bfloat, !dbg !15
  %.inv3 = fcmp ole bfloat %53, 0xR0000, !dbg !39
  %54 = select i1 %.inv3, bfloat 0xR0000, bfloat %53, !dbg !39
  %55 = fpext bfloat %54 to float, !dbg !39
  %56 = fcmp ogt float %51, %55, !dbg !41
  %57 = or i1 %52, %56, !dbg !42
  %58 = select i1 %57, float %51, float %55, !dbg !43
  %59 = fmul float %58, 0x3F80204080000000, !dbg !44
  %60 = fcmp ogt float %59, 0x3EE4F8B580000000, !dbg !45
  %61 = fcmp uno float %59, 0.000000e+00, !dbg !47
  %62 = or i1 %60, %61, !dbg !48
  %63 = select i1 %62, float %59, float 0x3EE4F8B580000000, !dbg !49
  %64 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %65 = bitcast i32 %43 to <2 x bfloat>, !dbg !29
  %66 = bitcast i32 %45 to <2 x bfloat>, !dbg !31
  %67 = bitcast i32 %34 to <2 x bfloat>, !dbg !20
  %68 = extractvalue { i32, i32 } %37, 0, !dbg !23
  %69 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %70 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !50
  %71 = getelementptr bfloat, ptr addrspace(1) %8, i64 %32, !dbg !51
  %72 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %73 = insertelement <2 x i32> %72, i32 %46, i64 1, !dbg !23
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !23
  %75 = fpext <2 x bfloat> %47 to <2 x float>, !dbg !52
  %76 = fadd <2 x float> %74, %75, !dbg !53
  %77 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !54
  %78 = insertelement <2 x i32> %77, i32 %64, i64 1, !dbg !54
  %79 = sitofp <2 x i32> %78 to <2 x float>, !dbg !54
  %80 = insertelement <2 x float> poison, float %63, i64 0, !dbg !55
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !55
  %82 = fmul <2 x float> %81, %79, !dbg !55
  %83 = fpext <2 x bfloat> %65 to <2 x float>, !dbg !56
  %84 = fmul <2 x float> %82, %83, !dbg !57
  %85 = fpext <2 x bfloat> %66 to <2 x float>, !dbg !58
  %86 = fadd <2 x float> %84, %85, !dbg !59
  %87 = fmul <2 x float> %76, %86, !dbg !60
  %88 = fpext <2 x bfloat> %67 to <2 x float>, !dbg !61
  %89 = fadd <2 x float> %87, %88, !dbg !62
  %90 = extractelement <2 x float> %89, i64 0, !dbg !63
  %91 = select i1 %17, float %90, float 0.000000e+00, !dbg !63
  %92 = extractelement <2 x float> %89, i64 1, !dbg !63
  %93 = select i1 %17, float %92, float 0.000000e+00, !dbg !63
  %94 = fptrunc <2 x float> %89 to <2 x bfloat>, !dbg !64
  %95 = bitcast <2 x bfloat> %94 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %71, i1 %17) #5, !dbg !64
  %96 = or disjoint i64 %30, 2048, !dbg !65
  %97 = icmp samesign ult i64 %96, 3072, !dbg !66
  %98 = trunc nuw nsw i64 %96 to i32, !dbg !18
  %99 = add i32 %29, %98, !dbg !18
  %100 = sext i32 %99 to i64, !dbg !19
  %101 = getelementptr bfloat, ptr addrspace(1) %0, i64 %100, !dbg !19
  %102 = and i1 %17, %97, !dbg !67
  %103 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %101, i1 %102) #5, !dbg !20
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !20
  %105 = or disjoint i64 %30, 8192, !dbg !21
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !22
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %106, i1 %97) #5, !dbg !23
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !23
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !23
  %110 = getelementptr bfloat, ptr addrspace(1) %2, i64 %105, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %110, i1 %97) #5, !dbg !25
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !25
  %113 = getelementptr i32, ptr addrspace(1) %3, i64 %100, !dbg !26
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %113, i1 %102) #5, !dbg !27
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !27
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !27
  %117 = getelementptr bfloat, ptr addrspace(1) %6, i64 %96, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %117, i1 %97) #5, !dbg !29
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !29
  %120 = getelementptr bfloat, ptr addrspace(1) %7, i64 %96, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %120, i1 %97) #5, !dbg !31
  %122 = bitcast i32 %121 to <2 x bfloat>, !dbg !31
  %123 = fadd float %70, 1.000000e+00, !dbg !68
  %124 = select i1 %102, float %123, float %70, !dbg !50
  %125 = select i1 %102, float %123, float %70, !dbg !50
  %126 = getelementptr bfloat, ptr addrspace(1) %8, i64 %100, !dbg !51
  %127 = fpext <2 x bfloat> %104 to <2 x float>, !dbg !61
  %128 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !23
  %129 = insertelement <2 x i32> %128, i32 %109, i64 1, !dbg !23
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !23
  %131 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !52
  %132 = fpext <2 x bfloat> %119 to <2 x float>, !dbg !56
  %133 = fpext <2 x bfloat> %122 to <2 x float>, !dbg !58
  %134 = fadd <2 x float> %130, %131, !dbg !53
  %135 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !54
  %136 = insertelement <2 x i32> %135, i32 %116, i64 1, !dbg !54
  %137 = sitofp <2 x i32> %136 to <2 x float>, !dbg !54
  %138 = fmul <2 x float> %81, %137, !dbg !55
  %139 = fmul <2 x float> %138, %132, !dbg !57
  %140 = fadd <2 x float> %139, %133, !dbg !59
  %141 = fmul <2 x float> %134, %140, !dbg !60
  %142 = fadd <2 x float> %141, %127, !dbg !62
  %143 = extractelement <2 x float> %142, i64 0, !dbg !70
  %144 = fsub float %143, %91, !dbg !71
  %145 = tail call float @llvm.nvvm.div.full(float %144, float %123), !dbg !72
  %146 = fadd float %91, %145, !dbg !73
  %147 = fsub float %143, %146, !dbg !70
  %148 = fmul float %144, %147, !dbg !74
  %149 = fadd float %148, 0.000000e+00, !dbg !75
  %150 = extractelement <2 x float> %142, i64 1, !dbg !70
  %151 = fsub float %150, %93, !dbg !71
  %152 = tail call float @llvm.nvvm.div.full(float %151, float %123), !dbg !72
  %153 = fadd float %93, %152, !dbg !73
  %154 = fsub float %150, %153, !dbg !70
  %155 = fmul float %151, %154, !dbg !74
  %156 = fadd float %155, 0.000000e+00, !dbg !75
  %157 = select i1 %102, float %146, float %91, !dbg !63
  %158 = select i1 %102, float %153, float %93, !dbg !63
  %159 = fptrunc <2 x float> %142 to <2 x bfloat>, !dbg !64
  %160 = bitcast <2 x bfloat> %159 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %126, i1 %102) #5, !dbg !64
  %161 = lshr i32 %18, 5, !dbg !11
  %162 = fsub float %158, %157, !dbg !76
  %163 = fadd float %124, %125, !dbg !79
  %164 = fcmp oeq float %163, 0.000000e+00, !dbg !80
  %165 = tail call float @llvm.nvvm.div.full(float %125, float %163), !dbg !81
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !82
  %167 = fmul float %162, %166, !dbg !83
  %168 = fadd float %157, %167, !dbg !84
  %169 = fadd float %149, %156, !dbg !85
  %170 = select i1 %102, float %169, float 0.000000e+00, !dbg !85
  %171 = fmul float %162, %162, !dbg !86
  %172 = fmul float %171, %124, !dbg !87
  %173 = fmul float %172, %166, !dbg !88
  %174 = fadd float %170, %173, !dbg !89
  %175 = bitcast float %168 to i32, !dbg !90
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 16, i32 31), !dbg !90
  %177 = bitcast i32 %176 to float, !dbg !90
  %178 = bitcast float %174 to i32, !dbg !90
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !90
  %180 = bitcast i32 %179 to float, !dbg !90
  %181 = bitcast float %163 to i32, !dbg !90
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !90
  %183 = bitcast i32 %182 to float, !dbg !90
  %184 = fsub float %177, %168, !dbg !76
  %185 = fadd float %163, %183, !dbg !79
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !80
  %187 = tail call float @llvm.nvvm.div.full(float %183, float %185), !dbg !81
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !82
  %189 = fmul float %184, %188, !dbg !83
  %190 = fadd float %168, %189, !dbg !84
  %191 = fadd float %174, %180, !dbg !85
  %192 = fmul float %184, %184, !dbg !86
  %193 = fmul float %163, %192, !dbg !87
  %194 = fmul float %193, %188, !dbg !88
  %195 = fadd float %191, %194, !dbg !89
  %196 = bitcast float %190 to i32, !dbg !90
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !90
  %198 = bitcast i32 %197 to float, !dbg !90
  %199 = bitcast float %195 to i32, !dbg !90
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !90
  %201 = bitcast i32 %200 to float, !dbg !90
  %202 = bitcast float %185 to i32, !dbg !90
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !90
  %204 = bitcast i32 %203 to float, !dbg !90
  %205 = fsub float %198, %190, !dbg !76
  %206 = fadd float %185, %204, !dbg !79
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !80
  %208 = tail call float @llvm.nvvm.div.full(float %204, float %206), !dbg !81
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !82
  %210 = fmul float %205, %209, !dbg !83
  %211 = fadd float %190, %210, !dbg !84
  %212 = fadd float %195, %201, !dbg !85
  %213 = fmul float %205, %205, !dbg !86
  %214 = fmul float %185, %213, !dbg !87
  %215 = fmul float %209, %214, !dbg !88
  %216 = fadd float %212, %215, !dbg !89
  %217 = bitcast float %211 to i32, !dbg !90
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !90
  %219 = bitcast i32 %218 to float, !dbg !90
  %220 = bitcast float %216 to i32, !dbg !90
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !90
  %222 = bitcast i32 %221 to float, !dbg !90
  %223 = bitcast float %206 to i32, !dbg !90
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !90
  %225 = bitcast i32 %224 to float, !dbg !90
  %226 = fsub float %219, %211, !dbg !76
  %227 = fadd float %206, %225, !dbg !79
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !80
  %229 = tail call float @llvm.nvvm.div.full(float %225, float %227), !dbg !81
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !82
  %231 = fmul float %226, %230, !dbg !83
  %232 = fadd float %211, %231, !dbg !84
  %233 = fadd float %216, %222, !dbg !85
  %234 = fmul float %226, %226, !dbg !86
  %235 = fmul float %206, %234, !dbg !87
  %236 = fmul float %230, %235, !dbg !88
  %237 = fadd float %233, %236, !dbg !89
  %238 = bitcast float %232 to i32, !dbg !90
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !90
  %240 = bitcast i32 %239 to float, !dbg !90
  %241 = bitcast float %237 to i32, !dbg !90
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !90
  %243 = bitcast i32 %242 to float, !dbg !90
  %244 = bitcast float %227 to i32, !dbg !90
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 2, i32 31), !dbg !90
  %246 = bitcast i32 %245 to float, !dbg !90
  %247 = fsub float %240, %232, !dbg !76
  %248 = fadd float %227, %246, !dbg !79
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !80
  %250 = tail call float @llvm.nvvm.div.full(float %246, float %248), !dbg !81
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !82
  %252 = fmul float %247, %251, !dbg !83
  %253 = fadd float %232, %252, !dbg !84
  %254 = fadd float %237, %243, !dbg !85
  %255 = fmul float %247, %247, !dbg !86
  %256 = fmul float %227, %255, !dbg !87
  %257 = fmul float %251, %256, !dbg !88
  %258 = fadd float %254, %257, !dbg !89
  %259 = bitcast float %253 to i32, !dbg !90
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !90
  %261 = bitcast i32 %260 to float, !dbg !90
  %262 = bitcast float %258 to i32, !dbg !90
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !90
  %264 = bitcast i32 %263 to float, !dbg !90
  %265 = bitcast float %248 to i32, !dbg !90
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !90
  %267 = bitcast i32 %266 to float, !dbg !90
  %268 = fsub float %261, %253, !dbg !76
  %269 = fadd float %248, %267, !dbg !79
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !80
  %271 = tail call float @llvm.nvvm.div.full(float %267, float %269), !dbg !81
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !82
  %273 = fmul float %268, %272, !dbg !83
  %274 = fadd float %253, %273, !dbg !84
  %275 = fadd float %258, %264, !dbg !85
  %276 = fmul float %268, %268, !dbg !86
  %277 = fmul float %248, %276, !dbg !87
  %278 = fmul float %272, %277, !dbg !88
  %279 = fadd float %275, %278, !dbg !89
  %280 = and i32 %161, 31, !dbg !90
  %281 = icmp eq i32 %19, 0, !dbg !90
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !90
  %283 = bitcast float %274 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 %281) #5, !dbg !90
  %284 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %280, !dbg !90
  %285 = bitcast float %279 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 %281) #5, !dbg !90
  %286 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %280, !dbg !90
  %287 = bitcast float %269 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 %281) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %288 = icmp slt i32 %18, 32, !dbg !90
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !90
  %290 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !90
  %291 = bitcast i32 %290 to float, !dbg !90
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !90
  %293 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %292, i1 %288) #5, !dbg !90
  %294 = bitcast i32 %293 to float, !dbg !90
  %295 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %18, !dbg !90
  %296 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %288) #5, !dbg !90
  %297 = bitcast i32 %296 to float, !dbg !90
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 16, i32 31), !dbg !90
  %299 = bitcast i32 %298 to float, !dbg !90
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 16, i32 31), !dbg !90
  %301 = bitcast i32 %300 to float, !dbg !90
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 16, i32 31), !dbg !90
  %303 = bitcast i32 %302 to float, !dbg !90
  %304 = fsub float %299, %291, !dbg !76
  %305 = fadd float %297, %303, !dbg !79
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !80
  %307 = tail call float @llvm.nvvm.div.full(float %303, float %305), !dbg !81
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !82
  %309 = fmul float %304, %308, !dbg !83
  %310 = fadd float %309, %291, !dbg !84
  %311 = fadd float %294, %301, !dbg !85
  %312 = fmul float %304, %304, !dbg !86
  %313 = fmul float %312, %297, !dbg !87
  %314 = fmul float %313, %308, !dbg !88
  %315 = fadd float %311, %314, !dbg !89
  %316 = bitcast float %310 to i32, !dbg !90
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 8, i32 31), !dbg !90
  %318 = bitcast i32 %317 to float, !dbg !90
  %319 = bitcast float %315 to i32, !dbg !90
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 8, i32 31), !dbg !90
  %321 = bitcast i32 %320 to float, !dbg !90
  %322 = bitcast float %305 to i32, !dbg !90
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 8, i32 31), !dbg !90
  %324 = bitcast i32 %323 to float, !dbg !90
  %325 = fsub float %318, %310, !dbg !76
  %326 = fadd float %305, %324, !dbg !79
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !80
  %328 = tail call float @llvm.nvvm.div.full(float %324, float %326), !dbg !81
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !82
  %330 = fmul float %325, %329, !dbg !83
  %331 = fadd float %310, %330, !dbg !84
  %332 = fadd float %315, %321, !dbg !85
  %333 = fmul float %325, %325, !dbg !86
  %334 = fmul float %305, %333, !dbg !87
  %335 = fmul float %329, %334, !dbg !88
  %336 = fadd float %332, %335, !dbg !89
  %337 = bitcast float %331 to i32, !dbg !90
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 4, i32 31), !dbg !90
  %339 = bitcast i32 %338 to float, !dbg !90
  %340 = bitcast float %336 to i32, !dbg !90
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 4, i32 31), !dbg !90
  %342 = bitcast i32 %341 to float, !dbg !90
  %343 = bitcast float %326 to i32, !dbg !90
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 4, i32 31), !dbg !90
  %345 = bitcast i32 %344 to float, !dbg !90
  %346 = fsub float %339, %331, !dbg !76
  %347 = fadd float %326, %345, !dbg !79
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !80
  %349 = tail call float @llvm.nvvm.div.full(float %345, float %347), !dbg !81
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !82
  %351 = fmul float %346, %350, !dbg !83
  %352 = fadd float %331, %351, !dbg !84
  %353 = fadd float %336, %342, !dbg !85
  %354 = fmul float %346, %346, !dbg !86
  %355 = fmul float %326, %354, !dbg !87
  %356 = fmul float %350, %355, !dbg !88
  %357 = fadd float %353, %356, !dbg !89
  %358 = bitcast float %352 to i32, !dbg !90
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !90
  %360 = bitcast i32 %359 to float, !dbg !90
  %361 = bitcast float %357 to i32, !dbg !90
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 2, i32 31), !dbg !90
  %363 = bitcast i32 %362 to float, !dbg !90
  %364 = bitcast float %347 to i32, !dbg !90
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !90
  %366 = bitcast i32 %365 to float, !dbg !90
  %367 = fsub float %360, %352, !dbg !76
  %368 = fadd float %347, %366, !dbg !79
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !80
  %370 = tail call float @llvm.nvvm.div.full(float %366, float %368), !dbg !81
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !82
  %372 = fmul float %367, %371, !dbg !83
  %373 = fadd float %352, %372, !dbg !84
  %374 = fadd float %357, %363, !dbg !85
  %375 = fmul float %367, %367, !dbg !86
  %376 = fmul float %347, %375, !dbg !87
  %377 = fmul float %371, %376, !dbg !88
  %378 = fadd float %374, %377, !dbg !89
  %379 = bitcast float %373 to i32, !dbg !90
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !90
  %381 = bitcast i32 %380 to float, !dbg !90
  %382 = bitcast float %378 to i32, !dbg !90
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 1, i32 31), !dbg !90
  %384 = bitcast i32 %383 to float, !dbg !90
  %385 = bitcast float %368 to i32, !dbg !90
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 1, i32 31), !dbg !90
  %387 = bitcast i32 %386 to float, !dbg !90
  %388 = fsub float %381, %373, !dbg !76
  %389 = fadd float %368, %387, !dbg !79
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !80
  %391 = tail call float @llvm.nvvm.div.full(float %387, float %389), !dbg !81
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !82
  %393 = fmul float %388, %392, !dbg !83
  %394 = fadd float %373, %393, !dbg !84
  %395 = fadd float %378, %384, !dbg !85
  %396 = fmul float %388, %388, !dbg !86
  %397 = fmul float %368, %396, !dbg !87
  %398 = fmul float %392, %397, !dbg !88
  %399 = fadd float %395, %398, !dbg !89
  %400 = and i1 %288, %281, !dbg !90
  %401 = bitcast float %394 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %401, i1 %400) #5, !dbg !90
  %402 = bitcast float %399 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %402, i1 %400) #5, !dbg !90
  %403 = bitcast float %389 to <1 x i32>, !dbg !90
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %403, i1 %400) #5, !dbg !90
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %404 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !90
  %405 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !90
  %406 = tail call float @llvm.nvvm.div.full(float %405, float 3.072000e+03), !dbg !91
  %407 = fadd float %406, 0x3EB0C6F7A0000000, !dbg !92
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !93
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !93
  %.not.i9 = icmp eq i32 %409, 0, !dbg !93
  br i1 %.not.i9, label %412, label %410, !dbg !93

410:                                              ; preds = %__nv_rsqrtf.exit
  %411 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %407), !dbg !93
  br label %__nv_rsqrtf.exit11, !dbg !93

412:                                              ; preds = %__nv_rsqrtf.exit
  %413 = tail call float @llvm.nvvm.rsqrt.approx.f(float %407), !dbg !93
  br label %__nv_rsqrtf.exit11, !dbg !93

__nv_rsqrtf.exit11:                               ; preds = %410, %412
  %.0.i10 = phi float [ %411, %410 ], [ %413, %412 ], !dbg !93
  %414 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %71, i1 %17) #5, !dbg !94
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !94
  %416 = or disjoint i64 %30, 12288, !dbg !95
  %417 = getelementptr float, ptr addrspace(1) %1, i64 %416, !dbg !96
  %418 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %417, i1 true) #5, !dbg !97
  %419 = extractvalue { i32, i32 } %418, 0, !dbg !97
  %420 = extractvalue { i32, i32 } %418, 1, !dbg !97
  %421 = getelementptr bfloat, ptr addrspace(1) %2, i64 %416, !dbg !98
  %422 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %421, i1 true) #5, !dbg !99
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !99
  %424 = add nuw nsw i64 %30, 9216, !dbg !100
  %425 = getelementptr float, ptr addrspace(1) %1, i64 %424, !dbg !101
  %426 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %425, i1 true) #5, !dbg !102
  %427 = extractvalue { i32, i32 } %426, 0, !dbg !102
  %428 = extractvalue { i32, i32 } %426, 1, !dbg !102
  %429 = getelementptr bfloat, ptr addrspace(1) %2, i64 %424, !dbg !103
  %430 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %429, i1 true) #5, !dbg !104
  %431 = bitcast i32 %430 to <2 x bfloat>, !dbg !104
  %432 = getelementptr bfloat, ptr addrspace(1) %9, i64 %32, !dbg !105
  %433 = fpext <2 x bfloat> %415 to <2 x float>, !dbg !106
  %434 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !97
  %435 = insertelement <2 x i32> %434, i32 %420, i64 1, !dbg !97
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !97
  %437 = fpext <2 x bfloat> %423 to <2 x float>, !dbg !107
  %438 = insertelement <2 x i32> poison, i32 %427, i64 0, !dbg !102
  %439 = insertelement <2 x i32> %438, i32 %428, i64 1, !dbg !102
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !102
  %441 = fpext <2 x bfloat> %431 to <2 x float>, !dbg !108
  %442 = insertelement <2 x float> poison, float %404, i64 0, !dbg !109
  %443 = shufflevector <2 x float> %442, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !109
  %444 = fsub <2 x float> %433, %443, !dbg !109
  %445 = insertelement <2 x float> poison, float %.0.i10, i64 0, !dbg !110
  %446 = shufflevector <2 x float> %445, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !110
  %447 = fmul <2 x float> %446, %444, !dbg !110
  %448 = fadd <2 x float> %436, %437, !dbg !111
  %449 = fadd <2 x float> %448, splat (float 1.000000e+00), !dbg !112
  %450 = fmul <2 x float> %447, %449, !dbg !113
  %451 = fadd <2 x float> %440, %441, !dbg !114
  %452 = fadd <2 x float> %450, %451, !dbg !115
  %453 = extractelement <2 x float> %452, i64 0, !dbg !116
  %454 = select i1 %17, float %453, float 0x7FF0000000000000, !dbg !117
  %455 = extractelement <2 x float> %452, i64 1, !dbg !116
  %456 = select i1 %17, float %455, float 0x7FF0000000000000, !dbg !117
  %457 = select i1 %17, float %453, float 0xFFF0000000000000, !dbg !116
  %458 = select i1 %17, float %455, float 0xFFF0000000000000, !dbg !116
  %459 = fptrunc <2 x float> %452 to <2 x bfloat>, !dbg !118
  %460 = bitcast <2 x bfloat> %459 to i32, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %432, i1 %17) #5, !dbg !118
  %461 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %126, i1 %102) #5, !dbg !94
  %462 = bitcast i32 %461 to <2 x bfloat>, !dbg !94
  %463 = or disjoint i64 %30, 14336, !dbg !95
  %464 = getelementptr float, ptr addrspace(1) %1, i64 %463, !dbg !96
  %465 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %464, i1 %97) #5, !dbg !97
  %466 = extractvalue { i32, i32 } %465, 0, !dbg !97
  %467 = extractvalue { i32, i32 } %465, 1, !dbg !97
  %468 = getelementptr bfloat, ptr addrspace(1) %2, i64 %463, !dbg !98
  %469 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %468, i1 %97) #5, !dbg !99
  %470 = bitcast i32 %469 to <2 x bfloat>, !dbg !99
  %471 = add nuw nsw i64 %30, 11264, !dbg !100
  %472 = getelementptr float, ptr addrspace(1) %1, i64 %471, !dbg !101
  %473 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %472, i1 %97) #5, !dbg !102
  %474 = extractvalue { i32, i32 } %473, 0, !dbg !102
  %475 = extractvalue { i32, i32 } %473, 1, !dbg !102
  %476 = getelementptr bfloat, ptr addrspace(1) %2, i64 %471, !dbg !103
  %477 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %476, i1 %97) #5, !dbg !104
  %478 = bitcast i32 %477 to <2 x bfloat>, !dbg !104
  %479 = fcmp uno float %454, 0.000000e+00, !dbg !119
  %480 = fcmp uno float %456, 0.000000e+00, !dbg !119
  %481 = fcmp uno float %457, 0.000000e+00, !dbg !121
  %482 = fcmp uno float %458, 0.000000e+00, !dbg !121
  %483 = getelementptr bfloat, ptr addrspace(1) %9, i64 %100, !dbg !105
  %484 = fpext <2 x bfloat> %462 to <2 x float>, !dbg !106
  %485 = insertelement <2 x i32> poison, i32 %466, i64 0, !dbg !97
  %486 = insertelement <2 x i32> %485, i32 %467, i64 1, !dbg !97
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !97
  %488 = fpext <2 x bfloat> %470 to <2 x float>, !dbg !107
  %489 = insertelement <2 x i32> poison, i32 %474, i64 0, !dbg !102
  %490 = insertelement <2 x i32> %489, i32 %475, i64 1, !dbg !102
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !102
  %492 = fpext <2 x bfloat> %478 to <2 x float>, !dbg !108
  %493 = fsub <2 x float> %484, %443, !dbg !109
  %494 = fmul <2 x float> %446, %493, !dbg !110
  %495 = fadd <2 x float> %487, %488, !dbg !111
  %496 = fadd <2 x float> %495, splat (float 1.000000e+00), !dbg !112
  %497 = fmul <2 x float> %494, %496, !dbg !113
  %498 = fadd <2 x float> %491, %492, !dbg !114
  %499 = fadd <2 x float> %497, %498, !dbg !115
  %500 = extractelement <2 x float> %499, i64 0, !dbg !123
  %501 = fcmp olt float %454, %500, !dbg !124
  %502 = extractelement <2 x float> %499, i64 1, !dbg !123
  %503 = fcmp olt float %456, %502, !dbg !124
  %504 = or i1 %479, %501, !dbg !125
  %505 = or i1 %480, %503, !dbg !125
  %506 = select i1 %504, float %454, float %500, !dbg !126
  %507 = select i1 %505, float %456, float %502, !dbg !126
  %508 = select i1 %102, float %506, float %454, !dbg !117
  %509 = select i1 %102, float %507, float %456, !dbg !117
  %510 = fcmp ogt float %457, %500, !dbg !127
  %511 = fcmp ogt float %458, %502, !dbg !127
  %512 = or i1 %481, %510, !dbg !128
  %513 = or i1 %482, %511, !dbg !128
  %514 = select i1 %512, float %457, float %500, !dbg !123
  %515 = select i1 %513, float %458, float %502, !dbg !123
  %516 = select i1 %102, float %514, float %457, !dbg !116
  %517 = select i1 %102, float %515, float %458, !dbg !116
  %518 = fptrunc <2 x float> %499 to <2 x bfloat>, !dbg !118
  %519 = bitcast <2 x bfloat> %518 to i32, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %519, ptr addrspace(1) %483, i1 %102) #5, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %520 = fcmp olt float %508, %509, !dbg !131
  %521 = fcmp uno float %508, 0.000000e+00, !dbg !132
  %522 = or i1 %520, %521, !dbg !133
  %523 = select i1 %522, float %508, float %509, !dbg !134
  %524 = bitcast float %523 to i32, !dbg !129
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 16, i32 31), !dbg !129
  %526 = bitcast i32 %525 to float, !dbg !129
  %527 = fcmp olt float %523, %526, !dbg !131
  %528 = fcmp uno float %523, 0.000000e+00, !dbg !132
  %529 = or i1 %528, %527, !dbg !133
  %530 = select i1 %529, float %523, float %526, !dbg !134
  %531 = bitcast float %530 to i32, !dbg !129
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 8, i32 31), !dbg !129
  %533 = bitcast i32 %532 to float, !dbg !129
  %534 = fcmp olt float %530, %533, !dbg !131
  %535 = fcmp uno float %530, 0.000000e+00, !dbg !132
  %536 = or i1 %534, %535, !dbg !133
  %537 = select i1 %536, float %530, float %533, !dbg !134
  %538 = bitcast float %537 to i32, !dbg !129
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 4, i32 31), !dbg !129
  %540 = bitcast i32 %539 to float, !dbg !129
  %541 = fcmp olt float %537, %540, !dbg !131
  %542 = fcmp uno float %537, 0.000000e+00, !dbg !132
  %543 = or i1 %541, %542, !dbg !133
  %544 = select i1 %543, float %537, float %540, !dbg !134
  %545 = bitcast float %544 to i32, !dbg !129
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 2, i32 31), !dbg !129
  %547 = bitcast i32 %546 to float, !dbg !129
  %548 = fcmp olt float %544, %547, !dbg !131
  %549 = fcmp uno float %544, 0.000000e+00, !dbg !132
  %550 = or i1 %548, %549, !dbg !133
  %551 = select i1 %550, float %544, float %547, !dbg !134
  %552 = bitcast float %551 to i32, !dbg !129
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 1, i32 31), !dbg !129
  %554 = bitcast i32 %553 to float, !dbg !129
  %555 = fcmp olt float %551, %554, !dbg !131
  %556 = fcmp uno float %551, 0.000000e+00, !dbg !132
  %557 = or i1 %555, %556, !dbg !133
  %558 = select i1 %557, i32 %552, i32 %553, !dbg !134
  %559 = insertelement <1 x i32> poison, i32 %558, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %559, i1 %281) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %560 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !129
  %561 = bitcast i32 %560 to float, !dbg !129
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 16, i32 31), !dbg !129
  %563 = bitcast i32 %562 to float, !dbg !129
  %564 = fcmp olt float %561, %563, !dbg !131
  %565 = fcmp uno float %561, 0.000000e+00, !dbg !132
  %566 = or i1 %565, %564, !dbg !133
  %567 = select i1 %566, float %561, float %563, !dbg !134
  %568 = bitcast float %567 to i32, !dbg !129
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 8, i32 31), !dbg !129
  %570 = bitcast i32 %569 to float, !dbg !129
  %571 = fcmp olt float %567, %570, !dbg !131
  %572 = fcmp uno float %567, 0.000000e+00, !dbg !132
  %573 = or i1 %571, %572, !dbg !133
  %574 = select i1 %573, float %567, float %570, !dbg !134
  %575 = bitcast float %574 to i32, !dbg !129
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 4, i32 31), !dbg !129
  %577 = bitcast i32 %576 to float, !dbg !129
  %578 = fcmp olt float %574, %577, !dbg !131
  %579 = fcmp uno float %574, 0.000000e+00, !dbg !132
  %580 = or i1 %578, %579, !dbg !133
  %581 = select i1 %580, float %574, float %577, !dbg !134
  %582 = bitcast float %581 to i32, !dbg !129
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 2, i32 31), !dbg !129
  %584 = bitcast i32 %583 to float, !dbg !129
  %585 = fcmp olt float %581, %584, !dbg !131
  %586 = fcmp uno float %581, 0.000000e+00, !dbg !132
  %587 = or i1 %585, %586, !dbg !133
  %588 = select i1 %587, float %581, float %584, !dbg !134
  %589 = bitcast float %588 to i32, !dbg !129
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 1, i32 31), !dbg !129
  %591 = bitcast i32 %590 to float, !dbg !129
  %592 = fcmp olt float %588, %591, !dbg !131
  %593 = fcmp uno float %588, 0.000000e+00, !dbg !132
  %594 = or i1 %592, %593, !dbg !133
  %595 = select i1 %594, i32 %589, i32 %590, !dbg !134
  %596 = insertelement <1 x i32> poison, i32 %595, i64 0, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %596, i1 %400) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %597 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %598 = fcmp ogt float %516, %517, !dbg !137
  %599 = fcmp uno float %516, 0.000000e+00, !dbg !138
  %600 = or i1 %598, %599, !dbg !139
  %601 = select i1 %600, float %516, float %517, !dbg !140
  %602 = bitcast float %601 to i32, !dbg !135
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 16, i32 31), !dbg !135
  %604 = bitcast i32 %603 to float, !dbg !135
  %605 = fcmp ogt float %601, %604, !dbg !137
  %606 = fcmp uno float %601, 0.000000e+00, !dbg !138
  %607 = or i1 %606, %605, !dbg !139
  %608 = select i1 %607, float %601, float %604, !dbg !140
  %609 = bitcast float %608 to i32, !dbg !135
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 8, i32 31), !dbg !135
  %611 = bitcast i32 %610 to float, !dbg !135
  %612 = fcmp ogt float %608, %611, !dbg !137
  %613 = fcmp uno float %608, 0.000000e+00, !dbg !138
  %614 = or i1 %612, %613, !dbg !139
  %615 = select i1 %614, float %608, float %611, !dbg !140
  %616 = bitcast float %615 to i32, !dbg !135
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 4, i32 31), !dbg !135
  %618 = bitcast i32 %617 to float, !dbg !135
  %619 = fcmp ogt float %615, %618, !dbg !137
  %620 = fcmp uno float %615, 0.000000e+00, !dbg !138
  %621 = or i1 %619, %620, !dbg !139
  %622 = select i1 %621, float %615, float %618, !dbg !140
  %623 = bitcast float %622 to i32, !dbg !135
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 2, i32 31), !dbg !135
  %625 = bitcast i32 %624 to float, !dbg !135
  %626 = fcmp ogt float %622, %625, !dbg !137
  %627 = fcmp uno float %622, 0.000000e+00, !dbg !138
  %628 = or i1 %626, %627, !dbg !139
  %629 = select i1 %628, float %622, float %625, !dbg !140
  %630 = bitcast float %629 to i32, !dbg !135
  %631 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %630, i32 1, i32 31), !dbg !135
  %632 = bitcast i32 %631 to float, !dbg !135
  %633 = fcmp ogt float %629, %632, !dbg !137
  %634 = fcmp uno float %629, 0.000000e+00, !dbg !138
  %635 = or i1 %633, %634, !dbg !139
  %636 = select i1 %635, i32 %630, i32 %631, !dbg !140
  %637 = insertelement <1 x i32> poison, i32 %636, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %637, i1 %281) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %638 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %288) #5, !dbg !135
  %639 = bitcast i32 %638 to float, !dbg !135
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 16, i32 31), !dbg !135
  %641 = bitcast i32 %640 to float, !dbg !135
  %642 = fcmp ogt float %639, %641, !dbg !137
  %643 = fcmp uno float %639, 0.000000e+00, !dbg !138
  %644 = or i1 %643, %642, !dbg !139
  %645 = select i1 %644, float %639, float %641, !dbg !140
  %646 = bitcast float %645 to i32, !dbg !135
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 8, i32 31), !dbg !135
  %648 = bitcast i32 %647 to float, !dbg !135
  %649 = fcmp ogt float %645, %648, !dbg !137
  %650 = fcmp uno float %645, 0.000000e+00, !dbg !138
  %651 = or i1 %649, %650, !dbg !139
  %652 = select i1 %651, float %645, float %648, !dbg !140
  %653 = bitcast float %652 to i32, !dbg !135
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 4, i32 31), !dbg !135
  %655 = bitcast i32 %654 to float, !dbg !135
  %656 = fcmp ogt float %652, %655, !dbg !137
  %657 = fcmp uno float %652, 0.000000e+00, !dbg !138
  %658 = or i1 %656, %657, !dbg !139
  %659 = select i1 %658, float %652, float %655, !dbg !140
  %660 = bitcast float %659 to i32, !dbg !135
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 2, i32 31), !dbg !135
  %662 = bitcast i32 %661 to float, !dbg !135
  %663 = fcmp ogt float %659, %662, !dbg !137
  %664 = fcmp uno float %659, 0.000000e+00, !dbg !138
  %665 = or i1 %663, %664, !dbg !139
  %666 = select i1 %665, float %659, float %662, !dbg !140
  %667 = bitcast float %666 to i32, !dbg !135
  %668 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %667, i32 1, i32 31), !dbg !135
  %669 = bitcast i32 %668 to float, !dbg !135
  %670 = fcmp ogt float %666, %669, !dbg !137
  %671 = fcmp uno float %666, 0.000000e+00, !dbg !138
  %672 = or i1 %670, %671, !dbg !139
  %673 = select i1 %672, i32 %667, i32 %668, !dbg !140
  %674 = insertelement <1 x i32> poison, i32 %673, i64 0, !dbg !135
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %674, i1 %400) #5, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !135
  %675 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !135
  %676 = getelementptr bfloat, ptr addrspace(1) %10, i64 %22, !dbg !141
  %677 = fptrunc float %597 to bfloat, !dbg !142
  %678 = and i32 %18, 1023, !dbg !142
  %679 = icmp eq i32 %678, 0, !dbg !142
  %680 = bitcast bfloat %677 to i16, !dbg !142
  %681 = and i1 %17, %679, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %680, ptr addrspace(1) %676, i1 %681) #5, !dbg !142
  %682 = getelementptr bfloat, ptr addrspace(1) %11, i64 %22, !dbg !143
  %683 = fptrunc float %675 to bfloat, !dbg !144
  %684 = bitcast bfloat %683 to i16, !dbg !144
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %684, ptr addrspace(1) %682, i1 %681) #5, !dbg !144
  %.inv4 = fcmp oge float %597, 0.000000e+00, !dbg !145
  %685 = select i1 %.inv4, float 0.000000e+00, float %597, !dbg !145
  %686 = fsub float 0.000000e+00, %685, !dbg !147
  %.inv5 = fcmp ole float %675, 0.000000e+00, !dbg !148
  %687 = select i1 %.inv5, float 0.000000e+00, float %675, !dbg !148
  %688 = fcmp ogt float %686, %687, !dbg !150
  %689 = fcmp uno float %686, 0.000000e+00, !dbg !152
  %690 = or i1 %689, %688, !dbg !153
  %691 = select i1 %690, float %686, float %687, !dbg !154
  %692 = fmul float %691, 0x3F80204080000000, !dbg !155
  %693 = fcmp ogt float %692, 0x3EE4F8B580000000, !dbg !156
  %694 = fcmp uno float %692, 0.000000e+00, !dbg !158
  %695 = or i1 %693, %694, !dbg !159
  %696 = select i1 %695, float %692, float 0x3EE4F8B580000000, !dbg !160
  %697 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %696), !dbg !161
  %698 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %432, i1 %17) #5, !dbg !162
  %699 = bitcast i32 %698 to <2 x bfloat>, !dbg !162
  %700 = extractelement <2 x bfloat> %699, i64 0, !dbg !162
  %701 = extractelement <2 x bfloat> %699, i64 1, !dbg !162
  %702 = fpext bfloat %700 to float, !dbg !163
  %703 = fpext bfloat %701 to float, !dbg !163
  %704 = fmul float %697, %702, !dbg !164
  %705 = fmul float %697, %703, !dbg !164
  %706 = tail call float @llvm.nvvm.round.f(float %704) #5, !dbg !165
  %707 = tail call float @llvm.nvvm.round.f(float %705) #5, !dbg !165
  %708 = insertelement <2 x float> poison, float %706, i64 0, !dbg !166
  %709 = insertelement <2 x float> %708, float %707, i64 1, !dbg !166
  %710 = fcmp ogt <2 x float> %709, splat (float -1.270000e+02), !dbg !166
  %711 = fcmp uno <2 x float> %709, zeroinitializer, !dbg !168
  %712 = or <2 x i1> %710, %711, !dbg !169
  %713 = select <2 x i1> %712, <2 x float> %709, <2 x float> splat (float -1.270000e+02), !dbg !170
  %714 = fcmp olt <2 x float> %713, splat (float 1.270000e+02), !dbg !171
  %715 = fcmp uno <2 x float> %713, zeroinitializer, !dbg !173
  %716 = or <2 x i1> %714, %715, !dbg !174
  %717 = fptosi <2 x float> %713 to <2 x i8>, !dbg !175
  %718 = select <2 x i1> %716, <2 x i8> %717, <2 x i8> splat (i8 127), !dbg !176
  %719 = getelementptr i8, ptr addrspace(1) %12, i64 %32, !dbg !177
  %720 = bitcast <2 x i8> %718 to i16, !dbg !178
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %720, ptr addrspace(1) %719, i1 %17) #5, !dbg !178
  %721 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %483, i1 %102) #5, !dbg !162
  %722 = bitcast i32 %721 to <2 x bfloat>, !dbg !162
  %723 = extractelement <2 x bfloat> %722, i64 0, !dbg !162
  %724 = extractelement <2 x bfloat> %722, i64 1, !dbg !162
  %725 = fpext bfloat %723 to float, !dbg !163
  %726 = fpext bfloat %724 to float, !dbg !163
  %727 = fmul float %697, %725, !dbg !164
  %728 = fmul float %697, %726, !dbg !164
  %729 = tail call float @llvm.nvvm.round.f(float %727) #5, !dbg !165
  %730 = tail call float @llvm.nvvm.round.f(float %728) #5, !dbg !165
  %731 = insertelement <2 x float> poison, float %729, i64 0, !dbg !166
  %732 = insertelement <2 x float> %731, float %730, i64 1, !dbg !166
  %733 = fcmp ogt <2 x float> %732, splat (float -1.270000e+02), !dbg !166
  %734 = fcmp uno <2 x float> %732, zeroinitializer, !dbg !168
  %735 = or <2 x i1> %733, %734, !dbg !169
  %736 = select <2 x i1> %735, <2 x float> %732, <2 x float> splat (float -1.270000e+02), !dbg !170
  %737 = fcmp olt <2 x float> %736, splat (float 1.270000e+02), !dbg !171
  %738 = fcmp uno <2 x float> %736, zeroinitializer, !dbg !173
  %739 = or <2 x i1> %737, %738, !dbg !174
  %740 = fptosi <2 x float> %736 to <2 x i8>, !dbg !175
  %741 = select <2 x i1> %739, <2 x i8> %740, <2 x i8> splat (i8 127), !dbg !176
  %742 = getelementptr i8, ptr addrspace(1) %12, i64 %100, !dbg !177
  %743 = bitcast <2 x i8> %741 to i16, !dbg !178
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %743, ptr addrspace(1) %742, i1 %102) #5, !dbg !178
  ret void, !dbg !179
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 34, column: 40, scope: !6)
!18 = !DILocation(line: 40, column: 41, scope: !6)
!19 = !DILocation(line: 40, column: 34, scope: !6)
!20 = !DILocation(line: 40, column: 51, scope: !6)
!21 = !DILocation(line: 41, column: 41, scope: !6)
!22 = !DILocation(line: 41, column: 34, scope: !6)
!23 = !DILocation(line: 41, column: 48, scope: !6)
!24 = !DILocation(line: 42, column: 34, scope: !6)
!25 = !DILocation(line: 42, column: 48, scope: !6)
!26 = !DILocation(line: 43, column: 34, scope: !6)
!27 = !DILocation(line: 43, column: 51, scope: !6)
!28 = !DILocation(line: 44, column: 35, scope: !6)
!29 = !DILocation(line: 44, column: 42, scope: !6)
!30 = !DILocation(line: 45, column: 35, scope: !6)
!31 = !DILocation(line: 45, column: 42, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 50, column: 44, scope: !6)
!36 = !DILocation(line: 51, column: 17, scope: !6)
!37 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 53, column: 46, scope: !6)
!39 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 52, column: 46, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !38)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !38)
!43 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!44 = !DILocation(line: 55, column: 24, scope: !6)
!45 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !46)
!46 = !DILocation(line: 58, column: 46, scope: !6)
!47 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !46)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !46)
!50 = !DILocation(line: 72, column: 68, scope: !6)
!51 = !DILocation(line: 73, column: 29, scope: !6)
!52 = !DILocation(line: 42, column: 101, scope: !6)
!53 = !DILocation(line: 47, column: 22, scope: !6)
!54 = !DILocation(line: 48, column: 23, scope: !6)
!55 = !DILocation(line: 60, column: 23, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 61, column: 24, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 62, column: 24, scope: !6)
!60 = !DILocation(line: 63, column: 23, scope: !6)
!61 = !DILocation(line: 40, column: 113, scope: !6)
!62 = !DILocation(line: 64, column: 23, scope: !6)
!63 = !DILocation(line: 70, column: 64, scope: !6)
!64 = !DILocation(line: 73, column: 53, scope: !6)
!65 = !DILocation(line: 35, column: 31, scope: !6)
!66 = !DILocation(line: 36, column: 29, scope: !6)
!67 = !DILocation(line: 40, column: 59, scope: !6)
!68 = !DILocation(line: 209, column: 30, scope: !33, inlinedAt: !69)
!69 = !DILocation(line: 68, column: 55, scope: !6)
!70 = !DILocation(line: 211, column: 39, scope: !33, inlinedAt: !69)
!71 = !DILocation(line: 208, column: 24, scope: !33, inlinedAt: !69)
!72 = !DILocation(line: 210, column: 34, scope: !33, inlinedAt: !69)
!73 = !DILocation(line: 210, column: 26, scope: !33, inlinedAt: !69)
!74 = !DILocation(line: 211, column: 31, scope: !33, inlinedAt: !69)
!75 = !DILocation(line: 211, column: 22, scope: !33, inlinedAt: !69)
!76 = !DILocation(line: 217, column: 21, scope: !77, inlinedAt: !78)
!77 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!78 = !DILocation(line: 74, column: 85, scope: !6)
!79 = !DILocation(line: 218, column: 28, scope: !77, inlinedAt: !78)
!80 = !DILocation(line: 219, column: 39, scope: !77, inlinedAt: !78)
!81 = !DILocation(line: 219, column: 60, scope: !77, inlinedAt: !78)
!82 = !DILocation(line: 219, column: 49, scope: !77, inlinedAt: !78)
!83 = !DILocation(line: 221, column: 25, scope: !77, inlinedAt: !78)
!84 = !DILocation(line: 221, column: 17, scope: !77, inlinedAt: !78)
!85 = !DILocation(line: 222, column: 15, scope: !77, inlinedAt: !78)
!86 = !DILocation(line: 222, column: 30, scope: !77, inlinedAt: !78)
!87 = !DILocation(line: 222, column: 38, scope: !77, inlinedAt: !78)
!88 = !DILocation(line: 222, column: 49, scope: !77, inlinedAt: !78)
!89 = !DILocation(line: 222, column: 22, scope: !77, inlinedAt: !78)
!90 = !DILocation(line: 229, column: 46, scope: !33, inlinedAt: !78)
!91 = !DILocation(line: 94, column: 25, scope: !6)
!92 = !DILocation(line: 96, column: 24, scope: !6)
!93 = !DILocation(line: 97, column: 32, scope: !6)
!94 = !DILocation(line: 86, column: 53, scope: !6)
!95 = !DILocation(line: 87, column: 43, scope: !6)
!96 = !DILocation(line: 87, column: 35, scope: !6)
!97 = !DILocation(line: 87, column: 50, scope: !6)
!98 = !DILocation(line: 88, column: 35, scope: !6)
!99 = !DILocation(line: 88, column: 50, scope: !6)
!100 = !DILocation(line: 89, column: 42, scope: !6)
!101 = !DILocation(line: 89, column: 35, scope: !6)
!102 = !DILocation(line: 89, column: 49, scope: !6)
!103 = !DILocation(line: 90, column: 35, scope: !6)
!104 = !DILocation(line: 90, column: 49, scope: !6)
!105 = !DILocation(line: 113, column: 29, scope: !6)
!106 = !DILocation(line: 86, column: 115, scope: !6)
!107 = !DILocation(line: 88, column: 103, scope: !6)
!108 = !DILocation(line: 90, column: 102, scope: !6)
!109 = !DILocation(line: 92, column: 24, scope: !6)
!110 = !DILocation(line: 98, column: 24, scope: !6)
!111 = !DILocation(line: 101, column: 24, scope: !6)
!112 = !DILocation(line: 103, column: 24, scope: !6)
!113 = !DILocation(line: 104, column: 24, scope: !6)
!114 = !DILocation(line: 106, column: 24, scope: !6)
!115 = !DILocation(line: 107, column: 24, scope: !6)
!116 = !DILocation(line: 112, column: 50, scope: !6)
!117 = !DILocation(line: 110, column: 50, scope: !6)
!118 = !DILocation(line: 113, column: 53, scope: !6)
!119 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !120)
!120 = !DILocation(line: 109, column: 47, scope: !6)
!121 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !122)
!122 = !DILocation(line: 111, column: 47, scope: !6)
!123 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !122)
!124 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !120)
!125 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !120)
!126 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !120)
!127 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !122)
!128 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !122)
!129 = !DILocation(line: 110, column: 29, scope: !33, inlinedAt: !130)
!130 = !DILocation(line: 114, column: 40, scope: !6)
!131 = !DILocation(line: 94, column: 15, scope: !77, inlinedAt: !130)
!132 = !DILocation(line: 96, column: 21, scope: !77, inlinedAt: !130)
!133 = !DILocation(line: 96, column: 16, scope: !77, inlinedAt: !130)
!134 = !DILocation(line: 97, column: 29, scope: !77, inlinedAt: !130)
!135 = !DILocation(line: 115, column: 29, scope: !33, inlinedAt: !136)
!136 = !DILocation(line: 115, column: 40, scope: !6)
!137 = !DILocation(line: 102, column: 15, scope: !77, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 21, scope: !77, inlinedAt: !136)
!139 = !DILocation(line: 104, column: 16, scope: !77, inlinedAt: !136)
!140 = !DILocation(line: 105, column: 29, scope: !77, inlinedAt: !136)
!141 = !DILocation(line: 116, column: 25, scope: !6)
!142 = !DILocation(line: 116, column: 37, scope: !6)
!143 = !DILocation(line: 117, column: 25, scope: !6)
!144 = !DILocation(line: 117, column: 37, scope: !6)
!145 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !146)
!146 = !DILocation(line: 126, column: 46, scope: !6)
!147 = !DILocation(line: 127, column: 17, scope: !6)
!148 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !149)
!149 = !DILocation(line: 128, column: 46, scope: !6)
!150 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !151)
!151 = !DILocation(line: 129, column: 46, scope: !6)
!152 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !151)
!153 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !151)
!154 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !151)
!155 = !DILocation(line: 131, column: 24, scope: !6)
!156 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !157)
!157 = !DILocation(line: 134, column: 46, scope: !6)
!158 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !157)
!159 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !157)
!160 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !157)
!161 = !DILocation(line: 137, column: 25, scope: !6)
!162 = !DILocation(line: 124, column: 53, scope: !6)
!163 = !DILocation(line: 124, column: 115, scope: !6)
!164 = !DILocation(line: 140, column: 24, scope: !6)
!165 = !DILocation(line: 141, column: 36, scope: !6)
!166 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !167)
!167 = !DILocation(line: 144, column: 46, scope: !6)
!168 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !167)
!169 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !167)
!170 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !167)
!171 = !DILocation(line: 94, column: 15, scope: !33, inlinedAt: !172)
!172 = !DILocation(line: 146, column: 46, scope: !6)
!173 = !DILocation(line: 96, column: 21, scope: !33, inlinedAt: !172)
!174 = !DILocation(line: 96, column: 16, scope: !33, inlinedAt: !172)
!175 = !DILocation(line: 148, column: 25, scope: !6)
!176 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !172)
!177 = !DILocation(line: 149, column: 29, scope: !6)
!178 = !DILocation(line: 149, column: 53, scope: !6)
!179 = !DILocation(line: 118, column: 4, scope: !6)
