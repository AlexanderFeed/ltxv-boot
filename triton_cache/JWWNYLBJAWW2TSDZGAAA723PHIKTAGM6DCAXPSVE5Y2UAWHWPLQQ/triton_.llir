; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 10, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = shl i32 %13, 3, !dbg !11
  %15 = and i32 %14, 1016, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = or disjoint i32 %16, 4, !dbg !12
  %18 = sdiv i32 %16, 3072, !dbg !13
  %19 = mul i32 %18, 3072, !dbg !14
  %.decomposed = sub i32 %16, %19, !dbg !14
  %20 = srem i32 %17, 3072, !dbg !14
  %21 = sext i32 %16 to i64, !dbg !15
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %22) #1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !16
  %32 = add nsw i32 %.decomposed, 15360, !dbg !17
  %33 = zext nneg i32 %32 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = sext i32 %20 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !18
  %37 = getelementptr i8, ptr addrspace(1) %36, i64 61440, !dbg !18
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %34) #1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %37) #1, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !19
  %48 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !20
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %48) #1, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !21
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !21
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !21
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !21
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !21
  %58 = getelementptr i32, ptr addrspace(1) %3, i64 %21, !dbg !22
  %59 = sext i32 %17 to i64, !dbg !22
  %60 = getelementptr i32, ptr addrspace(1) %3, i64 %59, !dbg !22
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %58) #1, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %60) #1, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !23
  %71 = sext i32 %18 to i64, !dbg !24
  %72 = getelementptr bfloat, ptr addrspace(1) %4, i64 %71, !dbg !24
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %72) #1, !dbg !25
  %81 = getelementptr bfloat, ptr addrspace(1) %5, i64 %71, !dbg !26
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %81) #1, !dbg !27
  %90 = sext i32 %.decomposed to i64, !dbg !28
  %91 = getelementptr bfloat, ptr addrspace(1) %6, i64 %90, !dbg !28
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %91) #1, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !29
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !29
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !29
  %97 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !29
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !29
  %99 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !29
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !29
  %101 = getelementptr bfloat, ptr addrspace(1) %7, i64 %90, !dbg !30
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %101) #1, !dbg !31
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !31
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !31
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !31
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !31
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !31
  %111 = insertelement <2 x i16> poison, i16 %73, i64 0, !dbg !25
  %112 = insertelement <2 x i16> %111, i16 %74, i64 1, !dbg !25
  %113 = bitcast <2 x i16> %112 to <2 x bfloat>, !dbg !25
  %114 = fcmp oge <2 x bfloat> %113, zeroinitializer, !dbg !32
  %115 = select <2 x i1> %114, <2 x bfloat> zeroinitializer, <2 x bfloat> %113, !dbg !32
  %116 = fpext <2 x bfloat> %115 to <2 x float>, !dbg !32
  %117 = fsub <2 x float> zeroinitializer, %116, !dbg !36
  %118 = insertelement <2 x i16> poison, i16 %75, i64 0, !dbg !25
  %119 = insertelement <2 x i16> %118, i16 %76, i64 1, !dbg !25
  %120 = bitcast <2 x i16> %119 to <2 x bfloat>, !dbg !25
  %121 = fcmp oge <2 x bfloat> %120, zeroinitializer, !dbg !32
  %122 = select <2 x i1> %121, <2 x bfloat> zeroinitializer, <2 x bfloat> %120, !dbg !32
  %123 = fpext <2 x bfloat> %122 to <2 x float>, !dbg !32
  %124 = fsub <2 x float> zeroinitializer, %123, !dbg !36
  %125 = insertelement <2 x i16> poison, i16 %77, i64 0, !dbg !25
  %126 = insertelement <2 x i16> %125, i16 %78, i64 1, !dbg !25
  %127 = bitcast <2 x i16> %126 to <2 x bfloat>, !dbg !25
  %128 = fcmp oge <2 x bfloat> %127, zeroinitializer, !dbg !32
  %129 = select <2 x i1> %128, <2 x bfloat> zeroinitializer, <2 x bfloat> %127, !dbg !32
  %130 = fpext <2 x bfloat> %129 to <2 x float>, !dbg !32
  %131 = fsub <2 x float> zeroinitializer, %130, !dbg !36
  %132 = insertelement <2 x i16> poison, i16 %79, i64 0, !dbg !25
  %133 = insertelement <2 x i16> %132, i16 %80, i64 1, !dbg !25
  %134 = bitcast <2 x i16> %133 to <2 x bfloat>, !dbg !25
  %135 = fcmp oge <2 x bfloat> %134, zeroinitializer, !dbg !32
  %136 = select <2 x i1> %135, <2 x bfloat> zeroinitializer, <2 x bfloat> %134, !dbg !32
  %137 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !32
  %138 = fsub <2 x float> zeroinitializer, %137, !dbg !36
  %139 = insertelement <2 x i16> poison, i16 %82, i64 0, !dbg !27
  %140 = insertelement <2 x i16> %139, i16 %83, i64 1, !dbg !27
  %141 = bitcast <2 x i16> %140 to <2 x bfloat>, !dbg !27
  %142 = fcmp ole <2 x bfloat> %141, zeroinitializer, !dbg !37
  %143 = select <2 x i1> %142, <2 x bfloat> zeroinitializer, <2 x bfloat> %141, !dbg !37
  %144 = fpext <2 x bfloat> %143 to <2 x float>, !dbg !37
  %145 = insertelement <2 x i16> poison, i16 %84, i64 0, !dbg !27
  %146 = insertelement <2 x i16> %145, i16 %85, i64 1, !dbg !27
  %147 = bitcast <2 x i16> %146 to <2 x bfloat>, !dbg !27
  %148 = fcmp ole <2 x bfloat> %147, zeroinitializer, !dbg !37
  %149 = select <2 x i1> %148, <2 x bfloat> zeroinitializer, <2 x bfloat> %147, !dbg !37
  %150 = fpext <2 x bfloat> %149 to <2 x float>, !dbg !37
  %151 = insertelement <2 x i16> poison, i16 %86, i64 0, !dbg !27
  %152 = insertelement <2 x i16> %151, i16 %87, i64 1, !dbg !27
  %153 = bitcast <2 x i16> %152 to <2 x bfloat>, !dbg !27
  %154 = fcmp ole <2 x bfloat> %153, zeroinitializer, !dbg !37
  %155 = select <2 x i1> %154, <2 x bfloat> zeroinitializer, <2 x bfloat> %153, !dbg !37
  %156 = fpext <2 x bfloat> %155 to <2 x float>, !dbg !37
  %157 = insertelement <2 x i16> poison, i16 %88, i64 0, !dbg !27
  %158 = insertelement <2 x i16> %157, i16 %89, i64 1, !dbg !27
  %159 = bitcast <2 x i16> %158 to <2 x bfloat>, !dbg !27
  %160 = fcmp ole <2 x bfloat> %159, zeroinitializer, !dbg !37
  %161 = select <2 x i1> %160, <2 x bfloat> zeroinitializer, <2 x bfloat> %159, !dbg !37
  %162 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !37
  %163 = fcmp ogt <2 x float> %117, %144, !dbg !39
  %164 = fcmp uno <2 x float> %117, zeroinitializer, !dbg !41
  %165 = or <2 x i1> %164, %163, !dbg !42
  %166 = fcmp ogt <2 x float> %124, %150, !dbg !39
  %167 = fcmp uno <2 x float> %124, zeroinitializer, !dbg !41
  %168 = or <2 x i1> %167, %166, !dbg !42
  %169 = fcmp ogt <2 x float> %131, %156, !dbg !39
  %170 = fcmp uno <2 x float> %131, zeroinitializer, !dbg !41
  %171 = or <2 x i1> %170, %169, !dbg !42
  %172 = fcmp ogt <2 x float> %138, %162, !dbg !39
  %173 = fcmp uno <2 x float> %138, zeroinitializer, !dbg !41
  %174 = or <2 x i1> %173, %172, !dbg !42
  %175 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !43
  %176 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !19
  %177 = insertelement <2 x i32> %176, i32 %40, i64 1, !dbg !19
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !19
  %179 = fpext <2 x bfloat> %51 to <2 x float>, !dbg !44
  %180 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !45
  %181 = fpext <2 x bfloat> %104 to <2 x float>, !dbg !46
  %182 = fadd <2 x float> %178, %179, !dbg !47
  %183 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !48
  %184 = insertelement <2 x i32> %183, i32 %63, i64 1, !dbg !48
  %185 = sitofp <2 x i32> %184 to <2 x float>, !dbg !48
  %186 = select <2 x i1> %165, <2 x float> %117, <2 x float> %144, !dbg !49
  %187 = fmul <2 x float> %186, splat (float 0x3F80204080000000), !dbg !50
  %188 = fcmp ogt <2 x float> %187, splat (float 0x3EE4F8B580000000), !dbg !51
  %189 = fcmp uno <2 x float> %187, zeroinitializer, !dbg !53
  %190 = or <2 x i1> %188, %189, !dbg !54
  %191 = select <2 x i1> %190, <2 x float> %187, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %192 = fmul <2 x float> %191, %185, !dbg !56
  %193 = fmul <2 x float> %192, %180, !dbg !57
  %194 = fadd <2 x float> %193, %181, !dbg !58
  %195 = fmul <2 x float> %182, %194, !dbg !59
  %196 = fadd <2 x float> %195, %175, !dbg !60
  %197 = fptrunc <2 x float> %196 to <2 x bfloat>, !dbg !61
  %198 = fpext <2 x bfloat> %27 to <2 x float>, !dbg !43
  %199 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %200 = insertelement <2 x i32> %199, i32 %42, i64 1, !dbg !19
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !19
  %202 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !44
  %203 = fpext <2 x bfloat> %96 to <2 x float>, !dbg !45
  %204 = fpext <2 x bfloat> %106 to <2 x float>, !dbg !46
  %205 = fadd <2 x float> %201, %202, !dbg !47
  %206 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !48
  %207 = insertelement <2 x i32> %206, i32 %65, i64 1, !dbg !48
  %208 = sitofp <2 x i32> %207 to <2 x float>, !dbg !48
  %209 = select <2 x i1> %168, <2 x float> %124, <2 x float> %150, !dbg !49
  %210 = fmul <2 x float> %209, splat (float 0x3F80204080000000), !dbg !50
  %211 = fcmp ogt <2 x float> %210, splat (float 0x3EE4F8B580000000), !dbg !51
  %212 = fcmp uno <2 x float> %210, zeroinitializer, !dbg !53
  %213 = or <2 x i1> %211, %212, !dbg !54
  %214 = select <2 x i1> %213, <2 x float> %210, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %215 = fmul <2 x float> %214, %208, !dbg !56
  %216 = fmul <2 x float> %215, %203, !dbg !57
  %217 = fadd <2 x float> %216, %204, !dbg !58
  %218 = fmul <2 x float> %205, %217, !dbg !59
  %219 = fadd <2 x float> %218, %198, !dbg !60
  %220 = fptrunc <2 x float> %219 to <2 x bfloat>, !dbg !61
  %221 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !43
  %222 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !19
  %223 = insertelement <2 x i32> %222, i32 %45, i64 1, !dbg !19
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !19
  %225 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !44
  %226 = fpext <2 x bfloat> %98 to <2 x float>, !dbg !45
  %227 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !46
  %228 = fadd <2 x float> %224, %225, !dbg !47
  %229 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !48
  %230 = insertelement <2 x i32> %229, i32 %68, i64 1, !dbg !48
  %231 = sitofp <2 x i32> %230 to <2 x float>, !dbg !48
  %232 = select <2 x i1> %171, <2 x float> %131, <2 x float> %156, !dbg !49
  %233 = fmul <2 x float> %232, splat (float 0x3F80204080000000), !dbg !50
  %234 = fcmp ogt <2 x float> %233, splat (float 0x3EE4F8B580000000), !dbg !51
  %235 = fcmp uno <2 x float> %233, zeroinitializer, !dbg !53
  %236 = or <2 x i1> %234, %235, !dbg !54
  %237 = select <2 x i1> %236, <2 x float> %233, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %238 = fmul <2 x float> %237, %231, !dbg !56
  %239 = fmul <2 x float> %238, %226, !dbg !57
  %240 = fadd <2 x float> %239, %227, !dbg !58
  %241 = fmul <2 x float> %228, %240, !dbg !59
  %242 = fadd <2 x float> %241, %221, !dbg !60
  %243 = fptrunc <2 x float> %242 to <2 x bfloat>, !dbg !61
  %244 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !43
  %245 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !19
  %246 = insertelement <2 x i32> %245, i32 %47, i64 1, !dbg !19
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !19
  %248 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !44
  %249 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !45
  %250 = fpext <2 x bfloat> %110 to <2 x float>, !dbg !46
  %251 = fadd <2 x float> %247, %248, !dbg !47
  %252 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !48
  %253 = insertelement <2 x i32> %252, i32 %70, i64 1, !dbg !48
  %254 = sitofp <2 x i32> %253 to <2 x float>, !dbg !48
  %255 = select <2 x i1> %174, <2 x float> %138, <2 x float> %162, !dbg !49
  %256 = fmul <2 x float> %255, splat (float 0x3F80204080000000), !dbg !50
  %257 = fcmp ogt <2 x float> %256, splat (float 0x3EE4F8B580000000), !dbg !51
  %258 = fcmp uno <2 x float> %256, zeroinitializer, !dbg !53
  %259 = or <2 x i1> %257, %258, !dbg !54
  %260 = select <2 x i1> %259, <2 x float> %256, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !55
  %261 = fmul <2 x float> %260, %254, !dbg !56
  %262 = fmul <2 x float> %261, %249, !dbg !57
  %263 = fadd <2 x float> %262, %250, !dbg !58
  %264 = fmul <2 x float> %251, %263, !dbg !59
  %265 = fadd <2 x float> %264, %244, !dbg !60
  %266 = fptrunc <2 x float> %265 to <2 x bfloat>, !dbg !61
  %267 = bitcast <2 x bfloat> %197 to i32, !dbg !61
  %268 = bitcast <2 x bfloat> %220 to i32, !dbg !61
  %269 = bitcast <2 x bfloat> %243 to i32, !dbg !61
  %270 = bitcast <2 x bfloat> %266 to i32, !dbg !61
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %267, i32 %268, i32 %269, i32 %270, ptr addrspace(1) %22) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbn2tdzmldrkgc7zmmda5ba62ajtv2il2hwlqcqlevv7gsbvmiz.py", directory: "/tmp/torchinductor_root/mb")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 29, column: 19, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 34, scope: !6)
!16 = !DILocation(line: 30, column: 39, scope: !6)
!17 = !DILocation(line: 31, column: 38, scope: !6)
!18 = !DILocation(line: 31, column: 30, scope: !6)
!19 = !DILocation(line: 31, column: 43, scope: !6)
!20 = !DILocation(line: 32, column: 30, scope: !6)
!21 = !DILocation(line: 32, column: 43, scope: !6)
!22 = !DILocation(line: 33, column: 30, scope: !6)
!23 = !DILocation(line: 33, column: 35, scope: !6)
!24 = !DILocation(line: 34, column: 30, scope: !6)
!25 = !DILocation(line: 34, column: 35, scope: !6)
!26 = !DILocation(line: 35, column: 31, scope: !6)
!27 = !DILocation(line: 35, column: 36, scope: !6)
!28 = !DILocation(line: 36, column: 31, scope: !6)
!29 = !DILocation(line: 36, column: 36, scope: !6)
!30 = !DILocation(line: 37, column: 31, scope: !6)
!31 = !DILocation(line: 37, column: 36, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 42, column: 40, scope: !6)
!36 = !DILocation(line: 43, column: 13, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 42, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 45, column: 42, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 30, column: 48, scope: !6)
!44 = !DILocation(line: 32, column: 82, scope: !6)
!45 = !DILocation(line: 36, column: 75, scope: !6)
!46 = !DILocation(line: 37, column: 75, scope: !6)
!47 = !DILocation(line: 39, column: 18, scope: !6)
!48 = !DILocation(line: 40, column: 19, scope: !6)
!49 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!50 = !DILocation(line: 47, column: 20, scope: !6)
!51 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !52)
!52 = !DILocation(line: 50, column: 42, scope: !6)
!53 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !52)
!54 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !52)
!55 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !52)
!56 = !DILocation(line: 52, column: 19, scope: !6)
!57 = !DILocation(line: 53, column: 20, scope: !6)
!58 = !DILocation(line: 54, column: 20, scope: !6)
!59 = !DILocation(line: 55, column: 19, scope: !6)
!60 = !DILocation(line: 56, column: 19, scope: !6)
!61 = !DILocation(line: 57, column: 40, scope: !6)
!62 = !DILocation(line: 57, column: 4, scope: !6)
