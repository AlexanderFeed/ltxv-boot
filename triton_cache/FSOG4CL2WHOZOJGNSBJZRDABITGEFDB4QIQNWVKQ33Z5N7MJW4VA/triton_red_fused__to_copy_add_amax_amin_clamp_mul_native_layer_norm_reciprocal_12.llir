; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.next:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 1, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 256, !dbg !11
  %.lobit = lshr exact i32 %19, 8, !dbg !11
  %20 = and i32 %18, 31, !dbg !11
  %21 = or disjoint i32 %.lobit, %17, !dbg !12
  %22 = icmp slt i32 %21, 512, !dbg !13
  %23 = icmp slt i32 %17, 512, !dbg !13
  %24 = shl i32 %18, 1, !dbg !14
  %25 = and i32 %24, 510, !dbg !14
  %26 = and i32 %18, 511, !dbg !14
  %27 = sext i32 %21 to i64, !dbg !15
  %28 = getelementptr bfloat, ptr addrspace(1) %4, i64 %27, !dbg !15
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %22) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %22) #5, !dbg !16
  %31 = bitcast i16 %30 to bfloat, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %5, i64 %27, !dbg !17
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %22) #5, !dbg !18
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %22) #5, !dbg !18
  %35 = bitcast i16 %34 to bfloat, !dbg !18
  %36 = mul i32 %21, 3072, !dbg !19
  %.inv = fcmp oge bfloat %31, 0xR0000, !dbg !20
  %37 = select i1 %.inv, bfloat 0xR0000, bfloat %31, !dbg !20
  %38 = fpext bfloat %37 to float, !dbg !20
  %39 = fsub float 0.000000e+00, %38, !dbg !24
  %.inv4 = fcmp ole bfloat %35, 0xR0000, !dbg !25
  %40 = select i1 %.inv4, bfloat 0xR0000, bfloat %35, !dbg !25
  %41 = fpext bfloat %40 to float, !dbg !25
  %42 = fcmp ogt float %39, %41, !dbg !27
  %43 = fcmp uno float %39, 0.000000e+00, !dbg !29
  %44 = or i1 %43, %42, !dbg !30
  %45 = select i1 %44, float %39, float %41, !dbg !31
  %46 = fmul float %45, 0x3F80204080000000, !dbg !32
  %47 = fcmp ogt float %46, 0x3EE4F8B580000000, !dbg !33
  %48 = fcmp uno float %46, 0.000000e+00, !dbg !35
  %49 = or i1 %47, %48, !dbg !36
  %50 = select i1 %49, float %46, float 0x3EE4F8B580000000, !dbg !37
  %51 = or disjoint i32 %36, %25
  %invariant.op = or disjoint i32 %.lobit, 2, !dbg !38
  %52 = shl i32 %18, 2
  %53 = and i32 %52, 1020
  %54 = or disjoint i32 %53, %.lobit
  %55 = and i32 %24, 1022
  %56 = lshr exact i32 %53, 1
  %57 = add nuw nsw i32 %56, %54
  %58 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %57
  %.reass = or disjoint i32 %53, %invariant.op
  %59 = lshr i32 %.reass, 1
  %60 = add nuw nsw i32 %59, %.reass
  %61 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %60
  %62 = lshr exact i32 %55, 1
  %63 = add nuw nsw i32 %62, %55
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63
  %65 = or disjoint i32 %55, 1
  %66 = add nuw nsw i32 %62, %65
  %67 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %57
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %60
  %70 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63
  %71 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %66
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26
  %73 = getelementptr inbounds nuw i8, ptr addrspace(3) %72, i32 1028
  %74 = lshr i32 %24, 8
  %75 = and i32 %74, 2
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %76, i32 %55
  %78 = zext nneg i32 %26 to i64, !dbg !38
  %79 = sext i32 %51 to i64, !dbg !39
  %80 = getelementptr bfloat, ptr addrspace(1) %0, i64 %79, !dbg !39
  %81 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %80, i1 %22) #5, !dbg !40
  %extelt.offset10.peel = lshr i32 %81, 16, !dbg !40
  %82 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %83 = trunc i32 %81 to i16, !dbg !41
  %84 = insertelement <1 x i16> poison, i16 %83, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %58, <1 x i16> %84, i1 true) #5, !dbg !41
  %85 = insertelement <1 x i16> poison, i16 %82, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %61, <1 x i16> %85, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %86 = load bfloat, ptr addrspace(3) %64, align 2, !dbg !41
  %87 = load bfloat, ptr addrspace(3) %67, align 2, !dbg !41
  %88 = or disjoint i64 %78, 6144, !dbg !42
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !43
  %90 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %89, i1 true) #5, !dbg !44
  %91 = getelementptr bfloat, ptr addrspace(1) %2, i64 %88, !dbg !45
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %91, i1 true) #5, !dbg !46
  %93 = getelementptr i32, ptr addrspace(1) %3, i64 %79, !dbg !47
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %93, i1 %22) #5, !dbg !48
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !48
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !48
  %97 = getelementptr bfloat, ptr addrspace(1) %6, i64 %78, !dbg !49
  %98 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %97, i1 true) #5, !dbg !50
  %99 = getelementptr bfloat, ptr addrspace(1) %7, i64 %78, !dbg !51
  %100 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 true) #5, !dbg !52
  %101 = sitofp i32 %95 to float, !dbg !53
  %102 = sitofp i32 %96 to float, !dbg !53
  %103 = fmul float %50, %101, !dbg !54
  %104 = fmul float %50, %102, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %105 = bitcast float %103 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %105, i1 true) #5, !dbg !54
  %106 = bitcast float %104 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %69, <1 x i32> %106, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %107 = bitcast i32 %90 to float, !dbg !44
  %108 = bitcast i16 %92 to bfloat, !dbg !46
  %109 = fpext bfloat %108 to float, !dbg !55
  %110 = fadd float %107, %109, !dbg !56
  %111 = load float, ptr addrspace(3) %71, align 4, !dbg !54
  %112 = bitcast i16 %98 to bfloat, !dbg !50
  %113 = fpext bfloat %112 to float, !dbg !57
  %114 = fmul float %111, %113, !dbg !58
  %115 = bitcast i16 %100 to bfloat, !dbg !52
  %116 = fpext bfloat %115 to float, !dbg !59
  %117 = fadd float %114, %116, !dbg !60
  %118 = fmul float %110, %117, !dbg !61
  %119 = fpext bfloat %87 to float, !dbg !41
  %120 = fadd float %118, %119, !dbg !62
  %121 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %122 = fmul float %121, %113, !dbg !58
  %123 = fadd float %122, %116, !dbg !60
  %124 = fmul float %110, %123, !dbg !61
  %125 = fpext bfloat %86 to float, !dbg !41
  %126 = fadd float %124, %125, !dbg !62
  %127 = getelementptr bfloat, ptr addrspace(1) %8, i64 %79, !dbg !63
  %128 = fptrunc float %126 to bfloat, !dbg !64
  %129 = fptrunc float %120 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %130 = bitcast bfloat %128 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %72, <1 x i16> %130, i1 true) #5, !dbg !64
  %131 = bitcast bfloat %129 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %73, <1 x i16> %131, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %132 = load i32, ptr addrspace(3) %77, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %127, i1 %22) #5, !dbg !64
  %133 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %134 = select i1 %23, float %126, float 0.000000e+00, !dbg !66
  %135 = select i1 %23, float %120, float 0.000000e+00, !dbg !66
  br label %136, !dbg !38

136:                                              ; preds = %.peel.next, %136
  %indvars.iv = phi i64 [ 512, %.peel.next ], [ %indvars.iv.next, %136 ]
  %.pn53 = phi float [ %133, %.peel.next ], [ %208, %136 ]
  %.pn51 = phi float [ %133, %.peel.next ], [ %209, %136 ]
  %137 = phi float [ 0.000000e+00, %.peel.next ], [ %206, %136 ]
  %138 = phi float [ 0.000000e+00, %.peel.next ], [ %207, %136 ]
  %.pn57 = phi float [ %134, %.peel.next ], [ %204, %136 ]
  %.pn55 = phi float [ %135, %.peel.next ], [ %205, %136 ]
  %139 = or disjoint i64 %indvars.iv, %78, !dbg !67
  %140 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !68
  %141 = add i32 %51, %140, !dbg !68
  %142 = sext i32 %141 to i64, !dbg !39
  %143 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !39
  %144 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %143, i1 %22) #5, !dbg !40
  %extelt.offset10 = lshr i32 %144, 16, !dbg !40
  %145 = trunc nuw i32 %extelt.offset10 to i16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %146 = trunc i32 %144 to i16, !dbg !41
  %147 = insertelement <1 x i16> poison, i16 %146, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %58, <1 x i16> %147, i1 true) #5, !dbg !41
  %148 = insertelement <1 x i16> poison, i16 %145, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %61, <1 x i16> %148, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %149 = load bfloat, ptr addrspace(3) %64, align 2, !dbg !41
  %150 = load bfloat, ptr addrspace(3) %67, align 2, !dbg !41
  %151 = fpext bfloat %149 to float, !dbg !41
  %152 = fpext bfloat %150 to float, !dbg !41
  %153 = add nuw nsw i64 %139, 6144, !dbg !42
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !43
  %155 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %154, i1 true) #5, !dbg !44
  %156 = bitcast i32 %155 to float, !dbg !44
  %157 = getelementptr bfloat, ptr addrspace(1) %2, i64 %153, !dbg !45
  %158 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %157, i1 true) #5, !dbg !46
  %159 = bitcast i16 %158 to bfloat, !dbg !46
  %160 = fpext bfloat %159 to float, !dbg !55
  %161 = getelementptr i32, ptr addrspace(1) %3, i64 %142, !dbg !47
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %161, i1 %22) #5, !dbg !48
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !48
  %164 = extractvalue { i32, i32 } %162, 1, !dbg !48
  %165 = getelementptr bfloat, ptr addrspace(1) %6, i64 %139, !dbg !49
  %166 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %165, i1 true) #5, !dbg !50
  %167 = bitcast i16 %166 to bfloat, !dbg !50
  %168 = fpext bfloat %167 to float, !dbg !57
  %169 = getelementptr bfloat, ptr addrspace(1) %7, i64 %139, !dbg !51
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #5, !dbg !52
  %171 = bitcast i16 %170 to bfloat, !dbg !52
  %172 = fpext bfloat %171 to float, !dbg !59
  %173 = fadd float %156, %160, !dbg !56
  %174 = sitofp i32 %163 to float, !dbg !53
  %175 = sitofp i32 %164 to float, !dbg !53
  %176 = fmul float %50, %174, !dbg !54
  %177 = fmul float %50, %175, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %178 = bitcast float %176 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %178, i1 true) #5, !dbg !54
  %179 = bitcast float %177 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %69, <1 x i32> %179, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %180 = load float, ptr addrspace(3) %70, align 4, !dbg !54
  %181 = load float, ptr addrspace(3) %71, align 4, !dbg !54
  %182 = fmul float %180, %168, !dbg !58
  %183 = fmul float %181, %168, !dbg !58
  %184 = fadd float %182, %172, !dbg !60
  %185 = fadd float %183, %172, !dbg !60
  %186 = fmul float %173, %184, !dbg !61
  %187 = fmul float %173, %185, !dbg !61
  %188 = fadd float %186, %151, !dbg !62
  %189 = fadd float %187, %152, !dbg !62
  %190 = fsub float %188, %.pn57, !dbg !69
  %191 = fadd float %.pn53, 1.000000e+00, !dbg !71
  %192 = tail call float @llvm.nvvm.div.full(float %190, float %191), !dbg !72
  %193 = fadd float %.pn57, %192, !dbg !73
  %194 = fsub float %188, %193, !dbg !74
  %195 = fmul float %190, %194, !dbg !75
  %196 = fadd float %137, %195, !dbg !76
  %197 = fsub float %189, %.pn55, !dbg !69
  %198 = fadd float %.pn51, 1.000000e+00, !dbg !71
  %199 = tail call float @llvm.nvvm.div.full(float %197, float %198), !dbg !72
  %200 = fadd float %.pn55, %199, !dbg !73
  %201 = fsub float %189, %200, !dbg !74
  %202 = fmul float %197, %201, !dbg !75
  %203 = fadd float %138, %202, !dbg !76
  %204 = select i1 %23, float %193, float %.pn57, !dbg !66
  %205 = select i1 %23, float %200, float %.pn55, !dbg !66
  %206 = select i1 %23, float %196, float %137, !dbg !77
  %207 = select i1 %23, float %203, float %138, !dbg !77
  %208 = select i1 %23, float %191, float %.pn53, !dbg !65
  %209 = select i1 %23, float %198, float %.pn51, !dbg !65
  %210 = getelementptr bfloat, ptr addrspace(1) %8, i64 %142, !dbg !63
  %211 = fptrunc float %188 to bfloat, !dbg !64
  %212 = fptrunc float %189 to bfloat, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %213 = bitcast bfloat %211 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %72, <1 x i16> %213, i1 true) #5, !dbg !64
  %214 = bitcast bfloat %212 to <1 x i16>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %73, <1 x i16> %214, i1 true) #5, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %215 = load i32, ptr addrspace(3) %77, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %210, i1 %22) #5, !dbg !64
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %216 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %216, label %136, label %.loopexit, !dbg !38, !llvm.loop !78

.loopexit:                                        ; preds = %136
  %217 = lshr i32 %18, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %218 = bitcast float %204 to i32, !dbg !80
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !80
  %220 = bitcast i32 %219 to float, !dbg !80
  %221 = bitcast float %206 to i32, !dbg !80
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !80
  %223 = bitcast i32 %222 to float, !dbg !80
  %224 = bitcast float %208 to i32, !dbg !80
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !80
  %226 = bitcast i32 %225 to float, !dbg !80
  %227 = fsub float %220, %204, !dbg !82
  %228 = fadd float %208, %226, !dbg !84
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !85
  %230 = tail call float @llvm.nvvm.div.full(float %226, float %228), !dbg !86
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !87
  %232 = fmul float %227, %231, !dbg !88
  %233 = fadd float %204, %232, !dbg !89
  %234 = fadd float %206, %223, !dbg !90
  %235 = fmul float %227, %227, !dbg !91
  %236 = fmul float %208, %235, !dbg !92
  %237 = fmul float %236, %231, !dbg !93
  %238 = fadd float %234, %237, !dbg !94
  %239 = bitcast float %233 to i32, !dbg !80
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !80
  %241 = bitcast i32 %240 to float, !dbg !80
  %242 = bitcast float %238 to i32, !dbg !80
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !80
  %244 = bitcast i32 %243 to float, !dbg !80
  %245 = bitcast float %228 to i32, !dbg !80
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !80
  %247 = bitcast i32 %246 to float, !dbg !80
  %248 = fsub float %241, %233, !dbg !82
  %249 = fadd float %228, %247, !dbg !84
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !85
  %251 = tail call float @llvm.nvvm.div.full(float %247, float %249), !dbg !86
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !87
  %253 = fmul float %248, %252, !dbg !88
  %254 = fadd float %233, %253, !dbg !89
  %255 = fadd float %238, %244, !dbg !90
  %256 = fmul float %248, %248, !dbg !91
  %257 = fmul float %228, %256, !dbg !92
  %258 = fmul float %252, %257, !dbg !93
  %259 = fadd float %255, %258, !dbg !94
  %260 = bitcast float %254 to i32, !dbg !80
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !80
  %262 = bitcast i32 %261 to float, !dbg !80
  %263 = bitcast float %259 to i32, !dbg !80
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !80
  %265 = bitcast i32 %264 to float, !dbg !80
  %266 = bitcast float %249 to i32, !dbg !80
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !80
  %268 = bitcast i32 %267 to float, !dbg !80
  %269 = fsub float %262, %254, !dbg !82
  %270 = fadd float %249, %268, !dbg !84
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !85
  %272 = tail call float @llvm.nvvm.div.full(float %268, float %270), !dbg !86
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !87
  %274 = fmul float %269, %273, !dbg !88
  %275 = fadd float %254, %274, !dbg !89
  %276 = fadd float %259, %265, !dbg !90
  %277 = fmul float %269, %269, !dbg !91
  %278 = fmul float %249, %277, !dbg !92
  %279 = fmul float %273, %278, !dbg !93
  %280 = fadd float %276, %279, !dbg !94
  %281 = bitcast float %275 to i32, !dbg !80
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !80
  %283 = bitcast i32 %282 to float, !dbg !80
  %284 = bitcast float %280 to i32, !dbg !80
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !80
  %286 = bitcast i32 %285 to float, !dbg !80
  %287 = bitcast float %270 to i32, !dbg !80
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !80
  %289 = bitcast i32 %288 to float, !dbg !80
  %290 = fsub float %283, %275, !dbg !82
  %291 = fadd float %270, %289, !dbg !84
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !85
  %293 = tail call float @llvm.nvvm.div.full(float %289, float %291), !dbg !86
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !87
  %295 = fmul float %290, %294, !dbg !88
  %296 = fadd float %275, %295, !dbg !89
  %297 = fadd float %280, %286, !dbg !90
  %298 = fmul float %290, %290, !dbg !91
  %299 = fmul float %270, %298, !dbg !92
  %300 = fmul float %294, %299, !dbg !93
  %301 = fadd float %297, %300, !dbg !94
  %302 = bitcast float %296 to i32, !dbg !80
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !80
  %304 = bitcast i32 %303 to float, !dbg !80
  %305 = bitcast float %301 to i32, !dbg !80
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !80
  %307 = bitcast i32 %306 to float, !dbg !80
  %308 = bitcast float %291 to i32, !dbg !80
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !80
  %310 = bitcast i32 %309 to float, !dbg !80
  %311 = fsub float %304, %296, !dbg !82
  %312 = fadd float %291, %310, !dbg !84
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !85
  %314 = tail call float @llvm.nvvm.div.full(float %310, float %312), !dbg !86
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !87
  %316 = fmul float %311, %315, !dbg !88
  %317 = fadd float %296, %316, !dbg !89
  %318 = fadd float %301, %307, !dbg !90
  %319 = fmul float %311, %311, !dbg !91
  %320 = fmul float %291, %319, !dbg !92
  %321 = fmul float %315, %320, !dbg !93
  %322 = fadd float %318, %321, !dbg !94
  %323 = bitcast float %205 to i32, !dbg !80
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 16, i32 31), !dbg !80
  %325 = bitcast i32 %324 to float, !dbg !80
  %326 = bitcast float %207 to i32, !dbg !80
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 16, i32 31), !dbg !80
  %328 = bitcast i32 %327 to float, !dbg !80
  %329 = bitcast float %209 to i32, !dbg !80
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 16, i32 31), !dbg !80
  %331 = bitcast i32 %330 to float, !dbg !80
  %332 = fsub float %325, %205, !dbg !82
  %333 = fadd float %209, %331, !dbg !84
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !85
  %335 = tail call float @llvm.nvvm.div.full(float %331, float %333), !dbg !86
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !87
  %337 = fmul float %332, %336, !dbg !88
  %338 = fadd float %205, %337, !dbg !89
  %339 = fadd float %207, %328, !dbg !90
  %340 = fmul float %332, %332, !dbg !91
  %341 = fmul float %209, %340, !dbg !92
  %342 = fmul float %341, %336, !dbg !93
  %343 = fadd float %339, %342, !dbg !94
  %344 = bitcast float %338 to i32, !dbg !80
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 8, i32 31), !dbg !80
  %346 = bitcast i32 %345 to float, !dbg !80
  %347 = bitcast float %343 to i32, !dbg !80
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 8, i32 31), !dbg !80
  %349 = bitcast i32 %348 to float, !dbg !80
  %350 = bitcast float %333 to i32, !dbg !80
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 8, i32 31), !dbg !80
  %352 = bitcast i32 %351 to float, !dbg !80
  %353 = fsub float %346, %338, !dbg !82
  %354 = fadd float %333, %352, !dbg !84
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !85
  %356 = tail call float @llvm.nvvm.div.full(float %352, float %354), !dbg !86
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !87
  %358 = fmul float %353, %357, !dbg !88
  %359 = fadd float %338, %358, !dbg !89
  %360 = fadd float %343, %349, !dbg !90
  %361 = fmul float %353, %353, !dbg !91
  %362 = fmul float %333, %361, !dbg !92
  %363 = fmul float %357, %362, !dbg !93
  %364 = fadd float %360, %363, !dbg !94
  %365 = bitcast float %359 to i32, !dbg !80
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 4, i32 31), !dbg !80
  %367 = bitcast i32 %366 to float, !dbg !80
  %368 = bitcast float %364 to i32, !dbg !80
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !80
  %370 = bitcast i32 %369 to float, !dbg !80
  %371 = bitcast float %354 to i32, !dbg !80
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !80
  %373 = bitcast i32 %372 to float, !dbg !80
  %374 = fsub float %367, %359, !dbg !82
  %375 = fadd float %354, %373, !dbg !84
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !85
  %377 = tail call float @llvm.nvvm.div.full(float %373, float %375), !dbg !86
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !87
  %379 = fmul float %374, %378, !dbg !88
  %380 = fadd float %359, %379, !dbg !89
  %381 = fadd float %364, %370, !dbg !90
  %382 = fmul float %374, %374, !dbg !91
  %383 = fmul float %354, %382, !dbg !92
  %384 = fmul float %378, %383, !dbg !93
  %385 = fadd float %381, %384, !dbg !94
  %386 = bitcast float %380 to i32, !dbg !80
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 2, i32 31), !dbg !80
  %388 = bitcast i32 %387 to float, !dbg !80
  %389 = bitcast float %385 to i32, !dbg !80
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 2, i32 31), !dbg !80
  %391 = bitcast i32 %390 to float, !dbg !80
  %392 = bitcast float %375 to i32, !dbg !80
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !80
  %394 = bitcast i32 %393 to float, !dbg !80
  %395 = fsub float %388, %380, !dbg !82
  %396 = fadd float %375, %394, !dbg !84
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !85
  %398 = tail call float @llvm.nvvm.div.full(float %394, float %396), !dbg !86
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !87
  %400 = fmul float %395, %399, !dbg !88
  %401 = fadd float %380, %400, !dbg !89
  %402 = fadd float %385, %391, !dbg !90
  %403 = fmul float %395, %395, !dbg !91
  %404 = fmul float %375, %403, !dbg !92
  %405 = fmul float %399, %404, !dbg !93
  %406 = fadd float %402, %405, !dbg !94
  %407 = bitcast float %401 to i32, !dbg !80
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 1, i32 31), !dbg !80
  %409 = bitcast i32 %408 to float, !dbg !80
  %410 = bitcast float %406 to i32, !dbg !80
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !80
  %412 = bitcast i32 %411 to float, !dbg !80
  %413 = bitcast float %396 to i32, !dbg !80
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !80
  %415 = bitcast i32 %414 to float, !dbg !80
  %416 = fsub float %409, %401, !dbg !82
  %417 = fadd float %396, %415, !dbg !84
  %418 = fcmp oeq float %417, 0.000000e+00, !dbg !85
  %419 = tail call float @llvm.nvvm.div.full(float %415, float %417), !dbg !86
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !87
  %421 = fmul float %416, %420, !dbg !88
  %422 = fadd float %401, %421, !dbg !89
  %423 = fadd float %406, %412, !dbg !90
  %424 = fmul float %416, %416, !dbg !91
  %425 = fmul float %396, %424, !dbg !92
  %426 = fmul float %420, %425, !dbg !93
  %427 = fadd float %423, %426, !dbg !94
  %428 = and i32 %217, 15, !dbg !80
  %429 = icmp eq i32 %20, 0, !dbg !80
  %430 = getelementptr float, ptr addrspace(3) @global_smem, i32 %428, !dbg !80
  %431 = bitcast float %317 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 %429) #5, !dbg !80
  %432 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %428, !dbg !80
  %433 = bitcast float %322 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 %429) #5, !dbg !80
  %434 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %428, !dbg !80
  %435 = bitcast float %312 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 %429) #5, !dbg !80
  %436 = or disjoint i32 %428, 16, !dbg !80
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i32 %436, !dbg !80
  %438 = bitcast float %422 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 %429) #5, !dbg !80
  %439 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %436, !dbg !80
  %440 = bitcast float %427 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 %429) #5, !dbg !80
  %441 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %436, !dbg !80
  %442 = bitcast float %417 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 %429) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %443 = icmp slt i32 %18, 32, !dbg !80
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !80
  %445 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %444, i1 %443) #5, !dbg !80
  %446 = bitcast i32 %445 to float, !dbg !80
  %447 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %18, !dbg !80
  %448 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %447, i1 %443) #5, !dbg !80
  %449 = bitcast i32 %448 to float, !dbg !80
  %450 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %18, !dbg !80
  %451 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %450, i1 %443) #5, !dbg !80
  %452 = bitcast i32 %451 to float, !dbg !80
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 8, i32 31), !dbg !80
  %454 = bitcast i32 %453 to float, !dbg !80
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 8, i32 31), !dbg !80
  %456 = bitcast i32 %455 to float, !dbg !80
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 8, i32 31), !dbg !80
  %458 = bitcast i32 %457 to float, !dbg !80
  %459 = fsub float %454, %446, !dbg !82
  %460 = fadd float %452, %458, !dbg !84
  %461 = fcmp oeq float %460, 0.000000e+00, !dbg !85
  %462 = tail call float @llvm.nvvm.div.full(float %458, float %460), !dbg !86
  %463 = select i1 %461, float 0.000000e+00, float %462, !dbg !87
  %464 = fmul float %459, %463, !dbg !88
  %465 = fadd float %464, %446, !dbg !89
  %466 = fadd float %449, %456, !dbg !90
  %467 = fmul float %459, %459, !dbg !91
  %468 = fmul float %467, %452, !dbg !92
  %469 = fmul float %468, %463, !dbg !93
  %470 = fadd float %466, %469, !dbg !94
  %471 = bitcast float %465 to i32, !dbg !80
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 4, i32 31), !dbg !80
  %473 = bitcast i32 %472 to float, !dbg !80
  %474 = bitcast float %470 to i32, !dbg !80
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 4, i32 31), !dbg !80
  %476 = bitcast i32 %475 to float, !dbg !80
  %477 = bitcast float %460 to i32, !dbg !80
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 4, i32 31), !dbg !80
  %479 = bitcast i32 %478 to float, !dbg !80
  %480 = fsub float %473, %465, !dbg !82
  %481 = fadd float %460, %479, !dbg !84
  %482 = fcmp oeq float %481, 0.000000e+00, !dbg !85
  %483 = tail call float @llvm.nvvm.div.full(float %479, float %481), !dbg !86
  %484 = select i1 %482, float 0.000000e+00, float %483, !dbg !87
  %485 = fmul float %480, %484, !dbg !88
  %486 = fadd float %465, %485, !dbg !89
  %487 = fadd float %470, %476, !dbg !90
  %488 = fmul float %480, %480, !dbg !91
  %489 = fmul float %460, %488, !dbg !92
  %490 = fmul float %484, %489, !dbg !93
  %491 = fadd float %487, %490, !dbg !94
  %492 = bitcast float %486 to i32, !dbg !80
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 2, i32 31), !dbg !80
  %494 = bitcast i32 %493 to float, !dbg !80
  %495 = bitcast float %491 to i32, !dbg !80
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 2, i32 31), !dbg !80
  %497 = bitcast i32 %496 to float, !dbg !80
  %498 = bitcast float %481 to i32, !dbg !80
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 2, i32 31), !dbg !80
  %500 = bitcast i32 %499 to float, !dbg !80
  %501 = fsub float %494, %486, !dbg !82
  %502 = fadd float %481, %500, !dbg !84
  %503 = fcmp oeq float %502, 0.000000e+00, !dbg !85
  %504 = tail call float @llvm.nvvm.div.full(float %500, float %502), !dbg !86
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !87
  %506 = fmul float %501, %505, !dbg !88
  %507 = fadd float %486, %506, !dbg !89
  %508 = fadd float %491, %497, !dbg !90
  %509 = fmul float %501, %501, !dbg !91
  %510 = fmul float %481, %509, !dbg !92
  %511 = fmul float %505, %510, !dbg !93
  %512 = fadd float %508, %511, !dbg !94
  %513 = bitcast float %507 to i32, !dbg !80
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 1, i32 31), !dbg !80
  %515 = bitcast i32 %514 to float, !dbg !80
  %516 = bitcast float %512 to i32, !dbg !80
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 1, i32 31), !dbg !80
  %518 = bitcast i32 %517 to float, !dbg !80
  %519 = bitcast float %502 to i32, !dbg !80
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 1, i32 31), !dbg !80
  %521 = bitcast i32 %520 to float, !dbg !80
  %522 = fsub float %515, %507, !dbg !82
  %523 = fadd float %502, %521, !dbg !84
  %524 = fcmp oeq float %523, 0.000000e+00, !dbg !85
  %525 = tail call float @llvm.nvvm.div.full(float %521, float %523), !dbg !86
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !87
  %527 = fmul float %522, %526, !dbg !88
  %528 = fadd float %507, %527, !dbg !89
  %529 = fadd float %512, %518, !dbg !90
  %530 = fmul float %522, %522, !dbg !91
  %531 = fmul float %502, %530, !dbg !92
  %532 = fmul float %526, %531, !dbg !93
  %533 = fadd float %529, %532, !dbg !94
  %534 = and i32 %18, 15, !dbg !80
  %535 = icmp eq i32 %534, 0, !dbg !80
  %536 = and i1 %443, %535, !dbg !80
  %537 = bitcast float %528 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %537, i1 %536) #5, !dbg !80
  %538 = bitcast float %533 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %538, i1 %536) #5, !dbg !80
  %539 = bitcast float %523 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %539, i1 %536) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %540 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %541 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %542 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !80
  %543 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !80
  %544 = tail call float @llvm.nvvm.div.full(float %542, float 3.072000e+03), !dbg !95
  %545 = tail call float @llvm.nvvm.div.full(float %543, float 3.072000e+03), !dbg !95
  %546 = fadd float %544, 0x3EB0C6F7A0000000, !dbg !96
  %547 = fadd float %545, 0x3EB0C6F7A0000000, !dbg !96
  %548 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i = icmp eq i32 %548, 0, !dbg !97
  br i1 %.not.i, label %551, label %549, !dbg !97

549:                                              ; preds = %.loopexit
  %550 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %546), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

551:                                              ; preds = %.loopexit
  %552 = tail call float @llvm.nvvm.rsqrt.approx.f(float %546), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

__nv_rsqrtf.exit:                                 ; preds = %549, %551
  %.0.i = phi float [ %550, %549 ], [ %552, %551 ], !dbg !97
  %553 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i15 = icmp eq i32 %553, 0, !dbg !97
  br i1 %.not.i15, label %556, label %554, !dbg !97

554:                                              ; preds = %__nv_rsqrtf.exit
  %555 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %547), !dbg !97
  br label %__nv_rsqrtf.exit17, !dbg !97

556:                                              ; preds = %__nv_rsqrtf.exit
  %557 = tail call float @llvm.nvvm.rsqrt.approx.f(float %547), !dbg !97
  br label %__nv_rsqrtf.exit17, !dbg !97

__nv_rsqrtf.exit17:                               ; preds = %554, %556
  %.0.i16 = phi float [ %555, %554 ], [ %557, %556 ], !dbg !97
  %558 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %53
  %559 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %558, i32 %54
  %560 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %59
  %561 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %560, i32 %.reass
  %562 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %55
  %563 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %562, i32 %55
  %564 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !98
  %565 = shufflevector <4 x i1> %564, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !98
  %566 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !99
  %567 = insertelement <2 x float> %566, float %.0.i16, i64 1, !dbg !99
  %568 = insertelement <2 x float> poison, float %540, i64 0, !dbg !100
  %569 = insertelement <2 x float> %568, float %541, i64 1, !dbg !100
  %invariant.op89 = or i32 %26, 12288, !dbg !101
  br label %570, !dbg !101

570:                                              ; preds = %__nv_rsqrtf.exit17, %570
  %indvars.iv36 = phi i64 [ 0, %__nv_rsqrtf.exit17 ], [ %indvars.iv.next37, %570 ]
  %571 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit17 ], [ %618, %570 ]
  %572 = or disjoint i64 %indvars.iv36, %78, !dbg !102
  %573 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !103
  %574 = add i32 %51, %573, !dbg !103
  %575 = sext i32 %574 to i64, !dbg !104
  %576 = getelementptr bfloat, ptr addrspace(1) %8, i64 %575, !dbg !104
  %577 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %576, i1 %22) #5, !dbg !105
  %extelt.offset = lshr i32 %577, 16, !dbg !105
  %578 = trunc nuw i32 %extelt.offset to i16, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %579 = trunc i32 %577 to i16, !dbg !99
  %580 = insertelement <1 x i16> poison, i16 %579, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %559, <1 x i16> %580, i1 true) #5, !dbg !99
  %581 = insertelement <1 x i16> poison, i16 %578, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %561, <1 x i16> %581, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %.reass25.reass.reass = or i32 %573, %invariant.op89
  %582 = zext nneg i32 %.reass25.reass.reass to i64, !dbg !106
  %583 = getelementptr float, ptr addrspace(1) %1, i64 %582, !dbg !106
  %584 = getelementptr bfloat, ptr addrspace(1) %2, i64 %582, !dbg !107
  %585 = add nuw nsw i64 %572, 9216, !dbg !108
  %586 = getelementptr float, ptr addrspace(1) %1, i64 %585, !dbg !109
  %587 = getelementptr bfloat, ptr addrspace(1) %2, i64 %585, !dbg !110
  %588 = fcmp uno <4 x float> %571, zeroinitializer, !dbg !111
  %589 = load <2 x bfloat>, ptr addrspace(3) %563, align 2, !dbg !99
  %590 = fpext <2 x bfloat> %589 to <2 x float>, !dbg !113
  %591 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %583, i1 true) #5, !dbg !114
  %592 = bitcast i32 %591 to float, !dbg !114
  %593 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %584, i1 true) #5, !dbg !115
  %594 = bitcast i16 %593 to bfloat, !dbg !115
  %595 = fpext bfloat %594 to float, !dbg !116
  %596 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %586, i1 true) #5, !dbg !117
  %597 = bitcast i32 %596 to float, !dbg !117
  %598 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %587, i1 true) #5, !dbg !118
  %599 = bitcast i16 %598 to bfloat, !dbg !118
  %600 = fpext bfloat %599 to float, !dbg !119
  %601 = fsub <2 x float> %590, %569, !dbg !100
  %602 = fmul <2 x float> %567, %601, !dbg !99
  %603 = fadd float %592, %595, !dbg !120
  %604 = fadd float %603, 1.000000e+00, !dbg !121
  %605 = insertelement <2 x float> poison, float %604, i64 0, !dbg !122
  %606 = shufflevector <2 x float> %605, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !122
  %607 = fmul <2 x float> %602, %606, !dbg !122
  %608 = fadd float %597, %600, !dbg !123
  %609 = insertelement <2 x float> poison, float %608, i64 0, !dbg !124
  %610 = shufflevector <2 x float> %607, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>, !dbg !124
  %611 = shufflevector <2 x float> %609, <2 x float> poison, <4 x i32> zeroinitializer, !dbg !124
  %612 = fadd <4 x float> %610, %611, !dbg !124
  %613 = fcmp ogt <4 x float> %571, %612, !dbg !125
  %614 = fcmp olt <4 x float> %571, %612, !dbg !125
  %615 = shufflevector <4 x i1> %613, <4 x i1> %614, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !125
  %616 = or <4 x i1> %588, %615, !dbg !126
  %617 = select <4 x i1> %616, <4 x float> %571, <4 x float> %612, !dbg !127
  %618 = select <4 x i1> %565, <4 x float> %617, <4 x float> %571, !dbg !98
  %619 = getelementptr bfloat, ptr addrspace(1) %9, i64 %575, !dbg !128
  %620 = extractelement <4 x float> %612, i64 1, !dbg !129
  %621 = fptrunc float %620 to bfloat, !dbg !129
  %622 = extractelement <4 x float> %612, i64 0, !dbg !129
  %623 = fptrunc float %622 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %624 = bitcast bfloat %621 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %72, <1 x i16> %624, i1 true) #5, !dbg !129
  %625 = bitcast bfloat %623 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %73, <1 x i16> %625, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %626 = load i32, ptr addrspace(3) %77, align 4, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %626, ptr addrspace(1) %619, i1 %22) #5, !dbg !129
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 512, !dbg !101
  %627 = icmp samesign ult i64 %indvars.iv36, 2560, !dbg !101
  br i1 %627, label %570, label %628, !dbg !101

628:                                              ; preds = %570
  %629 = and i32 %18, 1, !dbg !11
  %630 = or disjoint i32 %17, %629, !dbg !12
  %631 = icmp slt i32 %630, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %632 = extractelement <4 x float> %618, i64 3, !dbg !130
  %633 = bitcast float %632 to i32, !dbg !130
  %634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %633, i32 16, i32 31), !dbg !130
  %635 = bitcast i32 %634 to float, !dbg !130
  %636 = fcmp olt float %632, %635, !dbg !132
  %637 = fcmp uno <4 x float> %618, zeroinitializer, !dbg !133
  %638 = extractelement <4 x i1> %637, i64 3, !dbg !135
  %639 = or i1 %638, %636, !dbg !135
  %640 = select i1 %639, float %632, float %635, !dbg !136
  %641 = bitcast float %640 to i32, !dbg !130
  %642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %641, i32 8, i32 31), !dbg !130
  %643 = bitcast i32 %642 to float, !dbg !130
  %644 = fcmp olt float %640, %643, !dbg !132
  %645 = fcmp uno float %640, 0.000000e+00, !dbg !137
  %646 = or i1 %644, %645, !dbg !135
  %647 = select i1 %646, float %640, float %643, !dbg !136
  %648 = bitcast float %647 to i32, !dbg !130
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 4, i32 31), !dbg !130
  %650 = bitcast i32 %649 to float, !dbg !130
  %651 = fcmp olt float %647, %650, !dbg !132
  %652 = fcmp uno float %647, 0.000000e+00, !dbg !137
  %653 = or i1 %651, %652, !dbg !135
  %654 = select i1 %653, float %647, float %650, !dbg !136
  %655 = bitcast float %654 to i32, !dbg !130
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 2, i32 31), !dbg !130
  %657 = bitcast i32 %656 to float, !dbg !130
  %658 = fcmp olt float %654, %657, !dbg !132
  %659 = fcmp uno float %654, 0.000000e+00, !dbg !137
  %660 = or i1 %658, %659, !dbg !135
  %661 = select i1 %660, float %654, float %657, !dbg !136
  %662 = bitcast float %661 to i32, !dbg !130
  %663 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %662, i32 1, i32 31), !dbg !130
  %664 = bitcast i32 %663 to float, !dbg !130
  %665 = fcmp olt float %661, %664, !dbg !132
  %666 = fcmp uno float %661, 0.000000e+00, !dbg !137
  %667 = or i1 %665, %666, !dbg !135
  %668 = extractelement <4 x float> %618, i64 2, !dbg !130
  %669 = bitcast float %668 to i32, !dbg !130
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 16, i32 31), !dbg !130
  %671 = bitcast i32 %670 to float, !dbg !130
  %672 = fcmp olt float %668, %671, !dbg !132
  %673 = extractelement <4 x i1> %637, i64 2, !dbg !135
  %674 = or i1 %673, %672, !dbg !135
  %675 = select i1 %674, float %668, float %671, !dbg !136
  %676 = bitcast float %675 to i32, !dbg !130
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %676, i32 8, i32 31), !dbg !130
  %678 = bitcast i32 %677 to float, !dbg !130
  %679 = fcmp olt float %675, %678, !dbg !132
  %680 = fcmp uno float %675, 0.000000e+00, !dbg !137
  %681 = or i1 %679, %680, !dbg !135
  %682 = select i1 %681, float %675, float %678, !dbg !136
  %683 = bitcast float %682 to i32, !dbg !130
  %684 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %683, i32 4, i32 31), !dbg !130
  %685 = bitcast i32 %684 to float, !dbg !130
  %686 = fcmp olt float %682, %685, !dbg !132
  %687 = fcmp uno float %682, 0.000000e+00, !dbg !137
  %688 = or i1 %686, %687, !dbg !135
  %689 = select i1 %688, float %682, float %685, !dbg !136
  %690 = bitcast float %689 to i32, !dbg !130
  %691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %690, i32 2, i32 31), !dbg !130
  %692 = bitcast i32 %691 to float, !dbg !130
  %693 = fcmp olt float %689, %692, !dbg !132
  %694 = fcmp uno float %689, 0.000000e+00, !dbg !137
  %695 = or i1 %693, %694, !dbg !135
  %696 = select i1 %695, float %689, float %692, !dbg !136
  %697 = bitcast float %696 to i32, !dbg !130
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %697, i32 1, i32 31), !dbg !130
  %699 = bitcast i32 %698 to float, !dbg !130
  %700 = fcmp olt float %696, %699, !dbg !132
  %701 = fcmp uno float %696, 0.000000e+00, !dbg !137
  %702 = or i1 %700, %701, !dbg !135
  %703 = select i1 %667, i32 %662, i32 %663, !dbg !136
  %704 = insertelement <1 x i32> poison, i32 %703, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %704, i1 %429) #5, !dbg !130
  %705 = select i1 %702, i32 %697, i32 %698, !dbg !136
  %706 = insertelement <1 x i32> poison, i32 %705, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %706, i1 %429) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %707 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %444, i1 %443) #5, !dbg !130
  %708 = bitcast i32 %707 to float, !dbg !130
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %707, i32 8, i32 31), !dbg !130
  %710 = bitcast i32 %709 to float, !dbg !130
  %711 = fcmp olt float %708, %710, !dbg !132
  %712 = fcmp uno float %708, 0.000000e+00, !dbg !137
  %713 = or i1 %712, %711, !dbg !135
  %714 = select i1 %713, float %708, float %710, !dbg !136
  %715 = bitcast float %714 to i32, !dbg !130
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 4, i32 31), !dbg !130
  %717 = bitcast i32 %716 to float, !dbg !130
  %718 = fcmp olt float %714, %717, !dbg !132
  %719 = fcmp uno float %714, 0.000000e+00, !dbg !137
  %720 = or i1 %718, %719, !dbg !135
  %721 = select i1 %720, float %714, float %717, !dbg !136
  %722 = bitcast float %721 to i32, !dbg !130
  %723 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %722, i32 2, i32 31), !dbg !130
  %724 = bitcast i32 %723 to float, !dbg !130
  %725 = fcmp olt float %721, %724, !dbg !132
  %726 = fcmp uno float %721, 0.000000e+00, !dbg !137
  %727 = or i1 %725, %726, !dbg !135
  %728 = select i1 %727, float %721, float %724, !dbg !136
  %729 = bitcast float %728 to i32, !dbg !130
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 1, i32 31), !dbg !130
  %731 = bitcast i32 %730 to float, !dbg !130
  %732 = fcmp olt float %728, %731, !dbg !132
  %733 = fcmp uno float %728, 0.000000e+00, !dbg !137
  %734 = or i1 %732, %733, !dbg !135
  %735 = select i1 %734, i32 %729, i32 %730, !dbg !136
  %736 = insertelement <1 x i32> poison, i32 %735, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %736, i1 %536) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %737 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !130
  %738 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %739 = bitcast float %737 to i32, !dbg !138
  %740 = bitcast float %738 to i32, !dbg !138
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %739, i32 %740, i1 true) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %741 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %629, !dbg !138
  %742 = load float, ptr addrspace(3) %741, align 4, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %743 = extractelement <4 x float> %618, i64 1, !dbg !139
  %744 = bitcast float %743 to i32, !dbg !139
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 16, i32 31), !dbg !139
  %746 = bitcast i32 %745 to float, !dbg !139
  %747 = fcmp ogt float %743, %746, !dbg !140
  %748 = extractelement <4 x i1> %637, i64 1, !dbg !141
  %749 = or i1 %748, %747, !dbg !141
  %750 = select i1 %749, float %743, float %746, !dbg !142
  %751 = bitcast float %750 to i32, !dbg !139
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 8, i32 31), !dbg !139
  %753 = bitcast i32 %752 to float, !dbg !139
  %754 = fcmp ogt float %750, %753, !dbg !140
  %755 = fcmp uno float %750, 0.000000e+00, !dbg !133
  %756 = or i1 %754, %755, !dbg !141
  %757 = select i1 %756, float %750, float %753, !dbg !142
  %758 = bitcast float %757 to i32, !dbg !139
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 4, i32 31), !dbg !139
  %760 = bitcast i32 %759 to float, !dbg !139
  %761 = fcmp ogt float %757, %760, !dbg !140
  %762 = fcmp uno float %757, 0.000000e+00, !dbg !133
  %763 = or i1 %761, %762, !dbg !141
  %764 = select i1 %763, float %757, float %760, !dbg !142
  %765 = bitcast float %764 to i32, !dbg !139
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 2, i32 31), !dbg !139
  %767 = bitcast i32 %766 to float, !dbg !139
  %768 = fcmp ogt float %764, %767, !dbg !140
  %769 = fcmp uno float %764, 0.000000e+00, !dbg !133
  %770 = or i1 %768, %769, !dbg !141
  %771 = select i1 %770, float %764, float %767, !dbg !142
  %772 = bitcast float %771 to i32, !dbg !139
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 1, i32 31), !dbg !139
  %774 = bitcast i32 %773 to float, !dbg !139
  %775 = fcmp ogt float %771, %774, !dbg !140
  %776 = fcmp uno float %771, 0.000000e+00, !dbg !133
  %777 = or i1 %775, %776, !dbg !141
  %778 = extractelement <4 x float> %618, i64 0, !dbg !139
  %779 = bitcast float %778 to i32, !dbg !139
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 16, i32 31), !dbg !139
  %781 = bitcast i32 %780 to float, !dbg !139
  %782 = fcmp ogt float %778, %781, !dbg !140
  %783 = extractelement <4 x i1> %637, i64 0, !dbg !141
  %784 = or i1 %783, %782, !dbg !141
  %785 = select i1 %784, float %778, float %781, !dbg !142
  %786 = bitcast float %785 to i32, !dbg !139
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 8, i32 31), !dbg !139
  %788 = bitcast i32 %787 to float, !dbg !139
  %789 = fcmp ogt float %785, %788, !dbg !140
  %790 = fcmp uno float %785, 0.000000e+00, !dbg !133
  %791 = or i1 %789, %790, !dbg !141
  %792 = select i1 %791, float %785, float %788, !dbg !142
  %793 = bitcast float %792 to i32, !dbg !139
  %794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %793, i32 4, i32 31), !dbg !139
  %795 = bitcast i32 %794 to float, !dbg !139
  %796 = fcmp ogt float %792, %795, !dbg !140
  %797 = fcmp uno float %792, 0.000000e+00, !dbg !133
  %798 = or i1 %796, %797, !dbg !141
  %799 = select i1 %798, float %792, float %795, !dbg !142
  %800 = bitcast float %799 to i32, !dbg !139
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 2, i32 31), !dbg !139
  %802 = bitcast i32 %801 to float, !dbg !139
  %803 = fcmp ogt float %799, %802, !dbg !140
  %804 = fcmp uno float %799, 0.000000e+00, !dbg !133
  %805 = or i1 %803, %804, !dbg !141
  %806 = select i1 %805, float %799, float %802, !dbg !142
  %807 = bitcast float %806 to i32, !dbg !139
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 1, i32 31), !dbg !139
  %809 = bitcast i32 %808 to float, !dbg !139
  %810 = fcmp ogt float %806, %809, !dbg !140
  %811 = fcmp uno float %806, 0.000000e+00, !dbg !133
  %812 = or i1 %810, %811, !dbg !141
  %813 = select i1 %777, i32 %772, i32 %773, !dbg !142
  %814 = insertelement <1 x i32> poison, i32 %813, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %814, i1 %429) #5, !dbg !139
  %815 = select i1 %812, i32 %807, i32 %808, !dbg !142
  %816 = insertelement <1 x i32> poison, i32 %815, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %816, i1 %429) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %817 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %444, i1 %443) #5, !dbg !139
  %818 = bitcast i32 %817 to float, !dbg !139
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %817, i32 8, i32 31), !dbg !139
  %820 = bitcast i32 %819 to float, !dbg !139
  %821 = fcmp ogt float %818, %820, !dbg !140
  %822 = fcmp uno float %818, 0.000000e+00, !dbg !133
  %823 = or i1 %822, %821, !dbg !141
  %824 = select i1 %823, float %818, float %820, !dbg !142
  %825 = bitcast float %824 to i32, !dbg !139
  %826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %825, i32 4, i32 31), !dbg !139
  %827 = bitcast i32 %826 to float, !dbg !139
  %828 = fcmp ogt float %824, %827, !dbg !140
  %829 = fcmp uno float %824, 0.000000e+00, !dbg !133
  %830 = or i1 %828, %829, !dbg !141
  %831 = select i1 %830, float %824, float %827, !dbg !142
  %832 = bitcast float %831 to i32, !dbg !139
  %833 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %832, i32 2, i32 31), !dbg !139
  %834 = bitcast i32 %833 to float, !dbg !139
  %835 = fcmp ogt float %831, %834, !dbg !140
  %836 = fcmp uno float %831, 0.000000e+00, !dbg !133
  %837 = or i1 %835, %836, !dbg !141
  %838 = select i1 %837, float %831, float %834, !dbg !142
  %839 = bitcast float %838 to i32, !dbg !139
  %840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %839, i32 1, i32 31), !dbg !139
  %841 = bitcast i32 %840 to float, !dbg !139
  %842 = fcmp ogt float %838, %841, !dbg !140
  %843 = fcmp uno float %838, 0.000000e+00, !dbg !133
  %844 = or i1 %842, %843, !dbg !141
  %845 = select i1 %844, i32 %839, i32 %840, !dbg !142
  %846 = insertelement <1 x i32> poison, i32 %845, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %846, i1 %536) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %847 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !139
  %848 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %849 = bitcast float %847 to i32, !dbg !143
  %850 = bitcast float %848 to i32, !dbg !143
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %849, i32 %850, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %851 = load float, ptr addrspace(3) %741, align 4, !dbg !143
  %852 = sext i32 %630 to i64, !dbg !144
  %853 = getelementptr bfloat, ptr addrspace(1) %10, i64 %852, !dbg !144
  %854 = fptrunc float %742 to bfloat, !dbg !138
  %855 = and i32 %18, 510, !dbg !138
  %856 = icmp eq i32 %855, 0, !dbg !138
  %857 = bitcast bfloat %854 to i16, !dbg !138
  %858 = and i1 %856, %631, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %857, ptr addrspace(1) %853, i1 %858) #5, !dbg !138
  %859 = getelementptr bfloat, ptr addrspace(1) %11, i64 %852, !dbg !145
  %860 = fptrunc float %851 to bfloat, !dbg !143
  %861 = bitcast bfloat %860 to i16, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %861, ptr addrspace(1) %859, i1 %858) #5, !dbg !143
  %.inv5 = fcmp oge float %737, 0.000000e+00, !dbg !146
  %862 = select i1 %.inv5, float 0.000000e+00, float %737, !dbg !146
  %.inv6 = fcmp oge float %738, 0.000000e+00, !dbg !146
  %863 = select i1 %.inv6, float 0.000000e+00, float %738, !dbg !146
  %864 = fsub float 0.000000e+00, %862, !dbg !148
  %865 = fsub float 0.000000e+00, %863, !dbg !148
  %.inv7 = fcmp ole float %847, 0.000000e+00, !dbg !149
  %866 = select i1 %.inv7, float 0.000000e+00, float %847, !dbg !149
  %.inv8 = fcmp ole float %848, 0.000000e+00, !dbg !149
  %867 = select i1 %.inv8, float 0.000000e+00, float %848, !dbg !149
  %868 = fcmp ogt float %864, %866, !dbg !151
  %869 = fcmp ogt float %865, %867, !dbg !151
  %870 = fcmp uno float %864, 0.000000e+00, !dbg !153
  %871 = fcmp uno float %865, 0.000000e+00, !dbg !153
  %872 = or i1 %870, %868, !dbg !154
  %873 = or i1 %871, %869, !dbg !154
  %874 = select i1 %872, float %864, float %866, !dbg !155
  %875 = select i1 %873, float %865, float %867, !dbg !155
  %876 = fmul float %874, 0x3F80204080000000, !dbg !156
  %877 = fmul float %875, 0x3F80204080000000, !dbg !156
  %878 = fcmp ogt float %876, 0x3EE4F8B580000000, !dbg !157
  %879 = fcmp ogt float %877, 0x3EE4F8B580000000, !dbg !157
  %880 = fcmp uno float %876, 0.000000e+00, !dbg !159
  %881 = fcmp uno float %877, 0.000000e+00, !dbg !159
  %882 = or i1 %878, %880, !dbg !160
  %883 = or i1 %879, %881, !dbg !160
  %884 = select i1 %882, float %876, float 0x3EE4F8B580000000, !dbg !161
  %885 = select i1 %883, float %877, float 0x3EE4F8B580000000, !dbg !161
  %886 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %884), !dbg !162
  %887 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %885), !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %888 = bitcast float %886 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %888, i1 true) #5, !dbg !163
  %889 = bitcast float %887 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %889, i1 true) #5, !dbg !163
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %890 = lshr exact i32 %19, 5, !dbg !163
  %891 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %890, !dbg !163
  %892 = load float, ptr addrspace(3) %891, align 8, !dbg !163
  %893 = getelementptr bfloat, ptr addrspace(1) %9, i64 %79, !dbg !164
  %894 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %893, i1 %22) #5, !dbg !165
  %895 = bitcast i32 %894 to <2 x bfloat>, !dbg !165
  %896 = extractelement <2 x bfloat> %895, i64 0, !dbg !165
  %897 = extractelement <2 x bfloat> %895, i64 1, !dbg !165
  %898 = fpext bfloat %896 to float, !dbg !166
  %899 = fpext bfloat %897 to float, !dbg !166
  %900 = fmul float %892, %898, !dbg !163
  %901 = fmul float %892, %899, !dbg !163
  %902 = tail call float @llvm.nvvm.round.f(float %900) #5, !dbg !167
  %903 = tail call float @llvm.nvvm.round.f(float %901) #5, !dbg !167
  %904 = insertelement <2 x float> poison, float %902, i64 0, !dbg !168
  %905 = insertelement <2 x float> %904, float %903, i64 1, !dbg !168
  %906 = fcmp ogt <2 x float> %905, splat (float -1.270000e+02), !dbg !168
  %907 = fcmp uno <2 x float> %905, zeroinitializer, !dbg !170
  %908 = or <2 x i1> %906, %907, !dbg !171
  %909 = select <2 x i1> %908, <2 x float> %905, <2 x float> splat (float -1.270000e+02), !dbg !172
  %910 = fcmp olt <2 x float> %909, splat (float 1.270000e+02), !dbg !173
  %911 = fcmp uno <2 x float> %909, zeroinitializer, !dbg !175
  %912 = or <2 x i1> %910, %911, !dbg !176
  %913 = fptosi <2 x float> %909 to <2 x i8>, !dbg !177
  %914 = select <2 x i1> %912, <2 x i8> %913, <2 x i8> splat (i8 127), !dbg !178
  %915 = getelementptr i8, ptr addrspace(1) %12, i64 %79, !dbg !179
  %916 = bitcast <2 x i8> %914 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %916, ptr addrspace(1) %915, i1 %22) #5, !dbg !180
  %917 = or disjoint i32 %51, 512, !dbg !181
  %918 = sext i32 %917 to i64, !dbg !164
  %919 = getelementptr bfloat, ptr addrspace(1) %9, i64 %918, !dbg !164
  %920 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %919, i1 %22) #5, !dbg !165
  %921 = bitcast i32 %920 to <2 x bfloat>, !dbg !165
  %922 = extractelement <2 x bfloat> %921, i64 0, !dbg !165
  %923 = extractelement <2 x bfloat> %921, i64 1, !dbg !165
  %924 = fpext bfloat %922 to float, !dbg !166
  %925 = fpext bfloat %923 to float, !dbg !166
  %926 = fmul float %892, %924, !dbg !163
  %927 = fmul float %892, %925, !dbg !163
  %928 = tail call float @llvm.nvvm.round.f(float %926) #5, !dbg !167
  %929 = tail call float @llvm.nvvm.round.f(float %927) #5, !dbg !167
  %930 = insertelement <2 x float> poison, float %928, i64 0, !dbg !168
  %931 = insertelement <2 x float> %930, float %929, i64 1, !dbg !168
  %932 = fcmp ogt <2 x float> %931, splat (float -1.270000e+02), !dbg !168
  %933 = fcmp uno <2 x float> %931, zeroinitializer, !dbg !170
  %934 = or <2 x i1> %932, %933, !dbg !171
  %935 = select <2 x i1> %934, <2 x float> %931, <2 x float> splat (float -1.270000e+02), !dbg !172
  %936 = fcmp olt <2 x float> %935, splat (float 1.270000e+02), !dbg !173
  %937 = fcmp uno <2 x float> %935, zeroinitializer, !dbg !175
  %938 = or <2 x i1> %936, %937, !dbg !176
  %939 = fptosi <2 x float> %935 to <2 x i8>, !dbg !177
  %940 = select <2 x i1> %938, <2 x i8> %939, <2 x i8> splat (i8 127), !dbg !178
  %941 = getelementptr i8, ptr addrspace(1) %12, i64 %918, !dbg !179
  %942 = bitcast <2 x i8> %940 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %942, ptr addrspace(1) %941, i1 %22) #5, !dbg !180
  %943 = add i32 %51, 1024, !dbg !181
  %944 = sext i32 %943 to i64, !dbg !164
  %945 = getelementptr bfloat, ptr addrspace(1) %9, i64 %944, !dbg !164
  %946 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %945, i1 %22) #5, !dbg !165
  %947 = bitcast i32 %946 to <2 x bfloat>, !dbg !165
  %948 = extractelement <2 x bfloat> %947, i64 0, !dbg !165
  %949 = extractelement <2 x bfloat> %947, i64 1, !dbg !165
  %950 = fpext bfloat %948 to float, !dbg !166
  %951 = fpext bfloat %949 to float, !dbg !166
  %952 = fmul float %892, %950, !dbg !163
  %953 = fmul float %892, %951, !dbg !163
  %954 = tail call float @llvm.nvvm.round.f(float %952) #5, !dbg !167
  %955 = tail call float @llvm.nvvm.round.f(float %953) #5, !dbg !167
  %956 = insertelement <2 x float> poison, float %954, i64 0, !dbg !168
  %957 = insertelement <2 x float> %956, float %955, i64 1, !dbg !168
  %958 = fcmp ogt <2 x float> %957, splat (float -1.270000e+02), !dbg !168
  %959 = fcmp uno <2 x float> %957, zeroinitializer, !dbg !170
  %960 = or <2 x i1> %958, %959, !dbg !171
  %961 = select <2 x i1> %960, <2 x float> %957, <2 x float> splat (float -1.270000e+02), !dbg !172
  %962 = fcmp olt <2 x float> %961, splat (float 1.270000e+02), !dbg !173
  %963 = fcmp uno <2 x float> %961, zeroinitializer, !dbg !175
  %964 = or <2 x i1> %962, %963, !dbg !176
  %965 = fptosi <2 x float> %961 to <2 x i8>, !dbg !177
  %966 = select <2 x i1> %964, <2 x i8> %965, <2 x i8> splat (i8 127), !dbg !178
  %967 = getelementptr i8, ptr addrspace(1) %12, i64 %944, !dbg !179
  %968 = bitcast <2 x i8> %966 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %968, ptr addrspace(1) %967, i1 %22) #5, !dbg !180
  %969 = add i32 %51, 1536, !dbg !181
  %970 = sext i32 %969 to i64, !dbg !164
  %971 = getelementptr bfloat, ptr addrspace(1) %9, i64 %970, !dbg !164
  %972 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %971, i1 %22) #5, !dbg !165
  %973 = bitcast i32 %972 to <2 x bfloat>, !dbg !165
  %974 = extractelement <2 x bfloat> %973, i64 0, !dbg !165
  %975 = extractelement <2 x bfloat> %973, i64 1, !dbg !165
  %976 = fpext bfloat %974 to float, !dbg !166
  %977 = fpext bfloat %975 to float, !dbg !166
  %978 = fmul float %892, %976, !dbg !163
  %979 = fmul float %892, %977, !dbg !163
  %980 = tail call float @llvm.nvvm.round.f(float %978) #5, !dbg !167
  %981 = tail call float @llvm.nvvm.round.f(float %979) #5, !dbg !167
  %982 = insertelement <2 x float> poison, float %980, i64 0, !dbg !168
  %983 = insertelement <2 x float> %982, float %981, i64 1, !dbg !168
  %984 = fcmp ogt <2 x float> %983, splat (float -1.270000e+02), !dbg !168
  %985 = fcmp uno <2 x float> %983, zeroinitializer, !dbg !170
  %986 = or <2 x i1> %984, %985, !dbg !171
  %987 = select <2 x i1> %986, <2 x float> %983, <2 x float> splat (float -1.270000e+02), !dbg !172
  %988 = fcmp olt <2 x float> %987, splat (float 1.270000e+02), !dbg !173
  %989 = fcmp uno <2 x float> %987, zeroinitializer, !dbg !175
  %990 = or <2 x i1> %988, %989, !dbg !176
  %991 = fptosi <2 x float> %987 to <2 x i8>, !dbg !177
  %992 = select <2 x i1> %990, <2 x i8> %991, <2 x i8> splat (i8 127), !dbg !178
  %993 = getelementptr i8, ptr addrspace(1) %12, i64 %970, !dbg !179
  %994 = bitcast <2 x i8> %992 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %994, ptr addrspace(1) %993, i1 %22) #5, !dbg !180
  %995 = add i32 %51, 2048, !dbg !181
  %996 = sext i32 %995 to i64, !dbg !164
  %997 = getelementptr bfloat, ptr addrspace(1) %9, i64 %996, !dbg !164
  %998 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %997, i1 %22) #5, !dbg !165
  %999 = bitcast i32 %998 to <2 x bfloat>, !dbg !165
  %1000 = extractelement <2 x bfloat> %999, i64 0, !dbg !165
  %1001 = extractelement <2 x bfloat> %999, i64 1, !dbg !165
  %1002 = fpext bfloat %1000 to float, !dbg !166
  %1003 = fpext bfloat %1001 to float, !dbg !166
  %1004 = fmul float %892, %1002, !dbg !163
  %1005 = fmul float %892, %1003, !dbg !163
  %1006 = tail call float @llvm.nvvm.round.f(float %1004) #5, !dbg !167
  %1007 = tail call float @llvm.nvvm.round.f(float %1005) #5, !dbg !167
  %1008 = insertelement <2 x float> poison, float %1006, i64 0, !dbg !168
  %1009 = insertelement <2 x float> %1008, float %1007, i64 1, !dbg !168
  %1010 = fcmp ogt <2 x float> %1009, splat (float -1.270000e+02), !dbg !168
  %1011 = fcmp uno <2 x float> %1009, zeroinitializer, !dbg !170
  %1012 = or <2 x i1> %1010, %1011, !dbg !171
  %1013 = select <2 x i1> %1012, <2 x float> %1009, <2 x float> splat (float -1.270000e+02), !dbg !172
  %1014 = fcmp olt <2 x float> %1013, splat (float 1.270000e+02), !dbg !173
  %1015 = fcmp uno <2 x float> %1013, zeroinitializer, !dbg !175
  %1016 = or <2 x i1> %1014, %1015, !dbg !176
  %1017 = fptosi <2 x float> %1013 to <2 x i8>, !dbg !177
  %1018 = select <2 x i1> %1016, <2 x i8> %1017, <2 x i8> splat (i8 127), !dbg !178
  %1019 = getelementptr i8, ptr addrspace(1) %12, i64 %996, !dbg !179
  %1020 = bitcast <2 x i8> %1018 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1020, ptr addrspace(1) %1019, i1 %22) #5, !dbg !180
  %1021 = add i32 %51, 2560, !dbg !181
  %1022 = sext i32 %1021 to i64, !dbg !164
  %1023 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1022, !dbg !164
  %1024 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1023, i1 %22) #5, !dbg !165
  %1025 = bitcast i32 %1024 to <2 x bfloat>, !dbg !165
  %1026 = extractelement <2 x bfloat> %1025, i64 0, !dbg !165
  %1027 = extractelement <2 x bfloat> %1025, i64 1, !dbg !165
  %1028 = fpext bfloat %1026 to float, !dbg !166
  %1029 = fpext bfloat %1027 to float, !dbg !166
  %1030 = fmul float %892, %1028, !dbg !163
  %1031 = fmul float %892, %1029, !dbg !163
  %1032 = tail call float @llvm.nvvm.round.f(float %1030) #5, !dbg !167
  %1033 = tail call float @llvm.nvvm.round.f(float %1031) #5, !dbg !167
  %1034 = insertelement <2 x float> poison, float %1032, i64 0, !dbg !168
  %1035 = insertelement <2 x float> %1034, float %1033, i64 1, !dbg !168
  %1036 = fcmp ogt <2 x float> %1035, splat (float -1.270000e+02), !dbg !168
  %1037 = fcmp uno <2 x float> %1035, zeroinitializer, !dbg !170
  %1038 = or <2 x i1> %1036, %1037, !dbg !171
  %1039 = select <2 x i1> %1038, <2 x float> %1035, <2 x float> splat (float -1.270000e+02), !dbg !172
  %1040 = fcmp olt <2 x float> %1039, splat (float 1.270000e+02), !dbg !173
  %1041 = fcmp uno <2 x float> %1039, zeroinitializer, !dbg !175
  %1042 = or <2 x i1> %1040, %1041, !dbg !176
  %1043 = fptosi <2 x float> %1039 to <2 x i8>, !dbg !177
  %1044 = select <2 x i1> %1042, <2 x i8> %1043, <2 x i8> splat (i8 127), !dbg !178
  %1045 = getelementptr i8, ptr addrspace(1) %12, i64 %1022, !dbg !179
  %1046 = bitcast <2 x i8> %1044 to i16, !dbg !180
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1046, ptr addrspace(1) %1045, i1 %22) #5, !dbg !180
  ret void, !dbg !182
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 40, column: 34, scope: !6)
!40 = !DILocation(line: 40, column: 51, scope: !6)
!41 = !DILocation(line: 40, column: 113, scope: !6)
!42 = !DILocation(line: 41, column: 41, scope: !6)
!43 = !DILocation(line: 41, column: 34, scope: !6)
!44 = !DILocation(line: 41, column: 48, scope: !6)
!45 = !DILocation(line: 42, column: 34, scope: !6)
!46 = !DILocation(line: 42, column: 48, scope: !6)
!47 = !DILocation(line: 43, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 51, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 44, column: 42, scope: !6)
!51 = !DILocation(line: 45, column: 35, scope: !6)
!52 = !DILocation(line: 45, column: 42, scope: !6)
!53 = !DILocation(line: 48, column: 23, scope: !6)
!54 = !DILocation(line: 60, column: 23, scope: !6)
!55 = !DILocation(line: 42, column: 101, scope: !6)
!56 = !DILocation(line: 47, column: 22, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 45, column: 95, scope: !6)
!60 = !DILocation(line: 62, column: 24, scope: !6)
!61 = !DILocation(line: 63, column: 23, scope: !6)
!62 = !DILocation(line: 64, column: 23, scope: !6)
!63 = !DILocation(line: 73, column: 29, scope: !6)
!64 = !DILocation(line: 73, column: 53, scope: !6)
!65 = !DILocation(line: 72, column: 68, scope: !6)
!66 = !DILocation(line: 70, column: 64, scope: !6)
!67 = !DILocation(line: 35, column: 31, scope: !6)
!68 = !DILocation(line: 40, column: 41, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 68, column: 55, scope: !6)
!71 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !70)
!72 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !70)
!73 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !70)
!74 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !70)
!75 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !70)
!76 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !70)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = distinct !{!78, !79}
!79 = !{!"llvm.loop.peeled.count", i32 1}
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 112, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 90, column: 35, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !112)
!112 = !DILocation(line: 111, column: 47, scope: !6)
!113 = !DILocation(line: 86, column: 115, scope: !6)
!114 = !DILocation(line: 87, column: 50, scope: !6)
!115 = !DILocation(line: 88, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 89, column: 49, scope: !6)
!118 = !DILocation(line: 90, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 102, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 103, column: 24, scope: !6)
!122 = !DILocation(line: 104, column: 24, scope: !6)
!123 = !DILocation(line: 106, column: 24, scope: !6)
!124 = !DILocation(line: 107, column: 24, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !112)
!126 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !112)
!127 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !112)
!128 = !DILocation(line: 113, column: 29, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !131)
!131 = !DILocation(line: 114, column: 40, scope: !6)
!132 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !134)
!134 = !DILocation(line: 115, column: 40, scope: !6)
!135 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !131)
!136 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !131)
!137 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !131)
!138 = !DILocation(line: 116, column: 37, scope: !6)
!139 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !134)
!140 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !134)
!141 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !134)
!142 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !134)
!143 = !DILocation(line: 117, column: 37, scope: !6)
!144 = !DILocation(line: 116, column: 25, scope: !6)
!145 = !DILocation(line: 117, column: 25, scope: !6)
!146 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !147)
!147 = !DILocation(line: 126, column: 46, scope: !6)
!148 = !DILocation(line: 127, column: 17, scope: !6)
!149 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !150)
!150 = !DILocation(line: 128, column: 46, scope: !6)
!151 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !152)
!152 = !DILocation(line: 129, column: 46, scope: !6)
!153 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !152)
!154 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !152)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !152)
!156 = !DILocation(line: 131, column: 24, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 134, column: 46, scope: !6)
!159 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 137, column: 25, scope: !6)
!163 = !DILocation(line: 140, column: 24, scope: !6)
!164 = !DILocation(line: 124, column: 36, scope: !6)
!165 = !DILocation(line: 124, column: 53, scope: !6)
!166 = !DILocation(line: 124, column: 115, scope: !6)
!167 = !DILocation(line: 141, column: 36, scope: !6)
!168 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !169)
!169 = !DILocation(line: 144, column: 46, scope: !6)
!170 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !169)
!171 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !169)
!172 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !169)
!173 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !174)
!174 = !DILocation(line: 146, column: 46, scope: !6)
!175 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !174)
!176 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !174)
!177 = !DILocation(line: 148, column: 25, scope: !6)
!178 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !174)
!179 = !DILocation(line: 149, column: 29, scope: !6)
!180 = !DILocation(line: 149, column: 53, scope: !6)
!181 = !DILocation(line: 124, column: 43, scope: !6)
!182 = !DILocation(line: 118, column: 4, scope: !6)
