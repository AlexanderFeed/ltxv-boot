; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !6 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %14 = icmp slt i32 %13, 512, !dbg !10
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %16 = and i32 %15, 31, !dbg !11
  %17 = shl i32 %15, 4, !dbg !11
  %18 = and i32 %17, 8176, !dbg !11
  %19 = or disjoint i32 %18, 4, !dbg !11
  %20 = or disjoint i32 %18, 8, !dbg !11
  %21 = or disjoint i32 %18, 12, !dbg !11
  %22 = shl i32 %15, 2, !dbg !11
  %23 = and i32 %22, 2044, !dbg !11
  %24 = or disjoint i32 %23, 2048, !dbg !11
  %25 = or disjoint i32 %23, 4096, !dbg !11
  %26 = or disjoint i32 %23, 6144, !dbg !11
  %27 = sext i32 %13 to i64, !dbg !12
  %28 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !12
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !13
  %45 = bitcast i16 %44 to bfloat, !dbg !13
  %46 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !14
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %51 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %52 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %60 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %14) #5, !dbg !15
  %63 = bitcast i16 %62 to bfloat, !dbg !15
  %64 = mul i32 %13, 12288, !dbg !16
  %.inv = fcmp oge bfloat %45, 0xR0000, !dbg !17
  %65 = select i1 %.inv, bfloat 0xR0000, bfloat %45, !dbg !17
  %66 = fpext bfloat %65 to float, !dbg !17
  %67 = fsub float 0.000000e+00, %66, !dbg !21
  %.inv2 = fcmp ole bfloat %63, 0xR0000, !dbg !22
  %68 = select i1 %.inv2, bfloat 0xR0000, bfloat %63, !dbg !22
  %69 = fpext bfloat %68 to float, !dbg !22
  %70 = fcmp ogt float %67, %69, !dbg !24
  %71 = fcmp uno float %67, 0.000000e+00, !dbg !26
  %72 = or i1 %71, %70, !dbg !27
  %73 = select i1 %72, float %67, float %69, !dbg !28
  %74 = fmul float %73, 0x3F80204080000000, !dbg !29
  %75 = fcmp ogt float %74, 0x3EE4F8B580000000, !dbg !30
  %76 = fcmp uno float %74, 0.000000e+00, !dbg !32
  %77 = or i1 %75, %76, !dbg !33
  %78 = select i1 %77, float %74, float 0x3EE4F8B580000000, !dbg !34
  %79 = add i32 %19, %64
  %80 = add i32 %21, %64
  %81 = or disjoint i32 %23, %64
  %82 = or disjoint i32 %24, %64
  %83 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %84 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %85 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20
  %86 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %21
  %87 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23
  %88 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %89 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25
  %90 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26
  %91 = zext nneg i32 %26 to i64, !dbg !35
  %92 = zext nneg i32 %25 to i64, !dbg !35
  %93 = zext nneg i32 %20 to i64, !dbg !35
  %94 = zext nneg i32 %18 to i64, !dbg !35
  %95 = getelementptr inbounds nuw i8, ptr addrspace(3) %87, i32 4
  %96 = getelementptr inbounds nuw i8, ptr addrspace(3) %87, i32 8
  %97 = getelementptr inbounds nuw i8, ptr addrspace(3) %87, i32 12
  %98 = insertelement <2 x float> poison, float %78, i64 0, !dbg !36
  %99 = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %100 = insertelement <8 x float> poison, float %78, i64 0, !dbg !36
  %101 = shufflevector <8 x float> %100, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %102 = insertelement <4 x float> poison, float %78, i64 0, !dbg !36
  %103 = shufflevector <4 x float> %102, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !36
  br label %104, !dbg !35

104:                                              ; preds = %12, %__nv_tanhf.exit623
  %105 = phi i1 [ true, %12 ], [ false, %__nv_tanhf.exit623 ]
  %indvars.iv = phi i64 [ 0, %12 ], [ 8192, %__nv_tanhf.exit623 ]
  %106 = phi float [ 0x7FF0000000000000, %12 ], [ %936, %__nv_tanhf.exit623 ]
  %107 = phi float [ 0x7FF0000000000000, %12 ], [ %937, %__nv_tanhf.exit623 ]
  %108 = phi <2 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %958, %__nv_tanhf.exit623 ]
  %109 = phi <8 x float> [ splat (float 0x7FF0000000000000), %12 ], [ %923, %__nv_tanhf.exit623 ]
  %110 = phi <8 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %963, %__nv_tanhf.exit623 ]
  %111 = phi <4 x float> [ splat (float 0xFFF0000000000000), %12 ], [ %962, %__nv_tanhf.exit623 ]
  %112 = phi <8 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %12 ], [ %959, %__nv_tanhf.exit623 ]
  %113 = or disjoint i64 %indvars.iv, %94, !dbg !37
  %114 = or disjoint i64 %indvars.iv, %93, !dbg !37
  %115 = or disjoint i64 %indvars.iv, %92, !dbg !37
  %116 = or disjoint i64 %indvars.iv, %91, !dbg !37
  %117 = icmp samesign ult i64 %113, 12288, !dbg !38
  %118 = icmp samesign ult i64 %115, 12288, !dbg !38
  %119 = icmp samesign ult i64 %116, 12288, !dbg !38
  %120 = trunc nuw nsw i64 %113 to i32, !dbg !39
  %121 = add i32 %64, %120, !dbg !39
  %122 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !39
  %123 = add i32 %79, %122, !dbg !39
  %124 = trunc nuw nsw i64 %114 to i32, !dbg !39
  %125 = add i32 %64, %124, !dbg !39
  %126 = add i32 %80, %122, !dbg !39
  %127 = add i32 %81, %122, !dbg !39
  %128 = add i32 %82, %122, !dbg !39
  %129 = trunc nuw nsw i64 %115 to i32, !dbg !39
  %130 = add i32 %64, %129, !dbg !39
  %131 = trunc nuw nsw i64 %116 to i32, !dbg !39
  %132 = add i32 %64, %131, !dbg !39
  %133 = sext i32 %121 to i64, !dbg !40
  %134 = getelementptr i32, ptr addrspace(1) %0, i64 %133, !dbg !40
  %135 = sext i32 %123 to i64, !dbg !40
  %136 = getelementptr i32, ptr addrspace(1) %0, i64 %135, !dbg !40
  %137 = sext i32 %125 to i64, !dbg !40
  %138 = getelementptr i32, ptr addrspace(1) %0, i64 %137, !dbg !40
  %139 = sext i32 %126 to i64, !dbg !40
  %140 = getelementptr i32, ptr addrspace(1) %0, i64 %139, !dbg !40
  %141 = and i1 %14, %117, !dbg !41
  %142 = and i1 %14, %118, !dbg !41
  %143 = and i1 %14, %119, !dbg !41
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %141) #5, !dbg !42
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !42
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !42
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !42
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !42
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %141) #5, !dbg !42
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !42
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !42
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !42
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !42
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %141) #5, !dbg !42
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !42
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !42
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !42
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !42
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %141) #5, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !42
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !42
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !42
  %164 = getelementptr bfloat, ptr addrspace(1) %3, i64 %113, !dbg !43
  %165 = getelementptr bfloat, ptr addrspace(1) %3, i64 %114, !dbg !43
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %164, i1 %117) #5, !dbg !44
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !44
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !44
  %169 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !44
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !44
  %171 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !44
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !44
  %173 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !44
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !44
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %165, i1 %117) #5, !dbg !44
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !44
  %177 = bitcast i32 %176 to <2 x bfloat>, !dbg !44
  %178 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !44
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !44
  %180 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !44
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !44
  %182 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !44
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !44
  %184 = getelementptr bfloat, ptr addrspace(1) %4, i64 %113, !dbg !45
  %185 = getelementptr bfloat, ptr addrspace(1) %4, i64 %114, !dbg !45
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %117) #5, !dbg !46
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !46
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !46
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !46
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !46
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !46
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !46
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !46
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !46
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %185, i1 %117) #5, !dbg !46
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !46
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !46
  %198 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !46
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !46
  %200 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !46
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !46
  %202 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !46
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !46
  %204 = fpext <2 x bfloat> %168 to <2 x float>, !dbg !47
  %205 = fpext <2 x bfloat> %188 to <2 x float>, !dbg !48
  %206 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !49
  %207 = insertelement <2 x i32> %206, i32 %146, i64 1, !dbg !49
  %208 = sitofp <2 x i32> %207 to <2 x float>, !dbg !49
  %209 = fmul <2 x float> %99, %208, !dbg !36
  %210 = fmul <2 x float> %209, %204, !dbg !50
  %211 = fadd <2 x float> %210, %205, !dbg !51
  %212 = fpext <2 x bfloat> %170 to <2 x float>, !dbg !47
  %213 = fpext <2 x bfloat> %190 to <2 x float>, !dbg !48
  %214 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !49
  %215 = insertelement <2 x i32> %214, i32 %148, i64 1, !dbg !49
  %216 = sitofp <2 x i32> %215 to <2 x float>, !dbg !49
  %217 = fmul <2 x float> %99, %216, !dbg !36
  %218 = fmul <2 x float> %217, %212, !dbg !50
  %219 = fadd <2 x float> %218, %213, !dbg !51
  %220 = shufflevector <2 x bfloat> %174, <2 x bfloat> %172, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !47
  %221 = fpext <4 x bfloat> %220 to <4 x float>, !dbg !47
  %222 = shufflevector <2 x bfloat> %194, <2 x bfloat> %192, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !48
  %223 = fpext <4 x bfloat> %222 to <4 x float>, !dbg !48
  %224 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !49
  %225 = insertelement <4 x i32> %224, i32 %152, i64 1, !dbg !49
  %226 = insertelement <4 x i32> %225, i32 %151, i64 2, !dbg !49
  %227 = insertelement <4 x i32> %226, i32 %150, i64 3, !dbg !49
  %228 = sitofp <4 x i32> %227 to <4 x float>, !dbg !49
  %229 = fmul <4 x float> %103, %228, !dbg !36
  %230 = fmul <4 x float> %229, %221, !dbg !50
  %231 = fadd <4 x float> %230, %223, !dbg !51
  %232 = shufflevector <2 x bfloat> %183, <2 x bfloat> %181, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %233 = shufflevector <2 x bfloat> %179, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %234 = shufflevector <8 x bfloat> %232, <8 x bfloat> %233, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !47
  %235 = shufflevector <2 x bfloat> %179, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %236 = shufflevector <8 x bfloat> %234, <8 x bfloat> %235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !47
  %237 = shufflevector <2 x bfloat> %177, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %238 = shufflevector <8 x bfloat> %236, <8 x bfloat> %237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !47
  %239 = shufflevector <2 x bfloat> %177, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %240 = shufflevector <8 x bfloat> %238, <8 x bfloat> %239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !47
  %241 = fpext <8 x bfloat> %240 to <8 x float>, !dbg !47
  %242 = shufflevector <2 x bfloat> %203, <2 x bfloat> %201, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %243 = shufflevector <2 x bfloat> %199, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %244 = shufflevector <8 x bfloat> %242, <8 x bfloat> %243, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>, !dbg !48
  %245 = shufflevector <2 x bfloat> %199, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %246 = shufflevector <8 x bfloat> %244, <8 x bfloat> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !48
  %247 = shufflevector <2 x bfloat> %197, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %248 = shufflevector <8 x bfloat> %246, <8 x bfloat> %247, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>, !dbg !48
  %249 = shufflevector <2 x bfloat> %197, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !48
  %250 = shufflevector <8 x bfloat> %248, <8 x bfloat> %249, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !48
  %251 = fpext <8 x bfloat> %250 to <8 x float>, !dbg !48
  %252 = insertelement <8 x i32> poison, i32 %163, i64 0, !dbg !49
  %253 = insertelement <8 x i32> %252, i32 %162, i64 1, !dbg !49
  %254 = insertelement <8 x i32> %253, i32 %161, i64 2, !dbg !49
  %255 = insertelement <8 x i32> %254, i32 %160, i64 3, !dbg !49
  %256 = insertelement <8 x i32> %255, i32 %158, i64 4, !dbg !49
  %257 = insertelement <8 x i32> %256, i32 %157, i64 5, !dbg !49
  %258 = insertelement <8 x i32> %257, i32 %156, i64 6, !dbg !49
  %259 = insertelement <8 x i32> %258, i32 %155, i64 7, !dbg !49
  %260 = sitofp <8 x i32> %259 to <8 x float>, !dbg !49
  %261 = fmul <8 x float> %101, %260, !dbg !36
  %262 = fmul <8 x float> %261, %241, !dbg !50
  %263 = fadd <8 x float> %262, %251, !dbg !51
  %264 = fmul <2 x float> %211, splat (float 5.000000e-01), !dbg !52
  %265 = fmul <2 x float> %219, splat (float 5.000000e-01), !dbg !52
  %266 = fmul <4 x float> %231, splat (float 5.000000e-01), !dbg !52
  %267 = fmul <8 x float> %263, splat (float 5.000000e-01), !dbg !52
  %268 = extractelement <2 x float> %211, i64 0, !dbg !53
  %269 = fmul float %268, %268, !dbg !54
  %270 = extractelement <2 x float> %211, i64 1, !dbg !53
  %271 = fmul float %270, %270, !dbg !54
  %272 = extractelement <2 x float> %219, i64 0, !dbg !53
  %273 = fmul float %272, %272, !dbg !54
  %274 = extractelement <2 x float> %219, i64 1, !dbg !53
  %275 = fmul float %274, %274, !dbg !54
  %276 = extractelement <4 x float> %231, i64 3, !dbg !53
  %277 = fmul float %276, %276, !dbg !54
  %278 = extractelement <4 x float> %231, i64 2, !dbg !53
  %279 = fmul float %278, %278, !dbg !54
  %280 = extractelement <4 x float> %231, i64 1, !dbg !53
  %281 = fmul float %280, %280, !dbg !54
  %282 = extractelement <4 x float> %231, i64 0, !dbg !53
  %283 = fmul float %282, %282, !dbg !54
  %284 = extractelement <8 x float> %263, i64 7, !dbg !53
  %285 = fmul float %284, %284, !dbg !54
  %286 = extractelement <8 x float> %263, i64 6, !dbg !53
  %287 = fmul float %286, %286, !dbg !54
  %288 = extractelement <8 x float> %263, i64 5, !dbg !53
  %289 = fmul float %288, %288, !dbg !54
  %290 = extractelement <8 x float> %263, i64 4, !dbg !53
  %291 = fmul float %290, %290, !dbg !54
  %292 = extractelement <8 x float> %263, i64 3, !dbg !53
  %293 = fmul float %292, %292, !dbg !54
  %294 = extractelement <8 x float> %263, i64 2, !dbg !53
  %295 = fmul float %294, %294, !dbg !54
  %296 = extractelement <8 x float> %263, i64 1, !dbg !53
  %297 = fmul float %296, %296, !dbg !54
  %298 = extractelement <8 x float> %263, i64 0, !dbg !53
  %299 = fmul float %298, %298, !dbg !54
  %300 = fmul float %268, %269, !dbg !55
  %301 = fmul float %270, %271, !dbg !55
  %302 = fmul float %272, %273, !dbg !55
  %303 = fmul float %274, %275, !dbg !55
  %304 = fmul float %276, %277, !dbg !55
  %305 = fmul float %278, %279, !dbg !55
  %306 = fmul float %280, %281, !dbg !55
  %307 = fmul float %282, %283, !dbg !55
  %308 = fmul float %284, %285, !dbg !55
  %309 = fmul float %286, %287, !dbg !55
  %310 = fmul float %288, %289, !dbg !55
  %311 = fmul float %290, %291, !dbg !55
  %312 = fmul float %292, %293, !dbg !55
  %313 = fmul float %294, %295, !dbg !55
  %314 = fmul float %296, %297, !dbg !55
  %315 = fmul float %298, %299, !dbg !55
  %316 = fmul float %300, 0x3FA6E4E260000000, !dbg !56
  %317 = fmul float %301, 0x3FA6E4E260000000, !dbg !56
  %318 = fmul float %302, 0x3FA6E4E260000000, !dbg !56
  %319 = fmul float %303, 0x3FA6E4E260000000, !dbg !56
  %320 = fmul float %304, 0x3FA6E4E260000000, !dbg !56
  %321 = fmul float %305, 0x3FA6E4E260000000, !dbg !56
  %322 = fmul float %306, 0x3FA6E4E260000000, !dbg !56
  %323 = fmul float %307, 0x3FA6E4E260000000, !dbg !56
  %324 = fmul float %308, 0x3FA6E4E260000000, !dbg !56
  %325 = fmul float %309, 0x3FA6E4E260000000, !dbg !56
  %326 = fmul float %310, 0x3FA6E4E260000000, !dbg !56
  %327 = fmul float %311, 0x3FA6E4E260000000, !dbg !56
  %328 = fmul float %312, 0x3FA6E4E260000000, !dbg !56
  %329 = fmul float %313, 0x3FA6E4E260000000, !dbg !56
  %330 = fmul float %314, 0x3FA6E4E260000000, !dbg !56
  %331 = fmul float %315, 0x3FA6E4E260000000, !dbg !56
  %332 = fadd float %268, %316, !dbg !53
  %333 = fadd float %270, %317, !dbg !53
  %334 = fadd float %272, %318, !dbg !53
  %335 = fadd float %274, %319, !dbg !53
  %336 = fadd float %276, %320, !dbg !53
  %337 = fadd float %278, %321, !dbg !53
  %338 = fadd float %280, %322, !dbg !53
  %339 = fadd float %282, %323, !dbg !53
  %340 = fadd float %284, %324, !dbg !53
  %341 = fadd float %286, %325, !dbg !53
  %342 = fadd float %288, %326, !dbg !53
  %343 = fadd float %290, %327, !dbg !53
  %344 = fadd float %292, %328, !dbg !53
  %345 = fadd float %294, %329, !dbg !53
  %346 = fadd float %296, %330, !dbg !53
  %347 = fadd float %298, %331, !dbg !53
  %348 = fmul float %332, 0x3FE9884540000000, !dbg !57
  %349 = fmul float %333, 0x3FE9884540000000, !dbg !57
  %350 = fmul float %334, 0x3FE9884540000000, !dbg !57
  %351 = fmul float %335, 0x3FE9884540000000, !dbg !57
  %352 = fmul float %336, 0x3FE9884540000000, !dbg !57
  %353 = fmul float %337, 0x3FE9884540000000, !dbg !57
  %354 = fmul float %338, 0x3FE9884540000000, !dbg !57
  %355 = fmul float %339, 0x3FE9884540000000, !dbg !57
  %356 = fmul float %340, 0x3FE9884540000000, !dbg !57
  %357 = fmul float %341, 0x3FE9884540000000, !dbg !57
  %358 = fmul float %342, 0x3FE9884540000000, !dbg !57
  %359 = fmul float %343, 0x3FE9884540000000, !dbg !57
  %360 = fmul float %344, 0x3FE9884540000000, !dbg !57
  %361 = fmul float %345, 0x3FE9884540000000, !dbg !57
  %362 = fmul float %346, 0x3FE9884540000000, !dbg !57
  %363 = fmul float %347, 0x3FE9884540000000, !dbg !57
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i320 = icmp eq i32 %364, 0, !dbg !58
  %365 = tail call float @llvm.nvvm.fabs.ftz.f(float %348) #5, !dbg !58
  %366 = tail call float @llvm.nvvm.fabs.f(float %348) #5, !dbg !58
  %.01.i321 = select i1 %.not.i320, float %366, float %365, !dbg !58
  %367 = fcmp ult float %.01.i321, 0x3FE3333340000000, !dbg !58
  br i1 %367, label %__internal_fmad.exit3.i327, label %__internal_fmad.exit1.i322, !dbg !58

__internal_fmad.exit1.i322:                       ; preds = %104
  %368 = fmul float %.01.i321, 0x4007154760000000, !dbg !58
  %369 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %368) #5, !dbg !58
  %370 = fadd float %369, 1.000000e+00, !dbg !58
  %371 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %370) #6, !dbg !58, !srcloc !59
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i323 = icmp eq i32 %372, 0, !dbg !58
  %373 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %371, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %374 = tail call float @llvm.nvvm.fma.rn.f(float %371, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i324 = select i1 %.not6.i323, float %374, float %373, !dbg !58
  %375 = fcmp oge float %.01.i321, 0x4022059680000000, !dbg !58
  %s.0.i325 = select i1 %375, float 1.000000e+00, float %.03.i324, !dbg !58
  %376 = bitcast float %s.0.i325 to i32, !dbg !58
  %377 = bitcast float %348 to i32, !dbg !58
  %378 = and i32 %377, -2147483648, !dbg !58
  %379 = or i32 %378, %376, !dbg !58
  %380 = bitcast i32 %379 to float, !dbg !58
  br label %__nv_tanhf.exit338, !dbg !58

__internal_fmad.exit3.i327:                       ; preds = %104
  %381 = fmul float %348, %348, !dbg !58
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i328 = icmp eq i32 %382, 0, !dbg !58
  %383 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %381, float 0xBFAAC795C0000000) #5, !dbg !58
  %384 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %381, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i329 = select i1 %.not1.i328, float %384, float %383, !dbg !58
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i330 = icmp eq i32 %385, 0, !dbg !58
  %386 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i329, float %381, float 0x3FC10B2820000000) #5, !dbg !58
  %387 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i329, float %381, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i331 = select i1 %.not2.i330, float %387, float %386, !dbg !58
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i332 = icmp eq i32 %388, 0, !dbg !58
  %389 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i331, float %381, float 0xBFD5553DA0000000) #5, !dbg !58
  %390 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i331, float %381, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i333 = select i1 %.not3.i332, float %390, float %389, !dbg !58
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i334 = icmp eq i32 %391, 0, !dbg !58
  %392 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i333, float %381, float 0.000000e+00) #5, !dbg !58
  %393 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i333, float %381, float 0.000000e+00) #5, !dbg !58
  %.04.i335 = select i1 %.not4.i334, float %393, float %392, !dbg !58
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i336 = icmp eq i32 %394, 0, !dbg !58
  %395 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i335, float %348, float %348) #5, !dbg !58
  %396 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i335, float %348, float %348) #5, !dbg !58
  %.02.i337 = select i1 %.not5.i336, float %396, float %395, !dbg !58
  br label %__nv_tanhf.exit338, !dbg !58

__nv_tanhf.exit338:                               ; preds = %__internal_fmad.exit1.i322, %__internal_fmad.exit3.i327
  %s.1.i326 = phi float [ %380, %__internal_fmad.exit1.i322 ], [ %.02.i337, %__internal_fmad.exit3.i327 ], !dbg !58
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i339 = icmp eq i32 %397, 0, !dbg !58
  %398 = tail call float @llvm.nvvm.fabs.ftz.f(float %349) #5, !dbg !58
  %399 = tail call float @llvm.nvvm.fabs.f(float %349) #5, !dbg !58
  %.01.i340 = select i1 %.not.i339, float %399, float %398, !dbg !58
  %400 = fcmp ult float %.01.i340, 0x3FE3333340000000, !dbg !58
  br i1 %400, label %__internal_fmad.exit3.i346, label %__internal_fmad.exit1.i341, !dbg !58

__internal_fmad.exit1.i341:                       ; preds = %__nv_tanhf.exit338
  %401 = fmul float %.01.i340, 0x4007154760000000, !dbg !58
  %402 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %401) #5, !dbg !58
  %403 = fadd float %402, 1.000000e+00, !dbg !58
  %404 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %403) #6, !dbg !58, !srcloc !59
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i342 = icmp eq i32 %405, 0, !dbg !58
  %406 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %404, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %407 = tail call float @llvm.nvvm.fma.rn.f(float %404, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i343 = select i1 %.not6.i342, float %407, float %406, !dbg !58
  %408 = fcmp oge float %.01.i340, 0x4022059680000000, !dbg !58
  %s.0.i344 = select i1 %408, float 1.000000e+00, float %.03.i343, !dbg !58
  %409 = bitcast float %s.0.i344 to i32, !dbg !58
  %410 = bitcast float %349 to i32, !dbg !58
  %411 = and i32 %410, -2147483648, !dbg !58
  %412 = or i32 %411, %409, !dbg !58
  %413 = bitcast i32 %412 to float, !dbg !58
  br label %__nv_tanhf.exit357, !dbg !58

__internal_fmad.exit3.i346:                       ; preds = %__nv_tanhf.exit338
  %414 = fmul float %349, %349, !dbg !58
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i347 = icmp eq i32 %415, 0, !dbg !58
  %416 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %414, float 0xBFAAC795C0000000) #5, !dbg !58
  %417 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %414, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i348 = select i1 %.not1.i347, float %417, float %416, !dbg !58
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i349 = icmp eq i32 %418, 0, !dbg !58
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i348, float %414, float 0x3FC10B2820000000) #5, !dbg !58
  %420 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i348, float %414, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i350 = select i1 %.not2.i349, float %420, float %419, !dbg !58
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i351 = icmp eq i32 %421, 0, !dbg !58
  %422 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i350, float %414, float 0xBFD5553DA0000000) #5, !dbg !58
  %423 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i350, float %414, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i352 = select i1 %.not3.i351, float %423, float %422, !dbg !58
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i353 = icmp eq i32 %424, 0, !dbg !58
  %425 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i352, float %414, float 0.000000e+00) #5, !dbg !58
  %426 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i352, float %414, float 0.000000e+00) #5, !dbg !58
  %.04.i354 = select i1 %.not4.i353, float %426, float %425, !dbg !58
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i355 = icmp eq i32 %427, 0, !dbg !58
  %428 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i354, float %349, float %349) #5, !dbg !58
  %429 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i354, float %349, float %349) #5, !dbg !58
  %.02.i356 = select i1 %.not5.i355, float %429, float %428, !dbg !58
  br label %__nv_tanhf.exit357, !dbg !58

__nv_tanhf.exit357:                               ; preds = %__internal_fmad.exit1.i341, %__internal_fmad.exit3.i346
  %s.1.i345 = phi float [ %413, %__internal_fmad.exit1.i341 ], [ %.02.i356, %__internal_fmad.exit3.i346 ], !dbg !58
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i358 = icmp eq i32 %430, 0, !dbg !58
  %431 = tail call float @llvm.nvvm.fabs.ftz.f(float %350) #5, !dbg !58
  %432 = tail call float @llvm.nvvm.fabs.f(float %350) #5, !dbg !58
  %.01.i359 = select i1 %.not.i358, float %432, float %431, !dbg !58
  %433 = fcmp ult float %.01.i359, 0x3FE3333340000000, !dbg !58
  br i1 %433, label %__internal_fmad.exit3.i365, label %__internal_fmad.exit1.i360, !dbg !58

__internal_fmad.exit1.i360:                       ; preds = %__nv_tanhf.exit357
  %434 = fmul float %.01.i359, 0x4007154760000000, !dbg !58
  %435 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %434) #5, !dbg !58
  %436 = fadd float %435, 1.000000e+00, !dbg !58
  %437 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %436) #6, !dbg !58, !srcloc !59
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i361 = icmp eq i32 %438, 0, !dbg !58
  %439 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %437, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %440 = tail call float @llvm.nvvm.fma.rn.f(float %437, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i362 = select i1 %.not6.i361, float %440, float %439, !dbg !58
  %441 = fcmp oge float %.01.i359, 0x4022059680000000, !dbg !58
  %s.0.i363 = select i1 %441, float 1.000000e+00, float %.03.i362, !dbg !58
  %442 = bitcast float %s.0.i363 to i32, !dbg !58
  %443 = bitcast float %350 to i32, !dbg !58
  %444 = and i32 %443, -2147483648, !dbg !58
  %445 = or i32 %444, %442, !dbg !58
  %446 = bitcast i32 %445 to float, !dbg !58
  br label %__nv_tanhf.exit376, !dbg !58

__internal_fmad.exit3.i365:                       ; preds = %__nv_tanhf.exit357
  %447 = fmul float %350, %350, !dbg !58
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i366 = icmp eq i32 %448, 0, !dbg !58
  %449 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %447, float 0xBFAAC795C0000000) #5, !dbg !58
  %450 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %447, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i367 = select i1 %.not1.i366, float %450, float %449, !dbg !58
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i368 = icmp eq i32 %451, 0, !dbg !58
  %452 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i367, float %447, float 0x3FC10B2820000000) #5, !dbg !58
  %453 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i367, float %447, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i369 = select i1 %.not2.i368, float %453, float %452, !dbg !58
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i370 = icmp eq i32 %454, 0, !dbg !58
  %455 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i369, float %447, float 0xBFD5553DA0000000) #5, !dbg !58
  %456 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i369, float %447, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i371 = select i1 %.not3.i370, float %456, float %455, !dbg !58
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i372 = icmp eq i32 %457, 0, !dbg !58
  %458 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i371, float %447, float 0.000000e+00) #5, !dbg !58
  %459 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i371, float %447, float 0.000000e+00) #5, !dbg !58
  %.04.i373 = select i1 %.not4.i372, float %459, float %458, !dbg !58
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i374 = icmp eq i32 %460, 0, !dbg !58
  %461 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i373, float %350, float %350) #5, !dbg !58
  %462 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i373, float %350, float %350) #5, !dbg !58
  %.02.i375 = select i1 %.not5.i374, float %462, float %461, !dbg !58
  br label %__nv_tanhf.exit376, !dbg !58

__nv_tanhf.exit376:                               ; preds = %__internal_fmad.exit1.i360, %__internal_fmad.exit3.i365
  %s.1.i364 = phi float [ %446, %__internal_fmad.exit1.i360 ], [ %.02.i375, %__internal_fmad.exit3.i365 ], !dbg !58
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i377 = icmp eq i32 %463, 0, !dbg !58
  %464 = tail call float @llvm.nvvm.fabs.ftz.f(float %351) #5, !dbg !58
  %465 = tail call float @llvm.nvvm.fabs.f(float %351) #5, !dbg !58
  %.01.i378 = select i1 %.not.i377, float %465, float %464, !dbg !58
  %466 = fcmp ult float %.01.i378, 0x3FE3333340000000, !dbg !58
  br i1 %466, label %__internal_fmad.exit3.i384, label %__internal_fmad.exit1.i379, !dbg !58

__internal_fmad.exit1.i379:                       ; preds = %__nv_tanhf.exit376
  %467 = fmul float %.01.i378, 0x4007154760000000, !dbg !58
  %468 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %467) #5, !dbg !58
  %469 = fadd float %468, 1.000000e+00, !dbg !58
  %470 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %469) #6, !dbg !58, !srcloc !59
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i380 = icmp eq i32 %471, 0, !dbg !58
  %472 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %470, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %473 = tail call float @llvm.nvvm.fma.rn.f(float %470, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i381 = select i1 %.not6.i380, float %473, float %472, !dbg !58
  %474 = fcmp oge float %.01.i378, 0x4022059680000000, !dbg !58
  %s.0.i382 = select i1 %474, float 1.000000e+00, float %.03.i381, !dbg !58
  %475 = bitcast float %s.0.i382 to i32, !dbg !58
  %476 = bitcast float %351 to i32, !dbg !58
  %477 = and i32 %476, -2147483648, !dbg !58
  %478 = or i32 %477, %475, !dbg !58
  %479 = bitcast i32 %478 to float, !dbg !58
  br label %__nv_tanhf.exit395, !dbg !58

__internal_fmad.exit3.i384:                       ; preds = %__nv_tanhf.exit376
  %480 = fmul float %351, %351, !dbg !58
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i385 = icmp eq i32 %481, 0, !dbg !58
  %482 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %480, float 0xBFAAC795C0000000) #5, !dbg !58
  %483 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %480, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i386 = select i1 %.not1.i385, float %483, float %482, !dbg !58
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i387 = icmp eq i32 %484, 0, !dbg !58
  %485 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i386, float %480, float 0x3FC10B2820000000) #5, !dbg !58
  %486 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i386, float %480, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i388 = select i1 %.not2.i387, float %486, float %485, !dbg !58
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i389 = icmp eq i32 %487, 0, !dbg !58
  %488 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i388, float %480, float 0xBFD5553DA0000000) #5, !dbg !58
  %489 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i388, float %480, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i390 = select i1 %.not3.i389, float %489, float %488, !dbg !58
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i391 = icmp eq i32 %490, 0, !dbg !58
  %491 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i390, float %480, float 0.000000e+00) #5, !dbg !58
  %492 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i390, float %480, float 0.000000e+00) #5, !dbg !58
  %.04.i392 = select i1 %.not4.i391, float %492, float %491, !dbg !58
  %493 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i393 = icmp eq i32 %493, 0, !dbg !58
  %494 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i392, float %351, float %351) #5, !dbg !58
  %495 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i392, float %351, float %351) #5, !dbg !58
  %.02.i394 = select i1 %.not5.i393, float %495, float %494, !dbg !58
  br label %__nv_tanhf.exit395, !dbg !58

__nv_tanhf.exit395:                               ; preds = %__internal_fmad.exit1.i379, %__internal_fmad.exit3.i384
  %s.1.i383 = phi float [ %479, %__internal_fmad.exit1.i379 ], [ %.02.i394, %__internal_fmad.exit3.i384 ], !dbg !58
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i396 = icmp eq i32 %496, 0, !dbg !58
  %497 = tail call float @llvm.nvvm.fabs.ftz.f(float %352) #5, !dbg !58
  %498 = tail call float @llvm.nvvm.fabs.f(float %352) #5, !dbg !58
  %.01.i397 = select i1 %.not.i396, float %498, float %497, !dbg !58
  %499 = fcmp ult float %.01.i397, 0x3FE3333340000000, !dbg !58
  br i1 %499, label %__internal_fmad.exit3.i403, label %__internal_fmad.exit1.i398, !dbg !58

__internal_fmad.exit1.i398:                       ; preds = %__nv_tanhf.exit395
  %500 = fmul float %.01.i397, 0x4007154760000000, !dbg !58
  %501 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %500) #5, !dbg !58
  %502 = fadd float %501, 1.000000e+00, !dbg !58
  %503 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %502) #6, !dbg !58, !srcloc !59
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i399 = icmp eq i32 %504, 0, !dbg !58
  %505 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %503, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %506 = tail call float @llvm.nvvm.fma.rn.f(float %503, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i400 = select i1 %.not6.i399, float %506, float %505, !dbg !58
  %507 = fcmp oge float %.01.i397, 0x4022059680000000, !dbg !58
  %s.0.i401 = select i1 %507, float 1.000000e+00, float %.03.i400, !dbg !58
  %508 = bitcast float %s.0.i401 to i32, !dbg !58
  %509 = bitcast float %352 to i32, !dbg !58
  %510 = and i32 %509, -2147483648, !dbg !58
  %511 = or i32 %510, %508, !dbg !58
  %512 = bitcast i32 %511 to float, !dbg !58
  br label %__nv_tanhf.exit414, !dbg !58

__internal_fmad.exit3.i403:                       ; preds = %__nv_tanhf.exit395
  %513 = fmul float %352, %352, !dbg !58
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i404 = icmp eq i32 %514, 0, !dbg !58
  %515 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %513, float 0xBFAAC795C0000000) #5, !dbg !58
  %516 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %513, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i405 = select i1 %.not1.i404, float %516, float %515, !dbg !58
  %517 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i406 = icmp eq i32 %517, 0, !dbg !58
  %518 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i405, float %513, float 0x3FC10B2820000000) #5, !dbg !58
  %519 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i405, float %513, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i407 = select i1 %.not2.i406, float %519, float %518, !dbg !58
  %520 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i408 = icmp eq i32 %520, 0, !dbg !58
  %521 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i407, float %513, float 0xBFD5553DA0000000) #5, !dbg !58
  %522 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i407, float %513, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i409 = select i1 %.not3.i408, float %522, float %521, !dbg !58
  %523 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i410 = icmp eq i32 %523, 0, !dbg !58
  %524 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i409, float %513, float 0.000000e+00) #5, !dbg !58
  %525 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i409, float %513, float 0.000000e+00) #5, !dbg !58
  %.04.i411 = select i1 %.not4.i410, float %525, float %524, !dbg !58
  %526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i412 = icmp eq i32 %526, 0, !dbg !58
  %527 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i411, float %352, float %352) #5, !dbg !58
  %528 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i411, float %352, float %352) #5, !dbg !58
  %.02.i413 = select i1 %.not5.i412, float %528, float %527, !dbg !58
  br label %__nv_tanhf.exit414, !dbg !58

__nv_tanhf.exit414:                               ; preds = %__internal_fmad.exit1.i398, %__internal_fmad.exit3.i403
  %s.1.i402 = phi float [ %512, %__internal_fmad.exit1.i398 ], [ %.02.i413, %__internal_fmad.exit3.i403 ], !dbg !58
  %529 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i415 = icmp eq i32 %529, 0, !dbg !58
  %530 = tail call float @llvm.nvvm.fabs.ftz.f(float %353) #5, !dbg !58
  %531 = tail call float @llvm.nvvm.fabs.f(float %353) #5, !dbg !58
  %.01.i416 = select i1 %.not.i415, float %531, float %530, !dbg !58
  %532 = fcmp ult float %.01.i416, 0x3FE3333340000000, !dbg !58
  br i1 %532, label %__internal_fmad.exit3.i422, label %__internal_fmad.exit1.i417, !dbg !58

__internal_fmad.exit1.i417:                       ; preds = %__nv_tanhf.exit414
  %533 = fmul float %.01.i416, 0x4007154760000000, !dbg !58
  %534 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %533) #5, !dbg !58
  %535 = fadd float %534, 1.000000e+00, !dbg !58
  %536 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %535) #6, !dbg !58, !srcloc !59
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i418 = icmp eq i32 %537, 0, !dbg !58
  %538 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %536, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %539 = tail call float @llvm.nvvm.fma.rn.f(float %536, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i419 = select i1 %.not6.i418, float %539, float %538, !dbg !58
  %540 = fcmp oge float %.01.i416, 0x4022059680000000, !dbg !58
  %s.0.i420 = select i1 %540, float 1.000000e+00, float %.03.i419, !dbg !58
  %541 = bitcast float %s.0.i420 to i32, !dbg !58
  %542 = bitcast float %353 to i32, !dbg !58
  %543 = and i32 %542, -2147483648, !dbg !58
  %544 = or i32 %543, %541, !dbg !58
  %545 = bitcast i32 %544 to float, !dbg !58
  br label %__nv_tanhf.exit433, !dbg !58

__internal_fmad.exit3.i422:                       ; preds = %__nv_tanhf.exit414
  %546 = fmul float %353, %353, !dbg !58
  %547 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i423 = icmp eq i32 %547, 0, !dbg !58
  %548 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %546, float 0xBFAAC795C0000000) #5, !dbg !58
  %549 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %546, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i424 = select i1 %.not1.i423, float %549, float %548, !dbg !58
  %550 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i425 = icmp eq i32 %550, 0, !dbg !58
  %551 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i424, float %546, float 0x3FC10B2820000000) #5, !dbg !58
  %552 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i424, float %546, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i426 = select i1 %.not2.i425, float %552, float %551, !dbg !58
  %553 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i427 = icmp eq i32 %553, 0, !dbg !58
  %554 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i426, float %546, float 0xBFD5553DA0000000) #5, !dbg !58
  %555 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i426, float %546, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i428 = select i1 %.not3.i427, float %555, float %554, !dbg !58
  %556 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i429 = icmp eq i32 %556, 0, !dbg !58
  %557 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i428, float %546, float 0.000000e+00) #5, !dbg !58
  %558 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i428, float %546, float 0.000000e+00) #5, !dbg !58
  %.04.i430 = select i1 %.not4.i429, float %558, float %557, !dbg !58
  %559 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i431 = icmp eq i32 %559, 0, !dbg !58
  %560 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i430, float %353, float %353) #5, !dbg !58
  %561 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i430, float %353, float %353) #5, !dbg !58
  %.02.i432 = select i1 %.not5.i431, float %561, float %560, !dbg !58
  br label %__nv_tanhf.exit433, !dbg !58

__nv_tanhf.exit433:                               ; preds = %__internal_fmad.exit1.i417, %__internal_fmad.exit3.i422
  %s.1.i421 = phi float [ %545, %__internal_fmad.exit1.i417 ], [ %.02.i432, %__internal_fmad.exit3.i422 ], !dbg !58
  %562 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i434 = icmp eq i32 %562, 0, !dbg !58
  %563 = tail call float @llvm.nvvm.fabs.ftz.f(float %354) #5, !dbg !58
  %564 = tail call float @llvm.nvvm.fabs.f(float %354) #5, !dbg !58
  %.01.i435 = select i1 %.not.i434, float %564, float %563, !dbg !58
  %565 = fcmp ult float %.01.i435, 0x3FE3333340000000, !dbg !58
  br i1 %565, label %__internal_fmad.exit3.i441, label %__internal_fmad.exit1.i436, !dbg !58

__internal_fmad.exit1.i436:                       ; preds = %__nv_tanhf.exit433
  %566 = fmul float %.01.i435, 0x4007154760000000, !dbg !58
  %567 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %566) #5, !dbg !58
  %568 = fadd float %567, 1.000000e+00, !dbg !58
  %569 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %568) #6, !dbg !58, !srcloc !59
  %570 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i437 = icmp eq i32 %570, 0, !dbg !58
  %571 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %569, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %572 = tail call float @llvm.nvvm.fma.rn.f(float %569, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i438 = select i1 %.not6.i437, float %572, float %571, !dbg !58
  %573 = fcmp oge float %.01.i435, 0x4022059680000000, !dbg !58
  %s.0.i439 = select i1 %573, float 1.000000e+00, float %.03.i438, !dbg !58
  %574 = bitcast float %s.0.i439 to i32, !dbg !58
  %575 = bitcast float %354 to i32, !dbg !58
  %576 = and i32 %575, -2147483648, !dbg !58
  %577 = or i32 %576, %574, !dbg !58
  %578 = bitcast i32 %577 to float, !dbg !58
  br label %__nv_tanhf.exit452, !dbg !58

__internal_fmad.exit3.i441:                       ; preds = %__nv_tanhf.exit433
  %579 = fmul float %354, %354, !dbg !58
  %580 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i442 = icmp eq i32 %580, 0, !dbg !58
  %581 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %579, float 0xBFAAC795C0000000) #5, !dbg !58
  %582 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %579, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i443 = select i1 %.not1.i442, float %582, float %581, !dbg !58
  %583 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i444 = icmp eq i32 %583, 0, !dbg !58
  %584 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i443, float %579, float 0x3FC10B2820000000) #5, !dbg !58
  %585 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i443, float %579, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i445 = select i1 %.not2.i444, float %585, float %584, !dbg !58
  %586 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i446 = icmp eq i32 %586, 0, !dbg !58
  %587 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i445, float %579, float 0xBFD5553DA0000000) #5, !dbg !58
  %588 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i445, float %579, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i447 = select i1 %.not3.i446, float %588, float %587, !dbg !58
  %589 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i448 = icmp eq i32 %589, 0, !dbg !58
  %590 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i447, float %579, float 0.000000e+00) #5, !dbg !58
  %591 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i447, float %579, float 0.000000e+00) #5, !dbg !58
  %.04.i449 = select i1 %.not4.i448, float %591, float %590, !dbg !58
  %592 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i450 = icmp eq i32 %592, 0, !dbg !58
  %593 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i449, float %354, float %354) #5, !dbg !58
  %594 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i449, float %354, float %354) #5, !dbg !58
  %.02.i451 = select i1 %.not5.i450, float %594, float %593, !dbg !58
  br label %__nv_tanhf.exit452, !dbg !58

__nv_tanhf.exit452:                               ; preds = %__internal_fmad.exit1.i436, %__internal_fmad.exit3.i441
  %s.1.i440 = phi float [ %578, %__internal_fmad.exit1.i436 ], [ %.02.i451, %__internal_fmad.exit3.i441 ], !dbg !58
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i453 = icmp eq i32 %595, 0, !dbg !58
  %596 = tail call float @llvm.nvvm.fabs.ftz.f(float %355) #5, !dbg !58
  %597 = tail call float @llvm.nvvm.fabs.f(float %355) #5, !dbg !58
  %.01.i454 = select i1 %.not.i453, float %597, float %596, !dbg !58
  %598 = fcmp ult float %.01.i454, 0x3FE3333340000000, !dbg !58
  br i1 %598, label %__internal_fmad.exit3.i460, label %__internal_fmad.exit1.i455, !dbg !58

__internal_fmad.exit1.i455:                       ; preds = %__nv_tanhf.exit452
  %599 = fmul float %.01.i454, 0x4007154760000000, !dbg !58
  %600 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %599) #5, !dbg !58
  %601 = fadd float %600, 1.000000e+00, !dbg !58
  %602 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %601) #6, !dbg !58, !srcloc !59
  %603 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i456 = icmp eq i32 %603, 0, !dbg !58
  %604 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %602, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %605 = tail call float @llvm.nvvm.fma.rn.f(float %602, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i457 = select i1 %.not6.i456, float %605, float %604, !dbg !58
  %606 = fcmp oge float %.01.i454, 0x4022059680000000, !dbg !58
  %s.0.i458 = select i1 %606, float 1.000000e+00, float %.03.i457, !dbg !58
  %607 = bitcast float %s.0.i458 to i32, !dbg !58
  %608 = bitcast float %355 to i32, !dbg !58
  %609 = and i32 %608, -2147483648, !dbg !58
  %610 = or i32 %609, %607, !dbg !58
  %611 = bitcast i32 %610 to float, !dbg !58
  br label %__nv_tanhf.exit471, !dbg !58

__internal_fmad.exit3.i460:                       ; preds = %__nv_tanhf.exit452
  %612 = fmul float %355, %355, !dbg !58
  %613 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i461 = icmp eq i32 %613, 0, !dbg !58
  %614 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %612, float 0xBFAAC795C0000000) #5, !dbg !58
  %615 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %612, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i462 = select i1 %.not1.i461, float %615, float %614, !dbg !58
  %616 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i463 = icmp eq i32 %616, 0, !dbg !58
  %617 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i462, float %612, float 0x3FC10B2820000000) #5, !dbg !58
  %618 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i462, float %612, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i464 = select i1 %.not2.i463, float %618, float %617, !dbg !58
  %619 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i465 = icmp eq i32 %619, 0, !dbg !58
  %620 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i464, float %612, float 0xBFD5553DA0000000) #5, !dbg !58
  %621 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i464, float %612, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i466 = select i1 %.not3.i465, float %621, float %620, !dbg !58
  %622 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i467 = icmp eq i32 %622, 0, !dbg !58
  %623 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i466, float %612, float 0.000000e+00) #5, !dbg !58
  %624 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i466, float %612, float 0.000000e+00) #5, !dbg !58
  %.04.i468 = select i1 %.not4.i467, float %624, float %623, !dbg !58
  %625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i469 = icmp eq i32 %625, 0, !dbg !58
  %626 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i468, float %355, float %355) #5, !dbg !58
  %627 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i468, float %355, float %355) #5, !dbg !58
  %.02.i470 = select i1 %.not5.i469, float %627, float %626, !dbg !58
  br label %__nv_tanhf.exit471, !dbg !58

__nv_tanhf.exit471:                               ; preds = %__internal_fmad.exit1.i455, %__internal_fmad.exit3.i460
  %s.1.i459 = phi float [ %611, %__internal_fmad.exit1.i455 ], [ %.02.i470, %__internal_fmad.exit3.i460 ], !dbg !58
  %628 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i472 = icmp eq i32 %628, 0, !dbg !58
  %629 = tail call float @llvm.nvvm.fabs.ftz.f(float %356) #5, !dbg !58
  %630 = tail call float @llvm.nvvm.fabs.f(float %356) #5, !dbg !58
  %.01.i473 = select i1 %.not.i472, float %630, float %629, !dbg !58
  %631 = fcmp ult float %.01.i473, 0x3FE3333340000000, !dbg !58
  br i1 %631, label %__internal_fmad.exit3.i479, label %__internal_fmad.exit1.i474, !dbg !58

__internal_fmad.exit1.i474:                       ; preds = %__nv_tanhf.exit471
  %632 = fmul float %.01.i473, 0x4007154760000000, !dbg !58
  %633 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %632) #5, !dbg !58
  %634 = fadd float %633, 1.000000e+00, !dbg !58
  %635 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %634) #6, !dbg !58, !srcloc !59
  %636 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i475 = icmp eq i32 %636, 0, !dbg !58
  %637 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %635, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %638 = tail call float @llvm.nvvm.fma.rn.f(float %635, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i476 = select i1 %.not6.i475, float %638, float %637, !dbg !58
  %639 = fcmp oge float %.01.i473, 0x4022059680000000, !dbg !58
  %s.0.i477 = select i1 %639, float 1.000000e+00, float %.03.i476, !dbg !58
  %640 = bitcast float %s.0.i477 to i32, !dbg !58
  %641 = bitcast float %356 to i32, !dbg !58
  %642 = and i32 %641, -2147483648, !dbg !58
  %643 = or i32 %642, %640, !dbg !58
  %644 = bitcast i32 %643 to float, !dbg !58
  br label %__nv_tanhf.exit490, !dbg !58

__internal_fmad.exit3.i479:                       ; preds = %__nv_tanhf.exit471
  %645 = fmul float %356, %356, !dbg !58
  %646 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i480 = icmp eq i32 %646, 0, !dbg !58
  %647 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %645, float 0xBFAAC795C0000000) #5, !dbg !58
  %648 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %645, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i481 = select i1 %.not1.i480, float %648, float %647, !dbg !58
  %649 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i482 = icmp eq i32 %649, 0, !dbg !58
  %650 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i481, float %645, float 0x3FC10B2820000000) #5, !dbg !58
  %651 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i481, float %645, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i483 = select i1 %.not2.i482, float %651, float %650, !dbg !58
  %652 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i484 = icmp eq i32 %652, 0, !dbg !58
  %653 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i483, float %645, float 0xBFD5553DA0000000) #5, !dbg !58
  %654 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i483, float %645, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i485 = select i1 %.not3.i484, float %654, float %653, !dbg !58
  %655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i486 = icmp eq i32 %655, 0, !dbg !58
  %656 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i485, float %645, float 0.000000e+00) #5, !dbg !58
  %657 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i485, float %645, float 0.000000e+00) #5, !dbg !58
  %.04.i487 = select i1 %.not4.i486, float %657, float %656, !dbg !58
  %658 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i488 = icmp eq i32 %658, 0, !dbg !58
  %659 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i487, float %356, float %356) #5, !dbg !58
  %660 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i487, float %356, float %356) #5, !dbg !58
  %.02.i489 = select i1 %.not5.i488, float %660, float %659, !dbg !58
  br label %__nv_tanhf.exit490, !dbg !58

__nv_tanhf.exit490:                               ; preds = %__internal_fmad.exit1.i474, %__internal_fmad.exit3.i479
  %s.1.i478 = phi float [ %644, %__internal_fmad.exit1.i474 ], [ %.02.i489, %__internal_fmad.exit3.i479 ], !dbg !58
  %661 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i491 = icmp eq i32 %661, 0, !dbg !58
  %662 = tail call float @llvm.nvvm.fabs.ftz.f(float %357) #5, !dbg !58
  %663 = tail call float @llvm.nvvm.fabs.f(float %357) #5, !dbg !58
  %.01.i492 = select i1 %.not.i491, float %663, float %662, !dbg !58
  %664 = fcmp ult float %.01.i492, 0x3FE3333340000000, !dbg !58
  br i1 %664, label %__internal_fmad.exit3.i498, label %__internal_fmad.exit1.i493, !dbg !58

__internal_fmad.exit1.i493:                       ; preds = %__nv_tanhf.exit490
  %665 = fmul float %.01.i492, 0x4007154760000000, !dbg !58
  %666 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %665) #5, !dbg !58
  %667 = fadd float %666, 1.000000e+00, !dbg !58
  %668 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %667) #6, !dbg !58, !srcloc !59
  %669 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i494 = icmp eq i32 %669, 0, !dbg !58
  %670 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %668, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %671 = tail call float @llvm.nvvm.fma.rn.f(float %668, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i495 = select i1 %.not6.i494, float %671, float %670, !dbg !58
  %672 = fcmp oge float %.01.i492, 0x4022059680000000, !dbg !58
  %s.0.i496 = select i1 %672, float 1.000000e+00, float %.03.i495, !dbg !58
  %673 = bitcast float %s.0.i496 to i32, !dbg !58
  %674 = bitcast float %357 to i32, !dbg !58
  %675 = and i32 %674, -2147483648, !dbg !58
  %676 = or i32 %675, %673, !dbg !58
  %677 = bitcast i32 %676 to float, !dbg !58
  br label %__nv_tanhf.exit509, !dbg !58

__internal_fmad.exit3.i498:                       ; preds = %__nv_tanhf.exit490
  %678 = fmul float %357, %357, !dbg !58
  %679 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i499 = icmp eq i32 %679, 0, !dbg !58
  %680 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %678, float 0xBFAAC795C0000000) #5, !dbg !58
  %681 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %678, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i500 = select i1 %.not1.i499, float %681, float %680, !dbg !58
  %682 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i501 = icmp eq i32 %682, 0, !dbg !58
  %683 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i500, float %678, float 0x3FC10B2820000000) #5, !dbg !58
  %684 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i500, float %678, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i502 = select i1 %.not2.i501, float %684, float %683, !dbg !58
  %685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i503 = icmp eq i32 %685, 0, !dbg !58
  %686 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i502, float %678, float 0xBFD5553DA0000000) #5, !dbg !58
  %687 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i502, float %678, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i504 = select i1 %.not3.i503, float %687, float %686, !dbg !58
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i505 = icmp eq i32 %688, 0, !dbg !58
  %689 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i504, float %678, float 0.000000e+00) #5, !dbg !58
  %690 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i504, float %678, float 0.000000e+00) #5, !dbg !58
  %.04.i506 = select i1 %.not4.i505, float %690, float %689, !dbg !58
  %691 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i507 = icmp eq i32 %691, 0, !dbg !58
  %692 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i506, float %357, float %357) #5, !dbg !58
  %693 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i506, float %357, float %357) #5, !dbg !58
  %.02.i508 = select i1 %.not5.i507, float %693, float %692, !dbg !58
  br label %__nv_tanhf.exit509, !dbg !58

__nv_tanhf.exit509:                               ; preds = %__internal_fmad.exit1.i493, %__internal_fmad.exit3.i498
  %s.1.i497 = phi float [ %677, %__internal_fmad.exit1.i493 ], [ %.02.i508, %__internal_fmad.exit3.i498 ], !dbg !58
  %694 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i510 = icmp eq i32 %694, 0, !dbg !58
  %695 = tail call float @llvm.nvvm.fabs.ftz.f(float %358) #5, !dbg !58
  %696 = tail call float @llvm.nvvm.fabs.f(float %358) #5, !dbg !58
  %.01.i511 = select i1 %.not.i510, float %696, float %695, !dbg !58
  %697 = fcmp ult float %.01.i511, 0x3FE3333340000000, !dbg !58
  br i1 %697, label %__internal_fmad.exit3.i517, label %__internal_fmad.exit1.i512, !dbg !58

__internal_fmad.exit1.i512:                       ; preds = %__nv_tanhf.exit509
  %698 = fmul float %.01.i511, 0x4007154760000000, !dbg !58
  %699 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %698) #5, !dbg !58
  %700 = fadd float %699, 1.000000e+00, !dbg !58
  %701 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %700) #6, !dbg !58, !srcloc !59
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i513 = icmp eq i32 %702, 0, !dbg !58
  %703 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %701, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %704 = tail call float @llvm.nvvm.fma.rn.f(float %701, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i514 = select i1 %.not6.i513, float %704, float %703, !dbg !58
  %705 = fcmp oge float %.01.i511, 0x4022059680000000, !dbg !58
  %s.0.i515 = select i1 %705, float 1.000000e+00, float %.03.i514, !dbg !58
  %706 = bitcast float %s.0.i515 to i32, !dbg !58
  %707 = bitcast float %358 to i32, !dbg !58
  %708 = and i32 %707, -2147483648, !dbg !58
  %709 = or i32 %708, %706, !dbg !58
  %710 = bitcast i32 %709 to float, !dbg !58
  br label %__nv_tanhf.exit528, !dbg !58

__internal_fmad.exit3.i517:                       ; preds = %__nv_tanhf.exit509
  %711 = fmul float %358, %358, !dbg !58
  %712 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i518 = icmp eq i32 %712, 0, !dbg !58
  %713 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %711, float 0xBFAAC795C0000000) #5, !dbg !58
  %714 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %711, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i519 = select i1 %.not1.i518, float %714, float %713, !dbg !58
  %715 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i520 = icmp eq i32 %715, 0, !dbg !58
  %716 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i519, float %711, float 0x3FC10B2820000000) #5, !dbg !58
  %717 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i519, float %711, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i521 = select i1 %.not2.i520, float %717, float %716, !dbg !58
  %718 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i522 = icmp eq i32 %718, 0, !dbg !58
  %719 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i521, float %711, float 0xBFD5553DA0000000) #5, !dbg !58
  %720 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i521, float %711, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i523 = select i1 %.not3.i522, float %720, float %719, !dbg !58
  %721 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i524 = icmp eq i32 %721, 0, !dbg !58
  %722 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i523, float %711, float 0.000000e+00) #5, !dbg !58
  %723 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i523, float %711, float 0.000000e+00) #5, !dbg !58
  %.04.i525 = select i1 %.not4.i524, float %723, float %722, !dbg !58
  %724 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i526 = icmp eq i32 %724, 0, !dbg !58
  %725 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i525, float %358, float %358) #5, !dbg !58
  %726 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i525, float %358, float %358) #5, !dbg !58
  %.02.i527 = select i1 %.not5.i526, float %726, float %725, !dbg !58
  br label %__nv_tanhf.exit528, !dbg !58

__nv_tanhf.exit528:                               ; preds = %__internal_fmad.exit1.i512, %__internal_fmad.exit3.i517
  %s.1.i516 = phi float [ %710, %__internal_fmad.exit1.i512 ], [ %.02.i527, %__internal_fmad.exit3.i517 ], !dbg !58
  %727 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i529 = icmp eq i32 %727, 0, !dbg !58
  %728 = tail call float @llvm.nvvm.fabs.ftz.f(float %359) #5, !dbg !58
  %729 = tail call float @llvm.nvvm.fabs.f(float %359) #5, !dbg !58
  %.01.i530 = select i1 %.not.i529, float %729, float %728, !dbg !58
  %730 = fcmp ult float %.01.i530, 0x3FE3333340000000, !dbg !58
  br i1 %730, label %__internal_fmad.exit3.i536, label %__internal_fmad.exit1.i531, !dbg !58

__internal_fmad.exit1.i531:                       ; preds = %__nv_tanhf.exit528
  %731 = fmul float %.01.i530, 0x4007154760000000, !dbg !58
  %732 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %731) #5, !dbg !58
  %733 = fadd float %732, 1.000000e+00, !dbg !58
  %734 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %733) #6, !dbg !58, !srcloc !59
  %735 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i532 = icmp eq i32 %735, 0, !dbg !58
  %736 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %734, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %737 = tail call float @llvm.nvvm.fma.rn.f(float %734, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i533 = select i1 %.not6.i532, float %737, float %736, !dbg !58
  %738 = fcmp oge float %.01.i530, 0x4022059680000000, !dbg !58
  %s.0.i534 = select i1 %738, float 1.000000e+00, float %.03.i533, !dbg !58
  %739 = bitcast float %s.0.i534 to i32, !dbg !58
  %740 = bitcast float %359 to i32, !dbg !58
  %741 = and i32 %740, -2147483648, !dbg !58
  %742 = or i32 %741, %739, !dbg !58
  %743 = bitcast i32 %742 to float, !dbg !58
  br label %__nv_tanhf.exit547, !dbg !58

__internal_fmad.exit3.i536:                       ; preds = %__nv_tanhf.exit528
  %744 = fmul float %359, %359, !dbg !58
  %745 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i537 = icmp eq i32 %745, 0, !dbg !58
  %746 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %744, float 0xBFAAC795C0000000) #5, !dbg !58
  %747 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %744, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i538 = select i1 %.not1.i537, float %747, float %746, !dbg !58
  %748 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i539 = icmp eq i32 %748, 0, !dbg !58
  %749 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i538, float %744, float 0x3FC10B2820000000) #5, !dbg !58
  %750 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i538, float %744, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i540 = select i1 %.not2.i539, float %750, float %749, !dbg !58
  %751 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i541 = icmp eq i32 %751, 0, !dbg !58
  %752 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i540, float %744, float 0xBFD5553DA0000000) #5, !dbg !58
  %753 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i540, float %744, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i542 = select i1 %.not3.i541, float %753, float %752, !dbg !58
  %754 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i543 = icmp eq i32 %754, 0, !dbg !58
  %755 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i542, float %744, float 0.000000e+00) #5, !dbg !58
  %756 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i542, float %744, float 0.000000e+00) #5, !dbg !58
  %.04.i544 = select i1 %.not4.i543, float %756, float %755, !dbg !58
  %757 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i545 = icmp eq i32 %757, 0, !dbg !58
  %758 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i544, float %359, float %359) #5, !dbg !58
  %759 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i544, float %359, float %359) #5, !dbg !58
  %.02.i546 = select i1 %.not5.i545, float %759, float %758, !dbg !58
  br label %__nv_tanhf.exit547, !dbg !58

__nv_tanhf.exit547:                               ; preds = %__internal_fmad.exit1.i531, %__internal_fmad.exit3.i536
  %s.1.i535 = phi float [ %743, %__internal_fmad.exit1.i531 ], [ %.02.i546, %__internal_fmad.exit3.i536 ], !dbg !58
  %760 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i548 = icmp eq i32 %760, 0, !dbg !58
  %761 = tail call float @llvm.nvvm.fabs.ftz.f(float %360) #5, !dbg !58
  %762 = tail call float @llvm.nvvm.fabs.f(float %360) #5, !dbg !58
  %.01.i549 = select i1 %.not.i548, float %762, float %761, !dbg !58
  %763 = fcmp ult float %.01.i549, 0x3FE3333340000000, !dbg !58
  br i1 %763, label %__internal_fmad.exit3.i555, label %__internal_fmad.exit1.i550, !dbg !58

__internal_fmad.exit1.i550:                       ; preds = %__nv_tanhf.exit547
  %764 = fmul float %.01.i549, 0x4007154760000000, !dbg !58
  %765 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %764) #5, !dbg !58
  %766 = fadd float %765, 1.000000e+00, !dbg !58
  %767 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %766) #6, !dbg !58, !srcloc !59
  %768 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i551 = icmp eq i32 %768, 0, !dbg !58
  %769 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %767, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %770 = tail call float @llvm.nvvm.fma.rn.f(float %767, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i552 = select i1 %.not6.i551, float %770, float %769, !dbg !58
  %771 = fcmp oge float %.01.i549, 0x4022059680000000, !dbg !58
  %s.0.i553 = select i1 %771, float 1.000000e+00, float %.03.i552, !dbg !58
  %772 = bitcast float %s.0.i553 to i32, !dbg !58
  %773 = bitcast float %360 to i32, !dbg !58
  %774 = and i32 %773, -2147483648, !dbg !58
  %775 = or i32 %774, %772, !dbg !58
  %776 = bitcast i32 %775 to float, !dbg !58
  br label %__nv_tanhf.exit566, !dbg !58

__internal_fmad.exit3.i555:                       ; preds = %__nv_tanhf.exit547
  %777 = fmul float %360, %360, !dbg !58
  %778 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i556 = icmp eq i32 %778, 0, !dbg !58
  %779 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %777, float 0xBFAAC795C0000000) #5, !dbg !58
  %780 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %777, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i557 = select i1 %.not1.i556, float %780, float %779, !dbg !58
  %781 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i558 = icmp eq i32 %781, 0, !dbg !58
  %782 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i557, float %777, float 0x3FC10B2820000000) #5, !dbg !58
  %783 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i557, float %777, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i559 = select i1 %.not2.i558, float %783, float %782, !dbg !58
  %784 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i560 = icmp eq i32 %784, 0, !dbg !58
  %785 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i559, float %777, float 0xBFD5553DA0000000) #5, !dbg !58
  %786 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i559, float %777, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i561 = select i1 %.not3.i560, float %786, float %785, !dbg !58
  %787 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i562 = icmp eq i32 %787, 0, !dbg !58
  %788 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i561, float %777, float 0.000000e+00) #5, !dbg !58
  %789 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i561, float %777, float 0.000000e+00) #5, !dbg !58
  %.04.i563 = select i1 %.not4.i562, float %789, float %788, !dbg !58
  %790 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i564 = icmp eq i32 %790, 0, !dbg !58
  %791 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i563, float %360, float %360) #5, !dbg !58
  %792 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i563, float %360, float %360) #5, !dbg !58
  %.02.i565 = select i1 %.not5.i564, float %792, float %791, !dbg !58
  br label %__nv_tanhf.exit566, !dbg !58

__nv_tanhf.exit566:                               ; preds = %__internal_fmad.exit1.i550, %__internal_fmad.exit3.i555
  %s.1.i554 = phi float [ %776, %__internal_fmad.exit1.i550 ], [ %.02.i565, %__internal_fmad.exit3.i555 ], !dbg !58
  %793 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i567 = icmp eq i32 %793, 0, !dbg !58
  %794 = tail call float @llvm.nvvm.fabs.ftz.f(float %361) #5, !dbg !58
  %795 = tail call float @llvm.nvvm.fabs.f(float %361) #5, !dbg !58
  %.01.i568 = select i1 %.not.i567, float %795, float %794, !dbg !58
  %796 = fcmp ult float %.01.i568, 0x3FE3333340000000, !dbg !58
  br i1 %796, label %__internal_fmad.exit3.i574, label %__internal_fmad.exit1.i569, !dbg !58

__internal_fmad.exit1.i569:                       ; preds = %__nv_tanhf.exit566
  %797 = fmul float %.01.i568, 0x4007154760000000, !dbg !58
  %798 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %797) #5, !dbg !58
  %799 = fadd float %798, 1.000000e+00, !dbg !58
  %800 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %799) #6, !dbg !58, !srcloc !59
  %801 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i570 = icmp eq i32 %801, 0, !dbg !58
  %802 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %800, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %803 = tail call float @llvm.nvvm.fma.rn.f(float %800, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i571 = select i1 %.not6.i570, float %803, float %802, !dbg !58
  %804 = fcmp oge float %.01.i568, 0x4022059680000000, !dbg !58
  %s.0.i572 = select i1 %804, float 1.000000e+00, float %.03.i571, !dbg !58
  %805 = bitcast float %s.0.i572 to i32, !dbg !58
  %806 = bitcast float %361 to i32, !dbg !58
  %807 = and i32 %806, -2147483648, !dbg !58
  %808 = or i32 %807, %805, !dbg !58
  %809 = bitcast i32 %808 to float, !dbg !58
  br label %__nv_tanhf.exit585, !dbg !58

__internal_fmad.exit3.i574:                       ; preds = %__nv_tanhf.exit566
  %810 = fmul float %361, %361, !dbg !58
  %811 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i575 = icmp eq i32 %811, 0, !dbg !58
  %812 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %810, float 0xBFAAC795C0000000) #5, !dbg !58
  %813 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %810, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i576 = select i1 %.not1.i575, float %813, float %812, !dbg !58
  %814 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i577 = icmp eq i32 %814, 0, !dbg !58
  %815 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i576, float %810, float 0x3FC10B2820000000) #5, !dbg !58
  %816 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i576, float %810, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i578 = select i1 %.not2.i577, float %816, float %815, !dbg !58
  %817 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i579 = icmp eq i32 %817, 0, !dbg !58
  %818 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i578, float %810, float 0xBFD5553DA0000000) #5, !dbg !58
  %819 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i578, float %810, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i580 = select i1 %.not3.i579, float %819, float %818, !dbg !58
  %820 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i581 = icmp eq i32 %820, 0, !dbg !58
  %821 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i580, float %810, float 0.000000e+00) #5, !dbg !58
  %822 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i580, float %810, float 0.000000e+00) #5, !dbg !58
  %.04.i582 = select i1 %.not4.i581, float %822, float %821, !dbg !58
  %823 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i583 = icmp eq i32 %823, 0, !dbg !58
  %824 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i582, float %361, float %361) #5, !dbg !58
  %825 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i582, float %361, float %361) #5, !dbg !58
  %.02.i584 = select i1 %.not5.i583, float %825, float %824, !dbg !58
  br label %__nv_tanhf.exit585, !dbg !58

__nv_tanhf.exit585:                               ; preds = %__internal_fmad.exit1.i569, %__internal_fmad.exit3.i574
  %s.1.i573 = phi float [ %809, %__internal_fmad.exit1.i569 ], [ %.02.i584, %__internal_fmad.exit3.i574 ], !dbg !58
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i586 = icmp eq i32 %826, 0, !dbg !58
  %827 = tail call float @llvm.nvvm.fabs.ftz.f(float %362) #5, !dbg !58
  %828 = tail call float @llvm.nvvm.fabs.f(float %362) #5, !dbg !58
  %.01.i587 = select i1 %.not.i586, float %828, float %827, !dbg !58
  %829 = fcmp ult float %.01.i587, 0x3FE3333340000000, !dbg !58
  br i1 %829, label %__internal_fmad.exit3.i593, label %__internal_fmad.exit1.i588, !dbg !58

__internal_fmad.exit1.i588:                       ; preds = %__nv_tanhf.exit585
  %830 = fmul float %.01.i587, 0x4007154760000000, !dbg !58
  %831 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %830) #5, !dbg !58
  %832 = fadd float %831, 1.000000e+00, !dbg !58
  %833 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %832) #6, !dbg !58, !srcloc !59
  %834 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i589 = icmp eq i32 %834, 0, !dbg !58
  %835 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %833, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %836 = tail call float @llvm.nvvm.fma.rn.f(float %833, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i590 = select i1 %.not6.i589, float %836, float %835, !dbg !58
  %837 = fcmp oge float %.01.i587, 0x4022059680000000, !dbg !58
  %s.0.i591 = select i1 %837, float 1.000000e+00, float %.03.i590, !dbg !58
  %838 = bitcast float %s.0.i591 to i32, !dbg !58
  %839 = bitcast float %362 to i32, !dbg !58
  %840 = and i32 %839, -2147483648, !dbg !58
  %841 = or i32 %840, %838, !dbg !58
  %842 = bitcast i32 %841 to float, !dbg !58
  br label %__nv_tanhf.exit604, !dbg !58

__internal_fmad.exit3.i593:                       ; preds = %__nv_tanhf.exit585
  %843 = fmul float %362, %362, !dbg !58
  %844 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i594 = icmp eq i32 %844, 0, !dbg !58
  %845 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %843, float 0xBFAAC795C0000000) #5, !dbg !58
  %846 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %843, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i595 = select i1 %.not1.i594, float %846, float %845, !dbg !58
  %847 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i596 = icmp eq i32 %847, 0, !dbg !58
  %848 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i595, float %843, float 0x3FC10B2820000000) #5, !dbg !58
  %849 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i595, float %843, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i597 = select i1 %.not2.i596, float %849, float %848, !dbg !58
  %850 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i598 = icmp eq i32 %850, 0, !dbg !58
  %851 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i597, float %843, float 0xBFD5553DA0000000) #5, !dbg !58
  %852 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i597, float %843, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i599 = select i1 %.not3.i598, float %852, float %851, !dbg !58
  %853 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i600 = icmp eq i32 %853, 0, !dbg !58
  %854 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i599, float %843, float 0.000000e+00) #5, !dbg !58
  %855 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i599, float %843, float 0.000000e+00) #5, !dbg !58
  %.04.i601 = select i1 %.not4.i600, float %855, float %854, !dbg !58
  %856 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i602 = icmp eq i32 %856, 0, !dbg !58
  %857 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i601, float %362, float %362) #5, !dbg !58
  %858 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i601, float %362, float %362) #5, !dbg !58
  %.02.i603 = select i1 %.not5.i602, float %858, float %857, !dbg !58
  br label %__nv_tanhf.exit604, !dbg !58

__nv_tanhf.exit604:                               ; preds = %__internal_fmad.exit1.i588, %__internal_fmad.exit3.i593
  %s.1.i592 = phi float [ %842, %__internal_fmad.exit1.i588 ], [ %.02.i603, %__internal_fmad.exit3.i593 ], !dbg !58
  %859 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i605 = icmp eq i32 %859, 0, !dbg !58
  %860 = tail call float @llvm.nvvm.fabs.ftz.f(float %363) #5, !dbg !58
  %861 = tail call float @llvm.nvvm.fabs.f(float %363) #5, !dbg !58
  %.01.i606 = select i1 %.not.i605, float %861, float %860, !dbg !58
  %862 = fcmp ult float %.01.i606, 0x3FE3333340000000, !dbg !58
  br i1 %862, label %__internal_fmad.exit3.i612, label %__internal_fmad.exit1.i607, !dbg !58

__internal_fmad.exit1.i607:                       ; preds = %__nv_tanhf.exit604
  %863 = fmul float %.01.i606, 0x4007154760000000, !dbg !58
  %864 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %863) #5, !dbg !58
  %865 = fadd float %864, 1.000000e+00, !dbg !58
  %866 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %865) #6, !dbg !58, !srcloc !59
  %867 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not6.i608 = icmp eq i32 %867, 0, !dbg !58
  %868 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %866, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %869 = tail call float @llvm.nvvm.fma.rn.f(float %866, float -2.000000e+00, float 1.000000e+00) #5, !dbg !58
  %.03.i609 = select i1 %.not6.i608, float %869, float %868, !dbg !58
  %870 = fcmp oge float %.01.i606, 0x4022059680000000, !dbg !58
  %s.0.i610 = select i1 %870, float 1.000000e+00, float %.03.i609, !dbg !58
  %871 = bitcast float %s.0.i610 to i32, !dbg !58
  %872 = bitcast float %363 to i32, !dbg !58
  %873 = and i32 %872, -2147483648, !dbg !58
  %874 = or i32 %873, %871, !dbg !58
  %875 = bitcast i32 %874 to float, !dbg !58
  br label %__nv_tanhf.exit623, !dbg !58

__internal_fmad.exit3.i612:                       ; preds = %__nv_tanhf.exit604
  %876 = fmul float %363, %363, !dbg !58
  %877 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not1.i613 = icmp eq i32 %877, 0, !dbg !58
  %878 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %876, float 0xBFAAC795C0000000) #5, !dbg !58
  %879 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %876, float 0xBFAAC795C0000000) #5, !dbg !58
  %.06.i614 = select i1 %.not1.i613, float %879, float %878, !dbg !58
  %880 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not2.i615 = icmp eq i32 %880, 0, !dbg !58
  %881 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i614, float %876, float 0x3FC10B2820000000) #5, !dbg !58
  %882 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i614, float %876, float 0x3FC10B2820000000) #5, !dbg !58
  %.05.i616 = select i1 %.not2.i615, float %882, float %881, !dbg !58
  %883 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not3.i617 = icmp eq i32 %883, 0, !dbg !58
  %884 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i616, float %876, float 0xBFD5553DA0000000) #5, !dbg !58
  %885 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i616, float %876, float 0xBFD5553DA0000000) #5, !dbg !58
  %.0.i618 = select i1 %.not3.i617, float %885, float %884, !dbg !58
  %886 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not4.i619 = icmp eq i32 %886, 0, !dbg !58
  %887 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i618, float %876, float 0.000000e+00) #5, !dbg !58
  %888 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i618, float %876, float 0.000000e+00) #5, !dbg !58
  %.04.i620 = select i1 %.not4.i619, float %888, float %887, !dbg !58
  %889 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not5.i621 = icmp eq i32 %889, 0, !dbg !58
  %890 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i620, float %363, float %363) #5, !dbg !58
  %891 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i620, float %363, float %363) #5, !dbg !58
  %.02.i622 = select i1 %.not5.i621, float %891, float %890, !dbg !58
  br label %__nv_tanhf.exit623, !dbg !58

__nv_tanhf.exit623:                               ; preds = %__internal_fmad.exit1.i607, %__internal_fmad.exit3.i612
  %s.1.i611 = phi float [ %875, %__internal_fmad.exit1.i607 ], [ %.02.i622, %__internal_fmad.exit3.i612 ], !dbg !58
  %892 = insertelement <2 x float> poison, float %s.1.i326, i64 0, !dbg !60
  %893 = insertelement <2 x float> %892, float %s.1.i345, i64 1, !dbg !60
  %894 = fadd <2 x float> %893, splat (float 1.000000e+00), !dbg !60
  %895 = insertelement <2 x float> poison, float %s.1.i364, i64 0, !dbg !60
  %896 = insertelement <2 x float> %895, float %s.1.i383, i64 1, !dbg !60
  %897 = fadd <2 x float> %896, splat (float 1.000000e+00), !dbg !60
  %898 = insertelement <4 x float> poison, float %s.1.i459, i64 0, !dbg !60
  %899 = insertelement <4 x float> %898, float %s.1.i440, i64 1, !dbg !60
  %900 = insertelement <4 x float> %899, float %s.1.i421, i64 2, !dbg !60
  %901 = insertelement <4 x float> %900, float %s.1.i402, i64 3, !dbg !60
  %902 = fadd <4 x float> %901, splat (float 1.000000e+00), !dbg !60
  %903 = insertelement <8 x float> poison, float %s.1.i611, i64 0, !dbg !60
  %904 = insertelement <8 x float> %903, float %s.1.i592, i64 1, !dbg !60
  %905 = insertelement <8 x float> %904, float %s.1.i573, i64 2, !dbg !60
  %906 = insertelement <8 x float> %905, float %s.1.i554, i64 3, !dbg !60
  %907 = insertelement <8 x float> %906, float %s.1.i535, i64 4, !dbg !60
  %908 = insertelement <8 x float> %907, float %s.1.i516, i64 5, !dbg !60
  %909 = insertelement <8 x float> %908, float %s.1.i497, i64 6, !dbg !60
  %910 = insertelement <8 x float> %909, float %s.1.i478, i64 7, !dbg !60
  %911 = fadd <8 x float> %910, splat (float 1.000000e+00), !dbg !60
  %912 = fmul <2 x float> %265, %897, !dbg !61
  %913 = fcmp uno float %106, 0.000000e+00, !dbg !62
  %914 = fcmp uno float %107, 0.000000e+00, !dbg !62
  %915 = fcmp uno <8 x float> %112, zeroinitializer, !dbg !64
  %916 = fcmp uno <8 x float> %109, zeroinitializer, !dbg !62
  %917 = fmul <8 x float> %267, %911, !dbg !61
  %918 = fcmp olt <8 x float> %109, %917, !dbg !66
  %919 = or <8 x i1> %916, %918, !dbg !67
  %920 = select <8 x i1> %919, <8 x float> %109, <8 x float> %917, !dbg !68
  %921 = insertelement <8 x i1> poison, i1 %141, i64 0, !dbg !69
  %922 = shufflevector <8 x i1> %921, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !69
  %923 = select <8 x i1> %922, <8 x float> %920, <8 x float> %109, !dbg !69
  %924 = fcmp uno <2 x float> %108, zeroinitializer, !dbg !64
  %925 = fcmp uno <4 x float> %111, zeroinitializer, !dbg !64
  %926 = fcmp uno <8 x float> %110, zeroinitializer, !dbg !64
  %927 = fmul <2 x float> %264, %894, !dbg !61
  %928 = extractelement <2 x float> %927, i64 0, !dbg !68
  %929 = fcmp olt float %106, %928, !dbg !66
  %930 = extractelement <2 x float> %927, i64 1, !dbg !68
  %931 = fcmp olt float %107, %930, !dbg !66
  %932 = or i1 %913, %929, !dbg !67
  %933 = or i1 %914, %931, !dbg !67
  %934 = select i1 %932, float %106, float %928, !dbg !68
  %935 = select i1 %933, float %107, float %930, !dbg !68
  %936 = select i1 %141, float %934, float %106, !dbg !69
  %937 = select i1 %141, float %935, float %107, !dbg !69
  %938 = fcmp ogt <2 x float> %108, %927, !dbg !70
  %939 = or <2 x i1> %924, %938, !dbg !71
  %940 = select <2 x i1> %939, <2 x float> %108, <2 x float> %927, !dbg !72
  %941 = fmul <4 x float> %266, %902, !dbg !61
  %942 = shufflevector <4 x float> %941, <4 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison>, !dbg !70
  %943 = shufflevector <2 x float> %912, <2 x float> poison, <8 x i32> <i32 1, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !70
  %944 = shufflevector <8 x float> %943, <8 x float> %942, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 0, i32 1>, !dbg !70
  %945 = fcmp ogt <8 x float> %112, %944, !dbg !70
  %946 = fcmp olt <8 x float> %112, %944, !dbg !70
  %947 = shufflevector <8 x i1> %945, <8 x i1> %946, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !70
  %948 = or <8 x i1> %915, %947, !dbg !71
  %949 = select <8 x i1> %948, <8 x float> %112, <8 x float> %944, !dbg !72
  %950 = fcmp ogt <4 x float> %111, %941, !dbg !70
  %951 = or <4 x i1> %925, %950, !dbg !71
  %952 = select <4 x i1> %951, <4 x float> %111, <4 x float> %941, !dbg !72
  %953 = fcmp ogt <8 x float> %110, %917, !dbg !70
  %954 = or <8 x i1> %926, %953, !dbg !71
  %955 = select <8 x i1> %954, <8 x float> %110, <8 x float> %917, !dbg !72
  %956 = insertelement <2 x i1> poison, i1 %141, i64 0, !dbg !73
  %957 = shufflevector <2 x i1> %956, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !73
  %958 = select <2 x i1> %957, <2 x float> %940, <2 x float> %108, !dbg !73
  %959 = select <8 x i1> %922, <8 x float> %949, <8 x float> %112, !dbg !73
  %960 = insertelement <4 x i1> poison, i1 %141, i64 0, !dbg !73
  %961 = shufflevector <4 x i1> %960, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !73
  %962 = select <4 x i1> %961, <4 x float> %952, <4 x float> %111, !dbg !73
  %963 = select <8 x i1> %922, <8 x float> %955, <8 x float> %110, !dbg !73
  %964 = sext i32 %127 to i64, !dbg !74
  %965 = getelementptr float, ptr addrspace(1) %5, i64 %964, !dbg !74
  %966 = sext i32 %128 to i64, !dbg !74
  %967 = getelementptr float, ptr addrspace(1) %5, i64 %966, !dbg !74
  %968 = sext i32 %130 to i64, !dbg !74
  %969 = getelementptr float, ptr addrspace(1) %5, i64 %968, !dbg !74
  %970 = sext i32 %132 to i64, !dbg !74
  %971 = getelementptr float, ptr addrspace(1) %5, i64 %970, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %972 = bitcast float %268 to i32, !dbg !75
  %973 = bitcast float %270 to i32, !dbg !75
  %974 = bitcast float %272 to i32, !dbg !75
  %975 = bitcast float %274 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %83, i32 %972, i32 %973, i32 %974, i32 %975, i1 true) #5, !dbg !75
  %976 = bitcast float %276 to i32, !dbg !75
  %977 = bitcast float %278 to i32, !dbg !75
  %978 = bitcast float %280 to i32, !dbg !75
  %979 = bitcast float %282 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %84, i32 %976, i32 %977, i32 %978, i32 %979, i1 true) #5, !dbg !75
  %980 = bitcast float %284 to i32, !dbg !75
  %981 = bitcast float %286 to i32, !dbg !75
  %982 = bitcast float %288 to i32, !dbg !75
  %983 = bitcast float %290 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %85, i32 %980, i32 %981, i32 %982, i32 %983, i1 true) #5, !dbg !75
  %984 = bitcast float %292 to i32, !dbg !75
  %985 = bitcast float %294 to i32, !dbg !75
  %986 = bitcast float %296 to i32, !dbg !75
  %987 = bitcast float %298 to i32, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %86, i32 %984, i32 %985, i32 %986, i32 %987, i1 true) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %988 = load <4 x i32>, ptr addrspace(3) %88, align 16, !dbg !75
  %989 = load <4 x i32>, ptr addrspace(3) %89, align 16, !dbg !75
  %990 = load <4 x i32>, ptr addrspace(3) %90, align 16, !dbg !75
  %.extract = load i32, ptr addrspace(3) %87, align 16, !dbg !75
  %.extract20 = load i32, ptr addrspace(3) %95, align 4, !dbg !75
  %.extract21 = load i32, ptr addrspace(3) %96, align 8, !dbg !75
  %.extract22 = load i32, ptr addrspace(3) %97, align 4, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %965, i1 %14) #5, !dbg !75
  %.extract23 = extractelement <4 x i32> %988, i64 0, !dbg !75
  %.extract24 = extractelement <4 x i32> %988, i64 1, !dbg !75
  %.extract25 = extractelement <4 x i32> %988, i64 2, !dbg !75
  %.extract26 = extractelement <4 x i32> %988, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %967, i1 %14) #5, !dbg !75
  %.extract27 = extractelement <4 x i32> %989, i64 0, !dbg !75
  %.extract28 = extractelement <4 x i32> %989, i64 1, !dbg !75
  %.extract29 = extractelement <4 x i32> %989, i64 2, !dbg !75
  %.extract30 = extractelement <4 x i32> %989, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %969, i1 %142) #5, !dbg !75
  %.extract31 = extractelement <4 x i32> %990, i64 0, !dbg !75
  %.extract32 = extractelement <4 x i32> %990, i64 1, !dbg !75
  %.extract33 = extractelement <4 x i32> %990, i64 2, !dbg !75
  %.extract34 = extractelement <4 x i32> %990, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %971, i1 %143) #5, !dbg !75
  br i1 %105, label %104, label %991, !dbg !35

991:                                              ; preds = %__nv_tanhf.exit623
  %992 = lshr i32 %15, 5, !dbg !11
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %993 = fcmp olt float %936, %937, !dbg !78
  %994 = fcmp uno float %936, 0.000000e+00, !dbg !80
  %995 = or i1 %993, %994, !dbg !81
  %996 = select i1 %995, float %936, float %937, !dbg !82
  %997 = extractelement <8 x float> %959, i64 7, !dbg !78
  %998 = fcmp olt float %996, %997, !dbg !78
  %999 = fcmp uno float %996, 0.000000e+00, !dbg !80
  %1000 = or i1 %998, %999, !dbg !81
  %1001 = select i1 %1000, float %996, float %997, !dbg !82
  %1002 = extractelement <8 x float> %959, i64 6, !dbg !78
  %1003 = fcmp olt float %1001, %1002, !dbg !78
  %1004 = fcmp uno float %1001, 0.000000e+00, !dbg !80
  %1005 = or i1 %1003, %1004, !dbg !81
  %1006 = select i1 %1005, float %1001, float %1002, !dbg !82
  %1007 = extractelement <8 x float> %959, i64 5, !dbg !78
  %1008 = fcmp olt float %1006, %1007, !dbg !78
  %1009 = fcmp uno float %1006, 0.000000e+00, !dbg !80
  %1010 = or i1 %1008, %1009, !dbg !81
  %1011 = select i1 %1010, float %1006, float %1007, !dbg !82
  %1012 = extractelement <8 x float> %959, i64 4, !dbg !78
  %1013 = fcmp olt float %1011, %1012, !dbg !78
  %1014 = fcmp uno float %1011, 0.000000e+00, !dbg !80
  %1015 = or i1 %1013, %1014, !dbg !81
  %1016 = select i1 %1015, float %1011, float %1012, !dbg !82
  %1017 = extractelement <8 x float> %959, i64 3, !dbg !78
  %1018 = fcmp olt float %1016, %1017, !dbg !78
  %1019 = fcmp uno float %1016, 0.000000e+00, !dbg !80
  %1020 = or i1 %1018, %1019, !dbg !81
  %1021 = select i1 %1020, float %1016, float %1017, !dbg !82
  %1022 = extractelement <8 x float> %959, i64 2, !dbg !78
  %1023 = fcmp olt float %1021, %1022, !dbg !78
  %1024 = fcmp uno float %1021, 0.000000e+00, !dbg !80
  %1025 = or i1 %1023, %1024, !dbg !81
  %1026 = select i1 %1025, float %1021, float %1022, !dbg !82
  %1027 = extractelement <8 x float> %923, i64 7, !dbg !78
  %1028 = fcmp olt float %1026, %1027, !dbg !78
  %1029 = fcmp uno float %1026, 0.000000e+00, !dbg !80
  %1030 = or i1 %1028, %1029, !dbg !81
  %1031 = select i1 %1030, float %1026, float %1027, !dbg !82
  %1032 = extractelement <8 x float> %923, i64 6, !dbg !78
  %1033 = fcmp olt float %1031, %1032, !dbg !78
  %1034 = fcmp uno float %1031, 0.000000e+00, !dbg !80
  %1035 = or i1 %1033, %1034, !dbg !81
  %1036 = select i1 %1035, float %1031, float %1032, !dbg !82
  %1037 = extractelement <8 x float> %923, i64 5, !dbg !78
  %1038 = fcmp olt float %1036, %1037, !dbg !78
  %1039 = fcmp uno float %1036, 0.000000e+00, !dbg !80
  %1040 = or i1 %1038, %1039, !dbg !81
  %1041 = select i1 %1040, float %1036, float %1037, !dbg !82
  %1042 = extractelement <8 x float> %923, i64 4, !dbg !78
  %1043 = fcmp olt float %1041, %1042, !dbg !78
  %1044 = fcmp uno float %1041, 0.000000e+00, !dbg !80
  %1045 = or i1 %1043, %1044, !dbg !81
  %1046 = select i1 %1045, float %1041, float %1042, !dbg !82
  %1047 = extractelement <8 x float> %923, i64 3, !dbg !78
  %1048 = fcmp olt float %1046, %1047, !dbg !78
  %1049 = fcmp uno float %1046, 0.000000e+00, !dbg !80
  %1050 = or i1 %1048, %1049, !dbg !81
  %1051 = select i1 %1050, float %1046, float %1047, !dbg !82
  %1052 = extractelement <8 x float> %923, i64 2, !dbg !78
  %1053 = fcmp olt float %1051, %1052, !dbg !78
  %1054 = fcmp uno float %1051, 0.000000e+00, !dbg !80
  %1055 = or i1 %1053, %1054, !dbg !81
  %1056 = select i1 %1055, float %1051, float %1052, !dbg !82
  %1057 = extractelement <8 x float> %923, i64 1, !dbg !78
  %1058 = fcmp olt float %1056, %1057, !dbg !78
  %1059 = fcmp uno float %1056, 0.000000e+00, !dbg !80
  %1060 = or i1 %1058, %1059, !dbg !81
  %1061 = select i1 %1060, float %1056, float %1057, !dbg !82
  %1062 = extractelement <8 x float> %923, i64 0, !dbg !78
  %1063 = fcmp olt float %1061, %1062, !dbg !78
  %1064 = fcmp uno float %1061, 0.000000e+00, !dbg !80
  %1065 = or i1 %1063, %1064, !dbg !81
  %1066 = select i1 %1065, float %1061, float %1062, !dbg !82
  %1067 = bitcast float %1066 to i32, !dbg !76
  %1068 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1067, i32 16, i32 31), !dbg !76
  %1069 = bitcast i32 %1068 to float, !dbg !76
  %1070 = fcmp olt float %1066, %1069, !dbg !78
  %1071 = fcmp uno float %1066, 0.000000e+00, !dbg !80
  %1072 = or i1 %1071, %1070, !dbg !81
  %1073 = select i1 %1072, float %1066, float %1069, !dbg !82
  %1074 = bitcast float %1073 to i32, !dbg !76
  %1075 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1074, i32 8, i32 31), !dbg !76
  %1076 = bitcast i32 %1075 to float, !dbg !76
  %1077 = fcmp olt float %1073, %1076, !dbg !78
  %1078 = fcmp uno float %1073, 0.000000e+00, !dbg !80
  %1079 = or i1 %1077, %1078, !dbg !81
  %1080 = select i1 %1079, float %1073, float %1076, !dbg !82
  %1081 = bitcast float %1080 to i32, !dbg !76
  %1082 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1081, i32 4, i32 31), !dbg !76
  %1083 = bitcast i32 %1082 to float, !dbg !76
  %1084 = fcmp olt float %1080, %1083, !dbg !78
  %1085 = fcmp uno float %1080, 0.000000e+00, !dbg !80
  %1086 = or i1 %1084, %1085, !dbg !81
  %1087 = select i1 %1086, float %1080, float %1083, !dbg !82
  %1088 = bitcast float %1087 to i32, !dbg !76
  %1089 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1088, i32 2, i32 31), !dbg !76
  %1090 = bitcast i32 %1089 to float, !dbg !76
  %1091 = fcmp olt float %1087, %1090, !dbg !78
  %1092 = fcmp uno float %1087, 0.000000e+00, !dbg !80
  %1093 = or i1 %1091, %1092, !dbg !81
  %1094 = select i1 %1093, float %1087, float %1090, !dbg !82
  %1095 = bitcast float %1094 to i32, !dbg !76
  %1096 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1095, i32 1, i32 31), !dbg !76
  %1097 = bitcast i32 %1096 to float, !dbg !76
  %1098 = fcmp olt float %1094, %1097, !dbg !78
  %1099 = fcmp uno float %1094, 0.000000e+00, !dbg !80
  %1100 = or i1 %1098, %1099, !dbg !81
  %1101 = and i32 %992, 15, !dbg !76
  %1102 = icmp eq i32 %16, 0, !dbg !76
  %1103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1101, !dbg !76
  %1104 = select i1 %1100, i32 %1095, i32 %1096, !dbg !82
  %1105 = insertelement <1 x i32> poison, i32 %1104, i64 0, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1103, <1 x i32> %1105, i1 %1102) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1106 = icmp slt i32 %15, 16, !dbg !76
  %1107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !76
  %1108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1107, i1 %1106) #5, !dbg !76
  %1109 = bitcast i32 %1108 to float, !dbg !76
  %1110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 8, i32 31), !dbg !76
  %1111 = bitcast i32 %1110 to float, !dbg !76
  %1112 = fcmp olt float %1109, %1111, !dbg !78
  %1113 = fcmp uno float %1109, 0.000000e+00, !dbg !80
  %1114 = or i1 %1113, %1112, !dbg !81
  %1115 = select i1 %1114, float %1109, float %1111, !dbg !82
  %1116 = bitcast float %1115 to i32, !dbg !76
  %1117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1116, i32 4, i32 31), !dbg !76
  %1118 = bitcast i32 %1117 to float, !dbg !76
  %1119 = fcmp olt float %1115, %1118, !dbg !78
  %1120 = fcmp uno float %1115, 0.000000e+00, !dbg !80
  %1121 = or i1 %1119, %1120, !dbg !81
  %1122 = select i1 %1121, float %1115, float %1118, !dbg !82
  %1123 = bitcast float %1122 to i32, !dbg !76
  %1124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1123, i32 2, i32 31), !dbg !76
  %1125 = bitcast i32 %1124 to float, !dbg !76
  %1126 = fcmp olt float %1122, %1125, !dbg !78
  %1127 = fcmp uno float %1122, 0.000000e+00, !dbg !80
  %1128 = or i1 %1126, %1127, !dbg !81
  %1129 = select i1 %1128, float %1122, float %1125, !dbg !82
  %1130 = bitcast float %1129 to i32, !dbg !76
  %1131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1130, i32 1, i32 31), !dbg !76
  %1132 = bitcast i32 %1131 to float, !dbg !76
  %1133 = fcmp olt float %1129, %1132, !dbg !78
  %1134 = fcmp uno float %1129, 0.000000e+00, !dbg !80
  %1135 = or i1 %1133, %1134, !dbg !81
  %1136 = and i32 %15, 15, !dbg !76
  %1137 = icmp eq i32 %1136, 0, !dbg !76
  %1138 = and i1 %1106, %1137, !dbg !76
  %1139 = select i1 %1135, i32 %1130, i32 %1131, !dbg !82
  %1140 = insertelement <1 x i32> poison, i32 %1139, i64 0, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1107, <1 x i32> %1140, i1 %1138) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %1141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %1142 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %958, <2 x i32> <i32 0, i32 2>, !dbg !85
  %1143 = fcmp ogt <2 x float> %1142, %958, !dbg !85
  %1144 = fcmp uno <2 x float> %1142, %958, !dbg !85
  %shift = shufflevector <2 x i1> %1143, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !86
  %1145 = or <2 x i1> %shift, %1144, !dbg !86
  %1146 = extractelement <2 x i1> %1145, i64 0, !dbg !86
  %1147 = extractelement <2 x float> %958, i64 0, !dbg !87
  %1148 = extractelement <2 x float> %958, i64 1, !dbg !87
  %1149 = select i1 %1146, float %1147, float %1148, !dbg !87
  %1150 = extractelement <8 x float> %959, i64 1, !dbg !85
  %1151 = fcmp ogt float %1149, %1150, !dbg !85
  %1152 = fcmp uno float %1149, 0.000000e+00, !dbg !88
  %1153 = or i1 %1151, %1152, !dbg !86
  %1154 = select i1 %1153, float %1149, float %1150, !dbg !87
  %1155 = extractelement <8 x float> %959, i64 0, !dbg !85
  %1156 = fcmp ogt float %1154, %1155, !dbg !85
  %1157 = fcmp uno float %1154, 0.000000e+00, !dbg !88
  %1158 = or i1 %1156, %1157, !dbg !86
  %1159 = select i1 %1158, float %1154, float %1155, !dbg !87
  %1160 = extractelement <4 x float> %962, i64 3, !dbg !85
  %1161 = fcmp ogt float %1159, %1160, !dbg !85
  %1162 = fcmp uno float %1159, 0.000000e+00, !dbg !88
  %1163 = or i1 %1161, %1162, !dbg !86
  %1164 = select i1 %1163, float %1159, float %1160, !dbg !87
  %1165 = extractelement <4 x float> %962, i64 2, !dbg !85
  %1166 = fcmp ogt float %1164, %1165, !dbg !85
  %1167 = fcmp uno float %1164, 0.000000e+00, !dbg !88
  %1168 = or i1 %1166, %1167, !dbg !86
  %1169 = select i1 %1168, float %1164, float %1165, !dbg !87
  %1170 = extractelement <4 x float> %962, i64 1, !dbg !85
  %1171 = fcmp ogt float %1169, %1170, !dbg !85
  %1172 = fcmp uno float %1169, 0.000000e+00, !dbg !88
  %1173 = or i1 %1171, %1172, !dbg !86
  %1174 = select i1 %1173, float %1169, float %1170, !dbg !87
  %1175 = extractelement <4 x float> %962, i64 0, !dbg !85
  %1176 = fcmp ogt float %1174, %1175, !dbg !85
  %1177 = fcmp uno float %1174, 0.000000e+00, !dbg !88
  %1178 = or i1 %1176, %1177, !dbg !86
  %1179 = select i1 %1178, float %1174, float %1175, !dbg !87
  %1180 = extractelement <8 x float> %963, i64 7, !dbg !85
  %1181 = fcmp ogt float %1179, %1180, !dbg !85
  %1182 = fcmp uno float %1179, 0.000000e+00, !dbg !88
  %1183 = or i1 %1181, %1182, !dbg !86
  %1184 = select i1 %1183, float %1179, float %1180, !dbg !87
  %1185 = extractelement <8 x float> %963, i64 6, !dbg !85
  %1186 = fcmp ogt float %1184, %1185, !dbg !85
  %1187 = fcmp uno float %1184, 0.000000e+00, !dbg !88
  %1188 = or i1 %1186, %1187, !dbg !86
  %1189 = select i1 %1188, float %1184, float %1185, !dbg !87
  %1190 = extractelement <8 x float> %963, i64 5, !dbg !85
  %1191 = fcmp ogt float %1189, %1190, !dbg !85
  %1192 = fcmp uno float %1189, 0.000000e+00, !dbg !88
  %1193 = or i1 %1191, %1192, !dbg !86
  %1194 = select i1 %1193, float %1189, float %1190, !dbg !87
  %1195 = extractelement <8 x float> %963, i64 4, !dbg !85
  %1196 = fcmp ogt float %1194, %1195, !dbg !85
  %1197 = fcmp uno float %1194, 0.000000e+00, !dbg !88
  %1198 = or i1 %1196, %1197, !dbg !86
  %1199 = select i1 %1198, float %1194, float %1195, !dbg !87
  %1200 = extractelement <8 x float> %963, i64 3, !dbg !85
  %1201 = fcmp ogt float %1199, %1200, !dbg !85
  %1202 = fcmp uno float %1199, 0.000000e+00, !dbg !88
  %1203 = or i1 %1201, %1202, !dbg !86
  %1204 = select i1 %1203, float %1199, float %1200, !dbg !87
  %1205 = extractelement <8 x float> %963, i64 2, !dbg !85
  %1206 = fcmp ogt float %1204, %1205, !dbg !85
  %1207 = fcmp uno float %1204, 0.000000e+00, !dbg !88
  %1208 = or i1 %1206, %1207, !dbg !86
  %1209 = select i1 %1208, float %1204, float %1205, !dbg !87
  %1210 = extractelement <8 x float> %963, i64 1, !dbg !85
  %1211 = fcmp ogt float %1209, %1210, !dbg !85
  %1212 = fcmp uno float %1209, 0.000000e+00, !dbg !88
  %1213 = or i1 %1211, %1212, !dbg !86
  %1214 = select i1 %1213, float %1209, float %1210, !dbg !87
  %1215 = extractelement <8 x float> %963, i64 0, !dbg !85
  %1216 = fcmp ogt float %1214, %1215, !dbg !85
  %1217 = fcmp uno float %1214, 0.000000e+00, !dbg !88
  %1218 = or i1 %1216, %1217, !dbg !86
  %1219 = select i1 %1218, float %1214, float %1215, !dbg !87
  %1220 = bitcast float %1219 to i32, !dbg !83
  %1221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1220, i32 16, i32 31), !dbg !83
  %1222 = bitcast i32 %1221 to float, !dbg !83
  %1223 = fcmp ogt float %1219, %1222, !dbg !85
  %1224 = fcmp uno float %1219, 0.000000e+00, !dbg !88
  %1225 = or i1 %1224, %1223, !dbg !86
  %1226 = select i1 %1225, float %1219, float %1222, !dbg !87
  %1227 = bitcast float %1226 to i32, !dbg !83
  %1228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 8, i32 31), !dbg !83
  %1229 = bitcast i32 %1228 to float, !dbg !83
  %1230 = fcmp ogt float %1226, %1229, !dbg !85
  %1231 = fcmp uno float %1226, 0.000000e+00, !dbg !88
  %1232 = or i1 %1230, %1231, !dbg !86
  %1233 = select i1 %1232, float %1226, float %1229, !dbg !87
  %1234 = bitcast float %1233 to i32, !dbg !83
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 4, i32 31), !dbg !83
  %1236 = bitcast i32 %1235 to float, !dbg !83
  %1237 = fcmp ogt float %1233, %1236, !dbg !85
  %1238 = fcmp uno float %1233, 0.000000e+00, !dbg !88
  %1239 = or i1 %1237, %1238, !dbg !86
  %1240 = select i1 %1239, float %1233, float %1236, !dbg !87
  %1241 = bitcast float %1240 to i32, !dbg !83
  %1242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1241, i32 2, i32 31), !dbg !83
  %1243 = bitcast i32 %1242 to float, !dbg !83
  %1244 = fcmp ogt float %1240, %1243, !dbg !85
  %1245 = fcmp uno float %1240, 0.000000e+00, !dbg !88
  %1246 = or i1 %1244, %1245, !dbg !86
  %1247 = select i1 %1246, float %1240, float %1243, !dbg !87
  %1248 = bitcast float %1247 to i32, !dbg !83
  %1249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1248, i32 1, i32 31), !dbg !83
  %1250 = bitcast i32 %1249 to float, !dbg !83
  %1251 = fcmp ogt float %1247, %1250, !dbg !85
  %1252 = fcmp uno float %1247, 0.000000e+00, !dbg !88
  %1253 = or i1 %1251, %1252, !dbg !86
  %1254 = select i1 %1253, i32 %1248, i32 %1249, !dbg !87
  %1255 = insertelement <1 x i32> poison, i32 %1254, i64 0, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1103, <1 x i32> %1255, i1 %1102) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %1256 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1107, i1 %1106) #5, !dbg !83
  %1257 = bitcast i32 %1256 to float, !dbg !83
  %1258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1256, i32 8, i32 31), !dbg !83
  %1259 = bitcast i32 %1258 to float, !dbg !83
  %1260 = fcmp ogt float %1257, %1259, !dbg !85
  %1261 = fcmp uno float %1257, 0.000000e+00, !dbg !88
  %1262 = or i1 %1261, %1260, !dbg !86
  %1263 = select i1 %1262, float %1257, float %1259, !dbg !87
  %1264 = bitcast float %1263 to i32, !dbg !83
  %1265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 4, i32 31), !dbg !83
  %1266 = bitcast i32 %1265 to float, !dbg !83
  %1267 = fcmp ogt float %1263, %1266, !dbg !85
  %1268 = fcmp uno float %1263, 0.000000e+00, !dbg !88
  %1269 = or i1 %1267, %1268, !dbg !86
  %1270 = select i1 %1269, float %1263, float %1266, !dbg !87
  %1271 = bitcast float %1270 to i32, !dbg !83
  %1272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1271, i32 2, i32 31), !dbg !83
  %1273 = bitcast i32 %1272 to float, !dbg !83
  %1274 = fcmp ogt float %1270, %1273, !dbg !85
  %1275 = fcmp uno float %1270, 0.000000e+00, !dbg !88
  %1276 = or i1 %1274, %1275, !dbg !86
  %1277 = select i1 %1276, float %1270, float %1273, !dbg !87
  %1278 = bitcast float %1277 to i32, !dbg !83
  %1279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1278, i32 1, i32 31), !dbg !83
  %1280 = bitcast i32 %1279 to float, !dbg !83
  %1281 = fcmp ogt float %1277, %1280, !dbg !85
  %1282 = fcmp uno float %1277, 0.000000e+00, !dbg !88
  %1283 = or i1 %1281, %1282, !dbg !86
  %1284 = select i1 %1283, i32 %1278, i32 %1279, !dbg !87
  %1285 = insertelement <1 x i32> poison, i32 %1284, i64 0, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1107, <1 x i32> %1285, i1 %1138) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %1286 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !83
  %1287 = getelementptr bfloat, ptr addrspace(1) %6, i64 %27, !dbg !89
  %1288 = fptrunc float %1141 to bfloat, !dbg !90
  %1289 = and i32 %15, 511, !dbg !90
  %1290 = icmp eq i32 %1289, 0, !dbg !90
  %1291 = bitcast bfloat %1288 to i16, !dbg !90
  %1292 = and i1 %14, %1290, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1291, ptr addrspace(1) %1287, i1 %1292) #5, !dbg !90
  %1293 = getelementptr bfloat, ptr addrspace(1) %7, i64 %27, !dbg !91
  %1294 = fptrunc float %1286 to bfloat, !dbg !92
  %1295 = bitcast bfloat %1294 to i16, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1295, ptr addrspace(1) %1293, i1 %1292) #5, !dbg !92
  %.inv3 = fcmp oge float %1141, 0.000000e+00, !dbg !93
  %1296 = select i1 %.inv3, float 0.000000e+00, float %1141, !dbg !93
  %1297 = fsub float 0.000000e+00, %1296, !dbg !95
  %.inv4 = fcmp ole float %1286, 0.000000e+00, !dbg !96
  %1298 = select i1 %.inv4, float 0.000000e+00, float %1286, !dbg !96
  %1299 = fcmp ogt float %1297, %1298, !dbg !98
  %1300 = fcmp uno float %1297, 0.000000e+00, !dbg !100
  %1301 = or i1 %1300, %1299, !dbg !101
  %1302 = select i1 %1301, float %1297, float %1298, !dbg !102
  %1303 = fmul float %1302, 0x3F80204080000000, !dbg !103
  %1304 = fcmp ogt float %1303, 0x3EE4F8B580000000, !dbg !104
  %1305 = fcmp uno float %1303, 0.000000e+00, !dbg !106
  %1306 = or i1 %1304, %1305, !dbg !107
  %1307 = select i1 %1306, float %1303, float 0x3EE4F8B580000000, !dbg !108
  %1308 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1307), !dbg !109
  %1309 = add i32 %20, %64
  br label %1310, !dbg !110

1310:                                             ; preds = %991, %__nv_tanhf.exit319
  %1311 = phi i1 [ true, %991 ], [ false, %__nv_tanhf.exit319 ]
  %indvars.iv656 = phi i64 [ 0, %991 ], [ 8192, %__nv_tanhf.exit319 ]
  %1312 = or disjoint i64 %indvars.iv656, %94, !dbg !111
  %1313 = icmp samesign ult i64 %1312, 12288, !dbg !112
  %1314 = trunc nuw nsw i64 %1312 to i32, !dbg !113
  %1315 = add i32 %64, %1314, !dbg !113
  %1316 = trunc nuw nsw i64 %indvars.iv656 to i32, !dbg !113
  %1317 = add i32 %79, %1316, !dbg !113
  %1318 = add i32 %1309, %1316, !dbg !113
  %1319 = add i32 %80, %1316, !dbg !113
  %1320 = sext i32 %1315 to i64, !dbg !114
  %1321 = getelementptr float, ptr addrspace(1) %5, i64 %1320, !dbg !114
  %1322 = sext i32 %1317 to i64, !dbg !114
  %1323 = getelementptr float, ptr addrspace(1) %5, i64 %1322, !dbg !114
  %1324 = sext i32 %1318 to i64, !dbg !114
  %1325 = getelementptr float, ptr addrspace(1) %5, i64 %1324, !dbg !114
  %1326 = sext i32 %1319 to i64, !dbg !114
  %1327 = getelementptr float, ptr addrspace(1) %5, i64 %1326, !dbg !114
  %1328 = and i1 %14, %1313, !dbg !115
  %1329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1321, i1 %1328) #5, !dbg !116
  %1330 = extractvalue { i32, i32, i32, i32 } %1329, 0, !dbg !116
  %1331 = extractvalue { i32, i32, i32, i32 } %1329, 1, !dbg !116
  %1332 = extractvalue { i32, i32, i32, i32 } %1329, 2, !dbg !116
  %1333 = extractvalue { i32, i32, i32, i32 } %1329, 3, !dbg !116
  %1334 = bitcast i32 %1330 to float, !dbg !116
  %1335 = bitcast i32 %1331 to float, !dbg !116
  %1336 = bitcast i32 %1332 to float, !dbg !116
  %1337 = bitcast i32 %1333 to float, !dbg !116
  %1338 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1323, i1 %1328) #5, !dbg !116
  %1339 = extractvalue { i32, i32, i32, i32 } %1338, 0, !dbg !116
  %1340 = extractvalue { i32, i32, i32, i32 } %1338, 1, !dbg !116
  %1341 = extractvalue { i32, i32, i32, i32 } %1338, 2, !dbg !116
  %1342 = extractvalue { i32, i32, i32, i32 } %1338, 3, !dbg !116
  %1343 = bitcast i32 %1339 to float, !dbg !116
  %1344 = bitcast i32 %1340 to float, !dbg !116
  %1345 = bitcast i32 %1341 to float, !dbg !116
  %1346 = bitcast i32 %1342 to float, !dbg !116
  %1347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1325, i1 %1328) #5, !dbg !116
  %1348 = extractvalue { i32, i32, i32, i32 } %1347, 0, !dbg !116
  %1349 = extractvalue { i32, i32, i32, i32 } %1347, 1, !dbg !116
  %1350 = extractvalue { i32, i32, i32, i32 } %1347, 2, !dbg !116
  %1351 = extractvalue { i32, i32, i32, i32 } %1347, 3, !dbg !116
  %1352 = bitcast i32 %1348 to float, !dbg !116
  %1353 = bitcast i32 %1349 to float, !dbg !116
  %1354 = bitcast i32 %1350 to float, !dbg !116
  %1355 = bitcast i32 %1351 to float, !dbg !116
  %1356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1327, i1 %1328) #5, !dbg !116
  %1357 = extractvalue { i32, i32, i32, i32 } %1356, 0, !dbg !116
  %1358 = extractvalue { i32, i32, i32, i32 } %1356, 1, !dbg !116
  %1359 = extractvalue { i32, i32, i32, i32 } %1356, 2, !dbg !116
  %1360 = extractvalue { i32, i32, i32, i32 } %1356, 3, !dbg !116
  %1361 = bitcast i32 %1357 to float, !dbg !116
  %1362 = bitcast i32 %1358 to float, !dbg !116
  %1363 = bitcast i32 %1359 to float, !dbg !116
  %1364 = bitcast i32 %1360 to float, !dbg !116
  %1365 = fmul float %1334, 5.000000e-01, !dbg !117
  %1366 = fmul float %1335, 5.000000e-01, !dbg !117
  %1367 = fmul float %1336, 5.000000e-01, !dbg !117
  %1368 = fmul float %1337, 5.000000e-01, !dbg !117
  %1369 = fmul float %1343, 5.000000e-01, !dbg !117
  %1370 = fmul float %1344, 5.000000e-01, !dbg !117
  %1371 = fmul float %1345, 5.000000e-01, !dbg !117
  %1372 = fmul float %1346, 5.000000e-01, !dbg !117
  %1373 = fmul float %1352, 5.000000e-01, !dbg !117
  %1374 = fmul float %1353, 5.000000e-01, !dbg !117
  %1375 = fmul float %1354, 5.000000e-01, !dbg !117
  %1376 = fmul float %1355, 5.000000e-01, !dbg !117
  %1377 = fmul float %1361, 5.000000e-01, !dbg !117
  %1378 = fmul float %1362, 5.000000e-01, !dbg !117
  %1379 = fmul float %1363, 5.000000e-01, !dbg !117
  %1380 = fmul float %1364, 5.000000e-01, !dbg !117
  %1381 = fmul float %1334, %1334, !dbg !118
  %1382 = fmul float %1335, %1335, !dbg !118
  %1383 = fmul float %1336, %1336, !dbg !118
  %1384 = fmul float %1337, %1337, !dbg !118
  %1385 = fmul float %1343, %1343, !dbg !118
  %1386 = fmul float %1344, %1344, !dbg !118
  %1387 = fmul float %1345, %1345, !dbg !118
  %1388 = fmul float %1346, %1346, !dbg !118
  %1389 = fmul float %1352, %1352, !dbg !118
  %1390 = fmul float %1353, %1353, !dbg !118
  %1391 = fmul float %1354, %1354, !dbg !118
  %1392 = fmul float %1355, %1355, !dbg !118
  %1393 = fmul float %1361, %1361, !dbg !118
  %1394 = fmul float %1362, %1362, !dbg !118
  %1395 = fmul float %1363, %1363, !dbg !118
  %1396 = fmul float %1364, %1364, !dbg !118
  %1397 = fmul float %1381, %1334, !dbg !119
  %1398 = fmul float %1382, %1335, !dbg !119
  %1399 = fmul float %1383, %1336, !dbg !119
  %1400 = fmul float %1384, %1337, !dbg !119
  %1401 = fmul float %1385, %1343, !dbg !119
  %1402 = fmul float %1386, %1344, !dbg !119
  %1403 = fmul float %1387, %1345, !dbg !119
  %1404 = fmul float %1388, %1346, !dbg !119
  %1405 = fmul float %1389, %1352, !dbg !119
  %1406 = fmul float %1390, %1353, !dbg !119
  %1407 = fmul float %1391, %1354, !dbg !119
  %1408 = fmul float %1392, %1355, !dbg !119
  %1409 = fmul float %1393, %1361, !dbg !119
  %1410 = fmul float %1394, %1362, !dbg !119
  %1411 = fmul float %1395, %1363, !dbg !119
  %1412 = fmul float %1396, %1364, !dbg !119
  %1413 = fmul float %1397, 0x3FA6E4E260000000, !dbg !120
  %1414 = fmul float %1398, 0x3FA6E4E260000000, !dbg !120
  %1415 = fmul float %1399, 0x3FA6E4E260000000, !dbg !120
  %1416 = fmul float %1400, 0x3FA6E4E260000000, !dbg !120
  %1417 = fmul float %1401, 0x3FA6E4E260000000, !dbg !120
  %1418 = fmul float %1402, 0x3FA6E4E260000000, !dbg !120
  %1419 = fmul float %1403, 0x3FA6E4E260000000, !dbg !120
  %1420 = fmul float %1404, 0x3FA6E4E260000000, !dbg !120
  %1421 = fmul float %1405, 0x3FA6E4E260000000, !dbg !120
  %1422 = fmul float %1406, 0x3FA6E4E260000000, !dbg !120
  %1423 = fmul float %1407, 0x3FA6E4E260000000, !dbg !120
  %1424 = fmul float %1408, 0x3FA6E4E260000000, !dbg !120
  %1425 = fmul float %1409, 0x3FA6E4E260000000, !dbg !120
  %1426 = fmul float %1410, 0x3FA6E4E260000000, !dbg !120
  %1427 = fmul float %1411, 0x3FA6E4E260000000, !dbg !120
  %1428 = fmul float %1412, 0x3FA6E4E260000000, !dbg !120
  %1429 = fadd float %1413, %1334, !dbg !121
  %1430 = fadd float %1414, %1335, !dbg !121
  %1431 = fadd float %1415, %1336, !dbg !121
  %1432 = fadd float %1416, %1337, !dbg !121
  %1433 = fadd float %1417, %1343, !dbg !121
  %1434 = fadd float %1418, %1344, !dbg !121
  %1435 = fadd float %1419, %1345, !dbg !121
  %1436 = fadd float %1420, %1346, !dbg !121
  %1437 = fadd float %1421, %1352, !dbg !121
  %1438 = fadd float %1422, %1353, !dbg !121
  %1439 = fadd float %1423, %1354, !dbg !121
  %1440 = fadd float %1424, %1355, !dbg !121
  %1441 = fadd float %1425, %1361, !dbg !121
  %1442 = fadd float %1426, %1362, !dbg !121
  %1443 = fadd float %1427, %1363, !dbg !121
  %1444 = fadd float %1428, %1364, !dbg !121
  %1445 = fmul float %1429, 0x3FE9884540000000, !dbg !122
  %1446 = fmul float %1430, 0x3FE9884540000000, !dbg !122
  %1447 = fmul float %1431, 0x3FE9884540000000, !dbg !122
  %1448 = fmul float %1432, 0x3FE9884540000000, !dbg !122
  %1449 = fmul float %1433, 0x3FE9884540000000, !dbg !122
  %1450 = fmul float %1434, 0x3FE9884540000000, !dbg !122
  %1451 = fmul float %1435, 0x3FE9884540000000, !dbg !122
  %1452 = fmul float %1436, 0x3FE9884540000000, !dbg !122
  %1453 = fmul float %1437, 0x3FE9884540000000, !dbg !122
  %1454 = fmul float %1438, 0x3FE9884540000000, !dbg !122
  %1455 = fmul float %1439, 0x3FE9884540000000, !dbg !122
  %1456 = fmul float %1440, 0x3FE9884540000000, !dbg !122
  %1457 = fmul float %1441, 0x3FE9884540000000, !dbg !122
  %1458 = fmul float %1442, 0x3FE9884540000000, !dbg !122
  %1459 = fmul float %1443, 0x3FE9884540000000, !dbg !122
  %1460 = fmul float %1444, 0x3FE9884540000000, !dbg !122
  %1461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i = icmp eq i32 %1461, 0, !dbg !123
  %1462 = tail call float @llvm.nvvm.fabs.ftz.f(float %1445) #5, !dbg !123
  %1463 = tail call float @llvm.nvvm.fabs.f(float %1445) #5, !dbg !123
  %.01.i = select i1 %.not.i, float %1463, float %1462, !dbg !123
  %1464 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !123
  br i1 %1464, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !123

__internal_fmad.exit1.i:                          ; preds = %1310
  %1465 = fmul float %.01.i, 0x4007154760000000, !dbg !123
  %1466 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1465) #5, !dbg !123
  %1467 = fadd float %1466, 1.000000e+00, !dbg !123
  %1468 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1467) #6, !dbg !123, !srcloc !59
  %1469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i = icmp eq i32 %1469, 0, !dbg !123
  %1470 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1468, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1471 = tail call float @llvm.nvvm.fma.rn.f(float %1468, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i = select i1 %.not6.i, float %1471, float %1470, !dbg !123
  %1472 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !123
  %s.0.i = select i1 %1472, float 1.000000e+00, float %.03.i, !dbg !123
  %1473 = bitcast float %s.0.i to i32, !dbg !123
  %1474 = bitcast float %1445 to i32, !dbg !123
  %1475 = and i32 %1474, -2147483648, !dbg !123
  %1476 = or i32 %1475, %1473, !dbg !123
  %1477 = bitcast i32 %1476 to float, !dbg !123
  br label %__nv_tanhf.exit, !dbg !123

__internal_fmad.exit3.i:                          ; preds = %1310
  %1478 = fmul float %1445, %1445, !dbg !123
  %1479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i = icmp eq i32 %1479, 0, !dbg !123
  %1480 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1478, float 0xBFAAC795C0000000) #5, !dbg !123
  %1481 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1478, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i = select i1 %.not1.i, float %1481, float %1480, !dbg !123
  %1482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i = icmp eq i32 %1482, 0, !dbg !123
  %1483 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %1478, float 0x3FC10B2820000000) #5, !dbg !123
  %1484 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %1478, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i = select i1 %.not2.i, float %1484, float %1483, !dbg !123
  %1485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i = icmp eq i32 %1485, 0, !dbg !123
  %1486 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %1478, float 0xBFD5553DA0000000) #5, !dbg !123
  %1487 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %1478, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i = select i1 %.not3.i, float %1487, float %1486, !dbg !123
  %1488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i = icmp eq i32 %1488, 0, !dbg !123
  %1489 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %1478, float 0.000000e+00) #5, !dbg !123
  %1490 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %1478, float 0.000000e+00) #5, !dbg !123
  %.04.i = select i1 %.not4.i, float %1490, float %1489, !dbg !123
  %1491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i = icmp eq i32 %1491, 0, !dbg !123
  %1492 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %1445, float %1445) #5, !dbg !123
  %1493 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %1445, float %1445) #5, !dbg !123
  %.02.i = select i1 %.not5.i, float %1493, float %1492, !dbg !123
  br label %__nv_tanhf.exit, !dbg !123

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %1477, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !123
  %1494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i35 = icmp eq i32 %1494, 0, !dbg !123
  %1495 = tail call float @llvm.nvvm.fabs.ftz.f(float %1446) #5, !dbg !123
  %1496 = tail call float @llvm.nvvm.fabs.f(float %1446) #5, !dbg !123
  %.01.i36 = select i1 %.not.i35, float %1496, float %1495, !dbg !123
  %1497 = fcmp ult float %.01.i36, 0x3FE3333340000000, !dbg !123
  br i1 %1497, label %__internal_fmad.exit3.i42, label %__internal_fmad.exit1.i37, !dbg !123

__internal_fmad.exit1.i37:                        ; preds = %__nv_tanhf.exit
  %1498 = fmul float %.01.i36, 0x4007154760000000, !dbg !123
  %1499 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1498) #5, !dbg !123
  %1500 = fadd float %1499, 1.000000e+00, !dbg !123
  %1501 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1500) #6, !dbg !123, !srcloc !59
  %1502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i38 = icmp eq i32 %1502, 0, !dbg !123
  %1503 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1501, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1504 = tail call float @llvm.nvvm.fma.rn.f(float %1501, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i39 = select i1 %.not6.i38, float %1504, float %1503, !dbg !123
  %1505 = fcmp oge float %.01.i36, 0x4022059680000000, !dbg !123
  %s.0.i40 = select i1 %1505, float 1.000000e+00, float %.03.i39, !dbg !123
  %1506 = bitcast float %s.0.i40 to i32, !dbg !123
  %1507 = bitcast float %1446 to i32, !dbg !123
  %1508 = and i32 %1507, -2147483648, !dbg !123
  %1509 = or i32 %1508, %1506, !dbg !123
  %1510 = bitcast i32 %1509 to float, !dbg !123
  br label %__nv_tanhf.exit53, !dbg !123

__internal_fmad.exit3.i42:                        ; preds = %__nv_tanhf.exit
  %1511 = fmul float %1446, %1446, !dbg !123
  %1512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i43 = icmp eq i32 %1512, 0, !dbg !123
  %1513 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1511, float 0xBFAAC795C0000000) #5, !dbg !123
  %1514 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1511, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i44 = select i1 %.not1.i43, float %1514, float %1513, !dbg !123
  %1515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i45 = icmp eq i32 %1515, 0, !dbg !123
  %1516 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i44, float %1511, float 0x3FC10B2820000000) #5, !dbg !123
  %1517 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i44, float %1511, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i46 = select i1 %.not2.i45, float %1517, float %1516, !dbg !123
  %1518 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i47 = icmp eq i32 %1518, 0, !dbg !123
  %1519 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i46, float %1511, float 0xBFD5553DA0000000) #5, !dbg !123
  %1520 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i46, float %1511, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i48 = select i1 %.not3.i47, float %1520, float %1519, !dbg !123
  %1521 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i49 = icmp eq i32 %1521, 0, !dbg !123
  %1522 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i48, float %1511, float 0.000000e+00) #5, !dbg !123
  %1523 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i48, float %1511, float 0.000000e+00) #5, !dbg !123
  %.04.i50 = select i1 %.not4.i49, float %1523, float %1522, !dbg !123
  %1524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i51 = icmp eq i32 %1524, 0, !dbg !123
  %1525 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i50, float %1446, float %1446) #5, !dbg !123
  %1526 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i50, float %1446, float %1446) #5, !dbg !123
  %.02.i52 = select i1 %.not5.i51, float %1526, float %1525, !dbg !123
  br label %__nv_tanhf.exit53, !dbg !123

__nv_tanhf.exit53:                                ; preds = %__internal_fmad.exit1.i37, %__internal_fmad.exit3.i42
  %s.1.i41 = phi float [ %1510, %__internal_fmad.exit1.i37 ], [ %.02.i52, %__internal_fmad.exit3.i42 ], !dbg !123
  %1527 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i54 = icmp eq i32 %1527, 0, !dbg !123
  %1528 = tail call float @llvm.nvvm.fabs.ftz.f(float %1447) #5, !dbg !123
  %1529 = tail call float @llvm.nvvm.fabs.f(float %1447) #5, !dbg !123
  %.01.i55 = select i1 %.not.i54, float %1529, float %1528, !dbg !123
  %1530 = fcmp ult float %.01.i55, 0x3FE3333340000000, !dbg !123
  br i1 %1530, label %__internal_fmad.exit3.i61, label %__internal_fmad.exit1.i56, !dbg !123

__internal_fmad.exit1.i56:                        ; preds = %__nv_tanhf.exit53
  %1531 = fmul float %.01.i55, 0x4007154760000000, !dbg !123
  %1532 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1531) #5, !dbg !123
  %1533 = fadd float %1532, 1.000000e+00, !dbg !123
  %1534 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1533) #6, !dbg !123, !srcloc !59
  %1535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i57 = icmp eq i32 %1535, 0, !dbg !123
  %1536 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1534, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1537 = tail call float @llvm.nvvm.fma.rn.f(float %1534, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i58 = select i1 %.not6.i57, float %1537, float %1536, !dbg !123
  %1538 = fcmp oge float %.01.i55, 0x4022059680000000, !dbg !123
  %s.0.i59 = select i1 %1538, float 1.000000e+00, float %.03.i58, !dbg !123
  %1539 = bitcast float %s.0.i59 to i32, !dbg !123
  %1540 = bitcast float %1447 to i32, !dbg !123
  %1541 = and i32 %1540, -2147483648, !dbg !123
  %1542 = or i32 %1541, %1539, !dbg !123
  %1543 = bitcast i32 %1542 to float, !dbg !123
  br label %__nv_tanhf.exit72, !dbg !123

__internal_fmad.exit3.i61:                        ; preds = %__nv_tanhf.exit53
  %1544 = fmul float %1447, %1447, !dbg !123
  %1545 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i62 = icmp eq i32 %1545, 0, !dbg !123
  %1546 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1544, float 0xBFAAC795C0000000) #5, !dbg !123
  %1547 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1544, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i63 = select i1 %.not1.i62, float %1547, float %1546, !dbg !123
  %1548 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i64 = icmp eq i32 %1548, 0, !dbg !123
  %1549 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i63, float %1544, float 0x3FC10B2820000000) #5, !dbg !123
  %1550 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i63, float %1544, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i65 = select i1 %.not2.i64, float %1550, float %1549, !dbg !123
  %1551 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i66 = icmp eq i32 %1551, 0, !dbg !123
  %1552 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i65, float %1544, float 0xBFD5553DA0000000) #5, !dbg !123
  %1553 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i65, float %1544, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i67 = select i1 %.not3.i66, float %1553, float %1552, !dbg !123
  %1554 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i68 = icmp eq i32 %1554, 0, !dbg !123
  %1555 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i67, float %1544, float 0.000000e+00) #5, !dbg !123
  %1556 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i67, float %1544, float 0.000000e+00) #5, !dbg !123
  %.04.i69 = select i1 %.not4.i68, float %1556, float %1555, !dbg !123
  %1557 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i70 = icmp eq i32 %1557, 0, !dbg !123
  %1558 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i69, float %1447, float %1447) #5, !dbg !123
  %1559 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i69, float %1447, float %1447) #5, !dbg !123
  %.02.i71 = select i1 %.not5.i70, float %1559, float %1558, !dbg !123
  br label %__nv_tanhf.exit72, !dbg !123

__nv_tanhf.exit72:                                ; preds = %__internal_fmad.exit1.i56, %__internal_fmad.exit3.i61
  %s.1.i60 = phi float [ %1543, %__internal_fmad.exit1.i56 ], [ %.02.i71, %__internal_fmad.exit3.i61 ], !dbg !123
  %1560 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i73 = icmp eq i32 %1560, 0, !dbg !123
  %1561 = tail call float @llvm.nvvm.fabs.ftz.f(float %1448) #5, !dbg !123
  %1562 = tail call float @llvm.nvvm.fabs.f(float %1448) #5, !dbg !123
  %.01.i74 = select i1 %.not.i73, float %1562, float %1561, !dbg !123
  %1563 = fcmp ult float %.01.i74, 0x3FE3333340000000, !dbg !123
  br i1 %1563, label %__internal_fmad.exit3.i80, label %__internal_fmad.exit1.i75, !dbg !123

__internal_fmad.exit1.i75:                        ; preds = %__nv_tanhf.exit72
  %1564 = fmul float %.01.i74, 0x4007154760000000, !dbg !123
  %1565 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1564) #5, !dbg !123
  %1566 = fadd float %1565, 1.000000e+00, !dbg !123
  %1567 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1566) #6, !dbg !123, !srcloc !59
  %1568 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i76 = icmp eq i32 %1568, 0, !dbg !123
  %1569 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1567, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1570 = tail call float @llvm.nvvm.fma.rn.f(float %1567, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i77 = select i1 %.not6.i76, float %1570, float %1569, !dbg !123
  %1571 = fcmp oge float %.01.i74, 0x4022059680000000, !dbg !123
  %s.0.i78 = select i1 %1571, float 1.000000e+00, float %.03.i77, !dbg !123
  %1572 = bitcast float %s.0.i78 to i32, !dbg !123
  %1573 = bitcast float %1448 to i32, !dbg !123
  %1574 = and i32 %1573, -2147483648, !dbg !123
  %1575 = or i32 %1574, %1572, !dbg !123
  %1576 = bitcast i32 %1575 to float, !dbg !123
  br label %__nv_tanhf.exit91, !dbg !123

__internal_fmad.exit3.i80:                        ; preds = %__nv_tanhf.exit72
  %1577 = fmul float %1448, %1448, !dbg !123
  %1578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i81 = icmp eq i32 %1578, 0, !dbg !123
  %1579 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1577, float 0xBFAAC795C0000000) #5, !dbg !123
  %1580 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1577, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i82 = select i1 %.not1.i81, float %1580, float %1579, !dbg !123
  %1581 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i83 = icmp eq i32 %1581, 0, !dbg !123
  %1582 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i82, float %1577, float 0x3FC10B2820000000) #5, !dbg !123
  %1583 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i82, float %1577, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i84 = select i1 %.not2.i83, float %1583, float %1582, !dbg !123
  %1584 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i85 = icmp eq i32 %1584, 0, !dbg !123
  %1585 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i84, float %1577, float 0xBFD5553DA0000000) #5, !dbg !123
  %1586 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i84, float %1577, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i86 = select i1 %.not3.i85, float %1586, float %1585, !dbg !123
  %1587 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i87 = icmp eq i32 %1587, 0, !dbg !123
  %1588 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i86, float %1577, float 0.000000e+00) #5, !dbg !123
  %1589 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i86, float %1577, float 0.000000e+00) #5, !dbg !123
  %.04.i88 = select i1 %.not4.i87, float %1589, float %1588, !dbg !123
  %1590 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i89 = icmp eq i32 %1590, 0, !dbg !123
  %1591 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i88, float %1448, float %1448) #5, !dbg !123
  %1592 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i88, float %1448, float %1448) #5, !dbg !123
  %.02.i90 = select i1 %.not5.i89, float %1592, float %1591, !dbg !123
  br label %__nv_tanhf.exit91, !dbg !123

__nv_tanhf.exit91:                                ; preds = %__internal_fmad.exit1.i75, %__internal_fmad.exit3.i80
  %s.1.i79 = phi float [ %1576, %__internal_fmad.exit1.i75 ], [ %.02.i90, %__internal_fmad.exit3.i80 ], !dbg !123
  %1593 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i92 = icmp eq i32 %1593, 0, !dbg !123
  %1594 = tail call float @llvm.nvvm.fabs.ftz.f(float %1449) #5, !dbg !123
  %1595 = tail call float @llvm.nvvm.fabs.f(float %1449) #5, !dbg !123
  %.01.i93 = select i1 %.not.i92, float %1595, float %1594, !dbg !123
  %1596 = fcmp ult float %.01.i93, 0x3FE3333340000000, !dbg !123
  br i1 %1596, label %__internal_fmad.exit3.i99, label %__internal_fmad.exit1.i94, !dbg !123

__internal_fmad.exit1.i94:                        ; preds = %__nv_tanhf.exit91
  %1597 = fmul float %.01.i93, 0x4007154760000000, !dbg !123
  %1598 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1597) #5, !dbg !123
  %1599 = fadd float %1598, 1.000000e+00, !dbg !123
  %1600 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1599) #6, !dbg !123, !srcloc !59
  %1601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i95 = icmp eq i32 %1601, 0, !dbg !123
  %1602 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1600, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1603 = tail call float @llvm.nvvm.fma.rn.f(float %1600, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i96 = select i1 %.not6.i95, float %1603, float %1602, !dbg !123
  %1604 = fcmp oge float %.01.i93, 0x4022059680000000, !dbg !123
  %s.0.i97 = select i1 %1604, float 1.000000e+00, float %.03.i96, !dbg !123
  %1605 = bitcast float %s.0.i97 to i32, !dbg !123
  %1606 = bitcast float %1449 to i32, !dbg !123
  %1607 = and i32 %1606, -2147483648, !dbg !123
  %1608 = or i32 %1607, %1605, !dbg !123
  %1609 = bitcast i32 %1608 to float, !dbg !123
  br label %__nv_tanhf.exit110, !dbg !123

__internal_fmad.exit3.i99:                        ; preds = %__nv_tanhf.exit91
  %1610 = fmul float %1449, %1449, !dbg !123
  %1611 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i100 = icmp eq i32 %1611, 0, !dbg !123
  %1612 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1610, float 0xBFAAC795C0000000) #5, !dbg !123
  %1613 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1610, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i101 = select i1 %.not1.i100, float %1613, float %1612, !dbg !123
  %1614 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i102 = icmp eq i32 %1614, 0, !dbg !123
  %1615 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i101, float %1610, float 0x3FC10B2820000000) #5, !dbg !123
  %1616 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i101, float %1610, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i103 = select i1 %.not2.i102, float %1616, float %1615, !dbg !123
  %1617 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i104 = icmp eq i32 %1617, 0, !dbg !123
  %1618 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i103, float %1610, float 0xBFD5553DA0000000) #5, !dbg !123
  %1619 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i103, float %1610, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i105 = select i1 %.not3.i104, float %1619, float %1618, !dbg !123
  %1620 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i106 = icmp eq i32 %1620, 0, !dbg !123
  %1621 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i105, float %1610, float 0.000000e+00) #5, !dbg !123
  %1622 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i105, float %1610, float 0.000000e+00) #5, !dbg !123
  %.04.i107 = select i1 %.not4.i106, float %1622, float %1621, !dbg !123
  %1623 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i108 = icmp eq i32 %1623, 0, !dbg !123
  %1624 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i107, float %1449, float %1449) #5, !dbg !123
  %1625 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i107, float %1449, float %1449) #5, !dbg !123
  %.02.i109 = select i1 %.not5.i108, float %1625, float %1624, !dbg !123
  br label %__nv_tanhf.exit110, !dbg !123

__nv_tanhf.exit110:                               ; preds = %__internal_fmad.exit1.i94, %__internal_fmad.exit3.i99
  %s.1.i98 = phi float [ %1609, %__internal_fmad.exit1.i94 ], [ %.02.i109, %__internal_fmad.exit3.i99 ], !dbg !123
  %1626 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i111 = icmp eq i32 %1626, 0, !dbg !123
  %1627 = tail call float @llvm.nvvm.fabs.ftz.f(float %1450) #5, !dbg !123
  %1628 = tail call float @llvm.nvvm.fabs.f(float %1450) #5, !dbg !123
  %.01.i112 = select i1 %.not.i111, float %1628, float %1627, !dbg !123
  %1629 = fcmp ult float %.01.i112, 0x3FE3333340000000, !dbg !123
  br i1 %1629, label %__internal_fmad.exit3.i118, label %__internal_fmad.exit1.i113, !dbg !123

__internal_fmad.exit1.i113:                       ; preds = %__nv_tanhf.exit110
  %1630 = fmul float %.01.i112, 0x4007154760000000, !dbg !123
  %1631 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1630) #5, !dbg !123
  %1632 = fadd float %1631, 1.000000e+00, !dbg !123
  %1633 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1632) #6, !dbg !123, !srcloc !59
  %1634 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i114 = icmp eq i32 %1634, 0, !dbg !123
  %1635 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1633, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1636 = tail call float @llvm.nvvm.fma.rn.f(float %1633, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i115 = select i1 %.not6.i114, float %1636, float %1635, !dbg !123
  %1637 = fcmp oge float %.01.i112, 0x4022059680000000, !dbg !123
  %s.0.i116 = select i1 %1637, float 1.000000e+00, float %.03.i115, !dbg !123
  %1638 = bitcast float %s.0.i116 to i32, !dbg !123
  %1639 = bitcast float %1450 to i32, !dbg !123
  %1640 = and i32 %1639, -2147483648, !dbg !123
  %1641 = or i32 %1640, %1638, !dbg !123
  %1642 = bitcast i32 %1641 to float, !dbg !123
  br label %__nv_tanhf.exit129, !dbg !123

__internal_fmad.exit3.i118:                       ; preds = %__nv_tanhf.exit110
  %1643 = fmul float %1450, %1450, !dbg !123
  %1644 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i119 = icmp eq i32 %1644, 0, !dbg !123
  %1645 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1643, float 0xBFAAC795C0000000) #5, !dbg !123
  %1646 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1643, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i120 = select i1 %.not1.i119, float %1646, float %1645, !dbg !123
  %1647 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i121 = icmp eq i32 %1647, 0, !dbg !123
  %1648 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i120, float %1643, float 0x3FC10B2820000000) #5, !dbg !123
  %1649 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i120, float %1643, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i122 = select i1 %.not2.i121, float %1649, float %1648, !dbg !123
  %1650 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i123 = icmp eq i32 %1650, 0, !dbg !123
  %1651 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i122, float %1643, float 0xBFD5553DA0000000) #5, !dbg !123
  %1652 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i122, float %1643, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i124 = select i1 %.not3.i123, float %1652, float %1651, !dbg !123
  %1653 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i125 = icmp eq i32 %1653, 0, !dbg !123
  %1654 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i124, float %1643, float 0.000000e+00) #5, !dbg !123
  %1655 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i124, float %1643, float 0.000000e+00) #5, !dbg !123
  %.04.i126 = select i1 %.not4.i125, float %1655, float %1654, !dbg !123
  %1656 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i127 = icmp eq i32 %1656, 0, !dbg !123
  %1657 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i126, float %1450, float %1450) #5, !dbg !123
  %1658 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i126, float %1450, float %1450) #5, !dbg !123
  %.02.i128 = select i1 %.not5.i127, float %1658, float %1657, !dbg !123
  br label %__nv_tanhf.exit129, !dbg !123

__nv_tanhf.exit129:                               ; preds = %__internal_fmad.exit1.i113, %__internal_fmad.exit3.i118
  %s.1.i117 = phi float [ %1642, %__internal_fmad.exit1.i113 ], [ %.02.i128, %__internal_fmad.exit3.i118 ], !dbg !123
  %1659 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i130 = icmp eq i32 %1659, 0, !dbg !123
  %1660 = tail call float @llvm.nvvm.fabs.ftz.f(float %1451) #5, !dbg !123
  %1661 = tail call float @llvm.nvvm.fabs.f(float %1451) #5, !dbg !123
  %.01.i131 = select i1 %.not.i130, float %1661, float %1660, !dbg !123
  %1662 = fcmp ult float %.01.i131, 0x3FE3333340000000, !dbg !123
  br i1 %1662, label %__internal_fmad.exit3.i137, label %__internal_fmad.exit1.i132, !dbg !123

__internal_fmad.exit1.i132:                       ; preds = %__nv_tanhf.exit129
  %1663 = fmul float %.01.i131, 0x4007154760000000, !dbg !123
  %1664 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1663) #5, !dbg !123
  %1665 = fadd float %1664, 1.000000e+00, !dbg !123
  %1666 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1665) #6, !dbg !123, !srcloc !59
  %1667 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i133 = icmp eq i32 %1667, 0, !dbg !123
  %1668 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1666, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1669 = tail call float @llvm.nvvm.fma.rn.f(float %1666, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i134 = select i1 %.not6.i133, float %1669, float %1668, !dbg !123
  %1670 = fcmp oge float %.01.i131, 0x4022059680000000, !dbg !123
  %s.0.i135 = select i1 %1670, float 1.000000e+00, float %.03.i134, !dbg !123
  %1671 = bitcast float %s.0.i135 to i32, !dbg !123
  %1672 = bitcast float %1451 to i32, !dbg !123
  %1673 = and i32 %1672, -2147483648, !dbg !123
  %1674 = or i32 %1673, %1671, !dbg !123
  %1675 = bitcast i32 %1674 to float, !dbg !123
  br label %__nv_tanhf.exit148, !dbg !123

__internal_fmad.exit3.i137:                       ; preds = %__nv_tanhf.exit129
  %1676 = fmul float %1451, %1451, !dbg !123
  %1677 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i138 = icmp eq i32 %1677, 0, !dbg !123
  %1678 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1676, float 0xBFAAC795C0000000) #5, !dbg !123
  %1679 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1676, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i139 = select i1 %.not1.i138, float %1679, float %1678, !dbg !123
  %1680 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i140 = icmp eq i32 %1680, 0, !dbg !123
  %1681 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i139, float %1676, float 0x3FC10B2820000000) #5, !dbg !123
  %1682 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i139, float %1676, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i141 = select i1 %.not2.i140, float %1682, float %1681, !dbg !123
  %1683 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i142 = icmp eq i32 %1683, 0, !dbg !123
  %1684 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i141, float %1676, float 0xBFD5553DA0000000) #5, !dbg !123
  %1685 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i141, float %1676, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i143 = select i1 %.not3.i142, float %1685, float %1684, !dbg !123
  %1686 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i144 = icmp eq i32 %1686, 0, !dbg !123
  %1687 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i143, float %1676, float 0.000000e+00) #5, !dbg !123
  %1688 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i143, float %1676, float 0.000000e+00) #5, !dbg !123
  %.04.i145 = select i1 %.not4.i144, float %1688, float %1687, !dbg !123
  %1689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i146 = icmp eq i32 %1689, 0, !dbg !123
  %1690 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i145, float %1451, float %1451) #5, !dbg !123
  %1691 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i145, float %1451, float %1451) #5, !dbg !123
  %.02.i147 = select i1 %.not5.i146, float %1691, float %1690, !dbg !123
  br label %__nv_tanhf.exit148, !dbg !123

__nv_tanhf.exit148:                               ; preds = %__internal_fmad.exit1.i132, %__internal_fmad.exit3.i137
  %s.1.i136 = phi float [ %1675, %__internal_fmad.exit1.i132 ], [ %.02.i147, %__internal_fmad.exit3.i137 ], !dbg !123
  %1692 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i149 = icmp eq i32 %1692, 0, !dbg !123
  %1693 = tail call float @llvm.nvvm.fabs.ftz.f(float %1452) #5, !dbg !123
  %1694 = tail call float @llvm.nvvm.fabs.f(float %1452) #5, !dbg !123
  %.01.i150 = select i1 %.not.i149, float %1694, float %1693, !dbg !123
  %1695 = fcmp ult float %.01.i150, 0x3FE3333340000000, !dbg !123
  br i1 %1695, label %__internal_fmad.exit3.i156, label %__internal_fmad.exit1.i151, !dbg !123

__internal_fmad.exit1.i151:                       ; preds = %__nv_tanhf.exit148
  %1696 = fmul float %.01.i150, 0x4007154760000000, !dbg !123
  %1697 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1696) #5, !dbg !123
  %1698 = fadd float %1697, 1.000000e+00, !dbg !123
  %1699 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1698) #6, !dbg !123, !srcloc !59
  %1700 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i152 = icmp eq i32 %1700, 0, !dbg !123
  %1701 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1699, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1702 = tail call float @llvm.nvvm.fma.rn.f(float %1699, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i153 = select i1 %.not6.i152, float %1702, float %1701, !dbg !123
  %1703 = fcmp oge float %.01.i150, 0x4022059680000000, !dbg !123
  %s.0.i154 = select i1 %1703, float 1.000000e+00, float %.03.i153, !dbg !123
  %1704 = bitcast float %s.0.i154 to i32, !dbg !123
  %1705 = bitcast float %1452 to i32, !dbg !123
  %1706 = and i32 %1705, -2147483648, !dbg !123
  %1707 = or i32 %1706, %1704, !dbg !123
  %1708 = bitcast i32 %1707 to float, !dbg !123
  br label %__nv_tanhf.exit167, !dbg !123

__internal_fmad.exit3.i156:                       ; preds = %__nv_tanhf.exit148
  %1709 = fmul float %1452, %1452, !dbg !123
  %1710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i157 = icmp eq i32 %1710, 0, !dbg !123
  %1711 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1709, float 0xBFAAC795C0000000) #5, !dbg !123
  %1712 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1709, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i158 = select i1 %.not1.i157, float %1712, float %1711, !dbg !123
  %1713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i159 = icmp eq i32 %1713, 0, !dbg !123
  %1714 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i158, float %1709, float 0x3FC10B2820000000) #5, !dbg !123
  %1715 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i158, float %1709, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i160 = select i1 %.not2.i159, float %1715, float %1714, !dbg !123
  %1716 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i161 = icmp eq i32 %1716, 0, !dbg !123
  %1717 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i160, float %1709, float 0xBFD5553DA0000000) #5, !dbg !123
  %1718 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i160, float %1709, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i162 = select i1 %.not3.i161, float %1718, float %1717, !dbg !123
  %1719 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i163 = icmp eq i32 %1719, 0, !dbg !123
  %1720 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i162, float %1709, float 0.000000e+00) #5, !dbg !123
  %1721 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i162, float %1709, float 0.000000e+00) #5, !dbg !123
  %.04.i164 = select i1 %.not4.i163, float %1721, float %1720, !dbg !123
  %1722 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i165 = icmp eq i32 %1722, 0, !dbg !123
  %1723 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i164, float %1452, float %1452) #5, !dbg !123
  %1724 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i164, float %1452, float %1452) #5, !dbg !123
  %.02.i166 = select i1 %.not5.i165, float %1724, float %1723, !dbg !123
  br label %__nv_tanhf.exit167, !dbg !123

__nv_tanhf.exit167:                               ; preds = %__internal_fmad.exit1.i151, %__internal_fmad.exit3.i156
  %s.1.i155 = phi float [ %1708, %__internal_fmad.exit1.i151 ], [ %.02.i166, %__internal_fmad.exit3.i156 ], !dbg !123
  %1725 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i168 = icmp eq i32 %1725, 0, !dbg !123
  %1726 = tail call float @llvm.nvvm.fabs.ftz.f(float %1453) #5, !dbg !123
  %1727 = tail call float @llvm.nvvm.fabs.f(float %1453) #5, !dbg !123
  %.01.i169 = select i1 %.not.i168, float %1727, float %1726, !dbg !123
  %1728 = fcmp ult float %.01.i169, 0x3FE3333340000000, !dbg !123
  br i1 %1728, label %__internal_fmad.exit3.i175, label %__internal_fmad.exit1.i170, !dbg !123

__internal_fmad.exit1.i170:                       ; preds = %__nv_tanhf.exit167
  %1729 = fmul float %.01.i169, 0x4007154760000000, !dbg !123
  %1730 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1729) #5, !dbg !123
  %1731 = fadd float %1730, 1.000000e+00, !dbg !123
  %1732 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1731) #6, !dbg !123, !srcloc !59
  %1733 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i171 = icmp eq i32 %1733, 0, !dbg !123
  %1734 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1732, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1735 = tail call float @llvm.nvvm.fma.rn.f(float %1732, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i172 = select i1 %.not6.i171, float %1735, float %1734, !dbg !123
  %1736 = fcmp oge float %.01.i169, 0x4022059680000000, !dbg !123
  %s.0.i173 = select i1 %1736, float 1.000000e+00, float %.03.i172, !dbg !123
  %1737 = bitcast float %s.0.i173 to i32, !dbg !123
  %1738 = bitcast float %1453 to i32, !dbg !123
  %1739 = and i32 %1738, -2147483648, !dbg !123
  %1740 = or i32 %1739, %1737, !dbg !123
  %1741 = bitcast i32 %1740 to float, !dbg !123
  br label %__nv_tanhf.exit186, !dbg !123

__internal_fmad.exit3.i175:                       ; preds = %__nv_tanhf.exit167
  %1742 = fmul float %1453, %1453, !dbg !123
  %1743 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i176 = icmp eq i32 %1743, 0, !dbg !123
  %1744 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1742, float 0xBFAAC795C0000000) #5, !dbg !123
  %1745 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1742, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i177 = select i1 %.not1.i176, float %1745, float %1744, !dbg !123
  %1746 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i178 = icmp eq i32 %1746, 0, !dbg !123
  %1747 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i177, float %1742, float 0x3FC10B2820000000) #5, !dbg !123
  %1748 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i177, float %1742, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i179 = select i1 %.not2.i178, float %1748, float %1747, !dbg !123
  %1749 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i180 = icmp eq i32 %1749, 0, !dbg !123
  %1750 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i179, float %1742, float 0xBFD5553DA0000000) #5, !dbg !123
  %1751 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i179, float %1742, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i181 = select i1 %.not3.i180, float %1751, float %1750, !dbg !123
  %1752 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i182 = icmp eq i32 %1752, 0, !dbg !123
  %1753 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i181, float %1742, float 0.000000e+00) #5, !dbg !123
  %1754 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i181, float %1742, float 0.000000e+00) #5, !dbg !123
  %.04.i183 = select i1 %.not4.i182, float %1754, float %1753, !dbg !123
  %1755 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i184 = icmp eq i32 %1755, 0, !dbg !123
  %1756 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i183, float %1453, float %1453) #5, !dbg !123
  %1757 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i183, float %1453, float %1453) #5, !dbg !123
  %.02.i185 = select i1 %.not5.i184, float %1757, float %1756, !dbg !123
  br label %__nv_tanhf.exit186, !dbg !123

__nv_tanhf.exit186:                               ; preds = %__internal_fmad.exit1.i170, %__internal_fmad.exit3.i175
  %s.1.i174 = phi float [ %1741, %__internal_fmad.exit1.i170 ], [ %.02.i185, %__internal_fmad.exit3.i175 ], !dbg !123
  %1758 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i187 = icmp eq i32 %1758, 0, !dbg !123
  %1759 = tail call float @llvm.nvvm.fabs.ftz.f(float %1454) #5, !dbg !123
  %1760 = tail call float @llvm.nvvm.fabs.f(float %1454) #5, !dbg !123
  %.01.i188 = select i1 %.not.i187, float %1760, float %1759, !dbg !123
  %1761 = fcmp ult float %.01.i188, 0x3FE3333340000000, !dbg !123
  br i1 %1761, label %__internal_fmad.exit3.i194, label %__internal_fmad.exit1.i189, !dbg !123

__internal_fmad.exit1.i189:                       ; preds = %__nv_tanhf.exit186
  %1762 = fmul float %.01.i188, 0x4007154760000000, !dbg !123
  %1763 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1762) #5, !dbg !123
  %1764 = fadd float %1763, 1.000000e+00, !dbg !123
  %1765 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1764) #6, !dbg !123, !srcloc !59
  %1766 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i190 = icmp eq i32 %1766, 0, !dbg !123
  %1767 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1765, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1768 = tail call float @llvm.nvvm.fma.rn.f(float %1765, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i191 = select i1 %.not6.i190, float %1768, float %1767, !dbg !123
  %1769 = fcmp oge float %.01.i188, 0x4022059680000000, !dbg !123
  %s.0.i192 = select i1 %1769, float 1.000000e+00, float %.03.i191, !dbg !123
  %1770 = bitcast float %s.0.i192 to i32, !dbg !123
  %1771 = bitcast float %1454 to i32, !dbg !123
  %1772 = and i32 %1771, -2147483648, !dbg !123
  %1773 = or i32 %1772, %1770, !dbg !123
  %1774 = bitcast i32 %1773 to float, !dbg !123
  br label %__nv_tanhf.exit205, !dbg !123

__internal_fmad.exit3.i194:                       ; preds = %__nv_tanhf.exit186
  %1775 = fmul float %1454, %1454, !dbg !123
  %1776 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i195 = icmp eq i32 %1776, 0, !dbg !123
  %1777 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1775, float 0xBFAAC795C0000000) #5, !dbg !123
  %1778 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1775, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i196 = select i1 %.not1.i195, float %1778, float %1777, !dbg !123
  %1779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i197 = icmp eq i32 %1779, 0, !dbg !123
  %1780 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i196, float %1775, float 0x3FC10B2820000000) #5, !dbg !123
  %1781 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i196, float %1775, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i198 = select i1 %.not2.i197, float %1781, float %1780, !dbg !123
  %1782 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i199 = icmp eq i32 %1782, 0, !dbg !123
  %1783 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i198, float %1775, float 0xBFD5553DA0000000) #5, !dbg !123
  %1784 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i198, float %1775, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i200 = select i1 %.not3.i199, float %1784, float %1783, !dbg !123
  %1785 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i201 = icmp eq i32 %1785, 0, !dbg !123
  %1786 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i200, float %1775, float 0.000000e+00) #5, !dbg !123
  %1787 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i200, float %1775, float 0.000000e+00) #5, !dbg !123
  %.04.i202 = select i1 %.not4.i201, float %1787, float %1786, !dbg !123
  %1788 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i203 = icmp eq i32 %1788, 0, !dbg !123
  %1789 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i202, float %1454, float %1454) #5, !dbg !123
  %1790 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i202, float %1454, float %1454) #5, !dbg !123
  %.02.i204 = select i1 %.not5.i203, float %1790, float %1789, !dbg !123
  br label %__nv_tanhf.exit205, !dbg !123

__nv_tanhf.exit205:                               ; preds = %__internal_fmad.exit1.i189, %__internal_fmad.exit3.i194
  %s.1.i193 = phi float [ %1774, %__internal_fmad.exit1.i189 ], [ %.02.i204, %__internal_fmad.exit3.i194 ], !dbg !123
  %1791 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i206 = icmp eq i32 %1791, 0, !dbg !123
  %1792 = tail call float @llvm.nvvm.fabs.ftz.f(float %1455) #5, !dbg !123
  %1793 = tail call float @llvm.nvvm.fabs.f(float %1455) #5, !dbg !123
  %.01.i207 = select i1 %.not.i206, float %1793, float %1792, !dbg !123
  %1794 = fcmp ult float %.01.i207, 0x3FE3333340000000, !dbg !123
  br i1 %1794, label %__internal_fmad.exit3.i213, label %__internal_fmad.exit1.i208, !dbg !123

__internal_fmad.exit1.i208:                       ; preds = %__nv_tanhf.exit205
  %1795 = fmul float %.01.i207, 0x4007154760000000, !dbg !123
  %1796 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1795) #5, !dbg !123
  %1797 = fadd float %1796, 1.000000e+00, !dbg !123
  %1798 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1797) #6, !dbg !123, !srcloc !59
  %1799 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i209 = icmp eq i32 %1799, 0, !dbg !123
  %1800 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1798, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1801 = tail call float @llvm.nvvm.fma.rn.f(float %1798, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i210 = select i1 %.not6.i209, float %1801, float %1800, !dbg !123
  %1802 = fcmp oge float %.01.i207, 0x4022059680000000, !dbg !123
  %s.0.i211 = select i1 %1802, float 1.000000e+00, float %.03.i210, !dbg !123
  %1803 = bitcast float %s.0.i211 to i32, !dbg !123
  %1804 = bitcast float %1455 to i32, !dbg !123
  %1805 = and i32 %1804, -2147483648, !dbg !123
  %1806 = or i32 %1805, %1803, !dbg !123
  %1807 = bitcast i32 %1806 to float, !dbg !123
  br label %__nv_tanhf.exit224, !dbg !123

__internal_fmad.exit3.i213:                       ; preds = %__nv_tanhf.exit205
  %1808 = fmul float %1455, %1455, !dbg !123
  %1809 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i214 = icmp eq i32 %1809, 0, !dbg !123
  %1810 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1808, float 0xBFAAC795C0000000) #5, !dbg !123
  %1811 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1808, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i215 = select i1 %.not1.i214, float %1811, float %1810, !dbg !123
  %1812 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i216 = icmp eq i32 %1812, 0, !dbg !123
  %1813 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i215, float %1808, float 0x3FC10B2820000000) #5, !dbg !123
  %1814 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i215, float %1808, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i217 = select i1 %.not2.i216, float %1814, float %1813, !dbg !123
  %1815 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i218 = icmp eq i32 %1815, 0, !dbg !123
  %1816 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i217, float %1808, float 0xBFD5553DA0000000) #5, !dbg !123
  %1817 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i217, float %1808, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i219 = select i1 %.not3.i218, float %1817, float %1816, !dbg !123
  %1818 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i220 = icmp eq i32 %1818, 0, !dbg !123
  %1819 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i219, float %1808, float 0.000000e+00) #5, !dbg !123
  %1820 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i219, float %1808, float 0.000000e+00) #5, !dbg !123
  %.04.i221 = select i1 %.not4.i220, float %1820, float %1819, !dbg !123
  %1821 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i222 = icmp eq i32 %1821, 0, !dbg !123
  %1822 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i221, float %1455, float %1455) #5, !dbg !123
  %1823 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i221, float %1455, float %1455) #5, !dbg !123
  %.02.i223 = select i1 %.not5.i222, float %1823, float %1822, !dbg !123
  br label %__nv_tanhf.exit224, !dbg !123

__nv_tanhf.exit224:                               ; preds = %__internal_fmad.exit1.i208, %__internal_fmad.exit3.i213
  %s.1.i212 = phi float [ %1807, %__internal_fmad.exit1.i208 ], [ %.02.i223, %__internal_fmad.exit3.i213 ], !dbg !123
  %1824 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i225 = icmp eq i32 %1824, 0, !dbg !123
  %1825 = tail call float @llvm.nvvm.fabs.ftz.f(float %1456) #5, !dbg !123
  %1826 = tail call float @llvm.nvvm.fabs.f(float %1456) #5, !dbg !123
  %.01.i226 = select i1 %.not.i225, float %1826, float %1825, !dbg !123
  %1827 = fcmp ult float %.01.i226, 0x3FE3333340000000, !dbg !123
  br i1 %1827, label %__internal_fmad.exit3.i232, label %__internal_fmad.exit1.i227, !dbg !123

__internal_fmad.exit1.i227:                       ; preds = %__nv_tanhf.exit224
  %1828 = fmul float %.01.i226, 0x4007154760000000, !dbg !123
  %1829 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1828) #5, !dbg !123
  %1830 = fadd float %1829, 1.000000e+00, !dbg !123
  %1831 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1830) #6, !dbg !123, !srcloc !59
  %1832 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i228 = icmp eq i32 %1832, 0, !dbg !123
  %1833 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1831, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1834 = tail call float @llvm.nvvm.fma.rn.f(float %1831, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i229 = select i1 %.not6.i228, float %1834, float %1833, !dbg !123
  %1835 = fcmp oge float %.01.i226, 0x4022059680000000, !dbg !123
  %s.0.i230 = select i1 %1835, float 1.000000e+00, float %.03.i229, !dbg !123
  %1836 = bitcast float %s.0.i230 to i32, !dbg !123
  %1837 = bitcast float %1456 to i32, !dbg !123
  %1838 = and i32 %1837, -2147483648, !dbg !123
  %1839 = or i32 %1838, %1836, !dbg !123
  %1840 = bitcast i32 %1839 to float, !dbg !123
  br label %__nv_tanhf.exit243, !dbg !123

__internal_fmad.exit3.i232:                       ; preds = %__nv_tanhf.exit224
  %1841 = fmul float %1456, %1456, !dbg !123
  %1842 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i233 = icmp eq i32 %1842, 0, !dbg !123
  %1843 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1841, float 0xBFAAC795C0000000) #5, !dbg !123
  %1844 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1841, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i234 = select i1 %.not1.i233, float %1844, float %1843, !dbg !123
  %1845 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i235 = icmp eq i32 %1845, 0, !dbg !123
  %1846 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i234, float %1841, float 0x3FC10B2820000000) #5, !dbg !123
  %1847 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i234, float %1841, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i236 = select i1 %.not2.i235, float %1847, float %1846, !dbg !123
  %1848 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i237 = icmp eq i32 %1848, 0, !dbg !123
  %1849 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i236, float %1841, float 0xBFD5553DA0000000) #5, !dbg !123
  %1850 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i236, float %1841, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i238 = select i1 %.not3.i237, float %1850, float %1849, !dbg !123
  %1851 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i239 = icmp eq i32 %1851, 0, !dbg !123
  %1852 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i238, float %1841, float 0.000000e+00) #5, !dbg !123
  %1853 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i238, float %1841, float 0.000000e+00) #5, !dbg !123
  %.04.i240 = select i1 %.not4.i239, float %1853, float %1852, !dbg !123
  %1854 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i241 = icmp eq i32 %1854, 0, !dbg !123
  %1855 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i240, float %1456, float %1456) #5, !dbg !123
  %1856 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i240, float %1456, float %1456) #5, !dbg !123
  %.02.i242 = select i1 %.not5.i241, float %1856, float %1855, !dbg !123
  br label %__nv_tanhf.exit243, !dbg !123

__nv_tanhf.exit243:                               ; preds = %__internal_fmad.exit1.i227, %__internal_fmad.exit3.i232
  %s.1.i231 = phi float [ %1840, %__internal_fmad.exit1.i227 ], [ %.02.i242, %__internal_fmad.exit3.i232 ], !dbg !123
  %1857 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i244 = icmp eq i32 %1857, 0, !dbg !123
  %1858 = tail call float @llvm.nvvm.fabs.ftz.f(float %1457) #5, !dbg !123
  %1859 = tail call float @llvm.nvvm.fabs.f(float %1457) #5, !dbg !123
  %.01.i245 = select i1 %.not.i244, float %1859, float %1858, !dbg !123
  %1860 = fcmp ult float %.01.i245, 0x3FE3333340000000, !dbg !123
  br i1 %1860, label %__internal_fmad.exit3.i251, label %__internal_fmad.exit1.i246, !dbg !123

__internal_fmad.exit1.i246:                       ; preds = %__nv_tanhf.exit243
  %1861 = fmul float %.01.i245, 0x4007154760000000, !dbg !123
  %1862 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1861) #5, !dbg !123
  %1863 = fadd float %1862, 1.000000e+00, !dbg !123
  %1864 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1863) #6, !dbg !123, !srcloc !59
  %1865 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i247 = icmp eq i32 %1865, 0, !dbg !123
  %1866 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1864, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1867 = tail call float @llvm.nvvm.fma.rn.f(float %1864, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i248 = select i1 %.not6.i247, float %1867, float %1866, !dbg !123
  %1868 = fcmp oge float %.01.i245, 0x4022059680000000, !dbg !123
  %s.0.i249 = select i1 %1868, float 1.000000e+00, float %.03.i248, !dbg !123
  %1869 = bitcast float %s.0.i249 to i32, !dbg !123
  %1870 = bitcast float %1457 to i32, !dbg !123
  %1871 = and i32 %1870, -2147483648, !dbg !123
  %1872 = or i32 %1871, %1869, !dbg !123
  %1873 = bitcast i32 %1872 to float, !dbg !123
  br label %__nv_tanhf.exit262, !dbg !123

__internal_fmad.exit3.i251:                       ; preds = %__nv_tanhf.exit243
  %1874 = fmul float %1457, %1457, !dbg !123
  %1875 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i252 = icmp eq i32 %1875, 0, !dbg !123
  %1876 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1874, float 0xBFAAC795C0000000) #5, !dbg !123
  %1877 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1874, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i253 = select i1 %.not1.i252, float %1877, float %1876, !dbg !123
  %1878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i254 = icmp eq i32 %1878, 0, !dbg !123
  %1879 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i253, float %1874, float 0x3FC10B2820000000) #5, !dbg !123
  %1880 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i253, float %1874, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i255 = select i1 %.not2.i254, float %1880, float %1879, !dbg !123
  %1881 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i256 = icmp eq i32 %1881, 0, !dbg !123
  %1882 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i255, float %1874, float 0xBFD5553DA0000000) #5, !dbg !123
  %1883 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i255, float %1874, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i257 = select i1 %.not3.i256, float %1883, float %1882, !dbg !123
  %1884 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i258 = icmp eq i32 %1884, 0, !dbg !123
  %1885 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i257, float %1874, float 0.000000e+00) #5, !dbg !123
  %1886 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i257, float %1874, float 0.000000e+00) #5, !dbg !123
  %.04.i259 = select i1 %.not4.i258, float %1886, float %1885, !dbg !123
  %1887 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i260 = icmp eq i32 %1887, 0, !dbg !123
  %1888 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i259, float %1457, float %1457) #5, !dbg !123
  %1889 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i259, float %1457, float %1457) #5, !dbg !123
  %.02.i261 = select i1 %.not5.i260, float %1889, float %1888, !dbg !123
  br label %__nv_tanhf.exit262, !dbg !123

__nv_tanhf.exit262:                               ; preds = %__internal_fmad.exit1.i246, %__internal_fmad.exit3.i251
  %s.1.i250 = phi float [ %1873, %__internal_fmad.exit1.i246 ], [ %.02.i261, %__internal_fmad.exit3.i251 ], !dbg !123
  %1890 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i263 = icmp eq i32 %1890, 0, !dbg !123
  %1891 = tail call float @llvm.nvvm.fabs.ftz.f(float %1458) #5, !dbg !123
  %1892 = tail call float @llvm.nvvm.fabs.f(float %1458) #5, !dbg !123
  %.01.i264 = select i1 %.not.i263, float %1892, float %1891, !dbg !123
  %1893 = fcmp ult float %.01.i264, 0x3FE3333340000000, !dbg !123
  br i1 %1893, label %__internal_fmad.exit3.i270, label %__internal_fmad.exit1.i265, !dbg !123

__internal_fmad.exit1.i265:                       ; preds = %__nv_tanhf.exit262
  %1894 = fmul float %.01.i264, 0x4007154760000000, !dbg !123
  %1895 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1894) #5, !dbg !123
  %1896 = fadd float %1895, 1.000000e+00, !dbg !123
  %1897 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1896) #6, !dbg !123, !srcloc !59
  %1898 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i266 = icmp eq i32 %1898, 0, !dbg !123
  %1899 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1897, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1900 = tail call float @llvm.nvvm.fma.rn.f(float %1897, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i267 = select i1 %.not6.i266, float %1900, float %1899, !dbg !123
  %1901 = fcmp oge float %.01.i264, 0x4022059680000000, !dbg !123
  %s.0.i268 = select i1 %1901, float 1.000000e+00, float %.03.i267, !dbg !123
  %1902 = bitcast float %s.0.i268 to i32, !dbg !123
  %1903 = bitcast float %1458 to i32, !dbg !123
  %1904 = and i32 %1903, -2147483648, !dbg !123
  %1905 = or i32 %1904, %1902, !dbg !123
  %1906 = bitcast i32 %1905 to float, !dbg !123
  br label %__nv_tanhf.exit281, !dbg !123

__internal_fmad.exit3.i270:                       ; preds = %__nv_tanhf.exit262
  %1907 = fmul float %1458, %1458, !dbg !123
  %1908 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i271 = icmp eq i32 %1908, 0, !dbg !123
  %1909 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1907, float 0xBFAAC795C0000000) #5, !dbg !123
  %1910 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1907, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i272 = select i1 %.not1.i271, float %1910, float %1909, !dbg !123
  %1911 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i273 = icmp eq i32 %1911, 0, !dbg !123
  %1912 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i272, float %1907, float 0x3FC10B2820000000) #5, !dbg !123
  %1913 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i272, float %1907, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i274 = select i1 %.not2.i273, float %1913, float %1912, !dbg !123
  %1914 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i275 = icmp eq i32 %1914, 0, !dbg !123
  %1915 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i274, float %1907, float 0xBFD5553DA0000000) #5, !dbg !123
  %1916 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i274, float %1907, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i276 = select i1 %.not3.i275, float %1916, float %1915, !dbg !123
  %1917 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i277 = icmp eq i32 %1917, 0, !dbg !123
  %1918 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i276, float %1907, float 0.000000e+00) #5, !dbg !123
  %1919 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i276, float %1907, float 0.000000e+00) #5, !dbg !123
  %.04.i278 = select i1 %.not4.i277, float %1919, float %1918, !dbg !123
  %1920 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i279 = icmp eq i32 %1920, 0, !dbg !123
  %1921 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i278, float %1458, float %1458) #5, !dbg !123
  %1922 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i278, float %1458, float %1458) #5, !dbg !123
  %.02.i280 = select i1 %.not5.i279, float %1922, float %1921, !dbg !123
  br label %__nv_tanhf.exit281, !dbg !123

__nv_tanhf.exit281:                               ; preds = %__internal_fmad.exit1.i265, %__internal_fmad.exit3.i270
  %s.1.i269 = phi float [ %1906, %__internal_fmad.exit1.i265 ], [ %.02.i280, %__internal_fmad.exit3.i270 ], !dbg !123
  %1923 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i282 = icmp eq i32 %1923, 0, !dbg !123
  %1924 = tail call float @llvm.nvvm.fabs.ftz.f(float %1459) #5, !dbg !123
  %1925 = tail call float @llvm.nvvm.fabs.f(float %1459) #5, !dbg !123
  %.01.i283 = select i1 %.not.i282, float %1925, float %1924, !dbg !123
  %1926 = fcmp ult float %.01.i283, 0x3FE3333340000000, !dbg !123
  br i1 %1926, label %__internal_fmad.exit3.i289, label %__internal_fmad.exit1.i284, !dbg !123

__internal_fmad.exit1.i284:                       ; preds = %__nv_tanhf.exit281
  %1927 = fmul float %.01.i283, 0x4007154760000000, !dbg !123
  %1928 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1927) #5, !dbg !123
  %1929 = fadd float %1928, 1.000000e+00, !dbg !123
  %1930 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1929) #6, !dbg !123, !srcloc !59
  %1931 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i285 = icmp eq i32 %1931, 0, !dbg !123
  %1932 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1930, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1933 = tail call float @llvm.nvvm.fma.rn.f(float %1930, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i286 = select i1 %.not6.i285, float %1933, float %1932, !dbg !123
  %1934 = fcmp oge float %.01.i283, 0x4022059680000000, !dbg !123
  %s.0.i287 = select i1 %1934, float 1.000000e+00, float %.03.i286, !dbg !123
  %1935 = bitcast float %s.0.i287 to i32, !dbg !123
  %1936 = bitcast float %1459 to i32, !dbg !123
  %1937 = and i32 %1936, -2147483648, !dbg !123
  %1938 = or i32 %1937, %1935, !dbg !123
  %1939 = bitcast i32 %1938 to float, !dbg !123
  br label %__nv_tanhf.exit300, !dbg !123

__internal_fmad.exit3.i289:                       ; preds = %__nv_tanhf.exit281
  %1940 = fmul float %1459, %1459, !dbg !123
  %1941 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i290 = icmp eq i32 %1941, 0, !dbg !123
  %1942 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1940, float 0xBFAAC795C0000000) #5, !dbg !123
  %1943 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1940, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i291 = select i1 %.not1.i290, float %1943, float %1942, !dbg !123
  %1944 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i292 = icmp eq i32 %1944, 0, !dbg !123
  %1945 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i291, float %1940, float 0x3FC10B2820000000) #5, !dbg !123
  %1946 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i291, float %1940, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i293 = select i1 %.not2.i292, float %1946, float %1945, !dbg !123
  %1947 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i294 = icmp eq i32 %1947, 0, !dbg !123
  %1948 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i293, float %1940, float 0xBFD5553DA0000000) #5, !dbg !123
  %1949 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i293, float %1940, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i295 = select i1 %.not3.i294, float %1949, float %1948, !dbg !123
  %1950 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i296 = icmp eq i32 %1950, 0, !dbg !123
  %1951 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i295, float %1940, float 0.000000e+00) #5, !dbg !123
  %1952 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i295, float %1940, float 0.000000e+00) #5, !dbg !123
  %.04.i297 = select i1 %.not4.i296, float %1952, float %1951, !dbg !123
  %1953 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i298 = icmp eq i32 %1953, 0, !dbg !123
  %1954 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i297, float %1459, float %1459) #5, !dbg !123
  %1955 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i297, float %1459, float %1459) #5, !dbg !123
  %.02.i299 = select i1 %.not5.i298, float %1955, float %1954, !dbg !123
  br label %__nv_tanhf.exit300, !dbg !123

__nv_tanhf.exit300:                               ; preds = %__internal_fmad.exit1.i284, %__internal_fmad.exit3.i289
  %s.1.i288 = phi float [ %1939, %__internal_fmad.exit1.i284 ], [ %.02.i299, %__internal_fmad.exit3.i289 ], !dbg !123
  %1956 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not.i301 = icmp eq i32 %1956, 0, !dbg !123
  %1957 = tail call float @llvm.nvvm.fabs.ftz.f(float %1460) #5, !dbg !123
  %1958 = tail call float @llvm.nvvm.fabs.f(float %1460) #5, !dbg !123
  %.01.i302 = select i1 %.not.i301, float %1958, float %1957, !dbg !123
  %1959 = fcmp ult float %.01.i302, 0x3FE3333340000000, !dbg !123
  br i1 %1959, label %__internal_fmad.exit3.i308, label %__internal_fmad.exit1.i303, !dbg !123

__internal_fmad.exit1.i303:                       ; preds = %__nv_tanhf.exit300
  %1960 = fmul float %.01.i302, 0x4007154760000000, !dbg !123
  %1961 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1960) #5, !dbg !123
  %1962 = fadd float %1961, 1.000000e+00, !dbg !123
  %1963 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %1962) #6, !dbg !123, !srcloc !59
  %1964 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not6.i304 = icmp eq i32 %1964, 0, !dbg !123
  %1965 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1963, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %1966 = tail call float @llvm.nvvm.fma.rn.f(float %1963, float -2.000000e+00, float 1.000000e+00) #5, !dbg !123
  %.03.i305 = select i1 %.not6.i304, float %1966, float %1965, !dbg !123
  %1967 = fcmp oge float %.01.i302, 0x4022059680000000, !dbg !123
  %s.0.i306 = select i1 %1967, float 1.000000e+00, float %.03.i305, !dbg !123
  %1968 = bitcast float %s.0.i306 to i32, !dbg !123
  %1969 = bitcast float %1460 to i32, !dbg !123
  %1970 = and i32 %1969, -2147483648, !dbg !123
  %1971 = or i32 %1970, %1968, !dbg !123
  %1972 = bitcast i32 %1971 to float, !dbg !123
  br label %__nv_tanhf.exit319, !dbg !123

__internal_fmad.exit3.i308:                       ; preds = %__nv_tanhf.exit300
  %1973 = fmul float %1460, %1460, !dbg !123
  %1974 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not1.i309 = icmp eq i32 %1974, 0, !dbg !123
  %1975 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %1973, float 0xBFAAC795C0000000) #5, !dbg !123
  %1976 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %1973, float 0xBFAAC795C0000000) #5, !dbg !123
  %.06.i310 = select i1 %.not1.i309, float %1976, float %1975, !dbg !123
  %1977 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not2.i311 = icmp eq i32 %1977, 0, !dbg !123
  %1978 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i310, float %1973, float 0x3FC10B2820000000) #5, !dbg !123
  %1979 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i310, float %1973, float 0x3FC10B2820000000) #5, !dbg !123
  %.05.i312 = select i1 %.not2.i311, float %1979, float %1978, !dbg !123
  %1980 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not3.i313 = icmp eq i32 %1980, 0, !dbg !123
  %1981 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i312, float %1973, float 0xBFD5553DA0000000) #5, !dbg !123
  %1982 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i312, float %1973, float 0xBFD5553DA0000000) #5, !dbg !123
  %.0.i314 = select i1 %.not3.i313, float %1982, float %1981, !dbg !123
  %1983 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not4.i315 = icmp eq i32 %1983, 0, !dbg !123
  %1984 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i314, float %1973, float 0.000000e+00) #5, !dbg !123
  %1985 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i314, float %1973, float 0.000000e+00) #5, !dbg !123
  %.04.i316 = select i1 %.not4.i315, float %1985, float %1984, !dbg !123
  %1986 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !123
  %.not5.i317 = icmp eq i32 %1986, 0, !dbg !123
  %1987 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i316, float %1460, float %1460) #5, !dbg !123
  %1988 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i316, float %1460, float %1460) #5, !dbg !123
  %.02.i318 = select i1 %.not5.i317, float %1988, float %1987, !dbg !123
  br label %__nv_tanhf.exit319, !dbg !123

__nv_tanhf.exit319:                               ; preds = %__internal_fmad.exit1.i303, %__internal_fmad.exit3.i308
  %s.1.i307 = phi float [ %1972, %__internal_fmad.exit1.i303 ], [ %.02.i318, %__internal_fmad.exit3.i308 ], !dbg !123
  %1989 = fadd float %s.1.i, 1.000000e+00, !dbg !124
  %1990 = fadd float %s.1.i41, 1.000000e+00, !dbg !124
  %1991 = fadd float %s.1.i60, 1.000000e+00, !dbg !124
  %1992 = fadd float %s.1.i79, 1.000000e+00, !dbg !124
  %1993 = fadd float %s.1.i98, 1.000000e+00, !dbg !124
  %1994 = fadd float %s.1.i117, 1.000000e+00, !dbg !124
  %1995 = fadd float %s.1.i136, 1.000000e+00, !dbg !124
  %1996 = fadd float %s.1.i155, 1.000000e+00, !dbg !124
  %1997 = fadd float %s.1.i174, 1.000000e+00, !dbg !124
  %1998 = fadd float %s.1.i193, 1.000000e+00, !dbg !124
  %1999 = fadd float %s.1.i212, 1.000000e+00, !dbg !124
  %2000 = fadd float %s.1.i231, 1.000000e+00, !dbg !124
  %2001 = fadd float %s.1.i250, 1.000000e+00, !dbg !124
  %2002 = fadd float %s.1.i269, 1.000000e+00, !dbg !124
  %2003 = fadd float %s.1.i288, 1.000000e+00, !dbg !124
  %2004 = fadd float %s.1.i307, 1.000000e+00, !dbg !124
  %2005 = fmul float %1365, %1989, !dbg !125
  %2006 = fmul float %1366, %1990, !dbg !125
  %2007 = fmul float %1367, %1991, !dbg !125
  %2008 = fmul float %1368, %1992, !dbg !125
  %2009 = fmul float %1369, %1993, !dbg !125
  %2010 = fmul float %1370, %1994, !dbg !125
  %2011 = fmul float %1371, %1995, !dbg !125
  %2012 = fmul float %1372, %1996, !dbg !125
  %2013 = fmul float %1373, %1997, !dbg !125
  %2014 = fmul float %1374, %1998, !dbg !125
  %2015 = fmul float %1375, %1999, !dbg !125
  %2016 = fmul float %1376, %2000, !dbg !125
  %2017 = fmul float %1377, %2001, !dbg !125
  %2018 = fmul float %1378, %2002, !dbg !125
  %2019 = fmul float %1379, %2003, !dbg !125
  %2020 = fmul float %1380, %2004, !dbg !125
  %2021 = fmul float %1308, %2005, !dbg !126
  %2022 = fmul float %1308, %2006, !dbg !126
  %2023 = fmul float %1308, %2007, !dbg !126
  %2024 = fmul float %1308, %2008, !dbg !126
  %2025 = fmul float %1308, %2009, !dbg !126
  %2026 = fmul float %1308, %2010, !dbg !126
  %2027 = fmul float %1308, %2011, !dbg !126
  %2028 = fmul float %1308, %2012, !dbg !126
  %2029 = fmul float %1308, %2013, !dbg !126
  %2030 = fmul float %1308, %2014, !dbg !126
  %2031 = fmul float %1308, %2015, !dbg !126
  %2032 = fmul float %1308, %2016, !dbg !126
  %2033 = fmul float %1308, %2017, !dbg !126
  %2034 = fmul float %1308, %2018, !dbg !126
  %2035 = fmul float %1308, %2019, !dbg !126
  %2036 = fmul float %1308, %2020, !dbg !126
  %2037 = tail call float @llvm.nvvm.round.f(float %2021) #5, !dbg !127
  %2038 = tail call float @llvm.nvvm.round.f(float %2022) #5, !dbg !127
  %2039 = tail call float @llvm.nvvm.round.f(float %2023) #5, !dbg !127
  %2040 = tail call float @llvm.nvvm.round.f(float %2024) #5, !dbg !127
  %2041 = tail call float @llvm.nvvm.round.f(float %2025) #5, !dbg !127
  %2042 = tail call float @llvm.nvvm.round.f(float %2026) #5, !dbg !127
  %2043 = tail call float @llvm.nvvm.round.f(float %2027) #5, !dbg !127
  %2044 = tail call float @llvm.nvvm.round.f(float %2028) #5, !dbg !127
  %2045 = tail call float @llvm.nvvm.round.f(float %2029) #5, !dbg !127
  %2046 = tail call float @llvm.nvvm.round.f(float %2030) #5, !dbg !127
  %2047 = tail call float @llvm.nvvm.round.f(float %2031) #5, !dbg !127
  %2048 = tail call float @llvm.nvvm.round.f(float %2032) #5, !dbg !127
  %2049 = tail call float @llvm.nvvm.round.f(float %2033) #5, !dbg !127
  %2050 = tail call float @llvm.nvvm.round.f(float %2034) #5, !dbg !127
  %2051 = tail call float @llvm.nvvm.round.f(float %2035) #5, !dbg !127
  %2052 = tail call float @llvm.nvvm.round.f(float %2036) #5, !dbg !127
  %2053 = insertelement <4 x float> poison, float %2037, i64 0, !dbg !128
  %2054 = insertelement <4 x float> %2053, float %2038, i64 1, !dbg !128
  %2055 = insertelement <4 x float> %2054, float %2039, i64 2, !dbg !128
  %2056 = insertelement <4 x float> %2055, float %2040, i64 3, !dbg !128
  %2057 = fcmp ogt <4 x float> %2056, splat (float -1.270000e+02), !dbg !128
  %2058 = fcmp uno <4 x float> %2056, zeroinitializer, !dbg !130
  %2059 = or <4 x i1> %2057, %2058, !dbg !131
  %2060 = select <4 x i1> %2059, <4 x float> %2056, <4 x float> splat (float -1.270000e+02), !dbg !132
  %2061 = fcmp olt <4 x float> %2060, splat (float 1.270000e+02), !dbg !133
  %2062 = fcmp uno <4 x float> %2060, zeroinitializer, !dbg !135
  %2063 = or <4 x i1> %2061, %2062, !dbg !136
  %2064 = fptosi <4 x float> %2060 to <4 x i8>, !dbg !137
  %2065 = select <4 x i1> %2063, <4 x i8> %2064, <4 x i8> splat (i8 127), !dbg !138
  %2066 = insertelement <4 x float> poison, float %2041, i64 0, !dbg !128
  %2067 = insertelement <4 x float> %2066, float %2042, i64 1, !dbg !128
  %2068 = insertelement <4 x float> %2067, float %2043, i64 2, !dbg !128
  %2069 = insertelement <4 x float> %2068, float %2044, i64 3, !dbg !128
  %2070 = fcmp ogt <4 x float> %2069, splat (float -1.270000e+02), !dbg !128
  %2071 = fcmp uno <4 x float> %2069, zeroinitializer, !dbg !130
  %2072 = or <4 x i1> %2070, %2071, !dbg !131
  %2073 = select <4 x i1> %2072, <4 x float> %2069, <4 x float> splat (float -1.270000e+02), !dbg !132
  %2074 = fcmp olt <4 x float> %2073, splat (float 1.270000e+02), !dbg !133
  %2075 = fcmp uno <4 x float> %2073, zeroinitializer, !dbg !135
  %2076 = or <4 x i1> %2074, %2075, !dbg !136
  %2077 = fptosi <4 x float> %2073 to <4 x i8>, !dbg !137
  %2078 = select <4 x i1> %2076, <4 x i8> %2077, <4 x i8> splat (i8 127), !dbg !138
  %2079 = insertelement <4 x float> poison, float %2045, i64 0, !dbg !128
  %2080 = insertelement <4 x float> %2079, float %2046, i64 1, !dbg !128
  %2081 = insertelement <4 x float> %2080, float %2047, i64 2, !dbg !128
  %2082 = insertelement <4 x float> %2081, float %2048, i64 3, !dbg !128
  %2083 = fcmp ogt <4 x float> %2082, splat (float -1.270000e+02), !dbg !128
  %2084 = fcmp uno <4 x float> %2082, zeroinitializer, !dbg !130
  %2085 = or <4 x i1> %2083, %2084, !dbg !131
  %2086 = select <4 x i1> %2085, <4 x float> %2082, <4 x float> splat (float -1.270000e+02), !dbg !132
  %2087 = fcmp olt <4 x float> %2086, splat (float 1.270000e+02), !dbg !133
  %2088 = fcmp uno <4 x float> %2086, zeroinitializer, !dbg !135
  %2089 = or <4 x i1> %2087, %2088, !dbg !136
  %2090 = fptosi <4 x float> %2086 to <4 x i8>, !dbg !137
  %2091 = select <4 x i1> %2089, <4 x i8> %2090, <4 x i8> splat (i8 127), !dbg !138
  %2092 = insertelement <4 x float> poison, float %2049, i64 0, !dbg !128
  %2093 = insertelement <4 x float> %2092, float %2050, i64 1, !dbg !128
  %2094 = insertelement <4 x float> %2093, float %2051, i64 2, !dbg !128
  %2095 = insertelement <4 x float> %2094, float %2052, i64 3, !dbg !128
  %2096 = fcmp ogt <4 x float> %2095, splat (float -1.270000e+02), !dbg !128
  %2097 = fcmp uno <4 x float> %2095, zeroinitializer, !dbg !130
  %2098 = or <4 x i1> %2096, %2097, !dbg !131
  %2099 = select <4 x i1> %2098, <4 x float> %2095, <4 x float> splat (float -1.270000e+02), !dbg !132
  %2100 = fcmp olt <4 x float> %2099, splat (float 1.270000e+02), !dbg !133
  %2101 = fcmp uno <4 x float> %2099, zeroinitializer, !dbg !135
  %2102 = or <4 x i1> %2100, %2101, !dbg !136
  %2103 = fptosi <4 x float> %2099 to <4 x i8>, !dbg !137
  %2104 = select <4 x i1> %2102, <4 x i8> %2103, <4 x i8> splat (i8 127), !dbg !138
  %2105 = getelementptr i8, ptr addrspace(1) %8, i64 %1320, !dbg !139
  %2106 = bitcast <4 x i8> %2065 to i32, !dbg !140
  %2107 = bitcast <4 x i8> %2078 to i32, !dbg !140
  %2108 = bitcast <4 x i8> %2091 to i32, !dbg !140
  %2109 = bitcast <4 x i8> %2104 to i32, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %2106, i32 %2107, i32 %2108, i32 %2109, ptr addrspace(1) %2105, i1 %1328) #5, !dbg !140
  br i1 %1311, label %1310, label %2110, !dbg !110

2110:                                             ; preds = %__nv_tanhf.exit319
  ret void, !dbg !141
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxyjrahlth755bxxcexivgsgdoyxnb2wwthefvjadx2dkvt3x6m.py", directory: "/tmp/torchinductor_root/mx")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_gelu_mul_reciprocal_13", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 30, scope: !6)
!15 = !DILocation(line: 30, column: 35, scope: !6)
!16 = !DILocation(line: 39, column: 47, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 44, column: 44, scope: !6)
!21 = !DILocation(line: 45, column: 16, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 46, column: 44, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 47, column: 44, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 49, column: 23, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 52, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 33, column: 40, scope: !6)
!36 = !DILocation(line: 54, column: 23, scope: !6)
!37 = !DILocation(line: 34, column: 31, scope: !6)
!38 = !DILocation(line: 35, column: 29, scope: !6)
!39 = !DILocation(line: 39, column: 41, scope: !6)
!40 = !DILocation(line: 39, column: 34, scope: !6)
!41 = !DILocation(line: 39, column: 60, scope: !6)
!42 = !DILocation(line: 39, column: 52, scope: !6)
!43 = !DILocation(line: 40, column: 35, scope: !6)
!44 = !DILocation(line: 40, column: 42, scope: !6)
!45 = !DILocation(line: 41, column: 35, scope: !6)
!46 = !DILocation(line: 41, column: 42, scope: !6)
!47 = !DILocation(line: 40, column: 95, scope: !6)
!48 = !DILocation(line: 41, column: 95, scope: !6)
!49 = !DILocation(line: 42, column: 23, scope: !6)
!50 = !DILocation(line: 55, column: 24, scope: !6)
!51 = !DILocation(line: 56, column: 24, scope: !6)
!52 = !DILocation(line: 59, column: 24, scope: !6)
!53 = !DILocation(line: 64, column: 24, scope: !6)
!54 = !DILocation(line: 60, column: 24, scope: !6)
!55 = !DILocation(line: 61, column: 24, scope: !6)
!56 = !DILocation(line: 63, column: 24, scope: !6)
!57 = !DILocation(line: 66, column: 24, scope: !6)
!58 = !DILocation(line: 67, column: 31, scope: !6)
!59 = !{i32 21046}
!60 = !DILocation(line: 69, column: 24, scope: !6)
!61 = !DILocation(line: 70, column: 24, scope: !6)
!62 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !63)
!63 = !DILocation(line: 73, column: 47, scope: !6)
!64 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !65)
!65 = !DILocation(line: 75, column: 47, scope: !6)
!66 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !63)
!67 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !63)
!68 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !63)
!69 = !DILocation(line: 74, column: 50, scope: !6)
!70 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !65)
!71 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !65)
!72 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !65)
!73 = !DILocation(line: 76, column: 50, scope: !6)
!74 = !DILocation(line: 77, column: 29, scope: !6)
!75 = !DILocation(line: 77, column: 54, scope: !6)
!76 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !77)
!77 = !DILocation(line: 78, column: 40, scope: !6)
!78 = !DILocation(line: 94, column: 15, scope: !79, inlinedAt: !77)
!79 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!80 = !DILocation(line: 96, column: 21, scope: !79, inlinedAt: !77)
!81 = !DILocation(line: 96, column: 16, scope: !79, inlinedAt: !77)
!82 = !DILocation(line: 97, column: 29, scope: !79, inlinedAt: !77)
!83 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !84)
!84 = !DILocation(line: 79, column: 40, scope: !6)
!85 = !DILocation(line: 102, column: 15, scope: !79, inlinedAt: !84)
!86 = !DILocation(line: 104, column: 16, scope: !79, inlinedAt: !84)
!87 = !DILocation(line: 105, column: 29, scope: !79, inlinedAt: !84)
!88 = !DILocation(line: 104, column: 21, scope: !79, inlinedAt: !84)
!89 = !DILocation(line: 80, column: 25, scope: !6)
!90 = !DILocation(line: 80, column: 37, scope: !6)
!91 = !DILocation(line: 81, column: 25, scope: !6)
!92 = !DILocation(line: 81, column: 37, scope: !6)
!93 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !94)
!94 = !DILocation(line: 104, column: 46, scope: !6)
!95 = !DILocation(line: 105, column: 17, scope: !6)
!96 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !97)
!97 = !DILocation(line: 106, column: 46, scope: !6)
!98 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !99)
!99 = !DILocation(line: 107, column: 46, scope: !6)
!100 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !99)
!101 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !99)
!102 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !99)
!103 = !DILocation(line: 109, column: 24, scope: !6)
!104 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !105)
!105 = !DILocation(line: 112, column: 46, scope: !6)
!106 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !105)
!108 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !105)
!109 = !DILocation(line: 115, column: 25, scope: !6)
!110 = !DILocation(line: 82, column: 40, scope: !6)
!111 = !DILocation(line: 83, column: 31, scope: !6)
!112 = !DILocation(line: 84, column: 29, scope: !6)
!113 = !DILocation(line: 88, column: 43, scope: !6)
!114 = !DILocation(line: 88, column: 36, scope: !6)
!115 = !DILocation(line: 88, column: 62, scope: !6)
!116 = !DILocation(line: 88, column: 54, scope: !6)
!117 = !DILocation(line: 90, column: 24, scope: !6)
!118 = !DILocation(line: 91, column: 24, scope: !6)
!119 = !DILocation(line: 92, column: 24, scope: !6)
!120 = !DILocation(line: 94, column: 24, scope: !6)
!121 = !DILocation(line: 95, column: 24, scope: !6)
!122 = !DILocation(line: 97, column: 24, scope: !6)
!123 = !DILocation(line: 98, column: 31, scope: !6)
!124 = !DILocation(line: 100, column: 24, scope: !6)
!125 = !DILocation(line: 101, column: 24, scope: !6)
!126 = !DILocation(line: 117, column: 24, scope: !6)
!127 = !DILocation(line: 118, column: 36, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !129)
!129 = !DILocation(line: 121, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !129)
!133 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !134)
!134 = !DILocation(line: 123, column: 46, scope: !6)
!135 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !134)
!136 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !134)
!137 = !DILocation(line: 125, column: 25, scope: !6)
!138 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !134)
!139 = !DILocation(line: 126, column: 29, scope: !6)
!140 = !DILocation(line: 126, column: 54, scope: !6)
!141 = !DILocation(line: 82, column: 4, scope: !6)
