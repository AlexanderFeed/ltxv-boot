; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 3, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = lshr i32 %19, 6, !dbg !11
  %21 = and i32 %20, 7, !dbg !11
  %22 = and i32 %19, 31, !dbg !11
  %23 = or disjoint i32 %21, %18, !dbg !12
  %24 = icmp slt i32 %23, 512, !dbg !13
  %25 = icmp slt i32 %18, 512, !dbg !13
  %26 = shl i32 %19, 3, !dbg !14
  %27 = and i32 %26, 504, !dbg !14
  %28 = or disjoint i32 %27, 4, !dbg !14
  %29 = and i32 %19, 511, !dbg !14
  %30 = sext i32 %23 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %4, i64 %30, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %24) #5, !dbg !16
  %40 = bitcast i16 %39 to bfloat, !dbg !16
  %41 = getelementptr bfloat, ptr addrspace(1) %5, i64 %30, !dbg !17
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %44 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %24) #5, !dbg !18
  %50 = bitcast i16 %49 to bfloat, !dbg !18
  %51 = mul i32 %23, 3072, !dbg !19
  %.inv = fcmp oge bfloat %40, 0xR0000, !dbg !20
  %52 = select i1 %.inv, bfloat 0xR0000, bfloat %40, !dbg !20
  %53 = fpext bfloat %52 to float, !dbg !20
  %54 = fsub float 0.000000e+00, %53, !dbg !24
  %.inv4 = fcmp ole bfloat %50, 0xR0000, !dbg !25
  %55 = select i1 %.inv4, bfloat 0xR0000, bfloat %50, !dbg !25
  %56 = fpext bfloat %55 to float, !dbg !25
  %57 = fcmp ogt float %54, %56, !dbg !27
  %58 = fcmp uno float %54, 0.000000e+00, !dbg !29
  %59 = or i1 %58, %57, !dbg !30
  %60 = select i1 %59, float %54, float %56, !dbg !31
  %61 = fmul float %60, 0x3F80204080000000, !dbg !32
  %62 = fcmp ogt float %61, 0x3EE4F8B580000000, !dbg !33
  %63 = fcmp uno float %61, 0.000000e+00, !dbg !35
  %64 = or i1 %62, %63, !dbg !36
  %65 = select i1 %64, float %61, float 0x3EE4F8B580000000, !dbg !37
  %66 = or disjoint i32 %51, %27
  %67 = or disjoint i32 %51, %28
  %68 = shl i32 %19, 6
  %69 = and i32 %68, 4032
  %.reass117 = or disjoint i32 %69, %21
  %70 = and i32 %26, 4088
  %71 = lshr exact i32 %69, 3
  %72 = add nuw nsw i32 %.reass117, %71
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %72
  %74 = or disjoint i32 %.reass117, 8
  %75 = lshr i32 %74, 3
  %76 = add nuw nsw i32 %75, %74
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %76
  %78 = or disjoint i32 %.reass117, 16
  %79 = lshr i32 %78, 3
  %80 = add nuw nsw i32 %79, %78
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %80
  %82 = or disjoint i32 %.reass117, 24
  %83 = lshr i32 %82, 3
  %84 = add nuw nsw i32 %83, %82
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %84
  %86 = or disjoint i32 %.reass117, 32
  %87 = lshr i32 %86, 3
  %88 = add nuw nsw i32 %87, %86
  %89 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %88
  %90 = or disjoint i32 %.reass117, 40
  %91 = lshr i32 %90, 3
  %92 = add nuw nsw i32 %91, %90
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %92
  %94 = or disjoint i32 %.reass117, 48
  %95 = lshr i32 %94, 3
  %96 = add nuw nsw i32 %95, %94
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %96
  %98 = or disjoint i32 %.reass117, 56
  %99 = lshr i32 %98, 3
  %100 = add nuw nsw i32 %99, %98
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %100
  %102 = lshr exact i32 %70, 3
  %103 = add nuw nsw i32 %102, %70
  %104 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %103
  %105 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %72
  %106 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %76
  %107 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %80
  %108 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %84
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %88
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %92
  %111 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %96
  %112 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %100
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %103
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %29
  %115 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 1040
  %116 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 2080
  %117 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 3120
  %118 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 4160
  %119 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 5200
  %120 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 6240
  %121 = getelementptr inbounds nuw i8, ptr addrspace(3) %114, i32 7280
  %122 = lshr i32 %26, 6
  %123 = and i32 %122, 56
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %123
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %124, i32 %70
  %126 = zext nneg i32 %29 to i64, !dbg !38
  %127 = insertelement <8 x i1> poison, i1 %25, i64 0, !dbg !39
  %128 = shufflevector <8 x i1> %127, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !39
  %129 = getelementptr inbounds nuw i8, ptr addrspace(3) %125, i32 4
  %130 = getelementptr inbounds nuw i8, ptr addrspace(3) %125, i32 8
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) %125, i32 12
  br label %132, !dbg !38

132:                                              ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %133 = phi float [ 0.000000e+00, %16 ], [ %345, %._crit_edge ]
  %134 = phi float [ 0.000000e+00, %16 ], [ %346, %._crit_edge ]
  %135 = phi float [ 0.000000e+00, %16 ], [ %347, %._crit_edge ]
  %136 = phi float [ 0.000000e+00, %16 ], [ %348, %._crit_edge ]
  %137 = phi float [ 0.000000e+00, %16 ], [ %349, %._crit_edge ]
  %138 = phi float [ 0.000000e+00, %16 ], [ %350, %._crit_edge ]
  %139 = phi float [ 0.000000e+00, %16 ], [ %351, %._crit_edge ]
  %140 = phi float [ 0.000000e+00, %16 ], [ %352, %._crit_edge ]
  %141 = phi float [ 0.000000e+00, %16 ], [ %337, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %16 ], [ %338, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %16 ], [ %339, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %16 ], [ %340, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %16 ], [ %341, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %16 ], [ %342, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %16 ], [ %343, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %16 ], [ %344, %._crit_edge ]
  %149 = phi <8 x float> [ zeroinitializer, %16 ], [ %336, %._crit_edge ]
  %150 = or disjoint i64 %indvars.iv, %126, !dbg !40
  %151 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %152 = add i32 %66, %151, !dbg !41
  %153 = add i32 %67, %151, !dbg !41
  %154 = sext i32 %152 to i64, !dbg !42
  %155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !42
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %155, i1 %24) #5, !dbg !43
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !43
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !43
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !43
  %extelt.offset39 = lshr i32 %157, 16, !dbg !43
  %161 = trunc nuw i32 %extelt.offset39 to i16, !dbg !43
  %extelt.offset41 = lshr i32 %158, 16, !dbg !43
  %162 = trunc nuw i32 %extelt.offset41 to i16, !dbg !43
  %extelt.offset43 = lshr i32 %159, 16, !dbg !43
  %163 = trunc nuw i32 %extelt.offset43 to i16, !dbg !43
  %extelt.offset45 = lshr i32 %160, 16, !dbg !43
  %164 = trunc nuw i32 %extelt.offset45 to i16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %165 = trunc i32 %157 to i16, !dbg !44
  %166 = insertelement <1 x i16> poison, i16 %165, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %73, <1 x i16> %166, i1 true) #5, !dbg !44
  %167 = insertelement <1 x i16> poison, i16 %161, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %77, <1 x i16> %167, i1 true) #5, !dbg !44
  %168 = trunc i32 %158 to i16, !dbg !44
  %169 = insertelement <1 x i16> poison, i16 %168, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %81, <1 x i16> %169, i1 true) #5, !dbg !44
  %170 = insertelement <1 x i16> poison, i16 %162, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %85, <1 x i16> %170, i1 true) #5, !dbg !44
  %171 = trunc i32 %159 to i16, !dbg !44
  %172 = insertelement <1 x i16> poison, i16 %171, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %89, <1 x i16> %172, i1 true) #5, !dbg !44
  %173 = insertelement <1 x i16> poison, i16 %163, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %93, <1 x i16> %173, i1 true) #5, !dbg !44
  %174 = trunc i32 %160 to i16, !dbg !44
  %175 = insertelement <1 x i16> poison, i16 %174, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %97, <1 x i16> %175, i1 true) #5, !dbg !44
  %176 = insertelement <1 x i16> poison, i16 %164, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %101, <1 x i16> %176, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %177 = add nuw nsw i64 %150, 6144, !dbg !45
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !46
  %179 = getelementptr bfloat, ptr addrspace(1) %2, i64 %177, !dbg !47
  %180 = getelementptr i32, ptr addrspace(1) %3, i64 %154, !dbg !48
  %181 = sext i32 %153 to i64, !dbg !48
  %182 = getelementptr i32, ptr addrspace(1) %3, i64 %181, !dbg !48
  %183 = getelementptr bfloat, ptr addrspace(1) %6, i64 %150, !dbg !49
  %184 = getelementptr bfloat, ptr addrspace(1) %7, i64 %150, !dbg !50
  %185 = load <8 x bfloat>, ptr addrspace(3) %104, align 2, !dbg !44
  %186 = fpext <8 x bfloat> %185 to <8 x float>, !dbg !44
  %187 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %178, i1 true) #5, !dbg !51
  %188 = bitcast i32 %187 to float, !dbg !51
  %189 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %179, i1 true) #5, !dbg !52
  %190 = bitcast i16 %189 to bfloat, !dbg !52
  %191 = fpext bfloat %190 to float, !dbg !53
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %24) #5, !dbg !54
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !54
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !54
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !54
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !54
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %24) #5, !dbg !54
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !54
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !54
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !54
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !54
  %202 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %183, i1 true) #5, !dbg !55
  %203 = bitcast i16 %202 to bfloat, !dbg !55
  %204 = fpext bfloat %203 to float, !dbg !56
  %205 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %184, i1 true) #5, !dbg !57
  %206 = bitcast i16 %205 to bfloat, !dbg !57
  %207 = fpext bfloat %206 to float, !dbg !58
  %208 = fadd float %188, %191, !dbg !59
  %209 = sitofp i32 %193 to float, !dbg !60
  %210 = sitofp i32 %194 to float, !dbg !60
  %211 = sitofp i32 %195 to float, !dbg !60
  %212 = sitofp i32 %196 to float, !dbg !60
  %213 = sitofp i32 %198 to float, !dbg !60
  %214 = sitofp i32 %199 to float, !dbg !60
  %215 = sitofp i32 %200 to float, !dbg !60
  %216 = sitofp i32 %201 to float, !dbg !60
  %217 = fmul float %65, %209, !dbg !61
  %218 = fmul float %65, %210, !dbg !61
  %219 = fmul float %65, %211, !dbg !61
  %220 = fmul float %65, %212, !dbg !61
  %221 = fmul float %65, %213, !dbg !61
  %222 = fmul float %65, %214, !dbg !61
  %223 = fmul float %65, %215, !dbg !61
  %224 = fmul float %65, %216, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %225 = bitcast float %217 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %225, i1 true) #5, !dbg !61
  %226 = bitcast float %218 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %106, <1 x i32> %226, i1 true) #5, !dbg !61
  %227 = bitcast float %219 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %107, <1 x i32> %227, i1 true) #5, !dbg !61
  %228 = bitcast float %220 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %108, <1 x i32> %228, i1 true) #5, !dbg !61
  %229 = bitcast float %221 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %109, <1 x i32> %229, i1 true) #5, !dbg !61
  %230 = bitcast float %222 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %110, <1 x i32> %230, i1 true) #5, !dbg !61
  %231 = bitcast float %223 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %111, <1 x i32> %231, i1 true) #5, !dbg !61
  %232 = bitcast float %224 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull %112, <1 x i32> %232, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %233 = load <8 x float>, ptr addrspace(3) %113, align 4, !dbg !61
  %234 = insertelement <8 x float> poison, float %204, i64 0, !dbg !62
  %235 = shufflevector <8 x float> %234, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !62
  %236 = fmul <8 x float> %233, %235, !dbg !62
  %237 = insertelement <8 x float> poison, float %207, i64 0, !dbg !63
  %238 = shufflevector <8 x float> %237, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !63
  %239 = fadd <8 x float> %236, %238, !dbg !63
  %240 = insertelement <8 x float> poison, float %208, i64 0, !dbg !64
  %241 = shufflevector <8 x float> %240, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !64
  %242 = fmul <8 x float> %241, %239, !dbg !64
  %243 = fadd <8 x float> %242, %186, !dbg !65
  %244 = icmp eq i64 %indvars.iv, 0, !dbg !66
  br i1 %244, label %._crit_edge, label %245, !dbg !67

245:                                              ; preds = %132
  %246 = fsub <8 x float> %243, %149, !dbg !69
  %247 = extractelement <8 x float> %246, i64 0, !dbg !69
  %248 = fsub <8 x float> %243, %149, !dbg !69
  %249 = extractelement <8 x float> %248, i64 1, !dbg !69
  %250 = fsub <8 x float> %243, %149, !dbg !69
  %251 = extractelement <8 x float> %250, i64 2, !dbg !69
  %252 = fsub <8 x float> %243, %149, !dbg !69
  %253 = extractelement <8 x float> %252, i64 3, !dbg !69
  %254 = fsub <8 x float> %243, %149, !dbg !69
  %255 = extractelement <8 x float> %254, i64 4, !dbg !69
  %256 = fsub <8 x float> %243, %149, !dbg !69
  %257 = extractelement <8 x float> %256, i64 5, !dbg !69
  %258 = fsub <8 x float> %243, %149, !dbg !69
  %259 = extractelement <8 x float> %258, i64 6, !dbg !69
  %260 = fsub <8 x float> %243, %149, !dbg !69
  %261 = extractelement <8 x float> %260, i64 7, !dbg !69
  %262 = fadd float %133, 1.000000e+00, !dbg !70
  %263 = fadd float %134, 1.000000e+00, !dbg !70
  %264 = fadd float %135, 1.000000e+00, !dbg !70
  %265 = fadd float %136, 1.000000e+00, !dbg !70
  %266 = fadd float %137, 1.000000e+00, !dbg !70
  %267 = fadd float %138, 1.000000e+00, !dbg !70
  %268 = fadd float %139, 1.000000e+00, !dbg !70
  %269 = fadd float %140, 1.000000e+00, !dbg !70
  %270 = tail call float @llvm.nvvm.div.full(float %247, float %262), !dbg !71
  %271 = tail call float @llvm.nvvm.div.full(float %249, float %263), !dbg !71
  %272 = tail call float @llvm.nvvm.div.full(float %251, float %264), !dbg !71
  %273 = tail call float @llvm.nvvm.div.full(float %253, float %265), !dbg !71
  %274 = tail call float @llvm.nvvm.div.full(float %255, float %266), !dbg !71
  %275 = tail call float @llvm.nvvm.div.full(float %257, float %267), !dbg !71
  %276 = tail call float @llvm.nvvm.div.full(float %259, float %268), !dbg !71
  %277 = tail call float @llvm.nvvm.div.full(float %261, float %269), !dbg !71
  %278 = insertelement <8 x float> poison, float %270, i64 0, !dbg !72
  %279 = insertelement <8 x float> %278, float %271, i64 1, !dbg !72
  %280 = insertelement <8 x float> %279, float %272, i64 2, !dbg !72
  %281 = insertelement <8 x float> %280, float %273, i64 3, !dbg !72
  %282 = insertelement <8 x float> %281, float %274, i64 4, !dbg !72
  %283 = insertelement <8 x float> %282, float %275, i64 5, !dbg !72
  %284 = insertelement <8 x float> %283, float %276, i64 6, !dbg !72
  %285 = insertelement <8 x float> %284, float %277, i64 7, !dbg !72
  %286 = fadd <8 x float> %149, %285, !dbg !72
  %287 = fsub <8 x float> %243, %286, !dbg !73
  %288 = fsub <8 x float> %243, %286, !dbg !73
  %289 = fsub <8 x float> %243, %286, !dbg !73
  %290 = fsub <8 x float> %243, %286, !dbg !73
  %291 = fsub <8 x float> %243, %286, !dbg !73
  %292 = fsub <8 x float> %243, %286, !dbg !73
  %293 = fsub <8 x float> %243, %286, !dbg !73
  %294 = fsub <8 x float> %243, %286, !dbg !73
  %295 = fmul <8 x float> %246, %287, !dbg !74
  %296 = extractelement <8 x float> %295, i64 0, !dbg !74
  %297 = fmul <8 x float> %248, %288, !dbg !74
  %298 = extractelement <8 x float> %297, i64 1, !dbg !74
  %299 = fmul <8 x float> %250, %289, !dbg !74
  %300 = extractelement <8 x float> %299, i64 2, !dbg !74
  %301 = fmul <8 x float> %252, %290, !dbg !74
  %302 = extractelement <8 x float> %301, i64 3, !dbg !74
  %303 = fmul <8 x float> %254, %291, !dbg !74
  %304 = extractelement <8 x float> %303, i64 4, !dbg !74
  %305 = fmul <8 x float> %256, %292, !dbg !74
  %306 = extractelement <8 x float> %305, i64 5, !dbg !74
  %307 = fmul <8 x float> %258, %293, !dbg !74
  %308 = extractelement <8 x float> %307, i64 6, !dbg !74
  %309 = fmul <8 x float> %260, %294, !dbg !74
  %310 = extractelement <8 x float> %309, i64 7, !dbg !74
  %311 = fadd float %141, %296, !dbg !75
  %312 = fadd float %142, %298, !dbg !75
  %313 = fadd float %143, %300, !dbg !75
  %314 = fadd float %144, %302, !dbg !75
  %315 = fadd float %145, %304, !dbg !75
  %316 = fadd float %146, %306, !dbg !75
  %317 = fadd float %147, %308, !dbg !75
  %318 = fadd float %148, %310, !dbg !75
  br label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %132, %245
  %319 = phi float [ %311, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %320 = phi float [ %312, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %321 = phi float [ %313, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %322 = phi float [ %314, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %323 = phi float [ %315, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %324 = phi float [ %316, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %325 = phi float [ %317, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %326 = phi float [ %318, %245 ], [ 0.000000e+00, %132 ], !dbg !68
  %327 = phi float [ %262, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %328 = phi float [ %263, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %329 = phi float [ %264, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %330 = phi float [ %265, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %331 = phi float [ %266, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %332 = phi float [ %267, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %333 = phi float [ %268, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %334 = phi float [ %269, %245 ], [ 1.000000e+00, %132 ], !dbg !68
  %335 = phi <8 x float> [ %286, %245 ], [ %243, %132 ]
  %336 = select <8 x i1> %128, <8 x float> %335, <8 x float> %149, !dbg !39
  %337 = select i1 %25, float %319, float %141, !dbg !76
  %338 = select i1 %25, float %320, float %142, !dbg !76
  %339 = select i1 %25, float %321, float %143, !dbg !76
  %340 = select i1 %25, float %322, float %144, !dbg !76
  %341 = select i1 %25, float %323, float %145, !dbg !76
  %342 = select i1 %25, float %324, float %146, !dbg !76
  %343 = select i1 %25, float %325, float %147, !dbg !76
  %344 = select i1 %25, float %326, float %148, !dbg !76
  %345 = select i1 %25, float %327, float %133, !dbg !77
  %346 = select i1 %25, float %328, float %134, !dbg !77
  %347 = select i1 %25, float %329, float %135, !dbg !77
  %348 = select i1 %25, float %330, float %136, !dbg !77
  %349 = select i1 %25, float %331, float %137, !dbg !77
  %350 = select i1 %25, float %332, float %138, !dbg !77
  %351 = select i1 %25, float %333, float %139, !dbg !77
  %352 = select i1 %25, float %334, float %140, !dbg !77
  %353 = getelementptr bfloat, ptr addrspace(1) %8, i64 %154, !dbg !78
  %354 = extractelement <8 x float> %243, i64 0, !dbg !79
  %355 = fptrunc float %354 to bfloat, !dbg !79
  %356 = extractelement <8 x float> %243, i64 1, !dbg !79
  %357 = fptrunc float %356 to bfloat, !dbg !79
  %358 = extractelement <8 x float> %243, i64 2, !dbg !79
  %359 = fptrunc float %358 to bfloat, !dbg !79
  %360 = extractelement <8 x float> %243, i64 3, !dbg !79
  %361 = fptrunc float %360 to bfloat, !dbg !79
  %362 = extractelement <8 x float> %243, i64 4, !dbg !79
  %363 = fptrunc float %362 to bfloat, !dbg !79
  %364 = extractelement <8 x float> %243, i64 5, !dbg !79
  %365 = fptrunc float %364 to bfloat, !dbg !79
  %366 = extractelement <8 x float> %243, i64 6, !dbg !79
  %367 = fptrunc float %366 to bfloat, !dbg !79
  %368 = extractelement <8 x float> %243, i64 7, !dbg !79
  %369 = fptrunc float %368 to bfloat, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %370 = bitcast bfloat %355 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %114, <1 x i16> %370, i1 true) #5, !dbg !79
  %371 = bitcast bfloat %357 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %115, <1 x i16> %371, i1 true) #5, !dbg !79
  %372 = bitcast bfloat %359 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %116, <1 x i16> %372, i1 true) #5, !dbg !79
  %373 = bitcast bfloat %361 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %117, <1 x i16> %373, i1 true) #5, !dbg !79
  %374 = bitcast bfloat %363 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %118, <1 x i16> %374, i1 true) #5, !dbg !79
  %375 = bitcast bfloat %365 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %119, <1 x i16> %375, i1 true) #5, !dbg !79
  %376 = bitcast bfloat %367 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %120, <1 x i16> %376, i1 true) #5, !dbg !79
  %377 = bitcast bfloat %369 to <1 x i16>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %121, <1 x i16> %377, i1 true) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %.extract105 = load i32, ptr addrspace(3) %125, align 16, !dbg !79
  %.extract107 = load i32, ptr addrspace(3) %129, align 4, !dbg !79
  %.extract109 = load i32, ptr addrspace(3) %130, align 8, !dbg !79
  %.extract111 = load i32, ptr addrspace(3) %131, align 4, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract105, i32 %.extract107, i32 %.extract109, i32 %.extract111, ptr addrspace(1) %353, i1 %24) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !38
  %378 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !38
  br i1 %378, label %132, label %379, !dbg !38

379:                                              ; preds = %._crit_edge
  %380 = lshr i32 %19, 5, !dbg !11
  %381 = and i32 %19, 7, !dbg !11
  %382 = or disjoint i32 %18, %381, !dbg !12
  %383 = icmp slt i32 %382, 512, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %384 = extractelement <8 x float> %336, i64 0, !dbg !80
  %385 = bitcast float %384 to i32, !dbg !80
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 16, i32 31), !dbg !80
  %387 = bitcast i32 %386 to float, !dbg !80
  %388 = bitcast float %337 to i32, !dbg !80
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 16, i32 31), !dbg !80
  %390 = bitcast i32 %389 to float, !dbg !80
  %391 = bitcast float %345 to i32, !dbg !80
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 16, i32 31), !dbg !80
  %393 = bitcast i32 %392 to float, !dbg !80
  %394 = fsub float %387, %384, !dbg !82
  %395 = fadd float %345, %393, !dbg !84
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !85
  %397 = tail call float @llvm.nvvm.div.full(float %393, float %395), !dbg !86
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !87
  %399 = fmul float %394, %398, !dbg !88
  %400 = fadd float %384, %399, !dbg !89
  %401 = fadd float %337, %390, !dbg !90
  %402 = fmul float %394, %394, !dbg !91
  %403 = fmul float %345, %402, !dbg !92
  %404 = fmul float %403, %398, !dbg !93
  %405 = fadd float %401, %404, !dbg !94
  %406 = bitcast float %400 to i32, !dbg !80
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 8, i32 31), !dbg !80
  %408 = bitcast i32 %407 to float, !dbg !80
  %409 = bitcast float %405 to i32, !dbg !80
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 8, i32 31), !dbg !80
  %411 = bitcast i32 %410 to float, !dbg !80
  %412 = bitcast float %395 to i32, !dbg !80
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 8, i32 31), !dbg !80
  %414 = bitcast i32 %413 to float, !dbg !80
  %415 = fsub float %408, %400, !dbg !82
  %416 = fadd float %395, %414, !dbg !84
  %417 = fcmp oeq float %416, 0.000000e+00, !dbg !85
  %418 = tail call float @llvm.nvvm.div.full(float %414, float %416), !dbg !86
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !87
  %420 = fmul float %415, %419, !dbg !88
  %421 = fadd float %400, %420, !dbg !89
  %422 = fadd float %405, %411, !dbg !90
  %423 = fmul float %415, %415, !dbg !91
  %424 = fmul float %395, %423, !dbg !92
  %425 = fmul float %419, %424, !dbg !93
  %426 = fadd float %422, %425, !dbg !94
  %427 = bitcast float %421 to i32, !dbg !80
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 4, i32 31), !dbg !80
  %429 = bitcast i32 %428 to float, !dbg !80
  %430 = bitcast float %426 to i32, !dbg !80
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 4, i32 31), !dbg !80
  %432 = bitcast i32 %431 to float, !dbg !80
  %433 = bitcast float %416 to i32, !dbg !80
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 4, i32 31), !dbg !80
  %435 = bitcast i32 %434 to float, !dbg !80
  %436 = fsub float %429, %421, !dbg !82
  %437 = fadd float %416, %435, !dbg !84
  %438 = fcmp oeq float %437, 0.000000e+00, !dbg !85
  %439 = tail call float @llvm.nvvm.div.full(float %435, float %437), !dbg !86
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !87
  %441 = fmul float %436, %440, !dbg !88
  %442 = fadd float %421, %441, !dbg !89
  %443 = fadd float %426, %432, !dbg !90
  %444 = fmul float %436, %436, !dbg !91
  %445 = fmul float %416, %444, !dbg !92
  %446 = fmul float %440, %445, !dbg !93
  %447 = fadd float %443, %446, !dbg !94
  %448 = bitcast float %442 to i32, !dbg !80
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !80
  %450 = bitcast i32 %449 to float, !dbg !80
  %451 = bitcast float %447 to i32, !dbg !80
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 2, i32 31), !dbg !80
  %453 = bitcast i32 %452 to float, !dbg !80
  %454 = bitcast float %437 to i32, !dbg !80
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 2, i32 31), !dbg !80
  %456 = bitcast i32 %455 to float, !dbg !80
  %457 = fsub float %450, %442, !dbg !82
  %458 = fadd float %437, %456, !dbg !84
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !85
  %460 = tail call float @llvm.nvvm.div.full(float %456, float %458), !dbg !86
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !87
  %462 = fmul float %457, %461, !dbg !88
  %463 = fadd float %442, %462, !dbg !89
  %464 = fadd float %447, %453, !dbg !90
  %465 = fmul float %457, %457, !dbg !91
  %466 = fmul float %437, %465, !dbg !92
  %467 = fmul float %461, %466, !dbg !93
  %468 = fadd float %464, %467, !dbg !94
  %469 = bitcast float %463 to i32, !dbg !80
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !80
  %471 = bitcast i32 %470 to float, !dbg !80
  %472 = bitcast float %468 to i32, !dbg !80
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 1, i32 31), !dbg !80
  %474 = bitcast i32 %473 to float, !dbg !80
  %475 = bitcast float %458 to i32, !dbg !80
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 1, i32 31), !dbg !80
  %477 = bitcast i32 %476 to float, !dbg !80
  %478 = fsub float %471, %463, !dbg !82
  %479 = fadd float %458, %477, !dbg !84
  %480 = fcmp oeq float %479, 0.000000e+00, !dbg !85
  %481 = tail call float @llvm.nvvm.div.full(float %477, float %479), !dbg !86
  %482 = select i1 %480, float 0.000000e+00, float %481, !dbg !87
  %483 = fmul float %478, %482, !dbg !88
  %484 = fadd float %463, %483, !dbg !89
  %485 = fadd float %468, %474, !dbg !90
  %486 = fmul float %478, %478, !dbg !91
  %487 = fmul float %458, %486, !dbg !92
  %488 = fmul float %482, %487, !dbg !93
  %489 = fadd float %485, %488, !dbg !94
  %490 = extractelement <8 x float> %336, i64 1, !dbg !80
  %491 = bitcast float %490 to i32, !dbg !80
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 16, i32 31), !dbg !80
  %493 = bitcast i32 %492 to float, !dbg !80
  %494 = bitcast float %338 to i32, !dbg !80
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 16, i32 31), !dbg !80
  %496 = bitcast i32 %495 to float, !dbg !80
  %497 = bitcast float %346 to i32, !dbg !80
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 16, i32 31), !dbg !80
  %499 = bitcast i32 %498 to float, !dbg !80
  %500 = fsub float %493, %490, !dbg !82
  %501 = fadd float %346, %499, !dbg !84
  %502 = fcmp oeq float %501, 0.000000e+00, !dbg !85
  %503 = tail call float @llvm.nvvm.div.full(float %499, float %501), !dbg !86
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !87
  %505 = fmul float %500, %504, !dbg !88
  %506 = fadd float %490, %505, !dbg !89
  %507 = fadd float %338, %496, !dbg !90
  %508 = fmul float %500, %500, !dbg !91
  %509 = fmul float %346, %508, !dbg !92
  %510 = fmul float %509, %504, !dbg !93
  %511 = fadd float %507, %510, !dbg !94
  %512 = bitcast float %506 to i32, !dbg !80
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 8, i32 31), !dbg !80
  %514 = bitcast i32 %513 to float, !dbg !80
  %515 = bitcast float %511 to i32, !dbg !80
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 8, i32 31), !dbg !80
  %517 = bitcast i32 %516 to float, !dbg !80
  %518 = bitcast float %501 to i32, !dbg !80
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 8, i32 31), !dbg !80
  %520 = bitcast i32 %519 to float, !dbg !80
  %521 = fsub float %514, %506, !dbg !82
  %522 = fadd float %501, %520, !dbg !84
  %523 = fcmp oeq float %522, 0.000000e+00, !dbg !85
  %524 = tail call float @llvm.nvvm.div.full(float %520, float %522), !dbg !86
  %525 = select i1 %523, float 0.000000e+00, float %524, !dbg !87
  %526 = fmul float %521, %525, !dbg !88
  %527 = fadd float %506, %526, !dbg !89
  %528 = fadd float %511, %517, !dbg !90
  %529 = fmul float %521, %521, !dbg !91
  %530 = fmul float %501, %529, !dbg !92
  %531 = fmul float %525, %530, !dbg !93
  %532 = fadd float %528, %531, !dbg !94
  %533 = bitcast float %527 to i32, !dbg !80
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 4, i32 31), !dbg !80
  %535 = bitcast i32 %534 to float, !dbg !80
  %536 = bitcast float %532 to i32, !dbg !80
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 4, i32 31), !dbg !80
  %538 = bitcast i32 %537 to float, !dbg !80
  %539 = bitcast float %522 to i32, !dbg !80
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 4, i32 31), !dbg !80
  %541 = bitcast i32 %540 to float, !dbg !80
  %542 = fsub float %535, %527, !dbg !82
  %543 = fadd float %522, %541, !dbg !84
  %544 = fcmp oeq float %543, 0.000000e+00, !dbg !85
  %545 = tail call float @llvm.nvvm.div.full(float %541, float %543), !dbg !86
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !87
  %547 = fmul float %542, %546, !dbg !88
  %548 = fadd float %527, %547, !dbg !89
  %549 = fadd float %532, %538, !dbg !90
  %550 = fmul float %542, %542, !dbg !91
  %551 = fmul float %522, %550, !dbg !92
  %552 = fmul float %546, %551, !dbg !93
  %553 = fadd float %549, %552, !dbg !94
  %554 = bitcast float %548 to i32, !dbg !80
  %555 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %554, i32 2, i32 31), !dbg !80
  %556 = bitcast i32 %555 to float, !dbg !80
  %557 = bitcast float %553 to i32, !dbg !80
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 2, i32 31), !dbg !80
  %559 = bitcast i32 %558 to float, !dbg !80
  %560 = bitcast float %543 to i32, !dbg !80
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 2, i32 31), !dbg !80
  %562 = bitcast i32 %561 to float, !dbg !80
  %563 = fsub float %556, %548, !dbg !82
  %564 = fadd float %543, %562, !dbg !84
  %565 = fcmp oeq float %564, 0.000000e+00, !dbg !85
  %566 = tail call float @llvm.nvvm.div.full(float %562, float %564), !dbg !86
  %567 = select i1 %565, float 0.000000e+00, float %566, !dbg !87
  %568 = fmul float %563, %567, !dbg !88
  %569 = fadd float %548, %568, !dbg !89
  %570 = fadd float %553, %559, !dbg !90
  %571 = fmul float %563, %563, !dbg !91
  %572 = fmul float %543, %571, !dbg !92
  %573 = fmul float %567, %572, !dbg !93
  %574 = fadd float %570, %573, !dbg !94
  %575 = bitcast float %569 to i32, !dbg !80
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 1, i32 31), !dbg !80
  %577 = bitcast i32 %576 to float, !dbg !80
  %578 = bitcast float %574 to i32, !dbg !80
  %579 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %578, i32 1, i32 31), !dbg !80
  %580 = bitcast i32 %579 to float, !dbg !80
  %581 = bitcast float %564 to i32, !dbg !80
  %582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 1, i32 31), !dbg !80
  %583 = bitcast i32 %582 to float, !dbg !80
  %584 = fsub float %577, %569, !dbg !82
  %585 = fadd float %564, %583, !dbg !84
  %586 = fcmp oeq float %585, 0.000000e+00, !dbg !85
  %587 = tail call float @llvm.nvvm.div.full(float %583, float %585), !dbg !86
  %588 = select i1 %586, float 0.000000e+00, float %587, !dbg !87
  %589 = fmul float %584, %588, !dbg !88
  %590 = fadd float %569, %589, !dbg !89
  %591 = fadd float %574, %580, !dbg !90
  %592 = fmul float %584, %584, !dbg !91
  %593 = fmul float %564, %592, !dbg !92
  %594 = fmul float %588, %593, !dbg !93
  %595 = fadd float %591, %594, !dbg !94
  %596 = extractelement <8 x float> %336, i64 2, !dbg !80
  %597 = bitcast float %596 to i32, !dbg !80
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 16, i32 31), !dbg !80
  %599 = bitcast i32 %598 to float, !dbg !80
  %600 = bitcast float %339 to i32, !dbg !80
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 16, i32 31), !dbg !80
  %602 = bitcast i32 %601 to float, !dbg !80
  %603 = bitcast float %347 to i32, !dbg !80
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 16, i32 31), !dbg !80
  %605 = bitcast i32 %604 to float, !dbg !80
  %606 = fsub float %599, %596, !dbg !82
  %607 = fadd float %347, %605, !dbg !84
  %608 = fcmp oeq float %607, 0.000000e+00, !dbg !85
  %609 = tail call float @llvm.nvvm.div.full(float %605, float %607), !dbg !86
  %610 = select i1 %608, float 0.000000e+00, float %609, !dbg !87
  %611 = fmul float %606, %610, !dbg !88
  %612 = fadd float %596, %611, !dbg !89
  %613 = fadd float %339, %602, !dbg !90
  %614 = fmul float %606, %606, !dbg !91
  %615 = fmul float %347, %614, !dbg !92
  %616 = fmul float %615, %610, !dbg !93
  %617 = fadd float %613, %616, !dbg !94
  %618 = bitcast float %612 to i32, !dbg !80
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 8, i32 31), !dbg !80
  %620 = bitcast i32 %619 to float, !dbg !80
  %621 = bitcast float %617 to i32, !dbg !80
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 8, i32 31), !dbg !80
  %623 = bitcast i32 %622 to float, !dbg !80
  %624 = bitcast float %607 to i32, !dbg !80
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 8, i32 31), !dbg !80
  %626 = bitcast i32 %625 to float, !dbg !80
  %627 = fsub float %620, %612, !dbg !82
  %628 = fadd float %607, %626, !dbg !84
  %629 = fcmp oeq float %628, 0.000000e+00, !dbg !85
  %630 = tail call float @llvm.nvvm.div.full(float %626, float %628), !dbg !86
  %631 = select i1 %629, float 0.000000e+00, float %630, !dbg !87
  %632 = fmul float %627, %631, !dbg !88
  %633 = fadd float %612, %632, !dbg !89
  %634 = fadd float %617, %623, !dbg !90
  %635 = fmul float %627, %627, !dbg !91
  %636 = fmul float %607, %635, !dbg !92
  %637 = fmul float %631, %636, !dbg !93
  %638 = fadd float %634, %637, !dbg !94
  %639 = bitcast float %633 to i32, !dbg !80
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 4, i32 31), !dbg !80
  %641 = bitcast i32 %640 to float, !dbg !80
  %642 = bitcast float %638 to i32, !dbg !80
  %643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 4, i32 31), !dbg !80
  %644 = bitcast i32 %643 to float, !dbg !80
  %645 = bitcast float %628 to i32, !dbg !80
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 4, i32 31), !dbg !80
  %647 = bitcast i32 %646 to float, !dbg !80
  %648 = fsub float %641, %633, !dbg !82
  %649 = fadd float %628, %647, !dbg !84
  %650 = fcmp oeq float %649, 0.000000e+00, !dbg !85
  %651 = tail call float @llvm.nvvm.div.full(float %647, float %649), !dbg !86
  %652 = select i1 %650, float 0.000000e+00, float %651, !dbg !87
  %653 = fmul float %648, %652, !dbg !88
  %654 = fadd float %633, %653, !dbg !89
  %655 = fadd float %638, %644, !dbg !90
  %656 = fmul float %648, %648, !dbg !91
  %657 = fmul float %628, %656, !dbg !92
  %658 = fmul float %652, %657, !dbg !93
  %659 = fadd float %655, %658, !dbg !94
  %660 = bitcast float %654 to i32, !dbg !80
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 2, i32 31), !dbg !80
  %662 = bitcast i32 %661 to float, !dbg !80
  %663 = bitcast float %659 to i32, !dbg !80
  %664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %663, i32 2, i32 31), !dbg !80
  %665 = bitcast i32 %664 to float, !dbg !80
  %666 = bitcast float %649 to i32, !dbg !80
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 2, i32 31), !dbg !80
  %668 = bitcast i32 %667 to float, !dbg !80
  %669 = fsub float %662, %654, !dbg !82
  %670 = fadd float %649, %668, !dbg !84
  %671 = fcmp oeq float %670, 0.000000e+00, !dbg !85
  %672 = tail call float @llvm.nvvm.div.full(float %668, float %670), !dbg !86
  %673 = select i1 %671, float 0.000000e+00, float %672, !dbg !87
  %674 = fmul float %669, %673, !dbg !88
  %675 = fadd float %654, %674, !dbg !89
  %676 = fadd float %659, %665, !dbg !90
  %677 = fmul float %669, %669, !dbg !91
  %678 = fmul float %649, %677, !dbg !92
  %679 = fmul float %673, %678, !dbg !93
  %680 = fadd float %676, %679, !dbg !94
  %681 = bitcast float %675 to i32, !dbg !80
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 1, i32 31), !dbg !80
  %683 = bitcast i32 %682 to float, !dbg !80
  %684 = bitcast float %680 to i32, !dbg !80
  %685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 1, i32 31), !dbg !80
  %686 = bitcast i32 %685 to float, !dbg !80
  %687 = bitcast float %670 to i32, !dbg !80
  %688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 1, i32 31), !dbg !80
  %689 = bitcast i32 %688 to float, !dbg !80
  %690 = fsub float %683, %675, !dbg !82
  %691 = fadd float %670, %689, !dbg !84
  %692 = fcmp oeq float %691, 0.000000e+00, !dbg !85
  %693 = tail call float @llvm.nvvm.div.full(float %689, float %691), !dbg !86
  %694 = select i1 %692, float 0.000000e+00, float %693, !dbg !87
  %695 = fmul float %690, %694, !dbg !88
  %696 = fadd float %675, %695, !dbg !89
  %697 = fadd float %680, %686, !dbg !90
  %698 = fmul float %690, %690, !dbg !91
  %699 = fmul float %670, %698, !dbg !92
  %700 = fmul float %694, %699, !dbg !93
  %701 = fadd float %697, %700, !dbg !94
  %702 = extractelement <8 x float> %336, i64 3, !dbg !80
  %703 = bitcast float %702 to i32, !dbg !80
  %704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %703, i32 16, i32 31), !dbg !80
  %705 = bitcast i32 %704 to float, !dbg !80
  %706 = bitcast float %340 to i32, !dbg !80
  %707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %706, i32 16, i32 31), !dbg !80
  %708 = bitcast i32 %707 to float, !dbg !80
  %709 = bitcast float %348 to i32, !dbg !80
  %710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 16, i32 31), !dbg !80
  %711 = bitcast i32 %710 to float, !dbg !80
  %712 = fsub float %705, %702, !dbg !82
  %713 = fadd float %348, %711, !dbg !84
  %714 = fcmp oeq float %713, 0.000000e+00, !dbg !85
  %715 = tail call float @llvm.nvvm.div.full(float %711, float %713), !dbg !86
  %716 = select i1 %714, float 0.000000e+00, float %715, !dbg !87
  %717 = fmul float %712, %716, !dbg !88
  %718 = fadd float %702, %717, !dbg !89
  %719 = fadd float %340, %708, !dbg !90
  %720 = fmul float %712, %712, !dbg !91
  %721 = fmul float %348, %720, !dbg !92
  %722 = fmul float %721, %716, !dbg !93
  %723 = fadd float %719, %722, !dbg !94
  %724 = bitcast float %718 to i32, !dbg !80
  %725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %724, i32 8, i32 31), !dbg !80
  %726 = bitcast i32 %725 to float, !dbg !80
  %727 = bitcast float %723 to i32, !dbg !80
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %727, i32 8, i32 31), !dbg !80
  %729 = bitcast i32 %728 to float, !dbg !80
  %730 = bitcast float %713 to i32, !dbg !80
  %731 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %730, i32 8, i32 31), !dbg !80
  %732 = bitcast i32 %731 to float, !dbg !80
  %733 = fsub float %726, %718, !dbg !82
  %734 = fadd float %713, %732, !dbg !84
  %735 = fcmp oeq float %734, 0.000000e+00, !dbg !85
  %736 = tail call float @llvm.nvvm.div.full(float %732, float %734), !dbg !86
  %737 = select i1 %735, float 0.000000e+00, float %736, !dbg !87
  %738 = fmul float %733, %737, !dbg !88
  %739 = fadd float %718, %738, !dbg !89
  %740 = fadd float %723, %729, !dbg !90
  %741 = fmul float %733, %733, !dbg !91
  %742 = fmul float %713, %741, !dbg !92
  %743 = fmul float %737, %742, !dbg !93
  %744 = fadd float %740, %743, !dbg !94
  %745 = bitcast float %739 to i32, !dbg !80
  %746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %745, i32 4, i32 31), !dbg !80
  %747 = bitcast i32 %746 to float, !dbg !80
  %748 = bitcast float %744 to i32, !dbg !80
  %749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %748, i32 4, i32 31), !dbg !80
  %750 = bitcast i32 %749 to float, !dbg !80
  %751 = bitcast float %734 to i32, !dbg !80
  %752 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %751, i32 4, i32 31), !dbg !80
  %753 = bitcast i32 %752 to float, !dbg !80
  %754 = fsub float %747, %739, !dbg !82
  %755 = fadd float %734, %753, !dbg !84
  %756 = fcmp oeq float %755, 0.000000e+00, !dbg !85
  %757 = tail call float @llvm.nvvm.div.full(float %753, float %755), !dbg !86
  %758 = select i1 %756, float 0.000000e+00, float %757, !dbg !87
  %759 = fmul float %754, %758, !dbg !88
  %760 = fadd float %739, %759, !dbg !89
  %761 = fadd float %744, %750, !dbg !90
  %762 = fmul float %754, %754, !dbg !91
  %763 = fmul float %734, %762, !dbg !92
  %764 = fmul float %758, %763, !dbg !93
  %765 = fadd float %761, %764, !dbg !94
  %766 = bitcast float %760 to i32, !dbg !80
  %767 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %766, i32 2, i32 31), !dbg !80
  %768 = bitcast i32 %767 to float, !dbg !80
  %769 = bitcast float %765 to i32, !dbg !80
  %770 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %769, i32 2, i32 31), !dbg !80
  %771 = bitcast i32 %770 to float, !dbg !80
  %772 = bitcast float %755 to i32, !dbg !80
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 2, i32 31), !dbg !80
  %774 = bitcast i32 %773 to float, !dbg !80
  %775 = fsub float %768, %760, !dbg !82
  %776 = fadd float %755, %774, !dbg !84
  %777 = fcmp oeq float %776, 0.000000e+00, !dbg !85
  %778 = tail call float @llvm.nvvm.div.full(float %774, float %776), !dbg !86
  %779 = select i1 %777, float 0.000000e+00, float %778, !dbg !87
  %780 = fmul float %775, %779, !dbg !88
  %781 = fadd float %760, %780, !dbg !89
  %782 = fadd float %765, %771, !dbg !90
  %783 = fmul float %775, %775, !dbg !91
  %784 = fmul float %755, %783, !dbg !92
  %785 = fmul float %779, %784, !dbg !93
  %786 = fadd float %782, %785, !dbg !94
  %787 = bitcast float %781 to i32, !dbg !80
  %788 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %787, i32 1, i32 31), !dbg !80
  %789 = bitcast i32 %788 to float, !dbg !80
  %790 = bitcast float %786 to i32, !dbg !80
  %791 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %790, i32 1, i32 31), !dbg !80
  %792 = bitcast i32 %791 to float, !dbg !80
  %793 = bitcast float %776 to i32, !dbg !80
  %794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %793, i32 1, i32 31), !dbg !80
  %795 = bitcast i32 %794 to float, !dbg !80
  %796 = fsub float %789, %781, !dbg !82
  %797 = fadd float %776, %795, !dbg !84
  %798 = fcmp oeq float %797, 0.000000e+00, !dbg !85
  %799 = tail call float @llvm.nvvm.div.full(float %795, float %797), !dbg !86
  %800 = select i1 %798, float 0.000000e+00, float %799, !dbg !87
  %801 = fmul float %796, %800, !dbg !88
  %802 = fadd float %781, %801, !dbg !89
  %803 = fadd float %786, %792, !dbg !90
  %804 = fmul float %796, %796, !dbg !91
  %805 = fmul float %776, %804, !dbg !92
  %806 = fmul float %800, %805, !dbg !93
  %807 = fadd float %803, %806, !dbg !94
  %808 = extractelement <8 x float> %336, i64 4, !dbg !80
  %809 = bitcast float %808 to i32, !dbg !80
  %810 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %809, i32 16, i32 31), !dbg !80
  %811 = bitcast i32 %810 to float, !dbg !80
  %812 = bitcast float %341 to i32, !dbg !80
  %813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %812, i32 16, i32 31), !dbg !80
  %814 = bitcast i32 %813 to float, !dbg !80
  %815 = bitcast float %349 to i32, !dbg !80
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 16, i32 31), !dbg !80
  %817 = bitcast i32 %816 to float, !dbg !80
  %818 = fsub float %811, %808, !dbg !82
  %819 = fadd float %349, %817, !dbg !84
  %820 = fcmp oeq float %819, 0.000000e+00, !dbg !85
  %821 = tail call float @llvm.nvvm.div.full(float %817, float %819), !dbg !86
  %822 = select i1 %820, float 0.000000e+00, float %821, !dbg !87
  %823 = fmul float %818, %822, !dbg !88
  %824 = fadd float %808, %823, !dbg !89
  %825 = fadd float %341, %814, !dbg !90
  %826 = fmul float %818, %818, !dbg !91
  %827 = fmul float %349, %826, !dbg !92
  %828 = fmul float %827, %822, !dbg !93
  %829 = fadd float %825, %828, !dbg !94
  %830 = bitcast float %824 to i32, !dbg !80
  %831 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %830, i32 8, i32 31), !dbg !80
  %832 = bitcast i32 %831 to float, !dbg !80
  %833 = bitcast float %829 to i32, !dbg !80
  %834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %833, i32 8, i32 31), !dbg !80
  %835 = bitcast i32 %834 to float, !dbg !80
  %836 = bitcast float %819 to i32, !dbg !80
  %837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %836, i32 8, i32 31), !dbg !80
  %838 = bitcast i32 %837 to float, !dbg !80
  %839 = fsub float %832, %824, !dbg !82
  %840 = fadd float %819, %838, !dbg !84
  %841 = fcmp oeq float %840, 0.000000e+00, !dbg !85
  %842 = tail call float @llvm.nvvm.div.full(float %838, float %840), !dbg !86
  %843 = select i1 %841, float 0.000000e+00, float %842, !dbg !87
  %844 = fmul float %839, %843, !dbg !88
  %845 = fadd float %824, %844, !dbg !89
  %846 = fadd float %829, %835, !dbg !90
  %847 = fmul float %839, %839, !dbg !91
  %848 = fmul float %819, %847, !dbg !92
  %849 = fmul float %843, %848, !dbg !93
  %850 = fadd float %846, %849, !dbg !94
  %851 = bitcast float %845 to i32, !dbg !80
  %852 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %851, i32 4, i32 31), !dbg !80
  %853 = bitcast i32 %852 to float, !dbg !80
  %854 = bitcast float %850 to i32, !dbg !80
  %855 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %854, i32 4, i32 31), !dbg !80
  %856 = bitcast i32 %855 to float, !dbg !80
  %857 = bitcast float %840 to i32, !dbg !80
  %858 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %857, i32 4, i32 31), !dbg !80
  %859 = bitcast i32 %858 to float, !dbg !80
  %860 = fsub float %853, %845, !dbg !82
  %861 = fadd float %840, %859, !dbg !84
  %862 = fcmp oeq float %861, 0.000000e+00, !dbg !85
  %863 = tail call float @llvm.nvvm.div.full(float %859, float %861), !dbg !86
  %864 = select i1 %862, float 0.000000e+00, float %863, !dbg !87
  %865 = fmul float %860, %864, !dbg !88
  %866 = fadd float %845, %865, !dbg !89
  %867 = fadd float %850, %856, !dbg !90
  %868 = fmul float %860, %860, !dbg !91
  %869 = fmul float %840, %868, !dbg !92
  %870 = fmul float %864, %869, !dbg !93
  %871 = fadd float %867, %870, !dbg !94
  %872 = bitcast float %866 to i32, !dbg !80
  %873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %872, i32 2, i32 31), !dbg !80
  %874 = bitcast i32 %873 to float, !dbg !80
  %875 = bitcast float %871 to i32, !dbg !80
  %876 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %875, i32 2, i32 31), !dbg !80
  %877 = bitcast i32 %876 to float, !dbg !80
  %878 = bitcast float %861 to i32, !dbg !80
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 2, i32 31), !dbg !80
  %880 = bitcast i32 %879 to float, !dbg !80
  %881 = fsub float %874, %866, !dbg !82
  %882 = fadd float %861, %880, !dbg !84
  %883 = fcmp oeq float %882, 0.000000e+00, !dbg !85
  %884 = tail call float @llvm.nvvm.div.full(float %880, float %882), !dbg !86
  %885 = select i1 %883, float 0.000000e+00, float %884, !dbg !87
  %886 = fmul float %881, %885, !dbg !88
  %887 = fadd float %866, %886, !dbg !89
  %888 = fadd float %871, %877, !dbg !90
  %889 = fmul float %881, %881, !dbg !91
  %890 = fmul float %861, %889, !dbg !92
  %891 = fmul float %885, %890, !dbg !93
  %892 = fadd float %888, %891, !dbg !94
  %893 = bitcast float %887 to i32, !dbg !80
  %894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %893, i32 1, i32 31), !dbg !80
  %895 = bitcast i32 %894 to float, !dbg !80
  %896 = bitcast float %892 to i32, !dbg !80
  %897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %896, i32 1, i32 31), !dbg !80
  %898 = bitcast i32 %897 to float, !dbg !80
  %899 = bitcast float %882 to i32, !dbg !80
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 1, i32 31), !dbg !80
  %901 = bitcast i32 %900 to float, !dbg !80
  %902 = fsub float %895, %887, !dbg !82
  %903 = fadd float %882, %901, !dbg !84
  %904 = fcmp oeq float %903, 0.000000e+00, !dbg !85
  %905 = tail call float @llvm.nvvm.div.full(float %901, float %903), !dbg !86
  %906 = select i1 %904, float 0.000000e+00, float %905, !dbg !87
  %907 = fmul float %902, %906, !dbg !88
  %908 = fadd float %887, %907, !dbg !89
  %909 = fadd float %892, %898, !dbg !90
  %910 = fmul float %902, %902, !dbg !91
  %911 = fmul float %882, %910, !dbg !92
  %912 = fmul float %906, %911, !dbg !93
  %913 = fadd float %909, %912, !dbg !94
  %914 = extractelement <8 x float> %336, i64 5, !dbg !80
  %915 = bitcast float %914 to i32, !dbg !80
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 16, i32 31), !dbg !80
  %917 = bitcast i32 %916 to float, !dbg !80
  %918 = bitcast float %342 to i32, !dbg !80
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 16, i32 31), !dbg !80
  %920 = bitcast i32 %919 to float, !dbg !80
  %921 = bitcast float %350 to i32, !dbg !80
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 16, i32 31), !dbg !80
  %923 = bitcast i32 %922 to float, !dbg !80
  %924 = fsub float %917, %914, !dbg !82
  %925 = fadd float %350, %923, !dbg !84
  %926 = fcmp oeq float %925, 0.000000e+00, !dbg !85
  %927 = tail call float @llvm.nvvm.div.full(float %923, float %925), !dbg !86
  %928 = select i1 %926, float 0.000000e+00, float %927, !dbg !87
  %929 = fmul float %924, %928, !dbg !88
  %930 = fadd float %914, %929, !dbg !89
  %931 = fadd float %342, %920, !dbg !90
  %932 = fmul float %924, %924, !dbg !91
  %933 = fmul float %350, %932, !dbg !92
  %934 = fmul float %933, %928, !dbg !93
  %935 = fadd float %931, %934, !dbg !94
  %936 = bitcast float %930 to i32, !dbg !80
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 8, i32 31), !dbg !80
  %938 = bitcast i32 %937 to float, !dbg !80
  %939 = bitcast float %935 to i32, !dbg !80
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 8, i32 31), !dbg !80
  %941 = bitcast i32 %940 to float, !dbg !80
  %942 = bitcast float %925 to i32, !dbg !80
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 8, i32 31), !dbg !80
  %944 = bitcast i32 %943 to float, !dbg !80
  %945 = fsub float %938, %930, !dbg !82
  %946 = fadd float %925, %944, !dbg !84
  %947 = fcmp oeq float %946, 0.000000e+00, !dbg !85
  %948 = tail call float @llvm.nvvm.div.full(float %944, float %946), !dbg !86
  %949 = select i1 %947, float 0.000000e+00, float %948, !dbg !87
  %950 = fmul float %945, %949, !dbg !88
  %951 = fadd float %930, %950, !dbg !89
  %952 = fadd float %935, %941, !dbg !90
  %953 = fmul float %945, %945, !dbg !91
  %954 = fmul float %925, %953, !dbg !92
  %955 = fmul float %949, %954, !dbg !93
  %956 = fadd float %952, %955, !dbg !94
  %957 = bitcast float %951 to i32, !dbg !80
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 4, i32 31), !dbg !80
  %959 = bitcast i32 %958 to float, !dbg !80
  %960 = bitcast float %956 to i32, !dbg !80
  %961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %960, i32 4, i32 31), !dbg !80
  %962 = bitcast i32 %961 to float, !dbg !80
  %963 = bitcast float %946 to i32, !dbg !80
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 4, i32 31), !dbg !80
  %965 = bitcast i32 %964 to float, !dbg !80
  %966 = fsub float %959, %951, !dbg !82
  %967 = fadd float %946, %965, !dbg !84
  %968 = fcmp oeq float %967, 0.000000e+00, !dbg !85
  %969 = tail call float @llvm.nvvm.div.full(float %965, float %967), !dbg !86
  %970 = select i1 %968, float 0.000000e+00, float %969, !dbg !87
  %971 = fmul float %966, %970, !dbg !88
  %972 = fadd float %951, %971, !dbg !89
  %973 = fadd float %956, %962, !dbg !90
  %974 = fmul float %966, %966, !dbg !91
  %975 = fmul float %946, %974, !dbg !92
  %976 = fmul float %970, %975, !dbg !93
  %977 = fadd float %973, %976, !dbg !94
  %978 = bitcast float %972 to i32, !dbg !80
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 2, i32 31), !dbg !80
  %980 = bitcast i32 %979 to float, !dbg !80
  %981 = bitcast float %977 to i32, !dbg !80
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 2, i32 31), !dbg !80
  %983 = bitcast i32 %982 to float, !dbg !80
  %984 = bitcast float %967 to i32, !dbg !80
  %985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %984, i32 2, i32 31), !dbg !80
  %986 = bitcast i32 %985 to float, !dbg !80
  %987 = fsub float %980, %972, !dbg !82
  %988 = fadd float %967, %986, !dbg !84
  %989 = fcmp oeq float %988, 0.000000e+00, !dbg !85
  %990 = tail call float @llvm.nvvm.div.full(float %986, float %988), !dbg !86
  %991 = select i1 %989, float 0.000000e+00, float %990, !dbg !87
  %992 = fmul float %987, %991, !dbg !88
  %993 = fadd float %972, %992, !dbg !89
  %994 = fadd float %977, %983, !dbg !90
  %995 = fmul float %987, %987, !dbg !91
  %996 = fmul float %967, %995, !dbg !92
  %997 = fmul float %991, %996, !dbg !93
  %998 = fadd float %994, %997, !dbg !94
  %999 = bitcast float %993 to i32, !dbg !80
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 1, i32 31), !dbg !80
  %1001 = bitcast i32 %1000 to float, !dbg !80
  %1002 = bitcast float %998 to i32, !dbg !80
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 1, i32 31), !dbg !80
  %1004 = bitcast i32 %1003 to float, !dbg !80
  %1005 = bitcast float %988 to i32, !dbg !80
  %1006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 1, i32 31), !dbg !80
  %1007 = bitcast i32 %1006 to float, !dbg !80
  %1008 = fsub float %1001, %993, !dbg !82
  %1009 = fadd float %988, %1007, !dbg !84
  %1010 = fcmp oeq float %1009, 0.000000e+00, !dbg !85
  %1011 = tail call float @llvm.nvvm.div.full(float %1007, float %1009), !dbg !86
  %1012 = select i1 %1010, float 0.000000e+00, float %1011, !dbg !87
  %1013 = fmul float %1008, %1012, !dbg !88
  %1014 = fadd float %993, %1013, !dbg !89
  %1015 = fadd float %998, %1004, !dbg !90
  %1016 = fmul float %1008, %1008, !dbg !91
  %1017 = fmul float %988, %1016, !dbg !92
  %1018 = fmul float %1012, %1017, !dbg !93
  %1019 = fadd float %1015, %1018, !dbg !94
  %1020 = extractelement <8 x float> %336, i64 6, !dbg !80
  %1021 = bitcast float %1020 to i32, !dbg !80
  %1022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1021, i32 16, i32 31), !dbg !80
  %1023 = bitcast i32 %1022 to float, !dbg !80
  %1024 = bitcast float %343 to i32, !dbg !80
  %1025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1024, i32 16, i32 31), !dbg !80
  %1026 = bitcast i32 %1025 to float, !dbg !80
  %1027 = bitcast float %351 to i32, !dbg !80
  %1028 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1027, i32 16, i32 31), !dbg !80
  %1029 = bitcast i32 %1028 to float, !dbg !80
  %1030 = fsub float %1023, %1020, !dbg !82
  %1031 = fadd float %351, %1029, !dbg !84
  %1032 = fcmp oeq float %1031, 0.000000e+00, !dbg !85
  %1033 = tail call float @llvm.nvvm.div.full(float %1029, float %1031), !dbg !86
  %1034 = select i1 %1032, float 0.000000e+00, float %1033, !dbg !87
  %1035 = fmul float %1030, %1034, !dbg !88
  %1036 = fadd float %1020, %1035, !dbg !89
  %1037 = fadd float %343, %1026, !dbg !90
  %1038 = fmul float %1030, %1030, !dbg !91
  %1039 = fmul float %351, %1038, !dbg !92
  %1040 = fmul float %1039, %1034, !dbg !93
  %1041 = fadd float %1037, %1040, !dbg !94
  %1042 = bitcast float %1036 to i32, !dbg !80
  %1043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1042, i32 8, i32 31), !dbg !80
  %1044 = bitcast i32 %1043 to float, !dbg !80
  %1045 = bitcast float %1041 to i32, !dbg !80
  %1046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1045, i32 8, i32 31), !dbg !80
  %1047 = bitcast i32 %1046 to float, !dbg !80
  %1048 = bitcast float %1031 to i32, !dbg !80
  %1049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1048, i32 8, i32 31), !dbg !80
  %1050 = bitcast i32 %1049 to float, !dbg !80
  %1051 = fsub float %1044, %1036, !dbg !82
  %1052 = fadd float %1031, %1050, !dbg !84
  %1053 = fcmp oeq float %1052, 0.000000e+00, !dbg !85
  %1054 = tail call float @llvm.nvvm.div.full(float %1050, float %1052), !dbg !86
  %1055 = select i1 %1053, float 0.000000e+00, float %1054, !dbg !87
  %1056 = fmul float %1051, %1055, !dbg !88
  %1057 = fadd float %1036, %1056, !dbg !89
  %1058 = fadd float %1041, %1047, !dbg !90
  %1059 = fmul float %1051, %1051, !dbg !91
  %1060 = fmul float %1031, %1059, !dbg !92
  %1061 = fmul float %1055, %1060, !dbg !93
  %1062 = fadd float %1058, %1061, !dbg !94
  %1063 = bitcast float %1057 to i32, !dbg !80
  %1064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1063, i32 4, i32 31), !dbg !80
  %1065 = bitcast i32 %1064 to float, !dbg !80
  %1066 = bitcast float %1062 to i32, !dbg !80
  %1067 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1066, i32 4, i32 31), !dbg !80
  %1068 = bitcast i32 %1067 to float, !dbg !80
  %1069 = bitcast float %1052 to i32, !dbg !80
  %1070 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1069, i32 4, i32 31), !dbg !80
  %1071 = bitcast i32 %1070 to float, !dbg !80
  %1072 = fsub float %1065, %1057, !dbg !82
  %1073 = fadd float %1052, %1071, !dbg !84
  %1074 = fcmp oeq float %1073, 0.000000e+00, !dbg !85
  %1075 = tail call float @llvm.nvvm.div.full(float %1071, float %1073), !dbg !86
  %1076 = select i1 %1074, float 0.000000e+00, float %1075, !dbg !87
  %1077 = fmul float %1072, %1076, !dbg !88
  %1078 = fadd float %1057, %1077, !dbg !89
  %1079 = fadd float %1062, %1068, !dbg !90
  %1080 = fmul float %1072, %1072, !dbg !91
  %1081 = fmul float %1052, %1080, !dbg !92
  %1082 = fmul float %1076, %1081, !dbg !93
  %1083 = fadd float %1079, %1082, !dbg !94
  %1084 = bitcast float %1078 to i32, !dbg !80
  %1085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1084, i32 2, i32 31), !dbg !80
  %1086 = bitcast i32 %1085 to float, !dbg !80
  %1087 = bitcast float %1083 to i32, !dbg !80
  %1088 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1087, i32 2, i32 31), !dbg !80
  %1089 = bitcast i32 %1088 to float, !dbg !80
  %1090 = bitcast float %1073 to i32, !dbg !80
  %1091 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1090, i32 2, i32 31), !dbg !80
  %1092 = bitcast i32 %1091 to float, !dbg !80
  %1093 = fsub float %1086, %1078, !dbg !82
  %1094 = fadd float %1073, %1092, !dbg !84
  %1095 = fcmp oeq float %1094, 0.000000e+00, !dbg !85
  %1096 = tail call float @llvm.nvvm.div.full(float %1092, float %1094), !dbg !86
  %1097 = select i1 %1095, float 0.000000e+00, float %1096, !dbg !87
  %1098 = fmul float %1093, %1097, !dbg !88
  %1099 = fadd float %1078, %1098, !dbg !89
  %1100 = fadd float %1083, %1089, !dbg !90
  %1101 = fmul float %1093, %1093, !dbg !91
  %1102 = fmul float %1073, %1101, !dbg !92
  %1103 = fmul float %1097, %1102, !dbg !93
  %1104 = fadd float %1100, %1103, !dbg !94
  %1105 = bitcast float %1099 to i32, !dbg !80
  %1106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1105, i32 1, i32 31), !dbg !80
  %1107 = bitcast i32 %1106 to float, !dbg !80
  %1108 = bitcast float %1104 to i32, !dbg !80
  %1109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1108, i32 1, i32 31), !dbg !80
  %1110 = bitcast i32 %1109 to float, !dbg !80
  %1111 = bitcast float %1094 to i32, !dbg !80
  %1112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1111, i32 1, i32 31), !dbg !80
  %1113 = bitcast i32 %1112 to float, !dbg !80
  %1114 = fsub float %1107, %1099, !dbg !82
  %1115 = fadd float %1094, %1113, !dbg !84
  %1116 = fcmp oeq float %1115, 0.000000e+00, !dbg !85
  %1117 = tail call float @llvm.nvvm.div.full(float %1113, float %1115), !dbg !86
  %1118 = select i1 %1116, float 0.000000e+00, float %1117, !dbg !87
  %1119 = fmul float %1114, %1118, !dbg !88
  %1120 = fadd float %1099, %1119, !dbg !89
  %1121 = fadd float %1104, %1110, !dbg !90
  %1122 = fmul float %1114, %1114, !dbg !91
  %1123 = fmul float %1094, %1122, !dbg !92
  %1124 = fmul float %1118, %1123, !dbg !93
  %1125 = fadd float %1121, %1124, !dbg !94
  %1126 = extractelement <8 x float> %336, i64 7, !dbg !80
  %1127 = bitcast float %1126 to i32, !dbg !80
  %1128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1127, i32 16, i32 31), !dbg !80
  %1129 = bitcast i32 %1128 to float, !dbg !80
  %1130 = bitcast float %344 to i32, !dbg !80
  %1131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1130, i32 16, i32 31), !dbg !80
  %1132 = bitcast i32 %1131 to float, !dbg !80
  %1133 = bitcast float %352 to i32, !dbg !80
  %1134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1133, i32 16, i32 31), !dbg !80
  %1135 = bitcast i32 %1134 to float, !dbg !80
  %1136 = fsub float %1129, %1126, !dbg !82
  %1137 = fadd float %352, %1135, !dbg !84
  %1138 = fcmp oeq float %1137, 0.000000e+00, !dbg !85
  %1139 = tail call float @llvm.nvvm.div.full(float %1135, float %1137), !dbg !86
  %1140 = select i1 %1138, float 0.000000e+00, float %1139, !dbg !87
  %1141 = fmul float %1136, %1140, !dbg !88
  %1142 = fadd float %1126, %1141, !dbg !89
  %1143 = fadd float %344, %1132, !dbg !90
  %1144 = fmul float %1136, %1136, !dbg !91
  %1145 = fmul float %352, %1144, !dbg !92
  %1146 = fmul float %1145, %1140, !dbg !93
  %1147 = fadd float %1143, %1146, !dbg !94
  %1148 = bitcast float %1142 to i32, !dbg !80
  %1149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1148, i32 8, i32 31), !dbg !80
  %1150 = bitcast i32 %1149 to float, !dbg !80
  %1151 = bitcast float %1147 to i32, !dbg !80
  %1152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1151, i32 8, i32 31), !dbg !80
  %1153 = bitcast i32 %1152 to float, !dbg !80
  %1154 = bitcast float %1137 to i32, !dbg !80
  %1155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1154, i32 8, i32 31), !dbg !80
  %1156 = bitcast i32 %1155 to float, !dbg !80
  %1157 = fsub float %1150, %1142, !dbg !82
  %1158 = fadd float %1137, %1156, !dbg !84
  %1159 = fcmp oeq float %1158, 0.000000e+00, !dbg !85
  %1160 = tail call float @llvm.nvvm.div.full(float %1156, float %1158), !dbg !86
  %1161 = select i1 %1159, float 0.000000e+00, float %1160, !dbg !87
  %1162 = fmul float %1157, %1161, !dbg !88
  %1163 = fadd float %1142, %1162, !dbg !89
  %1164 = fadd float %1147, %1153, !dbg !90
  %1165 = fmul float %1157, %1157, !dbg !91
  %1166 = fmul float %1137, %1165, !dbg !92
  %1167 = fmul float %1161, %1166, !dbg !93
  %1168 = fadd float %1164, %1167, !dbg !94
  %1169 = bitcast float %1163 to i32, !dbg !80
  %1170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1169, i32 4, i32 31), !dbg !80
  %1171 = bitcast i32 %1170 to float, !dbg !80
  %1172 = bitcast float %1168 to i32, !dbg !80
  %1173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1172, i32 4, i32 31), !dbg !80
  %1174 = bitcast i32 %1173 to float, !dbg !80
  %1175 = bitcast float %1158 to i32, !dbg !80
  %1176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1175, i32 4, i32 31), !dbg !80
  %1177 = bitcast i32 %1176 to float, !dbg !80
  %1178 = fsub float %1171, %1163, !dbg !82
  %1179 = fadd float %1158, %1177, !dbg !84
  %1180 = fcmp oeq float %1179, 0.000000e+00, !dbg !85
  %1181 = tail call float @llvm.nvvm.div.full(float %1177, float %1179), !dbg !86
  %1182 = select i1 %1180, float 0.000000e+00, float %1181, !dbg !87
  %1183 = fmul float %1178, %1182, !dbg !88
  %1184 = fadd float %1163, %1183, !dbg !89
  %1185 = fadd float %1168, %1174, !dbg !90
  %1186 = fmul float %1178, %1178, !dbg !91
  %1187 = fmul float %1158, %1186, !dbg !92
  %1188 = fmul float %1182, %1187, !dbg !93
  %1189 = fadd float %1185, %1188, !dbg !94
  %1190 = bitcast float %1184 to i32, !dbg !80
  %1191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1190, i32 2, i32 31), !dbg !80
  %1192 = bitcast i32 %1191 to float, !dbg !80
  %1193 = bitcast float %1189 to i32, !dbg !80
  %1194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1193, i32 2, i32 31), !dbg !80
  %1195 = bitcast i32 %1194 to float, !dbg !80
  %1196 = bitcast float %1179 to i32, !dbg !80
  %1197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1196, i32 2, i32 31), !dbg !80
  %1198 = bitcast i32 %1197 to float, !dbg !80
  %1199 = fsub float %1192, %1184, !dbg !82
  %1200 = fadd float %1179, %1198, !dbg !84
  %1201 = fcmp oeq float %1200, 0.000000e+00, !dbg !85
  %1202 = tail call float @llvm.nvvm.div.full(float %1198, float %1200), !dbg !86
  %1203 = select i1 %1201, float 0.000000e+00, float %1202, !dbg !87
  %1204 = fmul float %1199, %1203, !dbg !88
  %1205 = fadd float %1184, %1204, !dbg !89
  %1206 = fadd float %1189, %1195, !dbg !90
  %1207 = fmul float %1199, %1199, !dbg !91
  %1208 = fmul float %1179, %1207, !dbg !92
  %1209 = fmul float %1203, %1208, !dbg !93
  %1210 = fadd float %1206, %1209, !dbg !94
  %1211 = bitcast float %1205 to i32, !dbg !80
  %1212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1211, i32 1, i32 31), !dbg !80
  %1213 = bitcast i32 %1212 to float, !dbg !80
  %1214 = bitcast float %1210 to i32, !dbg !80
  %1215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1214, i32 1, i32 31), !dbg !80
  %1216 = bitcast i32 %1215 to float, !dbg !80
  %1217 = bitcast float %1200 to i32, !dbg !80
  %1218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1217, i32 1, i32 31), !dbg !80
  %1219 = bitcast i32 %1218 to float, !dbg !80
  %1220 = fsub float %1213, %1205, !dbg !82
  %1221 = fadd float %1200, %1219, !dbg !84
  %1222 = fcmp oeq float %1221, 0.000000e+00, !dbg !85
  %1223 = tail call float @llvm.nvvm.div.full(float %1219, float %1221), !dbg !86
  %1224 = select i1 %1222, float 0.000000e+00, float %1223, !dbg !87
  %1225 = fmul float %1220, %1224, !dbg !88
  %1226 = fadd float %1205, %1225, !dbg !89
  %1227 = fadd float %1210, %1216, !dbg !90
  %1228 = fmul float %1220, %1220, !dbg !91
  %1229 = fmul float %1200, %1228, !dbg !92
  %1230 = fmul float %1224, %1229, !dbg !93
  %1231 = fadd float %1227, %1230, !dbg !94
  %1232 = and i32 %380, 15, !dbg !80
  %1233 = icmp eq i32 %22, 0, !dbg !80
  %1234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1232, !dbg !80
  %1235 = bitcast float %484 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1234, <1 x i32> %1235, i1 %1233) #5, !dbg !80
  %1236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1232, !dbg !80
  %1237 = bitcast float %489 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1236, <1 x i32> %1237, i1 %1233) #5, !dbg !80
  %1238 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1232, !dbg !80
  %1239 = bitcast float %479 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1238, <1 x i32> %1239, i1 %1233) #5, !dbg !80
  %1240 = or disjoint i32 %1232, 16, !dbg !80
  %1241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1240, !dbg !80
  %1242 = bitcast float %590 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %1242, i1 %1233) #5, !dbg !80
  %1243 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1240, !dbg !80
  %1244 = bitcast float %595 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1243, <1 x i32> %1244, i1 %1233) #5, !dbg !80
  %1245 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1240, !dbg !80
  %1246 = bitcast float %585 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1245, <1 x i32> %1246, i1 %1233) #5, !dbg !80
  %1247 = or disjoint i32 %1232, 32, !dbg !80
  %1248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1247, !dbg !80
  %1249 = bitcast float %696 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %1249, i1 %1233) #5, !dbg !80
  %1250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1247, !dbg !80
  %1251 = bitcast float %701 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1250, <1 x i32> %1251, i1 %1233) #5, !dbg !80
  %1252 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1247, !dbg !80
  %1253 = bitcast float %691 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1252, <1 x i32> %1253, i1 %1233) #5, !dbg !80
  %1254 = or disjoint i32 %1232, 48, !dbg !80
  %1255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1254, !dbg !80
  %1256 = bitcast float %802 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1255, <1 x i32> %1256, i1 %1233) #5, !dbg !80
  %1257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1254, !dbg !80
  %1258 = bitcast float %807 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1257, <1 x i32> %1258, i1 %1233) #5, !dbg !80
  %1259 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1254, !dbg !80
  %1260 = bitcast float %797 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1259, <1 x i32> %1260, i1 %1233) #5, !dbg !80
  %1261 = or disjoint i32 %1232, 64, !dbg !80
  %1262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1261, !dbg !80
  %1263 = bitcast float %908 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1262, <1 x i32> %1263, i1 %1233) #5, !dbg !80
  %1264 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1261, !dbg !80
  %1265 = bitcast float %913 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1264, <1 x i32> %1265, i1 %1233) #5, !dbg !80
  %1266 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1261, !dbg !80
  %1267 = bitcast float %903 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1266, <1 x i32> %1267, i1 %1233) #5, !dbg !80
  %1268 = or disjoint i32 %1232, 80, !dbg !80
  %1269 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1268, !dbg !80
  %1270 = bitcast float %1014 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1269, <1 x i32> %1270, i1 %1233) #5, !dbg !80
  %1271 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1268, !dbg !80
  %1272 = bitcast float %1019 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1271, <1 x i32> %1272, i1 %1233) #5, !dbg !80
  %1273 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1268, !dbg !80
  %1274 = bitcast float %1009 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1273, <1 x i32> %1274, i1 %1233) #5, !dbg !80
  %1275 = or disjoint i32 %1232, 96, !dbg !80
  %1276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1275, !dbg !80
  %1277 = bitcast float %1120 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1276, <1 x i32> %1277, i1 %1233) #5, !dbg !80
  %1278 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1275, !dbg !80
  %1279 = bitcast float %1125 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1278, <1 x i32> %1279, i1 %1233) #5, !dbg !80
  %1280 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1275, !dbg !80
  %1281 = bitcast float %1115 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1280, <1 x i32> %1281, i1 %1233) #5, !dbg !80
  %1282 = or disjoint i32 %1232, 112, !dbg !80
  %1283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1282, !dbg !80
  %1284 = bitcast float %1226 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1283, <1 x i32> %1284, i1 %1233) #5, !dbg !80
  %1285 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %1282, !dbg !80
  %1286 = bitcast float %1231 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1285, <1 x i32> %1286, i1 %1233) #5, !dbg !80
  %1287 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %1282, !dbg !80
  %1288 = bitcast float %1221 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1287, <1 x i32> %1288, i1 %1233) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1289 = icmp slt i32 %19, 128, !dbg !80
  %1290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !80
  %1291 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1290, i1 %1289) #5, !dbg !80
  %1292 = bitcast i32 %1291 to float, !dbg !80
  %1293 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %19, !dbg !80
  %1294 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1293, i1 %1289) #5, !dbg !80
  %1295 = bitcast i32 %1294 to float, !dbg !80
  %1296 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %19, !dbg !80
  %1297 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1296, i1 %1289) #5, !dbg !80
  %1298 = bitcast i32 %1297 to float, !dbg !80
  %1299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1291, i32 8, i32 31), !dbg !80
  %1300 = bitcast i32 %1299 to float, !dbg !80
  %1301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1294, i32 8, i32 31), !dbg !80
  %1302 = bitcast i32 %1301 to float, !dbg !80
  %1303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1297, i32 8, i32 31), !dbg !80
  %1304 = bitcast i32 %1303 to float, !dbg !80
  %1305 = fsub float %1300, %1292, !dbg !82
  %1306 = fadd float %1298, %1304, !dbg !84
  %1307 = fcmp oeq float %1306, 0.000000e+00, !dbg !85
  %1308 = tail call float @llvm.nvvm.div.full(float %1304, float %1306), !dbg !86
  %1309 = select i1 %1307, float 0.000000e+00, float %1308, !dbg !87
  %1310 = fmul float %1305, %1309, !dbg !88
  %1311 = fadd float %1310, %1292, !dbg !89
  %1312 = fadd float %1295, %1302, !dbg !90
  %1313 = fmul float %1305, %1305, !dbg !91
  %1314 = fmul float %1313, %1298, !dbg !92
  %1315 = fmul float %1314, %1309, !dbg !93
  %1316 = fadd float %1312, %1315, !dbg !94
  %1317 = bitcast float %1311 to i32, !dbg !80
  %1318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1317, i32 4, i32 31), !dbg !80
  %1319 = bitcast i32 %1318 to float, !dbg !80
  %1320 = bitcast float %1316 to i32, !dbg !80
  %1321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1320, i32 4, i32 31), !dbg !80
  %1322 = bitcast i32 %1321 to float, !dbg !80
  %1323 = bitcast float %1306 to i32, !dbg !80
  %1324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1323, i32 4, i32 31), !dbg !80
  %1325 = bitcast i32 %1324 to float, !dbg !80
  %1326 = fsub float %1319, %1311, !dbg !82
  %1327 = fadd float %1306, %1325, !dbg !84
  %1328 = fcmp oeq float %1327, 0.000000e+00, !dbg !85
  %1329 = tail call float @llvm.nvvm.div.full(float %1325, float %1327), !dbg !86
  %1330 = select i1 %1328, float 0.000000e+00, float %1329, !dbg !87
  %1331 = fmul float %1326, %1330, !dbg !88
  %1332 = fadd float %1311, %1331, !dbg !89
  %1333 = fadd float %1316, %1322, !dbg !90
  %1334 = fmul float %1326, %1326, !dbg !91
  %1335 = fmul float %1306, %1334, !dbg !92
  %1336 = fmul float %1330, %1335, !dbg !93
  %1337 = fadd float %1333, %1336, !dbg !94
  %1338 = bitcast float %1332 to i32, !dbg !80
  %1339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1338, i32 2, i32 31), !dbg !80
  %1340 = bitcast i32 %1339 to float, !dbg !80
  %1341 = bitcast float %1337 to i32, !dbg !80
  %1342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1341, i32 2, i32 31), !dbg !80
  %1343 = bitcast i32 %1342 to float, !dbg !80
  %1344 = bitcast float %1327 to i32, !dbg !80
  %1345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1344, i32 2, i32 31), !dbg !80
  %1346 = bitcast i32 %1345 to float, !dbg !80
  %1347 = fsub float %1340, %1332, !dbg !82
  %1348 = fadd float %1327, %1346, !dbg !84
  %1349 = fcmp oeq float %1348, 0.000000e+00, !dbg !85
  %1350 = tail call float @llvm.nvvm.div.full(float %1346, float %1348), !dbg !86
  %1351 = select i1 %1349, float 0.000000e+00, float %1350, !dbg !87
  %1352 = fmul float %1347, %1351, !dbg !88
  %1353 = fadd float %1332, %1352, !dbg !89
  %1354 = fadd float %1337, %1343, !dbg !90
  %1355 = fmul float %1347, %1347, !dbg !91
  %1356 = fmul float %1327, %1355, !dbg !92
  %1357 = fmul float %1351, %1356, !dbg !93
  %1358 = fadd float %1354, %1357, !dbg !94
  %1359 = bitcast float %1353 to i32, !dbg !80
  %1360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1359, i32 1, i32 31), !dbg !80
  %1361 = bitcast i32 %1360 to float, !dbg !80
  %1362 = bitcast float %1358 to i32, !dbg !80
  %1363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1362, i32 1, i32 31), !dbg !80
  %1364 = bitcast i32 %1363 to float, !dbg !80
  %1365 = bitcast float %1348 to i32, !dbg !80
  %1366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1365, i32 1, i32 31), !dbg !80
  %1367 = bitcast i32 %1366 to float, !dbg !80
  %1368 = fsub float %1361, %1353, !dbg !82
  %1369 = fadd float %1348, %1367, !dbg !84
  %1370 = fcmp oeq float %1369, 0.000000e+00, !dbg !85
  %1371 = tail call float @llvm.nvvm.div.full(float %1367, float %1369), !dbg !86
  %1372 = select i1 %1370, float 0.000000e+00, float %1371, !dbg !87
  %1373 = fmul float %1368, %1372, !dbg !88
  %1374 = fadd float %1353, %1373, !dbg !89
  %1375 = fadd float %1358, %1364, !dbg !90
  %1376 = fmul float %1368, %1368, !dbg !91
  %1377 = fmul float %1348, %1376, !dbg !92
  %1378 = fmul float %1372, %1377, !dbg !93
  %1379 = fadd float %1375, %1378, !dbg !94
  %1380 = and i32 %19, 15, !dbg !80
  %1381 = icmp eq i32 %1380, 0, !dbg !80
  %1382 = and i1 %1289, %1381, !dbg !80
  %1383 = bitcast float %1374 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1290, <1 x i32> %1383, i1 %1382) #5, !dbg !80
  %1384 = bitcast float %1379 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1293, <1 x i32> %1384, i1 %1382) #5, !dbg !80
  %1385 = bitcast float %1369 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1296, <1 x i32> %1385, i1 %1382) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %1386 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %1387 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !80
  %1388 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !80
  %1389 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !80
  %1390 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !80
  %1391 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !80
  %1392 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !80
  %1393 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !80
  %1394 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), align 16, !dbg !80
  %1395 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 576), align 16, !dbg !80
  %1396 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 640), align 16, !dbg !80
  %1397 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 704), align 16, !dbg !80
  %1398 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 768), align 16, !dbg !80
  %1399 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 832), align 16, !dbg !80
  %1400 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 896), align 16, !dbg !80
  %1401 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 960), align 16, !dbg !80
  %1402 = tail call float @llvm.nvvm.div.full(float %1394, float 3.072000e+03), !dbg !95
  %1403 = tail call float @llvm.nvvm.div.full(float %1395, float 3.072000e+03), !dbg !95
  %1404 = tail call float @llvm.nvvm.div.full(float %1396, float 3.072000e+03), !dbg !95
  %1405 = tail call float @llvm.nvvm.div.full(float %1397, float 3.072000e+03), !dbg !95
  %1406 = tail call float @llvm.nvvm.div.full(float %1398, float 3.072000e+03), !dbg !95
  %1407 = tail call float @llvm.nvvm.div.full(float %1399, float 3.072000e+03), !dbg !95
  %1408 = tail call float @llvm.nvvm.div.full(float %1400, float 3.072000e+03), !dbg !95
  %1409 = tail call float @llvm.nvvm.div.full(float %1401, float 3.072000e+03), !dbg !95
  %1410 = fadd float %1402, 0x3EB0C6F7A0000000, !dbg !96
  %1411 = fadd float %1403, 0x3EB0C6F7A0000000, !dbg !96
  %1412 = fadd float %1404, 0x3EB0C6F7A0000000, !dbg !96
  %1413 = fadd float %1405, 0x3EB0C6F7A0000000, !dbg !96
  %1414 = fadd float %1406, 0x3EB0C6F7A0000000, !dbg !96
  %1415 = fadd float %1407, 0x3EB0C6F7A0000000, !dbg !96
  %1416 = fadd float %1408, 0x3EB0C6F7A0000000, !dbg !96
  %1417 = fadd float %1409, 0x3EB0C6F7A0000000, !dbg !96
  %1418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i = icmp eq i32 %1418, 0, !dbg !97
  br i1 %.not.i, label %1421, label %1419, !dbg !97

1419:                                             ; preds = %379
  %1420 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1410), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

1421:                                             ; preds = %379
  %1422 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1410), !dbg !97
  br label %__nv_rsqrtf.exit, !dbg !97

__nv_rsqrtf.exit:                                 ; preds = %1419, %1421
  %.0.i = phi float [ %1420, %1419 ], [ %1422, %1421 ], !dbg !97
  %1423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i77 = icmp eq i32 %1423, 0, !dbg !97
  br i1 %.not.i77, label %1426, label %1424, !dbg !97

1424:                                             ; preds = %__nv_rsqrtf.exit
  %1425 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1411), !dbg !97
  br label %__nv_rsqrtf.exit79, !dbg !97

1426:                                             ; preds = %__nv_rsqrtf.exit
  %1427 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1411), !dbg !97
  br label %__nv_rsqrtf.exit79, !dbg !97

__nv_rsqrtf.exit79:                               ; preds = %1424, %1426
  %.0.i78 = phi float [ %1425, %1424 ], [ %1427, %1426 ], !dbg !97
  %1428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i80 = icmp eq i32 %1428, 0, !dbg !97
  br i1 %.not.i80, label %1431, label %1429, !dbg !97

1429:                                             ; preds = %__nv_rsqrtf.exit79
  %1430 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1412), !dbg !97
  br label %__nv_rsqrtf.exit82, !dbg !97

1431:                                             ; preds = %__nv_rsqrtf.exit79
  %1432 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1412), !dbg !97
  br label %__nv_rsqrtf.exit82, !dbg !97

__nv_rsqrtf.exit82:                               ; preds = %1429, %1431
  %.0.i81 = phi float [ %1430, %1429 ], [ %1432, %1431 ], !dbg !97
  %1433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i83 = icmp eq i32 %1433, 0, !dbg !97
  br i1 %.not.i83, label %1436, label %1434, !dbg !97

1434:                                             ; preds = %__nv_rsqrtf.exit82
  %1435 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1413), !dbg !97
  br label %__nv_rsqrtf.exit85, !dbg !97

1436:                                             ; preds = %__nv_rsqrtf.exit82
  %1437 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1413), !dbg !97
  br label %__nv_rsqrtf.exit85, !dbg !97

__nv_rsqrtf.exit85:                               ; preds = %1434, %1436
  %.0.i84 = phi float [ %1435, %1434 ], [ %1437, %1436 ], !dbg !97
  %1438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i86 = icmp eq i32 %1438, 0, !dbg !97
  br i1 %.not.i86, label %1441, label %1439, !dbg !97

1439:                                             ; preds = %__nv_rsqrtf.exit85
  %1440 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1414), !dbg !97
  br label %__nv_rsqrtf.exit88, !dbg !97

1441:                                             ; preds = %__nv_rsqrtf.exit85
  %1442 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1414), !dbg !97
  br label %__nv_rsqrtf.exit88, !dbg !97

__nv_rsqrtf.exit88:                               ; preds = %1439, %1441
  %.0.i87 = phi float [ %1440, %1439 ], [ %1442, %1441 ], !dbg !97
  %1443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i89 = icmp eq i32 %1443, 0, !dbg !97
  br i1 %.not.i89, label %1446, label %1444, !dbg !97

1444:                                             ; preds = %__nv_rsqrtf.exit88
  %1445 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1415), !dbg !97
  br label %__nv_rsqrtf.exit91, !dbg !97

1446:                                             ; preds = %__nv_rsqrtf.exit88
  %1447 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1415), !dbg !97
  br label %__nv_rsqrtf.exit91, !dbg !97

__nv_rsqrtf.exit91:                               ; preds = %1444, %1446
  %.0.i90 = phi float [ %1445, %1444 ], [ %1447, %1446 ], !dbg !97
  %1448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i92 = icmp eq i32 %1448, 0, !dbg !97
  br i1 %.not.i92, label %1451, label %1449, !dbg !97

1449:                                             ; preds = %__nv_rsqrtf.exit91
  %1450 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1416), !dbg !97
  br label %__nv_rsqrtf.exit94, !dbg !97

1451:                                             ; preds = %__nv_rsqrtf.exit91
  %1452 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1416), !dbg !97
  br label %__nv_rsqrtf.exit94, !dbg !97

__nv_rsqrtf.exit94:                               ; preds = %1449, %1451
  %.0.i93 = phi float [ %1450, %1449 ], [ %1452, %1451 ], !dbg !97
  %1453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i95 = icmp eq i32 %1453, 0, !dbg !97
  br i1 %.not.i95, label %1456, label %1454, !dbg !97

1454:                                             ; preds = %__nv_rsqrtf.exit94
  %1455 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1417), !dbg !97
  br label %__nv_rsqrtf.exit97, !dbg !97

1456:                                             ; preds = %__nv_rsqrtf.exit94
  %1457 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1417), !dbg !97
  br label %__nv_rsqrtf.exit97, !dbg !97

__nv_rsqrtf.exit97:                               ; preds = %1454, %1456
  %.0.i96 = phi float [ %1455, %1454 ], [ %1457, %1456 ], !dbg !97
  %1458 = lshr exact i32 %69, 2
  %1459 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1458
  %1460 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1459, i32 %.reass117
  %1461 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75
  %1462 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1461, i32 %74
  %1463 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %79
  %1464 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1463, i32 %78
  %1465 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %83
  %1466 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1465, i32 %82
  %1467 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %87
  %1468 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1467, i32 %86
  %1469 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %91
  %1470 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1469, i32 %90
  %1471 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %95
  %1472 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1471, i32 %94
  %1473 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %99
  %1474 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1473, i32 %98
  %1475 = lshr exact i32 %70, 2
  %1476 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1475
  %1477 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1476, i32 %70
  %1478 = insertelement <16 x i1> poison, i1 %25, i64 0, !dbg !98
  %1479 = shufflevector <16 x i1> %1478, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !98
  %1480 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !99
  %1481 = insertelement <8 x float> %1480, float %.0.i78, i64 1, !dbg !99
  %1482 = insertelement <8 x float> %1481, float %.0.i81, i64 2, !dbg !99
  %1483 = insertelement <8 x float> %1482, float %.0.i84, i64 3, !dbg !99
  %1484 = insertelement <8 x float> %1483, float %.0.i87, i64 4, !dbg !99
  %1485 = insertelement <8 x float> %1484, float %.0.i90, i64 5, !dbg !99
  %1486 = insertelement <8 x float> %1485, float %.0.i93, i64 6, !dbg !99
  %1487 = insertelement <8 x float> %1486, float %.0.i96, i64 7, !dbg !99
  %1488 = insertelement <8 x float> poison, float %1386, i64 0, !dbg !100
  %1489 = insertelement <8 x float> %1488, float %1387, i64 1, !dbg !100
  %1490 = insertelement <8 x float> %1489, float %1388, i64 2, !dbg !100
  %1491 = insertelement <8 x float> %1490, float %1389, i64 3, !dbg !100
  %1492 = insertelement <8 x float> %1491, float %1390, i64 4, !dbg !100
  %1493 = insertelement <8 x float> %1492, float %1391, i64 5, !dbg !100
  %1494 = insertelement <8 x float> %1493, float %1392, i64 6, !dbg !100
  %1495 = insertelement <8 x float> %1494, float %1393, i64 7, !dbg !100
  %invariant.op323 = or i32 %29, 12288, !dbg !101
  %1496 = getelementptr inbounds nuw i8, ptr addrspace(3) %125, i32 4
  %1497 = getelementptr inbounds nuw i8, ptr addrspace(3) %125, i32 8
  %1498 = getelementptr inbounds nuw i8, ptr addrspace(3) %125, i32 12
  br label %1499, !dbg !101

1499:                                             ; preds = %__nv_rsqrtf.exit97, %1499
  %indvars.iv161 = phi i64 [ 0, %__nv_rsqrtf.exit97 ], [ %indvars.iv.next162, %1499 ]
  %1500 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit97 ], [ %1563, %1499 ]
  %1501 = or disjoint i64 %indvars.iv161, %126, !dbg !102
  %1502 = trunc nuw nsw i64 %indvars.iv161 to i32, !dbg !103
  %1503 = add i32 %66, %1502, !dbg !103
  %1504 = sext i32 %1503 to i64, !dbg !104
  %1505 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1504, !dbg !104
  %1506 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1505, i1 %24) #5, !dbg !105
  %1507 = extractvalue { i32, i32, i32, i32 } %1506, 0, !dbg !105
  %1508 = extractvalue { i32, i32, i32, i32 } %1506, 1, !dbg !105
  %1509 = extractvalue { i32, i32, i32, i32 } %1506, 2, !dbg !105
  %1510 = extractvalue { i32, i32, i32, i32 } %1506, 3, !dbg !105
  %extelt.offset = lshr i32 %1507, 16, !dbg !105
  %1511 = trunc nuw i32 %extelt.offset to i16, !dbg !105
  %extelt.offset21 = lshr i32 %1508, 16, !dbg !105
  %1512 = trunc nuw i32 %extelt.offset21 to i16, !dbg !105
  %extelt.offset22 = lshr i32 %1509, 16, !dbg !105
  %1513 = trunc nuw i32 %extelt.offset22 to i16, !dbg !105
  %extelt.offset23 = lshr i32 %1510, 16, !dbg !105
  %1514 = trunc nuw i32 %extelt.offset23 to i16, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1515 = trunc i32 %1507 to i16, !dbg !99
  %1516 = insertelement <1 x i16> poison, i16 %1515, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %1460, <1 x i16> %1516, i1 true) #5, !dbg !99
  %1517 = insertelement <1 x i16> poison, i16 %1511, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1462, <1 x i16> %1517, i1 true) #5, !dbg !99
  %1518 = trunc i32 %1508 to i16, !dbg !99
  %1519 = insertelement <1 x i16> poison, i16 %1518, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1464, <1 x i16> %1519, i1 true) #5, !dbg !99
  %1520 = insertelement <1 x i16> poison, i16 %1512, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1466, <1 x i16> %1520, i1 true) #5, !dbg !99
  %1521 = trunc i32 %1509 to i16, !dbg !99
  %1522 = insertelement <1 x i16> poison, i16 %1521, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1468, <1 x i16> %1522, i1 true) #5, !dbg !99
  %1523 = insertelement <1 x i16> poison, i16 %1513, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1470, <1 x i16> %1523, i1 true) #5, !dbg !99
  %1524 = trunc i32 %1510 to i16, !dbg !99
  %1525 = insertelement <1 x i16> poison, i16 %1524, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1472, <1 x i16> %1525, i1 true) #5, !dbg !99
  %1526 = insertelement <1 x i16> poison, i16 %1514, i64 0, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %1474, <1 x i16> %1526, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %.reass.reass.reass = or i32 %1502, %invariant.op323
  %1527 = zext nneg i32 %.reass.reass.reass to i64, !dbg !106
  %1528 = getelementptr float, ptr addrspace(1) %1, i64 %1527, !dbg !106
  %1529 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1527, !dbg !107
  %1530 = add nuw nsw i64 %1501, 9216, !dbg !108
  %1531 = getelementptr float, ptr addrspace(1) %1, i64 %1530, !dbg !109
  %1532 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1530, !dbg !110
  %1533 = fcmp uno <16 x float> %1500, zeroinitializer, !dbg !111
  %1534 = load <8 x bfloat>, ptr addrspace(3) %1477, align 2, !dbg !99
  %1535 = fpext <8 x bfloat> %1534 to <8 x float>, !dbg !113
  %1536 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1528, i1 true) #5, !dbg !114
  %1537 = bitcast i32 %1536 to float, !dbg !114
  %1538 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %1529, i1 true) #5, !dbg !115
  %1539 = bitcast i16 %1538 to bfloat, !dbg !115
  %1540 = fpext bfloat %1539 to float, !dbg !116
  %1541 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %1531, i1 true) #5, !dbg !117
  %1542 = bitcast i32 %1541 to float, !dbg !117
  %1543 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %1532, i1 true) #5, !dbg !118
  %1544 = bitcast i16 %1543 to bfloat, !dbg !118
  %1545 = fpext bfloat %1544 to float, !dbg !119
  %1546 = fsub <8 x float> %1535, %1495, !dbg !100
  %1547 = fmul <8 x float> %1487, %1546, !dbg !99
  %1548 = fadd float %1537, %1540, !dbg !120
  %1549 = fadd float %1548, 1.000000e+00, !dbg !121
  %1550 = insertelement <8 x float> poison, float %1549, i64 0, !dbg !122
  %1551 = shufflevector <8 x float> %1550, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !122
  %1552 = fmul <8 x float> %1547, %1551, !dbg !122
  %1553 = fadd float %1542, %1545, !dbg !123
  %1554 = insertelement <8 x float> poison, float %1553, i64 0, !dbg !124
  %1555 = shufflevector <8 x float> %1552, <8 x float> poison, <16 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>, !dbg !124
  %1556 = shufflevector <8 x float> %1554, <8 x float> poison, <16 x i32> zeroinitializer, !dbg !124
  %1557 = fadd <16 x float> %1555, %1556, !dbg !124
  %1558 = fcmp ogt <16 x float> %1500, %1557, !dbg !125
  %1559 = fcmp olt <16 x float> %1500, %1557, !dbg !125
  %1560 = shufflevector <16 x i1> %1558, <16 x i1> %1559, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !125
  %1561 = or <16 x i1> %1533, %1560, !dbg !126
  %1562 = select <16 x i1> %1561, <16 x float> %1500, <16 x float> %1557, !dbg !127
  %1563 = select <16 x i1> %1479, <16 x float> %1562, <16 x float> %1500, !dbg !98
  %1564 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1504, !dbg !128
  %1565 = extractelement <16 x float> %1557, i64 7, !dbg !129
  %1566 = fptrunc float %1565 to bfloat, !dbg !129
  %1567 = extractelement <16 x float> %1557, i64 6, !dbg !129
  %1568 = fptrunc float %1567 to bfloat, !dbg !129
  %1569 = extractelement <16 x float> %1557, i64 5, !dbg !129
  %1570 = fptrunc float %1569 to bfloat, !dbg !129
  %1571 = extractelement <16 x float> %1557, i64 4, !dbg !129
  %1572 = fptrunc float %1571 to bfloat, !dbg !129
  %1573 = extractelement <16 x float> %1557, i64 3, !dbg !129
  %1574 = fptrunc float %1573 to bfloat, !dbg !129
  %1575 = extractelement <16 x float> %1557, i64 2, !dbg !129
  %1576 = fptrunc float %1575 to bfloat, !dbg !129
  %1577 = extractelement <16 x float> %1557, i64 1, !dbg !129
  %1578 = fptrunc float %1577 to bfloat, !dbg !129
  %1579 = extractelement <16 x float> %1557, i64 0, !dbg !129
  %1580 = fptrunc float %1579 to bfloat, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %1581 = bitcast bfloat %1566 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %114, <1 x i16> %1581, i1 true) #5, !dbg !129
  %1582 = bitcast bfloat %1568 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %115, <1 x i16> %1582, i1 true) #5, !dbg !129
  %1583 = bitcast bfloat %1570 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %116, <1 x i16> %1583, i1 true) #5, !dbg !129
  %1584 = bitcast bfloat %1572 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %117, <1 x i16> %1584, i1 true) #5, !dbg !129
  %1585 = bitcast bfloat %1574 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %118, <1 x i16> %1585, i1 true) #5, !dbg !129
  %1586 = bitcast bfloat %1576 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %119, <1 x i16> %1586, i1 true) #5, !dbg !129
  %1587 = bitcast bfloat %1578 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %120, <1 x i16> %1587, i1 true) #5, !dbg !129
  %1588 = bitcast bfloat %1580 to <1 x i16>, !dbg !129
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) nonnull %121, <1 x i16> %1588, i1 true) #5, !dbg !129
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %.extract = load i32, ptr addrspace(3) %125, align 16, !dbg !129
  %.extract99 = load i32, ptr addrspace(3) %1496, align 4, !dbg !129
  %.extract101 = load i32, ptr addrspace(3) %1497, align 8, !dbg !129
  %.extract103 = load i32, ptr addrspace(3) %1498, align 4, !dbg !129
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract99, i32 %.extract101, i32 %.extract103, ptr addrspace(1) %1564, i1 %24) #5, !dbg !129
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 512, !dbg !101
  %1589 = icmp samesign ult i64 %indvars.iv161, 2560, !dbg !101
  br i1 %1589, label %1499, label %1590, !dbg !101

1590:                                             ; preds = %1499
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %1591 = extractelement <16 x float> %1563, i64 15, !dbg !130
  %1592 = bitcast float %1591 to i32, !dbg !130
  %1593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1592, i32 16, i32 31), !dbg !130
  %1594 = bitcast i32 %1593 to float, !dbg !130
  %1595 = fcmp olt float %1591, %1594, !dbg !132
  %1596 = fcmp uno <16 x float> %1563, zeroinitializer, !dbg !133
  %1597 = extractelement <16 x i1> %1596, i64 15, !dbg !135
  %1598 = or i1 %1597, %1595, !dbg !135
  %1599 = select i1 %1598, float %1591, float %1594, !dbg !136
  %1600 = bitcast float %1599 to i32, !dbg !130
  %1601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1600, i32 8, i32 31), !dbg !130
  %1602 = bitcast i32 %1601 to float, !dbg !130
  %1603 = fcmp olt float %1599, %1602, !dbg !132
  %1604 = fcmp uno float %1599, 0.000000e+00, !dbg !137
  %1605 = or i1 %1603, %1604, !dbg !135
  %1606 = select i1 %1605, float %1599, float %1602, !dbg !136
  %1607 = bitcast float %1606 to i32, !dbg !130
  %1608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1607, i32 4, i32 31), !dbg !130
  %1609 = bitcast i32 %1608 to float, !dbg !130
  %1610 = fcmp olt float %1606, %1609, !dbg !132
  %1611 = fcmp uno float %1606, 0.000000e+00, !dbg !137
  %1612 = or i1 %1610, %1611, !dbg !135
  %1613 = select i1 %1612, float %1606, float %1609, !dbg !136
  %1614 = bitcast float %1613 to i32, !dbg !130
  %1615 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1614, i32 2, i32 31), !dbg !130
  %1616 = bitcast i32 %1615 to float, !dbg !130
  %1617 = fcmp olt float %1613, %1616, !dbg !132
  %1618 = fcmp uno float %1613, 0.000000e+00, !dbg !137
  %1619 = or i1 %1617, %1618, !dbg !135
  %1620 = select i1 %1619, float %1613, float %1616, !dbg !136
  %1621 = bitcast float %1620 to i32, !dbg !130
  %1622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1621, i32 1, i32 31), !dbg !130
  %1623 = bitcast i32 %1622 to float, !dbg !130
  %1624 = fcmp olt float %1620, %1623, !dbg !132
  %1625 = fcmp uno float %1620, 0.000000e+00, !dbg !137
  %1626 = or i1 %1624, %1625, !dbg !135
  %1627 = extractelement <16 x float> %1563, i64 14, !dbg !130
  %1628 = bitcast float %1627 to i32, !dbg !130
  %1629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1628, i32 16, i32 31), !dbg !130
  %1630 = bitcast i32 %1629 to float, !dbg !130
  %1631 = fcmp olt float %1627, %1630, !dbg !132
  %1632 = extractelement <16 x i1> %1596, i64 14, !dbg !135
  %1633 = or i1 %1632, %1631, !dbg !135
  %1634 = select i1 %1633, float %1627, float %1630, !dbg !136
  %1635 = bitcast float %1634 to i32, !dbg !130
  %1636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1635, i32 8, i32 31), !dbg !130
  %1637 = bitcast i32 %1636 to float, !dbg !130
  %1638 = fcmp olt float %1634, %1637, !dbg !132
  %1639 = fcmp uno float %1634, 0.000000e+00, !dbg !137
  %1640 = or i1 %1638, %1639, !dbg !135
  %1641 = select i1 %1640, float %1634, float %1637, !dbg !136
  %1642 = bitcast float %1641 to i32, !dbg !130
  %1643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1642, i32 4, i32 31), !dbg !130
  %1644 = bitcast i32 %1643 to float, !dbg !130
  %1645 = fcmp olt float %1641, %1644, !dbg !132
  %1646 = fcmp uno float %1641, 0.000000e+00, !dbg !137
  %1647 = or i1 %1645, %1646, !dbg !135
  %1648 = select i1 %1647, float %1641, float %1644, !dbg !136
  %1649 = bitcast float %1648 to i32, !dbg !130
  %1650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1649, i32 2, i32 31), !dbg !130
  %1651 = bitcast i32 %1650 to float, !dbg !130
  %1652 = fcmp olt float %1648, %1651, !dbg !132
  %1653 = fcmp uno float %1648, 0.000000e+00, !dbg !137
  %1654 = or i1 %1652, %1653, !dbg !135
  %1655 = select i1 %1654, float %1648, float %1651, !dbg !136
  %1656 = bitcast float %1655 to i32, !dbg !130
  %1657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1656, i32 1, i32 31), !dbg !130
  %1658 = bitcast i32 %1657 to float, !dbg !130
  %1659 = fcmp olt float %1655, %1658, !dbg !132
  %1660 = fcmp uno float %1655, 0.000000e+00, !dbg !137
  %1661 = or i1 %1659, %1660, !dbg !135
  %1662 = extractelement <16 x float> %1563, i64 13, !dbg !130
  %1663 = bitcast float %1662 to i32, !dbg !130
  %1664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1663, i32 16, i32 31), !dbg !130
  %1665 = bitcast i32 %1664 to float, !dbg !130
  %1666 = fcmp olt float %1662, %1665, !dbg !132
  %1667 = extractelement <16 x i1> %1596, i64 13, !dbg !135
  %1668 = or i1 %1667, %1666, !dbg !135
  %1669 = select i1 %1668, float %1662, float %1665, !dbg !136
  %1670 = bitcast float %1669 to i32, !dbg !130
  %1671 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1670, i32 8, i32 31), !dbg !130
  %1672 = bitcast i32 %1671 to float, !dbg !130
  %1673 = fcmp olt float %1669, %1672, !dbg !132
  %1674 = fcmp uno float %1669, 0.000000e+00, !dbg !137
  %1675 = or i1 %1673, %1674, !dbg !135
  %1676 = select i1 %1675, float %1669, float %1672, !dbg !136
  %1677 = bitcast float %1676 to i32, !dbg !130
  %1678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1677, i32 4, i32 31), !dbg !130
  %1679 = bitcast i32 %1678 to float, !dbg !130
  %1680 = fcmp olt float %1676, %1679, !dbg !132
  %1681 = fcmp uno float %1676, 0.000000e+00, !dbg !137
  %1682 = or i1 %1680, %1681, !dbg !135
  %1683 = select i1 %1682, float %1676, float %1679, !dbg !136
  %1684 = bitcast float %1683 to i32, !dbg !130
  %1685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1684, i32 2, i32 31), !dbg !130
  %1686 = bitcast i32 %1685 to float, !dbg !130
  %1687 = fcmp olt float %1683, %1686, !dbg !132
  %1688 = fcmp uno float %1683, 0.000000e+00, !dbg !137
  %1689 = or i1 %1687, %1688, !dbg !135
  %1690 = select i1 %1689, float %1683, float %1686, !dbg !136
  %1691 = bitcast float %1690 to i32, !dbg !130
  %1692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1691, i32 1, i32 31), !dbg !130
  %1693 = bitcast i32 %1692 to float, !dbg !130
  %1694 = fcmp olt float %1690, %1693, !dbg !132
  %1695 = fcmp uno float %1690, 0.000000e+00, !dbg !137
  %1696 = or i1 %1694, %1695, !dbg !135
  %1697 = extractelement <16 x float> %1563, i64 12, !dbg !130
  %1698 = bitcast float %1697 to i32, !dbg !130
  %1699 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1698, i32 16, i32 31), !dbg !130
  %1700 = bitcast i32 %1699 to float, !dbg !130
  %1701 = fcmp olt float %1697, %1700, !dbg !132
  %1702 = extractelement <16 x i1> %1596, i64 12, !dbg !135
  %1703 = or i1 %1702, %1701, !dbg !135
  %1704 = select i1 %1703, float %1697, float %1700, !dbg !136
  %1705 = bitcast float %1704 to i32, !dbg !130
  %1706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1705, i32 8, i32 31), !dbg !130
  %1707 = bitcast i32 %1706 to float, !dbg !130
  %1708 = fcmp olt float %1704, %1707, !dbg !132
  %1709 = fcmp uno float %1704, 0.000000e+00, !dbg !137
  %1710 = or i1 %1708, %1709, !dbg !135
  %1711 = select i1 %1710, float %1704, float %1707, !dbg !136
  %1712 = bitcast float %1711 to i32, !dbg !130
  %1713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1712, i32 4, i32 31), !dbg !130
  %1714 = bitcast i32 %1713 to float, !dbg !130
  %1715 = fcmp olt float %1711, %1714, !dbg !132
  %1716 = fcmp uno float %1711, 0.000000e+00, !dbg !137
  %1717 = or i1 %1715, %1716, !dbg !135
  %1718 = select i1 %1717, float %1711, float %1714, !dbg !136
  %1719 = bitcast float %1718 to i32, !dbg !130
  %1720 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1719, i32 2, i32 31), !dbg !130
  %1721 = bitcast i32 %1720 to float, !dbg !130
  %1722 = fcmp olt float %1718, %1721, !dbg !132
  %1723 = fcmp uno float %1718, 0.000000e+00, !dbg !137
  %1724 = or i1 %1722, %1723, !dbg !135
  %1725 = select i1 %1724, float %1718, float %1721, !dbg !136
  %1726 = bitcast float %1725 to i32, !dbg !130
  %1727 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1726, i32 1, i32 31), !dbg !130
  %1728 = bitcast i32 %1727 to float, !dbg !130
  %1729 = fcmp olt float %1725, %1728, !dbg !132
  %1730 = fcmp uno float %1725, 0.000000e+00, !dbg !137
  %1731 = or i1 %1729, %1730, !dbg !135
  %1732 = extractelement <16 x float> %1563, i64 11, !dbg !130
  %1733 = bitcast float %1732 to i32, !dbg !130
  %1734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1733, i32 16, i32 31), !dbg !130
  %1735 = bitcast i32 %1734 to float, !dbg !130
  %1736 = fcmp olt float %1732, %1735, !dbg !132
  %1737 = extractelement <16 x i1> %1596, i64 11, !dbg !135
  %1738 = or i1 %1737, %1736, !dbg !135
  %1739 = select i1 %1738, float %1732, float %1735, !dbg !136
  %1740 = bitcast float %1739 to i32, !dbg !130
  %1741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1740, i32 8, i32 31), !dbg !130
  %1742 = bitcast i32 %1741 to float, !dbg !130
  %1743 = fcmp olt float %1739, %1742, !dbg !132
  %1744 = fcmp uno float %1739, 0.000000e+00, !dbg !137
  %1745 = or i1 %1743, %1744, !dbg !135
  %1746 = select i1 %1745, float %1739, float %1742, !dbg !136
  %1747 = bitcast float %1746 to i32, !dbg !130
  %1748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1747, i32 4, i32 31), !dbg !130
  %1749 = bitcast i32 %1748 to float, !dbg !130
  %1750 = fcmp olt float %1746, %1749, !dbg !132
  %1751 = fcmp uno float %1746, 0.000000e+00, !dbg !137
  %1752 = or i1 %1750, %1751, !dbg !135
  %1753 = select i1 %1752, float %1746, float %1749, !dbg !136
  %1754 = bitcast float %1753 to i32, !dbg !130
  %1755 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1754, i32 2, i32 31), !dbg !130
  %1756 = bitcast i32 %1755 to float, !dbg !130
  %1757 = fcmp olt float %1753, %1756, !dbg !132
  %1758 = fcmp uno float %1753, 0.000000e+00, !dbg !137
  %1759 = or i1 %1757, %1758, !dbg !135
  %1760 = select i1 %1759, float %1753, float %1756, !dbg !136
  %1761 = bitcast float %1760 to i32, !dbg !130
  %1762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1761, i32 1, i32 31), !dbg !130
  %1763 = bitcast i32 %1762 to float, !dbg !130
  %1764 = fcmp olt float %1760, %1763, !dbg !132
  %1765 = fcmp uno float %1760, 0.000000e+00, !dbg !137
  %1766 = or i1 %1764, %1765, !dbg !135
  %1767 = extractelement <16 x float> %1563, i64 10, !dbg !130
  %1768 = bitcast float %1767 to i32, !dbg !130
  %1769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1768, i32 16, i32 31), !dbg !130
  %1770 = bitcast i32 %1769 to float, !dbg !130
  %1771 = fcmp olt float %1767, %1770, !dbg !132
  %1772 = extractelement <16 x i1> %1596, i64 10, !dbg !135
  %1773 = or i1 %1772, %1771, !dbg !135
  %1774 = select i1 %1773, float %1767, float %1770, !dbg !136
  %1775 = bitcast float %1774 to i32, !dbg !130
  %1776 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1775, i32 8, i32 31), !dbg !130
  %1777 = bitcast i32 %1776 to float, !dbg !130
  %1778 = fcmp olt float %1774, %1777, !dbg !132
  %1779 = fcmp uno float %1774, 0.000000e+00, !dbg !137
  %1780 = or i1 %1778, %1779, !dbg !135
  %1781 = select i1 %1780, float %1774, float %1777, !dbg !136
  %1782 = bitcast float %1781 to i32, !dbg !130
  %1783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1782, i32 4, i32 31), !dbg !130
  %1784 = bitcast i32 %1783 to float, !dbg !130
  %1785 = fcmp olt float %1781, %1784, !dbg !132
  %1786 = fcmp uno float %1781, 0.000000e+00, !dbg !137
  %1787 = or i1 %1785, %1786, !dbg !135
  %1788 = select i1 %1787, float %1781, float %1784, !dbg !136
  %1789 = bitcast float %1788 to i32, !dbg !130
  %1790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1789, i32 2, i32 31), !dbg !130
  %1791 = bitcast i32 %1790 to float, !dbg !130
  %1792 = fcmp olt float %1788, %1791, !dbg !132
  %1793 = fcmp uno float %1788, 0.000000e+00, !dbg !137
  %1794 = or i1 %1792, %1793, !dbg !135
  %1795 = select i1 %1794, float %1788, float %1791, !dbg !136
  %1796 = bitcast float %1795 to i32, !dbg !130
  %1797 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1796, i32 1, i32 31), !dbg !130
  %1798 = bitcast i32 %1797 to float, !dbg !130
  %1799 = fcmp olt float %1795, %1798, !dbg !132
  %1800 = fcmp uno float %1795, 0.000000e+00, !dbg !137
  %1801 = or i1 %1799, %1800, !dbg !135
  %1802 = extractelement <16 x float> %1563, i64 9, !dbg !130
  %1803 = bitcast float %1802 to i32, !dbg !130
  %1804 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1803, i32 16, i32 31), !dbg !130
  %1805 = bitcast i32 %1804 to float, !dbg !130
  %1806 = fcmp olt float %1802, %1805, !dbg !132
  %1807 = extractelement <16 x i1> %1596, i64 9, !dbg !135
  %1808 = or i1 %1807, %1806, !dbg !135
  %1809 = select i1 %1808, float %1802, float %1805, !dbg !136
  %1810 = bitcast float %1809 to i32, !dbg !130
  %1811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1810, i32 8, i32 31), !dbg !130
  %1812 = bitcast i32 %1811 to float, !dbg !130
  %1813 = fcmp olt float %1809, %1812, !dbg !132
  %1814 = fcmp uno float %1809, 0.000000e+00, !dbg !137
  %1815 = or i1 %1813, %1814, !dbg !135
  %1816 = select i1 %1815, float %1809, float %1812, !dbg !136
  %1817 = bitcast float %1816 to i32, !dbg !130
  %1818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1817, i32 4, i32 31), !dbg !130
  %1819 = bitcast i32 %1818 to float, !dbg !130
  %1820 = fcmp olt float %1816, %1819, !dbg !132
  %1821 = fcmp uno float %1816, 0.000000e+00, !dbg !137
  %1822 = or i1 %1820, %1821, !dbg !135
  %1823 = select i1 %1822, float %1816, float %1819, !dbg !136
  %1824 = bitcast float %1823 to i32, !dbg !130
  %1825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1824, i32 2, i32 31), !dbg !130
  %1826 = bitcast i32 %1825 to float, !dbg !130
  %1827 = fcmp olt float %1823, %1826, !dbg !132
  %1828 = fcmp uno float %1823, 0.000000e+00, !dbg !137
  %1829 = or i1 %1827, %1828, !dbg !135
  %1830 = select i1 %1829, float %1823, float %1826, !dbg !136
  %1831 = bitcast float %1830 to i32, !dbg !130
  %1832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1831, i32 1, i32 31), !dbg !130
  %1833 = bitcast i32 %1832 to float, !dbg !130
  %1834 = fcmp olt float %1830, %1833, !dbg !132
  %1835 = fcmp uno float %1830, 0.000000e+00, !dbg !137
  %1836 = or i1 %1834, %1835, !dbg !135
  %1837 = extractelement <16 x float> %1563, i64 8, !dbg !130
  %1838 = bitcast float %1837 to i32, !dbg !130
  %1839 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1838, i32 16, i32 31), !dbg !130
  %1840 = bitcast i32 %1839 to float, !dbg !130
  %1841 = fcmp olt float %1837, %1840, !dbg !132
  %1842 = extractelement <16 x i1> %1596, i64 8, !dbg !135
  %1843 = or i1 %1842, %1841, !dbg !135
  %1844 = select i1 %1843, float %1837, float %1840, !dbg !136
  %1845 = bitcast float %1844 to i32, !dbg !130
  %1846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1845, i32 8, i32 31), !dbg !130
  %1847 = bitcast i32 %1846 to float, !dbg !130
  %1848 = fcmp olt float %1844, %1847, !dbg !132
  %1849 = fcmp uno float %1844, 0.000000e+00, !dbg !137
  %1850 = or i1 %1848, %1849, !dbg !135
  %1851 = select i1 %1850, float %1844, float %1847, !dbg !136
  %1852 = bitcast float %1851 to i32, !dbg !130
  %1853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1852, i32 4, i32 31), !dbg !130
  %1854 = bitcast i32 %1853 to float, !dbg !130
  %1855 = fcmp olt float %1851, %1854, !dbg !132
  %1856 = fcmp uno float %1851, 0.000000e+00, !dbg !137
  %1857 = or i1 %1855, %1856, !dbg !135
  %1858 = select i1 %1857, float %1851, float %1854, !dbg !136
  %1859 = bitcast float %1858 to i32, !dbg !130
  %1860 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1859, i32 2, i32 31), !dbg !130
  %1861 = bitcast i32 %1860 to float, !dbg !130
  %1862 = fcmp olt float %1858, %1861, !dbg !132
  %1863 = fcmp uno float %1858, 0.000000e+00, !dbg !137
  %1864 = or i1 %1862, %1863, !dbg !135
  %1865 = select i1 %1864, float %1858, float %1861, !dbg !136
  %1866 = bitcast float %1865 to i32, !dbg !130
  %1867 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1866, i32 1, i32 31), !dbg !130
  %1868 = bitcast i32 %1867 to float, !dbg !130
  %1869 = fcmp olt float %1865, %1868, !dbg !132
  %1870 = fcmp uno float %1865, 0.000000e+00, !dbg !137
  %1871 = or i1 %1869, %1870, !dbg !135
  %1872 = select i1 %1626, i32 %1621, i32 %1622, !dbg !136
  %1873 = insertelement <1 x i32> poison, i32 %1872, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1234, <1 x i32> %1873, i1 %1233) #5, !dbg !130
  %1874 = select i1 %1661, i32 %1656, i32 %1657, !dbg !136
  %1875 = insertelement <1 x i32> poison, i32 %1874, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %1875, i1 %1233) #5, !dbg !130
  %1876 = select i1 %1696, i32 %1691, i32 %1692, !dbg !136
  %1877 = insertelement <1 x i32> poison, i32 %1876, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %1877, i1 %1233) #5, !dbg !130
  %1878 = select i1 %1731, i32 %1726, i32 %1727, !dbg !136
  %1879 = insertelement <1 x i32> poison, i32 %1878, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1255, <1 x i32> %1879, i1 %1233) #5, !dbg !130
  %1880 = select i1 %1766, i32 %1761, i32 %1762, !dbg !136
  %1881 = insertelement <1 x i32> poison, i32 %1880, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1262, <1 x i32> %1881, i1 %1233) #5, !dbg !130
  %1882 = select i1 %1801, i32 %1796, i32 %1797, !dbg !136
  %1883 = insertelement <1 x i32> poison, i32 %1882, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1269, <1 x i32> %1883, i1 %1233) #5, !dbg !130
  %1884 = select i1 %1836, i32 %1831, i32 %1832, !dbg !136
  %1885 = insertelement <1 x i32> poison, i32 %1884, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1276, <1 x i32> %1885, i1 %1233) #5, !dbg !130
  %1886 = select i1 %1871, i32 %1866, i32 %1867, !dbg !136
  %1887 = insertelement <1 x i32> poison, i32 %1886, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1283, <1 x i32> %1887, i1 %1233) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %1888 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1290, i1 %1289) #5, !dbg !130
  %1889 = bitcast i32 %1888 to float, !dbg !130
  %1890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1888, i32 8, i32 31), !dbg !130
  %1891 = bitcast i32 %1890 to float, !dbg !130
  %1892 = fcmp olt float %1889, %1891, !dbg !132
  %1893 = fcmp uno float %1889, 0.000000e+00, !dbg !137
  %1894 = or i1 %1893, %1892, !dbg !135
  %1895 = select i1 %1894, float %1889, float %1891, !dbg !136
  %1896 = bitcast float %1895 to i32, !dbg !130
  %1897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1896, i32 4, i32 31), !dbg !130
  %1898 = bitcast i32 %1897 to float, !dbg !130
  %1899 = fcmp olt float %1895, %1898, !dbg !132
  %1900 = fcmp uno float %1895, 0.000000e+00, !dbg !137
  %1901 = or i1 %1899, %1900, !dbg !135
  %1902 = select i1 %1901, float %1895, float %1898, !dbg !136
  %1903 = bitcast float %1902 to i32, !dbg !130
  %1904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1903, i32 2, i32 31), !dbg !130
  %1905 = bitcast i32 %1904 to float, !dbg !130
  %1906 = fcmp olt float %1902, %1905, !dbg !132
  %1907 = fcmp uno float %1902, 0.000000e+00, !dbg !137
  %1908 = or i1 %1906, %1907, !dbg !135
  %1909 = select i1 %1908, float %1902, float %1905, !dbg !136
  %1910 = bitcast float %1909 to i32, !dbg !130
  %1911 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1910, i32 1, i32 31), !dbg !130
  %1912 = bitcast i32 %1911 to float, !dbg !130
  %1913 = fcmp olt float %1909, %1912, !dbg !132
  %1914 = fcmp uno float %1909, 0.000000e+00, !dbg !137
  %1915 = or i1 %1913, %1914, !dbg !135
  %1916 = select i1 %1915, i32 %1910, i32 %1911, !dbg !136
  %1917 = insertelement <1 x i32> poison, i32 %1916, i64 0, !dbg !130
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1290, <1 x i32> %1917, i1 %1382) #5, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !130
  %1918 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !130
  %1919 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !130
  %1920 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !130
  %1921 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !130
  %1922 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !130
  %1923 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !130
  %1924 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !130
  %1925 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1926 = bitcast float %1918 to i32, !dbg !138
  %1927 = bitcast float %1919 to i32, !dbg !138
  %1928 = bitcast float %1920 to i32, !dbg !138
  %1929 = bitcast float %1921 to i32, !dbg !138
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1926, i32 %1927, i32 %1928, i32 %1929, i1 true) #5, !dbg !138
  %1930 = bitcast float %1922 to i32, !dbg !138
  %1931 = bitcast float %1923 to i32, !dbg !138
  %1932 = bitcast float %1924 to i32, !dbg !138
  %1933 = bitcast float %1925 to i32, !dbg !138
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %1930, i32 %1931, i32 %1932, i32 %1933, i1 true) #5, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %1934 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %381, !dbg !138
  %1935 = load float, ptr addrspace(3) %1934, align 4, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %1936 = extractelement <16 x float> %1563, i64 7, !dbg !139
  %1937 = bitcast float %1936 to i32, !dbg !139
  %1938 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1937, i32 16, i32 31), !dbg !139
  %1939 = bitcast i32 %1938 to float, !dbg !139
  %1940 = fcmp ogt float %1936, %1939, !dbg !140
  %1941 = extractelement <16 x i1> %1596, i64 7, !dbg !141
  %1942 = or i1 %1941, %1940, !dbg !141
  %1943 = select i1 %1942, float %1936, float %1939, !dbg !142
  %1944 = bitcast float %1943 to i32, !dbg !139
  %1945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1944, i32 8, i32 31), !dbg !139
  %1946 = bitcast i32 %1945 to float, !dbg !139
  %1947 = fcmp ogt float %1943, %1946, !dbg !140
  %1948 = fcmp uno float %1943, 0.000000e+00, !dbg !133
  %1949 = or i1 %1947, %1948, !dbg !141
  %1950 = select i1 %1949, float %1943, float %1946, !dbg !142
  %1951 = bitcast float %1950 to i32, !dbg !139
  %1952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1951, i32 4, i32 31), !dbg !139
  %1953 = bitcast i32 %1952 to float, !dbg !139
  %1954 = fcmp ogt float %1950, %1953, !dbg !140
  %1955 = fcmp uno float %1950, 0.000000e+00, !dbg !133
  %1956 = or i1 %1954, %1955, !dbg !141
  %1957 = select i1 %1956, float %1950, float %1953, !dbg !142
  %1958 = bitcast float %1957 to i32, !dbg !139
  %1959 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1958, i32 2, i32 31), !dbg !139
  %1960 = bitcast i32 %1959 to float, !dbg !139
  %1961 = fcmp ogt float %1957, %1960, !dbg !140
  %1962 = fcmp uno float %1957, 0.000000e+00, !dbg !133
  %1963 = or i1 %1961, %1962, !dbg !141
  %1964 = select i1 %1963, float %1957, float %1960, !dbg !142
  %1965 = bitcast float %1964 to i32, !dbg !139
  %1966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1965, i32 1, i32 31), !dbg !139
  %1967 = bitcast i32 %1966 to float, !dbg !139
  %1968 = fcmp ogt float %1964, %1967, !dbg !140
  %1969 = fcmp uno float %1964, 0.000000e+00, !dbg !133
  %1970 = or i1 %1968, %1969, !dbg !141
  %1971 = extractelement <16 x float> %1563, i64 6, !dbg !139
  %1972 = bitcast float %1971 to i32, !dbg !139
  %1973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1972, i32 16, i32 31), !dbg !139
  %1974 = bitcast i32 %1973 to float, !dbg !139
  %1975 = fcmp ogt float %1971, %1974, !dbg !140
  %1976 = extractelement <16 x i1> %1596, i64 6, !dbg !141
  %1977 = or i1 %1976, %1975, !dbg !141
  %1978 = select i1 %1977, float %1971, float %1974, !dbg !142
  %1979 = bitcast float %1978 to i32, !dbg !139
  %1980 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1979, i32 8, i32 31), !dbg !139
  %1981 = bitcast i32 %1980 to float, !dbg !139
  %1982 = fcmp ogt float %1978, %1981, !dbg !140
  %1983 = fcmp uno float %1978, 0.000000e+00, !dbg !133
  %1984 = or i1 %1982, %1983, !dbg !141
  %1985 = select i1 %1984, float %1978, float %1981, !dbg !142
  %1986 = bitcast float %1985 to i32, !dbg !139
  %1987 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1986, i32 4, i32 31), !dbg !139
  %1988 = bitcast i32 %1987 to float, !dbg !139
  %1989 = fcmp ogt float %1985, %1988, !dbg !140
  %1990 = fcmp uno float %1985, 0.000000e+00, !dbg !133
  %1991 = or i1 %1989, %1990, !dbg !141
  %1992 = select i1 %1991, float %1985, float %1988, !dbg !142
  %1993 = bitcast float %1992 to i32, !dbg !139
  %1994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1993, i32 2, i32 31), !dbg !139
  %1995 = bitcast i32 %1994 to float, !dbg !139
  %1996 = fcmp ogt float %1992, %1995, !dbg !140
  %1997 = fcmp uno float %1992, 0.000000e+00, !dbg !133
  %1998 = or i1 %1996, %1997, !dbg !141
  %1999 = select i1 %1998, float %1992, float %1995, !dbg !142
  %2000 = bitcast float %1999 to i32, !dbg !139
  %2001 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2000, i32 1, i32 31), !dbg !139
  %2002 = bitcast i32 %2001 to float, !dbg !139
  %2003 = fcmp ogt float %1999, %2002, !dbg !140
  %2004 = fcmp uno float %1999, 0.000000e+00, !dbg !133
  %2005 = or i1 %2003, %2004, !dbg !141
  %2006 = extractelement <16 x float> %1563, i64 5, !dbg !139
  %2007 = bitcast float %2006 to i32, !dbg !139
  %2008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2007, i32 16, i32 31), !dbg !139
  %2009 = bitcast i32 %2008 to float, !dbg !139
  %2010 = fcmp ogt float %2006, %2009, !dbg !140
  %2011 = extractelement <16 x i1> %1596, i64 5, !dbg !141
  %2012 = or i1 %2011, %2010, !dbg !141
  %2013 = select i1 %2012, float %2006, float %2009, !dbg !142
  %2014 = bitcast float %2013 to i32, !dbg !139
  %2015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2014, i32 8, i32 31), !dbg !139
  %2016 = bitcast i32 %2015 to float, !dbg !139
  %2017 = fcmp ogt float %2013, %2016, !dbg !140
  %2018 = fcmp uno float %2013, 0.000000e+00, !dbg !133
  %2019 = or i1 %2017, %2018, !dbg !141
  %2020 = select i1 %2019, float %2013, float %2016, !dbg !142
  %2021 = bitcast float %2020 to i32, !dbg !139
  %2022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2021, i32 4, i32 31), !dbg !139
  %2023 = bitcast i32 %2022 to float, !dbg !139
  %2024 = fcmp ogt float %2020, %2023, !dbg !140
  %2025 = fcmp uno float %2020, 0.000000e+00, !dbg !133
  %2026 = or i1 %2024, %2025, !dbg !141
  %2027 = select i1 %2026, float %2020, float %2023, !dbg !142
  %2028 = bitcast float %2027 to i32, !dbg !139
  %2029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2028, i32 2, i32 31), !dbg !139
  %2030 = bitcast i32 %2029 to float, !dbg !139
  %2031 = fcmp ogt float %2027, %2030, !dbg !140
  %2032 = fcmp uno float %2027, 0.000000e+00, !dbg !133
  %2033 = or i1 %2031, %2032, !dbg !141
  %2034 = select i1 %2033, float %2027, float %2030, !dbg !142
  %2035 = bitcast float %2034 to i32, !dbg !139
  %2036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2035, i32 1, i32 31), !dbg !139
  %2037 = bitcast i32 %2036 to float, !dbg !139
  %2038 = fcmp ogt float %2034, %2037, !dbg !140
  %2039 = fcmp uno float %2034, 0.000000e+00, !dbg !133
  %2040 = or i1 %2038, %2039, !dbg !141
  %2041 = extractelement <16 x float> %1563, i64 4, !dbg !139
  %2042 = bitcast float %2041 to i32, !dbg !139
  %2043 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2042, i32 16, i32 31), !dbg !139
  %2044 = bitcast i32 %2043 to float, !dbg !139
  %2045 = fcmp ogt float %2041, %2044, !dbg !140
  %2046 = extractelement <16 x i1> %1596, i64 4, !dbg !141
  %2047 = or i1 %2046, %2045, !dbg !141
  %2048 = select i1 %2047, float %2041, float %2044, !dbg !142
  %2049 = bitcast float %2048 to i32, !dbg !139
  %2050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2049, i32 8, i32 31), !dbg !139
  %2051 = bitcast i32 %2050 to float, !dbg !139
  %2052 = fcmp ogt float %2048, %2051, !dbg !140
  %2053 = fcmp uno float %2048, 0.000000e+00, !dbg !133
  %2054 = or i1 %2052, %2053, !dbg !141
  %2055 = select i1 %2054, float %2048, float %2051, !dbg !142
  %2056 = bitcast float %2055 to i32, !dbg !139
  %2057 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2056, i32 4, i32 31), !dbg !139
  %2058 = bitcast i32 %2057 to float, !dbg !139
  %2059 = fcmp ogt float %2055, %2058, !dbg !140
  %2060 = fcmp uno float %2055, 0.000000e+00, !dbg !133
  %2061 = or i1 %2059, %2060, !dbg !141
  %2062 = select i1 %2061, float %2055, float %2058, !dbg !142
  %2063 = bitcast float %2062 to i32, !dbg !139
  %2064 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2063, i32 2, i32 31), !dbg !139
  %2065 = bitcast i32 %2064 to float, !dbg !139
  %2066 = fcmp ogt float %2062, %2065, !dbg !140
  %2067 = fcmp uno float %2062, 0.000000e+00, !dbg !133
  %2068 = or i1 %2066, %2067, !dbg !141
  %2069 = select i1 %2068, float %2062, float %2065, !dbg !142
  %2070 = bitcast float %2069 to i32, !dbg !139
  %2071 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2070, i32 1, i32 31), !dbg !139
  %2072 = bitcast i32 %2071 to float, !dbg !139
  %2073 = fcmp ogt float %2069, %2072, !dbg !140
  %2074 = fcmp uno float %2069, 0.000000e+00, !dbg !133
  %2075 = or i1 %2073, %2074, !dbg !141
  %2076 = extractelement <16 x float> %1563, i64 3, !dbg !139
  %2077 = bitcast float %2076 to i32, !dbg !139
  %2078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2077, i32 16, i32 31), !dbg !139
  %2079 = bitcast i32 %2078 to float, !dbg !139
  %2080 = fcmp ogt float %2076, %2079, !dbg !140
  %2081 = extractelement <16 x i1> %1596, i64 3, !dbg !141
  %2082 = or i1 %2081, %2080, !dbg !141
  %2083 = select i1 %2082, float %2076, float %2079, !dbg !142
  %2084 = bitcast float %2083 to i32, !dbg !139
  %2085 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2084, i32 8, i32 31), !dbg !139
  %2086 = bitcast i32 %2085 to float, !dbg !139
  %2087 = fcmp ogt float %2083, %2086, !dbg !140
  %2088 = fcmp uno float %2083, 0.000000e+00, !dbg !133
  %2089 = or i1 %2087, %2088, !dbg !141
  %2090 = select i1 %2089, float %2083, float %2086, !dbg !142
  %2091 = bitcast float %2090 to i32, !dbg !139
  %2092 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2091, i32 4, i32 31), !dbg !139
  %2093 = bitcast i32 %2092 to float, !dbg !139
  %2094 = fcmp ogt float %2090, %2093, !dbg !140
  %2095 = fcmp uno float %2090, 0.000000e+00, !dbg !133
  %2096 = or i1 %2094, %2095, !dbg !141
  %2097 = select i1 %2096, float %2090, float %2093, !dbg !142
  %2098 = bitcast float %2097 to i32, !dbg !139
  %2099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2098, i32 2, i32 31), !dbg !139
  %2100 = bitcast i32 %2099 to float, !dbg !139
  %2101 = fcmp ogt float %2097, %2100, !dbg !140
  %2102 = fcmp uno float %2097, 0.000000e+00, !dbg !133
  %2103 = or i1 %2101, %2102, !dbg !141
  %2104 = select i1 %2103, float %2097, float %2100, !dbg !142
  %2105 = bitcast float %2104 to i32, !dbg !139
  %2106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2105, i32 1, i32 31), !dbg !139
  %2107 = bitcast i32 %2106 to float, !dbg !139
  %2108 = fcmp ogt float %2104, %2107, !dbg !140
  %2109 = fcmp uno float %2104, 0.000000e+00, !dbg !133
  %2110 = or i1 %2108, %2109, !dbg !141
  %2111 = extractelement <16 x float> %1563, i64 2, !dbg !139
  %2112 = bitcast float %2111 to i32, !dbg !139
  %2113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2112, i32 16, i32 31), !dbg !139
  %2114 = bitcast i32 %2113 to float, !dbg !139
  %2115 = fcmp ogt float %2111, %2114, !dbg !140
  %2116 = extractelement <16 x i1> %1596, i64 2, !dbg !141
  %2117 = or i1 %2116, %2115, !dbg !141
  %2118 = select i1 %2117, float %2111, float %2114, !dbg !142
  %2119 = bitcast float %2118 to i32, !dbg !139
  %2120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2119, i32 8, i32 31), !dbg !139
  %2121 = bitcast i32 %2120 to float, !dbg !139
  %2122 = fcmp ogt float %2118, %2121, !dbg !140
  %2123 = fcmp uno float %2118, 0.000000e+00, !dbg !133
  %2124 = or i1 %2122, %2123, !dbg !141
  %2125 = select i1 %2124, float %2118, float %2121, !dbg !142
  %2126 = bitcast float %2125 to i32, !dbg !139
  %2127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2126, i32 4, i32 31), !dbg !139
  %2128 = bitcast i32 %2127 to float, !dbg !139
  %2129 = fcmp ogt float %2125, %2128, !dbg !140
  %2130 = fcmp uno float %2125, 0.000000e+00, !dbg !133
  %2131 = or i1 %2129, %2130, !dbg !141
  %2132 = select i1 %2131, float %2125, float %2128, !dbg !142
  %2133 = bitcast float %2132 to i32, !dbg !139
  %2134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2133, i32 2, i32 31), !dbg !139
  %2135 = bitcast i32 %2134 to float, !dbg !139
  %2136 = fcmp ogt float %2132, %2135, !dbg !140
  %2137 = fcmp uno float %2132, 0.000000e+00, !dbg !133
  %2138 = or i1 %2136, %2137, !dbg !141
  %2139 = select i1 %2138, float %2132, float %2135, !dbg !142
  %2140 = bitcast float %2139 to i32, !dbg !139
  %2141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2140, i32 1, i32 31), !dbg !139
  %2142 = bitcast i32 %2141 to float, !dbg !139
  %2143 = fcmp ogt float %2139, %2142, !dbg !140
  %2144 = fcmp uno float %2139, 0.000000e+00, !dbg !133
  %2145 = or i1 %2143, %2144, !dbg !141
  %2146 = extractelement <16 x float> %1563, i64 1, !dbg !139
  %2147 = bitcast float %2146 to i32, !dbg !139
  %2148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2147, i32 16, i32 31), !dbg !139
  %2149 = bitcast i32 %2148 to float, !dbg !139
  %2150 = fcmp ogt float %2146, %2149, !dbg !140
  %2151 = extractelement <16 x i1> %1596, i64 1, !dbg !141
  %2152 = or i1 %2151, %2150, !dbg !141
  %2153 = select i1 %2152, float %2146, float %2149, !dbg !142
  %2154 = bitcast float %2153 to i32, !dbg !139
  %2155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2154, i32 8, i32 31), !dbg !139
  %2156 = bitcast i32 %2155 to float, !dbg !139
  %2157 = fcmp ogt float %2153, %2156, !dbg !140
  %2158 = fcmp uno float %2153, 0.000000e+00, !dbg !133
  %2159 = or i1 %2157, %2158, !dbg !141
  %2160 = select i1 %2159, float %2153, float %2156, !dbg !142
  %2161 = bitcast float %2160 to i32, !dbg !139
  %2162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2161, i32 4, i32 31), !dbg !139
  %2163 = bitcast i32 %2162 to float, !dbg !139
  %2164 = fcmp ogt float %2160, %2163, !dbg !140
  %2165 = fcmp uno float %2160, 0.000000e+00, !dbg !133
  %2166 = or i1 %2164, %2165, !dbg !141
  %2167 = select i1 %2166, float %2160, float %2163, !dbg !142
  %2168 = bitcast float %2167 to i32, !dbg !139
  %2169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2168, i32 2, i32 31), !dbg !139
  %2170 = bitcast i32 %2169 to float, !dbg !139
  %2171 = fcmp ogt float %2167, %2170, !dbg !140
  %2172 = fcmp uno float %2167, 0.000000e+00, !dbg !133
  %2173 = or i1 %2171, %2172, !dbg !141
  %2174 = select i1 %2173, float %2167, float %2170, !dbg !142
  %2175 = bitcast float %2174 to i32, !dbg !139
  %2176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2175, i32 1, i32 31), !dbg !139
  %2177 = bitcast i32 %2176 to float, !dbg !139
  %2178 = fcmp ogt float %2174, %2177, !dbg !140
  %2179 = fcmp uno float %2174, 0.000000e+00, !dbg !133
  %2180 = or i1 %2178, %2179, !dbg !141
  %2181 = extractelement <16 x float> %1563, i64 0, !dbg !139
  %2182 = bitcast float %2181 to i32, !dbg !139
  %2183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2182, i32 16, i32 31), !dbg !139
  %2184 = bitcast i32 %2183 to float, !dbg !139
  %2185 = fcmp ogt float %2181, %2184, !dbg !140
  %2186 = extractelement <16 x i1> %1596, i64 0, !dbg !141
  %2187 = or i1 %2186, %2185, !dbg !141
  %2188 = select i1 %2187, float %2181, float %2184, !dbg !142
  %2189 = bitcast float %2188 to i32, !dbg !139
  %2190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2189, i32 8, i32 31), !dbg !139
  %2191 = bitcast i32 %2190 to float, !dbg !139
  %2192 = fcmp ogt float %2188, %2191, !dbg !140
  %2193 = fcmp uno float %2188, 0.000000e+00, !dbg !133
  %2194 = or i1 %2192, %2193, !dbg !141
  %2195 = select i1 %2194, float %2188, float %2191, !dbg !142
  %2196 = bitcast float %2195 to i32, !dbg !139
  %2197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2196, i32 4, i32 31), !dbg !139
  %2198 = bitcast i32 %2197 to float, !dbg !139
  %2199 = fcmp ogt float %2195, %2198, !dbg !140
  %2200 = fcmp uno float %2195, 0.000000e+00, !dbg !133
  %2201 = or i1 %2199, %2200, !dbg !141
  %2202 = select i1 %2201, float %2195, float %2198, !dbg !142
  %2203 = bitcast float %2202 to i32, !dbg !139
  %2204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2203, i32 2, i32 31), !dbg !139
  %2205 = bitcast i32 %2204 to float, !dbg !139
  %2206 = fcmp ogt float %2202, %2205, !dbg !140
  %2207 = fcmp uno float %2202, 0.000000e+00, !dbg !133
  %2208 = or i1 %2206, %2207, !dbg !141
  %2209 = select i1 %2208, float %2202, float %2205, !dbg !142
  %2210 = bitcast float %2209 to i32, !dbg !139
  %2211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2210, i32 1, i32 31), !dbg !139
  %2212 = bitcast i32 %2211 to float, !dbg !139
  %2213 = fcmp ogt float %2209, %2212, !dbg !140
  %2214 = fcmp uno float %2209, 0.000000e+00, !dbg !133
  %2215 = or i1 %2213, %2214, !dbg !141
  %2216 = select i1 %1970, i32 %1965, i32 %1966, !dbg !142
  %2217 = insertelement <1 x i32> poison, i32 %2216, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1234, <1 x i32> %2217, i1 %1233) #5, !dbg !139
  %2218 = select i1 %2005, i32 %2000, i32 %2001, !dbg !142
  %2219 = insertelement <1 x i32> poison, i32 %2218, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %2219, i1 %1233) #5, !dbg !139
  %2220 = select i1 %2040, i32 %2035, i32 %2036, !dbg !142
  %2221 = insertelement <1 x i32> poison, i32 %2220, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1248, <1 x i32> %2221, i1 %1233) #5, !dbg !139
  %2222 = select i1 %2075, i32 %2070, i32 %2071, !dbg !142
  %2223 = insertelement <1 x i32> poison, i32 %2222, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1255, <1 x i32> %2223, i1 %1233) #5, !dbg !139
  %2224 = select i1 %2110, i32 %2105, i32 %2106, !dbg !142
  %2225 = insertelement <1 x i32> poison, i32 %2224, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1262, <1 x i32> %2225, i1 %1233) #5, !dbg !139
  %2226 = select i1 %2145, i32 %2140, i32 %2141, !dbg !142
  %2227 = insertelement <1 x i32> poison, i32 %2226, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1269, <1 x i32> %2227, i1 %1233) #5, !dbg !139
  %2228 = select i1 %2180, i32 %2175, i32 %2176, !dbg !142
  %2229 = insertelement <1 x i32> poison, i32 %2228, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1276, <1 x i32> %2229, i1 %1233) #5, !dbg !139
  %2230 = select i1 %2215, i32 %2210, i32 %2211, !dbg !142
  %2231 = insertelement <1 x i32> poison, i32 %2230, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1283, <1 x i32> %2231, i1 %1233) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %2232 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1290, i1 %1289) #5, !dbg !139
  %2233 = bitcast i32 %2232 to float, !dbg !139
  %2234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2232, i32 8, i32 31), !dbg !139
  %2235 = bitcast i32 %2234 to float, !dbg !139
  %2236 = fcmp ogt float %2233, %2235, !dbg !140
  %2237 = fcmp uno float %2233, 0.000000e+00, !dbg !133
  %2238 = or i1 %2237, %2236, !dbg !141
  %2239 = select i1 %2238, float %2233, float %2235, !dbg !142
  %2240 = bitcast float %2239 to i32, !dbg !139
  %2241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2240, i32 4, i32 31), !dbg !139
  %2242 = bitcast i32 %2241 to float, !dbg !139
  %2243 = fcmp ogt float %2239, %2242, !dbg !140
  %2244 = fcmp uno float %2239, 0.000000e+00, !dbg !133
  %2245 = or i1 %2243, %2244, !dbg !141
  %2246 = select i1 %2245, float %2239, float %2242, !dbg !142
  %2247 = bitcast float %2246 to i32, !dbg !139
  %2248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2247, i32 2, i32 31), !dbg !139
  %2249 = bitcast i32 %2248 to float, !dbg !139
  %2250 = fcmp ogt float %2246, %2249, !dbg !140
  %2251 = fcmp uno float %2246, 0.000000e+00, !dbg !133
  %2252 = or i1 %2250, %2251, !dbg !141
  %2253 = select i1 %2252, float %2246, float %2249, !dbg !142
  %2254 = bitcast float %2253 to i32, !dbg !139
  %2255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2254, i32 1, i32 31), !dbg !139
  %2256 = bitcast i32 %2255 to float, !dbg !139
  %2257 = fcmp ogt float %2253, %2256, !dbg !140
  %2258 = fcmp uno float %2253, 0.000000e+00, !dbg !133
  %2259 = or i1 %2257, %2258, !dbg !141
  %2260 = select i1 %2259, i32 %2254, i32 %2255, !dbg !142
  %2261 = insertelement <1 x i32> poison, i32 %2260, i64 0, !dbg !139
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1290, <1 x i32> %2261, i1 %1382) #5, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %2262 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !139
  %2263 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !139
  %2264 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !139
  %2265 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 192), align 16, !dbg !139
  %2266 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !139
  %2267 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 320), align 16, !dbg !139
  %2268 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !139
  %2269 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 448), align 16, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2270 = bitcast float %2262 to i32, !dbg !143
  %2271 = bitcast float %2263 to i32, !dbg !143
  %2272 = bitcast float %2264 to i32, !dbg !143
  %2273 = bitcast float %2265 to i32, !dbg !143
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %2270, i32 %2271, i32 %2272, i32 %2273, i1 true) #5, !dbg !143
  %2274 = bitcast float %2266 to i32, !dbg !143
  %2275 = bitcast float %2267 to i32, !dbg !143
  %2276 = bitcast float %2268 to i32, !dbg !143
  %2277 = bitcast float %2269 to i32, !dbg !143
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), i32 %2274, i32 %2275, i32 %2276, i32 %2277, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %2278 = load float, ptr addrspace(3) %1934, align 4, !dbg !143
  %2279 = sext i32 %382 to i64, !dbg !144
  %2280 = getelementptr bfloat, ptr addrspace(1) %10, i64 %2279, !dbg !144
  %2281 = fptrunc float %1935 to bfloat, !dbg !138
  %2282 = and i32 %19, 504, !dbg !138
  %2283 = icmp eq i32 %2282, 0, !dbg !138
  %2284 = bitcast bfloat %2281 to i16, !dbg !138
  %2285 = and i1 %2283, %383, !dbg !138
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2284, ptr addrspace(1) %2280, i1 %2285) #5, !dbg !138
  %2286 = getelementptr bfloat, ptr addrspace(1) %11, i64 %2279, !dbg !145
  %2287 = fptrunc float %2278 to bfloat, !dbg !143
  %2288 = bitcast bfloat %2287 to i16, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %2288, ptr addrspace(1) %2286, i1 %2285) #5, !dbg !143
  %2289 = insertelement <8 x float> poison, float %1925, i64 0, !dbg !146
  %2290 = insertelement <8 x float> %2289, float %1924, i64 1, !dbg !146
  %2291 = insertelement <8 x float> %2290, float %1923, i64 2, !dbg !146
  %2292 = insertelement <8 x float> %2291, float %1922, i64 3, !dbg !146
  %2293 = insertelement <8 x float> %2292, float %1921, i64 4, !dbg !146
  %2294 = insertelement <8 x float> %2293, float %1920, i64 5, !dbg !146
  %2295 = insertelement <8 x float> %2294, float %1919, i64 6, !dbg !146
  %2296 = insertelement <8 x float> %2295, float %1918, i64 7, !dbg !146
  %2297 = fcmp oge <8 x float> %2296, zeroinitializer, !dbg !146
  %2298 = select <8 x i1> %2297, <8 x float> zeroinitializer, <8 x float> %2296, !dbg !146
  %2299 = fsub <8 x float> zeroinitializer, %2298, !dbg !148
  %2300 = insertelement <8 x float> poison, float %2269, i64 0, !dbg !149
  %2301 = insertelement <8 x float> %2300, float %2268, i64 1, !dbg !149
  %2302 = insertelement <8 x float> %2301, float %2267, i64 2, !dbg !149
  %2303 = insertelement <8 x float> %2302, float %2266, i64 3, !dbg !149
  %2304 = insertelement <8 x float> %2303, float %2265, i64 4, !dbg !149
  %2305 = insertelement <8 x float> %2304, float %2264, i64 5, !dbg !149
  %2306 = insertelement <8 x float> %2305, float %2263, i64 6, !dbg !149
  %2307 = insertelement <8 x float> %2306, float %2262, i64 7, !dbg !149
  %2308 = fcmp ole <8 x float> %2307, zeroinitializer, !dbg !149
  %2309 = select <8 x i1> %2308, <8 x float> zeroinitializer, <8 x float> %2307, !dbg !149
  %2310 = fcmp ogt <8 x float> %2299, %2309, !dbg !151
  %2311 = fcmp uno <8 x float> %2299, zeroinitializer, !dbg !153
  %2312 = or <8 x i1> %2311, %2310, !dbg !154
  %2313 = select <8 x i1> %2312, <8 x float> %2299, <8 x float> %2309, !dbg !155
  %2314 = fmul <8 x float> %2313, splat (float 0x3F80204080000000), !dbg !156
  %2315 = fcmp ogt <8 x float> %2314, splat (float 0x3EE4F8B580000000), !dbg !157
  %2316 = extractelement <8 x float> %2314, i64 7, !dbg !159
  %2317 = fcmp uno float %2316, 0.000000e+00, !dbg !160
  %2318 = extractelement <8 x float> %2314, i64 6, !dbg !159
  %2319 = fcmp uno float %2318, 0.000000e+00, !dbg !160
  %2320 = extractelement <8 x float> %2314, i64 5, !dbg !159
  %2321 = fcmp uno float %2320, 0.000000e+00, !dbg !160
  %2322 = extractelement <8 x float> %2314, i64 4, !dbg !159
  %2323 = fcmp uno float %2322, 0.000000e+00, !dbg !160
  %2324 = extractelement <8 x float> %2314, i64 3, !dbg !159
  %2325 = fcmp uno float %2324, 0.000000e+00, !dbg !160
  %2326 = extractelement <8 x float> %2314, i64 2, !dbg !159
  %2327 = fcmp uno float %2326, 0.000000e+00, !dbg !160
  %2328 = extractelement <8 x float> %2314, i64 1, !dbg !159
  %2329 = fcmp uno float %2328, 0.000000e+00, !dbg !160
  %2330 = extractelement <8 x float> %2314, i64 0, !dbg !159
  %2331 = fcmp uno float %2330, 0.000000e+00, !dbg !160
  %2332 = extractelement <8 x i1> %2315, i64 7, !dbg !161
  %2333 = or i1 %2332, %2317, !dbg !161
  %2334 = extractelement <8 x i1> %2315, i64 6, !dbg !161
  %2335 = or i1 %2334, %2319, !dbg !161
  %2336 = extractelement <8 x i1> %2315, i64 5, !dbg !161
  %2337 = or i1 %2336, %2321, !dbg !161
  %2338 = extractelement <8 x i1> %2315, i64 4, !dbg !161
  %2339 = or i1 %2338, %2323, !dbg !161
  %2340 = extractelement <8 x i1> %2315, i64 3, !dbg !161
  %2341 = or i1 %2340, %2325, !dbg !161
  %2342 = extractelement <8 x i1> %2315, i64 2, !dbg !161
  %2343 = or i1 %2342, %2327, !dbg !161
  %2344 = extractelement <8 x i1> %2315, i64 1, !dbg !161
  %2345 = or i1 %2344, %2329, !dbg !161
  %2346 = extractelement <8 x i1> %2315, i64 0, !dbg !161
  %2347 = or i1 %2346, %2331, !dbg !161
  %2348 = select i1 %2333, float %2316, float 0x3EE4F8B580000000, !dbg !159
  %2349 = select i1 %2335, float %2318, float 0x3EE4F8B580000000, !dbg !159
  %2350 = select i1 %2337, float %2320, float 0x3EE4F8B580000000, !dbg !159
  %2351 = select i1 %2339, float %2322, float 0x3EE4F8B580000000, !dbg !159
  %2352 = select i1 %2341, float %2324, float 0x3EE4F8B580000000, !dbg !159
  %2353 = select i1 %2343, float %2326, float 0x3EE4F8B580000000, !dbg !159
  %2354 = select i1 %2345, float %2328, float 0x3EE4F8B580000000, !dbg !159
  %2355 = select i1 %2347, float %2330, float 0x3EE4F8B580000000, !dbg !159
  %2356 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2348), !dbg !162
  %2357 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2349), !dbg !162
  %2358 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2350), !dbg !162
  %2359 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2351), !dbg !162
  %2360 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2352), !dbg !162
  %2361 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2353), !dbg !162
  %2362 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2354), !dbg !162
  %2363 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %2355), !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %2364 = bitcast float %2356 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %2364, i1 true) #5, !dbg !163
  %2365 = bitcast float %2357 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %2365, i1 true) #5, !dbg !163
  %2366 = bitcast float %2358 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %2366, i1 true) #5, !dbg !163
  %2367 = bitcast float %2359 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %2367, i1 true) #5, !dbg !163
  %2368 = bitcast float %2360 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 32), <1 x i32> %2368, i1 true) #5, !dbg !163
  %2369 = bitcast float %2361 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 40), <1 x i32> %2369, i1 true) #5, !dbg !163
  %2370 = bitcast float %2362 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 48), <1 x i32> %2370, i1 true) #5, !dbg !163
  %2371 = bitcast float %2363 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 56), <1 x i32> %2371, i1 true) #5, !dbg !163
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %.idx = shl nuw nsw i32 %21, 3, !dbg !163
  %2372 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !163
  %2373 = load float, ptr addrspace(3) %2372, align 8, !dbg !163
  br label %2374, !dbg !164

2374:                                             ; preds = %1590, %2374
  %indvars.iv163 = phi i64 [ 0, %1590 ], [ %indvars.iv.next164, %2374 ]
  %2375 = trunc nuw nsw i64 %indvars.iv163 to i32, !dbg !165
  %2376 = add i32 %66, %2375, !dbg !165
  %2377 = sext i32 %2376 to i64, !dbg !166
  %2378 = getelementptr bfloat, ptr addrspace(1) %9, i64 %2377, !dbg !166
  %2379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %2378, i1 %24) #5, !dbg !167
  %2380 = extractvalue { i32, i32, i32, i32 } %2379, 0, !dbg !167
  %2381 = bitcast i32 %2380 to <2 x bfloat>, !dbg !167
  %2382 = extractvalue { i32, i32, i32, i32 } %2379, 1, !dbg !167
  %2383 = bitcast i32 %2382 to <2 x bfloat>, !dbg !167
  %2384 = extractvalue { i32, i32, i32, i32 } %2379, 2, !dbg !167
  %2385 = bitcast i32 %2384 to <2 x bfloat>, !dbg !167
  %2386 = extractvalue { i32, i32, i32, i32 } %2379, 3, !dbg !167
  %2387 = bitcast i32 %2386 to <2 x bfloat>, !dbg !167
  %2388 = extractelement <2 x bfloat> %2381, i64 0, !dbg !167
  %2389 = extractelement <2 x bfloat> %2381, i64 1, !dbg !167
  %2390 = extractelement <2 x bfloat> %2383, i64 0, !dbg !167
  %2391 = extractelement <2 x bfloat> %2383, i64 1, !dbg !167
  %2392 = extractelement <2 x bfloat> %2385, i64 0, !dbg !167
  %2393 = extractelement <2 x bfloat> %2385, i64 1, !dbg !167
  %2394 = extractelement <2 x bfloat> %2387, i64 0, !dbg !167
  %2395 = extractelement <2 x bfloat> %2387, i64 1, !dbg !167
  %2396 = fpext bfloat %2388 to float, !dbg !168
  %2397 = fpext bfloat %2389 to float, !dbg !168
  %2398 = fpext bfloat %2390 to float, !dbg !168
  %2399 = fpext bfloat %2391 to float, !dbg !168
  %2400 = fpext bfloat %2392 to float, !dbg !168
  %2401 = fpext bfloat %2393 to float, !dbg !168
  %2402 = fpext bfloat %2394 to float, !dbg !168
  %2403 = fpext bfloat %2395 to float, !dbg !168
  %2404 = fmul float %2373, %2396, !dbg !163
  %2405 = fmul float %2373, %2397, !dbg !163
  %2406 = fmul float %2373, %2398, !dbg !163
  %2407 = fmul float %2373, %2399, !dbg !163
  %2408 = fmul float %2373, %2400, !dbg !163
  %2409 = fmul float %2373, %2401, !dbg !163
  %2410 = fmul float %2373, %2402, !dbg !163
  %2411 = fmul float %2373, %2403, !dbg !163
  %2412 = tail call float @llvm.nvvm.round.f(float %2404) #5, !dbg !169
  %2413 = tail call float @llvm.nvvm.round.f(float %2405) #5, !dbg !169
  %2414 = tail call float @llvm.nvvm.round.f(float %2406) #5, !dbg !169
  %2415 = tail call float @llvm.nvvm.round.f(float %2407) #5, !dbg !169
  %2416 = tail call float @llvm.nvvm.round.f(float %2408) #5, !dbg !169
  %2417 = tail call float @llvm.nvvm.round.f(float %2409) #5, !dbg !169
  %2418 = tail call float @llvm.nvvm.round.f(float %2410) #5, !dbg !169
  %2419 = tail call float @llvm.nvvm.round.f(float %2411) #5, !dbg !169
  %2420 = insertelement <4 x float> poison, float %2412, i64 0, !dbg !170
  %2421 = insertelement <4 x float> %2420, float %2413, i64 1, !dbg !170
  %2422 = insertelement <4 x float> %2421, float %2414, i64 2, !dbg !170
  %2423 = insertelement <4 x float> %2422, float %2415, i64 3, !dbg !170
  %2424 = fcmp ogt <4 x float> %2423, splat (float -1.270000e+02), !dbg !170
  %2425 = fcmp uno <4 x float> %2423, zeroinitializer, !dbg !172
  %2426 = or <4 x i1> %2424, %2425, !dbg !173
  %2427 = select <4 x i1> %2426, <4 x float> %2423, <4 x float> splat (float -1.270000e+02), !dbg !174
  %2428 = fcmp olt <4 x float> %2427, splat (float 1.270000e+02), !dbg !175
  %2429 = fcmp uno <4 x float> %2427, zeroinitializer, !dbg !177
  %2430 = or <4 x i1> %2428, %2429, !dbg !178
  %2431 = fptosi <4 x float> %2427 to <4 x i8>, !dbg !179
  %2432 = select <4 x i1> %2430, <4 x i8> %2431, <4 x i8> splat (i8 127), !dbg !180
  %2433 = insertelement <4 x float> poison, float %2416, i64 0, !dbg !170
  %2434 = insertelement <4 x float> %2433, float %2417, i64 1, !dbg !170
  %2435 = insertelement <4 x float> %2434, float %2418, i64 2, !dbg !170
  %2436 = insertelement <4 x float> %2435, float %2419, i64 3, !dbg !170
  %2437 = fcmp ogt <4 x float> %2436, splat (float -1.270000e+02), !dbg !170
  %2438 = fcmp uno <4 x float> %2436, zeroinitializer, !dbg !172
  %2439 = or <4 x i1> %2437, %2438, !dbg !173
  %2440 = select <4 x i1> %2439, <4 x float> %2436, <4 x float> splat (float -1.270000e+02), !dbg !174
  %2441 = fcmp olt <4 x float> %2440, splat (float 1.270000e+02), !dbg !175
  %2442 = fcmp uno <4 x float> %2440, zeroinitializer, !dbg !177
  %2443 = or <4 x i1> %2441, %2442, !dbg !178
  %2444 = fptosi <4 x float> %2440 to <4 x i8>, !dbg !179
  %2445 = select <4 x i1> %2443, <4 x i8> %2444, <4 x i8> splat (i8 127), !dbg !180
  %2446 = getelementptr i8, ptr addrspace(1) %12, i64 %2377, !dbg !181
  %2447 = bitcast <4 x i8> %2432 to i32, !dbg !182
  %2448 = bitcast <4 x i8> %2445 to i32, !dbg !182
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %2447, i32 %2448, ptr addrspace(1) %2446, i1 %24) #5, !dbg !182
  %indvars.iv.next164 = add nuw nsw i64 %indvars.iv163, 512, !dbg !164
  %2449 = icmp samesign ult i64 %indvars.iv163, 2560, !dbg !164
  br i1 %2449, label %2374, label %2450, !dbg !164

2450:                                             ; preds = %2374
  ret void, !dbg !183
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cep3b5yvbssyf4zp4o5lpqj7q6ijv23mrinq2mw6xdsxcptlwmtk.py", directory: "/tmp/torchinductor_root/ep")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 35, column: 31, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 40, column: 113, scope: !6)
!45 = !DILocation(line: 41, column: 41, scope: !6)
!46 = !DILocation(line: 41, column: 34, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 43, column: 34, scope: !6)
!49 = !DILocation(line: 44, column: 35, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 41, column: 48, scope: !6)
!52 = !DILocation(line: 42, column: 48, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 43, column: 51, scope: !6)
!55 = !DILocation(line: 44, column: 42, scope: !6)
!56 = !DILocation(line: 44, column: 95, scope: !6)
!57 = !DILocation(line: 45, column: 42, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 60, column: 23, scope: !6)
!62 = !DILocation(line: 61, column: 24, scope: !6)
!63 = !DILocation(line: 62, column: 24, scope: !6)
!64 = !DILocation(line: 63, column: 23, scope: !6)
!65 = !DILocation(line: 64, column: 23, scope: !6)
!66 = !DILocation(line: 68, column: 66, scope: !6)
!67 = !DILocation(line: 203, column: 7, scope: !21, inlinedAt: !68)
!68 = !DILocation(line: 68, column: 55, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !68)
!70 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !68)
!71 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !68)
!72 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !68)
!73 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !68)
!74 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !68)
!75 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !68)
!76 = !DILocation(line: 71, column: 60, scope: !6)
!77 = !DILocation(line: 72, column: 68, scope: !6)
!78 = !DILocation(line: 73, column: 29, scope: !6)
!79 = !DILocation(line: 73, column: 53, scope: !6)
!80 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !81)
!81 = !DILocation(line: 74, column: 85, scope: !6)
!82 = !DILocation(line: 217, column: 21, scope: !83, inlinedAt: !81)
!83 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!84 = !DILocation(line: 218, column: 28, scope: !83, inlinedAt: !81)
!85 = !DILocation(line: 219, column: 39, scope: !83, inlinedAt: !81)
!86 = !DILocation(line: 219, column: 60, scope: !83, inlinedAt: !81)
!87 = !DILocation(line: 219, column: 49, scope: !83, inlinedAt: !81)
!88 = !DILocation(line: 221, column: 25, scope: !83, inlinedAt: !81)
!89 = !DILocation(line: 221, column: 17, scope: !83, inlinedAt: !81)
!90 = !DILocation(line: 222, column: 15, scope: !83, inlinedAt: !81)
!91 = !DILocation(line: 222, column: 30, scope: !83, inlinedAt: !81)
!92 = !DILocation(line: 222, column: 38, scope: !83, inlinedAt: !81)
!93 = !DILocation(line: 222, column: 49, scope: !83, inlinedAt: !81)
!94 = !DILocation(line: 222, column: 22, scope: !83, inlinedAt: !81)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 112, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 35, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 90, column: 35, scope: !6)
!111 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !112)
!112 = !DILocation(line: 111, column: 47, scope: !6)
!113 = !DILocation(line: 86, column: 115, scope: !6)
!114 = !DILocation(line: 87, column: 50, scope: !6)
!115 = !DILocation(line: 88, column: 50, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 89, column: 49, scope: !6)
!118 = !DILocation(line: 90, column: 49, scope: !6)
!119 = !DILocation(line: 90, column: 102, scope: !6)
!120 = !DILocation(line: 101, column: 24, scope: !6)
!121 = !DILocation(line: 103, column: 24, scope: !6)
!122 = !DILocation(line: 104, column: 24, scope: !6)
!123 = !DILocation(line: 106, column: 24, scope: !6)
!124 = !DILocation(line: 107, column: 24, scope: !6)
!125 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !112)
!126 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !112)
!127 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !112)
!128 = !DILocation(line: 113, column: 29, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !131)
!131 = !DILocation(line: 114, column: 40, scope: !6)
!132 = !DILocation(line: 94, column: 15, scope: !83, inlinedAt: !131)
!133 = !DILocation(line: 104, column: 21, scope: !83, inlinedAt: !134)
!134 = !DILocation(line: 115, column: 40, scope: !6)
!135 = !DILocation(line: 96, column: 16, scope: !83, inlinedAt: !131)
!136 = !DILocation(line: 97, column: 29, scope: !83, inlinedAt: !131)
!137 = !DILocation(line: 96, column: 21, scope: !83, inlinedAt: !131)
!138 = !DILocation(line: 116, column: 37, scope: !6)
!139 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !134)
!140 = !DILocation(line: 102, column: 15, scope: !83, inlinedAt: !134)
!141 = !DILocation(line: 104, column: 16, scope: !83, inlinedAt: !134)
!142 = !DILocation(line: 105, column: 29, scope: !83, inlinedAt: !134)
!143 = !DILocation(line: 117, column: 37, scope: !6)
!144 = !DILocation(line: 116, column: 25, scope: !6)
!145 = !DILocation(line: 117, column: 25, scope: !6)
!146 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !147)
!147 = !DILocation(line: 126, column: 46, scope: !6)
!148 = !DILocation(line: 127, column: 17, scope: !6)
!149 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !150)
!150 = !DILocation(line: 128, column: 46, scope: !6)
!151 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !152)
!152 = !DILocation(line: 129, column: 46, scope: !6)
!153 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !152)
!154 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !152)
!155 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !152)
!156 = !DILocation(line: 131, column: 24, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !158)
!158 = !DILocation(line: 134, column: 46, scope: !6)
!159 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !158)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !158)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !158)
!162 = !DILocation(line: 137, column: 25, scope: !6)
!163 = !DILocation(line: 140, column: 24, scope: !6)
!164 = !DILocation(line: 118, column: 40, scope: !6)
!165 = !DILocation(line: 124, column: 43, scope: !6)
!166 = !DILocation(line: 124, column: 36, scope: !6)
!167 = !DILocation(line: 124, column: 53, scope: !6)
!168 = !DILocation(line: 124, column: 115, scope: !6)
!169 = !DILocation(line: 141, column: 36, scope: !6)
!170 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !171)
!171 = !DILocation(line: 144, column: 46, scope: !6)
!172 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !171)
!173 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !171)
!174 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !171)
!175 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !176)
!176 = !DILocation(line: 146, column: 46, scope: !6)
!177 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !176)
!178 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !176)
!179 = !DILocation(line: 148, column: 25, scope: !6)
!180 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !176)
!181 = !DILocation(line: 149, column: 29, scope: !6)
!182 = !DILocation(line: 149, column: 53, scope: !6)
!183 = !DILocation(line: 118, column: 4, scope: !6)
