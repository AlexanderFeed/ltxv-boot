; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mean_pow_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 6, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = lshr i32 %8, 3, !dbg !11
  %10 = and i32 %9, 63, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = shl i32 %8, 3, !dbg !13
  %13 = and i32 %12, 56, !dbg !13
  %14 = sdiv i32 %11, 24, !dbg !14
  %15 = mul i32 %14, 24, !dbg !15
  %.decomposed = sub i32 %11, %15, !dbg !15
  %16 = shl nsw i32 %.decomposed, 7, !dbg !16
  %17 = mul i32 %14, 9216, !dbg !17
  %18 = or disjoint i32 %16, %13
  %19 = add i32 %18, %17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !19
  %31 = or disjoint i32 %19, 64, !dbg !20
  %32 = sext i32 %31 to i64, !dbg !18
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !19
  %43 = fpext <2 x bfloat> %24 to <2 x float>, !dbg !21
  %44 = fmul <2 x float> %43, %43, !dbg !22
  %45 = fpext <2 x bfloat> %36 to <2 x float>, !dbg !21
  %46 = fmul <2 x float> %45, %45, !dbg !22
  %47 = fadd <2 x float> %44, %46, !dbg !23
  %48 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !21
  %49 = fmul <2 x float> %48, %48, !dbg !22
  %50 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !21
  %51 = fmul <2 x float> %50, %50, !dbg !22
  %52 = fadd <2 x float> %49, %51, !dbg !23
  %53 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !21
  %54 = fmul <2 x float> %53, %53, !dbg !22
  %55 = fpext <2 x bfloat> %40 to <2 x float>, !dbg !21
  %56 = fmul <2 x float> %55, %55, !dbg !22
  %57 = fadd <2 x float> %54, %56, !dbg !23
  %58 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !21
  %59 = fmul <2 x float> %58, %58, !dbg !22
  %60 = fpext <2 x bfloat> %42 to <2 x float>, !dbg !21
  %61 = fmul <2 x float> %60, %60, !dbg !22
  %62 = fadd <2 x float> %59, %61, !dbg !23
  %63 = and i32 %8, 63, !dbg !11
  %64 = or disjoint i32 %7, %63, !dbg !12
  %shift = shufflevector <2 x float> %47, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %65 = fadd <2 x float> %47, %shift, !dbg !24
  %66 = fadd <2 x float> %52, %65, !dbg !24
  %shift10 = shufflevector <2 x float> %52, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %67 = fadd <2 x float> %shift10, %66, !dbg !24
  %68 = fadd <2 x float> %57, %67, !dbg !24
  %shift11 = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %69 = fadd <2 x float> %shift11, %68, !dbg !24
  %70 = fadd <2 x float> %62, %69, !dbg !24
  %shift12 = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %71 = fadd <2 x float> %shift12, %70, !dbg !24
  %72 = extractelement <2 x float> %71, i64 0, !dbg !24
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !24
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !24
  %81 = bitcast float %80 to i32, !dbg !29
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = fadd float %80, %83, !dbg !24
  %85 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %86 = bitcast float %84 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %87 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63, !dbg !30
  %88 = load i32, ptr addrspace(3) %87, align 4, !dbg !30
  %89 = sext i32 %64 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !31
  %91 = and i32 %8, 448, !dbg !32
  %92 = icmp eq i32 %91, 0, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %90, i1 %92) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckavwgge4wo3d4gevf27syez73oho7yang6ck5clzpaesyo4cqfp.py", directory: "/tmp/torchinductor_root/ka")
!4 = !{ptr @triton_red_fused__to_copy_mean_pow_3, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_pow_3", linkageName: "triton_red_fused__to_copy_mean_pow_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 26, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 19, scope: !6)
!15 = !DILocation(line: 28, column: 19, scope: !6)
!16 = !DILocation(line: 38, column: 45, scope: !6)
!17 = !DILocation(line: 38, column: 55, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 60, scope: !6)
!20 = !DILocation(line: 38, column: 50, scope: !6)
!21 = !DILocation(line: 38, column: 114, scope: !6)
!22 = !DILocation(line: 40, column: 22, scope: !6)
!23 = !DILocation(line: 42, column: 23, scope: !6)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 44, column: 25, scope: !6)
!29 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 44, column: 28, scope: !6)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 45, column: 36, scope: !6)
!33 = !DILocation(line: 45, column: 4, scope: !6)
