; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, 4112, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 1, !dbg !11
  %14 = and i32 %13, 1022, !dbg !11
  %15 = mul i32 %9, 3072, !dbg !12
  %16 = mul i32 %9, 12288, !dbg !13
  %17 = add i32 %16, -3072
  %18 = insertelement <4 x i1> poison, i1 %10, i64 0, !dbg !14
  %19 = shufflevector <4 x i1> %18, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !14
  br label %20, !dbg !15

20:                                               ; preds = %8, %__nv_tanhf.exit59
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %__nv_tanhf.exit59 ]
  %21 = phi <4 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %8 ], [ %137, %__nv_tanhf.exit59 ]
  %22 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !16
  %23 = trunc i64 %indvars.iv to i32, !dbg !17
  %24 = or disjoint i32 %14, %23, !dbg !17
  %25 = add i32 %24, %15, !dbg !17
  %26 = sext i32 %25 to i64, !dbg !18
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = and i1 %10, %22, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 %28) #5, !dbg !20
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !20
  %31 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !21
  %32 = shufflevector <2 x float> %31, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !21
  %33 = icmp samesign ugt i64 %indvars.iv, 3071, !dbg !22
  %34 = add i32 %17, %24, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = and i1 %10, %33, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %37) #5, !dbg !26
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %41 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %42 = insertelement <2 x i32> %41, i32 %39, i64 1, !dbg !26
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !26
  %44 = fmul <2 x float> %43, splat (float 5.000000e-01), !dbg !27
  %45 = bitcast i32 %39 to float, !dbg !28
  %46 = fmul float %45, %45, !dbg !28
  %47 = bitcast i32 %40 to float, !dbg !28
  %48 = fmul float %47, %47, !dbg !28
  %49 = fmul float %46, %45, !dbg !29
  %50 = fmul float %48, %47, !dbg !29
  %51 = fmul float %49, 0x3FA6E4E260000000, !dbg !30
  %52 = fmul float %50, 0x3FA6E4E260000000, !dbg !30
  %53 = fadd float %51, %45, !dbg !31
  %54 = fadd float %52, %47, !dbg !31
  %55 = fmul float %53, 0x3FE9884540000000, !dbg !32
  %56 = fmul float %54, 0x3FE9884540000000, !dbg !32
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i22 = icmp eq i32 %57, 0, !dbg !33
  %58 = tail call float @llvm.nvvm.fabs.ftz.f(float %55) #5, !dbg !33
  %59 = tail call float @llvm.nvvm.fabs.f(float %55) #5, !dbg !33
  %.01.i23 = select i1 %.not.i22, float %59, float %58, !dbg !33
  %60 = fcmp ult float %.01.i23, 0x3FE3333340000000, !dbg !33
  br i1 %60, label %__internal_fmad.exit3.i29, label %__internal_fmad.exit1.i24, !dbg !33

__internal_fmad.exit1.i24:                        ; preds = %20
  %61 = fmul float %.01.i23, 0x4007154760000000, !dbg !33
  %62 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %61) #5, !dbg !33
  %63 = fadd float %62, 1.000000e+00, !dbg !33
  %64 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %63) #6, !dbg !33, !srcloc !34
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not6.i25 = icmp eq i32 %65, 0, !dbg !33
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %64, float -2.000000e+00, float 1.000000e+00) #5, !dbg !33
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %64, float -2.000000e+00, float 1.000000e+00) #5, !dbg !33
  %.03.i26 = select i1 %.not6.i25, float %67, float %66, !dbg !33
  %68 = fcmp oge float %.01.i23, 0x4022059680000000, !dbg !33
  %s.0.i27 = select i1 %68, float 1.000000e+00, float %.03.i26, !dbg !33
  %69 = bitcast float %s.0.i27 to i32, !dbg !33
  %70 = bitcast float %55 to i32, !dbg !33
  %71 = and i32 %70, -2147483648, !dbg !33
  %72 = or i32 %71, %69, !dbg !33
  %73 = bitcast i32 %72 to float, !dbg !33
  br label %__nv_tanhf.exit40, !dbg !33

__internal_fmad.exit3.i29:                        ; preds = %20
  %74 = fmul float %55, %55, !dbg !33
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not1.i30 = icmp eq i32 %75, 0, !dbg !33
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %74, float 0xBFAAC795C0000000) #5, !dbg !33
  %77 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %74, float 0xBFAAC795C0000000) #5, !dbg !33
  %.06.i31 = select i1 %.not1.i30, float %77, float %76, !dbg !33
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not2.i32 = icmp eq i32 %78, 0, !dbg !33
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i31, float %74, float 0x3FC10B2820000000) #5, !dbg !33
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i31, float %74, float 0x3FC10B2820000000) #5, !dbg !33
  %.05.i33 = select i1 %.not2.i32, float %80, float %79, !dbg !33
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not3.i34 = icmp eq i32 %81, 0, !dbg !33
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i33, float %74, float 0xBFD5553DA0000000) #5, !dbg !33
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i33, float %74, float 0xBFD5553DA0000000) #5, !dbg !33
  %.0.i35 = select i1 %.not3.i34, float %83, float %82, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not4.i36 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i35, float %74, float 0.000000e+00) #5, !dbg !33
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i35, float %74, float 0.000000e+00) #5, !dbg !33
  %.04.i37 = select i1 %.not4.i36, float %86, float %85, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not5.i38 = icmp eq i32 %87, 0, !dbg !33
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i37, float %55, float %55) #5, !dbg !33
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i37, float %55, float %55) #5, !dbg !33
  %.02.i39 = select i1 %.not5.i38, float %89, float %88, !dbg !33
  br label %__nv_tanhf.exit40, !dbg !33

__nv_tanhf.exit40:                                ; preds = %__internal_fmad.exit1.i24, %__internal_fmad.exit3.i29
  %s.1.i28 = phi float [ %73, %__internal_fmad.exit1.i24 ], [ %.02.i39, %__internal_fmad.exit3.i29 ], !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i41 = icmp eq i32 %90, 0, !dbg !33
  %91 = tail call float @llvm.nvvm.fabs.ftz.f(float %56) #5, !dbg !33
  %92 = tail call float @llvm.nvvm.fabs.f(float %56) #5, !dbg !33
  %.01.i42 = select i1 %.not.i41, float %92, float %91, !dbg !33
  %93 = fcmp ult float %.01.i42, 0x3FE3333340000000, !dbg !33
  br i1 %93, label %__internal_fmad.exit3.i48, label %__internal_fmad.exit1.i43, !dbg !33

__internal_fmad.exit1.i43:                        ; preds = %__nv_tanhf.exit40
  %94 = fmul float %.01.i42, 0x4007154760000000, !dbg !33
  %95 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %94) #5, !dbg !33
  %96 = fadd float %95, 1.000000e+00, !dbg !33
  %97 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %96) #6, !dbg !33, !srcloc !34
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not6.i44 = icmp eq i32 %98, 0, !dbg !33
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %97, float -2.000000e+00, float 1.000000e+00) #5, !dbg !33
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %97, float -2.000000e+00, float 1.000000e+00) #5, !dbg !33
  %.03.i45 = select i1 %.not6.i44, float %100, float %99, !dbg !33
  %101 = fcmp oge float %.01.i42, 0x4022059680000000, !dbg !33
  %s.0.i46 = select i1 %101, float 1.000000e+00, float %.03.i45, !dbg !33
  %102 = bitcast float %s.0.i46 to i32, !dbg !33
  %103 = bitcast float %56 to i32, !dbg !33
  %104 = and i32 %103, -2147483648, !dbg !33
  %105 = or i32 %104, %102, !dbg !33
  %106 = bitcast i32 %105 to float, !dbg !33
  br label %__nv_tanhf.exit59, !dbg !33

__internal_fmad.exit3.i48:                        ; preds = %__nv_tanhf.exit40
  %107 = fmul float %56, %56, !dbg !33
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not1.i49 = icmp eq i32 %108, 0, !dbg !33
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #5, !dbg !33
  %110 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #5, !dbg !33
  %.06.i50 = select i1 %.not1.i49, float %110, float %109, !dbg !33
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not2.i51 = icmp eq i32 %111, 0, !dbg !33
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i50, float %107, float 0x3FC10B2820000000) #5, !dbg !33
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i50, float %107, float 0x3FC10B2820000000) #5, !dbg !33
  %.05.i52 = select i1 %.not2.i51, float %113, float %112, !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not3.i53 = icmp eq i32 %114, 0, !dbg !33
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i52, float %107, float 0xBFD5553DA0000000) #5, !dbg !33
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i52, float %107, float 0xBFD5553DA0000000) #5, !dbg !33
  %.0.i54 = select i1 %.not3.i53, float %116, float %115, !dbg !33
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not4.i55 = icmp eq i32 %117, 0, !dbg !33
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i54, float %107, float 0.000000e+00) #5, !dbg !33
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i54, float %107, float 0.000000e+00) #5, !dbg !33
  %.04.i56 = select i1 %.not4.i55, float %119, float %118, !dbg !33
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not5.i57 = icmp eq i32 %120, 0, !dbg !33
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i56, float %56, float %56) #5, !dbg !33
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i56, float %56, float %56) #5, !dbg !33
  %.02.i58 = select i1 %.not5.i57, float %122, float %121, !dbg !33
  br label %__nv_tanhf.exit59, !dbg !33

__nv_tanhf.exit59:                                ; preds = %__internal_fmad.exit1.i43, %__internal_fmad.exit3.i48
  %s.1.i47 = phi float [ %106, %__internal_fmad.exit1.i43 ], [ %.02.i58, %__internal_fmad.exit3.i48 ], !dbg !33
  %123 = insertelement <2 x float> poison, float %s.1.i47, i64 0, !dbg !35
  %124 = insertelement <2 x float> %123, float %s.1.i28, i64 1, !dbg !35
  %125 = fadd <2 x float> %124, splat (float 1.000000e+00), !dbg !35
  %126 = fcmp uno <4 x float> %21, zeroinitializer, !dbg !36
  %127 = fmul <2 x float> %44, %125, !dbg !40
  %128 = insertelement <2 x i1> poison, i1 %22, i64 0, !dbg !41
  %129 = shufflevector <2 x i1> %128, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !41
  %130 = select <2 x i1> %129, <2 x float> %32, <2 x float> %127, !dbg !41
  %131 = shufflevector <2 x float> %130, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %132 = fcmp ogt <4 x float> %21, %131, !dbg !42
  %133 = fcmp olt <4 x float> %21, %131, !dbg !42
  %134 = shufflevector <4 x i1> %132, <4 x i1> %133, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !42
  %135 = or <4 x i1> %126, %134, !dbg !43
  %136 = select <4 x i1> %135, <4 x float> %21, <4 x float> %131, !dbg !44
  %137 = select <4 x i1> %19, <4 x float> %136, <4 x float> %21, !dbg !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !15
  %138 = icmp samesign ult i64 %indvars.iv, 14336, !dbg !15
  br i1 %138, label %20, label %139, !dbg !15

139:                                              ; preds = %__nv_tanhf.exit59
  %140 = lshr i32 %11, 5, !dbg !11
  %141 = extractelement <4 x float> %137, i64 2, !dbg !45
  %142 = extractelement <4 x float> %137, i64 3, !dbg !45
  %143 = fcmp olt float %142, %141, !dbg !45
  %144 = fcmp uno float %142, 0.000000e+00, !dbg !48
  %145 = or i1 %143, %144, !dbg !49
  %146 = select i1 %145, float %142, float %141, !dbg !50
  %147 = bitcast float %146 to i32, !dbg !51
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !51
  %149 = bitcast i32 %148 to float, !dbg !51
  %150 = fcmp olt float %146, %149, !dbg !45
  %151 = fcmp uno float %146, 0.000000e+00, !dbg !48
  %152 = or i1 %151, %150, !dbg !49
  %153 = select i1 %152, float %146, float %149, !dbg !50
  %154 = bitcast float %153 to i32, !dbg !51
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !51
  %156 = bitcast i32 %155 to float, !dbg !51
  %157 = fcmp olt float %153, %156, !dbg !45
  %158 = fcmp uno float %153, 0.000000e+00, !dbg !48
  %159 = or i1 %157, %158, !dbg !49
  %160 = select i1 %159, float %153, float %156, !dbg !50
  %161 = bitcast float %160 to i32, !dbg !51
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !51
  %163 = bitcast i32 %162 to float, !dbg !51
  %164 = fcmp olt float %160, %163, !dbg !45
  %165 = fcmp uno float %160, 0.000000e+00, !dbg !48
  %166 = or i1 %164, %165, !dbg !49
  %167 = select i1 %166, float %160, float %163, !dbg !50
  %168 = bitcast float %167 to i32, !dbg !51
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !51
  %170 = bitcast i32 %169 to float, !dbg !51
  %171 = fcmp olt float %167, %170, !dbg !45
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !48
  %173 = or i1 %171, %172, !dbg !49
  %174 = select i1 %173, float %167, float %170, !dbg !50
  %175 = bitcast float %174 to i32, !dbg !51
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !51
  %177 = bitcast i32 %176 to float, !dbg !51
  %178 = fcmp olt float %174, %177, !dbg !45
  %179 = fcmp uno float %174, 0.000000e+00, !dbg !48
  %180 = or i1 %178, %179, !dbg !49
  %181 = and i32 %140, 15, !dbg !51
  %182 = icmp eq i32 %12, 0, !dbg !51
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !51
  %184 = select i1 %180, i32 %175, i32 %176, !dbg !50
  %185 = insertelement <1 x i32> poison, i32 %184, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %185, i1 %182) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %186 = icmp slt i32 %11, 16, !dbg !51
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !51
  %188 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %186) #5, !dbg !51
  %189 = bitcast i32 %188 to float, !dbg !51
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !51
  %191 = bitcast i32 %190 to float, !dbg !51
  %192 = fcmp olt float %189, %191, !dbg !45
  %193 = fcmp uno float %189, 0.000000e+00, !dbg !48
  %194 = or i1 %193, %192, !dbg !49
  %195 = select i1 %194, float %189, float %191, !dbg !50
  %196 = bitcast float %195 to i32, !dbg !51
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !51
  %198 = bitcast i32 %197 to float, !dbg !51
  %199 = fcmp olt float %195, %198, !dbg !45
  %200 = fcmp uno float %195, 0.000000e+00, !dbg !48
  %201 = or i1 %199, %200, !dbg !49
  %202 = select i1 %201, float %195, float %198, !dbg !50
  %203 = bitcast float %202 to i32, !dbg !51
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !51
  %205 = bitcast i32 %204 to float, !dbg !51
  %206 = fcmp olt float %202, %205, !dbg !45
  %207 = fcmp uno float %202, 0.000000e+00, !dbg !48
  %208 = or i1 %206, %207, !dbg !49
  %209 = select i1 %208, float %202, float %205, !dbg !50
  %210 = bitcast float %209 to i32, !dbg !51
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !51
  %212 = bitcast i32 %211 to float, !dbg !51
  %213 = fcmp olt float %209, %212, !dbg !45
  %214 = fcmp uno float %209, 0.000000e+00, !dbg !48
  %215 = or i1 %213, %214, !dbg !49
  %216 = and i32 %11, 15, !dbg !51
  %217 = icmp eq i32 %216, 0, !dbg !51
  %218 = and i1 %186, %217, !dbg !51
  %219 = select i1 %215, i32 %210, i32 %211, !dbg !50
  %220 = insertelement <1 x i32> poison, i32 %219, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %220, i1 %218) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %221 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %222 = extractelement <4 x float> %137, i64 0, !dbg !54
  %223 = extractelement <4 x float> %137, i64 1, !dbg !54
  %224 = fcmp ogt float %223, %222, !dbg !54
  %225 = fcmp uno float %223, 0.000000e+00, !dbg !55
  %226 = or i1 %224, %225, !dbg !56
  %227 = select i1 %226, float %223, float %222, !dbg !57
  %228 = bitcast float %227 to i32, !dbg !52
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 16, i32 31), !dbg !52
  %230 = bitcast i32 %229 to float, !dbg !52
  %231 = fcmp ogt float %227, %230, !dbg !54
  %232 = fcmp uno float %227, 0.000000e+00, !dbg !55
  %233 = or i1 %232, %231, !dbg !56
  %234 = select i1 %233, float %227, float %230, !dbg !57
  %235 = bitcast float %234 to i32, !dbg !52
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !52
  %237 = bitcast i32 %236 to float, !dbg !52
  %238 = fcmp ogt float %234, %237, !dbg !54
  %239 = fcmp uno float %234, 0.000000e+00, !dbg !55
  %240 = or i1 %238, %239, !dbg !56
  %241 = select i1 %240, float %234, float %237, !dbg !57
  %242 = bitcast float %241 to i32, !dbg !52
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !52
  %244 = bitcast i32 %243 to float, !dbg !52
  %245 = fcmp ogt float %241, %244, !dbg !54
  %246 = fcmp uno float %241, 0.000000e+00, !dbg !55
  %247 = or i1 %245, %246, !dbg !56
  %248 = select i1 %247, float %241, float %244, !dbg !57
  %249 = bitcast float %248 to i32, !dbg !52
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !52
  %251 = bitcast i32 %250 to float, !dbg !52
  %252 = fcmp ogt float %248, %251, !dbg !54
  %253 = fcmp uno float %248, 0.000000e+00, !dbg !55
  %254 = or i1 %252, %253, !dbg !56
  %255 = select i1 %254, float %248, float %251, !dbg !57
  %256 = bitcast float %255 to i32, !dbg !52
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !52
  %258 = bitcast i32 %257 to float, !dbg !52
  %259 = fcmp ogt float %255, %258, !dbg !54
  %260 = fcmp uno float %255, 0.000000e+00, !dbg !55
  %261 = or i1 %259, %260, !dbg !56
  %262 = select i1 %261, i32 %256, i32 %257, !dbg !57
  %263 = insertelement <1 x i32> poison, i32 %262, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %263, i1 %182) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %187, i1 %186) #5, !dbg !52
  %265 = bitcast i32 %264 to float, !dbg !52
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !52
  %267 = bitcast i32 %266 to float, !dbg !52
  %268 = fcmp ogt float %265, %267, !dbg !54
  %269 = fcmp uno float %265, 0.000000e+00, !dbg !55
  %270 = or i1 %269, %268, !dbg !56
  %271 = select i1 %270, float %265, float %267, !dbg !57
  %272 = bitcast float %271 to i32, !dbg !52
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !52
  %274 = bitcast i32 %273 to float, !dbg !52
  %275 = fcmp ogt float %271, %274, !dbg !54
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !55
  %277 = or i1 %275, %276, !dbg !56
  %278 = select i1 %277, float %271, float %274, !dbg !57
  %279 = bitcast float %278 to i32, !dbg !52
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !52
  %281 = bitcast i32 %280 to float, !dbg !52
  %282 = fcmp ogt float %278, %281, !dbg !54
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !55
  %284 = or i1 %282, %283, !dbg !56
  %285 = select i1 %284, float %278, float %281, !dbg !57
  %286 = bitcast float %285 to i32, !dbg !52
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !52
  %288 = bitcast i32 %287 to float, !dbg !52
  %289 = fcmp ogt float %285, %288, !dbg !54
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !55
  %291 = or i1 %289, %290, !dbg !56
  %292 = select i1 %291, i32 %286, i32 %287, !dbg !57
  %293 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %293, i1 %218) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %294 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %295 = sext i32 %9 to i64, !dbg !58
  %296 = getelementptr bfloat, ptr addrspace(1) %2, i64 %295, !dbg !58
  %297 = fptrunc float %221 to bfloat, !dbg !59
  %298 = and i32 %11, 511, !dbg !59
  %299 = icmp eq i32 %298, 0, !dbg !59
  %300 = bitcast bfloat %297 to i16, !dbg !59
  %301 = and i1 %10, %299, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %300, ptr addrspace(1) %296, i1 %301) #5, !dbg !59
  %302 = getelementptr bfloat, ptr addrspace(1) %3, i64 %295, !dbg !60
  %303 = fptrunc float %294 to bfloat, !dbg !61
  %304 = bitcast bfloat %303 to i16, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %304, ptr addrspace(1) %302, i1 %301) #5, !dbg !61
  %.inv = fcmp oge float %221, 0.000000e+00, !dbg !62
  %305 = select i1 %.inv, float 0.000000e+00, float %221, !dbg !62
  %306 = fsub float 0.000000e+00, %305, !dbg !64
  %.inv2 = fcmp ole float %294, 0.000000e+00, !dbg !65
  %307 = select i1 %.inv2, float 0.000000e+00, float %294, !dbg !65
  %308 = fcmp ogt float %306, %307, !dbg !67
  %309 = fcmp uno float %306, 0.000000e+00, !dbg !69
  %310 = or i1 %309, %308, !dbg !70
  %311 = select i1 %310, float %306, float %307, !dbg !71
  %312 = fmul float %311, 0x3F80204080000000, !dbg !72
  %313 = fcmp ogt float %312, 0x3EE4F8B580000000, !dbg !73
  %314 = fcmp uno float %312, 0.000000e+00, !dbg !75
  %315 = or i1 %313, %314, !dbg !76
  %316 = select i1 %315, float %312, float 0x3EE4F8B580000000, !dbg !77
  %317 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %316), !dbg !78
  %318 = mul i32 %9, 15360, !dbg !79
  br label %319, !dbg !80

319:                                              ; preds = %139, %__nv_tanhf.exit21
  %indvars.iv64 = phi i64 [ 0, %139 ], [ %indvars.iv.next65, %__nv_tanhf.exit21 ]
  %320 = icmp samesign ult i64 %indvars.iv64, 3072, !dbg !81
  %321 = trunc i64 %indvars.iv64 to i32, !dbg !82
  %322 = or disjoint i32 %14, %321, !dbg !82
  %323 = add i32 %322, %15, !dbg !82
  %324 = sext i32 %323 to i64, !dbg !83
  %325 = getelementptr bfloat, ptr addrspace(1) %0, i64 %324, !dbg !83
  %326 = and i1 %10, %320, !dbg !84
  %327 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %325, i1 %326) #5, !dbg !85
  %328 = bitcast i32 %327 to <2 x bfloat>, !dbg !85
  %329 = extractelement <2 x bfloat> %328, i64 0, !dbg !85
  %330 = extractelement <2 x bfloat> %328, i64 1, !dbg !85
  %331 = fpext bfloat %329 to float, !dbg !86
  %332 = fpext bfloat %330 to float, !dbg !86
  %333 = icmp samesign ugt i64 %indvars.iv64, 3071, !dbg !87
  %334 = add i32 %17, %322, !dbg !88
  %335 = sext i32 %334 to i64, !dbg !89
  %336 = getelementptr float, ptr addrspace(1) %1, i64 %335, !dbg !89
  %337 = and i1 %10, %333, !dbg !90
  %338 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %336, i1 %337) #5, !dbg !91
  %339 = extractvalue { i32, i32 } %338, 0, !dbg !91
  %340 = extractvalue { i32, i32 } %338, 1, !dbg !91
  %341 = bitcast i32 %339 to float, !dbg !91
  %342 = bitcast i32 %340 to float, !dbg !91
  %343 = fmul float %341, 5.000000e-01, !dbg !92
  %344 = fmul float %342, 5.000000e-01, !dbg !92
  %345 = fmul float %341, %341, !dbg !93
  %346 = fmul float %342, %342, !dbg !93
  %347 = fmul float %345, %341, !dbg !94
  %348 = fmul float %346, %342, !dbg !94
  %349 = fmul float %347, 0x3FA6E4E260000000, !dbg !95
  %350 = fmul float %348, 0x3FA6E4E260000000, !dbg !95
  %351 = fadd float %349, %341, !dbg !96
  %352 = fadd float %350, %342, !dbg !96
  %353 = fmul float %351, 0x3FE9884540000000, !dbg !97
  %354 = fmul float %352, 0x3FE9884540000000, !dbg !97
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i = icmp eq i32 %355, 0, !dbg !98
  %356 = tail call float @llvm.nvvm.fabs.ftz.f(float %353) #5, !dbg !98
  %357 = tail call float @llvm.nvvm.fabs.f(float %353) #5, !dbg !98
  %.01.i = select i1 %.not.i, float %357, float %356, !dbg !98
  %358 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !98
  br i1 %358, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !98

__internal_fmad.exit1.i:                          ; preds = %319
  %359 = fmul float %.01.i, 0x4007154760000000, !dbg !98
  %360 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %359) #5, !dbg !98
  %361 = fadd float %360, 1.000000e+00, !dbg !98
  %362 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %361) #6, !dbg !98, !srcloc !34
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not6.i = icmp eq i32 %363, 0, !dbg !98
  %364 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %362, float -2.000000e+00, float 1.000000e+00) #5, !dbg !98
  %365 = tail call float @llvm.nvvm.fma.rn.f(float %362, float -2.000000e+00, float 1.000000e+00) #5, !dbg !98
  %.03.i = select i1 %.not6.i, float %365, float %364, !dbg !98
  %366 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !98
  %s.0.i = select i1 %366, float 1.000000e+00, float %.03.i, !dbg !98
  %367 = bitcast float %s.0.i to i32, !dbg !98
  %368 = bitcast float %353 to i32, !dbg !98
  %369 = and i32 %368, -2147483648, !dbg !98
  %370 = or i32 %369, %367, !dbg !98
  %371 = bitcast i32 %370 to float, !dbg !98
  br label %__nv_tanhf.exit, !dbg !98

__internal_fmad.exit3.i:                          ; preds = %319
  %372 = fmul float %353, %353, !dbg !98
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not1.i = icmp eq i32 %373, 0, !dbg !98
  %374 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %372, float 0xBFAAC795C0000000) #5, !dbg !98
  %375 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %372, float 0xBFAAC795C0000000) #5, !dbg !98
  %.06.i = select i1 %.not1.i, float %375, float %374, !dbg !98
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not2.i = icmp eq i32 %376, 0, !dbg !98
  %377 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %372, float 0x3FC10B2820000000) #5, !dbg !98
  %378 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %372, float 0x3FC10B2820000000) #5, !dbg !98
  %.05.i = select i1 %.not2.i, float %378, float %377, !dbg !98
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not3.i = icmp eq i32 %379, 0, !dbg !98
  %380 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %372, float 0xBFD5553DA0000000) #5, !dbg !98
  %381 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %372, float 0xBFD5553DA0000000) #5, !dbg !98
  %.0.i = select i1 %.not3.i, float %381, float %380, !dbg !98
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not4.i = icmp eq i32 %382, 0, !dbg !98
  %383 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %372, float 0.000000e+00) #5, !dbg !98
  %384 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %372, float 0.000000e+00) #5, !dbg !98
  %.04.i = select i1 %.not4.i, float %384, float %383, !dbg !98
  %385 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not5.i = icmp eq i32 %385, 0, !dbg !98
  %386 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %353, float %353) #5, !dbg !98
  %387 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %353, float %353) #5, !dbg !98
  %.02.i = select i1 %.not5.i, float %387, float %386, !dbg !98
  br label %__nv_tanhf.exit, !dbg !98

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %371, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !98
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i3 = icmp eq i32 %388, 0, !dbg !98
  %389 = tail call float @llvm.nvvm.fabs.ftz.f(float %354) #5, !dbg !98
  %390 = tail call float @llvm.nvvm.fabs.f(float %354) #5, !dbg !98
  %.01.i4 = select i1 %.not.i3, float %390, float %389, !dbg !98
  %391 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !98
  br i1 %391, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !98

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %392 = fmul float %.01.i4, 0x4007154760000000, !dbg !98
  %393 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %392) #5, !dbg !98
  %394 = fadd float %393, 1.000000e+00, !dbg !98
  %395 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %394) #6, !dbg !98, !srcloc !34
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not6.i6 = icmp eq i32 %396, 0, !dbg !98
  %397 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %395, float -2.000000e+00, float 1.000000e+00) #5, !dbg !98
  %398 = tail call float @llvm.nvvm.fma.rn.f(float %395, float -2.000000e+00, float 1.000000e+00) #5, !dbg !98
  %.03.i7 = select i1 %.not6.i6, float %398, float %397, !dbg !98
  %399 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !98
  %s.0.i8 = select i1 %399, float 1.000000e+00, float %.03.i7, !dbg !98
  %400 = bitcast float %s.0.i8 to i32, !dbg !98
  %401 = bitcast float %354 to i32, !dbg !98
  %402 = and i32 %401, -2147483648, !dbg !98
  %403 = or i32 %402, %400, !dbg !98
  %404 = bitcast i32 %403 to float, !dbg !98
  br label %__nv_tanhf.exit21, !dbg !98

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %405 = fmul float %354, %354, !dbg !98
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not1.i11 = icmp eq i32 %406, 0, !dbg !98
  %407 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %405, float 0xBFAAC795C0000000) #5, !dbg !98
  %408 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %405, float 0xBFAAC795C0000000) #5, !dbg !98
  %.06.i12 = select i1 %.not1.i11, float %408, float %407, !dbg !98
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not2.i13 = icmp eq i32 %409, 0, !dbg !98
  %410 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %405, float 0x3FC10B2820000000) #5, !dbg !98
  %411 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %405, float 0x3FC10B2820000000) #5, !dbg !98
  %.05.i14 = select i1 %.not2.i13, float %411, float %410, !dbg !98
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not3.i15 = icmp eq i32 %412, 0, !dbg !98
  %413 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %405, float 0xBFD5553DA0000000) #5, !dbg !98
  %414 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %405, float 0xBFD5553DA0000000) #5, !dbg !98
  %.0.i16 = select i1 %.not3.i15, float %414, float %413, !dbg !98
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not4.i17 = icmp eq i32 %415, 0, !dbg !98
  %416 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %405, float 0.000000e+00) #5, !dbg !98
  %417 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %405, float 0.000000e+00) #5, !dbg !98
  %.04.i18 = select i1 %.not4.i17, float %417, float %416, !dbg !98
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not5.i19 = icmp eq i32 %418, 0, !dbg !98
  %419 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %354, float %354) #5, !dbg !98
  %420 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %354, float %354) #5, !dbg !98
  %.02.i20 = select i1 %.not5.i19, float %420, float %419, !dbg !98
  br label %__nv_tanhf.exit21, !dbg !98

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %404, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !98
  %421 = fadd float %s.1.i, 1.000000e+00, !dbg !99
  %422 = fadd float %s.1.i9, 1.000000e+00, !dbg !99
  %423 = fmul float %343, %421, !dbg !100
  %424 = fmul float %344, %422, !dbg !100
  %425 = select i1 %320, float %331, float %423, !dbg !101
  %426 = select i1 %320, float %332, float %424, !dbg !101
  %427 = fmul float %317, %425, !dbg !102
  %428 = fmul float %317, %426, !dbg !102
  %429 = tail call float @llvm.nvvm.round.f(float %427) #5, !dbg !103
  %430 = tail call float @llvm.nvvm.round.f(float %428) #5, !dbg !103
  %431 = insertelement <2 x float> poison, float %429, i64 0, !dbg !104
  %432 = insertelement <2 x float> %431, float %430, i64 1, !dbg !104
  %433 = fcmp ogt <2 x float> %432, splat (float -1.270000e+02), !dbg !104
  %434 = fcmp uno <2 x float> %432, zeroinitializer, !dbg !106
  %435 = or <2 x i1> %433, %434, !dbg !107
  %436 = select <2 x i1> %435, <2 x float> %432, <2 x float> splat (float -1.270000e+02), !dbg !108
  %437 = fcmp olt <2 x float> %436, splat (float 1.270000e+02), !dbg !109
  %438 = fcmp uno <2 x float> %436, zeroinitializer, !dbg !111
  %439 = or <2 x i1> %437, %438, !dbg !112
  %440 = fptosi <2 x float> %436 to <2 x i8>, !dbg !113
  %441 = select <2 x i1> %439, <2 x i8> %440, <2 x i8> splat (i8 127), !dbg !114
  %442 = add i32 %322, %318, !dbg !115
  %443 = sext i32 %442 to i64, !dbg !116
  %444 = getelementptr i8, ptr addrspace(1) %4, i64 %443, !dbg !116
  %445 = bitcast <2 x i8> %441 to i16, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %445, ptr addrspace(1) %444, i1 %10) #5, !dbg !117
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1024, !dbg !80
  %446 = icmp samesign ult i64 %indvars.iv64, 14336, !dbg !80
  br i1 %446, label %319, label %447, !dbg !80

447:                                              ; preds = %__nv_tanhf.exit21
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctv732aq76geyr7p3gclneox6hl2lefctbk4uxv56pawut6us5co.py", directory: "/tmp/torchinductor_root/tv")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", linkageName: "triton_red_fused__to_copy_add_amax_amin_cat_clamp_mul_reciprocal_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 42, column: 39, scope: !6)
!13 = !DILocation(line: 46, column: 40, scope: !6)
!14 = !DILocation(line: 68, column: 50, scope: !6)
!15 = !DILocation(line: 31, column: 40, scope: !6)
!16 = !DILocation(line: 41, column: 22, scope: !6)
!17 = !DILocation(line: 42, column: 45, scope: !6)
!18 = !DILocation(line: 42, column: 34, scope: !6)
!19 = !DILocation(line: 42, column: 71, scope: !6)
!20 = !DILocation(line: 42, column: 53, scope: !6)
!21 = !DILocation(line: 42, column: 121, scope: !6)
!22 = !DILocation(line: 43, column: 23, scope: !6)
!23 = !DILocation(line: 46, column: 46, scope: !6)
!24 = !DILocation(line: 46, column: 34, scope: !6)
!25 = !DILocation(line: 46, column: 82, scope: !6)
!26 = !DILocation(line: 46, column: 64, scope: !6)
!27 = !DILocation(line: 48, column: 23, scope: !6)
!28 = !DILocation(line: 49, column: 23, scope: !6)
!29 = !DILocation(line: 50, column: 24, scope: !6)
!30 = !DILocation(line: 52, column: 24, scope: !6)
!31 = !DILocation(line: 53, column: 23, scope: !6)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 56, column: 31, scope: !6)
!34 = !{i32 21046}
!35 = !DILocation(line: 58, column: 24, scope: !6)
!36 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 67, column: 47, scope: !6)
!40 = !DILocation(line: 59, column: 24, scope: !6)
!41 = !DILocation(line: 63, column: 37, scope: !6)
!42 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !39)
!44 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !39)
!45 = !DILocation(line: 94, column: 15, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!47 = !DILocation(line: 69, column: 40, scope: !6)
!48 = !DILocation(line: 96, column: 21, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 96, column: 16, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 97, column: 29, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 110, column: 29, scope: !37, inlinedAt: !47)
!52 = !DILocation(line: 115, column: 29, scope: !37, inlinedAt: !53)
!53 = !DILocation(line: 70, column: 40, scope: !6)
!54 = !DILocation(line: 102, column: 15, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 104, column: 21, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 104, column: 16, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 105, column: 29, scope: !46, inlinedAt: !53)
!58 = !DILocation(line: 71, column: 25, scope: !6)
!59 = !DILocation(line: 71, column: 37, scope: !6)
!60 = !DILocation(line: 72, column: 25, scope: !6)
!61 = !DILocation(line: 72, column: 37, scope: !6)
!62 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !63)
!63 = !DILocation(line: 107, column: 46, scope: !6)
!64 = !DILocation(line: 108, column: 17, scope: !6)
!65 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !66)
!66 = !DILocation(line: 109, column: 46, scope: !6)
!67 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !68)
!68 = !DILocation(line: 110, column: 46, scope: !6)
!69 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !68)
!70 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !68)
!71 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !68)
!72 = !DILocation(line: 112, column: 24, scope: !6)
!73 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !74)
!74 = !DILocation(line: 115, column: 46, scope: !6)
!75 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !74)
!76 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !74)
!77 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 25, scope: !6)
!79 = !DILocation(line: 130, column: 42, scope: !6)
!80 = !DILocation(line: 73, column: 40, scope: !6)
!81 = !DILocation(line: 83, column: 24, scope: !6)
!82 = !DILocation(line: 84, column: 46, scope: !6)
!83 = !DILocation(line: 84, column: 35, scope: !6)
!84 = !DILocation(line: 84, column: 72, scope: !6)
!85 = !DILocation(line: 84, column: 54, scope: !6)
!86 = !DILocation(line: 84, column: 123, scope: !6)
!87 = !DILocation(line: 85, column: 25, scope: !6)
!88 = !DILocation(line: 88, column: 47, scope: !6)
!89 = !DILocation(line: 88, column: 35, scope: !6)
!90 = !DILocation(line: 88, column: 83, scope: !6)
!91 = !DILocation(line: 88, column: 65, scope: !6)
!92 = !DILocation(line: 90, column: 24, scope: !6)
!93 = !DILocation(line: 91, column: 24, scope: !6)
!94 = !DILocation(line: 92, column: 24, scope: !6)
!95 = !DILocation(line: 94, column: 24, scope: !6)
!96 = !DILocation(line: 95, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 24, scope: !6)
!98 = !DILocation(line: 98, column: 31, scope: !6)
!99 = !DILocation(line: 100, column: 24, scope: !6)
!100 = !DILocation(line: 101, column: 24, scope: !6)
!101 = !DILocation(line: 105, column: 39, scope: !6)
!102 = !DILocation(line: 121, column: 24, scope: !6)
!103 = !DILocation(line: 122, column: 36, scope: !6)
!104 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !105)
!105 = !DILocation(line: 125, column: 46, scope: !6)
!106 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !105)
!107 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !105)
!108 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !105)
!109 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !110)
!110 = !DILocation(line: 127, column: 46, scope: !6)
!111 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !110)
!112 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !110)
!113 = !DILocation(line: 129, column: 25, scope: !6)
!114 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !110)
!115 = !DILocation(line: 130, column: 36, scope: !6)
!116 = !DILocation(line: 130, column: 29, scope: !6)
!117 = !DILocation(line: 130, column: 54, scope: !6)
!118 = !DILocation(line: 73, column: 4, scope: !6)
