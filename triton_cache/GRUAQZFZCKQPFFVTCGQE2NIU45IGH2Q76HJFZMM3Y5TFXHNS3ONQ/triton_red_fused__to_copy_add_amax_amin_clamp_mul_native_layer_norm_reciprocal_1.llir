; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17, ptr addrspace(1) readnone captures(none) %18) local_unnamed_addr !dbg !6 {
._crit_edge:
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %20 = shl i32 %19, 2, !dbg !10
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit3 = lshr i32 %21, 8, !dbg !11
  %22 = and i32 %.lobit3, 3, !dbg !11
  %23 = and i32 %21, 31, !dbg !11
  %24 = or disjoint i32 %22, %20, !dbg !12
  %25 = icmp slt i32 %24, 4112, !dbg !13
  %26 = icmp slt i32 %20, 4112, !dbg !13
  %27 = shl i32 %21, 3, !dbg !14
  %28 = and i32 %27, 2040, !dbg !14
  %29 = shl i32 %21, 1, !dbg !14
  %30 = mul i32 %24, 3072, !dbg !15
  %31 = zext nneg i32 %28 to i64, !dbg !16
  %32 = add i32 %30, %28, !dbg !17
  %33 = sext i32 %32 to i64, !dbg !18
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %25) #5, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !19
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !19
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !19
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !19
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !19
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !19
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !19
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !19
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !19
  %48 = extractelement <2 x bfloat> %41, i64 0, !dbg !19
  %49 = extractelement <2 x bfloat> %41, i64 1, !dbg !19
  %50 = extractelement <2 x bfloat> %43, i64 0, !dbg !19
  %51 = extractelement <2 x bfloat> %43, i64 1, !dbg !19
  %52 = fpext bfloat %44 to float, !dbg !20
  %53 = fpext bfloat %45 to float, !dbg !20
  %54 = fpext bfloat %46 to float, !dbg !20
  %55 = fpext bfloat %47 to float, !dbg !20
  %56 = fpext bfloat %48 to float, !dbg !20
  %57 = fpext bfloat %49 to float, !dbg !20
  %58 = fpext bfloat %50 to float, !dbg !20
  %59 = fpext bfloat %51 to float, !dbg !20
  %60 = select i1 %25, float %52, float 0.000000e+00, !dbg !21
  %61 = select i1 %25, float %53, float 0.000000e+00, !dbg !21
  %62 = select i1 %25, float %54, float 0.000000e+00, !dbg !21
  %63 = select i1 %25, float %55, float 0.000000e+00, !dbg !21
  %64 = select i1 %25, float %56, float 0.000000e+00, !dbg !21
  %65 = select i1 %25, float %57, float 0.000000e+00, !dbg !21
  %66 = select i1 %25, float %58, float 0.000000e+00, !dbg !21
  %67 = select i1 %25, float %59, float 0.000000e+00, !dbg !21
  %68 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %69 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %70 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %71 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %72 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %73 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %74 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %75 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %76 = or disjoint i64 %31, 2048, !dbg !23
  %77 = icmp samesign ult i64 %76, 3072, !dbg !24
  %78 = trunc nuw nsw i64 %76 to i32, !dbg !17
  %79 = add i32 %30, %78, !dbg !17
  %80 = sext i32 %79 to i64, !dbg !18
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !18
  %82 = and i1 %25, %77, !dbg !25
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %81, i1 %82) #5, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !19
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !19
  %86 = extractelement <2 x bfloat> %85, i64 1, !dbg !19
  %87 = fpext bfloat %86 to float, !dbg !20
  %88 = extractelement <2 x bfloat> %85, i64 0, !dbg !19
  %89 = fpext bfloat %88 to float, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !19
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !19
  %92 = extractelement <2 x bfloat> %91, i64 1, !dbg !19
  %93 = fpext bfloat %92 to float, !dbg !20
  %94 = extractelement <2 x bfloat> %91, i64 0, !dbg !19
  %95 = fpext bfloat %94 to float, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !19
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !19
  %98 = extractelement <2 x bfloat> %97, i64 1, !dbg !19
  %99 = fpext bfloat %98 to float, !dbg !20
  %100 = extractelement <2 x bfloat> %97, i64 0, !dbg !19
  %101 = fpext bfloat %100 to float, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !19
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !19
  %104 = extractelement <2 x bfloat> %103, i64 1, !dbg !19
  %105 = fpext bfloat %104 to float, !dbg !20
  %106 = extractelement <2 x bfloat> %103, i64 0, !dbg !19
  %107 = fpext bfloat %106 to float, !dbg !20
  %108 = fsub float %107, %60, !dbg !26
  %109 = fsub float %105, %61, !dbg !26
  %110 = fsub float %101, %62, !dbg !26
  %111 = fsub float %99, %63, !dbg !26
  %112 = fsub float %95, %64, !dbg !26
  %113 = fsub float %93, %65, !dbg !26
  %114 = fsub float %89, %66, !dbg !26
  %115 = fsub float %87, %67, !dbg !26
  %116 = fadd float %68, 1.000000e+00, !dbg !30
  %117 = fadd float %69, 1.000000e+00, !dbg !30
  %118 = fadd float %70, 1.000000e+00, !dbg !30
  %119 = fadd float %71, 1.000000e+00, !dbg !30
  %120 = fadd float %72, 1.000000e+00, !dbg !30
  %121 = fadd float %73, 1.000000e+00, !dbg !30
  %122 = fadd float %74, 1.000000e+00, !dbg !30
  %123 = fadd float %75, 1.000000e+00, !dbg !30
  %124 = tail call float @llvm.nvvm.div.full(float %108, float %116), !dbg !31
  %125 = tail call float @llvm.nvvm.div.full(float %109, float %117), !dbg !31
  %126 = tail call float @llvm.nvvm.div.full(float %110, float %118), !dbg !31
  %127 = tail call float @llvm.nvvm.div.full(float %111, float %119), !dbg !31
  %128 = tail call float @llvm.nvvm.div.full(float %112, float %120), !dbg !31
  %129 = tail call float @llvm.nvvm.div.full(float %113, float %121), !dbg !31
  %130 = tail call float @llvm.nvvm.div.full(float %114, float %122), !dbg !31
  %131 = tail call float @llvm.nvvm.div.full(float %115, float %123), !dbg !31
  %132 = fadd float %60, %124, !dbg !32
  %133 = fadd float %61, %125, !dbg !32
  %134 = fadd float %62, %126, !dbg !32
  %135 = fadd float %63, %127, !dbg !32
  %136 = fadd float %64, %128, !dbg !32
  %137 = fadd float %65, %129, !dbg !32
  %138 = fadd float %66, %130, !dbg !32
  %139 = fadd float %67, %131, !dbg !32
  %140 = fsub float %107, %132, !dbg !33
  %141 = fsub float %105, %133, !dbg !33
  %142 = fsub float %101, %134, !dbg !33
  %143 = fsub float %99, %135, !dbg !33
  %144 = fsub float %95, %136, !dbg !33
  %145 = fsub float %93, %137, !dbg !33
  %146 = fsub float %89, %138, !dbg !33
  %147 = fsub float %87, %139, !dbg !33
  %148 = fmul float %108, %140, !dbg !34
  %149 = fmul float %109, %141, !dbg !34
  %150 = fmul float %110, %142, !dbg !34
  %151 = fmul float %111, %143, !dbg !34
  %152 = fmul float %112, %144, !dbg !34
  %153 = fmul float %113, %145, !dbg !34
  %154 = fmul float %114, %146, !dbg !34
  %155 = fmul float %115, %147, !dbg !34
  %156 = fadd float %148, 0.000000e+00, !dbg !35
  %157 = fadd float %149, 0.000000e+00, !dbg !35
  %158 = fadd float %150, 0.000000e+00, !dbg !35
  %159 = fadd float %151, 0.000000e+00, !dbg !35
  %160 = fadd float %152, 0.000000e+00, !dbg !35
  %161 = fadd float %153, 0.000000e+00, !dbg !35
  %162 = fadd float %154, 0.000000e+00, !dbg !35
  %163 = fadd float %155, 0.000000e+00, !dbg !35
  %164 = fadd float %156, %157, !dbg !36
  %165 = select i1 %82, float %132, float %60, !dbg !21
  %166 = select i1 %82, float %133, float %61, !dbg !21
  %167 = select i1 %82, float %134, float %62, !dbg !21
  %168 = select i1 %82, float %135, float %63, !dbg !21
  %169 = select i1 %82, float %136, float %64, !dbg !21
  %170 = select i1 %82, float %137, float %65, !dbg !21
  %171 = select i1 %82, float %138, float %66, !dbg !21
  %172 = select i1 %82, float %139, float %67, !dbg !21
  %173 = select i1 %82, float %158, float 0.000000e+00, !dbg !37
  %174 = select i1 %82, float %159, float 0.000000e+00, !dbg !37
  %175 = select i1 %82, float %160, float 0.000000e+00, !dbg !37
  %176 = select i1 %82, float %161, float 0.000000e+00, !dbg !37
  %177 = select i1 %82, float %162, float 0.000000e+00, !dbg !37
  %178 = select i1 %82, float %163, float 0.000000e+00, !dbg !37
  %179 = select i1 %82, float %116, float %68, !dbg !22
  %180 = select i1 %82, float %117, float %69, !dbg !22
  %181 = select i1 %82, float %118, float %70, !dbg !22
  %182 = select i1 %82, float %119, float %71, !dbg !22
  %183 = select i1 %82, float %120, float %72, !dbg !22
  %184 = select i1 %82, float %121, float %73, !dbg !22
  %185 = select i1 %82, float %122, float %74, !dbg !22
  %186 = select i1 %82, float %123, float %75, !dbg !22
  %187 = lshr i32 %21, 5, !dbg !11
  %188 = and i32 %21, 3, !dbg !11
  %189 = or disjoint i32 %20, %188, !dbg !12
  %190 = icmp slt i32 %189, 4112, !dbg !13
  %191 = and i32 %29, 2046, !dbg !14
  %192 = fsub float %166, %165, !dbg !38
  %193 = fadd float %179, %180, !dbg !41
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !42
  %195 = tail call float @llvm.nvvm.div.full(float %180, float %193), !dbg !43
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !44
  %197 = fmul float %192, %196, !dbg !45
  %198 = fadd float %165, %197, !dbg !46
  %199 = select i1 %82, float %164, float 0.000000e+00, !dbg !47
  %200 = fmul float %192, %192, !dbg !48
  %201 = fmul float %200, %179, !dbg !49
  %202 = fmul float %201, %196, !dbg !50
  %203 = fadd float %199, %202, !dbg !51
  %204 = fsub float %167, %198, !dbg !38
  %205 = fadd float %181, %193, !dbg !41
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !42
  %207 = tail call float @llvm.nvvm.div.full(float %181, float %205), !dbg !43
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !44
  %209 = fmul float %208, %204, !dbg !45
  %210 = fadd float %198, %209, !dbg !46
  %211 = fadd float %173, %203, !dbg !47
  %212 = fmul float %204, %204, !dbg !48
  %213 = fmul float %193, %212, !dbg !49
  %214 = fmul float %208, %213, !dbg !50
  %215 = fadd float %211, %214, !dbg !51
  %216 = fsub float %168, %210, !dbg !38
  %217 = fadd float %182, %205, !dbg !41
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !42
  %219 = tail call float @llvm.nvvm.div.full(float %182, float %217), !dbg !43
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !44
  %221 = fmul float %220, %216, !dbg !45
  %222 = fadd float %210, %221, !dbg !46
  %223 = fadd float %174, %215, !dbg !47
  %224 = fmul float %216, %216, !dbg !48
  %225 = fmul float %205, %224, !dbg !49
  %226 = fmul float %220, %225, !dbg !50
  %227 = fadd float %223, %226, !dbg !51
  %228 = fsub float %169, %222, !dbg !38
  %229 = fadd float %183, %217, !dbg !41
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !42
  %231 = tail call float @llvm.nvvm.div.full(float %183, float %229), !dbg !43
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !44
  %233 = fmul float %232, %228, !dbg !45
  %234 = fadd float %222, %233, !dbg !46
  %235 = fadd float %175, %227, !dbg !47
  %236 = fmul float %228, %228, !dbg !48
  %237 = fmul float %217, %236, !dbg !49
  %238 = fmul float %232, %237, !dbg !50
  %239 = fadd float %235, %238, !dbg !51
  %240 = fsub float %170, %234, !dbg !38
  %241 = fadd float %184, %229, !dbg !41
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !42
  %243 = tail call float @llvm.nvvm.div.full(float %184, float %241), !dbg !43
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !44
  %245 = fmul float %244, %240, !dbg !45
  %246 = fadd float %234, %245, !dbg !46
  %247 = fadd float %176, %239, !dbg !47
  %248 = fmul float %240, %240, !dbg !48
  %249 = fmul float %229, %248, !dbg !49
  %250 = fmul float %244, %249, !dbg !50
  %251 = fadd float %247, %250, !dbg !51
  %252 = fsub float %171, %246, !dbg !38
  %253 = fadd float %185, %241, !dbg !41
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !42
  %255 = tail call float @llvm.nvvm.div.full(float %185, float %253), !dbg !43
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !44
  %257 = fmul float %256, %252, !dbg !45
  %258 = fadd float %246, %257, !dbg !46
  %259 = fadd float %177, %251, !dbg !47
  %260 = fmul float %252, %252, !dbg !48
  %261 = fmul float %241, %260, !dbg !49
  %262 = fmul float %256, %261, !dbg !50
  %263 = fadd float %259, %262, !dbg !51
  %264 = fsub float %172, %258, !dbg !38
  %265 = fadd float %186, %253, !dbg !41
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !42
  %267 = tail call float @llvm.nvvm.div.full(float %186, float %265), !dbg !43
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !44
  %269 = fmul float %268, %264, !dbg !45
  %270 = fadd float %258, %269, !dbg !46
  %271 = fadd float %178, %263, !dbg !47
  %272 = fmul float %264, %264, !dbg !48
  %273 = fmul float %253, %272, !dbg !49
  %274 = fmul float %268, %273, !dbg !50
  %275 = fadd float %271, %274, !dbg !51
  %276 = bitcast float %270 to i32, !dbg !52
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !52
  %278 = bitcast i32 %277 to float, !dbg !52
  %279 = bitcast float %275 to i32, !dbg !52
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !52
  %281 = bitcast i32 %280 to float, !dbg !52
  %282 = bitcast float %265 to i32, !dbg !52
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 16, i32 31), !dbg !52
  %284 = bitcast i32 %283 to float, !dbg !52
  %285 = fsub float %278, %270, !dbg !38
  %286 = fadd float %265, %284, !dbg !41
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !42
  %288 = tail call float @llvm.nvvm.div.full(float %284, float %286), !dbg !43
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !44
  %290 = fmul float %289, %285, !dbg !45
  %291 = fadd float %270, %290, !dbg !46
  %292 = fadd float %275, %281, !dbg !47
  %293 = fmul float %285, %285, !dbg !48
  %294 = fmul float %265, %293, !dbg !49
  %295 = fmul float %289, %294, !dbg !50
  %296 = fadd float %292, %295, !dbg !51
  %297 = bitcast float %291 to i32, !dbg !52
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = bitcast float %296 to i32, !dbg !52
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !52
  %302 = bitcast i32 %301 to float, !dbg !52
  %303 = bitcast float %286 to i32, !dbg !52
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !52
  %305 = bitcast i32 %304 to float, !dbg !52
  %306 = fsub float %299, %291, !dbg !38
  %307 = fadd float %286, %305, !dbg !41
  %308 = fcmp oeq float %307, 0.000000e+00, !dbg !42
  %309 = tail call float @llvm.nvvm.div.full(float %305, float %307), !dbg !43
  %310 = select i1 %308, float 0.000000e+00, float %309, !dbg !44
  %311 = fmul float %310, %306, !dbg !45
  %312 = fadd float %291, %311, !dbg !46
  %313 = fadd float %296, %302, !dbg !47
  %314 = fmul float %306, %306, !dbg !48
  %315 = fmul float %286, %314, !dbg !49
  %316 = fmul float %310, %315, !dbg !50
  %317 = fadd float %313, %316, !dbg !51
  %318 = bitcast float %312 to i32, !dbg !52
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !52
  %320 = bitcast i32 %319 to float, !dbg !52
  %321 = bitcast float %317 to i32, !dbg !52
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !52
  %323 = bitcast i32 %322 to float, !dbg !52
  %324 = bitcast float %307 to i32, !dbg !52
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !52
  %326 = bitcast i32 %325 to float, !dbg !52
  %327 = fsub float %320, %312, !dbg !38
  %328 = fadd float %307, %326, !dbg !41
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !42
  %330 = tail call float @llvm.nvvm.div.full(float %326, float %328), !dbg !43
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !44
  %332 = fmul float %331, %327, !dbg !45
  %333 = fadd float %312, %332, !dbg !46
  %334 = fadd float %317, %323, !dbg !47
  %335 = fmul float %327, %327, !dbg !48
  %336 = fmul float %307, %335, !dbg !49
  %337 = fmul float %331, %336, !dbg !50
  %338 = fadd float %334, %337, !dbg !51
  %339 = bitcast float %333 to i32, !dbg !52
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !52
  %341 = bitcast i32 %340 to float, !dbg !52
  %342 = bitcast float %338 to i32, !dbg !52
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !52
  %344 = bitcast i32 %343 to float, !dbg !52
  %345 = bitcast float %328 to i32, !dbg !52
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !52
  %347 = bitcast i32 %346 to float, !dbg !52
  %348 = fsub float %341, %333, !dbg !38
  %349 = fadd float %328, %347, !dbg !41
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !42
  %351 = tail call float @llvm.nvvm.div.full(float %347, float %349), !dbg !43
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !44
  %353 = fmul float %352, %348, !dbg !45
  %354 = fadd float %333, %353, !dbg !46
  %355 = fadd float %338, %344, !dbg !47
  %356 = fmul float %348, %348, !dbg !48
  %357 = fmul float %328, %356, !dbg !49
  %358 = fmul float %352, %357, !dbg !50
  %359 = fadd float %355, %358, !dbg !51
  %360 = bitcast float %354 to i32, !dbg !52
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !52
  %362 = bitcast i32 %361 to float, !dbg !52
  %363 = bitcast float %359 to i32, !dbg !52
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !52
  %365 = bitcast i32 %364 to float, !dbg !52
  %366 = bitcast float %349 to i32, !dbg !52
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !52
  %368 = bitcast i32 %367 to float, !dbg !52
  %369 = fsub float %362, %354, !dbg !38
  %370 = fadd float %349, %368, !dbg !41
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !42
  %372 = tail call float @llvm.nvvm.div.full(float %368, float %370), !dbg !43
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !44
  %374 = fmul float %373, %369, !dbg !45
  %375 = fadd float %354, %374, !dbg !46
  %376 = fadd float %359, %365, !dbg !47
  %377 = fmul float %369, %369, !dbg !48
  %378 = fmul float %349, %377, !dbg !49
  %379 = fmul float %373, %378, !dbg !50
  %380 = fadd float %376, %379, !dbg !51
  %381 = and i32 %187, 7, !dbg !52
  %382 = icmp eq i32 %23, 0, !dbg !52
  %383 = shl nuw nsw i32 %22, 3, !dbg !52
  %384 = or disjoint i32 %383, %381, !dbg !52
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !52
  %386 = bitcast float %375 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 %382) #5, !dbg !52
  %387 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %384, !dbg !52
  %388 = bitcast float %380 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 %382) #5, !dbg !52
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %384, !dbg !52
  %390 = bitcast float %370 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 %382) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %391 = icmp slt i32 %21, 32, !dbg !52
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %21, !dbg !52
  %393 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %391) #5, !dbg !52
  %394 = bitcast i32 %393 to float, !dbg !52
  %395 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %21, !dbg !52
  %396 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %395, i1 %391) #5, !dbg !52
  %397 = bitcast i32 %396 to float, !dbg !52
  %398 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %21, !dbg !52
  %399 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %398, i1 %391) #5, !dbg !52
  %400 = bitcast i32 %399 to float, !dbg !52
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !52
  %402 = bitcast i32 %401 to float, !dbg !52
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !52
  %404 = bitcast i32 %403 to float, !dbg !52
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !52
  %406 = bitcast i32 %405 to float, !dbg !52
  %407 = fsub float %402, %394, !dbg !38
  %408 = fadd float %400, %406, !dbg !41
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !42
  %410 = tail call float @llvm.nvvm.div.full(float %406, float %408), !dbg !43
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !44
  %412 = fmul float %407, %411, !dbg !45
  %413 = fadd float %412, %394, !dbg !46
  %414 = fadd float %397, %404, !dbg !47
  %415 = fmul float %407, %407, !dbg !48
  %416 = fmul float %415, %400, !dbg !49
  %417 = fmul float %416, %411, !dbg !50
  %418 = fadd float %414, %417, !dbg !51
  %419 = bitcast float %413 to i32, !dbg !52
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 2, i32 31), !dbg !52
  %421 = bitcast i32 %420 to float, !dbg !52
  %422 = bitcast float %418 to i32, !dbg !52
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !52
  %424 = bitcast i32 %423 to float, !dbg !52
  %425 = bitcast float %408 to i32, !dbg !52
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 2, i32 31), !dbg !52
  %427 = bitcast i32 %426 to float, !dbg !52
  %428 = fsub float %421, %413, !dbg !38
  %429 = fadd float %408, %427, !dbg !41
  %430 = fcmp oeq float %429, 0.000000e+00, !dbg !42
  %431 = tail call float @llvm.nvvm.div.full(float %427, float %429), !dbg !43
  %432 = select i1 %430, float 0.000000e+00, float %431, !dbg !44
  %433 = fmul float %428, %432, !dbg !45
  %434 = fadd float %413, %433, !dbg !46
  %435 = fadd float %418, %424, !dbg !47
  %436 = fmul float %428, %428, !dbg !48
  %437 = fmul float %408, %436, !dbg !49
  %438 = fmul float %432, %437, !dbg !50
  %439 = fadd float %435, %438, !dbg !51
  %440 = bitcast float %434 to i32, !dbg !52
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 1, i32 31), !dbg !52
  %442 = bitcast i32 %441 to float, !dbg !52
  %443 = bitcast float %439 to i32, !dbg !52
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !52
  %445 = bitcast i32 %444 to float, !dbg !52
  %446 = bitcast float %429 to i32, !dbg !52
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 1, i32 31), !dbg !52
  %448 = bitcast i32 %447 to float, !dbg !52
  %449 = fsub float %442, %434, !dbg !38
  %450 = fadd float %429, %448, !dbg !41
  %451 = fcmp oeq float %450, 0.000000e+00, !dbg !42
  %452 = tail call float @llvm.nvvm.div.full(float %448, float %450), !dbg !43
  %453 = select i1 %451, float 0.000000e+00, float %452, !dbg !44
  %454 = fmul float %449, %453, !dbg !45
  %455 = fadd float %434, %454, !dbg !46
  %456 = fadd float %439, %445, !dbg !47
  %457 = fmul float %449, %449, !dbg !48
  %458 = fmul float %429, %457, !dbg !49
  %459 = fmul float %453, %458, !dbg !50
  %460 = fadd float %456, %459, !dbg !51
  %461 = and i32 %21, 7, !dbg !52
  %462 = icmp eq i32 %461, 0, !dbg !52
  %463 = and i1 %391, %462, !dbg !52
  %464 = bitcast float %455 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %464, i1 %463) #5, !dbg !52
  %465 = bitcast float %460 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %465, i1 %463) #5, !dbg !52
  %466 = bitcast float %450 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %466, i1 %463) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !52
  %468 = load float, ptr addrspace(3) %467, align 16, !dbg !52
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %383, !dbg !52
  %470 = load float, ptr addrspace(3) %469, align 16, !dbg !52
  %471 = tail call float @llvm.nvvm.div.full(float %470, float 3.072000e+03), !dbg !53
  %472 = fadd float %471, 0x3EB0C6F7A0000000, !dbg !54
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i64 = icmp eq i32 %480, 0, !dbg !55
  br i1 %.not.i64, label %483, label %481, !dbg !55

481:                                              ; preds = %._crit_edge
  %482 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %472), !dbg !55
  br label %__nv_rsqrtf.exit66, !dbg !55

483:                                              ; preds = %._crit_edge
  %484 = tail call float @llvm.nvvm.rsqrt.approx.f(float %472), !dbg !55
  br label %__nv_rsqrtf.exit66, !dbg !55

__nv_rsqrtf.exit66:                               ; preds = %481, %483
  %.0.i65 = phi float [ %482, %481 ], [ %484, %483 ], !dbg !55
  %485 = and i32 %27, 8184
  %486 = lshr i32 %27, 7
  %487 = and i32 %486, 48
  %488 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %487
  %489 = getelementptr inbounds nuw float, ptr addrspace(3) %488, i32 %485
  %490 = or disjoint i32 %485, 4
  %491 = getelementptr inbounds nuw float, ptr addrspace(3) %488, i32 %490
  %492 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %191
  %493 = or disjoint i32 %191, 2048
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %493
  %494 = or disjoint i32 %191, 4096
  %gep77 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %494
  %495 = or disjoint i32 %191, 6144
  %gep78 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), i32 %495
  %496 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %191
  %gep79 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %493
  %gep80 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %494
  %gep81 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), i32 %495
  %497 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %488, i32 %485
  %498 = zext nneg i32 %191 to i64, !dbg !56
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep78, i32 4
  %500 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 4
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 8
  %502 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 12
  br label %503, !dbg !56

503:                                              ; preds = %__nv_rsqrtf.exit66, %503
  %504 = phi i1 [ true, %__nv_rsqrtf.exit66 ], [ false, %503 ]
  %indvars.iv121 = phi i64 [ 0, %__nv_rsqrtf.exit66 ], [ 2048, %503 ]
  %505 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit66 ], [ %638, %503 ]
  %506 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit66 ], [ %639, %503 ]
  %507 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit66 ], [ %634, %503 ]
  %508 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit66 ], [ %656, %503 ]
  %509 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit66 ], [ %657, %503 ]
  %510 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit66 ], [ %637, %503 ]
  %511 = or disjoint i64 %indvars.iv121, %498, !dbg !57
  %512 = or disjoint i64 %indvars.iv121, %31, !dbg !57
  %513 = icmp samesign ult i64 %511, 3072, !dbg !58
  %514 = icmp samesign ult i64 %512, 3072, !dbg !58
  %515 = trunc nuw nsw i64 %512 to i32, !dbg !59
  %516 = add i32 %30, %515, !dbg !59
  %517 = sext i32 %516 to i64, !dbg !60
  %518 = getelementptr bfloat, ptr addrspace(1) %0, i64 %517, !dbg !60
  %519 = and i1 %26, %513, !dbg !61
  %520 = and i1 %25, %514, !dbg !61
  %521 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %518, i1 %520) #5, !dbg !62
  %522 = extractvalue { i32, i32, i32, i32 } %521, 0, !dbg !62
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !62
  %524 = extractvalue { i32, i32, i32, i32 } %521, 1, !dbg !62
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !62
  %526 = extractvalue { i32, i32, i32, i32 } %521, 2, !dbg !62
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !62
  %528 = extractvalue { i32, i32, i32, i32 } %521, 3, !dbg !62
  %529 = bitcast i32 %528 to <2 x bfloat>, !dbg !62
  %530 = extractelement <2 x bfloat> %523, i64 0, !dbg !62
  %531 = extractelement <2 x bfloat> %523, i64 1, !dbg !62
  %532 = extractelement <2 x bfloat> %525, i64 0, !dbg !62
  %533 = extractelement <2 x bfloat> %525, i64 1, !dbg !62
  %534 = extractelement <2 x bfloat> %527, i64 0, !dbg !62
  %535 = extractelement <2 x bfloat> %527, i64 1, !dbg !62
  %536 = extractelement <2 x bfloat> %529, i64 0, !dbg !62
  %537 = extractelement <2 x bfloat> %529, i64 1, !dbg !62
  %538 = fpext bfloat %530 to float, !dbg !63
  %539 = fpext bfloat %531 to float, !dbg !63
  %540 = fpext bfloat %532 to float, !dbg !63
  %541 = fpext bfloat %533 to float, !dbg !63
  %542 = fpext bfloat %534 to float, !dbg !63
  %543 = fpext bfloat %535 to float, !dbg !63
  %544 = fpext bfloat %536 to float, !dbg !63
  %545 = fpext bfloat %537 to float, !dbg !63
  %546 = add nuw nsw i64 %511, 3072, !dbg !64
  %547 = getelementptr float, ptr addrspace(1) %1, i64 %546, !dbg !65
  %548 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %547, i1 %513) #5, !dbg !66
  %549 = extractvalue { i32, i32 } %548, 0, !dbg !66
  %550 = extractvalue { i32, i32 } %548, 1, !dbg !66
  %551 = getelementptr bfloat, ptr addrspace(1) %2, i64 %546, !dbg !67
  %552 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %551, i1 %513) #5, !dbg !68
  %553 = bitcast i32 %552 to <2 x bfloat>, !dbg !68
  %554 = getelementptr float, ptr addrspace(1) %1, i64 %511, !dbg !69
  %555 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %554, i1 %513) #5, !dbg !70
  %556 = extractvalue { i32, i32 } %555, 0, !dbg !70
  %557 = extractvalue { i32, i32 } %555, 1, !dbg !70
  %558 = getelementptr bfloat, ptr addrspace(1) %2, i64 %511, !dbg !71
  %559 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %558, i1 %513) #5, !dbg !72
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !72
  %561 = fsub float %538, %468, !dbg !73
  %562 = fsub float %539, %468, !dbg !73
  %563 = fsub float %540, %468, !dbg !73
  %564 = fsub float %541, %468, !dbg !73
  %565 = fsub float %542, %468, !dbg !73
  %566 = fsub float %543, %468, !dbg !73
  %567 = fsub float %544, %468, !dbg !73
  %568 = fsub float %545, %468, !dbg !73
  %569 = fmul float %.0.i65, %561, !dbg !74
  %570 = fmul float %.0.i65, %562, !dbg !74
  %571 = fmul float %.0.i65, %563, !dbg !74
  %572 = fmul float %.0.i65, %564, !dbg !74
  %573 = fmul float %.0.i65, %565, !dbg !74
  %574 = fmul float %.0.i65, %566, !dbg !74
  %575 = fmul float %.0.i65, %567, !dbg !74
  %576 = fmul float %.0.i65, %568, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %577 = bitcast float %569 to i32, !dbg !74
  %578 = bitcast float %570 to i32, !dbg !74
  %579 = bitcast float %571 to i32, !dbg !74
  %580 = bitcast float %572 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %489, i32 %577, i32 %578, i32 %579, i32 %580, i1 true) #5, !dbg !74
  %581 = bitcast float %573 to i32, !dbg !74
  %582 = bitcast float %574 to i32, !dbg !74
  %583 = bitcast float %575 to i32, !dbg !74
  %584 = bitcast float %576 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %491, i32 %581, i32 %582, i32 %583, i32 %584, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %585 = load float, ptr addrspace(3) %gep78, align 8, !dbg !74
  %586 = load float, ptr addrspace(3) %499, align 4, !dbg !74
  %587 = fcmp uno <2 x float> %507, zeroinitializer, !dbg !75
  %588 = fcmp uno <4 x float> %510, zeroinitializer, !dbg !75
  %589 = fcmp uno float %505, 0.000000e+00, !dbg !75
  %590 = fcmp uno float %506, 0.000000e+00, !dbg !75
  %591 = insertelement <2 x i32> poison, i32 %549, i64 0, !dbg !66
  %592 = insertelement <2 x i32> %591, i32 %550, i64 1, !dbg !66
  %593 = bitcast <2 x i32> %592 to <2 x float>, !dbg !66
  %594 = fpext <2 x bfloat> %553 to <2 x float>, !dbg !77
  %595 = insertelement <2 x i32> poison, i32 %556, i64 0, !dbg !70
  %596 = insertelement <2 x i32> %595, i32 %557, i64 1, !dbg !70
  %597 = bitcast <2 x i32> %596 to <2 x float>, !dbg !70
  %598 = fpext <2 x bfloat> %560 to <2 x float>, !dbg !78
  %599 = load <2 x float>, ptr addrspace(3) %492, align 8, !dbg !74
  %600 = fadd <2 x float> %593, %594, !dbg !79
  %601 = fadd <2 x float> %600, splat (float 1.000000e+00), !dbg !80
  %602 = fmul <2 x float> %601, %599, !dbg !81
  %603 = shufflevector <2 x float> %601, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !81
  %604 = extractelement <2 x float> %601, i64 0, !dbg !81
  %605 = fmul float %604, %585, !dbg !81
  %606 = extractelement <2 x float> %601, i64 1, !dbg !81
  %607 = fmul float %606, %586, !dbg !81
  %608 = fadd <2 x float> %597, %598, !dbg !82
  %609 = fadd <2 x float> %608, %602, !dbg !83
  %610 = shufflevector <2 x float> %608, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !83
  %611 = extractelement <2 x float> %608, i64 0, !dbg !83
  %612 = fadd float %611, %605, !dbg !83
  %613 = extractelement <2 x float> %608, i64 1, !dbg !83
  %614 = fadd float %613, %607, !dbg !83
  %615 = fcmp olt <2 x float> %507, %609, !dbg !84
  %616 = fcmp olt float %505, %612, !dbg !84
  %617 = fcmp olt float %506, %614, !dbg !84
  %618 = or <2 x i1> %587, %615, !dbg !85
  %619 = or i1 %589, %616, !dbg !85
  %620 = or i1 %590, %617, !dbg !85
  %621 = select <2 x i1> %618, <2 x float> %507, <2 x float> %609, !dbg !86
  %622 = load <2 x float>, ptr addrspace(3) %gep, align 8, !dbg !74
  %623 = load <2 x float>, ptr addrspace(3) %gep77, align 8, !dbg !74
  %624 = shufflevector <2 x float> %622, <2 x float> %623, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !81
  %625 = fmul <4 x float> %603, %624, !dbg !81
  %626 = fadd <4 x float> %610, %625, !dbg !83
  %627 = fcmp olt <4 x float> %510, %626, !dbg !84
  %628 = or <4 x i1> %588, %627, !dbg !85
  %629 = select <4 x i1> %628, <4 x float> %510, <4 x float> %626, !dbg !86
  %630 = select i1 %619, float %505, float %612, !dbg !86
  %631 = select i1 %620, float %506, float %614, !dbg !86
  %632 = insertelement <2 x i1> poison, i1 %519, i64 0, !dbg !87
  %633 = shufflevector <2 x i1> %632, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !87
  %634 = select <2 x i1> %633, <2 x float> %621, <2 x float> %507, !dbg !87
  %635 = insertelement <4 x i1> poison, i1 %519, i64 0, !dbg !87
  %636 = shufflevector <4 x i1> %635, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !87
  %637 = select <4 x i1> %636, <4 x float> %629, <4 x float> %510, !dbg !87
  %638 = select i1 %519, float %630, float %505, !dbg !87
  %639 = select i1 %519, float %631, float %506, !dbg !87
  %640 = extractelement <2 x float> %609, i64 0, !dbg !88
  %641 = extractelement <2 x float> %609, i64 1, !dbg !88
  %642 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !89
  %643 = fcmp uno <4 x float> %509, zeroinitializer, !dbg !89
  %644 = shufflevector <2 x float> %609, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 0>, !dbg !91
  %645 = insertelement <4 x float> %644, float %612, i64 0, !dbg !91
  %646 = shufflevector <4 x float> %645, <4 x float> %626, <4 x i32> <i32 0, i32 6, i32 4, i32 3>, !dbg !91
  %647 = fcmp ogt <4 x float> %508, %646, !dbg !91
  %648 = shufflevector <2 x float> %609, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 poison, i32 1>, !dbg !91
  %649 = insertelement <4 x float> %648, float %614, i64 0, !dbg !91
  %650 = shufflevector <4 x float> %649, <4 x float> %626, <4 x i32> <i32 0, i32 7, i32 5, i32 3>, !dbg !91
  %651 = fcmp ogt <4 x float> %509, %650, !dbg !91
  %652 = or <4 x i1> %642, %647, !dbg !92
  %653 = or <4 x i1> %643, %651, !dbg !92
  %654 = select <4 x i1> %652, <4 x float> %508, <4 x float> %646, !dbg !93
  %655 = select <4 x i1> %653, <4 x float> %509, <4 x float> %650, !dbg !93
  %656 = select <4 x i1> %636, <4 x float> %654, <4 x float> %508, !dbg !94
  %657 = select <4 x i1> %636, <4 x float> %655, <4 x float> %509, !dbg !94
  %658 = getelementptr bfloat, ptr addrspace(1) %3, i64 %517, !dbg !95
  %659 = fptrunc float %640 to bfloat, !dbg !88
  %660 = fptrunc float %641 to bfloat, !dbg !88
  %661 = extractelement <4 x float> %626, i64 0, !dbg !88
  %662 = fptrunc float %661 to bfloat, !dbg !88
  %663 = extractelement <4 x float> %626, i64 1, !dbg !88
  %664 = fptrunc float %663 to bfloat, !dbg !88
  %665 = extractelement <4 x float> %626, i64 2, !dbg !88
  %666 = fptrunc float %665 to bfloat, !dbg !88
  %667 = extractelement <4 x float> %626, i64 3, !dbg !88
  %668 = fptrunc float %667 to bfloat, !dbg !88
  %669 = fptrunc float %612 to bfloat, !dbg !88
  %670 = fptrunc float %614 to bfloat, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %671 = bitcast bfloat %659 to i16, !dbg !88
  %672 = bitcast bfloat %660 to i16, !dbg !88
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %496, i16 %671, i16 %672, i1 true) #5, !dbg !88
  %673 = bitcast bfloat %662 to i16, !dbg !88
  %674 = bitcast bfloat %664 to i16, !dbg !88
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %gep79, i16 %673, i16 %674, i1 true) #5, !dbg !88
  %675 = bitcast bfloat %666 to i16, !dbg !88
  %676 = bitcast bfloat %668 to i16, !dbg !88
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %gep80, i16 %675, i16 %676, i1 true) #5, !dbg !88
  %677 = bitcast bfloat %669 to i16, !dbg !88
  %678 = bitcast bfloat %670 to i16, !dbg !88
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %gep81, i16 %677, i16 %678, i1 true) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %.extract = load i32, ptr addrspace(3) %497, align 16, !dbg !88
  %.extract68 = load i32, ptr addrspace(3) %500, align 4, !dbg !88
  %.extract70 = load i32, ptr addrspace(3) %501, align 8, !dbg !88
  %.extract72 = load i32, ptr addrspace(3) %502, align 4, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %658, i1 %520) #5, !dbg !88
  br i1 %504, label %503, label %679, !dbg !56

679:                                              ; preds = %503
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %680 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %634, <2 x i32> <i32 0, i32 2>, !dbg !98
  %681 = fcmp olt <2 x float> %680, %634, !dbg !98
  %682 = fcmp uno <2 x float> %680, %634, !dbg !98
  %shift = shufflevector <2 x i1> %681, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %683 = or <2 x i1> %shift, %682, !dbg !99
  %684 = extractelement <2 x i1> %683, i64 0, !dbg !99
  %685 = extractelement <2 x float> %634, i64 0, !dbg !100
  %686 = extractelement <2 x float> %634, i64 1, !dbg !100
  %687 = select i1 %684, float %685, float %686, !dbg !100
  %688 = extractelement <4 x float> %637, i64 0, !dbg !98
  %689 = extractelement <4 x float> %637, i64 1, !dbg !98
  %690 = fcmp olt float %688, %689, !dbg !98
  %691 = fcmp uno float %688, 0.000000e+00, !dbg !101
  %692 = or i1 %690, %691, !dbg !99
  %693 = select i1 %692, float %688, float %689, !dbg !100
  %694 = extractelement <4 x float> %637, i64 2, !dbg !98
  %695 = extractelement <4 x float> %637, i64 3, !dbg !98
  %696 = fcmp olt float %694, %695, !dbg !98
  %697 = fcmp uno float %694, 0.000000e+00, !dbg !101
  %698 = or i1 %696, %697, !dbg !99
  %699 = select i1 %698, float %694, float %695, !dbg !100
  %700 = fcmp olt float %638, %639, !dbg !98
  %701 = fcmp uno float %638, 0.000000e+00, !dbg !101
  %702 = or i1 %700, %701, !dbg !99
  %703 = select i1 %702, float %638, float %639, !dbg !100
  %704 = bitcast float %687 to i32, !dbg !96
  %705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %704, i32 16, i32 31), !dbg !96
  %706 = bitcast i32 %705 to float, !dbg !96
  %707 = fcmp olt float %687, %706, !dbg !98
  %708 = fcmp uno float %687, 0.000000e+00, !dbg !101
  %709 = or i1 %708, %707, !dbg !99
  %710 = select i1 %709, float %687, float %706, !dbg !100
  %711 = bitcast float %710 to i32, !dbg !96
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 8, i32 31), !dbg !96
  %713 = bitcast i32 %712 to float, !dbg !96
  %714 = fcmp olt float %710, %713, !dbg !98
  %715 = fcmp uno float %710, 0.000000e+00, !dbg !101
  %716 = or i1 %714, %715, !dbg !99
  %717 = select i1 %716, float %710, float %713, !dbg !100
  %718 = bitcast float %717 to i32, !dbg !96
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 4, i32 31), !dbg !96
  %720 = bitcast i32 %719 to float, !dbg !96
  %721 = fcmp olt float %717, %720, !dbg !98
  %722 = fcmp uno float %717, 0.000000e+00, !dbg !101
  %723 = or i1 %721, %722, !dbg !99
  %724 = select i1 %723, float %717, float %720, !dbg !100
  %725 = bitcast float %724 to i32, !dbg !96
  %726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %725, i32 2, i32 31), !dbg !96
  %727 = bitcast i32 %726 to float, !dbg !96
  %728 = fcmp olt float %724, %727, !dbg !98
  %729 = fcmp uno float %724, 0.000000e+00, !dbg !101
  %730 = or i1 %728, %729, !dbg !99
  %731 = select i1 %730, float %724, float %727, !dbg !100
  %732 = bitcast float %731 to i32, !dbg !96
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 1, i32 31), !dbg !96
  %734 = bitcast i32 %733 to float, !dbg !96
  %735 = fcmp olt float %731, %734, !dbg !98
  %736 = fcmp uno float %731, 0.000000e+00, !dbg !101
  %737 = or i1 %735, %736, !dbg !99
  %738 = bitcast float %693 to i32, !dbg !96
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 16, i32 31), !dbg !96
  %740 = bitcast i32 %739 to float, !dbg !96
  %741 = fcmp olt float %693, %740, !dbg !98
  %742 = fcmp uno float %693, 0.000000e+00, !dbg !101
  %743 = or i1 %742, %741, !dbg !99
  %744 = select i1 %743, float %693, float %740, !dbg !100
  %745 = bitcast float %744 to i32, !dbg !96
  %746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %745, i32 8, i32 31), !dbg !96
  %747 = bitcast i32 %746 to float, !dbg !96
  %748 = fcmp olt float %744, %747, !dbg !98
  %749 = fcmp uno float %744, 0.000000e+00, !dbg !101
  %750 = or i1 %748, %749, !dbg !99
  %751 = select i1 %750, float %744, float %747, !dbg !100
  %752 = bitcast float %751 to i32, !dbg !96
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 4, i32 31), !dbg !96
  %754 = bitcast i32 %753 to float, !dbg !96
  %755 = fcmp olt float %751, %754, !dbg !98
  %756 = fcmp uno float %751, 0.000000e+00, !dbg !101
  %757 = or i1 %755, %756, !dbg !99
  %758 = select i1 %757, float %751, float %754, !dbg !100
  %759 = bitcast float %758 to i32, !dbg !96
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 2, i32 31), !dbg !96
  %761 = bitcast i32 %760 to float, !dbg !96
  %762 = fcmp olt float %758, %761, !dbg !98
  %763 = fcmp uno float %758, 0.000000e+00, !dbg !101
  %764 = or i1 %762, %763, !dbg !99
  %765 = select i1 %764, float %758, float %761, !dbg !100
  %766 = bitcast float %765 to i32, !dbg !96
  %767 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %766, i32 1, i32 31), !dbg !96
  %768 = bitcast i32 %767 to float, !dbg !96
  %769 = fcmp olt float %765, %768, !dbg !98
  %770 = fcmp uno float %765, 0.000000e+00, !dbg !101
  %771 = or i1 %769, %770, !dbg !99
  %772 = bitcast float %699 to i32, !dbg !96
  %773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %772, i32 16, i32 31), !dbg !96
  %774 = bitcast i32 %773 to float, !dbg !96
  %775 = fcmp olt float %699, %774, !dbg !98
  %776 = fcmp uno float %699, 0.000000e+00, !dbg !101
  %777 = or i1 %776, %775, !dbg !99
  %778 = select i1 %777, float %699, float %774, !dbg !100
  %779 = bitcast float %778 to i32, !dbg !96
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 8, i32 31), !dbg !96
  %781 = bitcast i32 %780 to float, !dbg !96
  %782 = fcmp olt float %778, %781, !dbg !98
  %783 = fcmp uno float %778, 0.000000e+00, !dbg !101
  %784 = or i1 %782, %783, !dbg !99
  %785 = select i1 %784, float %778, float %781, !dbg !100
  %786 = bitcast float %785 to i32, !dbg !96
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 4, i32 31), !dbg !96
  %788 = bitcast i32 %787 to float, !dbg !96
  %789 = fcmp olt float %785, %788, !dbg !98
  %790 = fcmp uno float %785, 0.000000e+00, !dbg !101
  %791 = or i1 %789, %790, !dbg !99
  %792 = select i1 %791, float %785, float %788, !dbg !100
  %793 = bitcast float %792 to i32, !dbg !96
  %794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %793, i32 2, i32 31), !dbg !96
  %795 = bitcast i32 %794 to float, !dbg !96
  %796 = fcmp olt float %792, %795, !dbg !98
  %797 = fcmp uno float %792, 0.000000e+00, !dbg !101
  %798 = or i1 %796, %797, !dbg !99
  %799 = select i1 %798, float %792, float %795, !dbg !100
  %800 = bitcast float %799 to i32, !dbg !96
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 1, i32 31), !dbg !96
  %802 = bitcast i32 %801 to float, !dbg !96
  %803 = fcmp olt float %799, %802, !dbg !98
  %804 = fcmp uno float %799, 0.000000e+00, !dbg !101
  %805 = or i1 %803, %804, !dbg !99
  %806 = bitcast float %703 to i32, !dbg !96
  %807 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %806, i32 16, i32 31), !dbg !96
  %808 = bitcast i32 %807 to float, !dbg !96
  %809 = fcmp olt float %703, %808, !dbg !98
  %810 = fcmp uno float %703, 0.000000e+00, !dbg !101
  %811 = or i1 %810, %809, !dbg !99
  %812 = select i1 %811, float %703, float %808, !dbg !100
  %813 = bitcast float %812 to i32, !dbg !96
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 8, i32 31), !dbg !96
  %815 = bitcast i32 %814 to float, !dbg !96
  %816 = fcmp olt float %812, %815, !dbg !98
  %817 = fcmp uno float %812, 0.000000e+00, !dbg !101
  %818 = or i1 %816, %817, !dbg !99
  %819 = select i1 %818, float %812, float %815, !dbg !100
  %820 = bitcast float %819 to i32, !dbg !96
  %821 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %820, i32 4, i32 31), !dbg !96
  %822 = bitcast i32 %821 to float, !dbg !96
  %823 = fcmp olt float %819, %822, !dbg !98
  %824 = fcmp uno float %819, 0.000000e+00, !dbg !101
  %825 = or i1 %823, %824, !dbg !99
  %826 = select i1 %825, float %819, float %822, !dbg !100
  %827 = bitcast float %826 to i32, !dbg !96
  %828 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %827, i32 2, i32 31), !dbg !96
  %829 = bitcast i32 %828 to float, !dbg !96
  %830 = fcmp olt float %826, %829, !dbg !98
  %831 = fcmp uno float %826, 0.000000e+00, !dbg !101
  %832 = or i1 %830, %831, !dbg !99
  %833 = select i1 %832, float %826, float %829, !dbg !100
  %834 = bitcast float %833 to i32, !dbg !96
  %835 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %834, i32 1, i32 31), !dbg !96
  %836 = bitcast i32 %835 to float, !dbg !96
  %837 = fcmp olt float %833, %836, !dbg !98
  %838 = fcmp uno float %833, 0.000000e+00, !dbg !101
  %839 = or i1 %837, %838, !dbg !99
  %840 = and i32 %187, 31, !dbg !96
  %841 = getelementptr float, ptr addrspace(3) @global_smem, i32 %840, !dbg !96
  %842 = select i1 %737, i32 %732, i32 %733, !dbg !100
  %843 = insertelement <1 x i32> poison, i32 %842, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %843, i1 %382) #5, !dbg !96
  %844 = or disjoint i32 %840, 32, !dbg !96
  %845 = getelementptr float, ptr addrspace(3) @global_smem, i32 %844, !dbg !96
  %846 = select i1 %771, i32 %766, i32 %767, !dbg !100
  %847 = insertelement <1 x i32> poison, i32 %846, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %847, i1 %382) #5, !dbg !96
  %848 = or disjoint i32 %840, 64, !dbg !96
  %849 = getelementptr float, ptr addrspace(3) @global_smem, i32 %848, !dbg !96
  %850 = select i1 %805, i32 %800, i32 %801, !dbg !100
  %851 = insertelement <1 x i32> poison, i32 %850, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %851, i1 %382) #5, !dbg !96
  %852 = or disjoint i32 %840, 96, !dbg !96
  %853 = getelementptr float, ptr addrspace(3) @global_smem, i32 %852, !dbg !96
  %854 = select i1 %839, i32 %834, i32 %835, !dbg !100
  %855 = insertelement <1 x i32> poison, i32 %854, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %853, <1 x i32> %855, i1 %382) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %856 = icmp slt i32 %21, 128, !dbg !96
  %857 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %856) #5, !dbg !96
  %858 = bitcast i32 %857 to float, !dbg !96
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %857, i32 16, i32 31), !dbg !96
  %860 = bitcast i32 %859 to float, !dbg !96
  %861 = fcmp olt float %858, %860, !dbg !98
  %862 = fcmp uno float %858, 0.000000e+00, !dbg !101
  %863 = or i1 %862, %861, !dbg !99
  %864 = select i1 %863, float %858, float %860, !dbg !100
  %865 = bitcast float %864 to i32, !dbg !96
  %866 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %865, i32 8, i32 31), !dbg !96
  %867 = bitcast i32 %866 to float, !dbg !96
  %868 = fcmp olt float %864, %867, !dbg !98
  %869 = fcmp uno float %864, 0.000000e+00, !dbg !101
  %870 = or i1 %868, %869, !dbg !99
  %871 = select i1 %870, float %864, float %867, !dbg !100
  %872 = bitcast float %871 to i32, !dbg !96
  %873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %872, i32 4, i32 31), !dbg !96
  %874 = bitcast i32 %873 to float, !dbg !96
  %875 = fcmp olt float %871, %874, !dbg !98
  %876 = fcmp uno float %871, 0.000000e+00, !dbg !101
  %877 = or i1 %875, %876, !dbg !99
  %878 = select i1 %877, float %871, float %874, !dbg !100
  %879 = bitcast float %878 to i32, !dbg !96
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 2, i32 31), !dbg !96
  %881 = bitcast i32 %880 to float, !dbg !96
  %882 = fcmp olt float %878, %881, !dbg !98
  %883 = fcmp uno float %878, 0.000000e+00, !dbg !101
  %884 = or i1 %882, %883, !dbg !99
  %885 = select i1 %884, float %878, float %881, !dbg !100
  %886 = bitcast float %885 to i32, !dbg !96
  %887 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %886, i32 1, i32 31), !dbg !96
  %888 = bitcast i32 %887 to float, !dbg !96
  %889 = fcmp olt float %885, %888, !dbg !98
  %890 = fcmp uno float %885, 0.000000e+00, !dbg !101
  %891 = or i1 %889, %890, !dbg !99
  %892 = and i1 %856, %382, !dbg !96
  %893 = select i1 %891, i32 %886, i32 %887, !dbg !100
  %894 = insertelement <1 x i32> poison, i32 %893, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %894, i1 %892) #5, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %895 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !96
  %896 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !96
  %897 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !96
  %898 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %899 = bitcast float %895 to i32, !dbg !102
  %900 = bitcast float %896 to i32, !dbg !102
  %901 = bitcast float %897 to i32, !dbg !102
  %902 = bitcast float %898 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %899, i32 %900, i32 %901, i32 %902, i1 true) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %903 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %188, !dbg !102
  %904 = load float, ptr addrspace(3) %903, align 4, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %905 = fcmp ogt <4 x float> %656, %657, !dbg !105
  %906 = extractelement <4 x float> %656, i64 3, !dbg !106
  %907 = fcmp uno float %906, 0.000000e+00, !dbg !106
  %908 = extractelement <4 x i1> %905, i64 3, !dbg !107
  %909 = or i1 %908, %907, !dbg !107
  %910 = extractelement <4 x float> %657, i64 3, !dbg !108
  %911 = select i1 %909, float %906, float %910, !dbg !108
  %912 = extractelement <4 x float> %656, i64 2, !dbg !106
  %913 = fcmp uno float %912, 0.000000e+00, !dbg !106
  %914 = extractelement <4 x i1> %905, i64 2, !dbg !107
  %915 = or i1 %914, %913, !dbg !107
  %916 = extractelement <4 x float> %657, i64 2, !dbg !108
  %917 = select i1 %915, float %912, float %916, !dbg !108
  %918 = extractelement <4 x float> %656, i64 1, !dbg !106
  %919 = fcmp uno float %918, 0.000000e+00, !dbg !106
  %920 = extractelement <4 x i1> %905, i64 1, !dbg !107
  %921 = or i1 %920, %919, !dbg !107
  %922 = extractelement <4 x float> %657, i64 1, !dbg !108
  %923 = select i1 %921, float %918, float %922, !dbg !108
  %924 = extractelement <4 x float> %656, i64 0, !dbg !106
  %925 = fcmp uno float %924, 0.000000e+00, !dbg !106
  %926 = extractelement <4 x i1> %905, i64 0, !dbg !107
  %927 = or i1 %926, %925, !dbg !107
  %928 = extractelement <4 x float> %657, i64 0, !dbg !108
  %929 = select i1 %927, float %924, float %928, !dbg !108
  %930 = bitcast float %911 to i32, !dbg !103
  %931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %930, i32 16, i32 31), !dbg !103
  %932 = bitcast i32 %931 to float, !dbg !103
  %933 = fcmp ogt float %911, %932, !dbg !105
  %934 = fcmp uno float %911, 0.000000e+00, !dbg !106
  %935 = or i1 %934, %933, !dbg !107
  %936 = select i1 %935, float %911, float %932, !dbg !108
  %937 = bitcast float %936 to i32, !dbg !103
  %938 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %937, i32 8, i32 31), !dbg !103
  %939 = bitcast i32 %938 to float, !dbg !103
  %940 = fcmp ogt float %936, %939, !dbg !105
  %941 = fcmp uno float %936, 0.000000e+00, !dbg !106
  %942 = or i1 %940, %941, !dbg !107
  %943 = select i1 %942, float %936, float %939, !dbg !108
  %944 = bitcast float %943 to i32, !dbg !103
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %944, i32 4, i32 31), !dbg !103
  %946 = bitcast i32 %945 to float, !dbg !103
  %947 = fcmp ogt float %943, %946, !dbg !105
  %948 = fcmp uno float %943, 0.000000e+00, !dbg !106
  %949 = or i1 %947, %948, !dbg !107
  %950 = select i1 %949, float %943, float %946, !dbg !108
  %951 = bitcast float %950 to i32, !dbg !103
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 2, i32 31), !dbg !103
  %953 = bitcast i32 %952 to float, !dbg !103
  %954 = fcmp ogt float %950, %953, !dbg !105
  %955 = fcmp uno float %950, 0.000000e+00, !dbg !106
  %956 = or i1 %954, %955, !dbg !107
  %957 = select i1 %956, float %950, float %953, !dbg !108
  %958 = bitcast float %957 to i32, !dbg !103
  %959 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %958, i32 1, i32 31), !dbg !103
  %960 = bitcast i32 %959 to float, !dbg !103
  %961 = fcmp ogt float %957, %960, !dbg !105
  %962 = fcmp uno float %957, 0.000000e+00, !dbg !106
  %963 = or i1 %961, %962, !dbg !107
  %964 = bitcast float %917 to i32, !dbg !103
  %965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %964, i32 16, i32 31), !dbg !103
  %966 = bitcast i32 %965 to float, !dbg !103
  %967 = fcmp ogt float %917, %966, !dbg !105
  %968 = fcmp uno float %917, 0.000000e+00, !dbg !106
  %969 = or i1 %968, %967, !dbg !107
  %970 = select i1 %969, float %917, float %966, !dbg !108
  %971 = bitcast float %970 to i32, !dbg !103
  %972 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %971, i32 8, i32 31), !dbg !103
  %973 = bitcast i32 %972 to float, !dbg !103
  %974 = fcmp ogt float %970, %973, !dbg !105
  %975 = fcmp uno float %970, 0.000000e+00, !dbg !106
  %976 = or i1 %974, %975, !dbg !107
  %977 = select i1 %976, float %970, float %973, !dbg !108
  %978 = bitcast float %977 to i32, !dbg !103
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 4, i32 31), !dbg !103
  %980 = bitcast i32 %979 to float, !dbg !103
  %981 = fcmp ogt float %977, %980, !dbg !105
  %982 = fcmp uno float %977, 0.000000e+00, !dbg !106
  %983 = or i1 %981, %982, !dbg !107
  %984 = select i1 %983, float %977, float %980, !dbg !108
  %985 = bitcast float %984 to i32, !dbg !103
  %986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %985, i32 2, i32 31), !dbg !103
  %987 = bitcast i32 %986 to float, !dbg !103
  %988 = fcmp ogt float %984, %987, !dbg !105
  %989 = fcmp uno float %984, 0.000000e+00, !dbg !106
  %990 = or i1 %988, %989, !dbg !107
  %991 = select i1 %990, float %984, float %987, !dbg !108
  %992 = bitcast float %991 to i32, !dbg !103
  %993 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %992, i32 1, i32 31), !dbg !103
  %994 = bitcast i32 %993 to float, !dbg !103
  %995 = fcmp ogt float %991, %994, !dbg !105
  %996 = fcmp uno float %991, 0.000000e+00, !dbg !106
  %997 = or i1 %995, %996, !dbg !107
  %998 = bitcast float %923 to i32, !dbg !103
  %999 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %998, i32 16, i32 31), !dbg !103
  %1000 = bitcast i32 %999 to float, !dbg !103
  %1001 = fcmp ogt float %923, %1000, !dbg !105
  %1002 = fcmp uno float %923, 0.000000e+00, !dbg !106
  %1003 = or i1 %1002, %1001, !dbg !107
  %1004 = select i1 %1003, float %923, float %1000, !dbg !108
  %1005 = bitcast float %1004 to i32, !dbg !103
  %1006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 8, i32 31), !dbg !103
  %1007 = bitcast i32 %1006 to float, !dbg !103
  %1008 = fcmp ogt float %1004, %1007, !dbg !105
  %1009 = fcmp uno float %1004, 0.000000e+00, !dbg !106
  %1010 = or i1 %1008, %1009, !dbg !107
  %1011 = select i1 %1010, float %1004, float %1007, !dbg !108
  %1012 = bitcast float %1011 to i32, !dbg !103
  %1013 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1012, i32 4, i32 31), !dbg !103
  %1014 = bitcast i32 %1013 to float, !dbg !103
  %1015 = fcmp ogt float %1011, %1014, !dbg !105
  %1016 = fcmp uno float %1011, 0.000000e+00, !dbg !106
  %1017 = or i1 %1015, %1016, !dbg !107
  %1018 = select i1 %1017, float %1011, float %1014, !dbg !108
  %1019 = bitcast float %1018 to i32, !dbg !103
  %1020 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1019, i32 2, i32 31), !dbg !103
  %1021 = bitcast i32 %1020 to float, !dbg !103
  %1022 = fcmp ogt float %1018, %1021, !dbg !105
  %1023 = fcmp uno float %1018, 0.000000e+00, !dbg !106
  %1024 = or i1 %1022, %1023, !dbg !107
  %1025 = select i1 %1024, float %1018, float %1021, !dbg !108
  %1026 = bitcast float %1025 to i32, !dbg !103
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1026, i32 1, i32 31), !dbg !103
  %1028 = bitcast i32 %1027 to float, !dbg !103
  %1029 = fcmp ogt float %1025, %1028, !dbg !105
  %1030 = fcmp uno float %1025, 0.000000e+00, !dbg !106
  %1031 = or i1 %1029, %1030, !dbg !107
  %1032 = bitcast float %929 to i32, !dbg !103
  %1033 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1032, i32 16, i32 31), !dbg !103
  %1034 = bitcast i32 %1033 to float, !dbg !103
  %1035 = fcmp ogt float %929, %1034, !dbg !105
  %1036 = fcmp uno float %929, 0.000000e+00, !dbg !106
  %1037 = or i1 %1036, %1035, !dbg !107
  %1038 = select i1 %1037, float %929, float %1034, !dbg !108
  %1039 = bitcast float %1038 to i32, !dbg !103
  %1040 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1039, i32 8, i32 31), !dbg !103
  %1041 = bitcast i32 %1040 to float, !dbg !103
  %1042 = fcmp ogt float %1038, %1041, !dbg !105
  %1043 = fcmp uno float %1038, 0.000000e+00, !dbg !106
  %1044 = or i1 %1042, %1043, !dbg !107
  %1045 = select i1 %1044, float %1038, float %1041, !dbg !108
  %1046 = bitcast float %1045 to i32, !dbg !103
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1046, i32 4, i32 31), !dbg !103
  %1048 = bitcast i32 %1047 to float, !dbg !103
  %1049 = fcmp ogt float %1045, %1048, !dbg !105
  %1050 = fcmp uno float %1045, 0.000000e+00, !dbg !106
  %1051 = or i1 %1049, %1050, !dbg !107
  %1052 = select i1 %1051, float %1045, float %1048, !dbg !108
  %1053 = bitcast float %1052 to i32, !dbg !103
  %1054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1053, i32 2, i32 31), !dbg !103
  %1055 = bitcast i32 %1054 to float, !dbg !103
  %1056 = fcmp ogt float %1052, %1055, !dbg !105
  %1057 = fcmp uno float %1052, 0.000000e+00, !dbg !106
  %1058 = or i1 %1056, %1057, !dbg !107
  %1059 = select i1 %1058, float %1052, float %1055, !dbg !108
  %1060 = bitcast float %1059 to i32, !dbg !103
  %1061 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1060, i32 1, i32 31), !dbg !103
  %1062 = bitcast i32 %1061 to float, !dbg !103
  %1063 = fcmp ogt float %1059, %1062, !dbg !105
  %1064 = fcmp uno float %1059, 0.000000e+00, !dbg !106
  %1065 = or i1 %1063, %1064, !dbg !107
  %1066 = select i1 %963, i32 %958, i32 %959, !dbg !108
  %1067 = insertelement <1 x i32> poison, i32 %1066, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %1067, i1 %382) #5, !dbg !103
  %1068 = select i1 %997, i32 %992, i32 %993, !dbg !108
  %1069 = insertelement <1 x i32> poison, i32 %1068, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %1069, i1 %382) #5, !dbg !103
  %1070 = select i1 %1031, i32 %1026, i32 %1027, !dbg !108
  %1071 = insertelement <1 x i32> poison, i32 %1070, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %1071, i1 %382) #5, !dbg !103
  %1072 = select i1 %1065, i32 %1060, i32 %1061, !dbg !108
  %1073 = insertelement <1 x i32> poison, i32 %1072, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %853, <1 x i32> %1073, i1 %382) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1074 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %392, i1 %856) #5, !dbg !103
  %1075 = bitcast i32 %1074 to float, !dbg !103
  %1076 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1074, i32 16, i32 31), !dbg !103
  %1077 = bitcast i32 %1076 to float, !dbg !103
  %1078 = fcmp ogt float %1075, %1077, !dbg !105
  %1079 = fcmp uno float %1075, 0.000000e+00, !dbg !106
  %1080 = or i1 %1079, %1078, !dbg !107
  %1081 = select i1 %1080, float %1075, float %1077, !dbg !108
  %1082 = bitcast float %1081 to i32, !dbg !103
  %1083 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1082, i32 8, i32 31), !dbg !103
  %1084 = bitcast i32 %1083 to float, !dbg !103
  %1085 = fcmp ogt float %1081, %1084, !dbg !105
  %1086 = fcmp uno float %1081, 0.000000e+00, !dbg !106
  %1087 = or i1 %1085, %1086, !dbg !107
  %1088 = select i1 %1087, float %1081, float %1084, !dbg !108
  %1089 = bitcast float %1088 to i32, !dbg !103
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1089, i32 4, i32 31), !dbg !103
  %1091 = bitcast i32 %1090 to float, !dbg !103
  %1092 = fcmp ogt float %1088, %1091, !dbg !105
  %1093 = fcmp uno float %1088, 0.000000e+00, !dbg !106
  %1094 = or i1 %1092, %1093, !dbg !107
  %1095 = select i1 %1094, float %1088, float %1091, !dbg !108
  %1096 = bitcast float %1095 to i32, !dbg !103
  %1097 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1096, i32 2, i32 31), !dbg !103
  %1098 = bitcast i32 %1097 to float, !dbg !103
  %1099 = fcmp ogt float %1095, %1098, !dbg !105
  %1100 = fcmp uno float %1095, 0.000000e+00, !dbg !106
  %1101 = or i1 %1099, %1100, !dbg !107
  %1102 = select i1 %1101, float %1095, float %1098, !dbg !108
  %1103 = bitcast float %1102 to i32, !dbg !103
  %1104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1103, i32 1, i32 31), !dbg !103
  %1105 = bitcast i32 %1104 to float, !dbg !103
  %1106 = fcmp ogt float %1102, %1105, !dbg !105
  %1107 = fcmp uno float %1102, 0.000000e+00, !dbg !106
  %1108 = or i1 %1106, %1107, !dbg !107
  %1109 = select i1 %1108, i32 %1103, i32 %1104, !dbg !108
  %1110 = insertelement <1 x i32> poison, i32 %1109, i64 0, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %1110, i1 %892) #5, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %1111 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !103
  %1112 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !103
  %1113 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), align 16, !dbg !103
  %1114 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 384), align 16, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %1115 = bitcast float %1111 to i32, !dbg !109
  %1116 = bitcast float %1112 to i32, !dbg !109
  %1117 = bitcast float %1113 to i32, !dbg !109
  %1118 = bitcast float %1114 to i32, !dbg !109
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1115, i32 %1116, i32 %1117, i32 %1118, i1 true) #5, !dbg !109
  tail call void @llvm.nvvm.barrier0(), !dbg !109
  %1119 = load float, ptr addrspace(3) %903, align 4, !dbg !109
  %1120 = sext i32 %189 to i64, !dbg !110
  %1121 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1120, !dbg !110
  %1122 = fptrunc float %904 to bfloat, !dbg !102
  %1123 = and i32 %21, 1020, !dbg !102
  %1124 = icmp eq i32 %1123, 0, !dbg !102
  %1125 = bitcast bfloat %1122 to i16, !dbg !102
  %1126 = and i1 %1124, %190, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1125, ptr addrspace(1) %1121, i1 %1126) #5, !dbg !102
  %1127 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1120, !dbg !111
  %1128 = fptrunc float %1119 to bfloat, !dbg !109
  %1129 = bitcast bfloat %1128 to i16, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1129, ptr addrspace(1) %1127, i1 %1126) #5, !dbg !109
  %1130 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1120, !dbg !112
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1125, ptr addrspace(1) %1130, i1 %1126) #5, !dbg !113
  %1131 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1120, !dbg !114
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1129, ptr addrspace(1) %1131, i1 %1126) #5, !dbg !115
  %1132 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1120, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1125, ptr addrspace(1) %1132, i1 %1126) #5, !dbg !117
  %1133 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1120, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1129, ptr addrspace(1) %1133, i1 %1126) #5, !dbg !119
  %1134 = getelementptr bfloat, ptr addrspace(1) %10, i64 %1120, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1125, ptr addrspace(1) %1134, i1 %1126) #5, !dbg !121
  %1135 = getelementptr bfloat, ptr addrspace(1) %11, i64 %1120, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1129, ptr addrspace(1) %1135, i1 %1126) #5, !dbg !123
  %1136 = insertelement <4 x float> poison, float %898, i64 0, !dbg !124
  %1137 = insertelement <4 x float> %1136, float %897, i64 1, !dbg !124
  %1138 = insertelement <4 x float> %1137, float %896, i64 2, !dbg !124
  %1139 = insertelement <4 x float> %1138, float %895, i64 3, !dbg !124
  %1140 = fcmp oge <4 x float> %1139, zeroinitializer, !dbg !124
  %1141 = select <4 x i1> %1140, <4 x float> zeroinitializer, <4 x float> %1139, !dbg !124
  %1142 = fsub <4 x float> zeroinitializer, %1141, !dbg !126
  %1143 = insertelement <4 x float> poison, float %1114, i64 0, !dbg !127
  %1144 = insertelement <4 x float> %1143, float %1113, i64 1, !dbg !127
  %1145 = insertelement <4 x float> %1144, float %1112, i64 2, !dbg !127
  %1146 = insertelement <4 x float> %1145, float %1111, i64 3, !dbg !127
  %1147 = fcmp ole <4 x float> %1146, zeroinitializer, !dbg !127
  %1148 = select <4 x i1> %1147, <4 x float> zeroinitializer, <4 x float> %1146, !dbg !127
  %1149 = fcmp ogt <4 x float> %1142, %1148, !dbg !129
  %1150 = fcmp uno <4 x float> %1142, zeroinitializer, !dbg !131
  %1151 = or <4 x i1> %1150, %1149, !dbg !132
  %1152 = select <4 x i1> %1151, <4 x float> %1142, <4 x float> %1148, !dbg !133
  %1153 = fmul <4 x float> %1152, splat (float 0x3F80204080000000), !dbg !134
  %1154 = fcmp ogt <4 x float> %1153, splat (float 0x3EE4F8B580000000), !dbg !135
  %1155 = extractelement <4 x float> %1153, i64 3, !dbg !137
  %1156 = fcmp uno float %1155, 0.000000e+00, !dbg !138
  %1157 = extractelement <4 x float> %1153, i64 2, !dbg !137
  %1158 = fcmp uno float %1157, 0.000000e+00, !dbg !138
  %1159 = extractelement <4 x float> %1153, i64 1, !dbg !137
  %1160 = fcmp uno float %1159, 0.000000e+00, !dbg !138
  %1161 = extractelement <4 x float> %1153, i64 0, !dbg !137
  %1162 = fcmp uno float %1161, 0.000000e+00, !dbg !138
  %1163 = extractelement <4 x i1> %1154, i64 3, !dbg !139
  %1164 = or i1 %1163, %1156, !dbg !139
  %1165 = extractelement <4 x i1> %1154, i64 2, !dbg !139
  %1166 = or i1 %1165, %1158, !dbg !139
  %1167 = extractelement <4 x i1> %1154, i64 1, !dbg !139
  %1168 = or i1 %1167, %1160, !dbg !139
  %1169 = extractelement <4 x i1> %1154, i64 0, !dbg !139
  %1170 = or i1 %1169, %1162, !dbg !139
  %1171 = select i1 %1164, float %1155, float 0x3EE4F8B580000000, !dbg !137
  %1172 = select i1 %1166, float %1157, float 0x3EE4F8B580000000, !dbg !137
  %1173 = select i1 %1168, float %1159, float 0x3EE4F8B580000000, !dbg !137
  %1174 = select i1 %1170, float %1161, float 0x3EE4F8B580000000, !dbg !137
  %1175 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1171), !dbg !140
  %1176 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1172), !dbg !140
  %1177 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1173), !dbg !140
  %1178 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1174), !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %1179 = bitcast float %1175 to <1 x i32>, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1179, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1179, i1 true) #5, !dbg !141
  %1180 = bitcast float %1176 to <1 x i32>, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1180, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1180, i1 true) #5, !dbg !141
  %1181 = bitcast float %1177 to <1 x i32>, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1181, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %1181, i1 true) #5, !dbg !141
  %1182 = bitcast float %1178 to <1 x i32>, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1182, i1 true) #5, !dbg !141
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %1182, i1 true) #5, !dbg !141
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %1183 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %383, !dbg !141
  %1184 = load float, ptr addrspace(3) %1183, align 8, !dbg !141
  %1185 = add i32 %30, %28, !dbg !142
  %1186 = sext i32 %1185 to i64, !dbg !143
  %1187 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1186, !dbg !143
  %1188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1187, i1 %25) #5, !dbg !144
  %1189 = extractvalue { i32, i32, i32, i32 } %1188, 0, !dbg !144
  %1190 = bitcast i32 %1189 to <2 x bfloat>, !dbg !144
  %1191 = extractvalue { i32, i32, i32, i32 } %1188, 1, !dbg !144
  %1192 = bitcast i32 %1191 to <2 x bfloat>, !dbg !144
  %1193 = extractvalue { i32, i32, i32, i32 } %1188, 2, !dbg !144
  %1194 = bitcast i32 %1193 to <2 x bfloat>, !dbg !144
  %1195 = extractvalue { i32, i32, i32, i32 } %1188, 3, !dbg !144
  %1196 = bitcast i32 %1195 to <2 x bfloat>, !dbg !144
  %1197 = extractelement <2 x bfloat> %1190, i64 0, !dbg !144
  %1198 = extractelement <2 x bfloat> %1190, i64 1, !dbg !144
  %1199 = extractelement <2 x bfloat> %1192, i64 0, !dbg !144
  %1200 = extractelement <2 x bfloat> %1192, i64 1, !dbg !144
  %1201 = extractelement <2 x bfloat> %1194, i64 0, !dbg !144
  %1202 = extractelement <2 x bfloat> %1194, i64 1, !dbg !144
  %1203 = extractelement <2 x bfloat> %1196, i64 0, !dbg !144
  %1204 = extractelement <2 x bfloat> %1196, i64 1, !dbg !144
  %1205 = fpext bfloat %1197 to float, !dbg !145
  %1206 = fpext bfloat %1198 to float, !dbg !145
  %1207 = fpext bfloat %1199 to float, !dbg !145
  %1208 = fpext bfloat %1200 to float, !dbg !145
  %1209 = fpext bfloat %1201 to float, !dbg !145
  %1210 = fpext bfloat %1202 to float, !dbg !145
  %1211 = fpext bfloat %1203 to float, !dbg !145
  %1212 = fpext bfloat %1204 to float, !dbg !145
  %1213 = fmul float %1184, %1205, !dbg !141
  %1214 = fmul float %1184, %1206, !dbg !141
  %1215 = fmul float %1184, %1207, !dbg !141
  %1216 = fmul float %1184, %1208, !dbg !141
  %1217 = fmul float %1184, %1209, !dbg !141
  %1218 = fmul float %1184, %1210, !dbg !141
  %1219 = fmul float %1184, %1211, !dbg !141
  %1220 = fmul float %1184, %1212, !dbg !141
  %1221 = tail call float @llvm.nvvm.round.f(float %1213) #5, !dbg !146
  %1222 = tail call float @llvm.nvvm.round.f(float %1214) #5, !dbg !146
  %1223 = tail call float @llvm.nvvm.round.f(float %1215) #5, !dbg !146
  %1224 = tail call float @llvm.nvvm.round.f(float %1216) #5, !dbg !146
  %1225 = tail call float @llvm.nvvm.round.f(float %1217) #5, !dbg !146
  %1226 = tail call float @llvm.nvvm.round.f(float %1218) #5, !dbg !146
  %1227 = tail call float @llvm.nvvm.round.f(float %1219) #5, !dbg !146
  %1228 = tail call float @llvm.nvvm.round.f(float %1220) #5, !dbg !146
  %1229 = insertelement <4 x float> poison, float %1221, i64 0, !dbg !147
  %1230 = insertelement <4 x float> %1229, float %1222, i64 1, !dbg !147
  %1231 = insertelement <4 x float> %1230, float %1223, i64 2, !dbg !147
  %1232 = insertelement <4 x float> %1231, float %1224, i64 3, !dbg !147
  %1233 = fcmp ogt <4 x float> %1232, splat (float -1.270000e+02), !dbg !147
  %1234 = fcmp uno <4 x float> %1232, zeroinitializer, !dbg !149
  %1235 = or <4 x i1> %1233, %1234, !dbg !150
  %1236 = select <4 x i1> %1235, <4 x float> %1232, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1237 = fcmp olt <4 x float> %1236, splat (float 1.270000e+02), !dbg !152
  %1238 = fcmp uno <4 x float> %1236, zeroinitializer, !dbg !154
  %1239 = or <4 x i1> %1237, %1238, !dbg !155
  %1240 = fptosi <4 x float> %1236 to <4 x i8>, !dbg !156
  %1241 = select <4 x i1> %1239, <4 x i8> %1240, <4 x i8> splat (i8 127), !dbg !157
  %1242 = insertelement <4 x float> poison, float %1225, i64 0, !dbg !147
  %1243 = insertelement <4 x float> %1242, float %1226, i64 1, !dbg !147
  %1244 = insertelement <4 x float> %1243, float %1227, i64 2, !dbg !147
  %1245 = insertelement <4 x float> %1244, float %1228, i64 3, !dbg !147
  %1246 = fcmp ogt <4 x float> %1245, splat (float -1.270000e+02), !dbg !147
  %1247 = fcmp uno <4 x float> %1245, zeroinitializer, !dbg !149
  %1248 = or <4 x i1> %1246, %1247, !dbg !150
  %1249 = select <4 x i1> %1248, <4 x float> %1245, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1250 = fcmp olt <4 x float> %1249, splat (float 1.270000e+02), !dbg !152
  %1251 = fcmp uno <4 x float> %1249, zeroinitializer, !dbg !154
  %1252 = or <4 x i1> %1250, %1251, !dbg !155
  %1253 = fptosi <4 x float> %1249 to <4 x i8>, !dbg !156
  %1254 = select <4 x i1> %1252, <4 x i8> %1253, <4 x i8> splat (i8 127), !dbg !157
  %1255 = getelementptr i8, ptr addrspace(1) %12, i64 %1186, !dbg !158
  %1256 = bitcast <4 x i8> %1241 to i32, !dbg !159
  %1257 = bitcast <4 x i8> %1254 to i32, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1256, i32 %1257, ptr addrspace(1) %1255, i1 %25) #5, !dbg !159
  %1258 = getelementptr i8, ptr addrspace(1) %13, i64 %1186, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1256, i32 %1257, ptr addrspace(1) %1258, i1 %25) #5, !dbg !161
  %1259 = getelementptr i8, ptr addrspace(1) %14, i64 %1186, !dbg !162
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1256, i32 %1257, ptr addrspace(1) %1259, i1 %25) #5, !dbg !163
  %1260 = getelementptr i8, ptr addrspace(1) %15, i64 %1186, !dbg !164
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1256, i32 %1257, ptr addrspace(1) %1260, i1 %25) #5, !dbg !165
  %1261 = or disjoint i64 %31, 2048, !dbg !166
  %1262 = icmp samesign ult i64 %1261, 3072, !dbg !167
  %1263 = trunc nuw nsw i64 %1261 to i32, !dbg !142
  %1264 = add i32 %30, %1263, !dbg !142
  %1265 = sext i32 %1264 to i64, !dbg !143
  %1266 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1265, !dbg !143
  %1267 = and i1 %25, %1262, !dbg !168
  %1268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1266, i1 %1267) #5, !dbg !144
  %1269 = extractvalue { i32, i32, i32, i32 } %1268, 0, !dbg !144
  %1270 = bitcast i32 %1269 to <2 x bfloat>, !dbg !144
  %1271 = extractvalue { i32, i32, i32, i32 } %1268, 1, !dbg !144
  %1272 = bitcast i32 %1271 to <2 x bfloat>, !dbg !144
  %1273 = extractvalue { i32, i32, i32, i32 } %1268, 2, !dbg !144
  %1274 = bitcast i32 %1273 to <2 x bfloat>, !dbg !144
  %1275 = extractvalue { i32, i32, i32, i32 } %1268, 3, !dbg !144
  %1276 = bitcast i32 %1275 to <2 x bfloat>, !dbg !144
  %1277 = extractelement <2 x bfloat> %1270, i64 0, !dbg !144
  %1278 = extractelement <2 x bfloat> %1270, i64 1, !dbg !144
  %1279 = extractelement <2 x bfloat> %1272, i64 0, !dbg !144
  %1280 = extractelement <2 x bfloat> %1272, i64 1, !dbg !144
  %1281 = extractelement <2 x bfloat> %1274, i64 0, !dbg !144
  %1282 = extractelement <2 x bfloat> %1274, i64 1, !dbg !144
  %1283 = extractelement <2 x bfloat> %1276, i64 0, !dbg !144
  %1284 = extractelement <2 x bfloat> %1276, i64 1, !dbg !144
  %1285 = fpext bfloat %1277 to float, !dbg !145
  %1286 = fpext bfloat %1278 to float, !dbg !145
  %1287 = fpext bfloat %1279 to float, !dbg !145
  %1288 = fpext bfloat %1280 to float, !dbg !145
  %1289 = fpext bfloat %1281 to float, !dbg !145
  %1290 = fpext bfloat %1282 to float, !dbg !145
  %1291 = fpext bfloat %1283 to float, !dbg !145
  %1292 = fpext bfloat %1284 to float, !dbg !145
  %1293 = fmul float %1184, %1285, !dbg !141
  %1294 = fmul float %1184, %1286, !dbg !141
  %1295 = fmul float %1184, %1287, !dbg !141
  %1296 = fmul float %1184, %1288, !dbg !141
  %1297 = fmul float %1184, %1289, !dbg !141
  %1298 = fmul float %1184, %1290, !dbg !141
  %1299 = fmul float %1184, %1291, !dbg !141
  %1300 = fmul float %1184, %1292, !dbg !141
  %1301 = tail call float @llvm.nvvm.round.f(float %1293) #5, !dbg !146
  %1302 = tail call float @llvm.nvvm.round.f(float %1294) #5, !dbg !146
  %1303 = tail call float @llvm.nvvm.round.f(float %1295) #5, !dbg !146
  %1304 = tail call float @llvm.nvvm.round.f(float %1296) #5, !dbg !146
  %1305 = tail call float @llvm.nvvm.round.f(float %1297) #5, !dbg !146
  %1306 = tail call float @llvm.nvvm.round.f(float %1298) #5, !dbg !146
  %1307 = tail call float @llvm.nvvm.round.f(float %1299) #5, !dbg !146
  %1308 = tail call float @llvm.nvvm.round.f(float %1300) #5, !dbg !146
  %1309 = insertelement <4 x float> poison, float %1301, i64 0, !dbg !147
  %1310 = insertelement <4 x float> %1309, float %1302, i64 1, !dbg !147
  %1311 = insertelement <4 x float> %1310, float %1303, i64 2, !dbg !147
  %1312 = insertelement <4 x float> %1311, float %1304, i64 3, !dbg !147
  %1313 = fcmp ogt <4 x float> %1312, splat (float -1.270000e+02), !dbg !147
  %1314 = fcmp uno <4 x float> %1312, zeroinitializer, !dbg !149
  %1315 = or <4 x i1> %1313, %1314, !dbg !150
  %1316 = select <4 x i1> %1315, <4 x float> %1312, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1317 = fcmp olt <4 x float> %1316, splat (float 1.270000e+02), !dbg !152
  %1318 = fcmp uno <4 x float> %1316, zeroinitializer, !dbg !154
  %1319 = or <4 x i1> %1317, %1318, !dbg !155
  %1320 = fptosi <4 x float> %1316 to <4 x i8>, !dbg !156
  %1321 = select <4 x i1> %1319, <4 x i8> %1320, <4 x i8> splat (i8 127), !dbg !157
  %1322 = insertelement <4 x float> poison, float %1305, i64 0, !dbg !147
  %1323 = insertelement <4 x float> %1322, float %1306, i64 1, !dbg !147
  %1324 = insertelement <4 x float> %1323, float %1307, i64 2, !dbg !147
  %1325 = insertelement <4 x float> %1324, float %1308, i64 3, !dbg !147
  %1326 = fcmp ogt <4 x float> %1325, splat (float -1.270000e+02), !dbg !147
  %1327 = fcmp uno <4 x float> %1325, zeroinitializer, !dbg !149
  %1328 = or <4 x i1> %1326, %1327, !dbg !150
  %1329 = select <4 x i1> %1328, <4 x float> %1325, <4 x float> splat (float -1.270000e+02), !dbg !151
  %1330 = fcmp olt <4 x float> %1329, splat (float 1.270000e+02), !dbg !152
  %1331 = fcmp uno <4 x float> %1329, zeroinitializer, !dbg !154
  %1332 = or <4 x i1> %1330, %1331, !dbg !155
  %1333 = fptosi <4 x float> %1329 to <4 x i8>, !dbg !156
  %1334 = select <4 x i1> %1332, <4 x i8> %1333, <4 x i8> splat (i8 127), !dbg !157
  %1335 = getelementptr i8, ptr addrspace(1) %12, i64 %1265, !dbg !158
  %1336 = bitcast <4 x i8> %1321 to i32, !dbg !159
  %1337 = bitcast <4 x i8> %1334 to i32, !dbg !159
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1336, i32 %1337, ptr addrspace(1) %1335, i1 %1267) #5, !dbg !159
  %1338 = getelementptr i8, ptr addrspace(1) %13, i64 %1265, !dbg !160
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1336, i32 %1337, ptr addrspace(1) %1338, i1 %1267) #5, !dbg !161
  %1339 = getelementptr i8, ptr addrspace(1) %14, i64 %1265, !dbg !162
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1336, i32 %1337, ptr addrspace(1) %1339, i1 %1267) #5, !dbg !163
  %1340 = getelementptr i8, ptr addrspace(1) %15, i64 %1265, !dbg !164
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1336, i32 %1337, ptr addrspace(1) %1340, i1 %1267) #5, !dbg !165
  ret void, !dbg !169
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctsirzfzzd3q6hzmst3ijql2wxprbyku6agjaau5y4tork4ec7an.py", directory: "/tmp/torchinductor_root/ts")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 44, column: 62, scope: !6)
!22 = !DILocation(line: 46, column: 66, scope: !6)
!23 = !DILocation(line: 33, column: 31, scope: !6)
!24 = !DILocation(line: 34, column: 29, scope: !6)
!25 = !DILocation(line: 38, column: 61, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 42, column: 51, scope: !6)
!30 = !DILocation(line: 209, column: 30, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 210, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 210, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 211, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 211, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 211, column: 22, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 203, column: 7, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 45, column: 58, scope: !6)
!38 = !DILocation(line: 217, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!40 = !DILocation(line: 47, column: 79, scope: !6)
!41 = !DILocation(line: 218, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 219, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 219, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 219, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 221, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 221, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 222, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 222, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 222, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 222, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 222, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 229, column: 46, scope: !27, inlinedAt: !40)
!53 = !DILocation(line: 67, column: 24, scope: !6)
!54 = !DILocation(line: 69, column: 24, scope: !6)
!55 = !DILocation(line: 70, column: 32, scope: !6)
!56 = !DILocation(line: 53, column: 40, scope: !6)
!57 = !DILocation(line: 54, column: 31, scope: !6)
!58 = !DILocation(line: 55, column: 29, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 61, scope: !6)
!62 = !DILocation(line: 59, column: 51, scope: !6)
!63 = !DILocation(line: 59, column: 113, scope: !6)
!64 = !DILocation(line: 60, column: 42, scope: !6)
!65 = !DILocation(line: 60, column: 35, scope: !6)
!66 = !DILocation(line: 60, column: 49, scope: !6)
!67 = !DILocation(line: 61, column: 35, scope: !6)
!68 = !DILocation(line: 61, column: 49, scope: !6)
!69 = !DILocation(line: 62, column: 35, scope: !6)
!70 = !DILocation(line: 62, column: 42, scope: !6)
!71 = !DILocation(line: 63, column: 35, scope: !6)
!72 = !DILocation(line: 63, column: 42, scope: !6)
!73 = !DILocation(line: 65, column: 24, scope: !6)
!74 = !DILocation(line: 71, column: 24, scope: !6)
!75 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !76)
!76 = !DILocation(line: 82, column: 47, scope: !6)
!77 = !DILocation(line: 61, column: 102, scope: !6)
!78 = !DILocation(line: 63, column: 95, scope: !6)
!79 = !DILocation(line: 74, column: 24, scope: !6)
!80 = !DILocation(line: 76, column: 24, scope: !6)
!81 = !DILocation(line: 77, column: 24, scope: !6)
!82 = !DILocation(line: 79, column: 24, scope: !6)
!83 = !DILocation(line: 80, column: 24, scope: !6)
!84 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !76)
!85 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !76)
!86 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !76)
!87 = !DILocation(line: 83, column: 50, scope: !6)
!88 = !DILocation(line: 86, column: 53, scope: !6)
!89 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !90)
!90 = !DILocation(line: 84, column: 47, scope: !6)
!91 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !90)
!92 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !90)
!93 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !90)
!94 = !DILocation(line: 85, column: 50, scope: !6)
!95 = !DILocation(line: 86, column: 29, scope: !6)
!96 = !DILocation(line: 110, column: 29, scope: !27, inlinedAt: !97)
!97 = !DILocation(line: 87, column: 40, scope: !6)
!98 = !DILocation(line: 94, column: 15, scope: !39, inlinedAt: !97)
!99 = !DILocation(line: 96, column: 16, scope: !39, inlinedAt: !97)
!100 = !DILocation(line: 97, column: 29, scope: !39, inlinedAt: !97)
!101 = !DILocation(line: 96, column: 21, scope: !39, inlinedAt: !97)
!102 = !DILocation(line: 89, column: 37, scope: !6)
!103 = !DILocation(line: 115, column: 29, scope: !27, inlinedAt: !104)
!104 = !DILocation(line: 88, column: 40, scope: !6)
!105 = !DILocation(line: 102, column: 15, scope: !39, inlinedAt: !104)
!106 = !DILocation(line: 104, column: 21, scope: !39, inlinedAt: !104)
!107 = !DILocation(line: 104, column: 16, scope: !39, inlinedAt: !104)
!108 = !DILocation(line: 105, column: 29, scope: !39, inlinedAt: !104)
!109 = !DILocation(line: 90, column: 37, scope: !6)
!110 = !DILocation(line: 89, column: 25, scope: !6)
!111 = !DILocation(line: 90, column: 25, scope: !6)
!112 = !DILocation(line: 91, column: 25, scope: !6)
!113 = !DILocation(line: 91, column: 37, scope: !6)
!114 = !DILocation(line: 92, column: 25, scope: !6)
!115 = !DILocation(line: 92, column: 37, scope: !6)
!116 = !DILocation(line: 93, column: 25, scope: !6)
!117 = !DILocation(line: 93, column: 37, scope: !6)
!118 = !DILocation(line: 94, column: 25, scope: !6)
!119 = !DILocation(line: 94, column: 37, scope: !6)
!120 = !DILocation(line: 95, column: 25, scope: !6)
!121 = !DILocation(line: 95, column: 37, scope: !6)
!122 = !DILocation(line: 96, column: 26, scope: !6)
!123 = !DILocation(line: 96, column: 38, scope: !6)
!124 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !125)
!125 = !DILocation(line: 105, column: 46, scope: !6)
!126 = !DILocation(line: 106, column: 17, scope: !6)
!127 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !128)
!128 = !DILocation(line: 107, column: 46, scope: !6)
!129 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !130)
!130 = !DILocation(line: 108, column: 46, scope: !6)
!131 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !130)
!132 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !130)
!133 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !130)
!134 = !DILocation(line: 110, column: 24, scope: !6)
!135 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !136)
!136 = !DILocation(line: 113, column: 46, scope: !6)
!137 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !136)
!138 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !136)
!139 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !136)
!140 = !DILocation(line: 116, column: 25, scope: !6)
!141 = !DILocation(line: 119, column: 24, scope: !6)
!142 = !DILocation(line: 103, column: 43, scope: !6)
!143 = !DILocation(line: 103, column: 36, scope: !6)
!144 = !DILocation(line: 103, column: 53, scope: !6)
!145 = !DILocation(line: 103, column: 115, scope: !6)
!146 = !DILocation(line: 120, column: 36, scope: !6)
!147 = !DILocation(line: 102, column: 15, scope: !27, inlinedAt: !148)
!148 = !DILocation(line: 123, column: 46, scope: !6)
!149 = !DILocation(line: 104, column: 21, scope: !27, inlinedAt: !148)
!150 = !DILocation(line: 104, column: 16, scope: !27, inlinedAt: !148)
!151 = !DILocation(line: 105, column: 29, scope: !27, inlinedAt: !148)
!152 = !DILocation(line: 94, column: 15, scope: !27, inlinedAt: !153)
!153 = !DILocation(line: 125, column: 46, scope: !6)
!154 = !DILocation(line: 96, column: 21, scope: !27, inlinedAt: !153)
!155 = !DILocation(line: 96, column: 16, scope: !27, inlinedAt: !153)
!156 = !DILocation(line: 127, column: 25, scope: !6)
!157 = !DILocation(line: 97, column: 29, scope: !27, inlinedAt: !153)
!158 = !DILocation(line: 128, column: 30, scope: !6)
!159 = !DILocation(line: 128, column: 54, scope: !6)
!160 = !DILocation(line: 129, column: 30, scope: !6)
!161 = !DILocation(line: 129, column: 54, scope: !6)
!162 = !DILocation(line: 130, column: 30, scope: !6)
!163 = !DILocation(line: 130, column: 54, scope: !6)
!164 = !DILocation(line: 131, column: 30, scope: !6)
!165 = !DILocation(line: 131, column: 54, scope: !6)
!166 = !DILocation(line: 98, column: 31, scope: !6)
!167 = !DILocation(line: 99, column: 29, scope: !6)
!168 = !DILocation(line: 103, column: 63, scope: !6)
!169 = !DILocation(line: 97, column: 4, scope: !6)
