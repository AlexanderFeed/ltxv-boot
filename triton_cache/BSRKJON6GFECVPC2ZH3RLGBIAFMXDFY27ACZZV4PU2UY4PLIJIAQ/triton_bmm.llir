; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_bmm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 16, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 16, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 16, !dbg !19
  %17 = and i32 %15, 64, !dbg !19
  %18 = lshr i32 %15, 4, !dbg !19
  %19 = and i32 %18, 7, !dbg !19
  %20 = and i32 %15, 4, !dbg !19
  %21 = lshr i32 %15, 2, !dbg !19
  %22 = and i32 %21, 8, !dbg !19
  %23 = and i32 %21, 15, !dbg !19
  %24 = lshr exact i32 %17, 2, !dbg !19
  %25 = or disjoint i32 %23, %24, !dbg !19
  %26 = or disjoint i32 %25, 32, !dbg !19
  %27 = or disjoint i32 %14, %19, !dbg !20
  %28 = or disjoint i32 %27, 8, !dbg !20
  %29 = or disjoint i32 %27, 16, !dbg !20
  %30 = or disjoint i32 %27, 24, !dbg !20
  %31 = or disjoint i32 %27, 32, !dbg !20
  %32 = or disjoint i32 %27, 40, !dbg !20
  %33 = or disjoint i32 %27, 48, !dbg !20
  %34 = or disjoint i32 %27, 56, !dbg !20
  %35 = shl nsw i32 %13, 5, !dbg !21
  %36 = shl i32 %15, 3, !dbg !22
  %37 = and i32 %36, 8, !dbg !22
  %38 = and i32 %15, 2, !dbg !22
  %39 = shl nuw nsw i32 %38, 3, !dbg !22
  %40 = or disjoint i32 %37, %39, !dbg !22
  %41 = or disjoint i32 %35, %40, !dbg !23
  %42 = srem i32 %27, 512, !dbg !24
  %43 = srem i32 %28, 512, !dbg !24
  %44 = srem i32 %29, 512, !dbg !24
  %45 = srem i32 %30, 512, !dbg !24
  %46 = srem i32 %31, 512, !dbg !24
  %47 = srem i32 %32, 512, !dbg !24
  %48 = srem i32 %33, 512, !dbg !24
  %49 = srem i32 %34, 512, !dbg !24
  %50 = srem i32 %41, 64, !dbg !25
  %51 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !26
  %52 = shl nsw i32 %42, 9, !dbg !27
  %53 = shl nsw i32 %43, 9, !dbg !27
  %54 = shl nsw i32 %44, 9, !dbg !27
  %55 = shl nsw i32 %45, 9, !dbg !27
  %56 = shl nsw i32 %46, 9, !dbg !27
  %57 = shl nsw i32 %47, 9, !dbg !27
  %58 = shl nsw i32 %48, 9, !dbg !27
  %59 = shl nsw i32 %49, 9, !dbg !27
  %60 = shl nuw nsw i32 %20, 3, !dbg !28
  %61 = or disjoint i32 %40, %60, !dbg !28
  %62 = and i32 %36, 64, !dbg !28
  %63 = or disjoint i32 %61, %62, !dbg !28
  %64 = shl i32 %51, 18, !dbg !29
  %65 = or disjoint i32 %63, %64, !dbg !30
  %66 = add i32 %65, %52, !dbg !31
  %67 = add i32 %65, %53, !dbg !31
  %68 = add i32 %65, %54, !dbg !31
  %69 = add i32 %65, %55, !dbg !31
  %70 = add i32 %65, %56, !dbg !31
  %71 = add i32 %65, %57, !dbg !31
  %72 = add i32 %65, %58, !dbg !31
  %73 = add i32 %65, %59, !dbg !31
  %74 = sext i32 %66 to i64, !dbg !32
  %75 = getelementptr bfloat, ptr addrspace(1) %0, i64 %74, !dbg !32
  %76 = sext i32 %67 to i64, !dbg !32
  %77 = getelementptr bfloat, ptr addrspace(1) %0, i64 %76, !dbg !32
  %78 = sext i32 %68 to i64, !dbg !32
  %79 = getelementptr bfloat, ptr addrspace(1) %0, i64 %78, !dbg !32
  %80 = sext i32 %69 to i64, !dbg !32
  %81 = getelementptr bfloat, ptr addrspace(1) %0, i64 %80, !dbg !32
  %82 = sext i32 %70 to i64, !dbg !32
  %83 = getelementptr bfloat, ptr addrspace(1) %0, i64 %82, !dbg !32
  %84 = sext i32 %71 to i64, !dbg !32
  %85 = getelementptr bfloat, ptr addrspace(1) %0, i64 %84, !dbg !32
  %86 = sext i32 %72 to i64, !dbg !32
  %87 = getelementptr bfloat, ptr addrspace(1) %0, i64 %86, !dbg !32
  %88 = sext i32 %73 to i64, !dbg !32
  %89 = getelementptr bfloat, ptr addrspace(1) %0, i64 %88, !dbg !32
  %90 = shl nuw nsw i32 %25, 12, !dbg !33
  %91 = shl nuw nsw i32 %26, 12, !dbg !33
  %92 = shl i32 %51, 6, !dbg !34
  %93 = add i32 %50, %92, !dbg !35
  %94 = add i32 %93, %90, !dbg !36
  %95 = add i32 %93, %91, !dbg !36
  %96 = add i32 %93, 262144, !dbg !35
  %97 = add i32 %96, %90, !dbg !36
  %98 = add i32 %93, 393216, !dbg !35
  %99 = add i32 %98, %90, !dbg !36
  %100 = sext i32 %94 to i64, !dbg !37
  %101 = getelementptr bfloat, ptr addrspace(1) %1, i64 %100, !dbg !37
  %102 = sext i32 %95 to i64, !dbg !37
  %103 = getelementptr bfloat, ptr addrspace(1) %1, i64 %102, !dbg !37
  %104 = sext i32 %97 to i64, !dbg !37
  %105 = getelementptr bfloat, ptr addrspace(1) %1, i64 %104, !dbg !37
  %106 = sext i32 %99 to i64, !dbg !37
  %107 = getelementptr bfloat, ptr addrspace(1) %1, i64 %106, !dbg !37
  %108 = lshr exact i32 %16, 1, !dbg !38
  %109 = lshr i32 %15, 1, !dbg !38
  %110 = and i32 %109, 56, !dbg !38
  %111 = xor i32 %63, %110, !dbg !38
  %112 = shl nuw nsw i32 %19, 7, !dbg !38
  %113 = or i32 %111, %112, !dbg !38
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %113, !dbg !38
  %115 = or i32 %113, 1024, !dbg !38
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %115, !dbg !38
  %117 = or i32 %113, 2048, !dbg !38
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %117, !dbg !38
  %119 = or i32 %113, 3072, !dbg !38
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %119, !dbg !38
  %121 = or i32 %113, 4096, !dbg !38
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %121, !dbg !38
  %123 = or i32 %113, 5120, !dbg !38
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %123, !dbg !38
  %125 = or i32 %113, 6144, !dbg !38
  %126 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %125, !dbg !38
  %127 = or i32 %113, 7168, !dbg !38
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %127, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %75, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %77, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %118, ptr addrspace(1) %79, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %120, ptr addrspace(1) %81, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %122, ptr addrspace(1) %83, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %85, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %126, ptr addrspace(1) %87, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %89, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %and.ra = and i32 %15, 24, !dbg !39
  %129 = xor i32 %40, %and.ra, !dbg !39
  %130 = shl nuw nsw i32 %25, 5, !dbg !39
  %131 = or disjoint i32 %130, %129, !dbg !39
  %132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %131, !dbg !39
  %133 = or disjoint i32 %131, 1024, !dbg !39
  %134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %133, !dbg !39
  %135 = or disjoint i32 %131, 2048, !dbg !39
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %135, !dbg !39
  %137 = or disjoint i32 %131, 3072, !dbg !39
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %137, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %132, ptr addrspace(1) %101, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %134, ptr addrspace(1) %103, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %136, ptr addrspace(1) %105, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %107, i32 16) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %139 = getelementptr i8, ptr addrspace(1) %75, i64 256, !dbg !40
  %140 = getelementptr i8, ptr addrspace(1) %77, i64 256, !dbg !40
  %141 = getelementptr i8, ptr addrspace(1) %79, i64 256, !dbg !40
  %142 = getelementptr i8, ptr addrspace(1) %81, i64 256, !dbg !40
  %143 = getelementptr i8, ptr addrspace(1) %83, i64 256, !dbg !40
  %144 = getelementptr i8, ptr addrspace(1) %85, i64 256, !dbg !40
  %145 = getelementptr i8, ptr addrspace(1) %87, i64 256, !dbg !40
  %146 = getelementptr i8, ptr addrspace(1) %89, i64 256, !dbg !40
  %147 = getelementptr i8, ptr addrspace(1) %101, i64 1048576, !dbg !41
  %148 = getelementptr i8, ptr addrspace(1) %103, i64 1048576, !dbg !41
  %149 = getelementptr i8, ptr addrspace(1) %105, i64 1048576, !dbg !41
  %150 = getelementptr i8, ptr addrspace(1) %107, i64 1048576, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %113, !dbg !38
  %152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %115, !dbg !38
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %117, !dbg !38
  %154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %119, !dbg !38
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %121, !dbg !38
  %156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %123, !dbg !38
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %125, !dbg !38
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %127, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %151, ptr addrspace(1) %139, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %152, ptr addrspace(1) %140, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %153, ptr addrspace(1) %141, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %154, ptr addrspace(1) %142, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %155, ptr addrspace(1) %143, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %156, ptr addrspace(1) %144, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %145, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %158, ptr addrspace(1) %146, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %131, !dbg !39
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %133, !dbg !39
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %135, !dbg !39
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %137, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %159, ptr addrspace(1) %147, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %160, ptr addrspace(1) %148, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %161, ptr addrspace(1) %149, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %162, ptr addrspace(1) %150, i32 16) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %163 = getelementptr i8, ptr addrspace(1) %75, i64 512, !dbg !40
  %164 = getelementptr i8, ptr addrspace(1) %77, i64 512, !dbg !40
  %165 = getelementptr i8, ptr addrspace(1) %79, i64 512, !dbg !40
  %166 = getelementptr i8, ptr addrspace(1) %81, i64 512, !dbg !40
  %167 = getelementptr i8, ptr addrspace(1) %83, i64 512, !dbg !40
  %168 = getelementptr i8, ptr addrspace(1) %85, i64 512, !dbg !40
  %169 = getelementptr i8, ptr addrspace(1) %87, i64 512, !dbg !40
  %170 = getelementptr i8, ptr addrspace(1) %89, i64 512, !dbg !40
  %171 = getelementptr i8, ptr addrspace(1) %101, i64 2097152, !dbg !41
  %172 = getelementptr i8, ptr addrspace(1) %103, i64 2097152, !dbg !41
  %173 = getelementptr i8, ptr addrspace(1) %105, i64 2097152, !dbg !41
  %174 = getelementptr i8, ptr addrspace(1) %107, i64 2097152, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %113, !dbg !38
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %115, !dbg !38
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %117, !dbg !38
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %119, !dbg !38
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %121, !dbg !38
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %123, !dbg !38
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %125, !dbg !38
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %127, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %175, ptr addrspace(1) %163, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %164, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %165, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %166, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %167, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %180, ptr addrspace(1) %168, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %169, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %170, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %131, !dbg !39
  %184 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %133, !dbg !39
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %135, !dbg !39
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %137, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %183, ptr addrspace(1) %171, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %184, ptr addrspace(1) %172, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %185, ptr addrspace(1) %173, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %186, ptr addrspace(1) %174, i32 16) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %187 = getelementptr i8, ptr addrspace(1) %75, i64 768, !dbg !40
  %188 = getelementptr i8, ptr addrspace(1) %77, i64 768, !dbg !40
  %189 = getelementptr i8, ptr addrspace(1) %79, i64 768, !dbg !40
  %190 = getelementptr i8, ptr addrspace(1) %81, i64 768, !dbg !40
  %191 = getelementptr i8, ptr addrspace(1) %83, i64 768, !dbg !40
  %192 = getelementptr i8, ptr addrspace(1) %85, i64 768, !dbg !40
  %193 = getelementptr i8, ptr addrspace(1) %87, i64 768, !dbg !40
  %194 = getelementptr i8, ptr addrspace(1) %89, i64 768, !dbg !40
  %195 = getelementptr i8, ptr addrspace(1) %101, i64 3145728, !dbg !41
  %196 = getelementptr i8, ptr addrspace(1) %103, i64 3145728, !dbg !41
  %197 = getelementptr i8, ptr addrspace(1) %105, i64 3145728, !dbg !41
  %198 = getelementptr i8, ptr addrspace(1) %107, i64 3145728, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %199 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %113, !dbg !38
  %200 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %115, !dbg !38
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %117, !dbg !38
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %119, !dbg !38
  %203 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %121, !dbg !38
  %204 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %123, !dbg !38
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %125, !dbg !38
  %206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %127, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %199, ptr addrspace(1) %187, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %200, ptr addrspace(1) %188, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %201, ptr addrspace(1) %189, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %202, ptr addrspace(1) %190, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %203, ptr addrspace(1) %191, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %204, ptr addrspace(1) %192, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %205, ptr addrspace(1) %193, i32 16) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %206, ptr addrspace(1) %194, i32 16) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %207 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %131, !dbg !39
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %133, !dbg !39
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %135, !dbg !39
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %137, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %207, ptr addrspace(1) %195, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %208, ptr addrspace(1) %196, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %209, ptr addrspace(1) %197, i32 16) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %198, i32 16) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %invariant.op = or disjoint i32 %24, 32, !dbg !42
  %invariant.op235 = or disjoint i32 %16, 32, !dbg !42
  %211 = and i32 %15, 15
  %212 = xor i32 %61, %108
  %213 = or disjoint i32 %24, %211
  %214 = shl nuw nsw i32 %213, 7
  %215 = or disjoint i32 %212, %214
  %216 = or disjoint i32 %37, 16
  %217 = xor i32 %216, %39
  %218 = or disjoint i32 %217, %60
  %219 = xor i32 %218, %108
  %220 = or disjoint i32 %219, %214
  %221 = or disjoint i32 %40, 32
  %222 = or disjoint i32 %108, %60
  %223 = xor i32 %222, %221
  %224 = or disjoint i32 %223, %214
  %225 = or disjoint i32 %37, 48
  %226 = or disjoint i32 %222, %39
  %227 = xor i32 %226, %225
  %228 = or disjoint i32 %227, %214
  %229 = or disjoint i32 %61, 64
  %230 = xor i32 %229, %108
  %231 = or disjoint i32 %230, %214
  %232 = or disjoint i32 %37, 80
  %233 = xor i32 %232, %39
  %234 = or disjoint i32 %233, %60
  %235 = xor i32 %234, %108
  %236 = or disjoint i32 %235, %214
  %237 = or disjoint i32 %40, 96
  %238 = xor i32 %222, %237
  %239 = or disjoint i32 %238, %214
  %240 = or disjoint i32 %37, 112
  %241 = xor i32 %226, %240
  %242 = or disjoint i32 %241, %214
  %.reass = or disjoint i32 %211, %invariant.op
  %243 = shl nuw nsw i32 %.reass, 7
  %244 = or disjoint i32 %212, %243
  %245 = or disjoint i32 %219, %243
  %246 = or disjoint i32 %223, %243
  %247 = or disjoint i32 %227, %243
  %248 = or disjoint i32 %230, %243
  %249 = or disjoint i32 %235, %243
  %250 = or disjoint i32 %238, %243
  %251 = or disjoint i32 %241, %243
  %252 = shl nuw nsw i32 %38, 2
  %253 = shl nuw nsw i32 %20, 2
  %254 = or disjoint i32 %252, %253
  %255 = xor i32 %254, %22
  %256 = shl i32 %15, 5
  %257 = and i32 %256, 992
  %258 = or disjoint i32 %255, %257
  %.reass236 = or disjoint i32 %211, %invariant.op235
  %259 = shl nuw nsw i32 %.reass236, 5
  %260 = or disjoint i32 %255, %259
  %261 = or disjoint i32 %257, 2048
  %262 = or disjoint i32 %255, %261
  %263 = or disjoint i32 %257, 3072
  %264 = or disjoint i32 %255, %263
  %265 = or disjoint i32 %252, 16
  %266 = or disjoint i32 %22, %253
  %267 = xor i32 %266, %265
  %268 = or disjoint i32 %267, %257
  %269 = or disjoint i32 %267, %259
  %270 = or disjoint i32 %267, %261
  %271 = or disjoint i32 %267, %263
  br label %272, !dbg !42

272:                                              ; preds = %4, %272
  %273 = phi i32 [ -1, %4 ], [ %294, %272 ]
  %274 = phi i32 [ 3, %4 ], [ %639, %272 ]
  %.pn145248 = phi ptr addrspace(1) [ %198, %4 ], [ %636, %272 ]
  %.pn161247 = phi ptr addrspace(1) [ %197, %4 ], [ %635, %272 ]
  %.pn177246 = phi ptr addrspace(1) [ %196, %4 ], [ %634, %272 ]
  %.pn193245 = phi ptr addrspace(1) [ %195, %4 ], [ %633, %272 ]
  %.pn17244 = phi ptr addrspace(1) [ %194, %4 ], [ %632, %272 ]
  %.pn33243 = phi ptr addrspace(1) [ %193, %4 ], [ %631, %272 ]
  %.pn49242 = phi ptr addrspace(1) [ %192, %4 ], [ %630, %272 ]
  %.pn65241 = phi ptr addrspace(1) [ %191, %4 ], [ %629, %272 ]
  %.pn81240 = phi ptr addrspace(1) [ %190, %4 ], [ %628, %272 ]
  %.pn97239 = phi ptr addrspace(1) [ %189, %4 ], [ %627, %272 ]
  %.pn113238 = phi ptr addrspace(1) [ %188, %4 ], [ %626, %272 ]
  %.pn129237 = phi ptr addrspace(1) [ %187, %4 ], [ %625, %272 ]
  %275 = phi float [ 0.000000e+00, %4 ], [ %606, %272 ]
  %276 = phi float [ 0.000000e+00, %4 ], [ %607, %272 ]
  %277 = phi float [ 0.000000e+00, %4 ], [ %608, %272 ]
  %278 = phi float [ 0.000000e+00, %4 ], [ %609, %272 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %611, %272 ]
  %280 = phi float [ 0.000000e+00, %4 ], [ %612, %272 ]
  %281 = phi float [ 0.000000e+00, %4 ], [ %613, %272 ]
  %282 = phi float [ 0.000000e+00, %4 ], [ %614, %272 ]
  %283 = phi float [ 0.000000e+00, %4 ], [ %616, %272 ]
  %284 = phi float [ 0.000000e+00, %4 ], [ %617, %272 ]
  %285 = phi float [ 0.000000e+00, %4 ], [ %618, %272 ]
  %286 = phi float [ 0.000000e+00, %4 ], [ %619, %272 ]
  %287 = phi float [ 0.000000e+00, %4 ], [ %621, %272 ]
  %288 = phi float [ 0.000000e+00, %4 ], [ %622, %272 ]
  %289 = phi float [ 0.000000e+00, %4 ], [ %623, %272 ]
  %290 = phi float [ 0.000000e+00, %4 ], [ %624, %272 ]
  %291 = phi i32 [ 0, %4 ], [ %654, %272 ]
  %292 = add i32 %273, 1, !dbg !42
  %293 = icmp slt i32 %292, 4, !dbg !42
  %294 = select i1 %293, i32 %292, i32 0, !dbg !42
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx = shl i32 %294, 14, !dbg !38
  %295 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %296 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %215, !dbg !38
  %297 = ptrtoint ptr addrspace(3) %296 to i32, !dbg !38
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %297) #1, !dbg !38
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !38
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !38
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !38
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !38
  %303 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %220, !dbg !38
  %304 = ptrtoint ptr addrspace(3) %303 to i32, !dbg !38
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %304) #1, !dbg !38
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !38
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !38
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !38
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !38
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %224, !dbg !38
  %311 = ptrtoint ptr addrspace(3) %310 to i32, !dbg !38
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %311) #1, !dbg !38
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !38
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !38
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !38
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !38
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %228, !dbg !38
  %318 = ptrtoint ptr addrspace(3) %317 to i32, !dbg !38
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %318) #1, !dbg !38
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !38
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !38
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !38
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !38
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %231, !dbg !38
  %325 = ptrtoint ptr addrspace(3) %324 to i32, !dbg !38
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %325) #1, !dbg !38
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !38
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !38
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !38
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !38
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %236, !dbg !38
  %332 = ptrtoint ptr addrspace(3) %331 to i32, !dbg !38
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %332) #1, !dbg !38
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !38
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !38
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !38
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !38
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %239, !dbg !38
  %339 = ptrtoint ptr addrspace(3) %338 to i32, !dbg !38
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %339) #1, !dbg !38
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !38
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !38
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !38
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !38
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %242, !dbg !38
  %346 = ptrtoint ptr addrspace(3) %345 to i32, !dbg !38
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #1, !dbg !38
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !38
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !38
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !38
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !38
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %244, !dbg !38
  %353 = ptrtoint ptr addrspace(3) %352 to i32, !dbg !38
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %353) #1, !dbg !38
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !38
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !38
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !38
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !38
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %245, !dbg !38
  %360 = ptrtoint ptr addrspace(3) %359 to i32, !dbg !38
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %360) #1, !dbg !38
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !38
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !38
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !38
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !38
  %366 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %246, !dbg !38
  %367 = ptrtoint ptr addrspace(3) %366 to i32, !dbg !38
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %367) #1, !dbg !38
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !38
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !38
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !38
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !38
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %247, !dbg !38
  %374 = ptrtoint ptr addrspace(3) %373 to i32, !dbg !38
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #1, !dbg !38
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !38
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !38
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !38
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !38
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %248, !dbg !38
  %381 = ptrtoint ptr addrspace(3) %380 to i32, !dbg !38
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %381) #1, !dbg !38
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !38
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !38
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !38
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !38
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %249, !dbg !38
  %388 = ptrtoint ptr addrspace(3) %387 to i32, !dbg !38
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %388) #1, !dbg !38
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !38
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !38
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !38
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !38
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %250, !dbg !38
  %395 = ptrtoint ptr addrspace(3) %394 to i32, !dbg !38
  %396 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %395) #1, !dbg !38
  %397 = extractvalue { i32, i32, i32, i32 } %396, 0, !dbg !38
  %398 = extractvalue { i32, i32, i32, i32 } %396, 1, !dbg !38
  %399 = extractvalue { i32, i32, i32, i32 } %396, 2, !dbg !38
  %400 = extractvalue { i32, i32, i32, i32 } %396, 3, !dbg !38
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %295, i32 %251, !dbg !38
  %402 = ptrtoint ptr addrspace(3) %401 to i32, !dbg !38
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %402) #1, !dbg !38
  %404 = extractvalue { i32, i32, i32, i32 } %403, 0, !dbg !38
  %405 = extractvalue { i32, i32, i32, i32 } %403, 1, !dbg !38
  %406 = extractvalue { i32, i32, i32, i32 } %403, 2, !dbg !38
  %407 = extractvalue { i32, i32, i32, i32 } %403, 3, !dbg !38
  %.idx216 = shl i32 %294, 13, !dbg !39
  %408 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx216, !dbg !39
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %258, !dbg !39
  %410 = ptrtoint ptr addrspace(3) %409 to i32, !dbg !39
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %410) #1, !dbg !39
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !39
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !39
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !39
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !39
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %260, !dbg !39
  %417 = ptrtoint ptr addrspace(3) %416 to i32, !dbg !39
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %417) #1, !dbg !39
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !39
  %420 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !39
  %421 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !39
  %422 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !39
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %262, !dbg !39
  %424 = ptrtoint ptr addrspace(3) %423 to i32, !dbg !39
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #1, !dbg !39
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !39
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !39
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !39
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !39
  %430 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %264, !dbg !39
  %431 = ptrtoint ptr addrspace(3) %430 to i32, !dbg !39
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %431) #1, !dbg !39
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !39
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !39
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !39
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !39
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %268, !dbg !39
  %438 = ptrtoint ptr addrspace(3) %437 to i32, !dbg !39
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #1, !dbg !39
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !39
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !39
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !39
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !39
  %444 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %269, !dbg !39
  %445 = ptrtoint ptr addrspace(3) %444 to i32, !dbg !39
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %445) #1, !dbg !39
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !39
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !39
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !39
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !39
  %451 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %270, !dbg !39
  %452 = ptrtoint ptr addrspace(3) %451 to i32, !dbg !39
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %452) #1, !dbg !39
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !39
  %455 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !39
  %456 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !39
  %457 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !39
  %458 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %408, i32 %271, !dbg !39
  %459 = ptrtoint ptr addrspace(3) %458 to i32, !dbg !39
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %459) #1, !dbg !39
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !39
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !39
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !39
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !39
  %465 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %275, float %276, float %277, float %278, i32 %299, i32 %300, i32 %301, i32 %302, i32 %412, i32 %413) #1, !dbg !43
  %466 = extractvalue { float, float, float, float } %465, 0, !dbg !43
  %467 = extractvalue { float, float, float, float } %465, 1, !dbg !43
  %468 = extractvalue { float, float, float, float } %465, 2, !dbg !43
  %469 = extractvalue { float, float, float, float } %465, 3, !dbg !43
  %470 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %279, float %280, float %281, float %282, i32 %299, i32 %300, i32 %301, i32 %302, i32 %440, i32 %441) #1, !dbg !43
  %471 = extractvalue { float, float, float, float } %470, 0, !dbg !43
  %472 = extractvalue { float, float, float, float } %470, 1, !dbg !43
  %473 = extractvalue { float, float, float, float } %470, 2, !dbg !43
  %474 = extractvalue { float, float, float, float } %470, 3, !dbg !43
  %475 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %283, float %284, float %285, float %286, i32 %355, i32 %356, i32 %357, i32 %358, i32 %412, i32 %413) #1, !dbg !43
  %476 = extractvalue { float, float, float, float } %475, 0, !dbg !43
  %477 = extractvalue { float, float, float, float } %475, 1, !dbg !43
  %478 = extractvalue { float, float, float, float } %475, 2, !dbg !43
  %479 = extractvalue { float, float, float, float } %475, 3, !dbg !43
  %480 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %287, float %288, float %289, float %290, i32 %355, i32 %356, i32 %357, i32 %358, i32 %440, i32 %441) #1, !dbg !43
  %481 = extractvalue { float, float, float, float } %480, 0, !dbg !43
  %482 = extractvalue { float, float, float, float } %480, 1, !dbg !43
  %483 = extractvalue { float, float, float, float } %480, 2, !dbg !43
  %484 = extractvalue { float, float, float, float } %480, 3, !dbg !43
  %485 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %466, float %467, float %468, float %469, i32 %306, i32 %307, i32 %308, i32 %309, i32 %414, i32 %415) #1, !dbg !43
  %486 = extractvalue { float, float, float, float } %485, 0, !dbg !43
  %487 = extractvalue { float, float, float, float } %485, 1, !dbg !43
  %488 = extractvalue { float, float, float, float } %485, 2, !dbg !43
  %489 = extractvalue { float, float, float, float } %485, 3, !dbg !43
  %490 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %471, float %472, float %473, float %474, i32 %306, i32 %307, i32 %308, i32 %309, i32 %442, i32 %443) #1, !dbg !43
  %491 = extractvalue { float, float, float, float } %490, 0, !dbg !43
  %492 = extractvalue { float, float, float, float } %490, 1, !dbg !43
  %493 = extractvalue { float, float, float, float } %490, 2, !dbg !43
  %494 = extractvalue { float, float, float, float } %490, 3, !dbg !43
  %495 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %476, float %477, float %478, float %479, i32 %362, i32 %363, i32 %364, i32 %365, i32 %414, i32 %415) #1, !dbg !43
  %496 = extractvalue { float, float, float, float } %495, 0, !dbg !43
  %497 = extractvalue { float, float, float, float } %495, 1, !dbg !43
  %498 = extractvalue { float, float, float, float } %495, 2, !dbg !43
  %499 = extractvalue { float, float, float, float } %495, 3, !dbg !43
  %500 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %481, float %482, float %483, float %484, i32 %362, i32 %363, i32 %364, i32 %365, i32 %442, i32 %443) #1, !dbg !43
  %501 = extractvalue { float, float, float, float } %500, 0, !dbg !43
  %502 = extractvalue { float, float, float, float } %500, 1, !dbg !43
  %503 = extractvalue { float, float, float, float } %500, 2, !dbg !43
  %504 = extractvalue { float, float, float, float } %500, 3, !dbg !43
  %505 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %486, float %487, float %488, float %489, i32 %313, i32 %314, i32 %315, i32 %316, i32 %419, i32 %420) #1, !dbg !43
  %506 = extractvalue { float, float, float, float } %505, 0, !dbg !43
  %507 = extractvalue { float, float, float, float } %505, 1, !dbg !43
  %508 = extractvalue { float, float, float, float } %505, 2, !dbg !43
  %509 = extractvalue { float, float, float, float } %505, 3, !dbg !43
  %510 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %491, float %492, float %493, float %494, i32 %313, i32 %314, i32 %315, i32 %316, i32 %447, i32 %448) #1, !dbg !43
  %511 = extractvalue { float, float, float, float } %510, 0, !dbg !43
  %512 = extractvalue { float, float, float, float } %510, 1, !dbg !43
  %513 = extractvalue { float, float, float, float } %510, 2, !dbg !43
  %514 = extractvalue { float, float, float, float } %510, 3, !dbg !43
  %515 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %496, float %497, float %498, float %499, i32 %369, i32 %370, i32 %371, i32 %372, i32 %419, i32 %420) #1, !dbg !43
  %516 = extractvalue { float, float, float, float } %515, 0, !dbg !43
  %517 = extractvalue { float, float, float, float } %515, 1, !dbg !43
  %518 = extractvalue { float, float, float, float } %515, 2, !dbg !43
  %519 = extractvalue { float, float, float, float } %515, 3, !dbg !43
  %520 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %501, float %502, float %503, float %504, i32 %369, i32 %370, i32 %371, i32 %372, i32 %447, i32 %448) #1, !dbg !43
  %521 = extractvalue { float, float, float, float } %520, 0, !dbg !43
  %522 = extractvalue { float, float, float, float } %520, 1, !dbg !43
  %523 = extractvalue { float, float, float, float } %520, 2, !dbg !43
  %524 = extractvalue { float, float, float, float } %520, 3, !dbg !43
  %525 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %506, float %507, float %508, float %509, i32 %320, i32 %321, i32 %322, i32 %323, i32 %421, i32 %422) #1, !dbg !43
  %526 = extractvalue { float, float, float, float } %525, 0, !dbg !43
  %527 = extractvalue { float, float, float, float } %525, 1, !dbg !43
  %528 = extractvalue { float, float, float, float } %525, 2, !dbg !43
  %529 = extractvalue { float, float, float, float } %525, 3, !dbg !43
  %530 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %511, float %512, float %513, float %514, i32 %320, i32 %321, i32 %322, i32 %323, i32 %449, i32 %450) #1, !dbg !43
  %531 = extractvalue { float, float, float, float } %530, 0, !dbg !43
  %532 = extractvalue { float, float, float, float } %530, 1, !dbg !43
  %533 = extractvalue { float, float, float, float } %530, 2, !dbg !43
  %534 = extractvalue { float, float, float, float } %530, 3, !dbg !43
  %535 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %516, float %517, float %518, float %519, i32 %376, i32 %377, i32 %378, i32 %379, i32 %421, i32 %422) #1, !dbg !43
  %536 = extractvalue { float, float, float, float } %535, 0, !dbg !43
  %537 = extractvalue { float, float, float, float } %535, 1, !dbg !43
  %538 = extractvalue { float, float, float, float } %535, 2, !dbg !43
  %539 = extractvalue { float, float, float, float } %535, 3, !dbg !43
  %540 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %521, float %522, float %523, float %524, i32 %376, i32 %377, i32 %378, i32 %379, i32 %449, i32 %450) #1, !dbg !43
  %541 = extractvalue { float, float, float, float } %540, 0, !dbg !43
  %542 = extractvalue { float, float, float, float } %540, 1, !dbg !43
  %543 = extractvalue { float, float, float, float } %540, 2, !dbg !43
  %544 = extractvalue { float, float, float, float } %540, 3, !dbg !43
  %545 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %526, float %527, float %528, float %529, i32 %327, i32 %328, i32 %329, i32 %330, i32 %426, i32 %427) #1, !dbg !43
  %546 = extractvalue { float, float, float, float } %545, 0, !dbg !43
  %547 = extractvalue { float, float, float, float } %545, 1, !dbg !43
  %548 = extractvalue { float, float, float, float } %545, 2, !dbg !43
  %549 = extractvalue { float, float, float, float } %545, 3, !dbg !43
  %550 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %531, float %532, float %533, float %534, i32 %327, i32 %328, i32 %329, i32 %330, i32 %454, i32 %455) #1, !dbg !43
  %551 = extractvalue { float, float, float, float } %550, 0, !dbg !43
  %552 = extractvalue { float, float, float, float } %550, 1, !dbg !43
  %553 = extractvalue { float, float, float, float } %550, 2, !dbg !43
  %554 = extractvalue { float, float, float, float } %550, 3, !dbg !43
  %555 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %536, float %537, float %538, float %539, i32 %383, i32 %384, i32 %385, i32 %386, i32 %426, i32 %427) #1, !dbg !43
  %556 = extractvalue { float, float, float, float } %555, 0, !dbg !43
  %557 = extractvalue { float, float, float, float } %555, 1, !dbg !43
  %558 = extractvalue { float, float, float, float } %555, 2, !dbg !43
  %559 = extractvalue { float, float, float, float } %555, 3, !dbg !43
  %560 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %541, float %542, float %543, float %544, i32 %383, i32 %384, i32 %385, i32 %386, i32 %454, i32 %455) #1, !dbg !43
  %561 = extractvalue { float, float, float, float } %560, 0, !dbg !43
  %562 = extractvalue { float, float, float, float } %560, 1, !dbg !43
  %563 = extractvalue { float, float, float, float } %560, 2, !dbg !43
  %564 = extractvalue { float, float, float, float } %560, 3, !dbg !43
  %565 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %546, float %547, float %548, float %549, i32 %334, i32 %335, i32 %336, i32 %337, i32 %428, i32 %429) #1, !dbg !43
  %566 = extractvalue { float, float, float, float } %565, 0, !dbg !43
  %567 = extractvalue { float, float, float, float } %565, 1, !dbg !43
  %568 = extractvalue { float, float, float, float } %565, 2, !dbg !43
  %569 = extractvalue { float, float, float, float } %565, 3, !dbg !43
  %570 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %551, float %552, float %553, float %554, i32 %334, i32 %335, i32 %336, i32 %337, i32 %456, i32 %457) #1, !dbg !43
  %571 = extractvalue { float, float, float, float } %570, 0, !dbg !43
  %572 = extractvalue { float, float, float, float } %570, 1, !dbg !43
  %573 = extractvalue { float, float, float, float } %570, 2, !dbg !43
  %574 = extractvalue { float, float, float, float } %570, 3, !dbg !43
  %575 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %556, float %557, float %558, float %559, i32 %390, i32 %391, i32 %392, i32 %393, i32 %428, i32 %429) #1, !dbg !43
  %576 = extractvalue { float, float, float, float } %575, 0, !dbg !43
  %577 = extractvalue { float, float, float, float } %575, 1, !dbg !43
  %578 = extractvalue { float, float, float, float } %575, 2, !dbg !43
  %579 = extractvalue { float, float, float, float } %575, 3, !dbg !43
  %580 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %561, float %562, float %563, float %564, i32 %390, i32 %391, i32 %392, i32 %393, i32 %456, i32 %457) #1, !dbg !43
  %581 = extractvalue { float, float, float, float } %580, 0, !dbg !43
  %582 = extractvalue { float, float, float, float } %580, 1, !dbg !43
  %583 = extractvalue { float, float, float, float } %580, 2, !dbg !43
  %584 = extractvalue { float, float, float, float } %580, 3, !dbg !43
  %585 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %566, float %567, float %568, float %569, i32 %341, i32 %342, i32 %343, i32 %344, i32 %433, i32 %434) #1, !dbg !43
  %586 = extractvalue { float, float, float, float } %585, 0, !dbg !43
  %587 = extractvalue { float, float, float, float } %585, 1, !dbg !43
  %588 = extractvalue { float, float, float, float } %585, 2, !dbg !43
  %589 = extractvalue { float, float, float, float } %585, 3, !dbg !43
  %590 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %571, float %572, float %573, float %574, i32 %341, i32 %342, i32 %343, i32 %344, i32 %461, i32 %462) #1, !dbg !43
  %591 = extractvalue { float, float, float, float } %590, 0, !dbg !43
  %592 = extractvalue { float, float, float, float } %590, 1, !dbg !43
  %593 = extractvalue { float, float, float, float } %590, 2, !dbg !43
  %594 = extractvalue { float, float, float, float } %590, 3, !dbg !43
  %595 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %576, float %577, float %578, float %579, i32 %397, i32 %398, i32 %399, i32 %400, i32 %433, i32 %434) #1, !dbg !43
  %596 = extractvalue { float, float, float, float } %595, 0, !dbg !43
  %597 = extractvalue { float, float, float, float } %595, 1, !dbg !43
  %598 = extractvalue { float, float, float, float } %595, 2, !dbg !43
  %599 = extractvalue { float, float, float, float } %595, 3, !dbg !43
  %600 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %581, float %582, float %583, float %584, i32 %397, i32 %398, i32 %399, i32 %400, i32 %461, i32 %462) #1, !dbg !43
  %601 = extractvalue { float, float, float, float } %600, 0, !dbg !43
  %602 = extractvalue { float, float, float, float } %600, 1, !dbg !43
  %603 = extractvalue { float, float, float, float } %600, 2, !dbg !43
  %604 = extractvalue { float, float, float, float } %600, 3, !dbg !43
  %605 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %586, float %587, float %588, float %589, i32 %348, i32 %349, i32 %350, i32 %351, i32 %435, i32 %436) #1, !dbg !43
  %606 = extractvalue { float, float, float, float } %605, 0, !dbg !43
  %607 = extractvalue { float, float, float, float } %605, 1, !dbg !43
  %608 = extractvalue { float, float, float, float } %605, 2, !dbg !43
  %609 = extractvalue { float, float, float, float } %605, 3, !dbg !43
  %610 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %591, float %592, float %593, float %594, i32 %348, i32 %349, i32 %350, i32 %351, i32 %463, i32 %464) #1, !dbg !43
  %611 = extractvalue { float, float, float, float } %610, 0, !dbg !43
  %612 = extractvalue { float, float, float, float } %610, 1, !dbg !43
  %613 = extractvalue { float, float, float, float } %610, 2, !dbg !43
  %614 = extractvalue { float, float, float, float } %610, 3, !dbg !43
  %615 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %596, float %597, float %598, float %599, i32 %404, i32 %405, i32 %406, i32 %407, i32 %435, i32 %436) #1, !dbg !43
  %616 = extractvalue { float, float, float, float } %615, 0, !dbg !43
  %617 = extractvalue { float, float, float, float } %615, 1, !dbg !43
  %618 = extractvalue { float, float, float, float } %615, 2, !dbg !43
  %619 = extractvalue { float, float, float, float } %615, 3, !dbg !43
  %620 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %601, float %602, float %603, float %604, i32 %404, i32 %405, i32 %406, i32 %407, i32 %463, i32 %464) #1, !dbg !43
  %621 = extractvalue { float, float, float, float } %620, 0, !dbg !43
  %622 = extractvalue { float, float, float, float } %620, 1, !dbg !43
  %623 = extractvalue { float, float, float, float } %620, 2, !dbg !43
  %624 = extractvalue { float, float, float, float } %620, 3, !dbg !43
  %625 = getelementptr i8, ptr addrspace(1) %.pn129237, i64 256, !dbg !40
  %626 = getelementptr i8, ptr addrspace(1) %.pn113238, i64 256, !dbg !40
  %627 = getelementptr i8, ptr addrspace(1) %.pn97239, i64 256, !dbg !40
  %628 = getelementptr i8, ptr addrspace(1) %.pn81240, i64 256, !dbg !40
  %629 = getelementptr i8, ptr addrspace(1) %.pn65241, i64 256, !dbg !40
  %630 = getelementptr i8, ptr addrspace(1) %.pn49242, i64 256, !dbg !40
  %631 = getelementptr i8, ptr addrspace(1) %.pn33243, i64 256, !dbg !40
  %632 = getelementptr i8, ptr addrspace(1) %.pn17244, i64 256, !dbg !40
  %633 = getelementptr i8, ptr addrspace(1) %.pn193245, i64 1048576, !dbg !41
  %634 = getelementptr i8, ptr addrspace(1) %.pn177246, i64 1048576, !dbg !41
  %635 = getelementptr i8, ptr addrspace(1) %.pn161247, i64 1048576, !dbg !41
  %636 = getelementptr i8, ptr addrspace(1) %.pn145248, i64 1048576, !dbg !41
  %637 = add i32 %274, 1, !dbg !42
  %638 = icmp slt i32 %637, 4, !dbg !42
  %639 = select i1 %638, i32 %637, i32 0, !dbg !42
  %.idx217 = shl i32 %639, 14, !dbg !38
  %640 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx217, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %641 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %113, !dbg !38
  %642 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %115, !dbg !38
  %643 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %117, !dbg !38
  %644 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %119, !dbg !38
  %645 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %121, !dbg !38
  %646 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %123, !dbg !38
  %647 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %125, !dbg !38
  %648 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %640, i32 %127, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %641, ptr addrspace(1) %625, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %642, ptr addrspace(1) %626, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %643, ptr addrspace(1) %627, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %644, ptr addrspace(1) %628, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %645, ptr addrspace(1) %629, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %646, ptr addrspace(1) %630, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %647, ptr addrspace(1) %631, i32 0) #1, !dbg !38
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %648, ptr addrspace(1) %632, i32 0) #1, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %.idx218 = shl i32 %639, 13, !dbg !39
  %649 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx218, !dbg !39
  %650 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %649, i32 %131, !dbg !39
  %651 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %649, i32 %133, !dbg !39
  %652 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %649, i32 %135, !dbg !39
  %653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %649, i32 %137, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %650, ptr addrspace(1) %633, i32 0) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %651, ptr addrspace(1) %634, i32 0) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %652, ptr addrspace(1) %635, i32 0) #1, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %653, ptr addrspace(1) %636, i32 0) #1, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %654 = add nuw nsw i32 %291, 128, !dbg !42
  %655 = icmp samesign ult i32 %291, 384, !dbg !42
  br i1 %655, label %272, label %656, !dbg !42

656:                                              ; preds = %272
  %657 = or disjoint i32 %14, %26, !dbg !20
  %658 = or disjoint i32 %14, %25, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %659 = icmp slt i32 %658, 512, !dbg !44
  %660 = icmp slt i32 %657, 512, !dbg !44
  %661 = icmp slt i32 %41, 64, !dbg !45
  %662 = and i1 %659, %661, !dbg !46
  %663 = and i1 %660, %661, !dbg !46
  %664 = shl i32 %658, 6, !dbg !47
  %665 = shl i32 %657, 6, !dbg !47
  %666 = shl i32 %51, 15, !dbg !48
  %667 = add i32 %41, %666, !dbg !49
  %668 = add i32 %667, %664, !dbg !50
  %669 = add i32 %667, %665, !dbg !50
  %670 = sext i32 %668 to i64, !dbg !51
  %671 = getelementptr bfloat, ptr addrspace(1) %2, i64 %670, !dbg !51
  %672 = sext i32 %669 to i64, !dbg !51
  %673 = getelementptr bfloat, ptr addrspace(1) %2, i64 %672, !dbg !51
  %674 = fptrunc float %606 to bfloat, !dbg !52
  %675 = fptrunc float %607 to bfloat, !dbg !52
  %676 = fptrunc float %608 to bfloat, !dbg !52
  %677 = fptrunc float %609 to bfloat, !dbg !52
  %678 = fptrunc float %611 to bfloat, !dbg !52
  %679 = fptrunc float %612 to bfloat, !dbg !52
  %680 = fptrunc float %613 to bfloat, !dbg !52
  %681 = fptrunc float %614 to bfloat, !dbg !52
  %682 = fptrunc float %616 to bfloat, !dbg !52
  %683 = fptrunc float %617 to bfloat, !dbg !52
  %684 = fptrunc float %618 to bfloat, !dbg !52
  %685 = fptrunc float %619 to bfloat, !dbg !52
  %686 = fptrunc float %621 to bfloat, !dbg !52
  %687 = fptrunc float %622 to bfloat, !dbg !52
  %688 = fptrunc float %623 to bfloat, !dbg !52
  %689 = fptrunc float %624 to bfloat, !dbg !52
  %690 = shl i32 %15, 1, !dbg !52
  %691 = and i32 %690, 6, !dbg !52
  %692 = or disjoint i32 %691, %60, !dbg !52
  %693 = or disjoint i32 %692, %62, !dbg !52
  %694 = shl nuw nsw i32 %16, 3, !dbg !52
  %695 = or disjoint i32 %693, %694, !dbg !52
  %696 = or disjoint i32 %695, %22, !dbg !52
  %697 = shl nuw nsw i32 %17, 3, !dbg !52
  %698 = xor i32 %696, %697, !dbg !52
  %699 = or disjoint i32 %63, %694, !dbg !52
  %700 = and i32 %36, 768, !dbg !52
  %701 = xor i32 %700, %699, !dbg !52
  %702 = lshr i32 %698, 2, !dbg !52
  %703 = and i32 %702, 1073741816, !dbg !52
  %704 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %703, !dbg !52
  %705 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %704, i32 %698, !dbg !52
  %706 = bitcast bfloat %674 to i16, !dbg !52
  %707 = bitcast bfloat %675 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %705, i16 %706, i16 %707, i1 true) #1, !dbg !52
  %708 = xor i32 %698, 256, !dbg !52
  %709 = lshr i32 %708, 2, !dbg !52
  %710 = and i32 %709, 1073741816, !dbg !52
  %711 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %710, !dbg !52
  %712 = getelementptr bfloat, ptr addrspace(3) %711, i32 %708, !dbg !52
  %713 = bitcast bfloat %676 to i16, !dbg !52
  %714 = bitcast bfloat %677 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %712, i16 %713, i16 %714, i1 true) #1, !dbg !52
  %715 = xor i32 %698, 16, !dbg !52
  %716 = getelementptr bfloat, ptr addrspace(3) %704, i32 %715, !dbg !52
  %717 = bitcast bfloat %678 to i16, !dbg !52
  %718 = bitcast bfloat %679 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %716, i16 %717, i16 %718, i1 true) #1, !dbg !52
  %719 = xor i32 %698, 272, !dbg !52
  %720 = lshr i32 %719, 2, !dbg !52
  %721 = and i32 %720, 1073741816, !dbg !52
  %722 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %721, !dbg !52
  %723 = getelementptr bfloat, ptr addrspace(3) %722, i32 %719, !dbg !52
  %724 = bitcast bfloat %680 to i16, !dbg !52
  %725 = bitcast bfloat %681 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %723, i16 %724, i16 %725, i1 true) #1, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %726 = lshr exact i32 %701, 2, !dbg !52
  %727 = and i32 %726, 1073741816, !dbg !52
  %728 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %727, !dbg !52
  %729 = getelementptr bfloat, ptr addrspace(3) %728, i32 %701, !dbg !52
  %730 = load <4 x i32>, ptr addrspace(3) %729, align 16, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %731 = bitcast bfloat %682 to i16, !dbg !52
  %732 = bitcast bfloat %683 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %705, i16 %731, i16 %732, i1 true) #1, !dbg !52
  %733 = bitcast bfloat %684 to i16, !dbg !52
  %734 = bitcast bfloat %685 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %712, i16 %733, i16 %734, i1 true) #1, !dbg !52
  %735 = bitcast bfloat %686 to i16, !dbg !52
  %736 = bitcast bfloat %687 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %716, i16 %735, i16 %736, i1 true) #1, !dbg !52
  %737 = bitcast bfloat %688 to i16, !dbg !52
  %738 = bitcast bfloat %689 to i16, !dbg !52
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %723, i16 %737, i16 %738, i1 true) #1, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %739 = load <4 x i32>, ptr addrspace(3) %729, align 16, !dbg !52
  %.extract = extractelement <4 x i32> %730, i64 0, !dbg !52
  %.extract222 = extractelement <4 x i32> %730, i64 1, !dbg !52
  %.extract224 = extractelement <4 x i32> %730, i64 2, !dbg !52
  %.extract226 = extractelement <4 x i32> %730, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract222, i32 %.extract224, i32 %.extract226, ptr addrspace(1) %671, i1 %662) #1, !dbg !52
  %.extract228 = extractelement <4 x i32> %739, i64 0, !dbg !52
  %.extract230 = extractelement <4 x i32> %739, i64 1, !dbg !52
  %.extract232 = extractelement <4 x i32> %739, i64 2, !dbg !52
  %.extract234 = extractelement <4 x i32> %739, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract228, i32 %.extract230, i32 %.extract232, i32 %.extract234, ptr addrspace(1) %673, i1 %663) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwo6ypcesbbsacf6fzqa3nc7im4xrvt3ia25moiqvawluyd3isn2.py", directory: "/tmp/torchinductor_root/wo")
!4 = !{ptr @triton_bmm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_bmm", linkageName: "triton_bmm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 41, column: 24, scope: !6)
!10 = !DILocation(line: 47, column: 22, scope: !6)
!11 = !DILocation(line: 48, column: 41, scope: !6)
!12 = !DILocation(line: 48, column: 30, scope: !6)
!13 = !DILocation(line: 48, column: 50, scope: !6)
!14 = !DILocation(line: 49, column: 40, scope: !6)
!15 = !DILocation(line: 49, column: 34, scope: !6)
!16 = !DILocation(line: 50, column: 19, scope: !6)
!17 = !DILocation(line: 50, column: 30, scope: !6)
!18 = !DILocation(line: 52, column: 17, scope: !6)
!19 = !DILocation(line: 52, column: 40, scope: !6)
!20 = !DILocation(line: 52, column: 27, scope: !6)
!21 = !DILocation(line: 53, column: 17, scope: !6)
!22 = !DILocation(line: 53, column: 40, scope: !6)
!23 = !DILocation(line: 53, column: 27, scope: !6)
!24 = !DILocation(line: 55, column: 52, scope: !6)
!25 = !DILocation(line: 61, column: 19, scope: !6)
!26 = !DILocation(line: 65, column: 26, scope: !6)
!27 = !DILocation(line: 66, column: 28, scope: !6)
!28 = !DILocation(line: 66, column: 43, scope: !6)
!29 = !DILocation(line: 66, column: 72, scope: !6)
!30 = !DILocation(line: 66, column: 40, scope: !6)
!31 = !DILocation(line: 66, column: 66, scope: !6)
!32 = !DILocation(line: 66, column: 13, scope: !6)
!33 = !DILocation(line: 67, column: 27, scope: !6)
!34 = !DILocation(line: 67, column: 72, scope: !6)
!35 = !DILocation(line: 67, column: 39, scope: !6)
!36 = !DILocation(line: 67, column: 66, scope: !6)
!37 = !DILocation(line: 67, column: 13, scope: !6)
!38 = !DILocation(line: 72, column: 24, scope: !6)
!39 = !DILocation(line: 73, column: 24, scope: !6)
!40 = !DILocation(line: 78, column: 13, scope: !6)
!41 = !DILocation(line: 79, column: 13, scope: !6)
!42 = !DILocation(line: 70, column: 25, scope: !6)
!43 = !DILocation(line: 77, column: 25, scope: !6)
!44 = !DILocation(line: 87, column: 20, scope: !6)
!45 = !DILocation(line: 87, column: 34, scope: !6)
!46 = !DILocation(line: 87, column: 26, scope: !6)
!47 = !DILocation(line: 90, column: 24, scope: !6)
!48 = !DILocation(line: 90, column: 38, scope: !6)
!49 = !DILocation(line: 90, column: 21, scope: !6)
!50 = !DILocation(line: 90, column: 32, scope: !6)
!51 = !DILocation(line: 91, column: 25, scope: !6)
!52 = !DILocation(line: 91, column: 67, scope: !6)
!53 = !DILocation(line: 91, column: 4, scope: !6)
