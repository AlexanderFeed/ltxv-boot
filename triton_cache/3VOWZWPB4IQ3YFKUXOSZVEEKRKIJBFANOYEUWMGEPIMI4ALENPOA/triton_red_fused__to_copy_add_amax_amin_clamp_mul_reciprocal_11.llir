; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 8, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = and i32 %10, 31, !dbg !11
  %13 = or disjoint i32 %.lobit, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 2040, !dbg !14
  %17 = shl i32 %13, 7, !dbg !15
  %18 = and i32 %15, 120
  %invariant.op = or disjoint i32 %17, %18, !dbg !16
  %19 = lshr i32 %16, 7, !dbg !17
  %20 = mul nuw nsw i32 %19, 526336, !dbg !18
  %.reass = add i32 %20, %invariant.op
  %21 = sext i32 %.reass to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i1 %14) #4, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractelement <2 x bfloat> %25, i64 0, !dbg !20
  %33 = extractelement <2 x bfloat> %25, i64 1, !dbg !20
  %34 = extractelement <2 x bfloat> %27, i64 0, !dbg !20
  %35 = extractelement <2 x bfloat> %27, i64 1, !dbg !20
  %36 = extractelement <2 x bfloat> %29, i64 0, !dbg !20
  %37 = extractelement <2 x bfloat> %29, i64 1, !dbg !20
  %38 = extractelement <2 x bfloat> %31, i64 0, !dbg !20
  %39 = extractelement <2 x bfloat> %31, i64 1, !dbg !20
  %40 = fpext bfloat %32 to float, !dbg !21
  %41 = fpext bfloat %33 to float, !dbg !21
  %42 = fpext bfloat %34 to float, !dbg !21
  %43 = fpext bfloat %35 to float, !dbg !21
  %44 = fpext bfloat %36 to float, !dbg !21
  %45 = fpext bfloat %37 to float, !dbg !21
  %46 = fpext bfloat %38 to float, !dbg !21
  %47 = fpext bfloat %39 to float, !dbg !21
  %48 = select i1 %14, float %40, float 0x7FF0000000000000, !dbg !22
  %49 = select i1 %14, float %41, float 0x7FF0000000000000, !dbg !22
  %50 = select i1 %14, float %42, float 0x7FF0000000000000, !dbg !22
  %51 = select i1 %14, float %43, float 0x7FF0000000000000, !dbg !22
  %52 = select i1 %14, float %45, float 0x7FF0000000000000, !dbg !22
  %53 = select i1 %14, float %46, float 0x7FF0000000000000, !dbg !22
  %54 = select i1 %14, float %40, float 0xFFF0000000000000, !dbg !23
  %55 = select i1 %14, float %41, float 0xFFF0000000000000, !dbg !23
  %56 = select i1 %14, float %42, float 0xFFF0000000000000, !dbg !23
  %57 = select i1 %14, float %43, float 0xFFF0000000000000, !dbg !23
  %58 = select i1 %14, float %45, float 0xFFF0000000000000, !dbg !23
  %59 = select i1 %14, float %46, float 0xFFF0000000000000, !dbg !23
  %60 = or disjoint i32 %16, 2048, !dbg !24
  %61 = icmp samesign ult i32 %60, 3072, !dbg !25
  %62 = lshr i32 %60, 7, !dbg !17
  %63 = mul nuw nsw i32 %62, 526336, !dbg !18
  %.reass.1 = add i32 %63, %invariant.op
  %64 = sext i32 %.reass.1 to i64, !dbg !19
  %65 = getelementptr bfloat, ptr addrspace(1) %0, i64 %64, !dbg !19
  %66 = and i1 %14, %61, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %66) #4, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !20
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !20
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !20
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !20
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !20
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !20
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !20
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !20
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !20
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !20
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !20
  %82 = extractelement <2 x bfloat> %75, i64 0, !dbg !20
  %83 = extractelement <2 x bfloat> %75, i64 1, !dbg !20
  %84 = fpext bfloat %76 to float, !dbg !21
  %85 = fpext bfloat %77 to float, !dbg !21
  %86 = fpext bfloat %78 to float, !dbg !21
  %87 = fpext bfloat %79 to float, !dbg !21
  %88 = fpext bfloat %80 to float, !dbg !21
  %89 = fpext bfloat %81 to float, !dbg !21
  %90 = fpext bfloat %82 to float, !dbg !21
  %91 = fpext bfloat %83 to float, !dbg !21
  %92 = fcmp olt float %48, %84, !dbg !27
  %93 = fcmp olt float %49, %85, !dbg !27
  %94 = fcmp olt float %50, %86, !dbg !27
  %95 = fcmp olt float %51, %87, !dbg !27
  %96 = fcmp olt float %52, %89, !dbg !27
  %97 = fcmp olt float %53, %90, !dbg !27
  %98 = fcmp uno float %48, 0.000000e+00, !dbg !31
  %99 = fcmp uno float %49, 0.000000e+00, !dbg !31
  %100 = fcmp uno float %50, 0.000000e+00, !dbg !31
  %101 = fcmp uno float %51, 0.000000e+00, !dbg !31
  %102 = fcmp uno float %52, 0.000000e+00, !dbg !31
  %103 = fcmp uno float %53, 0.000000e+00, !dbg !31
  %104 = or i1 %98, %92, !dbg !32
  %105 = or i1 %99, %93, !dbg !32
  %106 = or i1 %100, %94, !dbg !32
  %107 = or i1 %101, %95, !dbg !32
  %108 = or i1 %102, %96, !dbg !32
  %109 = or i1 %103, %97, !dbg !32
  %110 = select i1 %104, float %48, float %84, !dbg !33
  %111 = select i1 %105, float %49, float %85, !dbg !33
  %112 = select i1 %106, float %50, float %86, !dbg !33
  %113 = select i1 %107, float %51, float %87, !dbg !33
  %114 = select i1 %108, float %52, float %89, !dbg !33
  %115 = select i1 %109, float %53, float %90, !dbg !33
  %116 = select i1 %66, float %110, float %48, !dbg !22
  %117 = select i1 %66, float %111, float %49, !dbg !22
  %118 = select i1 %66, float %112, float %50, !dbg !22
  %119 = select i1 %66, float %113, float %51, !dbg !22
  %120 = select i1 %66, float %114, float %52, !dbg !22
  %121 = select i1 %66, float %115, float %53, !dbg !22
  %122 = fcmp ogt float %54, %84, !dbg !34
  %123 = fcmp ogt float %55, %85, !dbg !34
  %124 = fcmp ogt float %56, %86, !dbg !34
  %125 = fcmp ogt float %57, %87, !dbg !34
  %126 = fcmp ogt float %58, %89, !dbg !34
  %127 = fcmp ogt float %59, %90, !dbg !34
  %128 = fcmp uno float %54, 0.000000e+00, !dbg !36
  %129 = fcmp uno float %55, 0.000000e+00, !dbg !36
  %130 = fcmp uno float %56, 0.000000e+00, !dbg !36
  %131 = fcmp uno float %57, 0.000000e+00, !dbg !36
  %132 = fcmp uno float %58, 0.000000e+00, !dbg !36
  %133 = fcmp uno float %59, 0.000000e+00, !dbg !36
  %134 = or i1 %128, %122, !dbg !37
  %135 = or i1 %129, %123, !dbg !37
  %136 = or i1 %130, %124, !dbg !37
  %137 = or i1 %131, %125, !dbg !37
  %138 = or i1 %132, %126, !dbg !37
  %139 = or i1 %133, %127, !dbg !37
  %140 = select i1 %134, float %54, float %84, !dbg !38
  %141 = select i1 %135, float %55, float %85, !dbg !38
  %142 = select i1 %136, float %56, float %86, !dbg !38
  %143 = select i1 %137, float %57, float %87, !dbg !38
  %144 = select i1 %138, float %58, float %89, !dbg !38
  %145 = select i1 %139, float %59, float %90, !dbg !38
  %146 = select i1 %66, float %140, float %54, !dbg !23
  %147 = select i1 %66, float %141, float %55, !dbg !23
  %148 = select i1 %66, float %142, float %56, !dbg !23
  %149 = select i1 %66, float %143, float %57, !dbg !23
  %150 = select i1 %66, float %144, float %58, !dbg !23
  %151 = select i1 %66, float %145, float %59, !dbg !23
  %152 = lshr i32 %10, 5, !dbg !11
  %153 = and i32 %10, 1, !dbg !11
  %154 = or disjoint i32 %9, %153, !dbg !12
  %155 = icmp slt i32 %154, 512, !dbg !13
  %156 = fcmp olt float %116, %117, !dbg !39
  %157 = fcmp uno float %116, 0.000000e+00, !dbg !42
  %158 = or i1 %156, %157, !dbg !43
  %159 = insertelement <2 x i1> poison, i1 %158, i64 0, !dbg !44
  %160 = insertelement <2 x i1> %159, i1 %14, i64 1, !dbg !44
  %161 = insertelement <2 x float> poison, float %116, i64 0, !dbg !44
  %162 = insertelement <2 x float> %161, float %44, i64 1, !dbg !44
  %163 = insertelement <2 x float> <float poison, float 0x7FF0000000000000>, float %117, i64 0, !dbg !44
  %164 = select <2 x i1> %160, <2 x float> %162, <2 x float> %163, !dbg !44
  %165 = insertelement <2 x float> poison, float %118, i64 0, !dbg !39
  %166 = insertelement <2 x float> %165, float %88, i64 1, !dbg !39
  %167 = fcmp olt <2 x float> %164, %166, !dbg !39
  %168 = fcmp uno <2 x float> %164, zeroinitializer, !dbg !42
  %169 = or <2 x i1> %168, %167, !dbg !43
  %170 = select <2 x i1> %169, <2 x float> %164, <2 x float> %166, !dbg !44
  %171 = extractelement <2 x float> %170, i64 0, !dbg !42
  %172 = fcmp olt float %171, %119, !dbg !39
  %173 = fcmp uno float %171, 0.000000e+00, !dbg !42
  %174 = or i1 %172, %173, !dbg !43
  %175 = insertelement <2 x i1> poison, i1 %174, i64 0, !dbg !44
  %176 = insertelement <2 x i1> %175, i1 %66, i64 1, !dbg !44
  %177 = insertelement <2 x float> %164, float %119, i64 0, !dbg !44
  %178 = select <2 x i1> %176, <2 x float> %170, <2 x float> %177, !dbg !44
  %179 = extractelement <2 x float> %178, i64 0, !dbg !42
  %180 = extractelement <2 x float> %178, i64 1, !dbg !39
  %181 = fcmp olt float %179, %180, !dbg !39
  %182 = fcmp uno float %179, 0.000000e+00, !dbg !42
  %183 = or i1 %181, %182, !dbg !43
  %184 = insertelement <2 x i1> poison, i1 %183, i64 0, !dbg !44
  %185 = insertelement <2 x i1> %184, i1 %14, i64 1, !dbg !44
  %186 = insertelement <2 x float> %178, float %47, i64 1, !dbg !44
  %187 = shufflevector <2 x float> <float poison, float 0x7FF0000000000000>, <2 x float> %178, <2 x i32> <i32 3, i32 1>, !dbg !44
  %188 = select <2 x i1> %185, <2 x float> %186, <2 x float> %187, !dbg !44
  %189 = insertelement <2 x float> poison, float %120, i64 0, !dbg !39
  %190 = insertelement <2 x float> %189, float %91, i64 1, !dbg !39
  %191 = fcmp olt <2 x float> %188, %190, !dbg !39
  %192 = fcmp uno <2 x float> %188, zeroinitializer, !dbg !42
  %193 = or <2 x i1> %192, %191, !dbg !43
  %194 = select <2 x i1> %193, <2 x float> %188, <2 x float> %190, !dbg !44
  %195 = extractelement <2 x float> %194, i64 0, !dbg !42
  %196 = fcmp olt float %195, %121, !dbg !39
  %197 = fcmp uno float %195, 0.000000e+00, !dbg !42
  %198 = or i1 %196, %197, !dbg !43
  %199 = insertelement <2 x i1> poison, i1 %198, i64 0, !dbg !44
  %200 = insertelement <2 x i1> %199, i1 %66, i64 1, !dbg !44
  %201 = insertelement <2 x float> %188, float %121, i64 0, !dbg !44
  %202 = select <2 x i1> %200, <2 x float> %194, <2 x float> %201, !dbg !44
  %203 = extractelement <2 x float> %202, i64 0, !dbg !44
  %204 = extractelement <2 x float> %202, i64 1, !dbg !39
  %205 = fcmp olt float %203, %204, !dbg !39
  %206 = fcmp uno float %203, 0.000000e+00, !dbg !42
  %207 = or i1 %205, %206, !dbg !43
  %208 = select i1 %207, float %203, float %204, !dbg !44
  %209 = bitcast float %208 to i32, !dbg !45
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !45
  %211 = bitcast i32 %210 to float, !dbg !45
  %212 = fcmp olt float %208, %211, !dbg !39
  %213 = fcmp uno float %208, 0.000000e+00, !dbg !42
  %214 = or i1 %213, %212, !dbg !43
  %215 = select i1 %214, float %208, float %211, !dbg !44
  %216 = bitcast float %215 to i32, !dbg !45
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !45
  %218 = bitcast i32 %217 to float, !dbg !45
  %219 = fcmp olt float %215, %218, !dbg !39
  %220 = fcmp uno float %215, 0.000000e+00, !dbg !42
  %221 = or i1 %219, %220, !dbg !43
  %222 = select i1 %221, float %215, float %218, !dbg !44
  %223 = bitcast float %222 to i32, !dbg !45
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !45
  %225 = bitcast i32 %224 to float, !dbg !45
  %226 = fcmp olt float %222, %225, !dbg !39
  %227 = fcmp uno float %222, 0.000000e+00, !dbg !42
  %228 = or i1 %226, %227, !dbg !43
  %229 = select i1 %228, float %222, float %225, !dbg !44
  %230 = bitcast float %229 to i32, !dbg !45
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !45
  %232 = bitcast i32 %231 to float, !dbg !45
  %233 = fcmp olt float %229, %232, !dbg !39
  %234 = fcmp uno float %229, 0.000000e+00, !dbg !42
  %235 = or i1 %233, %234, !dbg !43
  %236 = select i1 %235, float %229, float %232, !dbg !44
  %237 = bitcast float %236 to i32, !dbg !45
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !45
  %239 = bitcast i32 %238 to float, !dbg !45
  %240 = fcmp olt float %236, %239, !dbg !39
  %241 = fcmp uno float %236, 0.000000e+00, !dbg !42
  %242 = or i1 %240, %241, !dbg !43
  %243 = and i32 %152, 7, !dbg !45
  %244 = icmp eq i32 %12, 0, !dbg !45
  %245 = shl nuw nsw i32 %.lobit, 3, !dbg !45
  %246 = or disjoint i32 %245, %243, !dbg !45
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !45
  %248 = select i1 %242, i32 %237, i32 %238, !dbg !44
  %249 = insertelement <1 x i32> poison, i32 %248, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %249, i1 %244) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %250 = icmp slt i32 %10, 16, !dbg !45
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !45
  %252 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %251, i1 %250) #4, !dbg !45
  %253 = bitcast i32 %252 to float, !dbg !45
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !45
  %255 = bitcast i32 %254 to float, !dbg !45
  %256 = fcmp olt float %253, %255, !dbg !39
  %257 = fcmp uno float %253, 0.000000e+00, !dbg !42
  %258 = or i1 %257, %256, !dbg !43
  %259 = select i1 %258, float %253, float %255, !dbg !44
  %260 = bitcast float %259 to i32, !dbg !45
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !45
  %262 = bitcast i32 %261 to float, !dbg !45
  %263 = fcmp olt float %259, %262, !dbg !39
  %264 = fcmp uno float %259, 0.000000e+00, !dbg !42
  %265 = or i1 %263, %264, !dbg !43
  %266 = select i1 %265, float %259, float %262, !dbg !44
  %267 = bitcast float %266 to i32, !dbg !45
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !45
  %269 = bitcast i32 %268 to float, !dbg !45
  %270 = fcmp olt float %266, %269, !dbg !39
  %271 = fcmp uno float %266, 0.000000e+00, !dbg !42
  %272 = or i1 %270, %271, !dbg !43
  %273 = and i32 %10, 7, !dbg !45
  %274 = icmp eq i32 %273, 0, !dbg !45
  %275 = and i1 %250, %274, !dbg !45
  %276 = select i1 %272, i32 %267, i32 %268, !dbg !44
  %277 = insertelement <1 x i32> poison, i32 %276, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %277, i1 %275) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !45
  %279 = load float, ptr addrspace(3) %278, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %280 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !46
  %281 = bitcast float %279 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %282 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %153, !dbg !46
  %283 = load float, ptr addrspace(3) %282, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %284 = fcmp ogt float %146, %147, !dbg !49
  %285 = fcmp uno float %146, 0.000000e+00, !dbg !50
  %286 = or i1 %284, %285, !dbg !51
  %287 = insertelement <2 x i1> poison, i1 %286, i64 0, !dbg !52
  %288 = insertelement <2 x i1> %287, i1 %14, i64 1, !dbg !52
  %289 = insertelement <2 x float> poison, float %146, i64 0, !dbg !52
  %290 = insertelement <2 x float> %289, float %44, i64 1, !dbg !52
  %291 = insertelement <2 x float> <float poison, float 0xFFF0000000000000>, float %147, i64 0, !dbg !52
  %292 = select <2 x i1> %288, <2 x float> %290, <2 x float> %291, !dbg !52
  %293 = insertelement <2 x float> poison, float %148, i64 0, !dbg !49
  %294 = insertelement <2 x float> %293, float %88, i64 1, !dbg !49
  %295 = fcmp ogt <2 x float> %292, %294, !dbg !49
  %296 = fcmp uno <2 x float> %292, zeroinitializer, !dbg !50
  %297 = or <2 x i1> %296, %295, !dbg !51
  %298 = select <2 x i1> %297, <2 x float> %292, <2 x float> %294, !dbg !52
  %299 = extractelement <2 x float> %298, i64 0, !dbg !50
  %300 = fcmp ogt float %299, %149, !dbg !49
  %301 = fcmp uno float %299, 0.000000e+00, !dbg !50
  %302 = or i1 %300, %301, !dbg !51
  %303 = insertelement <2 x i1> poison, i1 %302, i64 0, !dbg !52
  %304 = insertelement <2 x i1> %303, i1 %66, i64 1, !dbg !52
  %305 = insertelement <2 x float> %292, float %149, i64 0, !dbg !52
  %306 = select <2 x i1> %304, <2 x float> %298, <2 x float> %305, !dbg !52
  %307 = extractelement <2 x float> %306, i64 0, !dbg !50
  %308 = extractelement <2 x float> %306, i64 1, !dbg !49
  %309 = fcmp ogt float %307, %308, !dbg !49
  %310 = fcmp uno float %307, 0.000000e+00, !dbg !50
  %311 = or i1 %309, %310, !dbg !51
  %312 = insertelement <2 x i1> poison, i1 %311, i64 0, !dbg !52
  %313 = insertelement <2 x i1> %312, i1 %14, i64 1, !dbg !52
  %314 = insertelement <2 x float> %306, float %47, i64 1, !dbg !52
  %315 = shufflevector <2 x float> <float poison, float 0xFFF0000000000000>, <2 x float> %306, <2 x i32> <i32 3, i32 1>, !dbg !52
  %316 = select <2 x i1> %313, <2 x float> %314, <2 x float> %315, !dbg !52
  %317 = insertelement <2 x float> poison, float %150, i64 0, !dbg !49
  %318 = insertelement <2 x float> %317, float %91, i64 1, !dbg !49
  %319 = fcmp ogt <2 x float> %316, %318, !dbg !49
  %320 = fcmp uno <2 x float> %316, zeroinitializer, !dbg !50
  %321 = or <2 x i1> %320, %319, !dbg !51
  %322 = select <2 x i1> %321, <2 x float> %316, <2 x float> %318, !dbg !52
  %323 = extractelement <2 x float> %322, i64 0, !dbg !50
  %324 = fcmp ogt float %323, %151, !dbg !49
  %325 = fcmp uno float %323, 0.000000e+00, !dbg !50
  %326 = or i1 %324, %325, !dbg !51
  %327 = insertelement <2 x i1> poison, i1 %326, i64 0, !dbg !52
  %328 = insertelement <2 x i1> %327, i1 %66, i64 1, !dbg !52
  %329 = insertelement <2 x float> %316, float %151, i64 0, !dbg !52
  %330 = select <2 x i1> %328, <2 x float> %322, <2 x float> %329, !dbg !52
  %331 = extractelement <2 x float> %330, i64 0, !dbg !52
  %332 = extractelement <2 x float> %330, i64 1, !dbg !49
  %333 = fcmp ogt float %331, %332, !dbg !49
  %334 = fcmp uno float %331, 0.000000e+00, !dbg !50
  %335 = or i1 %333, %334, !dbg !51
  %336 = select i1 %335, float %331, float %332, !dbg !52
  %337 = bitcast float %336 to i32, !dbg !47
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 16, i32 31), !dbg !47
  %339 = bitcast i32 %338 to float, !dbg !47
  %340 = fcmp ogt float %336, %339, !dbg !49
  %341 = fcmp uno float %336, 0.000000e+00, !dbg !50
  %342 = or i1 %341, %340, !dbg !51
  %343 = select i1 %342, float %336, float %339, !dbg !52
  %344 = bitcast float %343 to i32, !dbg !47
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 8, i32 31), !dbg !47
  %346 = bitcast i32 %345 to float, !dbg !47
  %347 = fcmp ogt float %343, %346, !dbg !49
  %348 = fcmp uno float %343, 0.000000e+00, !dbg !50
  %349 = or i1 %347, %348, !dbg !51
  %350 = select i1 %349, float %343, float %346, !dbg !52
  %351 = bitcast float %350 to i32, !dbg !47
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !47
  %353 = bitcast i32 %352 to float, !dbg !47
  %354 = fcmp ogt float %350, %353, !dbg !49
  %355 = fcmp uno float %350, 0.000000e+00, !dbg !50
  %356 = or i1 %354, %355, !dbg !51
  %357 = select i1 %356, float %350, float %353, !dbg !52
  %358 = bitcast float %357 to i32, !dbg !47
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !47
  %360 = bitcast i32 %359 to float, !dbg !47
  %361 = fcmp ogt float %357, %360, !dbg !49
  %362 = fcmp uno float %357, 0.000000e+00, !dbg !50
  %363 = or i1 %361, %362, !dbg !51
  %364 = select i1 %363, float %357, float %360, !dbg !52
  %365 = bitcast float %364 to i32, !dbg !47
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 1, i32 31), !dbg !47
  %367 = bitcast i32 %366 to float, !dbg !47
  %368 = fcmp ogt float %364, %367, !dbg !49
  %369 = fcmp uno float %364, 0.000000e+00, !dbg !50
  %370 = or i1 %368, %369, !dbg !51
  %371 = select i1 %370, i32 %365, i32 %366, !dbg !52
  %372 = insertelement <1 x i32> poison, i32 %371, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %372, i1 %244) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %373 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %251, i1 %250) #4, !dbg !47
  %374 = bitcast i32 %373 to float, !dbg !47
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 4, i32 31), !dbg !47
  %376 = bitcast i32 %375 to float, !dbg !47
  %377 = fcmp ogt float %374, %376, !dbg !49
  %378 = fcmp uno float %374, 0.000000e+00, !dbg !50
  %379 = or i1 %378, %377, !dbg !51
  %380 = select i1 %379, float %374, float %376, !dbg !52
  %381 = bitcast float %380 to i32, !dbg !47
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !47
  %383 = bitcast i32 %382 to float, !dbg !47
  %384 = fcmp ogt float %380, %383, !dbg !49
  %385 = fcmp uno float %380, 0.000000e+00, !dbg !50
  %386 = or i1 %384, %385, !dbg !51
  %387 = select i1 %386, float %380, float %383, !dbg !52
  %388 = bitcast float %387 to i32, !dbg !47
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !47
  %390 = bitcast i32 %389 to float, !dbg !47
  %391 = fcmp ogt float %387, %390, !dbg !49
  %392 = fcmp uno float %387, 0.000000e+00, !dbg !50
  %393 = or i1 %391, %392, !dbg !51
  %394 = select i1 %393, i32 %388, i32 %389, !dbg !52
  %395 = insertelement <1 x i32> poison, i32 %394, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %395, i1 %275) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %396 = load float, ptr addrspace(3) %278, align 16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %397 = bitcast float %396 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %397, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %398 = load float, ptr addrspace(3) %282, align 4, !dbg !53
  %399 = sext i32 %154 to i64, !dbg !54
  %400 = getelementptr bfloat, ptr addrspace(1) %1, i64 %399, !dbg !54
  %401 = fptrunc float %283 to bfloat, !dbg !46
  %402 = and i32 %10, 510, !dbg !46
  %403 = icmp eq i32 %402, 0, !dbg !46
  %404 = bitcast bfloat %401 to i16, !dbg !46
  %405 = and i1 %403, %155, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %404, ptr addrspace(1) %400, i1 %405) #4, !dbg !46
  %406 = getelementptr bfloat, ptr addrspace(1) %2, i64 %399, !dbg !55
  %407 = fptrunc float %398 to bfloat, !dbg !53
  %408 = bitcast bfloat %407 to i16, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %408, ptr addrspace(1) %406, i1 %405) #4, !dbg !53
  %.inv = fcmp oge float %279, 0.000000e+00, !dbg !56
  %409 = select i1 %.inv, float 0.000000e+00, float %279, !dbg !56
  %410 = fsub float 0.000000e+00, %409, !dbg !58
  %.inv2 = fcmp ole float %396, 0.000000e+00, !dbg !59
  %411 = select i1 %.inv2, float 0.000000e+00, float %396, !dbg !59
  %412 = fcmp ogt float %410, %411, !dbg !61
  %413 = fcmp uno float %410, 0.000000e+00, !dbg !63
  %414 = or i1 %413, %412, !dbg !64
  %415 = select i1 %414, float %410, float %411, !dbg !65
  %416 = fmul float %415, 0x3F80204080000000, !dbg !66
  %417 = fcmp ogt float %416, 0x3EE4F8B580000000, !dbg !67
  %418 = fcmp uno float %416, 0.000000e+00, !dbg !69
  %419 = or i1 %417, %418, !dbg !70
  %420 = select i1 %419, float %416, float 0x3EE4F8B580000000, !dbg !71
  %421 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %420), !dbg !72
  %422 = mul i32 %13, 3072, !dbg !73
  %423 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i1 %14) #4, !dbg !74
  %424 = extractvalue { i32, i32, i32, i32 } %423, 0, !dbg !74
  %425 = bitcast i32 %424 to <2 x bfloat>, !dbg !74
  %426 = extractvalue { i32, i32, i32, i32 } %423, 1, !dbg !74
  %427 = bitcast i32 %426 to <2 x bfloat>, !dbg !74
  %428 = extractvalue { i32, i32, i32, i32 } %423, 2, !dbg !74
  %429 = bitcast i32 %428 to <2 x bfloat>, !dbg !74
  %430 = extractvalue { i32, i32, i32, i32 } %423, 3, !dbg !74
  %431 = bitcast i32 %430 to <2 x bfloat>, !dbg !74
  %432 = extractelement <2 x bfloat> %425, i64 0, !dbg !74
  %433 = extractelement <2 x bfloat> %425, i64 1, !dbg !74
  %434 = extractelement <2 x bfloat> %427, i64 0, !dbg !74
  %435 = extractelement <2 x bfloat> %427, i64 1, !dbg !74
  %436 = extractelement <2 x bfloat> %429, i64 0, !dbg !74
  %437 = extractelement <2 x bfloat> %429, i64 1, !dbg !74
  %438 = extractelement <2 x bfloat> %431, i64 0, !dbg !74
  %439 = extractelement <2 x bfloat> %431, i64 1, !dbg !74
  %440 = fpext bfloat %432 to float, !dbg !75
  %441 = fpext bfloat %433 to float, !dbg !75
  %442 = fpext bfloat %434 to float, !dbg !75
  %443 = fpext bfloat %435 to float, !dbg !75
  %444 = fpext bfloat %436 to float, !dbg !75
  %445 = fpext bfloat %437 to float, !dbg !75
  %446 = fpext bfloat %438 to float, !dbg !75
  %447 = fpext bfloat %439 to float, !dbg !75
  %448 = fmul float %421, %440, !dbg !76
  %449 = fmul float %421, %441, !dbg !76
  %450 = fmul float %421, %442, !dbg !76
  %451 = fmul float %421, %443, !dbg !76
  %452 = fmul float %421, %444, !dbg !76
  %453 = fmul float %421, %445, !dbg !76
  %454 = fmul float %421, %446, !dbg !76
  %455 = fmul float %421, %447, !dbg !76
  %456 = tail call float @llvm.nvvm.round.f(float %448) #4, !dbg !77
  %457 = tail call float @llvm.nvvm.round.f(float %449) #4, !dbg !77
  %458 = tail call float @llvm.nvvm.round.f(float %450) #4, !dbg !77
  %459 = tail call float @llvm.nvvm.round.f(float %451) #4, !dbg !77
  %460 = tail call float @llvm.nvvm.round.f(float %452) #4, !dbg !77
  %461 = tail call float @llvm.nvvm.round.f(float %453) #4, !dbg !77
  %462 = tail call float @llvm.nvvm.round.f(float %454) #4, !dbg !77
  %463 = tail call float @llvm.nvvm.round.f(float %455) #4, !dbg !77
  %464 = insertelement <4 x float> poison, float %456, i64 0, !dbg !78
  %465 = insertelement <4 x float> %464, float %457, i64 1, !dbg !78
  %466 = insertelement <4 x float> %465, float %458, i64 2, !dbg !78
  %467 = insertelement <4 x float> %466, float %459, i64 3, !dbg !78
  %468 = fcmp ogt <4 x float> %467, splat (float -1.270000e+02), !dbg !78
  %469 = fcmp uno <4 x float> %467, zeroinitializer, !dbg !80
  %470 = or <4 x i1> %468, %469, !dbg !81
  %471 = select <4 x i1> %470, <4 x float> %467, <4 x float> splat (float -1.270000e+02), !dbg !82
  %472 = fcmp olt <4 x float> %471, splat (float 1.270000e+02), !dbg !83
  %473 = fcmp uno <4 x float> %471, zeroinitializer, !dbg !85
  %474 = or <4 x i1> %472, %473, !dbg !86
  %475 = fptosi <4 x float> %471 to <4 x i8>, !dbg !87
  %476 = select <4 x i1> %474, <4 x i8> %475, <4 x i8> splat (i8 127), !dbg !88
  %477 = insertelement <4 x float> poison, float %460, i64 0, !dbg !78
  %478 = insertelement <4 x float> %477, float %461, i64 1, !dbg !78
  %479 = insertelement <4 x float> %478, float %462, i64 2, !dbg !78
  %480 = insertelement <4 x float> %479, float %463, i64 3, !dbg !78
  %481 = fcmp ogt <4 x float> %480, splat (float -1.270000e+02), !dbg !78
  %482 = fcmp uno <4 x float> %480, zeroinitializer, !dbg !80
  %483 = or <4 x i1> %481, %482, !dbg !81
  %484 = select <4 x i1> %483, <4 x float> %480, <4 x float> splat (float -1.270000e+02), !dbg !82
  %485 = fcmp olt <4 x float> %484, splat (float 1.270000e+02), !dbg !83
  %486 = fcmp uno <4 x float> %484, zeroinitializer, !dbg !85
  %487 = or <4 x i1> %485, %486, !dbg !86
  %488 = fptosi <4 x float> %484 to <4 x i8>, !dbg !87
  %489 = select <4 x i1> %487, <4 x i8> %488, <4 x i8> splat (i8 127), !dbg !88
  %490 = add i32 %16, %422, !dbg !89
  %491 = sext i32 %490 to i64, !dbg !90
  %492 = getelementptr i8, ptr addrspace(1) %3, i64 %491, !dbg !90
  %493 = bitcast <4 x i8> %476 to i32, !dbg !91
  %494 = bitcast <4 x i8> %489 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %493, i32 %494, ptr addrspace(1) %492, i1 %14) #4, !dbg !91
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %66) #4, !dbg !74
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !74
  %497 = bitcast i32 %496 to <2 x bfloat>, !dbg !74
  %498 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !74
  %499 = bitcast i32 %498 to <2 x bfloat>, !dbg !74
  %500 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !74
  %501 = bitcast i32 %500 to <2 x bfloat>, !dbg !74
  %502 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !74
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !74
  %504 = extractelement <2 x bfloat> %497, i64 0, !dbg !74
  %505 = extractelement <2 x bfloat> %497, i64 1, !dbg !74
  %506 = extractelement <2 x bfloat> %499, i64 0, !dbg !74
  %507 = extractelement <2 x bfloat> %499, i64 1, !dbg !74
  %508 = extractelement <2 x bfloat> %501, i64 0, !dbg !74
  %509 = extractelement <2 x bfloat> %501, i64 1, !dbg !74
  %510 = extractelement <2 x bfloat> %503, i64 0, !dbg !74
  %511 = extractelement <2 x bfloat> %503, i64 1, !dbg !74
  %512 = fpext bfloat %504 to float, !dbg !75
  %513 = fpext bfloat %505 to float, !dbg !75
  %514 = fpext bfloat %506 to float, !dbg !75
  %515 = fpext bfloat %507 to float, !dbg !75
  %516 = fpext bfloat %508 to float, !dbg !75
  %517 = fpext bfloat %509 to float, !dbg !75
  %518 = fpext bfloat %510 to float, !dbg !75
  %519 = fpext bfloat %511 to float, !dbg !75
  %520 = fmul float %421, %512, !dbg !76
  %521 = fmul float %421, %513, !dbg !76
  %522 = fmul float %421, %514, !dbg !76
  %523 = fmul float %421, %515, !dbg !76
  %524 = fmul float %421, %516, !dbg !76
  %525 = fmul float %421, %517, !dbg !76
  %526 = fmul float %421, %518, !dbg !76
  %527 = fmul float %421, %519, !dbg !76
  %528 = tail call float @llvm.nvvm.round.f(float %520) #4, !dbg !77
  %529 = tail call float @llvm.nvvm.round.f(float %521) #4, !dbg !77
  %530 = tail call float @llvm.nvvm.round.f(float %522) #4, !dbg !77
  %531 = tail call float @llvm.nvvm.round.f(float %523) #4, !dbg !77
  %532 = tail call float @llvm.nvvm.round.f(float %524) #4, !dbg !77
  %533 = tail call float @llvm.nvvm.round.f(float %525) #4, !dbg !77
  %534 = tail call float @llvm.nvvm.round.f(float %526) #4, !dbg !77
  %535 = tail call float @llvm.nvvm.round.f(float %527) #4, !dbg !77
  %536 = insertelement <4 x float> poison, float %528, i64 0, !dbg !78
  %537 = insertelement <4 x float> %536, float %529, i64 1, !dbg !78
  %538 = insertelement <4 x float> %537, float %530, i64 2, !dbg !78
  %539 = insertelement <4 x float> %538, float %531, i64 3, !dbg !78
  %540 = fcmp ogt <4 x float> %539, splat (float -1.270000e+02), !dbg !78
  %541 = fcmp uno <4 x float> %539, zeroinitializer, !dbg !80
  %542 = or <4 x i1> %540, %541, !dbg !81
  %543 = select <4 x i1> %542, <4 x float> %539, <4 x float> splat (float -1.270000e+02), !dbg !82
  %544 = fcmp olt <4 x float> %543, splat (float 1.270000e+02), !dbg !83
  %545 = fcmp uno <4 x float> %543, zeroinitializer, !dbg !85
  %546 = or <4 x i1> %544, %545, !dbg !86
  %547 = fptosi <4 x float> %543 to <4 x i8>, !dbg !87
  %548 = select <4 x i1> %546, <4 x i8> %547, <4 x i8> splat (i8 127), !dbg !88
  %549 = insertelement <4 x float> poison, float %532, i64 0, !dbg !78
  %550 = insertelement <4 x float> %549, float %533, i64 1, !dbg !78
  %551 = insertelement <4 x float> %550, float %534, i64 2, !dbg !78
  %552 = insertelement <4 x float> %551, float %535, i64 3, !dbg !78
  %553 = fcmp ogt <4 x float> %552, splat (float -1.270000e+02), !dbg !78
  %554 = fcmp uno <4 x float> %552, zeroinitializer, !dbg !80
  %555 = or <4 x i1> %553, %554, !dbg !81
  %556 = select <4 x i1> %555, <4 x float> %552, <4 x float> splat (float -1.270000e+02), !dbg !82
  %557 = fcmp olt <4 x float> %556, splat (float 1.270000e+02), !dbg !83
  %558 = fcmp uno <4 x float> %556, zeroinitializer, !dbg !85
  %559 = or <4 x i1> %557, %558, !dbg !86
  %560 = fptosi <4 x float> %556 to <4 x i8>, !dbg !87
  %561 = select <4 x i1> %559, <4 x i8> %560, <4 x i8> splat (i8 127), !dbg !88
  %562 = add i32 %60, %422, !dbg !89
  %563 = sext i32 %562 to i64, !dbg !90
  %564 = getelementptr i8, ptr addrspace(1) %3, i64 %563, !dbg !90
  %565 = bitcast <4 x i8> %548 to i32, !dbg !91
  %566 = bitcast <4 x i8> %561 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %565, i32 %566, ptr addrspace(1) %564, i1 %66) #4, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 37, column: 144, scope: !6)
!22 = !DILocation(line: 40, column: 48, scope: !6)
!23 = !DILocation(line: 42, column: 48, scope: !6)
!24 = !DILocation(line: 32, column: 31, scope: !6)
!25 = !DILocation(line: 33, column: 29, scope: !6)
!26 = !DILocation(line: 37, column: 91, scope: !6)
!27 = !DILocation(line: 94, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 39, column: 45, scope: !6)
!31 = !DILocation(line: 96, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 96, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 97, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !35)
!35 = !DILocation(line: 41, column: 45, scope: !6)
!36 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !35)
!38 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !35)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !41)
!40 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!41 = !DILocation(line: 43, column: 38, scope: !6)
!42 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !41)
!44 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !41)
!45 = !DILocation(line: 110, column: 29, scope: !28, inlinedAt: !41)
!46 = !DILocation(line: 45, column: 36, scope: !6)
!47 = !DILocation(line: 115, column: 29, scope: !28, inlinedAt: !48)
!48 = !DILocation(line: 44, column: 38, scope: !6)
!49 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !48)
!50 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !48)
!51 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !48)
!52 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !48)
!53 = !DILocation(line: 46, column: 36, scope: !6)
!54 = !DILocation(line: 45, column: 25, scope: !6)
!55 = !DILocation(line: 46, column: 25, scope: !6)
!56 = !DILocation(line: 97, column: 29, scope: !28, inlinedAt: !57)
!57 = !DILocation(line: 55, column: 44, scope: !6)
!58 = !DILocation(line: 56, column: 16, scope: !6)
!59 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !60)
!60 = !DILocation(line: 57, column: 45, scope: !6)
!61 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !62)
!62 = !DILocation(line: 58, column: 45, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !62)
!65 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !62)
!66 = !DILocation(line: 60, column: 24, scope: !6)
!67 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !68)
!68 = !DILocation(line: 63, column: 46, scope: !6)
!69 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !68)
!70 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !68)
!71 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !68)
!72 = !DILocation(line: 66, column: 25, scope: !6)
!73 = !DILocation(line: 78, column: 41, scope: !6)
!74 = !DILocation(line: 53, column: 83, scope: !6)
!75 = !DILocation(line: 53, column: 145, scope: !6)
!76 = !DILocation(line: 69, column: 23, scope: !6)
!77 = !DILocation(line: 70, column: 36, scope: !6)
!78 = !DILocation(line: 102, column: 15, scope: !28, inlinedAt: !79)
!79 = !DILocation(line: 73, column: 46, scope: !6)
!80 = !DILocation(line: 104, column: 21, scope: !28, inlinedAt: !79)
!81 = !DILocation(line: 104, column: 16, scope: !28, inlinedAt: !79)
!82 = !DILocation(line: 105, column: 29, scope: !28, inlinedAt: !79)
!83 = !DILocation(line: 94, column: 15, scope: !28, inlinedAt: !84)
!84 = !DILocation(line: 75, column: 46, scope: !6)
!85 = !DILocation(line: 96, column: 21, scope: !28, inlinedAt: !84)
!86 = !DILocation(line: 96, column: 16, scope: !28, inlinedAt: !84)
!87 = !DILocation(line: 77, column: 25, scope: !6)
!88 = !DILocation(line: 97, column: 29, scope: !28, inlinedAt: !84)
!89 = !DILocation(line: 78, column: 36, scope: !6)
!90 = !DILocation(line: 78, column: 29, scope: !6)
!91 = !DILocation(line: 78, column: 53, scope: !6)
!92 = !DILocation(line: 47, column: 4, scope: !6)
