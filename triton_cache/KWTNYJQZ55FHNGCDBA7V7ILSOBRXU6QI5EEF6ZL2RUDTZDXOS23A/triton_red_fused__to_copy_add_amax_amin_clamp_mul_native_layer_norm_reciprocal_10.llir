; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = icmp slt i32 %16, 3600, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 31, !dbg !11
  %20 = shl i32 %18, 2, !dbg !11
  %21 = and i32 %20, 508, !dbg !11
  %22 = sext i32 %16 to i64, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %4, i64 %22, !dbg !12
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %27 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %17) #5, !dbg !13
  %28 = bitcast i16 %27 to bfloat, !dbg !13
  %29 = getelementptr bfloat, ptr addrspace(1) %5, i64 %22, !dbg !14
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %29, i1 %17) #5, !dbg !15
  %34 = bitcast i16 %33 to bfloat, !dbg !15
  %35 = mul i32 %16, 3072, !dbg !16
  %.inv = fcmp oge bfloat %28, 0xR0000, !dbg !17
  %36 = select i1 %.inv, bfloat 0xR0000, bfloat %28, !dbg !17
  %37 = fpext bfloat %36 to float, !dbg !17
  %38 = fsub float 0.000000e+00, %37, !dbg !21
  %.inv3 = fcmp ole bfloat %34, 0xR0000, !dbg !22
  %39 = select i1 %.inv3, bfloat 0xR0000, bfloat %34, !dbg !22
  %40 = fpext bfloat %39 to float, !dbg !22
  %41 = fcmp ogt float %38, %40, !dbg !24
  %42 = fcmp uno float %38, 0.000000e+00, !dbg !26
  %43 = or i1 %42, %41, !dbg !27
  %44 = select i1 %43, float %38, float %40, !dbg !28
  %45 = fmul float %44, 0x3F80204080000000, !dbg !29
  %46 = fcmp ogt float %45, 0x3EE4F8B580000000, !dbg !30
  %47 = fcmp uno float %45, 0.000000e+00, !dbg !32
  %48 = or i1 %46, %47, !dbg !33
  %49 = select i1 %48, float %45, float 0x3EE4F8B580000000, !dbg !34
  %50 = zext nneg i32 %21 to i64, !dbg !35
  %51 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !36
  %52 = shufflevector <4 x i1> %51, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !36
  %53 = insertelement <4 x float> poison, float %49, i64 0, !dbg !37
  %54 = shufflevector <4 x float> %53, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !37
  %55 = or disjoint i32 %35, %21, !dbg !38
  %56 = sext i32 %55 to i64, !dbg !39
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %56, !dbg !39
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %57, i1 %17) #5, !dbg !40
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !40
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !40
  %61 = extractvalue { i32, i32 } %58, 1, !dbg !40
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !40
  %63 = or disjoint i64 %50, 6144, !dbg !41
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !42
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 true) #5, !dbg !43
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !43
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !43
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !43
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !43
  %70 = getelementptr bfloat, ptr addrspace(1) %2, i64 %63, !dbg !44
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %70, i1 true) #5, !dbg !45
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !45
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !45
  %74 = extractvalue { i32, i32 } %71, 1, !dbg !45
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !45
  %76 = getelementptr i32, ptr addrspace(1) %3, i64 %56, !dbg !46
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %17) #5, !dbg !47
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !47
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !47
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !47
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !47
  %82 = getelementptr bfloat, ptr addrspace(1) %6, i64 %50, !dbg !48
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %82, i1 true) #5, !dbg !49
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !49
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !49
  %86 = extractvalue { i32, i32 } %83, 1, !dbg !49
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !49
  %88 = getelementptr bfloat, ptr addrspace(1) %7, i64 %50, !dbg !50
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %88, i1 true) #5, !dbg !51
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !51
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !51
  %92 = extractvalue { i32, i32 } %89, 1, !dbg !51
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !51
  %94 = shufflevector <2 x bfloat> %60, <2 x bfloat> %62, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %95 = fpext <4 x bfloat> %94 to <4 x float>, !dbg !52
  %96 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !43
  %97 = insertelement <4 x i32> %96, i32 %67, i64 1, !dbg !43
  %98 = insertelement <4 x i32> %97, i32 %68, i64 2, !dbg !43
  %99 = insertelement <4 x i32> %98, i32 %69, i64 3, !dbg !43
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !43
  %101 = shufflevector <2 x bfloat> %73, <2 x bfloat> %75, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %102 = fpext <4 x bfloat> %101 to <4 x float>, !dbg !53
  %103 = shufflevector <2 x bfloat> %85, <2 x bfloat> %87, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %104 = fpext <4 x bfloat> %103 to <4 x float>, !dbg !54
  %105 = shufflevector <2 x bfloat> %91, <2 x bfloat> %93, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %106 = fpext <4 x bfloat> %105 to <4 x float>, !dbg !55
  %107 = fadd <4 x float> %100, %102, !dbg !56
  %108 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !57
  %109 = insertelement <4 x i32> %108, i32 %79, i64 1, !dbg !57
  %110 = insertelement <4 x i32> %109, i32 %80, i64 2, !dbg !57
  %111 = insertelement <4 x i32> %110, i32 %81, i64 3, !dbg !57
  %112 = sitofp <4 x i32> %111 to <4 x float>, !dbg !57
  %113 = fmul <4 x float> %54, %112, !dbg !37
  %114 = fmul <4 x float> %113, %104, !dbg !58
  %115 = fadd <4 x float> %114, %106, !dbg !59
  %116 = fmul <4 x float> %107, %115, !dbg !60
  %117 = fadd <4 x float> %116, %95, !dbg !61
  %118 = select <4 x i1> %52, <4 x float> %117, <4 x float> zeroinitializer, !dbg !36
  %119 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %120 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %121 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %122 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !62
  %123 = getelementptr bfloat, ptr addrspace(1) %8, i64 %56, !dbg !63
  %124 = extractelement <4 x float> %117, i64 0, !dbg !64
  %125 = fptrunc float %124 to bfloat, !dbg !64
  %126 = extractelement <4 x float> %117, i64 1, !dbg !64
  %127 = fptrunc float %126 to bfloat, !dbg !64
  %128 = extractelement <4 x float> %117, i64 2, !dbg !64
  %129 = fptrunc float %128 to bfloat, !dbg !64
  %130 = extractelement <4 x float> %117, i64 3, !dbg !64
  %131 = fptrunc float %130 to bfloat, !dbg !64
  %132 = insertelement <2 x bfloat> poison, bfloat %125, i64 0, !dbg !64
  %133 = insertelement <2 x bfloat> %132, bfloat %127, i64 1, !dbg !64
  %134 = bitcast <2 x bfloat> %133 to i32, !dbg !64
  %135 = insertelement <2 x bfloat> poison, bfloat %129, i64 0, !dbg !64
  %136 = insertelement <2 x bfloat> %135, bfloat %131, i64 1, !dbg !64
  %137 = bitcast <2 x bfloat> %136 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %137, ptr addrspace(1) %123, i1 %17) #5, !dbg !64
  br label %._crit_edge, !dbg !35

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 512, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %138 = phi float [ %119, %.peel.begin ], [ %254, %._crit_edge ]
  %139 = phi float [ %120, %.peel.begin ], [ %255, %._crit_edge ]
  %140 = phi float [ %121, %.peel.begin ], [ %256, %._crit_edge ]
  %141 = phi float [ %122, %.peel.begin ], [ %257, %._crit_edge ]
  %142 = phi float [ 0.000000e+00, %.peel.begin ], [ %250, %._crit_edge ]
  %143 = phi float [ 0.000000e+00, %.peel.begin ], [ %251, %._crit_edge ]
  %144 = phi float [ 0.000000e+00, %.peel.begin ], [ %252, %._crit_edge ]
  %145 = phi float [ 0.000000e+00, %.peel.begin ], [ %253, %._crit_edge ]
  %146 = phi <4 x float> [ %118, %.peel.begin ], [ %249, %._crit_edge ]
  %147 = or disjoint i64 %indvars.iv, %50, !dbg !65
  %148 = trunc nuw nsw i64 %147 to i32, !dbg !38
  %149 = add i32 %35, %148, !dbg !38
  %150 = sext i32 %149 to i64, !dbg !39
  %151 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !39
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %151, i1 %17) #5, !dbg !40
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !40
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !40
  %155 = extractvalue { i32, i32 } %152, 1, !dbg !40
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !40
  %157 = add nuw nsw i64 %147, 6144, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !42
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %158, i1 true) #5, !dbg !43
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !43
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !43
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !43
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !43
  %164 = getelementptr bfloat, ptr addrspace(1) %2, i64 %157, !dbg !44
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %164, i1 true) #5, !dbg !45
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !45
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !45
  %168 = extractvalue { i32, i32 } %165, 1, !dbg !45
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !45
  %170 = getelementptr i32, ptr addrspace(1) %3, i64 %150, !dbg !46
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %17) #5, !dbg !47
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !47
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !47
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !47
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !47
  %176 = getelementptr bfloat, ptr addrspace(1) %6, i64 %147, !dbg !48
  %177 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %176, i1 true) #5, !dbg !49
  %178 = extractvalue { i32, i32 } %177, 0, !dbg !49
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !49
  %180 = extractvalue { i32, i32 } %177, 1, !dbg !49
  %181 = bitcast i32 %180 to <2 x bfloat>, !dbg !49
  %182 = getelementptr bfloat, ptr addrspace(1) %7, i64 %147, !dbg !50
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %182, i1 true) #5, !dbg !51
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !51
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !51
  %186 = extractvalue { i32, i32 } %183, 1, !dbg !51
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !51
  %188 = shufflevector <2 x bfloat> %154, <2 x bfloat> %156, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !52
  %189 = fpext <4 x bfloat> %188 to <4 x float>, !dbg !52
  %190 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !43
  %191 = insertelement <4 x i32> %190, i32 %161, i64 1, !dbg !43
  %192 = insertelement <4 x i32> %191, i32 %162, i64 2, !dbg !43
  %193 = insertelement <4 x i32> %192, i32 %163, i64 3, !dbg !43
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !43
  %195 = shufflevector <2 x bfloat> %167, <2 x bfloat> %169, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !53
  %196 = fpext <4 x bfloat> %195 to <4 x float>, !dbg !53
  %197 = shufflevector <2 x bfloat> %179, <2 x bfloat> %181, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !54
  %198 = fpext <4 x bfloat> %197 to <4 x float>, !dbg !54
  %199 = shufflevector <2 x bfloat> %185, <2 x bfloat> %187, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %200 = fpext <4 x bfloat> %199 to <4 x float>, !dbg !55
  %201 = fadd <4 x float> %194, %196, !dbg !56
  %202 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !57
  %203 = insertelement <4 x i32> %202, i32 %173, i64 1, !dbg !57
  %204 = insertelement <4 x i32> %203, i32 %174, i64 2, !dbg !57
  %205 = insertelement <4 x i32> %204, i32 %175, i64 3, !dbg !57
  %206 = sitofp <4 x i32> %205 to <4 x float>, !dbg !57
  %207 = fmul <4 x float> %54, %206, !dbg !37
  %208 = fmul <4 x float> %207, %198, !dbg !58
  %209 = fadd <4 x float> %208, %200, !dbg !59
  %210 = fmul <4 x float> %201, %209, !dbg !60
  %211 = fadd <4 x float> %210, %189, !dbg !61
  %212 = fsub <4 x float> %211, %146, !dbg !66
  %213 = extractelement <4 x float> %212, i64 0, !dbg !66
  %214 = fsub <4 x float> %211, %146, !dbg !66
  %215 = extractelement <4 x float> %214, i64 1, !dbg !66
  %216 = fsub <4 x float> %211, %146, !dbg !66
  %217 = extractelement <4 x float> %216, i64 2, !dbg !66
  %218 = fsub <4 x float> %211, %146, !dbg !66
  %219 = extractelement <4 x float> %218, i64 3, !dbg !66
  %220 = fadd float %138, 1.000000e+00, !dbg !68
  %221 = fadd float %139, 1.000000e+00, !dbg !68
  %222 = fadd float %140, 1.000000e+00, !dbg !68
  %223 = fadd float %141, 1.000000e+00, !dbg !68
  %224 = tail call float @llvm.nvvm.div.full(float %213, float %220), !dbg !69
  %225 = tail call float @llvm.nvvm.div.full(float %215, float %221), !dbg !69
  %226 = tail call float @llvm.nvvm.div.full(float %217, float %222), !dbg !69
  %227 = tail call float @llvm.nvvm.div.full(float %219, float %223), !dbg !69
  %228 = insertelement <4 x float> poison, float %224, i64 0, !dbg !70
  %229 = insertelement <4 x float> %228, float %225, i64 1, !dbg !70
  %230 = insertelement <4 x float> %229, float %226, i64 2, !dbg !70
  %231 = insertelement <4 x float> %230, float %227, i64 3, !dbg !70
  %232 = fadd <4 x float> %146, %231, !dbg !70
  %233 = fsub <4 x float> %211, %232, !dbg !71
  %234 = fsub <4 x float> %211, %232, !dbg !71
  %235 = fsub <4 x float> %211, %232, !dbg !71
  %236 = fsub <4 x float> %211, %232, !dbg !71
  %237 = fmul <4 x float> %212, %233, !dbg !72
  %238 = extractelement <4 x float> %237, i64 0, !dbg !72
  %239 = fmul <4 x float> %214, %234, !dbg !72
  %240 = extractelement <4 x float> %239, i64 1, !dbg !72
  %241 = fmul <4 x float> %216, %235, !dbg !72
  %242 = extractelement <4 x float> %241, i64 2, !dbg !72
  %243 = fmul <4 x float> %218, %236, !dbg !72
  %244 = extractelement <4 x float> %243, i64 3, !dbg !72
  %245 = fadd float %142, %238, !dbg !73
  %246 = fadd float %143, %240, !dbg !73
  %247 = fadd float %144, %242, !dbg !73
  %248 = fadd float %145, %244, !dbg !73
  %249 = select <4 x i1> %52, <4 x float> %232, <4 x float> %146, !dbg !36
  %250 = select i1 %17, float %245, float %142, !dbg !74
  %251 = select i1 %17, float %246, float %143, !dbg !74
  %252 = select i1 %17, float %247, float %144, !dbg !74
  %253 = select i1 %17, float %248, float %145, !dbg !74
  %254 = select i1 %17, float %220, float %138, !dbg !62
  %255 = select i1 %17, float %221, float %139, !dbg !62
  %256 = select i1 %17, float %222, float %140, !dbg !62
  %257 = select i1 %17, float %223, float %141, !dbg !62
  %258 = getelementptr bfloat, ptr addrspace(1) %8, i64 %150, !dbg !63
  %259 = extractelement <4 x float> %211, i64 0, !dbg !64
  %260 = fptrunc float %259 to bfloat, !dbg !64
  %261 = extractelement <4 x float> %211, i64 1, !dbg !64
  %262 = fptrunc float %261 to bfloat, !dbg !64
  %263 = extractelement <4 x float> %211, i64 2, !dbg !64
  %264 = fptrunc float %263 to bfloat, !dbg !64
  %265 = extractelement <4 x float> %211, i64 3, !dbg !64
  %266 = fptrunc float %265 to bfloat, !dbg !64
  %267 = insertelement <2 x bfloat> poison, bfloat %260, i64 0, !dbg !64
  %268 = insertelement <2 x bfloat> %267, bfloat %262, i64 1, !dbg !64
  %269 = bitcast <2 x bfloat> %268 to i32, !dbg !64
  %270 = insertelement <2 x bfloat> poison, bfloat %264, i64 0, !dbg !64
  %271 = insertelement <2 x bfloat> %270, bfloat %266, i64 1, !dbg !64
  %272 = bitcast <2 x bfloat> %271 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %269, i32 %272, ptr addrspace(1) %258, i1 %17) #5, !dbg !64
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !35
  %273 = icmp samesign ult i64 %indvars.iv, 2560, !dbg !35
  br i1 %273, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !35, !llvm.loop !75

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %274 = fadd float %250, %251, !dbg !11
  %275 = lshr i32 %18, 5, !dbg !11
  %276 = extractelement <4 x float> %249, i64 0, !dbg !77
  %277 = extractelement <4 x float> %249, i64 1, !dbg !77
  %278 = fsub float %277, %276, !dbg !77
  %279 = fadd float %254, %255, !dbg !80
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !81
  %281 = tail call float @llvm.nvvm.div.full(float %255, float %279), !dbg !82
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !83
  %283 = fmul float %278, %282, !dbg !84
  %284 = fadd float %276, %283, !dbg !85
  %285 = fmul float %278, %278, !dbg !86
  %286 = fmul float %285, %254, !dbg !87
  %287 = fmul float %286, %282, !dbg !88
  %288 = fadd float %274, %287, !dbg !89
  %289 = extractelement <4 x float> %249, i64 2, !dbg !77
  %290 = fsub float %289, %284, !dbg !77
  %291 = fadd float %256, %279, !dbg !80
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !81
  %293 = tail call float @llvm.nvvm.div.full(float %256, float %291), !dbg !82
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !83
  %295 = fmul float %294, %290, !dbg !84
  %296 = fadd float %284, %295, !dbg !85
  %297 = fadd float %252, %288, !dbg !90
  %298 = fmul float %290, %290, !dbg !86
  %299 = fmul float %279, %298, !dbg !87
  %300 = fmul float %294, %299, !dbg !88
  %301 = fadd float %297, %300, !dbg !89
  %302 = extractelement <4 x float> %249, i64 3, !dbg !77
  %303 = fsub float %302, %296, !dbg !77
  %304 = fadd float %257, %291, !dbg !80
  %305 = fcmp oeq float %304, 0.000000e+00, !dbg !81
  %306 = tail call float @llvm.nvvm.div.full(float %257, float %304), !dbg !82
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !83
  %308 = fmul float %307, %303, !dbg !84
  %309 = fadd float %296, %308, !dbg !85
  %310 = fadd float %253, %301, !dbg !90
  %311 = fmul float %303, %303, !dbg !86
  %312 = fmul float %291, %311, !dbg !87
  %313 = fmul float %307, %312, !dbg !88
  %314 = fadd float %310, %313, !dbg !89
  %315 = bitcast float %309 to i32, !dbg !91
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 16, i32 31), !dbg !91
  %317 = bitcast i32 %316 to float, !dbg !91
  %318 = bitcast float %314 to i32, !dbg !91
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 16, i32 31), !dbg !91
  %320 = bitcast i32 %319 to float, !dbg !91
  %321 = bitcast float %304 to i32, !dbg !91
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 16, i32 31), !dbg !91
  %323 = bitcast i32 %322 to float, !dbg !91
  %324 = fsub float %317, %309, !dbg !77
  %325 = fadd float %304, %323, !dbg !80
  %326 = fcmp oeq float %325, 0.000000e+00, !dbg !81
  %327 = tail call float @llvm.nvvm.div.full(float %323, float %325), !dbg !82
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !83
  %329 = fmul float %328, %324, !dbg !84
  %330 = fadd float %309, %329, !dbg !85
  %331 = fadd float %314, %320, !dbg !90
  %332 = fmul float %324, %324, !dbg !86
  %333 = fmul float %304, %332, !dbg !87
  %334 = fmul float %328, %333, !dbg !88
  %335 = fadd float %331, %334, !dbg !89
  %336 = bitcast float %330 to i32, !dbg !91
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 8, i32 31), !dbg !91
  %338 = bitcast i32 %337 to float, !dbg !91
  %339 = bitcast float %335 to i32, !dbg !91
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 8, i32 31), !dbg !91
  %341 = bitcast i32 %340 to float, !dbg !91
  %342 = bitcast float %325 to i32, !dbg !91
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 8, i32 31), !dbg !91
  %344 = bitcast i32 %343 to float, !dbg !91
  %345 = fsub float %338, %330, !dbg !77
  %346 = fadd float %325, %344, !dbg !80
  %347 = fcmp oeq float %346, 0.000000e+00, !dbg !81
  %348 = tail call float @llvm.nvvm.div.full(float %344, float %346), !dbg !82
  %349 = select i1 %347, float 0.000000e+00, float %348, !dbg !83
  %350 = fmul float %345, %349, !dbg !84
  %351 = fadd float %330, %350, !dbg !85
  %352 = fadd float %335, %341, !dbg !90
  %353 = fmul float %345, %345, !dbg !86
  %354 = fmul float %325, %353, !dbg !87
  %355 = fmul float %349, %354, !dbg !88
  %356 = fadd float %352, %355, !dbg !89
  %357 = bitcast float %351 to i32, !dbg !91
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !91
  %359 = bitcast i32 %358 to float, !dbg !91
  %360 = bitcast float %356 to i32, !dbg !91
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !91
  %362 = bitcast i32 %361 to float, !dbg !91
  %363 = bitcast float %346 to i32, !dbg !91
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 4, i32 31), !dbg !91
  %365 = bitcast i32 %364 to float, !dbg !91
  %366 = fsub float %359, %351, !dbg !77
  %367 = fadd float %346, %365, !dbg !80
  %368 = fcmp oeq float %367, 0.000000e+00, !dbg !81
  %369 = tail call float @llvm.nvvm.div.full(float %365, float %367), !dbg !82
  %370 = select i1 %368, float 0.000000e+00, float %369, !dbg !83
  %371 = fmul float %366, %370, !dbg !84
  %372 = fadd float %351, %371, !dbg !85
  %373 = fadd float %356, %362, !dbg !90
  %374 = fmul float %366, %366, !dbg !86
  %375 = fmul float %346, %374, !dbg !87
  %376 = fmul float %370, %375, !dbg !88
  %377 = fadd float %373, %376, !dbg !89
  %378 = bitcast float %372 to i32, !dbg !91
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !91
  %380 = bitcast i32 %379 to float, !dbg !91
  %381 = bitcast float %377 to i32, !dbg !91
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !91
  %383 = bitcast i32 %382 to float, !dbg !91
  %384 = bitcast float %367 to i32, !dbg !91
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !91
  %386 = bitcast i32 %385 to float, !dbg !91
  %387 = fsub float %380, %372, !dbg !77
  %388 = fadd float %367, %386, !dbg !80
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !81
  %390 = tail call float @llvm.nvvm.div.full(float %386, float %388), !dbg !82
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !83
  %392 = fmul float %387, %391, !dbg !84
  %393 = fadd float %372, %392, !dbg !85
  %394 = fadd float %377, %383, !dbg !90
  %395 = fmul float %387, %387, !dbg !86
  %396 = fmul float %367, %395, !dbg !87
  %397 = fmul float %391, %396, !dbg !88
  %398 = fadd float %394, %397, !dbg !89
  %399 = bitcast float %393 to i32, !dbg !91
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !91
  %401 = bitcast i32 %400 to float, !dbg !91
  %402 = bitcast float %398 to i32, !dbg !91
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !91
  %404 = bitcast i32 %403 to float, !dbg !91
  %405 = bitcast float %388 to i32, !dbg !91
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 1, i32 31), !dbg !91
  %407 = bitcast i32 %406 to float, !dbg !91
  %408 = fsub float %401, %393, !dbg !77
  %409 = fadd float %388, %407, !dbg !80
  %410 = fcmp oeq float %409, 0.000000e+00, !dbg !81
  %411 = tail call float @llvm.nvvm.div.full(float %407, float %409), !dbg !82
  %412 = select i1 %410, float 0.000000e+00, float %411, !dbg !83
  %413 = fmul float %408, %412, !dbg !84
  %414 = fadd float %393, %413, !dbg !85
  %415 = fadd float %398, %404, !dbg !90
  %416 = fmul float %408, %408, !dbg !86
  %417 = fmul float %388, %416, !dbg !87
  %418 = fmul float %412, %417, !dbg !88
  %419 = fadd float %415, %418, !dbg !89
  %420 = and i32 %275, 3, !dbg !91
  %421 = icmp eq i32 %19, 0, !dbg !91
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !91
  %423 = bitcast float %414 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 %421) #5, !dbg !91
  %424 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %420, !dbg !91
  %425 = bitcast float %419 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 %421) #5, !dbg !91
  %426 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %420, !dbg !91
  %427 = bitcast float %409 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 %421) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %428 = icmp slt i32 %18, 4, !dbg !91
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18, !dbg !91
  %430 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %429, i1 %428) #5, !dbg !91
  %431 = bitcast i32 %430 to float, !dbg !91
  %432 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %18, !dbg !91
  %433 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %432, i1 %428) #5, !dbg !91
  %434 = bitcast i32 %433 to float, !dbg !91
  %435 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %18, !dbg !91
  %436 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %435, i1 %428) #5, !dbg !91
  %437 = bitcast i32 %436 to float, !dbg !91
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 2, i32 31), !dbg !91
  %439 = bitcast i32 %438 to float, !dbg !91
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 2, i32 31), !dbg !91
  %441 = bitcast i32 %440 to float, !dbg !91
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 2, i32 31), !dbg !91
  %443 = bitcast i32 %442 to float, !dbg !91
  %444 = fsub float %439, %431, !dbg !77
  %445 = fadd float %437, %443, !dbg !80
  %446 = fcmp oeq float %445, 0.000000e+00, !dbg !81
  %447 = tail call float @llvm.nvvm.div.full(float %443, float %445), !dbg !82
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !83
  %449 = fmul float %444, %448, !dbg !84
  %450 = fadd float %449, %431, !dbg !85
  %451 = fadd float %434, %441, !dbg !90
  %452 = fmul float %444, %444, !dbg !86
  %453 = fmul float %452, %437, !dbg !87
  %454 = fmul float %453, %448, !dbg !88
  %455 = fadd float %451, %454, !dbg !89
  %456 = bitcast float %450 to i32, !dbg !91
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 1, i32 31), !dbg !91
  %458 = bitcast i32 %457 to float, !dbg !91
  %459 = bitcast float %455 to i32, !dbg !91
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 1, i32 31), !dbg !91
  %461 = bitcast i32 %460 to float, !dbg !91
  %462 = bitcast float %445 to i32, !dbg !91
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 1, i32 31), !dbg !91
  %464 = bitcast i32 %463 to float, !dbg !91
  %465 = fsub float %458, %450, !dbg !77
  %466 = fadd float %445, %464, !dbg !80
  %467 = fcmp oeq float %466, 0.000000e+00, !dbg !81
  %468 = tail call float @llvm.nvvm.div.full(float %464, float %466), !dbg !82
  %469 = select i1 %467, float 0.000000e+00, float %468, !dbg !83
  %470 = fmul float %465, %469, !dbg !84
  %471 = fadd float %450, %470, !dbg !85
  %472 = fadd float %455, %461, !dbg !90
  %473 = fmul float %465, %465, !dbg !86
  %474 = fmul float %445, %473, !dbg !87
  %475 = fmul float %469, %474, !dbg !88
  %476 = fadd float %472, %475, !dbg !89
  %477 = and i32 %18, 3, !dbg !91
  %478 = icmp eq i32 %477, 0, !dbg !91
  %479 = and i1 %428, %478, !dbg !91
  %480 = bitcast float %471 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %480, i1 %479) #5, !dbg !91
  %481 = bitcast float %476 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %481, i1 %479) #5, !dbg !91
  %482 = bitcast float %466 to <1 x i32>, !dbg !91
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %482, i1 %479) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %483 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !91
  %484 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !91
  %485 = tail call float @llvm.nvvm.div.full(float %484, float 3.072000e+03), !dbg !92
  %486 = fadd float %485, 0x3EB0C6F7A0000000, !dbg !93
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i19 = icmp eq i32 %490, 0, !dbg !94
  br i1 %.not.i19, label %493, label %491, !dbg !94

491:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %492 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %486), !dbg !94
  br label %__nv_rsqrtf.exit21, !dbg !94

493:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %494 = tail call float @llvm.nvvm.rsqrt.approx.f(float %486), !dbg !94
  br label %__nv_rsqrtf.exit21, !dbg !94

__nv_rsqrtf.exit21:                               ; preds = %491, %493
  %.0.i20 = phi float [ %492, %491 ], [ %494, %493 ], !dbg !94
  %495 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !95
  %496 = shufflevector <2 x i1> %495, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !95
  %497 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !96
  %498 = shufflevector <2 x float> %497, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !96
  %499 = insertelement <2 x float> poison, float %483, i64 0, !dbg !97
  %500 = shufflevector <2 x float> %499, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !97
  br label %501, !dbg !98

501:                                              ; preds = %__nv_rsqrtf.exit21, %501
  %indvars.iv45 = phi i64 [ 0, %__nv_rsqrtf.exit21 ], [ %indvars.iv.next46, %501 ]
  %502 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit21 ], [ %592, %501 ]
  %503 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit21 ], [ %593, %501 ]
  %504 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit21 ], [ %564, %501 ]
  %505 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit21 ], [ %598, %501 ]
  %506 = or disjoint i64 %indvars.iv45, %50, !dbg !99
  %507 = trunc nuw nsw i64 %506 to i32, !dbg !100
  %508 = add i32 %35, %507, !dbg !100
  %509 = sext i32 %508 to i64, !dbg !101
  %510 = getelementptr bfloat, ptr addrspace(1) %8, i64 %509, !dbg !101
  %511 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %510, i1 %17) #5, !dbg !102
  %512 = extractvalue { i32, i32 } %511, 0, !dbg !102
  %513 = bitcast i32 %512 to <2 x bfloat>, !dbg !102
  %514 = extractvalue { i32, i32 } %511, 1, !dbg !102
  %515 = bitcast i32 %514 to <2 x bfloat>, !dbg !102
  %516 = or disjoint i64 %506, 12288, !dbg !103
  %517 = getelementptr float, ptr addrspace(1) %1, i64 %516, !dbg !104
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %517, i1 true) #5, !dbg !105
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !105
  %520 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !105
  %521 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !105
  %522 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !105
  %523 = getelementptr bfloat, ptr addrspace(1) %2, i64 %516, !dbg !106
  %524 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %523, i1 true) #5, !dbg !107
  %525 = extractvalue { i32, i32 } %524, 0, !dbg !107
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !107
  %527 = extractvalue { i32, i32 } %524, 1, !dbg !107
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !107
  %529 = add nuw nsw i64 %506, 9216, !dbg !108
  %530 = getelementptr float, ptr addrspace(1) %1, i64 %529, !dbg !109
  %531 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %530, i1 true) #5, !dbg !110
  %532 = extractvalue { i32, i32, i32, i32 } %531, 0, !dbg !110
  %533 = extractvalue { i32, i32, i32, i32 } %531, 1, !dbg !110
  %534 = extractvalue { i32, i32, i32, i32 } %531, 2, !dbg !110
  %535 = extractvalue { i32, i32, i32, i32 } %531, 3, !dbg !110
  %536 = getelementptr bfloat, ptr addrspace(1) %2, i64 %529, !dbg !111
  %537 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %536, i1 true) #5, !dbg !112
  %538 = extractvalue { i32, i32 } %537, 0, !dbg !112
  %539 = bitcast i32 %538 to <2 x bfloat>, !dbg !112
  %540 = extractvalue { i32, i32 } %537, 1, !dbg !112
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !112
  %542 = fcmp uno <2 x float> %504, zeroinitializer, !dbg !113
  %543 = fcmp uno float %502, 0.000000e+00, !dbg !113
  %544 = fcmp uno float %503, 0.000000e+00, !dbg !113
  %545 = fpext <2 x bfloat> %513 to <2 x float>, !dbg !115
  %546 = insertelement <2 x i32> poison, i32 %519, i64 0, !dbg !105
  %547 = insertelement <2 x i32> %546, i32 %520, i64 1, !dbg !105
  %548 = bitcast <2 x i32> %547 to <2 x float>, !dbg !105
  %549 = fpext <2 x bfloat> %526 to <2 x float>, !dbg !116
  %550 = insertelement <2 x i32> poison, i32 %532, i64 0, !dbg !110
  %551 = insertelement <2 x i32> %550, i32 %533, i64 1, !dbg !110
  %552 = bitcast <2 x i32> %551 to <2 x float>, !dbg !110
  %553 = fpext <2 x bfloat> %539 to <2 x float>, !dbg !117
  %554 = fsub <2 x float> %545, %500, !dbg !97
  %555 = fmul <2 x float> %498, %554, !dbg !96
  %556 = fadd <2 x float> %548, %549, !dbg !118
  %557 = fadd <2 x float> %556, splat (float 1.000000e+00), !dbg !119
  %558 = fmul <2 x float> %555, %557, !dbg !120
  %559 = fadd <2 x float> %552, %553, !dbg !121
  %560 = fadd <2 x float> %558, %559, !dbg !122
  %561 = fcmp olt <2 x float> %504, %560, !dbg !123
  %562 = or <2 x i1> %542, %561, !dbg !124
  %563 = select <2 x i1> %562, <2 x float> %504, <2 x float> %560, !dbg !125
  %564 = select <2 x i1> %496, <2 x float> %563, <2 x float> %504, !dbg !95
  %565 = fcmp uno <4 x float> %505, zeroinitializer, !dbg !126
  %566 = getelementptr bfloat, ptr addrspace(1) %9, i64 %509, !dbg !128
  %567 = fptrunc <2 x float> %560 to <2 x bfloat>, !dbg !129
  %568 = fpext <2 x bfloat> %515 to <2 x float>, !dbg !115
  %569 = insertelement <2 x i32> poison, i32 %521, i64 0, !dbg !105
  %570 = insertelement <2 x i32> %569, i32 %522, i64 1, !dbg !105
  %571 = bitcast <2 x i32> %570 to <2 x float>, !dbg !105
  %572 = fpext <2 x bfloat> %528 to <2 x float>, !dbg !116
  %573 = insertelement <2 x i32> poison, i32 %534, i64 0, !dbg !110
  %574 = insertelement <2 x i32> %573, i32 %535, i64 1, !dbg !110
  %575 = bitcast <2 x i32> %574 to <2 x float>, !dbg !110
  %576 = fpext <2 x bfloat> %541 to <2 x float>, !dbg !117
  %577 = fsub <2 x float> %568, %500, !dbg !97
  %578 = fmul <2 x float> %498, %577, !dbg !96
  %579 = fadd <2 x float> %571, %572, !dbg !118
  %580 = fadd <2 x float> %579, splat (float 1.000000e+00), !dbg !119
  %581 = fmul <2 x float> %578, %580, !dbg !120
  %582 = fadd <2 x float> %575, %576, !dbg !121
  %583 = fadd <2 x float> %581, %582, !dbg !122
  %584 = extractelement <2 x float> %583, i64 0, !dbg !125
  %585 = fcmp olt float %502, %584, !dbg !123
  %586 = extractelement <2 x float> %583, i64 1, !dbg !125
  %587 = fcmp olt float %503, %586, !dbg !123
  %588 = or i1 %543, %585, !dbg !124
  %589 = or i1 %544, %587, !dbg !124
  %590 = select i1 %588, float %502, float %584, !dbg !125
  %591 = select i1 %589, float %503, float %586, !dbg !125
  %592 = select i1 %17, float %590, float %502, !dbg !95
  %593 = select i1 %17, float %591, float %503, !dbg !95
  %594 = shufflevector <2 x float> %560, <2 x float> %583, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !130
  %595 = fcmp ogt <4 x float> %505, %594, !dbg !130
  %596 = or <4 x i1> %565, %595, !dbg !131
  %597 = select <4 x i1> %596, <4 x float> %505, <4 x float> %594, !dbg !132
  %598 = select <4 x i1> %52, <4 x float> %597, <4 x float> %505, !dbg !133
  %599 = fptrunc <2 x float> %583 to <2 x bfloat>, !dbg !129
  %600 = bitcast <2 x bfloat> %567 to i32, !dbg !129
  %601 = bitcast <2 x bfloat> %599 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %600, i32 %601, ptr addrspace(1) %566, i1 %17) #5, !dbg !129
  %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 512, !dbg !98
  %602 = icmp samesign ult i64 %indvars.iv45, 2560, !dbg !98
  br i1 %602, label %501, label %603, !dbg !98

603:                                              ; preds = %501
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %604 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %564, <2 x i32> <i32 0, i32 2>, !dbg !136
  %605 = fcmp olt <2 x float> %604, %564, !dbg !136
  %606 = fcmp uno <2 x float> %604, %564, !dbg !136
  %shift = shufflevector <2 x i1> %605, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !137
  %607 = or <2 x i1> %shift, %606, !dbg !137
  %608 = extractelement <2 x i1> %607, i64 0, !dbg !137
  %609 = extractelement <2 x float> %564, i64 0, !dbg !138
  %610 = extractelement <2 x float> %564, i64 1, !dbg !138
  %611 = select i1 %608, float %609, float %610, !dbg !138
  %612 = fcmp olt float %611, %592, !dbg !136
  %613 = fcmp uno float %611, 0.000000e+00, !dbg !139
  %614 = or i1 %612, %613, !dbg !137
  %615 = select i1 %614, float %611, float %592, !dbg !138
  %616 = fcmp olt float %615, %593, !dbg !136
  %617 = fcmp uno float %615, 0.000000e+00, !dbg !139
  %618 = or i1 %616, %617, !dbg !137
  %619 = select i1 %618, float %615, float %593, !dbg !138
  %620 = bitcast float %619 to i32, !dbg !134
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %620, i32 16, i32 31), !dbg !134
  %622 = bitcast i32 %621 to float, !dbg !134
  %623 = fcmp olt float %619, %622, !dbg !136
  %624 = fcmp uno float %619, 0.000000e+00, !dbg !139
  %625 = or i1 %624, %623, !dbg !137
  %626 = select i1 %625, float %619, float %622, !dbg !138
  %627 = bitcast float %626 to i32, !dbg !134
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 8, i32 31), !dbg !134
  %629 = bitcast i32 %628 to float, !dbg !134
  %630 = fcmp olt float %626, %629, !dbg !136
  %631 = fcmp uno float %626, 0.000000e+00, !dbg !139
  %632 = or i1 %630, %631, !dbg !137
  %633 = select i1 %632, float %626, float %629, !dbg !138
  %634 = bitcast float %633 to i32, !dbg !134
  %635 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %634, i32 4, i32 31), !dbg !134
  %636 = bitcast i32 %635 to float, !dbg !134
  %637 = fcmp olt float %633, %636, !dbg !136
  %638 = fcmp uno float %633, 0.000000e+00, !dbg !139
  %639 = or i1 %637, %638, !dbg !137
  %640 = select i1 %639, float %633, float %636, !dbg !138
  %641 = bitcast float %640 to i32, !dbg !134
  %642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %641, i32 2, i32 31), !dbg !134
  %643 = bitcast i32 %642 to float, !dbg !134
  %644 = fcmp olt float %640, %643, !dbg !136
  %645 = fcmp uno float %640, 0.000000e+00, !dbg !139
  %646 = or i1 %644, %645, !dbg !137
  %647 = select i1 %646, float %640, float %643, !dbg !138
  %648 = bitcast float %647 to i32, !dbg !134
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 1, i32 31), !dbg !134
  %650 = bitcast i32 %649 to float, !dbg !134
  %651 = fcmp olt float %647, %650, !dbg !136
  %652 = fcmp uno float %647, 0.000000e+00, !dbg !139
  %653 = or i1 %651, %652, !dbg !137
  %654 = select i1 %653, i32 %648, i32 %649, !dbg !138
  %655 = insertelement <1 x i32> poison, i32 %654, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %655, i1 %421) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %656 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %429, i1 %428) #5, !dbg !134
  %657 = bitcast i32 %656 to float, !dbg !134
  %658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 2, i32 31), !dbg !134
  %659 = bitcast i32 %658 to float, !dbg !134
  %660 = fcmp olt float %657, %659, !dbg !136
  %661 = fcmp uno float %657, 0.000000e+00, !dbg !139
  %662 = or i1 %661, %660, !dbg !137
  %663 = select i1 %662, float %657, float %659, !dbg !138
  %664 = bitcast float %663 to i32, !dbg !134
  %665 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %664, i32 1, i32 31), !dbg !134
  %666 = bitcast i32 %665 to float, !dbg !134
  %667 = fcmp olt float %663, %666, !dbg !136
  %668 = fcmp uno float %663, 0.000000e+00, !dbg !139
  %669 = or i1 %667, %668, !dbg !137
  %670 = select i1 %669, i32 %664, i32 %665, !dbg !138
  %671 = insertelement <1 x i32> poison, i32 %670, i64 0, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %671, i1 %479) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %672 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %673 = extractelement <4 x float> %598, i64 0, !dbg !142
  %674 = extractelement <4 x float> %598, i64 1, !dbg !142
  %675 = fcmp ogt float %673, %674, !dbg !142
  %676 = fcmp uno float %673, 0.000000e+00, !dbg !143
  %677 = or i1 %675, %676, !dbg !144
  %678 = select i1 %677, float %673, float %674, !dbg !145
  %679 = extractelement <4 x float> %598, i64 2, !dbg !142
  %680 = fcmp ogt float %678, %679, !dbg !142
  %681 = fcmp uno float %678, 0.000000e+00, !dbg !143
  %682 = or i1 %680, %681, !dbg !144
  %683 = select i1 %682, float %678, float %679, !dbg !145
  %684 = extractelement <4 x float> %598, i64 3, !dbg !142
  %685 = fcmp ogt float %683, %684, !dbg !142
  %686 = fcmp uno float %683, 0.000000e+00, !dbg !143
  %687 = or i1 %685, %686, !dbg !144
  %688 = select i1 %687, float %683, float %684, !dbg !145
  %689 = bitcast float %688 to i32, !dbg !140
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 16, i32 31), !dbg !140
  %691 = bitcast i32 %690 to float, !dbg !140
  %692 = fcmp ogt float %688, %691, !dbg !142
  %693 = fcmp uno float %688, 0.000000e+00, !dbg !143
  %694 = or i1 %693, %692, !dbg !144
  %695 = select i1 %694, float %688, float %691, !dbg !145
  %696 = bitcast float %695 to i32, !dbg !140
  %697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %696, i32 8, i32 31), !dbg !140
  %698 = bitcast i32 %697 to float, !dbg !140
  %699 = fcmp ogt float %695, %698, !dbg !142
  %700 = fcmp uno float %695, 0.000000e+00, !dbg !143
  %701 = or i1 %699, %700, !dbg !144
  %702 = select i1 %701, float %695, float %698, !dbg !145
  %703 = bitcast float %702 to i32, !dbg !140
  %704 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %703, i32 4, i32 31), !dbg !140
  %705 = bitcast i32 %704 to float, !dbg !140
  %706 = fcmp ogt float %702, %705, !dbg !142
  %707 = fcmp uno float %702, 0.000000e+00, !dbg !143
  %708 = or i1 %706, %707, !dbg !144
  %709 = select i1 %708, float %702, float %705, !dbg !145
  %710 = bitcast float %709 to i32, !dbg !140
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 2, i32 31), !dbg !140
  %712 = bitcast i32 %711 to float, !dbg !140
  %713 = fcmp ogt float %709, %712, !dbg !142
  %714 = fcmp uno float %709, 0.000000e+00, !dbg !143
  %715 = or i1 %713, %714, !dbg !144
  %716 = select i1 %715, float %709, float %712, !dbg !145
  %717 = bitcast float %716 to i32, !dbg !140
  %718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %717, i32 1, i32 31), !dbg !140
  %719 = bitcast i32 %718 to float, !dbg !140
  %720 = fcmp ogt float %716, %719, !dbg !142
  %721 = fcmp uno float %716, 0.000000e+00, !dbg !143
  %722 = or i1 %720, %721, !dbg !144
  %723 = select i1 %722, i32 %717, i32 %718, !dbg !145
  %724 = insertelement <1 x i32> poison, i32 %723, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %724, i1 %421) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %725 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %429, i1 %428) #5, !dbg !140
  %726 = bitcast i32 %725 to float, !dbg !140
  %727 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %725, i32 2, i32 31), !dbg !140
  %728 = bitcast i32 %727 to float, !dbg !140
  %729 = fcmp ogt float %726, %728, !dbg !142
  %730 = fcmp uno float %726, 0.000000e+00, !dbg !143
  %731 = or i1 %730, %729, !dbg !144
  %732 = select i1 %731, float %726, float %728, !dbg !145
  %733 = bitcast float %732 to i32, !dbg !140
  %734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %733, i32 1, i32 31), !dbg !140
  %735 = bitcast i32 %734 to float, !dbg !140
  %736 = fcmp ogt float %732, %735, !dbg !142
  %737 = fcmp uno float %732, 0.000000e+00, !dbg !143
  %738 = or i1 %736, %737, !dbg !144
  %739 = select i1 %738, i32 %733, i32 %734, !dbg !145
  %740 = insertelement <1 x i32> poison, i32 %739, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %740, i1 %479) #5, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %741 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !140
  %742 = getelementptr bfloat, ptr addrspace(1) %10, i64 %22, !dbg !146
  %743 = fptrunc float %672 to bfloat, !dbg !147
  %744 = and i32 %18, 127, !dbg !147
  %745 = icmp eq i32 %744, 0, !dbg !147
  %746 = bitcast bfloat %743 to i16, !dbg !147
  %747 = and i1 %17, %745, !dbg !147
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %746, ptr addrspace(1) %742, i1 %747) #5, !dbg !147
  %748 = getelementptr bfloat, ptr addrspace(1) %11, i64 %22, !dbg !148
  %749 = fptrunc float %741 to bfloat, !dbg !149
  %750 = bitcast bfloat %749 to i16, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %750, ptr addrspace(1) %748, i1 %747) #5, !dbg !149
  %751 = or disjoint i32 %21, %35
  %.inv4 = fcmp oge float %672, 0.000000e+00, !dbg !150
  %752 = select i1 %.inv4, float 0.000000e+00, float %672, !dbg !150
  %753 = fsub float 0.000000e+00, %752, !dbg !152
  %754 = fcmp uno float %753, 0.000000e+00, !dbg !153
  %.inv5 = fcmp ole float %741, 0.000000e+00, !dbg !155
  %755 = select i1 %.inv5, float 0.000000e+00, float %741, !dbg !155
  %756 = fcmp ogt float %753, %755, !dbg !157
  %757 = or i1 %754, %756, !dbg !158
  %758 = select i1 %757, float %753, float %755, !dbg !159
  %759 = fmul float %758, 0x3F80204080000000, !dbg !160
  %760 = fcmp ogt float %759, 0x3EE4F8B580000000, !dbg !161
  %761 = fcmp uno float %759, 0.000000e+00, !dbg !163
  %762 = or i1 %760, %761, !dbg !164
  %763 = select i1 %762, float %759, float 0x3EE4F8B580000000, !dbg !165
  %764 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %763), !dbg !166
  %765 = sext i32 %751 to i64, !dbg !167
  %766 = getelementptr bfloat, ptr addrspace(1) %9, i64 %765, !dbg !167
  %767 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %766, i1 %17) #5, !dbg !168
  %768 = extractvalue { i32, i32 } %767, 0, !dbg !168
  %769 = bitcast i32 %768 to <2 x bfloat>, !dbg !168
  %770 = extractvalue { i32, i32 } %767, 1, !dbg !168
  %771 = bitcast i32 %770 to <2 x bfloat>, !dbg !168
  %772 = extractelement <2 x bfloat> %769, i64 0, !dbg !168
  %773 = extractelement <2 x bfloat> %769, i64 1, !dbg !168
  %774 = extractelement <2 x bfloat> %771, i64 0, !dbg !168
  %775 = extractelement <2 x bfloat> %771, i64 1, !dbg !168
  %776 = fpext bfloat %772 to float, !dbg !169
  %777 = fpext bfloat %773 to float, !dbg !169
  %778 = fpext bfloat %774 to float, !dbg !169
  %779 = fpext bfloat %775 to float, !dbg !169
  %780 = fmul float %764, %776, !dbg !170
  %781 = fmul float %764, %777, !dbg !170
  %782 = fmul float %764, %778, !dbg !170
  %783 = fmul float %764, %779, !dbg !170
  %784 = tail call float @llvm.nvvm.round.f(float %780) #5, !dbg !171
  %785 = tail call float @llvm.nvvm.round.f(float %781) #5, !dbg !171
  %786 = tail call float @llvm.nvvm.round.f(float %782) #5, !dbg !171
  %787 = tail call float @llvm.nvvm.round.f(float %783) #5, !dbg !171
  %788 = insertelement <4 x float> poison, float %784, i64 0, !dbg !172
  %789 = insertelement <4 x float> %788, float %785, i64 1, !dbg !172
  %790 = insertelement <4 x float> %789, float %786, i64 2, !dbg !172
  %791 = insertelement <4 x float> %790, float %787, i64 3, !dbg !172
  %792 = fcmp ogt <4 x float> %791, splat (float -1.270000e+02), !dbg !172
  %793 = fcmp uno <4 x float> %791, zeroinitializer, !dbg !174
  %794 = or <4 x i1> %792, %793, !dbg !175
  %795 = select <4 x i1> %794, <4 x float> %791, <4 x float> splat (float -1.270000e+02), !dbg !176
  %796 = fcmp olt <4 x float> %795, splat (float 1.270000e+02), !dbg !177
  %797 = fcmp uno <4 x float> %795, zeroinitializer, !dbg !179
  %798 = or <4 x i1> %796, %797, !dbg !180
  %799 = fptosi <4 x float> %795 to <4 x i8>, !dbg !181
  %800 = select <4 x i1> %798, <4 x i8> %799, <4 x i8> splat (i8 127), !dbg !182
  %801 = getelementptr i8, ptr addrspace(1) %12, i64 %765, !dbg !183
  %802 = bitcast <4 x i8> %800 to i32, !dbg !184
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %802, ptr addrspace(1) %801, i1 %17) #5, !dbg !184
  %803 = or disjoint i32 %751, 512, !dbg !185
  %804 = sext i32 %803 to i64, !dbg !167
  %805 = getelementptr bfloat, ptr addrspace(1) %9, i64 %804, !dbg !167
  %806 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %805, i1 %17) #5, !dbg !168
  %807 = extractvalue { i32, i32 } %806, 0, !dbg !168
  %808 = bitcast i32 %807 to <2 x bfloat>, !dbg !168
  %809 = extractvalue { i32, i32 } %806, 1, !dbg !168
  %810 = bitcast i32 %809 to <2 x bfloat>, !dbg !168
  %811 = extractelement <2 x bfloat> %808, i64 0, !dbg !168
  %812 = extractelement <2 x bfloat> %808, i64 1, !dbg !168
  %813 = extractelement <2 x bfloat> %810, i64 0, !dbg !168
  %814 = extractelement <2 x bfloat> %810, i64 1, !dbg !168
  %815 = fpext bfloat %811 to float, !dbg !169
  %816 = fpext bfloat %812 to float, !dbg !169
  %817 = fpext bfloat %813 to float, !dbg !169
  %818 = fpext bfloat %814 to float, !dbg !169
  %819 = fmul float %764, %815, !dbg !170
  %820 = fmul float %764, %816, !dbg !170
  %821 = fmul float %764, %817, !dbg !170
  %822 = fmul float %764, %818, !dbg !170
  %823 = tail call float @llvm.nvvm.round.f(float %819) #5, !dbg !171
  %824 = tail call float @llvm.nvvm.round.f(float %820) #5, !dbg !171
  %825 = tail call float @llvm.nvvm.round.f(float %821) #5, !dbg !171
  %826 = tail call float @llvm.nvvm.round.f(float %822) #5, !dbg !171
  %827 = insertelement <4 x float> poison, float %823, i64 0, !dbg !172
  %828 = insertelement <4 x float> %827, float %824, i64 1, !dbg !172
  %829 = insertelement <4 x float> %828, float %825, i64 2, !dbg !172
  %830 = insertelement <4 x float> %829, float %826, i64 3, !dbg !172
  %831 = fcmp ogt <4 x float> %830, splat (float -1.270000e+02), !dbg !172
  %832 = fcmp uno <4 x float> %830, zeroinitializer, !dbg !174
  %833 = or <4 x i1> %831, %832, !dbg !175
  %834 = select <4 x i1> %833, <4 x float> %830, <4 x float> splat (float -1.270000e+02), !dbg !176
  %835 = fcmp olt <4 x float> %834, splat (float 1.270000e+02), !dbg !177
  %836 = fcmp uno <4 x float> %834, zeroinitializer, !dbg !179
  %837 = or <4 x i1> %835, %836, !dbg !180
  %838 = fptosi <4 x float> %834 to <4 x i8>, !dbg !181
  %839 = select <4 x i1> %837, <4 x i8> %838, <4 x i8> splat (i8 127), !dbg !182
  %840 = getelementptr i8, ptr addrspace(1) %12, i64 %804, !dbg !183
  %841 = bitcast <4 x i8> %839 to i32, !dbg !184
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %841, ptr addrspace(1) %840, i1 %17) #5, !dbg !184
  %842 = add i32 %751, 1024, !dbg !185
  %843 = sext i32 %842 to i64, !dbg !167
  %844 = getelementptr bfloat, ptr addrspace(1) %9, i64 %843, !dbg !167
  %845 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %844, i1 %17) #5, !dbg !168
  %846 = extractvalue { i32, i32 } %845, 0, !dbg !168
  %847 = bitcast i32 %846 to <2 x bfloat>, !dbg !168
  %848 = extractvalue { i32, i32 } %845, 1, !dbg !168
  %849 = bitcast i32 %848 to <2 x bfloat>, !dbg !168
  %850 = extractelement <2 x bfloat> %847, i64 0, !dbg !168
  %851 = extractelement <2 x bfloat> %847, i64 1, !dbg !168
  %852 = extractelement <2 x bfloat> %849, i64 0, !dbg !168
  %853 = extractelement <2 x bfloat> %849, i64 1, !dbg !168
  %854 = fpext bfloat %850 to float, !dbg !169
  %855 = fpext bfloat %851 to float, !dbg !169
  %856 = fpext bfloat %852 to float, !dbg !169
  %857 = fpext bfloat %853 to float, !dbg !169
  %858 = fmul float %764, %854, !dbg !170
  %859 = fmul float %764, %855, !dbg !170
  %860 = fmul float %764, %856, !dbg !170
  %861 = fmul float %764, %857, !dbg !170
  %862 = tail call float @llvm.nvvm.round.f(float %858) #5, !dbg !171
  %863 = tail call float @llvm.nvvm.round.f(float %859) #5, !dbg !171
  %864 = tail call float @llvm.nvvm.round.f(float %860) #5, !dbg !171
  %865 = tail call float @llvm.nvvm.round.f(float %861) #5, !dbg !171
  %866 = insertelement <4 x float> poison, float %862, i64 0, !dbg !172
  %867 = insertelement <4 x float> %866, float %863, i64 1, !dbg !172
  %868 = insertelement <4 x float> %867, float %864, i64 2, !dbg !172
  %869 = insertelement <4 x float> %868, float %865, i64 3, !dbg !172
  %870 = fcmp ogt <4 x float> %869, splat (float -1.270000e+02), !dbg !172
  %871 = fcmp uno <4 x float> %869, zeroinitializer, !dbg !174
  %872 = or <4 x i1> %870, %871, !dbg !175
  %873 = select <4 x i1> %872, <4 x float> %869, <4 x float> splat (float -1.270000e+02), !dbg !176
  %874 = fcmp olt <4 x float> %873, splat (float 1.270000e+02), !dbg !177
  %875 = fcmp uno <4 x float> %873, zeroinitializer, !dbg !179
  %876 = or <4 x i1> %874, %875, !dbg !180
  %877 = fptosi <4 x float> %873 to <4 x i8>, !dbg !181
  %878 = select <4 x i1> %876, <4 x i8> %877, <4 x i8> splat (i8 127), !dbg !182
  %879 = getelementptr i8, ptr addrspace(1) %12, i64 %843, !dbg !183
  %880 = bitcast <4 x i8> %878 to i32, !dbg !184
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %880, ptr addrspace(1) %879, i1 %17) #5, !dbg !184
  %881 = add i32 %751, 1536, !dbg !185
  %882 = sext i32 %881 to i64, !dbg !167
  %883 = getelementptr bfloat, ptr addrspace(1) %9, i64 %882, !dbg !167
  %884 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %883, i1 %17) #5, !dbg !168
  %885 = extractvalue { i32, i32 } %884, 0, !dbg !168
  %886 = bitcast i32 %885 to <2 x bfloat>, !dbg !168
  %887 = extractvalue { i32, i32 } %884, 1, !dbg !168
  %888 = bitcast i32 %887 to <2 x bfloat>, !dbg !168
  %889 = extractelement <2 x bfloat> %886, i64 0, !dbg !168
  %890 = extractelement <2 x bfloat> %886, i64 1, !dbg !168
  %891 = extractelement <2 x bfloat> %888, i64 0, !dbg !168
  %892 = extractelement <2 x bfloat> %888, i64 1, !dbg !168
  %893 = fpext bfloat %889 to float, !dbg !169
  %894 = fpext bfloat %890 to float, !dbg !169
  %895 = fpext bfloat %891 to float, !dbg !169
  %896 = fpext bfloat %892 to float, !dbg !169
  %897 = fmul float %764, %893, !dbg !170
  %898 = fmul float %764, %894, !dbg !170
  %899 = fmul float %764, %895, !dbg !170
  %900 = fmul float %764, %896, !dbg !170
  %901 = tail call float @llvm.nvvm.round.f(float %897) #5, !dbg !171
  %902 = tail call float @llvm.nvvm.round.f(float %898) #5, !dbg !171
  %903 = tail call float @llvm.nvvm.round.f(float %899) #5, !dbg !171
  %904 = tail call float @llvm.nvvm.round.f(float %900) #5, !dbg !171
  %905 = insertelement <4 x float> poison, float %901, i64 0, !dbg !172
  %906 = insertelement <4 x float> %905, float %902, i64 1, !dbg !172
  %907 = insertelement <4 x float> %906, float %903, i64 2, !dbg !172
  %908 = insertelement <4 x float> %907, float %904, i64 3, !dbg !172
  %909 = fcmp ogt <4 x float> %908, splat (float -1.270000e+02), !dbg !172
  %910 = fcmp uno <4 x float> %908, zeroinitializer, !dbg !174
  %911 = or <4 x i1> %909, %910, !dbg !175
  %912 = select <4 x i1> %911, <4 x float> %908, <4 x float> splat (float -1.270000e+02), !dbg !176
  %913 = fcmp olt <4 x float> %912, splat (float 1.270000e+02), !dbg !177
  %914 = fcmp uno <4 x float> %912, zeroinitializer, !dbg !179
  %915 = or <4 x i1> %913, %914, !dbg !180
  %916 = fptosi <4 x float> %912 to <4 x i8>, !dbg !181
  %917 = select <4 x i1> %915, <4 x i8> %916, <4 x i8> splat (i8 127), !dbg !182
  %918 = getelementptr i8, ptr addrspace(1) %12, i64 %882, !dbg !183
  %919 = bitcast <4 x i8> %917 to i32, !dbg !184
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %919, ptr addrspace(1) %918, i1 %17) #5, !dbg !184
  %920 = add i32 %751, 2048, !dbg !185
  %921 = sext i32 %920 to i64, !dbg !167
  %922 = getelementptr bfloat, ptr addrspace(1) %9, i64 %921, !dbg !167
  %923 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %922, i1 %17) #5, !dbg !168
  %924 = extractvalue { i32, i32 } %923, 0, !dbg !168
  %925 = bitcast i32 %924 to <2 x bfloat>, !dbg !168
  %926 = extractvalue { i32, i32 } %923, 1, !dbg !168
  %927 = bitcast i32 %926 to <2 x bfloat>, !dbg !168
  %928 = extractelement <2 x bfloat> %925, i64 0, !dbg !168
  %929 = extractelement <2 x bfloat> %925, i64 1, !dbg !168
  %930 = extractelement <2 x bfloat> %927, i64 0, !dbg !168
  %931 = extractelement <2 x bfloat> %927, i64 1, !dbg !168
  %932 = fpext bfloat %928 to float, !dbg !169
  %933 = fpext bfloat %929 to float, !dbg !169
  %934 = fpext bfloat %930 to float, !dbg !169
  %935 = fpext bfloat %931 to float, !dbg !169
  %936 = fmul float %764, %932, !dbg !170
  %937 = fmul float %764, %933, !dbg !170
  %938 = fmul float %764, %934, !dbg !170
  %939 = fmul float %764, %935, !dbg !170
  %940 = tail call float @llvm.nvvm.round.f(float %936) #5, !dbg !171
  %941 = tail call float @llvm.nvvm.round.f(float %937) #5, !dbg !171
  %942 = tail call float @llvm.nvvm.round.f(float %938) #5, !dbg !171
  %943 = tail call float @llvm.nvvm.round.f(float %939) #5, !dbg !171
  %944 = insertelement <4 x float> poison, float %940, i64 0, !dbg !172
  %945 = insertelement <4 x float> %944, float %941, i64 1, !dbg !172
  %946 = insertelement <4 x float> %945, float %942, i64 2, !dbg !172
  %947 = insertelement <4 x float> %946, float %943, i64 3, !dbg !172
  %948 = fcmp ogt <4 x float> %947, splat (float -1.270000e+02), !dbg !172
  %949 = fcmp uno <4 x float> %947, zeroinitializer, !dbg !174
  %950 = or <4 x i1> %948, %949, !dbg !175
  %951 = select <4 x i1> %950, <4 x float> %947, <4 x float> splat (float -1.270000e+02), !dbg !176
  %952 = fcmp olt <4 x float> %951, splat (float 1.270000e+02), !dbg !177
  %953 = fcmp uno <4 x float> %951, zeroinitializer, !dbg !179
  %954 = or <4 x i1> %952, %953, !dbg !180
  %955 = fptosi <4 x float> %951 to <4 x i8>, !dbg !181
  %956 = select <4 x i1> %954, <4 x i8> %955, <4 x i8> splat (i8 127), !dbg !182
  %957 = getelementptr i8, ptr addrspace(1) %12, i64 %921, !dbg !183
  %958 = bitcast <4 x i8> %956 to i32, !dbg !184
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %958, ptr addrspace(1) %957, i1 %17) #5, !dbg !184
  %959 = add i32 %751, 2560, !dbg !185
  %960 = sext i32 %959 to i64, !dbg !167
  %961 = getelementptr bfloat, ptr addrspace(1) %9, i64 %960, !dbg !167
  %962 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %961, i1 %17) #5, !dbg !168
  %963 = extractvalue { i32, i32 } %962, 0, !dbg !168
  %964 = bitcast i32 %963 to <2 x bfloat>, !dbg !168
  %965 = extractvalue { i32, i32 } %962, 1, !dbg !168
  %966 = bitcast i32 %965 to <2 x bfloat>, !dbg !168
  %967 = extractelement <2 x bfloat> %964, i64 0, !dbg !168
  %968 = extractelement <2 x bfloat> %964, i64 1, !dbg !168
  %969 = extractelement <2 x bfloat> %966, i64 0, !dbg !168
  %970 = extractelement <2 x bfloat> %966, i64 1, !dbg !168
  %971 = fpext bfloat %967 to float, !dbg !169
  %972 = fpext bfloat %968 to float, !dbg !169
  %973 = fpext bfloat %969 to float, !dbg !169
  %974 = fpext bfloat %970 to float, !dbg !169
  %975 = fmul float %764, %971, !dbg !170
  %976 = fmul float %764, %972, !dbg !170
  %977 = fmul float %764, %973, !dbg !170
  %978 = fmul float %764, %974, !dbg !170
  %979 = tail call float @llvm.nvvm.round.f(float %975) #5, !dbg !171
  %980 = tail call float @llvm.nvvm.round.f(float %976) #5, !dbg !171
  %981 = tail call float @llvm.nvvm.round.f(float %977) #5, !dbg !171
  %982 = tail call float @llvm.nvvm.round.f(float %978) #5, !dbg !171
  %983 = insertelement <4 x float> poison, float %979, i64 0, !dbg !172
  %984 = insertelement <4 x float> %983, float %980, i64 1, !dbg !172
  %985 = insertelement <4 x float> %984, float %981, i64 2, !dbg !172
  %986 = insertelement <4 x float> %985, float %982, i64 3, !dbg !172
  %987 = fcmp ogt <4 x float> %986, splat (float -1.270000e+02), !dbg !172
  %988 = fcmp uno <4 x float> %986, zeroinitializer, !dbg !174
  %989 = or <4 x i1> %987, %988, !dbg !175
  %990 = select <4 x i1> %989, <4 x float> %986, <4 x float> splat (float -1.270000e+02), !dbg !176
  %991 = fcmp olt <4 x float> %990, splat (float 1.270000e+02), !dbg !177
  %992 = fcmp uno <4 x float> %990, zeroinitializer, !dbg !179
  %993 = or <4 x i1> %991, %992, !dbg !180
  %994 = fptosi <4 x float> %990 to <4 x i8>, !dbg !181
  %995 = select <4 x i1> %993, <4 x i8> %994, <4 x i8> splat (i8 127), !dbg !182
  %996 = getelementptr i8, ptr addrspace(1) %12, i64 %960, !dbg !183
  %997 = bitcast <4 x i8> %995 to i32, !dbg !184
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %997, ptr addrspace(1) %996, i1 %17) #5, !dbg !184
  ret void, !dbg !186
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 29, column: 30, scope: !6)
!13 = !DILocation(line: 29, column: 35, scope: !6)
!14 = !DILocation(line: 30, column: 31, scope: !6)
!15 = !DILocation(line: 30, column: 36, scope: !6)
!16 = !DILocation(line: 40, column: 46, scope: !6)
!17 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !20)
!18 = distinct !DILexicalBlockFile(scope: !6, file: !19, discriminator: 0)
!19 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!20 = !DILocation(line: 50, column: 44, scope: !6)
!21 = !DILocation(line: 51, column: 17, scope: !6)
!22 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !23)
!23 = !DILocation(line: 52, column: 46, scope: !6)
!24 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !25)
!25 = !DILocation(line: 53, column: 46, scope: !6)
!26 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !25)
!27 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !25)
!28 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !25)
!29 = !DILocation(line: 55, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !31)
!31 = !DILocation(line: 58, column: 46, scope: !6)
!32 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !31)
!33 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !31)
!34 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !31)
!35 = !DILocation(line: 34, column: 40, scope: !6)
!36 = !DILocation(line: 70, column: 64, scope: !6)
!37 = !DILocation(line: 60, column: 23, scope: !6)
!38 = !DILocation(line: 40, column: 41, scope: !6)
!39 = !DILocation(line: 40, column: 34, scope: !6)
!40 = !DILocation(line: 40, column: 51, scope: !6)
!41 = !DILocation(line: 41, column: 41, scope: !6)
!42 = !DILocation(line: 41, column: 34, scope: !6)
!43 = !DILocation(line: 41, column: 48, scope: !6)
!44 = !DILocation(line: 42, column: 34, scope: !6)
!45 = !DILocation(line: 42, column: 48, scope: !6)
!46 = !DILocation(line: 43, column: 34, scope: !6)
!47 = !DILocation(line: 43, column: 51, scope: !6)
!48 = !DILocation(line: 44, column: 35, scope: !6)
!49 = !DILocation(line: 44, column: 42, scope: !6)
!50 = !DILocation(line: 45, column: 35, scope: !6)
!51 = !DILocation(line: 45, column: 42, scope: !6)
!52 = !DILocation(line: 40, column: 113, scope: !6)
!53 = !DILocation(line: 42, column: 101, scope: !6)
!54 = !DILocation(line: 44, column: 95, scope: !6)
!55 = !DILocation(line: 45, column: 95, scope: !6)
!56 = !DILocation(line: 47, column: 22, scope: !6)
!57 = !DILocation(line: 48, column: 23, scope: !6)
!58 = !DILocation(line: 61, column: 24, scope: !6)
!59 = !DILocation(line: 62, column: 24, scope: !6)
!60 = !DILocation(line: 63, column: 23, scope: !6)
!61 = !DILocation(line: 64, column: 23, scope: !6)
!62 = !DILocation(line: 72, column: 68, scope: !6)
!63 = !DILocation(line: 73, column: 29, scope: !6)
!64 = !DILocation(line: 73, column: 53, scope: !6)
!65 = !DILocation(line: 35, column: 31, scope: !6)
!66 = !DILocation(line: 208, column: 24, scope: !18, inlinedAt: !67)
!67 = !DILocation(line: 68, column: 55, scope: !6)
!68 = !DILocation(line: 209, column: 30, scope: !18, inlinedAt: !67)
!69 = !DILocation(line: 210, column: 34, scope: !18, inlinedAt: !67)
!70 = !DILocation(line: 210, column: 26, scope: !18, inlinedAt: !67)
!71 = !DILocation(line: 211, column: 39, scope: !18, inlinedAt: !67)
!72 = !DILocation(line: 211, column: 31, scope: !18, inlinedAt: !67)
!73 = !DILocation(line: 211, column: 22, scope: !18, inlinedAt: !67)
!74 = !DILocation(line: 71, column: 60, scope: !6)
!75 = distinct !{!75, !76}
!76 = !{!"llvm.loop.peeled.count", i32 1}
!77 = !DILocation(line: 217, column: 21, scope: !78, inlinedAt: !79)
!78 = distinct !DILexicalBlockFile(scope: !18, file: !19, discriminator: 0)
!79 = !DILocation(line: 74, column: 85, scope: !6)
!80 = !DILocation(line: 218, column: 28, scope: !78, inlinedAt: !79)
!81 = !DILocation(line: 219, column: 39, scope: !78, inlinedAt: !79)
!82 = !DILocation(line: 219, column: 60, scope: !78, inlinedAt: !79)
!83 = !DILocation(line: 219, column: 49, scope: !78, inlinedAt: !79)
!84 = !DILocation(line: 221, column: 25, scope: !78, inlinedAt: !79)
!85 = !DILocation(line: 221, column: 17, scope: !78, inlinedAt: !79)
!86 = !DILocation(line: 222, column: 30, scope: !78, inlinedAt: !79)
!87 = !DILocation(line: 222, column: 38, scope: !78, inlinedAt: !79)
!88 = !DILocation(line: 222, column: 49, scope: !78, inlinedAt: !79)
!89 = !DILocation(line: 222, column: 22, scope: !78, inlinedAt: !79)
!90 = !DILocation(line: 222, column: 15, scope: !78, inlinedAt: !79)
!91 = !DILocation(line: 229, column: 46, scope: !18, inlinedAt: !79)
!92 = !DILocation(line: 94, column: 25, scope: !6)
!93 = !DILocation(line: 96, column: 24, scope: !6)
!94 = !DILocation(line: 97, column: 32, scope: !6)
!95 = !DILocation(line: 110, column: 50, scope: !6)
!96 = !DILocation(line: 98, column: 24, scope: !6)
!97 = !DILocation(line: 92, column: 24, scope: !6)
!98 = !DILocation(line: 80, column: 40, scope: !6)
!99 = !DILocation(line: 81, column: 31, scope: !6)
!100 = !DILocation(line: 86, column: 43, scope: !6)
!101 = !DILocation(line: 86, column: 36, scope: !6)
!102 = !DILocation(line: 86, column: 53, scope: !6)
!103 = !DILocation(line: 87, column: 43, scope: !6)
!104 = !DILocation(line: 87, column: 35, scope: !6)
!105 = !DILocation(line: 87, column: 50, scope: !6)
!106 = !DILocation(line: 88, column: 35, scope: !6)
!107 = !DILocation(line: 88, column: 50, scope: !6)
!108 = !DILocation(line: 89, column: 42, scope: !6)
!109 = !DILocation(line: 89, column: 35, scope: !6)
!110 = !DILocation(line: 89, column: 49, scope: !6)
!111 = !DILocation(line: 90, column: 35, scope: !6)
!112 = !DILocation(line: 90, column: 49, scope: !6)
!113 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !114)
!114 = !DILocation(line: 109, column: 47, scope: !6)
!115 = !DILocation(line: 86, column: 115, scope: !6)
!116 = !DILocation(line: 88, column: 103, scope: !6)
!117 = !DILocation(line: 90, column: 102, scope: !6)
!118 = !DILocation(line: 101, column: 24, scope: !6)
!119 = !DILocation(line: 103, column: 24, scope: !6)
!120 = !DILocation(line: 104, column: 24, scope: !6)
!121 = !DILocation(line: 106, column: 24, scope: !6)
!122 = !DILocation(line: 107, column: 24, scope: !6)
!123 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !114)
!124 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !114)
!125 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !114)
!126 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !127)
!127 = !DILocation(line: 111, column: 47, scope: !6)
!128 = !DILocation(line: 113, column: 29, scope: !6)
!129 = !DILocation(line: 113, column: 53, scope: !6)
!130 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !127)
!131 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !127)
!132 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !127)
!133 = !DILocation(line: 112, column: 50, scope: !6)
!134 = !DILocation(line: 110, column: 29, scope: !18, inlinedAt: !135)
!135 = !DILocation(line: 114, column: 40, scope: !6)
!136 = !DILocation(line: 94, column: 15, scope: !78, inlinedAt: !135)
!137 = !DILocation(line: 96, column: 16, scope: !78, inlinedAt: !135)
!138 = !DILocation(line: 97, column: 29, scope: !78, inlinedAt: !135)
!139 = !DILocation(line: 96, column: 21, scope: !78, inlinedAt: !135)
!140 = !DILocation(line: 115, column: 29, scope: !18, inlinedAt: !141)
!141 = !DILocation(line: 115, column: 40, scope: !6)
!142 = !DILocation(line: 102, column: 15, scope: !78, inlinedAt: !141)
!143 = !DILocation(line: 104, column: 21, scope: !78, inlinedAt: !141)
!144 = !DILocation(line: 104, column: 16, scope: !78, inlinedAt: !141)
!145 = !DILocation(line: 105, column: 29, scope: !78, inlinedAt: !141)
!146 = !DILocation(line: 116, column: 25, scope: !6)
!147 = !DILocation(line: 116, column: 37, scope: !6)
!148 = !DILocation(line: 117, column: 25, scope: !6)
!149 = !DILocation(line: 117, column: 37, scope: !6)
!150 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !151)
!151 = !DILocation(line: 126, column: 46, scope: !6)
!152 = !DILocation(line: 127, column: 17, scope: !6)
!153 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !154)
!154 = !DILocation(line: 129, column: 46, scope: !6)
!155 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !156)
!156 = !DILocation(line: 128, column: 46, scope: !6)
!157 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !154)
!158 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !154)
!159 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !154)
!160 = !DILocation(line: 131, column: 24, scope: !6)
!161 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !162)
!162 = !DILocation(line: 134, column: 46, scope: !6)
!163 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !162)
!164 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !162)
!165 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !162)
!166 = !DILocation(line: 137, column: 25, scope: !6)
!167 = !DILocation(line: 124, column: 36, scope: !6)
!168 = !DILocation(line: 124, column: 53, scope: !6)
!169 = !DILocation(line: 124, column: 115, scope: !6)
!170 = !DILocation(line: 140, column: 24, scope: !6)
!171 = !DILocation(line: 141, column: 36, scope: !6)
!172 = !DILocation(line: 102, column: 15, scope: !18, inlinedAt: !173)
!173 = !DILocation(line: 144, column: 46, scope: !6)
!174 = !DILocation(line: 104, column: 21, scope: !18, inlinedAt: !173)
!175 = !DILocation(line: 104, column: 16, scope: !18, inlinedAt: !173)
!176 = !DILocation(line: 105, column: 29, scope: !18, inlinedAt: !173)
!177 = !DILocation(line: 94, column: 15, scope: !18, inlinedAt: !178)
!178 = !DILocation(line: 146, column: 46, scope: !6)
!179 = !DILocation(line: 96, column: 21, scope: !18, inlinedAt: !178)
!180 = !DILocation(line: 96, column: 16, scope: !18, inlinedAt: !178)
!181 = !DILocation(line: 148, column: 25, scope: !6)
!182 = !DILocation(line: 97, column: 29, scope: !18, inlinedAt: !178)
!183 = !DILocation(line: 149, column: 29, scope: !6)
!184 = !DILocation(line: 149, column: 53, scope: !6)
!185 = !DILocation(line: 124, column: 43, scope: !6)
!186 = !DILocation(line: 118, column: 4, scope: !6)
