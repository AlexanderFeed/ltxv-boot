; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 3, !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 56, !dbg !14
  %17 = shl i32 %13, 7, !dbg !15
  %18 = insertelement <16 x i1> poison, i1 %14, i64 0, !dbg !16
  %19 = shufflevector <16 x i1> %18, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !16
  br label %20, !dbg !17

20:                                               ; preds = %7, %20
  %21 = phi i32 [ 0, %7 ], [ %57, %20 ]
  %22 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %7 ], [ %56, %20 ]
  %23 = lshr i32 %21, 7, !dbg !18
  %24 = mul nuw nsw i32 %23, 526336, !dbg !19
  %25 = add i32 %24, %17, !dbg !20
  %.masked = and i32 %21, 64, !dbg !21
  %26 = or disjoint i32 %25, %.masked, !dbg !22
  %27 = or disjoint i32 %26, %16, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %14) #4, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !24
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !24
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !24
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !24
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !24
  %39 = fcmp uno <16 x float> %22, zeroinitializer, !dbg !25
  %40 = shufflevector <2 x bfloat> %32, <2 x bfloat> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %41 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %42 = shufflevector <8 x bfloat> %40, <8 x bfloat> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %43 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %44 = shufflevector <8 x bfloat> %42, <8 x bfloat> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %45 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %46 = shufflevector <8 x bfloat> %44, <8 x bfloat> %45, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %47 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %48 = shufflevector <8 x bfloat> %46, <8 x bfloat> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %49 = fpext <8 x bfloat> %48 to <8 x float>, !dbg !29
  %50 = shufflevector <8 x float> %49, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !29
  %51 = fcmp ogt <16 x float> %22, %50, !dbg !30
  %52 = fcmp olt <16 x float> %22, %50, !dbg !30
  %53 = shufflevector <16 x i1> %51, <16 x i1> %52, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !30
  %54 = or <16 x i1> %39, %53, !dbg !31
  %55 = select <16 x i1> %54, <16 x float> %22, <16 x float> %50, !dbg !32
  %56 = select <16 x i1> %19, <16 x float> %55, <16 x float> %22, !dbg !16
  %57 = add nuw nsw i32 %21, 64, !dbg !17
  %58 = icmp samesign ult i32 %21, 3008, !dbg !17
  br i1 %58, label %20, label %59, !dbg !17

59:                                               ; preds = %20
  %60 = and i32 %10, 63, !dbg !11
  %61 = or disjoint i32 %9, %60, !dbg !12
  %62 = icmp slt i32 %61, 512, !dbg !13
  %63 = extractelement <16 x float> %56, i64 8, !dbg !33
  %64 = extractelement <16 x float> %56, i64 9, !dbg !33
  %65 = fcmp olt float %63, %64, !dbg !33
  %66 = fcmp uno float %63, 0.000000e+00, !dbg !36
  %67 = or i1 %65, %66, !dbg !37
  %68 = select i1 %67, float %63, float %64, !dbg !38
  %69 = extractelement <16 x float> %56, i64 10, !dbg !33
  %70 = fcmp olt float %68, %69, !dbg !33
  %71 = fcmp uno float %68, 0.000000e+00, !dbg !36
  %72 = or i1 %70, %71, !dbg !37
  %73 = select i1 %72, float %68, float %69, !dbg !38
  %74 = extractelement <16 x float> %56, i64 11, !dbg !33
  %75 = fcmp olt float %73, %74, !dbg !33
  %76 = fcmp uno float %73, 0.000000e+00, !dbg !36
  %77 = or i1 %75, %76, !dbg !37
  %78 = select i1 %77, float %73, float %74, !dbg !38
  %79 = extractelement <16 x float> %56, i64 12, !dbg !33
  %80 = fcmp olt float %78, %79, !dbg !33
  %81 = fcmp uno float %78, 0.000000e+00, !dbg !36
  %82 = or i1 %80, %81, !dbg !37
  %83 = select i1 %82, float %78, float %79, !dbg !38
  %84 = extractelement <16 x float> %56, i64 13, !dbg !33
  %85 = fcmp olt float %83, %84, !dbg !33
  %86 = fcmp uno float %83, 0.000000e+00, !dbg !36
  %87 = or i1 %85, %86, !dbg !37
  %88 = select i1 %87, float %83, float %84, !dbg !38
  %89 = extractelement <16 x float> %56, i64 14, !dbg !33
  %90 = fcmp olt float %88, %89, !dbg !33
  %91 = fcmp uno float %88, 0.000000e+00, !dbg !36
  %92 = or i1 %90, %91, !dbg !37
  %93 = select i1 %92, float %88, float %89, !dbg !38
  %94 = extractelement <16 x float> %56, i64 15, !dbg !33
  %95 = fcmp olt float %93, %94, !dbg !33
  %96 = fcmp uno float %93, 0.000000e+00, !dbg !36
  %97 = or i1 %95, %96, !dbg !37
  %98 = select i1 %97, float %93, float %94, !dbg !38
  %99 = bitcast float %98 to i32, !dbg !39
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !39
  %101 = bitcast i32 %100 to float, !dbg !39
  %102 = fcmp olt float %98, %101, !dbg !33
  %103 = fcmp uno float %98, 0.000000e+00, !dbg !36
  %104 = or i1 %103, %102, !dbg !37
  %105 = select i1 %104, float %98, float %101, !dbg !38
  %106 = bitcast float %105 to i32, !dbg !39
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !39
  %108 = bitcast i32 %107 to float, !dbg !39
  %109 = fcmp olt float %105, %108, !dbg !33
  %110 = fcmp uno float %105, 0.000000e+00, !dbg !36
  %111 = or i1 %109, %110, !dbg !37
  %112 = select i1 %111, float %105, float %108, !dbg !38
  %113 = bitcast float %112 to i32, !dbg !39
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !39
  %115 = bitcast i32 %114 to float, !dbg !39
  %116 = fcmp olt float %112, %115, !dbg !33
  %117 = fcmp uno float %112, 0.000000e+00, !dbg !36
  %118 = or i1 %116, %117, !dbg !37
  %119 = select i1 %118, float %112, float %115, !dbg !38
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !40
  %121 = bitcast float %119 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %122 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %60, !dbg !40
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !40
  %124 = extractelement <16 x float> %56, i64 0, !dbg !41
  %125 = extractelement <16 x float> %56, i64 1, !dbg !41
  %126 = fcmp ogt float %124, %125, !dbg !41
  %127 = fcmp uno float %124, 0.000000e+00, !dbg !43
  %128 = or i1 %126, %127, !dbg !44
  %129 = select i1 %128, float %124, float %125, !dbg !45
  %130 = extractelement <16 x float> %56, i64 2, !dbg !41
  %131 = fcmp ogt float %129, %130, !dbg !41
  %132 = fcmp uno float %129, 0.000000e+00, !dbg !43
  %133 = or i1 %131, %132, !dbg !44
  %134 = select i1 %133, float %129, float %130, !dbg !45
  %135 = extractelement <16 x float> %56, i64 3, !dbg !41
  %136 = fcmp ogt float %134, %135, !dbg !41
  %137 = fcmp uno float %134, 0.000000e+00, !dbg !43
  %138 = or i1 %136, %137, !dbg !44
  %139 = select i1 %138, float %134, float %135, !dbg !45
  %140 = extractelement <16 x float> %56, i64 4, !dbg !41
  %141 = fcmp ogt float %139, %140, !dbg !41
  %142 = fcmp uno float %139, 0.000000e+00, !dbg !43
  %143 = or i1 %141, %142, !dbg !44
  %144 = select i1 %143, float %139, float %140, !dbg !45
  %145 = extractelement <16 x float> %56, i64 5, !dbg !41
  %146 = fcmp ogt float %144, %145, !dbg !41
  %147 = fcmp uno float %144, 0.000000e+00, !dbg !43
  %148 = or i1 %146, %147, !dbg !44
  %149 = select i1 %148, float %144, float %145, !dbg !45
  %150 = extractelement <16 x float> %56, i64 6, !dbg !41
  %151 = fcmp ogt float %149, %150, !dbg !41
  %152 = fcmp uno float %149, 0.000000e+00, !dbg !43
  %153 = or i1 %151, %152, !dbg !44
  %154 = select i1 %153, float %149, float %150, !dbg !45
  %155 = extractelement <16 x float> %56, i64 7, !dbg !41
  %156 = fcmp ogt float %154, %155, !dbg !41
  %157 = fcmp uno float %154, 0.000000e+00, !dbg !43
  %158 = or i1 %156, %157, !dbg !44
  %159 = select i1 %158, float %154, float %155, !dbg !45
  %160 = bitcast float %159 to i32, !dbg !46
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !46
  %162 = bitcast i32 %161 to float, !dbg !46
  %163 = fcmp ogt float %159, %162, !dbg !41
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !43
  %165 = or i1 %164, %163, !dbg !44
  %166 = select i1 %165, float %159, float %162, !dbg !45
  %167 = bitcast float %166 to i32, !dbg !46
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !46
  %169 = bitcast i32 %168 to float, !dbg !46
  %170 = fcmp ogt float %166, %169, !dbg !41
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !43
  %172 = or i1 %170, %171, !dbg !44
  %173 = select i1 %172, float %166, float %169, !dbg !45
  %174 = bitcast float %173 to i32, !dbg !46
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !46
  %176 = bitcast i32 %175 to float, !dbg !46
  %177 = fcmp ogt float %173, %176, !dbg !41
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !43
  %179 = or i1 %177, %178, !dbg !44
  %180 = select i1 %179, float %173, float %176, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %181 = bitcast float %180 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %181, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %182 = load float, ptr addrspace(3) %122, align 4, !dbg !47
  %183 = sext i32 %61 to i64, !dbg !48
  %184 = getelementptr bfloat, ptr addrspace(1) %1, i64 %183, !dbg !48
  %185 = fptrunc float %123 to bfloat, !dbg !40
  %186 = and i32 %10, 448, !dbg !40
  %187 = icmp eq i32 %186, 0, !dbg !40
  %188 = bitcast bfloat %185 to i16, !dbg !40
  %189 = and i1 %187, %62, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %188, ptr addrspace(1) %184, i1 %189) #4, !dbg !40
  %190 = getelementptr bfloat, ptr addrspace(1) %2, i64 %183, !dbg !49
  %191 = fptrunc float %182 to bfloat, !dbg !47
  %192 = bitcast bfloat %191 to i16, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %192, ptr addrspace(1) %190, i1 %189) #4, !dbg !47
  %.inv = fcmp oge float %119, 0.000000e+00, !dbg !50
  %193 = select i1 %.inv, float 0.000000e+00, float %119, !dbg !50
  %194 = fsub float 0.000000e+00, %193, !dbg !52
  %.inv4 = fcmp ole float %180, 0.000000e+00, !dbg !53
  %195 = select i1 %.inv4, float 0.000000e+00, float %180, !dbg !53
  %196 = fcmp ogt float %194, %195, !dbg !55
  %197 = fcmp uno float %194, 0.000000e+00, !dbg !57
  %198 = or i1 %197, %196, !dbg !58
  %199 = select i1 %198, float %194, float %195, !dbg !59
  %200 = fmul float %199, 0x3F80204080000000, !dbg !60
  %201 = fcmp ogt float %200, 0x3EE4F8B580000000, !dbg !61
  %202 = fcmp uno float %200, 0.000000e+00, !dbg !63
  %203 = or i1 %201, %202, !dbg !64
  %204 = select i1 %203, float %200, float 0x3EE4F8B580000000, !dbg !65
  %205 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %204), !dbg !66
  %206 = mul i32 %13, 3072, !dbg !67
  br label %207, !dbg !68

207:                                              ; preds = %59, %207
  %indvars.iv = phi i64 [ 0, %59 ], [ %indvars.iv.next, %207 ]
  %208 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !69
  %209 = lshr i32 %208, 7, !dbg !69
  %210 = mul nuw nsw i32 %209, 526336, !dbg !70
  %211 = add i32 %210, %17, !dbg !71
  %212 = trunc i64 %indvars.iv to i32, !dbg !72
  %213 = or disjoint i32 %16, %212, !dbg !72
  %214 = and i32 %213, 120, !dbg !72
  %215 = or disjoint i32 %211, %214, !dbg !73
  %216 = sext i32 %215 to i64, !dbg !74
  %217 = getelementptr bfloat, ptr addrspace(1) %0, i64 %216, !dbg !74
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %217, i1 %14) #4, !dbg !75
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !75
  %220 = bitcast i32 %219 to <2 x bfloat>, !dbg !75
  %221 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !75
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !75
  %223 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !75
  %224 = bitcast i32 %223 to <2 x bfloat>, !dbg !75
  %225 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !75
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !75
  %227 = extractelement <2 x bfloat> %220, i64 0, !dbg !75
  %228 = extractelement <2 x bfloat> %220, i64 1, !dbg !75
  %229 = extractelement <2 x bfloat> %222, i64 0, !dbg !75
  %230 = extractelement <2 x bfloat> %222, i64 1, !dbg !75
  %231 = extractelement <2 x bfloat> %224, i64 0, !dbg !75
  %232 = extractelement <2 x bfloat> %224, i64 1, !dbg !75
  %233 = extractelement <2 x bfloat> %226, i64 0, !dbg !75
  %234 = extractelement <2 x bfloat> %226, i64 1, !dbg !75
  %235 = fpext bfloat %227 to float, !dbg !76
  %236 = fpext bfloat %228 to float, !dbg !76
  %237 = fpext bfloat %229 to float, !dbg !76
  %238 = fpext bfloat %230 to float, !dbg !76
  %239 = fpext bfloat %231 to float, !dbg !76
  %240 = fpext bfloat %232 to float, !dbg !76
  %241 = fpext bfloat %233 to float, !dbg !76
  %242 = fpext bfloat %234 to float, !dbg !76
  %243 = fmul float %205, %235, !dbg !77
  %244 = fmul float %205, %236, !dbg !77
  %245 = fmul float %205, %237, !dbg !77
  %246 = fmul float %205, %238, !dbg !77
  %247 = fmul float %205, %239, !dbg !77
  %248 = fmul float %205, %240, !dbg !77
  %249 = fmul float %205, %241, !dbg !77
  %250 = fmul float %205, %242, !dbg !77
  %251 = tail call float @llvm.nvvm.round.f(float %243) #4, !dbg !78
  %252 = tail call float @llvm.nvvm.round.f(float %244) #4, !dbg !78
  %253 = tail call float @llvm.nvvm.round.f(float %245) #4, !dbg !78
  %254 = tail call float @llvm.nvvm.round.f(float %246) #4, !dbg !78
  %255 = tail call float @llvm.nvvm.round.f(float %247) #4, !dbg !78
  %256 = tail call float @llvm.nvvm.round.f(float %248) #4, !dbg !78
  %257 = tail call float @llvm.nvvm.round.f(float %249) #4, !dbg !78
  %258 = tail call float @llvm.nvvm.round.f(float %250) #4, !dbg !78
  %259 = insertelement <4 x float> poison, float %251, i64 0, !dbg !79
  %260 = insertelement <4 x float> %259, float %252, i64 1, !dbg !79
  %261 = insertelement <4 x float> %260, float %253, i64 2, !dbg !79
  %262 = insertelement <4 x float> %261, float %254, i64 3, !dbg !79
  %263 = fcmp ogt <4 x float> %262, splat (float -1.270000e+02), !dbg !79
  %264 = fcmp uno <4 x float> %262, zeroinitializer, !dbg !81
  %265 = or <4 x i1> %263, %264, !dbg !82
  %266 = select <4 x i1> %265, <4 x float> %262, <4 x float> splat (float -1.270000e+02), !dbg !83
  %267 = fcmp olt <4 x float> %266, splat (float 1.270000e+02), !dbg !84
  %268 = fcmp uno <4 x float> %266, zeroinitializer, !dbg !86
  %269 = or <4 x i1> %267, %268, !dbg !87
  %270 = fptosi <4 x float> %266 to <4 x i8>, !dbg !88
  %271 = select <4 x i1> %269, <4 x i8> %270, <4 x i8> splat (i8 127), !dbg !89
  %272 = insertelement <4 x float> poison, float %255, i64 0, !dbg !79
  %273 = insertelement <4 x float> %272, float %256, i64 1, !dbg !79
  %274 = insertelement <4 x float> %273, float %257, i64 2, !dbg !79
  %275 = insertelement <4 x float> %274, float %258, i64 3, !dbg !79
  %276 = fcmp ogt <4 x float> %275, splat (float -1.270000e+02), !dbg !79
  %277 = fcmp uno <4 x float> %275, zeroinitializer, !dbg !81
  %278 = or <4 x i1> %276, %277, !dbg !82
  %279 = select <4 x i1> %278, <4 x float> %275, <4 x float> splat (float -1.270000e+02), !dbg !83
  %280 = fcmp olt <4 x float> %279, splat (float 1.270000e+02), !dbg !84
  %281 = fcmp uno <4 x float> %279, zeroinitializer, !dbg !86
  %282 = or <4 x i1> %280, %281, !dbg !87
  %283 = fptosi <4 x float> %279 to <4 x i8>, !dbg !88
  %284 = select <4 x i1> %282, <4 x i8> %283, <4 x i8> splat (i8 127), !dbg !89
  %285 = add i32 %213, %206, !dbg !90
  %286 = sext i32 %285 to i64, !dbg !91
  %287 = getelementptr i8, ptr addrspace(1) %3, i64 %286, !dbg !91
  %288 = bitcast <4 x i8> %271 to i32, !dbg !92
  %289 = bitcast <4 x i8> %284 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %288, i32 %289, ptr addrspace(1) %287, i1 %14) #4, !dbg !92
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !68
  %290 = icmp samesign ult i64 %indvars.iv, 3008, !dbg !68
  br i1 %290, label %207, label %291, !dbg !68

291:                                              ; preds = %207
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 42, column: 48, scope: !6)
!17 = !DILocation(line: 31, column: 40, scope: !6)
!18 = !DILocation(line: 37, column: 59, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 37, column: 43, scope: !6)
!21 = !DILocation(line: 37, column: 75, scope: !6)
!22 = !DILocation(line: 37, column: 68, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 83, scope: !6)
!25 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 45, scope: !6)
!29 = !DILocation(line: 37, column: 144, scope: !6)
!30 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 94, column: 15, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!35 = !DILocation(line: 43, column: 38, scope: !6)
!36 = !DILocation(line: 96, column: 21, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 96, column: 16, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 97, column: 29, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 110, column: 29, scope: !26, inlinedAt: !35)
!40 = !DILocation(line: 45, column: 36, scope: !6)
!41 = !DILocation(line: 102, column: 15, scope: !34, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 38, scope: !6)
!43 = !DILocation(line: 104, column: 21, scope: !34, inlinedAt: !42)
!44 = !DILocation(line: 104, column: 16, scope: !34, inlinedAt: !42)
!45 = !DILocation(line: 105, column: 29, scope: !34, inlinedAt: !42)
!46 = !DILocation(line: 115, column: 29, scope: !26, inlinedAt: !42)
!47 = !DILocation(line: 46, column: 36, scope: !6)
!48 = !DILocation(line: 45, column: 25, scope: !6)
!49 = !DILocation(line: 46, column: 25, scope: !6)
!50 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !51)
!51 = !DILocation(line: 55, column: 44, scope: !6)
!52 = !DILocation(line: 56, column: 16, scope: !6)
!53 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !54)
!54 = !DILocation(line: 57, column: 45, scope: !6)
!55 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !56)
!56 = !DILocation(line: 58, column: 45, scope: !6)
!57 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !56)
!58 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !56)
!59 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !56)
!60 = !DILocation(line: 60, column: 24, scope: !6)
!61 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !62)
!62 = !DILocation(line: 63, column: 46, scope: !6)
!63 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !62)
!64 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !62)
!65 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !62)
!66 = !DILocation(line: 66, column: 25, scope: !6)
!67 = !DILocation(line: 78, column: 41, scope: !6)
!68 = !DILocation(line: 47, column: 40, scope: !6)
!69 = !DILocation(line: 53, column: 59, scope: !6)
!70 = !DILocation(line: 53, column: 51, scope: !6)
!71 = !DILocation(line: 53, column: 43, scope: !6)
!72 = !DILocation(line: 53, column: 75, scope: !6)
!73 = !DILocation(line: 53, column: 68, scope: !6)
!74 = !DILocation(line: 53, column: 34, scope: !6)
!75 = !DILocation(line: 53, column: 83, scope: !6)
!76 = !DILocation(line: 53, column: 145, scope: !6)
!77 = !DILocation(line: 69, column: 23, scope: !6)
!78 = !DILocation(line: 70, column: 36, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !80)
!80 = !DILocation(line: 73, column: 46, scope: !6)
!81 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !80)
!82 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !80)
!83 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !80)
!84 = !DILocation(line: 94, column: 15, scope: !26, inlinedAt: !85)
!85 = !DILocation(line: 75, column: 46, scope: !6)
!86 = !DILocation(line: 96, column: 21, scope: !26, inlinedAt: !85)
!87 = !DILocation(line: 96, column: 16, scope: !26, inlinedAt: !85)
!88 = !DILocation(line: 77, column: 25, scope: !6)
!89 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !85)
!90 = !DILocation(line: 78, column: 36, scope: !6)
!91 = !DILocation(line: 78, column: 29, scope: !6)
!92 = !DILocation(line: 78, column: 53, scope: !6)
!93 = !DILocation(line: 47, column: 4, scope: !6)
