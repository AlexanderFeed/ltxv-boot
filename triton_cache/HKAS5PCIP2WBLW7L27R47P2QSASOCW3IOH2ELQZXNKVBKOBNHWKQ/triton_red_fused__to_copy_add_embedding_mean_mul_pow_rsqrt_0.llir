; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/ds/cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp4 < 32128\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !10 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %9 = shl i32 %8, 6, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = lshr i32 %10, 1, !dbg !13
  %12 = and i32 %11, 63, !dbg !13
  %13 = lshr i32 %10, 3, !dbg !13
  %14 = and i32 %13, 15, !dbg !13
  %15 = or disjoint i32 %12, %9, !dbg !14
  %16 = icmp slt i32 %15, 512, !dbg !15
  %17 = shl i32 %10, 2, !dbg !16
  %18 = and i32 %17, 4, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %16) #6, !dbg !18
  %25 = icmp slt i64 %24, 0, !dbg !19
  %26 = or disjoint i32 %14, %9, !dbg !14
  %27 = or disjoint i32 %26, 16, !dbg !14
  %28 = or disjoint i32 %26, 32, !dbg !14
  %29 = or disjoint i32 %26, 48, !dbg !14
  %30 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !15
  %31 = insertelement <4 x i32> %30, i32 %27, i64 1, !dbg !15
  %32 = insertelement <4 x i32> %31, i32 %28, i64 2, !dbg !15
  %33 = insertelement <4 x i32> %32, i32 %29, i64 3, !dbg !15
  %34 = icmp slt <4 x i32> %33, splat (i32 512), !dbg !15
  %35 = sext i32 %26 to i64, !dbg !17
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35, !dbg !17
  %37 = sext i32 %27 to i64, !dbg !17
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = sext i32 %28 to i64, !dbg !17
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = sext i32 %29 to i64, !dbg !17
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !17
  %43 = extractelement <4 x i1> %34, i64 0, !dbg !18
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %43) #6, !dbg !18
  %45 = extractelement <4 x i1> %34, i64 1, !dbg !18
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %45) #6, !dbg !18
  %47 = extractelement <4 x i1> %34, i64 2, !dbg !18
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %47) #6, !dbg !18
  %49 = extractelement <4 x i1> %34, i64 3, !dbg !18
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %49) #6, !dbg !18
  %51 = insertelement <4 x i64> poison, i64 %44, i64 0, !dbg !20
  %52 = insertelement <4 x i64> %51, i64 %46, i64 1, !dbg !20
  %53 = insertelement <4 x i64> %52, i64 %48, i64 2, !dbg !20
  %54 = insertelement <4 x i64> %53, i64 %50, i64 3, !dbg !20
  %55 = add <4 x i64> %54, splat (i64 32128), !dbg !20
  %56 = icmp slt <4 x i64> %54, zeroinitializer, !dbg !19
  %57 = select <4 x i1> %56, <4 x i64> %55, <4 x i64> %54, !dbg !21
  %58 = shl i64 %24, 12, !dbg !22
  %59 = add i64 %58, 131596288, !dbg !22
  %60 = select i1 %25, i64 %59, i64 %58, !dbg !22
  %61 = icmp ugt <4 x i64> %57, splat (i64 32127)
  %62 = and <4 x i1> %61, %34
  %63 = bitcast <4 x i1> %62 to i4
  %64 = icmp eq i4 %63, 0
  br i1 %64, label %.split.preheader, label %97, !dbg !23

.split.preheader:                                 ; preds = %7
  %65 = zext nneg i32 %18 to i64, !dbg !24
  %invariant.op = or disjoint i64 %60, %65, !dbg !24
  br label %.split, !dbg !24

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %66 = phi float [ 0.000000e+00, %.split.preheader ], [ %92, %.split ]
  %67 = phi float [ 0.000000e+00, %.split.preheader ], [ %93, %.split ]
  %68 = phi float [ 0.000000e+00, %.split.preheader ], [ %94, %.split ]
  %69 = phi float [ 0.000000e+00, %.split.preheader ], [ %95, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.reass = or i64 %indvars.iv, %invariant.op
  %70 = getelementptr bfloat, ptr addrspace(1) %1, i64 %.reass, !dbg !25
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %70, i1 %16) #6, !dbg !26
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !26
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !26
  %74 = extractvalue { i32, i32 } %71, 1, !dbg !26
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !26
  %76 = extractelement <2 x bfloat> %73, i64 0, !dbg !26
  %77 = extractelement <2 x bfloat> %73, i64 1, !dbg !26
  %78 = extractelement <2 x bfloat> %75, i64 0, !dbg !26
  %79 = extractelement <2 x bfloat> %75, i64 1, !dbg !26
  %80 = fpext bfloat %76 to float, !dbg !27
  %81 = fpext bfloat %77 to float, !dbg !27
  %82 = fpext bfloat %78 to float, !dbg !27
  %83 = fpext bfloat %79 to float, !dbg !27
  %84 = fmul float %80, %80, !dbg !28
  %85 = fmul float %81, %81, !dbg !28
  %86 = fmul float %82, %82, !dbg !28
  %87 = fmul float %83, %83, !dbg !28
  %88 = fadd float %66, %84, !dbg !29
  %89 = fadd float %67, %85, !dbg !29
  %90 = fadd float %68, %86, !dbg !29
  %91 = fadd float %69, %87, !dbg !29
  %92 = select i1 %16, float %88, float %66, !dbg !30
  %93 = select i1 %16, float %89, float %67, !dbg !30
  %94 = select i1 %16, float %90, float %68, !dbg !30
  %95 = select i1 %16, float %91, float %69, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !24
  %96 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !24
  br i1 %96, label %.split, label %__nv_rsqrtf.exit, !dbg !24

97:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  unreachable, !dbg !23

__nv_rsqrtf.exit:                                 ; preds = %.split
  %98 = fadd float %92, %93, !dbg !31
  %99 = fadd float %94, %98, !dbg !31
  %100 = fadd float %95, %99, !dbg !31
  %101 = bitcast float %100 to i32, !dbg !36
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !36
  %103 = bitcast i32 %102 to float, !dbg !36
  %104 = fadd float %100, %103, !dbg !31
  %105 = tail call float @llvm.nvvm.div.full(float %104, float 4.096000e+03), !dbg !37
  %106 = fadd float %105, 0x3EB0C6F7A0000000, !dbg !38
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i14 = icmp eq i32 %110, 0, !dbg !39
  br i1 %.not.i14, label %113, label %111, !dbg !39

111:                                              ; preds = %__nv_rsqrtf.exit
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !39
  br label %__nv_rsqrtf.exit16, !dbg !39

113:                                              ; preds = %__nv_rsqrtf.exit
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !39
  br label %__nv_rsqrtf.exit16, !dbg !39

__nv_rsqrtf.exit16:                               ; preds = %111, %113
  %.0.i15 = phi float [ %112, %111 ], [ %114, %113 ], !dbg !39
  %115 = shl i32 %15, 12, !dbg !40
  %116 = zext nneg i32 %18 to i64, !dbg !41
  %117 = sext i32 %115 to i64, !dbg !41
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %3, i64 %117, !dbg !41
  %118 = insertelement <2 x float> poison, float %.0.i15, i64 0, !dbg !42
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %120, !dbg !41

120:                                              ; preds = %120, %__nv_rsqrtf.exit16
  %indvars.iv21 = phi i64 [ 0, %__nv_rsqrtf.exit16 ], [ %indvars.iv.next22, %120 ]
  %121 = or disjoint i64 %indvars.iv21, %116, !dbg !43
  %122 = getelementptr bfloat, ptr addrspace(1) %2, i64 %121, !dbg !44
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %122, i1 true) #6, !dbg !45
  %124 = extractvalue { i32, i32 } %123, 1, !dbg !45
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !45
  %126 = extractvalue { i32, i32 } %123, 0, !dbg !45
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %128 = or disjoint i64 %60, %121, !dbg !47
  %129 = getelementptr bfloat, ptr addrspace(1) %1, i64 %128, !dbg !48
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %129, i1 %16) #6, !dbg !49
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !49
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !49
  %133 = extractvalue { i32, i32 } %130, 1, !dbg !49
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !49
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %121, !dbg !50
  %135 = fpext <2 x bfloat> %127 to <2 x float>, !dbg !51
  %136 = fpext <2 x bfloat> %132 to <2 x float>, !dbg !52
  %137 = fmul <2 x float> %119, %136, !dbg !42
  %138 = fmul <2 x float> %137, %135, !dbg !53
  %139 = fptrunc <2 x float> %138 to <2 x bfloat>, !dbg !54
  %140 = fpext <2 x bfloat> %125 to <2 x float>, !dbg !51
  %141 = fpext <2 x bfloat> %134 to <2 x float>, !dbg !52
  %142 = fmul <2 x float> %119, %141, !dbg !42
  %143 = fmul <2 x float> %142, %140, !dbg !53
  %144 = fptrunc <2 x float> %143 to <2 x bfloat>, !dbg !54
  %145 = bitcast <2 x bfloat> %139 to i32, !dbg !54
  %146 = bitcast <2 x bfloat> %144 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %gep, i1 %16) #6, !dbg !54
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 8, !dbg !41
  %147 = icmp samesign ult i64 %indvars.iv21, 4088, !dbg !41
  br i1 %147, label %120, label %148, !dbg !41

148:                                              ; preds = %120
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdsqxkqiud3yngsl5denr7u2ose477gankz5t6faljntmm5q2a5r.py", directory: "/tmp/torchinductor_root/ds")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 23, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 33, scope: !10)
!13 = !DILocation(line: 24, column: 44, scope: !10)
!14 = !DILocation(line: 24, column: 23, scope: !10)
!15 = !DILocation(line: 25, column: 21, scope: !10)
!16 = !DILocation(line: 26, column: 37, scope: !10)
!17 = !DILocation(line: 29, column: 30, scope: !10)
!18 = !DILocation(line: 29, column: 35, scope: !10)
!19 = !DILocation(line: 39, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 40, column: 36, scope: !10)
!22 = !DILocation(line: 42, column: 46, scope: !10)
!23 = !DILocation(line: 41, column: 68, scope: !10)
!24 = !DILocation(line: 31, column: 40, scope: !10)
!25 = !DILocation(line: 42, column: 34, scope: !10)
!26 = !DILocation(line: 42, column: 53, scope: !10)
!27 = !DILocation(line: 42, column: 114, scope: !10)
!28 = !DILocation(line: 44, column: 22, scope: !10)
!29 = !DILocation(line: 46, column: 25, scope: !10)
!30 = !DILocation(line: 47, column: 50, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 64, column: 25, scope: !10)
!38 = !DILocation(line: 66, column: 24, scope: !10)
!39 = !DILocation(line: 67, column: 32, scope: !10)
!40 = !DILocation(line: 71, column: 41, scope: !10)
!41 = !DILocation(line: 49, column: 40, scope: !10)
!42 = !DILocation(line: 68, column: 24, scope: !10)
!43 = !DILocation(line: 50, column: 31, scope: !10)
!44 = !DILocation(line: 55, column: 35, scope: !10)
!45 = !DILocation(line: 55, column: 42, scope: !10)
!46 = !DILocation(line: 60, column: 70, scope: !10)
!47 = !DILocation(line: 61, column: 42, scope: !10)
!48 = !DILocation(line: 61, column: 35, scope: !10)
!49 = !DILocation(line: 61, column: 55, scope: !10)
!50 = !DILocation(line: 71, column: 29, scope: !10)
!51 = !DILocation(line: 55, column: 95, scope: !10)
!52 = !DILocation(line: 61, column: 117, scope: !10)
!53 = !DILocation(line: 70, column: 24, scope: !10)
!54 = !DILocation(line: 71, column: 53, scope: !10)
!55 = !DILocation(line: 49, column: 4, scope: !10)
