; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 512, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 2, !dbg !11
  %13 = and i32 %12, 2044, !dbg !11
  %14 = shl i32 %8, 7, !dbg !12
  %15 = and i32 %12, 124
  %invariant.op = or disjoint i32 %14, %15, !dbg !13
  %16 = lshr i32 %13, 7, !dbg !14
  %17 = mul nuw nsw i32 %16, 526336, !dbg !15
  %.reass = add i32 %17, %invariant.op
  %18 = sext i32 %.reass to i64, !dbg !16
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %9) #4, !dbg !17
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !17
  %22 = bitcast i32 %21 to <2 x bfloat>, !dbg !17
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !17
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !17
  %25 = extractelement <2 x bfloat> %22, i64 0, !dbg !17
  %26 = extractelement <2 x bfloat> %22, i64 1, !dbg !17
  %27 = extractelement <2 x bfloat> %24, i64 0, !dbg !17
  %28 = extractelement <2 x bfloat> %24, i64 1, !dbg !17
  %29 = fpext bfloat %25 to float, !dbg !18
  %30 = fpext bfloat %26 to float, !dbg !18
  %31 = fpext bfloat %27 to float, !dbg !18
  %32 = fpext bfloat %28 to float, !dbg !18
  %33 = select i1 %9, float %29, float 0x7FF0000000000000, !dbg !19
  %34 = select i1 %9, float %30, float 0x7FF0000000000000, !dbg !19
  %35 = select i1 %9, float %31, float 0x7FF0000000000000, !dbg !19
  %36 = select i1 %9, float %29, float 0xFFF0000000000000, !dbg !20
  %37 = select i1 %9, float %30, float 0xFFF0000000000000, !dbg !20
  %38 = select i1 %9, float %31, float 0xFFF0000000000000, !dbg !20
  %39 = or disjoint i32 %13, 2048, !dbg !21
  %40 = icmp samesign ult i32 %39, 3072, !dbg !22
  %41 = lshr i32 %39, 7, !dbg !14
  %42 = mul nuw nsw i32 %41, 526336, !dbg !15
  %.reass.1 = add i32 %42, %invariant.op
  %43 = sext i32 %.reass.1 to i64, !dbg !16
  %44 = getelementptr bfloat, ptr addrspace(1) %0, i64 %43, !dbg !16
  %45 = and i1 %9, %40, !dbg !23
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %45) #4, !dbg !17
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !17
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !17
  %49 = extractvalue { i32, i32 } %46, 1, !dbg !17
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !17
  %51 = extractelement <2 x bfloat> %48, i64 0, !dbg !17
  %52 = extractelement <2 x bfloat> %48, i64 1, !dbg !17
  %53 = extractelement <2 x bfloat> %50, i64 0, !dbg !17
  %54 = extractelement <2 x bfloat> %50, i64 1, !dbg !17
  %55 = fpext bfloat %51 to float, !dbg !18
  %56 = fpext bfloat %52 to float, !dbg !18
  %57 = fpext bfloat %53 to float, !dbg !18
  %58 = fpext bfloat %54 to float, !dbg !18
  %59 = fcmp olt float %33, %55, !dbg !24
  %60 = fcmp olt float %34, %56, !dbg !24
  %61 = fcmp olt float %35, %57, !dbg !24
  %62 = fcmp uno float %33, 0.000000e+00, !dbg !28
  %63 = fcmp uno float %34, 0.000000e+00, !dbg !28
  %64 = fcmp uno float %35, 0.000000e+00, !dbg !28
  %65 = or i1 %62, %59, !dbg !29
  %66 = or i1 %63, %60, !dbg !29
  %67 = or i1 %64, %61, !dbg !29
  %68 = select i1 %65, float %33, float %55, !dbg !30
  %69 = select i1 %66, float %34, float %56, !dbg !30
  %70 = select i1 %67, float %35, float %57, !dbg !30
  %71 = select i1 %45, float %69, float %34, !dbg !19
  %72 = select i1 %45, float %70, float %35, !dbg !19
  %73 = fcmp ogt float %36, %55, !dbg !31
  %74 = fcmp ogt float %37, %56, !dbg !31
  %75 = fcmp ogt float %38, %57, !dbg !31
  %76 = fcmp uno float %36, 0.000000e+00, !dbg !33
  %77 = fcmp uno float %37, 0.000000e+00, !dbg !33
  %78 = fcmp uno float %38, 0.000000e+00, !dbg !33
  %79 = or i1 %76, %73, !dbg !34
  %80 = or i1 %77, %74, !dbg !34
  %81 = or i1 %78, %75, !dbg !34
  %82 = select i1 %79, float %36, float %55, !dbg !35
  %83 = select i1 %80, float %37, float %56, !dbg !35
  %84 = select i1 %81, float %38, float %57, !dbg !35
  %85 = select i1 %45, float %83, float %37, !dbg !20
  %86 = select i1 %45, float %84, float %38, !dbg !20
  %87 = lshr i32 %10, 5, !dbg !11
  %88 = insertelement <2 x i1> poison, i1 %45, i64 0, !dbg !19
  %89 = insertelement <2 x i1> %88, i1 %9, i64 1, !dbg !19
  %90 = insertelement <2 x float> poison, float %68, i64 0, !dbg !19
  %91 = insertelement <2 x float> %90, float %32, i64 1, !dbg !19
  %92 = insertelement <2 x float> <float poison, float 0x7FF0000000000000>, float %33, i64 0, !dbg !19
  %93 = select <2 x i1> %89, <2 x float> %91, <2 x float> %92, !dbg !19
  %94 = insertelement <2 x float> poison, float %71, i64 0, !dbg !36
  %95 = insertelement <2 x float> %94, float %58, i64 1, !dbg !36
  %96 = fcmp olt <2 x float> %93, %95, !dbg !36
  %97 = fcmp uno <2 x float> %93, zeroinitializer, !dbg !39
  %98 = or <2 x i1> %97, %96, !dbg !40
  %99 = select <2 x i1> %98, <2 x float> %93, <2 x float> %95, !dbg !41
  %100 = extractelement <2 x float> %99, i64 0, !dbg !39
  %101 = fcmp olt float %100, %72, !dbg !36
  %102 = fcmp uno float %100, 0.000000e+00, !dbg !39
  %103 = or i1 %101, %102, !dbg !40
  %104 = insertelement <2 x i1> poison, i1 %103, i64 0, !dbg !41
  %105 = insertelement <2 x i1> %104, i1 %45, i64 1, !dbg !41
  %106 = insertelement <2 x float> %93, float %72, i64 0, !dbg !41
  %107 = select <2 x i1> %105, <2 x float> %99, <2 x float> %106, !dbg !41
  %108 = extractelement <2 x float> %107, i64 0, !dbg !41
  %109 = extractelement <2 x float> %107, i64 1, !dbg !36
  %110 = fcmp olt float %108, %109, !dbg !36
  %111 = fcmp uno float %108, 0.000000e+00, !dbg !39
  %112 = or i1 %110, %111, !dbg !40
  %113 = select i1 %112, float %108, float %109, !dbg !41
  %114 = bitcast float %113 to i32, !dbg !42
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = fcmp olt float %113, %116, !dbg !36
  %118 = fcmp uno float %113, 0.000000e+00, !dbg !39
  %119 = or i1 %118, %117, !dbg !40
  %120 = select i1 %119, float %113, float %116, !dbg !41
  %121 = bitcast float %120 to i32, !dbg !42
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !42
  %123 = bitcast i32 %122 to float, !dbg !42
  %124 = fcmp olt float %120, %123, !dbg !36
  %125 = fcmp uno float %120, 0.000000e+00, !dbg !39
  %126 = or i1 %124, %125, !dbg !40
  %127 = select i1 %126, float %120, float %123, !dbg !41
  %128 = bitcast float %127 to i32, !dbg !42
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !42
  %130 = bitcast i32 %129 to float, !dbg !42
  %131 = fcmp olt float %127, %130, !dbg !36
  %132 = fcmp uno float %127, 0.000000e+00, !dbg !39
  %133 = or i1 %131, %132, !dbg !40
  %134 = select i1 %133, float %127, float %130, !dbg !41
  %135 = bitcast float %134 to i32, !dbg !42
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !42
  %137 = bitcast i32 %136 to float, !dbg !42
  %138 = fcmp olt float %134, %137, !dbg !36
  %139 = fcmp uno float %134, 0.000000e+00, !dbg !39
  %140 = or i1 %138, %139, !dbg !40
  %141 = select i1 %140, float %134, float %137, !dbg !41
  %142 = bitcast float %141 to i32, !dbg !42
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !42
  %144 = bitcast i32 %143 to float, !dbg !42
  %145 = fcmp olt float %141, %144, !dbg !36
  %146 = fcmp uno float %141, 0.000000e+00, !dbg !39
  %147 = or i1 %145, %146, !dbg !40
  %148 = and i32 %87, 15, !dbg !42
  %149 = icmp eq i32 %11, 0, !dbg !42
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !42
  %151 = select i1 %147, i32 %142, i32 %143, !dbg !41
  %152 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %152, i1 %149) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %153 = icmp slt i32 %10, 16, !dbg !42
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #4, !dbg !42
  %156 = bitcast i32 %155 to float, !dbg !42
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !42
  %158 = bitcast i32 %157 to float, !dbg !42
  %159 = fcmp olt float %156, %158, !dbg !36
  %160 = fcmp uno float %156, 0.000000e+00, !dbg !39
  %161 = or i1 %160, %159, !dbg !40
  %162 = select i1 %161, float %156, float %158, !dbg !41
  %163 = bitcast float %162 to i32, !dbg !42
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = fcmp olt float %162, %165, !dbg !36
  %167 = fcmp uno float %162, 0.000000e+00, !dbg !39
  %168 = or i1 %166, %167, !dbg !40
  %169 = select i1 %168, float %162, float %165, !dbg !41
  %170 = bitcast float %169 to i32, !dbg !42
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !42
  %172 = bitcast i32 %171 to float, !dbg !42
  %173 = fcmp olt float %169, %172, !dbg !36
  %174 = fcmp uno float %169, 0.000000e+00, !dbg !39
  %175 = or i1 %173, %174, !dbg !40
  %176 = select i1 %175, float %169, float %172, !dbg !41
  %177 = bitcast float %176 to i32, !dbg !42
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 1, i32 31), !dbg !42
  %179 = bitcast i32 %178 to float, !dbg !42
  %180 = fcmp olt float %176, %179, !dbg !36
  %181 = fcmp uno float %176, 0.000000e+00, !dbg !39
  %182 = or i1 %180, %181, !dbg !40
  %183 = and i32 %10, 15, !dbg !42
  %184 = icmp eq i32 %183, 0, !dbg !42
  %185 = and i1 %153, %184, !dbg !42
  %186 = select i1 %182, i32 %177, i32 %178, !dbg !41
  %187 = insertelement <1 x i32> poison, i32 %186, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %187, i1 %185) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %188 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %189 = insertelement <2 x float> poison, float %82, i64 0, !dbg !20
  %190 = insertelement <2 x float> %189, float %32, i64 1, !dbg !20
  %191 = insertelement <2 x float> <float poison, float 0xFFF0000000000000>, float %36, i64 0, !dbg !20
  %192 = select <2 x i1> %89, <2 x float> %190, <2 x float> %191, !dbg !20
  %193 = insertelement <2 x float> poison, float %85, i64 0, !dbg !45
  %194 = insertelement <2 x float> %193, float %58, i64 1, !dbg !45
  %195 = fcmp ogt <2 x float> %192, %194, !dbg !45
  %196 = fcmp uno <2 x float> %192, zeroinitializer, !dbg !46
  %197 = or <2 x i1> %196, %195, !dbg !47
  %198 = select <2 x i1> %197, <2 x float> %192, <2 x float> %194, !dbg !48
  %199 = extractelement <2 x float> %198, i64 0, !dbg !46
  %200 = fcmp ogt float %199, %86, !dbg !45
  %201 = fcmp uno float %199, 0.000000e+00, !dbg !46
  %202 = or i1 %200, %201, !dbg !47
  %203 = insertelement <2 x i1> poison, i1 %202, i64 0, !dbg !48
  %204 = insertelement <2 x i1> %203, i1 %45, i64 1, !dbg !48
  %205 = insertelement <2 x float> %192, float %86, i64 0, !dbg !48
  %206 = select <2 x i1> %204, <2 x float> %198, <2 x float> %205, !dbg !48
  %207 = extractelement <2 x float> %206, i64 0, !dbg !48
  %208 = extractelement <2 x float> %206, i64 1, !dbg !45
  %209 = fcmp ogt float %207, %208, !dbg !45
  %210 = fcmp uno float %207, 0.000000e+00, !dbg !46
  %211 = or i1 %209, %210, !dbg !47
  %212 = select i1 %211, float %207, float %208, !dbg !48
  %213 = bitcast float %212 to i32, !dbg !43
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 16, i32 31), !dbg !43
  %215 = bitcast i32 %214 to float, !dbg !43
  %216 = fcmp ogt float %212, %215, !dbg !45
  %217 = fcmp uno float %212, 0.000000e+00, !dbg !46
  %218 = or i1 %217, %216, !dbg !47
  %219 = select i1 %218, float %212, float %215, !dbg !48
  %220 = bitcast float %219 to i32, !dbg !43
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !43
  %222 = bitcast i32 %221 to float, !dbg !43
  %223 = fcmp ogt float %219, %222, !dbg !45
  %224 = fcmp uno float %219, 0.000000e+00, !dbg !46
  %225 = or i1 %223, %224, !dbg !47
  %226 = select i1 %225, float %219, float %222, !dbg !48
  %227 = bitcast float %226 to i32, !dbg !43
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !43
  %229 = bitcast i32 %228 to float, !dbg !43
  %230 = fcmp ogt float %226, %229, !dbg !45
  %231 = fcmp uno float %226, 0.000000e+00, !dbg !46
  %232 = or i1 %230, %231, !dbg !47
  %233 = select i1 %232, float %226, float %229, !dbg !48
  %234 = bitcast float %233 to i32, !dbg !43
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !43
  %236 = bitcast i32 %235 to float, !dbg !43
  %237 = fcmp ogt float %233, %236, !dbg !45
  %238 = fcmp uno float %233, 0.000000e+00, !dbg !46
  %239 = or i1 %237, %238, !dbg !47
  %240 = select i1 %239, float %233, float %236, !dbg !48
  %241 = bitcast float %240 to i32, !dbg !43
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 1, i32 31), !dbg !43
  %243 = bitcast i32 %242 to float, !dbg !43
  %244 = fcmp ogt float %240, %243, !dbg !45
  %245 = fcmp uno float %240, 0.000000e+00, !dbg !46
  %246 = or i1 %244, %245, !dbg !47
  %247 = select i1 %246, i32 %241, i32 %242, !dbg !48
  %248 = insertelement <1 x i32> poison, i32 %247, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %248, i1 %149) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %249 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #4, !dbg !43
  %250 = bitcast i32 %249 to float, !dbg !43
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 8, i32 31), !dbg !43
  %252 = bitcast i32 %251 to float, !dbg !43
  %253 = fcmp ogt float %250, %252, !dbg !45
  %254 = fcmp uno float %250, 0.000000e+00, !dbg !46
  %255 = or i1 %254, %253, !dbg !47
  %256 = select i1 %255, float %250, float %252, !dbg !48
  %257 = bitcast float %256 to i32, !dbg !43
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !43
  %259 = bitcast i32 %258 to float, !dbg !43
  %260 = fcmp ogt float %256, %259, !dbg !45
  %261 = fcmp uno float %256, 0.000000e+00, !dbg !46
  %262 = or i1 %260, %261, !dbg !47
  %263 = select i1 %262, float %256, float %259, !dbg !48
  %264 = bitcast float %263 to i32, !dbg !43
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !43
  %266 = bitcast i32 %265 to float, !dbg !43
  %267 = fcmp ogt float %263, %266, !dbg !45
  %268 = fcmp uno float %263, 0.000000e+00, !dbg !46
  %269 = or i1 %267, %268, !dbg !47
  %270 = select i1 %269, float %263, float %266, !dbg !48
  %271 = bitcast float %270 to i32, !dbg !43
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 1, i32 31), !dbg !43
  %273 = bitcast i32 %272 to float, !dbg !43
  %274 = fcmp ogt float %270, %273, !dbg !45
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !46
  %276 = or i1 %274, %275, !dbg !47
  %277 = select i1 %276, i32 %271, i32 %272, !dbg !48
  %278 = insertelement <1 x i32> poison, i32 %277, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %278, i1 %185) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %279 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %280 = sext i32 %8 to i64, !dbg !49
  %281 = getelementptr bfloat, ptr addrspace(1) %1, i64 %280, !dbg !49
  %282 = fptrunc float %188 to bfloat, !dbg !50
  %283 = and i32 %10, 511, !dbg !50
  %284 = icmp eq i32 %283, 0, !dbg !50
  %285 = bitcast bfloat %282 to i16, !dbg !50
  %286 = and i1 %9, %284, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %285, ptr addrspace(1) %281, i1 %286) #4, !dbg !50
  %287 = getelementptr bfloat, ptr addrspace(1) %2, i64 %280, !dbg !51
  %288 = fptrunc float %279 to bfloat, !dbg !52
  %289 = bitcast bfloat %288 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %289, ptr addrspace(1) %287, i1 %286) #4, !dbg !52
  %.inv = fcmp oge float %188, 0.000000e+00, !dbg !53
  %290 = select i1 %.inv, float 0.000000e+00, float %188, !dbg !53
  %291 = fsub float 0.000000e+00, %290, !dbg !55
  %.inv2 = fcmp ole float %279, 0.000000e+00, !dbg !56
  %292 = select i1 %.inv2, float 0.000000e+00, float %279, !dbg !56
  %293 = fcmp ogt float %291, %292, !dbg !58
  %294 = fcmp uno float %291, 0.000000e+00, !dbg !60
  %295 = or i1 %294, %293, !dbg !61
  %296 = select i1 %295, float %291, float %292, !dbg !62
  %297 = fmul float %296, 0x3F80204080000000, !dbg !63
  %298 = fcmp ogt float %297, 0x3EE4F8B580000000, !dbg !64
  %299 = fcmp uno float %297, 0.000000e+00, !dbg !66
  %300 = or i1 %298, %299, !dbg !67
  %301 = select i1 %300, float %297, float 0x3EE4F8B580000000, !dbg !68
  %302 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %301), !dbg !69
  %303 = mul i32 %8, 3072, !dbg !70
  %304 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %9) #4, !dbg !71
  %305 = extractvalue { i32, i32 } %304, 0, !dbg !71
  %306 = bitcast i32 %305 to <2 x bfloat>, !dbg !71
  %307 = extractvalue { i32, i32 } %304, 1, !dbg !71
  %308 = bitcast i32 %307 to <2 x bfloat>, !dbg !71
  %309 = extractelement <2 x bfloat> %306, i64 0, !dbg !71
  %310 = extractelement <2 x bfloat> %306, i64 1, !dbg !71
  %311 = extractelement <2 x bfloat> %308, i64 0, !dbg !71
  %312 = extractelement <2 x bfloat> %308, i64 1, !dbg !71
  %313 = fpext bfloat %309 to float, !dbg !72
  %314 = fpext bfloat %310 to float, !dbg !72
  %315 = fpext bfloat %311 to float, !dbg !72
  %316 = fpext bfloat %312 to float, !dbg !72
  %317 = fmul float %302, %313, !dbg !73
  %318 = fmul float %302, %314, !dbg !73
  %319 = fmul float %302, %315, !dbg !73
  %320 = fmul float %302, %316, !dbg !73
  %321 = tail call float @llvm.nvvm.round.f(float %317) #4, !dbg !74
  %322 = tail call float @llvm.nvvm.round.f(float %318) #4, !dbg !74
  %323 = tail call float @llvm.nvvm.round.f(float %319) #4, !dbg !74
  %324 = tail call float @llvm.nvvm.round.f(float %320) #4, !dbg !74
  %325 = insertelement <4 x float> poison, float %321, i64 0, !dbg !75
  %326 = insertelement <4 x float> %325, float %322, i64 1, !dbg !75
  %327 = insertelement <4 x float> %326, float %323, i64 2, !dbg !75
  %328 = insertelement <4 x float> %327, float %324, i64 3, !dbg !75
  %329 = fcmp ogt <4 x float> %328, splat (float -1.270000e+02), !dbg !75
  %330 = fcmp uno <4 x float> %328, zeroinitializer, !dbg !77
  %331 = or <4 x i1> %329, %330, !dbg !78
  %332 = select <4 x i1> %331, <4 x float> %328, <4 x float> splat (float -1.270000e+02), !dbg !79
  %333 = fcmp olt <4 x float> %332, splat (float 1.270000e+02), !dbg !80
  %334 = fcmp uno <4 x float> %332, zeroinitializer, !dbg !82
  %335 = or <4 x i1> %333, %334, !dbg !83
  %336 = fptosi <4 x float> %332 to <4 x i8>, !dbg !84
  %337 = select <4 x i1> %335, <4 x i8> %336, <4 x i8> splat (i8 127), !dbg !85
  %338 = add i32 %13, %303, !dbg !86
  %339 = sext i32 %338 to i64, !dbg !87
  %340 = getelementptr i8, ptr addrspace(1) %3, i64 %339, !dbg !87
  %341 = bitcast <4 x i8> %337 to i32, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %341, ptr addrspace(1) %340, i1 %9) #4, !dbg !88
  %342 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %45) #4, !dbg !71
  %343 = extractvalue { i32, i32 } %342, 0, !dbg !71
  %344 = bitcast i32 %343 to <2 x bfloat>, !dbg !71
  %345 = extractvalue { i32, i32 } %342, 1, !dbg !71
  %346 = bitcast i32 %345 to <2 x bfloat>, !dbg !71
  %347 = extractelement <2 x bfloat> %344, i64 0, !dbg !71
  %348 = extractelement <2 x bfloat> %344, i64 1, !dbg !71
  %349 = extractelement <2 x bfloat> %346, i64 0, !dbg !71
  %350 = extractelement <2 x bfloat> %346, i64 1, !dbg !71
  %351 = fpext bfloat %347 to float, !dbg !72
  %352 = fpext bfloat %348 to float, !dbg !72
  %353 = fpext bfloat %349 to float, !dbg !72
  %354 = fpext bfloat %350 to float, !dbg !72
  %355 = fmul float %302, %351, !dbg !73
  %356 = fmul float %302, %352, !dbg !73
  %357 = fmul float %302, %353, !dbg !73
  %358 = fmul float %302, %354, !dbg !73
  %359 = tail call float @llvm.nvvm.round.f(float %355) #4, !dbg !74
  %360 = tail call float @llvm.nvvm.round.f(float %356) #4, !dbg !74
  %361 = tail call float @llvm.nvvm.round.f(float %357) #4, !dbg !74
  %362 = tail call float @llvm.nvvm.round.f(float %358) #4, !dbg !74
  %363 = insertelement <4 x float> poison, float %359, i64 0, !dbg !75
  %364 = insertelement <4 x float> %363, float %360, i64 1, !dbg !75
  %365 = insertelement <4 x float> %364, float %361, i64 2, !dbg !75
  %366 = insertelement <4 x float> %365, float %362, i64 3, !dbg !75
  %367 = fcmp ogt <4 x float> %366, splat (float -1.270000e+02), !dbg !75
  %368 = fcmp uno <4 x float> %366, zeroinitializer, !dbg !77
  %369 = or <4 x i1> %367, %368, !dbg !78
  %370 = select <4 x i1> %369, <4 x float> %366, <4 x float> splat (float -1.270000e+02), !dbg !79
  %371 = fcmp olt <4 x float> %370, splat (float 1.270000e+02), !dbg !80
  %372 = fcmp uno <4 x float> %370, zeroinitializer, !dbg !82
  %373 = or <4 x i1> %371, %372, !dbg !83
  %374 = fptosi <4 x float> %370 to <4 x i8>, !dbg !84
  %375 = select <4 x i1> %373, <4 x i8> %374, <4 x i8> splat (i8 127), !dbg !85
  %376 = add i32 %39, %303, !dbg !86
  %377 = sext i32 %376 to i64, !dbg !87
  %378 = getelementptr i8, ptr addrspace(1) %3, i64 %377, !dbg !87
  %379 = bitcast <4 x i8> %375 to i32, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %378, i1 %45) #4, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 38, scope: !6)
!13 = !DILocation(line: 31, column: 40, scope: !6)
!14 = !DILocation(line: 37, column: 59, scope: !6)
!15 = !DILocation(line: 37, column: 51, scope: !6)
!16 = !DILocation(line: 37, column: 34, scope: !6)
!17 = !DILocation(line: 37, column: 83, scope: !6)
!18 = !DILocation(line: 37, column: 144, scope: !6)
!19 = !DILocation(line: 40, column: 48, scope: !6)
!20 = !DILocation(line: 42, column: 48, scope: !6)
!21 = !DILocation(line: 32, column: 31, scope: !6)
!22 = !DILocation(line: 33, column: 29, scope: !6)
!23 = !DILocation(line: 37, column: 91, scope: !6)
!24 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 39, column: 45, scope: !6)
!28 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 41, column: 45, scope: !6)
!33 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !32)
!34 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !32)
!35 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !32)
!36 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!38 = !DILocation(line: 43, column: 38, scope: !6)
!39 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 110, column: 29, scope: !25, inlinedAt: !38)
!43 = !DILocation(line: 115, column: 29, scope: !25, inlinedAt: !44)
!44 = !DILocation(line: 44, column: 38, scope: !6)
!45 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !44)
!49 = !DILocation(line: 45, column: 25, scope: !6)
!50 = !DILocation(line: 45, column: 36, scope: !6)
!51 = !DILocation(line: 46, column: 25, scope: !6)
!52 = !DILocation(line: 46, column: 36, scope: !6)
!53 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !54)
!54 = !DILocation(line: 55, column: 44, scope: !6)
!55 = !DILocation(line: 56, column: 16, scope: !6)
!56 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !57)
!57 = !DILocation(line: 57, column: 45, scope: !6)
!58 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 45, scope: !6)
!60 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !59)
!61 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !59)
!62 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !59)
!63 = !DILocation(line: 60, column: 24, scope: !6)
!64 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !65)
!65 = !DILocation(line: 63, column: 46, scope: !6)
!66 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !65)
!67 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !65)
!68 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !65)
!69 = !DILocation(line: 66, column: 25, scope: !6)
!70 = !DILocation(line: 78, column: 41, scope: !6)
!71 = !DILocation(line: 53, column: 83, scope: !6)
!72 = !DILocation(line: 53, column: 145, scope: !6)
!73 = !DILocation(line: 69, column: 23, scope: !6)
!74 = !DILocation(line: 70, column: 36, scope: !6)
!75 = !DILocation(line: 102, column: 15, scope: !25, inlinedAt: !76)
!76 = !DILocation(line: 73, column: 46, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !25, inlinedAt: !76)
!78 = !DILocation(line: 104, column: 16, scope: !25, inlinedAt: !76)
!79 = !DILocation(line: 105, column: 29, scope: !25, inlinedAt: !76)
!80 = !DILocation(line: 94, column: 15, scope: !25, inlinedAt: !81)
!81 = !DILocation(line: 75, column: 46, scope: !6)
!82 = !DILocation(line: 96, column: 21, scope: !25, inlinedAt: !81)
!83 = !DILocation(line: 96, column: 16, scope: !25, inlinedAt: !81)
!84 = !DILocation(line: 77, column: 25, scope: !6)
!85 = !DILocation(line: 97, column: 29, scope: !25, inlinedAt: !81)
!86 = !DILocation(line: 78, column: 36, scope: !6)
!87 = !DILocation(line: 78, column: 29, scope: !6)
!88 = !DILocation(line: 78, column: 53, scope: !6)
!89 = !DILocation(line: 47, column: 4, scope: !6)
