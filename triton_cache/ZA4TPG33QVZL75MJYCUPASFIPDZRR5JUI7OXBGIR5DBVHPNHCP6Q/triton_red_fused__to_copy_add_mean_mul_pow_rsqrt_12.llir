; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 3, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 6, !dbg !11
  %15 = and i32 %14, 7, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, 512, !dbg !13
  %18 = shl i32 %13, 3, !dbg !14
  %19 = and i32 %18, 504, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %21 = or disjoint i32 %20, %19
  %22 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !16
  %23 = shufflevector <8 x i1> %22, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %24, !dbg !17

24:                                               ; preds = %10, %24
  %25 = phi i32 [ 0, %10 ], [ %164, %24 ]
  %26 = phi <8 x float> [ zeroinitializer, %10 ], [ %135, %24 ]
  %27 = or i32 %21, %25, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %17) #5, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !20
  %39 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #5, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %44 = bitcast i32 %43 to <2 x bfloat>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !22
  %49 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %17) #5, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !24
  %59 = getelementptr bfloat, ptr addrspace(1) %3, i64 %28, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %17) #5, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !26
  %69 = getelementptr bfloat, ptr addrspace(1) %4, i64 %28, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %69, i1 %17) #5, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %74 = bitcast i32 %73 to <2 x bfloat>, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %78 = bitcast i32 %77 to <2 x bfloat>, !dbg !28
  %79 = shufflevector <2 x bfloat> %32, <2 x bfloat> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %80 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %81 = shufflevector <8 x bfloat> %79, <8 x bfloat> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %82 = shufflevector <2 x bfloat> %36, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %83 = shufflevector <8 x bfloat> %81, <8 x bfloat> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %84 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %85 = shufflevector <8 x bfloat> %83, <8 x bfloat> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %86 = shufflevector <2 x bfloat> %38, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %87 = shufflevector <8 x bfloat> %85, <8 x bfloat> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %88 = fpext <8 x bfloat> %87 to <8 x float>, !dbg !29
  %89 = shufflevector <2 x bfloat> %42, <2 x bfloat> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %90 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %91 = shufflevector <8 x bfloat> %89, <8 x bfloat> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !30
  %92 = shufflevector <2 x bfloat> %46, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %93 = shufflevector <8 x bfloat> %91, <8 x bfloat> %92, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !30
  %94 = shufflevector <2 x bfloat> %48, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %95 = shufflevector <8 x bfloat> %93, <8 x bfloat> %94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !30
  %96 = shufflevector <2 x bfloat> %48, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %97 = shufflevector <8 x bfloat> %95, <8 x bfloat> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !30
  %98 = fpext <8 x bfloat> %97 to <8 x float>, !dbg !30
  %99 = shufflevector <2 x bfloat> %52, <2 x bfloat> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %100 = shufflevector <2 x bfloat> %56, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %101 = shufflevector <8 x bfloat> %99, <8 x bfloat> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %102 = shufflevector <2 x bfloat> %56, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %103 = shufflevector <8 x bfloat> %101, <8 x bfloat> %102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %104 = shufflevector <2 x bfloat> %58, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %105 = shufflevector <8 x bfloat> %103, <8 x bfloat> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %106 = shufflevector <2 x bfloat> %58, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %107 = shufflevector <8 x bfloat> %105, <8 x bfloat> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %108 = fpext <8 x bfloat> %107 to <8 x float>, !dbg !31
  %109 = shufflevector <2 x bfloat> %62, <2 x bfloat> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %110 = shufflevector <2 x bfloat> %66, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %111 = shufflevector <8 x bfloat> %109, <8 x bfloat> %110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %112 = shufflevector <2 x bfloat> %66, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %113 = shufflevector <8 x bfloat> %111, <8 x bfloat> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %114 = shufflevector <2 x bfloat> %68, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %115 = shufflevector <8 x bfloat> %113, <8 x bfloat> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %116 = shufflevector <2 x bfloat> %68, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %117 = shufflevector <8 x bfloat> %115, <8 x bfloat> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %118 = fpext <8 x bfloat> %117 to <8 x float>, !dbg !32
  %119 = shufflevector <2 x bfloat> %72, <2 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %120 = shufflevector <2 x bfloat> %76, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %121 = shufflevector <8 x bfloat> %119, <8 x bfloat> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !33
  %122 = shufflevector <2 x bfloat> %76, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %123 = shufflevector <8 x bfloat> %121, <8 x bfloat> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !33
  %124 = shufflevector <2 x bfloat> %78, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %125 = shufflevector <8 x bfloat> %123, <8 x bfloat> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !33
  %126 = shufflevector <2 x bfloat> %78, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %127 = shufflevector <8 x bfloat> %125, <8 x bfloat> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !33
  %128 = fpext <8 x bfloat> %127 to <8 x float>, !dbg !33
  %129 = fadd <8 x float> %88, %98, !dbg !34
  %130 = fadd <8 x float> %129, %108, !dbg !35
  %131 = fadd <8 x float> %130, %118, !dbg !36
  %132 = fadd <8 x float> %131, %128, !dbg !37
  %133 = fmul <8 x float> %132, %132, !dbg !38
  %134 = fadd <8 x float> %26, %133, !dbg !39
  %135 = select <8 x i1> %23, <8 x float> %134, <8 x float> %26, !dbg !16
  %136 = extractelement <8 x float> %132, i64 0, !dbg !40
  %137 = fptrunc float %136 to bfloat, !dbg !40
  %138 = extractelement <8 x float> %132, i64 1, !dbg !40
  %139 = fptrunc float %138 to bfloat, !dbg !40
  %140 = extractelement <8 x float> %132, i64 2, !dbg !40
  %141 = fptrunc float %140 to bfloat, !dbg !40
  %142 = extractelement <8 x float> %132, i64 3, !dbg !40
  %143 = fptrunc float %142 to bfloat, !dbg !40
  %144 = extractelement <8 x float> %132, i64 4, !dbg !40
  %145 = fptrunc float %144 to bfloat, !dbg !40
  %146 = extractelement <8 x float> %132, i64 5, !dbg !40
  %147 = fptrunc float %146 to bfloat, !dbg !40
  %148 = extractelement <8 x float> %132, i64 6, !dbg !40
  %149 = fptrunc float %148 to bfloat, !dbg !40
  %150 = extractelement <8 x float> %132, i64 7, !dbg !40
  %151 = fptrunc float %150 to bfloat, !dbg !40
  %152 = insertelement <2 x bfloat> poison, bfloat %137, i64 0, !dbg !40
  %153 = insertelement <2 x bfloat> %152, bfloat %139, i64 1, !dbg !40
  %154 = bitcast <2 x bfloat> %153 to i32, !dbg !40
  %155 = insertelement <2 x bfloat> poison, bfloat %141, i64 0, !dbg !40
  %156 = insertelement <2 x bfloat> %155, bfloat %143, i64 1, !dbg !40
  %157 = bitcast <2 x bfloat> %156 to i32, !dbg !40
  %158 = insertelement <2 x bfloat> poison, bfloat %145, i64 0, !dbg !40
  %159 = insertelement <2 x bfloat> %158, bfloat %147, i64 1, !dbg !40
  %160 = bitcast <2 x bfloat> %159 to i32, !dbg !40
  %161 = insertelement <2 x bfloat> poison, bfloat %149, i64 0, !dbg !40
  %162 = insertelement <2 x bfloat> %161, bfloat %151, i64 1, !dbg !40
  %163 = bitcast <2 x bfloat> %162 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %157, i32 %160, i32 %163, ptr addrspace(1) %29, i1 %17) #5, !dbg !40
  %164 = add nuw nsw i32 %25, 512, !dbg !17
  %165 = icmp samesign ult i32 %25, 3584, !dbg !17
  br i1 %165, label %24, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %24
  %166 = lshr i32 %13, 5, !dbg !11
  %167 = and i32 %13, 31, !dbg !14
  %168 = and i32 %13, 511, !dbg !14
  %shift = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %169 = fadd <8 x float> %135, %shift, !dbg !41
  %shift52 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %170 = fadd <8 x float> %shift52, %169, !dbg !41
  %shift53 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %171 = fadd <8 x float> %shift53, %170, !dbg !41
  %shift54 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %172 = fadd <8 x float> %shift54, %171, !dbg !41
  %shift55 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %173 = fadd <8 x float> %shift55, %172, !dbg !41
  %shift56 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %174 = fadd <8 x float> %shift56, %173, !dbg !41
  %shift57 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %175 = fadd <8 x float> %shift57, %174, !dbg !41
  %176 = extractelement <8 x float> %175, i64 0, !dbg !41
  %177 = bitcast float %176 to i32, !dbg !46
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !46
  %179 = bitcast i32 %178 to float, !dbg !46
  %180 = fadd float %176, %179, !dbg !41
  %181 = bitcast float %180 to i32, !dbg !46
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !46
  %183 = bitcast i32 %182 to float, !dbg !46
  %184 = fadd float %180, %183, !dbg !41
  %185 = bitcast float %184 to i32, !dbg !46
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = fadd float %184, %187, !dbg !41
  %189 = bitcast float %188 to i32, !dbg !46
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = fadd float %188, %191, !dbg !41
  %193 = bitcast float %192 to i32, !dbg !46
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !46
  %195 = bitcast i32 %194 to float, !dbg !46
  %196 = fadd float %192, %195, !dbg !41
  %197 = and i32 %166, 1, !dbg !46
  %198 = icmp eq i32 %167, 0, !dbg !46
  %199 = shl nuw nsw i32 %15, 1, !dbg !46
  %200 = or disjoint i32 %199, %197, !dbg !46
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !46
  %202 = bitcast float %196 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 %198) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %203 = icmp slt i32 %13, 16, !dbg !46
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !46
  %205 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %204, i1 %203) #5, !dbg !46
  %206 = bitcast i32 %205 to float, !dbg !46
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 1, i32 31), !dbg !46
  %208 = bitcast i32 %207 to float, !dbg !46
  %209 = fadd float %206, %208, !dbg !41
  %210 = and i32 %13, 1, !dbg !46
  %211 = icmp eq i32 %210, 0, !dbg !46
  %212 = and i1 %203, %211, !dbg !46
  %213 = bitcast float %209 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %213, i1 %212) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !46
  %215 = load float, ptr addrspace(3) %214, align 8, !dbg !46
  %216 = tail call float @llvm.nvvm.div.full(float %215, float 4.096000e+03), !dbg !47
  %217 = fadd float %216, 0x3EB0C6F7A0000000, !dbg !48
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i28 = icmp eq i32 %225, 0, !dbg !49
  br i1 %.not.i28, label %228, label %226, !dbg !49

226:                                              ; preds = %__nv_rsqrtf.exit
  %227 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %217), !dbg !49
  br label %__nv_rsqrtf.exit30, !dbg !49

228:                                              ; preds = %__nv_rsqrtf.exit
  %229 = tail call float @llvm.nvvm.rsqrt.approx.f(float %217), !dbg !49
  br label %__nv_rsqrtf.exit30, !dbg !49

__nv_rsqrtf.exit30:                               ; preds = %226, %228
  %.0.i29 = phi float [ %227, %226 ], [ %229, %228 ], !dbg !49
  %230 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %168
  %231 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %232 = or disjoint i32 %19, 4
  %233 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %232
  %234 = zext nneg i32 %168 to i64, !dbg !50
  %235 = getelementptr inbounds nuw i8, ptr addrspace(3) %231, i32 8
  %236 = getelementptr inbounds nuw i8, ptr addrspace(3) %233, i32 8
  %237 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !51
  %238 = shufflevector <2 x float> %237, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !51
  br label %239, !dbg !50

239:                                              ; preds = %__nv_rsqrtf.exit30, %239
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit30 ], [ %indvars.iv.next, %239 ]
  %240 = or disjoint i64 %indvars.iv, %234, !dbg !52
  %241 = getelementptr bfloat, ptr addrspace(1) %5, i64 %240, !dbg !53
  %242 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %241, i1 true) #5, !dbg !54
  %243 = bitcast i16 %242 to bfloat, !dbg !54
  %244 = fpext bfloat %243 to float, !dbg !55
  %245 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !56
  %246 = or i32 %21, %245, !dbg !56
  %247 = sext i32 %246 to i64, !dbg !57
  %248 = getelementptr bfloat, ptr addrspace(1) %0, i64 %247, !dbg !57
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %248, i1 %17) #5, !dbg !58
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !58
  %251 = bitcast i32 %250 to <2 x bfloat>, !dbg !58
  %252 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !58
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !58
  %254 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !58
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !58
  %256 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !58
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %258 = bitcast float %244 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %258, i1 true) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %259 = getelementptr bfloat, ptr addrspace(1) %6, i64 %247, !dbg !60
  %260 = fpext <2 x bfloat> %251 to <2 x float>, !dbg !61
  %261 = fmul <2 x float> %238, %260, !dbg !51
  %262 = load <2 x float>, ptr addrspace(3) %231, align 16, !dbg !59
  %263 = fmul <2 x float> %262, %261, !dbg !59
  %264 = fptrunc <2 x float> %263 to <2 x bfloat>, !dbg !62
  %265 = fpext <2 x bfloat> %253 to <2 x float>, !dbg !61
  %266 = fmul <2 x float> %238, %265, !dbg !51
  %267 = load <2 x float>, ptr addrspace(3) %235, align 8, !dbg !59
  %268 = fmul <2 x float> %267, %266, !dbg !59
  %269 = fptrunc <2 x float> %268 to <2 x bfloat>, !dbg !62
  %270 = fpext <2 x bfloat> %255 to <2 x float>, !dbg !61
  %271 = fmul <2 x float> %238, %270, !dbg !51
  %272 = load <2 x float>, ptr addrspace(3) %233, align 16, !dbg !59
  %273 = fmul <2 x float> %271, %272, !dbg !59
  %274 = fptrunc <2 x float> %273 to <2 x bfloat>, !dbg !62
  %275 = fpext <2 x bfloat> %257 to <2 x float>, !dbg !61
  %276 = fmul <2 x float> %238, %275, !dbg !51
  %277 = load <2 x float>, ptr addrspace(3) %236, align 8, !dbg !59
  %278 = fmul <2 x float> %276, %277, !dbg !59
  %279 = fptrunc <2 x float> %278 to <2 x bfloat>, !dbg !62
  %280 = bitcast <2 x bfloat> %264 to i32, !dbg !62
  %281 = bitcast <2 x bfloat> %269 to i32, !dbg !62
  %282 = bitcast <2 x bfloat> %274 to i32, !dbg !62
  %283 = bitcast <2 x bfloat> %279 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %259, i1 %17) #5, !dbg !62
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !50
  %284 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !50
  br i1 %284, label %239, label %285, !dbg !50

285:                                              ; preds = %239
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjpigwcltwckftsm2iokvi3tj3yi6tt4h3mtdooifowgpvdbvexp.py", directory: "/tmp/torchinductor_root/jp")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 50, scope: !6)
!16 = !DILocation(line: 49, column: 50, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 45, scope: !6)
!19 = !DILocation(line: 36, column: 38, scope: !6)
!20 = !DILocation(line: 36, column: 55, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 39, column: 34, scope: !6)
!26 = !DILocation(line: 39, column: 51, scope: !6)
!27 = !DILocation(line: 40, column: 34, scope: !6)
!28 = !DILocation(line: 40, column: 51, scope: !6)
!29 = !DILocation(line: 36, column: 117, scope: !6)
!30 = !DILocation(line: 37, column: 113, scope: !6)
!31 = !DILocation(line: 38, column: 113, scope: !6)
!32 = !DILocation(line: 39, column: 113, scope: !6)
!33 = !DILocation(line: 40, column: 113, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 42, column: 22, scope: !6)
!36 = !DILocation(line: 43, column: 22, scope: !6)
!37 = !DILocation(line: 44, column: 22, scope: !6)
!38 = !DILocation(line: 46, column: 23, scope: !6)
!39 = !DILocation(line: 48, column: 25, scope: !6)
!40 = !DILocation(line: 50, column: 55, scope: !6)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !6, file: !43, discriminator: 0)
!45 = !DILocation(line: 51, column: 27, scope: !6)
!46 = !DILocation(line: 286, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 62, column: 25, scope: !6)
!48 = !DILocation(line: 64, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 32, scope: !6)
!50 = !DILocation(line: 52, column: 40, scope: !6)
!51 = !DILocation(line: 66, column: 24, scope: !6)
!52 = !DILocation(line: 53, column: 31, scope: !6)
!53 = !DILocation(line: 58, column: 35, scope: !6)
!54 = !DILocation(line: 58, column: 42, scope: !6)
!55 = !DILocation(line: 58, column: 95, scope: !6)
!56 = !DILocation(line: 59, column: 46, scope: !6)
!57 = !DILocation(line: 59, column: 39, scope: !6)
!58 = !DILocation(line: 59, column: 56, scope: !6)
!59 = !DILocation(line: 68, column: 24, scope: !6)
!60 = !DILocation(line: 69, column: 29, scope: !6)
!61 = !DILocation(line: 59, column: 118, scope: !6)
!62 = !DILocation(line: 69, column: 53, scope: !6)
!63 = !DILocation(line: 52, column: 4, scope: !6)
