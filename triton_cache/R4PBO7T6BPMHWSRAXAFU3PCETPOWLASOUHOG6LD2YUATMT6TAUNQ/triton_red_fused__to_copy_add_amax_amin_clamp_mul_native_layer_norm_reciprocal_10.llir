; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
.peel.begin:
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %17 = shl i32 %16, 6, !dbg !10
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %19 = and i32 %18, 64, !dbg !11
  %20 = lshr i32 %18, 1, !dbg !11
  %21 = and i32 %20, 63, !dbg !11
  %22 = or disjoint i32 %21, %17, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = shl i32 %18, 2, !dbg !14
  %25 = and i32 %24, 4, !dbg !14
  %26 = sext i32 %22 to i64, !dbg !15
  %27 = getelementptr bfloat, ptr addrspace(1) %4, i64 %26, !dbg !15
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %23) #5, !dbg !16
  %32 = bitcast i16 %31 to bfloat, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %5, i64 %26, !dbg !17
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %37 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %33, i1 %23) #5, !dbg !18
  %38 = bitcast i16 %37 to bfloat, !dbg !18
  %39 = mul i32 %22, 3072, !dbg !19
  %.inv = fcmp oge bfloat %32, 0xR0000, !dbg !20
  %40 = select i1 %.inv, bfloat 0xR0000, bfloat %32, !dbg !20
  %41 = fpext bfloat %40 to float, !dbg !20
  %42 = fsub float 0.000000e+00, %41, !dbg !24
  %.inv5 = fcmp ole bfloat %38, 0xR0000, !dbg !25
  %43 = select i1 %.inv5, bfloat 0xR0000, bfloat %38, !dbg !25
  %44 = fpext bfloat %43 to float, !dbg !25
  %45 = fcmp ogt float %42, %44, !dbg !27
  %46 = fcmp uno float %42, 0.000000e+00, !dbg !29
  %47 = or i1 %46, %45, !dbg !30
  %48 = select i1 %47, float %42, float %44, !dbg !31
  %49 = fmul float %48, 0x3F80204080000000, !dbg !32
  %50 = fcmp ogt float %49, 0x3EE4F8B580000000, !dbg !33
  %51 = fcmp uno float %49, 0.000000e+00, !dbg !35
  %52 = or i1 %50, %51, !dbg !36
  %53 = select i1 %52, float %49, float 0x3EE4F8B580000000, !dbg !37
  %54 = zext nneg i32 %25 to i64, !dbg !38
  %55 = insertelement <4 x i1> poison, i1 %23, i64 0, !dbg !39
  %56 = shufflevector <4 x i1> %55, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  %57 = insertelement <4 x float> poison, float %53, i64 0, !dbg !40
  %58 = shufflevector <4 x float> %57, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %59 = or disjoint i32 %39, %25, !dbg !41
  %60 = sext i32 %59 to i64, !dbg !42
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %60, !dbg !42
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %61, i1 %23) #5, !dbg !43
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !43
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !43
  %65 = extractvalue { i32, i32 } %62, 1, !dbg !43
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !43
  %67 = or disjoint i64 %54, 6144, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !45
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %68, i1 true) #5, !dbg !46
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !46
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !46
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !46
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !46
  %74 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !47
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %74, i1 true) #5, !dbg !48
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !48
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !48
  %78 = extractvalue { i32, i32 } %75, 1, !dbg !48
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !48
  %80 = getelementptr i32, ptr addrspace(1) %3, i64 %60, !dbg !49
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %23) #5, !dbg !50
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !50
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !50
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !50
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !50
  %86 = getelementptr bfloat, ptr addrspace(1) %6, i64 %54, !dbg !51
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %86, i1 true) #5, !dbg !52
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !52
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !52
  %90 = extractvalue { i32, i32 } %87, 1, !dbg !52
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !52
  %92 = getelementptr bfloat, ptr addrspace(1) %7, i64 %54, !dbg !53
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %92, i1 true) #5, !dbg !54
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !54
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !54
  %96 = extractvalue { i32, i32 } %93, 1, !dbg !54
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !54
  %98 = shufflevector <2 x bfloat> %64, <2 x bfloat> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %99 = fpext <4 x bfloat> %98 to <4 x float>, !dbg !55
  %100 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !46
  %101 = insertelement <4 x i32> %100, i32 %71, i64 1, !dbg !46
  %102 = insertelement <4 x i32> %101, i32 %72, i64 2, !dbg !46
  %103 = insertelement <4 x i32> %102, i32 %73, i64 3, !dbg !46
  %104 = bitcast <4 x i32> %103 to <4 x float>, !dbg !46
  %105 = shufflevector <2 x bfloat> %77, <2 x bfloat> %79, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %106 = fpext <4 x bfloat> %105 to <4 x float>, !dbg !56
  %107 = shufflevector <2 x bfloat> %89, <2 x bfloat> %91, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %108 = fpext <4 x bfloat> %107 to <4 x float>, !dbg !57
  %109 = shufflevector <2 x bfloat> %95, <2 x bfloat> %97, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %110 = fpext <4 x bfloat> %109 to <4 x float>, !dbg !58
  %111 = fadd <4 x float> %104, %106, !dbg !59
  %112 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !60
  %113 = insertelement <4 x i32> %112, i32 %83, i64 1, !dbg !60
  %114 = insertelement <4 x i32> %113, i32 %84, i64 2, !dbg !60
  %115 = insertelement <4 x i32> %114, i32 %85, i64 3, !dbg !60
  %116 = sitofp <4 x i32> %115 to <4 x float>, !dbg !60
  %117 = fmul <4 x float> %58, %116, !dbg !40
  %118 = fmul <4 x float> %117, %108, !dbg !61
  %119 = fadd <4 x float> %118, %110, !dbg !62
  %120 = fmul <4 x float> %111, %119, !dbg !63
  %121 = fadd <4 x float> %120, %99, !dbg !64
  %122 = select <4 x i1> %56, <4 x float> %121, <4 x float> zeroinitializer, !dbg !39
  %123 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %124 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %125 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %126 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %127 = getelementptr bfloat, ptr addrspace(1) %8, i64 %60, !dbg !66
  %128 = extractelement <4 x float> %121, i64 0, !dbg !67
  %129 = fptrunc float %128 to bfloat, !dbg !67
  %130 = extractelement <4 x float> %121, i64 1, !dbg !67
  %131 = fptrunc float %130 to bfloat, !dbg !67
  %132 = extractelement <4 x float> %121, i64 2, !dbg !67
  %133 = fptrunc float %132 to bfloat, !dbg !67
  %134 = extractelement <4 x float> %121, i64 3, !dbg !67
  %135 = fptrunc float %134 to bfloat, !dbg !67
  %136 = insertelement <2 x bfloat> poison, bfloat %129, i64 0, !dbg !67
  %137 = insertelement <2 x bfloat> %136, bfloat %131, i64 1, !dbg !67
  %138 = bitcast <2 x bfloat> %137 to i32, !dbg !67
  %139 = insertelement <2 x bfloat> poison, bfloat %133, i64 0, !dbg !67
  %140 = insertelement <2 x bfloat> %139, bfloat %135, i64 1, !dbg !67
  %141 = bitcast <2 x bfloat> %140 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %141, ptr addrspace(1) %127, i1 %23) #5, !dbg !67
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %indvars.iv = phi i64 [ 8, %.peel.begin ], [ %indvars.iv.next, %._crit_edge ]
  %142 = phi float [ %123, %.peel.begin ], [ %258, %._crit_edge ]
  %143 = phi float [ %124, %.peel.begin ], [ %259, %._crit_edge ]
  %144 = phi float [ %125, %.peel.begin ], [ %260, %._crit_edge ]
  %145 = phi float [ %126, %.peel.begin ], [ %261, %._crit_edge ]
  %146 = phi float [ 0.000000e+00, %.peel.begin ], [ %254, %._crit_edge ]
  %147 = phi float [ 0.000000e+00, %.peel.begin ], [ %255, %._crit_edge ]
  %148 = phi float [ 0.000000e+00, %.peel.begin ], [ %256, %._crit_edge ]
  %149 = phi float [ 0.000000e+00, %.peel.begin ], [ %257, %._crit_edge ]
  %150 = phi <4 x float> [ %122, %.peel.begin ], [ %253, %._crit_edge ]
  %151 = or disjoint i64 %indvars.iv, %54, !dbg !68
  %152 = trunc nuw nsw i64 %151 to i32, !dbg !41
  %153 = add i32 %39, %152, !dbg !41
  %154 = sext i32 %153 to i64, !dbg !42
  %155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !42
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %155, i1 %23) #5, !dbg !43
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !43
  %158 = bitcast i32 %157 to <2 x bfloat>, !dbg !43
  %159 = extractvalue { i32, i32 } %156, 1, !dbg !43
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !43
  %161 = add nuw nsw i64 %151, 6144, !dbg !44
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !45
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %162, i1 true) #5, !dbg !46
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !46
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !46
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !46
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !46
  %168 = getelementptr bfloat, ptr addrspace(1) %2, i64 %161, !dbg !47
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %168, i1 true) #5, !dbg !48
  %170 = extractvalue { i32, i32 } %169, 0, !dbg !48
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !48
  %172 = extractvalue { i32, i32 } %169, 1, !dbg !48
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !48
  %174 = getelementptr i32, ptr addrspace(1) %3, i64 %154, !dbg !49
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %23) #5, !dbg !50
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !50
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !50
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !50
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !50
  %180 = getelementptr bfloat, ptr addrspace(1) %6, i64 %151, !dbg !51
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %180, i1 true) #5, !dbg !52
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !52
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !52
  %184 = extractvalue { i32, i32 } %181, 1, !dbg !52
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !52
  %186 = getelementptr bfloat, ptr addrspace(1) %7, i64 %151, !dbg !53
  %187 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %186, i1 true) #5, !dbg !54
  %188 = extractvalue { i32, i32 } %187, 0, !dbg !54
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !54
  %190 = extractvalue { i32, i32 } %187, 1, !dbg !54
  %191 = bitcast i32 %190 to <2 x bfloat>, !dbg !54
  %192 = shufflevector <2 x bfloat> %158, <2 x bfloat> %160, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !55
  %193 = fpext <4 x bfloat> %192 to <4 x float>, !dbg !55
  %194 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !46
  %195 = insertelement <4 x i32> %194, i32 %165, i64 1, !dbg !46
  %196 = insertelement <4 x i32> %195, i32 %166, i64 2, !dbg !46
  %197 = insertelement <4 x i32> %196, i32 %167, i64 3, !dbg !46
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !46
  %199 = shufflevector <2 x bfloat> %171, <2 x bfloat> %173, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  %200 = fpext <4 x bfloat> %199 to <4 x float>, !dbg !56
  %201 = shufflevector <2 x bfloat> %183, <2 x bfloat> %185, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !57
  %202 = fpext <4 x bfloat> %201 to <4 x float>, !dbg !57
  %203 = shufflevector <2 x bfloat> %189, <2 x bfloat> %191, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %204 = fpext <4 x bfloat> %203 to <4 x float>, !dbg !58
  %205 = fadd <4 x float> %198, %200, !dbg !59
  %206 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !60
  %207 = insertelement <4 x i32> %206, i32 %177, i64 1, !dbg !60
  %208 = insertelement <4 x i32> %207, i32 %178, i64 2, !dbg !60
  %209 = insertelement <4 x i32> %208, i32 %179, i64 3, !dbg !60
  %210 = sitofp <4 x i32> %209 to <4 x float>, !dbg !60
  %211 = fmul <4 x float> %58, %210, !dbg !40
  %212 = fmul <4 x float> %211, %202, !dbg !61
  %213 = fadd <4 x float> %212, %204, !dbg !62
  %214 = fmul <4 x float> %205, %213, !dbg !63
  %215 = fadd <4 x float> %214, %193, !dbg !64
  %216 = fsub <4 x float> %215, %150, !dbg !69
  %217 = extractelement <4 x float> %216, i64 0, !dbg !69
  %218 = fsub <4 x float> %215, %150, !dbg !69
  %219 = extractelement <4 x float> %218, i64 1, !dbg !69
  %220 = fsub <4 x float> %215, %150, !dbg !69
  %221 = extractelement <4 x float> %220, i64 2, !dbg !69
  %222 = fsub <4 x float> %215, %150, !dbg !69
  %223 = extractelement <4 x float> %222, i64 3, !dbg !69
  %224 = fadd float %142, 1.000000e+00, !dbg !71
  %225 = fadd float %143, 1.000000e+00, !dbg !71
  %226 = fadd float %144, 1.000000e+00, !dbg !71
  %227 = fadd float %145, 1.000000e+00, !dbg !71
  %228 = tail call float @llvm.nvvm.div.full(float %217, float %224), !dbg !72
  %229 = tail call float @llvm.nvvm.div.full(float %219, float %225), !dbg !72
  %230 = tail call float @llvm.nvvm.div.full(float %221, float %226), !dbg !72
  %231 = tail call float @llvm.nvvm.div.full(float %223, float %227), !dbg !72
  %232 = insertelement <4 x float> poison, float %228, i64 0, !dbg !73
  %233 = insertelement <4 x float> %232, float %229, i64 1, !dbg !73
  %234 = insertelement <4 x float> %233, float %230, i64 2, !dbg !73
  %235 = insertelement <4 x float> %234, float %231, i64 3, !dbg !73
  %236 = fadd <4 x float> %150, %235, !dbg !73
  %237 = fsub <4 x float> %215, %236, !dbg !74
  %238 = fsub <4 x float> %215, %236, !dbg !74
  %239 = fsub <4 x float> %215, %236, !dbg !74
  %240 = fsub <4 x float> %215, %236, !dbg !74
  %241 = fmul <4 x float> %216, %237, !dbg !75
  %242 = extractelement <4 x float> %241, i64 0, !dbg !75
  %243 = fmul <4 x float> %218, %238, !dbg !75
  %244 = extractelement <4 x float> %243, i64 1, !dbg !75
  %245 = fmul <4 x float> %220, %239, !dbg !75
  %246 = extractelement <4 x float> %245, i64 2, !dbg !75
  %247 = fmul <4 x float> %222, %240, !dbg !75
  %248 = extractelement <4 x float> %247, i64 3, !dbg !75
  %249 = fadd float %146, %242, !dbg !76
  %250 = fadd float %147, %244, !dbg !76
  %251 = fadd float %148, %246, !dbg !76
  %252 = fadd float %149, %248, !dbg !76
  %253 = select <4 x i1> %56, <4 x float> %236, <4 x float> %150, !dbg !39
  %254 = select i1 %23, float %249, float %146, !dbg !77
  %255 = select i1 %23, float %250, float %147, !dbg !77
  %256 = select i1 %23, float %251, float %148, !dbg !77
  %257 = select i1 %23, float %252, float %149, !dbg !77
  %258 = select i1 %23, float %224, float %142, !dbg !65
  %259 = select i1 %23, float %225, float %143, !dbg !65
  %260 = select i1 %23, float %226, float %144, !dbg !65
  %261 = select i1 %23, float %227, float %145, !dbg !65
  %262 = getelementptr bfloat, ptr addrspace(1) %8, i64 %154, !dbg !66
  %263 = extractelement <4 x float> %215, i64 0, !dbg !67
  %264 = fptrunc float %263 to bfloat, !dbg !67
  %265 = extractelement <4 x float> %215, i64 1, !dbg !67
  %266 = fptrunc float %265 to bfloat, !dbg !67
  %267 = extractelement <4 x float> %215, i64 2, !dbg !67
  %268 = fptrunc float %267 to bfloat, !dbg !67
  %269 = extractelement <4 x float> %215, i64 3, !dbg !67
  %270 = fptrunc float %269 to bfloat, !dbg !67
  %271 = insertelement <2 x bfloat> poison, bfloat %264, i64 0, !dbg !67
  %272 = insertelement <2 x bfloat> %271, bfloat %266, i64 1, !dbg !67
  %273 = bitcast <2 x bfloat> %272 to i32, !dbg !67
  %274 = insertelement <2 x bfloat> poison, bfloat %268, i64 0, !dbg !67
  %275 = insertelement <2 x bfloat> %274, bfloat %270, i64 1, !dbg !67
  %276 = bitcast <2 x bfloat> %275 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %273, i32 %276, ptr addrspace(1) %262, i1 %23) #5, !dbg !67
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !38
  %277 = icmp samesign ult i64 %indvars.iv, 3064, !dbg !38
  br i1 %277, label %._crit_edge, label %__nv_rsqrtf.exit.loopexit, !dbg !38, !llvm.loop !78

__nv_rsqrtf.exit.loopexit:                        ; preds = %._crit_edge
  %278 = fadd float %254, %255, !dbg !11
  %279 = icmp eq i32 %19, 0, !dbg !11
  %280 = and i32 %18, 63, !dbg !11
  %281 = or disjoint i32 %17, %280, !dbg !12
  %282 = icmp slt i32 %281, 3600, !dbg !13
  %283 = extractelement <4 x float> %253, i64 0, !dbg !80
  %284 = extractelement <4 x float> %253, i64 1, !dbg !80
  %285 = fsub float %284, %283, !dbg !80
  %286 = fadd float %258, %259, !dbg !83
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !84
  %288 = tail call float @llvm.nvvm.div.full(float %259, float %286), !dbg !85
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !86
  %290 = fmul float %285, %289, !dbg !87
  %291 = fadd float %283, %290, !dbg !88
  %292 = fmul float %285, %285, !dbg !89
  %293 = fmul float %292, %258, !dbg !90
  %294 = fmul float %293, %289, !dbg !91
  %295 = fadd float %278, %294, !dbg !92
  %296 = extractelement <4 x float> %253, i64 2, !dbg !80
  %297 = fsub float %296, %291, !dbg !80
  %298 = fadd float %260, %286, !dbg !83
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !84
  %300 = tail call float @llvm.nvvm.div.full(float %260, float %298), !dbg !85
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !86
  %302 = fmul float %301, %297, !dbg !87
  %303 = fadd float %291, %302, !dbg !88
  %304 = fadd float %256, %295, !dbg !93
  %305 = fmul float %297, %297, !dbg !89
  %306 = fmul float %286, %305, !dbg !90
  %307 = fmul float %301, %306, !dbg !91
  %308 = fadd float %304, %307, !dbg !92
  %309 = extractelement <4 x float> %253, i64 3, !dbg !80
  %310 = fsub float %309, %303, !dbg !80
  %311 = fadd float %261, %298, !dbg !83
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !84
  %313 = tail call float @llvm.nvvm.div.full(float %261, float %311), !dbg !85
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !86
  %315 = fmul float %314, %310, !dbg !87
  %316 = fadd float %303, %315, !dbg !88
  %317 = fadd float %257, %308, !dbg !93
  %318 = fmul float %310, %310, !dbg !89
  %319 = fmul float %298, %318, !dbg !90
  %320 = fmul float %314, %319, !dbg !91
  %321 = fadd float %317, %320, !dbg !92
  %322 = bitcast float %316 to i32, !dbg !94
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !94
  %324 = bitcast i32 %323 to float, !dbg !94
  %325 = bitcast float %321 to i32, !dbg !94
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !94
  %327 = bitcast i32 %326 to float, !dbg !94
  %328 = bitcast float %311 to i32, !dbg !94
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !94
  %330 = bitcast i32 %329 to float, !dbg !94
  %331 = fsub float %324, %316, !dbg !80
  %332 = fadd float %311, %330, !dbg !83
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !84
  %334 = tail call float @llvm.nvvm.div.full(float %330, float %332), !dbg !85
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !86
  %336 = fmul float %335, %331, !dbg !87
  %337 = fadd float %316, %336, !dbg !88
  %338 = fadd float %321, %327, !dbg !93
  %339 = fmul float %331, %331, !dbg !89
  %340 = fmul float %311, %339, !dbg !90
  %341 = fmul float %335, %340, !dbg !91
  %342 = fadd float %338, %341, !dbg !92
  %343 = tail call float @llvm.nvvm.div.full(float %342, float 3.072000e+03), !dbg !95
  %344 = fadd float %343, 0x3EB0C6F7A0000000, !dbg !96
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !97
  %.not.i21 = icmp eq i32 %348, 0, !dbg !97
  br i1 %.not.i21, label %351, label %349, !dbg !97

349:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %350 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %344), !dbg !97
  br label %__nv_rsqrtf.exit23, !dbg !97

351:                                              ; preds = %__nv_rsqrtf.exit.loopexit
  %352 = tail call float @llvm.nvvm.rsqrt.approx.f(float %344), !dbg !97
  br label %__nv_rsqrtf.exit23, !dbg !97

__nv_rsqrtf.exit23:                               ; preds = %349, %351
  %.0.i22 = phi float [ %350, %349 ], [ %352, %351 ], !dbg !97
  %353 = insertelement <2 x i1> poison, i1 %23, i64 0, !dbg !98
  %354 = shufflevector <2 x i1> %353, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !98
  %355 = insertelement <2 x float> poison, float %.0.i22, i64 0, !dbg !99
  %356 = shufflevector <2 x float> %355, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !99
  %357 = insertelement <2 x float> poison, float %337, i64 0, !dbg !100
  %358 = shufflevector <2 x float> %357, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !100
  br label %359, !dbg !101

359:                                              ; preds = %__nv_rsqrtf.exit23, %359
  %indvars.iv47 = phi i64 [ 0, %__nv_rsqrtf.exit23 ], [ %indvars.iv.next48, %359 ]
  %360 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit23 ], [ %450, %359 ]
  %361 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit23 ], [ %451, %359 ]
  %362 = phi <2 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit23 ], [ %422, %359 ]
  %363 = phi <4 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit23 ], [ %456, %359 ]
  %364 = or disjoint i64 %indvars.iv47, %54, !dbg !102
  %365 = trunc nuw nsw i64 %364 to i32, !dbg !103
  %366 = add i32 %39, %365, !dbg !103
  %367 = sext i32 %366 to i64, !dbg !104
  %368 = getelementptr bfloat, ptr addrspace(1) %8, i64 %367, !dbg !104
  %369 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %368, i1 %23) #5, !dbg !105
  %370 = extractvalue { i32, i32 } %369, 0, !dbg !105
  %371 = bitcast i32 %370 to <2 x bfloat>, !dbg !105
  %372 = extractvalue { i32, i32 } %369, 1, !dbg !105
  %373 = bitcast i32 %372 to <2 x bfloat>, !dbg !105
  %374 = or disjoint i64 %364, 12288, !dbg !106
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %374, !dbg !107
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %375, i1 true) #5, !dbg !108
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !108
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !108
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !108
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !108
  %381 = getelementptr bfloat, ptr addrspace(1) %2, i64 %374, !dbg !109
  %382 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %381, i1 true) #5, !dbg !110
  %383 = extractvalue { i32, i32 } %382, 0, !dbg !110
  %384 = bitcast i32 %383 to <2 x bfloat>, !dbg !110
  %385 = extractvalue { i32, i32 } %382, 1, !dbg !110
  %386 = bitcast i32 %385 to <2 x bfloat>, !dbg !110
  %387 = add nuw nsw i64 %364, 9216, !dbg !111
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %387, !dbg !112
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %388, i1 true) #5, !dbg !113
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !113
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !113
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !113
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !113
  %394 = getelementptr bfloat, ptr addrspace(1) %2, i64 %387, !dbg !114
  %395 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %394, i1 true) #5, !dbg !115
  %396 = extractvalue { i32, i32 } %395, 0, !dbg !115
  %397 = bitcast i32 %396 to <2 x bfloat>, !dbg !115
  %398 = extractvalue { i32, i32 } %395, 1, !dbg !115
  %399 = bitcast i32 %398 to <2 x bfloat>, !dbg !115
  %400 = fcmp uno <2 x float> %362, zeroinitializer, !dbg !116
  %401 = fcmp uno float %360, 0.000000e+00, !dbg !116
  %402 = fcmp uno float %361, 0.000000e+00, !dbg !116
  %403 = fpext <2 x bfloat> %371 to <2 x float>, !dbg !118
  %404 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !108
  %405 = insertelement <2 x i32> %404, i32 %378, i64 1, !dbg !108
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !108
  %407 = fpext <2 x bfloat> %384 to <2 x float>, !dbg !119
  %408 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !113
  %409 = insertelement <2 x i32> %408, i32 %391, i64 1, !dbg !113
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !113
  %411 = fpext <2 x bfloat> %397 to <2 x float>, !dbg !120
  %412 = fsub <2 x float> %403, %358, !dbg !100
  %413 = fmul <2 x float> %356, %412, !dbg !99
  %414 = fadd <2 x float> %406, %407, !dbg !121
  %415 = fadd <2 x float> %414, splat (float 1.000000e+00), !dbg !122
  %416 = fmul <2 x float> %413, %415, !dbg !123
  %417 = fadd <2 x float> %410, %411, !dbg !124
  %418 = fadd <2 x float> %416, %417, !dbg !125
  %419 = fcmp olt <2 x float> %362, %418, !dbg !126
  %420 = or <2 x i1> %400, %419, !dbg !127
  %421 = select <2 x i1> %420, <2 x float> %362, <2 x float> %418, !dbg !128
  %422 = select <2 x i1> %354, <2 x float> %421, <2 x float> %362, !dbg !98
  %423 = fcmp uno <4 x float> %363, zeroinitializer, !dbg !129
  %424 = getelementptr bfloat, ptr addrspace(1) %9, i64 %367, !dbg !131
  %425 = fptrunc <2 x float> %418 to <2 x bfloat>, !dbg !132
  %426 = fpext <2 x bfloat> %373 to <2 x float>, !dbg !118
  %427 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !108
  %428 = insertelement <2 x i32> %427, i32 %380, i64 1, !dbg !108
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !108
  %430 = fpext <2 x bfloat> %386 to <2 x float>, !dbg !119
  %431 = insertelement <2 x i32> poison, i32 %392, i64 0, !dbg !113
  %432 = insertelement <2 x i32> %431, i32 %393, i64 1, !dbg !113
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !113
  %434 = fpext <2 x bfloat> %399 to <2 x float>, !dbg !120
  %435 = fsub <2 x float> %426, %358, !dbg !100
  %436 = fmul <2 x float> %356, %435, !dbg !99
  %437 = fadd <2 x float> %429, %430, !dbg !121
  %438 = fadd <2 x float> %437, splat (float 1.000000e+00), !dbg !122
  %439 = fmul <2 x float> %436, %438, !dbg !123
  %440 = fadd <2 x float> %433, %434, !dbg !124
  %441 = fadd <2 x float> %439, %440, !dbg !125
  %442 = extractelement <2 x float> %441, i64 0, !dbg !128
  %443 = fcmp olt float %360, %442, !dbg !126
  %444 = extractelement <2 x float> %441, i64 1, !dbg !128
  %445 = fcmp olt float %361, %444, !dbg !126
  %446 = or i1 %401, %443, !dbg !127
  %447 = or i1 %402, %445, !dbg !127
  %448 = select i1 %446, float %360, float %442, !dbg !128
  %449 = select i1 %447, float %361, float %444, !dbg !128
  %450 = select i1 %23, float %448, float %360, !dbg !98
  %451 = select i1 %23, float %449, float %361, !dbg !98
  %452 = shufflevector <2 x float> %418, <2 x float> %441, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !133
  %453 = fcmp ogt <4 x float> %363, %452, !dbg !133
  %454 = or <4 x i1> %423, %453, !dbg !134
  %455 = select <4 x i1> %454, <4 x float> %363, <4 x float> %452, !dbg !135
  %456 = select <4 x i1> %56, <4 x float> %455, <4 x float> %363, !dbg !136
  %457 = fptrunc <2 x float> %441 to <2 x bfloat>, !dbg !132
  %458 = bitcast <2 x bfloat> %425 to i32, !dbg !132
  %459 = bitcast <2 x bfloat> %457 to i32, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %458, i32 %459, ptr addrspace(1) %424, i1 %23) #5, !dbg !132
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 8, !dbg !101
  %460 = icmp samesign ult i64 %indvars.iv47, 3064, !dbg !101
  br i1 %460, label %359, label %461, !dbg !101

461:                                              ; preds = %359
  %462 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %422, <2 x i32> <i32 0, i32 2>, !dbg !137
  %463 = fcmp olt <2 x float> %462, %422, !dbg !137
  %464 = fcmp uno <2 x float> %462, %422, !dbg !137
  %shift = shufflevector <2 x i1> %463, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !139
  %465 = or <2 x i1> %shift, %464, !dbg !139
  %466 = extractelement <2 x i1> %465, i64 0, !dbg !139
  %467 = extractelement <2 x float> %422, i64 0, !dbg !140
  %468 = extractelement <2 x float> %422, i64 1, !dbg !140
  %469 = select i1 %466, float %467, float %468, !dbg !140
  %470 = fcmp olt float %469, %450, !dbg !137
  %471 = fcmp uno float %469, 0.000000e+00, !dbg !141
  %472 = or i1 %470, %471, !dbg !139
  %473 = select i1 %472, float %469, float %450, !dbg !140
  %474 = fcmp olt float %473, %451, !dbg !137
  %475 = fcmp uno float %473, 0.000000e+00, !dbg !141
  %476 = or i1 %474, %475, !dbg !139
  %477 = select i1 %476, float %473, float %451, !dbg !140
  %478 = bitcast float %477 to i32, !dbg !142
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !142
  %480 = bitcast i32 %479 to float, !dbg !142
  %481 = fcmp olt float %477, %480, !dbg !137
  %482 = fcmp uno float %477, 0.000000e+00, !dbg !141
  %483 = or i1 %482, %481, !dbg !139
  %484 = select i1 %483, float %477, float %480, !dbg !140
  %485 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %21, !dbg !143
  %486 = bitcast float %484 to <1 x i32>, !dbg !143
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #5, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !143
  %487 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %280, !dbg !143
  %488 = load float, ptr addrspace(3) %487, align 4, !dbg !143
  %489 = extractelement <4 x float> %456, i64 0, !dbg !144
  %490 = extractelement <4 x float> %456, i64 1, !dbg !144
  %491 = fcmp ogt float %489, %490, !dbg !144
  %492 = fcmp uno float %489, 0.000000e+00, !dbg !146
  %493 = or i1 %491, %492, !dbg !147
  %494 = select i1 %493, float %489, float %490, !dbg !148
  %495 = extractelement <4 x float> %456, i64 2, !dbg !144
  %496 = fcmp ogt float %494, %495, !dbg !144
  %497 = fcmp uno float %494, 0.000000e+00, !dbg !146
  %498 = or i1 %496, %497, !dbg !147
  %499 = select i1 %498, float %494, float %495, !dbg !148
  %500 = extractelement <4 x float> %456, i64 3, !dbg !144
  %501 = fcmp ogt float %499, %500, !dbg !144
  %502 = fcmp uno float %499, 0.000000e+00, !dbg !146
  %503 = or i1 %501, %502, !dbg !147
  %504 = select i1 %503, float %499, float %500, !dbg !148
  %505 = bitcast float %504 to i32, !dbg !149
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 1, i32 31), !dbg !149
  %507 = bitcast i32 %506 to float, !dbg !149
  %508 = fcmp ogt float %504, %507, !dbg !144
  %509 = fcmp uno float %504, 0.000000e+00, !dbg !146
  %510 = or i1 %509, %508, !dbg !147
  %511 = select i1 %510, float %504, float %507, !dbg !148
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %512 = bitcast float %511 to <1 x i32>, !dbg !150
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %512, i1 true) #5, !dbg !150
  tail call void @llvm.nvvm.barrier0(), !dbg !150
  %513 = load float, ptr addrspace(3) %487, align 4, !dbg !150
  %514 = sext i32 %281 to i64, !dbg !151
  %515 = getelementptr bfloat, ptr addrspace(1) %10, i64 %514, !dbg !151
  %516 = fptrunc float %488 to bfloat, !dbg !143
  %517 = bitcast bfloat %516 to i16, !dbg !143
  %518 = and i1 %279, %282, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %517, ptr addrspace(1) %515, i1 %518) #5, !dbg !143
  %519 = getelementptr bfloat, ptr addrspace(1) %11, i64 %514, !dbg !152
  %520 = fptrunc float %513 to bfloat, !dbg !150
  %521 = bitcast bfloat %520 to i16, !dbg !150
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %521, ptr addrspace(1) %519, i1 %518) #5, !dbg !150
  %.inv6 = fcmp oge float %484, 0.000000e+00, !dbg !153
  %522 = select i1 %.inv6, float 0.000000e+00, float %484, !dbg !153
  %523 = fsub float 0.000000e+00, %522, !dbg !155
  %.inv7 = fcmp ole float %511, 0.000000e+00, !dbg !156
  %524 = select i1 %.inv7, float 0.000000e+00, float %511, !dbg !156
  %525 = fcmp ogt float %523, %524, !dbg !158
  %526 = fcmp uno float %523, 0.000000e+00, !dbg !160
  %527 = or i1 %526, %525, !dbg !161
  %528 = select i1 %527, float %523, float %524, !dbg !162
  %529 = fmul float %528, 0x3F80204080000000, !dbg !163
  %530 = fcmp ogt float %529, 0x3EE4F8B580000000, !dbg !164
  %531 = fcmp uno float %529, 0.000000e+00, !dbg !166
  %532 = or i1 %530, %531, !dbg !167
  %533 = select i1 %532, float %529, float 0x3EE4F8B580000000, !dbg !168
  %534 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %533), !dbg !169
  %535 = or disjoint i32 %39, %25
  br label %536, !dbg !170

536:                                              ; preds = %461, %536
  %indvars.iv49 = phi i64 [ 0, %461 ], [ %indvars.iv.next50, %536 ]
  %537 = trunc nuw nsw i64 %indvars.iv49 to i32, !dbg !171
  %538 = add i32 %535, %537, !dbg !171
  %539 = sext i32 %538 to i64, !dbg !172
  %540 = getelementptr bfloat, ptr addrspace(1) %9, i64 %539, !dbg !172
  %541 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %540, i1 %23) #5, !dbg !173
  %542 = extractvalue { i32, i32 } %541, 0, !dbg !173
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !173
  %544 = extractvalue { i32, i32 } %541, 1, !dbg !173
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !173
  %546 = extractelement <2 x bfloat> %543, i64 0, !dbg !173
  %547 = extractelement <2 x bfloat> %543, i64 1, !dbg !173
  %548 = extractelement <2 x bfloat> %545, i64 0, !dbg !173
  %549 = extractelement <2 x bfloat> %545, i64 1, !dbg !173
  %550 = fpext bfloat %546 to float, !dbg !174
  %551 = fpext bfloat %547 to float, !dbg !174
  %552 = fpext bfloat %548 to float, !dbg !174
  %553 = fpext bfloat %549 to float, !dbg !174
  %554 = fmul float %534, %550, !dbg !175
  %555 = fmul float %534, %551, !dbg !175
  %556 = fmul float %534, %552, !dbg !175
  %557 = fmul float %534, %553, !dbg !175
  %558 = tail call float @llvm.nvvm.round.f(float %554) #5, !dbg !176
  %559 = tail call float @llvm.nvvm.round.f(float %555) #5, !dbg !176
  %560 = tail call float @llvm.nvvm.round.f(float %556) #5, !dbg !176
  %561 = tail call float @llvm.nvvm.round.f(float %557) #5, !dbg !176
  %562 = insertelement <4 x float> poison, float %558, i64 0, !dbg !177
  %563 = insertelement <4 x float> %562, float %559, i64 1, !dbg !177
  %564 = insertelement <4 x float> %563, float %560, i64 2, !dbg !177
  %565 = insertelement <4 x float> %564, float %561, i64 3, !dbg !177
  %566 = fcmp ogt <4 x float> %565, splat (float -1.270000e+02), !dbg !177
  %567 = fcmp uno <4 x float> %565, zeroinitializer, !dbg !179
  %568 = or <4 x i1> %566, %567, !dbg !180
  %569 = select <4 x i1> %568, <4 x float> %565, <4 x float> splat (float -1.270000e+02), !dbg !181
  %570 = fcmp olt <4 x float> %569, splat (float 1.270000e+02), !dbg !182
  %571 = fcmp uno <4 x float> %569, zeroinitializer, !dbg !184
  %572 = or <4 x i1> %570, %571, !dbg !185
  %573 = fptosi <4 x float> %569 to <4 x i8>, !dbg !186
  %574 = select <4 x i1> %572, <4 x i8> %573, <4 x i8> splat (i8 127), !dbg !187
  %575 = getelementptr i8, ptr addrspace(1) %12, i64 %539, !dbg !188
  %576 = bitcast <4 x i8> %574 to i32, !dbg !189
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %576, ptr addrspace(1) %575, i1 %23) #5, !dbg !189
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 8, !dbg !170
  %577 = icmp samesign ult i64 %indvars.iv49, 3064, !dbg !170
  br i1 %577, label %536, label %578, !dbg !170

578:                                              ; preds = %536
  ret void, !dbg !190
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdompcatnnyaaeahvrruyjd6o4gbuft7sfjlvhaetcflfevgdxqa.py", directory: "/tmp/torchinductor_root/do")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 29, column: 30, scope: !6)
!16 = !DILocation(line: 29, column: 35, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 30, column: 36, scope: !6)
!19 = !DILocation(line: 40, column: 46, scope: !6)
!20 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !6, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 50, column: 44, scope: !6)
!24 = !DILocation(line: 51, column: 17, scope: !6)
!25 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !26)
!26 = !DILocation(line: 52, column: 46, scope: !6)
!27 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 53, column: 46, scope: !6)
!29 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !28)
!30 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !28)
!31 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !28)
!32 = !DILocation(line: 55, column: 24, scope: !6)
!33 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 58, column: 46, scope: !6)
!35 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !34)
!37 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !34)
!38 = !DILocation(line: 34, column: 40, scope: !6)
!39 = !DILocation(line: 70, column: 64, scope: !6)
!40 = !DILocation(line: 60, column: 23, scope: !6)
!41 = !DILocation(line: 40, column: 41, scope: !6)
!42 = !DILocation(line: 40, column: 34, scope: !6)
!43 = !DILocation(line: 40, column: 51, scope: !6)
!44 = !DILocation(line: 41, column: 41, scope: !6)
!45 = !DILocation(line: 41, column: 34, scope: !6)
!46 = !DILocation(line: 41, column: 48, scope: !6)
!47 = !DILocation(line: 42, column: 34, scope: !6)
!48 = !DILocation(line: 42, column: 48, scope: !6)
!49 = !DILocation(line: 43, column: 34, scope: !6)
!50 = !DILocation(line: 43, column: 51, scope: !6)
!51 = !DILocation(line: 44, column: 35, scope: !6)
!52 = !DILocation(line: 44, column: 42, scope: !6)
!53 = !DILocation(line: 45, column: 35, scope: !6)
!54 = !DILocation(line: 45, column: 42, scope: !6)
!55 = !DILocation(line: 40, column: 113, scope: !6)
!56 = !DILocation(line: 42, column: 101, scope: !6)
!57 = !DILocation(line: 44, column: 95, scope: !6)
!58 = !DILocation(line: 45, column: 95, scope: !6)
!59 = !DILocation(line: 47, column: 22, scope: !6)
!60 = !DILocation(line: 48, column: 23, scope: !6)
!61 = !DILocation(line: 61, column: 24, scope: !6)
!62 = !DILocation(line: 62, column: 24, scope: !6)
!63 = !DILocation(line: 63, column: 23, scope: !6)
!64 = !DILocation(line: 64, column: 23, scope: !6)
!65 = !DILocation(line: 72, column: 68, scope: !6)
!66 = !DILocation(line: 73, column: 29, scope: !6)
!67 = !DILocation(line: 73, column: 53, scope: !6)
!68 = !DILocation(line: 35, column: 31, scope: !6)
!69 = !DILocation(line: 208, column: 24, scope: !21, inlinedAt: !70)
!70 = !DILocation(line: 68, column: 55, scope: !6)
!71 = !DILocation(line: 209, column: 30, scope: !21, inlinedAt: !70)
!72 = !DILocation(line: 210, column: 34, scope: !21, inlinedAt: !70)
!73 = !DILocation(line: 210, column: 26, scope: !21, inlinedAt: !70)
!74 = !DILocation(line: 211, column: 39, scope: !21, inlinedAt: !70)
!75 = !DILocation(line: 211, column: 31, scope: !21, inlinedAt: !70)
!76 = !DILocation(line: 211, column: 22, scope: !21, inlinedAt: !70)
!77 = !DILocation(line: 71, column: 60, scope: !6)
!78 = distinct !{!78, !79}
!79 = !{!"llvm.loop.peeled.count", i32 1}
!80 = !DILocation(line: 217, column: 21, scope: !81, inlinedAt: !82)
!81 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!82 = !DILocation(line: 74, column: 85, scope: !6)
!83 = !DILocation(line: 218, column: 28, scope: !81, inlinedAt: !82)
!84 = !DILocation(line: 219, column: 39, scope: !81, inlinedAt: !82)
!85 = !DILocation(line: 219, column: 60, scope: !81, inlinedAt: !82)
!86 = !DILocation(line: 219, column: 49, scope: !81, inlinedAt: !82)
!87 = !DILocation(line: 221, column: 25, scope: !81, inlinedAt: !82)
!88 = !DILocation(line: 221, column: 17, scope: !81, inlinedAt: !82)
!89 = !DILocation(line: 222, column: 30, scope: !81, inlinedAt: !82)
!90 = !DILocation(line: 222, column: 38, scope: !81, inlinedAt: !82)
!91 = !DILocation(line: 222, column: 49, scope: !81, inlinedAt: !82)
!92 = !DILocation(line: 222, column: 22, scope: !81, inlinedAt: !82)
!93 = !DILocation(line: 222, column: 15, scope: !81, inlinedAt: !82)
!94 = !DILocation(line: 229, column: 46, scope: !21, inlinedAt: !82)
!95 = !DILocation(line: 94, column: 25, scope: !6)
!96 = !DILocation(line: 96, column: 24, scope: !6)
!97 = !DILocation(line: 97, column: 32, scope: !6)
!98 = !DILocation(line: 110, column: 50, scope: !6)
!99 = !DILocation(line: 98, column: 24, scope: !6)
!100 = !DILocation(line: 92, column: 24, scope: !6)
!101 = !DILocation(line: 80, column: 40, scope: !6)
!102 = !DILocation(line: 81, column: 31, scope: !6)
!103 = !DILocation(line: 86, column: 43, scope: !6)
!104 = !DILocation(line: 86, column: 36, scope: !6)
!105 = !DILocation(line: 86, column: 53, scope: !6)
!106 = !DILocation(line: 87, column: 43, scope: !6)
!107 = !DILocation(line: 87, column: 35, scope: !6)
!108 = !DILocation(line: 87, column: 50, scope: !6)
!109 = !DILocation(line: 88, column: 35, scope: !6)
!110 = !DILocation(line: 88, column: 50, scope: !6)
!111 = !DILocation(line: 89, column: 42, scope: !6)
!112 = !DILocation(line: 89, column: 35, scope: !6)
!113 = !DILocation(line: 89, column: 49, scope: !6)
!114 = !DILocation(line: 90, column: 35, scope: !6)
!115 = !DILocation(line: 90, column: 49, scope: !6)
!116 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !117)
!117 = !DILocation(line: 109, column: 47, scope: !6)
!118 = !DILocation(line: 86, column: 115, scope: !6)
!119 = !DILocation(line: 88, column: 103, scope: !6)
!120 = !DILocation(line: 90, column: 102, scope: !6)
!121 = !DILocation(line: 101, column: 24, scope: !6)
!122 = !DILocation(line: 103, column: 24, scope: !6)
!123 = !DILocation(line: 104, column: 24, scope: !6)
!124 = !DILocation(line: 106, column: 24, scope: !6)
!125 = !DILocation(line: 107, column: 24, scope: !6)
!126 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !117)
!127 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !117)
!128 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !117)
!129 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !130)
!130 = !DILocation(line: 111, column: 47, scope: !6)
!131 = !DILocation(line: 113, column: 29, scope: !6)
!132 = !DILocation(line: 113, column: 53, scope: !6)
!133 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !130)
!134 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !130)
!135 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !130)
!136 = !DILocation(line: 112, column: 50, scope: !6)
!137 = !DILocation(line: 94, column: 15, scope: !81, inlinedAt: !138)
!138 = !DILocation(line: 114, column: 40, scope: !6)
!139 = !DILocation(line: 96, column: 16, scope: !81, inlinedAt: !138)
!140 = !DILocation(line: 97, column: 29, scope: !81, inlinedAt: !138)
!141 = !DILocation(line: 96, column: 21, scope: !81, inlinedAt: !138)
!142 = !DILocation(line: 110, column: 29, scope: !21, inlinedAt: !138)
!143 = !DILocation(line: 116, column: 37, scope: !6)
!144 = !DILocation(line: 102, column: 15, scope: !81, inlinedAt: !145)
!145 = !DILocation(line: 115, column: 40, scope: !6)
!146 = !DILocation(line: 104, column: 21, scope: !81, inlinedAt: !145)
!147 = !DILocation(line: 104, column: 16, scope: !81, inlinedAt: !145)
!148 = !DILocation(line: 105, column: 29, scope: !81, inlinedAt: !145)
!149 = !DILocation(line: 115, column: 29, scope: !21, inlinedAt: !145)
!150 = !DILocation(line: 117, column: 37, scope: !6)
!151 = !DILocation(line: 116, column: 25, scope: !6)
!152 = !DILocation(line: 117, column: 25, scope: !6)
!153 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !154)
!154 = !DILocation(line: 126, column: 46, scope: !6)
!155 = !DILocation(line: 127, column: 17, scope: !6)
!156 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !157)
!157 = !DILocation(line: 128, column: 46, scope: !6)
!158 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !159)
!159 = !DILocation(line: 129, column: 46, scope: !6)
!160 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !159)
!161 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !159)
!162 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !159)
!163 = !DILocation(line: 131, column: 24, scope: !6)
!164 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !165)
!165 = !DILocation(line: 134, column: 46, scope: !6)
!166 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !165)
!167 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !165)
!168 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !165)
!169 = !DILocation(line: 137, column: 25, scope: !6)
!170 = !DILocation(line: 118, column: 40, scope: !6)
!171 = !DILocation(line: 124, column: 43, scope: !6)
!172 = !DILocation(line: 124, column: 36, scope: !6)
!173 = !DILocation(line: 124, column: 53, scope: !6)
!174 = !DILocation(line: 124, column: 115, scope: !6)
!175 = !DILocation(line: 140, column: 24, scope: !6)
!176 = !DILocation(line: 141, column: 36, scope: !6)
!177 = !DILocation(line: 102, column: 15, scope: !21, inlinedAt: !178)
!178 = !DILocation(line: 144, column: 46, scope: !6)
!179 = !DILocation(line: 104, column: 21, scope: !21, inlinedAt: !178)
!180 = !DILocation(line: 104, column: 16, scope: !21, inlinedAt: !178)
!181 = !DILocation(line: 105, column: 29, scope: !21, inlinedAt: !178)
!182 = !DILocation(line: 94, column: 15, scope: !21, inlinedAt: !183)
!183 = !DILocation(line: 146, column: 46, scope: !6)
!184 = !DILocation(line: 96, column: 21, scope: !21, inlinedAt: !183)
!185 = !DILocation(line: 96, column: 16, scope: !21, inlinedAt: !183)
!186 = !DILocation(line: 148, column: 25, scope: !6)
!187 = !DILocation(line: 97, column: 29, scope: !21, inlinedAt: !183)
!188 = !DILocation(line: 149, column: 29, scope: !6)
!189 = !DILocation(line: 149, column: 53, scope: !6)
!190 = !DILocation(line: 118, column: 4, scope: !6)
