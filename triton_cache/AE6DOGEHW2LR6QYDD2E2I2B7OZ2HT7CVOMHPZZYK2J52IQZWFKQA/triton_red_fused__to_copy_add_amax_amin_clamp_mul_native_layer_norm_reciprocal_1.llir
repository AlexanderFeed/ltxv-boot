; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = shl i32 %17, 1, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 64, !dbg !11
  %.lobit = lshr exact i32 %20, 6, !dbg !11
  %21 = and i32 %19, 31, !dbg !11
  %22 = or disjoint i32 %.lobit, %18, !dbg !12
  %23 = icmp slt i32 %22, 3600, !dbg !13
  %24 = icmp slt i32 %18, 3600, !dbg !13
  %25 = shl i32 %19, 4, !dbg !14
  %26 = and i32 %25, 1008, !dbg !14
  %27 = or disjoint i32 %26, 8, !dbg !14
  %28 = shl i32 %19, 3, !dbg !14
  %29 = and i32 %28, 1016, !dbg !14
  %30 = mul i32 %22, 3072, !dbg !15
  %31 = or disjoint i32 %30, %26
  %32 = or disjoint i32 %30, %27
  br label %33, !dbg !16

33:                                               ; preds = %16, %._crit_edge
  %indvars.iv = phi i64 [ 0, %16 ], [ %indvars.iv.next, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %16 ], [ %317, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %318, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %16 ], [ %319, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %16 ], [ %320, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %16 ], [ %321, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %16 ], [ %322, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %16 ], [ %323, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %324, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %16 ], [ %325, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %16 ], [ %326, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %16 ], [ %327, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %16 ], [ %328, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %16 ], [ %329, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %16 ], [ %330, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %16 ], [ %331, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %16 ], [ %332, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %16 ], [ %301, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %16 ], [ %302, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %16 ], [ %303, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %16 ], [ %304, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %16 ], [ %305, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %16 ], [ %306, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %16 ], [ %307, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %16 ], [ %308, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %16 ], [ %309, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %16 ], [ %310, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %16 ], [ %311, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %16 ], [ %312, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %16 ], [ %313, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %16 ], [ %314, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %16 ], [ %315, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %16 ], [ %316, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %16 ], [ %285, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %16 ], [ %286, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %16 ], [ %287, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %16 ], [ %288, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %16 ], [ %289, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %16 ], [ %290, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %16 ], [ %291, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %16 ], [ %292, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %16 ], [ %293, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %16 ], [ %294, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %16 ], [ %295, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %16 ], [ %296, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %16 ], [ %297, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %16 ], [ %298, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %16 ], [ %299, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %16 ], [ %300, %._crit_edge ]
  %82 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %83 = add i32 %31, %82, !dbg !17
  %84 = add i32 %32, %82, !dbg !17
  %85 = sext i32 %83 to i64, !dbg !18
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !18
  %87 = sext i32 %84 to i64, !dbg !18
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !18
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %86, i1 %23) #5, !dbg !19
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !19
  %91 = bitcast i32 %90 to <2 x bfloat>, !dbg !19
  %92 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !19
  %93 = bitcast i32 %92 to <2 x bfloat>, !dbg !19
  %94 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !19
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !19
  %96 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !19
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !19
  %98 = extractelement <2 x bfloat> %91, i64 0, !dbg !19
  %99 = extractelement <2 x bfloat> %91, i64 1, !dbg !19
  %100 = extractelement <2 x bfloat> %93, i64 0, !dbg !19
  %101 = extractelement <2 x bfloat> %93, i64 1, !dbg !19
  %102 = extractelement <2 x bfloat> %95, i64 0, !dbg !19
  %103 = extractelement <2 x bfloat> %95, i64 1, !dbg !19
  %104 = extractelement <2 x bfloat> %97, i64 0, !dbg !19
  %105 = extractelement <2 x bfloat> %97, i64 1, !dbg !19
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %88, i1 %23) #5, !dbg !19
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !19
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !19
  %109 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !19
  %110 = bitcast i32 %109 to <2 x bfloat>, !dbg !19
  %111 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !19
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !19
  %113 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !19
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !19
  %115 = extractelement <2 x bfloat> %108, i64 0, !dbg !19
  %116 = extractelement <2 x bfloat> %108, i64 1, !dbg !19
  %117 = extractelement <2 x bfloat> %110, i64 0, !dbg !19
  %118 = extractelement <2 x bfloat> %110, i64 1, !dbg !19
  %119 = extractelement <2 x bfloat> %112, i64 0, !dbg !19
  %120 = extractelement <2 x bfloat> %112, i64 1, !dbg !19
  %121 = extractelement <2 x bfloat> %114, i64 0, !dbg !19
  %122 = extractelement <2 x bfloat> %114, i64 1, !dbg !19
  %123 = fpext bfloat %98 to float, !dbg !20
  %124 = fpext bfloat %99 to float, !dbg !20
  %125 = fpext bfloat %100 to float, !dbg !20
  %126 = fpext bfloat %101 to float, !dbg !20
  %127 = fpext bfloat %102 to float, !dbg !20
  %128 = fpext bfloat %103 to float, !dbg !20
  %129 = fpext bfloat %104 to float, !dbg !20
  %130 = fpext bfloat %105 to float, !dbg !20
  %131 = fpext bfloat %115 to float, !dbg !20
  %132 = fpext bfloat %116 to float, !dbg !20
  %133 = fpext bfloat %117 to float, !dbg !20
  %134 = fpext bfloat %118 to float, !dbg !20
  %135 = fpext bfloat %119 to float, !dbg !20
  %136 = fpext bfloat %120 to float, !dbg !20
  %137 = fpext bfloat %121 to float, !dbg !20
  %138 = fpext bfloat %122 to float, !dbg !20
  %139 = icmp eq i64 %indvars.iv, 0, !dbg !21
  br i1 %139, label %._crit_edge, label %140, !dbg !22

140:                                              ; preds = %33
  %141 = fsub float %123, %66, !dbg !26
  %142 = fsub float %124, %67, !dbg !26
  %143 = fsub float %125, %68, !dbg !26
  %144 = fsub float %126, %69, !dbg !26
  %145 = fsub float %127, %70, !dbg !26
  %146 = fsub float %128, %71, !dbg !26
  %147 = fsub float %129, %72, !dbg !26
  %148 = fsub float %130, %73, !dbg !26
  %149 = fsub float %131, %74, !dbg !26
  %150 = fsub float %132, %75, !dbg !26
  %151 = fsub float %133, %76, !dbg !26
  %152 = fsub float %134, %77, !dbg !26
  %153 = fsub float %135, %78, !dbg !26
  %154 = fsub float %136, %79, !dbg !26
  %155 = fsub float %137, %80, !dbg !26
  %156 = fsub float %138, %81, !dbg !26
  %157 = fadd float %34, 1.000000e+00, !dbg !27
  %158 = fadd float %35, 1.000000e+00, !dbg !27
  %159 = fadd float %36, 1.000000e+00, !dbg !27
  %160 = fadd float %37, 1.000000e+00, !dbg !27
  %161 = fadd float %38, 1.000000e+00, !dbg !27
  %162 = fadd float %39, 1.000000e+00, !dbg !27
  %163 = fadd float %40, 1.000000e+00, !dbg !27
  %164 = fadd float %41, 1.000000e+00, !dbg !27
  %165 = fadd float %42, 1.000000e+00, !dbg !27
  %166 = fadd float %43, 1.000000e+00, !dbg !27
  %167 = fadd float %44, 1.000000e+00, !dbg !27
  %168 = fadd float %45, 1.000000e+00, !dbg !27
  %169 = fadd float %46, 1.000000e+00, !dbg !27
  %170 = fadd float %47, 1.000000e+00, !dbg !27
  %171 = fadd float %48, 1.000000e+00, !dbg !27
  %172 = fadd float %49, 1.000000e+00, !dbg !27
  %173 = tail call float @llvm.nvvm.div.full(float %141, float %157), !dbg !28
  %174 = tail call float @llvm.nvvm.div.full(float %142, float %158), !dbg !28
  %175 = tail call float @llvm.nvvm.div.full(float %143, float %159), !dbg !28
  %176 = tail call float @llvm.nvvm.div.full(float %144, float %160), !dbg !28
  %177 = tail call float @llvm.nvvm.div.full(float %145, float %161), !dbg !28
  %178 = tail call float @llvm.nvvm.div.full(float %146, float %162), !dbg !28
  %179 = tail call float @llvm.nvvm.div.full(float %147, float %163), !dbg !28
  %180 = tail call float @llvm.nvvm.div.full(float %148, float %164), !dbg !28
  %181 = tail call float @llvm.nvvm.div.full(float %149, float %165), !dbg !28
  %182 = tail call float @llvm.nvvm.div.full(float %150, float %166), !dbg !28
  %183 = tail call float @llvm.nvvm.div.full(float %151, float %167), !dbg !28
  %184 = tail call float @llvm.nvvm.div.full(float %152, float %168), !dbg !28
  %185 = tail call float @llvm.nvvm.div.full(float %153, float %169), !dbg !28
  %186 = tail call float @llvm.nvvm.div.full(float %154, float %170), !dbg !28
  %187 = tail call float @llvm.nvvm.div.full(float %155, float %171), !dbg !28
  %188 = tail call float @llvm.nvvm.div.full(float %156, float %172), !dbg !28
  %189 = fadd float %66, %173, !dbg !29
  %190 = fadd float %67, %174, !dbg !29
  %191 = fadd float %68, %175, !dbg !29
  %192 = fadd float %69, %176, !dbg !29
  %193 = fadd float %70, %177, !dbg !29
  %194 = fadd float %71, %178, !dbg !29
  %195 = fadd float %72, %179, !dbg !29
  %196 = fadd float %73, %180, !dbg !29
  %197 = fadd float %74, %181, !dbg !29
  %198 = fadd float %75, %182, !dbg !29
  %199 = fadd float %76, %183, !dbg !29
  %200 = fadd float %77, %184, !dbg !29
  %201 = fadd float %78, %185, !dbg !29
  %202 = fadd float %79, %186, !dbg !29
  %203 = fadd float %80, %187, !dbg !29
  %204 = fadd float %81, %188, !dbg !29
  %205 = fsub float %123, %189, !dbg !30
  %206 = fsub float %124, %190, !dbg !30
  %207 = fsub float %125, %191, !dbg !30
  %208 = fsub float %126, %192, !dbg !30
  %209 = fsub float %127, %193, !dbg !30
  %210 = fsub float %128, %194, !dbg !30
  %211 = fsub float %129, %195, !dbg !30
  %212 = fsub float %130, %196, !dbg !30
  %213 = fsub float %131, %197, !dbg !30
  %214 = fsub float %132, %198, !dbg !30
  %215 = fsub float %133, %199, !dbg !30
  %216 = fsub float %134, %200, !dbg !30
  %217 = fsub float %135, %201, !dbg !30
  %218 = fsub float %136, %202, !dbg !30
  %219 = fsub float %137, %203, !dbg !30
  %220 = fsub float %138, %204, !dbg !30
  %221 = fmul float %141, %205, !dbg !31
  %222 = fmul float %142, %206, !dbg !31
  %223 = fmul float %143, %207, !dbg !31
  %224 = fmul float %144, %208, !dbg !31
  %225 = fmul float %145, %209, !dbg !31
  %226 = fmul float %146, %210, !dbg !31
  %227 = fmul float %147, %211, !dbg !31
  %228 = fmul float %148, %212, !dbg !31
  %229 = fmul float %149, %213, !dbg !31
  %230 = fmul float %150, %214, !dbg !31
  %231 = fmul float %151, %215, !dbg !31
  %232 = fmul float %152, %216, !dbg !31
  %233 = fmul float %153, %217, !dbg !31
  %234 = fmul float %154, %218, !dbg !31
  %235 = fmul float %155, %219, !dbg !31
  %236 = fmul float %156, %220, !dbg !31
  %237 = fadd float %50, %221, !dbg !32
  %238 = fadd float %51, %222, !dbg !32
  %239 = fadd float %52, %223, !dbg !32
  %240 = fadd float %53, %224, !dbg !32
  %241 = fadd float %54, %225, !dbg !32
  %242 = fadd float %55, %226, !dbg !32
  %243 = fadd float %56, %227, !dbg !32
  %244 = fadd float %57, %228, !dbg !32
  %245 = fadd float %58, %229, !dbg !32
  %246 = fadd float %59, %230, !dbg !32
  %247 = fadd float %60, %231, !dbg !32
  %248 = fadd float %61, %232, !dbg !32
  %249 = fadd float %62, %233, !dbg !32
  %250 = fadd float %63, %234, !dbg !32
  %251 = fadd float %64, %235, !dbg !32
  %252 = fadd float %65, %236, !dbg !32
  br label %._crit_edge, !dbg !22

._crit_edge:                                      ; preds = %33, %140
  %253 = phi float [ %237, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %254 = phi float [ %238, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %255 = phi float [ %239, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %256 = phi float [ %240, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %257 = phi float [ %241, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %258 = phi float [ %242, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %259 = phi float [ %243, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %260 = phi float [ %244, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %261 = phi float [ %245, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %262 = phi float [ %246, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %263 = phi float [ %247, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %264 = phi float [ %248, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %265 = phi float [ %249, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %266 = phi float [ %250, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %267 = phi float [ %251, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %268 = phi float [ %252, %140 ], [ 0.000000e+00, %33 ], !dbg !25
  %.pn52 = phi float [ %189, %140 ], [ %123, %33 ]
  %.pn50 = phi float [ %190, %140 ], [ %124, %33 ]
  %.pn48 = phi float [ %191, %140 ], [ %125, %33 ]
  %.pn46 = phi float [ %192, %140 ], [ %126, %33 ]
  %.pn44 = phi float [ %193, %140 ], [ %127, %33 ]
  %.pn42 = phi float [ %194, %140 ], [ %128, %33 ]
  %.pn40 = phi float [ %195, %140 ], [ %129, %33 ]
  %.pn38 = phi float [ %196, %140 ], [ %130, %33 ]
  %.pn36 = phi float [ %197, %140 ], [ %131, %33 ]
  %.pn34 = phi float [ %198, %140 ], [ %132, %33 ]
  %.pn32 = phi float [ %199, %140 ], [ %133, %33 ]
  %.pn30 = phi float [ %200, %140 ], [ %134, %33 ]
  %.pn28 = phi float [ %201, %140 ], [ %135, %33 ]
  %.pn26 = phi float [ %202, %140 ], [ %136, %33 ]
  %.pn24 = phi float [ %203, %140 ], [ %137, %33 ]
  %.pn22 = phi float [ %204, %140 ], [ %138, %33 ]
  %269 = phi float [ %157, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %270 = phi float [ %158, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %271 = phi float [ %159, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %272 = phi float [ %160, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %273 = phi float [ %161, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %274 = phi float [ %162, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %275 = phi float [ %163, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %276 = phi float [ %164, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %277 = phi float [ %165, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %278 = phi float [ %166, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %279 = phi float [ %167, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %280 = phi float [ %168, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %281 = phi float [ %169, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %282 = phi float [ %170, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %283 = phi float [ %171, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %284 = phi float [ %172, %140 ], [ 1.000000e+00, %33 ], !dbg !25
  %285 = select i1 %23, float %.pn52, float %66, !dbg !33
  %286 = select i1 %23, float %.pn50, float %67, !dbg !33
  %287 = select i1 %23, float %.pn48, float %68, !dbg !33
  %288 = select i1 %23, float %.pn46, float %69, !dbg !33
  %289 = select i1 %23, float %.pn44, float %70, !dbg !33
  %290 = select i1 %23, float %.pn42, float %71, !dbg !33
  %291 = select i1 %23, float %.pn40, float %72, !dbg !33
  %292 = select i1 %23, float %.pn38, float %73, !dbg !33
  %293 = select i1 %23, float %.pn36, float %74, !dbg !33
  %294 = select i1 %23, float %.pn34, float %75, !dbg !33
  %295 = select i1 %23, float %.pn32, float %76, !dbg !33
  %296 = select i1 %23, float %.pn30, float %77, !dbg !33
  %297 = select i1 %23, float %.pn28, float %78, !dbg !33
  %298 = select i1 %23, float %.pn26, float %79, !dbg !33
  %299 = select i1 %23, float %.pn24, float %80, !dbg !33
  %300 = select i1 %23, float %.pn22, float %81, !dbg !33
  %301 = select i1 %23, float %253, float %50, !dbg !34
  %302 = select i1 %23, float %254, float %51, !dbg !34
  %303 = select i1 %23, float %255, float %52, !dbg !34
  %304 = select i1 %23, float %256, float %53, !dbg !34
  %305 = select i1 %23, float %257, float %54, !dbg !34
  %306 = select i1 %23, float %258, float %55, !dbg !34
  %307 = select i1 %23, float %259, float %56, !dbg !34
  %308 = select i1 %23, float %260, float %57, !dbg !34
  %309 = select i1 %23, float %261, float %58, !dbg !34
  %310 = select i1 %23, float %262, float %59, !dbg !34
  %311 = select i1 %23, float %263, float %60, !dbg !34
  %312 = select i1 %23, float %264, float %61, !dbg !34
  %313 = select i1 %23, float %265, float %62, !dbg !34
  %314 = select i1 %23, float %266, float %63, !dbg !34
  %315 = select i1 %23, float %267, float %64, !dbg !34
  %316 = select i1 %23, float %268, float %65, !dbg !34
  %317 = select i1 %23, float %269, float %34, !dbg !35
  %318 = select i1 %23, float %270, float %35, !dbg !35
  %319 = select i1 %23, float %271, float %36, !dbg !35
  %320 = select i1 %23, float %272, float %37, !dbg !35
  %321 = select i1 %23, float %273, float %38, !dbg !35
  %322 = select i1 %23, float %274, float %39, !dbg !35
  %323 = select i1 %23, float %275, float %40, !dbg !35
  %324 = select i1 %23, float %276, float %41, !dbg !35
  %325 = select i1 %23, float %277, float %42, !dbg !35
  %326 = select i1 %23, float %278, float %43, !dbg !35
  %327 = select i1 %23, float %279, float %44, !dbg !35
  %328 = select i1 %23, float %280, float %45, !dbg !35
  %329 = select i1 %23, float %281, float %46, !dbg !35
  %330 = select i1 %23, float %282, float %47, !dbg !35
  %331 = select i1 %23, float %283, float %48, !dbg !35
  %332 = select i1 %23, float %284, float %49, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !16
  %333 = icmp samesign ult i64 %indvars.iv, 2048, !dbg !16
  br i1 %333, label %33, label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %334 = lshr i32 %19, 5, !dbg !11
  %335 = and i32 %19, 1, !dbg !11
  %336 = or disjoint i32 %18, %335, !dbg !12
  %337 = icmp slt i32 %336, 3600, !dbg !13
  %338 = or disjoint i32 %29, 4, !dbg !14
  %339 = fsub float %286, %285, !dbg !36
  %340 = fadd float %317, %318, !dbg !39
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !40
  %342 = tail call float @llvm.nvvm.div.full(float %318, float %340), !dbg !41
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !42
  %344 = fmul float %339, %343, !dbg !43
  %345 = fadd float %285, %344, !dbg !44
  %346 = fadd float %301, %302, !dbg !45
  %347 = fmul float %339, %339, !dbg !46
  %348 = fmul float %347, %317, !dbg !47
  %349 = fmul float %348, %343, !dbg !48
  %350 = fadd float %346, %349, !dbg !49
  %351 = fsub float %287, %345, !dbg !36
  %352 = fadd float %319, %340, !dbg !39
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !40
  %354 = tail call float @llvm.nvvm.div.full(float %319, float %352), !dbg !41
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !42
  %356 = fmul float %355, %351, !dbg !43
  %357 = fadd float %345, %356, !dbg !44
  %358 = fadd float %303, %350, !dbg !45
  %359 = fmul float %351, %351, !dbg !46
  %360 = fmul float %340, %359, !dbg !47
  %361 = fmul float %355, %360, !dbg !48
  %362 = fadd float %358, %361, !dbg !49
  %363 = fsub float %288, %357, !dbg !36
  %364 = fadd float %320, %352, !dbg !39
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !40
  %366 = tail call float @llvm.nvvm.div.full(float %320, float %364), !dbg !41
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !42
  %368 = fmul float %367, %363, !dbg !43
  %369 = fadd float %357, %368, !dbg !44
  %370 = fadd float %304, %362, !dbg !45
  %371 = fmul float %363, %363, !dbg !46
  %372 = fmul float %352, %371, !dbg !47
  %373 = fmul float %367, %372, !dbg !48
  %374 = fadd float %370, %373, !dbg !49
  %375 = fsub float %289, %369, !dbg !36
  %376 = fadd float %321, %364, !dbg !39
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !40
  %378 = tail call float @llvm.nvvm.div.full(float %321, float %376), !dbg !41
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !42
  %380 = fmul float %379, %375, !dbg !43
  %381 = fadd float %369, %380, !dbg !44
  %382 = fadd float %305, %374, !dbg !45
  %383 = fmul float %375, %375, !dbg !46
  %384 = fmul float %364, %383, !dbg !47
  %385 = fmul float %379, %384, !dbg !48
  %386 = fadd float %382, %385, !dbg !49
  %387 = fsub float %290, %381, !dbg !36
  %388 = fadd float %322, %376, !dbg !39
  %389 = fcmp oeq float %388, 0.000000e+00, !dbg !40
  %390 = tail call float @llvm.nvvm.div.full(float %322, float %388), !dbg !41
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !42
  %392 = fmul float %391, %387, !dbg !43
  %393 = fadd float %381, %392, !dbg !44
  %394 = fadd float %306, %386, !dbg !45
  %395 = fmul float %387, %387, !dbg !46
  %396 = fmul float %376, %395, !dbg !47
  %397 = fmul float %391, %396, !dbg !48
  %398 = fadd float %394, %397, !dbg !49
  %399 = fsub float %291, %393, !dbg !36
  %400 = fadd float %323, %388, !dbg !39
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !40
  %402 = tail call float @llvm.nvvm.div.full(float %323, float %400), !dbg !41
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !42
  %404 = fmul float %403, %399, !dbg !43
  %405 = fadd float %393, %404, !dbg !44
  %406 = fadd float %307, %398, !dbg !45
  %407 = fmul float %399, %399, !dbg !46
  %408 = fmul float %388, %407, !dbg !47
  %409 = fmul float %403, %408, !dbg !48
  %410 = fadd float %406, %409, !dbg !49
  %411 = fsub float %292, %405, !dbg !36
  %412 = fadd float %324, %400, !dbg !39
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !40
  %414 = tail call float @llvm.nvvm.div.full(float %324, float %412), !dbg !41
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !42
  %416 = fmul float %415, %411, !dbg !43
  %417 = fadd float %405, %416, !dbg !44
  %418 = fadd float %308, %410, !dbg !45
  %419 = fmul float %411, %411, !dbg !46
  %420 = fmul float %400, %419, !dbg !47
  %421 = fmul float %415, %420, !dbg !48
  %422 = fadd float %418, %421, !dbg !49
  %423 = fsub float %293, %417, !dbg !36
  %424 = fadd float %325, %412, !dbg !39
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !40
  %426 = tail call float @llvm.nvvm.div.full(float %325, float %424), !dbg !41
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !42
  %428 = fmul float %427, %423, !dbg !43
  %429 = fadd float %417, %428, !dbg !44
  %430 = fadd float %309, %422, !dbg !45
  %431 = fmul float %423, %423, !dbg !46
  %432 = fmul float %412, %431, !dbg !47
  %433 = fmul float %427, %432, !dbg !48
  %434 = fadd float %430, %433, !dbg !49
  %435 = fsub float %294, %429, !dbg !36
  %436 = fadd float %326, %424, !dbg !39
  %437 = fcmp oeq float %436, 0.000000e+00, !dbg !40
  %438 = tail call float @llvm.nvvm.div.full(float %326, float %436), !dbg !41
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !42
  %440 = fmul float %439, %435, !dbg !43
  %441 = fadd float %429, %440, !dbg !44
  %442 = fadd float %310, %434, !dbg !45
  %443 = fmul float %435, %435, !dbg !46
  %444 = fmul float %424, %443, !dbg !47
  %445 = fmul float %439, %444, !dbg !48
  %446 = fadd float %442, %445, !dbg !49
  %447 = fsub float %295, %441, !dbg !36
  %448 = fadd float %327, %436, !dbg !39
  %449 = fcmp oeq float %448, 0.000000e+00, !dbg !40
  %450 = tail call float @llvm.nvvm.div.full(float %327, float %448), !dbg !41
  %451 = select i1 %449, float 0.000000e+00, float %450, !dbg !42
  %452 = fmul float %451, %447, !dbg !43
  %453 = fadd float %441, %452, !dbg !44
  %454 = fadd float %311, %446, !dbg !45
  %455 = fmul float %447, %447, !dbg !46
  %456 = fmul float %436, %455, !dbg !47
  %457 = fmul float %451, %456, !dbg !48
  %458 = fadd float %454, %457, !dbg !49
  %459 = fsub float %296, %453, !dbg !36
  %460 = fadd float %328, %448, !dbg !39
  %461 = fcmp oeq float %460, 0.000000e+00, !dbg !40
  %462 = tail call float @llvm.nvvm.div.full(float %328, float %460), !dbg !41
  %463 = select i1 %461, float 0.000000e+00, float %462, !dbg !42
  %464 = fmul float %463, %459, !dbg !43
  %465 = fadd float %453, %464, !dbg !44
  %466 = fadd float %312, %458, !dbg !45
  %467 = fmul float %459, %459, !dbg !46
  %468 = fmul float %448, %467, !dbg !47
  %469 = fmul float %463, %468, !dbg !48
  %470 = fadd float %466, %469, !dbg !49
  %471 = fsub float %297, %465, !dbg !36
  %472 = fadd float %329, %460, !dbg !39
  %473 = fcmp oeq float %472, 0.000000e+00, !dbg !40
  %474 = tail call float @llvm.nvvm.div.full(float %329, float %472), !dbg !41
  %475 = select i1 %473, float 0.000000e+00, float %474, !dbg !42
  %476 = fmul float %475, %471, !dbg !43
  %477 = fadd float %465, %476, !dbg !44
  %478 = fadd float %313, %470, !dbg !45
  %479 = fmul float %471, %471, !dbg !46
  %480 = fmul float %460, %479, !dbg !47
  %481 = fmul float %475, %480, !dbg !48
  %482 = fadd float %478, %481, !dbg !49
  %483 = fsub float %298, %477, !dbg !36
  %484 = fadd float %330, %472, !dbg !39
  %485 = fcmp oeq float %484, 0.000000e+00, !dbg !40
  %486 = tail call float @llvm.nvvm.div.full(float %330, float %484), !dbg !41
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !42
  %488 = fmul float %487, %483, !dbg !43
  %489 = fadd float %477, %488, !dbg !44
  %490 = fadd float %314, %482, !dbg !45
  %491 = fmul float %483, %483, !dbg !46
  %492 = fmul float %472, %491, !dbg !47
  %493 = fmul float %487, %492, !dbg !48
  %494 = fadd float %490, %493, !dbg !49
  %495 = fsub float %299, %489, !dbg !36
  %496 = fadd float %331, %484, !dbg !39
  %497 = fcmp oeq float %496, 0.000000e+00, !dbg !40
  %498 = tail call float @llvm.nvvm.div.full(float %331, float %496), !dbg !41
  %499 = select i1 %497, float 0.000000e+00, float %498, !dbg !42
  %500 = fmul float %499, %495, !dbg !43
  %501 = fadd float %489, %500, !dbg !44
  %502 = fadd float %315, %494, !dbg !45
  %503 = fmul float %495, %495, !dbg !46
  %504 = fmul float %484, %503, !dbg !47
  %505 = fmul float %499, %504, !dbg !48
  %506 = fadd float %502, %505, !dbg !49
  %507 = fsub float %300, %501, !dbg !36
  %508 = fadd float %332, %496, !dbg !39
  %509 = fcmp oeq float %508, 0.000000e+00, !dbg !40
  %510 = tail call float @llvm.nvvm.div.full(float %332, float %508), !dbg !41
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !42
  %512 = fmul float %511, %507, !dbg !43
  %513 = fadd float %501, %512, !dbg !44
  %514 = fadd float %316, %506, !dbg !45
  %515 = fmul float %507, %507, !dbg !46
  %516 = fmul float %496, %515, !dbg !47
  %517 = fmul float %511, %516, !dbg !48
  %518 = fadd float %514, %517, !dbg !49
  %519 = bitcast float %513 to i32, !dbg !50
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 16, i32 31), !dbg !50
  %521 = bitcast i32 %520 to float, !dbg !50
  %522 = bitcast float %518 to i32, !dbg !50
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 16, i32 31), !dbg !50
  %524 = bitcast i32 %523 to float, !dbg !50
  %525 = bitcast float %508 to i32, !dbg !50
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 16, i32 31), !dbg !50
  %527 = bitcast i32 %526 to float, !dbg !50
  %528 = fsub float %521, %513, !dbg !36
  %529 = fadd float %508, %527, !dbg !39
  %530 = fcmp oeq float %529, 0.000000e+00, !dbg !40
  %531 = tail call float @llvm.nvvm.div.full(float %527, float %529), !dbg !41
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !42
  %533 = fmul float %532, %528, !dbg !43
  %534 = fadd float %513, %533, !dbg !44
  %535 = fadd float %518, %524, !dbg !45
  %536 = fmul float %528, %528, !dbg !46
  %537 = fmul float %508, %536, !dbg !47
  %538 = fmul float %532, %537, !dbg !48
  %539 = fadd float %535, %538, !dbg !49
  %540 = bitcast float %534 to i32, !dbg !50
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 8, i32 31), !dbg !50
  %542 = bitcast i32 %541 to float, !dbg !50
  %543 = bitcast float %539 to i32, !dbg !50
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 8, i32 31), !dbg !50
  %545 = bitcast i32 %544 to float, !dbg !50
  %546 = bitcast float %529 to i32, !dbg !50
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !50
  %548 = bitcast i32 %547 to float, !dbg !50
  %549 = fsub float %542, %534, !dbg !36
  %550 = fadd float %529, %548, !dbg !39
  %551 = fcmp oeq float %550, 0.000000e+00, !dbg !40
  %552 = tail call float @llvm.nvvm.div.full(float %548, float %550), !dbg !41
  %553 = select i1 %551, float 0.000000e+00, float %552, !dbg !42
  %554 = fmul float %553, %549, !dbg !43
  %555 = fadd float %534, %554, !dbg !44
  %556 = fadd float %539, %545, !dbg !45
  %557 = fmul float %549, %549, !dbg !46
  %558 = fmul float %529, %557, !dbg !47
  %559 = fmul float %553, %558, !dbg !48
  %560 = fadd float %556, %559, !dbg !49
  %561 = bitcast float %555 to i32, !dbg !50
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 4, i32 31), !dbg !50
  %563 = bitcast i32 %562 to float, !dbg !50
  %564 = bitcast float %560 to i32, !dbg !50
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !50
  %566 = bitcast i32 %565 to float, !dbg !50
  %567 = bitcast float %550 to i32, !dbg !50
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !50
  %569 = bitcast i32 %568 to float, !dbg !50
  %570 = fsub float %563, %555, !dbg !36
  %571 = fadd float %550, %569, !dbg !39
  %572 = fcmp oeq float %571, 0.000000e+00, !dbg !40
  %573 = tail call float @llvm.nvvm.div.full(float %569, float %571), !dbg !41
  %574 = select i1 %572, float 0.000000e+00, float %573, !dbg !42
  %575 = fmul float %574, %570, !dbg !43
  %576 = fadd float %555, %575, !dbg !44
  %577 = fadd float %560, %566, !dbg !45
  %578 = fmul float %570, %570, !dbg !46
  %579 = fmul float %550, %578, !dbg !47
  %580 = fmul float %574, %579, !dbg !48
  %581 = fadd float %577, %580, !dbg !49
  %582 = bitcast float %576 to i32, !dbg !50
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 2, i32 31), !dbg !50
  %584 = bitcast i32 %583 to float, !dbg !50
  %585 = bitcast float %581 to i32, !dbg !50
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 2, i32 31), !dbg !50
  %587 = bitcast i32 %586 to float, !dbg !50
  %588 = bitcast float %571 to i32, !dbg !50
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !50
  %590 = bitcast i32 %589 to float, !dbg !50
  %591 = fsub float %584, %576, !dbg !36
  %592 = fadd float %571, %590, !dbg !39
  %593 = fcmp oeq float %592, 0.000000e+00, !dbg !40
  %594 = tail call float @llvm.nvvm.div.full(float %590, float %592), !dbg !41
  %595 = select i1 %593, float 0.000000e+00, float %594, !dbg !42
  %596 = fmul float %595, %591, !dbg !43
  %597 = fadd float %576, %596, !dbg !44
  %598 = fadd float %581, %587, !dbg !45
  %599 = fmul float %591, %591, !dbg !46
  %600 = fmul float %571, %599, !dbg !47
  %601 = fmul float %595, %600, !dbg !48
  %602 = fadd float %598, %601, !dbg !49
  %603 = bitcast float %597 to i32, !dbg !50
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 1, i32 31), !dbg !50
  %605 = bitcast i32 %604 to float, !dbg !50
  %606 = bitcast float %602 to i32, !dbg !50
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 1, i32 31), !dbg !50
  %608 = bitcast i32 %607 to float, !dbg !50
  %609 = bitcast float %592 to i32, !dbg !50
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !50
  %611 = bitcast i32 %610 to float, !dbg !50
  %612 = fsub float %605, %597, !dbg !36
  %613 = fadd float %592, %611, !dbg !39
  %614 = fcmp oeq float %613, 0.000000e+00, !dbg !40
  %615 = tail call float @llvm.nvvm.div.full(float %611, float %613), !dbg !41
  %616 = select i1 %614, float 0.000000e+00, float %615, !dbg !42
  %617 = fmul float %616, %612, !dbg !43
  %618 = fadd float %597, %617, !dbg !44
  %619 = fadd float %602, %608, !dbg !45
  %620 = fmul float %612, %612, !dbg !46
  %621 = fmul float %592, %620, !dbg !47
  %622 = fmul float %616, %621, !dbg !48
  %623 = fadd float %619, %622, !dbg !49
  %624 = and i32 %334, 1, !dbg !50
  %625 = icmp eq i32 %21, 0, !dbg !50
  %626 = lshr exact i32 %20, 5, !dbg !50
  %627 = or disjoint i32 %626, %624, !dbg !50
  %628 = getelementptr float, ptr addrspace(3) @global_smem, i32 %627, !dbg !50
  %629 = bitcast float %618 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %628, <1 x i32> %629, i1 %625) #5, !dbg !50
  %630 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %627, !dbg !50
  %631 = bitcast float %623 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %630, <1 x i32> %631, i1 %625) #5, !dbg !50
  %632 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %627, !dbg !50
  %633 = bitcast float %613 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %633, i1 %625) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %634 = icmp slt i32 %19, 4, !dbg !50
  %635 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !50
  %636 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %635, i1 %634) #5, !dbg !50
  %637 = bitcast i32 %636 to float, !dbg !50
  %638 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %19, !dbg !50
  %639 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %638, i1 %634) #5, !dbg !50
  %640 = bitcast i32 %639 to float, !dbg !50
  %641 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %19, !dbg !50
  %642 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %641, i1 %634) #5, !dbg !50
  %643 = bitcast i32 %642 to float, !dbg !50
  %644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 1, i32 31), !dbg !50
  %645 = bitcast i32 %644 to float, !dbg !50
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !50
  %647 = bitcast i32 %646 to float, !dbg !50
  %648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 1, i32 31), !dbg !50
  %649 = bitcast i32 %648 to float, !dbg !50
  %650 = fsub float %645, %637, !dbg !36
  %651 = fadd float %643, %649, !dbg !39
  %652 = fcmp oeq float %651, 0.000000e+00, !dbg !40
  %653 = tail call float @llvm.nvvm.div.full(float %649, float %651), !dbg !41
  %654 = select i1 %652, float 0.000000e+00, float %653, !dbg !42
  %655 = fmul float %650, %654, !dbg !43
  %656 = fadd float %655, %637, !dbg !44
  %657 = fadd float %640, %647, !dbg !45
  %658 = fmul float %650, %650, !dbg !46
  %659 = fmul float %658, %643, !dbg !47
  %660 = fmul float %659, %654, !dbg !48
  %661 = fadd float %657, %660, !dbg !49
  %662 = icmp eq i32 %335, 0, !dbg !50
  %663 = and i1 %634, %662, !dbg !50
  %664 = bitcast float %656 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %664, i1 %663) #5, !dbg !50
  %665 = bitcast float %661 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %665, i1 %663) #5, !dbg !50
  %666 = bitcast float %651 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %666, i1 %663) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %667 = getelementptr float, ptr addrspace(3) @global_smem, i32 %626, !dbg !50
  %668 = load float, ptr addrspace(3) %667, align 8, !dbg !50
  %669 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %626, !dbg !50
  %670 = load float, ptr addrspace(3) %669, align 8, !dbg !50
  %671 = mul i32 %17, 6144, !dbg !51
  %672 = add i32 %671, 3072, !dbg !51
  %673 = tail call float @llvm.nvvm.div.full(float %670, float 3.072000e+03), !dbg !52
  %674 = fadd float %673, 0x3EB0C6F7A0000000, !dbg !53
  %675 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %676 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %677 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %678 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %679 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %680 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %681 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %682 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %683 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %684 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %686 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %688 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i95 = icmp eq i32 %690, 0, !dbg !54
  br i1 %.not.i95, label %693, label %691, !dbg !54

691:                                              ; preds = %__nv_rsqrtf.exit
  %692 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %674), !dbg !54
  br label %__nv_rsqrtf.exit97, !dbg !54

693:                                              ; preds = %__nv_rsqrtf.exit
  %694 = tail call float @llvm.nvvm.rsqrt.approx.f(float %674), !dbg !54
  br label %__nv_rsqrtf.exit97, !dbg !54

__nv_rsqrtf.exit97:                               ; preds = %691, %693
  %.0.i96 = phi float [ %692, %691 ], [ %694, %693 ], !dbg !54
  %695 = and i32 %25, 2032
  %696 = lshr i32 %25, 8
  %697 = and i32 %696, 4
  %698 = or disjoint i32 %697, %695
  %699 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %698
  %700 = or disjoint i32 %695, 4
  %701 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %697
  %702 = getelementptr inbounds nuw float, ptr addrspace(3) %701, i32 %700
  %703 = or disjoint i32 %698, 8
  %704 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %703
  %705 = or disjoint i32 %695, 12
  %706 = getelementptr inbounds nuw float, ptr addrspace(3) %701, i32 %705
  %707 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %29
  %708 = or disjoint i32 %29, 1024
  %gep = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %708
  %709 = or disjoint i32 %29, 1028
  %gep102 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), i32 %709
  %710 = zext nneg i32 %338 to i64, !dbg !55
  %711 = zext nneg i32 %29 to i64, !dbg !55
  %712 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep, i32 8
  %713 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep102, i32 8
  %714 = insertelement <2 x i1> poison, i1 %24, i64 0, !dbg !56
  %715 = shufflevector <2 x i1> %714, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !56
  %716 = insertelement <16 x i1> poison, i1 %24, i64 0, !dbg !56
  %717 = shufflevector <16 x i1> %716, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !56
  %718 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !57
  %719 = shufflevector <8 x i1> %718, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !57
  %720 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !57
  %721 = shufflevector <4 x i1> %720, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !57
  br label %722, !dbg !55

722:                                              ; preds = %__nv_rsqrtf.exit97, %722
  %indvars.iv182 = phi i64 [ 0, %__nv_rsqrtf.exit97 ], [ %indvars.iv.next183, %722 ]
  %723 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %988, %722 ]
  %724 = phi float [ 0x7FF0000000000000, %__nv_rsqrtf.exit97 ], [ %989, %722 ]
  %725 = phi <2 x float> [ splat (float 0xFFF0000000000000), %__nv_rsqrtf.exit97 ], [ %997, %722 ]
  %726 = phi <16 x float> [ <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, %__nv_rsqrtf.exit97 ], [ %998, %722 ]
  %727 = phi <8 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %991, %722 ]
  %728 = phi <4 x float> [ splat (float 0x7FF0000000000000), %__nv_rsqrtf.exit97 ], [ %990, %722 ]
  %729 = or disjoint i64 %indvars.iv182, %711, !dbg !58
  %730 = or disjoint i64 %indvars.iv182, %710, !dbg !58
  %731 = trunc nuw nsw i64 %indvars.iv182 to i32, !dbg !59
  %732 = add i32 %31, %731, !dbg !59
  %733 = add i32 %32, %731, !dbg !59
  %734 = trunc nuw nsw i64 %729 to i32, !dbg !59
  %735 = add i32 %671, %734, !dbg !59
  %736 = add i32 %672, %734, !dbg !59
  %737 = sext i32 %732 to i64, !dbg !60
  %738 = getelementptr bfloat, ptr addrspace(1) %0, i64 %737, !dbg !60
  %739 = sext i32 %733 to i64, !dbg !60
  %740 = getelementptr bfloat, ptr addrspace(1) %0, i64 %739, !dbg !60
  %741 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %738, i1 %23) #5, !dbg !61
  %742 = extractvalue { i32, i32, i32, i32 } %741, 0, !dbg !61
  %743 = bitcast i32 %742 to <2 x bfloat>, !dbg !61
  %744 = extractvalue { i32, i32, i32, i32 } %741, 1, !dbg !61
  %745 = bitcast i32 %744 to <2 x bfloat>, !dbg !61
  %746 = extractvalue { i32, i32, i32, i32 } %741, 2, !dbg !61
  %747 = bitcast i32 %746 to <2 x bfloat>, !dbg !61
  %748 = extractvalue { i32, i32, i32, i32 } %741, 3, !dbg !61
  %749 = bitcast i32 %748 to <2 x bfloat>, !dbg !61
  %750 = extractelement <2 x bfloat> %743, i64 0, !dbg !61
  %751 = extractelement <2 x bfloat> %743, i64 1, !dbg !61
  %752 = extractelement <2 x bfloat> %745, i64 0, !dbg !61
  %753 = extractelement <2 x bfloat> %745, i64 1, !dbg !61
  %754 = extractelement <2 x bfloat> %747, i64 0, !dbg !61
  %755 = extractelement <2 x bfloat> %747, i64 1, !dbg !61
  %756 = extractelement <2 x bfloat> %749, i64 0, !dbg !61
  %757 = extractelement <2 x bfloat> %749, i64 1, !dbg !61
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %740, i1 %23) #5, !dbg !61
  %759 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !61
  %760 = bitcast i32 %759 to <2 x bfloat>, !dbg !61
  %761 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !61
  %762 = bitcast i32 %761 to <2 x bfloat>, !dbg !61
  %763 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !61
  %764 = bitcast i32 %763 to <2 x bfloat>, !dbg !61
  %765 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !61
  %766 = bitcast i32 %765 to <2 x bfloat>, !dbg !61
  %767 = extractelement <2 x bfloat> %760, i64 0, !dbg !61
  %768 = extractelement <2 x bfloat> %760, i64 1, !dbg !61
  %769 = extractelement <2 x bfloat> %762, i64 0, !dbg !61
  %770 = extractelement <2 x bfloat> %762, i64 1, !dbg !61
  %771 = extractelement <2 x bfloat> %764, i64 0, !dbg !61
  %772 = extractelement <2 x bfloat> %764, i64 1, !dbg !61
  %773 = extractelement <2 x bfloat> %766, i64 0, !dbg !61
  %774 = extractelement <2 x bfloat> %766, i64 1, !dbg !61
  %775 = fpext bfloat %750 to float, !dbg !62
  %776 = fpext bfloat %751 to float, !dbg !62
  %777 = fpext bfloat %752 to float, !dbg !62
  %778 = fpext bfloat %753 to float, !dbg !62
  %779 = fpext bfloat %754 to float, !dbg !62
  %780 = fpext bfloat %755 to float, !dbg !62
  %781 = fpext bfloat %756 to float, !dbg !62
  %782 = fpext bfloat %757 to float, !dbg !62
  %783 = fpext bfloat %767 to float, !dbg !62
  %784 = fpext bfloat %768 to float, !dbg !62
  %785 = fpext bfloat %769 to float, !dbg !62
  %786 = fpext bfloat %770 to float, !dbg !62
  %787 = fpext bfloat %771 to float, !dbg !62
  %788 = fpext bfloat %772 to float, !dbg !62
  %789 = fpext bfloat %773 to float, !dbg !62
  %790 = fpext bfloat %774 to float, !dbg !62
  %791 = add nuw nsw i64 %729, 3072, !dbg !63
  %792 = getelementptr float, ptr addrspace(1) %1, i64 %791, !dbg !64
  %793 = getelementptr float, ptr addrspace(1) %1, i64 %730, !dbg !64
  %794 = getelementptr i8, ptr addrspace(1) %793, i64 12288, !dbg !64
  %795 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %792, i1 true) #5, !dbg !65
  %796 = extractvalue { i32, i32, i32, i32 } %795, 0, !dbg !65
  %797 = extractvalue { i32, i32, i32, i32 } %795, 1, !dbg !65
  %798 = extractvalue { i32, i32, i32, i32 } %795, 2, !dbg !65
  %799 = extractvalue { i32, i32, i32, i32 } %795, 3, !dbg !65
  %800 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %794, i1 true) #5, !dbg !65
  %801 = extractvalue { i32, i32, i32, i32 } %800, 0, !dbg !65
  %802 = extractvalue { i32, i32, i32, i32 } %800, 1, !dbg !65
  %803 = extractvalue { i32, i32, i32, i32 } %800, 2, !dbg !65
  %804 = extractvalue { i32, i32, i32, i32 } %800, 3, !dbg !65
  %805 = getelementptr bfloat, ptr addrspace(1) %2, i64 %791, !dbg !66
  %806 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %805, i1 true) #5, !dbg !67
  %807 = extractvalue { i32, i32, i32, i32 } %806, 0, !dbg !67
  %808 = bitcast i32 %807 to <2 x bfloat>, !dbg !67
  %809 = extractvalue { i32, i32, i32, i32 } %806, 1, !dbg !67
  %810 = bitcast i32 %809 to <2 x bfloat>, !dbg !67
  %811 = extractvalue { i32, i32, i32, i32 } %806, 2, !dbg !67
  %812 = bitcast i32 %811 to <2 x bfloat>, !dbg !67
  %813 = extractvalue { i32, i32, i32, i32 } %806, 3, !dbg !67
  %814 = bitcast i32 %813 to <2 x bfloat>, !dbg !67
  %815 = getelementptr float, ptr addrspace(1) %1, i64 %729, !dbg !68
  %816 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %815, i1 true) #5, !dbg !69
  %817 = extractvalue { i32, i32, i32, i32 } %816, 0, !dbg !69
  %818 = extractvalue { i32, i32, i32, i32 } %816, 1, !dbg !69
  %819 = extractvalue { i32, i32, i32, i32 } %816, 2, !dbg !69
  %820 = extractvalue { i32, i32, i32, i32 } %816, 3, !dbg !69
  %821 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %793, i1 true) #5, !dbg !69
  %822 = extractvalue { i32, i32, i32, i32 } %821, 0, !dbg !69
  %823 = extractvalue { i32, i32, i32, i32 } %821, 1, !dbg !69
  %824 = extractvalue { i32, i32, i32, i32 } %821, 2, !dbg !69
  %825 = extractvalue { i32, i32, i32, i32 } %821, 3, !dbg !69
  %826 = getelementptr bfloat, ptr addrspace(1) %2, i64 %729, !dbg !70
  %827 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %826, i1 true) #5, !dbg !71
  %828 = extractvalue { i32, i32, i32, i32 } %827, 0, !dbg !71
  %829 = bitcast i32 %828 to <2 x bfloat>, !dbg !71
  %830 = extractvalue { i32, i32, i32, i32 } %827, 1, !dbg !71
  %831 = bitcast i32 %830 to <2 x bfloat>, !dbg !71
  %832 = extractvalue { i32, i32, i32, i32 } %827, 2, !dbg !71
  %833 = bitcast i32 %832 to <2 x bfloat>, !dbg !71
  %834 = extractvalue { i32, i32, i32, i32 } %827, 3, !dbg !71
  %835 = bitcast i32 %834 to <2 x bfloat>, !dbg !71
  %836 = fsub float %775, %668, !dbg !72
  %837 = fsub float %776, %668, !dbg !72
  %838 = fsub float %777, %668, !dbg !72
  %839 = fsub float %778, %668, !dbg !72
  %840 = fsub float %779, %668, !dbg !72
  %841 = fsub float %780, %668, !dbg !72
  %842 = fsub float %781, %668, !dbg !72
  %843 = fsub float %782, %668, !dbg !72
  %844 = fsub float %783, %668, !dbg !72
  %845 = fsub float %784, %668, !dbg !72
  %846 = fsub float %785, %668, !dbg !72
  %847 = fsub float %786, %668, !dbg !72
  %848 = fsub float %787, %668, !dbg !72
  %849 = fsub float %788, %668, !dbg !72
  %850 = fsub float %789, %668, !dbg !72
  %851 = fsub float %790, %668, !dbg !72
  %852 = fmul float %.0.i96, %836, !dbg !73
  %853 = fmul float %.0.i96, %837, !dbg !73
  %854 = fmul float %.0.i96, %838, !dbg !73
  %855 = fmul float %.0.i96, %839, !dbg !73
  %856 = fmul float %.0.i96, %840, !dbg !73
  %857 = fmul float %.0.i96, %841, !dbg !73
  %858 = fmul float %.0.i96, %842, !dbg !73
  %859 = fmul float %.0.i96, %843, !dbg !73
  %860 = fmul float %.0.i96, %844, !dbg !73
  %861 = fmul float %.0.i96, %845, !dbg !73
  %862 = fmul float %.0.i96, %846, !dbg !73
  %863 = fmul float %.0.i96, %847, !dbg !73
  %864 = fmul float %.0.i96, %848, !dbg !73
  %865 = fmul float %.0.i96, %849, !dbg !73
  %866 = fmul float %.0.i96, %850, !dbg !73
  %867 = fmul float %.0.i96, %851, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %868 = bitcast float %852 to i32, !dbg !73
  %869 = bitcast float %853 to i32, !dbg !73
  %870 = bitcast float %854 to i32, !dbg !73
  %871 = bitcast float %855 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %699, i32 %868, i32 %869, i32 %870, i32 %871, i1 true) #5, !dbg !73
  %872 = bitcast float %856 to i32, !dbg !73
  %873 = bitcast float %857 to i32, !dbg !73
  %874 = bitcast float %858 to i32, !dbg !73
  %875 = bitcast float %859 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %702, i32 %872, i32 %873, i32 %874, i32 %875, i1 true) #5, !dbg !73
  %876 = bitcast float %860 to i32, !dbg !73
  %877 = bitcast float %861 to i32, !dbg !73
  %878 = bitcast float %862 to i32, !dbg !73
  %879 = bitcast float %863 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %704, i32 %876, i32 %877, i32 %878, i32 %879, i1 true) #5, !dbg !73
  %880 = bitcast float %864 to i32, !dbg !73
  %881 = bitcast float %865 to i32, !dbg !73
  %882 = bitcast float %866 to i32, !dbg !73
  %883 = bitcast float %867 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %706, i32 %880, i32 %881, i32 %882, i32 %883, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %884 = fcmp uno <16 x float> %726, zeroinitializer, !dbg !74
  %885 = fcmp uno float %723, 0.000000e+00, !dbg !76
  %886 = fcmp uno float %724, 0.000000e+00, !dbg !76
  %887 = fcmp uno <4 x float> %728, zeroinitializer, !dbg !76
  %888 = fcmp uno <8 x float> %727, zeroinitializer, !dbg !76
  %889 = fcmp uno <2 x float> %725, zeroinitializer, !dbg !74
  %890 = insertelement <2 x i32> poison, i32 %796, i64 0, !dbg !65
  %891 = insertelement <2 x i32> %890, i32 %797, i64 1, !dbg !65
  %892 = bitcast <2 x i32> %891 to <2 x float>, !dbg !65
  %893 = fpext <2 x bfloat> %808 to <2 x float>, !dbg !78
  %894 = insertelement <2 x i32> poison, i32 %817, i64 0, !dbg !69
  %895 = insertelement <2 x i32> %894, i32 %818, i64 1, !dbg !69
  %896 = bitcast <2 x i32> %895 to <2 x float>, !dbg !69
  %897 = fpext <2 x bfloat> %829 to <2 x float>, !dbg !79
  %898 = load <2 x float>, ptr addrspace(3) %gep, align 16, !dbg !73
  %899 = fadd <2 x float> %892, %893, !dbg !80
  %900 = fadd <2 x float> %899, splat (float 1.000000e+00), !dbg !81
  %901 = fmul <2 x float> %900, %898, !dbg !82
  %902 = fadd <2 x float> %896, %897, !dbg !83
  %903 = fadd <2 x float> %902, %901, !dbg !84
  %904 = extractelement <2 x float> %903, i64 0, !dbg !85
  %905 = extractelement <2 x float> %903, i64 1, !dbg !85
  %906 = fcmp ogt <2 x float> %725, %903, !dbg !86
  %907 = or <2 x i1> %889, %906, !dbg !87
  %908 = select <2 x i1> %907, <2 x float> %725, <2 x float> %903, !dbg !88
  %909 = insertelement <2 x i32> poison, i32 %798, i64 0, !dbg !65
  %910 = insertelement <2 x i32> %909, i32 %799, i64 1, !dbg !65
  %911 = bitcast <2 x i32> %910 to <2 x float>, !dbg !65
  %912 = insertelement <4 x i32> poison, i32 %801, i64 0, !dbg !65
  %913 = insertelement <4 x i32> %912, i32 %802, i64 1, !dbg !65
  %914 = insertelement <4 x i32> %913, i32 %803, i64 2, !dbg !65
  %915 = insertelement <4 x i32> %914, i32 %804, i64 3, !dbg !65
  %916 = bitcast <4 x i32> %915 to <4 x float>, !dbg !65
  %917 = fpext <2 x bfloat> %810 to <2 x float>, !dbg !78
  %918 = shufflevector <2 x bfloat> %812, <2 x bfloat> %814, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !78
  %919 = fpext <4 x bfloat> %918 to <4 x float>, !dbg !78
  %920 = insertelement <2 x i32> poison, i32 %819, i64 0, !dbg !69
  %921 = insertelement <2 x i32> %920, i32 %820, i64 1, !dbg !69
  %922 = bitcast <2 x i32> %921 to <2 x float>, !dbg !69
  %923 = insertelement <4 x i32> poison, i32 %822, i64 0, !dbg !69
  %924 = insertelement <4 x i32> %923, i32 %823, i64 1, !dbg !69
  %925 = insertelement <4 x i32> %924, i32 %824, i64 2, !dbg !69
  %926 = insertelement <4 x i32> %925, i32 %825, i64 3, !dbg !69
  %927 = bitcast <4 x i32> %926 to <4 x float>, !dbg !69
  %928 = fpext <2 x bfloat> %831 to <2 x float>, !dbg !79
  %929 = shufflevector <2 x bfloat> %833, <2 x bfloat> %835, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  %930 = fpext <4 x bfloat> %929 to <4 x float>, !dbg !79
  %931 = load <8 x float>, ptr addrspace(3) %707, align 16, !dbg !73
  %932 = load <4 x float>, ptr addrspace(3) %712, align 8, !dbg !73
  %933 = load <2 x float>, ptr addrspace(3) %713, align 8, !dbg !73
  %934 = fadd <2 x float> %911, %917, !dbg !80
  %935 = fadd <4 x float> %916, %919, !dbg !80
  %936 = fadd <2 x float> %934, splat (float 1.000000e+00), !dbg !81
  %937 = fadd <4 x float> %935, splat (float 1.000000e+00), !dbg !81
  %938 = fadd <2 x float> %922, %928, !dbg !83
  %939 = fadd <4 x float> %927, %930, !dbg !83
  %940 = shufflevector <2 x float> %900, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %941 = shufflevector <4 x float> %937, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %942 = shufflevector <8 x float> %940, <8 x float> %941, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !82
  %943 = shufflevector <2 x float> %936, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %944 = shufflevector <8 x float> %942, <8 x float> %943, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !82
  %945 = shufflevector <8 x float> %944, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !82
  %946 = shufflevector <8 x float> %931, <8 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1>, !dbg !82
  %947 = shufflevector <8 x float> %931, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %948 = shufflevector <16 x float> %947, <16 x float> %946, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !82
  %949 = shufflevector <4 x float> %932, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %950 = shufflevector <16 x float> %948, <16 x float> %949, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !82
  %951 = shufflevector <2 x float> %933, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !82
  %952 = shufflevector <16 x float> %950, <16 x float> %951, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !82
  %953 = fmul <16 x float> %945, %952, !dbg !82
  %954 = shufflevector <2 x float> %902, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %955 = shufflevector <4 x float> %939, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %956 = shufflevector <8 x float> %954, <8 x float> %955, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>, !dbg !84
  %957 = shufflevector <2 x float> %938, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %958 = shufflevector <8 x float> %956, <8 x float> %957, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 6, i32 7>, !dbg !84
  %959 = shufflevector <8 x float> %958, <8 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1>, !dbg !84
  %960 = fadd <16 x float> %959, %953, !dbg !84
  %961 = extractelement <16 x float> %960, i64 2, !dbg !85
  %962 = fcmp olt float %723, %961, !dbg !89
  %963 = extractelement <16 x float> %960, i64 3, !dbg !85
  %964 = fcmp olt float %724, %963, !dbg !89
  %965 = extractelement <16 x float> %960, i64 4, !dbg !85
  %966 = extractelement <16 x float> %960, i64 5, !dbg !85
  %967 = extractelement <16 x float> %960, i64 6, !dbg !85
  %968 = extractelement <16 x float> %960, i64 7, !dbg !85
  %969 = extractelement <16 x float> %960, i64 8, !dbg !85
  %970 = extractelement <16 x float> %960, i64 9, !dbg !85
  %971 = extractelement <16 x float> %960, i64 10, !dbg !85
  %972 = extractelement <16 x float> %960, i64 11, !dbg !85
  %973 = extractelement <16 x float> %960, i64 12, !dbg !85
  %974 = extractelement <16 x float> %960, i64 13, !dbg !85
  %975 = or i1 %885, %962, !dbg !90
  %976 = or i1 %886, %964, !dbg !90
  %977 = select i1 %975, float %723, float %961, !dbg !91
  %978 = select i1 %976, float %724, float %963, !dbg !91
  %979 = shufflevector <2 x float> %903, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %980 = shufflevector <16 x float> %979, <16 x float> %960, <4 x i32> <i32 1, i32 0, i32 21, i32 20>, !dbg !89
  %981 = fcmp olt <4 x float> %728, %980, !dbg !89
  %982 = or <4 x i1> %887, %981, !dbg !90
  %983 = select <4 x i1> %982, <4 x float> %728, <4 x float> %980, !dbg !91
  %984 = shufflevector <16 x float> %960, <16 x float> poison, <8 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13>, !dbg !89
  %985 = fcmp olt <8 x float> %727, %984, !dbg !89
  %986 = or <8 x i1> %888, %985, !dbg !90
  %987 = select <8 x i1> %986, <8 x float> %727, <8 x float> %984, !dbg !91
  %988 = select i1 %24, float %977, float %723, !dbg !57
  %989 = select i1 %24, float %978, float %724, !dbg !57
  %990 = select <4 x i1> %721, <4 x float> %983, <4 x float> %728, !dbg !57
  %991 = select <8 x i1> %719, <8 x float> %987, <8 x float> %727, !dbg !57
  %992 = fcmp ogt <16 x float> %726, %960, !dbg !86
  %993 = fcmp olt <16 x float> %726, %960, !dbg !86
  %994 = shufflevector <16 x i1> %992, <16 x i1> %993, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 30, i32 31>, !dbg !86
  %995 = or <16 x i1> %884, %994, !dbg !87
  %996 = select <16 x i1> %995, <16 x float> %726, <16 x float> %960, !dbg !88
  %997 = select <2 x i1> %715, <2 x float> %908, <2 x float> %725, !dbg !56
  %998 = select <16 x i1> %717, <16 x float> %996, <16 x float> %726, !dbg !56
  %999 = sext i32 %735 to i64, !dbg !92
  %1000 = getelementptr bfloat, ptr addrspace(1) %3, i64 %999, !dbg !92
  %1001 = sext i32 %736 to i64, !dbg !92
  %1002 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1001, !dbg !92
  %1003 = extractelement <16 x float> %960, i64 0, !dbg !85
  %1004 = fptrunc float %1003 to bfloat, !dbg !85
  %1005 = extractelement <16 x float> %960, i64 1, !dbg !85
  %1006 = fptrunc float %1005 to bfloat, !dbg !85
  %1007 = fptrunc float %961 to bfloat, !dbg !85
  %1008 = fptrunc float %963 to bfloat, !dbg !85
  %1009 = fptrunc float %965 to bfloat, !dbg !85
  %1010 = fptrunc float %966 to bfloat, !dbg !85
  %1011 = fptrunc float %967 to bfloat, !dbg !85
  %1012 = fptrunc float %968 to bfloat, !dbg !85
  %1013 = fptrunc float %904 to bfloat, !dbg !85
  %1014 = fptrunc float %905 to bfloat, !dbg !85
  %1015 = fptrunc float %969 to bfloat, !dbg !85
  %1016 = fptrunc float %970 to bfloat, !dbg !85
  %1017 = fptrunc float %971 to bfloat, !dbg !85
  %1018 = fptrunc float %972 to bfloat, !dbg !85
  %1019 = fptrunc float %973 to bfloat, !dbg !85
  %1020 = fptrunc float %974 to bfloat, !dbg !85
  %1021 = insertelement <2 x bfloat> poison, bfloat %1004, i64 0, !dbg !85
  %1022 = insertelement <2 x bfloat> %1021, bfloat %1006, i64 1, !dbg !85
  %1023 = bitcast <2 x bfloat> %1022 to i32, !dbg !85
  %1024 = insertelement <2 x bfloat> poison, bfloat %1007, i64 0, !dbg !85
  %1025 = insertelement <2 x bfloat> %1024, bfloat %1008, i64 1, !dbg !85
  %1026 = bitcast <2 x bfloat> %1025 to i32, !dbg !85
  %1027 = insertelement <2 x bfloat> poison, bfloat %1009, i64 0, !dbg !85
  %1028 = insertelement <2 x bfloat> %1027, bfloat %1010, i64 1, !dbg !85
  %1029 = bitcast <2 x bfloat> %1028 to i32, !dbg !85
  %1030 = insertelement <2 x bfloat> poison, bfloat %1011, i64 0, !dbg !85
  %1031 = insertelement <2 x bfloat> %1030, bfloat %1012, i64 1, !dbg !85
  %1032 = bitcast <2 x bfloat> %1031 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1023, i32 %1026, i32 %1029, i32 %1032, ptr addrspace(1) %1000, i1 %24) #5, !dbg !85
  %1033 = insertelement <2 x bfloat> poison, bfloat %1013, i64 0, !dbg !85
  %1034 = insertelement <2 x bfloat> %1033, bfloat %1014, i64 1, !dbg !85
  %1035 = bitcast <2 x bfloat> %1034 to i32, !dbg !85
  %1036 = insertelement <2 x bfloat> poison, bfloat %1015, i64 0, !dbg !85
  %1037 = insertelement <2 x bfloat> %1036, bfloat %1016, i64 1, !dbg !85
  %1038 = bitcast <2 x bfloat> %1037 to i32, !dbg !85
  %1039 = insertelement <2 x bfloat> poison, bfloat %1017, i64 0, !dbg !85
  %1040 = insertelement <2 x bfloat> %1039, bfloat %1018, i64 1, !dbg !85
  %1041 = bitcast <2 x bfloat> %1040 to i32, !dbg !85
  %1042 = insertelement <2 x bfloat> poison, bfloat %1019, i64 0, !dbg !85
  %1043 = insertelement <2 x bfloat> %1042, bfloat %1020, i64 1, !dbg !85
  %1044 = bitcast <2 x bfloat> %1043 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1035, i32 %1038, i32 %1041, i32 %1044, ptr addrspace(1) %1002, i1 %24) #5, !dbg !85
  %indvars.iv.next183 = add nuw nsw i64 %indvars.iv182, 1024, !dbg !55
  %1045 = icmp samesign ult i64 %indvars.iv182, 2048, !dbg !55
  br i1 %1045, label %722, label %1046, !dbg !55

1046:                                             ; preds = %722
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1047 = extractelement <16 x float> %998, i64 14, !dbg !95
  %1048 = extractelement <16 x float> %998, i64 15, !dbg !95
  %1049 = fcmp olt float %1047, %1048, !dbg !95
  %1050 = fcmp uno float %1047, 0.000000e+00, !dbg !96
  %1051 = or i1 %1049, %1050, !dbg !97
  %1052 = select i1 %1051, float %1047, float %1048, !dbg !98
  %1053 = fcmp olt float %1052, %988, !dbg !95
  %1054 = fcmp uno float %1052, 0.000000e+00, !dbg !96
  %1055 = or i1 %1053, %1054, !dbg !97
  %1056 = select i1 %1055, float %1052, float %988, !dbg !98
  %1057 = fcmp olt float %1056, %989, !dbg !95
  %1058 = fcmp uno float %1056, 0.000000e+00, !dbg !96
  %1059 = or i1 %1057, %1058, !dbg !97
  %1060 = select i1 %1059, float %1056, float %989, !dbg !98
  %1061 = extractelement <4 x float> %990, i64 3, !dbg !95
  %1062 = fcmp olt float %1060, %1061, !dbg !95
  %1063 = fcmp uno float %1060, 0.000000e+00, !dbg !96
  %1064 = or i1 %1062, %1063, !dbg !97
  %1065 = select i1 %1064, float %1060, float %1061, !dbg !98
  %1066 = extractelement <4 x float> %990, i64 2, !dbg !95
  %1067 = fcmp olt float %1065, %1066, !dbg !95
  %1068 = fcmp uno float %1065, 0.000000e+00, !dbg !96
  %1069 = or i1 %1067, %1068, !dbg !97
  %1070 = select i1 %1069, float %1065, float %1066, !dbg !98
  %1071 = extractelement <8 x float> %991, i64 0, !dbg !95
  %1072 = fcmp olt float %1070, %1071, !dbg !95
  %1073 = fcmp uno float %1070, 0.000000e+00, !dbg !96
  %1074 = or i1 %1072, %1073, !dbg !97
  %1075 = select i1 %1074, float %1070, float %1071, !dbg !98
  %1076 = extractelement <8 x float> %991, i64 1, !dbg !95
  %1077 = fcmp olt float %1075, %1076, !dbg !95
  %1078 = fcmp uno float %1075, 0.000000e+00, !dbg !96
  %1079 = or i1 %1077, %1078, !dbg !97
  %1080 = select i1 %1079, float %1075, float %1076, !dbg !98
  %1081 = extractelement <4 x float> %990, i64 0, !dbg !95
  %1082 = extractelement <4 x float> %990, i64 1, !dbg !95
  %1083 = fcmp olt float %1082, %1081, !dbg !95
  %1084 = fcmp uno float %1082, 0.000000e+00, !dbg !96
  %1085 = or i1 %1083, %1084, !dbg !97
  %1086 = select i1 %1085, float %1082, float %1081, !dbg !98
  %1087 = extractelement <8 x float> %991, i64 2, !dbg !95
  %1088 = fcmp olt float %1086, %1087, !dbg !95
  %1089 = fcmp uno float %1086, 0.000000e+00, !dbg !96
  %1090 = or i1 %1088, %1089, !dbg !97
  %1091 = select i1 %1090, float %1086, float %1087, !dbg !98
  %1092 = extractelement <8 x float> %991, i64 3, !dbg !95
  %1093 = fcmp olt float %1091, %1092, !dbg !95
  %1094 = fcmp uno float %1091, 0.000000e+00, !dbg !96
  %1095 = or i1 %1093, %1094, !dbg !97
  %1096 = select i1 %1095, float %1091, float %1092, !dbg !98
  %1097 = extractelement <8 x float> %991, i64 4, !dbg !95
  %1098 = fcmp olt float %1096, %1097, !dbg !95
  %1099 = fcmp uno float %1096, 0.000000e+00, !dbg !96
  %1100 = or i1 %1098, %1099, !dbg !97
  %1101 = select i1 %1100, float %1096, float %1097, !dbg !98
  %1102 = extractelement <8 x float> %991, i64 5, !dbg !95
  %1103 = fcmp olt float %1101, %1102, !dbg !95
  %1104 = fcmp uno float %1101, 0.000000e+00, !dbg !96
  %1105 = or i1 %1103, %1104, !dbg !97
  %1106 = select i1 %1105, float %1101, float %1102, !dbg !98
  %1107 = extractelement <8 x float> %991, i64 6, !dbg !95
  %1108 = fcmp olt float %1106, %1107, !dbg !95
  %1109 = fcmp uno float %1106, 0.000000e+00, !dbg !96
  %1110 = or i1 %1108, %1109, !dbg !97
  %1111 = select i1 %1110, float %1106, float %1107, !dbg !98
  %1112 = extractelement <8 x float> %991, i64 7, !dbg !95
  %1113 = fcmp olt float %1111, %1112, !dbg !95
  %1114 = fcmp uno float %1111, 0.000000e+00, !dbg !96
  %1115 = or i1 %1113, %1114, !dbg !97
  %1116 = select i1 %1115, float %1111, float %1112, !dbg !98
  %1117 = bitcast float %1080 to i32, !dbg !93
  %1118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1117, i32 16, i32 31), !dbg !93
  %1119 = bitcast i32 %1118 to float, !dbg !93
  %1120 = fcmp olt float %1080, %1119, !dbg !95
  %1121 = fcmp uno float %1080, 0.000000e+00, !dbg !96
  %1122 = or i1 %1121, %1120, !dbg !97
  %1123 = select i1 %1122, float %1080, float %1119, !dbg !98
  %1124 = bitcast float %1123 to i32, !dbg !93
  %1125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1124, i32 8, i32 31), !dbg !93
  %1126 = bitcast i32 %1125 to float, !dbg !93
  %1127 = fcmp olt float %1123, %1126, !dbg !95
  %1128 = fcmp uno float %1123, 0.000000e+00, !dbg !96
  %1129 = or i1 %1127, %1128, !dbg !97
  %1130 = select i1 %1129, float %1123, float %1126, !dbg !98
  %1131 = bitcast float %1130 to i32, !dbg !93
  %1132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1131, i32 4, i32 31), !dbg !93
  %1133 = bitcast i32 %1132 to float, !dbg !93
  %1134 = fcmp olt float %1130, %1133, !dbg !95
  %1135 = fcmp uno float %1130, 0.000000e+00, !dbg !96
  %1136 = or i1 %1134, %1135, !dbg !97
  %1137 = select i1 %1136, float %1130, float %1133, !dbg !98
  %1138 = bitcast float %1137 to i32, !dbg !93
  %1139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1138, i32 2, i32 31), !dbg !93
  %1140 = bitcast i32 %1139 to float, !dbg !93
  %1141 = fcmp olt float %1137, %1140, !dbg !95
  %1142 = fcmp uno float %1137, 0.000000e+00, !dbg !96
  %1143 = or i1 %1141, %1142, !dbg !97
  %1144 = select i1 %1143, float %1137, float %1140, !dbg !98
  %1145 = bitcast float %1144 to i32, !dbg !93
  %1146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1145, i32 1, i32 31), !dbg !93
  %1147 = bitcast i32 %1146 to float, !dbg !93
  %1148 = fcmp olt float %1144, %1147, !dbg !95
  %1149 = fcmp uno float %1144, 0.000000e+00, !dbg !96
  %1150 = or i1 %1148, %1149, !dbg !97
  %1151 = bitcast float %1116 to i32, !dbg !93
  %1152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1151, i32 16, i32 31), !dbg !93
  %1153 = bitcast i32 %1152 to float, !dbg !93
  %1154 = fcmp olt float %1116, %1153, !dbg !95
  %1155 = fcmp uno float %1116, 0.000000e+00, !dbg !96
  %1156 = or i1 %1155, %1154, !dbg !97
  %1157 = select i1 %1156, float %1116, float %1153, !dbg !98
  %1158 = bitcast float %1157 to i32, !dbg !93
  %1159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1158, i32 8, i32 31), !dbg !93
  %1160 = bitcast i32 %1159 to float, !dbg !93
  %1161 = fcmp olt float %1157, %1160, !dbg !95
  %1162 = fcmp uno float %1157, 0.000000e+00, !dbg !96
  %1163 = or i1 %1161, %1162, !dbg !97
  %1164 = select i1 %1163, float %1157, float %1160, !dbg !98
  %1165 = bitcast float %1164 to i32, !dbg !93
  %1166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1165, i32 4, i32 31), !dbg !93
  %1167 = bitcast i32 %1166 to float, !dbg !93
  %1168 = fcmp olt float %1164, %1167, !dbg !95
  %1169 = fcmp uno float %1164, 0.000000e+00, !dbg !96
  %1170 = or i1 %1168, %1169, !dbg !97
  %1171 = select i1 %1170, float %1164, float %1167, !dbg !98
  %1172 = bitcast float %1171 to i32, !dbg !93
  %1173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1172, i32 2, i32 31), !dbg !93
  %1174 = bitcast i32 %1173 to float, !dbg !93
  %1175 = fcmp olt float %1171, %1174, !dbg !95
  %1176 = fcmp uno float %1171, 0.000000e+00, !dbg !96
  %1177 = or i1 %1175, %1176, !dbg !97
  %1178 = select i1 %1177, float %1171, float %1174, !dbg !98
  %1179 = bitcast float %1178 to i32, !dbg !93
  %1180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1179, i32 1, i32 31), !dbg !93
  %1181 = bitcast i32 %1180 to float, !dbg !93
  %1182 = fcmp olt float %1178, %1181, !dbg !95
  %1183 = fcmp uno float %1178, 0.000000e+00, !dbg !96
  %1184 = or i1 %1182, %1183, !dbg !97
  %1185 = and i32 %334, 3, !dbg !93
  %1186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1185, !dbg !93
  %1187 = select i1 %1150, i32 %1145, i32 %1146, !dbg !98
  %1188 = insertelement <1 x i32> poison, i32 %1187, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1186, <1 x i32> %1188, i1 %625) #5, !dbg !93
  %1189 = or disjoint i32 %1185, 4, !dbg !93
  %1190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1189, !dbg !93
  %1191 = select i1 %1184, i32 %1179, i32 %1180, !dbg !98
  %1192 = insertelement <1 x i32> poison, i32 %1191, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1190, <1 x i32> %1192, i1 %625) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1193 = icmp slt i32 %19, 8, !dbg !93
  %1194 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %635, i1 %1193) #5, !dbg !93
  %1195 = bitcast i32 %1194 to float, !dbg !93
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1194, i32 2, i32 31), !dbg !93
  %1197 = bitcast i32 %1196 to float, !dbg !93
  %1198 = fcmp olt float %1195, %1197, !dbg !95
  %1199 = fcmp uno float %1195, 0.000000e+00, !dbg !96
  %1200 = or i1 %1199, %1198, !dbg !97
  %1201 = select i1 %1200, float %1195, float %1197, !dbg !98
  %1202 = bitcast float %1201 to i32, !dbg !93
  %1203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1202, i32 1, i32 31), !dbg !93
  %1204 = bitcast i32 %1203 to float, !dbg !93
  %1205 = fcmp olt float %1201, %1204, !dbg !95
  %1206 = fcmp uno float %1201, 0.000000e+00, !dbg !96
  %1207 = or i1 %1205, %1206, !dbg !97
  %1208 = and i32 %19, 3, !dbg !93
  %1209 = icmp eq i32 %1208, 0, !dbg !93
  %1210 = and i1 %1193, %1209, !dbg !93
  %1211 = select i1 %1207, i32 %1202, i32 %1203, !dbg !98
  %1212 = insertelement <1 x i32> poison, i32 %1211, i64 0, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %1212, i1 %1210) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %1213 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  %1214 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1215 = bitcast float %1213 to i32, !dbg !99
  %1216 = bitcast float %1214 to i32, !dbg !99
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1215, i32 %1216, i1 true) #5, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %1217 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %335, !dbg !99
  %1218 = load float, ptr addrspace(3) %1217, align 4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1219 = extractelement <16 x float> %998, i64 0, !dbg !102
  %1220 = extractelement <16 x float> %998, i64 1, !dbg !102
  %1221 = fcmp ogt float %1219, %1220, !dbg !102
  %1222 = fcmp uno float %1219, 0.000000e+00, !dbg !103
  %1223 = or i1 %1221, %1222, !dbg !104
  %1224 = select i1 %1223, float %1219, float %1220, !dbg !105
  %1225 = extractelement <16 x float> %998, i64 2, !dbg !102
  %1226 = fcmp ogt float %1224, %1225, !dbg !102
  %1227 = fcmp uno float %1224, 0.000000e+00, !dbg !103
  %1228 = or i1 %1226, %1227, !dbg !104
  %1229 = select i1 %1228, float %1224, float %1225, !dbg !105
  %1230 = extractelement <16 x float> %998, i64 3, !dbg !102
  %1231 = fcmp ogt float %1229, %1230, !dbg !102
  %1232 = fcmp uno float %1229, 0.000000e+00, !dbg !103
  %1233 = or i1 %1231, %1232, !dbg !104
  %1234 = select i1 %1233, float %1229, float %1230, !dbg !105
  %1235 = extractelement <16 x float> %998, i64 4, !dbg !102
  %1236 = fcmp ogt float %1234, %1235, !dbg !102
  %1237 = fcmp uno float %1234, 0.000000e+00, !dbg !103
  %1238 = or i1 %1236, %1237, !dbg !104
  %1239 = select i1 %1238, float %1234, float %1235, !dbg !105
  %1240 = extractelement <16 x float> %998, i64 5, !dbg !102
  %1241 = fcmp ogt float %1239, %1240, !dbg !102
  %1242 = fcmp uno float %1239, 0.000000e+00, !dbg !103
  %1243 = or i1 %1241, %1242, !dbg !104
  %1244 = select i1 %1243, float %1239, float %1240, !dbg !105
  %1245 = extractelement <16 x float> %998, i64 6, !dbg !102
  %1246 = fcmp ogt float %1244, %1245, !dbg !102
  %1247 = fcmp uno float %1244, 0.000000e+00, !dbg !103
  %1248 = or i1 %1246, %1247, !dbg !104
  %1249 = select i1 %1248, float %1244, float %1245, !dbg !105
  %1250 = extractelement <16 x float> %998, i64 7, !dbg !102
  %1251 = fcmp ogt float %1249, %1250, !dbg !102
  %1252 = fcmp uno float %1249, 0.000000e+00, !dbg !103
  %1253 = or i1 %1251, %1252, !dbg !104
  %1254 = select i1 %1253, float %1249, float %1250, !dbg !105
  %1255 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %997, <2 x i32> <i32 0, i32 2>, !dbg !102
  %1256 = fcmp ogt <2 x float> %1255, %997, !dbg !102
  %1257 = fcmp uno <2 x float> %1255, %997, !dbg !102
  %shift = shufflevector <2 x i1> %1256, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !104
  %1258 = or <2 x i1> %shift, %1257, !dbg !104
  %1259 = extractelement <2 x i1> %1258, i64 0, !dbg !104
  %1260 = extractelement <2 x float> %997, i64 0, !dbg !105
  %1261 = extractelement <2 x float> %997, i64 1, !dbg !105
  %1262 = select i1 %1259, float %1260, float %1261, !dbg !105
  %1263 = extractelement <16 x float> %998, i64 8, !dbg !102
  %1264 = fcmp ogt float %1262, %1263, !dbg !102
  %1265 = fcmp uno float %1262, 0.000000e+00, !dbg !103
  %1266 = or i1 %1264, %1265, !dbg !104
  %1267 = select i1 %1266, float %1262, float %1263, !dbg !105
  %1268 = extractelement <16 x float> %998, i64 9, !dbg !102
  %1269 = fcmp ogt float %1267, %1268, !dbg !102
  %1270 = fcmp uno float %1267, 0.000000e+00, !dbg !103
  %1271 = or i1 %1269, %1270, !dbg !104
  %1272 = select i1 %1271, float %1267, float %1268, !dbg !105
  %1273 = extractelement <16 x float> %998, i64 10, !dbg !102
  %1274 = fcmp ogt float %1272, %1273, !dbg !102
  %1275 = fcmp uno float %1272, 0.000000e+00, !dbg !103
  %1276 = or i1 %1274, %1275, !dbg !104
  %1277 = select i1 %1276, float %1272, float %1273, !dbg !105
  %1278 = extractelement <16 x float> %998, i64 11, !dbg !102
  %1279 = fcmp ogt float %1277, %1278, !dbg !102
  %1280 = fcmp uno float %1277, 0.000000e+00, !dbg !103
  %1281 = or i1 %1279, %1280, !dbg !104
  %1282 = select i1 %1281, float %1277, float %1278, !dbg !105
  %1283 = extractelement <16 x float> %998, i64 12, !dbg !102
  %1284 = fcmp ogt float %1282, %1283, !dbg !102
  %1285 = fcmp uno float %1282, 0.000000e+00, !dbg !103
  %1286 = or i1 %1284, %1285, !dbg !104
  %1287 = select i1 %1286, float %1282, float %1283, !dbg !105
  %1288 = extractelement <16 x float> %998, i64 13, !dbg !102
  %1289 = fcmp ogt float %1287, %1288, !dbg !102
  %1290 = fcmp uno float %1287, 0.000000e+00, !dbg !103
  %1291 = or i1 %1289, %1290, !dbg !104
  %1292 = select i1 %1291, float %1287, float %1288, !dbg !105
  %1293 = bitcast float %1254 to i32, !dbg !100
  %1294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1293, i32 16, i32 31), !dbg !100
  %1295 = bitcast i32 %1294 to float, !dbg !100
  %1296 = fcmp ogt float %1254, %1295, !dbg !102
  %1297 = fcmp uno float %1254, 0.000000e+00, !dbg !103
  %1298 = or i1 %1297, %1296, !dbg !104
  %1299 = select i1 %1298, float %1254, float %1295, !dbg !105
  %1300 = bitcast float %1299 to i32, !dbg !100
  %1301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1300, i32 8, i32 31), !dbg !100
  %1302 = bitcast i32 %1301 to float, !dbg !100
  %1303 = fcmp ogt float %1299, %1302, !dbg !102
  %1304 = fcmp uno float %1299, 0.000000e+00, !dbg !103
  %1305 = or i1 %1303, %1304, !dbg !104
  %1306 = select i1 %1305, float %1299, float %1302, !dbg !105
  %1307 = bitcast float %1306 to i32, !dbg !100
  %1308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1307, i32 4, i32 31), !dbg !100
  %1309 = bitcast i32 %1308 to float, !dbg !100
  %1310 = fcmp ogt float %1306, %1309, !dbg !102
  %1311 = fcmp uno float %1306, 0.000000e+00, !dbg !103
  %1312 = or i1 %1310, %1311, !dbg !104
  %1313 = select i1 %1312, float %1306, float %1309, !dbg !105
  %1314 = bitcast float %1313 to i32, !dbg !100
  %1315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1314, i32 2, i32 31), !dbg !100
  %1316 = bitcast i32 %1315 to float, !dbg !100
  %1317 = fcmp ogt float %1313, %1316, !dbg !102
  %1318 = fcmp uno float %1313, 0.000000e+00, !dbg !103
  %1319 = or i1 %1317, %1318, !dbg !104
  %1320 = select i1 %1319, float %1313, float %1316, !dbg !105
  %1321 = bitcast float %1320 to i32, !dbg !100
  %1322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1321, i32 1, i32 31), !dbg !100
  %1323 = bitcast i32 %1322 to float, !dbg !100
  %1324 = fcmp ogt float %1320, %1323, !dbg !102
  %1325 = fcmp uno float %1320, 0.000000e+00, !dbg !103
  %1326 = or i1 %1324, %1325, !dbg !104
  %1327 = bitcast float %1292 to i32, !dbg !100
  %1328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1327, i32 16, i32 31), !dbg !100
  %1329 = bitcast i32 %1328 to float, !dbg !100
  %1330 = fcmp ogt float %1292, %1329, !dbg !102
  %1331 = fcmp uno float %1292, 0.000000e+00, !dbg !103
  %1332 = or i1 %1331, %1330, !dbg !104
  %1333 = select i1 %1332, float %1292, float %1329, !dbg !105
  %1334 = bitcast float %1333 to i32, !dbg !100
  %1335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1334, i32 8, i32 31), !dbg !100
  %1336 = bitcast i32 %1335 to float, !dbg !100
  %1337 = fcmp ogt float %1333, %1336, !dbg !102
  %1338 = fcmp uno float %1333, 0.000000e+00, !dbg !103
  %1339 = or i1 %1337, %1338, !dbg !104
  %1340 = select i1 %1339, float %1333, float %1336, !dbg !105
  %1341 = bitcast float %1340 to i32, !dbg !100
  %1342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1341, i32 4, i32 31), !dbg !100
  %1343 = bitcast i32 %1342 to float, !dbg !100
  %1344 = fcmp ogt float %1340, %1343, !dbg !102
  %1345 = fcmp uno float %1340, 0.000000e+00, !dbg !103
  %1346 = or i1 %1344, %1345, !dbg !104
  %1347 = select i1 %1346, float %1340, float %1343, !dbg !105
  %1348 = bitcast float %1347 to i32, !dbg !100
  %1349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1348, i32 2, i32 31), !dbg !100
  %1350 = bitcast i32 %1349 to float, !dbg !100
  %1351 = fcmp ogt float %1347, %1350, !dbg !102
  %1352 = fcmp uno float %1347, 0.000000e+00, !dbg !103
  %1353 = or i1 %1351, %1352, !dbg !104
  %1354 = select i1 %1353, float %1347, float %1350, !dbg !105
  %1355 = bitcast float %1354 to i32, !dbg !100
  %1356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1355, i32 1, i32 31), !dbg !100
  %1357 = bitcast i32 %1356 to float, !dbg !100
  %1358 = fcmp ogt float %1354, %1357, !dbg !102
  %1359 = fcmp uno float %1354, 0.000000e+00, !dbg !103
  %1360 = or i1 %1358, %1359, !dbg !104
  %1361 = select i1 %1326, i32 %1321, i32 %1322, !dbg !105
  %1362 = insertelement <1 x i32> poison, i32 %1361, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1186, <1 x i32> %1362, i1 %625) #5, !dbg !100
  %1363 = select i1 %1360, i32 %1355, i32 %1356, !dbg !105
  %1364 = insertelement <1 x i32> poison, i32 %1363, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1190, <1 x i32> %1364, i1 %625) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1365 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %635, i1 %1193) #5, !dbg !100
  %1366 = bitcast i32 %1365 to float, !dbg !100
  %1367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1365, i32 2, i32 31), !dbg !100
  %1368 = bitcast i32 %1367 to float, !dbg !100
  %1369 = fcmp ogt float %1366, %1368, !dbg !102
  %1370 = fcmp uno float %1366, 0.000000e+00, !dbg !103
  %1371 = or i1 %1370, %1369, !dbg !104
  %1372 = select i1 %1371, float %1366, float %1368, !dbg !105
  %1373 = bitcast float %1372 to i32, !dbg !100
  %1374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1373, i32 1, i32 31), !dbg !100
  %1375 = bitcast i32 %1374 to float, !dbg !100
  %1376 = fcmp ogt float %1372, %1375, !dbg !102
  %1377 = fcmp uno float %1372, 0.000000e+00, !dbg !103
  %1378 = or i1 %1376, %1377, !dbg !104
  %1379 = select i1 %1378, i32 %1373, i32 %1374, !dbg !105
  %1380 = insertelement <1 x i32> poison, i32 %1379, i64 0, !dbg !100
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %1380, i1 %1210) #5, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !100
  %1381 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !100
  %1382 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !100
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %1383 = bitcast float %1381 to i32, !dbg !106
  %1384 = bitcast float %1382 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %1383, i32 %1384, i1 true) #5, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %1385 = load float, ptr addrspace(3) %1217, align 4, !dbg !106
  %1386 = sext i32 %336 to i64, !dbg !107
  %1387 = getelementptr bfloat, ptr addrspace(1) %4, i64 %1386, !dbg !107
  %1388 = fptrunc float %1218 to bfloat, !dbg !99
  %1389 = and i32 %19, 126, !dbg !99
  %1390 = icmp eq i32 %1389, 0, !dbg !99
  %1391 = bitcast bfloat %1388 to i16, !dbg !99
  %1392 = and i1 %1390, %337, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1391, ptr addrspace(1) %1387, i1 %1392) #5, !dbg !99
  %1393 = getelementptr bfloat, ptr addrspace(1) %5, i64 %1386, !dbg !108
  %1394 = fptrunc float %1385 to bfloat, !dbg !106
  %1395 = bitcast bfloat %1394 to i16, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1395, ptr addrspace(1) %1393, i1 %1392) #5, !dbg !106
  %1396 = getelementptr bfloat, ptr addrspace(1) %6, i64 %1386, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1391, ptr addrspace(1) %1396, i1 %1392) #5, !dbg !110
  %1397 = getelementptr bfloat, ptr addrspace(1) %7, i64 %1386, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1395, ptr addrspace(1) %1397, i1 %1392) #5, !dbg !112
  %1398 = getelementptr bfloat, ptr addrspace(1) %8, i64 %1386, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1391, ptr addrspace(1) %1398, i1 %1392) #5, !dbg !114
  %1399 = getelementptr bfloat, ptr addrspace(1) %9, i64 %1386, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %1395, ptr addrspace(1) %1399, i1 %1392) #5, !dbg !116
  %.inv = fcmp oge float %1213, 0.000000e+00, !dbg !117
  %1400 = select i1 %.inv, float 0.000000e+00, float %1213, !dbg !117
  %.inv4 = fcmp oge float %1214, 0.000000e+00, !dbg !117
  %1401 = select i1 %.inv4, float 0.000000e+00, float %1214, !dbg !117
  %1402 = fsub float 0.000000e+00, %1400, !dbg !119
  %1403 = fsub float 0.000000e+00, %1401, !dbg !119
  %.inv5 = fcmp ole float %1381, 0.000000e+00, !dbg !120
  %1404 = select i1 %.inv5, float 0.000000e+00, float %1381, !dbg !120
  %.inv6 = fcmp ole float %1382, 0.000000e+00, !dbg !120
  %1405 = select i1 %.inv6, float 0.000000e+00, float %1382, !dbg !120
  %1406 = fcmp ogt float %1402, %1404, !dbg !122
  %1407 = fcmp ogt float %1403, %1405, !dbg !122
  %1408 = fcmp uno float %1402, 0.000000e+00, !dbg !124
  %1409 = fcmp uno float %1403, 0.000000e+00, !dbg !124
  %1410 = or i1 %1408, %1406, !dbg !125
  %1411 = or i1 %1409, %1407, !dbg !125
  %1412 = select i1 %1410, float %1402, float %1404, !dbg !126
  %1413 = select i1 %1411, float %1403, float %1405, !dbg !126
  %1414 = fmul float %1412, 0x3F80204080000000, !dbg !127
  %1415 = fmul float %1413, 0x3F80204080000000, !dbg !127
  %1416 = fcmp ogt float %1414, 0x3EE4F8B580000000, !dbg !128
  %1417 = fcmp ogt float %1415, 0x3EE4F8B580000000, !dbg !128
  %1418 = fcmp uno float %1414, 0.000000e+00, !dbg !130
  %1419 = fcmp uno float %1415, 0.000000e+00, !dbg !130
  %1420 = or i1 %1416, %1418, !dbg !131
  %1421 = or i1 %1417, %1419, !dbg !131
  %1422 = select i1 %1420, float %1414, float 0x3EE4F8B580000000, !dbg !132
  %1423 = select i1 %1421, float %1415, float 0x3EE4F8B580000000, !dbg !132
  %1424 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1422), !dbg !133
  %1425 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %1423), !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %1426 = bitcast float %1424 to <1 x i32>, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %1426, i1 true) #5, !dbg !134
  %1427 = bitcast float %1425 to <1 x i32>, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) nonnull getelementptr inbounds nuw (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %1427, i1 true) #5, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %1428 = lshr exact i32 %20, 3, !dbg !134
  %1429 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1428, !dbg !134
  %1430 = load float, ptr addrspace(3) %1429, align 8, !dbg !134
  br label %1431, !dbg !135

1431:                                             ; preds = %1046, %1431
  %indvars.iv184 = phi i64 [ 0, %1046 ], [ %indvars.iv.next185, %1431 ]
  %1432 = trunc nuw nsw i64 %indvars.iv184 to i32, !dbg !136
  %1433 = add i32 %31, %1432, !dbg !136
  %1434 = add i32 %32, %1432, !dbg !136
  %1435 = sext i32 %1433 to i64, !dbg !137
  %1436 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1435, !dbg !137
  %1437 = sext i32 %1434 to i64, !dbg !137
  %1438 = getelementptr bfloat, ptr addrspace(1) %3, i64 %1437, !dbg !137
  %1439 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1436, i1 %23) #5, !dbg !138
  %1440 = extractvalue { i32, i32, i32, i32 } %1439, 0, !dbg !138
  %1441 = bitcast i32 %1440 to <2 x bfloat>, !dbg !138
  %1442 = extractvalue { i32, i32, i32, i32 } %1439, 1, !dbg !138
  %1443 = bitcast i32 %1442 to <2 x bfloat>, !dbg !138
  %1444 = extractvalue { i32, i32, i32, i32 } %1439, 2, !dbg !138
  %1445 = bitcast i32 %1444 to <2 x bfloat>, !dbg !138
  %1446 = extractvalue { i32, i32, i32, i32 } %1439, 3, !dbg !138
  %1447 = bitcast i32 %1446 to <2 x bfloat>, !dbg !138
  %1448 = extractelement <2 x bfloat> %1441, i64 0, !dbg !138
  %1449 = extractelement <2 x bfloat> %1441, i64 1, !dbg !138
  %1450 = extractelement <2 x bfloat> %1443, i64 0, !dbg !138
  %1451 = extractelement <2 x bfloat> %1443, i64 1, !dbg !138
  %1452 = extractelement <2 x bfloat> %1445, i64 0, !dbg !138
  %1453 = extractelement <2 x bfloat> %1445, i64 1, !dbg !138
  %1454 = extractelement <2 x bfloat> %1447, i64 0, !dbg !138
  %1455 = extractelement <2 x bfloat> %1447, i64 1, !dbg !138
  %1456 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %1438, i1 %23) #5, !dbg !138
  %1457 = extractvalue { i32, i32, i32, i32 } %1456, 0, !dbg !138
  %1458 = bitcast i32 %1457 to <2 x bfloat>, !dbg !138
  %1459 = extractvalue { i32, i32, i32, i32 } %1456, 1, !dbg !138
  %1460 = bitcast i32 %1459 to <2 x bfloat>, !dbg !138
  %1461 = extractvalue { i32, i32, i32, i32 } %1456, 2, !dbg !138
  %1462 = bitcast i32 %1461 to <2 x bfloat>, !dbg !138
  %1463 = extractvalue { i32, i32, i32, i32 } %1456, 3, !dbg !138
  %1464 = bitcast i32 %1463 to <2 x bfloat>, !dbg !138
  %1465 = extractelement <2 x bfloat> %1458, i64 0, !dbg !138
  %1466 = extractelement <2 x bfloat> %1458, i64 1, !dbg !138
  %1467 = extractelement <2 x bfloat> %1460, i64 0, !dbg !138
  %1468 = extractelement <2 x bfloat> %1460, i64 1, !dbg !138
  %1469 = extractelement <2 x bfloat> %1462, i64 0, !dbg !138
  %1470 = extractelement <2 x bfloat> %1462, i64 1, !dbg !138
  %1471 = extractelement <2 x bfloat> %1464, i64 0, !dbg !138
  %1472 = extractelement <2 x bfloat> %1464, i64 1, !dbg !138
  %1473 = fpext bfloat %1448 to float, !dbg !139
  %1474 = fpext bfloat %1449 to float, !dbg !139
  %1475 = fpext bfloat %1450 to float, !dbg !139
  %1476 = fpext bfloat %1451 to float, !dbg !139
  %1477 = fpext bfloat %1452 to float, !dbg !139
  %1478 = fpext bfloat %1453 to float, !dbg !139
  %1479 = fpext bfloat %1454 to float, !dbg !139
  %1480 = fpext bfloat %1455 to float, !dbg !139
  %1481 = fpext bfloat %1465 to float, !dbg !139
  %1482 = fpext bfloat %1466 to float, !dbg !139
  %1483 = fpext bfloat %1467 to float, !dbg !139
  %1484 = fpext bfloat %1468 to float, !dbg !139
  %1485 = fpext bfloat %1469 to float, !dbg !139
  %1486 = fpext bfloat %1470 to float, !dbg !139
  %1487 = fpext bfloat %1471 to float, !dbg !139
  %1488 = fpext bfloat %1472 to float, !dbg !139
  %1489 = fmul float %1430, %1473, !dbg !134
  %1490 = fmul float %1430, %1474, !dbg !134
  %1491 = fmul float %1430, %1475, !dbg !134
  %1492 = fmul float %1430, %1476, !dbg !134
  %1493 = fmul float %1430, %1477, !dbg !134
  %1494 = fmul float %1430, %1478, !dbg !134
  %1495 = fmul float %1430, %1479, !dbg !134
  %1496 = fmul float %1430, %1480, !dbg !134
  %1497 = fmul float %1430, %1481, !dbg !134
  %1498 = fmul float %1430, %1482, !dbg !134
  %1499 = fmul float %1430, %1483, !dbg !134
  %1500 = fmul float %1430, %1484, !dbg !134
  %1501 = fmul float %1430, %1485, !dbg !134
  %1502 = fmul float %1430, %1486, !dbg !134
  %1503 = fmul float %1430, %1487, !dbg !134
  %1504 = fmul float %1430, %1488, !dbg !134
  %1505 = tail call float @llvm.nvvm.round.f(float %1489) #5, !dbg !140
  %1506 = tail call float @llvm.nvvm.round.f(float %1490) #5, !dbg !140
  %1507 = tail call float @llvm.nvvm.round.f(float %1491) #5, !dbg !140
  %1508 = tail call float @llvm.nvvm.round.f(float %1492) #5, !dbg !140
  %1509 = tail call float @llvm.nvvm.round.f(float %1493) #5, !dbg !140
  %1510 = tail call float @llvm.nvvm.round.f(float %1494) #5, !dbg !140
  %1511 = tail call float @llvm.nvvm.round.f(float %1495) #5, !dbg !140
  %1512 = tail call float @llvm.nvvm.round.f(float %1496) #5, !dbg !140
  %1513 = tail call float @llvm.nvvm.round.f(float %1497) #5, !dbg !140
  %1514 = tail call float @llvm.nvvm.round.f(float %1498) #5, !dbg !140
  %1515 = tail call float @llvm.nvvm.round.f(float %1499) #5, !dbg !140
  %1516 = tail call float @llvm.nvvm.round.f(float %1500) #5, !dbg !140
  %1517 = tail call float @llvm.nvvm.round.f(float %1501) #5, !dbg !140
  %1518 = tail call float @llvm.nvvm.round.f(float %1502) #5, !dbg !140
  %1519 = tail call float @llvm.nvvm.round.f(float %1503) #5, !dbg !140
  %1520 = tail call float @llvm.nvvm.round.f(float %1504) #5, !dbg !140
  %1521 = insertelement <4 x float> poison, float %1505, i64 0, !dbg !141
  %1522 = insertelement <4 x float> %1521, float %1506, i64 1, !dbg !141
  %1523 = insertelement <4 x float> %1522, float %1507, i64 2, !dbg !141
  %1524 = insertelement <4 x float> %1523, float %1508, i64 3, !dbg !141
  %1525 = fcmp ogt <4 x float> %1524, splat (float -1.270000e+02), !dbg !141
  %1526 = fcmp uno <4 x float> %1524, zeroinitializer, !dbg !143
  %1527 = or <4 x i1> %1525, %1526, !dbg !144
  %1528 = select <4 x i1> %1527, <4 x float> %1524, <4 x float> splat (float -1.270000e+02), !dbg !145
  %1529 = fcmp olt <4 x float> %1528, splat (float 1.270000e+02), !dbg !146
  %1530 = fcmp uno <4 x float> %1528, zeroinitializer, !dbg !148
  %1531 = or <4 x i1> %1529, %1530, !dbg !149
  %1532 = fptosi <4 x float> %1528 to <4 x i8>, !dbg !150
  %1533 = select <4 x i1> %1531, <4 x i8> %1532, <4 x i8> splat (i8 127), !dbg !151
  %1534 = insertelement <4 x float> poison, float %1509, i64 0, !dbg !141
  %1535 = insertelement <4 x float> %1534, float %1510, i64 1, !dbg !141
  %1536 = insertelement <4 x float> %1535, float %1511, i64 2, !dbg !141
  %1537 = insertelement <4 x float> %1536, float %1512, i64 3, !dbg !141
  %1538 = fcmp ogt <4 x float> %1537, splat (float -1.270000e+02), !dbg !141
  %1539 = fcmp uno <4 x float> %1537, zeroinitializer, !dbg !143
  %1540 = or <4 x i1> %1538, %1539, !dbg !144
  %1541 = select <4 x i1> %1540, <4 x float> %1537, <4 x float> splat (float -1.270000e+02), !dbg !145
  %1542 = fcmp olt <4 x float> %1541, splat (float 1.270000e+02), !dbg !146
  %1543 = fcmp uno <4 x float> %1541, zeroinitializer, !dbg !148
  %1544 = or <4 x i1> %1542, %1543, !dbg !149
  %1545 = fptosi <4 x float> %1541 to <4 x i8>, !dbg !150
  %1546 = select <4 x i1> %1544, <4 x i8> %1545, <4 x i8> splat (i8 127), !dbg !151
  %1547 = insertelement <4 x float> poison, float %1513, i64 0, !dbg !141
  %1548 = insertelement <4 x float> %1547, float %1514, i64 1, !dbg !141
  %1549 = insertelement <4 x float> %1548, float %1515, i64 2, !dbg !141
  %1550 = insertelement <4 x float> %1549, float %1516, i64 3, !dbg !141
  %1551 = fcmp ogt <4 x float> %1550, splat (float -1.270000e+02), !dbg !141
  %1552 = fcmp uno <4 x float> %1550, zeroinitializer, !dbg !143
  %1553 = or <4 x i1> %1551, %1552, !dbg !144
  %1554 = select <4 x i1> %1553, <4 x float> %1550, <4 x float> splat (float -1.270000e+02), !dbg !145
  %1555 = fcmp olt <4 x float> %1554, splat (float 1.270000e+02), !dbg !146
  %1556 = fcmp uno <4 x float> %1554, zeroinitializer, !dbg !148
  %1557 = or <4 x i1> %1555, %1556, !dbg !149
  %1558 = fptosi <4 x float> %1554 to <4 x i8>, !dbg !150
  %1559 = select <4 x i1> %1557, <4 x i8> %1558, <4 x i8> splat (i8 127), !dbg !151
  %1560 = insertelement <4 x float> poison, float %1517, i64 0, !dbg !141
  %1561 = insertelement <4 x float> %1560, float %1518, i64 1, !dbg !141
  %1562 = insertelement <4 x float> %1561, float %1519, i64 2, !dbg !141
  %1563 = insertelement <4 x float> %1562, float %1520, i64 3, !dbg !141
  %1564 = fcmp ogt <4 x float> %1563, splat (float -1.270000e+02), !dbg !141
  %1565 = fcmp uno <4 x float> %1563, zeroinitializer, !dbg !143
  %1566 = or <4 x i1> %1564, %1565, !dbg !144
  %1567 = select <4 x i1> %1566, <4 x float> %1563, <4 x float> splat (float -1.270000e+02), !dbg !145
  %1568 = fcmp olt <4 x float> %1567, splat (float 1.270000e+02), !dbg !146
  %1569 = fcmp uno <4 x float> %1567, zeroinitializer, !dbg !148
  %1570 = or <4 x i1> %1568, %1569, !dbg !149
  %1571 = fptosi <4 x float> %1567 to <4 x i8>, !dbg !150
  %1572 = select <4 x i1> %1570, <4 x i8> %1571, <4 x i8> splat (i8 127), !dbg !151
  %1573 = getelementptr i8, ptr addrspace(1) %10, i64 %1435, !dbg !152
  %1574 = bitcast <4 x i8> %1533 to i32, !dbg !153
  %1575 = bitcast <4 x i8> %1546 to i32, !dbg !153
  %1576 = bitcast <4 x i8> %1559 to i32, !dbg !153
  %1577 = bitcast <4 x i8> %1572 to i32, !dbg !153
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1574, i32 %1575, i32 %1576, i32 %1577, ptr addrspace(1) %1573, i1 %23) #5, !dbg !153
  %1578 = getelementptr i8, ptr addrspace(1) %11, i64 %1435, !dbg !154
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1574, i32 %1575, i32 %1576, i32 %1577, ptr addrspace(1) %1578, i1 %23) #5, !dbg !155
  %1579 = getelementptr i8, ptr addrspace(1) %12, i64 %1435, !dbg !156
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1574, i32 %1575, i32 %1576, i32 %1577, ptr addrspace(1) %1579, i1 %23) #5, !dbg !157
  %indvars.iv.next185 = add nuw nsw i64 %indvars.iv184, 1024, !dbg !135
  %1580 = icmp samesign ult i64 %indvars.iv184, 2048, !dbg !135
  br i1 %1580, label %1431, label %1581, !dbg !135

1581:                                             ; preds = %1431
  ret void, !dbg !158
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 38, column: 46, scope: !6)
!16 = !DILocation(line: 32, column: 40, scope: !6)
!17 = !DILocation(line: 38, column: 41, scope: !6)
!18 = !DILocation(line: 38, column: 34, scope: !6)
!19 = !DILocation(line: 38, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 42, column: 62, scope: !6)
!22 = !DILocation(line: 203, column: 7, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 42, column: 51, scope: !6)
!26 = !DILocation(line: 208, column: 24, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 209, column: 30, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 210, column: 34, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 210, column: 26, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 211, column: 39, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 211, column: 31, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 211, column: 22, scope: !23, inlinedAt: !25)
!33 = !DILocation(line: 44, column: 62, scope: !6)
!34 = !DILocation(line: 45, column: 58, scope: !6)
!35 = !DILocation(line: 46, column: 66, scope: !6)
!36 = !DILocation(line: 217, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!38 = !DILocation(line: 47, column: 79, scope: !6)
!39 = !DILocation(line: 218, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 219, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 219, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 219, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 221, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 221, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 222, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 222, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 222, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 222, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 222, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 229, column: 46, scope: !23, inlinedAt: !38)
!51 = !DILocation(line: 59, column: 46, scope: !6)
!52 = !DILocation(line: 67, column: 24, scope: !6)
!53 = !DILocation(line: 69, column: 24, scope: !6)
!54 = !DILocation(line: 70, column: 32, scope: !6)
!55 = !DILocation(line: 53, column: 40, scope: !6)
!56 = !DILocation(line: 85, column: 50, scope: !6)
!57 = !DILocation(line: 83, column: 50, scope: !6)
!58 = !DILocation(line: 54, column: 31, scope: !6)
!59 = !DILocation(line: 59, column: 41, scope: !6)
!60 = !DILocation(line: 59, column: 34, scope: !6)
!61 = !DILocation(line: 59, column: 51, scope: !6)
!62 = !DILocation(line: 59, column: 113, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 49, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 49, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 42, scope: !6)
!70 = !DILocation(line: 63, column: 35, scope: !6)
!71 = !DILocation(line: 63, column: 42, scope: !6)
!72 = !DILocation(line: 65, column: 24, scope: !6)
!73 = !DILocation(line: 71, column: 24, scope: !6)
!74 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !75)
!75 = !DILocation(line: 84, column: 47, scope: !6)
!76 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !77)
!77 = !DILocation(line: 82, column: 47, scope: !6)
!78 = !DILocation(line: 61, column: 102, scope: !6)
!79 = !DILocation(line: 63, column: 95, scope: !6)
!80 = !DILocation(line: 74, column: 24, scope: !6)
!81 = !DILocation(line: 76, column: 24, scope: !6)
!82 = !DILocation(line: 77, column: 24, scope: !6)
!83 = !DILocation(line: 79, column: 24, scope: !6)
!84 = !DILocation(line: 80, column: 24, scope: !6)
!85 = !DILocation(line: 86, column: 53, scope: !6)
!86 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !75)
!87 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !75)
!88 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !75)
!89 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !77)
!90 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !77)
!91 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !77)
!92 = !DILocation(line: 86, column: 29, scope: !6)
!93 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !94)
!94 = !DILocation(line: 87, column: 40, scope: !6)
!95 = !DILocation(line: 94, column: 15, scope: !37, inlinedAt: !94)
!96 = !DILocation(line: 96, column: 21, scope: !37, inlinedAt: !94)
!97 = !DILocation(line: 96, column: 16, scope: !37, inlinedAt: !94)
!98 = !DILocation(line: 97, column: 29, scope: !37, inlinedAt: !94)
!99 = !DILocation(line: 89, column: 37, scope: !6)
!100 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !101)
!101 = !DILocation(line: 88, column: 40, scope: !6)
!102 = !DILocation(line: 102, column: 15, scope: !37, inlinedAt: !101)
!103 = !DILocation(line: 104, column: 21, scope: !37, inlinedAt: !101)
!104 = !DILocation(line: 104, column: 16, scope: !37, inlinedAt: !101)
!105 = !DILocation(line: 105, column: 29, scope: !37, inlinedAt: !101)
!106 = !DILocation(line: 90, column: 37, scope: !6)
!107 = !DILocation(line: 89, column: 25, scope: !6)
!108 = !DILocation(line: 90, column: 25, scope: !6)
!109 = !DILocation(line: 91, column: 25, scope: !6)
!110 = !DILocation(line: 91, column: 37, scope: !6)
!111 = !DILocation(line: 92, column: 25, scope: !6)
!112 = !DILocation(line: 92, column: 37, scope: !6)
!113 = !DILocation(line: 93, column: 25, scope: !6)
!114 = !DILocation(line: 93, column: 37, scope: !6)
!115 = !DILocation(line: 94, column: 25, scope: !6)
!116 = !DILocation(line: 94, column: 37, scope: !6)
!117 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !118)
!118 = !DILocation(line: 103, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 17, scope: !6)
!120 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !121)
!121 = !DILocation(line: 105, column: 46, scope: !6)
!122 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !123)
!123 = !DILocation(line: 106, column: 46, scope: !6)
!124 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !123)
!125 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !123)
!126 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !123)
!127 = !DILocation(line: 108, column: 24, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !129)
!129 = !DILocation(line: 111, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !129)
!133 = !DILocation(line: 114, column: 25, scope: !6)
!134 = !DILocation(line: 117, column: 24, scope: !6)
!135 = !DILocation(line: 95, column: 40, scope: !6)
!136 = !DILocation(line: 101, column: 43, scope: !6)
!137 = !DILocation(line: 101, column: 36, scope: !6)
!138 = !DILocation(line: 101, column: 53, scope: !6)
!139 = !DILocation(line: 101, column: 115, scope: !6)
!140 = !DILocation(line: 118, column: 36, scope: !6)
!141 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !142)
!142 = !DILocation(line: 121, column: 46, scope: !6)
!143 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !142)
!144 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !142)
!145 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !142)
!146 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !147)
!147 = !DILocation(line: 123, column: 46, scope: !6)
!148 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !147)
!149 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !147)
!150 = !DILocation(line: 125, column: 25, scope: !6)
!151 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !147)
!152 = !DILocation(line: 126, column: 29, scope: !6)
!153 = !DILocation(line: 126, column: 53, scope: !6)
!154 = !DILocation(line: 127, column: 30, scope: !6)
!155 = !DILocation(line: 127, column: 54, scope: !6)
!156 = !DILocation(line: 128, column: 30, scope: !6)
!157 = !DILocation(line: 128, column: 54, scope: !6)
!158 = !DILocation(line: 95, column: 4, scope: !6)
