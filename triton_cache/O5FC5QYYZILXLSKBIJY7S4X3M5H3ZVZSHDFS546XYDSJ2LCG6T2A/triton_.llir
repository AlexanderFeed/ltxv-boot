; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, ptr addrspace(1) readnone captures(none) %10) local_unnamed_addr !dbg !6 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %13 = shl i32 %12, 10, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = shl i32 %14, 3, !dbg !11
  %16 = and i32 %15, 1016, !dbg !11
  %17 = or disjoint i32 %16, %13, !dbg !12
  %18 = or disjoint i32 %17, 4, !dbg !12
  %19 = sdiv i32 %17, 3072, !dbg !13
  %20 = mul i32 %19, 3072, !dbg !14
  %.decomposed = sub i32 %17, %20, !dbg !14
  %21 = srem i32 %18, 3072, !dbg !14
  %22 = sext i32 %17 to i64, !dbg !15
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %23) #1, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !16
  %33 = add nsw i32 %.decomposed, 6144, !dbg !17
  %34 = zext nneg i32 %33 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = sext i32 %21 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !18
  %38 = getelementptr i8, ptr addrspace(1) %37, i64 24576, !dbg !18
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %35) #1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !19
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %38) #1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %49 = getelementptr bfloat, ptr addrspace(1) %2, i64 %34, !dbg !20
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %49) #1, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !21
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !21
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !21
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !21
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !21
  %59 = getelementptr i32, ptr addrspace(1) %3, i64 %22, !dbg !22
  %60 = sext i32 %18 to i64, !dbg !22
  %61 = getelementptr i32, ptr addrspace(1) %3, i64 %60, !dbg !22
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %59) #1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %61) #1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !23
  %72 = sext i32 %19 to i64, !dbg !24
  %73 = getelementptr bfloat, ptr addrspace(1) %4, i64 %72, !dbg !24
  %74 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %77 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %78 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %79 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %80 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %81 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %73) #1, !dbg !25
  %82 = getelementptr bfloat, ptr addrspace(1) %5, i64 %72, !dbg !26
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %86 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %87 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %88 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %89 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %90 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %82) #1, !dbg !27
  %91 = sext i32 %.decomposed to i64, !dbg !28
  %92 = getelementptr bfloat, ptr addrspace(1) %6, i64 %91, !dbg !28
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %92) #1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !29
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !29
  %96 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !29
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !29
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !29
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !29
  %100 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !29
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !29
  %102 = getelementptr bfloat, ptr addrspace(1) %7, i64 %91, !dbg !30
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %102) #1, !dbg !31
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !31
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !31
  %106 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !31
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !31
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !31
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !31
  %112 = insertelement <2 x i16> poison, i16 %74, i64 0, !dbg !25
  %113 = insertelement <2 x i16> %112, i16 %75, i64 1, !dbg !25
  %114 = bitcast <2 x i16> %113 to <2 x bfloat>, !dbg !25
  %115 = fcmp oge <2 x bfloat> %114, zeroinitializer, !dbg !32
  %116 = select <2 x i1> %115, <2 x bfloat> zeroinitializer, <2 x bfloat> %114, !dbg !32
  %117 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !32
  %118 = fsub <2 x float> zeroinitializer, %117, !dbg !36
  %119 = insertelement <2 x i16> poison, i16 %76, i64 0, !dbg !25
  %120 = insertelement <2 x i16> %119, i16 %77, i64 1, !dbg !25
  %121 = bitcast <2 x i16> %120 to <2 x bfloat>, !dbg !25
  %122 = fcmp oge <2 x bfloat> %121, zeroinitializer, !dbg !32
  %123 = select <2 x i1> %122, <2 x bfloat> zeroinitializer, <2 x bfloat> %121, !dbg !32
  %124 = fpext <2 x bfloat> %123 to <2 x float>, !dbg !32
  %125 = fsub <2 x float> zeroinitializer, %124, !dbg !36
  %126 = insertelement <2 x i16> poison, i16 %78, i64 0, !dbg !25
  %127 = insertelement <2 x i16> %126, i16 %79, i64 1, !dbg !25
  %128 = bitcast <2 x i16> %127 to <2 x bfloat>, !dbg !25
  %129 = fcmp oge <2 x bfloat> %128, zeroinitializer, !dbg !32
  %130 = select <2 x i1> %129, <2 x bfloat> zeroinitializer, <2 x bfloat> %128, !dbg !32
  %131 = fpext <2 x bfloat> %130 to <2 x float>, !dbg !32
  %132 = fsub <2 x float> zeroinitializer, %131, !dbg !36
  %133 = insertelement <2 x i16> poison, i16 %80, i64 0, !dbg !25
  %134 = insertelement <2 x i16> %133, i16 %81, i64 1, !dbg !25
  %135 = bitcast <2 x i16> %134 to <2 x bfloat>, !dbg !25
  %136 = fcmp oge <2 x bfloat> %135, zeroinitializer, !dbg !32
  %137 = select <2 x i1> %136, <2 x bfloat> zeroinitializer, <2 x bfloat> %135, !dbg !32
  %138 = fpext <2 x bfloat> %137 to <2 x float>, !dbg !32
  %139 = fsub <2 x float> zeroinitializer, %138, !dbg !36
  %140 = insertelement <2 x i16> poison, i16 %83, i64 0, !dbg !27
  %141 = insertelement <2 x i16> %140, i16 %84, i64 1, !dbg !27
  %142 = bitcast <2 x i16> %141 to <2 x bfloat>, !dbg !27
  %143 = fcmp ole <2 x bfloat> %142, zeroinitializer, !dbg !37
  %144 = select <2 x i1> %143, <2 x bfloat> zeroinitializer, <2 x bfloat> %142, !dbg !37
  %145 = fpext <2 x bfloat> %144 to <2 x float>, !dbg !37
  %146 = insertelement <2 x i16> poison, i16 %85, i64 0, !dbg !27
  %147 = insertelement <2 x i16> %146, i16 %86, i64 1, !dbg !27
  %148 = bitcast <2 x i16> %147 to <2 x bfloat>, !dbg !27
  %149 = fcmp ole <2 x bfloat> %148, zeroinitializer, !dbg !37
  %150 = select <2 x i1> %149, <2 x bfloat> zeroinitializer, <2 x bfloat> %148, !dbg !37
  %151 = fpext <2 x bfloat> %150 to <2 x float>, !dbg !37
  %152 = insertelement <2 x i16> poison, i16 %87, i64 0, !dbg !27
  %153 = insertelement <2 x i16> %152, i16 %88, i64 1, !dbg !27
  %154 = bitcast <2 x i16> %153 to <2 x bfloat>, !dbg !27
  %155 = fcmp ole <2 x bfloat> %154, zeroinitializer, !dbg !37
  %156 = select <2 x i1> %155, <2 x bfloat> zeroinitializer, <2 x bfloat> %154, !dbg !37
  %157 = fpext <2 x bfloat> %156 to <2 x float>, !dbg !37
  %158 = insertelement <2 x i16> poison, i16 %89, i64 0, !dbg !27
  %159 = insertelement <2 x i16> %158, i16 %90, i64 1, !dbg !27
  %160 = bitcast <2 x i16> %159 to <2 x bfloat>, !dbg !27
  %161 = fcmp ole <2 x bfloat> %160, zeroinitializer, !dbg !37
  %162 = select <2 x i1> %161, <2 x bfloat> zeroinitializer, <2 x bfloat> %160, !dbg !37
  %163 = fpext <2 x bfloat> %162 to <2 x float>, !dbg !37
  %164 = fcmp ogt <2 x float> %118, %145, !dbg !39
  %165 = fcmp uno <2 x float> %118, zeroinitializer, !dbg !41
  %166 = or <2 x i1> %165, %164, !dbg !42
  %167 = fcmp ogt <2 x float> %125, %151, !dbg !39
  %168 = fcmp uno <2 x float> %125, zeroinitializer, !dbg !41
  %169 = or <2 x i1> %168, %167, !dbg !42
  %170 = fcmp ogt <2 x float> %132, %157, !dbg !39
  %171 = fcmp uno <2 x float> %132, zeroinitializer, !dbg !41
  %172 = or <2 x i1> %171, %170, !dbg !42
  %173 = fcmp ogt <2 x float> %139, %163, !dbg !39
  %174 = fcmp uno <2 x float> %139, zeroinitializer, !dbg !41
  %175 = or <2 x i1> %174, %173, !dbg !42
  %176 = getelementptr bfloat, ptr addrspace(1) %8, i64 %22, !dbg !43
  %177 = fpext <2 x bfloat> %26 to <2 x float>, !dbg !44
  %178 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %179 = insertelement <2 x i32> %178, i32 %41, i64 1, !dbg !19
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !19
  %181 = fpext <2 x bfloat> %52 to <2 x float>, !dbg !45
  %182 = fpext <2 x bfloat> %95 to <2 x float>, !dbg !46
  %183 = fpext <2 x bfloat> %105 to <2 x float>, !dbg !47
  %184 = fadd <2 x float> %180, %181, !dbg !48
  %185 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !49
  %186 = insertelement <2 x i32> %185, i32 %64, i64 1, !dbg !49
  %187 = sitofp <2 x i32> %186 to <2 x float>, !dbg !49
  %188 = select <2 x i1> %166, <2 x float> %118, <2 x float> %145, !dbg !50
  %189 = fmul <2 x float> %188, splat (float 0x3F80204080000000), !dbg !51
  %190 = fcmp ogt <2 x float> %189, splat (float 0x3EE4F8B580000000), !dbg !52
  %191 = fcmp uno <2 x float> %189, zeroinitializer, !dbg !54
  %192 = or <2 x i1> %190, %191, !dbg !55
  %193 = select <2 x i1> %192, <2 x float> %189, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !56
  %194 = fmul <2 x float> %193, %187, !dbg !57
  %195 = fmul <2 x float> %194, %182, !dbg !58
  %196 = fadd <2 x float> %195, %183, !dbg !59
  %197 = fmul <2 x float> %184, %196, !dbg !60
  %198 = fadd <2 x float> %197, %177, !dbg !61
  %199 = fptrunc <2 x float> %198 to <2 x bfloat>, !dbg !62
  %200 = fpext <2 x bfloat> %28 to <2 x float>, !dbg !44
  %201 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !19
  %202 = insertelement <2 x i32> %201, i32 %43, i64 1, !dbg !19
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !19
  %204 = fpext <2 x bfloat> %54 to <2 x float>, !dbg !45
  %205 = fpext <2 x bfloat> %97 to <2 x float>, !dbg !46
  %206 = fpext <2 x bfloat> %107 to <2 x float>, !dbg !47
  %207 = fadd <2 x float> %203, %204, !dbg !48
  %208 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !49
  %209 = insertelement <2 x i32> %208, i32 %66, i64 1, !dbg !49
  %210 = sitofp <2 x i32> %209 to <2 x float>, !dbg !49
  %211 = select <2 x i1> %169, <2 x float> %125, <2 x float> %151, !dbg !50
  %212 = fmul <2 x float> %211, splat (float 0x3F80204080000000), !dbg !51
  %213 = fcmp ogt <2 x float> %212, splat (float 0x3EE4F8B580000000), !dbg !52
  %214 = fcmp uno <2 x float> %212, zeroinitializer, !dbg !54
  %215 = or <2 x i1> %213, %214, !dbg !55
  %216 = select <2 x i1> %215, <2 x float> %212, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !56
  %217 = fmul <2 x float> %216, %210, !dbg !57
  %218 = fmul <2 x float> %217, %205, !dbg !58
  %219 = fadd <2 x float> %218, %206, !dbg !59
  %220 = fmul <2 x float> %207, %219, !dbg !60
  %221 = fadd <2 x float> %220, %200, !dbg !61
  %222 = fptrunc <2 x float> %221 to <2 x bfloat>, !dbg !62
  %223 = fpext <2 x bfloat> %30 to <2 x float>, !dbg !44
  %224 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !19
  %225 = insertelement <2 x i32> %224, i32 %46, i64 1, !dbg !19
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !19
  %227 = fpext <2 x bfloat> %56 to <2 x float>, !dbg !45
  %228 = fpext <2 x bfloat> %99 to <2 x float>, !dbg !46
  %229 = fpext <2 x bfloat> %109 to <2 x float>, !dbg !47
  %230 = fadd <2 x float> %226, %227, !dbg !48
  %231 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !49
  %232 = insertelement <2 x i32> %231, i32 %69, i64 1, !dbg !49
  %233 = sitofp <2 x i32> %232 to <2 x float>, !dbg !49
  %234 = select <2 x i1> %172, <2 x float> %132, <2 x float> %157, !dbg !50
  %235 = fmul <2 x float> %234, splat (float 0x3F80204080000000), !dbg !51
  %236 = fcmp ogt <2 x float> %235, splat (float 0x3EE4F8B580000000), !dbg !52
  %237 = fcmp uno <2 x float> %235, zeroinitializer, !dbg !54
  %238 = or <2 x i1> %236, %237, !dbg !55
  %239 = select <2 x i1> %238, <2 x float> %235, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !56
  %240 = fmul <2 x float> %239, %233, !dbg !57
  %241 = fmul <2 x float> %240, %228, !dbg !58
  %242 = fadd <2 x float> %241, %229, !dbg !59
  %243 = fmul <2 x float> %230, %242, !dbg !60
  %244 = fadd <2 x float> %243, %223, !dbg !61
  %245 = fptrunc <2 x float> %244 to <2 x bfloat>, !dbg !62
  %246 = fpext <2 x bfloat> %32 to <2 x float>, !dbg !44
  %247 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !19
  %248 = insertelement <2 x i32> %247, i32 %48, i64 1, !dbg !19
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !19
  %250 = fpext <2 x bfloat> %58 to <2 x float>, !dbg !45
  %251 = fpext <2 x bfloat> %101 to <2 x float>, !dbg !46
  %252 = fpext <2 x bfloat> %111 to <2 x float>, !dbg !47
  %253 = fadd <2 x float> %249, %250, !dbg !48
  %254 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !49
  %255 = insertelement <2 x i32> %254, i32 %71, i64 1, !dbg !49
  %256 = sitofp <2 x i32> %255 to <2 x float>, !dbg !49
  %257 = select <2 x i1> %175, <2 x float> %139, <2 x float> %163, !dbg !50
  %258 = fmul <2 x float> %257, splat (float 0x3F80204080000000), !dbg !51
  %259 = fcmp ogt <2 x float> %258, splat (float 0x3EE4F8B580000000), !dbg !52
  %260 = fcmp uno <2 x float> %258, zeroinitializer, !dbg !54
  %261 = or <2 x i1> %259, %260, !dbg !55
  %262 = select <2 x i1> %261, <2 x float> %258, <2 x float> splat (float 0x3EE4F8B580000000), !dbg !56
  %263 = fmul <2 x float> %262, %256, !dbg !57
  %264 = fmul <2 x float> %263, %251, !dbg !58
  %265 = fadd <2 x float> %264, %252, !dbg !59
  %266 = fmul <2 x float> %253, %265, !dbg !60
  %267 = fadd <2 x float> %266, %246, !dbg !61
  %268 = fptrunc <2 x float> %267 to <2 x bfloat>, !dbg !62
  %269 = bitcast <2 x bfloat> %199 to i32, !dbg !62
  %270 = bitcast <2 x bfloat> %222 to i32, !dbg !62
  %271 = bitcast <2 x bfloat> %245 to i32, !dbg !62
  %272 = bitcast <2 x bfloat> %268 to i32, !dbg !62
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %269, i32 %270, i32 %271, i32 %272, ptr addrspace(1) %176) #1, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvplcqaprlkeaodpbpoimtcfxazfp5jo2rif6lzbkk2dekpwtrju.py", directory: "/tmp/torchinductor_root/vp")
!4 = !{ptr @triton_, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 22, type: !7, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 24, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 33, scope: !6)
!11 = !DILocation(line: 25, column: 36, scope: !6)
!12 = !DILocation(line: 25, column: 23, scope: !6)
!13 = !DILocation(line: 29, column: 19, scope: !6)
!14 = !DILocation(line: 28, column: 19, scope: !6)
!15 = !DILocation(line: 30, column: 30, scope: !6)
!16 = !DILocation(line: 30, column: 35, scope: !6)
!17 = !DILocation(line: 31, column: 37, scope: !6)
!18 = !DILocation(line: 31, column: 30, scope: !6)
!19 = !DILocation(line: 31, column: 42, scope: !6)
!20 = !DILocation(line: 32, column: 30, scope: !6)
!21 = !DILocation(line: 32, column: 42, scope: !6)
!22 = !DILocation(line: 33, column: 30, scope: !6)
!23 = !DILocation(line: 33, column: 35, scope: !6)
!24 = !DILocation(line: 34, column: 30, scope: !6)
!25 = !DILocation(line: 34, column: 35, scope: !6)
!26 = !DILocation(line: 35, column: 31, scope: !6)
!27 = !DILocation(line: 35, column: 36, scope: !6)
!28 = !DILocation(line: 36, column: 31, scope: !6)
!29 = !DILocation(line: 36, column: 36, scope: !6)
!30 = !DILocation(line: 37, column: 31, scope: !6)
!31 = !DILocation(line: 37, column: 36, scope: !6)
!32 = !DILocation(line: 97, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 42, column: 40, scope: !6)
!36 = !DILocation(line: 43, column: 13, scope: !6)
!37 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !38)
!38 = !DILocation(line: 44, column: 42, scope: !6)
!39 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 45, column: 42, scope: !6)
!41 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 57, column: 25, scope: !6)
!44 = !DILocation(line: 30, column: 44, scope: !6)
!45 = !DILocation(line: 32, column: 81, scope: !6)
!46 = !DILocation(line: 36, column: 75, scope: !6)
!47 = !DILocation(line: 37, column: 75, scope: !6)
!48 = !DILocation(line: 39, column: 18, scope: !6)
!49 = !DILocation(line: 40, column: 19, scope: !6)
!50 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !40)
!51 = !DILocation(line: 47, column: 20, scope: !6)
!52 = !DILocation(line: 102, column: 15, scope: !33, inlinedAt: !53)
!53 = !DILocation(line: 50, column: 42, scope: !6)
!54 = !DILocation(line: 104, column: 21, scope: !33, inlinedAt: !53)
!55 = !DILocation(line: 104, column: 16, scope: !33, inlinedAt: !53)
!56 = !DILocation(line: 105, column: 29, scope: !33, inlinedAt: !53)
!57 = !DILocation(line: 52, column: 19, scope: !6)
!58 = !DILocation(line: 53, column: 20, scope: !6)
!59 = !DILocation(line: 54, column: 20, scope: !6)
!60 = !DILocation(line: 55, column: 19, scope: !6)
!61 = !DILocation(line: 56, column: 19, scope: !6)
!62 = !DILocation(line: 57, column: 37, scope: !6)
!63 = !DILocation(line: 57, column: 4, scope: !6)
