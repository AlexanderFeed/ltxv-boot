; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 3, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 6, !dbg !11
  %12 = and i32 %11, 7, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, 512, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 504, !dbg !14
  %17 = shl i32 %13, 12, !dbg !15
  %18 = or disjoint i32 %17, %16
  %19 = insertelement <8 x i1> poison, i1 %14, i64 0, !dbg !16
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %21, !dbg !17

21:                                               ; preds = %7, %21
  %22 = phi i32 [ 0, %7 ], [ %70, %21 ]
  %23 = phi <8 x float> [ zeroinitializer, %7 ], [ %69, %21 ]
  %24 = or i32 %18, %22, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %14) #5, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !20
  %36 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %14) #5, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %45 = bitcast i32 %44 to <2 x bfloat>, !dbg !22
  %46 = shufflevector <2 x bfloat> %29, <2 x bfloat> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %47 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <8 x bfloat> %46, <8 x bfloat> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <2 x bfloat> %33, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <8 x bfloat> %48, <8 x bfloat> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %52 = shufflevector <8 x bfloat> %50, <8 x bfloat> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %53 = shufflevector <2 x bfloat> %35, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %54 = shufflevector <8 x bfloat> %52, <8 x bfloat> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %55 = fpext <8 x bfloat> %54 to <8 x float>, !dbg !23
  %56 = shufflevector <2 x bfloat> %39, <2 x bfloat> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %57 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %58 = shufflevector <8 x bfloat> %56, <8 x bfloat> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <2 x bfloat> %43, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <8 x bfloat> %58, <8 x bfloat> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %62 = shufflevector <8 x bfloat> %60, <8 x bfloat> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %63 = shufflevector <2 x bfloat> %45, <2 x bfloat> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %64 = shufflevector <8 x bfloat> %62, <8 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %65 = fpext <8 x bfloat> %64 to <8 x float>, !dbg !24
  %66 = fadd <8 x float> %55, %65, !dbg !25
  %67 = fmul <8 x float> %66, %66, !dbg !26
  %68 = fadd <8 x float> %23, %67, !dbg !27
  %69 = select <8 x i1> %20, <8 x float> %68, <8 x float> %23, !dbg !16
  %70 = add nuw nsw i32 %22, 512, !dbg !17
  %71 = icmp samesign ult i32 %22, 3584, !dbg !17
  br i1 %71, label %21, label %__nv_rsqrtf.exit, !dbg !17

__nv_rsqrtf.exit:                                 ; preds = %21
  %72 = lshr i32 %10, 5, !dbg !11
  %73 = and i32 %10, 31, !dbg !14
  %74 = and i32 %10, 511, !dbg !14
  %shift = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %75 = fadd <8 x float> %69, %shift, !dbg !28
  %shift52 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %76 = fadd <8 x float> %shift52, %75, !dbg !28
  %shift53 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %77 = fadd <8 x float> %shift53, %76, !dbg !28
  %shift54 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %78 = fadd <8 x float> %shift54, %77, !dbg !28
  %shift55 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %79 = fadd <8 x float> %shift55, %78, !dbg !28
  %shift56 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %80 = fadd <8 x float> %shift56, %79, !dbg !28
  %shift57 = shufflevector <8 x float> %69, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %81 = fadd <8 x float> %shift57, %80, !dbg !28
  %82 = extractelement <8 x float> %81, i64 0, !dbg !28
  %83 = bitcast float %82 to i32, !dbg !33
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !33
  %85 = bitcast i32 %84 to float, !dbg !33
  %86 = fadd float %82, %85, !dbg !28
  %87 = bitcast float %86 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %86, %89, !dbg !28
  %91 = bitcast float %90 to i32, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %90, %93, !dbg !28
  %95 = bitcast float %94 to i32, !dbg !33
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = fadd float %94, %97, !dbg !28
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !28
  %103 = and i32 %72, 1, !dbg !33
  %104 = icmp eq i32 %73, 0, !dbg !33
  %105 = shl nuw nsw i32 %12, 1, !dbg !33
  %106 = or disjoint i32 %105, %103, !dbg !33
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !33
  %108 = bitcast float %102 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %104) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %109 = icmp slt i32 %10, 16, !dbg !33
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %109) #5, !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = fadd float %112, %114, !dbg !28
  %116 = and i32 %10, 1, !dbg !33
  %117 = icmp eq i32 %116, 0, !dbg !33
  %118 = and i1 %109, %117, !dbg !33
  %119 = bitcast float %115 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %119, i1 %118) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !33
  %121 = load float, ptr addrspace(3) %120, align 8, !dbg !33
  %122 = tail call float @llvm.nvvm.div.full(float %121, float 4.096000e+03), !dbg !34
  %123 = fadd float %122, 0x3EB0C6F7A0000000, !dbg !35
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i28 = icmp eq i32 %131, 0, !dbg !36
  br i1 %.not.i28, label %134, label %132, !dbg !36

132:                                              ; preds = %__nv_rsqrtf.exit
  %133 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %123), !dbg !36
  br label %__nv_rsqrtf.exit30, !dbg !36

134:                                              ; preds = %__nv_rsqrtf.exit
  %135 = tail call float @llvm.nvvm.rsqrt.approx.f(float %123), !dbg !36
  br label %__nv_rsqrtf.exit30, !dbg !36

__nv_rsqrtf.exit30:                               ; preds = %132, %134
  %.0.i29 = phi float [ %133, %132 ], [ %135, %134 ], !dbg !36
  %136 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %74
  %137 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %138 = or disjoint i32 %16, 4
  %139 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %138
  %140 = zext nneg i32 %74 to i64, !dbg !37
  %141 = getelementptr inbounds nuw i8, ptr addrspace(3) %137, i32 8
  %142 = getelementptr inbounds nuw i8, ptr addrspace(3) %139, i32 8
  %143 = insertelement <2 x float> poison, float %.0.i29, i64 0, !dbg !38
  %144 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  br label %145, !dbg !37

145:                                              ; preds = %__nv_rsqrtf.exit30, %145
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit30 ], [ %indvars.iv.next, %145 ]
  %146 = or disjoint i64 %indvars.iv, %140, !dbg !39
  %147 = getelementptr bfloat, ptr addrspace(1) %2, i64 %146, !dbg !40
  %148 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %147, i1 true) #5, !dbg !41
  %149 = bitcast i16 %148 to bfloat, !dbg !41
  %150 = fpext bfloat %149 to float, !dbg !42
  %151 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !43
  %152 = or i32 %18, %151, !dbg !43
  %153 = sext i32 %152 to i64, !dbg !44
  %154 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !44
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %154, i1 %14) #5, !dbg !45
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !45
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !45
  %158 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !45
  %159 = bitcast i32 %158 to <2 x bfloat>, !dbg !45
  %160 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !45
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !45
  %162 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !45
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !45
  %164 = getelementptr bfloat, ptr addrspace(1) %1, i64 %153, !dbg !46
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %164, i1 %14) #5, !dbg !47
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !47
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !47
  %168 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !47
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !47
  %170 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !47
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !47
  %172 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !47
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %174 = bitcast float %150 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %174, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %175 = getelementptr bfloat, ptr addrspace(1) %3, i64 %153, !dbg !49
  %176 = fpext <2 x bfloat> %157 to <2 x float>, !dbg !50
  %177 = fpext <2 x bfloat> %167 to <2 x float>, !dbg !51
  %178 = fadd <2 x float> %176, %177, !dbg !52
  %179 = fmul <2 x float> %144, %178, !dbg !38
  %180 = load <2 x float>, ptr addrspace(3) %137, align 16, !dbg !48
  %181 = fmul <2 x float> %180, %179, !dbg !48
  %182 = fptrunc <2 x float> %181 to <2 x bfloat>, !dbg !53
  %183 = fpext <2 x bfloat> %159 to <2 x float>, !dbg !50
  %184 = fpext <2 x bfloat> %169 to <2 x float>, !dbg !51
  %185 = fadd <2 x float> %183, %184, !dbg !52
  %186 = fmul <2 x float> %144, %185, !dbg !38
  %187 = load <2 x float>, ptr addrspace(3) %141, align 8, !dbg !48
  %188 = fmul <2 x float> %187, %186, !dbg !48
  %189 = fptrunc <2 x float> %188 to <2 x bfloat>, !dbg !53
  %190 = fpext <2 x bfloat> %161 to <2 x float>, !dbg !50
  %191 = fpext <2 x bfloat> %171 to <2 x float>, !dbg !51
  %192 = fadd <2 x float> %190, %191, !dbg !52
  %193 = fmul <2 x float> %144, %192, !dbg !38
  %194 = load <2 x float>, ptr addrspace(3) %139, align 16, !dbg !48
  %195 = fmul <2 x float> %194, %193, !dbg !48
  %196 = fptrunc <2 x float> %195 to <2 x bfloat>, !dbg !53
  %197 = fpext <2 x bfloat> %163 to <2 x float>, !dbg !50
  %198 = fpext <2 x bfloat> %173 to <2 x float>, !dbg !51
  %199 = fadd <2 x float> %197, %198, !dbg !52
  %200 = fmul <2 x float> %144, %199, !dbg !38
  %201 = load <2 x float>, ptr addrspace(3) %142, align 8, !dbg !48
  %202 = fmul <2 x float> %201, %200, !dbg !48
  %203 = fptrunc <2 x float> %202 to <2 x bfloat>, !dbg !53
  %204 = bitcast <2 x bfloat> %182 to i32, !dbg !53
  %205 = bitcast <2 x bfloat> %189 to i32, !dbg !53
  %206 = bitcast <2 x bfloat> %196 to i32, !dbg !53
  %207 = bitcast <2 x bfloat> %203 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %175, i1 %14) #5, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !37
  %208 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !37
  br i1 %208, label %145, label %209, !dbg !37

209:                                              ; preds = %145
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuqqoruredhxyjt7i3sc6go6wuy5c4eu2zhozoysdpb6ykfmzhht.py", directory: "/tmp/torchinductor_root/uq")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 36, column: 46, scope: !6)
!16 = !DILocation(line: 43, column: 48, scope: !6)
!17 = !DILocation(line: 30, column: 40, scope: !6)
!18 = !DILocation(line: 36, column: 41, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 112, scope: !6)
!25 = !DILocation(line: 38, column: 22, scope: !6)
!26 = !DILocation(line: 40, column: 22, scope: !6)
!27 = !DILocation(line: 42, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 44, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 57, column: 24, scope: !6)
!35 = !DILocation(line: 59, column: 24, scope: !6)
!36 = !DILocation(line: 60, column: 32, scope: !6)
!37 = !DILocation(line: 45, column: 40, scope: !6)
!38 = !DILocation(line: 61, column: 24, scope: !6)
!39 = !DILocation(line: 46, column: 31, scope: !6)
!40 = !DILocation(line: 51, column: 34, scope: !6)
!41 = !DILocation(line: 51, column: 41, scope: !6)
!42 = !DILocation(line: 51, column: 94, scope: !6)
!43 = !DILocation(line: 52, column: 41, scope: !6)
!44 = !DILocation(line: 52, column: 34, scope: !6)
!45 = !DILocation(line: 52, column: 51, scope: !6)
!46 = !DILocation(line: 53, column: 35, scope: !6)
!47 = !DILocation(line: 53, column: 52, scope: !6)
!48 = !DILocation(line: 63, column: 23, scope: !6)
!49 = !DILocation(line: 64, column: 29, scope: !6)
!50 = !DILocation(line: 52, column: 113, scope: !6)
!51 = !DILocation(line: 53, column: 114, scope: !6)
!52 = !DILocation(line: 54, column: 23, scope: !6)
!53 = !DILocation(line: 64, column: 53, scope: !6)
!54 = !DILocation(line: 45, column: 4, scope: !6)
