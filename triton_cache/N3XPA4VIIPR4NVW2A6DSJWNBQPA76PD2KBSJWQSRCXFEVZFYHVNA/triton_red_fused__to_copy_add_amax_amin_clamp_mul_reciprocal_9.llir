; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, 3600, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 2, !dbg !11
  %13 = and i32 %12, 2044, !dbg !11
  %14 = shl i32 %8, 7, !dbg !12
  %15 = add i32 %14, 65536, !dbg !13
  %16 = and i32 %12, 124
  %invariant.op = or disjoint i32 %15, %16, !dbg !14
  %17 = lshr i32 %13, 7, !dbg !15
  %18 = mul nuw nsw i32 %17, 526336, !dbg !16
  %.reass = add i32 %18, %invariant.op
  %19 = sext i32 %.reass to i64, !dbg !17
  %20 = getelementptr bfloat, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %9) #4, !dbg !18
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !18
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !18
  %26 = extractelement <2 x bfloat> %23, i64 0, !dbg !18
  %27 = extractelement <2 x bfloat> %23, i64 1, !dbg !18
  %28 = extractelement <2 x bfloat> %25, i64 0, !dbg !18
  %29 = extractelement <2 x bfloat> %25, i64 1, !dbg !18
  %30 = fpext bfloat %26 to float, !dbg !19
  %31 = fpext bfloat %27 to float, !dbg !19
  %32 = fpext bfloat %28 to float, !dbg !19
  %33 = fpext bfloat %29 to float, !dbg !19
  %34 = select i1 %9, float %30, float 0x7FF0000000000000, !dbg !20
  %35 = select i1 %9, float %31, float 0x7FF0000000000000, !dbg !20
  %36 = select i1 %9, float %32, float 0x7FF0000000000000, !dbg !20
  %37 = select i1 %9, float %30, float 0xFFF0000000000000, !dbg !21
  %38 = select i1 %9, float %31, float 0xFFF0000000000000, !dbg !21
  %39 = select i1 %9, float %32, float 0xFFF0000000000000, !dbg !21
  %40 = or disjoint i32 %13, 2048, !dbg !22
  %41 = icmp samesign ult i32 %40, 3072, !dbg !23
  %42 = lshr i32 %40, 7, !dbg !15
  %43 = mul nuw nsw i32 %42, 526336, !dbg !16
  %.reass.1 = add i32 %43, %invariant.op
  %44 = sext i32 %.reass.1 to i64, !dbg !17
  %45 = getelementptr bfloat, ptr addrspace(1) %0, i64 %44, !dbg !17
  %46 = and i1 %9, %41, !dbg !24
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %46) #4, !dbg !18
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !18
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !18
  %50 = extractvalue { i32, i32 } %47, 1, !dbg !18
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !18
  %52 = extractelement <2 x bfloat> %49, i64 0, !dbg !18
  %53 = extractelement <2 x bfloat> %49, i64 1, !dbg !18
  %54 = extractelement <2 x bfloat> %51, i64 0, !dbg !18
  %55 = extractelement <2 x bfloat> %51, i64 1, !dbg !18
  %56 = fpext bfloat %52 to float, !dbg !19
  %57 = fpext bfloat %53 to float, !dbg !19
  %58 = fpext bfloat %54 to float, !dbg !19
  %59 = fpext bfloat %55 to float, !dbg !19
  %60 = fcmp olt float %34, %56, !dbg !25
  %61 = fcmp olt float %35, %57, !dbg !25
  %62 = fcmp olt float %36, %58, !dbg !25
  %63 = fcmp uno float %34, 0.000000e+00, !dbg !29
  %64 = fcmp uno float %35, 0.000000e+00, !dbg !29
  %65 = fcmp uno float %36, 0.000000e+00, !dbg !29
  %66 = or i1 %63, %60, !dbg !30
  %67 = or i1 %64, %61, !dbg !30
  %68 = or i1 %65, %62, !dbg !30
  %69 = select i1 %66, float %34, float %56, !dbg !31
  %70 = select i1 %67, float %35, float %57, !dbg !31
  %71 = select i1 %68, float %36, float %58, !dbg !31
  %72 = select i1 %46, float %70, float %35, !dbg !20
  %73 = select i1 %46, float %71, float %36, !dbg !20
  %74 = fcmp ogt float %37, %56, !dbg !32
  %75 = fcmp ogt float %38, %57, !dbg !32
  %76 = fcmp ogt float %39, %58, !dbg !32
  %77 = fcmp uno float %37, 0.000000e+00, !dbg !34
  %78 = fcmp uno float %38, 0.000000e+00, !dbg !34
  %79 = fcmp uno float %39, 0.000000e+00, !dbg !34
  %80 = or i1 %77, %74, !dbg !35
  %81 = or i1 %78, %75, !dbg !35
  %82 = or i1 %79, %76, !dbg !35
  %83 = select i1 %80, float %37, float %56, !dbg !36
  %84 = select i1 %81, float %38, float %57, !dbg !36
  %85 = select i1 %82, float %39, float %58, !dbg !36
  %86 = select i1 %46, float %84, float %38, !dbg !21
  %87 = select i1 %46, float %85, float %39, !dbg !21
  %88 = lshr i32 %10, 5, !dbg !11
  %89 = insertelement <2 x i1> poison, i1 %46, i64 0, !dbg !20
  %90 = insertelement <2 x i1> %89, i1 %9, i64 1, !dbg !20
  %91 = insertelement <2 x float> poison, float %69, i64 0, !dbg !20
  %92 = insertelement <2 x float> %91, float %33, i64 1, !dbg !20
  %93 = insertelement <2 x float> <float poison, float 0x7FF0000000000000>, float %34, i64 0, !dbg !20
  %94 = select <2 x i1> %90, <2 x float> %92, <2 x float> %93, !dbg !20
  %95 = insertelement <2 x float> poison, float %72, i64 0, !dbg !37
  %96 = insertelement <2 x float> %95, float %59, i64 1, !dbg !37
  %97 = fcmp olt <2 x float> %94, %96, !dbg !37
  %98 = fcmp uno <2 x float> %94, zeroinitializer, !dbg !40
  %99 = or <2 x i1> %98, %97, !dbg !41
  %100 = select <2 x i1> %99, <2 x float> %94, <2 x float> %96, !dbg !42
  %101 = extractelement <2 x float> %100, i64 0, !dbg !40
  %102 = fcmp olt float %101, %73, !dbg !37
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !40
  %104 = or i1 %102, %103, !dbg !41
  %105 = insertelement <2 x i1> poison, i1 %104, i64 0, !dbg !42
  %106 = insertelement <2 x i1> %105, i1 %46, i64 1, !dbg !42
  %107 = insertelement <2 x float> %94, float %73, i64 0, !dbg !42
  %108 = select <2 x i1> %106, <2 x float> %100, <2 x float> %107, !dbg !42
  %109 = extractelement <2 x float> %108, i64 0, !dbg !42
  %110 = extractelement <2 x float> %108, i64 1, !dbg !37
  %111 = fcmp olt float %109, %110, !dbg !37
  %112 = fcmp uno float %109, 0.000000e+00, !dbg !40
  %113 = or i1 %111, %112, !dbg !41
  %114 = select i1 %113, float %109, float %110, !dbg !42
  %115 = bitcast float %114 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = fcmp olt float %114, %117, !dbg !37
  %119 = fcmp uno float %114, 0.000000e+00, !dbg !40
  %120 = or i1 %119, %118, !dbg !41
  %121 = select i1 %120, float %114, float %117, !dbg !42
  %122 = bitcast float %121 to i32, !dbg !43
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = fcmp olt float %121, %124, !dbg !37
  %126 = fcmp uno float %121, 0.000000e+00, !dbg !40
  %127 = or i1 %125, %126, !dbg !41
  %128 = select i1 %127, float %121, float %124, !dbg !42
  %129 = bitcast float %128 to i32, !dbg !43
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !43
  %131 = bitcast i32 %130 to float, !dbg !43
  %132 = fcmp olt float %128, %131, !dbg !37
  %133 = fcmp uno float %128, 0.000000e+00, !dbg !40
  %134 = or i1 %132, %133, !dbg !41
  %135 = select i1 %134, float %128, float %131, !dbg !42
  %136 = bitcast float %135 to i32, !dbg !43
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !43
  %138 = bitcast i32 %137 to float, !dbg !43
  %139 = fcmp olt float %135, %138, !dbg !37
  %140 = fcmp uno float %135, 0.000000e+00, !dbg !40
  %141 = or i1 %139, %140, !dbg !41
  %142 = select i1 %141, float %135, float %138, !dbg !42
  %143 = bitcast float %142 to i32, !dbg !43
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !43
  %145 = bitcast i32 %144 to float, !dbg !43
  %146 = fcmp olt float %142, %145, !dbg !37
  %147 = fcmp uno float %142, 0.000000e+00, !dbg !40
  %148 = or i1 %146, %147, !dbg !41
  %149 = and i32 %88, 15, !dbg !43
  %150 = icmp eq i32 %11, 0, !dbg !43
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !43
  %152 = select i1 %148, i32 %143, i32 %144, !dbg !42
  %153 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %153, i1 %150) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %154 = icmp slt i32 %10, 16, !dbg !43
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !43
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #4, !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 8, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = fcmp olt float %157, %159, !dbg !37
  %161 = fcmp uno float %157, 0.000000e+00, !dbg !40
  %162 = or i1 %161, %160, !dbg !41
  %163 = select i1 %162, float %157, float %159, !dbg !42
  %164 = bitcast float %163 to i32, !dbg !43
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !43
  %166 = bitcast i32 %165 to float, !dbg !43
  %167 = fcmp olt float %163, %166, !dbg !37
  %168 = fcmp uno float %163, 0.000000e+00, !dbg !40
  %169 = or i1 %167, %168, !dbg !41
  %170 = select i1 %169, float %163, float %166, !dbg !42
  %171 = bitcast float %170 to i32, !dbg !43
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !43
  %173 = bitcast i32 %172 to float, !dbg !43
  %174 = fcmp olt float %170, %173, !dbg !37
  %175 = fcmp uno float %170, 0.000000e+00, !dbg !40
  %176 = or i1 %174, %175, !dbg !41
  %177 = select i1 %176, float %170, float %173, !dbg !42
  %178 = bitcast float %177 to i32, !dbg !43
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = fcmp olt float %177, %180, !dbg !37
  %182 = fcmp uno float %177, 0.000000e+00, !dbg !40
  %183 = or i1 %181, %182, !dbg !41
  %184 = and i32 %10, 15, !dbg !43
  %185 = icmp eq i32 %184, 0, !dbg !43
  %186 = and i1 %154, %185, !dbg !43
  %187 = select i1 %183, i32 %178, i32 %179, !dbg !42
  %188 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %188, i1 %186) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %189 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %190 = insertelement <2 x float> poison, float %83, i64 0, !dbg !21
  %191 = insertelement <2 x float> %190, float %33, i64 1, !dbg !21
  %192 = insertelement <2 x float> <float poison, float 0xFFF0000000000000>, float %37, i64 0, !dbg !21
  %193 = select <2 x i1> %90, <2 x float> %191, <2 x float> %192, !dbg !21
  %194 = insertelement <2 x float> poison, float %86, i64 0, !dbg !46
  %195 = insertelement <2 x float> %194, float %59, i64 1, !dbg !46
  %196 = fcmp ogt <2 x float> %193, %195, !dbg !46
  %197 = fcmp uno <2 x float> %193, zeroinitializer, !dbg !47
  %198 = or <2 x i1> %197, %196, !dbg !48
  %199 = select <2 x i1> %198, <2 x float> %193, <2 x float> %195, !dbg !49
  %200 = extractelement <2 x float> %199, i64 0, !dbg !47
  %201 = fcmp ogt float %200, %87, !dbg !46
  %202 = fcmp uno float %200, 0.000000e+00, !dbg !47
  %203 = or i1 %201, %202, !dbg !48
  %204 = insertelement <2 x i1> poison, i1 %203, i64 0, !dbg !49
  %205 = insertelement <2 x i1> %204, i1 %46, i64 1, !dbg !49
  %206 = insertelement <2 x float> %193, float %87, i64 0, !dbg !49
  %207 = select <2 x i1> %205, <2 x float> %199, <2 x float> %206, !dbg !49
  %208 = extractelement <2 x float> %207, i64 0, !dbg !49
  %209 = extractelement <2 x float> %207, i64 1, !dbg !46
  %210 = fcmp ogt float %208, %209, !dbg !46
  %211 = fcmp uno float %208, 0.000000e+00, !dbg !47
  %212 = or i1 %210, %211, !dbg !48
  %213 = select i1 %212, float %208, float %209, !dbg !49
  %214 = bitcast float %213 to i32, !dbg !44
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !44
  %216 = bitcast i32 %215 to float, !dbg !44
  %217 = fcmp ogt float %213, %216, !dbg !46
  %218 = fcmp uno float %213, 0.000000e+00, !dbg !47
  %219 = or i1 %218, %217, !dbg !48
  %220 = select i1 %219, float %213, float %216, !dbg !49
  %221 = bitcast float %220 to i32, !dbg !44
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !44
  %223 = bitcast i32 %222 to float, !dbg !44
  %224 = fcmp ogt float %220, %223, !dbg !46
  %225 = fcmp uno float %220, 0.000000e+00, !dbg !47
  %226 = or i1 %224, %225, !dbg !48
  %227 = select i1 %226, float %220, float %223, !dbg !49
  %228 = bitcast float %227 to i32, !dbg !44
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !44
  %230 = bitcast i32 %229 to float, !dbg !44
  %231 = fcmp ogt float %227, %230, !dbg !46
  %232 = fcmp uno float %227, 0.000000e+00, !dbg !47
  %233 = or i1 %231, %232, !dbg !48
  %234 = select i1 %233, float %227, float %230, !dbg !49
  %235 = bitcast float %234 to i32, !dbg !44
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !44
  %237 = bitcast i32 %236 to float, !dbg !44
  %238 = fcmp ogt float %234, %237, !dbg !46
  %239 = fcmp uno float %234, 0.000000e+00, !dbg !47
  %240 = or i1 %238, %239, !dbg !48
  %241 = select i1 %240, float %234, float %237, !dbg !49
  %242 = bitcast float %241 to i32, !dbg !44
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !44
  %244 = bitcast i32 %243 to float, !dbg !44
  %245 = fcmp ogt float %241, %244, !dbg !46
  %246 = fcmp uno float %241, 0.000000e+00, !dbg !47
  %247 = or i1 %245, %246, !dbg !48
  %248 = select i1 %247, i32 %242, i32 %243, !dbg !49
  %249 = insertelement <1 x i32> poison, i32 %248, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %249, i1 %150) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %250 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #4, !dbg !44
  %251 = bitcast i32 %250 to float, !dbg !44
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !44
  %253 = bitcast i32 %252 to float, !dbg !44
  %254 = fcmp ogt float %251, %253, !dbg !46
  %255 = fcmp uno float %251, 0.000000e+00, !dbg !47
  %256 = or i1 %255, %254, !dbg !48
  %257 = select i1 %256, float %251, float %253, !dbg !49
  %258 = bitcast float %257 to i32, !dbg !44
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !44
  %260 = bitcast i32 %259 to float, !dbg !44
  %261 = fcmp ogt float %257, %260, !dbg !46
  %262 = fcmp uno float %257, 0.000000e+00, !dbg !47
  %263 = or i1 %261, %262, !dbg !48
  %264 = select i1 %263, float %257, float %260, !dbg !49
  %265 = bitcast float %264 to i32, !dbg !44
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !44
  %267 = bitcast i32 %266 to float, !dbg !44
  %268 = fcmp ogt float %264, %267, !dbg !46
  %269 = fcmp uno float %264, 0.000000e+00, !dbg !47
  %270 = or i1 %268, %269, !dbg !48
  %271 = select i1 %270, float %264, float %267, !dbg !49
  %272 = bitcast float %271 to i32, !dbg !44
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !44
  %274 = bitcast i32 %273 to float, !dbg !44
  %275 = fcmp ogt float %271, %274, !dbg !46
  %276 = fcmp uno float %271, 0.000000e+00, !dbg !47
  %277 = or i1 %275, %276, !dbg !48
  %278 = select i1 %277, i32 %272, i32 %273, !dbg !49
  %279 = insertelement <1 x i32> poison, i32 %278, i64 0, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %279, i1 %186) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %280 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %281 = sext i32 %8 to i64, !dbg !50
  %282 = getelementptr bfloat, ptr addrspace(1) %1, i64 %281, !dbg !50
  %283 = fptrunc float %189 to bfloat, !dbg !51
  %284 = and i32 %10, 511, !dbg !51
  %285 = icmp eq i32 %284, 0, !dbg !51
  %286 = bitcast bfloat %283 to i16, !dbg !51
  %287 = and i1 %9, %285, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %286, ptr addrspace(1) %282, i1 %287) #4, !dbg !51
  %288 = getelementptr bfloat, ptr addrspace(1) %2, i64 %281, !dbg !52
  %289 = fptrunc float %280 to bfloat, !dbg !53
  %290 = bitcast bfloat %289 to i16, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %290, ptr addrspace(1) %288, i1 %287) #4, !dbg !53
  %.inv = fcmp oge float %189, 0.000000e+00, !dbg !54
  %291 = select i1 %.inv, float 0.000000e+00, float %189, !dbg !54
  %292 = fsub float 0.000000e+00, %291, !dbg !56
  %.inv2 = fcmp ole float %280, 0.000000e+00, !dbg !57
  %293 = select i1 %.inv2, float 0.000000e+00, float %280, !dbg !57
  %294 = fcmp ogt float %292, %293, !dbg !59
  %295 = fcmp uno float %292, 0.000000e+00, !dbg !61
  %296 = or i1 %295, %294, !dbg !62
  %297 = select i1 %296, float %292, float %293, !dbg !63
  %298 = fmul float %297, 0x3F80204080000000, !dbg !64
  %299 = fcmp ogt float %298, 0x3EE4F8B580000000, !dbg !65
  %300 = fcmp uno float %298, 0.000000e+00, !dbg !67
  %301 = or i1 %299, %300, !dbg !68
  %302 = select i1 %301, float %298, float 0x3EE4F8B580000000, !dbg !69
  %303 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %302), !dbg !70
  %304 = mul i32 %8, 3072, !dbg !71
  %305 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %9) #4, !dbg !72
  %306 = extractvalue { i32, i32 } %305, 0, !dbg !72
  %307 = bitcast i32 %306 to <2 x bfloat>, !dbg !72
  %308 = extractvalue { i32, i32 } %305, 1, !dbg !72
  %309 = bitcast i32 %308 to <2 x bfloat>, !dbg !72
  %310 = extractelement <2 x bfloat> %307, i64 0, !dbg !72
  %311 = extractelement <2 x bfloat> %307, i64 1, !dbg !72
  %312 = extractelement <2 x bfloat> %309, i64 0, !dbg !72
  %313 = extractelement <2 x bfloat> %309, i64 1, !dbg !72
  %314 = fpext bfloat %310 to float, !dbg !73
  %315 = fpext bfloat %311 to float, !dbg !73
  %316 = fpext bfloat %312 to float, !dbg !73
  %317 = fpext bfloat %313 to float, !dbg !73
  %318 = fmul float %303, %314, !dbg !74
  %319 = fmul float %303, %315, !dbg !74
  %320 = fmul float %303, %316, !dbg !74
  %321 = fmul float %303, %317, !dbg !74
  %322 = tail call float @llvm.nvvm.round.f(float %318) #4, !dbg !75
  %323 = tail call float @llvm.nvvm.round.f(float %319) #4, !dbg !75
  %324 = tail call float @llvm.nvvm.round.f(float %320) #4, !dbg !75
  %325 = tail call float @llvm.nvvm.round.f(float %321) #4, !dbg !75
  %326 = insertelement <4 x float> poison, float %322, i64 0, !dbg !76
  %327 = insertelement <4 x float> %326, float %323, i64 1, !dbg !76
  %328 = insertelement <4 x float> %327, float %324, i64 2, !dbg !76
  %329 = insertelement <4 x float> %328, float %325, i64 3, !dbg !76
  %330 = fcmp ogt <4 x float> %329, splat (float -1.270000e+02), !dbg !76
  %331 = fcmp uno <4 x float> %329, zeroinitializer, !dbg !78
  %332 = or <4 x i1> %330, %331, !dbg !79
  %333 = select <4 x i1> %332, <4 x float> %329, <4 x float> splat (float -1.270000e+02), !dbg !80
  %334 = fcmp olt <4 x float> %333, splat (float 1.270000e+02), !dbg !81
  %335 = fcmp uno <4 x float> %333, zeroinitializer, !dbg !83
  %336 = or <4 x i1> %334, %335, !dbg !84
  %337 = fptosi <4 x float> %333 to <4 x i8>, !dbg !85
  %338 = select <4 x i1> %336, <4 x i8> %337, <4 x i8> splat (i8 127), !dbg !86
  %339 = add i32 %13, %304, !dbg !87
  %340 = sext i32 %339 to i64, !dbg !88
  %341 = getelementptr i8, ptr addrspace(1) %3, i64 %340, !dbg !88
  %342 = bitcast <4 x i8> %338 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %342, ptr addrspace(1) %341, i1 %9) #4, !dbg !89
  %343 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %46) #4, !dbg !72
  %344 = extractvalue { i32, i32 } %343, 0, !dbg !72
  %345 = bitcast i32 %344 to <2 x bfloat>, !dbg !72
  %346 = extractvalue { i32, i32 } %343, 1, !dbg !72
  %347 = bitcast i32 %346 to <2 x bfloat>, !dbg !72
  %348 = extractelement <2 x bfloat> %345, i64 0, !dbg !72
  %349 = extractelement <2 x bfloat> %345, i64 1, !dbg !72
  %350 = extractelement <2 x bfloat> %347, i64 0, !dbg !72
  %351 = extractelement <2 x bfloat> %347, i64 1, !dbg !72
  %352 = fpext bfloat %348 to float, !dbg !73
  %353 = fpext bfloat %349 to float, !dbg !73
  %354 = fpext bfloat %350 to float, !dbg !73
  %355 = fpext bfloat %351 to float, !dbg !73
  %356 = fmul float %303, %352, !dbg !74
  %357 = fmul float %303, %353, !dbg !74
  %358 = fmul float %303, %354, !dbg !74
  %359 = fmul float %303, %355, !dbg !74
  %360 = tail call float @llvm.nvvm.round.f(float %356) #4, !dbg !75
  %361 = tail call float @llvm.nvvm.round.f(float %357) #4, !dbg !75
  %362 = tail call float @llvm.nvvm.round.f(float %358) #4, !dbg !75
  %363 = tail call float @llvm.nvvm.round.f(float %359) #4, !dbg !75
  %364 = insertelement <4 x float> poison, float %360, i64 0, !dbg !76
  %365 = insertelement <4 x float> %364, float %361, i64 1, !dbg !76
  %366 = insertelement <4 x float> %365, float %362, i64 2, !dbg !76
  %367 = insertelement <4 x float> %366, float %363, i64 3, !dbg !76
  %368 = fcmp ogt <4 x float> %367, splat (float -1.270000e+02), !dbg !76
  %369 = fcmp uno <4 x float> %367, zeroinitializer, !dbg !78
  %370 = or <4 x i1> %368, %369, !dbg !79
  %371 = select <4 x i1> %370, <4 x float> %367, <4 x float> splat (float -1.270000e+02), !dbg !80
  %372 = fcmp olt <4 x float> %371, splat (float 1.270000e+02), !dbg !81
  %373 = fcmp uno <4 x float> %371, zeroinitializer, !dbg !83
  %374 = or <4 x i1> %372, %373, !dbg !84
  %375 = fptosi <4 x float> %371 to <4 x i8>, !dbg !85
  %376 = select <4 x i1> %374, <4 x i8> %375, <4 x i8> splat (i8 127), !dbg !86
  %377 = add i32 %40, %304, !dbg !87
  %378 = sext i32 %377 to i64, !dbg !88
  %379 = getelementptr i8, ptr addrspace(1) %3, i64 %378, !dbg !88
  %380 = bitcast <4 x i8> %376 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %380, ptr addrspace(1) %379, i1 %46) #4, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqx4umnpxfbcu2l6rryhc34knavpax5uagm3mqzm7aatf72hatl.py", directory: "/tmp/torchinductor_root/iq")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 37, column: 46, scope: !6)
!13 = !DILocation(line: 37, column: 42, scope: !6)
!14 = !DILocation(line: 31, column: 40, scope: !6)
!15 = !DILocation(line: 37, column: 67, scope: !6)
!16 = !DILocation(line: 37, column: 59, scope: !6)
!17 = !DILocation(line: 37, column: 34, scope: !6)
!18 = !DILocation(line: 37, column: 91, scope: !6)
!19 = !DILocation(line: 37, column: 152, scope: !6)
!20 = !DILocation(line: 40, column: 48, scope: !6)
!21 = !DILocation(line: 42, column: 48, scope: !6)
!22 = !DILocation(line: 32, column: 31, scope: !6)
!23 = !DILocation(line: 33, column: 29, scope: !6)
!24 = !DILocation(line: 37, column: 99, scope: !6)
!25 = !DILocation(line: 94, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 39, column: 45, scope: !6)
!29 = !DILocation(line: 96, column: 21, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 96, column: 16, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 45, scope: !6)
!34 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !33)
!35 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !33)
!36 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !33)
!37 = !DILocation(line: 94, column: 15, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!39 = !DILocation(line: 43, column: 38, scope: !6)
!40 = !DILocation(line: 96, column: 21, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 96, column: 16, scope: !38, inlinedAt: !39)
!42 = !DILocation(line: 97, column: 29, scope: !38, inlinedAt: !39)
!43 = !DILocation(line: 110, column: 29, scope: !26, inlinedAt: !39)
!44 = !DILocation(line: 115, column: 29, scope: !26, inlinedAt: !45)
!45 = !DILocation(line: 44, column: 38, scope: !6)
!46 = !DILocation(line: 102, column: 15, scope: !38, inlinedAt: !45)
!47 = !DILocation(line: 104, column: 21, scope: !38, inlinedAt: !45)
!48 = !DILocation(line: 104, column: 16, scope: !38, inlinedAt: !45)
!49 = !DILocation(line: 105, column: 29, scope: !38, inlinedAt: !45)
!50 = !DILocation(line: 45, column: 25, scope: !6)
!51 = !DILocation(line: 45, column: 36, scope: !6)
!52 = !DILocation(line: 46, column: 25, scope: !6)
!53 = !DILocation(line: 46, column: 36, scope: !6)
!54 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !55)
!55 = !DILocation(line: 55, column: 44, scope: !6)
!56 = !DILocation(line: 56, column: 16, scope: !6)
!57 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 45, scope: !6)
!59 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !6)
!61 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !60)
!62 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !60)
!63 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !60)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 46, scope: !6)
!67 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !66)
!69 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !66)
!70 = !DILocation(line: 66, column: 25, scope: !6)
!71 = !DILocation(line: 78, column: 41, scope: !6)
!72 = !DILocation(line: 53, column: 91, scope: !6)
!73 = !DILocation(line: 53, column: 153, scope: !6)
!74 = !DILocation(line: 69, column: 23, scope: !6)
!75 = !DILocation(line: 70, column: 36, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !26, inlinedAt: !77)
!77 = !DILocation(line: 73, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !26, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !26, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !26, inlinedAt: !77)
!81 = !DILocation(line: 94, column: 15, scope: !26, inlinedAt: !82)
!82 = !DILocation(line: 75, column: 46, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !26, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !26, inlinedAt: !82)
!85 = !DILocation(line: 77, column: 25, scope: !6)
!86 = !DILocation(line: 97, column: 29, scope: !26, inlinedAt: !82)
!87 = !DILocation(line: 78, column: 36, scope: !6)
!88 = !DILocation(line: 78, column: 29, scope: !6)
!89 = !DILocation(line: 78, column: 53, scope: !6)
!90 = !DILocation(line: 47, column: 4, scope: !6)
