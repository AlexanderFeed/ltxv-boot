; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 512, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 8, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 512, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 4, !dbg !19
  %17 = and i32 %16, 7, !dbg !19
  %18 = or disjoint i32 %17, 8, !dbg !19
  %19 = or disjoint i32 %17, 16, !dbg !19
  %20 = or disjoint i32 %17, 24, !dbg !19
  %21 = or disjoint i32 %17, 32, !dbg !19
  %22 = or disjoint i32 %17, 40, !dbg !19
  %23 = or disjoint i32 %17, 48, !dbg !19
  %24 = or disjoint i32 %17, 56, !dbg !19
  %25 = and i32 %15, 8, !dbg !19
  %26 = shl i32 %15, 3, !dbg !19
  %27 = and i32 %26, 8, !dbg !19
  %28 = and i32 %26, 16, !dbg !19
  %29 = and i32 %26, 24, !dbg !19
  %30 = and i32 %26, 32, !dbg !19
  %31 = and i32 %26, 56, !dbg !19
  %32 = or disjoint i32 %14, %17, !dbg !20
  %33 = or disjoint i32 %14, %18, !dbg !20
  %34 = or disjoint i32 %14, %19, !dbg !20
  %35 = or disjoint i32 %14, %20, !dbg !20
  %36 = or disjoint i32 %14, %21, !dbg !20
  %37 = or disjoint i32 %14, %22, !dbg !20
  %38 = or disjoint i32 %14, %23, !dbg !20
  %39 = or disjoint i32 %14, %24, !dbg !20
  %40 = shl nsw i32 %13, 6, !dbg !21
  %41 = or disjoint i32 %40, %17, !dbg !22
  %42 = or disjoint i32 %40, %18, !dbg !22
  %43 = or disjoint i32 %40, %19, !dbg !22
  %44 = or disjoint i32 %40, %20, !dbg !22
  %45 = or disjoint i32 %40, %21, !dbg !22
  %46 = or disjoint i32 %40, %22, !dbg !22
  %47 = or disjoint i32 %40, %23, !dbg !22
  %48 = or disjoint i32 %40, %24, !dbg !22
  %49 = srem i32 %32, 512, !dbg !23
  %50 = srem i32 %33, 512, !dbg !23
  %51 = srem i32 %34, 512, !dbg !23
  %52 = srem i32 %35, 512, !dbg !23
  %53 = srem i32 %36, 512, !dbg !23
  %54 = srem i32 %37, 512, !dbg !23
  %55 = srem i32 %38, 512, !dbg !23
  %56 = srem i32 %39, 512, !dbg !23
  %57 = srem i32 %41, 4096, !dbg !24
  %58 = srem i32 %42, 4096, !dbg !24
  %59 = srem i32 %43, 4096, !dbg !24
  %60 = srem i32 %44, 4096, !dbg !24
  %61 = srem i32 %45, 4096, !dbg !24
  %62 = srem i32 %46, 4096, !dbg !24
  %63 = srem i32 %47, 4096, !dbg !24
  %64 = srem i32 %48, 4096, !dbg !24
  %65 = shl nuw nsw i32 %25, 3, !dbg !25
  %66 = or disjoint i32 %31, %65, !dbg !25
  %67 = shl nsw i32 %49, 12, !dbg !26
  %68 = shl nsw i32 %50, 12, !dbg !26
  %69 = shl nsw i32 %51, 12, !dbg !26
  %70 = shl nsw i32 %52, 12, !dbg !26
  %71 = shl nsw i32 %53, 12, !dbg !26
  %72 = shl nsw i32 %54, 12, !dbg !26
  %73 = shl nsw i32 %55, 12, !dbg !26
  %74 = shl nsw i32 %56, 12, !dbg !26
  %75 = shl nsw i32 %57, 12, !dbg !27
  %76 = shl nsw i32 %58, 12, !dbg !27
  %77 = shl nsw i32 %59, 12, !dbg !27
  %78 = shl nsw i32 %60, 12, !dbg !27
  %79 = shl nsw i32 %61, 12, !dbg !27
  %80 = shl nsw i32 %62, 12, !dbg !27
  %81 = shl nsw i32 %63, 12, !dbg !27
  %82 = shl nsw i32 %64, 12, !dbg !27
  %83 = or disjoint i32 %67, %66, !dbg !28
  %84 = or disjoint i32 %68, %66, !dbg !28
  %85 = or disjoint i32 %69, %66, !dbg !28
  %86 = or disjoint i32 %70, %66, !dbg !28
  %87 = or disjoint i32 %71, %66, !dbg !28
  %88 = or disjoint i32 %72, %66, !dbg !28
  %89 = or disjoint i32 %73, %66, !dbg !28
  %90 = or disjoint i32 %74, %66, !dbg !28
  %91 = sext i32 %83 to i64, !dbg !29
  %92 = getelementptr bfloat, ptr addrspace(1) %0, i64 %91, !dbg !29
  %93 = sext i32 %84 to i64, !dbg !29
  %94 = getelementptr bfloat, ptr addrspace(1) %0, i64 %93, !dbg !29
  %95 = sext i32 %85 to i64, !dbg !29
  %96 = getelementptr bfloat, ptr addrspace(1) %0, i64 %95, !dbg !29
  %97 = sext i32 %86 to i64, !dbg !29
  %98 = getelementptr bfloat, ptr addrspace(1) %0, i64 %97, !dbg !29
  %99 = sext i32 %87 to i64, !dbg !29
  %100 = getelementptr bfloat, ptr addrspace(1) %0, i64 %99, !dbg !29
  %101 = sext i32 %88 to i64, !dbg !29
  %102 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = sext i32 %89 to i64, !dbg !29
  %104 = getelementptr bfloat, ptr addrspace(1) %0, i64 %103, !dbg !29
  %105 = sext i32 %90 to i64, !dbg !29
  %106 = getelementptr bfloat, ptr addrspace(1) %0, i64 %105, !dbg !29
  %107 = lshr i32 %15, 1, !dbg !30
  %108 = and i32 %107, 8, !dbg !30
  %109 = lshr i32 %15, 1, !dbg !30
  %110 = and i32 %109, 56, !dbg !30
  %111 = xor i32 %66, %110, !dbg !30
  %112 = shl nuw nsw i32 %17, 7, !dbg !30
  %113 = or disjoint i32 %111, %112, !dbg !30
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %113, !dbg !30
  %115 = or disjoint i32 %113, 1024, !dbg !30
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %115, !dbg !30
  %117 = or disjoint i32 %113, 2048, !dbg !30
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %117, !dbg !30
  %119 = or disjoint i32 %113, 3072, !dbg !30
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %119, !dbg !30
  %121 = or disjoint i32 %113, 4096, !dbg !30
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %121, !dbg !30
  %123 = or disjoint i32 %113, 5120, !dbg !30
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %123, !dbg !30
  %125 = or disjoint i32 %113, 6144, !dbg !30
  %126 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %125, !dbg !30
  %127 = or disjoint i32 %113, 7168, !dbg !30
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %127, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %92, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %94, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %118, ptr addrspace(1) %96, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %120, ptr addrspace(1) %98, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %122, ptr addrspace(1) %100, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %102, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %126, ptr addrspace(1) %104, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %106, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %129 = or disjoint i32 %75, %66, !dbg !31
  %130 = or disjoint i32 %76, %66, !dbg !31
  %131 = or disjoint i32 %77, %66, !dbg !31
  %132 = or disjoint i32 %78, %66, !dbg !31
  %133 = or disjoint i32 %79, %66, !dbg !31
  %134 = or disjoint i32 %80, %66, !dbg !31
  %135 = or disjoint i32 %81, %66, !dbg !31
  %136 = or disjoint i32 %82, %66, !dbg !31
  %137 = sext i32 %129 to i64, !dbg !32
  %138 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !32
  %139 = sext i32 %130 to i64, !dbg !32
  %140 = getelementptr bfloat, ptr addrspace(1) %1, i64 %139, !dbg !32
  %141 = sext i32 %131 to i64, !dbg !32
  %142 = getelementptr bfloat, ptr addrspace(1) %1, i64 %141, !dbg !32
  %143 = sext i32 %132 to i64, !dbg !32
  %144 = getelementptr bfloat, ptr addrspace(1) %1, i64 %143, !dbg !32
  %145 = sext i32 %133 to i64, !dbg !32
  %146 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !32
  %147 = sext i32 %134 to i64, !dbg !32
  %148 = getelementptr bfloat, ptr addrspace(1) %1, i64 %147, !dbg !32
  %149 = sext i32 %135 to i64, !dbg !32
  %150 = getelementptr bfloat, ptr addrspace(1) %1, i64 %149, !dbg !32
  %151 = sext i32 %136 to i64, !dbg !32
  %152 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !32
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %113, !dbg !33
  %154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %115, !dbg !33
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %117, !dbg !33
  %156 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %119, !dbg !33
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %121, !dbg !33
  %158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %123, !dbg !33
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %125, !dbg !33
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %127, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %153, ptr addrspace(1) %138, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %154, ptr addrspace(1) %140, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %155, ptr addrspace(1) %142, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %156, ptr addrspace(1) %144, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %146, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %158, ptr addrspace(1) %148, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %150, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %160, ptr addrspace(1) %152, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %161 = or disjoint i32 %66, 128, !dbg !34
  %162 = or disjoint i32 %67, %161, !dbg !28
  %163 = or disjoint i32 %68, %161, !dbg !28
  %164 = or disjoint i32 %69, %161, !dbg !28
  %165 = or disjoint i32 %70, %161, !dbg !28
  %166 = or disjoint i32 %71, %161, !dbg !28
  %167 = or disjoint i32 %72, %161, !dbg !28
  %168 = or disjoint i32 %73, %161, !dbg !28
  %169 = or disjoint i32 %74, %161, !dbg !28
  %170 = sext i32 %162 to i64, !dbg !29
  %171 = getelementptr bfloat, ptr addrspace(1) %0, i64 %170, !dbg !29
  %172 = sext i32 %163 to i64, !dbg !29
  %173 = getelementptr bfloat, ptr addrspace(1) %0, i64 %172, !dbg !29
  %174 = sext i32 %164 to i64, !dbg !29
  %175 = getelementptr bfloat, ptr addrspace(1) %0, i64 %174, !dbg !29
  %176 = sext i32 %165 to i64, !dbg !29
  %177 = getelementptr bfloat, ptr addrspace(1) %0, i64 %176, !dbg !29
  %178 = sext i32 %166 to i64, !dbg !29
  %179 = getelementptr bfloat, ptr addrspace(1) %0, i64 %178, !dbg !29
  %180 = sext i32 %167 to i64, !dbg !29
  %181 = getelementptr bfloat, ptr addrspace(1) %0, i64 %180, !dbg !29
  %182 = sext i32 %168 to i64, !dbg !29
  %183 = getelementptr bfloat, ptr addrspace(1) %0, i64 %182, !dbg !29
  %184 = sext i32 %169 to i64, !dbg !29
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %184, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %113, !dbg !30
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %115, !dbg !30
  %188 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %117, !dbg !30
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %119, !dbg !30
  %190 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %121, !dbg !30
  %191 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %123, !dbg !30
  %192 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %125, !dbg !30
  %193 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %127, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %186, ptr addrspace(1) %171, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %187, ptr addrspace(1) %173, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %188, ptr addrspace(1) %175, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %189, ptr addrspace(1) %177, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %190, ptr addrspace(1) %179, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %191, ptr addrspace(1) %181, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %192, ptr addrspace(1) %183, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %193, ptr addrspace(1) %185, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %194 = or disjoint i32 %75, %161, !dbg !31
  %195 = or disjoint i32 %76, %161, !dbg !31
  %196 = or disjoint i32 %77, %161, !dbg !31
  %197 = or disjoint i32 %78, %161, !dbg !31
  %198 = or disjoint i32 %79, %161, !dbg !31
  %199 = or disjoint i32 %80, %161, !dbg !31
  %200 = or disjoint i32 %81, %161, !dbg !31
  %201 = or disjoint i32 %82, %161, !dbg !31
  %202 = sext i32 %194 to i64, !dbg !32
  %203 = getelementptr bfloat, ptr addrspace(1) %1, i64 %202, !dbg !32
  %204 = sext i32 %195 to i64, !dbg !32
  %205 = getelementptr bfloat, ptr addrspace(1) %1, i64 %204, !dbg !32
  %206 = sext i32 %196 to i64, !dbg !32
  %207 = getelementptr bfloat, ptr addrspace(1) %1, i64 %206, !dbg !32
  %208 = sext i32 %197 to i64, !dbg !32
  %209 = getelementptr bfloat, ptr addrspace(1) %1, i64 %208, !dbg !32
  %210 = sext i32 %198 to i64, !dbg !32
  %211 = getelementptr bfloat, ptr addrspace(1) %1, i64 %210, !dbg !32
  %212 = sext i32 %199 to i64, !dbg !32
  %213 = getelementptr bfloat, ptr addrspace(1) %1, i64 %212, !dbg !32
  %214 = sext i32 %200 to i64, !dbg !32
  %215 = getelementptr bfloat, ptr addrspace(1) %1, i64 %214, !dbg !32
  %216 = sext i32 %201 to i64, !dbg !32
  %217 = getelementptr bfloat, ptr addrspace(1) %1, i64 %216, !dbg !32
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %113, !dbg !33
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %115, !dbg !33
  %220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %117, !dbg !33
  %221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %119, !dbg !33
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %121, !dbg !33
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %123, !dbg !33
  %224 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %125, !dbg !33
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %127, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %218, ptr addrspace(1) %203, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %219, ptr addrspace(1) %205, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %220, ptr addrspace(1) %207, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %221, ptr addrspace(1) %209, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %222, ptr addrspace(1) %211, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %223, ptr addrspace(1) %213, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %224, ptr addrspace(1) %215, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %225, ptr addrspace(1) %217, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %226 = or disjoint i32 %66, 256, !dbg !34
  %227 = or disjoint i32 %67, %226, !dbg !28
  %228 = or disjoint i32 %68, %226, !dbg !28
  %229 = or disjoint i32 %69, %226, !dbg !28
  %230 = or disjoint i32 %70, %226, !dbg !28
  %231 = or disjoint i32 %71, %226, !dbg !28
  %232 = or disjoint i32 %72, %226, !dbg !28
  %233 = or disjoint i32 %73, %226, !dbg !28
  %234 = or disjoint i32 %74, %226, !dbg !28
  %235 = sext i32 %227 to i64, !dbg !29
  %236 = getelementptr bfloat, ptr addrspace(1) %0, i64 %235, !dbg !29
  %237 = sext i32 %228 to i64, !dbg !29
  %238 = getelementptr bfloat, ptr addrspace(1) %0, i64 %237, !dbg !29
  %239 = sext i32 %229 to i64, !dbg !29
  %240 = getelementptr bfloat, ptr addrspace(1) %0, i64 %239, !dbg !29
  %241 = sext i32 %230 to i64, !dbg !29
  %242 = getelementptr bfloat, ptr addrspace(1) %0, i64 %241, !dbg !29
  %243 = sext i32 %231 to i64, !dbg !29
  %244 = getelementptr bfloat, ptr addrspace(1) %0, i64 %243, !dbg !29
  %245 = sext i32 %232 to i64, !dbg !29
  %246 = getelementptr bfloat, ptr addrspace(1) %0, i64 %245, !dbg !29
  %247 = sext i32 %233 to i64, !dbg !29
  %248 = getelementptr bfloat, ptr addrspace(1) %0, i64 %247, !dbg !29
  %249 = sext i32 %234 to i64, !dbg !29
  %250 = getelementptr bfloat, ptr addrspace(1) %0, i64 %249, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %113, !dbg !30
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %115, !dbg !30
  %253 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %117, !dbg !30
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %119, !dbg !30
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %121, !dbg !30
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %123, !dbg !30
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %125, !dbg !30
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %127, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %251, ptr addrspace(1) %236, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %252, ptr addrspace(1) %238, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %253, ptr addrspace(1) %240, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %254, ptr addrspace(1) %242, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %255, ptr addrspace(1) %244, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %246, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %248, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %250, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %259 = or disjoint i32 %75, %226, !dbg !31
  %260 = or disjoint i32 %76, %226, !dbg !31
  %261 = or disjoint i32 %77, %226, !dbg !31
  %262 = or disjoint i32 %78, %226, !dbg !31
  %263 = or disjoint i32 %79, %226, !dbg !31
  %264 = or disjoint i32 %80, %226, !dbg !31
  %265 = or disjoint i32 %81, %226, !dbg !31
  %266 = or disjoint i32 %82, %226, !dbg !31
  %267 = sext i32 %259 to i64, !dbg !32
  %268 = getelementptr bfloat, ptr addrspace(1) %1, i64 %267, !dbg !32
  %269 = sext i32 %260 to i64, !dbg !32
  %270 = getelementptr bfloat, ptr addrspace(1) %1, i64 %269, !dbg !32
  %271 = sext i32 %261 to i64, !dbg !32
  %272 = getelementptr bfloat, ptr addrspace(1) %1, i64 %271, !dbg !32
  %273 = sext i32 %262 to i64, !dbg !32
  %274 = getelementptr bfloat, ptr addrspace(1) %1, i64 %273, !dbg !32
  %275 = sext i32 %263 to i64, !dbg !32
  %276 = getelementptr bfloat, ptr addrspace(1) %1, i64 %275, !dbg !32
  %277 = sext i32 %264 to i64, !dbg !32
  %278 = getelementptr bfloat, ptr addrspace(1) %1, i64 %277, !dbg !32
  %279 = sext i32 %265 to i64, !dbg !32
  %280 = getelementptr bfloat, ptr addrspace(1) %1, i64 %279, !dbg !32
  %281 = sext i32 %266 to i64, !dbg !32
  %282 = getelementptr bfloat, ptr addrspace(1) %1, i64 %281, !dbg !32
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %113, !dbg !33
  %284 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %115, !dbg !33
  %285 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %117, !dbg !33
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %119, !dbg !33
  %287 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %121, !dbg !33
  %288 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %123, !dbg !33
  %289 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %125, !dbg !33
  %290 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %127, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %283, ptr addrspace(1) %268, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %284, ptr addrspace(1) %270, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %285, ptr addrspace(1) %272, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %286, ptr addrspace(1) %274, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %287, ptr addrspace(1) %276, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %288, ptr addrspace(1) %278, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %289, ptr addrspace(1) %280, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %290, ptr addrspace(1) %282, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %291 = or disjoint i32 %66, 384, !dbg !34
  %292 = or disjoint i32 %67, %291, !dbg !28
  %293 = or disjoint i32 %68, %291, !dbg !28
  %294 = or disjoint i32 %69, %291, !dbg !28
  %295 = or disjoint i32 %70, %291, !dbg !28
  %296 = or disjoint i32 %71, %291, !dbg !28
  %297 = or disjoint i32 %72, %291, !dbg !28
  %298 = or disjoint i32 %73, %291, !dbg !28
  %299 = or disjoint i32 %74, %291, !dbg !28
  %300 = sext i32 %292 to i64, !dbg !29
  %301 = getelementptr bfloat, ptr addrspace(1) %0, i64 %300, !dbg !29
  %302 = sext i32 %293 to i64, !dbg !29
  %303 = getelementptr bfloat, ptr addrspace(1) %0, i64 %302, !dbg !29
  %304 = sext i32 %294 to i64, !dbg !29
  %305 = getelementptr bfloat, ptr addrspace(1) %0, i64 %304, !dbg !29
  %306 = sext i32 %295 to i64, !dbg !29
  %307 = getelementptr bfloat, ptr addrspace(1) %0, i64 %306, !dbg !29
  %308 = sext i32 %296 to i64, !dbg !29
  %309 = getelementptr bfloat, ptr addrspace(1) %0, i64 %308, !dbg !29
  %310 = sext i32 %297 to i64, !dbg !29
  %311 = getelementptr bfloat, ptr addrspace(1) %0, i64 %310, !dbg !29
  %312 = sext i32 %298 to i64, !dbg !29
  %313 = getelementptr bfloat, ptr addrspace(1) %0, i64 %312, !dbg !29
  %314 = sext i32 %299 to i64, !dbg !29
  %315 = getelementptr bfloat, ptr addrspace(1) %0, i64 %314, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %113, !dbg !30
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %115, !dbg !30
  %318 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %117, !dbg !30
  %319 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %119, !dbg !30
  %320 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %121, !dbg !30
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %123, !dbg !30
  %322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %125, !dbg !30
  %323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %127, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %316, ptr addrspace(1) %301, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %317, ptr addrspace(1) %303, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %318, ptr addrspace(1) %305, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %319, ptr addrspace(1) %307, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %320, ptr addrspace(1) %309, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %321, ptr addrspace(1) %311, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %322, ptr addrspace(1) %313, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %323, ptr addrspace(1) %315, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %324 = or disjoint i32 %75, %291, !dbg !31
  %325 = or disjoint i32 %76, %291, !dbg !31
  %326 = or disjoint i32 %77, %291, !dbg !31
  %327 = or disjoint i32 %78, %291, !dbg !31
  %328 = or disjoint i32 %79, %291, !dbg !31
  %329 = or disjoint i32 %80, %291, !dbg !31
  %330 = or disjoint i32 %81, %291, !dbg !31
  %331 = or disjoint i32 %82, %291, !dbg !31
  %332 = sext i32 %324 to i64, !dbg !32
  %333 = getelementptr bfloat, ptr addrspace(1) %1, i64 %332, !dbg !32
  %334 = sext i32 %325 to i64, !dbg !32
  %335 = getelementptr bfloat, ptr addrspace(1) %1, i64 %334, !dbg !32
  %336 = sext i32 %326 to i64, !dbg !32
  %337 = getelementptr bfloat, ptr addrspace(1) %1, i64 %336, !dbg !32
  %338 = sext i32 %327 to i64, !dbg !32
  %339 = getelementptr bfloat, ptr addrspace(1) %1, i64 %338, !dbg !32
  %340 = sext i32 %328 to i64, !dbg !32
  %341 = getelementptr bfloat, ptr addrspace(1) %1, i64 %340, !dbg !32
  %342 = sext i32 %329 to i64, !dbg !32
  %343 = getelementptr bfloat, ptr addrspace(1) %1, i64 %342, !dbg !32
  %344 = sext i32 %330 to i64, !dbg !32
  %345 = getelementptr bfloat, ptr addrspace(1) %1, i64 %344, !dbg !32
  %346 = sext i32 %331 to i64, !dbg !32
  %347 = getelementptr bfloat, ptr addrspace(1) %1, i64 %346, !dbg !32
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %113, !dbg !33
  %349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %115, !dbg !33
  %350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %117, !dbg !33
  %351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %119, !dbg !33
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %121, !dbg !33
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %123, !dbg !33
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %125, !dbg !33
  %355 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %127, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %348, ptr addrspace(1) %333, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %349, ptr addrspace(1) %335, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %350, ptr addrspace(1) %337, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %351, ptr addrspace(1) %339, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %352, ptr addrspace(1) %341, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %353, ptr addrspace(1) %343, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %354, ptr addrspace(1) %345, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %355, ptr addrspace(1) %347, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %30, %108, !dbg !35
  %invariant.op88 = or disjoint i32 %25, 32, !dbg !35
  %invariant.op90 = or disjoint i32 %66, 512, !dbg !35
  %356 = and i32 %15, 7
  %357 = and i32 %15, 15
  %358 = xor i32 %31, %108
  %359 = lshr i32 %15, 2
  %360 = and i32 %359, 16
  %361 = or disjoint i32 %360, %357
  %362 = shl nuw nsw i32 %361, 7
  %363 = or disjoint i32 %362, %358
  %364 = or disjoint i32 %27, 16
  %365 = xor i32 %364, %28
  %366 = or disjoint i32 %365, %30
  %367 = xor i32 %366, %108
  %368 = or disjoint i32 %367, %362
  %369 = or disjoint i32 %29, 32
  %.reass = xor i32 %369, %invariant.op
  %370 = or disjoint i32 %.reass, %362
  %371 = or disjoint i32 %27, 48
  %and.ra = and i32 %26, 48
  %372 = or disjoint i32 %108, %and.ra
  %373 = xor i32 %372, %371
  %374 = or disjoint i32 %373, %362
  %375 = or disjoint i32 %31, 64
  %376 = xor i32 %375, %108
  %377 = or disjoint i32 %376, %362
  %378 = or disjoint i32 %27, 80
  %379 = xor i32 %378, %28
  %380 = or disjoint i32 %379, %30
  %381 = xor i32 %380, %108
  %382 = or disjoint i32 %381, %362
  %383 = or disjoint i32 %29, 96
  %.reass87 = xor i32 %383, %invariant.op
  %384 = or disjoint i32 %.reass87, %362
  %385 = or disjoint i32 %27, 112
  %386 = xor i32 %372, %385
  %387 = or disjoint i32 %386, %362
  %.reass89 = or disjoint i32 %356, %invariant.op88
  %388 = or disjoint i32 %.reass89, %360
  %389 = shl nuw nsw i32 %388, 7
  %390 = or disjoint i32 %389, %358
  %391 = or disjoint i32 %367, %389
  %392 = or disjoint i32 %.reass, %389
  %393 = or disjoint i32 %373, %389
  %394 = or disjoint i32 %389, %376
  %395 = or disjoint i32 %381, %389
  %396 = or disjoint i32 %.reass87, %389
  %397 = or disjoint i32 %386, %389
  %and.ra82 = and i32 %15, 24
  %398 = xor i32 %31, %and.ra82
  %399 = lshr i32 %15, 2
  %400 = and i32 %399, 8
  %401 = or disjoint i32 %400, %356
  %402 = shl nuw nsw i32 %401, 7
  %403 = or disjoint i32 %402, %398
  %404 = or disjoint i32 %30, %and.ra82
  %405 = xor i32 %404, %369
  %406 = xor i32 %375, %and.ra82
  %407 = xor i32 %404, %383
  %408 = or disjoint i32 %402, 2048
  %409 = or disjoint i32 %408, %398
  %410 = or disjoint i32 %402, 4096
  %411 = or disjoint i32 %410, %398
  %412 = or disjoint i32 %402, 6144
  %413 = or disjoint i32 %412, %398
  %414 = or disjoint i32 %405, %412
  %415 = or disjoint i32 %412, %406
  %416 = or disjoint i32 %407, %412
  %417 = zext nneg i32 %invariant.op90 to i64, !dbg !35
  %418 = sext i32 %82 to i64, !dbg !35
  %419 = sext i32 %81 to i64, !dbg !35
  %420 = sext i32 %80 to i64, !dbg !35
  %421 = sext i32 %79 to i64, !dbg !35
  %422 = sext i32 %78 to i64, !dbg !35
  %423 = sext i32 %77 to i64, !dbg !35
  %424 = sext i32 %76 to i64, !dbg !35
  %425 = sext i32 %75 to i64, !dbg !35
  %426 = sext i32 %74 to i64, !dbg !35
  %427 = sext i32 %73 to i64, !dbg !35
  %428 = sext i32 %72 to i64, !dbg !35
  %429 = sext i32 %71 to i64, !dbg !35
  %430 = sext i32 %70 to i64, !dbg !35
  %431 = sext i32 %69 to i64, !dbg !35
  %432 = sext i32 %68 to i64, !dbg !35
  %433 = sext i32 %67 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %433, !dbg !35
  %invariant.gep155 = getelementptr bfloat, ptr addrspace(1) %0, i64 %432, !dbg !35
  %invariant.gep157 = getelementptr bfloat, ptr addrspace(1) %0, i64 %431, !dbg !35
  %invariant.gep159 = getelementptr bfloat, ptr addrspace(1) %0, i64 %430, !dbg !35
  %invariant.gep161 = getelementptr bfloat, ptr addrspace(1) %0, i64 %429, !dbg !35
  %invariant.gep163 = getelementptr bfloat, ptr addrspace(1) %0, i64 %428, !dbg !35
  %invariant.gep165 = getelementptr bfloat, ptr addrspace(1) %0, i64 %427, !dbg !35
  %invariant.gep167 = getelementptr bfloat, ptr addrspace(1) %0, i64 %426, !dbg !35
  %invariant.gep169 = getelementptr bfloat, ptr addrspace(1) %1, i64 %425, !dbg !35
  %invariant.gep171 = getelementptr bfloat, ptr addrspace(1) %1, i64 %424, !dbg !35
  %invariant.gep173 = getelementptr bfloat, ptr addrspace(1) %1, i64 %423, !dbg !35
  %invariant.gep175 = getelementptr bfloat, ptr addrspace(1) %1, i64 %422, !dbg !35
  %invariant.gep177 = getelementptr bfloat, ptr addrspace(1) %1, i64 %421, !dbg !35
  %invariant.gep179 = getelementptr bfloat, ptr addrspace(1) %1, i64 %420, !dbg !35
  %invariant.gep181 = getelementptr bfloat, ptr addrspace(1) %1, i64 %419, !dbg !35
  %invariant.gep183 = getelementptr bfloat, ptr addrspace(1) %1, i64 %418, !dbg !35
  br label %434, !dbg !35

434:                                              ; preds = %4, %434
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %434 ]
  %435 = phi i32 [ -1, %4 ], [ %472, %434 ]
  %436 = phi i32 [ 3, %4 ], [ %1025, %434 ]
  %437 = phi float [ 0.000000e+00, %4 ], [ %984, %434 ]
  %438 = phi float [ 0.000000e+00, %4 ], [ %985, %434 ]
  %439 = phi float [ 0.000000e+00, %4 ], [ %986, %434 ]
  %440 = phi float [ 0.000000e+00, %4 ], [ %987, %434 ]
  %441 = phi float [ 0.000000e+00, %4 ], [ %989, %434 ]
  %442 = phi float [ 0.000000e+00, %4 ], [ %990, %434 ]
  %443 = phi float [ 0.000000e+00, %4 ], [ %991, %434 ]
  %444 = phi float [ 0.000000e+00, %4 ], [ %992, %434 ]
  %445 = phi float [ 0.000000e+00, %4 ], [ %994, %434 ]
  %446 = phi float [ 0.000000e+00, %4 ], [ %995, %434 ]
  %447 = phi float [ 0.000000e+00, %4 ], [ %996, %434 ]
  %448 = phi float [ 0.000000e+00, %4 ], [ %997, %434 ]
  %449 = phi float [ 0.000000e+00, %4 ], [ %999, %434 ]
  %450 = phi float [ 0.000000e+00, %4 ], [ %1000, %434 ]
  %451 = phi float [ 0.000000e+00, %4 ], [ %1001, %434 ]
  %452 = phi float [ 0.000000e+00, %4 ], [ %1002, %434 ]
  %453 = phi float [ 0.000000e+00, %4 ], [ %1004, %434 ]
  %454 = phi float [ 0.000000e+00, %4 ], [ %1005, %434 ]
  %455 = phi float [ 0.000000e+00, %4 ], [ %1006, %434 ]
  %456 = phi float [ 0.000000e+00, %4 ], [ %1007, %434 ]
  %457 = phi float [ 0.000000e+00, %4 ], [ %1009, %434 ]
  %458 = phi float [ 0.000000e+00, %4 ], [ %1010, %434 ]
  %459 = phi float [ 0.000000e+00, %4 ], [ %1011, %434 ]
  %460 = phi float [ 0.000000e+00, %4 ], [ %1012, %434 ]
  %461 = phi float [ 0.000000e+00, %4 ], [ %1014, %434 ]
  %462 = phi float [ 0.000000e+00, %4 ], [ %1015, %434 ]
  %463 = phi float [ 0.000000e+00, %4 ], [ %1016, %434 ]
  %464 = phi float [ 0.000000e+00, %4 ], [ %1017, %434 ]
  %465 = phi float [ 0.000000e+00, %4 ], [ %1019, %434 ]
  %466 = phi float [ 0.000000e+00, %4 ], [ %1020, %434 ]
  %467 = phi float [ 0.000000e+00, %4 ], [ %1021, %434 ]
  %468 = phi float [ 0.000000e+00, %4 ], [ %1022, %434 ]
  %469 = icmp samesign ult i64 %indvars.iv, 28, !dbg !35
  %470 = add i32 %435, 1, !dbg !35
  %471 = icmp slt i32 %470, 4, !dbg !35
  %472 = select i1 %471, i32 %470, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %473 = shl i32 %472, 13, !dbg !30
  %474 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %473, !dbg !30
  %475 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %363, !dbg !30
  %476 = ptrtoint ptr addrspace(3) %475 to i32, !dbg !30
  %477 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %476) #1, !dbg !30
  %478 = extractvalue { i32, i32, i32, i32 } %477, 0, !dbg !30
  %479 = extractvalue { i32, i32, i32, i32 } %477, 1, !dbg !30
  %480 = extractvalue { i32, i32, i32, i32 } %477, 2, !dbg !30
  %481 = extractvalue { i32, i32, i32, i32 } %477, 3, !dbg !30
  %482 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %368, !dbg !30
  %483 = ptrtoint ptr addrspace(3) %482 to i32, !dbg !30
  %484 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %483) #1, !dbg !30
  %485 = extractvalue { i32, i32, i32, i32 } %484, 0, !dbg !30
  %486 = extractvalue { i32, i32, i32, i32 } %484, 1, !dbg !30
  %487 = extractvalue { i32, i32, i32, i32 } %484, 2, !dbg !30
  %488 = extractvalue { i32, i32, i32, i32 } %484, 3, !dbg !30
  %489 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %370, !dbg !30
  %490 = ptrtoint ptr addrspace(3) %489 to i32, !dbg !30
  %491 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %490) #1, !dbg !30
  %492 = extractvalue { i32, i32, i32, i32 } %491, 0, !dbg !30
  %493 = extractvalue { i32, i32, i32, i32 } %491, 1, !dbg !30
  %494 = extractvalue { i32, i32, i32, i32 } %491, 2, !dbg !30
  %495 = extractvalue { i32, i32, i32, i32 } %491, 3, !dbg !30
  %496 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %374, !dbg !30
  %497 = ptrtoint ptr addrspace(3) %496 to i32, !dbg !30
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %497) #1, !dbg !30
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !30
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !30
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !30
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !30
  %503 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %377, !dbg !30
  %504 = ptrtoint ptr addrspace(3) %503 to i32, !dbg !30
  %505 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %504) #1, !dbg !30
  %506 = extractvalue { i32, i32, i32, i32 } %505, 0, !dbg !30
  %507 = extractvalue { i32, i32, i32, i32 } %505, 1, !dbg !30
  %508 = extractvalue { i32, i32, i32, i32 } %505, 2, !dbg !30
  %509 = extractvalue { i32, i32, i32, i32 } %505, 3, !dbg !30
  %510 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %382, !dbg !30
  %511 = ptrtoint ptr addrspace(3) %510 to i32, !dbg !30
  %512 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %511) #1, !dbg !30
  %513 = extractvalue { i32, i32, i32, i32 } %512, 0, !dbg !30
  %514 = extractvalue { i32, i32, i32, i32 } %512, 1, !dbg !30
  %515 = extractvalue { i32, i32, i32, i32 } %512, 2, !dbg !30
  %516 = extractvalue { i32, i32, i32, i32 } %512, 3, !dbg !30
  %517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %384, !dbg !30
  %518 = ptrtoint ptr addrspace(3) %517 to i32, !dbg !30
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %518) #1, !dbg !30
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !30
  %521 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !30
  %522 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !30
  %523 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !30
  %524 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %387, !dbg !30
  %525 = ptrtoint ptr addrspace(3) %524 to i32, !dbg !30
  %526 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %525) #1, !dbg !30
  %527 = extractvalue { i32, i32, i32, i32 } %526, 0, !dbg !30
  %528 = extractvalue { i32, i32, i32, i32 } %526, 1, !dbg !30
  %529 = extractvalue { i32, i32, i32, i32 } %526, 2, !dbg !30
  %530 = extractvalue { i32, i32, i32, i32 } %526, 3, !dbg !30
  %531 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %390, !dbg !30
  %532 = ptrtoint ptr addrspace(3) %531 to i32, !dbg !30
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %532) #1, !dbg !30
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !30
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !30
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !30
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !30
  %538 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %391, !dbg !30
  %539 = ptrtoint ptr addrspace(3) %538 to i32, !dbg !30
  %540 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %539) #1, !dbg !30
  %541 = extractvalue { i32, i32, i32, i32 } %540, 0, !dbg !30
  %542 = extractvalue { i32, i32, i32, i32 } %540, 1, !dbg !30
  %543 = extractvalue { i32, i32, i32, i32 } %540, 2, !dbg !30
  %544 = extractvalue { i32, i32, i32, i32 } %540, 3, !dbg !30
  %545 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %392, !dbg !30
  %546 = ptrtoint ptr addrspace(3) %545 to i32, !dbg !30
  %547 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %546) #1, !dbg !30
  %548 = extractvalue { i32, i32, i32, i32 } %547, 0, !dbg !30
  %549 = extractvalue { i32, i32, i32, i32 } %547, 1, !dbg !30
  %550 = extractvalue { i32, i32, i32, i32 } %547, 2, !dbg !30
  %551 = extractvalue { i32, i32, i32, i32 } %547, 3, !dbg !30
  %552 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %393, !dbg !30
  %553 = ptrtoint ptr addrspace(3) %552 to i32, !dbg !30
  %554 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %553) #1, !dbg !30
  %555 = extractvalue { i32, i32, i32, i32 } %554, 0, !dbg !30
  %556 = extractvalue { i32, i32, i32, i32 } %554, 1, !dbg !30
  %557 = extractvalue { i32, i32, i32, i32 } %554, 2, !dbg !30
  %558 = extractvalue { i32, i32, i32, i32 } %554, 3, !dbg !30
  %559 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %394, !dbg !30
  %560 = ptrtoint ptr addrspace(3) %559 to i32, !dbg !30
  %561 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %560) #1, !dbg !30
  %562 = extractvalue { i32, i32, i32, i32 } %561, 0, !dbg !30
  %563 = extractvalue { i32, i32, i32, i32 } %561, 1, !dbg !30
  %564 = extractvalue { i32, i32, i32, i32 } %561, 2, !dbg !30
  %565 = extractvalue { i32, i32, i32, i32 } %561, 3, !dbg !30
  %566 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %395, !dbg !30
  %567 = ptrtoint ptr addrspace(3) %566 to i32, !dbg !30
  %568 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %567) #1, !dbg !30
  %569 = extractvalue { i32, i32, i32, i32 } %568, 0, !dbg !30
  %570 = extractvalue { i32, i32, i32, i32 } %568, 1, !dbg !30
  %571 = extractvalue { i32, i32, i32, i32 } %568, 2, !dbg !30
  %572 = extractvalue { i32, i32, i32, i32 } %568, 3, !dbg !30
  %573 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %396, !dbg !30
  %574 = ptrtoint ptr addrspace(3) %573 to i32, !dbg !30
  %575 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %574) #1, !dbg !30
  %576 = extractvalue { i32, i32, i32, i32 } %575, 0, !dbg !30
  %577 = extractvalue { i32, i32, i32, i32 } %575, 1, !dbg !30
  %578 = extractvalue { i32, i32, i32, i32 } %575, 2, !dbg !30
  %579 = extractvalue { i32, i32, i32, i32 } %575, 3, !dbg !30
  %580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %474, i32 %397, !dbg !30
  %581 = ptrtoint ptr addrspace(3) %580 to i32, !dbg !30
  %582 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %581) #1, !dbg !30
  %583 = extractvalue { i32, i32, i32, i32 } %582, 0, !dbg !30
  %584 = extractvalue { i32, i32, i32, i32 } %582, 1, !dbg !30
  %585 = extractvalue { i32, i32, i32, i32 } %582, 2, !dbg !30
  %586 = extractvalue { i32, i32, i32, i32 } %582, 3, !dbg !30
  %587 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %473, !dbg !33
  %588 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %403, !dbg !33
  %589 = ptrtoint ptr addrspace(3) %588 to i32, !dbg !33
  %590 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %589) #1, !dbg !33
  %591 = extractvalue { i32, i32, i32, i32 } %590, 0, !dbg !33
  %592 = extractvalue { i32, i32, i32, i32 } %590, 1, !dbg !33
  %593 = extractvalue { i32, i32, i32, i32 } %590, 2, !dbg !33
  %594 = extractvalue { i32, i32, i32, i32 } %590, 3, !dbg !33
  %595 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %405, !dbg !33
  %596 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %595, i32 %402, !dbg !33
  %597 = ptrtoint ptr addrspace(3) %596 to i32, !dbg !33
  %598 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %597) #1, !dbg !33
  %599 = extractvalue { i32, i32, i32, i32 } %598, 0, !dbg !33
  %600 = extractvalue { i32, i32, i32, i32 } %598, 1, !dbg !33
  %601 = extractvalue { i32, i32, i32, i32 } %598, 2, !dbg !33
  %602 = extractvalue { i32, i32, i32, i32 } %598, 3, !dbg !33
  %603 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %406, !dbg !33
  %604 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %603, i32 %402, !dbg !33
  %605 = ptrtoint ptr addrspace(3) %604 to i32, !dbg !33
  %606 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %605) #1, !dbg !33
  %607 = extractvalue { i32, i32, i32, i32 } %606, 0, !dbg !33
  %608 = extractvalue { i32, i32, i32, i32 } %606, 1, !dbg !33
  %609 = extractvalue { i32, i32, i32, i32 } %606, 2, !dbg !33
  %610 = extractvalue { i32, i32, i32, i32 } %606, 3, !dbg !33
  %611 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %407, !dbg !33
  %612 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %611, i32 %402, !dbg !33
  %613 = ptrtoint ptr addrspace(3) %612 to i32, !dbg !33
  %614 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %613) #1, !dbg !33
  %615 = extractvalue { i32, i32, i32, i32 } %614, 0, !dbg !33
  %616 = extractvalue { i32, i32, i32, i32 } %614, 1, !dbg !33
  %617 = extractvalue { i32, i32, i32, i32 } %614, 2, !dbg !33
  %618 = extractvalue { i32, i32, i32, i32 } %614, 3, !dbg !33
  %619 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %409, !dbg !33
  %620 = ptrtoint ptr addrspace(3) %619 to i32, !dbg !33
  %621 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %620) #1, !dbg !33
  %622 = extractvalue { i32, i32, i32, i32 } %621, 0, !dbg !33
  %623 = extractvalue { i32, i32, i32, i32 } %621, 1, !dbg !33
  %624 = extractvalue { i32, i32, i32, i32 } %621, 2, !dbg !33
  %625 = extractvalue { i32, i32, i32, i32 } %621, 3, !dbg !33
  %626 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %595, i32 %408, !dbg !33
  %627 = ptrtoint ptr addrspace(3) %626 to i32, !dbg !33
  %628 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %627) #1, !dbg !33
  %629 = extractvalue { i32, i32, i32, i32 } %628, 0, !dbg !33
  %630 = extractvalue { i32, i32, i32, i32 } %628, 1, !dbg !33
  %631 = extractvalue { i32, i32, i32, i32 } %628, 2, !dbg !33
  %632 = extractvalue { i32, i32, i32, i32 } %628, 3, !dbg !33
  %633 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %603, i32 %408, !dbg !33
  %634 = ptrtoint ptr addrspace(3) %633 to i32, !dbg !33
  %635 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %634) #1, !dbg !33
  %636 = extractvalue { i32, i32, i32, i32 } %635, 0, !dbg !33
  %637 = extractvalue { i32, i32, i32, i32 } %635, 1, !dbg !33
  %638 = extractvalue { i32, i32, i32, i32 } %635, 2, !dbg !33
  %639 = extractvalue { i32, i32, i32, i32 } %635, 3, !dbg !33
  %640 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %611, i32 %408, !dbg !33
  %641 = ptrtoint ptr addrspace(3) %640 to i32, !dbg !33
  %642 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %641) #1, !dbg !33
  %643 = extractvalue { i32, i32, i32, i32 } %642, 0, !dbg !33
  %644 = extractvalue { i32, i32, i32, i32 } %642, 1, !dbg !33
  %645 = extractvalue { i32, i32, i32, i32 } %642, 2, !dbg !33
  %646 = extractvalue { i32, i32, i32, i32 } %642, 3, !dbg !33
  %647 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %411, !dbg !33
  %648 = ptrtoint ptr addrspace(3) %647 to i32, !dbg !33
  %649 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %648) #1, !dbg !33
  %650 = extractvalue { i32, i32, i32, i32 } %649, 0, !dbg !33
  %651 = extractvalue { i32, i32, i32, i32 } %649, 1, !dbg !33
  %652 = extractvalue { i32, i32, i32, i32 } %649, 2, !dbg !33
  %653 = extractvalue { i32, i32, i32, i32 } %649, 3, !dbg !33
  %654 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %595, i32 %410, !dbg !33
  %655 = ptrtoint ptr addrspace(3) %654 to i32, !dbg !33
  %656 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %655) #1, !dbg !33
  %657 = extractvalue { i32, i32, i32, i32 } %656, 0, !dbg !33
  %658 = extractvalue { i32, i32, i32, i32 } %656, 1, !dbg !33
  %659 = extractvalue { i32, i32, i32, i32 } %656, 2, !dbg !33
  %660 = extractvalue { i32, i32, i32, i32 } %656, 3, !dbg !33
  %661 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %603, i32 %410, !dbg !33
  %662 = ptrtoint ptr addrspace(3) %661 to i32, !dbg !33
  %663 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %662) #1, !dbg !33
  %664 = extractvalue { i32, i32, i32, i32 } %663, 0, !dbg !33
  %665 = extractvalue { i32, i32, i32, i32 } %663, 1, !dbg !33
  %666 = extractvalue { i32, i32, i32, i32 } %663, 2, !dbg !33
  %667 = extractvalue { i32, i32, i32, i32 } %663, 3, !dbg !33
  %668 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %611, i32 %410, !dbg !33
  %669 = ptrtoint ptr addrspace(3) %668 to i32, !dbg !33
  %670 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %669) #1, !dbg !33
  %671 = extractvalue { i32, i32, i32, i32 } %670, 0, !dbg !33
  %672 = extractvalue { i32, i32, i32, i32 } %670, 1, !dbg !33
  %673 = extractvalue { i32, i32, i32, i32 } %670, 2, !dbg !33
  %674 = extractvalue { i32, i32, i32, i32 } %670, 3, !dbg !33
  %675 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %413, !dbg !33
  %676 = ptrtoint ptr addrspace(3) %675 to i32, !dbg !33
  %677 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %676) #1, !dbg !33
  %678 = extractvalue { i32, i32, i32, i32 } %677, 0, !dbg !33
  %679 = extractvalue { i32, i32, i32, i32 } %677, 1, !dbg !33
  %680 = extractvalue { i32, i32, i32, i32 } %677, 2, !dbg !33
  %681 = extractvalue { i32, i32, i32, i32 } %677, 3, !dbg !33
  %682 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %414, !dbg !33
  %683 = ptrtoint ptr addrspace(3) %682 to i32, !dbg !33
  %684 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %683) #1, !dbg !33
  %685 = extractvalue { i32, i32, i32, i32 } %684, 0, !dbg !33
  %686 = extractvalue { i32, i32, i32, i32 } %684, 1, !dbg !33
  %687 = extractvalue { i32, i32, i32, i32 } %684, 2, !dbg !33
  %688 = extractvalue { i32, i32, i32, i32 } %684, 3, !dbg !33
  %689 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %415, !dbg !33
  %690 = ptrtoint ptr addrspace(3) %689 to i32, !dbg !33
  %691 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %690) #1, !dbg !33
  %692 = extractvalue { i32, i32, i32, i32 } %691, 0, !dbg !33
  %693 = extractvalue { i32, i32, i32, i32 } %691, 1, !dbg !33
  %694 = extractvalue { i32, i32, i32, i32 } %691, 2, !dbg !33
  %695 = extractvalue { i32, i32, i32, i32 } %691, 3, !dbg !33
  %696 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %587, i32 %416, !dbg !33
  %697 = ptrtoint ptr addrspace(3) %696 to i32, !dbg !33
  %698 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %697) #1, !dbg !33
  %699 = extractvalue { i32, i32, i32, i32 } %698, 0, !dbg !33
  %700 = extractvalue { i32, i32, i32, i32 } %698, 1, !dbg !33
  %701 = extractvalue { i32, i32, i32, i32 } %698, 2, !dbg !33
  %702 = extractvalue { i32, i32, i32, i32 } %698, 3, !dbg !33
  %703 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %437, float %438, float %439, float %440, i32 %478, i32 %479, i32 %480, i32 %481, i32 %591, i32 %592) #1, !dbg !36
  %704 = extractvalue { float, float, float, float } %703, 0, !dbg !36
  %705 = extractvalue { float, float, float, float } %703, 1, !dbg !36
  %706 = extractvalue { float, float, float, float } %703, 2, !dbg !36
  %707 = extractvalue { float, float, float, float } %703, 3, !dbg !36
  %708 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %441, float %442, float %443, float %444, i32 %478, i32 %479, i32 %480, i32 %481, i32 %622, i32 %623) #1, !dbg !36
  %709 = extractvalue { float, float, float, float } %708, 0, !dbg !36
  %710 = extractvalue { float, float, float, float } %708, 1, !dbg !36
  %711 = extractvalue { float, float, float, float } %708, 2, !dbg !36
  %712 = extractvalue { float, float, float, float } %708, 3, !dbg !36
  %713 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %445, float %446, float %447, float %448, i32 %478, i32 %479, i32 %480, i32 %481, i32 %650, i32 %651) #1, !dbg !36
  %714 = extractvalue { float, float, float, float } %713, 0, !dbg !36
  %715 = extractvalue { float, float, float, float } %713, 1, !dbg !36
  %716 = extractvalue { float, float, float, float } %713, 2, !dbg !36
  %717 = extractvalue { float, float, float, float } %713, 3, !dbg !36
  %718 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %449, float %450, float %451, float %452, i32 %478, i32 %479, i32 %480, i32 %481, i32 %678, i32 %679) #1, !dbg !36
  %719 = extractvalue { float, float, float, float } %718, 0, !dbg !36
  %720 = extractvalue { float, float, float, float } %718, 1, !dbg !36
  %721 = extractvalue { float, float, float, float } %718, 2, !dbg !36
  %722 = extractvalue { float, float, float, float } %718, 3, !dbg !36
  %723 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %453, float %454, float %455, float %456, i32 %534, i32 %535, i32 %536, i32 %537, i32 %591, i32 %592) #1, !dbg !36
  %724 = extractvalue { float, float, float, float } %723, 0, !dbg !36
  %725 = extractvalue { float, float, float, float } %723, 1, !dbg !36
  %726 = extractvalue { float, float, float, float } %723, 2, !dbg !36
  %727 = extractvalue { float, float, float, float } %723, 3, !dbg !36
  %728 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %457, float %458, float %459, float %460, i32 %534, i32 %535, i32 %536, i32 %537, i32 %622, i32 %623) #1, !dbg !36
  %729 = extractvalue { float, float, float, float } %728, 0, !dbg !36
  %730 = extractvalue { float, float, float, float } %728, 1, !dbg !36
  %731 = extractvalue { float, float, float, float } %728, 2, !dbg !36
  %732 = extractvalue { float, float, float, float } %728, 3, !dbg !36
  %733 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %461, float %462, float %463, float %464, i32 %534, i32 %535, i32 %536, i32 %537, i32 %650, i32 %651) #1, !dbg !36
  %734 = extractvalue { float, float, float, float } %733, 0, !dbg !36
  %735 = extractvalue { float, float, float, float } %733, 1, !dbg !36
  %736 = extractvalue { float, float, float, float } %733, 2, !dbg !36
  %737 = extractvalue { float, float, float, float } %733, 3, !dbg !36
  %738 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %465, float %466, float %467, float %468, i32 %534, i32 %535, i32 %536, i32 %537, i32 %678, i32 %679) #1, !dbg !36
  %739 = extractvalue { float, float, float, float } %738, 0, !dbg !36
  %740 = extractvalue { float, float, float, float } %738, 1, !dbg !36
  %741 = extractvalue { float, float, float, float } %738, 2, !dbg !36
  %742 = extractvalue { float, float, float, float } %738, 3, !dbg !36
  %743 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %704, float %705, float %706, float %707, i32 %485, i32 %486, i32 %487, i32 %488, i32 %593, i32 %594) #1, !dbg !36
  %744 = extractvalue { float, float, float, float } %743, 0, !dbg !36
  %745 = extractvalue { float, float, float, float } %743, 1, !dbg !36
  %746 = extractvalue { float, float, float, float } %743, 2, !dbg !36
  %747 = extractvalue { float, float, float, float } %743, 3, !dbg !36
  %748 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %709, float %710, float %711, float %712, i32 %485, i32 %486, i32 %487, i32 %488, i32 %624, i32 %625) #1, !dbg !36
  %749 = extractvalue { float, float, float, float } %748, 0, !dbg !36
  %750 = extractvalue { float, float, float, float } %748, 1, !dbg !36
  %751 = extractvalue { float, float, float, float } %748, 2, !dbg !36
  %752 = extractvalue { float, float, float, float } %748, 3, !dbg !36
  %753 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %714, float %715, float %716, float %717, i32 %485, i32 %486, i32 %487, i32 %488, i32 %652, i32 %653) #1, !dbg !36
  %754 = extractvalue { float, float, float, float } %753, 0, !dbg !36
  %755 = extractvalue { float, float, float, float } %753, 1, !dbg !36
  %756 = extractvalue { float, float, float, float } %753, 2, !dbg !36
  %757 = extractvalue { float, float, float, float } %753, 3, !dbg !36
  %758 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %719, float %720, float %721, float %722, i32 %485, i32 %486, i32 %487, i32 %488, i32 %680, i32 %681) #1, !dbg !36
  %759 = extractvalue { float, float, float, float } %758, 0, !dbg !36
  %760 = extractvalue { float, float, float, float } %758, 1, !dbg !36
  %761 = extractvalue { float, float, float, float } %758, 2, !dbg !36
  %762 = extractvalue { float, float, float, float } %758, 3, !dbg !36
  %763 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %724, float %725, float %726, float %727, i32 %541, i32 %542, i32 %543, i32 %544, i32 %593, i32 %594) #1, !dbg !36
  %764 = extractvalue { float, float, float, float } %763, 0, !dbg !36
  %765 = extractvalue { float, float, float, float } %763, 1, !dbg !36
  %766 = extractvalue { float, float, float, float } %763, 2, !dbg !36
  %767 = extractvalue { float, float, float, float } %763, 3, !dbg !36
  %768 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %729, float %730, float %731, float %732, i32 %541, i32 %542, i32 %543, i32 %544, i32 %624, i32 %625) #1, !dbg !36
  %769 = extractvalue { float, float, float, float } %768, 0, !dbg !36
  %770 = extractvalue { float, float, float, float } %768, 1, !dbg !36
  %771 = extractvalue { float, float, float, float } %768, 2, !dbg !36
  %772 = extractvalue { float, float, float, float } %768, 3, !dbg !36
  %773 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %734, float %735, float %736, float %737, i32 %541, i32 %542, i32 %543, i32 %544, i32 %652, i32 %653) #1, !dbg !36
  %774 = extractvalue { float, float, float, float } %773, 0, !dbg !36
  %775 = extractvalue { float, float, float, float } %773, 1, !dbg !36
  %776 = extractvalue { float, float, float, float } %773, 2, !dbg !36
  %777 = extractvalue { float, float, float, float } %773, 3, !dbg !36
  %778 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %739, float %740, float %741, float %742, i32 %541, i32 %542, i32 %543, i32 %544, i32 %680, i32 %681) #1, !dbg !36
  %779 = extractvalue { float, float, float, float } %778, 0, !dbg !36
  %780 = extractvalue { float, float, float, float } %778, 1, !dbg !36
  %781 = extractvalue { float, float, float, float } %778, 2, !dbg !36
  %782 = extractvalue { float, float, float, float } %778, 3, !dbg !36
  %783 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %744, float %745, float %746, float %747, i32 %492, i32 %493, i32 %494, i32 %495, i32 %599, i32 %600) #1, !dbg !36
  %784 = extractvalue { float, float, float, float } %783, 0, !dbg !36
  %785 = extractvalue { float, float, float, float } %783, 1, !dbg !36
  %786 = extractvalue { float, float, float, float } %783, 2, !dbg !36
  %787 = extractvalue { float, float, float, float } %783, 3, !dbg !36
  %788 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %749, float %750, float %751, float %752, i32 %492, i32 %493, i32 %494, i32 %495, i32 %629, i32 %630) #1, !dbg !36
  %789 = extractvalue { float, float, float, float } %788, 0, !dbg !36
  %790 = extractvalue { float, float, float, float } %788, 1, !dbg !36
  %791 = extractvalue { float, float, float, float } %788, 2, !dbg !36
  %792 = extractvalue { float, float, float, float } %788, 3, !dbg !36
  %793 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %754, float %755, float %756, float %757, i32 %492, i32 %493, i32 %494, i32 %495, i32 %657, i32 %658) #1, !dbg !36
  %794 = extractvalue { float, float, float, float } %793, 0, !dbg !36
  %795 = extractvalue { float, float, float, float } %793, 1, !dbg !36
  %796 = extractvalue { float, float, float, float } %793, 2, !dbg !36
  %797 = extractvalue { float, float, float, float } %793, 3, !dbg !36
  %798 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %759, float %760, float %761, float %762, i32 %492, i32 %493, i32 %494, i32 %495, i32 %685, i32 %686) #1, !dbg !36
  %799 = extractvalue { float, float, float, float } %798, 0, !dbg !36
  %800 = extractvalue { float, float, float, float } %798, 1, !dbg !36
  %801 = extractvalue { float, float, float, float } %798, 2, !dbg !36
  %802 = extractvalue { float, float, float, float } %798, 3, !dbg !36
  %803 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %764, float %765, float %766, float %767, i32 %548, i32 %549, i32 %550, i32 %551, i32 %599, i32 %600) #1, !dbg !36
  %804 = extractvalue { float, float, float, float } %803, 0, !dbg !36
  %805 = extractvalue { float, float, float, float } %803, 1, !dbg !36
  %806 = extractvalue { float, float, float, float } %803, 2, !dbg !36
  %807 = extractvalue { float, float, float, float } %803, 3, !dbg !36
  %808 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %769, float %770, float %771, float %772, i32 %548, i32 %549, i32 %550, i32 %551, i32 %629, i32 %630) #1, !dbg !36
  %809 = extractvalue { float, float, float, float } %808, 0, !dbg !36
  %810 = extractvalue { float, float, float, float } %808, 1, !dbg !36
  %811 = extractvalue { float, float, float, float } %808, 2, !dbg !36
  %812 = extractvalue { float, float, float, float } %808, 3, !dbg !36
  %813 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %774, float %775, float %776, float %777, i32 %548, i32 %549, i32 %550, i32 %551, i32 %657, i32 %658) #1, !dbg !36
  %814 = extractvalue { float, float, float, float } %813, 0, !dbg !36
  %815 = extractvalue { float, float, float, float } %813, 1, !dbg !36
  %816 = extractvalue { float, float, float, float } %813, 2, !dbg !36
  %817 = extractvalue { float, float, float, float } %813, 3, !dbg !36
  %818 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %779, float %780, float %781, float %782, i32 %548, i32 %549, i32 %550, i32 %551, i32 %685, i32 %686) #1, !dbg !36
  %819 = extractvalue { float, float, float, float } %818, 0, !dbg !36
  %820 = extractvalue { float, float, float, float } %818, 1, !dbg !36
  %821 = extractvalue { float, float, float, float } %818, 2, !dbg !36
  %822 = extractvalue { float, float, float, float } %818, 3, !dbg !36
  %823 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %784, float %785, float %786, float %787, i32 %499, i32 %500, i32 %501, i32 %502, i32 %601, i32 %602) #1, !dbg !36
  %824 = extractvalue { float, float, float, float } %823, 0, !dbg !36
  %825 = extractvalue { float, float, float, float } %823, 1, !dbg !36
  %826 = extractvalue { float, float, float, float } %823, 2, !dbg !36
  %827 = extractvalue { float, float, float, float } %823, 3, !dbg !36
  %828 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %789, float %790, float %791, float %792, i32 %499, i32 %500, i32 %501, i32 %502, i32 %631, i32 %632) #1, !dbg !36
  %829 = extractvalue { float, float, float, float } %828, 0, !dbg !36
  %830 = extractvalue { float, float, float, float } %828, 1, !dbg !36
  %831 = extractvalue { float, float, float, float } %828, 2, !dbg !36
  %832 = extractvalue { float, float, float, float } %828, 3, !dbg !36
  %833 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %794, float %795, float %796, float %797, i32 %499, i32 %500, i32 %501, i32 %502, i32 %659, i32 %660) #1, !dbg !36
  %834 = extractvalue { float, float, float, float } %833, 0, !dbg !36
  %835 = extractvalue { float, float, float, float } %833, 1, !dbg !36
  %836 = extractvalue { float, float, float, float } %833, 2, !dbg !36
  %837 = extractvalue { float, float, float, float } %833, 3, !dbg !36
  %838 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %799, float %800, float %801, float %802, i32 %499, i32 %500, i32 %501, i32 %502, i32 %687, i32 %688) #1, !dbg !36
  %839 = extractvalue { float, float, float, float } %838, 0, !dbg !36
  %840 = extractvalue { float, float, float, float } %838, 1, !dbg !36
  %841 = extractvalue { float, float, float, float } %838, 2, !dbg !36
  %842 = extractvalue { float, float, float, float } %838, 3, !dbg !36
  %843 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %804, float %805, float %806, float %807, i32 %555, i32 %556, i32 %557, i32 %558, i32 %601, i32 %602) #1, !dbg !36
  %844 = extractvalue { float, float, float, float } %843, 0, !dbg !36
  %845 = extractvalue { float, float, float, float } %843, 1, !dbg !36
  %846 = extractvalue { float, float, float, float } %843, 2, !dbg !36
  %847 = extractvalue { float, float, float, float } %843, 3, !dbg !36
  %848 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %809, float %810, float %811, float %812, i32 %555, i32 %556, i32 %557, i32 %558, i32 %631, i32 %632) #1, !dbg !36
  %849 = extractvalue { float, float, float, float } %848, 0, !dbg !36
  %850 = extractvalue { float, float, float, float } %848, 1, !dbg !36
  %851 = extractvalue { float, float, float, float } %848, 2, !dbg !36
  %852 = extractvalue { float, float, float, float } %848, 3, !dbg !36
  %853 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %814, float %815, float %816, float %817, i32 %555, i32 %556, i32 %557, i32 %558, i32 %659, i32 %660) #1, !dbg !36
  %854 = extractvalue { float, float, float, float } %853, 0, !dbg !36
  %855 = extractvalue { float, float, float, float } %853, 1, !dbg !36
  %856 = extractvalue { float, float, float, float } %853, 2, !dbg !36
  %857 = extractvalue { float, float, float, float } %853, 3, !dbg !36
  %858 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %819, float %820, float %821, float %822, i32 %555, i32 %556, i32 %557, i32 %558, i32 %687, i32 %688) #1, !dbg !36
  %859 = extractvalue { float, float, float, float } %858, 0, !dbg !36
  %860 = extractvalue { float, float, float, float } %858, 1, !dbg !36
  %861 = extractvalue { float, float, float, float } %858, 2, !dbg !36
  %862 = extractvalue { float, float, float, float } %858, 3, !dbg !36
  %863 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %824, float %825, float %826, float %827, i32 %506, i32 %507, i32 %508, i32 %509, i32 %607, i32 %608) #1, !dbg !36
  %864 = extractvalue { float, float, float, float } %863, 0, !dbg !36
  %865 = extractvalue { float, float, float, float } %863, 1, !dbg !36
  %866 = extractvalue { float, float, float, float } %863, 2, !dbg !36
  %867 = extractvalue { float, float, float, float } %863, 3, !dbg !36
  %868 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %829, float %830, float %831, float %832, i32 %506, i32 %507, i32 %508, i32 %509, i32 %636, i32 %637) #1, !dbg !36
  %869 = extractvalue { float, float, float, float } %868, 0, !dbg !36
  %870 = extractvalue { float, float, float, float } %868, 1, !dbg !36
  %871 = extractvalue { float, float, float, float } %868, 2, !dbg !36
  %872 = extractvalue { float, float, float, float } %868, 3, !dbg !36
  %873 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %834, float %835, float %836, float %837, i32 %506, i32 %507, i32 %508, i32 %509, i32 %664, i32 %665) #1, !dbg !36
  %874 = extractvalue { float, float, float, float } %873, 0, !dbg !36
  %875 = extractvalue { float, float, float, float } %873, 1, !dbg !36
  %876 = extractvalue { float, float, float, float } %873, 2, !dbg !36
  %877 = extractvalue { float, float, float, float } %873, 3, !dbg !36
  %878 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %839, float %840, float %841, float %842, i32 %506, i32 %507, i32 %508, i32 %509, i32 %692, i32 %693) #1, !dbg !36
  %879 = extractvalue { float, float, float, float } %878, 0, !dbg !36
  %880 = extractvalue { float, float, float, float } %878, 1, !dbg !36
  %881 = extractvalue { float, float, float, float } %878, 2, !dbg !36
  %882 = extractvalue { float, float, float, float } %878, 3, !dbg !36
  %883 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %844, float %845, float %846, float %847, i32 %562, i32 %563, i32 %564, i32 %565, i32 %607, i32 %608) #1, !dbg !36
  %884 = extractvalue { float, float, float, float } %883, 0, !dbg !36
  %885 = extractvalue { float, float, float, float } %883, 1, !dbg !36
  %886 = extractvalue { float, float, float, float } %883, 2, !dbg !36
  %887 = extractvalue { float, float, float, float } %883, 3, !dbg !36
  %888 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %849, float %850, float %851, float %852, i32 %562, i32 %563, i32 %564, i32 %565, i32 %636, i32 %637) #1, !dbg !36
  %889 = extractvalue { float, float, float, float } %888, 0, !dbg !36
  %890 = extractvalue { float, float, float, float } %888, 1, !dbg !36
  %891 = extractvalue { float, float, float, float } %888, 2, !dbg !36
  %892 = extractvalue { float, float, float, float } %888, 3, !dbg !36
  %893 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %854, float %855, float %856, float %857, i32 %562, i32 %563, i32 %564, i32 %565, i32 %664, i32 %665) #1, !dbg !36
  %894 = extractvalue { float, float, float, float } %893, 0, !dbg !36
  %895 = extractvalue { float, float, float, float } %893, 1, !dbg !36
  %896 = extractvalue { float, float, float, float } %893, 2, !dbg !36
  %897 = extractvalue { float, float, float, float } %893, 3, !dbg !36
  %898 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %859, float %860, float %861, float %862, i32 %562, i32 %563, i32 %564, i32 %565, i32 %692, i32 %693) #1, !dbg !36
  %899 = extractvalue { float, float, float, float } %898, 0, !dbg !36
  %900 = extractvalue { float, float, float, float } %898, 1, !dbg !36
  %901 = extractvalue { float, float, float, float } %898, 2, !dbg !36
  %902 = extractvalue { float, float, float, float } %898, 3, !dbg !36
  %903 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %864, float %865, float %866, float %867, i32 %513, i32 %514, i32 %515, i32 %516, i32 %609, i32 %610) #1, !dbg !36
  %904 = extractvalue { float, float, float, float } %903, 0, !dbg !36
  %905 = extractvalue { float, float, float, float } %903, 1, !dbg !36
  %906 = extractvalue { float, float, float, float } %903, 2, !dbg !36
  %907 = extractvalue { float, float, float, float } %903, 3, !dbg !36
  %908 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %869, float %870, float %871, float %872, i32 %513, i32 %514, i32 %515, i32 %516, i32 %638, i32 %639) #1, !dbg !36
  %909 = extractvalue { float, float, float, float } %908, 0, !dbg !36
  %910 = extractvalue { float, float, float, float } %908, 1, !dbg !36
  %911 = extractvalue { float, float, float, float } %908, 2, !dbg !36
  %912 = extractvalue { float, float, float, float } %908, 3, !dbg !36
  %913 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %874, float %875, float %876, float %877, i32 %513, i32 %514, i32 %515, i32 %516, i32 %666, i32 %667) #1, !dbg !36
  %914 = extractvalue { float, float, float, float } %913, 0, !dbg !36
  %915 = extractvalue { float, float, float, float } %913, 1, !dbg !36
  %916 = extractvalue { float, float, float, float } %913, 2, !dbg !36
  %917 = extractvalue { float, float, float, float } %913, 3, !dbg !36
  %918 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %879, float %880, float %881, float %882, i32 %513, i32 %514, i32 %515, i32 %516, i32 %694, i32 %695) #1, !dbg !36
  %919 = extractvalue { float, float, float, float } %918, 0, !dbg !36
  %920 = extractvalue { float, float, float, float } %918, 1, !dbg !36
  %921 = extractvalue { float, float, float, float } %918, 2, !dbg !36
  %922 = extractvalue { float, float, float, float } %918, 3, !dbg !36
  %923 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %884, float %885, float %886, float %887, i32 %569, i32 %570, i32 %571, i32 %572, i32 %609, i32 %610) #1, !dbg !36
  %924 = extractvalue { float, float, float, float } %923, 0, !dbg !36
  %925 = extractvalue { float, float, float, float } %923, 1, !dbg !36
  %926 = extractvalue { float, float, float, float } %923, 2, !dbg !36
  %927 = extractvalue { float, float, float, float } %923, 3, !dbg !36
  %928 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %889, float %890, float %891, float %892, i32 %569, i32 %570, i32 %571, i32 %572, i32 %638, i32 %639) #1, !dbg !36
  %929 = extractvalue { float, float, float, float } %928, 0, !dbg !36
  %930 = extractvalue { float, float, float, float } %928, 1, !dbg !36
  %931 = extractvalue { float, float, float, float } %928, 2, !dbg !36
  %932 = extractvalue { float, float, float, float } %928, 3, !dbg !36
  %933 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %894, float %895, float %896, float %897, i32 %569, i32 %570, i32 %571, i32 %572, i32 %666, i32 %667) #1, !dbg !36
  %934 = extractvalue { float, float, float, float } %933, 0, !dbg !36
  %935 = extractvalue { float, float, float, float } %933, 1, !dbg !36
  %936 = extractvalue { float, float, float, float } %933, 2, !dbg !36
  %937 = extractvalue { float, float, float, float } %933, 3, !dbg !36
  %938 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %899, float %900, float %901, float %902, i32 %569, i32 %570, i32 %571, i32 %572, i32 %694, i32 %695) #1, !dbg !36
  %939 = extractvalue { float, float, float, float } %938, 0, !dbg !36
  %940 = extractvalue { float, float, float, float } %938, 1, !dbg !36
  %941 = extractvalue { float, float, float, float } %938, 2, !dbg !36
  %942 = extractvalue { float, float, float, float } %938, 3, !dbg !36
  %943 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %904, float %905, float %906, float %907, i32 %520, i32 %521, i32 %522, i32 %523, i32 %615, i32 %616) #1, !dbg !36
  %944 = extractvalue { float, float, float, float } %943, 0, !dbg !36
  %945 = extractvalue { float, float, float, float } %943, 1, !dbg !36
  %946 = extractvalue { float, float, float, float } %943, 2, !dbg !36
  %947 = extractvalue { float, float, float, float } %943, 3, !dbg !36
  %948 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %909, float %910, float %911, float %912, i32 %520, i32 %521, i32 %522, i32 %523, i32 %643, i32 %644) #1, !dbg !36
  %949 = extractvalue { float, float, float, float } %948, 0, !dbg !36
  %950 = extractvalue { float, float, float, float } %948, 1, !dbg !36
  %951 = extractvalue { float, float, float, float } %948, 2, !dbg !36
  %952 = extractvalue { float, float, float, float } %948, 3, !dbg !36
  %953 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %914, float %915, float %916, float %917, i32 %520, i32 %521, i32 %522, i32 %523, i32 %671, i32 %672) #1, !dbg !36
  %954 = extractvalue { float, float, float, float } %953, 0, !dbg !36
  %955 = extractvalue { float, float, float, float } %953, 1, !dbg !36
  %956 = extractvalue { float, float, float, float } %953, 2, !dbg !36
  %957 = extractvalue { float, float, float, float } %953, 3, !dbg !36
  %958 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %919, float %920, float %921, float %922, i32 %520, i32 %521, i32 %522, i32 %523, i32 %699, i32 %700) #1, !dbg !36
  %959 = extractvalue { float, float, float, float } %958, 0, !dbg !36
  %960 = extractvalue { float, float, float, float } %958, 1, !dbg !36
  %961 = extractvalue { float, float, float, float } %958, 2, !dbg !36
  %962 = extractvalue { float, float, float, float } %958, 3, !dbg !36
  %963 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %924, float %925, float %926, float %927, i32 %576, i32 %577, i32 %578, i32 %579, i32 %615, i32 %616) #1, !dbg !36
  %964 = extractvalue { float, float, float, float } %963, 0, !dbg !36
  %965 = extractvalue { float, float, float, float } %963, 1, !dbg !36
  %966 = extractvalue { float, float, float, float } %963, 2, !dbg !36
  %967 = extractvalue { float, float, float, float } %963, 3, !dbg !36
  %968 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %929, float %930, float %931, float %932, i32 %576, i32 %577, i32 %578, i32 %579, i32 %643, i32 %644) #1, !dbg !36
  %969 = extractvalue { float, float, float, float } %968, 0, !dbg !36
  %970 = extractvalue { float, float, float, float } %968, 1, !dbg !36
  %971 = extractvalue { float, float, float, float } %968, 2, !dbg !36
  %972 = extractvalue { float, float, float, float } %968, 3, !dbg !36
  %973 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %934, float %935, float %936, float %937, i32 %576, i32 %577, i32 %578, i32 %579, i32 %671, i32 %672) #1, !dbg !36
  %974 = extractvalue { float, float, float, float } %973, 0, !dbg !36
  %975 = extractvalue { float, float, float, float } %973, 1, !dbg !36
  %976 = extractvalue { float, float, float, float } %973, 2, !dbg !36
  %977 = extractvalue { float, float, float, float } %973, 3, !dbg !36
  %978 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %939, float %940, float %941, float %942, i32 %576, i32 %577, i32 %578, i32 %579, i32 %699, i32 %700) #1, !dbg !36
  %979 = extractvalue { float, float, float, float } %978, 0, !dbg !36
  %980 = extractvalue { float, float, float, float } %978, 1, !dbg !36
  %981 = extractvalue { float, float, float, float } %978, 2, !dbg !36
  %982 = extractvalue { float, float, float, float } %978, 3, !dbg !36
  %983 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %944, float %945, float %946, float %947, i32 %527, i32 %528, i32 %529, i32 %530, i32 %617, i32 %618) #1, !dbg !36
  %984 = extractvalue { float, float, float, float } %983, 0, !dbg !36
  %985 = extractvalue { float, float, float, float } %983, 1, !dbg !36
  %986 = extractvalue { float, float, float, float } %983, 2, !dbg !36
  %987 = extractvalue { float, float, float, float } %983, 3, !dbg !36
  %988 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %949, float %950, float %951, float %952, i32 %527, i32 %528, i32 %529, i32 %530, i32 %645, i32 %646) #1, !dbg !36
  %989 = extractvalue { float, float, float, float } %988, 0, !dbg !36
  %990 = extractvalue { float, float, float, float } %988, 1, !dbg !36
  %991 = extractvalue { float, float, float, float } %988, 2, !dbg !36
  %992 = extractvalue { float, float, float, float } %988, 3, !dbg !36
  %993 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %954, float %955, float %956, float %957, i32 %527, i32 %528, i32 %529, i32 %530, i32 %673, i32 %674) #1, !dbg !36
  %994 = extractvalue { float, float, float, float } %993, 0, !dbg !36
  %995 = extractvalue { float, float, float, float } %993, 1, !dbg !36
  %996 = extractvalue { float, float, float, float } %993, 2, !dbg !36
  %997 = extractvalue { float, float, float, float } %993, 3, !dbg !36
  %998 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %959, float %960, float %961, float %962, i32 %527, i32 %528, i32 %529, i32 %530, i32 %701, i32 %702) #1, !dbg !36
  %999 = extractvalue { float, float, float, float } %998, 0, !dbg !36
  %1000 = extractvalue { float, float, float, float } %998, 1, !dbg !36
  %1001 = extractvalue { float, float, float, float } %998, 2, !dbg !36
  %1002 = extractvalue { float, float, float, float } %998, 3, !dbg !36
  %1003 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %964, float %965, float %966, float %967, i32 %583, i32 %584, i32 %585, i32 %586, i32 %617, i32 %618) #1, !dbg !36
  %1004 = extractvalue { float, float, float, float } %1003, 0, !dbg !36
  %1005 = extractvalue { float, float, float, float } %1003, 1, !dbg !36
  %1006 = extractvalue { float, float, float, float } %1003, 2, !dbg !36
  %1007 = extractvalue { float, float, float, float } %1003, 3, !dbg !36
  %1008 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %969, float %970, float %971, float %972, i32 %583, i32 %584, i32 %585, i32 %586, i32 %645, i32 %646) #1, !dbg !36
  %1009 = extractvalue { float, float, float, float } %1008, 0, !dbg !36
  %1010 = extractvalue { float, float, float, float } %1008, 1, !dbg !36
  %1011 = extractvalue { float, float, float, float } %1008, 2, !dbg !36
  %1012 = extractvalue { float, float, float, float } %1008, 3, !dbg !36
  %1013 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %974, float %975, float %976, float %977, i32 %583, i32 %584, i32 %585, i32 %586, i32 %673, i32 %674) #1, !dbg !36
  %1014 = extractvalue { float, float, float, float } %1013, 0, !dbg !36
  %1015 = extractvalue { float, float, float, float } %1013, 1, !dbg !36
  %1016 = extractvalue { float, float, float, float } %1013, 2, !dbg !36
  %1017 = extractvalue { float, float, float, float } %1013, 3, !dbg !36
  %1018 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %979, float %980, float %981, float %982, i32 %583, i32 %584, i32 %585, i32 %586, i32 %701, i32 %702) #1, !dbg !36
  %1019 = extractvalue { float, float, float, float } %1018, 0, !dbg !36
  %1020 = extractvalue { float, float, float, float } %1018, 1, !dbg !36
  %1021 = extractvalue { float, float, float, float } %1018, 2, !dbg !36
  %1022 = extractvalue { float, float, float, float } %1018, 3, !dbg !36
  %1023 = add i32 %436, 1, !dbg !35
  %1024 = icmp slt i32 %1023, 4, !dbg !35
  %1025 = select i1 %1024, i32 %1023, i32 0, !dbg !35
  %1026 = shl nuw nsw i64 %indvars.iv, 7, !dbg !37
  %1027 = add nuw nsw i64 %1026, %417
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %1027, !dbg !29
  %gep156 = getelementptr bfloat, ptr addrspace(1) %invariant.gep155, i64 %1027, !dbg !29
  %gep158 = getelementptr bfloat, ptr addrspace(1) %invariant.gep157, i64 %1027, !dbg !29
  %gep160 = getelementptr bfloat, ptr addrspace(1) %invariant.gep159, i64 %1027, !dbg !29
  %gep162 = getelementptr bfloat, ptr addrspace(1) %invariant.gep161, i64 %1027, !dbg !29
  %gep164 = getelementptr bfloat, ptr addrspace(1) %invariant.gep163, i64 %1027, !dbg !29
  %gep166 = getelementptr bfloat, ptr addrspace(1) %invariant.gep165, i64 %1027, !dbg !29
  %gep168 = getelementptr bfloat, ptr addrspace(1) %invariant.gep167, i64 %1027, !dbg !29
  %1028 = shl i32 %1025, 13, !dbg !30
  %1029 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1028, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %1030 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %113, !dbg !30
  %1031 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %115, !dbg !30
  %1032 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %117, !dbg !30
  %1033 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %119, !dbg !30
  %1034 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %121, !dbg !30
  %1035 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %123, !dbg !30
  %1036 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %125, !dbg !30
  %1037 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1029, i32 %127, !dbg !30
  %1038 = select i1 %469, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1030, ptr addrspace(1) %gep, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1031, ptr addrspace(1) %gep156, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1032, ptr addrspace(1) %gep158, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1033, ptr addrspace(1) %gep160, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1034, ptr addrspace(1) %gep162, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1035, ptr addrspace(1) %gep164, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1036, ptr addrspace(1) %gep166, i32 %1038) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1037, ptr addrspace(1) %gep168, i32 %1038) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep170 = getelementptr bfloat, ptr addrspace(1) %invariant.gep169, i64 %1027, !dbg !32
  %gep172 = getelementptr bfloat, ptr addrspace(1) %invariant.gep171, i64 %1027, !dbg !32
  %gep174 = getelementptr bfloat, ptr addrspace(1) %invariant.gep173, i64 %1027, !dbg !32
  %gep176 = getelementptr bfloat, ptr addrspace(1) %invariant.gep175, i64 %1027, !dbg !32
  %gep178 = getelementptr bfloat, ptr addrspace(1) %invariant.gep177, i64 %1027, !dbg !32
  %gep180 = getelementptr bfloat, ptr addrspace(1) %invariant.gep179, i64 %1027, !dbg !32
  %gep182 = getelementptr bfloat, ptr addrspace(1) %invariant.gep181, i64 %1027, !dbg !32
  %gep184 = getelementptr bfloat, ptr addrspace(1) %invariant.gep183, i64 %1027, !dbg !32
  %1039 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %1028, !dbg !33
  %1040 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %113, !dbg !33
  %1041 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %115, !dbg !33
  %1042 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %117, !dbg !33
  %1043 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %119, !dbg !33
  %1044 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %121, !dbg !33
  %1045 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %123, !dbg !33
  %1046 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %125, !dbg !33
  %1047 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1039, i32 %127, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1040, ptr addrspace(1) %gep170, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1041, ptr addrspace(1) %gep172, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1042, ptr addrspace(1) %gep174, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1043, ptr addrspace(1) %gep176, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1044, ptr addrspace(1) %gep178, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1045, ptr addrspace(1) %gep180, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1046, ptr addrspace(1) %gep182, i32 %1038) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1047, ptr addrspace(1) %gep184, i32 %1038) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 32, !dbg !35
  br i1 %exitcond.not, label %1048, label %434, !dbg !35

1048:                                             ; preds = %434
  %1049 = or disjoint i32 %40, %31, !dbg !22
  %1050 = lshr i32 %15, 3, !dbg !19
  %1051 = and i32 %1050, 15, !dbg !19
  %1052 = or disjoint i32 %1051, %14, !dbg !20
  %1053 = or disjoint i32 %1052, 48, !dbg !20
  %1054 = or disjoint i32 %1052, 32, !dbg !20
  %1055 = or disjoint i32 %1052, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %1056 = icmp slt i32 %1052, 512, !dbg !38
  %1057 = icmp slt i32 %1055, 512, !dbg !38
  %1058 = icmp slt i32 %1054, 512, !dbg !38
  %1059 = icmp slt i32 %1053, 512, !dbg !38
  %1060 = icmp slt i32 %1049, 4096, !dbg !39
  %1061 = and i1 %1056, %1060, !dbg !40
  %1062 = and i1 %1057, %1060, !dbg !40
  %1063 = and i1 %1058, %1060, !dbg !40
  %1064 = and i1 %1059, %1060, !dbg !40
  %1065 = shl i32 %1052, 12, !dbg !41
  %1066 = shl i32 %1055, 12, !dbg !41
  %1067 = shl i32 %1054, 12, !dbg !41
  %1068 = shl i32 %1053, 12, !dbg !41
  %1069 = add i32 %1065, %1049, !dbg !42
  %1070 = add i32 %1066, %1049, !dbg !42
  %1071 = add i32 %1067, %1049, !dbg !42
  %1072 = add i32 %1068, %1049, !dbg !42
  %1073 = sext i32 %1069 to i64, !dbg !43
  %1074 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1073, !dbg !43
  %1075 = sext i32 %1070 to i64, !dbg !43
  %1076 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1075, !dbg !43
  %1077 = sext i32 %1071 to i64, !dbg !43
  %1078 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1077, !dbg !43
  %1079 = sext i32 %1072 to i64, !dbg !43
  %1080 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1079, !dbg !43
  %1081 = fptrunc float %984 to bfloat, !dbg !44
  %1082 = fptrunc float %985 to bfloat, !dbg !44
  %1083 = fptrunc float %986 to bfloat, !dbg !44
  %1084 = fptrunc float %987 to bfloat, !dbg !44
  %1085 = fptrunc float %989 to bfloat, !dbg !44
  %1086 = fptrunc float %990 to bfloat, !dbg !44
  %1087 = fptrunc float %991 to bfloat, !dbg !44
  %1088 = fptrunc float %992 to bfloat, !dbg !44
  %1089 = fptrunc float %994 to bfloat, !dbg !44
  %1090 = fptrunc float %995 to bfloat, !dbg !44
  %1091 = fptrunc float %996 to bfloat, !dbg !44
  %1092 = fptrunc float %997 to bfloat, !dbg !44
  %1093 = fptrunc float %999 to bfloat, !dbg !44
  %1094 = fptrunc float %1000 to bfloat, !dbg !44
  %1095 = fptrunc float %1001 to bfloat, !dbg !44
  %1096 = fptrunc float %1002 to bfloat, !dbg !44
  %1097 = fptrunc float %1004 to bfloat, !dbg !44
  %1098 = fptrunc float %1005 to bfloat, !dbg !44
  %1099 = fptrunc float %1006 to bfloat, !dbg !44
  %1100 = fptrunc float %1007 to bfloat, !dbg !44
  %1101 = fptrunc float %1009 to bfloat, !dbg !44
  %1102 = fptrunc float %1010 to bfloat, !dbg !44
  %1103 = fptrunc float %1011 to bfloat, !dbg !44
  %1104 = fptrunc float %1012 to bfloat, !dbg !44
  %1105 = fptrunc float %1014 to bfloat, !dbg !44
  %1106 = fptrunc float %1015 to bfloat, !dbg !44
  %1107 = fptrunc float %1016 to bfloat, !dbg !44
  %1108 = fptrunc float %1017 to bfloat, !dbg !44
  %1109 = fptrunc float %1019 to bfloat, !dbg !44
  %1110 = fptrunc float %1020 to bfloat, !dbg !44
  %1111 = fptrunc float %1021 to bfloat, !dbg !44
  %1112 = fptrunc float %1022 to bfloat, !dbg !44
  %1113 = shl i32 %15, 1, !dbg !44
  %1114 = and i32 %1113, 6, !dbg !44
  %1115 = shl i32 %15, 4, !dbg !44
  %1116 = and i32 %1115, 192, !dbg !44
  %1117 = or disjoint i32 %1116, %1114, !dbg !44
  %1118 = shl i32 %15, 4, !dbg !44
  %1119 = and i32 %1118, 1280, !dbg !44
  %1120 = or disjoint i32 %1119, %1117, !dbg !44
  %1121 = or disjoint i32 %1120, %400, !dbg !44
  %1122 = and i32 %26, 1016, !dbg !44
  %1123 = lshr i32 %1120, 3, !dbg !44
  %1124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1123, !dbg !44
  %1125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1124, i32 %1121, !dbg !44
  %1126 = bitcast bfloat %1081 to i16, !dbg !44
  %1127 = bitcast bfloat %1082 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1125, i16 %1126, i16 %1127, i1 true) #1, !dbg !44
  %1128 = or disjoint i32 %1121, 512, !dbg !44
  %1129 = lshr i32 %1128, 3, !dbg !44
  %1130 = and i32 %1129, 536870904, !dbg !44
  %1131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1130, !dbg !44
  %1132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1131, i32 %1128, !dbg !44
  %1133 = bitcast bfloat %1083 to i16, !dbg !44
  %1134 = bitcast bfloat %1084 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1132, i16 %1133, i16 %1134, i1 true) #1, !dbg !44
  %1135 = or disjoint i32 %1121, 16, !dbg !44
  %1136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1124, i32 %1135, !dbg !44
  %1137 = bitcast bfloat %1085 to i16, !dbg !44
  %1138 = bitcast bfloat %1086 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1136, i16 %1137, i16 %1138, i1 true) #1, !dbg !44
  %1139 = or disjoint i32 %1121, 528, !dbg !44
  %1140 = lshr i32 %1139, 3, !dbg !44
  %1141 = and i32 %1140, 536870904, !dbg !44
  %1142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1141, !dbg !44
  %1143 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1142, i32 %1139, !dbg !44
  %1144 = bitcast bfloat %1087 to i16, !dbg !44
  %1145 = bitcast bfloat %1088 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1143, i16 %1144, i16 %1145, i1 true) #1, !dbg !44
  %1146 = or disjoint i32 %1121, 32, !dbg !44
  %1147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1124, i32 %1146, !dbg !44
  %1148 = bitcast bfloat %1089 to i16, !dbg !44
  %1149 = bitcast bfloat %1090 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1147, i16 %1148, i16 %1149, i1 true) #1, !dbg !44
  %1150 = or disjoint i32 %1121, 544, !dbg !44
  %1151 = lshr i32 %1150, 3, !dbg !44
  %1152 = and i32 %1151, 536870904, !dbg !44
  %1153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1152, !dbg !44
  %1154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1153, i32 %1150, !dbg !44
  %1155 = bitcast bfloat %1091 to i16, !dbg !44
  %1156 = bitcast bfloat %1092 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1154, i16 %1155, i16 %1156, i1 true) #1, !dbg !44
  %1157 = or disjoint i32 %1121, 48, !dbg !44
  %1158 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1124, i32 %1157, !dbg !44
  %1159 = bitcast bfloat %1093 to i16, !dbg !44
  %1160 = bitcast bfloat %1094 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1158, i16 %1159, i16 %1160, i1 true) #1, !dbg !44
  %1161 = or disjoint i32 %1121, 560, !dbg !44
  %1162 = lshr i32 %1161, 3, !dbg !44
  %1163 = and i32 %1162, 536870904, !dbg !44
  %1164 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1163, !dbg !44
  %1165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1164, i32 %1161, !dbg !44
  %1166 = bitcast bfloat %1095 to i16, !dbg !44
  %1167 = bitcast bfloat %1096 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1165, i16 %1166, i16 %1167, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1168 = lshr exact i32 %26, 2, !dbg !44
  %1169 = and i32 %1168, 240, !dbg !44
  %1170 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1169, !dbg !44
  %1171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1170, i32 %1122, !dbg !44
  %1172 = load <4 x i32>, ptr addrspace(3) %1171, align 16, !dbg !44
  %1173 = or disjoint i32 %1122, 1024, !dbg !44
  %1174 = lshr exact i32 %1173, 3, !dbg !44
  %1175 = and i32 %1174, 248, !dbg !44
  %1176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1175, !dbg !44
  %1177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1176, i32 %1173, !dbg !44
  %1178 = load <4 x i32>, ptr addrspace(3) %1177, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1179 = bitcast bfloat %1097 to i16, !dbg !44
  %1180 = bitcast bfloat %1098 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %1125, i16 %1179, i16 %1180, i1 true) #1, !dbg !44
  %1181 = bitcast bfloat %1099 to i16, !dbg !44
  %1182 = bitcast bfloat %1100 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1132, i16 %1181, i16 %1182, i1 true) #1, !dbg !44
  %1183 = bitcast bfloat %1101 to i16, !dbg !44
  %1184 = bitcast bfloat %1102 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1136, i16 %1183, i16 %1184, i1 true) #1, !dbg !44
  %1185 = bitcast bfloat %1103 to i16, !dbg !44
  %1186 = bitcast bfloat %1104 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1143, i16 %1185, i16 %1186, i1 true) #1, !dbg !44
  %1187 = bitcast bfloat %1105 to i16, !dbg !44
  %1188 = bitcast bfloat %1106 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1147, i16 %1187, i16 %1188, i1 true) #1, !dbg !44
  %1189 = bitcast bfloat %1107 to i16, !dbg !44
  %1190 = bitcast bfloat %1108 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1154, i16 %1189, i16 %1190, i1 true) #1, !dbg !44
  %1191 = bitcast bfloat %1109 to i16, !dbg !44
  %1192 = bitcast bfloat %1110 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1158, i16 %1191, i16 %1192, i1 true) #1, !dbg !44
  %1193 = bitcast bfloat %1111 to i16, !dbg !44
  %1194 = bitcast bfloat %1112 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %1165, i16 %1193, i16 %1194, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %1195 = load <4 x i32>, ptr addrspace(3) %1171, align 16, !dbg !44
  %1196 = load <4 x i32>, ptr addrspace(3) %1177, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %1172, i64 0, !dbg !44
  %.extract52 = extractelement <4 x i32> %1172, i64 1, !dbg !44
  %.extract54 = extractelement <4 x i32> %1172, i64 2, !dbg !44
  %.extract56 = extractelement <4 x i32> %1172, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract52, i32 %.extract54, i32 %.extract56, ptr addrspace(1) %1074, i1 %1061) #1, !dbg !44
  %.extract58 = extractelement <4 x i32> %1178, i64 0, !dbg !44
  %.extract60 = extractelement <4 x i32> %1178, i64 1, !dbg !44
  %.extract62 = extractelement <4 x i32> %1178, i64 2, !dbg !44
  %.extract64 = extractelement <4 x i32> %1178, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract58, i32 %.extract60, i32 %.extract62, i32 %.extract64, ptr addrspace(1) %1076, i1 %1062) #1, !dbg !44
  %.extract66 = extractelement <4 x i32> %1195, i64 0, !dbg !44
  %.extract68 = extractelement <4 x i32> %1195, i64 1, !dbg !44
  %.extract70 = extractelement <4 x i32> %1195, i64 2, !dbg !44
  %.extract72 = extractelement <4 x i32> %1195, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract66, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %1078, i1 %1063) #1, !dbg !44
  %.extract74 = extractelement <4 x i32> %1196, i64 0, !dbg !44
  %.extract76 = extractelement <4 x i32> %1196, i64 1, !dbg !44
  %.extract78 = extractelement <4 x i32> %1196, i64 2, !dbg !44
  %.extract80 = extractelement <4 x i32> %1196, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract74, i32 %.extract76, i32 %.extract78, i32 %.extract80, ptr addrspace(1) %1080, i1 %1064) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmc4cxfhylnvuxcfrmlp5ihuhbke6txef3itajti4bte7pojlrxe.py", directory: "/tmp/torchinductor_root/mc")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 30, scope: !6)
!27 = !DILocation(line: 77, column: 55, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
