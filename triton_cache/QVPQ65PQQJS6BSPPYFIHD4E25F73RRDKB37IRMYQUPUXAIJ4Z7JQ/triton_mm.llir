; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 96, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 33, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 96, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = and i32 %15, 32, !dbg !19
  %19 = lshr i32 %15, 3, !dbg !19
  %20 = and i32 %19, 15, !dbg !19
  %21 = and i32 %15, 128, !dbg !19
  %22 = lshr exact i32 %21, 3, !dbg !19
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = or disjoint i32 %23, 32, !dbg !19
  %25 = or disjoint i32 %23, 64, !dbg !19
  %26 = or disjoint i32 %23, 96, !dbg !19
  %27 = or disjoint i32 %14, %23, !dbg !20
  %28 = or disjoint i32 %14, %24, !dbg !20
  %29 = or disjoint i32 %14, %25, !dbg !20
  %30 = or disjoint i32 %14, %26, !dbg !20
  %31 = shl nsw i32 %13, 8, !dbg !21
  %32 = or disjoint i32 %31, %23, !dbg !22
  %33 = or disjoint i32 %31, %24, !dbg !22
  %34 = or disjoint i32 %31, %25, !dbg !22
  %35 = or disjoint i32 %31, %26, !dbg !22
  %36 = srem i32 %27, 4112, !dbg !23
  %37 = srem i32 %28, 4112, !dbg !23
  %38 = srem i32 %29, 4112, !dbg !23
  %39 = srem i32 %30, 4112, !dbg !23
  %40 = srem i32 %32, 3072, !dbg !24
  %.lhs.trunc = trunc i32 %33 to i16, !dbg !24
  %41 = srem i16 %.lhs.trunc, 3072, !dbg !24
  %.sext = sext i16 %41 to i32, !dbg !24
  %.lhs.trunc131 = trunc i32 %34 to i16, !dbg !24
  %42 = srem i16 %.lhs.trunc131, 3072, !dbg !24
  %.sext132 = sext i16 %42 to i32, !dbg !24
  %.lhs.trunc133 = trunc i32 %35 to i16, !dbg !24
  %43 = srem i16 %.lhs.trunc133, 3072, !dbg !24
  %.sext134 = sext i16 %43 to i32, !dbg !24
  %44 = trunc i32 %32 to i16, !dbg !24
  %.lhs.trunc135 = or disjoint i16 %44, 128, !dbg !24
  %45 = srem i16 %.lhs.trunc135, 3072, !dbg !24
  %.sext136 = sext i16 %45 to i32, !dbg !24
  %.lhs.trunc137 = or disjoint i16 %44, 160, !dbg !24
  %46 = srem i16 %.lhs.trunc137, 3072, !dbg !24
  %.sext138 = sext i16 %46 to i32, !dbg !24
  %.lhs.trunc139 = or disjoint i16 %44, 192, !dbg !24
  %47 = srem i16 %.lhs.trunc139, 3072, !dbg !24
  %.sext140 = sext i16 %47 to i32, !dbg !24
  %.lhs.trunc141 = or disjoint i16 %44, 224, !dbg !24
  %48 = srem i16 %.lhs.trunc141, 3072, !dbg !24
  %.sext142 = sext i16 %48 to i32, !dbg !24
  %49 = shl i32 %15, 4, !dbg !25
  %50 = and i32 %49, 16, !dbg !25
  %51 = and i32 %49, 32, !dbg !25
  %52 = and i32 %49, 48, !dbg !25
  %53 = and i32 %49, 64, !dbg !25
  %54 = and i32 %49, 112, !dbg !25
  %55 = mul nsw i32 %36, 15360, !dbg !26
  %56 = mul nsw i32 %37, 15360, !dbg !26
  %57 = mul nsw i32 %38, 15360, !dbg !26
  %58 = mul nsw i32 %39, 15360, !dbg !26
  %59 = mul nsw i32 %40, 15360, !dbg !27
  %60 = mul nsw i32 %.sext, 15360, !dbg !27
  %61 = mul nsw i32 %.sext132, 15360, !dbg !27
  %62 = mul nsw i32 %.sext134, 15360, !dbg !27
  %63 = mul nsw i32 %.sext136, 15360, !dbg !27
  %64 = mul nsw i32 %.sext138, 15360, !dbg !27
  %65 = mul nsw i32 %.sext140, 15360, !dbg !27
  %66 = mul nsw i32 %.sext142, 15360, !dbg !27
  %67 = or disjoint i32 %55, %54, !dbg !28
  %68 = or disjoint i32 %56, %54, !dbg !28
  %69 = or disjoint i32 %57, %54, !dbg !28
  %70 = or disjoint i32 %58, %54, !dbg !28
  %71 = sext i32 %67 to i64, !dbg !29
  %72 = getelementptr i8, ptr addrspace(1) %0, i64 %71, !dbg !29
  %73 = sext i32 %68 to i64, !dbg !29
  %74 = getelementptr i8, ptr addrspace(1) %0, i64 %73, !dbg !29
  %75 = sext i32 %69 to i64, !dbg !29
  %76 = getelementptr i8, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %70 to i64, !dbg !29
  %78 = getelementptr i8, ptr addrspace(1) %0, i64 %77, !dbg !29
  %79 = shl i32 %15, 1, !dbg !30
  %80 = and i32 %79, 48, !dbg !30
  %81 = xor i32 %80, %54, !dbg !30
  %82 = shl nuw nsw i32 %18, 1, !dbg !30
  %83 = xor i32 %81, %82, !dbg !30
  %84 = shl nuw nsw i32 %23, 7, !dbg !30
  %85 = or disjoint i32 %83, %84, !dbg !30
  %86 = zext nneg i32 %85 to i64, !dbg !30
  %87 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %86, !dbg !30
  %88 = or disjoint i32 %84, 4096, !dbg !30
  %89 = or disjoint i32 %83, %88, !dbg !30
  %90 = zext nneg i32 %89 to i64, !dbg !30
  %91 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %90, !dbg !30
  %92 = or disjoint i32 %84, 8192, !dbg !30
  %93 = or disjoint i32 %83, %92, !dbg !30
  %94 = zext nneg i32 %93 to i64, !dbg !30
  %95 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %94, !dbg !30
  %96 = or disjoint i32 %84, 12288, !dbg !30
  %97 = or disjoint i32 %83, %96, !dbg !30
  %98 = zext nneg i32 %97 to i64, !dbg !30
  %99 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %98, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %87, ptr addrspace(1) %72, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %91, ptr addrspace(1) %74, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %76, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %99, ptr addrspace(1) %78, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %100 = or disjoint i32 %59, %54, !dbg !31
  %101 = or disjoint i32 %60, %54, !dbg !31
  %102 = or disjoint i32 %61, %54, !dbg !31
  %103 = or disjoint i32 %62, %54, !dbg !31
  %104 = or disjoint i32 %63, %54, !dbg !31
  %105 = or disjoint i32 %64, %54, !dbg !31
  %106 = or disjoint i32 %65, %54, !dbg !31
  %107 = or disjoint i32 %66, %54, !dbg !31
  %108 = sext i32 %100 to i64, !dbg !32
  %109 = getelementptr i8, ptr addrspace(1) %1, i64 %108, !dbg !32
  %110 = sext i32 %101 to i64, !dbg !32
  %111 = getelementptr i8, ptr addrspace(1) %1, i64 %110, !dbg !32
  %112 = sext i32 %102 to i64, !dbg !32
  %113 = getelementptr i8, ptr addrspace(1) %1, i64 %112, !dbg !32
  %114 = sext i32 %103 to i64, !dbg !32
  %115 = getelementptr i8, ptr addrspace(1) %1, i64 %114, !dbg !32
  %116 = sext i32 %104 to i64, !dbg !32
  %117 = getelementptr i8, ptr addrspace(1) %1, i64 %116, !dbg !32
  %118 = sext i32 %105 to i64, !dbg !32
  %119 = getelementptr i8, ptr addrspace(1) %1, i64 %118, !dbg !32
  %120 = sext i32 %106 to i64, !dbg !32
  %121 = getelementptr i8, ptr addrspace(1) %1, i64 %120, !dbg !32
  %122 = sext i32 %107 to i64, !dbg !32
  %123 = getelementptr i8, ptr addrspace(1) %1, i64 %122, !dbg !32
  %124 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %86, !dbg !33
  %125 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %90, !dbg !33
  %126 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %94, !dbg !33
  %127 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %98, !dbg !33
  %128 = or disjoint i32 %84, 16384, !dbg !33
  %129 = or disjoint i32 %83, %128, !dbg !33
  %130 = zext nneg i32 %129 to i64, !dbg !33
  %131 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %130, !dbg !33
  %132 = or disjoint i32 %84, 20480, !dbg !33
  %133 = or disjoint i32 %83, %132, !dbg !33
  %134 = zext nneg i32 %133 to i64, !dbg !33
  %135 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %134, !dbg !33
  %136 = or disjoint i32 %84, 24576, !dbg !33
  %137 = or disjoint i32 %83, %136, !dbg !33
  %138 = zext nneg i32 %137 to i64, !dbg !33
  %139 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %138, !dbg !33
  %140 = or disjoint i32 %84, 28672, !dbg !33
  %141 = or disjoint i32 %83, %140, !dbg !33
  %142 = zext nneg i32 %141 to i64, !dbg !33
  %143 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i64 %142, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %124, ptr addrspace(1) %109, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %125, ptr addrspace(1) %111, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %126, ptr addrspace(1) %113, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %127, ptr addrspace(1) %115, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %131, ptr addrspace(1) %117, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %135, ptr addrspace(1) %119, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %139, ptr addrspace(1) %121, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %143, ptr addrspace(1) %123, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %144 = or disjoint i32 %54, 128, !dbg !34
  %145 = or disjoint i32 %55, %144, !dbg !28
  %146 = or disjoint i32 %56, %144, !dbg !28
  %147 = or disjoint i32 %57, %144, !dbg !28
  %148 = or disjoint i32 %58, %144, !dbg !28
  %149 = sext i32 %145 to i64, !dbg !29
  %150 = getelementptr i8, ptr addrspace(1) %0, i64 %149, !dbg !29
  %151 = sext i32 %146 to i64, !dbg !29
  %152 = getelementptr i8, ptr addrspace(1) %0, i64 %151, !dbg !29
  %153 = sext i32 %147 to i64, !dbg !29
  %154 = getelementptr i8, ptr addrspace(1) %0, i64 %153, !dbg !29
  %155 = sext i32 %148 to i64, !dbg !29
  %156 = getelementptr i8, ptr addrspace(1) %0, i64 %155, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %157 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %86, !dbg !30
  %158 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %90, !dbg !30
  %159 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %94, !dbg !30
  %160 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %98, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %157, ptr addrspace(1) %150, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %158, ptr addrspace(1) %152, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %154, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %160, ptr addrspace(1) %156, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %161 = or disjoint i32 %59, %144, !dbg !31
  %162 = or disjoint i32 %60, %144, !dbg !31
  %163 = or disjoint i32 %61, %144, !dbg !31
  %164 = or disjoint i32 %62, %144, !dbg !31
  %165 = or disjoint i32 %63, %144, !dbg !31
  %166 = or disjoint i32 %64, %144, !dbg !31
  %167 = or disjoint i32 %65, %144, !dbg !31
  %168 = or disjoint i32 %66, %144, !dbg !31
  %169 = sext i32 %161 to i64, !dbg !32
  %170 = getelementptr i8, ptr addrspace(1) %1, i64 %169, !dbg !32
  %171 = sext i32 %162 to i64, !dbg !32
  %172 = getelementptr i8, ptr addrspace(1) %1, i64 %171, !dbg !32
  %173 = sext i32 %163 to i64, !dbg !32
  %174 = getelementptr i8, ptr addrspace(1) %1, i64 %173, !dbg !32
  %175 = sext i32 %164 to i64, !dbg !32
  %176 = getelementptr i8, ptr addrspace(1) %1, i64 %175, !dbg !32
  %177 = sext i32 %165 to i64, !dbg !32
  %178 = getelementptr i8, ptr addrspace(1) %1, i64 %177, !dbg !32
  %179 = sext i32 %166 to i64, !dbg !32
  %180 = getelementptr i8, ptr addrspace(1) %1, i64 %179, !dbg !32
  %181 = sext i32 %167 to i64, !dbg !32
  %182 = getelementptr i8, ptr addrspace(1) %1, i64 %181, !dbg !32
  %183 = sext i32 %168 to i64, !dbg !32
  %184 = getelementptr i8, ptr addrspace(1) %1, i64 %183, !dbg !32
  %185 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %86, !dbg !33
  %186 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %90, !dbg !33
  %187 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %94, !dbg !33
  %188 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %98, !dbg !33
  %189 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %130, !dbg !33
  %190 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %134, !dbg !33
  %191 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %138, !dbg !33
  %192 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %142, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %185, ptr addrspace(1) %170, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %186, ptr addrspace(1) %172, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %187, ptr addrspace(1) %174, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %188, ptr addrspace(1) %176, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %189, ptr addrspace(1) %178, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %190, ptr addrspace(1) %180, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %191, ptr addrspace(1) %182, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %192, ptr addrspace(1) %184, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %53, %17, !dbg !35
  %invariant.op144 = or disjoint i32 %16, %22, !dbg !35
  %invariant.op146 = or disjoint i32 %invariant.op144, 32, !dbg !35
  %invariant.op150 = or disjoint i32 %invariant.op144, 64, !dbg !35
  %invariant.op154 = or disjoint i32 %invariant.op144, 96, !dbg !35
  %invariant.op156 = or disjoint i32 %81, 16384, !dbg !35
  %invariant.op158 = or disjoint i32 %81, 20480, !dbg !35
  %invariant.op160 = or disjoint i32 %81, 24576, !dbg !35
  %invariant.op162 = or disjoint i32 %81, 28672, !dbg !35
  %invariant.op164 = or disjoint i32 %54, 256, !dbg !35
  %193 = and i32 %15, 7
  %194 = and i32 %15, 15
  %195 = xor i32 %54, %17
  %196 = or disjoint i32 %22, %194
  %197 = shl nuw nsw i32 %196, 7
  %198 = or disjoint i32 %197, %195
  %199 = zext nneg i32 %198 to i64
  %200 = or disjoint i32 %50, 32
  %201 = xor i32 %200, %51
  %202 = or disjoint i32 %201, %53
  %203 = xor i32 %202, %17
  %204 = or disjoint i32 %203, %197
  %205 = zext nneg i32 %204 to i64
  %206 = or disjoint i32 %52, 64
  %.reass = xor i32 %206, %invariant.op
  %207 = or disjoint i32 %.reass, %197
  %208 = zext nneg i32 %207 to i64
  %209 = or disjoint i32 %50, 96
  %and.ra = and i32 %49, 96
  %210 = or disjoint i32 %and.ra, %17
  %211 = xor i32 %210, %209
  %212 = or disjoint i32 %211, %197
  %213 = zext nneg i32 %212 to i64
  %214 = or disjoint i32 %193, 32
  %.reass147 = or disjoint i32 %193, %invariant.op146
  %215 = shl nuw nsw i32 %.reass147, 7
  %216 = or disjoint i32 %215, %195
  %217 = zext nneg i32 %216 to i64
  %218 = or disjoint i32 %203, %215
  %219 = zext nneg i32 %218 to i64
  %220 = or disjoint i32 %.reass, %215
  %221 = zext nneg i32 %220 to i64
  %222 = or disjoint i32 %211, %215
  %223 = zext nneg i32 %222 to i64
  %224 = or disjoint i32 %193, 64
  %.reass151 = or disjoint i32 %193, %invariant.op150
  %225 = shl nuw nsw i32 %.reass151, 7
  %226 = or disjoint i32 %225, %195
  %227 = zext nneg i32 %226 to i64
  %228 = or disjoint i32 %203, %225
  %229 = zext nneg i32 %228 to i64
  %230 = or disjoint i32 %.reass, %225
  %231 = zext nneg i32 %230 to i64
  %232 = or disjoint i32 %211, %225
  %233 = zext nneg i32 %232 to i64
  %234 = or disjoint i32 %193, 96
  %.reass155 = or disjoint i32 %193, %invariant.op154
  %235 = shl nuw nsw i32 %.reass155, 7
  %236 = or disjoint i32 %235, %195
  %237 = zext nneg i32 %236 to i64
  %238 = or disjoint i32 %203, %235
  %239 = zext nneg i32 %238 to i64
  %240 = or disjoint i32 %.reass, %235
  %241 = zext nneg i32 %240 to i64
  %242 = or disjoint i32 %211, %235
  %243 = zext nneg i32 %242 to i64
  %244 = lshr exact i32 %18, 2
  %245 = lshr i32 %15, 2
  %246 = and i32 %245, 16
  %247 = or disjoint i32 %246, %244
  %248 = or disjoint i32 %247, %193
  %249 = shl nuw nsw i32 %248, 7
  %250 = or disjoint i32 %249, %81
  %251 = zext nneg i32 %250 to i64
  %252 = or disjoint i32 %53, %80
  %253 = xor i32 %252, %206
  %254 = or disjoint i32 %253, %249
  %255 = zext nneg i32 %254 to i64
  %256 = or disjoint i32 %244, %214
  %257 = or disjoint i32 %256, %246
  %258 = shl nuw nsw i32 %257, 7
  %259 = or disjoint i32 %258, %81
  %260 = zext nneg i32 %259 to i64
  %261 = or disjoint i32 %253, %258
  %262 = zext nneg i32 %261 to i64
  %263 = or disjoint i32 %244, %224
  %264 = or disjoint i32 %263, %246
  %265 = shl nuw nsw i32 %264, 7
  %266 = or disjoint i32 %265, %81
  %267 = zext nneg i32 %266 to i64
  %268 = or disjoint i32 %253, %265
  %269 = zext nneg i32 %268 to i64
  %270 = or disjoint i32 %244, %234
  %271 = or disjoint i32 %270, %246
  %272 = shl nuw nsw i32 %271, 7
  %273 = or disjoint i32 %272, %81
  %274 = zext nneg i32 %273 to i64
  %275 = or disjoint i32 %253, %272
  %276 = zext nneg i32 %275 to i64
  %277 = or disjoint i32 %249, 16384
  %.reass157 = or disjoint i32 %249, %invariant.op156
  %278 = zext nneg i32 %.reass157 to i64
  %279 = or disjoint i32 %253, %277
  %280 = zext nneg i32 %279 to i64
  %281 = or disjoint i32 %249, 20480
  %.reass159 = or disjoint i32 %249, %invariant.op158
  %282 = zext nneg i32 %.reass159 to i64
  %283 = or disjoint i32 %253, %281
  %284 = zext nneg i32 %283 to i64
  %285 = or disjoint i32 %249, 24576
  %.reass161 = or disjoint i32 %249, %invariant.op160
  %286 = zext nneg i32 %.reass161 to i64
  %287 = or disjoint i32 %253, %285
  %288 = zext nneg i32 %287 to i64
  %289 = or disjoint i32 %249, 28672
  %.reass163 = or disjoint i32 %249, %invariant.op162
  %290 = zext nneg i32 %.reass163 to i64
  %291 = or disjoint i32 %253, %289
  %292 = zext nneg i32 %291 to i64
  %293 = zext nneg i32 %invariant.op164 to i64, !dbg !35
  %294 = sext i32 %66 to i64, !dbg !35
  %295 = sext i32 %65 to i64, !dbg !35
  %296 = sext i32 %64 to i64, !dbg !35
  %297 = sext i32 %63 to i64, !dbg !35
  %298 = sext i32 %62 to i64, !dbg !35
  %299 = sext i32 %61 to i64, !dbg !35
  %300 = sext i32 %60 to i64, !dbg !35
  %301 = sext i32 %59 to i64, !dbg !35
  %302 = sext i32 %58 to i64, !dbg !35
  %303 = sext i32 %57 to i64, !dbg !35
  %304 = sext i32 %56 to i64, !dbg !35
  %305 = sext i32 %55 to i64, !dbg !35
  %invariant.gep = getelementptr i8, ptr addrspace(1) %0, i64 %305, !dbg !35
  %invariant.gep421 = getelementptr i8, ptr addrspace(1) %0, i64 %304, !dbg !35
  %invariant.gep423 = getelementptr i8, ptr addrspace(1) %0, i64 %303, !dbg !35
  %invariant.gep425 = getelementptr i8, ptr addrspace(1) %0, i64 %302, !dbg !35
  %invariant.gep427 = getelementptr i8, ptr addrspace(1) %1, i64 %301, !dbg !35
  %invariant.gep429 = getelementptr i8, ptr addrspace(1) %1, i64 %300, !dbg !35
  %invariant.gep431 = getelementptr i8, ptr addrspace(1) %1, i64 %299, !dbg !35
  %invariant.gep433 = getelementptr i8, ptr addrspace(1) %1, i64 %298, !dbg !35
  %invariant.gep435 = getelementptr i8, ptr addrspace(1) %1, i64 %297, !dbg !35
  %invariant.gep437 = getelementptr i8, ptr addrspace(1) %1, i64 %296, !dbg !35
  %invariant.gep439 = getelementptr i8, ptr addrspace(1) %1, i64 %295, !dbg !35
  %invariant.gep441 = getelementptr i8, ptr addrspace(1) %1, i64 %294, !dbg !35
  br label %306, !dbg !35

306:                                              ; preds = %4, %306
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %306 ]
  %307 = phi i32 [ -1, %4 ], [ %440, %306 ]
  %308 = phi i32 [ 1, %4 ], [ %1345, %306 ]
  %309 = phi i32 [ 0, %4 ], [ %1184, %306 ]
  %310 = phi i32 [ 0, %4 ], [ %1185, %306 ]
  %311 = phi i32 [ 0, %4 ], [ %1186, %306 ]
  %312 = phi i32 [ 0, %4 ], [ %1187, %306 ]
  %313 = phi i32 [ 0, %4 ], [ %1189, %306 ]
  %314 = phi i32 [ 0, %4 ], [ %1190, %306 ]
  %315 = phi i32 [ 0, %4 ], [ %1191, %306 ]
  %316 = phi i32 [ 0, %4 ], [ %1192, %306 ]
  %317 = phi i32 [ 0, %4 ], [ %1194, %306 ]
  %318 = phi i32 [ 0, %4 ], [ %1195, %306 ]
  %319 = phi i32 [ 0, %4 ], [ %1196, %306 ]
  %320 = phi i32 [ 0, %4 ], [ %1197, %306 ]
  %321 = phi i32 [ 0, %4 ], [ %1199, %306 ]
  %322 = phi i32 [ 0, %4 ], [ %1200, %306 ]
  %323 = phi i32 [ 0, %4 ], [ %1201, %306 ]
  %324 = phi i32 [ 0, %4 ], [ %1202, %306 ]
  %325 = phi i32 [ 0, %4 ], [ %1204, %306 ]
  %326 = phi i32 [ 0, %4 ], [ %1205, %306 ]
  %327 = phi i32 [ 0, %4 ], [ %1206, %306 ]
  %328 = phi i32 [ 0, %4 ], [ %1207, %306 ]
  %329 = phi i32 [ 0, %4 ], [ %1209, %306 ]
  %330 = phi i32 [ 0, %4 ], [ %1210, %306 ]
  %331 = phi i32 [ 0, %4 ], [ %1211, %306 ]
  %332 = phi i32 [ 0, %4 ], [ %1212, %306 ]
  %333 = phi i32 [ 0, %4 ], [ %1214, %306 ]
  %334 = phi i32 [ 0, %4 ], [ %1215, %306 ]
  %335 = phi i32 [ 0, %4 ], [ %1216, %306 ]
  %336 = phi i32 [ 0, %4 ], [ %1217, %306 ]
  %337 = phi i32 [ 0, %4 ], [ %1219, %306 ]
  %338 = phi i32 [ 0, %4 ], [ %1220, %306 ]
  %339 = phi i32 [ 0, %4 ], [ %1221, %306 ]
  %340 = phi i32 [ 0, %4 ], [ %1222, %306 ]
  %341 = phi i32 [ 0, %4 ], [ %1224, %306 ]
  %342 = phi i32 [ 0, %4 ], [ %1225, %306 ]
  %343 = phi i32 [ 0, %4 ], [ %1226, %306 ]
  %344 = phi i32 [ 0, %4 ], [ %1227, %306 ]
  %345 = phi i32 [ 0, %4 ], [ %1229, %306 ]
  %346 = phi i32 [ 0, %4 ], [ %1230, %306 ]
  %347 = phi i32 [ 0, %4 ], [ %1231, %306 ]
  %348 = phi i32 [ 0, %4 ], [ %1232, %306 ]
  %349 = phi i32 [ 0, %4 ], [ %1234, %306 ]
  %350 = phi i32 [ 0, %4 ], [ %1235, %306 ]
  %351 = phi i32 [ 0, %4 ], [ %1236, %306 ]
  %352 = phi i32 [ 0, %4 ], [ %1237, %306 ]
  %353 = phi i32 [ 0, %4 ], [ %1239, %306 ]
  %354 = phi i32 [ 0, %4 ], [ %1240, %306 ]
  %355 = phi i32 [ 0, %4 ], [ %1241, %306 ]
  %356 = phi i32 [ 0, %4 ], [ %1242, %306 ]
  %357 = phi i32 [ 0, %4 ], [ %1244, %306 ]
  %358 = phi i32 [ 0, %4 ], [ %1245, %306 ]
  %359 = phi i32 [ 0, %4 ], [ %1246, %306 ]
  %360 = phi i32 [ 0, %4 ], [ %1247, %306 ]
  %361 = phi i32 [ 0, %4 ], [ %1249, %306 ]
  %362 = phi i32 [ 0, %4 ], [ %1250, %306 ]
  %363 = phi i32 [ 0, %4 ], [ %1251, %306 ]
  %364 = phi i32 [ 0, %4 ], [ %1252, %306 ]
  %365 = phi i32 [ 0, %4 ], [ %1254, %306 ]
  %366 = phi i32 [ 0, %4 ], [ %1255, %306 ]
  %367 = phi i32 [ 0, %4 ], [ %1256, %306 ]
  %368 = phi i32 [ 0, %4 ], [ %1257, %306 ]
  %369 = phi i32 [ 0, %4 ], [ %1259, %306 ]
  %370 = phi i32 [ 0, %4 ], [ %1260, %306 ]
  %371 = phi i32 [ 0, %4 ], [ %1261, %306 ]
  %372 = phi i32 [ 0, %4 ], [ %1262, %306 ]
  %373 = phi i32 [ 0, %4 ], [ %1264, %306 ]
  %374 = phi i32 [ 0, %4 ], [ %1265, %306 ]
  %375 = phi i32 [ 0, %4 ], [ %1266, %306 ]
  %376 = phi i32 [ 0, %4 ], [ %1267, %306 ]
  %377 = phi i32 [ 0, %4 ], [ %1269, %306 ]
  %378 = phi i32 [ 0, %4 ], [ %1270, %306 ]
  %379 = phi i32 [ 0, %4 ], [ %1271, %306 ]
  %380 = phi i32 [ 0, %4 ], [ %1272, %306 ]
  %381 = phi i32 [ 0, %4 ], [ %1274, %306 ]
  %382 = phi i32 [ 0, %4 ], [ %1275, %306 ]
  %383 = phi i32 [ 0, %4 ], [ %1276, %306 ]
  %384 = phi i32 [ 0, %4 ], [ %1277, %306 ]
  %385 = phi i32 [ 0, %4 ], [ %1279, %306 ]
  %386 = phi i32 [ 0, %4 ], [ %1280, %306 ]
  %387 = phi i32 [ 0, %4 ], [ %1281, %306 ]
  %388 = phi i32 [ 0, %4 ], [ %1282, %306 ]
  %389 = phi i32 [ 0, %4 ], [ %1284, %306 ]
  %390 = phi i32 [ 0, %4 ], [ %1285, %306 ]
  %391 = phi i32 [ 0, %4 ], [ %1286, %306 ]
  %392 = phi i32 [ 0, %4 ], [ %1287, %306 ]
  %393 = phi i32 [ 0, %4 ], [ %1289, %306 ]
  %394 = phi i32 [ 0, %4 ], [ %1290, %306 ]
  %395 = phi i32 [ 0, %4 ], [ %1291, %306 ]
  %396 = phi i32 [ 0, %4 ], [ %1292, %306 ]
  %397 = phi i32 [ 0, %4 ], [ %1294, %306 ]
  %398 = phi i32 [ 0, %4 ], [ %1295, %306 ]
  %399 = phi i32 [ 0, %4 ], [ %1296, %306 ]
  %400 = phi i32 [ 0, %4 ], [ %1297, %306 ]
  %401 = phi i32 [ 0, %4 ], [ %1299, %306 ]
  %402 = phi i32 [ 0, %4 ], [ %1300, %306 ]
  %403 = phi i32 [ 0, %4 ], [ %1301, %306 ]
  %404 = phi i32 [ 0, %4 ], [ %1302, %306 ]
  %405 = phi i32 [ 0, %4 ], [ %1304, %306 ]
  %406 = phi i32 [ 0, %4 ], [ %1305, %306 ]
  %407 = phi i32 [ 0, %4 ], [ %1306, %306 ]
  %408 = phi i32 [ 0, %4 ], [ %1307, %306 ]
  %409 = phi i32 [ 0, %4 ], [ %1309, %306 ]
  %410 = phi i32 [ 0, %4 ], [ %1310, %306 ]
  %411 = phi i32 [ 0, %4 ], [ %1311, %306 ]
  %412 = phi i32 [ 0, %4 ], [ %1312, %306 ]
  %413 = phi i32 [ 0, %4 ], [ %1314, %306 ]
  %414 = phi i32 [ 0, %4 ], [ %1315, %306 ]
  %415 = phi i32 [ 0, %4 ], [ %1316, %306 ]
  %416 = phi i32 [ 0, %4 ], [ %1317, %306 ]
  %417 = phi i32 [ 0, %4 ], [ %1319, %306 ]
  %418 = phi i32 [ 0, %4 ], [ %1320, %306 ]
  %419 = phi i32 [ 0, %4 ], [ %1321, %306 ]
  %420 = phi i32 [ 0, %4 ], [ %1322, %306 ]
  %421 = phi i32 [ 0, %4 ], [ %1324, %306 ]
  %422 = phi i32 [ 0, %4 ], [ %1325, %306 ]
  %423 = phi i32 [ 0, %4 ], [ %1326, %306 ]
  %424 = phi i32 [ 0, %4 ], [ %1327, %306 ]
  %425 = phi i32 [ 0, %4 ], [ %1329, %306 ]
  %426 = phi i32 [ 0, %4 ], [ %1330, %306 ]
  %427 = phi i32 [ 0, %4 ], [ %1331, %306 ]
  %428 = phi i32 [ 0, %4 ], [ %1332, %306 ]
  %429 = phi i32 [ 0, %4 ], [ %1334, %306 ]
  %430 = phi i32 [ 0, %4 ], [ %1335, %306 ]
  %431 = phi i32 [ 0, %4 ], [ %1336, %306 ]
  %432 = phi i32 [ 0, %4 ], [ %1337, %306 ]
  %433 = phi i32 [ 0, %4 ], [ %1339, %306 ]
  %434 = phi i32 [ 0, %4 ], [ %1340, %306 ]
  %435 = phi i32 [ 0, %4 ], [ %1341, %306 ]
  %436 = phi i32 [ 0, %4 ], [ %1342, %306 ]
  %437 = icmp samesign ult i64 %indvars.iv, 118, !dbg !35
  %438 = add i32 %307, 1, !dbg !35
  %439 = icmp slt i32 %438, 2, !dbg !35
  %440 = select i1 %439, i32 %438, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %441 = shl i32 %440, 14, !dbg !30
  %442 = sext i32 %441 to i64, !dbg !30
  %443 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %442, !dbg !30
  %444 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %199, !dbg !30
  %445 = ptrtoint ptr addrspace(3) %444 to i64, !dbg !30
  %446 = trunc i64 %445 to i32, !dbg !30
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #1, !dbg !30
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !30
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !30
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !30
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !30
  %452 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %205, !dbg !30
  %453 = ptrtoint ptr addrspace(3) %452 to i64, !dbg !30
  %454 = trunc i64 %453 to i32, !dbg !30
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %454) #1, !dbg !30
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !30
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !30
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !30
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !30
  %460 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %208, !dbg !30
  %461 = ptrtoint ptr addrspace(3) %460 to i64, !dbg !30
  %462 = trunc i64 %461 to i32, !dbg !30
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %462) #1, !dbg !30
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !30
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !30
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !30
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !30
  %468 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %213, !dbg !30
  %469 = ptrtoint ptr addrspace(3) %468 to i64, !dbg !30
  %470 = trunc i64 %469 to i32, !dbg !30
  %471 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %470) #1, !dbg !30
  %472 = extractvalue { i32, i32, i32, i32 } %471, 0, !dbg !30
  %473 = extractvalue { i32, i32, i32, i32 } %471, 1, !dbg !30
  %474 = extractvalue { i32, i32, i32, i32 } %471, 2, !dbg !30
  %475 = extractvalue { i32, i32, i32, i32 } %471, 3, !dbg !30
  %476 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %217, !dbg !30
  %477 = ptrtoint ptr addrspace(3) %476 to i64, !dbg !30
  %478 = trunc i64 %477 to i32, !dbg !30
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %478) #1, !dbg !30
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !30
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !30
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !30
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !30
  %484 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %219, !dbg !30
  %485 = ptrtoint ptr addrspace(3) %484 to i64, !dbg !30
  %486 = trunc i64 %485 to i32, !dbg !30
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %486) #1, !dbg !30
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !30
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !30
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !30
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !30
  %492 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %221, !dbg !30
  %493 = ptrtoint ptr addrspace(3) %492 to i64, !dbg !30
  %494 = trunc i64 %493 to i32, !dbg !30
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %494) #1, !dbg !30
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !30
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !30
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !30
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !30
  %500 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %223, !dbg !30
  %501 = ptrtoint ptr addrspace(3) %500 to i64, !dbg !30
  %502 = trunc i64 %501 to i32, !dbg !30
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %502) #1, !dbg !30
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !30
  %505 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !30
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !30
  %507 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !30
  %508 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %227, !dbg !30
  %509 = ptrtoint ptr addrspace(3) %508 to i64, !dbg !30
  %510 = trunc i64 %509 to i32, !dbg !30
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %510) #1, !dbg !30
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !30
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !30
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !30
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !30
  %516 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %229, !dbg !30
  %517 = ptrtoint ptr addrspace(3) %516 to i64, !dbg !30
  %518 = trunc i64 %517 to i32, !dbg !30
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %518) #1, !dbg !30
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !30
  %521 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !30
  %522 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !30
  %523 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !30
  %524 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %231, !dbg !30
  %525 = ptrtoint ptr addrspace(3) %524 to i64, !dbg !30
  %526 = trunc i64 %525 to i32, !dbg !30
  %527 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %526) #1, !dbg !30
  %528 = extractvalue { i32, i32, i32, i32 } %527, 0, !dbg !30
  %529 = extractvalue { i32, i32, i32, i32 } %527, 1, !dbg !30
  %530 = extractvalue { i32, i32, i32, i32 } %527, 2, !dbg !30
  %531 = extractvalue { i32, i32, i32, i32 } %527, 3, !dbg !30
  %532 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %233, !dbg !30
  %533 = ptrtoint ptr addrspace(3) %532 to i64, !dbg !30
  %534 = trunc i64 %533 to i32, !dbg !30
  %535 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %534) #1, !dbg !30
  %536 = extractvalue { i32, i32, i32, i32 } %535, 0, !dbg !30
  %537 = extractvalue { i32, i32, i32, i32 } %535, 1, !dbg !30
  %538 = extractvalue { i32, i32, i32, i32 } %535, 2, !dbg !30
  %539 = extractvalue { i32, i32, i32, i32 } %535, 3, !dbg !30
  %540 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %237, !dbg !30
  %541 = ptrtoint ptr addrspace(3) %540 to i64, !dbg !30
  %542 = trunc i64 %541 to i32, !dbg !30
  %543 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %542) #1, !dbg !30
  %544 = extractvalue { i32, i32, i32, i32 } %543, 0, !dbg !30
  %545 = extractvalue { i32, i32, i32, i32 } %543, 1, !dbg !30
  %546 = extractvalue { i32, i32, i32, i32 } %543, 2, !dbg !30
  %547 = extractvalue { i32, i32, i32, i32 } %543, 3, !dbg !30
  %548 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %239, !dbg !30
  %549 = ptrtoint ptr addrspace(3) %548 to i64, !dbg !30
  %550 = trunc i64 %549 to i32, !dbg !30
  %551 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %550) #1, !dbg !30
  %552 = extractvalue { i32, i32, i32, i32 } %551, 0, !dbg !30
  %553 = extractvalue { i32, i32, i32, i32 } %551, 1, !dbg !30
  %554 = extractvalue { i32, i32, i32, i32 } %551, 2, !dbg !30
  %555 = extractvalue { i32, i32, i32, i32 } %551, 3, !dbg !30
  %556 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %241, !dbg !30
  %557 = ptrtoint ptr addrspace(3) %556 to i64, !dbg !30
  %558 = trunc i64 %557 to i32, !dbg !30
  %559 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %558) #1, !dbg !30
  %560 = extractvalue { i32, i32, i32, i32 } %559, 0, !dbg !30
  %561 = extractvalue { i32, i32, i32, i32 } %559, 1, !dbg !30
  %562 = extractvalue { i32, i32, i32, i32 } %559, 2, !dbg !30
  %563 = extractvalue { i32, i32, i32, i32 } %559, 3, !dbg !30
  %564 = getelementptr inbounds nuw i8, ptr addrspace(3) %443, i64 %243, !dbg !30
  %565 = ptrtoint ptr addrspace(3) %564 to i64, !dbg !30
  %566 = trunc i64 %565 to i32, !dbg !30
  %567 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %566) #1, !dbg !30
  %568 = extractvalue { i32, i32, i32, i32 } %567, 0, !dbg !30
  %569 = extractvalue { i32, i32, i32, i32 } %567, 1, !dbg !30
  %570 = extractvalue { i32, i32, i32, i32 } %567, 2, !dbg !30
  %571 = extractvalue { i32, i32, i32, i32 } %567, 3, !dbg !30
  %572 = shl i32 %440, 15, !dbg !33
  %573 = sext i32 %572 to i64, !dbg !33
  %574 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %573, !dbg !33
  %575 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %251, !dbg !33
  %576 = ptrtoint ptr addrspace(3) %575 to i64, !dbg !33
  %577 = trunc i64 %576 to i32, !dbg !33
  %578 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %577) #1, !dbg !33
  %579 = extractvalue { i32, i32, i32, i32 } %578, 0, !dbg !33
  %580 = extractvalue { i32, i32, i32, i32 } %578, 1, !dbg !33
  %581 = extractvalue { i32, i32, i32, i32 } %578, 2, !dbg !33
  %582 = extractvalue { i32, i32, i32, i32 } %578, 3, !dbg !33
  %583 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %255, !dbg !33
  %584 = ptrtoint ptr addrspace(3) %583 to i64, !dbg !33
  %585 = trunc i64 %584 to i32, !dbg !33
  %586 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %585) #1, !dbg !33
  %587 = extractvalue { i32, i32, i32, i32 } %586, 0, !dbg !33
  %588 = extractvalue { i32, i32, i32, i32 } %586, 1, !dbg !33
  %589 = extractvalue { i32, i32, i32, i32 } %586, 2, !dbg !33
  %590 = extractvalue { i32, i32, i32, i32 } %586, 3, !dbg !33
  %591 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %260, !dbg !33
  %592 = ptrtoint ptr addrspace(3) %591 to i64, !dbg !33
  %593 = trunc i64 %592 to i32, !dbg !33
  %594 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %593) #1, !dbg !33
  %595 = extractvalue { i32, i32, i32, i32 } %594, 0, !dbg !33
  %596 = extractvalue { i32, i32, i32, i32 } %594, 1, !dbg !33
  %597 = extractvalue { i32, i32, i32, i32 } %594, 2, !dbg !33
  %598 = extractvalue { i32, i32, i32, i32 } %594, 3, !dbg !33
  %599 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %262, !dbg !33
  %600 = ptrtoint ptr addrspace(3) %599 to i64, !dbg !33
  %601 = trunc i64 %600 to i32, !dbg !33
  %602 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %601) #1, !dbg !33
  %603 = extractvalue { i32, i32, i32, i32 } %602, 0, !dbg !33
  %604 = extractvalue { i32, i32, i32, i32 } %602, 1, !dbg !33
  %605 = extractvalue { i32, i32, i32, i32 } %602, 2, !dbg !33
  %606 = extractvalue { i32, i32, i32, i32 } %602, 3, !dbg !33
  %607 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %267, !dbg !33
  %608 = ptrtoint ptr addrspace(3) %607 to i64, !dbg !33
  %609 = trunc i64 %608 to i32, !dbg !33
  %610 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %609) #1, !dbg !33
  %611 = extractvalue { i32, i32, i32, i32 } %610, 0, !dbg !33
  %612 = extractvalue { i32, i32, i32, i32 } %610, 1, !dbg !33
  %613 = extractvalue { i32, i32, i32, i32 } %610, 2, !dbg !33
  %614 = extractvalue { i32, i32, i32, i32 } %610, 3, !dbg !33
  %615 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %269, !dbg !33
  %616 = ptrtoint ptr addrspace(3) %615 to i64, !dbg !33
  %617 = trunc i64 %616 to i32, !dbg !33
  %618 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %617) #1, !dbg !33
  %619 = extractvalue { i32, i32, i32, i32 } %618, 0, !dbg !33
  %620 = extractvalue { i32, i32, i32, i32 } %618, 1, !dbg !33
  %621 = extractvalue { i32, i32, i32, i32 } %618, 2, !dbg !33
  %622 = extractvalue { i32, i32, i32, i32 } %618, 3, !dbg !33
  %623 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %274, !dbg !33
  %624 = ptrtoint ptr addrspace(3) %623 to i64, !dbg !33
  %625 = trunc i64 %624 to i32, !dbg !33
  %626 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %625) #1, !dbg !33
  %627 = extractvalue { i32, i32, i32, i32 } %626, 0, !dbg !33
  %628 = extractvalue { i32, i32, i32, i32 } %626, 1, !dbg !33
  %629 = extractvalue { i32, i32, i32, i32 } %626, 2, !dbg !33
  %630 = extractvalue { i32, i32, i32, i32 } %626, 3, !dbg !33
  %631 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %276, !dbg !33
  %632 = ptrtoint ptr addrspace(3) %631 to i64, !dbg !33
  %633 = trunc i64 %632 to i32, !dbg !33
  %634 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %633) #1, !dbg !33
  %635 = extractvalue { i32, i32, i32, i32 } %634, 0, !dbg !33
  %636 = extractvalue { i32, i32, i32, i32 } %634, 1, !dbg !33
  %637 = extractvalue { i32, i32, i32, i32 } %634, 2, !dbg !33
  %638 = extractvalue { i32, i32, i32, i32 } %634, 3, !dbg !33
  %639 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %278, !dbg !33
  %640 = ptrtoint ptr addrspace(3) %639 to i64, !dbg !33
  %641 = trunc i64 %640 to i32, !dbg !33
  %642 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %641) #1, !dbg !33
  %643 = extractvalue { i32, i32, i32, i32 } %642, 0, !dbg !33
  %644 = extractvalue { i32, i32, i32, i32 } %642, 1, !dbg !33
  %645 = extractvalue { i32, i32, i32, i32 } %642, 2, !dbg !33
  %646 = extractvalue { i32, i32, i32, i32 } %642, 3, !dbg !33
  %647 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %280, !dbg !33
  %648 = ptrtoint ptr addrspace(3) %647 to i64, !dbg !33
  %649 = trunc i64 %648 to i32, !dbg !33
  %650 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %649) #1, !dbg !33
  %651 = extractvalue { i32, i32, i32, i32 } %650, 0, !dbg !33
  %652 = extractvalue { i32, i32, i32, i32 } %650, 1, !dbg !33
  %653 = extractvalue { i32, i32, i32, i32 } %650, 2, !dbg !33
  %654 = extractvalue { i32, i32, i32, i32 } %650, 3, !dbg !33
  %655 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %282, !dbg !33
  %656 = ptrtoint ptr addrspace(3) %655 to i64, !dbg !33
  %657 = trunc i64 %656 to i32, !dbg !33
  %658 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %657) #1, !dbg !33
  %659 = extractvalue { i32, i32, i32, i32 } %658, 0, !dbg !33
  %660 = extractvalue { i32, i32, i32, i32 } %658, 1, !dbg !33
  %661 = extractvalue { i32, i32, i32, i32 } %658, 2, !dbg !33
  %662 = extractvalue { i32, i32, i32, i32 } %658, 3, !dbg !33
  %663 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %284, !dbg !33
  %664 = ptrtoint ptr addrspace(3) %663 to i64, !dbg !33
  %665 = trunc i64 %664 to i32, !dbg !33
  %666 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %665) #1, !dbg !33
  %667 = extractvalue { i32, i32, i32, i32 } %666, 0, !dbg !33
  %668 = extractvalue { i32, i32, i32, i32 } %666, 1, !dbg !33
  %669 = extractvalue { i32, i32, i32, i32 } %666, 2, !dbg !33
  %670 = extractvalue { i32, i32, i32, i32 } %666, 3, !dbg !33
  %671 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %286, !dbg !33
  %672 = ptrtoint ptr addrspace(3) %671 to i64, !dbg !33
  %673 = trunc i64 %672 to i32, !dbg !33
  %674 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %673) #1, !dbg !33
  %675 = extractvalue { i32, i32, i32, i32 } %674, 0, !dbg !33
  %676 = extractvalue { i32, i32, i32, i32 } %674, 1, !dbg !33
  %677 = extractvalue { i32, i32, i32, i32 } %674, 2, !dbg !33
  %678 = extractvalue { i32, i32, i32, i32 } %674, 3, !dbg !33
  %679 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %288, !dbg !33
  %680 = ptrtoint ptr addrspace(3) %679 to i64, !dbg !33
  %681 = trunc i64 %680 to i32, !dbg !33
  %682 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %681) #1, !dbg !33
  %683 = extractvalue { i32, i32, i32, i32 } %682, 0, !dbg !33
  %684 = extractvalue { i32, i32, i32, i32 } %682, 1, !dbg !33
  %685 = extractvalue { i32, i32, i32, i32 } %682, 2, !dbg !33
  %686 = extractvalue { i32, i32, i32, i32 } %682, 3, !dbg !33
  %687 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %290, !dbg !33
  %688 = ptrtoint ptr addrspace(3) %687 to i64, !dbg !33
  %689 = trunc i64 %688 to i32, !dbg !33
  %690 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %689) #1, !dbg !33
  %691 = extractvalue { i32, i32, i32, i32 } %690, 0, !dbg !33
  %692 = extractvalue { i32, i32, i32, i32 } %690, 1, !dbg !33
  %693 = extractvalue { i32, i32, i32, i32 } %690, 2, !dbg !33
  %694 = extractvalue { i32, i32, i32, i32 } %690, 3, !dbg !33
  %695 = getelementptr inbounds nuw i8, ptr addrspace(3) %574, i64 %292, !dbg !33
  %696 = ptrtoint ptr addrspace(3) %695 to i64, !dbg !33
  %697 = trunc i64 %696 to i32, !dbg !33
  %698 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %697) #1, !dbg !33
  %699 = extractvalue { i32, i32, i32, i32 } %698, 0, !dbg !33
  %700 = extractvalue { i32, i32, i32, i32 } %698, 1, !dbg !33
  %701 = extractvalue { i32, i32, i32, i32 } %698, 2, !dbg !33
  %702 = extractvalue { i32, i32, i32, i32 } %698, 3, !dbg !33
  %703 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %309, i32 %310, i32 %311, i32 %312, i32 %448, i32 %449, i32 %450, i32 %451, i32 %579, i32 %580) #1, !dbg !36
  %704 = extractvalue { i32, i32, i32, i32 } %703, 0, !dbg !36
  %705 = extractvalue { i32, i32, i32, i32 } %703, 1, !dbg !36
  %706 = extractvalue { i32, i32, i32, i32 } %703, 2, !dbg !36
  %707 = extractvalue { i32, i32, i32, i32 } %703, 3, !dbg !36
  %708 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %313, i32 %314, i32 %315, i32 %316, i32 %448, i32 %449, i32 %450, i32 %451, i32 %595, i32 %596) #1, !dbg !36
  %709 = extractvalue { i32, i32, i32, i32 } %708, 0, !dbg !36
  %710 = extractvalue { i32, i32, i32, i32 } %708, 1, !dbg !36
  %711 = extractvalue { i32, i32, i32, i32 } %708, 2, !dbg !36
  %712 = extractvalue { i32, i32, i32, i32 } %708, 3, !dbg !36
  %713 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %317, i32 %318, i32 %319, i32 %320, i32 %448, i32 %449, i32 %450, i32 %451, i32 %611, i32 %612) #1, !dbg !36
  %714 = extractvalue { i32, i32, i32, i32 } %713, 0, !dbg !36
  %715 = extractvalue { i32, i32, i32, i32 } %713, 1, !dbg !36
  %716 = extractvalue { i32, i32, i32, i32 } %713, 2, !dbg !36
  %717 = extractvalue { i32, i32, i32, i32 } %713, 3, !dbg !36
  %718 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %321, i32 %322, i32 %323, i32 %324, i32 %448, i32 %449, i32 %450, i32 %451, i32 %627, i32 %628) #1, !dbg !36
  %719 = extractvalue { i32, i32, i32, i32 } %718, 0, !dbg !36
  %720 = extractvalue { i32, i32, i32, i32 } %718, 1, !dbg !36
  %721 = extractvalue { i32, i32, i32, i32 } %718, 2, !dbg !36
  %722 = extractvalue { i32, i32, i32, i32 } %718, 3, !dbg !36
  %723 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %325, i32 %326, i32 %327, i32 %328, i32 %448, i32 %449, i32 %450, i32 %451, i32 %643, i32 %644) #1, !dbg !36
  %724 = extractvalue { i32, i32, i32, i32 } %723, 0, !dbg !36
  %725 = extractvalue { i32, i32, i32, i32 } %723, 1, !dbg !36
  %726 = extractvalue { i32, i32, i32, i32 } %723, 2, !dbg !36
  %727 = extractvalue { i32, i32, i32, i32 } %723, 3, !dbg !36
  %728 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %329, i32 %330, i32 %331, i32 %332, i32 %448, i32 %449, i32 %450, i32 %451, i32 %659, i32 %660) #1, !dbg !36
  %729 = extractvalue { i32, i32, i32, i32 } %728, 0, !dbg !36
  %730 = extractvalue { i32, i32, i32, i32 } %728, 1, !dbg !36
  %731 = extractvalue { i32, i32, i32, i32 } %728, 2, !dbg !36
  %732 = extractvalue { i32, i32, i32, i32 } %728, 3, !dbg !36
  %733 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %333, i32 %334, i32 %335, i32 %336, i32 %448, i32 %449, i32 %450, i32 %451, i32 %675, i32 %676) #1, !dbg !36
  %734 = extractvalue { i32, i32, i32, i32 } %733, 0, !dbg !36
  %735 = extractvalue { i32, i32, i32, i32 } %733, 1, !dbg !36
  %736 = extractvalue { i32, i32, i32, i32 } %733, 2, !dbg !36
  %737 = extractvalue { i32, i32, i32, i32 } %733, 3, !dbg !36
  %738 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %337, i32 %338, i32 %339, i32 %340, i32 %448, i32 %449, i32 %450, i32 %451, i32 %691, i32 %692) #1, !dbg !36
  %739 = extractvalue { i32, i32, i32, i32 } %738, 0, !dbg !36
  %740 = extractvalue { i32, i32, i32, i32 } %738, 1, !dbg !36
  %741 = extractvalue { i32, i32, i32, i32 } %738, 2, !dbg !36
  %742 = extractvalue { i32, i32, i32, i32 } %738, 3, !dbg !36
  %743 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %341, i32 %342, i32 %343, i32 %344, i32 %480, i32 %481, i32 %482, i32 %483, i32 %579, i32 %580) #1, !dbg !36
  %744 = extractvalue { i32, i32, i32, i32 } %743, 0, !dbg !36
  %745 = extractvalue { i32, i32, i32, i32 } %743, 1, !dbg !36
  %746 = extractvalue { i32, i32, i32, i32 } %743, 2, !dbg !36
  %747 = extractvalue { i32, i32, i32, i32 } %743, 3, !dbg !36
  %748 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %345, i32 %346, i32 %347, i32 %348, i32 %480, i32 %481, i32 %482, i32 %483, i32 %595, i32 %596) #1, !dbg !36
  %749 = extractvalue { i32, i32, i32, i32 } %748, 0, !dbg !36
  %750 = extractvalue { i32, i32, i32, i32 } %748, 1, !dbg !36
  %751 = extractvalue { i32, i32, i32, i32 } %748, 2, !dbg !36
  %752 = extractvalue { i32, i32, i32, i32 } %748, 3, !dbg !36
  %753 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %349, i32 %350, i32 %351, i32 %352, i32 %480, i32 %481, i32 %482, i32 %483, i32 %611, i32 %612) #1, !dbg !36
  %754 = extractvalue { i32, i32, i32, i32 } %753, 0, !dbg !36
  %755 = extractvalue { i32, i32, i32, i32 } %753, 1, !dbg !36
  %756 = extractvalue { i32, i32, i32, i32 } %753, 2, !dbg !36
  %757 = extractvalue { i32, i32, i32, i32 } %753, 3, !dbg !36
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %353, i32 %354, i32 %355, i32 %356, i32 %480, i32 %481, i32 %482, i32 %483, i32 %627, i32 %628) #1, !dbg !36
  %759 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !36
  %760 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !36
  %761 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !36
  %762 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !36
  %763 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %357, i32 %358, i32 %359, i32 %360, i32 %480, i32 %481, i32 %482, i32 %483, i32 %643, i32 %644) #1, !dbg !36
  %764 = extractvalue { i32, i32, i32, i32 } %763, 0, !dbg !36
  %765 = extractvalue { i32, i32, i32, i32 } %763, 1, !dbg !36
  %766 = extractvalue { i32, i32, i32, i32 } %763, 2, !dbg !36
  %767 = extractvalue { i32, i32, i32, i32 } %763, 3, !dbg !36
  %768 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %361, i32 %362, i32 %363, i32 %364, i32 %480, i32 %481, i32 %482, i32 %483, i32 %659, i32 %660) #1, !dbg !36
  %769 = extractvalue { i32, i32, i32, i32 } %768, 0, !dbg !36
  %770 = extractvalue { i32, i32, i32, i32 } %768, 1, !dbg !36
  %771 = extractvalue { i32, i32, i32, i32 } %768, 2, !dbg !36
  %772 = extractvalue { i32, i32, i32, i32 } %768, 3, !dbg !36
  %773 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %365, i32 %366, i32 %367, i32 %368, i32 %480, i32 %481, i32 %482, i32 %483, i32 %675, i32 %676) #1, !dbg !36
  %774 = extractvalue { i32, i32, i32, i32 } %773, 0, !dbg !36
  %775 = extractvalue { i32, i32, i32, i32 } %773, 1, !dbg !36
  %776 = extractvalue { i32, i32, i32, i32 } %773, 2, !dbg !36
  %777 = extractvalue { i32, i32, i32, i32 } %773, 3, !dbg !36
  %778 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %369, i32 %370, i32 %371, i32 %372, i32 %480, i32 %481, i32 %482, i32 %483, i32 %691, i32 %692) #1, !dbg !36
  %779 = extractvalue { i32, i32, i32, i32 } %778, 0, !dbg !36
  %780 = extractvalue { i32, i32, i32, i32 } %778, 1, !dbg !36
  %781 = extractvalue { i32, i32, i32, i32 } %778, 2, !dbg !36
  %782 = extractvalue { i32, i32, i32, i32 } %778, 3, !dbg !36
  %783 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %373, i32 %374, i32 %375, i32 %376, i32 %512, i32 %513, i32 %514, i32 %515, i32 %579, i32 %580) #1, !dbg !36
  %784 = extractvalue { i32, i32, i32, i32 } %783, 0, !dbg !36
  %785 = extractvalue { i32, i32, i32, i32 } %783, 1, !dbg !36
  %786 = extractvalue { i32, i32, i32, i32 } %783, 2, !dbg !36
  %787 = extractvalue { i32, i32, i32, i32 } %783, 3, !dbg !36
  %788 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %377, i32 %378, i32 %379, i32 %380, i32 %512, i32 %513, i32 %514, i32 %515, i32 %595, i32 %596) #1, !dbg !36
  %789 = extractvalue { i32, i32, i32, i32 } %788, 0, !dbg !36
  %790 = extractvalue { i32, i32, i32, i32 } %788, 1, !dbg !36
  %791 = extractvalue { i32, i32, i32, i32 } %788, 2, !dbg !36
  %792 = extractvalue { i32, i32, i32, i32 } %788, 3, !dbg !36
  %793 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %381, i32 %382, i32 %383, i32 %384, i32 %512, i32 %513, i32 %514, i32 %515, i32 %611, i32 %612) #1, !dbg !36
  %794 = extractvalue { i32, i32, i32, i32 } %793, 0, !dbg !36
  %795 = extractvalue { i32, i32, i32, i32 } %793, 1, !dbg !36
  %796 = extractvalue { i32, i32, i32, i32 } %793, 2, !dbg !36
  %797 = extractvalue { i32, i32, i32, i32 } %793, 3, !dbg !36
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %385, i32 %386, i32 %387, i32 %388, i32 %512, i32 %513, i32 %514, i32 %515, i32 %627, i32 %628) #1, !dbg !36
  %799 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !36
  %800 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !36
  %801 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !36
  %802 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !36
  %803 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %389, i32 %390, i32 %391, i32 %392, i32 %512, i32 %513, i32 %514, i32 %515, i32 %643, i32 %644) #1, !dbg !36
  %804 = extractvalue { i32, i32, i32, i32 } %803, 0, !dbg !36
  %805 = extractvalue { i32, i32, i32, i32 } %803, 1, !dbg !36
  %806 = extractvalue { i32, i32, i32, i32 } %803, 2, !dbg !36
  %807 = extractvalue { i32, i32, i32, i32 } %803, 3, !dbg !36
  %808 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %393, i32 %394, i32 %395, i32 %396, i32 %512, i32 %513, i32 %514, i32 %515, i32 %659, i32 %660) #1, !dbg !36
  %809 = extractvalue { i32, i32, i32, i32 } %808, 0, !dbg !36
  %810 = extractvalue { i32, i32, i32, i32 } %808, 1, !dbg !36
  %811 = extractvalue { i32, i32, i32, i32 } %808, 2, !dbg !36
  %812 = extractvalue { i32, i32, i32, i32 } %808, 3, !dbg !36
  %813 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %397, i32 %398, i32 %399, i32 %400, i32 %512, i32 %513, i32 %514, i32 %515, i32 %675, i32 %676) #1, !dbg !36
  %814 = extractvalue { i32, i32, i32, i32 } %813, 0, !dbg !36
  %815 = extractvalue { i32, i32, i32, i32 } %813, 1, !dbg !36
  %816 = extractvalue { i32, i32, i32, i32 } %813, 2, !dbg !36
  %817 = extractvalue { i32, i32, i32, i32 } %813, 3, !dbg !36
  %818 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %401, i32 %402, i32 %403, i32 %404, i32 %512, i32 %513, i32 %514, i32 %515, i32 %691, i32 %692) #1, !dbg !36
  %819 = extractvalue { i32, i32, i32, i32 } %818, 0, !dbg !36
  %820 = extractvalue { i32, i32, i32, i32 } %818, 1, !dbg !36
  %821 = extractvalue { i32, i32, i32, i32 } %818, 2, !dbg !36
  %822 = extractvalue { i32, i32, i32, i32 } %818, 3, !dbg !36
  %823 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %405, i32 %406, i32 %407, i32 %408, i32 %544, i32 %545, i32 %546, i32 %547, i32 %579, i32 %580) #1, !dbg !36
  %824 = extractvalue { i32, i32, i32, i32 } %823, 0, !dbg !36
  %825 = extractvalue { i32, i32, i32, i32 } %823, 1, !dbg !36
  %826 = extractvalue { i32, i32, i32, i32 } %823, 2, !dbg !36
  %827 = extractvalue { i32, i32, i32, i32 } %823, 3, !dbg !36
  %828 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %409, i32 %410, i32 %411, i32 %412, i32 %544, i32 %545, i32 %546, i32 %547, i32 %595, i32 %596) #1, !dbg !36
  %829 = extractvalue { i32, i32, i32, i32 } %828, 0, !dbg !36
  %830 = extractvalue { i32, i32, i32, i32 } %828, 1, !dbg !36
  %831 = extractvalue { i32, i32, i32, i32 } %828, 2, !dbg !36
  %832 = extractvalue { i32, i32, i32, i32 } %828, 3, !dbg !36
  %833 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %413, i32 %414, i32 %415, i32 %416, i32 %544, i32 %545, i32 %546, i32 %547, i32 %611, i32 %612) #1, !dbg !36
  %834 = extractvalue { i32, i32, i32, i32 } %833, 0, !dbg !36
  %835 = extractvalue { i32, i32, i32, i32 } %833, 1, !dbg !36
  %836 = extractvalue { i32, i32, i32, i32 } %833, 2, !dbg !36
  %837 = extractvalue { i32, i32, i32, i32 } %833, 3, !dbg !36
  %838 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %417, i32 %418, i32 %419, i32 %420, i32 %544, i32 %545, i32 %546, i32 %547, i32 %627, i32 %628) #1, !dbg !36
  %839 = extractvalue { i32, i32, i32, i32 } %838, 0, !dbg !36
  %840 = extractvalue { i32, i32, i32, i32 } %838, 1, !dbg !36
  %841 = extractvalue { i32, i32, i32, i32 } %838, 2, !dbg !36
  %842 = extractvalue { i32, i32, i32, i32 } %838, 3, !dbg !36
  %843 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %421, i32 %422, i32 %423, i32 %424, i32 %544, i32 %545, i32 %546, i32 %547, i32 %643, i32 %644) #1, !dbg !36
  %844 = extractvalue { i32, i32, i32, i32 } %843, 0, !dbg !36
  %845 = extractvalue { i32, i32, i32, i32 } %843, 1, !dbg !36
  %846 = extractvalue { i32, i32, i32, i32 } %843, 2, !dbg !36
  %847 = extractvalue { i32, i32, i32, i32 } %843, 3, !dbg !36
  %848 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %425, i32 %426, i32 %427, i32 %428, i32 %544, i32 %545, i32 %546, i32 %547, i32 %659, i32 %660) #1, !dbg !36
  %849 = extractvalue { i32, i32, i32, i32 } %848, 0, !dbg !36
  %850 = extractvalue { i32, i32, i32, i32 } %848, 1, !dbg !36
  %851 = extractvalue { i32, i32, i32, i32 } %848, 2, !dbg !36
  %852 = extractvalue { i32, i32, i32, i32 } %848, 3, !dbg !36
  %853 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %429, i32 %430, i32 %431, i32 %432, i32 %544, i32 %545, i32 %546, i32 %547, i32 %675, i32 %676) #1, !dbg !36
  %854 = extractvalue { i32, i32, i32, i32 } %853, 0, !dbg !36
  %855 = extractvalue { i32, i32, i32, i32 } %853, 1, !dbg !36
  %856 = extractvalue { i32, i32, i32, i32 } %853, 2, !dbg !36
  %857 = extractvalue { i32, i32, i32, i32 } %853, 3, !dbg !36
  %858 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %433, i32 %434, i32 %435, i32 %436, i32 %544, i32 %545, i32 %546, i32 %547, i32 %691, i32 %692) #1, !dbg !36
  %859 = extractvalue { i32, i32, i32, i32 } %858, 0, !dbg !36
  %860 = extractvalue { i32, i32, i32, i32 } %858, 1, !dbg !36
  %861 = extractvalue { i32, i32, i32, i32 } %858, 2, !dbg !36
  %862 = extractvalue { i32, i32, i32, i32 } %858, 3, !dbg !36
  %863 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %704, i32 %705, i32 %706, i32 %707, i32 %456, i32 %457, i32 %458, i32 %459, i32 %581, i32 %582) #1, !dbg !36
  %864 = extractvalue { i32, i32, i32, i32 } %863, 0, !dbg !36
  %865 = extractvalue { i32, i32, i32, i32 } %863, 1, !dbg !36
  %866 = extractvalue { i32, i32, i32, i32 } %863, 2, !dbg !36
  %867 = extractvalue { i32, i32, i32, i32 } %863, 3, !dbg !36
  %868 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %709, i32 %710, i32 %711, i32 %712, i32 %456, i32 %457, i32 %458, i32 %459, i32 %597, i32 %598) #1, !dbg !36
  %869 = extractvalue { i32, i32, i32, i32 } %868, 0, !dbg !36
  %870 = extractvalue { i32, i32, i32, i32 } %868, 1, !dbg !36
  %871 = extractvalue { i32, i32, i32, i32 } %868, 2, !dbg !36
  %872 = extractvalue { i32, i32, i32, i32 } %868, 3, !dbg !36
  %873 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %714, i32 %715, i32 %716, i32 %717, i32 %456, i32 %457, i32 %458, i32 %459, i32 %613, i32 %614) #1, !dbg !36
  %874 = extractvalue { i32, i32, i32, i32 } %873, 0, !dbg !36
  %875 = extractvalue { i32, i32, i32, i32 } %873, 1, !dbg !36
  %876 = extractvalue { i32, i32, i32, i32 } %873, 2, !dbg !36
  %877 = extractvalue { i32, i32, i32, i32 } %873, 3, !dbg !36
  %878 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %719, i32 %720, i32 %721, i32 %722, i32 %456, i32 %457, i32 %458, i32 %459, i32 %629, i32 %630) #1, !dbg !36
  %879 = extractvalue { i32, i32, i32, i32 } %878, 0, !dbg !36
  %880 = extractvalue { i32, i32, i32, i32 } %878, 1, !dbg !36
  %881 = extractvalue { i32, i32, i32, i32 } %878, 2, !dbg !36
  %882 = extractvalue { i32, i32, i32, i32 } %878, 3, !dbg !36
  %883 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %724, i32 %725, i32 %726, i32 %727, i32 %456, i32 %457, i32 %458, i32 %459, i32 %645, i32 %646) #1, !dbg !36
  %884 = extractvalue { i32, i32, i32, i32 } %883, 0, !dbg !36
  %885 = extractvalue { i32, i32, i32, i32 } %883, 1, !dbg !36
  %886 = extractvalue { i32, i32, i32, i32 } %883, 2, !dbg !36
  %887 = extractvalue { i32, i32, i32, i32 } %883, 3, !dbg !36
  %888 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %729, i32 %730, i32 %731, i32 %732, i32 %456, i32 %457, i32 %458, i32 %459, i32 %661, i32 %662) #1, !dbg !36
  %889 = extractvalue { i32, i32, i32, i32 } %888, 0, !dbg !36
  %890 = extractvalue { i32, i32, i32, i32 } %888, 1, !dbg !36
  %891 = extractvalue { i32, i32, i32, i32 } %888, 2, !dbg !36
  %892 = extractvalue { i32, i32, i32, i32 } %888, 3, !dbg !36
  %893 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %734, i32 %735, i32 %736, i32 %737, i32 %456, i32 %457, i32 %458, i32 %459, i32 %677, i32 %678) #1, !dbg !36
  %894 = extractvalue { i32, i32, i32, i32 } %893, 0, !dbg !36
  %895 = extractvalue { i32, i32, i32, i32 } %893, 1, !dbg !36
  %896 = extractvalue { i32, i32, i32, i32 } %893, 2, !dbg !36
  %897 = extractvalue { i32, i32, i32, i32 } %893, 3, !dbg !36
  %898 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %739, i32 %740, i32 %741, i32 %742, i32 %456, i32 %457, i32 %458, i32 %459, i32 %693, i32 %694) #1, !dbg !36
  %899 = extractvalue { i32, i32, i32, i32 } %898, 0, !dbg !36
  %900 = extractvalue { i32, i32, i32, i32 } %898, 1, !dbg !36
  %901 = extractvalue { i32, i32, i32, i32 } %898, 2, !dbg !36
  %902 = extractvalue { i32, i32, i32, i32 } %898, 3, !dbg !36
  %903 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %744, i32 %745, i32 %746, i32 %747, i32 %488, i32 %489, i32 %490, i32 %491, i32 %581, i32 %582) #1, !dbg !36
  %904 = extractvalue { i32, i32, i32, i32 } %903, 0, !dbg !36
  %905 = extractvalue { i32, i32, i32, i32 } %903, 1, !dbg !36
  %906 = extractvalue { i32, i32, i32, i32 } %903, 2, !dbg !36
  %907 = extractvalue { i32, i32, i32, i32 } %903, 3, !dbg !36
  %908 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %749, i32 %750, i32 %751, i32 %752, i32 %488, i32 %489, i32 %490, i32 %491, i32 %597, i32 %598) #1, !dbg !36
  %909 = extractvalue { i32, i32, i32, i32 } %908, 0, !dbg !36
  %910 = extractvalue { i32, i32, i32, i32 } %908, 1, !dbg !36
  %911 = extractvalue { i32, i32, i32, i32 } %908, 2, !dbg !36
  %912 = extractvalue { i32, i32, i32, i32 } %908, 3, !dbg !36
  %913 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %754, i32 %755, i32 %756, i32 %757, i32 %488, i32 %489, i32 %490, i32 %491, i32 %613, i32 %614) #1, !dbg !36
  %914 = extractvalue { i32, i32, i32, i32 } %913, 0, !dbg !36
  %915 = extractvalue { i32, i32, i32, i32 } %913, 1, !dbg !36
  %916 = extractvalue { i32, i32, i32, i32 } %913, 2, !dbg !36
  %917 = extractvalue { i32, i32, i32, i32 } %913, 3, !dbg !36
  %918 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %759, i32 %760, i32 %761, i32 %762, i32 %488, i32 %489, i32 %490, i32 %491, i32 %629, i32 %630) #1, !dbg !36
  %919 = extractvalue { i32, i32, i32, i32 } %918, 0, !dbg !36
  %920 = extractvalue { i32, i32, i32, i32 } %918, 1, !dbg !36
  %921 = extractvalue { i32, i32, i32, i32 } %918, 2, !dbg !36
  %922 = extractvalue { i32, i32, i32, i32 } %918, 3, !dbg !36
  %923 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %764, i32 %765, i32 %766, i32 %767, i32 %488, i32 %489, i32 %490, i32 %491, i32 %645, i32 %646) #1, !dbg !36
  %924 = extractvalue { i32, i32, i32, i32 } %923, 0, !dbg !36
  %925 = extractvalue { i32, i32, i32, i32 } %923, 1, !dbg !36
  %926 = extractvalue { i32, i32, i32, i32 } %923, 2, !dbg !36
  %927 = extractvalue { i32, i32, i32, i32 } %923, 3, !dbg !36
  %928 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %769, i32 %770, i32 %771, i32 %772, i32 %488, i32 %489, i32 %490, i32 %491, i32 %661, i32 %662) #1, !dbg !36
  %929 = extractvalue { i32, i32, i32, i32 } %928, 0, !dbg !36
  %930 = extractvalue { i32, i32, i32, i32 } %928, 1, !dbg !36
  %931 = extractvalue { i32, i32, i32, i32 } %928, 2, !dbg !36
  %932 = extractvalue { i32, i32, i32, i32 } %928, 3, !dbg !36
  %933 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %774, i32 %775, i32 %776, i32 %777, i32 %488, i32 %489, i32 %490, i32 %491, i32 %677, i32 %678) #1, !dbg !36
  %934 = extractvalue { i32, i32, i32, i32 } %933, 0, !dbg !36
  %935 = extractvalue { i32, i32, i32, i32 } %933, 1, !dbg !36
  %936 = extractvalue { i32, i32, i32, i32 } %933, 2, !dbg !36
  %937 = extractvalue { i32, i32, i32, i32 } %933, 3, !dbg !36
  %938 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %779, i32 %780, i32 %781, i32 %782, i32 %488, i32 %489, i32 %490, i32 %491, i32 %693, i32 %694) #1, !dbg !36
  %939 = extractvalue { i32, i32, i32, i32 } %938, 0, !dbg !36
  %940 = extractvalue { i32, i32, i32, i32 } %938, 1, !dbg !36
  %941 = extractvalue { i32, i32, i32, i32 } %938, 2, !dbg !36
  %942 = extractvalue { i32, i32, i32, i32 } %938, 3, !dbg !36
  %943 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %784, i32 %785, i32 %786, i32 %787, i32 %520, i32 %521, i32 %522, i32 %523, i32 %581, i32 %582) #1, !dbg !36
  %944 = extractvalue { i32, i32, i32, i32 } %943, 0, !dbg !36
  %945 = extractvalue { i32, i32, i32, i32 } %943, 1, !dbg !36
  %946 = extractvalue { i32, i32, i32, i32 } %943, 2, !dbg !36
  %947 = extractvalue { i32, i32, i32, i32 } %943, 3, !dbg !36
  %948 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %789, i32 %790, i32 %791, i32 %792, i32 %520, i32 %521, i32 %522, i32 %523, i32 %597, i32 %598) #1, !dbg !36
  %949 = extractvalue { i32, i32, i32, i32 } %948, 0, !dbg !36
  %950 = extractvalue { i32, i32, i32, i32 } %948, 1, !dbg !36
  %951 = extractvalue { i32, i32, i32, i32 } %948, 2, !dbg !36
  %952 = extractvalue { i32, i32, i32, i32 } %948, 3, !dbg !36
  %953 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %794, i32 %795, i32 %796, i32 %797, i32 %520, i32 %521, i32 %522, i32 %523, i32 %613, i32 %614) #1, !dbg !36
  %954 = extractvalue { i32, i32, i32, i32 } %953, 0, !dbg !36
  %955 = extractvalue { i32, i32, i32, i32 } %953, 1, !dbg !36
  %956 = extractvalue { i32, i32, i32, i32 } %953, 2, !dbg !36
  %957 = extractvalue { i32, i32, i32, i32 } %953, 3, !dbg !36
  %958 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %799, i32 %800, i32 %801, i32 %802, i32 %520, i32 %521, i32 %522, i32 %523, i32 %629, i32 %630) #1, !dbg !36
  %959 = extractvalue { i32, i32, i32, i32 } %958, 0, !dbg !36
  %960 = extractvalue { i32, i32, i32, i32 } %958, 1, !dbg !36
  %961 = extractvalue { i32, i32, i32, i32 } %958, 2, !dbg !36
  %962 = extractvalue { i32, i32, i32, i32 } %958, 3, !dbg !36
  %963 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %804, i32 %805, i32 %806, i32 %807, i32 %520, i32 %521, i32 %522, i32 %523, i32 %645, i32 %646) #1, !dbg !36
  %964 = extractvalue { i32, i32, i32, i32 } %963, 0, !dbg !36
  %965 = extractvalue { i32, i32, i32, i32 } %963, 1, !dbg !36
  %966 = extractvalue { i32, i32, i32, i32 } %963, 2, !dbg !36
  %967 = extractvalue { i32, i32, i32, i32 } %963, 3, !dbg !36
  %968 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %809, i32 %810, i32 %811, i32 %812, i32 %520, i32 %521, i32 %522, i32 %523, i32 %661, i32 %662) #1, !dbg !36
  %969 = extractvalue { i32, i32, i32, i32 } %968, 0, !dbg !36
  %970 = extractvalue { i32, i32, i32, i32 } %968, 1, !dbg !36
  %971 = extractvalue { i32, i32, i32, i32 } %968, 2, !dbg !36
  %972 = extractvalue { i32, i32, i32, i32 } %968, 3, !dbg !36
  %973 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %814, i32 %815, i32 %816, i32 %817, i32 %520, i32 %521, i32 %522, i32 %523, i32 %677, i32 %678) #1, !dbg !36
  %974 = extractvalue { i32, i32, i32, i32 } %973, 0, !dbg !36
  %975 = extractvalue { i32, i32, i32, i32 } %973, 1, !dbg !36
  %976 = extractvalue { i32, i32, i32, i32 } %973, 2, !dbg !36
  %977 = extractvalue { i32, i32, i32, i32 } %973, 3, !dbg !36
  %978 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %819, i32 %820, i32 %821, i32 %822, i32 %520, i32 %521, i32 %522, i32 %523, i32 %693, i32 %694) #1, !dbg !36
  %979 = extractvalue { i32, i32, i32, i32 } %978, 0, !dbg !36
  %980 = extractvalue { i32, i32, i32, i32 } %978, 1, !dbg !36
  %981 = extractvalue { i32, i32, i32, i32 } %978, 2, !dbg !36
  %982 = extractvalue { i32, i32, i32, i32 } %978, 3, !dbg !36
  %983 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %824, i32 %825, i32 %826, i32 %827, i32 %552, i32 %553, i32 %554, i32 %555, i32 %581, i32 %582) #1, !dbg !36
  %984 = extractvalue { i32, i32, i32, i32 } %983, 0, !dbg !36
  %985 = extractvalue { i32, i32, i32, i32 } %983, 1, !dbg !36
  %986 = extractvalue { i32, i32, i32, i32 } %983, 2, !dbg !36
  %987 = extractvalue { i32, i32, i32, i32 } %983, 3, !dbg !36
  %988 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %829, i32 %830, i32 %831, i32 %832, i32 %552, i32 %553, i32 %554, i32 %555, i32 %597, i32 %598) #1, !dbg !36
  %989 = extractvalue { i32, i32, i32, i32 } %988, 0, !dbg !36
  %990 = extractvalue { i32, i32, i32, i32 } %988, 1, !dbg !36
  %991 = extractvalue { i32, i32, i32, i32 } %988, 2, !dbg !36
  %992 = extractvalue { i32, i32, i32, i32 } %988, 3, !dbg !36
  %993 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %834, i32 %835, i32 %836, i32 %837, i32 %552, i32 %553, i32 %554, i32 %555, i32 %613, i32 %614) #1, !dbg !36
  %994 = extractvalue { i32, i32, i32, i32 } %993, 0, !dbg !36
  %995 = extractvalue { i32, i32, i32, i32 } %993, 1, !dbg !36
  %996 = extractvalue { i32, i32, i32, i32 } %993, 2, !dbg !36
  %997 = extractvalue { i32, i32, i32, i32 } %993, 3, !dbg !36
  %998 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %839, i32 %840, i32 %841, i32 %842, i32 %552, i32 %553, i32 %554, i32 %555, i32 %629, i32 %630) #1, !dbg !36
  %999 = extractvalue { i32, i32, i32, i32 } %998, 0, !dbg !36
  %1000 = extractvalue { i32, i32, i32, i32 } %998, 1, !dbg !36
  %1001 = extractvalue { i32, i32, i32, i32 } %998, 2, !dbg !36
  %1002 = extractvalue { i32, i32, i32, i32 } %998, 3, !dbg !36
  %1003 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %844, i32 %845, i32 %846, i32 %847, i32 %552, i32 %553, i32 %554, i32 %555, i32 %645, i32 %646) #1, !dbg !36
  %1004 = extractvalue { i32, i32, i32, i32 } %1003, 0, !dbg !36
  %1005 = extractvalue { i32, i32, i32, i32 } %1003, 1, !dbg !36
  %1006 = extractvalue { i32, i32, i32, i32 } %1003, 2, !dbg !36
  %1007 = extractvalue { i32, i32, i32, i32 } %1003, 3, !dbg !36
  %1008 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %849, i32 %850, i32 %851, i32 %852, i32 %552, i32 %553, i32 %554, i32 %555, i32 %661, i32 %662) #1, !dbg !36
  %1009 = extractvalue { i32, i32, i32, i32 } %1008, 0, !dbg !36
  %1010 = extractvalue { i32, i32, i32, i32 } %1008, 1, !dbg !36
  %1011 = extractvalue { i32, i32, i32, i32 } %1008, 2, !dbg !36
  %1012 = extractvalue { i32, i32, i32, i32 } %1008, 3, !dbg !36
  %1013 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %854, i32 %855, i32 %856, i32 %857, i32 %552, i32 %553, i32 %554, i32 %555, i32 %677, i32 %678) #1, !dbg !36
  %1014 = extractvalue { i32, i32, i32, i32 } %1013, 0, !dbg !36
  %1015 = extractvalue { i32, i32, i32, i32 } %1013, 1, !dbg !36
  %1016 = extractvalue { i32, i32, i32, i32 } %1013, 2, !dbg !36
  %1017 = extractvalue { i32, i32, i32, i32 } %1013, 3, !dbg !36
  %1018 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %859, i32 %860, i32 %861, i32 %862, i32 %552, i32 %553, i32 %554, i32 %555, i32 %693, i32 %694) #1, !dbg !36
  %1019 = extractvalue { i32, i32, i32, i32 } %1018, 0, !dbg !36
  %1020 = extractvalue { i32, i32, i32, i32 } %1018, 1, !dbg !36
  %1021 = extractvalue { i32, i32, i32, i32 } %1018, 2, !dbg !36
  %1022 = extractvalue { i32, i32, i32, i32 } %1018, 3, !dbg !36
  %1023 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %864, i32 %865, i32 %866, i32 %867, i32 %464, i32 %465, i32 %466, i32 %467, i32 %587, i32 %588) #1, !dbg !36
  %1024 = extractvalue { i32, i32, i32, i32 } %1023, 0, !dbg !36
  %1025 = extractvalue { i32, i32, i32, i32 } %1023, 1, !dbg !36
  %1026 = extractvalue { i32, i32, i32, i32 } %1023, 2, !dbg !36
  %1027 = extractvalue { i32, i32, i32, i32 } %1023, 3, !dbg !36
  %1028 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %869, i32 %870, i32 %871, i32 %872, i32 %464, i32 %465, i32 %466, i32 %467, i32 %603, i32 %604) #1, !dbg !36
  %1029 = extractvalue { i32, i32, i32, i32 } %1028, 0, !dbg !36
  %1030 = extractvalue { i32, i32, i32, i32 } %1028, 1, !dbg !36
  %1031 = extractvalue { i32, i32, i32, i32 } %1028, 2, !dbg !36
  %1032 = extractvalue { i32, i32, i32, i32 } %1028, 3, !dbg !36
  %1033 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %874, i32 %875, i32 %876, i32 %877, i32 %464, i32 %465, i32 %466, i32 %467, i32 %619, i32 %620) #1, !dbg !36
  %1034 = extractvalue { i32, i32, i32, i32 } %1033, 0, !dbg !36
  %1035 = extractvalue { i32, i32, i32, i32 } %1033, 1, !dbg !36
  %1036 = extractvalue { i32, i32, i32, i32 } %1033, 2, !dbg !36
  %1037 = extractvalue { i32, i32, i32, i32 } %1033, 3, !dbg !36
  %1038 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %879, i32 %880, i32 %881, i32 %882, i32 %464, i32 %465, i32 %466, i32 %467, i32 %635, i32 %636) #1, !dbg !36
  %1039 = extractvalue { i32, i32, i32, i32 } %1038, 0, !dbg !36
  %1040 = extractvalue { i32, i32, i32, i32 } %1038, 1, !dbg !36
  %1041 = extractvalue { i32, i32, i32, i32 } %1038, 2, !dbg !36
  %1042 = extractvalue { i32, i32, i32, i32 } %1038, 3, !dbg !36
  %1043 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %884, i32 %885, i32 %886, i32 %887, i32 %464, i32 %465, i32 %466, i32 %467, i32 %651, i32 %652) #1, !dbg !36
  %1044 = extractvalue { i32, i32, i32, i32 } %1043, 0, !dbg !36
  %1045 = extractvalue { i32, i32, i32, i32 } %1043, 1, !dbg !36
  %1046 = extractvalue { i32, i32, i32, i32 } %1043, 2, !dbg !36
  %1047 = extractvalue { i32, i32, i32, i32 } %1043, 3, !dbg !36
  %1048 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %889, i32 %890, i32 %891, i32 %892, i32 %464, i32 %465, i32 %466, i32 %467, i32 %667, i32 %668) #1, !dbg !36
  %1049 = extractvalue { i32, i32, i32, i32 } %1048, 0, !dbg !36
  %1050 = extractvalue { i32, i32, i32, i32 } %1048, 1, !dbg !36
  %1051 = extractvalue { i32, i32, i32, i32 } %1048, 2, !dbg !36
  %1052 = extractvalue { i32, i32, i32, i32 } %1048, 3, !dbg !36
  %1053 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %894, i32 %895, i32 %896, i32 %897, i32 %464, i32 %465, i32 %466, i32 %467, i32 %683, i32 %684) #1, !dbg !36
  %1054 = extractvalue { i32, i32, i32, i32 } %1053, 0, !dbg !36
  %1055 = extractvalue { i32, i32, i32, i32 } %1053, 1, !dbg !36
  %1056 = extractvalue { i32, i32, i32, i32 } %1053, 2, !dbg !36
  %1057 = extractvalue { i32, i32, i32, i32 } %1053, 3, !dbg !36
  %1058 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %899, i32 %900, i32 %901, i32 %902, i32 %464, i32 %465, i32 %466, i32 %467, i32 %699, i32 %700) #1, !dbg !36
  %1059 = extractvalue { i32, i32, i32, i32 } %1058, 0, !dbg !36
  %1060 = extractvalue { i32, i32, i32, i32 } %1058, 1, !dbg !36
  %1061 = extractvalue { i32, i32, i32, i32 } %1058, 2, !dbg !36
  %1062 = extractvalue { i32, i32, i32, i32 } %1058, 3, !dbg !36
  %1063 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %904, i32 %905, i32 %906, i32 %907, i32 %496, i32 %497, i32 %498, i32 %499, i32 %587, i32 %588) #1, !dbg !36
  %1064 = extractvalue { i32, i32, i32, i32 } %1063, 0, !dbg !36
  %1065 = extractvalue { i32, i32, i32, i32 } %1063, 1, !dbg !36
  %1066 = extractvalue { i32, i32, i32, i32 } %1063, 2, !dbg !36
  %1067 = extractvalue { i32, i32, i32, i32 } %1063, 3, !dbg !36
  %1068 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %909, i32 %910, i32 %911, i32 %912, i32 %496, i32 %497, i32 %498, i32 %499, i32 %603, i32 %604) #1, !dbg !36
  %1069 = extractvalue { i32, i32, i32, i32 } %1068, 0, !dbg !36
  %1070 = extractvalue { i32, i32, i32, i32 } %1068, 1, !dbg !36
  %1071 = extractvalue { i32, i32, i32, i32 } %1068, 2, !dbg !36
  %1072 = extractvalue { i32, i32, i32, i32 } %1068, 3, !dbg !36
  %1073 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %914, i32 %915, i32 %916, i32 %917, i32 %496, i32 %497, i32 %498, i32 %499, i32 %619, i32 %620) #1, !dbg !36
  %1074 = extractvalue { i32, i32, i32, i32 } %1073, 0, !dbg !36
  %1075 = extractvalue { i32, i32, i32, i32 } %1073, 1, !dbg !36
  %1076 = extractvalue { i32, i32, i32, i32 } %1073, 2, !dbg !36
  %1077 = extractvalue { i32, i32, i32, i32 } %1073, 3, !dbg !36
  %1078 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %919, i32 %920, i32 %921, i32 %922, i32 %496, i32 %497, i32 %498, i32 %499, i32 %635, i32 %636) #1, !dbg !36
  %1079 = extractvalue { i32, i32, i32, i32 } %1078, 0, !dbg !36
  %1080 = extractvalue { i32, i32, i32, i32 } %1078, 1, !dbg !36
  %1081 = extractvalue { i32, i32, i32, i32 } %1078, 2, !dbg !36
  %1082 = extractvalue { i32, i32, i32, i32 } %1078, 3, !dbg !36
  %1083 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %924, i32 %925, i32 %926, i32 %927, i32 %496, i32 %497, i32 %498, i32 %499, i32 %651, i32 %652) #1, !dbg !36
  %1084 = extractvalue { i32, i32, i32, i32 } %1083, 0, !dbg !36
  %1085 = extractvalue { i32, i32, i32, i32 } %1083, 1, !dbg !36
  %1086 = extractvalue { i32, i32, i32, i32 } %1083, 2, !dbg !36
  %1087 = extractvalue { i32, i32, i32, i32 } %1083, 3, !dbg !36
  %1088 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %929, i32 %930, i32 %931, i32 %932, i32 %496, i32 %497, i32 %498, i32 %499, i32 %667, i32 %668) #1, !dbg !36
  %1089 = extractvalue { i32, i32, i32, i32 } %1088, 0, !dbg !36
  %1090 = extractvalue { i32, i32, i32, i32 } %1088, 1, !dbg !36
  %1091 = extractvalue { i32, i32, i32, i32 } %1088, 2, !dbg !36
  %1092 = extractvalue { i32, i32, i32, i32 } %1088, 3, !dbg !36
  %1093 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %934, i32 %935, i32 %936, i32 %937, i32 %496, i32 %497, i32 %498, i32 %499, i32 %683, i32 %684) #1, !dbg !36
  %1094 = extractvalue { i32, i32, i32, i32 } %1093, 0, !dbg !36
  %1095 = extractvalue { i32, i32, i32, i32 } %1093, 1, !dbg !36
  %1096 = extractvalue { i32, i32, i32, i32 } %1093, 2, !dbg !36
  %1097 = extractvalue { i32, i32, i32, i32 } %1093, 3, !dbg !36
  %1098 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %939, i32 %940, i32 %941, i32 %942, i32 %496, i32 %497, i32 %498, i32 %499, i32 %699, i32 %700) #1, !dbg !36
  %1099 = extractvalue { i32, i32, i32, i32 } %1098, 0, !dbg !36
  %1100 = extractvalue { i32, i32, i32, i32 } %1098, 1, !dbg !36
  %1101 = extractvalue { i32, i32, i32, i32 } %1098, 2, !dbg !36
  %1102 = extractvalue { i32, i32, i32, i32 } %1098, 3, !dbg !36
  %1103 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %944, i32 %945, i32 %946, i32 %947, i32 %528, i32 %529, i32 %530, i32 %531, i32 %587, i32 %588) #1, !dbg !36
  %1104 = extractvalue { i32, i32, i32, i32 } %1103, 0, !dbg !36
  %1105 = extractvalue { i32, i32, i32, i32 } %1103, 1, !dbg !36
  %1106 = extractvalue { i32, i32, i32, i32 } %1103, 2, !dbg !36
  %1107 = extractvalue { i32, i32, i32, i32 } %1103, 3, !dbg !36
  %1108 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %949, i32 %950, i32 %951, i32 %952, i32 %528, i32 %529, i32 %530, i32 %531, i32 %603, i32 %604) #1, !dbg !36
  %1109 = extractvalue { i32, i32, i32, i32 } %1108, 0, !dbg !36
  %1110 = extractvalue { i32, i32, i32, i32 } %1108, 1, !dbg !36
  %1111 = extractvalue { i32, i32, i32, i32 } %1108, 2, !dbg !36
  %1112 = extractvalue { i32, i32, i32, i32 } %1108, 3, !dbg !36
  %1113 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %954, i32 %955, i32 %956, i32 %957, i32 %528, i32 %529, i32 %530, i32 %531, i32 %619, i32 %620) #1, !dbg !36
  %1114 = extractvalue { i32, i32, i32, i32 } %1113, 0, !dbg !36
  %1115 = extractvalue { i32, i32, i32, i32 } %1113, 1, !dbg !36
  %1116 = extractvalue { i32, i32, i32, i32 } %1113, 2, !dbg !36
  %1117 = extractvalue { i32, i32, i32, i32 } %1113, 3, !dbg !36
  %1118 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %959, i32 %960, i32 %961, i32 %962, i32 %528, i32 %529, i32 %530, i32 %531, i32 %635, i32 %636) #1, !dbg !36
  %1119 = extractvalue { i32, i32, i32, i32 } %1118, 0, !dbg !36
  %1120 = extractvalue { i32, i32, i32, i32 } %1118, 1, !dbg !36
  %1121 = extractvalue { i32, i32, i32, i32 } %1118, 2, !dbg !36
  %1122 = extractvalue { i32, i32, i32, i32 } %1118, 3, !dbg !36
  %1123 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %964, i32 %965, i32 %966, i32 %967, i32 %528, i32 %529, i32 %530, i32 %531, i32 %651, i32 %652) #1, !dbg !36
  %1124 = extractvalue { i32, i32, i32, i32 } %1123, 0, !dbg !36
  %1125 = extractvalue { i32, i32, i32, i32 } %1123, 1, !dbg !36
  %1126 = extractvalue { i32, i32, i32, i32 } %1123, 2, !dbg !36
  %1127 = extractvalue { i32, i32, i32, i32 } %1123, 3, !dbg !36
  %1128 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %969, i32 %970, i32 %971, i32 %972, i32 %528, i32 %529, i32 %530, i32 %531, i32 %667, i32 %668) #1, !dbg !36
  %1129 = extractvalue { i32, i32, i32, i32 } %1128, 0, !dbg !36
  %1130 = extractvalue { i32, i32, i32, i32 } %1128, 1, !dbg !36
  %1131 = extractvalue { i32, i32, i32, i32 } %1128, 2, !dbg !36
  %1132 = extractvalue { i32, i32, i32, i32 } %1128, 3, !dbg !36
  %1133 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %974, i32 %975, i32 %976, i32 %977, i32 %528, i32 %529, i32 %530, i32 %531, i32 %683, i32 %684) #1, !dbg !36
  %1134 = extractvalue { i32, i32, i32, i32 } %1133, 0, !dbg !36
  %1135 = extractvalue { i32, i32, i32, i32 } %1133, 1, !dbg !36
  %1136 = extractvalue { i32, i32, i32, i32 } %1133, 2, !dbg !36
  %1137 = extractvalue { i32, i32, i32, i32 } %1133, 3, !dbg !36
  %1138 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %979, i32 %980, i32 %981, i32 %982, i32 %528, i32 %529, i32 %530, i32 %531, i32 %699, i32 %700) #1, !dbg !36
  %1139 = extractvalue { i32, i32, i32, i32 } %1138, 0, !dbg !36
  %1140 = extractvalue { i32, i32, i32, i32 } %1138, 1, !dbg !36
  %1141 = extractvalue { i32, i32, i32, i32 } %1138, 2, !dbg !36
  %1142 = extractvalue { i32, i32, i32, i32 } %1138, 3, !dbg !36
  %1143 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %984, i32 %985, i32 %986, i32 %987, i32 %560, i32 %561, i32 %562, i32 %563, i32 %587, i32 %588) #1, !dbg !36
  %1144 = extractvalue { i32, i32, i32, i32 } %1143, 0, !dbg !36
  %1145 = extractvalue { i32, i32, i32, i32 } %1143, 1, !dbg !36
  %1146 = extractvalue { i32, i32, i32, i32 } %1143, 2, !dbg !36
  %1147 = extractvalue { i32, i32, i32, i32 } %1143, 3, !dbg !36
  %1148 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %989, i32 %990, i32 %991, i32 %992, i32 %560, i32 %561, i32 %562, i32 %563, i32 %603, i32 %604) #1, !dbg !36
  %1149 = extractvalue { i32, i32, i32, i32 } %1148, 0, !dbg !36
  %1150 = extractvalue { i32, i32, i32, i32 } %1148, 1, !dbg !36
  %1151 = extractvalue { i32, i32, i32, i32 } %1148, 2, !dbg !36
  %1152 = extractvalue { i32, i32, i32, i32 } %1148, 3, !dbg !36
  %1153 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %994, i32 %995, i32 %996, i32 %997, i32 %560, i32 %561, i32 %562, i32 %563, i32 %619, i32 %620) #1, !dbg !36
  %1154 = extractvalue { i32, i32, i32, i32 } %1153, 0, !dbg !36
  %1155 = extractvalue { i32, i32, i32, i32 } %1153, 1, !dbg !36
  %1156 = extractvalue { i32, i32, i32, i32 } %1153, 2, !dbg !36
  %1157 = extractvalue { i32, i32, i32, i32 } %1153, 3, !dbg !36
  %1158 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %999, i32 %1000, i32 %1001, i32 %1002, i32 %560, i32 %561, i32 %562, i32 %563, i32 %635, i32 %636) #1, !dbg !36
  %1159 = extractvalue { i32, i32, i32, i32 } %1158, 0, !dbg !36
  %1160 = extractvalue { i32, i32, i32, i32 } %1158, 1, !dbg !36
  %1161 = extractvalue { i32, i32, i32, i32 } %1158, 2, !dbg !36
  %1162 = extractvalue { i32, i32, i32, i32 } %1158, 3, !dbg !36
  %1163 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1004, i32 %1005, i32 %1006, i32 %1007, i32 %560, i32 %561, i32 %562, i32 %563, i32 %651, i32 %652) #1, !dbg !36
  %1164 = extractvalue { i32, i32, i32, i32 } %1163, 0, !dbg !36
  %1165 = extractvalue { i32, i32, i32, i32 } %1163, 1, !dbg !36
  %1166 = extractvalue { i32, i32, i32, i32 } %1163, 2, !dbg !36
  %1167 = extractvalue { i32, i32, i32, i32 } %1163, 3, !dbg !36
  %1168 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1009, i32 %1010, i32 %1011, i32 %1012, i32 %560, i32 %561, i32 %562, i32 %563, i32 %667, i32 %668) #1, !dbg !36
  %1169 = extractvalue { i32, i32, i32, i32 } %1168, 0, !dbg !36
  %1170 = extractvalue { i32, i32, i32, i32 } %1168, 1, !dbg !36
  %1171 = extractvalue { i32, i32, i32, i32 } %1168, 2, !dbg !36
  %1172 = extractvalue { i32, i32, i32, i32 } %1168, 3, !dbg !36
  %1173 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1014, i32 %1015, i32 %1016, i32 %1017, i32 %560, i32 %561, i32 %562, i32 %563, i32 %683, i32 %684) #1, !dbg !36
  %1174 = extractvalue { i32, i32, i32, i32 } %1173, 0, !dbg !36
  %1175 = extractvalue { i32, i32, i32, i32 } %1173, 1, !dbg !36
  %1176 = extractvalue { i32, i32, i32, i32 } %1173, 2, !dbg !36
  %1177 = extractvalue { i32, i32, i32, i32 } %1173, 3, !dbg !36
  %1178 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1019, i32 %1020, i32 %1021, i32 %1022, i32 %560, i32 %561, i32 %562, i32 %563, i32 %699, i32 %700) #1, !dbg !36
  %1179 = extractvalue { i32, i32, i32, i32 } %1178, 0, !dbg !36
  %1180 = extractvalue { i32, i32, i32, i32 } %1178, 1, !dbg !36
  %1181 = extractvalue { i32, i32, i32, i32 } %1178, 2, !dbg !36
  %1182 = extractvalue { i32, i32, i32, i32 } %1178, 3, !dbg !36
  %1183 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1024, i32 %1025, i32 %1026, i32 %1027, i32 %472, i32 %473, i32 %474, i32 %475, i32 %589, i32 %590) #1, !dbg !36
  %1184 = extractvalue { i32, i32, i32, i32 } %1183, 0, !dbg !36
  %1185 = extractvalue { i32, i32, i32, i32 } %1183, 1, !dbg !36
  %1186 = extractvalue { i32, i32, i32, i32 } %1183, 2, !dbg !36
  %1187 = extractvalue { i32, i32, i32, i32 } %1183, 3, !dbg !36
  %1188 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %472, i32 %473, i32 %474, i32 %475, i32 %605, i32 %606) #1, !dbg !36
  %1189 = extractvalue { i32, i32, i32, i32 } %1188, 0, !dbg !36
  %1190 = extractvalue { i32, i32, i32, i32 } %1188, 1, !dbg !36
  %1191 = extractvalue { i32, i32, i32, i32 } %1188, 2, !dbg !36
  %1192 = extractvalue { i32, i32, i32, i32 } %1188, 3, !dbg !36
  %1193 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %472, i32 %473, i32 %474, i32 %475, i32 %621, i32 %622) #1, !dbg !36
  %1194 = extractvalue { i32, i32, i32, i32 } %1193, 0, !dbg !36
  %1195 = extractvalue { i32, i32, i32, i32 } %1193, 1, !dbg !36
  %1196 = extractvalue { i32, i32, i32, i32 } %1193, 2, !dbg !36
  %1197 = extractvalue { i32, i32, i32, i32 } %1193, 3, !dbg !36
  %1198 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1039, i32 %1040, i32 %1041, i32 %1042, i32 %472, i32 %473, i32 %474, i32 %475, i32 %637, i32 %638) #1, !dbg !36
  %1199 = extractvalue { i32, i32, i32, i32 } %1198, 0, !dbg !36
  %1200 = extractvalue { i32, i32, i32, i32 } %1198, 1, !dbg !36
  %1201 = extractvalue { i32, i32, i32, i32 } %1198, 2, !dbg !36
  %1202 = extractvalue { i32, i32, i32, i32 } %1198, 3, !dbg !36
  %1203 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1044, i32 %1045, i32 %1046, i32 %1047, i32 %472, i32 %473, i32 %474, i32 %475, i32 %653, i32 %654) #1, !dbg !36
  %1204 = extractvalue { i32, i32, i32, i32 } %1203, 0, !dbg !36
  %1205 = extractvalue { i32, i32, i32, i32 } %1203, 1, !dbg !36
  %1206 = extractvalue { i32, i32, i32, i32 } %1203, 2, !dbg !36
  %1207 = extractvalue { i32, i32, i32, i32 } %1203, 3, !dbg !36
  %1208 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1049, i32 %1050, i32 %1051, i32 %1052, i32 %472, i32 %473, i32 %474, i32 %475, i32 %669, i32 %670) #1, !dbg !36
  %1209 = extractvalue { i32, i32, i32, i32 } %1208, 0, !dbg !36
  %1210 = extractvalue { i32, i32, i32, i32 } %1208, 1, !dbg !36
  %1211 = extractvalue { i32, i32, i32, i32 } %1208, 2, !dbg !36
  %1212 = extractvalue { i32, i32, i32, i32 } %1208, 3, !dbg !36
  %1213 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1054, i32 %1055, i32 %1056, i32 %1057, i32 %472, i32 %473, i32 %474, i32 %475, i32 %685, i32 %686) #1, !dbg !36
  %1214 = extractvalue { i32, i32, i32, i32 } %1213, 0, !dbg !36
  %1215 = extractvalue { i32, i32, i32, i32 } %1213, 1, !dbg !36
  %1216 = extractvalue { i32, i32, i32, i32 } %1213, 2, !dbg !36
  %1217 = extractvalue { i32, i32, i32, i32 } %1213, 3, !dbg !36
  %1218 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1059, i32 %1060, i32 %1061, i32 %1062, i32 %472, i32 %473, i32 %474, i32 %475, i32 %701, i32 %702) #1, !dbg !36
  %1219 = extractvalue { i32, i32, i32, i32 } %1218, 0, !dbg !36
  %1220 = extractvalue { i32, i32, i32, i32 } %1218, 1, !dbg !36
  %1221 = extractvalue { i32, i32, i32, i32 } %1218, 2, !dbg !36
  %1222 = extractvalue { i32, i32, i32, i32 } %1218, 3, !dbg !36
  %1223 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1064, i32 %1065, i32 %1066, i32 %1067, i32 %504, i32 %505, i32 %506, i32 %507, i32 %589, i32 %590) #1, !dbg !36
  %1224 = extractvalue { i32, i32, i32, i32 } %1223, 0, !dbg !36
  %1225 = extractvalue { i32, i32, i32, i32 } %1223, 1, !dbg !36
  %1226 = extractvalue { i32, i32, i32, i32 } %1223, 2, !dbg !36
  %1227 = extractvalue { i32, i32, i32, i32 } %1223, 3, !dbg !36
  %1228 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1069, i32 %1070, i32 %1071, i32 %1072, i32 %504, i32 %505, i32 %506, i32 %507, i32 %605, i32 %606) #1, !dbg !36
  %1229 = extractvalue { i32, i32, i32, i32 } %1228, 0, !dbg !36
  %1230 = extractvalue { i32, i32, i32, i32 } %1228, 1, !dbg !36
  %1231 = extractvalue { i32, i32, i32, i32 } %1228, 2, !dbg !36
  %1232 = extractvalue { i32, i32, i32, i32 } %1228, 3, !dbg !36
  %1233 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1074, i32 %1075, i32 %1076, i32 %1077, i32 %504, i32 %505, i32 %506, i32 %507, i32 %621, i32 %622) #1, !dbg !36
  %1234 = extractvalue { i32, i32, i32, i32 } %1233, 0, !dbg !36
  %1235 = extractvalue { i32, i32, i32, i32 } %1233, 1, !dbg !36
  %1236 = extractvalue { i32, i32, i32, i32 } %1233, 2, !dbg !36
  %1237 = extractvalue { i32, i32, i32, i32 } %1233, 3, !dbg !36
  %1238 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1079, i32 %1080, i32 %1081, i32 %1082, i32 %504, i32 %505, i32 %506, i32 %507, i32 %637, i32 %638) #1, !dbg !36
  %1239 = extractvalue { i32, i32, i32, i32 } %1238, 0, !dbg !36
  %1240 = extractvalue { i32, i32, i32, i32 } %1238, 1, !dbg !36
  %1241 = extractvalue { i32, i32, i32, i32 } %1238, 2, !dbg !36
  %1242 = extractvalue { i32, i32, i32, i32 } %1238, 3, !dbg !36
  %1243 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1084, i32 %1085, i32 %1086, i32 %1087, i32 %504, i32 %505, i32 %506, i32 %507, i32 %653, i32 %654) #1, !dbg !36
  %1244 = extractvalue { i32, i32, i32, i32 } %1243, 0, !dbg !36
  %1245 = extractvalue { i32, i32, i32, i32 } %1243, 1, !dbg !36
  %1246 = extractvalue { i32, i32, i32, i32 } %1243, 2, !dbg !36
  %1247 = extractvalue { i32, i32, i32, i32 } %1243, 3, !dbg !36
  %1248 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1089, i32 %1090, i32 %1091, i32 %1092, i32 %504, i32 %505, i32 %506, i32 %507, i32 %669, i32 %670) #1, !dbg !36
  %1249 = extractvalue { i32, i32, i32, i32 } %1248, 0, !dbg !36
  %1250 = extractvalue { i32, i32, i32, i32 } %1248, 1, !dbg !36
  %1251 = extractvalue { i32, i32, i32, i32 } %1248, 2, !dbg !36
  %1252 = extractvalue { i32, i32, i32, i32 } %1248, 3, !dbg !36
  %1253 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1094, i32 %1095, i32 %1096, i32 %1097, i32 %504, i32 %505, i32 %506, i32 %507, i32 %685, i32 %686) #1, !dbg !36
  %1254 = extractvalue { i32, i32, i32, i32 } %1253, 0, !dbg !36
  %1255 = extractvalue { i32, i32, i32, i32 } %1253, 1, !dbg !36
  %1256 = extractvalue { i32, i32, i32, i32 } %1253, 2, !dbg !36
  %1257 = extractvalue { i32, i32, i32, i32 } %1253, 3, !dbg !36
  %1258 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1099, i32 %1100, i32 %1101, i32 %1102, i32 %504, i32 %505, i32 %506, i32 %507, i32 %701, i32 %702) #1, !dbg !36
  %1259 = extractvalue { i32, i32, i32, i32 } %1258, 0, !dbg !36
  %1260 = extractvalue { i32, i32, i32, i32 } %1258, 1, !dbg !36
  %1261 = extractvalue { i32, i32, i32, i32 } %1258, 2, !dbg !36
  %1262 = extractvalue { i32, i32, i32, i32 } %1258, 3, !dbg !36
  %1263 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1104, i32 %1105, i32 %1106, i32 %1107, i32 %536, i32 %537, i32 %538, i32 %539, i32 %589, i32 %590) #1, !dbg !36
  %1264 = extractvalue { i32, i32, i32, i32 } %1263, 0, !dbg !36
  %1265 = extractvalue { i32, i32, i32, i32 } %1263, 1, !dbg !36
  %1266 = extractvalue { i32, i32, i32, i32 } %1263, 2, !dbg !36
  %1267 = extractvalue { i32, i32, i32, i32 } %1263, 3, !dbg !36
  %1268 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1109, i32 %1110, i32 %1111, i32 %1112, i32 %536, i32 %537, i32 %538, i32 %539, i32 %605, i32 %606) #1, !dbg !36
  %1269 = extractvalue { i32, i32, i32, i32 } %1268, 0, !dbg !36
  %1270 = extractvalue { i32, i32, i32, i32 } %1268, 1, !dbg !36
  %1271 = extractvalue { i32, i32, i32, i32 } %1268, 2, !dbg !36
  %1272 = extractvalue { i32, i32, i32, i32 } %1268, 3, !dbg !36
  %1273 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1114, i32 %1115, i32 %1116, i32 %1117, i32 %536, i32 %537, i32 %538, i32 %539, i32 %621, i32 %622) #1, !dbg !36
  %1274 = extractvalue { i32, i32, i32, i32 } %1273, 0, !dbg !36
  %1275 = extractvalue { i32, i32, i32, i32 } %1273, 1, !dbg !36
  %1276 = extractvalue { i32, i32, i32, i32 } %1273, 2, !dbg !36
  %1277 = extractvalue { i32, i32, i32, i32 } %1273, 3, !dbg !36
  %1278 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1119, i32 %1120, i32 %1121, i32 %1122, i32 %536, i32 %537, i32 %538, i32 %539, i32 %637, i32 %638) #1, !dbg !36
  %1279 = extractvalue { i32, i32, i32, i32 } %1278, 0, !dbg !36
  %1280 = extractvalue { i32, i32, i32, i32 } %1278, 1, !dbg !36
  %1281 = extractvalue { i32, i32, i32, i32 } %1278, 2, !dbg !36
  %1282 = extractvalue { i32, i32, i32, i32 } %1278, 3, !dbg !36
  %1283 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1124, i32 %1125, i32 %1126, i32 %1127, i32 %536, i32 %537, i32 %538, i32 %539, i32 %653, i32 %654) #1, !dbg !36
  %1284 = extractvalue { i32, i32, i32, i32 } %1283, 0, !dbg !36
  %1285 = extractvalue { i32, i32, i32, i32 } %1283, 1, !dbg !36
  %1286 = extractvalue { i32, i32, i32, i32 } %1283, 2, !dbg !36
  %1287 = extractvalue { i32, i32, i32, i32 } %1283, 3, !dbg !36
  %1288 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1129, i32 %1130, i32 %1131, i32 %1132, i32 %536, i32 %537, i32 %538, i32 %539, i32 %669, i32 %670) #1, !dbg !36
  %1289 = extractvalue { i32, i32, i32, i32 } %1288, 0, !dbg !36
  %1290 = extractvalue { i32, i32, i32, i32 } %1288, 1, !dbg !36
  %1291 = extractvalue { i32, i32, i32, i32 } %1288, 2, !dbg !36
  %1292 = extractvalue { i32, i32, i32, i32 } %1288, 3, !dbg !36
  %1293 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1134, i32 %1135, i32 %1136, i32 %1137, i32 %536, i32 %537, i32 %538, i32 %539, i32 %685, i32 %686) #1, !dbg !36
  %1294 = extractvalue { i32, i32, i32, i32 } %1293, 0, !dbg !36
  %1295 = extractvalue { i32, i32, i32, i32 } %1293, 1, !dbg !36
  %1296 = extractvalue { i32, i32, i32, i32 } %1293, 2, !dbg !36
  %1297 = extractvalue { i32, i32, i32, i32 } %1293, 3, !dbg !36
  %1298 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1139, i32 %1140, i32 %1141, i32 %1142, i32 %536, i32 %537, i32 %538, i32 %539, i32 %701, i32 %702) #1, !dbg !36
  %1299 = extractvalue { i32, i32, i32, i32 } %1298, 0, !dbg !36
  %1300 = extractvalue { i32, i32, i32, i32 } %1298, 1, !dbg !36
  %1301 = extractvalue { i32, i32, i32, i32 } %1298, 2, !dbg !36
  %1302 = extractvalue { i32, i32, i32, i32 } %1298, 3, !dbg !36
  %1303 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1144, i32 %1145, i32 %1146, i32 %1147, i32 %568, i32 %569, i32 %570, i32 %571, i32 %589, i32 %590) #1, !dbg !36
  %1304 = extractvalue { i32, i32, i32, i32 } %1303, 0, !dbg !36
  %1305 = extractvalue { i32, i32, i32, i32 } %1303, 1, !dbg !36
  %1306 = extractvalue { i32, i32, i32, i32 } %1303, 2, !dbg !36
  %1307 = extractvalue { i32, i32, i32, i32 } %1303, 3, !dbg !36
  %1308 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1149, i32 %1150, i32 %1151, i32 %1152, i32 %568, i32 %569, i32 %570, i32 %571, i32 %605, i32 %606) #1, !dbg !36
  %1309 = extractvalue { i32, i32, i32, i32 } %1308, 0, !dbg !36
  %1310 = extractvalue { i32, i32, i32, i32 } %1308, 1, !dbg !36
  %1311 = extractvalue { i32, i32, i32, i32 } %1308, 2, !dbg !36
  %1312 = extractvalue { i32, i32, i32, i32 } %1308, 3, !dbg !36
  %1313 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1154, i32 %1155, i32 %1156, i32 %1157, i32 %568, i32 %569, i32 %570, i32 %571, i32 %621, i32 %622) #1, !dbg !36
  %1314 = extractvalue { i32, i32, i32, i32 } %1313, 0, !dbg !36
  %1315 = extractvalue { i32, i32, i32, i32 } %1313, 1, !dbg !36
  %1316 = extractvalue { i32, i32, i32, i32 } %1313, 2, !dbg !36
  %1317 = extractvalue { i32, i32, i32, i32 } %1313, 3, !dbg !36
  %1318 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1159, i32 %1160, i32 %1161, i32 %1162, i32 %568, i32 %569, i32 %570, i32 %571, i32 %637, i32 %638) #1, !dbg !36
  %1319 = extractvalue { i32, i32, i32, i32 } %1318, 0, !dbg !36
  %1320 = extractvalue { i32, i32, i32, i32 } %1318, 1, !dbg !36
  %1321 = extractvalue { i32, i32, i32, i32 } %1318, 2, !dbg !36
  %1322 = extractvalue { i32, i32, i32, i32 } %1318, 3, !dbg !36
  %1323 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1164, i32 %1165, i32 %1166, i32 %1167, i32 %568, i32 %569, i32 %570, i32 %571, i32 %653, i32 %654) #1, !dbg !36
  %1324 = extractvalue { i32, i32, i32, i32 } %1323, 0, !dbg !36
  %1325 = extractvalue { i32, i32, i32, i32 } %1323, 1, !dbg !36
  %1326 = extractvalue { i32, i32, i32, i32 } %1323, 2, !dbg !36
  %1327 = extractvalue { i32, i32, i32, i32 } %1323, 3, !dbg !36
  %1328 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1169, i32 %1170, i32 %1171, i32 %1172, i32 %568, i32 %569, i32 %570, i32 %571, i32 %669, i32 %670) #1, !dbg !36
  %1329 = extractvalue { i32, i32, i32, i32 } %1328, 0, !dbg !36
  %1330 = extractvalue { i32, i32, i32, i32 } %1328, 1, !dbg !36
  %1331 = extractvalue { i32, i32, i32, i32 } %1328, 2, !dbg !36
  %1332 = extractvalue { i32, i32, i32, i32 } %1328, 3, !dbg !36
  %1333 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1174, i32 %1175, i32 %1176, i32 %1177, i32 %568, i32 %569, i32 %570, i32 %571, i32 %685, i32 %686) #1, !dbg !36
  %1334 = extractvalue { i32, i32, i32, i32 } %1333, 0, !dbg !36
  %1335 = extractvalue { i32, i32, i32, i32 } %1333, 1, !dbg !36
  %1336 = extractvalue { i32, i32, i32, i32 } %1333, 2, !dbg !36
  %1337 = extractvalue { i32, i32, i32, i32 } %1333, 3, !dbg !36
  %1338 = tail call { i32, i32, i32, i32 } asm sideeffect "mma.sync.aligned.m16n8k32.row.col.satfinite.s32.s8.s8.s32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=r,=r,=r,=r,0,1,2,3,r,r,r,r,r,r"(i32 %1179, i32 %1180, i32 %1181, i32 %1182, i32 %568, i32 %569, i32 %570, i32 %571, i32 %701, i32 %702) #1, !dbg !36
  %1339 = extractvalue { i32, i32, i32, i32 } %1338, 0, !dbg !36
  %1340 = extractvalue { i32, i32, i32, i32 } %1338, 1, !dbg !36
  %1341 = extractvalue { i32, i32, i32, i32 } %1338, 2, !dbg !36
  %1342 = extractvalue { i32, i32, i32, i32 } %1338, 3, !dbg !36
  %1343 = add i32 %308, 1, !dbg !35
  %1344 = icmp slt i32 %1343, 2, !dbg !35
  %1345 = select i1 %1344, i32 %1343, i32 0, !dbg !35
  %1346 = shl nuw nsw i64 %indvars.iv, 7, !dbg !37
  %1347 = add nuw nsw i64 %1346, %293
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %1347, !dbg !29
  %gep422 = getelementptr i8, ptr addrspace(1) %invariant.gep421, i64 %1347, !dbg !29
  %gep424 = getelementptr i8, ptr addrspace(1) %invariant.gep423, i64 %1347, !dbg !29
  %gep426 = getelementptr i8, ptr addrspace(1) %invariant.gep425, i64 %1347, !dbg !29
  %1348 = shl i32 %1345, 14, !dbg !30
  %1349 = sext i32 %1348 to i64, !dbg !30
  %1350 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %1349, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %1351 = getelementptr inbounds nuw i8, ptr addrspace(3) %1350, i64 %86, !dbg !30
  %1352 = getelementptr inbounds nuw i8, ptr addrspace(3) %1350, i64 %90, !dbg !30
  %1353 = getelementptr inbounds nuw i8, ptr addrspace(3) %1350, i64 %94, !dbg !30
  %1354 = getelementptr inbounds nuw i8, ptr addrspace(3) %1350, i64 %98, !dbg !30
  %1355 = select i1 %437, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1351, ptr addrspace(1) %gep, i32 %1355) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1352, ptr addrspace(1) %gep422, i32 %1355) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1353, ptr addrspace(1) %gep424, i32 %1355) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1354, ptr addrspace(1) %gep426, i32 %1355) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep428 = getelementptr i8, ptr addrspace(1) %invariant.gep427, i64 %1347, !dbg !32
  %gep430 = getelementptr i8, ptr addrspace(1) %invariant.gep429, i64 %1347, !dbg !32
  %gep432 = getelementptr i8, ptr addrspace(1) %invariant.gep431, i64 %1347, !dbg !32
  %gep434 = getelementptr i8, ptr addrspace(1) %invariant.gep433, i64 %1347, !dbg !32
  %gep436 = getelementptr i8, ptr addrspace(1) %invariant.gep435, i64 %1347, !dbg !32
  %gep438 = getelementptr i8, ptr addrspace(1) %invariant.gep437, i64 %1347, !dbg !32
  %gep440 = getelementptr i8, ptr addrspace(1) %invariant.gep439, i64 %1347, !dbg !32
  %gep442 = getelementptr i8, ptr addrspace(1) %invariant.gep441, i64 %1347, !dbg !32
  %1356 = shl i32 %1345, 15, !dbg !33
  %1357 = sext i32 %1356 to i64, !dbg !33
  %1358 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %1357, !dbg !33
  %1359 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %86, !dbg !33
  %1360 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %90, !dbg !33
  %1361 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %94, !dbg !33
  %1362 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %98, !dbg !33
  %1363 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %130, !dbg !33
  %1364 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %134, !dbg !33
  %1365 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %138, !dbg !33
  %1366 = getelementptr inbounds nuw i8, ptr addrspace(3) %1358, i64 %142, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1359, ptr addrspace(1) %gep428, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1360, ptr addrspace(1) %gep430, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1361, ptr addrspace(1) %gep432, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1362, ptr addrspace(1) %gep434, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1363, ptr addrspace(1) %gep436, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1364, ptr addrspace(1) %gep438, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1365, ptr addrspace(1) %gep440, i32 %1355) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1366, ptr addrspace(1) %gep442, i32 %1355) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 120, !dbg !35
  br i1 %exitcond.not, label %1367, label %306, !dbg !35

1367:                                             ; preds = %306
  %1368 = shl i32 %15, 2, !dbg !38
  %1369 = and i32 %1368, 252, !dbg !38
  %1370 = or disjoint i32 %31, %1369, !dbg !22
  %.lobit13 = lshr i32 %15, 6, !dbg !19
  %1371 = and i32 %.lobit13, 3, !dbg !19
  %1372 = or disjoint i32 %1371, %14, !dbg !20
  %1373 = or disjoint i32 %1372, 124, !dbg !20
  %1374 = or disjoint i32 %1372, 120, !dbg !20
  %1375 = or disjoint i32 %1372, 116, !dbg !20
  %1376 = or disjoint i32 %1372, 112, !dbg !20
  %1377 = or disjoint i32 %1372, 108, !dbg !20
  %1378 = or disjoint i32 %1372, 104, !dbg !20
  %1379 = or disjoint i32 %1372, 100, !dbg !20
  %1380 = or disjoint i32 %1372, 96, !dbg !20
  %1381 = or disjoint i32 %1372, 92, !dbg !20
  %1382 = or disjoint i32 %1372, 88, !dbg !20
  %1383 = or disjoint i32 %1372, 84, !dbg !20
  %1384 = or disjoint i32 %1372, 80, !dbg !20
  %1385 = or disjoint i32 %1372, 76, !dbg !20
  %1386 = or disjoint i32 %1372, 72, !dbg !20
  %1387 = or disjoint i32 %1372, 68, !dbg !20
  %1388 = or disjoint i32 %1372, 64, !dbg !20
  %1389 = or disjoint i32 %1372, 60, !dbg !20
  %1390 = or disjoint i32 %1372, 56, !dbg !20
  %1391 = or disjoint i32 %1372, 52, !dbg !20
  %1392 = or disjoint i32 %1372, 48, !dbg !20
  %1393 = or disjoint i32 %1372, 44, !dbg !20
  %1394 = or disjoint i32 %1372, 40, !dbg !20
  %1395 = or disjoint i32 %1372, 36, !dbg !20
  %1396 = or disjoint i32 %1372, 32, !dbg !20
  %1397 = or disjoint i32 %1372, 28, !dbg !20
  %1398 = or disjoint i32 %1372, 24, !dbg !20
  %1399 = or disjoint i32 %1372, 20, !dbg !20
  %1400 = or disjoint i32 %1372, 16, !dbg !20
  %1401 = or disjoint i32 %1372, 12, !dbg !20
  %1402 = or disjoint i32 %1372, 8, !dbg !20
  %1403 = or disjoint i32 %1372, 4, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %1404 = icmp slt i32 %1372, 4112, !dbg !39
  %1405 = icmp slt i32 %1403, 4112, !dbg !39
  %1406 = icmp slt i32 %1402, 4112, !dbg !39
  %1407 = icmp slt i32 %1401, 4112, !dbg !39
  %1408 = icmp slt i32 %1400, 4112, !dbg !39
  %1409 = icmp slt i32 %1399, 4112, !dbg !39
  %1410 = icmp slt i32 %1398, 4112, !dbg !39
  %1411 = icmp slt i32 %1397, 4112, !dbg !39
  %1412 = icmp slt i32 %1396, 4112, !dbg !39
  %1413 = icmp slt i32 %1395, 4112, !dbg !39
  %1414 = icmp slt i32 %1394, 4112, !dbg !39
  %1415 = icmp slt i32 %1393, 4112, !dbg !39
  %1416 = icmp slt i32 %1392, 4112, !dbg !39
  %1417 = icmp slt i32 %1391, 4112, !dbg !39
  %1418 = icmp slt i32 %1390, 4112, !dbg !39
  %1419 = icmp slt i32 %1389, 4112, !dbg !39
  %1420 = icmp slt i32 %1388, 4112, !dbg !39
  %1421 = icmp slt i32 %1387, 4112, !dbg !39
  %1422 = icmp slt i32 %1386, 4112, !dbg !39
  %1423 = icmp slt i32 %1385, 4112, !dbg !39
  %1424 = icmp slt i32 %1384, 4112, !dbg !39
  %1425 = icmp slt i32 %1383, 4112, !dbg !39
  %1426 = icmp slt i32 %1382, 4112, !dbg !39
  %1427 = icmp slt i32 %1381, 4112, !dbg !39
  %1428 = icmp slt i32 %1380, 4112, !dbg !39
  %1429 = icmp slt i32 %1379, 4112, !dbg !39
  %1430 = icmp slt i32 %1378, 4112, !dbg !39
  %1431 = icmp slt i32 %1377, 4112, !dbg !39
  %1432 = icmp slt i32 %1376, 4112, !dbg !39
  %1433 = icmp slt i32 %1375, 4112, !dbg !39
  %1434 = icmp slt i32 %1374, 4112, !dbg !39
  %1435 = icmp slt i32 %1373, 4112, !dbg !39
  %1436 = icmp slt i32 %1370, 3072, !dbg !40
  %1437 = and i1 %1404, %1436, !dbg !41
  %1438 = and i1 %1405, %1436, !dbg !41
  %1439 = and i1 %1406, %1436, !dbg !41
  %1440 = and i1 %1407, %1436, !dbg !41
  %1441 = and i1 %1408, %1436, !dbg !41
  %1442 = and i1 %1409, %1436, !dbg !41
  %1443 = and i1 %1410, %1436, !dbg !41
  %1444 = and i1 %1411, %1436, !dbg !41
  %1445 = and i1 %1412, %1436, !dbg !41
  %1446 = and i1 %1413, %1436, !dbg !41
  %1447 = and i1 %1414, %1436, !dbg !41
  %1448 = and i1 %1415, %1436, !dbg !41
  %1449 = and i1 %1416, %1436, !dbg !41
  %1450 = and i1 %1417, %1436, !dbg !41
  %1451 = and i1 %1418, %1436, !dbg !41
  %1452 = and i1 %1419, %1436, !dbg !41
  %1453 = and i1 %1420, %1436, !dbg !41
  %1454 = and i1 %1421, %1436, !dbg !41
  %1455 = and i1 %1422, %1436, !dbg !41
  %1456 = and i1 %1423, %1436, !dbg !41
  %1457 = and i1 %1424, %1436, !dbg !41
  %1458 = and i1 %1425, %1436, !dbg !41
  %1459 = and i1 %1426, %1436, !dbg !41
  %1460 = and i1 %1427, %1436, !dbg !41
  %1461 = and i1 %1428, %1436, !dbg !41
  %1462 = and i1 %1429, %1436, !dbg !41
  %1463 = and i1 %1430, %1436, !dbg !41
  %1464 = and i1 %1431, %1436, !dbg !41
  %1465 = and i1 %1432, %1436, !dbg !41
  %1466 = and i1 %1433, %1436, !dbg !41
  %1467 = and i1 %1434, %1436, !dbg !41
  %1468 = and i1 %1435, %1436, !dbg !41
  %1469 = mul i32 %1372, 3072, !dbg !42
  %1470 = mul i32 %1403, 3072, !dbg !42
  %1471 = mul i32 %1402, 3072, !dbg !42
  %1472 = mul i32 %1401, 3072, !dbg !42
  %1473 = mul i32 %1400, 3072, !dbg !42
  %1474 = mul i32 %1399, 3072, !dbg !42
  %1475 = mul i32 %1398, 3072, !dbg !42
  %1476 = mul i32 %1397, 3072, !dbg !42
  %1477 = mul i32 %1396, 3072, !dbg !42
  %1478 = mul i32 %1395, 3072, !dbg !42
  %1479 = mul i32 %1394, 3072, !dbg !42
  %1480 = mul i32 %1393, 3072, !dbg !42
  %1481 = mul i32 %1392, 3072, !dbg !42
  %1482 = mul i32 %1391, 3072, !dbg !42
  %1483 = mul i32 %1390, 3072, !dbg !42
  %1484 = mul i32 %1389, 3072, !dbg !42
  %1485 = mul i32 %1388, 3072, !dbg !42
  %1486 = mul i32 %1387, 3072, !dbg !42
  %1487 = mul i32 %1386, 3072, !dbg !42
  %1488 = mul i32 %1385, 3072, !dbg !42
  %1489 = mul i32 %1384, 3072, !dbg !42
  %1490 = mul i32 %1383, 3072, !dbg !42
  %1491 = mul i32 %1382, 3072, !dbg !42
  %1492 = mul i32 %1381, 3072, !dbg !42
  %1493 = mul i32 %1380, 3072, !dbg !42
  %1494 = mul i32 %1379, 3072, !dbg !42
  %1495 = mul i32 %1378, 3072, !dbg !42
  %1496 = mul i32 %1377, 3072, !dbg !42
  %1497 = mul i32 %1376, 3072, !dbg !42
  %1498 = mul i32 %1375, 3072, !dbg !42
  %1499 = mul i32 %1374, 3072, !dbg !42
  %1500 = mul i32 %1373, 3072, !dbg !42
  %1501 = add i32 %1469, %1370, !dbg !43
  %1502 = add i32 %1470, %1370, !dbg !43
  %1503 = add i32 %1471, %1370, !dbg !43
  %1504 = add i32 %1472, %1370, !dbg !43
  %1505 = add i32 %1473, %1370, !dbg !43
  %1506 = add i32 %1474, %1370, !dbg !43
  %1507 = add i32 %1475, %1370, !dbg !43
  %1508 = add i32 %1476, %1370, !dbg !43
  %1509 = add i32 %1477, %1370, !dbg !43
  %1510 = add i32 %1478, %1370, !dbg !43
  %1511 = add i32 %1479, %1370, !dbg !43
  %1512 = add i32 %1480, %1370, !dbg !43
  %1513 = add i32 %1481, %1370, !dbg !43
  %1514 = add i32 %1482, %1370, !dbg !43
  %1515 = add i32 %1483, %1370, !dbg !43
  %1516 = add i32 %1484, %1370, !dbg !43
  %1517 = add i32 %1485, %1370, !dbg !43
  %1518 = add i32 %1486, %1370, !dbg !43
  %1519 = add i32 %1487, %1370, !dbg !43
  %1520 = add i32 %1488, %1370, !dbg !43
  %1521 = add i32 %1489, %1370, !dbg !43
  %1522 = add i32 %1490, %1370, !dbg !43
  %1523 = add i32 %1491, %1370, !dbg !43
  %1524 = add i32 %1492, %1370, !dbg !43
  %1525 = add i32 %1493, %1370, !dbg !43
  %1526 = add i32 %1494, %1370, !dbg !43
  %1527 = add i32 %1495, %1370, !dbg !43
  %1528 = add i32 %1496, %1370, !dbg !43
  %1529 = add i32 %1497, %1370, !dbg !43
  %1530 = add i32 %1498, %1370, !dbg !43
  %1531 = add i32 %1499, %1370, !dbg !43
  %1532 = add i32 %1500, %1370, !dbg !43
  %1533 = sext i32 %1501 to i64, !dbg !44
  %1534 = getelementptr i32, ptr addrspace(1) %2, i64 %1533, !dbg !44
  %1535 = sext i32 %1502 to i64, !dbg !44
  %1536 = getelementptr i32, ptr addrspace(1) %2, i64 %1535, !dbg !44
  %1537 = sext i32 %1503 to i64, !dbg !44
  %1538 = getelementptr i32, ptr addrspace(1) %2, i64 %1537, !dbg !44
  %1539 = sext i32 %1504 to i64, !dbg !44
  %1540 = getelementptr i32, ptr addrspace(1) %2, i64 %1539, !dbg !44
  %1541 = sext i32 %1505 to i64, !dbg !44
  %1542 = getelementptr i32, ptr addrspace(1) %2, i64 %1541, !dbg !44
  %1543 = sext i32 %1506 to i64, !dbg !44
  %1544 = getelementptr i32, ptr addrspace(1) %2, i64 %1543, !dbg !44
  %1545 = sext i32 %1507 to i64, !dbg !44
  %1546 = getelementptr i32, ptr addrspace(1) %2, i64 %1545, !dbg !44
  %1547 = sext i32 %1508 to i64, !dbg !44
  %1548 = getelementptr i32, ptr addrspace(1) %2, i64 %1547, !dbg !44
  %1549 = sext i32 %1509 to i64, !dbg !44
  %1550 = getelementptr i32, ptr addrspace(1) %2, i64 %1549, !dbg !44
  %1551 = sext i32 %1510 to i64, !dbg !44
  %1552 = getelementptr i32, ptr addrspace(1) %2, i64 %1551, !dbg !44
  %1553 = sext i32 %1511 to i64, !dbg !44
  %1554 = getelementptr i32, ptr addrspace(1) %2, i64 %1553, !dbg !44
  %1555 = sext i32 %1512 to i64, !dbg !44
  %1556 = getelementptr i32, ptr addrspace(1) %2, i64 %1555, !dbg !44
  %1557 = sext i32 %1513 to i64, !dbg !44
  %1558 = getelementptr i32, ptr addrspace(1) %2, i64 %1557, !dbg !44
  %1559 = sext i32 %1514 to i64, !dbg !44
  %1560 = getelementptr i32, ptr addrspace(1) %2, i64 %1559, !dbg !44
  %1561 = sext i32 %1515 to i64, !dbg !44
  %1562 = getelementptr i32, ptr addrspace(1) %2, i64 %1561, !dbg !44
  %1563 = sext i32 %1516 to i64, !dbg !44
  %1564 = getelementptr i32, ptr addrspace(1) %2, i64 %1563, !dbg !44
  %1565 = sext i32 %1517 to i64, !dbg !44
  %1566 = getelementptr i32, ptr addrspace(1) %2, i64 %1565, !dbg !44
  %1567 = sext i32 %1518 to i64, !dbg !44
  %1568 = getelementptr i32, ptr addrspace(1) %2, i64 %1567, !dbg !44
  %1569 = sext i32 %1519 to i64, !dbg !44
  %1570 = getelementptr i32, ptr addrspace(1) %2, i64 %1569, !dbg !44
  %1571 = sext i32 %1520 to i64, !dbg !44
  %1572 = getelementptr i32, ptr addrspace(1) %2, i64 %1571, !dbg !44
  %1573 = sext i32 %1521 to i64, !dbg !44
  %1574 = getelementptr i32, ptr addrspace(1) %2, i64 %1573, !dbg !44
  %1575 = sext i32 %1522 to i64, !dbg !44
  %1576 = getelementptr i32, ptr addrspace(1) %2, i64 %1575, !dbg !44
  %1577 = sext i32 %1523 to i64, !dbg !44
  %1578 = getelementptr i32, ptr addrspace(1) %2, i64 %1577, !dbg !44
  %1579 = sext i32 %1524 to i64, !dbg !44
  %1580 = getelementptr i32, ptr addrspace(1) %2, i64 %1579, !dbg !44
  %1581 = sext i32 %1525 to i64, !dbg !44
  %1582 = getelementptr i32, ptr addrspace(1) %2, i64 %1581, !dbg !44
  %1583 = sext i32 %1526 to i64, !dbg !44
  %1584 = getelementptr i32, ptr addrspace(1) %2, i64 %1583, !dbg !44
  %1585 = sext i32 %1527 to i64, !dbg !44
  %1586 = getelementptr i32, ptr addrspace(1) %2, i64 %1585, !dbg !44
  %1587 = sext i32 %1528 to i64, !dbg !44
  %1588 = getelementptr i32, ptr addrspace(1) %2, i64 %1587, !dbg !44
  %1589 = sext i32 %1529 to i64, !dbg !44
  %1590 = getelementptr i32, ptr addrspace(1) %2, i64 %1589, !dbg !44
  %1591 = sext i32 %1530 to i64, !dbg !44
  %1592 = getelementptr i32, ptr addrspace(1) %2, i64 %1591, !dbg !44
  %1593 = sext i32 %1531 to i64, !dbg !44
  %1594 = getelementptr i32, ptr addrspace(1) %2, i64 %1593, !dbg !44
  %1595 = sext i32 %1532 to i64, !dbg !44
  %1596 = getelementptr i32, ptr addrspace(1) %2, i64 %1595, !dbg !44
  %1597 = shl i32 %15, 1, !dbg !45
  %1598 = and i32 %1597, 6, !dbg !45
  %1599 = shl i32 %15, 6, !dbg !45
  %1600 = and i32 %1599, 768, !dbg !45
  %1601 = or disjoint i32 %1600, %1598, !dbg !45
  %1602 = shl nuw nsw i32 %17, 6, !dbg !45
  %1603 = or disjoint i32 %1601, %1602, !dbg !45
  %1604 = and i32 %245, 24, !dbg !45
  %1605 = or disjoint i32 %1603, %1604, !dbg !45
  %1606 = shl nuw nsw i32 %21, 5, !dbg !45
  %1607 = or disjoint i32 %1605, %1606, !dbg !45
  %1608 = and i32 %1368, 1020, !dbg !45
  %1609 = lshr i32 %1607, 6, !dbg !45
  %1610 = add nuw nsw i32 %1609, %1607, !dbg !45
  %1611 = zext nneg i32 %1610 to i64, !dbg !45
  %1612 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1611, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1612, i32 %1184, i32 %1185, i1 true) #1, !dbg !45
  %1613 = or disjoint i32 %1607, 2048, !dbg !45
  %1614 = lshr i32 %1613, 6, !dbg !45
  %1615 = add nuw nsw i32 %1614, %1613, !dbg !45
  %1616 = zext nneg i32 %1615 to i64, !dbg !45
  %1617 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1616, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1617, i32 %1186, i32 %1187, i1 true) #1, !dbg !45
  %1618 = or disjoint i32 %1607, 32, !dbg !45
  %1619 = add nuw nsw i32 %1618, %1609, !dbg !45
  %1620 = zext nneg i32 %1619 to i64, !dbg !45
  %1621 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1620, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1621, i32 %1189, i32 %1190, i1 true) #1, !dbg !45
  %1622 = or disjoint i32 %1607, 2080, !dbg !45
  %1623 = lshr i32 %1622, 6, !dbg !45
  %1624 = add nuw nsw i32 %1623, %1622, !dbg !45
  %1625 = zext nneg i32 %1624 to i64, !dbg !45
  %1626 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1625, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1626, i32 %1191, i32 %1192, i1 true) #1, !dbg !45
  %1627 = or disjoint i32 %1607, 64, !dbg !45
  %1628 = add nuw nsw i32 %1627, %1609, !dbg !45
  %1629 = zext nneg i32 %1628 to i64, !dbg !45
  %1630 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1629, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1630, i32 %1194, i32 %1195, i1 true) #1, !dbg !45
  %1631 = or disjoint i32 %1607, 2112, !dbg !45
  %1632 = lshr i32 %1631, 6, !dbg !45
  %1633 = and i32 %1632, 67108860, !dbg !45
  %1634 = add nuw nsw i32 %1633, %1631, !dbg !45
  %1635 = zext nneg i32 %1634 to i64, !dbg !45
  %1636 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1635, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1636, i32 %1196, i32 %1197, i1 true) #1, !dbg !45
  %1637 = or disjoint i32 %1607, 96, !dbg !45
  %1638 = add nuw nsw i32 %1637, %1609, !dbg !45
  %1639 = zext nneg i32 %1638 to i64, !dbg !45
  %1640 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1639, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1640, i32 %1199, i32 %1200, i1 true) #1, !dbg !45
  %1641 = or disjoint i32 %1607, 2144, !dbg !45
  %1642 = lshr i32 %1641, 6, !dbg !45
  %1643 = and i32 %1642, 67108860, !dbg !45
  %1644 = add nuw nsw i32 %1643, %1641, !dbg !45
  %1645 = zext nneg i32 %1644 to i64, !dbg !45
  %1646 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1645, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1646, i32 %1201, i32 %1202, i1 true) #1, !dbg !45
  %1647 = or disjoint i32 %1607, 128, !dbg !45
  %1648 = add nuw nsw i32 %1647, %1609, !dbg !45
  %1649 = zext nneg i32 %1648 to i64, !dbg !45
  %1650 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1649, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1650, i32 %1204, i32 %1205, i1 true) #1, !dbg !45
  %1651 = or disjoint i32 %1607, 2176, !dbg !45
  %1652 = lshr i32 %1651, 6, !dbg !45
  %1653 = and i32 %1652, 67108860, !dbg !45
  %1654 = add nuw nsw i32 %1653, %1651, !dbg !45
  %1655 = zext nneg i32 %1654 to i64, !dbg !45
  %1656 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1655, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1656, i32 %1206, i32 %1207, i1 true) #1, !dbg !45
  %1657 = or disjoint i32 %1607, 160, !dbg !45
  %1658 = add nuw nsw i32 %1657, %1609, !dbg !45
  %1659 = zext nneg i32 %1658 to i64, !dbg !45
  %1660 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1659, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1660, i32 %1209, i32 %1210, i1 true) #1, !dbg !45
  %1661 = or disjoint i32 %1607, 2208, !dbg !45
  %1662 = lshr i32 %1661, 6, !dbg !45
  %1663 = and i32 %1662, 67108860, !dbg !45
  %1664 = add nuw nsw i32 %1663, %1661, !dbg !45
  %1665 = zext nneg i32 %1664 to i64, !dbg !45
  %1666 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1665, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1666, i32 %1211, i32 %1212, i1 true) #1, !dbg !45
  %1667 = or disjoint i32 %1607, 192, !dbg !45
  %1668 = add nuw nsw i32 %1667, %1609, !dbg !45
  %1669 = zext nneg i32 %1668 to i64, !dbg !45
  %1670 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1669, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1670, i32 %1214, i32 %1215, i1 true) #1, !dbg !45
  %1671 = or disjoint i32 %1607, 2240, !dbg !45
  %1672 = lshr i32 %1671, 6, !dbg !45
  %1673 = and i32 %1672, 67108860, !dbg !45
  %1674 = add nuw nsw i32 %1673, %1671, !dbg !45
  %1675 = zext nneg i32 %1674 to i64, !dbg !45
  %1676 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1675, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1676, i32 %1216, i32 %1217, i1 true) #1, !dbg !45
  %1677 = or disjoint i32 %1607, 224, !dbg !45
  %1678 = add nuw nsw i32 %1677, %1609, !dbg !45
  %1679 = zext nneg i32 %1678 to i64, !dbg !45
  %1680 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1679, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1680, i32 %1219, i32 %1220, i1 true) #1, !dbg !45
  %1681 = or disjoint i32 %1607, 2272, !dbg !45
  %1682 = lshr i32 %1681, 6, !dbg !45
  %1683 = and i32 %1682, 67108860, !dbg !45
  %1684 = add nuw nsw i32 %1683, %1681, !dbg !45
  %1685 = zext nneg i32 %1684 to i64, !dbg !45
  %1686 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1685, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1686, i32 %1221, i32 %1222, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1687 = lshr i32 %1368, 6, !dbg !45
  %1688 = and i32 %1687, 12, !dbg !45
  %1689 = add nuw nsw i32 %1688, %1608, !dbg !45
  %1690 = zext nneg i32 %1689 to i64, !dbg !45
  %1691 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1690, !dbg !45
  %1692 = load <4 x i32>, ptr addrspace(3) %1691, align 16, !dbg !45
  %1693 = or disjoint i32 %1608, 1024, !dbg !45
  %1694 = lshr i32 %1693, 6, !dbg !45
  %1695 = and i32 %1694, 28, !dbg !45
  %1696 = add nuw nsw i32 %1695, %1693, !dbg !45
  %1697 = zext nneg i32 %1696 to i64, !dbg !45
  %1698 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1697, !dbg !45
  %1699 = load <4 x i32>, ptr addrspace(3) %1698, align 16, !dbg !45
  %1700 = or disjoint i32 %1608, 2048, !dbg !45
  %1701 = lshr i32 %1700, 6, !dbg !45
  %1702 = and i32 %1701, 44, !dbg !45
  %1703 = add nuw nsw i32 %1702, %1700, !dbg !45
  %1704 = zext nneg i32 %1703 to i64, !dbg !45
  %1705 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1704, !dbg !45
  %1706 = load <4 x i32>, ptr addrspace(3) %1705, align 16, !dbg !45
  %1707 = or disjoint i32 %1608, 3072, !dbg !45
  %1708 = lshr i32 %1707, 6, !dbg !45
  %1709 = and i32 %1708, 60, !dbg !45
  %1710 = add nuw nsw i32 %1709, %1707, !dbg !45
  %1711 = zext nneg i32 %1710 to i64, !dbg !45
  %1712 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1711, !dbg !45
  %1713 = load <4 x i32>, ptr addrspace(3) %1712, align 16, !dbg !45
  %1714 = or disjoint i32 %1608, 4096, !dbg !45
  %1715 = lshr i32 %1714, 6, !dbg !45
  %1716 = and i32 %1715, 76, !dbg !45
  %1717 = add nuw nsw i32 %1716, %1714, !dbg !45
  %1718 = zext nneg i32 %1717 to i64, !dbg !45
  %1719 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1718, !dbg !45
  %1720 = load <4 x i32>, ptr addrspace(3) %1719, align 16, !dbg !45
  %1721 = or disjoint i32 %1608, 5120, !dbg !45
  %1722 = lshr i32 %1721, 6, !dbg !45
  %1723 = and i32 %1722, 92, !dbg !45
  %1724 = add nuw nsw i32 %1723, %1721, !dbg !45
  %1725 = zext nneg i32 %1724 to i64, !dbg !45
  %1726 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1725, !dbg !45
  %1727 = load <4 x i32>, ptr addrspace(3) %1726, align 16, !dbg !45
  %1728 = or disjoint i32 %1608, 6144, !dbg !45
  %1729 = lshr i32 %1728, 6, !dbg !45
  %1730 = and i32 %1729, 108, !dbg !45
  %1731 = add nuw nsw i32 %1730, %1728, !dbg !45
  %1732 = zext nneg i32 %1731 to i64, !dbg !45
  %1733 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1732, !dbg !45
  %1734 = load <4 x i32>, ptr addrspace(3) %1733, align 16, !dbg !45
  %1735 = or disjoint i32 %1608, 7168, !dbg !45
  %1736 = lshr i32 %1735, 6, !dbg !45
  %1737 = and i32 %1736, 124, !dbg !45
  %1738 = add nuw nsw i32 %1737, %1735, !dbg !45
  %1739 = zext nneg i32 %1738 to i64, !dbg !45
  %1740 = getelementptr inbounds nuw i32, ptr addrspace(3) @global_smem, i64 %1739, !dbg !45
  %1741 = load <4 x i32>, ptr addrspace(3) %1740, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1612, i32 %1224, i32 %1225, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1617, i32 %1226, i32 %1227, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1621, i32 %1229, i32 %1230, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1626, i32 %1231, i32 %1232, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1630, i32 %1234, i32 %1235, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1636, i32 %1236, i32 %1237, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1640, i32 %1239, i32 %1240, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1646, i32 %1241, i32 %1242, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1650, i32 %1244, i32 %1245, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1656, i32 %1246, i32 %1247, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1660, i32 %1249, i32 %1250, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1666, i32 %1251, i32 %1252, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1670, i32 %1254, i32 %1255, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1676, i32 %1256, i32 %1257, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1680, i32 %1259, i32 %1260, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1686, i32 %1261, i32 %1262, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1742 = load <4 x i32>, ptr addrspace(3) %1691, align 16, !dbg !45
  %1743 = load <4 x i32>, ptr addrspace(3) %1698, align 16, !dbg !45
  %1744 = load <4 x i32>, ptr addrspace(3) %1705, align 16, !dbg !45
  %1745 = load <4 x i32>, ptr addrspace(3) %1712, align 16, !dbg !45
  %1746 = load <4 x i32>, ptr addrspace(3) %1719, align 16, !dbg !45
  %1747 = load <4 x i32>, ptr addrspace(3) %1726, align 16, !dbg !45
  %1748 = load <4 x i32>, ptr addrspace(3) %1733, align 16, !dbg !45
  %1749 = load <4 x i32>, ptr addrspace(3) %1740, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1612, i32 %1264, i32 %1265, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1617, i32 %1266, i32 %1267, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1621, i32 %1269, i32 %1270, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1626, i32 %1271, i32 %1272, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1630, i32 %1274, i32 %1275, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1636, i32 %1276, i32 %1277, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1640, i32 %1279, i32 %1280, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1646, i32 %1281, i32 %1282, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1650, i32 %1284, i32 %1285, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1656, i32 %1286, i32 %1287, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1660, i32 %1289, i32 %1290, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1666, i32 %1291, i32 %1292, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1670, i32 %1294, i32 %1295, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1676, i32 %1296, i32 %1297, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1680, i32 %1299, i32 %1300, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1686, i32 %1301, i32 %1302, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1750 = load <4 x i32>, ptr addrspace(3) %1691, align 16, !dbg !45
  %1751 = load <4 x i32>, ptr addrspace(3) %1698, align 16, !dbg !45
  %1752 = load <4 x i32>, ptr addrspace(3) %1705, align 16, !dbg !45
  %1753 = load <4 x i32>, ptr addrspace(3) %1712, align 16, !dbg !45
  %1754 = load <4 x i32>, ptr addrspace(3) %1719, align 16, !dbg !45
  %1755 = load <4 x i32>, ptr addrspace(3) %1726, align 16, !dbg !45
  %1756 = load <4 x i32>, ptr addrspace(3) %1733, align 16, !dbg !45
  %1757 = load <4 x i32>, ptr addrspace(3) %1740, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %1612, i32 %1304, i32 %1305, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1617, i32 %1306, i32 %1307, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1621, i32 %1309, i32 %1310, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1626, i32 %1311, i32 %1312, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1630, i32 %1314, i32 %1315, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1636, i32 %1316, i32 %1317, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1640, i32 %1319, i32 %1320, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1646, i32 %1321, i32 %1322, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1650, i32 %1324, i32 %1325, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1656, i32 %1326, i32 %1327, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1660, i32 %1329, i32 %1330, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1666, i32 %1331, i32 %1332, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1670, i32 %1334, i32 %1335, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1676, i32 %1336, i32 %1337, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1680, i32 %1339, i32 %1340, i1 true) #1, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) nonnull %1686, i32 %1341, i32 %1342, i1 true) #1, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %1758 = load <4 x i32>, ptr addrspace(3) %1691, align 16, !dbg !45
  %1759 = load <4 x i32>, ptr addrspace(3) %1698, align 16, !dbg !45
  %1760 = load <4 x i32>, ptr addrspace(3) %1705, align 16, !dbg !45
  %1761 = load <4 x i32>, ptr addrspace(3) %1712, align 16, !dbg !45
  %1762 = load <4 x i32>, ptr addrspace(3) %1719, align 16, !dbg !45
  %1763 = load <4 x i32>, ptr addrspace(3) %1726, align 16, !dbg !45
  %1764 = load <4 x i32>, ptr addrspace(3) %1733, align 16, !dbg !45
  %1765 = load <4 x i32>, ptr addrspace(3) %1740, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %1692, i64 0, !dbg !45
  %.extract4 = extractelement <4 x i32> %1692, i64 1, !dbg !45
  %.extract5 = extractelement <4 x i32> %1692, i64 2, !dbg !45
  %.extract6 = extractelement <4 x i32> %1692, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %1534, i1 %1437) #1, !dbg !45
  %.extract7 = extractelement <4 x i32> %1699, i64 0, !dbg !45
  %.extract8 = extractelement <4 x i32> %1699, i64 1, !dbg !45
  %.extract9 = extractelement <4 x i32> %1699, i64 2, !dbg !45
  %.extract10 = extractelement <4 x i32> %1699, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract7, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %1536, i1 %1438) #1, !dbg !45
  %.extract11 = extractelement <4 x i32> %1706, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %1706, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %1706, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %1706, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %1538, i1 %1439) #1, !dbg !45
  %.extract15 = extractelement <4 x i32> %1713, i64 0, !dbg !45
  %.extract16 = extractelement <4 x i32> %1713, i64 1, !dbg !45
  %.extract17 = extractelement <4 x i32> %1713, i64 2, !dbg !45
  %.extract18 = extractelement <4 x i32> %1713, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %1540, i1 %1440) #1, !dbg !45
  %.extract19 = extractelement <4 x i32> %1720, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %1720, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %1720, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %1720, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %1542, i1 %1441) #1, !dbg !45
  %.extract23 = extractelement <4 x i32> %1727, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %1727, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %1727, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %1727, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %1544, i1 %1442) #1, !dbg !45
  %.extract27 = extractelement <4 x i32> %1734, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %1734, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %1734, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %1734, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %1546, i1 %1443) #1, !dbg !45
  %.extract31 = extractelement <4 x i32> %1741, i64 0, !dbg !45
  %.extract32 = extractelement <4 x i32> %1741, i64 1, !dbg !45
  %.extract33 = extractelement <4 x i32> %1741, i64 2, !dbg !45
  %.extract34 = extractelement <4 x i32> %1741, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %1548, i1 %1444) #1, !dbg !45
  %.extract35 = extractelement <4 x i32> %1742, i64 0, !dbg !45
  %.extract36 = extractelement <4 x i32> %1742, i64 1, !dbg !45
  %.extract37 = extractelement <4 x i32> %1742, i64 2, !dbg !45
  %.extract38 = extractelement <4 x i32> %1742, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %1550, i1 %1445) #1, !dbg !45
  %.extract39 = extractelement <4 x i32> %1743, i64 0, !dbg !45
  %.extract40 = extractelement <4 x i32> %1743, i64 1, !dbg !45
  %.extract41 = extractelement <4 x i32> %1743, i64 2, !dbg !45
  %.extract42 = extractelement <4 x i32> %1743, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %1552, i1 %1446) #1, !dbg !45
  %.extract43 = extractelement <4 x i32> %1744, i64 0, !dbg !45
  %.extract44 = extractelement <4 x i32> %1744, i64 1, !dbg !45
  %.extract45 = extractelement <4 x i32> %1744, i64 2, !dbg !45
  %.extract46 = extractelement <4 x i32> %1744, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %1554, i1 %1447) #1, !dbg !45
  %.extract47 = extractelement <4 x i32> %1745, i64 0, !dbg !45
  %.extract48 = extractelement <4 x i32> %1745, i64 1, !dbg !45
  %.extract49 = extractelement <4 x i32> %1745, i64 2, !dbg !45
  %.extract50 = extractelement <4 x i32> %1745, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract47, i32 %.extract48, i32 %.extract49, i32 %.extract50, ptr addrspace(1) %1556, i1 %1448) #1, !dbg !45
  %.extract51 = extractelement <4 x i32> %1746, i64 0, !dbg !45
  %.extract52 = extractelement <4 x i32> %1746, i64 1, !dbg !45
  %.extract53 = extractelement <4 x i32> %1746, i64 2, !dbg !45
  %.extract54 = extractelement <4 x i32> %1746, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract51, i32 %.extract52, i32 %.extract53, i32 %.extract54, ptr addrspace(1) %1558, i1 %1449) #1, !dbg !45
  %.extract55 = extractelement <4 x i32> %1747, i64 0, !dbg !45
  %.extract56 = extractelement <4 x i32> %1747, i64 1, !dbg !45
  %.extract57 = extractelement <4 x i32> %1747, i64 2, !dbg !45
  %.extract58 = extractelement <4 x i32> %1747, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract55, i32 %.extract56, i32 %.extract57, i32 %.extract58, ptr addrspace(1) %1560, i1 %1450) #1, !dbg !45
  %.extract59 = extractelement <4 x i32> %1748, i64 0, !dbg !45
  %.extract60 = extractelement <4 x i32> %1748, i64 1, !dbg !45
  %.extract61 = extractelement <4 x i32> %1748, i64 2, !dbg !45
  %.extract62 = extractelement <4 x i32> %1748, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %1562, i1 %1451) #1, !dbg !45
  %.extract63 = extractelement <4 x i32> %1749, i64 0, !dbg !45
  %.extract64 = extractelement <4 x i32> %1749, i64 1, !dbg !45
  %.extract65 = extractelement <4 x i32> %1749, i64 2, !dbg !45
  %.extract66 = extractelement <4 x i32> %1749, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %1564, i1 %1452) #1, !dbg !45
  %.extract67 = extractelement <4 x i32> %1750, i64 0, !dbg !45
  %.extract68 = extractelement <4 x i32> %1750, i64 1, !dbg !45
  %.extract69 = extractelement <4 x i32> %1750, i64 2, !dbg !45
  %.extract70 = extractelement <4 x i32> %1750, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract67, i32 %.extract68, i32 %.extract69, i32 %.extract70, ptr addrspace(1) %1566, i1 %1453) #1, !dbg !45
  %.extract71 = extractelement <4 x i32> %1751, i64 0, !dbg !45
  %.extract72 = extractelement <4 x i32> %1751, i64 1, !dbg !45
  %.extract73 = extractelement <4 x i32> %1751, i64 2, !dbg !45
  %.extract74 = extractelement <4 x i32> %1751, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract72, i32 %.extract73, i32 %.extract74, ptr addrspace(1) %1568, i1 %1454) #1, !dbg !45
  %.extract75 = extractelement <4 x i32> %1752, i64 0, !dbg !45
  %.extract76 = extractelement <4 x i32> %1752, i64 1, !dbg !45
  %.extract77 = extractelement <4 x i32> %1752, i64 2, !dbg !45
  %.extract78 = extractelement <4 x i32> %1752, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract75, i32 %.extract76, i32 %.extract77, i32 %.extract78, ptr addrspace(1) %1570, i1 %1455) #1, !dbg !45
  %.extract79 = extractelement <4 x i32> %1753, i64 0, !dbg !45
  %.extract80 = extractelement <4 x i32> %1753, i64 1, !dbg !45
  %.extract81 = extractelement <4 x i32> %1753, i64 2, !dbg !45
  %.extract82 = extractelement <4 x i32> %1753, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract79, i32 %.extract80, i32 %.extract81, i32 %.extract82, ptr addrspace(1) %1572, i1 %1456) #1, !dbg !45
  %.extract83 = extractelement <4 x i32> %1754, i64 0, !dbg !45
  %.extract84 = extractelement <4 x i32> %1754, i64 1, !dbg !45
  %.extract85 = extractelement <4 x i32> %1754, i64 2, !dbg !45
  %.extract86 = extractelement <4 x i32> %1754, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract83, i32 %.extract84, i32 %.extract85, i32 %.extract86, ptr addrspace(1) %1574, i1 %1457) #1, !dbg !45
  %.extract87 = extractelement <4 x i32> %1755, i64 0, !dbg !45
  %.extract88 = extractelement <4 x i32> %1755, i64 1, !dbg !45
  %.extract89 = extractelement <4 x i32> %1755, i64 2, !dbg !45
  %.extract90 = extractelement <4 x i32> %1755, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract87, i32 %.extract88, i32 %.extract89, i32 %.extract90, ptr addrspace(1) %1576, i1 %1458) #1, !dbg !45
  %.extract91 = extractelement <4 x i32> %1756, i64 0, !dbg !45
  %.extract92 = extractelement <4 x i32> %1756, i64 1, !dbg !45
  %.extract93 = extractelement <4 x i32> %1756, i64 2, !dbg !45
  %.extract94 = extractelement <4 x i32> %1756, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract91, i32 %.extract92, i32 %.extract93, i32 %.extract94, ptr addrspace(1) %1578, i1 %1459) #1, !dbg !45
  %.extract95 = extractelement <4 x i32> %1757, i64 0, !dbg !45
  %.extract96 = extractelement <4 x i32> %1757, i64 1, !dbg !45
  %.extract97 = extractelement <4 x i32> %1757, i64 2, !dbg !45
  %.extract98 = extractelement <4 x i32> %1757, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract95, i32 %.extract96, i32 %.extract97, i32 %.extract98, ptr addrspace(1) %1580, i1 %1460) #1, !dbg !45
  %.extract99 = extractelement <4 x i32> %1758, i64 0, !dbg !45
  %.extract100 = extractelement <4 x i32> %1758, i64 1, !dbg !45
  %.extract101 = extractelement <4 x i32> %1758, i64 2, !dbg !45
  %.extract102 = extractelement <4 x i32> %1758, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract99, i32 %.extract100, i32 %.extract101, i32 %.extract102, ptr addrspace(1) %1582, i1 %1461) #1, !dbg !45
  %.extract103 = extractelement <4 x i32> %1759, i64 0, !dbg !45
  %.extract104 = extractelement <4 x i32> %1759, i64 1, !dbg !45
  %.extract105 = extractelement <4 x i32> %1759, i64 2, !dbg !45
  %.extract106 = extractelement <4 x i32> %1759, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract103, i32 %.extract104, i32 %.extract105, i32 %.extract106, ptr addrspace(1) %1584, i1 %1462) #1, !dbg !45
  %.extract107 = extractelement <4 x i32> %1760, i64 0, !dbg !45
  %.extract108 = extractelement <4 x i32> %1760, i64 1, !dbg !45
  %.extract109 = extractelement <4 x i32> %1760, i64 2, !dbg !45
  %.extract110 = extractelement <4 x i32> %1760, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract107, i32 %.extract108, i32 %.extract109, i32 %.extract110, ptr addrspace(1) %1586, i1 %1463) #1, !dbg !45
  %.extract111 = extractelement <4 x i32> %1761, i64 0, !dbg !45
  %.extract112 = extractelement <4 x i32> %1761, i64 1, !dbg !45
  %.extract113 = extractelement <4 x i32> %1761, i64 2, !dbg !45
  %.extract114 = extractelement <4 x i32> %1761, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract112, i32 %.extract113, i32 %.extract114, ptr addrspace(1) %1588, i1 %1464) #1, !dbg !45
  %.extract115 = extractelement <4 x i32> %1762, i64 0, !dbg !45
  %.extract116 = extractelement <4 x i32> %1762, i64 1, !dbg !45
  %.extract117 = extractelement <4 x i32> %1762, i64 2, !dbg !45
  %.extract118 = extractelement <4 x i32> %1762, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract115, i32 %.extract116, i32 %.extract117, i32 %.extract118, ptr addrspace(1) %1590, i1 %1465) #1, !dbg !45
  %.extract119 = extractelement <4 x i32> %1763, i64 0, !dbg !45
  %.extract120 = extractelement <4 x i32> %1763, i64 1, !dbg !45
  %.extract121 = extractelement <4 x i32> %1763, i64 2, !dbg !45
  %.extract122 = extractelement <4 x i32> %1763, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract119, i32 %.extract120, i32 %.extract121, i32 %.extract122, ptr addrspace(1) %1592, i1 %1466) #1, !dbg !45
  %.extract123 = extractelement <4 x i32> %1764, i64 0, !dbg !45
  %.extract124 = extractelement <4 x i32> %1764, i64 1, !dbg !45
  %.extract125 = extractelement <4 x i32> %1764, i64 2, !dbg !45
  %.extract126 = extractelement <4 x i32> %1764, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract123, i32 %.extract124, i32 %.extract125, i32 %.extract126, ptr addrspace(1) %1594, i1 %1467) #1, !dbg !45
  %.extract127 = extractelement <4 x i32> %1765, i64 0, !dbg !45
  %.extract128 = extractelement <4 x i32> %1765, i64 1, !dbg !45
  %.extract129 = extractelement <4 x i32> %1765, i64 2, !dbg !45
  %.extract130 = extractelement <4 x i32> %1765, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract127, i32 %.extract128, i32 %.extract129, i32 %.extract130, ptr addrspace(1) %1596, i1 %1468) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceinculxhyplim72ujwi2of4g6s7pujjq6u5s3sw543sprrlhq6o.py", directory: "/tmp/torchinductor_root/ei")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 27, scope: !6)
!23 = !DILocation(line: 54, column: 57, scope: !6)
!24 = !DILocation(line: 58, column: 57, scope: !6)
!25 = !DILocation(line: 66, column: 30, scope: !6)
!26 = !DILocation(line: 71, column: 31, scope: !6)
!27 = !DILocation(line: 77, column: 56, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 52, column: 40, scope: !6)
!39 = !DILocation(line: 85, column: 20, scope: !6)
!40 = !DILocation(line: 85, column: 34, scope: !6)
!41 = !DILocation(line: 85, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 26, scope: !6)
!43 = !DILocation(line: 88, column: 21, scope: !6)
!44 = !DILocation(line: 89, column: 25, scope: !6)
!45 = !DILocation(line: 89, column: 67, scope: !6)
!46 = !DILocation(line: 89, column: 4, scope: !6)
