; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 1, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 8, !dbg !11
  %.lobit = and i32 %11, 1, !dbg !11
  %12 = or disjoint i32 %.lobit, %9, !dbg !12
  %13 = icmp slt i32 %12, 512, !dbg !13
  %14 = shl i32 %10, 1, !dbg !14
  %15 = and i32 %14, 510, !dbg !14
  %16 = shl i32 %12, 7, !dbg !15
  %17 = and i32 %14, 126
  %invariant.op = or disjoint i32 %16, %17, !dbg !16
  %18 = zext nneg i32 %15 to i64, !dbg !16
  %19 = lshr i32 %15, 7, !dbg !17
  %20 = mul nuw nsw i32 %19, 526336, !dbg !18
  %.reass.us = add i32 %20, %invariant.op
  %21 = sext i32 %.reass.us to i64, !dbg !19
  %22 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !19
  br i1 %13, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %7
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 false) #4, !dbg !20
  %24 = or disjoint i64 %18, 512, !dbg !21
  %25 = lshr i64 %24, 7, !dbg !17
  %26 = trunc nuw nsw i64 %25 to i32
  %27 = mul nuw nsw i32 %26, 526336
  %.reass.1 = add i32 %27, %invariant.op
  %28 = sext i32 %.reass.1 to i64, !dbg !19
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 false) #4, !dbg !20
  %31 = insertelement <4 x i64> poison, i64 %18, i64 0, !dbg !21
  %32 = shufflevector <4 x i64> %31, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !21
  %33 = or disjoint <4 x i64> %32, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !21
  %34 = lshr <4 x i64> %33, splat (i64 7), !dbg !17
  %35 = trunc nuw nsw <4 x i64> %34 to <4 x i32>
  %36 = mul nuw nsw <4 x i32> %35, splat (i32 526336)
  %37 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> poison, <4 x i32> zeroinitializer
  %39 = add <4 x i32> %36, %38
  %40 = extractelement <4 x i32> %39, i64 3, !dbg !19
  %41 = sext i32 %40 to i64, !dbg !19
  %42 = getelementptr bfloat, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 false) #4, !dbg !20
  %44 = extractelement <4 x i32> %39, i64 2, !dbg !19
  %45 = sext i32 %44 to i64, !dbg !19
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %46, i1 false) #4, !dbg !20
  %48 = extractelement <4 x i32> %39, i64 1, !dbg !19
  %49 = sext i32 %48 to i64, !dbg !19
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %50, i1 false) #4, !dbg !20
  %52 = extractelement <4 x i32> %39, i64 0, !dbg !19
  %53 = sext i32 %52 to i64, !dbg !19
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %54, i1 false) #4, !dbg !20
  %56 = extractelement <4 x i64> %33, i64 0, !dbg !22
  %57 = extractelement <4 x i64> %33, i64 1, !dbg !22
  %58 = extractelement <4 x i64> %33, i64 2, !dbg !22
  %59 = extractelement <4 x i64> %33, i64 3, !dbg !22
  br label %.split5.us, !dbg !22

.split.us.preheader:                              ; preds = %7
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 true) #4, !dbg !20
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !20
  %62 = extractelement <2 x bfloat> %61, i64 0, !dbg !20
  %63 = extractelement <2 x bfloat> %61, i64 1, !dbg !20
  %64 = fpext bfloat %62 to float, !dbg !26
  %65 = fpext bfloat %63 to float, !dbg !26
  %66 = or disjoint i64 %18, 512, !dbg !21
  %67 = lshr i64 %66, 7, !dbg !17
  %68 = trunc nuw nsw i64 %67 to i32
  %69 = mul nuw nsw i32 %68, 526336
  %.reass.us.1 = add i32 %69, %invariant.op
  %70 = sext i32 %.reass.us.1 to i64, !dbg !19
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !19
  %72 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %71, i1 true) #4, !dbg !20
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !20
  %74 = extractelement <2 x bfloat> %73, i64 0, !dbg !20
  %75 = extractelement <2 x bfloat> %73, i64 1, !dbg !20
  %76 = fpext bfloat %74 to float, !dbg !26
  %77 = fpext bfloat %75 to float, !dbg !26
  %78 = fcmp olt bfloat %62, %74, !dbg !27
  %79 = fcmp olt bfloat %63, %75, !dbg !27
  %80 = fcmp uno bfloat %62, 0xR0000, !dbg !29
  %81 = fcmp uno bfloat %63, 0xR0000, !dbg !29
  %82 = or i1 %80, %78, !dbg !30
  %83 = or i1 %81, %79, !dbg !30
  %84 = select i1 %82, float %64, float %76, !dbg !31
  %85 = select i1 %83, float %65, float %77, !dbg !31
  %86 = fcmp ogt bfloat %62, %74, !dbg !32
  %87 = fcmp ogt bfloat %63, %75, !dbg !32
  %88 = or i1 %80, %86, !dbg !34
  %89 = or i1 %81, %87, !dbg !34
  %90 = select i1 %88, float %64, float %76, !dbg !35
  %91 = select i1 %89, float %65, float %77, !dbg !35
  %92 = insertelement <4 x i64> poison, i64 %18, i64 0, !dbg !21
  %93 = shufflevector <4 x i64> %92, <4 x i64> poison, <4 x i32> zeroinitializer, !dbg !21
  %94 = or disjoint <4 x i64> %93, <i64 2560, i64 2048, i64 1536, i64 1024>, !dbg !21
  %95 = fcmp uno float %84, 0.000000e+00, !dbg !29
  %96 = fcmp uno float %85, 0.000000e+00, !dbg !29
  %97 = fcmp uno float %90, 0.000000e+00, !dbg !36
  %98 = fcmp uno float %91, 0.000000e+00, !dbg !36
  %99 = lshr <4 x i64> %94, splat (i64 7), !dbg !17
  %100 = trunc nuw nsw <4 x i64> %99 to <4 x i32>
  %101 = mul nuw nsw <4 x i32> %100, splat (i32 526336)
  %102 = insertelement <4 x i32> poison, i32 %invariant.op, i64 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> poison, <4 x i32> zeroinitializer
  %104 = add <4 x i32> %101, %103
  %105 = extractelement <4 x i32> %104, i64 3, !dbg !19
  %106 = sext i32 %105 to i64, !dbg !19
  %107 = getelementptr bfloat, ptr addrspace(1) %0, i64 %106, !dbg !19
  %108 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %107, i1 true) #4, !dbg !20
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !20
  %110 = extractelement <2 x bfloat> %109, i64 0, !dbg !20
  %111 = extractelement <2 x bfloat> %109, i64 1, !dbg !20
  %112 = fpext bfloat %110 to float, !dbg !26
  %113 = fpext bfloat %111 to float, !dbg !26
  %114 = fcmp olt float %84, %112, !dbg !27
  %115 = fcmp olt float %85, %113, !dbg !27
  %116 = or i1 %95, %114, !dbg !30
  %117 = or i1 %96, %115, !dbg !30
  %118 = fcmp ogt float %90, %112, !dbg !32
  %119 = fcmp ogt float %91, %113, !dbg !32
  %120 = or i1 %97, %118, !dbg !34
  %121 = or i1 %98, %119, !dbg !34
  %122 = extractelement <4 x i32> %104, i64 2, !dbg !19
  %123 = sext i32 %122 to i64, !dbg !19
  %124 = getelementptr bfloat, ptr addrspace(1) %0, i64 %123, !dbg !19
  %125 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %124, i1 true) #4, !dbg !20
  %126 = bitcast i32 %125 to <2 x bfloat>, !dbg !20
  %127 = extractelement <4 x i32> %104, i64 1, !dbg !19
  %128 = sext i32 %127 to i64, !dbg !19
  %129 = getelementptr bfloat, ptr addrspace(1) %0, i64 %128, !dbg !19
  %130 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %129, i1 true) #4, !dbg !20
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !20
  %132 = extractelement <4 x i32> %104, i64 0, !dbg !19
  %133 = sext i32 %132 to i64, !dbg !19
  %134 = getelementptr bfloat, ptr addrspace(1) %0, i64 %133, !dbg !19
  %135 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %134, i1 true) #4, !dbg !20
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !20
  %137 = insertelement <2 x i1> poison, i1 %116, i64 0, !dbg !31
  %138 = insertelement <2 x i1> %137, i1 %117, i64 1, !dbg !31
  %139 = insertelement <2 x float> poison, float %84, i64 0, !dbg !31
  %140 = insertelement <2 x float> %139, float %85, i64 1, !dbg !31
  %141 = insertelement <2 x float> poison, float %112, i64 0, !dbg !31
  %142 = insertelement <2 x float> %141, float %113, i64 1, !dbg !31
  %143 = select <2 x i1> %138, <2 x float> %140, <2 x float> %142, !dbg !31
  %144 = fpext <2 x bfloat> %126 to <2 x float>, !dbg !26
  %145 = fcmp olt <2 x float> %143, %144, !dbg !27
  %146 = fcmp uno <2 x float> %143, zeroinitializer, !dbg !29
  %147 = or <2 x i1> %146, %145, !dbg !30
  %148 = select <2 x i1> %147, <2 x float> %143, <2 x float> %144, !dbg !31
  %149 = fpext <2 x bfloat> %131 to <2 x float>, !dbg !26
  %150 = fcmp olt <2 x float> %148, %149, !dbg !27
  %151 = fcmp uno <2 x float> %148, zeroinitializer, !dbg !29
  %152 = or <2 x i1> %151, %150, !dbg !30
  %153 = select <2 x i1> %152, <2 x float> %148, <2 x float> %149, !dbg !31
  %154 = fpext <2 x bfloat> %136 to <2 x float>, !dbg !26
  %155 = fcmp olt <2 x float> %153, %154, !dbg !27
  %156 = fcmp uno <2 x float> %153, zeroinitializer, !dbg !29
  %157 = or <2 x i1> %156, %155, !dbg !30
  %158 = select <2 x i1> %157, <2 x float> %153, <2 x float> %154, !dbg !31
  %159 = insertelement <2 x i1> poison, i1 %120, i64 0, !dbg !35
  %160 = insertelement <2 x i1> %159, i1 %121, i64 1, !dbg !35
  %161 = insertelement <2 x float> poison, float %90, i64 0, !dbg !35
  %162 = insertelement <2 x float> %161, float %91, i64 1, !dbg !35
  %163 = select <2 x i1> %160, <2 x float> %162, <2 x float> %142, !dbg !35
  %164 = fcmp uno <2 x float> %163, zeroinitializer, !dbg !36
  %165 = fcmp ogt <2 x float> %163, %144, !dbg !32
  %166 = or <2 x i1> %164, %165, !dbg !34
  %167 = select <2 x i1> %166, <2 x float> %163, <2 x float> %144, !dbg !35
  %168 = fcmp ogt <2 x float> %167, %149, !dbg !32
  %169 = fcmp uno <2 x float> %167, zeroinitializer, !dbg !36
  %170 = or <2 x i1> %169, %168, !dbg !34
  %171 = select <2 x i1> %170, <2 x float> %167, <2 x float> %149, !dbg !35
  %172 = fcmp ogt <2 x float> %171, %154, !dbg !32
  %173 = fcmp uno <2 x float> %171, zeroinitializer, !dbg !36
  %174 = or <2 x i1> %173, %172, !dbg !34
  %175 = select <2 x i1> %174, <2 x float> %171, <2 x float> %154, !dbg !35
  %176 = extractelement <4 x i64> %94, i64 0, !dbg !22
  %177 = extractelement <4 x i64> %94, i64 1, !dbg !22
  %178 = extractelement <4 x i64> %94, i64 2, !dbg !22
  %179 = extractelement <4 x i64> %94, i64 3, !dbg !22
  br label %.split5.us, !dbg !22

.split5.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %.pre-phi36 = phi i64 [ %56, %.split.preheader ], [ %176, %.split.us.preheader ], !dbg !37
  %.pre-phi31 = phi i64 [ %57, %.split.preheader ], [ %177, %.split.us.preheader ], !dbg !37
  %.pre-phi26 = phi i64 [ %58, %.split.preheader ], [ %178, %.split.us.preheader ], !dbg !37
  %.pre-phi21 = phi i64 [ %59, %.split.preheader ], [ %179, %.split.us.preheader ], !dbg !37
  %.pre-phi20 = phi i64 [ %28, %.split.preheader ], [ %70, %.split.us.preheader ], !dbg !38
  %.pre-phi16 = phi i64 [ %24, %.split.preheader ], [ %66, %.split.us.preheader ], !dbg !37
  %180 = phi <4 x i32> [ %39, %.split.preheader ], [ %104, %.split.us.preheader ], !dbg !38
  %181 = phi <2 x float> [ splat (float 0x7FF0000000000000), %.split.preheader ], [ %158, %.split.us.preheader ], !dbg !22
  %182 = phi <2 x float> [ splat (float 0xFFF0000000000000), %.split.preheader ], [ %175, %.split.us.preheader ], !dbg !22
  %183 = and i32 %10, 1, !dbg !11
  %184 = or disjoint i32 %9, %183, !dbg !12
  %185 = icmp slt i32 %184, 512, !dbg !13
  %186 = and i32 %10, 31, !dbg !11
  %187 = lshr i32 %10, 5, !dbg !11
  %188 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %181, <2 x i32> <i32 0, i32 2>, !dbg !39
  %189 = fcmp olt <2 x float> %188, %181, !dbg !39
  %190 = fcmp uno <2 x float> %188, %181, !dbg !39
  %shift = shufflevector <2 x i1> %189, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %191 = or <2 x i1> %shift, %190, !dbg !41
  %192 = extractelement <2 x i1> %191, i64 0, !dbg !41
  %193 = extractelement <2 x float> %181, i64 0, !dbg !42
  %194 = extractelement <2 x float> %181, i64 1, !dbg !42
  %195 = select i1 %192, float %193, float %194, !dbg !42
  %196 = bitcast float %195 to i32, !dbg !22
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 16, i32 31), !dbg !22
  %198 = bitcast i32 %197 to float, !dbg !22
  %199 = fcmp olt float %195, %198, !dbg !39
  %200 = fcmp uno float %195, 0.000000e+00, !dbg !43
  %201 = or i1 %200, %199, !dbg !41
  %202 = select i1 %201, float %195, float %198, !dbg !42
  %203 = bitcast float %202 to i32, !dbg !22
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !22
  %205 = bitcast i32 %204 to float, !dbg !22
  %206 = fcmp olt float %202, %205, !dbg !39
  %207 = fcmp uno float %202, 0.000000e+00, !dbg !43
  %208 = or i1 %206, %207, !dbg !41
  %209 = select i1 %208, float %202, float %205, !dbg !42
  %210 = bitcast float %209 to i32, !dbg !22
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !22
  %212 = bitcast i32 %211 to float, !dbg !22
  %213 = fcmp olt float %209, %212, !dbg !39
  %214 = fcmp uno float %209, 0.000000e+00, !dbg !43
  %215 = or i1 %213, %214, !dbg !41
  %216 = select i1 %215, float %209, float %212, !dbg !42
  %217 = bitcast float %216 to i32, !dbg !22
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !22
  %219 = bitcast i32 %218 to float, !dbg !22
  %220 = fcmp olt float %216, %219, !dbg !39
  %221 = fcmp uno float %216, 0.000000e+00, !dbg !43
  %222 = or i1 %220, %221, !dbg !41
  %223 = select i1 %222, float %216, float %219, !dbg !42
  %224 = bitcast float %223 to i32, !dbg !22
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !22
  %226 = bitcast i32 %225 to float, !dbg !22
  %227 = fcmp olt float %223, %226, !dbg !39
  %228 = fcmp uno float %223, 0.000000e+00, !dbg !43
  %229 = or i1 %227, %228, !dbg !41
  %230 = and i32 %187, 7, !dbg !22
  %231 = icmp eq i32 %186, 0, !dbg !22
  %232 = shl nuw nsw i32 %.lobit, 3, !dbg !22
  %233 = or disjoint i32 %232, %230, !dbg !22
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !22
  %235 = select i1 %229, i32 %224, i32 %225, !dbg !42
  %236 = insertelement <1 x i32> poison, i32 %235, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %236, i1 %231) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %237 = icmp slt i32 %10, 16, !dbg !22
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !22
  %239 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %238, i1 %237) #4, !dbg !22
  %240 = bitcast i32 %239 to float, !dbg !22
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !22
  %242 = bitcast i32 %241 to float, !dbg !22
  %243 = fcmp olt float %240, %242, !dbg !39
  %244 = fcmp uno float %240, 0.000000e+00, !dbg !43
  %245 = or i1 %244, %243, !dbg !41
  %246 = select i1 %245, float %240, float %242, !dbg !42
  %247 = bitcast float %246 to i32, !dbg !22
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !22
  %249 = bitcast i32 %248 to float, !dbg !22
  %250 = fcmp olt float %246, %249, !dbg !39
  %251 = fcmp uno float %246, 0.000000e+00, !dbg !43
  %252 = or i1 %250, %251, !dbg !41
  %253 = select i1 %252, float %246, float %249, !dbg !42
  %254 = bitcast float %253 to i32, !dbg !22
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !22
  %256 = bitcast i32 %255 to float, !dbg !22
  %257 = fcmp olt float %253, %256, !dbg !39
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !43
  %259 = or i1 %257, %258, !dbg !41
  %260 = and i32 %10, 7, !dbg !22
  %261 = icmp eq i32 %260, 0, !dbg !22
  %262 = and i1 %237, %261, !dbg !22
  %263 = select i1 %259, i32 %254, i32 %255, !dbg !42
  %264 = insertelement <1 x i32> poison, i32 %263, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %264, i1 %262) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !22
  %266 = load float, ptr addrspace(3) %265, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %267 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !44
  %268 = bitcast float %266 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %269 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %183, !dbg !44
  %270 = load float, ptr addrspace(3) %269, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %271 = shufflevector <2 x float> <float 0.000000e+00, float poison>, <2 x float> %182, <2 x i32> <i32 0, i32 2>, !dbg !47
  %272 = fcmp ogt <2 x float> %271, %182, !dbg !47
  %273 = fcmp uno <2 x float> %271, %182, !dbg !47
  %shift41 = shufflevector <2 x i1> %272, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %274 = or <2 x i1> %shift41, %273, !dbg !48
  %275 = extractelement <2 x i1> %274, i64 0, !dbg !48
  %276 = extractelement <2 x float> %182, i64 0, !dbg !49
  %277 = extractelement <2 x float> %182, i64 1, !dbg !49
  %278 = select i1 %275, float %276, float %277, !dbg !49
  %279 = bitcast float %278 to i32, !dbg !45
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !45
  %281 = bitcast i32 %280 to float, !dbg !45
  %282 = fcmp ogt float %278, %281, !dbg !47
  %283 = fcmp uno float %278, 0.000000e+00, !dbg !50
  %284 = or i1 %283, %282, !dbg !48
  %285 = select i1 %284, float %278, float %281, !dbg !49
  %286 = bitcast float %285 to i32, !dbg !45
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 8, i32 31), !dbg !45
  %288 = bitcast i32 %287 to float, !dbg !45
  %289 = fcmp ogt float %285, %288, !dbg !47
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !50
  %291 = or i1 %289, %290, !dbg !48
  %292 = select i1 %291, float %285, float %288, !dbg !49
  %293 = bitcast float %292 to i32, !dbg !45
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !45
  %295 = bitcast i32 %294 to float, !dbg !45
  %296 = fcmp ogt float %292, %295, !dbg !47
  %297 = fcmp uno float %292, 0.000000e+00, !dbg !50
  %298 = or i1 %296, %297, !dbg !48
  %299 = select i1 %298, float %292, float %295, !dbg !49
  %300 = bitcast float %299 to i32, !dbg !45
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 2, i32 31), !dbg !45
  %302 = bitcast i32 %301 to float, !dbg !45
  %303 = fcmp ogt float %299, %302, !dbg !47
  %304 = fcmp uno float %299, 0.000000e+00, !dbg !50
  %305 = or i1 %303, %304, !dbg !48
  %306 = select i1 %305, float %299, float %302, !dbg !49
  %307 = bitcast float %306 to i32, !dbg !45
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !45
  %309 = bitcast i32 %308 to float, !dbg !45
  %310 = fcmp ogt float %306, %309, !dbg !47
  %311 = fcmp uno float %306, 0.000000e+00, !dbg !50
  %312 = or i1 %310, %311, !dbg !48
  %313 = select i1 %312, i32 %307, i32 %308, !dbg !49
  %314 = insertelement <1 x i32> poison, i32 %313, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %314, i1 %231) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %315 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %238, i1 %237) #4, !dbg !45
  %316 = bitcast i32 %315 to float, !dbg !45
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !45
  %318 = bitcast i32 %317 to float, !dbg !45
  %319 = fcmp ogt float %316, %318, !dbg !47
  %320 = fcmp uno float %316, 0.000000e+00, !dbg !50
  %321 = or i1 %320, %319, !dbg !48
  %322 = select i1 %321, float %316, float %318, !dbg !49
  %323 = bitcast float %322 to i32, !dbg !45
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 2, i32 31), !dbg !45
  %325 = bitcast i32 %324 to float, !dbg !45
  %326 = fcmp ogt float %322, %325, !dbg !47
  %327 = fcmp uno float %322, 0.000000e+00, !dbg !50
  %328 = or i1 %326, %327, !dbg !48
  %329 = select i1 %328, float %322, float %325, !dbg !49
  %330 = bitcast float %329 to i32, !dbg !45
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !45
  %332 = bitcast i32 %331 to float, !dbg !45
  %333 = fcmp ogt float %329, %332, !dbg !47
  %334 = fcmp uno float %329, 0.000000e+00, !dbg !50
  %335 = or i1 %333, %334, !dbg !48
  %336 = select i1 %335, i32 %330, i32 %331, !dbg !49
  %337 = insertelement <1 x i32> poison, i32 %336, i64 0, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %337, i1 %262) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %338 = load float, ptr addrspace(3) %265, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %339 = bitcast float %338 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %339, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %340 = load float, ptr addrspace(3) %269, align 4, !dbg !51
  %341 = sext i32 %184 to i64, !dbg !52
  %342 = getelementptr bfloat, ptr addrspace(1) %1, i64 %341, !dbg !52
  %343 = fptrunc float %270 to bfloat, !dbg !44
  %344 = and i32 %10, 510, !dbg !44
  %345 = icmp eq i32 %344, 0, !dbg !44
  %346 = bitcast bfloat %343 to i16, !dbg !44
  %347 = and i1 %345, %185, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %346, ptr addrspace(1) %342, i1 %347) #4, !dbg !44
  %348 = getelementptr bfloat, ptr addrspace(1) %2, i64 %341, !dbg !53
  %349 = fptrunc float %340 to bfloat, !dbg !51
  %350 = bitcast bfloat %349 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %350, ptr addrspace(1) %348, i1 %347) #4, !dbg !51
  %.inv = fcmp oge float %266, 0.000000e+00, !dbg !54
  %351 = select i1 %.inv, float 0.000000e+00, float %266, !dbg !54
  %352 = fsub float 0.000000e+00, %351, !dbg !56
  %.inv2 = fcmp ole float %338, 0.000000e+00, !dbg !57
  %353 = select i1 %.inv2, float 0.000000e+00, float %338, !dbg !57
  %354 = fcmp ogt float %352, %353, !dbg !59
  %355 = fcmp uno float %352, 0.000000e+00, !dbg !61
  %356 = or i1 %355, %354, !dbg !62
  %357 = select i1 %356, float %352, float %353, !dbg !63
  %358 = fmul float %357, 0x3F80204080000000, !dbg !64
  %359 = fcmp ogt float %358, 0x3EE4F8B580000000, !dbg !65
  %360 = fcmp uno float %358, 0.000000e+00, !dbg !67
  %361 = or i1 %359, %360, !dbg !68
  %362 = select i1 %361, float %358, float 0x3EE4F8B580000000, !dbg !69
  %363 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %362), !dbg !70
  %364 = mul i32 %12, 3072, !dbg !71
  %365 = getelementptr bfloat, ptr addrspace(1) %0, i64 %21, !dbg !38
  %366 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %365, i1 %13) #4, !dbg !72
  %367 = bitcast i32 %366 to <2 x bfloat>, !dbg !72
  %368 = extractelement <2 x bfloat> %367, i64 0, !dbg !72
  %369 = extractelement <2 x bfloat> %367, i64 1, !dbg !72
  %370 = fpext bfloat %368 to float, !dbg !73
  %371 = fpext bfloat %369 to float, !dbg !73
  %372 = fmul float %363, %370, !dbg !74
  %373 = fmul float %363, %371, !dbg !74
  %374 = tail call float @llvm.nvvm.round.f(float %372) #4, !dbg !75
  %375 = tail call float @llvm.nvvm.round.f(float %373) #4, !dbg !75
  %376 = insertelement <2 x float> poison, float %374, i64 0, !dbg !76
  %377 = insertelement <2 x float> %376, float %375, i64 1, !dbg !76
  %378 = fcmp ogt <2 x float> %377, splat (float -1.270000e+02), !dbg !76
  %379 = fcmp uno <2 x float> %377, zeroinitializer, !dbg !78
  %380 = or <2 x i1> %378, %379, !dbg !79
  %381 = select <2 x i1> %380, <2 x float> %377, <2 x float> splat (float -1.270000e+02), !dbg !80
  %382 = fcmp olt <2 x float> %381, splat (float 1.270000e+02), !dbg !81
  %383 = fcmp uno <2 x float> %381, zeroinitializer, !dbg !83
  %384 = or <2 x i1> %382, %383, !dbg !84
  %385 = fptosi <2 x float> %381 to <2 x i8>, !dbg !85
  %386 = select <2 x i1> %384, <2 x i8> %385, <2 x i8> splat (i8 127), !dbg !86
  %387 = or disjoint i32 %15, %364, !dbg !87
  %388 = sext i32 %387 to i64, !dbg !88
  %389 = getelementptr i8, ptr addrspace(1) %3, i64 %388, !dbg !88
  %390 = bitcast <2 x i8> %386 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %390, ptr addrspace(1) %389, i1 %13) #4, !dbg !89
  %391 = getelementptr bfloat, ptr addrspace(1) %0, i64 %.pre-phi20, !dbg !38
  %392 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %391, i1 %13) #4, !dbg !72
  %393 = bitcast i32 %392 to <2 x bfloat>, !dbg !72
  %394 = extractelement <2 x bfloat> %393, i64 0, !dbg !72
  %395 = extractelement <2 x bfloat> %393, i64 1, !dbg !72
  %396 = fpext bfloat %394 to float, !dbg !73
  %397 = fpext bfloat %395 to float, !dbg !73
  %398 = fmul float %363, %396, !dbg !74
  %399 = fmul float %363, %397, !dbg !74
  %400 = tail call float @llvm.nvvm.round.f(float %398) #4, !dbg !75
  %401 = tail call float @llvm.nvvm.round.f(float %399) #4, !dbg !75
  %402 = insertelement <2 x float> poison, float %400, i64 0, !dbg !76
  %403 = insertelement <2 x float> %402, float %401, i64 1, !dbg !76
  %404 = fcmp ogt <2 x float> %403, splat (float -1.270000e+02), !dbg !76
  %405 = fcmp uno <2 x float> %403, zeroinitializer, !dbg !78
  %406 = or <2 x i1> %404, %405, !dbg !79
  %407 = select <2 x i1> %406, <2 x float> %403, <2 x float> splat (float -1.270000e+02), !dbg !80
  %408 = fcmp olt <2 x float> %407, splat (float 1.270000e+02), !dbg !81
  %409 = fcmp uno <2 x float> %407, zeroinitializer, !dbg !83
  %410 = or <2 x i1> %408, %409, !dbg !84
  %411 = fptosi <2 x float> %407 to <2 x i8>, !dbg !85
  %412 = select <2 x i1> %410, <2 x i8> %411, <2 x i8> splat (i8 127), !dbg !86
  %413 = trunc nuw nsw i64 %.pre-phi16 to i32, !dbg !87
  %414 = add i32 %364, %413, !dbg !87
  %415 = sext i32 %414 to i64, !dbg !88
  %416 = getelementptr i8, ptr addrspace(1) %3, i64 %415, !dbg !88
  %417 = bitcast <2 x i8> %412 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %417, ptr addrspace(1) %416, i1 %13) #4, !dbg !89
  %418 = extractelement <4 x i32> %180, i64 3, !dbg !38
  %419 = sext i32 %418 to i64, !dbg !38
  %420 = getelementptr bfloat, ptr addrspace(1) %0, i64 %419, !dbg !38
  %421 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %420, i1 %13) #4, !dbg !72
  %422 = bitcast i32 %421 to <2 x bfloat>, !dbg !72
  %423 = extractelement <2 x bfloat> %422, i64 0, !dbg !72
  %424 = extractelement <2 x bfloat> %422, i64 1, !dbg !72
  %425 = fpext bfloat %423 to float, !dbg !73
  %426 = fpext bfloat %424 to float, !dbg !73
  %427 = fmul float %363, %425, !dbg !74
  %428 = fmul float %363, %426, !dbg !74
  %429 = tail call float @llvm.nvvm.round.f(float %427) #4, !dbg !75
  %430 = tail call float @llvm.nvvm.round.f(float %428) #4, !dbg !75
  %431 = insertelement <2 x float> poison, float %429, i64 0, !dbg !76
  %432 = insertelement <2 x float> %431, float %430, i64 1, !dbg !76
  %433 = fcmp ogt <2 x float> %432, splat (float -1.270000e+02), !dbg !76
  %434 = fcmp uno <2 x float> %432, zeroinitializer, !dbg !78
  %435 = or <2 x i1> %433, %434, !dbg !79
  %436 = select <2 x i1> %435, <2 x float> %432, <2 x float> splat (float -1.270000e+02), !dbg !80
  %437 = fcmp olt <2 x float> %436, splat (float 1.270000e+02), !dbg !81
  %438 = fcmp uno <2 x float> %436, zeroinitializer, !dbg !83
  %439 = or <2 x i1> %437, %438, !dbg !84
  %440 = fptosi <2 x float> %436 to <2 x i8>, !dbg !85
  %441 = select <2 x i1> %439, <2 x i8> %440, <2 x i8> splat (i8 127), !dbg !86
  %442 = trunc nuw nsw i64 %.pre-phi21 to i32, !dbg !87
  %443 = add i32 %364, %442, !dbg !87
  %444 = sext i32 %443 to i64, !dbg !88
  %445 = getelementptr i8, ptr addrspace(1) %3, i64 %444, !dbg !88
  %446 = bitcast <2 x i8> %441 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %446, ptr addrspace(1) %445, i1 %13) #4, !dbg !89
  %447 = extractelement <4 x i32> %180, i64 2, !dbg !38
  %448 = sext i32 %447 to i64, !dbg !38
  %449 = getelementptr bfloat, ptr addrspace(1) %0, i64 %448, !dbg !38
  %450 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %449, i1 %13) #4, !dbg !72
  %451 = bitcast i32 %450 to <2 x bfloat>, !dbg !72
  %452 = extractelement <2 x bfloat> %451, i64 0, !dbg !72
  %453 = extractelement <2 x bfloat> %451, i64 1, !dbg !72
  %454 = fpext bfloat %452 to float, !dbg !73
  %455 = fpext bfloat %453 to float, !dbg !73
  %456 = fmul float %363, %454, !dbg !74
  %457 = fmul float %363, %455, !dbg !74
  %458 = tail call float @llvm.nvvm.round.f(float %456) #4, !dbg !75
  %459 = tail call float @llvm.nvvm.round.f(float %457) #4, !dbg !75
  %460 = insertelement <2 x float> poison, float %458, i64 0, !dbg !76
  %461 = insertelement <2 x float> %460, float %459, i64 1, !dbg !76
  %462 = fcmp ogt <2 x float> %461, splat (float -1.270000e+02), !dbg !76
  %463 = fcmp uno <2 x float> %461, zeroinitializer, !dbg !78
  %464 = or <2 x i1> %462, %463, !dbg !79
  %465 = select <2 x i1> %464, <2 x float> %461, <2 x float> splat (float -1.270000e+02), !dbg !80
  %466 = fcmp olt <2 x float> %465, splat (float 1.270000e+02), !dbg !81
  %467 = fcmp uno <2 x float> %465, zeroinitializer, !dbg !83
  %468 = or <2 x i1> %466, %467, !dbg !84
  %469 = fptosi <2 x float> %465 to <2 x i8>, !dbg !85
  %470 = select <2 x i1> %468, <2 x i8> %469, <2 x i8> splat (i8 127), !dbg !86
  %471 = trunc nuw nsw i64 %.pre-phi26 to i32, !dbg !87
  %472 = add i32 %364, %471, !dbg !87
  %473 = sext i32 %472 to i64, !dbg !88
  %474 = getelementptr i8, ptr addrspace(1) %3, i64 %473, !dbg !88
  %475 = bitcast <2 x i8> %470 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %475, ptr addrspace(1) %474, i1 %13) #4, !dbg !89
  %476 = extractelement <4 x i32> %180, i64 1, !dbg !38
  %477 = sext i32 %476 to i64, !dbg !38
  %478 = getelementptr bfloat, ptr addrspace(1) %0, i64 %477, !dbg !38
  %479 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %478, i1 %13) #4, !dbg !72
  %480 = bitcast i32 %479 to <2 x bfloat>, !dbg !72
  %481 = extractelement <2 x bfloat> %480, i64 0, !dbg !72
  %482 = extractelement <2 x bfloat> %480, i64 1, !dbg !72
  %483 = fpext bfloat %481 to float, !dbg !73
  %484 = fpext bfloat %482 to float, !dbg !73
  %485 = fmul float %363, %483, !dbg !74
  %486 = fmul float %363, %484, !dbg !74
  %487 = tail call float @llvm.nvvm.round.f(float %485) #4, !dbg !75
  %488 = tail call float @llvm.nvvm.round.f(float %486) #4, !dbg !75
  %489 = insertelement <2 x float> poison, float %487, i64 0, !dbg !76
  %490 = insertelement <2 x float> %489, float %488, i64 1, !dbg !76
  %491 = fcmp ogt <2 x float> %490, splat (float -1.270000e+02), !dbg !76
  %492 = fcmp uno <2 x float> %490, zeroinitializer, !dbg !78
  %493 = or <2 x i1> %491, %492, !dbg !79
  %494 = select <2 x i1> %493, <2 x float> %490, <2 x float> splat (float -1.270000e+02), !dbg !80
  %495 = fcmp olt <2 x float> %494, splat (float 1.270000e+02), !dbg !81
  %496 = fcmp uno <2 x float> %494, zeroinitializer, !dbg !83
  %497 = or <2 x i1> %495, %496, !dbg !84
  %498 = fptosi <2 x float> %494 to <2 x i8>, !dbg !85
  %499 = select <2 x i1> %497, <2 x i8> %498, <2 x i8> splat (i8 127), !dbg !86
  %500 = trunc nuw nsw i64 %.pre-phi31 to i32, !dbg !87
  %501 = add i32 %364, %500, !dbg !87
  %502 = sext i32 %501 to i64, !dbg !88
  %503 = getelementptr i8, ptr addrspace(1) %3, i64 %502, !dbg !88
  %504 = bitcast <2 x i8> %499 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %504, ptr addrspace(1) %503, i1 %13) #4, !dbg !89
  %505 = extractelement <4 x i32> %180, i64 0, !dbg !38
  %506 = sext i32 %505 to i64, !dbg !38
  %507 = getelementptr bfloat, ptr addrspace(1) %0, i64 %506, !dbg !38
  %508 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %507, i1 %13) #4, !dbg !72
  %509 = bitcast i32 %508 to <2 x bfloat>, !dbg !72
  %510 = extractelement <2 x bfloat> %509, i64 0, !dbg !72
  %511 = extractelement <2 x bfloat> %509, i64 1, !dbg !72
  %512 = fpext bfloat %510 to float, !dbg !73
  %513 = fpext bfloat %511 to float, !dbg !73
  %514 = fmul float %363, %512, !dbg !74
  %515 = fmul float %363, %513, !dbg !74
  %516 = tail call float @llvm.nvvm.round.f(float %514) #4, !dbg !75
  %517 = tail call float @llvm.nvvm.round.f(float %515) #4, !dbg !75
  %518 = insertelement <2 x float> poison, float %516, i64 0, !dbg !76
  %519 = insertelement <2 x float> %518, float %517, i64 1, !dbg !76
  %520 = fcmp ogt <2 x float> %519, splat (float -1.270000e+02), !dbg !76
  %521 = fcmp uno <2 x float> %519, zeroinitializer, !dbg !78
  %522 = or <2 x i1> %520, %521, !dbg !79
  %523 = select <2 x i1> %522, <2 x float> %519, <2 x float> splat (float -1.270000e+02), !dbg !80
  %524 = fcmp olt <2 x float> %523, splat (float 1.270000e+02), !dbg !81
  %525 = fcmp uno <2 x float> %523, zeroinitializer, !dbg !83
  %526 = or <2 x i1> %524, %525, !dbg !84
  %527 = fptosi <2 x float> %523 to <2 x i8>, !dbg !85
  %528 = select <2 x i1> %526, <2 x i8> %527, <2 x i8> splat (i8 127), !dbg !86
  %529 = trunc nuw nsw i64 %.pre-phi36 to i32, !dbg !87
  %530 = add i32 %364, %529, !dbg !87
  %531 = sext i32 %530 to i64, !dbg !88
  %532 = getelementptr i8, ptr addrspace(1) %3, i64 %531, !dbg !88
  %533 = bitcast <2 x i8> %528 to i16, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %533, ptr addrspace(1) %532, i1 %13) #4, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnfeeuff2srau22hcscreqrsvvhiuhx6xppalfghrtnhaosx7ti.py", directory: "/tmp/torchinductor_root/cn")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_reciprocal_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 23, column: 33, scope: !6)
!11 = !DILocation(line: 24, column: 44, scope: !6)
!12 = !DILocation(line: 24, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 21, scope: !6)
!14 = !DILocation(line: 26, column: 37, scope: !6)
!15 = !DILocation(line: 37, column: 38, scope: !6)
!16 = !DILocation(line: 31, column: 40, scope: !6)
!17 = !DILocation(line: 37, column: 59, scope: !6)
!18 = !DILocation(line: 37, column: 51, scope: !6)
!19 = !DILocation(line: 37, column: 34, scope: !6)
!20 = !DILocation(line: 37, column: 83, scope: !6)
!21 = !DILocation(line: 32, column: 31, scope: !6)
!22 = !DILocation(line: 110, column: 29, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 43, column: 38, scope: !6)
!26 = !DILocation(line: 37, column: 144, scope: !6)
!27 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !28)
!28 = !DILocation(line: 39, column: 45, scope: !6)
!29 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !28)
!30 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !28)
!31 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !28)
!32 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 45, scope: !6)
!34 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !33)
!35 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !33)
!36 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !33)
!37 = !DILocation(line: 48, column: 31, scope: !6)
!38 = !DILocation(line: 53, column: 34, scope: !6)
!39 = !DILocation(line: 94, column: 15, scope: !40, inlinedAt: !25)
!40 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!41 = !DILocation(line: 96, column: 16, scope: !40, inlinedAt: !25)
!42 = !DILocation(line: 97, column: 29, scope: !40, inlinedAt: !25)
!43 = !DILocation(line: 96, column: 21, scope: !40, inlinedAt: !25)
!44 = !DILocation(line: 45, column: 36, scope: !6)
!45 = !DILocation(line: 115, column: 29, scope: !23, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 38, scope: !6)
!47 = !DILocation(line: 102, column: 15, scope: !40, inlinedAt: !46)
!48 = !DILocation(line: 104, column: 16, scope: !40, inlinedAt: !46)
!49 = !DILocation(line: 105, column: 29, scope: !40, inlinedAt: !46)
!50 = !DILocation(line: 104, column: 21, scope: !40, inlinedAt: !46)
!51 = !DILocation(line: 46, column: 36, scope: !6)
!52 = !DILocation(line: 45, column: 25, scope: !6)
!53 = !DILocation(line: 46, column: 25, scope: !6)
!54 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !55)
!55 = !DILocation(line: 55, column: 44, scope: !6)
!56 = !DILocation(line: 56, column: 16, scope: !6)
!57 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 45, scope: !6)
!59 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !60)
!60 = !DILocation(line: 58, column: 45, scope: !6)
!61 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !60)
!62 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !60)
!63 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !60)
!64 = !DILocation(line: 60, column: 24, scope: !6)
!65 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 46, scope: !6)
!67 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !66)
!68 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !66)
!69 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !66)
!70 = !DILocation(line: 66, column: 25, scope: !6)
!71 = !DILocation(line: 78, column: 41, scope: !6)
!72 = !DILocation(line: 53, column: 83, scope: !6)
!73 = !DILocation(line: 53, column: 145, scope: !6)
!74 = !DILocation(line: 69, column: 23, scope: !6)
!75 = !DILocation(line: 70, column: 36, scope: !6)
!76 = !DILocation(line: 102, column: 15, scope: !23, inlinedAt: !77)
!77 = !DILocation(line: 73, column: 46, scope: !6)
!78 = !DILocation(line: 104, column: 21, scope: !23, inlinedAt: !77)
!79 = !DILocation(line: 104, column: 16, scope: !23, inlinedAt: !77)
!80 = !DILocation(line: 105, column: 29, scope: !23, inlinedAt: !77)
!81 = !DILocation(line: 94, column: 15, scope: !23, inlinedAt: !82)
!82 = !DILocation(line: 75, column: 46, scope: !6)
!83 = !DILocation(line: 96, column: 21, scope: !23, inlinedAt: !82)
!84 = !DILocation(line: 96, column: 16, scope: !23, inlinedAt: !82)
!85 = !DILocation(line: 77, column: 25, scope: !6)
!86 = !DILocation(line: 97, column: 29, scope: !23, inlinedAt: !82)
!87 = !DILocation(line: 78, column: 36, scope: !6)
!88 = !DILocation(line: 78, column: 29, scope: !6)
!89 = !DILocation(line: 78, column: 53, scope: !6)
!90 = !DILocation(line: 47, column: 4, scope: !6)
