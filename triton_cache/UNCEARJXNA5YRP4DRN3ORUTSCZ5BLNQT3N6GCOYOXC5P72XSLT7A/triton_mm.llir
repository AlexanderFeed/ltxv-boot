; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 96, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 1, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 96, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 8, !dbg !19
  %19 = and i32 %17, 16, !dbg !19
  %20 = and i32 %17, 31, !dbg !19
  %21 = or disjoint i32 %20, 32, !dbg !19
  %22 = or disjoint i32 %14, %20, !dbg !20
  %23 = or disjoint i32 %14, %21, !dbg !20
  %24 = or disjoint i32 %22, 64, !dbg !20
  %25 = or disjoint i32 %22, 96, !dbg !20
  %26 = shl nsw i32 %13, 6, !dbg !21
  %27 = shl i32 %15, 3, !dbg !22
  %28 = and i32 %27, 24, !dbg !22
  %29 = or disjoint i32 %26, %20, !dbg !23
  %30 = or disjoint i32 %26, %21, !dbg !23
  %31 = srem i32 %22, 77, !dbg !24
  %32 = srem i32 %23, 77, !dbg !24
  %33 = srem i32 %24, 77, !dbg !24
  %34 = srem i32 %25, 77, !dbg !24
  %35 = srem i32 %29, 768, !dbg !25
  %.lhs.trunc = trunc i32 %30 to i16, !dbg !25
  %36 = srem i16 %.lhs.trunc, 768, !dbg !25
  %.sext = sext i16 %36 to i32, !dbg !25
  %37 = mul nsw i32 %31, 768, !dbg !26
  %38 = mul nsw i32 %32, 768, !dbg !26
  %39 = mul nsw i32 %33, 768, !dbg !26
  %40 = mul nsw i32 %34, 768, !dbg !26
  %41 = mul nsw i32 %35, 768, !dbg !27
  %42 = mul nsw i32 %.sext, 768, !dbg !27
  %43 = or disjoint i32 %37, %28, !dbg !28
  %44 = or disjoint i32 %38, %28, !dbg !28
  %45 = or disjoint i32 %39, %28, !dbg !28
  %46 = or disjoint i32 %40, %28, !dbg !28
  %47 = sext i32 %43 to i64, !dbg !29
  %48 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !29
  %49 = sext i32 %44 to i64, !dbg !29
  %50 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !29
  %51 = sext i32 %45 to i64, !dbg !29
  %52 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !29
  %53 = sext i32 %46 to i64, !dbg !29
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !29
  %55 = xor i32 %27, %15, !dbg !30
  %56 = and i32 %55, 24, !dbg !30
  %57 = shl nuw nsw i32 %20, 5, !dbg !30
  %58 = or disjoint i32 %57, %56, !dbg !30
  %59 = zext nneg i32 %58 to i64, !dbg !30
  %60 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %59, !dbg !30
  %61 = or disjoint i32 %58, 1024, !dbg !30
  %62 = zext nneg i32 %61 to i64, !dbg !30
  %63 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %62, !dbg !30
  %64 = or disjoint i32 %58, 2048, !dbg !30
  %65 = zext nneg i32 %64 to i64, !dbg !30
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %65, !dbg !30
  %67 = or disjoint i32 %58, 3072, !dbg !30
  %68 = zext nneg i32 %67 to i64, !dbg !30
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %68, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %60, ptr addrspace(1) %48, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %63, ptr addrspace(1) %50, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %66, ptr addrspace(1) %52, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %69, ptr addrspace(1) %54, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %70 = or disjoint i32 %41, %28, !dbg !31
  %71 = or disjoint i32 %42, %28, !dbg !31
  %72 = sext i32 %70 to i64, !dbg !32
  %73 = getelementptr bfloat, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = sext i32 %71 to i64, !dbg !32
  %75 = getelementptr bfloat, ptr addrspace(1) %1, i64 %74, !dbg !32
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %59, !dbg !33
  %77 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %62, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %73, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %77, ptr addrspace(1) %75, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %78 = or disjoint i32 %28, 32, !dbg !34
  %79 = or disjoint i32 %37, %78, !dbg !28
  %80 = or disjoint i32 %38, %78, !dbg !28
  %81 = or disjoint i32 %39, %78, !dbg !28
  %82 = or disjoint i32 %40, %78, !dbg !28
  %83 = sext i32 %79 to i64, !dbg !29
  %84 = getelementptr bfloat, ptr addrspace(1) %0, i64 %83, !dbg !29
  %85 = sext i32 %80 to i64, !dbg !29
  %86 = getelementptr bfloat, ptr addrspace(1) %0, i64 %85, !dbg !29
  %87 = sext i32 %81 to i64, !dbg !29
  %88 = getelementptr bfloat, ptr addrspace(1) %0, i64 %87, !dbg !29
  %89 = sext i32 %82 to i64, !dbg !29
  %90 = getelementptr bfloat, ptr addrspace(1) %0, i64 %89, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %91 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %59, !dbg !30
  %92 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %62, !dbg !30
  %93 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %65, !dbg !30
  %94 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %68, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %91, ptr addrspace(1) %84, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %92, ptr addrspace(1) %86, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %93, ptr addrspace(1) %88, i32 16) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %94, ptr addrspace(1) %90, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %95 = or disjoint i32 %41, %78, !dbg !31
  %96 = or disjoint i32 %42, %78, !dbg !31
  %97 = sext i32 %95 to i64, !dbg !32
  %98 = getelementptr bfloat, ptr addrspace(1) %1, i64 %97, !dbg !32
  %99 = sext i32 %96 to i64, !dbg !32
  %100 = getelementptr bfloat, ptr addrspace(1) %1, i64 %99, !dbg !32
  %101 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %59, !dbg !33
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %62, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %101, ptr addrspace(1) %98, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %100, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, %19, !dbg !35
  %invariant.op162 = or disjoint i32 %invariant.op, 32, !dbg !35
  %invariant.op164 = or disjoint i32 %28, 64, !dbg !35
  %103 = shl i32 %15, 2
  %104 = and i32 %103, 8
  %105 = and i32 %103, 16
  %106 = and i32 %103, 24
  %107 = and i32 %15, 7
  %108 = and i32 %15, 15
  %109 = lshr i32 %15, 1
  %110 = and i32 %109, 8
  %111 = xor i32 %106, %110
  %112 = or disjoint i32 %19, %108
  %113 = shl nuw nsw i32 %112, 5
  %114 = or disjoint i32 %111, %113
  %115 = zext nneg i32 %114 to i64
  %116 = or disjoint i32 %104, 16
  %117 = or disjoint i32 %110, %105
  %118 = xor i32 %117, %116
  %119 = or disjoint i32 %118, %113
  %120 = zext nneg i32 %119 to i64
  %.reass163 = or disjoint i32 %107, %invariant.op162
  %121 = shl nuw nsw i32 %.reass163, 5
  %122 = or disjoint i32 %121, %111
  %123 = zext nneg i32 %122 to i64
  %124 = or disjoint i32 %118, %121
  %125 = zext nneg i32 %124 to i64
  %126 = or disjoint i32 %113, 2048
  %127 = or disjoint i32 %126, %111
  %128 = zext nneg i32 %127 to i64
  %129 = or disjoint i32 %118, %126
  %130 = zext nneg i32 %129 to i64
  %131 = or disjoint i32 %113, 3072
  %132 = or disjoint i32 %131, %111
  %133 = zext nneg i32 %132 to i64
  %134 = or disjoint i32 %118, %131
  %135 = zext nneg i32 %134 to i64
  %136 = xor i32 %103, %15
  %137 = and i32 %136, 24
  %138 = or disjoint i32 %18, %107
  %139 = shl nuw nsw i32 %138, 5
  %140 = or disjoint i32 %137, %139
  %141 = zext nneg i32 %140 to i64
  %142 = or disjoint i32 %140, 512
  %143 = zext nneg i32 %142 to i64
  %144 = or disjoint i32 %139, 1024
  %145 = or disjoint i32 %137, %144
  %146 = zext nneg i32 %145 to i64
  %147 = or disjoint i32 %140, 1536
  %148 = zext nneg i32 %147 to i64
  %149 = zext nneg i32 %invariant.op164 to i64, !dbg !35
  %150 = sext i32 %42 to i64, !dbg !35
  %151 = sext i32 %41 to i64, !dbg !35
  %152 = sext i32 %40 to i64, !dbg !35
  %153 = sext i32 %39 to i64, !dbg !35
  %154 = sext i32 %38 to i64, !dbg !35
  %155 = sext i32 %37 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %155, !dbg !35
  %invariant.gep292 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !35
  %invariant.gep294 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !35
  %invariant.gep296 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !35
  %invariant.gep298 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !35
  %invariant.gep300 = getelementptr bfloat, ptr addrspace(1) %1, i64 %150, !dbg !35
  br label %156, !dbg !35

156:                                              ; preds = %4, %156
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %156 ]
  %157 = phi i32 [ -1, %4 ], [ %226, %156 ]
  %158 = phi i32 [ 1, %4 ], [ %491, %156 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %410, %156 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %411, %156 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %412, %156 ]
  %162 = phi float [ 0.000000e+00, %4 ], [ %413, %156 ]
  %163 = phi float [ 0.000000e+00, %4 ], [ %415, %156 ]
  %164 = phi float [ 0.000000e+00, %4 ], [ %416, %156 ]
  %165 = phi float [ 0.000000e+00, %4 ], [ %417, %156 ]
  %166 = phi float [ 0.000000e+00, %4 ], [ %418, %156 ]
  %167 = phi float [ 0.000000e+00, %4 ], [ %420, %156 ]
  %168 = phi float [ 0.000000e+00, %4 ], [ %421, %156 ]
  %169 = phi float [ 0.000000e+00, %4 ], [ %422, %156 ]
  %170 = phi float [ 0.000000e+00, %4 ], [ %423, %156 ]
  %171 = phi float [ 0.000000e+00, %4 ], [ %425, %156 ]
  %172 = phi float [ 0.000000e+00, %4 ], [ %426, %156 ]
  %173 = phi float [ 0.000000e+00, %4 ], [ %427, %156 ]
  %174 = phi float [ 0.000000e+00, %4 ], [ %428, %156 ]
  %175 = phi float [ 0.000000e+00, %4 ], [ %430, %156 ]
  %176 = phi float [ 0.000000e+00, %4 ], [ %431, %156 ]
  %177 = phi float [ 0.000000e+00, %4 ], [ %432, %156 ]
  %178 = phi float [ 0.000000e+00, %4 ], [ %433, %156 ]
  %179 = phi float [ 0.000000e+00, %4 ], [ %435, %156 ]
  %180 = phi float [ 0.000000e+00, %4 ], [ %436, %156 ]
  %181 = phi float [ 0.000000e+00, %4 ], [ %437, %156 ]
  %182 = phi float [ 0.000000e+00, %4 ], [ %438, %156 ]
  %183 = phi float [ 0.000000e+00, %4 ], [ %440, %156 ]
  %184 = phi float [ 0.000000e+00, %4 ], [ %441, %156 ]
  %185 = phi float [ 0.000000e+00, %4 ], [ %442, %156 ]
  %186 = phi float [ 0.000000e+00, %4 ], [ %443, %156 ]
  %187 = phi float [ 0.000000e+00, %4 ], [ %445, %156 ]
  %188 = phi float [ 0.000000e+00, %4 ], [ %446, %156 ]
  %189 = phi float [ 0.000000e+00, %4 ], [ %447, %156 ]
  %190 = phi float [ 0.000000e+00, %4 ], [ %448, %156 ]
  %191 = phi float [ 0.000000e+00, %4 ], [ %450, %156 ]
  %192 = phi float [ 0.000000e+00, %4 ], [ %451, %156 ]
  %193 = phi float [ 0.000000e+00, %4 ], [ %452, %156 ]
  %194 = phi float [ 0.000000e+00, %4 ], [ %453, %156 ]
  %195 = phi float [ 0.000000e+00, %4 ], [ %455, %156 ]
  %196 = phi float [ 0.000000e+00, %4 ], [ %456, %156 ]
  %197 = phi float [ 0.000000e+00, %4 ], [ %457, %156 ]
  %198 = phi float [ 0.000000e+00, %4 ], [ %458, %156 ]
  %199 = phi float [ 0.000000e+00, %4 ], [ %460, %156 ]
  %200 = phi float [ 0.000000e+00, %4 ], [ %461, %156 ]
  %201 = phi float [ 0.000000e+00, %4 ], [ %462, %156 ]
  %202 = phi float [ 0.000000e+00, %4 ], [ %463, %156 ]
  %203 = phi float [ 0.000000e+00, %4 ], [ %465, %156 ]
  %204 = phi float [ 0.000000e+00, %4 ], [ %466, %156 ]
  %205 = phi float [ 0.000000e+00, %4 ], [ %467, %156 ]
  %206 = phi float [ 0.000000e+00, %4 ], [ %468, %156 ]
  %207 = phi float [ 0.000000e+00, %4 ], [ %470, %156 ]
  %208 = phi float [ 0.000000e+00, %4 ], [ %471, %156 ]
  %209 = phi float [ 0.000000e+00, %4 ], [ %472, %156 ]
  %210 = phi float [ 0.000000e+00, %4 ], [ %473, %156 ]
  %211 = phi float [ 0.000000e+00, %4 ], [ %475, %156 ]
  %212 = phi float [ 0.000000e+00, %4 ], [ %476, %156 ]
  %213 = phi float [ 0.000000e+00, %4 ], [ %477, %156 ]
  %214 = phi float [ 0.000000e+00, %4 ], [ %478, %156 ]
  %215 = phi float [ 0.000000e+00, %4 ], [ %480, %156 ]
  %216 = phi float [ 0.000000e+00, %4 ], [ %481, %156 ]
  %217 = phi float [ 0.000000e+00, %4 ], [ %482, %156 ]
  %218 = phi float [ 0.000000e+00, %4 ], [ %483, %156 ]
  %219 = phi float [ 0.000000e+00, %4 ], [ %485, %156 ]
  %220 = phi float [ 0.000000e+00, %4 ], [ %486, %156 ]
  %221 = phi float [ 0.000000e+00, %4 ], [ %487, %156 ]
  %222 = phi float [ 0.000000e+00, %4 ], [ %488, %156 ]
  %223 = icmp samesign ult i64 %indvars.iv, 22, !dbg !35
  %224 = add i32 %157, 1, !dbg !35
  %225 = icmp slt i32 %224, 2, !dbg !35
  %226 = select i1 %225, i32 %224, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %227 = shl i32 %226, 12, !dbg !30
  %228 = sext i32 %227 to i64, !dbg !30
  %229 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %228, !dbg !30
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %115, !dbg !30
  %231 = ptrtoint ptr addrspace(3) %230 to i64, !dbg !30
  %232 = trunc i64 %231 to i32, !dbg !30
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %232) #1, !dbg !30
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !30
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !30
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !30
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %120, !dbg !30
  %239 = ptrtoint ptr addrspace(3) %238 to i64, !dbg !30
  %240 = trunc i64 %239 to i32, !dbg !30
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %240) #1, !dbg !30
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !30
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !30
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !30
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %123, !dbg !30
  %247 = ptrtoint ptr addrspace(3) %246 to i64, !dbg !30
  %248 = trunc i64 %247 to i32, !dbg !30
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %248) #1, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !30
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !30
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !30
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !30
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %125, !dbg !30
  %255 = ptrtoint ptr addrspace(3) %254 to i64, !dbg !30
  %256 = trunc i64 %255 to i32, !dbg !30
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %256) #1, !dbg !30
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !30
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !30
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !30
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !30
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %128, !dbg !30
  %263 = ptrtoint ptr addrspace(3) %262 to i64, !dbg !30
  %264 = trunc i64 %263 to i32, !dbg !30
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %264) #1, !dbg !30
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !30
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !30
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !30
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !30
  %270 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %130, !dbg !30
  %271 = ptrtoint ptr addrspace(3) %270 to i64, !dbg !30
  %272 = trunc i64 %271 to i32, !dbg !30
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %272) #1, !dbg !30
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !30
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !30
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !30
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !30
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %133, !dbg !30
  %279 = ptrtoint ptr addrspace(3) %278 to i64, !dbg !30
  %280 = trunc i64 %279 to i32, !dbg !30
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %280) #1, !dbg !30
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !30
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !30
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !30
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !30
  %286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %229, i64 %135, !dbg !30
  %287 = ptrtoint ptr addrspace(3) %286 to i64, !dbg !30
  %288 = trunc i64 %287 to i32, !dbg !30
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %288) #1, !dbg !30
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !30
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !30
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !30
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !30
  %294 = shl i32 %226, 11, !dbg !33
  %295 = sext i32 %294 to i64, !dbg !33
  %296 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %295, !dbg !33
  %297 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %296, i64 %141, !dbg !33
  %298 = ptrtoint ptr addrspace(3) %297 to i64, !dbg !33
  %299 = trunc i64 %298 to i32, !dbg !33
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %299) #1, !dbg !33
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !33
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !33
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !33
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !33
  %305 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %296, i64 %143, !dbg !33
  %306 = ptrtoint ptr addrspace(3) %305 to i64, !dbg !33
  %307 = trunc i64 %306 to i32, !dbg !33
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %307) #1, !dbg !33
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !33
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !33
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !33
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !33
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %296, i64 %146, !dbg !33
  %314 = ptrtoint ptr addrspace(3) %313 to i64, !dbg !33
  %315 = trunc i64 %314 to i32, !dbg !33
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %315) #1, !dbg !33
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !33
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !33
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !33
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !33
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %296, i64 %148, !dbg !33
  %322 = ptrtoint ptr addrspace(3) %321 to i64, !dbg !33
  %323 = trunc i64 %322 to i32, !dbg !33
  %324 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %323) #1, !dbg !33
  %325 = extractvalue { i32, i32, i32, i32 } %324, 0, !dbg !33
  %326 = extractvalue { i32, i32, i32, i32 } %324, 1, !dbg !33
  %327 = extractvalue { i32, i32, i32, i32 } %324, 2, !dbg !33
  %328 = extractvalue { i32, i32, i32, i32 } %324, 3, !dbg !33
  %329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %159, float %160, float %161, float %162, i32 %234, i32 %235, i32 %236, i32 %237, i32 %301, i32 %302) #1, !dbg !36
  %330 = extractvalue { float, float, float, float } %329, 0, !dbg !36
  %331 = extractvalue { float, float, float, float } %329, 1, !dbg !36
  %332 = extractvalue { float, float, float, float } %329, 2, !dbg !36
  %333 = extractvalue { float, float, float, float } %329, 3, !dbg !36
  %334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %163, float %164, float %165, float %166, i32 %234, i32 %235, i32 %236, i32 %237, i32 %309, i32 %310) #1, !dbg !36
  %335 = extractvalue { float, float, float, float } %334, 0, !dbg !36
  %336 = extractvalue { float, float, float, float } %334, 1, !dbg !36
  %337 = extractvalue { float, float, float, float } %334, 2, !dbg !36
  %338 = extractvalue { float, float, float, float } %334, 3, !dbg !36
  %339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %167, float %168, float %169, float %170, i32 %234, i32 %235, i32 %236, i32 %237, i32 %317, i32 %318) #1, !dbg !36
  %340 = extractvalue { float, float, float, float } %339, 0, !dbg !36
  %341 = extractvalue { float, float, float, float } %339, 1, !dbg !36
  %342 = extractvalue { float, float, float, float } %339, 2, !dbg !36
  %343 = extractvalue { float, float, float, float } %339, 3, !dbg !36
  %344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %171, float %172, float %173, float %174, i32 %234, i32 %235, i32 %236, i32 %237, i32 %325, i32 %326) #1, !dbg !36
  %345 = extractvalue { float, float, float, float } %344, 0, !dbg !36
  %346 = extractvalue { float, float, float, float } %344, 1, !dbg !36
  %347 = extractvalue { float, float, float, float } %344, 2, !dbg !36
  %348 = extractvalue { float, float, float, float } %344, 3, !dbg !36
  %349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %175, float %176, float %177, float %178, i32 %250, i32 %251, i32 %252, i32 %253, i32 %301, i32 %302) #1, !dbg !36
  %350 = extractvalue { float, float, float, float } %349, 0, !dbg !36
  %351 = extractvalue { float, float, float, float } %349, 1, !dbg !36
  %352 = extractvalue { float, float, float, float } %349, 2, !dbg !36
  %353 = extractvalue { float, float, float, float } %349, 3, !dbg !36
  %354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %179, float %180, float %181, float %182, i32 %250, i32 %251, i32 %252, i32 %253, i32 %309, i32 %310) #1, !dbg !36
  %355 = extractvalue { float, float, float, float } %354, 0, !dbg !36
  %356 = extractvalue { float, float, float, float } %354, 1, !dbg !36
  %357 = extractvalue { float, float, float, float } %354, 2, !dbg !36
  %358 = extractvalue { float, float, float, float } %354, 3, !dbg !36
  %359 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %183, float %184, float %185, float %186, i32 %250, i32 %251, i32 %252, i32 %253, i32 %317, i32 %318) #1, !dbg !36
  %360 = extractvalue { float, float, float, float } %359, 0, !dbg !36
  %361 = extractvalue { float, float, float, float } %359, 1, !dbg !36
  %362 = extractvalue { float, float, float, float } %359, 2, !dbg !36
  %363 = extractvalue { float, float, float, float } %359, 3, !dbg !36
  %364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %187, float %188, float %189, float %190, i32 %250, i32 %251, i32 %252, i32 %253, i32 %325, i32 %326) #1, !dbg !36
  %365 = extractvalue { float, float, float, float } %364, 0, !dbg !36
  %366 = extractvalue { float, float, float, float } %364, 1, !dbg !36
  %367 = extractvalue { float, float, float, float } %364, 2, !dbg !36
  %368 = extractvalue { float, float, float, float } %364, 3, !dbg !36
  %369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %191, float %192, float %193, float %194, i32 %266, i32 %267, i32 %268, i32 %269, i32 %301, i32 %302) #1, !dbg !36
  %370 = extractvalue { float, float, float, float } %369, 0, !dbg !36
  %371 = extractvalue { float, float, float, float } %369, 1, !dbg !36
  %372 = extractvalue { float, float, float, float } %369, 2, !dbg !36
  %373 = extractvalue { float, float, float, float } %369, 3, !dbg !36
  %374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %195, float %196, float %197, float %198, i32 %266, i32 %267, i32 %268, i32 %269, i32 %309, i32 %310) #1, !dbg !36
  %375 = extractvalue { float, float, float, float } %374, 0, !dbg !36
  %376 = extractvalue { float, float, float, float } %374, 1, !dbg !36
  %377 = extractvalue { float, float, float, float } %374, 2, !dbg !36
  %378 = extractvalue { float, float, float, float } %374, 3, !dbg !36
  %379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %199, float %200, float %201, float %202, i32 %266, i32 %267, i32 %268, i32 %269, i32 %317, i32 %318) #1, !dbg !36
  %380 = extractvalue { float, float, float, float } %379, 0, !dbg !36
  %381 = extractvalue { float, float, float, float } %379, 1, !dbg !36
  %382 = extractvalue { float, float, float, float } %379, 2, !dbg !36
  %383 = extractvalue { float, float, float, float } %379, 3, !dbg !36
  %384 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %203, float %204, float %205, float %206, i32 %266, i32 %267, i32 %268, i32 %269, i32 %325, i32 %326) #1, !dbg !36
  %385 = extractvalue { float, float, float, float } %384, 0, !dbg !36
  %386 = extractvalue { float, float, float, float } %384, 1, !dbg !36
  %387 = extractvalue { float, float, float, float } %384, 2, !dbg !36
  %388 = extractvalue { float, float, float, float } %384, 3, !dbg !36
  %389 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %207, float %208, float %209, float %210, i32 %282, i32 %283, i32 %284, i32 %285, i32 %301, i32 %302) #1, !dbg !36
  %390 = extractvalue { float, float, float, float } %389, 0, !dbg !36
  %391 = extractvalue { float, float, float, float } %389, 1, !dbg !36
  %392 = extractvalue { float, float, float, float } %389, 2, !dbg !36
  %393 = extractvalue { float, float, float, float } %389, 3, !dbg !36
  %394 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %211, float %212, float %213, float %214, i32 %282, i32 %283, i32 %284, i32 %285, i32 %309, i32 %310) #1, !dbg !36
  %395 = extractvalue { float, float, float, float } %394, 0, !dbg !36
  %396 = extractvalue { float, float, float, float } %394, 1, !dbg !36
  %397 = extractvalue { float, float, float, float } %394, 2, !dbg !36
  %398 = extractvalue { float, float, float, float } %394, 3, !dbg !36
  %399 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %215, float %216, float %217, float %218, i32 %282, i32 %283, i32 %284, i32 %285, i32 %317, i32 %318) #1, !dbg !36
  %400 = extractvalue { float, float, float, float } %399, 0, !dbg !36
  %401 = extractvalue { float, float, float, float } %399, 1, !dbg !36
  %402 = extractvalue { float, float, float, float } %399, 2, !dbg !36
  %403 = extractvalue { float, float, float, float } %399, 3, !dbg !36
  %404 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %219, float %220, float %221, float %222, i32 %282, i32 %283, i32 %284, i32 %285, i32 %325, i32 %326) #1, !dbg !36
  %405 = extractvalue { float, float, float, float } %404, 0, !dbg !36
  %406 = extractvalue { float, float, float, float } %404, 1, !dbg !36
  %407 = extractvalue { float, float, float, float } %404, 2, !dbg !36
  %408 = extractvalue { float, float, float, float } %404, 3, !dbg !36
  %409 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %330, float %331, float %332, float %333, i32 %242, i32 %243, i32 %244, i32 %245, i32 %303, i32 %304) #1, !dbg !36
  %410 = extractvalue { float, float, float, float } %409, 0, !dbg !36
  %411 = extractvalue { float, float, float, float } %409, 1, !dbg !36
  %412 = extractvalue { float, float, float, float } %409, 2, !dbg !36
  %413 = extractvalue { float, float, float, float } %409, 3, !dbg !36
  %414 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %335, float %336, float %337, float %338, i32 %242, i32 %243, i32 %244, i32 %245, i32 %311, i32 %312) #1, !dbg !36
  %415 = extractvalue { float, float, float, float } %414, 0, !dbg !36
  %416 = extractvalue { float, float, float, float } %414, 1, !dbg !36
  %417 = extractvalue { float, float, float, float } %414, 2, !dbg !36
  %418 = extractvalue { float, float, float, float } %414, 3, !dbg !36
  %419 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %340, float %341, float %342, float %343, i32 %242, i32 %243, i32 %244, i32 %245, i32 %319, i32 %320) #1, !dbg !36
  %420 = extractvalue { float, float, float, float } %419, 0, !dbg !36
  %421 = extractvalue { float, float, float, float } %419, 1, !dbg !36
  %422 = extractvalue { float, float, float, float } %419, 2, !dbg !36
  %423 = extractvalue { float, float, float, float } %419, 3, !dbg !36
  %424 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %345, float %346, float %347, float %348, i32 %242, i32 %243, i32 %244, i32 %245, i32 %327, i32 %328) #1, !dbg !36
  %425 = extractvalue { float, float, float, float } %424, 0, !dbg !36
  %426 = extractvalue { float, float, float, float } %424, 1, !dbg !36
  %427 = extractvalue { float, float, float, float } %424, 2, !dbg !36
  %428 = extractvalue { float, float, float, float } %424, 3, !dbg !36
  %429 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %350, float %351, float %352, float %353, i32 %258, i32 %259, i32 %260, i32 %261, i32 %303, i32 %304) #1, !dbg !36
  %430 = extractvalue { float, float, float, float } %429, 0, !dbg !36
  %431 = extractvalue { float, float, float, float } %429, 1, !dbg !36
  %432 = extractvalue { float, float, float, float } %429, 2, !dbg !36
  %433 = extractvalue { float, float, float, float } %429, 3, !dbg !36
  %434 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %355, float %356, float %357, float %358, i32 %258, i32 %259, i32 %260, i32 %261, i32 %311, i32 %312) #1, !dbg !36
  %435 = extractvalue { float, float, float, float } %434, 0, !dbg !36
  %436 = extractvalue { float, float, float, float } %434, 1, !dbg !36
  %437 = extractvalue { float, float, float, float } %434, 2, !dbg !36
  %438 = extractvalue { float, float, float, float } %434, 3, !dbg !36
  %439 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %360, float %361, float %362, float %363, i32 %258, i32 %259, i32 %260, i32 %261, i32 %319, i32 %320) #1, !dbg !36
  %440 = extractvalue { float, float, float, float } %439, 0, !dbg !36
  %441 = extractvalue { float, float, float, float } %439, 1, !dbg !36
  %442 = extractvalue { float, float, float, float } %439, 2, !dbg !36
  %443 = extractvalue { float, float, float, float } %439, 3, !dbg !36
  %444 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %365, float %366, float %367, float %368, i32 %258, i32 %259, i32 %260, i32 %261, i32 %327, i32 %328) #1, !dbg !36
  %445 = extractvalue { float, float, float, float } %444, 0, !dbg !36
  %446 = extractvalue { float, float, float, float } %444, 1, !dbg !36
  %447 = extractvalue { float, float, float, float } %444, 2, !dbg !36
  %448 = extractvalue { float, float, float, float } %444, 3, !dbg !36
  %449 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %370, float %371, float %372, float %373, i32 %274, i32 %275, i32 %276, i32 %277, i32 %303, i32 %304) #1, !dbg !36
  %450 = extractvalue { float, float, float, float } %449, 0, !dbg !36
  %451 = extractvalue { float, float, float, float } %449, 1, !dbg !36
  %452 = extractvalue { float, float, float, float } %449, 2, !dbg !36
  %453 = extractvalue { float, float, float, float } %449, 3, !dbg !36
  %454 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %375, float %376, float %377, float %378, i32 %274, i32 %275, i32 %276, i32 %277, i32 %311, i32 %312) #1, !dbg !36
  %455 = extractvalue { float, float, float, float } %454, 0, !dbg !36
  %456 = extractvalue { float, float, float, float } %454, 1, !dbg !36
  %457 = extractvalue { float, float, float, float } %454, 2, !dbg !36
  %458 = extractvalue { float, float, float, float } %454, 3, !dbg !36
  %459 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %380, float %381, float %382, float %383, i32 %274, i32 %275, i32 %276, i32 %277, i32 %319, i32 %320) #1, !dbg !36
  %460 = extractvalue { float, float, float, float } %459, 0, !dbg !36
  %461 = extractvalue { float, float, float, float } %459, 1, !dbg !36
  %462 = extractvalue { float, float, float, float } %459, 2, !dbg !36
  %463 = extractvalue { float, float, float, float } %459, 3, !dbg !36
  %464 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %385, float %386, float %387, float %388, i32 %274, i32 %275, i32 %276, i32 %277, i32 %327, i32 %328) #1, !dbg !36
  %465 = extractvalue { float, float, float, float } %464, 0, !dbg !36
  %466 = extractvalue { float, float, float, float } %464, 1, !dbg !36
  %467 = extractvalue { float, float, float, float } %464, 2, !dbg !36
  %468 = extractvalue { float, float, float, float } %464, 3, !dbg !36
  %469 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %390, float %391, float %392, float %393, i32 %290, i32 %291, i32 %292, i32 %293, i32 %303, i32 %304) #1, !dbg !36
  %470 = extractvalue { float, float, float, float } %469, 0, !dbg !36
  %471 = extractvalue { float, float, float, float } %469, 1, !dbg !36
  %472 = extractvalue { float, float, float, float } %469, 2, !dbg !36
  %473 = extractvalue { float, float, float, float } %469, 3, !dbg !36
  %474 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %395, float %396, float %397, float %398, i32 %290, i32 %291, i32 %292, i32 %293, i32 %311, i32 %312) #1, !dbg !36
  %475 = extractvalue { float, float, float, float } %474, 0, !dbg !36
  %476 = extractvalue { float, float, float, float } %474, 1, !dbg !36
  %477 = extractvalue { float, float, float, float } %474, 2, !dbg !36
  %478 = extractvalue { float, float, float, float } %474, 3, !dbg !36
  %479 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %400, float %401, float %402, float %403, i32 %290, i32 %291, i32 %292, i32 %293, i32 %319, i32 %320) #1, !dbg !36
  %480 = extractvalue { float, float, float, float } %479, 0, !dbg !36
  %481 = extractvalue { float, float, float, float } %479, 1, !dbg !36
  %482 = extractvalue { float, float, float, float } %479, 2, !dbg !36
  %483 = extractvalue { float, float, float, float } %479, 3, !dbg !36
  %484 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %405, float %406, float %407, float %408, i32 %290, i32 %291, i32 %292, i32 %293, i32 %327, i32 %328) #1, !dbg !36
  %485 = extractvalue { float, float, float, float } %484, 0, !dbg !36
  %486 = extractvalue { float, float, float, float } %484, 1, !dbg !36
  %487 = extractvalue { float, float, float, float } %484, 2, !dbg !36
  %488 = extractvalue { float, float, float, float } %484, 3, !dbg !36
  %489 = add i32 %158, 1, !dbg !35
  %490 = icmp slt i32 %489, 2, !dbg !35
  %491 = select i1 %490, i32 %489, i32 0, !dbg !35
  %492 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %493 = add nuw nsw i64 %492, %149
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %493, !dbg !29
  %gep293 = getelementptr bfloat, ptr addrspace(1) %invariant.gep292, i64 %493, !dbg !29
  %gep295 = getelementptr bfloat, ptr addrspace(1) %invariant.gep294, i64 %493, !dbg !29
  %gep297 = getelementptr bfloat, ptr addrspace(1) %invariant.gep296, i64 %493, !dbg !29
  %494 = shl i32 %491, 12, !dbg !30
  %495 = sext i32 %494 to i64, !dbg !30
  %496 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %495, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %497 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %496, i64 %59, !dbg !30
  %498 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %496, i64 %62, !dbg !30
  %499 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %496, i64 %65, !dbg !30
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %496, i64 %68, !dbg !30
  %501 = select i1 %223, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %497, ptr addrspace(1) %gep, i32 %501) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %498, ptr addrspace(1) %gep293, i32 %501) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %499, ptr addrspace(1) %gep295, i32 %501) #1, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %500, ptr addrspace(1) %gep297, i32 %501) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep299 = getelementptr bfloat, ptr addrspace(1) %invariant.gep298, i64 %493, !dbg !32
  %gep301 = getelementptr bfloat, ptr addrspace(1) %invariant.gep300, i64 %493, !dbg !32
  %502 = shl i32 %491, 11, !dbg !33
  %503 = sext i32 %502 to i64, !dbg !33
  %504 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %503, !dbg !33
  %505 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %504, i64 %59, !dbg !33
  %506 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %504, i64 %62, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %505, ptr addrspace(1) %gep299, i32 %501) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %506, ptr addrspace(1) %gep301, i32 %501) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !35
  br i1 %exitcond.not, label %507, label %156, !dbg !35

507:                                              ; preds = %156
  %508 = and i32 %27, 56, !dbg !22
  %509 = or disjoint i32 %26, %508, !dbg !23
  %510 = lshr i32 %15, 3, !dbg !19
  %511 = and i32 %510, 15, !dbg !19
  %512 = or disjoint i32 %511, %14, !dbg !20
  %513 = or disjoint i32 %512, 64, !dbg !20
  %514 = or disjoint i32 %512, 48, !dbg !20
  %515 = or disjoint i32 %512, 32, !dbg !20
  %516 = or disjoint i32 %512, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %517 = icmp slt i32 %512, 77, !dbg !38
  %518 = icmp slt i32 %516, 77, !dbg !38
  %519 = icmp slt i32 %515, 77, !dbg !38
  %520 = icmp slt i32 %514, 77, !dbg !38
  %521 = icmp slt i32 %513, 77, !dbg !38
  %522 = icmp slt i32 %14, 0, !dbg !38
  %523 = icmp slt i32 %509, 768, !dbg !39
  %524 = and i1 %517, %523, !dbg !40
  %525 = and i1 %518, %523, !dbg !40
  %526 = and i1 %519, %523, !dbg !40
  %527 = and i1 %520, %523, !dbg !40
  %528 = and i1 %521, %523, !dbg !40
  %529 = and i1 %522, %523, !dbg !40
  %530 = mul i32 %512, 768, !dbg !41
  %531 = mul i32 %516, 768, !dbg !41
  %532 = mul i32 %515, 768, !dbg !41
  %533 = mul i32 %514, 768, !dbg !41
  %534 = mul i32 %513, 768, !dbg !41
  %535 = add i32 %530, 61440, !dbg !41
  %536 = add i32 %530, 73728, !dbg !41
  %537 = add i32 %530, 86016, !dbg !41
  %538 = add i32 %530, %509, !dbg !42
  %539 = add i32 %531, %509, !dbg !42
  %540 = add i32 %532, %509, !dbg !42
  %541 = add i32 %533, %509, !dbg !42
  %542 = add i32 %534, %509, !dbg !42
  %543 = add i32 %535, %509, !dbg !42
  %544 = add i32 %536, %509, !dbg !42
  %545 = add i32 %537, %509, !dbg !42
  %546 = sext i32 %538 to i64, !dbg !43
  %547 = getelementptr bfloat, ptr addrspace(1) %2, i64 %546, !dbg !43
  %548 = sext i32 %539 to i64, !dbg !43
  %549 = getelementptr bfloat, ptr addrspace(1) %2, i64 %548, !dbg !43
  %550 = sext i32 %540 to i64, !dbg !43
  %551 = getelementptr bfloat, ptr addrspace(1) %2, i64 %550, !dbg !43
  %552 = sext i32 %541 to i64, !dbg !43
  %553 = getelementptr bfloat, ptr addrspace(1) %2, i64 %552, !dbg !43
  %554 = sext i32 %542 to i64, !dbg !43
  %555 = getelementptr bfloat, ptr addrspace(1) %2, i64 %554, !dbg !43
  %556 = sext i32 %543 to i64, !dbg !43
  %557 = getelementptr bfloat, ptr addrspace(1) %2, i64 %556, !dbg !43
  %558 = sext i32 %544 to i64, !dbg !43
  %559 = getelementptr bfloat, ptr addrspace(1) %2, i64 %558, !dbg !43
  %560 = sext i32 %545 to i64, !dbg !43
  %561 = getelementptr bfloat, ptr addrspace(1) %2, i64 %560, !dbg !43
  %562 = fptrunc float %410 to bfloat, !dbg !44
  %563 = fptrunc float %411 to bfloat, !dbg !44
  %564 = fptrunc float %412 to bfloat, !dbg !44
  %565 = fptrunc float %413 to bfloat, !dbg !44
  %566 = fptrunc float %415 to bfloat, !dbg !44
  %567 = fptrunc float %416 to bfloat, !dbg !44
  %568 = fptrunc float %417 to bfloat, !dbg !44
  %569 = fptrunc float %418 to bfloat, !dbg !44
  %570 = fptrunc float %420 to bfloat, !dbg !44
  %571 = fptrunc float %421 to bfloat, !dbg !44
  %572 = fptrunc float %422 to bfloat, !dbg !44
  %573 = fptrunc float %423 to bfloat, !dbg !44
  %574 = fptrunc float %425 to bfloat, !dbg !44
  %575 = fptrunc float %426 to bfloat, !dbg !44
  %576 = fptrunc float %427 to bfloat, !dbg !44
  %577 = fptrunc float %428 to bfloat, !dbg !44
  %578 = fptrunc float %430 to bfloat, !dbg !44
  %579 = fptrunc float %431 to bfloat, !dbg !44
  %580 = fptrunc float %432 to bfloat, !dbg !44
  %581 = fptrunc float %433 to bfloat, !dbg !44
  %582 = fptrunc float %435 to bfloat, !dbg !44
  %583 = fptrunc float %436 to bfloat, !dbg !44
  %584 = fptrunc float %437 to bfloat, !dbg !44
  %585 = fptrunc float %438 to bfloat, !dbg !44
  %586 = fptrunc float %440 to bfloat, !dbg !44
  %587 = fptrunc float %441 to bfloat, !dbg !44
  %588 = fptrunc float %442 to bfloat, !dbg !44
  %589 = fptrunc float %443 to bfloat, !dbg !44
  %590 = fptrunc float %445 to bfloat, !dbg !44
  %591 = fptrunc float %446 to bfloat, !dbg !44
  %592 = fptrunc float %447 to bfloat, !dbg !44
  %593 = fptrunc float %448 to bfloat, !dbg !44
  %594 = fptrunc float %450 to bfloat, !dbg !44
  %595 = fptrunc float %451 to bfloat, !dbg !44
  %596 = fptrunc float %452 to bfloat, !dbg !44
  %597 = fptrunc float %453 to bfloat, !dbg !44
  %598 = fptrunc float %455 to bfloat, !dbg !44
  %599 = fptrunc float %456 to bfloat, !dbg !44
  %600 = fptrunc float %457 to bfloat, !dbg !44
  %601 = fptrunc float %458 to bfloat, !dbg !44
  %602 = fptrunc float %460 to bfloat, !dbg !44
  %603 = fptrunc float %461 to bfloat, !dbg !44
  %604 = fptrunc float %462 to bfloat, !dbg !44
  %605 = fptrunc float %463 to bfloat, !dbg !44
  %606 = fptrunc float %465 to bfloat, !dbg !44
  %607 = fptrunc float %466 to bfloat, !dbg !44
  %608 = fptrunc float %467 to bfloat, !dbg !44
  %609 = fptrunc float %468 to bfloat, !dbg !44
  %610 = fptrunc float %470 to bfloat, !dbg !44
  %611 = fptrunc float %471 to bfloat, !dbg !44
  %612 = fptrunc float %472 to bfloat, !dbg !44
  %613 = fptrunc float %473 to bfloat, !dbg !44
  %614 = fptrunc float %475 to bfloat, !dbg !44
  %615 = fptrunc float %476 to bfloat, !dbg !44
  %616 = fptrunc float %477 to bfloat, !dbg !44
  %617 = fptrunc float %478 to bfloat, !dbg !44
  %618 = fptrunc float %480 to bfloat, !dbg !44
  %619 = fptrunc float %481 to bfloat, !dbg !44
  %620 = fptrunc float %482 to bfloat, !dbg !44
  %621 = fptrunc float %483 to bfloat, !dbg !44
  %622 = fptrunc float %485 to bfloat, !dbg !44
  %623 = fptrunc float %486 to bfloat, !dbg !44
  %624 = fptrunc float %487 to bfloat, !dbg !44
  %625 = fptrunc float %488 to bfloat, !dbg !44
  %626 = shl i32 %15, 1, !dbg !44
  %627 = and i32 %626, 6, !dbg !44
  %628 = shl i32 %15, 4, !dbg !44
  %629 = and i32 %628, 1472, !dbg !44
  %630 = or disjoint i32 %629, %627, !dbg !44
  %631 = or disjoint i32 %630, %18, !dbg !44
  %632 = and i32 %27, 1016, !dbg !44
  %633 = lshr exact i32 %629, 3, !dbg !44
  %634 = add nuw nsw i32 %631, %633, !dbg !44
  %635 = zext nneg i32 %634 to i64, !dbg !44
  %636 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %635, !dbg !44
  %637 = bitcast bfloat %562 to i16, !dbg !44
  %638 = bitcast bfloat %563 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %636, i16 %637, i16 %638, i1 true) #1, !dbg !44
  %639 = or disjoint i32 %631, 512, !dbg !44
  %640 = lshr i32 %639, 3, !dbg !44
  %641 = and i32 %640, 248, !dbg !44
  %642 = add nuw nsw i32 %641, %639, !dbg !44
  %643 = zext nneg i32 %642 to i64, !dbg !44
  %644 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %643, !dbg !44
  %645 = bitcast bfloat %564 to i16, !dbg !44
  %646 = bitcast bfloat %565 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %644, i16 %645, i16 %646, i1 true) #1, !dbg !44
  %647 = add nuw nsw i32 %633, 16, !dbg !44
  %648 = add nuw nsw i32 %647, %631, !dbg !44
  %649 = zext nneg i32 %648 to i64, !dbg !44
  %650 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %649, !dbg !44
  %651 = bitcast bfloat %566 to i16, !dbg !44
  %652 = bitcast bfloat %567 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %651, i16 %652, i1 true) #1, !dbg !44
  %653 = or disjoint i32 %631, 528, !dbg !44
  %654 = lshr i32 %653, 3, !dbg !44
  %655 = and i32 %654, 248, !dbg !44
  %656 = add nuw nsw i32 %655, %653, !dbg !44
  %657 = zext nneg i32 %656 to i64, !dbg !44
  %658 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %657, !dbg !44
  %659 = bitcast bfloat %568 to i16, !dbg !44
  %660 = bitcast bfloat %569 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %658, i16 %659, i16 %660, i1 true) #1, !dbg !44
  %661 = add nuw nsw i32 %633, 32, !dbg !44
  %662 = add nuw nsw i32 %661, %631, !dbg !44
  %663 = zext nneg i32 %662 to i64, !dbg !44
  %664 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %663, !dbg !44
  %665 = bitcast bfloat %570 to i16, !dbg !44
  %666 = bitcast bfloat %571 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %664, i16 %665, i16 %666, i1 true) #1, !dbg !44
  %667 = or disjoint i32 %631, 544, !dbg !44
  %668 = lshr i32 %667, 3, !dbg !44
  %669 = and i32 %668, 248, !dbg !44
  %670 = add nuw nsw i32 %669, %667, !dbg !44
  %671 = zext nneg i32 %670 to i64, !dbg !44
  %672 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %671, !dbg !44
  %673 = bitcast bfloat %572 to i16, !dbg !44
  %674 = bitcast bfloat %573 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %672, i16 %673, i16 %674, i1 true) #1, !dbg !44
  %675 = add nuw nsw i32 %633, 48, !dbg !44
  %676 = add nuw nsw i32 %675, %631, !dbg !44
  %677 = zext nneg i32 %676 to i64, !dbg !44
  %678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %677, !dbg !44
  %679 = bitcast bfloat %574 to i16, !dbg !44
  %680 = bitcast bfloat %575 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %678, i16 %679, i16 %680, i1 true) #1, !dbg !44
  %681 = or disjoint i32 %631, 560, !dbg !44
  %682 = lshr i32 %681, 3, !dbg !44
  %683 = and i32 %682, 248, !dbg !44
  %684 = add nuw nsw i32 %683, %681, !dbg !44
  %685 = zext nneg i32 %684 to i64, !dbg !44
  %686 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %685, !dbg !44
  %687 = bitcast bfloat %576 to i16, !dbg !44
  %688 = bitcast bfloat %577 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %686, i16 %687, i16 %688, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %689 = and i32 %15, 120, !dbg !44
  %690 = add nuw nsw i32 %632, %689, !dbg !44
  %691 = zext nneg i32 %690 to i64, !dbg !44
  %692 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %691, !dbg !44
  %693 = load <4 x i32>, ptr addrspace(3) %692, align 16, !dbg !44
  %694 = or disjoint i32 %632, 1024, !dbg !44
  %695 = lshr exact i32 %694, 3, !dbg !44
  %696 = and i32 %695, 248, !dbg !44
  %697 = add nuw nsw i32 %696, %694, !dbg !44
  %698 = zext nneg i32 %697 to i64, !dbg !44
  %699 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %698, !dbg !44
  %700 = load <4 x i32>, ptr addrspace(3) %699, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %701 = bitcast bfloat %578 to i16, !dbg !44
  %702 = bitcast bfloat %579 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %636, i16 %701, i16 %702, i1 true) #1, !dbg !44
  %703 = bitcast bfloat %580 to i16, !dbg !44
  %704 = bitcast bfloat %581 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %644, i16 %703, i16 %704, i1 true) #1, !dbg !44
  %705 = bitcast bfloat %582 to i16, !dbg !44
  %706 = bitcast bfloat %583 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %705, i16 %706, i1 true) #1, !dbg !44
  %707 = bitcast bfloat %584 to i16, !dbg !44
  %708 = bitcast bfloat %585 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %658, i16 %707, i16 %708, i1 true) #1, !dbg !44
  %709 = bitcast bfloat %586 to i16, !dbg !44
  %710 = bitcast bfloat %587 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %664, i16 %709, i16 %710, i1 true) #1, !dbg !44
  %711 = bitcast bfloat %588 to i16, !dbg !44
  %712 = bitcast bfloat %589 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %672, i16 %711, i16 %712, i1 true) #1, !dbg !44
  %713 = bitcast bfloat %590 to i16, !dbg !44
  %714 = bitcast bfloat %591 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %678, i16 %713, i16 %714, i1 true) #1, !dbg !44
  %715 = bitcast bfloat %592 to i16, !dbg !44
  %716 = bitcast bfloat %593 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %686, i16 %715, i16 %716, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %717 = load <4 x i32>, ptr addrspace(3) %692, align 16, !dbg !44
  %718 = load <4 x i32>, ptr addrspace(3) %699, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %719 = bitcast bfloat %594 to i16, !dbg !44
  %720 = bitcast bfloat %595 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %636, i16 %719, i16 %720, i1 true) #1, !dbg !44
  %721 = bitcast bfloat %596 to i16, !dbg !44
  %722 = bitcast bfloat %597 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %644, i16 %721, i16 %722, i1 true) #1, !dbg !44
  %723 = bitcast bfloat %598 to i16, !dbg !44
  %724 = bitcast bfloat %599 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %723, i16 %724, i1 true) #1, !dbg !44
  %725 = bitcast bfloat %600 to i16, !dbg !44
  %726 = bitcast bfloat %601 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %658, i16 %725, i16 %726, i1 true) #1, !dbg !44
  %727 = bitcast bfloat %602 to i16, !dbg !44
  %728 = bitcast bfloat %603 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %664, i16 %727, i16 %728, i1 true) #1, !dbg !44
  %729 = bitcast bfloat %604 to i16, !dbg !44
  %730 = bitcast bfloat %605 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %672, i16 %729, i16 %730, i1 true) #1, !dbg !44
  %731 = bitcast bfloat %606 to i16, !dbg !44
  %732 = bitcast bfloat %607 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %678, i16 %731, i16 %732, i1 true) #1, !dbg !44
  %733 = bitcast bfloat %608 to i16, !dbg !44
  %734 = bitcast bfloat %609 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %686, i16 %733, i16 %734, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %735 = load <4 x i32>, ptr addrspace(3) %692, align 16, !dbg !44
  %736 = load <4 x i32>, ptr addrspace(3) %699, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %737 = bitcast bfloat %610 to i16, !dbg !44
  %738 = bitcast bfloat %611 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %636, i16 %737, i16 %738, i1 true) #1, !dbg !44
  %739 = bitcast bfloat %612 to i16, !dbg !44
  %740 = bitcast bfloat %613 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %644, i16 %739, i16 %740, i1 true) #1, !dbg !44
  %741 = bitcast bfloat %614 to i16, !dbg !44
  %742 = bitcast bfloat %615 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %650, i16 %741, i16 %742, i1 true) #1, !dbg !44
  %743 = bitcast bfloat %616 to i16, !dbg !44
  %744 = bitcast bfloat %617 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %658, i16 %743, i16 %744, i1 true) #1, !dbg !44
  %745 = bitcast bfloat %618 to i16, !dbg !44
  %746 = bitcast bfloat %619 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %664, i16 %745, i16 %746, i1 true) #1, !dbg !44
  %747 = bitcast bfloat %620 to i16, !dbg !44
  %748 = bitcast bfloat %621 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %672, i16 %747, i16 %748, i1 true) #1, !dbg !44
  %749 = bitcast bfloat %622 to i16, !dbg !44
  %750 = bitcast bfloat %623 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %678, i16 %749, i16 %750, i1 true) #1, !dbg !44
  %751 = bitcast bfloat %624 to i16, !dbg !44
  %752 = bitcast bfloat %625 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %686, i16 %751, i16 %752, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %753 = load <4 x i32>, ptr addrspace(3) %692, align 16, !dbg !44
  %754 = load <4 x i32>, ptr addrspace(3) %699, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %693, i64 0, !dbg !44
  %.extract100 = extractelement <4 x i32> %693, i64 1, !dbg !44
  %.extract102 = extractelement <4 x i32> %693, i64 2, !dbg !44
  %.extract104 = extractelement <4 x i32> %693, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract100, i32 %.extract102, i32 %.extract104, ptr addrspace(1) %547, i1 %524) #1, !dbg !44
  %.extract106 = extractelement <4 x i32> %700, i64 0, !dbg !44
  %.extract108 = extractelement <4 x i32> %700, i64 1, !dbg !44
  %.extract110 = extractelement <4 x i32> %700, i64 2, !dbg !44
  %.extract112 = extractelement <4 x i32> %700, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract106, i32 %.extract108, i32 %.extract110, i32 %.extract112, ptr addrspace(1) %549, i1 %525) #1, !dbg !44
  %.extract114 = extractelement <4 x i32> %717, i64 0, !dbg !44
  %.extract116 = extractelement <4 x i32> %717, i64 1, !dbg !44
  %.extract118 = extractelement <4 x i32> %717, i64 2, !dbg !44
  %.extract120 = extractelement <4 x i32> %717, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract114, i32 %.extract116, i32 %.extract118, i32 %.extract120, ptr addrspace(1) %551, i1 %526) #1, !dbg !44
  %.extract122 = extractelement <4 x i32> %718, i64 0, !dbg !44
  %.extract124 = extractelement <4 x i32> %718, i64 1, !dbg !44
  %.extract126 = extractelement <4 x i32> %718, i64 2, !dbg !44
  %.extract128 = extractelement <4 x i32> %718, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract122, i32 %.extract124, i32 %.extract126, i32 %.extract128, ptr addrspace(1) %553, i1 %527) #1, !dbg !44
  %.extract130 = extractelement <4 x i32> %735, i64 0, !dbg !44
  %.extract132 = extractelement <4 x i32> %735, i64 1, !dbg !44
  %.extract134 = extractelement <4 x i32> %735, i64 2, !dbg !44
  %.extract136 = extractelement <4 x i32> %735, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract130, i32 %.extract132, i32 %.extract134, i32 %.extract136, ptr addrspace(1) %555, i1 %528) #1, !dbg !44
  %.extract138 = extractelement <4 x i32> %736, i64 0, !dbg !44
  %.extract140 = extractelement <4 x i32> %736, i64 1, !dbg !44
  %.extract142 = extractelement <4 x i32> %736, i64 2, !dbg !44
  %.extract144 = extractelement <4 x i32> %736, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract138, i32 %.extract140, i32 %.extract142, i32 %.extract144, ptr addrspace(1) %557, i1 %529) #1, !dbg !44
  %.extract146 = extractelement <4 x i32> %753, i64 0, !dbg !44
  %.extract148 = extractelement <4 x i32> %753, i64 1, !dbg !44
  %.extract150 = extractelement <4 x i32> %753, i64 2, !dbg !44
  %.extract152 = extractelement <4 x i32> %753, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract148, i32 %.extract150, i32 %.extract152, ptr addrspace(1) %559, i1 %529) #1, !dbg !44
  %.extract154 = extractelement <4 x i32> %754, i64 0, !dbg !44
  %.extract156 = extractelement <4 x i32> %754, i64 1, !dbg !44
  %.extract158 = extractelement <4 x i32> %754, i64 2, !dbg !44
  %.extract160 = extractelement <4 x i32> %754, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract154, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %561, i1 %529) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clnjnrge2jufmihblxlp2dbu7rcb6lssarqzeh5aacx3gravsytm.py", directory: "/tmp/torchinductor_root/ln")
!4 = !{ptr @triton_mm, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 56, column: 24, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 29, scope: !6)
!27 = !DILocation(line: 77, column: 54, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 25, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
