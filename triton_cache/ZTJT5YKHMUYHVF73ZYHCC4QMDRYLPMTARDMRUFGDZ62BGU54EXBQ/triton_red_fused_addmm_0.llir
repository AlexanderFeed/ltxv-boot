; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused_addmm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = icmp slt i32 %7, 9216, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 3, !dbg !11
  %13 = and i32 %12, 4088, !dbg !11
  %14 = icmp samesign ult i32 %13, 3072, !dbg !12
  %15 = zext nneg i32 %13 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %0, i64 %15, !dbg !13
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %16, i1 %14) #4, !dbg !14
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !14
  %19 = bitcast i32 %18 to <2 x bfloat>, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !14
  %21 = bitcast i32 %20 to <2 x bfloat>, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !14
  %23 = bitcast i32 %22 to <2 x bfloat>, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !14
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !14
  %26 = extractelement <2 x bfloat> %19, i64 0, !dbg !14
  %27 = extractelement <2 x bfloat> %19, i64 1, !dbg !14
  %28 = fpext bfloat %26 to float, !dbg !15
  %29 = fpext bfloat %27 to float, !dbg !15
  %30 = mul i32 %7, 3072, !dbg !16
  %31 = add i32 %13, %30, !dbg !17
  %32 = sext i32 %31 to i64, !dbg !18
  %33 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = and i1 %8, %14, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %34) #4, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %41 = bitcast i32 %40 to <2 x bfloat>, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !20
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !20
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !20
  %46 = fpext bfloat %44 to float, !dbg !21
  %47 = fpext bfloat %45 to float, !dbg !21
  %48 = fsub float 0.000000e+00, %28, !dbg !22
  %49 = fsub float 0.000000e+00, %29, !dbg !22
  %50 = fmul float %48, 0x3FF7154760000000, !dbg !26
  %51 = tail call float @llvm.nvvm.ex2.approx.f(float %50), !dbg !26
  %52 = fmul float %49, 0x3FF7154760000000, !dbg !26
  %53 = tail call float @llvm.nvvm.ex2.approx.f(float %52), !dbg !26
  %54 = fadd float %51, 1.000000e+00, !dbg !27
  %55 = fadd float %53, 1.000000e+00, !dbg !27
  %56 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %54), !dbg !28
  %57 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %55), !dbg !28
  %58 = fmul float %56, %28, !dbg !29
  %59 = fmul float %57, %29, !dbg !29
  %60 = fmul float %58, %46, !dbg !30
  %61 = fmul float %59, %47, !dbg !30
  %62 = fadd float %60, 0.000000e+00, !dbg !31
  %63 = fadd float %61, 0.000000e+00, !dbg !31
  %64 = fpext <2 x bfloat> %21 to <2 x float>, !dbg !15
  %65 = fpext <2 x bfloat> %39 to <2 x float>, !dbg !21
  %66 = extractelement <2 x float> %64, i64 0, !dbg !22
  %67 = fsub float 0.000000e+00, %66, !dbg !22
  %68 = extractelement <2 x float> %64, i64 1, !dbg !22
  %69 = fsub float 0.000000e+00, %68, !dbg !22
  %70 = fmul float %67, 0x3FF7154760000000, !dbg !26
  %71 = tail call float @llvm.nvvm.ex2.approx.f(float %70), !dbg !26
  %72 = fmul float %69, 0x3FF7154760000000, !dbg !26
  %73 = tail call float @llvm.nvvm.ex2.approx.f(float %72), !dbg !26
  %74 = fadd float %71, 1.000000e+00, !dbg !27
  %75 = fadd float %73, 1.000000e+00, !dbg !27
  %76 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %74), !dbg !28
  %77 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !28
  %78 = insertelement <2 x float> poison, float %76, i64 0, !dbg !29
  %79 = insertelement <2 x float> %78, float %77, i64 1, !dbg !29
  %80 = fmul <2 x float> %79, %64, !dbg !29
  %81 = fmul <2 x float> %80, %65, !dbg !30
  %82 = fadd <2 x float> %81, zeroinitializer, !dbg !31
  %83 = fpext <2 x bfloat> %23 to <2 x float>, !dbg !15
  %84 = fpext <2 x bfloat> %41 to <2 x float>, !dbg !21
  %85 = extractelement <2 x float> %83, i64 0, !dbg !22
  %86 = fsub float 0.000000e+00, %85, !dbg !22
  %87 = extractelement <2 x float> %83, i64 1, !dbg !22
  %88 = fsub float 0.000000e+00, %87, !dbg !22
  %89 = fmul float %86, 0x3FF7154760000000, !dbg !26
  %90 = tail call float @llvm.nvvm.ex2.approx.f(float %89), !dbg !26
  %91 = fmul float %88, 0x3FF7154760000000, !dbg !26
  %92 = tail call float @llvm.nvvm.ex2.approx.f(float %91), !dbg !26
  %93 = fadd float %90, 1.000000e+00, !dbg !27
  %94 = fadd float %92, 1.000000e+00, !dbg !27
  %95 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %93), !dbg !28
  %96 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %94), !dbg !28
  %97 = insertelement <2 x float> poison, float %95, i64 0, !dbg !29
  %98 = insertelement <2 x float> %97, float %96, i64 1, !dbg !29
  %99 = fmul <2 x float> %98, %83, !dbg !29
  %100 = fmul <2 x float> %99, %84, !dbg !30
  %101 = fadd <2 x float> %100, zeroinitializer, !dbg !31
  %102 = fpext <2 x bfloat> %25 to <2 x float>, !dbg !15
  %103 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !21
  %104 = extractelement <2 x float> %102, i64 0, !dbg !22
  %105 = fsub float 0.000000e+00, %104, !dbg !22
  %106 = extractelement <2 x float> %102, i64 1, !dbg !22
  %107 = fsub float 0.000000e+00, %106, !dbg !22
  %108 = fmul float %105, 0x3FF7154760000000, !dbg !26
  %109 = tail call float @llvm.nvvm.ex2.approx.f(float %108), !dbg !26
  %110 = fmul float %107, 0x3FF7154760000000, !dbg !26
  %111 = tail call float @llvm.nvvm.ex2.approx.f(float %110), !dbg !26
  %112 = fadd float %109, 1.000000e+00, !dbg !27
  %113 = fadd float %111, 1.000000e+00, !dbg !27
  %114 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %112), !dbg !28
  %115 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %113), !dbg !28
  %116 = insertelement <2 x float> poison, float %114, i64 0, !dbg !29
  %117 = insertelement <2 x float> %116, float %115, i64 1, !dbg !29
  %118 = fmul <2 x float> %117, %102, !dbg !29
  %119 = fmul <2 x float> %118, %103, !dbg !30
  %120 = fadd <2 x float> %119, zeroinitializer, !dbg !31
  %121 = fadd float %62, %63, !dbg !32
  %122 = extractelement <2 x float> %82, i64 0, !dbg !32
  %123 = fadd float %121, %122, !dbg !32
  %124 = extractelement <2 x float> %82, i64 1, !dbg !32
  %125 = fadd float %123, %124, !dbg !32
  %126 = extractelement <2 x float> %101, i64 0, !dbg !32
  %127 = fadd float %125, %126, !dbg !32
  %128 = extractelement <2 x float> %101, i64 1, !dbg !32
  %129 = fadd float %127, %128, !dbg !32
  %130 = extractelement <2 x float> %120, i64 0, !dbg !32
  %131 = fadd float %129, %130, !dbg !32
  %132 = extractelement <2 x float> %120, i64 1, !dbg !32
  %133 = fadd float %131, %132, !dbg !32
  %134 = select i1 %34, float %133, float 0.000000e+00, !dbg !32
  %135 = bitcast float %134 to i32, !dbg !35
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !35
  %137 = bitcast i32 %136 to float, !dbg !35
  %138 = fadd float %134, %137, !dbg !32
  %139 = bitcast float %138 to i32, !dbg !35
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !35
  %141 = bitcast i32 %140 to float, !dbg !35
  %142 = fadd float %138, %141, !dbg !32
  %143 = bitcast float %142 to i32, !dbg !35
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !35
  %145 = bitcast i32 %144 to float, !dbg !35
  %146 = fadd float %142, %145, !dbg !32
  %147 = bitcast float %146 to i32, !dbg !35
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !35
  %149 = bitcast i32 %148 to float, !dbg !35
  %150 = fadd float %146, %149, !dbg !32
  %151 = bitcast float %150 to i32, !dbg !35
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = fadd float %150, %153, !dbg !32
  %155 = and i32 %11, 15, !dbg !35
  %156 = icmp eq i32 %10, 0, !dbg !35
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !35
  %158 = bitcast float %154 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %156) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %159 = icmp slt i32 %9, 16, !dbg !35
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !35
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #4, !dbg !35
  %162 = bitcast i32 %161 to float, !dbg !35
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !35
  %164 = bitcast i32 %163 to float, !dbg !35
  %165 = fadd float %162, %164, !dbg !32
  %166 = bitcast float %165 to i32, !dbg !35
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !35
  %168 = bitcast i32 %167 to float, !dbg !35
  %169 = fadd float %165, %168, !dbg !32
  %170 = bitcast float %169 to i32, !dbg !35
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !35
  %172 = bitcast i32 %171 to float, !dbg !35
  %173 = fadd float %169, %172, !dbg !32
  %174 = bitcast float %173 to i32, !dbg !35
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !35
  %176 = bitcast i32 %175 to float, !dbg !35
  %177 = fadd float %173, %176, !dbg !32
  %178 = and i32 %9, 15, !dbg !35
  %179 = icmp eq i32 %178, 0, !dbg !35
  %180 = and i1 %159, %179, !dbg !35
  %181 = bitcast float %177 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %181, i1 %180) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %182 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %183 = sext i32 %7 to i64, !dbg !36
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !36
  %185 = and i32 %9, 511, !dbg !37
  %186 = icmp eq i32 %185, 0, !dbg !37
  %187 = and i1 %8, %186, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %184, i1 %187) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3javbtwo3kq53sidjme4mijol3flx6drv2tw7kvu43ep7t63egm.py", directory: "/tmp/torchinductor_root/3j")
!4 = !{ptr @triton_red_fused_addmm_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused_addmm_0", linkageName: "triton_red_fused_addmm_0", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 32, column: 29, scope: !6)
!13 = !DILocation(line: 36, column: 34, scope: !6)
!14 = !DILocation(line: 36, column: 41, scope: !6)
!15 = !DILocation(line: 36, column: 94, scope: !6)
!16 = !DILocation(line: 37, column: 46, scope: !6)
!17 = !DILocation(line: 37, column: 41, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 61, scope: !6)
!20 = !DILocation(line: 37, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 113, scope: !6)
!22 = !DILocation(line: 47, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/dist-packages/triton/language")
!25 = !DILocation(line: 39, column: 26, scope: !6)
!26 = !DILocation(line: 47, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 47, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 47, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 44, column: 22, scope: !6)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!34 = !DILocation(line: 48, column: 27, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !23, inlinedAt: !34)
!36 = !DILocation(line: 49, column: 25, scope: !6)
!37 = !DILocation(line: 49, column: 37, scope: !6)
!38 = !DILocation(line: 49, column: 4, scope: !6)
