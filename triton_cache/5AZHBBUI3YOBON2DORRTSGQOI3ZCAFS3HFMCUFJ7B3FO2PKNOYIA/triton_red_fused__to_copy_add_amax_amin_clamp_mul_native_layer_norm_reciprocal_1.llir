; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14, ptr addrspace(1) readnone captures(none) %15) local_unnamed_addr !dbg !6 {
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %18 = icmp slt i32 %17, 3600, !dbg !10
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %20 = and i32 %19, 31, !dbg !11
  %21 = lshr i32 %19, 5, !dbg !11
  %22 = shl i32 %19, 1, !dbg !11
  %23 = and i32 %22, 1022, !dbg !11
  %24 = mul i32 %17, 3072, !dbg !12
  %25 = or disjoint i32 %23, %24
  %26 = sext i32 %25 to i64, !dbg !13
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !13
  br i1 %18, label %__nv_rsqrtf.exit.loopexit, label %.split.preheader

.split.preheader:                                 ; preds = %16
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 false) #5, !dbg !14
  %29 = add i32 %25, 1024, !dbg !15
  %30 = sext i32 %29 to i64, !dbg !13
  %31 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !13
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 false) #5, !dbg !14
  %33 = add i32 %25, 2048, !dbg !15
  %34 = sext i32 %33 to i64, !dbg !13
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !13
  %36 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %35, i1 false) #5, !dbg !14
  br label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit.loopexit:                        ; preds = %16
  %37 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 true) #5, !dbg !14
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !14
  %39 = add i32 %25, 1024, !dbg !15
  %40 = sext i32 %39 to i64, !dbg !13
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %40, !dbg !13
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %41, i1 true) #5, !dbg !14
  %43 = bitcast i32 %42 to <2 x bfloat>, !dbg !14
  %44 = add i32 %25, 2048, !dbg !15
  %45 = sext i32 %44 to i64, !dbg !13
  %46 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !13
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %46, i1 true) #5, !dbg !14
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !14
  %49 = fpext <2 x bfloat> %38 to <2 x float>, !dbg !20
  %50 = fpext <2 x bfloat> %43 to <2 x float>, !dbg !20
  %51 = fsub <2 x float> %50, %49, !dbg !21
  %52 = extractelement <2 x float> %51, i64 0, !dbg !23
  %53 = tail call float @llvm.nvvm.div.full(float %52, float 2.000000e+00), !dbg !23
  %54 = extractelement <2 x float> %51, i64 1, !dbg !23
  %55 = tail call float @llvm.nvvm.div.full(float %54, float 2.000000e+00), !dbg !23
  %56 = insertelement <2 x float> poison, float %53, i64 0, !dbg !24
  %57 = insertelement <2 x float> %56, float %55, i64 1, !dbg !24
  %58 = fadd <2 x float> %57, %49, !dbg !24
  %59 = extractelement <2 x float> %58, i64 1, !dbg !24
  %60 = fsub <2 x float> %50, %58, !dbg !25
  %61 = fmul <2 x float> %51, %60, !dbg !26
  %62 = fadd <2 x float> %61, zeroinitializer, !dbg !27
  %63 = fpext <2 x bfloat> %48 to <2 x float>, !dbg !20
  %64 = extractelement <2 x float> %63, i64 1, !dbg !20
  %65 = extractelement <2 x float> %58, i64 0, !dbg !24
  %66 = fsub <2 x float> %63, %58, !dbg !21
  %67 = extractelement <2 x float> %66, i64 0, !dbg !21
  %68 = tail call float @llvm.nvvm.div.full(float %67, float 3.000000e+00), !dbg !23
  %69 = fadd float %65, %68, !dbg !24
  %70 = fsub float %64, %59, !dbg !21
  %71 = insertelement <2 x float> %58, float %69, i64 0, !dbg !25
  %72 = fsub <2 x float> %63, %71, !dbg !25
  %73 = tail call float @llvm.nvvm.div.full(float %70, float 3.000000e+00), !dbg !23
  %74 = fadd float %59, %73, !dbg !24
  %75 = fsub float %64, %74, !dbg !25
  %76 = insertelement <2 x float> %66, float %75, i64 1, !dbg !26
  %77 = fmul <2 x float> %72, %76, !dbg !26
  %78 = fadd <2 x float> %62, %77, !dbg !27
  %shift = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !16
  %79 = fadd <2 x float> %78, %shift, !dbg !16
  %80 = extractelement <2 x float> %79, i64 0, !dbg !16
  br label %__nv_rsqrtf.exit, !dbg !16

__nv_rsqrtf.exit:                                 ; preds = %.split.preheader, %__nv_rsqrtf.exit.loopexit
  %81 = phi float [ %69, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %82 = phi float [ %74, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %83 = phi float [ 3.000000e+00, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !16
  %84 = phi float [ %80, %__nv_rsqrtf.exit.loopexit ], [ 0.000000e+00, %.split.preheader ], !dbg !28
  %85 = fsub float %82, %81, !dbg !30
  %86 = fadd float %83, %83, !dbg !31
  %87 = fcmp oeq float %86, 0.000000e+00, !dbg !32
  %88 = tail call float @llvm.nvvm.div.full(float %83, float %86), !dbg !33
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !34
  %90 = fmul float %85, %89, !dbg !35
  %91 = fadd float %81, %90, !dbg !36
  %92 = fmul float %85, %85, !dbg !37
  %93 = fmul float %92, %83, !dbg !38
  %94 = fmul float %93, %89, !dbg !39
  %95 = fadd float %84, %94, !dbg !40
  %96 = bitcast float %91 to i32, !dbg !16
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !16
  %98 = bitcast i32 %97 to float, !dbg !16
  %99 = bitcast float %95 to i32, !dbg !16
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !16
  %101 = bitcast i32 %100 to float, !dbg !16
  %102 = bitcast float %86 to i32, !dbg !16
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !16
  %104 = bitcast i32 %103 to float, !dbg !16
  %105 = fsub float %98, %91, !dbg !30
  %106 = fadd float %86, %104, !dbg !31
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !32
  %108 = tail call float @llvm.nvvm.div.full(float %104, float %106), !dbg !33
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !34
  %110 = fmul float %105, %109, !dbg !35
  %111 = fadd float %91, %110, !dbg !36
  %112 = fadd float %95, %101, !dbg !28
  %113 = fmul float %105, %105, !dbg !37
  %114 = fmul float %86, %113, !dbg !38
  %115 = fmul float %114, %109, !dbg !39
  %116 = fadd float %112, %115, !dbg !40
  %117 = bitcast float %111 to i32, !dbg !16
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !16
  %119 = bitcast i32 %118 to float, !dbg !16
  %120 = bitcast float %116 to i32, !dbg !16
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !16
  %122 = bitcast i32 %121 to float, !dbg !16
  %123 = bitcast float %106 to i32, !dbg !16
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !16
  %125 = bitcast i32 %124 to float, !dbg !16
  %126 = fsub float %119, %111, !dbg !30
  %127 = fadd float %106, %125, !dbg !31
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !32
  %129 = tail call float @llvm.nvvm.div.full(float %125, float %127), !dbg !33
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !34
  %131 = fmul float %126, %130, !dbg !35
  %132 = fadd float %111, %131, !dbg !36
  %133 = fadd float %116, %122, !dbg !28
  %134 = fmul float %126, %126, !dbg !37
  %135 = fmul float %106, %134, !dbg !38
  %136 = fmul float %130, %135, !dbg !39
  %137 = fadd float %133, %136, !dbg !40
  %138 = bitcast float %132 to i32, !dbg !16
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !16
  %140 = bitcast i32 %139 to float, !dbg !16
  %141 = bitcast float %137 to i32, !dbg !16
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !16
  %143 = bitcast i32 %142 to float, !dbg !16
  %144 = bitcast float %127 to i32, !dbg !16
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !16
  %146 = bitcast i32 %145 to float, !dbg !16
  %147 = fsub float %140, %132, !dbg !30
  %148 = fadd float %127, %146, !dbg !31
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !32
  %150 = tail call float @llvm.nvvm.div.full(float %146, float %148), !dbg !33
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !34
  %152 = fmul float %147, %151, !dbg !35
  %153 = fadd float %132, %152, !dbg !36
  %154 = fadd float %137, %143, !dbg !28
  %155 = fmul float %147, %147, !dbg !37
  %156 = fmul float %127, %155, !dbg !38
  %157 = fmul float %151, %156, !dbg !39
  %158 = fadd float %154, %157, !dbg !40
  %159 = bitcast float %153 to i32, !dbg !16
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !16
  %161 = bitcast i32 %160 to float, !dbg !16
  %162 = bitcast float %158 to i32, !dbg !16
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !16
  %164 = bitcast i32 %163 to float, !dbg !16
  %165 = bitcast float %148 to i32, !dbg !16
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !16
  %167 = bitcast i32 %166 to float, !dbg !16
  %168 = fsub float %161, %153, !dbg !30
  %169 = fadd float %148, %167, !dbg !31
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !32
  %171 = tail call float @llvm.nvvm.div.full(float %167, float %169), !dbg !33
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !34
  %173 = fmul float %168, %172, !dbg !35
  %174 = fadd float %153, %173, !dbg !36
  %175 = fadd float %158, %164, !dbg !28
  %176 = fmul float %168, %168, !dbg !37
  %177 = fmul float %148, %176, !dbg !38
  %178 = fmul float %172, %177, !dbg !39
  %179 = fadd float %175, %178, !dbg !40
  %180 = bitcast float %174 to i32, !dbg !16
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !16
  %182 = bitcast i32 %181 to float, !dbg !16
  %183 = bitcast float %179 to i32, !dbg !16
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !16
  %185 = bitcast i32 %184 to float, !dbg !16
  %186 = bitcast float %169 to i32, !dbg !16
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !16
  %188 = bitcast i32 %187 to float, !dbg !16
  %189 = fsub float %182, %174, !dbg !30
  %190 = fadd float %169, %188, !dbg !31
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !32
  %192 = tail call float @llvm.nvvm.div.full(float %188, float %190), !dbg !33
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !34
  %194 = fmul float %189, %193, !dbg !35
  %195 = fadd float %174, %194, !dbg !36
  %196 = fadd float %179, %185, !dbg !28
  %197 = fmul float %189, %189, !dbg !37
  %198 = fmul float %169, %197, !dbg !38
  %199 = fmul float %193, %198, !dbg !39
  %200 = fadd float %196, %199, !dbg !40
  %201 = and i32 %21, 15, !dbg !16
  %202 = icmp eq i32 %20, 0, !dbg !16
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !16
  %204 = bitcast float %195 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 %202) #5, !dbg !16
  %205 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %201, !dbg !16
  %206 = bitcast float %200 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 %202) #5, !dbg !16
  %207 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %201, !dbg !16
  %208 = bitcast float %190 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 %202) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %209 = icmp slt i32 %19, 16, !dbg !16
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %19, !dbg !16
  %211 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %210, i1 %209) #5, !dbg !16
  %212 = bitcast i32 %211 to float, !dbg !16
  %213 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %19, !dbg !16
  %214 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %209) #5, !dbg !16
  %215 = bitcast i32 %214 to float, !dbg !16
  %216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %19, !dbg !16
  %217 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %216, i1 %209) #5, !dbg !16
  %218 = bitcast i32 %217 to float, !dbg !16
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 8, i32 31), !dbg !16
  %220 = bitcast i32 %219 to float, !dbg !16
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !16
  %222 = bitcast i32 %221 to float, !dbg !16
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 8, i32 31), !dbg !16
  %224 = bitcast i32 %223 to float, !dbg !16
  %225 = fsub float %220, %212, !dbg !30
  %226 = fadd float %218, %224, !dbg !31
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !32
  %228 = tail call float @llvm.nvvm.div.full(float %224, float %226), !dbg !33
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !34
  %230 = fmul float %225, %229, !dbg !35
  %231 = fadd float %230, %212, !dbg !36
  %232 = fadd float %215, %222, !dbg !28
  %233 = fmul float %225, %225, !dbg !37
  %234 = fmul float %233, %218, !dbg !38
  %235 = fmul float %234, %229, !dbg !39
  %236 = fadd float %232, %235, !dbg !40
  %237 = bitcast float %231 to i32, !dbg !16
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !16
  %239 = bitcast i32 %238 to float, !dbg !16
  %240 = bitcast float %236 to i32, !dbg !16
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !16
  %242 = bitcast i32 %241 to float, !dbg !16
  %243 = bitcast float %226 to i32, !dbg !16
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !16
  %245 = bitcast i32 %244 to float, !dbg !16
  %246 = fsub float %239, %231, !dbg !30
  %247 = fadd float %226, %245, !dbg !31
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !32
  %249 = tail call float @llvm.nvvm.div.full(float %245, float %247), !dbg !33
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !34
  %251 = fmul float %246, %250, !dbg !35
  %252 = fadd float %231, %251, !dbg !36
  %253 = fadd float %236, %242, !dbg !28
  %254 = fmul float %246, %246, !dbg !37
  %255 = fmul float %226, %254, !dbg !38
  %256 = fmul float %250, %255, !dbg !39
  %257 = fadd float %253, %256, !dbg !40
  %258 = bitcast float %252 to i32, !dbg !16
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !16
  %260 = bitcast i32 %259 to float, !dbg !16
  %261 = bitcast float %257 to i32, !dbg !16
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !16
  %263 = bitcast i32 %262 to float, !dbg !16
  %264 = bitcast float %247 to i32, !dbg !16
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !16
  %266 = bitcast i32 %265 to float, !dbg !16
  %267 = fsub float %260, %252, !dbg !30
  %268 = fadd float %247, %266, !dbg !31
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !32
  %270 = tail call float @llvm.nvvm.div.full(float %266, float %268), !dbg !33
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !34
  %272 = fmul float %267, %271, !dbg !35
  %273 = fadd float %252, %272, !dbg !36
  %274 = fadd float %257, %263, !dbg !28
  %275 = fmul float %267, %267, !dbg !37
  %276 = fmul float %247, %275, !dbg !38
  %277 = fmul float %271, %276, !dbg !39
  %278 = fadd float %274, %277, !dbg !40
  %279 = bitcast float %273 to i32, !dbg !16
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !16
  %281 = bitcast i32 %280 to float, !dbg !16
  %282 = bitcast float %278 to i32, !dbg !16
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !16
  %284 = bitcast i32 %283 to float, !dbg !16
  %285 = bitcast float %268 to i32, !dbg !16
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !16
  %287 = bitcast i32 %286 to float, !dbg !16
  %288 = fsub float %281, %273, !dbg !30
  %289 = fadd float %268, %287, !dbg !31
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !32
  %291 = tail call float @llvm.nvvm.div.full(float %287, float %289), !dbg !33
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !34
  %293 = fmul float %288, %292, !dbg !35
  %294 = fadd float %273, %293, !dbg !36
  %295 = fadd float %278, %284, !dbg !28
  %296 = fmul float %288, %288, !dbg !37
  %297 = fmul float %268, %296, !dbg !38
  %298 = fmul float %292, %297, !dbg !39
  %299 = fadd float %295, %298, !dbg !40
  %300 = and i32 %19, 15, !dbg !16
  %301 = icmp eq i32 %300, 0, !dbg !16
  %302 = and i1 %209, %301, !dbg !16
  %303 = bitcast float %294 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %303, i1 %302) #5, !dbg !16
  %304 = bitcast float %299 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %304, i1 %302) #5, !dbg !16
  %305 = bitcast float %289 to <1 x i32>, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %305, i1 %302) #5, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %306 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !16
  %307 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !16
  %308 = tail call float @llvm.nvvm.div.full(float %307, float 3.072000e+03), !dbg !41
  %309 = fadd float %308, 0x3EB0C6F7A0000000, !dbg !42
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i7 = icmp eq i32 %311, 0, !dbg !43
  br i1 %.not.i7, label %314, label %312, !dbg !43

312:                                              ; preds = %__nv_rsqrtf.exit
  %313 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %309), !dbg !43
  br label %__nv_rsqrtf.exit9, !dbg !43

314:                                              ; preds = %__nv_rsqrtf.exit
  %315 = tail call float @llvm.nvvm.rsqrt.approx.f(float %309), !dbg !43
  br label %__nv_rsqrtf.exit9, !dbg !43

__nv_rsqrtf.exit9:                                ; preds = %312, %314
  %.0.i8 = phi float [ %313, %312 ], [ %315, %314 ], !dbg !43
  %316 = zext nneg i32 %23 to i64, !dbg !44
  %317 = or disjoint i32 %23, %24, !dbg !45
  %318 = sext i32 %317 to i64, !dbg !46
  %319 = getelementptr bfloat, ptr addrspace(1) %0, i64 %318, !dbg !46
  %320 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %319, i1 %18) #5, !dbg !47
  %321 = bitcast i32 %320 to <2 x bfloat>, !dbg !47
  %322 = or disjoint i64 %316, 3072, !dbg !48
  %323 = getelementptr float, ptr addrspace(1) %1, i64 %322, !dbg !49
  %324 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %323, i1 true) #5, !dbg !50
  %325 = extractvalue { i32, i32 } %324, 0, !dbg !50
  %326 = extractvalue { i32, i32 } %324, 1, !dbg !50
  %327 = getelementptr bfloat, ptr addrspace(1) %2, i64 %322, !dbg !51
  %328 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %327, i1 true) #5, !dbg !52
  %329 = bitcast i32 %328 to <2 x bfloat>, !dbg !52
  %330 = getelementptr float, ptr addrspace(1) %1, i64 %316, !dbg !53
  %331 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %330, i1 true) #5, !dbg !54
  %332 = extractvalue { i32, i32 } %331, 0, !dbg !54
  %333 = extractvalue { i32, i32 } %331, 1, !dbg !54
  %334 = getelementptr bfloat, ptr addrspace(1) %2, i64 %316, !dbg !55
  %335 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %334, i1 true) #5, !dbg !56
  %336 = bitcast i32 %335 to <2 x bfloat>, !dbg !56
  %337 = getelementptr bfloat, ptr addrspace(1) %3, i64 %318, !dbg !57
  %338 = fpext <2 x bfloat> %321 to <2 x float>, !dbg !58
  %339 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !50
  %340 = insertelement <2 x i32> %339, i32 %326, i64 1, !dbg !50
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !50
  %342 = fpext <2 x bfloat> %329 to <2 x float>, !dbg !59
  %343 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !54
  %344 = insertelement <2 x i32> %343, i32 %333, i64 1, !dbg !54
  %345 = bitcast <2 x i32> %344 to <2 x float>, !dbg !54
  %346 = fpext <2 x bfloat> %336 to <2 x float>, !dbg !60
  %347 = insertelement <2 x float> poison, float %306, i64 0, !dbg !61
  %348 = shufflevector <2 x float> %347, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %349 = fsub <2 x float> %338, %348, !dbg !61
  %350 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !62
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %352 = fmul <2 x float> %351, %349, !dbg !62
  %353 = fadd <2 x float> %341, %342, !dbg !63
  %354 = fadd <2 x float> %353, splat (float 1.000000e+00), !dbg !64
  %355 = fmul <2 x float> %352, %354, !dbg !65
  %356 = fadd <2 x float> %345, %346, !dbg !66
  %357 = fadd <2 x float> %355, %356, !dbg !67
  %358 = fptrunc <2 x float> %357 to <2 x bfloat>, !dbg !68
  %359 = bitcast <2 x bfloat> %358 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %337, i1 %18) #5, !dbg !68
  %360 = or disjoint i64 %316, 1024, !dbg !69
  %361 = trunc nuw nsw i64 %360 to i32, !dbg !45
  %362 = add i32 %24, %361, !dbg !45
  %363 = sext i32 %362 to i64, !dbg !46
  %364 = getelementptr bfloat, ptr addrspace(1) %0, i64 %363, !dbg !46
  %365 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %364, i1 %18) #5, !dbg !47
  %366 = bitcast i32 %365 to <2 x bfloat>, !dbg !47
  %367 = or disjoint i64 %316, 4096, !dbg !48
  %368 = getelementptr float, ptr addrspace(1) %1, i64 %367, !dbg !49
  %369 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %368, i1 true) #5, !dbg !50
  %370 = extractvalue { i32, i32 } %369, 0, !dbg !50
  %371 = extractvalue { i32, i32 } %369, 1, !dbg !50
  %372 = getelementptr bfloat, ptr addrspace(1) %2, i64 %367, !dbg !51
  %373 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %372, i1 true) #5, !dbg !52
  %374 = bitcast i32 %373 to <2 x bfloat>, !dbg !52
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %360, !dbg !53
  %376 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %375, i1 true) #5, !dbg !54
  %377 = extractvalue { i32, i32 } %376, 0, !dbg !54
  %378 = extractvalue { i32, i32 } %376, 1, !dbg !54
  %379 = getelementptr bfloat, ptr addrspace(1) %2, i64 %360, !dbg !55
  %380 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %379, i1 true) #5, !dbg !56
  %381 = bitcast i32 %380 to <2 x bfloat>, !dbg !56
  %382 = getelementptr bfloat, ptr addrspace(1) %3, i64 %363, !dbg !57
  %383 = fpext <2 x bfloat> %366 to <2 x float>, !dbg !58
  %384 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !50
  %385 = insertelement <2 x i32> %384, i32 %371, i64 1, !dbg !50
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !50
  %387 = fpext <2 x bfloat> %374 to <2 x float>, !dbg !59
  %388 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !54
  %389 = insertelement <2 x i32> %388, i32 %378, i64 1, !dbg !54
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !54
  %391 = fpext <2 x bfloat> %381 to <2 x float>, !dbg !60
  %392 = fsub <2 x float> %383, %348, !dbg !61
  %393 = fmul <2 x float> %351, %392, !dbg !62
  %394 = fadd <2 x float> %386, %387, !dbg !63
  %395 = fadd <2 x float> %394, splat (float 1.000000e+00), !dbg !64
  %396 = fmul <2 x float> %393, %395, !dbg !65
  %397 = fadd <2 x float> %390, %391, !dbg !66
  %398 = fadd <2 x float> %396, %397, !dbg !67
  %399 = fptrunc <2 x float> %398 to <2 x bfloat>, !dbg !68
  %400 = bitcast <2 x bfloat> %399 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %382, i1 %18) #5, !dbg !68
  %401 = or disjoint i64 %316, 2048, !dbg !69
  %402 = trunc nuw nsw i64 %401 to i32, !dbg !45
  %403 = add i32 %24, %402, !dbg !45
  %404 = sext i32 %403 to i64, !dbg !46
  %405 = getelementptr bfloat, ptr addrspace(1) %0, i64 %404, !dbg !46
  %406 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %405, i1 %18) #5, !dbg !47
  %407 = bitcast i32 %406 to <2 x bfloat>, !dbg !47
  %408 = or disjoint i64 %316, 5120, !dbg !48
  %409 = getelementptr float, ptr addrspace(1) %1, i64 %408, !dbg !49
  %410 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %409, i1 true) #5, !dbg !50
  %411 = extractvalue { i32, i32 } %410, 0, !dbg !50
  %412 = extractvalue { i32, i32 } %410, 1, !dbg !50
  %413 = getelementptr bfloat, ptr addrspace(1) %2, i64 %408, !dbg !51
  %414 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %413, i1 true) #5, !dbg !52
  %415 = bitcast i32 %414 to <2 x bfloat>, !dbg !52
  %416 = getelementptr float, ptr addrspace(1) %1, i64 %401, !dbg !53
  %417 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %416, i1 true) #5, !dbg !54
  %418 = extractvalue { i32, i32 } %417, 0, !dbg !54
  %419 = extractvalue { i32, i32 } %417, 1, !dbg !54
  %420 = getelementptr bfloat, ptr addrspace(1) %2, i64 %401, !dbg !55
  %421 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %420, i1 true) #5, !dbg !56
  %422 = bitcast i32 %421 to <2 x bfloat>, !dbg !56
  %423 = getelementptr bfloat, ptr addrspace(1) %3, i64 %404, !dbg !57
  %424 = fpext <2 x bfloat> %407 to <2 x float>, !dbg !58
  %425 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !50
  %426 = insertelement <2 x i32> %425, i32 %412, i64 1, !dbg !50
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !50
  %428 = fpext <2 x bfloat> %415 to <2 x float>, !dbg !59
  %429 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !54
  %430 = insertelement <2 x i32> %429, i32 %419, i64 1, !dbg !54
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !54
  %432 = fpext <2 x bfloat> %422 to <2 x float>, !dbg !60
  %433 = fsub <2 x float> %424, %348, !dbg !61
  %434 = fmul <2 x float> %351, %433, !dbg !62
  %435 = fadd <2 x float> %427, %428, !dbg !63
  %436 = fadd <2 x float> %435, splat (float 1.000000e+00), !dbg !64
  %437 = fmul <2 x float> %434, %436, !dbg !65
  %438 = fadd <2 x float> %431, %432, !dbg !66
  %439 = fadd <2 x float> %437, %438, !dbg !67
  %440 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !70
  %441 = shufflevector <2 x i1> %440, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !70
  %442 = select <2 x i1> %441, <2 x float> %357, <2 x float> splat (float 0x7FF0000000000000), !dbg !70
  %443 = fcmp uno <2 x float> %442, zeroinitializer, !dbg !71
  %444 = fcmp olt <2 x float> %442, %398, !dbg !73
  %445 = or <2 x i1> %443, %444, !dbg !74
  %446 = select <2 x i1> %445, <2 x float> %442, <2 x float> %398, !dbg !75
  %447 = select <2 x i1> %441, <2 x float> %446, <2 x float> splat (float 0x7FF0000000000000), !dbg !70
  %448 = fcmp uno <2 x float> %447, zeroinitializer, !dbg !71
  %449 = fcmp olt <2 x float> %447, %439, !dbg !73
  %450 = or <2 x i1> %448, %449, !dbg !74
  %451 = select <2 x i1> %450, <2 x float> %447, <2 x float> %439, !dbg !75
  %452 = select <2 x i1> %441, <2 x float> %451, <2 x float> splat (float 0x7FF0000000000000), !dbg !70
  %453 = select <2 x i1> %441, <2 x float> %357, <2 x float> splat (float 0xFFF0000000000000), !dbg !76
  %454 = fcmp uno <2 x float> %453, zeroinitializer, !dbg !77
  %455 = fcmp ogt <2 x float> %453, %398, !dbg !79
  %456 = or <2 x i1> %454, %455, !dbg !80
  %457 = select <2 x i1> %456, <2 x float> %453, <2 x float> %398, !dbg !81
  %458 = select <2 x i1> %441, <2 x float> %457, <2 x float> splat (float 0xFFF0000000000000), !dbg !76
  %459 = fcmp uno <2 x float> %458, zeroinitializer, !dbg !77
  %460 = fcmp ogt <2 x float> %458, %439, !dbg !79
  %461 = or <2 x i1> %459, %460, !dbg !80
  %462 = select <2 x i1> %461, <2 x float> %458, <2 x float> %439, !dbg !81
  %463 = select <2 x i1> %441, <2 x float> %462, <2 x float> splat (float 0xFFF0000000000000), !dbg !76
  %464 = fptrunc <2 x float> %439 to <2 x bfloat>, !dbg !68
  %465 = bitcast <2 x bfloat> %464 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %423, i1 %18) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %466 = extractelement <2 x float> %452, i64 0, !dbg !84
  %467 = extractelement <2 x float> %452, i64 1, !dbg !84
  %468 = fcmp olt float %466, %467, !dbg !84
  %469 = fcmp uno float %466, 0.000000e+00, !dbg !85
  %470 = or i1 %468, %469, !dbg !86
  %471 = select i1 %470, float %466, float %467, !dbg !87
  %472 = bitcast float %471 to i32, !dbg !82
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 16, i32 31), !dbg !82
  %474 = bitcast i32 %473 to float, !dbg !82
  %475 = fcmp olt float %471, %474, !dbg !84
  %476 = fcmp uno float %471, 0.000000e+00, !dbg !85
  %477 = or i1 %476, %475, !dbg !86
  %478 = select i1 %477, float %471, float %474, !dbg !87
  %479 = bitcast float %478 to i32, !dbg !82
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !82
  %481 = bitcast i32 %480 to float, !dbg !82
  %482 = fcmp olt float %478, %481, !dbg !84
  %483 = fcmp uno float %478, 0.000000e+00, !dbg !85
  %484 = or i1 %482, %483, !dbg !86
  %485 = select i1 %484, float %478, float %481, !dbg !87
  %486 = bitcast float %485 to i32, !dbg !82
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 4, i32 31), !dbg !82
  %488 = bitcast i32 %487 to float, !dbg !82
  %489 = fcmp olt float %485, %488, !dbg !84
  %490 = fcmp uno float %485, 0.000000e+00, !dbg !85
  %491 = or i1 %489, %490, !dbg !86
  %492 = select i1 %491, float %485, float %488, !dbg !87
  %493 = bitcast float %492 to i32, !dbg !82
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 2, i32 31), !dbg !82
  %495 = bitcast i32 %494 to float, !dbg !82
  %496 = fcmp olt float %492, %495, !dbg !84
  %497 = fcmp uno float %492, 0.000000e+00, !dbg !85
  %498 = or i1 %496, %497, !dbg !86
  %499 = select i1 %498, float %492, float %495, !dbg !87
  %500 = bitcast float %499 to i32, !dbg !82
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !82
  %502 = bitcast i32 %501 to float, !dbg !82
  %503 = fcmp olt float %499, %502, !dbg !84
  %504 = fcmp uno float %499, 0.000000e+00, !dbg !85
  %505 = or i1 %503, %504, !dbg !86
  %506 = select i1 %505, i32 %500, i32 %501, !dbg !87
  %507 = insertelement <1 x i32> poison, i32 %506, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %507, i1 %202) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %508 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %210, i1 %209) #5, !dbg !82
  %509 = bitcast i32 %508 to float, !dbg !82
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 8, i32 31), !dbg !82
  %511 = bitcast i32 %510 to float, !dbg !82
  %512 = fcmp olt float %509, %511, !dbg !84
  %513 = fcmp uno float %509, 0.000000e+00, !dbg !85
  %514 = or i1 %513, %512, !dbg !86
  %515 = select i1 %514, float %509, float %511, !dbg !87
  %516 = bitcast float %515 to i32, !dbg !82
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 4, i32 31), !dbg !82
  %518 = bitcast i32 %517 to float, !dbg !82
  %519 = fcmp olt float %515, %518, !dbg !84
  %520 = fcmp uno float %515, 0.000000e+00, !dbg !85
  %521 = or i1 %519, %520, !dbg !86
  %522 = select i1 %521, float %515, float %518, !dbg !87
  %523 = bitcast float %522 to i32, !dbg !82
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 2, i32 31), !dbg !82
  %525 = bitcast i32 %524 to float, !dbg !82
  %526 = fcmp olt float %522, %525, !dbg !84
  %527 = fcmp uno float %522, 0.000000e+00, !dbg !85
  %528 = or i1 %526, %527, !dbg !86
  %529 = select i1 %528, float %522, float %525, !dbg !87
  %530 = bitcast float %529 to i32, !dbg !82
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %530, i32 1, i32 31), !dbg !82
  %532 = bitcast i32 %531 to float, !dbg !82
  %533 = fcmp olt float %529, %532, !dbg !84
  %534 = fcmp uno float %529, 0.000000e+00, !dbg !85
  %535 = or i1 %533, %534, !dbg !86
  %536 = select i1 %535, i32 %530, i32 %531, !dbg !87
  %537 = insertelement <1 x i32> poison, i32 %536, i64 0, !dbg !82
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %537, i1 %302) #5, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %538 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %539 = extractelement <2 x float> %463, i64 0, !dbg !90
  %540 = extractelement <2 x float> %463, i64 1, !dbg !90
  %541 = fcmp ogt float %539, %540, !dbg !90
  %542 = fcmp uno float %539, 0.000000e+00, !dbg !91
  %543 = or i1 %541, %542, !dbg !92
  %544 = select i1 %543, float %539, float %540, !dbg !93
  %545 = bitcast float %544 to i32, !dbg !88
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 16, i32 31), !dbg !88
  %547 = bitcast i32 %546 to float, !dbg !88
  %548 = fcmp ogt float %544, %547, !dbg !90
  %549 = fcmp uno float %544, 0.000000e+00, !dbg !91
  %550 = or i1 %549, %548, !dbg !92
  %551 = select i1 %550, float %544, float %547, !dbg !93
  %552 = bitcast float %551 to i32, !dbg !88
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 8, i32 31), !dbg !88
  %554 = bitcast i32 %553 to float, !dbg !88
  %555 = fcmp ogt float %551, %554, !dbg !90
  %556 = fcmp uno float %551, 0.000000e+00, !dbg !91
  %557 = or i1 %555, %556, !dbg !92
  %558 = select i1 %557, float %551, float %554, !dbg !93
  %559 = bitcast float %558 to i32, !dbg !88
  %560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %559, i32 4, i32 31), !dbg !88
  %561 = bitcast i32 %560 to float, !dbg !88
  %562 = fcmp ogt float %558, %561, !dbg !90
  %563 = fcmp uno float %558, 0.000000e+00, !dbg !91
  %564 = or i1 %562, %563, !dbg !92
  %565 = select i1 %564, float %558, float %561, !dbg !93
  %566 = bitcast float %565 to i32, !dbg !88
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 2, i32 31), !dbg !88
  %568 = bitcast i32 %567 to float, !dbg !88
  %569 = fcmp ogt float %565, %568, !dbg !90
  %570 = fcmp uno float %565, 0.000000e+00, !dbg !91
  %571 = or i1 %569, %570, !dbg !92
  %572 = select i1 %571, float %565, float %568, !dbg !93
  %573 = bitcast float %572 to i32, !dbg !88
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 1, i32 31), !dbg !88
  %575 = bitcast i32 %574 to float, !dbg !88
  %576 = fcmp ogt float %572, %575, !dbg !90
  %577 = fcmp uno float %572, 0.000000e+00, !dbg !91
  %578 = or i1 %576, %577, !dbg !92
  %579 = select i1 %578, i32 %573, i32 %574, !dbg !93
  %580 = insertelement <1 x i32> poison, i32 %579, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %580, i1 %202) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %581 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %210, i1 %209) #5, !dbg !88
  %582 = bitcast i32 %581 to float, !dbg !88
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 8, i32 31), !dbg !88
  %584 = bitcast i32 %583 to float, !dbg !88
  %585 = fcmp ogt float %582, %584, !dbg !90
  %586 = fcmp uno float %582, 0.000000e+00, !dbg !91
  %587 = or i1 %586, %585, !dbg !92
  %588 = select i1 %587, float %582, float %584, !dbg !93
  %589 = bitcast float %588 to i32, !dbg !88
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 4, i32 31), !dbg !88
  %591 = bitcast i32 %590 to float, !dbg !88
  %592 = fcmp ogt float %588, %591, !dbg !90
  %593 = fcmp uno float %588, 0.000000e+00, !dbg !91
  %594 = or i1 %592, %593, !dbg !92
  %595 = select i1 %594, float %588, float %591, !dbg !93
  %596 = bitcast float %595 to i32, !dbg !88
  %597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 2, i32 31), !dbg !88
  %598 = bitcast i32 %597 to float, !dbg !88
  %599 = fcmp ogt float %595, %598, !dbg !90
  %600 = fcmp uno float %595, 0.000000e+00, !dbg !91
  %601 = or i1 %599, %600, !dbg !92
  %602 = select i1 %601, float %595, float %598, !dbg !93
  %603 = bitcast float %602 to i32, !dbg !88
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 1, i32 31), !dbg !88
  %605 = bitcast i32 %604 to float, !dbg !88
  %606 = fcmp ogt float %602, %605, !dbg !90
  %607 = fcmp uno float %602, 0.000000e+00, !dbg !91
  %608 = or i1 %606, %607, !dbg !92
  %609 = select i1 %608, i32 %603, i32 %604, !dbg !93
  %610 = insertelement <1 x i32> poison, i32 %609, i64 0, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %610, i1 %302) #5, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !88
  %611 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !88
  %612 = sext i32 %17 to i64, !dbg !94
  %613 = getelementptr bfloat, ptr addrspace(1) %4, i64 %612, !dbg !94
  %614 = fptrunc float %538 to bfloat, !dbg !95
  %615 = and i32 %19, 511, !dbg !95
  %616 = icmp eq i32 %615, 0, !dbg !95
  %617 = bitcast bfloat %614 to i16, !dbg !95
  %618 = and i1 %18, %616, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %617, ptr addrspace(1) %613, i1 %618) #5, !dbg !95
  %619 = getelementptr bfloat, ptr addrspace(1) %5, i64 %612, !dbg !96
  %620 = fptrunc float %611 to bfloat, !dbg !97
  %621 = bitcast bfloat %620 to i16, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %621, ptr addrspace(1) %619, i1 %618) #5, !dbg !97
  %622 = getelementptr bfloat, ptr addrspace(1) %6, i64 %612, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %617, ptr addrspace(1) %622, i1 %618) #5, !dbg !99
  %623 = getelementptr bfloat, ptr addrspace(1) %7, i64 %612, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %621, ptr addrspace(1) %623, i1 %618) #5, !dbg !101
  %624 = getelementptr bfloat, ptr addrspace(1) %8, i64 %612, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %617, ptr addrspace(1) %624, i1 %618) #5, !dbg !103
  %625 = getelementptr bfloat, ptr addrspace(1) %9, i64 %612, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %621, ptr addrspace(1) %625, i1 %618) #5, !dbg !105
  %.inv = fcmp oge float %538, 0.000000e+00, !dbg !106
  %626 = select i1 %.inv, float 0.000000e+00, float %538, !dbg !106
  %627 = fsub float 0.000000e+00, %626, !dbg !108
  %.inv3 = fcmp ole float %611, 0.000000e+00, !dbg !109
  %628 = select i1 %.inv3, float 0.000000e+00, float %611, !dbg !109
  %629 = fcmp ogt float %627, %628, !dbg !111
  %630 = fcmp uno float %627, 0.000000e+00, !dbg !113
  %631 = or i1 %630, %629, !dbg !114
  %632 = select i1 %631, float %627, float %628, !dbg !115
  %633 = fmul float %632, 0x3F80204080000000, !dbg !116
  %634 = fcmp ogt float %633, 0x3EE4F8B580000000, !dbg !117
  %635 = fcmp uno float %633, 0.000000e+00, !dbg !119
  %636 = or i1 %634, %635, !dbg !120
  %637 = select i1 %636, float %633, float 0x3EE4F8B580000000, !dbg !121
  %638 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %637), !dbg !122
  %639 = sext i32 %25 to i64, !dbg !123
  %640 = getelementptr bfloat, ptr addrspace(1) %3, i64 %639, !dbg !123
  %641 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %640, i1 %18) #5, !dbg !124
  %642 = bitcast i32 %641 to <2 x bfloat>, !dbg !124
  %643 = extractelement <2 x bfloat> %642, i64 0, !dbg !124
  %644 = extractelement <2 x bfloat> %642, i64 1, !dbg !124
  %645 = fpext bfloat %643 to float, !dbg !125
  %646 = fpext bfloat %644 to float, !dbg !125
  %647 = fmul float %638, %645, !dbg !126
  %648 = fmul float %638, %646, !dbg !126
  %649 = tail call float @llvm.nvvm.round.f(float %647) #5, !dbg !127
  %650 = tail call float @llvm.nvvm.round.f(float %648) #5, !dbg !127
  %651 = insertelement <2 x float> poison, float %649, i64 0, !dbg !128
  %652 = insertelement <2 x float> %651, float %650, i64 1, !dbg !128
  %653 = fcmp ogt <2 x float> %652, splat (float -1.270000e+02), !dbg !128
  %654 = fcmp uno <2 x float> %652, zeroinitializer, !dbg !130
  %655 = or <2 x i1> %653, %654, !dbg !131
  %656 = select <2 x i1> %655, <2 x float> %652, <2 x float> splat (float -1.270000e+02), !dbg !132
  %657 = fcmp olt <2 x float> %656, splat (float 1.270000e+02), !dbg !133
  %658 = fcmp uno <2 x float> %656, zeroinitializer, !dbg !135
  %659 = or <2 x i1> %657, %658, !dbg !136
  %660 = fptosi <2 x float> %656 to <2 x i8>, !dbg !137
  %661 = select <2 x i1> %659, <2 x i8> %660, <2 x i8> splat (i8 127), !dbg !138
  %662 = getelementptr i8, ptr addrspace(1) %10, i64 %639, !dbg !139
  %663 = bitcast <2 x i8> %661 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %663, ptr addrspace(1) %662, i1 %18) #5, !dbg !140
  %664 = getelementptr i8, ptr addrspace(1) %11, i64 %639, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %663, ptr addrspace(1) %664, i1 %18) #5, !dbg !142
  %665 = getelementptr i8, ptr addrspace(1) %12, i64 %639, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %663, ptr addrspace(1) %665, i1 %18) #5, !dbg !144
  %666 = add i32 %25, 1024, !dbg !145
  %667 = sext i32 %666 to i64, !dbg !123
  %668 = getelementptr bfloat, ptr addrspace(1) %3, i64 %667, !dbg !123
  %669 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %668, i1 %18) #5, !dbg !124
  %670 = bitcast i32 %669 to <2 x bfloat>, !dbg !124
  %671 = extractelement <2 x bfloat> %670, i64 0, !dbg !124
  %672 = extractelement <2 x bfloat> %670, i64 1, !dbg !124
  %673 = fpext bfloat %671 to float, !dbg !125
  %674 = fpext bfloat %672 to float, !dbg !125
  %675 = fmul float %638, %673, !dbg !126
  %676 = fmul float %638, %674, !dbg !126
  %677 = tail call float @llvm.nvvm.round.f(float %675) #5, !dbg !127
  %678 = tail call float @llvm.nvvm.round.f(float %676) #5, !dbg !127
  %679 = insertelement <2 x float> poison, float %677, i64 0, !dbg !128
  %680 = insertelement <2 x float> %679, float %678, i64 1, !dbg !128
  %681 = fcmp ogt <2 x float> %680, splat (float -1.270000e+02), !dbg !128
  %682 = fcmp uno <2 x float> %680, zeroinitializer, !dbg !130
  %683 = or <2 x i1> %681, %682, !dbg !131
  %684 = select <2 x i1> %683, <2 x float> %680, <2 x float> splat (float -1.270000e+02), !dbg !132
  %685 = fcmp olt <2 x float> %684, splat (float 1.270000e+02), !dbg !133
  %686 = fcmp uno <2 x float> %684, zeroinitializer, !dbg !135
  %687 = or <2 x i1> %685, %686, !dbg !136
  %688 = fptosi <2 x float> %684 to <2 x i8>, !dbg !137
  %689 = select <2 x i1> %687, <2 x i8> %688, <2 x i8> splat (i8 127), !dbg !138
  %690 = getelementptr i8, ptr addrspace(1) %10, i64 %667, !dbg !139
  %691 = bitcast <2 x i8> %689 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %691, ptr addrspace(1) %690, i1 %18) #5, !dbg !140
  %692 = getelementptr i8, ptr addrspace(1) %11, i64 %667, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %691, ptr addrspace(1) %692, i1 %18) #5, !dbg !142
  %693 = getelementptr i8, ptr addrspace(1) %12, i64 %667, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %691, ptr addrspace(1) %693, i1 %18) #5, !dbg !144
  %694 = add i32 %25, 2048, !dbg !145
  %695 = sext i32 %694 to i64, !dbg !123
  %696 = getelementptr bfloat, ptr addrspace(1) %3, i64 %695, !dbg !123
  %697 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %696, i1 %18) #5, !dbg !124
  %698 = bitcast i32 %697 to <2 x bfloat>, !dbg !124
  %699 = extractelement <2 x bfloat> %698, i64 0, !dbg !124
  %700 = extractelement <2 x bfloat> %698, i64 1, !dbg !124
  %701 = fpext bfloat %699 to float, !dbg !125
  %702 = fpext bfloat %700 to float, !dbg !125
  %703 = fmul float %638, %701, !dbg !126
  %704 = fmul float %638, %702, !dbg !126
  %705 = tail call float @llvm.nvvm.round.f(float %703) #5, !dbg !127
  %706 = tail call float @llvm.nvvm.round.f(float %704) #5, !dbg !127
  %707 = insertelement <2 x float> poison, float %705, i64 0, !dbg !128
  %708 = insertelement <2 x float> %707, float %706, i64 1, !dbg !128
  %709 = fcmp ogt <2 x float> %708, splat (float -1.270000e+02), !dbg !128
  %710 = fcmp uno <2 x float> %708, zeroinitializer, !dbg !130
  %711 = or <2 x i1> %709, %710, !dbg !131
  %712 = select <2 x i1> %711, <2 x float> %708, <2 x float> splat (float -1.270000e+02), !dbg !132
  %713 = fcmp olt <2 x float> %712, splat (float 1.270000e+02), !dbg !133
  %714 = fcmp uno <2 x float> %712, zeroinitializer, !dbg !135
  %715 = or <2 x i1> %713, %714, !dbg !136
  %716 = fptosi <2 x float> %712 to <2 x i8>, !dbg !137
  %717 = select <2 x i1> %715, <2 x i8> %716, <2 x i8> splat (i8 127), !dbg !138
  %718 = getelementptr i8, ptr addrspace(1) %10, i64 %695, !dbg !139
  %719 = bitcast <2 x i8> %717 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %719, ptr addrspace(1) %718, i1 %18) #5, !dbg !140
  %720 = getelementptr i8, ptr addrspace(1) %11, i64 %695, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %719, ptr addrspace(1) %720, i1 %18) #5, !dbg !142
  %721 = getelementptr i8, ptr addrspace(1) %12, i64 %695, !dbg !143
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %719, ptr addrspace(1) %721, i1 %18) #5, !dbg !144
  ret void, !dbg !146
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cxutkcxztiurxzrcvzyj7vz7b2tlgrw5gszfwmy4fe2evxbbp.py", directory: "/tmp/torchinductor_root/i2")
!4 = !{ptr @triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", linkageName: "triton_red_fused__to_copy_add_amax_amin_clamp_mul_native_layer_norm_reciprocal_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 23, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 21, scope: !6)
!11 = !DILocation(line: 26, column: 37, scope: !6)
!12 = !DILocation(line: 38, column: 46, scope: !6)
!13 = !DILocation(line: 38, column: 34, scope: !6)
!14 = !DILocation(line: 38, column: 51, scope: !6)
!15 = !DILocation(line: 38, column: 41, scope: !6)
!16 = !DILocation(line: 229, column: 46, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !6, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/dist-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 47, column: 79, scope: !6)
!20 = !DILocation(line: 38, column: 112, scope: !6)
!21 = !DILocation(line: 208, column: 24, scope: !17, inlinedAt: !22)
!22 = !DILocation(line: 42, column: 51, scope: !6)
!23 = !DILocation(line: 210, column: 34, scope: !17, inlinedAt: !22)
!24 = !DILocation(line: 210, column: 26, scope: !17, inlinedAt: !22)
!25 = !DILocation(line: 211, column: 39, scope: !17, inlinedAt: !22)
!26 = !DILocation(line: 211, column: 31, scope: !17, inlinedAt: !22)
!27 = !DILocation(line: 211, column: 22, scope: !17, inlinedAt: !22)
!28 = !DILocation(line: 222, column: 15, scope: !29, inlinedAt: !19)
!29 = distinct !DILexicalBlockFile(scope: !17, file: !18, discriminator: 0)
!30 = !DILocation(line: 217, column: 21, scope: !29, inlinedAt: !19)
!31 = !DILocation(line: 218, column: 28, scope: !29, inlinedAt: !19)
!32 = !DILocation(line: 219, column: 39, scope: !29, inlinedAt: !19)
!33 = !DILocation(line: 219, column: 60, scope: !29, inlinedAt: !19)
!34 = !DILocation(line: 219, column: 49, scope: !29, inlinedAt: !19)
!35 = !DILocation(line: 221, column: 25, scope: !29, inlinedAt: !19)
!36 = !DILocation(line: 221, column: 17, scope: !29, inlinedAt: !19)
!37 = !DILocation(line: 222, column: 30, scope: !29, inlinedAt: !19)
!38 = !DILocation(line: 222, column: 38, scope: !29, inlinedAt: !19)
!39 = !DILocation(line: 222, column: 49, scope: !29, inlinedAt: !19)
!40 = !DILocation(line: 222, column: 22, scope: !29, inlinedAt: !19)
!41 = !DILocation(line: 67, column: 24, scope: !6)
!42 = !DILocation(line: 69, column: 24, scope: !6)
!43 = !DILocation(line: 70, column: 32, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 59, column: 41, scope: !6)
!46 = !DILocation(line: 59, column: 34, scope: !6)
!47 = !DILocation(line: 59, column: 51, scope: !6)
!48 = !DILocation(line: 60, column: 42, scope: !6)
!49 = !DILocation(line: 60, column: 35, scope: !6)
!50 = !DILocation(line: 60, column: 49, scope: !6)
!51 = !DILocation(line: 61, column: 35, scope: !6)
!52 = !DILocation(line: 61, column: 49, scope: !6)
!53 = !DILocation(line: 62, column: 35, scope: !6)
!54 = !DILocation(line: 62, column: 42, scope: !6)
!55 = !DILocation(line: 63, column: 35, scope: !6)
!56 = !DILocation(line: 63, column: 42, scope: !6)
!57 = !DILocation(line: 86, column: 29, scope: !6)
!58 = !DILocation(line: 59, column: 113, scope: !6)
!59 = !DILocation(line: 61, column: 102, scope: !6)
!60 = !DILocation(line: 63, column: 95, scope: !6)
!61 = !DILocation(line: 65, column: 24, scope: !6)
!62 = !DILocation(line: 71, column: 24, scope: !6)
!63 = !DILocation(line: 74, column: 24, scope: !6)
!64 = !DILocation(line: 76, column: 24, scope: !6)
!65 = !DILocation(line: 77, column: 24, scope: !6)
!66 = !DILocation(line: 79, column: 24, scope: !6)
!67 = !DILocation(line: 80, column: 24, scope: !6)
!68 = !DILocation(line: 86, column: 53, scope: !6)
!69 = !DILocation(line: 54, column: 31, scope: !6)
!70 = !DILocation(line: 83, column: 50, scope: !6)
!71 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !72)
!72 = !DILocation(line: 82, column: 47, scope: !6)
!73 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !72)
!74 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !72)
!75 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !72)
!76 = !DILocation(line: 85, column: 50, scope: !6)
!77 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !78)
!78 = !DILocation(line: 84, column: 47, scope: !6)
!79 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !78)
!80 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !78)
!81 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !78)
!82 = !DILocation(line: 110, column: 29, scope: !17, inlinedAt: !83)
!83 = !DILocation(line: 87, column: 40, scope: !6)
!84 = !DILocation(line: 94, column: 15, scope: !29, inlinedAt: !83)
!85 = !DILocation(line: 96, column: 21, scope: !29, inlinedAt: !83)
!86 = !DILocation(line: 96, column: 16, scope: !29, inlinedAt: !83)
!87 = !DILocation(line: 97, column: 29, scope: !29, inlinedAt: !83)
!88 = !DILocation(line: 115, column: 29, scope: !17, inlinedAt: !89)
!89 = !DILocation(line: 88, column: 40, scope: !6)
!90 = !DILocation(line: 102, column: 15, scope: !29, inlinedAt: !89)
!91 = !DILocation(line: 104, column: 21, scope: !29, inlinedAt: !89)
!92 = !DILocation(line: 104, column: 16, scope: !29, inlinedAt: !89)
!93 = !DILocation(line: 105, column: 29, scope: !29, inlinedAt: !89)
!94 = !DILocation(line: 89, column: 25, scope: !6)
!95 = !DILocation(line: 89, column: 37, scope: !6)
!96 = !DILocation(line: 90, column: 25, scope: !6)
!97 = !DILocation(line: 90, column: 37, scope: !6)
!98 = !DILocation(line: 91, column: 25, scope: !6)
!99 = !DILocation(line: 91, column: 37, scope: !6)
!100 = !DILocation(line: 92, column: 25, scope: !6)
!101 = !DILocation(line: 92, column: 37, scope: !6)
!102 = !DILocation(line: 93, column: 25, scope: !6)
!103 = !DILocation(line: 93, column: 37, scope: !6)
!104 = !DILocation(line: 94, column: 25, scope: !6)
!105 = !DILocation(line: 94, column: 37, scope: !6)
!106 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !107)
!107 = !DILocation(line: 103, column: 46, scope: !6)
!108 = !DILocation(line: 104, column: 17, scope: !6)
!109 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !110)
!110 = !DILocation(line: 105, column: 46, scope: !6)
!111 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !112)
!112 = !DILocation(line: 106, column: 46, scope: !6)
!113 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !112)
!114 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !112)
!115 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !112)
!116 = !DILocation(line: 108, column: 24, scope: !6)
!117 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !118)
!118 = !DILocation(line: 111, column: 46, scope: !6)
!119 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !118)
!120 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !118)
!121 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !118)
!122 = !DILocation(line: 114, column: 25, scope: !6)
!123 = !DILocation(line: 101, column: 36, scope: !6)
!124 = !DILocation(line: 101, column: 53, scope: !6)
!125 = !DILocation(line: 101, column: 115, scope: !6)
!126 = !DILocation(line: 117, column: 24, scope: !6)
!127 = !DILocation(line: 118, column: 36, scope: !6)
!128 = !DILocation(line: 102, column: 15, scope: !17, inlinedAt: !129)
!129 = !DILocation(line: 121, column: 46, scope: !6)
!130 = !DILocation(line: 104, column: 21, scope: !17, inlinedAt: !129)
!131 = !DILocation(line: 104, column: 16, scope: !17, inlinedAt: !129)
!132 = !DILocation(line: 105, column: 29, scope: !17, inlinedAt: !129)
!133 = !DILocation(line: 94, column: 15, scope: !17, inlinedAt: !134)
!134 = !DILocation(line: 123, column: 46, scope: !6)
!135 = !DILocation(line: 96, column: 21, scope: !17, inlinedAt: !134)
!136 = !DILocation(line: 96, column: 16, scope: !17, inlinedAt: !134)
!137 = !DILocation(line: 125, column: 25, scope: !6)
!138 = !DILocation(line: 97, column: 29, scope: !17, inlinedAt: !134)
!139 = !DILocation(line: 126, column: 29, scope: !6)
!140 = !DILocation(line: 126, column: 53, scope: !6)
!141 = !DILocation(line: 127, column: 30, scope: !6)
!142 = !DILocation(line: 127, column: 54, scope: !6)
!143 = !DILocation(line: 128, column: 30, scope: !6)
!144 = !DILocation(line: 128, column: 54, scope: !6)
!145 = !DILocation(line: 101, column: 43, scope: !6)
!146 = !DILocation(line: 95, column: 4, scope: !6)
