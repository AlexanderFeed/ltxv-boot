; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) readnone captures(none) %3) local_unnamed_addr !dbg !6 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %6 = sdiv i32 %5, 192, !dbg !10
  %7 = shl nsw i32 %6, 3, !dbg !11
  %8 = sub nsw i32 2, %7, !dbg !12
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !13
  %10 = srem i32 %5, %9, !dbg !14
  %11 = add nsw i32 %10, %7, !dbg !15
  %12 = mul i32 %6, 192, !dbg !16
  %.decomposed = sub i32 %5, %12, !dbg !16
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 8, !dbg !19
  %17 = and i32 %15, 16, !dbg !19
  %18 = lshr i32 %15, 2, !dbg !19
  %19 = and i32 %15, 128, !dbg !19
  %20 = lshr exact i32 %19, 2, !dbg !19
  %21 = and i32 %18, 31, !dbg !19
  %22 = or disjoint i32 %21, %20, !dbg !19
  %23 = or disjoint i32 %14, %22, !dbg !20
  %24 = shl nsw i32 %13, 7, !dbg !21
  %25 = shl i32 %15, 3, !dbg !22
  %26 = and i32 %25, 24, !dbg !22
  %27 = or disjoint i32 %24, %22, !dbg !23
  %28 = srem i32 %23, 77, !dbg !24
  %.lhs.trunc = trunc i32 %27 to i16, !dbg !25
  %29 = srem i16 %.lhs.trunc, 3072, !dbg !25
  %.sext = sext i16 %29 to i32, !dbg !25
  %.lhs.trunc50 = or disjoint i16 %.lhs.trunc, 64, !dbg !25
  %30 = srem i16 %.lhs.trunc50, 3072, !dbg !25
  %.sext51 = sext i16 %30 to i32, !dbg !25
  %31 = mul nsw i32 %28, 768, !dbg !26
  %32 = mul nsw i32 %.sext, 768, !dbg !27
  %33 = mul nsw i32 %.sext51, 768, !dbg !27
  %34 = or disjoint i32 %31, %26, !dbg !28
  %35 = sext i32 %34 to i64, !dbg !29
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !29
  %37 = xor i32 %25, %15, !dbg !30
  %38 = and i32 %37, 24, !dbg !30
  %39 = shl nuw nsw i32 %22, 5, !dbg !30
  %40 = or disjoint i32 %39, %38, !dbg !30
  %41 = zext nneg i32 %40 to i64, !dbg !30
  %42 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %41, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %42, ptr addrspace(1) %36, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %43 = or disjoint i32 %32, %26, !dbg !31
  %44 = or disjoint i32 %33, %26, !dbg !31
  %45 = sext i32 %43 to i64, !dbg !32
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !32
  %47 = sext i32 %44 to i64, !dbg !32
  %48 = getelementptr bfloat, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %41, !dbg !33
  %50 = and i32 %18, 31, !dbg !33
  %51 = or disjoint i32 %50, %20, !dbg !33
  %52 = shl nuw nsw i32 %51, 5, !dbg !33
  %53 = or disjoint i32 %52, %38, !dbg !33
  %54 = or disjoint i32 %53, 2048, !dbg !33
  %55 = zext nneg i32 %54 to i64, !dbg !33
  %56 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %55, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %49, ptr addrspace(1) %46, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %56, ptr addrspace(1) %48, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %57 = or disjoint i32 %26, 32, !dbg !34
  %58 = or disjoint i32 %31, %57, !dbg !28
  %59 = sext i32 %58 to i64, !dbg !29
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %59, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %61 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 28672), i64 %41, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %61, ptr addrspace(1) %60, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %62 = or disjoint i32 %32, %57, !dbg !31
  %63 = or disjoint i32 %33, %57, !dbg !31
  %64 = sext i32 %62 to i64, !dbg !32
  %65 = getelementptr bfloat, ptr addrspace(1) %1, i64 %64, !dbg !32
  %66 = sext i32 %63 to i64, !dbg !32
  %67 = getelementptr bfloat, ptr addrspace(1) %1, i64 %66, !dbg !32
  %68 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %41, !dbg !33
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %55, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %65, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %69, ptr addrspace(1) %67, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %70 = or disjoint i32 %26, 64, !dbg !34
  %71 = or disjoint i32 %31, %70, !dbg !28
  %72 = sext i32 %71 to i64, !dbg !29
  %73 = getelementptr bfloat, ptr addrspace(1) %0, i64 %72, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %74 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %41, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %74, ptr addrspace(1) %73, i32 16) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %75 = or disjoint i32 %32, %70, !dbg !31
  %76 = or disjoint i32 %33, %70, !dbg !31
  %77 = sext i32 %75 to i64, !dbg !32
  %78 = getelementptr bfloat, ptr addrspace(1) %1, i64 %77, !dbg !32
  %79 = sext i32 %76 to i64, !dbg !32
  %80 = getelementptr bfloat, ptr addrspace(1) %1, i64 %79, !dbg !32
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %41, !dbg !33
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %55, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %81, ptr addrspace(1) %78, i32 16) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %82, ptr addrspace(1) %80, i32 16) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %invariant.op = or disjoint i32 %16, 32, !dbg !35
  %invariant.op86 = or disjoint i32 %26, 96, !dbg !35
  %83 = shl i32 %15, 2
  %84 = and i32 %83, 8
  %85 = and i32 %83, 16
  %86 = and i32 %83, 24
  %87 = and i32 %15, 7
  %88 = and i32 %15, 15
  %89 = lshr exact i32 %17, 1
  %90 = xor i32 %86, %89
  %91 = lshr exact i32 %19, 3
  %92 = or disjoint i32 %91, %88
  %93 = shl nuw nsw i32 %92, 5
  %94 = or disjoint i32 %90, %93
  %95 = zext nneg i32 %94 to i64
  %96 = or disjoint i32 %84, 16
  %97 = or disjoint i32 %89, %85
  %98 = xor i32 %97, %96
  %99 = or disjoint i32 %98, %93
  %100 = zext nneg i32 %99 to i64
  %.reass = or disjoint i32 %87, %invariant.op
  %101 = or disjoint i32 %.reass, %91
  %102 = shl nuw nsw i32 %101, 5
  %103 = or disjoint i32 %102, %90
  %104 = zext nneg i32 %103 to i64
  %105 = or disjoint i32 %98, %102
  %106 = zext nneg i32 %105 to i64
  %107 = xor i32 %83, %15
  %108 = and i32 %107, 24
  %109 = and i32 %18, 24
  %110 = or disjoint i32 %109, %87
  %111 = shl nuw nsw i32 %110, 5
  %112 = or disjoint i32 %111, %108
  %113 = zext nneg i32 %112 to i64
  %invariant.op84 = and i32 %18, 24
  %114 = or disjoint i32 %invariant.op84, %87
  %115 = shl nuw nsw i32 %114, 5
  %116 = or disjoint i32 %115, %108
  %117 = or disjoint i32 %116, 1024
  %118 = zext nneg i32 %117 to i64
  %119 = or disjoint i32 %112, 2048
  %120 = zext nneg i32 %119 to i64
  %121 = or disjoint i32 %112, 3072
  %122 = zext nneg i32 %121 to i64
  %123 = zext nneg i32 %invariant.op86 to i64, !dbg !35
  %124 = sext i32 %33 to i64, !dbg !35
  %125 = sext i32 %32 to i64, !dbg !35
  %126 = sext i32 %31 to i64, !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %0, i64 %126, !dbg !35
  %invariant.gep152 = getelementptr bfloat, ptr addrspace(1) %1, i64 %125, !dbg !35
  %invariant.gep154 = getelementptr bfloat, ptr addrspace(1) %1, i64 %124, !dbg !35
  br label %127, !dbg !35

127:                                              ; preds = %4, %127
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %127 ]
  %128 = phi i32 [ -1, %4 ], [ %165, %127 ]
  %129 = phi i32 [ 2, %4 ], [ %318, %127 ]
  %130 = phi float [ 0.000000e+00, %4 ], [ %277, %127 ]
  %131 = phi float [ 0.000000e+00, %4 ], [ %278, %127 ]
  %132 = phi float [ 0.000000e+00, %4 ], [ %279, %127 ]
  %133 = phi float [ 0.000000e+00, %4 ], [ %280, %127 ]
  %134 = phi float [ 0.000000e+00, %4 ], [ %282, %127 ]
  %135 = phi float [ 0.000000e+00, %4 ], [ %283, %127 ]
  %136 = phi float [ 0.000000e+00, %4 ], [ %284, %127 ]
  %137 = phi float [ 0.000000e+00, %4 ], [ %285, %127 ]
  %138 = phi float [ 0.000000e+00, %4 ], [ %287, %127 ]
  %139 = phi float [ 0.000000e+00, %4 ], [ %288, %127 ]
  %140 = phi float [ 0.000000e+00, %4 ], [ %289, %127 ]
  %141 = phi float [ 0.000000e+00, %4 ], [ %290, %127 ]
  %142 = phi float [ 0.000000e+00, %4 ], [ %292, %127 ]
  %143 = phi float [ 0.000000e+00, %4 ], [ %293, %127 ]
  %144 = phi float [ 0.000000e+00, %4 ], [ %294, %127 ]
  %145 = phi float [ 0.000000e+00, %4 ], [ %295, %127 ]
  %146 = phi float [ 0.000000e+00, %4 ], [ %297, %127 ]
  %147 = phi float [ 0.000000e+00, %4 ], [ %298, %127 ]
  %148 = phi float [ 0.000000e+00, %4 ], [ %299, %127 ]
  %149 = phi float [ 0.000000e+00, %4 ], [ %300, %127 ]
  %150 = phi float [ 0.000000e+00, %4 ], [ %302, %127 ]
  %151 = phi float [ 0.000000e+00, %4 ], [ %303, %127 ]
  %152 = phi float [ 0.000000e+00, %4 ], [ %304, %127 ]
  %153 = phi float [ 0.000000e+00, %4 ], [ %305, %127 ]
  %154 = phi float [ 0.000000e+00, %4 ], [ %307, %127 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %308, %127 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %309, %127 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %310, %127 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %312, %127 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %313, %127 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %314, %127 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %315, %127 ]
  %162 = icmp samesign ult i64 %indvars.iv, 21, !dbg !35
  %163 = add i32 %128, 1, !dbg !35
  %164 = icmp slt i32 %163, 3, !dbg !35
  %165 = select i1 %164, i32 %163, i32 0, !dbg !35
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %166 = shl i32 %165, 11, !dbg !30
  %167 = sext i32 %166 to i64, !dbg !30
  %168 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %167, !dbg !30
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %168, i64 %95, !dbg !30
  %170 = ptrtoint ptr addrspace(3) %169 to i64, !dbg !30
  %171 = trunc i64 %170 to i32, !dbg !30
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %171) #1, !dbg !30
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !30
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !30
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !30
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %168, i64 %100, !dbg !30
  %178 = ptrtoint ptr addrspace(3) %177 to i64, !dbg !30
  %179 = trunc i64 %178 to i32, !dbg !30
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %179) #1, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !30
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !30
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !30
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !30
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %168, i64 %104, !dbg !30
  %186 = ptrtoint ptr addrspace(3) %185 to i64, !dbg !30
  %187 = trunc i64 %186 to i32, !dbg !30
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %187) #1, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !30
  %193 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %168, i64 %106, !dbg !30
  %194 = ptrtoint ptr addrspace(3) %193 to i64, !dbg !30
  %195 = trunc i64 %194 to i32, !dbg !30
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %195) #1, !dbg !30
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !30
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !30
  %201 = shl i32 %165, 12, !dbg !33
  %202 = sext i32 %201 to i64, !dbg !33
  %203 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %202, !dbg !33
  %204 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %203, i64 %113, !dbg !33
  %205 = ptrtoint ptr addrspace(3) %204 to i64, !dbg !33
  %206 = trunc i64 %205 to i32, !dbg !33
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %206) #1, !dbg !33
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !33
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !33
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !33
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !33
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %203, i64 %118, !dbg !33
  %213 = ptrtoint ptr addrspace(3) %212 to i64, !dbg !33
  %214 = trunc i64 %213 to i32, !dbg !33
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %214) #1, !dbg !33
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !33
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !33
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !33
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !33
  %220 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %203, i64 %120, !dbg !33
  %221 = ptrtoint ptr addrspace(3) %220 to i64, !dbg !33
  %222 = trunc i64 %221 to i32, !dbg !33
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %222) #1, !dbg !33
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !33
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !33
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !33
  %228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %203, i64 %122, !dbg !33
  %229 = ptrtoint ptr addrspace(3) %228 to i64, !dbg !33
  %230 = trunc i64 %229 to i32, !dbg !33
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %230) #1, !dbg !33
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !33
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !33
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !33
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !33
  %236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %130, float %131, float %132, float %133, i32 %173, i32 %174, i32 %175, i32 %176, i32 %208, i32 %209) #1, !dbg !36
  %237 = extractvalue { float, float, float, float } %236, 0, !dbg !36
  %238 = extractvalue { float, float, float, float } %236, 1, !dbg !36
  %239 = extractvalue { float, float, float, float } %236, 2, !dbg !36
  %240 = extractvalue { float, float, float, float } %236, 3, !dbg !36
  %241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %134, float %135, float %136, float %137, i32 %173, i32 %174, i32 %175, i32 %176, i32 %216, i32 %217) #1, !dbg !36
  %242 = extractvalue { float, float, float, float } %241, 0, !dbg !36
  %243 = extractvalue { float, float, float, float } %241, 1, !dbg !36
  %244 = extractvalue { float, float, float, float } %241, 2, !dbg !36
  %245 = extractvalue { float, float, float, float } %241, 3, !dbg !36
  %246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %138, float %139, float %140, float %141, i32 %173, i32 %174, i32 %175, i32 %176, i32 %224, i32 %225) #1, !dbg !36
  %247 = extractvalue { float, float, float, float } %246, 0, !dbg !36
  %248 = extractvalue { float, float, float, float } %246, 1, !dbg !36
  %249 = extractvalue { float, float, float, float } %246, 2, !dbg !36
  %250 = extractvalue { float, float, float, float } %246, 3, !dbg !36
  %251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %173, i32 %174, i32 %175, i32 %176, i32 %232, i32 %233) #1, !dbg !36
  %252 = extractvalue { float, float, float, float } %251, 0, !dbg !36
  %253 = extractvalue { float, float, float, float } %251, 1, !dbg !36
  %254 = extractvalue { float, float, float, float } %251, 2, !dbg !36
  %255 = extractvalue { float, float, float, float } %251, 3, !dbg !36
  %256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %146, float %147, float %148, float %149, i32 %189, i32 %190, i32 %191, i32 %192, i32 %208, i32 %209) #1, !dbg !36
  %257 = extractvalue { float, float, float, float } %256, 0, !dbg !36
  %258 = extractvalue { float, float, float, float } %256, 1, !dbg !36
  %259 = extractvalue { float, float, float, float } %256, 2, !dbg !36
  %260 = extractvalue { float, float, float, float } %256, 3, !dbg !36
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %189, i32 %190, i32 %191, i32 %192, i32 %216, i32 %217) #1, !dbg !36
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !36
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !36
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !36
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !36
  %266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %154, float %155, float %156, float %157, i32 %189, i32 %190, i32 %191, i32 %192, i32 %224, i32 %225) #1, !dbg !36
  %267 = extractvalue { float, float, float, float } %266, 0, !dbg !36
  %268 = extractvalue { float, float, float, float } %266, 1, !dbg !36
  %269 = extractvalue { float, float, float, float } %266, 2, !dbg !36
  %270 = extractvalue { float, float, float, float } %266, 3, !dbg !36
  %271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %158, float %159, float %160, float %161, i32 %189, i32 %190, i32 %191, i32 %192, i32 %232, i32 %233) #1, !dbg !36
  %272 = extractvalue { float, float, float, float } %271, 0, !dbg !36
  %273 = extractvalue { float, float, float, float } %271, 1, !dbg !36
  %274 = extractvalue { float, float, float, float } %271, 2, !dbg !36
  %275 = extractvalue { float, float, float, float } %271, 3, !dbg !36
  %276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %237, float %238, float %239, float %240, i32 %181, i32 %182, i32 %183, i32 %184, i32 %210, i32 %211) #1, !dbg !36
  %277 = extractvalue { float, float, float, float } %276, 0, !dbg !36
  %278 = extractvalue { float, float, float, float } %276, 1, !dbg !36
  %279 = extractvalue { float, float, float, float } %276, 2, !dbg !36
  %280 = extractvalue { float, float, float, float } %276, 3, !dbg !36
  %281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %242, float %243, float %244, float %245, i32 %181, i32 %182, i32 %183, i32 %184, i32 %218, i32 %219) #1, !dbg !36
  %282 = extractvalue { float, float, float, float } %281, 0, !dbg !36
  %283 = extractvalue { float, float, float, float } %281, 1, !dbg !36
  %284 = extractvalue { float, float, float, float } %281, 2, !dbg !36
  %285 = extractvalue { float, float, float, float } %281, 3, !dbg !36
  %286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %247, float %248, float %249, float %250, i32 %181, i32 %182, i32 %183, i32 %184, i32 %226, i32 %227) #1, !dbg !36
  %287 = extractvalue { float, float, float, float } %286, 0, !dbg !36
  %288 = extractvalue { float, float, float, float } %286, 1, !dbg !36
  %289 = extractvalue { float, float, float, float } %286, 2, !dbg !36
  %290 = extractvalue { float, float, float, float } %286, 3, !dbg !36
  %291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %252, float %253, float %254, float %255, i32 %181, i32 %182, i32 %183, i32 %184, i32 %234, i32 %235) #1, !dbg !36
  %292 = extractvalue { float, float, float, float } %291, 0, !dbg !36
  %293 = extractvalue { float, float, float, float } %291, 1, !dbg !36
  %294 = extractvalue { float, float, float, float } %291, 2, !dbg !36
  %295 = extractvalue { float, float, float, float } %291, 3, !dbg !36
  %296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %257, float %258, float %259, float %260, i32 %197, i32 %198, i32 %199, i32 %200, i32 %210, i32 %211) #1, !dbg !36
  %297 = extractvalue { float, float, float, float } %296, 0, !dbg !36
  %298 = extractvalue { float, float, float, float } %296, 1, !dbg !36
  %299 = extractvalue { float, float, float, float } %296, 2, !dbg !36
  %300 = extractvalue { float, float, float, float } %296, 3, !dbg !36
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %262, float %263, float %264, float %265, i32 %197, i32 %198, i32 %199, i32 %200, i32 %218, i32 %219) #1, !dbg !36
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !36
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !36
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !36
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !36
  %306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %267, float %268, float %269, float %270, i32 %197, i32 %198, i32 %199, i32 %200, i32 %226, i32 %227) #1, !dbg !36
  %307 = extractvalue { float, float, float, float } %306, 0, !dbg !36
  %308 = extractvalue { float, float, float, float } %306, 1, !dbg !36
  %309 = extractvalue { float, float, float, float } %306, 2, !dbg !36
  %310 = extractvalue { float, float, float, float } %306, 3, !dbg !36
  %311 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %272, float %273, float %274, float %275, i32 %197, i32 %198, i32 %199, i32 %200, i32 %234, i32 %235) #1, !dbg !36
  %312 = extractvalue { float, float, float, float } %311, 0, !dbg !36
  %313 = extractvalue { float, float, float, float } %311, 1, !dbg !36
  %314 = extractvalue { float, float, float, float } %311, 2, !dbg !36
  %315 = extractvalue { float, float, float, float } %311, 3, !dbg !36
  %316 = add i32 %129, 1, !dbg !35
  %317 = icmp slt i32 %316, 3, !dbg !35
  %318 = select i1 %317, i32 %316, i32 0, !dbg !35
  %319 = shl nuw nsw i64 %indvars.iv, 5, !dbg !37
  %320 = add nuw nsw i64 %319, %123
  %gep151 = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %320, !dbg !29
  %321 = shl i32 %318, 11, !dbg !30
  %322 = sext i32 %321 to i64, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %gep = getelementptr bfloat, ptr addrspace(3) %42, i64 %322, !dbg !30
  %323 = select i1 %162, i32 16, i32 0, !dbg !30
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep151, i32 %323) #1, !dbg !30
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !30
  %gep153 = getelementptr bfloat, ptr addrspace(1) %invariant.gep152, i64 %320, !dbg !32
  %gep155 = getelementptr bfloat, ptr addrspace(1) %invariant.gep154, i64 %320, !dbg !32
  %324 = shl i32 %318, 12, !dbg !33
  %325 = sext i32 %324 to i64, !dbg !33
  %326 = getelementptr bfloat, ptr addrspace(3) @global_smem, i64 %325, !dbg !33
  %327 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %326, i64 %41, !dbg !33
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %326, i64 %55, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %327, ptr addrspace(1) %gep153, i32 %323) #1, !dbg !33
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %328, ptr addrspace(1) %gep155, i32 %323) #1, !dbg !33
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 24, !dbg !35
  br i1 %exitcond.not, label %329, label %127, !dbg !35

329:                                              ; preds = %127
  %330 = and i32 %25, 120, !dbg !22
  %331 = or disjoint i32 %24, %330, !dbg !23
  %332 = lshr i32 %15, 4, !dbg !19
  %333 = and i32 %332, 15, !dbg !19
  %334 = or disjoint i32 %333, %14, !dbg !20
  %335 = or disjoint i32 %334, 48, !dbg !20
  %336 = or disjoint i32 %334, 32, !dbg !20
  %337 = or disjoint i32 %334, 16, !dbg !20
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %338 = icmp slt i32 %334, 77, !dbg !38
  %339 = icmp slt i32 %337, 77, !dbg !38
  %340 = icmp slt i32 %336, 77, !dbg !38
  %341 = icmp slt i32 %335, 77, !dbg !38
  %342 = icmp slt i32 %331, 3072, !dbg !39
  %343 = and i1 %338, %342, !dbg !40
  %344 = and i1 %339, %342, !dbg !40
  %345 = and i1 %340, %342, !dbg !40
  %346 = and i1 %341, %342, !dbg !40
  %347 = mul i32 %334, 3072, !dbg !41
  %348 = mul i32 %337, 3072, !dbg !41
  %349 = mul i32 %336, 3072, !dbg !41
  %350 = mul i32 %335, 3072, !dbg !41
  %351 = add i32 %347, %331, !dbg !42
  %352 = add i32 %348, %331, !dbg !42
  %353 = add i32 %349, %331, !dbg !42
  %354 = add i32 %350, %331, !dbg !42
  %355 = sext i32 %351 to i64, !dbg !43
  %356 = getelementptr bfloat, ptr addrspace(1) %2, i64 %355, !dbg !43
  %357 = sext i32 %352 to i64, !dbg !43
  %358 = getelementptr bfloat, ptr addrspace(1) %2, i64 %357, !dbg !43
  %359 = sext i32 %353 to i64, !dbg !43
  %360 = getelementptr bfloat, ptr addrspace(1) %2, i64 %359, !dbg !43
  %361 = sext i32 %354 to i64, !dbg !43
  %362 = getelementptr bfloat, ptr addrspace(1) %2, i64 %361, !dbg !43
  %363 = fptrunc float %277 to bfloat, !dbg !44
  %364 = fptrunc float %278 to bfloat, !dbg !44
  %365 = fptrunc float %279 to bfloat, !dbg !44
  %366 = fptrunc float %280 to bfloat, !dbg !44
  %367 = fptrunc float %282 to bfloat, !dbg !44
  %368 = fptrunc float %283 to bfloat, !dbg !44
  %369 = fptrunc float %284 to bfloat, !dbg !44
  %370 = fptrunc float %285 to bfloat, !dbg !44
  %371 = fptrunc float %287 to bfloat, !dbg !44
  %372 = fptrunc float %288 to bfloat, !dbg !44
  %373 = fptrunc float %289 to bfloat, !dbg !44
  %374 = fptrunc float %290 to bfloat, !dbg !44
  %375 = fptrunc float %292 to bfloat, !dbg !44
  %376 = fptrunc float %293 to bfloat, !dbg !44
  %377 = fptrunc float %294 to bfloat, !dbg !44
  %378 = fptrunc float %295 to bfloat, !dbg !44
  %379 = fptrunc float %297 to bfloat, !dbg !44
  %380 = fptrunc float %298 to bfloat, !dbg !44
  %381 = fptrunc float %299 to bfloat, !dbg !44
  %382 = fptrunc float %300 to bfloat, !dbg !44
  %383 = fptrunc float %302 to bfloat, !dbg !44
  %384 = fptrunc float %303 to bfloat, !dbg !44
  %385 = fptrunc float %304 to bfloat, !dbg !44
  %386 = fptrunc float %305 to bfloat, !dbg !44
  %387 = fptrunc float %307 to bfloat, !dbg !44
  %388 = fptrunc float %308 to bfloat, !dbg !44
  %389 = fptrunc float %309 to bfloat, !dbg !44
  %390 = fptrunc float %310 to bfloat, !dbg !44
  %391 = fptrunc float %312 to bfloat, !dbg !44
  %392 = fptrunc float %313 to bfloat, !dbg !44
  %393 = fptrunc float %314 to bfloat, !dbg !44
  %394 = fptrunc float %315 to bfloat, !dbg !44
  %395 = shl i32 %15, 1, !dbg !44
  %396 = and i32 %395, 6, !dbg !44
  %397 = shl i32 %15, 5, !dbg !44
  %398 = and i32 %397, 384, !dbg !44
  %399 = or disjoint i32 %398, %396, !dbg !44
  %400 = shl nuw nsw i32 %17, 5, !dbg !44
  %401 = or disjoint i32 %399, %400, !dbg !44
  %402 = shl nuw nsw i32 %19, 4, !dbg !44
  %403 = or disjoint i32 %401, %402, !dbg !44
  %404 = or disjoint i32 %109, %403, !dbg !44
  %405 = and i32 %25, 2040, !dbg !44
  %406 = lshr i32 %403, 4, !dbg !44
  %407 = add nuw nsw i32 %404, %406, !dbg !44
  %408 = zext nneg i32 %407 to i64, !dbg !44
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %408, !dbg !44
  %410 = bitcast bfloat %363 to i16, !dbg !44
  %411 = bitcast bfloat %364 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %409, i16 %410, i16 %411, i1 true) #1, !dbg !44
  %412 = or disjoint i32 %404, 1024, !dbg !44
  %413 = lshr i32 %412, 4, !dbg !44
  %414 = and i32 %413, 268435448, !dbg !44
  %415 = add nuw nsw i32 %414, %412, !dbg !44
  %416 = zext nneg i32 %415 to i64, !dbg !44
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %416, !dbg !44
  %418 = bitcast bfloat %365 to i16, !dbg !44
  %419 = bitcast bfloat %366 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %417, i16 %418, i16 %419, i1 true) #1, !dbg !44
  %420 = or disjoint i32 %404, 32, !dbg !44
  %421 = add nuw nsw i32 %420, %406, !dbg !44
  %422 = zext nneg i32 %421 to i64, !dbg !44
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %422, !dbg !44
  %424 = bitcast bfloat %367 to i16, !dbg !44
  %425 = bitcast bfloat %368 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %423, i16 %424, i16 %425, i1 true) #1, !dbg !44
  %426 = or disjoint i32 %404, 1056, !dbg !44
  %427 = lshr i32 %426, 4, !dbg !44
  %428 = and i32 %427, 268435448, !dbg !44
  %429 = add nuw nsw i32 %428, %426, !dbg !44
  %430 = zext nneg i32 %429 to i64, !dbg !44
  %431 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %430, !dbg !44
  %432 = bitcast bfloat %369 to i16, !dbg !44
  %433 = bitcast bfloat %370 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %431, i16 %432, i16 %433, i1 true) #1, !dbg !44
  %434 = or disjoint i32 %404, 64, !dbg !44
  %435 = add nuw nsw i32 %434, %406, !dbg !44
  %436 = zext nneg i32 %435 to i64, !dbg !44
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %436, !dbg !44
  %438 = bitcast bfloat %371 to i16, !dbg !44
  %439 = bitcast bfloat %372 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %437, i16 %438, i16 %439, i1 true) #1, !dbg !44
  %440 = or disjoint i32 %404, 1088, !dbg !44
  %441 = lshr i32 %440, 4, !dbg !44
  %442 = and i32 %441, 268435448, !dbg !44
  %443 = add nuw nsw i32 %442, %440, !dbg !44
  %444 = zext nneg i32 %443 to i64, !dbg !44
  %445 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %444, !dbg !44
  %446 = bitcast bfloat %373 to i16, !dbg !44
  %447 = bitcast bfloat %374 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %445, i16 %446, i16 %447, i1 true) #1, !dbg !44
  %448 = or disjoint i32 %404, 96, !dbg !44
  %449 = add nuw nsw i32 %448, %406, !dbg !44
  %450 = zext nneg i32 %449 to i64, !dbg !44
  %451 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %450, !dbg !44
  %452 = bitcast bfloat %375 to i16, !dbg !44
  %453 = bitcast bfloat %376 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %451, i16 %452, i16 %453, i1 true) #1, !dbg !44
  %454 = or disjoint i32 %404, 1120, !dbg !44
  %455 = lshr i32 %454, 4, !dbg !44
  %456 = and i32 %455, 268435448, !dbg !44
  %457 = add nuw nsw i32 %456, %454, !dbg !44
  %458 = zext nneg i32 %457 to i64, !dbg !44
  %459 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %458, !dbg !44
  %460 = bitcast bfloat %377 to i16, !dbg !44
  %461 = bitcast bfloat %378 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %459, i16 %460, i16 %461, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %462 = lshr i32 %25, 4, !dbg !44
  %463 = and i32 %462, 120, !dbg !44
  %464 = add nuw nsw i32 %463, %405, !dbg !44
  %465 = zext nneg i32 %464 to i64, !dbg !44
  %466 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %465, !dbg !44
  %467 = load <4 x i32>, ptr addrspace(3) %466, align 16, !dbg !44
  %468 = or disjoint i32 %405, 2048, !dbg !44
  %469 = lshr i32 %468, 4, !dbg !44
  %470 = and i32 %469, 248, !dbg !44
  %471 = add nuw nsw i32 %470, %468, !dbg !44
  %472 = zext nneg i32 %471 to i64, !dbg !44
  %473 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i64 %472, !dbg !44
  %474 = load <4 x i32>, ptr addrspace(3) %473, align 16, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %475 = bitcast bfloat %379 to i16, !dbg !44
  %476 = bitcast bfloat %380 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %409, i16 %475, i16 %476, i1 true) #1, !dbg !44
  %477 = bitcast bfloat %381 to i16, !dbg !44
  %478 = bitcast bfloat %382 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %417, i16 %477, i16 %478, i1 true) #1, !dbg !44
  %479 = bitcast bfloat %383 to i16, !dbg !44
  %480 = bitcast bfloat %384 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %423, i16 %479, i16 %480, i1 true) #1, !dbg !44
  %481 = bitcast bfloat %385 to i16, !dbg !44
  %482 = bitcast bfloat %386 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %431, i16 %481, i16 %482, i1 true) #1, !dbg !44
  %483 = bitcast bfloat %387 to i16, !dbg !44
  %484 = bitcast bfloat %388 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %437, i16 %483, i16 %484, i1 true) #1, !dbg !44
  %485 = bitcast bfloat %389 to i16, !dbg !44
  %486 = bitcast bfloat %390 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %445, i16 %485, i16 %486, i1 true) #1, !dbg !44
  %487 = bitcast bfloat %391 to i16, !dbg !44
  %488 = bitcast bfloat %392 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %451, i16 %487, i16 %488, i1 true) #1, !dbg !44
  %489 = bitcast bfloat %393 to i16, !dbg !44
  %490 = bitcast bfloat %394 to i16, !dbg !44
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) nonnull %459, i16 %489, i16 %490, i1 true) #1, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %491 = load <4 x i32>, ptr addrspace(3) %466, align 16, !dbg !44
  %492 = load <4 x i32>, ptr addrspace(3) %473, align 16, !dbg !44
  %.extract = extractelement <4 x i32> %467, i64 0, !dbg !44
  %.extract54 = extractelement <4 x i32> %467, i64 1, !dbg !44
  %.extract56 = extractelement <4 x i32> %467, i64 2, !dbg !44
  %.extract58 = extractelement <4 x i32> %467, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract54, i32 %.extract56, i32 %.extract58, ptr addrspace(1) %356, i1 %343) #1, !dbg !44
  %.extract60 = extractelement <4 x i32> %474, i64 0, !dbg !44
  %.extract62 = extractelement <4 x i32> %474, i64 1, !dbg !44
  %.extract64 = extractelement <4 x i32> %474, i64 2, !dbg !44
  %.extract66 = extractelement <4 x i32> %474, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract60, i32 %.extract62, i32 %.extract64, i32 %.extract66, ptr addrspace(1) %358, i1 %344) #1, !dbg !44
  %.extract68 = extractelement <4 x i32> %491, i64 0, !dbg !44
  %.extract70 = extractelement <4 x i32> %491, i64 1, !dbg !44
  %.extract72 = extractelement <4 x i32> %491, i64 2, !dbg !44
  %.extract74 = extractelement <4 x i32> %491, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract68, i32 %.extract70, i32 %.extract72, i32 %.extract74, ptr addrspace(1) %360, i1 %345) #1, !dbg !44
  %.extract76 = extractelement <4 x i32> %492, i64 0, !dbg !44
  %.extract78 = extractelement <4 x i32> %492, i64 1, !dbg !44
  %.extract80 = extractelement <4 x i32> %492, i64 2, !dbg !44
  %.extract82 = extractelement <4 x i32> %492, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract76, i32 %.extract78, i32 %.extract80, i32 %.extract82, ptr addrspace(1) %362, i1 %346) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyt7livmg5v7bp3o5cbvkeexlsb6nwfodwo4bklg3do6s2yvfq7q.py", directory: "/tmp/torchinductor_root/yt")
!4 = !{ptr @triton_mm, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 17, type: !7, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 40, column: 24, scope: !6)
!10 = !DILocation(line: 46, column: 22, scope: !6)
!11 = !DILocation(line: 47, column: 41, scope: !6)
!12 = !DILocation(line: 47, column: 30, scope: !6)
!13 = !DILocation(line: 47, column: 50, scope: !6)
!14 = !DILocation(line: 48, column: 40, scope: !6)
!15 = !DILocation(line: 48, column: 34, scope: !6)
!16 = !DILocation(line: 49, column: 19, scope: !6)
!17 = !DILocation(line: 49, column: 30, scope: !6)
!18 = !DILocation(line: 51, column: 17, scope: !6)
!19 = !DILocation(line: 51, column: 40, scope: !6)
!20 = !DILocation(line: 51, column: 27, scope: !6)
!21 = !DILocation(line: 52, column: 17, scope: !6)
!22 = !DILocation(line: 52, column: 40, scope: !6)
!23 = !DILocation(line: 52, column: 27, scope: !6)
!24 = !DILocation(line: 54, column: 57, scope: !6)
!25 = !DILocation(line: 58, column: 57, scope: !6)
!26 = !DILocation(line: 71, column: 29, scope: !6)
!27 = !DILocation(line: 77, column: 54, scope: !6)
!28 = !DILocation(line: 71, column: 25, scope: !6)
!29 = !DILocation(line: 72, column: 25, scope: !6)
!30 = !DILocation(line: 72, column: 20, scope: !6)
!31 = !DILocation(line: 77, column: 50, scope: !6)
!32 = !DILocation(line: 77, column: 25, scope: !6)
!33 = !DILocation(line: 77, column: 20, scope: !6)
!34 = !DILocation(line: 66, column: 42, scope: !6)
!35 = !DILocation(line: 64, column: 26, scope: !6)
!36 = !DILocation(line: 78, column: 25, scope: !6)
!37 = !DILocation(line: 66, column: 50, scope: !6)
!38 = !DILocation(line: 85, column: 20, scope: !6)
!39 = !DILocation(line: 85, column: 34, scope: !6)
!40 = !DILocation(line: 85, column: 26, scope: !6)
!41 = !DILocation(line: 88, column: 26, scope: !6)
!42 = !DILocation(line: 88, column: 21, scope: !6)
!43 = !DILocation(line: 89, column: 25, scope: !6)
!44 = !DILocation(line: 89, column: 67, scope: !6)
!45 = !DILocation(line: 89, column: 4, scope: !6)
